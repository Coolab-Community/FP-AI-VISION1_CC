
STM32H747I_DISCO_FoodReco_Float_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .isr_vector_m4 00000008  08100000  08100000  00050000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .rodata2      000e4e1e  08100020  08100020  00050020  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .text         0001fc80  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00004b1c  0801ff20  0801ff20  0002ff20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  08024a3c  08024a3c  00034a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000004  08024a44  08024a44  00034a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08024a48  08024a48  00034a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000027d4  24000000  08024a4c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .uart_rx_buffer 00000020  240027e0  08027220  000427e0  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 10 .uart_tx_buffer 00000520  24002800  08027240  00042800  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00065300  24002d20  08027760  00042d20  2**5
                  ALLOC
 12 ._user_heap_stack 00001400  24068020  08027760  00048020  2**0
                  ALLOC
 13 .sram_section 000003c0  30000000  30000000  00140000  2**2
                  ALLOC
 14 .sdram_section 00fd3300  d0000000  d0000000  001c0000  2**5
                  ALLOC
 15 .qspi_section 0007dcc8  90000000  90000000  00140000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .ARM.attributes 0000002e  00000000  00000000  001bdcc8  2**0
                  CONTENTS, READONLY
 17 .debug_line   0003e367  00000000  00000000  001bdcf6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_info   000aab30  00000000  00000000  001fc05d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 0000c263  00000000  00000000  002a6b8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_aranges 00002658  00000000  00000000  002b2df0  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    001c95e9  00000000  00000000  002b5448  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 0000a000  00000000  00000000  0047ea38  2**3
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_loc    00048659  00000000  00000000  00488a38  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  000517d2  00000000  00000000  004d1091  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .comment      0000007b  00000000  00000000  00522863  2**0
                  CONTENTS, READONLY
 26 .debug_frame  0000986c  00000000  00000000  005228e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24002d20 	.word	0x24002d20
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801ff08 	.word	0x0801ff08

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24002d24 	.word	0x24002d24
 80002dc:	0801ff08 	.word	0x0801ff08

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b972 	b.w	80006ac <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9e08      	ldr	r6, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	4688      	mov	r8, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d14b      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003ee:	428a      	cmp	r2, r1
 80003f0:	4615      	mov	r5, r2
 80003f2:	d967      	bls.n	80004c4 <__udivmoddi4+0xe4>
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0720 	rsb	r7, r2, #32
 80003fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000402:	fa20 f707 	lsr.w	r7, r0, r7
 8000406:	4095      	lsls	r5, r2
 8000408:	ea47 0803 	orr.w	r8, r7, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fbb8 f7fe 	udiv	r7, r8, lr
 8000418:	fa1f fc85 	uxth.w	ip, r5
 800041c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000420:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000424:	fb07 f10c 	mul.w	r1, r7, ip
 8000428:	4299      	cmp	r1, r3
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x60>
 800042c:	18eb      	adds	r3, r5, r3
 800042e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000432:	f080 811b 	bcs.w	800066c <__udivmoddi4+0x28c>
 8000436:	4299      	cmp	r1, r3
 8000438:	f240 8118 	bls.w	800066c <__udivmoddi4+0x28c>
 800043c:	3f02      	subs	r7, #2
 800043e:	442b      	add	r3, r5
 8000440:	1a5b      	subs	r3, r3, r1
 8000442:	b2a4      	uxth	r4, r4
 8000444:	fbb3 f0fe 	udiv	r0, r3, lr
 8000448:	fb0e 3310 	mls	r3, lr, r0, r3
 800044c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000450:	fb00 fc0c 	mul.w	ip, r0, ip
 8000454:	45a4      	cmp	ip, r4
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x8c>
 8000458:	192c      	adds	r4, r5, r4
 800045a:	f100 33ff 	add.w	r3, r0, #4294967295
 800045e:	f080 8107 	bcs.w	8000670 <__udivmoddi4+0x290>
 8000462:	45a4      	cmp	ip, r4
 8000464:	f240 8104 	bls.w	8000670 <__udivmoddi4+0x290>
 8000468:	3802      	subs	r0, #2
 800046a:	442c      	add	r4, r5
 800046c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000470:	eba4 040c 	sub.w	r4, r4, ip
 8000474:	2700      	movs	r7, #0
 8000476:	b11e      	cbz	r6, 8000480 <__udivmoddi4+0xa0>
 8000478:	40d4      	lsrs	r4, r2
 800047a:	2300      	movs	r3, #0
 800047c:	e9c6 4300 	strd	r4, r3, [r6]
 8000480:	4639      	mov	r1, r7
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d909      	bls.n	800049e <__udivmoddi4+0xbe>
 800048a:	2e00      	cmp	r6, #0
 800048c:	f000 80eb 	beq.w	8000666 <__udivmoddi4+0x286>
 8000490:	2700      	movs	r7, #0
 8000492:	e9c6 0100 	strd	r0, r1, [r6]
 8000496:	4638      	mov	r0, r7
 8000498:	4639      	mov	r1, r7
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	fab3 f783 	clz	r7, r3
 80004a2:	2f00      	cmp	r7, #0
 80004a4:	d147      	bne.n	8000536 <__udivmoddi4+0x156>
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d302      	bcc.n	80004b0 <__udivmoddi4+0xd0>
 80004aa:	4282      	cmp	r2, r0
 80004ac:	f200 80fa 	bhi.w	80006a4 <__udivmoddi4+0x2c4>
 80004b0:	1a84      	subs	r4, r0, r2
 80004b2:	eb61 0303 	sbc.w	r3, r1, r3
 80004b6:	2001      	movs	r0, #1
 80004b8:	4698      	mov	r8, r3
 80004ba:	2e00      	cmp	r6, #0
 80004bc:	d0e0      	beq.n	8000480 <__udivmoddi4+0xa0>
 80004be:	e9c6 4800 	strd	r4, r8, [r6]
 80004c2:	e7dd      	b.n	8000480 <__udivmoddi4+0xa0>
 80004c4:	b902      	cbnz	r2, 80004c8 <__udivmoddi4+0xe8>
 80004c6:	deff      	udf	#255	; 0xff
 80004c8:	fab2 f282 	clz	r2, r2
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f040 808f 	bne.w	80005f0 <__udivmoddi4+0x210>
 80004d2:	1b49      	subs	r1, r1, r5
 80004d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d8:	fa1f f885 	uxth.w	r8, r5
 80004dc:	2701      	movs	r7, #1
 80004de:	fbb1 fcfe 	udiv	ip, r1, lr
 80004e2:	0c23      	lsrs	r3, r4, #16
 80004e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004ec:	fb08 f10c 	mul.w	r1, r8, ip
 80004f0:	4299      	cmp	r1, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x124>
 80004f4:	18eb      	adds	r3, r5, r3
 80004f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x122>
 80004fc:	4299      	cmp	r1, r3
 80004fe:	f200 80cd 	bhi.w	800069c <__udivmoddi4+0x2bc>
 8000502:	4684      	mov	ip, r0
 8000504:	1a59      	subs	r1, r3, r1
 8000506:	b2a3      	uxth	r3, r4
 8000508:	fbb1 f0fe 	udiv	r0, r1, lr
 800050c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000510:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000514:	fb08 f800 	mul.w	r8, r8, r0
 8000518:	45a0      	cmp	r8, r4
 800051a:	d907      	bls.n	800052c <__udivmoddi4+0x14c>
 800051c:	192c      	adds	r4, r5, r4
 800051e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000522:	d202      	bcs.n	800052a <__udivmoddi4+0x14a>
 8000524:	45a0      	cmp	r8, r4
 8000526:	f200 80b6 	bhi.w	8000696 <__udivmoddi4+0x2b6>
 800052a:	4618      	mov	r0, r3
 800052c:	eba4 0408 	sub.w	r4, r4, r8
 8000530:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000534:	e79f      	b.n	8000476 <__udivmoddi4+0x96>
 8000536:	f1c7 0c20 	rsb	ip, r7, #32
 800053a:	40bb      	lsls	r3, r7
 800053c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000540:	ea4e 0e03 	orr.w	lr, lr, r3
 8000544:	fa01 f407 	lsl.w	r4, r1, r7
 8000548:	fa20 f50c 	lsr.w	r5, r0, ip
 800054c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000550:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000554:	4325      	orrs	r5, r4
 8000556:	fbb3 f9f8 	udiv	r9, r3, r8
 800055a:	0c2c      	lsrs	r4, r5, #16
 800055c:	fb08 3319 	mls	r3, r8, r9, r3
 8000560:	fa1f fa8e 	uxth.w	sl, lr
 8000564:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000568:	fb09 f40a 	mul.w	r4, r9, sl
 800056c:	429c      	cmp	r4, r3
 800056e:	fa02 f207 	lsl.w	r2, r2, r7
 8000572:	fa00 f107 	lsl.w	r1, r0, r7
 8000576:	d90b      	bls.n	8000590 <__udivmoddi4+0x1b0>
 8000578:	eb1e 0303 	adds.w	r3, lr, r3
 800057c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000580:	f080 8087 	bcs.w	8000692 <__udivmoddi4+0x2b2>
 8000584:	429c      	cmp	r4, r3
 8000586:	f240 8084 	bls.w	8000692 <__udivmoddi4+0x2b2>
 800058a:	f1a9 0902 	sub.w	r9, r9, #2
 800058e:	4473      	add	r3, lr
 8000590:	1b1b      	subs	r3, r3, r4
 8000592:	b2ad      	uxth	r5, r5
 8000594:	fbb3 f0f8 	udiv	r0, r3, r8
 8000598:	fb08 3310 	mls	r3, r8, r0, r3
 800059c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80005a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80005a4:	45a2      	cmp	sl, r4
 80005a6:	d908      	bls.n	80005ba <__udivmoddi4+0x1da>
 80005a8:	eb1e 0404 	adds.w	r4, lr, r4
 80005ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80005b0:	d26b      	bcs.n	800068a <__udivmoddi4+0x2aa>
 80005b2:	45a2      	cmp	sl, r4
 80005b4:	d969      	bls.n	800068a <__udivmoddi4+0x2aa>
 80005b6:	3802      	subs	r0, #2
 80005b8:	4474      	add	r4, lr
 80005ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005be:	fba0 8902 	umull	r8, r9, r0, r2
 80005c2:	eba4 040a 	sub.w	r4, r4, sl
 80005c6:	454c      	cmp	r4, r9
 80005c8:	46c2      	mov	sl, r8
 80005ca:	464b      	mov	r3, r9
 80005cc:	d354      	bcc.n	8000678 <__udivmoddi4+0x298>
 80005ce:	d051      	beq.n	8000674 <__udivmoddi4+0x294>
 80005d0:	2e00      	cmp	r6, #0
 80005d2:	d069      	beq.n	80006a8 <__udivmoddi4+0x2c8>
 80005d4:	ebb1 050a 	subs.w	r5, r1, sl
 80005d8:	eb64 0403 	sbc.w	r4, r4, r3
 80005dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005e0:	40fd      	lsrs	r5, r7
 80005e2:	40fc      	lsrs	r4, r7
 80005e4:	ea4c 0505 	orr.w	r5, ip, r5
 80005e8:	e9c6 5400 	strd	r5, r4, [r6]
 80005ec:	2700      	movs	r7, #0
 80005ee:	e747      	b.n	8000480 <__udivmoddi4+0xa0>
 80005f0:	f1c2 0320 	rsb	r3, r2, #32
 80005f4:	fa20 f703 	lsr.w	r7, r0, r3
 80005f8:	4095      	lsls	r5, r2
 80005fa:	fa01 f002 	lsl.w	r0, r1, r2
 80005fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000602:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000606:	4338      	orrs	r0, r7
 8000608:	0c01      	lsrs	r1, r0, #16
 800060a:	fbb3 f7fe 	udiv	r7, r3, lr
 800060e:	fa1f f885 	uxth.w	r8, r5
 8000612:	fb0e 3317 	mls	r3, lr, r7, r3
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb07 f308 	mul.w	r3, r7, r8
 800061e:	428b      	cmp	r3, r1
 8000620:	fa04 f402 	lsl.w	r4, r4, r2
 8000624:	d907      	bls.n	8000636 <__udivmoddi4+0x256>
 8000626:	1869      	adds	r1, r5, r1
 8000628:	f107 3cff 	add.w	ip, r7, #4294967295
 800062c:	d22f      	bcs.n	800068e <__udivmoddi4+0x2ae>
 800062e:	428b      	cmp	r3, r1
 8000630:	d92d      	bls.n	800068e <__udivmoddi4+0x2ae>
 8000632:	3f02      	subs	r7, #2
 8000634:	4429      	add	r1, r5
 8000636:	1acb      	subs	r3, r1, r3
 8000638:	b281      	uxth	r1, r0
 800063a:	fbb3 f0fe 	udiv	r0, r3, lr
 800063e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000642:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000646:	fb00 f308 	mul.w	r3, r0, r8
 800064a:	428b      	cmp	r3, r1
 800064c:	d907      	bls.n	800065e <__udivmoddi4+0x27e>
 800064e:	1869      	adds	r1, r5, r1
 8000650:	f100 3cff 	add.w	ip, r0, #4294967295
 8000654:	d217      	bcs.n	8000686 <__udivmoddi4+0x2a6>
 8000656:	428b      	cmp	r3, r1
 8000658:	d915      	bls.n	8000686 <__udivmoddi4+0x2a6>
 800065a:	3802      	subs	r0, #2
 800065c:	4429      	add	r1, r5
 800065e:	1ac9      	subs	r1, r1, r3
 8000660:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000664:	e73b      	b.n	80004de <__udivmoddi4+0xfe>
 8000666:	4637      	mov	r7, r6
 8000668:	4630      	mov	r0, r6
 800066a:	e709      	b.n	8000480 <__udivmoddi4+0xa0>
 800066c:	4607      	mov	r7, r0
 800066e:	e6e7      	b.n	8000440 <__udivmoddi4+0x60>
 8000670:	4618      	mov	r0, r3
 8000672:	e6fb      	b.n	800046c <__udivmoddi4+0x8c>
 8000674:	4541      	cmp	r1, r8
 8000676:	d2ab      	bcs.n	80005d0 <__udivmoddi4+0x1f0>
 8000678:	ebb8 0a02 	subs.w	sl, r8, r2
 800067c:	eb69 020e 	sbc.w	r2, r9, lr
 8000680:	3801      	subs	r0, #1
 8000682:	4613      	mov	r3, r2
 8000684:	e7a4      	b.n	80005d0 <__udivmoddi4+0x1f0>
 8000686:	4660      	mov	r0, ip
 8000688:	e7e9      	b.n	800065e <__udivmoddi4+0x27e>
 800068a:	4618      	mov	r0, r3
 800068c:	e795      	b.n	80005ba <__udivmoddi4+0x1da>
 800068e:	4667      	mov	r7, ip
 8000690:	e7d1      	b.n	8000636 <__udivmoddi4+0x256>
 8000692:	4681      	mov	r9, r0
 8000694:	e77c      	b.n	8000590 <__udivmoddi4+0x1b0>
 8000696:	3802      	subs	r0, #2
 8000698:	442c      	add	r4, r5
 800069a:	e747      	b.n	800052c <__udivmoddi4+0x14c>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	442b      	add	r3, r5
 80006a2:	e72f      	b.n	8000504 <__udivmoddi4+0x124>
 80006a4:	4638      	mov	r0, r7
 80006a6:	e708      	b.n	80004ba <__udivmoddi4+0xda>
 80006a8:	4637      	mov	r7, r6
 80006aa:	e6e9      	b.n	8000480 <__udivmoddi4+0xa0>

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <Reset_Handler_m4>:
    .section  .text.Reset_Handler_m4
  .weak  Reset_Handler_m4
  .type  Reset_Handler_m4, %function
Reset_Handler_m4:
 Infinite_Loop:
  b  Infinite_Loop
 80006b0:	e7fe      	b.n	80006b0 <Reset_Handler_m4>
	...

080006b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80006b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80006b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80006ba:	e003      	b.n	80006c4 <LoopCopyDataInit>

080006bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80006be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80006c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80006c2:	3104      	adds	r1, #4

080006c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80006c4:	480b      	ldr	r0, [pc, #44]	; (80006f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80006c6:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80006c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80006ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80006cc:	d3f6      	bcc.n	80006bc <CopyDataInit>
  ldr  r2, =_sbss
 80006ce:	4a0b      	ldr	r2, [pc, #44]	; (80006fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80006d0:	e002      	b.n	80006d8 <LoopFillZerobss>

080006d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80006d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80006d4:	f842 3b04 	str.w	r3, [r2], #4

080006d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80006d8:	4b09      	ldr	r3, [pc, #36]	; (8000700 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80006da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80006dc:	d3f9      	bcc.n	80006d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80006de:	f004 ff35 	bl	800554c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006e2:	f01d f9c5 	bl	801da70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006e6:	f004 f871 	bl	80047cc <main>
  bx  lr    
 80006ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80006ec:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80006f0:	08024a4c 	.word	0x08024a4c
  ldr  r0, =_sdata
 80006f4:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80006f8:	240027d4 	.word	0x240027d4
  ldr  r2, =_sbss
 80006fc:	24002d20 	.word	0x24002d20
  ldr  r3, = _ebss
 8000700:	24068020 	.word	0x24068020

08000704 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000704:	e7fe      	b.n	8000704 <ADC3_IRQHandler>
	...

08000708 <ai_get_input_height>:

/**
 * @brief Returns value of the height for the first input tensor
 * @retval ai_u16 Height for the first input tensor
 */
ai_u16 ai_get_input_height(void) { return (AI_BUFFER_HEIGHT(&ai_input[0])); }
 8000708:	4b01      	ldr	r3, [pc, #4]	; (8000710 <ai_get_input_height+0x8>)
 800070a:	88d8      	ldrh	r0, [r3, #6]
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	24002d3c 	.word	0x24002d3c

08000714 <ai_get_input_width>:

/**
 * @brief Returns value of the width for the first input tensor
 * @retval ai_u16 Width for the first input tensor
 */
ai_u16 ai_get_input_width(void) { return (AI_BUFFER_WIDTH(&ai_input[0])); }
 8000714:	4b01      	ldr	r3, [pc, #4]	; (800071c <ai_get_input_width+0x8>)
 8000716:	8918      	ldrh	r0, [r3, #8]
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	24002d3c 	.word	0x24002d3c

08000720 <ai_get_input_channels>:

/**
 * @brief Returns value of the channels for the first input tensor
 * @retval ai_u16 Channels for the first input tensor
 */
ai_u16 ai_get_input_channels(void) { return (AI_BUFFER_CHANNELS(&ai_input[0])); }
 8000720:	4b01      	ldr	r3, [pc, #4]	; (8000728 <ai_get_input_channels+0x8>)
 8000722:	8998      	ldrh	r0, [r3, #12]
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	24002d3c 	.word	0x24002d3c

0800072c <ai_get_input_format>:
 * @brief Returns the input format type
 * @retval ai_size Input format type: quantized (AI_BUFFER_FMT_TYPE_Q) or float (AI_BUFFER_FMT_TYPE_FLOAT)
 */
ai_size ai_get_input_format(void)
{
  ai_buffer_format fmt = AI_BUFFER_FORMAT(&ai_input[0]);
 800072c:	4b02      	ldr	r3, [pc, #8]	; (8000738 <ai_get_input_format+0xc>)
  return AI_BUFFER_FMT_GET_TYPE(fmt);
 800072e:	6818      	ldr	r0, [r3, #0]
}
 8000730:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	24002d3c 	.word	0x24002d3c

0800073c <ai_get_output_format>:
 * @brief Returns the output format type
 * @retval ai_size Output format type: quantized (AI_BUFFER_FMT_TYPE_Q) or float (AI_BUFFER_FMT_TYPE_FLOAT)
 */
ai_size ai_get_output_format(void)
{
  ai_buffer_format fmt = AI_BUFFER_FORMAT(&ai_output[0]);
 800073c:	4b02      	ldr	r3, [pc, #8]	; (8000748 <ai_get_output_format+0xc>)
  return AI_BUFFER_FMT_GET_TYPE(fmt);
 800073e:	6818      	ldr	r0, [r3, #0]
}
 8000740:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	24002d54 	.word	0x24002d54

0800074c <ai_get_input_quantized_format>:
 * @brief Returns value of the input quantized format
 * @retval ai_size Input quantized format
 */
ai_size ai_get_input_quantized_format(void)
{
  ai_buffer_format fmt = AI_BUFFER_FORMAT(&ai_input[0]);
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <ai_get_input_quantized_format+0x1c>)
 800074e:	6818      	ldr	r0, [r3, #0]
 8000750:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
  return (AI_BUFFER_FMT_GET_BITS(fmt) - AI_BUFFER_FMT_GET_SIGN(fmt) - AI_BUFFER_FMT_GET_FBITS(fmt));
 8000754:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8000758:	f3c3 12c6 	ubfx	r2, r3, #7, #7
 800075c:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 8000760:	3840      	subs	r0, #64	; 0x40
 8000762:	1ad3      	subs	r3, r2, r3
}
 8000764:	1a18      	subs	r0, r3, r0
 8000766:	4770      	bx	lr
 8000768:	24002d3c 	.word	0x24002d3c

0800076c <ai_get_input_quantization_scheme>:
 * @brief Returns value of the scale for the input quantized format
 * @retval ai_size Scale for input quantized format
 */
ai_float ai_get_input_scale(void)
{
  return AI_BUFFER_META_INFO_INTQ_GET_SCALE(ai_input[0].meta_info, 0);
 800076c:	490f      	ldr	r1, [pc, #60]	; (80007ac <ai_get_input_quantization_scheme+0x40>)
 800076e:	694a      	ldr	r2, [r1, #20]
 8000770:	b1ca      	cbz	r2, 80007a6 <ai_get_input_quantization_scheme+0x3a>
 8000772:	6813      	ldr	r3, [r2, #0]
 8000774:	f013 0001 	ands.w	r0, r3, #1
 8000778:	d016      	beq.n	80007a8 <ai_get_input_quantization_scheme+0x3c>
 800077a:	6850      	ldr	r0, [r2, #4]
 800077c:	b1a0      	cbz	r0, 80007a8 <ai_get_input_quantization_scheme+0x3c>
 800077e:	6843      	ldr	r3, [r0, #4]
 8000780:	b18b      	cbz	r3, 80007a6 <ai_get_input_quantization_scheme+0x3a>
 8000782:	8840      	ldrh	r0, [r0, #2]
 8000784:	b180      	cbz	r0, 80007a8 <ai_get_input_quantization_scheme+0x3c>
 8000786:	681a      	ldr	r2, [r3, #0]
  ai_size sign = AI_BUFFER_FMT_GET_SIGN(fmt);  
 8000788:	680b      	ldr	r3, [r1, #0]
  if(scale==0)
 800078a:	edd2 7a00 	vldr	s15, [r2]
  ai_size sign = AI_BUFFER_FMT_GET_SIGN(fmt);  
 800078e:	f3c3 53c0 	ubfx	r3, r3, #23, #1
  if(scale==0)
 8000792:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800079a:	d004      	beq.n	80007a6 <ai_get_input_quantization_scheme+0x3a>
    if(sign==0)
 800079c:	2b00      	cmp	r3, #0
      return AI_SINT_Q;
 800079e:	bf0c      	ite	eq
 80007a0:	2001      	moveq	r0, #1
 80007a2:	2002      	movne	r0, #2
 80007a4:	4770      	bx	lr
    return AI_FXP_Q;
 80007a6:	2000      	movs	r0, #0
}
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	24002d3c 	.word	0x24002d3c

080007b0 <ai_get_output_quantization_scheme>:
 * @brief Returns value of the scale for the output quantized format
 * @retval ai_size Scale for output quantized format
 */
ai_float ai_get_output_scale(void)
{
  return AI_BUFFER_META_INFO_INTQ_GET_SCALE(ai_output[0].meta_info, 0);
 80007b0:	490f      	ldr	r1, [pc, #60]	; (80007f0 <ai_get_output_quantization_scheme+0x40>)
 80007b2:	694a      	ldr	r2, [r1, #20]
 80007b4:	b1ca      	cbz	r2, 80007ea <ai_get_output_quantization_scheme+0x3a>
 80007b6:	6813      	ldr	r3, [r2, #0]
 80007b8:	f013 0001 	ands.w	r0, r3, #1
 80007bc:	d016      	beq.n	80007ec <ai_get_output_quantization_scheme+0x3c>
 80007be:	6850      	ldr	r0, [r2, #4]
 80007c0:	b1a0      	cbz	r0, 80007ec <ai_get_output_quantization_scheme+0x3c>
 80007c2:	6843      	ldr	r3, [r0, #4]
 80007c4:	b18b      	cbz	r3, 80007ea <ai_get_output_quantization_scheme+0x3a>
 80007c6:	8840      	ldrh	r0, [r0, #2]
 80007c8:	b180      	cbz	r0, 80007ec <ai_get_output_quantization_scheme+0x3c>
 80007ca:	681a      	ldr	r2, [r3, #0]
  ai_size sign = AI_BUFFER_FMT_GET_SIGN(fmt);  
 80007cc:	680b      	ldr	r3, [r1, #0]
  if(scale==0)
 80007ce:	edd2 7a00 	vldr	s15, [r2]
  ai_size sign = AI_BUFFER_FMT_GET_SIGN(fmt);  
 80007d2:	f3c3 53c0 	ubfx	r3, r3, #23, #1
  if(scale==0)
 80007d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80007da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007de:	d004      	beq.n	80007ea <ai_get_output_quantization_scheme+0x3a>
    if(sign==0)
 80007e0:	2b00      	cmp	r3, #0
      return AI_SINT_Q;
 80007e2:	bf0c      	ite	eq
 80007e4:	2001      	moveq	r0, #1
 80007e6:	2002      	movne	r0, #2
 80007e8:	4770      	bx	lr
    return AI_FXP_Q;
 80007ea:	2000      	movs	r0, #0
}
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	24002d54 	.word	0x24002d54

080007f4 <ai_get_output_fxp_scale>:
  fmt_1 = AI_BUFFER_FORMAT(&ai_output[0]);
 80007f4:	4a07      	ldr	r2, [pc, #28]	; (8000814 <ai_get_output_fxp_scale+0x20>)
  scale = 1.0f / (0x1U << AI_BUFFER_FMT_GET_FBITS(fmt_1));
 80007f6:	2301      	movs	r3, #1
 80007f8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80007fc:	6812      	ldr	r2, [r2, #0]
 80007fe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000802:	3a40      	subs	r2, #64	; 0x40
 8000804:	4093      	lsls	r3, r2
 8000806:	ee00 3a10 	vmov	s0, r3
 800080a:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
 800080e:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8000812:	4770      	bx	lr
 8000814:	24002d54 	.word	0x24002d54

08000818 <ai_get_input_scale>:
  return AI_BUFFER_META_INFO_INTQ_GET_SCALE(ai_input[0].meta_info, 0);
 8000818:	4b09      	ldr	r3, [pc, #36]	; (8000840 <ai_get_input_scale+0x28>)
 800081a:	695b      	ldr	r3, [r3, #20]
 800081c:	b163      	cbz	r3, 8000838 <ai_get_input_scale+0x20>
 800081e:	681a      	ldr	r2, [r3, #0]
 8000820:	07d2      	lsls	r2, r2, #31
 8000822:	d509      	bpl.n	8000838 <ai_get_input_scale+0x20>
 8000824:	685b      	ldr	r3, [r3, #4]
 8000826:	b13b      	cbz	r3, 8000838 <ai_get_input_scale+0x20>
 8000828:	685a      	ldr	r2, [r3, #4]
 800082a:	b12a      	cbz	r2, 8000838 <ai_get_input_scale+0x20>
 800082c:	885b      	ldrh	r3, [r3, #2]
 800082e:	b11b      	cbz	r3, 8000838 <ai_get_input_scale+0x20>
 8000830:	6813      	ldr	r3, [r2, #0]
 8000832:	ed93 0a00 	vldr	s0, [r3]
 8000836:	4770      	bx	lr
 8000838:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8000844 <ai_get_input_scale+0x2c>
}
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	24002d3c 	.word	0x24002d3c
 8000844:	00000000 	.word	0x00000000

08000848 <ai_get_input_zero_point>:
  return AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(ai_input[0].meta_info, 0);
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <ai_get_input_zero_point+0x40>)
 800084a:	695a      	ldr	r2, [r3, #20]
 800084c:	b18a      	cbz	r2, 8000872 <ai_get_input_zero_point+0x2a>
 800084e:	6813      	ldr	r3, [r2, #0]
 8000850:	f013 0001 	ands.w	r0, r3, #1
 8000854:	d00c      	beq.n	8000870 <ai_get_input_zero_point+0x28>
 8000856:	6850      	ldr	r0, [r2, #4]
 8000858:	b150      	cbz	r0, 8000870 <ai_get_input_zero_point+0x28>
 800085a:	8802      	ldrh	r2, [r0, #0]
 800085c:	6843      	ldr	r3, [r0, #4]
 800085e:	0792      	lsls	r2, r2, #30
 8000860:	d509      	bpl.n	8000876 <ai_get_input_zero_point+0x2e>
 8000862:	b123      	cbz	r3, 800086e <ai_get_input_zero_point+0x26>
 8000864:	8840      	ldrh	r0, [r0, #2]
 8000866:	b118      	cbz	r0, 8000870 <ai_get_input_zero_point+0x28>
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	7818      	ldrb	r0, [r3, #0]
 800086c:	4770      	bx	lr
 800086e:	4618      	mov	r0, r3
}
 8000870:	4770      	bx	lr
  return AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(ai_input[0].meta_info, 0);
 8000872:	4610      	mov	r0, r2
 8000874:	4770      	bx	lr
 8000876:	2b00      	cmp	r3, #0
 8000878:	d0f9      	beq.n	800086e <ai_get_input_zero_point+0x26>
 800087a:	8840      	ldrh	r0, [r0, #2]
 800087c:	2800      	cmp	r0, #0
 800087e:	d0f7      	beq.n	8000870 <ai_get_input_zero_point+0x28>
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	f993 0000 	ldrsb.w	r0, [r3]
 8000886:	4770      	bx	lr
 8000888:	24002d3c 	.word	0x24002d3c

0800088c <ai_get_output_scale>:
  return AI_BUFFER_META_INFO_INTQ_GET_SCALE(ai_output[0].meta_info, 0);
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <ai_get_output_scale+0x28>)
 800088e:	695b      	ldr	r3, [r3, #20]
 8000890:	b163      	cbz	r3, 80008ac <ai_get_output_scale+0x20>
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	07d2      	lsls	r2, r2, #31
 8000896:	d509      	bpl.n	80008ac <ai_get_output_scale+0x20>
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	b13b      	cbz	r3, 80008ac <ai_get_output_scale+0x20>
 800089c:	685a      	ldr	r2, [r3, #4]
 800089e:	b12a      	cbz	r2, 80008ac <ai_get_output_scale+0x20>
 80008a0:	885b      	ldrh	r3, [r3, #2]
 80008a2:	b11b      	cbz	r3, 80008ac <ai_get_output_scale+0x20>
 80008a4:	6813      	ldr	r3, [r2, #0]
 80008a6:	ed93 0a00 	vldr	s0, [r3]
 80008aa:	4770      	bx	lr
 80008ac:	ed9f 0a02 	vldr	s0, [pc, #8]	; 80008b8 <ai_get_output_scale+0x2c>
}
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	24002d54 	.word	0x24002d54
 80008b8:	00000000 	.word	0x00000000

080008bc <ai_get_output_zero_point>:
 * @brief Returns value of the zero point for the output quantized format
 * @retval ai_size Zero point for output quantized format
 */
ai_i32 ai_get_output_zero_point(void)
{
  return AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(ai_output[0].meta_info, 0);
 80008bc:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <ai_get_output_zero_point+0x40>)
 80008be:	695a      	ldr	r2, [r3, #20]
 80008c0:	b18a      	cbz	r2, 80008e6 <ai_get_output_zero_point+0x2a>
 80008c2:	6813      	ldr	r3, [r2, #0]
 80008c4:	f013 0001 	ands.w	r0, r3, #1
 80008c8:	d00c      	beq.n	80008e4 <ai_get_output_zero_point+0x28>
 80008ca:	6850      	ldr	r0, [r2, #4]
 80008cc:	b150      	cbz	r0, 80008e4 <ai_get_output_zero_point+0x28>
 80008ce:	8802      	ldrh	r2, [r0, #0]
 80008d0:	6843      	ldr	r3, [r0, #4]
 80008d2:	0792      	lsls	r2, r2, #30
 80008d4:	d509      	bpl.n	80008ea <ai_get_output_zero_point+0x2e>
 80008d6:	b123      	cbz	r3, 80008e2 <ai_get_output_zero_point+0x26>
 80008d8:	8840      	ldrh	r0, [r0, #2]
 80008da:	b118      	cbz	r0, 80008e4 <ai_get_output_zero_point+0x28>
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	7818      	ldrb	r0, [r3, #0]
 80008e0:	4770      	bx	lr
 80008e2:	4618      	mov	r0, r3
}
 80008e4:	4770      	bx	lr
  return AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(ai_output[0].meta_info, 0);
 80008e6:	4610      	mov	r0, r2
 80008e8:	4770      	bx	lr
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d0f9      	beq.n	80008e2 <ai_get_output_zero_point+0x26>
 80008ee:	8840      	ldrh	r0, [r0, #2]
 80008f0:	2800      	cmp	r0, #0
 80008f2:	d0f7      	beq.n	80008e4 <ai_get_output_zero_point+0x28>
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	f993 0000 	ldrsb.w	r0, [r3]
 80008fa:	4770      	bx	lr
 80008fc:	24002d54 	.word	0x24002d54

08000900 <ai_init>:
 * @brief Initializes the generated C model for a neural network
 * @param  activation_buffer Pointer to the activation buffer (i.e. working buffer used during NN inference)
 * @retval ai_handle
 */
ai_handle ai_init(void* activation_buffer)
{
 8000900:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  network_handle = AI_HANDLE_NULL;
 8000904:	4c21      	ldr	r4, [pc, #132]	; (800098c <ai_init+0x8c>)
 8000906:	2500      	movs	r5, #0
{
 8000908:	b08d      	sub	sp, #52	; 0x34
 800090a:	4681      	mov	r9, r0

  /* Creating the network */
  ai_network_create(&network_handle, AI_NETWORK_DATA_CONFIG);
 800090c:	4629      	mov	r1, r5
 800090e:	4620      	mov	r0, r4

  /* Initialize param structure for the activation and weight buffers */
  const ai_network_params params = {AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()),
 8000910:	f04f 1701 	mov.w	r7, #65537	; 0x10001
  network_handle = AI_HANDLE_NULL;
 8000914:	6025      	str	r5, [r4, #0]
  const ai_network_params params = {AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()),
 8000916:	2601      	movs	r6, #1
  ai_network_create(&network_handle, AI_NETWORK_DATA_CONFIG);
 8000918:	f004 f8e8 	bl	8004aec <ai_network_create>
  const ai_network_params params = {AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()),
 800091c:	4a1c      	ldr	r2, [pc, #112]	; (8000990 <ai_init+0x90>)
 800091e:	4b1d      	ldr	r3, [pc, #116]	; (8000994 <ai_init+0x94>)

  /* Initializing the network */
  ai_network_init(network_handle, &params);
  
  /*Retrieve network descriptor*/
  ai_network_get_info(network_handle, &desc_report);
 8000920:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80009a8 <ai_init+0xa8>
  const ai_network_params params = {AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()),
 8000924:	f8ad 6008 	strh.w	r6, [sp, #8]
 8000928:	9303      	str	r3, [sp, #12]
 800092a:	e9cd 2700 	strd	r2, r7, [sp]
 800092e:	f004 fc69 	bl	8005204 <ai_network_data_weights_get>
 8000932:	4a19      	ldr	r2, [pc, #100]	; (8000998 <ai_init+0x98>)
 8000934:	4b19      	ldr	r3, [pc, #100]	; (800099c <ai_init+0x9c>)
  ai_network_init(network_handle, &params);
 8000936:	4669      	mov	r1, sp
  const ai_network_params params = {AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()),
 8000938:	9004      	str	r0, [sp, #16]
  ai_network_init(network_handle, &params);
 800093a:	6820      	ldr	r0, [r4, #0]
  const ai_network_params params = {AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()),
 800093c:	9206      	str	r2, [sp, #24]
 800093e:	9309      	str	r3, [sp, #36]	; 0x24
 8000940:	9505      	str	r5, [sp, #20]
 8000942:	9707      	str	r7, [sp, #28]
 8000944:	f8ad 6020 	strh.w	r6, [sp, #32]
 8000948:	950b      	str	r5, [sp, #44]	; 0x2c
 800094a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  ai_network_init(network_handle, &params);
 800094e:	f004 f8dd 	bl	8004b0c <ai_network_init>
  ai_network_get_info(network_handle, &desc_report);
 8000952:	4641      	mov	r1, r8
 8000954:	6820      	ldr	r0, [r4, #0]
 8000956:	f004 f885 	bl	8004a64 <ai_network_get_info>
  
  /*Copy descriptor info*/
  ai_input[0]= desc_report.inputs[0];
 800095a:	f8d8 c034 	ldr.w	ip, [r8, #52]	; 0x34
 800095e:	4e10      	ldr	r6, [pc, #64]	; (80009a0 <ai_init+0xa0>)
 8000960:	4667      	mov	r7, ip
  ai_output[0]= desc_report.outputs[0];
 8000962:	f8d8 5038 	ldr.w	r5, [r8, #56]	; 0x38
 8000966:	4c0f      	ldr	r4, [pc, #60]	; (80009a4 <ai_init+0xa4>)
  ai_input[0]= desc_report.inputs[0];
 8000968:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800096a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800096c:	e897 0003 	ldmia.w	r7, {r0, r1}
 8000970:	e886 0003 	stmia.w	r6, {r0, r1}
  ai_output[0]= desc_report.outputs[0];
 8000974:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000976:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000978:	e895 0003 	ldmia.w	r5, {r0, r1}
 800097c:	e884 0003 	stmia.w	r4, {r0, r1}
  
  return desc_report.inputs->data;
}
 8000980:	f8dc 0010 	ldr.w	r0, [ip, #16]
 8000984:	b00d      	add	sp, #52	; 0x34
 8000986:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800098a:	bf00      	nop
 800098c:	24002de0 	.word	0x24002de0
 8000990:	40040440 	.word	0x40040440
 8000994:	0007dcc8 	.word	0x0007dcc8
 8000998:	00040440 	.word	0x00040440
 800099c:	00062720 	.word	0x00062720
 80009a0:	24002d3c 	.word	0x24002d3c
 80009a4:	24002d54 	.word	0x24002d54
 80009a8:	24002d6c 	.word	0x24002d6c

080009ac <ai_deinit>:

/**
 * @brief De-initializes the generated C model for a neural network
 */
void ai_deinit(void) { ai_network_destroy(network_handle); }
 80009ac:	4b01      	ldr	r3, [pc, #4]	; (80009b4 <ai_deinit+0x8>)
 80009ae:	6818      	ldr	r0, [r3, #0]
 80009b0:	f004 b8aa 	b.w	8004b08 <ai_network_destroy>
 80009b4:	24002de0 	.word	0x24002de0

080009b8 <ai_run>:
 * @brief  Run an inference of the generated C model for a neural network
 * @param  input   Pointer to the buffer containing the inference input data
 * @param  output  Pointer to the buffer for the inference output data
 */
void ai_run(void* input, void* output)
{
 80009b8:	b538      	push	{r3, r4, r5, lr}
  ai_i32 nbatch;
  
  ai_input[0].data = AI_HANDLE_PTR(input);
 80009ba:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <ai_run+0x20>)
  ai_output[0].data = AI_HANDLE_PTR(output);
 80009bc:	4c07      	ldr	r4, [pc, #28]	; (80009dc <ai_run+0x24>)
  
  nbatch = ai_network_run(network_handle, &ai_input[0], &ai_output[0]);
 80009be:	4d08      	ldr	r5, [pc, #32]	; (80009e0 <ai_run+0x28>)
  ai_input[0].data = AI_HANDLE_PTR(input);
 80009c0:	6118      	str	r0, [r3, #16]
  nbatch = ai_network_run(network_handle, &ai_input[0], &ai_output[0]);
 80009c2:	4622      	mov	r2, r4
  ai_output[0].data = AI_HANDLE_PTR(output);
 80009c4:	6121      	str	r1, [r4, #16]
  nbatch = ai_network_run(network_handle, &ai_input[0], &ai_output[0]);
 80009c6:	4619      	mov	r1, r3
 80009c8:	6828      	ldr	r0, [r5, #0]
 80009ca:	f004 fc19 	bl	8005200 <ai_network_run>
  
  if (nbatch != 1) {
 80009ce:	2801      	cmp	r0, #1
 80009d0:	d000      	beq.n	80009d4 <ai_run+0x1c>
 80009d2:	e7fe      	b.n	80009d2 <ai_run+0x1a>
        while(1);
  }
}
 80009d4:	bd38      	pop	{r3, r4, r5, pc}
 80009d6:	bf00      	nop
 80009d8:	24002d3c 	.word	0x24002d3c
 80009dc:	24002d54 	.word	0x24002d54
 80009e0:	24002de0 	.word	0x24002de0

080009e4 <AI_Init>:
  input_data_ptr =ai_init((void*)(Ai_Context_Ptr->activation_buffer));
  
  if(input_data_ptr!= NULL)
    Ai_Context_Ptr->nn_input_buffer=input_data_ptr;
#else
  if (Ai_Context_Ptr->nn_input_buffer == NULL)
 80009e4:	6843      	ldr	r3, [r0, #4]
 80009e6:	b363      	cbz	r3, 8000a42 <AI_Init+0x5e>
{
 80009e8:	b570      	push	{r4, r5, r6, lr}
 80009ea:	4605      	mov	r5, r0
  {
    while(1);
  }
  
  /*Initialize the AI library*/
  ai_init((void*)(Ai_Context_Ptr->activation_buffer));
 80009ec:	6880      	ldr	r0, [r0, #8]
 Ai_Context_Ptr->lut=pixel_conv_lut;
 80009ee:	4c5c      	ldr	r4, [pc, #368]	; (8000b60 <AI_Init+0x17c>)
{
 80009f0:	ed2d 8b02 	vpush	{d8}
 80009f4:	b082      	sub	sp, #8
  ai_init((void*)(Ai_Context_Ptr->activation_buffer));
 80009f6:	f7ff ff83 	bl	8000900 <ai_init>
 Ai_Context_Ptr->nn_width=ai_get_input_width();
 80009fa:	f7ff fe8b 	bl	8000714 <ai_get_input_width>
 80009fe:	6128      	str	r0, [r5, #16]
 Ai_Context_Ptr->nn_height=ai_get_input_height();
 8000a00:	f7ff fe82 	bl	8000708 <ai_get_input_height>
 8000a04:	6168      	str	r0, [r5, #20]
 Ai_Context_Ptr->nn_channels=ai_get_input_channels();
 8000a06:	f7ff fe8b 	bl	8000720 <ai_get_input_channels>
 Ai_Context_Ptr->lut=pixel_conv_lut;
 8000a0a:	60ec      	str	r4, [r5, #12]
 Ai_Context_Ptr->nn_channels=ai_get_input_channels();
 8000a0c:	61a8      	str	r0, [r5, #24]
  float prepro_scale = Ai_Context_Ptr->nn_input_norm_scale;
 8000a0e:	ed95 8a07 	vldr	s16, [r5, #28]
  int32_t prepro_zp = Ai_Context_Ptr->nn_input_norm_zp;
 8000a12:	6a2d      	ldr	r5, [r5, #32]
  switch(ai_get_input_quantization_scheme())
 8000a14:	f7ff feaa 	bl	800076c <ai_get_input_quantization_scheme>
 8000a18:	2801      	cmp	r0, #1
 8000a1a:	d04d      	beq.n	8000ab8 <AI_Init+0xd4>
 8000a1c:	f0c0 808e 	bcc.w	8000b3c <AI_Init+0x158>
 8000a20:	2802      	cmp	r0, #2
 8000a22:	d143      	bne.n	8000aac <AI_Init+0xc8>
    Precompute_8IntS(lut, ai_get_input_scale(), ai_get_input_zero_point(), prepro_scale, prepro_zp);
 8000a24:	f7ff fef8 	bl	8000818 <ai_get_input_scale>
 8000a28:	eef0 8a40 	vmov.f32	s17, s0
 8000a2c:	f7ff ff0c 	bl	8000848 <ai_get_input_zero_point>
 8000a30:	f504 7180 	add.w	r1, r4, #256	; 0x100
    *(lut + i) = _CLAMP(zp + _ROUND(tmp * scale, int32_t),  -128, 127, int8_t);
 8000a34:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8000a38:	b2c6      	uxtb	r6, r0
 8000a3a:	ee28 8a28 	vmul.f32	s16, s16, s17
    Precompute_8IntS(lut, ai_get_input_scale(), ai_get_input_zero_point(), prepro_scale, prepro_zp);
 8000a3e:	4622      	mov	r2, r4
 8000a40:	e017      	b.n	8000a72 <AI_Init+0x8e>
 8000a42:	e7fe      	b.n	8000a42 <AI_Init+0x5e>
    *(lut + i) = _CLAMP(zp + _ROUND(tmp * scale, int32_t),  -128, 127, int8_t);
 8000a44:	337f      	adds	r3, #127	; 0x7f
 8000a46:	db35      	blt.n	8000ab4 <AI_Init+0xd0>
 8000a48:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a50:	bf4c      	ite	mi
 8000a52:	ee77 7ae6 	vsubmi.f32	s15, s15, s13
 8000a56:	ee77 7aa6 	vaddpl.f32	s15, s15, s13
 8000a5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a5e:	edcd 7a01 	vstr	s15, [sp, #4]
 8000a62:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000a66:	4433      	add	r3, r6
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	f802 3b01 	strb.w	r3, [r2], #1
  for (int32_t i = 0 ; i < 256 ; i++)
 8000a6e:	428a      	cmp	r2, r1
 8000a70:	d01c      	beq.n	8000aac <AI_Init+0xc8>
    float tmp = (i - zp_prepro) * scale_prepro;
 8000a72:	1b53      	subs	r3, r2, r5
 8000a74:	1b1b      	subs	r3, r3, r4
 8000a76:	ee07 3a90 	vmov	s15, r3
 8000a7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    *(lut + i) = _CLAMP(zp + _ROUND(tmp * scale, int32_t),  -128, 127, int8_t);
 8000a7e:	ee67 7a88 	vmul.f32	s15, s15, s16
 8000a82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a8a:	bf4c      	ite	mi
 8000a8c:	ee37 7ae6 	vsubmi.f32	s14, s15, s13
 8000a90:	ee37 7aa6 	vaddpl.f32	s14, s15, s13
 8000a94:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8000a98:	ee17 3a10 	vmov	r3, s14
 8000a9c:	4403      	add	r3, r0
 8000a9e:	2b7e      	cmp	r3, #126	; 0x7e
 8000aa0:	ddd0      	ble.n	8000a44 <AI_Init+0x60>
 8000aa2:	237f      	movs	r3, #127	; 0x7f
 8000aa4:	f802 3b01 	strb.w	r3, [r2], #1
  for (int32_t i = 0 ; i < 256 ; i++)
 8000aa8:	428a      	cmp	r2, r1
 8000aaa:	d1e2      	bne.n	8000a72 <AI_Init+0x8e>
#endif
  
  Ai_Context_Init(Ai_Context_Ptr);
  Compute_pix_conv_tab(Ai_Context_Ptr);
}
 8000aac:	b002      	add	sp, #8
 8000aae:	ecbd 8b02 	vpop	{d8}
 8000ab2:	bd70      	pop	{r4, r5, r6, pc}
    *(lut + i) = _CLAMP(zp + _ROUND(tmp * scale, int32_t),  -128, 127, int8_t);
 8000ab4:	2380      	movs	r3, #128	; 0x80
 8000ab6:	e7d8      	b.n	8000a6a <AI_Init+0x86>
    Precompute_8IntU(lut, ai_get_input_scale(), ai_get_input_zero_point(), prepro_scale, prepro_zp);
 8000ab8:	f7ff feae 	bl	8000818 <ai_get_input_scale>
 8000abc:	eef0 8a40 	vmov.f32	s17, s0
 8000ac0:	f7ff fec2 	bl	8000848 <ai_get_input_zero_point>
 8000ac4:	f504 7180 	add.w	r1, r4, #256	; 0x100
    *(lut + i) = _CLAMP(zp + _ROUND(tmp * scale, int32_t), 0, 255, uint8_t);
 8000ac8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8000acc:	b2c6      	uxtb	r6, r0
 8000ace:	ee28 8a28 	vmul.f32	s16, s16, s17
    Precompute_8IntU(lut, ai_get_input_scale(), ai_get_input_zero_point(), prepro_scale, prepro_zp);
 8000ad2:	4622      	mov	r2, r4
 8000ad4:	e016      	b.n	8000b04 <AI_Init+0x120>
    *(lut + i) = _CLAMP(zp + _ROUND(tmp * scale, int32_t), 0, 255, uint8_t);
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	dd2e      	ble.n	8000b38 <AI_Init+0x154>
 8000ada:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ae2:	bf4c      	ite	mi
 8000ae4:	ee77 7ae6 	vsubmi.f32	s15, s15, s13
 8000ae8:	ee77 7aa6 	vaddpl.f32	s15, s15, s13
 8000aec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000af0:	edcd 7a01 	vstr	s15, [sp, #4]
 8000af4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000af8:	4433      	add	r3, r6
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	f802 3b01 	strb.w	r3, [r2], #1
  for (int32_t i = 0 ; i < 256 ; i++)
 8000b00:	428a      	cmp	r2, r1
 8000b02:	d0d3      	beq.n	8000aac <AI_Init+0xc8>
    float tmp = (i - zp_prepro) * scale_prepro;
 8000b04:	1b53      	subs	r3, r2, r5
 8000b06:	1b1b      	subs	r3, r3, r4
 8000b08:	ee07 3a90 	vmov	s15, r3
 8000b0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    *(lut + i) = _CLAMP(zp + _ROUND(tmp * scale, int32_t), 0, 255, uint8_t);
 8000b10:	ee67 7a88 	vmul.f32	s15, s15, s16
 8000b14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b1c:	bf4c      	ite	mi
 8000b1e:	ee37 7ae6 	vsubmi.f32	s14, s15, s13
 8000b22:	ee37 7aa6 	vaddpl.f32	s14, s15, s13
 8000b26:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8000b2a:	ee17 3a10 	vmov	r3, s14
 8000b2e:	4403      	add	r3, r0
 8000b30:	2bfe      	cmp	r3, #254	; 0xfe
 8000b32:	ddd0      	ble.n	8000ad6 <AI_Init+0xf2>
 8000b34:	23ff      	movs	r3, #255	; 0xff
 8000b36:	e7e1      	b.n	8000afc <AI_Init+0x118>
 8000b38:	2300      	movs	r3, #0
 8000b3a:	e7df      	b.n	8000afc <AI_Init+0x118>
    Precompute_8FXP(lut, ai_get_input_quantized_format());
 8000b3c:	f7ff fe06 	bl	800074c <ai_get_input_quantized_format>
   *(lut+index)=__USAT((index + (1 << q_input_shift)) >> (1 + q_input_shift), 8);
 8000b40:	2101      	movs	r1, #1
 8000b42:	4622      	mov	r2, r4
 8000b44:	f504 7480 	add.w	r4, r4, #256	; 0x100
 8000b48:	1845      	adds	r5, r0, r1
 8000b4a:	4081      	lsls	r1, r0
 8000b4c:	1a89      	subs	r1, r1, r2
 8000b4e:	188b      	adds	r3, r1, r2
 8000b50:	40eb      	lsrs	r3, r5
 8000b52:	f383 0308 	usat	r3, #8, r3
 8000b56:	f802 3b01 	strb.w	r3, [r2], #1
 for(index=0;index<256;index++)
 8000b5a:	42a2      	cmp	r2, r4
 8000b5c:	d1f7      	bne.n	8000b4e <AI_Init+0x16a>
 8000b5e:	e7a5      	b.n	8000aac <AI_Init+0xc8>
 8000b60:	24004234 	.word	0x24004234

08000b64 <AI_Run>:
* @param  Ai_Context_Ptr Pointer to the AI NN context
* @retval None
*/
void AI_Run(AiContext_TypeDef* Ai_Context_Ptr)
{
  ai_run((void*)Ai_Context_Ptr->nn_input_buffer, (void*)Ai_Context_Ptr->nn_output_buffer);
 8000b64:	e9d0 1000 	ldrd	r1, r0, [r0]
 8000b68:	f7ff bf26 	b.w	80009b8 <ai_run>

08000b6c <AI_PixelValueConversion>:
* @param  Ai_Context_Ptr Pointer to the AI NN context
* @param  pSrc           Pointer to source buffer
* @retval None
*/
void AI_PixelValueConversion(AiContext_TypeDef* Ai_Context_Ptr, void *pSrc)
{
 8000b6c:	b538      	push	{r3, r4, r5, lr}
 8000b6e:	4605      	mov	r5, r0
 8000b70:	460c      	mov	r4, r1
  /**Check format of the input so to call the right fucntion for pixel format conversion**/
  if(ai_get_input_format() == AI_BUFFER_FMT_TYPE_Q)
 8000b72:	f7ff fddb 	bl	800072c <ai_get_input_format>
 8000b76:	2802      	cmp	r0, #2
 8000b78:	d026      	beq.n	8000bc8 <AI_PixelValueConversion+0x5c>
  {
    AI_PixelValueConversion_QuantizedNN(Ai_Context_Ptr, (uint8_t *)pSrc);
  }
  else if(ai_get_input_format() == AI_BUFFER_FMT_TYPE_FLOAT)
 8000b7a:	f7ff fdd7 	bl	800072c <ai_get_input_format>
 8000b7e:	2801      	cmp	r0, #1
 8000b80:	d000      	beq.n	8000b84 <AI_PixelValueConversion+0x18>
 8000b82:	e7fe      	b.n	8000b82 <AI_PixelValueConversion+0x16>
  {
    if(Ai_Context_Ptr->nn_input_norm_scale == 255.0f)
 8000b84:	edd5 7a07 	vldr	s15, [r5, #28]
 8000b88:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8000c60 <AI_PixelValueConversion+0xf4>
 8000b8c:	eef4 7a47 	vcmp.f32	s15, s14
 8000b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b94:	d13d      	bne.n	8000c12 <AI_PixelValueConversion+0xa6>
 * @param  normalization_type  Asymmetric normalization (=0), i.e. in the range [0,+1] or Symmetric normalization (=1), i.e. in the range [-1,+1]
 * @retval None
 */
void AI_PixelValueConversion_FloatNN(AiContext_TypeDef* Ai_Context_Ptr, uint8_t *pSrc, uint32_t normalization_type)
{
  const uint32_t nb_pixels = Ai_Context_Ptr->nn_height * Ai_Context_Ptr->nn_width * Ai_Context_Ptr->nn_channels;
 8000b96:	69ab      	ldr	r3, [r5, #24]
 8000b98:	e9d5 2104 	ldrd	r2, r1, [r5, #16]
 8000b9c:	fb02 f201 	mul.w	r2, r2, r1
  float *pDst = (float *) Ai_Context_Ptr->nn_input_buffer;
 8000ba0:	6869      	ldr	r1, [r5, #4]
  const uint32_t nb_pixels = Ai_Context_Ptr->nn_height * Ai_Context_Ptr->nn_width * Ai_Context_Ptr->nn_channels;
 8000ba2:	fb03 f302 	mul.w	r3, r3, r2
  else
  {
    while(1);
  }

  for (int32_t i = 0; i < nb_pixels; i++)
 8000ba6:	b173      	cbz	r3, 8000bc6 <AI_PixelValueConversion+0x5a>
 8000ba8:	4423      	add	r3, r4
  {
    *pDst++ = (((float) *pSrc++) / div) - sub;
 8000baa:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8000c64 <AI_PixelValueConversion+0xf8>
 8000bae:	f814 2b01 	ldrb.w	r2, [r4], #1
 8000bb2:	ee07 2a90 	vmov	s15, r2
  for (int32_t i = 0; i < nb_pixels; i++)
 8000bb6:	429c      	cmp	r4, r3
    *pDst++ = (((float) *pSrc++) / div) - sub;
 8000bb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bc0:	ece1 7a01 	vstmia	r1!, {s15}
  for (int32_t i = 0; i < nb_pixels; i++)
 8000bc4:	d1f3      	bne.n	8000bae <AI_PixelValueConversion+0x42>
}
 8000bc6:	bd38      	pop	{r3, r4, r5, pc}
  const uint32_t nb_pixels = Ai_Context_Ptr->nn_height * Ai_Context_Ptr->nn_width * Ai_Context_Ptr->nn_channels;
 8000bc8:	e9d5 2104 	ldrd	r2, r1, [r5, #16]
 8000bcc:	69ab      	ldr	r3, [r5, #24]
 8000bce:	fb02 f101 	mul.w	r1, r2, r1
  uint8_t *pDst = (uint8_t *) Ai_Context_Ptr->nn_input_buffer;
 8000bd2:	686a      	ldr	r2, [r5, #4]
  const uint8_t *lut = Ai_Context_Ptr->lut;
 8000bd4:	68e8      	ldr	r0, [r5, #12]
  if (pDst > pSrc)
 8000bd6:	4294      	cmp	r4, r2
  const uint32_t nb_pixels = Ai_Context_Ptr->nn_height * Ai_Context_Ptr->nn_width * Ai_Context_Ptr->nn_channels;
 8000bd8:	fb03 f301 	mul.w	r3, r3, r1
  if (pDst > pSrc)
 8000bdc:	d20c      	bcs.n	8000bf8 <AI_PixelValueConversion+0x8c>
    for (int32_t i = nb_pixels - 1; i >= 0; i--)
 8000bde:	1e59      	subs	r1, r3, #1
 8000be0:	d4f1      	bmi.n	8000bc6 <AI_PixelValueConversion+0x5a>
 8000be2:	441c      	add	r4, r3
 8000be4:	4413      	add	r3, r2
      pDst[i] = lut[pSrc[i]];
 8000be6:	f814 2d01 	ldrb.w	r2, [r4, #-1]!
    for (int32_t i = nb_pixels - 1; i >= 0; i--)
 8000bea:	3901      	subs	r1, #1
      pDst[i] = lut[pSrc[i]];
 8000bec:	5c82      	ldrb	r2, [r0, r2]
 8000bee:	f803 2d01 	strb.w	r2, [r3, #-1]!
    for (int32_t i = nb_pixels - 1; i >= 0; i--)
 8000bf2:	1c4a      	adds	r2, r1, #1
 8000bf4:	d1f7      	bne.n	8000be6 <AI_PixelValueConversion+0x7a>
}
 8000bf6:	bd38      	pop	{r3, r4, r5, pc}
    for (int32_t i = 0; i < nb_pixels; i++)
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d0e4      	beq.n	8000bc6 <AI_PixelValueConversion+0x5a>
 8000bfc:	3c01      	subs	r4, #1
 8000bfe:	3a01      	subs	r2, #1
 8000c00:	4423      	add	r3, r4
      pDst[i] = lut[pSrc[i]];
 8000c02:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8000c06:	5c41      	ldrb	r1, [r0, r1]
    for (int32_t i = 0; i < nb_pixels; i++)
 8000c08:	42a3      	cmp	r3, r4
      pDst[i] = lut[pSrc[i]];
 8000c0a:	f802 1f01 	strb.w	r1, [r2, #1]!
    for (int32_t i = 0; i < nb_pixels; i++)
 8000c0e:	d1f8      	bne.n	8000c02 <AI_PixelValueConversion+0x96>
}
 8000c10:	bd38      	pop	{r3, r4, r5, pc}
    else if(Ai_Context_Ptr->nn_input_norm_scale == 127.0f)
 8000c12:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000c68 <AI_PixelValueConversion+0xfc>
 8000c16:	eef4 7a47 	vcmp.f32	s15, s14
 8000c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c1e:	d11d      	bne.n	8000c5c <AI_PixelValueConversion+0xf0>
  const uint32_t nb_pixels = Ai_Context_Ptr->nn_height * Ai_Context_Ptr->nn_width * Ai_Context_Ptr->nn_channels;
 8000c20:	69ab      	ldr	r3, [r5, #24]
 8000c22:	e9d5 2104 	ldrd	r2, r1, [r5, #16]
 8000c26:	fb02 f201 	mul.w	r2, r2, r1
  float *pDst = (float *) Ai_Context_Ptr->nn_input_buffer;
 8000c2a:	6869      	ldr	r1, [r5, #4]
  const uint32_t nb_pixels = Ai_Context_Ptr->nn_height * Ai_Context_Ptr->nn_width * Ai_Context_Ptr->nn_channels;
 8000c2c:	fb03 f302 	mul.w	r3, r3, r2
  for (int32_t i = 0; i < nb_pixels; i++)
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d0c8      	beq.n	8000bc6 <AI_PixelValueConversion+0x5a>
    *pDst++ = (((float) *pSrc++) / div) - sub;
 8000c34:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8000c38:	4423      	add	r3, r4
 8000c3a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000c6c <AI_PixelValueConversion+0x100>
 8000c3e:	f814 2b01 	ldrb.w	r2, [r4], #1
 8000c42:	eeb0 6a66 	vmov.f32	s12, s13
 8000c46:	ee07 2a90 	vmov	s15, r2
  for (int32_t i = 0; i < nb_pixels; i++)
 8000c4a:	429c      	cmp	r4, r3
    *pDst++ = (((float) *pSrc++) / div) - sub;
 8000c4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c50:	eea7 6a87 	vfma.f32	s12, s15, s14
 8000c54:	eca1 6a01 	vstmia	r1!, {s12}
  for (int32_t i = 0; i < nb_pixels; i++)
 8000c58:	d1f1      	bne.n	8000c3e <AI_PixelValueConversion+0xd2>
}
 8000c5a:	bd38      	pop	{r3, r4, r5, pc}
 8000c5c:	e7fe      	b.n	8000c5c <AI_PixelValueConversion+0xf0>
 8000c5e:	bf00      	nop
 8000c60:	437f0000 	.word	0x437f0000
 8000c64:	3b808081 	.word	0x3b808081
 8000c68:	42fe0000 	.word	0x42fe0000
 8000c6c:	3c008081 	.word	0x3c008081

08000c70 <AI_Output_Dequantize>:
* @brief  Performs the dequantization of a quantized NN output
* @param  Ai_Context_Ptr Pointer to the AI NN context
* @retval None
*/
void AI_Output_Dequantize(AiContext_TypeDef* Ai_Context_Ptr)
{
 8000c70:	b510      	push	{r4, lr}
 8000c72:	ed2d 8b02 	vpush	{d8}
 8000c76:	4604      	mov	r4, r0
  /**Check format of the output and convert to float if required**/
  if(ai_get_output_format() == AI_BUFFER_FMT_TYPE_Q)
 8000c78:	f7ff fd60 	bl	800073c <ai_get_output_format>
 8000c7c:	2802      	cmp	r0, #2
 8000c7e:	d002      	beq.n	8000c86 <AI_Output_Dequantize+0x16>
      
    default:
      break;
    }  
  }
}
 8000c80:	ecbd 8b02 	vpop	{d8}
 8000c84:	bd10      	pop	{r4, pc}
    switch(ai_get_output_quantization_scheme())
 8000c86:	f7ff fd93 	bl	80007b0 <ai_get_output_quantization_scheme>
 8000c8a:	2801      	cmp	r0, #1
 8000c8c:	d01b      	beq.n	8000cc6 <AI_Output_Dequantize+0x56>
 8000c8e:	d333      	bcc.n	8000cf8 <AI_Output_Dequantize+0x88>
 8000c90:	2802      	cmp	r0, #2
 8000c92:	d1f5      	bne.n	8000c80 <AI_Output_Dequantize+0x10>
      scale = ai_get_output_scale();
 8000c94:	f7ff fdfa 	bl	800088c <ai_get_output_scale>
 8000c98:	eeb0 8a40 	vmov.f32	s16, s0
      zero_point = ai_get_output_zero_point();
 8000c9c:	f7ff fe0e 	bl	80008bc <ai_get_output_zero_point>
      nn_output_i8 = (ai_i8 *) Ai_Context_Ptr->nn_output_buffer;
 8000ca0:	6824      	ldr	r4, [r4, #0]
 8000ca2:	f104 0112 	add.w	r1, r4, #18
 8000ca6:	f104 0248 	add.w	r2, r4, #72	; 0x48
        int32_t q_value = (int32_t) *(nn_output_i8 + i);
 8000caa:	f911 3d01 	ldrsb.w	r3, [r1, #-1]!
        *(nn_output_f32 + i) = scale * (q_value - zero_point);
 8000cae:	1a1b      	subs	r3, r3, r0
 8000cb0:	ee07 3a90 	vmov	s15, r3
 8000cb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cb8:	ee67 7a88 	vmul.f32	s15, s15, s16
 8000cbc:	ed62 7a01 	vstmdb	r2!, {s15}
      for(int32_t i = AI_NET_OUTPUT_SIZE - 1; i >= 0; i--)
 8000cc0:	4294      	cmp	r4, r2
 8000cc2:	d1f2      	bne.n	8000caa <AI_Output_Dequantize+0x3a>
 8000cc4:	e7dc      	b.n	8000c80 <AI_Output_Dequantize+0x10>
      scale = ai_get_output_scale();
 8000cc6:	f7ff fde1 	bl	800088c <ai_get_output_scale>
 8000cca:	eeb0 8a40 	vmov.f32	s16, s0
      zero_point = ai_get_output_zero_point();
 8000cce:	f7ff fdf5 	bl	80008bc <ai_get_output_zero_point>
      nn_output_u8 = (ai_u8 *) Ai_Context_Ptr->nn_output_buffer;
 8000cd2:	6824      	ldr	r4, [r4, #0]
 8000cd4:	f104 0112 	add.w	r1, r4, #18
 8000cd8:	f104 0248 	add.w	r2, r4, #72	; 0x48
        int32_t q_value = (int32_t) *(nn_output_u8 + i);
 8000cdc:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
        *(nn_output_f32 + i) = scale * (q_value - zero_point);
 8000ce0:	1a1b      	subs	r3, r3, r0
 8000ce2:	ee07 3a90 	vmov	s15, r3
 8000ce6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cea:	ee67 7a88 	vmul.f32	s15, s15, s16
 8000cee:	ed62 7a01 	vstmdb	r2!, {s15}
      for(int32_t i = AI_NET_OUTPUT_SIZE - 1; i >= 0; i--)
 8000cf2:	4294      	cmp	r4, r2
 8000cf4:	d1f2      	bne.n	8000cdc <AI_Output_Dequantize+0x6c>
 8000cf6:	e7c3      	b.n	8000c80 <AI_Output_Dequantize+0x10>
      scale=ai_get_output_fxp_scale();
 8000cf8:	f7ff fd7c 	bl	80007f4 <ai_get_output_fxp_scale>
      nn_output_i8 = (ai_i8 *) Ai_Context_Ptr->nn_output_buffer;
 8000cfc:	6821      	ldr	r1, [r4, #0]
 8000cfe:	f101 0212 	add.w	r2, r1, #18
 8000d02:	f101 0348 	add.w	r3, r1, #72	; 0x48
        float q_value = (float) *(nn_output_i8 + i);
 8000d06:	f912 0d01 	ldrsb.w	r0, [r2, #-1]!
 8000d0a:	ee07 0a90 	vmov	s15, r0
 8000d0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        *(nn_output_f32 + i) = scale * q_value;
 8000d12:	ee67 7a80 	vmul.f32	s15, s15, s0
 8000d16:	ed63 7a01 	vstmdb	r3!, {s15}
      for(int32_t i = AI_NET_OUTPUT_SIZE - 1; i >= 0; i--)
 8000d1a:	4299      	cmp	r1, r3
 8000d1c:	d1f3      	bne.n	8000d06 <AI_Output_Dequantize+0x96>
 8000d1e:	e7af      	b.n	8000c80 <AI_Output_Dequantize+0x10>

08000d20 <AI_Deinit>:
/**
 * @brief De-initializes the generated C model for a neural network
 */
void AI_Deinit(void) 
{ 
  ai_deinit(); 
 8000d20:	f7ff be44 	b.w	80009ac <ai_deinit>

08000d24 <APP_Init>:
/**
 * @brief Initializes the application context structure
 * @param App_Context_Ptr pointer to application context
 */
void APP_Init(AppContext_TypeDef *App_Context_Ptr)
{  
 8000d24:	b5f0      	push	{r4, r5, r6, r7, lr}
  App_Context_Ptr->Ai_ContextPtr=&Ai_Context;
 8000d26:	4a1b      	ldr	r2, [pc, #108]	; (8000d94 <APP_Init+0x70>)
{  
 8000d28:	4604      	mov	r4, r0
  App_Context_Ptr->Preproc_ContextPtr=&Preproc_Context;
 8000d2a:	491b      	ldr	r1, [pc, #108]	; (8000d98 <APP_Init+0x74>)
  App_Context_Ptr->Operating_Mode=NOMINAL;
 8000d2c:	2001      	movs	r0, #1
  App_Context_Ptr->Ai_ContextPtr=&Ai_Context;
 8000d2e:	6722      	str	r2, [r4, #112]	; 0x70
  App_Context_Ptr->Camera_ContextPtr->mirror_flip=CAMERA_MIRRORFLIP_NONE;
 8000d30:	2700      	movs	r7, #0
  App_Context_Ptr->Preproc_ContextPtr=&Preproc_Context;
 8000d32:	6621      	str	r1, [r4, #96]	; 0x60
  App_Context_Ptr->Test_ContextPtr=&TestContext;
 8000d34:	4b19      	ldr	r3, [pc, #100]	; (8000d9c <APP_Init+0x78>)
  App_Context_Ptr->Camera_ContextPtr=&CameraContext;
 8000d36:	4a1a      	ldr	r2, [pc, #104]	; (8000da0 <APP_Init+0x7c>)
  App_Context_Ptr->Utils_ContextPtr=&UtilsContext;
 8000d38:	491a      	ldr	r1, [pc, #104]	; (8000da4 <APP_Init+0x80>)
  strcpy(App_Context_Ptr->Test_ContextPtr->ValidationContext.class_path,"/onboard_valid_dataset_vga/");
 8000d3a:	f503 7570 	add.w	r5, r3, #960	; 0x3c0
  App_Context_Ptr->Display_ContextPtr=&Display_Context;
 8000d3e:	f8df c070 	ldr.w	ip, [pc, #112]	; 8000db0 <APP_Init+0x8c>
  strcpy(App_Context_Ptr->Test_ContextPtr->ValidationContext.class_path,"/onboard_valid_dataset_vga/");
 8000d42:	4e19      	ldr	r6, [pc, #100]	; (8000da8 <APP_Init+0x84>)
  App_Context_Ptr->Operating_Mode=NOMINAL;
 8000d44:	7020      	strb	r0, [r4, #0]
  App_Context_Ptr->run_loop=1;
 8000d46:	6060      	str	r0, [r4, #4]
  App_Context_Ptr->Display_ContextPtr=&Display_Context;
 8000d48:	f8c4 c064 	str.w	ip, [r4, #100]	; 0x64
  App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.format=PXFMT_RGB888;
 8000d4c:	f04f 0c02 	mov.w	ip, #2
  App_Context_Ptr->Camera_ContextPtr=&CameraContext;
 8000d50:	65e2      	str	r2, [r4, #92]	; 0x5c
  App_Context_Ptr->Utils_ContextPtr->AppCtxPtr =App_Context_Ptr;
 8000d52:	638c      	str	r4, [r1, #56]	; 0x38
  App_Context_Ptr->Ai_ContextPtr->nn_output_buffer=nn_output_buff;
 8000d54:	f8df e05c 	ldr.w	lr, [pc, #92]	; 8000db4 <APP_Init+0x90>
  App_Context_Ptr->Test_ContextPtr=&TestContext;
 8000d58:	e9c4 131a 	strd	r1, r3, [r4, #104]	; 0x68
  App_Context_Ptr->Camera_ContextPtr->mirror_flip=CAMERA_MIRRORFLIP_NONE;
 8000d5c:	e9c2 4706 	strd	r4, r7, [r2, #24]
  App_Context_Ptr->Test_ContextPtr->AppCtxPtr =App_Context_Ptr;
 8000d60:	f8c3 4b7c 	str.w	r4, [r3, #2940]	; 0xb7c
  strcpy(App_Context_Ptr->Test_ContextPtr->ValidationContext.class_path,"/onboard_valid_dataset_vga/");
 8000d64:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000d66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d68:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8000d6c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  App_Context_Ptr->Ai_ContextPtr->nn_input_norm_scale=255.0f;
 8000d70:	4a0e      	ldr	r2, [pc, #56]	; (8000dac <APP_Init+0x88>)
  App_Context_Init(App_Context_Ptr);
  Init_DataMemoryLayout(App_Context_Ptr);
 8000d72:	4620      	mov	r0, r4
  App_Context_Ptr->Ai_ContextPtr->AppCtxPtr =App_Context_Ptr;
 8000d74:	6f23      	ldr	r3, [r4, #112]	; 0x70
  App_Context_Ptr->Display_ContextPtr->AppCtxPtr =App_Context_Ptr;
 8000d76:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8000d78:	60cc      	str	r4, [r1, #12]
  App_Context_Ptr->Ai_ContextPtr->AppCtxPtr =App_Context_Ptr;
 8000d7a:	625c      	str	r4, [r3, #36]	; 0x24
  App_Context_Ptr->Ai_ContextPtr->nn_output_buffer=nn_output_buff;
 8000d7c:	f8c3 e000 	str.w	lr, [r3]
  App_Context_Ptr->Ai_ContextPtr->nn_input_norm_scale=255.0f;
 8000d80:	61da      	str	r2, [r3, #28]
  App_Context_Ptr->Ai_ContextPtr->nn_input_norm_zp=0;
 8000d82:	621f      	str	r7, [r3, #32]
  App_Context_Ptr->Preproc_ContextPtr->AppCtxPtr =App_Context_Ptr;
 8000d84:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8000d86:	65dc      	str	r4, [r3, #92]	; 0x5c
  App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.format=PXFMT_RGB888;
 8000d88:	f883 c038 	strb.w	ip, [r3, #56]	; 0x38
}
 8000d8c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  Init_DataMemoryLayout(App_Context_Ptr);
 8000d90:	f017 bb20 	b.w	80183d4 <Init_DataMemoryLayout>
 8000d94:	24004334 	.word	0x24004334
 8000d98:	2400446c 	.word	0x2400446c
 8000d9c:	240045c0 	.word	0x240045c0
 8000da0:	2400443c 	.word	0x2400443c
 8000da4:	24005140 	.word	0x24005140
 8000da8:	08020004 	.word	0x08020004
 8000dac:	437f0000 	.word	0x437f0000
 8000db0:	2400445c 	.word	0x2400445c
 8000db4:	24002de8 	.word	0x24002de8

08000db8 <APP_GetNextReadyFrame>:
  uint8_t* cam_capture_buff = App_Context_Ptr->Camera_ContextPtr->camera_capture_buffer;
#if MEMORY_SCHEME != FULL_INTERNAL_MEM_OPT
  uint8_t* cam_frame_buff = App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer;
#endif
  
  if((App_Context_Ptr->Operating_Mode == VALID) && (Validation_Ctx_Ptr->validation_completed ==0))
 8000db8:	7803      	ldrb	r3, [r0, #0]
  uint8_t* cam_capture_buff = App_Context_Ptr->Camera_ContextPtr->camera_capture_buffer;
 8000dba:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  if((App_Context_Ptr->Operating_Mode == VALID) && (Validation_Ctx_Ptr->validation_completed ==0))
 8000dbc:	2b02      	cmp	r3, #2
{
 8000dbe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000dc2:	4605      	mov	r5, r0
 8000dc4:	b089      	sub	sp, #36	; 0x24
  ValidationContext_TypeDef* Validation_Ctx_Ptr=&App_Context_Ptr->Test_ContextPtr->ValidationContext;
 8000dc6:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
  uint8_t* cam_frame_buff = App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer;
 8000dc8:	e9d2 6400 	ldrd	r6, r4, [r2]
  if((App_Context_Ptr->Operating_Mode == VALID) && (Validation_Ctx_Ptr->validation_completed ==0))
 8000dcc:	d07e      	beq.n	8000ecc <APP_GetNextReadyFrame+0x114>
  {
    TEST_GetNextValidationInput(App_Context_Ptr->Test_ContextPtr, 
                                cam_capture_buff);    
  } 
  else if((App_Context_Ptr->Operating_Mode == DUMP) && 
 8000dce:	2b03      	cmp	r3, #3
 8000dd0:	d064      	beq.n	8000e9c <APP_GetNextReadyFrame+0xe4>
                          cam_capture_buff);
  }
  else
  {
    /* Wait for current camera acquisition to complete*/
    while(App_Context_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 8000dd2:	7d13      	ldrb	r3, [r2, #20]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d0fc      	beq.n	8000dd2 <APP_GetNextReadyFrame+0x1a>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8000dd8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000ddc:	f018 fdba 	bl	8019954 <UTIL_LCD_Clear>
  if((App_Context_Ptr->Operating_Mode == DUMP)&& (App_Context_Ptr->Test_ContextPtr->DumpContext.Dump_FrameSource == SDCARD_FILE))
 8000de0:	782b      	ldrb	r3, [r5, #0]
  if(App_Context_Ptr->Operating_Mode == VALID || ((App_Context_Ptr->Operating_Mode == DUMP)&& (App_Context_Ptr->Test_ContextPtr->DumpContext.Dump_FrameSource == SDCARD_FILE)))
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	f000 8082 	beq.w	8000eec <APP_GetNextReadyFrame+0x134>
 8000de8:	2b03      	cmp	r3, #3
 8000dea:	f000 80d6 	beq.w	8000f9a <APP_GetNextReadyFrame+0x1e2>
    DISPLAY_Copy2LCDWriteBuffer(App_Context_Ptr->Display_ContextPtr, (uint32_t *)(App_Context_Ptr->Camera_ContextPtr->camera_capture_buffer), 
 8000dee:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 8000df0:	2202      	movs	r2, #2
 8000df2:	2300      	movs	r3, #0
 8000df4:	f44f 77f0 	mov.w	r7, #480	; 0x1e0
 8000df8:	6e68      	ldr	r0, [r5, #100]	; 0x64
 8000dfa:	6809      	ldr	r1, [r1, #0]
 8000dfc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000e00:	e9cd 7700 	strd	r7, r7, [sp]
 8000e04:	22a0      	movs	r2, #160	; 0xa0
 8000e06:	f000 fd9d 	bl	8001944 <DISPLAY_Copy2LCDWriteBuffer>
  
  /* DMA2D transfer from camera frame buffer to LCD write buffer */
  CameraCaptureBuff2LcdBuff_Copy(App_Context_Ptr);
  
#if MEMORY_SCHEME != FULL_INTERNAL_MEM_OPT  
  if(App_Context_Ptr->Operating_Mode != VALID)
 8000e0a:	782b      	ldrb	r3, [r5, #0]
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d005      	beq.n	8000e1c <APP_GetNextReadyFrame+0x64>
  {
    /****Coherency purpose: invalidate the camera_capture_buffer area in L1 D-Cache before CPU reading****/
    UTILS_DCache_Coherency_Maintenance((void*)cam_capture_buff, 
 8000e10:	2201      	movs	r2, #1
 8000e12:	f44f 21e1 	mov.w	r1, #460800	; 0x70800
 8000e16:	4630      	mov	r0, r6
 8000e18:	f003 fc5a 	bl	80046d0 <UTILS_DCache_Coherency_Maintenance>
 8000e1c:	1d33      	adds	r3, r6, #4
 8000e1e:	429c      	cmp	r4, r3
 8000e20:	d202      	bcs.n	8000e28 <APP_GetNextReadyFrame+0x70>
 8000e22:	1d23      	adds	r3, r4, #4
 8000e24:	429e      	cmp	r6, r3
 8000e26:	d340      	bcc.n	8000eaa <APP_GetNextReadyFrame+0xf2>
 8000e28:	4272      	negs	r2, r6
 8000e2a:	f012 0203 	ands.w	r2, r2, #3
 8000e2e:	f000 80ba 	beq.w	8000fa6 <APP_GetNextReadyFrame+0x1ee>
  }
  
  /****Copy the camera_capture_buff buffer content onto the camera_frame_buff buffer so to release the camera capture buffer before triggering the subsequent camera frame capture****/
  for(uint32_t i=0;i<CAM_RES_WIDTH*CAM_RES_HEIGHT*RGB_565_BPP; i++)
  {
    *((uint8_t *)(cam_frame_buff + i)) = *((uint8_t *)(cam_capture_buff + i));
 8000e32:	7833      	ldrb	r3, [r6, #0]
 8000e34:	2a01      	cmp	r2, #1
 8000e36:	7023      	strb	r3, [r4, #0]
 8000e38:	d044      	beq.n	8000ec4 <APP_GetNextReadyFrame+0x10c>
 8000e3a:	7873      	ldrb	r3, [r6, #1]
 8000e3c:	2a03      	cmp	r2, #3
 8000e3e:	7063      	strb	r3, [r4, #1]
 8000e40:	f040 80b5 	bne.w	8000fae <APP_GetNextReadyFrame+0x1f6>
 8000e44:	78b3      	ldrb	r3, [r6, #2]
  for(uint32_t i=0;i<CAM_RES_WIDTH*CAM_RES_HEIGHT*RGB_565_BPP; i++)
 8000e46:	4617      	mov	r7, r2
    *((uint8_t *)(cam_frame_buff + i)) = *((uint8_t *)(cam_capture_buff + i));
 8000e48:	f8df c174 	ldr.w	ip, [pc, #372]	; 8000fc0 <APP_GetNextReadyFrame+0x208>
 8000e4c:	70a3      	strb	r3, [r4, #2]
 8000e4e:	f5c2 2ee1 	rsb	lr, r2, #460800	; 0x70800
 8000e52:	18b1      	adds	r1, r6, r2
  for(uint32_t i=0;i<CAM_RES_WIDTH*CAM_RES_HEIGHT*RGB_565_BPP; i++)
 8000e54:	2300      	movs	r3, #0
 8000e56:	4422      	add	r2, r4
 8000e58:	ea4f 059e 	mov.w	r5, lr, lsr #2
 8000e5c:	3301      	adds	r3, #1
    *((uint8_t *)(cam_frame_buff + i)) = *((uint8_t *)(cam_capture_buff + i));
 8000e5e:	f851 0b04 	ldr.w	r0, [r1], #4
 8000e62:	429d      	cmp	r5, r3
 8000e64:	f842 0b04 	str.w	r0, [r2], #4
 8000e68:	d8f8      	bhi.n	8000e5c <APP_GetNextReadyFrame+0xa4>
 8000e6a:	f02e 0103 	bic.w	r1, lr, #3
 8000e6e:	458e      	cmp	lr, r1
 8000e70:	eb07 0301 	add.w	r3, r7, r1
 8000e74:	ebac 0201 	sub.w	r2, ip, r1
 8000e78:	d00d      	beq.n	8000e96 <APP_GetNextReadyFrame+0xde>
 8000e7a:	5cf0      	ldrb	r0, [r6, r3]
  for(uint32_t i=0;i<CAM_RES_WIDTH*CAM_RES_HEIGHT*RGB_565_BPP; i++)
 8000e7c:	2a01      	cmp	r2, #1
 8000e7e:	f103 0101 	add.w	r1, r3, #1
    *((uint8_t *)(cam_frame_buff + i)) = *((uint8_t *)(cam_capture_buff + i));
 8000e82:	54e0      	strb	r0, [r4, r3]
  for(uint32_t i=0;i<CAM_RES_WIDTH*CAM_RES_HEIGHT*RGB_565_BPP; i++)
 8000e84:	d007      	beq.n	8000e96 <APP_GetNextReadyFrame+0xde>
    *((uint8_t *)(cam_frame_buff + i)) = *((uint8_t *)(cam_capture_buff + i));
 8000e86:	5c70      	ldrb	r0, [r6, r1]
  for(uint32_t i=0;i<CAM_RES_WIDTH*CAM_RES_HEIGHT*RGB_565_BPP; i++)
 8000e88:	2a02      	cmp	r2, #2
 8000e8a:	f103 0302 	add.w	r3, r3, #2
    *((uint8_t *)(cam_frame_buff + i)) = *((uint8_t *)(cam_capture_buff + i));
 8000e8e:	5460      	strb	r0, [r4, r1]
  for(uint32_t i=0;i<CAM_RES_WIDTH*CAM_RES_HEIGHT*RGB_565_BPP; i++)
 8000e90:	d001      	beq.n	8000e96 <APP_GetNextReadyFrame+0xde>
    *((uint8_t *)(cam_frame_buff + i)) = *((uint8_t *)(cam_capture_buff + i));
 8000e92:	5cf2      	ldrb	r2, [r6, r3]
 8000e94:	54e2      	strb	r2, [r4, r3]
  }
#endif
}
 8000e96:	b009      	add	sp, #36	; 0x24
 8000e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if((App_Context_Ptr->Operating_Mode == DUMP) && 
 8000e9c:	7903      	ldrb	r3, [r0, #4]
 8000e9e:	2b03      	cmp	r3, #3
 8000ea0:	d197      	bne.n	8000dd2 <APP_GetNextReadyFrame+0x1a>
    TEST_GetNextDumpInput(App_Context_Ptr->Test_ContextPtr, 
 8000ea2:	4631      	mov	r1, r6
 8000ea4:	f002 f862 	bl	8002f6c <TEST_GetNextDumpInput>
 8000ea8:	e796      	b.n	8000dd8 <APP_GetNextReadyFrame+0x20>
 8000eaa:	4943      	ldr	r1, [pc, #268]	; (8000fb8 <APP_GetNextReadyFrame+0x200>)
 8000eac:	3c01      	subs	r4, #1
 8000eae:	1e73      	subs	r3, r6, #1
 8000eb0:	4431      	add	r1, r6
    *((uint8_t *)(cam_frame_buff + i)) = *((uint8_t *)(cam_capture_buff + i));
 8000eb2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  for(uint32_t i=0;i<CAM_RES_WIDTH*CAM_RES_HEIGHT*RGB_565_BPP; i++)
 8000eb6:	428b      	cmp	r3, r1
    *((uint8_t *)(cam_frame_buff + i)) = *((uint8_t *)(cam_capture_buff + i));
 8000eb8:	f804 2f01 	strb.w	r2, [r4, #1]!
  for(uint32_t i=0;i<CAM_RES_WIDTH*CAM_RES_HEIGHT*RGB_565_BPP; i++)
 8000ebc:	d1f9      	bne.n	8000eb2 <APP_GetNextReadyFrame+0xfa>
}
 8000ebe:	b009      	add	sp, #36	; 0x24
 8000ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    *((uint8_t *)(cam_frame_buff + i)) = *((uint8_t *)(cam_capture_buff + i));
 8000ec4:	f8df c0f0 	ldr.w	ip, [pc, #240]	; 8000fb8 <APP_GetNextReadyFrame+0x200>
  for(uint32_t i=0;i<CAM_RES_WIDTH*CAM_RES_HEIGHT*RGB_565_BPP; i++)
 8000ec8:	4617      	mov	r7, r2
 8000eca:	e7c0      	b.n	8000e4e <APP_GetNextReadyFrame+0x96>
  if((App_Context_Ptr->Operating_Mode == VALID) && (Validation_Ctx_Ptr->validation_completed ==0))
 8000ecc:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	f47f af7e 	bne.w	8000dd2 <APP_GetNextReadyFrame+0x1a>
    TEST_GetNextValidationInput(App_Context_Ptr->Test_ContextPtr, 
 8000ed6:	4631      	mov	r1, r6
 8000ed8:	f002 f882 	bl	8002fe0 <TEST_GetNextValidationInput>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8000edc:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000ee0:	f018 fd38 	bl	8019954 <UTIL_LCD_Clear>
  if((App_Context_Ptr->Operating_Mode == DUMP)&& (App_Context_Ptr->Test_ContextPtr->DumpContext.Dump_FrameSource == SDCARD_FILE))
 8000ee4:	782b      	ldrb	r3, [r5, #0]
  if(App_Context_Ptr->Operating_Mode == VALID || ((App_Context_Ptr->Operating_Mode == DUMP)&& (App_Context_Ptr->Test_ContextPtr->DumpContext.Dump_FrameSource == SDCARD_FILE)))
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	f47f af7e 	bne.w	8000de8 <APP_GetNextReadyFrame+0x30>
    UTILS_DCache_Coherency_Maintenance((void *)App_Context_Ptr->Camera_ContextPtr->camera_capture_buffer,
 8000eec:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8000eee:	2202      	movs	r2, #2
 8000ef0:	f44f 21e1 	mov.w	r1, #460800	; 0x70800
 8000ef4:	6818      	ldr	r0, [r3, #0]
 8000ef6:	f003 fbeb 	bl	80046d0 <UTILS_DCache_Coherency_Maintenance>
  if(App_Context_Ptr->Operating_Mode == VALID)
 8000efa:	f895 a000 	ldrb.w	sl, [r5]
 8000efe:	f1ba 0f02 	cmp.w	sl, #2
 8000f02:	f47f af74 	bne.w	8000dee <APP_GetNextReadyFrame+0x36>
      UTILS_Dma2d_Memcpy((uint32_t *)(App_Context_Ptr->Camera_ContextPtr->camera_capture_buffer), 
 8000f06:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8000f08:	f44f 79f0 	mov.w	r9, #480	; 0x1e0
 8000f0c:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8000fc4 <APP_GetNextReadyFrame+0x20c>
 8000f10:	f04f 0b01 	mov.w	fp, #1
 8000f14:	6818      	ldr	r0, [r3, #0]
 8000f16:	2300      	movs	r3, #0
 8000f18:	4641      	mov	r1, r8
 8000f1a:	f8cd a00c 	str.w	sl, [sp, #12]
 8000f1e:	9306      	str	r3, [sp, #24]
 8000f20:	461a      	mov	r2, r3
 8000f22:	f8cd 9000 	str.w	r9, [sp]
      App_Context_Ptr->Preproc_ContextPtr->Roi.x0=0;
 8000f26:	2700      	movs	r7, #0
      UTILS_Dma2d_Memcpy((uint32_t *)(App_Context_Ptr->Camera_ContextPtr->camera_capture_buffer), 
 8000f28:	e9cd bb04 	strd	fp, fp, [sp, #16]
 8000f2c:	e9cd 9901 	strd	r9, r9, [sp, #4]
 8000f30:	f003 fb14 	bl	800455c <UTILS_Dma2d_Memcpy>
      UTILS_DCache_Coherency_Maintenance((void *)valid_image_buff, CAM_RES_WIDTH*CAM_RES_HEIGHT*RGB_888_BPP, INVALIDATE);
 8000f34:	465a      	mov	r2, fp
 8000f36:	4640      	mov	r0, r8
 8000f38:	4920      	ldr	r1, [pc, #128]	; (8000fbc <APP_GetNextReadyFrame+0x204>)
 8000f3a:	f003 fbc9 	bl	80046d0 <UTILS_DCache_Coherency_Maintenance>
      App_Context_Ptr->Preproc_ContextPtr->Resize_Src_Img.pData=valid_image_buff;
 8000f3e:	6e2b      	ldr	r3, [r5, #96]	; 0x60
      App_Context_Ptr->Preproc_ContextPtr->Roi.y0=0;
 8000f40:	e9c3 7703 	strd	r7, r7, [r3, #12]
      App_Context_Ptr->Preproc_ContextPtr->Roi.height=0;
 8000f44:	e9c3 7705 	strd	r7, r7, [r3, #20]
      App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.width=224;
 8000f48:	27e0      	movs	r7, #224	; 0xe0
      App_Context_Ptr->Preproc_ContextPtr->Resize_Src_Img.pData=valid_image_buff;
 8000f4a:	f8c3 8044 	str.w	r8, [r3, #68]	; 0x44
      ImageResize_NearestNeighbor(&App_Context_Ptr->Preproc_ContextPtr->Resize_Src_Img, 
 8000f4e:	f103 020c 	add.w	r2, r3, #12
      App_Context_Ptr->Preproc_ContextPtr->Resize_Src_Img.width=CAM_RES_WIDTH;
 8000f52:	f8c3 903c 	str.w	r9, [r3, #60]	; 0x3c
      ImageResize_NearestNeighbor(&App_Context_Ptr->Preproc_ContextPtr->Resize_Src_Img, 
 8000f56:	f103 014c 	add.w	r1, r3, #76	; 0x4c
      App_Context_Ptr->Preproc_ContextPtr->Resize_Src_Img.height=CAM_RES_HEIGHT;
 8000f5a:	f8c3 9040 	str.w	r9, [r3, #64]	; 0x40
      ImageResize_NearestNeighbor(&App_Context_Ptr->Preproc_ContextPtr->Resize_Src_Img, 
 8000f5e:	f103 003c 	add.w	r0, r3, #60	; 0x3c
      App_Context_Ptr->Preproc_ContextPtr->Resize_Src_Img.format=PXFMT_RGB888;
 8000f62:	f883 a048 	strb.w	sl, [r3, #72]	; 0x48
      App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.pData=valid_image_buff;
 8000f66:	f8c3 8054 	str.w	r8, [r3, #84]	; 0x54
      App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.format=PXFMT_RGB888;
 8000f6a:	f883 a058 	strb.w	sl, [r3, #88]	; 0x58
      App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.height=224;
 8000f6e:	e9c3 7713 	strd	r7, r7, [r3, #76]	; 0x4c
      ImageResize_NearestNeighbor(&App_Context_Ptr->Preproc_ContextPtr->Resize_Src_Img, 
 8000f72:	f018 fc8b 	bl	801988c <ImageResize_NearestNeighbor>
      UTILS_DCache_Coherency_Maintenance((void *)valid_image_buff, CAM_RES_WIDTH*CAM_RES_HEIGHT*RGB_888_BPP, CLEAN);
 8000f76:	4652      	mov	r2, sl
 8000f78:	4640      	mov	r0, r8
 8000f7a:	4910      	ldr	r1, [pc, #64]	; (8000fbc <APP_GetNextReadyFrame+0x204>)
 8000f7c:	f003 fba8 	bl	80046d0 <UTILS_DCache_Coherency_Maintenance>
      DISPLAY_Copy2LCDWriteBuffer(App_Context_Ptr->Display_ContextPtr, (uint32_t *)(valid_image_buff), 50,
 8000f80:	2300      	movs	r3, #0
 8000f82:	6e68      	ldr	r0, [r5, #100]	; 0x64
 8000f84:	4641      	mov	r1, r8
 8000f86:	9303      	str	r3, [sp, #12]
 8000f88:	2232      	movs	r2, #50	; 0x32
 8000f8a:	f8cd b008 	str.w	fp, [sp, #8]
 8000f8e:	2382      	movs	r3, #130	; 0x82
 8000f90:	9701      	str	r7, [sp, #4]
 8000f92:	9700      	str	r7, [sp, #0]
 8000f94:	f000 fcd6 	bl	8001944 <DISPLAY_Copy2LCDWriteBuffer>
 8000f98:	e737      	b.n	8000e0a <APP_GetNextReadyFrame+0x52>
  if(App_Context_Ptr->Operating_Mode == VALID || ((App_Context_Ptr->Operating_Mode == DUMP)&& (App_Context_Ptr->Test_ContextPtr->DumpContext.Dump_FrameSource == SDCARD_FILE)))
 8000f9a:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8000f9c:	791b      	ldrb	r3, [r3, #4]
 8000f9e:	2b03      	cmp	r3, #3
 8000fa0:	f47f af25 	bne.w	8000dee <APP_GetNextReadyFrame+0x36>
 8000fa4:	e7a2      	b.n	8000eec <APP_GetNextReadyFrame+0x134>
  for(uint32_t i=0;i<CAM_RES_WIDTH*CAM_RES_HEIGHT*RGB_565_BPP; i++)
 8000fa6:	f44f 2ce1 	mov.w	ip, #460800	; 0x70800
 8000faa:	4617      	mov	r7, r2
 8000fac:	e74f      	b.n	8000e4e <APP_GetNextReadyFrame+0x96>
    *((uint8_t *)(cam_frame_buff + i)) = *((uint8_t *)(cam_capture_buff + i));
 8000fae:	f8df c018 	ldr.w	ip, [pc, #24]	; 8000fc8 <APP_GetNextReadyFrame+0x210>
  for(uint32_t i=0;i<CAM_RES_WIDTH*CAM_RES_HEIGHT*RGB_565_BPP; i++)
 8000fb2:	2702      	movs	r7, #2
 8000fb4:	e74b      	b.n	8000e4e <APP_GetNextReadyFrame+0x96>
 8000fb6:	bf00      	nop
 8000fb8:	000707ff 	.word	0x000707ff
 8000fbc:	000a8c00 	.word	0x000a8c00
 8000fc0:	000707fd 	.word	0x000707fd
 8000fc4:	d0af84e0 	.word	0xd0af84e0
 8000fc8:	000707fe 	.word	0x000707fe

08000fcc <APP_StartNewFrameAcquisition>:
 * @brief Start the camera acquisition of the subsequent frame
 * @param App_Context_Ptr pointer to application context
 */
void APP_StartNewFrameAcquisition(AppContext_TypeDef *App_Context_Ptr)
{
  if(App_Context_Ptr->Operating_Mode == NOMINAL || 
 8000fcc:	7803      	ldrb	r3, [r0, #0]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d008      	beq.n	8000fe4 <APP_StartNewFrameAcquisition+0x18>
 8000fd2:	2b04      	cmp	r3, #4
 8000fd4:	d006      	beq.n	8000fe4 <APP_StartNewFrameAcquisition+0x18>
     App_Context_Ptr->Operating_Mode == CAPTURE || 
 8000fd6:	2b03      	cmp	r3, #3
 8000fd8:	d000      	beq.n	8000fdc <APP_StartNewFrameAcquisition+0x10>
 8000fda:	4770      	bx	lr
       ((App_Context_Ptr->Operating_Mode == DUMP)&& (App_Context_Ptr->Test_ContextPtr->DumpContext.Dump_FrameSource != SDCARD_FILE)))
 8000fdc:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8000fde:	791b      	ldrb	r3, [r3, #4]
 8000fe0:	2b03      	cmp	r3, #3
 8000fe2:	d0fa      	beq.n	8000fda <APP_StartNewFrameAcquisition+0xe>
  {
 //   __disable_irq();
    App_Context_Ptr->Camera_ContextPtr->vsync_it=0;
 8000fe4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
{
 8000fe6:	b570      	push	{r4, r5, r6, lr}
    App_Context_Ptr->Camera_ContextPtr->vsync_it=0;
 8000fe8:	2500      	movs	r5, #0
 8000fea:	4604      	mov	r4, r0
    
    App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1=HAL_GetTick();
 8000fec:	6e86      	ldr	r6, [r0, #104]	; 0x68
    App_Context_Ptr->Camera_ContextPtr->vsync_it=0;
 8000fee:	609d      	str	r5, [r3, #8]
    App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1=HAL_GetTick();
 8000ff0:	f009 fb06 	bl	800a600 <HAL_GetTick>
    
    App_Context_Ptr->Camera_ContextPtr->new_frame_ready = 0;
 8000ff4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1=HAL_GetTick();
 8000ff6:	61b0      	str	r0, [r6, #24]
    
    /***Resume the camera capture in NOMINAL mode****/
    BSP_CAMERA_Resume(0);
 8000ff8:	4628      	mov	r0, r5
    App_Context_Ptr->Camera_ContextPtr->new_frame_ready = 0;
 8000ffa:	751d      	strb	r5, [r3, #20]
  //  __enable_irq();
  }
}
 8000ffc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    BSP_CAMERA_Resume(0);
 8001000:	f008 b900 	b.w	8009204 <BSP_CAMERA_Resume>

08001004 <APP_FramePreprocess>:
 * @param App_Context_Ptr pointer to application context
 */
void APP_FramePreprocess(AppContext_TypeDef *App_Context_Ptr)
{
  /*Call a fct in charge of executing the sequence of preprocessing steps*/
  Run_Preprocessing(App_Context_Ptr);
 8001004:	f017 b9fc 	b.w	8018400 <Run_Preprocessing>

08001008 <APP_NetworkInference>:
/**
 * @brief Run neural network inference on preprocessed captured frame
 * @param App_Context_Ptr pointer to application context
 */
void APP_NetworkInference(AppContext_TypeDef *App_Context_Ptr)
{
 8001008:	b538      	push	{r3, r4, r5, lr}
  uint32_t tinf_start;
  uint32_t tinf_stop;
  TestRunContext_TypeDef* TestRunCtxt_Ptr=&App_Context_Ptr->Test_ContextPtr->TestRunContext;
 800100a:	e9d0 531b 	ldrd	r5, r3, [r0, #108]	; 0x6c
  
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Ai_ContextPtr->nn_input_buffer);
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[3];
 800100e:	4a16      	ldr	r2, [pc, #88]	; (8001068 <APP_NetworkInference+0x60>)
{
 8001010:	4604      	mov	r4, r0
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Ai_ContextPtr->nn_input_buffer);
 8001012:	685b      	ldr	r3, [r3, #4]
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[3];
 8001014:	f8c5 2b4c 	str.w	r2, [r5, #2892]	; 0xb4c
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Ai_ContextPtr->nn_input_buffer);
 8001018:	f8c5 3b48 	str.w	r3, [r5, #2888]	; 0xb48
  TestRunCtxt_Ptr->src_width_size=ai_get_input_width();
 800101c:	f7ff fb7a 	bl	8000714 <ai_get_input_width>
 8001020:	f8c5 0b50 	str.w	r0, [r5, #2896]	; 0xb50
  TestRunCtxt_Ptr->src_height_size=ai_get_input_height();
 8001024:	f7ff fb70 	bl	8000708 <ai_get_input_height>
  TestRunCtxt_Ptr->src_size=AI_NET_INPUT_SIZE;
  TestRunCtxt_Ptr->PerformCapture=1;
 8001028:	2301      	movs	r3, #1
  TestRunCtxt_Ptr->DumpFormat=BMP888;
 800102a:	2202      	movs	r2, #2
  TestRunCtxt_Ptr->src_size=AI_NET_INPUT_SIZE;
 800102c:	f44f 3113 	mov.w	r1, #150528	; 0x24c00
  TestRunCtxt_Ptr->PerformCapture=1;
 8001030:	f8c5 3b5c 	str.w	r3, [r5, #2908]	; 0xb5c
  TestRunCtxt_Ptr->rb_swap=1;
 8001034:	f8c5 3b64 	str.w	r3, [r5, #2916]	; 0xb64
  TestRunCtxt_Ptr->DumpFormat=BMP888;
 8001038:	f885 2b60 	strb.w	r2, [r5, #2912]	; 0xb60
  TestRunCtxt_Ptr->src_height_size=ai_get_input_height();
 800103c:	f8c5 0b54 	str.w	r0, [r5, #2900]	; 0xb54
  TestRunCtxt_Ptr->src_size=AI_NET_INPUT_SIZE;
 8001040:	f8c5 1b58 	str.w	r1, [r5, #2904]	; 0xb58
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 8001044:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001046:	7821      	ldrb	r1, [r4, #0]
 8001048:	f002 fb4a 	bl	80036e0 <TEST_Run>
 
  tinf_start=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 800104c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800104e:	f003 fa83 	bl	8004558 <UTILS_GetTimeStamp>
 8001052:	4605      	mov	r5, r0
  
  /***********************************/
  /*********Run NN inference**********/
  /***********************************/
  AI_Run(App_Context_Ptr->Ai_ContextPtr);
 8001054:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8001056:	f7ff fd85 	bl	8000b64 <AI_Run>
  
  tinf_stop=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 800105a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800105c:	f003 fa7c 	bl	8004558 <UTILS_GetTimeStamp>

  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE]=tinf_stop-tinf_start;
 8001060:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8001062:	1b40      	subs	r0, r0, r5
 8001064:	6118      	str	r0, [r3, #16]
}
 8001066:	bd38      	pop	{r3, r4, r5, pc}
 8001068:	240000b4 	.word	0x240000b4

0800106c <APP_Postprocess>:
/**
 * @brief Run post-processing operation
 * @param App_Context_Ptr pointer to application context
 */
void APP_Postprocess(AppContext_TypeDef *App_Context_Ptr)
{
 800106c:	b5f0      	push	{r4, r5, r6, r7, lr}
  TestRunContext_TypeDef* TestRunCtxt_Ptr=&App_Context_Ptr->Test_ContextPtr->TestRunContext;

  /*** At that point, it is recommended to wait until current camera acquisition is completed before proceeding  
  *** before proceeding in order to avoid bottleneck at FMC slave (btw LTDC/DMA2D and DMA).
  ***/
  while(App_Context_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 800106e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
{
 8001070:	4605      	mov	r5, r0
  TestRunContext_TypeDef* TestRunCtxt_Ptr=&App_Context_Ptr->Test_ContextPtr->TestRunContext;
 8001072:	6ec6      	ldr	r6, [r0, #108]	; 0x6c
{
 8001074:	ed2d 8b02 	vpush	{d8}
 8001078:	b095      	sub	sp, #84	; 0x54
  while(App_Context_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 800107a:	7d13      	ldrb	r3, [r2, #20]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d0fc      	beq.n	800107a <APP_Postprocess+0xe>
  
  UTILS_Compute_ExecutionTiming(App_Context_Ptr->Utils_ContextPtr);
 8001080:	6ea8      	ldr	r0, [r5, #104]	; 0x68
  /**NN ouput dequantization if required**/
  AI_Output_Dequantize(App_Context_Ptr->Ai_ContextPtr);

  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer);
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[4];
  TestRunCtxt_Ptr->src_width_size=0;
 8001082:	2400      	movs	r4, #0
  UTILS_Compute_ExecutionTiming(App_Context_Ptr->Utils_ContextPtr);
 8001084:	f003 fb7c 	bl	8004780 <UTILS_Compute_ExecutionTiming>
  AI_Output_Dequantize(App_Context_Ptr->Ai_ContextPtr);
 8001088:	6f28      	ldr	r0, [r5, #112]	; 0x70
 800108a:	f7ff fdf1 	bl	8000c70 <AI_Output_Dequantize>
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer);
 800108e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  TestRunCtxt_Ptr->src_height_size=0;
  TestRunCtxt_Ptr->src_size=/*AI_NETWORK_OUT_1_SIZE*/AI_NETWORK_OUT_1_SIZE_BYTES;//so to make it compatible w/ case where dump is in SDRAM
 8001090:	2248      	movs	r2, #72	; 0x48
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[4];
 8001092:	48a1      	ldr	r0, [pc, #644]	; (8001318 <APP_Postprocess+0x2ac>)
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer);
 8001094:	6819      	ldr	r1, [r3, #0]
  TestRunCtxt_Ptr->PerformCapture=0;
  TestRunCtxt_Ptr->DumpFormat=TXT;
 8001096:	2305      	movs	r3, #5
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[4];
 8001098:	f8c6 0b4c 	str.w	r0, [r6, #2892]	; 0xb4c
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer);
 800109c:	f8c6 1b48 	str.w	r1, [r6, #2888]	; 0xb48
  TestRunCtxt_Ptr->src_size=/*AI_NETWORK_OUT_1_SIZE*/AI_NETWORK_OUT_1_SIZE_BYTES;//so to make it compatible w/ case where dump is in SDRAM
 80010a0:	f8c6 2b58 	str.w	r2, [r6, #2904]	; 0xb58
  TestRunCtxt_Ptr->DumpFormat=TXT;
 80010a4:	f886 3b60 	strb.w	r3, [r6, #2912]	; 0xb60
  TestRunCtxt_Ptr->src_width_size=0;
 80010a8:	f8c6 4b50 	str.w	r4, [r6, #2896]	; 0xb50
  TestRunCtxt_Ptr->src_height_size=0;
 80010ac:	f8c6 4b54 	str.w	r4, [r6, #2900]	; 0xb54
  TestRunCtxt_Ptr->PerformCapture=0;
 80010b0:	f8c6 4b5c 	str.w	r4, [r6, #2908]	; 0xb5c
  TestRunCtxt_Ptr->rb_swap=0;
 80010b4:	f8c6 4b64 	str.w	r4, [r6, #2916]	; 0xb64
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 80010b8:	7829      	ldrb	r1, [r5, #0]
 80010ba:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 80010bc:	f002 fb10 	bl	80036e0 <TEST_Run>

  /**Perform ranking**/
  for (int i = 0; i < NN_OUTPUT_CLASS_NUMBER; i++)
 80010c0:	4622      	mov	r2, r4
 80010c2:	f105 0310 	add.w	r3, r5, #16
  {
    App_Context_Ptr->ranking[i] = i;
 80010c6:	f843 2f04 	str.w	r2, [r3, #4]!
  for (int i = 0; i < NN_OUTPUT_CLASS_NUMBER; i++)
 80010ca:	3201      	adds	r2, #1
 80010cc:	2a12      	cmp	r2, #18
 80010ce:	d1fa      	bne.n	80010c6 <APP_Postprocess+0x5a>
  }
  
  UTILS_Bubblesort((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer), App_Context_Ptr->ranking, NN_OUTPUT_CLASS_NUMBER);
 80010d0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80010d2:	f105 0114 	add.w	r1, r5, #20
  
  App_Context_Ptr->nn_top1_output_class_name=NN_OUTPUT_CLASS_LIST[App_Context_Ptr->ranking[0]];
 80010d6:	4c91      	ldr	r4, [pc, #580]	; (800131c <APP_Postprocess+0x2b0>)
  UTILS_Bubblesort((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer), App_Context_Ptr->ranking, NN_OUTPUT_CLASS_NUMBER);
 80010d8:	6818      	ldr	r0, [r3, #0]
 80010da:	f003 fb2b 	bl	8004734 <UTILS_Bubblesort>
  App_Context_Ptr->nn_top1_output_class_proba=*((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+0);
 80010de:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  App_Context_Ptr->nn_top1_output_class_name=NN_OUTPUT_CLASS_LIST[App_Context_Ptr->ranking[0]];
 80010e0:	696a      	ldr	r2, [r5, #20]
  App_Context_Ptr->nn_top1_output_class_proba=*((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+0);
 80010e2:	681b      	ldr	r3, [r3, #0]
  App_Context_Ptr->nn_top1_output_class_name=NN_OUTPUT_CLASS_LIST[App_Context_Ptr->ranking[0]];
 80010e4:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
  App_Context_Ptr->nn_top1_output_class_proba=*((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+0);
 80010e8:	6819      	ldr	r1, [r3, #0]
  
  if(App_Context_Ptr->Operating_Mode == NOMINAL)
 80010ea:	782b      	ldrb	r3, [r5, #0]
  App_Context_Ptr->nn_top1_output_class_proba=*((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+0);
 80010ec:	6129      	str	r1, [r5, #16]
  if(App_Context_Ptr->Operating_Mode == NOMINAL)
 80010ee:	2b01      	cmp	r3, #1
  App_Context_Ptr->nn_top1_output_class_name=NN_OUTPUT_CLASS_LIST[App_Context_Ptr->ranking[0]];
 80010f0:	60ea      	str	r2, [r5, #12]
  if(App_Context_Ptr->Operating_Mode == NOMINAL)
 80010f2:	d006      	beq.n	8001102 <APP_Postprocess+0x96>
    
    BSP_LED_Toggle(LED_BLUE);
  }
  else 
  {
    TEST_PostProcess(App_Context_Ptr->Test_ContextPtr);
 80010f4:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 80010f6:	f002 fe27 	bl	8003d48 <TEST_PostProcess>
  }
}
 80010fa:	b015      	add	sp, #84	; 0x54
 80010fc:	ecbd 8b02 	vpop	{d8}
 8001100:	bdf0      	pop	{r4, r5, r6, r7, pc}
  occurrence_number--;
 8001102:	4a87      	ldr	r2, [pc, #540]	; (8001320 <APP_Postprocess+0x2b4>)
 8001104:	6810      	ldr	r0, [r2, #0]
  if (occurrence_number == 0)
 8001106:	3801      	subs	r0, #1
 8001108:	d007      	beq.n	800111a <APP_Postprocess+0xae>
  occurrence_number--;
 800110a:	6010      	str	r0, [r2, #0]
    BSP_LED_Toggle(LED_BLUE);
 800110c:	2003      	movs	r0, #3
 800110e:	f007 f805 	bl	800811c <BSP_LED_Toggle>
}
 8001112:	b015      	add	sp, #84	; 0x54
 8001114:	ecbd 8b02 	vpop	{d8}
 8001118:	bdf0      	pop	{r4, r5, r6, r7, pc}
    occurrence_number = NN_OUTPUT_DISPLAY_REFRESH_RATE;
 800111a:	6013      	str	r3, [r2, #0]
    if (BSP_PB_GetState(BUTTON_WAKEUP) != RESET)
 800111c:	f007 f858 	bl	80081d0 <BSP_PB_GetState>
      display_mode = !display_mode;
 8001120:	4f80      	ldr	r7, [pc, #512]	; (8001324 <APP_Postprocess+0x2b8>)
    if (BSP_PB_GetState(BUTTON_WAKEUP) != RESET)
 8001122:	2800      	cmp	r0, #0
 8001124:	d175      	bne.n	8001212 <APP_Postprocess+0x1a6>
 8001126:	ae02      	add	r6, sp, #8
    if (display_mode == 0)
 8001128:	683f      	ldr	r7, [r7, #0]
 800112a:	2f00      	cmp	r7, #0
 800112c:	f000 80c1 	beq.w	80012b2 <APP_Postprocess+0x246>
    else  if (display_mode == 1)
 8001130:	2f01      	cmp	r7, #1
 8001132:	f000 80ca 	beq.w	80012ca <APP_Postprocess+0x25e>
      sprintf(msg, "%s %.0f%%", NN_OUTPUT_CLASS_LIST[App_Context_Ptr->ranking[i]], *((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+i) * 100);
 8001136:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001138:	4630      	mov	r0, r6
 800113a:	ed9f 8a7b 	vldr	s16, [pc, #492]	; 8001328 <APP_Postprocess+0x2bc>
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	696b      	ldr	r3, [r5, #20]
 8001142:	ed92 7a00 	vldr	s14, [r2]
 8001146:	4979      	ldr	r1, [pc, #484]	; (800132c <APP_Postprocess+0x2c0>)
 8001148:	ee27 7a08 	vmul.f32	s14, s14, s16
 800114c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 8001150:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8001154:	ed8d 7b00 	vstr	d7, [sp]
 8001158:	f01d f9c6 	bl	801e4e8 <siprintf>
      UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_TOP_N_LAST_LINE - NN_TOP_N_DISPLAY + i), (uint8_t *)msg, CENTER_MODE);
 800115c:	f018 fbf2 	bl	8019944 <UTIL_LCD_GetFont>
 8001160:	88c1      	ldrh	r1, [r0, #6]
 8001162:	2301      	movs	r3, #1
 8001164:	4632      	mov	r2, r6
 8001166:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 800116a:	2000      	movs	r0, #0
 800116c:	eb01 0144 	add.w	r1, r1, r4, lsl #1
 8001170:	f018 fcb6 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
    sprintf(msg, "Inference: %ldms", App_Context_Ptr->nn_inference_time);
 8001174:	68aa      	ldr	r2, [r5, #8]
 8001176:	496e      	ldr	r1, [pc, #440]	; (8001330 <APP_Postprocess+0x2c4>)
 8001178:	4630      	mov	r0, r6
 800117a:	f01d f9b5 	bl	801e4e8 <siprintf>
    UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_INFER_TIME_LINE), (uint8_t *)msg, CENTER_MODE);
 800117e:	f018 fbe1 	bl	8019944 <UTIL_LCD_GetFont>
 8001182:	88c1      	ldrh	r1, [r0, #6]
 8001184:	2301      	movs	r3, #1
 8001186:	4632      	mov	r2, r6
 8001188:	0109      	lsls	r1, r1, #4
 800118a:	2000      	movs	r0, #0
 800118c:	f018 fca8 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
    sprintf(msg, "Fps: %.1f", 1000.0F / (float)(App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.Tfps));
 8001190:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8001192:	eddf 6a68 	vldr	s13, [pc, #416]	; 8001334 <APP_Postprocess+0x2c8>
 8001196:	4630      	mov	r0, r6
 8001198:	edd3 7a05 	vldr	s15, [r3, #20]
 800119c:	4966      	ldr	r1, [pc, #408]	; (8001338 <APP_Postprocess+0x2cc>)
 800119e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80011a6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80011aa:	ec53 2b17 	vmov	r2, r3, d7
 80011ae:	f01d f99b 	bl	801e4e8 <siprintf>
    UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_FPS_LINE), (uint8_t *)msg, CENTER_MODE);
 80011b2:	f018 fbc7 	bl	8019944 <UTIL_LCD_GetFont>
 80011b6:	88c1      	ldrh	r1, [r0, #6]
 80011b8:	2301      	movs	r3, #1
 80011ba:	4632      	mov	r2, r6
 80011bc:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80011c0:	2000      	movs	r0, #0
 80011c2:	4099      	lsls	r1, r3
 80011c4:	f018 fc8c 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Context_Ptr->Display_ContextPtr);
 80011c8:	6e68      	ldr	r0, [r5, #100]	; 0x64
 80011ca:	f000 fb99 	bl	8001900 <DISPLAY_Refresh>
    BSP_LED_Off(LED_GREEN);
 80011ce:	2000      	movs	r0, #0
 80011d0:	f006 ff94 	bl	80080fc <BSP_LED_Off>
    BSP_LED_Off(LED_ORANGE);
 80011d4:	2001      	movs	r0, #1
 80011d6:	f006 ff91 	bl	80080fc <BSP_LED_Off>
    BSP_LED_Off(LED_RED);
 80011da:	2002      	movs	r0, #2
 80011dc:	f006 ff8e 	bl	80080fc <BSP_LED_Off>
    if ((*((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+0) * 100) < NN_BAD_RES)
 80011e0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80011e2:	ed9f 7a56 	vldr	s14, [pc, #344]	; 800133c <APP_Postprocess+0x2d0>
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	edd3 7a00 	vldr	s15, [r3]
 80011ec:	ee67 7a88 	vmul.f32	s15, s15, s16
 80011f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f8:	d457      	bmi.n	80012aa <APP_Postprocess+0x23e>
    else if (((*((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+0) * 100) >= NN_BAD_RES) && ((*((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+0) * 100) < NN_GOOD_RES))
 80011fa:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8001340 <APP_Postprocess+0x2d4>
 80011fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      BSP_LED_On(LED_ORANGE);
 8001206:	bf4c      	ite	mi
 8001208:	2001      	movmi	r0, #1
      BSP_LED_On(LED_GREEN);
 800120a:	2000      	movpl	r0, #0
 800120c:	f006 ff66 	bl	80080dc <BSP_LED_On>
 8001210:	e77c      	b.n	800110c <APP_Postprocess+0xa0>
      display_mode = !display_mode;
 8001212:	683b      	ldr	r3, [r7, #0]
      UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8001214:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
        sprintf(msg, "Entering CAMERA PREVIEW mode");
 8001218:	ae02      	add	r6, sp, #8
      display_mode = !display_mode;
 800121a:	fab3 f383 	clz	r3, r3
 800121e:	095b      	lsrs	r3, r3, #5
 8001220:	603b      	str	r3, [r7, #0]
      UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8001222:	f018 fb97 	bl	8019954 <UTIL_LCD_Clear>
      if (display_mode == 1)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d066      	beq.n	80012fa <APP_Postprocess+0x28e>
      else  if (display_mode == 0)
 800122c:	b953      	cbnz	r3, 8001244 <APP_Postprocess+0x1d8>
        sprintf(msg, "Exiting CAMERA PREVIEW mode");
 800122e:	f8df e114 	ldr.w	lr, [pc, #276]	; 8001344 <APP_Postprocess+0x2d8>
 8001232:	46b4      	mov	ip, r6
 8001234:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001238:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800123c:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8001240:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
      UTIL_LCD_DisplayStringAt(0, LINE(9), (uint8_t*)msg, CENTER_MODE);
 8001244:	f018 fb7e 	bl	8019944 <UTIL_LCD_GetFont>
 8001248:	88c1      	ldrh	r1, [r0, #6]
 800124a:	2301      	movs	r3, #1
 800124c:	4632      	mov	r2, r6
 800124e:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8001252:	2000      	movs	r0, #0
 8001254:	f018 fc44 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
      sprintf(msg, "Please release button");
 8001258:	f8df e0ec 	ldr.w	lr, [pc, #236]	; 8001348 <APP_Postprocess+0x2dc>
 800125c:	46b4      	mov	ip, r6
 800125e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001262:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001266:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800126a:	f84c 0b04 	str.w	r0, [ip], #4
 800126e:	f8ac 1000 	strh.w	r1, [ip]
      UTIL_LCD_DisplayStringAt(0, LINE(11), (uint8_t*)msg, CENTER_MODE);
 8001272:	f018 fb67 	bl	8019944 <UTIL_LCD_GetFont>
 8001276:	88c1      	ldrh	r1, [r0, #6]
 8001278:	2301      	movs	r3, #1
 800127a:	2000      	movs	r0, #0
 800127c:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8001280:	4632      	mov	r2, r6
 8001282:	eb01 014c 	add.w	r1, r1, ip, lsl #1
 8001286:	f018 fc2b 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
      DISPLAY_Refresh(App_Context_Ptr->Display_ContextPtr);
 800128a:	6e68      	ldr	r0, [r5, #100]	; 0x64
 800128c:	f000 fb38 	bl	8001900 <DISPLAY_Refresh>
      while (BSP_PB_GetState(BUTTON_WAKEUP) != RESET);
 8001290:	2000      	movs	r0, #0
 8001292:	f006 ff9d 	bl	80081d0 <BSP_PB_GetState>
 8001296:	2800      	cmp	r0, #0
 8001298:	d1fa      	bne.n	8001290 <APP_Postprocess+0x224>
      HAL_Delay(200);
 800129a:	20c8      	movs	r0, #200	; 0xc8
 800129c:	f009 f9b6 	bl	800a60c <HAL_Delay>
      UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 80012a0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80012a4:	f018 fb56 	bl	8019954 <UTIL_LCD_Clear>
 80012a8:	e73e      	b.n	8001128 <APP_Postprocess+0xbc>
      BSP_LED_On(LED_RED);
 80012aa:	2002      	movs	r0, #2
 80012ac:	f006 ff16 	bl	80080dc <BSP_LED_On>
 80012b0:	e72c      	b.n	800110c <APP_Postprocess+0xa0>
      UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);/*To clear the camera capture*/
 80012b2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80012b6:	f018 fb4d 	bl	8019954 <UTIL_LCD_Clear>
      DISPLAY_FoodLogo(App_Context_Ptr->Display_ContextPtr, LCD_RES_WIDTH / 2 - 64, LCD_RES_HEIGHT / 2 -100, App_Context_Ptr->ranking[0]);
 80012ba:	696b      	ldr	r3, [r5, #20]
 80012bc:	228c      	movs	r2, #140	; 0x8c
 80012be:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80012c2:	6e68      	ldr	r0, [r5, #100]	; 0x64
 80012c4:	f000 fafe 	bl	80018c4 <DISPLAY_FoodLogo>
 80012c8:	e735      	b.n	8001136 <APP_Postprocess+0xca>
      sprintf(msg, "CAMERA PREVIEW MODE");
 80012ca:	f8df e080 	ldr.w	lr, [pc, #128]	; 800134c <APP_Postprocess+0x2e0>
 80012ce:	46b4      	mov	ip, r6
 80012d0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80012d4:	f8de e000 	ldr.w	lr, [lr]
 80012d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80012dc:	f8cc e000 	str.w	lr, [ip]
      UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_ACQU_MODE_LINE), (uint8_t*)msg, CENTER_MODE);
 80012e0:	f018 fb30 	bl	8019944 <UTIL_LCD_GetFont>
 80012e4:	88c1      	ldrh	r1, [r0, #6]
 80012e6:	463b      	mov	r3, r7
 80012e8:	4632      	mov	r2, r6
 80012ea:	eb01 07c1 	add.w	r7, r1, r1, lsl #3
 80012ee:	2000      	movs	r0, #0
 80012f0:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 80012f4:	f018 fbf4 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
 80012f8:	e71d      	b.n	8001136 <APP_Postprocess+0xca>
        sprintf(msg, "Entering CAMERA PREVIEW mode");
 80012fa:	f8df e054 	ldr.w	lr, [pc, #84]	; 8001350 <APP_Postprocess+0x2e4>
 80012fe:	46b4      	mov	ip, r6
 8001300:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001304:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001308:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 800130c:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 8001310:	f88c 3000 	strb.w	r3, [ip]
 8001314:	e796      	b.n	8001244 <APP_Postprocess+0x1d8>
 8001316:	bf00      	nop
 8001318:	240000d4 	.word	0x240000d4
 800131c:	24000004 	.word	0x24000004
 8001320:	24000000 	.word	0x24000000
 8001324:	24002de4 	.word	0x24002de4
 8001328:	42c80000 	.word	0x42c80000
 800132c:	08020088 	.word	0x08020088
 8001330:	08020094 	.word	0x08020094
 8001334:	447a0000 	.word	0x447a0000
 8001338:	080200a8 	.word	0x080200a8
 800133c:	425c0000 	.word	0x425c0000
 8001340:	428c0000 	.word	0x428c0000
 8001344:	08020040 	.word	0x08020040
 8001348:	0802005c 	.word	0x0802005c
 800134c:	08020074 	.word	0x08020074
 8001350:	08020020 	.word	0x08020020

08001354 <DCMI_MDMAError>:
  * @retval None
  */
static void DCMI_MDMAError(MDMA_HandleTypeDef *hmdma)
{
  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8001354:	6802      	ldr	r2, [r0, #0]
 8001356:	68d3      	ldr	r3, [r2, #12]
 8001358:	f023 0301 	bic.w	r3, r3, #1
 800135c:	60d3      	str	r3, [r2, #12]

  Error_Handler();
 800135e:	f003 ba23 	b.w	80047a8 <Error_Handler>
 8001362:	bf00      	nop

08001364 <DCMI_DMAError>:
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001364:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8001366:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001368:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800136a:	2a02      	cmp	r2, #2
 800136c:	d006      	beq.n	800137c <DCMI_DMAError+0x18>
    hdcmi->State = HAL_DCMI_STATE_READY;
 800136e:	2201      	movs	r2, #1
 8001370:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8001374:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001376:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800137a:	64da      	str	r2, [r3, #76]	; 0x4c
  Error_Handler();
 800137c:	f003 ba14 	b.w	80047a8 <Error_Handler>

08001380 <DCMI_DMALineXferCplt>:
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001380:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (HAL_MDMA_Start_IT(&hmdma, (uint32_t) pCameraLineBuffer, (uint32_t) pDst, line_size, 1) != HAL_OK)
 8001382:	490b      	ldr	r1, [pc, #44]	; (80013b0 <DCMI_DMALineXferCplt+0x30>)
  uint32_t line_size =  hdcmi->XferSize * 4U;
 8001384:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  uint8_t *pDst = (uint8_t *) hdcmi->pBuffPtr + line_size * hdcmi->XferCount;
 8001386:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t line_size =  hdcmi->XferSize * 4U;
 8001388:	009b      	lsls	r3, r3, #2
  uint8_t *pDst = (uint8_t *) hdcmi->pBuffPtr + line_size * hdcmi->XferCount;
 800138a:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800138c:	b510      	push	{r4, lr}
  if (HAL_MDMA_Start_IT(&hmdma, (uint32_t) pCameraLineBuffer, (uint32_t) pDst, line_size, 1) != HAL_OK)
 800138e:	2401      	movs	r4, #1
{
 8001390:	b082      	sub	sp, #8
  if (HAL_MDMA_Start_IT(&hmdma, (uint32_t) pCameraLineBuffer, (uint32_t) pDst, line_size, 1) != HAL_OK)
 8001392:	fb03 2200 	mla	r2, r3, r0, r2
 8001396:	4807      	ldr	r0, [pc, #28]	; (80013b4 <DCMI_DMALineXferCplt+0x34>)
 8001398:	9400      	str	r4, [sp, #0]
 800139a:	f00c fec9 	bl	800e130 <HAL_MDMA_Start_IT>
 800139e:	b908      	cbnz	r0, 80013a4 <DCMI_DMALineXferCplt+0x24>
}
 80013a0:	b002      	add	sp, #8
 80013a2:	bd10      	pop	{r4, pc}
 80013a4:	b002      	add	sp, #8
 80013a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80013aa:	f003 b9fd 	b.w	80047a8 <Error_Handler>
 80013ae:	bf00      	nop
 80013b0:	30000000 	.word	0x30000000
 80013b4:	240043d0 	.word	0x240043d0

080013b8 <DCMI_MDMAFrameXferCplt>:
  __HAL_MDMA_DISABLE(hmdma);
 80013b8:	6801      	ldr	r1, [r0, #0]
  hdcmi->XferCount++;
 80013ba:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <DCMI_MDMAFrameXferCplt+0x3c>)
  __HAL_MDMA_DISABLE(hmdma);
 80013bc:	68ca      	ldr	r2, [r1, #12]
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 80013be:	6c18      	ldr	r0, [r3, #64]	; 0x40
  __HAL_MDMA_DISABLE(hmdma);
 80013c0:	f022 0201 	bic.w	r2, r2, #1
 80013c4:	60ca      	str	r2, [r1, #12]
  hdcmi->XferCount++;
 80013c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80013c8:	3201      	adds	r2, #1
 80013ca:	639a      	str	r2, [r3, #56]	; 0x38
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 80013cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80013ce:	4282      	cmp	r2, r0
 80013d0:	d000      	beq.n	80013d4 <DCMI_MDMAFrameXferCplt+0x1c>
}
 80013d2:	4770      	bx	lr
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	68d1      	ldr	r1, [r2, #12]
 80013d8:	f041 0101 	orr.w	r1, r1, #1
 80013dc:	60d1      	str	r1, [r2, #12]
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80013de:	6812      	ldr	r2, [r2, #0]
 80013e0:	f012 0202 	ands.w	r2, r2, #2
 80013e4:	d101      	bne.n	80013ea <DCMI_MDMAFrameXferCplt+0x32>
      hdcmi->XferCount = 0;
 80013e6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80013e8:	4770      	bx	lr
      hdcmi->State = HAL_DCMI_STATE_READY;
 80013ea:	2201      	movs	r2, #1
 80013ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	240051d4 	.word	0x240051d4

080013f8 <CAMERA_Init>:
  Camera_Context_Ptr->new_frame_ready=0;
 80013f8:	2300      	movs	r3, #0
  __HAL_RCC_MDMA_CLK_ENABLE();
 80013fa:	4a63      	ldr	r2, [pc, #396]	; (8001588 <CAMERA_Init+0x190>)
  hmdma.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 80013fc:	f04f 5c80 	mov.w	ip, #268435456	; 0x10000000
{
 8001400:	b5f0      	push	{r4, r5, r6, r7, lr}
  Camera_Context_Ptr->vsync_it=0;
 8001402:	6083      	str	r3, [r0, #8]
{
 8001404:	b085      	sub	sp, #20
  Camera_Context_Ptr->new_frame_ready=0;
 8001406:	7503      	strb	r3, [r0, #20]
{
 8001408:	4606      	mov	r6, r0
  hmdma.Instance = MDMA_Channel0;
 800140a:	4c60      	ldr	r4, [pc, #384]	; (800158c <CAMERA_Init+0x194>)
  hmdma.Init.SourceInc                = MDMA_SRC_INC_WORD;
 800140c:	f240 2702 	movw	r7, #514	; 0x202
  hmdma.Init.Request                  = MDMA_REQUEST_SW;
 8001410:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
  hmdma.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8001414:	2520      	movs	r5, #32
  Camera_Context_Ptr->Tvsync_evt=0;
 8001416:	e9c0 3303 	strd	r3, r3, [r0, #12]
  __HAL_RCC_MDMA_CLK_ENABLE();
 800141a:	f8d2 10d4 	ldr.w	r1, [r2, #212]	; 0xd4
  hmdma.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 800141e:	f640 0008 	movw	r0, #2056	; 0x808
  __HAL_RCC_MDMA_CLK_ENABLE();
 8001422:	f041 0101 	orr.w	r1, r1, #1
 8001426:	f8c2 10d4 	str.w	r1, [r2, #212]	; 0xd4
  hmdma.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 800142a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  __HAL_RCC_MDMA_CLK_ENABLE();
 800142e:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
  hmdma.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001432:	6123      	str	r3, [r4, #16]
  __HAL_RCC_MDMA_CLK_ENABLE();
 8001434:	f002 0201 	and.w	r2, r2, #1
  hmdma.Init.SourceBurst              = MDMA_DEST_BURST_SINGLE;
 8001438:	62e3      	str	r3, [r4, #44]	; 0x2c
  hmdma.Init.Request                  = MDMA_REQUEST_SW;
 800143a:	f8c4 e004 	str.w	lr, [r4, #4]
  __HAL_RCC_MDMA_CLK_ENABLE();
 800143e:	9203      	str	r2, [sp, #12]
 8001440:	9a03      	ldr	r2, [sp, #12]
  hmdma.Init.DestBurst                = MDMA_DEST_BURST_16BEATS;
 8001442:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  hmdma.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8001446:	f8c4 c008 	str.w	ip, [r4, #8]
  hmdma.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 800144a:	61e5      	str	r5, [r4, #28]
  hmdma.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 800144c:	6261      	str	r1, [r4, #36]	; 0x24
  hmdma.Init.DestBurst                = MDMA_DEST_BURST_16BEATS;
 800144e:	6322      	str	r2, [r4, #48]	; 0x30
  hmdma.Init.DestBlockAddressOffset   = 0;
 8001450:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
  hmdma.Instance = MDMA_Channel0;
 8001454:	4b4e      	ldr	r3, [pc, #312]	; (8001590 <CAMERA_Init+0x198>)
 8001456:	6023      	str	r3, [r4, #0]
  hmdma.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8001458:	2380      	movs	r3, #128	; 0x80
  hmdma.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 800145a:	e9c4 7005 	strd	r7, r0, [r4, #20]
  if (HAL_MDMA_Init(&hmdma) != HAL_OK)
 800145e:	4620      	mov	r0, r4
  hmdma.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8001460:	60e3      	str	r3, [r4, #12]
  hmdma.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 8001462:	6223      	str	r3, [r4, #32]
  hmdma.Init.BufferTransferLength     = 128;
 8001464:	62a3      	str	r3, [r4, #40]	; 0x28
  if (HAL_MDMA_Init(&hmdma) != HAL_OK)
 8001466:	f00c fdeb 	bl	800e040 <HAL_MDMA_Init>
 800146a:	b108      	cbz	r0, 8001470 <CAMERA_Init+0x78>
    Error_Handler();
 800146c:	f003 f99c 	bl	80047a8 <Error_Handler>
  HAL_NVIC_SetPriority(MDMA_IRQn, 15U, 0);
 8001470:	2200      	movs	r2, #0
 8001472:	210f      	movs	r1, #15
 8001474:	207a      	movs	r0, #122	; 0x7a
 8001476:	f009 f8fd 	bl	800a674 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 800147a:	207a      	movs	r0, #122	; 0x7a
 800147c:	f009 f930 	bl	800a6e0 <HAL_NVIC_EnableIRQ>
  BSP_CAMERA_PwrDown(0);
 8001480:	2000      	movs	r0, #0
 8001482:	f007 ff3b 	bl	80092fc <BSP_CAMERA_PwrDown>
  HAL_Delay(200);
 8001486:	20c8      	movs	r0, #200	; 0xc8
 8001488:	f009 f8c0 	bl	800a60c <HAL_Delay>
  if (BSP_CAMERA_Init(0, CAMERA_RESOLUTION, CAMERA_PF_RGB565) != BSP_ERROR_NONE) 
 800148c:	2200      	movs	r2, #0
 800148e:	2103      	movs	r1, #3
 8001490:	4610      	mov	r0, r2
 8001492:	f007 fc9d 	bl	8008dd0 <BSP_CAMERA_Init>
 8001496:	b108      	cbz	r0, 800149c <CAMERA_Init+0xa4>
    Error_Handler();
 8001498:	f003 f986 	bl	80047a8 <Error_Handler>
  if (Camera_Ctx[0].CameraId == OV5640_ID)
 800149c:	4a3d      	ldr	r2, [pc, #244]	; (8001594 <CAMERA_Init+0x19c>)
 800149e:	f245 6340 	movw	r3, #22080	; 0x5640
 80014a2:	6812      	ldr	r2, [r2, #0]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d006      	beq.n	80014b6 <CAMERA_Init+0xbe>
  if (BSP_CAMERA_SetMirrorFlip(0, Camera_Context_Ptr->mirror_flip) != BSP_ERROR_NONE)
 80014a8:	69f1      	ldr	r1, [r6, #28]
 80014aa:	2000      	movs	r0, #0
 80014ac:	f007 ff02 	bl	80092b4 <BSP_CAMERA_SetMirrorFlip>
 80014b0:	4607      	mov	r7, r0
 80014b2:	b178      	cbz	r0, 80014d4 <CAMERA_Init+0xdc>
 80014b4:	e7fe      	b.n	80014b4 <CAMERA_Init+0xbc>
    OV5640_Object_t *pObj = Camera_CompObj;
 80014b6:	4938      	ldr	r1, [pc, #224]	; (8001598 <CAMERA_Init+0x1a0>)
    uint8_t tmp = 0xC0; /* Bits[7:0]: PLL multiplier */
 80014b8:	25c0      	movs	r5, #192	; 0xc0
 80014ba:	aa04      	add	r2, sp, #16
    if (ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL2,  &tmp, 1) != OV5640_OK)
 80014bc:	2301      	movs	r3, #1
    OV5640_Object_t *pObj = Camera_CompObj;
 80014be:	6808      	ldr	r0, [r1, #0]
    if (ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL2,  &tmp, 1) != OV5640_OK)
 80014c0:	f243 0136 	movw	r1, #12342	; 0x3036
    uint8_t tmp = 0xC0; /* Bits[7:0]: PLL multiplier */
 80014c4:	f802 5d05 	strb.w	r5, [r2, #-5]!
    if (ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL2,  &tmp, 1) != OV5640_OK)
 80014c8:	3018      	adds	r0, #24
 80014ca:	f006 f97b 	bl	80077c4 <ov5640_write_reg>
 80014ce:	2800      	cmp	r0, #0
 80014d0:	d0ea      	beq.n	80014a8 <CAMERA_Init+0xb0>
 80014d2:	e7fe      	b.n	80014d2 <CAMERA_Init+0xda>
  HAL_Delay(100);
 80014d4:	2064      	movs	r0, #100	; 0x64
   HAL_DCMI_ConfigCrop(&hcamera_dcmi,
 80014d6:	4d31      	ldr	r5, [pc, #196]	; (800159c <CAMERA_Init+0x1a4>)
  HAL_Delay(100);
 80014d8:	f009 f898 	bl	800a60c <HAL_Delay>
   HAL_DCMI_ConfigCrop(&hcamera_dcmi,
 80014dc:	f240 12df 	movw	r2, #479	; 0x1df
 80014e0:	f240 33bf 	movw	r3, #959	; 0x3bf
 80014e4:	21a0      	movs	r1, #160	; 0xa0
 80014e6:	9200      	str	r2, [sp, #0]
 80014e8:	4628      	mov	r0, r5
 80014ea:	463a      	mov	r2, r7
 80014ec:	f009 fae2 	bl	800aab4 <HAL_DCMI_ConfigCrop>
   HAL_DCMI_EnableCrop(&hcamera_dcmi);
 80014f0:	4628      	mov	r0, r5
 80014f2:	f009 fb17 	bl	800ab24 <HAL_DCMI_EnableCrop>
   HAL_Delay(200);
 80014f6:	20c8      	movs	r0, #200	; 0xc8
 80014f8:	f009 f888 	bl	800a60c <HAL_Delay>
  __HAL_LOCK(hdcmi);
 80014fc:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  if (HAL_DCMIEx_Start_DMA_MDMA(&hcamera_dcmi, CAMERA_MODE_CONTINUOUS,
 8001500:	f8d6 c000 	ldr.w	ip, [r6]
  __HAL_LOCK(hdcmi);
 8001504:	2b01      	cmp	r3, #1
 8001506:	d03e      	beq.n	8001586 <CAMERA_Init+0x18e>
  __HAL_DCMI_ENABLE(hdcmi);
 8001508:	682b      	ldr	r3, [r5, #0]
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800150a:	2102      	movs	r1, #2
  __HAL_LOCK(hdcmi);
 800150c:	2601      	movs	r6, #1
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMALineXferCplt;
 800150e:	6caa      	ldr	r2, [r5, #72]	; 0x48
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001510:	f885 1035 	strb.w	r1, [r5, #53]	; 0x35
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8001514:	4619      	mov	r1, r3
  __HAL_DCMI_ENABLE(hdcmi);
 8001516:	6818      	ldr	r0, [r3, #0]
  __HAL_LOCK(hdcmi);
 8001518:	f885 6034 	strb.w	r6, [r5, #52]	; 0x34
  __HAL_DCMI_ENABLE(hdcmi);
 800151c:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMALineXferCplt;
 8001520:	f8df e08c 	ldr.w	lr, [pc, #140]	; 80015b0 <CAMERA_Init+0x1b8>
  __HAL_DCMI_ENABLE(hdcmi);
 8001524:	6018      	str	r0, [r3, #0]
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8001526:	6818      	ldr	r0, [r3, #0]
 8001528:	f020 0002 	bic.w	r0, r0, #2
 800152c:	6018      	str	r0, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 800152e:	6818      	ldr	r0, [r3, #0]
  hdcmi->XferSize = line_size / 4U;
 8001530:	23f0      	movs	r3, #240	; 0xf0
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8001532:	f841 0b28 	str.w	r0, [r1], #40
  if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, pLineData, hdcmi->XferSize) != HAL_OK)
 8001536:	4610      	mov	r0, r2
  hdcmi->XferCount = 0;
 8001538:	63af      	str	r7, [r5, #56]	; 0x38
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 800153a:	6517      	str	r7, [r2, #80]	; 0x50
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 800153c:	4f18      	ldr	r7, [pc, #96]	; (80015a0 <CAMERA_Init+0x1a8>)
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMALineXferCplt;
 800153e:	f8c2 e03c 	str.w	lr, [r2, #60]	; 0x3c
  hdcmi->XferTransferNumber = num_lines;
 8001542:	f44f 7ef0 	mov.w	lr, #480	; 0x1e0
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8001546:	64d7      	str	r7, [r2, #76]	; 0x4c
  hmdma.XferCpltCallback = DCMI_MDMAFrameXferCplt;
 8001548:	4a16      	ldr	r2, [pc, #88]	; (80015a4 <CAMERA_Init+0x1ac>)
  hmdma.XferErrorCallback = DCMI_MDMAError;
 800154a:	4f17      	ldr	r7, [pc, #92]	; (80015a8 <CAMERA_Init+0x1b0>)
  hdcmi->XferSize = line_size / 4U;
 800154c:	63eb      	str	r3, [r5, #60]	; 0x3c
  hmdma.XferCpltCallback = DCMI_MDMAFrameXferCplt;
 800154e:	6462      	str	r2, [r4, #68]	; 0x44
  if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, pLineData, hdcmi->XferSize) != HAL_OK)
 8001550:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8001552:	4a16      	ldr	r2, [pc, #88]	; (80015ac <CAMERA_Init+0x1b4>)
  hdcmi->pBuffPtr = (uint32_t) pData;
 8001554:	f8c5 c044 	str.w	ip, [r5, #68]	; 0x44
  hdcmi->XferTransferNumber = num_lines;
 8001558:	f8c5 e040 	str.w	lr, [r5, #64]	; 0x40
  hmdma.XferErrorCallback = DCMI_MDMAError;
 800155c:	6567      	str	r7, [r4, #84]	; 0x54
  if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, pLineData, hdcmi->XferSize) != HAL_OK)
 800155e:	f009 ffe3 	bl	800b528 <HAL_DMA_Start_IT>
 8001562:	4602      	mov	r2, r0
 8001564:	b958      	cbnz	r0, 800157e <CAMERA_Init+0x186>
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8001566:	6829      	ldr	r1, [r5, #0]
  HAL_Delay(200);
 8001568:	20c8      	movs	r0, #200	; 0xc8
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 800156a:	680b      	ldr	r3, [r1, #0]
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	600b      	str	r3, [r1, #0]
  __HAL_UNLOCK(hdcmi);
 8001572:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
  HAL_Delay(200);
 8001576:	f009 f849 	bl	800a60c <HAL_Delay>
}
 800157a:	b005      	add	sp, #20
 800157c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 800157e:	2340      	movs	r3, #64	; 0x40
 8001580:	64eb      	str	r3, [r5, #76]	; 0x4c
    hdcmi->State = HAL_DCMI_STATE_READY;
 8001582:	f885 6035 	strb.w	r6, [r5, #53]	; 0x35
 8001586:	e7fe      	b.n	8001586 <CAMERA_Init+0x18e>
 8001588:	58024400 	.word	0x58024400
 800158c:	240043d0 	.word	0x240043d0
 8001590:	52000040 	.word	0x52000040
 8001594:	24005224 	.word	0x24005224
 8001598:	24003d18 	.word	0x24003d18
 800159c:	240051d4 	.word	0x240051d4
 80015a0:	08001365 	.word	0x08001365
 80015a4:	080013b9 	.word	0x080013b9
 80015a8:	08001355 	.word	0x08001355
 80015ac:	30000000 	.word	0x30000000
 80015b0:	08001381 	.word	0x08001381

080015b4 <CAMERA_Set_TestBar_Mode>:
  uint32_t camera_id = Camera_Ctx[0].CameraId;
 80015b4:	4a15      	ldr	r2, [pc, #84]	; (800160c <CAMERA_Set_TestBar_Mode+0x58>)
  if ((camera_id == OV9655_ID) || (camera_id == OV9655_ID_2))
 80015b6:	4b16      	ldr	r3, [pc, #88]	; (8001610 <CAMERA_Set_TestBar_Mode+0x5c>)
 80015b8:	6811      	ldr	r1, [r2, #0]
 80015ba:	4a16      	ldr	r2, [pc, #88]	; (8001614 <CAMERA_Set_TestBar_Mode+0x60>)
 80015bc:	440b      	add	r3, r1
 80015be:	6810      	ldr	r0, [r2, #0]
 80015c0:	2b01      	cmp	r3, #1
{
 80015c2:	b510      	push	{r4, lr}
 80015c4:	b082      	sub	sp, #8
  if ((camera_id == OV9655_ID) || (camera_id == OV9655_ID_2))
 80015c6:	d904      	bls.n	80015d2 <CAMERA_Set_TestBar_Mode+0x1e>
    if (OV5640_ColorbarModeConfig(pObj, COLORBAR_MODE_ENABLE) != OV5640_OK)
 80015c8:	2101      	movs	r1, #1
 80015ca:	f006 f8a9 	bl	8007720 <OV5640_ColorbarModeConfig>
 80015ce:	b1b0      	cbz	r0, 80015fe <CAMERA_Set_TestBar_Mode+0x4a>
 80015d0:	e7fe      	b.n	80015d0 <CAMERA_Set_TestBar_Mode+0x1c>
    ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL20, &tmp, 1);
 80015d2:	f100 0418 	add.w	r4, r0, #24
 80015d6:	2301      	movs	r3, #1
 80015d8:	218d      	movs	r1, #141	; 0x8d
 80015da:	f10d 0207 	add.w	r2, sp, #7
 80015de:	4620      	mov	r0, r4
 80015e0:	f006 fd3e 	bl	8008060 <ov9655_read_reg>
    tmp |= 0x10; /* Set bit[4]: Color bar test mode */
 80015e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL20, &tmp, 1);
 80015e8:	4620      	mov	r0, r4
 80015ea:	f10d 0207 	add.w	r2, sp, #7
    tmp |= 0x10; /* Set bit[4]: Color bar test mode */
 80015ee:	f043 0410 	orr.w	r4, r3, #16
    ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL20, &tmp, 1);
 80015f2:	218d      	movs	r1, #141	; 0x8d
 80015f4:	2301      	movs	r3, #1
    tmp |= 0x10; /* Set bit[4]: Color bar test mode */
 80015f6:	f88d 4007 	strb.w	r4, [sp, #7]
    ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL20, &tmp, 1);
 80015fa:	f006 fd39 	bl	8008070 <ov9655_write_reg>
  HAL_Delay(500);
 80015fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001602:	f009 f803 	bl	800a60c <HAL_Delay>
}
 8001606:	b002      	add	sp, #8
 8001608:	bd10      	pop	{r4, pc}
 800160a:	bf00      	nop
 800160c:	24005224 	.word	0x24005224
 8001610:	ffff69aa 	.word	0xffff69aa
 8001614:	24003d18 	.word	0x24003d18

08001618 <BSP_CAMERA_FrameEventCallback>:
{
 8001618:	b570      	push	{r4, r5, r6, lr}
  AppContext_TypeDef *App_Cxt_Ptr=CameraContext.AppCtxPtr;
 800161a:	4c0c      	ldr	r4, [pc, #48]	; (800164c <BSP_CAMERA_FrameEventCallback+0x34>)
 800161c:	69a3      	ldr	r3, [r4, #24]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800161e:	b672      	cpsid	i
  CameraContext.new_frame_ready = 1;
 8001620:	2501      	movs	r5, #1
  App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestop = HAL_GetTick();
 8001622:	6e9e      	ldr	r6, [r3, #104]	; 0x68
  CameraContext.new_frame_ready = 1;
 8001624:	7525      	strb	r5, [r4, #20]
  App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestop = HAL_GetTick();
 8001626:	f008 ffeb 	bl	800a600 <HAL_GetTick>
 800162a:	6270      	str	r0, [r6, #36]	; 0x24
  CameraContext.new_frame_ready = 1;
 800162c:	7525      	strb	r5, [r4, #20]
  CameraContext.Tframe_evt=HAL_GetTick();
 800162e:	f008 ffe7 	bl	800a600 <HAL_GetTick>
  if((CameraContext.Tframe_evt-CameraContext.Tvsync_evt)<3)
 8001632:	6923      	ldr	r3, [r4, #16]
  CameraContext.Tframe_evt=HAL_GetTick();
 8001634:	60e0      	str	r0, [r4, #12]
  if((CameraContext.Tframe_evt-CameraContext.Tvsync_evt)<3)
 8001636:	1ac0      	subs	r0, r0, r3
 8001638:	2802      	cmp	r0, #2
 800163a:	d801      	bhi.n	8001640 <BSP_CAMERA_FrameEventCallback+0x28>
    CameraContext.vsync_it =2;
 800163c:	2302      	movs	r3, #2
 800163e:	60a3      	str	r3, [r4, #8]
  BSP_CAMERA_Suspend(0);
 8001640:	2000      	movs	r0, #0
 8001642:	f007 fdcf 	bl	80091e4 <BSP_CAMERA_Suspend>
  __ASM volatile ("cpsie i" : : : "memory");
 8001646:	b662      	cpsie	i
}
 8001648:	bd70      	pop	{r4, r5, r6, pc}
 800164a:	bf00      	nop
 800164c:	2400443c 	.word	0x2400443c

08001650 <BSP_CAMERA_VsyncEventCallback>:
{ 
 8001650:	b570      	push	{r4, r5, r6, lr}
  AppContext_TypeDef *App_Cxt_Ptr=CameraContext.AppCtxPtr;
 8001652:	4c17      	ldr	r4, [pc, #92]	; (80016b0 <BSP_CAMERA_VsyncEventCallback+0x60>)
 8001654:	69a5      	ldr	r5, [r4, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 8001656:	b672      	cpsid	i
  CameraContext.Tvsync_evt=HAL_GetTick();
 8001658:	f008 ffd2 	bl	800a600 <HAL_GetTick>
  if(CameraContext.vsync_it==0)
 800165c:	68a3      	ldr	r3, [r4, #8]
  CameraContext.Tvsync_evt=HAL_GetTick();
 800165e:	6120      	str	r0, [r4, #16]
  if(CameraContext.vsync_it==0)
 8001660:	b193      	cbz	r3, 8001688 <BSP_CAMERA_VsyncEventCallback+0x38>
 8001662:	68e2      	ldr	r2, [r4, #12]
  else if(CameraContext.vsync_it==1 && ((CameraContext.new_frame_ready == 0) || ((CameraContext.new_frame_ready == 1) && ((CameraContext.Tvsync_evt - CameraContext.Tframe_evt) < 3))))//3 ms: in reality the time diff is in the magnitude of a few hundreds of ns, but some margin is required because there could be other interrupts in between the vsync_evt IT and the frame_evt IT.
 8001664:	2b01      	cmp	r3, #1
 8001666:	eba0 0002 	sub.w	r0, r0, r2
 800166a:	d005      	beq.n	8001678 <BSP_CAMERA_VsyncEventCallback+0x28>
  if(CameraContext.Tvsync_evt - CameraContext.Tframe_evt <3)
 800166c:	2802      	cmp	r0, #2
 800166e:	d801      	bhi.n	8001674 <BSP_CAMERA_VsyncEventCallback+0x24>
    CameraContext.vsync_it =2;
 8001670:	2302      	movs	r3, #2
 8001672:	60a3      	str	r3, [r4, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8001674:	b662      	cpsie	i
}
 8001676:	bd70      	pop	{r4, r5, r6, pc}
  else if(CameraContext.vsync_it==1 && ((CameraContext.new_frame_ready == 0) || ((CameraContext.new_frame_ready == 1) && ((CameraContext.Tvsync_evt - CameraContext.Tframe_evt) < 3))))//3 ms: in reality the time diff is in the magnitude of a few hundreds of ns, but some margin is required because there could be other interrupts in between the vsync_evt IT and the frame_evt IT.
 8001678:	7d23      	ldrb	r3, [r4, #20]
 800167a:	b993      	cbnz	r3, 80016a2 <BSP_CAMERA_VsyncEventCallback+0x52>
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart=App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart2;
 800167c:	6eab      	ldr	r3, [r5, #104]	; 0x68
    CameraContext.vsync_it ++;
 800167e:	2102      	movs	r1, #2
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart=App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart2;
 8001680:	69da      	ldr	r2, [r3, #28]
    CameraContext.vsync_it ++;
 8001682:	60a1      	str	r1, [r4, #8]
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart=App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart2;
 8001684:	621a      	str	r2, [r3, #32]
 8001686:	e7f1      	b.n	800166c <BSP_CAMERA_VsyncEventCallback+0x1c>
    CameraContext.vsync_it ++;
 8001688:	2301      	movs	r3, #1
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart2 = HAL_GetTick();
 800168a:	6eae      	ldr	r6, [r5, #104]	; 0x68
    CameraContext.vsync_it ++;
 800168c:	60a3      	str	r3, [r4, #8]
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart2 = HAL_GetTick();
 800168e:	f008 ffb7 	bl	800a600 <HAL_GetTick>
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart=App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1;
 8001692:	6eaa      	ldr	r2, [r5, #104]	; 0x68
 8001694:	6923      	ldr	r3, [r4, #16]
 8001696:	6991      	ldr	r1, [r2, #24]
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart2 = HAL_GetTick();
 8001698:	61f0      	str	r0, [r6, #28]
 800169a:	68e0      	ldr	r0, [r4, #12]
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart=App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1;
 800169c:	6211      	str	r1, [r2, #32]
 800169e:	1a18      	subs	r0, r3, r0
 80016a0:	e7e4      	b.n	800166c <BSP_CAMERA_VsyncEventCallback+0x1c>
  else if(CameraContext.vsync_it==1 && ((CameraContext.new_frame_ready == 0) || ((CameraContext.new_frame_ready == 1) && ((CameraContext.Tvsync_evt - CameraContext.Tframe_evt) < 3))))//3 ms: in reality the time diff is in the magnitude of a few hundreds of ns, but some margin is required because there could be other interrupts in between the vsync_evt IT and the frame_evt IT.
 80016a2:	7d23      	ldrb	r3, [r4, #20]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d1e1      	bne.n	800166c <BSP_CAMERA_VsyncEventCallback+0x1c>
 80016a8:	2802      	cmp	r0, #2
 80016aa:	d8e3      	bhi.n	8001674 <BSP_CAMERA_VsyncEventCallback+0x24>
 80016ac:	e7e6      	b.n	800167c <BSP_CAMERA_VsyncEventCallback+0x2c>
 80016ae:	bf00      	nop
 80016b0:	2400443c 	.word	0x2400443c

080016b4 <BSP_CAMERA_ErrorCallback>:
  Error_Handler();
 80016b4:	f003 b878 	b.w	80047a8 <Error_Handler>

080016b8 <DISPLAY_Init>:
 * @brief  Dispaly Initialization
 * @param Display_Context_Ptr pointer to display context
 * @retval None
 */
void DISPLAY_Init(DisplayContext_TypeDef* Display_Context_Ptr)
{
 80016b8:	b5f0      	push	{r4, r5, r6, r7, lr}

  /*
   * Disable FMC Bank1 to prevent CPU speculative read accesses
   * AN4861: 4.6.1 Disable FMC bank1 if not used.
   */
  __FMC_NORSRAM_DISABLE(FMC_Bank1_R, FMC_NORSRAM_BANK1);
 80016ba:	4a21      	ldr	r2, [pc, #132]	; (8001740 <DISPLAY_Init+0x88>)
  Display_Context_Ptr->lcd_sync=0;
 80016bc:	2400      	movs	r4, #0
{
 80016be:	4605      	mov	r5, r0
  Display_Context_Ptr->lcd_frame_read_buff=lcd_display_read_buffer;
 80016c0:	4e20      	ldr	r6, [pc, #128]	; (8001744 <DISPLAY_Init+0x8c>)
  Display_Context_Ptr->lcd_frame_write_buff=lcd_display_write_buffer;
 80016c2:	4b21      	ldr	r3, [pc, #132]	; (8001748 <DISPLAY_Init+0x90>)
{
 80016c4:	b087      	sub	sp, #28
  Display_Context_Ptr->lcd_sync=0;
 80016c6:	60ac      	str	r4, [r5, #8]

  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);/*by default, 0xD0000000 is used as start address for lcd frame buffer*/
 80016c8:	2101      	movs	r1, #1
  Display_Context_Ptr->lcd_frame_read_buff=lcd_display_read_buffer;
 80016ca:	6837      	ldr	r7, [r6, #0]
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);/*by default, 0xD0000000 is used as start address for lcd frame buffer*/
 80016cc:	4620      	mov	r0, r4
  Display_Context_Ptr->lcd_frame_write_buff=lcd_display_write_buffer;
 80016ce:	681e      	ldr	r6, [r3, #0]
  __FMC_NORSRAM_DISABLE(FMC_Bank1_R, FMC_NORSRAM_BANK1);
 80016d0:	6813      	ldr	r3, [r2, #0]
  Display_Context_Ptr->lcd_frame_write_buff=lcd_display_write_buffer;
 80016d2:	606e      	str	r6, [r5, #4]

  config.X0          = 0;
  config.X1          = LCD_DEFAULT_WIDTH;
 80016d4:	f44f 7648 	mov.w	r6, #800	; 0x320
  __FMC_NORSRAM_DISABLE(FMC_Bank1_R, FMC_NORSRAM_BANK1);
 80016d8:	f023 0301 	bic.w	r3, r3, #1
  Display_Context_Ptr->lcd_frame_read_buff=lcd_display_read_buffer;
 80016dc:	602f      	str	r7, [r5, #0]
  __FMC_NORSRAM_DISABLE(FMC_Bank1_R, FMC_NORSRAM_BANK1);
 80016de:	6013      	str	r3, [r2, #0]
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);/*by default, 0xD0000000 is used as start address for lcd frame buffer*/
 80016e0:	f008 fba0 	bl	8009e24 <BSP_LCD_Init>
  config.Y0          = 0;
  config.Y1          = LCD_DEFAULT_HEIGHT;
  config.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
  config.Address     = (uint32_t)Display_Context_Ptr->lcd_frame_read_buff;/*lcd_frame_read_buff buffer used as lcd frame buffer*/
 80016e4:	682a      	ldr	r2, [r5, #0]
  config.Y1          = LCD_DEFAULT_HEIGHT;
 80016e6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  BSP_LCD_ConfigLayer(0, 0, &config);//overwrite config 
 80016ea:	4621      	mov	r1, r4
 80016ec:	4620      	mov	r0, r4
  config.X0          = 0;
 80016ee:	9400      	str	r4, [sp, #0]
  config.Y1          = LCD_DEFAULT_HEIGHT;
 80016f0:	9303      	str	r3, [sp, #12]
  config.Y0          = 0;
 80016f2:	9402      	str	r4, [sp, #8]
  config.X1          = LCD_DEFAULT_WIDTH;
 80016f4:	9601      	str	r6, [sp, #4]
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
  UTIL_LCD_SetFont(&Font24);
  
  /*Use lcd_frame_write_buff buffer for display composition*/
  hlcd_ltdc.LayerCfg[Lcd_Ctx[0].ActiveLayer].FBStartAdress=(uint32_t)Display_Context_Ptr->lcd_frame_write_buff;
 80016f6:	2634      	movs	r6, #52	; 0x34
  config.Address     = (uint32_t)Display_Context_Ptr->lcd_frame_read_buff;/*lcd_frame_read_buff buffer used as lcd frame buffer*/
 80016f8:	e9cd 4204 	strd	r4, r2, [sp, #16]
  BSP_LCD_ConfigLayer(0, 0, &config);//overwrite config 
 80016fc:	466a      	mov	r2, sp
 80016fe:	f008 fb9d 	bl	8009e3c <BSP_LCD_ConfigLayer>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
 8001702:	4812      	ldr	r0, [pc, #72]	; (800174c <DISPLAY_Init+0x94>)
 8001704:	f018 f8c4 	bl	8019890 <UTIL_LCD_SetFuncDriver>
  UTIL_LCD_SetLayer(0);
 8001708:	4620      	mov	r0, r4
 800170a:	f018 f8f3 	bl	80198f4 <UTIL_LCD_SetLayer>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
 800170e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001712:	f018 f907 	bl	8019924 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8001716:	f04f 30ff 	mov.w	r0, #4294967295
 800171a:	f018 f8fb 	bl	8019914 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetFont(&Font24);
 800171e:	480c      	ldr	r0, [pc, #48]	; (8001750 <DISPLAY_Init+0x98>)
 8001720:	f018 f908 	bl	8019934 <UTIL_LCD_SetFont>
  hlcd_ltdc.LayerCfg[Lcd_Ctx[0].ActiveLayer].FBStartAdress=(uint32_t)Display_Context_Ptr->lcd_frame_write_buff;
 8001724:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <DISPLAY_Init+0x9c>)
 8001726:	4a0c      	ldr	r2, [pc, #48]	; (8001758 <DISPLAY_Init+0xa0>)
  
  /*LCD sync: set LTDCreload type to vertical blanking*/
  HAL_LTDC_Reload(&hlcd_ltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 8001728:	2102      	movs	r1, #2
  hlcd_ltdc.LayerCfg[Lcd_Ctx[0].ActiveLayer].FBStartAdress=(uint32_t)Display_Context_Ptr->lcd_frame_write_buff;
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	686c      	ldr	r4, [r5, #4]
  HAL_LTDC_Reload(&hlcd_ltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 800172e:	4610      	mov	r0, r2
  hlcd_ltdc.LayerCfg[Lcd_Ctx[0].ActiveLayer].FBStartAdress=(uint32_t)Display_Context_Ptr->lcd_frame_write_buff;
 8001730:	fb06 2303 	mla	r3, r6, r3, r2
 8001734:	65dc      	str	r4, [r3, #92]	; 0x5c
  HAL_LTDC_Reload(&hlcd_ltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 8001736:	f00c fc69 	bl	800e00c <HAL_LTDC_Reload>
}
 800173a:	b007      	add	sp, #28
 800173c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800173e:	bf00      	nop
 8001740:	52004000 	.word	0x52004000
 8001744:	2400004c 	.word	0x2400004c
 8001748:	24000050 	.word	0x24000050
 800174c:	080213a0 	.word	0x080213a0
 8001750:	240025f8 	.word	0x240025f8
 8001754:	24005300 	.word	0x24005300
 8001758:	24005258 	.word	0x24005258

0800175c <DISPLAY_WelcomeScreen>:
 *
 * @param Display_Context_Ptr pointer to display context
 * @return int boolean value, 1 if WakeUp button has been pressed, 0 otherwise
 */
int DISPLAY_WelcomeScreen(DisplayContext_TypeDef* Display_Context_Ptr)
{
 800175c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800175e:	4604      	mov	r4, r0
 8001760:	b089      	sub	sp, #36	; 0x24
  int magic_menu = 0;
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8001762:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001766:	f018 f8f5 	bl	8019954 <UTIL_LCD_Clear>

  /* Draw logos.*/
  BSP_LCD_DrawBitmap(0, 50, 77, (uint8_t *)stlogo);
 800176a:	4b4b      	ldr	r3, [pc, #300]	; (8001898 <DISPLAY_WelcomeScreen+0x13c>)
 800176c:	224d      	movs	r2, #77	; 0x4d
 800176e:	2132      	movs	r1, #50	; 0x32
 8001770:	2000      	movs	r0, #0
 8001772:	f007 fee1 	bl	8009538 <BSP_LCD_DrawBitmap>
  BSP_LCD_DrawBitmap(0, 620, 85, (uint8_t *)stm32h7logo);
 8001776:	4b49      	ldr	r3, [pc, #292]	; (800189c <DISPLAY_WelcomeScreen+0x140>)
 8001778:	2255      	movs	r2, #85	; 0x55
 800177a:	f44f 711b 	mov.w	r1, #620	; 0x26c
 800177e:	2000      	movs	r0, #0
 8001780:	f007 feda 	bl	8009538 <BSP_LCD_DrawBitmap>

  /*Display welcome message*/
  UTIL_LCD_DisplayStringAt(0, LINE(6), (uint8_t *)"VISION1 Function Pack", CENTER_MODE);
 8001784:	f018 f8de 	bl	8019944 <UTIL_LCD_GetFont>
 8001788:	88c1      	ldrh	r1, [r0, #6]
 800178a:	2301      	movs	r3, #1
 800178c:	4a44      	ldr	r2, [pc, #272]	; (80018a0 <DISPLAY_WelcomeScreen+0x144>)
 800178e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001792:	2000      	movs	r0, #0
 8001794:	4099      	lsls	r1, r3
 8001796:	f018 f9a3 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(7), (uint8_t *)"V3.0.0", CENTER_MODE);
 800179a:	f018 f8d3 	bl	8019944 <UTIL_LCD_GetFont>
 800179e:	88c1      	ldrh	r1, [r0, #6]
 80017a0:	2301      	movs	r3, #1
 80017a2:	4a40      	ldr	r2, [pc, #256]	; (80018a4 <DISPLAY_WelcomeScreen+0x148>)
 80017a4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80017a8:	2000      	movs	r0, #0
 80017aa:	f018 f999 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(10), (uint8_t *)WELCOME_MSG_0, CENTER_MODE);
 80017ae:	f018 f8c9 	bl	8019944 <UTIL_LCD_GetFont>
 80017b2:	88c1      	ldrh	r1, [r0, #6]
 80017b4:	2301      	movs	r3, #1
 80017b6:	4a3c      	ldr	r2, [pc, #240]	; (80018a8 <DISPLAY_WelcomeScreen+0x14c>)
 80017b8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80017bc:	2000      	movs	r0, #0
 80017be:	4099      	lsls	r1, r3
 80017c0:	f018 f98e 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(11), (uint8_t *)WELCOME_MSG_2, CENTER_MODE);
 80017c4:	f018 f8be 	bl	8019944 <UTIL_LCD_GetFont>
 80017c8:	88c1      	ldrh	r1, [r0, #6]
 80017ca:	2301      	movs	r3, #1
 80017cc:	4a37      	ldr	r2, [pc, #220]	; (80018ac <DISPLAY_WelcomeScreen+0x150>)
 80017ce:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 80017d2:	2000      	movs	r0, #0
 80017d4:	eb01 0145 	add.w	r1, r1, r5, lsl #1
 80017d8:	f018 f982 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(12), (uint8_t *)WELCOME_MSG_1, CENTER_MODE);
 80017dc:	f018 f8b2 	bl	8019944 <UTIL_LCD_GetFont>
 80017e0:	88c1      	ldrh	r1, [r0, #6]
 80017e2:	2301      	movs	r3, #1
 80017e4:	4a32      	ldr	r2, [pc, #200]	; (80018b0 <DISPLAY_WelcomeScreen+0x154>)
 80017e6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80017ea:	2000      	movs	r0, #0
 80017ec:	0089      	lsls	r1, r1, #2
 80017ee:	f018 f977 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(13), (uint8_t *)WELCOME_MSG_4, CENTER_MODE);
 80017f2:	f018 f8a7 	bl	8019944 <UTIL_LCD_GetFont>
 80017f6:	88c1      	ldrh	r1, [r0, #6]
 80017f8:	2301      	movs	r3, #1
 80017fa:	4a2e      	ldr	r2, [pc, #184]	; (80018b4 <DISPLAY_WelcomeScreen+0x158>)
 80017fc:	eb01 0541 	add.w	r5, r1, r1, lsl #1
 8001800:	2000      	movs	r0, #0
 8001802:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8001806:	f018 f96b 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)WELCOME_MSG_5, CENTER_MODE);
 800180a:	f018 f89b 	bl	8019944 <UTIL_LCD_GetFont>
 800180e:	88c1      	ldrh	r1, [r0, #6]
 8001810:	2301      	movs	r3, #1
 8001812:	4a29      	ldr	r2, [pc, #164]	; (80018b8 <DISPLAY_WelcomeScreen+0x15c>)
 8001814:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8001818:	2000      	movs	r0, #0
 800181a:	4099      	lsls	r1, r3
 800181c:	f018 f960 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(15), (uint8_t *)WELCOME_MSG_3, CENTER_MODE);
 8001820:	f018 f890 	bl	8019944 <UTIL_LCD_GetFont>
 8001824:	88c1      	ldrh	r1, [r0, #6]
 8001826:	2301      	movs	r3, #1
 8001828:	4a24      	ldr	r2, [pc, #144]	; (80018bc <DISPLAY_WelcomeScreen+0x160>)
 800182a:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800182e:	2000      	movs	r0, #0
 8001830:	f018 f956 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
 */
void DISPLAY_Refresh(DisplayContext_TypeDef* Display_Context_Ptr)
{
  /*LCD sync: wait for next VSYNC event before refreshing, i.e. before updating the content of the buffer that will be read by the LTDC for display. 
  The refresh occurs during the blanking period => this sync mecanism should enable to avoid tearing effect*/
  Display_Context_Ptr->lcd_sync =0;
 8001834:	2300      	movs	r3, #0
 8001836:	60a3      	str	r3, [r4, #8]
  while(Display_Context_Ptr->lcd_sync==0);
 8001838:	68a3      	ldr	r3, [r4, #8]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d0fc      	beq.n	8001838 <DISPLAY_WelcomeScreen+0xdc>
  
  /*Coherency purpose: clean the lcd_frame_write_buff area in L1 D-Cache before DMA2D reading*/
  UTILS_DCache_Coherency_Maintenance((void *)Display_Context_Ptr->lcd_frame_write_buff, LCD_FRAME_BUFFER_SIZE, CLEAN);
 800183e:	6860      	ldr	r0, [r4, #4]
 8001840:	2202      	movs	r2, #2
 8001842:	491f      	ldr	r1, [pc, #124]	; (80018c0 <DISPLAY_WelcomeScreen+0x164>)
  
  UTILS_Dma2d_Memcpy((uint32_t *)(Display_Context_Ptr->lcd_frame_write_buff), (uint32_t *)(Display_Context_Ptr->lcd_frame_read_buff), 0, 0, LCD_RES_WIDTH,
 8001844:	2600      	movs	r6, #0
  UTILS_DCache_Coherency_Maintenance((void *)Display_Context_Ptr->lcd_frame_write_buff, LCD_FRAME_BUFFER_SIZE, CLEAN);
 8001846:	f002 ff43 	bl	80046d0 <UTILS_DCache_Coherency_Maintenance>
  UTILS_Dma2d_Memcpy((uint32_t *)(Display_Context_Ptr->lcd_frame_write_buff), (uint32_t *)(Display_Context_Ptr->lcd_frame_read_buff), 0, 0, LCD_RES_WIDTH,
 800184a:	f44f 7748 	mov.w	r7, #800	; 0x320
 800184e:	f44f 7cf0 	mov.w	ip, #480	; 0x1e0
 8001852:	4633      	mov	r3, r6
 8001854:	4632      	mov	r2, r6
  int magic_menu = 0;
 8001856:	4635      	mov	r5, r6
  UTILS_Dma2d_Memcpy((uint32_t *)(Display_Context_Ptr->lcd_frame_write_buff), (uint32_t *)(Display_Context_Ptr->lcd_frame_read_buff), 0, 0, LCD_RES_WIDTH,
 8001858:	e9d4 1000 	ldrd	r1, r0, [r4]
 800185c:	9606      	str	r6, [sp, #24]
 800185e:	2405      	movs	r4, #5
 8001860:	9603      	str	r6, [sp, #12]
 8001862:	9702      	str	r7, [sp, #8]
 8001864:	e9cd 6604 	strd	r6, r6, [sp, #16]
 8001868:	e9cd 7c00 	strd	r7, ip, [sp]
 800186c:	f002 fe76 	bl	800455c <UTILS_Dma2d_Memcpy>
    HAL_Delay(500);
 8001870:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001874:	f008 feca 	bl	800a60c <HAL_Delay>
    if (BSP_PB_GetState(BUTTON_WAKEUP) != RESET)
 8001878:	2000      	movs	r0, #0
 800187a:	f006 fca9 	bl	80081d0 <BSP_PB_GetState>
      magic_menu = 1;
 800187e:	2800      	cmp	r0, #0
 8001880:	bf18      	it	ne
 8001882:	2501      	movne	r5, #1
  for (int i = 0; i < 5; i++)
 8001884:	3c01      	subs	r4, #1
 8001886:	d1f3      	bne.n	8001870 <DISPLAY_WelcomeScreen+0x114>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8001888:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800188c:	f018 f862 	bl	8019954 <UTIL_LCD_Clear>
}
 8001890:	4628      	mov	r0, r5
 8001892:	b009      	add	sp, #36	; 0x24
 8001894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001896:	bf00      	nop
 8001898:	081d80c0 	.word	0x081d80c0
 800189c:	081e0308 	.word	0x081e0308
 80018a0:	08100020 	.word	0x08100020
 80018a4:	08100038 	.word	0x08100038
 80018a8:	08100040 	.word	0x08100040
 80018ac:	0810005c 	.word	0x0810005c
 80018b0:	08100070 	.word	0x08100070
 80018b4:	0810007c 	.word	0x0810007c
 80018b8:	0810008c 	.word	0x0810008c
 80018bc:	081000ac 	.word	0x081000ac
 80018c0:	00177000 	.word	0x00177000

080018c4 <DISPLAY_FoodLogo>:
{
 80018c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 * @param red_blue_swap boolean flag for red-blue channel swap, 0 is no swap, 1 is swap
 */
void DISPLAY_Copy2LCDWriteBuffer(DisplayContext_TypeDef* Display_Context_Ptr, uint32_t *pSrc, uint16_t x, uint16_t y, uint16_t xsize, uint16_t ysize,
                              uint32_t input_color_format, int red_blue_swap)
{
  UTILS_Dma2d_Memcpy((uint32_t *)pSrc, (uint32_t *)Display_Context_Ptr->lcd_frame_write_buff, x, y, xsize, ysize, LCD_RES_WIDTH,
 80018c6:	6847      	ldr	r7, [r0, #4]
{
 80018c8:	b089      	sub	sp, #36	; 0x24
  UTILS_Dma2d_Memcpy((uint32_t *)pSrc, (uint32_t *)Display_Context_Ptr->lcd_frame_write_buff, x, y, xsize, ysize, LCD_RES_WIDTH,
 80018ca:	2401      	movs	r4, #1
  DISPLAY_Copy2LCDWriteBuffer(Display_Context_Ptr, (uint32_t *)(Logos_128x128_raw[index]), x,
 80018cc:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 80018d0:	480a      	ldr	r0, [pc, #40]	; (80018fc <DISPLAY_FoodLogo+0x38>)
  UTILS_Dma2d_Memcpy((uint32_t *)pSrc, (uint32_t *)Display_Context_Ptr->lcd_frame_write_buff, x, y, xsize, ysize, LCD_RES_WIDTH,
 80018d2:	2600      	movs	r6, #0
 80018d4:	9406      	str	r4, [sp, #24]
 80018d6:	b293      	uxth	r3, r2
 80018d8:	eb00 3085 	add.w	r0, r0, r5, lsl #14
 80018dc:	9405      	str	r4, [sp, #20]
 80018de:	9403      	str	r4, [sp, #12]
 80018e0:	f44f 7548 	mov.w	r5, #800	; 0x320
 80018e4:	2480      	movs	r4, #128	; 0x80
 80018e6:	b28a      	uxth	r2, r1
 80018e8:	4639      	mov	r1, r7
 80018ea:	9604      	str	r6, [sp, #16]
 80018ec:	9400      	str	r4, [sp, #0]
 80018ee:	e9cd 4501 	strd	r4, r5, [sp, #4]
 80018f2:	f002 fe33 	bl	800455c <UTILS_Dma2d_Memcpy>
}
 80018f6:	b009      	add	sp, #36	; 0x24
 80018f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018fa:	bf00      	nop
 80018fc:	081000c0 	.word	0x081000c0

08001900 <DISPLAY_Refresh>:
{
 8001900:	b530      	push	{r4, r5, lr}
  Display_Context_Ptr->lcd_sync =0;
 8001902:	2300      	movs	r3, #0
{
 8001904:	b089      	sub	sp, #36	; 0x24
 8001906:	4604      	mov	r4, r0
  Display_Context_Ptr->lcd_sync =0;
 8001908:	6083      	str	r3, [r0, #8]
  while(Display_Context_Ptr->lcd_sync==0);
 800190a:	68a3      	ldr	r3, [r4, #8]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d0fc      	beq.n	800190a <DISPLAY_Refresh+0xa>
  UTILS_DCache_Coherency_Maintenance((void *)Display_Context_Ptr->lcd_frame_write_buff, LCD_FRAME_BUFFER_SIZE, CLEAN);
 8001910:	6860      	ldr	r0, [r4, #4]
 8001912:	2202      	movs	r2, #2
 8001914:	490a      	ldr	r1, [pc, #40]	; (8001940 <DISPLAY_Refresh+0x40>)
  UTILS_Dma2d_Memcpy((uint32_t *)(Display_Context_Ptr->lcd_frame_write_buff), (uint32_t *)(Display_Context_Ptr->lcd_frame_read_buff), 0, 0, LCD_RES_WIDTH,
 8001916:	f44f 75f0 	mov.w	r5, #480	; 0x1e0
  UTILS_DCache_Coherency_Maintenance((void *)Display_Context_Ptr->lcd_frame_write_buff, LCD_FRAME_BUFFER_SIZE, CLEAN);
 800191a:	f002 fed9 	bl	80046d0 <UTILS_DCache_Coherency_Maintenance>
  UTILS_Dma2d_Memcpy((uint32_t *)(Display_Context_Ptr->lcd_frame_write_buff), (uint32_t *)(Display_Context_Ptr->lcd_frame_read_buff), 0, 0, LCD_RES_WIDTH,
 800191e:	2300      	movs	r3, #0
 8001920:	e9d4 1000 	ldrd	r1, r0, [r4]
 8001924:	f44f 7448 	mov.w	r4, #800	; 0x320
 8001928:	461a      	mov	r2, r3
 800192a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800192e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001932:	9402      	str	r4, [sp, #8]
 8001934:	e9cd 4500 	strd	r4, r5, [sp]
 8001938:	f002 fe10 	bl	800455c <UTILS_Dma2d_Memcpy>
}
 800193c:	b009      	add	sp, #36	; 0x24
 800193e:	bd30      	pop	{r4, r5, pc}
 8001940:	00177000 	.word	0x00177000

08001944 <DISPLAY_Copy2LCDWriteBuffer>:
{
 8001944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001946:	b089      	sub	sp, #36	; 0x24
 8001948:	460e      	mov	r6, r1
  UTILS_Dma2d_Memcpy((uint32_t *)pSrc, (uint32_t *)Display_Context_Ptr->lcd_frame_write_buff, x, y, xsize, ysize, LCD_RES_WIDTH,
 800194a:	6841      	ldr	r1, [r0, #4]
 800194c:	2701      	movs	r7, #1
{
 800194e:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
  UTILS_Dma2d_Memcpy((uint32_t *)pSrc, (uint32_t *)Display_Context_Ptr->lcd_frame_write_buff, x, y, xsize, ysize, LCD_RES_WIDTH,
 8001952:	4630      	mov	r0, r6
{
 8001954:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
  UTILS_Dma2d_Memcpy((uint32_t *)pSrc, (uint32_t *)Display_Context_Ptr->lcd_frame_write_buff, x, y, xsize, ysize, LCD_RES_WIDTH,
 8001958:	2600      	movs	r6, #0
 800195a:	9705      	str	r7, [sp, #20]
 800195c:	9604      	str	r6, [sp, #16]
 800195e:	e9cd 5400 	strd	r5, r4, [sp]
{
 8001962:	9d10      	ldr	r5, [sp, #64]	; 0x40
  UTILS_Dma2d_Memcpy((uint32_t *)pSrc, (uint32_t *)Display_Context_Ptr->lcd_frame_write_buff, x, y, xsize, ysize, LCD_RES_WIDTH,
 8001964:	f44f 7448 	mov.w	r4, #800	; 0x320
 8001968:	9503      	str	r5, [sp, #12]
{
 800196a:	9d11      	ldr	r5, [sp, #68]	; 0x44
  UTILS_Dma2d_Memcpy((uint32_t *)pSrc, (uint32_t *)Display_Context_Ptr->lcd_frame_write_buff, x, y, xsize, ysize, LCD_RES_WIDTH,
 800196c:	9402      	str	r4, [sp, #8]
 800196e:	9506      	str	r5, [sp, #24]
 8001970:	f002 fdf4 	bl	800455c <UTILS_Dma2d_Memcpy>
                input_color_format, DMA2D_OUTPUT_ARGB8888, 1, red_blue_swap);
}
 8001974:	b009      	add	sp, #36	; 0x24
 8001976:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001978 <HAL_LTDC_ReloadEventCallback>:

}

void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
  Display_Context.lcd_sync=1;
 8001978:	4b02      	ldr	r3, [pc, #8]	; (8001984 <HAL_LTDC_ReloadEventCallback+0xc>)
 800197a:	2201      	movs	r2, #1
  
  /*Set LTDCreload type to vertical blanking*/
  HAL_LTDC_Reload(hltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 800197c:	2102      	movs	r1, #2
  Display_Context.lcd_sync=1;
 800197e:	609a      	str	r2, [r3, #8]
  HAL_LTDC_Reload(hltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 8001980:	f00c bb44 	b.w	800e00c <HAL_LTDC_Reload>
 8001984:	2400445c 	.word	0x2400445c

08001988 <PREPROC_ImageResize>:
 * @param Preproc_Context_Ptr Pointer to PREPROC context
 */
void PREPROC_ImageResize(PreprocContext_TypeDef* Preproc_Context_Ptr)
{  
#if RESIZING_ALGO == RESIZING_NEAREST_NEIGHBOR
  ImageResize_NearestNeighbor(&Preproc_Context_Ptr->Resize_Src_Img, 
 8001988:	f100 020c 	add.w	r2, r0, #12
 800198c:	f100 014c 	add.w	r1, r0, #76	; 0x4c
 8001990:	303c      	adds	r0, #60	; 0x3c
 8001992:	f017 bf7b 	b.w	801988c <ImageResize_NearestNeighbor>
 8001996:	bf00      	nop

08001998 <PREPROC_PixelFormatConversion>:
 * @param Preproc_Context_Ptr Pointer to PREPROC context
 */
void PREPROC_PixelFormatConversion(PreprocContext_TypeDef* Preproc_Context_Ptr)
{
#if PIXEL_FMT_CONV == HW_PFC
  if(Preproc_Context_Ptr->Pfc_Src_Img.format==PXFMT_RGB565 && 
 8001998:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
 800199c:	2901      	cmp	r1, #1
 800199e:	d000      	beq.n	80019a2 <PREPROC_PixelFormatConversion+0xa>
 80019a0:	e7fe      	b.n	80019a0 <PREPROC_PixelFormatConversion+0x8>
{
 80019a2:	b570      	push	{r4, r5, r6, lr}
  if(Preproc_Context_Ptr->Pfc_Src_Img.format==PXFMT_RGB565 && 
 80019a4:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
{
 80019a8:	b088      	sub	sp, #32
  if(Preproc_Context_Ptr->Pfc_Src_Img.format==PXFMT_RGB565 && 
 80019aa:	2c02      	cmp	r4, #2
 80019ac:	d000      	beq.n	80019b0 <PREPROC_PixelFormatConversion+0x18>
 80019ae:	e7fe      	b.n	80019ae <PREPROC_PixelFormatConversion+0x16>
     Preproc_Context_Ptr->Pfc_Dst_Img.format==PXFMT_RGB888)
  {
    /*DMA2D transfer w/ PFC*/
    UTILS_Dma2d_Memcpy((uint32_t *)(Preproc_Context_Ptr->Pfc_Src_Img.pData), 
 80019b0:	6886      	ldr	r6, [r0, #8]
 80019b2:	8843      	ldrh	r3, [r0, #2]
 80019b4:	8802      	ldrh	r2, [r0, #0]
 80019b6:	e9cd 1104 	strd	r1, r1, [sp, #16]
 80019ba:	6845      	ldr	r5, [r0, #4]
 80019bc:	9403      	str	r4, [sp, #12]
 80019be:	8c04      	ldrh	r4, [r0, #32]
 80019c0:	9606      	str	r6, [sp, #24]
 80019c2:	8b81      	ldrh	r1, [r0, #28]
 80019c4:	e9cd 4501 	strd	r4, r5, [sp, #4]
 80019c8:	9100      	str	r1, [sp, #0]
 80019ca:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80019cc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80019ce:	f002 fdc5 	bl	800455c <UTILS_Dma2d_Memcpy>
    while(1);
  }
#else
 #error PFC method not valid!
#endif
}
 80019d2:	b008      	add	sp, #32
 80019d4:	bd70      	pop	{r4, r5, r6, pc}
 80019d6:	bf00      	nop

080019d8 <PREPROC_Pixel_RB_Swap>:
  uint8_t tmp_r;
  
  struct rgb_Src *pivot = (struct rgb_Src *) pSrc;
  struct rgb_Dst *dest = (struct rgb_Dst *) pDst;
  
  for (int i = pixels-1; i >= 0; i--)
 80019d8:	1e53      	subs	r3, r2, #1
 80019da:	d414      	bmi.n	8001a06 <PREPROC_Pixel_RB_Swap+0x2e>
 80019dc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80019e0:	4410      	add	r0, r2
 80019e2:	4411      	add	r1, r2
{
 80019e4:	b410      	push	{r4}
  {
    tmp_r=pivot[i].r;
    
    dest[i].r = pivot[i].b;
 80019e6:	f810 2c01 	ldrb.w	r2, [r0, #-1]
  for (int i = pixels-1; i >= 0; i--)
 80019ea:	3b01      	subs	r3, #1
    tmp_r=pivot[i].r;
 80019ec:	f810 4c03 	ldrb.w	r4, [r0, #-3]
 80019f0:	3903      	subs	r1, #3
    dest[i].r = pivot[i].b;
 80019f2:	700a      	strb	r2, [r1, #0]
 80019f4:	3803      	subs	r0, #3
    dest[i].b = tmp_r;
 80019f6:	708c      	strb	r4, [r1, #2]
    dest[i].g = pivot[i].g;
 80019f8:	7842      	ldrb	r2, [r0, #1]
 80019fa:	704a      	strb	r2, [r1, #1]
  for (int i = pixels-1; i >= 0; i--)
 80019fc:	1c5a      	adds	r2, r3, #1
 80019fe:	d1f2      	bne.n	80019e6 <PREPROC_Pixel_RB_Swap+0xe>
  }
}
 8001a00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	4770      	bx	lr

08001a08 <UartCmd_Run_NonRegression>:

/* Private function prototypes -----------------------------------------------*/

#ifndef OBJECTDETECT
static void UartCmd_Run_NonRegression(TestContext_TypeDef *Test_Context_Ptr, uint8_t* data_buffer, uint16_t data_size)
{
 8001a08:	b430      	push	{r4, r5}
  *Number of consecutive full run (-1) to execute (4 bytes): 0x00000000 <=> one run, 0xFFFFFFFE <=> 2^32 runs and 0xFFFFFFFF <=> infinite runs (= debug mode)
  ************************************************************************************************************************************************************/

  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;

  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8001a0a:	2301      	movs	r3, #1
  Test_Context_Ptr->UartContext.uart_host_requested_mode=DUMP;
 8001a0c:	2403      	movs	r4, #3
  App_Cxt_Ptr->run_loop = 0;
 8001a0e:	2500      	movs	r5, #0
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 8001a10:	f8d0 2b7c 	ldr.w	r2, [r0, #2940]	; 0xb7c
  Test_Context_Ptr->UartContext.uart_host_requested_mode=DUMP;
 8001a14:	f880 4aa4 	strb.w	r4, [r0, #2724]	; 0xaa4

  Test_Context_Ptr->UartContext.uart_host_requested_dump_submode=CAMERA_COLORBAR;
 8001a18:	2402      	movs	r4, #2
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8001a1a:	f8c0 3aa0 	str.w	r3, [r0, #2720]	; 0xaa0
  App_Cxt_Ptr->run_loop = 0;
 8001a1e:	6055      	str	r5, [r2, #4]
  Test_Context_Ptr->UartContext.uart_host_requested_dump_memory=SDRAM;

  Test_Context_Ptr->DumpContext.dump_write_bufferPtr=dump_intermediate_data_ping_buff;
 8001a20:	4a06      	ldr	r2, [pc, #24]	; (8001a3c <UartCmd_Run_NonRegression+0x34>)

  Test_Context_Ptr->UartContext.uart_host_requested_dump_number=*(uint32_t*)(data_buffer);
 8001a22:	6809      	ldr	r1, [r1, #0]
  Test_Context_Ptr->UartContext.uart_host_requested_dump_submode=CAMERA_COLORBAR;
 8001a24:	f880 4aa5 	strb.w	r4, [r0, #2725]	; 0xaa5
  Test_Context_Ptr->UartContext.uart_host_requested_dump_memory=SDRAM;
 8001a28:	f880 3aa6 	strb.w	r3, [r0, #2726]	; 0xaa6
  Test_Context_Ptr->UartContext.uart_host_requested_dump_number=*(uint32_t*)(data_buffer);
 8001a2c:	f8c0 1aa8 	str.w	r1, [r0, #2728]	; 0xaa8

  Test_Context_Ptr->UartContext.uart_host_nonreg_run=1;
 8001a30:	f8c0 3ab8 	str.w	r3, [r0, #2744]	; 0xab8
  Test_Context_Ptr->DumpContext.dump_write_bufferPtr=dump_intermediate_data_ping_buff;
 8001a34:	6002      	str	r2, [r0, #0]
}
 8001a36:	bc30      	pop	{r4, r5}
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	d0d51880 	.word	0xd0d51880

08001a40 <UartCmd_Run_Validation>:

static void UartCmd_Run_Validation(TestContext_TypeDef *Test_Context_Ptr, uint8_t* data_buffer, uint16_t data_size)
{
 8001a40:	b430      	push	{r4, r5}

  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;

  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
  Test_Context_Ptr->UartContext.uart_host_requested_mode=VALID;
  Test_Context_Ptr->ValidationContext.validation_write_bufferPtr=(uint8_t*)validation_output_buff;
 8001a42:	4907      	ldr	r1, [pc, #28]	; (8001a60 <UartCmd_Run_Validation+0x20>)
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8001a44:	2501      	movs	r5, #1
  Test_Context_Ptr->UartContext.uart_host_requested_mode=VALID;
 8001a46:	2402      	movs	r4, #2
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 8001a48:	f8d0 3b7c 	ldr.w	r3, [r0, #2940]	; 0xb7c
  App_Cxt_Ptr->run_loop = 0;
 8001a4c:	2200      	movs	r2, #0
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8001a4e:	f8c0 5aa0 	str.w	r5, [r0, #2720]	; 0xaa0
  Test_Context_Ptr->UartContext.uart_host_requested_mode=VALID;
 8001a52:	f880 4aa4 	strb.w	r4, [r0, #2724]	; 0xaa4
  Test_Context_Ptr->ValidationContext.validation_write_bufferPtr=(uint8_t*)validation_output_buff;
 8001a56:	f8c0 1a98 	str.w	r1, [r0, #2712]	; 0xa98
  App_Cxt_Ptr->run_loop = 0;
 8001a5a:	605a      	str	r2, [r3, #4]
}
 8001a5c:	bc30      	pop	{r4, r5}
 8001a5e:	4770      	bx	lr
 8001a60:	d0d31e00 	.word	0xd0d31e00

08001a64 <UartCmd_Launch_Dump>:
  Uart_Rx(Test_Context_Ptr, aRxBuffer, RX_TRANSFER_SIZE);
}


static void UartCmd_Launch_Dump(TestContext_TypeDef *Test_Context_Ptr, uint8_t* data_buffer, uint16_t data_size)
{
 8001a64:	b430      	push	{r4, r5}
  *This command has two parameters:
  *Dump sub-mode (1 byte): CAMERA_LIVE= 0x01, CAMERA_COLORBAR= 0x02, SDCARD_FILE= 0x03
  *Dump memory location (1 byte): SDCARD (0x00) or SDRAM (0x01)
  ***********************************************************************************/

  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 8001a66:	f8d0 3b7c 	ldr.w	r3, [r0, #2940]	; 0xb7c

  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8001a6a:	2501      	movs	r5, #1
  Test_Context_Ptr->UartContext.uart_host_requested_mode=DUMP;
 8001a6c:	2403      	movs	r4, #3
  App_Cxt_Ptr->run_loop = 0;
 8001a6e:	2200      	movs	r2, #0
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8001a70:	f8c0 5aa0 	str.w	r5, [r0, #2720]	; 0xaa0
  Test_Context_Ptr->UartContext.uart_host_requested_mode=DUMP;
 8001a74:	f880 4aa4 	strb.w	r4, [r0, #2724]	; 0xaa4
  App_Cxt_Ptr->run_loop = 0;
 8001a78:	605a      	str	r2, [r3, #4]

  Test_Context_Ptr->UartContext.uart_host_requested_dump_submode=(MemDumpFrameSource_TypeDef)(*(uint8_t*)(data_buffer));
 8001a7a:	780b      	ldrb	r3, [r1, #0]
 8001a7c:	f880 3aa5 	strb.w	r3, [r0, #2725]	; 0xaa5
  Test_Context_Ptr->UartContext.uart_host_requested_dump_memory=(MemDumpMemoryLocation_TypeDef)(*(uint8_t*)(data_buffer+1));
 8001a80:	784b      	ldrb	r3, [r1, #1]

  if(Test_Context_Ptr->UartContext.uart_host_requested_dump_memory == SDRAM)
 8001a82:	42ab      	cmp	r3, r5
  Test_Context_Ptr->UartContext.uart_host_requested_dump_memory=(MemDumpMemoryLocation_TypeDef)(*(uint8_t*)(data_buffer+1));
 8001a84:	f880 3aa6 	strb.w	r3, [r0, #2726]	; 0xaa6
  if(Test_Context_Ptr->UartContext.uart_host_requested_dump_memory == SDRAM)
 8001a88:	d101      	bne.n	8001a8e <UartCmd_Launch_Dump+0x2a>
    Test_Context_Ptr->DumpContext.dump_write_bufferPtr=dump_intermediate_data_ping_buff;
 8001a8a:	4b02      	ldr	r3, [pc, #8]	; (8001a94 <UartCmd_Launch_Dump+0x30>)
 8001a8c:	6003      	str	r3, [r0, #0]
}
 8001a8e:	bc30      	pop	{r4, r5}
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	d0d51880 	.word	0xd0d51880

08001a98 <UartCmd_Launch_Capture>:
    Uart_Rx(Test_Context_Ptr, aRxBuffer, RX_TRANSFER_SIZE);
  }
}

static void UartCmd_Launch_Capture(TestContext_TypeDef *Test_Context_Ptr, uint8_t* data_buffer, uint16_t data_size)
{
 8001a98:	b430      	push	{r4, r5}
  *Capure format (1 byte): possible values are RAW= 0x03, BMP= 0x04
  *Inter-capture delay (2 bytes): expressed in milliseconds, for 'automatic' capture mode. If equals zero=> 'manual' capture mode
  *Number of capture (2 bytes): applies for 'automatic' mode only
  *******************************************************************************************************************************/

  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 8001a9a:	f8d0 3b7c 	ldr.w	r3, [r0, #2940]	; 0xb7c

  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8001a9e:	2501      	movs	r5, #1
  Test_Context_Ptr->UartContext.uart_host_requested_mode=CAPTURE;
 8001aa0:	2404      	movs	r4, #4
  App_Cxt_Ptr->run_loop = 0;
 8001aa2:	2200      	movs	r2, #0
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8001aa4:	f8c0 5aa0 	str.w	r5, [r0, #2720]	; 0xaa0
  Test_Context_Ptr->UartContext.uart_host_requested_mode=CAPTURE;
 8001aa8:	f880 4aa4 	strb.w	r4, [r0, #2724]	; 0xaa4

  Test_Context_Ptr->UartContext.uart_host_requested_capture_format=(DataFormat_TypeDef)(*(uint8_t*)(data_buffer));
  Test_Context_Ptr->UartContext.uart_host_requested_capture_delay=*(uint16_t*)(data_buffer+1);
 8001aac:	f8b1 4001 	ldrh.w	r4, [r1, #1]
  App_Cxt_Ptr->run_loop = 0;
 8001ab0:	605a      	str	r2, [r3, #4]
  Test_Context_Ptr->UartContext.uart_host_requested_capture_number=*(uint16_t*)(data_buffer+3);
 8001ab2:	f8b1 3003 	ldrh.w	r3, [r1, #3]
  Test_Context_Ptr->UartContext.uart_host_requested_capture_format=(DataFormat_TypeDef)(*(uint8_t*)(data_buffer));
 8001ab6:	780a      	ldrb	r2, [r1, #0]
  Test_Context_Ptr->UartContext.uart_host_requested_capture_delay=*(uint16_t*)(data_buffer+1);
 8001ab8:	f8c0 4ab0 	str.w	r4, [r0, #2736]	; 0xab0
  Test_Context_Ptr->UartContext.uart_host_requested_capture_format=(DataFormat_TypeDef)(*(uint8_t*)(data_buffer));
 8001abc:	f880 2aac 	strb.w	r2, [r0, #2732]	; 0xaac
  Test_Context_Ptr->UartContext.uart_host_requested_capture_number=*(uint16_t*)(data_buffer+3);
 8001ac0:	f8c0 3ab4 	str.w	r3, [r0, #2740]	; 0xab4
  else
  {
    /*Automatic mode => Program TIM for periodic capture*/
    ;
  }
}
 8001ac4:	bc30      	pop	{r4, r5}
 8001ac6:	4770      	bx	lr

08001ac8 <Uart_Tx>:
 * @param TxDataTransferSize Data size in bytes of the TX transfer
 */
static void Uart_Tx(TestContext_TypeDef *Test_Context_Ptr, uint8_t *TxDataBufPtr, uint32_t TxDataBufSize, uint32_t TxDataTransferSize)
{
  /*Check that TxDataTransferSize is lower or equal to TxDataBufSize*/
  if(TxDataTransferSize > TxDataBufSize)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d900      	bls.n	8001ace <Uart_Tx+0x6>
 8001acc:	e7fe      	b.n	8001acc <Uart_Tx+0x4>
{
 8001ace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ad2:	460c      	mov	r4, r1
 8001ad4:	4607      	mov	r7, r0
 8001ad6:	4611      	mov	r1, r2
    while(1);

  /*Perform D-Cache clean before DMA transfer*/
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001ad8:	2202      	movs	r2, #2
 8001ada:	4620      	mov	r0, r4
 8001adc:	461d      	mov	r5, r3
 8001ade:	f002 fdf7 	bl	80046d0 <UTILS_DCache_Coherency_Maintenance>

  if(TxDataTransferSize<0xFFFF)
 8001ae2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8001ae6:	f607 27bc 	addw	r7, r7, #2748	; 0xabc
 8001aea:	429d      	cmp	r5, r3
 8001aec:	d920      	bls.n	8001b30 <Uart_Tx+0x68>
  else
  {
    uint32_t dma_xfer_num;
    uint32_t i;

    dma_xfer_num=TxDataTransferSize/0xFFFF;
 8001aee:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8001af2:	fbb5 f3f6 	udiv	r3, r5, r6
 8001af6:	ebc3 4303 	rsb	r3, r3, r3, lsl #16
 8001afa:	eb04 0803 	add.w	r8, r4, r3

    for(i=0;i<dma_xfer_num;i++)
    {
      /* Start transmission data */
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8001afe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b02:	4621      	mov	r1, r4
 8001b04:	4638      	mov	r0, r7
 8001b06:	f010 f9b3 	bl	8011e70 <HAL_UART_Transmit_DMA>
 8001b0a:	b108      	cbz	r0, 8001b10 <Uart_Tx+0x48>
      {
        /* Transfer error in transmission process */
        Error_Handler();
 8001b0c:	f002 fe4c 	bl	80047a8 <Error_Handler>
      }
      /*######## Wait for the end of the transfer ######*/
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8001b10:	4638      	mov	r0, r7
 8001b12:	f010 fbf3 	bl	80122fc <HAL_UART_GetState>
 8001b16:	2820      	cmp	r0, #32
 8001b18:	d1fa      	bne.n	8001b10 <Uart_Tx+0x48>
 8001b1a:	4434      	add	r4, r6
    for(i=0;i<dma_xfer_num;i++)
 8001b1c:	4544      	cmp	r4, r8
 8001b1e:	d1ee      	bne.n	8001afe <Uart_Tx+0x36>
    }

    if((TxDataTransferSize%0xFFFF)!=0)
 8001b20:	fbb5 f6f6 	udiv	r6, r5, r6
 8001b24:	ebc6 4606 	rsb	r6, r6, r6, lsl #16
 8001b28:	1baa      	subs	r2, r5, r6
 8001b2a:	d10f      	bne.n	8001b4c <Uart_Tx+0x84>
      }
      /*######## Wait for the end of the transfer ######*/
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
    }
  }
}
 8001b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8001b30:	b2aa      	uxth	r2, r5
 8001b32:	4621      	mov	r1, r4
 8001b34:	4638      	mov	r0, r7
 8001b36:	f010 f99b 	bl	8011e70 <HAL_UART_Transmit_DMA>
 8001b3a:	b108      	cbz	r0, 8001b40 <Uart_Tx+0x78>
      Error_Handler();
 8001b3c:	f002 fe34 	bl	80047a8 <Error_Handler>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8001b40:	4638      	mov	r0, r7
 8001b42:	f010 fbdb 	bl	80122fc <HAL_UART_GetState>
 8001b46:	2820      	cmp	r0, #32
 8001b48:	d1fa      	bne.n	8001b40 <Uart_Tx+0x78>
 8001b4a:	e7ef      	b.n	8001b2c <Uart_Tx+0x64>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), TxDataTransferSize%0xFFFF)!= HAL_OK)
 8001b4c:	b292      	uxth	r2, r2
 8001b4e:	4621      	mov	r1, r4
 8001b50:	4638      	mov	r0, r7
 8001b52:	f010 f98d 	bl	8011e70 <HAL_UART_Transmit_DMA>
 8001b56:	b108      	cbz	r0, 8001b5c <Uart_Tx+0x94>
        Error_Handler();
 8001b58:	f002 fe26 	bl	80047a8 <Error_Handler>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8001b5c:	4638      	mov	r0, r7
 8001b5e:	f010 fbcd 	bl	80122fc <HAL_UART_GetState>
 8001b62:	2820      	cmp	r0, #32
 8001b64:	d1fa      	bne.n	8001b5c <Uart_Tx+0x94>
 8001b66:	e7e1      	b.n	8001b2c <Uart_Tx+0x64>

08001b68 <UartCmd_Write_Camera_Register>:
{
 8001b68:	b570      	push	{r4, r5, r6, lr}
  OV9655_Object_t *pObj=Camera_CompObj;
 8001b6a:	4e0e      	ldr	r6, [pc, #56]	; (8001ba4 <UartCmd_Write_Camera_Register+0x3c>)
{
 8001b6c:	b082      	sub	sp, #8
  uint8_t tmp=*(data_buffer+1);
 8001b6e:	784d      	ldrb	r5, [r1, #1]
{
 8001b70:	4604      	mov	r4, r0
  uint8_t tmp=*(data_buffer+1);
 8001b72:	aa02      	add	r2, sp, #8
  OV9655_Object_t *pObj=Camera_CompObj;
 8001b74:	6830      	ldr	r0, [r6, #0]
  ov9655_write_reg(&pObj->Ctx, *(data_buffer), &tmp, 1);
 8001b76:	7809      	ldrb	r1, [r1, #0]
 8001b78:	2301      	movs	r3, #1
  uint8_t tmp=*(data_buffer+1);
 8001b7a:	f802 5d01 	strb.w	r5, [r2, #-1]!
  ov9655_write_reg(&pObj->Ctx, *(data_buffer), &tmp, 1);
 8001b7e:	3018      	adds	r0, #24
 8001b80:	f006 fa76 	bl	8008070 <ov9655_write_reg>
  HAL_Delay(300);
 8001b84:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001b88:	f008 fd40 	bl	800a60c <HAL_Delay>
 * @param RxDataSize Data size in bytes expected to RX
 */
static void Uart_Rx(TestContext_TypeDef *Test_Context_Ptr, uint8_t *RxDataBufPtr, uint32_t RxDataSize)
{
  /**Configure the UART in reception mode for receiving subsequent command from Host**/
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8001b8c:	f604 20bc 	addw	r0, r4, #2748	; 0xabc
 8001b90:	220a      	movs	r2, #10
 8001b92:	4905      	ldr	r1, [pc, #20]	; (8001ba8 <UartCmd_Write_Camera_Register+0x40>)
 8001b94:	f010 f9c2 	bl	8011f1c <HAL_UART_Receive_DMA>
 8001b98:	b108      	cbz	r0, 8001b9e <UartCmd_Write_Camera_Register+0x36>
  {
    /* Transfer error in reception process */
    Error_Handler();
 8001b9a:	f002 fe05 	bl	80047a8 <Error_Handler>
}
 8001b9e:	b002      	add	sp, #8
 8001ba0:	bd70      	pop	{r4, r5, r6, pc}
 8001ba2:	bf00      	nop
 8001ba4:	24003d18 	.word	0x24003d18
 8001ba8:	240027e0 	.word	0x240027e0

08001bac <UartCmd_Set_Camera_Mode>:
{
 8001bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  OV9655_Object_t *pObj=Camera_CompObj;
 8001bb0:	4b23      	ldr	r3, [pc, #140]	; (8001c40 <UartCmd_Set_Camera_Mode+0x94>)
{
 8001bb2:	b082      	sub	sp, #8
  if(*(data_buffer) == 0x00)
 8001bb4:	780c      	ldrb	r4, [r1, #0]
{
 8001bb6:	460d      	mov	r5, r1
 8001bb8:	4607      	mov	r7, r0
  OV9655_Object_t *pObj=Camera_CompObj;
 8001bba:	681e      	ldr	r6, [r3, #0]
  if(*(data_buffer) == 0x00)
 8001bbc:	b17c      	cbz	r4, 8001bde <UartCmd_Set_Camera_Mode+0x32>
  else if(*(data_buffer) == 0x01)
 8001bbe:	2c01      	cmp	r4, #1
 8001bc0:	d02d      	beq.n	8001c1e <UartCmd_Set_Camera_Mode+0x72>
  if(*(data_buffer) == 0x02)
 8001bc2:	2c02      	cmp	r4, #2
 8001bc4:	d027      	beq.n	8001c16 <UartCmd_Set_Camera_Mode+0x6a>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8001bc6:	f607 20bc 	addw	r0, r7, #2748	; 0xabc
 8001bca:	220a      	movs	r2, #10
 8001bcc:	491d      	ldr	r1, [pc, #116]	; (8001c44 <UartCmd_Set_Camera_Mode+0x98>)
 8001bce:	f010 f9a5 	bl	8011f1c <HAL_UART_Receive_DMA>
 8001bd2:	b108      	cbz	r0, 8001bd8 <UartCmd_Set_Camera_Mode+0x2c>
    Error_Handler();
 8001bd4:	f002 fde8 	bl	80047a8 <Error_Handler>
}
 8001bd8:	b002      	add	sp, #8
 8001bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmp=0x00;
 8001bde:	f10d 0808 	add.w	r8, sp, #8
    ov9655_write_reg(&pObj->Ctx, /*0x8D*/OV9655_COMMON_CTRL20, &tmp, 1);
 8001be2:	3618      	adds	r6, #24
 8001be4:	2301      	movs	r3, #1
 8001be6:	218d      	movs	r1, #141	; 0x8d
    tmp=0x00;
 8001be8:	f808 4d01 	strb.w	r4, [r8, #-1]!
    ov9655_write_reg(&pObj->Ctx, /*0x8D*/OV9655_COMMON_CTRL20, &tmp, 1);
 8001bec:	4630      	mov	r0, r6
 8001bee:	4642      	mov	r2, r8
 8001bf0:	f006 fa3e 	bl	8008070 <ov9655_write_reg>
    HAL_Delay(300);
 8001bf4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001bf8:	f008 fd08 	bl	800a60c <HAL_Delay>
    ov9655_write_reg(&pObj->Ctx, /*0x0C*/OV9655_COMMON_CTRL3, &tmp, 1);
 8001bfc:	4642      	mov	r2, r8
 8001bfe:	2301      	movs	r3, #1
 8001c00:	210c      	movs	r1, #12
 8001c02:	4630      	mov	r0, r6
 8001c04:	f006 fa34 	bl	8008070 <ov9655_write_reg>
    HAL_Delay(300);
 8001c08:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001c0c:	f008 fcfe 	bl	800a60c <HAL_Delay>
 8001c10:	782c      	ldrb	r4, [r5, #0]
  if(*(data_buffer) == 0x02)
 8001c12:	2c02      	cmp	r4, #2
 8001c14:	d1d7      	bne.n	8001bc6 <UartCmd_Set_Camera_Mode+0x1a>
    CAMERA_Set_TestBar_Mode(NULL);
 8001c16:	2000      	movs	r0, #0
 8001c18:	f7ff fccc 	bl	80015b4 <CAMERA_Set_TestBar_Mode>
 8001c1c:	e7d3      	b.n	8001bc6 <UartCmd_Set_Camera_Mode+0x1a>
    tmp=0x10;
 8001c1e:	aa02      	add	r2, sp, #8
 8001c20:	2110      	movs	r1, #16
    ov9655_write_reg(&pObj->Ctx, /*0x8D*/OV9655_COMMON_CTRL20, &tmp, 1);
 8001c22:	4623      	mov	r3, r4
 8001c24:	f106 0018 	add.w	r0, r6, #24
    tmp=0x10;
 8001c28:	f802 1d01 	strb.w	r1, [r2, #-1]!
    ov9655_write_reg(&pObj->Ctx, /*0x8D*/OV9655_COMMON_CTRL20, &tmp, 1);
 8001c2c:	218d      	movs	r1, #141	; 0x8d
 8001c2e:	f006 fa1f 	bl	8008070 <ov9655_write_reg>
    HAL_Delay(300);
 8001c32:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001c36:	f008 fce9 	bl	800a60c <HAL_Delay>
 8001c3a:	782c      	ldrb	r4, [r5, #0]
 8001c3c:	e7c1      	b.n	8001bc2 <UartCmd_Set_Camera_Mode+0x16>
 8001c3e:	bf00      	nop
 8001c40:	24003d18 	.word	0x24003d18
 8001c44:	240027e0 	.word	0x240027e0

08001c48 <UartCmd_Read_Camera_Register>:
{
 8001c48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c4c:	460e      	mov	r6, r1
  uint32_t Num_reg_to_read=(*(data_buffer+1) - *data_buffer)+1;
 8001c4e:	7809      	ldrb	r1, [r1, #0]
{
 8001c50:	b083      	sub	sp, #12
 8001c52:	4681      	mov	r9, r0
  uint32_t Num_reg_to_read=(*(data_buffer+1) - *data_buffer)+1;
 8001c54:	7875      	ldrb	r5, [r6, #1]
 8001c56:	1a6d      	subs	r5, r5, r1
  for(uint8_t i=0; i<Num_reg_to_read;i++)
 8001c58:	3501      	adds	r5, #1
 8001c5a:	d014      	beq.n	8001c86 <UartCmd_Read_Camera_Register+0x3e>
 8001c5c:	2400      	movs	r4, #0
 8001c5e:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8001cb4 <UartCmd_Read_Camera_Register+0x6c>
 8001c62:	4f12      	ldr	r7, [pc, #72]	; (8001cac <UartCmd_Read_Camera_Register+0x64>)
 8001c64:	e000      	b.n	8001c68 <UartCmd_Read_Camera_Register+0x20>
 8001c66:	5d31      	ldrb	r1, [r6, r4]
    ov9655_read_reg(&pObj->Ctx, *(data_buffer+i), &tmp, 1);
 8001c68:	f8d8 0000 	ldr.w	r0, [r8]
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	f10d 0207 	add.w	r2, sp, #7
 8001c72:	3018      	adds	r0, #24
 8001c74:	f006 f9f4 	bl	8008060 <ov9655_read_reg>
    Cam_Reg_Table[i]=tmp;
 8001c78:	f89d 2007 	ldrb.w	r2, [sp, #7]
  for(uint8_t i=0; i<Num_reg_to_read;i++)
 8001c7c:	1c63      	adds	r3, r4, #1
    Cam_Reg_Table[i]=tmp;
 8001c7e:	553a      	strb	r2, [r7, r4]
  for(uint8_t i=0; i<Num_reg_to_read;i++)
 8001c80:	b2dc      	uxtb	r4, r3
 8001c82:	42ac      	cmp	r4, r5
 8001c84:	d3ef      	bcc.n	8001c66 <UartCmd_Read_Camera_Register+0x1e>
  Uart_Tx(Test_Context_Ptr, (uint8_t*)Cam_Reg_Table, sizeof(Cam_Reg_Table), Num_reg_to_read);
 8001c86:	22e0      	movs	r2, #224	; 0xe0
 8001c88:	4908      	ldr	r1, [pc, #32]	; (8001cac <UartCmd_Read_Camera_Register+0x64>)
 8001c8a:	4648      	mov	r0, r9
 8001c8c:	462b      	mov	r3, r5
 8001c8e:	f7ff ff1b 	bl	8001ac8 <Uart_Tx>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8001c92:	f609 20bc 	addw	r0, r9, #2748	; 0xabc
 8001c96:	220a      	movs	r2, #10
 8001c98:	4905      	ldr	r1, [pc, #20]	; (8001cb0 <UartCmd_Read_Camera_Register+0x68>)
 8001c9a:	f010 f93f 	bl	8011f1c <HAL_UART_Receive_DMA>
 8001c9e:	b108      	cbz	r0, 8001ca4 <UartCmd_Read_Camera_Register+0x5c>
    Error_Handler();
 8001ca0:	f002 fd82 	bl	80047a8 <Error_Handler>
}
 8001ca4:	b003      	add	sp, #12
 8001ca6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001caa:	bf00      	nop
 8001cac:	240044e0 	.word	0x240044e0
 8001cb0:	240027e0 	.word	0x240027e0
 8001cb4:	24003d18 	.word	0x24003d18

08001cb8 <FrameCaptureInit>:
{
 8001cb8:	b570      	push	{r4, r5, r6, lr}
  UTIL_LCD_DrawRect(200, 10, 400, 50, UTIL_LCD_COLOR_WHITE);
 8001cba:	f04f 35ff 	mov.w	r5, #4294967295
{
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	4604      	mov	r4, r0
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8001cc2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 8001cc6:	f8d4 6b7c 	ldr.w	r6, [r4, #2940]	; 0xb7c
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8001cca:	f017 fe43 	bl	8019954 <UTIL_LCD_Clear>
  UTIL_LCD_DrawRect(200, 10, 400, 50, UTIL_LCD_COLOR_WHITE);
 8001cce:	2332      	movs	r3, #50	; 0x32
 8001cd0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001cd4:	210a      	movs	r1, #10
 8001cd6:	20c8      	movs	r0, #200	; 0xc8
 8001cd8:	9500      	str	r5, [sp, #0]
 8001cda:	f017 ffe1 	bl	8019ca0 <UTIL_LCD_DrawRect>
  UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"Capture file format", CENTER_MODE);
 8001cde:	f017 fe31 	bl	8019944 <UTIL_LCD_GetFont>
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	88c1      	ldrh	r1, [r0, #6]
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	4a68      	ldr	r2, [pc, #416]	; (8001e8c <FrameCaptureInit+0x1d4>)
 8001cea:	f017 fef9 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(5), (uint8_t *)"Press one of the key of the joystick", CENTER_MODE);
 8001cee:	f017 fe29 	bl	8019944 <UTIL_LCD_GetFont>
 8001cf2:	88c1      	ldrh	r1, [r0, #6]
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	4a66      	ldr	r2, [pc, #408]	; (8001e90 <FrameCaptureInit+0x1d8>)
 8001cf8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001cfc:	2000      	movs	r0, #0
 8001cfe:	f017 feef 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(6), (uint8_t *)"to select the format of the captured files", CENTER_MODE);
 8001d02:	f017 fe1f 	bl	8019944 <UTIL_LCD_GetFont>
 8001d06:	88c1      	ldrh	r1, [r0, #6]
 8001d08:	2301      	movs	r3, #1
 8001d0a:	4a62      	ldr	r2, [pc, #392]	; (8001e94 <FrameCaptureInit+0x1dc>)
 8001d0c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001d10:	2000      	movs	r0, #0
 8001d12:	4099      	lsls	r1, r3
 8001d14:	f017 fee4 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DrawLine(pt_center.x - pt_offset, pt_center.y, pt_center.x, pt_center.y - pt_offset, UTIL_LCD_COLOR_WHITE);
 8001d18:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8001d1c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001d20:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001d24:	4608      	mov	r0, r1
 8001d26:	9500      	str	r5, [sp, #0]
 8001d28:	f017 ff2c 	bl	8019b84 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x, pt_center.y - pt_offset, pt_center.x + pt_offset, pt_center.y, UTIL_LCD_COLOR_WHITE);
 8001d2c:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8001d30:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8001d34:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001d38:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001d3c:	9500      	str	r5, [sp, #0]
 8001d3e:	f017 ff21 	bl	8019b84 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x + pt_offset, pt_center.y, pt_center.x, pt_center.y + pt_offset, UTIL_LCD_COLOR_WHITE);
 8001d42:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001d46:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8001d4a:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8001d4e:	461a      	mov	r2, r3
 8001d50:	9500      	str	r5, [sp, #0]
 8001d52:	f017 ff17 	bl	8019b84 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x, pt_center.y + pt_offset, pt_center.x - pt_offset, pt_center.y, UTIL_LCD_COLOR_WHITE);
 8001d56:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8001d5a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001d5e:	9500      	str	r5, [sp, #0]
 8001d60:	461a      	mov	r2, r3
 8001d62:	4608      	mov	r0, r1
 8001d64:	f017 ff0e 	bl	8019b84 <UTIL_LCD_DrawLine>
  UTIL_LCD_DisplayStringAt(0, pt_center.y - pt_offset - LINE(2), (uint8_t*)appli_names[0], CENTER_MODE);//UP
 8001d68:	f017 fdec 	bl	8019944 <UTIL_LCD_GetFont>
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	88c1      	ldrh	r1, [r0, #6]
 8001d70:	2000      	movs	r0, #0
 8001d72:	4a49      	ldr	r2, [pc, #292]	; (8001e98 <FrameCaptureInit+0x1e0>)
 8001d74:	4099      	lsls	r1, r3
 8001d76:	f5c1 7196 	rsb	r1, r1, #300	; 0x12c
 8001d7a:	f017 feb1 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, pt_center.y + pt_offset + LINE(1), (uint8_t*)appli_names[1], CENTER_MODE);//DOWN
 8001d7e:	f017 fde1 	bl	8019944 <UTIL_LCD_GetFont>
 8001d82:	88c1      	ldrh	r1, [r0, #6]
 8001d84:	2301      	movs	r3, #1
 8001d86:	4a45      	ldr	r2, [pc, #276]	; (8001e9c <FrameCaptureInit+0x1e4>)
 8001d88:	f501 71c8 	add.w	r1, r1, #400	; 0x190
 8001d8c:	2000      	movs	r0, #0
 8001d8e:	f017 fea7 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
  DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8001d92:	6e70      	ldr	r0, [r6, #100]	; 0x64
 8001d94:	f7ff fdb4 	bl	8001900 <DISPLAY_Refresh>
  if(Test_Context_Ptr->UartContext.uart_cmd_ongoing)
 8001d98:	f8d4 3aa0 	ldr.w	r3, [r4, #2720]	; 0xaa0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d040      	beq.n	8001e22 <FrameCaptureInit+0x16a>
    switch (Test_Context_Ptr->UartContext.uart_host_requested_capture_format)
 8001da0:	f894 3aac 	ldrb.w	r3, [r4, #2732]	; 0xaac
 8001da4:	2b03      	cmp	r3, #3
 8001da6:	d001      	beq.n	8001dac <FrameCaptureInit+0xf4>
 8001da8:	2b04      	cmp	r3, #4
 8001daa:	d101      	bne.n	8001db0 <FrameCaptureInit+0xf8>
      Test_Context_Ptr->CaptureContext.capture_file_format=BMP;
 8001dac:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
    Test_Context_Ptr->UartContext.uart_cmd_ongoing = 0;
 8001db0:	2300      	movs	r3, #0
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8001db2:	220a      	movs	r2, #10
 8001db4:	493a      	ldr	r1, [pc, #232]	; (8001ea0 <FrameCaptureInit+0x1e8>)
 8001db6:	f604 20bc 	addw	r0, r4, #2748	; 0xabc
    Test_Context_Ptr->UartContext.uart_cmd_ongoing = 0;
 8001dba:	f8c4 3aa0 	str.w	r3, [r4, #2720]	; 0xaa0
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8001dbe:	f010 f8ad 	bl	8011f1c <HAL_UART_Receive_DMA>
 8001dc2:	2800      	cmp	r0, #0
 8001dc4:	d15e      	bne.n	8001e84 <FrameCaptureInit+0x1cc>
  Test_Context_Ptr->RngHandle.Instance = RNG;
 8001dc6:	4b37      	ldr	r3, [pc, #220]	; (8001ea4 <FrameCaptureInit+0x1ec>)
  HAL_RNG_DeInit(&Test_Context_Ptr->RngHandle);
 8001dc8:	f604 3568 	addw	r5, r4, #2920	; 0xb68
  Test_Context_Ptr->RngHandle.Instance = RNG;
 8001dcc:	f8c4 3b68 	str.w	r3, [r4, #2920]	; 0xb68
  HAL_RNG_DeInit(&Test_Context_Ptr->RngHandle);
 8001dd0:	4628      	mov	r0, r5
 8001dd2:	f00e febd 	bl	8010b50 <HAL_RNG_DeInit>
  HAL_RNG_Init(&Test_Context_Ptr->RngHandle);
 8001dd6:	4628      	mov	r0, r5
 8001dd8:	f00e fe80 	bl	8010adc <HAL_RNG_Init>
  HAL_RNG_GenerateRandomNumber(&Test_Context_Ptr->RngHandle, &Test_Context_Ptr->CaptureContext.capture_session_id);
 8001ddc:	4628      	mov	r0, r5
 8001dde:	f104 01c4 	add.w	r1, r4, #196	; 0xc4
 8001de2:	f00e fecf 	bl	8010b84 <HAL_RNG_GenerateRandomNumber>
  sprintf(Test_Context_Ptr->CaptureContext.capture_session_name, "Session %X", (unsigned int)Test_Context_Ptr->CaptureContext.capture_session_id);
 8001de6:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8001dea:	492f      	ldr	r1, [pc, #188]	; (8001ea8 <FrameCaptureInit+0x1f0>)
 8001dec:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
 8001df0:	f01c fb7a 	bl	801e4e8 <siprintf>
  if (BSP_SD_Init(0) != BSP_ERROR_NONE)
 8001df4:	2000      	movs	r0, #0
 8001df6:	f008 fac3 	bl	800a380 <BSP_SD_Init>
 8001dfa:	4605      	mov	r5, r0
 8001dfc:	b340      	cbz	r0, 8001e50 <FrameCaptureInit+0x198>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Error. SD Card not detected", CENTER_MODE);
 8001dfe:	f017 fda1 	bl	8019944 <UTIL_LCD_GetFont>
 8001e02:	88c1      	ldrh	r1, [r0, #6]
 8001e04:	2301      	movs	r3, #1
 8001e06:	4a29      	ldr	r2, [pc, #164]	; (8001eac <FrameCaptureInit+0x1f4>)
 8001e08:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8001e0c:	2000      	movs	r0, #0
 8001e0e:	4099      	lsls	r1, r3
 8001e10:	f017 fe66 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8001e14:	6e70      	ldr	r0, [r6, #100]	; 0x64
 8001e16:	f7ff fd73 	bl	8001900 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 8001e1a:	2002      	movs	r0, #2
 8001e1c:	f006 f95e 	bl	80080dc <BSP_LED_On>
 8001e20:	e7fe      	b.n	8001e20 <FrameCaptureInit+0x168>
    HAL_Delay(200);
 8001e22:	20c8      	movs	r0, #200	; 0xc8
 8001e24:	f008 fbf2 	bl	800a60c <HAL_Delay>
      joy_state = (JOYPin_TypeDef) BSP_JOY_GetState(JOY1, 0);
 8001e28:	2100      	movs	r1, #0
 8001e2a:	4608      	mov	r0, r1
 8001e2c:	f006 fa6a 	bl	8008304 <BSP_JOY_GetState>
 8001e30:	b2c0      	uxtb	r0, r0
    while (joy_state == JOY_NONE || joy_state == JOY_RIGHT || joy_state == JOY_LEFT || joy_state == JOY_SEL)
 8001e32:	f010 0ff7 	tst.w	r0, #247	; 0xf7
 8001e36:	d0f7      	beq.n	8001e28 <FrameCaptureInit+0x170>
 8001e38:	2804      	cmp	r0, #4
 8001e3a:	d0f5      	beq.n	8001e28 <FrameCaptureInit+0x170>
 8001e3c:	2801      	cmp	r0, #1
 8001e3e:	d0f3      	beq.n	8001e28 <FrameCaptureInit+0x170>
    switch (joy_state)
 8001e40:	2802      	cmp	r0, #2
 8001e42:	d01b      	beq.n	8001e7c <FrameCaptureInit+0x1c4>
 8001e44:	2810      	cmp	r0, #16
 8001e46:	d1be      	bne.n	8001dc6 <FrameCaptureInit+0x10e>
      Test_Context_Ptr->CaptureContext.capture_file_format=RAW;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
      break;
 8001e4e:	e7ba      	b.n	8001dc6 <FrameCaptureInit+0x10e>
  sprintf(Test_Context_Ptr->CaptureContext.capture_folder_name, "/Camera_Capture/CAM_CAPTURE_SESS_%X", (unsigned int)Test_Context_Ptr->CaptureContext.capture_session_id);
 8001e50:	f104 06de 	add.w	r6, r4, #222	; 0xde
  STM32Fs_Init();
 8001e54:	f016 ff1a 	bl	8018c8c <STM32Fs_Init>
  STM32Fs_CreateDir("/Camera_Capture");
 8001e58:	4815      	ldr	r0, [pc, #84]	; (8001eb0 <FrameCaptureInit+0x1f8>)
 8001e5a:	f016 ff77 	bl	8018d4c <STM32Fs_CreateDir>
  sprintf(Test_Context_Ptr->CaptureContext.capture_folder_name, "/Camera_Capture/CAM_CAPTURE_SESS_%X", (unsigned int)Test_Context_Ptr->CaptureContext.capture_session_id);
 8001e5e:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8001e62:	4914      	ldr	r1, [pc, #80]	; (8001eb4 <FrameCaptureInit+0x1fc>)
 8001e64:	4630      	mov	r0, r6
 8001e66:	f01c fb3f 	bl	801e4e8 <siprintf>
  STM32Fs_CreateDir(Test_Context_Ptr->CaptureContext.capture_folder_name);
 8001e6a:	4630      	mov	r0, r6
 8001e6c:	f016 ff6e 	bl	8018d4c <STM32Fs_CreateDir>
  BSP_SD_DeInit(0);
 8001e70:	4628      	mov	r0, r5
}
 8001e72:	b002      	add	sp, #8
 8001e74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  BSP_SD_DeInit(0);
 8001e78:	f008 ba44 	b.w	800a304 <BSP_SD_DeInit>
      Test_Context_Ptr->CaptureContext.capture_file_format=BMP;
 8001e7c:	2304      	movs	r3, #4
 8001e7e:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
      break;
 8001e82:	e7a0      	b.n	8001dc6 <FrameCaptureInit+0x10e>
    Error_Handler();
 8001e84:	f002 fc90 	bl	80047a8 <Error_Handler>
 8001e88:	e79d      	b.n	8001dc6 <FrameCaptureInit+0x10e>
 8001e8a:	bf00      	nop
 8001e8c:	08020184 	.word	0x08020184
 8001e90:	08020198 	.word	0x08020198
 8001e94:	080201c0 	.word	0x080201c0
 8001e98:	080208b4 	.word	0x080208b4
 8001e9c:	080208b8 	.word	0x080208b8
 8001ea0:	240027e0 	.word	0x240027e0
 8001ea4:	48021800 	.word	0x48021800
 8001ea8:	080201ec 	.word	0x080201ec
 8001eac:	080201f8 	.word	0x080201f8
 8001eb0:	08020214 	.word	0x08020214
 8001eb4:	08020224 	.word	0x08020224

08001eb8 <MemoryDumpInit>:
{
 8001eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
  char  dump_dir_path[64]=  "/dump_src_image_vga";
 8001eba:	4ea1      	ldr	r6, [pc, #644]	; (8002140 <MemoryDumpInit+0x288>)
{
 8001ebc:	b095      	sub	sp, #84	; 0x54
 8001ebe:	4604      	mov	r4, r0
  UTIL_LCD_DrawRect(200, 10, 400, 50, UTIL_LCD_COLOR_WHITE);
 8001ec0:	f04f 37ff 	mov.w	r7, #4294967295
  char  dump_dir_path[64]=  "/dump_src_image_vga";
 8001ec4:	ad04      	add	r5, sp, #16
 8001ec6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001ec8:	6836      	ldr	r6, [r6, #0]
 8001eca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ecc:	222c      	movs	r2, #44	; 0x2c
 8001ece:	2100      	movs	r1, #0
 8001ed0:	a809      	add	r0, sp, #36	; 0x24
 8001ed2:	602e      	str	r6, [r5, #0]
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 8001ed4:	f8d4 5b7c 	ldr.w	r5, [r4, #2940]	; 0xb7c
  char  dump_dir_path[64]=  "/dump_src_image_vga";
 8001ed8:	f01b fe09 	bl	801daee <memset>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8001edc:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001ee0:	f017 fd38 	bl	8019954 <UTIL_LCD_Clear>
  UTIL_LCD_DrawRect(200, 10, 400, 50, UTIL_LCD_COLOR_WHITE);
 8001ee4:	2332      	movs	r3, #50	; 0x32
 8001ee6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001eea:	210a      	movs	r1, #10
 8001eec:	20c8      	movs	r0, #200	; 0xc8
 8001eee:	9700      	str	r7, [sp, #0]
 8001ef0:	f017 fed6 	bl	8019ca0 <UTIL_LCD_DrawRect>
  UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"Memory dump sub-mode", CENTER_MODE);
 8001ef4:	f017 fd26 	bl	8019944 <UTIL_LCD_GetFont>
 8001ef8:	2301      	movs	r3, #1
 8001efa:	88c1      	ldrh	r1, [r0, #6]
 8001efc:	2000      	movs	r0, #0
 8001efe:	4a91      	ldr	r2, [pc, #580]	; (8002144 <MemoryDumpInit+0x28c>)
 8001f00:	f017 fdee 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(5), (uint8_t *)"Press one of the key of the joystick", CENTER_MODE);
 8001f04:	f017 fd1e 	bl	8019944 <UTIL_LCD_GetFont>
 8001f08:	88c1      	ldrh	r1, [r0, #6]
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	4a8e      	ldr	r2, [pc, #568]	; (8002148 <MemoryDumpInit+0x290>)
 8001f0e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001f12:	2000      	movs	r0, #0
 8001f14:	f017 fde4 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(6), (uint8_t *)"to select the frame source", CENTER_MODE);
 8001f18:	f017 fd14 	bl	8019944 <UTIL_LCD_GetFont>
 8001f1c:	88c1      	ldrh	r1, [r0, #6]
 8001f1e:	2301      	movs	r3, #1
 8001f20:	4a8a      	ldr	r2, [pc, #552]	; (800214c <MemoryDumpInit+0x294>)
 8001f22:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001f26:	2000      	movs	r0, #0
 8001f28:	4099      	lsls	r1, r3
 8001f2a:	f017 fdd9 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DrawLine(pt_center.x - pt_offset, pt_center.y, pt_center.x, pt_center.y - pt_offset, UTIL_LCD_COLOR_WHITE);
 8001f2e:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8001f32:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001f36:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001f3a:	4608      	mov	r0, r1
 8001f3c:	9700      	str	r7, [sp, #0]
 8001f3e:	f017 fe21 	bl	8019b84 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x, pt_center.y - pt_offset, pt_center.x + pt_offset, pt_center.y, UTIL_LCD_COLOR_WHITE);
 8001f42:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8001f46:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8001f4a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001f4e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001f52:	9700      	str	r7, [sp, #0]
 8001f54:	f017 fe16 	bl	8019b84 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x + pt_offset, pt_center.y, pt_center.x, pt_center.y + pt_offset, UTIL_LCD_COLOR_WHITE);
 8001f58:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001f5c:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8001f60:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8001f64:	461a      	mov	r2, r3
 8001f66:	9700      	str	r7, [sp, #0]
 8001f68:	f017 fe0c 	bl	8019b84 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x, pt_center.y + pt_offset, pt_center.x - pt_offset, pt_center.y, UTIL_LCD_COLOR_WHITE);
 8001f6c:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8001f70:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001f74:	9700      	str	r7, [sp, #0]
 8001f76:	461a      	mov	r2, r3
 8001f78:	4608      	mov	r0, r1
 8001f7a:	f017 fe03 	bl	8019b84 <UTIL_LCD_DrawLine>
  UTIL_LCD_DisplayStringAt(0, pt_center.y - pt_offset - LINE(2), (uint8_t*)appli_names[0], CENTER_MODE);//UP
 8001f7e:	f017 fce1 	bl	8019944 <UTIL_LCD_GetFont>
 8001f82:	2301      	movs	r3, #1
 8001f84:	88c1      	ldrh	r1, [r0, #6]
 8001f86:	2000      	movs	r0, #0
 8001f88:	4a71      	ldr	r2, [pc, #452]	; (8002150 <MemoryDumpInit+0x298>)
 8001f8a:	4099      	lsls	r1, r3
 8001f8c:	f5c1 7196 	rsb	r1, r1, #300	; 0x12c
 8001f90:	f017 fda6 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(pt_center.x + pt_offset + 10, pt_center.y - LINE(1) / 2, (uint8_t*)appli_names[1], LEFT_MODE);//RIGHT
 8001f94:	f017 fcd6 	bl	8019944 <UTIL_LCD_GetFont>
 8001f98:	88c1      	ldrh	r1, [r0, #6]
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	4a6d      	ldr	r2, [pc, #436]	; (8002154 <MemoryDumpInit+0x29c>)
 8001f9e:	1049      	asrs	r1, r1, #1
 8001fa0:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
 8001fa4:	f5c1 71af 	rsb	r1, r1, #350	; 0x15e
 8001fa8:	f017 fd9a 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(200, pt_center.y - LINE(1) / 2, (uint8_t*)appli_names[2], LEFT_MODE);//LEFT
 8001fac:	f017 fcca 	bl	8019944 <UTIL_LCD_GetFont>
 8001fb0:	88c1      	ldrh	r1, [r0, #6]
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	4a68      	ldr	r2, [pc, #416]	; (8002158 <MemoryDumpInit+0x2a0>)
 8001fb6:	1049      	asrs	r1, r1, #1
 8001fb8:	20c8      	movs	r0, #200	; 0xc8
 8001fba:	f5c1 71af 	rsb	r1, r1, #350	; 0x15e
 8001fbe:	f017 fd8f 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
  DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8001fc2:	6e68      	ldr	r0, [r5, #100]	; 0x64
 8001fc4:	f7ff fc9c 	bl	8001900 <DISPLAY_Refresh>
  if(Test_Context_Ptr->UartContext.uart_cmd_ongoing)
 8001fc8:	f8d4 3aa0 	ldr.w	r3, [r4, #2720]	; 0xaa0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d05e      	beq.n	800208e <MemoryDumpInit+0x1d6>
    switch (Test_Context_Ptr->UartContext.uart_host_requested_dump_submode)
 8001fd0:	f894 3aa5 	ldrb.w	r3, [r4, #2725]	; 0xaa5
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d06f      	beq.n	80020b8 <MemoryDumpInit+0x200>
 8001fd8:	2b03      	cmp	r3, #3
 8001fda:	d06b      	beq.n	80020b4 <MemoryDumpInit+0x1fc>
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d069      	beq.n	80020b4 <MemoryDumpInit+0x1fc>
    if(Test_Context_Ptr->UartContext.uart_host_nonreg_run==1)
 8001fe0:	f8d4 3ab8 	ldr.w	r3, [r4, #2744]	; 0xab8
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d144      	bne.n	8002072 <MemoryDumpInit+0x1ba>
      Test_Context_Ptr->UartContext.uart_host_nonreg_run=0;
 8001fe8:	2100      	movs	r1, #0
      Test_Context_Ptr->DumpContext.dump_state = 1;
 8001fea:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 8001fee:	2248      	movs	r2, #72	; 0x48
 8001ff0:	485a      	ldr	r0, [pc, #360]	; (800215c <MemoryDumpInit+0x2a4>)
      Test_Context_Ptr->UartContext.uart_host_nonreg_run=0;
 8001ff2:	f8c4 1ab8 	str.w	r1, [r4, #2744]	; 0xab8
 8001ff6:	f01b fd7a 	bl	801daee <memset>
  if (BSP_SD_Init(0) != BSP_ERROR_NONE)
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	f008 f9c0 	bl	800a380 <BSP_SD_Init>
 8002000:	4606      	mov	r6, r0
 8002002:	b188      	cbz	r0, 8002028 <MemoryDumpInit+0x170>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Error. SD Card not detected", CENTER_MODE);
 8002004:	f017 fc9e 	bl	8019944 <UTIL_LCD_GetFont>
 8002008:	88c1      	ldrh	r1, [r0, #6]
 800200a:	2301      	movs	r3, #1
 800200c:	4a54      	ldr	r2, [pc, #336]	; (8002160 <MemoryDumpInit+0x2a8>)
 800200e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8002012:	2000      	movs	r0, #0
 8002014:	4099      	lsls	r1, r3
 8002016:	f017 fd63 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 800201a:	6e68      	ldr	r0, [r5, #100]	; 0x64
 800201c:	f7ff fc70 	bl	8001900 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 8002020:	2002      	movs	r0, #2
 8002022:	f006 f85b 	bl	80080dc <BSP_LED_On>
 8002026:	e7fe      	b.n	8002026 <MemoryDumpInit+0x16e>
  STM32Fs_Init();
 8002028:	f016 fe30 	bl	8018c8c <STM32Fs_Init>
  HAL_RNG_DeInit(&Test_Context_Ptr->RngHandle);
 800202c:	f604 3768 	addw	r7, r4, #2920	; 0xb68
  Test_Context_Ptr->RngHandle.Instance = RNG;
 8002030:	4b4c      	ldr	r3, [pc, #304]	; (8002164 <MemoryDumpInit+0x2ac>)
  HAL_RNG_DeInit(&Test_Context_Ptr->RngHandle);
 8002032:	4638      	mov	r0, r7
  Test_Context_Ptr->RngHandle.Instance = RNG;
 8002034:	f8c4 3b68 	str.w	r3, [r4, #2920]	; 0xb68
  HAL_RNG_DeInit(&Test_Context_Ptr->RngHandle);
 8002038:	f00e fd8a 	bl	8010b50 <HAL_RNG_DeInit>
  HAL_RNG_Init(&Test_Context_Ptr->RngHandle);
 800203c:	4638      	mov	r0, r7
 800203e:	f00e fd4d 	bl	8010adc <HAL_RNG_Init>
  sprintf(Test_Context_Ptr->DumpContext.dump_folder_name, "/Memory_Dump");
 8002042:	4b49      	ldr	r3, [pc, #292]	; (8002168 <MemoryDumpInit+0x2b0>)
 8002044:	f104 0722 	add.w	r7, r4, #34	; 0x22
 8002048:	cb07      	ldmia	r3!, {r0, r1, r2}
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	f8c4 0022 	str.w	r0, [r4, #34]	; 0x22
  STM32Fs_CreateDir(Test_Context_Ptr->DumpContext.dump_folder_name);
 8002050:	4638      	mov	r0, r7
  sprintf(Test_Context_Ptr->DumpContext.dump_folder_name, "/Memory_Dump");
 8002052:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 8002056:	f8c4 1026 	str.w	r1, [r4, #38]	; 0x26
 800205a:	f8c4 202a 	str.w	r2, [r4, #42]	; 0x2a
  STM32Fs_CreateDir(Test_Context_Ptr->DumpContext.dump_folder_name);
 800205e:	f016 fe75 	bl	8018d4c <STM32Fs_CreateDir>
  if(Test_Context_Ptr->DumpContext.Dump_FrameSource==SDCARD_FILE)
 8002062:	7923      	ldrb	r3, [r4, #4]
 8002064:	2b03      	cmp	r3, #3
 8002066:	d02f      	beq.n	80020c8 <MemoryDumpInit+0x210>
    BSP_SD_DeInit(0);
 8002068:	4630      	mov	r0, r6
 800206a:	f008 f94b 	bl	800a304 <BSP_SD_DeInit>
}
 800206e:	b015      	add	sp, #84	; 0x54
 8002070:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Test_Context_Ptr->UartContext.uart_cmd_ongoing = 0;
 8002072:	2300      	movs	r3, #0
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002074:	220a      	movs	r2, #10
 8002076:	493d      	ldr	r1, [pc, #244]	; (800216c <MemoryDumpInit+0x2b4>)
 8002078:	f604 20bc 	addw	r0, r4, #2748	; 0xabc
      Test_Context_Ptr->UartContext.uart_cmd_ongoing = 0;
 800207c:	f8c4 3aa0 	str.w	r3, [r4, #2720]	; 0xaa0
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002080:	f00f ff4c 	bl	8011f1c <HAL_UART_Receive_DMA>
 8002084:	2800      	cmp	r0, #0
 8002086:	d0b8      	beq.n	8001ffa <MemoryDumpInit+0x142>
    Error_Handler();
 8002088:	f002 fb8e 	bl	80047a8 <Error_Handler>
 800208c:	e7b5      	b.n	8001ffa <MemoryDumpInit+0x142>
    HAL_Delay(200);
 800208e:	20c8      	movs	r0, #200	; 0xc8
 8002090:	f008 fabc 	bl	800a60c <HAL_Delay>
      joy_state = (JOYPin_TypeDef) BSP_JOY_GetState(JOY1, 0);
 8002094:	2100      	movs	r1, #0
 8002096:	4608      	mov	r0, r1
 8002098:	f006 f934 	bl	8008304 <BSP_JOY_GetState>
 800209c:	b2c0      	uxtb	r0, r0
    while (joy_state == JOY_NONE || joy_state == JOY_DOWN || joy_state == JOY_SEL)
 800209e:	2802      	cmp	r0, #2
 80020a0:	d9f8      	bls.n	8002094 <MemoryDumpInit+0x1dc>
    switch (joy_state)
 80020a2:	2808      	cmp	r0, #8
 80020a4:	d040      	beq.n	8002128 <MemoryDumpInit+0x270>
 80020a6:	2810      	cmp	r0, #16
 80020a8:	d047      	beq.n	800213a <MemoryDumpInit+0x282>
 80020aa:	2804      	cmp	r0, #4
 80020ac:	d1a5      	bne.n	8001ffa <MemoryDumpInit+0x142>
      Test_Context_Ptr->DumpContext.Dump_FrameSource=SDCARD_FILE;
 80020ae:	2303      	movs	r3, #3
 80020b0:	7123      	strb	r3, [r4, #4]
   break;
 80020b2:	e7a2      	b.n	8001ffa <MemoryDumpInit+0x142>
      Test_Context_Ptr->DumpContext.Dump_FrameSource=SDCARD_FILE;
 80020b4:	7123      	strb	r3, [r4, #4]
      break;
 80020b6:	e793      	b.n	8001fe0 <MemoryDumpInit+0x128>
      CAMERA_Init(App_Cxt_Ptr->Camera_ContextPtr);
 80020b8:	6de8      	ldr	r0, [r5, #92]	; 0x5c
      Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_COLORBAR;
 80020ba:	7123      	strb	r3, [r4, #4]
      CAMERA_Init(App_Cxt_Ptr->Camera_ContextPtr);
 80020bc:	f7ff f99c 	bl	80013f8 <CAMERA_Init>
      CAMERA_Set_TestBar_Mode(App_Cxt_Ptr->Camera_ContextPtr);
 80020c0:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 80020c2:	f7ff fa77 	bl	80015b4 <CAMERA_Set_TestBar_Mode>
      break;
 80020c6:	e78b      	b.n	8001fe0 <MemoryDumpInit+0x128>
    nbr_dir = 0;
 80020c8:	a914      	add	r1, sp, #80	; 0x50
    ret = STM32Fs_GetNumberFiles(dump_dir_path, &nbr_dir, STM32FS_COUNT_DIRS);
 80020ca:	a804      	add	r0, sp, #16
 80020cc:	2202      	movs	r2, #2
    nbr_dir = 0;
 80020ce:	f841 6d44 	str.w	r6, [r1, #-68]!
    ret = STM32Fs_GetNumberFiles(dump_dir_path, &nbr_dir, STM32FS_COUNT_DIRS);
 80020d2:	f016 fdf3 	bl	8018cbc <STM32Fs_GetNumberFiles>
    if (ret == STM32FS_ERROR_DIR_NOT_FOUND)
 80020d6:	2809      	cmp	r0, #9
 80020d8:	d014      	beq.n	8002104 <MemoryDumpInit+0x24c>
    if (nbr_dir != 0)
 80020da:	9b03      	ldr	r3, [sp, #12]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0c6      	beq.n	800206e <MemoryDumpInit+0x1b6>
      UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Error. Number of found directories incorrect", CENTER_MODE);
 80020e0:	f017 fc30 	bl	8019944 <UTIL_LCD_GetFont>
 80020e4:	240e      	movs	r4, #14
 80020e6:	88c1      	ldrh	r1, [r0, #6]
 80020e8:	2301      	movs	r3, #1
 80020ea:	4630      	mov	r0, r6
 80020ec:	4a20      	ldr	r2, [pc, #128]	; (8002170 <MemoryDumpInit+0x2b8>)
 80020ee:	fb04 f101 	mul.w	r1, r4, r1
 80020f2:	f017 fcf5 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
      DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 80020f6:	6e68      	ldr	r0, [r5, #100]	; 0x64
 80020f8:	f7ff fc02 	bl	8001900 <DISPLAY_Refresh>
      BSP_LED_On(LED_RED);
 80020fc:	2002      	movs	r0, #2
 80020fe:	f005 ffed 	bl	80080dc <BSP_LED_On>
 8002102:	e7fe      	b.n	8002102 <MemoryDumpInit+0x24a>
      UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Error. Directory 'dataset' doesn't exist", CENTER_MODE);
 8002104:	f017 fc1e 	bl	8019944 <UTIL_LCD_GetFont>
 8002108:	240e      	movs	r4, #14
 800210a:	88c1      	ldrh	r1, [r0, #6]
 800210c:	2301      	movs	r3, #1
 800210e:	4630      	mov	r0, r6
 8002110:	4a18      	ldr	r2, [pc, #96]	; (8002174 <MemoryDumpInit+0x2bc>)
 8002112:	fb04 f101 	mul.w	r1, r4, r1
 8002116:	f017 fce3 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
      DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 800211a:	6e68      	ldr	r0, [r5, #100]	; 0x64
 800211c:	f7ff fbf0 	bl	8001900 <DISPLAY_Refresh>
      BSP_LED_On(LED_RED);
 8002120:	2002      	movs	r0, #2
 8002122:	f005 ffdb 	bl	80080dc <BSP_LED_On>
 8002126:	e7fe      	b.n	8002126 <MemoryDumpInit+0x26e>
      Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_COLORBAR;
 8002128:	2302      	movs	r3, #2
      CAMERA_Init(App_Cxt_Ptr->Camera_ContextPtr);
 800212a:	6de8      	ldr	r0, [r5, #92]	; 0x5c
      Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_COLORBAR;
 800212c:	7123      	strb	r3, [r4, #4]
      CAMERA_Init(App_Cxt_Ptr->Camera_ContextPtr);
 800212e:	f7ff f963 	bl	80013f8 <CAMERA_Init>
      CAMERA_Set_TestBar_Mode(App_Cxt_Ptr->Camera_ContextPtr);
 8002132:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 8002134:	f7ff fa3e 	bl	80015b4 <CAMERA_Set_TestBar_Mode>
      break;
 8002138:	e75f      	b.n	8001ffa <MemoryDumpInit+0x142>
      Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_LIVE;
 800213a:	2301      	movs	r3, #1
 800213c:	7123      	strb	r3, [r4, #4]
      break;
 800213e:	e75c      	b.n	8001ffa <MemoryDumpInit+0x142>
 8002140:	0801ff20 	.word	0x0801ff20
 8002144:	08020248 	.word	0x08020248
 8002148:	08020198 	.word	0x08020198
 800214c:	08020260 	.word	0x08020260
 8002150:	080208bc 	.word	0x080208bc
 8002154:	080208c8 	.word	0x080208c8
 8002158:	080208d8 	.word	0x080208d8
 800215c:	d0d31d80 	.word	0xd0d31d80
 8002160:	080201f8 	.word	0x080201f8
 8002164:	48021800 	.word	0x48021800
 8002168:	0802027c 	.word	0x0802027c
 800216c:	240027e0 	.word	0x240027e0
 8002170:	080202b8 	.word	0x080202b8
 8002174:	0802028c 	.word	0x0802028c

08002178 <OnBoardValidInit>:
{
 8002178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800217c:	4605      	mov	r5, r0
 800217e:	b095      	sub	sp, #84	; 0x54
static void DisplayIntroMessage(TestContext_TypeDef *Test_Context_Ptr)
{
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
  static const uint16_t margin = 15; /* margin for text in pixels*/

  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8002180:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 8002184:	f8d5 8b7c 	ldr.w	r8, [r5, #2940]	; 0xb7c
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8002188:	f017 fbe4 	bl	8019954 <UTIL_LCD_Clear>
  UTIL_LCD_DrawRect(200, 10, 400, 50, UTIL_LCD_COLOR_WHITE);
 800218c:	f04f 30ff 	mov.w	r0, #4294967295
 8002190:	2332      	movs	r3, #50	; 0x32
 8002192:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002196:	210a      	movs	r1, #10
 8002198:	9000      	str	r0, [sp, #0]
 800219a:	20c8      	movs	r0, #200	; 0xc8
 800219c:	f017 fd80 	bl	8019ca0 <UTIL_LCD_DrawRect>
  UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"Onboard Validation", CENTER_MODE);
 80021a0:	f017 fbd0 	bl	8019944 <UTIL_LCD_GetFont>
 80021a4:	2301      	movs	r3, #1
 80021a6:	88c1      	ldrh	r1, [r0, #6]
 80021a8:	2000      	movs	r0, #0
 80021aa:	4aa4      	ldr	r2, [pc, #656]	; (800243c <OnBoardValidInit+0x2c4>)
 80021ac:	f017 fc98 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>

  UTIL_LCD_DisplayStringAt(margin, LINE(4), (uint8_t *)"Onboard validation will look for a directory", LEFT_MODE);
 80021b0:	f017 fbc8 	bl	8019944 <UTIL_LCD_GetFont>
 80021b4:	88c1      	ldrh	r1, [r0, #6]
 80021b6:	2303      	movs	r3, #3
 80021b8:	4aa1      	ldr	r2, [pc, #644]	; (8002440 <OnBoardValidInit+0x2c8>)
 80021ba:	0089      	lsls	r1, r1, #2
 80021bc:	200f      	movs	r0, #15
 80021be:	f017 fc8f 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(margin, LINE(5), (uint8_t *)"named 'onboard_valid_dataset_vga or _qvga'", LEFT_MODE);
 80021c2:	f017 fbbf 	bl	8019944 <UTIL_LCD_GetFont>
 80021c6:	88c1      	ldrh	r1, [r0, #6]
 80021c8:	2303      	movs	r3, #3
 80021ca:	4a9e      	ldr	r2, [pc, #632]	; (8002444 <OnBoardValidInit+0x2cc>)
 80021cc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80021d0:	200f      	movs	r0, #15
 80021d2:	f017 fc85 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(margin, LINE(6), (uint8_t *)"at the root of the SDCard.", LEFT_MODE);
 80021d6:	f017 fbb5 	bl	8019944 <UTIL_LCD_GetFont>
 80021da:	88c1      	ldrh	r1, [r0, #6]
 80021dc:	2303      	movs	r3, #3
 80021de:	4a9a      	ldr	r2, [pc, #616]	; (8002448 <OnBoardValidInit+0x2d0>)
 80021e0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80021e4:	200f      	movs	r0, #15
 80021e6:	0049      	lsls	r1, r1, #1
 80021e8:	f017 fc7a 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(margin, LINE(7), (uint8_t *)"This directory should contain one directory", LEFT_MODE);
 80021ec:	f017 fbaa 	bl	8019944 <UTIL_LCD_GetFont>
 80021f0:	88c1      	ldrh	r1, [r0, #6]
 80021f2:	2303      	movs	r3, #3
 80021f4:	4a95      	ldr	r2, [pc, #596]	; (800244c <OnBoardValidInit+0x2d4>)
 80021f6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80021fa:	200f      	movs	r0, #15
 80021fc:	f017 fc70 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(margin, LINE(8), (uint8_t *)"per class containing images in BPM 16 bpp", LEFT_MODE);
 8002200:	f017 fba0 	bl	8019944 <UTIL_LCD_GetFont>
 8002204:	2303      	movs	r3, #3
 8002206:	88c1      	ldrh	r1, [r0, #6]
 8002208:	200f      	movs	r0, #15
 800220a:	4a91      	ldr	r2, [pc, #580]	; (8002450 <OnBoardValidInit+0x2d8>)
 800220c:	4099      	lsls	r1, r3
 800220e:	f017 fc67 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(margin, LINE(9), (uint8_t *)"format.", LEFT_MODE);
 8002212:	f017 fb97 	bl	8019944 <UTIL_LCD_GetFont>
 8002216:	88c1      	ldrh	r1, [r0, #6]
 8002218:	2303      	movs	r3, #3
 800221a:	4a8e      	ldr	r2, [pc, #568]	; (8002454 <OnBoardValidInit+0x2dc>)
 800221c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8002220:	200f      	movs	r0, #15
 8002222:	f017 fc5d 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>

  UTIL_LCD_DisplayStringAt(margin, LINE(12), (uint8_t *)"Please insert the SDCard now,", LEFT_MODE);
 8002226:	f017 fb8d 	bl	8019944 <UTIL_LCD_GetFont>
 800222a:	88c1      	ldrh	r1, [r0, #6]
 800222c:	2303      	movs	r3, #3
 800222e:	4a8a      	ldr	r2, [pc, #552]	; (8002458 <OnBoardValidInit+0x2e0>)
 8002230:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8002234:	200f      	movs	r0, #15
 8002236:	0089      	lsls	r1, r1, #2
 8002238:	f017 fc52 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(margin, LINE(13), (uint8_t *)"then press the WAKE-UP button to get started", LEFT_MODE);
 800223c:	f017 fb82 	bl	8019944 <UTIL_LCD_GetFont>
 8002240:	88c1      	ldrh	r1, [r0, #6]
 8002242:	2303      	movs	r3, #3
 8002244:	4a85      	ldr	r2, [pc, #532]	; (800245c <OnBoardValidInit+0x2e4>)
 8002246:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 800224a:	200f      	movs	r0, #15
 800224c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8002250:	f017 fc46 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>

  DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8002254:	f8d8 0064 	ldr.w	r0, [r8, #100]	; 0x64
 8002258:	f7ff fb52 	bl	8001900 <DISPLAY_Refresh>
 800225c:	e002      	b.n	8002264 <OnBoardValidInit+0xec>

  /* Wait for button input */
  while ((Test_Context_Ptr->UartContext.uart_cmd_ongoing==0) && (BSP_PB_GetState(BUTTON_WAKEUP) == RESET))
 800225e:	f005 ffb7 	bl	80081d0 <BSP_PB_GetState>
 8002262:	b920      	cbnz	r0, 800226e <OnBoardValidInit+0xf6>
 8002264:	f8d5 3aa0 	ldr.w	r3, [r5, #2720]	; 0xaa0
 8002268:	4618      	mov	r0, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0f7      	beq.n	800225e <OnBoardValidInit+0xe6>
  sd_error = BSP_SD_Init(0);
 800226e:	2000      	movs	r0, #0
 8002270:	f008 f886 	bl	800a380 <BSP_SD_Init>
  if (sd_error != BSP_ERROR_NONE)
 8002274:	b2c7      	uxtb	r7, r0
 8002276:	b197      	cbz	r7, 800229e <OnBoardValidInit+0x126>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Error. SD Card not detected", CENTER_MODE);
 8002278:	f017 fb64 	bl	8019944 <UTIL_LCD_GetFont>
 800227c:	88c1      	ldrh	r1, [r0, #6]
 800227e:	2301      	movs	r3, #1
 8002280:	4a77      	ldr	r2, [pc, #476]	; (8002460 <OnBoardValidInit+0x2e8>)
 8002282:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8002286:	2000      	movs	r0, #0
 8002288:	4099      	lsls	r1, r3
 800228a:	f017 fc29 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 800228e:	f8d8 0064 	ldr.w	r0, [r8, #100]	; 0x64
 8002292:	f7ff fb35 	bl	8001900 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 8002296:	2002      	movs	r0, #2
 8002298:	f005 ff20 	bl	80080dc <BSP_LED_On>
 800229c:	e7fe      	b.n	800229c <OnBoardValidInit+0x124>
  strcpy(valid_dir_path, Test_Context_Ptr->ValidationContext.class_path);
 800229e:	f10d 0a10 	add.w	sl, sp, #16
 80022a2:	f505 7970 	add.w	r9, r5, #960	; 0x3c0
  STM32Fs_Init();
 80022a6:	f016 fcf1 	bl	8018c8c <STM32Fs_Init>
  nbr_dir = 0;
 80022aa:	9703      	str	r7, [sp, #12]
  strcpy(valid_dir_path, Test_Context_Ptr->ValidationContext.class_path);
 80022ac:	4649      	mov	r1, r9
 80022ae:	4650      	mov	r0, sl
 80022b0:	f01c f93a 	bl	801e528 <stpcpy>
  valid_dir_path[strlen(valid_dir_path)-1]='\0';/*so to remove the '/' at the end of the string*/
 80022b4:	a914      	add	r1, sp, #80	; 0x50
 80022b6:	eba0 030a 	sub.w	r3, r0, sl
  ret = STM32Fs_GetNumberFiles(valid_dir_path, &nbr_dir, STM32FS_COUNT_DIRS);
 80022ba:	2202      	movs	r2, #2
 80022bc:	4650      	mov	r0, sl
  valid_dir_path[strlen(valid_dir_path)-1]='\0';/*so to remove the '/' at the end of the string*/
 80022be:	440b      	add	r3, r1
  ret = STM32Fs_GetNumberFiles(valid_dir_path, &nbr_dir, STM32FS_COUNT_DIRS);
 80022c0:	a903      	add	r1, sp, #12
  valid_dir_path[strlen(valid_dir_path)-1]='\0';/*so to remove the '/' at the end of the string*/
 80022c2:	f803 7c41 	strb.w	r7, [r3, #-65]
  ret = STM32Fs_GetNumberFiles(valid_dir_path, &nbr_dir, STM32FS_COUNT_DIRS);
 80022c6:	f016 fcf9 	bl	8018cbc <STM32Fs_GetNumberFiles>
  if (ret == STM32FS_ERROR_DIR_NOT_FOUND)
 80022ca:	2809      	cmp	r0, #9
 80022cc:	d015      	beq.n	80022fa <OnBoardValidInit+0x182>
  if (nbr_dir != AI_NETWORK_OUT_1_SIZE)
 80022ce:	9b03      	ldr	r3, [sp, #12]
 80022d0:	2b12      	cmp	r3, #18
 80022d2:	d025      	beq.n	8002320 <OnBoardValidInit+0x1a8>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Error. Number of found directories incorrect", CENTER_MODE);
 80022d4:	f017 fb36 	bl	8019944 <UTIL_LCD_GetFont>
 80022d8:	88c1      	ldrh	r1, [r0, #6]
 80022da:	2301      	movs	r3, #1
 80022dc:	4638      	mov	r0, r7
 80022de:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80022e2:	4a60      	ldr	r2, [pc, #384]	; (8002464 <OnBoardValidInit+0x2ec>)
 80022e4:	4099      	lsls	r1, r3
 80022e6:	f017 fbfb 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 80022ea:	f8d8 0064 	ldr.w	r0, [r8, #100]	; 0x64
 80022ee:	f7ff fb07 	bl	8001900 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 80022f2:	2002      	movs	r0, #2
 80022f4:	f005 fef2 	bl	80080dc <BSP_LED_On>
 80022f8:	e7fe      	b.n	80022f8 <OnBoardValidInit+0x180>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Error. Directory 'onboard_valid_dataset' doesn't exist", CENTER_MODE);
 80022fa:	f017 fb23 	bl	8019944 <UTIL_LCD_GetFont>
 80022fe:	240e      	movs	r4, #14
 8002300:	88c1      	ldrh	r1, [r0, #6]
 8002302:	2301      	movs	r3, #1
 8002304:	4638      	mov	r0, r7
 8002306:	4a58      	ldr	r2, [pc, #352]	; (8002468 <OnBoardValidInit+0x2f0>)
 8002308:	fb04 f101 	mul.w	r1, r4, r1
 800230c:	f017 fbe8 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8002310:	f8d8 0064 	ldr.w	r0, [r8, #100]	; 0x64
 8002314:	f7ff faf4 	bl	8001900 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 8002318:	2002      	movs	r0, #2
 800231a:	f005 fedf 	bl	80080dc <BSP_LED_On>
 800231e:	e7fe      	b.n	800231e <OnBoardValidInit+0x1a6>
  sprintf(tmp_msg, "List of missclassified files:\n");
 8002320:	4e52      	ldr	r6, [pc, #328]	; (800246c <OnBoardValidInit+0x2f4>)
  BSP_LED_On(LED_GREEN);
 8002322:	4638      	mov	r0, r7
 8002324:	f005 feda 	bl	80080dc <BSP_LED_On>
  sprintf(tmp_msg, "List of missclassified files:\n");
 8002328:	4c51      	ldr	r4, [pc, #324]	; (8002470 <OnBoardValidInit+0x2f8>)
 800232a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800232c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800232e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002332:	c407      	stmia	r4!, {r0, r1, r2}
 8002334:	0c1e      	lsrs	r6, r3, #16
 8002336:	f824 3b02 	strh.w	r3, [r4], #2
 800233a:	4621      	mov	r1, r4
  if (STM32Fs_WriteTextToFile("missclassified.txt", tmp_msg, STM32FS_CREATE_NEW_FILE) != STM32FS_ERROR_NONE)
 800233c:	463a      	mov	r2, r7
 800233e:	484d      	ldr	r0, [pc, #308]	; (8002474 <OnBoardValidInit+0x2fc>)
  sprintf(tmp_msg, "List of missclassified files:\n");
 8002340:	f801 691e 	strb.w	r6, [r1], #-30
  if (STM32Fs_WriteTextToFile("missclassified.txt", tmp_msg, STM32FS_CREATE_NEW_FILE) != STM32FS_ERROR_NONE)
 8002344:	f017 f8c4 	bl	80194d0 <STM32Fs_WriteTextToFile>
 8002348:	4683      	mov	fp, r0
 800234a:	b190      	cbz	r0, 8002372 <OnBoardValidInit+0x1fa>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Error. Unable to create the missclassified file", CENTER_MODE);
 800234c:	f017 fafa 	bl	8019944 <UTIL_LCD_GetFont>
 8002350:	240e      	movs	r4, #14
 8002352:	88c1      	ldrh	r1, [r0, #6]
 8002354:	2301      	movs	r3, #1
 8002356:	4638      	mov	r0, r7
 8002358:	4a47      	ldr	r2, [pc, #284]	; (8002478 <OnBoardValidInit+0x300>)
 800235a:	fb04 f101 	mul.w	r1, r4, r1
 800235e:	f017 fbbf 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8002362:	f8d8 0064 	ldr.w	r0, [r8, #100]	; 0x64
 8002366:	f7ff facb 	bl	8001900 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 800236a:	2002      	movs	r0, #2
 800236c:	f005 feb6 	bl	80080dc <BSP_LED_On>
 8002370:	e7fe      	b.n	8002370 <OnBoardValidInit+0x1f8>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8002372:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
  STM32Fs_OpenDir(valid_dir_path, &Test_Context_Ptr->ValidationContext.dataset_dir);
 8002376:	f505 7692 	add.w	r6, r5, #292	; 0x124
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 800237a:	f017 faeb 	bl	8019954 <UTIL_LCD_Clear>
  UTIL_LCD_SetFont(&Font20);
 800237e:	483f      	ldr	r0, [pc, #252]	; (800247c <OnBoardValidInit+0x304>)
 8002380:	f017 fad8 	bl	8019934 <UTIL_LCD_SetFont>
  sprintf(tmp_msg, "Found %d classes", (unsigned int)nbr_dir);
 8002384:	9a03      	ldr	r2, [sp, #12]
 8002386:	493e      	ldr	r1, [pc, #248]	; (8002480 <OnBoardValidInit+0x308>)
 8002388:	f1a4 001e 	sub.w	r0, r4, #30
 800238c:	f01c f8ac 	bl	801e4e8 <siprintf>
  UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)tmp_msg, CENTER_MODE);
 8002390:	f017 fad8 	bl	8019944 <UTIL_LCD_GetFont>
 8002394:	f1a4 021e 	sub.w	r2, r4, #30
 8002398:	88c1      	ldrh	r1, [r0, #6]
 800239a:	2301      	movs	r3, #1
 800239c:	4658      	mov	r0, fp
 800239e:	f017 fb9f 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
  STM32Fs_OpenDir(valid_dir_path, &Test_Context_Ptr->ValidationContext.dataset_dir);
 80023a2:	4631      	mov	r1, r6
 80023a4:	4650      	mov	r0, sl
 80023a6:	f016 fcc5 	bl	8018d34 <STM32Fs_OpenDir>
  if(STM32Fs_GetNextDir(&Test_Context_Ptr->ValidationContext.dataset_dir, &Test_Context_Ptr->ValidationContext.fno) != STM32FS_ERROR_NONE)
 80023aa:	4630      	mov	r0, r6
 80023ac:	f505 71ac 	add.w	r1, r5, #344	; 0x158
 80023b0:	f016 fcd4 	bl	8018d5c <STM32Fs_GetNextDir>
 80023b4:	bb28      	cbnz	r0, 8002402 <OnBoardValidInit+0x28a>
  for (size_t j = 0; j < AI_NET_OUTPUT_SIZE; j++)
 80023b6:	4604      	mov	r4, r0
  Test_Context_Ptr->ValidationContext.class_index = FindClassIndexFromString(Test_Context_Ptr->ValidationContext.fno.fname);
 80023b8:	f505 76b7 	add.w	r6, r5, #366	; 0x16e
 80023bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002488 <OnBoardValidInit+0x310>
 80023c0:	e002      	b.n	80023c8 <OnBoardValidInit+0x250>
  for (size_t j = 0; j < AI_NET_OUTPUT_SIZE; j++)
 80023c2:	3401      	adds	r4, #1
 80023c4:	2c12      	cmp	r4, #18
 80023c6:	d01d      	beq.n	8002404 <OnBoardValidInit+0x28c>
    if (strcmp(className, NN_OUTPUT_CLASS_LIST[j]) == 0)
 80023c8:	f85a 1b04 	ldr.w	r1, [sl], #4
 80023cc:	4630      	mov	r0, r6
 80023ce:	f7fd ff87 	bl	80002e0 <strcmp>
 80023d2:	4607      	mov	r7, r0
 80023d4:	2800      	cmp	r0, #0
 80023d6:	d1f4      	bne.n	80023c2 <OnBoardValidInit+0x24a>
  strcpy(Test_Context_Ptr->ValidationContext.tmp_class_path, ""); //string "null"
 80023d8:	f505 6880 	add.w	r8, r5, #1024	; 0x400
  strcpy(Test_Context_Ptr->ValidationContext.tmp_class_path, Test_Context_Ptr->ValidationContext.class_path );
 80023dc:	4649      	mov	r1, r9
  Test_Context_Ptr->ValidationContext.class_index = FindClassIndexFromString(Test_Context_Ptr->ValidationContext.fno.fname);
 80023de:	f8c5 43bc 	str.w	r4, [r5, #956]	; 0x3bc
  strcpy(Test_Context_Ptr->ValidationContext.tmp_class_path, Test_Context_Ptr->ValidationContext.class_path );
 80023e2:	4640      	mov	r0, r8
 80023e4:	f01c f8a0 	bl	801e528 <stpcpy>
  strcat(Test_Context_Ptr->ValidationContext.tmp_class_path, Test_Context_Ptr->ValidationContext.fno.fname);
 80023e8:	4631      	mov	r1, r6
 80023ea:	f01c f8a6 	bl	801e53a <strcpy>
  STM32Fs_OpenDir(Test_Context_Ptr->ValidationContext.tmp_class_path, &Test_Context_Ptr->ValidationContext.class_dir);
 80023ee:	f505 711c 	add.w	r1, r5, #624	; 0x270
 80023f2:	4640      	mov	r0, r8
 80023f4:	f016 fc9e 	bl	8018d34 <STM32Fs_OpenDir>
  Test_Context_Ptr->ValidationContext.validation_completed = 0;
 80023f8:	f8c5 7440 	str.w	r7, [r5, #1088]	; 0x440
}
 80023fc:	b015      	add	sp, #84	; 0x54
 80023fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002402:	e7fe      	b.n	8002402 <OnBoardValidInit+0x28a>
  Test_Context_Ptr->ValidationContext.class_index = FindClassIndexFromString(Test_Context_Ptr->ValidationContext.fno.fname);
 8002404:	f04f 33ff 	mov.w	r3, #4294967295
    sprintf(tmp_msg, "Error, class %s doesn't exists", Test_Context_Ptr->ValidationContext.fno.fname);
 8002408:	4632      	mov	r2, r6
 800240a:	491e      	ldr	r1, [pc, #120]	; (8002484 <OnBoardValidInit+0x30c>)
  Test_Context_Ptr->ValidationContext.class_index = FindClassIndexFromString(Test_Context_Ptr->ValidationContext.fno.fname);
 800240c:	f8c5 33bc 	str.w	r3, [r5, #956]	; 0x3bc
    sprintf(tmp_msg, "Error, class %s doesn't exists", Test_Context_Ptr->ValidationContext.fno.fname);
 8002410:	4817      	ldr	r0, [pc, #92]	; (8002470 <OnBoardValidInit+0x2f8>)
 8002412:	f01c f869 	bl	801e4e8 <siprintf>
    UTIL_LCD_DisplayStringAt(0, LINE(3), (uint8_t *)tmp_msg, CENTER_MODE);
 8002416:	f017 fa95 	bl	8019944 <UTIL_LCD_GetFont>
 800241a:	88c1      	ldrh	r1, [r0, #6]
 800241c:	2301      	movs	r3, #1
 800241e:	4a14      	ldr	r2, [pc, #80]	; (8002470 <OnBoardValidInit+0x2f8>)
 8002420:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8002424:	2000      	movs	r0, #0
 8002426:	f017 fb5b 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 800242a:	f8d8 0064 	ldr.w	r0, [r8, #100]	; 0x64
 800242e:	f7ff fa67 	bl	8001900 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 8002432:	2002      	movs	r0, #2
 8002434:	f005 fe52 	bl	80080dc <BSP_LED_On>
 8002438:	e7fe      	b.n	8002438 <OnBoardValidInit+0x2c0>
 800243a:	bf00      	nop
 800243c:	080202e8 	.word	0x080202e8
 8002440:	080202fc 	.word	0x080202fc
 8002444:	0802032c 	.word	0x0802032c
 8002448:	08020358 	.word	0x08020358
 800244c:	08020374 	.word	0x08020374
 8002450:	080203a0 	.word	0x080203a0
 8002454:	080203cc 	.word	0x080203cc
 8002458:	080203d4 	.word	0x080203d4
 800245c:	080203f4 	.word	0x080203f4
 8002460:	080201f8 	.word	0x080201f8
 8002464:	080202b8 	.word	0x080202b8
 8002468:	08020424 	.word	0x08020424
 800246c:	0802045c 	.word	0x0802045c
 8002470:	24002e30 	.word	0x24002e30
 8002474:	0802047c 	.word	0x0802047c
 8002478:	08020490 	.word	0x08020490
 800247c:	240025f0 	.word	0x240025f0
 8002480:	080204c0 	.word	0x080204c0
 8002484:	080204d4 	.word	0x080204d4
 8002488:	24000004 	.word	0x24000004

0800248c <UartCmd_Upload_NonRegression_Report>:
{
 800248c:	b510      	push	{r4, lr}
 800248e:	4604      	mov	r4, r0
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002490:	2202      	movs	r2, #2
 8002492:	2180      	movs	r1, #128	; 0x80
 8002494:	480e      	ldr	r0, [pc, #56]	; (80024d0 <UartCmd_Upload_NonRegression_Report+0x44>)
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002496:	f604 24bc 	addw	r4, r4, #2748	; 0xabc
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800249a:	f002 f919 	bl	80046d0 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 800249e:	2248      	movs	r2, #72	; 0x48
 80024a0:	490b      	ldr	r1, [pc, #44]	; (80024d0 <UartCmd_Upload_NonRegression_Report+0x44>)
 80024a2:	4620      	mov	r0, r4
 80024a4:	f00f fce4 	bl	8011e70 <HAL_UART_Transmit_DMA>
 80024a8:	b978      	cbnz	r0, 80024ca <UartCmd_Upload_NonRegression_Report+0x3e>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 80024aa:	4620      	mov	r0, r4
 80024ac:	f00f ff26 	bl	80122fc <HAL_UART_GetState>
 80024b0:	2820      	cmp	r0, #32
 80024b2:	d1fa      	bne.n	80024aa <UartCmd_Upload_NonRegression_Report+0x1e>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 80024b4:	4620      	mov	r0, r4
 80024b6:	220a      	movs	r2, #10
 80024b8:	4906      	ldr	r1, [pc, #24]	; (80024d4 <UartCmd_Upload_NonRegression_Report+0x48>)
 80024ba:	f00f fd2f 	bl	8011f1c <HAL_UART_Receive_DMA>
 80024be:	b900      	cbnz	r0, 80024c2 <UartCmd_Upload_NonRegression_Report+0x36>
}
 80024c0:	bd10      	pop	{r4, pc}
 80024c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80024c6:	f002 b96f 	b.w	80047a8 <Error_Handler>
      Error_Handler();
 80024ca:	f002 f96d 	bl	80047a8 <Error_Handler>
 80024ce:	e7ec      	b.n	80024aa <UartCmd_Upload_NonRegression_Report+0x1e>
 80024d0:	d0d31d80 	.word	0xd0d31d80
 80024d4:	240027e0 	.word	0x240027e0

080024d8 <UartCmd_Upload_Validation_Report>:
{
 80024d8:	b510      	push	{r4, lr}
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 80024da:	f600 24bc 	addw	r4, r0, #2748	; 0xabc
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80024de:	2202      	movs	r2, #2
 80024e0:	4915      	ldr	r1, [pc, #84]	; (8002538 <UartCmd_Upload_Validation_Report+0x60>)
 80024e2:	4816      	ldr	r0, [pc, #88]	; (800253c <UartCmd_Upload_Validation_Report+0x64>)
 80024e4:	f002 f8f4 	bl	80046d0 <UTILS_DCache_Coherency_Maintenance>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 80024e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024ec:	4620      	mov	r0, r4
 80024ee:	4913      	ldr	r1, [pc, #76]	; (800253c <UartCmd_Upload_Validation_Report+0x64>)
 80024f0:	f00f fcbe 	bl	8011e70 <HAL_UART_Transmit_DMA>
 80024f4:	b108      	cbz	r0, 80024fa <UartCmd_Upload_Validation_Report+0x22>
        Error_Handler();
 80024f6:	f002 f957 	bl	80047a8 <Error_Handler>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 80024fa:	4620      	mov	r0, r4
 80024fc:	f00f fefe 	bl	80122fc <HAL_UART_GetState>
 8002500:	2820      	cmp	r0, #32
 8002502:	d1fa      	bne.n	80024fa <UartCmd_Upload_Validation_Report+0x22>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), TxDataTransferSize%0xFFFF)!= HAL_OK)
 8002504:	f64f 2241 	movw	r2, #64065	; 0xfa41
 8002508:	490d      	ldr	r1, [pc, #52]	; (8002540 <UartCmd_Upload_Validation_Report+0x68>)
 800250a:	4620      	mov	r0, r4
 800250c:	f00f fcb0 	bl	8011e70 <HAL_UART_Transmit_DMA>
 8002510:	b978      	cbnz	r0, 8002532 <UartCmd_Upload_Validation_Report+0x5a>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002512:	4620      	mov	r0, r4
 8002514:	f00f fef2 	bl	80122fc <HAL_UART_GetState>
 8002518:	2820      	cmp	r0, #32
 800251a:	d1fa      	bne.n	8002512 <UartCmd_Upload_Validation_Report+0x3a>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 800251c:	4620      	mov	r0, r4
 800251e:	220a      	movs	r2, #10
 8002520:	4908      	ldr	r1, [pc, #32]	; (8002544 <UartCmd_Upload_Validation_Report+0x6c>)
 8002522:	f00f fcfb 	bl	8011f1c <HAL_UART_Receive_DMA>
 8002526:	b900      	cbnz	r0, 800252a <UartCmd_Upload_Validation_Report+0x52>
}
 8002528:	bd10      	pop	{r4, pc}
 800252a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800252e:	f002 b93b 	b.w	80047a8 <Error_Handler>
        Error_Handler();
 8002532:	f002 f939 	bl	80047a8 <Error_Handler>
 8002536:	e7ec      	b.n	8002512 <UartCmd_Upload_Validation_Report+0x3a>
 8002538:	0001fa80 	.word	0x0001fa80
 800253c:	d0d31e00 	.word	0xd0d31e00
 8002540:	d0d41dff 	.word	0xd0d41dff
 8002544:	240027e0 	.word	0x240027e0

08002548 <UartCmd_Upload_Valid_Output>:
 8002548:	f7ff bfc6 	b.w	80024d8 <UartCmd_Upload_Validation_Report>

0800254c <UartCmd_Upload_Timing_Report>:
{
 800254c:	b510      	push	{r4, lr}
 800254e:	4604      	mov	r4, r0
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002550:	2202      	movs	r2, #2
 8002552:	2180      	movs	r1, #128	; 0x80
 8002554:	480e      	ldr	r0, [pc, #56]	; (8002590 <UartCmd_Upload_Timing_Report+0x44>)
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002556:	f604 24bc 	addw	r4, r4, #2748	; 0xabc
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800255a:	f002 f8b9 	bl	80046d0 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 800255e:	2214      	movs	r2, #20
 8002560:	490b      	ldr	r1, [pc, #44]	; (8002590 <UartCmd_Upload_Timing_Report+0x44>)
 8002562:	4620      	mov	r0, r4
 8002564:	f00f fc84 	bl	8011e70 <HAL_UART_Transmit_DMA>
 8002568:	b978      	cbnz	r0, 800258a <UartCmd_Upload_Timing_Report+0x3e>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 800256a:	4620      	mov	r0, r4
 800256c:	f00f fec6 	bl	80122fc <HAL_UART_GetState>
 8002570:	2820      	cmp	r0, #32
 8002572:	d1fa      	bne.n	800256a <UartCmd_Upload_Timing_Report+0x1e>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002574:	4620      	mov	r0, r4
 8002576:	220a      	movs	r2, #10
 8002578:	4906      	ldr	r1, [pc, #24]	; (8002594 <UartCmd_Upload_Timing_Report+0x48>)
 800257a:	f00f fccf 	bl	8011f1c <HAL_UART_Receive_DMA>
 800257e:	b900      	cbnz	r0, 8002582 <UartCmd_Upload_Timing_Report+0x36>
}
 8002580:	bd10      	pop	{r4, pc}
 8002582:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8002586:	f002 b90f 	b.w	80047a8 <Error_Handler>
      Error_Handler();
 800258a:	f002 f90d 	bl	80047a8 <Error_Handler>
 800258e:	e7ec      	b.n	800256a <UartCmd_Upload_Timing_Report+0x1e>
 8002590:	d0fd3280 	.word	0xd0fd3280
 8002594:	240027e0 	.word	0x240027e0

08002598 <UartCmd_Get_Dump_Output_Data_Size>:
{
 8002598:	b538      	push	{r3, r4, r5, lr}
  *((uint16_t*)aTxBuffer) = AI_NET_OUTPUT_SIZE_BYTES;
 800259a:	4d12      	ldr	r5, [pc, #72]	; (80025e4 <UartCmd_Get_Dump_Output_Data_Size+0x4c>)
 800259c:	2348      	movs	r3, #72	; 0x48
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 800259e:	f600 24bc 	addw	r4, r0, #2748	; 0xabc
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80025a2:	2202      	movs	r2, #2
 80025a4:	4628      	mov	r0, r5
 80025a6:	f44f 61a4 	mov.w	r1, #1312	; 0x520
  *((uint16_t*)aTxBuffer) = AI_NET_OUTPUT_SIZE_BYTES;
 80025aa:	802b      	strh	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80025ac:	f002 f890 	bl	80046d0 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80025b0:	4629      	mov	r1, r5
 80025b2:	4620      	mov	r0, r4
 80025b4:	2202      	movs	r2, #2
 80025b6:	f00f fc5b 	bl	8011e70 <HAL_UART_Transmit_DMA>
 80025ba:	b978      	cbnz	r0, 80025dc <UartCmd_Get_Dump_Output_Data_Size+0x44>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 80025bc:	4620      	mov	r0, r4
 80025be:	f00f fe9d 	bl	80122fc <HAL_UART_GetState>
 80025c2:	2820      	cmp	r0, #32
 80025c4:	d1fa      	bne.n	80025bc <UartCmd_Get_Dump_Output_Data_Size+0x24>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 80025c6:	4620      	mov	r0, r4
 80025c8:	220a      	movs	r2, #10
 80025ca:	4907      	ldr	r1, [pc, #28]	; (80025e8 <UartCmd_Get_Dump_Output_Data_Size+0x50>)
 80025cc:	f00f fca6 	bl	8011f1c <HAL_UART_Receive_DMA>
 80025d0:	b900      	cbnz	r0, 80025d4 <UartCmd_Get_Dump_Output_Data_Size+0x3c>
}
 80025d2:	bd38      	pop	{r3, r4, r5, pc}
 80025d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 80025d8:	f002 b8e6 	b.w	80047a8 <Error_Handler>
      Error_Handler();
 80025dc:	f002 f8e4 	bl	80047a8 <Error_Handler>
 80025e0:	e7ec      	b.n	80025bc <UartCmd_Get_Dump_Output_Data_Size+0x24>
 80025e2:	bf00      	nop
 80025e4:	24002800 	.word	0x24002800
 80025e8:	240027e0 	.word	0x240027e0

080025ec <UartCmd_Get_Validation_Final_Accuracy>:
{
 80025ec:	b538      	push	{r3, r4, r5, lr}
  *((float*)aTxBuffer) = Test_Context_Ptr->ValidationContext.final_accuracy;
 80025ee:	f200 4344 	addw	r3, r0, #1092	; 0x444
 80025f2:	4d12      	ldr	r5, [pc, #72]	; (800263c <UartCmd_Get_Validation_Final_Accuracy+0x50>)
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80025f4:	f600 24bc 	addw	r4, r0, #2748	; 0xabc
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80025f8:	2202      	movs	r2, #2
  *((float*)aTxBuffer) = Test_Context_Ptr->ValidationContext.final_accuracy;
 80025fa:	681b      	ldr	r3, [r3, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80025fc:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 8002600:	4628      	mov	r0, r5
  *((float*)aTxBuffer) = Test_Context_Ptr->ValidationContext.final_accuracy;
 8002602:	602b      	str	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002604:	f002 f864 	bl	80046d0 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002608:	4629      	mov	r1, r5
 800260a:	4620      	mov	r0, r4
 800260c:	2204      	movs	r2, #4
 800260e:	f00f fc2f 	bl	8011e70 <HAL_UART_Transmit_DMA>
 8002612:	b978      	cbnz	r0, 8002634 <UartCmd_Get_Validation_Final_Accuracy+0x48>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002614:	4620      	mov	r0, r4
 8002616:	f00f fe71 	bl	80122fc <HAL_UART_GetState>
 800261a:	2820      	cmp	r0, #32
 800261c:	d1fa      	bne.n	8002614 <UartCmd_Get_Validation_Final_Accuracy+0x28>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 800261e:	4620      	mov	r0, r4
 8002620:	220a      	movs	r2, #10
 8002622:	4907      	ldr	r1, [pc, #28]	; (8002640 <UartCmd_Get_Validation_Final_Accuracy+0x54>)
 8002624:	f00f fc7a 	bl	8011f1c <HAL_UART_Receive_DMA>
 8002628:	b900      	cbnz	r0, 800262c <UartCmd_Get_Validation_Final_Accuracy+0x40>
}
 800262a:	bd38      	pop	{r3, r4, r5, pc}
 800262c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8002630:	f002 b8ba 	b.w	80047a8 <Error_Handler>
      Error_Handler();
 8002634:	f002 f8b8 	bl	80047a8 <Error_Handler>
 8002638:	e7ec      	b.n	8002614 <UartCmd_Get_Validation_Final_Accuracy+0x28>
 800263a:	bf00      	nop
 800263c:	24002800 	.word	0x24002800
 8002640:	240027e0 	.word	0x240027e0

08002644 <UartCmd_Upload_Dump_Output_Data>:
 8002644:	b510      	push	{r4, lr}
 8002646:	4604      	mov	r4, r0
 8002648:	2202      	movs	r2, #2
 800264a:	2180      	movs	r1, #128	; 0x80
 800264c:	480e      	ldr	r0, [pc, #56]	; (8002688 <UartCmd_Upload_Dump_Output_Data+0x44>)
 800264e:	f604 24bc 	addw	r4, r4, #2748	; 0xabc
 8002652:	f002 f83d 	bl	80046d0 <UTILS_DCache_Coherency_Maintenance>
 8002656:	2248      	movs	r2, #72	; 0x48
 8002658:	490b      	ldr	r1, [pc, #44]	; (8002688 <UartCmd_Upload_Dump_Output_Data+0x44>)
 800265a:	4620      	mov	r0, r4
 800265c:	f00f fc08 	bl	8011e70 <HAL_UART_Transmit_DMA>
 8002660:	b978      	cbnz	r0, 8002682 <UartCmd_Upload_Dump_Output_Data+0x3e>
 8002662:	4620      	mov	r0, r4
 8002664:	f00f fe4a 	bl	80122fc <HAL_UART_GetState>
 8002668:	2820      	cmp	r0, #32
 800266a:	d1fa      	bne.n	8002662 <UartCmd_Upload_Dump_Output_Data+0x1e>
 800266c:	4620      	mov	r0, r4
 800266e:	220a      	movs	r2, #10
 8002670:	4906      	ldr	r1, [pc, #24]	; (800268c <UartCmd_Upload_Dump_Output_Data+0x48>)
 8002672:	f00f fc53 	bl	8011f1c <HAL_UART_Receive_DMA>
 8002676:	b900      	cbnz	r0, 800267a <UartCmd_Upload_Dump_Output_Data+0x36>
 8002678:	bd10      	pop	{r4, pc}
 800267a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800267e:	f002 b893 	b.w	80047a8 <Error_Handler>
 8002682:	f002 f891 	bl	80047a8 <Error_Handler>
 8002686:	e7ec      	b.n	8002662 <UartCmd_Upload_Dump_Output_Data+0x1e>
 8002688:	d0d31d80 	.word	0xd0d31d80
 800268c:	240027e0 	.word	0x240027e0

08002690 <UartCmd_Get_Valid_Output_Size>:
 8002690:	b538      	push	{r3, r4, r5, lr}
 8002692:	4d12      	ldr	r5, [pc, #72]	; (80026dc <UartCmd_Get_Valid_Output_Size+0x4c>)
 8002694:	f600 24bc 	addw	r4, r0, #2748	; 0xabc
 8002698:	4b11      	ldr	r3, [pc, #68]	; (80026e0 <UartCmd_Get_Valid_Output_Size+0x50>)
 800269a:	2202      	movs	r2, #2
 800269c:	4628      	mov	r0, r5
 800269e:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 80026a2:	602b      	str	r3, [r5, #0]
 80026a4:	f002 f814 	bl	80046d0 <UTILS_DCache_Coherency_Maintenance>
 80026a8:	4629      	mov	r1, r5
 80026aa:	4620      	mov	r0, r4
 80026ac:	2204      	movs	r2, #4
 80026ae:	f00f fbdf 	bl	8011e70 <HAL_UART_Transmit_DMA>
 80026b2:	b978      	cbnz	r0, 80026d4 <UartCmd_Get_Valid_Output_Size+0x44>
 80026b4:	4620      	mov	r0, r4
 80026b6:	f00f fe21 	bl	80122fc <HAL_UART_GetState>
 80026ba:	2820      	cmp	r0, #32
 80026bc:	d1fa      	bne.n	80026b4 <UartCmd_Get_Valid_Output_Size+0x24>
 80026be:	4620      	mov	r0, r4
 80026c0:	220a      	movs	r2, #10
 80026c2:	4908      	ldr	r1, [pc, #32]	; (80026e4 <UartCmd_Get_Valid_Output_Size+0x54>)
 80026c4:	f00f fc2a 	bl	8011f1c <HAL_UART_Receive_DMA>
 80026c8:	b900      	cbnz	r0, 80026cc <UartCmd_Get_Valid_Output_Size+0x3c>
 80026ca:	bd38      	pop	{r3, r4, r5, pc}
 80026cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80026d0:	f002 b86a 	b.w	80047a8 <Error_Handler>
 80026d4:	f002 f868 	bl	80047a8 <Error_Handler>
 80026d8:	e7ec      	b.n	80026b4 <UartCmd_Get_Valid_Output_Size+0x24>
 80026da:	bf00      	nop
 80026dc:	24002800 	.word	0x24002800
 80026e0:	0001fa40 	.word	0x0001fa40
 80026e4:	240027e0 	.word	0x240027e0

080026e8 <UartCmd_Get_NonRegression_Report_Size>:
{
 80026e8:	b538      	push	{r3, r4, r5, lr}
  *((uint32_t*)aTxBuffer) = AI_NET_OUTPUT_SIZE_BYTES;
 80026ea:	4d12      	ldr	r5, [pc, #72]	; (8002734 <UartCmd_Get_NonRegression_Report_Size+0x4c>)
 80026ec:	2348      	movs	r3, #72	; 0x48
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80026ee:	f600 24bc 	addw	r4, r0, #2748	; 0xabc
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80026f2:	2202      	movs	r2, #2
 80026f4:	4628      	mov	r0, r5
 80026f6:	f44f 61a4 	mov.w	r1, #1312	; 0x520
  *((uint32_t*)aTxBuffer) = AI_NET_OUTPUT_SIZE_BYTES;
 80026fa:	602b      	str	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80026fc:	f001 ffe8 	bl	80046d0 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002700:	4629      	mov	r1, r5
 8002702:	4620      	mov	r0, r4
 8002704:	2204      	movs	r2, #4
 8002706:	f00f fbb3 	bl	8011e70 <HAL_UART_Transmit_DMA>
 800270a:	b978      	cbnz	r0, 800272c <UartCmd_Get_NonRegression_Report_Size+0x44>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 800270c:	4620      	mov	r0, r4
 800270e:	f00f fdf5 	bl	80122fc <HAL_UART_GetState>
 8002712:	2820      	cmp	r0, #32
 8002714:	d1fa      	bne.n	800270c <UartCmd_Get_NonRegression_Report_Size+0x24>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002716:	4620      	mov	r0, r4
 8002718:	220a      	movs	r2, #10
 800271a:	4907      	ldr	r1, [pc, #28]	; (8002738 <UartCmd_Get_NonRegression_Report_Size+0x50>)
 800271c:	f00f fbfe 	bl	8011f1c <HAL_UART_Receive_DMA>
 8002720:	b900      	cbnz	r0, 8002724 <UartCmd_Get_NonRegression_Report_Size+0x3c>
}
 8002722:	bd38      	pop	{r3, r4, r5, pc}
 8002724:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8002728:	f002 b83e 	b.w	80047a8 <Error_Handler>
      Error_Handler();
 800272c:	f002 f83c 	bl	80047a8 <Error_Handler>
 8002730:	e7ec      	b.n	800270c <UartCmd_Get_NonRegression_Report_Size+0x24>
 8002732:	bf00      	nop
 8002734:	24002800 	.word	0x24002800
 8002738:	240027e0 	.word	0x240027e0

0800273c <UartCmd_Get_Validation_Report_Size>:
{
 800273c:	b538      	push	{r3, r4, r5, lr}
  *((uint32_t*)aTxBuffer) = AI_NET_OUTPUT_SIZE*AI_NET_OUTPUT_SIZE_BYTES*NUM_FILE_PER_DIR;
 800273e:	4d12      	ldr	r5, [pc, #72]	; (8002788 <UartCmd_Get_Validation_Report_Size+0x4c>)
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002740:	f600 24bc 	addw	r4, r0, #2748	; 0xabc
  *((uint32_t*)aTxBuffer) = AI_NET_OUTPUT_SIZE*AI_NET_OUTPUT_SIZE_BYTES*NUM_FILE_PER_DIR;
 8002744:	4b11      	ldr	r3, [pc, #68]	; (800278c <UartCmd_Get_Validation_Report_Size+0x50>)
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002746:	2202      	movs	r2, #2
 8002748:	4628      	mov	r0, r5
 800274a:	f44f 61a4 	mov.w	r1, #1312	; 0x520
  *((uint32_t*)aTxBuffer) = AI_NET_OUTPUT_SIZE*AI_NET_OUTPUT_SIZE_BYTES*NUM_FILE_PER_DIR;
 800274e:	602b      	str	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002750:	f001 ffbe 	bl	80046d0 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002754:	4629      	mov	r1, r5
 8002756:	4620      	mov	r0, r4
 8002758:	2204      	movs	r2, #4
 800275a:	f00f fb89 	bl	8011e70 <HAL_UART_Transmit_DMA>
 800275e:	b978      	cbnz	r0, 8002780 <UartCmd_Get_Validation_Report_Size+0x44>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002760:	4620      	mov	r0, r4
 8002762:	f00f fdcb 	bl	80122fc <HAL_UART_GetState>
 8002766:	2820      	cmp	r0, #32
 8002768:	d1fa      	bne.n	8002760 <UartCmd_Get_Validation_Report_Size+0x24>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 800276a:	4620      	mov	r0, r4
 800276c:	220a      	movs	r2, #10
 800276e:	4908      	ldr	r1, [pc, #32]	; (8002790 <UartCmd_Get_Validation_Report_Size+0x54>)
 8002770:	f00f fbd4 	bl	8011f1c <HAL_UART_Receive_DMA>
 8002774:	b900      	cbnz	r0, 8002778 <UartCmd_Get_Validation_Report_Size+0x3c>
}
 8002776:	bd38      	pop	{r3, r4, r5, pc}
 8002778:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 800277c:	f002 b814 	b.w	80047a8 <Error_Handler>
      Error_Handler();
 8002780:	f002 f812 	bl	80047a8 <Error_Handler>
 8002784:	e7ec      	b.n	8002760 <UartCmd_Get_Validation_Report_Size+0x24>
 8002786:	bf00      	nop
 8002788:	24002800 	.word	0x24002800
 800278c:	0001fa40 	.word	0x0001fa40
 8002790:	240027e0 	.word	0x240027e0

08002794 <UartCmd_Get_Timing_Report_Size>:
{
 8002794:	b538      	push	{r3, r4, r5, lr}
  *((uint32_t*)aTxBuffer) = APP_FRAMEOPERATION_NUM*sizeof(uint32_t);
 8002796:	4d12      	ldr	r5, [pc, #72]	; (80027e0 <UartCmd_Get_Timing_Report_Size+0x4c>)
 8002798:	2314      	movs	r3, #20
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 800279a:	f600 24bc 	addw	r4, r0, #2748	; 0xabc
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800279e:	2202      	movs	r2, #2
 80027a0:	4628      	mov	r0, r5
 80027a2:	f44f 61a4 	mov.w	r1, #1312	; 0x520
  *((uint32_t*)aTxBuffer) = APP_FRAMEOPERATION_NUM*sizeof(uint32_t);
 80027a6:	602b      	str	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80027a8:	f001 ff92 	bl	80046d0 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80027ac:	4629      	mov	r1, r5
 80027ae:	4620      	mov	r0, r4
 80027b0:	2204      	movs	r2, #4
 80027b2:	f00f fb5d 	bl	8011e70 <HAL_UART_Transmit_DMA>
 80027b6:	b978      	cbnz	r0, 80027d8 <UartCmd_Get_Timing_Report_Size+0x44>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 80027b8:	4620      	mov	r0, r4
 80027ba:	f00f fd9f 	bl	80122fc <HAL_UART_GetState>
 80027be:	2820      	cmp	r0, #32
 80027c0:	d1fa      	bne.n	80027b8 <UartCmd_Get_Timing_Report_Size+0x24>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 80027c2:	4620      	mov	r0, r4
 80027c4:	220a      	movs	r2, #10
 80027c6:	4907      	ldr	r1, [pc, #28]	; (80027e4 <UartCmd_Get_Timing_Report_Size+0x50>)
 80027c8:	f00f fba8 	bl	8011f1c <HAL_UART_Receive_DMA>
 80027cc:	b900      	cbnz	r0, 80027d0 <UartCmd_Get_Timing_Report_Size+0x3c>
}
 80027ce:	bd38      	pop	{r3, r4, r5, pc}
 80027d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 80027d4:	f001 bfe8 	b.w	80047a8 <Error_Handler>
      Error_Handler();
 80027d8:	f001 ffe6 	bl	80047a8 <Error_Handler>
 80027dc:	e7ec      	b.n	80027b8 <UartCmd_Get_Timing_Report_Size+0x24>
 80027de:	bf00      	nop
 80027e0:	24002800 	.word	0x24002800
 80027e4:	240027e0 	.word	0x240027e0

080027e8 <UartCmd_Get_NonRegression_Debug_Report_Size>:
{
 80027e8:	b538      	push	{r3, r4, r5, lr}
  *((uint32_t*)aTxBuffer) = DUMP_INTERMEDIATE_DATA_BUFFER_SIZE*2;
 80027ea:	4d12      	ldr	r5, [pc, #72]	; (8002834 <UartCmd_Get_NonRegression_Debug_Report_Size+0x4c>)
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80027ec:	f600 24bc 	addw	r4, r0, #2748	; 0xabc
  *((uint32_t*)aTxBuffer) = DUMP_INTERMEDIATE_DATA_BUFFER_SIZE*2;
 80027f0:	4b11      	ldr	r3, [pc, #68]	; (8002838 <UartCmd_Get_NonRegression_Debug_Report_Size+0x50>)
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80027f2:	2202      	movs	r2, #2
 80027f4:	4628      	mov	r0, r5
 80027f6:	f44f 61a4 	mov.w	r1, #1312	; 0x520
  *((uint32_t*)aTxBuffer) = DUMP_INTERMEDIATE_DATA_BUFFER_SIZE*2;
 80027fa:	602b      	str	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80027fc:	f001 ff68 	bl	80046d0 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002800:	4629      	mov	r1, r5
 8002802:	4620      	mov	r0, r4
 8002804:	2204      	movs	r2, #4
 8002806:	f00f fb33 	bl	8011e70 <HAL_UART_Transmit_DMA>
 800280a:	b978      	cbnz	r0, 800282c <UartCmd_Get_NonRegression_Debug_Report_Size+0x44>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 800280c:	4620      	mov	r0, r4
 800280e:	f00f fd75 	bl	80122fc <HAL_UART_GetState>
 8002812:	2820      	cmp	r0, #32
 8002814:	d1fa      	bne.n	800280c <UartCmd_Get_NonRegression_Debug_Report_Size+0x24>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002816:	4620      	mov	r0, r4
 8002818:	220a      	movs	r2, #10
 800281a:	4908      	ldr	r1, [pc, #32]	; (800283c <UartCmd_Get_NonRegression_Debug_Report_Size+0x54>)
 800281c:	f00f fb7e 	bl	8011f1c <HAL_UART_Receive_DMA>
 8002820:	b900      	cbnz	r0, 8002824 <UartCmd_Get_NonRegression_Debug_Report_Size+0x3c>
}
 8002822:	bd38      	pop	{r3, r4, r5, pc}
 8002824:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8002828:	f001 bfbe 	b.w	80047a8 <Error_Handler>
      Error_Handler();
 800282c:	f001 ffbc 	bl	80047a8 <Error_Handler>
 8002830:	e7ec      	b.n	800280c <UartCmd_Get_NonRegression_Debug_Report_Size+0x24>
 8002832:	bf00      	nop
 8002834:	24002800 	.word	0x24002800
 8002838:	002819d0 	.word	0x002819d0
 800283c:	240027e0 	.word	0x240027e0

08002840 <UartCmd_Get_Dump_Whole_Data_Size>:
{
 8002840:	b538      	push	{r3, r4, r5, lr}
  *((uint32_t*)aTxBuffer) = DUMP_INTERMEDIATE_DATA_BUFFER_SIZE;
 8002842:	4d12      	ldr	r5, [pc, #72]	; (800288c <UartCmd_Get_Dump_Whole_Data_Size+0x4c>)
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002844:	f600 24bc 	addw	r4, r0, #2748	; 0xabc
  *((uint32_t*)aTxBuffer) = DUMP_INTERMEDIATE_DATA_BUFFER_SIZE;
 8002848:	4b11      	ldr	r3, [pc, #68]	; (8002890 <UartCmd_Get_Dump_Whole_Data_Size+0x50>)
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800284a:	2202      	movs	r2, #2
 800284c:	4628      	mov	r0, r5
 800284e:	f44f 61a4 	mov.w	r1, #1312	; 0x520
  *((uint32_t*)aTxBuffer) = DUMP_INTERMEDIATE_DATA_BUFFER_SIZE;
 8002852:	602b      	str	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002854:	f001 ff3c 	bl	80046d0 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002858:	4629      	mov	r1, r5
 800285a:	4620      	mov	r0, r4
 800285c:	2204      	movs	r2, #4
 800285e:	f00f fb07 	bl	8011e70 <HAL_UART_Transmit_DMA>
 8002862:	b978      	cbnz	r0, 8002884 <UartCmd_Get_Dump_Whole_Data_Size+0x44>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002864:	4620      	mov	r0, r4
 8002866:	f00f fd49 	bl	80122fc <HAL_UART_GetState>
 800286a:	2820      	cmp	r0, #32
 800286c:	d1fa      	bne.n	8002864 <UartCmd_Get_Dump_Whole_Data_Size+0x24>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 800286e:	4620      	mov	r0, r4
 8002870:	220a      	movs	r2, #10
 8002872:	4908      	ldr	r1, [pc, #32]	; (8002894 <UartCmd_Get_Dump_Whole_Data_Size+0x54>)
 8002874:	f00f fb52 	bl	8011f1c <HAL_UART_Receive_DMA>
 8002878:	b900      	cbnz	r0, 800287c <UartCmd_Get_Dump_Whole_Data_Size+0x3c>
}
 800287a:	bd38      	pop	{r3, r4, r5, pc}
 800287c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8002880:	f001 bf92 	b.w	80047a8 <Error_Handler>
      Error_Handler();
 8002884:	f001 ff90 	bl	80047a8 <Error_Handler>
 8002888:	e7ec      	b.n	8002864 <UartCmd_Get_Dump_Whole_Data_Size+0x24>
 800288a:	bf00      	nop
 800288c:	24002800 	.word	0x24002800
 8002890:	00140ce8 	.word	0x00140ce8
 8002894:	240027e0 	.word	0x240027e0

08002898 <UartCmd_Trigger_Capture>:
{
 8002898:	b538      	push	{r3, r4, r5, lr}
  if((Test_Context_Ptr->UartContext.uart_host_requested_mode==CAPTURE)&&(Test_Context_Ptr->UartContext.uart_host_requested_capture_delay==0))
 800289a:	f890 3aa4 	ldrb.w	r3, [r0, #2724]	; 0xaa4
 800289e:	2b04      	cmp	r3, #4
 80028a0:	d102      	bne.n	80028a8 <UartCmd_Trigger_Capture+0x10>
 80028a2:	f8d0 3ab0 	ldr.w	r3, [r0, #2736]	; 0xab0
 80028a6:	b303      	cbz	r3, 80028ea <UartCmd_Trigger_Capture+0x52>
    *(aTxBuffer) = CMD_ERROR_EVT;
 80028a8:	4d14      	ldr	r5, [pc, #80]	; (80028fc <UartCmd_Trigger_Capture+0x64>)
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80028aa:	f600 24bc 	addw	r4, r0, #2748	; 0xabc
    *(aTxBuffer) = CMD_ERROR_EVT;
 80028ae:	2304      	movs	r3, #4
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80028b0:	2202      	movs	r2, #2
 80028b2:	4628      	mov	r0, r5
 80028b4:	f44f 61a4 	mov.w	r1, #1312	; 0x520
    *(aTxBuffer) = CMD_ERROR_EVT;
 80028b8:	702b      	strb	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80028ba:	f001 ff09 	bl	80046d0 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80028be:	4629      	mov	r1, r5
 80028c0:	4620      	mov	r0, r4
 80028c2:	2201      	movs	r2, #1
 80028c4:	f00f fad4 	bl	8011e70 <HAL_UART_Transmit_DMA>
 80028c8:	b9a8      	cbnz	r0, 80028f6 <UartCmd_Trigger_Capture+0x5e>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 80028ca:	4620      	mov	r0, r4
 80028cc:	f00f fd16 	bl	80122fc <HAL_UART_GetState>
 80028d0:	2820      	cmp	r0, #32
 80028d2:	d1fa      	bne.n	80028ca <UartCmd_Trigger_Capture+0x32>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 80028d4:	4620      	mov	r0, r4
 80028d6:	220a      	movs	r2, #10
 80028d8:	4909      	ldr	r1, [pc, #36]	; (8002900 <UartCmd_Trigger_Capture+0x68>)
 80028da:	f00f fb1f 	bl	8011f1c <HAL_UART_Receive_DMA>
 80028de:	b900      	cbnz	r0, 80028e2 <UartCmd_Trigger_Capture+0x4a>
}
 80028e0:	bd38      	pop	{r3, r4, r5, pc}
 80028e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 80028e6:	f001 bf5f 	b.w	80047a8 <Error_Handler>
    Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 80028ea:	2301      	movs	r3, #1
 80028ec:	f8c0 3aa0 	str.w	r3, [r0, #2720]	; 0xaa0
    Test_Context_Ptr->CaptureContext.capture_state = 1;
 80028f0:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
}
 80028f4:	bd38      	pop	{r3, r4, r5, pc}
      Error_Handler();
 80028f6:	f001 ff57 	bl	80047a8 <Error_Handler>
 80028fa:	e7e6      	b.n	80028ca <UartCmd_Trigger_Capture+0x32>
 80028fc:	24002800 	.word	0x24002800
 8002900:	240027e0 	.word	0x240027e0

08002904 <UartCmd_Trigger_Dump>:
{
 8002904:	b538      	push	{r3, r4, r5, lr}
  if(Test_Context_Ptr->UartContext.uart_host_requested_mode==DUMP)
 8002906:	f890 3aa4 	ldrb.w	r3, [r0, #2724]	; 0xaa4
 800290a:	2b03      	cmp	r3, #3
 800290c:	d10e      	bne.n	800292c <UartCmd_Trigger_Dump+0x28>
    Test_Context_Ptr->UartContext.uart_host_requested_dump_number=*(uint16_t*)(data_buffer);
 800290e:	880c      	ldrh	r4, [r1, #0]
    Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8002910:	2301      	movs	r3, #1
 8002912:	2248      	movs	r2, #72	; 0x48
 8002914:	2100      	movs	r1, #0
    Test_Context_Ptr->UartContext.uart_host_requested_dump_number=*(uint16_t*)(data_buffer);
 8002916:	f8c0 4aa8 	str.w	r4, [r0, #2728]	; 0xaa8
    Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 800291a:	f8c0 3aa0 	str.w	r3, [r0, #2720]	; 0xaa0
    Test_Context_Ptr->DumpContext.dump_state = 1;
 800291e:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
 8002922:	4814      	ldr	r0, [pc, #80]	; (8002974 <UartCmd_Trigger_Dump+0x70>)
}
 8002924:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002928:	f01b b8e1 	b.w	801daee <memset>
    *(aTxBuffer) = CMD_ERROR_EVT;
 800292c:	4d12      	ldr	r5, [pc, #72]	; (8002978 <UartCmd_Trigger_Dump+0x74>)
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 800292e:	f600 24bc 	addw	r4, r0, #2748	; 0xabc
    *(aTxBuffer) = CMD_ERROR_EVT;
 8002932:	2304      	movs	r3, #4
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002934:	2202      	movs	r2, #2
 8002936:	4628      	mov	r0, r5
 8002938:	f44f 61a4 	mov.w	r1, #1312	; 0x520
    *(aTxBuffer) = CMD_ERROR_EVT;
 800293c:	702b      	strb	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800293e:	f001 fec7 	bl	80046d0 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002942:	4629      	mov	r1, r5
 8002944:	4620      	mov	r0, r4
 8002946:	2201      	movs	r2, #1
 8002948:	f00f fa92 	bl	8011e70 <HAL_UART_Transmit_DMA>
 800294c:	b978      	cbnz	r0, 800296e <UartCmd_Trigger_Dump+0x6a>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 800294e:	4620      	mov	r0, r4
 8002950:	f00f fcd4 	bl	80122fc <HAL_UART_GetState>
 8002954:	2820      	cmp	r0, #32
 8002956:	d1fa      	bne.n	800294e <UartCmd_Trigger_Dump+0x4a>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002958:	4620      	mov	r0, r4
 800295a:	220a      	movs	r2, #10
 800295c:	4907      	ldr	r1, [pc, #28]	; (800297c <UartCmd_Trigger_Dump+0x78>)
 800295e:	f00f fadd 	bl	8011f1c <HAL_UART_Receive_DMA>
 8002962:	b900      	cbnz	r0, 8002966 <UartCmd_Trigger_Dump+0x62>
}
 8002964:	bd38      	pop	{r3, r4, r5, pc}
 8002966:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 800296a:	f001 bf1d 	b.w	80047a8 <Error_Handler>
      Error_Handler();
 800296e:	f001 ff1b 	bl	80047a8 <Error_Handler>
 8002972:	e7ec      	b.n	800294e <UartCmd_Trigger_Dump+0x4a>
 8002974:	d0d31d80 	.word	0xd0d31d80
 8002978:	24002800 	.word	0x24002800
 800297c:	240027e0 	.word	0x240027e0

08002980 <UartCmd_Upload_NonRegression_Debug_Report>:
{
 8002980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002982:	4d31      	ldr	r5, [pc, #196]	; (8002a48 <UartCmd_Upload_NonRegression_Debug_Report+0xc8>)
 8002984:	f600 24bc 	addw	r4, r0, #2748	; 0xabc
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002988:	2202      	movs	r2, #2
 800298a:	4930      	ldr	r1, [pc, #192]	; (8002a4c <UartCmd_Upload_NonRegression_Debug_Report+0xcc>)
 800298c:	4628      	mov	r0, r5
 800298e:	4f30      	ldr	r7, [pc, #192]	; (8002a50 <UartCmd_Upload_NonRegression_Debug_Report+0xd0>)
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8002990:	f64f 76ff 	movw	r6, #65535	; 0xffff
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002994:	f001 fe9c 	bl	80046d0 <UTILS_DCache_Coherency_Maintenance>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8002998:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800299c:	4629      	mov	r1, r5
 800299e:	4620      	mov	r0, r4
 80029a0:	f00f fa66 	bl	8011e70 <HAL_UART_Transmit_DMA>
 80029a4:	2800      	cmp	r0, #0
 80029a6:	d142      	bne.n	8002a2e <UartCmd_Upload_NonRegression_Debug_Report+0xae>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 80029a8:	4620      	mov	r0, r4
 80029aa:	f00f fca7 	bl	80122fc <HAL_UART_GetState>
 80029ae:	2820      	cmp	r0, #32
 80029b0:	d1fa      	bne.n	80029a8 <UartCmd_Upload_NonRegression_Debug_Report+0x28>
 80029b2:	4435      	add	r5, r6
    for(i=0;i<dma_xfer_num;i++)
 80029b4:	42af      	cmp	r7, r5
 80029b6:	d1ef      	bne.n	8002998 <UartCmd_Upload_NonRegression_Debug_Report+0x18>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), TxDataTransferSize%0xFFFF)!= HAL_OK)
 80029b8:	f640 42fc 	movw	r2, #3324	; 0xcfc
 80029bc:	4924      	ldr	r1, [pc, #144]	; (8002a50 <UartCmd_Upload_NonRegression_Debug_Report+0xd0>)
 80029be:	4620      	mov	r0, r4
 80029c0:	f00f fa56 	bl	8011e70 <HAL_UART_Transmit_DMA>
 80029c4:	2800      	cmp	r0, #0
 80029c6:	d13c      	bne.n	8002a42 <UartCmd_Upload_NonRegression_Debug_Report+0xc2>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 80029c8:	4620      	mov	r0, r4
 80029ca:	f00f fc97 	bl	80122fc <HAL_UART_GetState>
 80029ce:	2820      	cmp	r0, #32
 80029d0:	d1fa      	bne.n	80029c8 <UartCmd_Upload_NonRegression_Debug_Report+0x48>
 80029d2:	4d20      	ldr	r5, [pc, #128]	; (8002a54 <UartCmd_Upload_NonRegression_Debug_Report+0xd4>)
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 80029d4:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80029d8:	4e1f      	ldr	r6, [pc, #124]	; (8002a58 <UartCmd_Upload_NonRegression_Debug_Report+0xd8>)
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80029da:	2202      	movs	r2, #2
 80029dc:	491b      	ldr	r1, [pc, #108]	; (8002a4c <UartCmd_Upload_NonRegression_Debug_Report+0xcc>)
 80029de:	4628      	mov	r0, r5
 80029e0:	f001 fe76 	bl	80046d0 <UTILS_DCache_Coherency_Maintenance>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 80029e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029e8:	4629      	mov	r1, r5
 80029ea:	4620      	mov	r0, r4
 80029ec:	f00f fa40 	bl	8011e70 <HAL_UART_Transmit_DMA>
 80029f0:	b9d0      	cbnz	r0, 8002a28 <UartCmd_Upload_NonRegression_Debug_Report+0xa8>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 80029f2:	4620      	mov	r0, r4
 80029f4:	f00f fc82 	bl	80122fc <HAL_UART_GetState>
 80029f8:	2820      	cmp	r0, #32
 80029fa:	d1fa      	bne.n	80029f2 <UartCmd_Upload_NonRegression_Debug_Report+0x72>
 80029fc:	443d      	add	r5, r7
    for(i=0;i<dma_xfer_num;i++)
 80029fe:	42ae      	cmp	r6, r5
 8002a00:	d1f0      	bne.n	80029e4 <UartCmd_Upload_NonRegression_Debug_Report+0x64>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), TxDataTransferSize%0xFFFF)!= HAL_OK)
 8002a02:	f640 42fc 	movw	r2, #3324	; 0xcfc
 8002a06:	4914      	ldr	r1, [pc, #80]	; (8002a58 <UartCmd_Upload_NonRegression_Debug_Report+0xd8>)
 8002a08:	4620      	mov	r0, r4
 8002a0a:	f00f fa31 	bl	8011e70 <HAL_UART_Transmit_DMA>
 8002a0e:	b9a8      	cbnz	r0, 8002a3c <UartCmd_Upload_NonRegression_Debug_Report+0xbc>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002a10:	4620      	mov	r0, r4
 8002a12:	f00f fc73 	bl	80122fc <HAL_UART_GetState>
 8002a16:	2820      	cmp	r0, #32
 8002a18:	d1fa      	bne.n	8002a10 <UartCmd_Upload_NonRegression_Debug_Report+0x90>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002a1a:	4620      	mov	r0, r4
 8002a1c:	220a      	movs	r2, #10
 8002a1e:	490f      	ldr	r1, [pc, #60]	; (8002a5c <UartCmd_Upload_NonRegression_Debug_Report+0xdc>)
 8002a20:	f00f fa7c 	bl	8011f1c <HAL_UART_Receive_DMA>
 8002a24:	b930      	cbnz	r0, 8002a34 <UartCmd_Upload_NonRegression_Debug_Report+0xb4>
}
 8002a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        Error_Handler();
 8002a28:	f001 febe 	bl	80047a8 <Error_Handler>
 8002a2c:	e7e1      	b.n	80029f2 <UartCmd_Upload_NonRegression_Debug_Report+0x72>
 8002a2e:	f001 febb 	bl	80047a8 <Error_Handler>
 8002a32:	e7b9      	b.n	80029a8 <UartCmd_Upload_NonRegression_Debug_Report+0x28>
}
 8002a34:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Error_Handler();
 8002a38:	f001 beb6 	b.w	80047a8 <Error_Handler>
        Error_Handler();
 8002a3c:	f001 feb4 	bl	80047a8 <Error_Handler>
 8002a40:	e7e6      	b.n	8002a10 <UartCmd_Upload_NonRegression_Debug_Report+0x90>
 8002a42:	f001 feb1 	bl	80047a8 <Error_Handler>
 8002a46:	e7bf      	b.n	80029c8 <UartCmd_Upload_NonRegression_Debug_Report+0x48>
 8002a48:	d0d51880 	.word	0xd0d51880
 8002a4c:	00140d00 	.word	0x00140d00
 8002a50:	d0e9186c 	.word	0xd0e9186c
 8002a54:	d0e92580 	.word	0xd0e92580
 8002a58:	d0fd256c 	.word	0xd0fd256c
 8002a5c:	240027e0 	.word	0x240027e0

08002a60 <UartCmd_Upload_Dump_Whole_Data>:
{
 8002a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if((*(uint8_t*)(data_buffer))== 0x00)
 8002a62:	780b      	ldrb	r3, [r1, #0]
 8002a64:	f600 24bc 	addw	r4, r0, #2748	; 0xabc
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d04f      	beq.n	8002b0c <UartCmd_Upload_Dump_Whole_Data+0xac>
  else if((*(uint8_t*)(data_buffer))== 0x01)
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d01b      	beq.n	8002aa8 <UartCmd_Upload_Dump_Whole_Data+0x48>
    *(aTxBuffer) = CMD_ERROR_EVT;
 8002a70:	4d3f      	ldr	r5, [pc, #252]	; (8002b70 <UartCmd_Upload_Dump_Whole_Data+0x110>)
 8002a72:	2304      	movs	r3, #4
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002a74:	2202      	movs	r2, #2
 8002a76:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 8002a7a:	4628      	mov	r0, r5
    *(aTxBuffer) = CMD_ERROR_EVT;
 8002a7c:	702b      	strb	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002a7e:	f001 fe27 	bl	80046d0 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002a82:	4629      	mov	r1, r5
 8002a84:	2201      	movs	r2, #1
 8002a86:	4620      	mov	r0, r4
 8002a88:	f00f f9f2 	bl	8011e70 <HAL_UART_Transmit_DMA>
 8002a8c:	2800      	cmp	r0, #0
 8002a8e:	d165      	bne.n	8002b5c <UartCmd_Upload_Dump_Whole_Data+0xfc>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002a90:	4620      	mov	r0, r4
 8002a92:	f00f fc33 	bl	80122fc <HAL_UART_GetState>
 8002a96:	2820      	cmp	r0, #32
 8002a98:	d1fa      	bne.n	8002a90 <UartCmd_Upload_Dump_Whole_Data+0x30>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002a9a:	4620      	mov	r0, r4
 8002a9c:	220a      	movs	r2, #10
 8002a9e:	4935      	ldr	r1, [pc, #212]	; (8002b74 <UartCmd_Upload_Dump_Whole_Data+0x114>)
 8002aa0:	f00f fa3c 	bl	8011f1c <HAL_UART_Receive_DMA>
 8002aa4:	bb70      	cbnz	r0, 8002b04 <UartCmd_Upload_Dump_Whole_Data+0xa4>
}
 8002aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002aa8:	4d33      	ldr	r5, [pc, #204]	; (8002b78 <UartCmd_Upload_Dump_Whole_Data+0x118>)
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8002aaa:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8002aae:	4e33      	ldr	r6, [pc, #204]	; (8002b7c <UartCmd_Upload_Dump_Whole_Data+0x11c>)
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	4933      	ldr	r1, [pc, #204]	; (8002b80 <UartCmd_Upload_Dump_Whole_Data+0x120>)
 8002ab4:	4628      	mov	r0, r5
 8002ab6:	f001 fe0b 	bl	80046d0 <UTILS_DCache_Coherency_Maintenance>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8002aba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002abe:	4629      	mov	r1, r5
 8002ac0:	4620      	mov	r0, r4
 8002ac2:	f00f f9d5 	bl	8011e70 <HAL_UART_Transmit_DMA>
 8002ac6:	b9d0      	cbnz	r0, 8002afe <UartCmd_Upload_Dump_Whole_Data+0x9e>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002ac8:	4620      	mov	r0, r4
 8002aca:	f00f fc17 	bl	80122fc <HAL_UART_GetState>
 8002ace:	2820      	cmp	r0, #32
 8002ad0:	d1fa      	bne.n	8002ac8 <UartCmd_Upload_Dump_Whole_Data+0x68>
 8002ad2:	443d      	add	r5, r7
    for(i=0;i<dma_xfer_num;i++)
 8002ad4:	42ae      	cmp	r6, r5
 8002ad6:	d1f0      	bne.n	8002aba <UartCmd_Upload_Dump_Whole_Data+0x5a>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), TxDataTransferSize%0xFFFF)!= HAL_OK)
 8002ad8:	f640 42fc 	movw	r2, #3324	; 0xcfc
 8002adc:	4927      	ldr	r1, [pc, #156]	; (8002b7c <UartCmd_Upload_Dump_Whole_Data+0x11c>)
 8002ade:	4620      	mov	r0, r4
 8002ae0:	f00f f9c6 	bl	8011e70 <HAL_UART_Transmit_DMA>
 8002ae4:	2800      	cmp	r0, #0
 8002ae6:	d13c      	bne.n	8002b62 <UartCmd_Upload_Dump_Whole_Data+0x102>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002ae8:	4620      	mov	r0, r4
 8002aea:	f00f fc07 	bl	80122fc <HAL_UART_GetState>
 8002aee:	2820      	cmp	r0, #32
 8002af0:	d0d3      	beq.n	8002a9a <UartCmd_Upload_Dump_Whole_Data+0x3a>
 8002af2:	4620      	mov	r0, r4
 8002af4:	f00f fc02 	bl	80122fc <HAL_UART_GetState>
 8002af8:	2820      	cmp	r0, #32
 8002afa:	d1f5      	bne.n	8002ae8 <UartCmd_Upload_Dump_Whole_Data+0x88>
 8002afc:	e7cd      	b.n	8002a9a <UartCmd_Upload_Dump_Whole_Data+0x3a>
        Error_Handler();
 8002afe:	f001 fe53 	bl	80047a8 <Error_Handler>
 8002b02:	e7e1      	b.n	8002ac8 <UartCmd_Upload_Dump_Whole_Data+0x68>
}
 8002b04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Error_Handler();
 8002b08:	f001 be4e 	b.w	80047a8 <Error_Handler>
 8002b0c:	4d1d      	ldr	r5, [pc, #116]	; (8002b84 <UartCmd_Upload_Dump_Whole_Data+0x124>)
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8002b0e:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8002b12:	4e1d      	ldr	r6, [pc, #116]	; (8002b88 <UartCmd_Upload_Dump_Whole_Data+0x128>)
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002b14:	2202      	movs	r2, #2
 8002b16:	491a      	ldr	r1, [pc, #104]	; (8002b80 <UartCmd_Upload_Dump_Whole_Data+0x120>)
 8002b18:	4628      	mov	r0, r5
 8002b1a:	f001 fdd9 	bl	80046d0 <UTILS_DCache_Coherency_Maintenance>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8002b1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b22:	4629      	mov	r1, r5
 8002b24:	4620      	mov	r0, r4
 8002b26:	f00f f9a3 	bl	8011e70 <HAL_UART_Transmit_DMA>
 8002b2a:	b9a0      	cbnz	r0, 8002b56 <UartCmd_Upload_Dump_Whole_Data+0xf6>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002b2c:	4620      	mov	r0, r4
 8002b2e:	f00f fbe5 	bl	80122fc <HAL_UART_GetState>
 8002b32:	2820      	cmp	r0, #32
 8002b34:	d1fa      	bne.n	8002b2c <UartCmd_Upload_Dump_Whole_Data+0xcc>
 8002b36:	443d      	add	r5, r7
    for(i=0;i<dma_xfer_num;i++)
 8002b38:	42ae      	cmp	r6, r5
 8002b3a:	d1f0      	bne.n	8002b1e <UartCmd_Upload_Dump_Whole_Data+0xbe>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), TxDataTransferSize%0xFFFF)!= HAL_OK)
 8002b3c:	f640 42fc 	movw	r2, #3324	; 0xcfc
 8002b40:	4911      	ldr	r1, [pc, #68]	; (8002b88 <UartCmd_Upload_Dump_Whole_Data+0x128>)
 8002b42:	4620      	mov	r0, r4
 8002b44:	f00f f994 	bl	8011e70 <HAL_UART_Transmit_DMA>
 8002b48:	b970      	cbnz	r0, 8002b68 <UartCmd_Upload_Dump_Whole_Data+0x108>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002b4a:	4620      	mov	r0, r4
 8002b4c:	f00f fbd6 	bl	80122fc <HAL_UART_GetState>
 8002b50:	2820      	cmp	r0, #32
 8002b52:	d1fa      	bne.n	8002b4a <UartCmd_Upload_Dump_Whole_Data+0xea>
 8002b54:	e7a1      	b.n	8002a9a <UartCmd_Upload_Dump_Whole_Data+0x3a>
        Error_Handler();
 8002b56:	f001 fe27 	bl	80047a8 <Error_Handler>
 8002b5a:	e7e7      	b.n	8002b2c <UartCmd_Upload_Dump_Whole_Data+0xcc>
      Error_Handler();
 8002b5c:	f001 fe24 	bl	80047a8 <Error_Handler>
 8002b60:	e796      	b.n	8002a90 <UartCmd_Upload_Dump_Whole_Data+0x30>
        Error_Handler();
 8002b62:	f001 fe21 	bl	80047a8 <Error_Handler>
 8002b66:	e7bf      	b.n	8002ae8 <UartCmd_Upload_Dump_Whole_Data+0x88>
 8002b68:	f001 fe1e 	bl	80047a8 <Error_Handler>
 8002b6c:	e7ed      	b.n	8002b4a <UartCmd_Upload_Dump_Whole_Data+0xea>
 8002b6e:	bf00      	nop
 8002b70:	24002800 	.word	0x24002800
 8002b74:	240027e0 	.word	0x240027e0
 8002b78:	d0e92580 	.word	0xd0e92580
 8002b7c:	d0fd256c 	.word	0xd0fd256c
 8002b80:	00140d00 	.word	0x00140d00
 8002b84:	d0d51880 	.word	0xd0d51880
 8002b88:	d0e9186c 	.word	0xd0e9186c

08002b8c <TEST_Init>:
 * @param TestContext_Ptr pointer to test context
 */
static void Test_Context_Init(TestContext_TypeDef *Test_Context_Ptr)
{
  Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_LIVE;
  Test_Context_Ptr->DumpContext.dump_session_id = 0;
 8002b8c:	2300      	movs	r3, #0
  Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_LIVE;
 8002b8e:	2201      	movs	r2, #1
  Test_Context_Ptr->DumpContext.dump_frame_count = 0;
  Test_Context_Ptr->DumpContext.dump_state = 0;

  Test_Context_Ptr->CaptureContext.capture_file_format=RAW;
 8002b90:	2103      	movs	r1, #3
 * @brief Test Init
 *
 * @param Test_Context_Ptr pointer to test context
 */
void TEST_Init(TestContext_TypeDef *Test_Context_Ptr)
{
 8002b92:	b5f0      	push	{r4, r5, r6, r7, lr}
  Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_LIVE;
 8002b94:	7102      	strb	r2, [r0, #4]
{
 8002b96:	b091      	sub	sp, #68	; 0x44
  Test_Context_Ptr->ValidationContext.nbr_tested = 1;
 8002b98:	f8c0 2120 	str.w	r2, [r0, #288]	; 0x120
{
 8002b9c:	4605      	mov	r5, r0
  Test_Context_Ptr->ValidationContext.overall_loss = 0.0;
 8002b9e:	2200      	movs	r2, #0
  Test_Context_Ptr->DumpContext.dump_state = 0;
 8002ba0:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
  Test_Context_Ptr->CaptureContext.capture_frame_count=0;
 8002ba4:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
 8002ba8:	f500 6489 	add.w	r4, r0, #1096	; 0x448
  Test_Context_Ptr->ValidationContext.validation_completed=0;
 8002bac:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
 8002bb0:	f600 1658 	addw	r6, r0, #2392	; 0x958
  Test_Context_Ptr->CaptureContext.capture_file_format=RAW;
 8002bb4:	f880 10bc 	strb.w	r1, [r0, #188]	; 0xbc
  Test_Context_Ptr->DumpContext.dump_frame_count = 0;
 8002bb8:	e9c0 3302 	strd	r3, r3, [r0, #8]
  Test_Context_Ptr->CaptureContext.capture_session_id=0;
 8002bbc:	e9c0 3330 	strd	r3, r3, [r0, #192]	; 0xc0
  Test_Context_Ptr->ValidationContext.overall_loss = 0.0;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	e9c0 2344 	strd	r2, r3, [r0, #272]	; 0x110
  Test_Context_Ptr->ValidationContext.avg_loss = 0.0;
 8002bc6:	e9c0 2346 	strd	r2, r3, [r0, #280]	; 0x118
 8002bca:	4620      	mov	r0, r4
 8002bcc:	3448      	adds	r4, #72	; 0x48
 8002bce:	2248      	movs	r2, #72	; 0x48
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	f01a ff8c 	bl	801daee <memset>
  for (int i=0; i<AI_NET_OUTPUT_SIZE; i++)
 8002bd6:	42b4      	cmp	r4, r6
 8002bd8:	d1f7      	bne.n	8002bca <TEST_Init+0x3e>
  Test_Context_Ptr->UartContext.uart_cmd_ongoing=0;
 8002bda:	2300      	movs	r3, #0
  Test_Context_Ptr->UartContext.uart_host_requested_mode = NOMINAL;
 8002bdc:	2001      	movs	r0, #1
  Test_Context_Ptr->UartContext.UartHandle.Instance        = USARTx;
 8002bde:	4c27      	ldr	r4, [pc, #156]	; (8002c7c <TEST_Init+0xf0>)
  Test_Context_Ptr->UartContext.UartHandle.Init.BaudRate   = 115200;
 8002be0:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  Test_Context_Ptr->UartContext.UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8002be4:	220c      	movs	r2, #12
  if(HAL_UART_Init(&Test_Context_Ptr->UartContext.UartHandle) != HAL_OK)
 8002be6:	f605 27bc 	addw	r7, r5, #2748	; 0xabc
  Test_Context_Ptr->UartContext.uart_host_requested_mode = NOMINAL;
 8002bea:	f885 0aa4 	strb.w	r0, [r5, #2724]	; 0xaa4
  Test_Context_Ptr->UartContext.uart_cmd_ongoing=0;
 8002bee:	f8c5 3aa0 	str.w	r3, [r5, #2720]	; 0xaa0
  if(HAL_UART_Init(&Test_Context_Ptr->UartContext.UartHandle) != HAL_OK)
 8002bf2:	4638      	mov	r0, r7
  Test_Context_Ptr->UartContext.uart_host_nonreg_run=0;
 8002bf4:	f8c5 3ab8 	str.w	r3, [r5, #2744]	; 0xab8
  Test_Context_Ptr->UartContext.UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8002bf8:	f8c5 3ac4 	str.w	r3, [r5, #2756]	; 0xac4
  Test_Context_Ptr->UartContext.UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8002bfc:	f8c5 3ac8 	str.w	r3, [r5, #2760]	; 0xac8
  Test_Context_Ptr->UartContext.UartHandle.Init.Parity     = UART_PARITY_NONE;
 8002c00:	f8c5 3acc 	str.w	r3, [r5, #2764]	; 0xacc
  Test_Context_Ptr->UartContext.UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8002c04:	f8c5 3ad4 	str.w	r3, [r5, #2772]	; 0xad4
  Test_Context_Ptr->UartContext.UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c08:	f8c5 3ad8 	str.w	r3, [r5, #2776]	; 0xad8
  Test_Context_Ptr->UartContext.UartHandle.Init.ClockPrescaler  = UART_PRESCALER_DIV1;
 8002c0c:	f8c5 3ae0 	str.w	r3, [r5, #2784]	; 0xae0
  Test_Context_Ptr->UartContext.UartHandle.Init.OneBitSampling  = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c10:	f8c5 3adc 	str.w	r3, [r5, #2780]	; 0xadc
  Test_Context_Ptr->UartContext.UartHandle.Instance        = USARTx;
 8002c14:	f8c5 4abc 	str.w	r4, [r5, #2748]	; 0xabc
  Test_Context_Ptr->UartContext.UartHandle.Init.BaudRate   = 115200;
 8002c18:	f8c5 1ac0 	str.w	r1, [r5, #2752]	; 0xac0
  Test_Context_Ptr->UartContext.UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8002c1c:	f8c5 2ad0 	str.w	r2, [r5, #2768]	; 0xad0
  if(HAL_UART_Init(&Test_Context_Ptr->UartContext.UartHandle) != HAL_OK)
 8002c20:	f00f fbca 	bl	80123b8 <HAL_UART_Init>
 8002c24:	b108      	cbz	r0, 8002c2a <TEST_Init+0x9e>
    Error_Handler();
 8002c26:	f001 fdbf 	bl	80047a8 <Error_Handler>
  char alive_msg[64]="Board ON & UART link OK \n";
 8002c2a:	4e15      	ldr	r6, [pc, #84]	; (8002c80 <TEST_Init+0xf4>)
 8002c2c:	466c      	mov	r4, sp
 8002c2e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002c30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c32:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
  strcpy((char*)aTxBuffer, alive_msg);
 8002c36:	466e      	mov	r6, sp
  char alive_msg[64]="Board ON & UART link OK \n";
 8002c38:	c403      	stmia	r4!, {r0, r1}
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	8022      	strh	r2, [r4, #0]
 8002c3e:	f10d 001a 	add.w	r0, sp, #26
 8002c42:	2226      	movs	r2, #38	; 0x26
 8002c44:	f01a ff53 	bl	801daee <memset>
  strcpy((char*)aTxBuffer, alive_msg);
 8002c48:	4c0e      	ldr	r4, [pc, #56]	; (8002c84 <TEST_Init+0xf8>)
 8002c4a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002c4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c4e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8002c52:	c403      	stmia	r4!, {r0, r1}
 8002c54:	4621      	mov	r1, r4
  Uart_Tx(Test_Context_Ptr, (uint8_t*)aTxBuffer, sizeof(aTxBuffer), strlen (alive_msg));
 8002c56:	4628      	mov	r0, r5
 8002c58:	2319      	movs	r3, #25
  strcpy((char*)aTxBuffer, alive_msg);
 8002c5a:	f821 2918 	strh.w	r2, [r1], #-24
  Uart_Tx(Test_Context_Ptr, (uint8_t*)aTxBuffer, sizeof(aTxBuffer), strlen (alive_msg));
 8002c5e:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8002c62:	f7fe ff31 	bl	8001ac8 <Uart_Tx>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002c66:	4638      	mov	r0, r7
 8002c68:	220a      	movs	r2, #10
 8002c6a:	4907      	ldr	r1, [pc, #28]	; (8002c88 <TEST_Init+0xfc>)
 8002c6c:	f00f f956 	bl	8011f1c <HAL_UART_Receive_DMA>
 8002c70:	b108      	cbz	r0, 8002c76 <TEST_Init+0xea>
    Error_Handler();
 8002c72:	f001 fd99 	bl	80047a8 <Error_Handler>
  Test_Context_Init(Test_Context_Ptr);

#ifndef OBJECTDETECT
  Test_ComIf_Init(Test_Context_Ptr);
#endif /* !OBJECTDETECT */
}
 8002c76:	b011      	add	sp, #68	; 0x44
 8002c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40011000 	.word	0x40011000
 8002c80:	0801ff60 	.word	0x0801ff60
 8002c84:	24002800 	.word	0x24002800
 8002c88:	240027e0 	.word	0x240027e0

08002c8c <TEST_CmdIf_Check>:
 * @brief Check UART status for any received frame
 *
 * @param Test_Context_Ptr pointer to test context
 */
void TEST_CmdIf_Check(TestContext_TypeDef *Test_Context_Ptr)
{
 8002c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if((HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) == HAL_UART_STATE_READY) && (Test_Context_Ptr->UartContext.uart_cmd_ongoing ==0))
 8002c90:	f600 24bc 	addw	r4, r0, #2748	; 0xabc
{
 8002c94:	4605      	mov	r5, r0
  if((HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) == HAL_UART_STATE_READY) && (Test_Context_Ptr->UartContext.uart_cmd_ongoing ==0))
 8002c96:	4620      	mov	r0, r4
 8002c98:	f00f fb30 	bl	80122fc <HAL_UART_GetState>
 8002c9c:	2820      	cmp	r0, #32
 8002c9e:	d001      	beq.n	8002ca4 <TEST_CmdIf_Check+0x18>

      /**Configure the UART in reception mode for receiving subsequent command from Host**/
      Uart_Rx(Test_Context_Ptr, aRxBuffer, RX_TRANSFER_SIZE);
    }
  }
}
 8002ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if((HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) == HAL_UART_STATE_READY) && (Test_Context_Ptr->UartContext.uart_cmd_ongoing ==0))
 8002ca4:	f8d5 6aa0 	ldr.w	r6, [r5, #2720]	; 0xaa0
 8002ca8:	2e00      	cmp	r6, #0
 8002caa:	d1f9      	bne.n	8002ca0 <TEST_CmdIf_Check+0x14>
    UTILS_DCache_Coherency_Maintenance((void *)aRxBuffer, RX_BUFFER_SIZE, INVALIDATE);
 8002cac:	4f28      	ldr	r7, [pc, #160]	; (8002d50 <TEST_CmdIf_Check+0xc4>)
 8002cae:	4601      	mov	r1, r0
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	4638      	mov	r0, r7
 8002cb4:	f001 fd0c 	bl	80046d0 <UTILS_DCache_Coherency_Maintenance>
    if(aRxBuffer[0]< UART_CMD_NUMBER)
 8002cb8:	783b      	ldrb	r3, [r7, #0]
 8002cba:	2b18      	cmp	r3, #24
 8002cbc:	d91e      	bls.n	8002cfc <TEST_CmdIf_Check+0x70>
      *(aTxBuffer) = CMD_NACK_EVT;
 8002cbe:	4d25      	ldr	r5, [pc, #148]	; (8002d54 <TEST_CmdIf_Check+0xc8>)
 8002cc0:	2601      	movs	r6, #1
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 8002cc8:	4628      	mov	r0, r5
      *(aTxBuffer) = CMD_NACK_EVT;
 8002cca:	702e      	strb	r6, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002ccc:	f001 fd00 	bl	80046d0 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002cd0:	4632      	mov	r2, r6
 8002cd2:	4629      	mov	r1, r5
 8002cd4:	4620      	mov	r0, r4
 8002cd6:	f00f f8cb 	bl	8011e70 <HAL_UART_Transmit_DMA>
 8002cda:	bba8      	cbnz	r0, 8002d48 <TEST_CmdIf_Check+0xbc>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002cdc:	4620      	mov	r0, r4
 8002cde:	f00f fb0d 	bl	80122fc <HAL_UART_GetState>
 8002ce2:	2820      	cmp	r0, #32
 8002ce4:	d1fa      	bne.n	8002cdc <TEST_CmdIf_Check+0x50>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002ce6:	4620      	mov	r0, r4
 8002ce8:	220a      	movs	r2, #10
 8002cea:	4919      	ldr	r1, [pc, #100]	; (8002d50 <TEST_CmdIf_Check+0xc4>)
 8002cec:	f00f f916 	bl	8011f1c <HAL_UART_Receive_DMA>
 8002cf0:	2800      	cmp	r0, #0
 8002cf2:	d0d5      	beq.n	8002ca0 <TEST_CmdIf_Check+0x14>
}
 8002cf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    Error_Handler();
 8002cf8:	f001 bd56 	b.w	80047a8 <Error_Handler>
      *(aTxBuffer) = CMD_ACK_EVT;
 8002cfc:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8002d54 <TEST_CmdIf_Check+0xc8>
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002d00:	2202      	movs	r2, #2
 8002d02:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 8002d06:	4640      	mov	r0, r8
      *(aTxBuffer) = CMD_ACK_EVT;
 8002d08:	f888 6000 	strb.w	r6, [r8]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002d0c:	f001 fce0 	bl	80046d0 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002d10:	4641      	mov	r1, r8
 8002d12:	2201      	movs	r2, #1
 8002d14:	4620      	mov	r0, r4
 8002d16:	f00f f8ab 	bl	8011e70 <HAL_UART_Transmit_DMA>
 8002d1a:	b990      	cbnz	r0, 8002d42 <TEST_CmdIf_Check+0xb6>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002d1c:	4620      	mov	r0, r4
 8002d1e:	f00f faed 	bl	80122fc <HAL_UART_GetState>
 8002d22:	2820      	cmp	r0, #32
 8002d24:	d1fa      	bne.n	8002d1c <TEST_CmdIf_Check+0x90>
      HAL_Delay(500);
 8002d26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d2a:	f007 fc6f 	bl	800a60c <HAL_Delay>
      (*UartCmdFct_Table[*(uint8_t*)aRxBuffer])(Test_Context_Ptr, (uint8_t *)(aRxBuffer+1), 0/*not used for now*/);
 8002d2e:	783c      	ldrb	r4, [r7, #0]
 8002d30:	4b09      	ldr	r3, [pc, #36]	; (8002d58 <TEST_CmdIf_Check+0xcc>)
 8002d32:	4628      	mov	r0, r5
 8002d34:	2200      	movs	r2, #0
 8002d36:	4909      	ldr	r1, [pc, #36]	; (8002d5c <TEST_CmdIf_Check+0xd0>)
 8002d38:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
}
 8002d3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      (*UartCmdFct_Table[*(uint8_t*)aRxBuffer])(Test_Context_Ptr, (uint8_t *)(aRxBuffer+1), 0/*not used for now*/);
 8002d40:	4718      	bx	r3
      Error_Handler();
 8002d42:	f001 fd31 	bl	80047a8 <Error_Handler>
 8002d46:	e7e9      	b.n	8002d1c <TEST_CmdIf_Check+0x90>
 8002d48:	f001 fd2e 	bl	80047a8 <Error_Handler>
 8002d4c:	e7c6      	b.n	8002cdc <TEST_CmdIf_Check+0x50>
 8002d4e:	bf00      	nop
 8002d50:	240027e0 	.word	0x240027e0
 8002d54:	24002800 	.word	0x24002800
 8002d58:	08020828 	.word	0x08020828
 8002d5c:	240027e1 	.word	0x240027e1

08002d60 <TEST_MainMenu>:
 *        - Camera Capture
 *
 * @param Test_Context_Ptr pointer to test context
 */
void TEST_MainMenu(TestContext_TypeDef *Test_Context_Ptr)
{
 8002d60:	b570      	push	{r4, r5, r6, lr}
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;

  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);

  UTIL_LCD_DrawRect(200, 10, 400, 50, UTIL_LCD_COLOR_WHITE);
 8002d62:	f04f 34ff 	mov.w	r4, #4294967295
{
 8002d66:	b082      	sub	sp, #8
 8002d68:	4605      	mov	r5, r0
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8002d6a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 8002d6e:	f8d5 6b7c 	ldr.w	r6, [r5, #2940]	; 0xb7c
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8002d72:	f016 fdef 	bl	8019954 <UTIL_LCD_Clear>
  UTIL_LCD_DrawRect(200, 10, 400, 50, UTIL_LCD_COLOR_WHITE);
 8002d76:	2332      	movs	r3, #50	; 0x32
 8002d78:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002d7c:	210a      	movs	r1, #10
 8002d7e:	20c8      	movs	r0, #200	; 0xc8
 8002d80:	9400      	str	r4, [sp, #0]
 8002d82:	f016 ff8d 	bl	8019ca0 <UTIL_LCD_DrawRect>
  UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"Operating mode", CENTER_MODE);
 8002d86:	f016 fddd 	bl	8019944 <UTIL_LCD_GetFont>
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	88c1      	ldrh	r1, [r0, #6]
 8002d8e:	2000      	movs	r0, #0
 8002d90:	4a6f      	ldr	r2, [pc, #444]	; (8002f50 <TEST_MainMenu+0x1f0>)
 8002d92:	f016 fea5 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>

  UTIL_LCD_DisplayStringAt(0, LINE(5), (uint8_t *)"Press one of the key of the joystick", CENTER_MODE);
 8002d96:	f016 fdd5 	bl	8019944 <UTIL_LCD_GetFont>
 8002d9a:	88c1      	ldrh	r1, [r0, #6]
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	4a6d      	ldr	r2, [pc, #436]	; (8002f54 <TEST_MainMenu+0x1f4>)
 8002da0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002da4:	2000      	movs	r0, #0
 8002da6:	f016 fe9b 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(6), (uint8_t *)"to select an operating mode", CENTER_MODE);
 8002daa:	f016 fdcb 	bl	8019944 <UTIL_LCD_GetFont>
 8002dae:	88c1      	ldrh	r1, [r0, #6]
 8002db0:	2301      	movs	r3, #1
 8002db2:	4a69      	ldr	r2, [pc, #420]	; (8002f58 <TEST_MainMenu+0x1f8>)
 8002db4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8002db8:	2000      	movs	r0, #0
 8002dba:	4099      	lsls	r1, r3
 8002dbc:	f016 fe90 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
    uint16_t y;
  };
  const struct point_t pt_center = {.x = 400, .y = 350}; /* x,y coordinates */
  const uint16_t pt_offset = 50;                         /* pixels offset from the center (wideness of the square) */

  UTIL_LCD_DrawLine(pt_center.x - pt_offset, pt_center.y, pt_center.x, pt_center.y - pt_offset, UTIL_LCD_COLOR_WHITE);
 8002dc0:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8002dc4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002dc8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002dcc:	4608      	mov	r0, r1
 8002dce:	9400      	str	r4, [sp, #0]
 8002dd0:	f016 fed8 	bl	8019b84 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x, pt_center.y - pt_offset, pt_center.x + pt_offset, pt_center.y, UTIL_LCD_COLOR_WHITE);
 8002dd4:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8002dd8:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8002ddc:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002de0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002de4:	9400      	str	r4, [sp, #0]
 8002de6:	f016 fecd 	bl	8019b84 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x + pt_offset, pt_center.y, pt_center.x, pt_center.y + pt_offset, UTIL_LCD_COLOR_WHITE);
 8002dea:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002dee:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8002df2:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8002df6:	461a      	mov	r2, r3
 8002df8:	9400      	str	r4, [sp, #0]
 8002dfa:	f016 fec3 	bl	8019b84 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x, pt_center.y + pt_offset, pt_center.x - pt_offset, pt_center.y, UTIL_LCD_COLOR_WHITE);
 8002dfe:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8002e02:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002e06:	9400      	str	r4, [sp, #0]
 8002e08:	461a      	mov	r2, r3
 8002e0a:	4608      	mov	r0, r1
 8002e0c:	f016 feba 	bl	8019b84 <UTIL_LCD_DrawLine>

  const char *appli_names[] = {"Nominal Run", "Frame Capture", "OnBoard Validation",
                                   "Memory Dump"};

  UTIL_LCD_DisplayStringAt(0, pt_center.y - pt_offset - LINE(2), (uint8_t*)appli_names[0], CENTER_MODE);//UP
 8002e10:	f016 fd98 	bl	8019944 <UTIL_LCD_GetFont>
 8002e14:	2301      	movs	r3, #1
 8002e16:	88c1      	ldrh	r1, [r0, #6]
 8002e18:	2000      	movs	r0, #0
 8002e1a:	4a50      	ldr	r2, [pc, #320]	; (8002f5c <TEST_MainMenu+0x1fc>)
 8002e1c:	4099      	lsls	r1, r3
 8002e1e:	f5c1 7196 	rsb	r1, r1, #300	; 0x12c
 8002e22:	f016 fe5d 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(pt_center.x + pt_offset + 10, pt_center.y - LINE(1) / 2, (uint8_t*)appli_names[1], LEFT_MODE);//RIGHT
 8002e26:	f016 fd8d 	bl	8019944 <UTIL_LCD_GetFont>
 8002e2a:	88c1      	ldrh	r1, [r0, #6]
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	4a4c      	ldr	r2, [pc, #304]	; (8002f60 <TEST_MainMenu+0x200>)
 8002e30:	1049      	asrs	r1, r1, #1
 8002e32:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
 8002e36:	f5c1 71af 	rsb	r1, r1, #350	; 0x15e
 8002e3a:	f016 fe51 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, pt_center.y + pt_offset + LINE(1), (uint8_t*)appli_names[2], CENTER_MODE);//DOWN
 8002e3e:	f016 fd81 	bl	8019944 <UTIL_LCD_GetFont>
 8002e42:	88c1      	ldrh	r1, [r0, #6]
 8002e44:	2301      	movs	r3, #1
 8002e46:	4a47      	ldr	r2, [pc, #284]	; (8002f64 <TEST_MainMenu+0x204>)
 8002e48:	f501 71c8 	add.w	r1, r1, #400	; 0x190
 8002e4c:	2000      	movs	r0, #0
 8002e4e:	f016 fe47 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(150, pt_center.y - LINE(1) / 2, (uint8_t*)appli_names[3], LEFT_MODE);//LEFT
 8002e52:	f016 fd77 	bl	8019944 <UTIL_LCD_GetFont>
 8002e56:	88c1      	ldrh	r1, [r0, #6]
 8002e58:	2303      	movs	r3, #3
 8002e5a:	4a43      	ldr	r2, [pc, #268]	; (8002f68 <TEST_MainMenu+0x208>)
 8002e5c:	1049      	asrs	r1, r1, #1
 8002e5e:	2096      	movs	r0, #150	; 0x96
 8002e60:	f5c1 71af 	rsb	r1, r1, #350	; 0x15e
 8002e64:	f016 fe3c 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>

  DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8002e68:	6e70      	ldr	r0, [r6, #100]	; 0x64
 8002e6a:	f7fe fd49 	bl	8001900 <DISPLAY_Refresh>

  if(Test_Context_Ptr->UartContext.uart_cmd_ongoing)
 8002e6e:	f8d5 3aa0 	ldr.w	r3, [r5, #2720]	; 0xaa0
 8002e72:	b143      	cbz	r3, 8002e86 <TEST_MainMenu+0x126>
  {
    switch (Test_Context_Ptr->UartContext.uart_host_requested_mode)
 8002e74:	f895 3aa4 	ldrb.w	r3, [r5, #2724]	; 0xaa4
 8002e78:	4423      	add	r3, r4
 8002e7a:	2b03      	cmp	r3, #3
 8002e7c:	d827      	bhi.n	8002ece <TEST_MainMenu+0x16e>
 8002e7e:	e8df f003 	tbb	[pc, r3]
 8002e82:	2f21      	.short	0x2f21
 8002e84:	2839      	.short	0x2839
  else
  {
    JOYPin_TypeDef joy_state = JOY_NONE;
    while (joy_state == JOY_NONE)
    {
      joy_state = (JOYPin_TypeDef) BSP_JOY_GetState(JOY1, 0);
 8002e86:	2100      	movs	r1, #0
 8002e88:	4608      	mov	r0, r1
 8002e8a:	f005 fa3b 	bl	8008304 <BSP_JOY_GetState>
 8002e8e:	b2c0      	uxtb	r0, r0
    while (joy_state == JOY_NONE)
 8002e90:	2800      	cmp	r0, #0
 8002e92:	d0f8      	beq.n	8002e86 <TEST_MainMenu+0x126>
    }

    switch (joy_state)
 8002e94:	3802      	subs	r0, #2
 8002e96:	280e      	cmp	r0, #14
 8002e98:	d80e      	bhi.n	8002eb8 <TEST_MainMenu+0x158>
 8002e9a:	e8df f000 	tbb	[pc, r0]
 8002e9e:	0d43      	.short	0x0d43
 8002ea0:	0d0d0d37 	.word	0x0d0d0d37
 8002ea4:	0d0d0d08 	.word	0x0d0d0d08
 8002ea8:	0d0d0d0d 	.word	0x0d0d0d0d
 8002eac:	51          	.byte	0x51
 8002ead:	00          	.byte	0x00
    {
    case JOY_RIGHT:
      FrameCaptureInit(Test_Context_Ptr);
 8002eae:	4628      	mov	r0, r5
 8002eb0:	f7fe ff02 	bl	8001cb8 <FrameCaptureInit>
      App_Cxt_Ptr->Operating_Mode=CAPTURE;
 8002eb4:	2304      	movs	r3, #4
 8002eb6:	7033      	strb	r3, [r6, #0]
    default:
      break;
    };

    //Tempo joystick
    HAL_Delay(200);
 8002eb8:	20c8      	movs	r0, #200	; 0xc8
  }
}
 8002eba:	b002      	add	sp, #8
 8002ebc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_Delay(200);
 8002ec0:	f007 bba4 	b.w	800a60c <HAL_Delay>
      App_Cxt_Ptr->Operating_Mode=NOMINAL;
 8002ec4:	2201      	movs	r2, #1
      Test_Context_Ptr->UartContext.uart_cmd_ongoing=0;//returning to NOMINAL mode terminates the UART command processing
 8002ec6:	2300      	movs	r3, #0
      App_Cxt_Ptr->Operating_Mode=NOMINAL;
 8002ec8:	7032      	strb	r2, [r6, #0]
      Test_Context_Ptr->UartContext.uart_cmd_ongoing=0;//returning to NOMINAL mode terminates the UART command processing
 8002eca:	f8c5 3aa0 	str.w	r3, [r5, #2720]	; 0xaa0
}
 8002ece:	b002      	add	sp, #8
 8002ed0:	bd70      	pop	{r4, r5, r6, pc}
      FrameCaptureInit(Test_Context_Ptr);
 8002ed2:	4628      	mov	r0, r5
 8002ed4:	f7fe fef0 	bl	8001cb8 <FrameCaptureInit>
      App_Cxt_Ptr->Operating_Mode=CAPTURE;
 8002ed8:	2304      	movs	r3, #4
 8002eda:	7033      	strb	r3, [r6, #0]
}
 8002edc:	b002      	add	sp, #8
 8002ede:	bd70      	pop	{r4, r5, r6, pc}
      OnBoardValidInit(Test_Context_Ptr);
 8002ee0:	4628      	mov	r0, r5
 8002ee2:	f7ff f949 	bl	8002178 <OnBoardValidInit>
      App_Cxt_Ptr->Operating_Mode=VALID;
 8002ee6:	2102      	movs	r1, #2
      App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready=1;
 8002ee8:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8002eea:	2201      	movs	r2, #1
      App_Cxt_Ptr->Operating_Mode=VALID;
 8002eec:	7031      	strb	r1, [r6, #0]
      App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready=1;
 8002eee:	751a      	strb	r2, [r3, #20]
}
 8002ef0:	b002      	add	sp, #8
 8002ef2:	bd70      	pop	{r4, r5, r6, pc}
      MemoryDumpInit(Test_Context_Ptr);
 8002ef4:	4628      	mov	r0, r5
 8002ef6:	f7fe ffdf 	bl	8001eb8 <MemoryDumpInit>
      if(Test_Context_Ptr->DumpContext.Dump_FrameSource == SDCARD_FILE)
 8002efa:	792b      	ldrb	r3, [r5, #4]
      App_Cxt_Ptr->Operating_Mode=DUMP;
 8002efc:	2203      	movs	r2, #3
      if(Test_Context_Ptr->DumpContext.Dump_FrameSource == SDCARD_FILE)
 8002efe:	4293      	cmp	r3, r2
      App_Cxt_Ptr->Operating_Mode=DUMP;
 8002f00:	7032      	strb	r2, [r6, #0]
      if(Test_Context_Ptr->DumpContext.Dump_FrameSource == SDCARD_FILE)
 8002f02:	d1e4      	bne.n	8002ece <TEST_MainMenu+0x16e>
        App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready=1;
 8002f04:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8002f06:	2201      	movs	r2, #1
 8002f08:	751a      	strb	r2, [r3, #20]
 8002f0a:	e7e0      	b.n	8002ece <TEST_MainMenu+0x16e>
      MemoryDumpInit(Test_Context_Ptr);
 8002f0c:	4628      	mov	r0, r5
 8002f0e:	f7fe ffd3 	bl	8001eb8 <MemoryDumpInit>
      if(Test_Context_Ptr->DumpContext.Dump_FrameSource == SDCARD_FILE)
 8002f12:	792b      	ldrb	r3, [r5, #4]
      App_Cxt_Ptr->Operating_Mode=DUMP;
 8002f14:	2203      	movs	r2, #3
      if(Test_Context_Ptr->DumpContext.Dump_FrameSource == SDCARD_FILE)
 8002f16:	4293      	cmp	r3, r2
      App_Cxt_Ptr->Operating_Mode=DUMP;
 8002f18:	7032      	strb	r2, [r6, #0]
      if(Test_Context_Ptr->DumpContext.Dump_FrameSource == SDCARD_FILE)
 8002f1a:	d1cd      	bne.n	8002eb8 <TEST_MainMenu+0x158>
        App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready=1;
 8002f1c:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8002f1e:	2201      	movs	r2, #1
 8002f20:	751a      	strb	r2, [r3, #20]
 8002f22:	e7c9      	b.n	8002eb8 <TEST_MainMenu+0x158>
      OnBoardValidInit(Test_Context_Ptr);
 8002f24:	4628      	mov	r0, r5
 8002f26:	f7ff f927 	bl	8002178 <OnBoardValidInit>
      App_Cxt_Ptr->Operating_Mode=VALID;
 8002f2a:	2102      	movs	r1, #2
      App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready=1;
 8002f2c:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8002f2e:	2201      	movs	r2, #1
    HAL_Delay(200);
 8002f30:	20c8      	movs	r0, #200	; 0xc8
      App_Cxt_Ptr->Operating_Mode=VALID;
 8002f32:	7031      	strb	r1, [r6, #0]
      App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready=1;
 8002f34:	751a      	strb	r2, [r3, #20]
}
 8002f36:	b002      	add	sp, #8
 8002f38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_Delay(200);
 8002f3c:	f007 bb66 	b.w	800a60c <HAL_Delay>
      App_Cxt_Ptr->Operating_Mode=NOMINAL;
 8002f40:	2301      	movs	r3, #1
    HAL_Delay(200);
 8002f42:	20c8      	movs	r0, #200	; 0xc8
      App_Cxt_Ptr->Operating_Mode=NOMINAL;
 8002f44:	7033      	strb	r3, [r6, #0]
}
 8002f46:	b002      	add	sp, #8
 8002f48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_Delay(200);
 8002f4c:	f007 bb5e 	b.w	800a60c <HAL_Delay>
 8002f50:	08020680 	.word	0x08020680
 8002f54:	08020198 	.word	0x08020198
 8002f58:	08020690 	.word	0x08020690
 8002f5c:	080208e0 	.word	0x080208e0
 8002f60:	080208ec 	.word	0x080208ec
 8002f64:	080208fc 	.word	0x080208fc
 8002f68:	08020910 	.word	0x08020910

08002f6c <TEST_GetNextDumpInput>:
 *
 * @param TestContext_Ptr pointer to test context
 * @param DestBuffPtr pointer to the destination buffer where the input file data content is copied to
 */
void TEST_GetNextDumpInput(TestContext_TypeDef *TestContext_Ptr, uint8_t * DestBuffPtr)
{
 8002f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
  DIR class_dir;
  FILINFO img_fno;
#if CAMERA_CAPTURE_RES == VGA_640_480_RES
  char  class_path[64]=  "/dump_src_image_vga";
 8002f6e:	4d1a      	ldr	r5, [pc, #104]	; (8002fd8 <TEST_GetNextDumpInput+0x6c>)
{
 8002f70:	b0e5      	sub	sp, #404	; 0x194
 8002f72:	4607      	mov	r7, r0
 8002f74:	460e      	mov	r6, r1
  char  class_path[64]=  "/dump_src_image_vga";
 8002f76:	ac0e      	add	r4, sp, #56	; 0x38
 8002f78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f7a:	682d      	ldr	r5, [r5, #0]
 8002f7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f7e:	222c      	movs	r2, #44	; 0x2c
 8002f80:	2100      	movs	r1, #0
 8002f82:	a813      	add	r0, sp, #76	; 0x4c
 8002f84:	6025      	str	r5, [r4, #0]
 8002f86:	f01a fdb2 	bl	801daee <memset>
#endif
  stm32fs_err_t err;
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;


  STM32Fs_OpenDir(class_path, &class_dir);
 8002f8a:	a901      	add	r1, sp, #4
 8002f8c:	a80e      	add	r0, sp, #56	; 0x38
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 8002f8e:	f8d7 5b7c 	ldr.w	r5, [r7, #2940]	; 0xb7c
  STM32Fs_OpenDir(class_path, &class_dir);
 8002f92:	f015 fecf 	bl	8018d34 <STM32Fs_OpenDir>

  /* For each image in this directory (i.e class) */
  if(STM32Fs_GetNextFile(&class_dir, &img_fno) != STM32FS_ERROR_NONE)
 8002f96:	a801      	add	r0, sp, #4
 8002f98:	a91e      	add	r1, sp, #120	; 0x78
 8002f9a:	f015 feef 	bl	8018d7c <STM32Fs_GetNextFile>
 8002f9e:	b100      	cbz	r0, 8002fa2 <TEST_GetNextDumpInput+0x36>
 8002fa0:	e7fe      	b.n	8002fa0 <TEST_GetNextDumpInput+0x34>
    while(1);

  strcpy(tmp_msg, class_path);
 8002fa2:	4c0e      	ldr	r4, [pc, #56]	; (8002fdc <TEST_GetNextDumpInput+0x70>)
 8002fa4:	a90e      	add	r1, sp, #56	; 0x38
 8002fa6:	4620      	mov	r0, r4
 8002fa8:	f01b fabe 	bl	801e528 <stpcpy>
  strcat(tmp_msg, "/");
 8002fac:	232f      	movs	r3, #47	; 0x2f
  strcat(tmp_msg, img_fno.fname);
 8002fae:	f10d 018e 	add.w	r1, sp, #142	; 0x8e
 8002fb2:	3001      	adds	r0, #1
  strcat(tmp_msg, "/");
 8002fb4:	f800 3c01 	strb.w	r3, [r0, #-1]
  strcat(tmp_msg, img_fno.fname);
 8002fb8:	f01b fabf 	bl	801e53a <strcpy>

  /* Read the image to DestBuffPtr */
  err = STM23Fs_ReadImageBMP(tmp_msg, DestBuffPtr);
 8002fbc:	4631      	mov	r1, r6
 8002fbe:	4620      	mov	r0, r4
 8002fc0:	f016 fab8 	bl	8019534 <STM23Fs_ReadImageBMP>
  if (err != STM32FS_ERROR_NONE)
 8002fc4:	b100      	cbz	r0, 8002fc8 <TEST_GetNextDumpInput+0x5c>
 8002fc6:	e7fe      	b.n	8002fc6 <TEST_GetNextDumpInput+0x5a>
  {
    while(1);
  }

  f_closedir(&class_dir);
 8002fc8:	a801      	add	r0, sp, #4
 8002fca:	f014 fd6f 	bl	8017aac <f_closedir>

  App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready = 1;
 8002fce:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	751a      	strb	r2, [r3, #20]
}
 8002fd4:	b065      	add	sp, #404	; 0x194
 8002fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fd8:	0801ff20 	.word	0x0801ff20
 8002fdc:	24002e30 	.word	0x24002e30

08002fe0 <TEST_GetNextValidationInput>:
 *
 * @param TestContext_Ptr pointer to test context
 * @param DestBuffPtr pointer to the destination buffer where the input file data content is copied to
 */
void TEST_GetNextValidationInput(TestContext_TypeDef *TestContext_Ptr, uint8_t * DestBuffPtr)
{
 8002fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DestBuffPtr = App_Cxt_Ptr->Camera_ContextPtr->camera_capture_buffer;
#endif
#endif /* OBJECTDETECT */

  /* Get next image in this directory (i.e class) */
  if(STM32Fs_GetNextFile(&TestContext_Ptr->ValidationContext.class_dir, &TestContext_Ptr->ValidationContext.img_fno) == STM32FS_ERROR_NONE)
 8002fe4:	f500 7a29 	add.w	sl, r0, #676	; 0x2a4
 8002fe8:	f500 761c 	add.w	r6, r0, #624	; 0x270
{
 8002fec:	4683      	mov	fp, r0
 8002fee:	460f      	mov	r7, r1
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 8002ff0:	f8d0 5b7c 	ldr.w	r5, [r0, #2940]	; 0xb7c
  if(STM32Fs_GetNextFile(&TestContext_Ptr->ValidationContext.class_dir, &TestContext_Ptr->ValidationContext.img_fno) == STM32FS_ERROR_NONE)
 8002ff4:	4630      	mov	r0, r6
{
 8002ff6:	ed2d 8b10 	vpush	{d8-d15}
 8002ffa:	f5ad 7d7b 	sub.w	sp, sp, #1004	; 0x3ec
 8002ffe:	910a      	str	r1, [sp, #40]	; 0x28
  if(STM32Fs_GetNextFile(&TestContext_Ptr->ValidationContext.class_dir, &TestContext_Ptr->ValidationContext.img_fno) == STM32FS_ERROR_NONE)
 8003000:	4651      	mov	r1, sl
 8003002:	f015 febb 	bl	8018d7c <STM32Fs_GetNextFile>
 8003006:	b9d8      	cbnz	r0, 8003040 <TEST_GetNextValidationInput+0x60>
    stm32fs_err_t err;

    BSP_LED_Toggle(LED_BLUE);
    UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);

    strcpy(tmp_msg, TestContext_Ptr->ValidationContext.tmp_class_path);
 8003008:	4c6c      	ldr	r4, [pc, #432]	; (80031bc <TEST_GetNextValidationInput+0x1dc>)
    BSP_LED_Toggle(LED_BLUE);
 800300a:	2003      	movs	r0, #3
 800300c:	f005 f886 	bl	800811c <BSP_LED_Toggle>
    UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8003010:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8003014:	f016 fc9e 	bl	8019954 <UTIL_LCD_Clear>
    strcpy(tmp_msg, TestContext_Ptr->ValidationContext.tmp_class_path);
 8003018:	f50b 6180 	add.w	r1, fp, #1024	; 0x400
 800301c:	4620      	mov	r0, r4
 800301e:	f01b fa83 	bl	801e528 <stpcpy>
    strcat(tmp_msg, "/");
 8003022:	222f      	movs	r2, #47	; 0x2f
    strcpy(tmp_msg, TestContext_Ptr->ValidationContext.tmp_class_path);
 8003024:	4603      	mov	r3, r0
    strcat(tmp_msg, TestContext_Ptr->ValidationContext.img_fno.fname);
 8003026:	f20b 21ba 	addw	r1, fp, #698	; 0x2ba
 800302a:	3001      	adds	r0, #1
    strcat(tmp_msg, "/");
 800302c:	701a      	strb	r2, [r3, #0]
    strcat(tmp_msg, TestContext_Ptr->ValidationContext.img_fno.fname);
 800302e:	f01b fa84 	bl	801e53a <strcpy>

    /* Read the image to DestBuffPtr */
    err = STM23Fs_ReadImageBMP(tmp_msg, DestBuffPtr);
 8003032:	4639      	mov	r1, r7
 8003034:	4620      	mov	r0, r4
 8003036:	f016 fa7d 	bl	8019534 <STM23Fs_ReadImageBMP>

    if (err != STM32FS_ERROR_NONE)
 800303a:	2800      	cmp	r0, #0
 800303c:	d06d      	beq.n	800311a <TEST_GetNextValidationInput+0x13a>
 800303e:	e7fe      	b.n	800303e <TEST_GetNextValidationInput+0x5e>
 8003040:	f50b 7392 	add.w	r3, fp, #292	; 0x124

  } /* End for each file in class directory */
  else
  {
    /*Close class directory*/
    f_closedir(&TestContext_Ptr->ValidationContext.class_dir);
 8003044:	4630      	mov	r0, r6
  FIND_NEXT_DIR:
    /* Get into next directory in "/onboard_valid_dataset" directory */
    if(STM32Fs_GetNextDir(&TestContext_Ptr->ValidationContext.dataset_dir, &TestContext_Ptr->ValidationContext.fno) == STM32FS_ERROR_NONE)
    {
      /* Find corresponding class index */
      TestContext_Ptr->ValidationContext.class_index = FindClassIndexFromString(TestContext_Ptr->ValidationContext.fno.fname);
 8003046:	f50b 74b7 	add.w	r4, fp, #366	; 0x16e
        BSP_LED_On(LED_RED);
        while (1)
          ;
      }

      strcpy(TestContext_Ptr->ValidationContext.tmp_class_path, ""); //chaine "nulle"
 800304a:	f50b 6780 	add.w	r7, fp, #1024	; 0x400
 800304e:	9308      	str	r3, [sp, #32]
 8003050:	f50b 73ac 	add.w	r3, fp, #344	; 0x158
 8003054:	9309      	str	r3, [sp, #36]	; 0x24
      strcpy(TestContext_Ptr->ValidationContext.tmp_class_path, TestContext_Ptr->ValidationContext.class_path );
 8003056:	f50b 7370 	add.w	r3, fp, #960	; 0x3c0
 800305a:	930b      	str	r3, [sp, #44]	; 0x2c
    f_closedir(&TestContext_Ptr->ValidationContext.class_dir);
 800305c:	f014 fd26 	bl	8017aac <f_closedir>
    if(STM32Fs_GetNextDir(&TestContext_Ptr->ValidationContext.dataset_dir, &TestContext_Ptr->ValidationContext.fno) == STM32FS_ERROR_NONE)
 8003060:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003064:	f015 fe7a 	bl	8018d5c <STM32Fs_GetNextDir>
 8003068:	2800      	cmp	r0, #0
 800306a:	d15f      	bne.n	800312c <TEST_GetNextValidationInput+0x14c>
  for (size_t j = 0; j < AI_NET_OUTPUT_SIZE; j++)
 800306c:	4680      	mov	r8, r0
 800306e:	f8df 9160 	ldr.w	r9, [pc, #352]	; 80031d0 <TEST_GetNextValidationInput+0x1f0>
 8003072:	e004      	b.n	800307e <TEST_GetNextValidationInput+0x9e>
 8003074:	f108 0801 	add.w	r8, r8, #1
 8003078:	f1b8 0f12 	cmp.w	r8, #18
 800307c:	d033      	beq.n	80030e6 <TEST_GetNextValidationInput+0x106>
    if (strcmp(className, NN_OUTPUT_CLASS_LIST[j]) == 0)
 800307e:	f859 1b04 	ldr.w	r1, [r9], #4
 8003082:	4620      	mov	r0, r4
 8003084:	f7fd f92c 	bl	80002e0 <strcmp>
 8003088:	2800      	cmp	r0, #0
 800308a:	d1f3      	bne.n	8003074 <TEST_GetNextValidationInput+0x94>
      strcpy(TestContext_Ptr->ValidationContext.tmp_class_path, TestContext_Ptr->ValidationContext.class_path );
 800308c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800308e:	4638      	mov	r0, r7
      TestContext_Ptr->ValidationContext.class_index = FindClassIndexFromString(TestContext_Ptr->ValidationContext.fno.fname);
 8003090:	f8cb 83bc 	str.w	r8, [fp, #956]	; 0x3bc
      strcpy(TestContext_Ptr->ValidationContext.tmp_class_path, TestContext_Ptr->ValidationContext.class_path );
 8003094:	f01b fa48 	bl	801e528 <stpcpy>
      strcat(TestContext_Ptr->ValidationContext.tmp_class_path, TestContext_Ptr->ValidationContext.fno.fname);
 8003098:	4621      	mov	r1, r4
 800309a:	f01b fa4e 	bl	801e53a <strcpy>
      STM32Fs_OpenDir(TestContext_Ptr->ValidationContext.tmp_class_path, &TestContext_Ptr->ValidationContext.class_dir);
 800309e:	4631      	mov	r1, r6
 80030a0:	4638      	mov	r0, r7
 80030a2:	f015 fe47 	bl	8018d34 <STM32Fs_OpenDir>

      /*Get first file immediately*/
      if(STM32Fs_GetNextFile(&TestContext_Ptr->ValidationContext.class_dir, &TestContext_Ptr->ValidationContext.img_fno) == STM32FS_ERROR_NONE)
 80030a6:	4651      	mov	r1, sl
 80030a8:	4630      	mov	r0, r6
 80030aa:	f015 fe67 	bl	8018d7c <STM32Fs_GetNextFile>
 80030ae:	2800      	cmp	r0, #0
 80030b0:	d1d6      	bne.n	8003060 <TEST_GetNextValidationInput+0x80>
        stm32fs_err_t err;

        BSP_LED_Toggle(LED_BLUE);
        UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);

        strcpy(tmp_msg, TestContext_Ptr->ValidationContext.tmp_class_path);
 80030b2:	4c42      	ldr	r4, [pc, #264]	; (80031bc <TEST_GetNextValidationInput+0x1dc>)
        BSP_LED_Toggle(LED_BLUE);
 80030b4:	2003      	movs	r0, #3
 80030b6:	f005 f831 	bl	800811c <BSP_LED_Toggle>
        UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 80030ba:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80030be:	f016 fc49 	bl	8019954 <UTIL_LCD_Clear>
        strcpy(tmp_msg, TestContext_Ptr->ValidationContext.tmp_class_path);
 80030c2:	4639      	mov	r1, r7
 80030c4:	4620      	mov	r0, r4
 80030c6:	f01b fa2f 	bl	801e528 <stpcpy>
        strcat(tmp_msg, "/");
 80030ca:	222f      	movs	r2, #47	; 0x2f
        strcpy(tmp_msg, TestContext_Ptr->ValidationContext.tmp_class_path);
 80030cc:	4603      	mov	r3, r0
        strcat(tmp_msg, TestContext_Ptr->ValidationContext.img_fno.fname);
 80030ce:	f20b 21ba 	addw	r1, fp, #698	; 0x2ba
 80030d2:	3001      	adds	r0, #1
        strcat(tmp_msg, "/");
 80030d4:	701a      	strb	r2, [r3, #0]
        strcat(tmp_msg, TestContext_Ptr->ValidationContext.img_fno.fname);
 80030d6:	f01b fa30 	bl	801e53a <strcpy>

        /* Read the image to DestBuffPtr */
        err = STM23Fs_ReadImageBMP(tmp_msg, DestBuffPtr);
 80030da:	990a      	ldr	r1, [sp, #40]	; 0x28
 80030dc:	4620      	mov	r0, r4
 80030de:	f016 fa29 	bl	8019534 <STM23Fs_ReadImageBMP>
        if (err != STM32FS_ERROR_NONE)
 80030e2:	b1d0      	cbz	r0, 800311a <TEST_GetNextValidationInput+0x13a>
 80030e4:	e7fe      	b.n	80030e4 <TEST_GetNextValidationInput+0x104>
      TestContext_Ptr->ValidationContext.class_index = FindClassIndexFromString(TestContext_Ptr->ValidationContext.fno.fname);
 80030e6:	f04f 33ff 	mov.w	r3, #4294967295
        sprintf(tmp_msg, "Error, class %s doesn't exists", TestContext_Ptr->ValidationContext.fno.fname);
 80030ea:	4622      	mov	r2, r4
 80030ec:	4934      	ldr	r1, [pc, #208]	; (80031c0 <TEST_GetNextValidationInput+0x1e0>)
      TestContext_Ptr->ValidationContext.class_index = FindClassIndexFromString(TestContext_Ptr->ValidationContext.fno.fname);
 80030ee:	f8cb 33bc 	str.w	r3, [fp, #956]	; 0x3bc
        sprintf(tmp_msg, "Error, class %s doesn't exists", TestContext_Ptr->ValidationContext.fno.fname);
 80030f2:	4832      	ldr	r0, [pc, #200]	; (80031bc <TEST_GetNextValidationInput+0x1dc>)
 80030f4:	f01b f9f8 	bl	801e4e8 <siprintf>
        UTIL_LCD_DisplayStringAt(0, LINE(3), (uint8_t *)tmp_msg, CENTER_MODE);
 80030f8:	f016 fc24 	bl	8019944 <UTIL_LCD_GetFont>
 80030fc:	88c1      	ldrh	r1, [r0, #6]
 80030fe:	2301      	movs	r3, #1
 8003100:	4a2e      	ldr	r2, [pc, #184]	; (80031bc <TEST_GetNextValidationInput+0x1dc>)
 8003102:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8003106:	2000      	movs	r0, #0
 8003108:	f016 fcea 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
        DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 800310c:	6e68      	ldr	r0, [r5, #100]	; 0x64
 800310e:	f7fe fbf7 	bl	8001900 <DISPLAY_Refresh>
        BSP_LED_On(LED_RED);
 8003112:	2002      	movs	r0, #2
 8003114:	f004 ffe2 	bl	80080dc <BSP_LED_On>
 8003118:	e7fe      	b.n	8003118 <TEST_GetNextValidationInput+0x138>
        {
          while(1);
        }

        App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready = 1;
 800311a:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 800311c:	2201      	movs	r2, #1
 800311e:	751a      	strb	r2, [r3, #20]
        HAL_Delay(1000);

      TestContext_Ptr->ValidationContext.validation_completed =1;
    }
  }
}
 8003120:	f50d 7d7b 	add.w	sp, sp, #1004	; 0x3ec
 8003124:	ecbd 8b10 	vpop	{d8-d15}
 8003128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      f_closedir(&TestContext_Ptr->ValidationContext.dataset_dir);
 800312c:	9808      	ldr	r0, [sp, #32]
      BSP_LCD_FillRect(0, 50, 130, 224, 224, UTIL_LCD_COLOR_WHITE);
 800312e:	f04f 34ff 	mov.w	r4, #4294967295
      f_closedir(&TestContext_Ptr->ValidationContext.dataset_dir);
 8003132:	f014 fcbb 	bl	8017aac <f_closedir>
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLACK);
 8003136:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800313a:	f016 fbeb 	bl	8019914 <UTIL_LCD_SetTextColor>
      BSP_LCD_FillRect(0, 50, 130, 224, 224, UTIL_LCD_COLOR_WHITE);
 800313e:	23e0      	movs	r3, #224	; 0xe0
 8003140:	2282      	movs	r2, #130	; 0x82
 8003142:	2132      	movs	r1, #50	; 0x32
 8003144:	9300      	str	r3, [sp, #0]
 8003146:	2000      	movs	r0, #0
 8003148:	9401      	str	r4, [sp, #4]
 800314a:	f006 fb3b 	bl	80097c4 <BSP_LCD_FillRect>
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 800314e:	4620      	mov	r0, r4
 8003150:	f016 fbe0 	bl	8019914 <UTIL_LCD_SetTextColor>
      UTIL_LCD_DisplayStringAt(40, LINE(10), (uint8_t*)"End of validation.", LEFT_MODE);
 8003154:	f016 fbf6 	bl	8019944 <UTIL_LCD_GetFont>
 8003158:	88c1      	ldrh	r1, [r0, #6]
 800315a:	2303      	movs	r3, #3
 800315c:	4a19      	ldr	r2, [pc, #100]	; (80031c4 <TEST_GetNextValidationInput+0x1e4>)
 800315e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003162:	2028      	movs	r0, #40	; 0x28
 8003164:	0049      	lsls	r1, r1, #1
 8003166:	f016 fcbb 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
      UTIL_LCD_DisplayStringAt(40, LINE(11), (uint8_t*)"Press wake-up", LEFT_MODE);
 800316a:	f016 fbeb 	bl	8019944 <UTIL_LCD_GetFont>
 800316e:	88c1      	ldrh	r1, [r0, #6]
 8003170:	2303      	movs	r3, #3
 8003172:	4a15      	ldr	r2, [pc, #84]	; (80031c8 <TEST_GetNextValidationInput+0x1e8>)
 8003174:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 8003178:	2028      	movs	r0, #40	; 0x28
 800317a:	eb01 0144 	add.w	r1, r1, r4, lsl #1
 800317e:	f016 fcaf 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
      UTIL_LCD_DisplayStringAt(40, LINE(12), (uint8_t*)"button to see report", LEFT_MODE);
 8003182:	f016 fbdf 	bl	8019944 <UTIL_LCD_GetFont>
 8003186:	88c1      	ldrh	r1, [r0, #6]
 8003188:	2303      	movs	r3, #3
 800318a:	4a10      	ldr	r2, [pc, #64]	; (80031cc <TEST_GetNextValidationInput+0x1ec>)
 800318c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8003190:	2028      	movs	r0, #40	; 0x28
 8003192:	0089      	lsls	r1, r1, #2
 8003194:	f016 fca4 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
      DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8003198:	6e68      	ldr	r0, [r5, #100]	; 0x64
 800319a:	f7fe fbb1 	bl	8001900 <DISPLAY_Refresh>
      while((TestContext_Ptr->UartContext.uart_cmd_ongoing==0) && (BSP_PB_GetState(BUTTON_WAKEUP) == RESET))
 800319e:	e002      	b.n	80031a6 <TEST_GetNextValidationInput+0x1c6>
 80031a0:	f005 f816 	bl	80081d0 <BSP_PB_GetState>
 80031a4:	b9d0      	cbnz	r0, 80031dc <TEST_GetNextValidationInput+0x1fc>
 80031a6:	f8db 3aa0 	ldr.w	r3, [fp, #2720]	; 0xaa0
 80031aa:	4618      	mov	r0, r3
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d0f7      	beq.n	80031a0 <TEST_GetNextValidationInput+0x1c0>
        HAL_Delay(1000);
 80031b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80031b4:	f007 fa2a 	bl	800a60c <HAL_Delay>
 80031b8:	e014      	b.n	80031e4 <TEST_GetNextValidationInput+0x204>
 80031ba:	bf00      	nop
 80031bc:	24002e30 	.word	0x24002e30
 80031c0:	080204d4 	.word	0x080204d4
 80031c4:	080204f4 	.word	0x080204f4
 80031c8:	08020508 	.word	0x08020508
 80031cc:	08020518 	.word	0x08020518
 80031d0:	24000004 	.word	0x24000004
 80031d4:	00000000 	.word	0x00000000
 80031d8:	3d638e39 	.word	0x3d638e39
      if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
 80031dc:	f8db 3aa0 	ldr.w	r3, [fp, #2720]	; 0xaa0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1e5      	bne.n	80031b0 <TEST_GetNextValidationInput+0x1d0>
      UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 80031e4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
  uint32_t total_support = 0;
 80031e8:	2600      	movs	r6, #0
      UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 80031ea:	f016 fbb3 	bl	8019954 <UTIL_LCD_Clear>
 80031ee:	f50d 78dc 	add.w	r8, sp, #440	; 0x1b8
 80031f2:	f20b 4344 	addw	r3, fp, #1092	; 0x444
      ClassificationReport_Typedef report = classification_report(TestContext_Ptr->ValidationContext.valid_conf_matrix);
 80031f6:	f50b 6989 	add.w	r9, fp, #1096	; 0x448
 80031fa:	46c6      	mov	lr, r8
  for (uint32_t target = 0; target < AI_NET_OUTPUT_SIZE; target++)
 80031fc:	4630      	mov	r0, r6
    float precision = 0.0f;
 80031fe:	ed1f 7a0b 	vldr	s14, [pc, #-44]	; 80031d4 <TEST_GetNextValidationInput+0x1f4>
 8003202:	469a      	mov	sl, r3
 8003204:	930b      	str	r3, [sp, #44]	; 0x2c
      ClassificationReport_Typedef report = classification_report(TestContext_Ptr->ValidationContext.valid_conf_matrix);
 8003206:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800320a:	930a      	str	r3, [sp, #40]	; 0x28
  uint32_t diagonal_sum = 0;
 800320c:	9608      	str	r6, [sp, #32]
    uint32_t false_negatives = 0;
 800320e:	2200      	movs	r2, #0
  for (size_t j = 0; j < AI_NET_OUTPUT_SIZE; j++)
 8003210:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    uint32_t support = 0;
 8003212:	4615      	mov	r5, r2
    for (uint32_t pred = 0; pred < AI_NET_OUTPUT_SIZE; pred++)
 8003214:	4613      	mov	r3, r2
      support += conf_matrix[target][pred];
 8003216:	f854 1f04 	ldr.w	r1, [r4, #4]!
      if (target != pred)
 800321a:	4283      	cmp	r3, r0
    for (uint32_t pred = 0; pred < AI_NET_OUTPUT_SIZE; pred++)
 800321c:	f103 0301 	add.w	r3, r3, #1
      support += conf_matrix[target][pred];
 8003220:	440d      	add	r5, r1
      if (target != pred)
 8003222:	f000 821a 	beq.w	800365a <TEST_GetNextValidationInput+0x67a>
    for (uint32_t pred = 0; pred < AI_NET_OUTPUT_SIZE; pred++)
 8003226:	2b12      	cmp	r3, #18
        false_negatives += conf_matrix[target][pred];
 8003228:	440a      	add	r2, r1
    for (uint32_t pred = 0; pred < AI_NET_OUTPUT_SIZE; pred++)
 800322a:	d1f4      	bne.n	8003216 <TEST_GetNextValidationInput+0x236>
    uint32_t false_positives = 0;
 800322c:	2100      	movs	r1, #0
    for (uint32_t pred = 0; pred < AI_NET_OUTPUT_SIZE; pred++)
 800322e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003230:	f100 0c01 	add.w	ip, r0, #1
    for (uint32_t gtruth = 0; gtruth < AI_NET_OUTPUT_SIZE; gtruth++)
 8003234:	460b      	mov	r3, r1
      if (target != gtruth)
 8003236:	4298      	cmp	r0, r3
    for (uint32_t gtruth = 0; gtruth < AI_NET_OUTPUT_SIZE; gtruth++)
 8003238:	f103 0301 	add.w	r3, r3, #1
      if (target != gtruth)
 800323c:	f000 8205 	beq.w	800364a <TEST_GetNextValidationInput+0x66a>
        false_positives += conf_matrix[gtruth][target];
 8003240:	f857 4b48 	ldr.w	r4, [r7], #72
    for (uint32_t gtruth = 0; gtruth < AI_NET_OUTPUT_SIZE; gtruth++)
 8003244:	2b12      	cmp	r3, #18
        false_positives += conf_matrix[gtruth][target];
 8003246:	4421      	add	r1, r4
    for (uint32_t gtruth = 0; gtruth < AI_NET_OUTPUT_SIZE; gtruth++)
 8003248:	d1f5      	bne.n	8003236 <TEST_GetNextValidationInput+0x256>
    true_positives = conf_matrix[target][target];
 800324a:	f8d9 3000 	ldr.w	r3, [r9]
    if ((true_positives + false_positives) != 0)
 800324e:	1859      	adds	r1, r3, r1
 8003250:	441a      	add	r2, r3
 8003252:	f000 81eb 	beq.w	800362c <TEST_GetNextValidationInput+0x64c>
      precision = true_positives / (float)(true_positives + false_positives);
 8003256:	ee07 3a90 	vmov	s15, r3
 800325a:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 800325e:	ee07 1a90 	vmov	s15, r1
 8003262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003266:	eec6 6a27 	vdiv.f32	s13, s12, s15
    if ((true_positives + false_negatives) != 0)
 800326a:	2a00      	cmp	r2, #0
 800326c:	f040 81e6 	bne.w	800363c <TEST_GetNextValidationInput+0x65c>
    float recall = 0.0f;
 8003270:	eef0 7a47 	vmov.f32	s15, s14
    if ((recall + precision) != 0.0f)
 8003274:	ee37 5aa6 	vadd.f32	s10, s15, s13
 8003278:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800327c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003280:	f000 81d1 	beq.w	8003626 <TEST_GetNextValidationInput+0x646>
      f1_score = 2 * (recall * precision) / (recall + precision);
 8003284:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8003288:	ee36 6a06 	vadd.f32	s12, s12, s12
 800328c:	eec6 5a05 	vdiv.f32	s11, s12, s10
    diagonal_sum += true_positives;
 8003290:	9a08      	ldr	r2, [sp, #32]
    total_support += support;
 8003292:	442e      	add	r6, r5
    report.precisions[target] = precision;
 8003294:	ecee 6a01 	vstmia	lr!, {s13}
  for (uint32_t target = 0; target < AI_NET_OUTPUT_SIZE; target++)
 8003298:	4660      	mov	r0, ip
    diagonal_sum += true_positives;
 800329a:	441a      	add	r2, r3
 800329c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    report.recalls[target] = recall;
 800329e:	edce 7a11 	vstr	s15, [lr, #68]	; 0x44
 80032a2:	f109 094c 	add.w	r9, r9, #76	; 0x4c
 80032a6:	3304      	adds	r3, #4
    diagonal_sum += true_positives;
 80032a8:	9208      	str	r2, [sp, #32]
    report.f1_scores[target] = f1_score;
 80032aa:	edce 5a23 	vstr	s11, [lr, #140]	; 0x8c
 80032ae:	9309      	str	r3, [sp, #36]	; 0x24
 80032b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    report.supports[target] = support;
 80032b2:	f8ce 50d4 	str.w	r5, [lr, #212]	; 0xd4
 80032b6:	3348      	adds	r3, #72	; 0x48
 80032b8:	930a      	str	r3, [sp, #40]	; 0x28
  for (uint32_t target = 0; target < AI_NET_OUTPUT_SIZE; target++)
 80032ba:	ab80      	add	r3, sp, #512	; 0x200
 80032bc:	459e      	cmp	lr, r3
 80032be:	d1a6      	bne.n	800320e <TEST_GetNextValidationInput+0x22e>
 80032c0:	ee07 6a90 	vmov	s15, r6
 80032c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80032c8:	4654      	mov	r4, sl
 80032ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ce:	ee87 8a27 	vdiv.f32	s16, s14, s15
  if (total_support != 0)
 80032d2:	2e00      	cmp	r6, #0
 80032d4:	f000 81c5 	beq.w	8003662 <TEST_GetNextValidationInput+0x682>
    report.accuracy = diagonal_sum / (float)total_support;
 80032d8:	ed9d 7a08 	vldr	s14, [sp, #32]
 80032dc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80032e0:	ee87 fa27 	vdiv.f32	s30, s14, s15
 80032e4:	eeb7 cacf 	vcvt.f64.f32	d12, s30
  report.weighted_avg_f1_score = 0.0f;
 80032e8:	ed5f 7a46 	vldr	s15, [pc, #-280]	; 80031d4 <TEST_GetNextValidationInput+0x1f4>
  report.weighted_avg_recall = 0.0f;
 80032ec:	eeb0 da67 	vmov.f32	s26, s15
  report.weighted_avg_precision = 0.0f;
 80032f0:	eeb0 ea67 	vmov.f32	s28, s15
  report.macro_avg_f1_score = 0.0f;
 80032f4:	eef0 6a67 	vmov.f32	s13, s15
  report.macro_avg_recall = 0.0f;
 80032f8:	eeb0 6a67 	vmov.f32	s12, s15
  report.macro_avg_precision = 0.0f;
 80032fc:	eef0 5a67 	vmov.f32	s11, s15
    report.macro_avg_precision += (float)report.precisions[target];
 8003300:	ecb8 4a01 	vldmia	r8!, {s8}
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 8003304:	ed98 7a35 	vldr	s14, [r8, #212]	; 0xd4
  for (uint32_t target = 0; target < AI_NET_OUTPUT_SIZE; target++)
 8003308:	45f0      	cmp	r8, lr
    report.macro_avg_recall += (float)report.recalls[target];
 800330a:	edd8 4a11 	vldr	s9, [r8, #68]	; 0x44
    report.macro_avg_precision += (float)report.precisions[target];
 800330e:	ee75 5a84 	vadd.f32	s11, s11, s8
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 8003312:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    report.macro_avg_f1_score += (float)report.f1_scores[target];
 8003316:	ed98 5a23 	vldr	s10, [r8, #140]	; 0x8c
    report.macro_avg_recall += (float)report.recalls[target];
 800331a:	ee36 6a24 	vadd.f32	s12, s12, s9
    report.macro_avg_f1_score += (float)report.f1_scores[target];
 800331e:	ee76 6a85 	vadd.f32	s13, s13, s10
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 8003322:	eea4 ea07 	vfma.f32	s28, s8, s14
    report.weighted_avg_recall += (float)report.recalls[target] * report.supports[target];
 8003326:	eea4 da87 	vfma.f32	s26, s9, s14
    report.weighted_avg_f1_score += (float)report.f1_scores[target] * report.supports[target];
 800332a:	eee5 7a07 	vfma.f32	s15, s10, s14
  for (uint32_t target = 0; target < AI_NET_OUTPUT_SIZE; target++)
 800332e:	d1e7      	bne.n	8003300 <TEST_GetNextValidationInput+0x320>
  report.macro_avg_precision /= (float)AI_NET_OUTPUT_SIZE;
 8003330:	ed1f 7a57 	vldr	s14, [pc, #-348]	; 80031d8 <TEST_GetNextValidationInput+0x1f8>
  report.weighted_avg_precision /= (float)report.total_support;
 8003334:	ee28 ea0e 	vmul.f32	s28, s16, s28
  report.weighted_avg_recall /= (float)report.total_support;
 8003338:	ee28 da0d 	vmul.f32	s26, s16, s26
 800333c:	ad1e      	add	r5, sp, #120	; 0x78
  report.weighted_avg_f1_score /= (float)report.total_support;
 800333e:	ee28 8a27 	vmul.f32	s16, s16, s15
  return report;
 8003342:	f44f 72a0 	mov.w	r2, #320	; 0x140
  report.macro_avg_precision /= (float)AI_NET_OUTPUT_SIZE;
 8003346:	ee25 9a87 	vmul.f32	s18, s11, s14
  return report;
 800334a:	a96e      	add	r1, sp, #440	; 0x1b8
  report.macro_avg_recall /= (float)AI_NET_OUTPUT_SIZE;
 800334c:	ee26 aa07 	vmul.f32	s20, s12, s14
  return report;
 8003350:	4628      	mov	r0, r5
  report.macro_avg_f1_score /= (float)AI_NET_OUTPUT_SIZE;
 8003352:	ee26 ba87 	vmul.f32	s22, s13, s14
  return report;
 8003356:	ed8d eabb 	vstr	s28, [sp, #748]	; 0x2ec
 800335a:	ed8d dabc 	vstr	s26, [sp, #752]	; 0x2f0
  UTIL_LCD_DisplayStringAt(320, LINE(0), (uint8_t *)"precision recall f1-score support", LEFT_MODE);
 800335e:	462f      	mov	r7, r5
  return report;
 8003360:	ed8d 8abd 	vstr	s16, [sp, #756]	; 0x2f4
  UTIL_LCD_DisplayStringAt(320, LINE(0), (uint8_t *)"precision recall f1-score support", LEFT_MODE);
 8003364:	f04f 0a02 	mov.w	sl, #2
  return report;
 8003368:	ed8d fab6 	vstr	s30, [sp, #728]	; 0x2d8
 800336c:	96b7      	str	r6, [sp, #732]	; 0x2dc
 800336e:	ed8d 9ab8 	vstr	s18, [sp, #736]	; 0x2e0
 8003372:	ed8d aab9 	vstr	s20, [sp, #740]	; 0x2e4
 8003376:	ed8d baba 	vstr	s22, [sp, #744]	; 0x2e8
 800337a:	f01a fbad 	bl	801dad8 <memcpy>
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 800337e:	f8db 3b7c 	ldr.w	r3, [fp, #2940]	; 0xb7c
 8003382:	f8df 8354 	ldr.w	r8, [pc, #852]	; 80036d8 <TEST_GetNextValidationInput+0x6f8>
 8003386:	9308      	str	r3, [sp, #32]
  UTIL_LCD_DisplayStringAt(320, LINE(0), (uint8_t *)"precision recall f1-score support", LEFT_MODE);
 8003388:	f016 fadc 	bl	8019944 <UTIL_LCD_GetFont>
 800338c:	2303      	movs	r3, #3
 800338e:	4ac0      	ldr	r2, [pc, #768]	; (8003690 <TEST_GetNextValidationInput+0x6b0>)
 8003390:	2100      	movs	r1, #0
 8003392:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8003396:	46c1      	mov	r9, r8
 8003398:	f016 fba2 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
    sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", NN_OUTPUT_CLASS_LIST[target], report->precisions[target],
 800339c:	ecb7 7a01 	vldmia	r7!, {s14}
 80033a0:	a86e      	add	r0, sp, #440	; 0x1b8
 80033a2:	f859 2f04 	ldr.w	r2, [r9, #4]!
 80033a6:	ed97 5a23 	vldr	s10, [r7, #140]	; 0x8c
 80033aa:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80033ae:	ed97 6a11 	vldr	s12, [r7, #68]	; 0x44
 80033b2:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 80033b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80033ba:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 80033be:	49b5      	ldr	r1, [pc, #724]	; (8003694 <TEST_GetNextValidationInput+0x6b4>)
 80033c0:	9306      	str	r3, [sp, #24]
 80033c2:	ed8d 5b04 	vstr	d5, [sp, #16]
 80033c6:	ed8d 6b02 	vstr	d6, [sp, #8]
 80033ca:	ed8d 7b00 	vstr	d7, [sp]
 80033ce:	f01b f88b 	bl	801e4e8 <siprintf>
    UTIL_LCD_DisplayStringAt(40, LINE(2 + target), (uint8_t *)line, LEFT_MODE);
 80033d2:	f016 fab7 	bl	8019944 <UTIL_LCD_GetFont>
 80033d6:	88c1      	ldrh	r1, [r0, #6]
 80033d8:	2303      	movs	r3, #3
 80033da:	aa6e      	add	r2, sp, #440	; 0x1b8
 80033dc:	fb0a f101 	mul.w	r1, sl, r1
 80033e0:	2028      	movs	r0, #40	; 0x28
 80033e2:	f016 fb7d 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
  for (uint32_t target = 0; target < AI_NET_OUTPUT_SIZE; target++)
 80033e6:	4bac      	ldr	r3, [pc, #688]	; (8003698 <TEST_GetNextValidationInput+0x6b8>)
 80033e8:	f10a 0a01 	add.w	sl, sl, #1
 80033ec:	454b      	cmp	r3, r9
 80033ee:	d1d5      	bne.n	800339c <TEST_GetNextValidationInput+0x3bc>
  sprintf(line, "%20s %26.3f %4d", "accuracy", report->accuracy, (unsigned int)report->total_support);
 80033f0:	4aaa      	ldr	r2, [pc, #680]	; (800369c <TEST_GetNextValidationInput+0x6bc>)
 80033f2:	a86e      	add	r0, sp, #440	; 0x1b8
 80033f4:	49aa      	ldr	r1, [pc, #680]	; (80036a0 <TEST_GetNextValidationInput+0x6c0>)
  f_printf(&File, "                       precision recall f1-score support\n");
 80033f6:	f1a3 0748 	sub.w	r7, r3, #72	; 0x48
  sprintf(line, "%20s %26.3f %4d", "accuracy", report->accuracy, (unsigned int)report->total_support);
 80033fa:	9602      	str	r6, [sp, #8]
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", "macro avg", report->macro_avg_precision, report->macro_avg_recall,
 80033fc:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
 8003400:	eeb7 aaca 	vcvt.f64.f32	d10, s20
    sprintf(line, "%20s %8.3f %8.3f %8.3f %4d\n", NN_OUTPUT_CLASS_LIST[target], report->precisions[target],
 8003404:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 80036c0 <TEST_GetNextValidationInput+0x6e0>
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", "macro avg", report->macro_avg_precision, report->macro_avg_recall,
 8003408:	eeb7 bacb 	vcvt.f64.f32	d11, s22
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", "weighted avg", report->weighted_avg_precision,
 800340c:	eeb7 eace 	vcvt.f64.f32	d14, s28
 8003410:	eeb7 dacd 	vcvt.f64.f32	d13, s26
 8003414:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
  sprintf(line, "%20s %26.3f %4d", "accuracy", report->accuracy, (unsigned int)report->total_support);
 8003418:	ed8d cb00 	vstr	d12, [sp]
 800341c:	f01b f864 	bl	801e4e8 <siprintf>
  UTIL_LCD_DisplayStringAt(40, LINE(3 + AI_NET_OUTPUT_SIZE), (uint8_t *)line, LEFT_MODE);
 8003420:	f016 fa90 	bl	8019944 <UTIL_LCD_GetFont>
 8003424:	88c1      	ldrh	r1, [r0, #6]
 8003426:	2303      	movs	r3, #3
 8003428:	aa6e      	add	r2, sp, #440	; 0x1b8
 800342a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800342e:	2028      	movs	r0, #40	; 0x28
 8003430:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8003434:	f016 fb54 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", "macro avg", report->macro_avg_precision, report->macro_avg_recall,
 8003438:	4a9a      	ldr	r2, [pc, #616]	; (80036a4 <TEST_GetNextValidationInput+0x6c4>)
 800343a:	4996      	ldr	r1, [pc, #600]	; (8003694 <TEST_GetNextValidationInput+0x6b4>)
 800343c:	a86e      	add	r0, sp, #440	; 0x1b8
 800343e:	9606      	str	r6, [sp, #24]
 8003440:	ed8d 9b00 	vstr	d9, [sp]
 8003444:	ed8d ab02 	vstr	d10, [sp, #8]
 8003448:	ed8d bb04 	vstr	d11, [sp, #16]
 800344c:	f01b f84c 	bl	801e4e8 <siprintf>
  UTIL_LCD_DisplayStringAt(40, LINE(4 + AI_NET_OUTPUT_SIZE), (uint8_t *)line, LEFT_MODE);
 8003450:	f016 fa78 	bl	8019944 <UTIL_LCD_GetFont>
 8003454:	f04f 0c16 	mov.w	ip, #22
 8003458:	88c1      	ldrh	r1, [r0, #6]
 800345a:	2303      	movs	r3, #3
 800345c:	aa6e      	add	r2, sp, #440	; 0x1b8
 800345e:	2028      	movs	r0, #40	; 0x28
 8003460:	fb0c f101 	mul.w	r1, ip, r1
 8003464:	f016 fb3c 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", "weighted avg", report->weighted_avg_precision,
 8003468:	4a8f      	ldr	r2, [pc, #572]	; (80036a8 <TEST_GetNextValidationInput+0x6c8>)
 800346a:	498a      	ldr	r1, [pc, #552]	; (8003694 <TEST_GetNextValidationInput+0x6b4>)
 800346c:	a86e      	add	r0, sp, #440	; 0x1b8
 800346e:	9606      	str	r6, [sp, #24]
 8003470:	ed8d eb00 	vstr	d14, [sp]
 8003474:	ed8d db02 	vstr	d13, [sp, #8]
 8003478:	ed8d 8b04 	vstr	d8, [sp, #16]
 800347c:	f01b f834 	bl	801e4e8 <siprintf>
  UTIL_LCD_DisplayStringAt(40, LINE(5 + AI_NET_OUTPUT_SIZE), (uint8_t *)line, LEFT_MODE);
 8003480:	f016 fa60 	bl	8019944 <UTIL_LCD_GetFont>
 8003484:	88c1      	ldrh	r1, [r0, #6]
 8003486:	aa6e      	add	r2, sp, #440	; 0x1b8
 8003488:	2303      	movs	r3, #3
 800348a:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 800348e:	2028      	movs	r0, #40	; 0x28
 8003490:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 8003494:	f016 fb24 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
  DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8003498:	9b08      	ldr	r3, [sp, #32]
 800349a:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800349c:	f7fe fa30 	bl	8001900 <DISPLAY_Refresh>
  f_open(&File, path, FA_CREATE_ALWAYS | FA_WRITE);
 80034a0:	220a      	movs	r2, #10
 80034a2:	4982      	ldr	r1, [pc, #520]	; (80036ac <TEST_GetNextValidationInput+0x6cc>)
 80034a4:	a86e      	add	r0, sp, #440	; 0x1b8
 80034a6:	f013 fb1d 	bl	8016ae4 <f_open>
  f_close(&File);
 80034aa:	a86e      	add	r0, sp, #440	; 0x1b8
 80034ac:	f014 f95e 	bl	801776c <f_close>
  f_open(&File, path, FA_OPEN_APPEND | FA_WRITE);
 80034b0:	497e      	ldr	r1, [pc, #504]	; (80036ac <TEST_GetNextValidationInput+0x6cc>)
 80034b2:	2232      	movs	r2, #50	; 0x32
 80034b4:	a86e      	add	r0, sp, #440	; 0x1b8
 80034b6:	f013 fb15 	bl	8016ae4 <f_open>
  f_printf(&File, "                       precision recall f1-score support\n");
 80034ba:	497d      	ldr	r1, [pc, #500]	; (80036b0 <TEST_GetNextValidationInput+0x6d0>)
 80034bc:	a86e      	add	r0, sp, #440	; 0x1b8
 80034be:	f014 fd41 	bl	8017f44 <f_printf>
    sprintf(line, "%20s %8.3f %8.3f %8.3f %4d\n", NN_OUTPUT_CLASS_LIST[target], report->precisions[target],
 80034c2:	ecb5 7a01 	vldmia	r5!, {s14}
 80034c6:	4651      	mov	r1, sl
 80034c8:	f857 2f04 	ldr.w	r2, [r7, #4]!
 80034cc:	a80e      	add	r0, sp, #56	; 0x38
 80034ce:	ed95 5a23 	vldr	s10, [r5, #140]	; 0x8c
 80034d2:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80034d6:	ed95 6a11 	vldr	s12, [r5, #68]	; 0x44
 80034da:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 80034de:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
 80034e2:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 80034e6:	9306      	str	r3, [sp, #24]
 80034e8:	ed8d 5b04 	vstr	d5, [sp, #16]
 80034ec:	ed8d 6b02 	vstr	d6, [sp, #8]
 80034f0:	ed8d 7b00 	vstr	d7, [sp]
 80034f4:	f01a fff8 	bl	801e4e8 <siprintf>
    f_write(&File, line, strlen(line), (void *)&byteswritten);
 80034f8:	a80e      	add	r0, sp, #56	; 0x38
 80034fa:	f7fc fefb 	bl	80002f4 <strlen>
 80034fe:	ab0d      	add	r3, sp, #52	; 0x34
 8003500:	4602      	mov	r2, r0
 8003502:	a90e      	add	r1, sp, #56	; 0x38
 8003504:	a86e      	add	r0, sp, #440	; 0x1b8
 8003506:	f013 ff37 	bl	8017378 <f_write>
  for (uint32_t target = 0; target < AI_NET_OUTPUT_SIZE; target++)
 800350a:	454f      	cmp	r7, r9
 800350c:	d1d9      	bne.n	80034c2 <TEST_GetNextValidationInput+0x4e2>
  f_printf(&File, "\n");
 800350e:	4969      	ldr	r1, [pc, #420]	; (80036b4 <TEST_GetNextValidationInput+0x6d4>)
 8003510:	a86e      	add	r0, sp, #440	; 0x1b8
 8003512:	f014 fd17 	bl	8017f44 <f_printf>
  sprintf(line, "%20s %26.3f %4d\n", "accuracy", report->accuracy, (unsigned int)report->total_support);
 8003516:	4a61      	ldr	r2, [pc, #388]	; (800369c <TEST_GetNextValidationInput+0x6bc>)
 8003518:	4967      	ldr	r1, [pc, #412]	; (80036b8 <TEST_GetNextValidationInput+0x6d8>)
 800351a:	a80e      	add	r0, sp, #56	; 0x38
 800351c:	9602      	str	r6, [sp, #8]
  for (int row = 0; row < NN_OUTPUT_CLASS_NUMBER; row++)
 800351e:	2700      	movs	r7, #0
    f_printf(&File, "%s,", NN_OUTPUT_CLASS_LIST[row]);
 8003520:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 80036dc <TEST_GetNextValidationInput+0x6fc>
      f_printf(&File, "%d,", value);
 8003524:	4d65      	ldr	r5, [pc, #404]	; (80036bc <TEST_GetNextValidationInput+0x6dc>)
    f_printf(&File, "\n");
 8003526:	f8df a18c 	ldr.w	sl, [pc, #396]	; 80036b4 <TEST_GetNextValidationInput+0x6d4>
  sprintf(line, "%20s %26.3f %4d\n", "accuracy", report->accuracy, (unsigned int)report->total_support);
 800352a:	ed8d cb00 	vstr	d12, [sp]
 800352e:	f01a ffdb 	bl	801e4e8 <siprintf>
  f_write(&File, line, strlen(line), (void *)&byteswritten);
 8003532:	a80e      	add	r0, sp, #56	; 0x38
 8003534:	f7fc fede 	bl	80002f4 <strlen>
 8003538:	ab0d      	add	r3, sp, #52	; 0x34
 800353a:	4602      	mov	r2, r0
 800353c:	a90e      	add	r1, sp, #56	; 0x38
 800353e:	a86e      	add	r0, sp, #440	; 0x1b8
 8003540:	f013 ff1a 	bl	8017378 <f_write>
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d\n", "macro avg", report->macro_avg_precision, report->macro_avg_recall,
 8003544:	4a57      	ldr	r2, [pc, #348]	; (80036a4 <TEST_GetNextValidationInput+0x6c4>)
 8003546:	495e      	ldr	r1, [pc, #376]	; (80036c0 <TEST_GetNextValidationInput+0x6e0>)
 8003548:	a80e      	add	r0, sp, #56	; 0x38
 800354a:	9606      	str	r6, [sp, #24]
 800354c:	ed8d bb04 	vstr	d11, [sp, #16]
 8003550:	ed8d ab02 	vstr	d10, [sp, #8]
 8003554:	ed8d 9b00 	vstr	d9, [sp]
 8003558:	f01a ffc6 	bl	801e4e8 <siprintf>
  f_write(&File, line, strlen(line), (void *)&byteswritten);
 800355c:	a80e      	add	r0, sp, #56	; 0x38
 800355e:	f7fc fec9 	bl	80002f4 <strlen>
 8003562:	ab0d      	add	r3, sp, #52	; 0x34
 8003564:	4602      	mov	r2, r0
 8003566:	a90e      	add	r1, sp, #56	; 0x38
 8003568:	a86e      	add	r0, sp, #440	; 0x1b8
 800356a:	f013 ff05 	bl	8017378 <f_write>
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d\n", "weighted avg", report->weighted_avg_precision,
 800356e:	4a4e      	ldr	r2, [pc, #312]	; (80036a8 <TEST_GetNextValidationInput+0x6c8>)
 8003570:	4953      	ldr	r1, [pc, #332]	; (80036c0 <TEST_GetNextValidationInput+0x6e0>)
 8003572:	a80e      	add	r0, sp, #56	; 0x38
 8003574:	9606      	str	r6, [sp, #24]
 8003576:	ed8d 8b04 	vstr	d8, [sp, #16]
 800357a:	ed8d db02 	vstr	d13, [sp, #8]
 800357e:	ed8d eb00 	vstr	d14, [sp]
 8003582:	f01a ffb1 	bl	801e4e8 <siprintf>
  f_write(&File, line, strlen(line), (void *)&byteswritten);
 8003586:	a80e      	add	r0, sp, #56	; 0x38
 8003588:	f7fc feb4 	bl	80002f4 <strlen>
 800358c:	ab0d      	add	r3, sp, #52	; 0x34
 800358e:	4602      	mov	r2, r0
 8003590:	a90e      	add	r1, sp, #56	; 0x38
 8003592:	a86e      	add	r0, sp, #440	; 0x1b8
 8003594:	f013 fef0 	bl	8017378 <f_write>
  f_close(&File);
 8003598:	a86e      	add	r0, sp, #440	; 0x1b8
 800359a:	f014 f8e7 	bl	801776c <f_close>
      TestContext_Ptr->ValidationContext.final_accuracy=report.accuracy;
 800359e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  f_open(&File, path, FA_CREATE_ALWAYS | FA_WRITE);
 80035a0:	220a      	movs	r2, #10
 80035a2:	4948      	ldr	r1, [pc, #288]	; (80036c4 <TEST_GetNextValidationInput+0x6e4>)
      TestContext_Ptr->ValidationContext.final_accuracy=report.accuracy;
 80035a4:	ed83 fa00 	vstr	s30, [r3]
  f_open(&File, path, FA_CREATE_ALWAYS | FA_WRITE);
 80035a8:	a86e      	add	r0, sp, #440	; 0x1b8
 80035aa:	f013 fa9b 	bl	8016ae4 <f_open>
  f_close(&File);
 80035ae:	a86e      	add	r0, sp, #440	; 0x1b8
 80035b0:	f014 f8dc 	bl	801776c <f_close>
  f_open(&File, path, FA_OPEN_APPEND | FA_WRITE);
 80035b4:	2232      	movs	r2, #50	; 0x32
 80035b6:	4943      	ldr	r1, [pc, #268]	; (80036c4 <TEST_GetNextValidationInput+0x6e4>)
 80035b8:	a86e      	add	r0, sp, #440	; 0x1b8
 80035ba:	f013 fa93 	bl	8016ae4 <f_open>
  f_printf(&File, ",Confusion Matrix\n\n");
 80035be:	4942      	ldr	r1, [pc, #264]	; (80036c8 <TEST_GetNextValidationInput+0x6e8>)
 80035c0:	a86e      	add	r0, sp, #440	; 0x1b8
 80035c2:	f014 fcbf 	bl	8017f44 <f_printf>
  f_printf(&File, ",Predicted\n");
 80035c6:	4941      	ldr	r1, [pc, #260]	; (80036cc <TEST_GetNextValidationInput+0x6ec>)
 80035c8:	a86e      	add	r0, sp, #440	; 0x1b8
 80035ca:	f014 fcbb 	bl	8017f44 <f_printf>
    f_printf(&File, "%s,", NN_OUTPUT_CLASS_LIST[row]);
 80035ce:	f858 2f04 	ldr.w	r2, [r8, #4]!
 80035d2:	4649      	mov	r1, r9
 80035d4:	a86e      	add	r0, sp, #440	; 0x1b8
 80035d6:	f104 0648 	add.w	r6, r4, #72	; 0x48
 80035da:	f014 fcb3 	bl	8017f44 <f_printf>
      f_printf(&File, "%d,", value);
 80035de:	f854 2f04 	ldr.w	r2, [r4, #4]!
 80035e2:	4629      	mov	r1, r5
 80035e4:	a86e      	add	r0, sp, #440	; 0x1b8
 80035e6:	f014 fcad 	bl	8017f44 <f_printf>
    for (int col = 0; col < NN_OUTPUT_CLASS_NUMBER; col++)
 80035ea:	42a6      	cmp	r6, r4
 80035ec:	d1f7      	bne.n	80035de <TEST_GetNextValidationInput+0x5fe>
 80035ee:	3701      	adds	r7, #1
    if (row == NN_OUTPUT_CLASS_NUMBER / 2)
 80035f0:	2f0a      	cmp	r7, #10
 80035f2:	d03b      	beq.n	800366c <TEST_GetNextValidationInput+0x68c>
    f_printf(&File, "\n");
 80035f4:	4651      	mov	r1, sl
 80035f6:	a86e      	add	r0, sp, #440	; 0x1b8
 80035f8:	f014 fca4 	bl	8017f44 <f_printf>
  for (int row = 0; row < NN_OUTPUT_CLASS_NUMBER; row++)
 80035fc:	2f12      	cmp	r7, #18
 80035fe:	d1e6      	bne.n	80035ce <TEST_GetNextValidationInput+0x5ee>
  f_close(&File);
 8003600:	a86e      	add	r0, sp, #440	; 0x1b8
 8003602:	f014 f8b3 	bl	801776c <f_close>
      if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
 8003606:	f8db 3aa0 	ldr.w	r3, [fp, #2720]	; 0xaa0
 800360a:	bbc3      	cbnz	r3, 800367e <TEST_GetNextValidationInput+0x69e>
      TestContext_Ptr->ValidationContext.validation_completed =1;
 800360c:	2301      	movs	r3, #1
 800360e:	f8cb 3440 	str.w	r3, [fp, #1088]	; 0x440
}
 8003612:	f50d 7d7b 	add.w	sp, sp, #1004	; 0x3ec
 8003616:	ecbd 8b10 	vpop	{d8-d15}
 800361a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    float recall = 0.0f;
 800361e:	eef0 7a47 	vmov.f32	s15, s14
    float precision = 0.0f;
 8003622:	eef0 6a47 	vmov.f32	s13, s14
    float f1_score = 0.0f;
 8003626:	eef0 5a47 	vmov.f32	s11, s14
 800362a:	e631      	b.n	8003290 <TEST_GetNextValidationInput+0x2b0>
    if ((true_positives + false_negatives) != 0)
 800362c:	2a00      	cmp	r2, #0
 800362e:	d0f6      	beq.n	800361e <TEST_GetNextValidationInput+0x63e>
 8003630:	ee07 3a90 	vmov	s15, r3
    float precision = 0.0f;
 8003634:	eef0 6a47 	vmov.f32	s13, s14
 8003638:	eeb8 6a67 	vcvt.f32.u32	s12, s15
      recall = true_positives / (float)(true_positives + false_negatives);
 800363c:	ee07 2a90 	vmov	s15, r2
 8003640:	eef8 5a67 	vcvt.f32.u32	s11, s15
 8003644:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003648:	e614      	b.n	8003274 <TEST_GetNextValidationInput+0x294>
    for (uint32_t gtruth = 0; gtruth < AI_NET_OUTPUT_SIZE; gtruth++)
 800364a:	f1bc 0f12 	cmp.w	ip, #18
 800364e:	f107 0748 	add.w	r7, r7, #72	; 0x48
 8003652:	4663      	mov	r3, ip
 8003654:	f47f adef 	bne.w	8003236 <TEST_GetNextValidationInput+0x256>
 8003658:	e5f7      	b.n	800324a <TEST_GetNextValidationInput+0x26a>
    for (uint32_t pred = 0; pred < AI_NET_OUTPUT_SIZE; pred++)
 800365a:	2b12      	cmp	r3, #18
 800365c:	f47f addb 	bne.w	8003216 <TEST_GetNextValidationInput+0x236>
 8003660:	e5e4      	b.n	800322c <TEST_GetNextValidationInput+0x24c>
  if (total_support != 0)
 8003662:	ed9f cb09 	vldr	d12, [pc, #36]	; 8003688 <TEST_GetNextValidationInput+0x6a8>
  report.accuracy = 0.0f;
 8003666:	ed9f fa1a 	vldr	s30, [pc, #104]	; 80036d0 <TEST_GetNextValidationInput+0x6f0>
 800366a:	e63d      	b.n	80032e8 <TEST_GetNextValidationInput+0x308>
      f_printf(&File, " Ground truth");
 800366c:	4919      	ldr	r1, [pc, #100]	; (80036d4 <TEST_GetNextValidationInput+0x6f4>)
 800366e:	a86e      	add	r0, sp, #440	; 0x1b8
 8003670:	f014 fc68 	bl	8017f44 <f_printf>
    f_printf(&File, "\n");
 8003674:	4651      	mov	r1, sl
 8003676:	a86e      	add	r0, sp, #440	; 0x1b8
 8003678:	f014 fc64 	bl	8017f44 <f_printf>
 800367c:	e7a7      	b.n	80035ce <TEST_GetNextValidationInput+0x5ee>
        HAL_Delay(1000);
 800367e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003682:	f006 ffc3 	bl	800a60c <HAL_Delay>
 8003686:	e7c1      	b.n	800360c <TEST_GetNextValidationInput+0x62c>
	...
 8003690:	08020530 	.word	0x08020530
 8003694:	08020554 	.word	0x08020554
 8003698:	24000048 	.word	0x24000048
 800369c:	08020570 	.word	0x08020570
 80036a0:	0802057c 	.word	0x0802057c
 80036a4:	0802058c 	.word	0x0802058c
 80036a8:	08020598 	.word	0x08020598
 80036ac:	080205a8 	.word	0x080205a8
 80036b0:	080205c4 	.word	0x080205c4
 80036b4:	080207bc 	.word	0x080207bc
 80036b8:	0802061c 	.word	0x0802061c
 80036bc:	0802066c 	.word	0x0802066c
 80036c0:	08020600 	.word	0x08020600
 80036c4:	08020630 	.word	0x08020630
 80036c8:	08020648 	.word	0x08020648
 80036cc:	0802065c 	.word	0x0802065c
 80036d0:	00000000 	.word	0x00000000
 80036d4:	08020670 	.word	0x08020670
 80036d8:	24000000 	.word	0x24000000
 80036dc:	08020668 	.word	0x08020668

080036e0 <TEST_Run>:
  uint8_t sd_error;
  stm32fs_err_t ret;
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;


  if((Operating_Mode == DUMP) && (TestContext_Ptr->TestRunContext.src_buff_addr != NULL))
 80036e0:	2903      	cmp	r1, #3
{
 80036e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036e6:	4604      	mov	r4, r0
 80036e8:	b0da      	sub	sp, #360	; 0x168
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 80036ea:	f8d0 5b7c 	ldr.w	r5, [r0, #2940]	; 0xb7c
  if((Operating_Mode == DUMP) && (TestContext_Ptr->TestRunContext.src_buff_addr != NULL))
 80036ee:	d04b      	beq.n	8003788 <TEST_Run+0xa8>
        }
      }
      break;
    }
  }
  else if((Operating_Mode == CAPTURE) && (TestContext_Ptr->TestRunContext.PerformCapture == 1) && (TestContext_Ptr->TestRunContext.src_buff_addr != NULL))
 80036f0:	2904      	cmp	r1, #4
 80036f2:	d002      	beq.n	80036fa <TEST_Run+0x1a>

    default:
      break;
    }
  }
}
 80036f4:	b05a      	add	sp, #360	; 0x168
 80036f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  else if((Operating_Mode == CAPTURE) && (TestContext_Ptr->TestRunContext.PerformCapture == 1) && (TestContext_Ptr->TestRunContext.src_buff_addr != NULL))
 80036fa:	f8d0 3b5c 	ldr.w	r3, [r0, #2908]	; 0xb5c
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d1f8      	bne.n	80036f4 <TEST_Run+0x14>
 8003702:	f8d0 1b48 	ldr.w	r1, [r0, #2888]	; 0xb48
 8003706:	2900      	cmp	r1, #0
 8003708:	d0f4      	beq.n	80036f4 <TEST_Run+0x14>
    switch(TestContext_Ptr->CaptureContext.capture_state)
 800370a:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 800370e:	2b01      	cmp	r3, #1
 8003710:	f000 816e 	beq.w	80039f0 <TEST_Run+0x310>
 8003714:	2b02      	cmp	r3, #2
 8003716:	d1ed      	bne.n	80036f4 <TEST_Run+0x14>
      while(App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 8003718:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800371a:	7d13      	ldrb	r3, [r2, #20]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d0fc      	beq.n	800371a <TEST_Run+0x3a>
      if(TestContext_Ptr->TestRunContext.rb_swap == 1)
 8003720:	f8d4 3b64 	ldr.w	r3, [r4, #2916]	; 0xb64
 8003724:	2b01      	cmp	r3, #1
 8003726:	f000 82ee 	beq.w	8003d06 <TEST_Run+0x626>
      if(TestContext_Ptr->CaptureContext.capture_file_format == BMP)
 800372a:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
 800372e:	2b04      	cmp	r3, #4
 8003730:	f000 82dd 	beq.w	8003cee <TEST_Run+0x60e>
      else if(TestContext_Ptr->CaptureContext.capture_file_format == RAW)
 8003734:	2b03      	cmp	r3, #3
 8003736:	f040 810c 	bne.w	8003952 <TEST_Run+0x272>
        sprintf(file_name, "%s/%s_%d.raw", TestContext_Ptr->CaptureContext.capture_folder_name, TestContext_Ptr->TestRunContext.src_buff_name, (unsigned int)TestContext_Ptr->CaptureContext.capture_frame_count);
 800373a:	f8d4 10c8 	ldr.w	r1, [r4, #200]	; 0xc8
 800373e:	f104 02de 	add.w	r2, r4, #222	; 0xde
 8003742:	f8d4 3b4c 	ldr.w	r3, [r4, #2892]	; 0xb4c
 8003746:	a834      	add	r0, sp, #208	; 0xd0
 8003748:	9100      	str	r1, [sp, #0]
 800374a:	49c6      	ldr	r1, [pc, #792]	; (8003a64 <TEST_Run+0x384>)
 800374c:	f01a fecc 	bl	801e4e8 <siprintf>
        ret = STM32Fs_WriteRaw(file_name, (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr, TestContext_Ptr->TestRunContext.src_width_size*TestContext_Ptr->TestRunContext.src_height_size);
 8003750:	f8d4 3b50 	ldr.w	r3, [r4, #2896]	; 0xb50
 8003754:	a834      	add	r0, sp, #208	; 0xd0
 8003756:	f8d4 2b54 	ldr.w	r2, [r4, #2900]	; 0xb54
 800375a:	f8d4 1b48 	ldr.w	r1, [r4, #2888]	; 0xb48
 800375e:	fb02 f203 	mul.w	r2, r2, r3
 8003762:	f015 fb1b 	bl	8018d9c <STM32Fs_WriteRaw>
      if (ret != STM32FS_ERROR_NONE)
 8003766:	2800      	cmp	r0, #0
 8003768:	d0c4      	beq.n	80036f4 <TEST_Run+0x14>
        UTIL_LCD_DisplayStringAt(0, LINE(12), (uint8_t *)"Error. Writting image failed", CENTER_MODE);
 800376a:	f016 f8eb 	bl	8019944 <UTIL_LCD_GetFont>
 800376e:	88c1      	ldrh	r1, [r0, #6]
 8003770:	2301      	movs	r3, #1
 8003772:	4abd      	ldr	r2, [pc, #756]	; (8003a68 <TEST_Run+0x388>)
 8003774:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8003778:	2000      	movs	r0, #0
 800377a:	0089      	lsls	r1, r1, #2
 800377c:	f016 f9b0 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
        DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8003780:	6e68      	ldr	r0, [r5, #100]	; 0x64
 8003782:	f7fe f8bd 	bl	8001900 <DISPLAY_Refresh>
 8003786:	e0e4      	b.n	8003952 <TEST_Run+0x272>
  if((Operating_Mode == DUMP) && (TestContext_Ptr->TestRunContext.src_buff_addr != NULL))
 8003788:	f8d0 3b48 	ldr.w	r3, [r0, #2888]	; 0xb48
 800378c:	2b00      	cmp	r3, #0
 800378e:	d0b1      	beq.n	80036f4 <TEST_Run+0x14>
    switch(TestContext_Ptr->DumpContext.dump_state)
 8003790:	f8d0 60b8 	ldr.w	r6, [r0, #184]	; 0xb8
 8003794:	2e01      	cmp	r6, #1
 8003796:	d02f      	beq.n	80037f8 <TEST_Run+0x118>
 8003798:	2e02      	cmp	r6, #2
 800379a:	d1ab      	bne.n	80036f4 <TEST_Run+0x14>
      if((App_Cxt_Ptr->Test_ContextPtr->UartContext.uart_cmd_ongoing) && (App_Cxt_Ptr->Test_ContextPtr->UartContext.uart_host_requested_dump_memory == SDRAM))
 800379c:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800379e:	f8d3 2aa0 	ldr.w	r2, [r3, #2720]	; 0xaa0
 80037a2:	2a00      	cmp	r2, #0
 80037a4:	f000 80c5 	beq.w	8003932 <TEST_Run+0x252>
 80037a8:	f893 3aa6 	ldrb.w	r3, [r3, #2726]	; 0xaa6
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	f040 80c0 	bne.w	8003932 <TEST_Run+0x252>
        for(int i=0; i<strlen(TestContext_Ptr->TestRunContext.src_buff_name);i++)
 80037b2:	2600      	movs	r6, #0
 80037b4:	e006      	b.n	80037c4 <TEST_Run+0xe4>
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(TestContext_Ptr->TestRunContext.src_buff_name+i);
 80037b6:	6eea      	ldr	r2, [r5, #108]	; 0x6c
 80037b8:	6813      	ldr	r3, [r2, #0]
 80037ba:	1c59      	adds	r1, r3, #1
 80037bc:	6011      	str	r1, [r2, #0]
 80037be:	5dba      	ldrb	r2, [r7, r6]
        for(int i=0; i<strlen(TestContext_Ptr->TestRunContext.src_buff_name);i++)
 80037c0:	3601      	adds	r6, #1
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(TestContext_Ptr->TestRunContext.src_buff_name+i);
 80037c2:	701a      	strb	r2, [r3, #0]
        for(int i=0; i<strlen(TestContext_Ptr->TestRunContext.src_buff_name);i++)
 80037c4:	f8d4 7b4c 	ldr.w	r7, [r4, #2892]	; 0xb4c
 80037c8:	4638      	mov	r0, r7
 80037ca:	f7fc fd93 	bl	80002f4 <strlen>
 80037ce:	42b0      	cmp	r0, r6
 80037d0:	d8f1      	bhi.n	80037b6 <TEST_Run+0xd6>
        for(int i=0; i<TestContext_Ptr->TestRunContext.src_size;i++)
 80037d2:	f8d4 3b58 	ldr.w	r3, [r4, #2904]	; 0xb58
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d08c      	beq.n	80036f4 <TEST_Run+0x14>
 80037da:	2300      	movs	r3, #0
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(((uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr)+i);
 80037dc:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 80037de:	f8d4 0b48 	ldr.w	r0, [r4, #2888]	; 0xb48
 80037e2:	680a      	ldr	r2, [r1, #0]
 80037e4:	1c56      	adds	r6, r2, #1
 80037e6:	600e      	str	r6, [r1, #0]
 80037e8:	5cc1      	ldrb	r1, [r0, r3]
        for(int i=0; i<TestContext_Ptr->TestRunContext.src_size;i++)
 80037ea:	3301      	adds	r3, #1
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(((uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr)+i);
 80037ec:	7011      	strb	r1, [r2, #0]
        for(int i=0; i<TestContext_Ptr->TestRunContext.src_size;i++)
 80037ee:	f8d4 2b58 	ldr.w	r2, [r4, #2904]	; 0xb58
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d8f2      	bhi.n	80037dc <TEST_Run+0xfc>
 80037f6:	e77d      	b.n	80036f4 <TEST_Run+0x14>
      BSP_LED_Off(LED_GREEN);
 80037f8:	2000      	movs	r0, #0
 80037fa:	f004 fc7f 	bl	80080fc <BSP_LED_Off>
      BSP_LED_On(LED_RED);
 80037fe:	2002      	movs	r0, #2
 8003800:	f004 fc6c 	bl	80080dc <BSP_LED_On>
      UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"DUMP BUSY ", RIGHT_MODE);
 8003804:	f016 f89e 	bl	8019944 <UTIL_LCD_GetFont>
 8003808:	2302      	movs	r3, #2
 800380a:	88c1      	ldrh	r1, [r0, #6]
 800380c:	2000      	movs	r0, #0
 800380e:	4a97      	ldr	r2, [pc, #604]	; (8003a6c <TEST_Run+0x38c>)
 8003810:	f016 f966 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
      sprintf(msg, "%s %.0f%%", App_Cxt_Ptr->nn_top1_output_class_name, App_Cxt_Ptr->nn_top1_output_class_proba * 100);
 8003814:	ed95 7a04 	vldr	s14, [r5, #16]
 8003818:	eddf 7a95 	vldr	s15, [pc, #596]	; 8003a70 <TEST_Run+0x390>
 800381c:	a802      	add	r0, sp, #8
 800381e:	68ea      	ldr	r2, [r5, #12]
 8003820:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003824:	4993      	ldr	r1, [pc, #588]	; (8003a74 <TEST_Run+0x394>)
 8003826:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800382a:	ed8d 7b00 	vstr	d7, [sp]
 800382e:	f01a fe5b 	bl	801e4e8 <siprintf>
      UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_TOP_N_LAST_LINE - NN_TOP_N_DISPLAY + 0), (uint8_t *)msg, CENTER_MODE);
 8003832:	f016 f887 	bl	8019944 <UTIL_LCD_GetFont>
 8003836:	88c1      	ldrh	r1, [r0, #6]
 8003838:	4633      	mov	r3, r6
 800383a:	aa02      	add	r2, sp, #8
 800383c:	eb01 0781 	add.w	r7, r1, r1, lsl #2
 8003840:	2000      	movs	r0, #0
 8003842:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 8003846:	f016 f94b 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
      sprintf(msg, "Inference: %ldms", App_Cxt_Ptr->nn_inference_time);
 800384a:	68aa      	ldr	r2, [r5, #8]
 800384c:	498a      	ldr	r1, [pc, #552]	; (8003a78 <TEST_Run+0x398>)
 800384e:	a802      	add	r0, sp, #8
 8003850:	f01a fe4a 	bl	801e4e8 <siprintf>
      UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_INFER_TIME_LINE), (uint8_t *)msg, CENTER_MODE);
 8003854:	f016 f876 	bl	8019944 <UTIL_LCD_GetFont>
 8003858:	88c1      	ldrh	r1, [r0, #6]
 800385a:	aa02      	add	r2, sp, #8
 800385c:	4633      	mov	r3, r6
 800385e:	0109      	lsls	r1, r1, #4
 8003860:	2000      	movs	r0, #0
 8003862:	f016 f93d 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
      DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8003866:	6e68      	ldr	r0, [r5, #100]	; 0x64
 8003868:	f7fe f84a 	bl	8001900 <DISPLAY_Refresh>
      HAL_Delay(200);
 800386c:	20c8      	movs	r0, #200	; 0xc8
 800386e:	f006 fecd 	bl	800a60c <HAL_Delay>
      while(App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 8003872:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8003874:	7d13      	ldrb	r3, [r2, #20]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d0fc      	beq.n	8003874 <TEST_Run+0x194>
      if((App_Cxt_Ptr->Test_ContextPtr->UartContext.uart_cmd_ongoing) && (App_Cxt_Ptr->Test_ContextPtr->UartContext.uart_host_requested_dump_memory == SDRAM))
 800387a:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800387c:	f8d3 2aa0 	ldr.w	r2, [r3, #2720]	; 0xaa0
 8003880:	b332      	cbz	r2, 80038d0 <TEST_Run+0x1f0>
 8003882:	f893 2aa6 	ldrb.w	r2, [r3, #2726]	; 0xaa6
 8003886:	2a01      	cmp	r2, #1
 8003888:	d122      	bne.n	80038d0 <TEST_Run+0x1f0>
        for(int i=0; i<strlen(TestContext_Ptr->TestRunContext.src_buff_name);i++)
 800388a:	2600      	movs	r6, #0
 800388c:	e006      	b.n	800389c <TEST_Run+0x1bc>
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(TestContext_Ptr->TestRunContext.src_buff_name+i);
 800388e:	6eea      	ldr	r2, [r5, #108]	; 0x6c
 8003890:	6813      	ldr	r3, [r2, #0]
 8003892:	1c59      	adds	r1, r3, #1
 8003894:	6011      	str	r1, [r2, #0]
 8003896:	5dba      	ldrb	r2, [r7, r6]
        for(int i=0; i<strlen(TestContext_Ptr->TestRunContext.src_buff_name);i++)
 8003898:	3601      	adds	r6, #1
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(TestContext_Ptr->TestRunContext.src_buff_name+i);
 800389a:	701a      	strb	r2, [r3, #0]
        for(int i=0; i<strlen(TestContext_Ptr->TestRunContext.src_buff_name);i++)
 800389c:	f8d4 7b4c 	ldr.w	r7, [r4, #2892]	; 0xb4c
 80038a0:	4638      	mov	r0, r7
 80038a2:	f7fc fd27 	bl	80002f4 <strlen>
 80038a6:	42b0      	cmp	r0, r6
 80038a8:	d8f1      	bhi.n	800388e <TEST_Run+0x1ae>
        for(int i=0; i<TestContext_Ptr->TestRunContext.src_size;i++)
 80038aa:	f8d4 3b58 	ldr.w	r3, [r4, #2904]	; 0xb58
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d03b      	beq.n	800392a <TEST_Run+0x24a>
 80038b2:	2300      	movs	r3, #0
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(((uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr)+i);
 80038b4:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 80038b6:	f8d4 0b48 	ldr.w	r0, [r4, #2888]	; 0xb48
 80038ba:	680a      	ldr	r2, [r1, #0]
 80038bc:	1c56      	adds	r6, r2, #1
 80038be:	600e      	str	r6, [r1, #0]
 80038c0:	5cc1      	ldrb	r1, [r0, r3]
        for(int i=0; i<TestContext_Ptr->TestRunContext.src_size;i++)
 80038c2:	3301      	adds	r3, #1
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(((uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr)+i);
 80038c4:	7011      	strb	r1, [r2, #0]
        for(int i=0; i<TestContext_Ptr->TestRunContext.src_size;i++)
 80038c6:	f8d4 2b58 	ldr.w	r2, [r4, #2904]	; 0xb58
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d8f2      	bhi.n	80038b4 <TEST_Run+0x1d4>
 80038ce:	e02c      	b.n	800392a <TEST_Run+0x24a>
        if(App_Cxt_Ptr->Test_ContextPtr->DumpContext.Dump_FrameSource != SDCARD_FILE)
 80038d0:	791b      	ldrb	r3, [r3, #4]
 80038d2:	2b03      	cmp	r3, #3
 80038d4:	d140      	bne.n	8003958 <TEST_Run+0x278>
        HAL_RNG_GenerateRandomNumber(&TestContext_Ptr->RngHandle, &TestContext_Ptr->DumpContext.dump_session_id);
 80038d6:	f104 0108 	add.w	r1, r4, #8
        sprintf(TestContext_Ptr->DumpContext.dump_session_folder_name,"%s/DUMP_SESS_%X", TestContext_Ptr->DumpContext.dump_folder_name, (unsigned int)TestContext_Ptr->DumpContext.dump_session_id);
 80038da:	f104 0654 	add.w	r6, r4, #84	; 0x54
        HAL_RNG_GenerateRandomNumber(&TestContext_Ptr->RngHandle, &TestContext_Ptr->DumpContext.dump_session_id);
 80038de:	f604 3068 	addw	r0, r4, #2920	; 0xb68
 80038e2:	f00d f94f 	bl	8010b84 <HAL_RNG_GenerateRandomNumber>
        sprintf(TestContext_Ptr->DumpContext.dump_session_name, "Session %X", (unsigned int)TestContext_Ptr->DumpContext.dump_session_id);
 80038e6:	68a2      	ldr	r2, [r4, #8]
 80038e8:	4964      	ldr	r1, [pc, #400]	; (8003a7c <TEST_Run+0x39c>)
 80038ea:	f104 0010 	add.w	r0, r4, #16
 80038ee:	f01a fdfb 	bl	801e4e8 <siprintf>
        sprintf(TestContext_Ptr->DumpContext.dump_session_folder_name,"%s/DUMP_SESS_%X", TestContext_Ptr->DumpContext.dump_folder_name, (unsigned int)TestContext_Ptr->DumpContext.dump_session_id);
 80038f2:	68a3      	ldr	r3, [r4, #8]
 80038f4:	f104 0222 	add.w	r2, r4, #34	; 0x22
 80038f8:	4961      	ldr	r1, [pc, #388]	; (8003a80 <TEST_Run+0x3a0>)
 80038fa:	4630      	mov	r0, r6
 80038fc:	f01a fdf4 	bl	801e4e8 <siprintf>
        STM32Fs_CreateDir(TestContext_Ptr->DumpContext.dump_session_folder_name);
 8003900:	4630      	mov	r0, r6
 8003902:	f015 fa23 	bl	8018d4c <STM32Fs_CreateDir>
        if(TestContext_Ptr->TestRunContext.DumpFormat == GRAY8)
 8003906:	f894 3b60 	ldrb.w	r3, [r4, #2912]	; 0xb60
 800390a:	2b00      	cmp	r3, #0
 800390c:	d03d      	beq.n	800398a <TEST_Run+0x2aa>
        else if(TestContext_Ptr->TestRunContext.DumpFormat == BMP888)
 800390e:	2b02      	cmp	r3, #2
 8003910:	f000 80c0 	beq.w	8003a94 <TEST_Run+0x3b4>
        else if(TestContext_Ptr->TestRunContext.DumpFormat == BMP565)
 8003914:	2b01      	cmp	r3, #1
 8003916:	f000 8186 	beq.w	8003c26 <TEST_Run+0x546>
        else if(TestContext_Ptr->TestRunContext.DumpFormat == RAW)
 800391a:	2b03      	cmp	r3, #3
 800391c:	f000 81b1 	beq.w	8003c82 <TEST_Run+0x5a2>
        else if(TestContext_Ptr->TestRunContext.DumpFormat == TXT)
 8003920:	2b05      	cmp	r3, #5
 8003922:	f000 8123 	beq.w	8003b6c <TEST_Run+0x48c>
          Error_Handler();
 8003926:	f000 ff3f 	bl	80047a8 <Error_Handler>
      TestContext_Ptr->DumpContext.dump_state = 2;
 800392a:	2302      	movs	r3, #2
 800392c:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
      break;
 8003930:	e6e0      	b.n	80036f4 <TEST_Run+0x14>
        if(TestContext_Ptr->TestRunContext.DumpFormat == GRAY8)
 8003932:	f894 3b60 	ldrb.w	r3, [r4, #2912]	; 0xb60
 8003936:	2b00      	cmp	r3, #0
 8003938:	d048      	beq.n	80039cc <TEST_Run+0x2ec>
        else if(TestContext_Ptr->TestRunContext.DumpFormat == BMP565)
 800393a:	2b01      	cmp	r3, #1
 800393c:	f000 80bb 	beq.w	8003ab6 <TEST_Run+0x3d6>
        else if(TestContext_Ptr->TestRunContext.DumpFormat == BMP888)
 8003940:	2b02      	cmp	r3, #2
 8003942:	f000 8183 	beq.w	8003c4c <TEST_Run+0x56c>
        else if(TestContext_Ptr->TestRunContext.DumpFormat == RAW)
 8003946:	2b03      	cmp	r3, #3
 8003948:	f000 8192 	beq.w	8003c70 <TEST_Run+0x590>
        else if(TestContext_Ptr->TestRunContext.DumpFormat == TXT)
 800394c:	2b05      	cmp	r3, #5
 800394e:	f000 80d7 	beq.w	8003b00 <TEST_Run+0x420>
        Error_Handler();
 8003952:	f000 ff29 	bl	80047a8 <Error_Handler>
}
 8003956:	e6cd      	b.n	80036f4 <TEST_Run+0x14>
          BSP_CAMERA_DeInit(0);
 8003958:	2000      	movs	r0, #0
 800395a:	f005 f991 	bl	8008c80 <BSP_CAMERA_DeInit>
          if (BSP_SD_Init(0) != BSP_ERROR_NONE)
 800395e:	2000      	movs	r0, #0
 8003960:	f006 fd0e 	bl	800a380 <BSP_SD_Init>
 8003964:	2800      	cmp	r0, #0
 8003966:	d0b6      	beq.n	80038d6 <TEST_Run+0x1f6>
            UTIL_LCD_DisplayStringAt(0, LINE(12), (uint8_t *)"Error. SD Card not detected", CENTER_MODE);
 8003968:	f015 ffec 	bl	8019944 <UTIL_LCD_GetFont>
 800396c:	88c1      	ldrh	r1, [r0, #6]
 800396e:	2301      	movs	r3, #1
 8003970:	4a44      	ldr	r2, [pc, #272]	; (8003a84 <TEST_Run+0x3a4>)
 8003972:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8003976:	2000      	movs	r0, #0
 8003978:	0089      	lsls	r1, r1, #2
 800397a:	f016 f8b1 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
            DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 800397e:	6e68      	ldr	r0, [r5, #100]	; 0x64
 8003980:	f7fd ffbe 	bl	8001900 <DISPLAY_Refresh>
            Error_Handler();
 8003984:	f000 ff10 	bl	80047a8 <Error_Handler>
 8003988:	e7a5      	b.n	80038d6 <TEST_Run+0x1f6>
          sprintf(file_name, "%s/%s_.bmp", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 800398a:	4632      	mov	r2, r6
 800398c:	f8d4 3b4c 	ldr.w	r3, [r4, #2892]	; 0xb4c
 8003990:	493d      	ldr	r1, [pc, #244]	; (8003a88 <TEST_Run+0x3a8>)
 8003992:	a834      	add	r0, sp, #208	; 0xd0
 8003994:	f01a fda8 	bl	801e4e8 <siprintf>
          ret = STM32Fs_WriteImageBMPGray(file_name, (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr, TestContext_Ptr->TestRunContext.src_width_size, TestContext_Ptr->TestRunContext.src_height_size);
 8003998:	a834      	add	r0, sp, #208	; 0xd0
 800399a:	f8d4 3b54 	ldr.w	r3, [r4, #2900]	; 0xb54
 800399e:	f8d4 2b50 	ldr.w	r2, [r4, #2896]	; 0xb50
 80039a2:	f8d4 1b48 	ldr.w	r1, [r4, #2888]	; 0xb48
 80039a6:	f015 fc33 	bl	8019210 <STM32Fs_WriteImageBMPGray>
        if (ret != STM32FS_ERROR_NONE)
 80039aa:	2800      	cmp	r0, #0
 80039ac:	d0bd      	beq.n	800392a <TEST_Run+0x24a>
          UTIL_LCD_DisplayStringAt(0, LINE(12), (uint8_t *)"Error. Writting image failed", CENTER_MODE);
 80039ae:	f015 ffc9 	bl	8019944 <UTIL_LCD_GetFont>
 80039b2:	88c1      	ldrh	r1, [r0, #6]
 80039b4:	2301      	movs	r3, #1
 80039b6:	4a2c      	ldr	r2, [pc, #176]	; (8003a68 <TEST_Run+0x388>)
 80039b8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80039bc:	2000      	movs	r0, #0
 80039be:	0089      	lsls	r1, r1, #2
 80039c0:	f016 f88e 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
          DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 80039c4:	6e68      	ldr	r0, [r5, #100]	; 0x64
 80039c6:	f7fd ff9b 	bl	8001900 <DISPLAY_Refresh>
 80039ca:	e7ac      	b.n	8003926 <TEST_Run+0x246>
          sprintf(file_name, "%s/%s.bmp", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 80039cc:	f8d4 3b4c 	ldr.w	r3, [r4, #2892]	; 0xb4c
 80039d0:	f104 0254 	add.w	r2, r4, #84	; 0x54
 80039d4:	492d      	ldr	r1, [pc, #180]	; (8003a8c <TEST_Run+0x3ac>)
 80039d6:	a834      	add	r0, sp, #208	; 0xd0
 80039d8:	f01a fd86 	bl	801e4e8 <siprintf>
          ret = STM32Fs_WriteImageBMPGray(file_name, (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr, TestContext_Ptr->TestRunContext.src_width_size, TestContext_Ptr->TestRunContext.src_height_size);
 80039dc:	a834      	add	r0, sp, #208	; 0xd0
 80039de:	f8d4 3b54 	ldr.w	r3, [r4, #2900]	; 0xb54
 80039e2:	f8d4 2b50 	ldr.w	r2, [r4, #2896]	; 0xb50
 80039e6:	f8d4 1b48 	ldr.w	r1, [r4, #2888]	; 0xb48
 80039ea:	f015 fc11 	bl	8019210 <STM32Fs_WriteImageBMPGray>
 80039ee:	e6ba      	b.n	8003766 <TEST_Run+0x86>
      BSP_LED_Off(LED_GREEN);
 80039f0:	2000      	movs	r0, #0
 80039f2:	f004 fb83 	bl	80080fc <BSP_LED_Off>
      BSP_LED_On(LED_RED);
 80039f6:	2002      	movs	r0, #2
 80039f8:	f004 fb70 	bl	80080dc <BSP_LED_On>
      UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"CAPTURE BUSY ", RIGHT_MODE);
 80039fc:	f015 ffa2 	bl	8019944 <UTIL_LCD_GetFont>
 8003a00:	4a23      	ldr	r2, [pc, #140]	; (8003a90 <TEST_Run+0x3b0>)
 8003a02:	88c1      	ldrh	r1, [r0, #6]
 8003a04:	2302      	movs	r3, #2
 8003a06:	2000      	movs	r0, #0
 8003a08:	f016 f86a 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
      DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8003a0c:	6e68      	ldr	r0, [r5, #100]	; 0x64
 8003a0e:	f7fd ff77 	bl	8001900 <DISPLAY_Refresh>
      HAL_Delay(200);
 8003a12:	20c8      	movs	r0, #200	; 0xc8
 8003a14:	f006 fdfa 	bl	800a60c <HAL_Delay>
      while(App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 8003a18:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8003a1a:	7d13      	ldrb	r3, [r2, #20]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d0fc      	beq.n	8003a1a <TEST_Run+0x33a>
      BSP_CAMERA_DeInit(0);
 8003a20:	2000      	movs	r0, #0
 8003a22:	f005 f92d 	bl	8008c80 <BSP_CAMERA_DeInit>
      TestContext_Ptr->CaptureContext.capture_frame_count ++;
 8003a26:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
      sd_error = BSP_SD_Init(0);
 8003a2a:	2000      	movs	r0, #0
      TestContext_Ptr->CaptureContext.capture_frame_count ++;
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
      sd_error = BSP_SD_Init(0);
 8003a32:	f006 fca5 	bl	800a380 <BSP_SD_Init>
      if (sd_error != BSP_ERROR_NONE)
 8003a36:	f010 0fff 	tst.w	r0, #255	; 0xff
 8003a3a:	d150      	bne.n	8003ade <TEST_Run+0x3fe>
      if(TestContext_Ptr->TestRunContext.rb_swap == 1)
 8003a3c:	f8d4 3b64 	ldr.w	r3, [r4, #2916]	; 0xb64
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	f000 8131 	beq.w	8003ca8 <TEST_Run+0x5c8>
      if(TestContext_Ptr->CaptureContext.capture_file_format == BMP)
 8003a46:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
 8003a4a:	2b04      	cmp	r3, #4
 8003a4c:	f000 8138 	beq.w	8003cc0 <TEST_Run+0x5e0>
      else if(TestContext_Ptr->CaptureContext.capture_file_format == RAW)
 8003a50:	2b03      	cmp	r3, #3
 8003a52:	f000 80c0 	beq.w	8003bd6 <TEST_Run+0x4f6>
        Error_Handler();
 8003a56:	f000 fea7 	bl	80047a8 <Error_Handler>
      TestContext_Ptr->CaptureContext.capture_state = 2;
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
      break;
 8003a60:	e648      	b.n	80036f4 <TEST_Run+0x14>
 8003a62:	bf00      	nop
 8003a64:	08020818 	.word	0x08020818
 8003a68:	080207cc 	.word	0x080207cc
 8003a6c:	0802075c 	.word	0x0802075c
 8003a70:	42c80000 	.word	0x42c80000
 8003a74:	08020088 	.word	0x08020088
 8003a78:	08020094 	.word	0x08020094
 8003a7c:	080201ec 	.word	0x080201ec
 8003a80:	08020768 	.word	0x08020768
 8003a84:	080201f8 	.word	0x080201f8
 8003a88:	08020778 	.word	0x08020778
 8003a8c:	080207ec 	.word	0x080207ec
 8003a90:	080207f8 	.word	0x080207f8
          sprintf(file_name, "%s/%s_.bmp", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 8003a94:	4632      	mov	r2, r6
 8003a96:	f8d4 3b4c 	ldr.w	r3, [r4, #2892]	; 0xb4c
 8003a9a:	a834      	add	r0, sp, #208	; 0xd0
 8003a9c:	499f      	ldr	r1, [pc, #636]	; (8003d1c <TEST_Run+0x63c>)
 8003a9e:	f01a fd23 	bl	801e4e8 <siprintf>
          ret = STM32Fs_WriteImageBMP(file_name, (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr, TestContext_Ptr->TestRunContext.src_width_size, TestContext_Ptr->TestRunContext.src_height_size);
 8003aa2:	a834      	add	r0, sp, #208	; 0xd0
 8003aa4:	f8d4 3b54 	ldr.w	r3, [r4, #2900]	; 0xb54
 8003aa8:	f8d4 2b50 	ldr.w	r2, [r4, #2896]	; 0xb50
 8003aac:	f8d4 1b48 	ldr.w	r1, [r4, #2888]	; 0xb48
 8003ab0:	f015 f996 	bl	8018de0 <STM32Fs_WriteImageBMP>
 8003ab4:	e779      	b.n	80039aa <TEST_Run+0x2ca>
          ret = STM32Fs_WriteImageBMP16(file_name, (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr, TestContext_Ptr->TestRunContext.src_width_size, TestContext_Ptr->TestRunContext.src_height_size, 0);
 8003ab6:	2600      	movs	r6, #0
          sprintf(file_name, "%s/%s.bmp", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 8003ab8:	f8d4 3b4c 	ldr.w	r3, [r4, #2892]	; 0xb4c
 8003abc:	f104 0254 	add.w	r2, r4, #84	; 0x54
 8003ac0:	4997      	ldr	r1, [pc, #604]	; (8003d20 <TEST_Run+0x640>)
 8003ac2:	a834      	add	r0, sp, #208	; 0xd0
 8003ac4:	f01a fd10 	bl	801e4e8 <siprintf>
          ret = STM32Fs_WriteImageBMP16(file_name, (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr, TestContext_Ptr->TestRunContext.src_width_size, TestContext_Ptr->TestRunContext.src_height_size, 0);
 8003ac8:	f8d4 3b54 	ldr.w	r3, [r4, #2900]	; 0xb54
 8003acc:	f8d4 2b50 	ldr.w	r2, [r4, #2896]	; 0xb50
 8003ad0:	a834      	add	r0, sp, #208	; 0xd0
 8003ad2:	f8d4 1b48 	ldr.w	r1, [r4, #2888]	; 0xb48
 8003ad6:	9600      	str	r6, [sp, #0]
 8003ad8:	f015 f9dc 	bl	8018e94 <STM32Fs_WriteImageBMP16>
 8003adc:	e643      	b.n	8003766 <TEST_Run+0x86>
        UTIL_LCD_DisplayStringAt(0, LINE(12), (uint8_t *)"Error. SD Card not detected", CENTER_MODE);
 8003ade:	f015 ff31 	bl	8019944 <UTIL_LCD_GetFont>
 8003ae2:	88c1      	ldrh	r1, [r0, #6]
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	4a8f      	ldr	r2, [pc, #572]	; (8003d24 <TEST_Run+0x644>)
 8003ae8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8003aec:	2000      	movs	r0, #0
 8003aee:	0089      	lsls	r1, r1, #2
 8003af0:	f015 fff6 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
        DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8003af4:	6e68      	ldr	r0, [r5, #100]	; 0x64
 8003af6:	f7fd ff03 	bl	8001900 <DISPLAY_Refresh>
        Error_Handler();
 8003afa:	f000 fe55 	bl	80047a8 <Error_Handler>
 8003afe:	e79d      	b.n	8003a3c <TEST_Run+0x35c>
          sprintf(file_name, "%s/%s.txt", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 8003b00:	f10d 08d0 	add.w	r8, sp, #208	; 0xd0
 8003b04:	f8d4 3b4c 	ldr.w	r3, [r4, #2892]	; 0xb4c
 8003b08:	f104 0254 	add.w	r2, r4, #84	; 0x54
 8003b0c:	4986      	ldr	r1, [pc, #536]	; (8003d28 <TEST_Run+0x648>)
 8003b0e:	4640      	mov	r0, r8
 8003b10:	f01a fcea 	bl	801e4e8 <siprintf>
          ret = STM32Fs_WriteTextToFile(file_name, "          Neural Network Output\n\n", STM32FS_CREATE_NEW_FILE);
 8003b14:	4640      	mov	r0, r8
 8003b16:	2200      	movs	r2, #0
 8003b18:	4984      	ldr	r1, [pc, #528]	; (8003d2c <TEST_Run+0x64c>)
 8003b1a:	f015 fcd9 	bl	80194d0 <STM32Fs_WriteTextToFile>
          for (int i = 0; i < (TestContext_Ptr->TestRunContext.src_size)/4; i++)
 8003b1e:	f8d4 3b58 	ldr.w	r3, [r4, #2904]	; 0xb58
 8003b22:	089b      	lsrs	r3, r3, #2
 8003b24:	f43f ae1f 	beq.w	8003766 <TEST_Run+0x86>
 8003b28:	f8df a214 	ldr.w	sl, [pc, #532]	; 8003d40 <TEST_Run+0x660>
 8003b2c:	2600      	movs	r6, #0
 8003b2e:	af14      	add	r7, sp, #80	; 0x50
            sprintf(str, "%20s:%8.3f\n", NN_OUTPUT_CLASS_LIST[i], *((float*)TestContext_Ptr->TestRunContext.src_buff_addr + i));
 8003b30:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8003d44 <TEST_Run+0x664>
 8003b34:	f8d4 3b48 	ldr.w	r3, [r4, #2888]	; 0xb48
 8003b38:	4649      	mov	r1, r9
 8003b3a:	f85a 2b04 	ldr.w	r2, [sl], #4
 8003b3e:	4638      	mov	r0, r7
 8003b40:	eb03 0386 	add.w	r3, r3, r6, lsl #2
          for (int i = 0; i < (TestContext_Ptr->TestRunContext.src_size)/4; i++)
 8003b44:	3601      	adds	r6, #1
            sprintf(str, "%20s:%8.3f\n", NN_OUTPUT_CLASS_LIST[i], *((float*)TestContext_Ptr->TestRunContext.src_buff_addr + i));
 8003b46:	ed93 7a00 	vldr	s14, [r3]
 8003b4a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003b4e:	ed8d 7b00 	vstr	d7, [sp]
 8003b52:	f01a fcc9 	bl	801e4e8 <siprintf>
            ret = STM32Fs_WriteTextToFile(file_name, str, STM32FS_APPEND_TO_FILE);
 8003b56:	2201      	movs	r2, #1
 8003b58:	4639      	mov	r1, r7
 8003b5a:	4640      	mov	r0, r8
 8003b5c:	f015 fcb8 	bl	80194d0 <STM32Fs_WriteTextToFile>
          for (int i = 0; i < (TestContext_Ptr->TestRunContext.src_size)/4; i++)
 8003b60:	f8d4 3b58 	ldr.w	r3, [r4, #2904]	; 0xb58
 8003b64:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
 8003b68:	d3e4      	bcc.n	8003b34 <TEST_Run+0x454>
 8003b6a:	e5fc      	b.n	8003766 <TEST_Run+0x86>
          sprintf(file_name, "%s/%s.txt", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 8003b6c:	f10d 08d0 	add.w	r8, sp, #208	; 0xd0
 8003b70:	f8d4 3b4c 	ldr.w	r3, [r4, #2892]	; 0xb4c
 8003b74:	4632      	mov	r2, r6
 8003b76:	496c      	ldr	r1, [pc, #432]	; (8003d28 <TEST_Run+0x648>)
 8003b78:	4640      	mov	r0, r8
 8003b7a:	f01a fcb5 	bl	801e4e8 <siprintf>
          ret = STM32Fs_WriteTextToFile(file_name, "          Neural Network Output\n\n", STM32FS_CREATE_NEW_FILE);
 8003b7e:	4640      	mov	r0, r8
 8003b80:	2200      	movs	r2, #0
 8003b82:	496a      	ldr	r1, [pc, #424]	; (8003d2c <TEST_Run+0x64c>)
 8003b84:	f015 fca4 	bl	80194d0 <STM32Fs_WriteTextToFile>
          for (int i = 0; i < (TestContext_Ptr->TestRunContext.src_size/4); i++)
 8003b88:	f8d4 3b58 	ldr.w	r3, [r4, #2904]	; 0xb58
 8003b8c:	089b      	lsrs	r3, r3, #2
 8003b8e:	f43f af0c 	beq.w	80039aa <TEST_Run+0x2ca>
 8003b92:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 8003d40 <TEST_Run+0x660>
 8003b96:	2600      	movs	r6, #0
 8003b98:	af14      	add	r7, sp, #80	; 0x50
            sprintf(str, "%20s:%8.3f\n", NN_OUTPUT_CLASS_LIST[i], *((float*)TestContext_Ptr->TestRunContext.src_buff_addr + i));
 8003b9a:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8003d44 <TEST_Run+0x664>
 8003b9e:	f8d4 3b48 	ldr.w	r3, [r4, #2888]	; 0xb48
 8003ba2:	4649      	mov	r1, r9
 8003ba4:	f85a 2b04 	ldr.w	r2, [sl], #4
 8003ba8:	4638      	mov	r0, r7
 8003baa:	eb03 0386 	add.w	r3, r3, r6, lsl #2
          for (int i = 0; i < (TestContext_Ptr->TestRunContext.src_size/4); i++)
 8003bae:	3601      	adds	r6, #1
            sprintf(str, "%20s:%8.3f\n", NN_OUTPUT_CLASS_LIST[i], *((float*)TestContext_Ptr->TestRunContext.src_buff_addr + i));
 8003bb0:	ed93 7a00 	vldr	s14, [r3]
 8003bb4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003bb8:	ed8d 7b00 	vstr	d7, [sp]
 8003bbc:	f01a fc94 	bl	801e4e8 <siprintf>
            ret = STM32Fs_WriteTextToFile(file_name, str, STM32FS_APPEND_TO_FILE);
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	4639      	mov	r1, r7
 8003bc4:	4640      	mov	r0, r8
 8003bc6:	f015 fc83 	bl	80194d0 <STM32Fs_WriteTextToFile>
          for (int i = 0; i < (TestContext_Ptr->TestRunContext.src_size/4); i++)
 8003bca:	f8d4 3b58 	ldr.w	r3, [r4, #2904]	; 0xb58
 8003bce:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
 8003bd2:	d3e4      	bcc.n	8003b9e <TEST_Run+0x4be>
 8003bd4:	e6e9      	b.n	80039aa <TEST_Run+0x2ca>
        sprintf(file_name, "%s/%s_%d.raw", TestContext_Ptr->CaptureContext.capture_folder_name, TestContext_Ptr->TestRunContext.src_buff_name, (unsigned int)TestContext_Ptr->CaptureContext.capture_frame_count);
 8003bd6:	f8d4 10c8 	ldr.w	r1, [r4, #200]	; 0xc8
 8003bda:	f104 02de 	add.w	r2, r4, #222	; 0xde
 8003bde:	f8d4 3b4c 	ldr.w	r3, [r4, #2892]	; 0xb4c
 8003be2:	a834      	add	r0, sp, #208	; 0xd0
 8003be4:	9100      	str	r1, [sp, #0]
 8003be6:	4952      	ldr	r1, [pc, #328]	; (8003d30 <TEST_Run+0x650>)
 8003be8:	f01a fc7e 	bl	801e4e8 <siprintf>
        ret = STM32Fs_WriteRaw(file_name, (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr, TestContext_Ptr->TestRunContext.src_width_size*TestContext_Ptr->TestRunContext.src_height_size);
 8003bec:	f8d4 3b50 	ldr.w	r3, [r4, #2896]	; 0xb50
 8003bf0:	f8d4 2b54 	ldr.w	r2, [r4, #2900]	; 0xb54
 8003bf4:	a834      	add	r0, sp, #208	; 0xd0
 8003bf6:	f8d4 1b48 	ldr.w	r1, [r4, #2888]	; 0xb48
 8003bfa:	fb02 f203 	mul.w	r2, r2, r3
 8003bfe:	f015 f8cd 	bl	8018d9c <STM32Fs_WriteRaw>
      if (ret != STM32FS_ERROR_NONE)
 8003c02:	2800      	cmp	r0, #0
 8003c04:	f43f af29 	beq.w	8003a5a <TEST_Run+0x37a>
        UTIL_LCD_DisplayStringAt(0, LINE(12), (uint8_t *)"Error. Writting image failed", CENTER_MODE);
 8003c08:	f015 fe9c 	bl	8019944 <UTIL_LCD_GetFont>
 8003c0c:	88c1      	ldrh	r1, [r0, #6]
 8003c0e:	2301      	movs	r3, #1
 8003c10:	4a48      	ldr	r2, [pc, #288]	; (8003d34 <TEST_Run+0x654>)
 8003c12:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8003c16:	2000      	movs	r0, #0
 8003c18:	0089      	lsls	r1, r1, #2
 8003c1a:	f015 ff61 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
        DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8003c1e:	6e68      	ldr	r0, [r5, #100]	; 0x64
 8003c20:	f7fd fe6e 	bl	8001900 <DISPLAY_Refresh>
 8003c24:	e717      	b.n	8003a56 <TEST_Run+0x376>
          sprintf(file_name, "%s/%s_.bmp", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 8003c26:	4632      	mov	r2, r6
          ret = STM32Fs_WriteImageBMP16(file_name, (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr, TestContext_Ptr->TestRunContext.src_width_size, TestContext_Ptr->TestRunContext.src_height_size, 0);
 8003c28:	2600      	movs	r6, #0
          sprintf(file_name, "%s/%s_.bmp", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 8003c2a:	f8d4 3b4c 	ldr.w	r3, [r4, #2892]	; 0xb4c
 8003c2e:	a834      	add	r0, sp, #208	; 0xd0
 8003c30:	493a      	ldr	r1, [pc, #232]	; (8003d1c <TEST_Run+0x63c>)
 8003c32:	f01a fc59 	bl	801e4e8 <siprintf>
          ret = STM32Fs_WriteImageBMP16(file_name, (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr, TestContext_Ptr->TestRunContext.src_width_size, TestContext_Ptr->TestRunContext.src_height_size, 0);
 8003c36:	f8d4 3b54 	ldr.w	r3, [r4, #2900]	; 0xb54
 8003c3a:	f8d4 2b50 	ldr.w	r2, [r4, #2896]	; 0xb50
 8003c3e:	a834      	add	r0, sp, #208	; 0xd0
 8003c40:	f8d4 1b48 	ldr.w	r1, [r4, #2888]	; 0xb48
 8003c44:	9600      	str	r6, [sp, #0]
 8003c46:	f015 f925 	bl	8018e94 <STM32Fs_WriteImageBMP16>
 8003c4a:	e6ae      	b.n	80039aa <TEST_Run+0x2ca>
          sprintf(file_name, "%s/%s.bmp", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 8003c4c:	f8d4 3b4c 	ldr.w	r3, [r4, #2892]	; 0xb4c
 8003c50:	f104 0254 	add.w	r2, r4, #84	; 0x54
 8003c54:	4932      	ldr	r1, [pc, #200]	; (8003d20 <TEST_Run+0x640>)
 8003c56:	a834      	add	r0, sp, #208	; 0xd0
 8003c58:	f01a fc46 	bl	801e4e8 <siprintf>
        ret = STM32Fs_WriteImageBMP(file_name, (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr, TestContext_Ptr->TestRunContext.src_width_size, TestContext_Ptr->TestRunContext.src_height_size);
 8003c5c:	a834      	add	r0, sp, #208	; 0xd0
 8003c5e:	f8d4 3b54 	ldr.w	r3, [r4, #2900]	; 0xb54
 8003c62:	f8d4 2b50 	ldr.w	r2, [r4, #2896]	; 0xb50
 8003c66:	f8d4 1b48 	ldr.w	r1, [r4, #2888]	; 0xb48
 8003c6a:	f015 f8b9 	bl	8018de0 <STM32Fs_WriteImageBMP>
 8003c6e:	e57a      	b.n	8003766 <TEST_Run+0x86>
          sprintf(file_name, "%s/%s.raw", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 8003c70:	f8d4 3b4c 	ldr.w	r3, [r4, #2892]	; 0xb4c
 8003c74:	f104 0254 	add.w	r2, r4, #84	; 0x54
 8003c78:	492f      	ldr	r1, [pc, #188]	; (8003d38 <TEST_Run+0x658>)
 8003c7a:	a834      	add	r0, sp, #208	; 0xd0
 8003c7c:	f01a fc34 	bl	801e4e8 <siprintf>
 8003c80:	e566      	b.n	8003750 <TEST_Run+0x70>
          sprintf(file_name, "%s/%s.raw", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 8003c82:	4632      	mov	r2, r6
 8003c84:	f8d4 3b4c 	ldr.w	r3, [r4, #2892]	; 0xb4c
 8003c88:	a834      	add	r0, sp, #208	; 0xd0
 8003c8a:	492b      	ldr	r1, [pc, #172]	; (8003d38 <TEST_Run+0x658>)
 8003c8c:	f01a fc2c 	bl	801e4e8 <siprintf>
          ret = STM32Fs_WriteRaw(file_name, (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr, TestContext_Ptr->TestRunContext.src_width_size*TestContext_Ptr->TestRunContext.src_height_size);
 8003c90:	f8d4 3b50 	ldr.w	r3, [r4, #2896]	; 0xb50
 8003c94:	f8d4 2b54 	ldr.w	r2, [r4, #2900]	; 0xb54
 8003c98:	a834      	add	r0, sp, #208	; 0xd0
 8003c9a:	f8d4 1b48 	ldr.w	r1, [r4, #2888]	; 0xb48
 8003c9e:	fb02 f203 	mul.w	r2, r2, r3
 8003ca2:	f015 f87b 	bl	8018d9c <STM32Fs_WriteRaw>
 8003ca6:	e680      	b.n	80039aa <TEST_Run+0x2ca>
        PREPROC_Pixel_RB_Swap((void*)TestContext_Ptr->TestRunContext.src_buff_addr, (void*)TestContext_Ptr->TestRunContext.src_buff_addr, TestContext_Ptr->TestRunContext.src_width_size*TestContext_Ptr->TestRunContext.src_height_size);//caution: this is modifying the content of the data contained at src_buff_addr! To do: implement this on the fly when writing onto the SD card!!
 8003ca8:	f8d4 1b48 	ldr.w	r1, [r4, #2888]	; 0xb48
 8003cac:	f8d4 3b50 	ldr.w	r3, [r4, #2896]	; 0xb50
 8003cb0:	f8d4 2b54 	ldr.w	r2, [r4, #2900]	; 0xb54
 8003cb4:	4608      	mov	r0, r1
 8003cb6:	fb02 f203 	mul.w	r2, r2, r3
 8003cba:	f7fd fe8d 	bl	80019d8 <PREPROC_Pixel_RB_Swap>
 8003cbe:	e6c2      	b.n	8003a46 <TEST_Run+0x366>
        sprintf(file_name, "%s/%s_%d.bmp", TestContext_Ptr->CaptureContext.capture_folder_name, TestContext_Ptr->TestRunContext.src_buff_name, (unsigned int)TestContext_Ptr->CaptureContext.capture_frame_count);
 8003cc0:	f8d4 10c8 	ldr.w	r1, [r4, #200]	; 0xc8
        ret = STM32Fs_WriteImageBMP16(file_name, (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr, TestContext_Ptr->TestRunContext.src_width_size, TestContext_Ptr->TestRunContext.src_height_size, 0);
 8003cc4:	2600      	movs	r6, #0
        sprintf(file_name, "%s/%s_%d.bmp", TestContext_Ptr->CaptureContext.capture_folder_name, TestContext_Ptr->TestRunContext.src_buff_name, (unsigned int)TestContext_Ptr->CaptureContext.capture_frame_count);
 8003cc6:	f8d4 3b4c 	ldr.w	r3, [r4, #2892]	; 0xb4c
 8003cca:	f104 02de 	add.w	r2, r4, #222	; 0xde
 8003cce:	9100      	str	r1, [sp, #0]
 8003cd0:	a834      	add	r0, sp, #208	; 0xd0
 8003cd2:	491a      	ldr	r1, [pc, #104]	; (8003d3c <TEST_Run+0x65c>)
 8003cd4:	f01a fc08 	bl	801e4e8 <siprintf>
        ret = STM32Fs_WriteImageBMP16(file_name, (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr, TestContext_Ptr->TestRunContext.src_width_size, TestContext_Ptr->TestRunContext.src_height_size, 0);
 8003cd8:	f8d4 3b54 	ldr.w	r3, [r4, #2900]	; 0xb54
 8003cdc:	f8d4 2b50 	ldr.w	r2, [r4, #2896]	; 0xb50
 8003ce0:	a834      	add	r0, sp, #208	; 0xd0
 8003ce2:	f8d4 1b48 	ldr.w	r1, [r4, #2888]	; 0xb48
 8003ce6:	9600      	str	r6, [sp, #0]
 8003ce8:	f015 f8d4 	bl	8018e94 <STM32Fs_WriteImageBMP16>
 8003cec:	e789      	b.n	8003c02 <TEST_Run+0x522>
        sprintf(file_name, "%s/%s_%d.bmp", TestContext_Ptr->CaptureContext.capture_folder_name, TestContext_Ptr->TestRunContext.src_buff_name, (unsigned int)TestContext_Ptr->CaptureContext.capture_frame_count);
 8003cee:	f8d4 10c8 	ldr.w	r1, [r4, #200]	; 0xc8
 8003cf2:	f104 02de 	add.w	r2, r4, #222	; 0xde
 8003cf6:	f8d4 3b4c 	ldr.w	r3, [r4, #2892]	; 0xb4c
 8003cfa:	a834      	add	r0, sp, #208	; 0xd0
 8003cfc:	9100      	str	r1, [sp, #0]
 8003cfe:	490f      	ldr	r1, [pc, #60]	; (8003d3c <TEST_Run+0x65c>)
 8003d00:	f01a fbf2 	bl	801e4e8 <siprintf>
 8003d04:	e7aa      	b.n	8003c5c <TEST_Run+0x57c>
        PREPROC_Pixel_RB_Swap((void*)TestContext_Ptr->TestRunContext.src_buff_addr, (void*)TestContext_Ptr->TestRunContext.src_buff_addr, TestContext_Ptr->TestRunContext.src_width_size*TestContext_Ptr->TestRunContext.src_height_size);//caution: this is modifying the content of the data contained at src_buff_addr! To do: implement this on the fly when writing onto the SD card!!
 8003d06:	f8d4 3b50 	ldr.w	r3, [r4, #2896]	; 0xb50
 8003d0a:	4608      	mov	r0, r1
 8003d0c:	f8d4 2b54 	ldr.w	r2, [r4, #2900]	; 0xb54
 8003d10:	fb02 f203 	mul.w	r2, r2, r3
 8003d14:	f7fd fe60 	bl	80019d8 <PREPROC_Pixel_RB_Swap>
 8003d18:	e507      	b.n	800372a <TEST_Run+0x4a>
 8003d1a:	bf00      	nop
 8003d1c:	08020778 	.word	0x08020778
 8003d20:	080207ec 	.word	0x080207ec
 8003d24:	080201f8 	.word	0x080201f8
 8003d28:	08020790 	.word	0x08020790
 8003d2c:	0802079c 	.word	0x0802079c
 8003d30:	08020818 	.word	0x08020818
 8003d34:	080207cc 	.word	0x080207cc
 8003d38:	08020784 	.word	0x08020784
 8003d3c:	08020808 	.word	0x08020808
 8003d40:	24000004 	.word	0x24000004
 8003d44:	080207c0 	.word	0x080207c0

08003d48 <TEST_PostProcess>:
 *
 * @param TestContext_Ptr pointer to test context
 */
void TEST_PostProcess(TestContext_TypeDef *TestContext_Ptr)
{
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 8003d48:	f8d0 2b7c 	ldr.w	r2, [r0, #2940]	; 0xb7c
{
 8003d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  if(App_Cxt_Ptr->Operating_Mode == CAPTURE)
 8003d50:	7817      	ldrb	r7, [r2, #0]
 8003d52:	2f04      	cmp	r7, #4
{
 8003d54:	ed2d 8b04 	vpush	{d8-d9}
 8003d58:	b099      	sub	sp, #100	; 0x64
  if(App_Cxt_Ptr->Operating_Mode == CAPTURE)
 8003d5a:	d009      	beq.n	8003d70 <TEST_PostProcess+0x28>
  {
    Capture_PostProcess(App_Cxt_Ptr->Test_ContextPtr);
  }
  else if(App_Cxt_Ptr->Operating_Mode == DUMP)
 8003d5c:	2f03      	cmp	r7, #3
 8003d5e:	f000 8091 	beq.w	8003e84 <TEST_PostProcess+0x13c>
  {
    Dump_PostProcess(App_Cxt_Ptr->Test_ContextPtr);
  }
  else if(App_Cxt_Ptr->Operating_Mode == VALID)
 8003d62:	2f02      	cmp	r7, #2
 8003d64:	d02f      	beq.n	8003dc6 <TEST_PostProcess+0x7e>
  {
    Validation_PostProcess(App_Cxt_Ptr->Test_ContextPtr);
  }
}
 8003d66:	b019      	add	sp, #100	; 0x64
 8003d68:	ecbd 8b04 	vpop	{d8-d9}
 8003d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Capture_PostProcess(App_Cxt_Ptr->Test_ContextPtr);
 8003d70:	6ed4      	ldr	r4, [r2, #108]	; 0x6c
  if ((TestContext_Ptr->CaptureContext.capture_state==0) /*&& (BSP_PB_GetState(BUTTON_WAKEUP) != RESET)*/)
 8003d72:	f8d4 50c0 	ldr.w	r5, [r4, #192]	; 0xc0
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 8003d76:	f8d4 6b7c 	ldr.w	r6, [r4, #2940]	; 0xb7c
  if ((TestContext_Ptr->CaptureContext.capture_state==0) /*&& (BSP_PB_GetState(BUTTON_WAKEUP) != RESET)*/)
 8003d7a:	2d00      	cmp	r5, #0
 8003d7c:	f000 8219 	beq.w	80041b2 <TEST_PostProcess+0x46a>
  else if(TestContext_Ptr->CaptureContext.capture_state==2)
 8003d80:	2d02      	cmp	r5, #2
 8003d82:	d1f0      	bne.n	8003d66 <TEST_PostProcess+0x1e>
    TestContext_Ptr->CaptureContext.capture_state = 0;
 8003d84:	2000      	movs	r0, #0
 8003d86:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
    BSP_SD_DeInit(0);
 8003d8a:	f006 fabb 	bl	800a304 <BSP_SD_DeInit>
    CAMERA_Init(App_Cxt_Ptr->Camera_ContextPtr);
 8003d8e:	6df0      	ldr	r0, [r6, #92]	; 0x5c
 8003d90:	f7fd fb32 	bl	80013f8 <CAMERA_Init>
    while (!App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready);
 8003d94:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8003d96:	7d1a      	ldrb	r2, [r3, #20]
 8003d98:	2a00      	cmp	r2, #0
 8003d9a:	d0fc      	beq.n	8003d96 <TEST_PostProcess+0x4e>
    App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready = 0; /* Reset flag */
 8003d9c:	2700      	movs	r7, #0
 8003d9e:	751f      	strb	r7, [r3, #20]
    BSP_CAMERA_Resume(0);
 8003da0:	4638      	mov	r0, r7
 8003da2:	f005 fa2f 	bl	8009204 <BSP_CAMERA_Resume>
    if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
 8003da6:	f8d4 3aa0 	ldr.w	r3, [r4, #2720]	; 0xaa0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f040 8368 	bne.w	8004480 <TEST_PostProcess+0x738>
    BSP_LED_On(LED_GREEN);
 8003db0:	2000      	movs	r0, #0
 8003db2:	f004 f993 	bl	80080dc <BSP_LED_On>
    BSP_LED_Off(LED_RED);
 8003db6:	2002      	movs	r0, #2
 8003db8:	f004 f9a0 	bl	80080fc <BSP_LED_Off>
}
 8003dbc:	b019      	add	sp, #100	; 0x64
 8003dbe:	ecbd 8b04 	vpop	{d8-d9}
 8003dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Validation_PostProcess(App_Cxt_Ptr->Test_ContextPtr);
 8003dc6:	6ed7      	ldr	r7, [r2, #108]	; 0x6c
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 8003dc8:	f8d7 3b7c 	ldr.w	r3, [r7, #2940]	; 0xb7c
  if(TestContext_Ptr->ValidationContext.validation_completed == 0)
 8003dcc:	f8d7 6440 	ldr.w	r6, [r7, #1088]	; 0x440
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 8003dd0:	9302      	str	r3, [sp, #8]
  if(TestContext_Ptr->ValidationContext.validation_completed == 0)
 8003dd2:	2e00      	cmp	r6, #0
 8003dd4:	f000 80c1 	beq.w	8003f5a <TEST_PostProcess+0x212>
    if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
 8003dd8:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 80af 	beq.w	8003f40 <TEST_PostProcess+0x1f8>
      TestContext_Ptr->UartContext.uart_host_requested_mode=NOMINAL;
 8003de2:	2101      	movs	r1, #1
      TestContext_Ptr->ValidationContext.overall_loss = 0.0;
 8003de4:	2200      	movs	r2, #0
 8003de6:	2300      	movs	r3, #0
      TestContext_Ptr->ValidationContext.validation_completed=0;
 8003de8:	2000      	movs	r0, #0
 8003dea:	f507 6489 	add.w	r4, r7, #1096	; 0x448
 8003dee:	f607 1558 	addw	r5, r7, #2392	; 0x958
      TestContext_Ptr->UartContext.uart_host_requested_mode=NOMINAL;
 8003df2:	f887 1aa4 	strb.w	r1, [r7, #2724]	; 0xaa4
      TestContext_Ptr->ValidationContext.nbr_tested = 1;
 8003df6:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
      TestContext_Ptr->ValidationContext.validation_completed=0;
 8003dfa:	f8c7 0440 	str.w	r0, [r7, #1088]	; 0x440
      TestContext_Ptr->ValidationContext.overall_loss = 0.0;
 8003dfe:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
      TestContext_Ptr->ValidationContext.avg_loss = 0.0;
 8003e02:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
 8003e06:	4620      	mov	r0, r4
 8003e08:	3448      	adds	r4, #72	; 0x48
 8003e0a:	2248      	movs	r2, #72	; 0x48
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	f019 fe6e 	bl	801daee <memset>
      for (int i=0; i<AI_NET_OUTPUT_SIZE; i++)
 8003e12:	42ac      	cmp	r4, r5
 8003e14:	d1f7      	bne.n	8003e06 <TEST_PostProcess+0xbe>
      App_Cxt_Ptr->run_loop = 0;
 8003e16:	9b02      	ldr	r3, [sp, #8]
 8003e18:	2000      	movs	r0, #0
      *(aTxBuffer) = CMD_COMPLETE_SUCCESS_EVT;
 8003e1a:	4cb5      	ldr	r4, [pc, #724]	; (80040f0 <TEST_PostProcess+0x3a8>)
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8003e1c:	f607 27bc 	addw	r7, r7, #2748	; 0xabc
      App_Cxt_Ptr->run_loop = 0;
 8003e20:	6058      	str	r0, [r3, #4]
      BSP_SD_DeInit(0);
 8003e22:	f006 fa6f 	bl	800a304 <BSP_SD_DeInit>
      *(aTxBuffer) = CMD_COMPLETE_SUCCESS_EVT;
 8003e26:	2302      	movs	r3, #2
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8003e28:	4620      	mov	r0, r4
 8003e2a:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 8003e2e:	461a      	mov	r2, r3
      *(aTxBuffer) = CMD_COMPLETE_SUCCESS_EVT;
 8003e30:	7023      	strb	r3, [r4, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8003e32:	f000 fc4d 	bl	80046d0 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8003e36:	4621      	mov	r1, r4
 8003e38:	4638      	mov	r0, r7
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f00e f818 	bl	8011e70 <HAL_UART_Transmit_DMA>
 8003e40:	2800      	cmp	r0, #0
 8003e42:	f040 8238 	bne.w	80042b6 <TEST_PostProcess+0x56e>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8003e46:	4638      	mov	r0, r7
 8003e48:	f00e fa58 	bl	80122fc <HAL_UART_GetState>
 8003e4c:	2820      	cmp	r0, #32
 8003e4e:	d1fa      	bne.n	8003e46 <TEST_PostProcess+0xfe>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8003e50:	4638      	mov	r0, r7
 8003e52:	220a      	movs	r2, #10
 8003e54:	49a7      	ldr	r1, [pc, #668]	; (80040f4 <TEST_PostProcess+0x3ac>)
 8003e56:	f00e f861 	bl	8011f1c <HAL_UART_Receive_DMA>
 8003e5a:	2800      	cmp	r0, #0
 8003e5c:	f040 82ee 	bne.w	800443c <TEST_PostProcess+0x6f4>
        execution_timings_buff[i] = App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[i];
 8003e60:	9b02      	ldr	r3, [sp, #8]
 8003e62:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003e64:	4ba4      	ldr	r3, [pc, #656]	; (80040f8 <TEST_PostProcess+0x3b0>)
 8003e66:	6811      	ldr	r1, [r2, #0]
 8003e68:	6019      	str	r1, [r3, #0]
 8003e6a:	6851      	ldr	r1, [r2, #4]
 8003e6c:	6059      	str	r1, [r3, #4]
 8003e6e:	6891      	ldr	r1, [r2, #8]
 8003e70:	6099      	str	r1, [r3, #8]
 8003e72:	68d1      	ldr	r1, [r2, #12]
 8003e74:	60d9      	str	r1, [r3, #12]
 8003e76:	6912      	ldr	r2, [r2, #16]
 8003e78:	611a      	str	r2, [r3, #16]
}
 8003e7a:	b019      	add	sp, #100	; 0x64
 8003e7c:	ecbd 8b04 	vpop	{d8-d9}
 8003e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Dump_PostProcess(App_Cxt_Ptr->Test_ContextPtr);
 8003e84:	6ed4      	ldr	r4, [r2, #108]	; 0x6c
  if(TestContext_Ptr->DumpContext.dump_state==0)
 8003e86:	f8d4 60b8 	ldr.w	r6, [r4, #184]	; 0xb8
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 8003e8a:	f8d4 5b7c 	ldr.w	r5, [r4, #2940]	; 0xb7c
  if(TestContext_Ptr->DumpContext.dump_state==0)
 8003e8e:	2e00      	cmp	r6, #0
 8003e90:	f000 8148 	beq.w	8004124 <TEST_PostProcess+0x3dc>
  else if(TestContext_Ptr->DumpContext.dump_state == 2)
 8003e94:	2e02      	cmp	r6, #2
 8003e96:	f47f af66 	bne.w	8003d66 <TEST_PostProcess+0x1e>
    if(TestContext_Ptr->DumpContext.Dump_FrameSource != SDCARD_FILE)
 8003e9a:	7923      	ldrb	r3, [r4, #4]
 8003e9c:	2b03      	cmp	r3, #3
 8003e9e:	f8d4 3aa0 	ldr.w	r3, [r4, #2720]	; 0xaa0
 8003ea2:	d005      	beq.n	8003eb0 <TEST_PostProcess+0x168>
      if((TestContext_Ptr->UartContext.uart_cmd_ongoing==0)|| (TestContext_Ptr->UartContext.uart_cmd_ongoing==1 && TestContext_Ptr->UartContext.uart_host_requested_dump_memory == SDCARD))
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f000 820e 	beq.w	80042c6 <TEST_PostProcess+0x57e>
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	f000 8206 	beq.w	80042bc <TEST_PostProcess+0x574>
    TestContext_Ptr->DumpContext.dump_state = 0;
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
    if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f43f af7a 	beq.w	8003db0 <TEST_PostProcess+0x68>
      if(TestContext_Ptr->UartContext.uart_host_requested_dump_memory == SDRAM)
 8003ebc:	f894 3aa6 	ldrb.w	r3, [r4, #2726]	; 0xaa6
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	f000 8290 	beq.w	80043e6 <TEST_PostProcess+0x69e>
  uint8_t cmd_status=CMD_COMPLETE_SUCCESS_EVT;
 8003ec6:	2602      	movs	r6, #2
 8003ec8:	f8df 8250 	ldr.w	r8, [pc, #592]	; 800411c <TEST_PostProcess+0x3d4>
      if(TestContext_Ptr->UartContext.uart_host_requested_dump_number == 0)
 8003ecc:	f8d4 3aa8 	ldr.w	r3, [r4, #2728]	; 0xaa8
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f000 8231 	beq.w	8004338 <TEST_PostProcess+0x5f0>
        if(TestContext_Ptr->UartContext.uart_host_requested_dump_number == 0xFFFF)
 8003ed6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003eda:	4293      	cmp	r3, r2
 8003edc:	f000 820d 	beq.w	80042fa <TEST_PostProcess+0x5b2>
          TestContext_Ptr->UartContext.uart_host_requested_dump_number --;
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	f8c4 3aa8 	str.w	r3, [r4, #2728]	; 0xaa8
        UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)TestContext_Ptr->DumpContext.dump_session_name, LEFT_MODE);
 8003ee6:	f015 fd2d 	bl	8019944 <UTIL_LCD_GetFont>
 8003eea:	2303      	movs	r3, #3
 8003eec:	88c1      	ldrh	r1, [r0, #6]
 8003eee:	f104 0210 	add.w	r2, r4, #16
 8003ef2:	2000      	movs	r0, #0
 8003ef4:	f015 fdf4 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
        UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"DUMP READY", RIGHT_MODE);
 8003ef8:	f015 fd24 	bl	8019944 <UTIL_LCD_GetFont>
 8003efc:	2302      	movs	r3, #2
 8003efe:	88c1      	ldrh	r1, [r0, #6]
 8003f00:	2000      	movs	r0, #0
 8003f02:	4a7e      	ldr	r2, [pc, #504]	; (80040fc <TEST_PostProcess+0x3b4>)
 8003f04:	f015 fdec 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
        DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8003f08:	6e68      	ldr	r0, [r5, #100]	; 0x64
 8003f0a:	f7fd fcf9 	bl	8001900 <DISPLAY_Refresh>
        TestContext_Ptr->DumpContext.dump_state = 1;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
        dump_output_buff[i] = *((float*)App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer + i);
 8003f14:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8003f16:	4b7a      	ldr	r3, [pc, #488]	; (8004100 <TEST_PostProcess+0x3b8>)
 8003f18:	6812      	ldr	r2, [r2, #0]
 8003f1a:	f852 1b04 	ldr.w	r1, [r2], #4
 8003f1e:	f843 1b04 	str.w	r1, [r3], #4
      for(uint32_t i=0; i<AI_NET_OUTPUT_SIZE;i++)
 8003f22:	4543      	cmp	r3, r8
 8003f24:	d1f9      	bne.n	8003f1a <TEST_PostProcess+0x1d2>
        execution_timings_buff[i] = App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[i];
 8003f26:	6eaa      	ldr	r2, [r5, #104]	; 0x68
 8003f28:	4b73      	ldr	r3, [pc, #460]	; (80040f8 <TEST_PostProcess+0x3b0>)
 8003f2a:	6811      	ldr	r1, [r2, #0]
 8003f2c:	6019      	str	r1, [r3, #0]
 8003f2e:	6851      	ldr	r1, [r2, #4]
 8003f30:	6059      	str	r1, [r3, #4]
 8003f32:	6891      	ldr	r1, [r2, #8]
 8003f34:	6099      	str	r1, [r3, #8]
 8003f36:	68d1      	ldr	r1, [r2, #12]
 8003f38:	60d9      	str	r1, [r3, #12]
 8003f3a:	6912      	ldr	r2, [r2, #16]
 8003f3c:	611a      	str	r2, [r3, #16]
 8003f3e:	e737      	b.n	8003db0 <TEST_PostProcess+0x68>
        HAL_Delay(100);
 8003f40:	2064      	movs	r0, #100	; 0x64
 8003f42:	f006 fb63 	bl	800a60c <HAL_Delay>
        BSP_LED_Toggle(LED_GREEN);
 8003f46:	2000      	movs	r0, #0
 8003f48:	f004 f8e8 	bl	800811c <BSP_LED_Toggle>
        HAL_Delay(100);
 8003f4c:	2064      	movs	r0, #100	; 0x64
 8003f4e:	f006 fb5d 	bl	800a60c <HAL_Delay>
        BSP_LED_Toggle(LED_GREEN);
 8003f52:	2000      	movs	r0, #0
 8003f54:	f004 f8e2 	bl	800811c <BSP_LED_Toggle>
 8003f58:	e7f2      	b.n	8003f40 <TEST_PostProcess+0x1f8>
    strcpy(tmp_msg, TestContext_Ptr->ValidationContext.tmp_class_path);
 8003f5a:	4d6a      	ldr	r5, [pc, #424]	; (8004104 <TEST_PostProcess+0x3bc>)
 8003f5c:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 8003f60:	4628      	mov	r0, r5
 8003f62:	f01a fae1 	bl	801e528 <stpcpy>
    strcat(tmp_msg, "/");
 8003f66:	232f      	movs	r3, #47	; 0x2f
    strcat(tmp_msg, TestContext_Ptr->ValidationContext.img_fno.fname);
 8003f68:	f207 21ba 	addw	r1, r7, #698	; 0x2ba
 8003f6c:	3001      	adds	r0, #1
    strcat(tmp_msg, "/");
 8003f6e:	f800 3c01 	strb.w	r3, [r0, #-1]
    strcat(tmp_msg, TestContext_Ptr->ValidationContext.img_fno.fname);
 8003f72:	f01a fae2 	bl	801e53a <strcpy>
    size_t predicted_class = App_Cxt_Ptr->ranking[0];
 8003f76:	9b02      	ldr	r3, [sp, #8]
    if (predicted_class != TestContext_Ptr->ValidationContext.class_index)
 8003f78:	f8d7 43bc 	ldr.w	r4, [r7, #956]	; 0x3bc
    size_t predicted_class = App_Cxt_Ptr->ranking[0];
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	9304      	str	r3, [sp, #16]
    if (predicted_class != TestContext_Ptr->ValidationContext.class_index)
 8003f80:	42a3      	cmp	r3, r4
      sprintf(tmp_msg, " was missclassified as %s\n", NN_OUTPUT_CLASS_LIST[predicted_class]);
 8003f82:	4b61      	ldr	r3, [pc, #388]	; (8004108 <TEST_PostProcess+0x3c0>)
 8003f84:	9305      	str	r3, [sp, #20]
    if (predicted_class != TestContext_Ptr->ValidationContext.class_index)
 8003f86:	d019      	beq.n	8003fbc <TEST_PostProcess+0x274>
      stm32fs_err_t res = STM32Fs_WriteTextToFile("missclassified.txt", tmp_msg, STM32FS_APPEND_TO_FILE);
 8003f88:	2201      	movs	r2, #1
 8003f8a:	4629      	mov	r1, r5
 8003f8c:	485f      	ldr	r0, [pc, #380]	; (800410c <TEST_PostProcess+0x3c4>)
 8003f8e:	f015 fa9f 	bl	80194d0 <STM32Fs_WriteTextToFile>
      sprintf(tmp_msg, " was missclassified as %s\n", NN_OUTPUT_CLASS_LIST[predicted_class]);
 8003f92:	495f      	ldr	r1, [pc, #380]	; (8004110 <TEST_PostProcess+0x3c8>)
      stm32fs_err_t res = STM32Fs_WriteTextToFile("missclassified.txt", tmp_msg, STM32FS_APPEND_TO_FILE);
 8003f94:	4604      	mov	r4, r0
      sprintf(tmp_msg, " was missclassified as %s\n", NN_OUTPUT_CLASS_LIST[predicted_class]);
 8003f96:	4628      	mov	r0, r5
 8003f98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f9c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003fa0:	f01a faa2 	bl	801e4e8 <siprintf>
      res |= STM32Fs_WriteTextToFile("missclassified.txt", tmp_msg, STM32FS_APPEND_TO_FILE);
 8003fa4:	4629      	mov	r1, r5
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	4858      	ldr	r0, [pc, #352]	; (800410c <TEST_PostProcess+0x3c4>)
 8003faa:	f015 fa91 	bl	80194d0 <STM32Fs_WriteTextToFile>
 8003fae:	4320      	orrs	r0, r4
      if (res != STM32FS_ERROR_NONE)
 8003fb0:	f010 0fff 	tst.w	r0, #255	; 0xff
 8003fb4:	f040 8289 	bne.w	80044ca <TEST_PostProcess+0x782>
 8003fb8:	f8d7 43bc 	ldr.w	r4, [r7, #956]	; 0x3bc
    float confidence = App_Cxt_Ptr->nn_top1_output_class_proba;
 8003fbc:	9b02      	ldr	r3, [sp, #8]
    TestContext_Ptr->ValidationContext.nbr_tested++;
 8003fbe:	f8d7 5120 	ldr.w	r5, [r7, #288]	; 0x120
    float confidence = App_Cxt_Ptr->nn_top1_output_class_proba;
 8003fc2:	ed93 9a04 	vldr	s18, [r3, #16]
    TestContext_Ptr->ValidationContext.nbr_tested++;
 8003fc6:	3501      	adds	r5, #1
    if (confidence > 0)
 8003fc8:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
    TestContext_Ptr->ValidationContext.nbr_tested++;
 8003fcc:	f8c7 5120 	str.w	r5, [r7, #288]	; 0x120
    if (confidence > 0)
 8003fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fd4:	f340 818e 	ble.w	80042f4 <TEST_PostProcess+0x5ac>
      categorical_crossentropy = -log((double)confidence);
 8003fd8:	eeb7 0ac9 	vcvt.f64.f32	d0, s18
 8003fdc:	f01b fdc0 	bl	801fb60 <log>
 8003fe0:	eeb1 6b40 	vneg.f64	d6, d0
    TestContext_Ptr->ValidationContext.overall_loss += categorical_crossentropy;
 8003fe4:	ed97 7b44 	vldr	d7, [r7, #272]	; 0x110
 8003fe8:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003fec:	ed87 6b44 	vstr	d6, [r7, #272]	; 0x110
    if (TestContext_Ptr->ValidationContext.nbr_tested > 0)
 8003ff0:	b13d      	cbz	r5, 8004002 <TEST_PostProcess+0x2ba>
      TestContext_Ptr->ValidationContext.avg_loss = TestContext_Ptr->ValidationContext.overall_loss / (double)TestContext_Ptr->ValidationContext.nbr_tested;
 8003ff2:	ee07 5a90 	vmov	s15, r5
 8003ff6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003ffa:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8003ffe:	ed87 5b46 	vstr	d5, [r7, #280]	; 0x118
 8004002:	9a04      	ldr	r2, [sp, #16]
 8004004:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8004008:	f207 408c 	addw	r0, r7, #1164	; 0x48c
 800400c:	f607 159c 	addw	r5, r7, #2460	; 0x99c
 8004010:	eb02 0343 	add.w	r3, r2, r3, lsl #1
  int conf_max = 0;
 8004014:	2200      	movs	r2, #0
 8004016:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    TestContext_Ptr->ValidationContext.valid_conf_matrix[TestContext_Ptr->ValidationContext.class_index][predicted_class]++;
 800401a:	f8d3 1448 	ldr.w	r1, [r3, #1096]	; 0x448
 800401e:	3101      	adds	r1, #1
 8004020:	f8c3 1448 	str.w	r1, [r3, #1096]	; 0x448
 8004024:	f1a0 0348 	sub.w	r3, r0, #72	; 0x48
      if (conf_matrix[row][col] > conf_max)
 8004028:	f853 1f04 	ldr.w	r1, [r3, #4]!
 800402c:	4614      	mov	r4, r2
 800402e:	428a      	cmp	r2, r1
 8004030:	d201      	bcs.n	8004036 <TEST_PostProcess+0x2ee>
        conf_max = conf_matrix[row][col];
 8004032:	460a      	mov	r2, r1
 8004034:	460c      	mov	r4, r1
    for (int col = 0; col < NN_OUTPUT_CLASS_NUMBER; col++)
 8004036:	4283      	cmp	r3, r0
 8004038:	d1f6      	bne.n	8004028 <TEST_PostProcess+0x2e0>
 800403a:	f103 0048 	add.w	r0, r3, #72	; 0x48
  for (int row = 0; row < NN_OUTPUT_CLASS_NUMBER; row++)
 800403e:	42a8      	cmp	r0, r5
 8004040:	d1f0      	bne.n	8004024 <TEST_PostProcess+0x2dc>
 8004042:	f207 4344 	addw	r3, r7, #1092	; 0x444
        float value_norm = value / (float)(conf_max + 1);
 8004046:	3401      	adds	r4, #1
  UTIL_LCD_SetFont(&Font12);
 8004048:	4832      	ldr	r0, [pc, #200]	; (8004114 <TEST_PostProcess+0x3cc>)
        float value_norm = value / (float)(conf_max + 1);
 800404a:	f04f 083c 	mov.w	r8, #60	; 0x3c
 800404e:	9303      	str	r3, [sp, #12]
  UTIL_LCD_SetFont(&Font12);
 8004050:	f015 fc70 	bl	8019934 <UTIL_LCD_SetFont>
        float value_norm = value / (float)(conf_max + 1);
 8004054:	ee07 4a90 	vmov	s15, r4
 8004058:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800405c:	ae06      	add	r6, sp, #24
        UTIL_LCD_SetBackColor(heat_map[heat_map_idx]);
 800405e:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8004120 <TEST_PostProcess+0x3d8>
        float value_norm = value / (float)(conf_max + 1);
 8004062:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004066:	eec7 8a27 	vdiv.f32	s17, s14, s15
        conf_max = conf_matrix[row][col];
 800406a:	9d03      	ldr	r5, [sp, #12]
 800406c:	f240 1481 	movw	r4, #385	; 0x181
        sprintf(conf_value, ".");
 8004070:	f04f 092e 	mov.w	r9, #46	; 0x2e
 8004074:	e02f      	b.n	80040d6 <TEST_PostProcess+0x38e>
        int heat_map_idx = (int)floorf(value_norm * 9.0f);
 8004076:	ee27 8a27 	vmul.f32	s16, s14, s15
 800407a:	ee28 8a28 	vmul.f32	s16, s16, s17
 800407e:	febb 8a48 	vrintm.f32	s16, s16
 8004082:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8004086:	ee17 ba90 	vmov	fp, s15
        UTIL_LCD_SetBackColor(heat_map[heat_map_idx]);
 800408a:	f85a 002b 	ldr.w	r0, [sl, fp, lsl #2]
 800408e:	f015 fc49 	bl	8019924 <UTIL_LCD_SetBackColor>
        uint32_t text_color = heat_map_idx > 5 ? UTIL_LCD_COLOR_BLACK : UTIL_LCD_COLOR_WHITE;
 8004092:	f1bb 0f06 	cmp.w	fp, #6
        UTIL_LCD_SetTextColor(text_color);
 8004096:	bfb4      	ite	lt
 8004098:	f04f 30ff 	movlt.w	r0, #4294967295
 800409c:	f04f 407f 	movge.w	r0, #4278190080	; 0xff000000
 80040a0:	f015 fc38 	bl	8019914 <UTIL_LCD_SetTextColor>
        sprintf(conf_value, "%d", (unsigned int)conf_matrix[row][col]);
 80040a4:	682a      	ldr	r2, [r5, #0]
 80040a6:	491c      	ldr	r1, [pc, #112]	; (8004118 <TEST_PostProcess+0x3d0>)
 80040a8:	4630      	mov	r0, r6
 80040aa:	f01a fa1d 	bl	801e4e8 <siprintf>
      UTIL_LCD_DisplayStringAt(x_off + col * 20, y_off + row * 20, (uint8_t *)conf_value, LEFT_MODE);
 80040ae:	2303      	movs	r3, #3
 80040b0:	4632      	mov	r2, r6
 80040b2:	4641      	mov	r1, r8
 80040b4:	4620      	mov	r0, r4
 80040b6:	f015 fd13 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
      UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
 80040ba:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80040be:	f015 fc31 	bl	8019924 <UTIL_LCD_SetBackColor>
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 80040c2:	f04f 30ff 	mov.w	r0, #4294967295
 80040c6:	f015 fc25 	bl	8019914 <UTIL_LCD_SetTextColor>
 80040ca:	3414      	adds	r4, #20
    for (int col = 0; col < NN_OUTPUT_CLASS_NUMBER; col++)
 80040cc:	f240 23e9 	movw	r3, #745	; 0x2e9
 80040d0:	429c      	cmp	r4, r3
 80040d2:	f000 8090 	beq.w	80041f6 <TEST_PostProcess+0x4ae>
      uint32_t value = conf_matrix[row][col];
 80040d6:	f855 3f04 	ldr.w	r3, [r5, #4]!
        int heat_map_idx = (int)floorf(value_norm * 9.0f);
 80040da:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
        float value_norm = value / (float)(conf_max + 1);
 80040de:	ee07 3a10 	vmov	s14, r3
 80040e2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
      if (value > 0)
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1c5      	bne.n	8004076 <TEST_PostProcess+0x32e>
        sprintf(conf_value, ".");
 80040ea:	f8a6 9000 	strh.w	r9, [r6]
 80040ee:	e7de      	b.n	80040ae <TEST_PostProcess+0x366>
 80040f0:	24002800 	.word	0x24002800
 80040f4:	240027e0 	.word	0x240027e0
 80040f8:	d0fd3280 	.word	0xd0fd3280
 80040fc:	080206bc 	.word	0x080206bc
 8004100:	d0d31d80 	.word	0xd0d31d80
 8004104:	24002e30 	.word	0x24002e30
 8004108:	24000004 	.word	0x24000004
 800410c:	0802047c 	.word	0x0802047c
 8004110:	080206c8 	.word	0x080206c8
 8004114:	240025e8 	.word	0x240025e8
 8004118:	08020714 	.word	0x08020714
 800411c:	d0d31dc8 	.word	0xd0d31dc8
 8004120:	0802088c 	.word	0x0802088c
    UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)TestContext_Ptr->DumpContext.dump_session_name, LEFT_MODE);
 8004124:	f015 fc0e 	bl	8019944 <UTIL_LCD_GetFont>
 8004128:	463b      	mov	r3, r7
 800412a:	88c1      	ldrh	r1, [r0, #6]
 800412c:	f104 0210 	add.w	r2, r4, #16
 8004130:	4630      	mov	r0, r6
 8004132:	f015 fcd5 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"DUMP READY", RIGHT_MODE);
 8004136:	f015 fc05 	bl	8019944 <UTIL_LCD_GetFont>
 800413a:	2302      	movs	r3, #2
 800413c:	88c1      	ldrh	r1, [r0, #6]
 800413e:	4630      	mov	r0, r6
 8004140:	4ac0      	ldr	r2, [pc, #768]	; (8004444 <TEST_PostProcess+0x6fc>)
 8004142:	f015 fccd 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
    sprintf(msg, "%s %.0f%%", App_Cxt_Ptr->nn_top1_output_class_name, App_Cxt_Ptr->nn_top1_output_class_proba * 100);
 8004146:	ed95 7a04 	vldr	s14, [r5, #16]
 800414a:	eddf 7abf 	vldr	s15, [pc, #764]	; 8004448 <TEST_PostProcess+0x700>
 800414e:	a806      	add	r0, sp, #24
 8004150:	68ea      	ldr	r2, [r5, #12]
 8004152:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004156:	49bd      	ldr	r1, [pc, #756]	; (800444c <TEST_PostProcess+0x704>)
 8004158:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800415c:	ed8d 7b00 	vstr	d7, [sp]
 8004160:	f01a f9c2 	bl	801e4e8 <siprintf>
    UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_TOP_N_LAST_LINE - NN_TOP_N_DISPLAY + 0), (uint8_t *)msg, CENTER_MODE);
 8004164:	f015 fbee 	bl	8019944 <UTIL_LCD_GetFont>
 8004168:	88c1      	ldrh	r1, [r0, #6]
 800416a:	2301      	movs	r3, #1
 800416c:	aa06      	add	r2, sp, #24
 800416e:	eb01 0781 	add.w	r7, r1, r1, lsl #2
 8004172:	4630      	mov	r0, r6
 8004174:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 8004178:	f015 fcb2 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
    sprintf(msg, "Inference: %ldms", App_Cxt_Ptr->nn_inference_time);
 800417c:	68aa      	ldr	r2, [r5, #8]
 800417e:	49b4      	ldr	r1, [pc, #720]	; (8004450 <TEST_PostProcess+0x708>)
 8004180:	a806      	add	r0, sp, #24
 8004182:	f01a f9b1 	bl	801e4e8 <siprintf>
    UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_INFER_TIME_LINE), (uint8_t *)msg, CENTER_MODE);
 8004186:	f015 fbdd 	bl	8019944 <UTIL_LCD_GetFont>
 800418a:	88c1      	ldrh	r1, [r0, #6]
 800418c:	aa06      	add	r2, sp, #24
 800418e:	2301      	movs	r3, #1
 8004190:	0109      	lsls	r1, r1, #4
 8004192:	4630      	mov	r0, r6
 8004194:	f015 fca4 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8004198:	6e68      	ldr	r0, [r5, #100]	; 0x64
 800419a:	f7fd fbb1 	bl	8001900 <DISPLAY_Refresh>
    if(BSP_PB_GetState(BUTTON_WAKEUP) != RESET)
 800419e:	4630      	mov	r0, r6
 80041a0:	f004 f816 	bl	80081d0 <BSP_PB_GetState>
 80041a4:	2800      	cmp	r0, #0
 80041a6:	f43f adde 	beq.w	8003d66 <TEST_PostProcess+0x1e>
      TestContext_Ptr->DumpContext.dump_state = 1;
 80041aa:	2301      	movs	r3, #1
 80041ac:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 80041b0:	e5d9      	b.n	8003d66 <TEST_PostProcess+0x1e>
    UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)TestContext_Ptr->CaptureContext.capture_session_name, LEFT_MODE);
 80041b2:	f015 fbc7 	bl	8019944 <UTIL_LCD_GetFont>
 80041b6:	2303      	movs	r3, #3
 80041b8:	88c1      	ldrh	r1, [r0, #6]
 80041ba:	f104 02cc 	add.w	r2, r4, #204	; 0xcc
 80041be:	4628      	mov	r0, r5
 80041c0:	f015 fc8e 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"CAPTURE READY", RIGHT_MODE);
 80041c4:	f015 fbbe 	bl	8019944 <UTIL_LCD_GetFont>
 80041c8:	2302      	movs	r3, #2
 80041ca:	88c1      	ldrh	r1, [r0, #6]
 80041cc:	4628      	mov	r0, r5
 80041ce:	4aa1      	ldr	r2, [pc, #644]	; (8004454 <TEST_PostProcess+0x70c>)
 80041d0:	f015 fc86 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 80041d4:	6e70      	ldr	r0, [r6, #100]	; 0x64
 80041d6:	f7fd fb93 	bl	8001900 <DISPLAY_Refresh>
    if(BSP_PB_GetState(BUTTON_WAKEUP) != RESET)
 80041da:	4628      	mov	r0, r5
 80041dc:	f003 fff8 	bl	80081d0 <BSP_PB_GetState>
 80041e0:	2800      	cmp	r0, #0
 80041e2:	f43f adc0 	beq.w	8003d66 <TEST_PostProcess+0x1e>
      TestContext_Ptr->CaptureContext.capture_state = 1;
 80041e6:	2301      	movs	r3, #1
 80041e8:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
}
 80041ec:	b019      	add	sp, #100	; 0x64
 80041ee:	ecbd 8b04 	vpop	{d8-d9}
 80041f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041f6:	9b03      	ldr	r3, [sp, #12]
 80041f8:	f108 0814 	add.w	r8, r8, #20
 80041fc:	3348      	adds	r3, #72	; 0x48
  for (int row = 0; row < NN_OUTPUT_CLASS_NUMBER; row++)
 80041fe:	f5b8 7fd2 	cmp.w	r8, #420	; 0x1a4
 8004202:	9303      	str	r3, [sp, #12]
 8004204:	f47f af31 	bne.w	800406a <TEST_PostProcess+0x322>
  UTIL_LCD_SetFont(&Font20);
 8004208:	4893      	ldr	r0, [pc, #588]	; (8004458 <TEST_PostProcess+0x710>)
    UTIL_LCD_DisplayStringAt(40, LINE(22), (uint8_t *)tmp_msg, LEFT_MODE);
 800420a:	2416      	movs	r4, #22
  UTIL_LCD_SetFont(&Font20);
 800420c:	f015 fb92 	bl	8019934 <UTIL_LCD_SetFont>
    sprintf(tmp_msg, "%s %.0f%%", NN_OUTPUT_CLASS_LIST[predicted_class], confidence * 100);
 8004210:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8004448 <TEST_PostProcess+0x700>
 8004214:	498d      	ldr	r1, [pc, #564]	; (800444c <TEST_PostProcess+0x704>)
 8004216:	ee29 7a07 	vmul.f32	s14, s18, s14
 800421a:	4890      	ldr	r0, [pc, #576]	; (800445c <TEST_PostProcess+0x714>)
 800421c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004220:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8004224:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004228:	ed8d 7b00 	vstr	d7, [sp]
 800422c:	f01a f95c 	bl	801e4e8 <siprintf>
    UTIL_LCD_DisplayStringAt(40, LINE(21), (uint8_t *)tmp_msg, LEFT_MODE);
 8004230:	f015 fb88 	bl	8019944 <UTIL_LCD_GetFont>
 8004234:	88c1      	ldrh	r1, [r0, #6]
 8004236:	2303      	movs	r3, #3
 8004238:	4a88      	ldr	r2, [pc, #544]	; (800445c <TEST_PostProcess+0x714>)
 800423a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800423e:	2028      	movs	r0, #40	; 0x28
 8004240:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8004244:	f015 fc4c 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
    sprintf(tmp_msg, "Average loss (categorical cross-entropy) %.4f ", TestContext_Ptr->ValidationContext.avg_loss);
 8004248:	4985      	ldr	r1, [pc, #532]	; (8004460 <TEST_PostProcess+0x718>)
 800424a:	4884      	ldr	r0, [pc, #528]	; (800445c <TEST_PostProcess+0x714>)
 800424c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8004250:	f01a f94a 	bl	801e4e8 <siprintf>
    UTIL_LCD_DisplayStringAt(40, LINE(22), (uint8_t *)tmp_msg, LEFT_MODE);
 8004254:	f015 fb76 	bl	8019944 <UTIL_LCD_GetFont>
 8004258:	88c1      	ldrh	r1, [r0, #6]
 800425a:	2303      	movs	r3, #3
 800425c:	4a7f      	ldr	r2, [pc, #508]	; (800445c <TEST_PostProcess+0x714>)
 800425e:	fb04 f101 	mul.w	r1, r4, r1
 8004262:	2028      	movs	r0, #40	; 0x28
 8004264:	f015 fc3c 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
    sprintf(tmp_msg, "Class: %s, id %d", TestContext_Ptr->ValidationContext.fno.fname, TestContext_Ptr->ValidationContext.class_index);
 8004268:	f8d7 33bc 	ldr.w	r3, [r7, #956]	; 0x3bc
 800426c:	f507 72b7 	add.w	r2, r7, #366	; 0x16e
 8004270:	497c      	ldr	r1, [pc, #496]	; (8004464 <TEST_PostProcess+0x71c>)
 8004272:	487a      	ldr	r0, [pc, #488]	; (800445c <TEST_PostProcess+0x714>)
 8004274:	f01a f938 	bl	801e4e8 <siprintf>
    UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)tmp_msg, CENTER_MODE);
 8004278:	f015 fb64 	bl	8019944 <UTIL_LCD_GetFont>
 800427c:	2301      	movs	r3, #1
 800427e:	88c1      	ldrh	r1, [r0, #6]
 8004280:	2000      	movs	r0, #0
 8004282:	4a76      	ldr	r2, [pc, #472]	; (800445c <TEST_PostProcess+0x714>)
 8004284:	f015 fc2c 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8004288:	9c02      	ldr	r4, [sp, #8]
 800428a:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800428c:	f7fd fb38 	bl	8001900 <DISPLAY_Refresh>
    if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
 8004290:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 8004294:	2b00      	cmp	r3, #0
 8004296:	f43f ad66 	beq.w	8003d66 <TEST_PostProcess+0x1e>
      for (int i=0; i<AI_NET_OUTPUT_SIZE*4; i++)
 800429a:	2300      	movs	r3, #0
        *(TestContext_Ptr->ValidationContext.validation_write_bufferPtr)++=*((uint8_t *)(App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer) + i);
 800429c:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800429e:	f8d7 2a98 	ldr.w	r2, [r7, #2712]	; 0xa98
 80042a2:	6809      	ldr	r1, [r1, #0]
 80042a4:	1c50      	adds	r0, r2, #1
 80042a6:	f8c7 0a98 	str.w	r0, [r7, #2712]	; 0xa98
 80042aa:	5cc9      	ldrb	r1, [r1, r3]
      for (int i=0; i<AI_NET_OUTPUT_SIZE*4; i++)
 80042ac:	3301      	adds	r3, #1
 80042ae:	2b48      	cmp	r3, #72	; 0x48
        *(TestContext_Ptr->ValidationContext.validation_write_bufferPtr)++=*((uint8_t *)(App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer) + i);
 80042b0:	7011      	strb	r1, [r2, #0]
      for (int i=0; i<AI_NET_OUTPUT_SIZE*4; i++)
 80042b2:	d1f3      	bne.n	800429c <TEST_PostProcess+0x554>
 80042b4:	e557      	b.n	8003d66 <TEST_PostProcess+0x1e>
      Error_Handler();
 80042b6:	f000 fa77 	bl	80047a8 <Error_Handler>
 80042ba:	e5c4      	b.n	8003e46 <TEST_PostProcess+0xfe>
      if((TestContext_Ptr->UartContext.uart_cmd_ongoing==0)|| (TestContext_Ptr->UartContext.uart_cmd_ongoing==1 && TestContext_Ptr->UartContext.uart_host_requested_dump_memory == SDCARD))
 80042bc:	f894 2aa6 	ldrb.w	r2, [r4, #2726]	; 0xaa6
 80042c0:	2a00      	cmp	r2, #0
 80042c2:	f47f adf5 	bne.w	8003eb0 <TEST_PostProcess+0x168>
        BSP_SD_DeInit(0);
 80042c6:	2000      	movs	r0, #0
 80042c8:	f006 f81c 	bl	800a304 <BSP_SD_DeInit>
        CAMERA_Init(App_Cxt_Ptr->Camera_ContextPtr);
 80042cc:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 80042ce:	f7fd f893 	bl	80013f8 <CAMERA_Init>
        if(TestContext_Ptr->DumpContext.Dump_FrameSource == CAMERA_COLORBAR)
 80042d2:	7923      	ldrb	r3, [r4, #4]
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d102      	bne.n	80042de <TEST_PostProcess+0x596>
          CAMERA_Set_TestBar_Mode(App_Cxt_Ptr->Camera_ContextPtr);
 80042d8:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 80042da:	f7fd f96b 	bl	80015b4 <CAMERA_Set_TestBar_Mode>
        while (!App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready);
 80042de:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 80042e0:	7d1a      	ldrb	r2, [r3, #20]
 80042e2:	2a00      	cmp	r2, #0
 80042e4:	d0fc      	beq.n	80042e0 <TEST_PostProcess+0x598>
        App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready = 0; /* Reset flag */
 80042e6:	2000      	movs	r0, #0
 80042e8:	7518      	strb	r0, [r3, #20]
        BSP_CAMERA_Resume(0);
 80042ea:	f004 ff8b 	bl	8009204 <BSP_CAMERA_Resume>
 80042ee:	f8d4 3aa0 	ldr.w	r3, [r4, #2720]	; 0xaa0
 80042f2:	e5dd      	b.n	8003eb0 <TEST_PostProcess+0x168>
    double categorical_crossentropy = 10.0;
 80042f4:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80042f8:	e674      	b.n	8003fe4 <TEST_PostProcess+0x29c>
          sprintf(msg, "%s %.0f%%", App_Cxt_Ptr->nn_top1_output_class_name, App_Cxt_Ptr->nn_top1_output_class_proba * 100);
 80042fa:	ed95 7a04 	vldr	s14, [r5, #16]
 80042fe:	ae06      	add	r6, sp, #24
 8004300:	eddf 7a51 	vldr	s15, [pc, #324]	; 8004448 <TEST_PostProcess+0x700>
          for(int i=0;i<strlen(msg);i++)
 8004304:	f04f 0900 	mov.w	r9, #0
          sprintf(msg, "%s %.0f%%", App_Cxt_Ptr->nn_top1_output_class_name, App_Cxt_Ptr->nn_top1_output_class_proba * 100);
 8004308:	4630      	mov	r0, r6
 800430a:	4950      	ldr	r1, [pc, #320]	; (800444c <TEST_PostProcess+0x704>)
 800430c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004310:	4f55      	ldr	r7, [pc, #340]	; (8004468 <TEST_PostProcess+0x720>)
 8004312:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8004316:	ed8d 7b00 	vstr	d7, [sp]
 800431a:	68ea      	ldr	r2, [r5, #12]
 800431c:	f01a f8e4 	bl	801e4e8 <siprintf>
          for(int i=0;i<strlen(msg);i++)
 8004320:	4630      	mov	r0, r6
 8004322:	f7fb ffe7 	bl	80002f4 <strlen>
 8004326:	4581      	cmp	r9, r0
 8004328:	d230      	bcs.n	800438c <TEST_PostProcess+0x644>
            *(aTxBuffer + i) = msg[i];
 800432a:	f816 3009 	ldrb.w	r3, [r6, r9]
 800432e:	f807 3009 	strb.w	r3, [r7, r9]
          for(int i=0;i<strlen(msg);i++)
 8004332:	f109 0901 	add.w	r9, r9, #1
 8004336:	e7f3      	b.n	8004320 <TEST_PostProcess+0x5d8>
        *(aTxBuffer) = cmd_status;
 8004338:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8004468 <TEST_PostProcess+0x720>
        TestContext_Ptr->UartContext.uart_host_requested_mode=NOMINAL;
 800433c:	f04f 0a01 	mov.w	sl, #1
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8004340:	f604 27bc 	addw	r7, r4, #2748	; 0xabc
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8004344:	2202      	movs	r2, #2
        TestContext_Ptr->UartContext.uart_host_requested_mode=NOMINAL;
 8004346:	f884 aaa4 	strb.w	sl, [r4, #2724]	; 0xaa4
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800434a:	4648      	mov	r0, r9
        App_Cxt_Ptr->run_loop = 0;
 800434c:	606b      	str	r3, [r5, #4]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800434e:	f44f 61a4 	mov.w	r1, #1312	; 0x520
        *(aTxBuffer) = cmd_status;
 8004352:	f889 6000 	strb.w	r6, [r9]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8004356:	f000 f9bb 	bl	80046d0 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 800435a:	4652      	mov	r2, sl
 800435c:	4649      	mov	r1, r9
 800435e:	4638      	mov	r0, r7
 8004360:	f00d fd86 	bl	8011e70 <HAL_UART_Transmit_DMA>
 8004364:	b108      	cbz	r0, 800436a <TEST_PostProcess+0x622>
      Error_Handler();
 8004366:	f000 fa1f 	bl	80047a8 <Error_Handler>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 800436a:	4638      	mov	r0, r7
 800436c:	f00d ffc6 	bl	80122fc <HAL_UART_GetState>
 8004370:	2820      	cmp	r0, #32
 8004372:	d1fa      	bne.n	800436a <TEST_PostProcess+0x622>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8004374:	4638      	mov	r0, r7
 8004376:	220a      	movs	r2, #10
 8004378:	493c      	ldr	r1, [pc, #240]	; (800446c <TEST_PostProcess+0x724>)
 800437a:	f00d fdcf 	bl	8011f1c <HAL_UART_Receive_DMA>
 800437e:	b108      	cbz	r0, 8004384 <TEST_PostProcess+0x63c>
    Error_Handler();
 8004380:	f000 fa12 	bl	80047a8 <Error_Handler>
         BSP_SD_DeInit(0);/*Required in order to avoid subsequent call to Camera_Init() fct to fail*/
 8004384:	2000      	movs	r0, #0
 8004386:	f005 ffbd 	bl	800a304 <BSP_SD_DeInit>
 800438a:	e5c3      	b.n	8003f14 <TEST_PostProcess+0x1cc>
          *(aTxBuffer + strlen(msg)) = 32;//Space
 800438c:	f04f 0c20 	mov.w	ip, #32
          Uart_Tx(TestContext_Ptr, (uint8_t*)aTxBuffer, sizeof(aTxBuffer), strlen(msg)+1);
 8004390:	1c43      	adds	r3, r0, #1
 8004392:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8004396:	4934      	ldr	r1, [pc, #208]	; (8004468 <TEST_PostProcess+0x720>)
          *(aTxBuffer + strlen(msg)) = 32;//Space
 8004398:	f807 c000 	strb.w	ip, [r7, r0]
          for(int i=0;i<strlen(msg);i++)
 800439c:	f04f 0900 	mov.w	r9, #0
          Uart_Tx(TestContext_Ptr, (uint8_t*)aTxBuffer, sizeof(aTxBuffer), strlen(msg)+1);
 80043a0:	4620      	mov	r0, r4
 80043a2:	f7fd fb91 	bl	8001ac8 <Uart_Tx>
          sprintf(msg, "Inference: %ldms", App_Cxt_Ptr->nn_inference_time);
 80043a6:	68aa      	ldr	r2, [r5, #8]
 80043a8:	4929      	ldr	r1, [pc, #164]	; (8004450 <TEST_PostProcess+0x708>)
 80043aa:	4630      	mov	r0, r6
 80043ac:	f01a f89c 	bl	801e4e8 <siprintf>
          for(int i=0;i<strlen(msg);i++)
 80043b0:	4630      	mov	r0, r6
 80043b2:	f7fb ff9f 	bl	80002f4 <strlen>
 80043b6:	4581      	cmp	r9, r0
 80043b8:	d206      	bcs.n	80043c8 <TEST_PostProcess+0x680>
            *(aTxBuffer + i) = msg[i];
 80043ba:	f816 3009 	ldrb.w	r3, [r6, r9]
 80043be:	f807 3009 	strb.w	r3, [r7, r9]
          for(int i=0;i<strlen(msg);i++)
 80043c2:	f109 0901 	add.w	r9, r9, #1
 80043c6:	e7f3      	b.n	80043b0 <TEST_PostProcess+0x668>
          *(aTxBuffer + strlen(msg)+1) = 10;//LF
 80043c8:	183e      	adds	r6, r7, r0
          *(aTxBuffer + strlen(msg)) = 13;//CR
 80043ca:	220d      	movs	r2, #13
          *(aTxBuffer + strlen(msg)+1) = 10;//LF
 80043cc:	f04f 0c0a 	mov.w	ip, #10
          Uart_Tx(TestContext_Ptr, (uint8_t*)aTxBuffer, sizeof(aTxBuffer), strlen(msg)+2);
 80043d0:	1c83      	adds	r3, r0, #2
          *(aTxBuffer + strlen(msg)) = 13;//CR
 80043d2:	543a      	strb	r2, [r7, r0]
          Uart_Tx(TestContext_Ptr, (uint8_t*)aTxBuffer, sizeof(aTxBuffer), strlen(msg)+2);
 80043d4:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 80043d8:	4923      	ldr	r1, [pc, #140]	; (8004468 <TEST_PostProcess+0x720>)
 80043da:	4620      	mov	r0, r4
          *(aTxBuffer + strlen(msg)+1) = 10;//LF
 80043dc:	f886 c001 	strb.w	ip, [r6, #1]
          Uart_Tx(TestContext_Ptr, (uint8_t*)aTxBuffer, sizeof(aTxBuffer), strlen(msg)+2);
 80043e0:	f7fd fb72 	bl	8001ac8 <Uart_Tx>
 80043e4:	e57f      	b.n	8003ee6 <TEST_PostProcess+0x19e>
 80043e6:	4a22      	ldr	r2, [pc, #136]	; (8004470 <TEST_PostProcess+0x728>)
 80043e8:	f102 0848 	add.w	r8, r2, #72	; 0x48
      if(TestContext_Ptr->UartContext.uart_host_requested_dump_memory == SDRAM)
 80043ec:	4611      	mov	r1, r2
          if(dump_output_buff[i]!=0)
 80043ee:	ecf1 7a01 	vldmia	r1!, {s15}
            first_run =0;
 80043f2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80043f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043fa:	bf18      	it	ne
 80043fc:	2300      	movne	r3, #0
        for(uint32_t i=0; i<AI_NET_OUTPUT_SIZE;i++)
 80043fe:	4588      	cmp	r8, r1
 8004400:	d1f5      	bne.n	80043ee <TEST_PostProcess+0x6a6>
        if(first_run == 0)
 8004402:	b97b      	cbnz	r3, 8004424 <TEST_PostProcess+0x6dc>
            if(dump_output_buff[i] != *((float*)App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer + i))
 8004404:	6f28      	ldr	r0, [r5, #112]	; 0x70
 8004406:	6800      	ldr	r0, [r0, #0]
 8004408:	ecf2 7a01 	vldmia	r2!, {s15}
 800440c:	ecb0 7a01 	vldmia	r0!, {s14}
              issue_ocurence =1;
 8004410:	eeb4 7a67 	vcmp.f32	s14, s15
 8004414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004418:	bf18      	it	ne
 800441a:	2301      	movne	r3, #1
          for(uint32_t i=0; i<AI_NET_OUTPUT_SIZE;i++)
 800441c:	4291      	cmp	r1, r2
 800441e:	d1f3      	bne.n	8004408 <TEST_PostProcess+0x6c0>
          if(issue_ocurence == 1)
 8004420:	2b01      	cmp	r3, #1
 8004422:	d062      	beq.n	80044ea <TEST_PostProcess+0x7a2>
  uint8_t cmd_status=CMD_COMPLETE_SUCCESS_EVT;
 8004424:	2602      	movs	r6, #2
        if(TestContext_Ptr->DumpContext.dump_write_bufferPtr == (dump_intermediate_data_ping_buff + DUMP_INTERMEDIATE_DATA_BUFFER_SIZE))
 8004426:	6823      	ldr	r3, [r4, #0]
 8004428:	4a12      	ldr	r2, [pc, #72]	; (8004474 <TEST_PostProcess+0x72c>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d062      	beq.n	80044f4 <TEST_PostProcess+0x7ac>
        else if(TestContext_Ptr->DumpContext.dump_write_bufferPtr == (dump_intermediate_data_pong_buff + DUMP_INTERMEDIATE_DATA_BUFFER_SIZE))
 800442e:	4a12      	ldr	r2, [pc, #72]	; (8004478 <TEST_PostProcess+0x730>)
 8004430:	4293      	cmp	r3, r2
 8004432:	f47f ad4b 	bne.w	8003ecc <TEST_PostProcess+0x184>
          TestContext_Ptr->DumpContext.dump_write_bufferPtr=dump_intermediate_data_ping_buff;
 8004436:	4b11      	ldr	r3, [pc, #68]	; (800447c <TEST_PostProcess+0x734>)
 8004438:	6023      	str	r3, [r4, #0]
 800443a:	e547      	b.n	8003ecc <TEST_PostProcess+0x184>
    Error_Handler();
 800443c:	f000 f9b4 	bl	80047a8 <Error_Handler>
 8004440:	e50e      	b.n	8003e60 <TEST_PostProcess+0x118>
 8004442:	bf00      	nop
 8004444:	080206bc 	.word	0x080206bc
 8004448:	42c80000 	.word	0x42c80000
 800444c:	08020088 	.word	0x08020088
 8004450:	08020094 	.word	0x08020094
 8004454:	080206ac 	.word	0x080206ac
 8004458:	240025f0 	.word	0x240025f0
 800445c:	24002e30 	.word	0x24002e30
 8004460:	08020718 	.word	0x08020718
 8004464:	08020748 	.word	0x08020748
 8004468:	24002800 	.word	0x24002800
 800446c:	240027e0 	.word	0x240027e0
 8004470:	d0d31d80 	.word	0xd0d31d80
 8004474:	d0e92568 	.word	0xd0e92568
 8004478:	d0fd3268 	.word	0xd0fd3268
 800447c:	d0d51880 	.word	0xd0d51880
      *(aTxBuffer) = CMD_COMPLETE_SUCCESS_EVT;
 8004480:	4e1e      	ldr	r6, [pc, #120]	; (80044fc <TEST_PostProcess+0x7b4>)
 8004482:	2302      	movs	r3, #2
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8004484:	f604 25bc 	addw	r5, r4, #2748	; 0xabc
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8004488:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 800448c:	4630      	mov	r0, r6
 800448e:	461a      	mov	r2, r3
      TestContext_Ptr->UartContext.uart_cmd_ongoing=0;//terminates the UART command processing
 8004490:	f8c4 7aa0 	str.w	r7, [r4, #2720]	; 0xaa0
      *(aTxBuffer) = CMD_COMPLETE_SUCCESS_EVT;
 8004494:	7033      	strb	r3, [r6, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8004496:	f000 f91b 	bl	80046d0 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 800449a:	4631      	mov	r1, r6
 800449c:	4628      	mov	r0, r5
 800449e:	2201      	movs	r2, #1
 80044a0:	f00d fce6 	bl	8011e70 <HAL_UART_Transmit_DMA>
 80044a4:	b108      	cbz	r0, 80044aa <TEST_PostProcess+0x762>
      Error_Handler();
 80044a6:	f000 f97f 	bl	80047a8 <Error_Handler>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 80044aa:	4628      	mov	r0, r5
 80044ac:	f00d ff26 	bl	80122fc <HAL_UART_GetState>
 80044b0:	2820      	cmp	r0, #32
 80044b2:	d1fa      	bne.n	80044aa <TEST_PostProcess+0x762>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 80044b4:	4628      	mov	r0, r5
 80044b6:	220a      	movs	r2, #10
 80044b8:	4911      	ldr	r1, [pc, #68]	; (8004500 <TEST_PostProcess+0x7b8>)
 80044ba:	f00d fd2f 	bl	8011f1c <HAL_UART_Receive_DMA>
 80044be:	2800      	cmp	r0, #0
 80044c0:	f43f ac76 	beq.w	8003db0 <TEST_PostProcess+0x68>
    Error_Handler();
 80044c4:	f000 f970 	bl	80047a8 <Error_Handler>
 80044c8:	e472      	b.n	8003db0 <TEST_PostProcess+0x68>
        UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Error. Unable to write to missclassified file", CENTER_MODE);
 80044ca:	f015 fa3b 	bl	8019944 <UTIL_LCD_GetFont>
 80044ce:	240e      	movs	r4, #14
 80044d0:	88c1      	ldrh	r1, [r0, #6]
 80044d2:	2301      	movs	r3, #1
 80044d4:	4630      	mov	r0, r6
 80044d6:	4a0b      	ldr	r2, [pc, #44]	; (8004504 <TEST_PostProcess+0x7bc>)
 80044d8:	fb04 f101 	mul.w	r1, r4, r1
 80044dc:	f015 fb00 	bl	8019ae0 <UTIL_LCD_DisplayStringAt>
        DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 80044e0:	9b02      	ldr	r3, [sp, #8]
 80044e2:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80044e4:	f7fd fa0c 	bl	8001900 <DISPLAY_Refresh>
 80044e8:	e7fe      	b.n	80044e8 <TEST_PostProcess+0x7a0>
            TestContext_Ptr->UartContext.uart_host_requested_dump_number = 0;//so to subsequently terminates the UART command processing
 80044ea:	2300      	movs	r3, #0
            cmd_status=CMD_COMPLETE_FAILURE_EVT;
 80044ec:	2603      	movs	r6, #3
            TestContext_Ptr->UartContext.uart_host_requested_dump_number = 0;//so to subsequently terminates the UART command processing
 80044ee:	f8c4 3aa8 	str.w	r3, [r4, #2728]	; 0xaa8
 80044f2:	e798      	b.n	8004426 <TEST_PostProcess+0x6de>
          TestContext_Ptr->DumpContext.dump_write_bufferPtr=dump_intermediate_data_pong_buff;
 80044f4:	4b04      	ldr	r3, [pc, #16]	; (8004508 <TEST_PostProcess+0x7c0>)
 80044f6:	6023      	str	r3, [r4, #0]
 80044f8:	e4e8      	b.n	8003ecc <TEST_PostProcess+0x184>
 80044fa:	bf00      	nop
 80044fc:	24002800 	.word	0x24002800
 8004500:	240027e0 	.word	0x240027e0
 8004504:	080206e4 	.word	0x080206e4
 8004508:	d0e92580 	.word	0xd0e92580

0800450c <HAL_UART_ErrorCallback>:
 * Traps UART errors.
 *
 * @param huart pointer to UART handle
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800450c:	e7fe      	b.n	800450c <HAL_UART_ErrorCallback>
 800450e:	bf00      	nop

08004510 <UTILS_Init>:
* @brief  UTILS Initialization
* @param  Utils_Context_Ptr  Pointer to Utilities context
* @retval None
*/
void UTILS_Init(UtilsContext_TypeDef *Utils_Context_Ptr)
{
 8004510:	b510      	push	{r4, lr}
 8004512:	4603      	mov	r3, r0
  Utils_Context_Ptr->JoystickContext.joyState=JOY_NONE;
 8004514:	2400      	movs	r4, #0
  Utils_Context_Ptr->JoystickContext.lcdBrightness=LCD_BRIGHTNESS_MID;
 8004516:	2232      	movs	r2, #50	; 0x32
  Utils_Context_Ptr->JoystickContext.joyState=JOY_NONE;
 8004518:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
  Utils_Context_Ptr->JoystickContext.lcdBrightness=LCD_BRIGHTNESS_MID;
 800451c:	6342      	str	r2, [r0, #52]	; 0x34
  Utils_Context_Init(Utils_Context_Ptr);
  
  /*LEDs Init*/
  BSP_LED_Init(LED_GREEN);
 800451e:	4620      	mov	r0, r4
  Utils_Context_Ptr->JoystickContext.camBrightness=0;/* Mid-level camera brightness. */
 8004520:	e9c3 440b 	strd	r4, r4, [r3, #44]	; 0x2c
  Utils_Context_Ptr->ExecTimingContext.tcapturestart2= 0;
 8004524:	e9c3 4406 	strd	r4, r4, [r3, #24]
  Utils_Context_Ptr->ExecTimingContext.tcapturestop=0; 
 8004528:	e9c3 4408 	strd	r4, r4, [r3, #32]
  BSP_LED_Init(LED_GREEN);
 800452c:	f003 fda8 	bl	8008080 <BSP_LED_Init>
  BSP_LED_Init(LED_ORANGE);
 8004530:	2001      	movs	r0, #1
 8004532:	f003 fda5 	bl	8008080 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8004536:	2002      	movs	r0, #2
 8004538:	f003 fda2 	bl	8008080 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 800453c:	2003      	movs	r0, #3
 800453e:	f003 fd9f 	bl	8008080 <BSP_LED_Init>
  
  /* Activate joystick. */
  BSP_JOY_Init(JOY1, JOY_MODE_GPIO,JOY_ALL);
 8004542:	4621      	mov	r1, r4
 8004544:	4620      	mov	r0, r4
 8004546:	221f      	movs	r2, #31
 8004548:	f003 fe54 	bl	80081f4 <BSP_JOY_Init>
  
  /* Configure the Wakeup push-button in GPIO Mode */
  BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 800454c:	4621      	mov	r1, r4
 800454e:	4620      	mov	r0, r4
}
 8004550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 8004554:	f003 bdf2 	b.w	800813c <BSP_PB_Init>

08004558 <UTILS_GetTimeStamp>:
* @param  Utils_Context_Ptr  Pointer to Utilities context
* @retval Time stamp
*/
uint32_t UTILS_GetTimeStamp(UtilsContext_TypeDef *Utils_Context_Ptr)
{
  return HAL_GetTick();
 8004558:	f006 b852 	b.w	800a600 <HAL_GetTick>

0800455c <UTILS_Dma2d_Memcpy>:
 * @param red_blue_swap boolean flag for red-blue channel swap, 0 if no swap, else 1
*/
void UTILS_Dma2d_Memcpy(uint32_t *pSrc, uint32_t *pDst, uint16_t x, uint16_t y, uint16_t xsize, uint16_t ysize,
                        uint32_t rowStride, uint32_t input_color_format, uint32_t output_color_format, int pfc,
                        int red_blue_swap)
{
 800455c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004560:	b087      	sub	sp, #28
 8004562:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8004564:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
 8004568:	2d04      	cmp	r5, #4
 800456a:	e9cd 0103 	strd	r0, r1, [sp, #12]
 800456e:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 8004572:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
 8004576:	9105      	str	r1, [sp, #20]
 8004578:	e9dd 4915 	ldrd	r4, r9, [sp, #84]	; 0x54
 800457c:	d82d      	bhi.n	80045da <UTILS_Dma2d_Memcpy+0x7e>
 800457e:	4824      	ldr	r0, [pc, #144]	; (8004610 <UTILS_Dma2d_Memcpy+0xb4>)
 8004580:	fb0a 2303 	mla	r3, sl, r3, r2
 8004584:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 8004588:	fb07 f703 	mul.w	r7, r7, r3
  uint32_t bytepp = GetBytesPerPixel(output_color_format);

  uint32_t destination = (uint32_t)pDst + (y * rowStride + x) * bytepp;
  uint32_t source = (uint32_t)pSrc;

  HAL_DMA2D_DeInit(&hlcd_dma2d);
 800458c:	4821      	ldr	r0, [pc, #132]	; (8004614 <UTILS_Dma2d_Memcpy+0xb8>)

  /*##-2- DMA2D Callbacks Configuration ######################################*/
  hlcd_dma2d.XferCpltCallback = NULL;

  /*##-3- Foreground Configuration ###########################################*/
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 800458e:	2601      	movs	r6, #1
  HAL_DMA2D_DeInit(&hlcd_dma2d);
 8004590:	f007 ff52 	bl	800c438 <HAL_DMA2D_DeInit>
  hlcd_dma2d.Init.Mode = pfc ? DMA2D_M2M_PFC : DMA2D_M2M;
 8004594:	2c00      	cmp	r4, #0
  hlcd_dma2d.Init.OutputOffset = rowStride - xsize;
 8004596:	ebaa 0108 	sub.w	r1, sl, r8
  hlcd_dma2d.Init.Mode = pfc ? DMA2D_M2M_PFC : DMA2D_M2M;
 800459a:	4c1e      	ldr	r4, [pc, #120]	; (8004614 <UTILS_Dma2d_Memcpy+0xb8>)
 800459c:	bf0c      	ite	eq
 800459e:	2200      	moveq	r2, #0
 80045a0:	f44f 3280 	movne.w	r2, #65536	; 0x10000
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
  hlcd_dma2d.LayerCfg[1].InputColorMode = input_color_format;
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
  hlcd_dma2d.LayerCfg[1].RedBlueSwap = red_blue_swap ? DMA2D_RB_SWAP : DMA2D_RB_REGULAR;
 80045a4:	f119 0c00 	adds.w	ip, r9, #0
  hlcd_dma2d.XferCpltCallback = NULL;
 80045a8:	f04f 0300 	mov.w	r3, #0
  hlcd_dma2d.Init.OutputOffset = rowStride - xsize;
 80045ac:	60e1      	str	r1, [r4, #12]
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 80045ae:	f04f 01ff 	mov.w	r1, #255	; 0xff
  hlcd_dma2d.LayerCfg[1].RedBlueSwap = red_blue_swap ? DMA2D_RB_SWAP : DMA2D_RB_REGULAR;
 80045b2:	bf18      	it	ne
 80045b4:	f04f 0c01 	movne.w	ip, #1
  hlcd_dma2d.LayerCfg[1].InputColorMode = input_color_format;
 80045b8:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48

  /* DMA2D Initialization */
  if (HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 80045bc:	4620      	mov	r0, r4
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 80045be:	6521      	str	r1, [r4, #80]	; 0x50
  hlcd_dma2d.LayerCfg[1].RedBlueSwap = red_blue_swap ? DMA2D_RB_SWAP : DMA2D_RB_REGULAR;
 80045c0:	f8c4 c058 	str.w	ip, [r4, #88]	; 0x58
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 80045c4:	6463      	str	r3, [r4, #68]	; 0x44
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 80045c6:	64e6      	str	r6, [r4, #76]	; 0x4c
  hlcd_dma2d.Init.ColorMode = output_color_format;
 80045c8:	60a5      	str	r5, [r4, #8]
  hlcd_dma2d.Init.Mode = pfc ? DMA2D_M2M_PFC : DMA2D_M2M;
 80045ca:	6062      	str	r2, [r4, #4]
  hlcd_dma2d.XferCpltCallback = NULL;
 80045cc:	6223      	str	r3, [r4, #32]
  if (HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 80045ce:	f007 feef 	bl	800c3b0 <HAL_DMA2D_Init>
 80045d2:	b120      	cbz	r0, 80045de <UTILS_Dma2d_Memcpy+0x82>
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 30);
      }
    }
  }
}
 80045d4:	b007      	add	sp, #28
 80045d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
 80045da:	2700      	movs	r7, #0
 80045dc:	e7d6      	b.n	800458c <UTILS_Dma2d_Memcpy+0x30>
    if (HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 80045de:	4631      	mov	r1, r6
 80045e0:	4620      	mov	r0, r4
 80045e2:	f008 f92f 	bl	800c844 <HAL_DMA2D_ConfigLayer>
 80045e6:	2800      	cmp	r0, #0
 80045e8:	d1f4      	bne.n	80045d4 <UTILS_Dma2d_Memcpy+0x78>
      if (HAL_DMA2D_Start(&hlcd_dma2d, source, destination, xsize, ysize) == HAL_OK)
 80045ea:	9b05      	ldr	r3, [sp, #20]
 80045ec:	4620      	mov	r0, r4
 80045ee:	9a04      	ldr	r2, [sp, #16]
 80045f0:	9300      	str	r3, [sp, #0]
 80045f2:	4643      	mov	r3, r8
 80045f4:	443a      	add	r2, r7
 80045f6:	9903      	ldr	r1, [sp, #12]
 80045f8:	f007 ffa2 	bl	800c540 <HAL_DMA2D_Start>
 80045fc:	2800      	cmp	r0, #0
 80045fe:	d1e9      	bne.n	80045d4 <UTILS_Dma2d_Memcpy+0x78>
        HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 30);
 8004600:	4620      	mov	r0, r4
 8004602:	211e      	movs	r1, #30
}
 8004604:	b007      	add	sp, #28
 8004606:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 30);
 800460a:	f007 bff3 	b.w	800c5f4 <HAL_DMA2D_PollForTransfer>
 800460e:	bf00      	nop
 8004610:	0802091c 	.word	0x0802091c
 8004614:	24005338 	.word	0x24005338

08004618 <UTILS_Joystick_Check>:
void UTILS_Joystick_Check(UtilsContext_TypeDef *Utils_Context_Ptr)
{
  JoystickContext_TypeDef* Joystick_Ctx_Ptr=&Utils_Context_Ptr->JoystickContext;
  
  /* Get the joystick state. */
  Joystick_Ctx_Ptr->joyState = (JOYPin_TypeDef) BSP_JOY_GetState(JOY1, 0);
 8004618:	2100      	movs	r1, #0
{
 800461a:	b538      	push	{r3, r4, r5, lr}
 800461c:	4604      	mov	r4, r0
  Joystick_Ctx_Ptr->joyState = (JOYPin_TypeDef) BSP_JOY_GetState(JOY1, 0);
 800461e:	4608      	mov	r0, r1
 8004620:	f003 fe70 	bl	8008304 <BSP_JOY_GetState>
 8004624:	b2c0      	uxtb	r0, r0

  switch (Joystick_Ctx_Ptr->joyState)
 8004626:	1e83      	subs	r3, r0, #2
  Joystick_Ctx_Ptr->joyState = (JOYPin_TypeDef) BSP_JOY_GetState(JOY1, 0);
 8004628:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
  switch (Joystick_Ctx_Ptr->joyState)
 800462c:	2b0e      	cmp	r3, #14
 800462e:	d82e      	bhi.n	800468e <UTILS_Joystick_Check+0x76>
 8004630:	e8df f003 	tbb	[pc, r3]
 8004634:	2d272d21 	.word	0x2d272d21
 8004638:	2d1b2d2d 	.word	0x2d1b2d2d
 800463c:	2d2d2d2d 	.word	0x2d2d2d2d
 8004640:	2d2d      	.short	0x2d2d
 8004642:	08          	.byte	0x08
 8004643:	00          	.byte	0x00
  {
    case JOY_UP:
      if (Joystick_Ctx_Ptr->lcdBrightness < LCD_BRIGHTNESS_MAX)
 8004644:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004646:	2b63      	cmp	r3, #99	; 0x63
 8004648:	dc3c      	bgt.n	80046c4 <UTILS_Joystick_Check+0xac>
      {
        Joystick_Ctx_Ptr->lcdBrightness += LCD_BRIGHTNESS_STEP;
 800464a:	330a      	adds	r3, #10
 800464c:	6363      	str	r3, [r4, #52]	; 0x34
  }

  if ((Joystick_Ctx_Ptr->joyState == JOY_UP) || (Joystick_Ctx_Ptr->joyState == JOY_DOWN) || (Joystick_Ctx_Ptr->joyState == JOY_LEFT) || (Joystick_Ctx_Ptr->joyState == JOY_RIGHT))
  {
    /* Execute the change. */
    BSP_CAMERA_SetBrightness(0, Joystick_Ctx_Ptr->camBrightness);
 800464e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004650:	2000      	movs	r0, #0
 8004652:	f004 fde7 	bl	8009224 <BSP_CAMERA_SetBrightness>
    BSP_CAMERA_SetContrast(0, Joystick_Ctx_Ptr->camContrast);
 8004656:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004658:	2000      	movs	r0, #0
 800465a:	f004 fe07 	bl	800926c <BSP_CAMERA_SetContrast>
    BSP_LCD_SetBrightness(0, Joystick_Ctx_Ptr->lcdBrightness);
 800465e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004660:	2000      	movs	r0, #0
    /* Restore the default values. */
    BSP_CAMERA_SetBrightness(0, Joystick_Ctx_Ptr->camBrightness);
    BSP_CAMERA_SetContrast(0, Joystick_Ctx_Ptr->camContrast);
    BSP_LCD_SetBrightness(0, Joystick_Ctx_Ptr->lcdBrightness);
  }
}
 8004662:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    BSP_LCD_SetBrightness(0, Joystick_Ctx_Ptr->lcdBrightness);
 8004666:	f005 bbf9 	b.w	8009e5c <BSP_LCD_SetBrightness>
      if (Joystick_Ctx_Ptr->camContrast < CAMERA_CONTRAST_MAX)
 800466a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800466c:	2b03      	cmp	r3, #3
 800466e:	dc29      	bgt.n	80046c4 <UTILS_Joystick_Check+0xac>
        Joystick_Ctx_Ptr->camContrast++;
 8004670:	3301      	adds	r3, #1
 8004672:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004674:	e7eb      	b.n	800464e <UTILS_Joystick_Check+0x36>
      if (Joystick_Ctx_Ptr->lcdBrightness > LCD_BRIGHTNESS_MIN)
 8004676:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004678:	2b00      	cmp	r3, #0
 800467a:	dd23      	ble.n	80046c4 <UTILS_Joystick_Check+0xac>
        Joystick_Ctx_Ptr->lcdBrightness -= LCD_BRIGHTNESS_STEP;
 800467c:	3b0a      	subs	r3, #10
 800467e:	6363      	str	r3, [r4, #52]	; 0x34
 8004680:	e7e5      	b.n	800464e <UTILS_Joystick_Check+0x36>
      if (Joystick_Ctx_Ptr->camContrast > CAMERA_CONTRAST_MIN)
 8004682:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004684:	1cda      	adds	r2, r3, #3
 8004686:	db1d      	blt.n	80046c4 <UTILS_Joystick_Check+0xac>
        Joystick_Ctx_Ptr->camContrast--;
 8004688:	3b01      	subs	r3, #1
 800468a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800468c:	e7df      	b.n	800464e <UTILS_Joystick_Check+0x36>
  if ((Joystick_Ctx_Ptr->joyState == JOY_UP) || (Joystick_Ctx_Ptr->joyState == JOY_DOWN) || (Joystick_Ctx_Ptr->joyState == JOY_LEFT) || (Joystick_Ctx_Ptr->joyState == JOY_RIGHT))
 800468e:	2810      	cmp	r0, #16
 8004690:	d81b      	bhi.n	80046ca <UTILS_Joystick_Check+0xb2>
 8004692:	4b0e      	ldr	r3, [pc, #56]	; (80046cc <UTILS_Joystick_Check+0xb4>)
 8004694:	40c3      	lsrs	r3, r0
 8004696:	07db      	lsls	r3, r3, #31
 8004698:	d4d9      	bmi.n	800464e <UTILS_Joystick_Check+0x36>
  else if (Joystick_Ctx_Ptr->joyState == JOY_SEL)
 800469a:	2801      	cmp	r0, #1
 800469c:	d115      	bne.n	80046ca <UTILS_Joystick_Check+0xb2>
    Joystick_Ctx_Ptr->camContrast = 0;     /* Mid-level camera contrast. */
 800469e:	2500      	movs	r5, #0
    Joystick_Ctx_Ptr->lcdBrightness = LCD_BRIGHTNESS_MID;       /* Mid-level LCD brightness. */
 80046a0:	2332      	movs	r3, #50	; 0x32
    BSP_CAMERA_SetBrightness(0, Joystick_Ctx_Ptr->camBrightness);
 80046a2:	4629      	mov	r1, r5
    Joystick_Ctx_Ptr->lcdBrightness = LCD_BRIGHTNESS_MID;       /* Mid-level LCD brightness. */
 80046a4:	6363      	str	r3, [r4, #52]	; 0x34
    Joystick_Ctx_Ptr->camContrast = 0;     /* Mid-level camera contrast. */
 80046a6:	62e5      	str	r5, [r4, #44]	; 0x2c
    BSP_CAMERA_SetBrightness(0, Joystick_Ctx_Ptr->camBrightness);
 80046a8:	4628      	mov	r0, r5
    Joystick_Ctx_Ptr->camBrightness = 0; /* Mid-level camera brightness. */
 80046aa:	6325      	str	r5, [r4, #48]	; 0x30
    BSP_CAMERA_SetBrightness(0, Joystick_Ctx_Ptr->camBrightness);
 80046ac:	f004 fdba 	bl	8009224 <BSP_CAMERA_SetBrightness>
    BSP_CAMERA_SetContrast(0, Joystick_Ctx_Ptr->camContrast);
 80046b0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80046b2:	4628      	mov	r0, r5
 80046b4:	f004 fdda 	bl	800926c <BSP_CAMERA_SetContrast>
    BSP_LCD_SetBrightness(0, Joystick_Ctx_Ptr->lcdBrightness);
 80046b8:	4628      	mov	r0, r5
 80046ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
}
 80046bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    BSP_LCD_SetBrightness(0, Joystick_Ctx_Ptr->lcdBrightness);
 80046c0:	f005 bbcc 	b.w	8009e5c <BSP_LCD_SetBrightness>
        Joystick_Ctx_Ptr->joyState = JOY_NONE; /* Cancel LCD brightness change. */
 80046c4:	2300      	movs	r3, #0
 80046c6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
 80046ca:	bd38      	pop	{r3, r4, r5, pc}
 80046cc:	00010114 	.word	0x00010114

080046d0 <UTILS_DCache_Coherency_Maintenance>:
 * @retval None
 */
void UTILS_DCache_Coherency_Maintenance(uint32_t *mem_addr, int32_t mem_size, DCache_Coherency_TypeDef Maintenance_operation)
{
  /*Check alignement on 32-bytes for the memory adress and check that the memory size is multiple of 32-bytes*/
  if(((uint32_t)mem_addr%32 != 0) || (mem_size%32 != 0))
 80046d0:	06c3      	lsls	r3, r0, #27
 80046d2:	d106      	bne.n	80046e2 <UTILS_DCache_Coherency_Maintenance+0x12>
 80046d4:	06cb      	lsls	r3, r1, #27
 80046d6:	d104      	bne.n	80046e2 <UTILS_DCache_Coherency_Maintenance+0x12>
    while(1);
  
  if(Maintenance_operation == INVALIDATE)
 80046d8:	2a01      	cmp	r2, #1
 80046da:	d018      	beq.n	800470e <UTILS_DCache_Coherency_Maintenance+0x3e>
  {
    SCB_InvalidateDCache_by_Addr((void*)mem_addr, mem_size);
  }
  else if(Maintenance_operation == CLEAN)
 80046dc:	2a02      	cmp	r2, #2
 80046de:	d001      	beq.n	80046e4 <UTILS_DCache_Coherency_Maintenance+0x14>
  {
    SCB_CleanDCache_by_Addr((void *)mem_addr, mem_size);
  }
}
 80046e0:	4770      	bx	lr
 80046e2:	e7fe      	b.n	80046e2 <UTILS_DCache_Coherency_Maintenance+0x12>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80046e4:	f3bf 8f4f 	dsb	sy
    uint32_t op_addr = (uint32_t) addr;
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */

    __DSB();

    while (op_size > 0) {
 80046e8:	2900      	cmp	r1, #0
 80046ea:	dd0b      	ble.n	8004704 <UTILS_DCache_Coherency_Maintenance+0x34>
 80046ec:	1e4b      	subs	r3, r1, #1
 80046ee:	f100 0220 	add.w	r2, r0, #32
      SCB->DCCMVAC = op_addr;
 80046f2:	490f      	ldr	r1, [pc, #60]	; (8004730 <UTILS_DCache_Coherency_Maintenance+0x60>)
 80046f4:	f023 031f 	bic.w	r3, r3, #31
 80046f8:	4413      	add	r3, r2
 80046fa:	f8c1 0268 	str.w	r0, [r1, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 80046fe:	3020      	adds	r0, #32
    while (op_size > 0) {
 8004700:	4298      	cmp	r0, r3
 8004702:	d1fa      	bne.n	80046fa <UTILS_DCache_Coherency_Maintenance+0x2a>
 8004704:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004708:	f3bf 8f6f 	isb	sy
 800470c:	e7e8      	b.n	80046e0 <UTILS_DCache_Coherency_Maintenance+0x10>
  __ASM volatile ("dsb 0xF":::"memory");
 800470e:	f3bf 8f4f 	dsb	sy
    while (op_size > 0) {
 8004712:	2900      	cmp	r1, #0
 8004714:	ddf6      	ble.n	8004704 <UTILS_DCache_Coherency_Maintenance+0x34>
 8004716:	1e4b      	subs	r3, r1, #1
 8004718:	f100 0220 	add.w	r2, r0, #32
      SCB->DCIMVAC = op_addr;
 800471c:	4904      	ldr	r1, [pc, #16]	; (8004730 <UTILS_DCache_Coherency_Maintenance+0x60>)
 800471e:	f023 031f 	bic.w	r3, r3, #31
 8004722:	4413      	add	r3, r2
 8004724:	f8c1 025c 	str.w	r0, [r1, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8004728:	3020      	adds	r0, #32
    while (op_size > 0) {
 800472a:	4298      	cmp	r0, r3
 800472c:	d1fa      	bne.n	8004724 <UTILS_DCache_Coherency_Maintenance+0x54>
 800472e:	e7e9      	b.n	8004704 <UTILS_DCache_Coherency_Maintenance+0x34>
 8004730:	e000ed00 	.word	0xe000ed00

08004734 <UTILS_Bubblesort>:
void UTILS_Bubblesort(float *prob, int *classes, int size)
{
  float p;
  int c;

  for (int i = 0; i < size; i++)
 8004734:	2a00      	cmp	r2, #0
 8004736:	dd22      	ble.n	800477e <UTILS_Bubblesort+0x4a>
{
 8004738:	b4f0      	push	{r4, r5, r6, r7}
 800473a:	1f04      	subs	r4, r0, #4
 800473c:	1e57      	subs	r7, r2, #1
 800473e:	eb04 0482 	add.w	r4, r4, r2, lsl #2
  {
    for (int ii = 0; ii < size - i - 1; ii++)
 8004742:	b1b7      	cbz	r7, 8004772 <UTILS_Bubblesort+0x3e>
 8004744:	460a      	mov	r2, r1
 8004746:	4603      	mov	r3, r0
    {
      if (prob[ii] < prob[ii + 1])
 8004748:	edd3 7a00 	vldr	s15, [r3]
 800474c:	ed93 7a01 	vldr	s14, [r3, #4]
 8004750:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004758:	d507      	bpl.n	800476a <UTILS_Bubblesort+0x36>
      {
        p = prob[ii];
        prob[ii] = prob[ii + 1];
        prob[ii + 1] = p;
        c = classes[ii];
        classes[ii] = classes[ii + 1];
 800475a:	e9d2 6500 	ldrd	r6, r5, [r2]
        prob[ii] = prob[ii + 1];
 800475e:	ed83 7a00 	vstr	s14, [r3]
        prob[ii + 1] = p;
 8004762:	edc3 7a01 	vstr	s15, [r3, #4]
        classes[ii] = classes[ii + 1];
 8004766:	e9c2 5600 	strd	r5, r6, [r2]
 800476a:	3304      	adds	r3, #4
 800476c:	3204      	adds	r2, #4
    for (int ii = 0; ii < size - i - 1; ii++)
 800476e:	42a3      	cmp	r3, r4
 8004770:	d1ea      	bne.n	8004748 <UTILS_Bubblesort+0x14>
 8004772:	3f01      	subs	r7, #1
 8004774:	3c04      	subs	r4, #4
  for (int i = 0; i < size; i++)
 8004776:	1c7b      	adds	r3, r7, #1
 8004778:	d1e3      	bne.n	8004742 <UTILS_Bubblesort+0xe>
        classes[ii + 1] = c;
      }
    }
  }
}
 800477a:	bcf0      	pop	{r4, r5, r6, r7}
 800477c:	4770      	bx	lr
 800477e:	4770      	bx	lr

08004780 <UTILS_Compute_ExecutionTiming>:
/**
 * @brief Compute the execution timing  of the various operation
 * @param UtilsContext_Ptr pointer to utilities context
 */
void UTILS_Compute_ExecutionTiming(UtilsContext_TypeDef *UtilsContext_Ptr)
{
 8004780:	b430      	push	{r4, r5}
  UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE] = UtilsContext_Ptr->ExecTimingContext.tcapturestop - UtilsContext_Ptr->ExecTimingContext.tcapturestart;
  
#if MEMORY_SCHEME == FULL_INTERNAL_MEM_OPT  
  UtilsContext_Ptr->ExecTimingContext.Tfps =UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PFC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PVC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_RESIZE] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE];
#elif MEMORY_SCHEME != FULL_INTERNAL_MEM_OPT 
  if((UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PFC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE]) > UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE])
 8004782:	6901      	ldr	r1, [r0, #16]
 8004784:	6882      	ldr	r2, [r0, #8]
  UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE] = UtilsContext_Ptr->ExecTimingContext.tcapturestop - UtilsContext_Ptr->ExecTimingContext.tcapturestart;
 8004786:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
  if((UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PFC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE]) > UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE])
 800478a:	440a      	add	r2, r1
  UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE] = UtilsContext_Ptr->ExecTimingContext.tcapturestop - UtilsContext_Ptr->ExecTimingContext.tcapturestart;
 800478c:	1b1b      	subs	r3, r3, r4
  AppContext_TypeDef *App_Cxt_Ptr=UtilsContext_Ptr->AppCtxPtr;
 800478e:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if((UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PFC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE]) > UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE])
 8004790:	4293      	cmp	r3, r2
  UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE] = UtilsContext_Ptr->ExecTimingContext.tcapturestop - UtilsContext_Ptr->ExecTimingContext.tcapturestart;
 8004792:	6003      	str	r3, [r0, #0]
  if((UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PFC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE]) > UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE])
 8004794:	d203      	bcs.n	800479e <UTILS_Compute_ExecutionTiming+0x1e>
    UtilsContext_Ptr->ExecTimingContext.Tfps = UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PFC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PVC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_RESIZE] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE];
 8004796:	68c3      	ldr	r3, [r0, #12]
 8004798:	6845      	ldr	r5, [r0, #4]
 800479a:	442b      	add	r3, r5
 800479c:	4413      	add	r3, r2
 800479e:	6143      	str	r3, [r0, #20]
  else
    UtilsContext_Ptr->ExecTimingContext.Tfps =  UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE];
#endif

  App_Cxt_Ptr->nn_inference_time=UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE];
 80047a0:	60a1      	str	r1, [r4, #8]
}
 80047a2:	bc30      	pop	{r4, r5}
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop

080047a8 <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
void Error_Handler(void)
{
 80047a8:	b508      	push	{r3, lr}
  BSP_LED_Off(LED_GREEN);
 80047aa:	2000      	movs	r0, #0
 80047ac:	f003 fca6 	bl	80080fc <BSP_LED_Off>
  BSP_LED_Off(LED_ORANGE);
 80047b0:	2001      	movs	r0, #1
 80047b2:	f003 fca3 	bl	80080fc <BSP_LED_Off>
  BSP_LED_Off(LED_RED);
 80047b6:	2002      	movs	r0, #2
 80047b8:	f003 fca0 	bl	80080fc <BSP_LED_Off>
  BSP_LED_Off(LED_BLUE);
 80047bc:	2003      	movs	r0, #3
 80047be:	f003 fc9d 	bl	80080fc <BSP_LED_Off>

  /* Turn LED RED on */
  BSP_LED_On(LED_RED);
 80047c2:	2002      	movs	r0, #2
 80047c4:	f003 fc8a 	bl	80080dc <BSP_LED_On>
 80047c8:	e7fe      	b.n	80047c8 <Error_Handler+0x20>
 80047ca:	bf00      	nop

080047cc <main>:
{
 80047cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80047d0:	b09f      	sub	sp, #124	; 0x7c
  MPU_InitStruct.BaseAddress = 0xD0000000;
 80047d2:	f04f 4450 	mov.w	r4, #3489660928	; 0xd0000000
  HAL_MPU_Disable();
 80047d6:	f005 ffbd 	bl	800a754 <HAL_MPU_Disable>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80047da:	2101      	movs	r1, #1
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 80047dc:	4a96      	ldr	r2, [pc, #600]	; (8004a38 <main+0x26c>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80047de:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 80047e0:	4b96      	ldr	r3, [pc, #600]	; (8004a3c <main+0x270>)
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80047e2:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
  MPU_InitStruct.BaseAddress = 0xD0000000;
 80047e6:	940c      	str	r4, [sp, #48]	; 0x30
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 80047e8:	e9cd 230d 	strd	r2, r3, [sp, #52]	; 0x34
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80047ec:	f005 ffd4 	bl	800a798 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80047f0:	2004      	movs	r0, #4
 80047f2:	f005 ffbf 	bl	800a774 <HAL_MPU_Enable>
 80047f6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80047fa:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80047fe:	4a90      	ldr	r2, [pc, #576]	; (8004a40 <main+0x274>)
 8004800:	2100      	movs	r1, #0
 8004802:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8004806:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800480a:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800480e:	6953      	ldr	r3, [r2, #20]
 8004810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004814:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8004816:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800481a:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800481e:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8004822:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8004826:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800482a:	f643 7ce0 	movw	ip, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800482e:	f3c3 06c9 	ubfx	r6, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8004832:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8004836:	07b7      	lsls	r7, r6, #30
 8004838:	015c      	lsls	r4, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800483a:	ea04 050c 	and.w	r5, r4, ip
 800483e:	4638      	mov	r0, r7
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8004840:	4631      	mov	r1, r6
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8004842:	ea45 0300 	orr.w	r3, r5, r0
      } while (ways-- != 0U);
 8004846:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8004848:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
 800484c:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8004850:	1c4b      	adds	r3, r1, #1
 8004852:	d1f6      	bne.n	8004842 <main+0x76>
 8004854:	3c20      	subs	r4, #32
    } while(sets-- != 0U);
 8004856:	f114 0f20 	cmn.w	r4, #32
 800485a:	d1ee      	bne.n	800483a <main+0x6e>
 800485c:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8004860:	6953      	ldr	r3, [r2, #20]
 8004862:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004866:	6153      	str	r3, [r2, #20]
 8004868:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800486c:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8004870:	f005 fe88 	bl	800a584 <HAL_Init>
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8004874:	2004      	movs	r0, #4
 8004876:	f009 fd97 	bl	800e3a8 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800487a:	4a72      	ldr	r2, [pc, #456]	; (8004a44 <main+0x278>)
 800487c:	2300      	movs	r3, #0
 800487e:	9301      	str	r3, [sp, #4]
 8004880:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004882:	4b71      	ldr	r3, [pc, #452]	; (8004a48 <main+0x27c>)
 8004884:	f021 0101 	bic.w	r1, r1, #1
  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8004888:	4618      	mov	r0, r3
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800488a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800488c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800488e:	f002 0201 	and.w	r2, r2, #1
 8004892:	9201      	str	r2, [sp, #4]
 8004894:	699a      	ldr	r2, [r3, #24]
 8004896:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800489a:	619a      	str	r2, [r3, #24]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80048a2:	9301      	str	r3, [sp, #4]
 80048a4:	9b01      	ldr	r3, [sp, #4]
  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 80048a6:	6983      	ldr	r3, [r0, #24]
 80048a8:	049b      	lsls	r3, r3, #18
 80048aa:	d5fc      	bpl.n	80048a6 <main+0xda>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80048ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 80048b0:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80048b2:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80048b4:	2701      	movs	r7, #1
  RCC_OscInitStruct.PLL.PLLM = 5;
 80048b6:	2605      	movs	r6, #5
  RCC_OscInitStruct.PLL.PLLN = 160;
 80048b8:	21a0      	movs	r1, #160	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80048ba:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80048bc:	2508      	movs	r5, #8
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80048be:	2204      	movs	r2, #4
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80048c0:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80048c2:	970b      	str	r7, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 80048c4:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 80048c6:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = 2;
 80048c8:	9418      	str	r4, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLR = 2;
 80048ca:	941a      	str	r4, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80048cc:	9219      	str	r2, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80048ce:	951b      	str	r5, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80048d0:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80048d4:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 80048d8:	e9cd 6116 	strd	r6, r1, [sp, #88]	; 0x58
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80048dc:	f00a f8e8 	bl	800eab0 <HAL_RCC_OscConfig>
  if (ret != HAL_OK)
 80048e0:	2800      	cmp	r0, #0
 80048e2:	d14f      	bne.n	8004984 <main+0x1b8>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 |
 80048e4:	223f      	movs	r2, #63	; 0x3f
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80048e6:	2640      	movs	r6, #64	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80048e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80048ec:	f04f 0803 	mov.w	r8, #3
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80048f0:	9005      	str	r0, [sp, #20]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 80048f2:	4621      	mov	r1, r4
 80048f4:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80048f6:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 |
 80048f8:	9203      	str	r2, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80048fa:	f8cd 8010 	str.w	r8, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80048fe:	e9cd 6607 	strd	r6, r6, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8004902:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 8004906:	f00a fc5d 	bl	800f1c4 <HAL_RCC_ClockConfig>
  if (ret != HAL_OK)
 800490a:	4681      	mov	r9, r0
 800490c:	2800      	cmp	r0, #0
 800490e:	d139      	bne.n	8004984 <main+0x1b8>
  __HAL_RCC_CSI_ENABLE();
 8004910:	4c4e      	ldr	r4, [pc, #312]	; (8004a4c <main+0x280>)
  APP_Init(&App_Context);
 8004912:	4d4f      	ldr	r5, [pc, #316]	; (8004a50 <main+0x284>)
  __HAL_RCC_CSI_ENABLE();
 8004914:	6823      	ldr	r3, [r4, #0]
 8004916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800491a:	6023      	str	r3, [r4, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800491c:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8004920:	f043 0302 	orr.w	r3, r3, #2
 8004924:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8004928:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 800492c:	f003 0302 	and.w	r3, r3, #2
 8004930:	9302      	str	r3, [sp, #8]
 8004932:	9b02      	ldr	r3, [sp, #8]
  HAL_EnableCompensationCell();
 8004934:	f005 fe82 	bl	800a63c <HAL_EnableCompensationCell>
  __HAL_RCC_CRC_CLK_ENABLE();
 8004938:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  APP_Init(&App_Context);
 800493c:	4628      	mov	r0, r5
  __HAL_RCC_CRC_CLK_ENABLE();
 800493e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004942:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8004946:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800494a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800494e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004950:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  APP_Init(&App_Context);
 8004952:	f7fc f9e7 	bl	8000d24 <APP_Init>
  TEST_Init(App_Context.Test_ContextPtr);
 8004956:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 8004958:	f7fe f918 	bl	8002b8c <TEST_Init>
  UTILS_Init(App_Context.Utils_ContextPtr);
 800495c:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 800495e:	f7ff fdd7 	bl	8004510 <UTILS_Init>
  DISPLAY_Init(App_Context.Display_ContextPtr);
 8004962:	6e68      	ldr	r0, [r5, #100]	; 0x64
 8004964:	f7fc fea8 	bl	80016b8 <DISPLAY_Init>
  AI_Init(App_Context.Ai_ContextPtr);
 8004968:	6f28      	ldr	r0, [r5, #112]	; 0x70
 800496a:	f7fc f83b 	bl	80009e4 <AI_Init>
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 800496e:	4b39      	ldr	r3, [pc, #228]	; (8004a54 <main+0x288>)
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 8004970:	4648      	mov	r0, r9
 8004972:	4619      	mov	r1, r3
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 8004974:	f883 8000 	strb.w	r8, [r3]
  init.TransferRate= MT25TL01G_DTR_TRANSFER ;
 8004978:	705f      	strb	r7, [r3, #1]
  init.DualFlashMode= MT25TL01G_DUALFLASH_ENABLE;
 800497a:	709e      	strb	r6, [r3, #2]
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 800497c:	f005 fa9a 	bl	8009eb4 <BSP_QSPI_Init>
 8004980:	b110      	cbz	r0, 8004988 <main+0x1bc>
 8004982:	e7fe      	b.n	8004982 <main+0x1b6>
    Error_Handler();
 8004984:	f7ff ff10 	bl	80047a8 <Error_Handler>
    if(BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8004988:	f005 fca0 	bl	800a2cc <BSP_QSPI_EnableMemoryMappedMode>
 800498c:	2800      	cmp	r0, #0
 800498e:	d149      	bne.n	8004a24 <main+0x258>
 8004990:	4b31      	ldr	r3, [pc, #196]	; (8004a58 <main+0x28c>)
 8004992:	4932      	ldr	r1, [pc, #200]	; (8004a5c <main+0x290>)
 8004994:	f1c3 4210 	rsb	r2, r3, #2415919104	; 0x90000000
    *(weights_table_sdram + idx) = *(uint8_t*)(QUADSPI_EXT_FLASH + idx);
 8004998:	5cd0      	ldrb	r0, [r2, r3]
 800499a:	f803 0f01 	strb.w	r0, [r3, #1]!
  for(idx=0; idx<AI_WEIGHT_SIZE_BYTES; idx++)
 800499e:	428b      	cmp	r3, r1
 80049a0:	d1fa      	bne.n	8004998 <main+0x1cc>
  int is_menu = DISPLAY_WelcomeScreen(App_Context.Display_ContextPtr);
 80049a2:	6e68      	ldr	r0, [r5, #100]	; 0x64
    App_Context.run_loop = 1;
 80049a4:	f04f 0801 	mov.w	r8, #1
  int is_menu = DISPLAY_WelcomeScreen(App_Context.Display_ContextPtr);
 80049a8:	f7fc fed8 	bl	800175c <DISPLAY_WelcomeScreen>
 80049ac:	4607      	mov	r7, r0
    APP_GetNextReadyFrame(&App_Context);
 80049ae:	4c28      	ldr	r4, [pc, #160]	; (8004a50 <main+0x284>)
    UTIL_LCD_SetFont(&Font24);
 80049b0:	4e2b      	ldr	r6, [pc, #172]	; (8004a60 <main+0x294>)
 80049b2:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
  if ((is_menu != 0) || (App_Context.Test_ContextPtr->UartContext.uart_cmd_ongoing == 1))
 80049b4:	bb6f      	cbnz	r7, 8004a12 <main+0x246>
 80049b6:	f8d0 3aa0 	ldr.w	r3, [r0, #2720]	; 0xaa0
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d029      	beq.n	8004a12 <main+0x246>
  if(App_Context.Operating_Mode == NOMINAL || App_Context.Operating_Mode == CAPTURE || (App_Context.Operating_Mode == DUMP && App_Context.Test_ContextPtr->DumpContext.Dump_FrameSource == CAMERA_LIVE))
 80049be:	782b      	ldrb	r3, [r5, #0]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d02b      	beq.n	8004a1c <main+0x250>
 80049c4:	2b04      	cmp	r3, #4
 80049c6:	d029      	beq.n	8004a1c <main+0x250>
 80049c8:	2b03      	cmp	r3, #3
 80049ca:	d115      	bne.n	80049f8 <main+0x22c>
 80049cc:	e02b      	b.n	8004a26 <main+0x25a>
    UTILS_Joystick_Check(App_Context.Utils_ContextPtr);
 80049ce:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 80049d0:	f7ff fe22 	bl	8004618 <UTILS_Joystick_Check>
    TEST_CmdIf_Check(App_Context.Test_ContextPtr);          
 80049d4:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 80049d6:	f7fe f959 	bl	8002c8c <TEST_CmdIf_Check>
    APP_GetNextReadyFrame(&App_Context);
 80049da:	4620      	mov	r0, r4
 80049dc:	f7fc f9ec 	bl	8000db8 <APP_GetNextReadyFrame>
    APP_StartNewFrameAcquisition(&App_Context);
 80049e0:	4620      	mov	r0, r4
 80049e2:	f7fc faf3 	bl	8000fcc <APP_StartNewFrameAcquisition>
    APP_FramePreprocess(&App_Context);
 80049e6:	4620      	mov	r0, r4
 80049e8:	f7fc fb0c 	bl	8001004 <APP_FramePreprocess>
    APP_NetworkInference(&App_Context);
 80049ec:	4620      	mov	r0, r4
 80049ee:	f7fc fb0b 	bl	8001008 <APP_NetworkInference>
    APP_Postprocess(&App_Context);  
 80049f2:	4620      	mov	r0, r4
 80049f4:	f7fc fb3a 	bl	800106c <APP_Postprocess>
  while(App_Context.run_loop)
 80049f8:	686b      	ldr	r3, [r5, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d1e7      	bne.n	80049ce <main+0x202>
    AI_Deinit();
 80049fe:	f7fc f98f 	bl	8000d20 <AI_Deinit>
    UTIL_LCD_SetFont(&Font24);
 8004a02:	4630      	mov	r0, r6
    App_Context.run_loop = 1;
 8004a04:	f8c5 8004 	str.w	r8, [r5, #4]
    UTIL_LCD_SetFont(&Font24);
 8004a08:	f014 ff94 	bl	8019934 <UTIL_LCD_SetFont>
 8004a0c:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
  if ((is_menu != 0) || (App_Context.Test_ContextPtr->UartContext.uart_cmd_ongoing == 1))
 8004a0e:	2f00      	cmp	r7, #0
 8004a10:	d0d1      	beq.n	80049b6 <main+0x1ea>
    TEST_MainMenu(App_Context.Test_ContextPtr);
 8004a12:	f7fe f9a5 	bl	8002d60 <TEST_MainMenu>
  if(App_Context.Operating_Mode == NOMINAL || App_Context.Operating_Mode == CAPTURE || (App_Context.Operating_Mode == DUMP && App_Context.Test_ContextPtr->DumpContext.Dump_FrameSource == CAMERA_LIVE))
 8004a16:	782b      	ldrb	r3, [r5, #0]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d1d3      	bne.n	80049c4 <main+0x1f8>
    CAMERA_Init(App_Context.Camera_ContextPtr); 
 8004a1c:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 8004a1e:	f7fc fceb 	bl	80013f8 <CAMERA_Init>
 8004a22:	e7e9      	b.n	80049f8 <main+0x22c>
 8004a24:	e7fe      	b.n	8004a24 <main+0x258>
  if(App_Context.Operating_Mode == NOMINAL || App_Context.Operating_Mode == CAPTURE || (App_Context.Operating_Mode == DUMP && App_Context.Test_ContextPtr->DumpContext.Dump_FrameSource == CAMERA_LIVE))
 8004a26:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8004a28:	791b      	ldrb	r3, [r3, #4]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d1e4      	bne.n	80049f8 <main+0x22c>
    CAMERA_Init(App_Context.Camera_ContextPtr); 
 8004a2e:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 8004a30:	f7fc fce2 	bl	80013f8 <CAMERA_Init>
 8004a34:	e7e0      	b.n	80049f8 <main+0x22c>
 8004a36:	bf00      	nop
 8004a38:	03010018 	.word	0x03010018
 8004a3c:	01010000 	.word	0x01010000
 8004a40:	e000ed00 	.word	0xe000ed00
 8004a44:	58000400 	.word	0x58000400
 8004a48:	58024800 	.word	0x58024800
 8004a4c:	58024400 	.word	0x58024400
 8004a50:	2400435c 	.word	0x2400435c
 8004a54:	2400517c 	.word	0x2400517c
 8004a58:	cfffffff 	.word	0xcfffffff
 8004a5c:	d007dcc7 	.word	0xd007dcc7
 8004a60:	240025f8 	.word	0x240025f8

08004a64 <ai_network_get_info>:
/**  PUBLIC APIs SECTION  *****************************************************/

AI_API_ENTRY
ai_bool ai_network_get_info(
  ai_handle network, ai_network_report* report)
{
 8004a64:	b530      	push	{r4, r5, lr}
 8004a66:	460c      	mov	r4, r1
 8004a68:	b09f      	sub	sp, #124	; 0x7c
 8004a6a:	4605      	mov	r5, r0
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 8004a6c:	f015 fb0a 	bl	801a084 <ai_platform_context_acquire>

  if ( report && net_ctx )
 8004a70:	b36c      	cbz	r4, 8004ace <ai_network_get_info+0x6a>
 8004a72:	b360      	cbz	r0, 8004ace <ai_network_get_info+0x6a>
  {
    ai_network_report r = {
 8004a74:	2264      	movs	r2, #100	; 0x64
 8004a76:	2100      	movs	r1, #0
 8004a78:	a805      	add	r0, sp, #20
 8004a7a:	f019 f838 	bl	801daee <memset>
 8004a7e:	4b15      	ldr	r3, [pc, #84]	; (8004ad4 <ai_network_get_info+0x70>)
 8004a80:	4915      	ldr	r1, [pc, #84]	; (8004ad8 <ai_network_get_info+0x74>)
 8004a82:	4a16      	ldr	r2, [pc, #88]	; (8004adc <ai_network_get_info+0x78>)
 8004a84:	9301      	str	r3, [sp, #4]
 8004a86:	4b16      	ldr	r3, [pc, #88]	; (8004ae0 <ai_network_get_info+0x7c>)
 8004a88:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8004a8c:	9304      	str	r3, [sp, #16]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8004a8e:	f015 f999 	bl	8019dc4 <ai_platform_runtime_get_revision>
    ai_network_report r = {
 8004a92:	9005      	str	r0, [sp, #20]
 8004a94:	f015 f9e4 	bl	8019e60 <ai_platform_runtime_get_version>
 8004a98:	2306      	movs	r3, #6
 8004a9a:	4a12      	ldr	r2, [pc, #72]	; (8004ae4 <ai_network_get_info+0x80>)
 8004a9c:	f88d 3020 	strb.w	r3, [sp, #32]
 8004aa0:	e9cd 0206 	strd	r0, r2, [sp, #24]
 8004aa4:	f015 fa2a 	bl	8019efc <ai_platform_api_get_version>
 8004aa8:	900a      	str	r0, [sp, #40]	; 0x28
 8004aaa:	f015 fa89 	bl	8019fc0 <ai_platform_interface_api_get_version>
 8004aae:	4b0e      	ldr	r3, [pc, #56]	; (8004ae8 <ai_network_get_info+0x84>)
 8004ab0:	900b      	str	r0, [sp, #44]	; 0x2c
      .params            = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8004ab2:	a901      	add	r1, sp, #4
 8004ab4:	4628      	mov	r0, r5
    ai_network_report r = {
 8004ab6:	930c      	str	r3, [sp, #48]	; 0x30
    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8004ab8:	f015 fb36 	bl	801a128 <ai_platform_api_get_network_report>
 8004abc:	b140      	cbz	r0, 8004ad0 <ai_network_get_info+0x6c>

    *report = r;
 8004abe:	a901      	add	r1, sp, #4
 8004ac0:	4620      	mov	r0, r4
 8004ac2:	2274      	movs	r2, #116	; 0x74
 8004ac4:	f019 f808 	bl	801dad8 <memcpy>
    return true;
 8004ac8:	2001      	movs	r0, #1
  }

  return false;
}
 8004aca:	b01f      	add	sp, #124	; 0x7c
 8004acc:	bd30      	pop	{r4, r5, pc}
  return false;
 8004ace:	2000      	movs	r0, #0
}
 8004ad0:	b01f      	add	sp, #124	; 0x7c
 8004ad2:	bd30      	pop	{r4, r5, pc}
 8004ad4:	08020930 	.word	0x08020930
 8004ad8:	08020938 	.word	0x08020938
 8004adc:	0802095c 	.word	0x0802095c
 8004ae0:	08020978 	.word	0x08020978
 8004ae4:	0802062c 	.word	0x0802062c
 8004ae8:	00b83090 	.word	0x00b83090

08004aec <ai_network_create>:
}

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8004aec:	b530      	push	{r4, r5, lr}
  return ai_platform_network_create(
 8004aee:	2500      	movs	r5, #0
{
 8004af0:	b083      	sub	sp, #12
  return ai_platform_network_create(
 8004af2:	2404      	movs	r4, #4
 8004af4:	2301      	movs	r3, #1
 8004af6:	4a03      	ldr	r2, [pc, #12]	; (8004b04 <ai_network_create+0x18>)
 8004af8:	e9cd 4500 	strd	r4, r5, [sp]
 8004afc:	f015 fdac 	bl	801a658 <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8004b00:	b003      	add	sp, #12
 8004b02:	bd30      	pop	{r4, r5, pc}
 8004b04:	24002438 	.word	0x24002438

08004b08 <ai_network_destroy>:

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
  return ai_platform_network_destroy(network);
 8004b08:	f015 be6c 	b.w	801a7e4 <ai_platform_network_destroy>

08004b0c <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8004b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b10:	b085      	sub	sp, #20
 8004b12:	4604      	mov	r4, r0
 8004b14:	468b      	mov	fp, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8004b16:	f015 fef3 	bl	801a900 <ai_platform_network_init>
  if ( !net_ctx ) return false;
 8004b1a:	2800      	cmp	r0, #0
 8004b1c:	f000 830a 	beq.w	8005134 <ai_network_init+0x628>
    conv1_bias_array.format |= AI_FMT_FLAG_CONST;
 8004b20:	4dd6      	ldr	r5, [pc, #856]	; (8004e7c <ai_network_init+0x370>)

  ai_bool ok = true;
  ok &= network_configure_weights(net_ctx, &params->params);
  ok &= network_configure_activations(net_ctx, &params->activations);

  ok &= ai_platform_network_post_init(network);
 8004b22:	4620      	mov	r0, r4
    conv_dw_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8004b24:	4cd6      	ldr	r4, [pc, #856]	; (8004e80 <ai_network_init+0x374>)
    conv1_bias_array.format |= AI_FMT_FLAG_CONST;
 8004b26:	682e      	ldr	r6, [r5, #0]
    conv1_weights_array.format |= AI_FMT_FLAG_CONST;
 8004b28:	f8df c3b8 	ldr.w	ip, [pc, #952]	; 8004ee4 <ai_network_init+0x3d8>
    conv_dw_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8004b2c:	49d5      	ldr	r1, [pc, #852]	; (8004e84 <ai_network_init+0x378>)
    conv1_bias_array.format |= AI_FMT_FLAG_CONST;
 8004b2e:	f046 4380 	orr.w	r3, r6, #1073741824	; 0x40000000
    conv_dw_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8004b32:	6826      	ldr	r6, [r4, #0]
    conv1_weights_array.format |= AI_FMT_FLAG_CONST;
 8004b34:	f8dc 7000 	ldr.w	r7, [ip]
    conv_dw_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8004b38:	f046 4a80 	orr.w	sl, r6, #1073741824	; 0x40000000
    conv1_bias_array.format |= AI_FMT_FLAG_CONST;
 8004b3c:	602b      	str	r3, [r5, #0]
    conv_dw_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8004b3e:	680e      	ldr	r6, [r1, #0]
    conv1_weights_array.format |= AI_FMT_FLAG_CONST;
 8004b40:	f047 4780 	orr.w	r7, r7, #1073741824	; 0x40000000
    conv_pw_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8004b44:	4bd0      	ldr	r3, [pc, #832]	; (8004e88 <ai_network_init+0x37c>)
    conv_pw_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8004b46:	4ad1      	ldr	r2, [pc, #836]	; (8004e8c <ai_network_init+0x380>)
    conv_dw_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8004b48:	f046 4980 	orr.w	r9, r6, #1073741824	; 0x40000000
    conv_dw_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8004b4c:	f8df e398 	ldr.w	lr, [pc, #920]	; 8004ee8 <ai_network_init+0x3dc>
    conv_pw_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8004b50:	681e      	ldr	r6, [r3, #0]
    conv_dw_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8004b52:	f8df 8398 	ldr.w	r8, [pc, #920]	; 8004eec <ai_network_init+0x3e0>
    conv1_weights_array.format |= AI_FMT_FLAG_CONST;
 8004b56:	f8cc 7000 	str.w	r7, [ip]
    conv_dw_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8004b5a:	f8c4 a000 	str.w	sl, [r4]
    conv_pw_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8004b5e:	f046 4a80 	orr.w	sl, r6, #1073741824	; 0x40000000
    conv_pw_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8004b62:	6817      	ldr	r7, [r2, #0]
    conv_dw_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8004b64:	f8de 6000 	ldr.w	r6, [lr]
    conv_dw_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8004b68:	f8c1 9000 	str.w	r9, [r1]
    conv_pw_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8004b6c:	f047 4780 	orr.w	r7, r7, #1073741824	; 0x40000000
    conv_dw_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8004b70:	f046 4980 	orr.w	r9, r6, #1073741824	; 0x40000000
    conv_dw_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8004b74:	f8d8 6000 	ldr.w	r6, [r8]
    conv_pw_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8004b78:	6017      	str	r7, [r2, #0]
    conv_pw_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8004b7a:	f8c3 a000 	str.w	sl, [r3]
    conv_dw_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8004b7e:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
  ok &= network_configure_weights(net_ctx, &params->params);
 8004b82:	f8db 7010 	ldr.w	r7, [fp, #16]
    conv_pw_5_bias_array.data = AI_PTR(weights + 38784);
 8004b86:	f249 7380 	movw	r3, #38784	; 0x9780
    conv_dw_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8004b8a:	f8ce 9000 	str.w	r9, [lr]
    conv_dw_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8004b8e:	f8c8 6000 	str.w	r6, [r8]
    conv1_bias_array.data = AI_PTR(weights + 864);
 8004b92:	f507 7958 	add.w	r9, r7, #864	; 0x360
    conv_dw_1_weights_array.data = AI_PTR(weights + 896);
 8004b96:	f507 7660 	add.w	r6, r7, #896	; 0x380
    conv_pw_5_bias_array.data = AI_PTR(weights + 38784);
 8004b9a:	18fb      	adds	r3, r7, r3
  ok &= network_configure_weights(net_ctx, &params->params);
 8004b9c:	f8cd b00c 	str.w	fp, [sp, #12]
    conv_pw_1_weights_array.data = AI_PTR(weights + 1216);
 8004ba0:	f507 6a98 	add.w	sl, r7, #1216	; 0x4c0
    conv1_weights_array.data = AI_PTR(weights + 0);
 8004ba4:	f8cc 7008 	str.w	r7, [ip, #8]
    conv_dw_1_bias_array.data = AI_PTR(weights + 1184);
 8004ba8:	f507 6b94 	add.w	fp, r7, #1184	; 0x4a0
    conv_pw_5_bias_array.data = AI_PTR(weights + 38784);
 8004bac:	9301      	str	r3, [sp, #4]
    conv1_weights_array.data_start = AI_PTR(weights + 0);
 8004bae:	f8cc 700c 	str.w	r7, [ip, #12]
    conv_pw_1_bias_array.data = AI_PTR(weights + 1728);
 8004bb2:	f507 6cd8 	add.w	ip, r7, #1728	; 0x6c0
 8004bb6:	4bb4      	ldr	r3, [pc, #720]	; (8004e88 <ai_network_init+0x37c>)
    conv1_bias_array.data_start = AI_PTR(weights + 864);
 8004bb8:	e9c5 9902 	strd	r9, r9, [r5, #8]
    conv_dw_1_weights_array.data_start = AI_PTR(weights + 896);
 8004bbc:	e9c4 6602 	strd	r6, r6, [r4, #8]
    conv_dw_2_weights_array.data = AI_PTR(weights + 1792);
 8004bc0:	f507 69e0 	add.w	r9, r7, #1792	; 0x700
    conv_pw_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8004bc4:	4cb2      	ldr	r4, [pc, #712]	; (8004e90 <ai_network_init+0x384>)
    conv_pw_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8004bc6:	4db3      	ldr	r5, [pc, #716]	; (8004e94 <ai_network_init+0x388>)
    conv_dw_2_bias_array.data = AI_PTR(weights + 2368);
 8004bc8:	f507 6614 	add.w	r6, r7, #2368	; 0x940
    conv_dw_1_bias_array.data_start = AI_PTR(weights + 1184);
 8004bcc:	e9c1 bb02 	strd	fp, fp, [r1, #8]
    conv_pw_1_weights_array.data_start = AI_PTR(weights + 1216);
 8004bd0:	e9c2 aa02 	strd	sl, sl, [r2, #8]
    conv_pw_1_bias_array.data_start = AI_PTR(weights + 1728);
 8004bd4:	e9c3 cc02 	strd	ip, ip, [r3, #8]
    conv_dw_2_weights_array.data_start = AI_PTR(weights + 1792);
 8004bd8:	e9ce 9902 	strd	r9, r9, [lr, #8]
    conv_pw_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8004bdc:	6823      	ldr	r3, [r4, #0]
    conv_dw_3_bias_array.data = AI_PTR(weights + 5760);
 8004bde:	f507 5bb4 	add.w	fp, r7, #5760	; 0x1680
    conv_dw_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8004be2:	4aad      	ldr	r2, [pc, #692]	; (8004e98 <ai_network_init+0x38c>)
    conv_pw_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8004be4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    conv_dw_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8004be8:	49ac      	ldr	r1, [pc, #688]	; (8004e9c <ai_network_init+0x390>)
    conv_pw_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8004bea:	f8df c304 	ldr.w	ip, [pc, #772]	; 8004ef0 <ai_network_init+0x3e4>
    conv_pw_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8004bee:	6023      	str	r3, [r4, #0]
    conv_dw_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8004bf0:	6813      	ldr	r3, [r2, #0]
    conv_pw_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8004bf2:	f8df a300 	ldr.w	sl, [pc, #768]	; 8004ef4 <ai_network_init+0x3e8>
    conv_dw_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8004bf6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    conv_dw_4_weights_array.format |= AI_FMT_FLAG_CONST;
 8004bfa:	f8df e2fc 	ldr.w	lr, [pc, #764]	; 8004ef8 <ai_network_init+0x3ec>
    conv_dw_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8004bfe:	f8df 92fc 	ldr.w	r9, [pc, #764]	; 8004efc <ai_network_init+0x3f0>
    conv_dw_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8004c02:	6013      	str	r3, [r2, #0]
    conv_pw_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8004c04:	f8dc 3000 	ldr.w	r3, [ip]
    conv_dw_3_bias_array.data = AI_PTR(weights + 5760);
 8004c08:	f8c2 b008 	str.w	fp, [r2, #8]
    conv_pw_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8004c0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    conv_dw_3_bias_array.data_start = AI_PTR(weights + 5760);
 8004c10:	f8c2 b00c 	str.w	fp, [r2, #12]
    conv_dw_6_weights_array.data = AI_PTR(weights + 39040);
 8004c14:	f649 0280 	movw	r2, #39040	; 0x9880
    conv_dw_4_bias_array.data = AI_PTR(weights + 11264);
 8004c18:	f507 5b30 	add.w	fp, r7, #11264	; 0x2c00
    conv_pw_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8004c1c:	f8cc 3000 	str.w	r3, [ip]
    conv_dw_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8004c20:	f8d9 3000 	ldr.w	r3, [r9]
    conv_dw_6_weights_array.data = AI_PTR(weights + 39040);
 8004c24:	18ba      	adds	r2, r7, r2
    conv_dw_2_bias_array.data_start = AI_PTR(weights + 2368);
 8004c26:	e9c8 6602 	strd	r6, r6, [r8, #8]
    conv_pw_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8004c2a:	682e      	ldr	r6, [r5, #0]
    conv_pw_2_weights_array.data = AI_PTR(weights + 2432);
 8004c2c:	f507 6818 	add.w	r8, r7, #2432	; 0x980
    conv_dw_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8004c30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    conv_dw_6_weights_array.data = AI_PTR(weights + 39040);
 8004c34:	9202      	str	r2, [sp, #8]
    conv_pw_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8004c36:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
    conv_pw_2_weights_array.data = AI_PTR(weights + 2432);
 8004c3a:	f8c5 8008 	str.w	r8, [r5, #8]
    conv_pw_2_weights_array.data_start = AI_PTR(weights + 2432);
 8004c3e:	f8c5 800c 	str.w	r8, [r5, #12]
    conv_pw_2_bias_array.data = AI_PTR(weights + 4480);
 8004c42:	f507 588c 	add.w	r8, r7, #4480	; 0x1180
    conv_pw_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8004c46:	602e      	str	r6, [r5, #0]
    conv_dw_3_weights_array.data = AI_PTR(weights + 4608);
 8004c48:	f507 5690 	add.w	r6, r7, #4608	; 0x1200
    conv_dw_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8004c4c:	680d      	ldr	r5, [r1, #0]
    conv_dw_3_weights_array.data = AI_PTR(weights + 4608);
 8004c4e:	608e      	str	r6, [r1, #8]
    conv_dw_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8004c50:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    conv_dw_3_weights_array.data_start = AI_PTR(weights + 4608);
 8004c54:	60ce      	str	r6, [r1, #12]
    conv_pw_2_bias_array.data = AI_PTR(weights + 4480);
 8004c56:	f8c4 8008 	str.w	r8, [r4, #8]
    conv_dw_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8004c5a:	600d      	str	r5, [r1, #0]
    conv_pw_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8004c5c:	f8da 5000 	ldr.w	r5, [sl]
    conv_dw_4_weights_array.format |= AI_FMT_FLAG_CONST;
 8004c60:	f8de 1000 	ldr.w	r1, [lr]
    conv_pw_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8004c64:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    conv_pw_4_weights_array.format |= AI_FMT_FLAG_CONST;
 8004c68:	4e8d      	ldr	r6, [pc, #564]	; (8004ea0 <ai_network_init+0x394>)
    conv_pw_2_bias_array.data_start = AI_PTR(weights + 4480);
 8004c6a:	f8c4 800c 	str.w	r8, [r4, #12]
    conv_dw_4_weights_array.format |= AI_FMT_FLAG_CONST;
 8004c6e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    conv_pw_3_weights_array.data = AI_PTR(weights + 5888);
 8004c72:	f507 54b8 	add.w	r4, r7, #5888	; 0x1700
    conv_pw_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8004c76:	f8ca 5000 	str.w	r5, [sl]
    conv_pw_3_bias_array.data = AI_PTR(weights + 9984);
 8004c7a:	f507 581c 	add.w	r8, r7, #9984	; 0x2700
    conv_dw_4_weights_array.data = AI_PTR(weights + 10112);
 8004c7e:	f507 551e 	add.w	r5, r7, #10112	; 0x2780
    conv_dw_4_weights_array.format |= AI_FMT_FLAG_CONST;
 8004c82:	f8ce 1000 	str.w	r1, [lr]
    conv_dw_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8004c86:	f8c9 3000 	str.w	r3, [r9]
    conv_dw_5_bias_array.format |= AI_FMT_FLAG_CONST;
 8004c8a:	4a86      	ldr	r2, [pc, #536]	; (8004ea4 <ai_network_init+0x398>)
    conv_dw_5_weights_array.format |= AI_FMT_FLAG_CONST;
 8004c8c:	4986      	ldr	r1, [pc, #536]	; (8004ea8 <ai_network_init+0x39c>)
    conv_pw_3_weights_array.data_start = AI_PTR(weights + 5888);
 8004c8e:	e9ca 4402 	strd	r4, r4, [sl, #8]
    conv_pw_3_bias_array.data_start = AI_PTR(weights + 9984);
 8004c92:	e9cc 8802 	strd	r8, r8, [ip, #8]
    conv_dw_4_weights_array.data_start = AI_PTR(weights + 10112);
 8004c96:	e9ce 5502 	strd	r5, r5, [lr, #8]
    conv_pw_4_weights_array.format |= AI_FMT_FLAG_CONST;
 8004c9a:	6835      	ldr	r5, [r6, #0]
    conv_pw_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8004c9c:	4c83      	ldr	r4, [pc, #524]	; (8004eac <ai_network_init+0x3a0>)
    conv_pw_4_weights_array.format |= AI_FMT_FLAG_CONST;
 8004c9e:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    conv_pw_5_weights_array.format |= AI_FMT_FLAG_CONST;
 8004ca2:	f8df a25c 	ldr.w	sl, [pc, #604]	; 8004f00 <ai_network_init+0x3f4>
    conv_pw_5_bias_array.format |= AI_FMT_FLAG_CONST;
 8004ca6:	f8df c25c 	ldr.w	ip, [pc, #604]	; 8004f04 <ai_network_init+0x3f8>
    conv_pw_4_weights_array.format |= AI_FMT_FLAG_CONST;
 8004caa:	6035      	str	r5, [r6, #0]
    conv_pw_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8004cac:	6825      	ldr	r5, [r4, #0]
    conv_dw_6_weights_array.format |= AI_FMT_FLAG_CONST;
 8004cae:	f8df e258 	ldr.w	lr, [pc, #600]	; 8004f08 <ai_network_init+0x3fc>
    conv_pw_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8004cb2:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    conv_dw_6_bias_array.format |= AI_FMT_FLAG_CONST;
 8004cb6:	f8df 8254 	ldr.w	r8, [pc, #596]	; 8004f0c <ai_network_init+0x400>
    conv_pw_5_bias_array.data = AI_PTR(weights + 38784);
 8004cba:	9b01      	ldr	r3, [sp, #4]
    conv_pw_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8004cbc:	6025      	str	r5, [r4, #0]
    conv_dw_5_bias_array.format |= AI_FMT_FLAG_CONST;
 8004cbe:	6815      	ldr	r5, [r2, #0]
    conv_pw_5_bias_array.data = AI_PTR(weights + 38784);
 8004cc0:	f8cc 3008 	str.w	r3, [ip, #8]
    conv_dw_5_bias_array.format |= AI_FMT_FLAG_CONST;
 8004cc4:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    conv_pw_5_bias_array.data_start = AI_PTR(weights + 38784);
 8004cc8:	f8cc 300c 	str.w	r3, [ip, #12]
    conv_dw_6_weights_array.data = AI_PTR(weights + 39040);
 8004ccc:	9b02      	ldr	r3, [sp, #8]
    conv_dw_5_bias_array.format |= AI_FMT_FLAG_CONST;
 8004cce:	6015      	str	r5, [r2, #0]
    conv_dw_4_bias_array.data_start = AI_PTR(weights + 11264);
 8004cd0:	e9c9 bb02 	strd	fp, fp, [r9, #8]
    conv_pw_4_weights_array.data = AI_PTR(weights + 11392);
 8004cd4:	f507 5932 	add.w	r9, r7, #11392	; 0x2c80
    conv_dw_6_bias_array.data = AI_PTR(weights + 41344);
 8004cd8:	f24a 1b80 	movw	fp, #41344	; 0xa180
    conv_pw_4_weights_array.data = AI_PTR(weights + 11392);
 8004cdc:	f8c6 9008 	str.w	r9, [r6, #8]
    conv_dw_6_bias_array.data = AI_PTR(weights + 41344);
 8004ce0:	44bb      	add	fp, r7
    conv_pw_4_weights_array.data_start = AI_PTR(weights + 11392);
 8004ce2:	f8c6 900c 	str.w	r9, [r6, #12]
    conv_pw_4_bias_array.data = AI_PTR(weights + 19584);
 8004ce6:	f507 4999 	add.w	r9, r7, #19584	; 0x4c80
    conv_dw_5_weights_array.format |= AI_FMT_FLAG_CONST;
 8004cea:	680e      	ldr	r6, [r1, #0]
    conv_pw_4_bias_array.data = AI_PTR(weights + 19584);
 8004cec:	f8c4 9008 	str.w	r9, [r4, #8]
    conv_pw_4_bias_array.data_start = AI_PTR(weights + 19584);
 8004cf0:	f8c4 900c 	str.w	r9, [r4, #12]
    conv_dw_5_weights_array.format |= AI_FMT_FLAG_CONST;
 8004cf4:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
    conv_pw_5_weights_array.format |= AI_FMT_FLAG_CONST;
 8004cf8:	f8da 4000 	ldr.w	r4, [sl]
    conv_dw_5_bias_array.data = AI_PTR(weights + 22144);
 8004cfc:	f507 49ad 	add.w	r9, r7, #22144	; 0x5680
    conv_dw_5_weights_array.format |= AI_FMT_FLAG_CONST;
 8004d00:	600e      	str	r6, [r1, #0]
    conv_dw_5_weights_array.data = AI_PTR(weights + 19840);
 8004d02:	f507 469b 	add.w	r6, r7, #19840	; 0x4d80
    conv_pw_5_weights_array.format |= AI_FMT_FLAG_CONST;
 8004d06:	f044 4580 	orr.w	r5, r4, #1073741824	; 0x40000000
    conv_pw_5_bias_array.format |= AI_FMT_FLAG_CONST;
 8004d0a:	f8dc 4000 	ldr.w	r4, [ip]
    conv_dw_5_weights_array.data = AI_PTR(weights + 19840);
 8004d0e:	608e      	str	r6, [r1, #8]
    conv_pw_5_bias_array.format |= AI_FMT_FLAG_CONST;
 8004d10:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    conv_dw_5_weights_array.data_start = AI_PTR(weights + 19840);
 8004d14:	60ce      	str	r6, [r1, #12]
    conv_dw_6_bias_array.format |= AI_FMT_FLAG_CONST;
 8004d16:	f8d8 1000 	ldr.w	r1, [r8]
    conv_pw_6_weights_array.data = AI_PTR(weights + 41600);
 8004d1a:	f24a 2680 	movw	r6, #41600	; 0xa280
    conv_pw_5_bias_array.format |= AI_FMT_FLAG_CONST;
 8004d1e:	f8cc 4000 	str.w	r4, [ip]
    conv_dw_6_weights_array.format |= AI_FMT_FLAG_CONST;
 8004d22:	f8de 4000 	ldr.w	r4, [lr]
    conv_dw_6_bias_array.format |= AI_FMT_FLAG_CONST;
 8004d26:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    conv_pw_5_weights_array.format |= AI_FMT_FLAG_CONST;
 8004d2a:	f8ca 5000 	str.w	r5, [sl]
    conv_pw_5_weights_array.data = AI_PTR(weights + 22400);
 8004d2e:	f507 45af 	add.w	r5, r7, #22400	; 0x5780
    conv_dw_5_bias_array.data = AI_PTR(weights + 22144);
 8004d32:	f8c2 9008 	str.w	r9, [r2, #8]
    conv_dw_6_weights_array.format |= AI_FMT_FLAG_CONST;
 8004d36:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    conv_dw_5_bias_array.data_start = AI_PTR(weights + 22144);
 8004d3a:	f8c2 900c 	str.w	r9, [r2, #12]
    conv_pw_6_weights_array.data = AI_PTR(weights + 41600);
 8004d3e:	443e      	add	r6, r7
    conv_pw_6_weights_array.format |= AI_FMT_FLAG_CONST;
 8004d40:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 8004f10 <ai_network_init+0x404>
    conv_dw_6_weights_array.format |= AI_FMT_FLAG_CONST;
 8004d44:	f8ce 4000 	str.w	r4, [lr]
    conv_dw_6_bias_array.format |= AI_FMT_FLAG_CONST;
 8004d48:	f8c8 1000 	str.w	r1, [r8]
    conv_pw_6_bias_array.format |= AI_FMT_FLAG_CONST;
 8004d4c:	4c58      	ldr	r4, [pc, #352]	; (8004eb0 <ai_network_init+0x3a4>)
    conv_dw_7_bias_array.format |= AI_FMT_FLAG_CONST;
 8004d4e:	4a59      	ldr	r2, [pc, #356]	; (8004eb4 <ai_network_init+0x3a8>)
    conv_dw_7_weights_array.format |= AI_FMT_FLAG_CONST;
 8004d50:	4959      	ldr	r1, [pc, #356]	; (8004eb8 <ai_network_init+0x3ac>)
    conv_pw_6_bias_array.data = AI_PTR(weights + 74368);
 8004d52:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 8004f14 <ai_network_init+0x408>
    conv_pw_5_weights_array.data_start = AI_PTR(weights + 22400);
 8004d56:	e9ca 5502 	strd	r5, r5, [sl, #8]
    conv_dw_6_weights_array.data_start = AI_PTR(weights + 39040);
 8004d5a:	e9ce 3302 	strd	r3, r3, [lr, #8]
    conv_pw_6_weights_array.format |= AI_FMT_FLAG_CONST;
 8004d5e:	f8d9 5000 	ldr.w	r5, [r9]
    conv_pw_6_bias_array.data = AI_PTR(weights + 74368);
 8004d62:	44bc      	add	ip, r7
    conv_dw_7_bias_array.format |= AI_FMT_FLAG_CONST;
 8004d64:	6813      	ldr	r3, [r2, #0]
    conv_dw_8_weights_array.format |= AI_FMT_FLAG_CONST;
 8004d66:	f8df e1b0 	ldr.w	lr, [pc, #432]	; 8004f18 <ai_network_init+0x40c>
    conv_pw_6_weights_array.data = AI_PTR(weights + 41600);
 8004d6a:	f8c9 6008 	str.w	r6, [r9, #8]
    conv_pw_6_weights_array.data_start = AI_PTR(weights + 41600);
 8004d6e:	f8c9 600c 	str.w	r6, [r9, #12]
    conv_dw_7_weights_array.format |= AI_FMT_FLAG_CONST;
 8004d72:	680e      	ldr	r6, [r1, #0]
    conv_pw_7_bias_array.format |= AI_FMT_FLAG_CONST;
 8004d74:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 8004f1c <ai_network_init+0x410>
    conv_dw_7_weights_array.format |= AI_FMT_FLAG_CONST;
 8004d78:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
    conv_pw_6_bias_array.data = AI_PTR(weights + 74368);
 8004d7c:	f8c4 c008 	str.w	ip, [r4, #8]
    conv_pw_6_bias_array.data_start = AI_PTR(weights + 74368);
 8004d80:	f8c4 c00c 	str.w	ip, [r4, #12]
    conv_dw_7_weights_array.format |= AI_FMT_FLAG_CONST;
 8004d84:	600e      	str	r6, [r1, #0]
    conv_pw_7_bias_array.format |= AI_FMT_FLAG_CONST;
 8004d86:	f8da 6000 	ldr.w	r6, [sl]
    conv_pw_7_bias_array.data = AI_PTR(weights + 145536);
 8004d8a:	f8df c194 	ldr.w	ip, [pc, #404]	; 8004f20 <ai_network_init+0x414>
    conv_pw_7_bias_array.format |= AI_FMT_FLAG_CONST;
 8004d8e:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
    conv_pw_7_bias_array.data = AI_PTR(weights + 145536);
 8004d92:	44bc      	add	ip, r7
    conv_pw_7_bias_array.format |= AI_FMT_FLAG_CONST;
 8004d94:	f8ca 6000 	str.w	r6, [sl]
    conv_dw_7_bias_array.data = AI_PTR(weights + 79488);
 8004d98:	4e48      	ldr	r6, [pc, #288]	; (8004ebc <ai_network_init+0x3b0>)
    conv_dw_6_bias_array.data_start = AI_PTR(weights + 41344);
 8004d9a:	e9c8 bb02 	strd	fp, fp, [r8, #8]
    conv_pw_6_weights_array.format |= AI_FMT_FLAG_CONST;
 8004d9e:	f045 4b80 	orr.w	fp, r5, #1073741824	; 0x40000000
    conv_pw_6_bias_array.format |= AI_FMT_FLAG_CONST;
 8004da2:	6825      	ldr	r5, [r4, #0]
    conv_dw_7_bias_array.data = AI_PTR(weights + 79488);
 8004da4:	443e      	add	r6, r7
    conv_pw_6_bias_array.format |= AI_FMT_FLAG_CONST;
 8004da6:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    conv_pw_6_weights_array.format |= AI_FMT_FLAG_CONST;
 8004daa:	f8c9 b000 	str.w	fp, [r9]
    conv_dw_7_bias_array.data = AI_PTR(weights + 79488);
 8004dae:	6096      	str	r6, [r2, #8]
    conv_pw_6_bias_array.format |= AI_FMT_FLAG_CONST;
 8004db0:	6025      	str	r5, [r4, #0]
    conv_dw_7_bias_array.format |= AI_FMT_FLAG_CONST;
 8004db2:	f043 4580 	orr.w	r5, r3, #1073741824	; 0x40000000
    conv_pw_7_weights_array.format |= AI_FMT_FLAG_CONST;
 8004db6:	4b42      	ldr	r3, [pc, #264]	; (8004ec0 <ai_network_init+0x3b4>)
    conv_dw_7_bias_array.format |= AI_FMT_FLAG_CONST;
 8004db8:	6015      	str	r5, [r2, #0]
    conv_pw_7_weights_array.format |= AI_FMT_FLAG_CONST;
 8004dba:	681b      	ldr	r3, [r3, #0]
    conv_dw_8_weights_array.format |= AI_FMT_FLAG_CONST;
 8004dbc:	f8de 5000 	ldr.w	r5, [lr]
    conv_pw_7_weights_array.format |= AI_FMT_FLAG_CONST;
 8004dc0:	f043 4880 	orr.w	r8, r3, #1073741824	; 0x40000000
 8004dc4:	4b3e      	ldr	r3, [pc, #248]	; (8004ec0 <ai_network_init+0x3b4>)
    conv_dw_8_weights_array.format |= AI_FMT_FLAG_CONST;
 8004dc6:	f045 4980 	orr.w	r9, r5, #1073741824	; 0x40000000
    conv_dw_8_bias_array.format |= AI_FMT_FLAG_CONST;
 8004dca:	4d3e      	ldr	r5, [pc, #248]	; (8004ec4 <ai_network_init+0x3b8>)
    conv_pw_7_weights_array.format |= AI_FMT_FLAG_CONST;
 8004dcc:	f8c3 8000 	str.w	r8, [r3]
    conv_dw_8_bias_array.format |= AI_FMT_FLAG_CONST;
 8004dd0:	462b      	mov	r3, r5
    conv_dw_7_weights_array.data = AI_PTR(weights + 74880);
 8004dd2:	f8df 8150 	ldr.w	r8, [pc, #336]	; 8004f24 <ai_network_init+0x418>
    conv_dw_8_bias_array.format |= AI_FMT_FLAG_CONST;
 8004dd6:	682d      	ldr	r5, [r5, #0]
    conv_dw_7_weights_array.data = AI_PTR(weights + 74880);
 8004dd8:	44b8      	add	r8, r7
    conv_dw_8_weights_array.data = AI_PTR(weights + 146048);
 8004dda:	4c3b      	ldr	r4, [pc, #236]	; (8004ec8 <ai_network_init+0x3bc>)
    conv_dw_8_bias_array.format |= AI_FMT_FLAG_CONST;
 8004ddc:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    conv_dw_7_bias_array.data_start = AI_PTR(weights + 79488);
 8004de0:	60d6      	str	r6, [r2, #12]
    conv_dw_7_weights_array.data = AI_PTR(weights + 74880);
 8004de2:	f8c1 8008 	str.w	r8, [r1, #8]
    conv_dw_8_weights_array.data = AI_PTR(weights + 146048);
 8004de6:	443c      	add	r4, r7
    conv_dw_8_bias_array.format |= AI_FMT_FLAG_CONST;
 8004de8:	601d      	str	r5, [r3, #0]
    conv_dw_7_weights_array.data_start = AI_PTR(weights + 74880);
 8004dea:	f8c1 800c 	str.w	r8, [r1, #12]
    conv_pw_7_weights_array.data = AI_PTR(weights + 80000);
 8004dee:	4d37      	ldr	r5, [pc, #220]	; (8004ecc <ai_network_init+0x3c0>)
    conv_dw_8_bias_array.data = AI_PTR(weights + 150656);
 8004df0:	4937      	ldr	r1, [pc, #220]	; (8004ed0 <ai_network_init+0x3c4>)
    conv_pw_8_weights_array.format |= AI_FMT_FLAG_CONST;
 8004df2:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8004f28 <ai_network_init+0x41c>
    conv_pw_7_weights_array.data = AI_PTR(weights + 80000);
 8004df6:	443d      	add	r5, r7
    conv_dw_8_bias_array.data = AI_PTR(weights + 150656);
 8004df8:	4439      	add	r1, r7
    conv_pw_7_weights_array.data = AI_PTR(weights + 80000);
 8004dfa:	4a31      	ldr	r2, [pc, #196]	; (8004ec0 <ai_network_init+0x3b4>)
    conv_pw_8_bias_array.format |= AI_FMT_FLAG_CONST;
 8004dfc:	4e35      	ldr	r6, [pc, #212]	; (8004ed4 <ai_network_init+0x3c8>)
    conv_dw_8_weights_array.format |= AI_FMT_FLAG_CONST;
 8004dfe:	f8ce 9000 	str.w	r9, [lr]
    conv_dw_10_bias_array.format |= AI_FMT_FLAG_CONST;
 8004e02:	f8df b128 	ldr.w	fp, [pc, #296]	; 8004f2c <ai_network_init+0x420>
    conv_pw_9_bias_array.format |= AI_FMT_FLAG_CONST;
 8004e06:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8004f30 <ai_network_init+0x424>
    conv_pw_7_weights_array.data_start = AI_PTR(weights + 80000);
 8004e0a:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv_pw_7_bias_array.data_start = AI_PTR(weights + 145536);
 8004e0e:	e9ca cc02 	strd	ip, ip, [sl, #8]
    conv_dw_8_weights_array.data_start = AI_PTR(weights + 146048);
 8004e12:	e9ce 4402 	strd	r4, r4, [lr, #8]
    conv_dw_8_bias_array.data_start = AI_PTR(weights + 150656);
 8004e16:	e9c3 1102 	strd	r1, r1, [r3, #8]
    conv_pw_8_weights_array.format |= AI_FMT_FLAG_CONST;
 8004e1a:	f8d8 1000 	ldr.w	r1, [r8]
    conv_dw_9_weights_array.format |= AI_FMT_FLAG_CONST;
 8004e1e:	4a2e      	ldr	r2, [pc, #184]	; (8004ed8 <ai_network_init+0x3cc>)
    conv_pw_8_bias_array.format |= AI_FMT_FLAG_CONST;
 8004e20:	6834      	ldr	r4, [r6, #0]
    conv_pw_8_weights_array.format |= AI_FMT_FLAG_CONST;
 8004e22:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    conv_dw_9_bias_array.format |= AI_FMT_FLAG_CONST;
 8004e26:	4b2d      	ldr	r3, [pc, #180]	; (8004edc <ai_network_init+0x3d0>)
    conv_pw_8_weights_array.format |= AI_FMT_FLAG_CONST;
 8004e28:	f8c8 1000 	str.w	r1, [r8]
    conv_pw_8_bias_array.format |= AI_FMT_FLAG_CONST;
 8004e2c:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    conv_dw_9_weights_array.format |= AI_FMT_FLAG_CONST;
 8004e30:	6811      	ldr	r1, [r2, #0]
    conv_pw_9_weights_array.format |= AI_FMT_FLAG_CONST;
 8004e32:	4d2b      	ldr	r5, [pc, #172]	; (8004ee0 <ai_network_init+0x3d4>)
    conv_pw_8_bias_array.format |= AI_FMT_FLAG_CONST;
 8004e34:	6034      	str	r4, [r6, #0]
    conv_dw_9_weights_array.format |= AI_FMT_FLAG_CONST;
 8004e36:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    conv_dw_9_bias_array.format |= AI_FMT_FLAG_CONST;
 8004e3a:	681c      	ldr	r4, [r3, #0]
    conv_dw_9_weights_array.format |= AI_FMT_FLAG_CONST;
 8004e3c:	6011      	str	r1, [r2, #0]
    conv_dw_9_bias_array.format |= AI_FMT_FLAG_CONST;
 8004e3e:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    conv_pw_9_weights_array.format |= AI_FMT_FLAG_CONST;
 8004e42:	6829      	ldr	r1, [r5, #0]
    conv_dw_10_weights_array.format |= AI_FMT_FLAG_CONST;
 8004e44:	f8df e0ec 	ldr.w	lr, [pc, #236]	; 8004f34 <ai_network_init+0x428>
    conv_dw_9_bias_array.format |= AI_FMT_FLAG_CONST;
 8004e48:	601c      	str	r4, [r3, #0]
    conv_pw_9_weights_array.format |= AI_FMT_FLAG_CONST;
 8004e4a:	f041 4480 	orr.w	r4, r1, #1073741824	; 0x40000000
    conv_pw_8_weights_array.data = AI_PTR(weights + 151168);
 8004e4e:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 8004f38 <ai_network_init+0x42c>
    conv_dw_10_weights_array.format |= AI_FMT_FLAG_CONST;
 8004e52:	f8de 3000 	ldr.w	r3, [lr]
    conv_pw_8_weights_array.data = AI_PTR(weights + 151168);
 8004e56:	44bc      	add	ip, r7
    conv_pw_9_weights_array.format |= AI_FMT_FLAG_CONST;
 8004e58:	602c      	str	r4, [r5, #0]
    conv_dw_10_bias_array.format |= AI_FMT_FLAG_CONST;
 8004e5a:	f8db 4000 	ldr.w	r4, [fp]
    conv_pw_9_bias_array.format |= AI_FMT_FLAG_CONST;
 8004e5e:	f8d9 1000 	ldr.w	r1, [r9]
    conv_pw_8_weights_array.data = AI_PTR(weights + 151168);
 8004e62:	f8c8 c008 	str.w	ip, [r8, #8]
    conv_dw_10_bias_array.format |= AI_FMT_FLAG_CONST;
 8004e66:	f044 4a80 	orr.w	sl, r4, #1073741824	; 0x40000000
    conv_pw_8_weights_array.data_start = AI_PTR(weights + 151168);
 8004e6a:	f8c8 c00c 	str.w	ip, [r8, #12]
    conv_dw_10_weights_array.format |= AI_FMT_FLAG_CONST;
 8004e6e:	f043 4880 	orr.w	r8, r3, #1073741824	; 0x40000000
    conv_pw_8_bias_array.data = AI_PTR(weights + 216704);
 8004e72:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 8004f3c <ai_network_init+0x430>
    conv_pw_9_bias_array.format |= AI_FMT_FLAG_CONST;
 8004e76:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8004e7a:	e061      	b.n	8004f40 <ai_network_init+0x434>
 8004e7c:	240011ac 	.word	0x240011ac
 8004e80:	24001490 	.word	0x24001490
 8004e84:	240013f8 	.word	0x240013f8
 8004e88:	24001d70 	.word	0x24001d70
 8004e8c:	24001e08 	.word	0x24001e08
 8004e90:	24001e34 	.word	0x24001e34
 8004e94:	24001ecc 	.word	0x24001ecc
 8004e98:	24001580 	.word	0x24001580
 8004e9c:	24001618 	.word	0x24001618
 8004ea0:	24002054 	.word	0x24002054
 8004ea4:	24001708 	.word	0x24001708
 8004ea8:	240017a0 	.word	0x240017a0
 8004eac:	24001fbc 	.word	0x24001fbc
 8004eb0:	24002144 	.word	0x24002144
 8004eb4:	24001890 	.word	0x24001890
 8004eb8:	24001928 	.word	0x24001928
 8004ebc:	00013680 	.word	0x00013680
 8004ec0:	240022a0 	.word	0x240022a0
 8004ec4:	24001954 	.word	0x24001954
 8004ec8:	00023a80 	.word	0x00023a80
 8004ecc:	00013880 	.word	0x00013880
 8004ed0:	00024c80 	.word	0x00024c80
 8004ed4:	240022cc 	.word	0x240022cc
 8004ed8:	24001ab0 	.word	0x24001ab0
 8004edc:	24001a18 	.word	0x24001a18
 8004ee0:	24002428 	.word	0x24002428
 8004ee4:	24001244 	.word	0x24001244
 8004ee8:	24001554 	.word	0x24001554
 8004eec:	240014bc 	.word	0x240014bc
 8004ef0:	24001ef8 	.word	0x24001ef8
 8004ef4:	24001f90 	.word	0x24001f90
 8004ef8:	240016dc 	.word	0x240016dc
 8004efc:	24001644 	.word	0x24001644
 8004f00:	24002118 	.word	0x24002118
 8004f04:	24002080 	.word	0x24002080
 8004f08:	24001864 	.word	0x24001864
 8004f0c:	240017cc 	.word	0x240017cc
 8004f10:	240021dc 	.word	0x240021dc
 8004f14:	00012280 	.word	0x00012280
 8004f18:	240019ec 	.word	0x240019ec
 8004f1c:	24002208 	.word	0x24002208
 8004f20:	00023880 	.word	0x00023880
 8004f24:	00012480 	.word	0x00012480
 8004f28:	24002364 	.word	0x24002364
 8004f2c:	24001270 	.word	0x24001270
 8004f30:	24002390 	.word	0x24002390
 8004f34:	24001308 	.word	0x24001308
 8004f38:	00024e80 	.word	0x00024e80
 8004f3c:	00034e80 	.word	0x00034e80
    conv_dw_9_weights_array.data = AI_PTR(weights + 217216);
 8004f40:	4c7e      	ldr	r4, [pc, #504]	; (800513c <ai_network_init+0x630>)
    conv_pw_8_bias_array.data = AI_PTR(weights + 216704);
 8004f42:	44bc      	add	ip, r7
    conv_dw_10_weights_array.format |= AI_FMT_FLAG_CONST;
 8004f44:	f8ce 8000 	str.w	r8, [lr]
    conv_dw_9_weights_array.data = AI_PTR(weights + 217216);
 8004f48:	443c      	add	r4, r7
    conv_dw_9_bias_array.data = AI_PTR(weights + 221824);
 8004f4a:	f8df 8250 	ldr.w	r8, [pc, #592]	; 800519c <ai_network_init+0x690>
    conv_pw_9_bias_array.format |= AI_FMT_FLAG_CONST;
 8004f4e:	f8c9 1000 	str.w	r1, [r9]
    conv_dw_9_bias_array.data = AI_PTR(weights + 221824);
 8004f52:	44b8      	add	r8, r7
    conv_dw_10_bias_array.format |= AI_FMT_FLAG_CONST;
 8004f54:	f8cb a000 	str.w	sl, [fp]
    conv_pw_8_bias_array.data = AI_PTR(weights + 216704);
 8004f58:	f8c6 c008 	str.w	ip, [r6, #8]
    conv_pw_8_bias_array.data_start = AI_PTR(weights + 216704);
 8004f5c:	f8c6 c00c 	str.w	ip, [r6, #12]
    conv_dw_9_weights_array.data = AI_PTR(weights + 217216);
 8004f60:	6094      	str	r4, [r2, #8]
    conv_dw_9_weights_array.data_start = AI_PTR(weights + 217216);
 8004f62:	60d4      	str	r4, [r2, #12]
    conv_dw_9_bias_array.data = AI_PTR(weights + 221824);
 8004f64:	4b76      	ldr	r3, [pc, #472]	; (8005140 <ai_network_init+0x634>)
    conv_pw_9_weights_array.data = AI_PTR(weights + 222336);
 8004f66:	f8df a238 	ldr.w	sl, [pc, #568]	; 80051a0 <ai_network_init+0x694>
    conv_pw_9_bias_array.data = AI_PTR(weights + 287872);
 8004f6a:	4e76      	ldr	r6, [pc, #472]	; (8005144 <ai_network_init+0x638>)
    conv_dw_10_weights_array.data = AI_PTR(weights + 288384);
 8004f6c:	4976      	ldr	r1, [pc, #472]	; (8005148 <ai_network_init+0x63c>)
    conv_pw_9_weights_array.data = AI_PTR(weights + 222336);
 8004f6e:	44ba      	add	sl, r7
    conv_dw_10_bias_array.data = AI_PTR(weights + 292992);
 8004f70:	4c76      	ldr	r4, [pc, #472]	; (800514c <ai_network_init+0x640>)
    conv_pw_9_bias_array.data = AI_PTR(weights + 287872);
 8004f72:	443e      	add	r6, r7
    conv_dw_10_weights_array.data = AI_PTR(weights + 288384);
 8004f74:	4439      	add	r1, r7
    conv_dw_9_bias_array.data = AI_PTR(weights + 221824);
 8004f76:	f8c3 8008 	str.w	r8, [r3, #8]
    conv_dw_10_bias_array.data = AI_PTR(weights + 292992);
 8004f7a:	443c      	add	r4, r7
    conv_dw_9_bias_array.data_start = AI_PTR(weights + 221824);
 8004f7c:	f8c3 800c 	str.w	r8, [r3, #12]
    conv_pw_10_weights_array.format |= AI_FMT_FLAG_CONST;
 8004f80:	f8df 8220 	ldr.w	r8, [pc, #544]	; 80051a4 <ai_network_init+0x698>
    conv_dw_11_weights_array.format |= AI_FMT_FLAG_CONST;
 8004f84:	4a72      	ldr	r2, [pc, #456]	; (8005150 <ai_network_init+0x644>)
    conv_pw_10_bias_array.format |= AI_FMT_FLAG_CONST;
 8004f86:	f8df c220 	ldr.w	ip, [pc, #544]	; 80051a8 <ai_network_init+0x69c>
    conv_dw_11_bias_array.format |= AI_FMT_FLAG_CONST;
 8004f8a:	4b72      	ldr	r3, [pc, #456]	; (8005154 <ai_network_init+0x648>)
    conv_pw_9_weights_array.data_start = AI_PTR(weights + 222336);
 8004f8c:	e9c5 aa02 	strd	sl, sl, [r5, #8]
    conv_pw_9_bias_array.data_start = AI_PTR(weights + 287872);
 8004f90:	e9c9 6602 	strd	r6, r6, [r9, #8]
    conv_dw_10_weights_array.data_start = AI_PTR(weights + 288384);
 8004f94:	e9ce 1102 	strd	r1, r1, [lr, #8]
    conv_dw_10_bias_array.data_start = AI_PTR(weights + 292992);
 8004f98:	e9cb 4402 	strd	r4, r4, [fp, #8]
    conv_pw_10_weights_array.format |= AI_FMT_FLAG_CONST;
 8004f9c:	f8d8 1000 	ldr.w	r1, [r8]
    conv_pw_11_weights_array.format |= AI_FMT_FLAG_CONST;
 8004fa0:	4d6d      	ldr	r5, [pc, #436]	; (8005158 <ai_network_init+0x64c>)
    conv_pw_10_weights_array.format |= AI_FMT_FLAG_CONST;
 8004fa2:	f041 4680 	orr.w	r6, r1, #1073741824	; 0x40000000
    conv_dw_11_weights_array.format |= AI_FMT_FLAG_CONST;
 8004fa6:	6811      	ldr	r1, [r2, #0]
    conv_pw_10_bias_array.format |= AI_FMT_FLAG_CONST;
 8004fa8:	f8dc 4000 	ldr.w	r4, [ip]
    conv_dw_11_weights_array.format |= AI_FMT_FLAG_CONST;
 8004fac:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    conv_pw_11_bias_array.format |= AI_FMT_FLAG_CONST;
 8004fb0:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 80051ac <ai_network_init+0x6a0>
    conv_pw_10_weights_array.format |= AI_FMT_FLAG_CONST;
 8004fb4:	f8c8 6000 	str.w	r6, [r8]
    conv_pw_10_bias_array.format |= AI_FMT_FLAG_CONST;
 8004fb8:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    conv_dw_11_bias_array.format |= AI_FMT_FLAG_CONST;
 8004fbc:	681e      	ldr	r6, [r3, #0]
    conv_dw_11_weights_array.format |= AI_FMT_FLAG_CONST;
 8004fbe:	6011      	str	r1, [r2, #0]
    conv_pw_11_weights_array.format |= AI_FMT_FLAG_CONST;
 8004fc0:	6829      	ldr	r1, [r5, #0]
    conv_dw_11_bias_array.format |= AI_FMT_FLAG_CONST;
 8004fc2:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
    conv_preds_weights_array.format |= AI_FMT_FLAG_CONST;
 8004fc6:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 80051b0 <ai_network_init+0x6a4>
    conv_pw_10_bias_array.format |= AI_FMT_FLAG_CONST;
 8004fca:	f8cc 4000 	str.w	r4, [ip]
    conv_pw_11_weights_array.format |= AI_FMT_FLAG_CONST;
 8004fce:	f041 4480 	orr.w	r4, r1, #1073741824	; 0x40000000
    conv_pw_10_weights_array.data = AI_PTR(weights + 293504);
 8004fd2:	f8df e1e0 	ldr.w	lr, [pc, #480]	; 80051b4 <ai_network_init+0x6a8>
    conv_pw_11_bias_array.format |= AI_FMT_FLAG_CONST;
 8004fd6:	f8d9 1000 	ldr.w	r1, [r9]
    conv_pw_10_weights_array.data = AI_PTR(weights + 293504);
 8004fda:	44be      	add	lr, r7
    conv_dw_11_bias_array.format |= AI_FMT_FLAG_CONST;
 8004fdc:	601e      	str	r6, [r3, #0]
    conv_pw_11_weights_array.format |= AI_FMT_FLAG_CONST;
 8004fde:	602c      	str	r4, [r5, #0]
    conv_pw_11_bias_array.format |= AI_FMT_FLAG_CONST;
 8004fe0:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    conv_preds_weights_array.format |= AI_FMT_FLAG_CONST;
 8004fe4:	f8da 6000 	ldr.w	r6, [sl]
    conv_preds_bias_array.format |= AI_FMT_FLAG_CONST;
 8004fe8:	4c5c      	ldr	r4, [pc, #368]	; (800515c <ai_network_init+0x650>)
    conv_pw_10_weights_array.data = AI_PTR(weights + 293504);
 8004fea:	f8c8 e008 	str.w	lr, [r8, #8]
    conv_preds_bias_array.format |= AI_FMT_FLAG_CONST;
 8004fee:	4623      	mov	r3, r4
    conv_pw_10_weights_array.data_start = AI_PTR(weights + 293504);
 8004ff0:	f8c8 e00c 	str.w	lr, [r8, #12]
    conv_preds_bias_array.format |= AI_FMT_FLAG_CONST;
 8004ff4:	6824      	ldr	r4, [r4, #0]
    conv_preds_weights_array.format |= AI_FMT_FLAG_CONST;
 8004ff6:	f046 4e80 	orr.w	lr, r6, #1073741824	; 0x40000000
    conv_pw_11_bias_array.format |= AI_FMT_FLAG_CONST;
 8004ffa:	f8c9 1000 	str.w	r1, [r9]
    conv_pw_10_bias_array.data = AI_PTR(weights + 359040);
 8004ffe:	4e58      	ldr	r6, [pc, #352]	; (8005160 <ai_network_init+0x654>)
    conv_preds_bias_array.format |= AI_FMT_FLAG_CONST;
 8005000:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    conv_dw_11_weights_array.data = AI_PTR(weights + 359552);
 8005004:	4957      	ldr	r1, [pc, #348]	; (8005164 <ai_network_init+0x658>)
    conv_pw_10_bias_array.data = AI_PTR(weights + 359040);
 8005006:	443e      	add	r6, r7
    conv_preds_weights_array.format |= AI_FMT_FLAG_CONST;
 8005008:	f8ca e000 	str.w	lr, [sl]
    conv_dw_11_weights_array.data = AI_PTR(weights + 359552);
 800500c:	4439      	add	r1, r7
    conv_preds_bias_array.format |= AI_FMT_FLAG_CONST;
 800500e:	601c      	str	r4, [r3, #0]
    conv_pw_10_bias_array.data = AI_PTR(weights + 359040);
 8005010:	f8cc 6008 	str.w	r6, [ip, #8]
    conv_pw_10_bias_array.data_start = AI_PTR(weights + 359040);
 8005014:	f8cc 600c 	str.w	r6, [ip, #12]
    conv_dw_11_weights_array.data = AI_PTR(weights + 359552);
 8005018:	6091      	str	r1, [r2, #8]
    conv_dw_11_weights_array.data_start = AI_PTR(weights + 359552);
 800501a:	60d1      	str	r1, [r2, #12]
    conv_dw_11_bias_array.data = AI_PTR(weights + 364160);
 800501c:	f8df e198 	ldr.w	lr, [pc, #408]	; 80051b8 <ai_network_init+0x6ac>
    conv_pw_11_weights_array.data = AI_PTR(weights + 364672);
 8005020:	4c51      	ldr	r4, [pc, #324]	; (8005168 <ai_network_init+0x65c>)
    conv_pw_11_bias_array.data = AI_PTR(weights + 495744);
 8005022:	f8df c198 	ldr.w	ip, [pc, #408]	; 80051bc <ai_network_init+0x6b0>
    conv_dw_11_bias_array.data = AI_PTR(weights + 364160);
 8005026:	44be      	add	lr, r7
    conv_preds_weights_array.data = AI_PTR(weights + 496768);
 8005028:	4e50      	ldr	r6, [pc, #320]	; (800516c <ai_network_init+0x660>)
    conv_pw_11_weights_array.data = AI_PTR(weights + 364672);
 800502a:	443c      	add	r4, r7
    conv_preds_bias_array.data = AI_PTR(weights + 515200);
 800502c:	4a50      	ldr	r2, [pc, #320]	; (8005170 <ai_network_init+0x664>)
    conv_pw_11_bias_array.data = AI_PTR(weights + 495744);
 800502e:	44bc      	add	ip, r7
    conv_preds_weights_array.data = AI_PTR(weights + 496768);
 8005030:	443e      	add	r6, r7
    conv_dw_11_bias_array.data = AI_PTR(weights + 364160);
 8005032:	4948      	ldr	r1, [pc, #288]	; (8005154 <ai_network_init+0x648>)
    conv_preds_bias_array.data = AI_PTR(weights + 515200);
 8005034:	443a      	add	r2, r7
    conv_pw_1_output_array.data = AI_PTR(activations + 100352);
 8005036:	f8df 8188 	ldr.w	r8, [pc, #392]	; 80051c0 <ai_network_init+0x6b4>
    conv_dw_11_bias_array.data = AI_PTR(weights + 364160);
 800503a:	f8c1 e008 	str.w	lr, [r1, #8]
    conv_dw_11_bias_array.data_start = AI_PTR(weights + 364160);
 800503e:	f8c1 e00c 	str.w	lr, [r1, #12]
    conv_dw_4_output_array.data = AI_PTR(activations + 100352);
 8005042:	f8df e180 	ldr.w	lr, [pc, #384]	; 80051c4 <ai_network_init+0x6b8>
    conv_dw_11_output_array.data = AI_PTR(activations + 25088);
 8005046:	f8df b180 	ldr.w	fp, [pc, #384]	; 80051c8 <ai_network_init+0x6bc>
    conv_pw_11_weights_array.data_start = AI_PTR(weights + 364672);
 800504a:	e9c5 4402 	strd	r4, r4, [r5, #8]
    conv_pw_11_bias_array.data_start = AI_PTR(weights + 495744);
 800504e:	e9c9 cc02 	strd	ip, ip, [r9, #8]
    conv_preds_weights_array.data_start = AI_PTR(weights + 496768);
 8005052:	e9ca 6602 	strd	r6, r6, [sl, #8]
    conv_preds_bias_array.data_start = AI_PTR(weights + 515200);
 8005056:	e9c3 2202 	strd	r2, r2, [r3, #8]
  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 800505a:	9f03      	ldr	r7, [sp, #12]
    conv1_output_array.data = AI_PTR(activations + 1824);
 800505c:	4a45      	ldr	r2, [pc, #276]	; (8005174 <ai_network_init+0x668>)
  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 800505e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    conv_pw_2_output_array.data = AI_PTR(activations + 50176);
 8005060:	f8df 9168 	ldr.w	r9, [pc, #360]	; 80051cc <ai_network_init+0x6c0>
  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 8005064:	3303      	adds	r3, #3
    conv_dw_5_output_array.data = AI_PTR(activations + 50176);
 8005066:	f8df c168 	ldr.w	ip, [pc, #360]	; 80051d0 <ai_network_init+0x6c4>
    conv_dw_6_output_array.data = AI_PTR(activations + 50176);
 800506a:	4f43      	ldr	r7, [pc, #268]	; (8005178 <ai_network_init+0x66c>)
  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 800506c:	f023 0303 	bic.w	r3, r3, #3
    conv_dw_3_output_array.data = AI_PTR(activations + 150528);
 8005070:	4d42      	ldr	r5, [pc, #264]	; (800517c <ai_network_init+0x670>)
    conv_pw_1_output_array.data = AI_PTR(activations + 100352);
 8005072:	f503 34c4 	add.w	r4, r3, #100352	; 0x18800
    conv1_output_array.data = AI_PTR(activations + 1824);
 8005076:	f503 6ae4 	add.w	sl, r3, #1824	; 0x720
    conv_pw_2_output_array.data = AI_PTR(activations + 50176);
 800507a:	f503 4144 	add.w	r1, r3, #50176	; 0xc400
    conv_dw_3_output_array.data = AI_PTR(activations + 150528);
 800507e:	f503 3613 	add.w	r6, r3, #150528	; 0x24c00
    conv_pw_1_output_array.data_start = AI_PTR(activations + 100352);
 8005082:	e9c8 4402 	strd	r4, r4, [r8, #8]
    conv_dw_4_output_array.data_start = AI_PTR(activations + 100352);
 8005086:	e9ce 4402 	strd	r4, r4, [lr, #8]
    conv1_output_array.data_start = AI_PTR(activations + 1824);
 800508a:	e9c2 aa02 	strd	sl, sl, [r2, #8]
    conv_pw_3_output_array.data = AI_PTR(activations + 0);
 800508e:	4c3c      	ldr	r4, [pc, #240]	; (8005180 <ai_network_init+0x674>)
    conv_dw_7_output_array.data = AI_PTR(activations + 25088);
 8005090:	f503 42c4 	add.w	r2, r3, #25088	; 0x6200
 8005094:	f8df a13c 	ldr.w	sl, [pc, #316]	; 80051d4 <ai_network_init+0x6c8>
    conv_dw_1_output_array.data = AI_PTR(activations + 0);
 8005098:	f8df 813c 	ldr.w	r8, [pc, #316]	; 80051d8 <ai_network_init+0x6cc>
    conv_dw_2_output_array.data = AI_PTR(activations + 0);
 800509c:	f8df e13c 	ldr.w	lr, [pc, #316]	; 80051dc <ai_network_init+0x6d0>
    conv_pw_2_output_array.data_start = AI_PTR(activations + 50176);
 80050a0:	e9c9 1102 	strd	r1, r1, [r9, #8]
    conv_dw_5_output_array.data_start = AI_PTR(activations + 50176);
 80050a4:	e9cc 1102 	strd	r1, r1, [ip, #8]
    conv_dw_6_output_array.data_start = AI_PTR(activations + 50176);
 80050a8:	e9c7 1102 	strd	r1, r1, [r7, #8]
    conv_dw_3_output_array.data_start = AI_PTR(activations + 150528);
 80050ac:	e9c5 6602 	strd	r6, r6, [r5, #8]
    conv_dw_7_output_array.data_start = AI_PTR(activations + 25088);
 80050b0:	e9ca 2202 	strd	r2, r2, [sl, #8]
    conv_pw_7_output_array.data = AI_PTR(activations + 0);
 80050b4:	4d33      	ldr	r5, [pc, #204]	; (8005184 <ai_network_init+0x678>)
    conv_pw_4_output_array.data = AI_PTR(activations + 0);
 80050b6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80051e0 <ai_network_init+0x6d4>
    conv_pw_5_output_array.data = AI_PTR(activations + 0);
 80050ba:	f8df c128 	ldr.w	ip, [pc, #296]	; 80051e4 <ai_network_init+0x6d8>
    conv_pw_6_output_array.data = AI_PTR(activations + 0);
 80050be:	4f32      	ldr	r7, [pc, #200]	; (8005188 <ai_network_init+0x67c>)
    input_2_output_array.data = AI_PTR(NULL);
 80050c0:	4e32      	ldr	r6, [pc, #200]	; (800518c <ai_network_init+0x680>)
    conv_dw_8_output_array.data = AI_PTR(activations + 25088);
 80050c2:	f8df a124 	ldr.w	sl, [pc, #292]	; 80051e8 <ai_network_init+0x6dc>
    conv_pw_7_output_array.data = AI_PTR(activations + 0);
 80050c6:	60ab      	str	r3, [r5, #8]
    conv_pw_3_output_array.data_start = AI_PTR(activations + 0);
 80050c8:	e9c4 3302 	strd	r3, r3, [r4, #8]
    input_2_output_array.data = AI_PTR(NULL);
 80050cc:	2400      	movs	r4, #0
    conv_dw_1_output_array.data_start = AI_PTR(activations + 0);
 80050ce:	e9c8 3302 	strd	r3, r3, [r8, #8]
    conv_dw_2_output_array.data_start = AI_PTR(activations + 0);
 80050d2:	e9ce 3302 	strd	r3, r3, [lr, #8]
    conv_pw_4_output_array.data_start = AI_PTR(activations + 0);
 80050d6:	e9c9 3302 	strd	r3, r3, [r9, #8]
    conv_pw_5_output_array.data_start = AI_PTR(activations + 0);
 80050da:	e9cc 3302 	strd	r3, r3, [ip, #8]
    conv_pw_6_output_array.data_start = AI_PTR(activations + 0);
 80050de:	e9c7 3302 	strd	r3, r3, [r7, #8]
    conv_dw_9_output_array.data = AI_PTR(activations + 25088);
 80050e2:	f8df 8108 	ldr.w	r8, [pc, #264]	; 80051ec <ai_network_init+0x6e0>
    conv_dw_10_output_array.data = AI_PTR(activations + 25088);
 80050e6:	f8df e108 	ldr.w	lr, [pc, #264]	; 80051f0 <ai_network_init+0x6e4>
    conv_pw_11_scratch0_array.data = AI_PTR(activations + 50176);
 80050ea:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80051f4 <ai_network_init+0x6e8>
    conv_pw_8_output_array.data = AI_PTR(activations + 0);
 80050ee:	f8df c108 	ldr.w	ip, [pc, #264]	; 80051f8 <ai_network_init+0x6ec>
    conv_pw_9_output_array.data = AI_PTR(activations + 0);
 80050f2:	4f27      	ldr	r7, [pc, #156]	; (8005190 <ai_network_init+0x684>)
    input_2_output_array.data_start = AI_PTR(NULL);
 80050f4:	e9c6 4402 	strd	r4, r4, [r6, #8]
    conv_pw_7_output_array.data_start = AI_PTR(activations + 0);
 80050f8:	60eb      	str	r3, [r5, #12]
    conv_pw_10_output_array.data = AI_PTR(activations + 0);
 80050fa:	4e26      	ldr	r6, [pc, #152]	; (8005194 <ai_network_init+0x688>)
    conv_pw_11_output_array.data = AI_PTR(activations + 0);
 80050fc:	4d26      	ldr	r5, [pc, #152]	; (8005198 <ai_network_init+0x68c>)
    conv_dw_8_output_array.data_start = AI_PTR(activations + 25088);
 80050fe:	e9ca 2202 	strd	r2, r2, [sl, #8]
    conv_preds_output_array.data = AI_PTR(NULL);
 8005102:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 80051fc <ai_network_init+0x6f0>
    conv_dw_9_output_array.data_start = AI_PTR(activations + 25088);
 8005106:	e9c8 2202 	strd	r2, r2, [r8, #8]
    conv_dw_10_output_array.data_start = AI_PTR(activations + 25088);
 800510a:	e9ce 2202 	strd	r2, r2, [lr, #8]
    conv_dw_11_output_array.data_start = AI_PTR(activations + 25088);
 800510e:	e9cb 2202 	strd	r2, r2, [fp, #8]
    conv_pw_11_scratch0_array.data_start = AI_PTR(activations + 50176);
 8005112:	e9c9 1102 	strd	r1, r1, [r9, #8]
    conv_pw_8_output_array.data_start = AI_PTR(activations + 0);
 8005116:	e9cc 3302 	strd	r3, r3, [ip, #8]
    conv_pw_9_output_array.data_start = AI_PTR(activations + 0);
 800511a:	e9c7 3302 	strd	r3, r3, [r7, #8]
    conv_pw_10_output_array.data_start = AI_PTR(activations + 0);
 800511e:	e9c6 3302 	strd	r3, r3, [r6, #8]
    conv_pw_11_output_array.data_start = AI_PTR(activations + 0);
 8005122:	e9c5 3302 	strd	r3, r3, [r5, #8]
    conv_preds_output_array.data_start = AI_PTR(NULL);
 8005126:	e9ca 4402 	strd	r4, r4, [sl, #8]

  return ok;
}
 800512a:	b005      	add	sp, #20
 800512c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ok &= ai_platform_network_post_init(network);
 8005130:	f015 bcc0 	b.w	801aab4 <ai_platform_network_post_init>
}
 8005134:	b005      	add	sp, #20
 8005136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800513a:	bf00      	nop
 800513c:	00035080 	.word	0x00035080
 8005140:	24001a18 	.word	0x24001a18
 8005144:	00046480 	.word	0x00046480
 8005148:	00046680 	.word	0x00046680
 800514c:	00047880 	.word	0x00047880
 8005150:	240013cc 	.word	0x240013cc
 8005154:	24001334 	.word	0x24001334
 8005158:	24001d44 	.word	0x24001d44
 800515c:	24001adc 	.word	0x24001adc
 8005160:	00057a80 	.word	0x00057a80
 8005164:	00057c80 	.word	0x00057c80
 8005168:	00059080 	.word	0x00059080
 800516c:	00079480 	.word	0x00079480
 8005170:	0007dc80 	.word	0x0007dc80
 8005174:	24001218 	.word	0x24001218
 8005178:	24001838 	.word	0x24001838
 800517c:	240015ec 	.word	0x240015ec
 8005180:	24001f64 	.word	0x24001f64
 8005184:	24002274 	.word	0x24002274
 8005188:	240021b0 	.word	0x240021b0
 800518c:	240024b8 	.word	0x240024b8
 8005190:	240023fc 	.word	0x240023fc
 8005194:	24001c0c 	.word	0x24001c0c
 8005198:	24001cec 	.word	0x24001cec
 800519c:	00036280 	.word	0x00036280
 80051a0:	00036480 	.word	0x00036480
 80051a4:	24001c38 	.word	0x24001c38
 80051a8:	24001ba0 	.word	0x24001ba0
 80051ac:	24001c64 	.word	0x24001c64
 80051b0:	24001b74 	.word	0x24001b74
 80051b4:	00047a80 	.word	0x00047a80
 80051b8:	00058e80 	.word	0x00058e80
 80051bc:	00079080 	.word	0x00079080
 80051c0:	24001ddc 	.word	0x24001ddc
 80051c4:	240016b0 	.word	0x240016b0
 80051c8:	240013a0 	.word	0x240013a0
 80051cc:	24001ea0 	.word	0x24001ea0
 80051d0:	24001774 	.word	0x24001774
 80051d4:	240018fc 	.word	0x240018fc
 80051d8:	24001464 	.word	0x24001464
 80051dc:	24001528 	.word	0x24001528
 80051e0:	24002028 	.word	0x24002028
 80051e4:	240020ec 	.word	0x240020ec
 80051e8:	240019c0 	.word	0x240019c0
 80051ec:	24001a84 	.word	0x24001a84
 80051f0:	240012dc 	.word	0x240012dc
 80051f4:	24001d18 	.word	0x24001d18
 80051f8:	24002338 	.word	0x24002338
 80051fc:	24001b48 	.word	0x24001b48

08005200 <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 8005200:	f015 bd06 	b.w	801ac10 <ai_platform_network_process>

08005204 <ai_network_data_weights_get>:
 /**************************************************************************/
 /*Weights/bias accessed from int flash at inference time*/
 return AI_HANDLE_PTR(s_network_weights);
#endif

}
 8005204:	4800      	ldr	r0, [pc, #0]	; (8005208 <ai_network_data_weights_get+0x4>)
 8005206:	4770      	bx	lr
 8005208:	d0000000 	.word	0xd0000000

0800520c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800520c:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 800520e:	2301      	movs	r3, #1
 8005210:	4c07      	ldr	r4, [pc, #28]	; (8005230 <SD_initialize+0x24>)
  if(BSP_SD_GetCardState(0) == SD_TRANSFER_OK)
 8005212:	2000      	movs	r0, #0
  Stat = STA_NOINIT;
 8005214:	7023      	strb	r3, [r4, #0]
  Stat = STA_NOINIT;
 8005216:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState(0) == SD_TRANSFER_OK)
 8005218:	f005 f970 	bl	800a4fc <BSP_SD_GetCardState>
 800521c:	b918      	cbnz	r0, 8005226 <SD_initialize+0x1a>
    Stat &= ~STA_NOINIT;
 800521e:	7823      	ldrb	r3, [r4, #0]
 8005220:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005224:	7023      	strb	r3, [r4, #0]
  return Stat;
 8005226:	7823      	ldrb	r3, [r4, #0]
 8005228:	b2db      	uxtb	r3, r3
  {
    Stat = SD_CheckStatus(lun);
  }

#else
  Stat = SD_CheckStatus(lun);
 800522a:	7023      	strb	r3, [r4, #0]
#endif
  return Stat;
 800522c:	7820      	ldrb	r0, [r4, #0]
}
 800522e:	bd10      	pop	{r4, pc}
 8005230:	240024c8 	.word	0x240024c8

08005234 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005234:	b508      	push	{r3, lr}
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks(0, (uint32_t*)buff,
 8005236:	2000      	movs	r0, #0
 8005238:	f005 f934 	bl	800a4a4 <BSP_SD_ReadBlocks>
 800523c:	b928      	cbnz	r0, 800524a <SD_read+0x16>
                       (uint32_t) (sector),
                       count) == BSP_ERROR_NONE)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState(0) != SD_TRANSFER_OK)
 800523e:	2000      	movs	r0, #0
 8005240:	f005 f95c 	bl	800a4fc <BSP_SD_GetCardState>
 8005244:	2800      	cmp	r0, #0
 8005246:	d1fa      	bne.n	800523e <SD_read+0xa>
    }
    res = RES_OK;
  }

  return res;
}
 8005248:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 800524a:	2001      	movs	r0, #1
}
 800524c:	bd08      	pop	{r3, pc}
 800524e:	bf00      	nop

08005250 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005250:	4b18      	ldr	r3, [pc, #96]	; (80052b4 <SD_ioctl+0x64>)
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	07db      	lsls	r3, r3, #31
 8005256:	d408      	bmi.n	800526a <SD_ioctl+0x1a>
{
 8005258:	b510      	push	{r4, lr}
 800525a:	4614      	mov	r4, r2
 800525c:	b08a      	sub	sp, #40	; 0x28

  switch (cmd)
 800525e:	2903      	cmp	r1, #3
 8005260:	d824      	bhi.n	80052ac <SD_ioctl+0x5c>
 8005262:	e8df f001 	tbb	[pc, r1]
 8005266:	0704      	.short	0x0704
 8005268:	1910      	.short	0x1910
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800526a:	2003      	movs	r0, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 800526c:	4770      	bx	lr
    res = RES_OK;
 800526e:	2000      	movs	r0, #0
}
 8005270:	b00a      	add	sp, #40	; 0x28
 8005272:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(0, &CardInfo);
 8005274:	a901      	add	r1, sp, #4
 8005276:	2000      	movs	r0, #0
 8005278:	f005 f94c 	bl	800a514 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800527c:	9b07      	ldr	r3, [sp, #28]
    res = RES_OK;
 800527e:	2000      	movs	r0, #0
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005280:	6023      	str	r3, [r4, #0]
}
 8005282:	b00a      	add	sp, #40	; 0x28
 8005284:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(0, &CardInfo);
 8005286:	a901      	add	r1, sp, #4
 8005288:	2000      	movs	r0, #0
 800528a:	f005 f943 	bl	800a514 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800528e:	9b08      	ldr	r3, [sp, #32]
    res = RES_OK;
 8005290:	2000      	movs	r0, #0
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005292:	8023      	strh	r3, [r4, #0]
}
 8005294:	b00a      	add	sp, #40	; 0x28
 8005296:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(0, &CardInfo);
 8005298:	a901      	add	r1, sp, #4
 800529a:	2000      	movs	r0, #0
 800529c:	f005 f93a 	bl	800a514 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80052a0:	9b08      	ldr	r3, [sp, #32]
 80052a2:	2000      	movs	r0, #0
 80052a4:	0a5b      	lsrs	r3, r3, #9
 80052a6:	6023      	str	r3, [r4, #0]
}
 80052a8:	b00a      	add	sp, #40	; 0x28
 80052aa:	bd10      	pop	{r4, pc}
    res = RES_PARERR;
 80052ac:	2004      	movs	r0, #4
}
 80052ae:	b00a      	add	sp, #40	; 0x28
 80052b0:	bd10      	pop	{r4, pc}
 80052b2:	bf00      	nop
 80052b4:	240024c8 	.word	0x240024c8

080052b8 <SD_write>:
{
 80052b8:	b508      	push	{r3, lr}
  if(BSP_SD_WriteBlocks(0, (uint32_t*)buff,
 80052ba:	2000      	movs	r0, #0
 80052bc:	f005 f908 	bl	800a4d0 <BSP_SD_WriteBlocks>
 80052c0:	b928      	cbnz	r0, 80052ce <SD_write+0x16>
    while(BSP_SD_GetCardState(0) != SD_TRANSFER_OK)
 80052c2:	2000      	movs	r0, #0
 80052c4:	f005 f91a 	bl	800a4fc <BSP_SD_GetCardState>
 80052c8:	2800      	cmp	r0, #0
 80052ca:	d1fa      	bne.n	80052c2 <SD_write+0xa>
}
 80052cc:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 80052ce:	2001      	movs	r0, #1
}
 80052d0:	bd08      	pop	{r3, pc}
 80052d2:	bf00      	nop

080052d4 <SD_status>:
{
 80052d4:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 80052d6:	2301      	movs	r3, #1
 80052d8:	4c05      	ldr	r4, [pc, #20]	; (80052f0 <SD_status+0x1c>)
  if(BSP_SD_GetCardState(0) == SD_TRANSFER_OK)
 80052da:	2000      	movs	r0, #0
  Stat = STA_NOINIT;
 80052dc:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState(0) == SD_TRANSFER_OK)
 80052de:	f005 f90d 	bl	800a4fc <BSP_SD_GetCardState>
 80052e2:	b918      	cbnz	r0, 80052ec <SD_status+0x18>
    Stat &= ~STA_NOINIT;
 80052e4:	7823      	ldrb	r3, [r4, #0]
 80052e6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80052ea:	7023      	strb	r3, [r4, #0]
  return Stat;
 80052ec:	7820      	ldrb	r0, [r4, #0]
}
 80052ee:	bd10      	pop	{r4, pc}
 80052f0:	240024c8 	.word	0x240024c8

080052f4 <HAL_MspInit>:
/**
 * @brief  Initializes the Global MSP.
 * @param  None
 * @retval None
 */
void HAL_MspInit(void) {}
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop

080052f8 <HAL_RNG_MspInit>:
 *           - Peripheral's clock enable
 * @param hrng: RNG handle pointer
 * @retval None
 */
void HAL_RNG_MspInit(RNG_HandleTypeDef *hrng)
{
 80052f8:	b500      	push	{lr}
 80052fa:	b0b3      	sub	sp, #204	; 0xcc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

  /*Select PLL output as RNG clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80052fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_PLL;
 8005300:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8005304:	a802      	add	r0, sp, #8
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8005306:	9202      	str	r2, [sp, #8]
  PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_PLL;
 8005308:	9322      	str	r3, [sp, #136]	; 0x88
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800530a:	f00a fb85 	bl	800fa18 <HAL_RCCEx_PeriphCLKConfig>

  /* RNG Peripheral clock enable */
  __HAL_RCC_RNG_CLK_ENABLE();
 800530e:	4b08      	ldr	r3, [pc, #32]	; (8005330 <HAL_RNG_MspInit+0x38>)
 8005310:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 8005314:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005318:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800531c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005324:	9301      	str	r3, [sp, #4]
 8005326:	9b01      	ldr	r3, [sp, #4]
}
 8005328:	b033      	add	sp, #204	; 0xcc
 800532a:	f85d fb04 	ldr.w	pc, [sp], #4
 800532e:	bf00      	nop
 8005330:	58024400 	.word	0x58024400

08005334 <HAL_RNG_MspDeInit>:
 * @retval None
 */
void HAL_RNG_MspDeInit(RNG_HandleTypeDef *hrng)
{
  /* Enable RNG reset state */
  __HAL_RCC_RNG_FORCE_RESET();
 8005334:	4b06      	ldr	r3, [pc, #24]	; (8005350 <HAL_RNG_MspDeInit+0x1c>)
 8005336:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800533a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800533e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Release RNG from reset state */
  __HAL_RCC_RNG_RELEASE_RESET();
 8005342:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005346:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800534a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800534e:	4770      	bx	lr
 8005350:	58024400 	.word	0x58024400

08005354 <HAL_UART_MspInit>:
  *           - NVIC configuration for DMA interrupt request enable
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8005354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  RCC_PeriphCLKInitTypeDef RCC_PeriphClkInit;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8005358:	4e51      	ldr	r6, [pc, #324]	; (80054a0 <HAL_UART_MspInit+0x14c>)
  USARTx_RX_GPIO_CLK_ENABLE();

  /* Select SysClk as source of USART1 clocks */
  RCC_PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART16;
 800535a:	2701      	movs	r7, #1
{
 800535c:	b0bd      	sub	sp, #244	; 0xf4
  RCC_PeriphClkInit.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800535e:	2400      	movs	r4, #0
  USARTx_TX_GPIO_CLK_ENABLE();
 8005360:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
{
 8005364:	4680      	mov	r8, r0
  HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphClkInit);
 8005366:	a80c      	add	r0, sp, #48	; 0x30
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = USARTx_TX_AF;

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8005368:	f8df b144 	ldr.w	fp, [pc, #324]	; 80054b0 <HAL_UART_MspInit+0x15c>
  USARTx_TX_GPIO_CLK_ENABLE();
 800536c:	433b      	orrs	r3, r7
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800536e:	f04f 0903 	mov.w	r9, #3
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8005372:	2507      	movs	r5, #7

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8005374:	f44f 6a80 	mov.w	sl, #1024	; 0x400
  USARTx_TX_GPIO_CLK_ENABLE();
 8005378:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 800537c:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 8005380:	403b      	ands	r3, r7
 8005382:	9303      	str	r3, [sp, #12]
 8005384:	9b03      	ldr	r3, [sp, #12]
  USARTx_RX_GPIO_CLK_ENABLE();
 8005386:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 800538a:	433b      	orrs	r3, r7
 800538c:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 8005390:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
  RCC_PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART16;
 8005394:	970c      	str	r7, [sp, #48]	; 0x30
  USARTx_RX_GPIO_CLK_ENABLE();
 8005396:	403b      	ands	r3, r7
  RCC_PeriphClkInit.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8005398:	942b      	str	r4, [sp, #172]	; 0xac
  USARTx_RX_GPIO_CLK_ENABLE();
 800539a:	9304      	str	r3, [sp, #16]
 800539c:	9b04      	ldr	r3, [sp, #16]
  HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphClkInit);
 800539e:	f00a fb3b 	bl	800fa18 <HAL_RCCEx_PeriphCLKConfig>
  USARTx_CLK_ENABLE();
 80053a2:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 80053a6:	f44f 7200 	mov.w	r2, #512	; 0x200
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80053aa:	a907      	add	r1, sp, #28
 80053ac:	4658      	mov	r0, fp
  USARTx_CLK_ENABLE();
 80053ae:	f043 0310 	orr.w	r3, r3, #16
 80053b2:	f8c6 30f0 	str.w	r3, [r6, #240]	; 0xf0
 80053b6:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 80053ba:	f003 0310 	and.w	r3, r3, #16
 80053be:	9305      	str	r3, [sp, #20]
 80053c0:	9b05      	ldr	r3, [sp, #20]
  DMAx_CLK_ENABLE();
 80053c2:	f8d6 30d8 	ldr.w	r3, [r6, #216]	; 0xd8
 80053c6:	433b      	orrs	r3, r7
 80053c8:	f8c6 30d8 	str.w	r3, [r6, #216]	; 0xd8
 80053cc:	f8d6 30d8 	ldr.w	r3, [r6, #216]	; 0xd8
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 80053d0:	9207      	str	r2, [sp, #28]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80053d2:	2202      	movs	r2, #2
  DMAx_CLK_ENABLE();
 80053d4:	403b      	ands	r3, r7
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 80053d6:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80053d8:	9208      	str	r2, [sp, #32]
  DMAx_CLK_ENABLE();
 80053da:	9306      	str	r3, [sp, #24]
 80053dc:	9b06      	ldr	r3, [sp, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80053de:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80053e0:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80053e4:	f007 fe7e 	bl	800d0e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = USARTx_RX_AF;

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 80053e8:	a907      	add	r1, sp, #28
 80053ea:	4658      	mov	r0, fp

  /*##-3- Configure the DMA ##################################################*/
  /* Configure the DMA handler for Transmission process */
  hdma_tx.Instance                 = USARTx_TX_DMA_STREAM;
 80053ec:	4e2d      	ldr	r6, [pc, #180]	; (80054a4 <HAL_UART_MspInit+0x150>)
  hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
  hdma_tx.Init.Mode                = DMA_NORMAL;
  hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
  hdma_tx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
  hdma_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  hdma_tx.Init.MemBurst            = DMA_MBURST_INC4;
 80053ee:	f44f 0b00 	mov.w	fp, #8388608	; 0x800000
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 80053f2:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 80053f4:	f8cd a01c 	str.w	sl, [sp, #28]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 80053f8:	f007 fe74 	bl	800d0e4 <HAL_GPIO_Init>
  hdma_tx.Instance                 = USARTx_TX_DMA_STREAM;
 80053fc:	482a      	ldr	r0, [pc, #168]	; (80054a8 <HAL_UART_MspInit+0x154>)
  hdma_tx.Init.PeriphBurst         = DMA_PBURST_INC4;
 80053fe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  hdma_tx.Init.Request             = USARTx_TX_DMA_CHANNEL;
 8005402:	212a      	movs	r1, #42	; 0x2a
  hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8005404:	2240      	movs	r2, #64	; 0x40

  /* Associate the initialized DMA handle to the UART handle */
  __HAL_LINKDMA(huart, hdmatx, hdma_tx);

  /* Configure the DMA handler for reception process */
  hdma_rx.Instance                 = USARTx_RX_DMA_STREAM;
 8005406:	4d29      	ldr	r5, [pc, #164]	; (80054ac <HAL_UART_MspInit+0x158>)
  hdma_tx.Instance                 = USARTx_TX_DMA_STREAM;
 8005408:	6030      	str	r0, [r6, #0]
  HAL_DMA_Init(&hdma_tx);
 800540a:	4630      	mov	r0, r6
  hdma_tx.Init.PeriphBurst         = DMA_PBURST_INC4;
 800540c:	9301      	str	r3, [sp, #4]
  hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800540e:	e9c6 1201 	strd	r1, r2, [r6, #4]
  hdma_tx.Init.PeriphBurst         = DMA_PBURST_INC4;
 8005412:	e9c6 b30b 	strd	fp, r3, [r6, #44]	; 0x2c
  hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8005416:	e9c6 4a03 	strd	r4, sl, [r6, #12]
  hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 800541a:	e9c6 4405 	strd	r4, r4, [r6, #20]
  hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 800541e:	e9c6 4407 	strd	r4, r4, [r6, #28]
  hdma_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8005422:	e9c6 4909 	strd	r4, r9, [r6, #36]	; 0x24
  HAL_DMA_Init(&hdma_tx);
 8005426:	f005 fc13 	bl	800ac50 <HAL_DMA_Init>
  hdma_rx.Instance                 = USARTx_RX_DMA_STREAM;
 800542a:	f8df c088 	ldr.w	ip, [pc, #136]	; 80054b4 <HAL_UART_MspInit+0x160>
  hdma_rx.Init.Mode                = DMA_NORMAL;
  hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
  hdma_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
  hdma_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  hdma_rx.Init.MemBurst            = DMA_MBURST_INC4;
  hdma_rx.Init.PeriphBurst         = DMA_PBURST_INC4;
 800542e:	9b01      	ldr	r3, [sp, #4]
  hdma_rx.Init.Request             = USARTx_RX_DMA_CHANNEL;
 8005430:	2129      	movs	r1, #41	; 0x29
  hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8005432:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  __HAL_LINKDMA(huart, hdmatx, hdma_tx);
 8005436:	f8c8 6074 	str.w	r6, [r8, #116]	; 0x74

  HAL_DMA_Init(&hdma_rx);
 800543a:	4628      	mov	r0, r5
  hdma_rx.Init.PeriphBurst         = DMA_PBURST_INC4;
 800543c:	632b      	str	r3, [r5, #48]	; 0x30
  hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 800543e:	622a      	str	r2, [r5, #32]
  __HAL_LINKDMA(huart, hdmatx, hdma_tx);
 8005440:	f8c6 8038 	str.w	r8, [r6, #56]	; 0x38
  hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8005444:	f8c5 a010 	str.w	sl, [r5, #16]
  hdma_rx.Init.Mode                = DMA_NORMAL;
 8005448:	61ec      	str	r4, [r5, #28]
  hdma_rx.Init.MemBurst            = DMA_MBURST_INC4;
 800544a:	f8c5 b02c 	str.w	fp, [r5, #44]	; 0x2c
  hdma_rx.Init.Request             = USARTx_RX_DMA_CHANNEL;
 800544e:	e9c5 c100 	strd	ip, r1, [r5]
  hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8005452:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8005456:	e9c5 4405 	strd	r4, r4, [r5, #20]
  hdma_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800545a:	e9c5 4909 	strd	r4, r9, [r5, #36]	; 0x24
  HAL_DMA_Init(&hdma_rx);
 800545e:	f005 fbf7 	bl	800ac50 <HAL_DMA_Init>
  /* Associate the initialized DMA handle to the the UART handle */
  __HAL_LINKDMA(huart, hdmarx, hdma_rx);

  /*##-4- Configure the NVIC for DMA #########################################*/
  /* NVIC configuration for DMA transfer complete interrupt (USARTx_TX) */
  HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, 0, 1);
 8005462:	463a      	mov	r2, r7
 8005464:	4621      	mov	r1, r4
  __HAL_LINKDMA(huart, hdmarx, hdma_rx);
 8005466:	f8c8 5078 	str.w	r5, [r8, #120]	; 0x78
  HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, 0, 1);
 800546a:	202f      	movs	r0, #47	; 0x2f
  __HAL_LINKDMA(huart, hdmarx, hdma_rx);
 800546c:	f8c5 8038 	str.w	r8, [r5, #56]	; 0x38
  HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, 0, 1);
 8005470:	f005 f900 	bl	800a674 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 8005474:	202f      	movs	r0, #47	; 0x2f
 8005476:	f005 f933 	bl	800a6e0 <HAL_NVIC_EnableIRQ>

  /* NVIC configuration for DMA transfer complete interrupt (USARTx_RX) */
  HAL_NVIC_SetPriority(USARTx_DMA_RX_IRQn, 0, 0);
 800547a:	4622      	mov	r2, r4
 800547c:	4621      	mov	r1, r4
 800547e:	2010      	movs	r0, #16
 8005480:	f005 f8f8 	bl	800a674 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTx_DMA_RX_IRQn);
 8005484:	2010      	movs	r0, #16
 8005486:	f005 f92b 	bl	800a6e0 <HAL_NVIC_EnableIRQ>

  /* NVIC configuration for USART, to catch the TX complete */
  HAL_NVIC_SetPriority(USARTx_IRQn, 0, 1);
 800548a:	463a      	mov	r2, r7
 800548c:	4621      	mov	r1, r4
 800548e:	2025      	movs	r0, #37	; 0x25
 8005490:	f005 f8f0 	bl	800a674 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTx_IRQn);
 8005494:	2025      	movs	r0, #37	; 0x25
 8005496:	f005 f923 	bl	800a6e0 <HAL_NVIC_EnableIRQ>
}
 800549a:	b03d      	add	sp, #244	; 0xf4
 800549c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054a0:	58024400 	.word	0x58024400
 80054a4:	24003234 	.word	0x24003234
 80054a8:	400200b8 	.word	0x400200b8
 80054ac:	240031bc 	.word	0x240031bc
 80054b0:	58020000 	.word	0x58020000
 80054b4:	40020088 	.word	0x40020088

080054b8 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop

080054bc <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80054bc:	e7fe      	b.n	80054bc <HardFault_Handler>
 80054be:	bf00      	nop

080054c0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80054c0:	e7fe      	b.n	80054c0 <MemManage_Handler>
 80054c2:	bf00      	nop

080054c4 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80054c4:	e7fe      	b.n	80054c4 <BusFault_Handler>
 80054c6:	bf00      	nop

080054c8 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80054c8:	e7fe      	b.n	80054c8 <UsageFault_Handler>
 80054ca:	bf00      	nop

080054cc <SVC_Handler>:
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop

080054d0 <DebugMon_Handler>:
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop

080054d4 <PendSV_Handler>:
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop

080054d8 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 80054d8:	f005 b886 	b.w	800a5e8 <HAL_IncTick>

080054dc <DMA2_Stream3_IRQHandler>:
  * @param  None
  * @retval None
  */
void DMA2_Stream3_IRQHandler(void)
{
  BSP_CAMERA_DMA_IRQHandler(0);
 80054dc:	2000      	movs	r0, #0
 80054de:	f003 bf3f 	b.w	8009360 <BSP_CAMERA_DMA_IRQHandler>
 80054e2:	bf00      	nop

080054e4 <DCMI_IRQHandler>:
  * @param  None
  * @retval None
  */
void DCMI_IRQHandler(void)
{
   BSP_CAMERA_IRQHandler(0);
 80054e4:	2000      	movs	r0, #0
 80054e6:	f003 bf35 	b.w	8009354 <BSP_CAMERA_IRQHandler>
 80054ea:	bf00      	nop

080054ec <MDMA_IRQHandler>:
  * @param  None
  * @retval None
  */
void MDMA_IRQHandler(void)
{
  HAL_MDMA_IRQHandler(&hmdma);
 80054ec:	4801      	ldr	r0, [pc, #4]	; (80054f4 <MDMA_IRQHandler+0x8>)
 80054ee:	f008 be9b 	b.w	800e228 <HAL_MDMA_IRQHandler>
 80054f2:	bf00      	nop
 80054f4:	240043d0 	.word	0x240043d0

080054f8 <DSI_IRQHandler>:
  * @param  None
  * @retval None
  */
void DSI_IRQHandler(void)
{
  HAL_DSI_IRQHandler(&hlcd_dsi);
 80054f8:	4801      	ldr	r0, [pc, #4]	; (8005500 <DSI_IRQHandler+0x8>)
 80054fa:	f007 bacf 	b.w	800ca9c <HAL_DSI_IRQHandler>
 80054fe:	bf00      	nop
 8005500:	2400531c 	.word	0x2400531c

08005504 <DMA2D_IRQHandler>:
  * @param  None
  * @retval None
  */
void DMA2D_IRQHandler(void)
{
  HAL_DMA2D_IRQHandler(&hlcd_dma2d);
 8005504:	4801      	ldr	r0, [pc, #4]	; (800550c <DMA2D_IRQHandler+0x8>)
 8005506:	f007 b90f 	b.w	800c728 <HAL_DMA2D_IRQHandler>
 800550a:	bf00      	nop
 800550c:	24005338 	.word	0x24005338

08005510 <DMA1_Stream5_IRQHandler>:
  * @Note   This function is redefined in "main.h" and related to DMA stream
  *         used for USART data transmission
  */
void USARTx_DMA_RX_IRQHandler(void)
{
  HAL_DMA_IRQHandler(App_Context.Test_ContextPtr->UartContext.UartHandle.hdmarx);
 8005510:	4b02      	ldr	r3, [pc, #8]	; (800551c <DMA1_Stream5_IRQHandler+0xc>)
 8005512:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005514:	f8d3 0b34 	ldr.w	r0, [r3, #2868]	; 0xb34
 8005518:	f006 bc0c 	b.w	800bd34 <HAL_DMA_IRQHandler>
 800551c:	2400435c 	.word	0x2400435c

08005520 <DMA1_Stream7_IRQHandler>:
  * @Note   This function is redefined in "main.h" and related to DMA stream
  *         used for USART data reception
  */
void USARTx_DMA_TX_IRQHandler(void)
{
  HAL_DMA_IRQHandler(App_Context.Test_ContextPtr->UartContext.UartHandle.hdmatx);
 8005520:	4b02      	ldr	r3, [pc, #8]	; (800552c <DMA1_Stream7_IRQHandler+0xc>)
 8005522:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005524:	f8d3 0b30 	ldr.w	r0, [r3, #2864]	; 0xb30
 8005528:	f006 bc04 	b.w	800bd34 <HAL_DMA_IRQHandler>
 800552c:	2400435c 	.word	0x2400435c

08005530 <USART1_IRQHandler>:
  * @note   This function is redefined in "main.h" and related to DMA
  *         used for USART data transmission
  */
void USARTx_IRQHandler(void)
{
  HAL_UART_IRQHandler(&App_Context.Test_ContextPtr->UartContext.UartHandle);
 8005530:	4b02      	ldr	r3, [pc, #8]	; (800553c <USART1_IRQHandler+0xc>)
 8005532:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8005534:	f600 20bc 	addw	r0, r0, #2748	; 0xabc
 8005538:	f00c bdda 	b.w	80120f0 <HAL_UART_IRQHandler>
 800553c:	2400435c 	.word	0x2400435c

08005540 <LTDC_IRQHandler>:
  * @param  None
  * @retval None
  */
void LTDC_IRQHandler(void)
{
  HAL_LTDC_IRQHandler(&hlcd_ltdc);
 8005540:	4801      	ldr	r0, [pc, #4]	; (8005548 <LTDC_IRQHandler+0x8>)
 8005542:	f008 bc39 	b.w	800ddb8 <HAL_LTDC_IRQHandler>
 8005546:	bf00      	nop
 8005548:	24005258 	.word	0x24005258

0800554c <SystemInit>:
 */
void SystemInit(void)
{
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 800554c:	4988      	ldr	r1, [pc, #544]	; (8005770 <SystemInit+0x224>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800554e:	2200      	movs	r2, #0
  RCC->CR |= RCC_CR_HSION;
 8005550:	4b88      	ldr	r3, [pc, #544]	; (8005774 <SystemInit+0x228>)

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8005552:	4889      	ldr	r0, [pc, #548]	; (8005778 <SystemInit+0x22c>)
{
 8005554:	b4f0      	push	{r4, r5, r6, r7}
  SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8005556:	f8d1 4088 	ldr.w	r4, [r1, #136]	; 0x88
{
 800555a:	b082      	sub	sp, #8

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800555c:	4d87      	ldr	r5, [pc, #540]	; (800577c <SystemInit+0x230>)
  SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 800555e:	f444 0470 	orr.w	r4, r4, #15728640	; 0xf00000

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8005562:	4e87      	ldr	r6, [pc, #540]	; (8005780 <SystemInit+0x234>)
  SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8005564:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
  SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 8005568:	690c      	ldr	r4, [r1, #16]
 800556a:	f044 0404 	orr.w	r4, r4, #4
 800556e:	610c      	str	r4, [r1, #16]
  RCC->CR |= RCC_CR_HSION;
 8005570:	681c      	ldr	r4, [r3, #0]
  if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8005572:	4984      	ldr	r1, [pc, #528]	; (8005784 <SystemInit+0x238>)
  RCC->CR |= RCC_CR_HSION;
 8005574:	f044 0401 	orr.w	r4, r4, #1
 8005578:	601c      	str	r4, [r3, #0]
  RCC->CFGR = 0x00000000;
 800557a:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 800557c:	681c      	ldr	r4, [r3, #0]
 800557e:	4020      	ands	r0, r4
 8005580:	6018      	str	r0, [r3, #0]
  RCC->D1CFGR = 0x00000000;
 8005582:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8005584:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8005586:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x00000000;
 8005588:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x00000000;
 800558a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x00000000;
 800558c:	631a      	str	r2, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
 800558e:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x00000000;
 8005590:	639a      	str	r2, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
 8005592:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x00000000;
 8005594:	641a      	str	r2, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
 8005596:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
 8005598:	6818      	ldr	r0, [r3, #0]
 800559a:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 800559e:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 80055a0:	661a      	str	r2, [r3, #96]	; 0x60
  EXTI_D2->EMR3 |= 0x4000UL;
 80055a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80055a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055a8:	626b      	str	r3, [r5, #36]	; 0x24
  if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80055aa:	6833      	ldr	r3, [r6, #0]
 80055ac:	4019      	ands	r1, r3
 80055ae:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80055b2:	d202      	bcs.n	80055ba <SystemInit+0x6e>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x00000001U;
 80055b4:	4b74      	ldr	r3, [pc, #464]	; (8005788 <SystemInit+0x23c>)
 80055b6:	2201      	movs	r2, #1
 80055b8:	601a      	str	r2, [r3, #0]
 * @param  None
 * @retval None
 */
void SystemInit_ExtMemCtl(void)
{
  __IO uint32_t tmp = 0;
 80055ba:	2300      	movs	r3, #0
  register uint32_t tmpreg = 0, timeout = 0xFFFF;
  register __IO uint32_t index;

  /* Enable GPIOD, GPIOE, GPIOF, GPIOG, GPIOH and GPIOI interface
      clock */
  RCC->AHB4ENR |= 0x000001F8;
 80055bc:	486d      	ldr	r0, [pc, #436]	; (8005774 <SystemInit+0x228>)

  /* Delay after an RCC peripheral clock enabling */
  tmp = READ_BIT(RCC->AHB4ENR, RCC_AHB4ENR_GPIOEEN);

  /* Connect PDx pins to FMC Alternate function */
  GPIOD->AFR[0] = 0x000000CC;
 80055be:	4973      	ldr	r1, [pc, #460]	; (800578c <SystemInit+0x240>)
 80055c0:	f04f 0ccc 	mov.w	ip, #204	; 0xcc
  __IO uint32_t tmp = 0;
 80055c4:	9300      	str	r3, [sp, #0]
  /* Configure PDx pins in Pull-up */
  GPIOD->PUPDR = 0x50150005;

  /* Connect PEx pins to FMC Alternate function */
  GPIOE->AFR[0] = 0xC00000CC;
  GPIOE->AFR[1] = 0xCCCCCCCC;
 80055c6:	f04f 34cc 	mov.w	r4, #3435973836	; 0xcccccccc
  RCC->AHB4ENR |= 0x000001F8;
 80055ca:	f8d0 20e0 	ldr.w	r2, [r0, #224]	; 0xe0
  /* Configure PHx pins in Pull-up */
  GPIOH->PUPDR = 0x55555400;

  /* Connect PIx pins to FMC Alternate function */
  GPIOI->AFR[0] = 0xCCCCCCCC;
  GPIOI->AFR[1] = 0x00000CC0;
 80055ce:	f44f 654c 	mov.w	r5, #3264	; 0xcc0
  GPIOD->AFR[1] = 0xCC000CCC;
 80055d2:	4f6f      	ldr	r7, [pc, #444]	; (8005790 <SystemInit+0x244>)
  RCC->AHB4ENR |= 0x000001F8;
 80055d4:	f442 72fc 	orr.w	r2, r2, #504	; 0x1f8
  GPIOD->MODER = 0xAFEAFFFA;
 80055d8:	4e6e      	ldr	r6, [pc, #440]	; (8005794 <SystemInit+0x248>)
  RCC->AHB4ENR |= 0x000001F8;
 80055da:	f8c0 20e0 	str.w	r2, [r0, #224]	; 0xe0
  tmp = READ_BIT(RCC->AHB4ENR, RCC_AHB4ENR_GPIOEEN);
 80055de:	f8d0 20e0 	ldr.w	r2, [r0, #224]	; 0xe0
 80055e2:	f002 0210 	and.w	r2, r2, #16
 80055e6:	9200      	str	r2, [sp, #0]
  GPIOD->OSPEEDR = 0xF03F000F;
 80055e8:	4a6b      	ldr	r2, [pc, #428]	; (8005798 <SystemInit+0x24c>)
  GPIOD->AFR[0] = 0x000000CC;
 80055ea:	f8c1 c020 	str.w	ip, [r1, #32]
  GPIOD->AFR[1] = 0xCC000CCC;
 80055ee:	624f      	str	r7, [r1, #36]	; 0x24
  GPIOE->AFR[0] = 0xC00000CC;
 80055f0:	f1a7 270c 	sub.w	r7, r7, #201329664	; 0xc000c00
  GPIOD->MODER = 0xAFEAFFFA;
 80055f4:	600e      	str	r6, [r1, #0]
  GPIOD->OSPEEDR = 0xF03F000F;
 80055f6:	608a      	str	r2, [r1, #8]
  GPIOD->PUPDR = 0x50150005;
 80055f8:	4e68      	ldr	r6, [pc, #416]	; (800579c <SystemInit+0x250>)
  GPIOE->AFR[0] = 0xC00000CC;
 80055fa:	4a69      	ldr	r2, [pc, #420]	; (80057a0 <SystemInit+0x254>)
  GPIOD->OTYPER = 0x00000000;
 80055fc:	604b      	str	r3, [r1, #4]
  GPIOD->PUPDR = 0x50150005;
 80055fe:	60ce      	str	r6, [r1, #12]
  GPIOE->AFR[0] = 0xC00000CC;
 8005600:	6217      	str	r7, [r2, #32]
  GPIOE->MODER = 0xAAAABFFA;
 8005602:	4e68      	ldr	r6, [pc, #416]	; (80057a4 <SystemInit+0x258>)
  GPIOE->OSPEEDR = 0xFFFFC00F;
 8005604:	4968      	ldr	r1, [pc, #416]	; (80057a8 <SystemInit+0x25c>)
  GPIOE->PUPDR = 0x55554005;
 8005606:	4f69      	ldr	r7, [pc, #420]	; (80057ac <SystemInit+0x260>)
  GPIOE->AFR[1] = 0xCCCCCCCC;
 8005608:	6254      	str	r4, [r2, #36]	; 0x24
  GPIOE->MODER = 0xAAAABFFA;
 800560a:	6016      	str	r6, [r2, #0]
  GPIOE->OSPEEDR = 0xFFFFC00F;
 800560c:	6091      	str	r1, [r2, #8]
  GPIOF->AFR[0] = 0x00CCCCCC;
 800560e:	4e68      	ldr	r6, [pc, #416]	; (80057b0 <SystemInit+0x264>)
  GPIOE->OTYPER = 0x00000000;
 8005610:	6053      	str	r3, [r2, #4]
  GPIOF->AFR[0] = 0x00CCCCCC;
 8005612:	4968      	ldr	r1, [pc, #416]	; (80057b4 <SystemInit+0x268>)
  GPIOE->PUPDR = 0x55554005;
 8005614:	60d7      	str	r7, [r2, #12]
  GPIOF->AFR[1] = 0xCCCCC000;
 8005616:	4f68      	ldr	r7, [pc, #416]	; (80057b8 <SystemInit+0x26c>)
  GPIOF->MODER = 0xAABFFAAA;
 8005618:	4a68      	ldr	r2, [pc, #416]	; (80057bc <SystemInit+0x270>)
  GPIOF->AFR[0] = 0x00CCCCCC;
 800561a:	620e      	str	r6, [r1, #32]
  GPIOF->AFR[1] = 0xCCCCC000;
 800561c:	624f      	str	r7, [r1, #36]	; 0x24
  GPIOF->MODER = 0xAABFFAAA;
 800561e:	600a      	str	r2, [r1, #0]
  GPIOF->OSPEEDR = 0xFFC00FFF;
 8005620:	4a67      	ldr	r2, [pc, #412]	; (80057c0 <SystemInit+0x274>)
  GPIOF->PUPDR = 0x55400555;
 8005622:	4f68      	ldr	r7, [pc, #416]	; (80057c4 <SystemInit+0x278>)
  GPIOF->OSPEEDR = 0xFFC00FFF;
 8005624:	608a      	str	r2, [r1, #8]
  GPIOG->AFR[0] = 0x00CCCCCC;
 8005626:	4a68      	ldr	r2, [pc, #416]	; (80057c8 <SystemInit+0x27c>)
  GPIOF->OTYPER = 0x00000000;
 8005628:	604b      	str	r3, [r1, #4]
  GPIOF->PUPDR = 0x55400555;
 800562a:	60cf      	str	r7, [r1, #12]
    WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE
    SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2
    ReadBurst          = FMC_SDRAM_RBURST_ENABLE
    ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0*/

  FMC_Bank5_6_R->SDCR[0] = 0x00001800;
 800562c:	f44f 57c0 	mov.w	r7, #6144	; 0x1800
  GPIOG->AFR[0] = 0x00CCCCCC;
 8005630:	6216      	str	r6, [r2, #32]
  GPIOG->MODER = 0xBFFEFAAA;
 8005632:	4966      	ldr	r1, [pc, #408]	; (80057cc <SystemInit+0x280>)
  GPIOG->AFR[1] = 0xC000000C;
 8005634:	4e66      	ldr	r6, [pc, #408]	; (80057d0 <SystemInit+0x284>)
 8005636:	6256      	str	r6, [r2, #36]	; 0x24
  GPIOG->MODER = 0xBFFEFAAA;
 8005638:	6011      	str	r1, [r2, #0]
  GPIOG->OSPEEDR = 0xC0030FFF;
 800563a:	f501 2182 	add.w	r1, r1, #266240	; 0x41000
  GPIOG->PUPDR = 0x40010555;
 800563e:	4e65      	ldr	r6, [pc, #404]	; (80057d4 <SystemInit+0x288>)
  GPIOG->OSPEEDR = 0xC0030FFF;
 8005640:	f201 5155 	addw	r1, r1, #1365	; 0x555
 8005644:	6091      	str	r1, [r2, #8]
  GPIOH->AFR[0] = 0xCCC00000;
 8005646:	4964      	ldr	r1, [pc, #400]	; (80057d8 <SystemInit+0x28c>)
  GPIOG->OTYPER = 0x00000000;
 8005648:	6053      	str	r3, [r2, #4]
  GPIOG->PUPDR = 0x40010555;
 800564a:	60d6      	str	r6, [r2, #12]
  GPIOH->AFR[0] = 0xCCC00000;
 800564c:	4a63      	ldr	r2, [pc, #396]	; (80057dc <SystemInit+0x290>)
  GPIOH->MODER = 0xAAAAABFF;
 800564e:	4e64      	ldr	r6, [pc, #400]	; (80057e0 <SystemInit+0x294>)
  GPIOH->AFR[0] = 0xCCC00000;
 8005650:	620a      	str	r2, [r1, #32]
  GPIOH->OSPEEDR = 0xFFFFFC00;
 8005652:	4a64      	ldr	r2, [pc, #400]	; (80057e4 <SystemInit+0x298>)
  GPIOH->AFR[1] = 0xCCCCCCCC;
 8005654:	624c      	str	r4, [r1, #36]	; 0x24
  GPIOH->MODER = 0xAAAAABFF;
 8005656:	600e      	str	r6, [r1, #0]
  GPIOH->OSPEEDR = 0xFFFFFC00;
 8005658:	608a      	str	r2, [r1, #8]
  GPIOH->PUPDR = 0x55555400;
 800565a:	4e63      	ldr	r6, [pc, #396]	; (80057e8 <SystemInit+0x29c>)
  GPIOI->AFR[0] = 0xCCCCCCCC;
 800565c:	4a63      	ldr	r2, [pc, #396]	; (80057ec <SystemInit+0x2a0>)
  GPIOH->OTYPER = 0x00000000;
 800565e:	604b      	str	r3, [r1, #4]
  GPIOH->PUPDR = 0x55555400;
 8005660:	60ce      	str	r6, [r1, #12]
  FMC_Bank5_6_R->SDCR[1] = 0x00000165;
 8005662:	f240 1665 	movw	r6, #357	; 0x165
  GPIOI->AFR[0] = 0xCCCCCCCC;
 8005666:	6214      	str	r4, [r2, #32]
  FMC_Bank5_6_R->SDTR[0] = 0x00105000;
  FMC_Bank5_6_R->SDTR[1] = 0x01010351;

  /* SDRAM initialization sequence */
  /* Clock enable command */
  FMC_Bank5_6_R->SDCMR = 0x00000009;
 8005668:	2409      	movs	r4, #9
  GPIOI->AFR[1] = 0x00000CC0;
 800566a:	6255      	str	r5, [r2, #36]	; 0x24
  GPIOI->MODER = 0xFFEBAAAA;
 800566c:	f5a5 15a3 	sub.w	r5, r5, #1335296	; 0x146000
  GPIOI->OSPEEDR = 0x003CFFFF;
 8005670:	495f      	ldr	r1, [pc, #380]	; (80057f0 <SystemInit+0x2a4>)
  GPIOI->MODER = 0xFFEBAAAA;
 8005672:	f2a5 2516 	subw	r5, r5, #534	; 0x216
 8005676:	6015      	str	r5, [r2, #0]
  GPIOI->OSPEEDR = 0x003CFFFF;
 8005678:	6091      	str	r1, [r2, #8]
  GPIOI->PUPDR = 0x00145555;
 800567a:	495e      	ldr	r1, [pc, #376]	; (80057f4 <SystemInit+0x2a8>)
  GPIOI->OTYPER = 0x00000000;
 800567c:	6053      	str	r3, [r2, #4]
  GPIOI->PUPDR = 0x00145555;
 800567e:	60d1      	str	r1, [r2, #12]
  (RCC->AHB3ENR |= (RCC_AHB3ENR_FMCEN));
 8005680:	f8d0 30d4 	ldr.w	r3, [r0, #212]	; 0xd4
  FMC_Bank5_6_R->SDCR[0] = 0x00001800;
 8005684:	495c      	ldr	r1, [pc, #368]	; (80057f8 <SystemInit+0x2ac>)
  (RCC->AHB3ENR |= (RCC_AHB3ENR_FMCEN));
 8005686:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  FMC_Bank5_6_R->SDTR[0] = 0x00105000;
 800568a:	4d5c      	ldr	r5, [pc, #368]	; (80057fc <SystemInit+0x2b0>)
  FMC_Bank5_6_R->SDTR[1] = 0x01010351;
 800568c:	4a5c      	ldr	r2, [pc, #368]	; (8005800 <SystemInit+0x2b4>)
  (RCC->AHB3ENR |= (RCC_AHB3ENR_FMCEN));
 800568e:	f8c0 30d4 	str.w	r3, [r0, #212]	; 0xd4
  FMC_Bank5_6_R->SDCR[0] = 0x00001800;
 8005692:	600f      	str	r7, [r1, #0]
  FMC_Bank5_6_R->SDCR[1] = 0x00000165;
 8005694:	604e      	str	r6, [r1, #4]
  FMC_Bank5_6_R->SDTR[0] = 0x00105000;
 8005696:	608d      	str	r5, [r1, #8]
  FMC_Bank5_6_R->SDTR[1] = 0x01010351;
 8005698:	60ca      	str	r2, [r1, #12]
  FMC_Bank5_6_R->SDCMR = 0x00000009;
 800569a:	610c      	str	r4, [r1, #16]
  tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 800569c:	698b      	ldr	r3, [r1, #24]
  while ((tmpreg != 0) && (timeout-- > 0))
 800569e:	f013 0320 	ands.w	r3, r3, #32
 80056a2:	d008      	beq.n	80056b6 <SystemInit+0x16a>
 80056a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056a8:	e001      	b.n	80056ae <SystemInit+0x162>
 80056aa:	3a01      	subs	r2, #1
 80056ac:	d054      	beq.n	8005758 <SystemInit+0x20c>
  {
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 80056ae:	698b      	ldr	r3, [r1, #24]
  while ((tmpreg != 0) && (timeout-- > 0))
 80056b0:	f013 0320 	ands.w	r3, r3, #32
 80056b4:	d1f9      	bne.n	80056aa <SystemInit+0x15e>
  }

  /* Delay */
  for (index = 0; index < 1000; index++)
 80056b6:	9301      	str	r3, [sp, #4]
 80056b8:	9b01      	ldr	r3, [sp, #4]
 80056ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056be:	d253      	bcs.n	8005768 <SystemInit+0x21c>
  while ((tmpreg != 0) && (timeout-- > 0))
 80056c0:	2300      	movs	r3, #0
  for (index = 0; index < 1000; index++)
 80056c2:	9a01      	ldr	r2, [sp, #4]
 80056c4:	3201      	adds	r2, #1
 80056c6:	9201      	str	r2, [sp, #4]
 80056c8:	9a01      	ldr	r2, [sp, #4]
 80056ca:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80056ce:	d3f8      	bcc.n	80056c2 <SystemInit+0x176>
    ;

  /* PALL command */
  FMC_Bank5_6_R->SDCMR = 0x0000000A;
 80056d0:	4a49      	ldr	r2, [pc, #292]	; (80057f8 <SystemInit+0x2ac>)
 80056d2:	210a      	movs	r1, #10
 80056d4:	6111      	str	r1, [r2, #16]
  timeout = 0xFFFF;
  while ((tmpreg != 0) && (timeout-- > 0))
 80056d6:	b143      	cbz	r3, 80056ea <SystemInit+0x19e>
  while ((tmpreg != 0) && (timeout-- > 0))
 80056d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
  {
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 80056dc:	4846      	ldr	r0, [pc, #280]	; (80057f8 <SystemInit+0x2ac>)
 80056de:	e001      	b.n	80056e4 <SystemInit+0x198>
  while ((tmpreg != 0) && (timeout-- > 0))
 80056e0:	3b01      	subs	r3, #1
 80056e2:	d01f      	beq.n	8005724 <SystemInit+0x1d8>
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 80056e4:	6982      	ldr	r2, [r0, #24]
  while ((tmpreg != 0) && (timeout-- > 0))
 80056e6:	0694      	lsls	r4, r2, #26
 80056e8:	d4fa      	bmi.n	80056e0 <SystemInit+0x194>
  }

  FMC_Bank5_6_R->SDCMR = 0x000000EB;
 80056ea:	4b43      	ldr	r3, [pc, #268]	; (80057f8 <SystemInit+0x2ac>)
 80056ec:	22eb      	movs	r2, #235	; 0xeb
 80056ee:	611a      	str	r2, [r3, #16]
  while ((tmpreg != 0) && (timeout-- > 0))
  {
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
  }

  FMC_Bank5_6_R->SDCMR = 0x0004400C;
 80056f0:	4b41      	ldr	r3, [pc, #260]	; (80057f8 <SystemInit+0x2ac>)
 80056f2:	4a44      	ldr	r2, [pc, #272]	; (8005804 <SystemInit+0x2b8>)
 80056f4:	611a      	str	r2, [r3, #16]
  while ((tmpreg != 0) && (timeout-- > 0))
  {
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
  }
  /* Set refresh count */
  tmpreg = FMC_Bank5_6_R->SDRTR;
 80056f6:	4b40      	ldr	r3, [pc, #256]	; (80057f8 <SystemInit+0x2ac>)
  FMC_Bank5_6_R->SDRTR = (tmpreg | (0x00000603 << 1));
 80056f8:	f640 4206 	movw	r2, #3078	; 0xc06
  /* Disable write protection */
  tmpreg = FMC_Bank5_6_R->SDCR[1];
  FMC_Bank5_6_R->SDCR[1] = (tmpreg & 0xFFFFFDFF);

  /*FMC controller Enable*/
  FMC_Bank1_R->BTCR[0] |= 0x80000000;
 80056fc:	4942      	ldr	r1, [pc, #264]	; (8005808 <SystemInit+0x2bc>)
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80056fe:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  tmpreg = FMC_Bank5_6_R->SDRTR;
 8005702:	695d      	ldr	r5, [r3, #20]
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005704:	481a      	ldr	r0, [pc, #104]	; (8005770 <SystemInit+0x224>)
  FMC_Bank5_6_R->SDRTR = (tmpreg | (0x00000603 << 1));
 8005706:	432a      	orrs	r2, r5
 8005708:	615a      	str	r2, [r3, #20]
  tmpreg = FMC_Bank5_6_R->SDCR[1];
 800570a:	685a      	ldr	r2, [r3, #4]
  FMC_Bank5_6_R->SDCR[1] = (tmpreg & 0xFFFFFDFF);
 800570c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005710:	605a      	str	r2, [r3, #4]
  FMC_Bank1_R->BTCR[0] |= 0x80000000;
 8005712:	680b      	ldr	r3, [r1, #0]
 8005714:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005718:	600b      	str	r3, [r1, #0]

  (void)(tmp);
 800571a:	9b00      	ldr	r3, [sp, #0]
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800571c:	6084      	str	r4, [r0, #8]
}
 800571e:	b002      	add	sp, #8
 8005720:	bcf0      	pop	{r4, r5, r6, r7}
 8005722:	4770      	bx	lr
  FMC_Bank5_6_R->SDCMR = 0x000000EB;
 8005724:	22eb      	movs	r2, #235	; 0xeb
 8005726:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 800572a:	4933      	ldr	r1, [pc, #204]	; (80057f8 <SystemInit+0x2ac>)
  FMC_Bank5_6_R->SDCMR = 0x000000EB;
 800572c:	6102      	str	r2, [r0, #16]
 800572e:	e001      	b.n	8005734 <SystemInit+0x1e8>
  while ((tmpreg != 0) && (timeout-- > 0))
 8005730:	3b01      	subs	r3, #1
 8005732:	d005      	beq.n	8005740 <SystemInit+0x1f4>
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 8005734:	698a      	ldr	r2, [r1, #24]
  while ((tmpreg != 0) && (timeout-- > 0))
 8005736:	0690      	lsls	r0, r2, #26
 8005738:	d4fa      	bmi.n	8005730 <SystemInit+0x1e4>
  FMC_Bank5_6_R->SDCMR = 0x0004400C;
 800573a:	4b32      	ldr	r3, [pc, #200]	; (8005804 <SystemInit+0x2b8>)
 800573c:	610b      	str	r3, [r1, #16]
 800573e:	e7da      	b.n	80056f6 <SystemInit+0x1aa>
 8005740:	4a30      	ldr	r2, [pc, #192]	; (8005804 <SystemInit+0x2b8>)
 8005742:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 8005746:	482c      	ldr	r0, [pc, #176]	; (80057f8 <SystemInit+0x2ac>)
  FMC_Bank5_6_R->SDCMR = 0x0004400C;
 8005748:	610a      	str	r2, [r1, #16]
 800574a:	e001      	b.n	8005750 <SystemInit+0x204>
  while ((tmpreg != 0) && (timeout-- > 0))
 800574c:	3b01      	subs	r3, #1
 800574e:	d0d2      	beq.n	80056f6 <SystemInit+0x1aa>
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 8005750:	6982      	ldr	r2, [r0, #24]
  while ((tmpreg != 0) && (timeout-- > 0))
 8005752:	0692      	lsls	r2, r2, #26
 8005754:	d5cf      	bpl.n	80056f6 <SystemInit+0x1aa>
 8005756:	e7f9      	b.n	800574c <SystemInit+0x200>
  for (index = 0; index < 1000; index++)
 8005758:	9201      	str	r2, [sp, #4]
 800575a:	9a01      	ldr	r2, [sp, #4]
 800575c:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8005760:	d3af      	bcc.n	80056c2 <SystemInit+0x176>
  FMC_Bank5_6_R->SDCMR = 0x0000000A;
 8005762:	230a      	movs	r3, #10
 8005764:	610b      	str	r3, [r1, #16]
 8005766:	e7b7      	b.n	80056d8 <SystemInit+0x18c>
 8005768:	230a      	movs	r3, #10
 800576a:	610b      	str	r3, [r1, #16]
 800576c:	e7bd      	b.n	80056ea <SystemInit+0x19e>
 800576e:	bf00      	nop
 8005770:	e000ed00 	.word	0xe000ed00
 8005774:	58024400 	.word	0x58024400
 8005778:	eaf6ed7f 	.word	0xeaf6ed7f
 800577c:	580000c0 	.word	0x580000c0
 8005780:	5c001000 	.word	0x5c001000
 8005784:	ffff0000 	.word	0xffff0000
 8005788:	51008108 	.word	0x51008108
 800578c:	58020c00 	.word	0x58020c00
 8005790:	cc000ccc 	.word	0xcc000ccc
 8005794:	afeafffa 	.word	0xafeafffa
 8005798:	f03f000f 	.word	0xf03f000f
 800579c:	50150005 	.word	0x50150005
 80057a0:	58021000 	.word	0x58021000
 80057a4:	aaaabffa 	.word	0xaaaabffa
 80057a8:	ffffc00f 	.word	0xffffc00f
 80057ac:	55554005 	.word	0x55554005
 80057b0:	00cccccc 	.word	0x00cccccc
 80057b4:	58021400 	.word	0x58021400
 80057b8:	ccccc000 	.word	0xccccc000
 80057bc:	aabffaaa 	.word	0xaabffaaa
 80057c0:	ffc00fff 	.word	0xffc00fff
 80057c4:	55400555 	.word	0x55400555
 80057c8:	58021800 	.word	0x58021800
 80057cc:	bffefaaa 	.word	0xbffefaaa
 80057d0:	c000000c 	.word	0xc000000c
 80057d4:	40010555 	.word	0x40010555
 80057d8:	58021c00 	.word	0x58021c00
 80057dc:	ccc00000 	.word	0xccc00000
 80057e0:	aaaaabff 	.word	0xaaaaabff
 80057e4:	fffffc00 	.word	0xfffffc00
 80057e8:	55555400 	.word	0x55555400
 80057ec:	58022000 	.word	0x58022000
 80057f0:	003cffff 	.word	0x003cffff
 80057f4:	00145555 	.word	0x00145555
 80057f8:	52004140 	.word	0x52004140
 80057fc:	00105000 	.word	0x00105000
 8005800:	01010351 	.word	0x01010351
 8005804:	0004400c 	.word	0x0004400c
 8005808:	52004000 	.word	0x52004000

0800580c <MT25TL01G_GetFlashInfo>:
  * @brief  Return the configuration of the QSPI memory.
  * @param  pInfo pointer on the configuration structure
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
 800580c:	b430      	push	{r4, r5}
 800580e:	4603      	mov	r3, r0
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 8005810:	f44f 5500 	mov.w	r5, #8192	; 0x2000
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
 8005814:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
 8005818:	f44f 7480 	mov.w	r4, #256	; 0x100
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 800581c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 8005820:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
 8005824:	6018      	str	r0, [r3, #0]
  return MT25TL01G_OK;
}
 8005826:	2000      	movs	r0, #0
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 8005828:	605d      	str	r5, [r3, #4]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 800582a:	611a      	str	r2, [r3, #16]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 800582c:	e9c3 1402 	strd	r1, r4, [r3, #8]
}
 8005830:	bc30      	pop	{r4, r5}
 8005832:	4770      	bx	lr

08005834 <MT25TL01G_Enter4BytesAddressMode>:
int32_t MT25TL01G_Enter4BytesAddressMode(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005834:	2903      	cmp	r1, #3
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 8005836:	f04f 02b7 	mov.w	r2, #183	; 0xb7
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800583a:	f04f 0300 	mov.w	r3, #0
{
 800583e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005842:	b0a3      	sub	sp, #140	; 0x8c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005844:	bf0c      	ite	eq
 8005846:	f44f 7440 	moveq.w	r4, #768	; 0x300
 800584a:	f44f 7480 	movne.w	r4, #256	; 0x100
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;

  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 800584e:	2606      	movs	r6, #6
{
 8005850:	460d      	mov	r5, r1
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 8005852:	9206      	str	r2, [sp, #24]
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005854:	a914      	add	r1, sp, #80	; 0x50
 8005856:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800585a:	940c      	str	r4, [sp, #48]	; 0x30
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800585c:	941a      	str	r4, [sp, #104]	; 0x68
{
 800585e:	4604      	mov	r4, r0
  s_command.DataMode          = QSPI_DATA_NONE;
 8005860:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DummyCycles       = 0;
 8005862:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005864:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DataMode          = QSPI_DATA_NONE;
 8005866:	931d      	str	r3, [sp, #116]	; 0x74
  s_command.DummyCycles       = 0;
 8005868:	9319      	str	r3, [sp, #100]	; 0x64
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800586a:	9321      	str	r3, [sp, #132]	; 0x84
  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 800586c:	9614      	str	r6, [sp, #80]	; 0x50
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800586e:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005872:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005876:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800587a:	e9cd 331f 	strd	r3, r3, [sp, #124]	; 0x7c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800587e:	f008 fefb 	bl	800e678 <HAL_QSPI_Command>
 8005882:	2800      	cmp	r0, #0
 8005884:	d150      	bne.n	8005928 <MT25TL01G_Enter4BytesAddressMode+0xf4>
  s_config.StatusBytesSize = 2;
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8005886:	2d03      	cmp	r5, #3
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8005888:	f240 2602 	movw	r6, #514	; 0x202
  s_config.StatusBytesSize = 2;
 800588c:	f04f 0502 	mov.w	r5, #2
  s_config.Interval        = 0x10;
 8005890:	f04f 0810 	mov.w	r8, #16
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8005894:	bf0c      	ite	eq
 8005896:	f04f 7c40 	moveq.w	ip, #50331648	; 0x3000000
 800589a:	f04f 7c80 	movne.w	ip, #16777216	; 0x1000000
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800589e:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 80058a2:	f04f 0905 	mov.w	r9, #5
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80058a6:	9004      	str	r0, [sp, #16]


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80058a8:	466a      	mov	r2, sp
 80058aa:	f241 3388 	movw	r3, #5000	; 0x1388
 80058ae:	a914      	add	r1, sp, #80	; 0x50
 80058b0:	4620      	mov	r0, r4
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 80058b2:	f8cd c074 	str.w	ip, [sp, #116]	; 0x74
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80058b6:	9705      	str	r7, [sp, #20]
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 80058b8:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 80058bc:	e9cd 6600 	strd	r6, r6, [sp]
  s_config.Interval        = 0x10;
 80058c0:	e9cd 8502 	strd	r8, r5, [sp, #8]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80058c4:	f009 f830 	bl	800e928 <HAL_QSPI_AutoPolling>
 80058c8:	bb70      	cbnz	r0, 8005928 <MT25TL01G_Enter4BytesAddressMode+0xf4>
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80058ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80058ce:	a906      	add	r1, sp, #24
 80058d0:	4620      	mov	r0, r4
 80058d2:	f008 fed1 	bl	800e678 <HAL_QSPI_Command>
 80058d6:	4603      	mov	r3, r0
 80058d8:	bb30      	cbnz	r0, 8005928 <MT25TL01G_Enter4BytesAddressMode+0xf4>
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80058da:	f44f 7c40 	mov.w	ip, #768	; 0x300
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80058de:	4620      	mov	r0, r4
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80058e0:	f04f 7640 	mov.w	r6, #50331648	; 0x3000000
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 80058e4:	f240 1401 	movw	r4, #257	; 0x101
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80058e8:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80058ea:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80058ec:	931c      	str	r3, [sp, #112]	; 0x70
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80058ee:	a914      	add	r1, sp, #80	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80058f0:	9321      	str	r3, [sp, #132]	; 0x84
  s_config.Match           = 0;
 80058f2:	9300      	str	r3, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80058f4:	9304      	str	r3, [sp, #16]
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 80058f6:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
  s_command.DummyCycles       = 2;
 80058fa:	9519      	str	r5, [sp, #100]	; 0x64
  s_config.Interval        = 0x10;
 80058fc:	f8cd 8008 	str.w	r8, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8005900:	9705      	str	r7, [sp, #20]
  s_config.StatusBytesSize = 2;
 8005902:	9503      	str	r5, [sp, #12]
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8005904:	f8cd c068 	str.w	ip, [sp, #104]	; 0x68
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8005908:	961d      	str	r6, [sp, #116]	; 0x74
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 800590a:	9401      	str	r4, [sp, #4]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800590c:	e9cd 331f 	strd	r3, r3, [sp, #124]	; 0x7c
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005910:	f241 3388 	movw	r3, #5000	; 0x1388
 8005914:	f009 f808 	bl	800e928 <HAL_QSPI_AutoPolling>
 8005918:	2800      	cmp	r0, #0
  return MT25TL01G_OK;
 800591a:	bf14      	ite	ne
 800591c:	f06f 0001 	mvnne.w	r0, #1
 8005920:	2000      	moveq	r0, #0
}
 8005922:	b023      	add	sp, #140	; 0x8c
 8005924:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return MT25TL01G_ERROR_COMMAND;
 8005928:	f06f 0001 	mvn.w	r0, #1
 800592c:	e7f9      	b.n	8005922 <MT25TL01G_Enter4BytesAddressMode+0xee>
 800592e:	bf00      	nop

08005930 <MT25TL01G_AutoPollingMemReady>:
{
 8005930:	b570      	push	{r4, r5, r6, lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8005932:	f44f 7540 	mov.w	r5, #768	; 0x300
{
 8005936:	b094      	sub	sp, #80	; 0x50
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8005938:	2405      	movs	r4, #5
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800593a:	2300      	movs	r3, #0
  s_command.DummyCycles       = 2;
 800593c:	2102      	movs	r1, #2
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800593e:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8005942:	950c      	str	r5, [sp, #48]	; 0x30
  s_config.Interval        = 0x10;
 8005944:	2610      	movs	r6, #16
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8005946:	9406      	str	r4, [sp, #24]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8005948:	f44f 0580 	mov.w	r5, #4194304	; 0x400000
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 800594c:	f240 1401 	movw	r4, #257	; 0x101
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005950:	9313      	str	r3, [sp, #76]	; 0x4c
  s_config.Match           = 0;
 8005952:	9300      	str	r3, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8005954:	9304      	str	r3, [sp, #16]
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8005956:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005958:	466a      	mov	r2, sp
  s_command.DummyCycles       = 2;
 800595a:	910b      	str	r1, [sp, #44]	; 0x2c
  s_config.StatusBytesSize = 2;
 800595c:	9103      	str	r1, [sp, #12]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800595e:	a906      	add	r1, sp, #24
  s_config.Interval        = 0x10;
 8005960:	9602      	str	r6, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8005962:	9505      	str	r5, [sp, #20]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 8005964:	9401      	str	r4, [sp, #4]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005966:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800596a:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800596e:	f241 3388 	movw	r3, #5000	; 0x1388
 8005972:	f008 ffd9 	bl	800e928 <HAL_QSPI_AutoPolling>
 8005976:	2800      	cmp	r0, #0
}
 8005978:	bf14      	ite	ne
 800597a:	f06f 0004 	mvnne.w	r0, #4
 800597e:	2000      	moveq	r0, #0
 8005980:	b014      	add	sp, #80	; 0x50
 8005982:	bd70      	pop	{r4, r5, r6, pc}

08005984 <MT25TL01G_WriteEnable>:
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005984:	2903      	cmp	r1, #3
  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 8005986:	f04f 0206 	mov.w	r2, #6
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800598a:	f04f 0300 	mov.w	r3, #0
{
 800598e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005990:	b095      	sub	sp, #84	; 0x54
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005992:	bf0c      	ite	eq
 8005994:	f44f 7540 	moveq.w	r5, #768	; 0x300
 8005998:	f44f 7580 	movne.w	r5, #256	; 0x100
{
 800599c:	460c      	mov	r4, r1
  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 800599e:	9206      	str	r2, [sp, #24]
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80059a0:	a906      	add	r1, sp, #24
 80059a2:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80059a6:	950c      	str	r5, [sp, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_NONE;
 80059a8:	930f      	str	r3, [sp, #60]	; 0x3c
{
 80059aa:	4605      	mov	r5, r0
  s_command.DummyCycles       = 0;
 80059ac:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80059ae:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80059b0:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80059b4:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80059b8:	f008 fe5e 	bl	800e678 <HAL_QSPI_Command>
 80059bc:	bb18      	cbnz	r0, 8005a06 <MT25TL01G_WriteEnable+0x82>
 80059be:	4603      	mov	r3, r0
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 80059c0:	2c03      	cmp	r4, #3
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 80059c2:	f240 2202 	movw	r2, #514	; 0x202
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80059c6:	4628      	mov	r0, r5
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80059c8:	9304      	str	r3, [sp, #16]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 80059ca:	bf0c      	ite	eq
 80059cc:	f04f 7340 	moveq.w	r3, #50331648	; 0x3000000
 80059d0:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  s_config.StatusBytesSize = 2;
 80059d4:	2702      	movs	r7, #2
  s_config.Interval        = 0x10;
 80059d6:	2610      	movs	r6, #16
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80059d8:	f44f 0580 	mov.w	r5, #4194304	; 0x400000
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 80059dc:	2405      	movs	r4, #5
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 80059de:	9200      	str	r2, [sp, #0]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 80059e0:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80059e2:	a906      	add	r1, sp, #24
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 80059e4:	9201      	str	r2, [sp, #4]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80059e6:	f241 3388 	movw	r3, #5000	; 0x1388
 80059ea:	466a      	mov	r2, sp
  s_config.StatusBytesSize = 2;
 80059ec:	9703      	str	r7, [sp, #12]
  s_config.Interval        = 0x10;
 80059ee:	9602      	str	r6, [sp, #8]
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 80059f0:	e9cd 5405 	strd	r5, r4, [sp, #20]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80059f4:	f008 ff98 	bl	800e928 <HAL_QSPI_AutoPolling>
 80059f8:	2800      	cmp	r0, #0
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 80059fa:	bf14      	ite	ne
 80059fc:	f06f 0004 	mvnne.w	r0, #4
 8005a00:	2000      	moveq	r0, #0
}
 8005a02:	b015      	add	sp, #84	; 0x54
 8005a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return MT25TL01G_ERROR_COMMAND;
 8005a06:	f06f 0001 	mvn.w	r0, #1
 8005a0a:	e7fa      	b.n	8005a02 <MT25TL01G_WriteEnable+0x7e>

08005a0c <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8005a0c:	b530      	push	{r4, r5, lr}
 8005a0e:	b08f      	sub	sp, #60	; 0x3c
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8005a10:	2300      	movs	r3, #0
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005a12:	f44f 7580 	mov.w	r5, #256	; 0x100
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8005a16:	2435      	movs	r4, #53	; 0x35
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a1c:	4669      	mov	r1, sp
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005a1e:	9506      	str	r5, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8005a20:	9400      	str	r4, [sp, #0]
  s_command.DataMode          = QSPI_DATA_NONE;
 8005a22:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 8005a24:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005a26:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005a28:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005a2c:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005a30:	f008 fe22 	bl	800e678 <HAL_QSPI_Command>
 8005a34:	2800      	cmp	r0, #0
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
}
 8005a36:	bf14      	ite	ne
 8005a38:	f06f 0001 	mvnne.w	r0, #1
 8005a3c:	2000      	moveq	r0, #0
 8005a3e:	b00f      	add	sp, #60	; 0x3c
 8005a40:	bd30      	pop	{r4, r5, pc}
 8005a42:	bf00      	nop

08005a44 <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8005a44:	b530      	push	{r4, r5, lr}
 8005a46:	b08f      	sub	sp, #60	; 0x3c
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8005a48:	2300      	movs	r3, #0
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005a4a:	f44f 7580 	mov.w	r5, #256	; 0x100
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8005a4e:	24f5      	movs	r4, #245	; 0xf5
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005a50:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a54:	4669      	mov	r1, sp
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005a56:	9506      	str	r5, [sp, #24]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8005a58:	9400      	str	r4, [sp, #0]
  s_command.DataMode          = QSPI_DATA_NONE;
 8005a5a:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 8005a5c:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005a5e:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005a60:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005a64:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005a68:	f008 fe06 	bl	800e678 <HAL_QSPI_Command>
 8005a6c:	2800      	cmp	r0, #0
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
}
 8005a6e:	bf14      	ite	ne
 8005a70:	f06f 0001 	mvnne.w	r0, #1
 8005a74:	2000      	moveq	r0, #0
 8005a76:	b00f      	add	sp, #60	; 0x3c
 8005a78:	bd30      	pop	{r4, r5, pc}
 8005a7a:	bf00      	nop

08005a7c <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8005a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a7e:	b091      	sub	sp, #68	; 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8005a80:	2903      	cmp	r1, #3
 8005a82:	d80e      	bhi.n	8005aa2 <MT25TL01G_EnableMemoryMappedModeDTR+0x26>
 8005a84:	e8df f001 	tbb	[pc, r1]
 8005a88:	022a2e3a 	.word	0x022a2e3a
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;

    break;
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8005a8c:	f44f 7440 	mov.w	r4, #768	; 0x300
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8005a90:	21ed      	movs	r1, #237	; 0xed
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8005a92:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8005a96:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8005a9a:	9408      	str	r4, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8005a9c:	9102      	str	r1, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8005a9e:	9209      	str	r2, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8005aa0:	930b      	str	r3, [sp, #44]	; 0x2c

    break;
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005aa2:	2300      	movs	r3, #0
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8005aa4:	aa10      	add	r2, sp, #64	; 0x40
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8005aa6:	2608      	movs	r6, #8
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8005aa8:	f44f 5740 	mov.w	r7, #12288	; 0x3000
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
 8005aac:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8005ab0:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8005ab4:	f842 3d40 	str.w	r3, [r2, #-64]!

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8005ab8:	eb0d 0106 	add.w	r1, sp, r6
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005abc:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005abe:	930f      	str	r3, [sp, #60]	; 0x3c
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8005ac0:	9301      	str	r3, [sp, #4]
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8005ac2:	9705      	str	r7, [sp, #20]
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8005ac4:	9607      	str	r6, [sp, #28]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8005ac6:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8005aca:	f008 ff99 	bl	800ea00 <HAL_QSPI_MemoryMapped>
 8005ace:	2800      	cmp	r0, #0
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
}
 8005ad0:	bf14      	ite	ne
 8005ad2:	f06f 0005 	mvnne.w	r0, #5
 8005ad6:	2000      	moveq	r0, #0
 8005ad8:	b011      	add	sp, #68	; 0x44
 8005ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005adc:	f44f 7480 	mov.w	r4, #256	; 0x100
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 8005ae0:	21ee      	movs	r1, #238	; 0xee
 8005ae2:	e7d6      	b.n	8005a92 <MT25TL01G_EnableMemoryMappedModeDTR+0x16>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005ae4:	f44f 7480 	mov.w	r4, #256	; 0x100
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 8005ae8:	213d      	movs	r1, #61	; 0x3d
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8005aea:	f44f 6280 	mov.w	r2, #1024	; 0x400
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8005aee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005af2:	9408      	str	r4, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 8005af4:	9102      	str	r1, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8005af6:	9209      	str	r2, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8005af8:	930b      	str	r3, [sp, #44]	; 0x2c
    break;
 8005afa:	e7d2      	b.n	8005aa2 <MT25TL01G_EnableMemoryMappedModeDTR+0x26>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005afc:	f44f 7480 	mov.w	r4, #256	; 0x100
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 8005b00:	210e      	movs	r1, #14
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8005b02:	f44f 6280 	mov.w	r2, #1024	; 0x400
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8005b06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005b0a:	9408      	str	r4, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 8005b0c:	9102      	str	r1, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8005b0e:	9209      	str	r2, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8005b10:	930b      	str	r3, [sp, #44]	; 0x2c
    break;
 8005b12:	e7c6      	b.n	8005aa2 <MT25TL01G_EnableMemoryMappedModeDTR+0x26>

08005b14 <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8005b14:	b530      	push	{r4, r5, lr}
 8005b16:	b091      	sub	sp, #68	; 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8005b18:	2903      	cmp	r1, #3
 8005b1a:	d80e      	bhi.n	8005b3a <MT25TL01G_EnableMemoryMappedModeSTR+0x26>
 8005b1c:	e8df f001 	tbb	[pc, r1]
 8005b20:	02262a36 	.word	0x02262a36
    s_command.DataMode          = QSPI_DATA_4_LINES;

    break;

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8005b24:	f44f 7440 	mov.w	r4, #768	; 0x300
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8005b28:	21eb      	movs	r1, #235	; 0xeb
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8005b2a:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8005b2e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8005b32:	9408      	str	r4, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8005b34:	9102      	str	r1, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8005b36:	9209      	str	r2, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8005b38:	930b      	str	r3, [sp, #44]	; 0x2c

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005b3a:	2300      	movs	r3, #0
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8005b3c:	aa10      	add	r2, sp, #64	; 0x40
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8005b3e:	2508      	movs	r5, #8
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8005b40:	f44f 5440 	mov.w	r4, #12288	; 0x3000
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8005b44:	f842 3d40 	str.w	r3, [r2, #-64]!

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8005b48:	eb0d 0105 	add.w	r1, sp, r5
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005b4c:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005b4e:	930f      	str	r3, [sp, #60]	; 0x3c
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8005b50:	9301      	str	r3, [sp, #4]
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8005b52:	9507      	str	r5, [sp, #28]
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8005b54:	9405      	str	r4, [sp, #20]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005b56:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8005b5a:	f008 ff51 	bl	800ea00 <HAL_QSPI_MemoryMapped>
 8005b5e:	2800      	cmp	r0, #0
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
}
 8005b60:	bf14      	ite	ne
 8005b62:	f06f 0005 	mvnne.w	r0, #5
 8005b66:	2000      	moveq	r0, #0
 8005b68:	b011      	add	sp, #68	; 0x44
 8005b6a:	bd30      	pop	{r4, r5, pc}
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005b6c:	f44f 7480 	mov.w	r4, #256	; 0x100
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8005b70:	21ec      	movs	r1, #236	; 0xec
 8005b72:	e7da      	b.n	8005b2a <MT25TL01G_EnableMemoryMappedModeSTR+0x16>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005b74:	f44f 7480 	mov.w	r4, #256	; 0x100
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8005b78:	21bc      	movs	r1, #188	; 0xbc
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 8005b7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8005b7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005b82:	9408      	str	r4, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8005b84:	9102      	str	r1, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 8005b86:	9209      	str	r2, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8005b88:	930b      	str	r3, [sp, #44]	; 0x2c
    break;
 8005b8a:	e7d6      	b.n	8005b3a <MT25TL01G_EnableMemoryMappedModeSTR+0x26>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005b8c:	f44f 7480 	mov.w	r4, #256	; 0x100
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 8005b90:	210c      	movs	r1, #12
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8005b92:	f44f 6280 	mov.w	r2, #1024	; 0x400
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8005b96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005b9a:	9408      	str	r4, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 8005b9c:	9102      	str	r1, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8005b9e:	9209      	str	r2, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8005ba0:	930b      	str	r3, [sp, #44]	; 0x2c
    break;
 8005ba2:	e7ca      	b.n	8005b3a <MT25TL01G_EnableMemoryMappedModeSTR+0x26>

08005ba4 <MT25TL01G_ResetEnable>:
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005ba4:	2903      	cmp	r1, #3
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8005ba6:	f04f 0300 	mov.w	r3, #0
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005baa:	f241 3288 	movw	r2, #5000	; 0x1388
{
 8005bae:	b530      	push	{r4, r5, lr}
 8005bb0:	b08f      	sub	sp, #60	; 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005bb2:	bf0c      	ite	eq
 8005bb4:	f44f 7440 	moveq.w	r4, #768	; 0x300
 8005bb8:	f44f 7480 	movne.w	r4, #256	; 0x100
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 8005bbc:	2566      	movs	r5, #102	; 0x66
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005bbe:	4669      	mov	r1, sp
  s_command.DummyCycles       = 0;
 8005bc0:	9305      	str	r3, [sp, #20]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 8005bc2:	9500      	str	r5, [sp, #0]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005bc4:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8005bc6:	e9cd 4306 	strd	r4, r3, [sp, #24]
  s_command.DataMode          = QSPI_DATA_NONE;
 8005bca:	e9cd 3308 	strd	r3, r3, [sp, #32]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005bce:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005bd2:	f008 fd51 	bl	800e678 <HAL_QSPI_Command>
 8005bd6:	2800      	cmp	r0, #0
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
}
 8005bd8:	bf14      	ite	ne
 8005bda:	f06f 0001 	mvnne.w	r0, #1
 8005bde:	2000      	moveq	r0, #0
 8005be0:	b00f      	add	sp, #60	; 0x3c
 8005be2:	bd30      	pop	{r4, r5, pc}

08005be4 <MT25TL01G_ResetMemory>:
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005be4:	2903      	cmp	r1, #3
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8005be6:	f04f 0300 	mov.w	r3, #0
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005bea:	f241 3288 	movw	r2, #5000	; 0x1388
{
 8005bee:	b530      	push	{r4, r5, lr}
 8005bf0:	b08f      	sub	sp, #60	; 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005bf2:	bf0c      	ite	eq
 8005bf4:	f44f 7440 	moveq.w	r4, #768	; 0x300
 8005bf8:	f44f 7480 	movne.w	r4, #256	; 0x100
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 8005bfc:	2599      	movs	r5, #153	; 0x99
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005bfe:	4669      	mov	r1, sp
  s_command.DummyCycles       = 0;
 8005c00:	9305      	str	r3, [sp, #20]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 8005c02:	9500      	str	r5, [sp, #0]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005c04:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8005c06:	e9cd 4306 	strd	r4, r3, [sp, #24]
  s_command.DataMode          = QSPI_DATA_NONE;
 8005c0a:	e9cd 3308 	strd	r3, r3, [sp, #32]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005c0e:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005c12:	f008 fd31 	bl	800e678 <HAL_QSPI_Command>
 8005c16:	2800      	cmp	r0, #0
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
}
 8005c18:	bf14      	ite	ne
 8005c1a:	f06f 0001 	mvnne.w	r0, #1
 8005c1e:	2000      	moveq	r0, #0
 8005c20:	b00f      	add	sp, #60	; 0x3c
 8005c22:	bd30      	pop	{r4, r5, pc}

08005c24 <OTM8009A_DeInit>:
  * @retval Component status
  */
int32_t OTM8009A_DeInit(OTM8009A_Object_t *pObj)
{
  return OTM8009A_ERROR;
}
 8005c24:	f04f 30ff 	mov.w	r0, #4294967295
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop

08005c2c <OTM8009A_GetBrightness>:
  * @param  Brightness   display brightness to be returned
  * @retval Component status
  */
int32_t OTM8009A_GetBrightness(OTM8009A_Object_t *pObj, uint32_t *Brightness)
{
  *Brightness = OTM8009ACtx.Brightness;
 8005c2c:	4b02      	ldr	r3, [pc, #8]	; (8005c38 <OTM8009A_GetBrightness+0xc>)
  return OTM8009A_OK;  
}
 8005c2e:	2000      	movs	r0, #0
  *Brightness = OTM8009ACtx.Brightness;
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	600b      	str	r3, [r1, #0]
}
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop
 8005c38:	240032ac 	.word	0x240032ac

08005c3c <OTM8009A_GetOrientation>:
int32_t OTM8009A_GetOrientation(OTM8009A_Object_t *pObj, uint32_t *Orientation)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  *Orientation = OTM8009ACtx.Orientation;
 8005c3c:	4b02      	ldr	r3, [pc, #8]	; (8005c48 <OTM8009A_GetOrientation+0xc>)
  
  return OTM8009A_OK;
}
 8005c3e:	2000      	movs	r0, #0
  *Orientation = OTM8009ACtx.Orientation;
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	600b      	str	r3, [r1, #0]
}
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	240032ac 	.word	0x240032ac

08005c4c <OTM8009A_GetXSize>:
int32_t OTM8009A_GetXSize(OTM8009A_Object_t *pObj, uint32_t *Xsize)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 8005c4c:	4b06      	ldr	r3, [pc, #24]	; (8005c68 <OTM8009A_GetXSize+0x1c>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	b123      	cbz	r3, 8005c5c <OTM8009A_GetXSize+0x10>
  {
  case OTM8009A_ORIENTATION_PORTRAIT:
    *Xsize = OTM8009A_480X800_WIDTH;
    break;
  case OTM8009A_ORIENTATION_LANDSCAPE:
    *Xsize = OTM8009A_800X480_WIDTH;
 8005c52:	f44f 7348 	mov.w	r3, #800	; 0x320
    *Xsize = OTM8009A_800X480_WIDTH;
    break;
  }
  
  return OTM8009A_OK;
}
 8005c56:	2000      	movs	r0, #0
    *Xsize = OTM8009A_800X480_WIDTH;
 8005c58:	600b      	str	r3, [r1, #0]
}
 8005c5a:	4770      	bx	lr
    *Xsize = OTM8009A_480X800_WIDTH;
 8005c5c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
}
 8005c60:	2000      	movs	r0, #0
    *Xsize = OTM8009A_480X800_WIDTH;
 8005c62:	600b      	str	r3, [r1, #0]
}
 8005c64:	4770      	bx	lr
 8005c66:	bf00      	nop
 8005c68:	240032ac 	.word	0x240032ac

08005c6c <OTM8009A_GetYSize>:
int32_t OTM8009A_GetYSize(OTM8009A_Object_t *pObj, uint32_t *Ysize)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 8005c6c:	4b06      	ldr	r3, [pc, #24]	; (8005c88 <OTM8009A_GetYSize+0x1c>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	b123      	cbz	r3, 8005c7c <OTM8009A_GetYSize+0x10>
  {
  case OTM8009A_ORIENTATION_PORTRAIT:
    *Ysize = OTM8009A_480X800_HEIGHT;
    break;
  case OTM8009A_ORIENTATION_LANDSCAPE:
    *Ysize = OTM8009A_800X480_HEIGHT;
 8005c72:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
    *Ysize = OTM8009A_800X480_HEIGHT;
    break;
  }
  
  return OTM8009A_OK;
}
 8005c76:	2000      	movs	r0, #0
    *Ysize = OTM8009A_800X480_HEIGHT;
 8005c78:	600b      	str	r3, [r1, #0]
}
 8005c7a:	4770      	bx	lr
    *Ysize = OTM8009A_480X800_HEIGHT;
 8005c7c:	f44f 7348 	mov.w	r3, #800	; 0x320
}
 8005c80:	2000      	movs	r0, #0
    *Ysize = OTM8009A_480X800_HEIGHT;
 8005c82:	600b      	str	r3, [r1, #0]
}
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop
 8005c88:	240032ac 	.word	0x240032ac

08005c8c <OTM8009A_SetCursor>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8005c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c90:	4770      	bx	lr
 8005c92:	bf00      	nop

08005c94 <OTM8009A_DrawBitmap>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8005c94:	f04f 30ff 	mov.w	r0, #4294967295
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop

08005c9c <OTM8009A_FillRGBRect>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8005c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop

08005ca4 <OTM8009A_DrawHLine>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8005ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop

08005cac <OTM8009A_FillRect>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8005cac:	f04f 30ff 	mov.w	r0, #4294967295
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop

08005cb4 <OTM8009A_SetPixel>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 8005cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop

08005cbc <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8005cbc:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005cbe:	6884      	ldr	r4, [r0, #8]
 8005cc0:	8800      	ldrh	r0, [r0, #0]
 8005cc2:	46a4      	mov	ip, r4
}
 8005cc4:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005cc8:	4760      	bx	ip
 8005cca:	bf00      	nop

08005ccc <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8005ccc:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005cce:	6844      	ldr	r4, [r0, #4]
 8005cd0:	8800      	ldrh	r0, [r0, #0]
 8005cd2:	46a4      	mov	ip, r4
}
 8005cd4:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005cd8:	4760      	bx	ip
 8005cda:	bf00      	nop

08005cdc <OTM8009A_Init>:
{
 8005cdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	f100 0510 	add.w	r5, r0, #16
{
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	4606      	mov	r6, r0
 8005cea:	460f      	mov	r7, r1
 8005cec:	4690      	mov	r8, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005cee:	4619      	mov	r1, r3
 8005cf0:	4ada      	ldr	r2, [pc, #872]	; (800605c <OTM8009A_Init+0x380>)
 8005cf2:	4628      	mov	r0, r5
 8005cf4:	f000 fc76 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8005cf8:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005cfa:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8005cfc:	4ad8      	ldr	r2, [pc, #864]	; (8006060 <OTM8009A_Init+0x384>)
 8005cfe:	21ff      	movs	r1, #255	; 0xff
 8005d00:	4628      	mov	r0, r5
 8005d02:	f000 fc6f 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005d06:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8005d08:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005d0a:	4ad6      	ldr	r2, [pc, #856]	; (8006064 <OTM8009A_Init+0x388>)
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	4628      	mov	r0, r5
 8005d10:	f000 fc68 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8005d14:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005d16:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8005d18:	4ad3      	ldr	r2, [pc, #844]	; (8006068 <OTM8009A_Init+0x38c>)
 8005d1a:	21ff      	movs	r1, #255	; 0xff
 8005d1c:	4628      	mov	r0, r5
 8005d1e:	f000 fc61 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005d22:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8005d24:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005d26:	4acf      	ldr	r2, [pc, #828]	; (8006064 <OTM8009A_Init+0x388>)
 8005d28:	4619      	mov	r1, r3
 8005d2a:	4628      	mov	r0, r5
 8005d2c:	f000 fc5a 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8005d30:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005d32:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8005d34:	4acd      	ldr	r2, [pc, #820]	; (800606c <OTM8009A_Init+0x390>)
 8005d36:	21c4      	movs	r1, #196	; 0xc4
 8005d38:	4628      	mov	r0, r5
 8005d3a:	f000 fc53 	bl	80065e4 <otm8009a_write_reg>
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8005d3e:	68f3      	ldr	r3, [r6, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8005d40:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 8005d42:	4798      	blx	r3
 8005d44:	4681      	mov	r9, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8005d46:	68f3      	ldr	r3, [r6, #12]
 8005d48:	4798      	blx	r3
 8005d4a:	eba0 0009 	sub.w	r0, r0, r9
 8005d4e:	2809      	cmp	r0, #9
 8005d50:	d9f9      	bls.n	8005d46 <OTM8009A_Init+0x6a>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 8005d52:	2300      	movs	r3, #0
 8005d54:	4ac6      	ldr	r2, [pc, #792]	; (8006070 <OTM8009A_Init+0x394>)
 8005d56:	4628      	mov	r0, r5
 8005d58:	4619      	mov	r1, r3
 8005d5a:	f000 fc43 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8005d5e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 8005d60:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8005d62:	4ac4      	ldr	r2, [pc, #784]	; (8006074 <OTM8009A_Init+0x398>)
 8005d64:	21c4      	movs	r1, #196	; 0xc4
 8005d66:	4628      	mov	r0, r5
 8005d68:	f000 fc3c 	bl	80065e4 <otm8009a_write_reg>
  tickstart = pObj->IO.GetTick();
 8005d6c:	68f3      	ldr	r3, [r6, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8005d6e:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 8005d70:	4798      	blx	r3
 8005d72:	4681      	mov	r9, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8005d74:	68f3      	ldr	r3, [r6, #12]
 8005d76:	4798      	blx	r3
 8005d78:	eba0 0009 	sub.w	r0, r0, r9
 8005d7c:	2809      	cmp	r0, #9
 8005d7e:	d9f9      	bls.n	8005d74 <OTM8009A_Init+0x98>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8005d80:	2300      	movs	r3, #0
 8005d82:	4abd      	ldr	r2, [pc, #756]	; (8006078 <OTM8009A_Init+0x39c>)
 8005d84:	4628      	mov	r0, r5
 8005d86:	4619      	mov	r1, r3
 8005d88:	f000 fc2c 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8005d8c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8005d8e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8005d90:	4aba      	ldr	r2, [pc, #744]	; (800607c <OTM8009A_Init+0x3a0>)
 8005d92:	21c5      	movs	r1, #197	; 0xc5
 8005d94:	4628      	mov	r0, r5
 8005d96:	f000 fc25 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8005d9a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8005d9c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8005d9e:	4ab8      	ldr	r2, [pc, #736]	; (8006080 <OTM8009A_Init+0x3a4>)
 8005da0:	4619      	mov	r1, r3
 8005da2:	4628      	mov	r0, r5
 8005da4:	f000 fc1e 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8005da8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8005daa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8005dac:	4ab5      	ldr	r2, [pc, #724]	; (8006084 <OTM8009A_Init+0x3a8>)
 8005dae:	21c5      	movs	r1, #197	; 0xc5
 8005db0:	4628      	mov	r0, r5
 8005db2:	f000 fc17 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8005db6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8005db8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8005dba:	4ab3      	ldr	r2, [pc, #716]	; (8006088 <OTM8009A_Init+0x3ac>)
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	4628      	mov	r0, r5
 8005dc0:	f000 fc10 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8005dc4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8005dc6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8005dc8:	4ab0      	ldr	r2, [pc, #704]	; (800608c <OTM8009A_Init+0x3b0>)
 8005dca:	21c0      	movs	r1, #192	; 0xc0
 8005dcc:	4628      	mov	r0, r5
 8005dce:	f000 fc09 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005dd2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8005dd4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005dd6:	4aa1      	ldr	r2, [pc, #644]	; (800605c <OTM8009A_Init+0x380>)
 8005dd8:	4619      	mov	r1, r3
 8005dda:	4628      	mov	r0, r5
 8005ddc:	f000 fc02 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8005de0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005de2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8005de4:	4aaa      	ldr	r2, [pc, #680]	; (8006090 <OTM8009A_Init+0x3b4>)
 8005de6:	21d9      	movs	r1, #217	; 0xd9
 8005de8:	4628      	mov	r0, r5
 8005dea:	f000 fbfb 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005dee:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8005df0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005df2:	4aa8      	ldr	r2, [pc, #672]	; (8006094 <OTM8009A_Init+0x3b8>)
 8005df4:	4619      	mov	r1, r3
 8005df6:	4628      	mov	r0, r5
 8005df8:	f000 fbf4 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8005dfc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005dfe:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8005e00:	4aa5      	ldr	r2, [pc, #660]	; (8006098 <OTM8009A_Init+0x3bc>)
 8005e02:	21c1      	movs	r1, #193	; 0xc1
 8005e04:	4628      	mov	r0, r5
 8005e06:	f000 fbed 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8005e0a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8005e0c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8005e0e:	4aa3      	ldr	r2, [pc, #652]	; (800609c <OTM8009A_Init+0x3c0>)
 8005e10:	4619      	mov	r1, r3
 8005e12:	4628      	mov	r0, r5
 8005e14:	f000 fbe6 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8005e18:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8005e1a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8005e1c:	4aa0      	ldr	r2, [pc, #640]	; (80060a0 <OTM8009A_Init+0x3c4>)
 8005e1e:	21c1      	movs	r1, #193	; 0xc1
 8005e20:	4628      	mov	r0, r5
 8005e22:	f000 fbdf 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8005e26:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8005e28:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8005e2a:	4a9e      	ldr	r2, [pc, #632]	; (80060a4 <OTM8009A_Init+0x3c8>)
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	4628      	mov	r0, r5
 8005e30:	f000 fbd8 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8005e34:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8005e36:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8005e38:	4a9b      	ldr	r2, [pc, #620]	; (80060a8 <OTM8009A_Init+0x3cc>)
 8005e3a:	21c5      	movs	r1, #197	; 0xc5
 8005e3c:	4628      	mov	r0, r5
 8005e3e:	f000 fbd1 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8005e42:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8005e44:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8005e46:	4a99      	ldr	r2, [pc, #612]	; (80060ac <OTM8009A_Init+0x3d0>)
 8005e48:	4619      	mov	r1, r3
 8005e4a:	4628      	mov	r0, r5
 8005e4c:	f000 fbca 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8005e50:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8005e52:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8005e54:	4a8b      	ldr	r2, [pc, #556]	; (8006084 <OTM8009A_Init+0x3a8>)
 8005e56:	21c5      	movs	r1, #197	; 0xc5
 8005e58:	4628      	mov	r0, r5
 8005e5a:	f000 fbc3 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005e5e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8005e60:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005e62:	4a7e      	ldr	r2, [pc, #504]	; (800605c <OTM8009A_Init+0x380>)
 8005e64:	4619      	mov	r1, r3
 8005e66:	4628      	mov	r0, r5
 8005e68:	f000 fbbc 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8005e6c:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005e6e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8005e70:	4a8f      	ldr	r2, [pc, #572]	; (80060b0 <OTM8009A_Init+0x3d4>)
 8005e72:	21d8      	movs	r1, #216	; 0xd8
 8005e74:	4628      	mov	r0, r5
 8005e76:	f000 fbb5 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8005e7a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8005e7c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8005e7e:	4a8d      	ldr	r2, [pc, #564]	; (80060b4 <OTM8009A_Init+0x3d8>)
 8005e80:	4619      	mov	r1, r3
 8005e82:	4628      	mov	r0, r5
 8005e84:	f000 fbae 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8005e88:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8005e8a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8005e8c:	4a8a      	ldr	r2, [pc, #552]	; (80060b8 <OTM8009A_Init+0x3dc>)
 8005e8e:	21c5      	movs	r1, #197	; 0xc5
 8005e90:	4628      	mov	r0, r5
 8005e92:	f000 fba7 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8005e96:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8005e98:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8005e9a:	4a88      	ldr	r2, [pc, #544]	; (80060bc <OTM8009A_Init+0x3e0>)
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	4628      	mov	r0, r5
 8005ea0:	f000 fba0 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8005ea4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8005ea6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8005ea8:	4a85      	ldr	r2, [pc, #532]	; (80060c0 <OTM8009A_Init+0x3e4>)
 8005eaa:	21c0      	movs	r1, #192	; 0xc0
 8005eac:	4628      	mov	r0, r5
 8005eae:	f000 fb99 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8005eb2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8005eb4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8005eb6:	4a83      	ldr	r2, [pc, #524]	; (80060c4 <OTM8009A_Init+0x3e8>)
 8005eb8:	4619      	mov	r1, r3
 8005eba:	4628      	mov	r0, r5
 8005ebc:	f000 fb92 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8005ec0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8005ec2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8005ec4:	4a80      	ldr	r2, [pc, #512]	; (80060c8 <OTM8009A_Init+0x3ec>)
 8005ec6:	21c5      	movs	r1, #197	; 0xc5
 8005ec8:	4628      	mov	r0, r5
 8005eca:	f000 fb8b 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005ece:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8005ed0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005ed2:	4a70      	ldr	r2, [pc, #448]	; (8006094 <OTM8009A_Init+0x3b8>)
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	4628      	mov	r0, r5
 8005ed8:	f000 fb84 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8005edc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005ede:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8005ee0:	4a7a      	ldr	r2, [pc, #488]	; (80060cc <OTM8009A_Init+0x3f0>)
 8005ee2:	21c4      	movs	r1, #196	; 0xc4
 8005ee4:	4628      	mov	r0, r5
 8005ee6:	f000 fb7d 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8005eea:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8005eec:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8005eee:	4a6b      	ldr	r2, [pc, #428]	; (800609c <OTM8009A_Init+0x3c0>)
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	4628      	mov	r0, r5
 8005ef4:	f000 fb76 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8005ef8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8005efa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8005efc:	4a74      	ldr	r2, [pc, #464]	; (80060d0 <OTM8009A_Init+0x3f4>)
 8005efe:	21c1      	movs	r1, #193	; 0xc1
 8005f00:	4628      	mov	r0, r5
 8005f02:	f000 fb6f 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8005f06:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8005f08:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8005f0a:	4a72      	ldr	r2, [pc, #456]	; (80060d4 <OTM8009A_Init+0x3f8>)
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	4628      	mov	r0, r5
 8005f10:	f000 fb68 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8005f14:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8005f16:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8005f18:	4a6f      	ldr	r2, [pc, #444]	; (80060d8 <OTM8009A_Init+0x3fc>)
 8005f1a:	21b3      	movs	r1, #179	; 0xb3
 8005f1c:	4628      	mov	r0, r5
 8005f1e:	f000 fb61 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005f22:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8005f24:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005f26:	4a4f      	ldr	r2, [pc, #316]	; (8006064 <OTM8009A_Init+0x388>)
 8005f28:	4619      	mov	r1, r3
 8005f2a:	4628      	mov	r0, r5
 8005f2c:	f000 fb5a 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8005f30:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005f32:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8005f34:	4a69      	ldr	r2, [pc, #420]	; (80060dc <OTM8009A_Init+0x400>)
 8005f36:	21ce      	movs	r1, #206	; 0xce
 8005f38:	4628      	mov	r0, r5
 8005f3a:	f000 fb53 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005f3e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8005f40:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005f42:	4a67      	ldr	r2, [pc, #412]	; (80060e0 <OTM8009A_Init+0x404>)
 8005f44:	4619      	mov	r1, r3
 8005f46:	4628      	mov	r0, r5
 8005f48:	f000 fb4c 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8005f4c:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005f4e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8005f50:	4a64      	ldr	r2, [pc, #400]	; (80060e4 <OTM8009A_Init+0x408>)
 8005f52:	21ce      	movs	r1, #206	; 0xce
 8005f54:	4628      	mov	r0, r5
 8005f56:	f000 fb45 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005f5a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8005f5c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005f5e:	4a62      	ldr	r2, [pc, #392]	; (80060e8 <OTM8009A_Init+0x40c>)
 8005f60:	4619      	mov	r1, r3
 8005f62:	4628      	mov	r0, r5
 8005f64:	f000 fb3e 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8005f68:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005f6a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8005f6c:	4a5f      	ldr	r2, [pc, #380]	; (80060ec <OTM8009A_Init+0x410>)
 8005f6e:	21ce      	movs	r1, #206	; 0xce
 8005f70:	4628      	mov	r0, r5
 8005f72:	f000 fb37 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005f76:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8005f78:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005f7a:	4a5d      	ldr	r2, [pc, #372]	; (80060f0 <OTM8009A_Init+0x414>)
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	4628      	mov	r0, r5
 8005f80:	f000 fb30 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8005f84:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005f86:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8005f88:	4a5a      	ldr	r2, [pc, #360]	; (80060f4 <OTM8009A_Init+0x418>)
 8005f8a:	21cf      	movs	r1, #207	; 0xcf
 8005f8c:	4628      	mov	r0, r5
 8005f8e:	f000 fb29 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005f92:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8005f94:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005f96:	4a58      	ldr	r2, [pc, #352]	; (80060f8 <OTM8009A_Init+0x41c>)
 8005f98:	4619      	mov	r1, r3
 8005f9a:	4628      	mov	r0, r5
 8005f9c:	f000 fb22 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8005fa0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005fa2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8005fa4:	4a55      	ldr	r2, [pc, #340]	; (80060fc <OTM8009A_Init+0x420>)
 8005fa6:	21cf      	movs	r1, #207	; 0xcf
 8005fa8:	4628      	mov	r0, r5
 8005faa:	f000 fb1b 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005fae:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8005fb0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005fb2:	4a2c      	ldr	r2, [pc, #176]	; (8006064 <OTM8009A_Init+0x388>)
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	4628      	mov	r0, r5
 8005fb8:	f000 fb14 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8005fbc:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005fbe:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8005fc0:	4a4f      	ldr	r2, [pc, #316]	; (8006100 <OTM8009A_Init+0x424>)
 8005fc2:	21cb      	movs	r1, #203	; 0xcb
 8005fc4:	4628      	mov	r0, r5
 8005fc6:	f000 fb0d 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8005fca:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8005fcc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8005fce:	4a4d      	ldr	r2, [pc, #308]	; (8006104 <OTM8009A_Init+0x428>)
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	4628      	mov	r0, r5
 8005fd4:	f000 fb06 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8005fd8:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8005fda:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8005fdc:	4a4a      	ldr	r2, [pc, #296]	; (8006108 <OTM8009A_Init+0x42c>)
 8005fde:	21cb      	movs	r1, #203	; 0xcb
 8005fe0:	4628      	mov	r0, r5
 8005fe2:	f000 faff 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005fe6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8005fe8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005fea:	4a3d      	ldr	r2, [pc, #244]	; (80060e0 <OTM8009A_Init+0x404>)
 8005fec:	4619      	mov	r1, r3
 8005fee:	4628      	mov	r0, r5
 8005ff0:	f000 faf8 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8005ff4:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005ff6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8005ff8:	4a44      	ldr	r2, [pc, #272]	; (800610c <OTM8009A_Init+0x430>)
 8005ffa:	21cb      	movs	r1, #203	; 0xcb
 8005ffc:	4628      	mov	r0, r5
 8005ffe:	f000 faf1 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8006002:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8006004:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8006006:	4a38      	ldr	r2, [pc, #224]	; (80060e8 <OTM8009A_Init+0x40c>)
 8006008:	4619      	mov	r1, r3
 800600a:	4628      	mov	r0, r5
 800600c:	f000 faea 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8006010:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8006012:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8006014:	4a3e      	ldr	r2, [pc, #248]	; (8006110 <OTM8009A_Init+0x434>)
 8006016:	21cb      	movs	r1, #203	; 0xcb
 8006018:	4628      	mov	r0, r5
 800601a:	f000 fae3 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800601e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8006020:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8006022:	4a33      	ldr	r2, [pc, #204]	; (80060f0 <OTM8009A_Init+0x414>)
 8006024:	4619      	mov	r1, r3
 8006026:	4628      	mov	r0, r5
 8006028:	f000 fadc 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 800602c:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800602e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8006030:	4a38      	ldr	r2, [pc, #224]	; (8006114 <OTM8009A_Init+0x438>)
 8006032:	21cb      	movs	r1, #203	; 0xcb
 8006034:	4628      	mov	r0, r5
 8006036:	f000 fad5 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800603a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 800603c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800603e:	4a2e      	ldr	r2, [pc, #184]	; (80060f8 <OTM8009A_Init+0x41c>)
 8006040:	4619      	mov	r1, r3
 8006042:	4628      	mov	r0, r5
 8006044:	f000 face 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8006048:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800604a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 800604c:	4a32      	ldr	r2, [pc, #200]	; (8006118 <OTM8009A_Init+0x43c>)
 800604e:	21cb      	movs	r1, #203	; 0xcb
 8006050:	4628      	mov	r0, r5
 8006052:	f000 fac7 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8006056:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8006058:	4404      	add	r4, r0
 800605a:	e05f      	b.n	800611c <OTM8009A_Init+0x440>
 800605c:	08020bad 	.word	0x08020bad
 8006060:	08020a7c 	.word	0x08020a7c
 8006064:	08020bae 	.word	0x08020bae
 8006068:	08020b08 	.word	0x08020b08
 800606c:	08020baf 	.word	0x08020baf
 8006070:	08020bb0 	.word	0x08020bb0
 8006074:	08020bb1 	.word	0x08020bb1
 8006078:	08020bb2 	.word	0x08020bb2
 800607c:	08020bb3 	.word	0x08020bb3
 8006080:	08020bb4 	.word	0x08020bb4
 8006084:	08020bb5 	.word	0x08020bb5
 8006088:	08020bb6 	.word	0x08020bb6
 800608c:	08020bb7 	.word	0x08020bb7
 8006090:	08020bb8 	.word	0x08020bb8
 8006094:	08020bb9 	.word	0x08020bb9
 8006098:	08020bba 	.word	0x08020bba
 800609c:	08020bbb 	.word	0x08020bbb
 80060a0:	08020bbc 	.word	0x08020bbc
 80060a4:	08020bbd 	.word	0x08020bbd
 80060a8:	08020bbe 	.word	0x08020bbe
 80060ac:	08020bbf 	.word	0x08020bbf
 80060b0:	08020b7c 	.word	0x08020b7c
 80060b4:	08020bc0 	.word	0x08020bc0
 80060b8:	08020bc1 	.word	0x08020bc1
 80060bc:	08020bc2 	.word	0x08020bc2
 80060c0:	08020bc3 	.word	0x08020bc3
 80060c4:	08020bc4 	.word	0x08020bc4
 80060c8:	08020bc5 	.word	0x08020bc5
 80060cc:	08020bc6 	.word	0x08020bc6
 80060d0:	08020bc7 	.word	0x08020bc7
 80060d4:	08020bc8 	.word	0x08020bc8
 80060d8:	08020b80 	.word	0x08020b80
 80060dc:	08020b84 	.word	0x08020b84
 80060e0:	08020bc9 	.word	0x08020bc9
 80060e4:	08020b8c 	.word	0x08020b8c
 80060e8:	08020bca 	.word	0x08020bca
 80060ec:	08020b9c 	.word	0x08020b9c
 80060f0:	08020bcb 	.word	0x08020bcb
 80060f4:	08020a80 	.word	0x08020a80
 80060f8:	08020bcc 	.word	0x08020bcc
 80060fc:	08020bd9 	.word	0x08020bd9
 8006100:	08020a8c 	.word	0x08020a8c
 8006104:	08020bcd 	.word	0x08020bcd
 8006108:	08020a98 	.word	0x08020a98
 800610c:	08020aa8 	.word	0x08020aa8
 8006110:	08020ab8 	.word	0x08020ab8
 8006114:	08020ac4 	.word	0x08020ac4
 8006118:	08020ad4 	.word	0x08020ad4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 800611c:	4aa9      	ldr	r2, [pc, #676]	; (80063c4 <OTM8009A_Init+0x6e8>)
 800611e:	4619      	mov	r1, r3
 8006120:	4628      	mov	r0, r5
 8006122:	f000 fa5f 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8006126:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8006128:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 800612a:	4aa7      	ldr	r2, [pc, #668]	; (80063c8 <OTM8009A_Init+0x6ec>)
 800612c:	21cb      	movs	r1, #203	; 0xcb
 800612e:	4628      	mov	r0, r5
 8006130:	f000 fa58 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8006134:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8006136:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8006138:	4aa4      	ldr	r2, [pc, #656]	; (80063cc <OTM8009A_Init+0x6f0>)
 800613a:	4619      	mov	r1, r3
 800613c:	4628      	mov	r0, r5
 800613e:	f000 fa51 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8006142:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8006144:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8006146:	4aa2      	ldr	r2, [pc, #648]	; (80063d0 <OTM8009A_Init+0x6f4>)
 8006148:	21cb      	movs	r1, #203	; 0xcb
 800614a:	4628      	mov	r0, r5
 800614c:	f000 fa4a 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006150:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8006152:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006154:	4a9f      	ldr	r2, [pc, #636]	; (80063d4 <OTM8009A_Init+0x6f8>)
 8006156:	4619      	mov	r1, r3
 8006158:	4628      	mov	r0, r5
 800615a:	f000 fa43 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 800615e:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006160:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8006162:	4a9d      	ldr	r2, [pc, #628]	; (80063d8 <OTM8009A_Init+0x6fc>)
 8006164:	21cc      	movs	r1, #204	; 0xcc
 8006166:	4628      	mov	r0, r5
 8006168:	f000 fa3c 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800616c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 800616e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8006170:	4a9a      	ldr	r2, [pc, #616]	; (80063dc <OTM8009A_Init+0x700>)
 8006172:	4619      	mov	r1, r3
 8006174:	4628      	mov	r0, r5
 8006176:	f000 fa35 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 800617a:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800617c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 800617e:	4a98      	ldr	r2, [pc, #608]	; (80063e0 <OTM8009A_Init+0x704>)
 8006180:	21cc      	movs	r1, #204	; 0xcc
 8006182:	4628      	mov	r0, r5
 8006184:	f000 fa2e 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8006188:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 800618a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800618c:	4a95      	ldr	r2, [pc, #596]	; (80063e4 <OTM8009A_Init+0x708>)
 800618e:	4619      	mov	r1, r3
 8006190:	4628      	mov	r0, r5
 8006192:	f000 fa27 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8006196:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8006198:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 800619a:	4a93      	ldr	r2, [pc, #588]	; (80063e8 <OTM8009A_Init+0x70c>)
 800619c:	21cc      	movs	r1, #204	; 0xcc
 800619e:	4628      	mov	r0, r5
 80061a0:	f000 fa20 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80061a4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 80061a6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80061a8:	4a90      	ldr	r2, [pc, #576]	; (80063ec <OTM8009A_Init+0x710>)
 80061aa:	4619      	mov	r1, r3
 80061ac:	4628      	mov	r0, r5
 80061ae:	f000 fa19 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 80061b2:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80061b4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 80061b6:	4a8e      	ldr	r2, [pc, #568]	; (80063f0 <OTM8009A_Init+0x714>)
 80061b8:	21cc      	movs	r1, #204	; 0xcc
 80061ba:	4628      	mov	r0, r5
 80061bc:	f000 fa12 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80061c0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 80061c2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80061c4:	4a8b      	ldr	r2, [pc, #556]	; (80063f4 <OTM8009A_Init+0x718>)
 80061c6:	4619      	mov	r1, r3
 80061c8:	4628      	mov	r0, r5
 80061ca:	f000 fa0b 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 80061ce:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80061d0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 80061d2:	4a89      	ldr	r2, [pc, #548]	; (80063f8 <OTM8009A_Init+0x71c>)
 80061d4:	21cc      	movs	r1, #204	; 0xcc
 80061d6:	4628      	mov	r0, r5
 80061d8:	f000 fa04 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80061dc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 80061de:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80061e0:	4a86      	ldr	r2, [pc, #536]	; (80063fc <OTM8009A_Init+0x720>)
 80061e2:	4619      	mov	r1, r3
 80061e4:	4628      	mov	r0, r5
 80061e6:	f000 f9fd 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 80061ea:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80061ec:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 80061ee:	4a84      	ldr	r2, [pc, #528]	; (8006400 <OTM8009A_Init+0x724>)
 80061f0:	21cc      	movs	r1, #204	; 0xcc
 80061f2:	4628      	mov	r0, r5
 80061f4:	f000 f9f6 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80061f8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 80061fa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80061fc:	4a81      	ldr	r2, [pc, #516]	; (8006404 <OTM8009A_Init+0x728>)
 80061fe:	4619      	mov	r1, r3
 8006200:	4628      	mov	r0, r5
 8006202:	f000 f9ef 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8006206:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8006208:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 800620a:	4a7f      	ldr	r2, [pc, #508]	; (8006408 <OTM8009A_Init+0x72c>)
 800620c:	21c5      	movs	r1, #197	; 0xc5
 800620e:	4628      	mov	r0, r5
 8006210:	f000 f9e8 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8006214:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8006216:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8006218:	4a7c      	ldr	r2, [pc, #496]	; (800640c <OTM8009A_Init+0x730>)
 800621a:	4619      	mov	r1, r3
 800621c:	4628      	mov	r0, r5
 800621e:	f000 f9e1 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8006222:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8006224:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8006226:	4a7a      	ldr	r2, [pc, #488]	; (8006410 <OTM8009A_Init+0x734>)
 8006228:	21f5      	movs	r1, #245	; 0xf5
 800622a:	4628      	mov	r0, r5
 800622c:	f000 f9da 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8006230:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8006232:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8006234:	4a77      	ldr	r2, [pc, #476]	; (8006414 <OTM8009A_Init+0x738>)
 8006236:	4619      	mov	r1, r3
 8006238:	4628      	mov	r0, r5
 800623a:	f000 f9d3 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 800623e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8006240:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8006242:	4a75      	ldr	r2, [pc, #468]	; (8006418 <OTM8009A_Init+0x73c>)
 8006244:	21c6      	movs	r1, #198	; 0xc6
 8006246:	4628      	mov	r0, r5
 8006248:	f000 f9cc 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800624c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 800624e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006250:	4a72      	ldr	r2, [pc, #456]	; (800641c <OTM8009A_Init+0x740>)
 8006252:	4619      	mov	r1, r3
 8006254:	4628      	mov	r0, r5
 8006256:	f000 f9c5 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 800625a:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800625c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 800625e:	4a70      	ldr	r2, [pc, #448]	; (8006420 <OTM8009A_Init+0x744>)
 8006260:	21ff      	movs	r1, #255	; 0xff
 8006262:	4628      	mov	r0, r5
 8006264:	f000 f9be 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006268:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 800626a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800626c:	4a6b      	ldr	r2, [pc, #428]	; (800641c <OTM8009A_Init+0x740>)
 800626e:	4619      	mov	r1, r3
 8006270:	4628      	mov	r0, r5
 8006272:	f000 f9b7 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006276:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006278:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800627a:	4a68      	ldr	r2, [pc, #416]	; (800641c <OTM8009A_Init+0x740>)
 800627c:	4619      	mov	r1, r3
 800627e:	4628      	mov	r0, r5
 8006280:	f000 f9b0 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8006284:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006286:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8006288:	4a66      	ldr	r2, [pc, #408]	; (8006424 <OTM8009A_Init+0x748>)
 800628a:	21e1      	movs	r1, #225	; 0xe1
 800628c:	4628      	mov	r0, r5
 800628e:	f000 f9a9 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006292:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8006294:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006296:	4a61      	ldr	r2, [pc, #388]	; (800641c <OTM8009A_Init+0x740>)
 8006298:	4619      	mov	r1, r3
 800629a:	4628      	mov	r0, r5
 800629c:	f000 f9a2 	bl	80065e4 <otm8009a_write_reg>
 80062a0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 80062a2:	2310      	movs	r3, #16
 80062a4:	4a60      	ldr	r2, [pc, #384]	; (8006428 <OTM8009A_Init+0x74c>)
 80062a6:	21e2      	movs	r1, #226	; 0xe2
 80062a8:	4628      	mov	r0, r5
 80062aa:	f000 f99b 	bl	80065e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 80062ae:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 80062b0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 80062b2:	4a5e      	ldr	r2, [pc, #376]	; (800642c <OTM8009A_Init+0x750>)
 80062b4:	2111      	movs	r1, #17
 80062b6:	4628      	mov	r0, r5
 80062b8:	f000 f994 	bl	80065e4 <otm8009a_write_reg>
  tickstart = pObj->IO.GetTick();
 80062bc:	68f3      	ldr	r3, [r6, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 80062be:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 80062c0:	4798      	blx	r3
 80062c2:	4681      	mov	r9, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80062c4:	68f3      	ldr	r3, [r6, #12]
 80062c6:	4798      	blx	r3
 80062c8:	eba0 0009 	sub.w	r0, r0, r9
 80062cc:	2877      	cmp	r0, #119	; 0x77
 80062ce:	d9f9      	bls.n	80062c4 <OTM8009A_Init+0x5e8>
  switch(ColorCoding)
 80062d0:	2f00      	cmp	r7, #0
 80062d2:	d06b      	beq.n	80063ac <OTM8009A_Init+0x6d0>
 80062d4:	2f02      	cmp	r7, #2
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RBG565;
 80062d6:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8006458 <OTM8009A_Init+0x77c>
  switch(ColorCoding)
 80062da:	d040      	beq.n	800635e <OTM8009A_Init+0x682>
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 80062dc:	f1b8 0f01 	cmp.w	r8, #1
 80062e0:	d049      	beq.n	8006376 <OTM8009A_Init+0x69a>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 80062e2:	2300      	movs	r3, #0
 80062e4:	f8c9 3000 	str.w	r3, [r9]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 80062e8:	2300      	movs	r3, #0
 80062ea:	4a51      	ldr	r2, [pc, #324]	; (8006430 <OTM8009A_Init+0x754>)
 80062ec:	2151      	movs	r1, #81	; 0x51
 80062ee:	4628      	mov	r0, r5
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 80062f0:	461e      	mov	r6, r3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 80062f2:	f000 f977 	bl	80065e4 <otm8009a_write_reg>
 80062f6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 80062f8:	4a4e      	ldr	r2, [pc, #312]	; (8006434 <OTM8009A_Init+0x758>)
 80062fa:	4633      	mov	r3, r6
 80062fc:	2153      	movs	r1, #83	; 0x53
 80062fe:	4628      	mov	r0, r5
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8006300:	f8c9 6008 	str.w	r6, [r9, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8006304:	f000 f96e 	bl	80065e4 <otm8009a_write_reg>
 8006308:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 800630a:	4633      	mov	r3, r6
 800630c:	4a4a      	ldr	r2, [pc, #296]	; (8006438 <OTM8009A_Init+0x75c>)
 800630e:	2155      	movs	r1, #85	; 0x55
 8006310:	4628      	mov	r0, r5
 8006312:	f000 f967 	bl	80065e4 <otm8009a_write_reg>
 8006316:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8006318:	4633      	mov	r3, r6
 800631a:	4a48      	ldr	r2, [pc, #288]	; (800643c <OTM8009A_Init+0x760>)
 800631c:	215e      	movs	r1, #94	; 0x5e
 800631e:	4628      	mov	r0, r5
 8006320:	f000 f960 	bl	80065e4 <otm8009a_write_reg>
 8006324:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8006326:	4633      	mov	r3, r6
 8006328:	4a45      	ldr	r2, [pc, #276]	; (8006440 <OTM8009A_Init+0x764>)
 800632a:	2129      	movs	r1, #41	; 0x29
 800632c:	4628      	mov	r0, r5
 800632e:	f000 f959 	bl	80065e4 <otm8009a_write_reg>
 8006332:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006334:	4633      	mov	r3, r6
 8006336:	4631      	mov	r1, r6
 8006338:	4a38      	ldr	r2, [pc, #224]	; (800641c <OTM8009A_Init+0x740>)
 800633a:	4628      	mov	r0, r5
 800633c:	f000 f952 	bl	80065e4 <otm8009a_write_reg>
 8006340:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 8006342:	4633      	mov	r3, r6
 8006344:	4628      	mov	r0, r5
 8006346:	4a3f      	ldr	r2, [pc, #252]	; (8006444 <OTM8009A_Init+0x768>)
 8006348:	212c      	movs	r1, #44	; 0x2c
 800634a:	f000 f94b 	bl	80065e4 <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 800634e:	42c4      	cmn	r4, r0
}
 8006350:	bf14      	ite	ne
 8006352:	f04f 30ff 	movne.w	r0, #4294967295
 8006356:	4630      	moveq	r0, r6
 8006358:	b003      	add	sp, #12
 800635a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 800635e:	2300      	movs	r3, #0
 8006360:	4a39      	ldr	r2, [pc, #228]	; (8006448 <OTM8009A_Init+0x76c>)
 8006362:	213a      	movs	r1, #58	; 0x3a
 8006364:	4628      	mov	r0, r5
 8006366:	f000 f93d 	bl	80065e4 <otm8009a_write_reg>
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 800636a:	f1b8 0f01 	cmp.w	r8, #1
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RBG565;
 800636e:	f8c9 7004 	str.w	r7, [r9, #4]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 8006372:	4404      	add	r4, r0
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8006374:	d1b5      	bne.n	80062e2 <OTM8009A_Init+0x606>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8006376:	aa02      	add	r2, sp, #8
 8006378:	2060      	movs	r0, #96	; 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 800637a:	2300      	movs	r3, #0
 800637c:	2136      	movs	r1, #54	; 0x36
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 800637e:	f802 0d01 	strb.w	r0, [r2, #-1]!
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8006382:	4628      	mov	r0, r5
 8006384:	f000 f92e 	bl	80065e4 <otm8009a_write_reg>
 8006388:	4404      	add	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 800638a:	2304      	movs	r3, #4
 800638c:	4a2f      	ldr	r2, [pc, #188]	; (800644c <OTM8009A_Init+0x770>)
 800638e:	212a      	movs	r1, #42	; 0x2a
 8006390:	4628      	mov	r0, r5
 8006392:	f000 f927 	bl	80065e4 <otm8009a_write_reg>
 8006396:	4404      	add	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8006398:	2304      	movs	r3, #4
 800639a:	4a2d      	ldr	r2, [pc, #180]	; (8006450 <OTM8009A_Init+0x774>)
 800639c:	212b      	movs	r1, #43	; 0x2b
 800639e:	4628      	mov	r0, r5
 80063a0:	f000 f920 	bl	80065e4 <otm8009a_write_reg>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 80063a4:	f8c9 8000 	str.w	r8, [r9]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 80063a8:	4404      	add	r4, r0
 80063aa:	e79d      	b.n	80062e8 <OTM8009A_Init+0x60c>
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 80063ac:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8006458 <OTM8009A_Init+0x77c>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 80063b0:	463b      	mov	r3, r7
 80063b2:	4a28      	ldr	r2, [pc, #160]	; (8006454 <OTM8009A_Init+0x778>)
 80063b4:	213a      	movs	r1, #58	; 0x3a
 80063b6:	4628      	mov	r0, r5
 80063b8:	f000 f914 	bl	80065e4 <otm8009a_write_reg>
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 80063bc:	f8c9 7004 	str.w	r7, [r9, #4]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 80063c0:	4404      	add	r4, r0
    break;
 80063c2:	e78b      	b.n	80062dc <OTM8009A_Init+0x600>
 80063c4:	08020bce 	.word	0x08020bce
 80063c8:	08020ae4 	.word	0x08020ae4
 80063cc:	08020bcf 	.word	0x08020bcf
 80063d0:	08020af0 	.word	0x08020af0
 80063d4:	08020bae 	.word	0x08020bae
 80063d8:	08020afc 	.word	0x08020afc
 80063dc:	08020bcd 	.word	0x08020bcd
 80063e0:	08020b0c 	.word	0x08020b0c
 80063e4:	08020bc9 	.word	0x08020bc9
 80063e8:	08020b1c 	.word	0x08020b1c
 80063ec:	08020bca 	.word	0x08020bca
 80063f0:	08020b2c 	.word	0x08020b2c
 80063f4:	08020bcb 	.word	0x08020bcb
 80063f8:	08020b38 	.word	0x08020b38
 80063fc:	08020bcc 	.word	0x08020bcc
 8006400:	08020b48 	.word	0x08020b48
 8006404:	08020bb9 	.word	0x08020bb9
 8006408:	08020bda 	.word	0x08020bda
 800640c:	08020bdb 	.word	0x08020bdb
 8006410:	08020bdc 	.word	0x08020bdc
 8006414:	08020bdd 	.word	0x08020bdd
 8006418:	08020bde 	.word	0x08020bde
 800641c:	08020bad 	.word	0x08020bad
 8006420:	08020b58 	.word	0x08020b58
 8006424:	08020b5c 	.word	0x08020b5c
 8006428:	08020b6c 	.word	0x08020b6c
 800642c:	08020bd0 	.word	0x08020bd0
 8006430:	08020bd3 	.word	0x08020bd3
 8006434:	08020bd4 	.word	0x08020bd4
 8006438:	08020bd5 	.word	0x08020bd5
 800643c:	08020bd6 	.word	0x08020bd6
 8006440:	08020bd7 	.word	0x08020bd7
 8006444:	08020bd8 	.word	0x08020bd8
 8006448:	08020bd1 	.word	0x08020bd1
 800644c:	08020a74 	.word	0x08020a74
 8006450:	08020a78 	.word	0x08020a78
 8006454:	08020bd2 	.word	0x08020bd2
 8006458:	240032ac 	.word	0x240032ac

0800645c <OTM8009A_SetBrightness>:
{
 800645c:	b530      	push	{r4, r5, lr}
 800645e:	460d      	mov	r5, r1
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8006460:	490b      	ldr	r1, [pc, #44]	; (8006490 <OTM8009A_SetBrightness+0x34>)
{
 8006462:	b083      	sub	sp, #12
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 8006464:	3010      	adds	r0, #16
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8006466:	ebc5 2405 	rsb	r4, r5, r5, lsl #8
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 800646a:	2300      	movs	r3, #0
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 800646c:	aa02      	add	r2, sp, #8
 800646e:	fba1 1404 	umull	r1, r4, r1, r4
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 8006472:	2151      	movs	r1, #81	; 0x51
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8006474:	0964      	lsrs	r4, r4, #5
 8006476:	f802 4d01 	strb.w	r4, [r2, #-1]!
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 800647a:	f000 f8b3 	bl	80065e4 <otm8009a_write_reg>
 800647e:	b918      	cbnz	r0, 8006488 <OTM8009A_SetBrightness+0x2c>
    OTM8009ACtx.Brightness = Brightness;
 8006480:	4b04      	ldr	r3, [pc, #16]	; (8006494 <OTM8009A_SetBrightness+0x38>)
 8006482:	609d      	str	r5, [r3, #8]
}
 8006484:	b003      	add	sp, #12
 8006486:	bd30      	pop	{r4, r5, pc}
    ret = OTM8009A_ERROR;
 8006488:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 800648c:	e7fa      	b.n	8006484 <OTM8009A_SetBrightness+0x28>
 800648e:	bf00      	nop
 8006490:	51eb851f 	.word	0x51eb851f
 8006494:	240032ac 	.word	0x240032ac

08006498 <OTM8009A_DisplayOn>:
{
 8006498:	b500      	push	{lr}
 800649a:	b083      	sub	sp, #12
  uint8_t display = 0;
 800649c:	2300      	movs	r3, #0
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &display, 0) != OTM8009A_OK)
 800649e:	2129      	movs	r1, #41	; 0x29
 80064a0:	3010      	adds	r0, #16
  uint8_t display = 0;
 80064a2:	aa02      	add	r2, sp, #8
 80064a4:	f802 3d01 	strb.w	r3, [r2, #-1]!
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &display, 0) != OTM8009A_OK)
 80064a8:	f000 f89c 	bl	80065e4 <otm8009a_write_reg>
 80064ac:	3000      	adds	r0, #0
 80064ae:	bf18      	it	ne
 80064b0:	2001      	movne	r0, #1
}
 80064b2:	4240      	negs	r0, r0
 80064b4:	b003      	add	sp, #12
 80064b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80064ba:	bf00      	nop

080064bc <OTM8009A_DisplayOff>:
{
 80064bc:	b500      	push	{lr}
 80064be:	b083      	sub	sp, #12
  uint8_t display = 0;
 80064c0:	2300      	movs	r3, #0
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPOFF, &display, 0) != OTM8009A_OK)
 80064c2:	2128      	movs	r1, #40	; 0x28
 80064c4:	3010      	adds	r0, #16
  uint8_t display = 0;
 80064c6:	aa02      	add	r2, sp, #8
 80064c8:	f802 3d01 	strb.w	r3, [r2, #-1]!
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPOFF, &display, 0) != OTM8009A_OK)
 80064cc:	f000 f88a 	bl	80065e4 <otm8009a_write_reg>
 80064d0:	3000      	adds	r0, #0
 80064d2:	bf18      	it	ne
 80064d4:	2001      	movne	r0, #1
}
 80064d6:	4240      	negs	r0, r0
 80064d8:	b003      	add	sp, #12
 80064da:	f85d fb04 	ldr.w	pc, [sp], #4
 80064de:	bf00      	nop

080064e0 <OTM8009A_SetOrientation>:
{
 80064e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 80064e2:	2360      	movs	r3, #96	; 0x60
{
 80064e4:	b083      	sub	sp, #12
  uint8_t tmp1 = OTM8009A_MADCTR_MODE_PORTRAIT;
 80064e6:	2600      	movs	r6, #0
  if((Orientation != OTM8009A_ORIENTATION_LANDSCAPE) && (Orientation != OTM8009A_ORIENTATION_PORTRAIT))
 80064e8:	2901      	cmp	r1, #1
  uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 80064ea:	f88d 3006 	strb.w	r3, [sp, #6]
  uint8_t tmp1 = OTM8009A_MADCTR_MODE_PORTRAIT;
 80064ee:	f88d 6007 	strb.w	r6, [sp, #7]
  if((Orientation != OTM8009A_ORIENTATION_LANDSCAPE) && (Orientation != OTM8009A_ORIENTATION_PORTRAIT))
 80064f2:	d839      	bhi.n	8006568 <OTM8009A_SetOrientation+0x88>
 80064f4:	460f      	mov	r7, r1
 80064f6:	f100 0510 	add.w	r5, r0, #16
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 80064fa:	4633      	mov	r3, r6
  else if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 80064fc:	d01c      	beq.n	8006538 <OTM8009A_SetOrientation+0x58>
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp1, 0);
 80064fe:	f10d 0207 	add.w	r2, sp, #7
 8006502:	2136      	movs	r1, #54	; 0x36
 8006504:	4628      	mov	r0, r5
 8006506:	f000 f86d 	bl	80065e4 <otm8009a_write_reg>
 800650a:	4604      	mov	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 800650c:	2304      	movs	r3, #4
 800650e:	4a18      	ldr	r2, [pc, #96]	; (8006570 <OTM8009A_SetOrientation+0x90>)
 8006510:	212a      	movs	r1, #42	; 0x2a
 8006512:	4628      	mov	r0, r5
 8006514:	f000 f866 	bl	80065e4 <otm8009a_write_reg>
 8006518:	4404      	add	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 800651a:	2304      	movs	r3, #4
 800651c:	4628      	mov	r0, r5
 800651e:	4a15      	ldr	r2, [pc, #84]	; (8006574 <OTM8009A_SetOrientation+0x94>)
 8006520:	212b      	movs	r1, #43	; 0x2b
 8006522:	f000 f85f 	bl	80065e4 <otm8009a_write_reg>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8006526:	4b14      	ldr	r3, [pc, #80]	; (8006578 <OTM8009A_SetOrientation+0x98>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8006528:	4420      	add	r0, r4
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 800652a:	601e      	str	r6, [r3, #0]
  if(ret != OTM8009A_OK)
 800652c:	3000      	adds	r0, #0
 800652e:	bf18      	it	ne
 8006530:	2001      	movne	r0, #1
 8006532:	4240      	negs	r0, r0
}
 8006534:	b003      	add	sp, #12
 8006536:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8006538:	f10d 0206 	add.w	r2, sp, #6
 800653c:	2136      	movs	r1, #54	; 0x36
 800653e:	4628      	mov	r0, r5
 8006540:	f000 f850 	bl	80065e4 <otm8009a_write_reg>
 8006544:	4604      	mov	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8006546:	2304      	movs	r3, #4
 8006548:	4a09      	ldr	r2, [pc, #36]	; (8006570 <OTM8009A_SetOrientation+0x90>)
 800654a:	212a      	movs	r1, #42	; 0x2a
 800654c:	4628      	mov	r0, r5
 800654e:	f000 f849 	bl	80065e4 <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8006552:	2304      	movs	r3, #4
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8006554:	4404      	add	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8006556:	4a07      	ldr	r2, [pc, #28]	; (8006574 <OTM8009A_SetOrientation+0x94>)
 8006558:	4628      	mov	r0, r5
 800655a:	212b      	movs	r1, #43	; 0x2b
 800655c:	f000 f842 	bl	80065e4 <otm8009a_write_reg>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8006560:	4b05      	ldr	r3, [pc, #20]	; (8006578 <OTM8009A_SetOrientation+0x98>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8006562:	4420      	add	r0, r4
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8006564:	601f      	str	r7, [r3, #0]
 8006566:	e7e1      	b.n	800652c <OTM8009A_SetOrientation+0x4c>
    ret = OTM8009A_ERROR;
 8006568:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 800656c:	e7e2      	b.n	8006534 <OTM8009A_SetOrientation+0x54>
 800656e:	bf00      	nop
 8006570:	08020a74 	.word	0x08020a74
 8006574:	08020a78 	.word	0x08020a78
 8006578:	240032ac 	.word	0x240032ac

0800657c <OTM8009A_ReadID>:
{ 
 800657c:	b508      	push	{r3, lr}
  if(otm8009a_read_reg(&pObj->Ctx, OTM8009A_CMD_ID1, (uint8_t *)Id, 0)!= OTM8009A_OK)
 800657e:	460a      	mov	r2, r1
 8006580:	2300      	movs	r3, #0
 8006582:	21da      	movs	r1, #218	; 0xda
 8006584:	3010      	adds	r0, #16
 8006586:	f000 f825 	bl	80065d4 <otm8009a_read_reg>
 800658a:	3000      	adds	r0, #0
 800658c:	bf18      	it	ne
 800658e:	2001      	movne	r0, #1
}  
 8006590:	4240      	negs	r0, r0
 8006592:	bd08      	pop	{r3, pc}

08006594 <OTM8009A_DrawVLine>:
 8006594:	f04f 30ff 	mov.w	r0, #4294967295
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop

0800659c <OTM8009A_GetPixel>:
 800659c:	f04f 30ff 	mov.w	r0, #4294967295
 80065a0:	4770      	bx	lr
 80065a2:	bf00      	nop

080065a4 <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 80065a4:	b178      	cbz	r0, 80065c6 <OTM8009A_RegisterBusIO+0x22>
    pObj->IO.WriteReg  = pIO->WriteReg;
 80065a6:	684a      	ldr	r2, [r1, #4]
 80065a8:	4603      	mov	r3, r0
  int32_t ret = OTM8009A_OK;
 80065aa:	2000      	movs	r0, #0
{
 80065ac:	b430      	push	{r4, r5}
    pObj->IO.GetTick   = pIO->GetTick;
 80065ae:	e9d1 5402 	ldrd	r5, r4, [r1, #8]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 80065b2:	4906      	ldr	r1, [pc, #24]	; (80065cc <OTM8009A_RegisterBusIO+0x28>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 80065b4:	605a      	str	r2, [r3, #4]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 80065b6:	4a06      	ldr	r2, [pc, #24]	; (80065d0 <OTM8009A_RegisterBusIO+0x2c>)
    pObj->IO.GetTick   = pIO->GetTick;
 80065b8:	e9c3 5402 	strd	r5, r4, [r3, #8]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 80065bc:	e9c3 1305 	strd	r1, r3, [r3, #20]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 80065c0:	611a      	str	r2, [r3, #16]
}
 80065c2:	bc30      	pop	{r4, r5}
 80065c4:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 80065c6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80065ca:	4770      	bx	lr
 80065cc:	08005cbd 	.word	0x08005cbd
 80065d0:	08005ccd 	.word	0x08005ccd

080065d4 <otm8009a_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : Data Read
*******************************************************************************/
int32_t otm8009a_read_reg(otm8009a_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 80065d4:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80065d6:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 80065da:	46a4      	mov	ip, r4
}
 80065dc:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80065e0:	4760      	bx	ip
 80065e2:	bf00      	nop

080065e4 <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 80065e4:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 80065e6:	6804      	ldr	r4, [r0, #0]
 80065e8:	6880      	ldr	r0, [r0, #8]
 80065ea:	46a4      	mov	ip, r4
}
 80065ec:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 80065f0:	4760      	bx	ip
 80065f2:	bf00      	nop

080065f4 <OV5640_DeInit>:
  * @param  pObj  pointer to component object
  * @retval Component status
  */
int32_t OV5640_DeInit(OV5640_Object_t *pObj)
{
  if (pObj->IsInitialized == 1U)
 80065f4:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d102      	bne.n	8006602 <OV5640_DeInit+0xe>
  {
    /* De-initialize camera sensor interface */
    pObj->IsInitialized = 0U;
 80065fc:	2300      	movs	r3, #0
 80065fe:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  }

  return OV5640_OK;
}
 8006602:	2000      	movs	r0, #0
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop

08006608 <OV5640_GetPixelFormat>:
{
  (void)(pObj);
  (void)(PixelFormat);

  return OV5640_ERROR;
}
 8006608:	f04f 30ff 	mov.w	r0, #4294967295
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop

08006610 <OV5640_GetCapabilities>:
  */
int32_t OV5640_GetCapabilities(OV5640_Object_t *pObj, OV5640_Capabilities_t *Capabilities)
{
  int32_t ret;

  if (pObj == NULL)
 8006610:	b160      	cbz	r0, 800662c <OV5640_GetCapabilities+0x1c>
  {
    ret = OV5640_ERROR;
  }
  else
  {
    Capabilities->Config_Brightness    = 1;
 8006612:	2301      	movs	r3, #1
    Capabilities->Config_Resolution    = 1;
    Capabilities->Config_Saturation    = 1;
    Capabilities->Config_SpecialEffect = 1;
    Capabilities->Config_Zoom          = 1;

    ret = OV5640_OK;
 8006614:	2000      	movs	r0, #0
    Capabilities->Config_Brightness    = 1;
 8006616:	60cb      	str	r3, [r1, #12]
    Capabilities->Config_LightMode     = 1;
 8006618:	604b      	str	r3, [r1, #4]
    Capabilities->Config_MirrorFlip    = 1;
 800661a:	61cb      	str	r3, [r1, #28]
    Capabilities->Config_NightMode     = 1;
 800661c:	624b      	str	r3, [r1, #36]	; 0x24
    Capabilities->Config_Resolution    = 1;
 800661e:	600b      	str	r3, [r1, #0]
    Capabilities->Config_Saturation    = 1;
 8006620:	610b      	str	r3, [r1, #16]
    Capabilities->Config_SpecialEffect = 1;
 8006622:	608b      	str	r3, [r1, #8]
    Capabilities->Config_Zoom          = 1;
 8006624:	620b      	str	r3, [r1, #32]
    Capabilities->Config_HueDegree     = 1;
 8006626:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800662a:	4770      	bx	lr
    ret = OV5640_ERROR;
 800662c:	f04f 30ff 	mov.w	r0, #4294967295
  }

  return ret;
}
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop

08006634 <OV5640_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_ReadRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8006634:	b410      	push	{r4}
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8006636:	6904      	ldr	r4, [r0, #16]
 8006638:	8900      	ldrh	r0, [r0, #8]
 800663a:	46a4      	mov	ip, r4
}
 800663c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8006640:	4760      	bx	ip
 8006642:	bf00      	nop

08006644 <OV5640_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_WriteRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8006644:	b410      	push	{r4}
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8006646:	68c4      	ldr	r4, [r0, #12]
 8006648:	8900      	ldrh	r0, [r0, #8]
 800664a:	46a4      	mov	ip, r4
}
 800664c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8006650:	4760      	bx	ip
 8006652:	bf00      	nop

08006654 <OV5640_SetResolution>:
  if (Resolution > OV5640_R800x480)
 8006654:	2904      	cmp	r1, #4
 8006656:	f200 8095 	bhi.w	8006784 <OV5640_SetResolution+0x130>
    switch (Resolution)
 800665a:	3901      	subs	r1, #1
{
 800665c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006660:	b082      	sub	sp, #8
    switch (Resolution)
 8006662:	2903      	cmp	r1, #3
 8006664:	d870      	bhi.n	8006748 <OV5640_SetResolution+0xf4>
 8006666:	e8df f001 	tbb	[pc, r1]
 800666a:	1e3b      	.short	0x1e3b
 800666c:	5502      	.short	0x5502
 800666e:	f8df 811c 	ldr.w	r8, [pc, #284]	; 800678c <OV5640_SetResolution+0x138>
 8006672:	f100 0418 	add.w	r4, r0, #24
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8006676:	2600      	movs	r6, #0
 8006678:	f10d 0507 	add.w	r5, sp, #7
 800667c:	4647      	mov	r7, r8
            tmp = (uint8_t)OV5640_VGA[index][1];
 800667e:	f8b7 c002 	ldrh.w	ip, [r7, #2]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 8006682:	2301      	movs	r3, #1
 8006684:	f838 1026 	ldrh.w	r1, [r8, r6, lsl #2]
 8006688:	462a      	mov	r2, r5
 800668a:	4620      	mov	r0, r4
 800668c:	3704      	adds	r7, #4
            tmp = (uint8_t)OV5640_VGA[index][1];
 800668e:	f88d c007 	strb.w	ip, [sp, #7]
 8006692:	441e      	add	r6, r3
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 8006694:	f001 f896 	bl	80077c4 <ov5640_write_reg>
 8006698:	2800      	cmp	r0, #0
 800669a:	d06f      	beq.n	800677c <OV5640_SetResolution+0x128>
    ret = OV5640_ERROR;
 800669c:	f04f 30ff 	mov.w	r0, #4294967295
}
 80066a0:	b002      	add	sp, #8
 80066a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066a6:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8006790 <OV5640_SetResolution+0x13c>
 80066aa:	f100 0418 	add.w	r4, r0, #24
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 80066ae:	2600      	movs	r6, #0
 80066b0:	f10d 0507 	add.w	r5, sp, #7
 80066b4:	4647      	mov	r7, r8
            tmp = (uint8_t)OV5640_480x272[index][1];
 80066b6:	f8b7 c002 	ldrh.w	ip, [r7, #2]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 80066ba:	2301      	movs	r3, #1
 80066bc:	f838 1026 	ldrh.w	r1, [r8, r6, lsl #2]
 80066c0:	462a      	mov	r2, r5
 80066c2:	4620      	mov	r0, r4
 80066c4:	3704      	adds	r7, #4
            tmp = (uint8_t)OV5640_480x272[index][1];
 80066c6:	f88d c007 	strb.w	ip, [sp, #7]
 80066ca:	441e      	add	r6, r3
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 80066cc:	f001 f87a 	bl	80077c4 <ov5640_write_reg>
 80066d0:	2800      	cmp	r0, #0
 80066d2:	d1e3      	bne.n	800669c <OV5640_SetResolution+0x48>
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 80066d4:	2e04      	cmp	r6, #4
 80066d6:	d1ee      	bne.n	80066b6 <OV5640_SetResolution+0x62>
    ret = OV5640_ERROR;
 80066d8:	2000      	movs	r0, #0
}
 80066da:	b002      	add	sp, #8
 80066dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066e0:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8006794 <OV5640_SetResolution+0x140>
 80066e4:	f100 0418 	add.w	r4, r0, #24
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 80066e8:	2600      	movs	r6, #0
 80066ea:	f10d 0507 	add.w	r5, sp, #7
 80066ee:	4647      	mov	r7, r8
            tmp = (uint8_t)OV5640_QVGA[index][1];
 80066f0:	f8b7 c002 	ldrh.w	ip, [r7, #2]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 80066f4:	2301      	movs	r3, #1
 80066f6:	f838 1026 	ldrh.w	r1, [r8, r6, lsl #2]
 80066fa:	462a      	mov	r2, r5
 80066fc:	4620      	mov	r0, r4
 80066fe:	3704      	adds	r7, #4
            tmp = (uint8_t)OV5640_QVGA[index][1];
 8006700:	f88d c007 	strb.w	ip, [sp, #7]
 8006704:	441e      	add	r6, r3
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 8006706:	f001 f85d 	bl	80077c4 <ov5640_write_reg>
 800670a:	2800      	cmp	r0, #0
 800670c:	d1c6      	bne.n	800669c <OV5640_SetResolution+0x48>
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 800670e:	2e04      	cmp	r6, #4
 8006710:	d1ee      	bne.n	80066f0 <OV5640_SetResolution+0x9c>
 8006712:	e7e1      	b.n	80066d8 <OV5640_SetResolution+0x84>
 8006714:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8006798 <OV5640_SetResolution+0x144>
 8006718:	f100 0418 	add.w	r4, r0, #24
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 800671c:	2600      	movs	r6, #0
 800671e:	f10d 0507 	add.w	r5, sp, #7
 8006722:	4647      	mov	r7, r8
            tmp = (uint8_t)OV5640_WVGA[index][1];
 8006724:	f8b7 c002 	ldrh.w	ip, [r7, #2]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8006728:	2301      	movs	r3, #1
 800672a:	f838 1026 	ldrh.w	r1, [r8, r6, lsl #2]
 800672e:	462a      	mov	r2, r5
 8006730:	4620      	mov	r0, r4
 8006732:	3704      	adds	r7, #4
            tmp = (uint8_t)OV5640_WVGA[index][1];
 8006734:	f88d c007 	strb.w	ip, [sp, #7]
 8006738:	441e      	add	r6, r3
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 800673a:	f001 f843 	bl	80077c4 <ov5640_write_reg>
 800673e:	2800      	cmp	r0, #0
 8006740:	d1ac      	bne.n	800669c <OV5640_SetResolution+0x48>
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8006742:	2e04      	cmp	r6, #4
 8006744:	d1ee      	bne.n	8006724 <OV5640_SetResolution+0xd0>
 8006746:	e7c7      	b.n	80066d8 <OV5640_SetResolution+0x84>
 8006748:	f8df 8050 	ldr.w	r8, [pc, #80]	; 800679c <OV5640_SetResolution+0x148>
 800674c:	f100 0418 	add.w	r4, r0, #24
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8006750:	2600      	movs	r6, #0
 8006752:	f10d 0507 	add.w	r5, sp, #7
 8006756:	4647      	mov	r7, r8
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 8006758:	f8b7 c002 	ldrh.w	ip, [r7, #2]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 800675c:	2301      	movs	r3, #1
 800675e:	f838 1026 	ldrh.w	r1, [r8, r6, lsl #2]
 8006762:	462a      	mov	r2, r5
 8006764:	4620      	mov	r0, r4
 8006766:	3704      	adds	r7, #4
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 8006768:	f88d c007 	strb.w	ip, [sp, #7]
 800676c:	441e      	add	r6, r3
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 800676e:	f001 f829 	bl	80077c4 <ov5640_write_reg>
 8006772:	2800      	cmp	r0, #0
 8006774:	d192      	bne.n	800669c <OV5640_SetResolution+0x48>
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8006776:	2e04      	cmp	r6, #4
 8006778:	d1ee      	bne.n	8006758 <OV5640_SetResolution+0x104>
 800677a:	e7ad      	b.n	80066d8 <OV5640_SetResolution+0x84>
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 800677c:	2e04      	cmp	r6, #4
 800677e:	f47f af7e 	bne.w	800667e <OV5640_SetResolution+0x2a>
 8006782:	e7a9      	b.n	80066d8 <OV5640_SetResolution+0x84>
    ret = OV5640_ERROR;
 8006784:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	08021094 	.word	0x08021094
 8006790:	08020be0 	.word	0x08020be0
 8006794:	08021084 	.word	0x08021084
 8006798:	080210a4 	.word	0x080210a4
 800679c:	08021074 	.word	0x08021074

080067a0 <OV5640_SetLightMode>:
{
 80067a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80067a4:	b083      	sub	sp, #12
  tmp = 0x00;
 80067a6:	2200      	movs	r2, #0
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_MANUAL_CONTROL, &tmp, 1);
 80067a8:	f100 0618 	add.w	r6, r0, #24
{
 80067ac:	460f      	mov	r7, r1
  tmp = 0x00;
 80067ae:	ac02      	add	r4, sp, #8
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_MANUAL_CONTROL, &tmp, 1);
 80067b0:	2301      	movs	r3, #1
 80067b2:	4630      	mov	r0, r6
 80067b4:	f243 4106 	movw	r1, #13318	; 0x3406
  tmp = 0x00;
 80067b8:	f804 2d01 	strb.w	r2, [r4, #-1]!
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_MANUAL_CONTROL, &tmp, 1);
 80067bc:	4622      	mov	r2, r4
 80067be:	f001 f801 	bl	80077c4 <ov5640_write_reg>
  if (ret == OV5640_OK)
 80067c2:	4605      	mov	r5, r0
 80067c4:	b118      	cbz	r0, 80067ce <OV5640_SetLightMode+0x2e>
}
 80067c6:	4628      	mov	r0, r5
 80067c8:	b003      	add	sp, #12
 80067ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 0x46;
 80067ce:	2546      	movs	r5, #70	; 0x46
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL16, &tmp, 1);
 80067d0:	2301      	movs	r3, #1
 80067d2:	4622      	mov	r2, r4
 80067d4:	f245 1190 	movw	r1, #20880	; 0x5190
 80067d8:	4630      	mov	r0, r6
    tmp = 0x46;
 80067da:	f88d 5007 	strb.w	r5, [sp, #7]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL16, &tmp, 1);
 80067de:	f000 fff1 	bl	80077c4 <ov5640_write_reg>
  if (ret == OV5640_OK)
 80067e2:	4605      	mov	r5, r0
 80067e4:	2800      	cmp	r0, #0
 80067e6:	d1ee      	bne.n	80067c6 <OV5640_SetLightMode+0x26>
    tmp = 0xF8;
 80067e8:	25f8      	movs	r5, #248	; 0xf8
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL17, &tmp, 1);
 80067ea:	2301      	movs	r3, #1
 80067ec:	4622      	mov	r2, r4
 80067ee:	f245 1191 	movw	r1, #20881	; 0x5191
 80067f2:	4630      	mov	r0, r6
    tmp = 0xF8;
 80067f4:	f88d 5007 	strb.w	r5, [sp, #7]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL17, &tmp, 1);
 80067f8:	f000 ffe4 	bl	80077c4 <ov5640_write_reg>
  if (ret == OV5640_OK)
 80067fc:	4605      	mov	r5, r0
 80067fe:	2800      	cmp	r0, #0
 8006800:	d1e1      	bne.n	80067c6 <OV5640_SetLightMode+0x26>
    tmp = 0x04;
 8006802:	2504      	movs	r5, #4
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL18, &tmp, 1);
 8006804:	2301      	movs	r3, #1
 8006806:	4622      	mov	r2, r4
 8006808:	f245 1192 	movw	r1, #20882	; 0x5192
 800680c:	4630      	mov	r0, r6
    tmp = 0x04;
 800680e:	f88d 5007 	strb.w	r5, [sp, #7]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL18, &tmp, 1);
 8006812:	f000 ffd7 	bl	80077c4 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8006816:	4605      	mov	r5, r0
 8006818:	2800      	cmp	r0, #0
 800681a:	d1d4      	bne.n	80067c6 <OV5640_SetLightMode+0x26>
    switch (LightMode)
 800681c:	1e79      	subs	r1, r7, #1
 800681e:	2907      	cmp	r1, #7
 8006820:	d863      	bhi.n	80068ea <OV5640_SetLightMode+0x14a>
 8006822:	e8df f001 	tbb	[pc, r1]
 8006826:	458f      	.short	0x458f
 8006828:	62622762 	.word	0x62622762
 800682c:	0462      	.short	0x0462
 800682e:	f8df 915c 	ldr.w	r9, [pc, #348]	; 800698c <OV5640_SetLightMode+0x1ec>
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 8006832:	2700      	movs	r7, #0
 8006834:	46c8      	mov	r8, r9
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 8006836:	f8b8 c002 	ldrh.w	ip, [r8, #2]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 800683a:	2301      	movs	r3, #1
 800683c:	4622      	mov	r2, r4
 800683e:	f839 1027 	ldrh.w	r1, [r9, r7, lsl #2]
 8006842:	4630      	mov	r0, r6
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 8006844:	f88d c007 	strb.w	ip, [sp, #7]
 8006848:	f108 0804 	add.w	r8, r8, #4
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 800684c:	f000 ffba 	bl	80077c4 <ov5640_write_reg>
 8006850:	1c7b      	adds	r3, r7, #1
 8006852:	2800      	cmp	r0, #0
 8006854:	d06a      	beq.n	800692c <OV5640_SetLightMode+0x18c>
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 8006856:	2b07      	cmp	r3, #7
 8006858:	d006      	beq.n	8006868 <OV5640_SetLightMode+0xc8>
 800685a:	3702      	adds	r7, #2
 800685c:	2f07      	cmp	r7, #7
 800685e:	d003      	beq.n	8006868 <OV5640_SetLightMode+0xc8>
 8006860:	2f06      	cmp	r7, #6
 8006862:	f107 0702 	add.w	r7, r7, #2
 8006866:	d1f9      	bne.n	800685c <OV5640_SetLightMode+0xbc>
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 8006868:	f04f 35ff 	mov.w	r5, #4294967295
}
 800686c:	4628      	mov	r0, r5
 800686e:	b003      	add	sp, #12
 8006870:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006874:	f8df 9118 	ldr.w	r9, [pc, #280]	; 8006990 <OV5640_SetLightMode+0x1f0>
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 8006878:	2700      	movs	r7, #0
 800687a:	46c8      	mov	r8, r9
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 800687c:	f8b8 c002 	ldrh.w	ip, [r8, #2]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 8006880:	2301      	movs	r3, #1
 8006882:	4622      	mov	r2, r4
 8006884:	f839 1027 	ldrh.w	r1, [r9, r7, lsl #2]
 8006888:	4630      	mov	r0, r6
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 800688a:	f88d c007 	strb.w	ip, [sp, #7]
 800688e:	f108 0804 	add.w	r8, r8, #4
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 8006892:	f000 ff97 	bl	80077c4 <ov5640_write_reg>
 8006896:	1c7b      	adds	r3, r7, #1
 8006898:	2800      	cmp	r0, #0
 800689a:	d04b      	beq.n	8006934 <OV5640_SetLightMode+0x194>
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 800689c:	2b07      	cmp	r3, #7
 800689e:	d0e3      	beq.n	8006868 <OV5640_SetLightMode+0xc8>
 80068a0:	3702      	adds	r7, #2
 80068a2:	2f07      	cmp	r7, #7
 80068a4:	d0e0      	beq.n	8006868 <OV5640_SetLightMode+0xc8>
 80068a6:	2f06      	cmp	r7, #6
 80068a8:	f107 0702 	add.w	r7, r7, #2
 80068ac:	d1f9      	bne.n	80068a2 <OV5640_SetLightMode+0x102>
 80068ae:	e7db      	b.n	8006868 <OV5640_SetLightMode+0xc8>
 80068b0:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 8006994 <OV5640_SetLightMode+0x1f4>
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 80068b4:	2700      	movs	r7, #0
 80068b6:	46c8      	mov	r8, r9
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 80068b8:	f8b8 c002 	ldrh.w	ip, [r8, #2]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 80068bc:	2301      	movs	r3, #1
 80068be:	4622      	mov	r2, r4
 80068c0:	f839 1027 	ldrh.w	r1, [r9, r7, lsl #2]
 80068c4:	4630      	mov	r0, r6
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 80068c6:	f88d c007 	strb.w	ip, [sp, #7]
 80068ca:	f108 0804 	add.w	r8, r8, #4
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 80068ce:	f000 ff79 	bl	80077c4 <ov5640_write_reg>
 80068d2:	1c7b      	adds	r3, r7, #1
 80068d4:	b390      	cbz	r0, 800693c <OV5640_SetLightMode+0x19c>
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 80068d6:	2b07      	cmp	r3, #7
 80068d8:	d0c6      	beq.n	8006868 <OV5640_SetLightMode+0xc8>
 80068da:	3702      	adds	r7, #2
 80068dc:	2f07      	cmp	r7, #7
 80068de:	d0c3      	beq.n	8006868 <OV5640_SetLightMode+0xc8>
 80068e0:	2f06      	cmp	r7, #6
 80068e2:	f107 0702 	add.w	r7, r7, #2
 80068e6:	d1f9      	bne.n	80068dc <OV5640_SetLightMode+0x13c>
 80068e8:	e7be      	b.n	8006868 <OV5640_SetLightMode+0xc8>
 80068ea:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8006998 <OV5640_SetLightMode+0x1f8>
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 80068ee:	2700      	movs	r7, #0
 80068f0:	46c8      	mov	r8, r9
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 80068f2:	f8b8 c002 	ldrh.w	ip, [r8, #2]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 80068f6:	2301      	movs	r3, #1
 80068f8:	4622      	mov	r2, r4
 80068fa:	f839 1027 	ldrh.w	r1, [r9, r7, lsl #2]
 80068fe:	4630      	mov	r0, r6
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 8006900:	f88d c007 	strb.w	ip, [sp, #7]
 8006904:	f108 0804 	add.w	r8, r8, #4
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 8006908:	f000 ff5c 	bl	80077c4 <ov5640_write_reg>
 800690c:	1c7b      	adds	r3, r7, #1
 800690e:	b148      	cbz	r0, 8006924 <OV5640_SetLightMode+0x184>
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 8006910:	2b07      	cmp	r3, #7
 8006912:	d0a9      	beq.n	8006868 <OV5640_SetLightMode+0xc8>
 8006914:	3702      	adds	r7, #2
 8006916:	2f07      	cmp	r7, #7
 8006918:	d0a6      	beq.n	8006868 <OV5640_SetLightMode+0xc8>
 800691a:	2f06      	cmp	r7, #6
 800691c:	f107 0702 	add.w	r7, r7, #2
 8006920:	d1f9      	bne.n	8006916 <OV5640_SetLightMode+0x176>
 8006922:	e7a1      	b.n	8006868 <OV5640_SetLightMode+0xc8>
 8006924:	2b07      	cmp	r3, #7
 8006926:	461f      	mov	r7, r3
 8006928:	d1e3      	bne.n	80068f2 <OV5640_SetLightMode+0x152>
 800692a:	e74c      	b.n	80067c6 <OV5640_SetLightMode+0x26>
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 800692c:	2b07      	cmp	r3, #7
 800692e:	461f      	mov	r7, r3
 8006930:	d181      	bne.n	8006836 <OV5640_SetLightMode+0x96>
 8006932:	e748      	b.n	80067c6 <OV5640_SetLightMode+0x26>
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 8006934:	2b07      	cmp	r3, #7
 8006936:	461f      	mov	r7, r3
 8006938:	d1a0      	bne.n	800687c <OV5640_SetLightMode+0xdc>
 800693a:	e744      	b.n	80067c6 <OV5640_SetLightMode+0x26>
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 800693c:	2b07      	cmp	r3, #7
 800693e:	461f      	mov	r7, r3
 8006940:	d1ba      	bne.n	80068b8 <OV5640_SetLightMode+0x118>
 8006942:	e740      	b.n	80067c6 <OV5640_SetLightMode+0x26>
 8006944:	f8df 9054 	ldr.w	r9, [pc, #84]	; 800699c <OV5640_SetLightMode+0x1fc>
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 8006948:	2700      	movs	r7, #0
 800694a:	46c8      	mov	r8, r9
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 800694c:	f8b8 c002 	ldrh.w	ip, [r8, #2]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 8006950:	2301      	movs	r3, #1
 8006952:	4622      	mov	r2, r4
 8006954:	f839 1027 	ldrh.w	r1, [r9, r7, lsl #2]
 8006958:	4630      	mov	r0, r6
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 800695a:	f88d c007 	strb.w	ip, [sp, #7]
 800695e:	f108 0804 	add.w	r8, r8, #4
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 8006962:	f000 ff2f 	bl	80077c4 <ov5640_write_reg>
 8006966:	1c7b      	adds	r3, r7, #1
 8006968:	b158      	cbz	r0, 8006982 <OV5640_SetLightMode+0x1e2>
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 800696a:	2b07      	cmp	r3, #7
 800696c:	f43f af7c 	beq.w	8006868 <OV5640_SetLightMode+0xc8>
 8006970:	3702      	adds	r7, #2
 8006972:	2f07      	cmp	r7, #7
 8006974:	f43f af78 	beq.w	8006868 <OV5640_SetLightMode+0xc8>
 8006978:	2f06      	cmp	r7, #6
 800697a:	f107 0702 	add.w	r7, r7, #2
 800697e:	d1f8      	bne.n	8006972 <OV5640_SetLightMode+0x1d2>
 8006980:	e772      	b.n	8006868 <OV5640_SetLightMode+0xc8>
 8006982:	2b07      	cmp	r3, #7
 8006984:	461f      	mov	r7, r3
 8006986:	d1e1      	bne.n	800694c <OV5640_SetLightMode+0x1ac>
 8006988:	e71d      	b.n	80067c6 <OV5640_SetLightMode+0x26>
 800698a:	bf00      	nop
 800698c:	08021004 	.word	0x08021004
 8006990:	08021020 	.word	0x08021020
 8006994:	0802103c 	.word	0x0802103c
 8006998:	08020fe8 	.word	0x08020fe8
 800699c:	08021058 	.word	0x08021058

080069a0 <OV5640_SetColorEffect>:
  switch (Effect)
 80069a0:	3901      	subs	r1, #1
{
 80069a2:	b570      	push	{r4, r5, r6, lr}
 80069a4:	f100 0418 	add.w	r4, r0, #24
 80069a8:	b082      	sub	sp, #8
  switch (Effect)
 80069aa:	291f      	cmp	r1, #31
 80069ac:	f200 80fd 	bhi.w	8006baa <OV5640_SetColorEffect+0x20a>
 80069b0:	e8df f011 	tbh	[pc, r1, lsl #1]
 80069b4:	005e0032 	.word	0x005e0032
 80069b8:	008a00fb 	.word	0x008a00fb
 80069bc:	00fb00fb 	.word	0x00fb00fb
 80069c0:	00a500fb 	.word	0x00a500fb
 80069c4:	00fb00fb 	.word	0x00fb00fb
 80069c8:	00fb00fb 	.word	0x00fb00fb
 80069cc:	00fb00fb 	.word	0x00fb00fb
 80069d0:	00cc00fb 	.word	0x00cc00fb
 80069d4:	00fb00fb 	.word	0x00fb00fb
 80069d8:	00fb00fb 	.word	0x00fb00fb
 80069dc:	00fb00fb 	.word	0x00fb00fb
 80069e0:	00fb00fb 	.word	0x00fb00fb
 80069e4:	00fb00fb 	.word	0x00fb00fb
 80069e8:	00fb00fb 	.word	0x00fb00fb
 80069ec:	00fb00fb 	.word	0x00fb00fb
 80069f0:	002000fb 	.word	0x002000fb
      tmp = 0xFF;
 80069f4:	22ff      	movs	r2, #255	; 0xff
 80069f6:	ad02      	add	r5, sp, #8
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80069f8:	2301      	movs	r3, #1
 80069fa:	f245 0101 	movw	r1, #20481	; 0x5001
      tmp = 0xFF;
 80069fe:	f805 2d01 	strb.w	r2, [r5, #-1]!
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8006a02:	4620      	mov	r0, r4
 8006a04:	462a      	mov	r2, r5
 8006a06:	f000 fedd 	bl	80077c4 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8006a0a:	2800      	cmp	r0, #0
 8006a0c:	f000 80eb 	beq.w	8006be6 <OV5640_SetColorEffect+0x246>
        ret = OV5640_ERROR;
 8006a10:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006a14:	b002      	add	sp, #8
 8006a16:	bd70      	pop	{r4, r5, r6, pc}
      tmp = 0xFF;
 8006a18:	22ff      	movs	r2, #255	; 0xff
 8006a1a:	ad02      	add	r5, sp, #8
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	f245 0101 	movw	r1, #20481	; 0x5001
      tmp = 0xFF;
 8006a22:	f805 2d01 	strb.w	r2, [r5, #-1]!
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8006a26:	4620      	mov	r0, r4
 8006a28:	462a      	mov	r2, r5
 8006a2a:	f000 fecb 	bl	80077c4 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8006a2e:	2800      	cmp	r0, #0
 8006a30:	d1ee      	bne.n	8006a10 <OV5640_SetColorEffect+0x70>
        tmp = 0x18;
 8006a32:	2618      	movs	r6, #24
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8006a34:	2301      	movs	r3, #1
 8006a36:	462a      	mov	r2, r5
 8006a38:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8006a3c:	4620      	mov	r0, r4
        tmp = 0x18;
 8006a3e:	f88d 6007 	strb.w	r6, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8006a42:	f000 febf 	bl	80077c4 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8006a46:	2800      	cmp	r0, #0
 8006a48:	d1e2      	bne.n	8006a10 <OV5640_SetColorEffect+0x70>
        tmp = 0xA0;
 8006a4a:	26a0      	movs	r6, #160	; 0xa0
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	462a      	mov	r2, r5
 8006a50:	f245 5183 	movw	r1, #21891	; 0x5583
 8006a54:	4620      	mov	r0, r4
        tmp = 0xA0;
 8006a56:	f88d 6007 	strb.w	r6, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8006a5a:	f000 feb3 	bl	80077c4 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8006a5e:	2800      	cmp	r0, #0
 8006a60:	d1d6      	bne.n	8006a10 <OV5640_SetColorEffect+0x70>
        tmp = 0x40;
 8006a62:	2640      	movs	r6, #64	; 0x40
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8006a64:	462a      	mov	r2, r5
 8006a66:	4620      	mov	r0, r4
 8006a68:	2301      	movs	r3, #1
 8006a6a:	f245 5184 	movw	r1, #21892	; 0x5584
 8006a6e:	e0b0      	b.n	8006bd2 <OV5640_SetColorEffect+0x232>
      tmp = 0xFF;
 8006a70:	22ff      	movs	r2, #255	; 0xff
 8006a72:	ad02      	add	r5, sp, #8
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8006a74:	2301      	movs	r3, #1
 8006a76:	f245 0101 	movw	r1, #20481	; 0x5001
      tmp = 0xFF;
 8006a7a:	f805 2d01 	strb.w	r2, [r5, #-1]!
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8006a7e:	4620      	mov	r0, r4
 8006a80:	462a      	mov	r2, r5
 8006a82:	f000 fe9f 	bl	80077c4 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8006a86:	2800      	cmp	r0, #0
 8006a88:	d1c2      	bne.n	8006a10 <OV5640_SetColorEffect+0x70>
        tmp = 0x18;
 8006a8a:	2618      	movs	r6, #24
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	462a      	mov	r2, r5
 8006a90:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8006a94:	4620      	mov	r0, r4
        tmp = 0x18;
 8006a96:	f88d 6007 	strb.w	r6, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8006a9a:	f000 fe93 	bl	80077c4 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8006a9e:	2800      	cmp	r0, #0
 8006aa0:	d1b6      	bne.n	8006a10 <OV5640_SetColorEffect+0x70>
        tmp = 0x80;
 8006aa2:	2680      	movs	r6, #128	; 0x80
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	462a      	mov	r2, r5
 8006aa8:	f245 5183 	movw	r1, #21891	; 0x5583
 8006aac:	4620      	mov	r0, r4
        tmp = 0x80;
 8006aae:	f88d 6007 	strb.w	r6, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8006ab2:	f000 fe87 	bl	80077c4 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8006ab6:	2800      	cmp	r0, #0
 8006ab8:	d1aa      	bne.n	8006a10 <OV5640_SetColorEffect+0x70>
        tmp = 0xC0;
 8006aba:	26c0      	movs	r6, #192	; 0xc0
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8006abc:	462a      	mov	r2, r5
 8006abe:	4620      	mov	r0, r4
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	f245 5184 	movw	r1, #21892	; 0x5584
 8006ac6:	e084      	b.n	8006bd2 <OV5640_SetColorEffect+0x232>
      tmp = 0xFF;
 8006ac8:	22ff      	movs	r2, #255	; 0xff
 8006aca:	ad02      	add	r5, sp, #8
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8006acc:	2301      	movs	r3, #1
 8006ace:	f245 0101 	movw	r1, #20481	; 0x5001
      tmp = 0xFF;
 8006ad2:	f805 2d01 	strb.w	r2, [r5, #-1]!
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8006ad6:	4620      	mov	r0, r4
 8006ad8:	462a      	mov	r2, r5
 8006ada:	f000 fe73 	bl	80077c4 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8006ade:	2800      	cmp	r0, #0
 8006ae0:	d196      	bne.n	8006a10 <OV5640_SetColorEffect+0x70>
        tmp = 0x18;
 8006ae2:	2618      	movs	r6, #24
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	462a      	mov	r2, r5
 8006ae8:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8006aec:	4620      	mov	r0, r4
        tmp = 0x18;
 8006aee:	f88d 6007 	strb.w	r6, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8006af2:	f000 fe67 	bl	80077c4 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8006af6:	2800      	cmp	r0, #0
 8006af8:	d18a      	bne.n	8006a10 <OV5640_SetColorEffect+0x70>
        tmp = 0x60;
 8006afa:	2660      	movs	r6, #96	; 0x60
 8006afc:	e01b      	b.n	8006b36 <OV5640_SetColorEffect+0x196>
      tmp = 0xFF;
 8006afe:	22ff      	movs	r2, #255	; 0xff
 8006b00:	ad02      	add	r5, sp, #8
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8006b02:	2301      	movs	r3, #1
 8006b04:	f245 0101 	movw	r1, #20481	; 0x5001
      tmp = 0xFF;
 8006b08:	f805 2d01 	strb.w	r2, [r5, #-1]!
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8006b0c:	4620      	mov	r0, r4
 8006b0e:	462a      	mov	r2, r5
 8006b10:	f000 fe58 	bl	80077c4 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8006b14:	2800      	cmp	r0, #0
 8006b16:	f47f af7b 	bne.w	8006a10 <OV5640_SetColorEffect+0x70>
        tmp = 0x18;
 8006b1a:	2618      	movs	r6, #24
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	462a      	mov	r2, r5
 8006b20:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8006b24:	4620      	mov	r0, r4
        tmp = 0x18;
 8006b26:	f88d 6007 	strb.w	r6, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8006b2a:	f000 fe4b 	bl	80077c4 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8006b2e:	2800      	cmp	r0, #0
 8006b30:	f47f af6e 	bne.w	8006a10 <OV5640_SetColorEffect+0x70>
        tmp = 0x80;
 8006b34:	2680      	movs	r6, #128	; 0x80
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8006b36:	2301      	movs	r3, #1
 8006b38:	462a      	mov	r2, r5
 8006b3a:	f245 5183 	movw	r1, #21891	; 0x5583
 8006b3e:	4620      	mov	r0, r4
        tmp = 0x80;
 8006b40:	f88d 6007 	strb.w	r6, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8006b44:	f000 fe3e 	bl	80077c4 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8006b48:	b348      	cbz	r0, 8006b9e <OV5640_SetColorEffect+0x1fe>
 8006b4a:	e761      	b.n	8006a10 <OV5640_SetColorEffect+0x70>
      tmp = 0xFF;
 8006b4c:	22ff      	movs	r2, #255	; 0xff
 8006b4e:	ad02      	add	r5, sp, #8
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8006b50:	2301      	movs	r3, #1
 8006b52:	f245 0101 	movw	r1, #20481	; 0x5001
      tmp = 0xFF;
 8006b56:	f805 2d01 	strb.w	r2, [r5, #-1]!
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8006b5a:	4620      	mov	r0, r4
 8006b5c:	462a      	mov	r2, r5
 8006b5e:	f000 fe31 	bl	80077c4 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8006b62:	2800      	cmp	r0, #0
 8006b64:	f47f af54 	bne.w	8006a10 <OV5640_SetColorEffect+0x70>
        tmp = 0x18;
 8006b68:	2618      	movs	r6, #24
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	462a      	mov	r2, r5
 8006b6e:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8006b72:	4620      	mov	r0, r4
        tmp = 0x18;
 8006b74:	f88d 6007 	strb.w	r6, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8006b78:	f000 fe24 	bl	80077c4 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8006b7c:	2800      	cmp	r0, #0
 8006b7e:	f47f af47 	bne.w	8006a10 <OV5640_SetColorEffect+0x70>
        tmp = 0x40;
 8006b82:	2640      	movs	r6, #64	; 0x40
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8006b84:	2301      	movs	r3, #1
 8006b86:	462a      	mov	r2, r5
 8006b88:	f245 5183 	movw	r1, #21891	; 0x5583
 8006b8c:	4620      	mov	r0, r4
        tmp = 0x40;
 8006b8e:	f88d 6007 	strb.w	r6, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8006b92:	f000 fe17 	bl	80077c4 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8006b96:	2800      	cmp	r0, #0
 8006b98:	f47f af3a 	bne.w	8006a10 <OV5640_SetColorEffect+0x70>
        tmp = 0xA0;
 8006b9c:	26a0      	movs	r6, #160	; 0xa0
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8006b9e:	462a      	mov	r2, r5
 8006ba0:	4620      	mov	r0, r4
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	f245 5184 	movw	r1, #21892	; 0x5584
 8006ba8:	e013      	b.n	8006bd2 <OV5640_SetColorEffect+0x232>
      tmp = 0x7F;
 8006baa:	227f      	movs	r2, #127	; 0x7f
 8006bac:	ad02      	add	r5, sp, #8
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8006bae:	2301      	movs	r3, #1
 8006bb0:	f245 0101 	movw	r1, #20481	; 0x5001
      tmp = 0x7F;
 8006bb4:	f805 2d01 	strb.w	r2, [r5, #-1]!
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8006bb8:	4620      	mov	r0, r4
 8006bba:	462a      	mov	r2, r5
 8006bbc:	f000 fe02 	bl	80077c4 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8006bc0:	4606      	mov	r6, r0
 8006bc2:	2800      	cmp	r0, #0
 8006bc4:	f47f af24 	bne.w	8006a10 <OV5640_SetColorEffect+0x70>
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8006bc8:	462a      	mov	r2, r5
 8006bca:	4620      	mov	r0, r4
 8006bcc:	2301      	movs	r3, #1
 8006bce:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
        tmp = 0x00;
 8006bd2:	f88d 6007 	strb.w	r6, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8006bd6:	f000 fdf5 	bl	80077c4 <ov5640_write_reg>
      if (ret != OV5640_OK)
 8006bda:	3000      	adds	r0, #0
 8006bdc:	bf18      	it	ne
 8006bde:	2001      	movne	r0, #1
 8006be0:	4240      	negs	r0, r0
}
 8006be2:	b002      	add	sp, #8
 8006be4:	bd70      	pop	{r4, r5, r6, pc}
        tmp = 0x40;
 8006be6:	2640      	movs	r6, #64	; 0x40
 8006be8:	e7ee      	b.n	8006bc8 <OV5640_SetColorEffect+0x228>
 8006bea:	bf00      	nop

08006bec <OV5640_SetBrightness>:
{
 8006bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 8006bf0:	4b27      	ldr	r3, [pc, #156]	; (8006c90 <OV5640_SetBrightness+0xa4>)
{
 8006bf2:	b084      	sub	sp, #16
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8006bf4:	f100 0518 	add.w	r5, r0, #24
{
 8006bf8:	4688      	mov	r8, r1
  tmp = 0xFF;
 8006bfa:	af04      	add	r7, sp, #16
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 8006bfc:	ac01      	add	r4, sp, #4
  tmp = 0xFF;
 8006bfe:	26ff      	movs	r6, #255	; 0xff
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 8006c00:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  tmp = 0xFF;
 8006c04:	f807 6d0d 	strb.w	r6, [r7, #-13]!
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8006c08:	2301      	movs	r3, #1
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 8006c0a:	c403      	stmia	r4!, {r0, r1}
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8006c0c:	4628      	mov	r0, r5
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 8006c0e:	7022      	strb	r2, [r4, #0]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8006c10:	f245 0101 	movw	r1, #20481	; 0x5001
 8006c14:	463a      	mov	r2, r7
 8006c16:	f000 fdd5 	bl	80077c4 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8006c1a:	b110      	cbz	r0, 8006c22 <OV5640_SetBrightness+0x36>
}
 8006c1c:	b004      	add	sp, #16
 8006c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmp = brightness_level[Level + 4];
 8006c22:	a804      	add	r0, sp, #16
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL7, &tmp, 1);
 8006c24:	2301      	movs	r3, #1
 8006c26:	463a      	mov	r2, r7
 8006c28:	f245 5187 	movw	r1, #21895	; 0x5587
    tmp = brightness_level[Level + 4];
 8006c2c:	4440      	add	r0, r8
 8006c2e:	f810 4c08 	ldrb.w	r4, [r0, #-8]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL7, &tmp, 1);
 8006c32:	4628      	mov	r0, r5
    tmp = brightness_level[Level + 4];
 8006c34:	f88d 4003 	strb.w	r4, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL7, &tmp, 1);
 8006c38:	f000 fdc4 	bl	80077c4 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8006c3c:	2800      	cmp	r0, #0
 8006c3e:	d1ed      	bne.n	8006c1c <OV5640_SetBrightness+0x30>
    tmp = 0x04;
 8006c40:	2404      	movs	r4, #4
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8006c42:	2301      	movs	r3, #1
 8006c44:	463a      	mov	r2, r7
 8006c46:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8006c4a:	4628      	mov	r0, r5
    tmp = 0x04;
 8006c4c:	f88d 4003 	strb.w	r4, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8006c50:	f000 fdb8 	bl	80077c4 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8006c54:	2800      	cmp	r0, #0
 8006c56:	d1e1      	bne.n	8006c1c <OV5640_SetBrightness+0x30>
    if (Level < 0)
 8006c58:	f1b8 0f00 	cmp.w	r8, #0
 8006c5c:	db10      	blt.n	8006c80 <OV5640_SetBrightness+0x94>
      tmp = 0x09;
 8006c5e:	2409      	movs	r4, #9
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 8006c60:	463a      	mov	r2, r7
 8006c62:	4628      	mov	r0, r5
 8006c64:	2301      	movs	r3, #1
 8006c66:	f245 5188 	movw	r1, #21896	; 0x5588
      tmp = 0x09;
 8006c6a:	f88d 4003 	strb.w	r4, [sp, #3]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 8006c6e:	f000 fda9 	bl	80077c4 <ov5640_write_reg>
 8006c72:	3000      	adds	r0, #0
 8006c74:	bf18      	it	ne
 8006c76:	2001      	movne	r0, #1
 8006c78:	4240      	negs	r0, r0
}
 8006c7a:	b004      	add	sp, #16
 8006c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmp = 0x01;
 8006c80:	2401      	movs	r4, #1
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 8006c82:	463a      	mov	r2, r7
 8006c84:	4628      	mov	r0, r5
 8006c86:	f245 5188 	movw	r1, #21896	; 0x5588
 8006c8a:	4623      	mov	r3, r4
 8006c8c:	e7ed      	b.n	8006c6a <OV5640_SetBrightness+0x7e>
 8006c8e:	bf00      	nop
 8006c90:	0801ffa0 	.word	0x0801ffa0

08006c94 <OV5640_SetSaturation>:
{
 8006c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 8006c98:	4b27      	ldr	r3, [pc, #156]	; (8006d38 <OV5640_SetSaturation+0xa4>)
{
 8006c9a:	b084      	sub	sp, #16
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8006c9c:	f100 0518 	add.w	r5, r0, #24
{
 8006ca0:	4688      	mov	r8, r1
  tmp = 0xFF;
 8006ca2:	af04      	add	r7, sp, #16
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 8006ca4:	ac01      	add	r4, sp, #4
  tmp = 0xFF;
 8006ca6:	26ff      	movs	r6, #255	; 0xff
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 8006ca8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  tmp = 0xFF;
 8006cac:	f807 6d0d 	strb.w	r6, [r7, #-13]!
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8006cb0:	2301      	movs	r3, #1
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 8006cb2:	c403      	stmia	r4!, {r0, r1}
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8006cb4:	4628      	mov	r0, r5
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 8006cb6:	7022      	strb	r2, [r4, #0]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8006cb8:	f245 0101 	movw	r1, #20481	; 0x5001
 8006cbc:	463a      	mov	r2, r7
 8006cbe:	f000 fd81 	bl	80077c4 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8006cc2:	b120      	cbz	r0, 8006cce <OV5640_SetSaturation+0x3a>
    ret = OV5640_ERROR;
 8006cc4:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006cc8:	b004      	add	sp, #16
 8006cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmp = saturation_level[Level + 4];
 8006cce:	ab04      	add	r3, sp, #16
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8006cd0:	463a      	mov	r2, r7
 8006cd2:	f245 5183 	movw	r1, #21891	; 0x5583
 8006cd6:	4628      	mov	r0, r5
    tmp = saturation_level[Level + 4];
 8006cd8:	4498      	add	r8, r3
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8006cda:	2301      	movs	r3, #1
    tmp = saturation_level[Level + 4];
 8006cdc:	f818 4c08 	ldrb.w	r4, [r8, #-8]
 8006ce0:	f88d 4003 	strb.w	r4, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8006ce4:	f000 fd6e 	bl	80077c4 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8006ce8:	2800      	cmp	r0, #0
 8006cea:	d1eb      	bne.n	8006cc4 <OV5640_SetSaturation+0x30>
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8006cec:	2301      	movs	r3, #1
 8006cee:	463a      	mov	r2, r7
 8006cf0:	f245 5184 	movw	r1, #21892	; 0x5584
 8006cf4:	4628      	mov	r0, r5
 8006cf6:	f000 fd65 	bl	80077c4 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8006cfa:	2800      	cmp	r0, #0
 8006cfc:	d1e2      	bne.n	8006cc4 <OV5640_SetSaturation+0x30>
    tmp = 0x02;
 8006cfe:	2402      	movs	r4, #2
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8006d00:	2301      	movs	r3, #1
 8006d02:	463a      	mov	r2, r7
 8006d04:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8006d08:	4628      	mov	r0, r5
    tmp = 0x02;
 8006d0a:	f88d 4003 	strb.w	r4, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8006d0e:	f000 fd59 	bl	80077c4 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8006d12:	2800      	cmp	r0, #0
 8006d14:	d1d6      	bne.n	8006cc4 <OV5640_SetSaturation+0x30>
    tmp = 0x41;
 8006d16:	2441      	movs	r4, #65	; 0x41
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8006d18:	463a      	mov	r2, r7
 8006d1a:	4628      	mov	r0, r5
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	f245 5188 	movw	r1, #21896	; 0x5588
    tmp = 0x41;
 8006d22:	f88d 4003 	strb.w	r4, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8006d26:	f000 fd4d 	bl	80077c4 <ov5640_write_reg>
  if (ret != OV5640_OK)
 8006d2a:	3000      	adds	r0, #0
 8006d2c:	bf18      	it	ne
 8006d2e:	2001      	movne	r0, #1
 8006d30:	4240      	negs	r0, r0
}
 8006d32:	b004      	add	sp, #16
 8006d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d38:	0801ffac 	.word	0x0801ffac

08006d3c <OV5640_SetContrast>:
{
 8006d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 8006d40:	4b27      	ldr	r3, [pc, #156]	; (8006de0 <OV5640_SetContrast+0xa4>)
{
 8006d42:	b084      	sub	sp, #16
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8006d44:	f100 0518 	add.w	r5, r0, #24
{
 8006d48:	4688      	mov	r8, r1
  tmp = 0xFF;
 8006d4a:	af04      	add	r7, sp, #16
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 8006d4c:	ac01      	add	r4, sp, #4
  tmp = 0xFF;
 8006d4e:	26ff      	movs	r6, #255	; 0xff
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 8006d50:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  tmp = 0xFF;
 8006d54:	f807 6d0d 	strb.w	r6, [r7, #-13]!
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8006d58:	2301      	movs	r3, #1
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 8006d5a:	c403      	stmia	r4!, {r0, r1}
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8006d5c:	4628      	mov	r0, r5
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 8006d5e:	7022      	strb	r2, [r4, #0]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8006d60:	f245 0101 	movw	r1, #20481	; 0x5001
 8006d64:	463a      	mov	r2, r7
 8006d66:	f000 fd2d 	bl	80077c4 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8006d6a:	b120      	cbz	r0, 8006d76 <OV5640_SetContrast+0x3a>
    ret = OV5640_ERROR;
 8006d6c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006d70:	b004      	add	sp, #16
 8006d72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmp = 0x04;
 8006d76:	2404      	movs	r4, #4
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8006d78:	2301      	movs	r3, #1
 8006d7a:	463a      	mov	r2, r7
 8006d7c:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8006d80:	4628      	mov	r0, r5
    tmp = 0x04;
 8006d82:	f88d 4003 	strb.w	r4, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8006d86:	f000 fd1d 	bl	80077c4 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8006d8a:	2800      	cmp	r0, #0
 8006d8c:	d1ee      	bne.n	8006d6c <OV5640_SetContrast+0x30>
    tmp = contrast_level[Level + 4];
 8006d8e:	ab04      	add	r3, sp, #16
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL6, &tmp, 1);
 8006d90:	463a      	mov	r2, r7
 8006d92:	f245 5186 	movw	r1, #21894	; 0x5586
 8006d96:	4628      	mov	r0, r5
    tmp = contrast_level[Level + 4];
 8006d98:	4498      	add	r8, r3
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL6, &tmp, 1);
 8006d9a:	2301      	movs	r3, #1
    tmp = contrast_level[Level + 4];
 8006d9c:	f818 4c08 	ldrb.w	r4, [r8, #-8]
 8006da0:	f88d 4003 	strb.w	r4, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL6, &tmp, 1);
 8006da4:	f000 fd0e 	bl	80077c4 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8006da8:	2800      	cmp	r0, #0
 8006daa:	d1df      	bne.n	8006d6c <OV5640_SetContrast+0x30>
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL5, &tmp, 1);
 8006dac:	2301      	movs	r3, #1
 8006dae:	463a      	mov	r2, r7
 8006db0:	f245 5185 	movw	r1, #21893	; 0x5585
 8006db4:	4628      	mov	r0, r5
 8006db6:	f000 fd05 	bl	80077c4 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8006dba:	2800      	cmp	r0, #0
 8006dbc:	d1d6      	bne.n	8006d6c <OV5640_SetContrast+0x30>
    tmp = 0x41;
 8006dbe:	2441      	movs	r4, #65	; 0x41
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8006dc0:	463a      	mov	r2, r7
 8006dc2:	4628      	mov	r0, r5
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	f245 5188 	movw	r1, #21896	; 0x5588
    tmp = 0x41;
 8006dca:	f88d 4003 	strb.w	r4, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8006dce:	f000 fcf9 	bl	80077c4 <ov5640_write_reg>
  if (ret != OV5640_OK)
 8006dd2:	3000      	adds	r0, #0
 8006dd4:	bf18      	it	ne
 8006dd6:	2001      	movne	r0, #1
 8006dd8:	4240      	negs	r0, r0
}
 8006dda:	b004      	add	sp, #16
 8006ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006de0:	0801ffb8 	.word	0x0801ffb8

08006de4 <OV5640_SetHueDegree>:
{
 8006de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 8006de8:	4c31      	ldr	r4, [pc, #196]	; (8006eb0 <OV5640_SetHueDegree+0xcc>)
{
 8006dea:	b08a      	sub	sp, #40	; 0x28
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8006dec:	f100 0518 	add.w	r5, r0, #24
{
 8006df0:	4688      	mov	r8, r1
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 8006df2:	f104 060c 	add.w	r6, r4, #12
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 8006df6:	af01      	add	r7, sp, #4
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 8006df8:	ab04      	add	r3, sp, #16
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 8006dfa:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
  const uint8_t hue_degree_ctrl8[] = {0x32U, 0x32U, 0x32U, 0x02U, 0x02U, 0x02U, 0x01U, 0x01U, 0x01U, 0x31U, 0x31U,
 8006dfe:	3418      	adds	r4, #24
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 8006e00:	e887 0007 	stmia.w	r7, {r0, r1, r2}
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 8006e04:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
  tmp = 0xFF;
 8006e08:	27ff      	movs	r7, #255	; 0xff
 8006e0a:	ae0a      	add	r6, sp, #40	; 0x28
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 8006e0c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  const uint8_t hue_degree_ctrl8[] = {0x32U, 0x32U, 0x32U, 0x02U, 0x02U, 0x02U, 0x01U, 0x01U, 0x01U, 0x31U, 0x31U,
 8006e10:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8006e14:	ac0a      	add	r4, sp, #40	; 0x28
  tmp = 0xFF;
 8006e16:	f806 7d25 	strb.w	r7, [r6, #-37]!
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8006e1a:	2301      	movs	r3, #1
  const uint8_t hue_degree_ctrl8[] = {0x32U, 0x32U, 0x32U, 0x02U, 0x02U, 0x02U, 0x01U, 0x01U, 0x01U, 0x31U, 0x31U,
 8006e1c:	e904 0007 	stmdb	r4, {r0, r1, r2}
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8006e20:	4628      	mov	r0, r5
 8006e22:	4632      	mov	r2, r6
 8006e24:	f245 0101 	movw	r1, #20481	; 0x5001
 8006e28:	f000 fccc 	bl	80077c4 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8006e2c:	b120      	cbz	r0, 8006e38 <OV5640_SetHueDegree+0x54>
    ret = OV5640_ERROR;
 8006e2e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006e32:	b00a      	add	sp, #40	; 0x28
 8006e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmp = 0x01;
 8006e38:	2401      	movs	r4, #1
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8006e3a:	4632      	mov	r2, r6
 8006e3c:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8006e40:	4628      	mov	r0, r5
 8006e42:	4623      	mov	r3, r4
    tmp = 0x01;
 8006e44:	f88d 4003 	strb.w	r4, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8006e48:	f000 fcbc 	bl	80077c4 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8006e4c:	2800      	cmp	r0, #0
 8006e4e:	d1ee      	bne.n	8006e2e <OV5640_SetHueDegree+0x4a>
    tmp = hue_degree_ctrl1[Degree + 6];
 8006e50:	a80a      	add	r0, sp, #40	; 0x28
 8006e52:	f108 0806 	add.w	r8, r8, #6
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL1, &tmp, 1);
 8006e56:	4623      	mov	r3, r4
 8006e58:	4632      	mov	r2, r6
    tmp = hue_degree_ctrl1[Degree + 6];
 8006e5a:	4480      	add	r8, r0
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL1, &tmp, 1);
 8006e5c:	f245 5181 	movw	r1, #21889	; 0x5581
 8006e60:	4628      	mov	r0, r5
    tmp = hue_degree_ctrl1[Degree + 6];
 8006e62:	f818 7c24 	ldrb.w	r7, [r8, #-36]
 8006e66:	f88d 7003 	strb.w	r7, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL1, &tmp, 1);
 8006e6a:	f000 fcab 	bl	80077c4 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8006e6e:	2800      	cmp	r0, #0
 8006e70:	d1dd      	bne.n	8006e2e <OV5640_SetHueDegree+0x4a>
    tmp = hue_degree_ctrl2[Degree + 6];
 8006e72:	f818 7c18 	ldrb.w	r7, [r8, #-24]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL2, &tmp, 1);
 8006e76:	4623      	mov	r3, r4
 8006e78:	4632      	mov	r2, r6
 8006e7a:	f245 5182 	movw	r1, #21890	; 0x5582
 8006e7e:	4628      	mov	r0, r5
    tmp = hue_degree_ctrl2[Degree + 6];
 8006e80:	f88d 7003 	strb.w	r7, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL2, &tmp, 1);
 8006e84:	f000 fc9e 	bl	80077c4 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8006e88:	2800      	cmp	r0, #0
 8006e8a:	d1d0      	bne.n	8006e2e <OV5640_SetHueDegree+0x4a>
    tmp = hue_degree_ctrl8[Degree + 6];
 8006e8c:	f818 7c0c 	ldrb.w	r7, [r8, #-12]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8006e90:	4623      	mov	r3, r4
 8006e92:	4632      	mov	r2, r6
 8006e94:	4628      	mov	r0, r5
 8006e96:	f245 5188 	movw	r1, #21896	; 0x5588
    tmp = hue_degree_ctrl8[Degree + 6];
 8006e9a:	f88d 7003 	strb.w	r7, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8006e9e:	f000 fc91 	bl	80077c4 <ov5640_write_reg>
  if (ret != OV5640_OK)
 8006ea2:	3000      	adds	r0, #0
 8006ea4:	bf18      	it	ne
 8006ea6:	2001      	movne	r0, #1
 8006ea8:	4240      	negs	r0, r0
}
 8006eaa:	b00a      	add	sp, #40	; 0x28
 8006eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006eb0:	0801ffc4 	.word	0x0801ffc4

08006eb4 <OV5640_SetPixelFormat>:
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 8006eb4:	2902      	cmp	r1, #2
{
 8006eb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006eba:	b082      	sub	sp, #8
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 8006ebc:	d902      	bls.n	8006ec4 <OV5640_SetPixelFormat+0x10>
      (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8006ebe:	1fcb      	subs	r3, r1, #7
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d854      	bhi.n	8006f6e <OV5640_SetPixelFormat+0xba>
    switch (PixelFormat)
 8006ec4:	3901      	subs	r1, #1
 8006ec6:	4604      	mov	r4, r0
 8006ec8:	f100 0618 	add.w	r6, r0, #24
 8006ecc:	2907      	cmp	r1, #7
 8006ece:	f200 80fb 	bhi.w	80070c8 <OV5640_SetPixelFormat+0x214>
 8006ed2:	e8df f011 	tbh	[pc, r1, lsl #1]
 8006ed6:	007b      	.short	0x007b
 8006ed8:	00f900a7 	.word	0x00f900a7
 8006edc:	00f900f9 	.word	0x00f900f9
 8006ee0:	00cf00f9 	.word	0x00cf00f9
 8006ee4:	0052      	.short	0x0052
              ret = OV5640_ERROR;
 8006ee6:	f04f 37ff 	mov.w	r7, #4294967295
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8006eea:	2301      	movs	r3, #1
 8006eec:	462a      	mov	r2, r5
 8006eee:	f643 0121 	movw	r1, #14369	; 0x3821
 8006ef2:	4630      	mov	r0, r6
 8006ef4:	f000 fc5e 	bl	80077b4 <ov5640_read_reg>
 8006ef8:	bbc8      	cbnz	r0, 8006f6e <OV5640_SetPixelFormat+0xba>
        tmp |= (1 << 5);
 8006efa:	f89d 4007 	ldrb.w	r4, [sp, #7]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8006efe:	2301      	movs	r3, #1
 8006f00:	462a      	mov	r2, r5
 8006f02:	f643 0121 	movw	r1, #14369	; 0x3821
        tmp |= (1 << 5);
 8006f06:	f044 0420 	orr.w	r4, r4, #32
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8006f0a:	4630      	mov	r0, r6
        tmp |= (1 << 5);
 8006f0c:	f88d 4007 	strb.w	r4, [sp, #7]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8006f10:	f000 fc58 	bl	80077c4 <ov5640_write_reg>
 8006f14:	bb58      	cbnz	r0, 8006f6e <OV5640_SetPixelFormat+0xba>
          if (ov5640_read_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8006f16:	2301      	movs	r3, #1
 8006f18:	462a      	mov	r2, r5
 8006f1a:	f243 0102 	movw	r1, #12290	; 0x3002
 8006f1e:	4630      	mov	r0, r6
 8006f20:	f000 fc48 	bl	80077b4 <ov5640_read_reg>
 8006f24:	bb18      	cbnz	r0, 8006f6e <OV5640_SetPixelFormat+0xba>
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 8006f26:	f89d 4007 	ldrb.w	r4, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	462a      	mov	r2, r5
 8006f2e:	f243 0102 	movw	r1, #12290	; 0x3002
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 8006f32:	f024 041c 	bic.w	r4, r4, #28
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8006f36:	4630      	mov	r0, r6
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 8006f38:	f88d 4007 	strb.w	r4, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8006f3c:	f000 fc42 	bl	80077c4 <ov5640_write_reg>
 8006f40:	b9a8      	cbnz	r0, 8006f6e <OV5640_SetPixelFormat+0xba>
              if (ov5640_read_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8006f42:	2301      	movs	r3, #1
 8006f44:	462a      	mov	r2, r5
 8006f46:	f243 0106 	movw	r1, #12294	; 0x3006
 8006f4a:	4630      	mov	r0, r6
 8006f4c:	f000 fc32 	bl	80077b4 <ov5640_read_reg>
 8006f50:	b968      	cbnz	r0, 8006f6e <OV5640_SetPixelFormat+0xba>
                tmp |= ((1 << 5) | (1 << 3));
 8006f52:	f89d 4007 	ldrb.w	r4, [sp, #7]
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8006f56:	462a      	mov	r2, r5
 8006f58:	4630      	mov	r0, r6
 8006f5a:	2301      	movs	r3, #1
                tmp |= ((1 << 5) | (1 << 3));
 8006f5c:	f044 0428 	orr.w	r4, r4, #40	; 0x28
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8006f60:	f243 0106 	movw	r1, #12294	; 0x3006
                tmp |= ((1 << 5) | (1 << 3));
 8006f64:	f88d 4007 	strb.w	r4, [sp, #7]
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8006f68:	f000 fc2c 	bl	80077c4 <ov5640_write_reg>
 8006f6c:	b108      	cbz	r0, 8006f72 <OV5640_SetPixelFormat+0xbe>
              ret = OV5640_ERROR;
 8006f6e:	f04f 37ff 	mov.w	r7, #4294967295
}
 8006f72:	4638      	mov	r0, r7
 8006f74:	b002      	add	sp, #8
 8006f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 8006f7a:	2230      	movs	r2, #48	; 0x30
 8006f7c:	ad02      	add	r5, sp, #8
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 8006f7e:	2301      	movs	r3, #1
 8006f80:	f44f 4186 	mov.w	r1, #17152	; 0x4300
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 8006f84:	f805 2d01 	strb.w	r2, [r5, #-1]!
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 8006f88:	4630      	mov	r0, r6
 8006f8a:	462a      	mov	r2, r5
 8006f8c:	f000 fc1a 	bl	80077c4 <ov5640_write_reg>
 8006f90:	2800      	cmp	r0, #0
 8006f92:	d1a8      	bne.n	8006ee6 <OV5640_SetPixelFormat+0x32>
  tickstart = pObj->IO.GetTick();
 8006f94:	6963      	ldr	r3, [r4, #20]
 8006f96:	4798      	blx	r3
 8006f98:	4607      	mov	r7, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8006f9a:	6963      	ldr	r3, [r4, #20]
 8006f9c:	4798      	blx	r3
 8006f9e:	4287      	cmp	r7, r0
 8006fa0:	d0fb      	beq.n	8006f9a <OV5640_SetPixelFormat+0xe6>
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 8006fa2:	2700      	movs	r7, #0
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	462a      	mov	r2, r5
 8006fa8:	f245 011f 	movw	r1, #20511	; 0x501f
 8006fac:	4630      	mov	r0, r6
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 8006fae:	f88d 7007 	strb.w	r7, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 8006fb2:	f000 fc07 	bl	80077c4 <ov5640_write_reg>
 8006fb6:	4607      	mov	r7, r0
 8006fb8:	2800      	cmp	r0, #0
 8006fba:	d194      	bne.n	8006ee6 <OV5640_SetPixelFormat+0x32>
  tickstart = pObj->IO.GetTick();
 8006fbc:	6963      	ldr	r3, [r4, #20]
 8006fbe:	4798      	blx	r3
 8006fc0:	4680      	mov	r8, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8006fc2:	6963      	ldr	r3, [r4, #20]
 8006fc4:	4798      	blx	r3
 8006fc6:	4580      	cmp	r8, r0
 8006fc8:	d0fb      	beq.n	8006fc2 <OV5640_SetPixelFormat+0x10e>
 8006fca:	e78e      	b.n	8006eea <OV5640_SetPixelFormat+0x36>
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 8006fcc:	2223      	movs	r2, #35	; 0x23
 8006fce:	ad02      	add	r5, sp, #8
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	f44f 4186 	mov.w	r1, #17152	; 0x4300
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 8006fd6:	f805 2d01 	strb.w	r2, [r5, #-1]!
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 8006fda:	4630      	mov	r0, r6
 8006fdc:	462a      	mov	r2, r5
 8006fde:	f000 fbf1 	bl	80077c4 <ov5640_write_reg>
 8006fe2:	2800      	cmp	r0, #0
 8006fe4:	d1c3      	bne.n	8006f6e <OV5640_SetPixelFormat+0xba>
  tickstart = pObj->IO.GetTick();
 8006fe6:	6963      	ldr	r3, [r4, #20]
 8006fe8:	4798      	blx	r3
 8006fea:	4607      	mov	r7, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8006fec:	6963      	ldr	r3, [r4, #20]
 8006fee:	4798      	blx	r3
 8006ff0:	42b8      	cmp	r0, r7
 8006ff2:	d0fb      	beq.n	8006fec <OV5640_SetPixelFormat+0x138>
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 8006ff4:	2701      	movs	r7, #1
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 8006ff6:	462a      	mov	r2, r5
 8006ff8:	4630      	mov	r0, r6
 8006ffa:	f245 011f 	movw	r1, #20511	; 0x501f
 8006ffe:	463b      	mov	r3, r7
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 8007000:	f88d 7007 	strb.w	r7, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 8007004:	f000 fbde 	bl	80077c4 <ov5640_write_reg>
 8007008:	2800      	cmp	r0, #0
 800700a:	d1b0      	bne.n	8006f6e <OV5640_SetPixelFormat+0xba>
  tickstart = pObj->IO.GetTick();
 800700c:	6963      	ldr	r3, [r4, #20]
 800700e:	4798      	blx	r3
 8007010:	4605      	mov	r5, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8007012:	6963      	ldr	r3, [r4, #20]
 8007014:	4798      	blx	r3
 8007016:	4285      	cmp	r5, r0
 8007018:	d0fb      	beq.n	8007012 <OV5640_SetPixelFormat+0x15e>
                  ret = OV5640_ERROR;
 800701a:	2700      	movs	r7, #0
}
 800701c:	4638      	mov	r0, r7
 800701e:	b002      	add	sp, #8
 8007020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 8007024:	2230      	movs	r2, #48	; 0x30
 8007026:	ad02      	add	r5, sp, #8
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 8007028:	2301      	movs	r3, #1
 800702a:	f44f 4186 	mov.w	r1, #17152	; 0x4300
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 800702e:	f805 2d01 	strb.w	r2, [r5, #-1]!
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 8007032:	4630      	mov	r0, r6
 8007034:	462a      	mov	r2, r5
 8007036:	f000 fbc5 	bl	80077c4 <ov5640_write_reg>
 800703a:	2800      	cmp	r0, #0
 800703c:	d197      	bne.n	8006f6e <OV5640_SetPixelFormat+0xba>
  tickstart = pObj->IO.GetTick();
 800703e:	6963      	ldr	r3, [r4, #20]
 8007040:	4798      	blx	r3
 8007042:	4607      	mov	r7, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8007044:	6963      	ldr	r3, [r4, #20]
 8007046:	4798      	blx	r3
 8007048:	4287      	cmp	r7, r0
 800704a:	d0fb      	beq.n	8007044 <OV5640_SetPixelFormat+0x190>
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 800704c:	2700      	movs	r7, #0
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 800704e:	462a      	mov	r2, r5
 8007050:	4630      	mov	r0, r6
 8007052:	2301      	movs	r3, #1
 8007054:	f245 011f 	movw	r1, #20511	; 0x501f
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 8007058:	f88d 7007 	strb.w	r7, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 800705c:	f000 fbb2 	bl	80077c4 <ov5640_write_reg>
 8007060:	2800      	cmp	r0, #0
 8007062:	d184      	bne.n	8006f6e <OV5640_SetPixelFormat+0xba>
  tickstart = pObj->IO.GetTick();
 8007064:	6963      	ldr	r3, [r4, #20]
 8007066:	4798      	blx	r3
 8007068:	4605      	mov	r5, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 800706a:	6963      	ldr	r3, [r4, #20]
 800706c:	4798      	blx	r3
 800706e:	4285      	cmp	r5, r0
 8007070:	d0fb      	beq.n	800706a <OV5640_SetPixelFormat+0x1b6>
 8007072:	e7d2      	b.n	800701a <OV5640_SetPixelFormat+0x166>
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 8007074:	2210      	movs	r2, #16
 8007076:	ad02      	add	r5, sp, #8
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 8007078:	2301      	movs	r3, #1
 800707a:	f44f 4186 	mov.w	r1, #17152	; 0x4300
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 800707e:	f805 2d01 	strb.w	r2, [r5, #-1]!
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 8007082:	4630      	mov	r0, r6
 8007084:	462a      	mov	r2, r5
 8007086:	f000 fb9d 	bl	80077c4 <ov5640_write_reg>
 800708a:	2800      	cmp	r0, #0
 800708c:	f47f af6f 	bne.w	8006f6e <OV5640_SetPixelFormat+0xba>
  tickstart = pObj->IO.GetTick();
 8007090:	6963      	ldr	r3, [r4, #20]
 8007092:	4798      	blx	r3
 8007094:	4607      	mov	r7, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8007096:	6963      	ldr	r3, [r4, #20]
 8007098:	4798      	blx	r3
 800709a:	42b8      	cmp	r0, r7
 800709c:	d0fb      	beq.n	8007096 <OV5640_SetPixelFormat+0x1e2>
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 800709e:	2700      	movs	r7, #0
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 80070a0:	462a      	mov	r2, r5
 80070a2:	4630      	mov	r0, r6
 80070a4:	2301      	movs	r3, #1
 80070a6:	f245 011f 	movw	r1, #20511	; 0x501f
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 80070aa:	f88d 7007 	strb.w	r7, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 80070ae:	f000 fb89 	bl	80077c4 <ov5640_write_reg>
 80070b2:	2800      	cmp	r0, #0
 80070b4:	f47f af5b 	bne.w	8006f6e <OV5640_SetPixelFormat+0xba>
  tickstart = pObj->IO.GetTick();
 80070b8:	6963      	ldr	r3, [r4, #20]
 80070ba:	4798      	blx	r3
 80070bc:	4605      	mov	r5, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 80070be:	6963      	ldr	r3, [r4, #20]
 80070c0:	4798      	blx	r3
 80070c2:	4285      	cmp	r5, r0
 80070c4:	d0fb      	beq.n	80070be <OV5640_SetPixelFormat+0x20a>
 80070c6:	e7a8      	b.n	800701a <OV5640_SetPixelFormat+0x166>
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 80070c8:	226f      	movs	r2, #111	; 0x6f
 80070ca:	ad02      	add	r5, sp, #8
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 80070cc:	2301      	movs	r3, #1
 80070ce:	f44f 4186 	mov.w	r1, #17152	; 0x4300
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 80070d2:	f805 2d01 	strb.w	r2, [r5, #-1]!
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 80070d6:	4630      	mov	r0, r6
 80070d8:	462a      	mov	r2, r5
 80070da:	f000 fb73 	bl	80077c4 <ov5640_write_reg>
 80070de:	2800      	cmp	r0, #0
 80070e0:	f47f af45 	bne.w	8006f6e <OV5640_SetPixelFormat+0xba>
  tickstart = pObj->IO.GetTick();
 80070e4:	6963      	ldr	r3, [r4, #20]
 80070e6:	4798      	blx	r3
 80070e8:	4607      	mov	r7, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 80070ea:	6963      	ldr	r3, [r4, #20]
 80070ec:	4798      	blx	r3
 80070ee:	42b8      	cmp	r0, r7
 80070f0:	d0fb      	beq.n	80070ea <OV5640_SetPixelFormat+0x236>
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 80070f2:	2701      	movs	r7, #1
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 80070f4:	462a      	mov	r2, r5
 80070f6:	4630      	mov	r0, r6
 80070f8:	f245 011f 	movw	r1, #20511	; 0x501f
 80070fc:	463b      	mov	r3, r7
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 80070fe:	f88d 7007 	strb.w	r7, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 8007102:	f000 fb5f 	bl	80077c4 <ov5640_write_reg>
 8007106:	4607      	mov	r7, r0
 8007108:	2800      	cmp	r0, #0
 800710a:	f47f af30 	bne.w	8006f6e <OV5640_SetPixelFormat+0xba>
  tickstart = pObj->IO.GetTick();
 800710e:	6963      	ldr	r3, [r4, #20]
 8007110:	4798      	blx	r3
 8007112:	4605      	mov	r5, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8007114:	6963      	ldr	r3, [r4, #20]
 8007116:	4798      	blx	r3
 8007118:	4285      	cmp	r5, r0
 800711a:	d0fb      	beq.n	8007114 <OV5640_SetPixelFormat+0x260>
 800711c:	e729      	b.n	8006f72 <OV5640_SetPixelFormat+0xbe>
 800711e:	bf00      	nop

08007120 <OV5640_GetResolution>:
{
 8007120:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_HIGH, &tmp, 1) != OV5640_OK)
 8007122:	f100 0618 	add.w	r6, r0, #24
{
 8007126:	b083      	sub	sp, #12
 8007128:	460f      	mov	r7, r1
  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_HIGH, &tmp, 1) != OV5640_OK)
 800712a:	2301      	movs	r3, #1
 800712c:	4630      	mov	r0, r6
 800712e:	f10d 0207 	add.w	r2, sp, #7
 8007132:	f643 0108 	movw	r1, #14344	; 0x3808
 8007136:	f000 fb3d 	bl	80077b4 <ov5640_read_reg>
 800713a:	2800      	cmp	r0, #0
 800713c:	d150      	bne.n	80071e0 <OV5640_GetResolution+0xc0>
    x_size = (uint16_t)tmp << 8U;
 800713e:	f89d 4007 	ldrb.w	r4, [sp, #7]
    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_LOW, &tmp, 1) != OV5640_OK)
 8007142:	2301      	movs	r3, #1
 8007144:	f10d 0207 	add.w	r2, sp, #7
 8007148:	f643 0109 	movw	r1, #14345	; 0x3809
 800714c:	4630      	mov	r0, r6
    x_size = (uint16_t)tmp << 8U;
 800714e:	0224      	lsls	r4, r4, #8
    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_LOW, &tmp, 1) != OV5640_OK)
 8007150:	f000 fb30 	bl	80077b4 <ov5640_read_reg>
 8007154:	2800      	cmp	r0, #0
 8007156:	d143      	bne.n	80071e0 <OV5640_GetResolution+0xc0>
      x_size |= tmp;
 8007158:	f89d 5007 	ldrb.w	r5, [sp, #7]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_HIGH, &tmp, 1) != OV5640_OK)
 800715c:	2301      	movs	r3, #1
 800715e:	f10d 0207 	add.w	r2, sp, #7
 8007162:	f643 010a 	movw	r1, #14346	; 0x380a
 8007166:	4630      	mov	r0, r6
      x_size |= tmp;
 8007168:	432c      	orrs	r4, r5
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_HIGH, &tmp, 1) != OV5640_OK)
 800716a:	f000 fb23 	bl	80077b4 <ov5640_read_reg>
 800716e:	bbb8      	cbnz	r0, 80071e0 <OV5640_GetResolution+0xc0>
        y_size = (uint16_t)tmp << 8U;
 8007170:	f89d 5007 	ldrb.w	r5, [sp, #7]
        if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_LOW, &tmp, 1) != OV5640_OK)
 8007174:	f10d 0207 	add.w	r2, sp, #7
 8007178:	4630      	mov	r0, r6
 800717a:	2301      	movs	r3, #1
 800717c:	f643 010b 	movw	r1, #14347	; 0x380b
        y_size = (uint16_t)tmp << 8U;
 8007180:	022d      	lsls	r5, r5, #8
        if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_LOW, &tmp, 1) != OV5640_OK)
 8007182:	f000 fb17 	bl	80077b4 <ov5640_read_reg>
 8007186:	bb58      	cbnz	r0, 80071e0 <OV5640_GetResolution+0xc0>
          y_size |= tmp;
 8007188:	f89d 3007 	ldrb.w	r3, [sp, #7]
          if ((x_size == 800U) && (y_size == 480U))
 800718c:	f5b4 7f48 	cmp.w	r4, #800	; 0x320
          y_size |= tmp;
 8007190:	ea43 0305 	orr.w	r3, r3, r5
          if ((x_size == 800U) && (y_size == 480U))
 8007194:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 8007198:	fab2 f282 	clz	r2, r2
 800719c:	ea4f 1252 	mov.w	r2, r2, lsr #5
 80071a0:	d104      	bne.n	80071ac <OV5640_GetResolution+0x8c>
 80071a2:	b11a      	cbz	r2, 80071ac <OV5640_GetResolution+0x8c>
            *Resolution = OV5640_R800x480;
 80071a4:	2304      	movs	r3, #4
 80071a6:	603b      	str	r3, [r7, #0]
}
 80071a8:	b003      	add	sp, #12
 80071aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
          else if ((x_size == 640U) && (y_size == 480U))
 80071ac:	f5b4 7f20 	cmp.w	r4, #640	; 0x280
 80071b0:	d104      	bne.n	80071bc <OV5640_GetResolution+0x9c>
 80071b2:	b11a      	cbz	r2, 80071bc <OV5640_GetResolution+0x9c>
            *Resolution = OV5640_R640x480;
 80071b4:	2303      	movs	r3, #3
 80071b6:	603b      	str	r3, [r7, #0]
}
 80071b8:	b003      	add	sp, #12
 80071ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
          else if ((x_size == 480U) && (y_size == 272U))
 80071bc:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
 80071c0:	d106      	bne.n	80071d0 <OV5640_GetResolution+0xb0>
 80071c2:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 80071c6:	d103      	bne.n	80071d0 <OV5640_GetResolution+0xb0>
            *Resolution = OV5640_R480x272;
 80071c8:	2302      	movs	r3, #2
 80071ca:	603b      	str	r3, [r7, #0]
}
 80071cc:	b003      	add	sp, #12
 80071ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
          else if ((x_size == 320U) && (y_size == 240U))
 80071d0:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
 80071d4:	d108      	bne.n	80071e8 <OV5640_GetResolution+0xc8>
 80071d6:	2bf0      	cmp	r3, #240	; 0xf0
 80071d8:	d106      	bne.n	80071e8 <OV5640_GetResolution+0xc8>
            *Resolution = OV5640_R320x240;
 80071da:	2301      	movs	r3, #1
 80071dc:	603b      	str	r3, [r7, #0]
 80071de:	e7e3      	b.n	80071a8 <OV5640_GetResolution+0x88>
    ret = OV5640_ERROR;
 80071e0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80071e4:	b003      	add	sp, #12
 80071e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
          else if ((x_size == 160U) && (y_size == 120U))
 80071e8:	2ca0      	cmp	r4, #160	; 0xa0
 80071ea:	d1f9      	bne.n	80071e0 <OV5640_GetResolution+0xc0>
 80071ec:	2b78      	cmp	r3, #120	; 0x78
 80071ee:	d1f7      	bne.n	80071e0 <OV5640_GetResolution+0xc0>
            *Resolution = OV5640_R160x120;
 80071f0:	2300      	movs	r3, #0
 80071f2:	603b      	str	r3, [r7, #0]
  return ret;
 80071f4:	e7d8      	b.n	80071a8 <OV5640_GetResolution+0x88>
 80071f6:	bf00      	nop

080071f8 <OV5640_ReadID>:
{
 80071f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  pObj->IO.Init();
 80071fc:	4606      	mov	r6, r0
{
 80071fe:	b082      	sub	sp, #8
 8007200:	4688      	mov	r8, r1
 8007202:	4604      	mov	r4, r0
  pObj->IO.Init();
 8007204:	f856 3b18 	ldr.w	r3, [r6], #24
  tmp = 0x80;
 8007208:	af02      	add	r7, sp, #8
  pObj->IO.Init();
 800720a:	4798      	blx	r3
  tmp = 0x80;
 800720c:	2280      	movs	r2, #128	; 0x80
  if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSTEM_CTROL0, &tmp, 1) != OV5640_OK)
 800720e:	4630      	mov	r0, r6
 8007210:	2301      	movs	r3, #1
  tmp = 0x80;
 8007212:	f807 2d01 	strb.w	r2, [r7, #-1]!
  if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSTEM_CTROL0, &tmp, 1) != OV5640_OK)
 8007216:	f243 0108 	movw	r1, #12296	; 0x3008
 800721a:	463a      	mov	r2, r7
 800721c:	f000 fad2 	bl	80077c4 <ov5640_write_reg>
 8007220:	bb38      	cbnz	r0, 8007272 <OV5640_ReadID+0x7a>
  tickstart = pObj->IO.GetTick();
 8007222:	6963      	ldr	r3, [r4, #20]
 8007224:	4798      	blx	r3
 8007226:	4605      	mov	r5, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8007228:	6963      	ldr	r3, [r4, #20]
 800722a:	4798      	blx	r3
 800722c:	1b40      	subs	r0, r0, r5
 800722e:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8007232:	d3f9      	bcc.n	8007228 <OV5640_ReadID+0x30>
    if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_HIGH_BYTE, &tmp, 1) != OV5640_OK)
 8007234:	2301      	movs	r3, #1
 8007236:	463a      	mov	r2, r7
 8007238:	f243 010a 	movw	r1, #12298	; 0x300a
 800723c:	4630      	mov	r0, r6
 800723e:	f000 fab9 	bl	80077b4 <ov5640_read_reg>
 8007242:	b9b0      	cbnz	r0, 8007272 <OV5640_ReadID+0x7a>
      *Id = (uint32_t)tmp << 8U;
 8007244:	f89d 4007 	ldrb.w	r4, [sp, #7]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 8007248:	463a      	mov	r2, r7
 800724a:	4630      	mov	r0, r6
 800724c:	2301      	movs	r3, #1
      *Id = (uint32_t)tmp << 8U;
 800724e:	0224      	lsls	r4, r4, #8
      if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 8007250:	f243 010b 	movw	r1, #12299	; 0x300b
      *Id = (uint32_t)tmp << 8U;
 8007254:	f8c8 4000 	str.w	r4, [r8]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 8007258:	f000 faac 	bl	80077b4 <ov5640_read_reg>
 800725c:	b948      	cbnz	r0, 8007272 <OV5640_ReadID+0x7a>
        *Id |= tmp;
 800725e:	f8d8 3000 	ldr.w	r3, [r8]
 8007262:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8007266:	4313      	orrs	r3, r2
 8007268:	f8c8 3000 	str.w	r3, [r8]
}
 800726c:	b002      	add	sp, #8
 800726e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = OV5640_ERROR;
 8007272:	f04f 30ff 	mov.w	r0, #4294967295
 8007276:	e7f9      	b.n	800726c <OV5640_ReadID+0x74>

08007278 <OV5640_MirrorFlipConfig>:
{
 8007278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800727a:	b083      	sub	sp, #12
  uint8_t tmp3820 = 0;
 800727c:	2200      	movs	r2, #0
  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 800727e:	f100 0518 	add.w	r5, r0, #24
{
 8007282:	460f      	mov	r7, r1
  uint8_t tmp3820 = 0;
 8007284:	ac02      	add	r4, sp, #8
  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8007286:	2301      	movs	r3, #1
 8007288:	4628      	mov	r0, r5
 800728a:	f643 0120 	movw	r1, #14368	; 0x3820
  uint8_t tmp3820 = 0;
 800728e:	f804 2d02 	strb.w	r2, [r4, #-2]!
  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8007292:	4622      	mov	r2, r4
 8007294:	f000 fa8e 	bl	80077b4 <ov5640_read_reg>
 8007298:	2800      	cmp	r0, #0
 800729a:	d170      	bne.n	800737e <OV5640_MirrorFlipConfig+0x106>
    tmp3820 &= 0xF9U;
 800729c:	f89d 6006 	ldrb.w	r6, [sp, #6]
    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 80072a0:	2301      	movs	r3, #1
 80072a2:	f643 0121 	movw	r1, #14369	; 0x3821
 80072a6:	f10d 0207 	add.w	r2, sp, #7
    tmp3820 &= 0xF9U;
 80072aa:	f026 0606 	bic.w	r6, r6, #6
    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 80072ae:	4628      	mov	r0, r5
    tmp3820 &= 0xF9U;
 80072b0:	f88d 6006 	strb.w	r6, [sp, #6]
    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 80072b4:	f000 fa7e 	bl	80077b4 <ov5640_read_reg>
 80072b8:	2800      	cmp	r0, #0
 80072ba:	d160      	bne.n	800737e <OV5640_MirrorFlipConfig+0x106>
      tmp3821 &= 0xF9U;
 80072bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
      switch (Config)
 80072c0:	2f02      	cmp	r7, #2
      tmp3821 &= 0xF9U;
 80072c2:	f023 0306 	bic.w	r3, r3, #6
 80072c6:	f88d 3007 	strb.w	r3, [sp, #7]
      switch (Config)
 80072ca:	d04f      	beq.n	800736c <OV5640_MirrorFlipConfig+0xf4>
 80072cc:	2f03      	cmp	r7, #3
 80072ce:	d018      	beq.n	8007302 <OV5640_MirrorFlipConfig+0x8a>
 80072d0:	2f01      	cmp	r7, #1
 80072d2:	d038      	beq.n	8007346 <OV5640_MirrorFlipConfig+0xce>
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 80072d4:	4622      	mov	r2, r4
 80072d6:	2301      	movs	r3, #1
 80072d8:	f643 0120 	movw	r1, #14368	; 0x3820
 80072dc:	4628      	mov	r0, r5
 80072de:	f000 fa71 	bl	80077c4 <ov5640_write_reg>
 80072e2:	2800      	cmp	r0, #0
 80072e4:	d14b      	bne.n	800737e <OV5640_MirrorFlipConfig+0x106>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 80072e6:	f10d 0207 	add.w	r2, sp, #7
 80072ea:	4628      	mov	r0, r5
 80072ec:	2301      	movs	r3, #1
 80072ee:	f643 0121 	movw	r1, #14369	; 0x3821
 80072f2:	f000 fa67 	bl	80077c4 <ov5640_write_reg>
 80072f6:	3000      	adds	r0, #0
 80072f8:	bf18      	it	ne
 80072fa:	2001      	movne	r0, #1
 80072fc:	4240      	negs	r0, r0
}
 80072fe:	b003      	add	sp, #12
 8007300:	bdf0      	pop	{r4, r5, r6, r7, pc}
          tmp3820 |= 0x06U;
 8007302:	f89d 0006 	ldrb.w	r0, [sp, #6]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8007306:	4622      	mov	r2, r4
 8007308:	2301      	movs	r3, #1
 800730a:	f643 0120 	movw	r1, #14368	; 0x3820
          tmp3820 |= 0x06U;
 800730e:	f040 0406 	orr.w	r4, r0, #6
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8007312:	4628      	mov	r0, r5
          tmp3820 |= 0x06U;
 8007314:	f88d 4006 	strb.w	r4, [sp, #6]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8007318:	f000 fa54 	bl	80077c4 <ov5640_write_reg>
 800731c:	bb78      	cbnz	r0, 800737e <OV5640_MirrorFlipConfig+0x106>
            tmp3821 |= 0x06U;
 800731e:	f89d 4007 	ldrb.w	r4, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8007322:	f10d 0207 	add.w	r2, sp, #7
 8007326:	4628      	mov	r0, r5
 8007328:	2301      	movs	r3, #1
            tmp3821 |= 0x06U;
 800732a:	f044 0406 	orr.w	r4, r4, #6
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 800732e:	f643 0121 	movw	r1, #14369	; 0x3821
            tmp3821 |= 0x06U;
 8007332:	f88d 4007 	strb.w	r4, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8007336:	f000 fa45 	bl	80077c4 <ov5640_write_reg>
 800733a:	3000      	adds	r0, #0
 800733c:	bf18      	it	ne
 800733e:	2001      	movne	r0, #1
 8007340:	4240      	negs	r0, r0
}
 8007342:	b003      	add	sp, #12
 8007344:	bdf0      	pop	{r4, r5, r6, r7, pc}
          tmp3820 |= 0x06U;
 8007346:	f89d 0006 	ldrb.w	r0, [sp, #6]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 800734a:	4622      	mov	r2, r4
 800734c:	463b      	mov	r3, r7
 800734e:	f643 0120 	movw	r1, #14368	; 0x3820
          tmp3820 |= 0x06U;
 8007352:	f040 0406 	orr.w	r4, r0, #6
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8007356:	4628      	mov	r0, r5
          tmp3820 |= 0x06U;
 8007358:	f88d 4006 	strb.w	r4, [sp, #6]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 800735c:	f000 fa32 	bl	80077c4 <ov5640_write_reg>
 8007360:	b968      	cbnz	r0, 800737e <OV5640_MirrorFlipConfig+0x106>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8007362:	463b      	mov	r3, r7
 8007364:	f10d 0207 	add.w	r2, sp, #7
 8007368:	4628      	mov	r0, r5
 800736a:	e7c0      	b.n	80072ee <OV5640_MirrorFlipConfig+0x76>
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 800736c:	4622      	mov	r2, r4
 800736e:	2301      	movs	r3, #1
 8007370:	f643 0120 	movw	r1, #14368	; 0x3820
 8007374:	4628      	mov	r0, r5
 8007376:	f000 fa25 	bl	80077c4 <ov5640_write_reg>
 800737a:	2800      	cmp	r0, #0
 800737c:	d0cf      	beq.n	800731e <OV5640_MirrorFlipConfig+0xa6>
    ret = OV5640_ERROR;
 800737e:	f04f 30ff 	mov.w	r0, #4294967295
 8007382:	e7bc      	b.n	80072fe <OV5640_MirrorFlipConfig+0x86>

08007384 <OV5640_NightModeConfig>:
{
 8007384:	b570      	push	{r4, r5, r6, lr}
  uint8_t tmp = 0;
 8007386:	2300      	movs	r3, #0
{
 8007388:	b082      	sub	sp, #8
  if (Cmd == NIGHT_MODE_ENABLE)
 800738a:	2901      	cmp	r1, #1
 800738c:	f100 0418 	add.w	r4, r0, #24
  uint8_t tmp = 0;
 8007390:	f88d 3007 	strb.w	r3, [sp, #7]
  if (Cmd == NIGHT_MODE_ENABLE)
 8007394:	d01c      	beq.n	80073d0 <OV5640_NightModeConfig+0x4c>
    if (ov5640_read_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8007396:	2301      	movs	r3, #1
 8007398:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 800739c:	4620      	mov	r0, r4
 800739e:	f10d 0207 	add.w	r2, sp, #7
 80073a2:	f000 fa07 	bl	80077b4 <ov5640_read_reg>
 80073a6:	b9e8      	cbnz	r0, 80073e4 <OV5640_NightModeConfig+0x60>
      tmp &= 0xFBU;
 80073a8:	f89d 1007 	ldrb.w	r1, [sp, #7]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 80073ac:	4620      	mov	r0, r4
 80073ae:	f10d 0207 	add.w	r2, sp, #7
 80073b2:	2301      	movs	r3, #1
      tmp &= 0xFBU;
 80073b4:	f021 0404 	bic.w	r4, r1, #4
      if (ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 80073b8:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
      tmp &= 0xFBU;
 80073bc:	f88d 4007 	strb.w	r4, [sp, #7]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 80073c0:	f000 fa00 	bl	80077c4 <ov5640_write_reg>
 80073c4:	3000      	adds	r0, #0
 80073c6:	bf18      	it	ne
 80073c8:	2001      	movne	r0, #1
 80073ca:	4240      	negs	r0, r0
}
 80073cc:	b002      	add	sp, #8
 80073ce:	bd70      	pop	{r4, r5, r6, pc}
 80073d0:	460d      	mov	r5, r1
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL4, &tmp, 1);
 80073d2:	460b      	mov	r3, r1
 80073d4:	4620      	mov	r0, r4
 80073d6:	f243 0138 	movw	r1, #12344	; 0x3038
 80073da:	f10d 0207 	add.w	r2, sp, #7
 80073de:	f000 f9f1 	bl	80077c4 <ov5640_write_reg>
    if (ret == OV5640_OK)
 80073e2:	b118      	cbz	r0, 80073ec <OV5640_NightModeConfig+0x68>
      ret = OV5640_ERROR;
 80073e4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80073e8:	b002      	add	sp, #8
 80073ea:	bd70      	pop	{r4, r5, r6, pc}
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL5, &tmp, 1);
 80073ec:	462b      	mov	r3, r5
 80073ee:	f10d 0207 	add.w	r2, sp, #7
 80073f2:	f243 0139 	movw	r1, #12345	; 0x3039
 80073f6:	4620      	mov	r0, r4
 80073f8:	f000 f9e4 	bl	80077c4 <ov5640_write_reg>
    if (ret == OV5640_OK)
 80073fc:	2800      	cmp	r0, #0
 80073fe:	d1f1      	bne.n	80073e4 <OV5640_NightModeConfig+0x60>
      tmp = 0x7C;
 8007400:	267c      	movs	r6, #124	; 0x7c
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1);
 8007402:	462b      	mov	r3, r5
 8007404:	f10d 0207 	add.w	r2, sp, #7
 8007408:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 800740c:	4620      	mov	r0, r4
      tmp = 0x7C;
 800740e:	f88d 6007 	strb.w	r6, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1);
 8007412:	f000 f9d7 	bl	80077c4 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8007416:	2800      	cmp	r0, #0
 8007418:	d1e4      	bne.n	80073e4 <OV5640_NightModeConfig+0x60>
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_HIGH, &tmp, 1);
 800741a:	462b      	mov	r3, r5
 800741c:	f10d 0207 	add.w	r2, sp, #7
 8007420:	f643 2108 	movw	r1, #14856	; 0x3a08
 8007424:	4620      	mov	r0, r4
      tmp = 0x01;
 8007426:	f88d 5007 	strb.w	r5, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_HIGH, &tmp, 1);
 800742a:	f000 f9cb 	bl	80077c4 <ov5640_write_reg>
    if (ret == OV5640_OK)
 800742e:	2800      	cmp	r0, #0
 8007430:	d1d8      	bne.n	80073e4 <OV5640_NightModeConfig+0x60>
      tmp = 0x27;
 8007432:	2627      	movs	r6, #39	; 0x27
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_LOW, &tmp, 1);
 8007434:	462b      	mov	r3, r5
 8007436:	f10d 0207 	add.w	r2, sp, #7
 800743a:	f643 2109 	movw	r1, #14857	; 0x3a09
 800743e:	4620      	mov	r0, r4
      tmp = 0x27;
 8007440:	f88d 6007 	strb.w	r6, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_LOW, &tmp, 1);
 8007444:	f000 f9be 	bl	80077c4 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8007448:	4606      	mov	r6, r0
 800744a:	2800      	cmp	r0, #0
 800744c:	d1ca      	bne.n	80073e4 <OV5640_NightModeConfig+0x60>
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_HIGH, &tmp, 1);
 800744e:	462b      	mov	r3, r5
 8007450:	f10d 0207 	add.w	r2, sp, #7
 8007454:	f643 210a 	movw	r1, #14858	; 0x3a0a
 8007458:	4620      	mov	r0, r4
      tmp = 0x00;
 800745a:	f88d 6007 	strb.w	r6, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_HIGH, &tmp, 1);
 800745e:	f000 f9b1 	bl	80077c4 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8007462:	2800      	cmp	r0, #0
 8007464:	d1be      	bne.n	80073e4 <OV5640_NightModeConfig+0x60>
      tmp = 0xF6;
 8007466:	26f6      	movs	r6, #246	; 0xf6
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_LOW, &tmp, 1);
 8007468:	462b      	mov	r3, r5
 800746a:	f10d 0207 	add.w	r2, sp, #7
 800746e:	f643 210b 	movw	r1, #14859	; 0x3a0b
 8007472:	4620      	mov	r0, r4
      tmp = 0xF6;
 8007474:	f88d 6007 	strb.w	r6, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_LOW, &tmp, 1);
 8007478:	f000 f9a4 	bl	80077c4 <ov5640_write_reg>
    if (ret == OV5640_OK)
 800747c:	2800      	cmp	r0, #0
 800747e:	d1b1      	bne.n	80073e4 <OV5640_NightModeConfig+0x60>
      tmp = 0x04;
 8007480:	2604      	movs	r6, #4
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0D, &tmp, 1);
 8007482:	462b      	mov	r3, r5
 8007484:	f10d 0207 	add.w	r2, sp, #7
 8007488:	f643 210d 	movw	r1, #14861	; 0x3a0d
 800748c:	4620      	mov	r0, r4
      tmp = 0x04;
 800748e:	f88d 6007 	strb.w	r6, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0D, &tmp, 1);
 8007492:	f000 f997 	bl	80077c4 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8007496:	2800      	cmp	r0, #0
 8007498:	d1a4      	bne.n	80073e4 <OV5640_NightModeConfig+0x60>
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0E, &tmp, 1);
 800749a:	462b      	mov	r3, r5
 800749c:	f10d 0207 	add.w	r2, sp, #7
 80074a0:	f643 210e 	movw	r1, #14862	; 0x3a0e
 80074a4:	4620      	mov	r0, r4
 80074a6:	f000 f98d 	bl	80077c4 <ov5640_write_reg>
    if (ret == OV5640_OK)
 80074aa:	2800      	cmp	r0, #0
 80074ac:	d19a      	bne.n	80073e4 <OV5640_NightModeConfig+0x60>
      tmp = 0x0B;
 80074ae:	260b      	movs	r6, #11
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL02, &tmp, 1);
 80074b0:	2301      	movs	r3, #1
 80074b2:	f10d 0207 	add.w	r2, sp, #7
 80074b6:	f643 2102 	movw	r1, #14850	; 0x3a02
 80074ba:	4620      	mov	r0, r4
      tmp = 0x0B;
 80074bc:	f88d 6007 	strb.w	r6, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL02, &tmp, 1);
 80074c0:	f000 f980 	bl	80077c4 <ov5640_write_reg>
    if (ret == OV5640_OK)
 80074c4:	2800      	cmp	r0, #0
 80074c6:	d18d      	bne.n	80073e4 <OV5640_NightModeConfig+0x60>
      tmp = 0x88;
 80074c8:	2588      	movs	r5, #136	; 0x88
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL03, &tmp, 1);
 80074ca:	2301      	movs	r3, #1
 80074cc:	f10d 0207 	add.w	r2, sp, #7
 80074d0:	f643 2103 	movw	r1, #14851	; 0x3a03
 80074d4:	4620      	mov	r0, r4
      tmp = 0x88;
 80074d6:	f88d 5007 	strb.w	r5, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL03, &tmp, 1);
 80074da:	f000 f973 	bl	80077c4 <ov5640_write_reg>
    if (ret == OV5640_OK)
 80074de:	2800      	cmp	r0, #0
 80074e0:	d180      	bne.n	80073e4 <OV5640_NightModeConfig+0x60>
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_HIGH, &tmp, 1);
 80074e2:	2301      	movs	r3, #1
 80074e4:	f10d 0207 	add.w	r2, sp, #7
 80074e8:	f643 2114 	movw	r1, #14868	; 0x3a14
 80074ec:	4620      	mov	r0, r4
      tmp = 0x0B;
 80074ee:	f88d 6007 	strb.w	r6, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_HIGH, &tmp, 1);
 80074f2:	f000 f967 	bl	80077c4 <ov5640_write_reg>
    if (ret == OV5640_OK)
 80074f6:	2800      	cmp	r0, #0
 80074f8:	f47f af74 	bne.w	80073e4 <OV5640_NightModeConfig+0x60>
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_LOW, &tmp, 1);
 80074fc:	f10d 0207 	add.w	r2, sp, #7
 8007500:	4620      	mov	r0, r4
 8007502:	2301      	movs	r3, #1
 8007504:	f643 2115 	movw	r1, #14869	; 0x3a15
      tmp = 0x88;
 8007508:	f88d 5007 	strb.w	r5, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_LOW, &tmp, 1);
 800750c:	f000 f95a 	bl	80077c4 <ov5640_write_reg>
    if (ret != OV5640_OK)
 8007510:	3000      	adds	r0, #0
 8007512:	bf18      	it	ne
 8007514:	2001      	movne	r0, #1
 8007516:	4240      	negs	r0, r0
}
 8007518:	b002      	add	sp, #8
 800751a:	bd70      	pop	{r4, r5, r6, pc}

0800751c <OV5640_Init>:
  if (pObj->IsInitialized == 0U)
 800751c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8007520:	2b00      	cmp	r3, #0
 8007522:	d145      	bne.n	80075b0 <OV5640_Init+0x94>
    if ((Resolution > OV5640_R800x480) ||
 8007524:	2904      	cmp	r1, #4
{
 8007526:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800752a:	468b      	mov	fp, r1
 800752c:	b083      	sub	sp, #12
    if ((Resolution > OV5640_R800x480) ||
 800752e:	d816      	bhi.n	800755e <OV5640_Init+0x42>
 8007530:	2a02      	cmp	r2, #2
 8007532:	4681      	mov	r9, r0
 8007534:	4692      	mov	sl, r2
 8007536:	d837      	bhi.n	80075a8 <OV5640_Init+0x8c>
 8007538:	4f1e      	ldr	r7, [pc, #120]	; (80075b4 <OV5640_Init+0x98>)
 800753a:	f109 0818 	add.w	r8, r9, #24
{
 800753e:	2400      	movs	r4, #0
 8007540:	463d      	mov	r5, r7
          tmp = (uint8_t)OV5640_Common[index][1];
 8007542:	886e      	ldrh	r6, [r5, #2]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 8007544:	2301      	movs	r3, #1
 8007546:	f837 1024 	ldrh.w	r1, [r7, r4, lsl #2]
 800754a:	f10d 0206 	add.w	r2, sp, #6
 800754e:	4640      	mov	r0, r8
 8007550:	3504      	adds	r5, #4
          tmp = (uint8_t)OV5640_Common[index][1];
 8007552:	f88d 6006 	strb.w	r6, [sp, #6]
 8007556:	441c      	add	r4, r3
          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 8007558:	f000 f934 	bl	80077c4 <ov5640_write_reg>
 800755c:	b120      	cbz	r0, 8007568 <OV5640_Init+0x4c>
{
 800755e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007562:	b003      	add	sp, #12
 8007564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8007568:	2cfe      	cmp	r4, #254	; 0xfe
 800756a:	d1ea      	bne.n	8007542 <OV5640_Init+0x26>
        if (OV5640_SetResolution(pObj, Resolution) != OV5640_OK)
 800756c:	4659      	mov	r1, fp
 800756e:	4648      	mov	r0, r9
 8007570:	f7ff f870 	bl	8006654 <OV5640_SetResolution>
 8007574:	2800      	cmp	r0, #0
 8007576:	d1f2      	bne.n	800755e <OV5640_Init+0x42>
        else if (OV5640_SetPixelFormat(pObj, PixelFormat) != OV5640_OK)
 8007578:	4651      	mov	r1, sl
 800757a:	4648      	mov	r0, r9
 800757c:	f7ff fc9a 	bl	8006eb4 <OV5640_SetPixelFormat>
 8007580:	2800      	cmp	r0, #0
 8007582:	d1ec      	bne.n	800755e <OV5640_Init+0x42>
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 8007584:	2122      	movs	r1, #34	; 0x22
 8007586:	aa02      	add	r2, sp, #8
    if (ov5640_write_reg(&pObj->Ctx, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 8007588:	4640      	mov	r0, r8
 800758a:	2301      	movs	r3, #1
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 800758c:	f802 1d01 	strb.w	r1, [r2, #-1]!
    if (ov5640_write_reg(&pObj->Ctx, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 8007590:	f244 7140 	movw	r1, #18240	; 0x4740
 8007594:	f000 f916 	bl	80077c4 <ov5640_write_reg>
 8007598:	2800      	cmp	r0, #0
 800759a:	d1e0      	bne.n	800755e <OV5640_Init+0x42>
          pObj->IsInitialized = 1U;
 800759c:	2301      	movs	r3, #1
 800759e:	f889 3024 	strb.w	r3, [r9, #36]	; 0x24
}
 80075a2:	b003      	add	sp, #12
 80075a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 80075a8:	1fd3      	subs	r3, r2, #7
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d9c4      	bls.n	8007538 <OV5640_Init+0x1c>
 80075ae:	e7d6      	b.n	800755e <OV5640_Init+0x42>
  int32_t ret = OV5640_OK;
 80075b0:	2000      	movs	r0, #0
}
 80075b2:	4770      	bx	lr
 80075b4:	08020bf0 	.word	0x08020bf0

080075b8 <OV5640_ZoomConfig>:
{
 80075b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_HIGH, &tmp, 1) != OV5640_OK)
 80075ba:	f100 0518 	add.w	r5, r0, #24
{
 80075be:	b083      	sub	sp, #12
 80075c0:	460f      	mov	r7, r1
  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_HIGH, &tmp, 1) != OV5640_OK)
 80075c2:	2301      	movs	r3, #1
 80075c4:	4628      	mov	r0, r5
 80075c6:	f10d 0207 	add.w	r2, sp, #7
 80075ca:	f643 0108 	movw	r1, #14344	; 0x3808
 80075ce:	f000 f8f1 	bl	80077b4 <ov5640_read_reg>
 80075d2:	2800      	cmp	r0, #0
 80075d4:	d17d      	bne.n	80076d2 <OV5640_ZoomConfig+0x11a>
    x_size = (uint16_t)tmp << 8U;
 80075d6:	f89d 4007 	ldrb.w	r4, [sp, #7]
    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_LOW, &tmp, 1) != OV5640_OK)
 80075da:	2301      	movs	r3, #1
 80075dc:	f10d 0207 	add.w	r2, sp, #7
 80075e0:	f643 0109 	movw	r1, #14345	; 0x3809
 80075e4:	4628      	mov	r0, r5
    x_size = (uint16_t)tmp << 8U;
 80075e6:	0224      	lsls	r4, r4, #8
    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_LOW, &tmp, 1) != OV5640_OK)
 80075e8:	f000 f8e4 	bl	80077b4 <ov5640_read_reg>
 80075ec:	2800      	cmp	r0, #0
 80075ee:	d170      	bne.n	80076d2 <OV5640_ZoomConfig+0x11a>
      x_size |= tmp;
 80075f0:	f89d 6007 	ldrb.w	r6, [sp, #7]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_HIGH, &tmp, 1) != OV5640_OK)
 80075f4:	2301      	movs	r3, #1
 80075f6:	f10d 0207 	add.w	r2, sp, #7
 80075fa:	f643 010a 	movw	r1, #14346	; 0x380a
 80075fe:	4628      	mov	r0, r5
      x_size |= tmp;
 8007600:	4334      	orrs	r4, r6
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_HIGH, &tmp, 1) != OV5640_OK)
 8007602:	f000 f8d7 	bl	80077b4 <ov5640_read_reg>
 8007606:	2800      	cmp	r0, #0
 8007608:	d163      	bne.n	80076d2 <OV5640_ZoomConfig+0x11a>
        y_size = (uint16_t)tmp << 8U;
 800760a:	f89d 6007 	ldrb.w	r6, [sp, #7]
        if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_LOW, &tmp, 1) != OV5640_OK)
 800760e:	2301      	movs	r3, #1
 8007610:	f10d 0207 	add.w	r2, sp, #7
 8007614:	f643 010b 	movw	r1, #14347	; 0x380b
 8007618:	4628      	mov	r0, r5
        y_size = (uint16_t)tmp << 8U;
 800761a:	0236      	lsls	r6, r6, #8
        if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_LOW, &tmp, 1) != OV5640_OK)
 800761c:	f000 f8ca 	bl	80077b4 <ov5640_read_reg>
 8007620:	2800      	cmp	r0, #0
 8007622:	d156      	bne.n	80076d2 <OV5640_ZoomConfig+0x11a>
          y_size |= tmp;
 8007624:	f89d 3007 	ldrb.w	r3, [sp, #7]
          if ((x_size == 800U) && (y_size == 480U))
 8007628:	f5b4 7f48 	cmp.w	r4, #800	; 0x320
          y_size |= tmp;
 800762c:	ea43 0306 	orr.w	r3, r3, r6
          if ((x_size == 800U) && (y_size == 480U))
 8007630:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 8007634:	fab2 f282 	clz	r2, r2
 8007638:	ea4f 1252 	mov.w	r2, r2, lsr #5
 800763c:	d113      	bne.n	8007666 <OV5640_ZoomConfig+0xae>
 800763e:	b192      	cbz	r2, 8007666 <OV5640_ZoomConfig+0xae>
    if (zoom == OV5640_ZOOM_x1)
 8007640:	2f44      	cmp	r7, #68	; 0x44
 8007642:	d117      	bne.n	8007674 <OV5640_ZoomConfig+0xbc>
      tmp = 0x10;
 8007644:	2410      	movs	r4, #16
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8007646:	f10d 0207 	add.w	r2, sp, #7
 800764a:	4628      	mov	r0, r5
 800764c:	2301      	movs	r3, #1
 800764e:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
      tmp = 0x10;
 8007652:	f88d 4007 	strb.w	r4, [sp, #7]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8007656:	f000 f8b5 	bl	80077c4 <ov5640_write_reg>
 800765a:	3000      	adds	r0, #0
 800765c:	bf18      	it	ne
 800765e:	2001      	movne	r0, #1
 8007660:	4240      	negs	r0, r0
}
 8007662:	b003      	add	sp, #12
 8007664:	bdf0      	pop	{r4, r5, r6, r7, pc}
          else if ((x_size == 640U) && (y_size == 480U))
 8007666:	f5b4 7f20 	cmp.w	r4, #640	; 0x280
 800766a:	d11f      	bne.n	80076ac <OV5640_ZoomConfig+0xf4>
 800766c:	b1f2      	cbz	r2, 80076ac <OV5640_ZoomConfig+0xf4>
    if (zoom == OV5640_ZOOM_x1)
 800766e:	2f44      	cmp	r7, #68	; 0x44
 8007670:	d0e8      	beq.n	8007644 <OV5640_ZoomConfig+0x8c>
          zoom = zoom >> 2U;
 8007672:	08bf      	lsrs	r7, r7, #2
      tmp = 0x00;
 8007674:	2400      	movs	r4, #0
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8007676:	2301      	movs	r3, #1
 8007678:	f10d 0207 	add.w	r2, sp, #7
 800767c:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
 8007680:	4628      	mov	r0, r5
      tmp = 0x00;
 8007682:	f88d 4007 	strb.w	r4, [sp, #7]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8007686:	f000 f89d 	bl	80077c4 <ov5640_write_reg>
 800768a:	bb10      	cbnz	r0, 80076d2 <OV5640_ZoomConfig+0x11a>
        if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL1, &tmp, 1) != OV5640_OK)
 800768c:	f10d 0207 	add.w	r2, sp, #7
 8007690:	4628      	mov	r0, r5
 8007692:	2301      	movs	r3, #1
 8007694:	f245 6101 	movw	r1, #22017	; 0x5601
        tmp = (uint8_t)zoom;
 8007698:	f88d 7007 	strb.w	r7, [sp, #7]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL1, &tmp, 1) != OV5640_OK)
 800769c:	f000 f892 	bl	80077c4 <ov5640_write_reg>
 80076a0:	1b00      	subs	r0, r0, r4
 80076a2:	bf18      	it	ne
 80076a4:	2001      	movne	r0, #1
 80076a6:	4240      	negs	r0, r0
}
 80076a8:	b003      	add	sp, #12
 80076aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
          else if ((x_size == 480U) && (y_size == 272U))
 80076ac:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
 80076b0:	d106      	bne.n	80076c0 <OV5640_ZoomConfig+0x108>
 80076b2:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 80076b6:	d103      	bne.n	80076c0 <OV5640_ZoomConfig+0x108>
    if (zoom == OV5640_ZOOM_x1)
 80076b8:	2f44      	cmp	r7, #68	; 0x44
 80076ba:	d0c3      	beq.n	8007644 <OV5640_ZoomConfig+0x8c>
          zoom = zoom >> 1U;
 80076bc:	087f      	lsrs	r7, r7, #1
          break;
 80076be:	e7d9      	b.n	8007674 <OV5640_ZoomConfig+0xbc>
          else if ((x_size == 320U) && (y_size == 240U))
 80076c0:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
 80076c4:	d101      	bne.n	80076ca <OV5640_ZoomConfig+0x112>
 80076c6:	2bf0      	cmp	r3, #240	; 0xf0
 80076c8:	d0f6      	beq.n	80076b8 <OV5640_ZoomConfig+0x100>
          else if ((x_size == 160U) && (y_size == 120U))
 80076ca:	2ca0      	cmp	r4, #160	; 0xa0
 80076cc:	d101      	bne.n	80076d2 <OV5640_ZoomConfig+0x11a>
 80076ce:	2b78      	cmp	r3, #120	; 0x78
 80076d0:	d0b6      	beq.n	8007640 <OV5640_ZoomConfig+0x88>
        ret = OV5640_ERROR;
 80076d2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80076d6:	b003      	add	sp, #12
 80076d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076da:	bf00      	nop

080076dc <OV5640_RegisterBusIO>:
  if (pObj == NULL)
 80076dc:	b1c0      	cbz	r0, 8007710 <OV5640_RegisterBusIO+0x34>
    pObj->IO.WriteReg  = pIO->WriteReg;
 80076de:	68ca      	ldr	r2, [r1, #12]
{
 80076e0:	b470      	push	{r4, r5, r6}
    pObj->IO.DeInit    = pIO->DeInit;
 80076e2:	e9d1 3400 	ldrd	r3, r4, [r1]
    pObj->IO.Address   = pIO->Address;
 80076e6:	890e      	ldrh	r6, [r1, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 80076e8:	e9c0 3400 	strd	r3, r4, [r0]
    pObj->IO.GetTick   = pIO->GetTick;
 80076ec:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
    pObj->Ctx.ReadReg  = OV5640_ReadRegWrap;
 80076f0:	4909      	ldr	r1, [pc, #36]	; (8007718 <OV5640_RegisterBusIO+0x3c>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 80076f2:	60c2      	str	r2, [r0, #12]
    pObj->Ctx.WriteReg = OV5640_WriteRegWrap;
 80076f4:	4a09      	ldr	r2, [pc, #36]	; (800771c <OV5640_RegisterBusIO+0x40>)
    pObj->IO.Address   = pIO->Address;
 80076f6:	8106      	strh	r6, [r0, #8]
    pObj->Ctx.WriteReg = OV5640_WriteRegWrap;
 80076f8:	6182      	str	r2, [r0, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 80076fa:	e9c0 5404 	strd	r5, r4, [r0, #16]
    pObj->Ctx.ReadReg  = OV5640_ReadRegWrap;
 80076fe:	e9c0 1007 	strd	r1, r0, [r0, #28]
    if (pObj->IO.Init != NULL)
 8007702:	b10b      	cbz	r3, 8007708 <OV5640_RegisterBusIO+0x2c>
}
 8007704:	bc70      	pop	{r4, r5, r6}
      ret = pObj->IO.Init();
 8007706:	4718      	bx	r3
}
 8007708:	f04f 30ff 	mov.w	r0, #4294967295
 800770c:	bc70      	pop	{r4, r5, r6}
 800770e:	4770      	bx	lr
 8007710:	f04f 30ff 	mov.w	r0, #4294967295
 8007714:	4770      	bx	lr
 8007716:	bf00      	nop
 8007718:	08006635 	.word	0x08006635
 800771c:	08006645 	.word	0x08006645

08007720 <OV5640_ColorbarModeConfig>:
  if ((Cmd == COLORBAR_MODE_ENABLE) || (Cmd == COLORBAR_MODE_GRADUALV))
 8007720:	1e4b      	subs	r3, r1, #1
  uint8_t tmp = 0x40;
 8007722:	2240      	movs	r2, #64	; 0x40
{
 8007724:	b570      	push	{r4, r5, r6, lr}
  if ((Cmd == COLORBAR_MODE_ENABLE) || (Cmd == COLORBAR_MODE_GRADUALV))
 8007726:	2b01      	cmp	r3, #1
{
 8007728:	b082      	sub	sp, #8
 800772a:	f100 0518 	add.w	r5, r0, #24
  uint8_t tmp = 0x40;
 800772e:	f88d 2007 	strb.w	r2, [sp, #7]
  if ((Cmd == COLORBAR_MODE_ENABLE) || (Cmd == COLORBAR_MODE_GRADUALV))
 8007732:	d91f      	bls.n	8007774 <OV5640_ColorbarModeConfig+0x54>
    tmp = 0x10;
 8007734:	2210      	movs	r2, #16
 8007736:	ac02      	add	r4, sp, #8
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8007738:	2301      	movs	r3, #1
 800773a:	f245 5184 	movw	r1, #21892	; 0x5584
    tmp = 0x10;
 800773e:	f804 2d01 	strb.w	r2, [r4, #-1]!
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8007742:	4628      	mov	r0, r5
 8007744:	4622      	mov	r2, r4
 8007746:	f000 f83d 	bl	80077c4 <ov5640_write_reg>
    if (ret == OV5640_OK)
 800774a:	4606      	mov	r6, r0
 800774c:	b118      	cbz	r0, 8007756 <OV5640_ColorbarModeConfig+0x36>
      ret = OV5640_ERROR;
 800774e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007752:	b002      	add	sp, #8
 8007754:	bd70      	pop	{r4, r5, r6, pc}
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_PRE_ISP_TEST_SETTING1, &tmp, 1);
 8007756:	4622      	mov	r2, r4
 8007758:	4628      	mov	r0, r5
 800775a:	2301      	movs	r3, #1
 800775c:	f245 013d 	movw	r1, #20541	; 0x503d
      tmp = 0x00;
 8007760:	f88d 6007 	strb.w	r6, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_PRE_ISP_TEST_SETTING1, &tmp, 1);
 8007764:	f000 f82e 	bl	80077c4 <ov5640_write_reg>
    if (ret != OV5640_OK)
 8007768:	3000      	adds	r0, #0
 800776a:	bf18      	it	ne
 800776c:	2001      	movne	r0, #1
 800776e:	4240      	negs	r0, r0
}
 8007770:	b002      	add	sp, #8
 8007772:	bd70      	pop	{r4, r5, r6, pc}
 8007774:	460c      	mov	r4, r1
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8007776:	2301      	movs	r3, #1
 8007778:	f245 5184 	movw	r1, #21892	; 0x5584
 800777c:	4628      	mov	r0, r5
 800777e:	f10d 0207 	add.w	r2, sp, #7
 8007782:	f000 f81f 	bl	80077c4 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8007786:	2800      	cmp	r0, #0
 8007788:	d1e1      	bne.n	800774e <OV5640_ColorbarModeConfig+0x2e>
      tmp = (Cmd == COLORBAR_MODE_GRADUALV ? 0x8c : 0x80);
 800778a:	2c02      	cmp	r4, #2
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_PRE_ISP_TEST_SETTING1, &tmp, 1);
 800778c:	f10d 0207 	add.w	r2, sp, #7
 8007790:	4628      	mov	r0, r5
 8007792:	f04f 0301 	mov.w	r3, #1
      tmp = (Cmd == COLORBAR_MODE_GRADUALV ? 0x8c : 0x80);
 8007796:	bf14      	ite	ne
 8007798:	2480      	movne	r4, #128	; 0x80
 800779a:	248c      	moveq	r4, #140	; 0x8c
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_PRE_ISP_TEST_SETTING1, &tmp, 1);
 800779c:	f245 013d 	movw	r1, #20541	; 0x503d
      tmp = (Cmd == COLORBAR_MODE_GRADUALV ? 0x8c : 0x80);
 80077a0:	f88d 4007 	strb.w	r4, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_PRE_ISP_TEST_SETTING1, &tmp, 1);
 80077a4:	f000 f80e 	bl	80077c4 <ov5640_write_reg>
    if (ret != OV5640_OK)
 80077a8:	3000      	adds	r0, #0
 80077aa:	bf18      	it	ne
 80077ac:	2001      	movne	r0, #1
 80077ae:	4240      	negs	r0, r0
}
 80077b0:	b002      	add	sp, #8
 80077b2:	bd70      	pop	{r4, r5, r6, pc}

080077b4 <ov5640_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read
  * @retval Component status
  */
int32_t ov5640_read_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 80077b4:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80077b6:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 80077ba:	46a4      	mov	ip, r4
}
 80077bc:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80077c0:	4760      	bx	ip
 80077c2:	bf00      	nop

080077c4 <ov5640_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write
  * @retval Component status
  */
int32_t ov5640_write_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 80077c4:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, data, length);
 80077c6:	6804      	ldr	r4, [r0, #0]
 80077c8:	6880      	ldr	r0, [r0, #8]
 80077ca:	46a4      	mov	ip, r4
}
 80077cc:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, data, length);
 80077d0:	4760      	bx	ip
 80077d2:	bf00      	nop

080077d4 <OV9655_DeInit>:
  * @param  pObj  pointer to component object
  * @retval Component status
  */
int32_t OV9655_DeInit(OV9655_Object_t *pObj)
{
  if(pObj->IsInitialized == 1U)
 80077d4:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d102      	bne.n	80077e2 <OV9655_DeInit+0xe>
  {
    pObj->IsInitialized = 0U;
 80077dc:	2300      	movs	r3, #0
 80077de:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  }

  return OV9655_OK;
}
 80077e2:	2000      	movs	r0, #0
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop

080077e8 <OV9655_GetPixelFormat>:
{
  (void)(pObj);
  (void)(PixelFormat);

  return OV9655_ERROR;
}
 80077e8:	f04f 30ff 	mov.w	r0, #4294967295
 80077ec:	4770      	bx	lr
 80077ee:	bf00      	nop

080077f0 <OV9655_GetCapabilities>:
  */
int32_t OV9655_GetCapabilities(OV9655_Object_t *pObj, OV9655_Capabilities_t *Capabilities)
{
  int32_t ret;

  if(pObj == NULL)
 80077f0:	b168      	cbz	r0, 800780e <OV9655_GetCapabilities+0x1e>
  {
    ret = OV9655_ERROR;
  }
  else
  {
    Capabilities->Config_Brightness    = 1;
 80077f2:	2301      	movs	r3, #1
    Capabilities->Config_Contrast      = 1;
    Capabilities->Config_HueDegree     = 0;
 80077f4:	2200      	movs	r2, #0
    Capabilities->Config_Brightness    = 1;
 80077f6:	60cb      	str	r3, [r1, #12]
    Capabilities->Config_Resolution    = 1;
    Capabilities->Config_Saturation    = 0;
    Capabilities->Config_SpecialEffect = 1;
    Capabilities->Config_Zoom          = 0;

    ret = OV9655_OK;
 80077f8:	4610      	mov	r0, r2
    Capabilities->Config_Contrast      = 1;
 80077fa:	614b      	str	r3, [r1, #20]
    Capabilities->Config_MirrorFlip    = 1;
 80077fc:	61cb      	str	r3, [r1, #28]
    Capabilities->Config_NightMode     = 1;
 80077fe:	624b      	str	r3, [r1, #36]	; 0x24
    Capabilities->Config_Resolution    = 1;
 8007800:	600b      	str	r3, [r1, #0]
    Capabilities->Config_SpecialEffect = 1;
 8007802:	608b      	str	r3, [r1, #8]
    Capabilities->Config_HueDegree     = 0;
 8007804:	618a      	str	r2, [r1, #24]
    Capabilities->Config_LightMode     = 0;
 8007806:	604a      	str	r2, [r1, #4]
    Capabilities->Config_Saturation    = 0;
 8007808:	610a      	str	r2, [r1, #16]
    Capabilities->Config_Zoom          = 0;
 800780a:	620a      	str	r2, [r1, #32]
 800780c:	4770      	bx	lr
    ret = OV9655_ERROR;
 800780e:	f04f 30ff 	mov.w	r0, #4294967295
  }

  return ret;
}
 8007812:	4770      	bx	lr

08007814 <OV9655_SetLightMode>:
{
  (void)(pObj);
  (void)(LightMode);

  return OV9655_ERROR;
}
 8007814:	f04f 30ff 	mov.w	r0, #4294967295
 8007818:	4770      	bx	lr
 800781a:	bf00      	nop

0800781c <OV9655_SetSaturation>:
{
  (void)(pObj);
  (void)(Level);

  return OV9655_ERROR;
}
 800781c:	f04f 30ff 	mov.w	r0, #4294967295
 8007820:	4770      	bx	lr
 8007822:	bf00      	nop

08007824 <OV9655_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV9655_ReadRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8007824:	b410      	push	{r4}
  OV9655_Object_t *pObj = (OV9655_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8007826:	6904      	ldr	r4, [r0, #16]
 8007828:	8900      	ldrh	r0, [r0, #8]
 800782a:	46a4      	mov	ip, r4
}
 800782c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8007830:	4760      	bx	ip
 8007832:	bf00      	nop

08007834 <OV9655_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV9655_WriteRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8007834:	b410      	push	{r4}
  OV9655_Object_t *pObj = (OV9655_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8007836:	68c4      	ldr	r4, [r0, #12]
 8007838:	8900      	ldrh	r0, [r0, #8]
 800783a:	46a4      	mov	ip, r4
}
 800783c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8007840:	4760      	bx	ip
 8007842:	bf00      	nop

08007844 <OV9655_SetResolution>:
  if (Resolution > OV9655_R640x480)
 8007844:	2903      	cmp	r1, #3
{
 8007846:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800784a:	b082      	sub	sp, #8
  if (Resolution > OV9655_R640x480)
 800784c:	d83a      	bhi.n	80078c4 <OV9655_SetResolution+0x80>
    switch (Resolution)
 800784e:	2901      	cmp	r1, #1
 8007850:	468a      	mov	sl, r1
 8007852:	4604      	mov	r4, r0
      for(index=0; index<(sizeof(OV9655_QVGA_QQVGA)/2U); index++)
 8007854:	f04f 0300 	mov.w	r3, #0
    switch (Resolution)
 8007858:	f000 8088 	beq.w	800796c <OV9655_SetResolution+0x128>
 800785c:	d33f      	bcc.n	80078de <OV9655_SetResolution+0x9a>
 800785e:	2903      	cmp	r1, #3
 8007860:	d83d      	bhi.n	80078de <OV9655_SetResolution+0x9a>
          tmp = OV9655_VGA[index][1];
 8007862:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8007a1c <OV9655_SetResolution+0x1d8>
          if(ov9655_write_reg(&pObj->Ctx, OV9655_VGA[index][0], &tmp, 1) != OV9655_OK)
 8007866:	f100 0918 	add.w	r9, r0, #24
  int32_t ret = OV9655_OK;
 800786a:	461d      	mov	r5, r3
 800786c:	1c5e      	adds	r6, r3, #1
        if(ret != OV9655_ERROR)
 800786e:	bb9d      	cbnz	r5, 80078d8 <OV9655_SetResolution+0x94>
          tmp = OV9655_VGA[index][1];
 8007870:	eb08 0043 	add.w	r0, r8, r3, lsl #1
          if(ov9655_write_reg(&pObj->Ctx, OV9655_VGA[index][0], &tmp, 1) != OV9655_OK)
 8007874:	f818 1013 	ldrb.w	r1, [r8, r3, lsl #1]
 8007878:	f10d 0207 	add.w	r2, sp, #7
 800787c:	2301      	movs	r3, #1
          tmp = OV9655_VGA[index][1];
 800787e:	7845      	ldrb	r5, [r0, #1]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_VGA[index][0], &tmp, 1) != OV9655_OK)
 8007880:	4648      	mov	r0, r9
          tmp = OV9655_VGA[index][1];
 8007882:	f88d 5007 	strb.w	r5, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_VGA[index][0], &tmp, 1) != OV9655_OK)
 8007886:	f000 fbf3 	bl	8008070 <ov9655_write_reg>
 800788a:	3000      	adds	r0, #0
  tickstart = pObj->IO.GetTick();
 800788c:	6963      	ldr	r3, [r4, #20]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_VGA[index][0], &tmp, 1) != OV9655_OK)
 800788e:	bf18      	it	ne
 8007890:	2001      	movne	r0, #1
 8007892:	4245      	negs	r5, r0
  tickstart = pObj->IO.GetTick();
 8007894:	4798      	blx	r3
 8007896:	4607      	mov	r7, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8007898:	6963      	ldr	r3, [r4, #20]
 800789a:	4798      	blx	r3
 800789c:	1bc0      	subs	r0, r0, r7
 800789e:	2801      	cmp	r0, #1
 80078a0:	d9fa      	bls.n	8007898 <OV9655_SetResolution+0x54>
      for(index=0; index<(sizeof(OV9655_VGA)/2U); index++)
 80078a2:	2e93      	cmp	r6, #147	; 0x93
 80078a4:	4633      	mov	r3, r6
 80078a6:	d1e1      	bne.n	800786c <OV9655_SetResolution+0x28>
 80078a8:	e00e      	b.n	80078c8 <OV9655_SetResolution+0x84>
      for(index=0; index<(sizeof(OV9655_QVGA_QQVGA)/2U); index++)
 80078aa:	2e90      	cmp	r6, #144	; 0x90
 80078ac:	f106 0602 	add.w	r6, r6, #2
 80078b0:	d001      	beq.n	80078b6 <OV9655_SetResolution+0x72>
 80078b2:	2e91      	cmp	r6, #145	; 0x91
 80078b4:	d1f9      	bne.n	80078aa <OV9655_SetResolution+0x66>
 80078b6:	2601      	movs	r6, #1
      for(index=0; index<(sizeof(OV9655_QQVGA)/2U); index++)
 80078b8:	2e05      	cmp	r6, #5
 80078ba:	d003      	beq.n	80078c4 <OV9655_SetResolution+0x80>
 80078bc:	2e04      	cmp	r6, #4
 80078be:	f106 0602 	add.w	r6, r6, #2
 80078c2:	d1f9      	bne.n	80078b8 <OV9655_SetResolution+0x74>
      for(index=0; index< (sizeof(OV9655_QVGA)/2U); index++)
 80078c4:	f04f 35ff 	mov.w	r5, #4294967295
}
 80078c8:	4628      	mov	r0, r5
 80078ca:	b002      	add	sp, #8
 80078cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      for(index=0; index<(sizeof(OV9655_VGA)/2U); index++)
 80078d0:	2e92      	cmp	r6, #146	; 0x92
 80078d2:	f106 0602 	add.w	r6, r6, #2
 80078d6:	d0f7      	beq.n	80078c8 <OV9655_SetResolution+0x84>
 80078d8:	2e93      	cmp	r6, #147	; 0x93
 80078da:	d1f9      	bne.n	80078d0 <OV9655_SetResolution+0x8c>
 80078dc:	e7f2      	b.n	80078c4 <OV9655_SetResolution+0x80>
          tmp = OV9655_QVGA_QQVGA[index][1];
 80078de:	f8df 8140 	ldr.w	r8, [pc, #320]	; 8007a20 <OV9655_SetResolution+0x1dc>
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 80078e2:	f104 0918 	add.w	r9, r4, #24
  int32_t ret = OV9655_OK;
 80078e6:	461d      	mov	r5, r3
 80078e8:	1c5e      	adds	r6, r3, #1
        if(ret != OV9655_ERROR)
 80078ea:	2d00      	cmp	r5, #0
 80078ec:	d1e1      	bne.n	80078b2 <OV9655_SetResolution+0x6e>
          tmp = OV9655_QVGA_QQVGA[index][1];
 80078ee:	eb08 0043 	add.w	r0, r8, r3, lsl #1
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 80078f2:	f818 1013 	ldrb.w	r1, [r8, r3, lsl #1]
 80078f6:	f10d 0207 	add.w	r2, sp, #7
 80078fa:	2301      	movs	r3, #1
          tmp = OV9655_QVGA_QQVGA[index][1];
 80078fc:	7845      	ldrb	r5, [r0, #1]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 80078fe:	4648      	mov	r0, r9
          tmp = OV9655_QVGA_QQVGA[index][1];
 8007900:	f88d 5007 	strb.w	r5, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8007904:	f000 fbb4 	bl	8008070 <ov9655_write_reg>
 8007908:	3000      	adds	r0, #0
  tickstart = pObj->IO.GetTick();
 800790a:	6963      	ldr	r3, [r4, #20]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 800790c:	bf18      	it	ne
 800790e:	2001      	movne	r0, #1
 8007910:	4245      	negs	r5, r0
  tickstart = pObj->IO.GetTick();
 8007912:	4798      	blx	r3
 8007914:	4607      	mov	r7, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8007916:	6963      	ldr	r3, [r4, #20]
 8007918:	4798      	blx	r3
 800791a:	1bc0      	subs	r0, r0, r7
 800791c:	2801      	cmp	r0, #1
 800791e:	d9fa      	bls.n	8007916 <OV9655_SetResolution+0xd2>
      for(index=0; index<(sizeof(OV9655_QVGA_QQVGA)/2U); index++)
 8007920:	2e91      	cmp	r6, #145	; 0x91
 8007922:	4633      	mov	r3, r6
 8007924:	d1e0      	bne.n	80078e8 <OV9655_SetResolution+0xa4>
 8007926:	2300      	movs	r3, #0
          tmp = OV9655_QQVGA[index][1];
 8007928:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 8007a24 <OV9655_SetResolution+0x1e0>
 800792c:	1c5e      	adds	r6, r3, #1
        if(ret != OV9655_ERROR)
 800792e:	2d00      	cmp	r5, #0
 8007930:	d1c2      	bne.n	80078b8 <OV9655_SetResolution+0x74>
          tmp = OV9655_QQVGA[index][1];
 8007932:	eb08 0043 	add.w	r0, r8, r3, lsl #1
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8007936:	f818 1013 	ldrb.w	r1, [r8, r3, lsl #1]
 800793a:	f10d 0207 	add.w	r2, sp, #7
 800793e:	2301      	movs	r3, #1
          tmp = OV9655_QQVGA[index][1];
 8007940:	7845      	ldrb	r5, [r0, #1]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8007942:	4648      	mov	r0, r9
          tmp = OV9655_QQVGA[index][1];
 8007944:	f88d 5007 	strb.w	r5, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8007948:	f000 fb92 	bl	8008070 <ov9655_write_reg>
 800794c:	3000      	adds	r0, #0
  tickstart = pObj->IO.GetTick();
 800794e:	6963      	ldr	r3, [r4, #20]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8007950:	bf18      	it	ne
 8007952:	2001      	movne	r0, #1
 8007954:	4245      	negs	r5, r0
  tickstart = pObj->IO.GetTick();
 8007956:	4798      	blx	r3
 8007958:	4607      	mov	r7, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 800795a:	6963      	ldr	r3, [r4, #20]
 800795c:	4798      	blx	r3
 800795e:	1bc0      	subs	r0, r0, r7
 8007960:	2801      	cmp	r0, #1
 8007962:	d9fa      	bls.n	800795a <OV9655_SetResolution+0x116>
      for(index=0; index<(sizeof(OV9655_QQVGA)/2U); index++)
 8007964:	2e05      	cmp	r6, #5
 8007966:	4633      	mov	r3, r6
 8007968:	d1e0      	bne.n	800792c <OV9655_SetResolution+0xe8>
 800796a:	e7ad      	b.n	80078c8 <OV9655_SetResolution+0x84>
          tmp = OV9655_QVGA_QQVGA[index][1];
 800796c:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8007a20 <OV9655_SetResolution+0x1dc>
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8007970:	f100 0918 	add.w	r9, r0, #24
  int32_t ret = OV9655_OK;
 8007974:	461d      	mov	r5, r3
 8007976:	1c5e      	adds	r6, r3, #1
        if(ret != OV9655_ERROR)
 8007978:	2d00      	cmp	r5, #0
 800797a:	d141      	bne.n	8007a00 <OV9655_SetResolution+0x1bc>
          tmp = OV9655_QVGA_QQVGA[index][1];
 800797c:	eb08 0043 	add.w	r0, r8, r3, lsl #1
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8007980:	f818 1013 	ldrb.w	r1, [r8, r3, lsl #1]
 8007984:	f10d 0207 	add.w	r2, sp, #7
 8007988:	2301      	movs	r3, #1
          tmp = OV9655_QVGA_QQVGA[index][1];
 800798a:	7845      	ldrb	r5, [r0, #1]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 800798c:	4648      	mov	r0, r9
          tmp = OV9655_QVGA_QQVGA[index][1];
 800798e:	f88d 5007 	strb.w	r5, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8007992:	f000 fb6d 	bl	8008070 <ov9655_write_reg>
 8007996:	3000      	adds	r0, #0
  tickstart = pObj->IO.GetTick();
 8007998:	6963      	ldr	r3, [r4, #20]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 800799a:	bf18      	it	ne
 800799c:	2001      	movne	r0, #1
 800799e:	4245      	negs	r5, r0
  tickstart = pObj->IO.GetTick();
 80079a0:	4798      	blx	r3
 80079a2:	4607      	mov	r7, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80079a4:	6963      	ldr	r3, [r4, #20]
 80079a6:	4798      	blx	r3
 80079a8:	1bc0      	subs	r0, r0, r7
 80079aa:	2801      	cmp	r0, #1
 80079ac:	d9fa      	bls.n	80079a4 <OV9655_SetResolution+0x160>
      for(index=0; index<(sizeof(OV9655_QVGA_QQVGA)/2U); index++)
 80079ae:	2e91      	cmp	r6, #145	; 0x91
 80079b0:	4633      	mov	r3, r6
 80079b2:	d1e0      	bne.n	8007976 <OV9655_SetResolution+0x132>
 80079b4:	2300      	movs	r3, #0
          tmp = OV9655_QVGA[index][1];
 80079b6:	4f18      	ldr	r7, [pc, #96]	; (8007a18 <OV9655_SetResolution+0x1d4>)
 80079b8:	f103 0a01 	add.w	sl, r3, #1
        if(ret != OV9655_ERROR)
 80079bc:	bb15      	cbnz	r5, 8007a04 <OV9655_SetResolution+0x1c0>
          tmp = OV9655_QVGA[index][1];
 80079be:	eb07 0043 	add.w	r0, r7, r3, lsl #1
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA[index][0], &tmp, 1) != OV9655_OK)
 80079c2:	f817 1013 	ldrb.w	r1, [r7, r3, lsl #1]
 80079c6:	f10d 0207 	add.w	r2, sp, #7
 80079ca:	2301      	movs	r3, #1
          tmp = OV9655_QVGA[index][1];
 80079cc:	7845      	ldrb	r5, [r0, #1]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA[index][0], &tmp, 1) != OV9655_OK)
 80079ce:	4648      	mov	r0, r9
          tmp = OV9655_QVGA[index][1];
 80079d0:	f88d 5007 	strb.w	r5, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA[index][0], &tmp, 1) != OV9655_OK)
 80079d4:	f000 fb4c 	bl	8008070 <ov9655_write_reg>
 80079d8:	3000      	adds	r0, #0
  tickstart = pObj->IO.GetTick();
 80079da:	6963      	ldr	r3, [r4, #20]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA[index][0], &tmp, 1) != OV9655_OK)
 80079dc:	bf18      	it	ne
 80079de:	2001      	movne	r0, #1
 80079e0:	4245      	negs	r5, r0
  tickstart = pObj->IO.GetTick();
 80079e2:	4798      	blx	r3
 80079e4:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80079e6:	6963      	ldr	r3, [r4, #20]
 80079e8:	4798      	blx	r3
 80079ea:	1b80      	subs	r0, r0, r6
 80079ec:	2801      	cmp	r0, #1
 80079ee:	d9fa      	bls.n	80079e6 <OV9655_SetResolution+0x1a2>
 80079f0:	4653      	mov	r3, sl
      for(index=0; index< (sizeof(OV9655_QVGA)/2U); index++)
 80079f2:	2b05      	cmp	r3, #5
 80079f4:	d1e0      	bne.n	80079b8 <OV9655_SetResolution+0x174>
 80079f6:	e767      	b.n	80078c8 <OV9655_SetResolution+0x84>
      for(index=0; index<(sizeof(OV9655_QVGA_QQVGA)/2U); index++)
 80079f8:	2e90      	cmp	r6, #144	; 0x90
 80079fa:	f106 0602 	add.w	r6, r6, #2
 80079fe:	d001      	beq.n	8007a04 <OV9655_SetResolution+0x1c0>
 8007a00:	2e91      	cmp	r6, #145	; 0x91
 8007a02:	d1f9      	bne.n	80079f8 <OV9655_SetResolution+0x1b4>
      for(index=0; index< (sizeof(OV9655_QVGA)/2U); index++)
 8007a04:	f1ba 0f05 	cmp.w	sl, #5
 8007a08:	f43f af5c 	beq.w	80078c4 <OV9655_SetResolution+0x80>
 8007a0c:	f1ba 0f04 	cmp.w	sl, #4
 8007a10:	f10a 0a02 	add.w	sl, sl, #2
 8007a14:	d1f6      	bne.n	8007a04 <OV9655_SetResolution+0x1c0>
 8007a16:	e755      	b.n	80078c4 <OV9655_SetResolution+0x80>
 8007a18:	080210c0 	.word	0x080210c0
 8007a1c:	080211f0 	.word	0x080211f0
 8007a20:	080210cc 	.word	0x080210cc
 8007a24:	080210b4 	.word	0x080210b4

08007a28 <OV9655_SetColorEffect>:
  switch(Effect)
 8007a28:	3901      	subs	r1, #1
{
 8007a2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a2c:	f100 0518 	add.w	r5, r0, #24
 8007a30:	b083      	sub	sp, #12
  switch(Effect)
 8007a32:	291f      	cmp	r1, #31
 8007a34:	f200 8153 	bhi.w	8007cde <OV9655_SetColorEffect+0x2b6>
 8007a38:	e8df f011 	tbh	[pc, r1, lsl #1]
 8007a3c:	00a00064 	.word	0x00a00064
 8007a40:	00d20151 	.word	0x00d20151
 8007a44:	01510151 	.word	0x01510151
 8007a48:	01070151 	.word	0x01070151
 8007a4c:	01510151 	.word	0x01510151
 8007a50:	01510151 	.word	0x01510151
 8007a54:	01510151 	.word	0x01510151
 8007a58:	01210151 	.word	0x01210151
 8007a5c:	01510151 	.word	0x01510151
 8007a60:	01510151 	.word	0x01510151
 8007a64:	01510151 	.word	0x01510151
 8007a68:	01510151 	.word	0x01510151
 8007a6c:	01510151 	.word	0x01510151
 8007a70:	01510151 	.word	0x01510151
 8007a74:	01510151 	.word	0x01510151
 8007a78:	00200151 	.word	0x00200151
    tmp = 0xEC;
 8007a7c:	22ec      	movs	r2, #236	; 0xec
    tmp = 0xCC;
 8007a7e:	ae02      	add	r6, sp, #8
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8007a80:	2301      	movs	r3, #1
 8007a82:	213a      	movs	r1, #58	; 0x3a
 8007a84:	4628      	mov	r0, r5
    tmp = 0xCC;
 8007a86:	f806 2d01 	strb.w	r2, [r6, #-1]!
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8007a8a:	4632      	mov	r2, r6
 8007a8c:	f000 faf0 	bl	8008070 <ov9655_write_reg>
    tmp = 0x80;
 8007a90:	2780      	movs	r7, #128	; 0x80
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8007a92:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8007a94:	4632      	mov	r2, r6
 8007a96:	2301      	movs	r3, #1
 8007a98:	214f      	movs	r1, #79	; 0x4f
 8007a9a:	4628      	mov	r0, r5
    tmp = 0x80;
 8007a9c:	f88d 7007 	strb.w	r7, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8007aa0:	f000 fae6 	bl	8008070 <ov9655_write_reg>
 8007aa4:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8007aa6:	4632      	mov	r2, r6
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	2150      	movs	r1, #80	; 0x50
 8007aac:	4628      	mov	r0, r5
 8007aae:	f000 fadf 	bl	8008070 <ov9655_write_reg>
    tmp = 0x00;
 8007ab2:	f04f 0c00 	mov.w	ip, #0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8007ab6:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8007ab8:	4632      	mov	r2, r6
 8007aba:	2301      	movs	r3, #1
 8007abc:	2151      	movs	r1, #81	; 0x51
 8007abe:	4628      	mov	r0, r5
    tmp = 0x00;
 8007ac0:	f88d c007 	strb.w	ip, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8007ac4:	f000 fad4 	bl	8008070 <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8007ac8:	4632      	mov	r2, r6
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8007aca:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8007acc:	2301      	movs	r3, #1
 8007ace:	2152      	movs	r1, #82	; 0x52
 8007ad0:	4628      	mov	r0, r5
 8007ad2:	f000 facd 	bl	8008070 <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8007ad6:	4632      	mov	r2, r6
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8007ad8:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8007ada:	2301      	movs	r3, #1
 8007adc:	2153      	movs	r1, #83	; 0x53
 8007ade:	4628      	mov	r0, r5
    tmp = 0x80;
 8007ae0:	f88d 7007 	strb.w	r7, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8007ae4:	f000 fac4 	bl	8008070 <ov9655_write_reg>
 8007ae8:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 8007aea:	4632      	mov	r2, r6
 8007aec:	4628      	mov	r0, r5
 8007aee:	2301      	movs	r3, #1
 8007af0:	2154      	movs	r1, #84	; 0x54
 8007af2:	f000 fabd 	bl	8008070 <ov9655_write_reg>
 8007af6:	4420      	add	r0, r4
  if(ret != OV9655_OK)
 8007af8:	3000      	adds	r0, #0
 8007afa:	bf18      	it	ne
 8007afc:	2001      	movne	r0, #1
}
 8007afe:	4240      	negs	r0, r0
 8007b00:	b003      	add	sp, #12
 8007b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp = 0xCC;
 8007b04:	ae02      	add	r6, sp, #8
 8007b06:	22cc      	movs	r2, #204	; 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8007b08:	2301      	movs	r3, #1
 8007b0a:	213a      	movs	r1, #58	; 0x3a
    tmp = 0xCC;
 8007b0c:	f806 2d01 	strb.w	r2, [r6, #-1]!
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8007b10:	4628      	mov	r0, r5
 8007b12:	4632      	mov	r2, r6
    tmp = 0x00;
 8007b14:	2700      	movs	r7, #0
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8007b16:	f000 faab 	bl	8008070 <ov9655_write_reg>
 8007b1a:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8007b1c:	4632      	mov	r2, r6
 8007b1e:	2301      	movs	r3, #1
 8007b20:	214f      	movs	r1, #79	; 0x4f
 8007b22:	4628      	mov	r0, r5
    tmp = 0x00;
 8007b24:	f88d 7007 	strb.w	r7, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8007b28:	f000 faa2 	bl	8008070 <ov9655_write_reg>
 8007b2c:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8007b2e:	4632      	mov	r2, r6
 8007b30:	2301      	movs	r3, #1
 8007b32:	2150      	movs	r1, #80	; 0x50
 8007b34:	4628      	mov	r0, r5
    tmp = 0x60;
 8007b36:	2760      	movs	r7, #96	; 0x60
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8007b38:	f000 fa9a 	bl	8008070 <ov9655_write_reg>
 8007b3c:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8007b3e:	4632      	mov	r2, r6
 8007b40:	2301      	movs	r3, #1
 8007b42:	2151      	movs	r1, #81	; 0x51
 8007b44:	4628      	mov	r0, r5
 8007b46:	f000 fa93 	bl	8008070 <ov9655_write_reg>
 8007b4a:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8007b4c:	4632      	mov	r2, r6
 8007b4e:	2301      	movs	r3, #1
 8007b50:	2152      	movs	r1, #82	; 0x52
 8007b52:	4628      	mov	r0, r5
 8007b54:	f000 fa8c 	bl	8008070 <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8007b58:	4632      	mov	r2, r6
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8007b5a:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	2153      	movs	r1, #83	; 0x53
 8007b60:	4628      	mov	r0, r5
 8007b62:	f000 fa85 	bl	8008070 <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8007b66:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 8007b68:	4632      	mov	r2, r6
 8007b6a:	4628      	mov	r0, r5
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	2154      	movs	r1, #84	; 0x54
    tmp = 0x00;
 8007b70:	f88d 7007 	strb.w	r7, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 8007b74:	f000 fa7c 	bl	8008070 <ov9655_write_reg>
 8007b78:	4420      	add	r0, r4
    break;
 8007b7a:	e7bd      	b.n	8007af8 <OV9655_SetColorEffect+0xd0>
    tmp = 0xCC;
 8007b7c:	ae02      	add	r6, sp, #8
 8007b7e:	22cc      	movs	r2, #204	; 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8007b80:	2301      	movs	r3, #1
 8007b82:	213a      	movs	r1, #58	; 0x3a
    tmp = 0xCC;
 8007b84:	f806 2d01 	strb.w	r2, [r6, #-1]!
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8007b88:	4628      	mov	r0, r5
 8007b8a:	4632      	mov	r2, r6
    tmp = 0x60;
 8007b8c:	2760      	movs	r7, #96	; 0x60
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8007b8e:	f000 fa6f 	bl	8008070 <ov9655_write_reg>
 8007b92:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8007b94:	4632      	mov	r2, r6
 8007b96:	2301      	movs	r3, #1
 8007b98:	214f      	movs	r1, #79	; 0x4f
 8007b9a:	4628      	mov	r0, r5
    tmp = 0x60;
 8007b9c:	f88d 7007 	strb.w	r7, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8007ba0:	f000 fa66 	bl	8008070 <ov9655_write_reg>
    tmp = 0x00;
 8007ba4:	2700      	movs	r7, #0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8007ba6:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8007ba8:	4632      	mov	r2, r6
 8007baa:	2301      	movs	r3, #1
 8007bac:	2150      	movs	r1, #80	; 0x50
 8007bae:	4628      	mov	r0, r5
    tmp = 0x00;
 8007bb0:	f88d 7007 	strb.w	r7, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8007bb4:	f000 fa5c 	bl	8008070 <ov9655_write_reg>
 8007bb8:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8007bba:	4632      	mov	r2, r6
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	2151      	movs	r1, #81	; 0x51
 8007bc0:	4628      	mov	r0, r5
 8007bc2:	f000 fa55 	bl	8008070 <ov9655_write_reg>
 8007bc6:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8007bc8:	4632      	mov	r2, r6
 8007bca:	2301      	movs	r3, #1
 8007bcc:	2152      	movs	r1, #82	; 0x52
 8007bce:	4628      	mov	r0, r5
 8007bd0:	f000 fa4e 	bl	8008070 <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8007bd4:	4632      	mov	r2, r6
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8007bd6:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8007bd8:	2301      	movs	r3, #1
 8007bda:	2153      	movs	r1, #83	; 0x53
 8007bdc:	4628      	mov	r0, r5
 8007bde:	e781      	b.n	8007ae4 <OV9655_SetColorEffect+0xbc>
    tmp = 0xCC;
 8007be0:	ae02      	add	r6, sp, #8
 8007be2:	22cc      	movs	r2, #204	; 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8007be4:	2301      	movs	r3, #1
 8007be6:	213a      	movs	r1, #58	; 0x3a
    tmp = 0xCC;
 8007be8:	f806 2d01 	strb.w	r2, [r6, #-1]!
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8007bec:	4628      	mov	r0, r5
 8007bee:	4632      	mov	r2, r6
    tmp = 0x00;
 8007bf0:	2700      	movs	r7, #0
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8007bf2:	f000 fa3d 	bl	8008070 <ov9655_write_reg>
 8007bf6:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8007bf8:	4632      	mov	r2, r6
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	214f      	movs	r1, #79	; 0x4f
 8007bfe:	4628      	mov	r0, r5
    tmp = 0x00;
 8007c00:	f88d 7007 	strb.w	r7, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8007c04:	f000 fa34 	bl	8008070 <ov9655_write_reg>
 8007c08:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8007c0a:	4632      	mov	r2, r6
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	2150      	movs	r1, #80	; 0x50
 8007c10:	4628      	mov	r0, r5
 8007c12:	f000 fa2d 	bl	8008070 <ov9655_write_reg>
 8007c16:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8007c18:	4632      	mov	r2, r6
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	2151      	movs	r1, #81	; 0x51
 8007c1e:	4628      	mov	r0, r5
 8007c20:	f000 fa26 	bl	8008070 <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8007c24:	4632      	mov	r2, r6
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8007c26:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8007c28:	2301      	movs	r3, #1
 8007c2a:	2152      	movs	r1, #82	; 0x52
 8007c2c:	4628      	mov	r0, r5
 8007c2e:	f000 fa1f 	bl	8008070 <ov9655_write_reg>
    tmp = 0x80;
 8007c32:	f04f 0c80 	mov.w	ip, #128	; 0x80
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8007c36:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8007c38:	4632      	mov	r2, r6
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	2153      	movs	r1, #83	; 0x53
 8007c3e:	4628      	mov	r0, r5
    tmp = 0x80;
 8007c40:	f88d c007 	strb.w	ip, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8007c44:	f000 fa14 	bl	8008070 <ov9655_write_reg>
 8007c48:	e78d      	b.n	8007b66 <OV9655_SetColorEffect+0x13e>
    tmp = 0xCC;
 8007c4a:	ae02      	add	r6, sp, #8
 8007c4c:	22cc      	movs	r2, #204	; 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8007c4e:	2301      	movs	r3, #1
 8007c50:	213a      	movs	r1, #58	; 0x3a
    tmp = 0xCC;
 8007c52:	f806 2d01 	strb.w	r2, [r6, #-1]!
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8007c56:	4628      	mov	r0, r5
 8007c58:	4632      	mov	r2, r6
    tmp = 0x00;
 8007c5a:	2700      	movs	r7, #0
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8007c5c:	f000 fa08 	bl	8008070 <ov9655_write_reg>
 8007c60:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8007c62:	4632      	mov	r2, r6
 8007c64:	2301      	movs	r3, #1
 8007c66:	214f      	movs	r1, #79	; 0x4f
 8007c68:	4628      	mov	r0, r5
    tmp = 0x00;
 8007c6a:	f88d 7007 	strb.w	r7, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8007c6e:	f000 f9ff 	bl	8008070 <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8007c72:	4632      	mov	r2, r6
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8007c74:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8007c76:	2301      	movs	r3, #1
 8007c78:	2150      	movs	r1, #80	; 0x50
 8007c7a:	4628      	mov	r0, r5
 8007c7c:	e79a      	b.n	8007bb4 <OV9655_SetColorEffect+0x18c>
    tmp = 0xCC;
 8007c7e:	ae02      	add	r6, sp, #8
 8007c80:	22cc      	movs	r2, #204	; 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8007c82:	2301      	movs	r3, #1
 8007c84:	213a      	movs	r1, #58	; 0x3a
    tmp = 0xCC;
 8007c86:	f806 2d01 	strb.w	r2, [r6, #-1]!
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8007c8a:	4628      	mov	r0, r5
 8007c8c:	4632      	mov	r2, r6
    tmp = 0x00;
 8007c8e:	2700      	movs	r7, #0
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8007c90:	f000 f9ee 	bl	8008070 <ov9655_write_reg>
 8007c94:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8007c96:	4632      	mov	r2, r6
 8007c98:	2301      	movs	r3, #1
 8007c9a:	214f      	movs	r1, #79	; 0x4f
 8007c9c:	4628      	mov	r0, r5
    tmp = 0x00;
 8007c9e:	f88d 7007 	strb.w	r7, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8007ca2:	f000 f9e5 	bl	8008070 <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8007ca6:	4632      	mov	r2, r6
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8007ca8:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8007caa:	2301      	movs	r3, #1
 8007cac:	2150      	movs	r1, #80	; 0x50
 8007cae:	4628      	mov	r0, r5
 8007cb0:	f000 f9de 	bl	8008070 <ov9655_write_reg>
    tmp = 0x20;
 8007cb4:	f04f 0c20 	mov.w	ip, #32
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8007cb8:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8007cba:	4632      	mov	r2, r6
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	2151      	movs	r1, #81	; 0x51
 8007cc0:	4628      	mov	r0, r5
    tmp = 0x20;
 8007cc2:	f88d c007 	strb.w	ip, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8007cc6:	f000 f9d3 	bl	8008070 <ov9655_write_reg>
    tmp = 0xF0;
 8007cca:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8007cce:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8007cd0:	4632      	mov	r2, r6
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	2152      	movs	r1, #82	; 0x52
 8007cd6:	4628      	mov	r0, r5
    tmp = 0xF0;
 8007cd8:	f88d c007 	strb.w	ip, [sp, #7]
 8007cdc:	e6f9      	b.n	8007ad2 <OV9655_SetColorEffect+0xaa>
    tmp = 0xCC;
 8007cde:	22cc      	movs	r2, #204	; 0xcc
 8007ce0:	e6cd      	b.n	8007a7e <OV9655_SetColorEffect+0x56>
 8007ce2:	bf00      	nop

08007ce4 <OV9655_SetBrightness>:
{
 8007ce4:	b570      	push	{r4, r5, r6, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	4606      	mov	r6, r0
  const uint8_t brightness_level[] = {0xB0U, 0xB0U, 0xB0U, 0x98U, 0x00U, 0x18U, 0x30U, 0x30U, 0x30U};
 8007cea:	4a0c      	ldr	r2, [pc, #48]	; (8007d1c <OV9655_SetBrightness+0x38>)
  tmp = brightness_level[Level + 4];
 8007cec:	a804      	add	r0, sp, #16
  const uint8_t brightness_level[] = {0xB0U, 0xB0U, 0xB0U, 0x98U, 0x00U, 0x18U, 0x30U, 0x30U, 0x30U};
 8007cee:	ab01      	add	r3, sp, #4
  tmp = brightness_level[Level + 4];
 8007cf0:	4604      	mov	r4, r0
 8007cf2:	1845      	adds	r5, r0, r1
  const uint8_t brightness_level[] = {0xB0U, 0xB0U, 0xB0U, 0x98U, 0x00U, 0x18U, 0x30U, 0x30U, 0x30U};
 8007cf4:	ca07      	ldmia	r2, {r0, r1, r2}
 8007cf6:	c303      	stmia	r3!, {r0, r1}
 8007cf8:	701a      	strb	r2, [r3, #0]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_BRIGHTNESS_ADJUSTMENT, &tmp, 1) != OV9655_OK)
 8007cfa:	f106 0018 	add.w	r0, r6, #24
  tmp = brightness_level[Level + 4];
 8007cfe:	f815 2c08 	ldrb.w	r2, [r5, #-8]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_BRIGHTNESS_ADJUSTMENT, &tmp, 1) != OV9655_OK)
 8007d02:	2301      	movs	r3, #1
 8007d04:	2155      	movs	r1, #85	; 0x55
  tmp = brightness_level[Level + 4];
 8007d06:	f804 2d0d 	strb.w	r2, [r4, #-13]!
  if(ov9655_write_reg(&pObj->Ctx, OV9655_BRIGHTNESS_ADJUSTMENT, &tmp, 1) != OV9655_OK)
 8007d0a:	4622      	mov	r2, r4
 8007d0c:	f000 f9b0 	bl	8008070 <ov9655_write_reg>
 8007d10:	3000      	adds	r0, #0
 8007d12:	bf18      	it	ne
 8007d14:	2001      	movne	r0, #1
}
 8007d16:	4240      	negs	r0, r0
 8007d18:	b004      	add	sp, #16
 8007d1a:	bd70      	pop	{r4, r5, r6, pc}
 8007d1c:	0801ffe8 	.word	0x0801ffe8

08007d20 <OV9655_SetContrast>:
{
 8007d20:	b570      	push	{r4, r5, r6, lr}
 8007d22:	b084      	sub	sp, #16
 8007d24:	4606      	mov	r6, r0
  const uint8_t contrast_level[] = {0x30U, 0x30U, 0x30U, 0x38U, 0x40U, 0x50U, 0x60U, 0x60U, 0x60U};
 8007d26:	4a0c      	ldr	r2, [pc, #48]	; (8007d58 <OV9655_SetContrast+0x38>)
  tmp = contrast_level[Level + 4];
 8007d28:	a804      	add	r0, sp, #16
  const uint8_t contrast_level[] = {0x30U, 0x30U, 0x30U, 0x38U, 0x40U, 0x50U, 0x60U, 0x60U, 0x60U};
 8007d2a:	ab01      	add	r3, sp, #4
  tmp = contrast_level[Level + 4];
 8007d2c:	4604      	mov	r4, r0
 8007d2e:	1845      	adds	r5, r0, r1
  const uint8_t contrast_level[] = {0x30U, 0x30U, 0x30U, 0x38U, 0x40U, 0x50U, 0x60U, 0x60U, 0x60U};
 8007d30:	ca07      	ldmia	r2, {r0, r1, r2}
 8007d32:	c303      	stmia	r3!, {r0, r1}
 8007d34:	701a      	strb	r2, [r3, #0]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_CONTRAST_COEFFICIENT_1, &tmp, 1) != OV9655_OK)
 8007d36:	f106 0018 	add.w	r0, r6, #24
  tmp = contrast_level[Level + 4];
 8007d3a:	f815 2c08 	ldrb.w	r2, [r5, #-8]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_CONTRAST_COEFFICIENT_1, &tmp, 1) != OV9655_OK)
 8007d3e:	2301      	movs	r3, #1
 8007d40:	2156      	movs	r1, #86	; 0x56
  tmp = contrast_level[Level + 4];
 8007d42:	f804 2d0d 	strb.w	r2, [r4, #-13]!
  if(ov9655_write_reg(&pObj->Ctx, OV9655_CONTRAST_COEFFICIENT_1, &tmp, 1) != OV9655_OK)
 8007d46:	4622      	mov	r2, r4
 8007d48:	f000 f992 	bl	8008070 <ov9655_write_reg>
 8007d4c:	3000      	adds	r0, #0
 8007d4e:	bf18      	it	ne
 8007d50:	2001      	movne	r0, #1
}
 8007d52:	4240      	negs	r0, r0
 8007d54:	b004      	add	sp, #16
 8007d56:	bd70      	pop	{r4, r5, r6, pc}
 8007d58:	0801fff4 	.word	0x0801fff4

08007d5c <OV9655_SetPixelFormat>:
  if((PixelFormat != OV9655_RGB565) && (PixelFormat != OV9655_YUV422))
 8007d5c:	f031 0302 	bics.w	r3, r1, #2
{
 8007d60:	b530      	push	{r4, r5, lr}
 8007d62:	b083      	sub	sp, #12
  if((PixelFormat != OV9655_RGB565) && (PixelFormat != OV9655_YUV422))
 8007d64:	d14d      	bne.n	8007e02 <OV9655_SetPixelFormat+0xa6>
  else if(ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 8007d66:	f100 0418 	add.w	r4, r0, #24
 8007d6a:	460d      	mov	r5, r1
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	2112      	movs	r1, #18
 8007d70:	4620      	mov	r0, r4
 8007d72:	f10d 0207 	add.w	r2, sp, #7
 8007d76:	f000 f973 	bl	8008060 <ov9655_read_reg>
 8007d7a:	2800      	cmp	r0, #0
 8007d7c:	d141      	bne.n	8007e02 <OV9655_SetPixelFormat+0xa6>
    tmp &= ~0x03U; /* Reset Bit[0:1] corresponding to pixel format selection */
 8007d7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    switch (PixelFormat)
 8007d82:	2d02      	cmp	r5, #2
    tmp &= ~0x03U; /* Reset Bit[0:1] corresponding to pixel format selection */
 8007d84:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    switch (PixelFormat)
 8007d88:	d140      	bne.n	8007e0c <OV9655_SetPixelFormat+0xb0>
      tmp |= 0x02U;
 8007d8a:	f043 0502 	orr.w	r5, r3, #2
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 8007d8e:	f10d 0207 	add.w	r2, sp, #7
 8007d92:	2301      	movs	r3, #1
 8007d94:	2112      	movs	r1, #18
 8007d96:	4620      	mov	r0, r4
      tmp |= 0x02U;
 8007d98:	f88d 5007 	strb.w	r5, [sp, #7]
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 8007d9c:	f000 f968 	bl	8008070 <ov9655_write_reg>
 8007da0:	bb78      	cbnz	r0, 8007e02 <OV9655_SetPixelFormat+0xa6>
        if(ov9655_read_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1) != OV9655_OK)
 8007da2:	2301      	movs	r3, #1
 8007da4:	f10d 0207 	add.w	r2, sp, #7
 8007da8:	213a      	movs	r1, #58	; 0x3a
 8007daa:	4620      	mov	r0, r4
 8007dac:	f000 f958 	bl	8008060 <ov9655_read_reg>
 8007db0:	bb38      	cbnz	r0, 8007e02 <OV9655_SetPixelFormat+0xa6>
          tmp &= ~(3 << 2); /* Clear bits 3:2: YUV output sequence is 0:yuyv */
 8007db2:	f89d 5007 	ldrb.w	r5, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1) != OV9655_OK)
 8007db6:	2301      	movs	r3, #1
 8007db8:	f10d 0207 	add.w	r2, sp, #7
 8007dbc:	213a      	movs	r1, #58	; 0x3a
          tmp &= ~(3 << 2); /* Clear bits 3:2: YUV output sequence is 0:yuyv */
 8007dbe:	f025 052c 	bic.w	r5, r5, #44	; 0x2c
          if(ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1) != OV9655_OK)
 8007dc2:	4620      	mov	r0, r4
          tmp &= ~(3 << 2); /* Clear bits 3:2: YUV output sequence is 0:yuyv */
 8007dc4:	f88d 5007 	strb.w	r5, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1) != OV9655_OK)
 8007dc8:	f000 f952 	bl	8008070 <ov9655_write_reg>
 8007dcc:	b9c8      	cbnz	r0, 8007e02 <OV9655_SetPixelFormat+0xa6>
            if(ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 8007dce:	2301      	movs	r3, #1
 8007dd0:	f10d 0207 	add.w	r2, sp, #7
 8007dd4:	2140      	movs	r1, #64	; 0x40
 8007dd6:	4620      	mov	r0, r4
 8007dd8:	f000 f942 	bl	8008060 <ov9655_read_reg>
 8007ddc:	4605      	mov	r5, r0
 8007dde:	2800      	cmp	r0, #0
 8007de0:	d13e      	bne.n	8007e60 <OV9655_SetPixelFormat+0x104>
                tmp &= ~(3 << 4); /* Clear bits 5:4: RGB 555/565 option */
 8007de2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007de6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007dea:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8007dee:	f88d 3007 	strb.w	r3, [sp, #7]
            if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 8007df2:	f10d 0207 	add.w	r2, sp, #7
 8007df6:	4620      	mov	r0, r4
 8007df8:	2301      	movs	r3, #1
 8007dfa:	2140      	movs	r1, #64	; 0x40
 8007dfc:	f000 f938 	bl	8008070 <ov9655_write_reg>
 8007e00:	b358      	cbz	r0, 8007e5a <OV9655_SetPixelFormat+0xfe>
              ret = OV9655_ERROR;
 8007e02:	f04f 35ff 	mov.w	r5, #4294967295
}
 8007e06:	4628      	mov	r0, r5
 8007e08:	b003      	add	sp, #12
 8007e0a:	bd30      	pop	{r4, r5, pc}
      tmp |= 0x03U;
 8007e0c:	f043 0503 	orr.w	r5, r3, #3
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 8007e10:	f10d 0207 	add.w	r2, sp, #7
 8007e14:	2301      	movs	r3, #1
 8007e16:	2112      	movs	r1, #18
 8007e18:	4620      	mov	r0, r4
      tmp |= 0x03U;
 8007e1a:	f88d 5007 	strb.w	r5, [sp, #7]
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 8007e1e:	f000 f927 	bl	8008070 <ov9655_write_reg>
 8007e22:	2800      	cmp	r0, #0
 8007e24:	d1ed      	bne.n	8007e02 <OV9655_SetPixelFormat+0xa6>
      else if(ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 8007e26:	2301      	movs	r3, #1
 8007e28:	f10d 0207 	add.w	r2, sp, #7
 8007e2c:	2140      	movs	r1, #64	; 0x40
 8007e2e:	4620      	mov	r0, r4
 8007e30:	f000 f916 	bl	8008060 <ov9655_read_reg>
 8007e34:	2800      	cmp	r0, #0
 8007e36:	d1e4      	bne.n	8007e02 <OV9655_SetPixelFormat+0xa6>
        tmp |= 0x10U;
 8007e38:	f89d 1007 	ldrb.w	r1, [sp, #7]
        if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 8007e3c:	4620      	mov	r0, r4
 8007e3e:	f10d 0207 	add.w	r2, sp, #7
 8007e42:	2301      	movs	r3, #1
        tmp |= 0x10U;
 8007e44:	f041 0410 	orr.w	r4, r1, #16
        if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 8007e48:	2140      	movs	r1, #64	; 0x40
        tmp |= 0x10U;
 8007e4a:	f88d 4007 	strb.w	r4, [sp, #7]
        if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 8007e4e:	f000 f90f 	bl	8008070 <ov9655_write_reg>
 8007e52:	3000      	adds	r0, #0
 8007e54:	bf18      	it	ne
 8007e56:	2001      	movne	r0, #1
 8007e58:	4245      	negs	r5, r0
}
 8007e5a:	4628      	mov	r0, r5
 8007e5c:	b003      	add	sp, #12
 8007e5e:	bd30      	pop	{r4, r5, pc}
              ret = OV9655_ERROR;
 8007e60:	f04f 35ff 	mov.w	r5, #4294967295
 8007e64:	e7c5      	b.n	8007df2 <OV9655_SetPixelFormat+0x96>
 8007e66:	bf00      	nop

08007e68 <OV9655_GetResolution>:
{
 8007e68:	b510      	push	{r4, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	460c      	mov	r4, r1
  if(ov9655_read_reg(&pObj->Ctx, OV9655_HORIZONTAL_FRAME_CTRL, &tmp, 1) != OV9655_OK)
 8007e6e:	3018      	adds	r0, #24
 8007e70:	2301      	movs	r3, #1
 8007e72:	f10d 0207 	add.w	r2, sp, #7
 8007e76:	2132      	movs	r1, #50	; 0x32
 8007e78:	f000 f8f2 	bl	8008060 <ov9655_read_reg>
 8007e7c:	b938      	cbnz	r0, 8007e8e <OV9655_GetResolution+0x26>
    switch (tmp)
 8007e7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007e82:	2ba4      	cmp	r3, #164	; 0xa4
 8007e84:	d00b      	beq.n	8007e9e <OV9655_GetResolution+0x36>
 8007e86:	2bff      	cmp	r3, #255	; 0xff
 8007e88:	d005      	beq.n	8007e96 <OV9655_GetResolution+0x2e>
 8007e8a:	2b12      	cmp	r3, #18
 8007e8c:	d00a      	beq.n	8007ea4 <OV9655_GetResolution+0x3c>
      ret = OV9655_ERROR;
 8007e8e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007e92:	b002      	add	sp, #8
 8007e94:	bd10      	pop	{r4, pc}
      *Resolution = OV9655_R640x480;
 8007e96:	2303      	movs	r3, #3
 8007e98:	6023      	str	r3, [r4, #0]
}
 8007e9a:	b002      	add	sp, #8
 8007e9c:	bd10      	pop	{r4, pc}
      *Resolution = OV9655_R160x120;
 8007e9e:	6020      	str	r0, [r4, #0]
}
 8007ea0:	b002      	add	sp, #8
 8007ea2:	bd10      	pop	{r4, pc}
      *Resolution = OV9655_R320x240;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	6023      	str	r3, [r4, #0]
}
 8007ea8:	b002      	add	sp, #8
 8007eaa:	bd10      	pop	{r4, pc}

08007eac <OV9655_ReadID>:
{
 8007eac:	b530      	push	{r4, r5, lr}
  pObj->IO.Init();
 8007eae:	4604      	mov	r4, r0
{
 8007eb0:	b083      	sub	sp, #12
 8007eb2:	460d      	mov	r5, r1
  pObj->IO.Init();
 8007eb4:	f854 3b18 	ldr.w	r3, [r4], #24
 8007eb8:	4798      	blx	r3
    if(ov9655_read_reg(&pObj->Ctx, OV9655_PID_NUMBER_HIGH, &tmp, 1)!= OV9655_OK)
 8007eba:	f10d 0207 	add.w	r2, sp, #7
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	210a      	movs	r1, #10
 8007ec4:	f000 f8cc 	bl	8008060 <ov9655_read_reg>
 8007ec8:	b990      	cbnz	r0, 8007ef0 <OV9655_ReadID+0x44>
      *Id = (uint32_t)tmp << 8U;
 8007eca:	f89d 1007 	ldrb.w	r1, [sp, #7]
      if(ov9655_read_reg(&pObj->Ctx, OV9655_PID_NUMBER_LOW, &tmp, 1)!= OV9655_OK)
 8007ece:	4620      	mov	r0, r4
 8007ed0:	f10d 0207 	add.w	r2, sp, #7
 8007ed4:	2301      	movs	r3, #1
      *Id = (uint32_t)tmp << 8U;
 8007ed6:	020c      	lsls	r4, r1, #8
      if(ov9655_read_reg(&pObj->Ctx, OV9655_PID_NUMBER_LOW, &tmp, 1)!= OV9655_OK)
 8007ed8:	210b      	movs	r1, #11
      *Id = (uint32_t)tmp << 8U;
 8007eda:	602c      	str	r4, [r5, #0]
      if(ov9655_read_reg(&pObj->Ctx, OV9655_PID_NUMBER_LOW, &tmp, 1)!= OV9655_OK)
 8007edc:	f000 f8c0 	bl	8008060 <ov9655_read_reg>
 8007ee0:	b930      	cbnz	r0, 8007ef0 <OV9655_ReadID+0x44>
        *Id |= tmp;
 8007ee2:	682b      	ldr	r3, [r5, #0]
 8007ee4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	602b      	str	r3, [r5, #0]
}
 8007eec:	b003      	add	sp, #12
 8007eee:	bd30      	pop	{r4, r5, pc}
      ret = OV9655_ERROR;
 8007ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ef4:	e7fa      	b.n	8007eec <OV9655_ReadID+0x40>
 8007ef6:	bf00      	nop

08007ef8 <OV9655_MirrorFlipConfig>:
  if(Config > OV9655_MIRROR_FLIP)
 8007ef8:	2903      	cmp	r1, #3
 8007efa:	d824      	bhi.n	8007f46 <OV9655_MirrorFlipConfig+0x4e>
    if(ov9655_read_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 8007efc:	2301      	movs	r3, #1
{
 8007efe:	b570      	push	{r4, r5, r6, lr}
    if(ov9655_read_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 8007f00:	f100 0418 	add.w	r4, r0, #24
{
 8007f04:	b082      	sub	sp, #8
 8007f06:	460e      	mov	r6, r1
    if(ov9655_read_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 8007f08:	211e      	movs	r1, #30
 8007f0a:	4620      	mov	r0, r4
 8007f0c:	f10d 0207 	add.w	r2, sp, #7
 8007f10:	f000 f8a6 	bl	8008060 <ov9655_read_reg>
 8007f14:	b9a0      	cbnz	r0, 8007f40 <OV9655_MirrorFlipConfig+0x48>
      tmp &= ~(3U << 4U);    /* Clear Bit[5:4] Mirror/VFlip */
 8007f16:	f89d 5007 	ldrb.w	r5, [sp, #7]
      if(ov9655_write_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 8007f1a:	4620      	mov	r0, r4
 8007f1c:	f10d 0207 	add.w	r2, sp, #7
 8007f20:	2301      	movs	r3, #1
      tmp &= ~(3U << 4U);    /* Clear Bit[5:4] Mirror/VFlip */
 8007f22:	f025 0430 	bic.w	r4, r5, #48	; 0x30
      if(ov9655_write_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 8007f26:	211e      	movs	r1, #30
      tmp |= (Config << 4U); /* Configure Bit[5:4] Mirror/VFlip */
 8007f28:	ea44 1406 	orr.w	r4, r4, r6, lsl #4
 8007f2c:	f88d 4007 	strb.w	r4, [sp, #7]
      if(ov9655_write_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 8007f30:	f000 f89e 	bl	8008070 <ov9655_write_reg>
 8007f34:	3000      	adds	r0, #0
 8007f36:	bf18      	it	ne
 8007f38:	2001      	movne	r0, #1
 8007f3a:	4240      	negs	r0, r0
}
 8007f3c:	b002      	add	sp, #8
 8007f3e:	bd70      	pop	{r4, r5, r6, pc}
    ret = OV9655_ERROR;
 8007f40:	f04f 30ff 	mov.w	r0, #4294967295
 8007f44:	e7fa      	b.n	8007f3c <OV9655_MirrorFlipConfig+0x44>
 8007f46:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007f4a:	4770      	bx	lr

08007f4c <OV9655_NightModeConfig>:
{
 8007f4c:	b570      	push	{r4, r5, r6, lr}
  if(ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL11, &tmp, 1) != OV9655_OK)
 8007f4e:	f100 0518 	add.w	r5, r0, #24
{
 8007f52:	b082      	sub	sp, #8
 8007f54:	460e      	mov	r6, r1
  if(ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL11, &tmp, 1) != OV9655_OK)
 8007f56:	2301      	movs	r3, #1
 8007f58:	4628      	mov	r0, r5
 8007f5a:	f10d 0207 	add.w	r2, sp, #7
 8007f5e:	213b      	movs	r1, #59	; 0x3b
 8007f60:	f000 f87e 	bl	8008060 <ov9655_read_reg>
 8007f64:	b9b0      	cbnz	r0, 8007f94 <OV9655_NightModeConfig+0x48>
 8007f66:	f89d 4007 	ldrb.w	r4, [sp, #7]
    if(Cmd == NIGHT_MODE_ENABLE)
 8007f6a:	2e01      	cmp	r6, #1
    if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL11 ,&tmp, 1) != OV9655_OK)
 8007f6c:	f10d 0207 	add.w	r2, sp, #7
 8007f70:	4628      	mov	r0, r5
      tmp |= 0x80U;
 8007f72:	bf0c      	ite	eq
 8007f74:	f044 0480 	orreq.w	r4, r4, #128	; 0x80
      tmp &= 0x7FU;
 8007f78:	f004 047f 	andne.w	r4, r4, #127	; 0x7f
    if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL11 ,&tmp, 1) != OV9655_OK)
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	213b      	movs	r1, #59	; 0x3b
 8007f80:	f88d 4007 	strb.w	r4, [sp, #7]
 8007f84:	f000 f874 	bl	8008070 <ov9655_write_reg>
 8007f88:	3000      	adds	r0, #0
 8007f8a:	bf18      	it	ne
 8007f8c:	2001      	movne	r0, #1
 8007f8e:	4240      	negs	r0, r0
}
 8007f90:	b002      	add	sp, #8
 8007f92:	bd70      	pop	{r4, r5, r6, pc}
    ret = OV9655_ERROR;
 8007f94:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8007f98:	e7fa      	b.n	8007f90 <OV9655_NightModeConfig+0x44>
 8007f9a:	bf00      	nop

08007f9c <OV9655_Init>:
  if(pObj->IsInitialized == 0U)
 8007f9c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8007fa0:	bb5b      	cbnz	r3, 8007ffa <OV9655_Init+0x5e>
    if((Resolution > OV9655_R640x480) || ((PixelFormat != OV9655_RGB565) && (PixelFormat != OV9655_YUV422)))
 8007fa2:	2903      	cmp	r1, #3
 8007fa4:	d82e      	bhi.n	8008004 <OV9655_Init+0x68>
 8007fa6:	f032 0302 	bics.w	r3, r2, #2
 8007faa:	d12b      	bne.n	8008004 <OV9655_Init+0x68>
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 8007fac:	2301      	movs	r3, #1
{
 8007fae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fb0:	b083      	sub	sp, #12
 8007fb2:	4604      	mov	r4, r0
 8007fb4:	4617      	mov	r7, r2
      tmp = 0x80U;
 8007fb6:	2080      	movs	r0, #128	; 0x80
 8007fb8:	aa02      	add	r2, sp, #8
 8007fba:	460e      	mov	r6, r1
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 8007fbc:	2112      	movs	r1, #18
      tmp = 0x80U;
 8007fbe:	f802 0d01 	strb.w	r0, [r2, #-1]!
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 8007fc2:	f104 0018 	add.w	r0, r4, #24
 8007fc6:	f000 f853 	bl	8008070 <ov9655_write_reg>
 8007fca:	b9c0      	cbnz	r0, 8007ffe <OV9655_Init+0x62>
  tickstart = pObj->IO.GetTick();
 8007fcc:	6963      	ldr	r3, [r4, #20]
 8007fce:	4798      	blx	r3
 8007fd0:	4605      	mov	r5, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8007fd2:	6963      	ldr	r3, [r4, #20]
 8007fd4:	4798      	blx	r3
 8007fd6:	1b40      	subs	r0, r0, r5
 8007fd8:	28c7      	cmp	r0, #199	; 0xc7
 8007fda:	d9fa      	bls.n	8007fd2 <OV9655_Init+0x36>
        if(OV9655_SetResolution(pObj, Resolution)!= OV9655_OK)
 8007fdc:	4631      	mov	r1, r6
 8007fde:	4620      	mov	r0, r4
 8007fe0:	f7ff fc30 	bl	8007844 <OV9655_SetResolution>
 8007fe4:	b958      	cbnz	r0, 8007ffe <OV9655_Init+0x62>
        else if(OV9655_SetPixelFormat(pObj, PixelFormat)!= OV9655_OK)
 8007fe6:	4639      	mov	r1, r7
 8007fe8:	4620      	mov	r0, r4
 8007fea:	f7ff feb7 	bl	8007d5c <OV9655_SetPixelFormat>
 8007fee:	b930      	cbnz	r0, 8007ffe <OV9655_Init+0x62>
          pObj->IsInitialized = 1U;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8007ff6:	b003      	add	sp, #12
 8007ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  int32_t ret = OV9655_OK;
 8007ffa:	2000      	movs	r0, #0
  return ret;
 8007ffc:	4770      	bx	lr
      ret = OV9655_ERROR;
 8007ffe:	f04f 30ff 	mov.w	r0, #4294967295
 8008002:	e7f8      	b.n	8007ff6 <OV9655_Init+0x5a>
 8008004:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008008:	4770      	bx	lr
 800800a:	bf00      	nop

0800800c <OV9655_SetHueDegree>:
 800800c:	f04f 30ff 	mov.w	r0, #4294967295
 8008010:	4770      	bx	lr
 8008012:	bf00      	nop

08008014 <OV9655_ZoomConfig>:
 8008014:	f04f 30ff 	mov.w	r0, #4294967295
 8008018:	4770      	bx	lr
 800801a:	bf00      	nop

0800801c <OV9655_RegisterBusIO>:
  if (pObj == NULL)
 800801c:	b1c0      	cbz	r0, 8008050 <OV9655_RegisterBusIO+0x34>
    pObj->IO.WriteReg  = pIO->WriteReg;
 800801e:	68ca      	ldr	r2, [r1, #12]
{
 8008020:	b470      	push	{r4, r5, r6}
    pObj->IO.DeInit    = pIO->DeInit;
 8008022:	e9d1 3400 	ldrd	r3, r4, [r1]
    pObj->IO.Address   = pIO->Address;
 8008026:	890e      	ldrh	r6, [r1, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 8008028:	e9c0 3400 	strd	r3, r4, [r0]
    pObj->IO.GetTick   = pIO->GetTick;
 800802c:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
    pObj->Ctx.ReadReg  = OV9655_ReadRegWrap;
 8008030:	4909      	ldr	r1, [pc, #36]	; (8008058 <OV9655_RegisterBusIO+0x3c>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 8008032:	60c2      	str	r2, [r0, #12]
    pObj->Ctx.WriteReg = OV9655_WriteRegWrap;
 8008034:	4a09      	ldr	r2, [pc, #36]	; (800805c <OV9655_RegisterBusIO+0x40>)
    pObj->IO.Address   = pIO->Address;
 8008036:	8106      	strh	r6, [r0, #8]
    pObj->Ctx.WriteReg = OV9655_WriteRegWrap;
 8008038:	6182      	str	r2, [r0, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 800803a:	e9c0 5404 	strd	r5, r4, [r0, #16]
    pObj->Ctx.ReadReg  = OV9655_ReadRegWrap;
 800803e:	e9c0 1007 	strd	r1, r0, [r0, #28]
    if(pObj->IO.Init != NULL)
 8008042:	b10b      	cbz	r3, 8008048 <OV9655_RegisterBusIO+0x2c>
}
 8008044:	bc70      	pop	{r4, r5, r6}
      ret = pObj->IO.Init();
 8008046:	4718      	bx	r3
}
 8008048:	f04f 30ff 	mov.w	r0, #4294967295
 800804c:	bc70      	pop	{r4, r5, r6}
 800804e:	4770      	bx	lr
 8008050:	f04f 30ff 	mov.w	r0, #4294967295
 8008054:	4770      	bx	lr
 8008056:	bf00      	nop
 8008058:	08007825 	.word	0x08007825
 800805c:	08007835 	.word	0x08007835

08008060 <ov9655_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : Data Read
*******************************************************************************/
int32_t ov9655_read_reg(ov9655_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8008060:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8008062:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8008066:	46a4      	mov	ip, r4
}
 8008068:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800806c:	4760      	bx	ip
 800806e:	bf00      	nop

08008070 <ov9655_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t ov9655_write_reg(ov9655_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 8008070:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8008072:	6804      	ldr	r4, [r0, #0]
 8008074:	6880      	ldr	r0, [r0, #8]
 8008076:	46a4      	mov	ip, r4
}
 8008078:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, data, length);
 800807c:	4760      	bx	ip
 800807e:	bf00      	nop

08008080 <BSP_LED_Init>:
{
  int32_t ret = BSP_ERROR_NONE;
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE();
 8008080:	4b13      	ldr	r3, [pc, #76]	; (80080d0 <BSP_LED_Init+0x50>)
  GPIO_InitStruct.Pin = LED_PIN[Led];
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8008082:	4914      	ldr	r1, [pc, #80]	; (80080d4 <BSP_LED_Init+0x54>)
  LEDx_GPIO_CLK_ENABLE();
 8008084:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8008088:	f442 7280 	orr.w	r2, r2, #256	; 0x100
{
 800808c:	b5f0      	push	{r4, r5, r6, r7, lr}
  LEDx_GPIO_CLK_ENABLE();
 800808e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
{
 8008092:	b087      	sub	sp, #28
  LEDx_GPIO_CLK_ENABLE();
 8008094:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008098:	2401      	movs	r4, #1
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800809a:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800809e:	2703      	movs	r7, #3
  GPIO_InitStruct.Pin = LED_PIN[Led];
 80080a0:	490d      	ldr	r1, [pc, #52]	; (80080d8 <BSP_LED_Init+0x58>)
  LEDx_GPIO_CLK_ENABLE();
 80080a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
  GPIO_InitStruct.Pin = LED_PIN[Led];
 80080a6:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80080aa:	4628      	mov	r0, r5
  LEDx_GPIO_CLK_ENABLE();
 80080ac:	9300      	str	r3, [sp, #0]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80080ae:	a901      	add	r1, sp, #4
  LEDx_GPIO_CLK_ENABLE();
 80080b0:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = LED_PIN[Led];
 80080b2:	e9cd 6401 	strd	r6, r4, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80080b6:	e9cd 4703 	strd	r4, r7, [sp, #12]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80080ba:	f005 f813 	bl	800d0e4 <HAL_GPIO_Init>

  /* By default, turn off LED */
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80080be:	4628      	mov	r0, r5
 80080c0:	4622      	mov	r2, r4
 80080c2:	b2b1      	uxth	r1, r6
 80080c4:	f005 fa08 	bl	800d4d8 <HAL_GPIO_WritePin>
 return ret;
}
 80080c8:	2000      	movs	r0, #0
 80080ca:	b007      	add	sp, #28
 80080cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080ce:	bf00      	nop
 80080d0:	58024400 	.word	0x58024400
 80080d4:	08021390 	.word	0x08021390
 80080d8:	08021380 	.word	0x08021380

080080dc <BSP_LED_On>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t  BSP_LED_On(Led_TypeDef Led)
{
 80080dc:	b508      	push	{r3, lr}
  int32_t ret = BSP_ERROR_NONE;

  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 80080de:	4905      	ldr	r1, [pc, #20]	; (80080f4 <BSP_LED_On+0x18>)
 80080e0:	2200      	movs	r2, #0
 80080e2:	4b05      	ldr	r3, [pc, #20]	; (80080f8 <BSP_LED_On+0x1c>)
 80080e4:	f831 1020 	ldrh.w	r1, [r1, r0, lsl #2]
 80080e8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80080ec:	f005 f9f4 	bl	800d4d8 <HAL_GPIO_WritePin>
  return ret;
}
 80080f0:	2000      	movs	r0, #0
 80080f2:	bd08      	pop	{r3, pc}
 80080f4:	08021380 	.word	0x08021380
 80080f8:	08021390 	.word	0x08021390

080080fc <BSP_LED_Off>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t  BSP_LED_Off(Led_TypeDef Led)
{
 80080fc:	b508      	push	{r3, lr}
  int32_t ret = BSP_ERROR_NONE;
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 80080fe:	4905      	ldr	r1, [pc, #20]	; (8008114 <BSP_LED_Off+0x18>)
 8008100:	2201      	movs	r2, #1
 8008102:	4b05      	ldr	r3, [pc, #20]	; (8008118 <BSP_LED_Off+0x1c>)
 8008104:	f831 1020 	ldrh.w	r1, [r1, r0, lsl #2]
 8008108:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800810c:	f005 f9e4 	bl	800d4d8 <HAL_GPIO_WritePin>
  return ret;
}
 8008110:	2000      	movs	r0, #0
 8008112:	bd08      	pop	{r3, pc}
 8008114:	08021380 	.word	0x08021380
 8008118:	08021390 	.word	0x08021390

0800811c <BSP_LED_Toggle>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t  BSP_LED_Toggle(Led_TypeDef Led)
{
 800811c:	b508      	push	{r3, lr}
  int32_t ret = BSP_ERROR_NONE;
  HAL_GPIO_TogglePin(LED_PORT[Led], (uint16_t)LED_PIN[Led]);
 800811e:	4a05      	ldr	r2, [pc, #20]	; (8008134 <BSP_LED_Toggle+0x18>)
 8008120:	4b05      	ldr	r3, [pc, #20]	; (8008138 <BSP_LED_Toggle+0x1c>)
 8008122:	f832 1020 	ldrh.w	r1, [r2, r0, lsl #2]
 8008126:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800812a:	f005 f9d9 	bl	800d4e0 <HAL_GPIO_TogglePin>
  return ret;
}
 800812e:	2000      	movs	r0, #0
 8008130:	bd08      	pop	{r3, pc}
 8008132:	bf00      	nop
 8008134:	08021380 	.word	0x08021380
 8008138:	08021390 	.word	0x08021390

0800813c <BSP_PB_Init>:
  GPIO_InitTypeDef gpio_init_structure;
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_WAKEUP_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_WAKEUP_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={BUTTON_WAKEUP_EXTI_LINE};
  /* Enable the BUTTON clock*/
  BUTTON_WAKEUP_GPIO_CLK_ENABLE();
 800813c:	4b1e      	ldr	r3, [pc, #120]	; (80081b8 <BSP_PB_Init+0x7c>)
 800813e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8008142:	f042 0204 	orr.w	r2, r2, #4
{
 8008146:	b570      	push	{r4, r5, r6, lr}
  BUTTON_WAKEUP_GPIO_CLK_ENABLE();
 8008148:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
{
 800814c:	b086      	sub	sp, #24
  BUTTON_WAKEUP_GPIO_CLK_ENABLE();
 800814e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8008152:	f44f 5500 	mov.w	r5, #8192	; 0x2000
{
 8008156:	4606      	mov	r6, r0
  gpio_init_structure.Pull = GPIO_NOPULL;
 8008158:	2400      	movs	r4, #0
  BUTTON_WAKEUP_GPIO_CLK_ENABLE();
 800815a:	f003 0304 	and.w	r3, r3, #4
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800815e:	2002      	movs	r0, #2
  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8008160:	9501      	str	r5, [sp, #4]
  BUTTON_WAKEUP_GPIO_CLK_ENABLE();
 8008162:	9300      	str	r3, [sp, #0]
 8008164:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8008166:	e9cd 4003 	strd	r4, r0, [sp, #12]

  if(ButtonMode == BUTTON_MODE_GPIO)
 800816a:	b1e1      	cbz	r1, 80081a6 <BSP_PB_Init+0x6a>
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800816c:	4d13      	ldr	r5, [pc, #76]	; (80081bc <BSP_PB_Init+0x80>)
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800816e:	a901      	add	r1, sp, #4
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8008170:	4b13      	ldr	r3, [pc, #76]	; (80081c0 <BSP_PB_Init+0x84>)
    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8008172:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8008176:	4813      	ldr	r0, [pc, #76]	; (80081c4 <BSP_PB_Init+0x88>)
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8008178:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800817a:	f004 ffb3 	bl	800d0e4 <HAL_GPIO_Init>
    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800817e:	4912      	ldr	r1, [pc, #72]	; (80081c8 <BSP_PB_Init+0x8c>)
 8008180:	4628      	mov	r0, r5
 8008182:	f004 ffa9 	bl	800d0d8 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8008186:	4621      	mov	r1, r4
 8008188:	4628      	mov	r0, r5
 800818a:	4a10      	ldr	r2, [pc, #64]	; (80081cc <BSP_PB_Init+0x90>)
 800818c:	f004 ff9c 	bl	800d0c8 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8008190:	4622      	mov	r2, r4
 8008192:	210f      	movs	r1, #15
 8008194:	2028      	movs	r0, #40	; 0x28
 8008196:	f002 fa6d 	bl	800a674 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800819a:	2028      	movs	r0, #40	; 0x28
 800819c:	f002 faa0 	bl	800a6e0 <HAL_NVIC_EnableIRQ>
  }
  return BSP_ERROR_NONE;
}
 80081a0:	2000      	movs	r0, #0
 80081a2:	b006      	add	sp, #24
 80081a4:	bd70      	pop	{r4, r5, r6, pc}
 80081a6:	460a      	mov	r2, r1
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80081a8:	4806      	ldr	r0, [pc, #24]	; (80081c4 <BSP_PB_Init+0x88>)
 80081aa:	a901      	add	r1, sp, #4
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80081ac:	9202      	str	r2, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80081ae:	f004 ff99 	bl	800d0e4 <HAL_GPIO_Init>
}
 80081b2:	2000      	movs	r0, #0
 80081b4:	b006      	add	sp, #24
 80081b6:	bd70      	pop	{r4, r5, r6, pc}
 80081b8:	58024400 	.word	0x58024400
 80081bc:	24005180 	.word	0x24005180
 80081c0:	11110000 	.word	0x11110000
 80081c4:	58020800 	.word	0x58020800
 80081c8:	1670000d 	.word	0x1670000d
 80081cc:	080081e9 	.word	0x080081e9

080081d0 <BSP_PB_GetState>:
  *          This parameter can be one of the following values:
  *            @arg  BUTTON_WAKEUP: Wakeup Push Button
  * @retval The Button GPIO pin value
  */
int32_t  BSP_PB_GetState(Button_TypeDef Button)
{
 80081d0:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80081d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80081d6:	4802      	ldr	r0, [pc, #8]	; (80081e0 <BSP_PB_GetState+0x10>)
 80081d8:	f005 f978 	bl	800d4cc <HAL_GPIO_ReadPin>
}
 80081dc:	bd08      	pop	{r3, pc}
 80081de:	bf00      	nop
 80081e0:	58020800 	.word	0x58020800

080081e4 <BSP_PB_Callback>:
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);
  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80081e4:	4770      	bx	lr
 80081e6:	bf00      	nop

080081e8 <BUTTON_WAKEUP_EXTI_Callback>:
{
 80081e8:	b508      	push	{r3, lr}
  BSP_PB_Callback(BUTTON_WAKEUP);
 80081ea:	2000      	movs	r0, #0
 80081ec:	f7ff fffa 	bl	80081e4 <BSP_PB_Callback>
}
 80081f0:	bd08      	pop	{r3, pc}
 80081f2:	bf00      	nop

080081f4 <BSP_JOY_Init>:
                                                   BSP_JOY1_RIGHT_IT_PRIORITY,
                                                   BSP_JOY1_UP_IT_PRIORITY
                                                  };

  /* Store Joystick pins initialized */
  JoyPinsMask |= (uint32_t)JoyPins;
 80081f4:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 80082f4 <BSP_JOY_Init+0x100>
{
 80081f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  JoyPinsMask |= (uint32_t)JoyPins;
 80081fc:	f8dc 3000 	ldr.w	r3, [ip]
 8008200:	fab0 f680 	clz	r6, r0
{
 8008204:	b08b      	sub	sp, #44	; 0x2c
 8008206:	4615      	mov	r5, r2
  JoyPinsMask |= (uint32_t)JoyPins;
 8008208:	4313      	orrs	r3, r2
{
 800820a:	460f      	mov	r7, r1

  /* Initialized the Joystick. */
  for(joykey = 0U; joykey < JOY_KEY_NUMBER ; joykey++)
 800820c:	2400      	movs	r4, #0
 800820e:	0976      	lsrs	r6, r6, #5
          {
            JOY1_UP_GPIO_CLK_ENABLE();
          }
        }

        gpio_init_structure.Pin = JOY1_PIN[joykey];
 8008210:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 80082f8 <BSP_JOY_Init+0x104>
 8008214:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80082fc <BSP_JOY_Init+0x108>
          HAL_GPIO_Init(JOY1_PORT[joykey], &gpio_init_structure);
        }
        else /*(JoyMode == JOY_MODE_EXTI)*/
        {
          /* Configure Joy pin as input with External interrupt */
          gpio_init_structure.Mode = GPIO_MODE_IT_RISING_FALLING;
 8008218:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8008300 <BSP_JOY_Init+0x10c>
  JoyPinsMask |= (uint32_t)JoyPins;
 800821c:	f8cc 3000 	str.w	r3, [ip]
    key_pressed = 1UL << joykey;
 8008220:	2301      	movs	r3, #1
 8008222:	40a3      	lsls	r3, r4
      if(JOY == JOY1)
 8008224:	43ab      	bics	r3, r5
 8008226:	d100      	bne.n	800822a <BSP_JOY_Init+0x36>
 8008228:	b936      	cbnz	r6, 8008238 <BSP_JOY_Init+0x44>
  for(joykey = 0U; joykey < JOY_KEY_NUMBER ; joykey++)
 800822a:	3401      	adds	r4, #1
 800822c:	2c05      	cmp	r4, #5
 800822e:	d1f7      	bne.n	8008220 <BSP_JOY_Init+0x2c>
      }
    }
  }

  return ret;
}
 8008230:	2000      	movs	r0, #0
 8008232:	b00b      	add	sp, #44	; 0x2c
 8008234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          JOY1_SEL_GPIO_CLK_ENABLE();
 8008238:	4b28      	ldr	r3, [pc, #160]	; (80082dc <BSP_JOY_Init+0xe8>)
 800823a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800823e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008242:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8008246:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800824a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        if(key_pressed == (uint32_t)JOY_SEL)
 800824e:	2c00      	cmp	r4, #0
 8008250:	d038      	beq.n	80082c4 <BSP_JOY_Init+0xd0>
        else if(key_pressed == (uint32_t)JOY_DOWN)
 8008252:	2c01      	cmp	r4, #1
 8008254:	d039      	beq.n	80082ca <BSP_JOY_Init+0xd6>
        else if(key_pressed == (uint32_t) JOY_LEFT)
 8008256:	2c02      	cmp	r4, #2
 8008258:	d03d      	beq.n	80082d6 <BSP_JOY_Init+0xe2>
        else if(key_pressed == (uint32_t) JOY_RIGHT)
 800825a:	2c03      	cmp	r4, #3
 800825c:	d038      	beq.n	80082d0 <BSP_JOY_Init+0xdc>
            JOY1_UP_GPIO_CLK_ENABLE();
 800825e:	9304      	str	r3, [sp, #16]
 8008260:	9b04      	ldr	r3, [sp, #16]
        gpio_init_structure.Pin = JOY1_PIN[joykey];
 8008262:	f838 1014 	ldrh.w	r1, [r8, r4, lsl #1]
        gpio_init_structure.Pull = GPIO_PULLUP;
 8008266:	2201      	movs	r2, #1
        gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008268:	2303      	movs	r3, #3
 800826a:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
        gpio_init_structure.Pin = JOY1_PIN[joykey];
 800826e:	9105      	str	r1, [sp, #20]
          HAL_GPIO_Init(JOY1_PORT[joykey], &gpio_init_structure);
 8008270:	a905      	add	r1, sp, #20
        gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008272:	e9cd 2307 	strd	r2, r3, [sp, #28]
        if (JoyMode == JOY_MODE_GPIO)
 8008276:	b91f      	cbnz	r7, 8008280 <BSP_JOY_Init+0x8c>
          gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8008278:	9706      	str	r7, [sp, #24]
          HAL_GPIO_Init(JOY1_PORT[joykey], &gpio_init_structure);
 800827a:	f004 ff33 	bl	800d0e4 <HAL_GPIO_Init>
 800827e:	e7d4      	b.n	800822a <BSP_JOY_Init+0x36>
          gpio_init_structure.Mode = GPIO_MODE_IT_RISING_FALLING;
 8008280:	f8cd 9018 	str.w	r9, [sp, #24]
          HAL_GPIO_Init(JOY1_PORT[joykey], &gpio_init_structure);
 8008284:	f004 ff2e 	bl	800d0e4 <HAL_GPIO_Init>
 8008288:	4b15      	ldr	r3, [pc, #84]	; (80082e0 <BSP_JOY_Init+0xec>)
         (void)HAL_EXTI_GetHandle(&hjoy_exti[joykey], JOY_EXTI_LINE[joykey]);
 800828a:	4a16      	ldr	r2, [pc, #88]	; (80082e4 <BSP_JOY_Init+0xf0>)
 800828c:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8008290:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
 8008294:	4658      	mov	r0, fp
 8008296:	f004 ff1f 	bl	800d0d8 <HAL_EXTI_GetHandle>
         (void)HAL_EXTI_RegisterCallback(&hjoy_exti[joykey],  HAL_EXTI_COMMON_CB_ID, JoyCallback[joykey]);
 800829a:	4b13      	ldr	r3, [pc, #76]	; (80082e8 <BSP_JOY_Init+0xf4>)
 800829c:	4658      	mov	r0, fp
 800829e:	2100      	movs	r1, #0
 80082a0:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 80082a4:	f004 ff10 	bl	800d0c8 <HAL_EXTI_RegisterCallback>
          HAL_NVIC_SetPriority((IRQn_Type)(JOY1_IRQn[joykey]), BSP_JOY_PRIO[joykey], 0x00);
 80082a8:	4910      	ldr	r1, [pc, #64]	; (80082ec <BSP_JOY_Init+0xf8>)
 80082aa:	4b11      	ldr	r3, [pc, #68]	; (80082f0 <BSP_JOY_Init+0xfc>)
 80082ac:	2200      	movs	r2, #0
 80082ae:	f931 b014 	ldrsh.w	fp, [r1, r4, lsl #1]
 80082b2:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 80082b6:	4658      	mov	r0, fp
 80082b8:	f002 f9dc 	bl	800a674 <HAL_NVIC_SetPriority>
          HAL_NVIC_EnableIRQ((IRQn_Type)(JOY1_IRQn[joykey]));
 80082bc:	4658      	mov	r0, fp
 80082be:	f002 fa0f 	bl	800a6e0 <HAL_NVIC_EnableIRQ>
 80082c2:	e7b2      	b.n	800822a <BSP_JOY_Init+0x36>
          JOY1_SEL_GPIO_CLK_ENABLE();
 80082c4:	9300      	str	r3, [sp, #0]
 80082c6:	9b00      	ldr	r3, [sp, #0]
 80082c8:	e7cb      	b.n	8008262 <BSP_JOY_Init+0x6e>
          JOY1_DOWN_GPIO_CLK_ENABLE();
 80082ca:	9301      	str	r3, [sp, #4]
 80082cc:	9b01      	ldr	r3, [sp, #4]
 80082ce:	e7c8      	b.n	8008262 <BSP_JOY_Init+0x6e>
          JOY1_RIGHT_GPIO_CLK_ENABLE();
 80082d0:	9303      	str	r3, [sp, #12]
 80082d2:	9b03      	ldr	r3, [sp, #12]
 80082d4:	e7c5      	b.n	8008262 <BSP_JOY_Init+0x6e>
          JOY1_LEFT_GPIO_CLK_ENABLE();
 80082d6:	9302      	str	r3, [sp, #8]
 80082d8:	9b02      	ldr	r3, [sp, #8]
 80082da:	e7c2      	b.n	8008262 <BSP_JOY_Init+0x6e>
 80082dc:	58024400 	.word	0x58024400
 80082e0:	240032bc 	.word	0x240032bc
 80082e4:	08021358 	.word	0x08021358
 80082e8:	0802136c 	.word	0x0802136c
 80082ec:	0802132c 	.word	0x0802132c
 80082f0:	08021318 	.word	0x08021318
 80082f4:	240032b8 	.word	0x240032b8
 80082f8:	08021338 	.word	0x08021338
 80082fc:	08021344 	.word	0x08021344
 8008300:	11310000 	.word	0x11310000

08008304 <BSP_JOY_GetState>:
*            @arg  JOY_LEFT
*            @arg  JOY_RIGHT
*            @arg  JOY_UP
*/
int32_t BSP_JOY_GetState(JOY_TypeDef JOY,uint32_t JoyPin)
{
 8008304:	b538      	push	{r3, r4, r5, lr}

  uint32_t joykey, key_pressed;
  for (joykey = 0U; joykey < JOY_KEY_NUMBER ; joykey++)
  {
    key_pressed = 1UL << joykey;
    if((key_pressed & JoyPinsMask) == key_pressed)
 8008306:	4c21      	ldr	r4, [pc, #132]	; (800838c <BSP_JOY_GetState+0x88>)
 8008308:	fab0 f580 	clz	r5, r0
 800830c:	6823      	ldr	r3, [r4, #0]
 800830e:	096d      	lsrs	r5, r5, #5
    {
      if(JOY == JOY1)
 8008310:	07db      	lsls	r3, r3, #31
 8008312:	d500      	bpl.n	8008316 <BSP_JOY_GetState+0x12>
 8008314:	b98d      	cbnz	r5, 800833a <BSP_JOY_GetState+0x36>
    if((key_pressed & JoyPinsMask) == key_pressed)
 8008316:	6823      	ldr	r3, [r4, #0]
      if(JOY == JOY1)
 8008318:	0798      	lsls	r0, r3, #30
 800831a:	d500      	bpl.n	800831e <BSP_JOY_GetState+0x1a>
 800831c:	b9ad      	cbnz	r5, 800834a <BSP_JOY_GetState+0x46>
    if((key_pressed & JoyPinsMask) == key_pressed)
 800831e:	6823      	ldr	r3, [r4, #0]
      if(JOY == JOY1)
 8008320:	0759      	lsls	r1, r3, #29
 8008322:	d500      	bpl.n	8008326 <BSP_JOY_GetState+0x22>
 8008324:	b9cd      	cbnz	r5, 800835a <BSP_JOY_GetState+0x56>
    if((key_pressed & JoyPinsMask) == key_pressed)
 8008326:	6823      	ldr	r3, [r4, #0]
      if(JOY == JOY1)
 8008328:	071a      	lsls	r2, r3, #28
 800832a:	d500      	bpl.n	800832e <BSP_JOY_GetState+0x2a>
 800832c:	b9ed      	cbnz	r5, 800836a <BSP_JOY_GetState+0x66>
    if((key_pressed & JoyPinsMask) == key_pressed)
 800832e:	6823      	ldr	r3, [r4, #0]
      if(JOY == JOY1)
 8008330:	06db      	lsls	r3, r3, #27
 8008332:	d500      	bpl.n	8008336 <BSP_JOY_GetState+0x32>
 8008334:	bb0d      	cbnz	r5, 800837a <BSP_JOY_GetState+0x76>
        }
      }
    }
  }
  /* No Joystick key pressed */
  return (int32_t)JOY_NONE;
 8008336:	2000      	movs	r0, #0

}
 8008338:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_GPIO_ReadPin(JOY1_PORT[joykey], JOY1_PIN[joykey]) != GPIO_PIN_SET)
 800833a:	2104      	movs	r1, #4
 800833c:	4814      	ldr	r0, [pc, #80]	; (8008390 <BSP_JOY_GetState+0x8c>)
 800833e:	f005 f8c5 	bl	800d4cc <HAL_GPIO_ReadPin>
 8008342:	2801      	cmp	r0, #1
 8008344:	d0e7      	beq.n	8008316 <BSP_JOY_GetState+0x12>
    key_pressed = 1UL << joykey;
 8008346:	2001      	movs	r0, #1
}
 8008348:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_GPIO_ReadPin(JOY1_PORT[joykey], JOY1_PIN[joykey]) != GPIO_PIN_SET)
 800834a:	2108      	movs	r1, #8
 800834c:	4810      	ldr	r0, [pc, #64]	; (8008390 <BSP_JOY_GetState+0x8c>)
 800834e:	f005 f8bd 	bl	800d4cc <HAL_GPIO_ReadPin>
 8008352:	2801      	cmp	r0, #1
 8008354:	d0e3      	beq.n	800831e <BSP_JOY_GetState+0x1a>
    key_pressed = 1UL << joykey;
 8008356:	2002      	movs	r0, #2
}
 8008358:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_GPIO_ReadPin(JOY1_PORT[joykey], JOY1_PIN[joykey]) != GPIO_PIN_SET)
 800835a:	2110      	movs	r1, #16
 800835c:	480c      	ldr	r0, [pc, #48]	; (8008390 <BSP_JOY_GetState+0x8c>)
 800835e:	f005 f8b5 	bl	800d4cc <HAL_GPIO_ReadPin>
 8008362:	2801      	cmp	r0, #1
 8008364:	d0df      	beq.n	8008326 <BSP_JOY_GetState+0x22>
    key_pressed = 1UL << joykey;
 8008366:	2004      	movs	r0, #4
}
 8008368:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_GPIO_ReadPin(JOY1_PORT[joykey], JOY1_PIN[joykey]) != GPIO_PIN_SET)
 800836a:	2120      	movs	r1, #32
 800836c:	4808      	ldr	r0, [pc, #32]	; (8008390 <BSP_JOY_GetState+0x8c>)
 800836e:	f005 f8ad 	bl	800d4cc <HAL_GPIO_ReadPin>
 8008372:	2801      	cmp	r0, #1
 8008374:	d0db      	beq.n	800832e <BSP_JOY_GetState+0x2a>
    key_pressed = 1UL << joykey;
 8008376:	2008      	movs	r0, #8
}
 8008378:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_GPIO_ReadPin(JOY1_PORT[joykey], JOY1_PIN[joykey]) != GPIO_PIN_SET)
 800837a:	2140      	movs	r1, #64	; 0x40
 800837c:	4804      	ldr	r0, [pc, #16]	; (8008390 <BSP_JOY_GetState+0x8c>)
 800837e:	f005 f8a5 	bl	800d4cc <HAL_GPIO_ReadPin>
 8008382:	2801      	cmp	r0, #1
 8008384:	d0d7      	beq.n	8008336 <BSP_JOY_GetState+0x32>
    key_pressed = 1UL << joykey;
 8008386:	2010      	movs	r0, #16
}
 8008388:	bd38      	pop	{r3, r4, r5, pc}
 800838a:	bf00      	nop
 800838c:	240032b8 	.word	0x240032b8
 8008390:	58022800 	.word	0x58022800

08008394 <BSP_JOY_Callback>:
  UNUSED(JOY);
  UNUSED(JoyPin);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on JoyPin is triggered. */
}
 8008394:	4770      	bx	lr
 8008396:	bf00      	nop

08008398 <JOY1_UP_EXTI_Callback>:
/**
  * @brief  JOY1 UP EXTI line detection callbacks.
  * @retval None
  */
static void JOY1_UP_EXTI_Callback(void)
{
 8008398:	b508      	push	{r3, lr}
  BSP_JOY_Callback(JOY1, JOY_UP);
 800839a:	2110      	movs	r1, #16
 800839c:	2000      	movs	r0, #0
 800839e:	f7ff fff9 	bl	8008394 <BSP_JOY_Callback>
}
 80083a2:	bd08      	pop	{r3, pc}

080083a4 <JOY1_RIGHT_EXTI_Callback>:
/**
  * @brief  JOY1 RIGHT EXTI line detection callbacks.
  * @retval None
  */
static void JOY1_RIGHT_EXTI_Callback(void)
{
 80083a4:	b508      	push	{r3, lr}
  BSP_JOY_Callback(JOY1, JOY_RIGHT);
 80083a6:	2108      	movs	r1, #8
 80083a8:	2000      	movs	r0, #0
 80083aa:	f7ff fff3 	bl	8008394 <BSP_JOY_Callback>
}
 80083ae:	bd08      	pop	{r3, pc}

080083b0 <JOY1_LEFT_EXTI_Callback>:
{
 80083b0:	b508      	push	{r3, lr}
  BSP_JOY_Callback(JOY1, JOY_LEFT);
 80083b2:	2104      	movs	r1, #4
 80083b4:	2000      	movs	r0, #0
 80083b6:	f7ff ffed 	bl	8008394 <BSP_JOY_Callback>
}
 80083ba:	bd08      	pop	{r3, pc}

080083bc <JOY1_DOWN_EXTI_Callback>:
{
 80083bc:	b508      	push	{r3, lr}
  BSP_JOY_Callback(JOY1, JOY_DOWN);
 80083be:	2102      	movs	r1, #2
 80083c0:	2000      	movs	r0, #0
 80083c2:	f7ff ffe7 	bl	8008394 <BSP_JOY_Callback>
}
 80083c6:	bd08      	pop	{r3, pc}

080083c8 <JOY1_SEL_EXTI_Callback>:
{
 80083c8:	b508      	push	{r3, lr}
  BSP_JOY_Callback(JOY1, JOY_SEL);
 80083ca:	2101      	movs	r1, #1
 80083cc:	2000      	movs	r0, #0
 80083ce:	f7ff ffe1 	bl	8008394 <BSP_JOY_Callback>
}
 80083d2:	bd08      	pop	{r3, pc}

080083d4 <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
 80083d4:	4a10      	ldr	r2, [pc, #64]	; (8008418 <BSP_I2C4_DeInit+0x44>)
{
 80083d6:	b508      	push	{r3, lr}
  I2c4InitCounter--;
 80083d8:	6813      	ldr	r3, [r2, #0]
 80083da:	3b01      	subs	r3, #1
 80083dc:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 80083de:	b10b      	cbz	r3, 80083e4 <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
 80083e0:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
 80083e2:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 80083e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80083e8:	480c      	ldr	r0, [pc, #48]	; (800841c <BSP_I2C4_DeInit+0x48>)
 80083ea:	f004 ff99 	bl	800d320 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 80083ee:	480b      	ldr	r0, [pc, #44]	; (800841c <BSP_I2C4_DeInit+0x48>)
 80083f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80083f4:	f004 ff94 	bl	800d320 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 80083f8:	4a09      	ldr	r2, [pc, #36]	; (8008420 <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 80083fa:	480a      	ldr	r0, [pc, #40]	; (8008424 <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
 80083fc:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
 8008400:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008404:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8008408:	f005 f97c 	bl	800d704 <HAL_I2C_DeInit>
 800840c:	2800      	cmp	r0, #0
 800840e:	d0e7      	beq.n	80083e0 <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
 8008410:	f06f 0007 	mvn.w	r0, #7
}
 8008414:	bd08      	pop	{r3, pc}
 8008416:	bf00      	nop
 8008418:	240032e4 	.word	0x240032e4
 800841c:	58020c00 	.word	0x58020c00
 8008420:	58024400 	.word	0x58024400
 8008424:	24005188 	.word	0x24005188

08008428 <MX_I2C4_Init>:
  hI2c->Init.OwnAddress1      = 0;
 8008428:	2300      	movs	r3, #0
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800842a:	2201      	movs	r2, #1
{
 800842c:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
 800842e:	6041      	str	r1, [r0, #4]
{
 8008430:	4604      	mov	r4, r0
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8008432:	6203      	str	r3, [r0, #32]
  hI2c->Init.OwnAddress1      = 0;
 8008434:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
 8008438:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800843c:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8008440:	f005 f90a 	bl	800d658 <HAL_I2C_Init>
 8008444:	b108      	cbz	r0, 800844a <MX_I2C4_Init+0x22>
    status = HAL_ERROR;
 8008446:	2001      	movs	r0, #1
}
 8008448:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 800844a:	4601      	mov	r1, r0
 800844c:	4620      	mov	r0, r4
 800844e:	f005 fbe5 	bl	800dc1c <HAL_I2CEx_ConfigAnalogFilter>
 8008452:	2800      	cmp	r0, #0
 8008454:	d1f7      	bne.n	8008446 <MX_I2C4_Init+0x1e>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8008456:	4601      	mov	r1, r0
 8008458:	4620      	mov	r0, r4
 800845a:	f005 fc09 	bl	800dc70 <HAL_I2CEx_ConfigDigitalFilter>
    status = HAL_ERROR;
 800845e:	3000      	adds	r0, #0
 8008460:	bf18      	it	ne
 8008462:	2001      	movne	r0, #1
}
 8008464:	bd10      	pop	{r4, pc}
 8008466:	bf00      	nop

08008468 <BSP_I2C4_Init>:
  if (I2c4InitCounter == 0U)
 8008468:	4baa      	ldr	r3, [pc, #680]	; (8008714 <BSP_I2C4_Init+0x2ac>)
  hbus_i2c4.Instance = BUS_I2C4;
 800846a:	48ab      	ldr	r0, [pc, #684]	; (8008718 <BSP_I2C4_Init+0x2b0>)
  if (I2c4InitCounter == 0U)
 800846c:	681a      	ldr	r2, [r3, #0]
{
 800846e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008472:	b0a9      	sub	sp, #164	; 0xa4
  if (I2c4InitCounter == 0U)
 8008474:	4611      	mov	r1, r2
 8008476:	9203      	str	r2, [sp, #12]
  hbus_i2c4.Instance = BUS_I2C4;
 8008478:	4aa8      	ldr	r2, [pc, #672]	; (800871c <BSP_I2C4_Init+0x2b4>)
 800847a:	6002      	str	r2, [r0, #0]
  if (I2c4InitCounter == 0U)
 800847c:	b119      	cbz	r1, 8008486 <BSP_I2C4_Init+0x1e>
  int32_t ret = BSP_ERROR_NONE;
 800847e:	2000      	movs	r0, #0
}
 8008480:	b029      	add	sp, #164	; 0xa4
 8008482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2c4InitCounter++;
 8008486:	2201      	movs	r2, #1
 8008488:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800848a:	f005 fbc1 	bl	800dc10 <HAL_I2C_GetState>
 800848e:	2800      	cmp	r0, #0
 8008490:	d1f5      	bne.n	800847e <BSP_I2C4_Init+0x16>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8008492:	4ca3      	ldr	r4, [pc, #652]	; (8008720 <BSP_I2C4_Init+0x2b8>)
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8008494:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8008498:	9d03      	ldr	r5, [sp, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800849a:	2712      	movs	r7, #18
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800849c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80084a0:	2602      	movs	r6, #2
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 80084a2:	f04f 0804 	mov.w	r8, #4
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 80084a6:	a923      	add	r1, sp, #140	; 0x8c
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80084a8:	f043 0308 	orr.w	r3, r3, #8
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 80084ac:	489d      	ldr	r0, [pc, #628]	; (8008724 <BSP_I2C4_Init+0x2bc>)
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80084ae:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80084b2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80084b6:	f003 0308 	and.w	r3, r3, #8
 80084ba:	9320      	str	r3, [sp, #128]	; 0x80
 80084bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 80084be:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80084c2:	f043 0308 	orr.w	r3, r3, #8
 80084c6:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80084ca:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80084ce:	9525      	str	r5, [sp, #148]	; 0x94
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 80084d0:	f003 0308 	and.w	r3, r3, #8
 80084d4:	9321      	str	r3, [sp, #132]	; 0x84
 80084d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80084d8:	e9cd 2723 	strd	r2, r7, [sp, #140]	; 0x8c
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 80084dc:	e9cd 6826 	strd	r6, r8, [sp, #152]	; 0x98
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 80084e0:	f004 fe00 	bl	800d0e4 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 80084e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 80084e8:	a923      	add	r1, sp, #140	; 0x8c
 80084ea:	488e      	ldr	r0, [pc, #568]	; (8008724 <BSP_I2C4_Init+0x2bc>)
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 80084ec:	9323      	str	r3, [sp, #140]	; 0x8c
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80084ee:	9724      	str	r7, [sp, #144]	; 0x90
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80084f0:	9525      	str	r5, [sp, #148]	; 0x94
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 80084f2:	e9cd 6826 	strd	r6, r8, [sp, #152]	; 0x98
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 80084f6:	f004 fdf5 	bl	800d0e4 <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 80084fa:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 80084fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008502:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8008506:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 800850a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800850e:	9322      	str	r3, [sp, #136]	; 0x88
 8008510:	9b22      	ldr	r3, [sp, #136]	; 0x88
  BUS_I2C4_FORCE_RESET();
 8008512:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8008516:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800851a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  BUS_I2C4_RELEASE_RESET();
 800851e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8008522:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008526:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800852a:	f007 f8cd 	bl	800f6c8 <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800852e:	2800      	cmp	r0, #0
 8008530:	f000 8143 	beq.w	80087ba <BSP_I2C4_Init+0x352>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8008534:	4c7c      	ldr	r4, [pc, #496]	; (8008728 <BSP_I2C4_Init+0x2c0>)
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8008536:	46aa      	mov	sl, r5
 8008538:	4b7c      	ldr	r3, [pc, #496]	; (800872c <BSP_I2C4_Init+0x2c4>)
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800853a:	f640 11f6 	movw	r1, #2550	; 0x9f6
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800853e:	eb04 0450 	add.w	r4, r4, r0, lsr #1
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8008542:	f06f 0b1d 	mvn.w	fp, #29
 8008546:	681b      	ldr	r3, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008548:	4a79      	ldr	r2, [pc, #484]	; (8008730 <BSP_I2C4_Init+0x2c8>)
 800854a:	9306      	str	r3, [sp, #24]
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800854c:	fbb4 f0f0 	udiv	r0, r4, r0
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8008550:	fa00 f406 	lsl.w	r4, r0, r6
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8008554:	ea4f 0c40 	mov.w	ip, r0, lsl #1
 8008558:	ea4f 09c0 	mov.w	r9, r0, lsl #3
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800855c:	9001      	str	r0, [sp, #4]
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800855e:	eb0c 0600 	add.w	r6, ip, r0
 8008562:	1823      	adds	r3, r4, r0
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8008564:	9414      	str	r4, [sp, #80]	; 0x50
 8008566:	1b09      	subs	r1, r1, r4
 8008568:	461d      	mov	r5, r3
 800856a:	00b3      	lsls	r3, r6, #2
 800856c:	eba9 0400 	sub.w	r4, r9, r0
 8008570:	eb09 0800 	add.w	r8, r9, r0
 8008574:	9517      	str	r5, [sp, #92]	; 0x5c
 8008576:	006d      	lsls	r5, r5, #1
 8008578:	931c      	str	r3, [sp, #112]	; 0x70
 800857a:	00b3      	lsls	r3, r6, #2
 800857c:	9510      	str	r5, [sp, #64]	; 0x40
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800857e:	4607      	mov	r7, r0
 8008580:	181d      	adds	r5, r3, r0
 8008582:	9415      	str	r4, [sp, #84]	; 0x54
 8008584:	0064      	lsls	r4, r4, #1
 8008586:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
 800858a:	9512      	str	r5, [sp, #72]	; 0x48
 800858c:	0075      	lsls	r5, r6, #1
 800858e:	9416      	str	r4, [sp, #88]	; 0x58
 8008590:	4644      	mov	r4, r8
 8008592:	951d      	str	r5, [sp, #116]	; 0x74
 8008594:	ebc0 1800 	rsb	r8, r0, r0, lsl #4
 8008598:	9d10      	ldr	r5, [sp, #64]	; 0x40
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800859a:	ebab 0b06 	sub.w	fp, fp, r6
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800859e:	9307      	str	r3, [sp, #28]
 80085a0:	4405      	add	r5, r0
 80085a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80085a4:	9812      	ldr	r0, [sp, #72]	; 0x48
 80085a6:	ea2b 7beb 	bic.w	fp, fp, fp, asr #31
 80085aa:	9518      	str	r5, [sp, #96]	; 0x60
 80085ac:	9505      	str	r5, [sp, #20]
 80085ae:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80085b0:	9008      	str	r0, [sp, #32]
 80085b2:	9504      	str	r5, [sp, #16]
 80085b4:	0075      	lsls	r5, r6, #1
 80085b6:	9816      	ldr	r0, [sp, #88]	; 0x58
 80085b8:	930d      	str	r3, [sp, #52]	; 0x34
 80085ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80085bc:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80085c0:	46c8      	mov	r8, r9
 80085c2:	950e      	str	r5, [sp, #56]	; 0x38
 80085c4:	2510      	movs	r5, #16
 80085c6:	9009      	str	r0, [sp, #36]	; 0x24
 80085c8:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
 80085cc:	960c      	str	r6, [sp, #48]	; 0x30
 80085ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80085d0:	9402      	str	r4, [sp, #8]
 80085d2:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 80085d6:	f8dd e050 	ldr.w	lr, [sp, #80]	; 0x50
 80085da:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80085dc:	9906      	ldr	r1, [sp, #24]
 80085de:	930a      	str	r3, [sp, #40]	; 0x28
 80085e0:	4653      	mov	r3, sl
 80085e2:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
 80085e6:	e9cd 691e 	strd	r6, r9, [sp, #120]	; 0x78
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 80085ea:	1c5c      	adds	r4, r3, #1
 80085ec:	46b9      	mov	r9, r7
 80085ee:	9706      	str	r7, [sp, #24]
 80085f0:	941a      	str	r4, [sp, #104]	; 0x68
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80085f2:	2400      	movs	r4, #0
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 80085f4:	1c66      	adds	r6, r4, #1
 80085f6:	9619      	str	r6, [sp, #100]	; 0x64
      if (tscldel >= (uint32_t)tscldel_min)
 80085f8:	f240 3679 	movw	r6, #889	; 0x379
 80085fc:	45b1      	cmp	r9, r6
 80085fe:	f200 80e6 	bhi.w	80087ce <BSP_I2C4_Init+0x366>
 8008602:	9c06      	ldr	r4, [sp, #24]
 8008604:	44a1      	add	r9, r4
 8008606:	9c19      	ldr	r4, [sp, #100]	; 0x64
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8008608:	2c10      	cmp	r4, #16
 800860a:	d1f3      	bne.n	80085f4 <BSP_I2C4_Init+0x18c>
 800860c:	9b01      	ldr	r3, [sp, #4]
 800860e:	9f06      	ldr	r7, [sp, #24]
 8008610:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8008612:	441f      	add	r7, r3
 8008614:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008616:	4423      	add	r3, r4
 8008618:	9c16      	ldr	r4, [sp, #88]	; 0x58
 800861a:	930a      	str	r3, [sp, #40]	; 0x28
 800861c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800861e:	4423      	add	r3, r4
 8008620:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8008622:	9309      	str	r3, [sp, #36]	; 0x24
 8008624:	9b08      	ldr	r3, [sp, #32]
 8008626:	4423      	add	r3, r4
 8008628:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800862a:	9308      	str	r3, [sp, #32]
 800862c:	9b07      	ldr	r3, [sp, #28]
 800862e:	4423      	add	r3, r4
 8008630:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8008632:	9307      	str	r3, [sp, #28]
 8008634:	9b05      	ldr	r3, [sp, #20]
 8008636:	4423      	add	r3, r4
 8008638:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800863a:	9305      	str	r3, [sp, #20]
 800863c:	9b04      	ldr	r3, [sp, #16]
 800863e:	4423      	add	r3, r4
 8008640:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8008642:	9304      	str	r3, [sp, #16]
 8008644:	9b02      	ldr	r3, [sp, #8]
 8008646:	4423      	add	r3, r4
 8008648:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800864a:	9302      	str	r3, [sp, #8]
 800864c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800864e:	4498      	add	r8, r3
 8008650:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008652:	4423      	add	r3, r4
 8008654:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8008656:	930f      	str	r3, [sp, #60]	; 0x3c
 8008658:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800865a:	4423      	add	r3, r4
 800865c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800865e:	930e      	str	r3, [sp, #56]	; 0x38
 8008660:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008662:	4423      	add	r3, r4
 8008664:	930d      	str	r3, [sp, #52]	; 0x34
 8008666:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008668:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800866a:	449e      	add	lr, r3
 800866c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800866e:	4423      	add	r3, r4
 8008670:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8008672:	930c      	str	r3, [sp, #48]	; 0x30
 8008674:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008676:	4423      	add	r3, r4
 8008678:	930b      	str	r3, [sp, #44]	; 0x2c
 800867a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800867c:	2b10      	cmp	r3, #16
 800867e:	d1b4      	bne.n	80085ea <BSP_I2C4_Init+0x182>
 8008680:	4a2a      	ldr	r2, [pc, #168]	; (800872c <BSP_I2C4_Init+0x2c4>)
 8008682:	46a4      	mov	ip, r4
 8008684:	9106      	str	r1, [sp, #24]
 8008686:	6011      	str	r1, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8008688:	2900      	cmp	r1, #0
 800868a:	f000 8096 	beq.w	80087ba <BSP_I2C4_Init+0x352>
 800868e:	4b28      	ldr	r3, [pc, #160]	; (8008730 <BSP_I2C4_Init+0x2c8>)
 8008690:	9307      	str	r3, [sp, #28]
 8008692:	f10c 0232 	add.w	r2, ip, #50	; 0x32
 8008696:	f640 769f 	movw	r6, #3999	; 0xf9f
 800869a:	4b26      	ldr	r3, [pc, #152]	; (8008734 <BSP_I2C4_Init+0x2cc>)
  uint32_t prev_presc = I2C_PRESC_MAX;
 800869c:	f242 7810 	movw	r8, #10000	; 0x2710
 80086a0:	9208      	str	r2, [sp, #32]
 80086a2:	f04f 3bff 	mov.w	fp, #4294967295
 80086a6:	9a01      	ldr	r2, [sp, #4]
 80086a8:	4463      	add	r3, ip
 80086aa:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8008730 <BSP_I2C4_Init+0x2c8>
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 80086ae:	f241 0747 	movw	r7, #4167	; 0x1047
 80086b2:	4296      	cmp	r6, r2
 80086b4:	9309      	str	r3, [sp, #36]	; 0x24
  uint32_t prev_presc = I2C_PRESC_MAX;
 80086b6:	f04f 0300 	mov.w	r3, #0
 80086ba:	bf38      	it	cc
 80086bc:	4616      	movcc	r6, r2
 80086be:	9304      	str	r3, [sp, #16]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80086c0:	9b01      	ldr	r3, [sp, #4]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80086c2:	f04f 0e00 	mov.w	lr, #0
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80086c6:	f8d9 4000 	ldr.w	r4, [r9]
 80086ca:	fb04 3403 	mla	r4, r4, r3, r3
 80086ce:	9b08      	ldr	r3, [sp, #32]
 80086d0:	eb03 0c04 	add.w	ip, r3, r4
 80086d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086d6:	4423      	add	r3, r4
 80086d8:	9305      	str	r3, [sp, #20]
 80086da:	e004      	b.n	80086e6 <BSP_I2C4_Init+0x27e>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80086dc:	f5ba 7f80 	cmp.w	sl, #256	; 0x100
 80086e0:	44a4      	add	ip, r4
 80086e2:	46d6      	mov	lr, sl
 80086e4:	d046      	beq.n	8008774 <BSP_I2C4_Init+0x30c>
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80086e6:	f241 225c 	movw	r2, #4700	; 0x125c
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80086ea:	f10e 0a01 	add.w	sl, lr, #1
 80086ee:	f1ac 0332 	sub.w	r3, ip, #50	; 0x32
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80086f2:	4594      	cmp	ip, r2
 80086f4:	d9f2      	bls.n	80086dc <BSP_I2C4_Init+0x274>
 80086f6:	9a01      	ldr	r2, [sp, #4]
 80086f8:	ebb2 0f93 	cmp.w	r2, r3, lsr #2
 80086fc:	d2ee      	bcs.n	80086dc <BSP_I2C4_Init+0x274>
 80086fe:	f641 55c7 	movw	r5, #7623	; 0x1dc7
 8008702:	9a05      	ldr	r2, [sp, #20]
 8008704:	f8cd c008 	str.w	ip, [sp, #8]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8008708:	2100      	movs	r1, #0
 800870a:	4462      	add	r2, ip
 800870c:	1aed      	subs	r5, r5, r3
 800870e:	f8dd c010 	ldr.w	ip, [sp, #16]
 8008712:	e016      	b.n	8008742 <BSP_I2C4_Init+0x2da>
 8008714:	240032e4 	.word	0x240032e4
 8008718:	24005188 	.word	0x24005188
 800871c:	58001c00 	.word	0x58001c00
 8008720:	58024400 	.word	0x58024400
 8008724:	58020c00 	.word	0x58020c00
 8008728:	3b9aca00 	.word	0x3b9aca00
 800872c:	24003ce8 	.word	0x24003ce8
 8008730:	240032e8 	.word	0x240032e8
 8008734:	ffffe239 	.word	0xffffe239
 8008738:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800873c:	4601      	mov	r1, r0
 800873e:	4422      	add	r2, r4
 8008740:	d015      	beq.n	800876e <BSP_I2C4_Init+0x306>
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8008742:	18ab      	adds	r3, r5, r2
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8008744:	1c48      	adds	r0, r1, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8008746:	429e      	cmp	r6, r3
 8008748:	d2f6      	bcs.n	8008738 <BSP_I2C4_Init+0x2d0>
 800874a:	42ba      	cmp	r2, r7
 800874c:	d8f4      	bhi.n	8008738 <BSP_I2C4_Init+0x2d0>
            if ((uint32_t)error < prev_error)
 800874e:	f2a2 6383 	subw	r3, r2, #1667	; 0x683
 8008752:	2b00      	cmp	r3, #0
 8008754:	bfb8      	it	lt
 8008756:	425b      	neglt	r3, r3
 8008758:	4598      	cmp	r8, r3
 800875a:	d9ed      	bls.n	8008738 <BSP_I2C4_Init+0x2d0>
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800875c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
              I2c_valid_timing[count].sclh = sclh;
 8008760:	4698      	mov	r8, r3
 8008762:	46e3      	mov	fp, ip
 8008764:	4422      	add	r2, r4
 8008766:	e9c9 1e03 	strd	r1, lr, [r9, #12]
 800876a:	4601      	mov	r1, r0
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800876c:	d1e9      	bne.n	8008742 <BSP_I2C4_Init+0x2da>
 800876e:	f8dd c008 	ldr.w	ip, [sp, #8]
 8008772:	e7b3      	b.n	80086dc <BSP_I2C4_Init+0x274>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8008774:	9b04      	ldr	r3, [sp, #16]
 8008776:	f109 0914 	add.w	r9, r9, #20
 800877a:	9a06      	ldr	r2, [sp, #24]
 800877c:	3301      	adds	r3, #1
 800877e:	4293      	cmp	r3, r2
 8008780:	9304      	str	r3, [sp, #16]
 8008782:	d19d      	bne.n	80086c0 <BSP_I2C4_Init+0x258>
        if (idx < I2C_VALID_TIMING_NBR)
 8008784:	f1bb 0f7f 	cmp.w	fp, #127	; 0x7f
 8008788:	d817      	bhi.n	80087ba <BSP_I2C4_Init+0x352>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800878a:	eb0b 038b 	add.w	r3, fp, fp, lsl #2
 800878e:	9a07      	ldr	r2, [sp, #28]
 8008790:	009b      	lsls	r3, r3, #2
 8008792:	18d4      	adds	r4, r2, r3
 8008794:	58d5      	ldr	r5, [r2, r3]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8008796:	6862      	ldr	r2, [r4, #4]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8008798:	7c23      	ldrb	r3, [r4, #16]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800879a:	0510      	lsls	r0, r2, #20
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800879c:	68a1      	ldr	r1, [r4, #8]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800879e:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 80087a2:	68e2      	ldr	r2, [r4, #12]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80087a4:	f400 0070 	and.w	r0, r0, #15728640	; 0xf00000
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80087a8:	0409      	lsls	r1, r1, #16
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 80087aa:	0212      	lsls	r2, r2, #8
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80087ac:	4303      	orrs	r3, r0
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80087ae:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 80087b2:	b292      	uxth	r2, r2
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80087b4:	430b      	orrs	r3, r1
 80087b6:	4313      	orrs	r3, r2
 80087b8:	9303      	str	r3, [sp, #12]
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 80087ba:	9903      	ldr	r1, [sp, #12]
 80087bc:	4879      	ldr	r0, [pc, #484]	; (80089a4 <BSP_I2C4_Init+0x53c>)
 80087be:	f7ff fe33 	bl	8008428 <MX_I2C4_Init>
 80087c2:	2800      	cmp	r0, #0
 80087c4:	f43f ae5b 	beq.w	800847e <BSP_I2C4_Init+0x16>
          ret = BSP_ERROR_BUS_FAILURE;
 80087c8:	f06f 0007 	mvn.w	r0, #7
  return ret;
 80087cc:	e658      	b.n	8008480 <BSP_I2C4_Init+0x18>
            if(presc != prev_presc)
 80087ce:	42ab      	cmp	r3, r5
 80087d0:	f000 80ea 	beq.w	80089a8 <BSP_I2C4_Init+0x540>
 80087d4:	f1bb 0f00 	cmp.w	fp, #0
 80087d8:	f040 80e6 	bne.w	80089a8 <BSP_I2C4_Init+0x540>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80087dc:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
              I2c_valid_timing_nbr ++;
 80087e0:	3101      	adds	r1, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80087e2:	2700      	movs	r7, #0
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80087e4:	4615      	mov	r5, r2
 80087e6:	eb02 068c 	add.w	r6, r2, ip, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80087ea:	297f      	cmp	r1, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80087ec:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80087f0:	6074      	str	r4, [r6, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80087f2:	60b7      	str	r7, [r6, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80087f4:	f200 81c9 	bhi.w	8008b8a <BSP_I2C4_Init+0x722>
 80087f8:	461d      	mov	r5, r3
            if(presc != prev_presc)
 80087fa:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80087fc:	45b3      	cmp	fp, r6
 80087fe:	4637      	mov	r7, r6
 8008800:	bf8c      	ite	hi
 8008802:	2700      	movhi	r7, #0
 8008804:	2701      	movls	r7, #1
 8008806:	42b0      	cmp	r0, r6
 8008808:	bf38      	it	cc
 800880a:	2700      	movcc	r7, #0
 800880c:	2f00      	cmp	r7, #0
 800880e:	f000 80ea 	beq.w	80089e6 <BSP_I2C4_Init+0x57e>
 8008812:	42ab      	cmp	r3, r5
 8008814:	f000 80e7 	beq.w	80089e6 <BSP_I2C4_Init+0x57e>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008818:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
              I2c_valid_timing_nbr ++;
 800881c:	3101      	adds	r1, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800881e:	f04f 0a02 	mov.w	sl, #2
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008822:	4615      	mov	r5, r2
 8008824:	eb02 068c 	add.w	r6, r2, ip, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8008828:	297f      	cmp	r1, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800882a:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800882e:	e9c6 4a01 	strd	r4, sl, [r6, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8008832:	f200 81aa 	bhi.w	8008b8a <BSP_I2C4_Init+0x722>
 8008836:	461d      	mov	r5, r3
            if(presc != prev_presc)
 8008838:	45f3      	cmp	fp, lr
 800883a:	bf8c      	ite	hi
 800883c:	2600      	movhi	r6, #0
 800883e:	2601      	movls	r6, #1
 8008840:	4570      	cmp	r0, lr
 8008842:	bf38      	it	cc
 8008844:	2600      	movcc	r6, #0
 8008846:	2e00      	cmp	r6, #0
 8008848:	f000 80ec 	beq.w	8008a24 <BSP_I2C4_Init+0x5bc>
 800884c:	42ab      	cmp	r3, r5
 800884e:	f000 80e9 	beq.w	8008a24 <BSP_I2C4_Init+0x5bc>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008852:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
              I2c_valid_timing_nbr ++;
 8008856:	3101      	adds	r1, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8008858:	f04f 0a04 	mov.w	sl, #4
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800885c:	4615      	mov	r5, r2
 800885e:	eb02 068c 	add.w	r6, r2, ip, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8008862:	297f      	cmp	r1, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008864:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8008868:	e9c6 4a01 	strd	r4, sl, [r6, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800886c:	f200 818d 	bhi.w	8008b8a <BSP_I2C4_Init+0x722>
 8008870:	461d      	mov	r5, r3
            if(presc != prev_presc)
 8008872:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8008874:	45bb      	cmp	fp, r7
 8008876:	463e      	mov	r6, r7
 8008878:	bf8c      	ite	hi
 800887a:	2600      	movhi	r6, #0
 800887c:	2601      	movls	r6, #1
 800887e:	42b8      	cmp	r0, r7
 8008880:	bf38      	it	cc
 8008882:	2600      	movcc	r6, #0
 8008884:	2e00      	cmp	r6, #0
 8008886:	f000 80ec 	beq.w	8008a62 <BSP_I2C4_Init+0x5fa>
 800888a:	42ab      	cmp	r3, r5
 800888c:	f000 80e9 	beq.w	8008a62 <BSP_I2C4_Init+0x5fa>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008890:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
              I2c_valid_timing_nbr ++;
 8008894:	3101      	adds	r1, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8008896:	f04f 0a06 	mov.w	sl, #6
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800889a:	4615      	mov	r5, r2
 800889c:	eb02 068c 	add.w	r6, r2, ip, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80088a0:	297f      	cmp	r1, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80088a2:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80088a6:	e9c6 4a01 	strd	r4, sl, [r6, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80088aa:	f200 816e 	bhi.w	8008b8a <BSP_I2C4_Init+0x722>
 80088ae:	461d      	mov	r5, r3
            if(presc != prev_presc)
 80088b0:	45c3      	cmp	fp, r8
 80088b2:	bf8c      	ite	hi
 80088b4:	2600      	movhi	r6, #0
 80088b6:	2601      	movls	r6, #1
 80088b8:	4540      	cmp	r0, r8
 80088ba:	bf38      	it	cc
 80088bc:	2600      	movcc	r6, #0
 80088be:	2e00      	cmp	r6, #0
 80088c0:	f000 80ed 	beq.w	8008a9e <BSP_I2C4_Init+0x636>
 80088c4:	42ab      	cmp	r3, r5
 80088c6:	f000 80ea 	beq.w	8008a9e <BSP_I2C4_Init+0x636>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80088ca:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
              I2c_valid_timing_nbr ++;
 80088ce:	3101      	adds	r1, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80088d0:	f04f 0a08 	mov.w	sl, #8
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80088d4:	4615      	mov	r5, r2
 80088d6:	eb02 068c 	add.w	r6, r2, ip, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80088da:	297f      	cmp	r1, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80088dc:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80088e0:	e9c6 4a01 	strd	r4, sl, [r6, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80088e4:	f200 8151 	bhi.w	8008b8a <BSP_I2C4_Init+0x722>
 80088e8:	461d      	mov	r5, r3
            if(presc != prev_presc)
 80088ea:	9f04      	ldr	r7, [sp, #16]
 80088ec:	455f      	cmp	r7, fp
 80088ee:	463e      	mov	r6, r7
 80088f0:	bf34      	ite	cc
 80088f2:	2600      	movcc	r6, #0
 80088f4:	2601      	movcs	r6, #1
 80088f6:	4287      	cmp	r7, r0
 80088f8:	bf88      	it	hi
 80088fa:	2600      	movhi	r6, #0
 80088fc:	2e00      	cmp	r6, #0
 80088fe:	f000 80ec 	beq.w	8008ada <BSP_I2C4_Init+0x672>
 8008902:	42ab      	cmp	r3, r5
 8008904:	f000 80e9 	beq.w	8008ada <BSP_I2C4_Init+0x672>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008908:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
              I2c_valid_timing_nbr ++;
 800890c:	3101      	adds	r1, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800890e:	270a      	movs	r7, #10
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008910:	4615      	mov	r5, r2
 8008912:	eb02 068c 	add.w	r6, r2, ip, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8008916:	297f      	cmp	r1, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008918:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800891c:	6074      	str	r4, [r6, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800891e:	60b7      	str	r7, [r6, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8008920:	f200 8133 	bhi.w	8008b8a <BSP_I2C4_Init+0x722>
 8008924:	461d      	mov	r5, r3
            if(presc != prev_presc)
 8008926:	9f07      	ldr	r7, [sp, #28]
 8008928:	45bb      	cmp	fp, r7
 800892a:	463e      	mov	r6, r7
 800892c:	bf8c      	ite	hi
 800892e:	2600      	movhi	r6, #0
 8008930:	2601      	movls	r6, #1
 8008932:	42b8      	cmp	r0, r7
 8008934:	bf38      	it	cc
 8008936:	2600      	movcc	r6, #0
 8008938:	2e00      	cmp	r6, #0
 800893a:	f000 80eb 	beq.w	8008b14 <BSP_I2C4_Init+0x6ac>
 800893e:	42ab      	cmp	r3, r5
 8008940:	f000 80e8 	beq.w	8008b14 <BSP_I2C4_Init+0x6ac>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008944:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
              I2c_valid_timing_nbr ++;
 8008948:	3101      	adds	r1, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800894a:	270c      	movs	r7, #12
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800894c:	4615      	mov	r5, r2
 800894e:	eb02 068c 	add.w	r6, r2, ip, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8008952:	297f      	cmp	r1, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008954:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8008958:	6074      	str	r4, [r6, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800895a:	60b7      	str	r7, [r6, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800895c:	f200 8115 	bhi.w	8008b8a <BSP_I2C4_Init+0x722>
 8008960:	461d      	mov	r5, r3
            if(presc != prev_presc)
 8008962:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008964:	45bb      	cmp	fp, r7
 8008966:	463e      	mov	r6, r7
 8008968:	bf8c      	ite	hi
 800896a:	2600      	movhi	r6, #0
 800896c:	2601      	movls	r6, #1
 800896e:	42b8      	cmp	r0, r7
 8008970:	bf38      	it	cc
 8008972:	2600      	movcc	r6, #0
 8008974:	2e00      	cmp	r6, #0
 8008976:	f000 80ea 	beq.w	8008b4e <BSP_I2C4_Init+0x6e6>
 800897a:	42ab      	cmp	r3, r5
 800897c:	f000 80e7 	beq.w	8008b4e <BSP_I2C4_Init+0x6e6>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008980:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
              I2c_valid_timing_nbr ++;
 8008984:	3101      	adds	r1, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008986:	4615      	mov	r5, r2
 8008988:	eb02 068c 	add.w	r6, r2, ip, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800898c:	297f      	cmp	r1, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800898e:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8008992:	6074      	str	r4, [r6, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8008994:	f04f 040e 	mov.w	r4, #14
 8008998:	60b4      	str	r4, [r6, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800899a:	f200 80f6 	bhi.w	8008b8a <BSP_I2C4_Init+0x722>
 800899e:	461d      	mov	r5, r3
 80089a0:	e62f      	b.n	8008602 <BSP_I2C4_Init+0x19a>
 80089a2:	bf00      	nop
 80089a4:	24005188 	.word	0x24005188
            if(presc != prev_presc)
 80089a8:	9f06      	ldr	r7, [sp, #24]
 80089aa:	45bb      	cmp	fp, r7
 80089ac:	463e      	mov	r6, r7
 80089ae:	bf8c      	ite	hi
 80089b0:	2600      	movhi	r6, #0
 80089b2:	2601      	movls	r6, #1
 80089b4:	42b8      	cmp	r0, r7
 80089b6:	bf38      	it	cc
 80089b8:	2600      	movcc	r6, #0
 80089ba:	2e00      	cmp	r6, #0
 80089bc:	f43f af1d 	beq.w	80087fa <BSP_I2C4_Init+0x392>
 80089c0:	42ab      	cmp	r3, r5
 80089c2:	f43f af1a 	beq.w	80087fa <BSP_I2C4_Init+0x392>
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80089c6:	f04f 0a01 	mov.w	sl, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80089ca:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 80089ce:	4615      	mov	r5, r2
              I2c_valid_timing_nbr ++;
 80089d0:	4451      	add	r1, sl
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80089d2:	eb02 068c 	add.w	r6, r2, ip, lsl #2
 80089d6:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80089da:	297f      	cmp	r1, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80089dc:	e9c6 4a01 	strd	r4, sl, [r6, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80089e0:	f200 80d3 	bhi.w	8008b8a <BSP_I2C4_Init+0x722>
 80089e4:	461d      	mov	r5, r3
            if(presc != prev_presc)
 80089e6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80089e8:	45bb      	cmp	fp, r7
 80089ea:	463e      	mov	r6, r7
 80089ec:	bf8c      	ite	hi
 80089ee:	2600      	movhi	r6, #0
 80089f0:	2601      	movls	r6, #1
 80089f2:	42b8      	cmp	r0, r7
 80089f4:	bf38      	it	cc
 80089f6:	2600      	movcc	r6, #0
 80089f8:	2e00      	cmp	r6, #0
 80089fa:	f43f af1d 	beq.w	8008838 <BSP_I2C4_Init+0x3d0>
 80089fe:	42ab      	cmp	r3, r5
 8008a00:	f43f af1a 	beq.w	8008838 <BSP_I2C4_Init+0x3d0>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008a04:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
              I2c_valid_timing_nbr ++;
 8008a08:	3101      	adds	r1, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8008a0a:	f04f 0a03 	mov.w	sl, #3
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008a0e:	4615      	mov	r5, r2
 8008a10:	eb02 068c 	add.w	r6, r2, ip, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8008a14:	297f      	cmp	r1, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008a16:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8008a1a:	e9c6 4a01 	strd	r4, sl, [r6, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8008a1e:	f200 80b4 	bhi.w	8008b8a <BSP_I2C4_Init+0x722>
 8008a22:	461d      	mov	r5, r3
            if(presc != prev_presc)
 8008a24:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8008a26:	45bb      	cmp	fp, r7
 8008a28:	463e      	mov	r6, r7
 8008a2a:	bf8c      	ite	hi
 8008a2c:	2600      	movhi	r6, #0
 8008a2e:	2601      	movls	r6, #1
 8008a30:	42b8      	cmp	r0, r7
 8008a32:	bf38      	it	cc
 8008a34:	2600      	movcc	r6, #0
 8008a36:	2e00      	cmp	r6, #0
 8008a38:	f43f af1b 	beq.w	8008872 <BSP_I2C4_Init+0x40a>
 8008a3c:	42ab      	cmp	r3, r5
 8008a3e:	f43f af18 	beq.w	8008872 <BSP_I2C4_Init+0x40a>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008a42:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
              I2c_valid_timing_nbr ++;
 8008a46:	3101      	adds	r1, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8008a48:	f04f 0a05 	mov.w	sl, #5
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008a4c:	4615      	mov	r5, r2
 8008a4e:	eb02 068c 	add.w	r6, r2, ip, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8008a52:	297f      	cmp	r1, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008a54:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8008a58:	e9c6 4a01 	strd	r4, sl, [r6, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8008a5c:	f200 8095 	bhi.w	8008b8a <BSP_I2C4_Init+0x722>
 8008a60:	461d      	mov	r5, r3
            if(presc != prev_presc)
 8008a62:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8008a64:	45bb      	cmp	fp, r7
 8008a66:	463e      	mov	r6, r7
 8008a68:	bf8c      	ite	hi
 8008a6a:	2600      	movhi	r6, #0
 8008a6c:	2601      	movls	r6, #1
 8008a6e:	42b8      	cmp	r0, r7
 8008a70:	bf38      	it	cc
 8008a72:	2600      	movcc	r6, #0
 8008a74:	2e00      	cmp	r6, #0
 8008a76:	f43f af1b 	beq.w	80088b0 <BSP_I2C4_Init+0x448>
 8008a7a:	42ab      	cmp	r3, r5
 8008a7c:	f43f af18 	beq.w	80088b0 <BSP_I2C4_Init+0x448>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008a80:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
              I2c_valid_timing_nbr ++;
 8008a84:	3101      	adds	r1, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8008a86:	f04f 0a07 	mov.w	sl, #7
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008a8a:	4615      	mov	r5, r2
 8008a8c:	eb02 068c 	add.w	r6, r2, ip, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8008a90:	297f      	cmp	r1, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008a92:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8008a96:	e9c6 4a01 	strd	r4, sl, [r6, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8008a9a:	d876      	bhi.n	8008b8a <BSP_I2C4_Init+0x722>
 8008a9c:	461d      	mov	r5, r3
            if(presc != prev_presc)
 8008a9e:	9f02      	ldr	r7, [sp, #8]
 8008aa0:	455f      	cmp	r7, fp
 8008aa2:	463e      	mov	r6, r7
 8008aa4:	bf34      	ite	cc
 8008aa6:	2600      	movcc	r6, #0
 8008aa8:	2601      	movcs	r6, #1
 8008aaa:	4287      	cmp	r7, r0
 8008aac:	bf88      	it	hi
 8008aae:	2600      	movhi	r6, #0
 8008ab0:	2e00      	cmp	r6, #0
 8008ab2:	f43f af1a 	beq.w	80088ea <BSP_I2C4_Init+0x482>
 8008ab6:	42ab      	cmp	r3, r5
 8008ab8:	f43f af17 	beq.w	80088ea <BSP_I2C4_Init+0x482>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008abc:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
              I2c_valid_timing_nbr ++;
 8008ac0:	3101      	adds	r1, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8008ac2:	f04f 0a09 	mov.w	sl, #9
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008ac6:	4615      	mov	r5, r2
 8008ac8:	eb02 068c 	add.w	r6, r2, ip, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8008acc:	297f      	cmp	r1, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008ace:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8008ad2:	e9c6 4a01 	strd	r4, sl, [r6, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8008ad6:	d858      	bhi.n	8008b8a <BSP_I2C4_Init+0x722>
 8008ad8:	461d      	mov	r5, r3
            if(presc != prev_presc)
 8008ada:	9f05      	ldr	r7, [sp, #20]
 8008adc:	455f      	cmp	r7, fp
 8008ade:	463e      	mov	r6, r7
 8008ae0:	bf34      	ite	cc
 8008ae2:	2600      	movcc	r6, #0
 8008ae4:	2601      	movcs	r6, #1
 8008ae6:	4287      	cmp	r7, r0
 8008ae8:	bf88      	it	hi
 8008aea:	2600      	movhi	r6, #0
 8008aec:	2e00      	cmp	r6, #0
 8008aee:	f43f af1a 	beq.w	8008926 <BSP_I2C4_Init+0x4be>
 8008af2:	42ab      	cmp	r3, r5
 8008af4:	f43f af17 	beq.w	8008926 <BSP_I2C4_Init+0x4be>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008af8:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
              I2c_valid_timing_nbr ++;
 8008afc:	3101      	adds	r1, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8008afe:	270b      	movs	r7, #11
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008b00:	4615      	mov	r5, r2
 8008b02:	eb02 068c 	add.w	r6, r2, ip, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8008b06:	297f      	cmp	r1, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008b08:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8008b0c:	6074      	str	r4, [r6, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8008b0e:	60b7      	str	r7, [r6, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8008b10:	d83b      	bhi.n	8008b8a <BSP_I2C4_Init+0x722>
 8008b12:	461d      	mov	r5, r3
            if(presc != prev_presc)
 8008b14:	9f08      	ldr	r7, [sp, #32]
 8008b16:	45bb      	cmp	fp, r7
 8008b18:	463e      	mov	r6, r7
 8008b1a:	bf8c      	ite	hi
 8008b1c:	2600      	movhi	r6, #0
 8008b1e:	2601      	movls	r6, #1
 8008b20:	42b8      	cmp	r0, r7
 8008b22:	bf38      	it	cc
 8008b24:	2600      	movcc	r6, #0
 8008b26:	2e00      	cmp	r6, #0
 8008b28:	f43f af1b 	beq.w	8008962 <BSP_I2C4_Init+0x4fa>
 8008b2c:	42ab      	cmp	r3, r5
 8008b2e:	f43f af18 	beq.w	8008962 <BSP_I2C4_Init+0x4fa>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008b32:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
              I2c_valid_timing_nbr ++;
 8008b36:	3101      	adds	r1, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8008b38:	270d      	movs	r7, #13
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008b3a:	4615      	mov	r5, r2
 8008b3c:	eb02 068c 	add.w	r6, r2, ip, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8008b40:	297f      	cmp	r1, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008b42:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8008b46:	6074      	str	r4, [r6, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8008b48:	60b7      	str	r7, [r6, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8008b4a:	d81e      	bhi.n	8008b8a <BSP_I2C4_Init+0x722>
 8008b4c:	461d      	mov	r5, r3
            if(presc != prev_presc)
 8008b4e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8008b50:	45bb      	cmp	fp, r7
 8008b52:	463e      	mov	r6, r7
 8008b54:	bf8c      	ite	hi
 8008b56:	2600      	movhi	r6, #0
 8008b58:	2601      	movls	r6, #1
 8008b5a:	42b8      	cmp	r0, r7
 8008b5c:	bf38      	it	cc
 8008b5e:	2600      	movcc	r6, #0
 8008b60:	2e00      	cmp	r6, #0
 8008b62:	f43f ad4e 	beq.w	8008602 <BSP_I2C4_Init+0x19a>
 8008b66:	42ab      	cmp	r3, r5
 8008b68:	f43f ad4b 	beq.w	8008602 <BSP_I2C4_Init+0x19a>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008b6c:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
              I2c_valid_timing_nbr ++;
 8008b70:	3101      	adds	r1, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008b72:	4615      	mov	r5, r2
 8008b74:	eb02 068c 	add.w	r6, r2, ip, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8008b78:	297f      	cmp	r1, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8008b7a:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8008b7e:	6074      	str	r4, [r6, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8008b80:	f04f 040f 	mov.w	r4, #15
 8008b84:	60b4      	str	r4, [r6, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8008b86:	f67f af0a 	bls.w	800899e <BSP_I2C4_Init+0x536>
 8008b8a:	4b03      	ldr	r3, [pc, #12]	; (8008b98 <BSP_I2C4_Init+0x730>)
 8008b8c:	9106      	str	r1, [sp, #24]
 8008b8e:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 8008b92:	9507      	str	r5, [sp, #28]
 8008b94:	6019      	str	r1, [r3, #0]
 8008b96:	e57c      	b.n	8008692 <BSP_I2C4_Init+0x22a>
 8008b98:	24003ce8 	.word	0x24003ce8

08008b9c <BSP_I2C4_WriteReg>:
{
 8008b9c:	b510      	push	{r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8008b9e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
 8008ba2:	b084      	sub	sp, #16
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8008ba4:	e9cd 2300 	strd	r2, r3, [sp]
 8008ba8:	9402      	str	r4, [sp, #8]
 8008baa:	460a      	mov	r2, r1
 8008bac:	2301      	movs	r3, #1
 8008bae:	4601      	mov	r1, r0
 8008bb0:	4807      	ldr	r0, [pc, #28]	; (8008bd0 <BSP_I2C4_WriteReg+0x34>)
 8008bb2:	f004 fdc1 	bl	800d738 <HAL_I2C_Mem_Write>
 8008bb6:	b140      	cbz	r0, 8008bca <BSP_I2C4_WriteReg+0x2e>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8008bb8:	4805      	ldr	r0, [pc, #20]	; (8008bd0 <BSP_I2C4_WriteReg+0x34>)
 8008bba:	f005 f82d 	bl	800dc18 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8008bbe:	2804      	cmp	r0, #4
 8008bc0:	bf0c      	ite	eq
 8008bc2:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 8008bc6:	f06f 0003 	mvnne.w	r0, #3
}
 8008bca:	b004      	add	sp, #16
 8008bcc:	bd10      	pop	{r4, pc}
 8008bce:	bf00      	nop
 8008bd0:	24005188 	.word	0x24005188

08008bd4 <BSP_I2C4_ReadReg>:
{
 8008bd4:	b510      	push	{r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8008bd6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
 8008bda:	b084      	sub	sp, #16
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8008bdc:	e9cd 2300 	strd	r2, r3, [sp]
 8008be0:	9402      	str	r4, [sp, #8]
 8008be2:	460a      	mov	r2, r1
 8008be4:	2301      	movs	r3, #1
 8008be6:	4601      	mov	r1, r0
 8008be8:	4807      	ldr	r0, [pc, #28]	; (8008c08 <BSP_I2C4_ReadReg+0x34>)
 8008bea:	f004 fed5 	bl	800d998 <HAL_I2C_Mem_Read>
 8008bee:	b140      	cbz	r0, 8008c02 <BSP_I2C4_ReadReg+0x2e>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8008bf0:	4805      	ldr	r0, [pc, #20]	; (8008c08 <BSP_I2C4_ReadReg+0x34>)
 8008bf2:	f005 f811 	bl	800dc18 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8008bf6:	2804      	cmp	r0, #4
 8008bf8:	bf0c      	ite	eq
 8008bfa:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 8008bfe:	f06f 0003 	mvnne.w	r0, #3
}
 8008c02:	b004      	add	sp, #16
 8008c04:	bd10      	pop	{r4, pc}
 8008c06:	bf00      	nop
 8008c08:	24005188 	.word	0x24005188

08008c0c <BSP_I2C4_WriteReg16>:
{
 8008c0c:	b510      	push	{r4, lr}
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8008c0e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
 8008c12:	b084      	sub	sp, #16
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8008c14:	e9cd 2300 	strd	r2, r3, [sp]
 8008c18:	9402      	str	r4, [sp, #8]
 8008c1a:	460a      	mov	r2, r1
 8008c1c:	2302      	movs	r3, #2
 8008c1e:	4601      	mov	r1, r0
 8008c20:	4807      	ldr	r0, [pc, #28]	; (8008c40 <BSP_I2C4_WriteReg16+0x34>)
 8008c22:	f004 fd89 	bl	800d738 <HAL_I2C_Mem_Write>
 8008c26:	b140      	cbz	r0, 8008c3a <BSP_I2C4_WriteReg16+0x2e>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8008c28:	4805      	ldr	r0, [pc, #20]	; (8008c40 <BSP_I2C4_WriteReg16+0x34>)
 8008c2a:	f004 fff5 	bl	800dc18 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8008c2e:	2804      	cmp	r0, #4
 8008c30:	bf0c      	ite	eq
 8008c32:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 8008c36:	f06f 0003 	mvnne.w	r0, #3
}
 8008c3a:	b004      	add	sp, #16
 8008c3c:	bd10      	pop	{r4, pc}
 8008c3e:	bf00      	nop
 8008c40:	24005188 	.word	0x24005188

08008c44 <BSP_I2C4_ReadReg16>:
{
 8008c44:	b510      	push	{r4, lr}
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8008c46:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
 8008c4a:	b084      	sub	sp, #16
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8008c4c:	e9cd 2300 	strd	r2, r3, [sp]
 8008c50:	9402      	str	r4, [sp, #8]
 8008c52:	460a      	mov	r2, r1
 8008c54:	2302      	movs	r3, #2
 8008c56:	4601      	mov	r1, r0
 8008c58:	4807      	ldr	r0, [pc, #28]	; (8008c78 <BSP_I2C4_ReadReg16+0x34>)
 8008c5a:	f004 fe9d 	bl	800d998 <HAL_I2C_Mem_Read>
 8008c5e:	b140      	cbz	r0, 8008c72 <BSP_I2C4_ReadReg16+0x2e>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8008c60:	4805      	ldr	r0, [pc, #20]	; (8008c78 <BSP_I2C4_ReadReg16+0x34>)
 8008c62:	f004 ffd9 	bl	800dc18 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8008c66:	2804      	cmp	r0, #4
 8008c68:	bf0c      	ite	eq
 8008c6a:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 8008c6e:	f06f 0003 	mvnne.w	r0, #3
}
 8008c72:	b004      	add	sp, #16
 8008c74:	bd10      	pop	{r4, pc}
 8008c76:	bf00      	nop
 8008c78:	24005188 	.word	0x24005188

08008c7c <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 8008c7c:	f001 bcc0 	b.w	800a600 <HAL_GetTick>

08008c80 <BSP_CAMERA_DeInit>:
  * @brief  DeInitializes the camera.
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_DeInit(uint32_t Instance)
{
 8008c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c82:	b087      	sub	sp, #28
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 8008c84:	2800      	cmp	r0, #0
 8008c86:	d171      	bne.n	8008d6c <BSP_CAMERA_DeInit+0xec>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    if((Camera_CompObj == NULL)||(Camera_Drv == NULL))
 8008c88:	4e3a      	ldr	r6, [pc, #232]	; (8008d74 <BSP_CAMERA_DeInit+0xf4>)
 8008c8a:	6833      	ldr	r3, [r6, #0]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d06a      	beq.n	8008d66 <BSP_CAMERA_DeInit+0xe6>
 8008c90:	4f39      	ldr	r7, [pc, #228]	; (8008d78 <BSP_CAMERA_DeInit+0xf8>)
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d066      	beq.n	8008d66 <BSP_CAMERA_DeInit+0xe6>
    {
      ret = BSP_ERROR_NO_INIT;
    }
    else
    {
      hcamera_dcmi.Instance = DCMI;
 8008c98:	4c38      	ldr	r4, [pc, #224]	; (8008d7c <BSP_CAMERA_DeInit+0xfc>)
 8008c9a:	4b39      	ldr	r3, [pc, #228]	; (8008d80 <BSP_CAMERA_DeInit+0x100>)

  if(Instance >= CAMERA_INSTANCES_NBR)
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if(HAL_DCMI_Stop(&hcamera_dcmi) != HAL_OK)
 8008c9c:	4620      	mov	r0, r4
      hcamera_dcmi.Instance = DCMI;
 8008c9e:	6023      	str	r3, [r4, #0]
  else if(HAL_DCMI_Stop(&hcamera_dcmi) != HAL_OK)
 8008ca0:	f001 fe08 	bl	800a8b4 <HAL_DCMI_Stop>
 8008ca4:	2800      	cmp	r0, #0
 8008ca6:	d156      	bne.n	8008d56 <BSP_CAMERA_DeInit+0xd6>
      else if(HAL_DCMI_DisableCROP(&hcamera_dcmi)!= HAL_OK)
 8008ca8:	4620      	mov	r0, r4
 8008caa:	f001 ff21 	bl	800aaf0 <HAL_DCMI_DisableCrop>
 8008cae:	2800      	cmp	r0, #0
 8008cb0:	d151      	bne.n	8008d56 <BSP_CAMERA_DeInit+0xd6>
      else if(HAL_DCMI_DeInit(&hcamera_dcmi) != HAL_OK)
 8008cb2:	4620      	mov	r0, r4
 8008cb4:	f001 fdf2 	bl	800a89c <HAL_DCMI_DeInit>
 8008cb8:	2800      	cmp	r0, #0
 8008cba:	d14c      	bne.n	8008d56 <BSP_CAMERA_DeInit+0xd6>
static void DCMI_MspDeInit(DCMI_HandleTypeDef *hdcmi)
{
  GPIO_InitTypeDef gpio_init_structure;

  /* Disable NVIC  for DCMI transfer complete interrupt */
  HAL_NVIC_DisableIRQ(DCMI_IRQn);
 8008cbc:	204e      	movs	r0, #78	; 0x4e
  HAL_GPIO_DeInit(GPIOG, gpio_init_structure.Pin);



  /* Disable DCMI clock */
  __HAL_RCC_DCMI_CLK_DISABLE();
 8008cbe:	4d31      	ldr	r5, [pc, #196]	; (8008d84 <BSP_CAMERA_DeInit+0x104>)
  HAL_NVIC_DisableIRQ(DCMI_IRQn);
 8008cc0:	f001 fd1c 	bl	800a6fc <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(DMA2_Stream3_IRQn);
 8008cc4:	203b      	movs	r0, #59	; 0x3b
 8008cc6:	f001 fd19 	bl	800a6fc <HAL_NVIC_DisableIRQ>
  (void)HAL_DMA_DeInit(hdcmi->DMA_Handle);
 8008cca:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008ccc:	f002 fa8c 	bl	800b1e8 <HAL_DMA_DeInit>
  HAL_GPIO_DeInit(GPIOA, gpio_init_structure.Pin);
 8008cd0:	2150      	movs	r1, #80	; 0x50
 8008cd2:	482d      	ldr	r0, [pc, #180]	; (8008d88 <BSP_CAMERA_DeInit+0x108>)
 8008cd4:	f004 fb24 	bl	800d320 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOB, gpio_init_structure.Pin);
 8008cd8:	f44f 7160 	mov.w	r1, #896	; 0x380
 8008cdc:	482b      	ldr	r0, [pc, #172]	; (8008d8c <BSP_CAMERA_DeInit+0x10c>)
 8008cde:	f004 fb1f 	bl	800d320 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOC, gpio_init_structure.Pin);
 8008ce2:	f44f 612c 	mov.w	r1, #2752	; 0xac0
 8008ce6:	482a      	ldr	r0, [pc, #168]	; (8008d90 <BSP_CAMERA_DeInit+0x110>)
 8008ce8:	f004 fb1a 	bl	800d320 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, gpio_init_structure.Pin);
 8008cec:	2108      	movs	r1, #8
 8008cee:	4829      	ldr	r0, [pc, #164]	; (8008d94 <BSP_CAMERA_DeInit+0x114>)
 8008cf0:	f004 fb16 	bl	800d320 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, gpio_init_structure.Pin);
 8008cf4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008cf8:	4827      	ldr	r0, [pc, #156]	; (8008d98 <BSP_CAMERA_DeInit+0x118>)
 8008cfa:	f004 fb11 	bl	800d320 <HAL_GPIO_DeInit>
  __HAL_RCC_DCMI_CLK_DISABLE();
 8008cfe:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
        if(Camera_Drv->DeInit(Camera_CompObj) != BSP_ERROR_NONE)
 8008d02:	6830      	ldr	r0, [r6, #0]
  __HAL_RCC_DCMI_CLK_DISABLE();
 8008d04:	f023 0301 	bic.w	r3, r3, #1
 8008d08:	f8c5 30dc 	str.w	r3, [r5, #220]	; 0xdc
        if(Camera_Drv->DeInit(Camera_CompObj) != BSP_ERROR_NONE)
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	4798      	blx	r3
 8008d12:	4604      	mov	r4, r0
 8008d14:	bb20      	cbnz	r0, 8008d60 <BSP_CAMERA_DeInit+0xe0>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8008d16:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8008d1a:	2202      	movs	r2, #2
    gpio_init_structure.Pin       = GPIO_PIN_14;
 8008d1c:	f44f 4680 	mov.w	r6, #16384	; 0x4000
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8008d20:	2701      	movs	r7, #1
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8008d22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8008d26:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8008d28:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8008d2c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
    gpio_init_structure.Pull      = GPIO_NOPULL;
 8008d30:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8008d32:	f403 7300 	and.w	r3, r3, #512	; 0x200
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8008d36:	4819      	ldr	r0, [pc, #100]	; (8008d9c <BSP_CAMERA_DeInit+0x11c>)
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8008d38:	9204      	str	r2, [sp, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8008d3a:	9300      	str	r3, [sp, #0]
 8008d3c:	9b00      	ldr	r3, [sp, #0]
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8008d3e:	e9cd 6701 	strd	r6, r7, [sp, #4]
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8008d42:	f004 f9cf 	bl	800d0e4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_14, GPIO_PIN_SET);
 8008d46:	463a      	mov	r2, r7
 8008d48:	4631      	mov	r1, r6
 8008d4a:	4814      	ldr	r0, [pc, #80]	; (8008d9c <BSP_CAMERA_DeInit+0x11c>)
 8008d4c:	f004 fbc4 	bl	800d4d8 <HAL_GPIO_WritePin>
}
 8008d50:	4620      	mov	r0, r4
 8008d52:	b007      	add	sp, #28
 8008d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ret = BSP_ERROR_PERIPH_FAILURE;
 8008d56:	f06f 0403 	mvn.w	r4, #3
}
 8008d5a:	4620      	mov	r0, r4
 8008d5c:	b007      	add	sp, #28
 8008d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8008d60:	f06f 0404 	mvn.w	r4, #4
  return ret;
 8008d64:	e7f4      	b.n	8008d50 <BSP_CAMERA_DeInit+0xd0>
      ret = BSP_ERROR_NO_INIT;
 8008d66:	f04f 34ff 	mov.w	r4, #4294967295
 8008d6a:	e7f1      	b.n	8008d50 <BSP_CAMERA_DeInit+0xd0>
    ret = BSP_ERROR_WRONG_PARAM;
 8008d6c:	f06f 0401 	mvn.w	r4, #1
 8008d70:	e7ee      	b.n	8008d50 <BSP_CAMERA_DeInit+0xd0>
 8008d72:	bf00      	nop
 8008d74:	24003d18 	.word	0x24003d18
 8008d78:	24003d1c 	.word	0x24003d1c
 8008d7c:	240051d4 	.word	0x240051d4
 8008d80:	48020000 	.word	0x48020000
 8008d84:	58024400 	.word	0x58024400
 8008d88:	58020000 	.word	0x58020000
 8008d8c:	58020400 	.word	0x58020400
 8008d90:	58020800 	.word	0x58020800
 8008d94:	58020c00 	.word	0x58020c00
 8008d98:	58021800 	.word	0x58021800
 8008d9c:	58022400 	.word	0x58022400

08008da0 <MX_DCMI_Init>:
  hdcmi->Init.HSPolarity       = HSPolarity;
 8008da0:	4909      	ldr	r1, [pc, #36]	; (8008dc8 <MX_DCMI_Init+0x28>)
  hdcmi->Instance              = DCMI;
 8008da2:	4a0a      	ldr	r2, [pc, #40]	; (8008dcc <MX_DCMI_Init+0x2c>)
{
 8008da4:	b538      	push	{r3, r4, r5, lr}
  hdcmi->Init.HSPolarity       = HSPolarity;
 8008da6:	680d      	ldr	r5, [r1, #0]
  hdcmi->Init.VSPolarity       = DCMI_VSPOLARITY_HIGH;
 8008da8:	2480      	movs	r4, #128	; 0x80
  hdcmi->Init.PCKPolarity      = DCMI_PCKPOLARITY_RISING;
 8008daa:	2120      	movs	r1, #32
  hdcmi->Instance              = DCMI;
 8008dac:	6002      	str	r2, [r0, #0]
  hdcmi->Init.CaptureRate      = DCMI_CR_ALL_FRAME;
 8008dae:	2200      	movs	r2, #0
  hdcmi->Init.PCKPolarity      = DCMI_PCKPOLARITY_RISING;
 8008db0:	6081      	str	r1, [r0, #8]
  hdcmi->Init.CaptureRate      = DCMI_CR_ALL_FRAME;
 8008db2:	6142      	str	r2, [r0, #20]
  hdcmi->Init.SynchroMode      = DCMI_SYNCHRO_HARDWARE;
 8008db4:	6042      	str	r2, [r0, #4]
  hdcmi->Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8008db6:	6182      	str	r2, [r0, #24]
  hdcmi->Init.VSPolarity       = DCMI_VSPOLARITY_HIGH;
 8008db8:	e9c0 4503 	strd	r4, r5, [r0, #12]
  if(HAL_DCMI_Init(hdcmi) != HAL_OK)
 8008dbc:	f001 fd16 	bl	800a7ec <HAL_DCMI_Init>
}
 8008dc0:	3000      	adds	r0, #0
 8008dc2:	bf18      	it	ne
 8008dc4:	2001      	movne	r0, #1
 8008dc6:	bd38      	pop	{r3, r4, r5, pc}
 8008dc8:	24003d20 	.word	0x24003d20
 8008dcc:	48020000 	.word	0x48020000

08008dd0 <BSP_CAMERA_Init>:
  if(Instance >= CAMERA_INSTANCES_NBR)
 8008dd0:	2800      	cmp	r0, #0
 8008dd2:	f040 81f2 	bne.w	80091ba <BSP_CAMERA_Init+0x3ea>
  gpio_init_structure.Pin       = GPIO_PIN_4 | GPIO_PIN_6;
 8008dd6:	2350      	movs	r3, #80	; 0x50
{
 8008dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_RCC_DCMI_CLK_ENABLE();
 8008ddc:	4cbb      	ldr	r4, [pc, #748]	; (80090cc <BSP_CAMERA_Init+0x2fc>)
{
 8008dde:	b095      	sub	sp, #84	; 0x54
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8008de0:	2501      	movs	r5, #1
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8008de2:	2702      	movs	r7, #2
 8008de4:	9203      	str	r2, [sp, #12]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8008de6:	2603      	movs	r6, #3
  __HAL_RCC_DCMI_CLK_ENABLE();
 8008de8:	f8d4 20dc 	ldr.w	r2, [r4, #220]	; 0xdc
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 8008dec:	f04f 080d 	mov.w	r8, #13
 8008df0:	4683      	mov	fp, r0
 8008df2:	4689      	mov	r9, r1
  __HAL_RCC_DCMI_CLK_ENABLE();
 8008df4:	432a      	orrs	r2, r5
  HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 8008df6:	a90e      	add	r1, sp, #56	; 0x38
 8008df8:	48b5      	ldr	r0, [pc, #724]	; (80090d0 <BSP_CAMERA_Init+0x300>)
  hdma_handler.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8008dfa:	f44f 4a80 	mov.w	sl, #16384	; 0x4000
  __HAL_RCC_DCMI_CLK_ENABLE();
 8008dfe:	f8c4 20dc 	str.w	r2, [r4, #220]	; 0xdc
 8008e02:	f8d4 20dc 	ldr.w	r2, [r4, #220]	; 0xdc
 8008e06:	402a      	ands	r2, r5
 8008e08:	9205      	str	r2, [sp, #20]
 8008e0a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8008e0c:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
 8008e10:	433a      	orrs	r2, r7
 8008e12:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
 8008e16:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
 8008e1a:	403a      	ands	r2, r7
 8008e1c:	9206      	str	r2, [sp, #24]
 8008e1e:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e20:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 8008e24:	432a      	orrs	r2, r5
 8008e26:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
 8008e2a:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 8008e2e:	402a      	ands	r2, r5
 8008e30:	9207      	str	r2, [sp, #28]
 8008e32:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008e34:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 8008e38:	433a      	orrs	r2, r7
 8008e3a:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
 8008e3e:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 8008e42:	403a      	ands	r2, r7
 8008e44:	9208      	str	r2, [sp, #32]
 8008e46:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008e48:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 8008e4c:	f042 0204 	orr.w	r2, r2, #4
 8008e50:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
 8008e54:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 8008e58:	f002 0204 	and.w	r2, r2, #4
 8008e5c:	9209      	str	r2, [sp, #36]	; 0x24
 8008e5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008e60:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 8008e64:	f042 0208 	orr.w	r2, r2, #8
 8008e68:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
 8008e6c:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 8008e70:	f002 0208 	and.w	r2, r2, #8
 8008e74:	920a      	str	r2, [sp, #40]	; 0x28
 8008e76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8008e78:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 8008e7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e80:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
 8008e84:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
  gpio_init_structure.Pin       = GPIO_PIN_4 | GPIO_PIN_6;
 8008e88:	930e      	str	r3, [sp, #56]	; 0x38
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8008e8a:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8008e8e:	920b      	str	r2, [sp, #44]	; 0x2c
 8008e90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 8008e92:	e9cd 6811 	strd	r6, r8, [sp, #68]	; 0x44
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8008e96:	e9cd 750f 	strd	r7, r5, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 8008e9a:	f004 f923 	bl	800d0e4 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 8008e9e:	f44f 7260 	mov.w	r2, #896	; 0x380
  HAL_GPIO_Init(GPIOB, &gpio_init_structure);
 8008ea2:	a90e      	add	r1, sp, #56	; 0x38
 8008ea4:	488b      	ldr	r0, [pc, #556]	; (80090d4 <BSP_CAMERA_Init+0x304>)
  gpio_init_structure.Pin       = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 8008ea6:	920e      	str	r2, [sp, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 8008ea8:	e9cd 6811 	strd	r6, r8, [sp, #68]	; 0x44
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8008eac:	e9cd 750f 	strd	r7, r5, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &gpio_init_structure);
 8008eb0:	f004 f918 	bl	800d0e4 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_11;
 8008eb4:	f44f 622c 	mov.w	r2, #2752	; 0xac0
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8008eb8:	a90e      	add	r1, sp, #56	; 0x38
 8008eba:	4887      	ldr	r0, [pc, #540]	; (80090d8 <BSP_CAMERA_Init+0x308>)
  gpio_init_structure.Pin       = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_11;
 8008ebc:	920e      	str	r2, [sp, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 8008ebe:	e9cd 6811 	strd	r6, r8, [sp, #68]	; 0x44
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8008ec2:	e9cd 750f 	strd	r7, r5, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8008ec6:	f004 f90d 	bl	800d0e4 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_3;
 8008eca:	2208      	movs	r2, #8
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8008ecc:	a90e      	add	r1, sp, #56	; 0x38
 8008ece:	4883      	ldr	r0, [pc, #524]	; (80090dc <BSP_CAMERA_Init+0x30c>)
  gpio_init_structure.Pin       = GPIO_PIN_3;
 8008ed0:	920e      	str	r2, [sp, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 8008ed2:	e9cd 6811 	strd	r6, r8, [sp, #68]	; 0x44
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8008ed6:	e9cd 750f 	strd	r7, r5, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8008eda:	f004 f903 	bl	800d0e4 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_10;
 8008ede:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8008ee2:	a90e      	add	r1, sp, #56	; 0x38
 8008ee4:	487e      	ldr	r0, [pc, #504]	; (80090e0 <BSP_CAMERA_Init+0x310>)
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 8008ee6:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8008eea:	9611      	str	r6, [sp, #68]	; 0x44
  gpio_init_structure.Pin       = GPIO_PIN_10;
 8008eec:	930e      	str	r3, [sp, #56]	; 0x38
  __HAL_LINKDMA(hdcmi, DMA_Handle, hdma_handler);
 8008eee:	f8df 8228 	ldr.w	r8, [pc, #552]	; 8009118 <BSP_CAMERA_Init+0x348>
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8008ef2:	e9cd 750f 	strd	r7, r5, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8008ef6:	f004 f8f5 	bl	800d0e4 <HAL_GPIO_Init>
  hdma_handler.Init.Request             = DMA_REQUEST_DCMI;
 8008efa:	4b7a      	ldr	r3, [pc, #488]	; (80090e4 <BSP_CAMERA_Init+0x314>)
  hdma_handler.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008efc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  hdma_handler.Init.Mode                = DMA_CIRCULAR;
 8008f00:	f44f 7180 	mov.w	r1, #256	; 0x100
  hdma_handler.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8008f04:	629e      	str	r6, [r3, #40]	; 0x28
  hdma_handler.Init.MemInc              = DMA_MINC_ENABLE;
 8008f06:	f44f 6680 	mov.w	r6, #1024	; 0x400
  hdma_handler.Init.Priority            = DMA_PRIORITY_HIGH;
 8008f0a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
  hdma_handler.Init.Request             = DMA_REQUEST_DCMI;
 8008f0e:	f04f 0e4b 	mov.w	lr, #75	; 0x4b
  hdma_handler.Init.MemInc              = DMA_MINC_ENABLE;
 8008f12:	611e      	str	r6, [r3, #16]
  hdma_handler.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 8008f14:	2604      	movs	r6, #4
  hdma_handler.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008f16:	615a      	str	r2, [r3, #20]
  HAL_NVIC_SetPriority(DCMI_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 8008f18:	465a      	mov	r2, fp
  hdma_handler.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 8008f1a:	625e      	str	r6, [r3, #36]	; 0x24
  hdma_handler.Instance                 = DMA2_Stream3;
 8008f1c:	4e72      	ldr	r6, [pc, #456]	; (80090e8 <BSP_CAMERA_Init+0x318>)
  hdma_handler.Init.Mode                = DMA_CIRCULAR;
 8008f1e:	61d9      	str	r1, [r3, #28]
  HAL_NVIC_SetPriority(DCMI_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 8008f20:	210f      	movs	r1, #15
  hdma_handler.Init.Priority            = DMA_PRIORITY_HIGH;
 8008f22:	6218      	str	r0, [r3, #32]
  HAL_NVIC_SetPriority(DCMI_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 8008f24:	204e      	movs	r0, #78	; 0x4e
  hdma_handler.Instance                 = DMA2_Stream3;
 8008f26:	601e      	str	r6, [r3, #0]
  hdma_handler.Init.Request             = DMA_REQUEST_DCMI;
 8008f28:	f8c3 e004 	str.w	lr, [r3, #4]
  hdma_handler.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8008f2c:	f8c3 a018 	str.w	sl, [r3, #24]
  __HAL_LINKDMA(hdcmi, DMA_Handle, hdma_handler);
 8008f30:	f8c8 3048 	str.w	r3, [r8, #72]	; 0x48
 8008f34:	f8c3 8038 	str.w	r8, [r3, #56]	; 0x38
  hdma_handler.Init.PeriphInc           = DMA_PINC_DISABLE;
 8008f38:	e9c3 bb02 	strd	fp, fp, [r3, #8]
  hdma_handler.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 8008f3c:	e9c3 bb0b 	strd	fp, fp, [r3, #44]	; 0x2c
  HAL_NVIC_SetPriority(DCMI_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 8008f40:	f001 fb98 	bl	800a674 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8008f44:	204e      	movs	r0, #78	; 0x4e
 8008f46:	f001 fbcb 	bl	800a6e0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 8008f4a:	465a      	mov	r2, fp
 8008f4c:	210f      	movs	r1, #15
 8008f4e:	203b      	movs	r0, #59	; 0x3b
 8008f50:	f001 fb90 	bl	800a674 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8008f54:	203b      	movs	r0, #59	; 0x3b
 8008f56:	f001 fbc3 	bl	800a6e0 <HAL_NVIC_EnableIRQ>
  (void)HAL_DMA_Init(hdcmi->DMA_Handle);
 8008f5a:	f8d8 0048 	ldr.w	r0, [r8, #72]	; 0x48
 8008f5e:	f001 fe77 	bl	800ac50 <HAL_DMA_Init>
    if(MX_DCMI_Init(&hcamera_dcmi) != HAL_OK)
 8008f62:	4640      	mov	r0, r8
 8008f64:	f7ff ff1c 	bl	8008da0 <MX_DCMI_Init>
 8008f68:	4606      	mov	r6, r0
 8008f6a:	2800      	cmp	r0, #0
 8008f6c:	f040 80a8 	bne.w	80090c0 <BSP_CAMERA_Init+0x2f0>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8008f70:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8008f74:	a90e      	add	r1, sp, #56	; 0x38
 8008f76:	485d      	ldr	r0, [pc, #372]	; (80090ec <BSP_CAMERA_Init+0x31c>)
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8008f78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  OV9655_IO_t              IOCtx;
  static OV9655_Object_t   OV9655Obj;

  /* Configure the audio driver */
  IOCtx.Address     = CAMERA_OV9655_ADDRESS;
  IOCtx.Init        = BSP_I2C4_Init;
 8008f7c:	f8df 819c 	ldr.w	r8, [pc, #412]	; 800911c <BSP_CAMERA_Init+0x34c>
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8008f80:	f8df b19c 	ldr.w	fp, [pc, #412]	; 8009120 <BSP_CAMERA_Init+0x350>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8008f84:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8008f88:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    gpio_init_structure.Pin       = GPIO_PIN_14;
 8008f8c:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8008f90:	f403 7300 	and.w	r3, r3, #512	; 0x200
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8008f94:	9711      	str	r7, [sp, #68]	; 0x44
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8008f96:	930c      	str	r3, [sp, #48]	; 0x30
 8008f98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    gpio_init_structure.Pull      = GPIO_NOPULL;
 8008f9a:	e9cd 560f 	strd	r5, r6, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8008f9e:	f004 f8a1 	bl	800d0e4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOJ,GPIO_PIN_14, GPIO_PIN_SET);
 8008fa2:	462a      	mov	r2, r5
 8008fa4:	4651      	mov	r1, sl
 8008fa6:	4851      	ldr	r0, [pc, #324]	; (80090ec <BSP_CAMERA_Init+0x31c>)
 8008fa8:	f004 fa96 	bl	800d4d8 <HAL_GPIO_WritePin>
    HAL_Delay(100);     /* POWER_DOWN de-asserted during 100 ms */
 8008fac:	2064      	movs	r0, #100	; 0x64
 8008fae:	f001 fb2d 	bl	800a60c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOJ,GPIO_PIN_14, GPIO_PIN_RESET);
 8008fb2:	4651      	mov	r1, sl
 8008fb4:	4632      	mov	r2, r6
 8008fb6:	484d      	ldr	r0, [pc, #308]	; (80090ec <BSP_CAMERA_Init+0x31c>)
 8008fb8:	f004 fa8e 	bl	800d4d8 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8008fbc:	2014      	movs	r0, #20
 8008fbe:	f001 fb25 	bl	800a60c <HAL_Delay>
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
  IOCtx.GetTick     = BSP_GetTick;

  if(OV9655_RegisterBusIO (&OV9655Obj, &IOCtx) != OV9655_OK)
 8008fc2:	4d4b      	ldr	r5, [pc, #300]	; (80090f0 <BSP_CAMERA_Init+0x320>)
  IOCtx.Address     = CAMERA_OV9655_ADDRESS;
 8008fc4:	2160      	movs	r1, #96	; 0x60
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8008fc6:	4a4b      	ldr	r2, [pc, #300]	; (80090f4 <BSP_CAMERA_Init+0x324>)
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8008fc8:	4b4b      	ldr	r3, [pc, #300]	; (80090f8 <BSP_CAMERA_Init+0x328>)
  if(OV9655_RegisterBusIO (&OV9655Obj, &IOCtx) != OV9655_OK)
 8008fca:	4628      	mov	r0, r5
  IOCtx.GetTick     = BSP_GetTick;
 8008fcc:	f8df a154 	ldr.w	sl, [pc, #340]	; 8009124 <BSP_CAMERA_Init+0x354>
  IOCtx.Address     = CAMERA_OV9655_ADDRESS;
 8008fd0:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
  if(OV9655_RegisterBusIO (&OV9655Obj, &IOCtx) != OV9655_OK)
 8008fd4:	a90e      	add	r1, sp, #56	; 0x38
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8008fd6:	9212      	str	r2, [sp, #72]	; 0x48
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8008fd8:	9311      	str	r3, [sp, #68]	; 0x44
  IOCtx.GetTick     = BSP_GetTick;
 8008fda:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8008fde:	e9cd 8b0e 	strd	r8, fp, [sp, #56]	; 0x38
  if(OV9655_RegisterBusIO (&OV9655Obj, &IOCtx) != OV9655_OK)
 8008fe2:	f7ff f81b 	bl	800801c <OV9655_RegisterBusIO>
 8008fe6:	2800      	cmp	r0, #0
 8008fe8:	f040 80a0 	bne.w	800912c <BSP_CAMERA_Init+0x35c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(OV9655_ReadID(&OV9655Obj, &CameraId) != OV9655_OK)
 8008fec:	4c43      	ldr	r4, [pc, #268]	; (80090fc <BSP_CAMERA_Init+0x32c>)
 8008fee:	4628      	mov	r0, r5
 8008ff0:	4621      	mov	r1, r4
 8008ff2:	f7fe ff5b 	bl	8007eac <OV9655_ReadID>
 8008ff6:	2800      	cmp	r0, #0
 8008ff8:	f040 8098 	bne.w	800912c <BSP_CAMERA_Init+0x35c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    if((CameraId != OV9655_ID) && (CameraId != OV9655_ID_2))
 8008ffc:	6822      	ldr	r2, [r4, #0]
 8008ffe:	4b40      	ldr	r3, [pc, #256]	; (8009100 <BSP_CAMERA_Init+0x330>)
 8009000:	4413      	add	r3, r2
 8009002:	2b01      	cmp	r3, #1
 8009004:	f200 8092 	bhi.w	800912c <BSP_CAMERA_Init+0x35c>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
    }
    else
    {
      Camera_Drv = (CAMERA_Drv_t *) &OV9655_CAMERA_Driver;
 8009008:	f8df c11c 	ldr.w	ip, [pc, #284]	; 8009128 <BSP_CAMERA_Init+0x358>
      Camera_CompObj = &OV9655Obj;
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV9655_OK)
 800900c:	4628      	mov	r0, r5
      Camera_CompObj = &OV9655Obj;
 800900e:	4e3d      	ldr	r6, [pc, #244]	; (8009104 <BSP_CAMERA_Init+0x334>)
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV9655_OK)
 8009010:	4649      	mov	r1, r9
      Camera_Drv = (CAMERA_Drv_t *) &OV9655_CAMERA_Driver;
 8009012:	4f3d      	ldr	r7, [pc, #244]	; (8009108 <BSP_CAMERA_Init+0x338>)
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV9655_OK)
 8009014:	9a03      	ldr	r2, [sp, #12]
 8009016:	f8dc 3000 	ldr.w	r3, [ip]
      Camera_CompObj = &OV9655Obj;
 800901a:	6035      	str	r5, [r6, #0]
      Camera_Drv = (CAMERA_Drv_t *) &OV9655_CAMERA_Driver;
 800901c:	f8c7 c000 	str.w	ip, [r7]
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV9655_OK)
 8009020:	4798      	blx	r3
 8009022:	2800      	cmp	r0, #0
 8009024:	f040 8082 	bne.w	800912c <BSP_CAMERA_Init+0x35c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      else if(Camera_Drv->GetCapabilities(Camera_CompObj, &Camera_Cap) != OV9655_OK)
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	6830      	ldr	r0, [r6, #0]
 800902c:	68db      	ldr	r3, [r3, #12]
 800902e:	4937      	ldr	r1, [pc, #220]	; (800910c <BSP_CAMERA_Init+0x33c>)
 8009030:	4798      	blx	r3
 8009032:	2800      	cmp	r0, #0
 8009034:	d17a      	bne.n	800912c <BSP_CAMERA_Init+0x35c>
        if((CameraId == OV9655_ID) || (CameraId == OV9655_ID_2))
 8009036:	6822      	ldr	r2, [r4, #0]
 8009038:	4b31      	ldr	r3, [pc, #196]	; (8009100 <BSP_CAMERA_Init+0x330>)
 800903a:	4413      	add	r3, r2
 800903c:	2b01      	cmp	r3, #1
 800903e:	d837      	bhi.n	80090b0 <BSP_CAMERA_Init+0x2e0>
          if(Resolution == CAMERA_R480x272)
 8009040:	f1b9 0f02 	cmp.w	r9, #2
 8009044:	f000 80a7 	beq.w	8009196 <BSP_CAMERA_Init+0x3c6>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8009048:	4b20      	ldr	r3, [pc, #128]	; (80090cc <BSP_CAMERA_Init+0x2fc>)
    gpio_init_structure.Pin       = GPIO_PIN_14;
 800904a:	f44f 4680 	mov.w	r6, #16384	; 0x4000
    gpio_init_structure.Pull      = GPIO_NOPULL;
 800904e:	2500      	movs	r5, #0
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8009050:	2202      	movs	r2, #2
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8009052:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8009056:	2701      	movs	r7, #1
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8009058:	a90e      	add	r1, sp, #56	; 0x38
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800905a:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 800905e:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8009062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8009066:	4821      	ldr	r0, [pc, #132]	; (80090ec <BSP_CAMERA_Init+0x31c>)
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8009068:	f403 7300 	and.w	r3, r3, #512	; 0x200
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800906c:	9211      	str	r2, [sp, #68]	; 0x44
    gpio_init_structure.Pin       = GPIO_PIN_14;
 800906e:	960e      	str	r6, [sp, #56]	; 0x38
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8009070:	930d      	str	r3, [sp, #52]	; 0x34
 8009072:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    gpio_init_structure.Pull      = GPIO_NOPULL;
 8009074:	e9cd 750f 	strd	r7, r5, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8009078:	f004 f834 	bl	800d0e4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOJ,GPIO_PIN_14, GPIO_PIN_SET);
 800907c:	463a      	mov	r2, r7
 800907e:	4631      	mov	r1, r6
 8009080:	481a      	ldr	r0, [pc, #104]	; (80090ec <BSP_CAMERA_Init+0x31c>)
 8009082:	f004 fa29 	bl	800d4d8 <HAL_GPIO_WritePin>
    HAL_Delay(100);     /* POWER_DOWN de-asserted during 100 ms */
 8009086:	2064      	movs	r0, #100	; 0x64
 8009088:	f001 fac0 	bl	800a60c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOJ,GPIO_PIN_14, GPIO_PIN_RESET);
 800908c:	462a      	mov	r2, r5
 800908e:	4631      	mov	r1, r6
 8009090:	4816      	ldr	r0, [pc, #88]	; (80090ec <BSP_CAMERA_Init+0x31c>)
 8009092:	f004 fa21 	bl	800d4d8 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8009096:	2014      	movs	r0, #20
 8009098:	f001 fab8 	bl	800a60c <HAL_Delay>
          Camera_Ctx[Instance].CameraId  = CameraId;
 800909c:	6822      	ldr	r2, [r4, #0]
 800909e:	4b1c      	ldr	r3, [pc, #112]	; (8009110 <BSP_CAMERA_Init+0x340>)
          Camera_Ctx[Instance].PixelFormat = PixelFormat;
 80090a0:	4628      	mov	r0, r5
          Camera_Ctx[Instance].Resolution  = Resolution;
 80090a2:	e9c3 2900 	strd	r2, r9, [r3]
          Camera_Ctx[Instance].PixelFormat = PixelFormat;
 80090a6:	9a03      	ldr	r2, [sp, #12]
 80090a8:	609a      	str	r2, [r3, #8]
}
 80090aa:	b015      	add	sp, #84	; 0x54
 80090ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          HSPolarity = DCMI_HSPOLARITY_HIGH;
 80090b0:	4b18      	ldr	r3, [pc, #96]	; (8009114 <BSP_CAMERA_Init+0x344>)
 80090b2:	2240      	movs	r2, #64	; 0x40
          if(MX_DCMI_Init(&hcamera_dcmi) != HAL_OK)
 80090b4:	4818      	ldr	r0, [pc, #96]	; (8009118 <BSP_CAMERA_Init+0x348>)
          HSPolarity = DCMI_HSPOLARITY_HIGH;
 80090b6:	601a      	str	r2, [r3, #0]
          if(MX_DCMI_Init(&hcamera_dcmi) != HAL_OK)
 80090b8:	f7ff fe72 	bl	8008da0 <MX_DCMI_Init>
 80090bc:	2800      	cmp	r0, #0
 80090be:	d0c3      	beq.n	8009048 <BSP_CAMERA_Init+0x278>
      ret = BSP_ERROR_PERIPH_FAILURE;
 80090c0:	f06f 0003 	mvn.w	r0, #3
}
 80090c4:	b015      	add	sp, #84	; 0x54
 80090c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090ca:	bf00      	nop
 80090cc:	58024400 	.word	0x58024400
 80090d0:	58020000 	.word	0x58020000
 80090d4:	58020400 	.word	0x58020400
 80090d8:	58020800 	.word	0x58020800
 80090dc:	58020c00 	.word	0x58020c00
 80090e0:	58021800 	.word	0x58021800
 80090e4:	24003d74 	.word	0x24003d74
 80090e8:	40020458 	.word	0x40020458
 80090ec:	58022400 	.word	0x58022400
 80090f0:	24003d4c 	.word	0x24003d4c
 80090f4:	08008bd5 	.word	0x08008bd5
 80090f8:	08008b9d 	.word	0x08008b9d
 80090fc:	24003cec 	.word	0x24003cec
 8009100:	ffff69aa 	.word	0xffff69aa
 8009104:	24003d18 	.word	0x24003d18
 8009108:	24003d1c 	.word	0x24003d1c
 800910c:	24003cf0 	.word	0x24003cf0
 8009110:	24005224 	.word	0x24005224
 8009114:	24003d20 	.word	0x24003d20
 8009118:	240051d4 	.word	0x240051d4
 800911c:	08008469 	.word	0x08008469
 8009120:	080083d5 	.word	0x080083d5
 8009124:	08008c7d 	.word	0x08008c7d
 8009128:	24002564 	.word	0x24002564
   int32_t ret;
  OV5640_IO_t              IOCtx;
  static OV5640_Object_t   OV5640Obj;

  /* Configure the audio driver */
  IOCtx.Address     = CAMERA_OV5640_ADDRESS;
 800912c:	2378      	movs	r3, #120	; 0x78
  IOCtx.DeInit      = BSP_I2C4_DeInit;
  IOCtx.ReadReg     = BSP_I2C4_ReadReg16;
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
  IOCtx.GetTick     = BSP_GetTick;

  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 800912e:	4d24      	ldr	r5, [pc, #144]	; (80091c0 <BSP_CAMERA_Init+0x3f0>)
  IOCtx.ReadReg     = BSP_I2C4_ReadReg16;
 8009130:	4a24      	ldr	r2, [pc, #144]	; (80091c4 <BSP_CAMERA_Init+0x3f4>)
  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 8009132:	a90e      	add	r1, sp, #56	; 0x38
  IOCtx.Address     = CAMERA_OV5640_ADDRESS;
 8009134:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 8009138:	4628      	mov	r0, r5
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
 800913a:	4b23      	ldr	r3, [pc, #140]	; (80091c8 <BSP_CAMERA_Init+0x3f8>)
  IOCtx.Init        = BSP_I2C4_Init;
 800913c:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8009140:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  IOCtx.GetTick     = BSP_GetTick;
 8009144:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
 8009148:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 800914c:	f7fe fac6 	bl	80076dc <OV5640_RegisterBusIO>
 8009150:	b9f0      	cbnz	r0, 8009190 <BSP_CAMERA_Init+0x3c0>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(OV5640_ReadID(&OV5640Obj, &CameraId) != OV5640_OK)
 8009152:	4c1e      	ldr	r4, [pc, #120]	; (80091cc <BSP_CAMERA_Init+0x3fc>)
 8009154:	4628      	mov	r0, r5
 8009156:	4621      	mov	r1, r4
 8009158:	f7fe f84e 	bl	80071f8 <OV5640_ReadID>
 800915c:	b9c0      	cbnz	r0, 8009190 <BSP_CAMERA_Init+0x3c0>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    if(CameraId != OV5640_ID)
 800915e:	6822      	ldr	r2, [r4, #0]
 8009160:	f245 6340 	movw	r3, #22080	; 0x5640
 8009164:	429a      	cmp	r2, r3
 8009166:	d113      	bne.n	8009190 <BSP_CAMERA_Init+0x3c0>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
    }
    else
    {
      Camera_Drv = (CAMERA_Drv_t *) &OV5640_CAMERA_Driver;
 8009168:	4b19      	ldr	r3, [pc, #100]	; (80091d0 <BSP_CAMERA_Init+0x400>)
      Camera_CompObj = &OV5640Obj;
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 800916a:	4628      	mov	r0, r5
      Camera_CompObj = &OV5640Obj;
 800916c:	4e19      	ldr	r6, [pc, #100]	; (80091d4 <BSP_CAMERA_Init+0x404>)
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 800916e:	4649      	mov	r1, r9
      Camera_Drv = (CAMERA_Drv_t *) &OV5640_CAMERA_Driver;
 8009170:	4f19      	ldr	r7, [pc, #100]	; (80091d8 <BSP_CAMERA_Init+0x408>)
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 8009172:	9a03      	ldr	r2, [sp, #12]
 8009174:	f8d3 8000 	ldr.w	r8, [r3]
      Camera_CompObj = &OV5640Obj;
 8009178:	6035      	str	r5, [r6, #0]
      Camera_Drv = (CAMERA_Drv_t *) &OV5640_CAMERA_Driver;
 800917a:	603b      	str	r3, [r7, #0]
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 800917c:	47c0      	blx	r8
 800917e:	b938      	cbnz	r0, 8009190 <BSP_CAMERA_Init+0x3c0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      else if(Camera_Drv->GetCapabilities(Camera_CompObj, &Camera_Cap) != OV5640_OK)
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	6830      	ldr	r0, [r6, #0]
 8009184:	68db      	ldr	r3, [r3, #12]
 8009186:	4915      	ldr	r1, [pc, #84]	; (80091dc <BSP_CAMERA_Init+0x40c>)
 8009188:	4798      	blx	r3
 800918a:	2800      	cmp	r0, #0
 800918c:	f43f af53 	beq.w	8009036 <BSP_CAMERA_Init+0x266>
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009190:	f06f 0006 	mvn.w	r0, #6
 8009194:	e789      	b.n	80090aa <BSP_CAMERA_Init+0x2da>
            if(HAL_DCMI_ConfigCROP(&hcamera_dcmi,           /* Crop in the middle of the VGA picture */
 8009196:	f240 100f 	movw	r0, #271	; 0x10f
 800919a:	f240 33bf 	movw	r3, #959	; 0x3bf
 800919e:	2268      	movs	r2, #104	; 0x68
 80091a0:	2150      	movs	r1, #80	; 0x50
 80091a2:	9000      	str	r0, [sp, #0]
 80091a4:	480e      	ldr	r0, [pc, #56]	; (80091e0 <BSP_CAMERA_Init+0x410>)
 80091a6:	f001 fc85 	bl	800aab4 <HAL_DCMI_ConfigCrop>
 80091aa:	2800      	cmp	r0, #0
 80091ac:	d188      	bne.n	80090c0 <BSP_CAMERA_Init+0x2f0>
              if(HAL_DCMI_EnableCROP(&hcamera_dcmi) != HAL_OK)
 80091ae:	480c      	ldr	r0, [pc, #48]	; (80091e0 <BSP_CAMERA_Init+0x410>)
 80091b0:	f001 fcb8 	bl	800ab24 <HAL_DCMI_EnableCrop>
 80091b4:	2800      	cmp	r0, #0
 80091b6:	d183      	bne.n	80090c0 <BSP_CAMERA_Init+0x2f0>
 80091b8:	e746      	b.n	8009048 <BSP_CAMERA_Init+0x278>
    ret = BSP_ERROR_WRONG_PARAM;
 80091ba:	f06f 0001 	mvn.w	r0, #1
}
 80091be:	4770      	bx	lr
 80091c0:	24003d24 	.word	0x24003d24
 80091c4:	08008c45 	.word	0x08008c45
 80091c8:	08008c0d 	.word	0x08008c0d
 80091cc:	24003cec 	.word	0x24003cec
 80091d0:	24002520 	.word	0x24002520
 80091d4:	24003d18 	.word	0x24003d18
 80091d8:	24003d1c 	.word	0x24003d1c
 80091dc:	24003cf0 	.word	0x24003cf0
 80091e0:	240051d4 	.word	0x240051d4

080091e4 <BSP_CAMERA_Suspend>:
  if(Instance >= CAMERA_INSTANCES_NBR)
 80091e4:	b948      	cbnz	r0, 80091fa <BSP_CAMERA_Suspend+0x16>
  else if(HAL_DCMI_Suspend(&hcamera_dcmi) != HAL_OK)
 80091e6:	4806      	ldr	r0, [pc, #24]	; (8009200 <BSP_CAMERA_Suspend+0x1c>)
{
 80091e8:	b508      	push	{r3, lr}
  else if(HAL_DCMI_Suspend(&hcamera_dcmi) != HAL_OK)
 80091ea:	f001 fba5 	bl	800a938 <HAL_DCMI_Suspend>
 80091ee:	2800      	cmp	r0, #0
    ret = BSP_ERROR_NONE;
 80091f0:	bf14      	ite	ne
 80091f2:	f06f 0003 	mvnne.w	r0, #3
 80091f6:	2000      	moveq	r0, #0
}
 80091f8:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 80091fa:	f06f 0001 	mvn.w	r0, #1
}
 80091fe:	4770      	bx	lr
 8009200:	240051d4 	.word	0x240051d4

08009204 <BSP_CAMERA_Resume>:
  if(Instance >= CAMERA_INSTANCES_NBR)
 8009204:	b948      	cbnz	r0, 800921a <BSP_CAMERA_Resume+0x16>
  else if(HAL_DCMI_Resume(&hcamera_dcmi) != HAL_OK)
 8009206:	4806      	ldr	r0, [pc, #24]	; (8009220 <BSP_CAMERA_Resume+0x1c>)
{
 8009208:	b508      	push	{r3, lr}
  else if(HAL_DCMI_Resume(&hcamera_dcmi) != HAL_OK)
 800920a:	f001 fbd9 	bl	800a9c0 <HAL_DCMI_Resume>
 800920e:	2800      	cmp	r0, #0
    ret = BSP_ERROR_NONE;
 8009210:	bf14      	ite	ne
 8009212:	f06f 0003 	mvnne.w	r0, #3
 8009216:	2000      	moveq	r0, #0
}
 8009218:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800921a:	f06f 0001 	mvn.w	r0, #1
}
 800921e:	4770      	bx	lr
 8009220:	240051d4 	.word	0x240051d4

08009224 <BSP_CAMERA_SetBrightness>:
  if((Instance >= CAMERA_INSTANCES_NBR) || ((Brightness < CAMERA_BRIGHTNESS_MIN) && (Brightness > CAMERA_BRIGHTNESS_MAX)))
 8009224:	b988      	cbnz	r0, 800924a <BSP_CAMERA_SetBrightness+0x26>
  else if(Camera_Cap.Brightness == 0U)
 8009226:	4a0d      	ldr	r2, [pc, #52]	; (800925c <BSP_CAMERA_SetBrightness+0x38>)
 8009228:	68d2      	ldr	r2, [r2, #12]
 800922a:	b1a2      	cbz	r2, 8009256 <BSP_CAMERA_SetBrightness+0x32>
  else if(Camera_Drv->SetBrightness(Camera_CompObj, Brightness) < 0)
 800922c:	4a0c      	ldr	r2, [pc, #48]	; (8009260 <BSP_CAMERA_SetBrightness+0x3c>)
{
 800922e:	b538      	push	{r3, r4, r5, lr}
  else if(Camera_Drv->SetBrightness(Camera_CompObj, Brightness) < 0)
 8009230:	4b0c      	ldr	r3, [pc, #48]	; (8009264 <BSP_CAMERA_SetBrightness+0x40>)
 8009232:	4604      	mov	r4, r0
 8009234:	6810      	ldr	r0, [r2, #0]
 8009236:	460d      	mov	r5, r1
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	699b      	ldr	r3, [r3, #24]
 800923c:	4798      	blx	r3
 800923e:	2800      	cmp	r0, #0
 8009240:	db06      	blt.n	8009250 <BSP_CAMERA_SetBrightness+0x2c>
    Camera_Ctx[Instance].Brightness = Brightness;
 8009242:	4b09      	ldr	r3, [pc, #36]	; (8009268 <BSP_CAMERA_SetBrightness+0x44>)
    ret = BSP_ERROR_NONE;
 8009244:	4620      	mov	r0, r4
    Camera_Ctx[Instance].Brightness = Brightness;
 8009246:	615d      	str	r5, [r3, #20]
}
 8009248:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800924a:	f06f 0001 	mvn.w	r0, #1
 800924e:	4770      	bx	lr
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8009250:	f06f 0004 	mvn.w	r0, #4
}
 8009254:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8009256:	f06f 000a 	mvn.w	r0, #10
}
 800925a:	4770      	bx	lr
 800925c:	24003cf0 	.word	0x24003cf0
 8009260:	24003d18 	.word	0x24003d18
 8009264:	24003d1c 	.word	0x24003d1c
 8009268:	24005224 	.word	0x24005224

0800926c <BSP_CAMERA_SetContrast>:
  if((Instance >= CAMERA_INSTANCES_NBR) || ((Contrast < CAMERA_CONTRAST_MIN) && (Contrast > CAMERA_CONTRAST_MAX)))
 800926c:	b988      	cbnz	r0, 8009292 <BSP_CAMERA_SetContrast+0x26>
  else if(Camera_Cap.Contrast == 0U)
 800926e:	4a0d      	ldr	r2, [pc, #52]	; (80092a4 <BSP_CAMERA_SetContrast+0x38>)
 8009270:	6952      	ldr	r2, [r2, #20]
 8009272:	b1a2      	cbz	r2, 800929e <BSP_CAMERA_SetContrast+0x32>
  else if(Camera_Drv->SetContrast(Camera_CompObj, Contrast)  < 0)
 8009274:	4a0c      	ldr	r2, [pc, #48]	; (80092a8 <BSP_CAMERA_SetContrast+0x3c>)
{
 8009276:	b538      	push	{r3, r4, r5, lr}
  else if(Camera_Drv->SetContrast(Camera_CompObj, Contrast)  < 0)
 8009278:	4b0c      	ldr	r3, [pc, #48]	; (80092ac <BSP_CAMERA_SetContrast+0x40>)
 800927a:	4604      	mov	r4, r0
 800927c:	6810      	ldr	r0, [r2, #0]
 800927e:	460d      	mov	r5, r1
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	6a1b      	ldr	r3, [r3, #32]
 8009284:	4798      	blx	r3
 8009286:	2800      	cmp	r0, #0
 8009288:	db06      	blt.n	8009298 <BSP_CAMERA_SetContrast+0x2c>
    Camera_Ctx[Instance].Contrast = Contrast;
 800928a:	4b09      	ldr	r3, [pc, #36]	; (80092b0 <BSP_CAMERA_SetContrast+0x44>)
    ret = BSP_ERROR_NONE;
 800928c:	4620      	mov	r0, r4
    Camera_Ctx[Instance].Contrast = Contrast;
 800928e:	61dd      	str	r5, [r3, #28]
}
 8009290:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8009292:	f06f 0001 	mvn.w	r0, #1
 8009296:	4770      	bx	lr
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8009298:	f06f 0004 	mvn.w	r0, #4
}
 800929c:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800929e:	f06f 000a 	mvn.w	r0, #10
}
 80092a2:	4770      	bx	lr
 80092a4:	24003cf0 	.word	0x24003cf0
 80092a8:	24003d18 	.word	0x24003d18
 80092ac:	24003d1c 	.word	0x24003d1c
 80092b0:	24005224 	.word	0x24005224

080092b4 <BSP_CAMERA_SetMirrorFlip>:
  if(Instance >= CAMERA_INSTANCES_NBR)
 80092b4:	b988      	cbnz	r0, 80092da <BSP_CAMERA_SetMirrorFlip+0x26>
  else if(Camera_Cap.MirrorFlip == 0U)
 80092b6:	4a0d      	ldr	r2, [pc, #52]	; (80092ec <BSP_CAMERA_SetMirrorFlip+0x38>)
 80092b8:	69d2      	ldr	r2, [r2, #28]
 80092ba:	b1a2      	cbz	r2, 80092e6 <BSP_CAMERA_SetMirrorFlip+0x32>
  else if(Camera_Drv->MirrorFlipConfig(Camera_CompObj, MirrorFlip)  < 0)
 80092bc:	4a0c      	ldr	r2, [pc, #48]	; (80092f0 <BSP_CAMERA_SetMirrorFlip+0x3c>)
{
 80092be:	b538      	push	{r3, r4, r5, lr}
  else if(Camera_Drv->MirrorFlipConfig(Camera_CompObj, MirrorFlip)  < 0)
 80092c0:	4b0c      	ldr	r3, [pc, #48]	; (80092f4 <BSP_CAMERA_SetMirrorFlip+0x40>)
 80092c2:	4604      	mov	r4, r0
 80092c4:	6810      	ldr	r0, [r2, #0]
 80092c6:	460d      	mov	r5, r1
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092cc:	4798      	blx	r3
 80092ce:	2800      	cmp	r0, #0
 80092d0:	db06      	blt.n	80092e0 <BSP_CAMERA_SetMirrorFlip+0x2c>
    Camera_Ctx[Instance].MirrorFlip = MirrorFlip;
 80092d2:	4b09      	ldr	r3, [pc, #36]	; (80092f8 <BSP_CAMERA_SetMirrorFlip+0x44>)
    ret = BSP_ERROR_NONE;
 80092d4:	4620      	mov	r0, r4
    Camera_Ctx[Instance].MirrorFlip = MirrorFlip;
 80092d6:	625d      	str	r5, [r3, #36]	; 0x24
}
 80092d8:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 80092da:	f06f 0001 	mvn.w	r0, #1
 80092de:	4770      	bx	lr
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80092e0:	f06f 0004 	mvn.w	r0, #4
}
 80092e4:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80092e6:	f06f 000a 	mvn.w	r0, #10
}
 80092ea:	4770      	bx	lr
 80092ec:	24003cf0 	.word	0x24003cf0
 80092f0:	24003d18 	.word	0x24003d18
 80092f4:	24003d1c 	.word	0x24003d1c
 80092f8:	24005224 	.word	0x24005224

080092fc <BSP_CAMERA_PwrDown>:
  if(Instance >= CAMERA_INSTANCES_NBR)
 80092fc:	bb18      	cbnz	r0, 8009346 <BSP_CAMERA_PwrDown+0x4a>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80092fe:	4b13      	ldr	r3, [pc, #76]	; (800934c <BSP_CAMERA_PwrDown+0x50>)
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8009300:	2202      	movs	r2, #2
{
 8009302:	b5f0      	push	{r4, r5, r6, r7, lr}
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8009304:	f8d3 40e0 	ldr.w	r4, [r3, #224]	; 0xe0
{
 8009308:	b087      	sub	sp, #28
    gpio_init_structure.Pin       = GPIO_PIN_14;
 800930a:	f44f 4680 	mov.w	r6, #16384	; 0x4000
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800930e:	2701      	movs	r7, #1
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8009310:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 8009314:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8009316:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8009318:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
 800931c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    gpio_init_structure.Pull      = GPIO_NOPULL;
 8009320:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8009322:	f403 7300 	and.w	r3, r3, #512	; 0x200
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8009326:	480a      	ldr	r0, [pc, #40]	; (8009350 <BSP_CAMERA_PwrDown+0x54>)
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8009328:	9204      	str	r2, [sp, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800932a:	9300      	str	r3, [sp, #0]
 800932c:	9b00      	ldr	r3, [sp, #0]
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800932e:	e9cd 6701 	strd	r6, r7, [sp, #4]
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8009332:	f003 fed7 	bl	800d0e4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_14, GPIO_PIN_SET);
 8009336:	463a      	mov	r2, r7
 8009338:	4631      	mov	r1, r6
 800933a:	4805      	ldr	r0, [pc, #20]	; (8009350 <BSP_CAMERA_PwrDown+0x54>)
 800933c:	f004 f8cc 	bl	800d4d8 <HAL_GPIO_WritePin>
  int32_t ret = BSP_ERROR_NONE;
 8009340:	4628      	mov	r0, r5
}
 8009342:	b007      	add	sp, #28
 8009344:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8009346:	f06f 0001 	mvn.w	r0, #1
}
 800934a:	4770      	bx	lr
 800934c:	58024400 	.word	0x58024400
 8009350:	58022400 	.word	0x58022400

08009354 <BSP_CAMERA_IRQHandler>:
  HAL_DCMI_IRQHandler(&hcamera_dcmi);
 8009354:	4801      	ldr	r0, [pc, #4]	; (800935c <BSP_CAMERA_IRQHandler+0x8>)
 8009356:	f001 bb5d 	b.w	800aa14 <HAL_DCMI_IRQHandler>
 800935a:	bf00      	nop
 800935c:	240051d4 	.word	0x240051d4

08009360 <BSP_CAMERA_DMA_IRQHandler>:
  HAL_DMA_IRQHandler(hcamera_dcmi.DMA_Handle);
 8009360:	4b01      	ldr	r3, [pc, #4]	; (8009368 <BSP_CAMERA_DMA_IRQHandler+0x8>)
 8009362:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8009364:	f002 bce6 	b.w	800bd34 <HAL_DMA_IRQHandler>
 8009368:	240051d4 	.word	0x240051d4

0800936c <BSP_CAMERA_LineEventCallback>:
}
 800936c:	4770      	bx	lr
 800936e:	bf00      	nop

08009370 <HAL_DCMI_LineEventCallback>:
{
 8009370:	b508      	push	{r3, lr}
  BSP_CAMERA_LineEventCallback(0);
 8009372:	2000      	movs	r0, #0
 8009374:	f7ff fffa 	bl	800936c <BSP_CAMERA_LineEventCallback>
}
 8009378:	bd08      	pop	{r3, pc}
 800937a:	bf00      	nop

0800937c <HAL_DCMI_FrameEventCallback>:
{
 800937c:	b508      	push	{r3, lr}
  BSP_CAMERA_FrameEventCallback(0);
 800937e:	2000      	movs	r0, #0
 8009380:	f7f8 f94a 	bl	8001618 <BSP_CAMERA_FrameEventCallback>
}
 8009384:	bd08      	pop	{r3, pc}
 8009386:	bf00      	nop

08009388 <HAL_DCMI_VsyncEventCallback>:
{
 8009388:	b508      	push	{r3, lr}
  BSP_CAMERA_VsyncEventCallback(0);
 800938a:	2000      	movs	r0, #0
 800938c:	f7f8 f960 	bl	8001650 <BSP_CAMERA_VsyncEventCallback>
}
 8009390:	bd08      	pop	{r3, pc}
 8009392:	bf00      	nop

08009394 <HAL_DCMI_ErrorCallback>:
{
 8009394:	b508      	push	{r3, lr}
  BSP_CAMERA_ErrorCallback(0);
 8009396:	2000      	movs	r0, #0
 8009398:	f7f8 f98c 	bl	80016b4 <BSP_CAMERA_ErrorCallback>
}
 800939c:	bd08      	pop	{r3, pc}
 800939e:	bf00      	nop

080093a0 <BSP_LCD_SetActiveLayer>:
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 80093a0:	b910      	cbnz	r0, 80093a8 <BSP_LCD_SetActiveLayer+0x8>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 80093a2:	4b03      	ldr	r3, [pc, #12]	; (80093b0 <BSP_LCD_SetActiveLayer+0x10>)
 80093a4:	6099      	str	r1, [r3, #8]
 80093a6:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 80093a8:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 80093ac:	4770      	bx	lr
 80093ae:	bf00      	nop
 80093b0:	24005300 	.word	0x24005300

080093b4 <BSP_LCD_GetPixelFormat>:
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 80093b4:	b918      	cbnz	r0, 80093be <BSP_LCD_GetPixelFormat+0xa>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 80093b6:	4b03      	ldr	r3, [pc, #12]	; (80093c4 <BSP_LCD_GetPixelFormat+0x10>)
 80093b8:	68db      	ldr	r3, [r3, #12]
 80093ba:	600b      	str	r3, [r1, #0]
 80093bc:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 80093be:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 80093c2:	4770      	bx	lr
 80093c4:	24005300 	.word	0x24005300

080093c8 <BSP_LCD_GetXSize>:
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 80093c8:	b948      	cbnz	r0, 80093de <BSP_LCD_GetXSize+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if(Lcd_Drv->GetXSize != NULL)
 80093ca:	4b06      	ldr	r3, [pc, #24]	; (80093e4 <BSP_LCD_GetXSize+0x1c>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093d0:	b11b      	cbz	r3, 80093da <BSP_LCD_GetXSize+0x12>
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 80093d2:	4b05      	ldr	r3, [pc, #20]	; (80093e8 <BSP_LCD_GetXSize+0x20>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	600b      	str	r3, [r1, #0]
 80093d8:	4770      	bx	lr
  int32_t ret = BSP_ERROR_NONE;
 80093da:	4618      	mov	r0, r3
  }

  return ret;
}
 80093dc:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 80093de:	f06f 0001 	mvn.w	r0, #1
 80093e2:	4770      	bx	lr
 80093e4:	24003df0 	.word	0x24003df0
 80093e8:	24005300 	.word	0x24005300

080093ec <BSP_LCD_GetYSize>:
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 80093ec:	b948      	cbnz	r0, 8009402 <BSP_LCD_GetYSize+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if(Lcd_Drv->GetYSize != NULL)
 80093ee:	4b06      	ldr	r3, [pc, #24]	; (8009408 <BSP_LCD_GetYSize+0x1c>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093f4:	b11b      	cbz	r3, 80093fe <BSP_LCD_GetYSize+0x12>
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 80093f6:	4b05      	ldr	r3, [pc, #20]	; (800940c <BSP_LCD_GetYSize+0x20>)
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	600b      	str	r3, [r1, #0]
 80093fc:	4770      	bx	lr
  int32_t ret = BSP_ERROR_NONE;
 80093fe:	4618      	mov	r0, r3
  }

  return ret;
}
 8009400:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 8009402:	f06f 0001 	mvn.w	r0, #1
 8009406:	4770      	bx	lr
 8009408:	24003df0 	.word	0x24003df0
 800940c:	24005300 	.word	0x24005300

08009410 <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8009410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009414:	e9dd 6509 	ldrd	r6, r5, [sp, #36]	; 0x24
    }
    pData += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
 8009418:	b32d      	cbz	r5, 8009466 <BSP_LCD_FillRGBRect+0x56>
 800941a:	b326      	cbz	r6, 8009466 <BSP_LCD_FillRGBRect+0x56>
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800941c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8009420:	4c18      	ldr	r4, [pc, #96]	; (8009484 <BSP_LCD_FillRGBRect+0x74>)
 8009422:	468a      	mov	sl, r1
 8009424:	eb05 0902 	add.w	r9, r5, r2
 8009428:	eb06 0c01 	add.w	ip, r6, r1
 800942c:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8009430:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8009488 <BSP_LCD_FillRGBRect+0x78>
 8009434:	f04f 0e34 	mov.w	lr, #52	; 0x34
{
 8009438:	4650      	mov	r0, sl
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800943a:	68a5      	ldr	r5, [r4, #8]
 800943c:	6826      	ldr	r6, [r4, #0]
 800943e:	fb0e 8505 	mla	r5, lr, r5, r8
 8009442:	681f      	ldr	r7, [r3, #0]
 8009444:	fb06 0602 	mla	r6, r6, r2, r0
 8009448:	6ca9      	ldr	r1, [r5, #72]	; 0x48
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800944a:	fa1f fb87 	uxth.w	fp, r7
 800944e:	6ded      	ldr	r5, [r5, #92]	; 0x5c
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009450:	b961      	cbnz	r1, 800946c <BSP_LCD_FillRGBRect+0x5c>
 8009452:	3001      	adds	r0, #1
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8009454:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
      pData += Lcd_Ctx[Instance].BppFactor;
 8009458:	6925      	ldr	r5, [r4, #16]
    for(j = 0; j < Width; j++)
 800945a:	4584      	cmp	ip, r0
      pData += Lcd_Ctx[Instance].BppFactor;
 800945c:	442b      	add	r3, r5
    for(j = 0; j < Width; j++)
 800945e:	d1ec      	bne.n	800943a <BSP_LCD_FillRGBRect+0x2a>
 8009460:	3201      	adds	r2, #1
  for(i = 0; i < Height; i++)
 8009462:	454a      	cmp	r2, r9
 8009464:	d1e8      	bne.n	8009438 <BSP_LCD_FillRGBRect+0x28>
}
 8009466:	2000      	movs	r0, #0
 8009468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800946c:	3001      	adds	r0, #1
      pData += Lcd_Ctx[Instance].BppFactor;
 800946e:	6927      	ldr	r7, [r4, #16]
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8009470:	f825 b016 	strh.w	fp, [r5, r6, lsl #1]
    for(j = 0; j < Width; j++)
 8009474:	4584      	cmp	ip, r0
      pData += Lcd_Ctx[Instance].BppFactor;
 8009476:	443b      	add	r3, r7
    for(j = 0; j < Width; j++)
 8009478:	d1df      	bne.n	800943a <BSP_LCD_FillRGBRect+0x2a>
 800947a:	3201      	adds	r2, #1
  for(i = 0; i < Height; i++)
 800947c:	454a      	cmp	r2, r9
 800947e:	d1db      	bne.n	8009438 <BSP_LCD_FillRGBRect+0x28>
 8009480:	e7f1      	b.n	8009466 <BSP_LCD_FillRGBRect+0x56>
 8009482:	bf00      	nop
 8009484:	24005300 	.word	0x24005300
 8009488:	24005258 	.word	0x24005258

0800948c <BSP_LCD_ReadPixel>:
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800948c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
{
 8009490:	b4f0      	push	{r4, r5, r6, r7}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009492:	4d0d      	ldr	r5, [pc, #52]	; (80094c8 <BSP_LCD_ReadPixel+0x3c>)
 8009494:	0084      	lsls	r4, r0, #2
 8009496:	4e0d      	ldr	r6, [pc, #52]	; (80094cc <BSP_LCD_ReadPixel+0x40>)
 8009498:	2734      	movs	r7, #52	; 0x34
 800949a:	1928      	adds	r0, r5, r4
 800949c:	592c      	ldr	r4, [r5, r4]
 800949e:	6880      	ldr	r0, [r0, #8]
 80094a0:	fb04 1202 	mla	r2, r4, r2, r1
 80094a4:	fb07 6000 	mla	r0, r7, r0, r6
 80094a8:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80094aa:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 80094ac:	b134      	cbz	r4, 80094bc <BSP_LCD_ReadPixel+0x30>
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 80094ae:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
}
 80094b2:	2000      	movs	r0, #0
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 80094b4:	b292      	uxth	r2, r2
}
 80094b6:	bcf0      	pop	{r4, r5, r6, r7}
 80094b8:	601a      	str	r2, [r3, #0]
 80094ba:	4770      	bx	lr
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 80094bc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
}
 80094c0:	2000      	movs	r0, #0
 80094c2:	601a      	str	r2, [r3, #0]
 80094c4:	bcf0      	pop	{r4, r5, r6, r7}
 80094c6:	4770      	bx	lr
 80094c8:	24005300 	.word	0x24005300
 80094cc:	24005258 	.word	0x24005258

080094d0 <BSP_LCD_WritePixel>:
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80094d0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
{
 80094d4:	b4f0      	push	{r4, r5, r6, r7}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80094d6:	4d0c      	ldr	r5, [pc, #48]	; (8009508 <BSP_LCD_WritePixel+0x38>)
 80094d8:	0084      	lsls	r4, r0, #2
 80094da:	4e0c      	ldr	r6, [pc, #48]	; (800950c <BSP_LCD_WritePixel+0x3c>)
 80094dc:	2734      	movs	r7, #52	; 0x34
 80094de:	1928      	adds	r0, r5, r4
 80094e0:	592c      	ldr	r4, [r5, r4]
 80094e2:	6880      	ldr	r0, [r0, #8]
 80094e4:	fb04 1202 	mla	r2, r4, r2, r1
 80094e8:	fb07 6000 	mla	r0, r7, r0, r6
 80094ec:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80094ee:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 80094f0:	b12c      	cbz	r4, 80094fe <BSP_LCD_WritePixel+0x2e>
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 80094f2:	b29b      	uxth	r3, r3
  }

  return BSP_ERROR_NONE;
}
 80094f4:	2000      	movs	r0, #0
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 80094f6:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
}
 80094fa:	bcf0      	pop	{r4, r5, r6, r7}
 80094fc:	4770      	bx	lr
 80094fe:	2000      	movs	r0, #0
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8009500:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
 8009504:	bcf0      	pop	{r4, r5, r6, r7}
 8009506:	4770      	bx	lr
 8009508:	24005300 	.word	0x24005300
 800950c:	24005258 	.word	0x24005258

08009510 <DSI_IO_Read>:
  * @param  pData pointer to a buffer to store the payload of a read back operation.
  * @param  Size  Data size to be read (in byte).
  * @retval BSP status
  */
static int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t *pData, uint16_t Size)
{
 8009510:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  if(HAL_DSI_Read(&hlcd_dsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 8009512:	2406      	movs	r4, #6
{
 8009514:	b084      	sub	sp, #16
  if(HAL_DSI_Read(&hlcd_dsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 8009516:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800951a:	9400      	str	r4, [sp, #0]
 800951c:	4601      	mov	r1, r0
 800951e:	4805      	ldr	r0, [pc, #20]	; (8009534 <DSI_IO_Read+0x24>)
 8009520:	f003 fd2e 	bl	800cf80 <HAL_DSI_Read>
 8009524:	2800      	cmp	r0, #0
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }

  return ret;
}
 8009526:	bf14      	ite	ne
 8009528:	f06f 0007 	mvnne.w	r0, #7
 800952c:	2000      	moveq	r0, #0
 800952e:	b004      	add	sp, #16
 8009530:	bd10      	pop	{r4, pc}
 8009532:	bf00      	nop
 8009534:	2400531c 	.word	0x2400531c

08009538 <BSP_LCD_DrawBitmap>:
{
 8009538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800953c:	00c4      	lsls	r4, r0, #3
 800953e:	4e4f      	ldr	r6, [pc, #316]	; (800967c <BSP_LCD_DrawBitmap+0x144>)
 8009540:	f04f 0b34 	mov.w	fp, #52	; 0x34
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8009544:	f893 c014 	ldrb.w	ip, [r3, #20]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8009548:	1a25      	subs	r5, r4, r0
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800954a:	7e1f      	ldrb	r7, [r3, #24]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800954c:	f893 900c 	ldrb.w	r9, [r3, #12]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8009550:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8009554:	00ad      	lsls	r5, r5, #2
{
 8009556:	b085      	sub	sp, #20
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8009558:	043f      	lsls	r7, r7, #16
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800955a:	eb06 0a05 	add.w	sl, r6, r5
 800955e:	f856 8005 	ldr.w	r8, [r6, r5]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8009562:	ea4f 4909 	mov.w	r9, r9, lsl #16
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8009566:	f8da 5008 	ldr.w	r5, [sl, #8]
 800956a:	fb08 1802 	mla	r8, r8, r2, r1
 800956e:	4a44      	ldr	r2, [pc, #272]	; (8009680 <BSP_LCD_DrawBitmap+0x148>)
 8009570:	f8da 1010 	ldr.w	r1, [sl, #16]
 8009574:	fb0b 2e05 	mla	lr, fp, r5, r2
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8009578:	f893 a017 	ldrb.w	sl, [r3, #23]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800957c:	f893 b013 	ldrb.w	fp, [r3, #19]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8009580:	f8de e05c 	ldr.w	lr, [lr, #92]	; 0x5c
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8009584:	eb07 270a 	add.w	r7, r7, sl, lsl #8
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8009588:	7add      	ldrb	r5, [r3, #11]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800958a:	eb0c 2c0b 	add.w	ip, ip, fp, lsl #8
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800958e:	fb01 e808 	mla	r8, r1, r8, lr
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8009592:	f893 a016 	ldrb.w	sl, [r3, #22]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8009596:	7c99      	ldrb	r1, [r3, #18]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8009598:	eb09 2505 	add.w	r5, r9, r5, lsl #8
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 800959c:	7f5a      	ldrb	r2, [r3, #29]
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800959e:	44ba      	add	sl, r7
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 80095a0:	f893 901c 	ldrb.w	r9, [r3, #28]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 80095a4:	4461      	add	r1, ip
 80095a6:	7d5f      	ldrb	r7, [r3, #21]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 80095a8:	eb09 2902 	add.w	r9, r9, r2, lsl #8
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 80095ac:	7a9a      	ldrb	r2, [r3, #10]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 80095ae:	eb01 6107 	add.w	r1, r1, r7, lsl #24
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 80095b2:	4415      	add	r5, r2
 80095b4:	7b5a      	ldrb	r2, [r3, #13]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 80095b6:	9103      	str	r1, [sp, #12]
  if ((bit_pixel/8U) == 4U)
 80095b8:	f1a9 0120 	sub.w	r1, r9, #32
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 80095bc:	eb05 6202 	add.w	r2, r5, r2, lsl #24
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 80095c0:	7e5d      	ldrb	r5, [r3, #25]
  if ((bit_pixel/8U) == 4U)
 80095c2:	2907      	cmp	r1, #7
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 80095c4:	eb0a 6a05 	add.w	sl, sl, r5, lsl #24
  if ((bit_pixel/8U) == 4U)
 80095c8:	d955      	bls.n	8009676 <BSP_LCD_DrawBitmap+0x13e>
  else if ((bit_pixel/8U) == 2U)
 80095ca:	f1a9 0110 	sub.w	r1, r9, #16
    input_color_mode = DMA2D_INPUT_RGB565;
 80095ce:	2907      	cmp	r1, #7
 80095d0:	bf8c      	ite	hi
 80095d2:	f04f 0b01 	movhi.w	fp, #1
 80095d6:	f04f 0b02 	movls.w	fp, #2
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 80095da:	ea4f 09d9 	mov.w	r9, r9, lsr #3
 80095de:	9903      	ldr	r1, [sp, #12]
 80095e0:	f10a 35ff 	add.w	r5, sl, #4294967295
 80095e4:	fb01 f909 	mul.w	r9, r1, r9
 80095e8:	fb09 2505 	mla	r5, r9, r5, r2
 80095ec:	441d      	add	r5, r3
  for(index=0; index < height; index++)
 80095ee:	f1ba 0f00 	cmp.w	sl, #0
 80095f2:	d03c      	beq.n	800966e <BSP_LCD_DrawBitmap+0x136>
  switch(Lcd_Ctx[Instance].PixelFormat)
 80095f4:	1a20      	subs	r0, r4, r0
    pbmp -= width*(bit_pixel/8U);
 80095f6:	f1c9 0900 	rsb	r9, r9, #0
  for(index=0; index < height; index++)
 80095fa:	2700      	movs	r7, #0
 80095fc:	4c21      	ldr	r4, [pc, #132]	; (8009684 <BSP_LCD_DrawBitmap+0x14c>)
  switch(Lcd_Ctx[Instance].PixelFormat)
 80095fe:	eb06 0680 	add.w	r6, r6, r0, lsl #2
 8009602:	e006      	b.n	8009612 <BSP_LCD_DrawBitmap+0xda>
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 8009604:	6833      	ldr	r3, [r6, #0]
  for(index=0; index < height; index++)
 8009606:	45ba      	cmp	sl, r7
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 8009608:	6932      	ldr	r2, [r6, #16]
    pbmp -= width*(bit_pixel/8U);
 800960a:	444d      	add	r5, r9
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 800960c:	fb02 8803 	mla	r8, r2, r3, r8
  for(index=0; index < height; index++)
 8009610:	d02d      	beq.n	800966e <BSP_LCD_DrawBitmap+0x136>
  switch(Lcd_Ctx[Instance].PixelFormat)
 8009612:	68f3      	ldr	r3, [r6, #12]
  hlcd_dma2d.Init.OutputOffset = 0;
 8009614:	2200      	movs	r2, #0
  hlcd_dma2d.Instance = DMA2D;
 8009616:	491c      	ldr	r1, [pc, #112]	; (8009688 <BSP_LCD_DrawBitmap+0x150>)
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 8009618:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 800961c:	2b02      	cmp	r3, #2
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 800961e:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
  hlcd_dma2d.Instance = DMA2D;
 8009622:	6021      	str	r1, [r4, #0]
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8009624:	f04f 01ff 	mov.w	r1, #255	; 0xff
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8009628:	bf18      	it	ne
 800962a:	4613      	movne	r3, r2
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 800962c:	6060      	str	r0, [r4, #4]
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800962e:	64e2      	str	r2, [r4, #76]	; 0x4c
  for(index=0; index < height; index++)
 8009630:	3701      	adds	r7, #1
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8009632:	4814      	ldr	r0, [pc, #80]	; (8009684 <BSP_LCD_DrawBitmap+0x14c>)
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 8009634:	6462      	str	r2, [r4, #68]	; 0x44
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8009636:	6521      	str	r1, [r4, #80]	; 0x50
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 8009638:	e9c4 3202 	strd	r3, r2, [r4, #8]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800963c:	f002 feb8 	bl	800c3b0 <HAL_DMA2D_Init>
 8009640:	2800      	cmp	r0, #0
 8009642:	d1df      	bne.n	8009604 <BSP_LCD_DrawBitmap+0xcc>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8009644:	2101      	movs	r1, #1
 8009646:	480f      	ldr	r0, [pc, #60]	; (8009684 <BSP_LCD_DrawBitmap+0x14c>)
 8009648:	f003 f8fc 	bl	800c844 <HAL_DMA2D_ConfigLayer>
 800964c:	2800      	cmp	r0, #0
 800964e:	d1d9      	bne.n	8009604 <BSP_LCD_DrawBitmap+0xcc>
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8009650:	2001      	movs	r0, #1
 8009652:	9b03      	ldr	r3, [sp, #12]
 8009654:	4642      	mov	r2, r8
 8009656:	4629      	mov	r1, r5
 8009658:	9000      	str	r0, [sp, #0]
 800965a:	480a      	ldr	r0, [pc, #40]	; (8009684 <BSP_LCD_DrawBitmap+0x14c>)
 800965c:	f002 ff70 	bl	800c540 <HAL_DMA2D_Start>
 8009660:	2800      	cmp	r0, #0
 8009662:	d1cf      	bne.n	8009604 <BSP_LCD_DrawBitmap+0xcc>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 8009664:	2132      	movs	r1, #50	; 0x32
 8009666:	4807      	ldr	r0, [pc, #28]	; (8009684 <BSP_LCD_DrawBitmap+0x14c>)
 8009668:	f002 ffc4 	bl	800c5f4 <HAL_DMA2D_PollForTransfer>
 800966c:	e7ca      	b.n	8009604 <BSP_LCD_DrawBitmap+0xcc>
}
 800966e:	2000      	movs	r0, #0
 8009670:	b005      	add	sp, #20
 8009672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color_mode = DMA2D_INPUT_ARGB8888;
 8009676:	f04f 0b00 	mov.w	fp, #0
 800967a:	e7ae      	b.n	80095da <BSP_LCD_DrawBitmap+0xa2>
 800967c:	24005300 	.word	0x24005300
 8009680:	24005258 	.word	0x24005258
 8009684:	24005338 	.word	0x24005338
 8009688:	52001000 	.word	0x52001000

0800968c <BSP_LCD_DrawVLine>:
{
 800968c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009690:	4692      	mov	sl, r2
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8009692:	00c2      	lsls	r2, r0, #3
{
 8009694:	461d      	mov	r5, r3
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8009696:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800977c <BSP_LCD_DrawVLine+0xf0>
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 800969a:	eb0a 0e03 	add.w	lr, sl, r3
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800969e:	1a13      	subs	r3, r2, r0
{
 80096a0:	4689      	mov	r9, r1
  switch(Lcd_Ctx[Instance].PixelFormat)
 80096a2:	1a10      	subs	r0, r2, r0
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80096a4:	009b      	lsls	r3, r3, #2
 80096a6:	f04f 0834 	mov.w	r8, #52	; 0x34
 80096aa:	4f32      	ldr	r7, [pc, #200]	; (8009774 <BSP_LCD_DrawVLine+0xe8>)
{
 80096ac:	b083      	sub	sp, #12
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80096ae:	eb0c 0103 	add.w	r1, ip, r3
 80096b2:	f85c 6003 	ldr.w	r6, [ip, r3]
  switch(Lcd_Ctx[Instance].PixelFormat)
 80096b6:	eb0c 0c80 	add.w	ip, ip, r0, lsl #2
{
 80096ba:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80096bc:	688b      	ldr	r3, [r1, #8]
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 80096be:	1e72      	subs	r2, r6, #1
  switch(Lcd_Ctx[Instance].PixelFormat)
 80096c0:	f8dc 000c 	ldr.w	r0, [ip, #12]
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80096c4:	fb08 7703 	mla	r7, r8, r3, r7
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 80096c8:	684b      	ldr	r3, [r1, #4]
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80096ca:	f8d1 8010 	ldr.w	r8, [r1, #16]
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 80096ce:	459e      	cmp	lr, r3
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80096d0:	6dff      	ldr	r7, [r7, #92]	; 0x5c
    Length = Lcd_Ctx[Instance].YSize - Ypos;
 80096d2:	bf88      	it	hi
 80096d4:	eba3 050a 	subhi.w	r5, r3, sl
  switch(Lcd_Ctx[Instance].PixelFormat)
 80096d8:	2802      	cmp	r0, #2
 80096da:	d132      	bne.n	8009742 <BSP_LCD_DrawVLine+0xb6>
    input_color = CONVERTRGB5652ARGB8888(Color);
 80096dc:	f004 011f 	and.w	r1, r4, #31
 80096e0:	f3c4 2cc4 	ubfx	ip, r4, #11, #5
 80096e4:	f3c4 1445 	ubfx	r4, r4, #5, #6
 80096e8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80096ec:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80096f0:	ebc1 1341 	rsb	r3, r1, r1, lsl #5
 80096f4:	ebcc 1c4c 	rsb	ip, ip, ip, lsl #5
 80096f8:	3317      	adds	r3, #23
 80096fa:	eb04 11c4 	add.w	r1, r4, r4, lsl #7
 80096fe:	f10c 0c17 	add.w	ip, ip, #23
 8009702:	099b      	lsrs	r3, r3, #6
 8009704:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8009708:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800970c:	ea4f 1c9c 	mov.w	ip, ip, lsr #6
 8009710:	3421      	adds	r4, #33	; 0x21
 8009712:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8009716:	09a4      	lsrs	r4, r4, #6
 8009718:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 800971c:	f8df b060 	ldr.w	fp, [pc, #96]	; 8009780 <BSP_LCD_DrawVLine+0xf4>
 8009720:	f44f 3140 	mov.w	r1, #196608	; 0x30000
  hlcd_dma2d.Instance = DMA2D;
 8009724:	4b14      	ldr	r3, [pc, #80]	; (8009778 <BSP_LCD_DrawVLine+0xec>)
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 8009726:	f8cb 0008 	str.w	r0, [fp, #8]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800972a:	4658      	mov	r0, fp
  hlcd_dma2d.Init.OutputOffset = OffLine;
 800972c:	f8cb 200c 	str.w	r2, [fp, #12]
  hlcd_dma2d.Instance = DMA2D;
 8009730:	e9cb 3100 	strd	r3, r1, [fp]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8009734:	f002 fe3c 	bl	800c3b0 <HAL_DMA2D_Init>
 8009738:	b128      	cbz	r0, 8009746 <BSP_LCD_DrawVLine+0xba>
}
 800973a:	2000      	movs	r0, #0
 800973c:	b003      	add	sp, #12
 800973e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8009742:	2000      	movs	r0, #0
 8009744:	e7ea      	b.n	800971c <BSP_LCD_DrawVLine+0x90>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8009746:	2101      	movs	r1, #1
 8009748:	4658      	mov	r0, fp
 800974a:	f003 f87b 	bl	800c844 <HAL_DMA2D_ConfigLayer>
 800974e:	2800      	cmp	r0, #0
 8009750:	d1f3      	bne.n	800973a <BSP_LCD_DrawVLine+0xae>
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8009752:	fb0a 9206 	mla	r2, sl, r6, r9
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8009756:	4621      	mov	r1, r4
 8009758:	9500      	str	r5, [sp, #0]
 800975a:	2301      	movs	r3, #1
 800975c:	fb08 7202 	mla	r2, r8, r2, r7
 8009760:	4658      	mov	r0, fp
 8009762:	f002 feed 	bl	800c540 <HAL_DMA2D_Start>
 8009766:	2800      	cmp	r0, #0
 8009768:	d1e7      	bne.n	800973a <BSP_LCD_DrawVLine+0xae>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 800976a:	4658      	mov	r0, fp
 800976c:	2119      	movs	r1, #25
 800976e:	f002 ff41 	bl	800c5f4 <HAL_DMA2D_PollForTransfer>
 8009772:	e7e2      	b.n	800973a <BSP_LCD_DrawVLine+0xae>
 8009774:	24005258 	.word	0x24005258
 8009778:	52001000 	.word	0x52001000
 800977c:	24005300 	.word	0x24005300
 8009780:	24005338 	.word	0x24005338

08009784 <DSI_IO_Write>:
  if(Size <= 1U)
 8009784:	2b01      	cmp	r3, #1
{
 8009786:	b530      	push	{r4, r5, lr}
 8009788:	460d      	mov	r5, r1
 800978a:	b083      	sub	sp, #12
  if(Size <= 1U)
 800978c:	d90a      	bls.n	80097a4 <DSI_IO_Write+0x20>
    if(HAL_DSI_LongWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 800978e:	9201      	str	r2, [sp, #4]
 8009790:	4601      	mov	r1, r0
 8009792:	9500      	str	r5, [sp, #0]
 8009794:	2239      	movs	r2, #57	; 0x39
 8009796:	480a      	ldr	r0, [pc, #40]	; (80097c0 <DSI_IO_Write+0x3c>)
 8009798:	f003 fb86 	bl	800cea8 <HAL_DSI_LongWrite>
 800979c:	b960      	cbnz	r0, 80097b8 <DSI_IO_Write+0x34>
  int32_t ret = BSP_ERROR_NONE;
 800979e:	2000      	movs	r0, #0
}
 80097a0:	b003      	add	sp, #12
 80097a2:	bd30      	pop	{r4, r5, pc}
    if(HAL_DSI_ShortWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 80097a4:	5cd4      	ldrb	r4, [r2, r3]
 80097a6:	460b      	mov	r3, r1
 80097a8:	2215      	movs	r2, #21
 80097aa:	4601      	mov	r1, r0
 80097ac:	9400      	str	r4, [sp, #0]
 80097ae:	4804      	ldr	r0, [pc, #16]	; (80097c0 <DSI_IO_Write+0x3c>)
 80097b0:	f003 fb4e 	bl	800ce50 <HAL_DSI_ShortWrite>
 80097b4:	2800      	cmp	r0, #0
 80097b6:	d0f2      	beq.n	800979e <DSI_IO_Write+0x1a>
      ret = BSP_ERROR_BUS_FAILURE;
 80097b8:	f06f 0007 	mvn.w	r0, #7
 80097bc:	e7f0      	b.n	80097a0 <DSI_IO_Write+0x1c>
 80097be:	bf00      	nop
 80097c0:	2400531c 	.word	0x2400531c

080097c4 <BSP_LCD_FillRect>:
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80097c4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
{
 80097c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80097cc:	0080      	lsls	r0, r0, #2
 80097ce:	4d31      	ldr	r5, [pc, #196]	; (8009894 <BSP_LCD_FillRect+0xd0>)
 80097d0:	4c31      	ldr	r4, [pc, #196]	; (8009898 <BSP_LCD_FillRect+0xd4>)
 80097d2:	2734      	movs	r7, #52	; 0x34
 80097d4:	eb05 0c00 	add.w	ip, r5, r0
{
 80097d8:	461e      	mov	r6, r3
 80097da:	4689      	mov	r9, r1
 80097dc:	b083      	sub	sp, #12
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80097de:	f8dc 3008 	ldr.w	r3, [ip, #8]
{
 80097e2:	4692      	mov	sl, r2
  switch(Lcd_Ctx[Instance].PixelFormat)
 80097e4:	f8dc 100c 	ldr.w	r1, [ip, #12]
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80097e8:	fb07 4303 	mla	r3, r7, r3, r4
 80097ec:	582d      	ldr	r5, [r5, r0]
  switch(Lcd_Ctx[Instance].PixelFormat)
 80097ee:	2902      	cmp	r1, #2
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80097f0:	f8dc 8010 	ldr.w	r8, [ip, #16]
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 80097f4:	eba5 0206 	sub.w	r2, r5, r6
{
 80097f8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80097fa:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
  switch(Lcd_Ctx[Instance].PixelFormat)
 80097fc:	d130      	bne.n	8009860 <BSP_LCD_FillRect+0x9c>
    input_color = CONVERTRGB5652ARGB8888(Color);
 80097fe:	f004 031f 	and.w	r3, r4, #31
 8009802:	f3c4 20c4 	ubfx	r0, r4, #11, #5
 8009806:	f3c4 1445 	ubfx	r4, r4, #5, #6
 800980a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 800980e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8009812:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
 8009816:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 800981a:	3317      	adds	r3, #23
 800981c:	eb04 1cc4 	add.w	ip, r4, r4, lsl #7
 8009820:	3017      	adds	r0, #23
 8009822:	099b      	lsrs	r3, r3, #6
 8009824:	eb04 044c 	add.w	r4, r4, ip, lsl #1
 8009828:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800982c:	0980      	lsrs	r0, r0, #6
 800982e:	3421      	adds	r4, #33	; 0x21
 8009830:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009834:	09a4      	lsrs	r4, r4, #6
 8009836:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 800983a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80098a0 <BSP_LCD_FillRect+0xdc>
 800983e:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
  hlcd_dma2d.Instance = DMA2D;
 8009842:	4b16      	ldr	r3, [pc, #88]	; (800989c <BSP_LCD_FillRect+0xd8>)
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8009844:	4658      	mov	r0, fp
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 8009846:	f8cb 1008 	str.w	r1, [fp, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 800984a:	f8cb 200c 	str.w	r2, [fp, #12]
  hlcd_dma2d.Instance = DMA2D;
 800984e:	e9cb 3c00 	strd	r3, ip, [fp]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8009852:	f002 fdad 	bl	800c3b0 <HAL_DMA2D_Init>
 8009856:	b128      	cbz	r0, 8009864 <BSP_LCD_FillRect+0xa0>
}
 8009858:	2000      	movs	r0, #0
 800985a:	b003      	add	sp, #12
 800985c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8009860:	2100      	movs	r1, #0
 8009862:	e7ea      	b.n	800983a <BSP_LCD_FillRect+0x76>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8009864:	2101      	movs	r1, #1
 8009866:	4658      	mov	r0, fp
 8009868:	f002 ffec 	bl	800c844 <HAL_DMA2D_ConfigLayer>
 800986c:	2800      	cmp	r0, #0
 800986e:	d1f3      	bne.n	8009858 <BSP_LCD_FillRect+0x94>
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8009870:	990c      	ldr	r1, [sp, #48]	; 0x30
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8009872:	fb0a 9205 	mla	r2, sl, r5, r9
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8009876:	4633      	mov	r3, r6
 8009878:	4658      	mov	r0, fp
 800987a:	9100      	str	r1, [sp, #0]
 800987c:	4621      	mov	r1, r4
 800987e:	fb08 7202 	mla	r2, r8, r2, r7
 8009882:	f002 fe5d 	bl	800c540 <HAL_DMA2D_Start>
 8009886:	2800      	cmp	r0, #0
 8009888:	d1e6      	bne.n	8009858 <BSP_LCD_FillRect+0x94>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 800988a:	4658      	mov	r0, fp
 800988c:	2119      	movs	r1, #25
 800988e:	f002 feb1 	bl	800c5f4 <HAL_DMA2D_PollForTransfer>
 8009892:	e7e1      	b.n	8009858 <BSP_LCD_FillRect+0x94>
 8009894:	24005300 	.word	0x24005300
 8009898:	24005258 	.word	0x24005258
 800989c:	52001000 	.word	0x52001000
 80098a0:	24005338 	.word	0x24005338

080098a4 <BSP_LCD_DrawHLine>:
{
 80098a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098a8:	469a      	mov	sl, r3
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 80098aa:	00c3      	lsls	r3, r0, #3
{
 80098ac:	4691      	mov	r9, r2
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 80098ae:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 8009990 <BSP_LCD_DrawHLine+0xec>
 80098b2:	1a1a      	subs	r2, r3, r0
  switch(Lcd_Ctx[Instance].PixelFormat)
 80098b4:	1a1b      	subs	r3, r3, r0
{
 80098b6:	460e      	mov	r6, r1
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 80098b8:	4451      	add	r1, sl
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 80098ba:	0092      	lsls	r2, r2, #2
 80098bc:	4f32      	ldr	r7, [pc, #200]	; (8009988 <BSP_LCD_DrawHLine+0xe4>)
 80098be:	f04f 0e34 	mov.w	lr, #52	; 0x34
{
 80098c2:	b083      	sub	sp, #12
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 80098c4:	f85c 5002 	ldr.w	r5, [ip, r2]
 80098c8:	eb0c 0802 	add.w	r8, ip, r2
  switch(Lcd_Ctx[Instance].PixelFormat)
 80098cc:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
{
 80098d0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 80098d2:	428d      	cmp	r5, r1
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 80098d4:	f8d8 2008 	ldr.w	r2, [r8, #8]
  switch(Lcd_Ctx[Instance].PixelFormat)
 80098d8:	f8dc 100c 	ldr.w	r1, [ip, #12]
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 80098dc:	fb0e 7702 	mla	r7, lr, r2, r7
    Length = Lcd_Ctx[Instance].XSize - Xpos;
 80098e0:	bf38      	it	cc
 80098e2:	eba5 0a06 	subcc.w	sl, r5, r6
  switch(Lcd_Ctx[Instance].PixelFormat)
 80098e6:	2902      	cmp	r1, #2
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 80098e8:	f8d8 8010 	ldr.w	r8, [r8, #16]
 80098ec:	6dff      	ldr	r7, [r7, #92]	; 0x5c
  switch(Lcd_Ctx[Instance].PixelFormat)
 80098ee:	d131      	bne.n	8009954 <BSP_LCD_DrawHLine+0xb0>
    input_color = CONVERTRGB5652ARGB8888(Color);
 80098f0:	f004 021f 	and.w	r2, r4, #31
 80098f4:	f3c4 20c4 	ubfx	r0, r4, #11, #5
 80098f8:	f3c4 1445 	ubfx	r4, r4, #5, #6
 80098fc:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8009900:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8009904:	ebc2 1342 	rsb	r3, r2, r2, lsl #5
 8009908:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 800990c:	3317      	adds	r3, #23
 800990e:	eb04 12c4 	add.w	r2, r4, r4, lsl #7
 8009912:	3017      	adds	r0, #23
 8009914:	099b      	lsrs	r3, r3, #6
 8009916:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 800991a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800991e:	0980      	lsrs	r0, r0, #6
 8009920:	3421      	adds	r4, #33	; 0x21
 8009922:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009926:	09a4      	lsrs	r4, r4, #6
 8009928:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 800992c:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009994 <BSP_LCD_DrawHLine+0xf0>
 8009930:	f44f 3040 	mov.w	r0, #196608	; 0x30000
  hlcd_dma2d.Init.OutputOffset = OffLine;
 8009934:	2200      	movs	r2, #0
  hlcd_dma2d.Instance = DMA2D;
 8009936:	4b15      	ldr	r3, [pc, #84]	; (800998c <BSP_LCD_DrawHLine+0xe8>)
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 8009938:	e9cb 0101 	strd	r0, r1, [fp, #4]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800993c:	4658      	mov	r0, fp
  hlcd_dma2d.Init.OutputOffset = OffLine;
 800993e:	f8cb 200c 	str.w	r2, [fp, #12]
  hlcd_dma2d.Instance = DMA2D;
 8009942:	f8cb 3000 	str.w	r3, [fp]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8009946:	f002 fd33 	bl	800c3b0 <HAL_DMA2D_Init>
 800994a:	b128      	cbz	r0, 8009958 <BSP_LCD_DrawHLine+0xb4>
}
 800994c:	2000      	movs	r0, #0
 800994e:	b003      	add	sp, #12
 8009950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8009954:	2100      	movs	r1, #0
 8009956:	e7e9      	b.n	800992c <BSP_LCD_DrawHLine+0x88>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8009958:	2101      	movs	r1, #1
 800995a:	4658      	mov	r0, fp
 800995c:	f002 ff72 	bl	800c844 <HAL_DMA2D_ConfigLayer>
 8009960:	2800      	cmp	r0, #0
 8009962:	d1f3      	bne.n	800994c <BSP_LCD_DrawHLine+0xa8>
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8009964:	fb09 6205 	mla	r2, r9, r5, r6
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8009968:	2501      	movs	r5, #1
 800996a:	4653      	mov	r3, sl
 800996c:	4621      	mov	r1, r4
 800996e:	fb08 7202 	mla	r2, r8, r2, r7
 8009972:	4658      	mov	r0, fp
 8009974:	9500      	str	r5, [sp, #0]
 8009976:	f002 fde3 	bl	800c540 <HAL_DMA2D_Start>
 800997a:	2800      	cmp	r0, #0
 800997c:	d1e6      	bne.n	800994c <BSP_LCD_DrawHLine+0xa8>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 800997e:	4658      	mov	r0, fp
 8009980:	2119      	movs	r1, #25
 8009982:	f002 fe37 	bl	800c5f4 <HAL_DMA2D_PollForTransfer>
 8009986:	e7e1      	b.n	800994c <BSP_LCD_DrawHLine+0xa8>
 8009988:	24005258 	.word	0x24005258
 800998c:	52001000 	.word	0x52001000
 8009990:	24005300 	.word	0x24005300
 8009994:	24005338 	.word	0x24005338

08009998 <MX_DSIHOST_DSI_Init>:
  hdsi->Instance = DSI;
 8009998:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
{
 800999c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  hdsi->Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 80099a0:	2700      	movs	r7, #0
{
 80099a2:	b09e      	sub	sp, #120	; 0x78
  hdsi->Init.TXEscapeCkdiv = 4;
 80099a4:	2604      	movs	r6, #4
  hdsi->Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 80099a6:	2501      	movs	r5, #1
  hdsi->Instance = DSI;
 80099a8:	f8c0 c000 	str.w	ip, [r0]
  PLLInit.PLLNDIV = 100;
 80099ac:	f04f 0e64 	mov.w	lr, #100	; 0x64
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 80099b0:	f04f 0c05 	mov.w	ip, #5
{
 80099b4:	4688      	mov	r8, r1
  hdsi->Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 80099b6:	6047      	str	r7, [r0, #4]
  if (HAL_DSI_Init(hdsi, &PLLInit) != HAL_OK)
 80099b8:	4669      	mov	r1, sp
  hdsi->Init.TXEscapeCkdiv = 4;
 80099ba:	6086      	str	r6, [r0, #8]
{
 80099bc:	4604      	mov	r4, r0
  hdsi->Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 80099be:	60c5      	str	r5, [r0, #12]
{
 80099c0:	4691      	mov	r9, r2
 80099c2:	469a      	mov	sl, r3
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 80099c4:	9702      	str	r7, [sp, #8]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 80099c6:	e9cd ec00 	strd	lr, ip, [sp]
  if (HAL_DSI_Init(hdsi, &PLLInit) != HAL_OK)
 80099ca:	f002 ffa5 	bl	800c918 <HAL_DSI_Init>
 80099ce:	b118      	cbz	r0, 80099d8 <MX_DSIHOST_DSI_Init+0x40>
    return HAL_ERROR;
 80099d0:	4628      	mov	r0, r5
}
 80099d2:	b01e      	add	sp, #120	; 0x78
 80099d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 80099d8:	4923      	ldr	r1, [pc, #140]	; (8009a68 <MX_DSIHOST_DSI_Init+0xd0>)
 80099da:	f24f 4224 	movw	r2, #62500	; 0xf424
 80099de:	4603      	mov	r3, r0
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 80099e0:	4620      	mov	r0, r4
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 80099e2:	fb02 1208 	mla	r2, r2, r8, r1
 80099e6:	4921      	ldr	r1, [pc, #132]	; (8009a6c <MX_DSIHOST_DSI_Init+0xd4>)
  VidCfg.Mode = DSI_VID_MODE_BURST;
 80099e8:	2402      	movs	r4, #2
  VidCfg.VerticalBackPorch = OTM8009A_480X800_VBP;
 80099ea:	270f      	movs	r7, #15
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 80099ec:	fba1 1202 	umull	r1, r2, r1, r2
  VidCfg.VerticalFrontPorch = OTM8009A_480X800_VFP;
 80099f0:	2110      	movs	r1, #16
  VidCfg.VirtualChannelID = 0;
 80099f2:	9303      	str	r3, [sp, #12]
  VidCfg.NullPacketSize = 0xFFFU;
 80099f4:	f640 7eff 	movw	lr, #4095	; 0xfff
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 80099f8:	0b52      	lsrs	r2, r2, #13
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 80099fa:	9305      	str	r3, [sp, #20]
  VidCfg.HorizontalBackPorch = (OTM8009A_480X800_HBP * 62500U)/27429U;
 80099fc:	f04f 0c4d 	mov.w	ip, #77	; 0x4d
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8009a00:	930a      	str	r3, [sp, #40]	; 0x28
  VidCfg.HorizontalSyncActive = (OTM8009A_480X800_HSYNC * 62500U)/27429U;
 8009a02:	960d      	str	r6, [sp, #52]	; 0x34
  VidCfg.VerticalSyncActive = OTM8009A_480X800_VSYNC;
 8009a04:	9510      	str	r5, [sp, #64]	; 0x40
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 8009a06:	f44f 4500 	mov.w	r5, #32768	; 0x8000
  VidCfg.VerticalActive = Height;
 8009a0a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
  VidCfg.LPVerticalActiveEnable        = DSI_LP_VACT_ENABLE;
 8009a0e:	f44f 6900 	mov.w	r9, #2048	; 0x800
  VidCfg.FrameBTAAcknowledgeEnable     = DSI_FBTAA_DISABLE;
 8009a12:	931d      	str	r3, [sp, #116]	; 0x74
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 8009a14:	920f      	str	r2, [sp, #60]	; 0x3c
  VidCfg.LPVerticalBackPorchEnable     = DSI_LP_VBP_ENABLE;
 8009a16:	f44f 7200 	mov.w	r2, #512	; 0x200
  VidCfg.Mode = DSI_VID_MODE_BURST;
 8009a1a:	9406      	str	r4, [sp, #24]
  VidCfg.LPVerticalFrontPorchEnable    = DSI_LP_VFP_ENABLE;
 8009a1c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  VidCfg.ColorCoding = PixelFormat;
 8009a20:	f8cd a010 	str.w	sl, [sp, #16]
  VidCfg.NullPacketSize = 0xFFFU;
 8009a24:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
  VidCfg.HorizontalBackPorch = (OTM8009A_480X800_HBP * 62500U)/27429U;
 8009a28:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 8009a2c:	9514      	str	r5, [sp, #80]	; 0x50
  VidCfg.NumberOfChunks = 0;
 8009a2e:	e9cd 8307 	strd	r8, r3, [sp, #28]
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8009a32:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  VidCfg.LPVACTLargestPacketSize = 4;
 8009a36:	e9cd 6615 	strd	r6, r6, [sp, #84]	; 0x54
  VidCfg.LPVerticalSyncActiveEnable    = DSI_LP_VSYNC_ENABLE;
 8009a3a:	f44f 7380 	mov.w	r3, #256	; 0x100
  VidCfg.LPHorizontalFrontPorchEnable  = DSI_LP_HFP_ENABLE;
 8009a3e:	f44f 5600 	mov.w	r6, #8192	; 0x2000
  VidCfg.LPHorizontalBackPorchEnable   = DSI_LP_HBP_ENABLE;
 8009a42:	f44f 5880 	mov.w	r8, #4096	; 0x1000
  VidCfg.VerticalFrontPorch = OTM8009A_480X800_VFP;
 8009a46:	e9cd 7111 	strd	r7, r1, [sp, #68]	; 0x44
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 8009a4a:	a903      	add	r1, sp, #12
  VidCfg.LPHorizontalBackPorchEnable   = DSI_LP_HBP_ENABLE;
 8009a4c:	e9cd 6817 	strd	r6, r8, [sp, #92]	; 0x5c
  VidCfg.LPVerticalFrontPorchEnable    = DSI_LP_VFP_ENABLE;
 8009a50:	e9cd 9419 	strd	r9, r4, [sp, #100]	; 0x64
  VidCfg.LPVerticalSyncActiveEnable    = DSI_LP_VSYNC_ENABLE;
 8009a54:	e9cd 231b 	strd	r2, r3, [sp, #108]	; 0x6c
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 8009a58:	f003 f896 	bl	800cb88 <HAL_DSI_ConfigVideoMode>
    return HAL_ERROR;
 8009a5c:	3000      	adds	r0, #0
 8009a5e:	bf18      	it	ne
 8009a60:	2001      	movne	r0, #1
}
 8009a62:	b01e      	add	sp, #120	; 0x78
 8009a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a68:	0042c1d8 	.word	0x0042c1d8
 8009a6c:	4c751ce3 	.word	0x4c751ce3

08009a70 <MX_LTDC_Init>:
{
 8009a70:	b470      	push	{r4, r5, r6}
  hltdc->Init.AccumulatedActiveW = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP - 1;
 8009a72:	f101 0523 	add.w	r5, r1, #35	; 0x23
  hltdc->Instance = LTDC;
 8009a76:	4c0d      	ldr	r4, [pc, #52]	; (8009aac <MX_LTDC_Init+0x3c>)
  hltdc->Init.TotalWidth         = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP - 1;
 8009a78:	3145      	adds	r1, #69	; 0x45
  hltdc->Init.AccumulatedHBP     = OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP - 1;
 8009a7a:	2623      	movs	r6, #35	; 0x23
  hltdc->Instance = LTDC;
 8009a7c:	6004      	str	r4, [r0, #0]
  hltdc->Init.HorizontalSync     = OTM8009A_480X800_HSYNC - 1;
 8009a7e:	2401      	movs	r4, #1
  hltdc->Init.AccumulatedActiveW = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP - 1;
 8009a80:	6245      	str	r5, [r0, #36]	; 0x24
  hltdc->Init.AccumulatedVBP     = OTM8009A_480X800_VSYNC + OTM8009A_480X800_VBP - 1;
 8009a82:	250f      	movs	r5, #15
  hltdc->Init.TotalWidth         = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP - 1;
 8009a84:	62c1      	str	r1, [r0, #44]	; 0x2c
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8009a86:	2100      	movs	r1, #0
  hltdc->Init.HorizontalSync     = OTM8009A_480X800_HSYNC - 1;
 8009a88:	6144      	str	r4, [r0, #20]
  hltdc->Init.AccumulatedActiveH = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP - 1;
 8009a8a:	1954      	adds	r4, r2, r5
  hltdc->Init.TotalHeigh         = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP + OTM8009A_480X800_VFP - 1;
 8009a8c:	321f      	adds	r2, #31
  hltdc->Init.AccumulatedHBP     = OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP - 1;
 8009a8e:	61c6      	str	r6, [r0, #28]
  hltdc->Init.AccumulatedVBP     = OTM8009A_480X800_VSYNC + OTM8009A_480X800_VBP - 1;
 8009a90:	6205      	str	r5, [r0, #32]
  hltdc->Init.AccumulatedActiveH = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP - 1;
 8009a92:	6284      	str	r4, [r0, #40]	; 0x28
  hltdc->Init.Backcolor.Blue  = 0x00;
 8009a94:	8681      	strh	r1, [r0, #52]	; 0x34
  hltdc->Init.Backcolor.Green = 0x00;
 8009a96:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
  hltdc->Init.TotalHeigh         = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP + OTM8009A_480X800_VFP - 1;
 8009a9a:	6302      	str	r2, [r0, #48]	; 0x30
  hltdc->Init.VerticalSync       = OTM8009A_480X800_VSYNC - 1;
 8009a9c:	6181      	str	r1, [r0, #24]
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8009a9e:	e9c0 1101 	strd	r1, r1, [r0, #4]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8009aa2:	e9c0 1103 	strd	r1, r1, [r0, #12]
}
 8009aa6:	bc70      	pop	{r4, r5, r6}
  return HAL_LTDC_Init(hltdc);
 8009aa8:	f004 b90e 	b.w	800dcc8 <HAL_LTDC_Init>
 8009aac:	50001000 	.word	0x50001000

08009ab0 <MX_LTDC_ConfigLayer>:
{
 8009ab0:	4613      	mov	r3, r2
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8009ab2:	460a      	mov	r2, r1
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8009ab4:	f04f 0c07 	mov.w	ip, #7
  pLayerCfg.WindowY0 = Config->Y0;
 8009ab8:	6899      	ldr	r1, [r3, #8]
{
 8009aba:	b5f0      	push	{r4, r5, r6, r7, lr}
  pLayerCfg.WindowX1 = Config->X1;
 8009abc:	e9d3 4500 	ldrd	r4, r5, [r3]
{
 8009ac0:	b08f      	sub	sp, #60	; 0x3c
  pLayerCfg.Alpha = 255;
 8009ac2:	26ff      	movs	r6, #255	; 0xff
  pLayerCfg.Alpha0 = 0;
 8009ac4:	f44f 67c0 	mov.w	r7, #1536	; 0x600
  pLayerCfg.WindowX0 = Config->X0;
 8009ac8:	9400      	str	r4, [sp, #0]
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 8009aca:	1b2c      	subs	r4, r5, r4
  pLayerCfg.WindowY0 = Config->Y0;
 8009acc:	9102      	str	r1, [sp, #8]
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 8009ace:	940a      	str	r4, [sp, #40]	; 0x28
  pLayerCfg.WindowY1 = Config->Y1;
 8009ad0:	68dc      	ldr	r4, [r3, #12]
  pLayerCfg.WindowX1 = Config->X1;
 8009ad2:	9501      	str	r5, [sp, #4]
  pLayerCfg.Backcolor.Blue = 0;
 8009ad4:	2500      	movs	r5, #0
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 8009ad6:	1a61      	subs	r1, r4, r1
  pLayerCfg.Alpha = 255;
 8009ad8:	9605      	str	r6, [sp, #20]
  pLayerCfg.Alpha0 = 0;
 8009ada:	2600      	movs	r6, #0
  pLayerCfg.WindowY1 = Config->Y1;
 8009adc:	9403      	str	r4, [sp, #12]
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 8009ade:	910b      	str	r1, [sp, #44]	; 0x2c
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8009ae0:	f8cd c020 	str.w	ip, [sp, #32]
  pLayerCfg.Backcolor.Blue = 0;
 8009ae4:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
  pLayerCfg.Backcolor.Green = 0;
 8009ae8:	f88d 5032 	strb.w	r5, [sp, #50]	; 0x32
  pLayerCfg.FBStartAdress = Config->Address;
 8009aec:	e9d3 1304 	ldrd	r1, r3, [r3, #16]
  pLayerCfg.Alpha0 = 0;
 8009af0:	e9cd 6706 	strd	r6, r7, [sp, #24]
  pLayerCfg.PixelFormat = Config->PixelFormat;
 8009af4:	9104      	str	r1, [sp, #16]
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8009af6:	4669      	mov	r1, sp
  pLayerCfg.FBStartAdress = Config->Address;
 8009af8:	9309      	str	r3, [sp, #36]	; 0x24
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8009afa:	f004 f9bf 	bl	800de7c <HAL_LTDC_ConfigLayer>
}
 8009afe:	b00f      	add	sp, #60	; 0x3c
 8009b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b02:	bf00      	nop

08009b04 <MX_LTDC_ClockConfig>:
{
 8009b04:	b530      	push	{r4, r5, lr}
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 8009b06:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
{
 8009b0a:	b0b1      	sub	sp, #196	; 0xc4
  PeriphClkInitStruct.PLL3.PLL3M      = 5U;
 8009b0c:	2005      	movs	r0, #5
  PeriphClkInitStruct.PLL3.PLL3P      = 2U;
 8009b0e:	2202      	movs	r2, #2
  PeriphClkInitStruct.PLL3.PLL3RGE    = RCC_PLLCFGR_PLL3RGE_2;
 8009b10:	f44f 6100 	mov.w	r1, #2048	; 0x800
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 8009b14:	9300      	str	r3, [sp, #0]
  PeriphClkInitStruct.PLL3.PLL3N      = 132U;
 8009b16:	2584      	movs	r5, #132	; 0x84
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8009b18:	2300      	movs	r3, #0
  PeriphClkInitStruct.PLL3.PLL3R      = 24U;
 8009b1a:	2418      	movs	r4, #24
  PeriphClkInitStruct.PLL3.PLL3M      = 5U;
 8009b1c:	9009      	str	r0, [sp, #36]	; 0x24
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8009b1e:	4668      	mov	r0, sp
  PeriphClkInitStruct.PLL3.PLL3FRACN  = 0U;
 8009b20:	9310      	str	r3, [sp, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3P      = 2U;
 8009b22:	e9cd 520a 	strd	r5, r2, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3R      = 24U;
 8009b26:	e9cd 240c 	strd	r2, r4, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8009b2a:	e9cd 130e 	strd	r1, r3, [sp, #56]	; 0x38
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8009b2e:	f005 ff73 	bl	800fa18 <HAL_RCCEx_PeriphCLKConfig>
}
 8009b32:	b031      	add	sp, #196	; 0xc4
 8009b34:	bd30      	pop	{r4, r5, pc}
 8009b36:	bf00      	nop

08009b38 <BSP_LCD_InitEx>:
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8009b38:	2901      	cmp	r1, #1
 8009b3a:	f200 8150 	bhi.w	8009dde <BSP_LCD_InitEx+0x2a6>
 8009b3e:	3000      	adds	r0, #0
 8009b40:	bf18      	it	ne
 8009b42:	2001      	movne	r0, #1
 8009b44:	2800      	cmp	r0, #0
 8009b46:	f040 814a 	bne.w	8009dde <BSP_LCD_InitEx+0x2a6>
{
 8009b4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_RGB888)))
 8009b4e:	1e54      	subs	r4, r2, #1
{
 8009b50:	b097      	sub	sp, #92	; 0x5c
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8009b52:	2c01      	cmp	r4, #1
 8009b54:	f200 8140 	bhi.w	8009dd8 <BSP_LCD_InitEx+0x2a0>
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8009b58:	2a02      	cmp	r2, #2
 8009b5a:	f000 810b 	beq.w	8009d74 <BSP_LCD_InitEx+0x23c>
      ctrl_pixel_format = OTM8009A_FORMAT_RGB888;
 8009b5e:	9001      	str	r0, [sp, #4]
      dsi_pixel_format = DSI_RGB888;
 8009b60:	2405      	movs	r4, #5
      Lcd_Ctx[Instance].BppFactor = 4U;
 8009b62:	2004      	movs	r0, #4
      dsi_pixel_format = DSI_RGB888;
 8009b64:	9402      	str	r4, [sp, #8]
  LCD_RESET_GPIO_CLK_ENABLE();
 8009b66:	4c9f      	ldr	r4, [pc, #636]	; (8009de4 <BSP_LCD_InitEx+0x2ac>)
 8009b68:	461e      	mov	r6, r3
 8009b6a:	f8df 82b0 	ldr.w	r8, [pc, #688]	; 8009e1c <BSP_LCD_InitEx+0x2e4>
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b6e:	f04f 0c03 	mov.w	ip, #3
 8009b72:	9103      	str	r1, [sp, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8009b74:	2501      	movs	r5, #1
    Lcd_Ctx[Instance].XSize  = Width;
 8009b76:	f8c8 3000 	str.w	r3, [r8]
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 8009b7a:	2708      	movs	r7, #8
  LCD_RESET_GPIO_CLK_ENABLE();
 8009b7c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 8009b80:	a910      	add	r1, sp, #64	; 0x40
 8009b82:	f8c8 0010 	str.w	r0, [r8, #16]
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 8009b86:	f44f 5980 	mov.w	r9, #4096	; 0x1000
  LCD_RESET_GPIO_CLK_ENABLE();
 8009b8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 8009b8e:	f8c8 200c 	str.w	r2, [r8, #12]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 8009b92:	4895      	ldr	r0, [pc, #596]	; (8009de8 <BSP_LCD_InitEx+0x2b0>)
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8009b94:	f04f 0b02 	mov.w	fp, #2
  LCD_RESET_GPIO_CLK_ENABLE();
 8009b98:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Pin       = LCD_TE_PIN;
 8009b9c:	f04f 0a04 	mov.w	sl, #4
  LCD_RESET_GPIO_CLK_ENABLE();
 8009ba0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    Lcd_Ctx[Instance].YSize  = Height;
 8009ba4:	9a20      	ldr	r2, [sp, #128]	; 0x80
  LCD_RESET_GPIO_CLK_ENABLE();
 8009ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    Lcd_Ctx[Instance].YSize  = Height;
 8009baa:	f8c8 2004 	str.w	r2, [r8, #4]
  LCD_RESET_GPIO_CLK_ENABLE();
 8009bae:	930a      	str	r3, [sp, #40]	; 0x28
 8009bb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009bb2:	e9cd 5c12 	strd	r5, ip, [sp, #72]	; 0x48
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8009bb6:	e9cd 7510 	strd	r7, r5, [sp, #64]	; 0x40
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 8009bba:	f003 fa93 	bl	800d0e4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_RESET);
 8009bbe:	4639      	mov	r1, r7
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	4889      	ldr	r0, [pc, #548]	; (8009de8 <BSP_LCD_InitEx+0x2b0>)
 8009bc4:	f003 fc88 	bl	800d4d8 <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 8009bc8:	2014      	movs	r0, #20
 8009bca:	f000 fd1f 	bl	800a60c <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_SET);/* Deactivate XRES */
 8009bce:	462a      	mov	r2, r5
 8009bd0:	4639      	mov	r1, r7
 8009bd2:	4885      	ldr	r0, [pc, #532]	; (8009de8 <BSP_LCD_InitEx+0x2b0>)
 8009bd4:	f003 fc80 	bl	800d4d8 <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 8009bd8:	200a      	movs	r0, #10
 8009bda:	f000 fd17 	bl	800a60c <HAL_Delay>
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8009bde:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8009be2:	2700      	movs	r7, #0
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8009be4:	a910      	add	r1, sp, #64	; 0x40
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8009be6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8009bea:	4880      	ldr	r0, [pc, #512]	; (8009dec <BSP_LCD_InitEx+0x2b4>)
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8009bec:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8009bf0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8009bf4:	9511      	str	r5, [sp, #68]	; 0x44
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8009bf6:	f403 7300 	and.w	r3, r3, #512	; 0x200
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 8009bfa:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8009bfe:	9712      	str	r7, [sp, #72]	; 0x48
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8009c00:	9308      	str	r3, [sp, #32]
 8009c02:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8009c04:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8009c08:	f003 fa6c 	bl	800d0e4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8009c0c:	462a      	mov	r2, r5
 8009c0e:	4649      	mov	r1, r9
 8009c10:	4876      	ldr	r0, [pc, #472]	; (8009dec <BSP_LCD_InitEx+0x2b4>)
 8009c12:	f003 fc61 	bl	800d4d8 <HAL_GPIO_WritePin>
  LCD_TE_GPIO_CLK_ENABLE();
 8009c16:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 8009c1a:	a910      	add	r1, sp, #64	; 0x40
 8009c1c:	4873      	ldr	r0, [pc, #460]	; (8009dec <BSP_LCD_InitEx+0x2b4>)
  LCD_TE_GPIO_CLK_ENABLE();
 8009c1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    hlcd_ltdc.Instance = LTDC;
 8009c22:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 8009e20 <BSP_LCD_InitEx+0x2e8>
  LCD_TE_GPIO_CLK_ENABLE();
 8009c26:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8009c2a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8009c2e:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  LCD_TE_GPIO_CLK_ENABLE();
 8009c32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009c36:	9309      	str	r3, [sp, #36]	; 0x24
 8009c38:	9b09      	ldr	r3, [sp, #36]	; 0x24
  gpio_init_structure.Pin       = LCD_TE_PIN;
 8009c3a:	e9cd a710 	strd	sl, r7, [sp, #64]	; 0x40
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 8009c3e:	f003 fa51 	bl	800d0e4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_TE_GPIO_PORT, LCD_TE_PIN, GPIO_PIN_SET);
 8009c42:	462a      	mov	r2, r5
 8009c44:	4651      	mov	r1, sl
 8009c46:	4869      	ldr	r0, [pc, #420]	; (8009dec <BSP_LCD_InitEx+0x2b4>)
 8009c48:	f003 fc46 	bl	800d4d8 <HAL_GPIO_WritePin>
  HAL_NVIC_SetPriority(LTDC_IRQn, 0x0F, 0);
 8009c4c:	463a      	mov	r2, r7
 8009c4e:	210f      	movs	r1, #15
 8009c50:	2058      	movs	r0, #88	; 0x58
 8009c52:	f000 fd0f 	bl	800a674 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8009c56:	2058      	movs	r0, #88	; 0x58
 8009c58:	f000 fd42 	bl	800a6e0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2D_IRQn, 0x0F, 0);
 8009c5c:	463a      	mov	r2, r7
 8009c5e:	210f      	movs	r1, #15
 8009c60:	205a      	movs	r0, #90	; 0x5a
 8009c62:	f000 fd07 	bl	800a674 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8009c66:	205a      	movs	r0, #90	; 0x5a
 8009c68:	f000 fd3a 	bl	800a6e0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DSI_IRQn, 0x0F, 0);
 8009c6c:	463a      	mov	r2, r7
 8009c6e:	210f      	movs	r1, #15
 8009c70:	207b      	movs	r0, #123	; 0x7b
 8009c72:	f000 fcff 	bl	800a674 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8009c76:	207b      	movs	r0, #123	; 0x7b
 8009c78:	f000 fd32 	bl	800a6e0 <HAL_NVIC_EnableIRQ>
    hlcd_dma2d.Instance = DMA2D;
 8009c7c:	4f5c      	ldr	r7, [pc, #368]	; (8009df0 <BSP_LCD_InitEx+0x2b8>)
 8009c7e:	4a5d      	ldr	r2, [pc, #372]	; (8009df4 <BSP_LCD_InitEx+0x2bc>)
    hlcd_dsi.Instance = DSI;
 8009c80:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8009c84:	4d5c      	ldr	r5, [pc, #368]	; (8009df8 <BSP_LCD_InitEx+0x2c0>)
    hlcd_dma2d.Instance = DMA2D;
 8009c86:	6017      	str	r7, [r2, #0]
    __HAL_RCC_LTDC_CLK_ENABLE();
 8009c88:	f8d4 70e4 	ldr.w	r7, [r4, #228]	; 0xe4
    hlcd_ltdc.Instance = LTDC;
 8009c8c:	485b      	ldr	r0, [pc, #364]	; (8009dfc <BSP_LCD_InitEx+0x2c4>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 8009c8e:	f047 0708 	orr.w	r7, r7, #8
    hlcd_dsi.Instance = DSI;
 8009c92:	6029      	str	r1, [r5, #0]
    hlcd_ltdc.Instance = LTDC;
 8009c94:	f8c9 0000 	str.w	r0, [r9]
    if(MX_DSIHOST_DSI_Init(&hlcd_dsi, Width, Height, dsi_pixel_format) != HAL_OK)
 8009c98:	4631      	mov	r1, r6
 8009c9a:	9b02      	ldr	r3, [sp, #8]
 8009c9c:	4628      	mov	r0, r5
 8009c9e:	9a20      	ldr	r2, [sp, #128]	; 0x80
    __HAL_RCC_LTDC_CLK_ENABLE();
 8009ca0:	f8c4 70e4 	str.w	r7, [r4, #228]	; 0xe4
 8009ca4:	f8d4 70e4 	ldr.w	r7, [r4, #228]	; 0xe4
 8009ca8:	f007 0708 	and.w	r7, r7, #8
 8009cac:	9707      	str	r7, [sp, #28]
 8009cae:	9f07      	ldr	r7, [sp, #28]
    __HAL_RCC_LTDC_FORCE_RESET();
 8009cb0:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
 8009cb4:	f047 0708 	orr.w	r7, r7, #8
 8009cb8:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 8009cbc:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
 8009cc0:	f027 0708 	bic.w	r7, r7, #8
 8009cc4:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8009cc8:	f8d4 70d4 	ldr.w	r7, [r4, #212]	; 0xd4
 8009ccc:	f047 0710 	orr.w	r7, r7, #16
 8009cd0:	f8c4 70d4 	str.w	r7, [r4, #212]	; 0xd4
 8009cd4:	f8d4 70d4 	ldr.w	r7, [r4, #212]	; 0xd4
 8009cd8:	f007 0710 	and.w	r7, r7, #16
 8009cdc:	9706      	str	r7, [sp, #24]
 8009cde:	9f06      	ldr	r7, [sp, #24]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8009ce0:	6fe7      	ldr	r7, [r4, #124]	; 0x7c
 8009ce2:	f047 0710 	orr.w	r7, r7, #16
 8009ce6:	67e7      	str	r7, [r4, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8009ce8:	6fe7      	ldr	r7, [r4, #124]	; 0x7c
 8009cea:	f027 0710 	bic.w	r7, r7, #16
 8009cee:	67e7      	str	r7, [r4, #124]	; 0x7c
    __HAL_RCC_DSI_CLK_ENABLE();
 8009cf0:	f8d4 70e4 	ldr.w	r7, [r4, #228]	; 0xe4
 8009cf4:	f047 0710 	orr.w	r7, r7, #16
 8009cf8:	f8c4 70e4 	str.w	r7, [r4, #228]	; 0xe4
 8009cfc:	f8d4 70e4 	ldr.w	r7, [r4, #228]	; 0xe4
 8009d00:	f007 0710 	and.w	r7, r7, #16
 8009d04:	9705      	str	r7, [sp, #20]
 8009d06:	9f05      	ldr	r7, [sp, #20]
    __HAL_RCC_DSI_FORCE_RESET();
 8009d08:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
 8009d0c:	f047 0710 	orr.w	r7, r7, #16
 8009d10:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
    __HAL_RCC_DSI_RELEASE_RESET();
 8009d14:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
 8009d18:	f027 0710 	bic.w	r7, r7, #16
 8009d1c:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
    if(MX_DSIHOST_DSI_Init(&hlcd_dsi, Width, Height, dsi_pixel_format) != HAL_OK)
 8009d20:	f7ff fe3a 	bl	8009998 <MX_DSIHOST_DSI_Init>
 8009d24:	2800      	cmp	r0, #0
 8009d26:	d152      	bne.n	8009dce <BSP_LCD_InitEx+0x296>
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 8009d28:	4648      	mov	r0, r9
 8009d2a:	f7ff feeb 	bl	8009b04 <MX_LTDC_ClockConfig>
 8009d2e:	2800      	cmp	r0, #0
 8009d30:	d14d      	bne.n	8009dce <BSP_LCD_InitEx+0x296>
     if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 8009d32:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009d34:	4631      	mov	r1, r6
 8009d36:	4648      	mov	r0, r9
 8009d38:	f7ff fe9a 	bl	8009a70 <MX_LTDC_Init>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	2800      	cmp	r0, #0
 8009d40:	d145      	bne.n	8009dce <BSP_LCD_InitEx+0x296>
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8009d42:	4619      	mov	r1, r3
      config.Y0          = 0;
 8009d44:	9312      	str	r3, [sp, #72]	; 0x48
      config.Address     = LCD_LAYER_0_ADDRESS;
 8009d46:	f04f 4450 	mov.w	r4, #3489660928	; 0xd0000000
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8009d4a:	aa10      	add	r2, sp, #64	; 0x40
 8009d4c:	4648      	mov	r0, r9
      config.X1          = Width;
 8009d4e:	e9cd 3610 	strd	r3, r6, [sp, #64]	; 0x40
      config.Y1          = Height;
 8009d52:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009d54:	9313      	str	r3, [sp, #76]	; 0x4c
      config.PixelFormat = ltdc_pixel_format;
 8009d56:	9b01      	ldr	r3, [sp, #4]
      config.Address     = LCD_LAYER_0_ADDRESS;
 8009d58:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8009d5c:	f7ff fea8 	bl	8009ab0 <MX_LTDC_ConfigLayer>
 8009d60:	4604      	mov	r4, r0
 8009d62:	b158      	cbz	r0, 8009d7c <BSP_LCD_InitEx+0x244>
        ret = BSP_ERROR_PERIPH_FAILURE;
 8009d64:	f06f 0003 	mvn.w	r0, #3
    Lcd_Ctx[Instance].ReloadEnable = 1U;
 8009d68:	2301      	movs	r3, #1
 8009d6a:	f8c8 3018 	str.w	r3, [r8, #24]
}
 8009d6e:	b017      	add	sp, #92	; 0x5c
 8009d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      dsi_pixel_format = DSI_RGB565;
 8009d74:	9002      	str	r0, [sp, #8]
      Lcd_Ctx[Instance].BppFactor = 2U;
 8009d76:	4610      	mov	r0, r2
      ctrl_pixel_format = OTM8009A_FORMAT_RBG565;
 8009d78:	9201      	str	r2, [sp, #4]
 8009d7a:	e6f4      	b.n	8009b66 <BSP_LCD_InitEx+0x2e>
        (void)HAL_DSI_Start(&hlcd_dsi);
 8009d7c:	4628      	mov	r0, r5
  IOCtx.Address     = 0;
  IOCtx.GetTick     = BSP_GetTick;
  IOCtx.WriteReg    = DSI_IO_Write;
  IOCtx.ReadReg     = DSI_IO_Read;

  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 8009d7e:	4e20      	ldr	r6, [pc, #128]	; (8009e00 <BSP_LCD_InitEx+0x2c8>)
        (void)HAL_DSI_Start(&hlcd_dsi);
 8009d80:	f003 f83e 	bl	800ce00 <HAL_DSI_Start>
        (void)HAL_DSI_ConfigFlowControl(&hlcd_dsi, DSI_FLOW_CONTROL_BTA);
 8009d84:	4651      	mov	r1, sl
 8009d86:	4628      	mov	r0, r5
 8009d88:	f003 f826 	bl	800cdd8 <HAL_DSI_ConfigFlowControl>
  IOCtx.GetTick     = BSP_GetTick;
 8009d8c:	4b1d      	ldr	r3, [pc, #116]	; (8009e04 <BSP_LCD_InitEx+0x2cc>)
  IOCtx.WriteReg    = DSI_IO_Write;
 8009d8e:	4a1e      	ldr	r2, [pc, #120]	; (8009e08 <BSP_LCD_InitEx+0x2d0>)
  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 8009d90:	4630      	mov	r0, r6
  IOCtx.GetTick     = BSP_GetTick;
 8009d92:	930f      	str	r3, [sp, #60]	; 0x3c
  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 8009d94:	a90c      	add	r1, sp, #48	; 0x30
  IOCtx.ReadReg     = DSI_IO_Read;
 8009d96:	4b1d      	ldr	r3, [pc, #116]	; (8009e0c <BSP_LCD_InitEx+0x2d4>)
  IOCtx.Address     = 0;
 8009d98:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
  IOCtx.ReadReg     = DSI_IO_Read;
 8009d9c:	e9cd 230d 	strd	r2, r3, [sp, #52]	; 0x34
  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 8009da0:	f7fc fc00 	bl	80065a4 <OTM8009A_RegisterBusIO>
 8009da4:	b980      	cbnz	r0, 8009dc8 <BSP_LCD_InitEx+0x290>
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else
  {
    Lcd_CompObj = &OTM8009AObj;
 8009da6:	4c1a      	ldr	r4, [pc, #104]	; (8009e10 <BSP_LCD_InitEx+0x2d8>)

    if(OTM8009A_ReadID(Lcd_CompObj, &id) != OTM8009A_OK)
 8009da8:	4630      	mov	r0, r6
 8009daa:	a90b      	add	r1, sp, #44	; 0x2c
    Lcd_CompObj = &OTM8009AObj;
 8009dac:	6026      	str	r6, [r4, #0]
    if(OTM8009A_ReadID(Lcd_CompObj, &id) != OTM8009A_OK)
 8009dae:	f7fc fbe5 	bl	800657c <OTM8009A_ReadID>
 8009db2:	b948      	cbnz	r0, 8009dc8 <BSP_LCD_InitEx+0x290>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }

    else
    {
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 8009db4:	4b17      	ldr	r3, [pc, #92]	; (8009e14 <BSP_LCD_InitEx+0x2dc>)
 8009db6:	4d18      	ldr	r5, [pc, #96]	; (8009e18 <BSP_LCD_InitEx+0x2e0>)
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 8009db8:	6820      	ldr	r0, [r4, #0]
 8009dba:	9a03      	ldr	r2, [sp, #12]
 8009dbc:	9901      	ldr	r1, [sp, #4]
 8009dbe:	681c      	ldr	r4, [r3, #0]
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 8009dc0:	602b      	str	r3, [r5, #0]
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 8009dc2:	47a0      	blx	r4
 8009dc4:	2800      	cmp	r0, #0
 8009dc6:	d0cf      	beq.n	8009d68 <BSP_LCD_InitEx+0x230>
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009dc8:	f06f 0006 	mvn.w	r0, #6
 8009dcc:	e7cc      	b.n	8009d68 <BSP_LCD_InitEx+0x230>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8009dce:	f06f 0003 	mvn.w	r0, #3
}
 8009dd2:	b017      	add	sp, #92	; 0x5c
 8009dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8009dd8:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8009ddc:	e7c7      	b.n	8009d6e <BSP_LCD_InitEx+0x236>
    ret = BSP_ERROR_WRONG_PARAM;
 8009dde:	f06f 0001 	mvn.w	r0, #1
}
 8009de2:	4770      	bx	lr
 8009de4:	58024400 	.word	0x58024400
 8009de8:	58021800 	.word	0x58021800
 8009dec:	58022400 	.word	0x58022400
 8009df0:	52001000 	.word	0x52001000
 8009df4:	24005338 	.word	0x24005338
 8009df8:	2400531c 	.word	0x2400531c
 8009dfc:	50001000 	.word	0x50001000
 8009e00:	24003df4 	.word	0x24003df4
 8009e04:	08008c7d 	.word	0x08008c7d
 8009e08:	08009785 	.word	0x08009785
 8009e0c:	08009511 	.word	0x08009511
 8009e10:	24003dec 	.word	0x24003dec
 8009e14:	240024d4 	.word	0x240024d4
 8009e18:	24003df0 	.word	0x24003df0
 8009e1c:	24005300 	.word	0x24005300
 8009e20:	24005258 	.word	0x24005258

08009e24 <BSP_LCD_Init>:
{
 8009e24:	b510      	push	{r4, lr}
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 8009e26:	f44f 74f0 	mov.w	r4, #480	; 0x1e0
{
 8009e2a:	b082      	sub	sp, #8
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 8009e2c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8009e30:	2201      	movs	r2, #1
 8009e32:	9400      	str	r4, [sp, #0]
 8009e34:	f7ff fe80 	bl	8009b38 <BSP_LCD_InitEx>
}
 8009e38:	b002      	add	sp, #8
 8009e3a:	bd10      	pop	{r4, pc}

08009e3c <BSP_LCD_ConfigLayer>:
  if(Instance >= LCD_INSTANCES_NBR)
 8009e3c:	b948      	cbnz	r0, 8009e52 <BSP_LCD_ConfigLayer+0x16>
    if (MX_LTDC_ConfigLayer(&hlcd_ltdc, LayerIndex, Config) != HAL_OK)
 8009e3e:	4806      	ldr	r0, [pc, #24]	; (8009e58 <BSP_LCD_ConfigLayer+0x1c>)
{
 8009e40:	b508      	push	{r3, lr}
    if (MX_LTDC_ConfigLayer(&hlcd_ltdc, LayerIndex, Config) != HAL_OK)
 8009e42:	f7ff fe35 	bl	8009ab0 <MX_LTDC_ConfigLayer>
 8009e46:	2800      	cmp	r0, #0
      ret = BSP_ERROR_PERIPH_FAILURE;
 8009e48:	bf0c      	ite	eq
 8009e4a:	2000      	moveq	r0, #0
 8009e4c:	f06f 0003 	mvnne.w	r0, #3
}
 8009e50:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8009e52:	f06f 0001 	mvn.w	r0, #1
}
 8009e56:	4770      	bx	lr
 8009e58:	24005258 	.word	0x24005258

08009e5c <BSP_LCD_SetBrightness>:
  if(Instance >= LCD_INSTANCES_NBR)
 8009e5c:	b958      	cbnz	r0, 8009e76 <BSP_LCD_SetBrightness+0x1a>
    if(Lcd_Drv->SetBrightness(Lcd_CompObj, Brightness) != BSP_ERROR_NONE)
 8009e5e:	4a07      	ldr	r2, [pc, #28]	; (8009e7c <BSP_LCD_SetBrightness+0x20>)
{
 8009e60:	b508      	push	{r3, lr}
    if(Lcd_Drv->SetBrightness(Lcd_CompObj, Brightness) != BSP_ERROR_NONE)
 8009e62:	4b07      	ldr	r3, [pc, #28]	; (8009e80 <BSP_LCD_SetBrightness+0x24>)
 8009e64:	6810      	ldr	r0, [r2, #0]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	695b      	ldr	r3, [r3, #20]
 8009e6a:	4798      	blx	r3
 8009e6c:	2800      	cmp	r0, #0
      ret = BSP_ERROR_PERIPH_FAILURE;
 8009e6e:	bf18      	it	ne
 8009e70:	f06f 0003 	mvnne.w	r0, #3
}
 8009e74:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8009e76:	f06f 0001 	mvn.w	r0, #1
}
 8009e7a:	4770      	bx	lr
 8009e7c:	24003dec 	.word	0x24003dec
 8009e80:	24003df0 	.word	0x24003df0

08009e84 <MX_QSPI_Init>:
  * @param  hQspi       QSPI handle
  * @param  Config      QSPI configuration structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
 8009e84:	b470      	push	{r4, r5, r6}
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 8009e86:	4a0a      	ldr	r2, [pc, #40]	; (8009eb0 <MX_QSPI_Init+0x2c>)
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
  hQspi->Init.FifoThreshold      = 1;
 8009e88:	2501      	movs	r5, #1
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 8009e8a:	684e      	ldr	r6, [r1, #4]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
  hQspi->Init.FlashSize          = Config->FlashSize;
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
 8009e8c:	f44f 7440 	mov.w	r4, #768	; 0x300
  hQspi->Instance                = QUADSPI;
 8009e90:	6002      	str	r2, [r0, #0]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8009e92:	2200      	movs	r2, #0
  hQspi->Init.FifoThreshold      = 1;
 8009e94:	e9c0 6501 	strd	r6, r5, [r0, #4]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 8009e98:	688e      	ldr	r6, [r1, #8]
  hQspi->Init.FlashSize          = Config->FlashSize;
 8009e9a:	680d      	ldr	r5, [r1, #0]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 8009e9c:	68c9      	ldr	r1, [r1, #12]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 8009e9e:	61c2      	str	r2, [r0, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 8009ea0:	6201      	str	r1, [r0, #32]
  hQspi->Init.FlashSize          = Config->FlashSize;
 8009ea2:	e9c0 6503 	strd	r6, r5, [r0, #12]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8009ea6:	e9c0 4205 	strd	r4, r2, [r0, #20]

  return HAL_QSPI_Init(hQspi);
}
 8009eaa:	bc70      	pop	{r4, r5, r6}
  return HAL_QSPI_Init(hQspi);
 8009eac:	f004 bb88 	b.w	800e5c0 <HAL_QSPI_Init>
 8009eb0:	52005000 	.word	0x52005000

08009eb4 <BSP_QSPI_Init>:
{
 8009eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eb8:	b0a7      	sub	sp, #156	; 0x9c
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8009eba:	2800      	cmp	r0, #0
 8009ebc:	f040 81fd 	bne.w	800a2ba <BSP_QSPI_Init+0x406>
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 8009ec0:	4c05      	ldr	r4, [pc, #20]	; (8009ed8 <BSP_QSPI_Init+0x24>)
 8009ec2:	f894 a000 	ldrb.w	sl, [r4]
 8009ec6:	f1ba 0f00 	cmp.w	sl, #0
 8009eca:	d007      	beq.n	8009edc <BSP_QSPI_Init+0x28>
  int32_t ret = BSP_ERROR_NONE;
 8009ecc:	4607      	mov	r7, r0
}
 8009ece:	4638      	mov	r0, r7
 8009ed0:	b027      	add	sp, #156	; 0x9c
 8009ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ed6:	bf00      	nop
 8009ed8:	240053a0 	.word	0x240053a0
{
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 8009edc:	f8df c374 	ldr.w	ip, [pc, #884]	; 800a254 <BSP_QSPI_Init+0x3a0>
  QSPI_BK2_D3_GPIO_CLK_ENABLE();

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8009ee0:	2202      	movs	r2, #2
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 8009ee2:	2740      	movs	r7, #64	; 0x40
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8009ee4:	2609      	movs	r6, #9
  QSPI_CLK_ENABLE();
 8009ee6:	f8dc 00d4 	ldr.w	r0, [ip, #212]	; 0xd4
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 8009eea:	2304      	movs	r3, #4
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8009eec:	f04f 0803 	mov.w	r8, #3
 8009ef0:	460d      	mov	r5, r1
  QSPI_CLK_ENABLE();
 8009ef2:	f440 4980 	orr.w	r9, r0, #16384	; 0x4000
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8009ef6:	a918      	add	r1, sp, #96	; 0x60
 8009ef8:	48cf      	ldr	r0, [pc, #828]	; (800a238 <BSP_QSPI_Init+0x384>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8009efa:	f04f 0b01 	mov.w	fp, #1
  QSPI_CLK_ENABLE();
 8009efe:	f8cc 90d4 	str.w	r9, [ip, #212]	; 0xd4
 8009f02:	f8dc 90d4 	ldr.w	r9, [ip, #212]	; 0xd4
 8009f06:	f409 4980 	and.w	r9, r9, #16384	; 0x4000
 8009f0a:	f8cd 900c 	str.w	r9, [sp, #12]
 8009f0e:	f8dd 900c 	ldr.w	r9, [sp, #12]
  QSPI_FORCE_RESET();
 8009f12:	f8dc 907c 	ldr.w	r9, [ip, #124]	; 0x7c
 8009f16:	f449 4980 	orr.w	r9, r9, #16384	; 0x4000
 8009f1a:	f8cc 907c 	str.w	r9, [ip, #124]	; 0x7c
  QSPI_RELEASE_RESET();
 8009f1e:	f8dc 907c 	ldr.w	r9, [ip, #124]	; 0x7c
 8009f22:	f429 4980 	bic.w	r9, r9, #16384	; 0x4000
 8009f26:	f8cc 907c 	str.w	r9, [ip, #124]	; 0x7c
  QSPI_CLK_GPIO_CLK_ENABLE();
 8009f2a:	f8dc 90e0 	ldr.w	r9, [ip, #224]	; 0xe0
 8009f2e:	ea49 0902 	orr.w	r9, r9, r2
 8009f32:	f8cc 90e0 	str.w	r9, [ip, #224]	; 0xe0
 8009f36:	f8dc 90e0 	ldr.w	r9, [ip, #224]	; 0xe0
 8009f3a:	ea09 0902 	and.w	r9, r9, r2
 8009f3e:	f8cd 9010 	str.w	r9, [sp, #16]
 8009f42:	f8dd 9010 	ldr.w	r9, [sp, #16]
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 8009f46:	f8dc 90e0 	ldr.w	r9, [ip, #224]	; 0xe0
 8009f4a:	ea49 0907 	orr.w	r9, r9, r7
 8009f4e:	f8cc 90e0 	str.w	r9, [ip, #224]	; 0xe0
 8009f52:	f8dc 90e0 	ldr.w	r9, [ip, #224]	; 0xe0
 8009f56:	ea09 0907 	and.w	r9, r9, r7
 8009f5a:	f8cd 9014 	str.w	r9, [sp, #20]
 8009f5e:	f8dd 9014 	ldr.w	r9, [sp, #20]
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 8009f62:	f8dc 90e0 	ldr.w	r9, [ip, #224]	; 0xe0
 8009f66:	f049 0908 	orr.w	r9, r9, #8
 8009f6a:	f8cc 90e0 	str.w	r9, [ip, #224]	; 0xe0
 8009f6e:	f8dc 90e0 	ldr.w	r9, [ip, #224]	; 0xe0
 8009f72:	f009 0908 	and.w	r9, r9, #8
 8009f76:	f8cd 9018 	str.w	r9, [sp, #24]
 8009f7a:	f8dd 9018 	ldr.w	r9, [sp, #24]
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 8009f7e:	f8dc 90e0 	ldr.w	r9, [ip, #224]	; 0xe0
 8009f82:	f049 0920 	orr.w	r9, r9, #32
 8009f86:	f8cc 90e0 	str.w	r9, [ip, #224]	; 0xe0
 8009f8a:	f8dc 90e0 	ldr.w	r9, [ip, #224]	; 0xe0
 8009f8e:	f009 0920 	and.w	r9, r9, #32
 8009f92:	f8cd 901c 	str.w	r9, [sp, #28]
 8009f96:	f8dd 901c 	ldr.w	r9, [sp, #28]
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 8009f9a:	f8dc 90e0 	ldr.w	r9, [ip, #224]	; 0xe0
 8009f9e:	f049 0920 	orr.w	r9, r9, #32
 8009fa2:	f8cc 90e0 	str.w	r9, [ip, #224]	; 0xe0
 8009fa6:	f8dc 90e0 	ldr.w	r9, [ip, #224]	; 0xe0
 8009faa:	f009 0920 	and.w	r9, r9, #32
 8009fae:	f8cd 9020 	str.w	r9, [sp, #32]
 8009fb2:	f8dd 9020 	ldr.w	r9, [sp, #32]
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 8009fb6:	f8dc 90e0 	ldr.w	r9, [ip, #224]	; 0xe0
 8009fba:	f049 0920 	orr.w	r9, r9, #32
 8009fbe:	f8cc 90e0 	str.w	r9, [ip, #224]	; 0xe0
 8009fc2:	f8dc 90e0 	ldr.w	r9, [ip, #224]	; 0xe0
 8009fc6:	f009 0920 	and.w	r9, r9, #32
 8009fca:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009fce:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 8009fd2:	f8dc 90e0 	ldr.w	r9, [ip, #224]	; 0xe0
 8009fd6:	ea49 0907 	orr.w	r9, r9, r7
 8009fda:	f8cc 90e0 	str.w	r9, [ip, #224]	; 0xe0
 8009fde:	f8dc 90e0 	ldr.w	r9, [ip, #224]	; 0xe0
 8009fe2:	ea09 0907 	and.w	r9, r9, r7
 8009fe6:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8009fea:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 8009fee:	f8dc 90e0 	ldr.w	r9, [ip, #224]	; 0xe0
 8009ff2:	f049 0980 	orr.w	r9, r9, #128	; 0x80
 8009ff6:	f8cc 90e0 	str.w	r9, [ip, #224]	; 0xe0
 8009ffa:	f8dc 90e0 	ldr.w	r9, [ip, #224]	; 0xe0
 8009ffe:	f009 0980 	and.w	r9, r9, #128	; 0x80
 800a002:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 800a006:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 800a00a:	f8dc 90e0 	ldr.w	r9, [ip, #224]	; 0xe0
 800a00e:	f049 0980 	orr.w	r9, r9, #128	; 0x80
 800a012:	f8cc 90e0 	str.w	r9, [ip, #224]	; 0xe0
 800a016:	f8dc 90e0 	ldr.w	r9, [ip, #224]	; 0xe0
 800a01a:	f009 0980 	and.w	r9, r9, #128	; 0x80
 800a01e:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a022:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 800a026:	f8dc 90e0 	ldr.w	r9, [ip, #224]	; 0xe0
 800a02a:	ea49 0907 	orr.w	r9, r9, r7
 800a02e:	f8cc 90e0 	str.w	r9, [ip, #224]	; 0xe0
 800a032:	f8dc 90e0 	ldr.w	r9, [ip, #224]	; 0xe0
 800a036:	ea09 0907 	and.w	r9, r9, r7
 800a03a:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 800a03e:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 800a042:	f8dc 90e0 	ldr.w	r9, [ip, #224]	; 0xe0
 800a046:	ea49 0907 	orr.w	r9, r9, r7
 800a04a:	f8cc 90e0 	str.w	r9, [ip, #224]	; 0xe0
  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 800a04e:	f44f 7900 	mov.w	r9, #512	; 0x200
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 800a052:	f8dc c0e0 	ldr.w	ip, [ip, #224]	; 0xe0
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 800a056:	9318      	str	r3, [sp, #96]	; 0x60
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 800a058:	ea0c 0c07 	and.w	ip, ip, r7
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 800a05c:	9301      	str	r3, [sp, #4]
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 800a05e:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
 800a062:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800a066:	9219      	str	r2, [sp, #100]	; 0x64
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800a068:	961c      	str	r6, [sp, #112]	; 0x70
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800a06a:	e9cd a81a 	strd	sl, r8, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800a06e:	f003 f839 	bl	800d0e4 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800a072:	230a      	movs	r3, #10
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 800a074:	a918      	add	r1, sp, #96	; 0x60
 800a076:	4871      	ldr	r0, [pc, #452]	; (800a23c <BSP_QSPI_Init+0x388>)
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800a078:	931c      	str	r3, [sp, #112]	; 0x70
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 800a07a:	9718      	str	r7, [sp, #96]	; 0x60
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800a07c:	f8cd b068 	str.w	fp, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 800a080:	f003 f830 	bl	800d0e4 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 800a084:	f44f 6000 	mov.w	r0, #2048	; 0x800
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 800a088:	a918      	add	r1, sp, #96	; 0x60
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800a08a:	961c      	str	r6, [sp, #112]	; 0x70
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 800a08c:	9018      	str	r0, [sp, #96]	; 0x60
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 800a08e:	486c      	ldr	r0, [pc, #432]	; (800a240 <BSP_QSPI_Init+0x38c>)
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800a090:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 800a094:	f003 f826 	bl	800d0e4 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 800a098:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 800a09a:	a918      	add	r1, sp, #96	; 0x60
 800a09c:	4869      	ldr	r0, [pc, #420]	; (800a244 <BSP_QSPI_Init+0x390>)
  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 800a09e:	9318      	str	r3, [sp, #96]	; 0x60
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800a0a0:	961c      	str	r6, [sp, #112]	; 0x70
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 800a0a2:	f003 f81f 	bl	800d0e4 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800a0a6:	230a      	movs	r3, #10
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 800a0a8:	a918      	add	r1, sp, #96	; 0x60
 800a0aa:	4867      	ldr	r0, [pc, #412]	; (800a248 <BSP_QSPI_Init+0x394>)
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800a0ac:	931c      	str	r3, [sp, #112]	; 0x70
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 800a0ae:	f8cd 9060 	str.w	r9, [sp, #96]	; 0x60
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 800a0b2:	f003 f817 	bl	800d0e4 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 800a0b6:	2308      	movs	r3, #8
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 800a0b8:	a918      	add	r1, sp, #96	; 0x60
 800a0ba:	4862      	ldr	r0, [pc, #392]	; (800a244 <BSP_QSPI_Init+0x390>)
  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 800a0bc:	9318      	str	r3, [sp, #96]	; 0x60
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800a0be:	961c      	str	r6, [sp, #112]	; 0x70
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 800a0c0:	f003 f810 	bl	800d0e4 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 800a0c4:	2380      	movs	r3, #128	; 0x80
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 800a0c6:	a918      	add	r1, sp, #96	; 0x60
 800a0c8:	485f      	ldr	r0, [pc, #380]	; (800a248 <BSP_QSPI_Init+0x394>)
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 800a0ca:	9318      	str	r3, [sp, #96]	; 0x60
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800a0cc:	961c      	str	r6, [sp, #112]	; 0x70
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 800a0ce:	f003 f809 	bl	800d0e4 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 800a0d2:	a918      	add	r1, sp, #96	; 0x60
 800a0d4:	4859      	ldr	r0, [pc, #356]	; (800a23c <BSP_QSPI_Init+0x388>)
  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 800a0d6:	f8cd 9060 	str.w	r9, [sp, #96]	; 0x60
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 800a0da:	f003 f803 	bl	800d0e4 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 800a0de:	a918      	add	r1, sp, #96	; 0x60
 800a0e0:	4859      	ldr	r0, [pc, #356]	; (800a248 <BSP_QSPI_Init+0x394>)
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 800a0e2:	9718      	str	r7, [sp, #96]	; 0x60
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 800a0e4:	f002 fffe 	bl	800d0e4 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 800a0e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 800a0ec:	a918      	add	r1, sp, #96	; 0x60
 800a0ee:	4853      	ldr	r0, [pc, #332]	; (800a23c <BSP_QSPI_Init+0x388>)
  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 800a0f0:	9318      	str	r3, [sp, #96]	; 0x60
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 800a0f2:	f002 fff7 	bl	800d0e4 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 800a0f6:	4652      	mov	r2, sl
 800a0f8:	210f      	movs	r1, #15
 800a0fa:	205c      	movs	r0, #92	; 0x5c
 800a0fc:	f000 faba 	bl	800a674 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 800a100:	205c      	movs	r0, #92	; 0x5c
 800a102:	f000 faed 	bl	800a6e0 <HAL_NVIC_EnableIRQ>
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 800a106:	a813      	add	r0, sp, #76	; 0x4c
 800a108:	f7fb fb80 	bl	800580c <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 800a10c:	786a      	ldrb	r2, [r5, #1]
 800a10e:	4b4f      	ldr	r3, [pc, #316]	; (800a24c <BSP_QSPI_Init+0x398>)
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 800a110:	9712      	str	r7, [sp, #72]	; 0x48
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 800a112:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a116:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a118:	9110      	str	r1, [sp, #64]	; 0x40
 800a11a:	fa93 f3a3 	rbit	r3, r3
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800a11e:	2a00      	cmp	r2, #0
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 800a120:	fab3 f383 	clz	r3, r3
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 800a124:	4e4a      	ldr	r6, [pc, #296]	; (800a250 <BSP_QSPI_Init+0x39c>)
 800a126:	a90f      	add	r1, sp, #60	; 0x3c
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800a128:	bf0c      	ite	eq
 800a12a:	2210      	moveq	r2, #16
 800a12c:	2200      	movne	r2, #0
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 800a12e:	3b01      	subs	r3, #1
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 800a130:	4630      	mov	r0, r6
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800a132:	9211      	str	r2, [sp, #68]	; 0x44
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 800a134:	930f      	str	r3, [sp, #60]	; 0x3c
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 800a136:	f7ff fea5 	bl	8009e84 <MX_QSPI_Init>
 800a13a:	2800      	cmp	r0, #0
 800a13c:	f040 80c0 	bne.w	800a2c0 <BSP_QSPI_Init+0x40c>
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 800a140:	4641      	mov	r1, r8
 800a142:	4630      	mov	r0, r6
 800a144:	f7fb fd2e 	bl	8005ba4 <MT25TL01G_ResetEnable>
 800a148:	2800      	cmp	r0, #0
 800a14a:	f040 809e 	bne.w	800a28a <BSP_QSPI_Init+0x3d6>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 800a14e:	4641      	mov	r1, r8
 800a150:	4630      	mov	r0, r6
 800a152:	f7fb fd47 	bl	8005be4 <MT25TL01G_ResetMemory>
 800a156:	2800      	cmp	r0, #0
 800a158:	f040 8097 	bne.w	800a28a <BSP_QSPI_Init+0x3d6>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800a15c:	7861      	ldrb	r1, [r4, #1]
 800a15e:	4630      	mov	r0, r6
 800a160:	f7fb fbe6 	bl	8005930 <MT25TL01G_AutoPollingMemReady>
 800a164:	2800      	cmp	r0, #0
 800a166:	f040 8090 	bne.w	800a28a <BSP_QSPI_Init+0x3d6>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 800a16a:	4601      	mov	r1, r0
 800a16c:	4630      	mov	r0, r6
 800a16e:	f7fb fd19 	bl	8005ba4 <MT25TL01G_ResetEnable>
 800a172:	2800      	cmp	r0, #0
 800a174:	f040 8089 	bne.w	800a28a <BSP_QSPI_Init+0x3d6>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 800a178:	4601      	mov	r1, r0
 800a17a:	4630      	mov	r0, r6
 800a17c:	f7fb fd32 	bl	8005be4 <MT25TL01G_ResetMemory>
 800a180:	4603      	mov	r3, r0
 800a182:	2800      	cmp	r0, #0
 800a184:	f040 8081 	bne.w	800a28a <BSP_QSPI_Init+0x3d6>
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800a188:	4601      	mov	r1, r0
 800a18a:	4630      	mov	r0, r6
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 800a18c:	f884 b000 	strb.w	fp, [r4]
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
 800a190:	7063      	strb	r3, [r4, #1]
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 800a192:	70a3      	strb	r3, [r4, #2]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800a194:	f7fb fbcc 	bl	8005930 <MT25TL01G_AutoPollingMemReady>
 800a198:	2800      	cmp	r0, #0
 800a19a:	d176      	bne.n	800a28a <BSP_QSPI_Init+0x3d6>
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800a19c:	7861      	ldrb	r1, [r4, #1]
 800a19e:	4630      	mov	r0, r6
 800a1a0:	f7fb fb48 	bl	8005834 <MT25TL01G_Enter4BytesAddressMode>
 800a1a4:	2800      	cmp	r0, #0
 800a1a6:	d170      	bne.n	800a28a <BSP_QSPI_Init+0x3d6>
    int32_t ret= BSP_ERROR_NONE;
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800a1a8:	f44f 7140 	mov.w	r1, #768	; 0x300
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 800a1ac:	f04f 0c85 	mov.w	ip, #133	; 0x85
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800a1b0:	f04f 7740 	mov.w	r7, #50331648	; 0x3000000
  s_command.DummyCycles       = 0;
  s_command.NbData            = 2;
 800a1b4:	2302      	movs	r3, #2
  uint16_t reg=0;
 800a1b6:	f8ad 000a 	strh.w	r0, [sp, #10]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a1ba:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.DummyCycles       = 0;
 800a1be:	901d      	str	r0, [sp, #116]	; 0x74
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800a1c0:	9025      	str	r0, [sp, #148]	; 0x94
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800a1c2:	911e      	str	r1, [sp, #120]	; 0x78
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a1c4:	a918      	add	r1, sp, #96	; 0x60
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 800a1c6:	f8cd c060 	str.w	ip, [sp, #96]	; 0x60
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800a1ca:	9721      	str	r7, [sp, #132]	; 0x84
  s_command.NbData            = 2;
 800a1cc:	9322      	str	r3, [sp, #136]	; 0x88
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800a1ce:	e9cd 001f 	strd	r0, r0, [sp, #124]	; 0x7c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800a1d2:	e9cd 0023 	strd	r0, r0, [sp, #140]	; 0x8c
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a1d6:	481e      	ldr	r0, [pc, #120]	; (800a250 <BSP_QSPI_Init+0x39c>)
 800a1d8:	f004 fa4e 	bl	800e678 <HAL_QSPI_Command>
 800a1dc:	2800      	cmp	r0, #0
 800a1de:	d154      	bne.n	800a28a <BSP_QSPI_Init+0x3d6>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a1e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1e4:	481a      	ldr	r0, [pc, #104]	; (800a250 <BSP_QSPI_Init+0x39c>)
 800a1e6:	f10d 010a 	add.w	r1, sp, #10
 800a1ea:	f004 fb1f 	bl	800e82c <HAL_QSPI_Receive>
 800a1ee:	2800      	cmp	r0, #0
 800a1f0:	d14b      	bne.n	800a28a <BSP_QSPI_Init+0x3d6>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800a1f2:	7861      	ldrb	r1, [r4, #1]
 800a1f4:	4816      	ldr	r0, [pc, #88]	; (800a250 <BSP_QSPI_Init+0x39c>)
 800a1f6:	f7fb fbc5 	bl	8005984 <MT25TL01G_WriteEnable>
 800a1fa:	4607      	mov	r7, r0
 800a1fc:	2800      	cmp	r0, #0
 800a1fe:	d144      	bne.n	800a28a <BSP_QSPI_Init+0x3d6>
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 800a200:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 800a204:	f640 720f 	movw	r2, #3855	; 0xf0f
 800a208:	f248 0380 	movw	r3, #32896	; 0x8080
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a20c:	a918      	add	r1, sp, #96	; 0x60
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 800a20e:	4002      	ands	r2, r0
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 800a210:	2081      	movs	r0, #129	; 0x81
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 800a212:	4313      	orrs	r3, r2
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 800a214:	9018      	str	r0, [sp, #96]	; 0x60
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a216:	f241 3288 	movw	r2, #5000	; 0x1388
 800a21a:	480d      	ldr	r0, [pc, #52]	; (800a250 <BSP_QSPI_Init+0x39c>)
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 800a21c:	f8ad 300a 	strh.w	r3, [sp, #10]
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a220:	f004 fa2a 	bl	800e678 <HAL_QSPI_Command>
 800a224:	bb88      	cbnz	r0, 800a28a <BSP_QSPI_Init+0x3d6>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a226:	f10d 010a 	add.w	r1, sp, #10
 800a22a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a22e:	4808      	ldr	r0, [pc, #32]	; (800a250 <BSP_QSPI_Init+0x39c>)
 800a230:	f004 fa84 	bl	800e73c <HAL_QSPI_Transmit>
 800a234:	bb48      	cbnz	r0, 800a28a <BSP_QSPI_Init+0x3d6>
 800a236:	e00f      	b.n	800a258 <BSP_QSPI_Init+0x3a4>
 800a238:	58020400 	.word	0x58020400
 800a23c:	58021800 	.word	0x58021800
 800a240:	58020c00 	.word	0x58020c00
 800a244:	58021c00 	.word	0x58021c00
 800a248:	58021400 	.word	0x58021400
 800a24c:	080213cc 	.word	0x080213cc
 800a250:	240053ac 	.word	0x240053ac
 800a254:	58024400 	.word	0x58024400
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 800a258:	7823      	ldrb	r3, [r4, #0]
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 800a25a:	f895 8000 	ldrb.w	r8, [r5]
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 800a25e:	2b02      	cmp	r3, #2
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 800a260:	786d      	ldrb	r5, [r5, #1]
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 800a262:	d012      	beq.n	800a28a <BSP_QSPI_Init+0x3d6>
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800a264:	2d00      	cmp	r5, #0
      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 800a266:	4818      	ldr	r0, [pc, #96]	; (800a2c8 <BSP_QSPI_Init+0x414>)
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800a268:	bf0c      	ite	eq
 800a26a:	2310      	moveq	r3, #16
 800a26c:	2300      	movne	r3, #0
 800a26e:	60f3      	str	r3, [r6, #12]
      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 800a270:	f004 f9a6 	bl	800e5c0 <HAL_QSPI_Init>
 800a274:	b948      	cbnz	r0, 800a28a <BSP_QSPI_Init+0x3d6>
        switch(QSPI_Ctx[Instance].InterfaceMode)
 800a276:	7863      	ldrb	r3, [r4, #1]
 800a278:	2b03      	cmp	r3, #3
 800a27a:	d10c      	bne.n	800a296 <BSP_QSPI_Init+0x3e2>
          if(Mode != MT25TL01G_QPI_MODE)
 800a27c:	f1b8 0f03 	cmp.w	r8, #3
 800a280:	d00c      	beq.n	800a29c <BSP_QSPI_Init+0x3e8>
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 800a282:	4811      	ldr	r0, [pc, #68]	; (800a2c8 <BSP_QSPI_Init+0x414>)
 800a284:	f7fb fbde 	bl	8005a44 <MT25TL01G_ExitQPIMode>
 800a288:	b140      	cbz	r0, 800a29c <BSP_QSPI_Init+0x3e8>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800a28a:	f06f 0704 	mvn.w	r7, #4
}
 800a28e:	4638      	mov	r0, r7
 800a290:	b027      	add	sp, #156	; 0x9c
 800a292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if(Mode == MT25TL01G_QPI_MODE)
 800a296:	f1b8 0f03 	cmp.w	r8, #3
 800a29a:	d008      	beq.n	800a2ae <BSP_QSPI_Init+0x3fa>
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 800a29c:	2301      	movs	r3, #1
}
 800a29e:	4638      	mov	r0, r7
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 800a2a0:	f884 8001 	strb.w	r8, [r4, #1]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 800a2a4:	70a5      	strb	r5, [r4, #2]
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 800a2a6:	7023      	strb	r3, [r4, #0]
}
 800a2a8:	b027      	add	sp, #156	; 0x9c
 800a2aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 800a2ae:	4806      	ldr	r0, [pc, #24]	; (800a2c8 <BSP_QSPI_Init+0x414>)
 800a2b0:	f7fb fbac 	bl	8005a0c <MT25TL01G_EnterQPIMode>
 800a2b4:	2800      	cmp	r0, #0
 800a2b6:	d0f1      	beq.n	800a29c <BSP_QSPI_Init+0x3e8>
 800a2b8:	e7e7      	b.n	800a28a <BSP_QSPI_Init+0x3d6>
    ret = BSP_ERROR_WRONG_PARAM;
 800a2ba:	f06f 0701 	mvn.w	r7, #1
 800a2be:	e606      	b.n	8009ece <BSP_QSPI_Init+0x1a>
          ret = BSP_ERROR_PERIPH_FAILURE;
 800a2c0:	f06f 0703 	mvn.w	r7, #3
  return ret;
 800a2c4:	e603      	b.n	8009ece <BSP_QSPI_Init+0x1a>
 800a2c6:	bf00      	nop
 800a2c8:	240053ac 	.word	0x240053ac

0800a2cc <BSP_QSPI_EnableMemoryMappedMode>:
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800a2cc:	b998      	cbnz	r0, 800a2f6 <BSP_QSPI_EnableMemoryMappedMode+0x2a>
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800a2ce:	480b      	ldr	r0, [pc, #44]	; (800a2fc <BSP_QSPI_EnableMemoryMappedMode+0x30>)
{
 800a2d0:	b510      	push	{r4, lr}
 800a2d2:	4c0b      	ldr	r4, [pc, #44]	; (800a300 <BSP_QSPI_EnableMemoryMappedMode+0x34>)
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 800a2d4:	78a3      	ldrb	r3, [r4, #2]
 800a2d6:	7861      	ldrb	r1, [r4, #1]
 800a2d8:	b133      	cbz	r3, 800a2e8 <BSP_QSPI_EnableMemoryMappedMode+0x1c>
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800a2da:	f7fb fbcf 	bl	8005a7c <MT25TL01G_EnableMemoryMappedModeDTR>
 800a2de:	b938      	cbnz	r0, 800a2f0 <BSP_QSPI_EnableMemoryMappedMode+0x24>
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800a2e0:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
 800a2e2:	2000      	movs	r0, #0
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800a2e4:	7023      	strb	r3, [r4, #0]
}
 800a2e6:	bd10      	pop	{r4, pc}
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800a2e8:	f7fb fc14 	bl	8005b14 <MT25TL01G_EnableMemoryMappedModeSTR>
 800a2ec:	2800      	cmp	r0, #0
 800a2ee:	d0f7      	beq.n	800a2e0 <BSP_QSPI_EnableMemoryMappedMode+0x14>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a2f0:	f06f 0004 	mvn.w	r0, #4
}
 800a2f4:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800a2f6:	f06f 0001 	mvn.w	r0, #1
}
 800a2fa:	4770      	bx	lr
 800a2fc:	240053ac 	.word	0x240053ac
 800a300:	240053a0 	.word	0x240053a0

0800a304 <BSP_SD_DeInit>:
  * @retval SD status
  */
int32_t BSP_SD_DeInit(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;
  if(Instance >= SD_INSTANCES_NBR)
 800a304:	b9d0      	cbnz	r0, 800a33c <BSP_SD_DeInit+0x38>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    if(HAL_SD_DeInit(&hsd_sdmmc[Instance]) != HAL_OK)/* HAL SD de-initialization */
 800a306:	4810      	ldr	r0, [pc, #64]	; (800a348 <BSP_SD_DeInit+0x44>)
{
 800a308:	b510      	push	{r4, lr}
    if(HAL_SD_DeInit(&hsd_sdmmc[Instance]) != HAL_OK)/* HAL SD de-initialization */
 800a30a:	f006 ff5f 	bl	80111cc <HAL_SD_DeInit>
 800a30e:	4604      	mov	r4, r0
 800a310:	b9b8      	cbnz	r0, 800a342 <BSP_SD_DeInit+0x3e>
{
  GPIO_InitTypeDef gpio_init_structure;

  if(hsd == &hsd_sdmmc[0])
  {
    HAL_NVIC_DisableIRQ(SDMMC1_IRQn);
 800a312:	2031      	movs	r0, #49	; 0x31
 800a314:	f000 f9f2 	bl	800a6fc <HAL_NVIC_DisableIRQ>

    /* DeInit GPIO pins can be done in the application
    (by surcharging this __weak function) */

    /* Disable SDMMC1 clock */
    __HAL_RCC_SDMMC1_CLK_DISABLE();
 800a318:	4a0c      	ldr	r2, [pc, #48]	; (800a34c <BSP_SD_DeInit+0x48>)
    /* GPIOC configuration */
    gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
#else
    gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_12;
#endif
    HAL_GPIO_DeInit(GPIOC, gpio_init_structure.Pin);
 800a31a:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 800a31e:	480c      	ldr	r0, [pc, #48]	; (800a350 <BSP_SD_DeInit+0x4c>)
    __HAL_RCC_SDMMC1_CLK_DISABLE();
 800a320:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
 800a324:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a328:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    HAL_GPIO_DeInit(GPIOC, gpio_init_structure.Pin);
 800a32c:	f002 fff8 	bl	800d320 <HAL_GPIO_DeInit>

    /* GPIOD configuration */
    gpio_init_structure.Pin = GPIO_PIN_2;
    HAL_GPIO_DeInit(GPIOD, gpio_init_structure.Pin);
 800a330:	2104      	movs	r1, #4
 800a332:	4808      	ldr	r0, [pc, #32]	; (800a354 <BSP_SD_DeInit+0x50>)
 800a334:	f002 fff4 	bl	800d320 <HAL_GPIO_DeInit>
  int32_t ret = BSP_ERROR_NONE;
 800a338:	4620      	mov	r0, r4
}
 800a33a:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800a33c:	f06f 0001 	mvn.w	r0, #1
}
 800a340:	4770      	bx	lr
      ret = BSP_ERROR_PERIPH_FAILURE;
 800a342:	f06f 0003 	mvn.w	r0, #3
}
 800a346:	bd10      	pop	{r4, pc}
 800a348:	240053f8 	.word	0x240053f8
 800a34c:	58024400 	.word	0x58024400
 800a350:	58020800 	.word	0x58020800
 800a354:	58020c00 	.word	0x58020c00

0800a358 <MX_SDMMC1_SD_Init>:
{
 800a358:	b538      	push	{r3, r4, r5, lr}
  hsd->Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a35a:	2200      	movs	r2, #0
  hsd->Init.ClockDiv            = SDMMC_NSpeed_CLK_DIV;
 800a35c:	2104      	movs	r1, #4
  hsd->Instance                 = SDMMC1;
 800a35e:	4d07      	ldr	r5, [pc, #28]	; (800a37c <MX_SDMMC1_SD_Init+0x24>)
  hsd->Init.TranceiverPresent   = SDMMC_TRANSCEIVER_PRESENT;
 800a360:	2402      	movs	r4, #2
  hsd->Instance                 = SDMMC1;
 800a362:	6005      	str	r5, [r0, #0]
  hsd->Init.ClockDiv            = SDMMC_NSpeed_CLK_DIV;
 800a364:	e9c0 1405 	strd	r1, r4, [r0, #20]
  hsd->Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800a368:	e9c0 2201 	strd	r2, r2, [r0, #4]
  hsd->Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800a36c:	e9c0 2203 	strd	r2, r2, [r0, #12]
  if(HAL_SD_Init(hsd) != HAL_OK)
 800a370:	f007 fba4 	bl	8011abc <HAL_SD_Init>
}
 800a374:	3000      	adds	r0, #0
 800a376:	bf18      	it	ne
 800a378:	2001      	movne	r0, #1
 800a37a:	bd38      	pop	{r3, r4, r5, pc}
 800a37c:	52007000 	.word	0x52007000

0800a380 <BSP_SD_Init>:
  if(Instance >= SD_INSTANCES_NBR)
 800a380:	2800      	cmp	r0, #0
 800a382:	d17b      	bne.n	800a47c <BSP_SD_Init+0xfc>
    ret = (uint32_t)HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT,GPIO_PIN_8 );/*PinDetect[Instance]*/
 800a384:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a388:	4841      	ldr	r0, [pc, #260]	; (800a490 <BSP_SD_Init+0x110>)
{
 800a38a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a38e:	b08a      	sub	sp, #40	; 0x28
    ret = (uint32_t)HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT,GPIO_PIN_8 );/*PinDetect[Instance]*/
 800a390:	f003 f89c 	bl	800d4cc <HAL_GPIO_ReadPin>
    if(ret != GPIO_PIN_RESET)
 800a394:	4606      	mov	r6, r0
 800a396:	2800      	cmp	r0, #0
 800a398:	d173      	bne.n	800a482 <BSP_SD_Init+0x102>
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 800a39a:	4c3e      	ldr	r4, [pc, #248]	; (800a494 <BSP_SD_Init+0x114>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800a39c:	2702      	movs	r7, #2
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_12;
 800a39e:	ad0a      	add	r5, sp, #40	; 0x28
 800a3a0:	f44f 5188 	mov.w	r1, #4352	; 0x1100
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 800a3a4:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800a3a8:	2003      	movs	r0, #3
  gpio_init_structure.Alternate = GPIO_AF12_SDIO1;
 800a3aa:	220c      	movs	r2, #12
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800a3ac:	f04f 0801 	mov.w	r8, #1
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 800a3b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a3b4:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
 800a3b8:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 800a3bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a3c0:	9300      	str	r3, [sp, #0]
 800a3c2:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a3c4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a3c8:	433b      	orrs	r3, r7
 800a3ca:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800a3ce:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a3d2:	403b      	ands	r3, r7
 800a3d4:	9301      	str	r3, [sp, #4]
 800a3d6:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a3d8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a3dc:	f043 0304 	orr.w	r3, r3, #4
 800a3e0:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800a3e4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a3e8:	f003 0304 	and.w	r3, r3, #4
 800a3ec:	9302      	str	r3, [sp, #8]
 800a3ee:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a3f0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a3f4:	f043 0308 	orr.w	r3, r3, #8
 800a3f8:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800a3fc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_12;
 800a400:	f845 1d14 	str.w	r1, [r5, #-20]!
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800a404:	4629      	mov	r1, r5
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a406:	f003 0308 	and.w	r3, r3, #8
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800a40a:	9008      	str	r0, [sp, #32]
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800a40c:	4822      	ldr	r0, [pc, #136]	; (800a498 <BSP_SD_Init+0x118>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a40e:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Alternate = GPIO_AF12_SDIO1;
 800a410:	9209      	str	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a412:	9b03      	ldr	r3, [sp, #12]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800a414:	e9cd 7806 	strd	r7, r8, [sp, #24]
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800a418:	f002 fe64 	bl	800d0e4 <HAL_GPIO_Init>
  gpio_init_structure.Pin = GPIO_PIN_2;
 800a41c:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800a41e:	4629      	mov	r1, r5
 800a420:	481e      	ldr	r0, [pc, #120]	; (800a49c <BSP_SD_Init+0x11c>)
  gpio_init_structure.Pin = GPIO_PIN_2;
 800a422:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800a424:	f002 fe5e 	bl	800d0e4 <HAL_GPIO_Init>
  SD_DETECT_GPIO_CLK_ENABLE();
 800a428:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Pin = SD_DETECT_PIN;
 800a42c:	f44f 7280 	mov.w	r2, #256	; 0x100
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 800a430:	4629      	mov	r1, r5
 800a432:	4817      	ldr	r0, [pc, #92]	; (800a490 <BSP_SD_Init+0x110>)
  SD_DETECT_GPIO_CLK_ENABLE();
 800a434:	4313      	orrs	r3, r2
 800a436:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800a43a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Pin = SD_DETECT_PIN;
 800a43e:	9205      	str	r2, [sp, #20]
  SD_DETECT_GPIO_CLK_ENABLE();
 800a440:	4013      	ands	r3, r2
  gpio_init_structure.Pull = GPIO_PULLUP;
 800a442:	f8cd 801c 	str.w	r8, [sp, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800a446:	9708      	str	r7, [sp, #32]
  SD_DETECT_GPIO_CLK_ENABLE();
 800a448:	9304      	str	r3, [sp, #16]
 800a44a:	9b04      	ldr	r3, [sp, #16]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800a44c:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 800a44e:	f002 fe49 	bl	800d0e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDMMC1_IRQn, BSP_SD_IT_PRIORITY, 0);
 800a452:	4632      	mov	r2, r6
 800a454:	210e      	movs	r1, #14
 800a456:	2031      	movs	r0, #49	; 0x31
 800a458:	f000 f90c 	bl	800a674 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800a45c:	2031      	movs	r0, #49	; 0x31
 800a45e:	f000 f93f 	bl	800a6e0 <HAL_NVIC_EnableIRQ>
        if(MX_SDMMC1_SD_Init(&hsd_sdmmc[Instance]) != HAL_OK)
 800a462:	480f      	ldr	r0, [pc, #60]	; (800a4a0 <BSP_SD_Init+0x120>)
 800a464:	f7ff ff78 	bl	800a358 <MX_SDMMC1_SD_Init>
 800a468:	4604      	mov	r4, r0
 800a46a:	b968      	cbnz	r0, 800a488 <BSP_SD_Init+0x108>
          (void)HAL_SD_ConfigSpeedBusOperation(&hsd_sdmmc[Instance], SDMMC_SPEED_MODE_HIGH);
 800a46c:	4639      	mov	r1, r7
 800a46e:	480c      	ldr	r0, [pc, #48]	; (800a4a0 <BSP_SD_Init+0x120>)
 800a470:	f007 fb8a 	bl	8011b88 <HAL_SD_ConfigSpeedBusOperation>
  int32_t ret = BSP_ERROR_NONE;
 800a474:	4620      	mov	r0, r4
}
 800a476:	b00a      	add	sp, #40	; 0x28
 800a478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800a47c:	f06f 0001 	mvn.w	r0, #1
}
 800a480:	4770      	bx	lr
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a482:	f06f 0006 	mvn.w	r0, #6
 800a486:	e7f6      	b.n	800a476 <BSP_SD_Init+0xf6>
          ret = BSP_ERROR_PERIPH_FAILURE;
 800a488:	f06f 0003 	mvn.w	r0, #3
  return ret;
 800a48c:	e7f3      	b.n	800a476 <BSP_SD_Init+0xf6>
 800a48e:	bf00      	nop
 800a490:	58022000 	.word	0x58022000
 800a494:	58024400 	.word	0x58024400
 800a498:	58020800 	.word	0x58020800
 800a49c:	58020c00 	.word	0x58020c00
 800a4a0:	240053f8 	.word	0x240053f8

0800a4a4 <BSP_SD_ReadBlocks>:
{
 800a4a4:	b510      	push	{r4, lr}
  uint32_t timeout = SD_READ_TIMEOUT*BlocksNbr;
 800a4a6:	2464      	movs	r4, #100	; 0x64
{
 800a4a8:	b082      	sub	sp, #8
  uint32_t timeout = SD_READ_TIMEOUT*BlocksNbr;
 800a4aa:	fb04 f403 	mul.w	r4, r4, r3
  if(Instance >= SD_INSTANCES_NBR)
 800a4ae:	b950      	cbnz	r0, 800a4c6 <BSP_SD_ReadBlocks+0x22>
    if(HAL_SD_ReadBlocks(&hsd_sdmmc[Instance], (uint8_t *)pData, BlockIdx, BlocksNbr, timeout) != HAL_OK)
 800a4b0:	9400      	str	r4, [sp, #0]
 800a4b2:	4806      	ldr	r0, [pc, #24]	; (800a4cc <BSP_SD_ReadBlocks+0x28>)
 800a4b4:	f006 fc8e 	bl	8010dd4 <HAL_SD_ReadBlocks>
 800a4b8:	2800      	cmp	r0, #0
      ret = BSP_ERROR_PERIPH_FAILURE;
 800a4ba:	bf0c      	ite	eq
 800a4bc:	2000      	moveq	r0, #0
 800a4be:	f06f 0003 	mvnne.w	r0, #3
}
 800a4c2:	b002      	add	sp, #8
 800a4c4:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800a4c6:	f06f 0001 	mvn.w	r0, #1
 800a4ca:	e7fa      	b.n	800a4c2 <BSP_SD_ReadBlocks+0x1e>
 800a4cc:	240053f8 	.word	0x240053f8

0800a4d0 <BSP_SD_WriteBlocks>:
{
 800a4d0:	b510      	push	{r4, lr}
  uint32_t timeout = SD_READ_TIMEOUT*BlocksNbr;
 800a4d2:	2464      	movs	r4, #100	; 0x64
{
 800a4d4:	b082      	sub	sp, #8
  uint32_t timeout = SD_READ_TIMEOUT*BlocksNbr;
 800a4d6:	fb04 f403 	mul.w	r4, r4, r3
  if(Instance >= SD_INSTANCES_NBR)
 800a4da:	b950      	cbnz	r0, 800a4f2 <BSP_SD_WriteBlocks+0x22>
    if(HAL_SD_WriteBlocks(&hsd_sdmmc[Instance], (uint8_t *)pData, BlockIdx, BlocksNbr, timeout) != HAL_OK)
 800a4dc:	9400      	str	r4, [sp, #0]
 800a4de:	4806      	ldr	r0, [pc, #24]	; (800a4f8 <BSP_SD_WriteBlocks+0x28>)
 800a4e0:	f006 fd80 	bl	8010fe4 <HAL_SD_WriteBlocks>
 800a4e4:	2800      	cmp	r0, #0
      ret = BSP_ERROR_PERIPH_FAILURE;
 800a4e6:	bf0c      	ite	eq
 800a4e8:	2000      	moveq	r0, #0
 800a4ea:	f06f 0003 	mvnne.w	r0, #3
}
 800a4ee:	b002      	add	sp, #8
 800a4f0:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800a4f2:	f06f 0001 	mvn.w	r0, #1
 800a4f6:	e7fa      	b.n	800a4ee <BSP_SD_WriteBlocks+0x1e>
 800a4f8:	240053f8 	.word	0x240053f8

0800a4fc <BSP_SD_GetCardState>:
{
 800a4fc:	b508      	push	{r3, lr}
  return (int32_t)((HAL_SD_GetCardState(&hsd_sdmmc[Instance]) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a4fe:	4b04      	ldr	r3, [pc, #16]	; (800a510 <BSP_SD_GetCardState+0x14>)
 800a500:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
 800a504:	f007 fca0 	bl	8011e48 <HAL_SD_GetCardState>
}
 800a508:	3804      	subs	r0, #4
 800a50a:	bf18      	it	ne
 800a50c:	2001      	movne	r0, #1
 800a50e:	bd08      	pop	{r3, pc}
 800a510:	240053f8 	.word	0x240053f8

0800a514 <BSP_SD_GetCardInfo>:
  if(Instance >= SD_INSTANCES_NBR)
 800a514:	b948      	cbnz	r0, 800a52a <BSP_SD_GetCardInfo+0x16>
    if(HAL_SD_GetCardInfo(&hsd_sdmmc[Instance], CardInfo) != HAL_OK)
 800a516:	4806      	ldr	r0, [pc, #24]	; (800a530 <BSP_SD_GetCardInfo+0x1c>)
{
 800a518:	b508      	push	{r3, lr}
    if(HAL_SD_GetCardInfo(&hsd_sdmmc[Instance], CardInfo) != HAL_OK)
 800a51a:	f007 fa17 	bl	801194c <HAL_SD_GetCardInfo>
 800a51e:	2800      	cmp	r0, #0
      ret = BSP_ERROR_PERIPH_FAILURE;
 800a520:	bf0c      	ite	eq
 800a522:	2000      	moveq	r0, #0
 800a524:	f06f 0003 	mvnne.w	r0, #3
}
 800a528:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800a52a:	f06f 0001 	mvn.w	r0, #1
}
 800a52e:	4770      	bx	lr
 800a530:	240053f8 	.word	0x240053f8

0800a534 <HAL_SD_DriveTransceiver_1_8V_Callback>:
}
 800a534:	4770      	bx	lr
 800a536:	bf00      	nop

0800a538 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800a538:	4b0f      	ldr	r3, [pc, #60]	; (800a578 <HAL_InitTick+0x40>)
 800a53a:	781b      	ldrb	r3, [r3, #0]
 800a53c:	b90b      	cbnz	r3, 800a542 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 800a53e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800a540:	4770      	bx	lr
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800a542:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a546:	490d      	ldr	r1, [pc, #52]	; (800a57c <HAL_InitTick+0x44>)
 800a548:	fbb2 f3f3 	udiv	r3, r2, r3
{
 800a54c:	b510      	push	{r4, lr}
 800a54e:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800a550:	6808      	ldr	r0, [r1, #0]
 800a552:	fbb0 f0f3 	udiv	r0, r0, r3
 800a556:	f000 f8e5 	bl	800a724 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a55a:	2c0f      	cmp	r4, #15
 800a55c:	d800      	bhi.n	800a560 <HAL_InitTick+0x28>
 800a55e:	b108      	cbz	r0, 800a564 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 800a560:	2001      	movs	r0, #1
}
 800a562:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a564:	2200      	movs	r2, #0
 800a566:	4621      	mov	r1, r4
 800a568:	f04f 30ff 	mov.w	r0, #4294967295
 800a56c:	f000 f882 	bl	800a674 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800a570:	4b03      	ldr	r3, [pc, #12]	; (800a580 <HAL_InitTick+0x48>)
 800a572:	2000      	movs	r0, #0
 800a574:	601c      	str	r4, [r3, #0]
}
 800a576:	bd10      	pop	{r4, pc}
 800a578:	240025a8 	.word	0x240025a8
 800a57c:	240024cc 	.word	0x240024cc
 800a580:	240025ac 	.word	0x240025ac

0800a584 <HAL_Init>:
{
 800a584:	b530      	push	{r4, r5, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a586:	2003      	movs	r0, #3
{
 800a588:	b083      	sub	sp, #12
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a58a:	f000 f85f 	bl	800a64c <HAL_NVIC_SetPriorityGrouping>
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a58e:	4c12      	ldr	r4, [pc, #72]	; (800a5d8 <HAL_Init+0x54>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a590:	f004 fd8c 	bl	800f0ac <HAL_RCC_GetSysClockFreq>
 800a594:	4a11      	ldr	r2, [pc, #68]	; (800a5dc <HAL_Init+0x58>)
 800a596:	4912      	ldr	r1, [pc, #72]	; (800a5e0 <HAL_Init+0x5c>)
 800a598:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a59a:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a59c:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
 800a5a0:	4d10      	ldr	r5, [pc, #64]	; (800a5e4 <HAL_Init+0x60>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a5a2:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a5a6:	5ccb      	ldrb	r3, [r1, r3]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a5a8:	5c8a      	ldrb	r2, [r1, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a5aa:	f003 031f 	and.w	r3, r3, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a5ae:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a5b2:	fa20 f303 	lsr.w	r3, r0, r3
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800a5b6:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a5b8:	fa23 f202 	lsr.w	r2, r3, r2
  SystemCoreClock = common_system_clock;
 800a5bc:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a5be:	6022      	str	r2, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800a5c0:	f7ff ffba 	bl	800a538 <HAL_InitTick>
 800a5c4:	b110      	cbz	r0, 800a5cc <HAL_Init+0x48>
    return HAL_ERROR;
 800a5c6:	2001      	movs	r0, #1
}
 800a5c8:	b003      	add	sp, #12
 800a5ca:	bd30      	pop	{r4, r5, pc}
 800a5cc:	9001      	str	r0, [sp, #4]
  HAL_MspInit();
 800a5ce:	f7fa fe91 	bl	80052f4 <HAL_MspInit>
  return HAL_OK;
 800a5d2:	9801      	ldr	r0, [sp, #4]
}
 800a5d4:	b003      	add	sp, #12
 800a5d6:	bd30      	pop	{r4, r5, pc}
 800a5d8:	240024d0 	.word	0x240024d0
 800a5dc:	58024400 	.word	0x58024400
 800a5e0:	08020a64 	.word	0x08020a64
 800a5e4:	240024cc 	.word	0x240024cc

0800a5e8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800a5e8:	4a03      	ldr	r2, [pc, #12]	; (800a5f8 <HAL_IncTick+0x10>)
 800a5ea:	4b04      	ldr	r3, [pc, #16]	; (800a5fc <HAL_IncTick+0x14>)
 800a5ec:	6811      	ldr	r1, [r2, #0]
 800a5ee:	781b      	ldrb	r3, [r3, #0]
 800a5f0:	440b      	add	r3, r1
 800a5f2:	6013      	str	r3, [r2, #0]
}
 800a5f4:	4770      	bx	lr
 800a5f6:	bf00      	nop
 800a5f8:	24005480 	.word	0x24005480
 800a5fc:	240025a8 	.word	0x240025a8

0800a600 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800a600:	4b01      	ldr	r3, [pc, #4]	; (800a608 <HAL_GetTick+0x8>)
 800a602:	6818      	ldr	r0, [r3, #0]
}
 800a604:	4770      	bx	lr
 800a606:	bf00      	nop
 800a608:	24005480 	.word	0x24005480

0800a60c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a60c:	b538      	push	{r3, r4, r5, lr}
 800a60e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800a610:	f7ff fff6 	bl	800a600 <HAL_GetTick>
 800a614:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a616:	1c63      	adds	r3, r4, #1
 800a618:	d002      	beq.n	800a620 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800a61a:	4b04      	ldr	r3, [pc, #16]	; (800a62c <HAL_Delay+0x20>)
 800a61c:	781b      	ldrb	r3, [r3, #0]
 800a61e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800a620:	f7ff ffee 	bl	800a600 <HAL_GetTick>
 800a624:	1b40      	subs	r0, r0, r5
 800a626:	42a0      	cmp	r0, r4
 800a628:	d3fa      	bcc.n	800a620 <HAL_Delay+0x14>
  {
  }
}
 800a62a:	bd38      	pop	{r3, r4, r5, pc}
 800a62c:	240025a8 	.word	0x240025a8

0800a630 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800a630:	4b01      	ldr	r3, [pc, #4]	; (800a638 <HAL_GetREVID+0x8>)
 800a632:	6818      	ldr	r0, [r3, #0]
}
 800a634:	0c00      	lsrs	r0, r0, #16
 800a636:	4770      	bx	lr
 800a638:	5c001000 	.word	0x5c001000

0800a63c <HAL_EnableCompensationCell>:
  *         voltage ranges from 2.4 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 800a63c:	4a02      	ldr	r2, [pc, #8]	; (800a648 <HAL_EnableCompensationCell+0xc>)
 800a63e:	6a13      	ldr	r3, [r2, #32]
 800a640:	f043 0301 	orr.w	r3, r3, #1
 800a644:	6213      	str	r3, [r2, #32]
}
 800a646:	4770      	bx	lr
 800a648:	58000400 	.word	0x58000400

0800a64c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a64c:	4907      	ldr	r1, [pc, #28]	; (800a66c <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a64e:	0200      	lsls	r0, r0, #8
 800a650:	4b07      	ldr	r3, [pc, #28]	; (800a670 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a652:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a654:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a658:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a65a:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 800a65e:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800a660:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a664:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a666:	4318      	orrs	r0, r3
  SCB->AIRCR =  reg_value;
 800a668:	60c8      	str	r0, [r1, #12]
 800a66a:	4770      	bx	lr
 800a66c:	e000ed00 	.word	0xe000ed00
 800a670:	05fa0000 	.word	0x05fa0000

0800a674 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a674:	4b17      	ldr	r3, [pc, #92]	; (800a6d4 <HAL_NVIC_SetPriority+0x60>)
 800a676:	68db      	ldr	r3, [r3, #12]
 800a678:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a67c:	b430      	push	{r4, r5}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a67e:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a682:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a684:	2d04      	cmp	r5, #4
 800a686:	bf28      	it	cs
 800a688:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a68a:	2c06      	cmp	r4, #6
 800a68c:	d918      	bls.n	800a6c0 <HAL_NVIC_SetPriority+0x4c>
 800a68e:	3b03      	subs	r3, #3
 800a690:	f04f 34ff 	mov.w	r4, #4294967295
 800a694:	409c      	lsls	r4, r3
 800a696:	ea22 0404 	bic.w	r4, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a69a:	f04f 32ff 	mov.w	r2, #4294967295
  if ((int32_t)(IRQn) >= 0)
 800a69e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a6a0:	fa02 f205 	lsl.w	r2, r2, r5
 800a6a4:	ea21 0102 	bic.w	r1, r1, r2
 800a6a8:	fa01 f203 	lsl.w	r2, r1, r3
 800a6ac:	ea42 0204 	orr.w	r2, r2, r4
 800a6b0:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800a6b4:	b2d2      	uxtb	r2, r2
  if ((int32_t)(IRQn) >= 0)
 800a6b6:	db06      	blt.n	800a6c6 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a6b8:	4b07      	ldr	r3, [pc, #28]	; (800a6d8 <HAL_NVIC_SetPriority+0x64>)
 800a6ba:	541a      	strb	r2, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800a6bc:	bc30      	pop	{r4, r5}
 800a6be:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a6c0:	2400      	movs	r4, #0
 800a6c2:	4623      	mov	r3, r4
 800a6c4:	e7e9      	b.n	800a69a <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a6c6:	f000 000f 	and.w	r0, r0, #15
 800a6ca:	4b04      	ldr	r3, [pc, #16]	; (800a6dc <HAL_NVIC_SetPriority+0x68>)
 800a6cc:	541a      	strb	r2, [r3, r0]
 800a6ce:	bc30      	pop	{r4, r5}
 800a6d0:	4770      	bx	lr
 800a6d2:	bf00      	nop
 800a6d4:	e000ed00 	.word	0xe000ed00
 800a6d8:	e000e400 	.word	0xe000e400
 800a6dc:	e000ed14 	.word	0xe000ed14

0800a6e0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800a6e0:	2800      	cmp	r0, #0
 800a6e2:	db07      	blt.n	800a6f4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a6e4:	f000 011f 	and.w	r1, r0, #31
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	0940      	lsrs	r0, r0, #5
 800a6ec:	4a02      	ldr	r2, [pc, #8]	; (800a6f8 <HAL_NVIC_EnableIRQ+0x18>)
 800a6ee:	408b      	lsls	r3, r1
 800a6f0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800a6f4:	4770      	bx	lr
 800a6f6:	bf00      	nop
 800a6f8:	e000e100 	.word	0xe000e100

0800a6fc <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800a6fc:	2800      	cmp	r0, #0
 800a6fe:	db0d      	blt.n	800a71c <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a700:	0943      	lsrs	r3, r0, #5
 800a702:	2201      	movs	r2, #1
 800a704:	f000 001f 	and.w	r0, r0, #31
 800a708:	4905      	ldr	r1, [pc, #20]	; (800a720 <HAL_NVIC_DisableIRQ+0x24>)
 800a70a:	3320      	adds	r3, #32
 800a70c:	fa02 f000 	lsl.w	r0, r2, r0
 800a710:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800a714:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a718:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800a71c:	4770      	bx	lr
 800a71e:	bf00      	nop
 800a720:	e000e100 	.word	0xe000e100

0800a724 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a724:	3801      	subs	r0, #1
 800a726:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800a72a:	d20d      	bcs.n	800a748 <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a72c:	4b07      	ldr	r3, [pc, #28]	; (800a74c <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a72e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a730:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a732:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a734:	25f0      	movs	r5, #240	; 0xf0
 800a736:	4c06      	ldr	r4, [pc, #24]	; (800a750 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a738:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a73a:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a73c:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a740:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a742:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 800a744:	bc30      	pop	{r4, r5}
 800a746:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800a748:	2001      	movs	r0, #1
 800a74a:	4770      	bx	lr
 800a74c:	e000e010 	.word	0xe000e010
 800a750:	e000ed00 	.word	0xe000ed00

0800a754 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 800a754:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800a758:	4a04      	ldr	r2, [pc, #16]	; (800a76c <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800a75a:	2000      	movs	r0, #0
 800a75c:	4904      	ldr	r1, [pc, #16]	; (800a770 <HAL_MPU_Disable+0x1c>)
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800a75e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800a760:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a764:	6253      	str	r3, [r2, #36]	; 0x24
  MPU->CTRL = 0;
 800a766:	6048      	str	r0, [r1, #4]
}
 800a768:	4770      	bx	lr
 800a76a:	bf00      	nop
 800a76c:	e000ed00 	.word	0xe000ed00
 800a770:	e000ed90 	.word	0xe000ed90

0800a774 <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800a774:	4a06      	ldr	r2, [pc, #24]	; (800a790 <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800a776:	f040 0001 	orr.w	r0, r0, #1
 800a77a:	4b06      	ldr	r3, [pc, #24]	; (800a794 <HAL_MPU_Enable+0x20>)
 800a77c:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800a77e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800a780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a784:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800a786:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a78a:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800a78e:	4770      	bx	lr
 800a790:	e000ed00 	.word	0xe000ed00
 800a794:	e000ed90 	.word	0xe000ed90

0800a798 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800a798:	4a12      	ldr	r2, [pc, #72]	; (800a7e4 <HAL_MPU_ConfigRegion+0x4c>)
 800a79a:	7843      	ldrb	r3, [r0, #1]
 800a79c:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != 0UL)
 800a79e:	7801      	ldrb	r1, [r0, #0]
 800a7a0:	b911      	cbnz	r1, 800a7a8 <HAL_MPU_ConfigRegion+0x10>
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
  }
  else
  {
    MPU->RBAR = 0x00;
 800a7a2:	60d1      	str	r1, [r2, #12]
    MPU->RASR = 0x00;
 800a7a4:	6111      	str	r1, [r2, #16]
 800a7a6:	4770      	bx	lr
    MPU->RBAR = MPU_Init->BaseAddress;
 800a7a8:	6843      	ldr	r3, [r0, #4]
{
 800a7aa:	b470      	push	{r4, r5, r6}
    MPU->RBAR = MPU_Init->BaseAddress;
 800a7ac:	60d3      	str	r3, [r2, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800a7ae:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800a7b0:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800a7b2:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800a7b4:	7a85      	ldrb	r5, [r0, #10]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800a7b6:	7b86      	ldrb	r6, [r0, #14]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800a7b8:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800a7bc:	7b44      	ldrb	r4, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800a7be:	430b      	orrs	r3, r1
 800a7c0:	7a01      	ldrb	r1, [r0, #8]
 800a7c2:	ea43 43c5 	orr.w	r3, r3, r5, lsl #19
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800a7c6:	7bc5      	ldrb	r5, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800a7c8:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800a7cc:	7a44      	ldrb	r4, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800a7ce:	ea43 4346 	orr.w	r3, r3, r6, lsl #17
 800a7d2:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 800a7d6:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800a7da:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  }
}
 800a7de:	bc70      	pop	{r4, r5, r6}
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800a7e0:	6113      	str	r3, [r2, #16]
}
 800a7e2:	4770      	bx	lr
 800a7e4:	e000ed90 	.word	0xe000ed90

0800a7e8 <HAL_DCMI_MspInit>:
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_MspInit could be implemented in the user file
   */
}
 800a7e8:	4770      	bx	lr
 800a7ea:	bf00      	nop

0800a7ec <HAL_DCMI_Init>:
  if (hdcmi == NULL)
 800a7ec:	2800      	cmp	r0, #0
 800a7ee:	d04e      	beq.n	800a88e <HAL_DCMI_Init+0xa2>
{
 800a7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800a7f2:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800a7f6:	4604      	mov	r4, r0
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d03f      	beq.n	800a87c <HAL_DCMI_Init+0x90>
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800a7fc:	2202      	movs	r2, #2
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800a7fe:	69a3      	ldr	r3, [r4, #24]
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800a800:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800a804:	2b00      	cmp	r3, #0
 800a806:	d135      	bne.n	800a874 <HAL_DCMI_Init+0x88>
 800a808:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800a80a:	6861      	ldr	r1, [r4, #4]
 800a80c:	6965      	ldr	r5, [r4, #20]
 800a80e:	430b      	orrs	r3, r1
 800a810:	6a27      	ldr	r7, [r4, #32]
  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800a812:	2910      	cmp	r1, #16
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800a814:	ea43 0305 	orr.w	r3, r3, r5
 800a818:	68a5      	ldr	r5, [r4, #8]
 800a81a:	e9d4 6203 	ldrd	r6, r2, [r4, #12]
 800a81e:	ea43 0306 	orr.w	r3, r3, r6
 800a822:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a824:	ea43 0302 	orr.w	r3, r3, r2
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800a828:	6822      	ldr	r2, [r4, #0]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800a82a:	ea43 0305 	orr.w	r3, r3, r5
 800a82e:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800a830:	ea43 0307 	orr.w	r3, r3, r7
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800a834:	6817      	ldr	r7, [r2, #0]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800a836:	ea43 0306 	orr.w	r3, r3, r6
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800a83a:	4e16      	ldr	r6, [pc, #88]	; (800a894 <HAL_DCMI_Init+0xa8>)
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800a83c:	ea43 0305 	orr.w	r3, r3, r5
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800a840:	ea06 0607 	and.w	r6, r6, r7
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800a844:	6b25      	ldr	r5, [r4, #48]	; 0x30
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800a846:	6016      	str	r6, [r2, #0]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800a848:	ea43 0305 	orr.w	r3, r3, r5
 800a84c:	6815      	ldr	r5, [r2, #0]
 800a84e:	ea43 0305 	orr.w	r3, r3, r5
 800a852:	ea43 0300 	orr.w	r3, r3, r0
 800a856:	6013      	str	r3, [r2, #0]
  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800a858:	d101      	bne.n	800a85e <HAL_DCMI_Init+0x72>
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800a85a:	69e3      	ldr	r3, [r4, #28]
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800a85c:	6193      	str	r3, [r2, #24]
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800a85e:	68d3      	ldr	r3, [r2, #12]
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800a860:	2100      	movs	r1, #0
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800a862:	2501      	movs	r5, #1
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800a864:	f043 031e 	orr.w	r3, r3, #30
  return HAL_OK;
 800a868:	4608      	mov	r0, r1
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800a86a:	60d3      	str	r3, [r2, #12]
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800a86c:	64e1      	str	r1, [r4, #76]	; 0x4c
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800a86e:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 800a872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 800a874:	2200      	movs	r2, #0
 800a876:	4610      	mov	r0, r2
 800a878:	6262      	str	r2, [r4, #36]	; 0x24
 800a87a:	e7c6      	b.n	800a80a <HAL_DCMI_Init+0x1e>
    HAL_DCMI_MspInit(hdcmi);
 800a87c:	f7ff ffb4 	bl	800a7e8 <HAL_DCMI_MspInit>
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800a880:	2202      	movs	r2, #2
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800a882:	69a3      	ldr	r3, [r4, #24]
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800a884:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d1f3      	bne.n	800a874 <HAL_DCMI_Init+0x88>
 800a88c:	e7bc      	b.n	800a808 <HAL_DCMI_Init+0x1c>
    return HAL_ERROR;
 800a88e:	2001      	movs	r0, #1
}
 800a890:	4770      	bx	lr
 800a892:	bf00      	nop
 800a894:	ffe0f007 	.word	0xffe0f007

0800a898 <HAL_DCMI_MspDeInit>:
 800a898:	4770      	bx	lr
 800a89a:	bf00      	nop

0800a89c <HAL_DCMI_DeInit>:
{
 800a89c:	b510      	push	{r4, lr}
 800a89e:	4604      	mov	r4, r0
  HAL_DCMI_MspDeInit(hdcmi);
 800a8a0:	f7ff fffa 	bl	800a898 <HAL_DCMI_MspDeInit>
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 800a8a8:	4618      	mov	r0, r3
  hdcmi->State = HAL_DCMI_STATE_RESET;
 800a8aa:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdcmi);
 800a8ae:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800a8b2:	bd10      	pop	{r4, pc}

0800a8b4 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 800a8b4:	b538      	push	{r3, r4, r5, lr}
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800a8b6:	4b1e      	ldr	r3, [pc, #120]	; (800a930 <HAL_DCMI_Stop+0x7c>)
 800a8b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a8bc:	4c1d      	ldr	r4, [pc, #116]	; (800a934 <HAL_DCMI_Stop+0x80>)
 800a8be:	681b      	ldr	r3, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;

  /* Process locked */
  __HAL_LOCK(hdcmi);
 800a8c0:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800a8c4:	fba4 4303 	umull	r4, r3, r4, r3
  __HAL_LOCK(hdcmi);
 800a8c8:	2901      	cmp	r1, #1
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800a8ca:	ea4f 2353 	mov.w	r3, r3, lsr #9
 800a8ce:	fb02 f203 	mul.w	r2, r2, r3
  __HAL_LOCK(hdcmi);
 800a8d2:	d02a      	beq.n	800a92a <HAL_DCMI_Stop+0x76>

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800a8d4:	2302      	movs	r3, #2

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800a8d6:	6801      	ldr	r1, [r0, #0]
  __HAL_LOCK(hdcmi);
 800a8d8:	2401      	movs	r4, #1
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800a8da:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800a8de:	680b      	ldr	r3, [r1, #0]
  __HAL_LOCK(hdcmi);
 800a8e0:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800a8e4:	f023 0301 	bic.w	r3, r3, #1
 800a8e8:	600b      	str	r3, [r1, #0]
 800a8ea:	e003      	b.n	800a8f4 <HAL_DCMI_Stop+0x40>

      status = HAL_TIMEOUT;
      break;
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 800a8ec:	680b      	ldr	r3, [r1, #0]
 800a8ee:	f013 0301 	ands.w	r3, r3, #1
 800a8f2:	d018      	beq.n	800a926 <HAL_DCMI_Stop+0x72>
    if (count == 0U)
 800a8f4:	3a01      	subs	r2, #1
 800a8f6:	d1f9      	bne.n	800a8ec <HAL_DCMI_Stop+0x38>
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 800a8f8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
      status = HAL_TIMEOUT;
 800a8fa:	2403      	movs	r4, #3
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 800a8fc:	f043 0320 	orr.w	r3, r3, #32
 800a900:	64c3      	str	r3, [r0, #76]	; 0x4c

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 800a902:	680b      	ldr	r3, [r1, #0]
 800a904:	4605      	mov	r5, r0

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 800a906:	6c80      	ldr	r0, [r0, #72]	; 0x48
  __HAL_DCMI_DISABLE(hdcmi);
 800a908:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a90c:	600b      	str	r3, [r1, #0]
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 800a90e:	f000 ffc9 	bl	800b8a4 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 800a912:	6ce9      	ldr	r1, [r5, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 800a914:	2301      	movs	r3, #1

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800a916:	2200      	movs	r2, #0
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 800a918:	64e9      	str	r1, [r5, #76]	; 0x4c

  /* Return function status */
  return status;
}
 800a91a:	4620      	mov	r0, r4
  __HAL_UNLOCK(hdcmi);
 800a91c:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
  hdcmi->State = HAL_DCMI_STATE_READY;
 800a920:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 800a924:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status = HAL_OK;
 800a926:	461c      	mov	r4, r3
 800a928:	e7eb      	b.n	800a902 <HAL_DCMI_Stop+0x4e>
  __HAL_LOCK(hdcmi);
 800a92a:	2402      	movs	r4, #2
}
 800a92c:	4620      	mov	r0, r4
 800a92e:	bd38      	pop	{r3, r4, r5, pc}
 800a930:	240024cc 	.word	0x240024cc
 800a934:	10624dd3 	.word	0x10624dd3

0800a938 <HAL_DCMI_Suspend>:
{
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
  HAL_StatusTypeDef status = HAL_OK;

  /* Process locked */
  __HAL_LOCK(hdcmi);
 800a938:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800a93c:	2b01      	cmp	r3, #1
 800a93e:	d038      	beq.n	800a9b2 <HAL_DCMI_Suspend+0x7a>
 800a940:	4602      	mov	r2, r0
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800a942:	491d      	ldr	r1, [pc, #116]	; (800a9b8 <HAL_DCMI_Suspend+0x80>)
  __HAL_LOCK(hdcmi);
 800a944:	2001      	movs	r0, #1

  if (hdcmi->State == HAL_DCMI_STATE_BUSY)
 800a946:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800a94a:	6809      	ldr	r1, [r1, #0]
  if (hdcmi->State == HAL_DCMI_STATE_BUSY)
 800a94c:	2b02      	cmp	r3, #2
  __HAL_LOCK(hdcmi);
 800a94e:	f882 0034 	strb.w	r0, [r2, #52]	; 0x34
  if (hdcmi->State == HAL_DCMI_STATE_BUSY)
 800a952:	d004      	beq.n	800a95e <HAL_DCMI_Suspend+0x26>
      }
    }
    while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800a954:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 800a956:	2000      	movs	r0, #0
  __HAL_UNLOCK(hdcmi);
 800a958:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34

  /* Return function status */
  return status;
}
 800a95c:	4770      	bx	lr
{
 800a95e:	b430      	push	{r4, r5}
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800a960:	6810      	ldr	r0, [r2, #0]
    hdcmi->State = HAL_DCMI_STATE_SUSPENDED;
 800a962:	2405      	movs	r4, #5
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800a964:	4d15      	ldr	r5, [pc, #84]	; (800a9bc <HAL_DCMI_Suspend+0x84>)
 800a966:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    hdcmi->State = HAL_DCMI_STATE_SUSPENDED;
 800a96a:	f882 4035 	strb.w	r4, [r2, #53]	; 0x35
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800a96e:	fba5 5101 	umull	r5, r1, r5, r1
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800a972:	6804      	ldr	r4, [r0, #0]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800a974:	0a49      	lsrs	r1, r1, #9
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800a976:	f024 0401 	bic.w	r4, r4, #1
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800a97a:	fb03 f301 	mul.w	r3, r3, r1
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800a97e:	6004      	str	r4, [r0, #0]
 800a980:	e002      	b.n	800a988 <HAL_DCMI_Suspend+0x50>
    while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 800a982:	6801      	ldr	r1, [r0, #0]
 800a984:	07c9      	lsls	r1, r1, #31
 800a986:	d50e      	bpl.n	800a9a6 <HAL_DCMI_Suspend+0x6e>
      if (count == 0U)
 800a988:	3b01      	subs	r3, #1
 800a98a:	d1fa      	bne.n	800a982 <HAL_DCMI_Suspend+0x4a>
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 800a98c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        hdcmi->State = HAL_DCMI_STATE_READY;
 800a98e:	2101      	movs	r1, #1
        status = HAL_TIMEOUT;
 800a990:	2003      	movs	r0, #3
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 800a992:	f043 0320 	orr.w	r3, r3, #32
 800a996:	64d3      	str	r3, [r2, #76]	; 0x4c
  __HAL_UNLOCK(hdcmi);
 800a998:	2300      	movs	r3, #0
        hdcmi->State = HAL_DCMI_STATE_READY;
 800a99a:	f882 1035 	strb.w	r1, [r2, #53]	; 0x35
  __HAL_UNLOCK(hdcmi);
 800a99e:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
}
 800a9a2:	bc30      	pop	{r4, r5}
 800a9a4:	4770      	bx	lr
  __HAL_UNLOCK(hdcmi);
 800a9a6:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 800a9a8:	2000      	movs	r0, #0
  __HAL_UNLOCK(hdcmi);
 800a9aa:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
}
 800a9ae:	bc30      	pop	{r4, r5}
 800a9b0:	4770      	bx	lr
  __HAL_LOCK(hdcmi);
 800a9b2:	2002      	movs	r0, #2
 800a9b4:	4770      	bx	lr
 800a9b6:	bf00      	nop
 800a9b8:	240024cc 	.word	0x240024cc
 800a9bc:	10624dd3 	.word	0x10624dd3

0800a9c0 <HAL_DCMI_Resume>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Resume(DCMI_HandleTypeDef *hdcmi)
{
  /* Process locked */
  __HAL_LOCK(hdcmi);
 800a9c0:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800a9c4:	2b01      	cmp	r3, #1
 800a9c6:	d013      	beq.n	800a9f0 <HAL_DCMI_Resume+0x30>

  if (hdcmi->State == HAL_DCMI_STATE_SUSPENDED)
 800a9c8:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
  __HAL_LOCK(hdcmi);
 800a9cc:	2201      	movs	r2, #1
  if (hdcmi->State == HAL_DCMI_STATE_SUSPENDED)
 800a9ce:	2b05      	cmp	r3, #5
  __HAL_LOCK(hdcmi);
 800a9d0:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
  if (hdcmi->State == HAL_DCMI_STATE_SUSPENDED)
 800a9d4:	d107      	bne.n	800a9e6 <HAL_DCMI_Resume+0x26>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_BUSY;
 800a9d6:	2302      	movs	r3, #2

    /* Disable Capture */
    hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 800a9d8:	6802      	ldr	r2, [r0, #0]
    hdcmi->State = HAL_DCMI_STATE_BUSY;
 800a9da:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 800a9de:	6813      	ldr	r3, [r2, #0]
 800a9e0:	f043 0301 	orr.w	r3, r3, #1
 800a9e4:	6013      	str	r3, [r2, #0]
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	4770      	bx	lr
  __HAL_LOCK(hdcmi);
 800a9f0:	2002      	movs	r0, #2
}
 800a9f2:	4770      	bx	lr

0800a9f4 <DCMI_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a9f4:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800a9f6:	b508      	push	{r3, lr}

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 800a9f8:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800a9fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9fc:	2b02      	cmp	r3, #2
 800a9fe:	d006      	beq.n	800aa0e <DCMI_DMAError+0x1a>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 800aa00:	2301      	movs	r3, #1
 800aa02:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 800aa06:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800aa08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa0c:	64c3      	str	r3, [r0, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 800aa0e:	f7fe fcc1 	bl	8009394 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 800aa12:	bd08      	pop	{r3, pc}

0800aa14 <HAL_DCMI_IRQHandler>:
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 800aa14:	6803      	ldr	r3, [r0, #0]
{
 800aa16:	b570      	push	{r4, r5, r6, lr}
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 800aa18:	691d      	ldr	r5, [r3, #16]
{
 800aa1a:	4604      	mov	r4, r0
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 800aa1c:	076a      	lsls	r2, r5, #29
 800aa1e:	d438      	bmi.n	800aa92 <HAL_DCMI_IRQHandler+0x7e>
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 800aa20:	07ab      	lsls	r3, r5, #30
 800aa22:	d425      	bmi.n	800aa70 <HAL_DCMI_IRQHandler+0x5c>
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 800aa24:	06ee      	lsls	r6, r5, #27
 800aa26:	d41c      	bmi.n	800aa62 <HAL_DCMI_IRQHandler+0x4e>
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 800aa28:	0728      	lsls	r0, r5, #28
 800aa2a:	d413      	bmi.n	800aa54 <HAL_DCMI_IRQHandler+0x40>
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 800aa2c:	07e9      	lsls	r1, r5, #31
 800aa2e:	d510      	bpl.n	800aa52 <HAL_DCMI_IRQHandler+0x3e>
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800aa30:	6823      	ldr	r3, [r4, #0]
 800aa32:	681a      	ldr	r2, [r3, #0]
 800aa34:	0792      	lsls	r2, r2, #30
 800aa36:	d503      	bpl.n	800aa40 <HAL_DCMI_IRQHandler+0x2c>
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800aa38:	68da      	ldr	r2, [r3, #12]
 800aa3a:	f022 021e 	bic.w	r2, r2, #30
 800aa3e:	60da      	str	r2, [r3, #12]
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 800aa40:	68da      	ldr	r2, [r3, #12]
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 800aa42:	2101      	movs	r1, #1
    HAL_DCMI_FrameEventCallback(hdcmi);
 800aa44:	4620      	mov	r0, r4
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 800aa46:	f022 0201 	bic.w	r2, r2, #1
 800aa4a:	60da      	str	r2, [r3, #12]
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 800aa4c:	6159      	str	r1, [r3, #20]
    HAL_DCMI_FrameEventCallback(hdcmi);
 800aa4e:	f7fe fc95 	bl	800937c <HAL_DCMI_FrameEventCallback>
}
 800aa52:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800aa54:	6823      	ldr	r3, [r4, #0]
 800aa56:	2208      	movs	r2, #8
    HAL_DCMI_VsyncEventCallback(hdcmi);
 800aa58:	4620      	mov	r0, r4
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800aa5a:	615a      	str	r2, [r3, #20]
    HAL_DCMI_VsyncEventCallback(hdcmi);
 800aa5c:	f7fe fc94 	bl	8009388 <HAL_DCMI_VsyncEventCallback>
 800aa60:	e7e4      	b.n	800aa2c <HAL_DCMI_IRQHandler+0x18>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800aa62:	6823      	ldr	r3, [r4, #0]
 800aa64:	2210      	movs	r2, #16
    HAL_DCMI_LineEventCallback(hdcmi);
 800aa66:	4620      	mov	r0, r4
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800aa68:	615a      	str	r2, [r3, #20]
    HAL_DCMI_LineEventCallback(hdcmi);
 800aa6a:	f7fe fc81 	bl	8009370 <HAL_DCMI_LineEventCallback>
 800aa6e:	e7db      	b.n	800aa28 <HAL_DCMI_IRQHandler+0x14>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 800aa70:	6823      	ldr	r3, [r4, #0]
 800aa72:	2102      	movs	r1, #2
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800aa74:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800aa76:	2604      	movs	r6, #4
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 800aa78:	6159      	str	r1, [r3, #20]
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 800aa7a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800aa7c:	4610      	mov	r0, r2
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800aa7e:	490c      	ldr	r1, [pc, #48]	; (800aab0 <HAL_DCMI_IRQHandler+0x9c>)
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 800aa80:	f043 0301 	orr.w	r3, r3, #1
 800aa84:	64e3      	str	r3, [r4, #76]	; 0x4c
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800aa86:	f884 6035 	strb.w	r6, [r4, #53]	; 0x35
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800aa8a:	6511      	str	r1, [r2, #80]	; 0x50
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800aa8c:	f001 f884 	bl	800bb98 <HAL_DMA_Abort_IT>
 800aa90:	e7c8      	b.n	800aa24 <HAL_DCMI_IRQHandler+0x10>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 800aa92:	2104      	movs	r1, #4
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800aa94:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800aa96:	4e06      	ldr	r6, [pc, #24]	; (800aab0 <HAL_DCMI_IRQHandler+0x9c>)
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 800aa98:	6159      	str	r1, [r3, #20]
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 800aa9a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800aa9c:	4610      	mov	r0, r2
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 800aa9e:	f043 0302 	orr.w	r3, r3, #2
 800aaa2:	64e3      	str	r3, [r4, #76]	; 0x4c
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800aaa4:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800aaa8:	6516      	str	r6, [r2, #80]	; 0x50
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800aaaa:	f001 f875 	bl	800bb98 <HAL_DMA_Abort_IT>
 800aaae:	e7b7      	b.n	800aa20 <HAL_DCMI_IRQHandler+0xc>
 800aab0:	0800a9f5 	.word	0x0800a9f5

0800aab4 <HAL_DCMI_ConfigCrop>:
{
 800aab4:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdcmi);
 800aab6:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 800aaba:	2c01      	cmp	r4, #1
 800aabc:	d014      	beq.n	800aae8 <HAL_DCMI_ConfigCrop+0x34>
  hdcmi->Instance->CWSIZER = (XSize | (YSize << DCMI_CWSIZE_VLINE_Pos));
 800aabe:	9c03      	ldr	r4, [sp, #12]
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800aac0:	2602      	movs	r6, #2
  hdcmi->Instance->CWSTRTR = (X0 | (Y0 << DCMI_CWSTRT_VST_Pos));
 800aac2:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  __HAL_UNLOCK(hdcmi);
 800aac6:	2200      	movs	r2, #0
  hdcmi->Instance->CWSIZER = (XSize | (YSize << DCMI_CWSIZE_VLINE_Pos));
 800aac8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800aacc:	6804      	ldr	r4, [r0, #0]
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800aace:	f880 6035 	strb.w	r6, [r0, #53]	; 0x35
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800aad2:	2501      	movs	r5, #1
  hdcmi->Instance->CWSIZER = (XSize | (YSize << DCMI_CWSIZE_VLINE_Pos));
 800aad4:	6263      	str	r3, [r4, #36]	; 0x24
  return HAL_OK;
 800aad6:	4613      	mov	r3, r2
  hdcmi->Instance->CWSTRTR = (X0 | (Y0 << DCMI_CWSTRT_VST_Pos));
 800aad8:	6221      	str	r1, [r4, #32]
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800aada:	f880 5035 	strb.w	r5, [r0, #53]	; 0x35
  __HAL_UNLOCK(hdcmi);
 800aade:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	bc70      	pop	{r4, r5, r6}
 800aae6:	4770      	bx	lr
  __HAL_LOCK(hdcmi);
 800aae8:	2302      	movs	r3, #2
}
 800aaea:	bc70      	pop	{r4, r5, r6}
 800aaec:	4618      	mov	r0, r3
 800aaee:	4770      	bx	lr

0800aaf0 <HAL_DCMI_DisableCrop>:
  __HAL_LOCK(hdcmi);
 800aaf0:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 800aaf4:	2a01      	cmp	r2, #1
 800aaf6:	d012      	beq.n	800ab1e <HAL_DCMI_DisableCrop+0x2e>
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800aaf8:	2202      	movs	r2, #2
 800aafa:	4603      	mov	r3, r0
  __HAL_UNLOCK(hdcmi);
 800aafc:	2100      	movs	r1, #0
{
 800aafe:	b430      	push	{r4, r5}
  hdcmi->Instance->CR &= ~(uint32_t)DCMI_CR_CROP;
 800ab00:	6804      	ldr	r4, [r0, #0]
  hdcmi->State = HAL_DCMI_STATE_READY;
 800ab02:	2501      	movs	r5, #1
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800ab04:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
  return HAL_OK;
 800ab08:	4608      	mov	r0, r1
  hdcmi->Instance->CR &= ~(uint32_t)DCMI_CR_CROP;
 800ab0a:	6822      	ldr	r2, [r4, #0]
 800ab0c:	f022 0204 	bic.w	r2, r2, #4
 800ab10:	6022      	str	r2, [r4, #0]
  hdcmi->State = HAL_DCMI_STATE_READY;
 800ab12:	f883 5035 	strb.w	r5, [r3, #53]	; 0x35
  __HAL_UNLOCK(hdcmi);
 800ab16:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
}
 800ab1a:	bc30      	pop	{r4, r5}
 800ab1c:	4770      	bx	lr
  __HAL_LOCK(hdcmi);
 800ab1e:	2002      	movs	r0, #2
}
 800ab20:	4770      	bx	lr
 800ab22:	bf00      	nop

0800ab24 <HAL_DCMI_EnableCrop>:
  __HAL_LOCK(hdcmi);
 800ab24:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 800ab28:	2a01      	cmp	r2, #1
 800ab2a:	d012      	beq.n	800ab52 <HAL_DCMI_EnableCrop+0x2e>
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800ab2c:	2202      	movs	r2, #2
 800ab2e:	4603      	mov	r3, r0
  __HAL_UNLOCK(hdcmi);
 800ab30:	2100      	movs	r1, #0
{
 800ab32:	b430      	push	{r4, r5}
  hdcmi->Instance->CR |= (uint32_t)DCMI_CR_CROP;
 800ab34:	6804      	ldr	r4, [r0, #0]
  hdcmi->State = HAL_DCMI_STATE_READY;
 800ab36:	2501      	movs	r5, #1
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800ab38:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
  return HAL_OK;
 800ab3c:	4608      	mov	r0, r1
  hdcmi->Instance->CR |= (uint32_t)DCMI_CR_CROP;
 800ab3e:	6822      	ldr	r2, [r4, #0]
 800ab40:	f042 0204 	orr.w	r2, r2, #4
 800ab44:	6022      	str	r2, [r4, #0]
  hdcmi->State = HAL_DCMI_STATE_READY;
 800ab46:	f883 5035 	strb.w	r5, [r3, #53]	; 0x35
  __HAL_UNLOCK(hdcmi);
 800ab4a:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
}
 800ab4e:	bc30      	pop	{r4, r5}
 800ab50:	4770      	bx	lr
  __HAL_LOCK(hdcmi);
 800ab52:	2002      	movs	r0, #2
}
 800ab54:	4770      	bx	lr
 800ab56:	bf00      	nop

0800ab58 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800ab58:	6802      	ldr	r2, [r0, #0]
{
 800ab5a:	4601      	mov	r1, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800ab5c:	4b34      	ldr	r3, [pc, #208]	; (800ac30 <DMA_CalcBaseAndBitshift+0xd8>)
 800ab5e:	4835      	ldr	r0, [pc, #212]	; (800ac34 <DMA_CalcBaseAndBitshift+0xdc>)
{
 800ab60:	b430      	push	{r4, r5}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800ab62:	4c35      	ldr	r4, [pc, #212]	; (800ac38 <DMA_CalcBaseAndBitshift+0xe0>)
 800ab64:	4d35      	ldr	r5, [pc, #212]	; (800ac3c <DMA_CalcBaseAndBitshift+0xe4>)
 800ab66:	42a2      	cmp	r2, r4
 800ab68:	bf18      	it	ne
 800ab6a:	429a      	cmpne	r2, r3
 800ab6c:	f104 0448 	add.w	r4, r4, #72	; 0x48
 800ab70:	bf0c      	ite	eq
 800ab72:	2301      	moveq	r3, #1
 800ab74:	2300      	movne	r3, #0
 800ab76:	4282      	cmp	r2, r0
 800ab78:	bf08      	it	eq
 800ab7a:	f043 0301 	orreq.w	r3, r3, #1
 800ab7e:	3048      	adds	r0, #72	; 0x48
 800ab80:	42aa      	cmp	r2, r5
 800ab82:	bf08      	it	eq
 800ab84:	f043 0301 	orreq.w	r3, r3, #1
 800ab88:	3548      	adds	r5, #72	; 0x48
 800ab8a:	42a2      	cmp	r2, r4
 800ab8c:	bf08      	it	eq
 800ab8e:	f043 0301 	orreq.w	r3, r3, #1
 800ab92:	3448      	adds	r4, #72	; 0x48
 800ab94:	4282      	cmp	r2, r0
 800ab96:	bf08      	it	eq
 800ab98:	f043 0301 	orreq.w	r3, r3, #1
 800ab9c:	f500 7062 	add.w	r0, r0, #904	; 0x388
 800aba0:	42aa      	cmp	r2, r5
 800aba2:	bf08      	it	eq
 800aba4:	f043 0301 	orreq.w	r3, r3, #1
 800aba8:	f505 7562 	add.w	r5, r5, #904	; 0x388
 800abac:	42a2      	cmp	r2, r4
 800abae:	bf08      	it	eq
 800abb0:	f043 0301 	orreq.w	r3, r3, #1
 800abb4:	f504 7462 	add.w	r4, r4, #904	; 0x388
 800abb8:	4282      	cmp	r2, r0
 800abba:	bf08      	it	eq
 800abbc:	f043 0301 	orreq.w	r3, r3, #1
 800abc0:	3048      	adds	r0, #72	; 0x48
 800abc2:	42aa      	cmp	r2, r5
 800abc4:	bf08      	it	eq
 800abc6:	f043 0301 	orreq.w	r3, r3, #1
 800abca:	3548      	adds	r5, #72	; 0x48
 800abcc:	42a2      	cmp	r2, r4
 800abce:	bf08      	it	eq
 800abd0:	f043 0301 	orreq.w	r3, r3, #1
 800abd4:	3448      	adds	r4, #72	; 0x48
 800abd6:	4282      	cmp	r2, r0
 800abd8:	bf08      	it	eq
 800abda:	f043 0301 	orreq.w	r3, r3, #1
 800abde:	3048      	adds	r0, #72	; 0x48
 800abe0:	42aa      	cmp	r2, r5
 800abe2:	bf08      	it	eq
 800abe4:	f043 0301 	orreq.w	r3, r3, #1
 800abe8:	42a2      	cmp	r2, r4
 800abea:	bf08      	it	eq
 800abec:	f043 0301 	orreq.w	r3, r3, #1
 800abf0:	4282      	cmp	r2, r0
 800abf2:	bf08      	it	eq
 800abf4:	f043 0301 	orreq.w	r3, r3, #1
 800abf8:	b913      	cbnz	r3, 800ac00 <DMA_CalcBaseAndBitshift+0xa8>
 800abfa:	4b11      	ldr	r3, [pc, #68]	; (800ac40 <DMA_CalcBaseAndBitshift+0xe8>)
 800abfc:	429a      	cmp	r2, r3
 800abfe:	d112      	bne.n	800ac26 <DMA_CalcBaseAndBitshift+0xce>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800ac00:	b2d3      	uxtb	r3, r2
 800ac02:	4d10      	ldr	r5, [pc, #64]	; (800ac44 <DMA_CalcBaseAndBitshift+0xec>)
 800ac04:	4810      	ldr	r0, [pc, #64]	; (800ac48 <DMA_CalcBaseAndBitshift+0xf0>)
 800ac06:	3b10      	subs	r3, #16

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800ac08:	4c10      	ldr	r4, [pc, #64]	; (800ac4c <DMA_CalcBaseAndBitshift+0xf4>)
 800ac0a:	4010      	ands	r0, r2
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800ac0c:	fba5 5303 	umull	r5, r3, r5, r3
 800ac10:	091b      	lsrs	r3, r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800ac12:	f003 0207 	and.w	r2, r3, #7

    if (stream_number > 3U)
 800ac16:	2b03      	cmp	r3, #3
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800ac18:	5ca2      	ldrb	r2, [r4, r2]
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800ac1a:	bf88      	it	hi
 800ac1c:	3004      	addhi	r0, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800ac1e:	65ca      	str	r2, [r1, #92]	; 0x5c
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800ac20:	6588      	str	r0, [r1, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 800ac22:	bc30      	pop	{r4, r5}
 800ac24:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800ac26:	f022 00ff 	bic.w	r0, r2, #255	; 0xff
 800ac2a:	6588      	str	r0, [r1, #88]	; 0x58
 800ac2c:	e7f9      	b.n	800ac22 <DMA_CalcBaseAndBitshift+0xca>
 800ac2e:	bf00      	nop
 800ac30:	40020010 	.word	0x40020010
 800ac34:	40020040 	.word	0x40020040
 800ac38:	40020028 	.word	0x40020028
 800ac3c:	40020058 	.word	0x40020058
 800ac40:	400204b8 	.word	0x400204b8
 800ac44:	aaaaaaab 	.word	0xaaaaaaab
 800ac48:	fffffc00 	.word	0xfffffc00
 800ac4c:	080213d4 	.word	0x080213d4

0800ac50 <HAL_DMA_Init>:
{
 800ac50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac54:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800ac56:	f7ff fcd3 	bl	800a600 <HAL_GetTick>
  if(hdma == NULL)
 800ac5a:	2c00      	cmp	r4, #0
 800ac5c:	f000 8182 	beq.w	800af64 <HAL_DMA_Init+0x314>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800ac60:	6823      	ldr	r3, [r4, #0]
 800ac62:	4605      	mov	r5, r0
 800ac64:	4a2b      	ldr	r2, [pc, #172]	; (800ad14 <HAL_DMA_Init+0xc4>)
 800ac66:	4293      	cmp	r3, r2
 800ac68:	d049      	beq.n	800acfe <HAL_DMA_Init+0xae>
 800ac6a:	3218      	adds	r2, #24
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d046      	beq.n	800acfe <HAL_DMA_Init+0xae>
 800ac70:	3230      	adds	r2, #48	; 0x30
 800ac72:	4829      	ldr	r0, [pc, #164]	; (800ad18 <HAL_DMA_Init+0xc8>)
 800ac74:	4929      	ldr	r1, [pc, #164]	; (800ad1c <HAL_DMA_Init+0xcc>)
 800ac76:	4283      	cmp	r3, r0
 800ac78:	bf18      	it	ne
 800ac7a:	4293      	cmpne	r3, r2
 800ac7c:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800ac80:	bf0c      	ite	eq
 800ac82:	2201      	moveq	r2, #1
 800ac84:	2200      	movne	r2, #0
 800ac86:	428b      	cmp	r3, r1
 800ac88:	bf08      	it	eq
 800ac8a:	f042 0201 	orreq.w	r2, r2, #1
 800ac8e:	3130      	adds	r1, #48	; 0x30
 800ac90:	4283      	cmp	r3, r0
 800ac92:	bf08      	it	eq
 800ac94:	f042 0201 	orreq.w	r2, r2, #1
 800ac98:	3030      	adds	r0, #48	; 0x30
 800ac9a:	428b      	cmp	r3, r1
 800ac9c:	bf08      	it	eq
 800ac9e:	f042 0201 	orreq.w	r2, r2, #1
 800aca2:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800aca6:	4283      	cmp	r3, r0
 800aca8:	bf08      	it	eq
 800acaa:	f042 0201 	orreq.w	r2, r2, #1
 800acae:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800acb2:	428b      	cmp	r3, r1
 800acb4:	bf08      	it	eq
 800acb6:	f042 0201 	orreq.w	r2, r2, #1
 800acba:	3130      	adds	r1, #48	; 0x30
 800acbc:	4283      	cmp	r3, r0
 800acbe:	bf08      	it	eq
 800acc0:	f042 0201 	orreq.w	r2, r2, #1
 800acc4:	3030      	adds	r0, #48	; 0x30
 800acc6:	428b      	cmp	r3, r1
 800acc8:	bf08      	it	eq
 800acca:	f042 0201 	orreq.w	r2, r2, #1
 800acce:	3130      	adds	r1, #48	; 0x30
 800acd0:	4283      	cmp	r3, r0
 800acd2:	bf08      	it	eq
 800acd4:	f042 0201 	orreq.w	r2, r2, #1
 800acd8:	3030      	adds	r0, #48	; 0x30
 800acda:	428b      	cmp	r3, r1
 800acdc:	bf08      	it	eq
 800acde:	f042 0201 	orreq.w	r2, r2, #1
 800ace2:	3130      	adds	r1, #48	; 0x30
 800ace4:	4283      	cmp	r3, r0
 800ace6:	bf08      	it	eq
 800ace8:	f042 0201 	orreq.w	r2, r2, #1
 800acec:	428b      	cmp	r3, r1
 800acee:	bf08      	it	eq
 800acf0:	f042 0201 	orreq.w	r2, r2, #1
 800acf4:	b91a      	cbnz	r2, 800acfe <HAL_DMA_Init+0xae>
 800acf6:	4a0a      	ldr	r2, [pc, #40]	; (800ad20 <HAL_DMA_Init+0xd0>)
 800acf8:	4293      	cmp	r3, r2
 800acfa:	f040 81bf 	bne.w	800b07c <HAL_DMA_Init+0x42c>
    hdma->State = HAL_DMA_STATE_BUSY;
 800acfe:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 800ad00:	2100      	movs	r1, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 800ad02:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800ad06:	681a      	ldr	r2, [r3, #0]
    __HAL_UNLOCK(hdma);
 800ad08:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 800ad0c:	f022 0201 	bic.w	r2, r2, #1
 800ad10:	601a      	str	r2, [r3, #0]
 800ad12:	e00e      	b.n	800ad32 <HAL_DMA_Init+0xe2>
 800ad14:	40020010 	.word	0x40020010
 800ad18:	40020040 	.word	0x40020040
 800ad1c:	40020070 	.word	0x40020070
 800ad20:	400204b8 	.word	0x400204b8
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800ad24:	f7ff fc6c 	bl	800a600 <HAL_GetTick>
 800ad28:	1b40      	subs	r0, r0, r5
 800ad2a:	2805      	cmp	r0, #5
 800ad2c:	f200 8112 	bhi.w	800af54 <HAL_DMA_Init+0x304>
 800ad30:	6823      	ldr	r3, [r4, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800ad32:	681a      	ldr	r2, [r3, #0]
 800ad34:	07d6      	lsls	r6, r2, #31
 800ad36:	d4f5      	bmi.n	800ad24 <HAL_DMA_Init+0xd4>
    registerValue |=  hdma->Init.Direction           |
 800ad38:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ad3c:	6920      	ldr	r0, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 800ad3e:	430a      	orrs	r2, r1
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800ad40:	681f      	ldr	r7, [r3, #0]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ad42:	e9d4 6105 	ldrd	r6, r1, [r4, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ad46:	4302      	orrs	r2, r0
 800ad48:	4332      	orrs	r2, r6
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800ad4a:	4eb5      	ldr	r6, [pc, #724]	; (800b020 <HAL_DMA_Init+0x3d0>)
            hdma->Init.Mode                | hdma->Init.Priority;
 800ad4c:	e9d4 5007 	ldrd	r5, r0, [r4, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ad50:	430a      	orrs	r2, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800ad52:	403e      	ands	r6, r7
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ad54:	432a      	orrs	r2, r5
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ad56:	6a65      	ldr	r5, [r4, #36]	; 0x24
            hdma->Init.Mode                | hdma->Init.Priority;
 800ad58:	4302      	orrs	r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ad5a:	2d04      	cmp	r5, #4
    registerValue |=  hdma->Init.Direction           |
 800ad5c:	ea42 0206 	orr.w	r2, r2, r6
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ad60:	f000 8103 	beq.w	800af6a <HAL_DMA_Init+0x31a>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800ad64:	4eaf      	ldr	r6, [pc, #700]	; (800b024 <HAL_DMA_Init+0x3d4>)
 800ad66:	48b0      	ldr	r0, [pc, #704]	; (800b028 <HAL_DMA_Init+0x3d8>)
 800ad68:	6836      	ldr	r6, [r6, #0]
 800ad6a:	4030      	ands	r0, r6
 800ad6c:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 800ad70:	f080 8108 	bcs.w	800af84 <HAL_DMA_Init+0x334>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800ad74:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800ad76:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800ad78:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 800ad7c:	432a      	orrs	r2, r5
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800ad7e:	615a      	str	r2, [r3, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800ad80:	4620      	mov	r0, r4
 800ad82:	f7ff fee9 	bl	800ab58 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800ad86:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800ad88:	233f      	movs	r3, #63	; 0x3f
 800ad8a:	f002 021f 	and.w	r2, r2, #31
 800ad8e:	4093      	lsls	r3, r2
 800ad90:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ad92:	6822      	ldr	r2, [r4, #0]
 800ad94:	4ba5      	ldr	r3, [pc, #660]	; (800b02c <HAL_DMA_Init+0x3dc>)
 800ad96:	48a6      	ldr	r0, [pc, #664]	; (800b030 <HAL_DMA_Init+0x3e0>)
 800ad98:	49a6      	ldr	r1, [pc, #664]	; (800b034 <HAL_DMA_Init+0x3e4>)
 800ad9a:	4282      	cmp	r2, r0
 800ad9c:	bf18      	it	ne
 800ad9e:	429a      	cmpne	r2, r3
 800ada0:	4ea5      	ldr	r6, [pc, #660]	; (800b038 <HAL_DMA_Init+0x3e8>)
 800ada2:	4da6      	ldr	r5, [pc, #664]	; (800b03c <HAL_DMA_Init+0x3ec>)
 800ada4:	f100 0060 	add.w	r0, r0, #96	; 0x60
 800ada8:	bf0c      	ite	eq
 800adaa:	2301      	moveq	r3, #1
 800adac:	2300      	movne	r3, #0
 800adae:	f8df c2b8 	ldr.w	ip, [pc, #696]	; 800b068 <HAL_DMA_Init+0x418>
 800adb2:	428a      	cmp	r2, r1
 800adb4:	bf08      	it	eq
 800adb6:	f043 0301 	orreq.w	r3, r3, #1
 800adba:	3160      	adds	r1, #96	; 0x60
 800adbc:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 800b06c <HAL_DMA_Init+0x41c>
 800adc0:	42b2      	cmp	r2, r6
 800adc2:	bf08      	it	eq
 800adc4:	f043 0301 	orreq.w	r3, r3, #1
 800adc8:	f8df e2a4 	ldr.w	lr, [pc, #676]	; 800b070 <HAL_DMA_Init+0x420>
 800adcc:	4f9c      	ldr	r7, [pc, #624]	; (800b040 <HAL_DMA_Init+0x3f0>)
 800adce:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800add2:	42aa      	cmp	r2, r5
 800add4:	bf08      	it	eq
 800add6:	f043 0301 	orreq.w	r3, r3, #1
 800adda:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800adde:	f8df a284 	ldr.w	sl, [pc, #644]	; 800b064 <HAL_DMA_Init+0x414>
 800ade2:	4282      	cmp	r2, r0
 800ade4:	bf08      	it	eq
 800ade6:	f043 0301 	orreq.w	r3, r3, #1
 800adea:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800adee:	f8df 9284 	ldr.w	r9, [pc, #644]	; 800b074 <HAL_DMA_Init+0x424>
 800adf2:	428a      	cmp	r2, r1
 800adf4:	bf08      	it	eq
 800adf6:	f043 0301 	orreq.w	r3, r3, #1
 800adfa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800adfe:	4562      	cmp	r2, ip
 800ae00:	bf08      	it	eq
 800ae02:	f043 0301 	orreq.w	r3, r3, #1
 800ae06:	f8df c254 	ldr.w	ip, [pc, #596]	; 800b05c <HAL_DMA_Init+0x40c>
 800ae0a:	4542      	cmp	r2, r8
 800ae0c:	bf08      	it	eq
 800ae0e:	f043 0301 	orreq.w	r3, r3, #1
 800ae12:	eba2 0c0c 	sub.w	ip, r2, ip
 800ae16:	f8df 8248 	ldr.w	r8, [pc, #584]	; 800b060 <HAL_DMA_Init+0x410>
 800ae1a:	4572      	cmp	r2, lr
 800ae1c:	bf08      	it	eq
 800ae1e:	f043 0301 	orreq.w	r3, r3, #1
 800ae22:	fabc fc8c 	clz	ip, ip
 800ae26:	eba2 0808 	sub.w	r8, r2, r8
 800ae2a:	f8df e24c 	ldr.w	lr, [pc, #588]	; 800b078 <HAL_DMA_Init+0x428>
 800ae2e:	42ba      	cmp	r2, r7
 800ae30:	bf08      	it	eq
 800ae32:	f043 0301 	orreq.w	r3, r3, #1
 800ae36:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800ae3a:	eba2 070a 	sub.w	r7, r2, sl
 800ae3e:	fab8 f888 	clz	r8, r8
 800ae42:	42b2      	cmp	r2, r6
 800ae44:	bf08      	it	eq
 800ae46:	f043 0301 	orreq.w	r3, r3, #1
 800ae4a:	f10a 0a28 	add.w	sl, sl, #40	; 0x28
 800ae4e:	eba2 060e 	sub.w	r6, r2, lr
 800ae52:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800ae56:	42aa      	cmp	r2, r5
 800ae58:	bf08      	it	eq
 800ae5a:	f043 0301 	orreq.w	r3, r3, #1
 800ae5e:	fab7 f787 	clz	r7, r7
 800ae62:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 800ae66:	eba2 050a 	sub.w	r5, r2, sl
 800ae6a:	4282      	cmp	r2, r0
 800ae6c:	bf08      	it	eq
 800ae6e:	f043 0301 	orreq.w	r3, r3, #1
 800ae72:	097f      	lsrs	r7, r7, #5
 800ae74:	fab6 f686 	clz	r6, r6
 800ae78:	eba2 000e 	sub.w	r0, r2, lr
 800ae7c:	428a      	cmp	r2, r1
 800ae7e:	bf08      	it	eq
 800ae80:	f043 0301 	orreq.w	r3, r3, #1
 800ae84:	fab5 f585 	clz	r5, r5
 800ae88:	0976      	lsrs	r6, r6, #5
 800ae8a:	f10a 0a28 	add.w	sl, sl, #40	; 0x28
 800ae8e:	454a      	cmp	r2, r9
 800ae90:	bf08      	it	eq
 800ae92:	f043 0301 	orreq.w	r3, r3, #1
 800ae96:	096d      	lsrs	r5, r5, #5
 800ae98:	fab0 f080 	clz	r0, r0
 800ae9c:	eba2 010a 	sub.w	r1, r2, sl
 800aea0:	ea4c 0303 	orr.w	r3, ip, r3
 800aea4:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 800aea8:	0940      	lsrs	r0, r0, #5
 800aeaa:	fab1 f181 	clz	r1, r1
 800aeae:	ea48 0303 	orr.w	r3, r8, r3
 800aeb2:	eba2 0e0e 	sub.w	lr, r2, lr
 800aeb6:	0949      	lsrs	r1, r1, #5
 800aeb8:	433b      	orrs	r3, r7
 800aeba:	fabe fe8e 	clz	lr, lr
 800aebe:	4333      	orrs	r3, r6
 800aec0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 800aec4:	432b      	orrs	r3, r5
 800aec6:	4303      	orrs	r3, r0
 800aec8:	430b      	orrs	r3, r1
 800aeca:	d102      	bne.n	800aed2 <HAL_DMA_Init+0x282>
 800aecc:	f1be 0f00 	cmp.w	lr, #0
 800aed0:	d039      	beq.n	800af46 <HAL_DMA_Init+0x2f6>
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800aed2:	ea4c 0c08 	orr.w	ip, ip, r8
 800aed6:	b2d3      	uxtb	r3, r2
 800aed8:	ea47 070c 	orr.w	r7, r7, ip
 800aedc:	433e      	orrs	r6, r7
 800aede:	4335      	orrs	r5, r6
 800aee0:	4328      	orrs	r0, r5
 800aee2:	4301      	orrs	r1, r0
 800aee4:	ea5e 0101 	orrs.w	r1, lr, r1
 800aee8:	f000 8127 	beq.w	800b13a <HAL_DMA_Init+0x4ea>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800aeec:	4d55      	ldr	r5, [pc, #340]	; (800b044 <HAL_DMA_Init+0x3f4>)
 800aeee:	3b08      	subs	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800aef0:	4a55      	ldr	r2, [pc, #340]	; (800b048 <HAL_DMA_Init+0x3f8>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800aef2:	2001      	movs	r0, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800aef4:	fba5 5303 	umull	r5, r3, r5, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800aef8:	4d54      	ldr	r5, [pc, #336]	; (800b04c <HAL_DMA_Init+0x3fc>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800aefa:	091b      	lsrs	r3, r3, #4
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800aefc:	6665      	str	r5, [r4, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800aefe:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800af00:	f003 031f 	and.w	r3, r3, #31
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800af04:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800af06:	fa00 f303 	lsl.w	r3, r0, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800af0a:	6622      	str	r2, [r4, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800af0c:	66a3      	str	r3, [r4, #104]	; 0x68
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800af0e:	68a0      	ldr	r0, [r4, #8]
 800af10:	2880      	cmp	r0, #128	; 0x80
 800af12:	d069      	beq.n	800afe8 <HAL_DMA_Init+0x398>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800af14:	6860      	ldr	r0, [r4, #4]
 800af16:	b2c6      	uxtb	r6, r0
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800af18:	3801      	subs	r0, #1
 800af1a:	2807      	cmp	r0, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800af1c:	6016      	str	r6, [r2, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800af1e:	606b      	str	r3, [r5, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800af20:	d866      	bhi.n	800aff0 <HAL_DMA_Init+0x3a0>
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800af22:	1e70      	subs	r0, r6, #1
 800af24:	2807      	cmp	r0, #7
 800af26:	d868      	bhi.n	800affa <HAL_DMA_Init+0x3aa>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800af28:	2900      	cmp	r1, #0
 800af2a:	f000 8133 	beq.w	800b194 <HAL_DMA_Init+0x544>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800af2e:	4b48      	ldr	r3, [pc, #288]	; (800b050 <HAL_DMA_Init+0x400>)

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800af30:	4948      	ldr	r1, [pc, #288]	; (800b054 <HAL_DMA_Init+0x404>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800af32:	4433      	add	r3, r6
 800af34:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800af36:	2201      	movs	r2, #1
 800af38:	4082      	lsls	r2, r0
 800af3a:	e9c4 311b 	strd	r3, r1, [r4, #108]	; 0x6c
 800af3e:	6762      	str	r2, [r4, #116]	; 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800af40:	2000      	movs	r0, #0
 800af42:	6018      	str	r0, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800af44:	604a      	str	r2, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800af46:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800af48:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800af4a:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800af4c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800af50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800af54:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 800af56:	2303      	movs	r3, #3
        return HAL_ERROR;
 800af58:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800af5a:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 800af5c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800af60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_ERROR;
 800af64:	2001      	movs	r0, #1
}
 800af66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800af6a:	482e      	ldr	r0, [pc, #184]	; (800b024 <HAL_DMA_Init+0x3d4>)
 800af6c:	4e2e      	ldr	r6, [pc, #184]	; (800b028 <HAL_DMA_Init+0x3d8>)
 800af6e:	6807      	ldr	r7, [r0, #0]
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800af70:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800af72:	403e      	ands	r6, r7
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800af74:	6b27      	ldr	r7, [r4, #48]	; 0x30
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800af76:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800af7a:	ea40 0707 	orr.w	r7, r0, r7
 800af7e:	ea42 0207 	orr.w	r2, r2, r7
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800af82:	d346      	bcc.n	800b012 <HAL_DMA_Init+0x3c2>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800af84:	6866      	ldr	r6, [r4, #4]
 800af86:	f1a6 0729 	sub.w	r7, r6, #41	; 0x29
 800af8a:	2f1f      	cmp	r7, #31
 800af8c:	d925      	bls.n	800afda <HAL_DMA_Init+0x38a>
 800af8e:	3e4f      	subs	r6, #79	; 0x4f
 800af90:	2e03      	cmp	r6, #3
 800af92:	d926      	bls.n	800afe2 <HAL_DMA_Init+0x392>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800af94:	601a      	str	r2, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800af96:	2d04      	cmp	r5, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800af98:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800af9a:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 800af9e:	ea42 0205 	orr.w	r2, r2, r5
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800afa2:	f47f aeec 	bne.w	800ad7e <HAL_DMA_Init+0x12e>
 800afa6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 800afa8:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800afaa:	432a      	orrs	r2, r5
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800afac:	2800      	cmp	r0, #0
 800afae:	f43f aee6 	beq.w	800ad7e <HAL_DMA_Init+0x12e>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800afb2:	b331      	cbz	r1, 800b002 <HAL_DMA_Init+0x3b2>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800afb4:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800afb8:	f000 80dd 	beq.w	800b176 <HAL_DMA_Init+0x526>
    switch (hdma->Init.FIFOThreshold)
 800afbc:	2d02      	cmp	r5, #2
 800afbe:	d905      	bls.n	800afcc <HAL_DMA_Init+0x37c>
 800afc0:	2d03      	cmp	r5, #3
 800afc2:	f47f aedc 	bne.w	800ad7e <HAL_DMA_Init+0x12e>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800afc6:	01c1      	lsls	r1, r0, #7
 800afc8:	f57f aed9 	bpl.w	800ad7e <HAL_DMA_Init+0x12e>
          hdma->State = HAL_DMA_STATE_READY;
 800afcc:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800afce:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 800afd0:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800afd2:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 800afd4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          return HAL_ERROR;
 800afd8:	e7c2      	b.n	800af60 <HAL_DMA_Init+0x310>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800afda:	481f      	ldr	r0, [pc, #124]	; (800b058 <HAL_DMA_Init+0x408>)
 800afdc:	40f8      	lsrs	r0, r7
 800afde:	07c0      	lsls	r0, r0, #31
 800afe0:	d5d5      	bpl.n	800af8e <HAL_DMA_Init+0x33e>
        registerValue |= DMA_SxCR_TRBUFF;
 800afe2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800afe6:	e7d5      	b.n	800af94 <HAL_DMA_Init+0x344>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800afe8:	2100      	movs	r1, #0
 800afea:	6061      	str	r1, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800afec:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800afee:	606b      	str	r3, [r5, #4]
      hdma->DMAmuxRequestGen = 0U;
 800aff0:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 800aff2:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800aff6:	6763      	str	r3, [r4, #116]	; 0x74
 800aff8:	e7a5      	b.n	800af46 <HAL_DMA_Init+0x2f6>
 800affa:	e9d4 311b 	ldrd	r3, r1, [r4, #108]	; 0x6c
 800affe:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800b000:	e79e      	b.n	800af40 <HAL_DMA_Init+0x2f0>
    switch (hdma->Init.FIFOThreshold)
 800b002:	2d01      	cmp	r5, #1
 800b004:	f000 80b2 	beq.w	800b16c <HAL_DMA_Init+0x51c>
 800b008:	d3dd      	bcc.n	800afc6 <HAL_DMA_Init+0x376>
 800b00a:	2d02      	cmp	r5, #2
 800b00c:	f47f aeb7 	bne.w	800ad7e <HAL_DMA_Init+0x12e>
 800b010:	e7d9      	b.n	800afc6 <HAL_DMA_Init+0x376>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800b012:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800b014:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b016:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 800b01a:	f042 0204 	orr.w	r2, r2, #4
 800b01e:	e7c3      	b.n	800afa8 <HAL_DMA_Init+0x358>
 800b020:	fe10803f 	.word	0xfe10803f
 800b024:	5c001000 	.word	0x5c001000
 800b028:	ffff0000 	.word	0xffff0000
 800b02c:	40020010 	.word	0x40020010
 800b030:	40020028 	.word	0x40020028
 800b034:	40020040 	.word	0x40020040
 800b038:	40020058 	.word	0x40020058
 800b03c:	40020070 	.word	0x40020070
 800b040:	40020440 	.word	0x40020440
 800b044:	cccccccd 	.word	0xcccccccd
 800b048:	16009600 	.word	0x16009600
 800b04c:	58025880 	.word	0x58025880
 800b050:	1600963f 	.word	0x1600963f
 800b054:	58025940 	.word	0x58025940
 800b058:	c3c0003f 	.word	0xc3c0003f
 800b05c:	58025408 	.word	0x58025408
 800b060:	5802541c 	.word	0x5802541c
 800b064:	58025430 	.word	0x58025430
 800b068:	400200b8 	.word	0x400200b8
 800b06c:	40020410 	.word	0x40020410
 800b070:	40020428 	.word	0x40020428
 800b074:	400204b8 	.word	0x400204b8
 800b078:	58025444 	.word	0x58025444
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800b07c:	4a4c      	ldr	r2, [pc, #304]	; (800b1b0 <HAL_DMA_Init+0x560>)
 800b07e:	494d      	ldr	r1, [pc, #308]	; (800b1b4 <HAL_DMA_Init+0x564>)
 800b080:	484d      	ldr	r0, [pc, #308]	; (800b1b8 <HAL_DMA_Init+0x568>)
 800b082:	428b      	cmp	r3, r1
 800b084:	bf18      	it	ne
 800b086:	4293      	cmpne	r3, r2
 800b088:	f101 0128 	add.w	r1, r1, #40	; 0x28
 800b08c:	4d4b      	ldr	r5, [pc, #300]	; (800b1bc <HAL_DMA_Init+0x56c>)
 800b08e:	bf0c      	ite	eq
 800b090:	2201      	moveq	r2, #1
 800b092:	2200      	movne	r2, #0
 800b094:	4283      	cmp	r3, r0
 800b096:	bf08      	it	eq
 800b098:	f042 0201 	orreq.w	r2, r2, #1
 800b09c:	303c      	adds	r0, #60	; 0x3c
 800b09e:	428b      	cmp	r3, r1
 800b0a0:	bf08      	it	eq
 800b0a2:	f042 0201 	orreq.w	r2, r2, #1
 800b0a6:	313c      	adds	r1, #60	; 0x3c
 800b0a8:	42ab      	cmp	r3, r5
 800b0aa:	bf08      	it	eq
 800b0ac:	f042 0201 	orreq.w	r2, r2, #1
 800b0b0:	4283      	cmp	r3, r0
 800b0b2:	bf08      	it	eq
 800b0b4:	f042 0201 	orreq.w	r2, r2, #1
 800b0b8:	428b      	cmp	r3, r1
 800b0ba:	bf08      	it	eq
 800b0bc:	f042 0201 	orreq.w	r2, r2, #1
 800b0c0:	b912      	cbnz	r2, 800b0c8 <HAL_DMA_Init+0x478>
 800b0c2:	4a3f      	ldr	r2, [pc, #252]	; (800b1c0 <HAL_DMA_Init+0x570>)
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	d16c      	bne.n	800b1a2 <HAL_DMA_Init+0x552>
    hdma->State = HAL_DMA_STATE_BUSY;
 800b0c8:	2002      	movs	r0, #2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800b0ca:	68a2      	ldr	r2, [r4, #8]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800b0cc:	493d      	ldr	r1, [pc, #244]	; (800b1c4 <HAL_DMA_Init+0x574>)
    __HAL_UNLOCK(hdma);
 800b0ce:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 800b0d0:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800b0d4:	2a40      	cmp	r2, #64	; 0x40
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800b0d6:	6818      	ldr	r0, [r3, #0]
    __HAL_UNLOCK(hdma);
 800b0d8:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800b0dc:	ea01 0100 	and.w	r1, r1, r0
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800b0e0:	d05d      	beq.n	800b19e <HAL_DMA_Init+0x54e>
 800b0e2:	2a80      	cmp	r2, #128	; 0x80
 800b0e4:	bf14      	ite	ne
 800b0e6:	462f      	movne	r7, r5
 800b0e8:	f44f 4780 	moveq.w	r7, #16384	; 0x4000
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800b0ec:	6922      	ldr	r2, [r4, #16]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b0ee:	4620      	mov	r0, r4
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800b0f0:	68e6      	ldr	r6, [r4, #12]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800b0f2:	08d2      	lsrs	r2, r2, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800b0f4:	6965      	ldr	r5, [r4, #20]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800b0f6:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 800b1e4 <HAL_DMA_Init+0x594>
 800b0fa:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800b0fe:	69a6      	ldr	r6, [r4, #24]
 800b100:	ea42 02d5 	orr.w	r2, r2, r5, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800b104:	69e5      	ldr	r5, [r4, #28]
 800b106:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800b10a:	4e2f      	ldr	r6, [pc, #188]	; (800b1c8 <HAL_DMA_Init+0x578>)
 800b10c:	ea42 02d5 	orr.w	r2, r2, r5, lsr #3
 800b110:	441e      	add	r6, r3
 800b112:	6a25      	ldr	r5, [r4, #32]
 800b114:	ea42 1215 	orr.w	r2, r2, r5, lsr #4
 800b118:	fbac 5606 	umull	r5, r6, ip, r6
 800b11c:	430a      	orrs	r2, r1
 800b11e:	0931      	lsrs	r1, r6, #4
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800b120:	433a      	orrs	r2, r7
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800b122:	0089      	lsls	r1, r1, #2
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800b124:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800b126:	65e1      	str	r1, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b128:	f7ff fd16 	bl	800ab58 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800b12c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800b12e:	2301      	movs	r3, #1
 800b130:	f002 021f 	and.w	r2, r2, #31
 800b134:	4093      	lsls	r3, r2
 800b136:	6043      	str	r3, [r0, #4]
 800b138:	e62b      	b.n	800ad92 <HAL_DMA_Init+0x142>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b13a:	f1a3 0010 	sub.w	r0, r3, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800b13e:	4b23      	ldr	r3, [pc, #140]	; (800b1cc <HAL_DMA_Init+0x57c>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b140:	4d23      	ldr	r5, [pc, #140]	; (800b1d0 <HAL_DMA_Init+0x580>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800b142:	4413      	add	r3, r2
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b144:	fba5 5000 	umull	r5, r0, r5, r0
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800b148:	2ba8      	cmp	r3, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b14a:	ea4f 1010 	mov.w	r0, r0, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800b14e:	d800      	bhi.n	800b152 <HAL_DMA_Init+0x502>
      stream_number += 8U;
 800b150:	3008      	adds	r0, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800b152:	4a20      	ldr	r2, [pc, #128]	; (800b1d4 <HAL_DMA_Init+0x584>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b154:	f000 051f 	and.w	r5, r0, #31
 800b158:	2301      	movs	r3, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800b15a:	4402      	add	r2, r0
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800b15c:	481e      	ldr	r0, [pc, #120]	; (800b1d8 <HAL_DMA_Init+0x588>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b15e:	40ab      	lsls	r3, r5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800b160:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b162:	4605      	mov	r5, r0
 800b164:	66a3      	str	r3, [r4, #104]	; 0x68
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800b166:	e9c4 2018 	strd	r2, r0, [r4, #96]	; 0x60
 800b16a:	e6d0      	b.n	800af0e <HAL_DMA_Init+0x2be>
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b16c:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 800b170:	f47f ae05 	bne.w	800ad7e <HAL_DMA_Init+0x12e>
 800b174:	e72a      	b.n	800afcc <HAL_DMA_Init+0x37c>
    switch (hdma->Init.FIFOThreshold)
 800b176:	2d03      	cmp	r5, #3
 800b178:	f63f ae01 	bhi.w	800ad7e <HAL_DMA_Init+0x12e>
 800b17c:	a101      	add	r1, pc, #4	; (adr r1, 800b184 <HAL_DMA_Init+0x534>)
 800b17e:	f851 f025 	ldr.w	pc, [r1, r5, lsl #2]
 800b182:	bf00      	nop
 800b184:	0800afcd 	.word	0x0800afcd
 800b188:	0800afc7 	.word	0x0800afc7
 800b18c:	0800afcd 	.word	0x0800afcd
 800b190:	0800b16d 	.word	0x0800b16d
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b194:	4b11      	ldr	r3, [pc, #68]	; (800b1dc <HAL_DMA_Init+0x58c>)
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800b196:	4912      	ldr	r1, [pc, #72]	; (800b1e0 <HAL_DMA_Init+0x590>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b198:	4433      	add	r3, r6
 800b19a:	009b      	lsls	r3, r3, #2
 800b19c:	e6cb      	b.n	800af36 <HAL_DMA_Init+0x2e6>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800b19e:	2710      	movs	r7, #16
 800b1a0:	e7a4      	b.n	800b0ec <HAL_DMA_Init+0x49c>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b1a2:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 800b1a4:	2303      	movs	r3, #3
    return HAL_ERROR;
 800b1a6:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b1a8:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800b1aa:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 800b1ae:	e6d7      	b.n	800af60 <HAL_DMA_Init+0x310>
 800b1b0:	58025408 	.word	0x58025408
 800b1b4:	5802541c 	.word	0x5802541c
 800b1b8:	58025430 	.word	0x58025430
 800b1bc:	58025458 	.word	0x58025458
 800b1c0:	58025494 	.word	0x58025494
 800b1c4:	fffe000f 	.word	0xfffe000f
 800b1c8:	a7fdabf8 	.word	0xa7fdabf8
 800b1cc:	bffdfbf0 	.word	0xbffdfbf0
 800b1d0:	aaaaaaab 	.word	0xaaaaaaab
 800b1d4:	10008200 	.word	0x10008200
 800b1d8:	40020880 	.word	0x40020880
 800b1dc:	1000823f 	.word	0x1000823f
 800b1e0:	40020940 	.word	0x40020940
 800b1e4:	cccccccd 	.word	0xcccccccd

0800b1e8 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 800b1e8:	2800      	cmp	r0, #0
 800b1ea:	f000 810b 	beq.w	800b404 <HAL_DMA_DeInit+0x21c>
  __HAL_DMA_DISABLE(hdma);
 800b1ee:	6803      	ldr	r3, [r0, #0]
 800b1f0:	4a92      	ldr	r2, [pc, #584]	; (800b43c <HAL_DMA_DeInit+0x254>)
 800b1f2:	4993      	ldr	r1, [pc, #588]	; (800b440 <HAL_DMA_DeInit+0x258>)
{
 800b1f4:	b570      	push	{r4, r5, r6, lr}
 800b1f6:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 800b1f8:	4892      	ldr	r0, [pc, #584]	; (800b444 <HAL_DMA_DeInit+0x25c>)
 800b1fa:	4d93      	ldr	r5, [pc, #588]	; (800b448 <HAL_DMA_DeInit+0x260>)
 800b1fc:	4283      	cmp	r3, r0
 800b1fe:	bf18      	it	ne
 800b200:	4293      	cmpne	r3, r2
 800b202:	f100 0030 	add.w	r0, r0, #48	; 0x30
 800b206:	bf0c      	ite	eq
 800b208:	2201      	moveq	r2, #1
 800b20a:	2200      	movne	r2, #0
 800b20c:	428b      	cmp	r3, r1
 800b20e:	bf08      	it	eq
 800b210:	f042 0201 	orreq.w	r2, r2, #1
 800b214:	3148      	adds	r1, #72	; 0x48
 800b216:	4283      	cmp	r3, r0
 800b218:	bf08      	it	eq
 800b21a:	f042 0201 	orreq.w	r2, r2, #1
 800b21e:	f500 7062 	add.w	r0, r0, #904	; 0x388
 800b222:	42ab      	cmp	r3, r5
 800b224:	bf08      	it	eq
 800b226:	f042 0201 	orreq.w	r2, r2, #1
 800b22a:	f505 7562 	add.w	r5, r5, #904	; 0x388
 800b22e:	428b      	cmp	r3, r1
 800b230:	bf08      	it	eq
 800b232:	f042 0201 	orreq.w	r2, r2, #1
 800b236:	f501 7162 	add.w	r1, r1, #904	; 0x388
 800b23a:	4283      	cmp	r3, r0
 800b23c:	bf08      	it	eq
 800b23e:	f042 0201 	orreq.w	r2, r2, #1
 800b242:	3048      	adds	r0, #72	; 0x48
 800b244:	42ab      	cmp	r3, r5
 800b246:	bf08      	it	eq
 800b248:	f042 0201 	orreq.w	r2, r2, #1
 800b24c:	3548      	adds	r5, #72	; 0x48
 800b24e:	428b      	cmp	r3, r1
 800b250:	bf08      	it	eq
 800b252:	f042 0201 	orreq.w	r2, r2, #1
 800b256:	3148      	adds	r1, #72	; 0x48
 800b258:	4283      	cmp	r3, r0
 800b25a:	bf08      	it	eq
 800b25c:	f042 0201 	orreq.w	r2, r2, #1
 800b260:	3048      	adds	r0, #72	; 0x48
 800b262:	42ab      	cmp	r3, r5
 800b264:	bf08      	it	eq
 800b266:	f042 0201 	orreq.w	r2, r2, #1
 800b26a:	3548      	adds	r5, #72	; 0x48
 800b26c:	428b      	cmp	r3, r1
 800b26e:	bf08      	it	eq
 800b270:	f042 0201 	orreq.w	r2, r2, #1
 800b274:	f5a1 618f 	sub.w	r1, r1, #1144	; 0x478
 800b278:	4283      	cmp	r3, r0
 800b27a:	bf08      	it	eq
 800b27c:	f042 0201 	orreq.w	r2, r2, #1
 800b280:	f5a0 608f 	sub.w	r0, r0, #1144	; 0x478
 800b284:	42ab      	cmp	r3, r5
 800b286:	bf08      	it	eq
 800b288:	f042 0201 	orreq.w	r2, r2, #1
 800b28c:	4283      	cmp	r3, r0
 800b28e:	bf18      	it	ne
 800b290:	428b      	cmpne	r3, r1
 800b292:	bf0c      	ite	eq
 800b294:	2101      	moveq	r1, #1
 800b296:	2100      	movne	r1, #0
 800b298:	b912      	cbnz	r2, 800b2a0 <HAL_DMA_DeInit+0xb8>
 800b29a:	2900      	cmp	r1, #0
 800b29c:	f000 80f4 	beq.w	800b488 <HAL_DMA_DeInit+0x2a0>
 800b2a0:	681a      	ldr	r2, [r3, #0]
 800b2a2:	f022 0201 	bic.w	r2, r2, #1
 800b2a6:	601a      	str	r2, [r3, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b2a8:	2900      	cmp	r1, #0
 800b2aa:	d170      	bne.n	800b38e <HAL_DMA_DeInit+0x1a6>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 800b2ac:	2221      	movs	r2, #33	; 0x21
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 800b2ae:	6019      	str	r1, [r3, #0]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 800b2b0:	6059      	str	r1, [r3, #4]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 800b2b2:	6099      	str	r1, [r3, #8]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 800b2b4:	60d9      	str	r1, [r3, #12]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 800b2b6:	6119      	str	r1, [r3, #16]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 800b2b8:	615a      	str	r2, [r3, #20]
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b2ba:	b2da      	uxtb	r2, r3
 800b2bc:	4863      	ldr	r0, [pc, #396]	; (800b44c <HAL_DMA_DeInit+0x264>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800b2be:	4d64      	ldr	r5, [pc, #400]	; (800b450 <HAL_DMA_DeInit+0x268>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b2c0:	3a10      	subs	r2, #16
 800b2c2:	4964      	ldr	r1, [pc, #400]	; (800b454 <HAL_DMA_DeInit+0x26c>)
 800b2c4:	fba0 0202 	umull	r0, r2, r0, r2
 800b2c8:	4019      	ands	r1, r3
 800b2ca:	0912      	lsrs	r2, r2, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800b2cc:	f002 0007 	and.w	r0, r2, #7
    if (stream_number > 3U)
 800b2d0:	2a03      	cmp	r2, #3
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800b2d2:	f04f 023f 	mov.w	r2, #63	; 0x3f
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800b2d6:	5c28      	ldrb	r0, [r5, r0]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800b2d8:	bf88      	it	hi
 800b2da:	3104      	addhi	r1, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800b2dc:	65e0      	str	r0, [r4, #92]	; 0x5c
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800b2de:	f000 001f 	and.w	r0, r0, #31
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800b2e2:	65a1      	str	r1, [r4, #88]	; 0x58
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800b2e4:	fa02 f000 	lsl.w	r0, r2, r0
 800b2e8:	6088      	str	r0, [r1, #8]
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800b2ea:	4a5b      	ldr	r2, [pc, #364]	; (800b458 <HAL_DMA_DeInit+0x270>)
 800b2ec:	b2d9      	uxtb	r1, r3
 800b2ee:	4d5b      	ldr	r5, [pc, #364]	; (800b45c <HAL_DMA_DeInit+0x274>)
 800b2f0:	485b      	ldr	r0, [pc, #364]	; (800b460 <HAL_DMA_DeInit+0x278>)
 800b2f2:	42ab      	cmp	r3, r5
 800b2f4:	bf18      	it	ne
 800b2f6:	4293      	cmpne	r3, r2
 800b2f8:	f105 0528 	add.w	r5, r5, #40	; 0x28
 800b2fc:	bf0c      	ite	eq
 800b2fe:	2201      	moveq	r2, #1
 800b300:	2200      	movne	r2, #0
 800b302:	4283      	cmp	r3, r0
 800b304:	bf08      	it	eq
 800b306:	f042 0201 	orreq.w	r2, r2, #1
 800b30a:	3028      	adds	r0, #40	; 0x28
 800b30c:	42ab      	cmp	r3, r5
 800b30e:	bf08      	it	eq
 800b310:	f042 0201 	orreq.w	r2, r2, #1
 800b314:	3528      	adds	r5, #40	; 0x28
 800b316:	4283      	cmp	r3, r0
 800b318:	bf08      	it	eq
 800b31a:	f042 0201 	orreq.w	r2, r2, #1
 800b31e:	3028      	adds	r0, #40	; 0x28
 800b320:	42ab      	cmp	r3, r5
 800b322:	bf08      	it	eq
 800b324:	f042 0201 	orreq.w	r2, r2, #1
 800b328:	4283      	cmp	r3, r0
 800b32a:	bf08      	it	eq
 800b32c:	f042 0201 	orreq.w	r2, r2, #1
 800b330:	b912      	cbnz	r2, 800b338 <HAL_DMA_DeInit+0x150>
 800b332:	4a4c      	ldr	r2, [pc, #304]	; (800b464 <HAL_DMA_DeInit+0x27c>)
 800b334:	4293      	cmp	r3, r2
 800b336:	d167      	bne.n	800b408 <HAL_DMA_DeInit+0x220>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800b338:	f1a1 0208 	sub.w	r2, r1, #8
 800b33c:	4d4a      	ldr	r5, [pc, #296]	; (800b468 <HAL_DMA_DeInit+0x280>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800b33e:	494b      	ldr	r1, [pc, #300]	; (800b46c <HAL_DMA_DeInit+0x284>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b340:	2001      	movs	r0, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800b342:	fba5 5202 	umull	r5, r2, r5, r2
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800b346:	4d4a      	ldr	r5, [pc, #296]	; (800b470 <HAL_DMA_DeInit+0x288>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800b348:	0912      	lsrs	r2, r2, #4
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800b34a:	6665      	str	r5, [r4, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800b34c:	4411      	add	r1, r2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b34e:	f002 021f 	and.w	r2, r2, #31
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800b352:	0089      	lsls	r1, r1, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b354:	fa00 f202 	lsl.w	r2, r0, r2
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800b358:	6621      	str	r1, [r4, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b35a:	66a2      	str	r2, [r4, #104]	; 0x68
    if(hdma->DMAmuxChannel != 0U)
 800b35c:	b111      	cbz	r1, 800b364 <HAL_DMA_DeInit+0x17c>
      hdma->DMAmuxChannel->CCR = 0U;
 800b35e:	2000      	movs	r0, #0
 800b360:	6008      	str	r0, [r1, #0]
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b362:	606a      	str	r2, [r5, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800b364:	6860      	ldr	r0, [r4, #4]
 800b366:	1e41      	subs	r1, r0, #1
 800b368:	2907      	cmp	r1, #7
 800b36a:	d919      	bls.n	800b3a0 <HAL_DMA_DeInit+0x1b8>
    hdma->DMAmuxRequestGen = 0U;
 800b36c:	2300      	movs	r3, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b36e:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 800b370:	4618      	mov	r0, r3
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800b372:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->State = HAL_DMA_STATE_RESET;
 800b374:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 800b378:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->DMAmuxRequestGenStatus = 0U;
 800b37c:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
  hdma->XferHalfCpltCallback   = NULL;
 800b380:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 800b384:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
  hdma->XferAbortCallback      = NULL;
 800b388:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
}
 800b38c:	bd70      	pop	{r4, r5, r6, pc}
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 800b38e:	2200      	movs	r2, #0
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 800b390:	2121      	movs	r1, #33	; 0x21
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 800b392:	601a      	str	r2, [r3, #0]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 800b394:	605a      	str	r2, [r3, #4]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 800b396:	609a      	str	r2, [r3, #8]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 800b398:	60da      	str	r2, [r3, #12]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 800b39a:	611a      	str	r2, [r3, #16]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 800b39c:	6159      	str	r1, [r3, #20]
 800b39e:	e78c      	b.n	800b2ba <HAL_DMA_DeInit+0xd2>
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800b3a0:	4a2d      	ldr	r2, [pc, #180]	; (800b458 <HAL_DMA_DeInit+0x270>)
 800b3a2:	4e2e      	ldr	r6, [pc, #184]	; (800b45c <HAL_DMA_DeInit+0x274>)
 800b3a4:	4d2e      	ldr	r5, [pc, #184]	; (800b460 <HAL_DMA_DeInit+0x278>)
 800b3a6:	42b3      	cmp	r3, r6
 800b3a8:	bf18      	it	ne
 800b3aa:	4293      	cmpne	r3, r2
 800b3ac:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800b3b0:	bf0c      	ite	eq
 800b3b2:	2201      	moveq	r2, #1
 800b3b4:	2200      	movne	r2, #0
 800b3b6:	42ab      	cmp	r3, r5
 800b3b8:	bf08      	it	eq
 800b3ba:	f042 0201 	orreq.w	r2, r2, #1
 800b3be:	3528      	adds	r5, #40	; 0x28
 800b3c0:	42b3      	cmp	r3, r6
 800b3c2:	bf08      	it	eq
 800b3c4:	f042 0201 	orreq.w	r2, r2, #1
 800b3c8:	3628      	adds	r6, #40	; 0x28
 800b3ca:	42ab      	cmp	r3, r5
 800b3cc:	bf08      	it	eq
 800b3ce:	f042 0201 	orreq.w	r2, r2, #1
 800b3d2:	3528      	adds	r5, #40	; 0x28
 800b3d4:	42b3      	cmp	r3, r6
 800b3d6:	bf08      	it	eq
 800b3d8:	f042 0201 	orreq.w	r2, r2, #1
 800b3dc:	42ab      	cmp	r3, r5
 800b3de:	bf08      	it	eq
 800b3e0:	f042 0201 	orreq.w	r2, r2, #1
 800b3e4:	b91a      	cbnz	r2, 800b3ee <HAL_DMA_DeInit+0x206>
 800b3e6:	4a1f      	ldr	r2, [pc, #124]	; (800b464 <HAL_DMA_DeInit+0x27c>)
 800b3e8:	4293      	cmp	r3, r2
 800b3ea:	f040 808a 	bne.w	800b502 <HAL_DMA_DeInit+0x31a>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800b3ee:	4a21      	ldr	r2, [pc, #132]	; (800b474 <HAL_DMA_DeInit+0x28c>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800b3f0:	4d21      	ldr	r5, [pc, #132]	; (800b478 <HAL_DMA_DeInit+0x290>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800b3f2:	4402      	add	r2, r0
 800b3f4:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800b3f6:	2301      	movs	r3, #1
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800b3f8:	2000      	movs	r0, #0
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800b3fa:	fa03 f101 	lsl.w	r1, r3, r1
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800b3fe:	6010      	str	r0, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b400:	6069      	str	r1, [r5, #4]
 800b402:	e7b3      	b.n	800b36c <HAL_DMA_DeInit+0x184>
    return HAL_ERROR;
 800b404:	2001      	movs	r0, #1
}
 800b406:	4770      	bx	lr
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800b408:	4a1c      	ldr	r2, [pc, #112]	; (800b47c <HAL_DMA_DeInit+0x294>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b40a:	f1a1 0010 	sub.w	r0, r1, #16
 800b40e:	490f      	ldr	r1, [pc, #60]	; (800b44c <HAL_DMA_DeInit+0x264>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800b410:	441a      	add	r2, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b412:	fba1 1000 	umull	r1, r0, r1, r0
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800b416:	2aa8      	cmp	r2, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b418:	ea4f 1010 	mov.w	r0, r0, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800b41c:	d800      	bhi.n	800b420 <HAL_DMA_DeInit+0x238>
      stream_number += 8U;
 800b41e:	3008      	adds	r0, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800b420:	4917      	ldr	r1, [pc, #92]	; (800b480 <HAL_DMA_DeInit+0x298>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b422:	f000 051f 	and.w	r5, r0, #31
 800b426:	2201      	movs	r2, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800b428:	4401      	add	r1, r0
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800b42a:	4816      	ldr	r0, [pc, #88]	; (800b484 <HAL_DMA_DeInit+0x29c>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b42c:	40aa      	lsls	r2, r5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800b42e:	0089      	lsls	r1, r1, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b430:	4605      	mov	r5, r0
 800b432:	66a2      	str	r2, [r4, #104]	; 0x68
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800b434:	e9c4 1018 	strd	r1, r0, [r4, #96]	; 0x60
 800b438:	e790      	b.n	800b35c <HAL_DMA_DeInit+0x174>
 800b43a:	bf00      	nop
 800b43c:	40020040 	.word	0x40020040
 800b440:	40020070 	.word	0x40020070
 800b444:	40020058 	.word	0x40020058
 800b448:	400200a0 	.word	0x400200a0
 800b44c:	aaaaaaab 	.word	0xaaaaaaab
 800b450:	080213d4 	.word	0x080213d4
 800b454:	fffffc00 	.word	0xfffffc00
 800b458:	58025408 	.word	0x58025408
 800b45c:	5802541c 	.word	0x5802541c
 800b460:	58025430 	.word	0x58025430
 800b464:	58025494 	.word	0x58025494
 800b468:	cccccccd 	.word	0xcccccccd
 800b46c:	16009600 	.word	0x16009600
 800b470:	58025880 	.word	0x58025880
 800b474:	1600963f 	.word	0x1600963f
 800b478:	58025940 	.word	0x58025940
 800b47c:	bffdfbf0 	.word	0xbffdfbf0
 800b480:	10008200 	.word	0x10008200
 800b484:	40020880 	.word	0x40020880
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800b488:	4a20      	ldr	r2, [pc, #128]	; (800b50c <HAL_DMA_DeInit+0x324>)
 800b48a:	4921      	ldr	r1, [pc, #132]	; (800b510 <HAL_DMA_DeInit+0x328>)
 800b48c:	4d21      	ldr	r5, [pc, #132]	; (800b514 <HAL_DMA_DeInit+0x32c>)
 800b48e:	428b      	cmp	r3, r1
 800b490:	bf18      	it	ne
 800b492:	4293      	cmpne	r3, r2
 800b494:	4820      	ldr	r0, [pc, #128]	; (800b518 <HAL_DMA_DeInit+0x330>)
 800b496:	f101 013c 	add.w	r1, r1, #60	; 0x3c
 800b49a:	bf0c      	ite	eq
 800b49c:	2201      	moveq	r2, #1
 800b49e:	2200      	movne	r2, #0
 800b4a0:	42ab      	cmp	r3, r5
 800b4a2:	bf08      	it	eq
 800b4a4:	f042 0201 	orreq.w	r2, r2, #1
 800b4a8:	353c      	adds	r5, #60	; 0x3c
 800b4aa:	4283      	cmp	r3, r0
 800b4ac:	bf08      	it	eq
 800b4ae:	f042 0201 	orreq.w	r2, r2, #1
 800b4b2:	303c      	adds	r0, #60	; 0x3c
 800b4b4:	428b      	cmp	r3, r1
 800b4b6:	bf08      	it	eq
 800b4b8:	f042 0201 	orreq.w	r2, r2, #1
  __HAL_DMA_DISABLE(hdma);
 800b4bc:	6819      	ldr	r1, [r3, #0]
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800b4be:	42ab      	cmp	r3, r5
 800b4c0:	bf08      	it	eq
 800b4c2:	f042 0201 	orreq.w	r2, r2, #1
  __HAL_DMA_DISABLE(hdma);
 800b4c6:	f021 0101 	bic.w	r1, r1, #1
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800b4ca:	4283      	cmp	r3, r0
 800b4cc:	bf08      	it	eq
 800b4ce:	f042 0201 	orreq.w	r2, r2, #1
  __HAL_DMA_DISABLE(hdma);
 800b4d2:	6019      	str	r1, [r3, #0]
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800b4d4:	b912      	cbnz	r2, 800b4dc <HAL_DMA_DeInit+0x2f4>
 800b4d6:	4a11      	ldr	r2, [pc, #68]	; (800b51c <HAL_DMA_DeInit+0x334>)
 800b4d8:	4293      	cmp	r3, r2
 800b4da:	d110      	bne.n	800b4fe <HAL_DMA_DeInit+0x316>
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 800b4dc:	2200      	movs	r2, #0
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b4de:	4620      	mov	r0, r4
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 800b4e0:	601a      	str	r2, [r3, #0]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 800b4e2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 800b4e4:	609a      	str	r2, [r3, #8]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 800b4e6:	60da      	str	r2, [r3, #12]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 800b4e8:	611a      	str	r2, [r3, #16]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b4ea:	f7ff fb35 	bl	800ab58 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800b4ee:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b4f0:	2201      	movs	r2, #1
 800b4f2:	6823      	ldr	r3, [r4, #0]
 800b4f4:	f001 011f 	and.w	r1, r1, #31
 800b4f8:	408a      	lsls	r2, r1
 800b4fa:	6042      	str	r2, [r0, #4]
 800b4fc:	e6f5      	b.n	800b2ea <HAL_DMA_DeInit+0x102>
    return HAL_ERROR;
 800b4fe:	2001      	movs	r0, #1
}
 800b500:	bd70      	pop	{r4, r5, r6, pc}
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b502:	4a07      	ldr	r2, [pc, #28]	; (800b520 <HAL_DMA_DeInit+0x338>)
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800b504:	4d07      	ldr	r5, [pc, #28]	; (800b524 <HAL_DMA_DeInit+0x33c>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b506:	4402      	add	r2, r0
 800b508:	0092      	lsls	r2, r2, #2
 800b50a:	e774      	b.n	800b3f6 <HAL_DMA_DeInit+0x20e>
 800b50c:	58025408 	.word	0x58025408
 800b510:	5802541c 	.word	0x5802541c
 800b514:	58025430 	.word	0x58025430
 800b518:	58025444 	.word	0x58025444
 800b51c:	58025494 	.word	0x58025494
 800b520:	1000823f 	.word	0x1000823f
 800b524:	40020940 	.word	0x40020940

0800b528 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 800b528:	2800      	cmp	r0, #0
 800b52a:	f000 8104 	beq.w	800b736 <HAL_DMA_Start_IT+0x20e>
{
 800b52e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b532:	4605      	mov	r5, r0
  __HAL_LOCK(hdma);
 800b534:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 800b538:	2801      	cmp	r0, #1
 800b53a:	f000 8138 	beq.w	800b7ae <HAL_DMA_Start_IT+0x286>
 800b53e:	2001      	movs	r0, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 800b540:	f895 4035 	ldrb.w	r4, [r5, #53]	; 0x35
 800b544:	4284      	cmp	r4, r0
  __HAL_LOCK(hdma);
 800b546:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800b54a:	d007      	beq.n	800b55c <HAL_DMA_Start_IT+0x34>
    __HAL_UNLOCK(hdma);
 800b54c:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800b54e:	f44f 6300 	mov.w	r3, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 800b552:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800b556:	656b      	str	r3, [r5, #84]	; 0x54
}
 800b558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_DMA_DISABLE(hdma);
 800b55c:	682c      	ldr	r4, [r5, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 800b55e:	f04f 0e02 	mov.w	lr, #2
    __HAL_DMA_DISABLE(hdma);
 800b562:	489b      	ldr	r0, [pc, #620]	; (800b7d0 <HAL_DMA_Start_IT+0x2a8>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b564:	f04f 0c00 	mov.w	ip, #0
    __HAL_DMA_DISABLE(hdma);
 800b568:	4f9a      	ldr	r7, [pc, #616]	; (800b7d4 <HAL_DMA_Start_IT+0x2ac>)
 800b56a:	4e9b      	ldr	r6, [pc, #620]	; (800b7d8 <HAL_DMA_Start_IT+0x2b0>)
 800b56c:	42bc      	cmp	r4, r7
 800b56e:	bf18      	it	ne
 800b570:	4284      	cmpne	r4, r0
 800b572:	f107 0748 	add.w	r7, r7, #72	; 0x48
    hdma->State = HAL_DMA_STATE_BUSY;
 800b576:	f885 e035 	strb.w	lr, [r5, #53]	; 0x35
 800b57a:	bf0c      	ite	eq
 800b57c:	2001      	moveq	r0, #1
 800b57e:	2000      	movne	r0, #0
    __HAL_DMA_DISABLE(hdma);
 800b580:	f8df e264 	ldr.w	lr, [pc, #612]	; 800b7e8 <HAL_DMA_Start_IT+0x2c0>
 800b584:	42b4      	cmp	r4, r6
 800b586:	bf08      	it	eq
 800b588:	f040 0001 	orreq.w	r0, r0, #1
 800b58c:	3630      	adds	r6, #48	; 0x30
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b58e:	f8c5 c054 	str.w	ip, [r5, #84]	; 0x54
 800b592:	42bc      	cmp	r4, r7
 800b594:	bf08      	it	eq
 800b596:	f040 0001 	orreq.w	r0, r0, #1
    __HAL_DMA_DISABLE(hdma);
 800b59a:	f507 7762 	add.w	r7, r7, #904	; 0x388
 800b59e:	f8df c24c 	ldr.w	ip, [pc, #588]	; 800b7ec <HAL_DMA_Start_IT+0x2c4>
 800b5a2:	42b4      	cmp	r4, r6
 800b5a4:	bf08      	it	eq
 800b5a6:	f040 0001 	orreq.w	r0, r0, #1
 800b5aa:	f506 7662 	add.w	r6, r6, #904	; 0x388
 800b5ae:	4574      	cmp	r4, lr
 800b5b0:	bf08      	it	eq
 800b5b2:	f040 0001 	orreq.w	r0, r0, #1
 800b5b6:	f50e 7e68 	add.w	lr, lr, #928	; 0x3a0
 800b5ba:	42bc      	cmp	r4, r7
 800b5bc:	bf08      	it	eq
 800b5be:	f040 0001 	orreq.w	r0, r0, #1
 800b5c2:	3760      	adds	r7, #96	; 0x60
 800b5c4:	42b4      	cmp	r4, r6
 800b5c6:	bf08      	it	eq
 800b5c8:	f040 0001 	orreq.w	r0, r0, #1
 800b5cc:	3660      	adds	r6, #96	; 0x60
 800b5ce:	4564      	cmp	r4, ip
 800b5d0:	bf08      	it	eq
 800b5d2:	f040 0001 	orreq.w	r0, r0, #1
 800b5d6:	f10c 0c60 	add.w	ip, ip, #96	; 0x60
 800b5da:	4574      	cmp	r4, lr
 800b5dc:	bf08      	it	eq
 800b5de:	f040 0001 	orreq.w	r0, r0, #1
 800b5e2:	f10e 0e60 	add.w	lr, lr, #96	; 0x60
 800b5e6:	42bc      	cmp	r4, r7
 800b5e8:	bf08      	it	eq
 800b5ea:	f040 0001 	orreq.w	r0, r0, #1
 800b5ee:	f5a7 678c 	sub.w	r7, r7, #1120	; 0x460
 800b5f2:	42b4      	cmp	r4, r6
 800b5f4:	bf08      	it	eq
 800b5f6:	f040 0001 	orreq.w	r0, r0, #1
 800b5fa:	f5a6 668c 	sub.w	r6, r6, #1120	; 0x460
 800b5fe:	4564      	cmp	r4, ip
 800b600:	bf08      	it	eq
 800b602:	f040 0001 	orreq.w	r0, r0, #1
 800b606:	f8d5 c058 	ldr.w	ip, [r5, #88]	; 0x58
 800b60a:	4574      	cmp	r4, lr
 800b60c:	bf14      	ite	ne
 800b60e:	4682      	movne	sl, r0
 800b610:	f040 0a01 	orreq.w	sl, r0, #1
 800b614:	42b4      	cmp	r4, r6
 800b616:	bf18      	it	ne
 800b618:	42bc      	cmpne	r4, r7
 800b61a:	6827      	ldr	r7, [r4, #0]
 800b61c:	bf0c      	ite	eq
 800b61e:	2601      	moveq	r6, #1
 800b620:	2600      	movne	r6, #0
 800b622:	f027 0701 	bic.w	r7, r7, #1
 800b626:	6027      	str	r7, [r4, #0]
 800b628:	d003      	beq.n	800b632 <HAL_DMA_Start_IT+0x10a>
 800b62a:	f1ba 0f00 	cmp.w	sl, #0
 800b62e:	f000 8084 	beq.w	800b73a <HAL_DMA_Start_IT+0x212>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b632:	2e00      	cmp	r6, #0
 800b634:	f000 8081 	beq.w	800b73a <HAL_DMA_Start_IT+0x212>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b638:	6e6f      	ldr	r7, [r5, #100]	; 0x64
 800b63a:	e9d5 0e1a 	ldrd	r0, lr, [r5, #104]	; 0x68
 800b63e:	6078      	str	r0, [r7, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 800b640:	f1be 0f00 	cmp.w	lr, #0
 800b644:	d007      	beq.n	800b656 <HAL_DMA_Start_IT+0x12e>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b646:	e9d5 701c 	ldrd	r7, r0, [r5, #112]	; 0x70
 800b64a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b64c:	b91e      	cbnz	r6, 800b656 <HAL_DMA_Start_IT+0x12e>
 800b64e:	f1ba 0f00 	cmp.w	sl, #0
 800b652:	f000 80cd 	beq.w	800b7f0 <HAL_DMA_Start_IT+0x2c8>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800b656:	6def      	ldr	r7, [r5, #92]	; 0x5c
 800b658:	f04f 093f 	mov.w	r9, #63	; 0x3f
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b65c:	f8d5 8008 	ldr.w	r8, [r5, #8]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800b660:	f007 071f 	and.w	r7, r7, #31
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b664:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800b668:	fa09 f707 	lsl.w	r7, r9, r7
 800b66c:	f8cc 7008 	str.w	r7, [ip, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b670:	6827      	ldr	r7, [r4, #0]
 800b672:	f427 2780 	bic.w	r7, r7, #262144	; 0x40000
 800b676:	6027      	str	r7, [r4, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800b678:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b67a:	f000 80a5 	beq.w	800b7c8 <HAL_DMA_Start_IT+0x2a0>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800b67e:	60a1      	str	r1, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800b680:	60e2      	str	r2, [r4, #12]
 800b682:	6c2f      	ldr	r7, [r5, #64]	; 0x40
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b684:	2e00      	cmp	r6, #0
 800b686:	f040 8095 	bne.w	800b7b4 <HAL_DMA_Start_IT+0x28c>
 800b68a:	f1ba 0f00 	cmp.w	sl, #0
 800b68e:	f000 80ee 	beq.w	800b86e <HAL_DMA_Start_IT+0x346>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800b692:	6823      	ldr	r3, [r4, #0]
 800b694:	f023 031e 	bic.w	r3, r3, #30
 800b698:	f043 0316 	orr.w	r3, r3, #22
 800b69c:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800b69e:	b12f      	cbz	r7, 800b6ac <HAL_DMA_Start_IT+0x184>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800b6a0:	6823      	ldr	r3, [r4, #0]
 800b6a2:	f043 0308 	orr.w	r3, r3, #8
 800b6a6:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b6a8:	2e00      	cmp	r6, #0
 800b6aa:	d12c      	bne.n	800b706 <HAL_DMA_Start_IT+0x1de>
 800b6ac:	4b4b      	ldr	r3, [pc, #300]	; (800b7dc <HAL_DMA_Start_IT+0x2b4>)
 800b6ae:	4a4c      	ldr	r2, [pc, #304]	; (800b7e0 <HAL_DMA_Start_IT+0x2b8>)
 800b6b0:	494c      	ldr	r1, [pc, #304]	; (800b7e4 <HAL_DMA_Start_IT+0x2bc>)
 800b6b2:	4294      	cmp	r4, r2
 800b6b4:	bf18      	it	ne
 800b6b6:	429c      	cmpne	r4, r3
 800b6b8:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 800b6bc:	bf0c      	ite	eq
 800b6be:	2301      	moveq	r3, #1
 800b6c0:	2300      	movne	r3, #0
 800b6c2:	428c      	cmp	r4, r1
 800b6c4:	bf08      	it	eq
 800b6c6:	f043 0301 	orreq.w	r3, r3, #1
 800b6ca:	3128      	adds	r1, #40	; 0x28
 800b6cc:	4294      	cmp	r4, r2
 800b6ce:	bf08      	it	eq
 800b6d0:	f043 0301 	orreq.w	r3, r3, #1
 800b6d4:	3228      	adds	r2, #40	; 0x28
 800b6d6:	428c      	cmp	r4, r1
 800b6d8:	bf08      	it	eq
 800b6da:	f043 0301 	orreq.w	r3, r3, #1
 800b6de:	3128      	adds	r1, #40	; 0x28
 800b6e0:	4294      	cmp	r4, r2
 800b6e2:	bf08      	it	eq
 800b6e4:	f043 0301 	orreq.w	r3, r3, #1
 800b6e8:	3228      	adds	r2, #40	; 0x28
 800b6ea:	428c      	cmp	r4, r1
 800b6ec:	bf08      	it	eq
 800b6ee:	f043 0301 	orreq.w	r3, r3, #1
 800b6f2:	4294      	cmp	r4, r2
 800b6f4:	bf08      	it	eq
 800b6f6:	f043 0301 	orreq.w	r3, r3, #1
 800b6fa:	b913      	cbnz	r3, 800b702 <HAL_DMA_Start_IT+0x1da>
 800b6fc:	f1ba 0f00 	cmp.w	sl, #0
 800b700:	d012      	beq.n	800b728 <HAL_DMA_Start_IT+0x200>
 800b702:	f8d5 e06c 	ldr.w	lr, [r5, #108]	; 0x6c
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800b706:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800b708:	681a      	ldr	r2, [r3, #0]
 800b70a:	03d2      	lsls	r2, r2, #15
 800b70c:	d503      	bpl.n	800b716 <HAL_DMA_Start_IT+0x1ee>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800b70e:	681a      	ldr	r2, [r3, #0]
 800b710:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b714:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 800b716:	f1be 0f00 	cmp.w	lr, #0
 800b71a:	d005      	beq.n	800b728 <HAL_DMA_Start_IT+0x200>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800b71c:	f8de 3000 	ldr.w	r3, [lr]
 800b720:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b724:	f8ce 3000 	str.w	r3, [lr]
    __HAL_DMA_ENABLE(hdma);
 800b728:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b72a:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800b72c:	f043 0301 	orr.w	r3, r3, #1
 800b730:	6023      	str	r3, [r4, #0]
}
 800b732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_ERROR;
 800b736:	2001      	movs	r0, #1
}
 800b738:	4770      	bx	lr
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b73a:	4f28      	ldr	r7, [pc, #160]	; (800b7dc <HAL_DMA_Start_IT+0x2b4>)
 800b73c:	f8df e0a0 	ldr.w	lr, [pc, #160]	; 800b7e0 <HAL_DMA_Start_IT+0x2b8>
 800b740:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800b7e4 <HAL_DMA_Start_IT+0x2bc>
 800b744:	4574      	cmp	r4, lr
 800b746:	bf18      	it	ne
 800b748:	42bc      	cmpne	r4, r7
 800b74a:	f10e 0e3c 	add.w	lr, lr, #60	; 0x3c
 800b74e:	bf0c      	ite	eq
 800b750:	2701      	moveq	r7, #1
 800b752:	2700      	movne	r7, #0
 800b754:	4544      	cmp	r4, r8
 800b756:	bf08      	it	eq
 800b758:	f047 0701 	orreq.w	r7, r7, #1
 800b75c:	f108 0828 	add.w	r8, r8, #40	; 0x28
 800b760:	4574      	cmp	r4, lr
 800b762:	bf08      	it	eq
 800b764:	f047 0701 	orreq.w	r7, r7, #1
 800b768:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 800b76c:	4544      	cmp	r4, r8
 800b76e:	bf08      	it	eq
 800b770:	f047 0701 	orreq.w	r7, r7, #1
 800b774:	f108 0828 	add.w	r8, r8, #40	; 0x28
 800b778:	4574      	cmp	r4, lr
 800b77a:	bf08      	it	eq
 800b77c:	f047 0701 	orreq.w	r7, r7, #1
 800b780:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 800b784:	4544      	cmp	r4, r8
 800b786:	bf08      	it	eq
 800b788:	f047 0701 	orreq.w	r7, r7, #1
 800b78c:	4574      	cmp	r4, lr
 800b78e:	bf08      	it	eq
 800b790:	f047 0701 	orreq.w	r7, r7, #1
 800b794:	b917      	cbnz	r7, 800b79c <HAL_DMA_Start_IT+0x274>
 800b796:	f1ba 0f00 	cmp.w	sl, #0
 800b79a:	d029      	beq.n	800b7f0 <HAL_DMA_Start_IT+0x2c8>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b79c:	6e6f      	ldr	r7, [r5, #100]	; 0x64
 800b79e:	e9d5 0e1a 	ldrd	r0, lr, [r5, #104]	; 0x68
 800b7a2:	6078      	str	r0, [r7, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 800b7a4:	f1be 0f00 	cmp.w	lr, #0
 800b7a8:	f47f af4d 	bne.w	800b646 <HAL_DMA_Start_IT+0x11e>
 800b7ac:	e74f      	b.n	800b64e <HAL_DMA_Start_IT+0x126>
  __HAL_LOCK(hdma);
 800b7ae:	2002      	movs	r0, #2
}
 800b7b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800b7b4:	6823      	ldr	r3, [r4, #0]
 800b7b6:	f023 031e 	bic.w	r3, r3, #30
 800b7ba:	f043 0316 	orr.w	r3, r3, #22
 800b7be:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800b7c0:	2f00      	cmp	r7, #0
 800b7c2:	f47f af6d 	bne.w	800b6a0 <HAL_DMA_Start_IT+0x178>
 800b7c6:	e79e      	b.n	800b706 <HAL_DMA_Start_IT+0x1de>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800b7c8:	60a2      	str	r2, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800b7ca:	60e1      	str	r1, [r4, #12]
 800b7cc:	e759      	b.n	800b682 <HAL_DMA_Start_IT+0x15a>
 800b7ce:	bf00      	nop
 800b7d0:	40020058 	.word	0x40020058
 800b7d4:	40020040 	.word	0x40020040
 800b7d8:	40020070 	.word	0x40020070
 800b7dc:	5802541c 	.word	0x5802541c
 800b7e0:	58025408 	.word	0x58025408
 800b7e4:	58025430 	.word	0x58025430
 800b7e8:	400200b8 	.word	0x400200b8
 800b7ec:	40020440 	.word	0x40020440
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800b7f0:	4f28      	ldr	r7, [pc, #160]	; (800b894 <HAL_DMA_Start_IT+0x36c>)
 800b7f2:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 800b89c <HAL_DMA_Start_IT+0x374>
 800b7f6:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 800b8a0 <HAL_DMA_Start_IT+0x378>
 800b7fa:	4544      	cmp	r4, r8
 800b7fc:	bf18      	it	ne
 800b7fe:	42bc      	cmpne	r4, r7
 800b800:	f108 0828 	add.w	r8, r8, #40	; 0x28
 800b804:	bf0c      	ite	eq
 800b806:	2701      	moveq	r7, #1
 800b808:	2700      	movne	r7, #0
 800b80a:	4574      	cmp	r4, lr
 800b80c:	bf08      	it	eq
 800b80e:	f047 0701 	orreq.w	r7, r7, #1
 800b812:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 800b816:	4544      	cmp	r4, r8
 800b818:	bf08      	it	eq
 800b81a:	f047 0701 	orreq.w	r7, r7, #1
 800b81e:	f108 0828 	add.w	r8, r8, #40	; 0x28
 800b822:	4574      	cmp	r4, lr
 800b824:	bf08      	it	eq
 800b826:	f047 0701 	orreq.w	r7, r7, #1
 800b82a:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 800b82e:	4544      	cmp	r4, r8
 800b830:	bf08      	it	eq
 800b832:	f047 0701 	orreq.w	r7, r7, #1
 800b836:	4574      	cmp	r4, lr
 800b838:	bf08      	it	eq
 800b83a:	f047 0701 	orreq.w	r7, r7, #1
 800b83e:	b927      	cbnz	r7, 800b84a <HAL_DMA_Start_IT+0x322>
 800b840:	4f15      	ldr	r7, [pc, #84]	; (800b898 <HAL_DMA_Start_IT+0x370>)
 800b842:	42bc      	cmp	r4, r7
 800b844:	bf18      	it	ne
 800b846:	6c2f      	ldrne	r7, [r5, #64]	; 0x40
 800b848:	d111      	bne.n	800b86e <HAL_DMA_Start_IT+0x346>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800b84a:	6def      	ldr	r7, [r5, #92]	; 0x5c
 800b84c:	f04f 0e01 	mov.w	lr, #1
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b850:	f8d5 8008 	ldr.w	r8, [r5, #8]
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800b854:	f007 071f 	and.w	r7, r7, #31
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b858:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800b85c:	fa0e f707 	lsl.w	r7, lr, r7
 800b860:	f8cc 7004 	str.w	r7, [ip, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800b864:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b866:	d010      	beq.n	800b88a <HAL_DMA_Start_IT+0x362>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800b868:	60a1      	str	r1, [r4, #8]
 800b86a:	6c2f      	ldr	r7, [r5, #64]	; 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800b86c:	60e2      	str	r2, [r4, #12]
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800b86e:	6823      	ldr	r3, [r4, #0]
 800b870:	f023 030e 	bic.w	r3, r3, #14
 800b874:	f043 030a 	orr.w	r3, r3, #10
 800b878:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800b87a:	2f00      	cmp	r7, #0
 800b87c:	f43f af16 	beq.w	800b6ac <HAL_DMA_Start_IT+0x184>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800b880:	6823      	ldr	r3, [r4, #0]
 800b882:	f043 0304 	orr.w	r3, r3, #4
 800b886:	6023      	str	r3, [r4, #0]
 800b888:	e710      	b.n	800b6ac <HAL_DMA_Start_IT+0x184>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800b88a:	60a2      	str	r2, [r4, #8]
 800b88c:	6c2f      	ldr	r7, [r5, #64]	; 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800b88e:	60e1      	str	r1, [r4, #12]
 800b890:	e7ed      	b.n	800b86e <HAL_DMA_Start_IT+0x346>
 800b892:	bf00      	nop
 800b894:	58025408 	.word	0x58025408
 800b898:	58025494 	.word	0x58025494
 800b89c:	5802541c 	.word	0x5802541c
 800b8a0:	58025430 	.word	0x58025430

0800b8a4 <HAL_DMA_Abort>:
{
 800b8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8a6:	4606      	mov	r6, r0
  uint32_t tickstart = HAL_GetTick();
 800b8a8:	f7fe feaa 	bl	800a600 <HAL_GetTick>
  if(hdma == NULL)
 800b8ac:	2e00      	cmp	r6, #0
 800b8ae:	f000 8147 	beq.w	800bb40 <HAL_DMA_Abort+0x29c>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b8b2:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
 800b8b6:	2b02      	cmp	r3, #2
 800b8b8:	d006      	beq.n	800b8c8 <HAL_DMA_Abort+0x24>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b8ba:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 800b8bc:	2300      	movs	r3, #0
    return HAL_ERROR;
 800b8be:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b8c0:	6572      	str	r2, [r6, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 800b8c2:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
}
 800b8c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b8c8:	6834      	ldr	r4, [r6, #0]
 800b8ca:	4605      	mov	r5, r0
 800b8cc:	4b9d      	ldr	r3, [pc, #628]	; (800bb44 <HAL_DMA_Abort+0x2a0>)
 800b8ce:	4a9e      	ldr	r2, [pc, #632]	; (800bb48 <HAL_DMA_Abort+0x2a4>)
 800b8d0:	499e      	ldr	r1, [pc, #632]	; (800bb4c <HAL_DMA_Abort+0x2a8>)
 800b8d2:	4294      	cmp	r4, r2
 800b8d4:	bf18      	it	ne
 800b8d6:	429c      	cmpne	r4, r3
 800b8d8:	f102 0248 	add.w	r2, r2, #72	; 0x48
 800b8dc:	489c      	ldr	r0, [pc, #624]	; (800bb50 <HAL_DMA_Abort+0x2ac>)
 800b8de:	bf0c      	ite	eq
 800b8e0:	2301      	moveq	r3, #1
 800b8e2:	2300      	movne	r3, #0
 800b8e4:	428c      	cmp	r4, r1
 800b8e6:	bf08      	it	eq
 800b8e8:	f043 0301 	orreq.w	r3, r3, #1
 800b8ec:	3148      	adds	r1, #72	; 0x48
 800b8ee:	4294      	cmp	r4, r2
 800b8f0:	bf08      	it	eq
 800b8f2:	f043 0301 	orreq.w	r3, r3, #1
 800b8f6:	f502 7262 	add.w	r2, r2, #904	; 0x388
 800b8fa:	4284      	cmp	r4, r0
 800b8fc:	bf08      	it	eq
 800b8fe:	f043 0301 	orreq.w	r3, r3, #1
 800b902:	f500 7062 	add.w	r0, r0, #904	; 0x388
 800b906:	428c      	cmp	r4, r1
 800b908:	bf08      	it	eq
 800b90a:	f043 0301 	orreq.w	r3, r3, #1
 800b90e:	f501 7162 	add.w	r1, r1, #904	; 0x388
 800b912:	4294      	cmp	r4, r2
 800b914:	bf08      	it	eq
 800b916:	f043 0301 	orreq.w	r3, r3, #1
 800b91a:	3248      	adds	r2, #72	; 0x48
 800b91c:	4284      	cmp	r4, r0
 800b91e:	bf08      	it	eq
 800b920:	f043 0301 	orreq.w	r3, r3, #1
 800b924:	3048      	adds	r0, #72	; 0x48
 800b926:	428c      	cmp	r4, r1
 800b928:	bf08      	it	eq
 800b92a:	f043 0301 	orreq.w	r3, r3, #1
 800b92e:	3148      	adds	r1, #72	; 0x48
 800b930:	4294      	cmp	r4, r2
 800b932:	bf08      	it	eq
 800b934:	f043 0301 	orreq.w	r3, r3, #1
 800b938:	3248      	adds	r2, #72	; 0x48
 800b93a:	4284      	cmp	r4, r0
 800b93c:	bf08      	it	eq
 800b93e:	f043 0301 	orreq.w	r3, r3, #1
 800b942:	3048      	adds	r0, #72	; 0x48
 800b944:	428c      	cmp	r4, r1
 800b946:	bf08      	it	eq
 800b948:	f043 0301 	orreq.w	r3, r3, #1
 800b94c:	f5a1 618f 	sub.w	r1, r1, #1144	; 0x478
 800b950:	4294      	cmp	r4, r2
 800b952:	bf08      	it	eq
 800b954:	f043 0301 	orreq.w	r3, r3, #1
 800b958:	f5a2 628f 	sub.w	r2, r2, #1144	; 0x478
 800b95c:	4284      	cmp	r4, r0
 800b95e:	bf08      	it	eq
 800b960:	f043 0301 	orreq.w	r3, r3, #1
 800b964:	4294      	cmp	r4, r2
 800b966:	bf18      	it	ne
 800b968:	428c      	cmpne	r4, r1
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800b96a:	6822      	ldr	r2, [r4, #0]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b96c:	bf0c      	ite	eq
 800b96e:	2101      	moveq	r1, #1
 800b970:	2100      	movne	r1, #0
 800b972:	d002      	beq.n	800b97a <HAL_DMA_Abort+0xd6>
 800b974:	2b00      	cmp	r3, #0
 800b976:	f000 8105 	beq.w	800bb84 <HAL_DMA_Abort+0x2e0>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800b97a:	f022 021e 	bic.w	r2, r2, #30
 800b97e:	6022      	str	r2, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800b980:	6962      	ldr	r2, [r4, #20]
 800b982:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b986:	6162      	str	r2, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b988:	4a72      	ldr	r2, [pc, #456]	; (800bb54 <HAL_DMA_Abort+0x2b0>)
 800b98a:	4873      	ldr	r0, [pc, #460]	; (800bb58 <HAL_DMA_Abort+0x2b4>)
 800b98c:	4f73      	ldr	r7, [pc, #460]	; (800bb5c <HAL_DMA_Abort+0x2b8>)
 800b98e:	4284      	cmp	r4, r0
 800b990:	bf18      	it	ne
 800b992:	4294      	cmpne	r4, r2
 800b994:	f100 003c 	add.w	r0, r0, #60	; 0x3c
 800b998:	bf0c      	ite	eq
 800b99a:	2201      	moveq	r2, #1
 800b99c:	2200      	movne	r2, #0
 800b99e:	42bc      	cmp	r4, r7
 800b9a0:	bf08      	it	eq
 800b9a2:	f042 0201 	orreq.w	r2, r2, #1
 800b9a6:	3728      	adds	r7, #40	; 0x28
 800b9a8:	4284      	cmp	r4, r0
 800b9aa:	bf08      	it	eq
 800b9ac:	f042 0201 	orreq.w	r2, r2, #1
 800b9b0:	3028      	adds	r0, #40	; 0x28
 800b9b2:	42bc      	cmp	r4, r7
 800b9b4:	bf08      	it	eq
 800b9b6:	f042 0201 	orreq.w	r2, r2, #1
 800b9ba:	3728      	adds	r7, #40	; 0x28
 800b9bc:	4284      	cmp	r4, r0
 800b9be:	bf08      	it	eq
 800b9c0:	f042 0201 	orreq.w	r2, r2, #1
 800b9c4:	3028      	adds	r0, #40	; 0x28
 800b9c6:	42bc      	cmp	r4, r7
 800b9c8:	bf08      	it	eq
 800b9ca:	f042 0201 	orreq.w	r2, r2, #1
 800b9ce:	4284      	cmp	r4, r0
 800b9d0:	bf08      	it	eq
 800b9d2:	f042 0201 	orreq.w	r2, r2, #1
 800b9d6:	430a      	orrs	r2, r1
 800b9d8:	d100      	bne.n	800b9dc <HAL_DMA_Abort+0x138>
 800b9da:	b123      	cbz	r3, 800b9e6 <HAL_DMA_Abort+0x142>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b9dc:	6e30      	ldr	r0, [r6, #96]	; 0x60
 800b9de:	6802      	ldr	r2, [r0, #0]
 800b9e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b9e4:	6002      	str	r2, [r0, #0]
    __HAL_DMA_DISABLE(hdma);
 800b9e6:	6823      	ldr	r3, [r4, #0]
 800b9e8:	f023 0301 	bic.w	r3, r3, #1
 800b9ec:	6023      	str	r3, [r4, #0]
 800b9ee:	e005      	b.n	800b9fc <HAL_DMA_Abort+0x158>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b9f0:	f7fe fe06 	bl	800a600 <HAL_GetTick>
 800b9f4:	1b40      	subs	r0, r0, r5
 800b9f6:	2805      	cmp	r0, #5
 800b9f8:	f200 80ba 	bhi.w	800bb70 <HAL_DMA_Abort+0x2cc>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800b9fc:	6823      	ldr	r3, [r4, #0]
 800b9fe:	07db      	lsls	r3, r3, #31
 800ba00:	d4f6      	bmi.n	800b9f0 <HAL_DMA_Abort+0x14c>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800ba02:	6831      	ldr	r1, [r6, #0]
 800ba04:	4a4f      	ldr	r2, [pc, #316]	; (800bb44 <HAL_DMA_Abort+0x2a0>)
 800ba06:	4b50      	ldr	r3, [pc, #320]	; (800bb48 <HAL_DMA_Abort+0x2a4>)
 800ba08:	4c50      	ldr	r4, [pc, #320]	; (800bb4c <HAL_DMA_Abort+0x2a8>)
 800ba0a:	4299      	cmp	r1, r3
 800ba0c:	bf18      	it	ne
 800ba0e:	4291      	cmpne	r1, r2
 800ba10:	f103 0348 	add.w	r3, r3, #72	; 0x48
 800ba14:	484e      	ldr	r0, [pc, #312]	; (800bb50 <HAL_DMA_Abort+0x2ac>)
 800ba16:	bf0c      	ite	eq
 800ba18:	2201      	moveq	r2, #1
 800ba1a:	2200      	movne	r2, #0
 800ba1c:	4d50      	ldr	r5, [pc, #320]	; (800bb60 <HAL_DMA_Abort+0x2bc>)
 800ba1e:	42a1      	cmp	r1, r4
 800ba20:	bf08      	it	eq
 800ba22:	f042 0201 	orreq.w	r2, r2, #1
 800ba26:	f504 7468 	add.w	r4, r4, #928	; 0x3a0
 800ba2a:	4f4e      	ldr	r7, [pc, #312]	; (800bb64 <HAL_DMA_Abort+0x2c0>)
 800ba2c:	4299      	cmp	r1, r3
 800ba2e:	bf08      	it	eq
 800ba30:	f042 0201 	orreq.w	r2, r2, #1
 800ba34:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 800ba38:	f8df c130 	ldr.w	ip, [pc, #304]	; 800bb6c <HAL_DMA_Abort+0x2c8>
 800ba3c:	4281      	cmp	r1, r0
 800ba3e:	bf08      	it	eq
 800ba40:	f042 0201 	orreq.w	r2, r2, #1
 800ba44:	f500 706e 	add.w	r0, r0, #952	; 0x3b8
 800ba48:	42a9      	cmp	r1, r5
 800ba4a:	bf08      	it	eq
 800ba4c:	f042 0201 	orreq.w	r2, r2, #1
 800ba50:	f505 757a 	add.w	r5, r5, #1000	; 0x3e8
 800ba54:	42a1      	cmp	r1, r4
 800ba56:	bf08      	it	eq
 800ba58:	f042 0201 	orreq.w	r2, r2, #1
 800ba5c:	3478      	adds	r4, #120	; 0x78
 800ba5e:	4299      	cmp	r1, r3
 800ba60:	bf14      	ite	ne
 800ba62:	4613      	movne	r3, r2
 800ba64:	f042 0301 	orreq.w	r3, r2, #1
 800ba68:	4a3f      	ldr	r2, [pc, #252]	; (800bb68 <HAL_DMA_Abort+0x2c4>)
 800ba6a:	42b9      	cmp	r1, r7
 800ba6c:	bf08      	it	eq
 800ba6e:	f043 0301 	orreq.w	r3, r3, #1
 800ba72:	3778      	adds	r7, #120	; 0x78
 800ba74:	4281      	cmp	r1, r0
 800ba76:	bf08      	it	eq
 800ba78:	f043 0301 	orreq.w	r3, r3, #1
 800ba7c:	6df0      	ldr	r0, [r6, #92]	; 0x5c
 800ba7e:	4561      	cmp	r1, ip
 800ba80:	bf08      	it	eq
 800ba82:	f043 0301 	orreq.w	r3, r3, #1
 800ba86:	f000 001f 	and.w	r0, r0, #31
 800ba8a:	42a1      	cmp	r1, r4
 800ba8c:	bf08      	it	eq
 800ba8e:	f043 0301 	orreq.w	r3, r3, #1
 800ba92:	f5a4 648c 	sub.w	r4, r4, #1120	; 0x460
 800ba96:	42a9      	cmp	r1, r5
 800ba98:	bf08      	it	eq
 800ba9a:	f043 0301 	orreq.w	r3, r3, #1
 800ba9e:	6db5      	ldr	r5, [r6, #88]	; 0x58
 800baa0:	42b9      	cmp	r1, r7
 800baa2:	bf08      	it	eq
 800baa4:	f043 0301 	orreq.w	r3, r3, #1
 800baa8:	42a1      	cmp	r1, r4
 800baaa:	bf18      	it	ne
 800baac:	4291      	cmpne	r1, r2
 800baae:	bf0c      	ite	eq
 800bab0:	2201      	moveq	r2, #1
 800bab2:	2200      	movne	r2, #0
 800bab4:	d001      	beq.n	800baba <HAL_DMA_Abort+0x216>
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d068      	beq.n	800bb8c <HAL_DMA_Abort+0x2e8>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800baba:	243f      	movs	r4, #63	; 0x3f
 800babc:	fa04 f000 	lsl.w	r0, r4, r0
 800bac0:	60a8      	str	r0, [r5, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800bac2:	2a00      	cmp	r2, #0
 800bac4:	d129      	bne.n	800bb1a <HAL_DMA_Abort+0x276>
 800bac6:	4a24      	ldr	r2, [pc, #144]	; (800bb58 <HAL_DMA_Abort+0x2b4>)
 800bac8:	4822      	ldr	r0, [pc, #136]	; (800bb54 <HAL_DMA_Abort+0x2b0>)
 800baca:	4c24      	ldr	r4, [pc, #144]	; (800bb5c <HAL_DMA_Abort+0x2b8>)
 800bacc:	4281      	cmp	r1, r0
 800bace:	bf18      	it	ne
 800bad0:	4291      	cmpne	r1, r2
 800bad2:	f100 0028 	add.w	r0, r0, #40	; 0x28
 800bad6:	bf0c      	ite	eq
 800bad8:	2201      	moveq	r2, #1
 800bada:	2200      	movne	r2, #0
 800badc:	42a1      	cmp	r1, r4
 800bade:	bf08      	it	eq
 800bae0:	f042 0201 	orreq.w	r2, r2, #1
 800bae4:	3428      	adds	r4, #40	; 0x28
 800bae6:	4281      	cmp	r1, r0
 800bae8:	bf08      	it	eq
 800baea:	f042 0201 	orreq.w	r2, r2, #1
 800baee:	3028      	adds	r0, #40	; 0x28
 800baf0:	42a1      	cmp	r1, r4
 800baf2:	bf08      	it	eq
 800baf4:	f042 0201 	orreq.w	r2, r2, #1
 800baf8:	3428      	adds	r4, #40	; 0x28
 800bafa:	4281      	cmp	r1, r0
 800bafc:	bf08      	it	eq
 800bafe:	f042 0201 	orreq.w	r2, r2, #1
 800bb02:	3028      	adds	r0, #40	; 0x28
 800bb04:	42a1      	cmp	r1, r4
 800bb06:	bf08      	it	eq
 800bb08:	f042 0201 	orreq.w	r2, r2, #1
 800bb0c:	4281      	cmp	r1, r0
 800bb0e:	bf14      	ite	ne
 800bb10:	4611      	movne	r1, r2
 800bb12:	f042 0101 	orreq.w	r1, r2, #1
 800bb16:	b901      	cbnz	r1, 800bb1a <HAL_DMA_Abort+0x276>
 800bb18:	b15b      	cbz	r3, 800bb32 <HAL_DMA_Abort+0x28e>
      if(hdma->DMAmuxRequestGen != 0U)
 800bb1a:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bb1c:	e9d6 2119 	ldrd	r2, r1, [r6, #100]	; 0x64
 800bb20:	6051      	str	r1, [r2, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 800bb22:	b133      	cbz	r3, 800bb32 <HAL_DMA_Abort+0x28e>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800bb24:	681a      	ldr	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bb26:	6f31      	ldr	r1, [r6, #112]	; 0x70
 800bb28:	6f70      	ldr	r0, [r6, #116]	; 0x74
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800bb2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bb2e:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bb30:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hdma);
 800bb32:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 800bb34:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 800bb36:	f886 0034 	strb.w	r0, [r6, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 800bb3a:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
}
 800bb3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800bb40:	2001      	movs	r0, #1
}
 800bb42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb44:	40020058 	.word	0x40020058
 800bb48:	40020040 	.word	0x40020040
 800bb4c:	40020070 	.word	0x40020070
 800bb50:	400200a0 	.word	0x400200a0
 800bb54:	5802541c 	.word	0x5802541c
 800bb58:	58025408 	.word	0x58025408
 800bb5c:	58025430 	.word	0x58025430
 800bb60:	400200b8 	.word	0x400200b8
 800bb64:	40020440 	.word	0x40020440
 800bb68:	40020010 	.word	0x40020010
 800bb6c:	40020470 	.word	0x40020470
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800bb70:	2120      	movs	r1, #32
        __HAL_UNLOCK(hdma);
 800bb72:	2200      	movs	r2, #0
        hdma->State = HAL_DMA_STATE_ERROR;
 800bb74:	2303      	movs	r3, #3
        return HAL_ERROR;
 800bb76:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800bb78:	6571      	str	r1, [r6, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 800bb7a:	f886 2034 	strb.w	r2, [r6, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
 800bb7e:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
}
 800bb82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800bb84:	f022 020e 	bic.w	r2, r2, #14
 800bb88:	6022      	str	r2, [r4, #0]
 800bb8a:	e6fd      	b.n	800b988 <HAL_DMA_Abort+0xe4>
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800bb8c:	2201      	movs	r2, #1
 800bb8e:	fa02 f000 	lsl.w	r0, r2, r0
 800bb92:	6068      	str	r0, [r5, #4]
 800bb94:	e797      	b.n	800bac6 <HAL_DMA_Abort+0x222>
 800bb96:	bf00      	nop

0800bb98 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 800bb98:	2800      	cmp	r0, #0
 800bb9a:	d060      	beq.n	800bc5e <HAL_DMA_Abort_IT+0xc6>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800bb9c:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 800bba0:	2a02      	cmp	r2, #2
{
 800bba2:	b538      	push	{r3, r4, r5, lr}
 800bba4:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800bba6:	d003      	beq.n	800bbb0 <HAL_DMA_Abort_IT+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bba8:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 800bbaa:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bbac:	655a      	str	r2, [r3, #84]	; 0x54
}
 800bbae:	bd38      	pop	{r3, r4, r5, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800bbb0:	6801      	ldr	r1, [r0, #0]
 800bbb2:	4a57      	ldr	r2, [pc, #348]	; (800bd10 <HAL_DMA_Abort_IT+0x178>)
 800bbb4:	4291      	cmp	r1, r2
 800bbb6:	d049      	beq.n	800bc4c <HAL_DMA_Abort_IT+0xb4>
 800bbb8:	3218      	adds	r2, #24
 800bbba:	4291      	cmp	r1, r2
 800bbbc:	d046      	beq.n	800bc4c <HAL_DMA_Abort_IT+0xb4>
 800bbbe:	3230      	adds	r2, #48	; 0x30
 800bbc0:	4854      	ldr	r0, [pc, #336]	; (800bd14 <HAL_DMA_Abort_IT+0x17c>)
 800bbc2:	4c55      	ldr	r4, [pc, #340]	; (800bd18 <HAL_DMA_Abort_IT+0x180>)
 800bbc4:	4281      	cmp	r1, r0
 800bbc6:	bf18      	it	ne
 800bbc8:	4291      	cmpne	r1, r2
 800bbca:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800bbce:	4d53      	ldr	r5, [pc, #332]	; (800bd1c <HAL_DMA_Abort_IT+0x184>)
 800bbd0:	bf0c      	ite	eq
 800bbd2:	2201      	moveq	r2, #1
 800bbd4:	2200      	movne	r2, #0
 800bbd6:	42a1      	cmp	r1, r4
 800bbd8:	bf08      	it	eq
 800bbda:	f042 0201 	orreq.w	r2, r2, #1
 800bbde:	3448      	adds	r4, #72	; 0x48
 800bbe0:	4281      	cmp	r1, r0
 800bbe2:	bf08      	it	eq
 800bbe4:	f042 0201 	orreq.w	r2, r2, #1
 800bbe8:	f500 7062 	add.w	r0, r0, #904	; 0x388
 800bbec:	42a9      	cmp	r1, r5
 800bbee:	bf08      	it	eq
 800bbf0:	f042 0201 	orreq.w	r2, r2, #1
 800bbf4:	f505 7562 	add.w	r5, r5, #904	; 0x388
 800bbf8:	42a1      	cmp	r1, r4
 800bbfa:	bf08      	it	eq
 800bbfc:	f042 0201 	orreq.w	r2, r2, #1
 800bc00:	f504 7462 	add.w	r4, r4, #904	; 0x388
 800bc04:	4281      	cmp	r1, r0
 800bc06:	bf08      	it	eq
 800bc08:	f042 0201 	orreq.w	r2, r2, #1
 800bc0c:	3048      	adds	r0, #72	; 0x48
 800bc0e:	42a9      	cmp	r1, r5
 800bc10:	bf08      	it	eq
 800bc12:	f042 0201 	orreq.w	r2, r2, #1
 800bc16:	3548      	adds	r5, #72	; 0x48
 800bc18:	42a1      	cmp	r1, r4
 800bc1a:	bf08      	it	eq
 800bc1c:	f042 0201 	orreq.w	r2, r2, #1
 800bc20:	3448      	adds	r4, #72	; 0x48
 800bc22:	4281      	cmp	r1, r0
 800bc24:	bf08      	it	eq
 800bc26:	f042 0201 	orreq.w	r2, r2, #1
 800bc2a:	3048      	adds	r0, #72	; 0x48
 800bc2c:	42a9      	cmp	r1, r5
 800bc2e:	bf08      	it	eq
 800bc30:	f042 0201 	orreq.w	r2, r2, #1
 800bc34:	42a1      	cmp	r1, r4
 800bc36:	bf08      	it	eq
 800bc38:	f042 0201 	orreq.w	r2, r2, #1
 800bc3c:	4281      	cmp	r1, r0
 800bc3e:	bf08      	it	eq
 800bc40:	f042 0201 	orreq.w	r2, r2, #1
 800bc44:	b912      	cbnz	r2, 800bc4c <HAL_DMA_Abort_IT+0xb4>
 800bc46:	4a36      	ldr	r2, [pc, #216]	; (800bd20 <HAL_DMA_Abort_IT+0x188>)
 800bc48:	4291      	cmp	r1, r2
 800bc4a:	d10a      	bne.n	800bc62 <HAL_DMA_Abort_IT+0xca>
      hdma->State = HAL_DMA_STATE_ABORT;
 800bc4c:	2204      	movs	r2, #4
  return HAL_OK;
 800bc4e:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 800bc50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800bc54:	680b      	ldr	r3, [r1, #0]
 800bc56:	f023 0301 	bic.w	r3, r3, #1
 800bc5a:	600b      	str	r3, [r1, #0]
}
 800bc5c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800bc5e:	2001      	movs	r0, #1
}
 800bc60:	4770      	bx	lr
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800bc62:	f104 54c0 	add.w	r4, r4, #402653184	; 0x18000000
 800bc66:	4a2f      	ldr	r2, [pc, #188]	; (800bd24 <HAL_DMA_Abort_IT+0x18c>)
 800bc68:	482f      	ldr	r0, [pc, #188]	; (800bd28 <HAL_DMA_Abort_IT+0x190>)
 800bc6a:	f504 449f 	add.w	r4, r4, #20352	; 0x4f80
 800bc6e:	4d2f      	ldr	r5, [pc, #188]	; (800bd2c <HAL_DMA_Abort_IT+0x194>)
 800bc70:	42a1      	cmp	r1, r4
 800bc72:	bf18      	it	ne
 800bc74:	4291      	cmpne	r1, r2
 800bc76:	f104 0450 	add.w	r4, r4, #80	; 0x50
 800bc7a:	bf0c      	ite	eq
 800bc7c:	2201      	moveq	r2, #1
 800bc7e:	2200      	movne	r2, #0
 800bc80:	4281      	cmp	r1, r0
 800bc82:	bf08      	it	eq
 800bc84:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800bc88:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800bc8a:	42a9      	cmp	r1, r5
 800bc8c:	bf08      	it	eq
 800bc8e:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800bc92:	f020 000e 	bic.w	r0, r0, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800bc96:	3528      	adds	r5, #40	; 0x28
 800bc98:	42a1      	cmp	r1, r4
 800bc9a:	bf08      	it	eq
 800bc9c:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800bca0:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800bca2:	3428      	adds	r4, #40	; 0x28
      __HAL_DMA_DISABLE(hdma);
 800bca4:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800bca6:	42a9      	cmp	r1, r5
 800bca8:	bf08      	it	eq
 800bcaa:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 800bcae:	f020 0001 	bic.w	r0, r0, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800bcb2:	42a1      	cmp	r1, r4
 800bcb4:	bf08      	it	eq
 800bcb6:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 800bcba:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800bcbc:	b912      	cbnz	r2, 800bcc4 <HAL_DMA_Abort_IT+0x12c>
 800bcbe:	4a1c      	ldr	r2, [pc, #112]	; (800bd30 <HAL_DMA_Abort_IT+0x198>)
 800bcc0:	4291      	cmp	r1, r2
 800bcc2:	d117      	bne.n	800bcf4 <HAL_DMA_Abort_IT+0x15c>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800bcc4:	6e1c      	ldr	r4, [r3, #96]	; 0x60
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800bcc6:	2101      	movs	r1, #1
 800bcc8:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800bcca:	6822      	ldr	r2, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800bccc:	f000 001f 	and.w	r0, r0, #31
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800bcd0:	6d9d      	ldr	r5, [r3, #88]	; 0x58
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800bcd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800bcd6:	4081      	lsls	r1, r0
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bcd8:	6e58      	ldr	r0, [r3, #100]	; 0x64
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800bcda:	6022      	str	r2, [r4, #0]
        if(hdma->DMAmuxRequestGen != 0U)
 800bcdc:	e9d3 421a 	ldrd	r4, r2, [r3, #104]	; 0x68
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800bce0:	6069      	str	r1, [r5, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bce2:	6044      	str	r4, [r0, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 800bce4:	b132      	cbz	r2, 800bcf4 <HAL_DMA_Abort_IT+0x15c>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800bce6:	6811      	ldr	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bce8:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800bcea:	6f5c      	ldr	r4, [r3, #116]	; 0x74
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800bcec:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800bcf0:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bcf2:	6044      	str	r4, [r0, #4]
      __HAL_UNLOCK(hdma);
 800bcf4:	2400      	movs	r4, #0
      hdma->State = HAL_DMA_STATE_READY;
 800bcf6:	2101      	movs	r1, #1
      if(hdma->XferAbortCallback != NULL)
 800bcf8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hdma);
 800bcfa:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800bcfe:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 800bd02:	b11a      	cbz	r2, 800bd0c <HAL_DMA_Abort_IT+0x174>
 800bd04:	4618      	mov	r0, r3
        hdma->XferAbortCallback(hdma);
 800bd06:	4790      	blx	r2
  return HAL_OK;
 800bd08:	4620      	mov	r0, r4
}
 800bd0a:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800bd0c:	4610      	mov	r0, r2
}
 800bd0e:	bd38      	pop	{r3, r4, r5, pc}
 800bd10:	40020010 	.word	0x40020010
 800bd14:	40020040 	.word	0x40020040
 800bd18:	40020070 	.word	0x40020070
 800bd1c:	400200a0 	.word	0x400200a0
 800bd20:	400204b8 	.word	0x400204b8
 800bd24:	5802541c 	.word	0x5802541c
 800bd28:	58025430 	.word	0x58025430
 800bd2c:	58025444 	.word	0x58025444
 800bd30:	58025494 	.word	0x58025494

0800bd34 <HAL_DMA_IRQHandler>:
{
 800bd34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t timeout = SystemCoreClock / 9600U;
 800bd38:	49a4      	ldr	r1, [pc, #656]	; (800bfcc <HAL_DMA_IRQHandler+0x298>)
{
 800bd3a:	b085      	sub	sp, #20
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800bd3c:	4ea4      	ldr	r6, [pc, #656]	; (800bfd0 <HAL_DMA_IRQHandler+0x29c>)
  __IO uint32_t count = 0U;
 800bd3e:	2400      	movs	r4, #0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800bd40:	6803      	ldr	r3, [r0, #0]
 800bd42:	4aa4      	ldr	r2, [pc, #656]	; (800bfd4 <HAL_DMA_IRQHandler+0x2a0>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800bd44:	f8d0 8058 	ldr.w	r8, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 800bd48:	6809      	ldr	r1, [r1, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800bd4a:	4293      	cmp	r3, r2
 800bd4c:	bf18      	it	ne
 800bd4e:	42b3      	cmpne	r3, r6
  __IO uint32_t count = 0U;
 800bd50:	9403      	str	r4, [sp, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800bd52:	9101      	str	r1, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800bd54:	bf08      	it	eq
 800bd56:	2601      	moveq	r6, #1
  tmpisr_dma  = regs_dma->ISR;
 800bd58:	f8d8 5000 	ldr.w	r5, [r8]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800bd5c:	bf18      	it	ne
 800bd5e:	2600      	movne	r6, #0
  tmpisr_bdma = regs_bdma->ISR;
 800bd60:	f8d8 1000 	ldr.w	r1, [r8]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800bd64:	d046      	beq.n	800bdf4 <HAL_DMA_IRQHandler+0xc0>
 800bd66:	3218      	adds	r2, #24
 800bd68:	4f9b      	ldr	r7, [pc, #620]	; (800bfd8 <HAL_DMA_IRQHandler+0x2a4>)
 800bd6a:	4c9c      	ldr	r4, [pc, #624]	; (800bfdc <HAL_DMA_IRQHandler+0x2a8>)
 800bd6c:	42bb      	cmp	r3, r7
 800bd6e:	bf18      	it	ne
 800bd70:	4293      	cmpne	r3, r2
 800bd72:	f107 0730 	add.w	r7, r7, #48	; 0x30
 800bd76:	bf0c      	ite	eq
 800bd78:	2201      	moveq	r2, #1
 800bd7a:	2200      	movne	r2, #0
 800bd7c:	42a3      	cmp	r3, r4
 800bd7e:	bf08      	it	eq
 800bd80:	f042 0201 	orreq.w	r2, r2, #1
 800bd84:	3430      	adds	r4, #48	; 0x30
 800bd86:	42bb      	cmp	r3, r7
 800bd88:	bf08      	it	eq
 800bd8a:	f042 0201 	orreq.w	r2, r2, #1
 800bd8e:	3730      	adds	r7, #48	; 0x30
 800bd90:	42a3      	cmp	r3, r4
 800bd92:	bf08      	it	eq
 800bd94:	f042 0201 	orreq.w	r2, r2, #1
 800bd98:	f504 745c 	add.w	r4, r4, #880	; 0x370
 800bd9c:	42bb      	cmp	r3, r7
 800bd9e:	bf08      	it	eq
 800bda0:	f042 0201 	orreq.w	r2, r2, #1
 800bda4:	f507 775c 	add.w	r7, r7, #880	; 0x370
 800bda8:	42a3      	cmp	r3, r4
 800bdaa:	bf08      	it	eq
 800bdac:	f042 0201 	orreq.w	r2, r2, #1
 800bdb0:	3430      	adds	r4, #48	; 0x30
 800bdb2:	42bb      	cmp	r3, r7
 800bdb4:	bf08      	it	eq
 800bdb6:	f042 0201 	orreq.w	r2, r2, #1
 800bdba:	3730      	adds	r7, #48	; 0x30
 800bdbc:	42a3      	cmp	r3, r4
 800bdbe:	bf08      	it	eq
 800bdc0:	f042 0201 	orreq.w	r2, r2, #1
 800bdc4:	3430      	adds	r4, #48	; 0x30
 800bdc6:	42bb      	cmp	r3, r7
 800bdc8:	bf08      	it	eq
 800bdca:	f042 0201 	orreq.w	r2, r2, #1
 800bdce:	3730      	adds	r7, #48	; 0x30
 800bdd0:	42a3      	cmp	r3, r4
 800bdd2:	bf08      	it	eq
 800bdd4:	f042 0201 	orreq.w	r2, r2, #1
 800bdd8:	3430      	adds	r4, #48	; 0x30
 800bdda:	42bb      	cmp	r3, r7
 800bddc:	bf08      	it	eq
 800bdde:	f042 0201 	orreq.w	r2, r2, #1
 800bde2:	42a3      	cmp	r3, r4
 800bde4:	bf08      	it	eq
 800bde6:	f042 0201 	orreq.w	r2, r2, #1
 800bdea:	b91a      	cbnz	r2, 800bdf4 <HAL_DMA_IRQHandler+0xc0>
 800bdec:	4a7c      	ldr	r2, [pc, #496]	; (800bfe0 <HAL_DMA_IRQHandler+0x2ac>)
 800bdee:	4293      	cmp	r3, r2
 800bdf0:	f040 81ef 	bne.w	800c1d2 <HAL_DMA_IRQHandler+0x49e>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800bdf4:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 800bdf6:	2208      	movs	r2, #8
 800bdf8:	f001 071f 	and.w	r7, r1, #31
 800bdfc:	40ba      	lsls	r2, r7
 800bdfe:	422a      	tst	r2, r5
 800be00:	f040 81d8 	bne.w	800c1b4 <HAL_DMA_IRQHandler+0x480>
 800be04:	4604      	mov	r4, r0
 800be06:	f04f 0c04 	mov.w	ip, #4
 800be0a:	2010      	movs	r0, #16
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800be0c:	fa25 f207 	lsr.w	r2, r5, r7
 800be10:	fa0c fc07 	lsl.w	ip, ip, r7
 800be14:	40b8      	lsls	r0, r7
 800be16:	07d2      	lsls	r2, r2, #31
 800be18:	ea05 090c 	and.w	r9, r5, ip
 800be1c:	ea05 0e00 	and.w	lr, r5, r0
 800be20:	d560      	bpl.n	800bee4 <HAL_DMA_IRQHandler+0x1b0>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800be22:	4a70      	ldr	r2, [pc, #448]	; (800bfe4 <HAL_DMA_IRQHandler+0x2b0>)
 800be24:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 800bfd8 <HAL_DMA_IRQHandler+0x2a4>
 800be28:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 800bfdc <HAL_DMA_IRQHandler+0x2a8>
 800be2c:	4293      	cmp	r3, r2
 800be2e:	bf18      	it	ne
 800be30:	455b      	cmpne	r3, fp
 800be32:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 800be36:	bf0c      	ite	eq
 800be38:	2201      	moveq	r2, #1
 800be3a:	2200      	movne	r2, #0
 800be3c:	4553      	cmp	r3, sl
 800be3e:	bf08      	it	eq
 800be40:	f042 0201 	orreq.w	r2, r2, #1
 800be44:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
 800be48:	455b      	cmp	r3, fp
 800be4a:	bf08      	it	eq
 800be4c:	f042 0201 	orreq.w	r2, r2, #1
 800be50:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 800be54:	4553      	cmp	r3, sl
 800be56:	bf08      	it	eq
 800be58:	f042 0201 	orreq.w	r2, r2, #1
 800be5c:	f50a 7a5c 	add.w	sl, sl, #880	; 0x370
 800be60:	455b      	cmp	r3, fp
 800be62:	bf08      	it	eq
 800be64:	f042 0201 	orreq.w	r2, r2, #1
 800be68:	f50b 7b5c 	add.w	fp, fp, #880	; 0x370
 800be6c:	4553      	cmp	r3, sl
 800be6e:	bf08      	it	eq
 800be70:	f042 0201 	orreq.w	r2, r2, #1
 800be74:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
 800be78:	455b      	cmp	r3, fp
 800be7a:	bf08      	it	eq
 800be7c:	f042 0201 	orreq.w	r2, r2, #1
 800be80:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 800be84:	4553      	cmp	r3, sl
 800be86:	bf08      	it	eq
 800be88:	f042 0201 	orreq.w	r2, r2, #1
 800be8c:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
 800be90:	455b      	cmp	r3, fp
 800be92:	bf08      	it	eq
 800be94:	f042 0201 	orreq.w	r2, r2, #1
 800be98:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 800be9c:	4553      	cmp	r3, sl
 800be9e:	bf08      	it	eq
 800bea0:	f042 0201 	orreq.w	r2, r2, #1
 800bea4:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
 800bea8:	455b      	cmp	r3, fp
 800beaa:	bf08      	it	eq
 800beac:	f042 0201 	orreq.w	r2, r2, #1
 800beb0:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 800beb4:	4553      	cmp	r3, sl
 800beb6:	bf08      	it	eq
 800beb8:	f042 0201 	orreq.w	r2, r2, #1
 800bebc:	455b      	cmp	r3, fp
 800bebe:	bf08      	it	eq
 800bec0:	f042 0201 	orreq.w	r2, r2, #1
 800bec4:	b912      	cbnz	r2, 800becc <HAL_DMA_IRQHandler+0x198>
 800bec6:	2e00      	cmp	r6, #0
 800bec8:	f000 8245 	beq.w	800c356 <HAL_DMA_IRQHandler+0x622>
 800becc:	695a      	ldr	r2, [r3, #20]
 800bece:	0612      	lsls	r2, r2, #24
 800bed0:	d508      	bpl.n	800bee4 <HAL_DMA_IRQHandler+0x1b0>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800bed2:	2201      	movs	r2, #1
 800bed4:	fa02 f707 	lsl.w	r7, r2, r7
 800bed8:	f8c8 7008 	str.w	r7, [r8, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800bedc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800bede:	f042 0202 	orr.w	r2, r2, #2
 800bee2:	6562      	str	r2, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800bee4:	f1b9 0f00 	cmp.w	r9, #0
 800bee8:	d055      	beq.n	800bf96 <HAL_DMA_IRQHandler+0x262>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800beea:	2e00      	cmp	r6, #0
 800beec:	d14a      	bne.n	800bf84 <HAL_DMA_IRQHandler+0x250>
 800beee:	4a3d      	ldr	r2, [pc, #244]	; (800bfe4 <HAL_DMA_IRQHandler+0x2b0>)
 800bef0:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 800bfd8 <HAL_DMA_IRQHandler+0x2a4>
 800bef4:	4f39      	ldr	r7, [pc, #228]	; (800bfdc <HAL_DMA_IRQHandler+0x2a8>)
 800bef6:	454b      	cmp	r3, r9
 800bef8:	bf18      	it	ne
 800befa:	4293      	cmpne	r3, r2
 800befc:	f109 0930 	add.w	r9, r9, #48	; 0x30
 800bf00:	bf0c      	ite	eq
 800bf02:	2201      	moveq	r2, #1
 800bf04:	2200      	movne	r2, #0
 800bf06:	42bb      	cmp	r3, r7
 800bf08:	bf08      	it	eq
 800bf0a:	f042 0201 	orreq.w	r2, r2, #1
 800bf0e:	3730      	adds	r7, #48	; 0x30
 800bf10:	454b      	cmp	r3, r9
 800bf12:	bf08      	it	eq
 800bf14:	f042 0201 	orreq.w	r2, r2, #1
 800bf18:	f109 0930 	add.w	r9, r9, #48	; 0x30
 800bf1c:	42bb      	cmp	r3, r7
 800bf1e:	bf08      	it	eq
 800bf20:	f042 0201 	orreq.w	r2, r2, #1
 800bf24:	f507 775c 	add.w	r7, r7, #880	; 0x370
 800bf28:	454b      	cmp	r3, r9
 800bf2a:	bf08      	it	eq
 800bf2c:	f042 0201 	orreq.w	r2, r2, #1
 800bf30:	f509 795c 	add.w	r9, r9, #880	; 0x370
 800bf34:	42bb      	cmp	r3, r7
 800bf36:	bf08      	it	eq
 800bf38:	f042 0201 	orreq.w	r2, r2, #1
 800bf3c:	3730      	adds	r7, #48	; 0x30
 800bf3e:	454b      	cmp	r3, r9
 800bf40:	bf08      	it	eq
 800bf42:	f042 0201 	orreq.w	r2, r2, #1
 800bf46:	f109 0930 	add.w	r9, r9, #48	; 0x30
 800bf4a:	42bb      	cmp	r3, r7
 800bf4c:	bf08      	it	eq
 800bf4e:	f042 0201 	orreq.w	r2, r2, #1
 800bf52:	3730      	adds	r7, #48	; 0x30
 800bf54:	454b      	cmp	r3, r9
 800bf56:	bf08      	it	eq
 800bf58:	f042 0201 	orreq.w	r2, r2, #1
 800bf5c:	f109 0930 	add.w	r9, r9, #48	; 0x30
 800bf60:	42bb      	cmp	r3, r7
 800bf62:	bf08      	it	eq
 800bf64:	f042 0201 	orreq.w	r2, r2, #1
 800bf68:	3730      	adds	r7, #48	; 0x30
 800bf6a:	454b      	cmp	r3, r9
 800bf6c:	bf08      	it	eq
 800bf6e:	f042 0201 	orreq.w	r2, r2, #1
 800bf72:	42bb      	cmp	r3, r7
 800bf74:	bf08      	it	eq
 800bf76:	f042 0201 	orreq.w	r2, r2, #1
 800bf7a:	b91a      	cbnz	r2, 800bf84 <HAL_DMA_IRQHandler+0x250>
 800bf7c:	4a18      	ldr	r2, [pc, #96]	; (800bfe0 <HAL_DMA_IRQHandler+0x2ac>)
 800bf7e:	4293      	cmp	r3, r2
 800bf80:	f040 81b4 	bne.w	800c2ec <HAL_DMA_IRQHandler+0x5b8>
 800bf84:	681a      	ldr	r2, [r3, #0]
 800bf86:	0792      	lsls	r2, r2, #30
 800bf88:	d505      	bpl.n	800bf96 <HAL_DMA_IRQHandler+0x262>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800bf8a:	f8c8 c008 	str.w	ip, [r8, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800bf8e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800bf90:	f042 0204 	orr.w	r2, r2, #4
 800bf94:	6562      	str	r2, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800bf96:	f1be 0f00 	cmp.w	lr, #0
 800bf9a:	d06d      	beq.n	800c078 <HAL_DMA_IRQHandler+0x344>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800bf9c:	2e00      	cmp	r6, #0
 800bf9e:	d155      	bne.n	800c04c <HAL_DMA_IRQHandler+0x318>
 800bfa0:	4a10      	ldr	r2, [pc, #64]	; (800bfe4 <HAL_DMA_IRQHandler+0x2b0>)
 800bfa2:	4f0d      	ldr	r7, [pc, #52]	; (800bfd8 <HAL_DMA_IRQHandler+0x2a4>)
 800bfa4:	4e0d      	ldr	r6, [pc, #52]	; (800bfdc <HAL_DMA_IRQHandler+0x2a8>)
 800bfa6:	42bb      	cmp	r3, r7
 800bfa8:	bf18      	it	ne
 800bfaa:	4293      	cmpne	r3, r2
 800bfac:	f107 0730 	add.w	r7, r7, #48	; 0x30
 800bfb0:	bf0c      	ite	eq
 800bfb2:	2201      	moveq	r2, #1
 800bfb4:	2200      	movne	r2, #0
 800bfb6:	42b3      	cmp	r3, r6
 800bfb8:	bf08      	it	eq
 800bfba:	f042 0201 	orreq.w	r2, r2, #1
 800bfbe:	3630      	adds	r6, #48	; 0x30
 800bfc0:	42bb      	cmp	r3, r7
 800bfc2:	bf08      	it	eq
 800bfc4:	f042 0201 	orreq.w	r2, r2, #1
 800bfc8:	3730      	adds	r7, #48	; 0x30
 800bfca:	e00d      	b.n	800bfe8 <HAL_DMA_IRQHandler+0x2b4>
 800bfcc:	240024cc 	.word	0x240024cc
 800bfd0:	40020010 	.word	0x40020010
 800bfd4:	40020028 	.word	0x40020028
 800bfd8:	40020058 	.word	0x40020058
 800bfdc:	40020070 	.word	0x40020070
 800bfe0:	400204b8 	.word	0x400204b8
 800bfe4:	40020040 	.word	0x40020040
 800bfe8:	42b3      	cmp	r3, r6
 800bfea:	bf08      	it	eq
 800bfec:	f042 0201 	orreq.w	r2, r2, #1
 800bff0:	f506 765c 	add.w	r6, r6, #880	; 0x370
 800bff4:	42bb      	cmp	r3, r7
 800bff6:	bf08      	it	eq
 800bff8:	f042 0201 	orreq.w	r2, r2, #1
 800bffc:	f507 775c 	add.w	r7, r7, #880	; 0x370
 800c000:	42b3      	cmp	r3, r6
 800c002:	bf08      	it	eq
 800c004:	f042 0201 	orreq.w	r2, r2, #1
 800c008:	3630      	adds	r6, #48	; 0x30
 800c00a:	42bb      	cmp	r3, r7
 800c00c:	bf08      	it	eq
 800c00e:	f042 0201 	orreq.w	r2, r2, #1
 800c012:	3730      	adds	r7, #48	; 0x30
 800c014:	42b3      	cmp	r3, r6
 800c016:	bf08      	it	eq
 800c018:	f042 0201 	orreq.w	r2, r2, #1
 800c01c:	3630      	adds	r6, #48	; 0x30
 800c01e:	42bb      	cmp	r3, r7
 800c020:	bf08      	it	eq
 800c022:	f042 0201 	orreq.w	r2, r2, #1
 800c026:	3730      	adds	r7, #48	; 0x30
 800c028:	42b3      	cmp	r3, r6
 800c02a:	bf08      	it	eq
 800c02c:	f042 0201 	orreq.w	r2, r2, #1
 800c030:	3630      	adds	r6, #48	; 0x30
 800c032:	42bb      	cmp	r3, r7
 800c034:	bf08      	it	eq
 800c036:	f042 0201 	orreq.w	r2, r2, #1
 800c03a:	42b3      	cmp	r3, r6
 800c03c:	bf08      	it	eq
 800c03e:	f042 0201 	orreq.w	r2, r2, #1
 800c042:	b91a      	cbnz	r2, 800c04c <HAL_DMA_IRQHandler+0x318>
 800c044:	4aa0      	ldr	r2, [pc, #640]	; (800c2c8 <HAL_DMA_IRQHandler+0x594>)
 800c046:	4293      	cmp	r3, r2
 800c048:	f040 813a 	bne.w	800c2c0 <HAL_DMA_IRQHandler+0x58c>
 800c04c:	681a      	ldr	r2, [r3, #0]
 800c04e:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 800c052:	b18a      	cbz	r2, 800c078 <HAL_DMA_IRQHandler+0x344>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800c054:	f8c8 0008 	str.w	r0, [r8, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800c058:	681a      	ldr	r2, [r3, #0]
 800c05a:	0357      	lsls	r7, r2, #13
 800c05c:	f100 80f7 	bmi.w	800c24e <HAL_DMA_IRQHandler+0x51a>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800c060:	681a      	ldr	r2, [r3, #0]
 800c062:	05d0      	lsls	r0, r2, #23
 800c064:	d403      	bmi.n	800c06e <HAL_DMA_IRQHandler+0x33a>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800c066:	681a      	ldr	r2, [r3, #0]
 800c068:	f022 0208 	bic.w	r2, r2, #8
 800c06c:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 800c06e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c070:	b113      	cbz	r3, 800c078 <HAL_DMA_IRQHandler+0x344>
            hdma->XferHalfCpltCallback(hdma);
 800c072:	4620      	mov	r0, r4
 800c074:	4798      	blx	r3
 800c076:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800c078:	f001 011f 	and.w	r1, r1, #31
 800c07c:	2220      	movs	r2, #32
 800c07e:	408a      	lsls	r2, r1
 800c080:	422a      	tst	r2, r5
 800c082:	d069      	beq.n	800c158 <HAL_DMA_IRQHandler+0x424>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800c084:	6820      	ldr	r0, [r4, #0]
 800c086:	4b91      	ldr	r3, [pc, #580]	; (800c2cc <HAL_DMA_IRQHandler+0x598>)
 800c088:	4e91      	ldr	r6, [pc, #580]	; (800c2d0 <HAL_DMA_IRQHandler+0x59c>)
 800c08a:	4d92      	ldr	r5, [pc, #584]	; (800c2d4 <HAL_DMA_IRQHandler+0x5a0>)
 800c08c:	42b0      	cmp	r0, r6
 800c08e:	bf18      	it	ne
 800c090:	4298      	cmpne	r0, r3
 800c092:	f106 0630 	add.w	r6, r6, #48	; 0x30
 800c096:	bf0c      	ite	eq
 800c098:	2301      	moveq	r3, #1
 800c09a:	2300      	movne	r3, #0
 800c09c:	42a8      	cmp	r0, r5
 800c09e:	bf08      	it	eq
 800c0a0:	f043 0301 	orreq.w	r3, r3, #1
 800c0a4:	3530      	adds	r5, #48	; 0x30
 800c0a6:	42b0      	cmp	r0, r6
 800c0a8:	bf08      	it	eq
 800c0aa:	f043 0301 	orreq.w	r3, r3, #1
 800c0ae:	3630      	adds	r6, #48	; 0x30
 800c0b0:	42a8      	cmp	r0, r5
 800c0b2:	bf08      	it	eq
 800c0b4:	f043 0301 	orreq.w	r3, r3, #1
 800c0b8:	3530      	adds	r5, #48	; 0x30
 800c0ba:	42b0      	cmp	r0, r6
 800c0bc:	bf08      	it	eq
 800c0be:	f043 0301 	orreq.w	r3, r3, #1
 800c0c2:	3630      	adds	r6, #48	; 0x30
 800c0c4:	42a8      	cmp	r0, r5
 800c0c6:	bf08      	it	eq
 800c0c8:	f043 0301 	orreq.w	r3, r3, #1
 800c0cc:	f505 755c 	add.w	r5, r5, #880	; 0x370
 800c0d0:	42b0      	cmp	r0, r6
 800c0d2:	bf08      	it	eq
 800c0d4:	f043 0301 	orreq.w	r3, r3, #1
 800c0d8:	f506 765c 	add.w	r6, r6, #880	; 0x370
 800c0dc:	42a8      	cmp	r0, r5
 800c0de:	bf08      	it	eq
 800c0e0:	f043 0301 	orreq.w	r3, r3, #1
 800c0e4:	3530      	adds	r5, #48	; 0x30
 800c0e6:	42b0      	cmp	r0, r6
 800c0e8:	bf08      	it	eq
 800c0ea:	f043 0301 	orreq.w	r3, r3, #1
 800c0ee:	3630      	adds	r6, #48	; 0x30
 800c0f0:	42a8      	cmp	r0, r5
 800c0f2:	bf08      	it	eq
 800c0f4:	f043 0301 	orreq.w	r3, r3, #1
 800c0f8:	3530      	adds	r5, #48	; 0x30
 800c0fa:	42b0      	cmp	r0, r6
 800c0fc:	bf08      	it	eq
 800c0fe:	f043 0301 	orreq.w	r3, r3, #1
 800c102:	3630      	adds	r6, #48	; 0x30
 800c104:	42a8      	cmp	r0, r5
 800c106:	bf08      	it	eq
 800c108:	f043 0301 	orreq.w	r3, r3, #1
 800c10c:	3530      	adds	r5, #48	; 0x30
 800c10e:	42b0      	cmp	r0, r6
 800c110:	bf08      	it	eq
 800c112:	f043 0301 	orreq.w	r3, r3, #1
 800c116:	42a8      	cmp	r0, r5
 800c118:	bf08      	it	eq
 800c11a:	f043 0301 	orreq.w	r3, r3, #1
 800c11e:	b91b      	cbnz	r3, 800c128 <HAL_DMA_IRQHandler+0x3f4>
 800c120:	4b69      	ldr	r3, [pc, #420]	; (800c2c8 <HAL_DMA_IRQHandler+0x594>)
 800c122:	4298      	cmp	r0, r3
 800c124:	f040 8121 	bne.w	800c36a <HAL_DMA_IRQHandler+0x636>
 800c128:	6803      	ldr	r3, [r0, #0]
 800c12a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800c12e:	b19b      	cbz	r3, 800c158 <HAL_DMA_IRQHandler+0x424>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800c130:	f8c8 2008 	str.w	r2, [r8, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800c134:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800c138:	2b04      	cmp	r3, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c13a:	6803      	ldr	r3, [r0, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800c13c:	f000 8090 	beq.w	800c260 <HAL_DMA_IRQHandler+0x52c>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800c140:	f413 2f80 	tst.w	r3, #262144	; 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800c144:	6803      	ldr	r3, [r0, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800c146:	f000 80a8 	beq.w	800c29a <HAL_DMA_IRQHandler+0x566>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800c14a:	0319      	lsls	r1, r3, #12
 800c14c:	f140 80b3 	bpl.w	800c2b6 <HAL_DMA_IRQHandler+0x582>
          if(hdma->XferCpltCallback != NULL)
 800c150:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c152:	b10b      	cbz	r3, 800c158 <HAL_DMA_IRQHandler+0x424>
            hdma->XferCpltCallback(hdma);
 800c154:	4620      	mov	r0, r4
 800c156:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800c158:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d074      	beq.n	800c248 <HAL_DMA_IRQHandler+0x514>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800c15e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800c160:	07da      	lsls	r2, r3, #31
 800c162:	d51f      	bpl.n	800c1a4 <HAL_DMA_IRQHandler+0x470>
        __HAL_DMA_DISABLE(hdma);
 800c164:	6822      	ldr	r2, [r4, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
 800c166:	2004      	movs	r0, #4
  uint32_t timeout = SystemCoreClock / 9600U;
 800c168:	495b      	ldr	r1, [pc, #364]	; (800c2d8 <HAL_DMA_IRQHandler+0x5a4>)
        hdma->State = HAL_DMA_STATE_ABORT;
 800c16a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 800c16e:	6813      	ldr	r3, [r2, #0]
 800c170:	f023 0301 	bic.w	r3, r3, #1
 800c174:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800c176:	9b01      	ldr	r3, [sp, #4]
 800c178:	fba1 3103 	umull	r3, r1, r1, r3
 800c17c:	0a89      	lsrs	r1, r1, #10
 800c17e:	e002      	b.n	800c186 <HAL_DMA_IRQHandler+0x452>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800c180:	6813      	ldr	r3, [r2, #0]
 800c182:	07db      	lsls	r3, r3, #31
 800c184:	d504      	bpl.n	800c190 <HAL_DMA_IRQHandler+0x45c>
          if (++count > timeout)
 800c186:	9b03      	ldr	r3, [sp, #12]
 800c188:	3301      	adds	r3, #1
 800c18a:	428b      	cmp	r3, r1
 800c18c:	9303      	str	r3, [sp, #12]
 800c18e:	d9f7      	bls.n	800c180 <HAL_DMA_IRQHandler+0x44c>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800c190:	6813      	ldr	r3, [r2, #0]
        __HAL_UNLOCK(hdma);
 800c192:	2200      	movs	r2, #0
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800c194:	07df      	lsls	r7, r3, #31
        __HAL_UNLOCK(hdma);
 800c196:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_ERROR;
 800c19a:	bf4c      	ite	mi
 800c19c:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 800c19e:	2301      	movpl	r3, #1
 800c1a0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      if(hdma->XferErrorCallback != NULL)
 800c1a4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d04e      	beq.n	800c248 <HAL_DMA_IRQHandler+0x514>
        hdma->XferErrorCallback(hdma);
 800c1aa:	4620      	mov	r0, r4
}
 800c1ac:	b005      	add	sp, #20
 800c1ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        hdma->XferErrorCallback(hdma);
 800c1b2:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800c1b4:	681c      	ldr	r4, [r3, #0]
 800c1b6:	0764      	lsls	r4, r4, #29
 800c1b8:	f57f ae24 	bpl.w	800be04 <HAL_DMA_IRQHandler+0xd0>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800c1bc:	681c      	ldr	r4, [r3, #0]
 800c1be:	f024 0404 	bic.w	r4, r4, #4
 800c1c2:	601c      	str	r4, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800c1c4:	f8c8 2008 	str.w	r2, [r8, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800c1c8:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800c1ca:	f042 0201 	orr.w	r2, r2, #1
 800c1ce:	6542      	str	r2, [r0, #84]	; 0x54
 800c1d0:	e618      	b.n	800be04 <HAL_DMA_IRQHandler+0xd0>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800c1d2:	4a42      	ldr	r2, [pc, #264]	; (800c2dc <HAL_DMA_IRQHandler+0x5a8>)
 800c1d4:	4d42      	ldr	r5, [pc, #264]	; (800c2e0 <HAL_DMA_IRQHandler+0x5ac>)
 800c1d6:	4c43      	ldr	r4, [pc, #268]	; (800c2e4 <HAL_DMA_IRQHandler+0x5b0>)
 800c1d8:	42ab      	cmp	r3, r5
 800c1da:	bf18      	it	ne
 800c1dc:	4293      	cmpne	r3, r2
 800c1de:	f105 0528 	add.w	r5, r5, #40	; 0x28
 800c1e2:	bf0c      	ite	eq
 800c1e4:	2201      	moveq	r2, #1
 800c1e6:	2200      	movne	r2, #0
 800c1e8:	42a3      	cmp	r3, r4
 800c1ea:	bf08      	it	eq
 800c1ec:	f042 0201 	orreq.w	r2, r2, #1
 800c1f0:	3428      	adds	r4, #40	; 0x28
 800c1f2:	42ab      	cmp	r3, r5
 800c1f4:	bf08      	it	eq
 800c1f6:	f042 0201 	orreq.w	r2, r2, #1
 800c1fa:	3528      	adds	r5, #40	; 0x28
 800c1fc:	42a3      	cmp	r3, r4
 800c1fe:	bf08      	it	eq
 800c200:	f042 0201 	orreq.w	r2, r2, #1
 800c204:	3428      	adds	r4, #40	; 0x28
 800c206:	42ab      	cmp	r3, r5
 800c208:	bf08      	it	eq
 800c20a:	f042 0201 	orreq.w	r2, r2, #1
 800c20e:	42a3      	cmp	r3, r4
 800c210:	bf08      	it	eq
 800c212:	f042 0201 	orreq.w	r2, r2, #1
 800c216:	b912      	cbnz	r2, 800c21e <HAL_DMA_IRQHandler+0x4ea>
 800c218:	4a33      	ldr	r2, [pc, #204]	; (800c2e8 <HAL_DMA_IRQHandler+0x5b4>)
 800c21a:	4293      	cmp	r3, r2
 800c21c:	d114      	bne.n	800c248 <HAL_DMA_IRQHandler+0x514>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800c21e:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 800c220:	2504      	movs	r5, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800c222:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800c224:	f004 041f 	and.w	r4, r4, #31
 800c228:	40a5      	lsls	r5, r4
 800c22a:	420d      	tst	r5, r1
 800c22c:	d068      	beq.n	800c300 <HAL_DMA_IRQHandler+0x5cc>
 800c22e:	0756      	lsls	r6, r2, #29
 800c230:	d566      	bpl.n	800c300 <HAL_DMA_IRQHandler+0x5cc>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800c232:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800c234:	f8c8 5004 	str.w	r5, [r8, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800c238:	f140 80ac 	bpl.w	800c394 <HAL_DMA_IRQHandler+0x660>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800c23c:	03d3      	lsls	r3, r2, #15
 800c23e:	f100 80af 	bmi.w	800c3a0 <HAL_DMA_IRQHandler+0x66c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800c242:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800c244:	2b00      	cmp	r3, #0
 800c246:	d1b1      	bne.n	800c1ac <HAL_DMA_IRQHandler+0x478>
}
 800c248:	b005      	add	sp, #20
 800c24a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	031e      	lsls	r6, r3, #12
 800c252:	f57f af0c 	bpl.w	800c06e <HAL_DMA_IRQHandler+0x33a>
            if(hdma->XferM1HalfCpltCallback != NULL)
 800c256:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800c258:	2b00      	cmp	r3, #0
 800c25a:	f47f af0a 	bne.w	800c072 <HAL_DMA_IRQHandler+0x33e>
 800c25e:	e70b      	b.n	800c078 <HAL_DMA_IRQHandler+0x344>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c260:	f023 0316 	bic.w	r3, r3, #22
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c264:	6c22      	ldr	r2, [r4, #64]	; 0x40
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c266:	6003      	str	r3, [r0, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800c268:	6943      	ldr	r3, [r0, #20]
 800c26a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c26e:	6143      	str	r3, [r0, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c270:	2a00      	cmp	r2, #0
 800c272:	d041      	beq.n	800c2f8 <HAL_DMA_IRQHandler+0x5c4>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800c274:	6803      	ldr	r3, [r0, #0]
 800c276:	f023 0308 	bic.w	r3, r3, #8
 800c27a:	6003      	str	r3, [r0, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c27c:	233f      	movs	r3, #63	; 0x3f
          __HAL_UNLOCK(hdma);
 800c27e:	2000      	movs	r0, #0
          hdma->State = HAL_DMA_STATE_READY;
 800c280:	2201      	movs	r2, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c282:	fa03 f101 	lsl.w	r1, r3, r1
          if(hdma->XferAbortCallback != NULL)
 800c286:	6d23      	ldr	r3, [r4, #80]	; 0x50
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c288:	f8c8 1008 	str.w	r1, [r8, #8]
          __HAL_UNLOCK(hdma);
 800c28c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800c290:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 800c294:	2b00      	cmp	r3, #0
 800c296:	d188      	bne.n	800c1aa <HAL_DMA_IRQHandler+0x476>
 800c298:	e7d6      	b.n	800c248 <HAL_DMA_IRQHandler+0x514>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800c29a:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 800c29e:	f47f af57 	bne.w	800c150 <HAL_DMA_IRQHandler+0x41c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800c2a2:	6802      	ldr	r2, [r0, #0]
            hdma->State = HAL_DMA_STATE_READY;
 800c2a4:	2101      	movs	r1, #1
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800c2a6:	f022 0210 	bic.w	r2, r2, #16
 800c2aa:	6002      	str	r2, [r0, #0]
            __HAL_UNLOCK(hdma);
 800c2ac:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 800c2b0:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
 800c2b4:	e74c      	b.n	800c150 <HAL_DMA_IRQHandler+0x41c>
            if(hdma->XferM1CpltCallback != NULL)
 800c2b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	f47f af4b 	bne.w	800c154 <HAL_DMA_IRQHandler+0x420>
 800c2be:	e74b      	b.n	800c158 <HAL_DMA_IRQHandler+0x424>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800c2c0:	681a      	ldr	r2, [r3, #0]
 800c2c2:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800c2c6:	e6c4      	b.n	800c052 <HAL_DMA_IRQHandler+0x31e>
 800c2c8:	400204b8 	.word	0x400204b8
 800c2cc:	40020010 	.word	0x40020010
 800c2d0:	40020028 	.word	0x40020028
 800c2d4:	40020040 	.word	0x40020040
 800c2d8:	1b4e81b5 	.word	0x1b4e81b5
 800c2dc:	58025408 	.word	0x58025408
 800c2e0:	5802541c 	.word	0x5802541c
 800c2e4:	58025430 	.word	0x58025430
 800c2e8:	58025494 	.word	0x58025494
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800c2ec:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800c2ee:	f1be 0f00 	cmp.w	lr, #0
 800c2f2:	f43f aec1 	beq.w	800c078 <HAL_DMA_IRQHandler+0x344>
 800c2f6:	e653      	b.n	800bfa0 <HAL_DMA_IRQHandler+0x26c>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c2f8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d1ba      	bne.n	800c274 <HAL_DMA_IRQHandler+0x540>
 800c2fe:	e7bd      	b.n	800c27c <HAL_DMA_IRQHandler+0x548>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800c300:	2502      	movs	r5, #2
 800c302:	40a5      	lsls	r5, r4
 800c304:	420d      	tst	r5, r1
 800c306:	d00c      	beq.n	800c322 <HAL_DMA_IRQHandler+0x5ee>
 800c308:	0796      	lsls	r6, r2, #30
 800c30a:	d50a      	bpl.n	800c322 <HAL_DMA_IRQHandler+0x5ee>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800c30c:	0414      	lsls	r4, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800c30e:	f8c8 5004 	str.w	r5, [r8, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800c312:	d52e      	bpl.n	800c372 <HAL_DMA_IRQHandler+0x63e>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800c314:	03d1      	lsls	r1, r2, #15
 800c316:	d438      	bmi.n	800c38a <HAL_DMA_IRQHandler+0x656>
          if(hdma->XferM1CpltCallback != NULL)
 800c318:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	f47f af46 	bne.w	800c1ac <HAL_DMA_IRQHandler+0x478>
 800c320:	e792      	b.n	800c248 <HAL_DMA_IRQHandler+0x514>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800c322:	2508      	movs	r5, #8
 800c324:	40a5      	lsls	r5, r4
 800c326:	420d      	tst	r5, r1
 800c328:	d08e      	beq.n	800c248 <HAL_DMA_IRQHandler+0x514>
 800c32a:	0712      	lsls	r2, r2, #28
 800c32c:	d58c      	bpl.n	800c248 <HAL_DMA_IRQHandler+0x514>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c32e:	6819      	ldr	r1, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800c330:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 800c332:	2500      	movs	r5, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c334:	f021 010e 	bic.w	r1, r1, #14
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800c338:	fa02 f404 	lsl.w	r4, r2, r4
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c33c:	6019      	str	r1, [r3, #0]
      if (hdma->XferErrorCallback != NULL)
 800c33e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800c340:	f8c8 4004 	str.w	r4, [r8, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800c344:	6542      	str	r2, [r0, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 800c346:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800c34a:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 800c34e:	2b00      	cmp	r3, #0
 800c350:	f47f af2c 	bne.w	800c1ac <HAL_DMA_IRQHandler+0x478>
 800c354:	e778      	b.n	800c248 <HAL_DMA_IRQHandler+0x514>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800c356:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800c358:	f1b9 0f00 	cmp.w	r9, #0
 800c35c:	f47f adc7 	bne.w	800beee <HAL_DMA_IRQHandler+0x1ba>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800c360:	f1be 0f00 	cmp.w	lr, #0
 800c364:	f43f ae88 	beq.w	800c078 <HAL_DMA_IRQHandler+0x344>
 800c368:	e618      	b.n	800bf9c <HAL_DMA_IRQHandler+0x268>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800c36a:	6803      	ldr	r3, [r0, #0]
 800c36c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800c370:	e6dd      	b.n	800c12e <HAL_DMA_IRQHandler+0x3fa>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800c372:	f012 0220 	ands.w	r2, r2, #32
 800c376:	d108      	bne.n	800c38a <HAL_DMA_IRQHandler+0x656>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800c378:	6819      	ldr	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800c37a:	2401      	movs	r4, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800c37c:	f021 010a 	bic.w	r1, r1, #10
 800c380:	6019      	str	r1, [r3, #0]
          __HAL_UNLOCK(hdma);
 800c382:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800c386:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 800c38a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	f47f af0d 	bne.w	800c1ac <HAL_DMA_IRQHandler+0x478>
 800c392:	e759      	b.n	800c248 <HAL_DMA_IRQHandler+0x514>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800c394:	0697      	lsls	r7, r2, #26
 800c396:	d403      	bmi.n	800c3a0 <HAL_DMA_IRQHandler+0x66c>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800c398:	681a      	ldr	r2, [r3, #0]
 800c39a:	f022 0204 	bic.w	r2, r2, #4
 800c39e:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 800c3a0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	f47f af02 	bne.w	800c1ac <HAL_DMA_IRQHandler+0x478>
 800c3a8:	e74e      	b.n	800c248 <HAL_DMA_IRQHandler+0x514>
 800c3aa:	bf00      	nop

0800c3ac <HAL_DMA2D_MspInit>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 800c3ac:	4770      	bx	lr
 800c3ae:	bf00      	nop

0800c3b0 <HAL_DMA2D_Init>:
  if(hdma2d == NULL)
 800c3b0:	2800      	cmp	r0, #0
 800c3b2:	d036      	beq.n	800c422 <HAL_DMA2D_Init+0x72>
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800c3b4:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
{
 800c3b8:	b570      	push	{r4, r5, r6, lr}
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800c3ba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c3be:	4604      	mov	r4, r0
 800c3c0:	b353      	cbz	r3, 800c418 <HAL_DMA2D_Init+0x68>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800c3c2:	6823      	ldr	r3, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800c3c4:	2202      	movs	r2, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800c3c6:	69e0      	ldr	r0, [r4, #28]
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800c3c8:	2500      	movs	r5, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800c3ca:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800c3ce:	4916      	ldr	r1, [pc, #88]	; (800c428 <HAL_DMA2D_Init+0x78>)
 800c3d0:	681e      	ldr	r6, [r3, #0]
 800c3d2:	6862      	ldr	r2, [r4, #4]
 800c3d4:	4031      	ands	r1, r6
 800c3d6:	4302      	orrs	r2, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 800c3d8:	4814      	ldr	r0, [pc, #80]	; (800c42c <HAL_DMA2D_Init+0x7c>)
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800c3da:	4311      	orrs	r1, r2
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 800c3dc:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800c3de:	6019      	str	r1, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 800c3e0:	69a1      	ldr	r1, [r4, #24]
 800c3e2:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800c3e4:	430a      	orrs	r2, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800c3e6:	4912      	ldr	r1, [pc, #72]	; (800c430 <HAL_DMA2D_Init+0x80>)
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 800c3e8:	4030      	ands	r0, r6
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800c3ea:	2601      	movs	r6, #1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 800c3ec:	4302      	orrs	r2, r0
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800c3ee:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 800c3f0:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800c3f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c3f4:	4011      	ands	r1, r2
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 800c3f6:	6962      	ldr	r2, [r4, #20]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800c3f8:	4301      	orrs	r1, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 800c3fa:	0552      	lsls	r2, r2, #21
 800c3fc:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800c3fe:	6419      	str	r1, [r3, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 800c400:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800c402:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
  return HAL_OK;
 800c406:	4628      	mov	r0, r5
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 800c408:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 800c40c:	430a      	orrs	r2, r1
 800c40e:	635a      	str	r2, [r3, #52]	; 0x34
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800c410:	6665      	str	r5, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800c412:	f884 6061 	strb.w	r6, [r4, #97]	; 0x61
}
 800c416:	bd70      	pop	{r4, r5, r6, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 800c418:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    HAL_DMA2D_MspInit(hdma2d);
 800c41c:	f7ff ffc6 	bl	800c3ac <HAL_DMA2D_MspInit>
 800c420:	e7cf      	b.n	800c3c2 <HAL_DMA2D_Init+0x12>
     return HAL_ERROR;
 800c422:	2001      	movs	r0, #1
}
 800c424:	4770      	bx	lr
 800c426:	bf00      	nop
 800c428:	fff8ffbf 	.word	0xfff8ffbf
 800c42c:	fffffef8 	.word	0xfffffef8
 800c430:	ffff0000 	.word	0xffff0000

0800c434 <HAL_DMA2D_MspDeInit>:
 800c434:	4770      	bx	lr
 800c436:	bf00      	nop

0800c438 <HAL_DMA2D_DeInit>:
  if(hdma2d == NULL)
 800c438:	b318      	cbz	r0, 800c482 <HAL_DMA2D_DeInit+0x4a>
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 800c43a:	4b40      	ldr	r3, [pc, #256]	; (800c53c <HAL_DMA2D_DeInit+0x104>)
 800c43c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
{
 800c440:	b570      	push	{r4, r5, r6, lr}
 800c442:	4605      	mov	r5, r0
 800c444:	6804      	ldr	r4, [r0, #0]
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 800c446:	06d8      	lsls	r0, r3, #27
 800c448:	d508      	bpl.n	800c45c <HAL_DMA2D_DeInit+0x24>
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 800c44a:	6823      	ldr	r3, [r4, #0]
 800c44c:	07d9      	lsls	r1, r3, #31
 800c44e:	d443      	bmi.n	800c4d8 <HAL_DMA2D_DeInit+0xa0>
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 800c450:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c452:	069a      	lsls	r2, r3, #26
 800c454:	d45f      	bmi.n	800c516 <HAL_DMA2D_DeInit+0xde>
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 800c456:	69e3      	ldr	r3, [r4, #28]
 800c458:	069b      	lsls	r3, r3, #26
 800c45a:	d414      	bmi.n	800c486 <HAL_DMA2D_DeInit+0x4e>
  hdma2d->Instance->CR       =    0U;
 800c45c:	2600      	movs	r6, #0
  hdma2d->Instance->IFCR     = 0x3FU;
 800c45e:	233f      	movs	r3, #63	; 0x3f
  HAL_DMA2D_MspDeInit(hdma2d);
 800c460:	4628      	mov	r0, r5
  hdma2d->Instance->CR       =    0U;
 800c462:	6026      	str	r6, [r4, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 800c464:	60a3      	str	r3, [r4, #8]
  hdma2d->Instance->FGOR     =    0U;
 800c466:	6126      	str	r6, [r4, #16]
  hdma2d->Instance->BGOR     =    0U;
 800c468:	61a6      	str	r6, [r4, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 800c46a:	61e6      	str	r6, [r4, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 800c46c:	6266      	str	r6, [r4, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 800c46e:	6366      	str	r6, [r4, #52]	; 0x34
  HAL_DMA2D_MspDeInit(hdma2d);
 800c470:	f7ff ffe0 	bl	800c434 <HAL_DMA2D_MspDeInit>
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800c474:	666e      	str	r6, [r5, #100]	; 0x64
  __HAL_UNLOCK(hdma2d);
 800c476:	f885 6060 	strb.w	r6, [r5, #96]	; 0x60
  return HAL_OK;
 800c47a:	4630      	mov	r0, r6
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 800c47c:	f885 6061 	strb.w	r6, [r5, #97]	; 0x61
}
 800c480:	bd70      	pop	{r4, r5, r6, pc}
     return HAL_ERROR;
 800c482:	2001      	movs	r0, #1
}
 800c484:	4770      	bx	lr
{
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 800c486:	6823      	ldr	r3, [r4, #0]
 800c488:	f043 0304 	orr.w	r3, r3, #4
 800c48c:	6023      	str	r3, [r4, #0]
    reg  = &(hdma2d->Instance->FGPFCCR);
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 800c48e:	f7fe f8b7 	bl	800a600 <HAL_GetTick>
 800c492:	4606      	mov	r6, r0
 800c494:	e005      	b.n	800c4a2 <HAL_DMA2D_DeInit+0x6a>

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 800c496:	f7fe f8b3 	bl	800a600 <HAL_GetTick>
 800c49a:	1b80      	subs	r0, r0, r6
 800c49c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800c4a0:	d80e      	bhi.n	800c4c0 <HAL_DMA2D_DeInit+0x88>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 800c4a2:	69e3      	ldr	r3, [r4, #28]
 800c4a4:	f013 0320 	ands.w	r3, r3, #32
 800c4a8:	d1f5      	bne.n	800c496 <HAL_DMA2D_DeInit+0x5e>
      return HAL_TIMEOUT;
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 800c4aa:	682c      	ldr	r4, [r5, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800c4ac:	2101      	movs	r1, #1
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 800c4ae:	6822      	ldr	r2, [r4, #0]
 800c4b0:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 800c4b4:	6022      	str	r2, [r4, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 800c4b6:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800c4ba:	f885 1061 	strb.w	r1, [r5, #97]	; 0x61
 800c4be:	e7cd      	b.n	800c45c <HAL_DMA2D_DeInit+0x24>
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800c4c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800c4c2:	2203      	movs	r2, #3
      __HAL_UNLOCK(hdma2d);
 800c4c4:	2100      	movs	r1, #0
            return HAL_ERROR;
 800c4c6:	2001      	movs	r0, #1
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800c4c8:	f043 0320 	orr.w	r3, r3, #32
      __HAL_UNLOCK(hdma2d);
 800c4cc:	f885 1060 	strb.w	r1, [r5, #96]	; 0x60
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800c4d0:	666b      	str	r3, [r5, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800c4d2:	f885 2061 	strb.w	r2, [r5, #97]	; 0x61
}
 800c4d6:	bd70      	pop	{r4, r5, r6, pc}
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 800c4d8:	6823      	ldr	r3, [r4, #0]
 800c4da:	f023 0305 	bic.w	r3, r3, #5
 800c4de:	f043 0304 	orr.w	r3, r3, #4
 800c4e2:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800c4e4:	f7fe f88c 	bl	800a600 <HAL_GetTick>
 800c4e8:	4606      	mov	r6, r0
 800c4ea:	e005      	b.n	800c4f8 <HAL_DMA2D_DeInit+0xc0>
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 800c4ec:	f7fe f888 	bl	800a600 <HAL_GetTick>
 800c4f0:	1b80      	subs	r0, r0, r6
 800c4f2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800c4f6:	d8e3      	bhi.n	800c4c0 <HAL_DMA2D_DeInit+0x88>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800c4f8:	682c      	ldr	r4, [r5, #0]
 800c4fa:	6823      	ldr	r3, [r4, #0]
 800c4fc:	f013 0301 	ands.w	r3, r3, #1
 800c500:	d1f4      	bne.n	800c4ec <HAL_DMA2D_DeInit+0xb4>
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 800c502:	6822      	ldr	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800c504:	2101      	movs	r1, #1
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 800c506:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 800c50a:	6022      	str	r2, [r4, #0]
  __HAL_UNLOCK(hdma2d);
 800c50c:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800c510:	f885 1061 	strb.w	r1, [r5, #97]	; 0x61
 800c514:	e7a2      	b.n	800c45c <HAL_DMA2D_DeInit+0x24>
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 800c516:	6823      	ldr	r3, [r4, #0]
 800c518:	f043 0304 	orr.w	r3, r3, #4
 800c51c:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800c51e:	f7fe f86f 	bl	800a600 <HAL_GetTick>
 800c522:	4606      	mov	r6, r0
 800c524:	e005      	b.n	800c532 <HAL_DMA2D_DeInit+0xfa>
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 800c526:	f7fe f86b 	bl	800a600 <HAL_GetTick>
 800c52a:	1b80      	subs	r0, r0, r6
 800c52c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800c530:	d8c6      	bhi.n	800c4c0 <HAL_DMA2D_DeInit+0x88>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 800c532:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c534:	f013 0320 	ands.w	r3, r3, #32
 800c538:	d1f5      	bne.n	800c526 <HAL_DMA2D_DeInit+0xee>
 800c53a:	e7b6      	b.n	800c4aa <HAL_DMA2D_DeInit+0x72>
 800c53c:	58024400 	.word	0x58024400

0800c540 <HAL_DMA2D_Start>:
{
 800c540:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma2d);
 800c542:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 800c546:	2c01      	cmp	r4, #1
 800c548:	d039      	beq.n	800c5be <HAL_DMA2D_Start+0x7e>
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800c54a:	6804      	ldr	r4, [r0, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800c54c:	2502      	movs	r5, #2
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800c54e:	9e03      	ldr	r6, [sp, #12]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800c550:	f880 5061 	strb.w	r5, [r0, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800c554:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
 800c558:	6c65      	ldr	r5, [r4, #68]	; 0x44
  __HAL_LOCK(hdma2d);
 800c55a:	2601      	movs	r6, #1
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800c55c:	f005 4540 	and.w	r5, r5, #3221225472	; 0xc0000000
  __HAL_LOCK(hdma2d);
 800c560:	f880 6060 	strb.w	r6, [r0, #96]	; 0x60

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800c564:	6846      	ldr	r6, [r0, #4]
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800c566:	432b      	orrs	r3, r5
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800c568:	f5b6 3f40 	cmp.w	r6, #196608	; 0x30000
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800c56c:	6463      	str	r3, [r4, #68]	; 0x44
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800c56e:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800c570:	d00a      	beq.n	800c588 <HAL_DMA2D_Start+0x48>
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else if(hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 800c572:	f5b6 2f80 	cmp.w	r6, #262144	; 0x40000
 800c576:	d025      	beq.n	800c5c4 <HAL_DMA2D_Start+0x84>
    WRITE_REG(hdma2d->Instance->BGMAR , pdata);
  }
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800c578:	60e1      	str	r1, [r4, #12]
  __HAL_DMA2D_ENABLE(hdma2d);
 800c57a:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 800c57c:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 800c57e:	f043 0301 	orr.w	r3, r3, #1
 800c582:	6023      	str	r3, [r4, #0]
}
 800c584:	bc70      	pop	{r4, r5, r6}
 800c586:	4770      	bx	lr
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800c588:	6882      	ldr	r2, [r0, #8]
 800c58a:	b1b2      	cbz	r2, 800c5ba <HAL_DMA2D_Start+0x7a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800c58c:	2a01      	cmp	r2, #1
 800c58e:	d026      	beq.n	800c5de <HAL_DMA2D_Start+0x9e>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800c590:	2a02      	cmp	r2, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800c592:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800c596:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800c59a:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800c59c:	d022      	beq.n	800c5e4 <HAL_DMA2D_Start+0xa4>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800c59e:	2a03      	cmp	r2, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800c5a0:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800c5a4:	d010      	beq.n	800c5c8 <HAL_DMA2D_Start+0x88>
      tmp2 = (tmp2 >> 20U);
 800c5a6:	0d1b      	lsrs	r3, r3, #20
      tmp3 = (tmp3 >> 12U);
 800c5a8:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800c5aa:	021b      	lsls	r3, r3, #8
      tmp1 = (tmp1 >> 28U);
 800c5ac:	0f09      	lsrs	r1, r1, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800c5ae:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 800c5b2:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800c5b6:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800c5ba:	63a1      	str	r1, [r4, #56]	; 0x38
 800c5bc:	e7dd      	b.n	800c57a <HAL_DMA2D_Start+0x3a>
  __HAL_LOCK(hdma2d);
 800c5be:	2002      	movs	r0, #2
}
 800c5c0:	bc70      	pop	{r4, r5, r6}
 800c5c2:	4770      	bx	lr
    WRITE_REG(hdma2d->Instance->BGMAR , pdata);
 800c5c4:	6161      	str	r1, [r4, #20]
 800c5c6:	e7d8      	b.n	800c57a <HAL_DMA2D_Start+0x3a>
      tmp2 = (tmp2 >> 19U);
 800c5c8:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 800c5ca:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800c5cc:	029b      	lsls	r3, r3, #10
      tmp1 = (tmp1 >> 31U);
 800c5ce:	0fc9      	lsrs	r1, r1, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800c5d0:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 800c5d4:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 800c5d8:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 800c5dc:	e7ed      	b.n	800c5ba <HAL_DMA2D_Start+0x7a>
      tmp = (tmp3 | tmp2 | tmp4);
 800c5de:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800c5e2:	e7ea      	b.n	800c5ba <HAL_DMA2D_Start+0x7a>
      tmp2 = (tmp2 >> 19U);
 800c5e4:	0cd9      	lsrs	r1, r3, #19
      tmp3 = (tmp3 >> 10U);
 800c5e6:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800c5e8:	02c9      	lsls	r1, r1, #11
 800c5ea:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 800c5ee:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 800c5f2:	e7e2      	b.n	800c5ba <HAL_DMA2D_Start+0x7a>

0800c5f4 <HAL_DMA2D_PollForTransfer>:
{
 800c5f4:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 800c5f6:	2200      	movs	r2, #0
{
 800c5f8:	b082      	sub	sp, #8
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800c5fa:	6803      	ldr	r3, [r0, #0]
{
 800c5fc:	4604      	mov	r4, r0
  __IO uint32_t isrflags = 0x0U;
 800c5fe:	9201      	str	r2, [sp, #4]
{
 800c600:	460d      	mov	r5, r1
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800c602:	681a      	ldr	r2, [r3, #0]
 800c604:	07d6      	lsls	r6, r2, #31
 800c606:	d40f      	bmi.n	800c628 <HAL_DMA2D_PollForTransfer+0x34>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800c608:	69da      	ldr	r2, [r3, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800c60a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800c60c:	430a      	orrs	r2, r1
  if (layer_start != 0U)
 800c60e:	0691      	lsls	r1, r2, #26
 800c610:	d432      	bmi.n	800c678 <HAL_DMA2D_PollForTransfer+0x84>
  __HAL_UNLOCK(hdma2d);
 800c612:	2200      	movs	r2, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 800c614:	2512      	movs	r5, #18
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800c616:	2101      	movs	r1, #1
  return HAL_OK;
 800c618:	4610      	mov	r0, r2
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 800c61a:	609d      	str	r5, [r3, #8]
  __HAL_UNLOCK(hdma2d);
 800c61c:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800c620:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
}
 800c624:	b002      	add	sp, #8
 800c626:	bd70      	pop	{r4, r5, r6, pc}
   tickstart = HAL_GetTick();
 800c628:	f7fd ffea 	bl	800a600 <HAL_GetTick>
 800c62c:	4606      	mov	r6, r0
 800c62e:	1c6a      	adds	r2, r5, #1
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800c630:	6823      	ldr	r3, [r4, #0]
 800c632:	d147      	bne.n	800c6c4 <HAL_DMA2D_PollForTransfer+0xd0>
 800c634:	685a      	ldr	r2, [r3, #4]
 800c636:	0796      	lsls	r6, r2, #30
 800c638:	d4e6      	bmi.n	800c608 <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800c63a:	685a      	ldr	r2, [r3, #4]
 800c63c:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800c63e:	9a01      	ldr	r2, [sp, #4]
 800c640:	f012 0f21 	tst.w	r2, #33	; 0x21
 800c644:	d0f6      	beq.n	800c634 <HAL_DMA2D_PollForTransfer+0x40>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800c646:	9a01      	ldr	r2, [sp, #4]
 800c648:	0690      	lsls	r0, r2, #26
 800c64a:	d503      	bpl.n	800c654 <HAL_DMA2D_PollForTransfer+0x60>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800c64c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c64e:	f042 0202 	orr.w	r2, r2, #2
 800c652:	6662      	str	r2, [r4, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800c654:	9a01      	ldr	r2, [sp, #4]
 800c656:	07d1      	lsls	r1, r2, #31
 800c658:	d503      	bpl.n	800c662 <HAL_DMA2D_PollForTransfer+0x6e>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800c65a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c65c:	f042 0201 	orr.w	r2, r2, #1
 800c660:	6662      	str	r2, [r4, #100]	; 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800c662:	2521      	movs	r5, #33	; 0x21
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 800c664:	2104      	movs	r1, #4
        __HAL_UNLOCK(hdma2d);
 800c666:	2200      	movs	r2, #0
        return HAL_ERROR;
 800c668:	2001      	movs	r0, #1
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800c66a:	609d      	str	r5, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 800c66c:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
        __HAL_UNLOCK(hdma2d);
 800c670:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
}
 800c674:	b002      	add	sp, #8
 800c676:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 800c678:	f7fd ffc2 	bl	800a600 <HAL_GetTick>
 800c67c:	4606      	mov	r6, r0
 800c67e:	1c68      	adds	r0, r5, #1
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800c680:	6823      	ldr	r3, [r4, #0]
 800c682:	d13b      	bne.n	800c6fc <HAL_DMA2D_PollForTransfer+0x108>
 800c684:	685a      	ldr	r2, [r3, #4]
 800c686:	06d1      	lsls	r1, r2, #27
 800c688:	d4c3      	bmi.n	800c612 <HAL_DMA2D_PollForTransfer+0x1e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800c68a:	685a      	ldr	r2, [r3, #4]
 800c68c:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800c68e:	9a01      	ldr	r2, [sp, #4]
 800c690:	f012 0f29 	tst.w	r2, #41	; 0x29
 800c694:	d0f6      	beq.n	800c684 <HAL_DMA2D_PollForTransfer+0x90>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800c696:	9a01      	ldr	r2, [sp, #4]
 800c698:	0712      	lsls	r2, r2, #28
 800c69a:	d503      	bpl.n	800c6a4 <HAL_DMA2D_PollForTransfer+0xb0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800c69c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c69e:	f042 0204 	orr.w	r2, r2, #4
 800c6a2:	6662      	str	r2, [r4, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800c6a4:	9a01      	ldr	r2, [sp, #4]
 800c6a6:	0696      	lsls	r6, r2, #26
 800c6a8:	d503      	bpl.n	800c6b2 <HAL_DMA2D_PollForTransfer+0xbe>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800c6aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c6ac:	f042 0202 	orr.w	r2, r2, #2
 800c6b0:	6662      	str	r2, [r4, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800c6b2:	9a01      	ldr	r2, [sp, #4]
 800c6b4:	07d5      	lsls	r5, r2, #31
 800c6b6:	d503      	bpl.n	800c6c0 <HAL_DMA2D_PollForTransfer+0xcc>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800c6b8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c6ba:	f042 0201 	orr.w	r2, r2, #1
 800c6be:	6662      	str	r2, [r4, #100]	; 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800c6c0:	2529      	movs	r5, #41	; 0x29
 800c6c2:	e7cf      	b.n	800c664 <HAL_DMA2D_PollForTransfer+0x70>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800c6c4:	685a      	ldr	r2, [r3, #4]
 800c6c6:	0790      	lsls	r0, r2, #30
 800c6c8:	d49e      	bmi.n	800c608 <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800c6ca:	685a      	ldr	r2, [r3, #4]
 800c6cc:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800c6ce:	9a01      	ldr	r2, [sp, #4]
 800c6d0:	f012 0f21 	tst.w	r2, #33	; 0x21
 800c6d4:	d1b7      	bne.n	800c646 <HAL_DMA2D_PollForTransfer+0x52>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800c6d6:	f7fd ff93 	bl	800a600 <HAL_GetTick>
 800c6da:	1b80      	subs	r0, r0, r6
 800c6dc:	42a8      	cmp	r0, r5
 800c6de:	d801      	bhi.n	800c6e4 <HAL_DMA2D_PollForTransfer+0xf0>
 800c6e0:	2d00      	cmp	r5, #0
 800c6e2:	d1a4      	bne.n	800c62e <HAL_DMA2D_PollForTransfer+0x3a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800c6e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 800c6e6:	2203      	movs	r2, #3
          __HAL_UNLOCK(hdma2d);
 800c6e8:	2100      	movs	r1, #0
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800c6ea:	f043 0320 	orr.w	r3, r3, #32
          return HAL_TIMEOUT;
 800c6ee:	4610      	mov	r0, r2
          __HAL_UNLOCK(hdma2d);
 800c6f0:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800c6f4:	6663      	str	r3, [r4, #100]	; 0x64
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 800c6f6:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
          return HAL_TIMEOUT;
 800c6fa:	e793      	b.n	800c624 <HAL_DMA2D_PollForTransfer+0x30>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800c6fc:	685a      	ldr	r2, [r3, #4]
 800c6fe:	06d2      	lsls	r2, r2, #27
 800c700:	d487      	bmi.n	800c612 <HAL_DMA2D_PollForTransfer+0x1e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800c702:	685a      	ldr	r2, [r3, #4]
 800c704:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800c706:	9a01      	ldr	r2, [sp, #4]
 800c708:	f012 0f29 	tst.w	r2, #41	; 0x29
 800c70c:	d1c3      	bne.n	800c696 <HAL_DMA2D_PollForTransfer+0xa2>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800c70e:	f7fd ff77 	bl	800a600 <HAL_GetTick>
 800c712:	1b80      	subs	r0, r0, r6
 800c714:	42a8      	cmp	r0, r5
 800c716:	d8e5      	bhi.n	800c6e4 <HAL_DMA2D_PollForTransfer+0xf0>
 800c718:	2d00      	cmp	r5, #0
 800c71a:	d1b0      	bne.n	800c67e <HAL_DMA2D_PollForTransfer+0x8a>
 800c71c:	e7e2      	b.n	800c6e4 <HAL_DMA2D_PollForTransfer+0xf0>
 800c71e:	bf00      	nop

0800c720 <HAL_DMA2D_LineEventCallback>:
 800c720:	4770      	bx	lr
 800c722:	bf00      	nop

0800c724 <HAL_DMA2D_CLUTLoadingCpltCallback>:
 800c724:	4770      	bx	lr
 800c726:	bf00      	nop

0800c728 <HAL_DMA2D_IRQHandler>:
{
 800c728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800c72a:	6803      	ldr	r3, [r0, #0]
{
 800c72c:	4604      	mov	r4, r0
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800c72e:	685d      	ldr	r5, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800c730:	681e      	ldr	r6, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800c732:	07e9      	lsls	r1, r5, #31
 800c734:	d517      	bpl.n	800c766 <HAL_DMA2D_IRQHandler+0x3e>
    if ((crflags & DMA2D_IT_TE) != 0U)
 800c736:	05f2      	lsls	r2, r6, #23
 800c738:	d515      	bpl.n	800c766 <HAL_DMA2D_IRQHandler+0x3e>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800c73a:	681a      	ldr	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800c73c:	f04f 0e01 	mov.w	lr, #1
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800c740:	f04f 0c04 	mov.w	ip, #4
      __HAL_UNLOCK(hdma2d);
 800c744:	2700      	movs	r7, #0
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800c746:	f422 7280 	bic.w	r2, r2, #256	; 0x100
      if(hdma2d->XferErrorCallback != NULL)
 800c74a:	6a41      	ldr	r1, [r0, #36]	; 0x24
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800c74c:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800c74e:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800c750:	ea42 020e 	orr.w	r2, r2, lr
 800c754:	6642      	str	r2, [r0, #100]	; 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800c756:	f8c3 e008 	str.w	lr, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800c75a:	f880 c061 	strb.w	ip, [r0, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 800c75e:	f880 7060 	strb.w	r7, [r0, #96]	; 0x60
      if(hdma2d->XferErrorCallback != NULL)
 800c762:	b101      	cbz	r1, 800c766 <HAL_DMA2D_IRQHandler+0x3e>
        hdma2d->XferErrorCallback(hdma2d);
 800c764:	4788      	blx	r1
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800c766:	06af      	lsls	r7, r5, #26
 800c768:	d516      	bpl.n	800c798 <HAL_DMA2D_IRQHandler+0x70>
    if ((crflags & DMA2D_IT_CE) != 0U)
 800c76a:	04b0      	lsls	r0, r6, #18
 800c76c:	d514      	bpl.n	800c798 <HAL_DMA2D_IRQHandler+0x70>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800c76e:	6823      	ldr	r3, [r4, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800c770:	2020      	movs	r0, #32
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800c772:	2104      	movs	r1, #4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800c774:	681a      	ldr	r2, [r3, #0]
 800c776:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c77a:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hdma2d);
 800c77c:	2200      	movs	r2, #0
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800c77e:	6098      	str	r0, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800c780:	6e63      	ldr	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(hdma2d);
 800c782:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800c786:	f043 0302 	orr.w	r3, r3, #2
      if(hdma2d->XferErrorCallback != NULL)
 800c78a:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800c78c:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800c78e:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
      if(hdma2d->XferErrorCallback != NULL)
 800c792:	b10a      	cbz	r2, 800c798 <HAL_DMA2D_IRQHandler+0x70>
        hdma2d->XferErrorCallback(hdma2d);
 800c794:	4620      	mov	r0, r4
 800c796:	4790      	blx	r2
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800c798:	0729      	lsls	r1, r5, #28
 800c79a:	d515      	bpl.n	800c7c8 <HAL_DMA2D_IRQHandler+0xa0>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800c79c:	0532      	lsls	r2, r6, #20
 800c79e:	d513      	bpl.n	800c7c8 <HAL_DMA2D_IRQHandler+0xa0>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800c7a0:	6823      	ldr	r3, [r4, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800c7a2:	2008      	movs	r0, #8
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800c7a4:	2104      	movs	r1, #4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800c7a6:	681a      	ldr	r2, [r3, #0]
 800c7a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c7ac:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hdma2d);
 800c7ae:	2200      	movs	r2, #0
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800c7b0:	6098      	str	r0, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800c7b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(hdma2d);
 800c7b4:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800c7b8:	430b      	orrs	r3, r1
      if(hdma2d->XferErrorCallback != NULL)
 800c7ba:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800c7bc:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800c7be:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
      if(hdma2d->XferErrorCallback != NULL)
 800c7c2:	b10a      	cbz	r2, 800c7c8 <HAL_DMA2D_IRQHandler+0xa0>
        hdma2d->XferErrorCallback(hdma2d);
 800c7c4:	4620      	mov	r0, r4
 800c7c6:	4790      	blx	r2
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800c7c8:	076b      	lsls	r3, r5, #29
 800c7ca:	d501      	bpl.n	800c7d0 <HAL_DMA2D_IRQHandler+0xa8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 800c7cc:	0577      	lsls	r7, r6, #21
 800c7ce:	d42e      	bmi.n	800c82e <HAL_DMA2D_IRQHandler+0x106>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800c7d0:	07a8      	lsls	r0, r5, #30
 800c7d2:	d514      	bpl.n	800c7fe <HAL_DMA2D_IRQHandler+0xd6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 800c7d4:	05b1      	lsls	r1, r6, #22
 800c7d6:	d512      	bpl.n	800c7fe <HAL_DMA2D_IRQHandler+0xd6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800c7d8:	6823      	ldr	r3, [r4, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800c7da:	2702      	movs	r7, #2
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800c7dc:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma2d);
 800c7de:	2000      	movs	r0, #0
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800c7e0:	681a      	ldr	r2, [r3, #0]
 800c7e2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800c7e6:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800c7e8:	609f      	str	r7, [r3, #8]
      if(hdma2d->XferCpltCallback != NULL)
 800c7ea:	6a23      	ldr	r3, [r4, #32]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800c7ec:	6e62      	ldr	r2, [r4, #100]	; 0x64
      __HAL_UNLOCK(hdma2d);
 800c7ee:	f884 0060 	strb.w	r0, [r4, #96]	; 0x60
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800c7f2:	6662      	str	r2, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800c7f4:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
      if(hdma2d->XferCpltCallback != NULL)
 800c7f8:	b10b      	cbz	r3, 800c7fe <HAL_DMA2D_IRQHandler+0xd6>
        hdma2d->XferCpltCallback(hdma2d);
 800c7fa:	4620      	mov	r0, r4
 800c7fc:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800c7fe:	06ea      	lsls	r2, r5, #27
 800c800:	d501      	bpl.n	800c806 <HAL_DMA2D_IRQHandler+0xde>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800c802:	04f3      	lsls	r3, r6, #19
 800c804:	d400      	bmi.n	800c808 <HAL_DMA2D_IRQHandler+0xe0>
}
 800c806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800c808:	6823      	ldr	r3, [r4, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800c80a:	2610      	movs	r6, #16
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800c80c:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma2d);
 800c80e:	2500      	movs	r5, #0
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800c810:	681a      	ldr	r2, [r3, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800c812:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800c814:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c818:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800c81a:	609e      	str	r6, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800c81c:	6e63      	ldr	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(hdma2d);
 800c81e:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800c822:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800c824:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800c828:	f7ff ff7c 	bl	800c724 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 800c82c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800c82e:	6823      	ldr	r3, [r4, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800c830:	2104      	movs	r1, #4
      HAL_DMA2D_LineEventCallback(hdma2d);
 800c832:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800c834:	681a      	ldr	r2, [r3, #0]
 800c836:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c83a:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800c83c:	6099      	str	r1, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800c83e:	f7ff ff6f 	bl	800c720 <HAL_DMA2D_LineEventCallback>
 800c842:	e7c5      	b.n	800c7d0 <HAL_DMA2D_IRQHandler+0xa8>

0800c844 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 800c844:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 800c848:	2b01      	cmp	r3, #1
 800c84a:	d05c      	beq.n	800c906 <HAL_DMA2D_ConfigLayer+0xc2>
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800c84c:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800c850:	2302      	movs	r3, #2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800c852:	eb00 0282 	add.w	r2, r0, r2, lsl #2
{
 800c856:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma2d);
 800c858:	2401      	movs	r4, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800c85a:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800c85e:	6b93      	ldr	r3, [r2, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800c860:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  __HAL_LOCK(hdma2d);
 800c862:	f880 4060 	strb.w	r4, [r0, #96]	; 0x60
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800c866:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800c868:	6b14      	ldr	r4, [r2, #48]	; 0x30
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800c86a:	f1a6 0c09 	sub.w	ip, r6, #9
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800c86e:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800c870:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800c874:	f1bc 0f01 	cmp.w	ip, #1
 800c878:	6b57      	ldr	r7, [r2, #52]	; 0x34
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800c87a:	ea43 0306 	orr.w	r3, r3, r6
 800c87e:	6804      	ldr	r4, [r0, #0]
 800c880:	ea43 5345 	orr.w	r3, r3, r5, lsl #21
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800c884:	d91f      	bls.n	800c8c6 <HAL_DMA2D_ConfigLayer+0x82>
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800c886:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800c88a:	b979      	cbnz	r1, 800c8ac <HAL_DMA2D_ConfigLayer+0x68>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800c88c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c88e:	4a1f      	ldr	r2, [pc, #124]	; (800c90c <HAL_DMA2D_ConfigLayer+0xc8>)
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800c890:	6a81      	ldr	r1, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800c892:	402a      	ands	r2, r5
 800c894:	4313      	orrs	r3, r2
 800c896:	6263      	str	r3, [r4, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800c898:	61a1      	str	r1, [r4, #24]
  __HAL_UNLOCK(hdma2d);
 800c89a:	2300      	movs	r3, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800c89c:	2201      	movs	r2, #1
  __HAL_UNLOCK(hdma2d);
 800c89e:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800c8a2:	f880 2061 	strb.w	r2, [r0, #97]	; 0x61
}
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	bcf0      	pop	{r4, r5, r6, r7}
 800c8aa:	4770      	bx	lr
    if(pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 800c8ac:	2e0b      	cmp	r6, #11
 800c8ae:	6a95      	ldr	r5, [r2, #40]	; 0x28
 800c8b0:	d10e      	bne.n	800c8d0 <HAL_DMA2D_ConfigLayer+0x8c>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800c8b2:	69e6      	ldr	r6, [r4, #28]
 800c8b4:	4916      	ldr	r1, [pc, #88]	; (800c910 <HAL_DMA2D_ConfigLayer+0xcc>)
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 800c8b6:	6c12      	ldr	r2, [r2, #64]	; 0x40
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800c8b8:	4031      	ands	r1, r6
 800c8ba:	ea41 4182 	orr.w	r1, r1, r2, lsl #18
 800c8be:	430b      	orrs	r3, r1
 800c8c0:	61e3      	str	r3, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800c8c2:	6125      	str	r5, [r4, #16]
 800c8c4:	e7e9      	b.n	800c89a <HAL_DMA2D_ConfigLayer+0x56>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800c8c6:	f007 457f 	and.w	r5, r7, #4278190080	; 0xff000000
 800c8ca:	432b      	orrs	r3, r5
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800c8cc:	b179      	cbz	r1, 800c8ee <HAL_DMA2D_ConfigLayer+0xaa>
 800c8ce:	6a95      	ldr	r5, [r2, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800c8d0:	69e1      	ldr	r1, [r4, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800c8d2:	f1bc 0f01 	cmp.w	ip, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800c8d6:	4a0d      	ldr	r2, [pc, #52]	; (800c90c <HAL_DMA2D_ConfigLayer+0xc8>)
 800c8d8:	ea02 0201 	and.w	r2, r2, r1
 800c8dc:	ea43 0302 	orr.w	r3, r3, r2
 800c8e0:	61e3      	str	r3, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800c8e2:	6125      	str	r5, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800c8e4:	d8d9      	bhi.n	800c89a <HAL_DMA2D_ConfigLayer+0x56>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800c8e6:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
 800c8ea:	6227      	str	r7, [r4, #32]
 800c8ec:	e7d5      	b.n	800c89a <HAL_DMA2D_ConfigLayer+0x56>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800c8ee:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c8f0:	4a06      	ldr	r2, [pc, #24]	; (800c90c <HAL_DMA2D_ConfigLayer+0xc8>)
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800c8f2:	6b41      	ldr	r1, [r0, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800c8f4:	402a      	ands	r2, r5
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800c8f6:	6a85      	ldr	r5, [r0, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800c8f8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800c8fc:	4313      	orrs	r3, r2
 800c8fe:	6263      	str	r3, [r4, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800c900:	61a5      	str	r5, [r4, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800c902:	62a1      	str	r1, [r4, #40]	; 0x28
 800c904:	e7c9      	b.n	800c89a <HAL_DMA2D_ConfigLayer+0x56>
  __HAL_LOCK(hdma2d);
 800c906:	2202      	movs	r2, #2
}
 800c908:	4610      	mov	r0, r2
 800c90a:	4770      	bx	lr
 800c90c:	00ccfff0 	.word	0x00ccfff0
 800c910:	00c0fff0 	.word	0x00c0fff0

0800c914 <HAL_DSI_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 800c914:	4770      	bx	lr
 800c916:	bf00      	nop

0800c918 <HAL_DSI_Init>:
  if (hdsi == NULL)
 800c918:	2800      	cmp	r0, #0
 800c91a:	f000 80b2 	beq.w	800ca82 <HAL_DSI_Init+0x16a>
  if (hdsi->State == HAL_DSI_STATE_RESET)
 800c91e:	7c43      	ldrb	r3, [r0, #17]
{
 800c920:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c922:	4604      	mov	r4, r0
 800c924:	b083      	sub	sp, #12
 800c926:	460e      	mov	r6, r1
  if (hdsi->State == HAL_DSI_STATE_RESET)
 800c928:	2b00      	cmp	r3, #0
 800c92a:	f000 80a7 	beq.w	800ca7c <HAL_DSI_Init+0x164>
  __HAL_DSI_REG_ENABLE(hdsi);
 800c92e:	6823      	ldr	r3, [r4, #0]
  hdsi->State = HAL_DSI_STATE_BUSY;
 800c930:	2103      	movs	r1, #3
  __HAL_DSI_REG_ENABLE(hdsi);
 800c932:	2200      	movs	r2, #0
  hdsi->State = HAL_DSI_STATE_BUSY;
 800c934:	7461      	strb	r1, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 800c936:	9200      	str	r2, [sp, #0]
 800c938:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800c93c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800c940:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800c944:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800c948:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c94c:	9300      	str	r3, [sp, #0]
 800c94e:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 800c950:	f7fd fe56 	bl	800a600 <HAL_GetTick>
 800c954:	4605      	mov	r5, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800c956:	e006      	b.n	800c966 <HAL_DSI_Init+0x4e>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800c958:	f7fd fe52 	bl	800a600 <HAL_GetTick>
 800c95c:	1b40      	subs	r0, r0, r5
 800c95e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800c962:	f200 8088 	bhi.w	800ca76 <HAL_DSI_Init+0x15e>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800c966:	6823      	ldr	r3, [r4, #0]
 800c968:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800c96c:	04d1      	lsls	r1, r2, #19
 800c96e:	d5f3      	bpl.n	800c958 <HAL_DSI_Init+0x40>
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800c970:	6872      	ldr	r2, [r6, #4]
  __HAL_DSI_PLL_ENABLE(hdsi);
 800c972:	2000      	movs	r0, #0
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800c974:	f8d3 7430 	ldr.w	r7, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800c978:	6835      	ldr	r5, [r6, #0]
 800c97a:	02d2      	lsls	r2, r2, #11
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800c97c:	4942      	ldr	r1, [pc, #264]	; (800ca88 <HAL_DSI_Init+0x170>)
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800c97e:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 800c982:	68b5      	ldr	r5, [r6, #8]
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800c984:	4039      	ands	r1, r7
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800c986:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800c98a:	f8c3 1430 	str.w	r1, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800c98e:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 800c992:	430a      	orrs	r2, r1
 800c994:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 800c998:	9001      	str	r0, [sp, #4]
 800c99a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800c99e:	f042 0201 	orr.w	r2, r2, #1
 800c9a2:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800c9a6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800c9aa:	f003 0301 	and.w	r3, r3, #1
 800c9ae:	9301      	str	r3, [sp, #4]
 800c9b0:	9b01      	ldr	r3, [sp, #4]
  tickstart = HAL_GetTick();
 800c9b2:	f7fd fe25 	bl	800a600 <HAL_GetTick>
 800c9b6:	4605      	mov	r5, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800c9b8:	e005      	b.n	800c9c6 <HAL_DSI_Init+0xae>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800c9ba:	f7fd fe21 	bl	800a600 <HAL_GetTick>
 800c9be:	1b40      	subs	r0, r0, r5
 800c9c0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800c9c4:	d857      	bhi.n	800ca76 <HAL_DSI_Init+0x15e>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800c9c6:	6823      	ldr	r3, [r4, #0]
 800c9c8:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800c9cc:	05d2      	lsls	r2, r2, #23
 800c9ce:	d5f4      	bpl.n	800c9ba <HAL_DSI_Init+0xa2>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800c9d0:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800c9d4:	6862      	ldr	r2, [r4, #4]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800c9d6:	f041 0106 	orr.w	r1, r1, #6
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800c9da:	f8d4 e00c 	ldr.w	lr, [r4, #12]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800c9de:	f8d4 c008 	ldr.w	ip, [r4, #8]
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800c9e2:	f042 0201 	orr.w	r2, r2, #1
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800c9e6:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800c9ea:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 800c9ee:	6877      	ldr	r7, [r6, #4]
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800c9f0:	f021 0103 	bic.w	r1, r1, #3
 800c9f4:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800c9f8:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800c9fc:	430a      	orrs	r2, r1
 800c9fe:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800ca02:	f8d3 50a4 	ldr.w	r5, [r3, #164]	; 0xa4
 800ca06:	4a21      	ldr	r2, [pc, #132]	; (800ca8c <HAL_DSI_Init+0x174>)
 800ca08:	f025 0503 	bic.w	r5, r5, #3
 800ca0c:	f8c3 50a4 	str.w	r5, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800ca10:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
 800ca14:	ea40 000e 	orr.w	r0, r0, lr
 800ca18:	f8c3 00a4 	str.w	r0, [r3, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800ca1c:	6898      	ldr	r0, [r3, #8]
 800ca1e:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 800ca22:	6098      	str	r0, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800ca24:	6899      	ldr	r1, [r3, #8]
 800ca26:	ea41 010c 	orr.w	r1, r1, ip
 800ca2a:	6099      	str	r1, [r3, #8]
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 800ca2c:	b10f      	cbz	r7, 800ca32 <HAL_DSI_Init+0x11a>
 800ca2e:	fb02 f207 	mul.w	r2, r2, r7
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800ca32:	68b1      	ldr	r1, [r6, #8]
 800ca34:	f246 15a8 	movw	r5, #25000	; 0x61a8
 800ca38:	6830      	ldr	r0, [r6, #0]
  hdsi->State = HAL_DSI_STATE_READY;
 800ca3a:	2601      	movs	r6, #1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800ca3c:	f001 0103 	and.w	r1, r1, #3
 800ca40:	fb05 f500 	mul.w	r5, r5, r0
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800ca44:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800ca48:	408a      	lsls	r2, r1
  hdsi->Instance->IER[0U] = 0U;
 800ca4a:	2100      	movs	r1, #0
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800ca4c:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800ca50:	fbb2 f2f5 	udiv	r2, r2, r5
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800ca54:	f8c3 0418 	str.w	r0, [r3, #1048]	; 0x418
  return HAL_OK;
 800ca58:	4608      	mov	r0, r1
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800ca5a:	f8d3 5418 	ldr.w	r5, [r3, #1048]	; 0x418
 800ca5e:	432a      	orrs	r2, r5
 800ca60:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 800ca64:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800ca68:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800ca6c:	6161      	str	r1, [r4, #20]
  hdsi->ErrorMsk = 0U;
 800ca6e:	61a1      	str	r1, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 800ca70:	7466      	strb	r6, [r4, #17]
}
 800ca72:	b003      	add	sp, #12
 800ca74:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_TIMEOUT;
 800ca76:	2003      	movs	r0, #3
}
 800ca78:	b003      	add	sp, #12
 800ca7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_DSI_MspInit(hdsi);
 800ca7c:	f7ff ff4a 	bl	800c914 <HAL_DSI_MspInit>
 800ca80:	e755      	b.n	800c92e <HAL_DSI_Init+0x16>
    return HAL_ERROR;
 800ca82:	2001      	movs	r0, #1
}
 800ca84:	4770      	bx	lr
 800ca86:	bf00      	nop
 800ca88:	fffc8603 	.word	0xfffc8603
 800ca8c:	003d0900 	.word	0x003d0900

0800ca90 <HAL_DSI_TearingEffectCallback>:
 800ca90:	4770      	bx	lr
 800ca92:	bf00      	nop

0800ca94 <HAL_DSI_EndOfRefreshCallback>:
 800ca94:	4770      	bx	lr
 800ca96:	bf00      	nop

0800ca98 <HAL_DSI_ErrorCallback>:
 800ca98:	4770      	bx	lr
 800ca9a:	bf00      	nop

0800ca9c <HAL_DSI_IRQHandler>:
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
  uint32_t ErrorStatus0, ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800ca9c:	6803      	ldr	r3, [r0, #0]
 800ca9e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800caa2:	07d1      	lsls	r1, r2, #31
{
 800caa4:	b510      	push	{r4, lr}
 800caa6:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800caa8:	d503      	bpl.n	800cab2 <HAL_DSI_IRQHandler+0x16>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 800caaa:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800caae:	07d2      	lsls	r2, r2, #31
 800cab0:	d45b      	bmi.n	800cb6a <HAL_DSI_IRQHandler+0xce>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 800cab2:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800cab6:	0791      	lsls	r1, r2, #30
 800cab8:	d503      	bpl.n	800cac2 <HAL_DSI_IRQHandler+0x26>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 800caba:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800cabe:	0792      	lsls	r2, r2, #30
 800cac0:	d45a      	bmi.n	800cb78 <HAL_DSI_IRQHandler+0xdc>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 800cac2:	69a3      	ldr	r3, [r4, #24]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d04b      	beq.n	800cb60 <HAL_DSI_IRQHandler+0xc4>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 800cac8:	6821      	ldr	r1, [r4, #0]
 800caca:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800cace:	f8d1 30c4 	ldr.w	r3, [r1, #196]	; 0xc4
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 800cad2:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800cad6:	401a      	ands	r2, r3
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 800cad8:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 800cadc:	b291      	uxth	r1, r2
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 800cade:	4003      	ands	r3, r0
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 800cae0:	b119      	cbz	r1, 800caea <HAL_DSI_IRQHandler+0x4e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 800cae2:	6961      	ldr	r1, [r4, #20]
 800cae4:	f041 0101 	orr.w	r1, r1, #1
 800cae8:	6161      	str	r1, [r4, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 800caea:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
 800caee:	d003      	beq.n	800caf8 <HAL_DSI_IRQHandler+0x5c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 800caf0:	6962      	ldr	r2, [r4, #20]
 800caf2:	f042 0202 	orr.w	r2, r2, #2
 800caf6:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 800caf8:	07d8      	lsls	r0, r3, #31
 800cafa:	d503      	bpl.n	800cb04 <HAL_DSI_IRQHandler+0x68>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 800cafc:	6962      	ldr	r2, [r4, #20]
 800cafe:	f042 0204 	orr.w	r2, r2, #4
 800cb02:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 800cb04:	0799      	lsls	r1, r3, #30
 800cb06:	d503      	bpl.n	800cb10 <HAL_DSI_IRQHandler+0x74>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 800cb08:	6962      	ldr	r2, [r4, #20]
 800cb0a:	f042 0208 	orr.w	r2, r2, #8
 800cb0e:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 800cb10:	f013 0f0c 	tst.w	r3, #12
 800cb14:	d003      	beq.n	800cb1e <HAL_DSI_IRQHandler+0x82>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 800cb16:	6962      	ldr	r2, [r4, #20]
 800cb18:	f042 0210 	orr.w	r2, r2, #16
 800cb1c:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 800cb1e:	06da      	lsls	r2, r3, #27
 800cb20:	d503      	bpl.n	800cb2a <HAL_DSI_IRQHandler+0x8e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 800cb22:	6962      	ldr	r2, [r4, #20]
 800cb24:	f042 0220 	orr.w	r2, r2, #32
 800cb28:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 800cb2a:	0698      	lsls	r0, r3, #26
 800cb2c:	d503      	bpl.n	800cb36 <HAL_DSI_IRQHandler+0x9a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 800cb2e:	6962      	ldr	r2, [r4, #20]
 800cb30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cb34:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 800cb36:	0659      	lsls	r1, r3, #25
 800cb38:	d503      	bpl.n	800cb42 <HAL_DSI_IRQHandler+0xa6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 800cb3a:	6962      	ldr	r2, [r4, #20]
 800cb3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cb40:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 800cb42:	061a      	lsls	r2, r3, #24
 800cb44:	d503      	bpl.n	800cb4e <HAL_DSI_IRQHandler+0xb2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 800cb46:	6962      	ldr	r2, [r4, #20]
 800cb48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cb4c:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 800cb4e:	f413 5ff8 	tst.w	r3, #7936	; 0x1f00
 800cb52:	d003      	beq.n	800cb5c <HAL_DSI_IRQHandler+0xc0>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 800cb54:	6963      	ldr	r3, [r4, #20]
 800cb56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cb5a:	6163      	str	r3, [r4, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 800cb5c:	6963      	ldr	r3, [r4, #20]
 800cb5e:	b903      	cbnz	r3, 800cb62 <HAL_DSI_IRQHandler+0xc6>
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 800cb60:	bd10      	pop	{r4, pc}
      HAL_DSI_ErrorCallback(hdsi);
 800cb62:	4620      	mov	r0, r4
 800cb64:	f7ff ff98 	bl	800ca98 <HAL_DSI_ErrorCallback>
}
 800cb68:	bd10      	pop	{r4, pc}
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 800cb6a:	2201      	movs	r2, #1
 800cb6c:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 800cb70:	f7ff ff8e 	bl	800ca90 <HAL_DSI_TearingEffectCallback>
 800cb74:	6823      	ldr	r3, [r4, #0]
 800cb76:	e79c      	b.n	800cab2 <HAL_DSI_IRQHandler+0x16>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800cb78:	2202      	movs	r2, #2
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800cb7a:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800cb7c:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800cb80:	f7ff ff88 	bl	800ca94 <HAL_DSI_EndOfRefreshCallback>
 800cb84:	e79d      	b.n	800cac2 <HAL_DSI_IRQHandler+0x26>
 800cb86:	bf00      	nop

0800cb88 <HAL_DSI_ConfigVideoMode>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800cb88:	7c03      	ldrb	r3, [r0, #16]
 800cb8a:	2b01      	cmp	r3, #1
{
 800cb8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hdsi);
 800cb90:	f000 8113 	beq.w	800cdba <HAL_DSI_ConfigVideoMode+0x232>
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800cb94:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hdsi);
 800cb96:	2501      	movs	r5, #1
  if (VidCfg->ColorCoding == DSI_RGB666)
 800cb98:	684c      	ldr	r4, [r1, #4]
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800cb9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
  hdsi->Instance->VMCR |= VidCfg->Mode;
 800cb9c:	f8d1 e00c 	ldr.w	lr, [r1, #12]
  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 800cba0:	2c03      	cmp	r4, #3
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800cba2:	f022 0201 	bic.w	r2, r2, #1
  __HAL_LOCK(hdsi);
 800cba6:	7405      	strb	r5, [r0, #16]
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 800cba8:	f8d1 c010 	ldr.w	ip, [r1, #16]
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800cbac:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800cbae:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 800cbb2:	f8d1 8014 	ldr.w	r8, [r1, #20]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800cbb6:	f022 0201 	bic.w	r2, r2, #1
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 800cbba:	4e82      	ldr	r6, [pc, #520]	; (800cdc4 <HAL_DSI_ConfigVideoMode+0x23c>)
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 800cbbc:	4d82      	ldr	r5, [pc, #520]	; (800cdc8 <HAL_DSI_ConfigVideoMode+0x240>)
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800cbbe:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 800cbc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cbc4:	f022 0203 	bic.w	r2, r2, #3
 800cbc8:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 800cbca:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 800cbcc:	ea47 070e 	orr.w	r7, r7, lr
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 800cbd0:	f8d1 e018 	ldr.w	lr, [r1, #24]
  hdsi->Instance->VMCR |= VidCfg->Mode;
 800cbd4:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 800cbd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cbd8:	ea06 0602 	and.w	r6, r6, r2
 800cbdc:	63de      	str	r6, [r3, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 800cbde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cbe0:	ea42 020c 	orr.w	r2, r2, ip
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 800cbe4:	f8d1 c000 	ldr.w	ip, [r1]
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 800cbe8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 800cbea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cbec:	ea02 0205 	and.w	r2, r2, r5
 800cbf0:	641a      	str	r2, [r3, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 800cbf2:	6c1f      	ldr	r7, [r3, #64]	; 0x40
 800cbf4:	ea47 0708 	orr.w	r7, r7, r8
 800cbf8:	641f      	str	r7, [r3, #64]	; 0x40
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 800cbfa:	6c5e      	ldr	r6, [r3, #68]	; 0x44
 800cbfc:	ea06 0605 	and.w	r6, r6, r5
 800cc00:	645e      	str	r6, [r3, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 800cc02:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 800cc04:	ea45 050e 	orr.w	r5, r5, lr
 800cc08:	645d      	str	r5, [r3, #68]	; 0x44
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 800cc0a:	68dd      	ldr	r5, [r3, #12]
 800cc0c:	f025 0503 	bic.w	r5, r5, #3
 800cc10:	60dd      	str	r5, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 800cc12:	68da      	ldr	r2, [r3, #12]
 800cc14:	ea42 020c 	orr.w	r2, r2, ip
 800cc18:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800cc1a:	695d      	ldr	r5, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 800cc1c:	69cf      	ldr	r7, [r1, #28]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800cc1e:	f025 0507 	bic.w	r5, r5, #7
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 800cc22:	e9d1 6208 	ldrd	r6, r2, [r1, #32]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800cc26:	615d      	str	r5, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 800cc28:	ea42 0206 	orr.w	r2, r2, r6
 800cc2c:	695d      	ldr	r5, [r3, #20]
 800cc2e:	ea42 0207 	orr.w	r2, r2, r7
 800cc32:	ea42 0205 	orr.w	r2, r2, r5
 800cc36:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800cc38:	691a      	ldr	r2, [r3, #16]
 800cc3a:	f022 020f 	bic.w	r2, r2, #15
 800cc3e:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 800cc40:	691a      	ldr	r2, [r3, #16]
 800cc42:	ea42 0204 	orr.w	r2, r2, r4
 800cc46:	611a      	str	r2, [r3, #16]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800cc48:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800cc4c:	f022 020e 	bic.w	r2, r2, #14
 800cc50:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 800cc54:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800cc58:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 800cc5c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  if (VidCfg->ColorCoding == DSI_RGB666)
 800cc60:	d107      	bne.n	800cc72 <HAL_DSI_ConfigVideoMode+0xea>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 800cc62:	691c      	ldr	r4, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 800cc64:	688d      	ldr	r5, [r1, #8]
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 800cc66:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 800cc6a:	611c      	str	r4, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 800cc6c:	691a      	ldr	r2, [r3, #16]
 800cc6e:	432a      	orrs	r2, r5
 800cc70:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 800cc72:	6c9f      	ldr	r7, [r3, #72]	; 0x48
  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800cc74:	2500      	movs	r5, #0
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 800cc76:	4a55      	ldr	r2, [pc, #340]	; (800cdcc <HAL_DSI_ConfigVideoMode+0x244>)
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 800cc78:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 800cc7a:	4017      	ands	r7, r2
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800cc7c:	f8d1 c02c 	ldr.w	ip, [r1, #44]	; 0x2c
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 800cc80:	f8d1 e030 	ldr.w	lr, [r1, #48]	; 0x30
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 800cc84:	649f      	str	r7, [r3, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 800cc86:	6c9c      	ldr	r4, [r3, #72]	; 0x48
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 800cc88:	4f51      	ldr	r7, [pc, #324]	; (800cdd0 <HAL_DSI_ConfigVideoMode+0x248>)
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 800cc8a:	4334      	orrs	r4, r6
 800cc8c:	649c      	str	r4, [r3, #72]	; 0x48
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 800cc8e:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 800cc90:	4016      	ands	r6, r2
 800cc92:	64de      	str	r6, [r3, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800cc94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 800cc96:	4e4f      	ldr	r6, [pc, #316]	; (800cdd4 <HAL_DSI_ConfigVideoMode+0x24c>)
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800cc98:	ea42 020c 	orr.w	r2, r2, ip
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 800cc9c:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800cca0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 800cca2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cca4:	4017      	ands	r7, r2
 800cca6:	651f      	str	r7, [r3, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 800cca8:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 800ccaa:	ea44 040e 	orr.w	r4, r4, lr
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 800ccae:	f8d1 e038 	ldr.w	lr, [r1, #56]	; 0x38
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 800ccb2:	651c      	str	r4, [r3, #80]	; 0x50
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 800ccb4:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 800ccb6:	4034      	ands	r4, r6
 800ccb8:	655c      	str	r4, [r3, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 800ccba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ccbc:	ea42 020c 	orr.w	r2, r2, ip
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 800ccc0:	f8d1 c03c 	ldr.w	ip, [r1, #60]	; 0x3c
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 800ccc4:	655a      	str	r2, [r3, #84]	; 0x54
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 800ccc6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ccc8:	4032      	ands	r2, r6
 800ccca:	659a      	str	r2, [r3, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 800cccc:	6d9f      	ldr	r7, [r3, #88]	; 0x58
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 800ccce:	4a3d      	ldr	r2, [pc, #244]	; (800cdc4 <HAL_DSI_ConfigVideoMode+0x23c>)
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 800ccd0:	ea47 070e 	orr.w	r7, r7, lr
 800ccd4:	659f      	str	r7, [r3, #88]	; 0x58
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 800ccd6:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
 800ccd8:	4037      	ands	r7, r6

  return HAL_OK;
 800ccda:	462e      	mov	r6, r5
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 800ccdc:	65df      	str	r7, [r3, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 800ccde:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 800cce0:	ea44 040c 	orr.w	r4, r4, ip
 800cce4:	65dc      	str	r4, [r3, #92]	; 0x5c
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 800cce6:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800cce8:	4022      	ands	r2, r4
 800ccea:	661a      	str	r2, [r3, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 800ccec:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800ccee:	6c0a      	ldr	r2, [r1, #64]	; 0x40
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 800ccf0:	f8d1 e044 	ldr.w	lr, [r1, #68]	; 0x44
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 800ccf4:	4314      	orrs	r4, r2
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 800ccf6:	f8d1 c048 	ldr.w	ip, [r1, #72]	; 0x48
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 800ccfa:	661c      	str	r4, [r3, #96]	; 0x60
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 800ccfc:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 800ccfe:	f427 4700 	bic.w	r7, r7, #32768	; 0x8000
 800cd02:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 800cd04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd06:	ea42 020e 	orr.w	r2, r2, lr
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 800cd0a:	f8d1 e04c 	ldr.w	lr, [r1, #76]	; 0x4c
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 800cd0e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 800cd10:	699f      	ldr	r7, [r3, #24]
 800cd12:	f427 077f 	bic.w	r7, r7, #16711680	; 0xff0000
 800cd16:	619f      	str	r7, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 800cd18:	699c      	ldr	r4, [r3, #24]
 800cd1a:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 800cd1e:	f8d1 c050 	ldr.w	ip, [r1, #80]	; 0x50
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 800cd22:	619c      	str	r4, [r3, #24]
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 800cd24:	699c      	ldr	r4, [r3, #24]
 800cd26:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
 800cd2a:	619c      	str	r4, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 800cd2c:	699a      	ldr	r2, [r3, #24]
 800cd2e:	ea42 020e 	orr.w	r2, r2, lr
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 800cd32:	f8d1 e054 	ldr.w	lr, [r1, #84]	; 0x54
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 800cd36:	619a      	str	r2, [r3, #24]
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 800cd38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cd3e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 800cd40:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 800cd42:	ea47 070c 	orr.w	r7, r7, ip
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 800cd46:	f8d1 c058 	ldr.w	ip, [r1, #88]	; 0x58
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 800cd4a:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 800cd4c:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 800cd4e:	f427 5780 	bic.w	r7, r7, #4096	; 0x1000
 800cd52:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 800cd54:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800cd56:	ea44 040e 	orr.w	r4, r4, lr
 800cd5a:	639c      	str	r4, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 800cd5c:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800cd5e:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 800cd62:	639c      	str	r4, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 800cd64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd66:	ea42 020c 	orr.w	r2, r2, ip
 800cd6a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 800cd6c:	6b9f      	ldr	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 800cd6e:	6dcc      	ldr	r4, [r1, #92]	; 0x5c
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 800cd70:	f427 6780 	bic.w	r7, r7, #1024	; 0x400
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 800cd74:	f8d1 e060 	ldr.w	lr, [r1, #96]	; 0x60
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 800cd78:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 800cd7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd7c:	4322      	orrs	r2, r4
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 800cd7e:	e9d1 c719 	ldrd	ip, r7, [r1, #100]	; 0x64
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 800cd82:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 800cd84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd86:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800cd8a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 800cd8c:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800cd8e:	ea44 040e 	orr.w	r4, r4, lr
 800cd92:	639c      	str	r4, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 800cd94:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800cd96:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 800cd9a:	639c      	str	r4, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 800cd9c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800cd9e:	ea41 010c 	orr.w	r1, r1, ip
 800cda2:	6399      	str	r1, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 800cda4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800cda6:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800cdaa:	6399      	str	r1, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 800cdac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cdae:	433a      	orrs	r2, r7
 800cdb0:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_UNLOCK(hdsi);
 800cdb2:	7405      	strb	r5, [r0, #16]
}
 800cdb4:	4630      	mov	r0, r6
 800cdb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hdsi);
 800cdba:	2602      	movs	r6, #2
}
 800cdbc:	4630      	mov	r0, r6
 800cdbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdc2:	bf00      	nop
 800cdc4:	ffffc000 	.word	0xffffc000
 800cdc8:	ffffe000 	.word	0xffffe000
 800cdcc:	fffff000 	.word	0xfffff000
 800cdd0:	ffff8000 	.word	0xffff8000
 800cdd4:	fffffc00 	.word	0xfffffc00

0800cdd8 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800cdd8:	7c03      	ldrb	r3, [r0, #16]
 800cdda:	2b01      	cmp	r3, #1
 800cddc:	d00e      	beq.n	800cdfc <HAL_DSI_ConfigFlowControl+0x24>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800cdde:	6803      	ldr	r3, [r0, #0]
 800cde0:	4602      	mov	r2, r0
{
 800cde2:	b430      	push	{r4, r5}
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800cde4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800cde6:	2500      	movs	r5, #0
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800cde8:	f024 041f 	bic.w	r4, r4, #31

  return HAL_OK;
 800cdec:	4628      	mov	r0, r5
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800cdee:	62dc      	str	r4, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 800cdf0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800cdf2:	4321      	orrs	r1, r4
 800cdf4:	62d9      	str	r1, [r3, #44]	; 0x2c
  __HAL_UNLOCK(hdsi);
 800cdf6:	7415      	strb	r5, [r2, #16]
}
 800cdf8:	bc30      	pop	{r4, r5}
 800cdfa:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800cdfc:	2002      	movs	r0, #2
}
 800cdfe:	4770      	bx	lr

0800ce00 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800ce00:	7c03      	ldrb	r3, [r0, #16]
 800ce02:	2b01      	cmp	r3, #1
 800ce04:	d021      	beq.n	800ce4a <HAL_DSI_Start+0x4a>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 800ce06:	6803      	ldr	r3, [r0, #0]
 800ce08:	2200      	movs	r2, #0
 800ce0a:	4601      	mov	r1, r0
  __HAL_DSI_WRAPPER_ENABLE(hdsi);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
 800ce0c:	4610      	mov	r0, r2
{
 800ce0e:	b410      	push	{r4}
 800ce10:	b083      	sub	sp, #12
  __HAL_DSI_ENABLE(hdsi);
 800ce12:	9200      	str	r2, [sp, #0]
 800ce14:	685c      	ldr	r4, [r3, #4]
 800ce16:	f044 0401 	orr.w	r4, r4, #1
 800ce1a:	605c      	str	r4, [r3, #4]
 800ce1c:	685c      	ldr	r4, [r3, #4]
 800ce1e:	f004 0401 	and.w	r4, r4, #1
 800ce22:	9400      	str	r4, [sp, #0]
 800ce24:	9c00      	ldr	r4, [sp, #0]
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800ce26:	9201      	str	r2, [sp, #4]
 800ce28:	f8d3 4404 	ldr.w	r4, [r3, #1028]	; 0x404
 800ce2c:	f044 0408 	orr.w	r4, r4, #8
 800ce30:	f8c3 4404 	str.w	r4, [r3, #1028]	; 0x404
 800ce34:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
  __HAL_UNLOCK(hdsi);
 800ce38:	740a      	strb	r2, [r1, #16]
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800ce3a:	f003 0308 	and.w	r3, r3, #8
 800ce3e:	9301      	str	r3, [sp, #4]
 800ce40:	9b01      	ldr	r3, [sp, #4]
}
 800ce42:	b003      	add	sp, #12
 800ce44:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce48:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800ce4a:	2002      	movs	r0, #2
}
 800ce4c:	4770      	bx	lr
 800ce4e:	bf00      	nop

0800ce50 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 800ce50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 800ce54:	7c04      	ldrb	r4, [r0, #16]
 800ce56:	2c01      	cmp	r4, #1
 800ce58:	d022      	beq.n	800cea0 <HAL_DSI_ShortWrite+0x50>
 800ce5a:	4699      	mov	r9, r3
 800ce5c:	2301      	movs	r3, #1
 800ce5e:	4617      	mov	r7, r2
 800ce60:	4688      	mov	r8, r1
 800ce62:	7403      	strb	r3, [r0, #16]
 800ce64:	4605      	mov	r5, r0
  tickstart = HAL_GetTick();
 800ce66:	f7fd fbcb 	bl	800a600 <HAL_GetTick>
 800ce6a:	4606      	mov	r6, r0
 800ce6c:	e005      	b.n	800ce7a <HAL_DSI_ShortWrite+0x2a>
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 800ce6e:	f7fd fbc7 	bl	800a600 <HAL_GetTick>
 800ce72:	1b80      	subs	r0, r0, r6
 800ce74:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800ce78:	d810      	bhi.n	800ce9c <HAL_DSI_ShortWrite+0x4c>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800ce7a:	682c      	ldr	r4, [r5, #0]
 800ce7c:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800ce7e:	07c3      	lsls	r3, r0, #31
 800ce80:	d5f5      	bpl.n	800ce6e <HAL_DSI_ShortWrite+0x1e>
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800ce82:	ea47 2709 	orr.w	r7, r7, r9, lsl #8
 800ce86:	9b08      	ldr	r3, [sp, #32]
  return HAL_OK;
 800ce88:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800ce8a:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
 800ce8e:	ea47 1788 	orr.w	r7, r7, r8, lsl #6
 800ce92:	66e7      	str	r7, [r4, #108]	; 0x6c

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800ce94:	2300      	movs	r3, #0
 800ce96:	742b      	strb	r3, [r5, #16]

  return status;
}
 800ce98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 800ce9c:	2003      	movs	r0, #3
 800ce9e:	e7f9      	b.n	800ce94 <HAL_DSI_ShortWrite+0x44>
  __HAL_LOCK(hdsi);
 800cea0:	2002      	movs	r0, #2
}
 800cea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cea6:	bf00      	nop

0800cea8 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 800cea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800ceac:	7c04      	ldrb	r4, [r0, #16]
 800ceae:	2c01      	cmp	r4, #1
 800ceb0:	d05f      	beq.n	800cf72 <HAL_DSI_LongWrite+0xca>
 800ceb2:	461e      	mov	r6, r3
 800ceb4:	2301      	movs	r3, #1
 800ceb6:	4690      	mov	r8, r2
 800ceb8:	460f      	mov	r7, r1
 800ceba:	7403      	strb	r3, [r0, #16]
 800cebc:	4605      	mov	r5, r0

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 800cebe:	f7fd fb9f 	bl	800a600 <HAL_GetTick>
 800cec2:	4681      	mov	r9, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800cec4:	e006      	b.n	800ced4 <HAL_DSI_LongWrite+0x2c>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800cec6:	f7fd fb9b 	bl	800a600 <HAL_GetTick>
 800ceca:	eba0 0009 	sub.w	r0, r0, r9
 800cece:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800ced2:	d84a      	bhi.n	800cf6a <HAL_DSI_LongWrite+0xc2>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800ced4:	682a      	ldr	r2, [r5, #0]
 800ced6:	6f54      	ldr	r4, [r2, #116]	; 0x74
 800ced8:	f014 0401 	ands.w	r4, r4, #1
 800cedc:	d0f3      	beq.n	800cec6 <HAL_DSI_LongWrite+0x1e>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800cede:	2e03      	cmp	r6, #3
 800cee0:	4634      	mov	r4, r6
 800cee2:	bf28      	it	cs
 800cee4:	2403      	movcs	r4, #3

  for (count = 0U; count < nbBytes; count++)
 800cee6:	2e00      	cmp	r6, #0
 800cee8:	d046      	beq.n	800cf78 <HAL_DSI_LongWrite+0xd0>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800ceea:	9b09      	ldr	r3, [sp, #36]	; 0x24
  for (count = 0U; count < nbBytes; count++)
 800ceec:	2e01      	cmp	r6, #1
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800ceee:	9908      	ldr	r1, [sp, #32]
 800cef0:	781b      	ldrb	r3, [r3, #0]
 800cef2:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  for (count = 0U; count < nbBytes; count++)
 800cef6:	d909      	bls.n	800cf0c <HAL_DSI_LongWrite+0x64>
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800cef8:	9909      	ldr	r1, [sp, #36]	; 0x24
  for (count = 0U; count < nbBytes; count++)
 800cefa:	2e02      	cmp	r6, #2
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800cefc:	7849      	ldrb	r1, [r1, #1]
 800cefe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  for (count = 0U; count < nbBytes; count++)
 800cf02:	d903      	bls.n	800cf0c <HAL_DSI_LongWrite+0x64>
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800cf04:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cf06:	7889      	ldrb	r1, [r1, #2]
 800cf08:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
  }
  hdsi->Instance->GPDR = fifoword;
 800cf0c:	6713      	str	r3, [r2, #112]	; 0x70

  uicounter = NbParams - nbBytes;
  pparams += nbBytes;
 800cf0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf10:	4423      	add	r3, r4
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 800cf12:	1b34      	subs	r4, r6, r4
 800cf14:	d016      	beq.n	800cf44 <HAL_DSI_LongWrite+0x9c>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800cf16:	2c04      	cmp	r4, #4
 800cf18:	4621      	mov	r1, r4
    fifoword = 0U;
    for (count = 0U; count < nbBytes; count++)
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800cf1a:	7818      	ldrb	r0, [r3, #0]
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800cf1c:	bf28      	it	cs
 800cf1e:	2104      	movcs	r1, #4
    for (count = 0U; count < nbBytes; count++)
 800cf20:	2c01      	cmp	r4, #1
 800cf22:	d007      	beq.n	800cf34 <HAL_DSI_LongWrite+0x8c>
 800cf24:	2c02      	cmp	r4, #2
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800cf26:	8818      	ldrh	r0, [r3, #0]
    for (count = 0U; count < nbBytes; count++)
 800cf28:	d00b      	beq.n	800cf42 <HAL_DSI_LongWrite+0x9a>
 800cf2a:	2c03      	cmp	r4, #3
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800cf2c:	f893 c002 	ldrb.w	ip, [r3, #2]
    for (count = 0U; count < nbBytes; count++)
 800cf30:	d005      	beq.n	800cf3e <HAL_DSI_LongWrite+0x96>
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800cf32:	6818      	ldr	r0, [r3, #0]
  while (uicounter != 0U)
 800cf34:	1a64      	subs	r4, r4, r1
    }
    hdsi->Instance->GPDR = fifoword;

    uicounter -= nbBytes;
    pparams += nbBytes;
 800cf36:	440b      	add	r3, r1
    hdsi->Instance->GPDR = fifoword;
 800cf38:	6710      	str	r0, [r2, #112]	; 0x70
  while (uicounter != 0U)
 800cf3a:	d1ec      	bne.n	800cf16 <HAL_DSI_LongWrite+0x6e>
 800cf3c:	e002      	b.n	800cf44 <HAL_DSI_LongWrite+0x9c>
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800cf3e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    hdsi->Instance->GPDR = fifoword;
 800cf42:	6710      	str	r0, [r2, #112]	; 0x70

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 800cf44:	3601      	adds	r6, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800cf46:	ea48 1787 	orr.w	r7, r8, r7, lsl #6
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800cf4a:	2300      	movs	r3, #0
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800cf4c:	ea4f 2806 	mov.w	r8, r6, lsl #8

  return HAL_OK;
 800cf50:	4618      	mov	r0, r3
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800cf52:	4646      	mov	r6, r8
 800cf54:	fa1f f888 	uxth.w	r8, r8
 800cf58:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
 800cf5c:	ea47 0708 	orr.w	r7, r7, r8
 800cf60:	433e      	orrs	r6, r7
 800cf62:	66d6      	str	r6, [r2, #108]	; 0x6c
  __HAL_UNLOCK(hdsi);
 800cf64:	742b      	strb	r3, [r5, #16]
}
 800cf66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      __HAL_UNLOCK(hdsi);
 800cf6a:	742c      	strb	r4, [r5, #16]
      return HAL_TIMEOUT;
 800cf6c:	2003      	movs	r0, #3
}
 800cf6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hdsi);
 800cf72:	2002      	movs	r0, #2
}
 800cf74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  hdsi->Instance->GPDR = fifoword;
 800cf78:	9b08      	ldr	r3, [sp, #32]
 800cf7a:	6713      	str	r3, [r2, #112]	; 0x70
 800cf7c:	e7e2      	b.n	800cf44 <HAL_DSI_LongWrite+0x9c>
 800cf7e:	bf00      	nop

0800cf80 <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 800cf80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf84:	461c      	mov	r4, r3
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800cf86:	7c03      	ldrb	r3, [r0, #16]
{
 800cf88:	f8dd 8020 	ldr.w	r8, [sp, #32]
  __HAL_LOCK(hdsi);
 800cf8c:	2b01      	cmp	r3, #1
 800cf8e:	f000 808b 	beq.w	800d0a8 <HAL_DSI_Read+0x128>
 800cf92:	2301      	movs	r3, #1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 800cf94:	2c02      	cmp	r4, #2
 800cf96:	4605      	mov	r5, r0
 800cf98:	460f      	mov	r7, r1
 800cf9a:	4616      	mov	r6, r2
  __HAL_LOCK(hdsi);
 800cf9c:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 800cf9e:	d856      	bhi.n	800d04e <HAL_DSI_Read+0xce>
      return HAL_ERROR;
    }
  }

  /* Configure the packet to read command */
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 800cfa0:	f1b8 0f06 	cmp.w	r8, #6
 800cfa4:	d017      	beq.n	800cfd6 <HAL_DSI_Read+0x56>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 800cfa6:	f1b8 0f04 	cmp.w	r8, #4
 800cfaa:	f000 8083 	beq.w	800d0b4 <HAL_DSI_Read+0x134>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 800cfae:	f1b8 0f14 	cmp.w	r8, #20
 800cfb2:	d06f      	beq.n	800d094 <HAL_DSI_Read+0x114>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 800cfb4:	f1b8 0f24 	cmp.w	r8, #36	; 0x24
 800cfb8:	d164      	bne.n	800d084 <HAL_DSI_Read+0x104>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800cfba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800cfbc:	01bb      	lsls	r3, r7, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800cfbe:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cfc0:	7812      	ldrb	r2, [r2, #0]
 800cfc2:	7849      	ldrb	r1, [r1, #1]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800cfc4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800cfc8:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800cfca:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 800cfce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800cfd2:	66d3      	str	r3, [r2, #108]	; 0x6c
 800cfd4:	e007      	b.n	800cfe6 <HAL_DSI_Read+0x66>
 800cfd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 800cfd8:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800cfda:	021b      	lsls	r3, r3, #8
 800cfdc:	f043 0306 	orr.w	r3, r3, #6
 800cfe0:	ea43 1787 	orr.w	r7, r3, r7, lsl #6
 800cfe4:	66d7      	str	r7, [r2, #108]	; 0x6c

    return HAL_ERROR;
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800cfe6:	f7fd fb0b 	bl	800a600 <HAL_GetTick>
 800cfea:	4607      	mov	r7, r0

  /* If DSI fifo is not empty, read requested bytes */
  while (((int32_t)(datasize)) > 0)
 800cfec:	e005      	b.n	800cffa <HAL_DSI_Read+0x7a>
        datasize--;
      }
    }

    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800cfee:	f7fd fb07 	bl	800a600 <HAL_GetTick>
 800cff2:	1bc0      	subs	r0, r0, r7
 800cff4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800cff8:	d820      	bhi.n	800d03c <HAL_DSI_Read+0xbc>
  while (((int32_t)(datasize)) > 0)
 800cffa:	2c00      	cmp	r4, #0
 800cffc:	dd23      	ble.n	800d046 <HAL_DSI_Read+0xc6>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 800cffe:	682a      	ldr	r2, [r5, #0]
 800d000:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800d002:	f013 0310 	ands.w	r3, r3, #16
 800d006:	d1f2      	bne.n	800cfee <HAL_DSI_Read+0x6e>
      fifoword = hdsi->Instance->GPDR;
 800d008:	6f12      	ldr	r2, [r2, #112]	; 0x70
      for (count = 0U; count < nbbytes; count++)
 800d00a:	2c01      	cmp	r4, #1
        *pdata = (uint8_t)(fifoword >> (8U * count));
 800d00c:	ea4f 2112 	mov.w	r1, r2, lsr #8
 800d010:	7032      	strb	r2, [r6, #0]
 800d012:	ea4f 4012 	mov.w	r0, r2, lsr #16
 800d016:	ea4f 6212 	mov.w	r2, r2, lsr #24
      for (count = 0U; count < nbbytes; count++)
 800d01a:	d038      	beq.n	800d08e <HAL_DSI_Read+0x10e>
 800d01c:	2c02      	cmp	r4, #2
        *pdata = (uint8_t)(fifoword >> (8U * count));
 800d01e:	7071      	strb	r1, [r6, #1]
      for (count = 0U; count < nbbytes; count++)
 800d020:	d045      	beq.n	800d0ae <HAL_DSI_Read+0x12e>
 800d022:	2c03      	cmp	r4, #3
        *pdata = (uint8_t)(fifoword >> (8U * count));
 800d024:	70b0      	strb	r0, [r6, #2]
        datasize--;
 800d026:	f1a4 0404 	sub.w	r4, r4, #4
      for (count = 0U; count < nbbytes; count++)
 800d02a:	d049      	beq.n	800d0c0 <HAL_DSI_Read+0x140>
        *pdata = (uint8_t)(fifoword >> (8U * count));
 800d02c:	70f2      	strb	r2, [r6, #3]
        pdata++;
 800d02e:	3604      	adds	r6, #4
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800d030:	f7fd fae6 	bl	800a600 <HAL_GetTick>
 800d034:	1bc0      	subs	r0, r0, r7
 800d036:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800d03a:	d9de      	bls.n	800cffa <HAL_DSI_Read+0x7a>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 800d03c:	2300      	movs	r3, #0

      return HAL_TIMEOUT;
 800d03e:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 800d040:	742b      	strb	r3, [r5, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 800d042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_UNLOCK(hdsi);
 800d046:	2000      	movs	r0, #0
 800d048:	7428      	strb	r0, [r5, #16]
}
 800d04a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  tickstart = HAL_GetTick();
 800d04e:	f7fd fad7 	bl	800a600 <HAL_GetTick>
 800d052:	4681      	mov	r9, r0
 800d054:	e006      	b.n	800d064 <HAL_DSI_Read+0xe4>
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 800d056:	f7fd fad3 	bl	800a600 <HAL_GetTick>
 800d05a:	eba0 0009 	sub.w	r0, r0, r9
 800d05e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800d062:	d80f      	bhi.n	800d084 <HAL_DSI_Read+0x104>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800d064:	682b      	ldr	r3, [r5, #0]
 800d066:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800d068:	07d2      	lsls	r2, r2, #31
 800d06a:	d5f4      	bpl.n	800d056 <HAL_DSI_Read+0xd6>
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800d06c:	0222      	lsls	r2, r4, #8
 800d06e:	01b9      	lsls	r1, r7, #6
 800d070:	4610      	mov	r0, r2
 800d072:	b292      	uxth	r2, r2
 800d074:	f041 0137 	orr.w	r1, r1, #55	; 0x37
 800d078:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
 800d07c:	430a      	orrs	r2, r1
 800d07e:	4302      	orrs	r2, r0
 800d080:	66da      	str	r2, [r3, #108]	; 0x6c
 800d082:	e78d      	b.n	800cfa0 <HAL_DSI_Read+0x20>
      __HAL_UNLOCK(hdsi);
 800d084:	2300      	movs	r3, #0
      return HAL_ERROR;
 800d086:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 800d088:	742b      	strb	r3, [r5, #16]
}
 800d08a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        pdata++;
 800d08e:	3601      	adds	r6, #1
        datasize--;
 800d090:	461c      	mov	r4, r3
 800d092:	e7ac      	b.n	800cfee <HAL_DSI_Read+0x6e>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 800d094:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800d096:	01bb      	lsls	r3, r7, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 800d098:	7817      	ldrb	r7, [r2, #0]
 800d09a:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800d09c:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 800d0a0:	f043 0314 	orr.w	r3, r3, #20
 800d0a4:	66d3      	str	r3, [r2, #108]	; 0x6c
 800d0a6:	e79e      	b.n	800cfe6 <HAL_DSI_Read+0x66>
  __HAL_LOCK(hdsi);
 800d0a8:	2002      	movs	r0, #2
}
 800d0aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        pdata++;
 800d0ae:	3602      	adds	r6, #2
        datasize--;
 800d0b0:	461c      	mov	r4, r3
 800d0b2:	e79c      	b.n	800cfee <HAL_DSI_Read+0x6e>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800d0b4:	01bf      	lsls	r7, r7, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 800d0b6:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800d0b8:	f047 0704 	orr.w	r7, r7, #4
 800d0bc:	66df      	str	r7, [r3, #108]	; 0x6c
 800d0be:	e792      	b.n	800cfe6 <HAL_DSI_Read+0x66>
        pdata++;
 800d0c0:	3603      	adds	r6, #3
        datasize--;
 800d0c2:	461c      	mov	r4, r3
 800d0c4:	e793      	b.n	800cfee <HAL_DSI_Read+0x6e>
 800d0c6:	bf00      	nop

0800d0c8 <HAL_EXTI_RegisterCallback>:
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check null pointer */
  if (hexti == NULL)
 800d0c8:	b118      	cbz	r0, 800d0d2 <HAL_EXTI_RegisterCallback+0xa>
  {
    return HAL_ERROR;
  }

  switch (CallbackID)
 800d0ca:	b911      	cbnz	r1, 800d0d2 <HAL_EXTI_RegisterCallback+0xa>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800d0cc:	6042      	str	r2, [r0, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d0ce:	4608      	mov	r0, r1
      break;
 800d0d0:	4770      	bx	lr

    default:
      status = HAL_ERROR;
 800d0d2:	2001      	movs	r0, #1
      break;
  }

  return status;
}
 800d0d4:	4770      	bx	lr
 800d0d6:	bf00      	nop

0800d0d8 <HAL_EXTI_GetHandle>:
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800d0d8:	b110      	cbz	r0, 800d0e0 <HAL_EXTI_GetHandle+0x8>
    return HAL_ERROR;
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800d0da:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 800d0dc:	2000      	movs	r0, #0
 800d0de:	4770      	bx	lr
    return HAL_ERROR;
 800d0e0:	2001      	movs	r0, #1
  }
}
 800d0e2:	4770      	bx	lr

0800d0e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d0e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0e8:	468e      	mov	lr, r1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800d0ea:	6809      	ldr	r1, [r1, #0]
{
 800d0ec:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800d0ee:	2900      	cmp	r1, #0
 800d0f0:	f000 80cd 	beq.w	800d28e <HAL_GPIO_Init+0x1aa>
  uint32_t position = 0x00U;
 800d0f4:	2600      	movs	r6, #0
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800d0f6:	f8df 8214 	ldr.w	r8, [pc, #532]	; 800d30c <HAL_GPIO_Init+0x228>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800d0fa:	2301      	movs	r3, #1
 800d0fc:	40b3      	lsls	r3, r6
    if (iocurrent != 0x00U)
 800d0fe:	ea13 0501 	ands.w	r5, r3, r1
 800d102:	f000 80bf 	beq.w	800d284 <HAL_GPIO_Init+0x1a0>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800d106:	f8de 2004 	ldr.w	r2, [lr, #4]
 800d10a:	0077      	lsls	r7, r6, #1
 800d10c:	f04f 0c03 	mov.w	ip, #3
 800d110:	f022 0910 	bic.w	r9, r2, #16
 800d114:	fa0c fc07 	lsl.w	ip, ip, r7
 800d118:	f109 34ff 	add.w	r4, r9, #4294967295
 800d11c:	ea6f 0c0c 	mvn.w	ip, ip
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d120:	2c01      	cmp	r4, #1
 800d122:	d812      	bhi.n	800d14a <HAL_GPIO_Init+0x66>
        temp = GPIOx->OSPEEDR;
 800d124:	6884      	ldr	r4, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800d126:	f3c2 1a00 	ubfx	sl, r2, #4, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800d12a:	ea04 0b0c 	and.w	fp, r4, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d12e:	f8de 400c 	ldr.w	r4, [lr, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800d132:	fa0a fa06 	lsl.w	sl, sl, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d136:	40bc      	lsls	r4, r7
 800d138:	ea44 040b 	orr.w	r4, r4, fp
        GPIOx->OSPEEDR = temp;
 800d13c:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800d13e:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800d140:	ea24 0303 	bic.w	r3, r4, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800d144:	ea4a 0303 	orr.w	r3, sl, r3
        GPIOx->OTYPER = temp;
 800d148:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 800d14a:	68c3      	ldr	r3, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d14c:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d150:	f8de 4008 	ldr.w	r4, [lr, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800d154:	ea03 030c 	and.w	r3, r3, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d158:	fa04 f407 	lsl.w	r4, r4, r7
 800d15c:	ea44 0403 	orr.w	r4, r4, r3
      GPIOx->PUPDR = temp;
 800d160:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800d162:	d115      	bne.n	800d190 <HAL_GPIO_Init+0xac>
        temp = GPIOx->AFR[position >> 3U];
 800d164:	08f3      	lsrs	r3, r6, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800d166:	f006 0907 	and.w	r9, r6, #7
 800d16a:	f04f 0b0f 	mov.w	fp, #15
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800d16e:	f8de 4010 	ldr.w	r4, [lr, #16]
 800d172:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800d176:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 800d17a:	f8d3 a020 	ldr.w	sl, [r3, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800d17e:	fa0b fb09 	lsl.w	fp, fp, r9
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800d182:	fa04 f409 	lsl.w	r4, r4, r9
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800d186:	ea2a 0a0b 	bic.w	sl, sl, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800d18a:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->AFR[position >> 3U] = temp;
 800d18e:	621c      	str	r4, [r3, #32]
      temp = GPIOx->MODER;
 800d190:	6804      	ldr	r4, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d192:	f002 0303 	and.w	r3, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800d196:	ea04 0c0c 	and.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d19a:	40bb      	lsls	r3, r7
 800d19c:	ea43 030c 	orr.w	r3, r3, ip
      GPIOx->MODER = temp;
 800d1a0:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800d1a2:	00d3      	lsls	r3, r2, #3
 800d1a4:	d56e      	bpl.n	800d284 <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d1a6:	4b53      	ldr	r3, [pc, #332]	; (800d2f4 <HAL_GPIO_Init+0x210>)
 800d1a8:	f026 0903 	bic.w	r9, r6, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800d1ac:	240f      	movs	r4, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d1ae:	f8d3 70f4 	ldr.w	r7, [r3, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800d1b2:	f006 0303 	and.w	r3, r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d1b6:	f047 0c02 	orr.w	ip, r7, #2
 800d1ba:	4f4f      	ldr	r7, [pc, #316]	; (800d2f8 <HAL_GPIO_Init+0x214>)
 800d1bc:	444f      	add	r7, r9
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800d1be:	ea4f 0983 	mov.w	r9, r3, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d1c2:	4b4c      	ldr	r3, [pc, #304]	; (800d2f4 <HAL_GPIO_Init+0x210>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800d1c4:	fa04 f409 	lsl.w	r4, r4, r9
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d1c8:	f8c3 c0f4 	str.w	ip, [r3, #244]	; 0xf4
 800d1cc:	f8d3 c0f4 	ldr.w	ip, [r3, #244]	; 0xf4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800d1d0:	f5a3 4388 	sub.w	r3, r3, #17408	; 0x4400
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d1d4:	f00c 0c02 	and.w	ip, ip, #2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800d1d8:	4298      	cmp	r0, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d1da:	f8cd c004 	str.w	ip, [sp, #4]
 800d1de:	f8dd c004 	ldr.w	ip, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800d1e2:	f8d7 c008 	ldr.w	ip, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800d1e6:	ea2c 0404 	bic.w	r4, ip, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800d1ea:	d026      	beq.n	800d23a <HAL_GPIO_Init+0x156>
 800d1ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d1f0:	4298      	cmp	r0, r3
 800d1f2:	d055      	beq.n	800d2a0 <HAL_GPIO_Init+0x1bc>
 800d1f4:	4b41      	ldr	r3, [pc, #260]	; (800d2fc <HAL_GPIO_Init+0x218>)
 800d1f6:	4298      	cmp	r0, r3
 800d1f8:	d04c      	beq.n	800d294 <HAL_GPIO_Init+0x1b0>
 800d1fa:	4b41      	ldr	r3, [pc, #260]	; (800d300 <HAL_GPIO_Init+0x21c>)
 800d1fc:	4298      	cmp	r0, r3
 800d1fe:	d05b      	beq.n	800d2b8 <HAL_GPIO_Init+0x1d4>
 800d200:	4b40      	ldr	r3, [pc, #256]	; (800d304 <HAL_GPIO_Init+0x220>)
 800d202:	4298      	cmp	r0, r3
 800d204:	d05e      	beq.n	800d2c4 <HAL_GPIO_Init+0x1e0>
 800d206:	4b40      	ldr	r3, [pc, #256]	; (800d308 <HAL_GPIO_Init+0x224>)
 800d208:	4298      	cmp	r0, r3
 800d20a:	d04f      	beq.n	800d2ac <HAL_GPIO_Init+0x1c8>
 800d20c:	f8df c100 	ldr.w	ip, [pc, #256]	; 800d310 <HAL_GPIO_Init+0x22c>
 800d210:	4560      	cmp	r0, ip
 800d212:	d05d      	beq.n	800d2d0 <HAL_GPIO_Init+0x1ec>
 800d214:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 800d314 <HAL_GPIO_Init+0x230>
 800d218:	4560      	cmp	r0, ip
 800d21a:	d05f      	beq.n	800d2dc <HAL_GPIO_Init+0x1f8>
 800d21c:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 800d318 <HAL_GPIO_Init+0x234>
 800d220:	4560      	cmp	r0, ip
 800d222:	d061      	beq.n	800d2e8 <HAL_GPIO_Init+0x204>
 800d224:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 800d31c <HAL_GPIO_Init+0x238>
 800d228:	4560      	cmp	r0, ip
 800d22a:	bf0c      	ite	eq
 800d22c:	f04f 0c09 	moveq.w	ip, #9
 800d230:	f04f 0c0a 	movne.w	ip, #10
 800d234:	fa0c f309 	lsl.w	r3, ip, r9
 800d238:	431c      	orrs	r4, r3
        SYSCFG->EXTICR[position >> 2U] = temp;
 800d23a:	60bc      	str	r4, [r7, #8]
        temp &= ~(iocurrent);
 800d23c:	43ec      	mvns	r4, r5
        temp = EXTI_CurrentCPU->IMR1;
 800d23e:	f8d8 3000 	ldr.w	r3, [r8]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800d242:	03d7      	lsls	r7, r2, #15
        {
          temp |= iocurrent;
 800d244:	bf4c      	ite	mi
 800d246:	432b      	orrmi	r3, r5
        temp &= ~(iocurrent);
 800d248:	4023      	andpl	r3, r4
        }
        EXTI_CurrentCPU->IMR1 = temp;

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800d24a:	0397      	lsls	r7, r2, #14
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800d24c:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
        EXTI_CurrentCPU->IMR1 = temp;
 800d250:	f8c8 3000 	str.w	r3, [r8]
        temp = EXTI_CurrentCPU->EMR1;
 800d254:	f8d8 3004 	ldr.w	r3, [r8, #4]
          temp |= iocurrent;
 800d258:	bf4c      	ite	mi
 800d25a:	432b      	orrmi	r3, r5
        temp &= ~(iocurrent);
 800d25c:	4023      	andpl	r3, r4
        EXTI_CurrentCPU->EMR1 = temp;
 800d25e:	f8c8 3004 	str.w	r3, [r8, #4]
        temp = EXTI->RTSR1;
 800d262:	683b      	ldr	r3, [r7, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800d264:	02d7      	lsls	r7, r2, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 800d266:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
          temp |= iocurrent;
 800d26a:	bf4c      	ite	mi
 800d26c:	432b      	orrmi	r3, r5
        temp &= ~(iocurrent);
 800d26e:	4023      	andpl	r3, r4

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800d270:	0292      	lsls	r2, r2, #10
        EXTI->RTSR1 = temp;
 800d272:	603b      	str	r3, [r7, #0]
        temp = EXTI->FTSR1;
 800d274:	687b      	ldr	r3, [r7, #4]
        temp &= ~(iocurrent);
 800d276:	bf54      	ite	pl
 800d278:	ea04 0503 	andpl.w	r5, r4, r3
        {
          temp |= iocurrent;
 800d27c:	431d      	orrmi	r5, r3
        }
        EXTI->FTSR1 = temp;
 800d27e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d282:	605d      	str	r5, [r3, #4]
      }
    }

    position++;
 800d284:	3601      	adds	r6, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800d286:	fa31 f306 	lsrs.w	r3, r1, r6
 800d28a:	f47f af36 	bne.w	800d0fa <HAL_GPIO_Init+0x16>
  }
}
 800d28e:	b003      	add	sp, #12
 800d290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d294:	f04f 0c02 	mov.w	ip, #2
 800d298:	fa0c f309 	lsl.w	r3, ip, r9
 800d29c:	431c      	orrs	r4, r3
 800d29e:	e7cc      	b.n	800d23a <HAL_GPIO_Init+0x156>
 800d2a0:	f04f 0c01 	mov.w	ip, #1
 800d2a4:	fa0c f309 	lsl.w	r3, ip, r9
 800d2a8:	431c      	orrs	r4, r3
 800d2aa:	e7c6      	b.n	800d23a <HAL_GPIO_Init+0x156>
 800d2ac:	f04f 0c05 	mov.w	ip, #5
 800d2b0:	fa0c f309 	lsl.w	r3, ip, r9
 800d2b4:	431c      	orrs	r4, r3
 800d2b6:	e7c0      	b.n	800d23a <HAL_GPIO_Init+0x156>
 800d2b8:	f04f 0c03 	mov.w	ip, #3
 800d2bc:	fa0c f309 	lsl.w	r3, ip, r9
 800d2c0:	431c      	orrs	r4, r3
 800d2c2:	e7ba      	b.n	800d23a <HAL_GPIO_Init+0x156>
 800d2c4:	f04f 0c04 	mov.w	ip, #4
 800d2c8:	fa0c f309 	lsl.w	r3, ip, r9
 800d2cc:	431c      	orrs	r4, r3
 800d2ce:	e7b4      	b.n	800d23a <HAL_GPIO_Init+0x156>
 800d2d0:	f04f 0c06 	mov.w	ip, #6
 800d2d4:	fa0c f309 	lsl.w	r3, ip, r9
 800d2d8:	431c      	orrs	r4, r3
 800d2da:	e7ae      	b.n	800d23a <HAL_GPIO_Init+0x156>
 800d2dc:	f04f 0c07 	mov.w	ip, #7
 800d2e0:	fa0c f309 	lsl.w	r3, ip, r9
 800d2e4:	431c      	orrs	r4, r3
 800d2e6:	e7a8      	b.n	800d23a <HAL_GPIO_Init+0x156>
 800d2e8:	f04f 0c08 	mov.w	ip, #8
 800d2ec:	fa0c f309 	lsl.w	r3, ip, r9
 800d2f0:	431c      	orrs	r4, r3
 800d2f2:	e7a2      	b.n	800d23a <HAL_GPIO_Init+0x156>
 800d2f4:	58024400 	.word	0x58024400
 800d2f8:	58000400 	.word	0x58000400
 800d2fc:	58020800 	.word	0x58020800
 800d300:	58020c00 	.word	0x58020c00
 800d304:	58021000 	.word	0x58021000
 800d308:	58021400 	.word	0x58021400
 800d30c:	58000080 	.word	0x58000080
 800d310:	58021800 	.word	0x58021800
 800d314:	58021c00 	.word	0x58021c00
 800d318:	58022000 	.word	0x58022000
 800d31c:	58022400 	.word	0x58022400

0800d320 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800d320:	2900      	cmp	r1, #0
 800d322:	f000 80a6 	beq.w	800d472 <HAL_GPIO_DeInit+0x152>
  uint32_t position = 0x00U;
 800d326:	2300      	movs	r3, #0
{
 800d328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d32c:	f8df a180 	ldr.w	sl, [pc, #384]	; 800d4b0 <HAL_GPIO_DeInit+0x190>
 800d330:	b083      	sub	sp, #12
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800d332:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800d4b4 <HAL_GPIO_DeInit+0x194>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800d336:	f8df 8180 	ldr.w	r8, [pc, #384]	; 800d4b8 <HAL_GPIO_DeInit+0x198>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800d33a:	f8df b180 	ldr.w	fp, [pc, #384]	; 800d4bc <HAL_GPIO_DeInit+0x19c>
    iocurrent = GPIO_Pin & (1UL << position) ;
 800d33e:	f04f 0e01 	mov.w	lr, #1
 800d342:	fa0e f503 	lsl.w	r5, lr, r3
    if (iocurrent != 0x00U)
 800d346:	ea15 0201 	ands.w	r2, r5, r1
 800d34a:	9201      	str	r2, [sp, #4]
 800d34c:	d075      	beq.n	800d43a <HAL_GPIO_DeInit+0x11a>
 800d34e:	f023 0603 	bic.w	r6, r3, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800d352:	f003 0203 	and.w	r2, r3, #3
 800d356:	270f      	movs	r7, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800d358:	4548      	cmp	r0, r9
 800d35a:	4456      	add	r6, sl
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800d35c:	ea4f 0282 	mov.w	r2, r2, lsl #2
      tmp = SYSCFG->EXTICR[position >> 2U];
 800d360:	f8d6 c008 	ldr.w	ip, [r6, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800d364:	fa07 f702 	lsl.w	r7, r7, r2
 800d368:	ea07 0c0c 	and.w	ip, r7, ip
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800d36c:	d021      	beq.n	800d3b2 <HAL_GPIO_DeInit+0x92>
 800d36e:	4558      	cmp	r0, fp
 800d370:	d01c      	beq.n	800d3ac <HAL_GPIO_DeInit+0x8c>
 800d372:	4c4a      	ldr	r4, [pc, #296]	; (800d49c <HAL_GPIO_DeInit+0x17c>)
 800d374:	42a0      	cmp	r0, r4
 800d376:	d06d      	beq.n	800d454 <HAL_GPIO_DeInit+0x134>
 800d378:	4c49      	ldr	r4, [pc, #292]	; (800d4a0 <HAL_GPIO_DeInit+0x180>)
 800d37a:	42a0      	cmp	r0, r4
 800d37c:	d06f      	beq.n	800d45e <HAL_GPIO_DeInit+0x13e>
 800d37e:	4c49      	ldr	r4, [pc, #292]	; (800d4a4 <HAL_GPIO_DeInit+0x184>)
 800d380:	42a0      	cmp	r0, r4
 800d382:	d062      	beq.n	800d44a <HAL_GPIO_DeInit+0x12a>
 800d384:	4c48      	ldr	r4, [pc, #288]	; (800d4a8 <HAL_GPIO_DeInit+0x188>)
 800d386:	42a0      	cmp	r0, r4
 800d388:	d074      	beq.n	800d474 <HAL_GPIO_DeInit+0x154>
 800d38a:	4c48      	ldr	r4, [pc, #288]	; (800d4ac <HAL_GPIO_DeInit+0x18c>)
 800d38c:	42a0      	cmp	r0, r4
 800d38e:	d076      	beq.n	800d47e <HAL_GPIO_DeInit+0x15e>
 800d390:	f8df e12c 	ldr.w	lr, [pc, #300]	; 800d4c0 <HAL_GPIO_DeInit+0x1a0>
 800d394:	4570      	cmp	r0, lr
 800d396:	d067      	beq.n	800d468 <HAL_GPIO_DeInit+0x148>
 800d398:	f8df e128 	ldr.w	lr, [pc, #296]	; 800d4c4 <HAL_GPIO_DeInit+0x1a4>
 800d39c:	4570      	cmp	r0, lr
 800d39e:	d073      	beq.n	800d488 <HAL_GPIO_DeInit+0x168>
 800d3a0:	f8df e124 	ldr.w	lr, [pc, #292]	; 800d4c8 <HAL_GPIO_DeInit+0x1a8>
 800d3a4:	4570      	cmp	r0, lr
 800d3a6:	d074      	beq.n	800d492 <HAL_GPIO_DeInit+0x172>
 800d3a8:	f04f 0e0a 	mov.w	lr, #10
 800d3ac:	fa0e f202 	lsl.w	r2, lr, r2
 800d3b0:	e000      	b.n	800d3b4 <HAL_GPIO_DeInit+0x94>
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	4594      	cmp	ip, r2
 800d3b6:	d11e      	bne.n	800d3f6 <HAL_GPIO_DeInit+0xd6>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800d3b8:	9a01      	ldr	r2, [sp, #4]
 800d3ba:	f8d8 c000 	ldr.w	ip, [r8]
 800d3be:	43d4      	mvns	r4, r2
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800d3c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800d3c4:	ea0c 0c04 	and.w	ip, ip, r4
 800d3c8:	f8c8 c000 	str.w	ip, [r8]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800d3cc:	f8d8 c004 	ldr.w	ip, [r8, #4]
 800d3d0:	ea04 0c0c 	and.w	ip, r4, ip
 800d3d4:	f8c8 c004 	str.w	ip, [r8, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800d3d8:	f8d2 c000 	ldr.w	ip, [r2]
 800d3dc:	ea04 0c0c 	and.w	ip, r4, ip
 800d3e0:	f8c2 c000 	str.w	ip, [r2]
        EXTI->FTSR1 &= ~(iocurrent);
 800d3e4:	f8d2 c004 	ldr.w	ip, [r2, #4]
 800d3e8:	ea04 040c 	and.w	r4, r4, ip
 800d3ec:	6054      	str	r4, [r2, #4]

        tmp = 0x0FUL << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800d3ee:	68b2      	ldr	r2, [r6, #8]
 800d3f0:	ea22 0707 	bic.w	r7, r2, r7
 800d3f4:	60b7      	str	r7, [r6, #8]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800d3f6:	2403      	movs	r4, #3
 800d3f8:	005a      	lsls	r2, r3, #1
 800d3fa:	f8d0 c000 	ldr.w	ip, [r0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800d3fe:	270f      	movs	r7, #15
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800d400:	fa04 f202 	lsl.w	r2, r4, r2
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800d404:	fa23 f604 	lsr.w	r6, r3, r4
 800d408:	f003 0407 	and.w	r4, r3, #7
 800d40c:	eb00 0686 	add.w	r6, r0, r6, lsl #2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800d410:	ea4c 0c02 	orr.w	ip, ip, r2
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800d414:	00a4      	lsls	r4, r4, #2

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800d416:	43d2      	mvns	r2, r2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800d418:	f8c0 c000 	str.w	ip, [r0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800d41c:	40a7      	lsls	r7, r4
 800d41e:	6a34      	ldr	r4, [r6, #32]
 800d420:	ea24 0407 	bic.w	r4, r4, r7
 800d424:	6234      	str	r4, [r6, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800d426:	68c4      	ldr	r4, [r0, #12]
 800d428:	4014      	ands	r4, r2
 800d42a:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800d42c:	6844      	ldr	r4, [r0, #4]
 800d42e:	ea24 0505 	bic.w	r5, r4, r5
 800d432:	6045      	str	r5, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800d434:	6884      	ldr	r4, [r0, #8]
 800d436:	4022      	ands	r2, r4
 800d438:	6082      	str	r2, [r0, #8]
    }

    position++;
 800d43a:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00U)
 800d43c:	fa31 f203 	lsrs.w	r2, r1, r3
 800d440:	f47f af7d 	bne.w	800d33e <HAL_GPIO_DeInit+0x1e>
  }
}
 800d444:	b003      	add	sp, #12
 800d446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d44a:	f04f 0e04 	mov.w	lr, #4
 800d44e:	fa0e f202 	lsl.w	r2, lr, r2
 800d452:	e7af      	b.n	800d3b4 <HAL_GPIO_DeInit+0x94>
 800d454:	f04f 0e02 	mov.w	lr, #2
 800d458:	fa0e f202 	lsl.w	r2, lr, r2
 800d45c:	e7aa      	b.n	800d3b4 <HAL_GPIO_DeInit+0x94>
 800d45e:	f04f 0e03 	mov.w	lr, #3
 800d462:	fa0e f202 	lsl.w	r2, lr, r2
 800d466:	e7a5      	b.n	800d3b4 <HAL_GPIO_DeInit+0x94>
 800d468:	f04f 0e07 	mov.w	lr, #7
 800d46c:	fa0e f202 	lsl.w	r2, lr, r2
 800d470:	e7a0      	b.n	800d3b4 <HAL_GPIO_DeInit+0x94>
 800d472:	4770      	bx	lr
 800d474:	f04f 0e05 	mov.w	lr, #5
 800d478:	fa0e f202 	lsl.w	r2, lr, r2
 800d47c:	e79a      	b.n	800d3b4 <HAL_GPIO_DeInit+0x94>
 800d47e:	f04f 0e06 	mov.w	lr, #6
 800d482:	fa0e f202 	lsl.w	r2, lr, r2
 800d486:	e795      	b.n	800d3b4 <HAL_GPIO_DeInit+0x94>
 800d488:	f04f 0e08 	mov.w	lr, #8
 800d48c:	fa0e f202 	lsl.w	r2, lr, r2
 800d490:	e790      	b.n	800d3b4 <HAL_GPIO_DeInit+0x94>
 800d492:	f04f 0e09 	mov.w	lr, #9
 800d496:	fa0e f202 	lsl.w	r2, lr, r2
 800d49a:	e78b      	b.n	800d3b4 <HAL_GPIO_DeInit+0x94>
 800d49c:	58020800 	.word	0x58020800
 800d4a0:	58020c00 	.word	0x58020c00
 800d4a4:	58021000 	.word	0x58021000
 800d4a8:	58021400 	.word	0x58021400
 800d4ac:	58021800 	.word	0x58021800
 800d4b0:	58000400 	.word	0x58000400
 800d4b4:	58020000 	.word	0x58020000
 800d4b8:	58000080 	.word	0x58000080
 800d4bc:	58020400 	.word	0x58020400
 800d4c0:	58021c00 	.word	0x58021c00
 800d4c4:	58022000 	.word	0x58022000
 800d4c8:	58022400 	.word	0x58022400

0800d4cc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800d4cc:	6903      	ldr	r3, [r0, #16]
 800d4ce:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800d4d0:	bf14      	ite	ne
 800d4d2:	2001      	movne	r0, #1
 800d4d4:	2000      	moveq	r0, #0
 800d4d6:	4770      	bx	lr

0800d4d8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800d4d8:	b902      	cbnz	r2, 800d4dc <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800d4da:	0409      	lsls	r1, r1, #16
 800d4dc:	6181      	str	r1, [r0, #24]
  }
}
 800d4de:	4770      	bx	lr

0800d4e0 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800d4e0:	6943      	ldr	r3, [r0, #20]
 800d4e2:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800d4e6:	bf08      	it	eq
 800d4e8:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 800d4ea:	6181      	str	r1, [r0, #24]
  }
}
 800d4ec:	4770      	bx	lr
 800d4ee:	bf00      	nop

0800d4f0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d4f0:	b570      	push	{r4, r5, r6, lr}
 800d4f2:	4604      	mov	r4, r0
 800d4f4:	460d      	mov	r5, r1
 800d4f6:	4616      	mov	r6, r2
 800d4f8:	1c6a      	adds	r2, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d4fa:	6823      	ldr	r3, [r4, #0]
 800d4fc:	d12c      	bne.n	800d558 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
 800d4fe:	699a      	ldr	r2, [r3, #24]
 800d500:	0790      	lsls	r0, r2, #30
 800d502:	d427      	bmi.n	800d554 <I2C_WaitOnTXISFlagUntilTimeout+0x64>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d504:	699a      	ldr	r2, [r3, #24]
 800d506:	06d1      	lsls	r1, r2, #27
 800d508:	d5f9      	bpl.n	800d4fe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d50a:	699a      	ldr	r2, [r3, #24]
 800d50c:	0691      	lsls	r1, r2, #26
 800d50e:	d5fc      	bpl.n	800d50a <I2C_WaitOnTXISFlagUntilTimeout+0x1a>

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d510:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d512:	2110      	movs	r1, #16
 800d514:	61d9      	str	r1, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d516:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800d518:	699a      	ldr	r2, [r3, #24]
 800d51a:	0790      	lsls	r0, r2, #30
 800d51c:	d501      	bpl.n	800d522 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
    hi2c->Instance->TXDR = 0x00U;
 800d51e:	2200      	movs	r2, #0
 800d520:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d522:	699a      	ldr	r2, [r3, #24]
 800d524:	07d1      	lsls	r1, r2, #31
 800d526:	d403      	bmi.n	800d530 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800d528:	699a      	ldr	r2, [r3, #24]
 800d52a:	f042 0201 	orr.w	r2, r2, #1
 800d52e:	619a      	str	r2, [r3, #24]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d530:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d532:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 800d534:	4e1b      	ldr	r6, [pc, #108]	; (800d5a4 <I2C_WaitOnTXISFlagUntilTimeout+0xb4>)
    hi2c->State = HAL_I2C_STATE_READY;
 800d536:	2520      	movs	r5, #32
      return HAL_ERROR;
 800d538:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 800d53a:	4032      	ands	r2, r6
 800d53c:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d53e:	6c63      	ldr	r3, [r4, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d540:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d544:	f043 0304 	orr.w	r3, r3, #4
 800d548:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800d54a:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d54e:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 800d552:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800d554:	2000      	movs	r0, #0
}
 800d556:	bd70      	pop	{r4, r5, r6, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d558:	699a      	ldr	r2, [r3, #24]
 800d55a:	0792      	lsls	r2, r2, #30
 800d55c:	d4fa      	bmi.n	800d554 <I2C_WaitOnTXISFlagUntilTimeout+0x64>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d55e:	699a      	ldr	r2, [r3, #24]
 800d560:	06d0      	lsls	r0, r2, #27
 800d562:	d41b      	bmi.n	800d59c <I2C_WaitOnTXISFlagUntilTimeout+0xac>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d564:	f7fd f84c 	bl	800a600 <HAL_GetTick>
 800d568:	1b80      	subs	r0, r0, r6
 800d56a:	42a8      	cmp	r0, r5
 800d56c:	d801      	bhi.n	800d572 <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 800d56e:	2d00      	cmp	r5, #0
 800d570:	d1c2      	bne.n	800d4f8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d572:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d574:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d576:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 800d578:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d57a:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800d57c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d580:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d582:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d586:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800d58a:	bd70      	pop	{r4, r5, r6, pc}
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d58c:	f7fd f838 	bl	800a600 <HAL_GetTick>
 800d590:	1b80      	subs	r0, r0, r6
 800d592:	4285      	cmp	r5, r0
 800d594:	d3ed      	bcc.n	800d572 <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 800d596:	2d00      	cmp	r5, #0
 800d598:	d0eb      	beq.n	800d572 <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 800d59a:	6823      	ldr	r3, [r4, #0]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d59c:	699a      	ldr	r2, [r3, #24]
 800d59e:	0692      	lsls	r2, r2, #26
 800d5a0:	d5f4      	bpl.n	800d58c <I2C_WaitOnTXISFlagUntilTimeout+0x9c>
 800d5a2:	e7b5      	b.n	800d510 <I2C_WaitOnTXISFlagUntilTimeout+0x20>
 800d5a4:	fe00e800 	.word	0xfe00e800

0800d5a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800d5a8:	b570      	push	{r4, r5, r6, lr}
 800d5aa:	4604      	mov	r4, r0
 800d5ac:	460d      	mov	r5, r1
 800d5ae:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d5b0:	6823      	ldr	r3, [r4, #0]
 800d5b2:	699a      	ldr	r2, [r3, #24]
 800d5b4:	0692      	lsls	r2, r2, #26
 800d5b6:	d449      	bmi.n	800d64c <I2C_WaitOnSTOPFlagUntilTimeout+0xa4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d5b8:	699a      	ldr	r2, [r3, #24]
 800d5ba:	06d2      	lsls	r2, r2, #27
 800d5bc:	d526      	bpl.n	800d60c <I2C_WaitOnSTOPFlagUntilTimeout+0x64>
 800d5be:	1c68      	adds	r0, r5, #1
 800d5c0:	d138      	bne.n	800d634 <I2C_WaitOnSTOPFlagUntilTimeout+0x8c>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d5c2:	699a      	ldr	r2, [r3, #24]
 800d5c4:	0691      	lsls	r1, r2, #26
 800d5c6:	d5fc      	bpl.n	800d5c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x1a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d5c8:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d5ca:	2110      	movs	r1, #16
 800d5cc:	61d9      	str	r1, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d5ce:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800d5d0:	699a      	ldr	r2, [r3, #24]
 800d5d2:	0790      	lsls	r0, r2, #30
 800d5d4:	d501      	bpl.n	800d5da <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
    hi2c->Instance->TXDR = 0x00U;
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d5da:	699a      	ldr	r2, [r3, #24]
 800d5dc:	07d1      	lsls	r1, r2, #31
 800d5de:	d403      	bmi.n	800d5e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800d5e0:	699a      	ldr	r2, [r3, #24]
 800d5e2:	f042 0201 	orr.w	r2, r2, #1
 800d5e6:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
 800d5e8:	685a      	ldr	r2, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d5ea:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 800d5ec:	4e18      	ldr	r6, [pc, #96]	; (800d650 <I2C_WaitOnSTOPFlagUntilTimeout+0xa8>)
    hi2c->State = HAL_I2C_STATE_READY;
 800d5ee:	2520      	movs	r5, #32
      return HAL_ERROR;
 800d5f0:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 800d5f2:	4032      	ands	r2, r6
 800d5f4:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d5f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 800d5f8:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d5fc:	f043 0304 	orr.w	r3, r3, #4
 800d600:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800d602:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d606:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 800d60a:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d60c:	f7fc fff8 	bl	800a600 <HAL_GetTick>
 800d610:	1b80      	subs	r0, r0, r6
 800d612:	42a8      	cmp	r0, r5
 800d614:	d801      	bhi.n	800d61a <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
 800d616:	2d00      	cmp	r5, #0
 800d618:	d1ca      	bne.n	800d5b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d61a:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d61c:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d61e:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 800d620:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d622:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800d624:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d628:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d62a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d62e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800d632:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d634:	699a      	ldr	r2, [r3, #24]
 800d636:	0692      	lsls	r2, r2, #26
 800d638:	d4c6      	bmi.n	800d5c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x20>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d63a:	f7fc ffe1 	bl	800a600 <HAL_GetTick>
 800d63e:	1b80      	subs	r0, r0, r6
 800d640:	4285      	cmp	r5, r0
 800d642:	d3ea      	bcc.n	800d61a <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
 800d644:	2d00      	cmp	r5, #0
 800d646:	d0e8      	beq.n	800d61a <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
 800d648:	6823      	ldr	r3, [r4, #0]
 800d64a:	e7b8      	b.n	800d5be <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 800d64c:	2000      	movs	r0, #0
}
 800d64e:	bd70      	pop	{r4, r5, r6, pc}
 800d650:	fe00e800 	.word	0xfe00e800

0800d654 <HAL_I2C_MspInit>:
}
 800d654:	4770      	bx	lr
 800d656:	bf00      	nop

0800d658 <HAL_I2C_Init>:
  if (hi2c == NULL)
 800d658:	2800      	cmp	r0, #0
 800d65a:	d04d      	beq.n	800d6f8 <HAL_I2C_Init+0xa0>
{
 800d65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800d65e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800d662:	4604      	mov	r4, r0
 800d664:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d040      	beq.n	800d6ee <HAL_I2C_Init+0x96>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800d66c:	2124      	movs	r1, #36	; 0x24
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d66e:	68e5      	ldr	r5, [r4, #12]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800d670:	e9d4 3200 	ldrd	r3, r2, [r4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800d674:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d678:	2d01      	cmp	r5, #1
  __HAL_I2C_DISABLE(hi2c);
 800d67a:	6818      	ldr	r0, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800d67c:	f022 6170 	bic.w	r1, r2, #251658240	; 0xf000000
 800d680:	68a2      	ldr	r2, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 800d682:	f020 0001 	bic.w	r0, r0, #1
 800d686:	6018      	str	r0, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800d688:	6119      	str	r1, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800d68a:	6899      	ldr	r1, [r3, #8]
 800d68c:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800d690:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d692:	d028      	beq.n	800d6e6 <HAL_I2C_Init+0x8e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800d694:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800d698:	2d02      	cmp	r5, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800d69a:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800d69c:	d102      	bne.n	800d6a4 <HAL_I2C_Init+0x4c>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800d69e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d6a2:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800d6a4:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d6a6:	2100      	movs	r1, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800d6a8:	4814      	ldr	r0, [pc, #80]	; (800d6fc <HAL_I2C_Init+0xa4>)
  hi2c->State = HAL_I2C_STATE_READY;
 800d6aa:	2720      	movs	r7, #32
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800d6ac:	69a6      	ldr	r6, [r4, #24]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800d6ae:	4310      	orrs	r0, r2
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800d6b0:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800d6b4:	6058      	str	r0, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800d6b6:	432a      	orrs	r2, r5
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800d6b8:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800d6ba:	69e5      	ldr	r5, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800d6bc:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800d6c0:	6a26      	ldr	r6, [r4, #32]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800d6c2:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800d6c6:	4335      	orrs	r5, r6
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800d6c8:	60d8      	str	r0, [r3, #12]
  return HAL_OK;
 800d6ca:	4608      	mov	r0, r1
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800d6cc:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800d6ce:	601d      	str	r5, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800d6d0:	681a      	ldr	r2, [r3, #0]
 800d6d2:	f042 0201 	orr.w	r2, r2, #1
 800d6d6:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d6d8:	6461      	str	r1, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800d6da:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800d6de:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d6e0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 800d6e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800d6e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d6ea:	609a      	str	r2, [r3, #8]
 800d6ec:	e7da      	b.n	800d6a4 <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 800d6ee:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800d6f2:	f7ff ffaf 	bl	800d654 <HAL_I2C_MspInit>
 800d6f6:	e7b9      	b.n	800d66c <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 800d6f8:	2001      	movs	r0, #1
}
 800d6fa:	4770      	bx	lr
 800d6fc:	02008000 	.word	0x02008000

0800d700 <HAL_I2C_MspDeInit>:
 800d700:	4770      	bx	lr
 800d702:	bf00      	nop

0800d704 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 800d704:	b1b0      	cbz	r0, 800d734 <HAL_I2C_DeInit+0x30>
  __HAL_I2C_DISABLE(hi2c);
 800d706:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800d708:	2324      	movs	r3, #36	; 0x24
{
 800d70a:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_BUSY;
 800d70c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 800d710:	4604      	mov	r4, r0
  __HAL_I2C_DISABLE(hi2c);
 800d712:	6813      	ldr	r3, [r2, #0]
 800d714:	f023 0301 	bic.w	r3, r3, #1
 800d718:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800d71a:	f7ff fff1 	bl	800d700 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d71e:	2300      	movs	r3, #0
 800d720:	6463      	str	r3, [r4, #68]	; 0x44
  return HAL_OK;
 800d722:	4618      	mov	r0, r3
  hi2c->State = HAL_I2C_STATE_RESET;
 800d724:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
 800d728:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  hi2c->PreviousState = I2C_STATE_NONE;
 800d72c:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d72e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 800d732:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800d734:	2001      	movs	r0, #1
}
 800d736:	4770      	bx	lr

0800d738 <HAL_I2C_Mem_Write>:
{
 800d738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d73c:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d73e:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
{
 800d742:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d746:	2820      	cmp	r0, #32
 800d748:	f040 809a 	bne.w	800d880 <HAL_I2C_Mem_Write+0x148>
    if ((pData == NULL) || (Size == 0U))
 800d74c:	9808      	ldr	r0, [sp, #32]
 800d74e:	2800      	cmp	r0, #0
 800d750:	f000 8099 	beq.w	800d886 <HAL_I2C_Mem_Write+0x14e>
 800d754:	f1b8 0f00 	cmp.w	r8, #0
 800d758:	f000 8095 	beq.w	800d886 <HAL_I2C_Mem_Write+0x14e>
    __HAL_LOCK(hi2c);
 800d75c:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800d760:	2801      	cmp	r0, #1
 800d762:	f000 808d 	beq.w	800d880 <HAL_I2C_Mem_Write+0x148>
 800d766:	461f      	mov	r7, r3
 800d768:	2301      	movs	r3, #1
 800d76a:	4691      	mov	r9, r2
 800d76c:	460e      	mov	r6, r1
 800d76e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    tickstart = HAL_GetTick();
 800d772:	f7fc ff45 	bl	800a600 <HAL_GetTick>
 800d776:	4605      	mov	r5, r0
 800d778:	e005      	b.n	800d786 <HAL_I2C_Mem_Write+0x4e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d77a:	f7fc ff41 	bl	800a600 <HAL_GetTick>
 800d77e:	1b40      	subs	r0, r0, r5
 800d780:	2819      	cmp	r0, #25
 800d782:	f200 8086 	bhi.w	800d892 <HAL_I2C_Mem_Write+0x15a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d786:	6823      	ldr	r3, [r4, #0]
 800d788:	6998      	ldr	r0, [r3, #24]
 800d78a:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 800d78e:	d1f4      	bne.n	800d77a <HAL_I2C_Mem_Write+0x42>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d790:	2121      	movs	r1, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d792:	2240      	movs	r2, #64	; 0x40
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800d794:	fa5f fc87 	uxtb.w	ip, r7
 800d798:	f3c6 0609 	ubfx	r6, r6, #0, #10
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d79c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800d7a0:	4978      	ldr	r1, [pc, #480]	; (800d984 <HAL_I2C_Mem_Write+0x24c>)
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d7a2:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d7a6:	462a      	mov	r2, r5
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d7a8:	6460      	str	r0, [r4, #68]	; 0x44
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800d7aa:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
    hi2c->XferCount = Size;
 800d7ae:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800d7b2:	f8df e1e0 	ldr.w	lr, [pc, #480]	; 800d994 <HAL_I2C_Mem_Write+0x25c>
 800d7b6:	ea4c 0c06 	orr.w	ip, ip, r6
 800d7ba:	f8d3 8004 	ldr.w	r8, [r3, #4]
    hi2c->pBuffPtr  = pData;
 800d7be:	9908      	ldr	r1, [sp, #32]
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800d7c0:	ea08 0e0e 	and.w	lr, r8, lr
    hi2c->XferISR   = NULL;
 800d7c4:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->pBuffPtr  = pData;
 800d7c6:	6261      	str	r1, [r4, #36]	; 0x24
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d7c8:	4620      	mov	r0, r4
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800d7ca:	ea4c 0c0e 	orr.w	ip, ip, lr
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d7ce:	990a      	ldr	r1, [sp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800d7d0:	f8c3 c004 	str.w	ip, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d7d4:	f7ff fe8c 	bl	800d4f0 <I2C_WaitOnTXISFlagUntilTimeout>
 800d7d8:	2800      	cmp	r0, #0
 800d7da:	f040 808c 	bne.w	800d8f6 <HAL_I2C_Mem_Write+0x1be>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d7de:	2f01      	cmp	r7, #1
 800d7e0:	6820      	ldr	r0, [r4, #0]
 800d7e2:	d163      	bne.n	800d8ac <HAL_I2C_Mem_Write+0x174>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d7e4:	fa5f f389 	uxtb.w	r3, r9
 800d7e8:	6283      	str	r3, [r0, #40]	; 0x28
 800d7ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d7ec:	3301      	adds	r3, #1
 800d7ee:	f040 8087 	bne.w	800d900 <HAL_I2C_Mem_Write+0x1c8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d7f2:	6983      	ldr	r3, [r0, #24]
 800d7f4:	061f      	lsls	r7, r3, #24
 800d7f6:	d5fc      	bpl.n	800d7f2 <HAL_I2C_Mem_Write+0xba>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d7f8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800d7fa:	2bff      	cmp	r3, #255	; 0xff
 800d7fc:	f240 809f 	bls.w	800d93e <HAL_I2C_Mem_Write+0x206>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800d800:	6843      	ldr	r3, [r0, #4]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d802:	21ff      	movs	r1, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800d804:	4f60      	ldr	r7, [pc, #384]	; (800d988 <HAL_I2C_Mem_Write+0x250>)
 800d806:	4a61      	ldr	r2, [pc, #388]	; (800d98c <HAL_I2C_Mem_Write+0x254>)
 800d808:	403b      	ands	r3, r7
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d80a:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800d80c:	4332      	orrs	r2, r6
 800d80e:	4313      	orrs	r3, r2
 800d810:	6043      	str	r3, [r0, #4]
 800d812:	4f5e      	ldr	r7, [pc, #376]	; (800d98c <HAL_I2C_Mem_Write+0x254>)
 800d814:	f8df 8170 	ldr.w	r8, [pc, #368]	; 800d988 <HAL_I2C_Mem_Write+0x250>
 800d818:	4337      	orrs	r7, r6
 800d81a:	e004      	b.n	800d826 <HAL_I2C_Mem_Write+0xee>
    while (hi2c->XferCount > 0U);
 800d81c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800d81e:	b29b      	uxth	r3, r3
 800d820:	2b00      	cmp	r3, #0
 800d822:	f000 809a 	beq.w	800d95a <HAL_I2C_Mem_Write+0x222>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d826:	462a      	mov	r2, r5
 800d828:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d82a:	4620      	mov	r0, r4
 800d82c:	f7ff fe60 	bl	800d4f0 <I2C_WaitOnTXISFlagUntilTimeout>
 800d830:	2800      	cmp	r0, #0
 800d832:	f040 8082 	bne.w	800d93a <HAL_I2C_Mem_Write+0x202>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d836:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d838:	6821      	ldr	r1, [r4, #0]
 800d83a:	f810 2b01 	ldrb.w	r2, [r0], #1
      hi2c->XferSize--;
 800d83e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d840:	628a      	str	r2, [r1, #40]	; 0x28
      hi2c->XferCount--;
 800d842:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800d844:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 800d846:	6260      	str	r0, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800d848:	3a01      	subs	r2, #1
      hi2c->XferSize--;
 800d84a:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800d84c:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800d84e:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800d850:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d852:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800d854:	b292      	uxth	r2, r2
 800d856:	2a00      	cmp	r2, #0
 800d858:	d0e0      	beq.n	800d81c <HAL_I2C_Mem_Write+0xe4>
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d1de      	bne.n	800d81c <HAL_I2C_Mem_Write+0xe4>
 800d85e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d860:	3301      	adds	r3, #1
 800d862:	d132      	bne.n	800d8ca <HAL_I2C_Mem_Write+0x192>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d864:	698b      	ldr	r3, [r1, #24]
 800d866:	061a      	lsls	r2, r3, #24
 800d868:	d5fc      	bpl.n	800d864 <HAL_I2C_Mem_Write+0x12c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d86a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800d86c:	2bff      	cmp	r3, #255	; 0xff
 800d86e:	d955      	bls.n	800d91c <HAL_I2C_Mem_Write+0x1e4>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800d870:	684b      	ldr	r3, [r1, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d872:	22ff      	movs	r2, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800d874:	ea03 0308 	and.w	r3, r3, r8
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d878:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800d87a:	433b      	orrs	r3, r7
 800d87c:	604b      	str	r3, [r1, #4]
 800d87e:	e7cd      	b.n	800d81c <HAL_I2C_Mem_Write+0xe4>
    return HAL_BUSY;
 800d880:	2002      	movs	r0, #2
}
 800d882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800d886:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
 800d88a:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800d88c:	6463      	str	r3, [r4, #68]	; 0x44
}
 800d88e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d892:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d894:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d896:	2200      	movs	r2, #0
          return HAL_ERROR;
 800d898:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d89a:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800d89c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d8a0:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d8a2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d8a6:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800d8aa:	e7ea      	b.n	800d882 <HAL_I2C_Mem_Write+0x14a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800d8ac:	ea4f 2319 	mov.w	r3, r9, lsr #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d8b0:	462a      	mov	r2, r5
 800d8b2:	990a      	ldr	r1, [sp, #40]	; 0x28
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800d8b4:	6283      	str	r3, [r0, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d8b6:	4620      	mov	r0, r4
 800d8b8:	f7ff fe1a 	bl	800d4f0 <I2C_WaitOnTXISFlagUntilTimeout>
 800d8bc:	b9d8      	cbnz	r0, 800d8f6 <HAL_I2C_Mem_Write+0x1be>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d8be:	fa5f f389 	uxtb.w	r3, r9
 800d8c2:	6820      	ldr	r0, [r4, #0]
 800d8c4:	6283      	str	r3, [r0, #40]	; 0x28
 800d8c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8c8:	e790      	b.n	800d7ec <HAL_I2C_Mem_Write+0xb4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d8ca:	698b      	ldr	r3, [r1, #24]
 800d8cc:	061b      	lsls	r3, r3, #24
 800d8ce:	d4cc      	bmi.n	800d86a <HAL_I2C_Mem_Write+0x132>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d8d0:	f7fc fe96 	bl	800a600 <HAL_GetTick>
 800d8d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8d6:	1b40      	subs	r0, r0, r5
 800d8d8:	4283      	cmp	r3, r0
 800d8da:	d3da      	bcc.n	800d892 <HAL_I2C_Mem_Write+0x15a>
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d0d8      	beq.n	800d892 <HAL_I2C_Mem_Write+0x15a>
 800d8e0:	6821      	ldr	r1, [r4, #0]
 800d8e2:	e7bd      	b.n	800d860 <HAL_I2C_Mem_Write+0x128>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d8e4:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d8e6:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d8e8:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d8ea:	430b      	orrs	r3, r1
 800d8ec:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d8ee:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d8f2:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800d8f6:	2300      	movs	r3, #0
      return HAL_ERROR;
 800d8f8:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 800d8fa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800d8fe:	e7c0      	b.n	800d882 <HAL_I2C_Mem_Write+0x14a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d900:	6983      	ldr	r3, [r0, #24]
 800d902:	0619      	lsls	r1, r3, #24
 800d904:	f53f af78 	bmi.w	800d7f8 <HAL_I2C_Mem_Write+0xc0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d908:	f7fc fe7a 	bl	800a600 <HAL_GetTick>
 800d90c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d90e:	1b40      	subs	r0, r0, r5
 800d910:	4283      	cmp	r3, r0
 800d912:	d3e7      	bcc.n	800d8e4 <HAL_I2C_Mem_Write+0x1ac>
 800d914:	2b00      	cmp	r3, #0
 800d916:	d0e5      	beq.n	800d8e4 <HAL_I2C_Mem_Write+0x1ac>
 800d918:	6820      	ldr	r0, [r4, #0]
 800d91a:	e767      	b.n	800d7ec <HAL_I2C_Mem_Write+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 800d91c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800d91e:	f046 7300 	orr.w	r3, r6, #33554432	; 0x2000000
 800d922:	6848      	ldr	r0, [r1, #4]
          hi2c->XferSize = hi2c->XferCount;
 800d924:	b292      	uxth	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800d926:	ea00 0008 	and.w	r0, r0, r8
 800d92a:	fa5f fc82 	uxtb.w	ip, r2
          hi2c->XferSize = hi2c->XferCount;
 800d92e:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800d930:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 800d934:	4303      	orrs	r3, r0
 800d936:	604b      	str	r3, [r1, #4]
 800d938:	e770      	b.n	800d81c <HAL_I2C_Mem_Write+0xe4>
        return HAL_ERROR;
 800d93a:	2001      	movs	r0, #1
 800d93c:	e7a1      	b.n	800d882 <HAL_I2C_Mem_Write+0x14a>
      hi2c->XferSize = hi2c->XferCount;
 800d93e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800d940:	f046 7300 	orr.w	r3, r6, #33554432	; 0x2000000
 800d944:	6841      	ldr	r1, [r0, #4]
      hi2c->XferSize = hi2c->XferCount;
 800d946:	b292      	uxth	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800d948:	4f0f      	ldr	r7, [pc, #60]	; (800d988 <HAL_I2C_Mem_Write+0x250>)
 800d94a:	4039      	ands	r1, r7
 800d94c:	b2d7      	uxtb	r7, r2
      hi2c->XferSize = hi2c->XferCount;
 800d94e:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800d950:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d954:	430b      	orrs	r3, r1
 800d956:	6043      	str	r3, [r0, #4]
 800d958:	e75b      	b.n	800d812 <HAL_I2C_Mem_Write+0xda>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d95a:	462a      	mov	r2, r5
 800d95c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d95e:	4620      	mov	r0, r4
 800d960:	f7ff fe22 	bl	800d5a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800d964:	2800      	cmp	r0, #0
 800d966:	d1e8      	bne.n	800d93a <HAL_I2C_Mem_Write+0x202>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d968:	6823      	ldr	r3, [r4, #0]
 800d96a:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800d96c:	4d08      	ldr	r5, [pc, #32]	; (800d990 <HAL_I2C_Mem_Write+0x258>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d96e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800d970:	685a      	ldr	r2, [r3, #4]
 800d972:	402a      	ands	r2, r5
 800d974:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800d976:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800d97a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d97e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800d982:	e77e      	b.n	800d882 <HAL_I2C_Mem_Write+0x14a>
 800d984:	81002000 	.word	0x81002000
 800d988:	fc009c00 	.word	0xfc009c00
 800d98c:	01ff0000 	.word	0x01ff0000
 800d990:	fe00e800 	.word	0xfe00e800
 800d994:	fc009800 	.word	0xfc009800

0800d998 <HAL_I2C_Mem_Read>:
{
 800d998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d99c:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d99e:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
{
 800d9a2:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d9a6:	2820      	cmp	r0, #32
{
 800d9a8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d9aa:	f040 8087 	bne.w	800dabc <HAL_I2C_Mem_Read+0x124>
    if ((pData == NULL) || (Size == 0U))
 800d9ae:	9808      	ldr	r0, [sp, #32]
 800d9b0:	2800      	cmp	r0, #0
 800d9b2:	f000 8086 	beq.w	800dac2 <HAL_I2C_Mem_Read+0x12a>
 800d9b6:	f1ba 0f00 	cmp.w	sl, #0
 800d9ba:	f000 8082 	beq.w	800dac2 <HAL_I2C_Mem_Read+0x12a>
    __HAL_LOCK(hi2c);
 800d9be:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800d9c2:	2801      	cmp	r0, #1
 800d9c4:	d07a      	beq.n	800dabc <HAL_I2C_Mem_Read+0x124>
 800d9c6:	4698      	mov	r8, r3
 800d9c8:	2301      	movs	r3, #1
 800d9ca:	4691      	mov	r9, r2
 800d9cc:	460f      	mov	r7, r1
 800d9ce:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    tickstart = HAL_GetTick();
 800d9d2:	f7fc fe15 	bl	800a600 <HAL_GetTick>
 800d9d6:	4606      	mov	r6, r0
 800d9d8:	e004      	b.n	800d9e4 <HAL_I2C_Mem_Read+0x4c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d9da:	f7fc fe11 	bl	800a600 <HAL_GetTick>
 800d9de:	1b80      	subs	r0, r0, r6
 800d9e0:	2819      	cmp	r0, #25
 800d9e2:	d87d      	bhi.n	800dae0 <HAL_I2C_Mem_Read+0x148>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d9e4:	6823      	ldr	r3, [r4, #0]
 800d9e6:	6998      	ldr	r0, [r3, #24]
 800d9e8:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 800d9ec:	d1f5      	bne.n	800d9da <HAL_I2C_Mem_Read+0x42>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d9ee:	2122      	movs	r1, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d9f0:	2240      	movs	r2, #64	; 0x40
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800d9f2:	fa5f fc88 	uxtb.w	ip, r8
 800d9f6:	f3c7 0709 	ubfx	r7, r7, #0, #10
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d9fa:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800d9fe:	497d      	ldr	r1, [pc, #500]	; (800dbf4 <HAL_I2C_Mem_Read+0x25c>)
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800da00:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800da04:	4632      	mov	r2, r6
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800da06:	6460      	str	r0, [r4, #68]	; 0x44
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800da08:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
    hi2c->XferCount = Size;
 800da0c:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800da10:	f8df e1f0 	ldr.w	lr, [pc, #496]	; 800dc04 <HAL_I2C_Mem_Read+0x26c>
 800da14:	ea4c 0c07 	orr.w	ip, ip, r7
 800da18:	f8d3 a004 	ldr.w	sl, [r3, #4]
    hi2c->pBuffPtr  = pData;
 800da1c:	9908      	ldr	r1, [sp, #32]
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800da1e:	ea0a 0e0e 	and.w	lr, sl, lr
    hi2c->XferISR   = NULL;
 800da22:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->pBuffPtr  = pData;
 800da24:	6261      	str	r1, [r4, #36]	; 0x24
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800da26:	4620      	mov	r0, r4
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800da28:	ea4c 0c0e 	orr.w	ip, ip, lr
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800da2c:	4629      	mov	r1, r5
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800da2e:	f8c3 c004 	str.w	ip, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800da32:	f7ff fd5d 	bl	800d4f0 <I2C_WaitOnTXISFlagUntilTimeout>
 800da36:	2800      	cmp	r0, #0
 800da38:	f040 8094 	bne.w	800db64 <HAL_I2C_Mem_Read+0x1cc>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800da3c:	f1b8 0f01 	cmp.w	r8, #1
 800da40:	6820      	ldr	r0, [r4, #0]
 800da42:	d16d      	bne.n	800db20 <HAL_I2C_Mem_Read+0x188>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800da44:	fa5f f389 	uxtb.w	r3, r9
 800da48:	6283      	str	r3, [r0, #40]	; 0x28
 800da4a:	1c69      	adds	r1, r5, #1
 800da4c:	f040 809e 	bne.w	800db8c <HAL_I2C_Mem_Read+0x1f4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800da50:	6983      	ldr	r3, [r0, #24]
 800da52:	065a      	lsls	r2, r3, #25
 800da54:	d5fc      	bpl.n	800da50 <HAL_I2C_Mem_Read+0xb8>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800da56:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800da58:	2bff      	cmp	r3, #255	; 0xff
 800da5a:	f240 80a4 	bls.w	800dba6 <HAL_I2C_Mem_Read+0x20e>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800da5e:	6843      	ldr	r3, [r0, #4]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800da60:	21ff      	movs	r1, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800da62:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 800dc04 <HAL_I2C_Mem_Read+0x26c>
 800da66:	4a64      	ldr	r2, [pc, #400]	; (800dbf8 <HAL_I2C_Mem_Read+0x260>)
 800da68:	ea03 030c 	and.w	r3, r3, ip
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800da6c:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800da6e:	433a      	orrs	r2, r7
 800da70:	4313      	orrs	r3, r2
 800da72:	6043      	str	r3, [r0, #4]
 800da74:	f8df 8190 	ldr.w	r8, [pc, #400]	; 800dc08 <HAL_I2C_Mem_Read+0x270>
 800da78:	f8df 9190 	ldr.w	r9, [pc, #400]	; 800dc0c <HAL_I2C_Mem_Read+0x274>
 800da7c:	ea47 0808 	orr.w	r8, r7, r8
 800da80:	1c69      	adds	r1, r5, #1
 800da82:	d15b      	bne.n	800db3c <HAL_I2C_Mem_Read+0x1a4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800da84:	6983      	ldr	r3, [r0, #24]
 800da86:	075a      	lsls	r2, r3, #29
 800da88:	d5fc      	bpl.n	800da84 <HAL_I2C_Mem_Read+0xec>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800da8a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800da8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da8e:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800da90:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800da92:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800da94:	3901      	subs	r1, #1
      hi2c->pBuffPtr++;
 800da96:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800da98:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 800da9a:	b289      	uxth	r1, r1
      hi2c->pBuffPtr++;
 800da9c:	3201      	adds	r2, #1
      hi2c->XferSize--;
 800da9e:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800daa0:	8561      	strh	r1, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800daa2:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800daa4:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800daa6:	b289      	uxth	r1, r1
      hi2c->pBuffPtr++;
 800daa8:	6262      	str	r2, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800daaa:	b903      	cbnz	r3, 800daae <HAL_I2C_Mem_Read+0x116>
 800daac:	bb31      	cbnz	r1, 800dafc <HAL_I2C_Mem_Read+0x164>
    while (hi2c->XferCount > 0U);
 800daae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800dab0:	b29b      	uxth	r3, r3
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	f000 8088 	beq.w	800dbc8 <HAL_I2C_Mem_Read+0x230>
 800dab8:	6820      	ldr	r0, [r4, #0]
 800daba:	e7e1      	b.n	800da80 <HAL_I2C_Mem_Read+0xe8>
    return HAL_BUSY;
 800dabc:	2002      	movs	r0, #2
}
 800dabe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800dac2:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
 800dac6:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800dac8:	6463      	str	r3, [r4, #68]	; 0x44
}
 800daca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800dace:	6993      	ldr	r3, [r2, #24]
 800dad0:	061b      	lsls	r3, r3, #24
 800dad2:	d419      	bmi.n	800db08 <HAL_I2C_Mem_Read+0x170>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dad4:	f7fc fd94 	bl	800a600 <HAL_GetTick>
 800dad8:	1b80      	subs	r0, r0, r6
 800dada:	4285      	cmp	r5, r0
 800dadc:	d300      	bcc.n	800dae0 <HAL_I2C_Mem_Read+0x148>
 800dade:	b96d      	cbnz	r5, 800dafc <HAL_I2C_Mem_Read+0x164>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800dae0:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800dae2:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800dae4:	2200      	movs	r2, #0
          return HAL_ERROR;
 800dae6:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800dae8:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800daea:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800daee:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800daf0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800daf4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800daf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dafc:	1c68      	adds	r0, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800dafe:	6822      	ldr	r2, [r4, #0]
 800db00:	d1e5      	bne.n	800dace <HAL_I2C_Mem_Read+0x136>
 800db02:	6993      	ldr	r3, [r2, #24]
 800db04:	0619      	lsls	r1, r3, #24
 800db06:	d5fc      	bpl.n	800db02 <HAL_I2C_Mem_Read+0x16a>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800db08:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800db0a:	2bff      	cmp	r3, #255	; 0xff
 800db0c:	d92f      	bls.n	800db6e <HAL_I2C_Mem_Read+0x1d6>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800db0e:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800db10:	21ff      	movs	r1, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800db12:	ea03 0309 	and.w	r3, r3, r9
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800db16:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800db18:	ea43 0308 	orr.w	r3, r3, r8
 800db1c:	6053      	str	r3, [r2, #4]
 800db1e:	e7c6      	b.n	800daae <HAL_I2C_Mem_Read+0x116>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800db20:	ea4f 2319 	mov.w	r3, r9, lsr #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800db24:	4632      	mov	r2, r6
 800db26:	4629      	mov	r1, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800db28:	6283      	str	r3, [r0, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800db2a:	4620      	mov	r0, r4
 800db2c:	f7ff fce0 	bl	800d4f0 <I2C_WaitOnTXISFlagUntilTimeout>
 800db30:	b9c0      	cbnz	r0, 800db64 <HAL_I2C_Mem_Read+0x1cc>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800db32:	fa5f f389 	uxtb.w	r3, r9
 800db36:	6820      	ldr	r0, [r4, #0]
 800db38:	6283      	str	r3, [r0, #40]	; 0x28
 800db3a:	e786      	b.n	800da4a <HAL_I2C_Mem_Read+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800db3c:	6983      	ldr	r3, [r0, #24]
 800db3e:	075b      	lsls	r3, r3, #29
 800db40:	d4a3      	bmi.n	800da8a <HAL_I2C_Mem_Read+0xf2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800db42:	f7fc fd5d 	bl	800a600 <HAL_GetTick>
 800db46:	1b80      	subs	r0, r0, r6
 800db48:	4285      	cmp	r5, r0
 800db4a:	d3c9      	bcc.n	800dae0 <HAL_I2C_Mem_Read+0x148>
 800db4c:	2d00      	cmp	r5, #0
 800db4e:	d1b3      	bne.n	800dab8 <HAL_I2C_Mem_Read+0x120>
 800db50:	e7c6      	b.n	800dae0 <HAL_I2C_Mem_Read+0x148>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800db52:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800db54:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800db56:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800db58:	430b      	orrs	r3, r1
 800db5a:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800db5c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800db60:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800db64:	2300      	movs	r3, #0
      return HAL_ERROR;
 800db66:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 800db68:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800db6c:	e7a7      	b.n	800dabe <HAL_I2C_Mem_Read+0x126>
          hi2c->XferSize = hi2c->XferCount;
 800db6e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800db70:	f047 7300 	orr.w	r3, r7, #33554432	; 0x2000000
 800db74:	6850      	ldr	r0, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 800db76:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800db78:	ea00 0009 	and.w	r0, r0, r9
 800db7c:	fa5f fc81 	uxtb.w	ip, r1
          hi2c->XferSize = hi2c->XferCount;
 800db80:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800db82:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 800db86:	4303      	orrs	r3, r0
 800db88:	6053      	str	r3, [r2, #4]
 800db8a:	e790      	b.n	800daae <HAL_I2C_Mem_Read+0x116>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800db8c:	6983      	ldr	r3, [r0, #24]
 800db8e:	065b      	lsls	r3, r3, #25
 800db90:	f53f af61 	bmi.w	800da56 <HAL_I2C_Mem_Read+0xbe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800db94:	f7fc fd34 	bl	800a600 <HAL_GetTick>
 800db98:	1b80      	subs	r0, r0, r6
 800db9a:	4285      	cmp	r5, r0
 800db9c:	d3d9      	bcc.n	800db52 <HAL_I2C_Mem_Read+0x1ba>
 800db9e:	2d00      	cmp	r5, #0
 800dba0:	d0d7      	beq.n	800db52 <HAL_I2C_Mem_Read+0x1ba>
 800dba2:	6820      	ldr	r0, [r4, #0]
 800dba4:	e751      	b.n	800da4a <HAL_I2C_Mem_Read+0xb2>
      hi2c->XferSize = hi2c->XferCount;
 800dba6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800dba8:	4b14      	ldr	r3, [pc, #80]	; (800dbfc <HAL_I2C_Mem_Read+0x264>)
      hi2c->XferSize = hi2c->XferCount;
 800dbaa:	b292      	uxth	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800dbac:	6841      	ldr	r1, [r0, #4]
 800dbae:	433b      	orrs	r3, r7
 800dbb0:	f8df e050 	ldr.w	lr, [pc, #80]	; 800dc04 <HAL_I2C_Mem_Read+0x26c>
 800dbb4:	fa5f fc82 	uxtb.w	ip, r2
      hi2c->XferSize = hi2c->XferCount;
 800dbb8:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800dbba:	ea01 020e 	and.w	r2, r1, lr
 800dbbe:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 800dbc2:	4313      	orrs	r3, r2
 800dbc4:	6043      	str	r3, [r0, #4]
 800dbc6:	e755      	b.n	800da74 <HAL_I2C_Mem_Read+0xdc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dbc8:	4632      	mov	r2, r6
 800dbca:	4629      	mov	r1, r5
 800dbcc:	4620      	mov	r0, r4
 800dbce:	f7ff fceb 	bl	800d5a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800dbd2:	b968      	cbnz	r0, 800dbf0 <HAL_I2C_Mem_Read+0x258>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800dbd4:	6823      	ldr	r3, [r4, #0]
 800dbd6:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800dbd8:	4d09      	ldr	r5, [pc, #36]	; (800dc00 <HAL_I2C_Mem_Read+0x268>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800dbda:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800dbdc:	685a      	ldr	r2, [r3, #4]
 800dbde:	402a      	ands	r2, r5
 800dbe0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800dbe2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800dbe6:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800dbea:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800dbee:	e766      	b.n	800dabe <HAL_I2C_Mem_Read+0x126>
      return HAL_ERROR;
 800dbf0:	2001      	movs	r0, #1
 800dbf2:	e764      	b.n	800dabe <HAL_I2C_Mem_Read+0x126>
 800dbf4:	80002000 	.word	0x80002000
 800dbf8:	81ff2400 	.word	0x81ff2400
 800dbfc:	82002400 	.word	0x82002400
 800dc00:	fe00e800 	.word	0xfe00e800
 800dc04:	fc009800 	.word	0xfc009800
 800dc08:	01ff0000 	.word	0x01ff0000
 800dc0c:	fc009c00 	.word	0xfc009c00

0800dc10 <HAL_I2C_GetState>:
  return hi2c->State;
 800dc10:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 800dc14:	4770      	bx	lr
 800dc16:	bf00      	nop

0800dc18 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 800dc18:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 800dc1a:	4770      	bx	lr

0800dc1c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dc1c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800dc20:	b2db      	uxtb	r3, r3
 800dc22:	2b20      	cmp	r3, #32
{
 800dc24:	b470      	push	{r4, r5, r6}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800dc26:	d11f      	bne.n	800dc68 <HAL_I2CEx_ConfigAnalogFilter+0x4c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dc28:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 800dc2c:	2a01      	cmp	r2, #1
 800dc2e:	d01b      	beq.n	800dc68 <HAL_I2CEx_ConfigAnalogFilter+0x4c>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800dc30:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800dc32:	2424      	movs	r4, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dc34:	2600      	movs	r6, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 800dc36:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800dc3a:	6815      	ldr	r5, [r2, #0]

    return HAL_OK;
 800dc3c:	4634      	mov	r4, r6
    __HAL_I2C_DISABLE(hi2c);
 800dc3e:	f025 0501 	bic.w	r5, r5, #1
 800dc42:	6015      	str	r5, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800dc44:	6815      	ldr	r5, [r2, #0]
 800dc46:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 800dc4a:	6015      	str	r5, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800dc4c:	6815      	ldr	r5, [r2, #0]
 800dc4e:	4329      	orrs	r1, r5
 800dc50:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800dc52:	6811      	ldr	r1, [r2, #0]
 800dc54:	f041 0101 	orr.w	r1, r1, #1
 800dc58:	6011      	str	r1, [r2, #0]
    __HAL_UNLOCK(hi2c);
 800dc5a:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800dc5e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  }
  else
  {
    return HAL_BUSY;
  }
}
 800dc62:	4620      	mov	r0, r4
 800dc64:	bc70      	pop	{r4, r5, r6}
 800dc66:	4770      	bx	lr
    return HAL_BUSY;
 800dc68:	2402      	movs	r4, #2
}
 800dc6a:	4620      	mov	r0, r4
 800dc6c:	bc70      	pop	{r4, r5, r6}
 800dc6e:	4770      	bx	lr

0800dc70 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dc70:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800dc74:	b2db      	uxtb	r3, r3
 800dc76:	2b20      	cmp	r3, #32
{
 800dc78:	b470      	push	{r4, r5, r6}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800dc7a:	d11e      	bne.n	800dcba <HAL_I2CEx_ConfigDigitalFilter+0x4a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dc7c:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 800dc80:	2a01      	cmp	r2, #1
 800dc82:	d01a      	beq.n	800dcba <HAL_I2CEx_ConfigDigitalFilter+0x4a>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800dc84:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800dc86:	2424      	movs	r4, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dc88:	2600      	movs	r6, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 800dc8a:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800dc8e:	6814      	ldr	r4, [r2, #0]

    return HAL_OK;
 800dc90:	4635      	mov	r5, r6
    __HAL_I2C_DISABLE(hi2c);
 800dc92:	f024 0401 	bic.w	r4, r4, #1
 800dc96:	6014      	str	r4, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 800dc98:	6814      	ldr	r4, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 800dc9a:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 800dc9e:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 800dca2:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800dca4:	6811      	ldr	r1, [r2, #0]
 800dca6:	f041 0101 	orr.w	r1, r1, #1
 800dcaa:	6011      	str	r1, [r2, #0]
    __HAL_UNLOCK(hi2c);
 800dcac:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800dcb0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  }
  else
  {
    return HAL_BUSY;
  }
}
 800dcb4:	4628      	mov	r0, r5
 800dcb6:	bc70      	pop	{r4, r5, r6}
 800dcb8:	4770      	bx	lr
    return HAL_BUSY;
 800dcba:	2502      	movs	r5, #2
}
 800dcbc:	4628      	mov	r0, r5
 800dcbe:	bc70      	pop	{r4, r5, r6}
 800dcc0:	4770      	bx	lr
 800dcc2:	bf00      	nop

0800dcc4 <HAL_LTDC_MspInit>:
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 800dcc4:	4770      	bx	lr
 800dcc6:	bf00      	nop

0800dcc8 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 800dcc8:	2800      	cmp	r0, #0
 800dcca:	d06d      	beq.n	800dda8 <HAL_LTDC_Init+0xe0>
{
 800dccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800dcce:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 800dcd2:	4604      	mov	r4, r0
 800dcd4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d060      	beq.n	800dd9e <HAL_LTDC_Init+0xd6>
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800dcdc:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800dcde:	2502      	movs	r5, #2
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800dce0:	68e6      	ldr	r6, [r4, #12]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800dce2:	2100      	movs	r1, #0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800dce4:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800dce8:	6925      	ldr	r5, [r4, #16]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800dcea:	6967      	ldr	r7, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800dcec:	f8d4 c018 	ldr.w	ip, [r4, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800dcf0:	e9d4 3200 	ldrd	r3, r2, [r4]
 800dcf4:	4302      	orrs	r2, r0
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800dcf6:	6998      	ldr	r0, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800dcf8:	4332      	orrs	r2, r6
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800dcfa:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800dcfe:	4e2b      	ldr	r6, [pc, #172]	; (800ddac <HAL_LTDC_Init+0xe4>)
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800dd00:	6198      	str	r0, [r3, #24]
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800dd02:	432a      	orrs	r2, r5
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800dd04:	6998      	ldr	r0, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 800dd06:	2501      	movs	r5, #1
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800dd08:	4302      	orrs	r2, r0
 800dd0a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800dd0c:	689a      	ldr	r2, [r3, #8]
 800dd0e:	4032      	ands	r2, r6
 800dd10:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800dd12:	6898      	ldr	r0, [r3, #8]
 800dd14:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800dd18:	69e7      	ldr	r7, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800dd1a:	ea40 000c 	orr.w	r0, r0, ip
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800dd1e:	f8d4 c020 	ldr.w	ip, [r4, #32]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800dd22:	6098      	str	r0, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800dd24:	68d8      	ldr	r0, [r3, #12]
 800dd26:	4030      	ands	r0, r6
 800dd28:	60d8      	str	r0, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800dd2a:	68da      	ldr	r2, [r3, #12]
 800dd2c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800dd30:	6a67      	ldr	r7, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800dd32:	ea42 020c 	orr.w	r2, r2, ip
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800dd36:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800dd3a:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800dd3c:	691a      	ldr	r2, [r3, #16]
 800dd3e:	4032      	ands	r2, r6
 800dd40:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800dd42:	6918      	ldr	r0, [r3, #16]
 800dd44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
  tmp = (hltdc->Init.TotalWidth << 16U);
 800dd48:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800dd4a:	ea40 000c 	orr.w	r0, r0, ip
 800dd4e:	6118      	str	r0, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800dd50:	6958      	ldr	r0, [r3, #20]
 800dd52:	4006      	ands	r6, r0
 800dd54:	615e      	str	r6, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800dd56:	695a      	ldr	r2, [r3, #20]
 800dd58:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800dd5a:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800dd5e:	4302      	orrs	r2, r0
 800dd60:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800dd62:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800dd64:	f894 7035 	ldrb.w	r7, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800dd68:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800dd6c:	f894 6036 	ldrb.w	r6, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800dd70:	62d8      	str	r0, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800dd72:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800dd74:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 800dd78:	4302      	orrs	r2, r0
  return HAL_OK;
 800dd7a:	4608      	mov	r0, r1
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800dd7c:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 800dd80:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800dd84:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800dd86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dd88:	f042 0206 	orr.w	r2, r2, #6
 800dd8c:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800dd8e:	699a      	ldr	r2, [r3, #24]
 800dd90:	432a      	orrs	r2, r5
 800dd92:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800dd94:	f8c4 10a4 	str.w	r1, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800dd98:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
}
 800dd9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hltdc->Lock = HAL_UNLOCKED;
 800dd9e:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 800dda2:	f7ff ff8f 	bl	800dcc4 <HAL_LTDC_MspInit>
 800dda6:	e799      	b.n	800dcdc <HAL_LTDC_Init+0x14>
    return HAL_ERROR;
 800dda8:	2001      	movs	r0, #1
}
 800ddaa:	4770      	bx	lr
 800ddac:	f000f800 	.word	0xf000f800

0800ddb0 <HAL_LTDC_ErrorCallback>:
 800ddb0:	4770      	bx	lr
 800ddb2:	bf00      	nop

0800ddb4 <HAL_LTDC_LineEventCallback>:
 800ddb4:	4770      	bx	lr
 800ddb6:	bf00      	nop

0800ddb8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800ddb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800ddba:	6803      	ldr	r3, [r0, #0]
{
 800ddbc:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800ddbe:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800ddc0:	6b5e      	ldr	r6, [r3, #52]	; 0x34

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800ddc2:	0769      	lsls	r1, r5, #29
 800ddc4:	d501      	bpl.n	800ddca <HAL_LTDC_IRQHandler+0x12>
 800ddc6:	0772      	lsls	r2, r6, #29
 800ddc8:	d41d      	bmi.n	800de06 <HAL_LTDC_IRQHandler+0x4e>
    HAL_LTDC_ErrorCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800ddca:	07ab      	lsls	r3, r5, #30
 800ddcc:	d501      	bpl.n	800ddd2 <HAL_LTDC_IRQHandler+0x1a>
 800ddce:	07b7      	lsls	r7, r6, #30
 800ddd0:	d42d      	bmi.n	800de2e <HAL_LTDC_IRQHandler+0x76>
    HAL_LTDC_ErrorCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800ddd2:	07e8      	lsls	r0, r5, #31
 800ddd4:	d501      	bpl.n	800ddda <HAL_LTDC_IRQHandler+0x22>
 800ddd6:	07f1      	lsls	r1, r6, #31
 800ddd8:	d440      	bmi.n	800de5c <HAL_LTDC_IRQHandler+0xa4>
    HAL_LTDC_LineEventCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800ddda:	072a      	lsls	r2, r5, #28
 800dddc:	d501      	bpl.n	800dde2 <HAL_LTDC_IRQHandler+0x2a>
 800ddde:	0733      	lsls	r3, r6, #28
 800dde0:	d400      	bmi.n	800dde4 <HAL_LTDC_IRQHandler+0x2c>
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800dde2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800dde4:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800dde6:	2608      	movs	r6, #8
    hltdc->State = HAL_LTDC_STATE_READY;
 800dde8:	2501      	movs	r5, #1
    __HAL_UNLOCK(hltdc);
 800ddea:	2100      	movs	r1, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800ddec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_LTDC_ReloadEventCallback(hltdc);
 800ddee:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800ddf0:	f022 0208 	bic.w	r2, r2, #8
 800ddf4:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800ddf6:	63de      	str	r6, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800ddf8:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800ddfc:	f884 10a0 	strb.w	r1, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 800de00:	f7f3 fdba 	bl	8001978 <HAL_LTDC_ReloadEventCallback>
}
 800de04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800de06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800de08:	2104      	movs	r1, #4
    __HAL_UNLOCK(hltdc);
 800de0a:	2700      	movs	r7, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800de0c:	f022 0204 	bic.w	r2, r2, #4
 800de10:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800de12:	63d9      	str	r1, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800de14:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 800de18:	f880 70a0 	strb.w	r7, [r0, #160]	; 0xa0
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800de1c:	f043 0301 	orr.w	r3, r3, #1
 800de20:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800de24:	f880 10a1 	strb.w	r1, [r0, #161]	; 0xa1
    HAL_LTDC_ErrorCallback(hltdc);
 800de28:	f7ff ffc2 	bl	800ddb0 <HAL_LTDC_ErrorCallback>
 800de2c:	e7cd      	b.n	800ddca <HAL_LTDC_IRQHandler+0x12>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800de2e:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800de30:	2002      	movs	r0, #2
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800de32:	2104      	movs	r1, #4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800de34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800de36:	f022 0202 	bic.w	r2, r2, #2
 800de3a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_UNLOCK(hltdc);
 800de3c:	2200      	movs	r2, #0
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800de3e:	63d8      	str	r0, [r3, #60]	; 0x3c
    HAL_LTDC_ErrorCallback(hltdc);
 800de40:	4620      	mov	r0, r4
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800de42:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 800de46:	f884 20a0 	strb.w	r2, [r4, #160]	; 0xa0
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800de4a:	f043 0302 	orr.w	r3, r3, #2
 800de4e:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800de52:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
    HAL_LTDC_ErrorCallback(hltdc);
 800de56:	f7ff ffab 	bl	800ddb0 <HAL_LTDC_ErrorCallback>
 800de5a:	e7ba      	b.n	800ddd2 <HAL_LTDC_IRQHandler+0x1a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800de5c:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800de5e:	2101      	movs	r1, #1
    __HAL_UNLOCK(hltdc);
 800de60:	2700      	movs	r7, #0
    HAL_LTDC_LineEventCallback(hltdc);
 800de62:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800de64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800de66:	f022 0201 	bic.w	r2, r2, #1
 800de6a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800de6c:	63d9      	str	r1, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800de6e:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800de72:	f884 70a0 	strb.w	r7, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800de76:	f7ff ff9d 	bl	800ddb4 <HAL_LTDC_LineEventCallback>
 800de7a:	e7ae      	b.n	800ddda <HAL_LTDC_IRQHandler+0x22>

0800de7c <HAL_LTDC_ConfigLayer>:
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800de7c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800de80:	2b01      	cmp	r3, #1
 800de82:	f000 80b9 	beq.w	800dff8 <HAL_LTDC_ConfigLayer+0x17c>
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800de86:	ea4f 1cc2 	mov.w	ip, r2, lsl #7
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800de8a:	2302      	movs	r3, #2
{
 800de8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800de90:	f10c 0c84 	add.w	ip, ip, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800de94:	6806      	ldr	r6, [r0, #0]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800de96:	f04f 0834 	mov.w	r8, #52	; 0x34
 800de9a:	460d      	mov	r5, r1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800de9c:	eb06 040c 	add.w	r4, r6, ip
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800dea0:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800dea4:	fb08 0202 	mla	r2, r8, r2, r0
 800dea8:	4689      	mov	r9, r1
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800deaa:	68f1      	ldr	r1, [r6, #12]
 800deac:	4607      	mov	r7, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800deae:	6863      	ldr	r3, [r4, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800deb0:	f102 0838 	add.w	r8, r2, #56	; 0x38
  __HAL_LOCK(hltdc);
 800deb4:	f04f 0201 	mov.w	r2, #1
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800deb8:	f3c1 4a0b 	ubfx	sl, r1, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800debc:	f403 4e70 	and.w	lr, r3, #61440	; 0xf000
  __HAL_LOCK(hltdc);
 800dec0:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800dec4:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800dec8:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 800decc:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800ded0:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 800ded4:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800ded8:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 800dedc:	f8d9 3000 	ldr.w	r3, [r9]
  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800dee0:	4848      	ldr	r0, [pc, #288]	; (800e004 <HAL_LTDC_ConfigLayer+0x188>)
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800dee2:	f8c8 3000 	str.w	r3, [r8]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800dee6:	686b      	ldr	r3, [r5, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800dee8:	f8c4 e004 	str.w	lr, [r4, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800deec:	f8d5 e000 	ldr.w	lr, [r5]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800def0:	449a      	add	sl, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800def2:	68f1      	ldr	r1, [r6, #12]
 800def4:	f10e 0801 	add.w	r8, lr, #1
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800def8:	f8d5 900c 	ldr.w	r9, [r5, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800defc:	f3c1 410b 	ubfx	r1, r1, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800df00:	68aa      	ldr	r2, [r5, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800df02:	4441      	add	r1, r8
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800df04:	f8d5 8010 	ldr.w	r8, [r5, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800df08:	3201      	adds	r2, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800df0a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800df0e:	f8d5 a018 	ldr.w	sl, [r5, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800df12:	6061      	str	r1, [r4, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800df14:	68f1      	ldr	r1, [r6, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800df16:	f8d4 b008 	ldr.w	fp, [r4, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800df1a:	f3c1 010a 	ubfx	r1, r1, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800df1e:	f40b 4b70 	and.w	fp, fp, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800df22:	4449      	add	r1, r9
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800df24:	f8d5 9014 	ldr.w	r9, [r5, #20]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800df28:	f8c4 b008 	str.w	fp, [r4, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800df2c:	f8d6 b00c 	ldr.w	fp, [r6, #12]
 800df30:	f3cb 0b0a 	ubfx	fp, fp, #0, #11
 800df34:	445a      	add	r2, fp
 800df36:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800df3a:	60a2      	str	r2, [r4, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800df3c:	6922      	ldr	r2, [r4, #16]
 800df3e:	f022 0207 	bic.w	r2, r2, #7
 800df42:	6122      	str	r2, [r4, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800df44:	f8c4 8010 	str.w	r8, [r4, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800df48:	69a2      	ldr	r2, [r4, #24]
 800df4a:	2200      	movs	r2, #0
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800df4c:	f895 1031 	ldrb.w	r1, [r5, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800df50:	f895 b032 	ldrb.w	fp, [r5, #50]	; 0x32
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800df54:	61a2      	str	r2, [r4, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800df56:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
 800df5a:	ea42 620a 	orr.w	r2, r2, sl, lsl #24
 800df5e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800df62:	6a29      	ldr	r1, [r5, #32]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800df64:	ea42 4a0b 	orr.w	sl, r2, fp, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800df68:	69ea      	ldr	r2, [r5, #28]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800df6a:	f8c4 a018 	str.w	sl, [r4, #24]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800df6e:	4311      	orrs	r1, r2
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800df70:	6962      	ldr	r2, [r4, #20]
 800df72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800df76:	6162      	str	r2, [r4, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800df78:	f8c4 9014 	str.w	r9, [r4, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800df7c:	69e2      	ldr	r2, [r4, #28]
 800df7e:	4010      	ands	r0, r2
 800df80:	61e0      	str	r0, [r4, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800df82:	61e1      	str	r1, [r4, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800df84:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800df86:	2200      	movs	r2, #0
 800df88:	62a2      	str	r2, [r4, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800df8a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800df8c:	62a2      	str	r2, [r4, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800df8e:	f1b8 0f00 	cmp.w	r8, #0
 800df92:	d00b      	beq.n	800dfac <HAL_LTDC_ConfigLayer+0x130>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800df94:	f1b8 0f01 	cmp.w	r8, #1
 800df98:	d030      	beq.n	800dffc <HAL_LTDC_ConfigLayer+0x180>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800df9a:	f1a8 0202 	sub.w	r2, r8, #2
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800df9e:	2a02      	cmp	r2, #2
 800dfa0:	d902      	bls.n	800dfa8 <HAL_LTDC_ConfigLayer+0x12c>
 800dfa2:	f1b8 0f07 	cmp.w	r8, #7
 800dfa6:	d12b      	bne.n	800e000 <HAL_LTDC_ConfigLayer+0x184>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 800dfa8:	2202      	movs	r2, #2
 800dfaa:	e000      	b.n	800dfae <HAL_LTDC_ConfigLayer+0x132>
    tmp = 4U;
 800dfac:	2204      	movs	r2, #4
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800dfae:	eba3 030e 	sub.w	r3, r3, lr
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800dfb2:	e9d5 1e0a 	ldrd	r1, lr, [r5, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800dfb6:	fb02 f303 	mul.w	r3, r2, r3
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800dfba:	2501      	movs	r5, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800dfbc:	fb01 f202 	mul.w	r2, r1, r2
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800dfc0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800dfc2:	3307      	adds	r3, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800dfc4:	f001 21e0 	and.w	r1, r1, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800dfc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800dfcc:	4a0e      	ldr	r2, [pc, #56]	; (800e008 <HAL_LTDC_ConfigLayer+0x18c>)
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800dfce:	62e1      	str	r1, [r4, #44]	; 0x2c
  __HAL_UNLOCK(hltdc);
 800dfd0:	2100      	movs	r1, #0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800dfd2:	62e3      	str	r3, [r4, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800dfd4:	6b23      	ldr	r3, [r4, #48]	; 0x30
  return HAL_OK;
 800dfd6:	4608      	mov	r0, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800dfd8:	401a      	ands	r2, r3
 800dfda:	6322      	str	r2, [r4, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800dfdc:	f8c4 e030 	str.w	lr, [r4, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800dfe0:	f856 300c 	ldr.w	r3, [r6, ip]
 800dfe4:	432b      	orrs	r3, r5
 800dfe6:	f846 300c 	str.w	r3, [r6, ip]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800dfea:	6275      	str	r5, [r6, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800dfec:	f887 50a1 	strb.w	r5, [r7, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800dff0:	f887 10a0 	strb.w	r1, [r7, #160]	; 0xa0
}
 800dff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(hltdc);
 800dff8:	2002      	movs	r0, #2
}
 800dffa:	4770      	bx	lr
    tmp = 3U;
 800dffc:	2203      	movs	r2, #3
 800dffe:	e7d6      	b.n	800dfae <HAL_LTDC_ConfigLayer+0x132>
    tmp = 1U;
 800e000:	2201      	movs	r2, #1
 800e002:	e7d4      	b.n	800dfae <HAL_LTDC_ConfigLayer+0x132>
 800e004:	fffff8f8 	.word	0xfffff8f8
 800e008:	fffff800 	.word	0xfffff800

0800e00c <HAL_LTDC_Reload>:
  __HAL_LOCK(hltdc);
 800e00c:	f890 20a0 	ldrb.w	r2, [r0, #160]	; 0xa0
 800e010:	2a01      	cmp	r2, #1
 800e012:	d013      	beq.n	800e03c <HAL_LTDC_Reload+0x30>
 800e014:	4603      	mov	r3, r0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800e016:	2002      	movs	r0, #2
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 800e018:	681a      	ldr	r2, [r3, #0]
{
 800e01a:	b470      	push	{r4, r5, r6}
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800e01c:	f883 00a1 	strb.w	r0, [r3, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800e020:	2500      	movs	r5, #0
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 800e022:	6b54      	ldr	r4, [r2, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 800e024:	2601      	movs	r6, #1
  return HAL_OK;
 800e026:	4628      	mov	r0, r5
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 800e028:	f044 0408 	orr.w	r4, r4, #8
 800e02c:	6354      	str	r4, [r2, #52]	; 0x34
  hltdc->Instance->SRCR = ReloadType;
 800e02e:	6251      	str	r1, [r2, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800e030:	f883 60a1 	strb.w	r6, [r3, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800e034:	f883 50a0 	strb.w	r5, [r3, #160]	; 0xa0
}
 800e038:	bc70      	pop	{r4, r5, r6}
 800e03a:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 800e03c:	2002      	movs	r0, #2
}
 800e03e:	4770      	bx	lr

0800e040 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800e040:	b538      	push	{r3, r4, r5, lr}
 800e042:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800e044:	f7fc fadc 	bl	800a600 <HAL_GetTick>

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800e048:	2c00      	cmp	r4, #0
 800e04a:	d05a      	beq.n	800e102 <HAL_MDMA_Init+0xc2>

  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800e04c:	2202      	movs	r2, #2

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800e04e:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hmdma);
 800e050:	2100      	movs	r1, #0
 800e052:	4605      	mov	r5, r0
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800e054:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_MDMA_DISABLE(hmdma);
 800e058:	68da      	ldr	r2, [r3, #12]
  __HAL_UNLOCK(hmdma);
 800e05a:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  __HAL_MDMA_DISABLE(hmdma);
 800e05e:	f022 0201 	bic.w	r2, r2, #1
 800e062:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800e064:	e005      	b.n	800e072 <HAL_MDMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800e066:	f7fc facb 	bl	800a600 <HAL_GetTick>
 800e06a:	1b40      	subs	r0, r0, r5
 800e06c:	2805      	cmp	r0, #5
 800e06e:	d841      	bhi.n	800e0f4 <HAL_MDMA_Init+0xb4>
 800e070:	6823      	ldr	r3, [r4, #0]
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800e072:	68da      	ldr	r2, [r3, #12]
 800e074:	07d2      	lsls	r2, r2, #31
 800e076:	d4f6      	bmi.n	800e066 <HAL_MDMA_Init+0x26>
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800e078:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
 800e07c:	69e1      	ldr	r1, [r4, #28]
 800e07e:	4302      	orrs	r2, r0
 800e080:	e9d4 5008 	ldrd	r5, r0, [r4, #32]
 800e084:	430a      	orrs	r2, r1
 800e086:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800e088:	432a      	orrs	r2, r5
 800e08a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800e08c:	4302      	orrs	r2, r0
 800e08e:	68a0      	ldr	r0, [r4, #8]
 800e090:	430a      	orrs	r2, r1
 800e092:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800e094:	432a      	orrs	r2, r5
 800e096:	1e4d      	subs	r5, r1, #1
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800e098:	68e1      	ldr	r1, [r4, #12]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800e09a:	4302      	orrs	r2, r0
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800e09c:	6920      	ldr	r0, [r4, #16]
 800e09e:	4308      	orrs	r0, r1
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800e0a0:	6861      	ldr	r1, [r4, #4]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800e0a2:	ea42 4285 	orr.w	r2, r2, r5, lsl #18
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800e0a6:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800e0aa:	60d8      	str	r0, [r3, #12]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800e0ac:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800e0ae:	d103      	bne.n	800e0b8 <HAL_MDMA_Init+0x78>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800e0b0:	691a      	ldr	r2, [r3, #16]
 800e0b2:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 800e0b6:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800e0b8:	2000      	movs	r0, #0

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800e0ba:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800e0bc:	4282      	cmp	r2, r0
  hmdma->Instance->CBNDTR = 0;
 800e0be:	6158      	str	r0, [r3, #20]
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800e0c0:	db2e      	blt.n	800e120 <HAL_MDMA_Init+0xe0>
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800e0c2:	b292      	uxth	r2, r2
 800e0c4:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800e0c6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800e0c8:	2a00      	cmp	r2, #0
 800e0ca:	db1f      	blt.n	800e10c <HAL_MDMA_Init+0xcc>
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800e0cc:	6a18      	ldr	r0, [r3, #32]
 800e0ce:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 800e0d2:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800e0d4:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 800e0d8:	d015      	beq.n	800e106 <HAL_MDMA_Init+0xc6>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800e0da:	b2c9      	uxtb	r1, r1
 800e0dc:	6299      	str	r1, [r3, #40]	; 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800e0de:	2200      	movs	r2, #0
  hmdma->State = HAL_MDMA_STATE_READY;
 800e0e0:	2101      	movs	r1, #1
  hmdma->Instance->CLAR =  0;
 800e0e2:	625a      	str	r2, [r3, #36]	; 0x24
  return HAL_OK;
 800e0e4:	4610      	mov	r0, r2
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800e0e6:	66a2      	str	r2, [r4, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
 800e0e8:	6662      	str	r2, [r4, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 800e0ea:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 800e0ee:	e9c4 2217 	strd	r2, r2, [r4, #92]	; 0x5c
}
 800e0f2:	bd38      	pop	{r3, r4, r5, pc}
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800e0f4:	2240      	movs	r2, #64	; 0x40
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800e0f6:	2303      	movs	r3, #3
      return HAL_ERROR;
 800e0f8:	2001      	movs	r0, #1
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800e0fa:	66a2      	str	r2, [r4, #104]	; 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800e0fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800e100:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800e102:	2001      	movs	r0, #1
}
 800e104:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CTBR = 0;
 800e106:	2200      	movs	r2, #0
 800e108:	629a      	str	r2, [r3, #40]	; 0x28
 800e10a:	e7e8      	b.n	800e0de <HAL_MDMA_Init+0x9e>
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800e10c:	6958      	ldr	r0, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800e10e:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800e110:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
 800e114:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800e116:	6a18      	ldr	r0, [r3, #32]
 800e118:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 800e11c:	621a      	str	r2, [r3, #32]
 800e11e:	e7d9      	b.n	800e0d4 <HAL_MDMA_Init+0x94>
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800e120:	6958      	ldr	r0, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800e122:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800e124:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800e128:	b292      	uxth	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800e12a:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800e12c:	621a      	str	r2, [r3, #32]
 800e12e:	e7ca      	b.n	800e0c6 <HAL_MDMA_Init+0x86>

0800e130 <HAL_MDMA_Start_IT>:
  if(hmdma == NULL)
 800e130:	2800      	cmp	r0, #0
 800e132:	d06b      	beq.n	800e20c <HAL_MDMA_Start_IT+0xdc>
{
 800e134:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hmdma);
 800e136:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 800e13a:	2c01      	cmp	r4, #1
 800e13c:	d06f      	beq.n	800e21e <HAL_MDMA_Start_IT+0xee>
 800e13e:	2501      	movs	r5, #1
  if(HAL_MDMA_STATE_READY == hmdma->State)
 800e140:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800e144:	42ac      	cmp	r4, r5
  __HAL_LOCK(hmdma);
 800e146:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 800e14a:	d006      	beq.n	800e15a <HAL_MDMA_Start_IT+0x2a>
    __HAL_UNLOCK(hmdma);
 800e14c:	2200      	movs	r2, #0
    return HAL_BUSY;
 800e14e:	2302      	movs	r3, #2
    __HAL_UNLOCK(hmdma);
 800e150:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 800e154:	4618      	mov	r0, r3
 800e156:	bcf0      	pop	{r4, r5, r6, r7}
 800e158:	4770      	bx	lr
    __HAL_MDMA_DISABLE(hmdma);
 800e15a:	6804      	ldr	r4, [r0, #0]
    hmdma->State = HAL_MDMA_STATE_BUSY;
 800e15c:	2502      	movs	r5, #2
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800e15e:	2600      	movs	r6, #0
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800e160:	f3c3 0310 	ubfx	r3, r3, #0, #17
    hmdma->State = HAL_MDMA_STATE_BUSY;
 800e164:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 800e168:	f04f 0c1f 	mov.w	ip, #31
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800e16c:	6686      	str	r6, [r0, #104]	; 0x68
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800e16e:	f5a6 3600 	sub.w	r6, r6, #131072	; 0x20000
    __HAL_MDMA_DISABLE(hmdma);
 800e172:	68e7      	ldr	r7, [r4, #12]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800e174:	f011 4f5f 	tst.w	r1, #3741319168	; 0xdf000000
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800e178:	9d04      	ldr	r5, [sp, #16]
    __HAL_MDMA_DISABLE(hmdma);
 800e17a:	f027 0701 	bic.w	r7, r7, #1
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800e17e:	f105 35ff 	add.w	r5, r5, #4294967295
    __HAL_MDMA_DISABLE(hmdma);
 800e182:	60e7      	str	r7, [r4, #12]
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800e184:	6967      	ldr	r7, [r4, #20]
 800e186:	ea06 0607 	and.w	r6, r6, r7
 800e18a:	ea43 0306 	orr.w	r3, r3, r6
 800e18e:	6163      	str	r3, [r4, #20]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800e190:	6963      	ldr	r3, [r4, #20]
 800e192:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e196:	ea43 5505 	orr.w	r5, r3, r5, lsl #20
 800e19a:	6165      	str	r5, [r4, #20]
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 800e19c:	f8c4 c004 	str.w	ip, [r4, #4]
  hmdma->Instance->CDAR = DstAddress;
 800e1a0:	61e2      	str	r2, [r4, #28]
  hmdma->Instance->CSAR = SrcAddress;
 800e1a2:	61a1      	str	r1, [r4, #24]
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 800e1a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e1a6:	bf0c      	ite	eq
 800e1a8:	f443 3380 	orreq.w	r3, r3, #65536	; 0x10000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800e1ac:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800e1b0:	f012 4f5f 	tst.w	r2, #3741319168	; 0xdf000000
    if(hmdma->XferBlockCpltCallback != NULL)
 800e1b4:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800e1b6:	62a3      	str	r3, [r4, #40]	; 0x28
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 800e1b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e1ba:	bf0c      	ite	eq
 800e1bc:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 800e1c0:	f423 3300 	bicne.w	r3, r3, #131072	; 0x20000
 800e1c4:	62a3      	str	r3, [r4, #40]	; 0x28
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 800e1c6:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800e1c8:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 800e1ca:	68e3      	ldr	r3, [r4, #12]
 800e1cc:	f043 0306 	orr.w	r3, r3, #6
 800e1d0:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
 800e1d2:	b11a      	cbz	r2, 800e1dc <HAL_MDMA_Start_IT+0xac>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 800e1d4:	68e3      	ldr	r3, [r4, #12]
 800e1d6:	f043 0310 	orr.w	r3, r3, #16
 800e1da:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800e1dc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800e1de:	b11b      	cbz	r3, 800e1e8 <HAL_MDMA_Start_IT+0xb8>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 800e1e0:	68e3      	ldr	r3, [r4, #12]
 800e1e2:	f043 0308 	orr.w	r3, r3, #8
 800e1e6:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
 800e1e8:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800e1ea:	b11b      	cbz	r3, 800e1f4 <HAL_MDMA_Start_IT+0xc4>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 800e1ec:	68e3      	ldr	r3, [r4, #12]
 800e1ee:	f043 0320 	orr.w	r3, r3, #32
 800e1f2:	60e3      	str	r3, [r4, #12]
    __HAL_MDMA_ENABLE(hmdma);
 800e1f4:	68e3      	ldr	r3, [r4, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800e1f6:	6842      	ldr	r2, [r0, #4]
    __HAL_MDMA_ENABLE(hmdma);
 800e1f8:	f043 0301 	orr.w	r3, r3, #1
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800e1fc:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
    __HAL_MDMA_ENABLE(hmdma);
 800e200:	60e3      	str	r3, [r4, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800e202:	d006      	beq.n	800e212 <HAL_MDMA_Start_IT+0xe2>
  return HAL_OK;
 800e204:	2300      	movs	r3, #0
}
 800e206:	bcf0      	pop	{r4, r5, r6, r7}
 800e208:	4618      	mov	r0, r3
 800e20a:	4770      	bx	lr
    return HAL_ERROR;
 800e20c:	2301      	movs	r3, #1
}
 800e20e:	4618      	mov	r0, r3
 800e210:	4770      	bx	lr
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 800e212:	68e2      	ldr	r2, [r4, #12]
  return HAL_OK;
 800e214:	2300      	movs	r3, #0
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 800e216:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800e21a:	60e2      	str	r2, [r4, #12]
 800e21c:	e79a      	b.n	800e154 <HAL_MDMA_Start_IT+0x24>
  __HAL_LOCK(hmdma);
 800e21e:	2302      	movs	r3, #2
}
 800e220:	bcf0      	pop	{r4, r5, r6, r7}
 800e222:	4618      	mov	r0, r3
 800e224:	4770      	bx	lr
 800e226:	bf00      	nop

0800e228 <HAL_MDMA_IRQHandler>:
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800e228:	4a5c      	ldr	r2, [pc, #368]	; (800e39c <HAL_MDMA_IRQHandler+0x174>)
 800e22a:	2101      	movs	r1, #1
 800e22c:	6803      	ldr	r3, [r0, #0]
 800e22e:	441a      	add	r2, r3
{
 800e230:	b570      	push	{r4, r5, r6, lr}
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800e232:	f3c2 1284 	ubfx	r2, r2, #6, #5
{
 800e236:	b082      	sub	sp, #8
  __IO uint32_t count = 0;
 800e238:	2500      	movs	r5, #0
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800e23a:	f04f 44a4 	mov.w	r4, #1375731712	; 0x52000000
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800e23e:	fa01 f202 	lsl.w	r2, r1, r2
  __IO uint32_t count = 0;
 800e242:	9501      	str	r5, [sp, #4]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800e244:	6824      	ldr	r4, [r4, #0]
 800e246:	4222      	tst	r2, r4
 800e248:	f000 808c 	beq.w	800e364 <HAL_MDMA_IRQHandler+0x13c>
  uint32_t timeout = SystemCoreClock / 9600U;
 800e24c:	4954      	ldr	r1, [pc, #336]	; (800e3a0 <HAL_MDMA_IRQHandler+0x178>)
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800e24e:	681a      	ldr	r2, [r3, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800e250:	680d      	ldr	r5, [r1, #0]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800e252:	07d1      	lsls	r1, r2, #31
 800e254:	d529      	bpl.n	800e2aa <HAL_MDMA_IRQHandler+0x82>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800e256:	68da      	ldr	r2, [r3, #12]
 800e258:	0792      	lsls	r2, r2, #30
 800e25a:	d526      	bpl.n	800e2aa <HAL_MDMA_IRQHandler+0x82>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800e25c:	68da      	ldr	r2, [r3, #12]
 800e25e:	f022 0202 	bic.w	r2, r2, #2
 800e262:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
 800e264:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800e266:	6e81      	ldr	r1, [r0, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
 800e268:	0616      	lsls	r6, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800e26a:	bf54      	ite	pl
 800e26c:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800e270:	f041 0102 	orrmi.w	r1, r1, #2
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800e274:	0594      	lsls	r4, r2, #22
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800e276:	6681      	str	r1, [r0, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800e278:	d503      	bpl.n	800e282 <HAL_MDMA_IRQHandler+0x5a>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800e27a:	6e81      	ldr	r1, [r0, #104]	; 0x68
 800e27c:	f041 0104 	orr.w	r1, r1, #4
 800e280:	6681      	str	r1, [r0, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800e282:	05d1      	lsls	r1, r2, #23
 800e284:	d503      	bpl.n	800e28e <HAL_MDMA_IRQHandler+0x66>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800e286:	6e81      	ldr	r1, [r0, #104]	; 0x68
 800e288:	f041 0108 	orr.w	r1, r1, #8
 800e28c:	6681      	str	r1, [r0, #104]	; 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800e28e:	0556      	lsls	r6, r2, #21
 800e290:	d503      	bpl.n	800e29a <HAL_MDMA_IRQHandler+0x72>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800e292:	6e81      	ldr	r1, [r0, #104]	; 0x68
 800e294:	f041 0110 	orr.w	r1, r1, #16
 800e298:	6681      	str	r1, [r0, #104]	; 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
 800e29a:	0514      	lsls	r4, r2, #20
 800e29c:	d503      	bpl.n	800e2a6 <HAL_MDMA_IRQHandler+0x7e>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800e29e:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800e2a0:	f042 0220 	orr.w	r2, r2, #32
 800e2a4:	6682      	str	r2, [r0, #104]	; 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800e2a6:	2201      	movs	r2, #1
 800e2a8:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800e2aa:	681a      	ldr	r2, [r3, #0]
 800e2ac:	4604      	mov	r4, r0
 800e2ae:	06d0      	lsls	r0, r2, #27
 800e2b0:	d509      	bpl.n	800e2c6 <HAL_MDMA_IRQHandler+0x9e>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800e2b2:	68da      	ldr	r2, [r3, #12]
 800e2b4:	0691      	lsls	r1, r2, #26
 800e2b6:	d506      	bpl.n	800e2c6 <HAL_MDMA_IRQHandler+0x9e>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800e2b8:	2110      	movs	r1, #16
      if(hmdma->XferBufferCpltCallback != NULL)
 800e2ba:	6ca2      	ldr	r2, [r4, #72]	; 0x48
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800e2bc:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
 800e2be:	b112      	cbz	r2, 800e2c6 <HAL_MDMA_IRQHandler+0x9e>
        hmdma->XferBufferCpltCallback(hmdma);
 800e2c0:	4620      	mov	r0, r4
 800e2c2:	4790      	blx	r2
 800e2c4:	6823      	ldr	r3, [r4, #0]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800e2c6:	681a      	ldr	r2, [r3, #0]
 800e2c8:	0712      	lsls	r2, r2, #28
 800e2ca:	d509      	bpl.n	800e2e0 <HAL_MDMA_IRQHandler+0xb8>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 800e2cc:	68da      	ldr	r2, [r3, #12]
 800e2ce:	06d6      	lsls	r6, r2, #27
 800e2d0:	d506      	bpl.n	800e2e0 <HAL_MDMA_IRQHandler+0xb8>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800e2d2:	2108      	movs	r1, #8
      if(hmdma->XferBlockCpltCallback != NULL)
 800e2d4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800e2d6:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
 800e2d8:	b112      	cbz	r2, 800e2e0 <HAL_MDMA_IRQHandler+0xb8>
        hmdma->XferBlockCpltCallback(hmdma);
 800e2da:	4620      	mov	r0, r4
 800e2dc:	4790      	blx	r2
 800e2de:	6823      	ldr	r3, [r4, #0]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800e2e0:	681a      	ldr	r2, [r3, #0]
 800e2e2:	0750      	lsls	r0, r2, #29
 800e2e4:	d509      	bpl.n	800e2fa <HAL_MDMA_IRQHandler+0xd2>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800e2e6:	68da      	ldr	r2, [r3, #12]
 800e2e8:	0711      	lsls	r1, r2, #28
 800e2ea:	d506      	bpl.n	800e2fa <HAL_MDMA_IRQHandler+0xd2>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800e2ec:	2104      	movs	r1, #4
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800e2ee:	6d22      	ldr	r2, [r4, #80]	; 0x50
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800e2f0:	6059      	str	r1, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800e2f2:	b112      	cbz	r2, 800e2fa <HAL_MDMA_IRQHandler+0xd2>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800e2f4:	4620      	mov	r0, r4
 800e2f6:	4790      	blx	r2
 800e2f8:	6823      	ldr	r3, [r4, #0]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800e2fa:	681a      	ldr	r2, [r3, #0]
 800e2fc:	0792      	lsls	r2, r2, #30
 800e2fe:	d433      	bmi.n	800e368 <HAL_MDMA_IRQHandler+0x140>
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800e300:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800e302:	2b00      	cmp	r3, #0
 800e304:	d02e      	beq.n	800e364 <HAL_MDMA_IRQHandler+0x13c>
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800e306:	2304      	movs	r3, #4
    __HAL_MDMA_DISABLE(hmdma);
 800e308:	6821      	ldr	r1, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800e30a:	4a26      	ldr	r2, [pc, #152]	; (800e3a4 <HAL_MDMA_IRQHandler+0x17c>)
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800e30c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  uint32_t timeout = SystemCoreClock / 9600U;
 800e310:	fba2 3205 	umull	r3, r2, r2, r5
    __HAL_MDMA_DISABLE(hmdma);
 800e314:	68cb      	ldr	r3, [r1, #12]
 800e316:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 800e31a:	0a92      	lsrs	r2, r2, #10
    __HAL_MDMA_DISABLE(hmdma);
 800e31c:	60cb      	str	r3, [r1, #12]
 800e31e:	e002      	b.n	800e326 <HAL_MDMA_IRQHandler+0xfe>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800e320:	68cb      	ldr	r3, [r1, #12]
 800e322:	07d8      	lsls	r0, r3, #31
 800e324:	d504      	bpl.n	800e330 <HAL_MDMA_IRQHandler+0x108>
      if (++count > timeout)
 800e326:	9b01      	ldr	r3, [sp, #4]
 800e328:	3301      	adds	r3, #1
 800e32a:	4293      	cmp	r3, r2
 800e32c:	9301      	str	r3, [sp, #4]
 800e32e:	d9f7      	bls.n	800e320 <HAL_MDMA_IRQHandler+0xf8>
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800e330:	68cb      	ldr	r3, [r1, #12]
    __HAL_UNLOCK(hmdma);
 800e332:	2200      	movs	r2, #0
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800e334:	07db      	lsls	r3, r3, #31
    __HAL_UNLOCK(hmdma);
 800e336:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800e33a:	bf4c      	ite	mi
 800e33c:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
 800e33e:	2301      	movpl	r3, #1
 800e340:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    if (hmdma->XferErrorCallback != NULL)
 800e344:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800e346:	b16b      	cbz	r3, 800e364 <HAL_MDMA_IRQHandler+0x13c>
      hmdma->XferErrorCallback(hmdma);
 800e348:	4620      	mov	r0, r4
}
 800e34a:	b002      	add	sp, #8
 800e34c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      hmdma->XferErrorCallback(hmdma);
 800e350:	4718      	bx	r3
        __HAL_UNLOCK(hmdma);
 800e352:	2100      	movs	r1, #0
        hmdma->State = HAL_MDMA_STATE_READY;
 800e354:	2201      	movs	r2, #1
        if(hmdma->XferAbortCallback != NULL)
 800e356:	6da3      	ldr	r3, [r4, #88]	; 0x58
        __HAL_UNLOCK(hmdma);
 800e358:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
 800e35c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        if(hmdma->XferAbortCallback != NULL)
 800e360:	2b00      	cmp	r3, #0
 800e362:	d1f1      	bne.n	800e348 <HAL_MDMA_IRQHandler+0x120>
}
 800e364:	b002      	add	sp, #8
 800e366:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 800e368:	68da      	ldr	r2, [r3, #12]
 800e36a:	0756      	lsls	r6, r2, #29
 800e36c:	d5c8      	bpl.n	800e300 <HAL_MDMA_IRQHandler+0xd8>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800e36e:	68da      	ldr	r2, [r3, #12]
 800e370:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 800e374:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800e376:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800e37a:	2a04      	cmp	r2, #4
 800e37c:	d0e9      	beq.n	800e352 <HAL_MDMA_IRQHandler+0x12a>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800e37e:	2602      	movs	r6, #2
      __HAL_UNLOCK(hmdma);
 800e380:	2000      	movs	r0, #0
      hmdma->State = HAL_MDMA_STATE_READY;
 800e382:	2101      	movs	r1, #1
      if(hmdma->XferCpltCallback != NULL)
 800e384:	6c62      	ldr	r2, [r4, #68]	; 0x44
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800e386:	605e      	str	r6, [r3, #4]
      __HAL_UNLOCK(hmdma);
 800e388:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
 800e38c:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      if(hmdma->XferCpltCallback != NULL)
 800e390:	2a00      	cmp	r2, #0
 800e392:	d0b5      	beq.n	800e300 <HAL_MDMA_IRQHandler+0xd8>
        hmdma->XferCpltCallback(hmdma);
 800e394:	4620      	mov	r0, r4
 800e396:	4790      	blx	r2
 800e398:	e7b2      	b.n	800e300 <HAL_MDMA_IRQHandler+0xd8>
 800e39a:	bf00      	nop
 800e39c:	adffffc0 	.word	0xadffffc0
 800e3a0:	240024cc 	.word	0x240024cc
 800e3a4:	1b4e81b5 	.word	0x1b4e81b5

0800e3a8 <HAL_PWREx_ConfigSupply>:

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800e3a8:	4a1e      	ldr	r2, [pc, #120]	; (800e424 <HAL_PWREx_ConfigSupply+0x7c>)
 800e3aa:	68d3      	ldr	r3, [r2, #12]
 800e3ac:	f003 0307 	and.w	r3, r3, #7
 800e3b0:	2b06      	cmp	r3, #6
 800e3b2:	d006      	beq.n	800e3c2 <HAL_PWREx_ConfigSupply+0x1a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800e3b4:	68d3      	ldr	r3, [r2, #12]
 800e3b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800e3ba:	1a18      	subs	r0, r3, r0
 800e3bc:	bf18      	it	ne
 800e3be:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800e3c0:	4770      	bx	lr
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800e3c2:	68d3      	ldr	r3, [r2, #12]
 800e3c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800e3c8:	4303      	orrs	r3, r0
{
 800e3ca:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800e3cc:	60d3      	str	r3, [r2, #12]
 800e3ce:	4604      	mov	r4, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800e3d0:	4615      	mov	r5, r2
  tickstart = HAL_GetTick ();
 800e3d2:	f7fc f915 	bl	800a600 <HAL_GetTick>
 800e3d6:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800e3d8:	e005      	b.n	800e3e6 <HAL_PWREx_ConfigSupply+0x3e>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800e3da:	f7fc f911 	bl	800a600 <HAL_GetTick>
 800e3de:	1b80      	subs	r0, r0, r6
 800e3e0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800e3e4:	d81b      	bhi.n	800e41e <HAL_PWREx_ConfigSupply+0x76>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800e3e6:	686b      	ldr	r3, [r5, #4]
 800e3e8:	049a      	lsls	r2, r3, #18
 800e3ea:	d5f6      	bpl.n	800e3da <HAL_PWREx_ConfigSupply+0x32>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800e3ec:	f1a4 031d 	sub.w	r3, r4, #29
 800e3f0:	2b01      	cmp	r3, #1
 800e3f2:	d905      	bls.n	800e400 <HAL_PWREx_ConfigSupply+0x58>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 800e3f4:	f1a4 002d 	sub.w	r0, r4, #45	; 0x2d
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800e3f8:	2801      	cmp	r0, #1
 800e3fa:	d901      	bls.n	800e400 <HAL_PWREx_ConfigSupply+0x58>
  return HAL_OK;
 800e3fc:	2000      	movs	r0, #0
}
 800e3fe:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick ();
 800e400:	f7fc f8fe 	bl	800a600 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800e404:	4c07      	ldr	r4, [pc, #28]	; (800e424 <HAL_PWREx_ConfigSupply+0x7c>)
    tickstart = HAL_GetTick ();
 800e406:	4605      	mov	r5, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800e408:	e005      	b.n	800e416 <HAL_PWREx_ConfigSupply+0x6e>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800e40a:	f7fc f8f9 	bl	800a600 <HAL_GetTick>
 800e40e:	1b40      	subs	r0, r0, r5
 800e410:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800e414:	d803      	bhi.n	800e41e <HAL_PWREx_ConfigSupply+0x76>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800e416:	68e3      	ldr	r3, [r4, #12]
 800e418:	03db      	lsls	r3, r3, #15
 800e41a:	d5f6      	bpl.n	800e40a <HAL_PWREx_ConfigSupply+0x62>
 800e41c:	e7ee      	b.n	800e3fc <HAL_PWREx_ConfigSupply+0x54>
      return HAL_ERROR;
 800e41e:	2001      	movs	r0, #1
}
 800e420:	bd70      	pop	{r4, r5, r6, pc}
 800e422:	bf00      	nop
 800e424:	58024800 	.word	0x58024800

0800e428 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800e428:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800e42c:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800e42e:	b114      	cbz	r4, 800e436 <QSPI_Config+0xe>
 800e430:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 800e434:	d15a      	bne.n	800e4ec <QSPI_Config+0xc4>
 800e436:	f101 0318 	add.w	r3, r1, #24
 800e43a:	e893 1208 	ldmia.w	r3, {r3, r9, ip}
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800e43e:	b37b      	cbz	r3, 800e4a0 <QSPI_Config+0x78>
 800e440:	431c      	orrs	r4, r3
 800e442:	694e      	ldr	r6, [r1, #20]
 800e444:	6805      	ldr	r5, [r0, #0]
 800e446:	ea44 0302 	orr.w	r3, r4, r2
 800e44a:	04b6      	lsls	r6, r6, #18
 800e44c:	6808      	ldr	r0, [r1, #0]
 800e44e:	6b4f      	ldr	r7, [r1, #52]	; 0x34
 800e450:	e9d1 840b 	ldrd	r8, r4, [r1, #44]	; 0x2c
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800e454:	f1bc 0f00 	cmp.w	ip, #0
 800e458:	d06b      	beq.n	800e532 <QSPI_Config+0x10a>
 800e45a:	ea4c 0c03 	orr.w	ip, ip, r3
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800e45e:	688b      	ldr	r3, [r1, #8]
 800e460:	f8d1 e010 	ldr.w	lr, [r1, #16]
 800e464:	61eb      	str	r3, [r5, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800e466:	f1b9 0f00 	cmp.w	r9, #0
 800e46a:	f000 8088 	beq.w	800e57e <QSPI_Config+0x156>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e46e:	ea49 0000 	orr.w	r0, r9, r0
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800e472:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e476:	ea40 0008 	orr.w	r0, r0, r8
 800e47a:	ea40 0004 	orr.w	r0, r0, r4
 800e47e:	ea40 0007 	orr.w	r0, r0, r7
 800e482:	ea4e 0300 	orr.w	r3, lr, r0
 800e486:	68c8      	ldr	r0, [r1, #12]
 800e488:	ea43 0300 	orr.w	r3, r3, r0
 800e48c:	ea43 0306 	orr.w	r3, r3, r6
 800e490:	ea43 030c 	orr.w	r3, r3, ip
 800e494:	616b      	str	r3, [r5, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800e496:	d001      	beq.n	800e49c <QSPI_Config+0x74>
                                         cmd->InstructionMode | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800e498:	684b      	ldr	r3, [r1, #4]
 800e49a:	61ab      	str	r3, [r5, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800e49c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800e4a0:	f1bc 0f00 	cmp.w	ip, #0
 800e4a4:	d027      	beq.n	800e4f6 <QSPI_Config+0xce>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800e4a6:	6805      	ldr	r5, [r0, #0]
 800e4a8:	ea44 040c 	orr.w	r4, r4, ip
 800e4ac:	6888      	ldr	r0, [r1, #8]
 800e4ae:	694f      	ldr	r7, [r1, #20]
 800e4b0:	4314      	orrs	r4, r2
 800e4b2:	61e8      	str	r0, [r5, #28]
 800e4b4:	04bf      	lsls	r7, r7, #18
 800e4b6:	6908      	ldr	r0, [r1, #16]
 800e4b8:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 800e4ba:	e9d1 3e0b 	ldrd	r3, lr, [r1, #44]	; 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800e4be:	f1b9 0f00 	cmp.w	r9, #0
 800e4c2:	d071      	beq.n	800e5a8 <QSPI_Config+0x180>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e4c4:	ea40 0009 	orr.w	r0, r0, r9
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800e4c8:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e4cc:	ea43 0300 	orr.w	r3, r3, r0
 800e4d0:	68c8      	ldr	r0, [r1, #12]
 800e4d2:	ea43 030e 	orr.w	r3, r3, lr
 800e4d6:	ea43 0306 	orr.w	r3, r3, r6
 800e4da:	ea43 0300 	orr.w	r3, r3, r0
 800e4de:	ea43 0307 	orr.w	r3, r3, r7
 800e4e2:	ea44 0403 	orr.w	r4, r4, r3
 800e4e6:	616c      	str	r4, [r5, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800e4e8:	d1d6      	bne.n	800e498 <QSPI_Config+0x70>
 800e4ea:	e7d7      	b.n	800e49c <QSPI_Config+0x74>
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800e4ec:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800e4ee:	6805      	ldr	r5, [r0, #0]
 800e4f0:	3b01      	subs	r3, #1
 800e4f2:	612b      	str	r3, [r5, #16]
 800e4f4:	e79f      	b.n	800e436 <QSPI_Config+0xe>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800e4f6:	f1b9 0f00 	cmp.w	r9, #0
 800e4fa:	d031      	beq.n	800e560 <QSPI_Config+0x138>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e4fc:	ea44 0309 	orr.w	r3, r4, r9
 800e500:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 800e502:	6b0d      	ldr	r5, [r1, #48]	; 0x30
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800e504:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e508:	ea43 0302 	orr.w	r3, r3, r2
 800e50c:	6800      	ldr	r0, [r0, #0]
 800e50e:	ea43 0304 	orr.w	r3, r3, r4
 800e512:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 800e514:	ea43 0305 	orr.w	r3, r3, r5
 800e518:	68cd      	ldr	r5, [r1, #12]
 800e51a:	ea43 0304 	orr.w	r3, r3, r4
 800e51e:	694c      	ldr	r4, [r1, #20]
 800e520:	ea43 0305 	orr.w	r3, r3, r5
 800e524:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 800e528:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800e52a:	d0b7      	beq.n	800e49c <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800e52c:	684b      	ldr	r3, [r1, #4]
 800e52e:	6183      	str	r3, [r0, #24]
 800e530:	e7b4      	b.n	800e49c <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800e532:	f1b9 0f00 	cmp.w	r9, #0
 800e536:	d02e      	beq.n	800e596 <QSPI_Config+0x16e>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e538:	ea49 0000 	orr.w	r0, r9, r0
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800e53c:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e540:	ea40 0008 	orr.w	r0, r0, r8
 800e544:	ea40 0004 	orr.w	r0, r0, r4
 800e548:	68cc      	ldr	r4, [r1, #12]
 800e54a:	ea40 0007 	orr.w	r0, r0, r7
 800e54e:	ea40 0004 	orr.w	r0, r0, r4
 800e552:	ea40 0006 	orr.w	r0, r0, r6
 800e556:	ea43 0300 	orr.w	r3, r3, r0
 800e55a:	616b      	str	r3, [r5, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800e55c:	d19c      	bne.n	800e498 <QSPI_Config+0x70>
 800e55e:	e79d      	b.n	800e49c <QSPI_Config+0x74>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800e560:	2c00      	cmp	r4, #0
 800e562:	d09b      	beq.n	800e49c <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e564:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800e566:	6800      	ldr	r0, [r0, #0]
 800e568:	431c      	orrs	r4, r3
 800e56a:	e9d1 350c 	ldrd	r3, r5, [r1, #48]	; 0x30
 800e56e:	4322      	orrs	r2, r4
 800e570:	6949      	ldr	r1, [r1, #20]
 800e572:	4313      	orrs	r3, r2
 800e574:	432b      	orrs	r3, r5
 800e576:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 800e57a:	6143      	str	r3, [r0, #20]
}
 800e57c:	e78e      	b.n	800e49c <QSPI_Config+0x74>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e57e:	ea40 0008 	orr.w	r0, r0, r8
 800e582:	4320      	orrs	r0, r4
 800e584:	4338      	orrs	r0, r7
 800e586:	ea4e 0300 	orr.w	r3, lr, r0
 800e58a:	4333      	orrs	r3, r6
 800e58c:	ea43 030c 	orr.w	r3, r3, ip
 800e590:	616b      	str	r3, [r5, #20]
}
 800e592:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e596:	ea40 0008 	orr.w	r0, r0, r8
 800e59a:	4320      	orrs	r0, r4
 800e59c:	4338      	orrs	r0, r7
 800e59e:	4330      	orrs	r0, r6
 800e5a0:	4303      	orrs	r3, r0
 800e5a2:	616b      	str	r3, [r5, #20]
}
 800e5a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e5a8:	4318      	orrs	r0, r3
 800e5aa:	ea40 030e 	orr.w	r3, r0, lr
 800e5ae:	4333      	orrs	r3, r6
 800e5b0:	433b      	orrs	r3, r7
 800e5b2:	431c      	orrs	r4, r3
 800e5b4:	616c      	str	r4, [r5, #20]
}
 800e5b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e5ba:	bf00      	nop

0800e5bc <HAL_QSPI_MspInit>:
}
 800e5bc:	4770      	bx	lr
 800e5be:	bf00      	nop

0800e5c0 <HAL_QSPI_Init>:
{
 800e5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5c2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800e5c4:	f7fc f81c 	bl	800a600 <HAL_GetTick>
  if(hqspi == NULL)
 800e5c8:	2c00      	cmp	r4, #0
 800e5ca:	d047      	beq.n	800e65c <HAL_QSPI_Init+0x9c>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800e5cc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800e5d0:	4606      	mov	r6, r0
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d032      	beq.n	800e63c <HAL_QSPI_Init+0x7c>
 800e5d6:	6ca5      	ldr	r5, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800e5d8:	6822      	ldr	r2, [r4, #0]
 800e5da:	68a1      	ldr	r1, [r4, #8]
 800e5dc:	6813      	ldr	r3, [r2, #0]
 800e5de:	3901      	subs	r1, #1
 800e5e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800e5e4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800e5e8:	6013      	str	r3, [r2, #0]
 800e5ea:	e001      	b.n	800e5f0 <HAL_QSPI_Init+0x30>
    if (Timeout != HAL_MAX_DELAY)
 800e5ec:	1c6b      	adds	r3, r5, #1
 800e5ee:	d12d      	bne.n	800e64c <HAL_QSPI_Init+0x8c>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800e5f0:	6893      	ldr	r3, [r2, #8]
 800e5f2:	f013 0320 	ands.w	r3, r3, #32
 800e5f6:	d1f9      	bne.n	800e5ec <HAL_QSPI_Init+0x2c>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800e5f8:	e9d4 0607 	ldrd	r0, r6, [r4, #28]
 800e5fc:	68e1      	ldr	r1, [r4, #12]
    hqspi->State = HAL_QSPI_STATE_READY;
 800e5fe:	2501      	movs	r5, #1
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800e600:	6817      	ldr	r7, [r2, #0]
 800e602:	4301      	orrs	r1, r0
 800e604:	6860      	ldr	r0, [r4, #4]
 800e606:	4331      	orrs	r1, r6
 800e608:	4e19      	ldr	r6, [pc, #100]	; (800e670 <HAL_QSPI_Init+0xb0>)
 800e60a:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
 800e60e:	403e      	ands	r6, r7
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800e610:	6960      	ldr	r0, [r4, #20]
 800e612:	69a7      	ldr	r7, [r4, #24]
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800e614:	4331      	orrs	r1, r6
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800e616:	4e17      	ldr	r6, [pc, #92]	; (800e674 <HAL_QSPI_Init+0xb4>)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800e618:	6011      	str	r1, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800e61a:	ea40 0107 	orr.w	r1, r0, r7
 800e61e:	6857      	ldr	r7, [r2, #4]
 800e620:	6920      	ldr	r0, [r4, #16]
 800e622:	403e      	ands	r6, r7
 800e624:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    hqspi->State = HAL_QSPI_STATE_READY;
 800e628:	4618      	mov	r0, r3
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800e62a:	4331      	orrs	r1, r6
 800e62c:	6051      	str	r1, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 800e62e:	6811      	ldr	r1, [r2, #0]
 800e630:	4329      	orrs	r1, r5
 800e632:	6011      	str	r1, [r2, #0]
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e634:	6463      	str	r3, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 800e636:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
}
 800e63a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_QSPI_MspInit(hqspi);
 800e63c:	4620      	mov	r0, r4
 800e63e:	f7ff ffbd 	bl	800e5bc <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 800e642:	f241 3388 	movw	r3, #5000	; 0x1388
 800e646:	461d      	mov	r5, r3
 800e648:	64a3      	str	r3, [r4, #72]	; 0x48
 800e64a:	e7c5      	b.n	800e5d8 <HAL_QSPI_Init+0x18>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e64c:	f7fb ffd8 	bl	800a600 <HAL_GetTick>
 800e650:	1b80      	subs	r0, r0, r6
 800e652:	42a8      	cmp	r0, r5
 800e654:	d804      	bhi.n	800e660 <HAL_QSPI_Init+0xa0>
 800e656:	b11d      	cbz	r5, 800e660 <HAL_QSPI_Init+0xa0>
 800e658:	6822      	ldr	r2, [r4, #0]
 800e65a:	e7c9      	b.n	800e5f0 <HAL_QSPI_Init+0x30>
    return HAL_ERROR;
 800e65c:	2001      	movs	r0, #1
}
 800e65e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800e660:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800e662:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800e664:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800e668:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e66a:	4303      	orrs	r3, r0
 800e66c:	6463      	str	r3, [r4, #68]	; 0x44
}
 800e66e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e670:	00ffff2f 	.word	0x00ffff2f
 800e674:	ffe0f8fe 	.word	0xffe0f8fe

0800e678 <HAL_QSPI_Command>:
{
 800e678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e67a:	4604      	mov	r4, r0
 800e67c:	460d      	mov	r5, r1
 800e67e:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 800e680:	f7fb ffbe 	bl	800a600 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800e684:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800e688:	2b01      	cmp	r3, #1
 800e68a:	d00b      	beq.n	800e6a4 <HAL_QSPI_Command+0x2c>
 800e68c:	2301      	movs	r3, #1
 800e68e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800e692:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800e696:	2b01      	cmp	r3, #1
 800e698:	d006      	beq.n	800e6a8 <HAL_QSPI_Command+0x30>
    status = HAL_BUSY;
 800e69a:	2002      	movs	r0, #2
  __HAL_UNLOCK(hqspi);
 800e69c:	2300      	movs	r3, #0
 800e69e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800e6a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hqspi);
 800e6a4:	2002      	movs	r0, #2
}
 800e6a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e6a8:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800e6aa:	2302      	movs	r3, #2
 800e6ac:	4607      	mov	r7, r0
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e6ae:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800e6b0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800e6b4:	1c70      	adds	r0, r6, #1
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800e6b6:	6823      	ldr	r3, [r4, #0]
 800e6b8:	d10e      	bne.n	800e6d8 <HAL_QSPI_Command+0x60>
 800e6ba:	689a      	ldr	r2, [r3, #8]
 800e6bc:	f012 0220 	ands.w	r2, r2, #32
 800e6c0:	d1fb      	bne.n	800e6ba <HAL_QSPI_Command+0x42>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800e6c2:	4629      	mov	r1, r5
 800e6c4:	4620      	mov	r0, r4
 800e6c6:	f7ff feaf 	bl	800e428 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 800e6ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e6cc:	b1bb      	cbz	r3, 800e6fe <HAL_QSPI_Command+0x86>
        hqspi->State = HAL_QSPI_STATE_READY;
 800e6ce:	2301      	movs	r3, #1
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800e6d0:	2000      	movs	r0, #0
        hqspi->State = HAL_QSPI_STATE_READY;
 800e6d2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800e6d6:	e7e1      	b.n	800e69c <HAL_QSPI_Command+0x24>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800e6d8:	689a      	ldr	r2, [r3, #8]
 800e6da:	f012 0220 	ands.w	r2, r2, #32
 800e6de:	d019      	beq.n	800e714 <HAL_QSPI_Command+0x9c>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e6e0:	f7fb ff8e 	bl	800a600 <HAL_GetTick>
 800e6e4:	1bc0      	subs	r0, r0, r7
 800e6e6:	4286      	cmp	r6, r0
 800e6e8:	d301      	bcc.n	800e6ee <HAL_QSPI_Command+0x76>
 800e6ea:	2e00      	cmp	r6, #0
 800e6ec:	d1e2      	bne.n	800e6b4 <HAL_QSPI_Command+0x3c>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800e6ee:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800e6f0:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800e6f2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800e6f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e6f8:	4303      	orrs	r3, r0
 800e6fa:	6463      	str	r3, [r4, #68]	; 0x44
 800e6fc:	e7ce      	b.n	800e69c <HAL_QSPI_Command+0x24>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800e6fe:	6822      	ldr	r2, [r4, #0]
 800e700:	6893      	ldr	r3, [r2, #8]
 800e702:	079b      	lsls	r3, r3, #30
 800e704:	d5fc      	bpl.n	800e700 <HAL_QSPI_Command+0x88>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800e706:	2102      	movs	r1, #2
          hqspi->State = HAL_QSPI_STATE_READY;
 800e708:	2301      	movs	r3, #1
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800e70a:	2000      	movs	r0, #0
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800e70c:	60d1      	str	r1, [r2, #12]
          hqspi->State = HAL_QSPI_STATE_READY;
 800e70e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800e712:	e7c3      	b.n	800e69c <HAL_QSPI_Command+0x24>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800e714:	4629      	mov	r1, r5
 800e716:	4620      	mov	r0, r4
 800e718:	f7ff fe86 	bl	800e428 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 800e71c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e71e:	b13b      	cbz	r3, 800e730 <HAL_QSPI_Command+0xb8>
 800e720:	e7d5      	b.n	800e6ce <HAL_QSPI_Command+0x56>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e722:	f7fb ff6d 	bl	800a600 <HAL_GetTick>
 800e726:	1bc0      	subs	r0, r0, r7
 800e728:	4286      	cmp	r6, r0
 800e72a:	d3e0      	bcc.n	800e6ee <HAL_QSPI_Command+0x76>
 800e72c:	2e00      	cmp	r6, #0
 800e72e:	d0de      	beq.n	800e6ee <HAL_QSPI_Command+0x76>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800e730:	6822      	ldr	r2, [r4, #0]
 800e732:	6893      	ldr	r3, [r2, #8]
 800e734:	0799      	lsls	r1, r3, #30
 800e736:	d5f4      	bpl.n	800e722 <HAL_QSPI_Command+0xaa>
 800e738:	e7e5      	b.n	800e706 <HAL_QSPI_Command+0x8e>
 800e73a:	bf00      	nop

0800e73c <HAL_QSPI_Transmit>:
{
 800e73c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e740:	4604      	mov	r4, r0
 800e742:	4688      	mov	r8, r1
 800e744:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 800e746:	f7fb ff5b 	bl	800a600 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800e74a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800e74e:	2b01      	cmp	r3, #1
 800e750:	d069      	beq.n	800e826 <HAL_QSPI_Transmit+0xea>
 800e752:	2301      	movs	r3, #1
 800e754:	4606      	mov	r6, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800e756:	6827      	ldr	r7, [r4, #0]
  __HAL_LOCK(hqspi);
 800e758:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800e75c:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
 800e760:	b2c0      	uxtb	r0, r0
 800e762:	4298      	cmp	r0, r3
 800e764:	d005      	beq.n	800e772 <HAL_QSPI_Transmit+0x36>
    status = HAL_BUSY;
 800e766:	2002      	movs	r0, #2
  __HAL_UNLOCK(hqspi);
 800e768:	2300      	movs	r3, #0
 800e76a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800e76e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e772:	2300      	movs	r3, #0
 800e774:	6463      	str	r3, [r4, #68]	; 0x44
    if(pData != NULL )
 800e776:	f1b8 0f00 	cmp.w	r8, #0
 800e77a:	d038      	beq.n	800e7ee <HAL_QSPI_Transmit+0xb2>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800e77c:	2312      	movs	r3, #18
 800e77e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800e782:	693b      	ldr	r3, [r7, #16]
 800e784:	3301      	adds	r3, #1
 800e786:	62e3      	str	r3, [r4, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800e788:	693b      	ldr	r3, [r7, #16]
      hqspi->pTxBuffPtr = pData;
 800e78a:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800e78e:	3301      	adds	r3, #1
 800e790:	62a3      	str	r3, [r4, #40]	; 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800e792:	697b      	ldr	r3, [r7, #20]
 800e794:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800e798:	617b      	str	r3, [r7, #20]
      while(hqspi->TxXferCount > 0U)
 800e79a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d036      	beq.n	800e80e <HAL_QSPI_Transmit+0xd2>
 800e7a0:	1c6a      	adds	r2, r5, #1
 800e7a2:	4639      	mov	r1, r7
 800e7a4:	d111      	bne.n	800e7ca <HAL_QSPI_Transmit+0x8e>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800e7a6:	688b      	ldr	r3, [r1, #8]
 800e7a8:	075b      	lsls	r3, r3, #29
 800e7aa:	d5fc      	bpl.n	800e7a6 <HAL_QSPI_Transmit+0x6a>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800e7ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e7ae:	781b      	ldrb	r3, [r3, #0]
 800e7b0:	f887 3020 	strb.w	r3, [r7, #32]
        hqspi->TxXferCount--;
 800e7b4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        hqspi->pTxBuffPtr++;
 800e7b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 800e7b8:	3a01      	subs	r2, #1
        hqspi->pTxBuffPtr++;
 800e7ba:	3301      	adds	r3, #1
        hqspi->TxXferCount--;
 800e7bc:	62e2      	str	r2, [r4, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800e7be:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        hqspi->pTxBuffPtr++;
 800e7c0:	6263      	str	r3, [r4, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 800e7c2:	b31a      	cbz	r2, 800e80c <HAL_QSPI_Transmit+0xd0>
 800e7c4:	1c6a      	adds	r2, r5, #1
 800e7c6:	6821      	ldr	r1, [r4, #0]
 800e7c8:	d0ed      	beq.n	800e7a6 <HAL_QSPI_Transmit+0x6a>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800e7ca:	688b      	ldr	r3, [r1, #8]
 800e7cc:	0758      	lsls	r0, r3, #29
 800e7ce:	d4ed      	bmi.n	800e7ac <HAL_QSPI_Transmit+0x70>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e7d0:	f7fb ff16 	bl	800a600 <HAL_GetTick>
 800e7d4:	1b80      	subs	r0, r0, r6
 800e7d6:	4285      	cmp	r5, r0
 800e7d8:	d301      	bcc.n	800e7de <HAL_QSPI_Transmit+0xa2>
 800e7da:	2d00      	cmp	r5, #0
 800e7dc:	d1f2      	bne.n	800e7c4 <HAL_QSPI_Transmit+0x88>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800e7de:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800e7e0:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800e7e2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800e7e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e7e8:	4303      	orrs	r3, r0
 800e7ea:	6463      	str	r3, [r4, #68]	; 0x44
 800e7ec:	e017      	b.n	800e81e <HAL_QSPI_Transmit+0xe2>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800e7ee:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e7f0:	f043 0308 	orr.w	r3, r3, #8
 800e7f4:	6463      	str	r3, [r4, #68]	; 0x44
 800e7f6:	e7b7      	b.n	800e768 <HAL_QSPI_Transmit+0x2c>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800e7f8:	68bb      	ldr	r3, [r7, #8]
 800e7fa:	079b      	lsls	r3, r3, #30
 800e7fc:	d40c      	bmi.n	800e818 <HAL_QSPI_Transmit+0xdc>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e7fe:	f7fb feff 	bl	800a600 <HAL_GetTick>
 800e802:	1b80      	subs	r0, r0, r6
 800e804:	4285      	cmp	r5, r0
 800e806:	d3ea      	bcc.n	800e7de <HAL_QSPI_Transmit+0xa2>
 800e808:	2d00      	cmp	r5, #0
 800e80a:	d0e8      	beq.n	800e7de <HAL_QSPI_Transmit+0xa2>
 800e80c:	6827      	ldr	r7, [r4, #0]
 800e80e:	1c69      	adds	r1, r5, #1
 800e810:	d1f2      	bne.n	800e7f8 <HAL_QSPI_Transmit+0xbc>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800e812:	68bb      	ldr	r3, [r7, #8]
 800e814:	079a      	lsls	r2, r3, #30
 800e816:	d5fc      	bpl.n	800e812 <HAL_QSPI_Transmit+0xd6>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800e818:	2302      	movs	r3, #2
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800e81a:	2000      	movs	r0, #0
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800e81c:	60fb      	str	r3, [r7, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800e81e:	2301      	movs	r3, #1
 800e820:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800e824:	e7a0      	b.n	800e768 <HAL_QSPI_Transmit+0x2c>
  __HAL_LOCK(hqspi);
 800e826:	2002      	movs	r0, #2
}
 800e828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e82c <HAL_QSPI_Receive>:
{
 800e82c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e830:	4604      	mov	r4, r0
 800e832:	4615      	mov	r5, r2
 800e834:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 800e836:	f7fb fee3 	bl	800a600 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800e83a:	6826      	ldr	r6, [r4, #0]
 800e83c:	69b2      	ldr	r2, [r6, #24]
  __HAL_LOCK(hqspi);
 800e83e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800e842:	2b01      	cmp	r3, #1
 800e844:	d06d      	beq.n	800e922 <HAL_QSPI_Receive+0xf6>
 800e846:	2301      	movs	r3, #1
 800e848:	4607      	mov	r7, r0
 800e84a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800e84e:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
 800e852:	b2c0      	uxtb	r0, r0
 800e854:	4298      	cmp	r0, r3
 800e856:	d005      	beq.n	800e864 <HAL_QSPI_Receive+0x38>
    status = HAL_BUSY;
 800e858:	2002      	movs	r0, #2
  __HAL_UNLOCK(hqspi);
 800e85a:	2300      	movs	r3, #0
 800e85c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800e860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e864:	2300      	movs	r3, #0
 800e866:	6463      	str	r3, [r4, #68]	; 0x44
    if(pData != NULL )
 800e868:	f1b8 0f00 	cmp.w	r8, #0
 800e86c:	d03d      	beq.n	800e8ea <HAL_QSPI_Receive+0xbe>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800e86e:	2322      	movs	r3, #34	; 0x22
 800e870:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800e874:	6933      	ldr	r3, [r6, #16]
 800e876:	3301      	adds	r3, #1
 800e878:	63a3      	str	r3, [r4, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800e87a:	6933      	ldr	r3, [r6, #16]
      hqspi->pRxBuffPtr = pData;
 800e87c:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800e880:	3301      	adds	r3, #1
 800e882:	6363      	str	r3, [r4, #52]	; 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800e884:	6973      	ldr	r3, [r6, #20]
 800e886:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800e88a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e88e:	6173      	str	r3, [r6, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800e890:	61b2      	str	r2, [r6, #24]
      while(hqspi->RxXferCount > 0U)
 800e892:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e894:	2b00      	cmp	r3, #0
 800e896:	d038      	beq.n	800e90a <HAL_QSPI_Receive+0xde>
 800e898:	1c68      	adds	r0, r5, #1
 800e89a:	4631      	mov	r1, r6
 800e89c:	d112      	bne.n	800e8c4 <HAL_QSPI_Receive+0x98>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800e89e:	688b      	ldr	r3, [r1, #8]
 800e8a0:	f013 0f06 	tst.w	r3, #6
 800e8a4:	d0fb      	beq.n	800e89e <HAL_QSPI_Receive+0x72>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800e8a6:	f896 2020 	ldrb.w	r2, [r6, #32]
 800e8aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e8ac:	701a      	strb	r2, [r3, #0]
        hqspi->RxXferCount--;
 800e8ae:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hqspi->pRxBuffPtr++;
 800e8b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 800e8b2:	3a01      	subs	r2, #1
        hqspi->pRxBuffPtr++;
 800e8b4:	3301      	adds	r3, #1
        hqspi->RxXferCount--;
 800e8b6:	63a2      	str	r2, [r4, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800e8b8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hqspi->pRxBuffPtr++;
 800e8ba:	6323      	str	r3, [r4, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 800e8bc:	b322      	cbz	r2, 800e908 <HAL_QSPI_Receive+0xdc>
 800e8be:	1c68      	adds	r0, r5, #1
 800e8c0:	6821      	ldr	r1, [r4, #0]
 800e8c2:	d0ec      	beq.n	800e89e <HAL_QSPI_Receive+0x72>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800e8c4:	688b      	ldr	r3, [r1, #8]
 800e8c6:	f013 0f06 	tst.w	r3, #6
 800e8ca:	d1ec      	bne.n	800e8a6 <HAL_QSPI_Receive+0x7a>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e8cc:	f7fb fe98 	bl	800a600 <HAL_GetTick>
 800e8d0:	1bc0      	subs	r0, r0, r7
 800e8d2:	4285      	cmp	r5, r0
 800e8d4:	d301      	bcc.n	800e8da <HAL_QSPI_Receive+0xae>
 800e8d6:	2d00      	cmp	r5, #0
 800e8d8:	d1f1      	bne.n	800e8be <HAL_QSPI_Receive+0x92>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800e8da:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800e8dc:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800e8de:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800e8e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e8e4:	4303      	orrs	r3, r0
 800e8e6:	6463      	str	r3, [r4, #68]	; 0x44
 800e8e8:	e017      	b.n	800e91a <HAL_QSPI_Receive+0xee>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800e8ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e8ec:	f043 0308 	orr.w	r3, r3, #8
 800e8f0:	6463      	str	r3, [r4, #68]	; 0x44
 800e8f2:	e7b2      	b.n	800e85a <HAL_QSPI_Receive+0x2e>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800e8f4:	68b3      	ldr	r3, [r6, #8]
 800e8f6:	079b      	lsls	r3, r3, #30
 800e8f8:	d40c      	bmi.n	800e914 <HAL_QSPI_Receive+0xe8>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e8fa:	f7fb fe81 	bl	800a600 <HAL_GetTick>
 800e8fe:	1bc0      	subs	r0, r0, r7
 800e900:	4285      	cmp	r5, r0
 800e902:	d3ea      	bcc.n	800e8da <HAL_QSPI_Receive+0xae>
 800e904:	2d00      	cmp	r5, #0
 800e906:	d0e8      	beq.n	800e8da <HAL_QSPI_Receive+0xae>
 800e908:	6826      	ldr	r6, [r4, #0]
 800e90a:	1c69      	adds	r1, r5, #1
 800e90c:	d1f2      	bne.n	800e8f4 <HAL_QSPI_Receive+0xc8>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800e90e:	68b3      	ldr	r3, [r6, #8]
 800e910:	079a      	lsls	r2, r3, #30
 800e912:	d5fc      	bpl.n	800e90e <HAL_QSPI_Receive+0xe2>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800e914:	2302      	movs	r3, #2
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800e916:	2000      	movs	r0, #0
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800e918:	60f3      	str	r3, [r6, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800e91a:	2301      	movs	r3, #1
 800e91c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800e920:	e79b      	b.n	800e85a <HAL_QSPI_Receive+0x2e>
  __HAL_LOCK(hqspi);
 800e922:	2002      	movs	r0, #2
}
 800e924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e928 <HAL_QSPI_AutoPolling>:
{
 800e928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e92c:	4604      	mov	r4, r0
 800e92e:	461f      	mov	r7, r3
 800e930:	4688      	mov	r8, r1
 800e932:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 800e934:	f7fb fe64 	bl	800a600 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800e938:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800e93c:	2b01      	cmp	r3, #1
 800e93e:	d00c      	beq.n	800e95a <HAL_QSPI_AutoPolling+0x32>
 800e940:	2301      	movs	r3, #1
 800e942:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800e946:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800e94a:	2b01      	cmp	r3, #1
 800e94c:	d008      	beq.n	800e960 <HAL_QSPI_AutoPolling+0x38>
    status = HAL_BUSY;
 800e94e:	2002      	movs	r0, #2
  __HAL_UNLOCK(hqspi);
 800e950:	2300      	movs	r3, #0
 800e952:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800e956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hqspi);
 800e95a:	2002      	movs	r0, #2
}
 800e95c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e960:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800e962:	2342      	movs	r3, #66	; 0x42
 800e964:	4681      	mov	r9, r0
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e966:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800e968:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800e96c:	1c79      	adds	r1, r7, #1
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800e96e:	6825      	ldr	r5, [r4, #0]
 800e970:	d126      	bne.n	800e9c0 <HAL_QSPI_AutoPolling+0x98>
 800e972:	68ab      	ldr	r3, [r5, #8]
 800e974:	069a      	lsls	r2, r3, #26
 800e976:	d4fc      	bmi.n	800e972 <HAL_QSPI_AutoPolling+0x4a>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800e978:	6833      	ldr	r3, [r6, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800e97a:	4641      	mov	r1, r8
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800e97c:	6870      	ldr	r0, [r6, #4]
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800e97e:	68b2      	ldr	r2, [r6, #8]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800e980:	62ab      	str	r3, [r5, #40]	; 0x28
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800e982:	6933      	ldr	r3, [r6, #16]
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800e984:	6268      	str	r0, [r5, #36]	; 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800e986:	62ea      	str	r2, [r5, #44]	; 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800e988:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800e98c:	6828      	ldr	r0, [r5, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800e98e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
      cmd->NbData = cfg->StatusBytesSize;
 800e992:	68f6      	ldr	r6, [r6, #12]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800e994:	f420 0040 	bic.w	r0, r0, #12582912	; 0xc00000
 800e998:	4303      	orrs	r3, r0
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800e99a:	4620      	mov	r0, r4
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800e99c:	602b      	str	r3, [r5, #0]
      cmd->NbData = cfg->StatusBytesSize;
 800e99e:	f8c8 6028 	str.w	r6, [r8, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800e9a2:	f7ff fd41 	bl	800e428 <QSPI_Config>
 800e9a6:	1c78      	adds	r0, r7, #1
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800e9a8:	6822      	ldr	r2, [r4, #0]
 800e9aa:	d115      	bne.n	800e9d8 <HAL_QSPI_AutoPolling+0xb0>
 800e9ac:	6893      	ldr	r3, [r2, #8]
 800e9ae:	0719      	lsls	r1, r3, #28
 800e9b0:	d5fc      	bpl.n	800e9ac <HAL_QSPI_AutoPolling+0x84>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800e9b2:	2108      	movs	r1, #8
        hqspi->State = HAL_QSPI_STATE_READY;
 800e9b4:	2301      	movs	r3, #1
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800e9b6:	2000      	movs	r0, #0
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800e9b8:	60d1      	str	r1, [r2, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800e9ba:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800e9be:	e7c7      	b.n	800e950 <HAL_QSPI_AutoPolling+0x28>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800e9c0:	68ab      	ldr	r3, [r5, #8]
 800e9c2:	069b      	lsls	r3, r3, #26
 800e9c4:	d5d8      	bpl.n	800e978 <HAL_QSPI_AutoPolling+0x50>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e9c6:	f7fb fe1b 	bl	800a600 <HAL_GetTick>
 800e9ca:	eba0 0009 	sub.w	r0, r0, r9
 800e9ce:	4287      	cmp	r7, r0
 800e9d0:	d30d      	bcc.n	800e9ee <HAL_QSPI_AutoPolling+0xc6>
 800e9d2:	2f00      	cmp	r7, #0
 800e9d4:	d1ca      	bne.n	800e96c <HAL_QSPI_AutoPolling+0x44>
 800e9d6:	e00a      	b.n	800e9ee <HAL_QSPI_AutoPolling+0xc6>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800e9d8:	6893      	ldr	r3, [r2, #8]
 800e9da:	071b      	lsls	r3, r3, #28
 800e9dc:	d4e9      	bmi.n	800e9b2 <HAL_QSPI_AutoPolling+0x8a>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e9de:	f7fb fe0f 	bl	800a600 <HAL_GetTick>
 800e9e2:	eba0 0009 	sub.w	r0, r0, r9
 800e9e6:	4287      	cmp	r7, r0
 800e9e8:	d301      	bcc.n	800e9ee <HAL_QSPI_AutoPolling+0xc6>
 800e9ea:	2f00      	cmp	r7, #0
 800e9ec:	d1db      	bne.n	800e9a6 <HAL_QSPI_AutoPolling+0x7e>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800e9ee:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800e9f0:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800e9f2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800e9f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e9f8:	4303      	orrs	r3, r0
 800e9fa:	6463      	str	r3, [r4, #68]	; 0x44
 800e9fc:	e7a8      	b.n	800e950 <HAL_QSPI_AutoPolling+0x28>
 800e9fe:	bf00      	nop

0800ea00 <HAL_QSPI_MemoryMapped>:
{
 800ea00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea04:	4604      	mov	r4, r0
 800ea06:	460e      	mov	r6, r1
 800ea08:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 800ea0a:	f7fb fdf9 	bl	800a600 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800ea0e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800ea12:	2b01      	cmp	r3, #1
 800ea14:	d00c      	beq.n	800ea30 <HAL_QSPI_MemoryMapped+0x30>
 800ea16:	2301      	movs	r3, #1
 800ea18:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800ea1c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800ea20:	2b01      	cmp	r3, #1
 800ea22:	d008      	beq.n	800ea36 <HAL_QSPI_MemoryMapped+0x36>
    status = HAL_BUSY;
 800ea24:	2002      	movs	r0, #2
  __HAL_UNLOCK(hqspi);
 800ea26:	2300      	movs	r3, #0
 800ea28:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800ea2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hqspi);
 800ea30:	2002      	movs	r0, #2
}
 800ea32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ea36:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800ea38:	2382      	movs	r3, #130	; 0x82
 800ea3a:	4607      	mov	r7, r0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800ea3c:	f8d4 8048 	ldr.w	r8, [r4, #72]	; 0x48
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ea40:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800ea42:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800ea46:	f1b8 3fff 	cmp.w	r8, #4294967295
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800ea4a:	6822      	ldr	r2, [r4, #0]
 800ea4c:	d113      	bne.n	800ea76 <HAL_QSPI_MemoryMapped+0x76>
 800ea4e:	6893      	ldr	r3, [r2, #8]
 800ea50:	0699      	lsls	r1, r3, #26
 800ea52:	d4fc      	bmi.n	800ea4e <HAL_QSPI_MemoryMapped+0x4e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800ea54:	6813      	ldr	r3, [r2, #0]
 800ea56:	6869      	ldr	r1, [r5, #4]
 800ea58:	f023 0308 	bic.w	r3, r3, #8
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800ea5c:	2908      	cmp	r1, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800ea5e:	ea43 0301 	orr.w	r3, r3, r1
 800ea62:	6013      	str	r3, [r2, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800ea64:	d01a      	beq.n	800ea9c <HAL_QSPI_MemoryMapped+0x9c>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800ea66:	4620      	mov	r0, r4
 800ea68:	4631      	mov	r1, r6
 800ea6a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800ea6e:	f7ff fcdb 	bl	800e428 <QSPI_Config>
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800ea72:	2000      	movs	r0, #0
 800ea74:	e7d7      	b.n	800ea26 <HAL_QSPI_MemoryMapped+0x26>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800ea76:	6893      	ldr	r3, [r2, #8]
 800ea78:	069b      	lsls	r3, r3, #26
 800ea7a:	d5eb      	bpl.n	800ea54 <HAL_QSPI_MemoryMapped+0x54>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ea7c:	f7fb fdc0 	bl	800a600 <HAL_GetTick>
 800ea80:	1bc0      	subs	r0, r0, r7
 800ea82:	4580      	cmp	r8, r0
 800ea84:	d302      	bcc.n	800ea8c <HAL_QSPI_MemoryMapped+0x8c>
 800ea86:	f1b8 0f00 	cmp.w	r8, #0
 800ea8a:	d1dc      	bne.n	800ea46 <HAL_QSPI_MemoryMapped+0x46>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800ea8c:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800ea8e:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800ea90:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800ea94:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ea96:	4303      	orrs	r3, r0
 800ea98:	6463      	str	r3, [r4, #68]	; 0x44
 800ea9a:	e7c4      	b.n	800ea26 <HAL_QSPI_MemoryMapped+0x26>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800ea9c:	6829      	ldr	r1, [r5, #0]
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800ea9e:	2310      	movs	r3, #16
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800eaa0:	6311      	str	r1, [r2, #48]	; 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800eaa2:	60d3      	str	r3, [r2, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800eaa4:	6813      	ldr	r3, [r2, #0]
 800eaa6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800eaaa:	6013      	str	r3, [r2, #0]
 800eaac:	e7db      	b.n	800ea66 <HAL_QSPI_MemoryMapped+0x66>
 800eaae:	bf00      	nop

0800eab0 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800eab0:	2800      	cmp	r0, #0
 800eab2:	f000 81a1 	beq.w	800edf8 <HAL_RCC_OscConfig+0x348>
{
 800eab6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800eab8:	6803      	ldr	r3, [r0, #0]
 800eaba:	4604      	mov	r4, r0
 800eabc:	07d9      	lsls	r1, r3, #31
 800eabe:	d535      	bpl.n	800eb2c <HAL_RCC_OscConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800eac0:	49a8      	ldr	r1, [pc, #672]	; (800ed64 <HAL_RCC_OscConfig+0x2b4>)
 800eac2:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800eac4:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800eac6:	f002 0238 	and.w	r2, r2, #56	; 0x38
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800eaca:	2a10      	cmp	r2, #16
 800eacc:	f000 8114 	beq.w	800ecf8 <HAL_RCC_OscConfig+0x248>
 800ead0:	2a18      	cmp	r2, #24
 800ead2:	f000 810c 	beq.w	800ecee <HAL_RCC_OscConfig+0x23e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ead6:	6863      	ldr	r3, [r4, #4]
 800ead8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eadc:	d010      	beq.n	800eb00 <HAL_RCC_OscConfig+0x50>
 800eade:	2b00      	cmp	r3, #0
 800eae0:	f000 8171 	beq.w	800edc6 <HAL_RCC_OscConfig+0x316>
 800eae4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800eae8:	4b9e      	ldr	r3, [pc, #632]	; (800ed64 <HAL_RCC_OscConfig+0x2b4>)
 800eaea:	681a      	ldr	r2, [r3, #0]
 800eaec:	f000 81e8 	beq.w	800eec0 <HAL_RCC_OscConfig+0x410>
 800eaf0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800eaf4:	601a      	str	r2, [r3, #0]
 800eaf6:	681a      	ldr	r2, [r3, #0]
 800eaf8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800eafc:	601a      	str	r2, [r3, #0]
 800eafe:	e004      	b.n	800eb0a <HAL_RCC_OscConfig+0x5a>
 800eb00:	4a98      	ldr	r2, [pc, #608]	; (800ed64 <HAL_RCC_OscConfig+0x2b4>)
 800eb02:	6813      	ldr	r3, [r2, #0]
 800eb04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800eb08:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eb0a:	f7fb fd79 	bl	800a600 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800eb0e:	4d95      	ldr	r5, [pc, #596]	; (800ed64 <HAL_RCC_OscConfig+0x2b4>)
        tickstart = HAL_GetTick();
 800eb10:	4607      	mov	r7, r0
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800eb12:	f241 3688 	movw	r6, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800eb16:	e005      	b.n	800eb24 <HAL_RCC_OscConfig+0x74>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800eb18:	f7fb fd72 	bl	800a600 <HAL_GetTick>
 800eb1c:	1bc0      	subs	r0, r0, r7
 800eb1e:	42b0      	cmp	r0, r6
 800eb20:	f200 814f 	bhi.w	800edc2 <HAL_RCC_OscConfig+0x312>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800eb24:	682b      	ldr	r3, [r5, #0]
 800eb26:	039b      	lsls	r3, r3, #14
 800eb28:	d5f6      	bpl.n	800eb18 <HAL_RCC_OscConfig+0x68>
 800eb2a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800eb2c:	0799      	lsls	r1, r3, #30
 800eb2e:	f100 808e 	bmi.w	800ec4e <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800eb32:	06d9      	lsls	r1, r3, #27
 800eb34:	d534      	bpl.n	800eba0 <HAL_RCC_OscConfig+0xf0>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800eb36:	4a8b      	ldr	r2, [pc, #556]	; (800ed64 <HAL_RCC_OscConfig+0x2b4>)
 800eb38:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800eb3a:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800eb3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800eb40:	2b08      	cmp	r3, #8
 800eb42:	f000 80e9 	beq.w	800ed18 <HAL_RCC_OscConfig+0x268>
 800eb46:	2b18      	cmp	r3, #24
 800eb48:	f000 80e1 	beq.w	800ed0e <HAL_RCC_OscConfig+0x25e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800eb4c:	69e3      	ldr	r3, [r4, #28]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	f000 817a 	beq.w	800ee48 <HAL_RCC_OscConfig+0x398>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800eb54:	4b83      	ldr	r3, [pc, #524]	; (800ed64 <HAL_RCC_OscConfig+0x2b4>)
 800eb56:	681a      	ldr	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800eb58:	461d      	mov	r5, r3
        __HAL_RCC_CSI_ENABLE();
 800eb5a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800eb5e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800eb60:	f7fb fd4e 	bl	800a600 <HAL_GetTick>
 800eb64:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800eb66:	e005      	b.n	800eb74 <HAL_RCC_OscConfig+0xc4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800eb68:	f7fb fd4a 	bl	800a600 <HAL_GetTick>
 800eb6c:	1b80      	subs	r0, r0, r6
 800eb6e:	2802      	cmp	r0, #2
 800eb70:	f200 8127 	bhi.w	800edc2 <HAL_RCC_OscConfig+0x312>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800eb74:	682b      	ldr	r3, [r5, #0]
 800eb76:	05db      	lsls	r3, r3, #23
 800eb78:	d5f6      	bpl.n	800eb68 <HAL_RCC_OscConfig+0xb8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800eb7a:	f7fb fd59 	bl	800a630 <HAL_GetREVID>
 800eb7e:	f241 0303 	movw	r3, #4099	; 0x1003
 800eb82:	4298      	cmp	r0, r3
 800eb84:	f200 8266 	bhi.w	800f054 <HAL_RCC_OscConfig+0x5a4>
 800eb88:	6a22      	ldr	r2, [r4, #32]
 800eb8a:	686b      	ldr	r3, [r5, #4]
 800eb8c:	2a20      	cmp	r2, #32
 800eb8e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800eb92:	bf0c      	ite	eq
 800eb94:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 800eb98:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800eb9c:	606b      	str	r3, [r5, #4]
 800eb9e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800eba0:	071d      	lsls	r5, r3, #28
 800eba2:	d517      	bpl.n	800ebd4 <HAL_RCC_OscConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800eba4:	6963      	ldr	r3, [r4, #20]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	f000 8128 	beq.w	800edfc <HAL_RCC_OscConfig+0x34c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ebac:	4b6d      	ldr	r3, [pc, #436]	; (800ed64 <HAL_RCC_OscConfig+0x2b4>)
 800ebae:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ebb0:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 800ebb2:	f042 0201 	orr.w	r2, r2, #1
 800ebb6:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 800ebb8:	f7fb fd22 	bl	800a600 <HAL_GetTick>
 800ebbc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ebbe:	e005      	b.n	800ebcc <HAL_RCC_OscConfig+0x11c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ebc0:	f7fb fd1e 	bl	800a600 <HAL_GetTick>
 800ebc4:	1b80      	subs	r0, r0, r6
 800ebc6:	2802      	cmp	r0, #2
 800ebc8:	f200 80fb 	bhi.w	800edc2 <HAL_RCC_OscConfig+0x312>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ebcc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800ebce:	0798      	lsls	r0, r3, #30
 800ebd0:	d5f6      	bpl.n	800ebc0 <HAL_RCC_OscConfig+0x110>
 800ebd2:	6823      	ldr	r3, [r4, #0]
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ebd4:	069a      	lsls	r2, r3, #26
 800ebd6:	d517      	bpl.n	800ec08 <HAL_RCC_OscConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800ebd8:	69a3      	ldr	r3, [r4, #24]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	f000 8121 	beq.w	800ee22 <HAL_RCC_OscConfig+0x372>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ebe0:	4b60      	ldr	r3, [pc, #384]	; (800ed64 <HAL_RCC_OscConfig+0x2b4>)
 800ebe2:	681a      	ldr	r2, [r3, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ebe4:	461d      	mov	r5, r3
      __HAL_RCC_HSI48_ENABLE();
 800ebe6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ebea:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800ebec:	f7fb fd08 	bl	800a600 <HAL_GetTick>
 800ebf0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ebf2:	e005      	b.n	800ec00 <HAL_RCC_OscConfig+0x150>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800ebf4:	f7fb fd04 	bl	800a600 <HAL_GetTick>
 800ebf8:	1b80      	subs	r0, r0, r6
 800ebfa:	2802      	cmp	r0, #2
 800ebfc:	f200 80e1 	bhi.w	800edc2 <HAL_RCC_OscConfig+0x312>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ec00:	682b      	ldr	r3, [r5, #0]
 800ec02:	049f      	lsls	r7, r3, #18
 800ec04:	d5f6      	bpl.n	800ebf4 <HAL_RCC_OscConfig+0x144>
 800ec06:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ec08:	0759      	lsls	r1, r3, #29
 800ec0a:	f100 80a0 	bmi.w	800ed4e <HAL_RCC_OscConfig+0x29e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ec0e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ec10:	b1d8      	cbz	r0, 800ec4a <HAL_RCC_OscConfig+0x19a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800ec12:	4b54      	ldr	r3, [pc, #336]	; (800ed64 <HAL_RCC_OscConfig+0x2b4>)
 800ec14:	691a      	ldr	r2, [r3, #16]
 800ec16:	f002 0238 	and.w	r2, r2, #56	; 0x38
 800ec1a:	2a18      	cmp	r2, #24
 800ec1c:	f000 81cb 	beq.w	800efb6 <HAL_RCC_OscConfig+0x506>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ec20:	2802      	cmp	r0, #2
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ec22:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ec24:	f000 815d 	beq.w	800eee2 <HAL_RCC_OscConfig+0x432>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ec28:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ec2c:	461c      	mov	r4, r3
        __HAL_RCC_PLL_DISABLE();
 800ec2e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800ec30:	f7fb fce6 	bl	800a600 <HAL_GetTick>
 800ec34:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ec36:	e005      	b.n	800ec44 <HAL_RCC_OscConfig+0x194>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ec38:	f7fb fce2 	bl	800a600 <HAL_GetTick>
 800ec3c:	1b40      	subs	r0, r0, r5
 800ec3e:	2802      	cmp	r0, #2
 800ec40:	f200 80bf 	bhi.w	800edc2 <HAL_RCC_OscConfig+0x312>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ec44:	6823      	ldr	r3, [r4, #0]
 800ec46:	019b      	lsls	r3, r3, #6
 800ec48:	d4f6      	bmi.n	800ec38 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800ec4a:	2000      	movs	r0, #0
}
 800ec4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ec4e:	4a45      	ldr	r2, [pc, #276]	; (800ed64 <HAL_RCC_OscConfig+0x2b4>)
 800ec50:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ec52:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800ec54:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 800ec58:	d02f      	beq.n	800ecba <HAL_RCC_OscConfig+0x20a>
 800ec5a:	2b18      	cmp	r3, #24
 800ec5c:	d02b      	beq.n	800ecb6 <HAL_RCC_OscConfig+0x206>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ec5e:	68e2      	ldr	r2, [r4, #12]
 800ec60:	2a00      	cmp	r2, #0
 800ec62:	f000 8105 	beq.w	800ee70 <HAL_RCC_OscConfig+0x3c0>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ec66:	493f      	ldr	r1, [pc, #252]	; (800ed64 <HAL_RCC_OscConfig+0x2b4>)
 800ec68:	680b      	ldr	r3, [r1, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ec6a:	460d      	mov	r5, r1
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ec6c:	f023 0319 	bic.w	r3, r3, #25
 800ec70:	4313      	orrs	r3, r2
 800ec72:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 800ec74:	f7fb fcc4 	bl	800a600 <HAL_GetTick>
 800ec78:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ec7a:	e005      	b.n	800ec88 <HAL_RCC_OscConfig+0x1d8>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ec7c:	f7fb fcc0 	bl	800a600 <HAL_GetTick>
 800ec80:	1b80      	subs	r0, r0, r6
 800ec82:	2802      	cmp	r0, #2
 800ec84:	f200 809d 	bhi.w	800edc2 <HAL_RCC_OscConfig+0x312>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ec88:	682b      	ldr	r3, [r5, #0]
 800ec8a:	075f      	lsls	r7, r3, #29
 800ec8c:	d5f6      	bpl.n	800ec7c <HAL_RCC_OscConfig+0x1cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ec8e:	f7fb fccf 	bl	800a630 <HAL_GetREVID>
 800ec92:	f241 0303 	movw	r3, #4099	; 0x1003
 800ec96:	4298      	cmp	r0, r3
 800ec98:	f200 81e5 	bhi.w	800f066 <HAL_RCC_OscConfig+0x5b6>
 800ec9c:	6922      	ldr	r2, [r4, #16]
 800ec9e:	686b      	ldr	r3, [r5, #4]
 800eca0:	2a40      	cmp	r2, #64	; 0x40
 800eca2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800eca6:	bf0c      	ite	eq
 800eca8:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 800ecac:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800ecb0:	606b      	str	r3, [r5, #4]
 800ecb2:	6823      	ldr	r3, [r4, #0]
 800ecb4:	e73d      	b.n	800eb32 <HAL_RCC_OscConfig+0x82>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800ecb6:	0792      	lsls	r2, r2, #30
 800ecb8:	d1d1      	bne.n	800ec5e <HAL_RCC_OscConfig+0x1ae>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ecba:	4b2a      	ldr	r3, [pc, #168]	; (800ed64 <HAL_RCC_OscConfig+0x2b4>)
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	075b      	lsls	r3, r3, #29
 800ecc0:	d501      	bpl.n	800ecc6 <HAL_RCC_OscConfig+0x216>
 800ecc2:	68e3      	ldr	r3, [r4, #12]
 800ecc4:	b30b      	cbz	r3, 800ed0a <HAL_RCC_OscConfig+0x25a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ecc6:	f7fb fcb3 	bl	800a630 <HAL_GetREVID>
 800ecca:	f241 0303 	movw	r3, #4099	; 0x1003
 800ecce:	4298      	cmp	r0, r3
 800ecd0:	f200 80e2 	bhi.w	800ee98 <HAL_RCC_OscConfig+0x3e8>
 800ecd4:	6922      	ldr	r2, [r4, #16]
 800ecd6:	2a40      	cmp	r2, #64	; 0x40
 800ecd8:	f000 80fa 	beq.w	800eed0 <HAL_RCC_OscConfig+0x420>
 800ecdc:	4921      	ldr	r1, [pc, #132]	; (800ed64 <HAL_RCC_OscConfig+0x2b4>)
 800ecde:	684b      	ldr	r3, [r1, #4]
 800ece0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800ece4:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800ece8:	604b      	str	r3, [r1, #4]
 800ecea:	6823      	ldr	r3, [r4, #0]
 800ecec:	e721      	b.n	800eb32 <HAL_RCC_OscConfig+0x82>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800ecee:	f001 0103 	and.w	r1, r1, #3
 800ecf2:	2902      	cmp	r1, #2
 800ecf4:	f47f aeef 	bne.w	800ead6 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ecf8:	4a1a      	ldr	r2, [pc, #104]	; (800ed64 <HAL_RCC_OscConfig+0x2b4>)
 800ecfa:	6812      	ldr	r2, [r2, #0]
 800ecfc:	0392      	lsls	r2, r2, #14
 800ecfe:	f57f af15 	bpl.w	800eb2c <HAL_RCC_OscConfig+0x7c>
 800ed02:	6862      	ldr	r2, [r4, #4]
 800ed04:	2a00      	cmp	r2, #0
 800ed06:	f47f af11 	bne.w	800eb2c <HAL_RCC_OscConfig+0x7c>
        return HAL_ERROR;
 800ed0a:	2001      	movs	r0, #1
}
 800ed0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800ed0e:	f002 0203 	and.w	r2, r2, #3
 800ed12:	2a01      	cmp	r2, #1
 800ed14:	f47f af1a 	bne.w	800eb4c <HAL_RCC_OscConfig+0x9c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ed18:	4b12      	ldr	r3, [pc, #72]	; (800ed64 <HAL_RCC_OscConfig+0x2b4>)
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	05da      	lsls	r2, r3, #23
 800ed1e:	d502      	bpl.n	800ed26 <HAL_RCC_OscConfig+0x276>
 800ed20:	69e3      	ldr	r3, [r4, #28]
 800ed22:	2b80      	cmp	r3, #128	; 0x80
 800ed24:	d1f1      	bne.n	800ed0a <HAL_RCC_OscConfig+0x25a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ed26:	f7fb fc83 	bl	800a630 <HAL_GetREVID>
 800ed2a:	f241 0303 	movw	r3, #4099	; 0x1003
 800ed2e:	4298      	cmp	r0, r3
 800ed30:	f200 80bc 	bhi.w	800eeac <HAL_RCC_OscConfig+0x3fc>
 800ed34:	6a22      	ldr	r2, [r4, #32]
 800ed36:	2a20      	cmp	r2, #32
 800ed38:	f000 81a4 	beq.w	800f084 <HAL_RCC_OscConfig+0x5d4>
 800ed3c:	4909      	ldr	r1, [pc, #36]	; (800ed64 <HAL_RCC_OscConfig+0x2b4>)
 800ed3e:	684b      	ldr	r3, [r1, #4]
 800ed40:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800ed44:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 800ed48:	604b      	str	r3, [r1, #4]
 800ed4a:	6823      	ldr	r3, [r4, #0]
 800ed4c:	e728      	b.n	800eba0 <HAL_RCC_OscConfig+0xf0>
    PWR->CR1 |= PWR_CR1_DBP;
 800ed4e:	4b06      	ldr	r3, [pc, #24]	; (800ed68 <HAL_RCC_OscConfig+0x2b8>)
 800ed50:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ed52:	461d      	mov	r5, r3
    PWR->CR1 |= PWR_CR1_DBP;
 800ed54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ed58:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800ed5a:	f7fb fc51 	bl	800a600 <HAL_GetTick>
 800ed5e:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ed60:	e009      	b.n	800ed76 <HAL_RCC_OscConfig+0x2c6>
 800ed62:	bf00      	nop
 800ed64:	58024400 	.word	0x58024400
 800ed68:	58024800 	.word	0x58024800
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800ed6c:	f7fb fc48 	bl	800a600 <HAL_GetTick>
 800ed70:	1b80      	subs	r0, r0, r6
 800ed72:	2864      	cmp	r0, #100	; 0x64
 800ed74:	d825      	bhi.n	800edc2 <HAL_RCC_OscConfig+0x312>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ed76:	682b      	ldr	r3, [r5, #0]
 800ed78:	05da      	lsls	r2, r3, #23
 800ed7a:	d5f7      	bpl.n	800ed6c <HAL_RCC_OscConfig+0x2bc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ed7c:	68a3      	ldr	r3, [r4, #8]
 800ed7e:	2b01      	cmp	r3, #1
 800ed80:	f000 817a 	beq.w	800f078 <HAL_RCC_OscConfig+0x5c8>
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	f000 8144 	beq.w	800f012 <HAL_RCC_OscConfig+0x562>
 800ed8a:	2b05      	cmp	r3, #5
 800ed8c:	4bae      	ldr	r3, [pc, #696]	; (800f048 <HAL_RCC_OscConfig+0x598>)
 800ed8e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ed90:	f000 8181 	beq.w	800f096 <HAL_RCC_OscConfig+0x5e6>
 800ed94:	f022 0201 	bic.w	r2, r2, #1
 800ed98:	671a      	str	r2, [r3, #112]	; 0x70
 800ed9a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ed9c:	f022 0204 	bic.w	r2, r2, #4
 800eda0:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 800eda2:	f7fb fc2d 	bl	800a600 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800eda6:	4da8      	ldr	r5, [pc, #672]	; (800f048 <HAL_RCC_OscConfig+0x598>)
      tickstart = HAL_GetTick();
 800eda8:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800edaa:	f241 3688 	movw	r6, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800edae:	e004      	b.n	800edba <HAL_RCC_OscConfig+0x30a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800edb0:	f7fb fc26 	bl	800a600 <HAL_GetTick>
 800edb4:	1bc0      	subs	r0, r0, r7
 800edb6:	42b0      	cmp	r0, r6
 800edb8:	d803      	bhi.n	800edc2 <HAL_RCC_OscConfig+0x312>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800edba:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800edbc:	079b      	lsls	r3, r3, #30
 800edbe:	d5f7      	bpl.n	800edb0 <HAL_RCC_OscConfig+0x300>
 800edc0:	e725      	b.n	800ec0e <HAL_RCC_OscConfig+0x15e>
            return HAL_TIMEOUT;
 800edc2:	2003      	movs	r0, #3
}
 800edc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800edc6:	4ba0      	ldr	r3, [pc, #640]	; (800f048 <HAL_RCC_OscConfig+0x598>)
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800edc8:	f241 3788 	movw	r7, #5000	; 0x1388
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800edcc:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800edce:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800edd0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800edd4:	601a      	str	r2, [r3, #0]
 800edd6:	681a      	ldr	r2, [r3, #0]
 800edd8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800eddc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800edde:	f7fb fc0f 	bl	800a600 <HAL_GetTick>
 800ede2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ede4:	e004      	b.n	800edf0 <HAL_RCC_OscConfig+0x340>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ede6:	f7fb fc0b 	bl	800a600 <HAL_GetTick>
 800edea:	1b80      	subs	r0, r0, r6
 800edec:	42b8      	cmp	r0, r7
 800edee:	d8e8      	bhi.n	800edc2 <HAL_RCC_OscConfig+0x312>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800edf0:	682b      	ldr	r3, [r5, #0]
 800edf2:	0398      	lsls	r0, r3, #14
 800edf4:	d4f7      	bmi.n	800ede6 <HAL_RCC_OscConfig+0x336>
 800edf6:	e698      	b.n	800eb2a <HAL_RCC_OscConfig+0x7a>
    return HAL_ERROR;
 800edf8:	2001      	movs	r0, #1
}
 800edfa:	4770      	bx	lr
      __HAL_RCC_LSI_DISABLE();
 800edfc:	4b92      	ldr	r3, [pc, #584]	; (800f048 <HAL_RCC_OscConfig+0x598>)
 800edfe:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ee00:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 800ee02:	f022 0201 	bic.w	r2, r2, #1
 800ee06:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 800ee08:	f7fb fbfa 	bl	800a600 <HAL_GetTick>
 800ee0c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ee0e:	e004      	b.n	800ee1a <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ee10:	f7fb fbf6 	bl	800a600 <HAL_GetTick>
 800ee14:	1b80      	subs	r0, r0, r6
 800ee16:	2802      	cmp	r0, #2
 800ee18:	d8d3      	bhi.n	800edc2 <HAL_RCC_OscConfig+0x312>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ee1a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800ee1c:	0799      	lsls	r1, r3, #30
 800ee1e:	d4f7      	bmi.n	800ee10 <HAL_RCC_OscConfig+0x360>
 800ee20:	e6d7      	b.n	800ebd2 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 800ee22:	4b89      	ldr	r3, [pc, #548]	; (800f048 <HAL_RCC_OscConfig+0x598>)
 800ee24:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ee26:	461d      	mov	r5, r3
      __HAL_RCC_HSI48_DISABLE();
 800ee28:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ee2c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800ee2e:	f7fb fbe7 	bl	800a600 <HAL_GetTick>
 800ee32:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ee34:	e004      	b.n	800ee40 <HAL_RCC_OscConfig+0x390>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800ee36:	f7fb fbe3 	bl	800a600 <HAL_GetTick>
 800ee3a:	1b80      	subs	r0, r0, r6
 800ee3c:	2802      	cmp	r0, #2
 800ee3e:	d8c0      	bhi.n	800edc2 <HAL_RCC_OscConfig+0x312>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ee40:	682b      	ldr	r3, [r5, #0]
 800ee42:	0498      	lsls	r0, r3, #18
 800ee44:	d4f7      	bmi.n	800ee36 <HAL_RCC_OscConfig+0x386>
 800ee46:	e6de      	b.n	800ec06 <HAL_RCC_OscConfig+0x156>
        __HAL_RCC_CSI_DISABLE();
 800ee48:	4b7f      	ldr	r3, [pc, #508]	; (800f048 <HAL_RCC_OscConfig+0x598>)
 800ee4a:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ee4c:	461d      	mov	r5, r3
        __HAL_RCC_CSI_DISABLE();
 800ee4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ee52:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800ee54:	f7fb fbd4 	bl	800a600 <HAL_GetTick>
 800ee58:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ee5a:	e004      	b.n	800ee66 <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800ee5c:	f7fb fbd0 	bl	800a600 <HAL_GetTick>
 800ee60:	1b80      	subs	r0, r0, r6
 800ee62:	2802      	cmp	r0, #2
 800ee64:	d8ad      	bhi.n	800edc2 <HAL_RCC_OscConfig+0x312>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ee66:	682b      	ldr	r3, [r5, #0]
 800ee68:	05df      	lsls	r7, r3, #23
 800ee6a:	d4f7      	bmi.n	800ee5c <HAL_RCC_OscConfig+0x3ac>
 800ee6c:	6823      	ldr	r3, [r4, #0]
 800ee6e:	e697      	b.n	800eba0 <HAL_RCC_OscConfig+0xf0>
        __HAL_RCC_HSI_DISABLE();
 800ee70:	4b75      	ldr	r3, [pc, #468]	; (800f048 <HAL_RCC_OscConfig+0x598>)
 800ee72:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ee74:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 800ee76:	f022 0201 	bic.w	r2, r2, #1
 800ee7a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800ee7c:	f7fb fbc0 	bl	800a600 <HAL_GetTick>
 800ee80:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ee82:	e004      	b.n	800ee8e <HAL_RCC_OscConfig+0x3de>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ee84:	f7fb fbbc 	bl	800a600 <HAL_GetTick>
 800ee88:	1b80      	subs	r0, r0, r6
 800ee8a:	2802      	cmp	r0, #2
 800ee8c:	d899      	bhi.n	800edc2 <HAL_RCC_OscConfig+0x312>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ee8e:	682b      	ldr	r3, [r5, #0]
 800ee90:	0758      	lsls	r0, r3, #29
 800ee92:	d4f7      	bmi.n	800ee84 <HAL_RCC_OscConfig+0x3d4>
 800ee94:	6823      	ldr	r3, [r4, #0]
 800ee96:	e64c      	b.n	800eb32 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ee98:	4a6b      	ldr	r2, [pc, #428]	; (800f048 <HAL_RCC_OscConfig+0x598>)
 800ee9a:	6921      	ldr	r1, [r4, #16]
 800ee9c:	6853      	ldr	r3, [r2, #4]
 800ee9e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800eea2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800eea6:	6053      	str	r3, [r2, #4]
 800eea8:	6823      	ldr	r3, [r4, #0]
 800eeaa:	e642      	b.n	800eb32 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800eeac:	4a66      	ldr	r2, [pc, #408]	; (800f048 <HAL_RCC_OscConfig+0x598>)
 800eeae:	6a21      	ldr	r1, [r4, #32]
 800eeb0:	68d3      	ldr	r3, [r2, #12]
 800eeb2:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800eeb6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800eeba:	60d3      	str	r3, [r2, #12]
 800eebc:	6823      	ldr	r3, [r4, #0]
 800eebe:	e66f      	b.n	800eba0 <HAL_RCC_OscConfig+0xf0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800eec0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800eec4:	601a      	str	r2, [r3, #0]
 800eec6:	681a      	ldr	r2, [r3, #0]
 800eec8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800eecc:	601a      	str	r2, [r3, #0]
 800eece:	e61c      	b.n	800eb0a <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800eed0:	4a5d      	ldr	r2, [pc, #372]	; (800f048 <HAL_RCC_OscConfig+0x598>)
 800eed2:	6853      	ldr	r3, [r2, #4]
 800eed4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800eed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800eedc:	6053      	str	r3, [r2, #4]
 800eede:	6823      	ldr	r3, [r4, #0]
 800eee0:	e627      	b.n	800eb32 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_PLL_DISABLE();
 800eee2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800eee6:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 800eee8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800eeea:	f7fb fb89 	bl	800a600 <HAL_GetTick>
 800eeee:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800eef0:	e005      	b.n	800eefe <HAL_RCC_OscConfig+0x44e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800eef2:	f7fb fb85 	bl	800a600 <HAL_GetTick>
 800eef6:	1b80      	subs	r0, r0, r6
 800eef8:	2802      	cmp	r0, #2
 800eefa:	f63f af62 	bhi.w	800edc2 <HAL_RCC_OscConfig+0x312>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800eefe:	682b      	ldr	r3, [r5, #0]
 800ef00:	0199      	lsls	r1, r3, #6
 800ef02:	d4f6      	bmi.n	800eef2 <HAL_RCC_OscConfig+0x442>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ef04:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800ef06:	4b51      	ldr	r3, [pc, #324]	; (800f04c <HAL_RCC_OscConfig+0x59c>)
 800ef08:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800ef0a:	4013      	ands	r3, r2
 800ef0c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ef0e:	4950      	ldr	r1, [pc, #320]	; (800f050 <HAL_RCC_OscConfig+0x5a0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ef10:	4303      	orrs	r3, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ef12:	4e4d      	ldr	r6, [pc, #308]	; (800f048 <HAL_RCC_OscConfig+0x598>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ef14:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800ef18:	62ab      	str	r3, [r5, #40]	; 0x28
 800ef1a:	6b27      	ldr	r7, [r4, #48]	; 0x30
 800ef1c:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 800ef20:	3f01      	subs	r7, #1
 800ef22:	1e50      	subs	r0, r2, #1
 800ef24:	3b01      	subs	r3, #1
 800ef26:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800ef28:	f3c7 0708 	ubfx	r7, r7, #0, #9
 800ef2c:	025b      	lsls	r3, r3, #9
 800ef2e:	0400      	lsls	r0, r0, #16
 800ef30:	3a01      	subs	r2, #1
 800ef32:	b29b      	uxth	r3, r3
 800ef34:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 800ef38:	0612      	lsls	r2, r2, #24
 800ef3a:	4303      	orrs	r3, r0
 800ef3c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800ef40:	433b      	orrs	r3, r7
 800ef42:	4313      	orrs	r3, r2
 800ef44:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 800ef46:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ef48:	f023 0301 	bic.w	r3, r3, #1
 800ef4c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ef4e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800ef50:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ef52:	4011      	ands	r1, r2
 800ef54:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 800ef58:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800ef5a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ef5c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ef5e:	f023 030c 	bic.w	r3, r3, #12
 800ef62:	4313      	orrs	r3, r2
 800ef64:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800ef66:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ef68:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800ef6a:	f023 0302 	bic.w	r3, r3, #2
 800ef6e:	4313      	orrs	r3, r2
 800ef70:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ef72:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ef74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ef78:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ef7a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ef7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ef80:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ef82:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ef84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ef88:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 800ef8a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ef8c:	f043 0301 	orr.w	r3, r3, #1
 800ef90:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800ef92:	682b      	ldr	r3, [r5, #0]
 800ef94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ef98:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800ef9a:	f7fb fb31 	bl	800a600 <HAL_GetTick>
 800ef9e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800efa0:	e005      	b.n	800efae <HAL_RCC_OscConfig+0x4fe>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800efa2:	f7fb fb2d 	bl	800a600 <HAL_GetTick>
 800efa6:	1b00      	subs	r0, r0, r4
 800efa8:	2802      	cmp	r0, #2
 800efaa:	f63f af0a 	bhi.w	800edc2 <HAL_RCC_OscConfig+0x312>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800efae:	6833      	ldr	r3, [r6, #0]
 800efb0:	019a      	lsls	r2, r3, #6
 800efb2:	d5f6      	bpl.n	800efa2 <HAL_RCC_OscConfig+0x4f2>
 800efb4:	e649      	b.n	800ec4a <HAL_RCC_OscConfig+0x19a>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800efb6:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800efb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800efba:	6b1d      	ldr	r5, [r3, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800efbc:	f43f ae46 	beq.w	800ec4c <HAL_RCC_OscConfig+0x19c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800efc0:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800efc4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800efc6:	428b      	cmp	r3, r1
 800efc8:	f47f ae9f 	bne.w	800ed0a <HAL_RCC_OscConfig+0x25a>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800efcc:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800efd0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800efd2:	429a      	cmp	r2, r3
 800efd4:	f47f ae99 	bne.w	800ed0a <HAL_RCC_OscConfig+0x25a>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800efd8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800efda:	f3c5 0208 	ubfx	r2, r5, #0, #9
 800efde:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800efe0:	429a      	cmp	r2, r3
 800efe2:	f47f ae92 	bne.w	800ed0a <HAL_RCC_OscConfig+0x25a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800efe6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800efe8:	f3c5 2246 	ubfx	r2, r5, #9, #7
 800efec:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800efee:	429a      	cmp	r2, r3
 800eff0:	f47f ae8b 	bne.w	800ed0a <HAL_RCC_OscConfig+0x25a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800eff4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800eff6:	f3c5 4206 	ubfx	r2, r5, #16, #7
 800effa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800effc:	429a      	cmp	r2, r3
 800effe:	f47f ae84 	bne.w	800ed0a <HAL_RCC_OscConfig+0x25a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800f002:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800f004:	f3c5 6506 	ubfx	r5, r5, #24, #7
 800f008:	3801      	subs	r0, #1
    return HAL_ERROR;
 800f00a:	1a28      	subs	r0, r5, r0
 800f00c:	bf18      	it	ne
 800f00e:	2001      	movne	r0, #1
 800f010:	e61c      	b.n	800ec4c <HAL_RCC_OscConfig+0x19c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f012:	4b0d      	ldr	r3, [pc, #52]	; (800f048 <HAL_RCC_OscConfig+0x598>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f014:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f018:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800f01a:	461d      	mov	r5, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f01c:	f022 0201 	bic.w	r2, r2, #1
 800f020:	671a      	str	r2, [r3, #112]	; 0x70
 800f022:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f024:	f022 0204 	bic.w	r2, r2, #4
 800f028:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 800f02a:	f7fb fae9 	bl	800a600 <HAL_GetTick>
 800f02e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800f030:	e005      	b.n	800f03e <HAL_RCC_OscConfig+0x58e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f032:	f7fb fae5 	bl	800a600 <HAL_GetTick>
 800f036:	1b80      	subs	r0, r0, r6
 800f038:	42b8      	cmp	r0, r7
 800f03a:	f63f aec2 	bhi.w	800edc2 <HAL_RCC_OscConfig+0x312>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800f03e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800f040:	0798      	lsls	r0, r3, #30
 800f042:	d4f6      	bmi.n	800f032 <HAL_RCC_OscConfig+0x582>
 800f044:	e5e3      	b.n	800ec0e <HAL_RCC_OscConfig+0x15e>
 800f046:	bf00      	nop
 800f048:	58024400 	.word	0x58024400
 800f04c:	fffffc0c 	.word	0xfffffc0c
 800f050:	ffff0007 	.word	0xffff0007
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800f054:	68eb      	ldr	r3, [r5, #12]
 800f056:	6a22      	ldr	r2, [r4, #32]
 800f058:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800f05c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800f060:	60eb      	str	r3, [r5, #12]
 800f062:	6823      	ldr	r3, [r4, #0]
 800f064:	e59c      	b.n	800eba0 <HAL_RCC_OscConfig+0xf0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f066:	686b      	ldr	r3, [r5, #4]
 800f068:	6922      	ldr	r2, [r4, #16]
 800f06a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800f06e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800f072:	606b      	str	r3, [r5, #4]
 800f074:	6823      	ldr	r3, [r4, #0]
 800f076:	e55c      	b.n	800eb32 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f078:	4a0b      	ldr	r2, [pc, #44]	; (800f0a8 <HAL_RCC_OscConfig+0x5f8>)
 800f07a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800f07c:	f043 0301 	orr.w	r3, r3, #1
 800f080:	6713      	str	r3, [r2, #112]	; 0x70
 800f082:	e68e      	b.n	800eda2 <HAL_RCC_OscConfig+0x2f2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800f084:	4a08      	ldr	r2, [pc, #32]	; (800f0a8 <HAL_RCC_OscConfig+0x5f8>)
 800f086:	6853      	ldr	r3, [r2, #4]
 800f088:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800f08c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f090:	6053      	str	r3, [r2, #4]
 800f092:	6823      	ldr	r3, [r4, #0]
 800f094:	e584      	b.n	800eba0 <HAL_RCC_OscConfig+0xf0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f096:	f042 0204 	orr.w	r2, r2, #4
 800f09a:	671a      	str	r2, [r3, #112]	; 0x70
 800f09c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f09e:	f042 0201 	orr.w	r2, r2, #1
 800f0a2:	671a      	str	r2, [r3, #112]	; 0x70
 800f0a4:	e67d      	b.n	800eda2 <HAL_RCC_OscConfig+0x2f2>
 800f0a6:	bf00      	nop
 800f0a8:	58024400 	.word	0x58024400

0800f0ac <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f0ac:	4a3e      	ldr	r2, [pc, #248]	; (800f1a8 <HAL_RCC_GetSysClockFreq+0xfc>)
 800f0ae:	6913      	ldr	r3, [r2, #16]
 800f0b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f0b4:	2b10      	cmp	r3, #16
 800f0b6:	d04f      	beq.n	800f158 <HAL_RCC_GetSysClockFreq+0xac>
 800f0b8:	2b18      	cmp	r3, #24
 800f0ba:	d00b      	beq.n	800f0d4 <HAL_RCC_GetSysClockFreq+0x28>
 800f0bc:	b10b      	cbz	r3, 800f0c2 <HAL_RCC_GetSysClockFreq+0x16>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800f0be:	483b      	ldr	r0, [pc, #236]	; (800f1ac <HAL_RCC_GetSysClockFreq+0x100>)
 800f0c0:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f0c2:	6813      	ldr	r3, [r2, #0]
 800f0c4:	0699      	lsls	r1, r3, #26
 800f0c6:	d549      	bpl.n	800f15c <HAL_RCC_GetSysClockFreq+0xb0>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f0c8:	6813      	ldr	r3, [r2, #0]
 800f0ca:	4839      	ldr	r0, [pc, #228]	; (800f1b0 <HAL_RCC_GetSysClockFreq+0x104>)
 800f0cc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800f0d0:	40d8      	lsrs	r0, r3
 800f0d2:	4770      	bx	lr
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f0d4:	6a91      	ldr	r1, [r2, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800f0d6:	6a90      	ldr	r0, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800f0d8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800f0da:	f3c0 1005 	ubfx	r0, r0, #4, #6
{
 800f0de:	b410      	push	{r4}
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800f0e0:	6b54      	ldr	r4, [r2, #52]	; 0x34

    if (pllm != 0U)
 800f0e2:	b3b0      	cbz	r0, 800f152 <HAL_RCC_GetSysClockFreq+0xa6>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800f0e4:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800f0e8:	f003 0301 	and.w	r3, r3, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f0ec:	f001 0103 	and.w	r1, r1, #3
 800f0f0:	ee07 0a90 	vmov	s15, r0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800f0f4:	fb03 f304 	mul.w	r3, r3, r4
    {
      switch (pllsource)
 800f0f8:	2901      	cmp	r1, #1
 800f0fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800f0fe:	ee07 3a10 	vmov	s14, r3
 800f102:	eeba 7ae9 	vcvt.f32.s32	s14, s14, #13
      switch (pllsource)
 800f106:	d002      	beq.n	800f10e <HAL_RCC_GetSysClockFreq+0x62>
 800f108:	d32d      	bcc.n	800f166 <HAL_RCC_GetSysClockFreq+0xba>
 800f10a:	2902      	cmp	r1, #2
 800f10c:	d028      	beq.n	800f160 <HAL_RCC_GetSysClockFreq+0xb4>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f10e:	eddf 5a29 	vldr	s11, [pc, #164]	; 800f1b4 <HAL_RCC_GetSysClockFreq+0x108>
 800f112:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 800f116:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800f118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f11c:	ee07 3a90 	vmov	s15, r3
 800f120:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800f124:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f128:	ee77 7a86 	vadd.f32	s15, s15, s12
 800f12c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f130:	ee27 7a26 	vmul.f32	s14, s14, s13
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800f134:	4b1c      	ldr	r3, [pc, #112]	; (800f1a8 <HAL_RCC_GetSysClockFreq+0xfc>)
 800f136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f138:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800f13c:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800f13e:	ee07 3a90 	vmov	s15, r3
 800f142:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f146:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f14a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f14e:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 800f152:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f156:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 800f158:	4817      	ldr	r0, [pc, #92]	; (800f1b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800f15a:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 800f15c:	4814      	ldr	r0, [pc, #80]	; (800f1b0 <HAL_RCC_GetSysClockFreq+0x104>)
}
 800f15e:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f160:	eddf 5a16 	vldr	s11, [pc, #88]	; 800f1bc <HAL_RCC_GetSysClockFreq+0x110>
 800f164:	e7d5      	b.n	800f112 <HAL_RCC_GetSysClockFreq+0x66>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f166:	6813      	ldr	r3, [r2, #0]
 800f168:	069b      	lsls	r3, r3, #26
 800f16a:	d51a      	bpl.n	800f1a2 <HAL_RCC_GetSysClockFreq+0xf6>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f16c:	6810      	ldr	r0, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f16e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f172:	490f      	ldr	r1, [pc, #60]	; (800f1b0 <HAL_RCC_GetSysClockFreq+0x104>)
 800f174:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f178:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f17a:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f17c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f180:	ee06 1a90 	vmov	s13, r1
 800f184:	eef8 5ae6 	vcvt.f32.s32	s11, s13
 800f188:	ee06 3a90 	vmov	s13, r3
 800f18c:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
 800f190:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 800f194:	ee76 7a05 	vadd.f32	s15, s12, s10
 800f198:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f19c:	ee26 7a87 	vmul.f32	s14, s13, s14
 800f1a0:	e7c8      	b.n	800f134 <HAL_RCC_GetSysClockFreq+0x88>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f1a2:	eddf 5a07 	vldr	s11, [pc, #28]	; 800f1c0 <HAL_RCC_GetSysClockFreq+0x114>
 800f1a6:	e7b4      	b.n	800f112 <HAL_RCC_GetSysClockFreq+0x66>
 800f1a8:	58024400 	.word	0x58024400
 800f1ac:	003d0900 	.word	0x003d0900
 800f1b0:	03d09000 	.word	0x03d09000
 800f1b4:	4a742400 	.word	0x4a742400
 800f1b8:	017d7840 	.word	0x017d7840
 800f1bc:	4bbebc20 	.word	0x4bbebc20
 800f1c0:	4c742400 	.word	0x4c742400

0800f1c4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800f1c4:	b178      	cbz	r0, 800f1e6 <HAL_RCC_ClockConfig+0x22>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800f1c6:	4a8e      	ldr	r2, [pc, #568]	; (800f400 <HAL_RCC_ClockConfig+0x23c>)
 800f1c8:	6813      	ldr	r3, [r2, #0]
 800f1ca:	f003 030f 	and.w	r3, r3, #15
 800f1ce:	428b      	cmp	r3, r1
 800f1d0:	d20b      	bcs.n	800f1ea <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f1d2:	6813      	ldr	r3, [r2, #0]
 800f1d4:	f023 030f 	bic.w	r3, r3, #15
 800f1d8:	430b      	orrs	r3, r1
 800f1da:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f1dc:	6813      	ldr	r3, [r2, #0]
 800f1de:	f003 030f 	and.w	r3, r3, #15
 800f1e2:	428b      	cmp	r3, r1
 800f1e4:	d001      	beq.n	800f1ea <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 800f1e6:	2001      	movs	r0, #1
}
 800f1e8:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800f1ea:	6803      	ldr	r3, [r0, #0]
{
 800f1ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800f1f0:	075d      	lsls	r5, r3, #29
 800f1f2:	d50b      	bpl.n	800f20c <HAL_RCC_ClockConfig+0x48>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800f1f4:	4c83      	ldr	r4, [pc, #524]	; (800f404 <HAL_RCC_ClockConfig+0x240>)
 800f1f6:	6905      	ldr	r5, [r0, #16]
 800f1f8:	69a2      	ldr	r2, [r4, #24]
 800f1fa:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800f1fe:	4295      	cmp	r5, r2
 800f200:	d904      	bls.n	800f20c <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800f202:	69a2      	ldr	r2, [r4, #24]
 800f204:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800f208:	432a      	orrs	r2, r5
 800f20a:	61a2      	str	r2, [r4, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f20c:	071c      	lsls	r4, r3, #28
 800f20e:	d50b      	bpl.n	800f228 <HAL_RCC_ClockConfig+0x64>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800f210:	4c7c      	ldr	r4, [pc, #496]	; (800f404 <HAL_RCC_ClockConfig+0x240>)
 800f212:	6945      	ldr	r5, [r0, #20]
 800f214:	69e2      	ldr	r2, [r4, #28]
 800f216:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800f21a:	4295      	cmp	r5, r2
 800f21c:	d904      	bls.n	800f228 <HAL_RCC_ClockConfig+0x64>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800f21e:	69e2      	ldr	r2, [r4, #28]
 800f220:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800f224:	432a      	orrs	r2, r5
 800f226:	61e2      	str	r2, [r4, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f228:	06da      	lsls	r2, r3, #27
 800f22a:	d50b      	bpl.n	800f244 <HAL_RCC_ClockConfig+0x80>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800f22c:	4c75      	ldr	r4, [pc, #468]	; (800f404 <HAL_RCC_ClockConfig+0x240>)
 800f22e:	6985      	ldr	r5, [r0, #24]
 800f230:	69e2      	ldr	r2, [r4, #28]
 800f232:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800f236:	4295      	cmp	r5, r2
 800f238:	d904      	bls.n	800f244 <HAL_RCC_ClockConfig+0x80>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800f23a:	69e2      	ldr	r2, [r4, #28]
 800f23c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f240:	432a      	orrs	r2, r5
 800f242:	61e2      	str	r2, [r4, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800f244:	069f      	lsls	r7, r3, #26
 800f246:	d50b      	bpl.n	800f260 <HAL_RCC_ClockConfig+0x9c>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800f248:	4c6e      	ldr	r4, [pc, #440]	; (800f404 <HAL_RCC_ClockConfig+0x240>)
 800f24a:	69c5      	ldr	r5, [r0, #28]
 800f24c:	6a22      	ldr	r2, [r4, #32]
 800f24e:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800f252:	4295      	cmp	r5, r2
 800f254:	d904      	bls.n	800f260 <HAL_RCC_ClockConfig+0x9c>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800f256:	6a22      	ldr	r2, [r4, #32]
 800f258:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800f25c:	432a      	orrs	r2, r5
 800f25e:	6222      	str	r2, [r4, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f260:	079e      	lsls	r6, r3, #30
 800f262:	4604      	mov	r4, r0
 800f264:	460d      	mov	r5, r1
 800f266:	f003 0201 	and.w	r2, r3, #1
 800f26a:	d55d      	bpl.n	800f328 <HAL_RCC_ClockConfig+0x164>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800f26c:	4e65      	ldr	r6, [pc, #404]	; (800f404 <HAL_RCC_ClockConfig+0x240>)
 800f26e:	68c0      	ldr	r0, [r0, #12]
 800f270:	69b1      	ldr	r1, [r6, #24]
 800f272:	f001 010f 	and.w	r1, r1, #15
 800f276:	4288      	cmp	r0, r1
 800f278:	d904      	bls.n	800f284 <HAL_RCC_ClockConfig+0xc0>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f27a:	69b1      	ldr	r1, [r6, #24]
 800f27c:	f021 010f 	bic.w	r1, r1, #15
 800f280:	4301      	orrs	r1, r0
 800f282:	61b1      	str	r1, [r6, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f284:	2a00      	cmp	r2, #0
 800f286:	d031      	beq.n	800f2ec <HAL_RCC_ClockConfig+0x128>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800f288:	4a5e      	ldr	r2, [pc, #376]	; (800f404 <HAL_RCC_ClockConfig+0x240>)
 800f28a:	68a1      	ldr	r1, [r4, #8]
 800f28c:	6993      	ldr	r3, [r2, #24]
 800f28e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800f292:	430b      	orrs	r3, r1
 800f294:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f296:	6863      	ldr	r3, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f298:	6812      	ldr	r2, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f29a:	2b02      	cmp	r3, #2
 800f29c:	f000 80a2 	beq.w	800f3e4 <HAL_RCC_ClockConfig+0x220>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800f2a0:	2b03      	cmp	r3, #3
 800f2a2:	f000 80a5 	beq.w	800f3f0 <HAL_RCC_ClockConfig+0x22c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800f2a6:	2b01      	cmp	r3, #1
 800f2a8:	f000 80a6 	beq.w	800f3f8 <HAL_RCC_ClockConfig+0x234>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f2ac:	0757      	lsls	r7, r2, #29
 800f2ae:	d538      	bpl.n	800f322 <HAL_RCC_ClockConfig+0x15e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800f2b0:	4954      	ldr	r1, [pc, #336]	; (800f404 <HAL_RCC_ClockConfig+0x240>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f2b2:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800f2b6:	690a      	ldr	r2, [r1, #16]
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f2b8:	460e      	mov	r6, r1
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800f2ba:	f022 0207 	bic.w	r2, r2, #7
 800f2be:	4313      	orrs	r3, r2
 800f2c0:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 800f2c2:	f7fb f99d 	bl	800a600 <HAL_GetTick>
 800f2c6:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f2c8:	e005      	b.n	800f2d6 <HAL_RCC_ClockConfig+0x112>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f2ca:	f7fb f999 	bl	800a600 <HAL_GetTick>
 800f2ce:	1bc0      	subs	r0, r0, r7
 800f2d0:	4540      	cmp	r0, r8
 800f2d2:	f200 808b 	bhi.w	800f3ec <HAL_RCC_ClockConfig+0x228>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f2d6:	6933      	ldr	r3, [r6, #16]
 800f2d8:	6862      	ldr	r2, [r4, #4]
 800f2da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f2de:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800f2e2:	d1f2      	bne.n	800f2ca <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f2e4:	6823      	ldr	r3, [r4, #0]
 800f2e6:	079e      	lsls	r6, r3, #30
 800f2e8:	d50b      	bpl.n	800f302 <HAL_RCC_ClockConfig+0x13e>
 800f2ea:	68e0      	ldr	r0, [r4, #12]
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800f2ec:	4945      	ldr	r1, [pc, #276]	; (800f404 <HAL_RCC_ClockConfig+0x240>)
 800f2ee:	698a      	ldr	r2, [r1, #24]
 800f2f0:	f002 020f 	and.w	r2, r2, #15
 800f2f4:	4282      	cmp	r2, r0
 800f2f6:	d904      	bls.n	800f302 <HAL_RCC_ClockConfig+0x13e>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f2f8:	698a      	ldr	r2, [r1, #24]
 800f2fa:	f022 020f 	bic.w	r2, r2, #15
 800f2fe:	4310      	orrs	r0, r2
 800f300:	6188      	str	r0, [r1, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800f302:	493f      	ldr	r1, [pc, #252]	; (800f400 <HAL_RCC_ClockConfig+0x23c>)
 800f304:	680a      	ldr	r2, [r1, #0]
 800f306:	f002 020f 	and.w	r2, r2, #15
 800f30a:	42aa      	cmp	r2, r5
 800f30c:	d914      	bls.n	800f338 <HAL_RCC_ClockConfig+0x174>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f30e:	680a      	ldr	r2, [r1, #0]
 800f310:	f022 020f 	bic.w	r2, r2, #15
 800f314:	432a      	orrs	r2, r5
 800f316:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f318:	680a      	ldr	r2, [r1, #0]
 800f31a:	f002 020f 	and.w	r2, r2, #15
 800f31e:	42aa      	cmp	r2, r5
 800f320:	d00a      	beq.n	800f338 <HAL_RCC_ClockConfig+0x174>
    return HAL_ERROR;
 800f322:	2001      	movs	r0, #1
}
 800f324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f328:	2a00      	cmp	r2, #0
 800f32a:	d1ad      	bne.n	800f288 <HAL_RCC_ClockConfig+0xc4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800f32c:	4934      	ldr	r1, [pc, #208]	; (800f400 <HAL_RCC_ClockConfig+0x23c>)
 800f32e:	680a      	ldr	r2, [r1, #0]
 800f330:	f002 020f 	and.w	r2, r2, #15
 800f334:	42aa      	cmp	r2, r5
 800f336:	d8ea      	bhi.n	800f30e <HAL_RCC_ClockConfig+0x14a>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800f338:	0758      	lsls	r0, r3, #29
 800f33a:	d50b      	bpl.n	800f354 <HAL_RCC_ClockConfig+0x190>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800f33c:	4931      	ldr	r1, [pc, #196]	; (800f404 <HAL_RCC_ClockConfig+0x240>)
 800f33e:	6920      	ldr	r0, [r4, #16]
 800f340:	698a      	ldr	r2, [r1, #24]
 800f342:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800f346:	4290      	cmp	r0, r2
 800f348:	d204      	bcs.n	800f354 <HAL_RCC_ClockConfig+0x190>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800f34a:	698a      	ldr	r2, [r1, #24]
 800f34c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800f350:	4302      	orrs	r2, r0
 800f352:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f354:	0719      	lsls	r1, r3, #28
 800f356:	d50b      	bpl.n	800f370 <HAL_RCC_ClockConfig+0x1ac>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800f358:	492a      	ldr	r1, [pc, #168]	; (800f404 <HAL_RCC_ClockConfig+0x240>)
 800f35a:	6960      	ldr	r0, [r4, #20]
 800f35c:	69ca      	ldr	r2, [r1, #28]
 800f35e:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800f362:	4290      	cmp	r0, r2
 800f364:	d204      	bcs.n	800f370 <HAL_RCC_ClockConfig+0x1ac>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800f366:	69ca      	ldr	r2, [r1, #28]
 800f368:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800f36c:	4302      	orrs	r2, r0
 800f36e:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f370:	06da      	lsls	r2, r3, #27
 800f372:	d50b      	bpl.n	800f38c <HAL_RCC_ClockConfig+0x1c8>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800f374:	4923      	ldr	r1, [pc, #140]	; (800f404 <HAL_RCC_ClockConfig+0x240>)
 800f376:	69a0      	ldr	r0, [r4, #24]
 800f378:	69ca      	ldr	r2, [r1, #28]
 800f37a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800f37e:	4290      	cmp	r0, r2
 800f380:	d204      	bcs.n	800f38c <HAL_RCC_ClockConfig+0x1c8>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800f382:	69ca      	ldr	r2, [r1, #28]
 800f384:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f388:	4302      	orrs	r2, r0
 800f38a:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800f38c:	069b      	lsls	r3, r3, #26
 800f38e:	d50b      	bpl.n	800f3a8 <HAL_RCC_ClockConfig+0x1e4>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800f390:	4a1c      	ldr	r2, [pc, #112]	; (800f404 <HAL_RCC_ClockConfig+0x240>)
 800f392:	69e1      	ldr	r1, [r4, #28]
 800f394:	6a13      	ldr	r3, [r2, #32]
 800f396:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800f39a:	4299      	cmp	r1, r3
 800f39c:	d204      	bcs.n	800f3a8 <HAL_RCC_ClockConfig+0x1e4>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800f39e:	6a13      	ldr	r3, [r2, #32]
 800f3a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f3a4:	430b      	orrs	r3, r1
 800f3a6:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800f3a8:	f7ff fe80 	bl	800f0ac <HAL_RCC_GetSysClockFreq>
 800f3ac:	4a15      	ldr	r2, [pc, #84]	; (800f404 <HAL_RCC_ClockConfig+0x240>)
 800f3ae:	4916      	ldr	r1, [pc, #88]	; (800f408 <HAL_RCC_ClockConfig+0x244>)
 800f3b0:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f3b2:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800f3b4:	f3c3 2303 	ubfx	r3, r3, #8, #4
  halstatus = HAL_InitTick (uwTickPrio);
 800f3b8:	4d14      	ldr	r5, [pc, #80]	; (800f40c <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f3ba:	f002 020f 	and.w	r2, r2, #15
 800f3be:	4c14      	ldr	r4, [pc, #80]	; (800f410 <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800f3c0:	5ccb      	ldrb	r3, [r1, r3]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f3c2:	5c8a      	ldrb	r2, [r1, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800f3c4:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = common_system_clock;
 800f3c8:	4912      	ldr	r1, [pc, #72]	; (800f414 <HAL_RCC_ClockConfig+0x250>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f3ca:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800f3ce:	fa20 f303 	lsr.w	r3, r0, r3
  halstatus = HAL_InitTick (uwTickPrio);
 800f3d2:	6828      	ldr	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f3d4:	fa23 f202 	lsr.w	r2, r3, r2
  SystemCoreClock = common_system_clock;
 800f3d8:	600b      	str	r3, [r1, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f3da:	6022      	str	r2, [r4, #0]
}
 800f3dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 800f3e0:	f7fb b8aa 	b.w	800a538 <HAL_InitTick>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f3e4:	0390      	lsls	r0, r2, #14
 800f3e6:	f53f af63 	bmi.w	800f2b0 <HAL_RCC_ClockConfig+0xec>
 800f3ea:	e79a      	b.n	800f322 <HAL_RCC_ClockConfig+0x15e>
            return HAL_TIMEOUT;
 800f3ec:	2003      	movs	r0, #3
 800f3ee:	e799      	b.n	800f324 <HAL_RCC_ClockConfig+0x160>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800f3f0:	0191      	lsls	r1, r2, #6
 800f3f2:	f53f af5d 	bmi.w	800f2b0 <HAL_RCC_ClockConfig+0xec>
 800f3f6:	e794      	b.n	800f322 <HAL_RCC_ClockConfig+0x15e>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800f3f8:	05d2      	lsls	r2, r2, #23
 800f3fa:	f53f af59 	bmi.w	800f2b0 <HAL_RCC_ClockConfig+0xec>
 800f3fe:	e790      	b.n	800f322 <HAL_RCC_ClockConfig+0x15e>
 800f400:	52002000 	.word	0x52002000
 800f404:	58024400 	.word	0x58024400
 800f408:	08020a64 	.word	0x08020a64
 800f40c:	240025ac 	.word	0x240025ac
 800f410:	240024d0 	.word	0x240024d0
 800f414:	240024cc 	.word	0x240024cc

0800f418 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f418:	4a49      	ldr	r2, [pc, #292]	; (800f540 <HAL_RCC_GetHCLKFreq+0x128>)
 800f41a:	6913      	ldr	r3, [r2, #16]
 800f41c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f420:	2b10      	cmp	r3, #16
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f422:	b430      	push	{r4, r5}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f424:	d064      	beq.n	800f4f0 <HAL_RCC_GetHCLKFreq+0xd8>
 800f426:	2b18      	cmp	r3, #24
 800f428:	d022      	beq.n	800f470 <HAL_RCC_GetHCLKFreq+0x58>
 800f42a:	b1bb      	cbz	r3, 800f45c <HAL_RCC_GetHCLKFreq+0x44>
    sysclockfreq = CSI_VALUE;
 800f42c:	4b45      	ldr	r3, [pc, #276]	; (800f544 <HAL_RCC_GetHCLKFreq+0x12c>)
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800f42e:	4944      	ldr	r1, [pc, #272]	; (800f540 <HAL_RCC_GetHCLKFreq+0x128>)
 800f430:	4845      	ldr	r0, [pc, #276]	; (800f548 <HAL_RCC_GetHCLKFreq+0x130>)
 800f432:	698a      	ldr	r2, [r1, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f434:	6989      	ldr	r1, [r1, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800f436:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f43a:	4c44      	ldr	r4, [pc, #272]	; (800f54c <HAL_RCC_GetHCLKFreq+0x134>)
 800f43c:	f001 010f 	and.w	r1, r1, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800f440:	4d43      	ldr	r5, [pc, #268]	; (800f550 <HAL_RCC_GetHCLKFreq+0x138>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800f442:	5c82      	ldrb	r2, [r0, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f444:	5c40      	ldrb	r0, [r0, r1]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800f446:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f44a:	f000 001f 	and.w	r0, r0, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800f44e:	40d3      	lsrs	r3, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f450:	fa23 f000 	lsr.w	r0, r3, r0
  SystemCoreClock = common_system_clock;
 800f454:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f456:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800f458:	bc30      	pop	{r4, r5}
 800f45a:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f45c:	6813      	ldr	r3, [r2, #0]
 800f45e:	0699      	lsls	r1, r3, #26
 800f460:	d548      	bpl.n	800f4f4 <HAL_RCC_GetHCLKFreq+0xdc>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f462:	6813      	ldr	r3, [r2, #0]
 800f464:	4a3b      	ldr	r2, [pc, #236]	; (800f554 <HAL_RCC_GetHCLKFreq+0x13c>)
 800f466:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800f46a:	fa22 f303 	lsr.w	r3, r2, r3
 800f46e:	e7de      	b.n	800f42e <HAL_RCC_GetHCLKFreq+0x16>
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f470:	6a90      	ldr	r0, [r2, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800f472:	6a93      	ldr	r3, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800f474:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800f476:	f3c3 1305 	ubfx	r3, r3, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800f47a:	6b54      	ldr	r4, [r2, #52]	; 0x34
    if (pllm != 0U)
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d0d6      	beq.n	800f42e <HAL_RCC_GetHCLKFreq+0x16>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800f480:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800f484:	f001 0101 	and.w	r1, r1, #1
 800f488:	ee07 3a90 	vmov	s15, r3
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f48c:	f000 0003 	and.w	r0, r0, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800f490:	fb01 f304 	mul.w	r3, r1, r4
 800f494:	eef8 6ae7 	vcvt.f32.s32	s13, s15
      switch (pllsource)
 800f498:	2801      	cmp	r0, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800f49a:	ee07 3a90 	vmov	s15, r3
 800f49e:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
      switch (pllsource)
 800f4a2:	d002      	beq.n	800f4aa <HAL_RCC_GetHCLKFreq+0x92>
 800f4a4:	d32b      	bcc.n	800f4fe <HAL_RCC_GetHCLKFreq+0xe6>
 800f4a6:	2802      	cmp	r0, #2
 800f4a8:	d026      	beq.n	800f4f8 <HAL_RCC_GetHCLKFreq+0xe0>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f4aa:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800f558 <HAL_RCC_GetHCLKFreq+0x140>
 800f4ae:	ee87 6a26 	vdiv.f32	s12, s14, s13
 800f4b2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800f4b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f4b8:	ee07 3a10 	vmov	s14, r3
 800f4bc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800f4c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f4c4:	ee37 7a25 	vadd.f32	s14, s14, s11
 800f4c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f4cc:	ee67 7a86 	vmul.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800f4d0:	4b1b      	ldr	r3, [pc, #108]	; (800f540 <HAL_RCC_GetHCLKFreq+0x128>)
 800f4d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4d4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800f4d8:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800f4da:	ee07 3a10 	vmov	s14, r3
 800f4de:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f4e2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800f4e6:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 800f4ea:	ee17 3a90 	vmov	r3, s15
 800f4ee:	e79e      	b.n	800f42e <HAL_RCC_GetHCLKFreq+0x16>
    sysclockfreq = HSE_VALUE;
 800f4f0:	4b1a      	ldr	r3, [pc, #104]	; (800f55c <HAL_RCC_GetHCLKFreq+0x144>)
 800f4f2:	e79c      	b.n	800f42e <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800f4f4:	4b17      	ldr	r3, [pc, #92]	; (800f554 <HAL_RCC_GetHCLKFreq+0x13c>)
 800f4f6:	e79a      	b.n	800f42e <HAL_RCC_GetHCLKFreq+0x16>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f4f8:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800f560 <HAL_RCC_GetHCLKFreq+0x148>
 800f4fc:	e7d7      	b.n	800f4ae <HAL_RCC_GetHCLKFreq+0x96>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f4fe:	6813      	ldr	r3, [r2, #0]
 800f500:	069b      	lsls	r3, r3, #26
 800f502:	d51a      	bpl.n	800f53a <HAL_RCC_GetHCLKFreq+0x122>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f504:	6810      	ldr	r0, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f506:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f50a:	4912      	ldr	r1, [pc, #72]	; (800f554 <HAL_RCC_GetHCLKFreq+0x13c>)
 800f50c:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f510:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f512:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f514:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f518:	ee07 1a10 	vmov	s14, r1
 800f51c:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 800f520:	ee07 3a10 	vmov	s14, r3
 800f524:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 800f528:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 800f52c:	ee76 6a05 	vadd.f32	s13, s12, s10
 800f530:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f534:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f538:	e7ca      	b.n	800f4d0 <HAL_RCC_GetHCLKFreq+0xb8>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f53a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800f564 <HAL_RCC_GetHCLKFreq+0x14c>
 800f53e:	e7b6      	b.n	800f4ae <HAL_RCC_GetHCLKFreq+0x96>
 800f540:	58024400 	.word	0x58024400
 800f544:	003d0900 	.word	0x003d0900
 800f548:	08020a64 	.word	0x08020a64
 800f54c:	240024d0 	.word	0x240024d0
 800f550:	240024cc 	.word	0x240024cc
 800f554:	03d09000 	.word	0x03d09000
 800f558:	4a742400 	.word	0x4a742400
 800f55c:	017d7840 	.word	0x017d7840
 800f560:	4bbebc20 	.word	0x4bbebc20
 800f564:	4c742400 	.word	0x4c742400

0800f568 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f568:	494d      	ldr	r1, [pc, #308]	; (800f6a0 <HAL_RCC_GetPCLK1Freq+0x138>)
 800f56a:	690b      	ldr	r3, [r1, #16]
 800f56c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f570:	2b10      	cmp	r3, #16
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f572:	b430      	push	{r4, r5}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f574:	d06b      	beq.n	800f64e <HAL_RCC_GetPCLK1Freq+0xe6>
 800f576:	2b18      	cmp	r3, #24
 800f578:	d029      	beq.n	800f5ce <HAL_RCC_GetPCLK1Freq+0x66>
 800f57a:	b1fb      	cbz	r3, 800f5bc <HAL_RCC_GetPCLK1Freq+0x54>
    sysclockfreq = CSI_VALUE;
 800f57c:	4a49      	ldr	r2, [pc, #292]	; (800f6a4 <HAL_RCC_GetPCLK1Freq+0x13c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800f57e:	4848      	ldr	r0, [pc, #288]	; (800f6a0 <HAL_RCC_GetPCLK1Freq+0x138>)
 800f580:	4949      	ldr	r1, [pc, #292]	; (800f6a8 <HAL_RCC_GetPCLK1Freq+0x140>)
 800f582:	6984      	ldr	r4, [r0, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f584:	6983      	ldr	r3, [r0, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800f586:	f3c4 2403 	ubfx	r4, r4, #8, #4
  SystemCoreClock = common_system_clock;
 800f58a:	4d48      	ldr	r5, [pc, #288]	; (800f6ac <HAL_RCC_GetPCLK1Freq+0x144>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f58c:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800f590:	5d0c      	ldrb	r4, [r1, r4]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f592:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800f594:	f004 041f 	and.w	r4, r4, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f598:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800f59c:	40e2      	lsrs	r2, r4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f59e:	4c44      	ldr	r4, [pc, #272]	; (800f6b0 <HAL_RCC_GetPCLK1Freq+0x148>)
 800f5a0:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 800f5a4:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f5a6:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800f5a8:	69c2      	ldr	r2, [r0, #28]
 800f5aa:	f3c2 1202 	ubfx	r2, r2, #4, #3
 800f5ae:	5c88      	ldrb	r0, [r1, r2]
 800f5b0:	f000 001f 	and.w	r0, r0, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800f5b4:	bc30      	pop	{r4, r5}
 800f5b6:	fa23 f000 	lsr.w	r0, r3, r0
 800f5ba:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f5bc:	680b      	ldr	r3, [r1, #0]
 800f5be:	069a      	lsls	r2, r3, #26
 800f5c0:	d547      	bpl.n	800f652 <HAL_RCC_GetPCLK1Freq+0xea>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f5c2:	680b      	ldr	r3, [r1, #0]
 800f5c4:	4a3b      	ldr	r2, [pc, #236]	; (800f6b4 <HAL_RCC_GetPCLK1Freq+0x14c>)
 800f5c6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800f5ca:	40da      	lsrs	r2, r3
 800f5cc:	e7d7      	b.n	800f57e <HAL_RCC_GetPCLK1Freq+0x16>
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f5ce:	6a88      	ldr	r0, [r1, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800f5d0:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800f5d2:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800f5d4:	f3c2 1205 	ubfx	r2, r2, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800f5d8:	6b4c      	ldr	r4, [r1, #52]	; 0x34
    if (pllm != 0U)
 800f5da:	2a00      	cmp	r2, #0
 800f5dc:	d0cf      	beq.n	800f57e <HAL_RCC_GetPCLK1Freq+0x16>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800f5de:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800f5e2:	f003 0301 	and.w	r3, r3, #1
 800f5e6:	ee07 2a90 	vmov	s15, r2
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f5ea:	f000 0003 	and.w	r0, r0, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800f5ee:	fb03 f304 	mul.w	r3, r3, r4
 800f5f2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
      switch (pllsource)
 800f5f6:	2801      	cmp	r0, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800f5f8:	ee07 3a90 	vmov	s15, r3
 800f5fc:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
      switch (pllsource)
 800f600:	d002      	beq.n	800f608 <HAL_RCC_GetPCLK1Freq+0xa0>
 800f602:	d32b      	bcc.n	800f65c <HAL_RCC_GetPCLK1Freq+0xf4>
 800f604:	2802      	cmp	r0, #2
 800f606:	d026      	beq.n	800f656 <HAL_RCC_GetPCLK1Freq+0xee>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f608:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800f6b8 <HAL_RCC_GetPCLK1Freq+0x150>
 800f60c:	ee87 6a26 	vdiv.f32	s12, s14, s13
 800f610:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800f612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f616:	ee07 3a10 	vmov	s14, r3
 800f61a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800f61e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f622:	ee37 7a25 	vadd.f32	s14, s14, s11
 800f626:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f62a:	ee67 7a86 	vmul.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800f62e:	4b1c      	ldr	r3, [pc, #112]	; (800f6a0 <HAL_RCC_GetPCLK1Freq+0x138>)
 800f630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f632:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800f636:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800f638:	ee07 3a10 	vmov	s14, r3
 800f63c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f640:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800f644:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 800f648:	ee17 2a90 	vmov	r2, s15
 800f64c:	e797      	b.n	800f57e <HAL_RCC_GetPCLK1Freq+0x16>
    sysclockfreq = HSE_VALUE;
 800f64e:	4a1b      	ldr	r2, [pc, #108]	; (800f6bc <HAL_RCC_GetPCLK1Freq+0x154>)
 800f650:	e795      	b.n	800f57e <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800f652:	4a18      	ldr	r2, [pc, #96]	; (800f6b4 <HAL_RCC_GetPCLK1Freq+0x14c>)
 800f654:	e793      	b.n	800f57e <HAL_RCC_GetPCLK1Freq+0x16>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f656:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800f6c0 <HAL_RCC_GetPCLK1Freq+0x158>
 800f65a:	e7d7      	b.n	800f60c <HAL_RCC_GetPCLK1Freq+0xa4>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f65c:	680b      	ldr	r3, [r1, #0]
 800f65e:	069b      	lsls	r3, r3, #26
 800f660:	d51a      	bpl.n	800f698 <HAL_RCC_GetPCLK1Freq+0x130>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f662:	6808      	ldr	r0, [r1, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f664:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f668:	4a12      	ldr	r2, [pc, #72]	; (800f6b4 <HAL_RCC_GetPCLK1Freq+0x14c>)
 800f66a:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f66e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f670:	40c2      	lsrs	r2, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f676:	ee07 2a10 	vmov	s14, r2
 800f67a:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 800f67e:	ee07 3a10 	vmov	s14, r3
 800f682:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 800f686:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 800f68a:	ee76 6a05 	vadd.f32	s13, s12, s10
 800f68e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f692:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f696:	e7ca      	b.n	800f62e <HAL_RCC_GetPCLK1Freq+0xc6>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f698:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800f6c4 <HAL_RCC_GetPCLK1Freq+0x15c>
 800f69c:	e7b6      	b.n	800f60c <HAL_RCC_GetPCLK1Freq+0xa4>
 800f69e:	bf00      	nop
 800f6a0:	58024400 	.word	0x58024400
 800f6a4:	003d0900 	.word	0x003d0900
 800f6a8:	08020a64 	.word	0x08020a64
 800f6ac:	240024cc 	.word	0x240024cc
 800f6b0:	240024d0 	.word	0x240024d0
 800f6b4:	03d09000 	.word	0x03d09000
 800f6b8:	4a742400 	.word	0x4a742400
 800f6bc:	017d7840 	.word	0x017d7840
 800f6c0:	4bbebc20 	.word	0x4bbebc20
 800f6c4:	4c742400 	.word	0x4c742400

0800f6c8 <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f6c8:	494d      	ldr	r1, [pc, #308]	; (800f800 <HAL_RCC_GetPCLK2Freq+0x138>)
 800f6ca:	690b      	ldr	r3, [r1, #16]
 800f6cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f6d0:	2b10      	cmp	r3, #16
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f6d2:	b430      	push	{r4, r5}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f6d4:	d06b      	beq.n	800f7ae <HAL_RCC_GetPCLK2Freq+0xe6>
 800f6d6:	2b18      	cmp	r3, #24
 800f6d8:	d029      	beq.n	800f72e <HAL_RCC_GetPCLK2Freq+0x66>
 800f6da:	b1fb      	cbz	r3, 800f71c <HAL_RCC_GetPCLK2Freq+0x54>
    sysclockfreq = CSI_VALUE;
 800f6dc:	4a49      	ldr	r2, [pc, #292]	; (800f804 <HAL_RCC_GetPCLK2Freq+0x13c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800f6de:	4848      	ldr	r0, [pc, #288]	; (800f800 <HAL_RCC_GetPCLK2Freq+0x138>)
 800f6e0:	4949      	ldr	r1, [pc, #292]	; (800f808 <HAL_RCC_GetPCLK2Freq+0x140>)
 800f6e2:	6984      	ldr	r4, [r0, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f6e4:	6983      	ldr	r3, [r0, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800f6e6:	f3c4 2403 	ubfx	r4, r4, #8, #4
  SystemCoreClock = common_system_clock;
 800f6ea:	4d48      	ldr	r5, [pc, #288]	; (800f80c <HAL_RCC_GetPCLK2Freq+0x144>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f6ec:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800f6f0:	5d0c      	ldrb	r4, [r1, r4]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f6f2:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800f6f4:	f004 041f 	and.w	r4, r4, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f6f8:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800f6fc:	40e2      	lsrs	r2, r4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f6fe:	4c44      	ldr	r4, [pc, #272]	; (800f810 <HAL_RCC_GetPCLK2Freq+0x148>)
 800f700:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 800f704:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f706:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800f708:	69c2      	ldr	r2, [r0, #28]
 800f70a:	f3c2 2202 	ubfx	r2, r2, #8, #3
 800f70e:	5c88      	ldrb	r0, [r1, r2]
 800f710:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800f714:	bc30      	pop	{r4, r5}
 800f716:	fa23 f000 	lsr.w	r0, r3, r0
 800f71a:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f71c:	680b      	ldr	r3, [r1, #0]
 800f71e:	069a      	lsls	r2, r3, #26
 800f720:	d547      	bpl.n	800f7b2 <HAL_RCC_GetPCLK2Freq+0xea>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f722:	680b      	ldr	r3, [r1, #0]
 800f724:	4a3b      	ldr	r2, [pc, #236]	; (800f814 <HAL_RCC_GetPCLK2Freq+0x14c>)
 800f726:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800f72a:	40da      	lsrs	r2, r3
 800f72c:	e7d7      	b.n	800f6de <HAL_RCC_GetPCLK2Freq+0x16>
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f72e:	6a88      	ldr	r0, [r1, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800f730:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800f732:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800f734:	f3c2 1205 	ubfx	r2, r2, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800f738:	6b4c      	ldr	r4, [r1, #52]	; 0x34
    if (pllm != 0U)
 800f73a:	2a00      	cmp	r2, #0
 800f73c:	d0cf      	beq.n	800f6de <HAL_RCC_GetPCLK2Freq+0x16>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800f73e:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800f742:	f003 0301 	and.w	r3, r3, #1
 800f746:	ee07 2a90 	vmov	s15, r2
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f74a:	f000 0003 	and.w	r0, r0, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800f74e:	fb03 f304 	mul.w	r3, r3, r4
 800f752:	eef8 6ae7 	vcvt.f32.s32	s13, s15
      switch (pllsource)
 800f756:	2801      	cmp	r0, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800f758:	ee07 3a90 	vmov	s15, r3
 800f75c:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
      switch (pllsource)
 800f760:	d002      	beq.n	800f768 <HAL_RCC_GetPCLK2Freq+0xa0>
 800f762:	d32b      	bcc.n	800f7bc <HAL_RCC_GetPCLK2Freq+0xf4>
 800f764:	2802      	cmp	r0, #2
 800f766:	d026      	beq.n	800f7b6 <HAL_RCC_GetPCLK2Freq+0xee>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f768:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800f818 <HAL_RCC_GetPCLK2Freq+0x150>
 800f76c:	ee87 6a26 	vdiv.f32	s12, s14, s13
 800f770:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800f772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f776:	ee07 3a10 	vmov	s14, r3
 800f77a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800f77e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f782:	ee37 7a25 	vadd.f32	s14, s14, s11
 800f786:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f78a:	ee67 7a86 	vmul.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800f78e:	4b1c      	ldr	r3, [pc, #112]	; (800f800 <HAL_RCC_GetPCLK2Freq+0x138>)
 800f790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f792:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800f796:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800f798:	ee07 3a10 	vmov	s14, r3
 800f79c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f7a0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800f7a4:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 800f7a8:	ee17 2a90 	vmov	r2, s15
 800f7ac:	e797      	b.n	800f6de <HAL_RCC_GetPCLK2Freq+0x16>
    sysclockfreq = HSE_VALUE;
 800f7ae:	4a1b      	ldr	r2, [pc, #108]	; (800f81c <HAL_RCC_GetPCLK2Freq+0x154>)
 800f7b0:	e795      	b.n	800f6de <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800f7b2:	4a18      	ldr	r2, [pc, #96]	; (800f814 <HAL_RCC_GetPCLK2Freq+0x14c>)
 800f7b4:	e793      	b.n	800f6de <HAL_RCC_GetPCLK2Freq+0x16>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f7b6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800f820 <HAL_RCC_GetPCLK2Freq+0x158>
 800f7ba:	e7d7      	b.n	800f76c <HAL_RCC_GetPCLK2Freq+0xa4>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f7bc:	680b      	ldr	r3, [r1, #0]
 800f7be:	069b      	lsls	r3, r3, #26
 800f7c0:	d51a      	bpl.n	800f7f8 <HAL_RCC_GetPCLK2Freq+0x130>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f7c2:	6808      	ldr	r0, [r1, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f7c4:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f7c8:	4a12      	ldr	r2, [pc, #72]	; (800f814 <HAL_RCC_GetPCLK2Freq+0x14c>)
 800f7ca:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f7ce:	6b0b      	ldr	r3, [r1, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f7d0:	40c2      	lsrs	r2, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f7d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f7d6:	ee07 2a10 	vmov	s14, r2
 800f7da:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 800f7de:	ee07 3a10 	vmov	s14, r3
 800f7e2:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 800f7e6:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 800f7ea:	ee76 6a05 	vadd.f32	s13, s12, s10
 800f7ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f7f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f7f6:	e7ca      	b.n	800f78e <HAL_RCC_GetPCLK2Freq+0xc6>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f7f8:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800f824 <HAL_RCC_GetPCLK2Freq+0x15c>
 800f7fc:	e7b6      	b.n	800f76c <HAL_RCC_GetPCLK2Freq+0xa4>
 800f7fe:	bf00      	nop
 800f800:	58024400 	.word	0x58024400
 800f804:	003d0900 	.word	0x003d0900
 800f808:	08020a64 	.word	0x08020a64
 800f80c:	240024cc 	.word	0x240024cc
 800f810:	240024d0 	.word	0x240024d0
 800f814:	03d09000 	.word	0x03d09000
 800f818:	4a742400 	.word	0x4a742400
 800f81c:	017d7840 	.word	0x017d7840
 800f820:	4bbebc20 	.word	0x4bbebc20
 800f824:	4c742400 	.word	0x4c742400

0800f828 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f828:	4a3b      	ldr	r2, [pc, #236]	; (800f918 <RCCEx_PLL2_Config+0xf0>)
{
 800f82a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f82c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800f82e:	f003 0303 	and.w	r3, r3, #3
 800f832:	2b03      	cmp	r3, #3
 800f834:	d067      	beq.n	800f906 <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800f836:	6813      	ldr	r3, [r2, #0]
 800f838:	460f      	mov	r7, r1
 800f83a:	4605      	mov	r5, r0

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f83c:	4614      	mov	r4, r2
    __HAL_RCC_PLL2_DISABLE();
 800f83e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f842:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800f844:	f7fa fedc 	bl	800a600 <HAL_GetTick>
 800f848:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f84a:	e004      	b.n	800f856 <RCCEx_PLL2_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800f84c:	f7fa fed8 	bl	800a600 <HAL_GetTick>
 800f850:	1b80      	subs	r0, r0, r6
 800f852:	2802      	cmp	r0, #2
 800f854:	d859      	bhi.n	800f90a <RCCEx_PLL2_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f856:	6823      	ldr	r3, [r4, #0]
 800f858:	011a      	lsls	r2, r3, #4
 800f85a:	d4f7      	bmi.n	800f84c <RCCEx_PLL2_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800f85c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f85e:	682a      	ldr	r2, [r5, #0]
 800f860:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800f864:	492d      	ldr	r1, [pc, #180]	; (800f91c <RCCEx_PLL2_Config+0xf4>)
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800f866:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800f86a:	62a3      	str	r3, [r4, #40]	; 0x28
 800f86c:	686e      	ldr	r6, [r5, #4]
 800f86e:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 800f872:	3e01      	subs	r6, #1
 800f874:	1e50      	subs	r0, r2, #1
 800f876:	3b01      	subs	r3, #1
 800f878:	692a      	ldr	r2, [r5, #16]
 800f87a:	f3c6 0608 	ubfx	r6, r6, #0, #9
 800f87e:	025b      	lsls	r3, r3, #9
 800f880:	0400      	lsls	r0, r0, #16
 800f882:	3a01      	subs	r2, #1
 800f884:	b29b      	uxth	r3, r3
 800f886:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 800f88a:	0612      	lsls	r2, r2, #24
 800f88c:	4303      	orrs	r3, r0
 800f88e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800f892:	4333      	orrs	r3, r6
 800f894:	4313      	orrs	r3, r2
 800f896:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800f898:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f89a:	696a      	ldr	r2, [r5, #20]
 800f89c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f8a0:	4313      	orrs	r3, r2
 800f8a2:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800f8a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f8a6:	69aa      	ldr	r2, [r5, #24]
 800f8a8:	f023 0320 	bic.w	r3, r3, #32
 800f8ac:	4313      	orrs	r3, r2
 800f8ae:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 800f8b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f8b2:	f023 0310 	bic.w	r3, r3, #16
 800f8b6:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800f8b8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800f8ba:	69eb      	ldr	r3, [r5, #28]
 800f8bc:	4011      	ands	r1, r2
 800f8be:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 800f8c2:	63e1      	str	r1, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800f8c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f8c6:	f043 0310 	orr.w	r3, r3, #16
 800f8ca:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800f8cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800f8ce:	b1f7      	cbz	r7, 800f90e <RCCEx_PLL2_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800f8d0:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800f8d2:	bf0c      	ite	eq
 800f8d4:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800f8d8:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 800f8dc:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800f8de:	4b0e      	ldr	r3, [pc, #56]	; (800f918 <RCCEx_PLL2_Config+0xf0>)
 800f8e0:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f8e2:	461c      	mov	r4, r3
    __HAL_RCC_PLL2_ENABLE();
 800f8e4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800f8e8:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800f8ea:	f7fa fe89 	bl	800a600 <HAL_GetTick>
 800f8ee:	4605      	mov	r5, r0
 800f8f0:	e004      	b.n	800f8fc <RCCEx_PLL2_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800f8f2:	f7fa fe85 	bl	800a600 <HAL_GetTick>
 800f8f6:	1b40      	subs	r0, r0, r5
 800f8f8:	2802      	cmp	r0, #2
 800f8fa:	d806      	bhi.n	800f90a <RCCEx_PLL2_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f8fc:	6823      	ldr	r3, [r4, #0]
 800f8fe:	011b      	lsls	r3, r3, #4
 800f900:	d5f7      	bpl.n	800f8f2 <RCCEx_PLL2_Config+0xca>
    }

  }


  return status;
 800f902:	2000      	movs	r0, #0
}
 800f904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800f906:	2001      	movs	r0, #1
}
 800f908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800f90a:	2003      	movs	r0, #3
}
 800f90c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800f90e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f912:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f914:	e7e3      	b.n	800f8de <RCCEx_PLL2_Config+0xb6>
 800f916:	bf00      	nop
 800f918:	58024400 	.word	0x58024400
 800f91c:	ffff0007 	.word	0xffff0007

0800f920 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f920:	4a3b      	ldr	r2, [pc, #236]	; (800fa10 <RCCEx_PLL3_Config+0xf0>)
{
 800f922:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f924:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800f926:	f003 0303 	and.w	r3, r3, #3
 800f92a:	2b03      	cmp	r3, #3
 800f92c:	d067      	beq.n	800f9fe <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800f92e:	6813      	ldr	r3, [r2, #0]
 800f930:	460f      	mov	r7, r1
 800f932:	4605      	mov	r5, r0

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f934:	4614      	mov	r4, r2
    __HAL_RCC_PLL3_DISABLE();
 800f936:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f93a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800f93c:	f7fa fe60 	bl	800a600 <HAL_GetTick>
 800f940:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f942:	e004      	b.n	800f94e <RCCEx_PLL3_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800f944:	f7fa fe5c 	bl	800a600 <HAL_GetTick>
 800f948:	1b80      	subs	r0, r0, r6
 800f94a:	2802      	cmp	r0, #2
 800f94c:	d859      	bhi.n	800fa02 <RCCEx_PLL3_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f94e:	6823      	ldr	r3, [r4, #0]
 800f950:	009a      	lsls	r2, r3, #2
 800f952:	d4f7      	bmi.n	800f944 <RCCEx_PLL3_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800f954:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f956:	682a      	ldr	r2, [r5, #0]
 800f958:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800f95c:	492d      	ldr	r1, [pc, #180]	; (800fa14 <RCCEx_PLL3_Config+0xf4>)
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800f95e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800f962:	62a3      	str	r3, [r4, #40]	; 0x28
 800f964:	686e      	ldr	r6, [r5, #4]
 800f966:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 800f96a:	3e01      	subs	r6, #1
 800f96c:	1e50      	subs	r0, r2, #1
 800f96e:	3b01      	subs	r3, #1
 800f970:	692a      	ldr	r2, [r5, #16]
 800f972:	f3c6 0608 	ubfx	r6, r6, #0, #9
 800f976:	025b      	lsls	r3, r3, #9
 800f978:	0400      	lsls	r0, r0, #16
 800f97a:	3a01      	subs	r2, #1
 800f97c:	b29b      	uxth	r3, r3
 800f97e:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 800f982:	0612      	lsls	r2, r2, #24
 800f984:	4303      	orrs	r3, r0
 800f986:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800f98a:	4333      	orrs	r3, r6
 800f98c:	4313      	orrs	r3, r2
 800f98e:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800f990:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f992:	696a      	ldr	r2, [r5, #20]
 800f994:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800f998:	4313      	orrs	r3, r2
 800f99a:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800f99c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f99e:	69aa      	ldr	r2, [r5, #24]
 800f9a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f9a4:	4313      	orrs	r3, r2
 800f9a6:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 800f9a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f9aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f9ae:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800f9b0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800f9b2:	69eb      	ldr	r3, [r5, #28]
 800f9b4:	4011      	ands	r1, r2
 800f9b6:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 800f9ba:	6461      	str	r1, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800f9bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f9be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f9c2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800f9c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800f9c6:	b1f7      	cbz	r7, 800fa06 <RCCEx_PLL3_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800f9c8:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800f9ca:	bf0c      	ite	eq
 800f9cc:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800f9d0:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 800f9d4:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800f9d6:	4b0e      	ldr	r3, [pc, #56]	; (800fa10 <RCCEx_PLL3_Config+0xf0>)
 800f9d8:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f9da:	461c      	mov	r4, r3
    __HAL_RCC_PLL3_ENABLE();
 800f9dc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800f9e0:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800f9e2:	f7fa fe0d 	bl	800a600 <HAL_GetTick>
 800f9e6:	4605      	mov	r5, r0
 800f9e8:	e004      	b.n	800f9f4 <RCCEx_PLL3_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800f9ea:	f7fa fe09 	bl	800a600 <HAL_GetTick>
 800f9ee:	1b40      	subs	r0, r0, r5
 800f9f0:	2802      	cmp	r0, #2
 800f9f2:	d806      	bhi.n	800fa02 <RCCEx_PLL3_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f9f4:	6823      	ldr	r3, [r4, #0]
 800f9f6:	009b      	lsls	r3, r3, #2
 800f9f8:	d5f7      	bpl.n	800f9ea <RCCEx_PLL3_Config+0xca>
    }

  }


  return status;
 800f9fa:	2000      	movs	r0, #0
}
 800f9fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800f9fe:	2001      	movs	r0, #1
}
 800fa00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800fa02:	2003      	movs	r0, #3
}
 800fa04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800fa06:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800fa0a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fa0c:	e7e3      	b.n	800f9d6 <RCCEx_PLL3_Config+0xb6>
 800fa0e:	bf00      	nop
 800fa10:	58024400 	.word	0x58024400
 800fa14:	ffff0007 	.word	0xffff0007

0800fa18 <HAL_RCCEx_PeriphCLKConfig>:
{
 800fa18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800fa1c:	6803      	ldr	r3, [r0, #0]
{
 800fa1e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800fa20:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 800fa24:	d015      	beq.n	800fa52 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800fa26:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800fa28:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800fa2c:	f000 8448 	beq.w	80102c0 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800fa30:	f240 84fd 	bls.w	801042e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800fa34:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800fa38:	f000 8481 	beq.w	801033e <HAL_RCCEx_PeriphCLKConfig+0x926>
 800fa3c:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 800fa40:	f040 8531 	bne.w	80104a6 <HAL_RCCEx_PeriphCLKConfig+0xa8e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800fa44:	48ae      	ldr	r0, [pc, #696]	; (800fd00 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800fa46:	2600      	movs	r6, #0
 800fa48:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800fa4a:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 800fa4e:	430a      	orrs	r2, r1
 800fa50:	6502      	str	r2, [r0, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800fa52:	05da      	lsls	r2, r3, #23
 800fa54:	d50a      	bpl.n	800fa6c <HAL_RCCEx_PeriphCLKConfig+0x54>
    switch(PeriphClkInit->Sai1ClockSelection)
 800fa56:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800fa58:	2a04      	cmp	r2, #4
 800fa5a:	d806      	bhi.n	800fa6a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800fa5c:	e8df f012 	tbh	[pc, r2, lsl #1]
 800fa60:	040203fb 	.word	0x040203fb
 800fa64:	03a403f0 	.word	0x03a403f0
 800fa68:	03a4      	.short	0x03a4
      ret = HAL_ERROR;
 800fa6a:	2601      	movs	r6, #1
 800fa6c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800fa6e:	059f      	lsls	r7, r3, #22
 800fa70:	d51b      	bpl.n	800faaa <HAL_RCCEx_PeriphCLKConfig+0x92>
    switch(PeriphClkInit->Sai23ClockSelection)
 800fa72:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800fa74:	2a80      	cmp	r2, #128	; 0x80
 800fa76:	f000 843c 	beq.w	80102f2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
 800fa7a:	f200 84f8 	bhi.w	801046e <HAL_RCCEx_PeriphCLKConfig+0xa56>
 800fa7e:	2a00      	cmp	r2, #0
 800fa80:	f000 8463 	beq.w	801034a <HAL_RCCEx_PeriphCLKConfig+0x932>
 800fa84:	2a40      	cmp	r2, #64	; 0x40
 800fa86:	f040 84f9 	bne.w	801047c <HAL_RCCEx_PeriphCLKConfig+0xa64>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800fa8a:	2100      	movs	r1, #0
 800fa8c:	1d20      	adds	r0, r4, #4
 800fa8e:	f7ff fecb 	bl	800f828 <RCCEx_PLL2_Config>
 800fa92:	6823      	ldr	r3, [r4, #0]
 800fa94:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800fa96:	2d00      	cmp	r5, #0
 800fa98:	f040 8435 	bne.w	8010306 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800fa9c:	4998      	ldr	r1, [pc, #608]	; (800fd00 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800fa9e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800faa0:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800faa2:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 800faa6:	4302      	orrs	r2, r0
 800faa8:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800faaa:	0558      	lsls	r0, r3, #21
 800faac:	d51f      	bpl.n	800faee <HAL_RCCEx_PeriphCLKConfig+0xd6>
    switch(PeriphClkInit->Sai4AClockSelection)
 800faae:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 800fab2:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800fab6:	f000 840f 	beq.w	80102d8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800faba:	f200 84e3 	bhi.w	8010484 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 800fabe:	2a00      	cmp	r2, #0
 800fac0:	f000 8430 	beq.w	8010324 <HAL_RCCEx_PeriphCLKConfig+0x90c>
 800fac4:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800fac8:	f040 84e4 	bne.w	8010494 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800facc:	2100      	movs	r1, #0
 800face:	1d20      	adds	r0, r4, #4
 800fad0:	f7ff feaa 	bl	800f828 <RCCEx_PLL2_Config>
 800fad4:	6823      	ldr	r3, [r4, #0]
 800fad6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800fad8:	2d00      	cmp	r5, #0
 800fada:	f040 8407 	bne.w	80102ec <HAL_RCCEx_PeriphCLKConfig+0x8d4>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800fade:	4988      	ldr	r1, [pc, #544]	; (800fd00 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800fae0:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 800fae4:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800fae6:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 800faea:	4302      	orrs	r2, r0
 800faec:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800faee:	0519      	lsls	r1, r3, #20
 800faf0:	d51f      	bpl.n	800fb32 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch(PeriphClkInit->Sai4BClockSelection)
 800faf2:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 800faf6:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 800fafa:	f000 83d5 	beq.w	80102a8 <HAL_RCCEx_PeriphCLKConfig+0x890>
 800fafe:	f200 84aa 	bhi.w	8010456 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
 800fb02:	2a00      	cmp	r2, #0
 800fb04:	f000 8428 	beq.w	8010358 <HAL_RCCEx_PeriphCLKConfig+0x940>
 800fb08:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800fb0c:	f040 84ab 	bne.w	8010466 <HAL_RCCEx_PeriphCLKConfig+0xa4e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800fb10:	2100      	movs	r1, #0
 800fb12:	1d20      	adds	r0, r4, #4
 800fb14:	f7ff fe88 	bl	800f828 <RCCEx_PLL2_Config>
 800fb18:	6823      	ldr	r3, [r4, #0]
 800fb1a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800fb1c:	2d00      	cmp	r5, #0
 800fb1e:	f040 83cd 	bne.w	80102bc <HAL_RCCEx_PeriphCLKConfig+0x8a4>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800fb22:	4977      	ldr	r1, [pc, #476]	; (800fd00 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800fb24:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 800fb28:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800fb2a:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 800fb2e:	4302      	orrs	r2, r0
 800fb30:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800fb32:	019a      	lsls	r2, r3, #6
 800fb34:	d50d      	bpl.n	800fb52 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    switch(PeriphClkInit->QspiClockSelection)
 800fb36:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800fb38:	2a10      	cmp	r2, #16
 800fb3a:	f000 834a 	beq.w	80101d2 <HAL_RCCEx_PeriphCLKConfig+0x7ba>
 800fb3e:	f240 84ad 	bls.w	801049c <HAL_RCCEx_PeriphCLKConfig+0xa84>
 800fb42:	2a20      	cmp	r2, #32
 800fb44:	f000 8372 	beq.w	801022c <HAL_RCCEx_PeriphCLKConfig+0x814>
 800fb48:	2a30      	cmp	r2, #48	; 0x30
 800fb4a:	f000 8347 	beq.w	80101dc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      ret = HAL_ERROR;
 800fb4e:	2601      	movs	r6, #1
 800fb50:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800fb52:	04df      	lsls	r7, r3, #19
 800fb54:	d51d      	bpl.n	800fb92 <HAL_RCCEx_PeriphCLKConfig+0x17a>
    switch(PeriphClkInit->Spi123ClockSelection)
 800fb56:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800fb58:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800fb5c:	f000 83d6 	beq.w	801030c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 800fb60:	f200 846d 	bhi.w	801043e <HAL_RCCEx_PeriphCLKConfig+0xa26>
 800fb64:	2a00      	cmp	r2, #0
 800fb66:	f000 83e4 	beq.w	8010332 <HAL_RCCEx_PeriphCLKConfig+0x91a>
 800fb6a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800fb6e:	f040 846e 	bne.w	801044e <HAL_RCCEx_PeriphCLKConfig+0xa36>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800fb72:	2100      	movs	r1, #0
 800fb74:	1d20      	adds	r0, r4, #4
 800fb76:	f7ff fe57 	bl	800f828 <RCCEx_PLL2_Config>
 800fb7a:	6823      	ldr	r3, [r4, #0]
 800fb7c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800fb7e:	2d00      	cmp	r5, #0
 800fb80:	f040 83ce 	bne.w	8010320 <HAL_RCCEx_PeriphCLKConfig+0x908>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800fb84:	495e      	ldr	r1, [pc, #376]	; (800fd00 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800fb86:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800fb88:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800fb8a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800fb8e:	4302      	orrs	r2, r0
 800fb90:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800fb92:	0498      	lsls	r0, r3, #18
 800fb94:	d51b      	bpl.n	800fbce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->Spi45ClockSelection)
 800fb96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fb98:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 800fb9c:	f000 830f 	beq.w	80101be <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 800fba0:	f200 83fa 	bhi.w	8010398 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800fba4:	b14a      	cbz	r2, 800fbba <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800fba6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800fbaa:	f040 8401 	bne.w	80103b0 <HAL_RCCEx_PeriphCLKConfig+0x998>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800fbae:	2101      	movs	r1, #1
 800fbb0:	1d20      	adds	r0, r4, #4
 800fbb2:	f7ff fe39 	bl	800f828 <RCCEx_PLL2_Config>
 800fbb6:	6823      	ldr	r3, [r4, #0]
 800fbb8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800fbba:	2d00      	cmp	r5, #0
 800fbbc:	f040 8289 	bne.w	80100d2 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800fbc0:	494f      	ldr	r1, [pc, #316]	; (800fd00 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800fbc2:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800fbc4:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800fbc6:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800fbca:	4302      	orrs	r2, r0
 800fbcc:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800fbce:	0459      	lsls	r1, r3, #17
 800fbd0:	d51d      	bpl.n	800fc0e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    switch(PeriphClkInit->Spi6ClockSelection)
 800fbd2:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 800fbd6:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800fbda:	f000 8308 	beq.w	80101ee <HAL_RCCEx_PeriphCLKConfig+0x7d6>
 800fbde:	f200 83ea 	bhi.w	80103b6 <HAL_RCCEx_PeriphCLKConfig+0x99e>
 800fbe2:	b14a      	cbz	r2, 800fbf8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 800fbe4:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800fbe8:	f040 83f1 	bne.w	80103ce <HAL_RCCEx_PeriphCLKConfig+0x9b6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800fbec:	2101      	movs	r1, #1
 800fbee:	1d20      	adds	r0, r4, #4
 800fbf0:	f7ff fe1a 	bl	800f828 <RCCEx_PLL2_Config>
 800fbf4:	6823      	ldr	r3, [r4, #0]
 800fbf6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800fbf8:	2d00      	cmp	r5, #0
 800fbfa:	f040 8270 	bne.w	80100de <HAL_RCCEx_PeriphCLKConfig+0x6c6>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800fbfe:	4940      	ldr	r1, [pc, #256]	; (800fd00 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800fc00:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800fc04:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800fc06:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 800fc0a:	4302      	orrs	r2, r0
 800fc0c:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800fc0e:	015a      	lsls	r2, r3, #5
 800fc10:	d515      	bpl.n	800fc3e <HAL_RCCEx_PeriphCLKConfig+0x226>
    switch(PeriphClkInit->DsiClockSelection)
 800fc12:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800fc14:	b14a      	cbz	r2, 800fc2a <HAL_RCCEx_PeriphCLKConfig+0x212>
 800fc16:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800fc1a:	f040 8266 	bne.w	80100ea <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800fc1e:	2101      	movs	r1, #1
 800fc20:	1d20      	adds	r0, r4, #4
 800fc22:	f7ff fe01 	bl	800f828 <RCCEx_PLL2_Config>
 800fc26:	6823      	ldr	r3, [r4, #0]
 800fc28:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800fc2a:	2d00      	cmp	r5, #0
 800fc2c:	f040 827f 	bne.w	801012e <HAL_RCCEx_PeriphCLKConfig+0x716>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800fc30:	4933      	ldr	r1, [pc, #204]	; (800fd00 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800fc32:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800fc34:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800fc36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800fc3a:	4302      	orrs	r2, r0
 800fc3c:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800fc3e:	041f      	lsls	r7, r3, #16
 800fc40:	d50d      	bpl.n	800fc5e <HAL_RCCEx_PeriphCLKConfig+0x246>
    switch(PeriphClkInit->FdcanClockSelection)
 800fc42:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800fc44:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800fc48:	f000 82dc 	beq.w	8010204 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
 800fc4c:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800fc50:	f000 81af 	beq.w	800ffb2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800fc54:	2a00      	cmp	r2, #0
 800fc56:	f000 81b2 	beq.w	800ffbe <HAL_RCCEx_PeriphCLKConfig+0x5a6>
      ret = HAL_ERROR;
 800fc5a:	2601      	movs	r6, #1
 800fc5c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800fc5e:	01d8      	lsls	r0, r3, #7
 800fc60:	d519      	bpl.n	800fc96 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    switch(PeriphClkInit->FmcClockSelection)
 800fc62:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800fc64:	2a03      	cmp	r2, #3
 800fc66:	f200 8443 	bhi.w	80104f0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800fc6a:	e8df f012 	tbh	[pc, r2, lsl #1]
 800fc6e:	000a      	.short	0x000a
 800fc70:	00040274 	.word	0x00040274
 800fc74:	000a      	.short	0x000a
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800fc76:	2102      	movs	r1, #2
 800fc78:	1d20      	adds	r0, r4, #4
 800fc7a:	f7ff fdd5 	bl	800f828 <RCCEx_PLL2_Config>
 800fc7e:	6823      	ldr	r3, [r4, #0]
 800fc80:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800fc82:	2d00      	cmp	r5, #0
 800fc84:	f040 821d 	bne.w	80100c2 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800fc88:	491d      	ldr	r1, [pc, #116]	; (800fd00 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800fc8a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800fc8c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800fc8e:	f022 0203 	bic.w	r2, r2, #3
 800fc92:	4302      	orrs	r2, r0
 800fc94:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800fc96:	0259      	lsls	r1, r3, #9
 800fc98:	f100 81cd 	bmi.w	8010036 <HAL_RCCEx_PeriphCLKConfig+0x61e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800fc9c:	07df      	lsls	r7, r3, #31
 800fc9e:	d542      	bpl.n	800fd26 <HAL_RCCEx_PeriphCLKConfig+0x30e>
    switch(PeriphClkInit->Usart16ClockSelection)
 800fca0:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800fca2:	2a28      	cmp	r2, #40	; 0x28
 800fca4:	f200 8371 	bhi.w	801038a <HAL_RCCEx_PeriphCLKConfig+0x972>
 800fca8:	e8df f012 	tbh	[pc, r2, lsl #1]
 800fcac:	036f0033 	.word	0x036f0033
 800fcb0:	036f036f 	.word	0x036f036f
 800fcb4:	036f036f 	.word	0x036f036f
 800fcb8:	036f036f 	.word	0x036f036f
 800fcbc:	036f025d 	.word	0x036f025d
 800fcc0:	036f036f 	.word	0x036f036f
 800fcc4:	036f036f 	.word	0x036f036f
 800fcc8:	036f036f 	.word	0x036f036f
 800fccc:	036f002c 	.word	0x036f002c
 800fcd0:	036f036f 	.word	0x036f036f
 800fcd4:	036f036f 	.word	0x036f036f
 800fcd8:	036f036f 	.word	0x036f036f
 800fcdc:	036f0033 	.word	0x036f0033
 800fce0:	036f036f 	.word	0x036f036f
 800fce4:	036f036f 	.word	0x036f036f
 800fce8:	036f036f 	.word	0x036f036f
 800fcec:	036f0033 	.word	0x036f0033
 800fcf0:	036f036f 	.word	0x036f036f
 800fcf4:	036f036f 	.word	0x036f036f
 800fcf8:	036f036f 	.word	0x036f036f
 800fcfc:	0033      	.short	0x0033
 800fcfe:	bf00      	nop
 800fd00:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800fd04:	2101      	movs	r1, #1
 800fd06:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800fd0a:	f7ff fe09 	bl	800f920 <RCCEx_PLL3_Config>
 800fd0e:	6823      	ldr	r3, [r4, #0]
 800fd10:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800fd12:	2d00      	cmp	r5, #0
 800fd14:	f040 81d3 	bne.w	80100be <HAL_RCCEx_PeriphCLKConfig+0x6a6>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800fd18:	49ae      	ldr	r1, [pc, #696]	; (800ffd4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>)
 800fd1a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800fd1c:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800fd1e:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 800fd22:	4302      	orrs	r2, r0
 800fd24:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800fd26:	0798      	lsls	r0, r3, #30
 800fd28:	d51c      	bpl.n	800fd64 <HAL_RCCEx_PeriphCLKConfig+0x34c>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800fd2a:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800fd2c:	2a05      	cmp	r2, #5
 800fd2e:	f200 83e6 	bhi.w	80104fe <HAL_RCCEx_PeriphCLKConfig+0xae6>
 800fd32:	e8df f012 	tbh	[pc, r2, lsl #1]
 800fd36:	000d      	.short	0x000d
 800fd38:	00060207 	.word	0x00060207
 800fd3c:	000d000d 	.word	0x000d000d
 800fd40:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800fd42:	2101      	movs	r1, #1
 800fd44:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800fd48:	f7ff fdea 	bl	800f920 <RCCEx_PLL3_Config>
 800fd4c:	6823      	ldr	r3, [r4, #0]
 800fd4e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800fd50:	2d00      	cmp	r5, #0
 800fd52:	f040 81b8 	bne.w	80100c6 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800fd56:	499f      	ldr	r1, [pc, #636]	; (800ffd4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>)
 800fd58:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800fd5a:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800fd5c:	f022 0207 	bic.w	r2, r2, #7
 800fd60:	4302      	orrs	r2, r0
 800fd62:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800fd64:	0759      	lsls	r1, r3, #29
 800fd66:	d51e      	bpl.n	800fda6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800fd68:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800fd6c:	2a05      	cmp	r2, #5
 800fd6e:	f200 83c3 	bhi.w	80104f8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800fd72:	e8df f012 	tbh	[pc, r2, lsl #1]
 800fd76:	000d      	.short	0x000d
 800fd78:	000601de 	.word	0x000601de
 800fd7c:	000d000d 	.word	0x000d000d
 800fd80:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800fd82:	2101      	movs	r1, #1
 800fd84:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800fd88:	f7ff fdca 	bl	800f920 <RCCEx_PLL3_Config>
 800fd8c:	6823      	ldr	r3, [r4, #0]
 800fd8e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800fd90:	2d00      	cmp	r5, #0
 800fd92:	f040 819a 	bne.w	80100ca <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800fd96:	498f      	ldr	r1, [pc, #572]	; (800ffd4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>)
 800fd98:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 800fd9c:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800fd9e:	f022 0207 	bic.w	r2, r2, #7
 800fda2:	4302      	orrs	r2, r0
 800fda4:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800fda6:	069a      	lsls	r2, r3, #26
 800fda8:	d51d      	bpl.n	800fde6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800fdaa:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800fdae:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800fdb2:	f000 81e5 	beq.w	8010180 <HAL_RCCEx_PeriphCLKConfig+0x768>
 800fdb6:	f200 831c 	bhi.w	80103f2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800fdba:	b14a      	cbz	r2, 800fdd0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 800fdbc:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800fdc0:	f040 8323 	bne.w	801040a <HAL_RCCEx_PeriphCLKConfig+0x9f2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800fdc4:	2100      	movs	r1, #0
 800fdc6:	1d20      	adds	r0, r4, #4
 800fdc8:	f7ff fd2e 	bl	800f828 <RCCEx_PLL2_Config>
 800fdcc:	6823      	ldr	r3, [r4, #0]
 800fdce:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800fdd0:	2d00      	cmp	r5, #0
 800fdd2:	f040 8188 	bne.w	80100e6 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800fdd6:	497f      	ldr	r1, [pc, #508]	; (800ffd4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>)
 800fdd8:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800fddc:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800fdde:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 800fde2:	4302      	orrs	r2, r0
 800fde4:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800fde6:	065f      	lsls	r7, r3, #25
 800fde8:	d51d      	bpl.n	800fe26 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800fdea:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 800fdee:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800fdf2:	f000 81cf 	beq.w	8010194 <HAL_RCCEx_PeriphCLKConfig+0x77c>
 800fdf6:	f200 82ed 	bhi.w	80103d4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
 800fdfa:	b14a      	cbz	r2, 800fe10 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800fdfc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800fe00:	f040 82f4 	bne.w	80103ec <HAL_RCCEx_PeriphCLKConfig+0x9d4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800fe04:	2100      	movs	r1, #0
 800fe06:	1d20      	adds	r0, r4, #4
 800fe08:	f7ff fd0e 	bl	800f828 <RCCEx_PLL2_Config>
 800fe0c:	6823      	ldr	r3, [r4, #0]
 800fe0e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800fe10:	2d00      	cmp	r5, #0
 800fe12:	f040 815c 	bne.w	80100ce <HAL_RCCEx_PeriphCLKConfig+0x6b6>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800fe16:	496f      	ldr	r1, [pc, #444]	; (800ffd4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>)
 800fe18:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 800fe1c:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800fe1e:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800fe22:	4302      	orrs	r2, r0
 800fe24:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800fe26:	0618      	lsls	r0, r3, #24
 800fe28:	d51d      	bpl.n	800fe66 <HAL_RCCEx_PeriphCLKConfig+0x44e>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800fe2a:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 800fe2e:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800fe32:	f000 81f0 	beq.w	8010216 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 800fe36:	f200 82eb 	bhi.w	8010410 <HAL_RCCEx_PeriphCLKConfig+0x9f8>
 800fe3a:	b14a      	cbz	r2, 800fe50 <HAL_RCCEx_PeriphCLKConfig+0x438>
 800fe3c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800fe40:	f040 82f2 	bne.w	8010428 <HAL_RCCEx_PeriphCLKConfig+0xa10>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800fe44:	2100      	movs	r1, #0
 800fe46:	1d20      	adds	r0, r4, #4
 800fe48:	f7ff fcee 	bl	800f828 <RCCEx_PLL2_Config>
 800fe4c:	6823      	ldr	r3, [r4, #0]
 800fe4e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800fe50:	2d00      	cmp	r5, #0
 800fe52:	f040 8146 	bne.w	80100e2 <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800fe56:	495f      	ldr	r1, [pc, #380]	; (800ffd4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>)
 800fe58:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 800fe5c:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800fe5e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800fe62:	4302      	orrs	r2, r0
 800fe64:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800fe66:	0719      	lsls	r1, r3, #28
 800fe68:	d50b      	bpl.n	800fe82 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800fe6a:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800fe6e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800fe72:	f000 81fe 	beq.w	8010272 <HAL_RCCEx_PeriphCLKConfig+0x85a>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800fe76:	4857      	ldr	r0, [pc, #348]	; (800ffd4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>)
 800fe78:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800fe7a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800fe7e:	430a      	orrs	r2, r1
 800fe80:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800fe82:	06da      	lsls	r2, r3, #27
 800fe84:	d50b      	bpl.n	800fe9e <HAL_RCCEx_PeriphCLKConfig+0x486>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800fe86:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800fe8a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800fe8e:	f000 81fb 	beq.w	8010288 <HAL_RCCEx_PeriphCLKConfig+0x870>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800fe92:	4850      	ldr	r0, [pc, #320]	; (800ffd4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>)
 800fe94:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800fe96:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800fe9a:	430a      	orrs	r2, r1
 800fe9c:	6582      	str	r2, [r0, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800fe9e:	031f      	lsls	r7, r3, #12
 800fea0:	d50e      	bpl.n	800fec0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    switch(PeriphClkInit->AdcClockSelection)
 800fea2:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 800fea6:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800feaa:	f000 8095 	beq.w	800ffd8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800feae:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800feb2:	f000 8098 	beq.w	800ffe6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
 800feb6:	2900      	cmp	r1, #0
 800feb8:	f000 8255 	beq.w	8010366 <HAL_RCCEx_PeriphCLKConfig+0x94e>
      ret = HAL_ERROR;
 800febc:	2601      	movs	r6, #1
 800febe:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800fec0:	0358      	lsls	r0, r3, #13
 800fec2:	d50f      	bpl.n	800fee4 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
    switch(PeriphClkInit->UsbClockSelection)
 800fec4:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 800fec8:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800fecc:	f000 8096 	beq.w	800fffc <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 800fed0:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 800fed4:	f000 8099 	beq.w	801000a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 800fed8:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800fedc:	f000 824c 	beq.w	8010378 <HAL_RCCEx_PeriphCLKConfig+0x960>
      ret = HAL_ERROR;
 800fee0:	2601      	movs	r6, #1
 800fee2:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800fee4:	03d9      	lsls	r1, r3, #15
 800fee6:	d517      	bpl.n	800ff18 <HAL_RCCEx_PeriphCLKConfig+0x500>
    switch(PeriphClkInit->SdmmcClockSelection)
 800fee8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800feea:	2a00      	cmp	r2, #0
 800feec:	f000 8115 	beq.w	801011a <HAL_RCCEx_PeriphCLKConfig+0x702>
 800fef0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800fef4:	f040 810e 	bne.w	8010114 <HAL_RCCEx_PeriphCLKConfig+0x6fc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800fef8:	2102      	movs	r1, #2
 800fefa:	1d20      	adds	r0, r4, #4
 800fefc:	f7ff fc94 	bl	800f828 <RCCEx_PLL2_Config>
 800ff00:	4605      	mov	r5, r0
 800ff02:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800ff04:	2d00      	cmp	r5, #0
 800ff06:	f040 8110 	bne.w	801012a <HAL_RCCEx_PeriphCLKConfig+0x712>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ff0a:	4932      	ldr	r1, [pc, #200]	; (800ffd4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>)
 800ff0c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800ff0e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800ff10:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800ff14:	4302      	orrs	r2, r0
 800ff16:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ff18:	009a      	lsls	r2, r3, #2
 800ff1a:	f100 8081 	bmi.w	8010020 <HAL_RCCEx_PeriphCLKConfig+0x608>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ff1e:	039f      	lsls	r7, r3, #14
 800ff20:	d435      	bmi.n	800ff8e <HAL_RCCEx_PeriphCLKConfig+0x576>
 800ff22:	1c30      	adds	r0, r6, #0
 800ff24:	bf18      	it	ne
 800ff26:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ff28:	02de      	lsls	r6, r3, #11
 800ff2a:	d506      	bpl.n	800ff3a <HAL_RCCEx_PeriphCLKConfig+0x522>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ff2c:	4929      	ldr	r1, [pc, #164]	; (800ffd4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>)
 800ff2e:	6f65      	ldr	r5, [r4, #116]	; 0x74
 800ff30:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800ff32:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800ff36:	432a      	orrs	r2, r5
 800ff38:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800ff3a:	00dd      	lsls	r5, r3, #3
 800ff3c:	d507      	bpl.n	800ff4e <HAL_RCCEx_PeriphCLKConfig+0x536>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800ff3e:	4925      	ldr	r1, [pc, #148]	; (800ffd4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>)
 800ff40:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 800ff44:	690a      	ldr	r2, [r1, #16]
 800ff46:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ff4a:	432a      	orrs	r2, r5
 800ff4c:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ff4e:	0299      	lsls	r1, r3, #10
 800ff50:	d506      	bpl.n	800ff60 <HAL_RCCEx_PeriphCLKConfig+0x548>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ff52:	4920      	ldr	r1, [pc, #128]	; (800ffd4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>)
 800ff54:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 800ff56:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800ff58:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800ff5c:	432a      	orrs	r2, r5
 800ff5e:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ff60:	005a      	lsls	r2, r3, #1
 800ff62:	d509      	bpl.n	800ff78 <HAL_RCCEx_PeriphCLKConfig+0x560>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ff64:	4a1b      	ldr	r2, [pc, #108]	; (800ffd4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>)
 800ff66:	6911      	ldr	r1, [r2, #16]
 800ff68:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800ff6c:	6111      	str	r1, [r2, #16]
 800ff6e:	6911      	ldr	r1, [r2, #16]
 800ff70:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
 800ff74:	4329      	orrs	r1, r5
 800ff76:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	da06      	bge.n	800ff8a <HAL_RCCEx_PeriphCLKConfig+0x572>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ff7c:	4a15      	ldr	r2, [pc, #84]	; (800ffd4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>)
 800ff7e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800ff80:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800ff82:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800ff86:	430b      	orrs	r3, r1
 800ff88:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 800ff8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->RngClockSelection)
 800ff8e:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800ff92:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800ff96:	f000 80ab 	beq.w	80100f0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 800ff9a:	f240 80ed 	bls.w	8010178 <HAL_RCCEx_PeriphCLKConfig+0x760>
 800ff9e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800ffa2:	f000 80aa 	beq.w	80100fa <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800ffa6:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800ffaa:	f000 80a6 	beq.w	80100fa <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800ffae:	2001      	movs	r0, #1
 800ffb0:	e7ba      	b.n	800ff28 <HAL_RCCEx_PeriphCLKConfig+0x510>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ffb2:	2101      	movs	r1, #1
 800ffb4:	1d20      	adds	r0, r4, #4
 800ffb6:	f7ff fc37 	bl	800f828 <RCCEx_PLL2_Config>
 800ffba:	6823      	ldr	r3, [r4, #0]
 800ffbc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800ffbe:	2d00      	cmp	r5, #0
 800ffc0:	f040 8089 	bne.w	80100d6 <HAL_RCCEx_PeriphCLKConfig+0x6be>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ffc4:	4903      	ldr	r1, [pc, #12]	; (800ffd4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>)
 800ffc6:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800ffc8:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800ffca:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800ffce:	4302      	orrs	r2, r0
 800ffd0:	650a      	str	r2, [r1, #80]	; 0x50
 800ffd2:	e644      	b.n	800fc5e <HAL_RCCEx_PeriphCLKConfig+0x246>
 800ffd4:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ffd8:	2102      	movs	r1, #2
 800ffda:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ffde:	f7ff fc9f 	bl	800f920 <RCCEx_PLL3_Config>
 800ffe2:	6823      	ldr	r3, [r4, #0]
 800ffe4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800ffe6:	2d00      	cmp	r5, #0
 800ffe8:	d177      	bne.n	80100da <HAL_RCCEx_PeriphCLKConfig+0x6c2>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ffea:	49ad      	ldr	r1, [pc, #692]	; (80102a0 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800ffec:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 800fff0:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800fff2:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800fff6:	4302      	orrs	r2, r0
 800fff8:	658a      	str	r2, [r1, #88]	; 0x58
 800fffa:	e761      	b.n	800fec0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800fffc:	2101      	movs	r1, #1
 800fffe:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010002:	f7ff fc8d 	bl	800f920 <RCCEx_PLL3_Config>
 8010006:	6823      	ldr	r3, [r4, #0]
 8010008:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 801000a:	2d00      	cmp	r5, #0
 801000c:	d155      	bne.n	80100ba <HAL_RCCEx_PeriphCLKConfig+0x6a2>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801000e:	49a4      	ldr	r1, [pc, #656]	; (80102a0 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8010010:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8010014:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8010016:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 801001a:	4302      	orrs	r2, r0
 801001c:	654a      	str	r2, [r1, #84]	; 0x54
 801001e:	e761      	b.n	800fee4 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8010020:	2102      	movs	r1, #2
 8010022:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010026:	f7ff fc7b 	bl	800f920 <RCCEx_PLL3_Config>
 801002a:	6823      	ldr	r3, [r4, #0]
 801002c:	2800      	cmp	r0, #0
 801002e:	f43f af76 	beq.w	800ff1e <HAL_RCCEx_PeriphCLKConfig+0x506>
      status=HAL_ERROR;
 8010032:	2601      	movs	r6, #1
 8010034:	e773      	b.n	800ff1e <HAL_RCCEx_PeriphCLKConfig+0x506>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8010036:	4b9b      	ldr	r3, [pc, #620]	; (80102a4 <HAL_RCCEx_PeriphCLKConfig+0x88c>)
 8010038:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801003a:	461f      	mov	r7, r3
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801003c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010040:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8010042:	f7fa fadd 	bl	800a600 <HAL_GetTick>
 8010046:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8010048:	e006      	b.n	8010058 <HAL_RCCEx_PeriphCLKConfig+0x640>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801004a:	f7fa fad9 	bl	800a600 <HAL_GetTick>
 801004e:	eba0 0008 	sub.w	r0, r0, r8
 8010052:	2864      	cmp	r0, #100	; 0x64
 8010054:	f200 819c 	bhi.w	8010390 <HAL_RCCEx_PeriphCLKConfig+0x978>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8010058:	683b      	ldr	r3, [r7, #0]
 801005a:	05da      	lsls	r2, r3, #23
 801005c:	d5f5      	bpl.n	801004a <HAL_RCCEx_PeriphCLKConfig+0x632>
    if(ret == HAL_OK)
 801005e:	2d00      	cmp	r5, #0
 8010060:	f040 8242 	bne.w	80104e8 <HAL_RCCEx_PeriphCLKConfig+0xad0>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8010064:	4a8e      	ldr	r2, [pc, #568]	; (80102a0 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8010066:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 801006a:	6f11      	ldr	r1, [r2, #112]	; 0x70
 801006c:	4059      	eors	r1, r3
 801006e:	f411 7f40 	tst.w	r1, #768	; 0x300
 8010072:	d00b      	beq.n	801008c <HAL_RCCEx_PeriphCLKConfig+0x674>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8010074:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8010076:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8010078:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 801007c:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8010080:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8010082:	6f10      	ldr	r0, [r2, #112]	; 0x70
 8010084:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8010088:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 801008a:	6711      	str	r1, [r2, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801008c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010090:	f000 820c 	beq.w	80104ac <HAL_RCCEx_PeriphCLKConfig+0xa94>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8010094:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8010098:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 801009c:	f000 821a 	beq.w	80104d4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
 80100a0:	497f      	ldr	r1, [pc, #508]	; (80102a0 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 80100a2:	690a      	ldr	r2, [r1, #16]
 80100a4:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 80100a8:	610a      	str	r2, [r1, #16]
 80100aa:	4a7d      	ldr	r2, [pc, #500]	; (80102a0 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 80100ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80100b0:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80100b2:	430b      	orrs	r3, r1
 80100b4:	6713      	str	r3, [r2, #112]	; 0x70
 80100b6:	6823      	ldr	r3, [r4, #0]
 80100b8:	e5f0      	b.n	800fc9c <HAL_RCCEx_PeriphCLKConfig+0x284>
 80100ba:	462e      	mov	r6, r5
 80100bc:	e712      	b.n	800fee4 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 80100be:	462e      	mov	r6, r5
 80100c0:	e631      	b.n	800fd26 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 80100c2:	462e      	mov	r6, r5
 80100c4:	e5e7      	b.n	800fc96 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 80100c6:	462e      	mov	r6, r5
 80100c8:	e64c      	b.n	800fd64 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80100ca:	462e      	mov	r6, r5
 80100cc:	e66b      	b.n	800fda6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
 80100ce:	462e      	mov	r6, r5
 80100d0:	e6a9      	b.n	800fe26 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80100d2:	462e      	mov	r6, r5
 80100d4:	e57b      	b.n	800fbce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80100d6:	462e      	mov	r6, r5
 80100d8:	e5c1      	b.n	800fc5e <HAL_RCCEx_PeriphCLKConfig+0x246>
 80100da:	462e      	mov	r6, r5
 80100dc:	e6f0      	b.n	800fec0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80100de:	462e      	mov	r6, r5
 80100e0:	e595      	b.n	800fc0e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80100e2:	462e      	mov	r6, r5
 80100e4:	e6bf      	b.n	800fe66 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80100e6:	462e      	mov	r6, r5
 80100e8:	e67d      	b.n	800fde6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      ret = HAL_ERROR;
 80100ea:	2601      	movs	r6, #1
 80100ec:	4635      	mov	r5, r6
 80100ee:	e5a6      	b.n	800fc3e <HAL_RCCEx_PeriphCLKConfig+0x226>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80100f0:	486b      	ldr	r0, [pc, #428]	; (80102a0 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 80100f2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80100f4:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80100f8:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 80100fa:	2d00      	cmp	r5, #0
 80100fc:	f47f af57 	bne.w	800ffae <HAL_RCCEx_PeriphCLKConfig+0x596>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8010100:	4d67      	ldr	r5, [pc, #412]	; (80102a0 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8010102:	1c30      	adds	r0, r6, #0
 8010104:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8010106:	bf18      	it	ne
 8010108:	2001      	movne	r0, #1
 801010a:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 801010e:	430a      	orrs	r2, r1
 8010110:	656a      	str	r2, [r5, #84]	; 0x54
 8010112:	e709      	b.n	800ff28 <HAL_RCCEx_PeriphCLKConfig+0x510>
      ret = HAL_ERROR;
 8010114:	2601      	movs	r6, #1
 8010116:	4635      	mov	r5, r6
 8010118:	e6fe      	b.n	800ff18 <HAL_RCCEx_PeriphCLKConfig+0x500>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801011a:	4961      	ldr	r1, [pc, #388]	; (80102a0 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 801011c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801011e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8010122:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8010124:	2d00      	cmp	r5, #0
 8010126:	f43f aef0 	beq.w	800ff0a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 801012a:	462e      	mov	r6, r5
 801012c:	e6f4      	b.n	800ff18 <HAL_RCCEx_PeriphCLKConfig+0x500>
 801012e:	462e      	mov	r6, r5
 8010130:	e585      	b.n	800fc3e <HAL_RCCEx_PeriphCLKConfig+0x226>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8010132:	2101      	movs	r1, #1
 8010134:	1d20      	adds	r0, r4, #4
 8010136:	f7ff fb77 	bl	800f828 <RCCEx_PLL2_Config>
 801013a:	4605      	mov	r5, r0
 801013c:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 801013e:	2d00      	cmp	r5, #0
 8010140:	d1c3      	bne.n	80100ca <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8010142:	e628      	b.n	800fd96 <HAL_RCCEx_PeriphCLKConfig+0x37e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8010144:	2101      	movs	r1, #1
 8010146:	1d20      	adds	r0, r4, #4
 8010148:	f7ff fb6e 	bl	800f828 <RCCEx_PLL2_Config>
 801014c:	4605      	mov	r5, r0
 801014e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8010150:	2d00      	cmp	r5, #0
 8010152:	d1b8      	bne.n	80100c6 <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 8010154:	e5ff      	b.n	800fd56 <HAL_RCCEx_PeriphCLKConfig+0x33e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010156:	4952      	ldr	r1, [pc, #328]	; (80102a0 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8010158:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801015a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 801015e:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8010160:	2d00      	cmp	r5, #0
 8010162:	d1ae      	bne.n	80100c2 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 8010164:	e590      	b.n	800fc88 <HAL_RCCEx_PeriphCLKConfig+0x270>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8010166:	2101      	movs	r1, #1
 8010168:	1d20      	adds	r0, r4, #4
 801016a:	f7ff fb5d 	bl	800f828 <RCCEx_PLL2_Config>
 801016e:	4605      	mov	r5, r0
 8010170:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8010172:	2d00      	cmp	r5, #0
 8010174:	d1a3      	bne.n	80100be <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 8010176:	e5cf      	b.n	800fd18 <HAL_RCCEx_PeriphCLKConfig+0x300>
    switch(PeriphClkInit->RngClockSelection)
 8010178:	2a00      	cmp	r2, #0
 801017a:	f47f af18 	bne.w	800ffae <HAL_RCCEx_PeriphCLKConfig+0x596>
 801017e:	e7bc      	b.n	80100fa <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8010180:	2102      	movs	r1, #2
 8010182:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010186:	f7ff fbcb 	bl	800f920 <RCCEx_PLL3_Config>
 801018a:	4605      	mov	r5, r0
 801018c:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 801018e:	2d00      	cmp	r5, #0
 8010190:	d1a9      	bne.n	80100e6 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
 8010192:	e620      	b.n	800fdd6 <HAL_RCCEx_PeriphCLKConfig+0x3be>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8010194:	2102      	movs	r1, #2
 8010196:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801019a:	f7ff fbc1 	bl	800f920 <RCCEx_PLL3_Config>
 801019e:	4605      	mov	r5, r0
 80101a0:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80101a2:	2d00      	cmp	r5, #0
 80101a4:	d193      	bne.n	80100ce <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 80101a6:	e636      	b.n	800fe16 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    switch(PeriphClkInit->Sai1ClockSelection)
 80101a8:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 80101aa:	2d00      	cmp	r5, #0
 80101ac:	d151      	bne.n	8010252 <HAL_RCCEx_PeriphCLKConfig+0x83a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80101ae:	493c      	ldr	r1, [pc, #240]	; (80102a0 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 80101b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80101b2:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80101b4:	f022 0207 	bic.w	r2, r2, #7
 80101b8:	4302      	orrs	r2, r0
 80101ba:	650a      	str	r2, [r1, #80]	; 0x50
 80101bc:	e457      	b.n	800fa6e <HAL_RCCEx_PeriphCLKConfig+0x56>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80101be:	2101      	movs	r1, #1
 80101c0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80101c4:	f7ff fbac 	bl	800f920 <RCCEx_PLL3_Config>
 80101c8:	4605      	mov	r5, r0
 80101ca:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80101cc:	2d00      	cmp	r5, #0
 80101ce:	d180      	bne.n	80100d2 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 80101d0:	e4f6      	b.n	800fbc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80101d2:	4933      	ldr	r1, [pc, #204]	; (80102a0 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 80101d4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80101d6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80101da:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 80101dc:	bb75      	cbnz	r5, 801023c <HAL_RCCEx_PeriphCLKConfig+0x824>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80101de:	4930      	ldr	r1, [pc, #192]	; (80102a0 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 80101e0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80101e2:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80101e4:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80101e8:	4302      	orrs	r2, r0
 80101ea:	64ca      	str	r2, [r1, #76]	; 0x4c
 80101ec:	e4b1      	b.n	800fb52 <HAL_RCCEx_PeriphCLKConfig+0x13a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80101ee:	2101      	movs	r1, #1
 80101f0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80101f4:	f7ff fb94 	bl	800f920 <RCCEx_PLL3_Config>
 80101f8:	4605      	mov	r5, r0
 80101fa:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80101fc:	2d00      	cmp	r5, #0
 80101fe:	f47f af6e 	bne.w	80100de <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 8010202:	e4fc      	b.n	800fbfe <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010204:	4926      	ldr	r1, [pc, #152]	; (80102a0 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8010206:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8010208:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 801020c:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 801020e:	2d00      	cmp	r5, #0
 8010210:	f47f af61 	bne.w	80100d6 <HAL_RCCEx_PeriphCLKConfig+0x6be>
 8010214:	e6d6      	b.n	800ffc4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8010216:	2102      	movs	r1, #2
 8010218:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801021c:	f7ff fb80 	bl	800f920 <RCCEx_PLL3_Config>
 8010220:	4605      	mov	r5, r0
 8010222:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8010224:	2d00      	cmp	r5, #0
 8010226:	f47f af5c 	bne.w	80100e2 <HAL_RCCEx_PeriphCLKConfig+0x6ca>
 801022a:	e614      	b.n	800fe56 <HAL_RCCEx_PeriphCLKConfig+0x43e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 801022c:	2102      	movs	r1, #2
 801022e:	1d20      	adds	r0, r4, #4
 8010230:	f7ff fafa 	bl	800f828 <RCCEx_PLL2_Config>
 8010234:	4605      	mov	r5, r0
 8010236:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8010238:	2d00      	cmp	r5, #0
 801023a:	d0d0      	beq.n	80101de <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 801023c:	462e      	mov	r6, r5
 801023e:	e488      	b.n	800fb52 <HAL_RCCEx_PeriphCLKConfig+0x13a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8010240:	2100      	movs	r1, #0
 8010242:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010246:	f7ff fb6b 	bl	800f920 <RCCEx_PLL3_Config>
 801024a:	4605      	mov	r5, r0
 801024c:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 801024e:	2d00      	cmp	r5, #0
 8010250:	d0ad      	beq.n	80101ae <HAL_RCCEx_PeriphCLKConfig+0x796>
 8010252:	462e      	mov	r6, r5
 8010254:	e40b      	b.n	800fa6e <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010256:	4912      	ldr	r1, [pc, #72]	; (80102a0 <HAL_RCCEx_PeriphCLKConfig+0x888>)
      break;
 8010258:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801025a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801025c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8010260:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8010262:	e7a2      	b.n	80101aa <HAL_RCCEx_PeriphCLKConfig+0x792>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8010264:	2100      	movs	r1, #0
 8010266:	1d20      	adds	r0, r4, #4
 8010268:	f7ff fade 	bl	800f828 <RCCEx_PLL2_Config>
 801026c:	6823      	ldr	r3, [r4, #0]
 801026e:	4605      	mov	r5, r0
      break;
 8010270:	e79b      	b.n	80101aa <HAL_RCCEx_PeriphCLKConfig+0x792>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8010272:	2102      	movs	r1, #2
 8010274:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010278:	f7ff fb52 	bl	800f920 <RCCEx_PLL3_Config>
 801027c:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8010280:	b100      	cbz	r0, 8010284 <HAL_RCCEx_PeriphCLKConfig+0x86c>
          status = HAL_ERROR;
 8010282:	2601      	movs	r6, #1
 8010284:	6823      	ldr	r3, [r4, #0]
 8010286:	e5f6      	b.n	800fe76 <HAL_RCCEx_PeriphCLKConfig+0x45e>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8010288:	2102      	movs	r1, #2
 801028a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801028e:	f7ff fb47 	bl	800f920 <RCCEx_PLL3_Config>
 8010292:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8010296:	b100      	cbz	r0, 801029a <HAL_RCCEx_PeriphCLKConfig+0x882>
        status = HAL_ERROR;
 8010298:	2601      	movs	r6, #1
 801029a:	6823      	ldr	r3, [r4, #0]
 801029c:	e5f9      	b.n	800fe92 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 801029e:	bf00      	nop
 80102a0:	58024400 	.word	0x58024400
 80102a4:	58024800 	.word	0x58024800
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80102a8:	2100      	movs	r1, #0
 80102aa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80102ae:	f7ff fb37 	bl	800f920 <RCCEx_PLL3_Config>
 80102b2:	4605      	mov	r5, r0
 80102b4:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80102b6:	2d00      	cmp	r5, #0
 80102b8:	f43f ac33 	beq.w	800fb22 <HAL_RCCEx_PeriphCLKConfig+0x10a>
 80102bc:	462e      	mov	r6, r5
 80102be:	e438      	b.n	800fb32 <HAL_RCCEx_PeriphCLKConfig+0x11a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80102c0:	2102      	movs	r1, #2
 80102c2:	3004      	adds	r0, #4
 80102c4:	f7ff fab0 	bl	800f828 <RCCEx_PLL2_Config>
 80102c8:	4606      	mov	r6, r0
 80102ca:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80102cc:	2e00      	cmp	r6, #0
 80102ce:	f47f abc0 	bne.w	800fa52 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 80102d2:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80102d4:	f7ff bbb6 	b.w	800fa44 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80102d8:	2100      	movs	r1, #0
 80102da:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80102de:	f7ff fb1f 	bl	800f920 <RCCEx_PLL3_Config>
 80102e2:	4605      	mov	r5, r0
 80102e4:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80102e6:	2d00      	cmp	r5, #0
 80102e8:	f43f abf9 	beq.w	800fade <HAL_RCCEx_PeriphCLKConfig+0xc6>
 80102ec:	462e      	mov	r6, r5
 80102ee:	f7ff bbfe 	b.w	800faee <HAL_RCCEx_PeriphCLKConfig+0xd6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80102f2:	2100      	movs	r1, #0
 80102f4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80102f8:	f7ff fb12 	bl	800f920 <RCCEx_PLL3_Config>
 80102fc:	4605      	mov	r5, r0
 80102fe:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8010300:	2d00      	cmp	r5, #0
 8010302:	f43f abcb 	beq.w	800fa9c <HAL_RCCEx_PeriphCLKConfig+0x84>
 8010306:	462e      	mov	r6, r5
 8010308:	f7ff bbcf 	b.w	800faaa <HAL_RCCEx_PeriphCLKConfig+0x92>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 801030c:	2100      	movs	r1, #0
 801030e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010312:	f7ff fb05 	bl	800f920 <RCCEx_PLL3_Config>
 8010316:	4605      	mov	r5, r0
 8010318:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 801031a:	2d00      	cmp	r5, #0
 801031c:	f43f ac32 	beq.w	800fb84 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8010320:	462e      	mov	r6, r5
 8010322:	e436      	b.n	800fb92 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010324:	4977      	ldr	r1, [pc, #476]	; (8010504 <HAL_RCCEx_PeriphCLKConfig+0xaec>)
 8010326:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8010328:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 801032c:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 801032e:	f7ff bbd3 	b.w	800fad8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010332:	4974      	ldr	r1, [pc, #464]	; (8010504 <HAL_RCCEx_PeriphCLKConfig+0xaec>)
 8010334:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8010336:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 801033a:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 801033c:	e41f      	b.n	800fb7e <HAL_RCCEx_PeriphCLKConfig+0x166>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 801033e:	2102      	movs	r1, #2
 8010340:	3024      	adds	r0, #36	; 0x24
 8010342:	f7ff faed 	bl	800f920 <RCCEx_PLL3_Config>
 8010346:	4606      	mov	r6, r0
      break;
 8010348:	e7bf      	b.n	80102ca <HAL_RCCEx_PeriphCLKConfig+0x8b2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801034a:	496e      	ldr	r1, [pc, #440]	; (8010504 <HAL_RCCEx_PeriphCLKConfig+0xaec>)
 801034c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801034e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8010352:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8010354:	f7ff bb9f 	b.w	800fa96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010358:	496a      	ldr	r1, [pc, #424]	; (8010504 <HAL_RCCEx_PeriphCLKConfig+0xaec>)
 801035a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801035c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8010360:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8010362:	f7ff bbdb 	b.w	800fb1c <HAL_RCCEx_PeriphCLKConfig+0x104>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8010366:	1d20      	adds	r0, r4, #4
 8010368:	f7ff fa5e 	bl	800f828 <RCCEx_PLL2_Config>
 801036c:	4605      	mov	r5, r0
 801036e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8010370:	2d00      	cmp	r5, #0
 8010372:	f47f aeb2 	bne.w	80100da <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8010376:	e638      	b.n	800ffea <HAL_RCCEx_PeriphCLKConfig+0x5d2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010378:	4962      	ldr	r1, [pc, #392]	; (8010504 <HAL_RCCEx_PeriphCLKConfig+0xaec>)
 801037a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801037c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8010380:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8010382:	2d00      	cmp	r5, #0
 8010384:	f47f ae99 	bne.w	80100ba <HAL_RCCEx_PeriphCLKConfig+0x6a2>
 8010388:	e641      	b.n	801000e <HAL_RCCEx_PeriphCLKConfig+0x5f6>
      ret = HAL_ERROR;
 801038a:	2601      	movs	r6, #1
 801038c:	4635      	mov	r5, r6
 801038e:	e4ca      	b.n	800fd26 <HAL_RCCEx_PeriphCLKConfig+0x30e>
            ret = HAL_TIMEOUT;
 8010390:	2603      	movs	r6, #3
 8010392:	6823      	ldr	r3, [r4, #0]
 8010394:	4635      	mov	r5, r6
 8010396:	e481      	b.n	800fc9c <HAL_RCCEx_PeriphCLKConfig+0x284>
    switch(PeriphClkInit->Spi45ClockSelection)
 8010398:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 801039c:	f43f ac0d 	beq.w	800fbba <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80103a0:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80103a4:	f43f ac09 	beq.w	800fbba <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80103a8:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 80103ac:	f43f ac05 	beq.w	800fbba <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      ret = HAL_ERROR;
 80103b0:	2601      	movs	r6, #1
 80103b2:	4635      	mov	r5, r6
 80103b4:	e40b      	b.n	800fbce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->Spi6ClockSelection)
 80103b6:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80103ba:	f43f ac1d 	beq.w	800fbf8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 80103be:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80103c2:	f43f ac19 	beq.w	800fbf8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 80103c6:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 80103ca:	f43f ac15 	beq.w	800fbf8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      ret = HAL_ERROR;
 80103ce:	2601      	movs	r6, #1
 80103d0:	4635      	mov	r5, r6
 80103d2:	e41c      	b.n	800fc0e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80103d4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80103d8:	f43f ad1a 	beq.w	800fe10 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80103dc:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 80103e0:	f43f ad16 	beq.w	800fe10 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80103e4:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 80103e8:	f43f ad12 	beq.w	800fe10 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
      ret = HAL_ERROR;
 80103ec:	2601      	movs	r6, #1
 80103ee:	4635      	mov	r5, r6
 80103f0:	e519      	b.n	800fe26 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80103f2:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80103f6:	f43f aceb 	beq.w	800fdd0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 80103fa:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80103fe:	f43f ace7 	beq.w	800fdd0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8010402:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8010406:	f43f ace3 	beq.w	800fdd0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      ret = HAL_ERROR;
 801040a:	2601      	movs	r6, #1
 801040c:	4635      	mov	r5, r6
 801040e:	e4ea      	b.n	800fde6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8010410:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8010414:	f43f ad1c 	beq.w	800fe50 <HAL_RCCEx_PeriphCLKConfig+0x438>
 8010418:	f5b2 4f20 	cmp.w	r2, #40960	; 0xa000
 801041c:	f43f ad18 	beq.w	800fe50 <HAL_RCCEx_PeriphCLKConfig+0x438>
 8010420:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 8010424:	f43f ad14 	beq.w	800fe50 <HAL_RCCEx_PeriphCLKConfig+0x438>
      ret = HAL_ERROR;
 8010428:	2601      	movs	r6, #1
 801042a:	4635      	mov	r5, r6
 801042c:	e51b      	b.n	800fe66 <HAL_RCCEx_PeriphCLKConfig+0x44e>
    switch(PeriphClkInit->SpdifrxClockSelection)
 801042e:	bbd2      	cbnz	r2, 80104a6 <HAL_RCCEx_PeriphCLKConfig+0xa8e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010430:	4834      	ldr	r0, [pc, #208]	; (8010504 <HAL_RCCEx_PeriphCLKConfig+0xaec>)
 8010432:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8010434:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8010438:	62c1      	str	r1, [r0, #44]	; 0x2c
 801043a:	f7ff bb03 	b.w	800fa44 <HAL_RCCEx_PeriphCLKConfig+0x2c>
    switch(PeriphClkInit->Spi123ClockSelection)
 801043e:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8010442:	f43f ab9c 	beq.w	800fb7e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8010446:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 801044a:	f43f ab98 	beq.w	800fb7e <HAL_RCCEx_PeriphCLKConfig+0x166>
      ret = HAL_ERROR;
 801044e:	2601      	movs	r6, #1
 8010450:	4635      	mov	r5, r6
 8010452:	f7ff bb9e 	b.w	800fb92 <HAL_RCCEx_PeriphCLKConfig+0x17a>
    switch(PeriphClkInit->Sai4BClockSelection)
 8010456:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 801045a:	f43f ab5f 	beq.w	800fb1c <HAL_RCCEx_PeriphCLKConfig+0x104>
 801045e:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8010462:	f43f ab5b 	beq.w	800fb1c <HAL_RCCEx_PeriphCLKConfig+0x104>
      ret = HAL_ERROR;
 8010466:	2601      	movs	r6, #1
 8010468:	4635      	mov	r5, r6
 801046a:	f7ff bb62 	b.w	800fb32 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch(PeriphClkInit->Sai23ClockSelection)
 801046e:	2ac0      	cmp	r2, #192	; 0xc0
 8010470:	f43f ab11 	beq.w	800fa96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8010474:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8010478:	f43f ab0d 	beq.w	800fa96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      ret = HAL_ERROR;
 801047c:	2601      	movs	r6, #1
 801047e:	4635      	mov	r5, r6
 8010480:	f7ff bb13 	b.w	800faaa <HAL_RCCEx_PeriphCLKConfig+0x92>
    switch(PeriphClkInit->Sai4AClockSelection)
 8010484:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 8010488:	f43f ab26 	beq.w	800fad8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 801048c:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8010490:	f43f ab22 	beq.w	800fad8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      ret = HAL_ERROR;
 8010494:	2601      	movs	r6, #1
 8010496:	4635      	mov	r5, r6
 8010498:	f7ff bb29 	b.w	800faee <HAL_RCCEx_PeriphCLKConfig+0xd6>
    switch(PeriphClkInit->QspiClockSelection)
 801049c:	2a00      	cmp	r2, #0
 801049e:	f43f ae9d 	beq.w	80101dc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
 80104a2:	f7ff bb54 	b.w	800fb4e <HAL_RCCEx_PeriphCLKConfig+0x136>
      ret = HAL_ERROR;
 80104a6:	2601      	movs	r6, #1
 80104a8:	f7ff bad3 	b.w	800fa52 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 80104ac:	f7fa f8a8 	bl	800a600 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80104b0:	4f14      	ldr	r7, [pc, #80]	; (8010504 <HAL_RCCEx_PeriphCLKConfig+0xaec>)
        tickstart = HAL_GetTick();
 80104b2:	4681      	mov	r9, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80104b4:	f241 3888 	movw	r8, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80104b8:	e006      	b.n	80104c8 <HAL_RCCEx_PeriphCLKConfig+0xab0>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80104ba:	f7fa f8a1 	bl	800a600 <HAL_GetTick>
 80104be:	eba0 0009 	sub.w	r0, r0, r9
 80104c2:	4540      	cmp	r0, r8
 80104c4:	f63f af64 	bhi.w	8010390 <HAL_RCCEx_PeriphCLKConfig+0x978>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80104c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80104ca:	079b      	lsls	r3, r3, #30
 80104cc:	d5f5      	bpl.n	80104ba <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80104ce:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 80104d2:	e5df      	b.n	8010094 <HAL_RCCEx_PeriphCLKConfig+0x67c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80104d4:	480b      	ldr	r0, [pc, #44]	; (8010504 <HAL_RCCEx_PeriphCLKConfig+0xaec>)
 80104d6:	4a0c      	ldr	r2, [pc, #48]	; (8010508 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 80104d8:	6901      	ldr	r1, [r0, #16]
 80104da:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 80104de:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 80104e2:	430a      	orrs	r2, r1
 80104e4:	6102      	str	r2, [r0, #16]
 80104e6:	e5e0      	b.n	80100aa <HAL_RCCEx_PeriphCLKConfig+0x692>
 80104e8:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80104ea:	462e      	mov	r6, r5
 80104ec:	f7ff bbd6 	b.w	800fc9c <HAL_RCCEx_PeriphCLKConfig+0x284>
      ret = HAL_ERROR;
 80104f0:	2601      	movs	r6, #1
 80104f2:	4635      	mov	r5, r6
 80104f4:	f7ff bbcf 	b.w	800fc96 <HAL_RCCEx_PeriphCLKConfig+0x27e>
      ret = HAL_ERROR;
 80104f8:	2601      	movs	r6, #1
 80104fa:	4635      	mov	r5, r6
 80104fc:	e453      	b.n	800fda6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
      ret = HAL_ERROR;
 80104fe:	2601      	movs	r6, #1
 8010500:	4635      	mov	r5, r6
 8010502:	e42f      	b.n	800fd64 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8010504:	58024400 	.word	0x58024400
 8010508:	00ffffcf 	.word	0x00ffffcf

0801050c <HAL_RCCEx_GetD3PCLK1Freq>:
{
 801050c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 801050e:	f7fe ff83 	bl	800f418 <HAL_RCC_GetHCLKFreq>
 8010512:	4b05      	ldr	r3, [pc, #20]	; (8010528 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8010514:	4a05      	ldr	r2, [pc, #20]	; (801052c <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8010516:	6a1b      	ldr	r3, [r3, #32]
 8010518:	f3c3 1302 	ubfx	r3, r3, #4, #3
 801051c:	5cd3      	ldrb	r3, [r2, r3]
 801051e:	f003 031f 	and.w	r3, r3, #31
}
 8010522:	40d8      	lsrs	r0, r3
 8010524:	bd08      	pop	{r3, pc}
 8010526:	bf00      	nop
 8010528:	58024400 	.word	0x58024400
 801052c:	08020a64 	.word	0x08020a64

08010530 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010530:	4a46      	ldr	r2, [pc, #280]	; (801064c <HAL_RCCEx_GetPLL2ClockFreq+0x11c>)
{
 8010532:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010534:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8010536:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8010538:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 801053a:	f3c3 3305 	ubfx	r3, r3, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 801053e:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 8010540:	2b00      	cmp	r3, #0
 8010542:	d059      	beq.n	80105f8 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8010544:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8010548:	f3c1 1100 	ubfx	r1, r1, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801054c:	f004 0403 	and.w	r4, r4, #3
 8010550:	ee07 3a90 	vmov	s15, r3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8010554:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 8010558:	2c01      	cmp	r4, #1
 801055a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801055e:	ee06 1a90 	vmov	s13, r1
 8010562:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8010566:	d002      	beq.n	801056e <HAL_RCCEx_GetPLL2ClockFreq+0x3e>
 8010568:	d34e      	bcc.n	8010608 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 801056a:	2c02      	cmp	r4, #2
 801056c:	d049      	beq.n	8010602 <HAL_RCCEx_GetPLL2ClockFreq+0xd2>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 801056e:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8010650 <HAL_RCCEx_GetPLL2ClockFreq+0x120>
 8010572:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8010576:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8010578:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801057c:	ee07 3a10 	vmov	s14, r3
 8010580:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8010584:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010588:	ee37 7a25 	vadd.f32	s14, s14, s11
 801058c:	ee77 7a26 	vadd.f32	s15, s14, s13
 8010590:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8010594:	4a2d      	ldr	r2, [pc, #180]	; (801064c <HAL_RCCEx_GetPLL2ClockFreq+0x11c>)
 8010596:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801059a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 801059c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80105a0:	ee06 3a90 	vmov	s13, r3
 80105a4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 80105a8:	bc30      	pop	{r4, r5}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80105aa:	ee76 6a86 	vadd.f32	s13, s13, s12
 80105ae:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80105b2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80105b6:	ed80 7a00 	vstr	s14, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80105ba:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80105bc:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80105c0:	ee06 3a90 	vmov	s13, r3
 80105c4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80105c8:	ee76 6a86 	vadd.f32	s13, s13, s12
 80105cc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80105d0:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80105d4:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80105d8:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80105da:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80105de:	ee07 3a10 	vmov	s14, r3
 80105e2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80105e6:	ee37 7a06 	vadd.f32	s14, s14, s12
 80105ea:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80105ee:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80105f2:	edc0 6a02 	vstr	s13, [r0, #8]
}
 80105f6:	4770      	bx	lr
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80105f8:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80105fc:	6083      	str	r3, [r0, #8]
}
 80105fe:	bc30      	pop	{r4, r5}
 8010600:	4770      	bx	lr
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8010602:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8010654 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8010606:	e7b4      	b.n	8010572 <HAL_RCCEx_GetPLL2ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010608:	6813      	ldr	r3, [r2, #0]
 801060a:	069b      	lsls	r3, r3, #26
 801060c:	d51a      	bpl.n	8010644 <HAL_RCCEx_GetPLL2ClockFreq+0x114>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 801060e:	6814      	ldr	r4, [r2, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8010610:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8010614:	4910      	ldr	r1, [pc, #64]	; (8010658 <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
 8010616:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 801061a:	6b93      	ldr	r3, [r2, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 801061c:	40e1      	lsrs	r1, r4
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 801061e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010622:	ee07 1a10 	vmov	s14, r1
 8010626:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 801062a:	ee07 3a10 	vmov	s14, r3
 801062e:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8010632:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8010636:	ee76 7a05 	vadd.f32	s15, s12, s10
 801063a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801063e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010642:	e7a7      	b.n	8010594 <HAL_RCCEx_GetPLL2ClockFreq+0x64>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8010644:	ed9f 7a05 	vldr	s14, [pc, #20]	; 801065c <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
 8010648:	e793      	b.n	8010572 <HAL_RCCEx_GetPLL2ClockFreq+0x42>
 801064a:	bf00      	nop
 801064c:	58024400 	.word	0x58024400
 8010650:	4a742400 	.word	0x4a742400
 8010654:	4bbebc20 	.word	0x4bbebc20
 8010658:	03d09000 	.word	0x03d09000
 801065c:	4c742400 	.word	0x4c742400

08010660 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010660:	4a46      	ldr	r2, [pc, #280]	; (801077c <HAL_RCCEx_GetPLL3ClockFreq+0x11c>)
{
 8010662:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010664:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8010666:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8010668:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 801066a:	f3c3 5305 	ubfx	r3, r3, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 801066e:	6c55      	ldr	r5, [r2, #68]	; 0x44
  if (pll3m != 0U)
 8010670:	2b00      	cmp	r3, #0
 8010672:	d059      	beq.n	8010728 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8010674:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8010678:	f3c1 2100 	ubfx	r1, r1, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801067c:	f004 0403 	and.w	r4, r4, #3
 8010680:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8010684:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 8010688:	2c01      	cmp	r4, #1
 801068a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801068e:	ee06 1a90 	vmov	s13, r1
 8010692:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8010696:	d002      	beq.n	801069e <HAL_RCCEx_GetPLL3ClockFreq+0x3e>
 8010698:	d34e      	bcc.n	8010738 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 801069a:	2c02      	cmp	r4, #2
 801069c:	d049      	beq.n	8010732 <HAL_RCCEx_GetPLL3ClockFreq+0xd2>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 801069e:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8010780 <HAL_RCCEx_GetPLL3ClockFreq+0x120>
 80106a2:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80106a6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80106a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80106ac:	ee07 3a10 	vmov	s14, r3
 80106b0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80106b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80106b8:	ee37 7a25 	vadd.f32	s14, s14, s11
 80106bc:	ee77 7a26 	vadd.f32	s15, s14, s13
 80106c0:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80106c4:	4a2d      	ldr	r2, [pc, #180]	; (801077c <HAL_RCCEx_GetPLL3ClockFreq+0x11c>)
 80106c6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80106ca:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80106cc:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80106d0:	ee06 3a90 	vmov	s13, r3
 80106d4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 80106d8:	bc30      	pop	{r4, r5}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80106da:	ee76 6a86 	vadd.f32	s13, s13, s12
 80106de:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80106e2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80106e6:	ed80 7a00 	vstr	s14, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80106ea:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80106ec:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80106f0:	ee06 3a90 	vmov	s13, r3
 80106f4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80106f8:	ee76 6a86 	vadd.f32	s13, s13, s12
 80106fc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8010700:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8010704:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8010708:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801070a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 801070e:	ee07 3a10 	vmov	s14, r3
 8010712:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010716:	ee37 7a06 	vadd.f32	s14, s14, s12
 801071a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801071e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8010722:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8010726:	4770      	bx	lr
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8010728:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 801072c:	6083      	str	r3, [r0, #8]
}
 801072e:	bc30      	pop	{r4, r5}
 8010730:	4770      	bx	lr
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8010732:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8010784 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 8010736:	e7b4      	b.n	80106a2 <HAL_RCCEx_GetPLL3ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010738:	6813      	ldr	r3, [r2, #0]
 801073a:	069b      	lsls	r3, r3, #26
 801073c:	d51a      	bpl.n	8010774 <HAL_RCCEx_GetPLL3ClockFreq+0x114>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 801073e:	6814      	ldr	r4, [r2, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8010740:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8010744:	4910      	ldr	r1, [pc, #64]	; (8010788 <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
 8010746:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 801074a:	6c13      	ldr	r3, [r2, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 801074c:	40e1      	lsrs	r1, r4
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 801074e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010752:	ee07 1a10 	vmov	s14, r1
 8010756:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 801075a:	ee07 3a10 	vmov	s14, r3
 801075e:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8010762:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8010766:	ee76 7a05 	vadd.f32	s15, s12, s10
 801076a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801076e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010772:	e7a7      	b.n	80106c4 <HAL_RCCEx_GetPLL3ClockFreq+0x64>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8010774:	ed9f 7a05 	vldr	s14, [pc, #20]	; 801078c <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
 8010778:	e793      	b.n	80106a2 <HAL_RCCEx_GetPLL3ClockFreq+0x42>
 801077a:	bf00      	nop
 801077c:	58024400 	.word	0x58024400
 8010780:	4a742400 	.word	0x4a742400
 8010784:	4bbebc20 	.word	0x4bbebc20
 8010788:	03d09000 	.word	0x03d09000
 801078c:	4c742400 	.word	0x4c742400

08010790 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010790:	4a46      	ldr	r2, [pc, #280]	; (80108ac <HAL_RCCEx_GetPLL1ClockFreq+0x11c>)
{
 8010792:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010794:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8010796:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8010798:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 801079a:	f3c3 1305 	ubfx	r3, r3, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 801079e:	6b55      	ldr	r5, [r2, #52]	; 0x34
  if (pll1m != 0U)
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d059      	beq.n	8010858 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80107a4:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80107a8:	f001 0101 	and.w	r1, r1, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80107ac:	f004 0403 	and.w	r4, r4, #3
 80107b0:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80107b4:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 80107b8:	2c01      	cmp	r4, #1
 80107ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80107be:	ee06 1a90 	vmov	s13, r1
 80107c2:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 80107c6:	d002      	beq.n	80107ce <HAL_RCCEx_GetPLL1ClockFreq+0x3e>
 80107c8:	d34e      	bcc.n	8010868 <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
 80107ca:	2c02      	cmp	r4, #2
 80107cc:	d049      	beq.n	8010862 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80107ce:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80108b0 <HAL_RCCEx_GetPLL1ClockFreq+0x120>
 80107d2:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80107d6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80107d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80107dc:	ee07 3a10 	vmov	s14, r3
 80107e0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80107e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80107e8:	ee37 7a25 	vadd.f32	s14, s14, s11
 80107ec:	ee77 7a26 	vadd.f32	s15, s14, s13
 80107f0:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80107f4:	4a2d      	ldr	r2, [pc, #180]	; (80108ac <HAL_RCCEx_GetPLL1ClockFreq+0x11c>)
 80107f6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80107fa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80107fc:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8010800:	ee06 3a90 	vmov	s13, r3
 8010804:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 8010808:	bc30      	pop	{r4, r5}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 801080a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801080e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8010812:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8010816:	ed80 7a00 	vstr	s14, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 801081a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 801081c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8010820:	ee06 3a90 	vmov	s13, r3
 8010824:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8010828:	ee76 6a86 	vadd.f32	s13, s13, s12
 801082c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8010830:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8010834:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8010838:	6b13      	ldr	r3, [r2, #48]	; 0x30
 801083a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 801083e:	ee07 3a10 	vmov	s14, r3
 8010842:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010846:	ee37 7a06 	vadd.f32	s14, s14, s12
 801084a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801084e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8010852:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8010856:	4770      	bx	lr
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8010858:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 801085c:	6083      	str	r3, [r0, #8]
}
 801085e:	bc30      	pop	{r4, r5}
 8010860:	4770      	bx	lr
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8010862:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80108b4 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 8010866:	e7b4      	b.n	80107d2 <HAL_RCCEx_GetPLL1ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010868:	6813      	ldr	r3, [r2, #0]
 801086a:	069b      	lsls	r3, r3, #26
 801086c:	d51a      	bpl.n	80108a4 <HAL_RCCEx_GetPLL1ClockFreq+0x114>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 801086e:	6814      	ldr	r4, [r2, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8010870:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8010874:	4910      	ldr	r1, [pc, #64]	; (80108b8 <HAL_RCCEx_GetPLL1ClockFreq+0x128>)
 8010876:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801087a:	6b13      	ldr	r3, [r2, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 801087c:	40e1      	lsrs	r1, r4
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801087e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010882:	ee07 1a10 	vmov	s14, r1
 8010886:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 801088a:	ee07 3a10 	vmov	s14, r3
 801088e:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8010892:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8010896:	ee76 7a05 	vadd.f32	s15, s12, s10
 801089a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801089e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80108a2:	e7a7      	b.n	80107f4 <HAL_RCCEx_GetPLL1ClockFreq+0x64>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80108a4:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80108bc <HAL_RCCEx_GetPLL1ClockFreq+0x12c>
 80108a8:	e793      	b.n	80107d2 <HAL_RCCEx_GetPLL1ClockFreq+0x42>
 80108aa:	bf00      	nop
 80108ac:	58024400 	.word	0x58024400
 80108b0:	4a742400 	.word	0x4a742400
 80108b4:	4bbebc20 	.word	0x4bbebc20
 80108b8:	03d09000 	.word	0x03d09000
 80108bc:	4c742400 	.word	0x4c742400

080108c0 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80108c0:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 80108c4:	b500      	push	{lr}
 80108c6:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80108c8:	d02d      	beq.n	8010926 <HAL_RCCEx_GetPeriphCLKFreq+0x66>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80108ca:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80108ce:	d018      	beq.n	8010902 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80108d0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80108d4:	d04e      	beq.n	8010974 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80108d6:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80108da:	d037      	beq.n	801094c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80108dc:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80108e0:	f000 808b 	beq.w	80109fa <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80108e4:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 80108e8:	f000 80ac 	beq.w	8010a44 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80108ec:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80108f0:	f000 80b6 	beq.w	8010a60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80108f4:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 80108f8:	d062      	beq.n	80109c0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
          frequency = 0;
 80108fa:	2000      	movs	r0, #0
}
 80108fc:	b005      	add	sp, #20
 80108fe:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8010902:	4a70      	ldr	r2, [pc, #448]	; (8010ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8010904:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8010906:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 801090a:	2b80      	cmp	r3, #128	; 0x80
 801090c:	d043      	beq.n	8010996 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 801090e:	d86a      	bhi.n	80109e6 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8010910:	2b00      	cmp	r3, #0
 8010912:	d039      	beq.n	8010988 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 8010914:	2b40      	cmp	r3, #64	; 0x40
 8010916:	d1f0      	bne.n	80108fa <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010918:	a801      	add	r0, sp, #4
 801091a:	f7ff fe09 	bl	8010530 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801091e:	9801      	ldr	r0, [sp, #4]
}
 8010920:	b005      	add	sp, #20
 8010922:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8010926:	4b67      	ldr	r3, [pc, #412]	; (8010ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8010928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801092a:	f003 0307 	and.w	r3, r3, #7
      switch (saiclocksource)
 801092e:	2b04      	cmp	r3, #4
 8010930:	d8e3      	bhi.n	80108fa <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8010932:	a201      	add	r2, pc, #4	; (adr r2, 8010938 <HAL_RCCEx_GetPeriphCLKFreq+0x78>)
 8010934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010938:	08010989 	.word	0x08010989
 801093c:	08010919 	.word	0x08010919
 8010940:	08010997 	.word	0x08010997
 8010944:	0801096d 	.word	0x0801096d
 8010948:	080109a5 	.word	0x080109a5
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 801094c:	4a5d      	ldr	r2, [pc, #372]	; (8010ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 801094e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8010950:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 8010954:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010958:	d01d      	beq.n	8010996 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 801095a:	d85c      	bhi.n	8010a16 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
 801095c:	b1a3      	cbz	r3, 8010988 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 801095e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8010962:	d0d9      	beq.n	8010918 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 8010964:	e7c9      	b.n	80108fa <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (saiclocksource)
 8010966:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801096a:	d15b      	bne.n	8010a24 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
          frequency = EXTERNAL_CLOCK_VALUE;
 801096c:	4856      	ldr	r0, [pc, #344]	; (8010ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
}
 801096e:	b005      	add	sp, #20
 8010970:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8010974:	4a53      	ldr	r2, [pc, #332]	; (8010ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8010976:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8010978:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 801097c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010980:	d009      	beq.n	8010996 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8010982:	d8f0      	bhi.n	8010966 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8010984:	2b00      	cmp	r3, #0
 8010986:	d151      	bne.n	8010a2c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010988:	a801      	add	r0, sp, #4
 801098a:	f7ff ff01 	bl	8010790 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801098e:	9802      	ldr	r0, [sp, #8]
}
 8010990:	b005      	add	sp, #20
 8010992:	f85d fb04 	ldr.w	pc, [sp], #4
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010996:	a801      	add	r0, sp, #4
 8010998:	f7ff fe62 	bl	8010660 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801099c:	9801      	ldr	r0, [sp, #4]
}
 801099e:	b005      	add	sp, #20
 80109a0:	f85d fb04 	ldr.w	pc, [sp], #4
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80109a4:	4b47      	ldr	r3, [pc, #284]	; (8010ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 80109a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80109a8:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 80109ac:	d019      	beq.n	80109e2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80109ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80109b2:	d062      	beq.n	8010a7a <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
            frequency = HSE_VALUE;
 80109b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80109b8:	4844      	ldr	r0, [pc, #272]	; (8010acc <HAL_RCCEx_GetPeriphCLKFreq+0x20c>)
 80109ba:	bf18      	it	ne
 80109bc:	2000      	movne	r0, #0
 80109be:	e79d      	b.n	80108fc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80109c0:	4b40      	ldr	r3, [pc, #256]	; (8010ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 80109c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80109c4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 80109c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80109cc:	d068      	beq.n	8010aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 80109ce:	d95b      	bls.n	8010a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>
 80109d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80109d4:	d051      	beq.n	8010a7a <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 80109d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80109da:	d05f      	beq.n	8010a9c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 80109dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80109e0:	d18b      	bne.n	80108fa <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
            frequency = HSI_VALUE;
 80109e2:	483b      	ldr	r0, [pc, #236]	; (8010ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x210>)
 80109e4:	e78a      	b.n	80108fc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      switch (saiclocksource)
 80109e6:	2bc0      	cmp	r3, #192	; 0xc0
 80109e8:	d0c0      	beq.n	801096c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 80109ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80109ee:	d184      	bne.n	80108fa <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80109f0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80109f2:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 80109f6:	d1da      	bne.n	80109ae <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 80109f8:	e7f3      	b.n	80109e2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80109fa:	4a32      	ldr	r2, [pc, #200]	; (8010ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 80109fc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80109fe:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 8010a02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010a06:	d0c6      	beq.n	8010996 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8010a08:	d815      	bhi.n	8010a36 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d0bc      	beq.n	8010988 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 8010a0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010a12:	d081      	beq.n	8010918 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 8010a14:	e771      	b.n	80108fa <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (saiclocksource)
 8010a16:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8010a1a:	d0a7      	beq.n	801096c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 8010a1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010a20:	d0e6      	beq.n	80109f0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8010a22:	e76a      	b.n	80108fa <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (saiclocksource)
 8010a24:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010a28:	d0e2      	beq.n	80109f0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8010a2a:	e766      	b.n	80108fa <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8010a2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010a30:	f43f af72 	beq.w	8010918 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 8010a34:	e761      	b.n	80108fa <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (srcclk)
 8010a36:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010a3a:	d097      	beq.n	801096c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 8010a3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010a40:	d0d6      	beq.n	80109f0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8010a42:	e75a      	b.n	80108fa <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8010a44:	4a1f      	ldr	r2, [pc, #124]	; (8010ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8010a46:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8010a48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 8010a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010a50:	d015      	beq.n	8010a7e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8010a52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010a56:	d0cb      	beq.n	80109f0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	f47f af4e 	bne.w	80108fa <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8010a5e:	e75b      	b.n	8010918 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8010a60:	4b18      	ldr	r3, [pc, #96]	; (8010ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8010a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      switch (srcclk)
 8010a64:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8010a68:	d08e      	beq.n	8010988 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	f43f af45 	beq.w	80108fa <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010a70:	a801      	add	r0, sp, #4
 8010a72:	f7ff fd5d 	bl	8010530 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8010a76:	9803      	ldr	r0, [sp, #12]
          break;
 8010a78:	e740      	b.n	80108fc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
            frequency = CSI_VALUE;
 8010a7a:	4816      	ldr	r0, [pc, #88]	; (8010ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x214>)
 8010a7c:	e73e      	b.n	80108fc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010a7e:	a801      	add	r0, sp, #4
 8010a80:	f7ff fdee 	bl	8010660 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8010a84:	9803      	ldr	r0, [sp, #12]
          break;
 8010a86:	e739      	b.n	80108fc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      switch (srcclk)
 8010a88:	b17b      	cbz	r3, 8010aaa <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8010a8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010a8e:	f47f af34 	bne.w	80108fa <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010a92:	a801      	add	r0, sp, #4
 8010a94:	f7ff fd4c 	bl	8010530 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010a98:	9802      	ldr	r0, [sp, #8]
          break;
 8010a9a:	e72f      	b.n	80108fc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          frequency = HSE_VALUE;
 8010a9c:	480b      	ldr	r0, [pc, #44]	; (8010acc <HAL_RCCEx_GetPeriphCLKFreq+0x20c>)
          break;
 8010a9e:	e72d      	b.n	80108fc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010aa0:	a801      	add	r0, sp, #4
 8010aa2:	f7ff fddd 	bl	8010660 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8010aa6:	9802      	ldr	r0, [sp, #8]
          break;
 8010aa8:	e728      	b.n	80108fc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8010aaa:	f7fe fcb5 	bl	800f418 <HAL_RCC_GetHCLKFreq>
 8010aae:	4b05      	ldr	r3, [pc, #20]	; (8010ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8010ab0:	4a09      	ldr	r2, [pc, #36]	; (8010ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x218>)
 8010ab2:	6a1b      	ldr	r3, [r3, #32]
 8010ab4:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8010ab8:	5cd3      	ldrb	r3, [r2, r3]
 8010aba:	f003 031f 	and.w	r3, r3, #31
 8010abe:	40d8      	lsrs	r0, r3
          break;
 8010ac0:	e71c      	b.n	80108fc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8010ac2:	bf00      	nop
 8010ac4:	58024400 	.word	0x58024400
 8010ac8:	00bb8000 	.word	0x00bb8000
 8010acc:	017d7840 	.word	0x017d7840
 8010ad0:	03d09000 	.word	0x03d09000
 8010ad4:	003d0900 	.word	0x003d0900
 8010ad8:	08020a64 	.word	0x08020a64

08010adc <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8010adc:	b380      	cbz	r0, 8010b40 <HAL_RNG_Init+0x64>
{
 8010ade:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8010ae0:	7a43      	ldrb	r3, [r0, #9]
 8010ae2:	4604      	mov	r4, r0
 8010ae4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8010ae8:	b333      	cbz	r3, 8010b38 <HAL_RNG_Init+0x5c>
    HAL_RNG_MspInit(hrng);
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8010aea:	2202      	movs	r2, #2
      return HAL_ERROR;
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8010aec:	e9d4 3100 	ldrd	r3, r1, [r4]
  hrng->State = HAL_RNG_STATE_BUSY;
 8010af0:	7262      	strb	r2, [r4, #9]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8010af2:	681a      	ldr	r2, [r3, #0]
 8010af4:	f022 0220 	bic.w	r2, r2, #32
 8010af8:	430a      	orrs	r2, r1
 8010afa:	601a      	str	r2, [r3, #0]
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8010afc:	681a      	ldr	r2, [r3, #0]
 8010afe:	f042 0204 	orr.w	r2, r2, #4
 8010b02:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8010b04:	685b      	ldr	r3, [r3, #4]
 8010b06:	065b      	lsls	r3, r3, #25
 8010b08:	d503      	bpl.n	8010b12 <HAL_RNG_Init+0x36>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8010b0a:	2304      	movs	r3, #4
    return HAL_ERROR;
 8010b0c:	2001      	movs	r0, #1
    hrng->State = HAL_RNG_STATE_ERROR;
 8010b0e:	7263      	strb	r3, [r4, #9]
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
 8010b10:	bd38      	pop	{r3, r4, r5, pc}
  tickstart = HAL_GetTick();
 8010b12:	f7f9 fd75 	bl	800a600 <HAL_GetTick>
 8010b16:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8010b18:	e004      	b.n	8010b24 <HAL_RNG_Init+0x48>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8010b1a:	f7f9 fd71 	bl	800a600 <HAL_GetTick>
 8010b1e:	1b40      	subs	r0, r0, r5
 8010b20:	2802      	cmp	r0, #2
 8010b22:	d80f      	bhi.n	8010b44 <HAL_RNG_Init+0x68>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8010b24:	6823      	ldr	r3, [r4, #0]
 8010b26:	685b      	ldr	r3, [r3, #4]
 8010b28:	f013 0304 	ands.w	r3, r3, #4
 8010b2c:	d1f5      	bne.n	8010b1a <HAL_RNG_Init+0x3e>
  hrng->State = HAL_RNG_STATE_READY;
 8010b2e:	2201      	movs	r2, #1
  return HAL_OK;
 8010b30:	4618      	mov	r0, r3
  hrng->State = HAL_RNG_STATE_READY;
 8010b32:	7262      	strb	r2, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8010b34:	60e3      	str	r3, [r4, #12]
}
 8010b36:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 8010b38:	7202      	strb	r2, [r0, #8]
    HAL_RNG_MspInit(hrng);
 8010b3a:	f7f4 fbdd 	bl	80052f8 <HAL_RNG_MspInit>
 8010b3e:	e7d4      	b.n	8010aea <HAL_RNG_Init+0xe>
    return HAL_ERROR;
 8010b40:	2001      	movs	r0, #1
}
 8010b42:	4770      	bx	lr
      hrng->State = HAL_RNG_STATE_ERROR;
 8010b44:	2204      	movs	r2, #4
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8010b46:	2302      	movs	r3, #2
      return HAL_ERROR;
 8010b48:	2001      	movs	r0, #1
      hrng->State = HAL_RNG_STATE_ERROR;
 8010b4a:	7262      	strb	r2, [r4, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8010b4c:	60e3      	str	r3, [r4, #12]
}
 8010b4e:	bd38      	pop	{r3, r4, r5, pc}

08010b50 <HAL_RNG_DeInit>:
#if defined(RNG_CR_CONDRST)
  uint32_t tickstart;

#endif /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8010b50:	b1b0      	cbz	r0, 8010b80 <HAL_RNG_DeInit+0x30>
    }
  }

#else
  /* Clear Clock Error Detection bit */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CED);
 8010b52:	6803      	ldr	r3, [r0, #0]
 8010b54:	681a      	ldr	r2, [r3, #0]
 8010b56:	f022 0220 	bic.w	r2, r2, #32
{
 8010b5a:	b510      	push	{r4, lr}
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CED);
 8010b5c:	601a      	str	r2, [r3, #0]
 8010b5e:	4604      	mov	r4, r0
#endif /* RNG_CR_CONDRST */
  /* Disable the RNG Peripheral */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_IE | RNG_CR_RNGEN);
 8010b60:	681a      	ldr	r2, [r3, #0]
 8010b62:	f022 020c 	bic.w	r2, r2, #12
 8010b66:	601a      	str	r2, [r3, #0]

  /* Clear RNG interrupt status flags */
  CLEAR_BIT(hrng->Instance->SR, RNG_SR_CEIS | RNG_SR_SEIS);
 8010b68:	685a      	ldr	r2, [r3, #4]
 8010b6a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8010b6e:	605a      	str	r2, [r3, #4]

  /* DeInit the low level hardware */
  hrng->MspDeInitCallback(hrng);
#else
  /* DeInit the low level hardware */
  HAL_RNG_MspDeInit(hrng);
 8010b70:	f7f4 fbe0 	bl	8005334 <HAL_RNG_MspDeInit>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Update the RNG state */
  hrng->State = HAL_RNG_STATE_RESET;
 8010b74:	2300      	movs	r3, #0
 8010b76:	7263      	strb	r3, [r4, #9]

  /* Release Lock */
  __HAL_UNLOCK(hrng);

  /* Return the function status */
  return HAL_OK;
 8010b78:	4618      	mov	r0, r3
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8010b7a:	60e3      	str	r3, [r4, #12]
  __HAL_UNLOCK(hrng);
 8010b7c:	7223      	strb	r3, [r4, #8]
}
 8010b7e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8010b80:	2001      	movs	r0, #1
}
 8010b82:	4770      	bx	lr

08010b84 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8010b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 8010b86:	7a03      	ldrb	r3, [r0, #8]
 8010b88:	2b01      	cmp	r3, #1
 8010b8a:	d00b      	beq.n	8010ba4 <HAL_RNG_GenerateRandomNumber+0x20>
 8010b8c:	4604      	mov	r4, r0
 8010b8e:	2001      	movs	r0, #1
 8010b90:	460e      	mov	r6, r1

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8010b92:	7a63      	ldrb	r3, [r4, #9]
  __HAL_LOCK(hrng);
 8010b94:	7220      	strb	r0, [r4, #8]
  if (hrng->State == HAL_RNG_STATE_READY)
 8010b96:	4283      	cmp	r3, r0
 8010b98:	d006      	beq.n	8010ba8 <HAL_RNG_GenerateRandomNumber+0x24>

    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8010b9a:	2304      	movs	r3, #4
 8010b9c:	60e3      	str	r3, [r4, #12]
    status = HAL_ERROR;
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8010b9e:	2300      	movs	r3, #0
 8010ba0:	7223      	strb	r3, [r4, #8]

  return status;
}
 8010ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hrng);
 8010ba4:	2002      	movs	r0, #2
}
 8010ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 8010ba8:	2302      	movs	r3, #2
 8010baa:	7263      	strb	r3, [r4, #9]
    tickstart = HAL_GetTick();
 8010bac:	f7f9 fd28 	bl	800a600 <HAL_GetTick>
 8010bb0:	4607      	mov	r7, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8010bb2:	e004      	b.n	8010bbe <HAL_RNG_GenerateRandomNumber+0x3a>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8010bb4:	f7f9 fd24 	bl	800a600 <HAL_GetTick>
 8010bb8:	1bc0      	subs	r0, r0, r7
 8010bba:	2802      	cmp	r0, #2
 8010bbc:	d80b      	bhi.n	8010bd6 <HAL_RNG_GenerateRandomNumber+0x52>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8010bbe:	6822      	ldr	r2, [r4, #0]
 8010bc0:	6855      	ldr	r5, [r2, #4]
 8010bc2:	f015 0501 	ands.w	r5, r5, #1
 8010bc6:	d0f5      	beq.n	8010bb4 <HAL_RNG_GenerateRandomNumber+0x30>
    hrng->RandomNumber = hrng->Instance->DR;
 8010bc8:	6893      	ldr	r3, [r2, #8]
    hrng->State = HAL_RNG_STATE_READY;
 8010bca:	2201      	movs	r2, #1
  HAL_StatusTypeDef status = HAL_OK;
 8010bcc:	2000      	movs	r0, #0
    hrng->RandomNumber = hrng->Instance->DR;
 8010bce:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
 8010bd0:	6033      	str	r3, [r6, #0]
    hrng->State = HAL_RNG_STATE_READY;
 8010bd2:	7262      	strb	r2, [r4, #9]
 8010bd4:	e7e3      	b.n	8010b9e <HAL_RNG_GenerateRandomNumber+0x1a>
        hrng->State = HAL_RNG_STATE_READY;
 8010bd6:	2001      	movs	r0, #1
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8010bd8:	2302      	movs	r3, #2
        __HAL_UNLOCK(hrng);
 8010bda:	7225      	strb	r5, [r4, #8]
        hrng->State = HAL_RNG_STATE_READY;
 8010bdc:	7260      	strb	r0, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8010bde:	60e3      	str	r3, [r4, #12]
}
 8010be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010be2:	bf00      	nop

08010be4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8010be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010be8:	4605      	mov	r5, r0
 8010bea:	b087      	sub	sp, #28
 8010bec:	460f      	mov	r7, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8010bee:	f7f9 fd07 	bl	800a600 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8010bf2:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 8010bf4:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8010bf6:	6828      	ldr	r0, [r5, #0]
 8010bf8:	f002 f826 	bl	8012c48 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8010bfc:	4604      	mov	r4, r0
 8010bfe:	b118      	cbz	r0, 8010c08 <SD_FindSCR+0x24>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 8010c00:	4620      	mov	r0, r4
 8010c02:	b007      	add	sp, #28
 8010c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8010c08:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8010c0a:	6828      	ldr	r0, [r5, #0]
 8010c0c:	0409      	lsls	r1, r1, #16
 8010c0e:	f002 fa87 	bl	8013120 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8010c12:	4604      	mov	r4, r0
 8010c14:	2800      	cmp	r0, #0
 8010c16:	d1f3      	bne.n	8010c00 <SD_FindSCR+0x1c>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8010c18:	f04f 32ff 	mov.w	r2, #4294967295
  config.DataLength    = 8U;
 8010c1c:	2308      	movs	r3, #8
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8010c1e:	2130      	movs	r1, #48	; 0x30
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8010c20:	9004      	str	r0, [sp, #16]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8010c22:	9200      	str	r2, [sp, #0]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8010c24:	2202      	movs	r2, #2
  config.DataLength    = 8U;
 8010c26:	9301      	str	r3, [sp, #4]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8010c28:	2301      	movs	r3, #1
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8010c2a:	9102      	str	r1, [sp, #8]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8010c2c:	4669      	mov	r1, sp
 8010c2e:	6828      	ldr	r0, [r5, #0]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8010c30:	9203      	str	r2, [sp, #12]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8010c32:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8010c34:	f001 fff2 	bl	8012c1c <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8010c38:	6828      	ldr	r0, [r5, #0]
 8010c3a:	f002 fb2d 	bl	8013298 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8010c3e:	4604      	mov	r4, r0
 8010c40:	2800      	cmp	r0, #0
 8010c42:	d1dd      	bne.n	8010c00 <SD_FindSCR+0x1c>
  uint32_t index = 0U;
 8010c44:	4681      	mov	r9, r0
  uint32_t tempscr[2U] = {0UL, 0UL};
 8010c46:	4683      	mov	fp, r0
 8010c48:	4682      	mov	sl, r0
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8010c4a:	f240 582a 	movw	r8, #1322	; 0x52a
 8010c4e:	e004      	b.n	8010c5a <SD_FindSCR+0x76>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8010c50:	f7f9 fcd6 	bl	800a600 <HAL_GetTick>
 8010c54:	1b80      	subs	r0, r0, r6
 8010c56:	3001      	adds	r0, #1
 8010c58:	d025      	beq.n	8010ca6 <SD_FindSCR+0xc2>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8010c5a:	6828      	ldr	r0, [r5, #0]
 8010c5c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010c5e:	ea13 0f08 	tst.w	r3, r8
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8010c62:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8010c64:	d10e      	bne.n	8010c84 <SD_FindSCR+0xa0>
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8010c66:	031b      	lsls	r3, r3, #12
 8010c68:	d4f2      	bmi.n	8010c50 <SD_FindSCR+0x6c>
 8010c6a:	f1b9 0f00 	cmp.w	r9, #0
 8010c6e:	d1ef      	bne.n	8010c50 <SD_FindSCR+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8010c70:	f001 ffb2 	bl	8012bd8 <SDMMC_ReadFIFO>
 8010c74:	4682      	mov	sl, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8010c76:	6828      	ldr	r0, [r5, #0]
      index++;
 8010c78:	f04f 0901 	mov.w	r9, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8010c7c:	f001 ffac 	bl	8012bd8 <SDMMC_ReadFIFO>
 8010c80:	4683      	mov	fp, r0
 8010c82:	e7e5      	b.n	8010c50 <SD_FindSCR+0x6c>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8010c84:	0719      	lsls	r1, r3, #28
 8010c86:	d411      	bmi.n	8010cac <SD_FindSCR+0xc8>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8010c88:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010c8a:	079a      	lsls	r2, r3, #30
 8010c8c:	d411      	bmi.n	8010cb2 <SD_FindSCR+0xce>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8010c8e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010c90:	069b      	lsls	r3, r3, #26
 8010c92:	d411      	bmi.n	8010cb8 <SD_FindSCR+0xd4>
 8010c94:	fa9b f28b 	rev.w	r2, fp
 8010c98:	fa9a f38a 	rev.w	r3, sl
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8010c9c:	4908      	ldr	r1, [pc, #32]	; (8010cc0 <SD_FindSCR+0xdc>)
 8010c9e:	6381      	str	r1, [r0, #56]	; 0x38
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8010ca0:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_SD_ERROR_NONE;
 8010ca4:	e7ac      	b.n	8010c00 <SD_FindSCR+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
 8010ca6:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8010caa:	e7a9      	b.n	8010c00 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8010cac:	2408      	movs	r4, #8
 8010cae:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8010cb0:	e7a6      	b.n	8010c00 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8010cb2:	2402      	movs	r4, #2
 8010cb4:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8010cb6:	e7a3      	b.n	8010c00 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8010cb8:	2420      	movs	r4, #32
 8010cba:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8010cbc:	e7a0      	b.n	8010c00 <SD_FindSCR+0x1c>
 8010cbe:	bf00      	nop
 8010cc0:	18000f3a 	.word	0x18000f3a

08010cc4 <SD_HighSpeed>:
  *         of PLL to have SDMMCCK clock between 50 and 120 MHz
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SD_HighSpeed(SD_HandleTypeDef *hsd)
{
 8010cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  SDMMC_DataInitTypeDef sdmmc_datainitstructure;
  uint32_t SD_hs[16]  = {0};
 8010cc8:	2640      	movs	r6, #64	; 0x40
{
 8010cca:	b096      	sub	sp, #88	; 0x58
 8010ccc:	4604      	mov	r4, r0
  uint32_t SD_hs[16]  = {0};
 8010cce:	2100      	movs	r1, #0
 8010cd0:	4632      	mov	r2, r6
 8010cd2:	a806      	add	r0, sp, #24
 8010cd4:	f00c ff0b 	bl	801daee <memset>
  uint32_t count, loop = 0 ;
  uint32_t Timeout = HAL_GetTick();
 8010cd8:	f7f9 fc92 	bl	800a600 <HAL_GetTick>

  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 8010cdc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8010cde:	b13b      	cbz	r3, 8010cf0 <SD_HighSpeed+0x2c>
  {
     /* Standard Speed Card <= 12.5Mhz  */
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
  }

  if(hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8010ce0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010ce4:	d00a      	beq.n	8010cfc <SD_HighSpeed+0x38>
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8010ce6:	2500      	movs	r5, #0
    }

  }

  return errorstate;
}
 8010ce8:	4628      	mov	r0, r5
 8010cea:	b016      	add	sp, #88	; 0x58
 8010cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8010cf0:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
}
 8010cf4:	4628      	mov	r0, r5
 8010cf6:	b016      	add	sp, #88	; 0x58
 8010cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hsd->Instance->DCTRL = 0;
 8010cfc:	2300      	movs	r3, #0
 8010cfe:	4607      	mov	r7, r0
 8010d00:	6820      	ldr	r0, [r4, #0]
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8010d02:	4631      	mov	r1, r6
    hsd->Instance->DCTRL = 0;
 8010d04:	62c3      	str	r3, [r0, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8010d06:	f001 ff9f 	bl	8012c48 <SDMMC_CmdBlockLength>
    if (errorstate != HAL_SD_ERROR_NONE)
 8010d0a:	4605      	mov	r5, r0
 8010d0c:	2800      	cmp	r0, #0
 8010d0e:	d1eb      	bne.n	8010ce8 <SD_HighSpeed+0x24>
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 8010d10:	f04f 33ff 	mov.w	r3, #4294967295
    sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B ;
 8010d14:	2160      	movs	r1, #96	; 0x60
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8010d16:	2202      	movs	r2, #2
    sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8010d18:	9004      	str	r0, [sp, #16]
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 8010d1a:	9300      	str	r3, [sp, #0]
    sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8010d1c:	2301      	movs	r3, #1
    sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B ;
 8010d1e:	9102      	str	r1, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure);
 8010d20:	4669      	mov	r1, sp
 8010d22:	6820      	ldr	r0, [r4, #0]
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8010d24:	9203      	str	r2, [sp, #12]
    sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8010d26:	9305      	str	r3, [sp, #20]
    sdmmc_datainitstructure.DataLength    = 64U;
 8010d28:	9601      	str	r6, [sp, #4]
    (void)SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure);
 8010d2a:	f001 ff77 	bl	8012c1c <SDMMC_ConfigData>
    errorstate = SDMMC_CmdSwitch(hsd->Instance,SDMMC_SDR25_SWITCH_PATTERN);
 8010d2e:	4925      	ldr	r1, [pc, #148]	; (8010dc4 <SD_HighSpeed+0x100>)
 8010d30:	6820      	ldr	r0, [r4, #0]
 8010d32:	f002 fc4d 	bl	80135d0 <SDMMC_CmdSwitch>
    if(errorstate != HAL_SD_ERROR_NONE)
 8010d36:	4605      	mov	r5, r0
 8010d38:	2800      	cmp	r0, #0
 8010d3a:	d1d5      	bne.n	8010ce8 <SD_HighSpeed+0x24>
  uint32_t count, loop = 0 ;
 8010d3c:	4682      	mov	sl, r0
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 8010d3e:	f240 592a 	movw	r9, #1322	; 0x52a
 8010d42:	e004      	b.n	8010d4e <SD_HighSpeed+0x8a>
      if((HAL_GetTick()-Timeout) >=  SDMMC_DATATIMEOUT)
 8010d44:	f7f9 fc5c 	bl	800a600 <HAL_GetTick>
 8010d48:	1bc0      	subs	r0, r0, r7
 8010d4a:	3001      	adds	r0, #1
 8010d4c:	d02a      	beq.n	8010da4 <SD_HighSpeed+0xe0>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 8010d4e:	6820      	ldr	r0, [r4, #0]
 8010d50:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010d52:	ea13 0f09 	tst.w	r3, r9
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8010d56:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 8010d58:	d113      	bne.n	8010d82 <SD_HighSpeed+0xbe>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8010d5a:	041e      	lsls	r6, r3, #16
 8010d5c:	d5f2      	bpl.n	8010d44 <SD_HighSpeed+0x80>
 8010d5e:	ea4f 184a 	mov.w	r8, sl, lsl #5
 8010d62:	ab06      	add	r3, sp, #24
 8010d64:	eb03 0608 	add.w	r6, r3, r8
 8010d68:	ab0e      	add	r3, sp, #56	; 0x38
 8010d6a:	4498      	add	r8, r3
 8010d6c:	e000      	b.n	8010d70 <SD_HighSpeed+0xac>
 8010d6e:	6820      	ldr	r0, [r4, #0]
          SD_hs[(8U*loop)+count]  = SDMMC_ReadFIFO(hsd->Instance);
 8010d70:	f001 ff32 	bl	8012bd8 <SDMMC_ReadFIFO>
 8010d74:	f846 0b04 	str.w	r0, [r6], #4
        for (count = 0U; count < 8U; count++)
 8010d78:	4546      	cmp	r6, r8
 8010d7a:	d1f8      	bne.n	8010d6e <SD_HighSpeed+0xaa>
        loop ++;
 8010d7c:	f10a 0a01 	add.w	sl, sl, #1
 8010d80:	e7e0      	b.n	8010d44 <SD_HighSpeed+0x80>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8010d82:	071c      	lsls	r4, r3, #28
 8010d84:	d415      	bmi.n	8010db2 <SD_HighSpeed+0xee>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8010d86:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010d88:	0799      	lsls	r1, r3, #30
 8010d8a:	d415      	bmi.n	8010db8 <SD_HighSpeed+0xf4>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8010d8c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010d8e:	069a      	lsls	r2, r3, #26
 8010d90:	d415      	bmi.n	8010dbe <SD_HighSpeed+0xfa>
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 8010d92:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8010d96:	4a0c      	ldr	r2, [pc, #48]	; (8010dc8 <SD_HighSpeed+0x104>)
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 8010d98:	079b      	lsls	r3, r3, #30
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8010d9a:	6382      	str	r2, [r0, #56]	; 0x38
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 8010d9c:	d4a3      	bmi.n	8010ce6 <SD_HighSpeed+0x22>
      errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8010d9e:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8010da2:	e7a1      	b.n	8010ce8 <SD_HighSpeed+0x24>
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8010da4:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
        hsd->State= HAL_SD_STATE_READY;
 8010da8:	2301      	movs	r3, #1
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8010daa:	63a5      	str	r5, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8010dac:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_SD_ERROR_TIMEOUT;
 8010db0:	e79a      	b.n	8010ce8 <SD_HighSpeed+0x24>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8010db2:	2308      	movs	r3, #8
 8010db4:	6383      	str	r3, [r0, #56]	; 0x38
      return errorstate;
 8010db6:	e797      	b.n	8010ce8 <SD_HighSpeed+0x24>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8010db8:	2502      	movs	r5, #2
 8010dba:	6385      	str	r5, [r0, #56]	; 0x38
      return errorstate;
 8010dbc:	e794      	b.n	8010ce8 <SD_HighSpeed+0x24>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8010dbe:	2520      	movs	r5, #32
 8010dc0:	6385      	str	r5, [r0, #56]	; 0x38
      return errorstate;
 8010dc2:	e791      	b.n	8010ce8 <SD_HighSpeed+0x24>
 8010dc4:	80ffff01 	.word	0x80ffff01
 8010dc8:	18000f3a 	.word	0x18000f3a

08010dcc <HAL_SD_MspInit>:
 8010dcc:	4770      	bx	lr
 8010dce:	bf00      	nop

08010dd0 <HAL_SD_MspDeInit>:
 8010dd0:	4770      	bx	lr
 8010dd2:	bf00      	nop

08010dd4 <HAL_SD_ReadBlocks>:
{
 8010dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010dd8:	460d      	mov	r5, r1
 8010dda:	b086      	sub	sp, #24
 8010ddc:	4604      	mov	r4, r0
 8010dde:	4690      	mov	r8, r2
 8010de0:	461e      	mov	r6, r3
  uint32_t tickstart = HAL_GetTick();
 8010de2:	f7f9 fc0d 	bl	800a600 <HAL_GetTick>
  if(NULL == pData)
 8010de6:	2d00      	cmp	r5, #0
 8010de8:	d071      	beq.n	8010ece <HAL_SD_ReadBlocks+0xfa>
 8010dea:	4607      	mov	r7, r0
  if(hsd->State == HAL_SD_STATE_READY)
 8010dec:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8010df0:	b2c0      	uxtb	r0, r0
 8010df2:	2801      	cmp	r0, #1
 8010df4:	d007      	beq.n	8010e06 <HAL_SD_ReadBlocks+0x32>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8010df6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8010df8:	2001      	movs	r0, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8010dfa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010dfe:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8010e00:	b006      	add	sp, #24
 8010e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8010e06:	eb08 0306 	add.w	r3, r8, r6
 8010e0a:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8010e0c:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8010e0e:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8010e10:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8010e12:	d864      	bhi.n	8010ede <HAL_SD_ReadBlocks+0x10a>
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8010e14:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    hsd->State = HAL_SD_STATE_BUSY;
 8010e16:	2203      	movs	r2, #3
    hsd->Instance->DCTRL = 0U;
 8010e18:	6820      	ldr	r0, [r4, #0]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8010e1a:	f04f 0902 	mov.w	r9, #2
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8010e1e:	2b01      	cmp	r3, #1
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8010e20:	ea4f 2346 	mov.w	r3, r6, lsl #9
    hsd->State = HAL_SD_STATE_BUSY;
 8010e24:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8010e28:	f04f 0290 	mov.w	r2, #144	; 0x90
    hsd->Instance->DCTRL = 0U;
 8010e2c:	62c1      	str	r1, [r0, #44]	; 0x2c
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8010e2e:	f04f 31ff 	mov.w	r1, #4294967295
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8010e32:	9301      	str	r3, [sp, #4]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8010e34:	f04f 0300 	mov.w	r3, #0
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8010e38:	9100      	str	r1, [sp, #0]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8010e3a:	4669      	mov	r1, sp
      add *= 512U;
 8010e3c:	bf18      	it	ne
 8010e3e:	ea4f 2848 	movne.w	r8, r8, lsl #9
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8010e42:	9305      	str	r3, [sp, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8010e44:	9202      	str	r2, [sp, #8]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8010e46:	e9cd 9303 	strd	r9, r3, [sp, #12]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8010e4a:	f001 fee7 	bl	8012c1c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8010e4e:	6820      	ldr	r0, [r4, #0]
    if(NumberOfBlocks > 1U)
 8010e50:	2e01      	cmp	r6, #1
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8010e52:	68c3      	ldr	r3, [r0, #12]
 8010e54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e58:	60c3      	str	r3, [r0, #12]
    if(NumberOfBlocks > 1U)
 8010e5a:	d953      	bls.n	8010f04 <HAL_SD_ReadBlocks+0x130>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8010e5c:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8010e60:	4641      	mov	r1, r8
 8010e62:	f001 ff79 	bl	8012d58 <SDMMC_CmdReadMultiBlock>
 8010e66:	4602      	mov	r2, r0
 8010e68:	6823      	ldr	r3, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 8010e6a:	2a00      	cmp	r2, #0
 8010e6c:	d13e      	bne.n	8010eec <HAL_SD_ReadBlocks+0x118>
    dataremaining = config.DataLength;
 8010e6e:	f8dd 9004 	ldr.w	r9, [sp, #4]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8010e72:	e006      	b.n	8010e82 <HAL_SD_ReadBlocks+0xae>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8010e74:	f7f9 fbc4 	bl	800a600 <HAL_GetTick>
 8010e78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010e7a:	1bc0      	subs	r0, r0, r7
 8010e7c:	4298      	cmp	r0, r3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010e7e:	6823      	ldr	r3, [r4, #0]
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8010e80:	d272      	bcs.n	8010f68 <HAL_SD_ReadBlocks+0x194>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8010e82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010e84:	f412 7f95 	tst.w	r2, #298	; 0x12a
 8010e88:	d143      	bne.n	8010f12 <HAL_SD_ReadBlocks+0x13e>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8010e8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010e8c:	0411      	lsls	r1, r2, #16
 8010e8e:	d5f1      	bpl.n	8010e74 <HAL_SD_ReadBlocks+0xa0>
 8010e90:	f1b9 0f1f 	cmp.w	r9, #31
 8010e94:	d9ee      	bls.n	8010e74 <HAL_SD_ReadBlocks+0xa0>
 8010e96:	f105 0a04 	add.w	sl, r5, #4
 8010e9a:	f105 0824 	add.w	r8, r5, #36	; 0x24
 8010e9e:	e000      	b.n	8010ea2 <HAL_SD_ReadBlocks+0xce>
 8010ea0:	6823      	ldr	r3, [r4, #0]
          data = SDMMC_ReadFIFO(hsd->Instance);
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	f10a 0a04 	add.w	sl, sl, #4
 8010ea8:	f001 fe96 	bl	8012bd8 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 8010eac:	f80a 0c08 	strb.w	r0, [sl, #-8]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8010eb0:	0a02      	lsrs	r2, r0, #8
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8010eb2:	0c03      	lsrs	r3, r0, #16
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8010eb4:	0e00      	lsrs	r0, r0, #24
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8010eb6:	f80a 2c07 	strb.w	r2, [sl, #-7]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8010eba:	f80a 3c06 	strb.w	r3, [sl, #-6]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8010ebe:	f80a 0c05 	strb.w	r0, [sl, #-5]
        for(count = 0U; count < 8U; count++)
 8010ec2:	45c2      	cmp	sl, r8
 8010ec4:	d1ec      	bne.n	8010ea0 <HAL_SD_ReadBlocks+0xcc>
 8010ec6:	3520      	adds	r5, #32
        dataremaining -= 32U;
 8010ec8:	f1a9 0920 	sub.w	r9, r9, #32
 8010ecc:	e7d2      	b.n	8010e74 <HAL_SD_ReadBlocks+0xa0>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8010ece:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8010ed0:	2001      	movs	r0, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8010ed2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010ed6:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8010ed8:	b006      	add	sp, #24
 8010eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8010ede:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010ee0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8010ee4:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8010ee6:	b006      	add	sp, #24
 8010ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010eec:	483b      	ldr	r0, [pc, #236]	; (8010fdc <HAL_SD_ReadBlocks+0x208>)
      hsd->State = HAL_SD_STATE_READY;
 8010eee:	2101      	movs	r1, #1
      hsd->Context = SD_CONTEXT_NONE;
 8010ef0:	2500      	movs	r5, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010ef2:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 8010ef4:	4608      	mov	r0, r1
      hsd->ErrorCode |= errorstate;
 8010ef6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010ef8:	431a      	orrs	r2, r3
 8010efa:	63a2      	str	r2, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8010efc:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8010f00:	6325      	str	r5, [r4, #48]	; 0x30
      return HAL_ERROR;
 8010f02:	e77d      	b.n	8010e00 <HAL_SD_ReadBlocks+0x2c>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8010f04:	2301      	movs	r3, #1
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8010f06:	4641      	mov	r1, r8
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8010f08:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8010f0a:	f001 fee1 	bl	8012cd0 <SDMMC_CmdReadSingleBlock>
 8010f0e:	4602      	mov	r2, r0
 8010f10:	e7aa      	b.n	8010e68 <HAL_SD_ReadBlocks+0x94>
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8010f12:	68da      	ldr	r2, [r3, #12]
 8010f14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010f18:	60da      	str	r2, [r3, #12]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8010f1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010f1c:	05d2      	lsls	r2, r2, #23
 8010f1e:	d50b      	bpl.n	8010f38 <HAL_SD_ReadBlocks+0x164>
 8010f20:	2e01      	cmp	r6, #1
 8010f22:	d909      	bls.n	8010f38 <HAL_SD_ReadBlocks+0x164>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8010f24:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8010f26:	2a03      	cmp	r2, #3
 8010f28:	d006      	beq.n	8010f38 <HAL_SD_ReadBlocks+0x164>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	f001 ffe0 	bl	8012ef0 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8010f30:	4603      	mov	r3, r0
 8010f32:	2800      	cmp	r0, #0
 8010f34:	d144      	bne.n	8010fc0 <HAL_SD_ReadBlocks+0x1ec>
 8010f36:	6823      	ldr	r3, [r4, #0]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8010f38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010f3a:	f012 0208 	ands.w	r2, r2, #8
 8010f3e:	d120      	bne.n	8010f82 <HAL_SD_ReadBlocks+0x1ae>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8010f40:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8010f42:	f011 0102 	ands.w	r1, r1, #2
 8010f46:	d129      	bne.n	8010f9c <HAL_SD_ReadBlocks+0x1c8>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8010f48:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8010f4a:	f010 0020 	ands.w	r0, r0, #32
 8010f4e:	d031      	beq.n	8010fb4 <HAL_SD_ReadBlocks+0x1e0>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010f50:	4822      	ldr	r0, [pc, #136]	; (8010fdc <HAL_SD_ReadBlocks+0x208>)
      hsd->State = HAL_SD_STATE_READY;
 8010f52:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010f54:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 8010f56:	4610      	mov	r0, r2
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8010f58:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010f5a:	f043 0320 	orr.w	r3, r3, #32
 8010f5e:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8010f60:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8010f64:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 8010f66:	e74b      	b.n	8010e00 <HAL_SD_ReadBlocks+0x2c>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010f68:	4d1c      	ldr	r5, [pc, #112]	; (8010fdc <HAL_SD_ReadBlocks+0x208>)
        hsd->State= HAL_SD_STATE_READY;
 8010f6a:	2101      	movs	r1, #1
        hsd->Context = SD_CONTEXT_NONE;
 8010f6c:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
 8010f6e:	2003      	movs	r0, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010f70:	639d      	str	r5, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8010f72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010f74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010f78:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8010f7a:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8010f7e:	6322      	str	r2, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 8010f80:	e73e      	b.n	8010e00 <HAL_SD_ReadBlocks+0x2c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010f82:	4816      	ldr	r0, [pc, #88]	; (8010fdc <HAL_SD_ReadBlocks+0x208>)
      hsd->State = HAL_SD_STATE_READY;
 8010f84:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 8010f86:	2100      	movs	r1, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010f88:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 8010f8a:	4610      	mov	r0, r2
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8010f8c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010f8e:	f043 0308 	orr.w	r3, r3, #8
 8010f92:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8010f94:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8010f98:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 8010f9a:	e731      	b.n	8010e00 <HAL_SD_ReadBlocks+0x2c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010f9c:	480f      	ldr	r0, [pc, #60]	; (8010fdc <HAL_SD_ReadBlocks+0x208>)
      hsd->State = HAL_SD_STATE_READY;
 8010f9e:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010fa0:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 8010fa2:	4608      	mov	r0, r1
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8010fa4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010fa6:	f043 0302 	orr.w	r3, r3, #2
 8010faa:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8010fac:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8010fb0:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 8010fb2:	e725      	b.n	8010e00 <HAL_SD_ReadBlocks+0x2c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8010fb4:	490a      	ldr	r1, [pc, #40]	; (8010fe0 <HAL_SD_ReadBlocks+0x20c>)
    hsd->State = HAL_SD_STATE_READY;
 8010fb6:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8010fb8:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8010fba:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_OK;
 8010fbe:	e71f      	b.n	8010e00 <HAL_SD_ReadBlocks+0x2c>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010fc0:	6822      	ldr	r2, [r4, #0]
          hsd->State = HAL_SD_STATE_READY;
 8010fc2:	2101      	movs	r1, #1
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010fc4:	4805      	ldr	r0, [pc, #20]	; (8010fdc <HAL_SD_ReadBlocks+0x208>)
          hsd->Context = SD_CONTEXT_NONE;
 8010fc6:	2500      	movs	r5, #0
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8010fc8:	6390      	str	r0, [r2, #56]	; 0x38
          return HAL_ERROR;
 8010fca:	4608      	mov	r0, r1
          hsd->ErrorCode |= errorstate;
 8010fcc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010fce:	4313      	orrs	r3, r2
 8010fd0:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8010fd2:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8010fd6:	6325      	str	r5, [r4, #48]	; 0x30
          return HAL_ERROR;
 8010fd8:	e712      	b.n	8010e00 <HAL_SD_ReadBlocks+0x2c>
 8010fda:	bf00      	nop
 8010fdc:	1fe00fff 	.word	0x1fe00fff
 8010fe0:	18000f3a 	.word	0x18000f3a

08010fe4 <HAL_SD_WriteBlocks>:
{
 8010fe4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010fe8:	460d      	mov	r5, r1
 8010fea:	b089      	sub	sp, #36	; 0x24
 8010fec:	4604      	mov	r4, r0
 8010fee:	4616      	mov	r6, r2
 8010ff0:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8010ff2:	f7f9 fb05 	bl	800a600 <HAL_GetTick>
  if(NULL == pData)
 8010ff6:	2d00      	cmp	r5, #0
 8010ff8:	d05f      	beq.n	80110ba <HAL_SD_WriteBlocks+0xd6>
 8010ffa:	4680      	mov	r8, r0
  if(hsd->State == HAL_SD_STATE_READY)
 8010ffc:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8011000:	b2c0      	uxtb	r0, r0
 8011002:	2801      	cmp	r0, #1
 8011004:	d007      	beq.n	8011016 <HAL_SD_WriteBlocks+0x32>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8011006:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8011008:	2001      	movs	r0, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 801100a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801100e:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8011010:	b009      	add	sp, #36	; 0x24
 8011012:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8011016:	19f3      	adds	r3, r6, r7
 8011018:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 801101a:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 801101c:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 801101e:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8011020:	d853      	bhi.n	80110ca <HAL_SD_WriteBlocks+0xe6>
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8011022:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    hsd->State = HAL_SD_STATE_BUSY;
 8011024:	2203      	movs	r2, #3
    hsd->Instance->DCTRL = 0U;
 8011026:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8011028:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801102a:	f04f 33ff 	mov.w	r3, #4294967295
    hsd->State = HAL_SD_STATE_BUSY;
 801102e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8011032:	f04f 0290 	mov.w	r2, #144	; 0x90
    hsd->Instance->DCTRL = 0U;
 8011036:	62c1      	str	r1, [r0, #44]	; 0x2c
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8011038:	ea4f 2147 	mov.w	r1, r7, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801103c:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 801103e:	f04f 0300 	mov.w	r3, #0
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8011042:	9103      	str	r1, [sp, #12]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8011044:	a902      	add	r1, sp, #8
      add *= 512U;
 8011046:	bf18      	it	ne
 8011048:	0276      	lslne	r6, r6, #9
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 801104a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 801104e:	e9cd 3306 	strd	r3, r3, [sp, #24]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8011052:	f001 fde3 	bl	8012c1c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8011056:	6820      	ldr	r0, [r4, #0]
    if(NumberOfBlocks > 1U)
 8011058:	2f01      	cmp	r7, #1
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 801105a:	68c3      	ldr	r3, [r0, #12]
 801105c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011060:	60c3      	str	r3, [r0, #12]
    if(NumberOfBlocks > 1U)
 8011062:	d945      	bls.n	80110f0 <HAL_SD_WriteBlocks+0x10c>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8011064:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8011066:	4631      	mov	r1, r6
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8011068:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 801106a:	f001 fefd 	bl	8012e68 <SDMMC_CmdWriteMultiBlock>
 801106e:	4602      	mov	r2, r0
 8011070:	6823      	ldr	r3, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 8011072:	2a00      	cmp	r2, #0
 8011074:	d130      	bne.n	80110d8 <HAL_SD_WriteBlocks+0xf4>
    dataremaining = config.DataLength;
 8011076:	9e03      	ldr	r6, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8011078:	e007      	b.n	801108a <HAL_SD_WriteBlocks+0xa6>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 801107a:	f7f9 fac1 	bl	800a600 <HAL_GetTick>
 801107e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011080:	eba0 0008 	sub.w	r0, r0, r8
 8011084:	4298      	cmp	r0, r3
 8011086:	d265      	bcs.n	8011154 <HAL_SD_WriteBlocks+0x170>
 8011088:	6823      	ldr	r3, [r4, #0]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 801108a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801108c:	f412 7f8d 	tst.w	r2, #282	; 0x11a
 8011090:	d135      	bne.n	80110fe <HAL_SD_WriteBlocks+0x11a>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8011092:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011094:	0451      	lsls	r1, r2, #17
 8011096:	d5f0      	bpl.n	801107a <HAL_SD_WriteBlocks+0x96>
 8011098:	2e1f      	cmp	r6, #31
 801109a:	d9ee      	bls.n	801107a <HAL_SD_WriteBlocks+0x96>
 801109c:	f105 0920 	add.w	r9, r5, #32
 80110a0:	e000      	b.n	80110a4 <HAL_SD_WriteBlocks+0xc0>
 80110a2:	6823      	ldr	r3, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 80110a4:	f855 2b04 	ldr.w	r2, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80110a8:	4618      	mov	r0, r3
 80110aa:	a901      	add	r1, sp, #4
          data |= ((uint32_t)(*tempbuff) << 24U);
 80110ac:	9201      	str	r2, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80110ae:	f001 fd97 	bl	8012be0 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80110b2:	454d      	cmp	r5, r9
 80110b4:	d1f5      	bne.n	80110a2 <HAL_SD_WriteBlocks+0xbe>
        dataremaining -= 32U;
 80110b6:	3e20      	subs	r6, #32
 80110b8:	e7df      	b.n	801107a <HAL_SD_WriteBlocks+0x96>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80110ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 80110bc:	2001      	movs	r0, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80110be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80110c2:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80110c4:	b009      	add	sp, #36	; 0x24
 80110c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80110ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80110cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80110d0:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80110d2:	b009      	add	sp, #36	; 0x24
 80110d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80110d8:	483a      	ldr	r0, [pc, #232]	; (80111c4 <HAL_SD_WriteBlocks+0x1e0>)
      hsd->State = HAL_SD_STATE_READY;
 80110da:	2101      	movs	r1, #1
      hsd->Context = SD_CONTEXT_NONE;
 80110dc:	2500      	movs	r5, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80110de:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 80110e0:	4608      	mov	r0, r1
      hsd->ErrorCode |= errorstate;
 80110e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80110e4:	431a      	orrs	r2, r3
 80110e6:	63a2      	str	r2, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80110e8:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80110ec:	6325      	str	r5, [r4, #48]	; 0x30
      return HAL_ERROR;
 80110ee:	e78f      	b.n	8011010 <HAL_SD_WriteBlocks+0x2c>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80110f0:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80110f2:	4631      	mov	r1, r6
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80110f4:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80110f6:	f001 fe73 	bl	8012de0 <SDMMC_CmdWriteSingleBlock>
 80110fa:	4602      	mov	r2, r0
 80110fc:	e7b8      	b.n	8011070 <HAL_SD_WriteBlocks+0x8c>
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 80110fe:	68da      	ldr	r2, [r3, #12]
 8011100:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011104:	60da      	str	r2, [r3, #12]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8011106:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011108:	05d2      	lsls	r2, r2, #23
 801110a:	d50b      	bpl.n	8011124 <HAL_SD_WriteBlocks+0x140>
 801110c:	2f01      	cmp	r7, #1
 801110e:	d909      	bls.n	8011124 <HAL_SD_WriteBlocks+0x140>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8011110:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8011112:	2a03      	cmp	r2, #3
 8011114:	d006      	beq.n	8011124 <HAL_SD_WriteBlocks+0x140>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8011116:	4618      	mov	r0, r3
 8011118:	f001 feea 	bl	8012ef0 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 801111c:	4603      	mov	r3, r0
 801111e:	2800      	cmp	r0, #0
 8011120:	d143      	bne.n	80111aa <HAL_SD_WriteBlocks+0x1c6>
 8011122:	6823      	ldr	r3, [r4, #0]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8011124:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011126:	f012 0208 	ands.w	r2, r2, #8
 801112a:	d11f      	bne.n	801116c <HAL_SD_WriteBlocks+0x188>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 801112c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801112e:	f011 0102 	ands.w	r1, r1, #2
 8011132:	d128      	bne.n	8011186 <HAL_SD_WriteBlocks+0x1a2>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8011134:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8011136:	f010 0010 	ands.w	r0, r0, #16
 801113a:	d030      	beq.n	801119e <HAL_SD_WriteBlocks+0x1ba>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801113c:	4821      	ldr	r0, [pc, #132]	; (80111c4 <HAL_SD_WriteBlocks+0x1e0>)
      hsd->State = HAL_SD_STATE_READY;
 801113e:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011140:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 8011142:	4610      	mov	r0, r2
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8011144:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011146:	f043 0310 	orr.w	r3, r3, #16
 801114a:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 801114c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8011150:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 8011152:	e75d      	b.n	8011010 <HAL_SD_WriteBlocks+0x2c>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011154:	6821      	ldr	r1, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 8011156:	2201      	movs	r2, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011158:	4d1a      	ldr	r5, [pc, #104]	; (80111c4 <HAL_SD_WriteBlocks+0x1e0>)
        hsd->Context = SD_CONTEXT_NONE;
 801115a:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 801115c:	2003      	movs	r0, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801115e:	638d      	str	r5, [r1, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8011160:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011162:	63a1      	str	r1, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8011164:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8011168:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 801116a:	e751      	b.n	8011010 <HAL_SD_WriteBlocks+0x2c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801116c:	4815      	ldr	r0, [pc, #84]	; (80111c4 <HAL_SD_WriteBlocks+0x1e0>)
      hsd->State = HAL_SD_STATE_READY;
 801116e:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 8011170:	2100      	movs	r1, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011172:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 8011174:	4610      	mov	r0, r2
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8011176:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011178:	f043 0308 	orr.w	r3, r3, #8
 801117c:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 801117e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8011182:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 8011184:	e744      	b.n	8011010 <HAL_SD_WriteBlocks+0x2c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011186:	480f      	ldr	r0, [pc, #60]	; (80111c4 <HAL_SD_WriteBlocks+0x1e0>)
      hsd->State = HAL_SD_STATE_READY;
 8011188:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801118a:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 801118c:	4608      	mov	r0, r1
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 801118e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011190:	f043 0302 	orr.w	r3, r3, #2
 8011194:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8011196:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 801119a:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 801119c:	e738      	b.n	8011010 <HAL_SD_WriteBlocks+0x2c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801119e:	490a      	ldr	r1, [pc, #40]	; (80111c8 <HAL_SD_WriteBlocks+0x1e4>)
    hsd->State = HAL_SD_STATE_READY;
 80111a0:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80111a2:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80111a4:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_OK;
 80111a8:	e732      	b.n	8011010 <HAL_SD_WriteBlocks+0x2c>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80111aa:	6822      	ldr	r2, [r4, #0]
          hsd->State = HAL_SD_STATE_READY;
 80111ac:	2101      	movs	r1, #1
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80111ae:	4805      	ldr	r0, [pc, #20]	; (80111c4 <HAL_SD_WriteBlocks+0x1e0>)
          hsd->Context = SD_CONTEXT_NONE;
 80111b0:	2500      	movs	r5, #0
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80111b2:	6390      	str	r0, [r2, #56]	; 0x38
          return HAL_ERROR;
 80111b4:	4608      	mov	r0, r1
          hsd->ErrorCode |= errorstate;
 80111b6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80111b8:	4313      	orrs	r3, r2
 80111ba:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80111bc:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80111c0:	6325      	str	r5, [r4, #48]	; 0x30
          return HAL_ERROR;
 80111c2:	e725      	b.n	8011010 <HAL_SD_WriteBlocks+0x2c>
 80111c4:	1fe00fff 	.word	0x1fe00fff
 80111c8:	18000f3a 	.word	0x18000f3a

080111cc <HAL_SD_DeInit>:
  if(hsd == NULL)
 80111cc:	b198      	cbz	r0, 80111f6 <HAL_SD_DeInit+0x2a>
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80111ce:	6983      	ldr	r3, [r0, #24]
  hsd->State = HAL_SD_STATE_BUSY;
 80111d0:	2203      	movs	r2, #3
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80111d2:	2b02      	cmp	r3, #2
{
 80111d4:	b510      	push	{r4, lr}
 80111d6:	4604      	mov	r4, r0
  hsd->State = HAL_SD_STATE_BUSY;
 80111d8:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80111dc:	d00d      	beq.n	80111fa <HAL_SD_DeInit+0x2e>
  (void)SDMMC_PowerState_OFF(hsd->Instance);
 80111de:	6820      	ldr	r0, [r4, #0]
 80111e0:	f001 fd0c 	bl	8012bfc <SDMMC_PowerState_OFF>
  HAL_SD_MspDeInit(hsd);
 80111e4:	4620      	mov	r0, r4
 80111e6:	f7ff fdf3 	bl	8010dd0 <HAL_SD_MspDeInit>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80111ea:	2300      	movs	r3, #0
 80111ec:	63a3      	str	r3, [r4, #56]	; 0x38
  return HAL_OK;
 80111ee:	4618      	mov	r0, r3
  hsd->State = HAL_SD_STATE_RESET;
 80111f0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80111f4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80111f6:	2001      	movs	r0, #1
}
 80111f8:	4770      	bx	lr
    HAL_SD_DriveTransceiver_1_8V_Callback(RESET);
 80111fa:	2000      	movs	r0, #0
 80111fc:	f7f9 f99a 	bl	800a534 <HAL_SD_DriveTransceiver_1_8V_Callback>
 8011200:	e7ed      	b.n	80111de <HAL_SD_DeInit+0x12>
 8011202:	bf00      	nop

08011204 <SD_UltraHighSpeed>:
  *         of PLL to have SDMMCCK clock between 50 and 120 MHz
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SD_UltraHighSpeed(SD_HandleTypeDef *hsd)
{
 8011204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  SDMMC_DataInitTypeDef sdmmc_datainitstructure;
  uint32_t SD_hs[16]  = {0};
 8011208:	2640      	movs	r6, #64	; 0x40
{
 801120a:	b096      	sub	sp, #88	; 0x58
 801120c:	4604      	mov	r4, r0
  uint32_t SD_hs[16]  = {0};
 801120e:	2100      	movs	r1, #0
 8011210:	4632      	mov	r2, r6
 8011212:	a806      	add	r0, sp, #24
 8011214:	f00c fc6b 	bl	801daee <memset>
  uint32_t count, loop = 0 ;
  uint32_t Timeout = HAL_GetTick();
 8011218:	f7f9 f9f2 	bl	800a600 <HAL_GetTick>

  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 801121c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801121e:	b13b      	cbz	r3, 8011230 <SD_UltraHighSpeed+0x2c>
  {
     /* Standard Speed Card <= 12.5Mhz  */
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
  }

  if(hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8011220:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011224:	d00a      	beq.n	801123c <SD_UltraHighSpeed+0x38>
    if ( SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure) != HAL_OK)
    {
      return (HAL_SD_ERROR_GENERAL_UNKNOWN_ERR);
    }

    errorstate = SDMMC_CmdSwitch(hsd->Instance, SDMMC_SDR104_SWITCH_PATTERN);
 8011226:	2500      	movs	r5, #0
#endif /* (DLYB_SDMMC1) || (DLYB_SDMMC2) */
    }
  }

  return errorstate;
}
 8011228:	4628      	mov	r0, r5
 801122a:	b016      	add	sp, #88	; 0x58
 801122c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8011230:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
}
 8011234:	4628      	mov	r0, r5
 8011236:	b016      	add	sp, #88	; 0x58
 8011238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hsd->Instance->DCTRL = 0;
 801123c:	2300      	movs	r3, #0
 801123e:	4607      	mov	r7, r0
 8011240:	6820      	ldr	r0, [r4, #0]
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8011242:	4631      	mov	r1, r6
    hsd->Instance->DCTRL = 0;
 8011244:	62c3      	str	r3, [r0, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8011246:	f001 fcff 	bl	8012c48 <SDMMC_CmdBlockLength>
    if (errorstate != HAL_SD_ERROR_NONE)
 801124a:	4605      	mov	r5, r0
 801124c:	2800      	cmp	r0, #0
 801124e:	d1eb      	bne.n	8011228 <SD_UltraHighSpeed+0x24>
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 8011250:	f04f 33ff 	mov.w	r3, #4294967295
    sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B ;
 8011254:	2160      	movs	r1, #96	; 0x60
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8011256:	2202      	movs	r2, #2
    sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8011258:	9004      	str	r0, [sp, #16]
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 801125a:	9300      	str	r3, [sp, #0]
    sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 801125c:	2301      	movs	r3, #1
    sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B ;
 801125e:	9102      	str	r1, [sp, #8]
    if ( SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure) != HAL_OK)
 8011260:	4669      	mov	r1, sp
 8011262:	6820      	ldr	r0, [r4, #0]
    sdmmc_datainitstructure.DataLength    = 64U;
 8011264:	9601      	str	r6, [sp, #4]
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8011266:	9203      	str	r2, [sp, #12]
    sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8011268:	9305      	str	r3, [sp, #20]
    if ( SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure) != HAL_OK)
 801126a:	f001 fcd7 	bl	8012c1c <SDMMC_ConfigData>
 801126e:	2800      	cmp	r0, #0
 8011270:	d14b      	bne.n	801130a <SD_UltraHighSpeed+0x106>
    errorstate = SDMMC_CmdSwitch(hsd->Instance, SDMMC_SDR104_SWITCH_PATTERN);
 8011272:	4931      	ldr	r1, [pc, #196]	; (8011338 <SD_UltraHighSpeed+0x134>)
 8011274:	6820      	ldr	r0, [r4, #0]
 8011276:	f002 f9ab 	bl	80135d0 <SDMMC_CmdSwitch>
    if(errorstate != HAL_SD_ERROR_NONE)
 801127a:	4605      	mov	r5, r0
 801127c:	2800      	cmp	r0, #0
 801127e:	d1d3      	bne.n	8011228 <SD_UltraHighSpeed+0x24>
  uint32_t count, loop = 0 ;
 8011280:	4682      	mov	sl, r0
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 8011282:	f240 592a 	movw	r9, #1322	; 0x52a
 8011286:	e004      	b.n	8011292 <SD_UltraHighSpeed+0x8e>
      if((HAL_GetTick()-Timeout) >=  SDMMC_DATATIMEOUT)
 8011288:	f7f9 f9ba 	bl	800a600 <HAL_GetTick>
 801128c:	1bc0      	subs	r0, r0, r7
 801128e:	3001      	adds	r0, #1
 8011290:	d03e      	beq.n	8011310 <SD_UltraHighSpeed+0x10c>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 8011292:	6820      	ldr	r0, [r4, #0]
 8011294:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011296:	ea13 0f09 	tst.w	r3, r9
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 801129a:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 801129c:	d113      	bne.n	80112c6 <SD_UltraHighSpeed+0xc2>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 801129e:	041b      	lsls	r3, r3, #16
 80112a0:	d5f2      	bpl.n	8011288 <SD_UltraHighSpeed+0x84>
 80112a2:	ea4f 184a 	mov.w	r8, sl, lsl #5
 80112a6:	ab06      	add	r3, sp, #24
 80112a8:	eb03 0608 	add.w	r6, r3, r8
 80112ac:	ab0e      	add	r3, sp, #56	; 0x38
 80112ae:	4498      	add	r8, r3
 80112b0:	e000      	b.n	80112b4 <SD_UltraHighSpeed+0xb0>
 80112b2:	6820      	ldr	r0, [r4, #0]
          SD_hs[(8U*loop)+count]  = SDMMC_ReadFIFO(hsd->Instance);
 80112b4:	f001 fc90 	bl	8012bd8 <SDMMC_ReadFIFO>
 80112b8:	f846 0b04 	str.w	r0, [r6], #4
        for (count = 0U; count < 8U; count++)
 80112bc:	4546      	cmp	r6, r8
 80112be:	d1f8      	bne.n	80112b2 <SD_UltraHighSpeed+0xae>
        loop ++;
 80112c0:	f10a 0a01 	add.w	sl, sl, #1
 80112c4:	e7e0      	b.n	8011288 <SD_UltraHighSpeed+0x84>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80112c6:	071e      	lsls	r6, r3, #28
 80112c8:	d429      	bmi.n	801131e <SD_UltraHighSpeed+0x11a>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80112ca:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80112cc:	0799      	lsls	r1, r3, #30
 80112ce:	d429      	bmi.n	8011324 <SD_UltraHighSpeed+0x120>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80112d0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80112d2:	069a      	lsls	r2, r3, #26
 80112d4:	d42c      	bmi.n	8011330 <SD_UltraHighSpeed+0x12c>
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 80112d6:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80112da:	4a18      	ldr	r2, [pc, #96]	; (801133c <SD_UltraHighSpeed+0x138>)
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 80112dc:	079b      	lsls	r3, r3, #30
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80112de:	6382      	str	r2, [r0, #56]	; 0x38
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 80112e0:	d523      	bpl.n	801132a <SD_UltraHighSpeed+0x126>
      HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 80112e2:	2001      	movs	r0, #1
 80112e4:	f7f9 f926 	bl	800a534 <HAL_SD_DriveTransceiver_1_8V_Callback>
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_1);
 80112e8:	6822      	ldr	r2, [r4, #0]
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 80112ea:	4815      	ldr	r0, [pc, #84]	; (8011340 <SD_UltraHighSpeed+0x13c>)
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_1);
 80112ec:	6853      	ldr	r3, [r2, #4]
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 80112ee:	4c15      	ldr	r4, [pc, #84]	; (8011344 <SD_UltraHighSpeed+0x140>)
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_1);
 80112f0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 80112f4:	4914      	ldr	r1, [pc, #80]	; (8011348 <SD_UltraHighSpeed+0x144>)
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_1);
 80112f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 80112fa:	42a2      	cmp	r2, r4
 80112fc:	bf08      	it	eq
 80112fe:	4608      	moveq	r0, r1
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_1);
 8011300:	6053      	str	r3, [r2, #4]
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 8011302:	f001 fb9f 	bl	8012a44 <DelayBlock_Enable>
 8011306:	2800      	cmp	r0, #0
 8011308:	d08d      	beq.n	8011226 <SD_UltraHighSpeed+0x22>
      return (HAL_SD_ERROR_GENERAL_UNKNOWN_ERR);
 801130a:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 801130e:	e78b      	b.n	8011228 <SD_UltraHighSpeed+0x24>
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8011310:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
        hsd->State= HAL_SD_STATE_READY;
 8011314:	2301      	movs	r3, #1
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8011316:	63a5      	str	r5, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8011318:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_SD_ERROR_TIMEOUT;
 801131c:	e784      	b.n	8011228 <SD_UltraHighSpeed+0x24>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 801131e:	2308      	movs	r3, #8
 8011320:	6383      	str	r3, [r0, #56]	; 0x38
      return errorstate;
 8011322:	e781      	b.n	8011228 <SD_UltraHighSpeed+0x24>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8011324:	2502      	movs	r5, #2
 8011326:	6385      	str	r5, [r0, #56]	; 0x38
      return errorstate;
 8011328:	e77e      	b.n	8011228 <SD_UltraHighSpeed+0x24>
      errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 801132a:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 801132e:	e77b      	b.n	8011228 <SD_UltraHighSpeed+0x24>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8011330:	2520      	movs	r5, #32
 8011332:	6385      	str	r5, [r0, #56]	; 0x38
      return errorstate;
 8011334:	e778      	b.n	8011228 <SD_UltraHighSpeed+0x24>
 8011336:	bf00      	nop
 8011338:	80ff1f03 	.word	0x80ff1f03
 801133c:	18000f3a 	.word	0x18000f3a
 8011340:	48022800 	.word	0x48022800
 8011344:	52007000 	.word	0x52007000
 8011348:	52008000 	.word	0x52008000

0801134c <HAL_SD_GetCardCSD>:
{
 801134c:	4603      	mov	r3, r0
  pCSD->Reserved2 = 0U; /*!< Reserved */
 801134e:	2000      	movs	r0, #0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8011350:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8011352:	b5f0      	push	{r4, r5, r6, r7, lr}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8011354:	0f94      	lsrs	r4, r2, #30
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8011356:	f3c2 6783 	ubfx	r7, r2, #26, #4
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 801135a:	f3c2 6601 	ubfx	r6, r2, #24, #2
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 801135e:	f3c2 4507 	ubfx	r5, r2, #16, #8
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8011362:	700c      	strb	r4, [r1, #0]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8011364:	f3c2 2407 	ubfx	r4, r2, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8011368:	b2d2      	uxtb	r2, r2
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 801136a:	704f      	strb	r7, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 801136c:	708e      	strb	r6, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 801136e:	70cd      	strb	r5, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8011370:	710c      	strb	r4, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8011372:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8011374:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011376:	0d15      	lsrs	r5, r2, #20
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8011378:	f3c2 4403 	ubfx	r4, r2, #16, #4
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 801137c:	f3c2 37c0 	ubfx	r7, r2, #15, #1
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8011380:	f3c2 3680 	ubfx	r6, r2, #14, #1
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8011384:	80cd      	strh	r5, [r1, #6]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8011386:	f3c2 3540 	ubfx	r5, r2, #13, #1
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 801138a:	720c      	strb	r4, [r1, #8]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 801138c:	f3c2 3400 	ubfx	r4, r2, #12, #1
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8011390:	724f      	strb	r7, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8011392:	728e      	strb	r6, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8011394:	72cd      	strb	r5, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8011396:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8011398:	7348      	strb	r0, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 801139a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801139c:	2800      	cmp	r0, #0
 801139e:	d16e      	bne.n	801147e <HAL_SD_GetCardCSD+0x132>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80113a0:	f640 74fc 	movw	r4, #4092	; 0xffc
 80113a4:	6e98      	ldr	r0, [r3, #104]	; 0x68
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80113a6:	2501      	movs	r5, #1
    hsd->SdCard.LogBlockSize = 512U;
 80113a8:	f44f 7600 	mov.w	r6, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80113ac:	ea04 0282 	and.w	r2, r4, r2, lsl #2
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80113b0:	f3c0 6ec2 	ubfx	lr, r0, #27, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80113b4:	f3c0 4482 	ubfx	r4, r0, #18, #3
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80113b8:	f3c0 6c02 	ubfx	ip, r0, #24, #3
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80113bc:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80113c0:	f3c0 5742 	ubfx	r7, r0, #21, #3
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80113c4:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80113c6:	f3c0 32c2 	ubfx	r2, r0, #15, #3
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80113ca:	f881 e014 	strb.w	lr, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80113ce:	f881 c015 	strb.w	ip, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80113d2:	758f      	strb	r7, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80113d4:	75cc      	strb	r4, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80113d6:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80113d8:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80113da:	7e0c      	ldrb	r4, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80113dc:	442a      	add	r2, r5
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80113de:	f004 0407 	and.w	r4, r4, #7
 80113e2:	3402      	adds	r4, #2
 80113e4:	40a2      	lsls	r2, r4
 80113e6:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80113e8:	7a0c      	ldrb	r4, [r1, #8]
    hsd->SdCard.LogBlockSize = 512U;
 80113ea:	659e      	str	r6, [r3, #88]	; 0x58
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80113ec:	f004 040f 	and.w	r4, r4, #15
 80113f0:	40a5      	lsls	r5, r4
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80113f2:	0a6c      	lsrs	r4, r5, #9
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80113f4:	651d      	str	r5, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80113f6:	fb02 f204 	mul.w	r2, r2, r4
 80113fa:	655a      	str	r2, [r3, #84]	; 0x54
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80113fc:	f3c0 3580 	ubfx	r5, r0, #14, #1
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8011400:	f3c0 16c6 	ubfx	r6, r0, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8011404:	f000 027f 	and.w	r2, r0, #127	; 0x7f
  pCSD->Reserved3 = 0;
 8011408:	2400      	movs	r4, #0
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 801140a:	764d      	strb	r5, [r1, #25]
  pCSD->Reserved4 = 1;
 801140c:	2501      	movs	r5, #1
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 801140e:	768e      	strb	r6, [r1, #26]
  return HAL_OK;
 8011410:	4620      	mov	r0, r4
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8011412:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8011414:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011416:	0fdf      	lsrs	r7, r3, #31
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8011418:	f3c3 7241 	ubfx	r2, r3, #29, #2
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 801141c:	f3c3 6682 	ubfx	r6, r3, #26, #3
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8011420:	f3c3 3cc0 	ubfx	ip, r3, #15, #1
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8011424:	770f      	strb	r7, [r1, #28]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8011426:	f3c3 5783 	ubfx	r7, r3, #22, #4
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 801142a:	774a      	strb	r2, [r1, #29]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 801142c:	f3c3 5240 	ubfx	r2, r3, #21, #1
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8011430:	778e      	strb	r6, [r1, #30]
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8011432:	f3c3 4600 	ubfx	r6, r3, #16, #1
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8011436:	77cf      	strb	r7, [r1, #31]
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8011438:	f3c3 3740 	ubfx	r7, r3, #13, #1
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 801143c:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8011440:	f3c3 3280 	ubfx	r2, r3, #14, #1
  pCSD->Reserved3 = 0;
 8011444:	f881 4021 	strb.w	r4, [r1, #33]	; 0x21
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8011448:	f3c3 2481 	ubfx	r4, r3, #10, #2
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 801144c:	f881 6022 	strb.w	r6, [r1, #34]	; 0x22
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8011450:	f3c3 3600 	ubfx	r6, r3, #12, #1
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8011454:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8011458:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 801145c:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8011460:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8011464:	f881 7025 	strb.w	r7, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8011468:	f881 6026 	strb.w	r6, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 801146c:	f881 4027 	strb.w	r4, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8011470:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8011474:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8011478:	f881 502a 	strb.w	r5, [r1, #42]	; 0x2a
}
 801147c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 801147e:	2801      	cmp	r0, #1
 8011480:	d00b      	beq.n	801149a <HAL_SD_GetCardCSD+0x14e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011482:	681a      	ldr	r2, [r3, #0]
    hsd->State = HAL_SD_STATE_READY;
 8011484:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011486:	4c0d      	ldr	r4, [pc, #52]	; (80114bc <HAL_SD_GetCardCSD+0x170>)
    return HAL_ERROR;
 8011488:	4608      	mov	r0, r1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801148a:	6394      	str	r4, [r2, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801148c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801148e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8011492:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8011494:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
}
 8011498:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 801149a:	0412      	lsls	r2, r2, #16
 801149c:	6e98      	ldr	r0, [r3, #104]	; 0x68
    hsd->SdCard.BlockSize = 512U;
 801149e:	f44f 7400 	mov.w	r4, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80114a2:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 80114a6:	ea42 4210 	orr.w	r2, r2, r0, lsr #16
 80114aa:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80114ac:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockSize = 512U;
 80114ae:	651c      	str	r4, [r3, #80]	; 0x50
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80114b0:	3201      	adds	r2, #1
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80114b2:	659c      	str	r4, [r3, #88]	; 0x58
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80114b4:	0292      	lsls	r2, r2, #10
 80114b6:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80114b8:	655a      	str	r2, [r3, #84]	; 0x54
 80114ba:	e79f      	b.n	80113fc <HAL_SD_GetCardCSD+0xb0>
 80114bc:	1fe00fff 	.word	0x1fe00fff

080114c0 <HAL_SD_InitCard>:
{
 80114c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80114c4:	2300      	movs	r3, #0
{
 80114c6:	b098      	sub	sp, #96	; 0x60
 80114c8:	4604      	mov	r4, r0
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80114ca:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80114ce:	e9cd 3307 	strd	r3, r3, [sp, #28]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80114d2:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80114d6:	f7ff f9f3 	bl	80108c0 <HAL_RCCEx_GetPeriphCLKFreq>
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 80114da:	4aad      	ldr	r2, [pc, #692]	; (8011790 <HAL_SD_InitCard+0x2d0>)
 80114dc:	0a05      	lsrs	r5, r0, #8
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80114de:	69a3      	ldr	r3, [r4, #24]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80114e0:	4606      	mov	r6, r0
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 80114e2:	6827      	ldr	r7, [r4, #0]
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 80114e4:	fba2 2505 	umull	r2, r5, r2, r5
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80114e8:	2b02      	cmp	r3, #2
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 80114ea:	ea4f 1515 	mov.w	r5, r5, lsr #4
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80114ee:	d103      	bne.n	80114f8 <HAL_SD_InitCard+0x38>
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 80114f0:	683b      	ldr	r3, [r7, #0]
 80114f2:	f043 0310 	orr.w	r3, r3, #16
 80114f6:	603b      	str	r3, [r7, #0]
  (void)SDMMC_Init(hsd->Instance, Init);
 80114f8:	aa0a      	add	r2, sp, #40	; 0x28
 80114fa:	950b      	str	r5, [sp, #44]	; 0x2c
 80114fc:	ab07      	add	r3, sp, #28
 80114fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8011500:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8011504:	4638      	mov	r0, r7
 8011506:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011508:	f001 fb4c 	bl	8012ba4 <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 801150c:	6820      	ldr	r0, [r4, #0]
 801150e:	f001 fb6d 	bl	8012bec <SDMMC_PowerState_ON>
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8011512:	0068      	lsls	r0, r5, #1
 8011514:	fbb6 f0f0 	udiv	r0, r6, r0
  if(sdmmc_clk != 0U)
 8011518:	b1c8      	cbz	r0, 801154e <HAL_SD_InitCard+0x8e>
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 801151a:	4d9e      	ldr	r5, [pc, #632]	; (8011794 <HAL_SD_InitCard+0x2d4>)
 801151c:	fbb5 f0f0 	udiv	r0, r5, r0
 8011520:	3001      	adds	r0, #1
 8011522:	f7f9 f873 	bl	800a60c <HAL_Delay>
  __IO uint32_t count = 0U;
 8011526:	2300      	movs	r3, #0
 8011528:	9306      	str	r3, [sp, #24]
  uint32_t tickstart = HAL_GetTick();
 801152a:	f7f9 f869 	bl	800a600 <HAL_GetTick>
 801152e:	4680      	mov	r8, r0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8011530:	6820      	ldr	r0, [r4, #0]
 8011532:	f001 fd87 	bl	8013044 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8011536:	4605      	mov	r5, r0
 8011538:	b168      	cbz	r0, 8011556 <HAL_SD_InitCard+0x96>
    hsd->State = HAL_SD_STATE_READY;
 801153a:	2601      	movs	r6, #1
 801153c:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8011540:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011542:	431d      	orrs	r5, r3
 8011544:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8011546:	4630      	mov	r0, r6
 8011548:	b018      	add	sp, #96	; 0x60
 801154a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    HAL_Delay(2U);
 801154e:	2002      	movs	r0, #2
 8011550:	f7f9 f85c 	bl	800a60c <HAL_Delay>
 8011554:	e7e7      	b.n	8011526 <HAL_SD_InitCard+0x66>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8011556:	6820      	ldr	r0, [r4, #0]
 8011558:	f001 fda2 	bl	80130a0 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 801155c:	2800      	cmp	r0, #0
 801155e:	d17a      	bne.n	8011656 <HAL_SD_InitCard+0x196>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8011560:	2301      	movs	r3, #1
 8011562:	6423      	str	r3, [r4, #64]	; 0x40
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8011564:	2100      	movs	r1, #0
 8011566:	6820      	ldr	r0, [r4, #0]
 8011568:	f001 fdda 	bl	8013120 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 801156c:	bb08      	cbnz	r0, 80115b2 <HAL_SD_InitCard+0xf2>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 801156e:	9b06      	ldr	r3, [sp, #24]
 8011570:	f64f 76fe 	movw	r6, #65534	; 0xfffe
 8011574:	42b3      	cmp	r3, r6
 8011576:	f200 8105 	bhi.w	8011784 <HAL_SD_InitCard+0x2c4>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 801157a:	4f87      	ldr	r7, [pc, #540]	; (8011798 <HAL_SD_InitCard+0x2d8>)
 801157c:	e00c      	b.n	8011598 <HAL_SD_InitCard+0xd8>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 801157e:	4601      	mov	r1, r0
 8011580:	6820      	ldr	r0, [r4, #0]
 8011582:	f001 fb47 	bl	8012c14 <SDMMC_GetResponse>
    count++;
 8011586:	9b06      	ldr	r3, [sp, #24]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8011588:	2800      	cmp	r0, #0
    count++;
 801158a:	f103 0301 	add.w	r3, r3, #1
 801158e:	9306      	str	r3, [sp, #24]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8011590:	9b06      	ldr	r3, [sp, #24]
 8011592:	db11      	blt.n	80115b8 <HAL_SD_InitCard+0xf8>
 8011594:	42b3      	cmp	r3, r6
 8011596:	d80f      	bhi.n	80115b8 <HAL_SD_InitCard+0xf8>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8011598:	2100      	movs	r1, #0
 801159a:	6820      	ldr	r0, [r4, #0]
 801159c:	f001 fdc0 	bl	8013120 <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80115a0:	4639      	mov	r1, r7
    if(errorstate != HAL_SD_ERROR_NONE)
 80115a2:	4605      	mov	r5, r0
 80115a4:	2800      	cmp	r0, #0
 80115a6:	d1c8      	bne.n	801153a <HAL_SD_InitCard+0x7a>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80115a8:	6820      	ldr	r0, [r4, #0]
 80115aa:	f001 fdfd 	bl	80131a8 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80115ae:	2800      	cmp	r0, #0
 80115b0:	d0e5      	beq.n	801157e <HAL_SD_InitCard+0xbe>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80115b2:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80115b6:	e7c0      	b.n	801153a <HAL_SD_InitCard+0x7a>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80115b8:	9a06      	ldr	r2, [sp, #24]
 80115ba:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80115be:	429a      	cmp	r2, r3
 80115c0:	f200 809a 	bhi.w	80116f8 <HAL_SD_InitCard+0x238>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80115c4:	0047      	lsls	r7, r0, #1
 80115c6:	6822      	ldr	r2, [r4, #0]
 80115c8:	d504      	bpl.n	80115d4 <HAL_SD_InitCard+0x114>
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80115ca:	69a3      	ldr	r3, [r4, #24]
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80115cc:	2101      	movs	r1, #1
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80115ce:	2b02      	cmp	r3, #2
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80115d0:	63e1      	str	r1, [r4, #60]	; 0x3c
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80115d2:	d052      	beq.n	801167a <HAL_SD_InitCard+0x1ba>
  uint16_t sd_rca = 1U;
 80115d4:	2301      	movs	r3, #1
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80115d6:	4610      	mov	r0, r2
  uint16_t sd_rca = 1U;
 80115d8:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80115dc:	f001 fb16 	bl	8012c0c <SDMMC_GetPowerState>
 80115e0:	2800      	cmp	r0, #0
 80115e2:	d044      	beq.n	801166e <HAL_SD_InitCard+0x1ae>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80115e4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80115e6:	6823      	ldr	r3, [r4, #0]
 80115e8:	2a03      	cmp	r2, #3
 80115ea:	d125      	bne.n	8011638 <HAL_SD_InitCard+0x178>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80115ec:	4618      	mov	r0, r3
 80115ee:	2104      	movs	r1, #4
 80115f0:	f001 fb10 	bl	8012c14 <SDMMC_GetResponse>
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80115f4:	a90d      	add	r1, sp, #52	; 0x34
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80115f6:	0d03      	lsrs	r3, r0, #20
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80115f8:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80115fa:	6463      	str	r3, [r4, #68]	; 0x44
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80115fc:	f7ff fea6 	bl	801134c <HAL_SD_GetCardCSD>
 8011600:	4606      	mov	r6, r0
 8011602:	2800      	cmp	r0, #0
 8011604:	d136      	bne.n	8011674 <HAL_SD_InitCard+0x1b4>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8011606:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8011608:	4603      	mov	r3, r0
 801160a:	6820      	ldr	r0, [r4, #0]
 801160c:	0412      	lsls	r2, r2, #16
 801160e:	f001 fcd5 	bl	8012fbc <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8011612:	b9b0      	cbnz	r0, 8011642 <HAL_SD_InitCard+0x182>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8011614:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011618:	6820      	ldr	r0, [r4, #0]
 801161a:	f001 fb15 	bl	8012c48 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 801161e:	2800      	cmp	r0, #0
 8011620:	d091      	beq.n	8011546 <HAL_SD_InitCard+0x86>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011622:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 8011624:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011626:	495d      	ldr	r1, [pc, #372]	; (801179c <HAL_SD_InitCard+0x2dc>)
    return HAL_ERROR;
 8011628:	4616      	mov	r6, r2
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801162a:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 801162c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801162e:	4318      	orrs	r0, r3
 8011630:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8011632:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_ERROR;
 8011636:	e786      	b.n	8011546 <HAL_SD_InitCard+0x86>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8011638:	4618      	mov	r0, r3
 801163a:	f001 fe73 	bl	8013324 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 801163e:	2800      	cmp	r0, #0
 8011640:	d05d      	beq.n	80116fe <HAL_SD_InitCard+0x23e>
    hsd->State = HAL_SD_STATE_READY;
 8011642:	2601      	movs	r6, #1
 8011644:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8011648:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801164a:	4308      	orrs	r0, r1
 801164c:	63a0      	str	r0, [r4, #56]	; 0x38
}
 801164e:	4630      	mov	r0, r6
 8011650:	b018      	add	sp, #96	; 0x60
 8011652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hsd->SdCard.CardVersion = CARD_V1_X;
 8011656:	6425      	str	r5, [r4, #64]	; 0x40
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8011658:	6820      	ldr	r0, [r4, #0]
 801165a:	f001 fcf3 	bl	8013044 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 801165e:	4605      	mov	r5, r0
 8011660:	2800      	cmp	r0, #0
 8011662:	f47f af6a 	bne.w	801153a <HAL_SD_InitCard+0x7a>
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8011666:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011668:	2b01      	cmp	r3, #1
 801166a:	d180      	bne.n	801156e <HAL_SD_InitCard+0xae>
 801166c:	e77a      	b.n	8011564 <HAL_SD_InitCard+0xa4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 801166e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8011672:	e7e6      	b.n	8011642 <HAL_SD_InitCard+0x182>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8011674:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8011678:	e7e3      	b.n	8011642 <HAL_SD_InitCard+0x182>
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 801167a:	01c6      	lsls	r6, r0, #7
 801167c:	d5aa      	bpl.n	80115d4 <HAL_SD_InitCard+0x114>
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 801167e:	6813      	ldr	r3, [r2, #0]
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8011680:	f44f 7100 	mov.w	r1, #512	; 0x200
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8011684:	4610      	mov	r0, r2
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8011686:	f043 0308 	orr.w	r3, r3, #8
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 801168a:	65e1      	str	r1, [r4, #92]	; 0x5c
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 801168c:	6013      	str	r3, [r2, #0]
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 801168e:	f001 ffe3 	bl	8013658 <SDMMC_CmdVoltageSwitch>
        if(errorstate != HAL_SD_ERROR_NONE)
 8011692:	4605      	mov	r5, r0
 8011694:	b130      	cbz	r0, 80116a4 <HAL_SD_InitCard+0x1e4>
 8011696:	e750      	b.n	801153a <HAL_SD_InitCard+0x7a>
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8011698:	f7f8 ffb2 	bl	800a600 <HAL_GetTick>
 801169c:	eba0 0008 	sub.w	r0, r0, r8
 80116a0:	3001      	adds	r0, #1
 80116a2:	d07d      	beq.n	80117a0 <HAL_SD_InitCard+0x2e0>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 80116a4:	6823      	ldr	r3, [r4, #0]
 80116a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80116a8:	0155      	lsls	r5, r2, #5
 80116aa:	d5f5      	bpl.n	8011698 <HAL_SD_InitCard+0x1d8>
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 80116ac:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80116b0:	639a      	str	r2, [r3, #56]	; 0x38
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 80116b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80116b4:	02d8      	lsls	r0, r3, #11
 80116b6:	f57f af7c 	bpl.w	80115b2 <HAL_SD_InitCard+0xf2>
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 80116ba:	2001      	movs	r0, #1
 80116bc:	f7f8 ff3a 	bl	800a534 <HAL_SD_DriveTransceiver_1_8V_Callback>
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 80116c0:	6822      	ldr	r2, [r4, #0]
 80116c2:	6813      	ldr	r3, [r2, #0]
 80116c4:	f043 0304 	orr.w	r3, r3, #4
 80116c8:	6013      	str	r3, [r2, #0]
 80116ca:	e006      	b.n	80116da <HAL_SD_InitCard+0x21a>
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80116cc:	f7f8 ff98 	bl	800a600 <HAL_GetTick>
 80116d0:	eba0 0008 	sub.w	r0, r0, r8
 80116d4:	3001      	adds	r0, #1
 80116d6:	d063      	beq.n	80117a0 <HAL_SD_InitCard+0x2e0>
 80116d8:	6822      	ldr	r2, [r4, #0]
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 80116da:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80116dc:	0199      	lsls	r1, r3, #6
 80116de:	d5f5      	bpl.n	80116cc <HAL_SD_InitCard+0x20c>
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 80116e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80116e4:	6393      	str	r3, [r2, #56]	; 0x38
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 80116e6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80116e8:	02db      	lsls	r3, r3, #11
 80116ea:	d405      	bmi.n	80116f8 <HAL_SD_InitCard+0x238>
          hsd->Instance->POWER = 0x13U;
 80116ec:	2113      	movs	r1, #19
          hsd->Instance->ICR = 0xFFFFFFFFU;
 80116ee:	f04f 33ff 	mov.w	r3, #4294967295
          hsd->Instance->POWER = 0x13U;
 80116f2:	6011      	str	r1, [r2, #0]
          hsd->Instance->ICR = 0xFFFFFFFFU;
 80116f4:	6393      	str	r3, [r2, #56]	; 0x38
 80116f6:	e76d      	b.n	80115d4 <HAL_SD_InitCard+0x114>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80116f8:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 80116fc:	e71d      	b.n	801153a <HAL_SD_InitCard+0x7a>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80116fe:	4601      	mov	r1, r0
 8011700:	6820      	ldr	r0, [r4, #0]
 8011702:	f001 fa87 	bl	8012c14 <SDMMC_GetResponse>
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8011706:	2104      	movs	r1, #4
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8011708:	6720      	str	r0, [r4, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 801170a:	6820      	ldr	r0, [r4, #0]
 801170c:	f001 fa82 	bl	8012c14 <SDMMC_GetResponse>
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8011710:	2108      	movs	r1, #8
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8011712:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8011714:	6820      	ldr	r0, [r4, #0]
 8011716:	f001 fa7d 	bl	8012c14 <SDMMC_GetResponse>
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 801171a:	210c      	movs	r1, #12
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 801171c:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 801171e:	6820      	ldr	r0, [r4, #0]
 8011720:	f001 fa78 	bl	8012c14 <SDMMC_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8011724:	6be3      	ldr	r3, [r4, #60]	; 0x3c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8011726:	67e0      	str	r0, [r4, #124]	; 0x7c
  if(hsd->SdCard.CardType != CARD_SECURED)
 8011728:	2b03      	cmp	r3, #3
 801172a:	d03c      	beq.n	80117a6 <HAL_SD_InitCard+0x2e6>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 801172c:	f10d 0116 	add.w	r1, sp, #22
 8011730:	6820      	ldr	r0, [r4, #0]
 8011732:	f001 fe6f 	bl	8013414 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8011736:	2800      	cmp	r0, #0
 8011738:	d183      	bne.n	8011642 <HAL_SD_InitCard+0x182>
  if(hsd->SdCard.CardType != CARD_SECURED)
 801173a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801173c:	6823      	ldr	r3, [r4, #0]
 801173e:	2a03      	cmp	r2, #3
 8011740:	f43f af54 	beq.w	80115ec <HAL_SD_InitCard+0x12c>
    hsd->SdCard.RelCardAdd = sd_rca;
 8011744:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8011748:	4618      	mov	r0, r3
    hsd->SdCard.RelCardAdd = sd_rca;
 801174a:	64a1      	str	r1, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801174c:	0409      	lsls	r1, r1, #16
 801174e:	f001 fe25 	bl	801339c <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8011752:	2800      	cmp	r0, #0
 8011754:	f47f af75 	bne.w	8011642 <HAL_SD_InitCard+0x182>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8011758:	4601      	mov	r1, r0
 801175a:	6820      	ldr	r0, [r4, #0]
 801175c:	f001 fa5a 	bl	8012c14 <SDMMC_GetResponse>
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8011760:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8011762:	6620      	str	r0, [r4, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8011764:	6820      	ldr	r0, [r4, #0]
 8011766:	f001 fa55 	bl	8012c14 <SDMMC_GetResponse>
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 801176a:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 801176c:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 801176e:	6820      	ldr	r0, [r4, #0]
 8011770:	f001 fa50 	bl	8012c14 <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8011774:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8011776:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8011778:	6820      	ldr	r0, [r4, #0]
 801177a:	f001 fa4b 	bl	8012c14 <SDMMC_GetResponse>
 801177e:	6823      	ldr	r3, [r4, #0]
 8011780:	66e0      	str	r0, [r4, #108]	; 0x6c
 8011782:	e733      	b.n	80115ec <HAL_SD_InitCard+0x12c>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8011784:	9b06      	ldr	r3, [sp, #24]
 8011786:	42b3      	cmp	r3, r6
 8011788:	d8b6      	bhi.n	80116f8 <HAL_SD_InitCard+0x238>
 801178a:	6822      	ldr	r2, [r4, #0]
 801178c:	e722      	b.n	80115d4 <HAL_SD_InitCard+0x114>
 801178e:	bf00      	nop
 8011790:	014f8b59 	.word	0x014f8b59
 8011794:	00012110 	.word	0x00012110
 8011798:	c1100000 	.word	0xc1100000
 801179c:	1fe00fff 	.word	0x1fe00fff
            return HAL_SD_ERROR_TIMEOUT;
 80117a0:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 80117a4:	e6c9      	b.n	801153a <HAL_SD_InitCard+0x7a>
 80117a6:	6823      	ldr	r3, [r4, #0]
 80117a8:	e720      	b.n	80115ec <HAL_SD_InitCard+0x12c>
 80117aa:	bf00      	nop

080117ac <HAL_SD_GetCardStatus>:
{
 80117ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80117b0:	4604      	mov	r4, r0
 80117b2:	b097      	sub	sp, #92	; 0x5c
 80117b4:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 80117b6:	f7f8 ff23 	bl	800a600 <HAL_GetTick>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80117ba:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
 80117bc:	4680      	mov	r8, r0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80117be:	6820      	ldr	r0, [r4, #0]
 80117c0:	f001 fa28 	bl	8012c14 <SDMMC_GetResponse>
 80117c4:	0187      	lsls	r7, r0, #6
 80117c6:	d422      	bmi.n	801180e <HAL_SD_GetCardStatus+0x62>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80117c8:	2140      	movs	r1, #64	; 0x40
 80117ca:	6820      	ldr	r0, [r4, #0]
 80117cc:	f001 fa3c 	bl	8012c48 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80117d0:	b308      	cbz	r0, 8011816 <HAL_SD_GetCardStatus+0x6a>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80117d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80117d4:	63a3      	str	r3, [r4, #56]	; 0x38
 80117d6:	6823      	ldr	r3, [r4, #0]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80117d8:	4a5a      	ldr	r2, [pc, #360]	; (8011944 <HAL_SD_GetCardStatus+0x198>)
    hsd->State = HAL_SD_STATE_READY;
 80117da:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80117dc:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80117de:	460e      	mov	r6, r1
    hsd->ErrorCode |= errorstate;
 80117e0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80117e2:	4310      	orrs	r0, r2
 80117e4:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80117e6:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80117ea:	4618      	mov	r0, r3
 80117ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80117f0:	f001 fa2a 	bl	8012c48 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80117f4:	b138      	cbz	r0, 8011806 <HAL_SD_GetCardStatus+0x5a>
    hsd->State = HAL_SD_STATE_READY;
 80117f6:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80117f8:	6822      	ldr	r2, [r4, #0]
 80117fa:	4952      	ldr	r1, [pc, #328]	; (8011944 <HAL_SD_GetCardStatus+0x198>)
    status = HAL_ERROR;
 80117fc:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80117fe:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8011800:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8011802:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8011806:	4630      	mov	r0, r6
 8011808:	b017      	add	sp, #92	; 0x5c
 801180a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801180e:	6823      	ldr	r3, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8011810:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8011814:	e7e0      	b.n	80117d8 <HAL_SD_GetCardStatus+0x2c>
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8011816:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011818:	6820      	ldr	r0, [r4, #0]
 801181a:	0409      	lsls	r1, r1, #16
 801181c:	f001 fc80 	bl	8013120 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8011820:	2800      	cmp	r0, #0
 8011822:	d1d6      	bne.n	80117d2 <HAL_SD_GetCardStatus+0x26>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8011824:	f04f 32ff 	mov.w	r2, #4294967295
  config.DataLength    = 64U;
 8011828:	2340      	movs	r3, #64	; 0x40
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 801182a:	2160      	movs	r1, #96	; 0x60
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801182c:	9004      	str	r0, [sp, #16]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801182e:	9200      	str	r2, [sp, #0]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8011830:	2202      	movs	r2, #2
  config.DataLength    = 64U;
 8011832:	9301      	str	r3, [sp, #4]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8011834:	2301      	movs	r3, #1
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8011836:	9102      	str	r1, [sp, #8]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8011838:	4669      	mov	r1, sp
 801183a:	6820      	ldr	r0, [r4, #0]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 801183c:	9203      	str	r2, [sp, #12]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 801183e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8011840:	f001 f9ec 	bl	8012c1c <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8011844:	6820      	ldr	r0, [r4, #0]
 8011846:	f001 fe7d 	bl	8013544 <SDMMC_CmdStatusRegister>
  if(errorstate != HAL_SD_ERROR_NONE)
 801184a:	2800      	cmp	r0, #0
 801184c:	d1c1      	bne.n	80117d2 <HAL_SD_GetCardStatus+0x26>
  uint32_t *pData = pSDstatus;
 801184e:	af06      	add	r7, sp, #24
 8011850:	e005      	b.n	801185e <HAL_SD_GetCardStatus+0xb2>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8011852:	f7f8 fed5 	bl	800a600 <HAL_GetTick>
 8011856:	eba0 0008 	sub.w	r0, r0, r8
 801185a:	3001      	adds	r0, #1
 801185c:	d013      	beq.n	8011886 <HAL_SD_GetCardStatus+0xda>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 801185e:	6823      	ldr	r3, [r4, #0]
 8011860:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011862:	f412 7f95 	tst.w	r2, #298	; 0x12a
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8011866:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8011868:	d110      	bne.n	801188c <HAL_SD_GetCardStatus+0xe0>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 801186a:	0416      	lsls	r6, r2, #16
 801186c:	d5f1      	bpl.n	8011852 <HAL_SD_GetCardStatus+0xa6>
 801186e:	f107 0620 	add.w	r6, r7, #32
 8011872:	e000      	b.n	8011876 <HAL_SD_GetCardStatus+0xca>
 8011874:	6823      	ldr	r3, [r4, #0]
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8011876:	4618      	mov	r0, r3
 8011878:	f001 f9ae 	bl	8012bd8 <SDMMC_ReadFIFO>
 801187c:	f847 0b04 	str.w	r0, [r7], #4
      for(count = 0U; count < 8U; count++)
 8011880:	42b7      	cmp	r7, r6
 8011882:	d1f7      	bne.n	8011874 <HAL_SD_GetCardStatus+0xc8>
 8011884:	e7e5      	b.n	8011852 <HAL_SD_GetCardStatus+0xa6>
      return HAL_SD_ERROR_TIMEOUT;
 8011886:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 801188a:	e7a4      	b.n	80117d6 <HAL_SD_GetCardStatus+0x2a>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 801188c:	0710      	lsls	r0, r2, #28
 801188e:	d452      	bmi.n	8011936 <HAL_SD_GetCardStatus+0x18a>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8011890:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011892:	0791      	lsls	r1, r2, #30
 8011894:	d451      	bmi.n	801193a <HAL_SD_GetCardStatus+0x18e>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8011896:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011898:	0692      	lsls	r2, r2, #26
 801189a:	d50b      	bpl.n	80118b4 <HAL_SD_GetCardStatus+0x108>
 801189c:	e04f      	b.n	801193e <HAL_SD_GetCardStatus+0x192>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 801189e:	f001 f99b 	bl	8012bd8 <SDMMC_ReadFIFO>
 80118a2:	f847 0b04 	str.w	r0, [r7], #4
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80118a6:	f7f8 feab 	bl	800a600 <HAL_GetTick>
 80118aa:	eba0 0008 	sub.w	r0, r0, r8
 80118ae:	3001      	adds	r0, #1
 80118b0:	d0e9      	beq.n	8011886 <HAL_SD_GetCardStatus+0xda>
 80118b2:	6823      	ldr	r3, [r4, #0]
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80118b4:	6b5e      	ldr	r6, [r3, #52]	; 0x34
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80118b6:	4618      	mov	r0, r3
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80118b8:	f416 5680 	ands.w	r6, r6, #4096	; 0x1000
 80118bc:	d1ef      	bne.n	801189e <HAL_SD_GetCardStatus+0xf2>
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80118be:	9f06      	ldr	r7, [sp, #24]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80118c0:	9808      	ldr	r0, [sp, #32]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80118c2:	0a39      	lsrs	r1, r7, #8
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80118c4:	f3c7 1e40 	ubfx	lr, r7, #5, #1
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80118c8:	f3c7 1881 	ubfx	r8, r7, #6, #2
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80118cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80118ce:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80118d2:	ea4f 4c10 	mov.w	ip, r0, lsr #16
 80118d6:	fa5f f982 	uxtb.w	r9, r2
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80118da:	ea41 6117 	orr.w	r1, r1, r7, lsr #24
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80118de:	4f1a      	ldr	r7, [pc, #104]	; (8011948 <HAL_SD_GetCardStatus+0x19c>)
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80118e0:	f02c 0cff 	bic.w	ip, ip, #255	; 0xff
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80118e4:	639f      	str	r7, [r3, #56]	; 0x38
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80118e6:	b289      	uxth	r1, r1
 80118e8:	9f07      	ldr	r7, [sp, #28]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80118ea:	ea4c 0c09 	orr.w	ip, ip, r9
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80118ee:	f885 8000 	strb.w	r8, [r5]
 80118f2:	ba3f      	rev	r7, r7
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80118f4:	f885 e001 	strb.w	lr, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80118f8:	8069      	strh	r1, [r5, #2]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80118fa:	fa5f fe80 	uxtb.w	lr, r0
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80118fe:	606f      	str	r7, [r5, #4]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8011900:	f3c0 5103 	ubfx	r1, r0, #20, #4
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8011904:	f3c0 2707 	ubfx	r7, r0, #8, #8
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8011908:	f885 e008 	strb.w	lr, [r5, #8]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 801190c:	f3c2 1003 	ubfx	r0, r2, #4, #4
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8011910:	f3c2 2e85 	ubfx	lr, r2, #10, #6
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8011914:	726f      	strb	r7, [r5, #9]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8011916:	f3c2 2701 	ubfx	r7, r2, #8, #2
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 801191a:	72a9      	strb	r1, [r5, #10]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 801191c:	f002 020f 	and.w	r2, r2, #15
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8011920:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8011924:	f8a5 c00c 	strh.w	ip, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8011928:	f885 e00e 	strb.w	lr, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 801192c:	73ef      	strb	r7, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 801192e:	7428      	strb	r0, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8011930:	746a      	strb	r2, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8011932:	74a9      	strb	r1, [r5, #18]
 8011934:	e759      	b.n	80117ea <HAL_SD_GetCardStatus+0x3e>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8011936:	2008      	movs	r0, #8
 8011938:	e74e      	b.n	80117d8 <HAL_SD_GetCardStatus+0x2c>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 801193a:	2002      	movs	r0, #2
 801193c:	e74c      	b.n	80117d8 <HAL_SD_GetCardStatus+0x2c>
    return HAL_SD_ERROR_RX_OVERRUN;
 801193e:	2020      	movs	r0, #32
 8011940:	e74a      	b.n	80117d8 <HAL_SD_GetCardStatus+0x2c>
 8011942:	bf00      	nop
 8011944:	1fe00fff 	.word	0x1fe00fff
 8011948:	18000f3a 	.word	0x18000f3a

0801194c <HAL_SD_GetCardInfo>:
{
 801194c:	4603      	mov	r3, r0
}
 801194e:	2000      	movs	r0, #0
{
 8011950:	b430      	push	{r4, r5}
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8011952:	e9d3 250f 	ldrd	r2, r5, [r3, #60]	; 0x3c
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8011956:	6c5c      	ldr	r4, [r3, #68]	; 0x44
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8011958:	600a      	str	r2, [r1, #0]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 801195a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 801195c:	604d      	str	r5, [r1, #4]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 801195e:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8011960:	608c      	str	r4, [r1, #8]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8011962:	6d1c      	ldr	r4, [r3, #80]	; 0x50
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8011964:	60ca      	str	r2, [r1, #12]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8011966:	e9d3 2315 	ldrd	r2, r3, [r3, #84]	; 0x54
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 801196a:	e9c1 5404 	strd	r5, r4, [r1, #16]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 801196e:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8011972:	bc30      	pop	{r4, r5}
 8011974:	4770      	bx	lr
 8011976:	bf00      	nop

08011978 <HAL_SD_ConfigWideBusOperation>:
  if(hsd->SdCard.CardType != CARD_SECURED)
 8011978:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  hsd->State = HAL_SD_STATE_BUSY;
 801197a:	2303      	movs	r3, #3
  if(hsd->SdCard.CardType != CARD_SECURED)
 801197c:	2a03      	cmp	r2, #3
{
 801197e:	b570      	push	{r4, r5, r6, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 8011980:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
{
 8011984:	b08a      	sub	sp, #40	; 0x28
 8011986:	4604      	mov	r4, r0
 8011988:	460d      	mov	r5, r1
 801198a:	6803      	ldr	r3, [r0, #0]
  if(hsd->SdCard.CardType != CARD_SECURED)
 801198c:	d026      	beq.n	80119dc <HAL_SD_ConfigWideBusOperation+0x64>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 801198e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8011992:	d023      	beq.n	80119dc <HAL_SD_ConfigWideBusOperation+0x64>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8011994:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8011998:	d065      	beq.n	8011a66 <HAL_SD_ConfigWideBusOperation+0xee>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 801199a:	2900      	cmp	r1, #0
 801199c:	d044      	beq.n	8011a28 <HAL_SD_ConfigWideBusOperation+0xb0>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 801199e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80119a0:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80119a4:	6382      	str	r2, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80119a6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80119a8:	b9fa      	cbnz	r2, 80119ea <HAL_SD_ConfigWideBusOperation+0x72>
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 80119aa:	6962      	ldr	r2, [r4, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80119ac:	6921      	ldr	r1, [r4, #16]
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 80119ae:	2a03      	cmp	r2, #3
    Init.BusWide             = WideMode;
 80119b0:	9506      	str	r5, [sp, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80119b2:	9107      	str	r1, [sp, #28]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80119b4:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 80119b8:	e9cd 6004 	strd	r6, r0, [sp, #16]
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 80119bc:	d92b      	bls.n	8011a16 <HAL_SD_ConfigWideBusOperation+0x9e>
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 80119be:	9208      	str	r2, [sp, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 80119c0:	aa0a      	add	r2, sp, #40	; 0x28
 80119c2:	ae04      	add	r6, sp, #16
  HAL_StatusTypeDef status = HAL_OK;
 80119c4:	2500      	movs	r5, #0
    (void)SDMMC_Init(hsd->Instance, Init);
 80119c6:	e912 0007 	ldmdb	r2, {r0, r1, r2}
 80119ca:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80119ce:	4618      	mov	r0, r3
 80119d0:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80119d4:	f001 f8e6 	bl	8012ba4 <SDMMC_Init>
 80119d8:	6823      	ldr	r3, [r4, #0]
 80119da:	e009      	b.n	80119f0 <HAL_SD_ConfigWideBusOperation+0x78>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80119dc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80119de:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80119e2:	63a2      	str	r2, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80119e4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80119e6:	2a00      	cmp	r2, #0
 80119e8:	d0df      	beq.n	80119aa <HAL_SD_ConfigWideBusOperation+0x32>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80119ea:	4a33      	ldr	r2, [pc, #204]	; (8011ab8 <HAL_SD_ConfigWideBusOperation+0x140>)
    status = HAL_ERROR;
 80119ec:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80119ee:	639a      	str	r2, [r3, #56]	; 0x38
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80119f0:	4618      	mov	r0, r3
 80119f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80119f6:	f001 f927 	bl	8012c48 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80119fa:	b130      	cbz	r0, 8011a0a <HAL_SD_ConfigWideBusOperation+0x92>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80119fc:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 80119fe:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011a00:	4a2d      	ldr	r2, [pc, #180]	; (8011ab8 <HAL_SD_ConfigWideBusOperation+0x140>)
 8011a02:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8011a04:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011a06:	4318      	orrs	r0, r3
 8011a08:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 8011a0a:	2301      	movs	r3, #1
}
 8011a0c:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 8011a0e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8011a12:	b00a      	add	sp, #40	; 0x28
 8011a14:	bd70      	pop	{r4, r5, r6, pc}
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8011a16:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8011a18:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8011a1c:	d0cf      	beq.n	80119be <HAL_SD_ConfigWideBusOperation+0x46>
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8011a1e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8011a22:	d02d      	beq.n	8011a80 <HAL_SD_ConfigWideBusOperation+0x108>
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 8011a24:	2204      	movs	r2, #4
 8011a26:	e7ca      	b.n	80119be <HAL_SD_ConfigWideBusOperation+0x46>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8011a28:	4618      	mov	r0, r3
  uint32_t scr[2U] = {0UL, 0UL};
 8011a2a:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8011a2e:	f001 f8f1 	bl	8012c14 <SDMMC_GetResponse>
 8011a32:	0181      	lsls	r1, r0, #6
 8011a34:	d420      	bmi.n	8011a78 <HAL_SD_ConfigWideBusOperation+0x100>
  errorstate = SD_FindSCR(hsd, scr);
 8011a36:	a904      	add	r1, sp, #16
 8011a38:	4620      	mov	r0, r4
 8011a3a:	f7ff f8d3 	bl	8010be4 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8011a3e:	b968      	cbnz	r0, 8011a5c <HAL_SD_ConfigWideBusOperation+0xe4>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8011a40:	9a05      	ldr	r2, [sp, #20]
 8011a42:	6823      	ldr	r3, [r4, #0]
 8011a44:	03d2      	lsls	r2, r2, #15
 8011a46:	d534      	bpl.n	8011ab2 <HAL_SD_ConfigWideBusOperation+0x13a>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8011a48:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	0409      	lsls	r1, r1, #16
 8011a4e:	f001 fb67 	bl	8013120 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8011a52:	b918      	cbnz	r0, 8011a5c <HAL_SD_ConfigWideBusOperation+0xe4>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8011a54:	4601      	mov	r1, r0
 8011a56:	6820      	ldr	r0, [r4, #0]
 8011a58:	f001 fbda 	bl	8013210 <SDMMC_CmdBusWidth>
 8011a5c:	6823      	ldr	r3, [r4, #0]
      hsd->ErrorCode |= errorstate;
 8011a5e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8011a60:	4310      	orrs	r0, r2
 8011a62:	63a0      	str	r0, [r4, #56]	; 0x38
 8011a64:	e7be      	b.n	80119e4 <HAL_SD_ConfigWideBusOperation+0x6c>
  uint32_t scr[2U] = {0UL, 0UL};
 8011a66:	2200      	movs	r2, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8011a68:	4618      	mov	r0, r3
 8011a6a:	4611      	mov	r1, r2
  uint32_t scr[2U] = {0UL, 0UL};
 8011a6c:	e9cd 2204 	strd	r2, r2, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8011a70:	f001 f8d0 	bl	8012c14 <SDMMC_GetResponse>
 8011a74:	0186      	lsls	r6, r0, #6
 8011a76:	d506      	bpl.n	8011a86 <HAL_SD_ConfigWideBusOperation+0x10e>
 8011a78:	6823      	ldr	r3, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8011a7a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8011a7e:	e7ee      	b.n	8011a5e <HAL_SD_ConfigWideBusOperation+0xe6>
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 8011a80:	2202      	movs	r2, #2
 8011a82:	9208      	str	r2, [sp, #32]
 8011a84:	e79c      	b.n	80119c0 <HAL_SD_ConfigWideBusOperation+0x48>
  errorstate = SD_FindSCR(hsd, scr);
 8011a86:	a904      	add	r1, sp, #16
 8011a88:	4620      	mov	r0, r4
 8011a8a:	f7ff f8ab 	bl	8010be4 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8011a8e:	2800      	cmp	r0, #0
 8011a90:	d1e4      	bne.n	8011a5c <HAL_SD_ConfigWideBusOperation+0xe4>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8011a92:	9a05      	ldr	r2, [sp, #20]
 8011a94:	6823      	ldr	r3, [r4, #0]
 8011a96:	0350      	lsls	r0, r2, #13
 8011a98:	d50b      	bpl.n	8011ab2 <HAL_SD_ConfigWideBusOperation+0x13a>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8011a9a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	0409      	lsls	r1, r1, #16
 8011aa0:	f001 fb3e 	bl	8013120 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8011aa4:	2800      	cmp	r0, #0
 8011aa6:	d1d9      	bne.n	8011a5c <HAL_SD_ConfigWideBusOperation+0xe4>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8011aa8:	2102      	movs	r1, #2
 8011aaa:	6820      	ldr	r0, [r4, #0]
 8011aac:	f001 fbb0 	bl	8013210 <SDMMC_CmdBusWidth>
 8011ab0:	e7d4      	b.n	8011a5c <HAL_SD_ConfigWideBusOperation+0xe4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8011ab2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8011ab6:	e7d2      	b.n	8011a5e <HAL_SD_ConfigWideBusOperation+0xe6>
 8011ab8:	1fe00fff 	.word	0x1fe00fff

08011abc <HAL_SD_Init>:
{
 8011abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011abe:	b087      	sub	sp, #28
  if(hsd == NULL)
 8011ac0:	b1a0      	cbz	r0, 8011aec <HAL_SD_Init+0x30>
  if(hsd->State == HAL_SD_STATE_RESET)
 8011ac2:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8011ac6:	4604      	mov	r4, r0
 8011ac8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8011acc:	b93b      	cbnz	r3, 8011ade <HAL_SD_Init+0x22>
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8011ace:	6983      	ldr	r3, [r0, #24]
    hsd->Lock = HAL_UNLOCKED;
 8011ad0:	7702      	strb	r2, [r0, #28]
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8011ad2:	b90b      	cbnz	r3, 8011ad8 <HAL_SD_Init+0x1c>
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8011ad4:	2302      	movs	r3, #2
 8011ad6:	6183      	str	r3, [r0, #24]
    HAL_SD_MspInit(hsd);
 8011ad8:	4620      	mov	r0, r4
 8011ada:	f7ff f977 	bl	8010dcc <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 8011ade:	2303      	movs	r3, #3
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8011ae0:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 8011ae2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8011ae6:	f7ff fceb 	bl	80114c0 <HAL_SD_InitCard>
 8011aea:	b118      	cbz	r0, 8011af4 <HAL_SD_Init+0x38>
    return HAL_ERROR;
 8011aec:	2501      	movs	r5, #1
}
 8011aee:	4628      	mov	r0, r5
 8011af0:	b007      	add	sp, #28
 8011af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8011af4:	a901      	add	r1, sp, #4
 8011af6:	4620      	mov	r0, r4
 8011af8:	f7ff fe58 	bl	80117ac <HAL_SD_GetCardStatus>
 8011afc:	2800      	cmp	r0, #0
 8011afe:	d1f5      	bne.n	8011aec <HAL_SD_Init+0x30>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8011b00:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  speedgrade = CardStatus.UhsSpeedGrade;
 8011b02:	f89d 2014 	ldrb.w	r2, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8011b06:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
 8011b08:	f89d 3015 	ldrb.w	r3, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
 8011b0c:	b2d2      	uxtb	r2, r2
  unitsize = CardStatus.UhsAllocationUnitSize;
 8011b0e:	b2db      	uxtb	r3, r3
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8011b10:	d029      	beq.n	8011b66 <HAL_SD_Init+0xaa>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8011b12:	65e0      	str	r0, [r4, #92]	; 0x5c
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8011b14:	68e1      	ldr	r1, [r4, #12]
 8011b16:	4620      	mov	r0, r4
 8011b18:	f7ff ff2e 	bl	8011978 <HAL_SD_ConfigWideBusOperation>
 8011b1c:	4605      	mov	r5, r0
 8011b1e:	2800      	cmp	r0, #0
 8011b20:	d1e4      	bne.n	8011aec <HAL_SD_Init+0x30>
  tickstart = HAL_GetTick();
 8011b22:	f7f8 fd6d 	bl	800a600 <HAL_GetTick>
 8011b26:	4607      	mov	r7, r0
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8011b28:	e007      	b.n	8011b3a <HAL_SD_Init+0x7e>
    hsd->ErrorCode |= errorstate;
 8011b2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011b2c:	431e      	orrs	r6, r3
 8011b2e:	63a6      	str	r6, [r4, #56]	; 0x38
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8011b30:	f7f8 fd66 	bl	800a600 <HAL_GetTick>
 8011b34:	1bc0      	subs	r0, r0, r7
 8011b36:	3001      	adds	r0, #1
 8011b38:	d01d      	beq.n	8011b76 <HAL_SD_Init+0xba>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8011b3a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011b3c:	6820      	ldr	r0, [r4, #0]
 8011b3e:	0409      	lsls	r1, r1, #16
 8011b40:	f001 fcbc 	bl	80134bc <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8011b44:	4606      	mov	r6, r0
 8011b46:	2800      	cmp	r0, #0
 8011b48:	d1ef      	bne.n	8011b2a <HAL_SD_Init+0x6e>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8011b4a:	4601      	mov	r1, r0
 8011b4c:	6820      	ldr	r0, [r4, #0]
 8011b4e:	f001 f861 	bl	8012c14 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 8011b52:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8011b56:	2804      	cmp	r0, #4
 8011b58:	d1ea      	bne.n	8011b30 <HAL_SD_Init+0x74>
  hsd->State = HAL_SD_STATE_READY;
 8011b5a:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8011b5c:	63a6      	str	r6, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8011b5e:	6326      	str	r6, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8011b60:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8011b64:	e7c3      	b.n	8011aee <HAL_SD_Init+0x32>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8011b66:	4313      	orrs	r3, r2
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8011b68:	bf14      	ite	ne
 8011b6a:	f44f 7300 	movne.w	r3, #512	; 0x200
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8011b6e:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8011b72:	65e3      	str	r3, [r4, #92]	; 0x5c
 8011b74:	e7ce      	b.n	8011b14 <HAL_SD_Init+0x58>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8011b76:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
      hsd->State= HAL_SD_STATE_READY;
 8011b7a:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 8011b7c:	2503      	movs	r5, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8011b7e:	63a2      	str	r2, [r4, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8011b80:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_TIMEOUT;
 8011b84:	e7b3      	b.n	8011aee <HAL_SD_Init+0x32>
 8011b86:	bf00      	nop

08011b88 <HAL_SD_ConfigSpeedBusOperation>:
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8011b88:	6983      	ldr	r3, [r0, #24]
  hsd->State = HAL_SD_STATE_BUSY;
 8011b8a:	2203      	movs	r2, #3
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8011b8c:	2b02      	cmp	r3, #2
{
 8011b8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b92:	4604      	mov	r4, r0
 8011b94:	b096      	sub	sp, #88	; 0x58
  hsd->State = HAL_SD_STATE_BUSY;
 8011b96:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8011b9a:	d076      	beq.n	8011c8a <HAL_SD_ConfigSpeedBusOperation+0x102>
    switch (SpeedMode)
 8011b9c:	2901      	cmp	r1, #1
 8011b9e:	d01e      	beq.n	8011bde <HAL_SD_ConfigSpeedBusOperation+0x56>
 8011ba0:	d353      	bcc.n	8011c4a <HAL_SD_ConfigSpeedBusOperation+0xc2>
 8011ba2:	2902      	cmp	r1, #2
 8011ba4:	d14b      	bne.n	8011c3e <HAL_SD_ConfigSpeedBusOperation+0xb6>
        if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 8011ba6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8011ba8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011bac:	d057      	beq.n	8011c5e <HAL_SD_ConfigSpeedBusOperation+0xd6>
 8011bae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011bb2:	d054      	beq.n	8011c5e <HAL_SD_ConfigSpeedBusOperation+0xd6>
            (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED) ||
 8011bb4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011bb6:	2b01      	cmp	r3, #1
 8011bb8:	d051      	beq.n	8011c5e <HAL_SD_ConfigSpeedBusOperation+0xd6>
          hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8011bba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
          status = HAL_ERROR;
 8011bbc:	2601      	movs	r6, #1
          hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8011bbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011bc2:	63a3      	str	r3, [r4, #56]	; 0x38
 8011bc4:	e00c      	b.n	8011be0 <HAL_SD_ConfigSpeedBusOperation+0x58>
        if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 8011bc6:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8011bc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011bcc:	f000 809f 	beq.w	8011d0e <HAL_SD_ConfigSpeedBusOperation+0x186>
 8011bd0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8011bd2:	2a01      	cmp	r2, #1
 8011bd4:	f000 809b 	beq.w	8011d0e <HAL_SD_ConfigSpeedBusOperation+0x186>
        else if (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED)
 8011bd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011bdc:	d03f      	beq.n	8011c5e <HAL_SD_ConfigSpeedBusOperation+0xd6>
  HAL_StatusTypeDef status = HAL_OK;
 8011bde:	2600      	movs	r6, #0
  tickstart = HAL_GetTick();
 8011be0:	f7f8 fd0e 	bl	800a600 <HAL_GetTick>
 8011be4:	4605      	mov	r5, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8011be6:	e007      	b.n	8011bf8 <HAL_SD_ConfigSpeedBusOperation+0x70>
    hsd->ErrorCode |= errorstate;
 8011be8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011bea:	4308      	orrs	r0, r1
 8011bec:	63a0      	str	r0, [r4, #56]	; 0x38
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8011bee:	f7f8 fd07 	bl	800a600 <HAL_GetTick>
 8011bf2:	1b40      	subs	r0, r0, r5
 8011bf4:	3001      	adds	r0, #1
 8011bf6:	d03d      	beq.n	8011c74 <HAL_SD_ConfigSpeedBusOperation+0xec>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8011bf8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011bfa:	6820      	ldr	r0, [r4, #0]
 8011bfc:	0409      	lsls	r1, r1, #16
 8011bfe:	f001 fc5d 	bl	80134bc <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8011c02:	2800      	cmp	r0, #0
 8011c04:	d1f0      	bne.n	8011be8 <HAL_SD_ConfigSpeedBusOperation+0x60>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8011c06:	4601      	mov	r1, r0
 8011c08:	6820      	ldr	r0, [r4, #0]
 8011c0a:	f001 f803 	bl	8012c14 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 8011c0e:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8011c12:	2804      	cmp	r0, #4
 8011c14:	d1eb      	bne.n	8011bee <HAL_SD_ConfigSpeedBusOperation+0x66>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8011c16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011c1a:	6820      	ldr	r0, [r4, #0]
 8011c1c:	f001 f814 	bl	8012c48 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8011c20:	b130      	cbz	r0, 8011c30 <HAL_SD_ConfigSpeedBusOperation+0xa8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011c22:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 8011c24:	2601      	movs	r6, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011c26:	4a82      	ldr	r2, [pc, #520]	; (8011e30 <HAL_SD_ConfigSpeedBusOperation+0x2a8>)
 8011c28:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8011c2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011c2c:	4318      	orrs	r0, r3
 8011c2e:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 8011c30:	2301      	movs	r3, #1
}
 8011c32:	4630      	mov	r0, r6
  hsd->State = HAL_SD_STATE_READY;
 8011c34:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8011c38:	b016      	add	sp, #88	; 0x58
 8011c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8011c3e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      status = HAL_ERROR;
 8011c40:	2601      	movs	r6, #1
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8011c42:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011c46:	63a3      	str	r3, [r4, #56]	; 0x38
      break;
 8011c48:	e7ca      	b.n	8011be0 <HAL_SD_ConfigSpeedBusOperation+0x58>
        if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 8011c4a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8011c4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011c50:	d005      	beq.n	8011c5e <HAL_SD_ConfigSpeedBusOperation+0xd6>
 8011c52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011c56:	d002      	beq.n	8011c5e <HAL_SD_ConfigSpeedBusOperation+0xd6>
            (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED) ||
 8011c58:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8011c5a:	2b01      	cmp	r3, #1
 8011c5c:	d1bf      	bne.n	8011bde <HAL_SD_ConfigSpeedBusOperation+0x56>
          if (SD_HighSpeed(hsd) != HAL_SD_ERROR_NONE)
 8011c5e:	4620      	mov	r0, r4
 8011c60:	f7ff f830 	bl	8010cc4 <SD_HighSpeed>
 8011c64:	2800      	cmp	r0, #0
 8011c66:	d0ba      	beq.n	8011bde <HAL_SD_ConfigSpeedBusOperation+0x56>
          hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8011c68:	6ba3      	ldr	r3, [r4, #56]	; 0x38
          status = HAL_ERROR;
 8011c6a:	2601      	movs	r6, #1
          hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8011c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011c70:	63a3      	str	r3, [r4, #56]	; 0x38
 8011c72:	e7b5      	b.n	8011be0 <HAL_SD_ConfigSpeedBusOperation+0x58>
      return HAL_TIMEOUT;
 8011c74:	2603      	movs	r6, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8011c76:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
      hsd->State = HAL_SD_STATE_READY;
 8011c7a:	2301      	movs	r3, #1
}
 8011c7c:	4630      	mov	r0, r6
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8011c7e:	63a2      	str	r2, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8011c80:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8011c84:	b016      	add	sp, #88	; 0x58
 8011c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    switch (SpeedMode)
 8011c8a:	2904      	cmp	r1, #4
 8011c8c:	d8d7      	bhi.n	8011c3e <HAL_SD_ConfigSpeedBusOperation+0xb6>
 8011c8e:	a301      	add	r3, pc, #4	; (adr r3, 8011c94 <HAL_SD_ConfigSpeedBusOperation+0x10c>)
 8011c90:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8011c94:	08011bc7 	.word	0x08011bc7
 8011c98:	08011bdf 	.word	0x08011bdf
 8011c9c:	08011ba7 	.word	0x08011ba7
 8011ca0:	08011ce1 	.word	0x08011ce1
 8011ca4:	08011ca9 	.word	0x08011ca9
        if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 8011ca8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8011caa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011cae:	d002      	beq.n	8011cb6 <HAL_SD_ConfigSpeedBusOperation+0x12e>
 8011cb0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8011cb2:	2b01      	cmp	r3, #1
 8011cb4:	d181      	bne.n	8011bba <HAL_SD_ConfigSpeedBusOperation+0x32>
  */
static uint32_t SD_DDR_Mode(SD_HandleTypeDef *hsd)
{
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  SDMMC_DataInitTypeDef sdmmc_datainitstructure;
  uint32_t SD_hs[16]  = {0};
 8011cb6:	2540      	movs	r5, #64	; 0x40
 8011cb8:	2100      	movs	r1, #0
 8011cba:	a806      	add	r0, sp, #24
 8011cbc:	462a      	mov	r2, r5
 8011cbe:	f00b ff16 	bl	801daee <memset>
  uint32_t count, loop = 0 ;
  uint32_t Timeout = HAL_GetTick();
 8011cc2:	f7f8 fc9d 	bl	800a600 <HAL_GetTick>

  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 8011cc6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  uint32_t Timeout = HAL_GetTick();
 8011cc8:	4607      	mov	r7, r0
  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 8011cca:	b372      	cbz	r2, 8011d2a <HAL_SD_ConfigSpeedBusOperation+0x1a2>
  {
     /* Standard Speed Card <= 12.5Mhz  */
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
  }

  if(hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8011ccc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8011cd0:	6823      	ldr	r3, [r4, #0]
 8011cd2:	d032      	beq.n	8011d3a <HAL_SD_ConfigSpeedBusOperation+0x1b2>
  HAL_StatusTypeDef status = HAL_OK;
 8011cd4:	2600      	movs	r6, #0
          hsd->Instance->CLKCR |=  SDMMC_CLKCR_BUSSPEED | SDMMC_CLKCR_DDR;
 8011cd6:	685a      	ldr	r2, [r3, #4]
 8011cd8:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 8011cdc:	605a      	str	r2, [r3, #4]
 8011cde:	e77f      	b.n	8011be0 <HAL_SD_ConfigSpeedBusOperation+0x58>
        if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 8011ce0:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8011ce2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011ce6:	d003      	beq.n	8011cf0 <HAL_SD_ConfigSpeedBusOperation+0x168>
 8011ce8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8011cea:	2b01      	cmp	r3, #1
 8011cec:	f47f af65 	bne.w	8011bba <HAL_SD_ConfigSpeedBusOperation+0x32>
          if (SD_UltraHighSpeed(hsd) != HAL_SD_ERROR_NONE)
 8011cf0:	4620      	mov	r0, r4
 8011cf2:	f7ff fa87 	bl	8011204 <SD_UltraHighSpeed>
 8011cf6:	b1b0      	cbz	r0, 8011d26 <HAL_SD_ConfigSpeedBusOperation+0x19e>
            hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8011cf8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
            status = HAL_ERROR;
 8011cfa:	2601      	movs	r6, #1
            hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8011cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011d00:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->Instance->CLKCR |= SDMMC_CLKCR_BUSSPEED;
 8011d02:	6822      	ldr	r2, [r4, #0]
 8011d04:	6853      	ldr	r3, [r2, #4]
 8011d06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011d0a:	6053      	str	r3, [r2, #4]
 8011d0c:	e768      	b.n	8011be0 <HAL_SD_ConfigSpeedBusOperation+0x58>
          hsd->Instance->CLKCR |= SDMMC_CLKCR_BUSSPEED;
 8011d0e:	6822      	ldr	r2, [r4, #0]
          if (SD_UltraHighSpeed(hsd) != HAL_SD_ERROR_NONE)
 8011d10:	4620      	mov	r0, r4
          hsd->Instance->CLKCR |= SDMMC_CLKCR_BUSSPEED;
 8011d12:	6853      	ldr	r3, [r2, #4]
 8011d14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011d18:	6053      	str	r3, [r2, #4]
          if (SD_UltraHighSpeed(hsd) != HAL_SD_ERROR_NONE)
 8011d1a:	f7ff fa73 	bl	8011204 <SD_UltraHighSpeed>
 8011d1e:	2800      	cmp	r0, #0
 8011d20:	f43f af5d 	beq.w	8011bde <HAL_SD_ConfigSpeedBusOperation+0x56>
 8011d24:	e79b      	b.n	8011c5e <HAL_SD_ConfigSpeedBusOperation+0xd6>
  HAL_StatusTypeDef status = HAL_OK;
 8011d26:	4606      	mov	r6, r0
 8011d28:	e7eb      	b.n	8011d02 <HAL_SD_ConfigSpeedBusOperation+0x17a>
 8011d2a:	6820      	ldr	r0, [r4, #0]
            hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8011d2c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8011d2e:	4603      	mov	r3, r0
            status = HAL_ERROR;
 8011d30:	2601      	movs	r6, #1
            hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8011d32:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8011d36:	63a2      	str	r2, [r4, #56]	; 0x38
 8011d38:	e7cd      	b.n	8011cd6 <HAL_SD_ConfigSpeedBusOperation+0x14e>
  {
    /* Initialize the Data control register */
    hsd->Instance->DCTRL = 0;
 8011d3a:	2200      	movs	r2, #0
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8011d3c:	4618      	mov	r0, r3
 8011d3e:	4629      	mov	r1, r5
    hsd->Instance->DCTRL = 0;
 8011d40:	62da      	str	r2, [r3, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8011d42:	f000 ff81 	bl	8012c48 <SDMMC_CmdBlockLength>

    if (errorstate != HAL_SD_ERROR_NONE)
 8011d46:	2800      	cmp	r0, #0
 8011d48:	d1ef      	bne.n	8011d2a <HAL_SD_ConfigSpeedBusOperation+0x1a2>
    {
      return errorstate;
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 8011d4a:	f04f 33ff 	mov.w	r3, #4294967295
    sdmmc_datainitstructure.DataLength    = 64U;
    sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B ;
 8011d4e:	2160      	movs	r1, #96	; 0x60
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8011d50:	2202      	movs	r2, #2
    sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8011d52:	9004      	str	r0, [sp, #16]
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 8011d54:	9300      	str	r3, [sp, #0]
    sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8011d56:	2301      	movs	r3, #1
    sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B ;
 8011d58:	9102      	str	r1, [sp, #8]

    if ( SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure) != HAL_OK)
 8011d5a:	4669      	mov	r1, sp
 8011d5c:	6820      	ldr	r0, [r4, #0]
    sdmmc_datainitstructure.DataLength    = 64U;
 8011d5e:	9501      	str	r5, [sp, #4]
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8011d60:	9203      	str	r2, [sp, #12]
    sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8011d62:	9305      	str	r3, [sp, #20]
    if ( SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure) != HAL_OK)
 8011d64:	f000 ff5a 	bl	8012c1c <SDMMC_ConfigData>
 8011d68:	4606      	mov	r6, r0
 8011d6a:	2800      	cmp	r0, #0
 8011d6c:	d1dd      	bne.n	8011d2a <HAL_SD_ConfigSpeedBusOperation+0x1a2>
    {
      return (HAL_SD_ERROR_GENERAL_UNKNOWN_ERR);
    }

    errorstate = SDMMC_CmdSwitch(hsd->Instance, SDMMC_DDR50_SWITCH_PATTERN);
 8011d6e:	4931      	ldr	r1, [pc, #196]	; (8011e34 <HAL_SD_ConfigSpeedBusOperation+0x2ac>)
 8011d70:	6820      	ldr	r0, [r4, #0]
 8011d72:	f001 fc2d 	bl	80135d0 <SDMMC_CmdSwitch>
    if(errorstate != HAL_SD_ERROR_NONE)
 8011d76:	4605      	mov	r5, r0
 8011d78:	2800      	cmp	r0, #0
 8011d7a:	d1d6      	bne.n	8011d2a <HAL_SD_ConfigSpeedBusOperation+0x1a2>
    {
      return errorstate;
    }

    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 8011d7c:	f240 582a 	movw	r8, #1322	; 0x52a
 8011d80:	e004      	b.n	8011d8c <HAL_SD_ConfigSpeedBusOperation+0x204>
          SD_hs[(8U*loop)+count]  = SDMMC_ReadFIFO(hsd->Instance);
        }
        loop ++;
      }

      if((HAL_GetTick()-Timeout) >=  SDMMC_DATATIMEOUT)
 8011d82:	f7f8 fc3d 	bl	800a600 <HAL_GetTick>
 8011d86:	1bc0      	subs	r0, r0, r7
 8011d88:	3001      	adds	r0, #1
 8011d8a:	d03f      	beq.n	8011e0c <HAL_SD_ConfigSpeedBusOperation+0x284>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 8011d8c:	6823      	ldr	r3, [r4, #0]
 8011d8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011d90:	4618      	mov	r0, r3
 8011d92:	ea12 0f08 	tst.w	r2, r8
 8011d96:	d113      	bne.n	8011dc0 <HAL_SD_ConfigSpeedBusOperation+0x238>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8011d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011d9a:	041b      	lsls	r3, r3, #16
 8011d9c:	d5f1      	bpl.n	8011d82 <HAL_SD_ConfigSpeedBusOperation+0x1fa>
 8011d9e:	016b      	lsls	r3, r5, #5
 8011da0:	aa06      	add	r2, sp, #24
 8011da2:	eb02 0a03 	add.w	sl, r2, r3
 8011da6:	aa0e      	add	r2, sp, #56	; 0x38
 8011da8:	eb02 0903 	add.w	r9, r2, r3
 8011dac:	e000      	b.n	8011db0 <HAL_SD_ConfigSpeedBusOperation+0x228>
 8011dae:	6820      	ldr	r0, [r4, #0]
          SD_hs[(8U*loop)+count]  = SDMMC_ReadFIFO(hsd->Instance);
 8011db0:	f000 ff12 	bl	8012bd8 <SDMMC_ReadFIFO>
 8011db4:	f84a 0b04 	str.w	r0, [sl], #4
        for (count = 0U; count < 8U; count++)
 8011db8:	45d1      	cmp	r9, sl
 8011dba:	d1f8      	bne.n	8011dae <HAL_SD_ConfigSpeedBusOperation+0x226>
        loop ++;
 8011dbc:	3501      	adds	r5, #1
 8011dbe:	e7e0      	b.n	8011d82 <HAL_SD_ConfigSpeedBusOperation+0x1fa>
        hsd->State= HAL_SD_STATE_READY;
        return HAL_SD_ERROR_TIMEOUT;
      }
    }

    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8011dc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011dc2:	0715      	lsls	r5, r2, #28
 8011dc4:	d430      	bmi.n	8011e28 <HAL_SD_ConfigSpeedBusOperation+0x2a0>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);

      return errorstate;
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8011dc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011dc8:	0791      	lsls	r1, r2, #30
 8011dca:	d42a      	bmi.n	8011e22 <HAL_SD_ConfigSpeedBusOperation+0x29a>

      errorstate = SDMMC_ERROR_DATA_CRC_FAIL;

      return errorstate;
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8011dcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011dce:	0692      	lsls	r2, r2, #26
 8011dd0:	d424      	bmi.n	8011e1c <HAL_SD_ConfigSpeedBusOperation+0x294>
    {
      /* No error flag set */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8011dd2:	4919      	ldr	r1, [pc, #100]	; (8011e38 <HAL_SD_ConfigSpeedBusOperation+0x2b0>)

    /* Test if the switch mode  is ok */
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 8011dd4:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8011dd8:	6399      	str	r1, [r3, #56]	; 0x38
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 8011dda:	0793      	lsls	r3, r2, #30
 8011ddc:	d5a6      	bpl.n	8011d2c <HAL_SD_ConfigSpeedBusOperation+0x1a4>
    else
    {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
      hsd->DriveTransceiver_1_8V_Callback(SET);
#else
      HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8011dde:	2001      	movs	r0, #1
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
#if defined (DLYB_SDMMC1) || defined (DLYB_SDMMC2)
      /* Enable DelayBlock Peripheral */
      /* SDMMC_CKin feedback clock selected as receive clock, for DDR50 */
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_0);
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 8011de0:	4d16      	ldr	r5, [pc, #88]	; (8011e3c <HAL_SD_ConfigSpeedBusOperation+0x2b4>)
      HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8011de2:	f7f8 fba7 	bl	800a534 <HAL_SD_DriveTransceiver_1_8V_Callback>
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_0);
 8011de6:	6822      	ldr	r2, [r4, #0]
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 8011de8:	4915      	ldr	r1, [pc, #84]	; (8011e40 <HAL_SD_ConfigSpeedBusOperation+0x2b8>)
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_0);
 8011dea:	6853      	ldr	r3, [r2, #4]
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 8011dec:	4815      	ldr	r0, [pc, #84]	; (8011e44 <HAL_SD_ConfigSpeedBusOperation+0x2bc>)
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_0);
 8011dee:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 8011df2:	42aa      	cmp	r2, r5
 8011df4:	bf08      	it	eq
 8011df6:	4608      	moveq	r0, r1
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_0);
 8011df8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011dfc:	6053      	str	r3, [r2, #4]
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 8011dfe:	f000 fe21 	bl	8012a44 <DelayBlock_Enable>
 8011e02:	4606      	mov	r6, r0
 8011e04:	2800      	cmp	r0, #0
 8011e06:	d190      	bne.n	8011d2a <HAL_SD_ConfigSpeedBusOperation+0x1a2>
 8011e08:	6823      	ldr	r3, [r4, #0]
 8011e0a:	e764      	b.n	8011cd6 <HAL_SD_ConfigSpeedBusOperation+0x14e>
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8011e0c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
        hsd->State= HAL_SD_STATE_READY;
 8011e10:	2301      	movs	r3, #1
 8011e12:	6820      	ldr	r0, [r4, #0]
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8011e14:	63a2      	str	r2, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8011e16:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8011e1a:	e787      	b.n	8011d2c <HAL_SD_ConfigSpeedBusOperation+0x1a4>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8011e1c:	2320      	movs	r3, #32
 8011e1e:	6383      	str	r3, [r0, #56]	; 0x38
 8011e20:	e784      	b.n	8011d2c <HAL_SD_ConfigSpeedBusOperation+0x1a4>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8011e22:	2302      	movs	r3, #2
 8011e24:	6383      	str	r3, [r0, #56]	; 0x38
 8011e26:	e781      	b.n	8011d2c <HAL_SD_ConfigSpeedBusOperation+0x1a4>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8011e28:	2208      	movs	r2, #8
 8011e2a:	639a      	str	r2, [r3, #56]	; 0x38
 8011e2c:	e753      	b.n	8011cd6 <HAL_SD_ConfigSpeedBusOperation+0x14e>
 8011e2e:	bf00      	nop
 8011e30:	1fe00fff 	.word	0x1fe00fff
 8011e34:	80ffff04 	.word	0x80ffff04
 8011e38:	18000f3a 	.word	0x18000f3a
 8011e3c:	52007000 	.word	0x52007000
 8011e40:	52008000 	.word	0x52008000
 8011e44:	48022800 	.word	0x48022800

08011e48 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8011e48:	6c81      	ldr	r1, [r0, #72]	; 0x48
{
 8011e4a:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8011e4c:	0409      	lsls	r1, r1, #16
{
 8011e4e:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8011e50:	6800      	ldr	r0, [r0, #0]
 8011e52:	f001 fb33 	bl	80134bc <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8011e56:	4601      	mov	r1, r0
 8011e58:	b120      	cbz	r0, 8011e64 <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
 8011e5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011e5c:	2000      	movs	r0, #0
 8011e5e:	4319      	orrs	r1, r3
 8011e60:	63a1      	str	r1, [r4, #56]	; 0x38
}
 8011e62:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8011e64:	6820      	ldr	r0, [r4, #0]
 8011e66:	f000 fed5 	bl	8012c14 <SDMMC_GetResponse>
 8011e6a:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 8011e6e:	bd10      	pop	{r4, pc}

08011e70 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011e72:	f8d0 6080 	ldr.w	r6, [r0, #128]	; 0x80
 8011e76:	2e20      	cmp	r6, #32
 8011e78:	d13d      	bne.n	8011ef6 <HAL_UART_Transmit_DMA+0x86>
  {
    if ((pData == NULL) || (Size == 0U))
 8011e7a:	2900      	cmp	r1, #0
 8011e7c:	d03d      	beq.n	8011efa <HAL_UART_Transmit_DMA+0x8a>
 8011e7e:	fab2 f782 	clz	r7, r2
 8011e82:	097f      	lsrs	r7, r7, #5
 8011e84:	2f00      	cmp	r7, #0
 8011e86:	d138      	bne.n	8011efa <HAL_UART_Transmit_DMA+0x8a>
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 8011e88:	f890 407c 	ldrb.w	r4, [r0, #124]	; 0x7c
 8011e8c:	2c01      	cmp	r4, #1
 8011e8e:	d032      	beq.n	8011ef6 <HAL_UART_Transmit_DMA+0x86>
 8011e90:	4613      	mov	r3, r2
 8011e92:	4605      	mov	r5, r0
    huart->pTxBuffPtr  = pData;
    huart->TxXferSize  = Size;
    huart->TxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011e94:	2221      	movs	r2, #33	; 0x21
    __HAL_LOCK(huart);
 8011e96:	2401      	movs	r4, #1

    if (huart->hdmatx != NULL)
 8011e98:	f8d0 e074 	ldr.w	lr, [r0, #116]	; 0x74
    huart->TxXferCount = Size;
 8011e9c:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
    huart->pTxBuffPtr  = pData;
 8011ea0:	6529      	str	r1, [r5, #80]	; 0x50
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011ea2:	f8c0 7088 	str.w	r7, [r0, #136]	; 0x88
    huart->TxXferSize  = Size;
 8011ea6:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011eaa:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    __HAL_LOCK(huart);
 8011eae:	f880 407c 	strb.w	r4, [r0, #124]	; 0x7c
 8011eb2:	6802      	ldr	r2, [r0, #0]
    if (huart->hdmatx != NULL)
 8011eb4:	f1be 0f00 	cmp.w	lr, #0
 8011eb8:	d012      	beq.n	8011ee0 <HAL_UART_Transmit_DMA+0x70>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8011eba:	f8df c058 	ldr.w	ip, [pc, #88]	; 8011f14 <HAL_UART_Transmit_DMA+0xa4>

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8011ebe:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8011ec0:	4813      	ldr	r0, [pc, #76]	; (8011f10 <HAL_UART_Transmit_DMA+0xa0>)
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8011ec2:	f8ce c040 	str.w	ip, [lr, #64]	; 0x40
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8011ec6:	f8df c050 	ldr.w	ip, [pc, #80]	; 8011f18 <HAL_UART_Transmit_DMA+0xa8>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8011eca:	f8ce 003c 	str.w	r0, [lr, #60]	; 0x3c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8011ece:	4670      	mov	r0, lr
      huart->hdmatx->XferAbortCallback = NULL;
 8011ed0:	f8ce 7050 	str.w	r7, [lr, #80]	; 0x50
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8011ed4:	f8ce c04c 	str.w	ip, [lr, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8011ed8:	f7f9 fb26 	bl	800b528 <HAL_DMA_Start_IT>
 8011edc:	b978      	cbnz	r0, 8011efe <HAL_UART_Transmit_DMA+0x8e>
 8011ede:	682a      	ldr	r2, [r5, #0]

        return HAL_ERROR;
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8011ee0:	2340      	movs	r3, #64	; 0x40

    __HAL_UNLOCK(huart);
 8011ee2:	2100      	movs	r1, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8011ee4:	6213      	str	r3, [r2, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);

    return HAL_OK;
 8011ee6:	4608      	mov	r0, r1
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011ee8:	6893      	ldr	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 8011eea:	f885 107c 	strb.w	r1, [r5, #124]	; 0x7c
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011eee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ef2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    return HAL_BUSY;
  }
}
 8011ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8011ef6:	2002      	movs	r0, #2
}
 8011ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8011efa:	2001      	movs	r0, #1
}
 8011efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011efe:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);
 8011f00:	f885 707c 	strb.w	r7, [r5, #124]	; 0x7c
        return HAL_ERROR;
 8011f04:	4620      	mov	r0, r4
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011f06:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        huart->gState = HAL_UART_STATE_READY;
 8011f0a:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
}
 8011f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f10:	08011ff1 	.word	0x08011ff1
 8011f14:	08012021 	.word	0x08012021
 8011f18:	08012079 	.word	0x08012079

08011f1c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8011f20:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
 8011f24:	2e20      	cmp	r6, #32
 8011f26:	d14b      	bne.n	8011fc0 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8011f28:	2900      	cmp	r1, #0
 8011f2a:	d04c      	beq.n	8011fc6 <HAL_UART_Receive_DMA+0xaa>
 8011f2c:	fab2 f782 	clz	r7, r2
 8011f30:	097f      	lsrs	r7, r7, #5
 8011f32:	2f00      	cmp	r7, #0
 8011f34:	d147      	bne.n	8011fc6 <HAL_UART_Receive_DMA+0xaa>
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 8011f36:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8011f3a:	2b01      	cmp	r3, #1
 8011f3c:	d040      	beq.n	8011fc0 <HAL_UART_Receive_DMA+0xa4>
 8011f3e:	4613      	mov	r3, r2
 8011f40:	2401      	movs	r4, #1

    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011f42:	2222      	movs	r2, #34	; 0x22

    if (huart->hdmarx != NULL)
 8011f44:	f8d0 e078 	ldr.w	lr, [r0, #120]	; 0x78
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011f48:	f8c0 7088 	str.w	r7, [r0, #136]	; 0x88
 8011f4c:	4605      	mov	r5, r0
    huart->pRxBuffPtr = pData;
 8011f4e:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxXferSize = Size;
 8011f50:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
    __HAL_LOCK(huart);
 8011f54:	f880 407c 	strb.w	r4, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011f58:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
 8011f5c:	f8d0 c000 	ldr.w	ip, [r0]
    if (huart->hdmarx != NULL)
 8011f60:	f1be 0f00 	cmp.w	lr, #0
 8011f64:	d015      	beq.n	8011f92 <HAL_UART_Receive_DMA+0x76>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8011f66:	481e      	ldr	r0, [pc, #120]	; (8011fe0 <HAL_UART_Receive_DMA+0xc4>)

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8011f68:	460a      	mov	r2, r1
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8011f6a:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8011fe4 <HAL_UART_Receive_DMA+0xc8>
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8011f6e:	f10c 0124 	add.w	r1, ip, #36	; 0x24
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8011f72:	f8df c074 	ldr.w	ip, [pc, #116]	; 8011fe8 <HAL_UART_Receive_DMA+0xcc>
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8011f76:	f8ce 003c 	str.w	r0, [lr, #60]	; 0x3c
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8011f7a:	4670      	mov	r0, lr
      huart->hdmarx->XferAbortCallback = NULL;
 8011f7c:	f8ce 7050 	str.w	r7, [lr, #80]	; 0x50
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8011f80:	f8ce 8040 	str.w	r8, [lr, #64]	; 0x40
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8011f84:	f8ce c04c 	str.w	ip, [lr, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8011f88:	f7f9 face 	bl	800b528 <HAL_DMA_Start_IT>
 8011f8c:	b9f0      	cbnz	r0, 8011fcc <HAL_UART_Receive_DMA+0xb0>
 8011f8e:	f8d5 c000 	ldr.w	ip, [r5]
      }
    }
    __HAL_UNLOCK(huart);

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011f92:	f8dc 3000 	ldr.w	r3, [ip]
    __HAL_UNLOCK(huart);
 8011f96:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    __HAL_UNLOCK(huart);
 8011f9c:	f885 007c 	strb.w	r0, [r5, #124]	; 0x7c
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011fa0:	f8cc 3000 	str.w	r3, [ip]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011fa4:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8011fa8:	f043 0301 	orr.w	r3, r3, #1
 8011fac:	f8cc 3008 	str.w	r3, [ip, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011fb0:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8011fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011fb8:	f8cc 3008 	str.w	r3, [ip, #8]
  }
  else
  {
    return HAL_BUSY;
  }
}
 8011fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8011fc0:	2002      	movs	r0, #2
}
 8011fc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 8011fc6:	2001      	movs	r0, #1
}
 8011fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011fcc:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);
 8011fce:	f885 707c 	strb.w	r7, [r5, #124]	; 0x7c
        return HAL_ERROR;
 8011fd2:	4620      	mov	r0, r4
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011fd4:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        huart->gState = HAL_UART_STATE_READY;
 8011fd8:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
        return HAL_ERROR;
 8011fdc:	e7f1      	b.n	8011fc2 <HAL_UART_Receive_DMA+0xa6>
 8011fde:	bf00      	nop
 8011fe0:	08012031 	.word	0x08012031
 8011fe4:	0801206d 	.word	0x0801206d
 8011fe8:	08012079 	.word	0x08012079

08011fec <HAL_UART_TxCpltCallback>:
 8011fec:	4770      	bx	lr
 8011fee:	bf00      	nop

08011ff0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011ff0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8011ff2:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011ff4:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8011ff6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011ffa:	d00c      	beq.n	8012016 <UART_DMATransmitCplt+0x26>
  {
    huart->TxXferCount = 0U;

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011ffc:	6803      	ldr	r3, [r0, #0]
    huart->TxXferCount = 0U;
 8011ffe:	2200      	movs	r2, #0
 8012000:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8012004:	689a      	ldr	r2, [r3, #8]
 8012006:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801200a:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801200c:	681a      	ldr	r2, [r3, #0]
 801200e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012012:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8012014:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8012016:	f7ff ffe9 	bl	8011fec <HAL_UART_TxCpltCallback>
}
 801201a:	bd08      	pop	{r3, pc}

0801201c <HAL_UART_TxHalfCpltCallback>:
 801201c:	4770      	bx	lr
 801201e:	bf00      	nop

08012020 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012020:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8012022:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8012024:	f7ff fffa 	bl	801201c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012028:	bd08      	pop	{r3, pc}
 801202a:	bf00      	nop

0801202c <HAL_UART_RxCpltCallback>:
 801202c:	4770      	bx	lr
 801202e:	bf00      	nop

08012030 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012030:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8012032:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012034:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8012036:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801203a:	d012      	beq.n	8012062 <UART_DMAReceiveCplt+0x32>
  {
    huart->RxXferCount = 0U;

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801203c:	6803      	ldr	r3, [r0, #0]
    huart->RxXferCount = 0U;
 801203e:	2200      	movs	r2, #0
    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8012040:	2120      	movs	r1, #32
    huart->RxXferCount = 0U;
 8012042:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012046:	681a      	ldr	r2, [r3, #0]
 8012048:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801204c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801204e:	689a      	ldr	r2, [r3, #8]
 8012050:	f022 0201 	bic.w	r2, r2, #1
 8012054:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012056:	689a      	ldr	r2, [r3, #8]
 8012058:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801205c:	609a      	str	r2, [r3, #8]
    huart->RxState = HAL_UART_STATE_READY;
 801205e:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8012062:	f7ff ffe3 	bl	801202c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012066:	bd08      	pop	{r3, pc}

08012068 <HAL_UART_RxHalfCpltCallback>:
 8012068:	4770      	bx	lr
 801206a:	bf00      	nop

0801206c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801206c:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 801206e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8012070:	f7ff fffa 	bl	8012068 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012074:	bd08      	pop	{r3, pc}
 8012076:	bf00      	nop

08012078 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8012078:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801207a:	6b83      	ldr	r3, [r0, #56]	; 0x38

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801207c:	681a      	ldr	r2, [r3, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 801207e:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8012082:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8012086:	6891      	ldr	r1, [r2, #8]
 8012088:	060d      	lsls	r5, r1, #24
 801208a:	d501      	bpl.n	8012090 <UART_DMAError+0x18>
 801208c:	2c21      	cmp	r4, #33	; 0x21
 801208e:	d01e      	beq.n	80120ce <UART_DMAError+0x56>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8012090:	6891      	ldr	r1, [r2, #8]
 8012092:	0649      	lsls	r1, r1, #25
 8012094:	d501      	bpl.n	801209a <UART_DMAError+0x22>
 8012096:	2822      	cmp	r0, #34	; 0x22
 8012098:	d009      	beq.n	80120ae <UART_DMAError+0x36>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801209a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801209e:	4618      	mov	r0, r3
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80120a0:	f042 0210 	orr.w	r2, r2, #16
 80120a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  HAL_UART_ErrorCallback(huart);
 80120a8:	f7f2 fa30 	bl	800450c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80120ac:	bd38      	pop	{r3, r4, r5, pc}
    huart->RxXferCount = 0U;
 80120ae:	2400      	movs	r4, #0
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80120b0:	490e      	ldr	r1, [pc, #56]	; (80120ec <UART_DMAError+0x74>)
  huart->RxState = HAL_UART_STATE_READY;
 80120b2:	2520      	movs	r5, #32
    huart->RxXferCount = 0U;
 80120b4:	f8a3 405e 	strh.w	r4, [r3, #94]	; 0x5e
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80120b8:	6810      	ldr	r0, [r2, #0]
 80120ba:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 80120be:	6010      	str	r0, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80120c0:	6890      	ldr	r0, [r2, #8]
 80120c2:	4001      	ands	r1, r0
 80120c4:	6091      	str	r1, [r2, #8]
  huart->RxISR = NULL;
 80120c6:	66dc      	str	r4, [r3, #108]	; 0x6c
  huart->RxState = HAL_UART_STATE_READY;
 80120c8:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
 80120cc:	e7e5      	b.n	801209a <UART_DMAError+0x22>
    huart->TxXferCount = 0U;
 80120ce:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 80120d0:	2420      	movs	r4, #32
    huart->TxXferCount = 0U;
 80120d2:	f8a3 1056 	strh.w	r1, [r3, #86]	; 0x56
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80120d6:	6811      	ldr	r1, [r2, #0]
 80120d8:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80120dc:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80120de:	6891      	ldr	r1, [r2, #8]
 80120e0:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 80120e4:	6091      	str	r1, [r2, #8]
  huart->gState = HAL_UART_STATE_READY;
 80120e6:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
 80120ea:	e7d1      	b.n	8012090 <UART_DMAError+0x18>
 80120ec:	effffffe 	.word	0xeffffffe

080120f0 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80120f0:	6802      	ldr	r2, [r0, #0]
{
 80120f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80120f6:	69d3      	ldr	r3, [r2, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80120f8:	f640 050f 	movw	r5, #2063	; 0x80f
{
 80120fc:	4604      	mov	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80120fe:	6810      	ldr	r0, [r2, #0]
  if (errorflags == 0U)
 8012100:	422b      	tst	r3, r5
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8012102:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 8012104:	d070      	beq.n	80121e8 <HAL_UART_IRQHandler+0xf8>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8012106:	4d73      	ldr	r5, [pc, #460]	; (80122d4 <HAL_UART_IRQHandler+0x1e4>)
 8012108:	400d      	ands	r5, r1
 801210a:	f000 808f 	beq.w	801222c <HAL_UART_IRQHandler+0x13c>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801210e:	07df      	lsls	r7, r3, #31
 8012110:	d509      	bpl.n	8012126 <HAL_UART_IRQHandler+0x36>
 8012112:	05c6      	lsls	r6, r0, #23
 8012114:	d507      	bpl.n	8012126 <HAL_UART_IRQHandler+0x36>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012116:	2601      	movs	r6, #1
 8012118:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801211a:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
 801211e:	f046 0601 	orr.w	r6, r6, #1
 8012122:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012126:	079f      	lsls	r7, r3, #30
 8012128:	f003 0604 	and.w	r6, r3, #4
 801212c:	f140 8093 	bpl.w	8012256 <HAL_UART_IRQHandler+0x166>
 8012130:	07cf      	lsls	r7, r1, #31
 8012132:	d50a      	bpl.n	801214a <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012134:	2702      	movs	r7, #2
 8012136:	6217      	str	r7, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012138:	f8d4 7088 	ldr.w	r7, [r4, #136]	; 0x88
 801213c:	f047 0704 	orr.w	r7, r7, #4
 8012140:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012144:	2e00      	cmp	r6, #0
 8012146:	f040 808c 	bne.w	8012262 <HAL_UART_IRQHandler+0x172>
    if (((isrflags & USART_ISR_ORE) != 0U)
 801214a:	071f      	lsls	r7, r3, #28
 801214c:	d505      	bpl.n	801215a <HAL_UART_IRQHandler+0x6a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801214e:	0686      	lsls	r6, r0, #26
 8012150:	f100 8097 	bmi.w	8012282 <HAL_UART_IRQHandler+0x192>
 8012154:	2d00      	cmp	r5, #0
 8012156:	f040 8094 	bne.w	8012282 <HAL_UART_IRQHandler+0x192>
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801215a:	051f      	lsls	r7, r3, #20
 801215c:	d50a      	bpl.n	8012174 <HAL_UART_IRQHandler+0x84>
 801215e:	0146      	lsls	r6, r0, #5
 8012160:	d508      	bpl.n	8012174 <HAL_UART_IRQHandler+0x84>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012162:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8012166:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8012168:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 801216c:	f045 0520 	orr.w	r5, r5, #32
 8012170:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012174:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 8012178:	2d00      	cmp	r5, #0
 801217a:	d06a      	beq.n	8012252 <HAL_UART_IRQHandler+0x162>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801217c:	069d      	lsls	r5, r3, #26
 801217e:	d507      	bpl.n	8012190 <HAL_UART_IRQHandler+0xa0>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8012180:	0680      	lsls	r0, r0, #26
 8012182:	f140 808b 	bpl.w	801229c <HAL_UART_IRQHandler+0x1ac>
        if (huart->RxISR != NULL)
 8012186:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8012188:	b113      	cbz	r3, 8012190 <HAL_UART_IRQHandler+0xa0>
          huart->RxISR(huart);
 801218a:	4620      	mov	r0, r4
 801218c:	4798      	blx	r3
 801218e:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 8012190:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8012194:	6891      	ldr	r1, [r2, #8]
 8012196:	064f      	lsls	r7, r1, #25
 8012198:	d403      	bmi.n	80121a2 <HAL_UART_IRQHandler+0xb2>
 801219a:	f015 0528 	ands.w	r5, r5, #40	; 0x28
 801219e:	f000 8093 	beq.w	80122c8 <HAL_UART_IRQHandler+0x1d8>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80121a2:	6811      	ldr	r1, [r2, #0]
  huart->RxState = HAL_UART_STATE_READY;
 80121a4:	2520      	movs	r5, #32
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80121a6:	4b4c      	ldr	r3, [pc, #304]	; (80122d8 <HAL_UART_IRQHandler+0x1e8>)
  huart->RxISR = NULL;
 80121a8:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80121aa:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 80121ae:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80121b0:	6891      	ldr	r1, [r2, #8]
 80121b2:	400b      	ands	r3, r1
 80121b4:	6093      	str	r3, [r2, #8]
  huart->RxState = HAL_UART_STATE_READY;
 80121b6:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80121ba:	6893      	ldr	r3, [r2, #8]
  huart->RxISR = NULL;
 80121bc:	66e0      	str	r0, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80121be:	065e      	lsls	r6, r3, #25
 80121c0:	d568      	bpl.n	8012294 <HAL_UART_IRQHandler+0x1a4>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80121c2:	6893      	ldr	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 80121c4:	6fa1      	ldr	r1, [r4, #120]	; 0x78
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80121c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80121ca:	6093      	str	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 80121cc:	2900      	cmp	r1, #0
 80121ce:	d061      	beq.n	8012294 <HAL_UART_IRQHandler+0x1a4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80121d0:	4b42      	ldr	r3, [pc, #264]	; (80122dc <HAL_UART_IRQHandler+0x1ec>)
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80121d2:	4608      	mov	r0, r1
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80121d4:	650b      	str	r3, [r1, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80121d6:	f7f9 fcdf 	bl	800bb98 <HAL_DMA_Abort_IT>
 80121da:	2800      	cmp	r0, #0
 80121dc:	d039      	beq.n	8012252 <HAL_UART_IRQHandler+0x162>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80121de:	6fa0      	ldr	r0, [r4, #120]	; 0x78
}
 80121e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80121e4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80121e6:	4718      	bx	r3
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80121e8:	069f      	lsls	r7, r3, #26
 80121ea:	d509      	bpl.n	8012200 <HAL_UART_IRQHandler+0x110>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80121ec:	0686      	lsls	r6, r0, #26
 80121ee:	d505      	bpl.n	80121fc <HAL_UART_IRQHandler+0x10c>
      if (huart->RxISR != NULL)
 80121f0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80121f2:	b373      	cbz	r3, 8012252 <HAL_UART_IRQHandler+0x162>
      huart->TxISR(huart);
 80121f4:	4620      	mov	r0, r4
}
 80121f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 80121fa:	4718      	bx	r3
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80121fc:	00cd      	lsls	r5, r1, #3
 80121fe:	d4f7      	bmi.n	80121f0 <HAL_UART_IRQHandler+0x100>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8012200:	02dd      	lsls	r5, r3, #11
 8012202:	d409      	bmi.n	8012218 <HAL_UART_IRQHandler+0x128>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8012204:	061e      	lsls	r6, r3, #24
 8012206:	d51a      	bpl.n	801223e <HAL_UART_IRQHandler+0x14e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8012208:	0605      	lsls	r5, r0, #24
 801220a:	d516      	bpl.n	801223a <HAL_UART_IRQHandler+0x14a>
    if (huart->TxISR != NULL)
 801220c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801220e:	b303      	cbz	r3, 8012252 <HAL_UART_IRQHandler+0x162>
      huart->TxISR(huart);
 8012210:	4620      	mov	r0, r4
}
 8012212:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 8012216:	4718      	bx	r3
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8012218:	024f      	lsls	r7, r1, #9
 801221a:	d5f3      	bpl.n	8012204 <HAL_UART_IRQHandler+0x114>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801221c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8012220:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8012222:	6213      	str	r3, [r2, #32]
}
 8012224:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8012228:	f000 bc06 	b.w	8012a38 <HAL_UARTEx_WakeupCallback>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801222c:	4e2c      	ldr	r6, [pc, #176]	; (80122e0 <HAL_UART_IRQHandler+0x1f0>)
 801222e:	4230      	tst	r0, r6
 8012230:	d0e6      	beq.n	8012200 <HAL_UART_IRQHandler+0x110>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012232:	07df      	lsls	r7, r3, #31
 8012234:	f57f af77 	bpl.w	8012126 <HAL_UART_IRQHandler+0x36>
 8012238:	e76b      	b.n	8012112 <HAL_UART_IRQHandler+0x22>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801223a:	020f      	lsls	r7, r1, #8
 801223c:	d4e6      	bmi.n	801220c <HAL_UART_IRQHandler+0x11c>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801223e:	065e      	lsls	r6, r3, #25
 8012240:	d501      	bpl.n	8012246 <HAL_UART_IRQHandler+0x156>
 8012242:	0645      	lsls	r5, r0, #25
 8012244:	d42e      	bmi.n	80122a4 <HAL_UART_IRQHandler+0x1b4>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8012246:	0219      	lsls	r1, r3, #8
 8012248:	d414      	bmi.n	8012274 <HAL_UART_IRQHandler+0x184>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801224a:	01db      	lsls	r3, r3, #7
 801224c:	d501      	bpl.n	8012252 <HAL_UART_IRQHandler+0x162>
 801224e:	2800      	cmp	r0, #0
 8012250:	db35      	blt.n	80122be <HAL_UART_IRQHandler+0x1ce>
}
 8012252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012256:	2e00      	cmp	r6, #0
 8012258:	f43f af77 	beq.w	801214a <HAL_UART_IRQHandler+0x5a>
 801225c:	07ce      	lsls	r6, r1, #31
 801225e:	f57f af74 	bpl.w	801214a <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012262:	2604      	movs	r6, #4
 8012264:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012266:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
 801226a:	f046 0602 	orr.w	r6, r6, #2
 801226e:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
 8012272:	e76a      	b.n	801214a <HAL_UART_IRQHandler+0x5a>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8012274:	0042      	lsls	r2, r0, #1
 8012276:	d5e8      	bpl.n	801224a <HAL_UART_IRQHandler+0x15a>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8012278:	4620      	mov	r0, r4
}
 801227a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801227e:	f000 bbdf 	b.w	8012a40 <HAL_UARTEx_TxFifoEmptyCallback>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012282:	2508      	movs	r5, #8
 8012284:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8012286:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 801228a:	f045 0508 	orr.w	r5, r5, #8
 801228e:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 8012292:	e762      	b.n	801215a <HAL_UART_IRQHandler+0x6a>
            HAL_UART_ErrorCallback(huart);
 8012294:	4620      	mov	r0, r4
 8012296:	f7f2 f939 	bl	800450c <HAL_UART_ErrorCallback>
 801229a:	e7da      	b.n	8012252 <HAL_UART_IRQHandler+0x162>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801229c:	00cb      	lsls	r3, r1, #3
 801229e:	f57f af77 	bpl.w	8012190 <HAL_UART_IRQHandler+0xa0>
 80122a2:	e770      	b.n	8012186 <HAL_UART_IRQHandler+0x96>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80122a4:	6813      	ldr	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80122a6:	2520      	movs	r5, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80122a8:	2100      	movs	r1, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80122aa:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80122ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80122b0:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 80122b2:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  huart->TxISR = NULL;
 80122b6:	6721      	str	r1, [r4, #112]	; 0x70
  HAL_UART_TxCpltCallback(huart);
 80122b8:	f7ff fe98 	bl	8011fec <HAL_UART_TxCpltCallback>
 80122bc:	e7c9      	b.n	8012252 <HAL_UART_IRQHandler+0x162>
    HAL_UARTEx_RxFifoFullCallback(huart);
 80122be:	4620      	mov	r0, r4
}
 80122c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 80122c4:	f000 bbba 	b.w	8012a3c <HAL_UARTEx_RxFifoFullCallback>
        HAL_UART_ErrorCallback(huart);
 80122c8:	4620      	mov	r0, r4
 80122ca:	f7f2 f91f 	bl	800450c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80122ce:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 80122d2:	e7be      	b.n	8012252 <HAL_UART_IRQHandler+0x162>
 80122d4:	10000001 	.word	0x10000001
 80122d8:	effffffe 	.word	0xeffffffe
 80122dc:	080122e5 	.word	0x080122e5
 80122e0:	04000120 	.word	0x04000120

080122e4 <UART_DMAAbortOnError>:
{
 80122e4:	b508      	push	{r3, lr}
  huart->RxXferCount = 0U;
 80122e6:	2200      	movs	r2, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80122e8:	6b83      	ldr	r3, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 80122ea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  HAL_UART_ErrorCallback(huart);
 80122ee:	4618      	mov	r0, r3
  huart->TxXferCount = 0U;
 80122f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 80122f4:	f7f2 f90a 	bl	800450c <HAL_UART_ErrorCallback>
}
 80122f8:	bd08      	pop	{r3, pc}
 80122fa:	bf00      	nop

080122fc <HAL_UART_GetState>:
  temp1 = huart->gState;
 80122fc:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
  temp2 = huart->RxState;
 8012300:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
}
 8012304:	4310      	orrs	r0, r2
 8012306:	4770      	bx	lr

08012308 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012308:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801230a:	07da      	lsls	r2, r3, #31
{
 801230c:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801230e:	d506      	bpl.n	801231e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012310:	6801      	ldr	r1, [r0, #0]
 8012312:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8012314:	684a      	ldr	r2, [r1, #4]
 8012316:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 801231a:	4322      	orrs	r2, r4
 801231c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801231e:	079c      	lsls	r4, r3, #30
 8012320:	d506      	bpl.n	8012330 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012322:	6801      	ldr	r1, [r0, #0]
 8012324:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8012326:	684a      	ldr	r2, [r1, #4]
 8012328:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 801232c:	4322      	orrs	r2, r4
 801232e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012330:	0759      	lsls	r1, r3, #29
 8012332:	d506      	bpl.n	8012342 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012334:	6801      	ldr	r1, [r0, #0]
 8012336:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8012338:	684a      	ldr	r2, [r1, #4]
 801233a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801233e:	4322      	orrs	r2, r4
 8012340:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012342:	071a      	lsls	r2, r3, #28
 8012344:	d506      	bpl.n	8012354 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012346:	6801      	ldr	r1, [r0, #0]
 8012348:	6b84      	ldr	r4, [r0, #56]	; 0x38
 801234a:	684a      	ldr	r2, [r1, #4]
 801234c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8012350:	4322      	orrs	r2, r4
 8012352:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012354:	06dc      	lsls	r4, r3, #27
 8012356:	d506      	bpl.n	8012366 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012358:	6801      	ldr	r1, [r0, #0]
 801235a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 801235c:	688a      	ldr	r2, [r1, #8]
 801235e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8012362:	4322      	orrs	r2, r4
 8012364:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8012366:	0699      	lsls	r1, r3, #26
 8012368:	d506      	bpl.n	8012378 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801236a:	6801      	ldr	r1, [r0, #0]
 801236c:	6c04      	ldr	r4, [r0, #64]	; 0x40
 801236e:	688a      	ldr	r2, [r1, #8]
 8012370:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8012374:	4322      	orrs	r2, r4
 8012376:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012378:	065a      	lsls	r2, r3, #25
 801237a:	d50a      	bpl.n	8012392 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801237c:	6801      	ldr	r1, [r0, #0]
 801237e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8012380:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012382:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012386:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 801238a:	ea42 0204 	orr.w	r2, r2, r4
 801238e:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012390:	d00b      	beq.n	80123aa <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012392:	061b      	lsls	r3, r3, #24
 8012394:	d506      	bpl.n	80123a4 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012396:	6802      	ldr	r2, [r0, #0]
 8012398:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 801239a:	6853      	ldr	r3, [r2, #4]
 801239c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80123a0:	430b      	orrs	r3, r1
 80123a2:	6053      	str	r3, [r2, #4]
}
 80123a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80123a8:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80123aa:	684a      	ldr	r2, [r1, #4]
 80123ac:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80123ae:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80123b2:	4322      	orrs	r2, r4
 80123b4:	604a      	str	r2, [r1, #4]
 80123b6:	e7ec      	b.n	8012392 <UART_AdvFeatureConfig+0x8a>

080123b8 <HAL_UART_Init>:
  if (huart == NULL)
 80123b8:	2800      	cmp	r0, #0
 80123ba:	f000 80d2 	beq.w	8012562 <HAL_UART_Init+0x1aa>
  if (huart->gState == HAL_UART_STATE_RESET)
 80123be:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
{
 80123c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80123c6:	4604      	mov	r4, r0
 80123c8:	b087      	sub	sp, #28
  if (huart->gState == HAL_UART_STATE_RESET)
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d058      	beq.n	8012480 <HAL_UART_Init+0xc8>
  __HAL_UART_DISABLE(huart);
 80123ce:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80123d0:	2024      	movs	r0, #36	; 0x24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80123d2:	6921      	ldr	r1, [r4, #16]
 80123d4:	68a2      	ldr	r2, [r4, #8]
  huart->gState = HAL_UART_STATE_BUSY;
 80123d6:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80123da:	430a      	orrs	r2, r1
  __HAL_UART_DISABLE(huart);
 80123dc:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80123de:	6960      	ldr	r0, [r4, #20]
 80123e0:	69e1      	ldr	r1, [r4, #28]
  __HAL_UART_DISABLE(huart);
 80123e2:	f025 0501 	bic.w	r5, r5, #1
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80123e6:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80123e8:	48a1      	ldr	r0, [pc, #644]	; (8012670 <HAL_UART_Init+0x2b8>)
  __HAL_UART_DISABLE(huart);
 80123ea:	601d      	str	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80123ec:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80123ee:	681e      	ldr	r6, [r3, #0]
  tmpreg |= (uint32_t)huart->FifoMode;
 80123f0:	6e65      	ldr	r5, [r4, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80123f2:	4030      	ands	r0, r6
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80123f4:	68e7      	ldr	r7, [r4, #12]
  tmpreg |= (uint32_t)huart->FifoMode;
 80123f6:	432a      	orrs	r2, r5
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80123f8:	f8d4 c018 	ldr.w	ip, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80123fc:	4e9d      	ldr	r6, [pc, #628]	; (8012674 <HAL_UART_Init+0x2bc>)
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80123fe:	4302      	orrs	r2, r0
 8012400:	6a65      	ldr	r5, [r4, #36]	; 0x24
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012402:	42b3      	cmp	r3, r6
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012404:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012406:	685a      	ldr	r2, [r3, #4]
 8012408:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 801240c:	ea42 0207 	orr.w	r2, r2, r7
 8012410:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012412:	f000 808b 	beq.w	801252c <HAL_UART_Init+0x174>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012416:	689e      	ldr	r6, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8012418:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801241a:	4897      	ldr	r0, [pc, #604]	; (8012678 <HAL_UART_Init+0x2c0>)
    tmpreg |= huart->Init.OneBitSampling;
 801241c:	ea4c 0202 	orr.w	r2, ip, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012420:	4030      	ands	r0, r6
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012422:	4e96      	ldr	r6, [pc, #600]	; (801267c <HAL_UART_Init+0x2c4>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012424:	4302      	orrs	r2, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012426:	42b3      	cmp	r3, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012428:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801242a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801242c:	f022 020f 	bic.w	r2, r2, #15
 8012430:	ea42 0205 	orr.w	r2, r2, r5
 8012434:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012436:	d028      	beq.n	801248a <HAL_UART_Init+0xd2>
 8012438:	4a91      	ldr	r2, [pc, #580]	; (8012680 <HAL_UART_Init+0x2c8>)
 801243a:	4293      	cmp	r3, r2
 801243c:	f000 810e 	beq.w	801265c <HAL_UART_Init+0x2a4>
 8012440:	4a90      	ldr	r2, [pc, #576]	; (8012684 <HAL_UART_Init+0x2cc>)
 8012442:	4293      	cmp	r3, r2
 8012444:	f000 8100 	beq.w	8012648 <HAL_UART_Init+0x290>
 8012448:	4a8f      	ldr	r2, [pc, #572]	; (8012688 <HAL_UART_Init+0x2d0>)
 801244a:	4293      	cmp	r3, r2
 801244c:	f000 829e 	beq.w	801298c <HAL_UART_Init+0x5d4>
 8012450:	4a8e      	ldr	r2, [pc, #568]	; (801268c <HAL_UART_Init+0x2d4>)
 8012452:	4293      	cmp	r3, r2
 8012454:	f000 82a4 	beq.w	80129a0 <HAL_UART_Init+0x5e8>
 8012458:	4a8d      	ldr	r2, [pc, #564]	; (8012690 <HAL_UART_Init+0x2d8>)
 801245a:	4293      	cmp	r3, r2
 801245c:	f000 82aa 	beq.w	80129b4 <HAL_UART_Init+0x5fc>
 8012460:	4a8c      	ldr	r2, [pc, #560]	; (8012694 <HAL_UART_Init+0x2dc>)
 8012462:	4293      	cmp	r3, r2
 8012464:	f000 82c5 	beq.w	80129f2 <HAL_UART_Init+0x63a>
 8012468:	4a8b      	ldr	r2, [pc, #556]	; (8012698 <HAL_UART_Init+0x2e0>)
 801246a:	4293      	cmp	r3, r2
 801246c:	d16f      	bne.n	801254e <HAL_UART_Init+0x196>
 801246e:	4b8b      	ldr	r3, [pc, #556]	; (801269c <HAL_UART_Init+0x2e4>)
 8012470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012472:	f003 0307 	and.w	r3, r3, #7
 8012476:	2b05      	cmp	r3, #5
 8012478:	d869      	bhi.n	801254e <HAL_UART_Init+0x196>
 801247a:	4a89      	ldr	r2, [pc, #548]	; (80126a0 <HAL_UART_Init+0x2e8>)
 801247c:	5cd3      	ldrb	r3, [r2, r3]
 801247e:	e00c      	b.n	801249a <HAL_UART_Init+0xe2>
    huart->Lock = HAL_UNLOCKED;
 8012480:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 8012484:	f7f2 ff66 	bl	8005354 <HAL_UART_MspInit>
 8012488:	e7a1      	b.n	80123ce <HAL_UART_Init+0x16>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801248a:	4b84      	ldr	r3, [pc, #528]	; (801269c <HAL_UART_Init+0x2e4>)
 801248c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801248e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012492:	2b28      	cmp	r3, #40	; 0x28
 8012494:	d85b      	bhi.n	801254e <HAL_UART_Init+0x196>
 8012496:	4a83      	ldr	r2, [pc, #524]	; (80126a4 <HAL_UART_Init+0x2ec>)
 8012498:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801249a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 801249e:	f000 810f 	beq.w	80126c0 <HAL_UART_Init+0x308>
    switch (clocksource)
 80124a2:	2b40      	cmp	r3, #64	; 0x40
 80124a4:	d853      	bhi.n	801254e <HAL_UART_Init+0x196>
 80124a6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80124aa:	0209      	.short	0x0209
 80124ac:	0052020c 	.word	0x0052020c
 80124b0:	02040052 	.word	0x02040052
 80124b4:	00520052 	.word	0x00520052
 80124b8:	01fc0052 	.word	0x01fc0052
 80124bc:	00520052 	.word	0x00520052
 80124c0:	00520052 	.word	0x00520052
 80124c4:	00520052 	.word	0x00520052
 80124c8:	01d00052 	.word	0x01d00052
 80124cc:	00520052 	.word	0x00520052
 80124d0:	00520052 	.word	0x00520052
 80124d4:	00520052 	.word	0x00520052
 80124d8:	00520052 	.word	0x00520052
 80124dc:	00520052 	.word	0x00520052
 80124e0:	00520052 	.word	0x00520052
 80124e4:	00520052 	.word	0x00520052
 80124e8:	02120052 	.word	0x02120052
 80124ec:	00520052 	.word	0x00520052
 80124f0:	00520052 	.word	0x00520052
 80124f4:	00520052 	.word	0x00520052
 80124f8:	00520052 	.word	0x00520052
 80124fc:	00520052 	.word	0x00520052
 8012500:	00520052 	.word	0x00520052
 8012504:	00520052 	.word	0x00520052
 8012508:	00520052 	.word	0x00520052
 801250c:	00520052 	.word	0x00520052
 8012510:	00520052 	.word	0x00520052
 8012514:	00520052 	.word	0x00520052
 8012518:	00520052 	.word	0x00520052
 801251c:	00520052 	.word	0x00520052
 8012520:	00520052 	.word	0x00520052
 8012524:	00520052 	.word	0x00520052
 8012528:	020f0052 	.word	0x020f0052
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801252c:	6898      	ldr	r0, [r3, #8]
 801252e:	4a52      	ldr	r2, [pc, #328]	; (8012678 <HAL_UART_Init+0x2c0>)
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012530:	495a      	ldr	r1, [pc, #360]	; (801269c <HAL_UART_Init+0x2e4>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012532:	4002      	ands	r2, r0
 8012534:	ea42 020c 	orr.w	r2, r2, ip
 8012538:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801253a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801253c:	f022 020f 	bic.w	r2, r2, #15
 8012540:	432a      	orrs	r2, r5
 8012542:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012544:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 8012546:	f003 0307 	and.w	r3, r3, #7
 801254a:	2b05      	cmp	r3, #5
 801254c:	d90b      	bls.n	8012566 <HAL_UART_Init+0x1ae>
  huart->RxISR = NULL;
 801254e:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8012550:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    return HAL_ERROR;
 8012554:	2001      	movs	r0, #1
  huart->TxISR = NULL;
 8012556:	6723      	str	r3, [r4, #112]	; 0x70
  huart->RxISR = NULL;
 8012558:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
}
 801255c:	b007      	add	sp, #28
 801255e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_ERROR;
 8012562:	2001      	movs	r0, #1
}
 8012564:	4770      	bx	lr
    switch (clocksource)
 8012566:	4a50      	ldr	r2, [pc, #320]	; (80126a8 <HAL_UART_Init+0x2f0>)
 8012568:	5cd3      	ldrb	r3, [r2, r3]
 801256a:	2b08      	cmp	r3, #8
 801256c:	f000 823c 	beq.w	80129e8 <HAL_UART_Init+0x630>
 8012570:	f240 822a 	bls.w	80129c8 <HAL_UART_Init+0x610>
 8012574:	2b20      	cmp	r3, #32
 8012576:	f000 81ac 	beq.w	80128d2 <HAL_UART_Init+0x51a>
 801257a:	2b40      	cmp	r3, #64	; 0x40
 801257c:	f000 8245 	beq.w	8012a0a <HAL_UART_Init+0x652>
 8012580:	2b10      	cmp	r3, #16
 8012582:	d1e4      	bne.n	801254e <HAL_UART_Init+0x196>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012584:	680b      	ldr	r3, [r1, #0]
 8012586:	069f      	lsls	r7, r3, #26
 8012588:	f140 8242 	bpl.w	8012a10 <HAL_UART_Init+0x658>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801258c:	680b      	ldr	r3, [r1, #0]
 801258e:	4847      	ldr	r0, [pc, #284]	; (80126ac <HAL_UART_Init+0x2f4>)
 8012590:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8012594:	40d8      	lsrs	r0, r3
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8012596:	4b46      	ldr	r3, [pc, #280]	; (80126b0 <HAL_UART_Init+0x2f8>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012598:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801259a:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801259e:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80125a2:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80125a6:	428b      	cmp	r3, r1
 80125a8:	d3d1      	bcc.n	801254e <HAL_UART_Init+0x196>
 80125aa:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 80125ae:	d8ce      	bhi.n	801254e <HAL_UART_Init+0x196>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80125b0:	2500      	movs	r5, #0
 80125b2:	2300      	movs	r3, #0
 80125b4:	0877      	lsrs	r7, r6, #1
 80125b6:	4629      	mov	r1, r5
 80125b8:	f7ed fefa 	bl	80003b0 <__aeabi_uldivmod>
 80125bc:	4632      	mov	r2, r6
 80125be:	ea4f 2901 	mov.w	r9, r1, lsl #8
 80125c2:	462b      	mov	r3, r5
 80125c4:	ea4f 2800 	mov.w	r8, r0, lsl #8
 80125c8:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
 80125cc:	eb18 0007 	adds.w	r0, r8, r7
 80125d0:	f149 0100 	adc.w	r1, r9, #0
 80125d4:	f7ed feec 	bl	80003b0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80125d8:	4b36      	ldr	r3, [pc, #216]	; (80126b4 <HAL_UART_Init+0x2fc>)
 80125da:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 80125de:	429a      	cmp	r2, r3
 80125e0:	d8b5      	bhi.n	801254e <HAL_UART_Init+0x196>
          huart->Instance->BRR = usartdiv;
 80125e2:	6822      	ldr	r2, [r4, #0]
  huart->NbRxDataToProcess = 1;
 80125e4:	f04f 1301 	mov.w	r3, #65537	; 0x10001
          huart->Instance->BRR = usartdiv;
 80125e8:	60d0      	str	r0, [r2, #12]
  huart->NbRxDataToProcess = 1;
 80125ea:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 80125ec:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80125f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	f040 8151 	bne.w	801289a <HAL_UART_Init+0x4e2>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80125f8:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80125fa:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80125fc:	685a      	ldr	r2, [r3, #4]
 80125fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8012602:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012604:	689a      	ldr	r2, [r3, #8]
 8012606:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801260a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 801260c:	681a      	ldr	r2, [r3, #0]
 801260e:	f042 0201 	orr.w	r2, r2, #1
 8012612:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012614:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  tickstart = HAL_GetTick();
 8012618:	f7f7 fff2 	bl	800a600 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801261c:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 801261e:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012620:	681a      	ldr	r2, [r3, #0]
 8012622:	0711      	lsls	r1, r2, #28
 8012624:	f100 80d4 	bmi.w	80127d0 <HAL_UART_Init+0x418>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012628:	681a      	ldr	r2, [r3, #0]
 801262a:	0750      	lsls	r0, r2, #29
 801262c:	f100 80f9 	bmi.w	8012822 <HAL_UART_Init+0x46a>
  __HAL_UNLOCK(huart);
 8012630:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8012632:	2220      	movs	r2, #32
  return HAL_OK;
 8012634:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8012636:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 801263a:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801263e:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
}
 8012642:	b007      	add	sp, #28
 8012644:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012648:	4b14      	ldr	r3, [pc, #80]	; (801269c <HAL_UART_Init+0x2e4>)
 801264a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801264c:	f003 0307 	and.w	r3, r3, #7
 8012650:	2b05      	cmp	r3, #5
 8012652:	f63f af7c 	bhi.w	801254e <HAL_UART_Init+0x196>
 8012656:	4a18      	ldr	r2, [pc, #96]	; (80126b8 <HAL_UART_Init+0x300>)
 8012658:	5cd3      	ldrb	r3, [r2, r3]
 801265a:	e71e      	b.n	801249a <HAL_UART_Init+0xe2>
 801265c:	4b0f      	ldr	r3, [pc, #60]	; (801269c <HAL_UART_Init+0x2e4>)
 801265e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012660:	f003 0307 	and.w	r3, r3, #7
 8012664:	2b05      	cmp	r3, #5
 8012666:	f63f af72 	bhi.w	801254e <HAL_UART_Init+0x196>
 801266a:	4a14      	ldr	r2, [pc, #80]	; (80126bc <HAL_UART_Init+0x304>)
 801266c:	5cd3      	ldrb	r3, [r2, r3]
 801266e:	e714      	b.n	801249a <HAL_UART_Init+0xe2>
 8012670:	cfff69f3 	.word	0xcfff69f3
 8012674:	58000c00 	.word	0x58000c00
 8012678:	11fff4ff 	.word	0x11fff4ff
 801267c:	40011000 	.word	0x40011000
 8012680:	40004400 	.word	0x40004400
 8012684:	40004800 	.word	0x40004800
 8012688:	40004c00 	.word	0x40004c00
 801268c:	40005000 	.word	0x40005000
 8012690:	40011400 	.word	0x40011400
 8012694:	40007800 	.word	0x40007800
 8012698:	40007c00 	.word	0x40007c00
 801269c:	58024400 	.word	0x58024400
 80126a0:	08021408 	.word	0x08021408
 80126a4:	080213dc 	.word	0x080213dc
 80126a8:	08021410 	.word	0x08021410
 80126ac:	03d09000 	.word	0x03d09000
 80126b0:	08021418 	.word	0x08021418
 80126b4:	000ffcff 	.word	0x000ffcff
 80126b8:	08021408 	.word	0x08021408
 80126bc:	08021408 	.word	0x08021408
    switch (clocksource)
 80126c0:	2b40      	cmp	r3, #64	; 0x40
 80126c2:	f63f af44 	bhi.w	801254e <HAL_UART_Init+0x196>
 80126c6:	a201      	add	r2, pc, #4	; (adr r2, 80126cc <HAL_UART_Init+0x314>)
 80126c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126cc:	08012943 	.word	0x08012943
 80126d0:	0801293d 	.word	0x0801293d
 80126d4:	0801254f 	.word	0x0801254f
 80126d8:	0801254f 	.word	0x0801254f
 80126dc:	08012949 	.word	0x08012949
 80126e0:	0801254f 	.word	0x0801254f
 80126e4:	0801254f 	.word	0x0801254f
 80126e8:	0801254f 	.word	0x0801254f
 80126ec:	0801292f 	.word	0x0801292f
 80126f0:	0801254f 	.word	0x0801254f
 80126f4:	0801254f 	.word	0x0801254f
 80126f8:	0801254f 	.word	0x0801254f
 80126fc:	0801254f 	.word	0x0801254f
 8012700:	0801254f 	.word	0x0801254f
 8012704:	0801254f 	.word	0x0801254f
 8012708:	0801254f 	.word	0x0801254f
 801270c:	080128d7 	.word	0x080128d7
 8012710:	0801254f 	.word	0x0801254f
 8012714:	0801254f 	.word	0x0801254f
 8012718:	0801254f 	.word	0x0801254f
 801271c:	0801254f 	.word	0x0801254f
 8012720:	0801254f 	.word	0x0801254f
 8012724:	0801254f 	.word	0x0801254f
 8012728:	0801254f 	.word	0x0801254f
 801272c:	0801254f 	.word	0x0801254f
 8012730:	0801254f 	.word	0x0801254f
 8012734:	0801254f 	.word	0x0801254f
 8012738:	0801254f 	.word	0x0801254f
 801273c:	0801254f 	.word	0x0801254f
 8012740:	0801254f 	.word	0x0801254f
 8012744:	0801254f 	.word	0x0801254f
 8012748:	0801254f 	.word	0x0801254f
 801274c:	08012953 	.word	0x08012953
 8012750:	0801254f 	.word	0x0801254f
 8012754:	0801254f 	.word	0x0801254f
 8012758:	0801254f 	.word	0x0801254f
 801275c:	0801254f 	.word	0x0801254f
 8012760:	0801254f 	.word	0x0801254f
 8012764:	0801254f 	.word	0x0801254f
 8012768:	0801254f 	.word	0x0801254f
 801276c:	0801254f 	.word	0x0801254f
 8012770:	0801254f 	.word	0x0801254f
 8012774:	0801254f 	.word	0x0801254f
 8012778:	0801254f 	.word	0x0801254f
 801277c:	0801254f 	.word	0x0801254f
 8012780:	0801254f 	.word	0x0801254f
 8012784:	0801254f 	.word	0x0801254f
 8012788:	0801254f 	.word	0x0801254f
 801278c:	0801254f 	.word	0x0801254f
 8012790:	0801254f 	.word	0x0801254f
 8012794:	0801254f 	.word	0x0801254f
 8012798:	0801254f 	.word	0x0801254f
 801279c:	0801254f 	.word	0x0801254f
 80127a0:	0801254f 	.word	0x0801254f
 80127a4:	0801254f 	.word	0x0801254f
 80127a8:	0801254f 	.word	0x0801254f
 80127ac:	0801254f 	.word	0x0801254f
 80127b0:	0801254f 	.word	0x0801254f
 80127b4:	0801254f 	.word	0x0801254f
 80127b8:	0801254f 	.word	0x0801254f
 80127bc:	0801254f 	.word	0x0801254f
 80127c0:	0801254f 	.word	0x0801254f
 80127c4:	0801254f 	.word	0x0801254f
 80127c8:	0801254f 	.word	0x0801254f
 80127cc:	08012957 	.word	0x08012957
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80127d0:	69dd      	ldr	r5, [r3, #28]
 80127d2:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 80127d6:	f47f af27 	bne.w	8012628 <HAL_UART_Init+0x270>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80127da:	f7f7 ff11 	bl	800a600 <HAL_GetTick>
 80127de:	1b80      	subs	r0, r0, r6
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80127e0:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80127e2:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 80127e6:	f080 80c0 	bcs.w	801296a <HAL_UART_Init+0x5b2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80127ea:	681a      	ldr	r2, [r3, #0]
 80127ec:	0752      	lsls	r2, r2, #29
 80127ee:	d5ef      	bpl.n	80127d0 <HAL_UART_Init+0x418>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80127f0:	69da      	ldr	r2, [r3, #28]
 80127f2:	0517      	lsls	r7, r2, #20
 80127f4:	d5ec      	bpl.n	80127d0 <HAL_UART_Init+0x418>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80127f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
          huart->gState = HAL_UART_STATE_READY;
 80127fa:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 80127fc:	2003      	movs	r0, #3
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80127fe:	6219      	str	r1, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8012800:	6819      	ldr	r1, [r3, #0]
 8012802:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 8012806:	6019      	str	r1, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012808:	6899      	ldr	r1, [r3, #8]
 801280a:	f021 0101 	bic.w	r1, r1, #1
 801280e:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8012810:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
          __HAL_UNLOCK(huart);
 8012814:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8012818:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801281c:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
 8012820:	e69c      	b.n	801255c <HAL_UART_Init+0x1a4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012822:	69dd      	ldr	r5, [r3, #28]
 8012824:	f415 0580 	ands.w	r5, r5, #4194304	; 0x400000
 8012828:	f47f af02 	bne.w	8012630 <HAL_UART_Init+0x278>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801282c:	f7f7 fee8 	bl	800a600 <HAL_GetTick>
 8012830:	1b80      	subs	r0, r0, r6
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8012832:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012834:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8012838:	f080 8097 	bcs.w	801296a <HAL_UART_Init+0x5b2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801283c:	681a      	ldr	r2, [r3, #0]
 801283e:	0751      	lsls	r1, r2, #29
 8012840:	d5ef      	bpl.n	8012822 <HAL_UART_Init+0x46a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012842:	69da      	ldr	r2, [r3, #28]
 8012844:	0512      	lsls	r2, r2, #20
 8012846:	d5ec      	bpl.n	8012822 <HAL_UART_Init+0x46a>
 8012848:	e7d5      	b.n	80127f6 <HAL_UART_Init+0x43e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801284a:	4b73      	ldr	r3, [pc, #460]	; (8012a18 <HAL_UART_Init+0x660>)
 801284c:	681a      	ldr	r2, [r3, #0]
 801284e:	0690      	lsls	r0, r2, #26
 8012850:	f140 80d9 	bpl.w	8012a06 <HAL_UART_Init+0x64e>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	4871      	ldr	r0, [pc, #452]	; (8012a1c <HAL_UART_Init+0x664>)
 8012858:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 801285c:	40d8      	lsrs	r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801285e:	4b70      	ldr	r3, [pc, #448]	; (8012a20 <HAL_UART_Init+0x668>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012860:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012864:	6862      	ldr	r2, [r4, #4]
 8012866:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 801286a:	fbb0 f3f3 	udiv	r3, r0, r3
 801286e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8012872:	fbb3 f3f2 	udiv	r3, r3, r2
 8012876:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012878:	f1a3 0210 	sub.w	r2, r3, #16
 801287c:	428a      	cmp	r2, r1
 801287e:	f63f ae66 	bhi.w	801254e <HAL_UART_Init+0x196>
        huart->Instance->BRR = usartdiv;
 8012882:	6820      	ldr	r0, [r4, #0]
  huart->NbTxDataToProcess = 1;
 8012884:	2200      	movs	r2, #0
  huart->NbRxDataToProcess = 1;
 8012886:	f04f 1101 	mov.w	r1, #65537	; 0x10001
        huart->Instance->BRR = usartdiv;
 801288a:	60c3      	str	r3, [r0, #12]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801288c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  huart->RxISR = NULL;
 801288e:	6722      	str	r2, [r4, #112]	; 0x70
  huart->NbTxDataToProcess = 1;
 8012890:	e9c4 121a 	strd	r1, r2, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012894:	2b00      	cmp	r3, #0
 8012896:	f43f aeaf 	beq.w	80125f8 <HAL_UART_Init+0x240>
    UART_AdvFeatureConfig(huart);
 801289a:	4620      	mov	r0, r4
 801289c:	f7ff fd34 	bl	8012308 <UART_AdvFeatureConfig>
 80128a0:	e6aa      	b.n	80125f8 <HAL_UART_Init+0x240>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80128a2:	a803      	add	r0, sp, #12
 80128a4:	f7fd fedc 	bl	8010660 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80128a8:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 80128aa:	2800      	cmp	r0, #0
 80128ac:	d056      	beq.n	801295c <HAL_UART_Init+0x5a4>
 80128ae:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80128b0:	e7d5      	b.n	801285e <HAL_UART_Init+0x4a6>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80128b2:	4668      	mov	r0, sp
 80128b4:	f7fd fe3c 	bl	8010530 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80128b8:	9801      	ldr	r0, [sp, #4]
 80128ba:	e7f6      	b.n	80128aa <HAL_UART_Init+0x4f2>
        pclk = HAL_RCC_GetPCLK1Freq();
 80128bc:	f7fc fe54 	bl	800f568 <HAL_RCC_GetPCLK1Freq>
 80128c0:	e7f3      	b.n	80128aa <HAL_UART_Init+0x4f2>
        pclk = HAL_RCC_GetPCLK2Freq();
 80128c2:	f7fc ff01 	bl	800f6c8 <HAL_RCC_GetPCLK2Freq>
 80128c6:	e7f0      	b.n	80128aa <HAL_UART_Init+0x4f2>
        pclk = (uint32_t) LSE_VALUE;
 80128c8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80128cc:	e7c7      	b.n	801285e <HAL_UART_Init+0x4a6>
        pclk = (uint32_t) CSI_VALUE;
 80128ce:	4855      	ldr	r0, [pc, #340]	; (8012a24 <HAL_UART_Init+0x66c>)
 80128d0:	e7c5      	b.n	801285e <HAL_UART_Init+0x4a6>
        pclk = (uint32_t) CSI_VALUE;
 80128d2:	4854      	ldr	r0, [pc, #336]	; (8012a24 <HAL_UART_Init+0x66c>)
 80128d4:	e65f      	b.n	8012596 <HAL_UART_Init+0x1de>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80128d6:	4b50      	ldr	r3, [pc, #320]	; (8012a18 <HAL_UART_Init+0x660>)
 80128d8:	681a      	ldr	r2, [r3, #0]
 80128da:	0696      	lsls	r6, r2, #26
 80128dc:	f140 809a 	bpl.w	8012a14 <HAL_UART_Init+0x65c>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	484e      	ldr	r0, [pc, #312]	; (8012a1c <HAL_UART_Init+0x664>)
 80128e4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80128e8:	40d8      	lsrs	r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80128ea:	4b4d      	ldr	r3, [pc, #308]	; (8012a20 <HAL_UART_Init+0x668>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80128ec:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80128f0:	6862      	ldr	r2, [r4, #4]
 80128f2:	f833 5015 	ldrh.w	r5, [r3, r5, lsl #1]
 80128f6:	0853      	lsrs	r3, r2, #1
 80128f8:	fbb0 f0f5 	udiv	r0, r0, r5
 80128fc:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8012900:	fbb3 f3f2 	udiv	r3, r3, r2
 8012904:	b29a      	uxth	r2, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012906:	f1a2 0010 	sub.w	r0, r2, #16
 801290a:	4288      	cmp	r0, r1
 801290c:	f63f ae1f 	bhi.w	801254e <HAL_UART_Init+0x196>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012910:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012914:	f3c2 0242 	ubfx	r2, r2, #1, #3
  huart->NbTxDataToProcess = 1;
 8012918:	2100      	movs	r1, #0
        huart->Instance->BRR = brrtemp;
 801291a:	6825      	ldr	r5, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801291c:	b29b      	uxth	r3, r3
  huart->NbRxDataToProcess = 1;
 801291e:	f04f 1001 	mov.w	r0, #65537	; 0x10001
        huart->Instance->BRR = brrtemp;
 8012922:	4313      	orrs	r3, r2
 8012924:	60eb      	str	r3, [r5, #12]
  huart->RxISR = NULL;
 8012926:	6721      	str	r1, [r4, #112]	; 0x70
  huart->NbTxDataToProcess = 1;
 8012928:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
 801292c:	e660      	b.n	80125f0 <HAL_UART_Init+0x238>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801292e:	a803      	add	r0, sp, #12
 8012930:	f7fd fe96 	bl	8010660 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012934:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 8012936:	b188      	cbz	r0, 801295c <HAL_UART_Init+0x5a4>
 8012938:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801293a:	e7d6      	b.n	80128ea <HAL_UART_Init+0x532>
        pclk = HAL_RCC_GetPCLK2Freq();
 801293c:	f7fc fec4 	bl	800f6c8 <HAL_RCC_GetPCLK2Freq>
 8012940:	e7f9      	b.n	8012936 <HAL_UART_Init+0x57e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8012942:	f7fc fe11 	bl	800f568 <HAL_RCC_GetPCLK1Freq>
 8012946:	e7f6      	b.n	8012936 <HAL_UART_Init+0x57e>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012948:	4668      	mov	r0, sp
 801294a:	f7fd fdf1 	bl	8010530 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801294e:	9801      	ldr	r0, [sp, #4]
 8012950:	e7f1      	b.n	8012936 <HAL_UART_Init+0x57e>
        pclk = (uint32_t) CSI_VALUE;
 8012952:	4834      	ldr	r0, [pc, #208]	; (8012a24 <HAL_UART_Init+0x66c>)
 8012954:	e7c9      	b.n	80128ea <HAL_UART_Init+0x532>
        pclk = (uint32_t) LSE_VALUE;
 8012956:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 801295a:	e7c6      	b.n	80128ea <HAL_UART_Init+0x532>
  huart->RxISR = NULL;
 801295c:	2300      	movs	r3, #0
 801295e:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->TxISR = NULL;
 8012962:	6723      	str	r3, [r4, #112]	; 0x70
  huart->RxISR = NULL;
 8012964:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
 8012968:	e642      	b.n	80125f0 <HAL_UART_Init+0x238>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 801296a:	681a      	ldr	r2, [r3, #0]
        huart->gState = HAL_UART_STATE_READY;
 801296c:	2120      	movs	r1, #32
      return HAL_TIMEOUT;
 801296e:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8012970:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8012974:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012976:	689a      	ldr	r2, [r3, #8]
 8012978:	f022 0201 	bic.w	r2, r2, #1
 801297c:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 801297e:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
        __HAL_UNLOCK(huart);
 8012982:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8012986:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
 801298a:	e5e7      	b.n	801255c <HAL_UART_Init+0x1a4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801298c:	4b22      	ldr	r3, [pc, #136]	; (8012a18 <HAL_UART_Init+0x660>)
 801298e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012990:	f003 0307 	and.w	r3, r3, #7
 8012994:	2b05      	cmp	r3, #5
 8012996:	f63f adda 	bhi.w	801254e <HAL_UART_Init+0x196>
 801299a:	4a23      	ldr	r2, [pc, #140]	; (8012a28 <HAL_UART_Init+0x670>)
 801299c:	5cd3      	ldrb	r3, [r2, r3]
 801299e:	e57c      	b.n	801249a <HAL_UART_Init+0xe2>
 80129a0:	4b1d      	ldr	r3, [pc, #116]	; (8012a18 <HAL_UART_Init+0x660>)
 80129a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80129a4:	f003 0307 	and.w	r3, r3, #7
 80129a8:	2b05      	cmp	r3, #5
 80129aa:	f63f add0 	bhi.w	801254e <HAL_UART_Init+0x196>
 80129ae:	4a1f      	ldr	r2, [pc, #124]	; (8012a2c <HAL_UART_Init+0x674>)
 80129b0:	5cd3      	ldrb	r3, [r2, r3]
 80129b2:	e572      	b.n	801249a <HAL_UART_Init+0xe2>
 80129b4:	4b18      	ldr	r3, [pc, #96]	; (8012a18 <HAL_UART_Init+0x660>)
 80129b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80129b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80129bc:	2b28      	cmp	r3, #40	; 0x28
 80129be:	f63f adc6 	bhi.w	801254e <HAL_UART_Init+0x196>
 80129c2:	4a1b      	ldr	r2, [pc, #108]	; (8012a30 <HAL_UART_Init+0x678>)
 80129c4:	5cd3      	ldrb	r3, [r2, r3]
 80129c6:	e568      	b.n	801249a <HAL_UART_Init+0xe2>
    switch (clocksource)
 80129c8:	2b02      	cmp	r3, #2
 80129ca:	d00a      	beq.n	80129e2 <HAL_UART_Init+0x62a>
 80129cc:	2b04      	cmp	r3, #4
 80129ce:	f47f adbe 	bne.w	801254e <HAL_UART_Init+0x196>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80129d2:	4668      	mov	r0, sp
 80129d4:	f7fd fdac 	bl	8010530 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80129d8:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 80129da:	2800      	cmp	r0, #0
 80129dc:	d0be      	beq.n	801295c <HAL_UART_Init+0x5a4>
 80129de:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80129e0:	e5d9      	b.n	8012596 <HAL_UART_Init+0x1de>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80129e2:	f7fd fd93 	bl	801050c <HAL_RCCEx_GetD3PCLK1Freq>
 80129e6:	e7f8      	b.n	80129da <HAL_UART_Init+0x622>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80129e8:	a803      	add	r0, sp, #12
 80129ea:	f7fd fe39 	bl	8010660 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80129ee:	9804      	ldr	r0, [sp, #16]
 80129f0:	e7f3      	b.n	80129da <HAL_UART_Init+0x622>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80129f2:	4b09      	ldr	r3, [pc, #36]	; (8012a18 <HAL_UART_Init+0x660>)
 80129f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80129f6:	f003 0307 	and.w	r3, r3, #7
 80129fa:	2b05      	cmp	r3, #5
 80129fc:	f63f ada7 	bhi.w	801254e <HAL_UART_Init+0x196>
 8012a00:	4a0c      	ldr	r2, [pc, #48]	; (8012a34 <HAL_UART_Init+0x67c>)
 8012a02:	5cd3      	ldrb	r3, [r2, r3]
 8012a04:	e549      	b.n	801249a <HAL_UART_Init+0xe2>
          pclk = (uint32_t) HSI_VALUE;
 8012a06:	4805      	ldr	r0, [pc, #20]	; (8012a1c <HAL_UART_Init+0x664>)
 8012a08:	e729      	b.n	801285e <HAL_UART_Init+0x4a6>
        pclk = (uint32_t) LSE_VALUE;
 8012a0a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8012a0e:	e5c2      	b.n	8012596 <HAL_UART_Init+0x1de>
          pclk = (uint32_t) HSI_VALUE;
 8012a10:	4802      	ldr	r0, [pc, #8]	; (8012a1c <HAL_UART_Init+0x664>)
 8012a12:	e5c0      	b.n	8012596 <HAL_UART_Init+0x1de>
          pclk = (uint32_t) HSI_VALUE;
 8012a14:	4801      	ldr	r0, [pc, #4]	; (8012a1c <HAL_UART_Init+0x664>)
 8012a16:	e768      	b.n	80128ea <HAL_UART_Init+0x532>
 8012a18:	58024400 	.word	0x58024400
 8012a1c:	03d09000 	.word	0x03d09000
 8012a20:	08021418 	.word	0x08021418
 8012a24:	003d0900 	.word	0x003d0900
 8012a28:	08021408 	.word	0x08021408
 8012a2c:	08021408 	.word	0x08021408
 8012a30:	080213dc 	.word	0x080213dc
 8012a34:	08021408 	.word	0x08021408

08012a38 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012a38:	4770      	bx	lr
 8012a3a:	bf00      	nop

08012a3c <HAL_UARTEx_RxFifoFullCallback>:
 8012a3c:	4770      	bx	lr
 8012a3e:	bf00      	nop

08012a40 <HAL_UARTEx_TxFifoEmptyCallback>:
 8012a40:	4770      	bx	lr
 8012a42:	bf00      	nop

08012a44 <DelayBlock_Enable>:
  * @brief  Enable the Delay Block instance.
  * @param  DLYBx: Pointer to DLYB instance.
  * @retval HAL status
  */
HAL_StatusTypeDef DelayBlock_Enable(DLYB_TypeDef *DLYBx)
{
 8012a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t unit_current;
  uint32_t tuning;
  uint32_t lng_mask;
  uint32_t tickstart;

  DLYBx->CR = DLYB_CR_DEN | DLYB_CR_SEN;
 8012a48:	2700      	movs	r7, #0
{
 8012a4a:	b083      	sub	sp, #12
  DLYBx->CR = DLYB_CR_DEN | DLYB_CR_SEN;
 8012a4c:	2303      	movs	r3, #3
{
 8012a4e:	4604      	mov	r4, r0

  for (sel_current = 0U; sel_current < DLYB_MAX_SELECT; sel_current++)
  {
    /* lng_mask is the mask bit for the LNG field to check the output of the UNITx*/
    lng_mask = DLYB_CFGR_LNG_0 << sel_current;
 8012a50:	f44f 3980 	mov.w	r9, #65536	; 0x10000
  uint32_t unit = 0U;
 8012a54:	46bb      	mov	fp, r7
  uint32_t sel = 0U;
 8012a56:	9701      	str	r7, [sp, #4]
  DLYBx->CR = DLYB_CR_DEN | DLYB_CR_SEN;
 8012a58:	6003      	str	r3, [r0, #0]
    tuning = 0U;
 8012a5a:	f04f 0800 	mov.w	r8, #0
    lng_mask = DLYB_CFGR_LNG_0 << sel_current;
 8012a5e:	fa09 fa07 	lsl.w	sl, r9, r7
    for (unit_current = 0U; unit_current < DLYB_MAX_UNIT; unit_current++)
 8012a62:	4646      	mov	r6, r8
    {
      /* Set the Delay of the UNIT(s)*/
      DLYBx->CFGR = DLYB_MAX_SELECT | (unit_current << DLYB_CFGR_UNIT_Pos);
 8012a64:	0233      	lsls	r3, r6, #8
 8012a66:	f043 030c 	orr.w	r3, r3, #12
 8012a6a:	6063      	str	r3, [r4, #4]

      /* Waiting for a LNG valid value */
      tickstart =  HAL_GetTick();
 8012a6c:	f7f7 fdc8 	bl	800a600 <HAL_GetTick>
 8012a70:	4605      	mov	r5, r0
      while ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 8012a72:	e004      	b.n	8012a7e <DelayBlock_Enable+0x3a>
      {
        if((HAL_GetTick() - tickstart) >=  DLYB_TIMEOUT)
 8012a74:	f7f7 fdc4 	bl	800a600 <HAL_GetTick>
 8012a78:	1b40      	subs	r0, r0, r5
 8012a7a:	28fe      	cmp	r0, #254	; 0xfe
 8012a7c:	d81a      	bhi.n	8012ab4 <DelayBlock_Enable+0x70>
      while ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 8012a7e:	6863      	ldr	r3, [r4, #4]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	daf7      	bge.n	8012a74 <DelayBlock_Enable+0x30>
          return HAL_TIMEOUT;
        }
      }
      if (tuning == 0U)
      {
        if ((DLYBx->CFGR & lng_mask) != 0U)
 8012a84:	6863      	ldr	r3, [r4, #4]
      if (tuning == 0U)
 8012a86:	f1b8 0f00 	cmp.w	r8, #0
 8012a8a:	d017      	beq.n	8012abc <DelayBlock_Enable+0x78>
        }
      }
      else
      {
        /* 1/2 period LOW detected after the HIGH 1/2 period => FULL PERIOD passed*/
        if((DLYBx->CFGR & lng_mask ) == 0U)
 8012a8c:	ea13 0f0a 	tst.w	r3, sl
 8012a90:	d01c      	beq.n	8012acc <DelayBlock_Enable+0x88>
    for (unit_current = 0U; unit_current < DLYB_MAX_UNIT; unit_current++)
 8012a92:	3601      	adds	r6, #1
 8012a94:	2e80      	cmp	r6, #128	; 0x80
 8012a96:	d1e5      	bne.n	8012a64 <DelayBlock_Enable+0x20>
 8012a98:	3701      	adds	r7, #1
  for (sel_current = 0U; sel_current < DLYB_MAX_SELECT; sel_current++)
 8012a9a:	2f0c      	cmp	r7, #12
 8012a9c:	d1dd      	bne.n	8012a5a <DelayBlock_Enable+0x16>
  }

  /* Apply the Tuning settings */
  DLYBx->CR   = 0U;
  DLYBx->CR   = DLYB_CR_DEN | DLYB_CR_SEN;
  DLYBx->CFGR = sel | (unit << DLYB_CFGR_UNIT_Pos);
 8012a9e:	9b01      	ldr	r3, [sp, #4]
  DLYBx->CR   = 0U;
 8012aa0:	2000      	movs	r0, #0
  DLYBx->CR   = DLYB_CR_DEN | DLYB_CR_SEN;
 8012aa2:	2103      	movs	r1, #3
  DLYBx->CR   = DLYB_CR_DEN;
 8012aa4:	2201      	movs	r2, #1
  DLYBx->CFGR = sel | (unit << DLYB_CFGR_UNIT_Pos);
 8012aa6:	ea43 230b 	orr.w	r3, r3, fp, lsl #8
  DLYBx->CR   = 0U;
 8012aaa:	6020      	str	r0, [r4, #0]
  DLYBx->CR   = DLYB_CR_DEN | DLYB_CR_SEN;
 8012aac:	6021      	str	r1, [r4, #0]
  DLYBx->CFGR = sel | (unit << DLYB_CFGR_UNIT_Pos);
 8012aae:	6063      	str	r3, [r4, #4]
  DLYBx->CR   = DLYB_CR_DEN;
 8012ab0:	6022      	str	r2, [r4, #0]

  return HAL_OK;
 8012ab2:	e000      	b.n	8012ab6 <DelayBlock_Enable+0x72>
          return HAL_TIMEOUT;
 8012ab4:	2003      	movs	r0, #3
}
 8012ab6:	b003      	add	sp, #12
 8012ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((DLYBx->CFGR & lng_mask) != 0U)
 8012abc:	ea13 0f0a 	tst.w	r3, sl
 8012ac0:	bf14      	ite	ne
 8012ac2:	f04f 0801 	movne.w	r8, #1
 8012ac6:	f04f 0800 	moveq.w	r8, #0
 8012aca:	e7e2      	b.n	8012a92 <DelayBlock_Enable+0x4e>
 8012acc:	3701      	adds	r7, #1
          if( unit == 0U )
 8012ace:	f1bb 0f00 	cmp.w	fp, #0
 8012ad2:	d1e2      	bne.n	8012a9a <DelayBlock_Enable+0x56>
 8012ad4:	46b3      	mov	fp, r6
            sel  = sel_current + 1U;
 8012ad6:	9701      	str	r7, [sp, #4]
 8012ad8:	e7df      	b.n	8012a9a <DelayBlock_Enable+0x56>
 8012ada:	bf00      	nop

08012adc <SDMMC_GetCmdResp1.part.2>:
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8012adc:	4b30      	ldr	r3, [pc, #192]	; (8012ba0 <SDMMC_GetCmdResp1.part.2+0xc4>)
  return (*(__IO uint32_t *) tmp);
 8012ade:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8012ae0:	4013      	ands	r3, r2
 8012ae2:	b34b      	cbz	r3, 8012b38 <SDMMC_GetCmdResp1.part.2+0x5c>
  {
    return SDMMC_ERROR_NONE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8012ae4:	2a00      	cmp	r2, #0
 8012ae6:	db29      	blt.n	8012b3c <SDMMC_GetCmdResp1.part.2+0x60>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8012ae8:	0051      	lsls	r1, r2, #1
 8012aea:	d42d      	bmi.n	8012b48 <SDMMC_GetCmdResp1.part.2+0x6c>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8012aec:	0093      	lsls	r3, r2, #2
 8012aee:	d42d      	bmi.n	8012b4c <SDMMC_GetCmdResp1.part.2+0x70>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8012af0:	00d1      	lsls	r1, r2, #3
 8012af2:	d426      	bmi.n	8012b42 <SDMMC_GetCmdResp1.part.2+0x66>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8012af4:	0113      	lsls	r3, r2, #4
 8012af6:	d42e      	bmi.n	8012b56 <SDMMC_GetCmdResp1.part.2+0x7a>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8012af8:	0151      	lsls	r1, r2, #5
 8012afa:	d42f      	bmi.n	8012b5c <SDMMC_GetCmdResp1.part.2+0x80>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8012afc:	01d3      	lsls	r3, r2, #7
 8012afe:	d427      	bmi.n	8012b50 <SDMMC_GetCmdResp1.part.2+0x74>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8012b00:	0211      	lsls	r1, r2, #8
 8012b02:	d42e      	bmi.n	8012b62 <SDMMC_GetCmdResp1.part.2+0x86>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8012b04:	0253      	lsls	r3, r2, #9
 8012b06:	d42f      	bmi.n	8012b68 <SDMMC_GetCmdResp1.part.2+0x8c>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8012b08:	0291      	lsls	r1, r2, #10
 8012b0a:	d430      	bmi.n	8012b6e <SDMMC_GetCmdResp1.part.2+0x92>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8012b0c:	02d3      	lsls	r3, r2, #11
 8012b0e:	d431      	bmi.n	8012b74 <SDMMC_GetCmdResp1.part.2+0x98>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8012b10:	0351      	lsls	r1, r2, #13
 8012b12:	d432      	bmi.n	8012b7a <SDMMC_GetCmdResp1.part.2+0x9e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8012b14:	0393      	lsls	r3, r2, #14
 8012b16:	d433      	bmi.n	8012b80 <SDMMC_GetCmdResp1.part.2+0xa4>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8012b18:	03d1      	lsls	r1, r2, #15
 8012b1a:	d434      	bmi.n	8012b86 <SDMMC_GetCmdResp1.part.2+0xaa>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8012b1c:	0413      	lsls	r3, r2, #16
 8012b1e:	d435      	bmi.n	8012b8c <SDMMC_GetCmdResp1.part.2+0xb0>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8012b20:	0451      	lsls	r1, r2, #17
 8012b22:	d436      	bmi.n	8012b92 <SDMMC_GetCmdResp1.part.2+0xb6>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8012b24:	0493      	lsls	r3, r2, #18
 8012b26:	d437      	bmi.n	8012b98 <SDMMC_GetCmdResp1.part.2+0xbc>
  {
    return SDMMC_ERROR_ERASE_RESET;
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8012b28:	f012 0f08 	tst.w	r2, #8
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012b2c:	bf14      	ite	ne
 8012b2e:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 8012b32:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8012b36:	4770      	bx	lr
    return SDMMC_ERROR_NONE;
 8012b38:	4618      	mov	r0, r3
 8012b3a:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8012b3c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8012b40:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8012b42:	f44f 7080 	mov.w	r0, #256	; 0x100
 8012b46:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8012b48:	2040      	movs	r0, #64	; 0x40
 8012b4a:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8012b4c:	2080      	movs	r0, #128	; 0x80
 8012b4e:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8012b50:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8012b54:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8012b56:	f44f 7000 	mov.w	r0, #512	; 0x200
 8012b5a:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8012b5c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8012b60:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012b62:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8012b66:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012b68:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8012b6c:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8012b6e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8012b72:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 8012b74:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8012b78:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8012b7a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8012b7e:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8012b80:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8012b84:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8012b86:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8012b8a:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8012b8c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8012b90:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8012b92:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8012b96:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 8012b98:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  }
}
 8012b9c:	4770      	bx	lr
 8012b9e:	bf00      	nop
 8012ba0:	fdffe008 	.word	0xfdffe008

08012ba4 <SDMMC_Init>:
{
 8012ba4:	b084      	sub	sp, #16
 8012ba6:	b470      	push	{r4, r5, r6}
 8012ba8:	ad04      	add	r5, sp, #16
 8012baa:	4606      	mov	r6, r0
             Init.BusWide             |\
 8012bac:	9c07      	ldr	r4, [sp, #28]
}
 8012bae:	2000      	movs	r0, #0
{
 8012bb0:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 8012bb4:	460b      	mov	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8012bb6:	6875      	ldr	r5, [r6, #4]
             Init.ClockPowerSave      |\
 8012bb8:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
  tmpreg |= (Init.ClockEdge           |\
 8012bbc:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 8012bbe:	9908      	ldr	r1, [sp, #32]
             Init.ClockPowerSave      |\
 8012bc0:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8012bc2:	4a04      	ldr	r2, [pc, #16]	; (8012bd4 <SDMMC_Init+0x30>)
             Init.BusWide             |\
 8012bc4:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8012bc6:	402a      	ands	r2, r5
             Init.HardwareFlowControl |\
 8012bc8:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8012bca:	4313      	orrs	r3, r2
 8012bcc:	6073      	str	r3, [r6, #4]
}
 8012bce:	bc70      	pop	{r4, r5, r6}
 8012bd0:	b004      	add	sp, #16
 8012bd2:	4770      	bx	lr
 8012bd4:	ffc02c00 	.word	0xffc02c00

08012bd8 <SDMMC_ReadFIFO>:
  return (SDMMCx->FIFO);
 8012bd8:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8012bdc:	4770      	bx	lr
 8012bde:	bf00      	nop

08012be0 <SDMMC_WriteFIFO>:
{
 8012be0:	4603      	mov	r3, r0
  SDMMCx->FIFO = *pWriteData;
 8012be2:	680a      	ldr	r2, [r1, #0]
}
 8012be4:	2000      	movs	r0, #0
  SDMMCx->FIFO = *pWriteData;
 8012be6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8012bea:	4770      	bx	lr

08012bec <SDMMC_PowerState_ON>:
{
 8012bec:	4602      	mov	r2, r0
}
 8012bee:	2000      	movs	r0, #0
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8012bf0:	6813      	ldr	r3, [r2, #0]
 8012bf2:	f043 0303 	orr.w	r3, r3, #3
 8012bf6:	6013      	str	r3, [r2, #0]
}
 8012bf8:	4770      	bx	lr
 8012bfa:	bf00      	nop

08012bfc <SDMMC_PowerState_OFF>:
{
 8012bfc:	4602      	mov	r2, r0
}
 8012bfe:	2000      	movs	r0, #0
  SDMMCx->POWER &= ~(SDMMC_POWER_PWRCTRL);
 8012c00:	6813      	ldr	r3, [r2, #0]
 8012c02:	f023 0303 	bic.w	r3, r3, #3
 8012c06:	6013      	str	r3, [r2, #0]
}
 8012c08:	4770      	bx	lr
 8012c0a:	bf00      	nop

08012c0c <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8012c0c:	6800      	ldr	r0, [r0, #0]
}
 8012c0e:	f000 0003 	and.w	r0, r0, #3
 8012c12:	4770      	bx	lr

08012c14 <SDMMC_GetResponse>:
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8012c14:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 8012c16:	5840      	ldr	r0, [r0, r1]
}
 8012c18:	4770      	bx	lr
 8012c1a:	bf00      	nop

08012c1c <SDMMC_ConfigData>:
{
 8012c1c:	b430      	push	{r4, r5}
 8012c1e:	4602      	mov	r2, r0
  SDMMCx->DTIMER = Data->DataTimeOut;
 8012c20:	680c      	ldr	r4, [r1, #0]
}
 8012c22:	2000      	movs	r0, #0
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8012c24:	e9d1 3502 	ldrd	r3, r5, [r1, #8]
 8012c28:	432b      	orrs	r3, r5
  SDMMCx->DLEN = Data->DataLength;
 8012c2a:	684d      	ldr	r5, [r1, #4]
  SDMMCx->DTIMER = Data->DataTimeOut;
 8012c2c:	6254      	str	r4, [r2, #36]	; 0x24
                       Data->TransferDir   |\
 8012c2e:	690c      	ldr	r4, [r1, #16]
  SDMMCx->DLEN = Data->DataLength;
 8012c30:	6295      	str	r5, [r2, #40]	; 0x28
                       Data->TransferDir   |\
 8012c32:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 8012c34:	694d      	ldr	r5, [r1, #20]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8012c36:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
                       Data->TransferMode  |\
 8012c38:	432b      	orrs	r3, r5
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8012c3a:	f024 01ff 	bic.w	r1, r4, #255	; 0xff
 8012c3e:	430b      	orrs	r3, r1
}
 8012c40:	bc30      	pop	{r4, r5}
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8012c42:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8012c44:	4770      	bx	lr
 8012c46:	bf00      	nop

08012c48 <SDMMC_CmdBlockLength>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012c48:	4a1c      	ldr	r2, [pc, #112]	; (8012cbc <SDMMC_CmdBlockLength+0x74>)
 8012c4a:	4b1d      	ldr	r3, [pc, #116]	; (8012cc0 <SDMMC_CmdBlockLength+0x78>)
 8012c4c:	6812      	ldr	r2, [r2, #0]
{
 8012c4e:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012c50:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012c54:	4d1b      	ldr	r5, [pc, #108]	; (8012cc4 <SDMMC_CmdBlockLength+0x7c>)
  SDMMCx->ARG = Command->Argument;
 8012c56:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012c58:	f241 1410 	movw	r4, #4368	; 0x1110
 8012c5c:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012c5e:	f241 3388 	movw	r3, #5000	; 0x1388
 8012c62:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012c64:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8012c66:	4918      	ldr	r1, [pc, #96]	; (8012cc8 <SDMMC_CmdBlockLength+0x80>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012c68:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012c6c:	432c      	orrs	r4, r5
 8012c6e:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8012c70:	f113 33ff 	adds.w	r3, r3, #4294967295
 8012c74:	d312      	bcc.n	8012c9c <SDMMC_CmdBlockLength+0x54>
    sta_reg = SDMMCx->STA;
 8012c76:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012c78:	420a      	tst	r2, r1
 8012c7a:	d0f9      	beq.n	8012c70 <SDMMC_CmdBlockLength+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8012c7c:	0494      	lsls	r4, r2, #18
 8012c7e:	d4f7      	bmi.n	8012c70 <SDMMC_CmdBlockLength+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012c80:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012c82:	075a      	lsls	r2, r3, #29
 8012c84:	d413      	bmi.n	8012cae <SDMMC_CmdBlockLength+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012c86:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012c88:	07db      	lsls	r3, r3, #31
 8012c8a:	d40b      	bmi.n	8012ca4 <SDMMC_CmdBlockLength+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012c8c:	4b0f      	ldr	r3, [pc, #60]	; (8012ccc <SDMMC_CmdBlockLength+0x84>)
 8012c8e:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8012c90:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012c92:	b2db      	uxtb	r3, r3
 8012c94:	2b10      	cmp	r3, #16
 8012c96:	d00e      	beq.n	8012cb6 <SDMMC_CmdBlockLength+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012c98:	2001      	movs	r0, #1
  return errorstate;
 8012c9a:	e001      	b.n	8012ca0 <SDMMC_CmdBlockLength+0x58>
      return SDMMC_ERROR_TIMEOUT;
 8012c9c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8012ca0:	bc30      	pop	{r4, r5}
 8012ca2:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012ca4:	2301      	movs	r3, #1
}
 8012ca6:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012ca8:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012caa:	4618      	mov	r0, r3
}
 8012cac:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012cae:	2304      	movs	r3, #4
 8012cb0:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	e7f4      	b.n	8012ca0 <SDMMC_CmdBlockLength+0x58>
}
 8012cb6:	bc30      	pop	{r4, r5}
 8012cb8:	f7ff bf10 	b.w	8012adc <SDMMC_GetCmdResp1.part.2>
 8012cbc:	240024cc 	.word	0x240024cc
 8012cc0:	10624dd3 	.word	0x10624dd3
 8012cc4:	fffee0c0 	.word	0xfffee0c0
 8012cc8:	00200045 	.word	0x00200045
 8012ccc:	002000c5 	.word	0x002000c5

08012cd0 <SDMMC_CmdReadSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012cd0:	4a1c      	ldr	r2, [pc, #112]	; (8012d44 <SDMMC_CmdReadSingleBlock+0x74>)
 8012cd2:	4b1d      	ldr	r3, [pc, #116]	; (8012d48 <SDMMC_CmdReadSingleBlock+0x78>)
 8012cd4:	6812      	ldr	r2, [r2, #0]
{
 8012cd6:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012cd8:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012cdc:	4d1b      	ldr	r5, [pc, #108]	; (8012d4c <SDMMC_CmdReadSingleBlock+0x7c>)
  SDMMCx->ARG = Command->Argument;
 8012cde:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012ce0:	f241 1411 	movw	r4, #4369	; 0x1111
 8012ce4:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012ce6:	f241 3388 	movw	r3, #5000	; 0x1388
 8012cea:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012cec:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8012cee:	4918      	ldr	r1, [pc, #96]	; (8012d50 <SDMMC_CmdReadSingleBlock+0x80>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012cf0:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012cf4:	432c      	orrs	r4, r5
 8012cf6:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8012cf8:	f113 33ff 	adds.w	r3, r3, #4294967295
 8012cfc:	d312      	bcc.n	8012d24 <SDMMC_CmdReadSingleBlock+0x54>
    sta_reg = SDMMCx->STA;
 8012cfe:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012d00:	420a      	tst	r2, r1
 8012d02:	d0f9      	beq.n	8012cf8 <SDMMC_CmdReadSingleBlock+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8012d04:	0494      	lsls	r4, r2, #18
 8012d06:	d4f7      	bmi.n	8012cf8 <SDMMC_CmdReadSingleBlock+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012d08:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012d0a:	075a      	lsls	r2, r3, #29
 8012d0c:	d413      	bmi.n	8012d36 <SDMMC_CmdReadSingleBlock+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012d0e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012d10:	07db      	lsls	r3, r3, #31
 8012d12:	d40b      	bmi.n	8012d2c <SDMMC_CmdReadSingleBlock+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012d14:	4b0f      	ldr	r3, [pc, #60]	; (8012d54 <SDMMC_CmdReadSingleBlock+0x84>)
 8012d16:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8012d18:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012d1a:	b2db      	uxtb	r3, r3
 8012d1c:	2b11      	cmp	r3, #17
 8012d1e:	d00e      	beq.n	8012d3e <SDMMC_CmdReadSingleBlock+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012d20:	2001      	movs	r0, #1
  return errorstate;
 8012d22:	e001      	b.n	8012d28 <SDMMC_CmdReadSingleBlock+0x58>
      return SDMMC_ERROR_TIMEOUT;
 8012d24:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8012d28:	bc30      	pop	{r4, r5}
 8012d2a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012d2c:	2301      	movs	r3, #1
}
 8012d2e:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012d30:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012d32:	4618      	mov	r0, r3
}
 8012d34:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012d36:	2304      	movs	r3, #4
 8012d38:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012d3a:	4618      	mov	r0, r3
 8012d3c:	e7f4      	b.n	8012d28 <SDMMC_CmdReadSingleBlock+0x58>
}
 8012d3e:	bc30      	pop	{r4, r5}
 8012d40:	f7ff becc 	b.w	8012adc <SDMMC_GetCmdResp1.part.2>
 8012d44:	240024cc 	.word	0x240024cc
 8012d48:	10624dd3 	.word	0x10624dd3
 8012d4c:	fffee0c0 	.word	0xfffee0c0
 8012d50:	00200045 	.word	0x00200045
 8012d54:	002000c5 	.word	0x002000c5

08012d58 <SDMMC_CmdReadMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012d58:	4a1c      	ldr	r2, [pc, #112]	; (8012dcc <SDMMC_CmdReadMultiBlock+0x74>)
 8012d5a:	4b1d      	ldr	r3, [pc, #116]	; (8012dd0 <SDMMC_CmdReadMultiBlock+0x78>)
 8012d5c:	6812      	ldr	r2, [r2, #0]
{
 8012d5e:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012d60:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012d64:	4d1b      	ldr	r5, [pc, #108]	; (8012dd4 <SDMMC_CmdReadMultiBlock+0x7c>)
  SDMMCx->ARG = Command->Argument;
 8012d66:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012d68:	f241 1412 	movw	r4, #4370	; 0x1112
 8012d6c:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012d6e:	f241 3388 	movw	r3, #5000	; 0x1388
 8012d72:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012d74:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8012d76:	4918      	ldr	r1, [pc, #96]	; (8012dd8 <SDMMC_CmdReadMultiBlock+0x80>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012d78:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012d7c:	432c      	orrs	r4, r5
 8012d7e:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8012d80:	f113 33ff 	adds.w	r3, r3, #4294967295
 8012d84:	d312      	bcc.n	8012dac <SDMMC_CmdReadMultiBlock+0x54>
    sta_reg = SDMMCx->STA;
 8012d86:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012d88:	420a      	tst	r2, r1
 8012d8a:	d0f9      	beq.n	8012d80 <SDMMC_CmdReadMultiBlock+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8012d8c:	0494      	lsls	r4, r2, #18
 8012d8e:	d4f7      	bmi.n	8012d80 <SDMMC_CmdReadMultiBlock+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012d90:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012d92:	075a      	lsls	r2, r3, #29
 8012d94:	d413      	bmi.n	8012dbe <SDMMC_CmdReadMultiBlock+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012d96:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012d98:	07db      	lsls	r3, r3, #31
 8012d9a:	d40b      	bmi.n	8012db4 <SDMMC_CmdReadMultiBlock+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012d9c:	4b0f      	ldr	r3, [pc, #60]	; (8012ddc <SDMMC_CmdReadMultiBlock+0x84>)
 8012d9e:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8012da0:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012da2:	b2db      	uxtb	r3, r3
 8012da4:	2b12      	cmp	r3, #18
 8012da6:	d00e      	beq.n	8012dc6 <SDMMC_CmdReadMultiBlock+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012da8:	2001      	movs	r0, #1
  return errorstate;
 8012daa:	e001      	b.n	8012db0 <SDMMC_CmdReadMultiBlock+0x58>
      return SDMMC_ERROR_TIMEOUT;
 8012dac:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8012db0:	bc30      	pop	{r4, r5}
 8012db2:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012db4:	2301      	movs	r3, #1
}
 8012db6:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012db8:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012dba:	4618      	mov	r0, r3
}
 8012dbc:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012dbe:	2304      	movs	r3, #4
 8012dc0:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012dc2:	4618      	mov	r0, r3
 8012dc4:	e7f4      	b.n	8012db0 <SDMMC_CmdReadMultiBlock+0x58>
}
 8012dc6:	bc30      	pop	{r4, r5}
 8012dc8:	f7ff be88 	b.w	8012adc <SDMMC_GetCmdResp1.part.2>
 8012dcc:	240024cc 	.word	0x240024cc
 8012dd0:	10624dd3 	.word	0x10624dd3
 8012dd4:	fffee0c0 	.word	0xfffee0c0
 8012dd8:	00200045 	.word	0x00200045
 8012ddc:	002000c5 	.word	0x002000c5

08012de0 <SDMMC_CmdWriteSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012de0:	4a1c      	ldr	r2, [pc, #112]	; (8012e54 <SDMMC_CmdWriteSingleBlock+0x74>)
 8012de2:	4b1d      	ldr	r3, [pc, #116]	; (8012e58 <SDMMC_CmdWriteSingleBlock+0x78>)
 8012de4:	6812      	ldr	r2, [r2, #0]
{
 8012de6:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012de8:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012dec:	4d1b      	ldr	r5, [pc, #108]	; (8012e5c <SDMMC_CmdWriteSingleBlock+0x7c>)
  SDMMCx->ARG = Command->Argument;
 8012dee:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012df0:	f241 1418 	movw	r4, #4376	; 0x1118
 8012df4:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012df6:	f241 3388 	movw	r3, #5000	; 0x1388
 8012dfa:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012dfc:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8012dfe:	4918      	ldr	r1, [pc, #96]	; (8012e60 <SDMMC_CmdWriteSingleBlock+0x80>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012e00:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012e04:	432c      	orrs	r4, r5
 8012e06:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8012e08:	f113 33ff 	adds.w	r3, r3, #4294967295
 8012e0c:	d312      	bcc.n	8012e34 <SDMMC_CmdWriteSingleBlock+0x54>
    sta_reg = SDMMCx->STA;
 8012e0e:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012e10:	420a      	tst	r2, r1
 8012e12:	d0f9      	beq.n	8012e08 <SDMMC_CmdWriteSingleBlock+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8012e14:	0494      	lsls	r4, r2, #18
 8012e16:	d4f7      	bmi.n	8012e08 <SDMMC_CmdWriteSingleBlock+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012e18:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012e1a:	075a      	lsls	r2, r3, #29
 8012e1c:	d413      	bmi.n	8012e46 <SDMMC_CmdWriteSingleBlock+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012e1e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012e20:	07db      	lsls	r3, r3, #31
 8012e22:	d40b      	bmi.n	8012e3c <SDMMC_CmdWriteSingleBlock+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012e24:	4b0f      	ldr	r3, [pc, #60]	; (8012e64 <SDMMC_CmdWriteSingleBlock+0x84>)
 8012e26:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8012e28:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012e2a:	b2db      	uxtb	r3, r3
 8012e2c:	2b18      	cmp	r3, #24
 8012e2e:	d00e      	beq.n	8012e4e <SDMMC_CmdWriteSingleBlock+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012e30:	2001      	movs	r0, #1
  return errorstate;
 8012e32:	e001      	b.n	8012e38 <SDMMC_CmdWriteSingleBlock+0x58>
      return SDMMC_ERROR_TIMEOUT;
 8012e34:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8012e38:	bc30      	pop	{r4, r5}
 8012e3a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012e3c:	2301      	movs	r3, #1
}
 8012e3e:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012e40:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012e42:	4618      	mov	r0, r3
}
 8012e44:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012e46:	2304      	movs	r3, #4
 8012e48:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012e4a:	4618      	mov	r0, r3
 8012e4c:	e7f4      	b.n	8012e38 <SDMMC_CmdWriteSingleBlock+0x58>
}
 8012e4e:	bc30      	pop	{r4, r5}
 8012e50:	f7ff be44 	b.w	8012adc <SDMMC_GetCmdResp1.part.2>
 8012e54:	240024cc 	.word	0x240024cc
 8012e58:	10624dd3 	.word	0x10624dd3
 8012e5c:	fffee0c0 	.word	0xfffee0c0
 8012e60:	00200045 	.word	0x00200045
 8012e64:	002000c5 	.word	0x002000c5

08012e68 <SDMMC_CmdWriteMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012e68:	4a1c      	ldr	r2, [pc, #112]	; (8012edc <SDMMC_CmdWriteMultiBlock+0x74>)
 8012e6a:	4b1d      	ldr	r3, [pc, #116]	; (8012ee0 <SDMMC_CmdWriteMultiBlock+0x78>)
 8012e6c:	6812      	ldr	r2, [r2, #0]
{
 8012e6e:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012e70:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012e74:	4d1b      	ldr	r5, [pc, #108]	; (8012ee4 <SDMMC_CmdWriteMultiBlock+0x7c>)
  SDMMCx->ARG = Command->Argument;
 8012e76:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012e78:	f241 1419 	movw	r4, #4377	; 0x1119
 8012e7c:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012e7e:	f241 3388 	movw	r3, #5000	; 0x1388
 8012e82:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012e84:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8012e86:	4918      	ldr	r1, [pc, #96]	; (8012ee8 <SDMMC_CmdWriteMultiBlock+0x80>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012e88:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012e8c:	432c      	orrs	r4, r5
 8012e8e:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8012e90:	f113 33ff 	adds.w	r3, r3, #4294967295
 8012e94:	d312      	bcc.n	8012ebc <SDMMC_CmdWriteMultiBlock+0x54>
    sta_reg = SDMMCx->STA;
 8012e96:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012e98:	420a      	tst	r2, r1
 8012e9a:	d0f9      	beq.n	8012e90 <SDMMC_CmdWriteMultiBlock+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8012e9c:	0494      	lsls	r4, r2, #18
 8012e9e:	d4f7      	bmi.n	8012e90 <SDMMC_CmdWriteMultiBlock+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012ea0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012ea2:	075a      	lsls	r2, r3, #29
 8012ea4:	d413      	bmi.n	8012ece <SDMMC_CmdWriteMultiBlock+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012ea6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012ea8:	07db      	lsls	r3, r3, #31
 8012eaa:	d40b      	bmi.n	8012ec4 <SDMMC_CmdWriteMultiBlock+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012eac:	4b0f      	ldr	r3, [pc, #60]	; (8012eec <SDMMC_CmdWriteMultiBlock+0x84>)
 8012eae:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8012eb0:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012eb2:	b2db      	uxtb	r3, r3
 8012eb4:	2b19      	cmp	r3, #25
 8012eb6:	d00e      	beq.n	8012ed6 <SDMMC_CmdWriteMultiBlock+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012eb8:	2001      	movs	r0, #1
  return errorstate;
 8012eba:	e001      	b.n	8012ec0 <SDMMC_CmdWriteMultiBlock+0x58>
      return SDMMC_ERROR_TIMEOUT;
 8012ebc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8012ec0:	bc30      	pop	{r4, r5}
 8012ec2:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012ec4:	2301      	movs	r3, #1
}
 8012ec6:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012ec8:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012eca:	4618      	mov	r0, r3
}
 8012ecc:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012ece:	2304      	movs	r3, #4
 8012ed0:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012ed2:	4618      	mov	r0, r3
 8012ed4:	e7f4      	b.n	8012ec0 <SDMMC_CmdWriteMultiBlock+0x58>
}
 8012ed6:	bc30      	pop	{r4, r5}
 8012ed8:	f7ff be00 	b.w	8012adc <SDMMC_GetCmdResp1.part.2>
 8012edc:	240024cc 	.word	0x240024cc
 8012ee0:	10624dd3 	.word	0x10624dd3
 8012ee4:	fffee0c0 	.word	0xfffee0c0
 8012ee8:	00200045 	.word	0x00200045
 8012eec:	002000c5 	.word	0x002000c5

08012ef0 <SDMMC_CmdStopTransfer>:
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8012ef0:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012ef2:	4a2c      	ldr	r2, [pc, #176]	; (8012fa4 <SDMMC_CmdStopTransfer+0xb4>)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8012ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012ef8:	6812      	ldr	r2, [r2, #0]
{
 8012efa:	b570      	push	{r4, r5, r6, lr}
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8012efc:	60c3      	str	r3, [r0, #12]
  SDMMCx->ARG = Command->Argument;
 8012efe:	2600      	movs	r6, #0
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8012f00:	68c1      	ldr	r1, [r0, #12]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012f02:	f241 140c 	movw	r4, #4364	; 0x110c
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012f06:	4b28      	ldr	r3, [pc, #160]	; (8012fa8 <SDMMC_CmdStopTransfer+0xb8>)
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8012f08:	f021 0140 	bic.w	r1, r1, #64	; 0x40
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012f0c:	4d27      	ldr	r5, [pc, #156]	; (8012fac <SDMMC_CmdStopTransfer+0xbc>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012f0e:	fba3 3202 	umull	r3, r2, r3, r2
 8012f12:	4b27      	ldr	r3, [pc, #156]	; (8012fb0 <SDMMC_CmdStopTransfer+0xc0>)
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8012f14:	60c1      	str	r1, [r0, #12]
  SDMMCx->ARG = Command->Argument;
 8012f16:	6086      	str	r6, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012f18:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012f1a:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012f1c:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012f20:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8012f22:	4924      	ldr	r1, [pc, #144]	; (8012fb4 <SDMMC_CmdStopTransfer+0xc4>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012f24:	432c      	orrs	r4, r5
 8012f26:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8012f28:	b1c3      	cbz	r3, 8012f5c <SDMMC_CmdStopTransfer+0x6c>
    sta_reg = SDMMCx->STA;
 8012f2a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8012f2c:	3b01      	subs	r3, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012f2e:	420a      	tst	r2, r1
 8012f30:	d0fa      	beq.n	8012f28 <SDMMC_CmdStopTransfer+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8012f32:	0492      	lsls	r2, r2, #18
 8012f34:	d4f8      	bmi.n	8012f28 <SDMMC_CmdStopTransfer+0x38>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012f36:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012f38:	075b      	lsls	r3, r3, #29
 8012f3a:	d41f      	bmi.n	8012f7c <SDMMC_CmdStopTransfer+0x8c>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012f3c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8012f3e:	f014 0401 	ands.w	r4, r4, #1
 8012f42:	d113      	bne.n	8012f6c <SDMMC_CmdStopTransfer+0x7c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012f44:	4b1c      	ldr	r3, [pc, #112]	; (8012fb8 <SDMMC_CmdStopTransfer+0xc8>)
 8012f46:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8012f48:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012f4a:	b2db      	uxtb	r3, r3
 8012f4c:	2b0c      	cmp	r3, #12
 8012f4e:	d01c      	beq.n	8012f8a <SDMMC_CmdStopTransfer+0x9a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012f50:	68c3      	ldr	r3, [r0, #12]
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012f52:	2401      	movs	r4, #1
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012f54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012f58:	60c3      	str	r3, [r0, #12]
 8012f5a:	e005      	b.n	8012f68 <SDMMC_CmdStopTransfer+0x78>
 8012f5c:	68c3      	ldr	r3, [r0, #12]
      return SDMMC_ERROR_TIMEOUT;
 8012f5e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012f62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012f66:	60c3      	str	r3, [r0, #12]
}
 8012f68:	4620      	mov	r0, r4
 8012f6a:	bd70      	pop	{r4, r5, r6, pc}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012f6c:	2401      	movs	r4, #1
 8012f6e:	6384      	str	r4, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012f70:	68c3      	ldr	r3, [r0, #12]
 8012f72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012f76:	60c3      	str	r3, [r0, #12]
}
 8012f78:	4620      	mov	r0, r4
 8012f7a:	bd70      	pop	{r4, r5, r6, pc}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012f7c:	2404      	movs	r4, #4
 8012f7e:	6384      	str	r4, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012f80:	68c3      	ldr	r3, [r0, #12]
 8012f82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012f86:	60c3      	str	r3, [r0, #12]
 8012f88:	e7ee      	b.n	8012f68 <SDMMC_CmdStopTransfer+0x78>
 8012f8a:	4605      	mov	r5, r0
 8012f8c:	f7ff fda6 	bl	8012adc <SDMMC_GetCmdResp1.part.2>
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8012f90:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8012f94:	bf18      	it	ne
 8012f96:	4604      	movne	r4, r0
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012f98:	68eb      	ldr	r3, [r5, #12]
 8012f9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012f9e:	60eb      	str	r3, [r5, #12]
 8012fa0:	e7e2      	b.n	8012f68 <SDMMC_CmdStopTransfer+0x78>
 8012fa2:	bf00      	nop
 8012fa4:	240024cc 	.word	0x240024cc
 8012fa8:	10624dd3 	.word	0x10624dd3
 8012fac:	fffee0c0 	.word	0xfffee0c0
 8012fb0:	05f5e100 	.word	0x05f5e100
 8012fb4:	00200045 	.word	0x00200045
 8012fb8:	002000c5 	.word	0x002000c5

08012fbc <SDMMC_CmdSelDesel>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012fbc:	4b1c      	ldr	r3, [pc, #112]	; (8013030 <SDMMC_CmdSelDesel+0x74>)
 8012fbe:	491d      	ldr	r1, [pc, #116]	; (8013034 <SDMMC_CmdSelDesel+0x78>)
 8012fc0:	681b      	ldr	r3, [r3, #0]
{
 8012fc2:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 8012fc4:	6082      	str	r2, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012fc6:	f241 1407 	movw	r4, #4359	; 0x1107
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012fca:	fba1 3203 	umull	r3, r2, r1, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012fce:	4d1a      	ldr	r5, [pc, #104]	; (8013038 <SDMMC_CmdSelDesel+0x7c>)
 8012fd0:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012fd2:	f241 3388 	movw	r3, #5000	; 0x1388
 8012fd6:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012fd8:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8012fda:	4918      	ldr	r1, [pc, #96]	; (801303c <SDMMC_CmdSelDesel+0x80>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8012fdc:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012fe0:	432c      	orrs	r4, r5
 8012fe2:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8012fe4:	f113 33ff 	adds.w	r3, r3, #4294967295
 8012fe8:	d312      	bcc.n	8013010 <SDMMC_CmdSelDesel+0x54>
    sta_reg = SDMMCx->STA;
 8012fea:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012fec:	420a      	tst	r2, r1
 8012fee:	d0f9      	beq.n	8012fe4 <SDMMC_CmdSelDesel+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8012ff0:	0494      	lsls	r4, r2, #18
 8012ff2:	d4f7      	bmi.n	8012fe4 <SDMMC_CmdSelDesel+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012ff4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012ff6:	075a      	lsls	r2, r3, #29
 8012ff8:	d413      	bmi.n	8013022 <SDMMC_CmdSelDesel+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012ffa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012ffc:	07db      	lsls	r3, r3, #31
 8012ffe:	d40b      	bmi.n	8013018 <SDMMC_CmdSelDesel+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013000:	4b0f      	ldr	r3, [pc, #60]	; (8013040 <SDMMC_CmdSelDesel+0x84>)
 8013002:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8013004:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8013006:	b2db      	uxtb	r3, r3
 8013008:	2b07      	cmp	r3, #7
 801300a:	d00e      	beq.n	801302a <SDMMC_CmdSelDesel+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801300c:	2001      	movs	r0, #1
  return errorstate;
 801300e:	e001      	b.n	8013014 <SDMMC_CmdSelDesel+0x58>
      return SDMMC_ERROR_TIMEOUT;
 8013010:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8013014:	bc30      	pop	{r4, r5}
 8013016:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013018:	2301      	movs	r3, #1
}
 801301a:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801301c:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801301e:	4618      	mov	r0, r3
}
 8013020:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013022:	2304      	movs	r3, #4
 8013024:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013026:	4618      	mov	r0, r3
 8013028:	e7f4      	b.n	8013014 <SDMMC_CmdSelDesel+0x58>
}
 801302a:	bc30      	pop	{r4, r5}
 801302c:	f7ff bd56 	b.w	8012adc <SDMMC_GetCmdResp1.part.2>
 8013030:	240024cc 	.word	0x240024cc
 8013034:	10624dd3 	.word	0x10624dd3
 8013038:	fffee0c0 	.word	0xfffee0c0
 801303c:	00200045 	.word	0x00200045
 8013040:	002000c5 	.word	0x002000c5

08013044 <SDMMC_CmdGoIdleState>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013044:	4b12      	ldr	r3, [pc, #72]	; (8013090 <SDMMC_CmdGoIdleState+0x4c>)
{
 8013046:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 8013048:	2200      	movs	r2, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801304a:	6818      	ldr	r0, [r3, #0]
 801304c:	f241 3388 	movw	r3, #5000	; 0x1388
{
 8013050:	b410      	push	{r4}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013052:	4c10      	ldr	r4, [pc, #64]	; (8013094 <SDMMC_CmdGoIdleState+0x50>)
  SDMMCx->ARG = Command->Argument;
 8013054:	608a      	str	r2, [r1, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013056:	fba4 4000 	umull	r4, r0, r4, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801305a:	4a0f      	ldr	r2, [pc, #60]	; (8013098 <SDMMC_CmdGoIdleState+0x54>)
 801305c:	68cc      	ldr	r4, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801305e:	0a40      	lsrs	r0, r0, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013060:	4022      	ands	r2, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013062:	fb03 f300 	mul.w	r3, r3, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013066:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801306a:	60ca      	str	r2, [r1, #12]
 801306c:	e002      	b.n	8013074 <SDMMC_CmdGoIdleState+0x30>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801306e:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8013070:	0612      	lsls	r2, r2, #24
 8013072:	d407      	bmi.n	8013084 <SDMMC_CmdGoIdleState+0x40>
    if (count-- == 0U)
 8013074:	f113 33ff 	adds.w	r3, r3, #4294967295
 8013078:	d2f9      	bcs.n	801306e <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 801307a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 801307e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013082:	4770      	bx	lr
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013084:	4b05      	ldr	r3, [pc, #20]	; (801309c <SDMMC_CmdGoIdleState+0x58>)
  return SDMMC_ERROR_NONE;
 8013086:	2000      	movs	r0, #0
}
 8013088:	f85d 4b04 	ldr.w	r4, [sp], #4
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801308c:	638b      	str	r3, [r1, #56]	; 0x38
}
 801308e:	4770      	bx	lr
 8013090:	240024cc 	.word	0x240024cc
 8013094:	10624dd3 	.word	0x10624dd3
 8013098:	fffee0c0 	.word	0xfffee0c0
 801309c:	002000c5 	.word	0x002000c5

080130a0 <SDMMC_CmdOperCond>:
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80130a0:	4a1c      	ldr	r2, [pc, #112]	; (8013114 <SDMMC_CmdOperCond+0x74>)
{
 80130a2:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80130a4:	4b1c      	ldr	r3, [pc, #112]	; (8013118 <SDMMC_CmdOperCond+0x78>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80130a6:	f241 1008 	movw	r0, #4360	; 0x1108
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80130aa:	6812      	ldr	r2, [r2, #0]
{
 80130ac:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 80130ae:	f44f 74d5 	mov.w	r4, #426	; 0x1aa
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80130b2:	fba3 3202 	umull	r3, r2, r3, r2
 80130b6:	f241 3388 	movw	r3, #5000	; 0x1388
  SDMMCx->ARG = Command->Argument;
 80130ba:	608c      	str	r4, [r1, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80130bc:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80130be:	68cd      	ldr	r5, [r1, #12]
 80130c0:	4c16      	ldr	r4, [pc, #88]	; (801311c <SDMMC_CmdOperCond+0x7c>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80130c2:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80130c6:	402c      	ands	r4, r5
 80130c8:	4320      	orrs	r0, r4
 80130ca:	60c8      	str	r0, [r1, #12]

  do
  {
    if (count-- == 0U)
 80130cc:	f113 33ff 	adds.w	r3, r3, #4294967295
 80130d0:	d313      	bcc.n	80130fa <SDMMC_CmdOperCond+0x5a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 80130d2:	6b4a      	ldr	r2, [r1, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80130d4:	f012 0f45 	tst.w	r2, #69	; 0x45
 80130d8:	d0f8      	beq.n	80130cc <SDMMC_CmdOperCond+0x2c>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80130da:	0492      	lsls	r2, r2, #18
 80130dc:	d4f6      	bmi.n	80130cc <SDMMC_CmdOperCond+0x2c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80130de:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80130e0:	075b      	lsls	r3, r3, #29
 80130e2:	d412      	bmi.n	801310a <SDMMC_CmdOperCond+0x6a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80130e4:	6b48      	ldr	r0, [r1, #52]	; 0x34
 80130e6:	f010 0001 	ands.w	r0, r0, #1
 80130ea:	d10a      	bne.n	8013102 <SDMMC_CmdOperCond+0x62>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80130ec:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80130ee:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80130f2:	d00d      	beq.n	8013110 <SDMMC_CmdOperCond+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80130f4:	2340      	movs	r3, #64	; 0x40
 80130f6:	638b      	str	r3, [r1, #56]	; 0x38
 80130f8:	e001      	b.n	80130fe <SDMMC_CmdOperCond+0x5e>
      return SDMMC_ERROR_TIMEOUT;
 80130fa:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80130fe:	bc30      	pop	{r4, r5}
 8013100:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013102:	2001      	movs	r0, #1
 8013104:	6388      	str	r0, [r1, #56]	; 0x38
}
 8013106:	bc30      	pop	{r4, r5}
 8013108:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801310a:	2004      	movs	r0, #4
 801310c:	6388      	str	r0, [r1, #56]	; 0x38
 801310e:	e7f6      	b.n	80130fe <SDMMC_CmdOperCond+0x5e>
  }

  return SDMMC_ERROR_NONE;
 8013110:	4618      	mov	r0, r3
  return errorstate;
 8013112:	e7f4      	b.n	80130fe <SDMMC_CmdOperCond+0x5e>
 8013114:	240024cc 	.word	0x240024cc
 8013118:	10624dd3 	.word	0x10624dd3
 801311c:	fffee0c0 	.word	0xfffee0c0

08013120 <SDMMC_CmdAppCommand>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013120:	4a1c      	ldr	r2, [pc, #112]	; (8013194 <SDMMC_CmdAppCommand+0x74>)
 8013122:	4b1d      	ldr	r3, [pc, #116]	; (8013198 <SDMMC_CmdAppCommand+0x78>)
 8013124:	6812      	ldr	r2, [r2, #0]
{
 8013126:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013128:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801312c:	4d1b      	ldr	r5, [pc, #108]	; (801319c <SDMMC_CmdAppCommand+0x7c>)
  SDMMCx->ARG = Command->Argument;
 801312e:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013130:	f241 1437 	movw	r4, #4407	; 0x1137
 8013134:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013136:	f241 3388 	movw	r3, #5000	; 0x1388
 801313a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801313c:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 801313e:	4918      	ldr	r1, [pc, #96]	; (80131a0 <SDMMC_CmdAppCommand+0x80>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013140:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013144:	432c      	orrs	r4, r5
 8013146:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8013148:	f113 33ff 	adds.w	r3, r3, #4294967295
 801314c:	d312      	bcc.n	8013174 <SDMMC_CmdAppCommand+0x54>
    sta_reg = SDMMCx->STA;
 801314e:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8013150:	420a      	tst	r2, r1
 8013152:	d0f9      	beq.n	8013148 <SDMMC_CmdAppCommand+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8013154:	0494      	lsls	r4, r2, #18
 8013156:	d4f7      	bmi.n	8013148 <SDMMC_CmdAppCommand+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013158:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801315a:	075a      	lsls	r2, r3, #29
 801315c:	d413      	bmi.n	8013186 <SDMMC_CmdAppCommand+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801315e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013160:	07db      	lsls	r3, r3, #31
 8013162:	d40b      	bmi.n	801317c <SDMMC_CmdAppCommand+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013164:	4b0f      	ldr	r3, [pc, #60]	; (80131a4 <SDMMC_CmdAppCommand+0x84>)
 8013166:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8013168:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801316a:	b2db      	uxtb	r3, r3
 801316c:	2b37      	cmp	r3, #55	; 0x37
 801316e:	d00e      	beq.n	801318e <SDMMC_CmdAppCommand+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013170:	2001      	movs	r0, #1
  return errorstate;
 8013172:	e001      	b.n	8013178 <SDMMC_CmdAppCommand+0x58>
      return SDMMC_ERROR_TIMEOUT;
 8013174:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8013178:	bc30      	pop	{r4, r5}
 801317a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801317c:	2301      	movs	r3, #1
}
 801317e:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013180:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013182:	4618      	mov	r0, r3
}
 8013184:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013186:	2304      	movs	r3, #4
 8013188:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801318a:	4618      	mov	r0, r3
 801318c:	e7f4      	b.n	8013178 <SDMMC_CmdAppCommand+0x58>
}
 801318e:	bc30      	pop	{r4, r5}
 8013190:	f7ff bca4 	b.w	8012adc <SDMMC_GetCmdResp1.part.2>
 8013194:	240024cc 	.word	0x240024cc
 8013198:	10624dd3 	.word	0x10624dd3
 801319c:	fffee0c0 	.word	0xfffee0c0
 80131a0:	00200045 	.word	0x00200045
 80131a4:	002000c5 	.word	0x002000c5

080131a8 <SDMMC_CmdAppOperCommand>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80131a8:	4a15      	ldr	r2, [pc, #84]	; (8013200 <SDMMC_CmdAppOperCommand+0x58>)
 80131aa:	4b16      	ldr	r3, [pc, #88]	; (8013204 <SDMMC_CmdAppOperCommand+0x5c>)
 80131ac:	6812      	ldr	r2, [r2, #0]
{
 80131ae:	b430      	push	{r4, r5}
 80131b0:	4604      	mov	r4, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80131b2:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80131b6:	f241 1029 	movw	r0, #4393	; 0x1129
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80131ba:	f241 3388 	movw	r3, #5000	; 0x1388
  SDMMCx->ARG = Command->Argument;
 80131be:	60a1      	str	r1, [r4, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80131c0:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80131c2:	68e5      	ldr	r5, [r4, #12]
 80131c4:	4910      	ldr	r1, [pc, #64]	; (8013208 <SDMMC_CmdAppOperCommand+0x60>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80131c6:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80131ca:	4029      	ands	r1, r5
 80131cc:	4308      	orrs	r0, r1
 80131ce:	60e0      	str	r0, [r4, #12]
    if (count-- == 0U)
 80131d0:	f113 33ff 	adds.w	r3, r3, #4294967295
 80131d4:	d30d      	bcc.n	80131f2 <SDMMC_CmdAppOperCommand+0x4a>
    sta_reg = SDMMCx->STA;
 80131d6:	6b62      	ldr	r2, [r4, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80131d8:	f012 0f45 	tst.w	r2, #69	; 0x45
 80131dc:	d0f8      	beq.n	80131d0 <SDMMC_CmdAppOperCommand+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80131de:	0492      	lsls	r2, r2, #18
 80131e0:	d4f6      	bmi.n	80131d0 <SDMMC_CmdAppOperCommand+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80131e2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80131e4:	f010 0004 	ands.w	r0, r0, #4
 80131e8:	d107      	bne.n	80131fa <SDMMC_CmdAppOperCommand+0x52>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80131ea:	4b08      	ldr	r3, [pc, #32]	; (801320c <SDMMC_CmdAppOperCommand+0x64>)
 80131ec:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80131ee:	bc30      	pop	{r4, r5}
 80131f0:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80131f2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80131f6:	bc30      	pop	{r4, r5}
 80131f8:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80131fa:	2004      	movs	r0, #4
 80131fc:	63a0      	str	r0, [r4, #56]	; 0x38
 80131fe:	e7fa      	b.n	80131f6 <SDMMC_CmdAppOperCommand+0x4e>
 8013200:	240024cc 	.word	0x240024cc
 8013204:	10624dd3 	.word	0x10624dd3
 8013208:	fffee0c0 	.word	0xfffee0c0
 801320c:	002000c5 	.word	0x002000c5

08013210 <SDMMC_CmdBusWidth>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013210:	4a1c      	ldr	r2, [pc, #112]	; (8013284 <SDMMC_CmdBusWidth+0x74>)
 8013212:	4b1d      	ldr	r3, [pc, #116]	; (8013288 <SDMMC_CmdBusWidth+0x78>)
 8013214:	6812      	ldr	r2, [r2, #0]
{
 8013216:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013218:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801321c:	4d1b      	ldr	r5, [pc, #108]	; (801328c <SDMMC_CmdBusWidth+0x7c>)
  SDMMCx->ARG = Command->Argument;
 801321e:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013220:	f241 1406 	movw	r4, #4358	; 0x1106
 8013224:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013226:	f241 3388 	movw	r3, #5000	; 0x1388
 801322a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801322c:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 801322e:	4918      	ldr	r1, [pc, #96]	; (8013290 <SDMMC_CmdBusWidth+0x80>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013230:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013234:	432c      	orrs	r4, r5
 8013236:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8013238:	f113 33ff 	adds.w	r3, r3, #4294967295
 801323c:	d312      	bcc.n	8013264 <SDMMC_CmdBusWidth+0x54>
    sta_reg = SDMMCx->STA;
 801323e:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8013240:	420a      	tst	r2, r1
 8013242:	d0f9      	beq.n	8013238 <SDMMC_CmdBusWidth+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8013244:	0494      	lsls	r4, r2, #18
 8013246:	d4f7      	bmi.n	8013238 <SDMMC_CmdBusWidth+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013248:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801324a:	075a      	lsls	r2, r3, #29
 801324c:	d413      	bmi.n	8013276 <SDMMC_CmdBusWidth+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801324e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013250:	07db      	lsls	r3, r3, #31
 8013252:	d40b      	bmi.n	801326c <SDMMC_CmdBusWidth+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013254:	4b0f      	ldr	r3, [pc, #60]	; (8013294 <SDMMC_CmdBusWidth+0x84>)
 8013256:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8013258:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801325a:	b2db      	uxtb	r3, r3
 801325c:	2b06      	cmp	r3, #6
 801325e:	d00e      	beq.n	801327e <SDMMC_CmdBusWidth+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013260:	2001      	movs	r0, #1
  return errorstate;
 8013262:	e001      	b.n	8013268 <SDMMC_CmdBusWidth+0x58>
      return SDMMC_ERROR_TIMEOUT;
 8013264:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8013268:	bc30      	pop	{r4, r5}
 801326a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801326c:	2301      	movs	r3, #1
}
 801326e:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013270:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013272:	4618      	mov	r0, r3
}
 8013274:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013276:	2304      	movs	r3, #4
 8013278:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801327a:	4618      	mov	r0, r3
 801327c:	e7f4      	b.n	8013268 <SDMMC_CmdBusWidth+0x58>
}
 801327e:	bc30      	pop	{r4, r5}
 8013280:	f7ff bc2c 	b.w	8012adc <SDMMC_GetCmdResp1.part.2>
 8013284:	240024cc 	.word	0x240024cc
 8013288:	10624dd3 	.word	0x10624dd3
 801328c:	fffee0c0 	.word	0xfffee0c0
 8013290:	00200045 	.word	0x00200045
 8013294:	002000c5 	.word	0x002000c5

08013298 <SDMMC_CmdSendSCR>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013298:	4a1d      	ldr	r2, [pc, #116]	; (8013310 <SDMMC_CmdSendSCR+0x78>)
  SDMMCx->ARG = Command->Argument;
 801329a:	2100      	movs	r1, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801329c:	4b1d      	ldr	r3, [pc, #116]	; (8013314 <SDMMC_CmdSendSCR+0x7c>)
 801329e:	6812      	ldr	r2, [r2, #0]
{
 80132a0:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80132a2:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80132a6:	4d1c      	ldr	r5, [pc, #112]	; (8013318 <SDMMC_CmdSendSCR+0x80>)
  SDMMCx->ARG = Command->Argument;
 80132a8:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80132aa:	f241 1433 	movw	r4, #4403	; 0x1133
 80132ae:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80132b0:	f241 3388 	movw	r3, #5000	; 0x1388
 80132b4:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80132b6:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80132b8:	4918      	ldr	r1, [pc, #96]	; (801331c <SDMMC_CmdSendSCR+0x84>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80132ba:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80132be:	432c      	orrs	r4, r5
 80132c0:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 80132c2:	f113 33ff 	adds.w	r3, r3, #4294967295
 80132c6:	d312      	bcc.n	80132ee <SDMMC_CmdSendSCR+0x56>
    sta_reg = SDMMCx->STA;
 80132c8:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80132ca:	420a      	tst	r2, r1
 80132cc:	d0f9      	beq.n	80132c2 <SDMMC_CmdSendSCR+0x2a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80132ce:	0494      	lsls	r4, r2, #18
 80132d0:	d4f7      	bmi.n	80132c2 <SDMMC_CmdSendSCR+0x2a>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80132d2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80132d4:	075a      	lsls	r2, r3, #29
 80132d6:	d413      	bmi.n	8013300 <SDMMC_CmdSendSCR+0x68>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80132d8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80132da:	07db      	lsls	r3, r3, #31
 80132dc:	d40b      	bmi.n	80132f6 <SDMMC_CmdSendSCR+0x5e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80132de:	4b10      	ldr	r3, [pc, #64]	; (8013320 <SDMMC_CmdSendSCR+0x88>)
 80132e0:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80132e2:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80132e4:	b2db      	uxtb	r3, r3
 80132e6:	2b33      	cmp	r3, #51	; 0x33
 80132e8:	d00e      	beq.n	8013308 <SDMMC_CmdSendSCR+0x70>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80132ea:	2001      	movs	r0, #1
  return errorstate;
 80132ec:	e001      	b.n	80132f2 <SDMMC_CmdSendSCR+0x5a>
      return SDMMC_ERROR_TIMEOUT;
 80132ee:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80132f2:	bc30      	pop	{r4, r5}
 80132f4:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80132f6:	2301      	movs	r3, #1
}
 80132f8:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80132fa:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80132fc:	4618      	mov	r0, r3
}
 80132fe:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013300:	2304      	movs	r3, #4
 8013302:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013304:	4618      	mov	r0, r3
 8013306:	e7f4      	b.n	80132f2 <SDMMC_CmdSendSCR+0x5a>
}
 8013308:	bc30      	pop	{r4, r5}
 801330a:	f7ff bbe7 	b.w	8012adc <SDMMC_GetCmdResp1.part.2>
 801330e:	bf00      	nop
 8013310:	240024cc 	.word	0x240024cc
 8013314:	10624dd3 	.word	0x10624dd3
 8013318:	fffee0c0 	.word	0xfffee0c0
 801331c:	00200045 	.word	0x00200045
 8013320:	002000c5 	.word	0x002000c5

08013324 <SDMMC_CmdSendCID>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013324:	4a19      	ldr	r2, [pc, #100]	; (801338c <SDMMC_CmdSendCID+0x68>)
{
 8013326:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013328:	4b19      	ldr	r3, [pc, #100]	; (8013390 <SDMMC_CmdSendCID+0x6c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801332a:	f241 3002 	movw	r0, #4866	; 0x1302
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801332e:	6812      	ldr	r2, [r2, #0]
{
 8013330:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 8013332:	2400      	movs	r4, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013334:	fba3 3202 	umull	r3, r2, r3, r2
 8013338:	f241 3388 	movw	r3, #5000	; 0x1388
  SDMMCx->ARG = Command->Argument;
 801333c:	608c      	str	r4, [r1, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801333e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013340:	68cd      	ldr	r5, [r1, #12]
 8013342:	4c14      	ldr	r4, [pc, #80]	; (8013394 <SDMMC_CmdSendCID+0x70>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013344:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013348:	402c      	ands	r4, r5
 801334a:	4320      	orrs	r0, r4
 801334c:	60c8      	str	r0, [r1, #12]
    if (count-- == 0U)
 801334e:	f113 33ff 	adds.w	r3, r3, #4294967295
 8013352:	d310      	bcc.n	8013376 <SDMMC_CmdSendCID+0x52>
    sta_reg = SDMMCx->STA;
 8013354:	6b4a      	ldr	r2, [r1, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8013356:	f012 0f45 	tst.w	r2, #69	; 0x45
 801335a:	d0f8      	beq.n	801334e <SDMMC_CmdSendCID+0x2a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801335c:	0492      	lsls	r2, r2, #18
 801335e:	d4f6      	bmi.n	801334e <SDMMC_CmdSendCID+0x2a>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013360:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8013362:	075b      	lsls	r3, r3, #29
 8013364:	d40f      	bmi.n	8013386 <SDMMC_CmdSendCID+0x62>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013366:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8013368:	f010 0001 	ands.w	r0, r0, #1
 801336c:	d107      	bne.n	801337e <SDMMC_CmdSendCID+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801336e:	4b0a      	ldr	r3, [pc, #40]	; (8013398 <SDMMC_CmdSendCID+0x74>)
 8013370:	638b      	str	r3, [r1, #56]	; 0x38
}
 8013372:	bc30      	pop	{r4, r5}
 8013374:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8013376:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 801337a:	bc30      	pop	{r4, r5}
 801337c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801337e:	2001      	movs	r0, #1
 8013380:	6388      	str	r0, [r1, #56]	; 0x38
}
 8013382:	bc30      	pop	{r4, r5}
 8013384:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013386:	2004      	movs	r0, #4
 8013388:	6388      	str	r0, [r1, #56]	; 0x38
 801338a:	e7f6      	b.n	801337a <SDMMC_CmdSendCID+0x56>
 801338c:	240024cc 	.word	0x240024cc
 8013390:	10624dd3 	.word	0x10624dd3
 8013394:	fffee0c0 	.word	0xfffee0c0
 8013398:	002000c5 	.word	0x002000c5

0801339c <SDMMC_CmdSendCSD>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801339c:	4a19      	ldr	r2, [pc, #100]	; (8013404 <SDMMC_CmdSendCSD+0x68>)
 801339e:	4b1a      	ldr	r3, [pc, #104]	; (8013408 <SDMMC_CmdSendCSD+0x6c>)
 80133a0:	6812      	ldr	r2, [r2, #0]
{
 80133a2:	b430      	push	{r4, r5}
 80133a4:	4604      	mov	r4, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80133a6:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80133aa:	f241 3009 	movw	r0, #4873	; 0x1309
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80133ae:	f241 3388 	movw	r3, #5000	; 0x1388
  SDMMCx->ARG = Command->Argument;
 80133b2:	60a1      	str	r1, [r4, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80133b4:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80133b6:	68e5      	ldr	r5, [r4, #12]
 80133b8:	4914      	ldr	r1, [pc, #80]	; (801340c <SDMMC_CmdSendCSD+0x70>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80133ba:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80133be:	4029      	ands	r1, r5
 80133c0:	4308      	orrs	r0, r1
 80133c2:	60e0      	str	r0, [r4, #12]
    if (count-- == 0U)
 80133c4:	f113 33ff 	adds.w	r3, r3, #4294967295
 80133c8:	d310      	bcc.n	80133ec <SDMMC_CmdSendCSD+0x50>
    sta_reg = SDMMCx->STA;
 80133ca:	6b62      	ldr	r2, [r4, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80133cc:	f012 0f45 	tst.w	r2, #69	; 0x45
 80133d0:	d0f8      	beq.n	80133c4 <SDMMC_CmdSendCSD+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80133d2:	0492      	lsls	r2, r2, #18
 80133d4:	d4f6      	bmi.n	80133c4 <SDMMC_CmdSendCSD+0x28>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80133d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80133d8:	075b      	lsls	r3, r3, #29
 80133da:	d40f      	bmi.n	80133fc <SDMMC_CmdSendCSD+0x60>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80133dc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80133de:	f010 0001 	ands.w	r0, r0, #1
 80133e2:	d107      	bne.n	80133f4 <SDMMC_CmdSendCSD+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80133e4:	4b0a      	ldr	r3, [pc, #40]	; (8013410 <SDMMC_CmdSendCSD+0x74>)
 80133e6:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80133e8:	bc30      	pop	{r4, r5}
 80133ea:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80133ec:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80133f0:	bc30      	pop	{r4, r5}
 80133f2:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80133f4:	2001      	movs	r0, #1
 80133f6:	63a0      	str	r0, [r4, #56]	; 0x38
}
 80133f8:	bc30      	pop	{r4, r5}
 80133fa:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80133fc:	2004      	movs	r0, #4
 80133fe:	63a0      	str	r0, [r4, #56]	; 0x38
 8013400:	e7f6      	b.n	80133f0 <SDMMC_CmdSendCSD+0x54>
 8013402:	bf00      	nop
 8013404:	240024cc 	.word	0x240024cc
 8013408:	10624dd3 	.word	0x10624dd3
 801340c:	fffee0c0 	.word	0xfffee0c0
 8013410:	002000c5 	.word	0x002000c5

08013414 <SDMMC_CmdSetRelAdd>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013414:	4b25      	ldr	r3, [pc, #148]	; (80134ac <SDMMC_CmdSetRelAdd+0x98>)
 8013416:	4a26      	ldr	r2, [pc, #152]	; (80134b0 <SDMMC_CmdSetRelAdd+0x9c>)
 8013418:	681b      	ldr	r3, [r3, #0]
{
 801341a:	b470      	push	{r4, r5, r6}
  SDMMCx->ARG = Command->Argument;
 801341c:	2400      	movs	r4, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801341e:	fba2 2303 	umull	r2, r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013422:	4d24      	ldr	r5, [pc, #144]	; (80134b4 <SDMMC_CmdSetRelAdd+0xa0>)
  SDMMCx->ARG = Command->Argument;
 8013424:	6084      	str	r4, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013426:	0a5a      	lsrs	r2, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013428:	68c6      	ldr	r6, [r0, #12]
 801342a:	f241 1403 	movw	r4, #4355	; 0x1103
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801342e:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013432:	4035      	ands	r5, r6
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013434:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013438:	432c      	orrs	r4, r5
 801343a:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 801343c:	f113 33ff 	adds.w	r3, r3, #4294967295
 8013440:	d311      	bcc.n	8013466 <SDMMC_CmdSetRelAdd+0x52>
    sta_reg = SDMMCx->STA;
 8013442:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8013444:	f012 0f45 	tst.w	r2, #69	; 0x45
 8013448:	d0f8      	beq.n	801343c <SDMMC_CmdSetRelAdd+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801344a:	0496      	lsls	r6, r2, #18
 801344c:	d4f6      	bmi.n	801343c <SDMMC_CmdSetRelAdd+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801344e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013450:	075d      	lsls	r5, r3, #29
 8013452:	d411      	bmi.n	8013478 <SDMMC_CmdSetRelAdd+0x64>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013454:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013456:	07dc      	lsls	r4, r3, #31
 8013458:	d409      	bmi.n	801346e <SDMMC_CmdSetRelAdd+0x5a>
  return (uint8_t)(SDMMCx->RESPCMD);
 801345a:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801345c:	b2db      	uxtb	r3, r3
 801345e:	2b03      	cmp	r3, #3
 8013460:	d00e      	beq.n	8013480 <SDMMC_CmdSetRelAdd+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013462:	2001      	movs	r0, #1
 8013464:	e001      	b.n	801346a <SDMMC_CmdSetRelAdd+0x56>
      return SDMMC_ERROR_TIMEOUT;
 8013466:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 801346a:	bc70      	pop	{r4, r5, r6}
 801346c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801346e:	2301      	movs	r3, #1
}
 8013470:	bc70      	pop	{r4, r5, r6}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013472:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013474:	4618      	mov	r0, r3
}
 8013476:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013478:	2304      	movs	r3, #4
 801347a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801347c:	4618      	mov	r0, r3
 801347e:	e7f4      	b.n	801346a <SDMMC_CmdSetRelAdd+0x56>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013480:	4b0d      	ldr	r3, [pc, #52]	; (80134b8 <SDMMC_CmdSetRelAdd+0xa4>)
 8013482:	6383      	str	r3, [r0, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 8013484:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8013486:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 801348a:	d009      	beq.n	80134a0 <SDMMC_CmdSetRelAdd+0x8c>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801348c:	045a      	lsls	r2, r3, #17
 801348e:	d40a      	bmi.n	80134a6 <SDMMC_CmdSetRelAdd+0x92>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8013490:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8013494:	bf0c      	ite	eq
 8013496:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 801349a:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 801349e:	e7e4      	b.n	801346a <SDMMC_CmdSetRelAdd+0x56>
    *pRCA = (uint16_t) (response_r1 >> 16);
 80134a0:	0c1b      	lsrs	r3, r3, #16
 80134a2:	800b      	strh	r3, [r1, #0]
 80134a4:	e7e1      	b.n	801346a <SDMMC_CmdSetRelAdd+0x56>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80134a6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80134aa:	e7de      	b.n	801346a <SDMMC_CmdSetRelAdd+0x56>
 80134ac:	240024cc 	.word	0x240024cc
 80134b0:	10624dd3 	.word	0x10624dd3
 80134b4:	fffee0c0 	.word	0xfffee0c0
 80134b8:	002000c5 	.word	0x002000c5

080134bc <SDMMC_CmdSendStatus>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80134bc:	4a1c      	ldr	r2, [pc, #112]	; (8013530 <SDMMC_CmdSendStatus+0x74>)
 80134be:	4b1d      	ldr	r3, [pc, #116]	; (8013534 <SDMMC_CmdSendStatus+0x78>)
 80134c0:	6812      	ldr	r2, [r2, #0]
{
 80134c2:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80134c4:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80134c8:	4d1b      	ldr	r5, [pc, #108]	; (8013538 <SDMMC_CmdSendStatus+0x7c>)
  SDMMCx->ARG = Command->Argument;
 80134ca:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80134cc:	f241 140d 	movw	r4, #4365	; 0x110d
 80134d0:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80134d2:	f241 3388 	movw	r3, #5000	; 0x1388
 80134d6:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80134d8:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80134da:	4918      	ldr	r1, [pc, #96]	; (801353c <SDMMC_CmdSendStatus+0x80>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80134dc:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80134e0:	432c      	orrs	r4, r5
 80134e2:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 80134e4:	f113 33ff 	adds.w	r3, r3, #4294967295
 80134e8:	d312      	bcc.n	8013510 <SDMMC_CmdSendStatus+0x54>
    sta_reg = SDMMCx->STA;
 80134ea:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80134ec:	420a      	tst	r2, r1
 80134ee:	d0f9      	beq.n	80134e4 <SDMMC_CmdSendStatus+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80134f0:	0494      	lsls	r4, r2, #18
 80134f2:	d4f7      	bmi.n	80134e4 <SDMMC_CmdSendStatus+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80134f4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80134f6:	075a      	lsls	r2, r3, #29
 80134f8:	d413      	bmi.n	8013522 <SDMMC_CmdSendStatus+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80134fa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80134fc:	07db      	lsls	r3, r3, #31
 80134fe:	d40b      	bmi.n	8013518 <SDMMC_CmdSendStatus+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013500:	4b0f      	ldr	r3, [pc, #60]	; (8013540 <SDMMC_CmdSendStatus+0x84>)
 8013502:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8013504:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8013506:	b2db      	uxtb	r3, r3
 8013508:	2b0d      	cmp	r3, #13
 801350a:	d00e      	beq.n	801352a <SDMMC_CmdSendStatus+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801350c:	2001      	movs	r0, #1
  return errorstate;
 801350e:	e001      	b.n	8013514 <SDMMC_CmdSendStatus+0x58>
      return SDMMC_ERROR_TIMEOUT;
 8013510:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8013514:	bc30      	pop	{r4, r5}
 8013516:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013518:	2301      	movs	r3, #1
}
 801351a:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801351c:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801351e:	4618      	mov	r0, r3
}
 8013520:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013522:	2304      	movs	r3, #4
 8013524:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013526:	4618      	mov	r0, r3
 8013528:	e7f4      	b.n	8013514 <SDMMC_CmdSendStatus+0x58>
}
 801352a:	bc30      	pop	{r4, r5}
 801352c:	f7ff bad6 	b.w	8012adc <SDMMC_GetCmdResp1.part.2>
 8013530:	240024cc 	.word	0x240024cc
 8013534:	10624dd3 	.word	0x10624dd3
 8013538:	fffee0c0 	.word	0xfffee0c0
 801353c:	00200045 	.word	0x00200045
 8013540:	002000c5 	.word	0x002000c5

08013544 <SDMMC_CmdStatusRegister>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013544:	4a1d      	ldr	r2, [pc, #116]	; (80135bc <SDMMC_CmdStatusRegister+0x78>)
  SDMMCx->ARG = Command->Argument;
 8013546:	2100      	movs	r1, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013548:	4b1d      	ldr	r3, [pc, #116]	; (80135c0 <SDMMC_CmdStatusRegister+0x7c>)
 801354a:	6812      	ldr	r2, [r2, #0]
{
 801354c:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801354e:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013552:	4d1c      	ldr	r5, [pc, #112]	; (80135c4 <SDMMC_CmdStatusRegister+0x80>)
  SDMMCx->ARG = Command->Argument;
 8013554:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013556:	f241 140d 	movw	r4, #4365	; 0x110d
 801355a:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801355c:	f241 3388 	movw	r3, #5000	; 0x1388
 8013560:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013562:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8013564:	4918      	ldr	r1, [pc, #96]	; (80135c8 <SDMMC_CmdStatusRegister+0x84>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013566:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801356a:	432c      	orrs	r4, r5
 801356c:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 801356e:	f113 33ff 	adds.w	r3, r3, #4294967295
 8013572:	d312      	bcc.n	801359a <SDMMC_CmdStatusRegister+0x56>
    sta_reg = SDMMCx->STA;
 8013574:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8013576:	420a      	tst	r2, r1
 8013578:	d0f9      	beq.n	801356e <SDMMC_CmdStatusRegister+0x2a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 801357a:	0494      	lsls	r4, r2, #18
 801357c:	d4f7      	bmi.n	801356e <SDMMC_CmdStatusRegister+0x2a>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801357e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013580:	075a      	lsls	r2, r3, #29
 8013582:	d413      	bmi.n	80135ac <SDMMC_CmdStatusRegister+0x68>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013584:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013586:	07db      	lsls	r3, r3, #31
 8013588:	d40b      	bmi.n	80135a2 <SDMMC_CmdStatusRegister+0x5e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801358a:	4b10      	ldr	r3, [pc, #64]	; (80135cc <SDMMC_CmdStatusRegister+0x88>)
 801358c:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 801358e:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8013590:	b2db      	uxtb	r3, r3
 8013592:	2b0d      	cmp	r3, #13
 8013594:	d00e      	beq.n	80135b4 <SDMMC_CmdStatusRegister+0x70>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013596:	2001      	movs	r0, #1
  return errorstate;
 8013598:	e001      	b.n	801359e <SDMMC_CmdStatusRegister+0x5a>
      return SDMMC_ERROR_TIMEOUT;
 801359a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 801359e:	bc30      	pop	{r4, r5}
 80135a0:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80135a2:	2301      	movs	r3, #1
}
 80135a4:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80135a6:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80135a8:	4618      	mov	r0, r3
}
 80135aa:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80135ac:	2304      	movs	r3, #4
 80135ae:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80135b0:	4618      	mov	r0, r3
 80135b2:	e7f4      	b.n	801359e <SDMMC_CmdStatusRegister+0x5a>
}
 80135b4:	bc30      	pop	{r4, r5}
 80135b6:	f7ff ba91 	b.w	8012adc <SDMMC_GetCmdResp1.part.2>
 80135ba:	bf00      	nop
 80135bc:	240024cc 	.word	0x240024cc
 80135c0:	10624dd3 	.word	0x10624dd3
 80135c4:	fffee0c0 	.word	0xfffee0c0
 80135c8:	00200045 	.word	0x00200045
 80135cc:	002000c5 	.word	0x002000c5

080135d0 <SDMMC_CmdSwitch>:
 80135d0:	4a1c      	ldr	r2, [pc, #112]	; (8013644 <SDMMC_CmdSwitch+0x74>)
 80135d2:	4b1d      	ldr	r3, [pc, #116]	; (8013648 <SDMMC_CmdSwitch+0x78>)
 80135d4:	6812      	ldr	r2, [r2, #0]
 80135d6:	b430      	push	{r4, r5}
 80135d8:	fba3 3202 	umull	r3, r2, r3, r2
 80135dc:	4d1b      	ldr	r5, [pc, #108]	; (801364c <SDMMC_CmdSwitch+0x7c>)
 80135de:	6081      	str	r1, [r0, #8]
 80135e0:	f241 1406 	movw	r4, #4358	; 0x1106
 80135e4:	68c1      	ldr	r1, [r0, #12]
 80135e6:	f241 3388 	movw	r3, #5000	; 0x1388
 80135ea:	0a52      	lsrs	r2, r2, #9
 80135ec:	400d      	ands	r5, r1
 80135ee:	4918      	ldr	r1, [pc, #96]	; (8013650 <SDMMC_CmdSwitch+0x80>)
 80135f0:	fb03 f302 	mul.w	r3, r3, r2
 80135f4:	432c      	orrs	r4, r5
 80135f6:	60c4      	str	r4, [r0, #12]
 80135f8:	f113 33ff 	adds.w	r3, r3, #4294967295
 80135fc:	d312      	bcc.n	8013624 <SDMMC_CmdSwitch+0x54>
 80135fe:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8013600:	420a      	tst	r2, r1
 8013602:	d0f9      	beq.n	80135f8 <SDMMC_CmdSwitch+0x28>
 8013604:	0494      	lsls	r4, r2, #18
 8013606:	d4f7      	bmi.n	80135f8 <SDMMC_CmdSwitch+0x28>
 8013608:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801360a:	075a      	lsls	r2, r3, #29
 801360c:	d413      	bmi.n	8013636 <SDMMC_CmdSwitch+0x66>
 801360e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013610:	07db      	lsls	r3, r3, #31
 8013612:	d40b      	bmi.n	801362c <SDMMC_CmdSwitch+0x5c>
 8013614:	4b0f      	ldr	r3, [pc, #60]	; (8013654 <SDMMC_CmdSwitch+0x84>)
 8013616:	6383      	str	r3, [r0, #56]	; 0x38
 8013618:	6903      	ldr	r3, [r0, #16]
 801361a:	b2db      	uxtb	r3, r3
 801361c:	2b06      	cmp	r3, #6
 801361e:	d00e      	beq.n	801363e <SDMMC_CmdSwitch+0x6e>
 8013620:	2001      	movs	r0, #1
 8013622:	e001      	b.n	8013628 <SDMMC_CmdSwitch+0x58>
 8013624:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8013628:	bc30      	pop	{r4, r5}
 801362a:	4770      	bx	lr
 801362c:	2301      	movs	r3, #1
 801362e:	bc30      	pop	{r4, r5}
 8013630:	6383      	str	r3, [r0, #56]	; 0x38
 8013632:	4618      	mov	r0, r3
 8013634:	4770      	bx	lr
 8013636:	2304      	movs	r3, #4
 8013638:	6383      	str	r3, [r0, #56]	; 0x38
 801363a:	4618      	mov	r0, r3
 801363c:	e7f4      	b.n	8013628 <SDMMC_CmdSwitch+0x58>
 801363e:	bc30      	pop	{r4, r5}
 8013640:	f7ff ba4c 	b.w	8012adc <SDMMC_GetCmdResp1.part.2>
 8013644:	240024cc 	.word	0x240024cc
 8013648:	10624dd3 	.word	0x10624dd3
 801364c:	fffee0c0 	.word	0xfffee0c0
 8013650:	00200045 	.word	0x00200045
 8013654:	002000c5 	.word	0x002000c5

08013658 <SDMMC_CmdVoltageSwitch>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013658:	4a1d      	ldr	r2, [pc, #116]	; (80136d0 <SDMMC_CmdVoltageSwitch+0x78>)
  SDMMCx->ARG = Command->Argument;
 801365a:	2100      	movs	r1, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801365c:	4b1d      	ldr	r3, [pc, #116]	; (80136d4 <SDMMC_CmdVoltageSwitch+0x7c>)
 801365e:	6812      	ldr	r2, [r2, #0]
{
 8013660:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013662:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013666:	4d1c      	ldr	r5, [pc, #112]	; (80136d8 <SDMMC_CmdVoltageSwitch+0x80>)
  SDMMCx->ARG = Command->Argument;
 8013668:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801366a:	f241 140b 	movw	r4, #4363	; 0x110b
 801366e:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013670:	f241 3388 	movw	r3, #5000	; 0x1388
 8013674:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8013676:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8013678:	4918      	ldr	r1, [pc, #96]	; (80136dc <SDMMC_CmdVoltageSwitch+0x84>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801367a:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801367e:	432c      	orrs	r4, r5
 8013680:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8013682:	f113 33ff 	adds.w	r3, r3, #4294967295
 8013686:	d312      	bcc.n	80136ae <SDMMC_CmdVoltageSwitch+0x56>
    sta_reg = SDMMCx->STA;
 8013688:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801368a:	420a      	tst	r2, r1
 801368c:	d0f9      	beq.n	8013682 <SDMMC_CmdVoltageSwitch+0x2a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 801368e:	0494      	lsls	r4, r2, #18
 8013690:	d4f7      	bmi.n	8013682 <SDMMC_CmdVoltageSwitch+0x2a>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013692:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013694:	075a      	lsls	r2, r3, #29
 8013696:	d413      	bmi.n	80136c0 <SDMMC_CmdVoltageSwitch+0x68>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013698:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801369a:	07db      	lsls	r3, r3, #31
 801369c:	d40b      	bmi.n	80136b6 <SDMMC_CmdVoltageSwitch+0x5e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801369e:	4b10      	ldr	r3, [pc, #64]	; (80136e0 <SDMMC_CmdVoltageSwitch+0x88>)
 80136a0:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80136a2:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80136a4:	b2db      	uxtb	r3, r3
 80136a6:	2b0b      	cmp	r3, #11
 80136a8:	d00e      	beq.n	80136c8 <SDMMC_CmdVoltageSwitch+0x70>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80136aa:	2001      	movs	r0, #1
  return errorstate;
 80136ac:	e001      	b.n	80136b2 <SDMMC_CmdVoltageSwitch+0x5a>
      return SDMMC_ERROR_TIMEOUT;
 80136ae:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80136b2:	bc30      	pop	{r4, r5}
 80136b4:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80136b6:	2301      	movs	r3, #1
}
 80136b8:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80136ba:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80136bc:	4618      	mov	r0, r3
}
 80136be:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80136c0:	2304      	movs	r3, #4
 80136c2:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80136c4:	4618      	mov	r0, r3
 80136c6:	e7f4      	b.n	80136b2 <SDMMC_CmdVoltageSwitch+0x5a>
}
 80136c8:	bc30      	pop	{r4, r5}
 80136ca:	f7ff ba07 	b.w	8012adc <SDMMC_GetCmdResp1.part.2>
 80136ce:	bf00      	nop
 80136d0:	240024cc 	.word	0x240024cc
 80136d4:	10624dd3 	.word	0x10624dd3
 80136d8:	fffee0c0 	.word	0xfffee0c0
 80136dc:	00200045 	.word	0x00200045
 80136e0:	002000c5 	.word	0x002000c5

080136e4 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80136e4:	287f      	cmp	r0, #127	; 0x7f
 80136e6:	d918      	bls.n	801371a <ff_convert+0x36>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 80136e8:	b981      	cbnz	r1, 801370c <ff_convert+0x28>
 80136ea:	4b0e      	ldr	r3, [pc, #56]	; (8013724 <ff_convert+0x40>)
{
 80136ec:	b410      	push	{r4}
 80136ee:	e001      	b.n	80136f4 <ff_convert+0x10>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80136f0:	2980      	cmp	r1, #128	; 0x80
 80136f2:	d015      	beq.n	8013720 <ff_convert+0x3c>
				if (chr == Tbl[c]) break;
 80136f4:	f833 2b02 	ldrh.w	r2, [r3], #2
 80136f8:	b28c      	uxth	r4, r1
 80136fa:	3101      	adds	r1, #1
 80136fc:	4282      	cmp	r2, r0
 80136fe:	d1f7      	bne.n	80136f0 <ff_convert+0xc>
 8013700:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8013704:	b280      	uxth	r0, r0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
 8013706:	f85d 4b04 	ldr.w	r4, [sp], #4
 801370a:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801370c:	28ff      	cmp	r0, #255	; 0xff
 801370e:	d805      	bhi.n	801371c <ff_convert+0x38>
 8013710:	4b04      	ldr	r3, [pc, #16]	; (8013724 <ff_convert+0x40>)
 8013712:	3880      	subs	r0, #128	; 0x80
 8013714:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8013718:	4770      	bx	lr
}
 801371a:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801371c:	2000      	movs	r0, #0
 801371e:	4770      	bx	lr
 8013720:	2000      	movs	r0, #0
 8013722:	e7f0      	b.n	8013706 <ff_convert+0x22>
 8013724:	08021430 	.word	0x08021430

08013728 <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8013728:	4b22      	ldr	r3, [pc, #136]	; (80137b4 <ff_wtoupper+0x8c>)
 801372a:	4a23      	ldr	r2, [pc, #140]	; (80137b8 <ff_wtoupper+0x90>)
 801372c:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8013730:	bf38      	it	cc
 8013732:	4613      	movcc	r3, r2
{
 8013734:	b470      	push	{r4, r5, r6}
 8013736:	3304      	adds	r3, #4
 8013738:	e001      	b.n	801373e <ff_wtoupper+0x16>
 801373a:	3304      	adds	r3, #4
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 801373c:	b1ca      	cbz	r2, 8013772 <ff_wtoupper+0x4a>
		bc = *p++;								/* Get block base */
 801373e:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 8013742:	461e      	mov	r6, r3
		if (!bc || chr < bc) break;
 8013744:	b199      	cbz	r1, 801376e <ff_wtoupper+0x46>
 8013746:	4288      	cmp	r0, r1
 8013748:	d311      	bcc.n	801376e <ff_wtoupper+0x46>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801374a:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 801374e:	b2d4      	uxtb	r4, r2
 8013750:	0a12      	lsrs	r2, r2, #8
		if (chr < bc + nc) {	/* In the block? */
 8013752:	1865      	adds	r5, r4, r1
 8013754:	42a8      	cmp	r0, r5
 8013756:	daf0      	bge.n	801373a <ff_wtoupper+0x12>
			switch (cmd) {
 8013758:	2a08      	cmp	r2, #8
 801375a:	d808      	bhi.n	801376e <ff_wtoupper+0x46>
 801375c:	e8df f002 	tbb	[pc, r2]
 8013760:	1d1a1410 	.word	0x1d1a1410
 8013764:	05262320 	.word	0x05262320
 8013768:	0c          	.byte	0x0c
 8013769:	00          	.byte	0x00
			case 7: chr -= 80; break;				/* Shift -80 */
 801376a:	3850      	subs	r0, #80	; 0x50
 801376c:	b280      	uxth	r0, r0
	}

	return chr;
}
 801376e:	bc70      	pop	{r4, r5, r6}
 8013770:	4770      	bx	lr
		if (!cmd) p += nc;
 8013772:	eb06 0344 	add.w	r3, r6, r4, lsl #1
 8013776:	e7de      	b.n	8013736 <ff_wtoupper+0xe>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8013778:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 801377c:	b280      	uxth	r0, r0
 801377e:	e7f6      	b.n	801376e <ff_wtoupper+0x46>
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8013780:	1a41      	subs	r1, r0, r1
 8013782:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8013786:	e7f2      	b.n	801376e <ff_wtoupper+0x46>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8013788:	1a41      	subs	r1, r0, r1
 801378a:	f001 0301 	and.w	r3, r1, #1
 801378e:	1ac0      	subs	r0, r0, r3
 8013790:	b280      	uxth	r0, r0
 8013792:	e7ec      	b.n	801376e <ff_wtoupper+0x46>
			case 2: chr -= 16; break;				/* Shift -16 */
 8013794:	3810      	subs	r0, #16
 8013796:	b280      	uxth	r0, r0
 8013798:	e7e9      	b.n	801376e <ff_wtoupper+0x46>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801379a:	3820      	subs	r0, #32
 801379c:	b280      	uxth	r0, r0
 801379e:	e7e6      	b.n	801376e <ff_wtoupper+0x46>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80137a0:	3830      	subs	r0, #48	; 0x30
 80137a2:	b280      	uxth	r0, r0
 80137a4:	e7e3      	b.n	801376e <ff_wtoupper+0x46>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80137a6:	381a      	subs	r0, #26
 80137a8:	b280      	uxth	r0, r0
 80137aa:	e7e0      	b.n	801376e <ff_wtoupper+0x46>
			case 6:	chr += 8; break;				/* Shift +8 */
 80137ac:	3008      	adds	r0, #8
 80137ae:	b280      	uxth	r0, r0
 80137b0:	e7dd      	b.n	801376e <ff_wtoupper+0x46>
 80137b2:	bf00      	nop
 80137b4:	08021724 	.word	0x08021724
 80137b8:	08021530 	.word	0x08021530

080137bc <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80137bc:	4b03      	ldr	r3, [pc, #12]	; (80137cc <disk_status+0x10>)
 80137be:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 80137c2:	4403      	add	r3, r0
 80137c4:	6852      	ldr	r2, [r2, #4]
 80137c6:	7b18      	ldrb	r0, [r3, #12]
 80137c8:	6853      	ldr	r3, [r2, #4]
 80137ca:	4718      	bx	r3
 80137cc:	24003e60 	.word	0x24003e60

080137d0 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 80137d0:	4b08      	ldr	r3, [pc, #32]	; (80137f4 <disk_initialize+0x24>)
 80137d2:	5c1a      	ldrb	r2, [r3, r0]
 80137d4:	b95a      	cbnz	r2, 80137ee <disk_initialize+0x1e>
  {
    disk.is_initialized[pdrv] = 1;
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80137d6:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 80137da:	1819      	adds	r1, r3, r0
{
 80137dc:	b410      	push	{r4}
    disk.is_initialized[pdrv] = 1;
 80137de:	2401      	movs	r4, #1
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80137e0:	6852      	ldr	r2, [r2, #4]
    disk.is_initialized[pdrv] = 1;
 80137e2:	541c      	strb	r4, [r3, r0]
  }
  return stat;
}
 80137e4:	f85d 4b04 	ldr.w	r4, [sp], #4
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80137e8:	7b08      	ldrb	r0, [r1, #12]
 80137ea:	6813      	ldr	r3, [r2, #0]
 80137ec:	4718      	bx	r3
}
 80137ee:	2000      	movs	r0, #0
 80137f0:	4770      	bx	lr
 80137f2:	bf00      	nop
 80137f4:	24003e60 	.word	0x24003e60

080137f8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80137f8:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80137fa:	4c05      	ldr	r4, [pc, #20]	; (8013810 <disk_read+0x18>)
 80137fc:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8013800:	4404      	add	r4, r0
 8013802:	686d      	ldr	r5, [r5, #4]
 8013804:	7b20      	ldrb	r0, [r4, #12]
 8013806:	68ac      	ldr	r4, [r5, #8]
 8013808:	46a4      	mov	ip, r4
  return res;
}
 801380a:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801380c:	4760      	bx	ip
 801380e:	bf00      	nop
 8013810:	24003e60 	.word	0x24003e60

08013814 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8013814:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8013816:	4c05      	ldr	r4, [pc, #20]	; (801382c <disk_write+0x18>)
 8013818:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 801381c:	4404      	add	r4, r0
 801381e:	686d      	ldr	r5, [r5, #4]
 8013820:	7b20      	ldrb	r0, [r4, #12]
 8013822:	68ec      	ldr	r4, [r5, #12]
 8013824:	46a4      	mov	ip, r4
  return res;
}
 8013826:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8013828:	4760      	bx	ip
 801382a:	bf00      	nop
 801382c:	24003e60 	.word	0x24003e60

08013830 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8013830:	4b05      	ldr	r3, [pc, #20]	; (8013848 <disk_ioctl+0x18>)
{
 8013832:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8013834:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 8013838:	4403      	add	r3, r0
 801383a:	6864      	ldr	r4, [r4, #4]
 801383c:	7b18      	ldrb	r0, [r3, #12]
 801383e:	6923      	ldr	r3, [r4, #16]
  return res;
}
 8013840:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8013844:	4718      	bx	r3
 8013846:	bf00      	nop
 8013848:	24003e60 	.word	0x24003e60

0801384c <get_fattime>:
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
  return 0;
}
 801384c:	2000      	movs	r0, #0
 801384e:	4770      	bx	lr

08013850 <get_fileinfo>:
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8013850:	2300      	movs	r3, #0
{
 8013852:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 8013856:	6807      	ldr	r7, [r0, #0]
	fno->fname[0] = 0;		/* Invaidate file info */
 8013858:	758b      	strb	r3, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801385a:	69c2      	ldr	r2, [r0, #28]
 801385c:	2a00      	cmp	r2, #0
 801385e:	d069      	beq.n	8013934 <get_fileinfo+0xe4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8013860:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8013862:	460d      	mov	r5, r1
 8013864:	4680      	mov	r8, r0
 8013866:	3201      	adds	r2, #1
 8013868:	d068      	beq.n	801393c <get_fileinfo+0xec>
			i = j = 0;
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 801386a:	68fb      	ldr	r3, [r7, #12]
 801386c:	8818      	ldrh	r0, [r3, #0]
 801386e:	2800      	cmp	r0, #0
 8013870:	d062      	beq.n	8013938 <get_fileinfo+0xe8>
 8013872:	f101 0615 	add.w	r6, r1, #21
 8013876:	2401      	movs	r4, #1
 8013878:	e000      	b.n	801387c <get_fileinfo+0x2c>
 801387a:	4614      	mov	r4, r2
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 801387c:	2100      	movs	r1, #0
 801387e:	f7ff ff31 	bl	80136e4 <ff_convert>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8013882:	2800      	cmp	r0, #0
 8013884:	d058      	beq.n	8013938 <get_fileinfo+0xe8>
 8013886:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 801388a:	f104 0201 	add.w	r2, r4, #1
 801388e:	d053      	beq.n	8013938 <get_fileinfo+0xe8>
				fno->fname[i++] = (TCHAR)w;
 8013890:	f806 0f01 	strb.w	r0, [r6, #1]!
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8013894:	68fb      	ldr	r3, [r7, #12]
 8013896:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 801389a:	2800      	cmp	r0, #0
 801389c:	d1ed      	bne.n	801387a <get_fileinfo+0x2a>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 801389e:	442c      	add	r4, r5
 80138a0:	2300      	movs	r3, #0
 80138a2:	75a3      	strb	r3, [r4, #22]
 80138a4:	7daf      	ldrb	r7, [r5, #22]
	}

	i = j = 0;
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
	while (i < 11) {		/* Copy name body and extension */
		c = (TCHAR)dp->dir[i++];
 80138a6:	f8d8 1020 	ldr.w	r1, [r8, #32]
	i = j = 0;
 80138aa:	2000      	movs	r0, #0
		if (c == ' ') continue;				/* Skip padding spaces */
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
		if (i == 9) {						/* Insert a . if extension is exist */
			if (!lfv) fno->fname[j] = '.';
			fno->altname[j++] = '.';
 80138ac:	f04f 082e 	mov.w	r8, #46	; 0x2e
 80138b0:	f101 0c0b 	add.w	ip, r1, #11
		c = (TCHAR)dp->dir[i++];
 80138b4:	460a      	mov	r2, r1
 80138b6:	f812 3b01 	ldrb.w	r3, [r2], #1
		if (c == ' ') continue;				/* Skip padding spaces */
 80138ba:	2b20      	cmp	r3, #32
 80138bc:	d01b      	beq.n	80138f6 <get_fileinfo+0xa6>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80138be:	2b05      	cmp	r3, #5
 80138c0:	eba2 0601 	sub.w	r6, r2, r1
 80138c4:	bf08      	it	eq
 80138c6:	23e5      	moveq	r3, #229	; 0xe5
		if (i == 9) {						/* Insert a . if extension is exist */
 80138c8:	2e09      	cmp	r6, #9
 80138ca:	d039      	beq.n	8013940 <get_fileinfo+0xf0>
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 80138cc:	182c      	adds	r4, r5, r0
 80138ce:	7263      	strb	r3, [r4, #9]
		if (!lfv) {
 80138d0:	b987      	cbnz	r7, 80138f4 <get_fileinfo+0xa4>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 80138d2:	f1a3 0e41 	sub.w	lr, r3, #65	; 0x41
 80138d6:	f1be 0f19 	cmp.w	lr, #25
 80138da:	d80a      	bhi.n	80138f2 <get_fileinfo+0xa2>
 80138dc:	2e08      	cmp	r6, #8
 80138de:	f891 e00c 	ldrb.w	lr, [r1, #12]
 80138e2:	bf8c      	ite	hi
 80138e4:	2610      	movhi	r6, #16
 80138e6:	2608      	movls	r6, #8
 80138e8:	ea1e 0f06 	tst.w	lr, r6
 80138ec:	d001      	beq.n	80138f2 <get_fileinfo+0xa2>
				c += 0x20;			/* To lower */
 80138ee:	3320      	adds	r3, #32
 80138f0:	b2db      	uxtb	r3, r3
			}
			fno->fname[j] = c;
 80138f2:	75a3      	strb	r3, [r4, #22]
		}
		j++;
 80138f4:	3001      	adds	r0, #1
	while (i < 11) {		/* Copy name body and extension */
 80138f6:	4562      	cmp	r2, ip
 80138f8:	d1dd      	bne.n	80138b6 <get_fileinfo+0x66>
	}
	if (!lfv) {
		fno->fname[j] = 0;
 80138fa:	182c      	adds	r4, r5, r0
	if (!lfv) {
 80138fc:	b927      	cbnz	r7, 8013908 <get_fileinfo+0xb8>
		fno->fname[j] = 0;
 80138fe:	75a7      	strb	r7, [r4, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8013900:	7b0b      	ldrb	r3, [r1, #12]
 8013902:	2b00      	cmp	r3, #0
 8013904:	bf08      	it	eq
 8013906:	462c      	moveq	r4, r5
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8013908:	2300      	movs	r3, #0
 801390a:	7263      	strb	r3, [r4, #9]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 801390c:	7acb      	ldrb	r3, [r1, #11]
 801390e:	722b      	strb	r3, [r5, #8]
	rv = rv << 8 | ptr[2];
 8013910:	8bc8      	ldrh	r0, [r1, #30]
	rv = rv << 8 | ptr[1];
 8013912:	7f4a      	ldrb	r2, [r1, #29]
	rv = rv << 8 | ptr[0];
 8013914:	7f0b      	ldrb	r3, [r1, #28]
	rv = rv << 8 | ptr[1];
 8013916:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	rv = rv << 8 | ptr[0];
 801391a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 801391e:	602b      	str	r3, [r5, #0]
	rv = rv << 8 | ptr[2];
 8013920:	8b08      	ldrh	r0, [r1, #24]
	rv = rv << 8 | ptr[1];
 8013922:	7dca      	ldrb	r2, [r1, #23]
	rv = rv << 8 | ptr[0];
 8013924:	7d8b      	ldrb	r3, [r1, #22]
	rv = rv << 8 | ptr[1];
 8013926:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	rv = rv << 8 | ptr[0];
 801392a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 801392e:	0c1a      	lsrs	r2, r3, #16
 8013930:	80eb      	strh	r3, [r5, #6]
 8013932:	80aa      	strh	r2, [r5, #4]
}
 8013934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			i = j = 0;
 8013938:	2400      	movs	r4, #0
 801393a:	e7b0      	b.n	801389e <get_fileinfo+0x4e>
 801393c:	461f      	mov	r7, r3
 801393e:	e7b2      	b.n	80138a6 <get_fileinfo+0x56>
			if (!lfv) fno->fname[j] = '.';
 8013940:	182c      	adds	r4, r5, r0
 8013942:	b90f      	cbnz	r7, 8013948 <get_fileinfo+0xf8>
 8013944:	f884 8016 	strb.w	r8, [r4, #22]
			fno->altname[j++] = '.';
 8013948:	3001      	adds	r0, #1
 801394a:	f884 8009 	strb.w	r8, [r4, #9]
 801394e:	e7bd      	b.n	80138cc <get_fileinfo+0x7c>

08013950 <move_window.part.5>:
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8013950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8013954:	78c3      	ldrb	r3, [r0, #3]
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8013956:	4604      	mov	r4, r0
 8013958:	460e      	mov	r6, r1
 801395a:	f100 0734 	add.w	r7, r0, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801395e:	b96b      	cbnz	r3, 801397c <move_window.part.5+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8013960:	4632      	mov	r2, r6
 8013962:	4639      	mov	r1, r7
 8013964:	2301      	movs	r3, #1
 8013966:	7860      	ldrb	r0, [r4, #1]
 8013968:	f7ff ff46 	bl	80137f8 <disk_read>
 801396c:	2800      	cmp	r0, #0
 801396e:	bf1a      	itte	ne
 8013970:	f04f 36ff 	movne.w	r6, #4294967295
 8013974:	2001      	movne	r0, #1
 8013976:	2000      	moveq	r0, #0
			fs->winsect = sector;
 8013978:	6326      	str	r6, [r4, #48]	; 0x30
 801397a:	e01f      	b.n	80139bc <move_window.part.5+0x6c>
		wsect = fs->winsect;	/* Current sector number */
 801397c:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801397e:	2301      	movs	r3, #1
 8013980:	4639      	mov	r1, r7
 8013982:	7840      	ldrb	r0, [r0, #1]
 8013984:	462a      	mov	r2, r5
 8013986:	f7ff ff45 	bl	8013814 <disk_write>
 801398a:	b9b0      	cbnz	r0, 80139ba <move_window.part.5+0x6a>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801398c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801398e:	69e2      	ldr	r2, [r4, #28]
 8013990:	1aeb      	subs	r3, r5, r3
			fs->wflag = 0;
 8013992:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8013994:	4293      	cmp	r3, r2
 8013996:	d2e3      	bcs.n	8013960 <move_window.part.5+0x10>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013998:	f894 8002 	ldrb.w	r8, [r4, #2]
 801399c:	f1b8 0f01 	cmp.w	r8, #1
 80139a0:	7860      	ldrb	r0, [r4, #1]
 80139a2:	f108 38ff 	add.w	r8, r8, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 80139a6:	f04f 0301 	mov.w	r3, #1
 80139aa:	4639      	mov	r1, r7
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80139ac:	d9d8      	bls.n	8013960 <move_window.part.5+0x10>
					wsect += fs->fsize;
 80139ae:	69e2      	ldr	r2, [r4, #28]
 80139b0:	4415      	add	r5, r2
					disk_write(fs->drv, fs->win, wsect, 1);
 80139b2:	462a      	mov	r2, r5
 80139b4:	f7ff ff2e 	bl	8013814 <disk_write>
 80139b8:	e7f0      	b.n	801399c <move_window.part.5+0x4c>
			res = FR_DISK_ERR;
 80139ba:	2001      	movs	r0, #1
}
 80139bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080139c0 <sync_fs>:
{
 80139c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80139c2:	78c3      	ldrb	r3, [r0, #3]
{
 80139c4:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80139c6:	b95b      	cbnz	r3, 80139e0 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80139c8:	7823      	ldrb	r3, [r4, #0]
 80139ca:	2b03      	cmp	r3, #3
 80139cc:	d029      	beq.n	8013a22 <sync_fs+0x62>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80139ce:	2200      	movs	r2, #0
 80139d0:	7860      	ldrb	r0, [r4, #1]
 80139d2:	4611      	mov	r1, r2
 80139d4:	f7ff ff2c 	bl	8013830 <disk_ioctl>
			res = FR_DISK_ERR;
 80139d8:	3000      	adds	r0, #0
 80139da:	bf18      	it	ne
 80139dc:	2001      	movne	r0, #1
}
 80139de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
 80139e0:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80139e2:	f100 0734 	add.w	r7, r0, #52	; 0x34
 80139e6:	2301      	movs	r3, #1
 80139e8:	7840      	ldrb	r0, [r0, #1]
 80139ea:	462a      	mov	r2, r5
 80139ec:	4639      	mov	r1, r7
 80139ee:	f7ff ff11 	bl	8013814 <disk_write>
 80139f2:	2800      	cmp	r0, #0
 80139f4:	d158      	bne.n	8013aa8 <sync_fs+0xe8>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80139f6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80139f8:	69e3      	ldr	r3, [r4, #28]
 80139fa:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
 80139fc:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80139fe:	429a      	cmp	r2, r3
 8013a00:	d2e2      	bcs.n	80139c8 <sync_fs+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013a02:	78a6      	ldrb	r6, [r4, #2]
 8013a04:	2e01      	cmp	r6, #1
 8013a06:	d801      	bhi.n	8013a0c <sync_fs+0x4c>
 8013a08:	e7de      	b.n	80139c8 <sync_fs+0x8>
 8013a0a:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
 8013a0c:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013a0e:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8013a10:	2301      	movs	r3, #1
 8013a12:	4639      	mov	r1, r7
 8013a14:	462a      	mov	r2, r5
 8013a16:	7860      	ldrb	r0, [r4, #1]
 8013a18:	f7ff fefc 	bl	8013814 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013a1c:	2e01      	cmp	r6, #1
 8013a1e:	d1f4      	bne.n	8013a0a <sync_fs+0x4a>
 8013a20:	e7d2      	b.n	80139c8 <sync_fs+0x8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8013a22:	7925      	ldrb	r5, [r4, #4]
 8013a24:	2d01      	cmp	r5, #1
 8013a26:	d1d2      	bne.n	80139ce <sync_fs+0xe>
		*d++ = (BYTE)val;
 8013a28:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8013a2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013a30:	2100      	movs	r1, #0
	*ptr++ = (BYTE)val; val >>= 8;
 8013a32:	2700      	movs	r7, #0
 8013a34:	4618      	mov	r0, r3
 8013a36:	f00a f85a 	bl	801daee <memset>
 8013a3a:	4603      	mov	r3, r0
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8013a3c:	6960      	ldr	r0, [r4, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 8013a3e:	463e      	mov	r6, r7
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8013a40:	6922      	ldr	r2, [r4, #16]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8013a42:	4619      	mov	r1, r3
	*ptr++ = (BYTE)val; val >>= 8;
 8013a44:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 8013a48:	f360 0707 	bfi	r7, r0, #0, #8
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8013a4c:	462b      	mov	r3, r5
	*ptr++ = (BYTE)val; val >>= 8;
 8013a4e:	f362 0607 	bfi	r6, r2, #0, #8
 8013a52:	f36c 270f 	bfi	r7, ip, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8013a56:	ea4f 4c10 	mov.w	ip, r0, lsr #16
	*ptr++ = (BYTE)val; val >>= 8;
 8013a5a:	0a15      	lsrs	r5, r2, #8
 8013a5c:	f36c 4717 	bfi	r7, ip, #16, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8013a60:	0e00      	lsrs	r0, r0, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8013a62:	f365 260f 	bfi	r6, r5, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8013a66:	0c15      	lsrs	r5, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8013a68:	f360 671f 	bfi	r7, r0, #24, #8
			fs->winsect = fs->volbase + 1;
 8013a6c:	6a20      	ldr	r0, [r4, #32]
	*ptr++ = (BYTE)val; val >>= 8;
 8013a6e:	0e12      	lsrs	r2, r2, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8013a70:	f365 4617 	bfi	r6, r5, #16, #8
			fs->winsect = fs->volbase + 1;
 8013a74:	3001      	adds	r0, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8013a76:	2555      	movs	r5, #85	; 0x55
	*ptr++ = (BYTE)val; val >>= 8;
 8013a78:	f8c4 721c 	str.w	r7, [r4, #540]	; 0x21c
 8013a7c:	f362 661f 	bfi	r6, r2, #24, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8013a80:	f884 5232 	strb.w	r5, [r4, #562]	; 0x232
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8013a84:	4602      	mov	r2, r0
			fs->winsect = fs->volbase + 1;
 8013a86:	6320      	str	r0, [r4, #48]	; 0x30
	*ptr++ = (BYTE)val;
 8013a88:	27aa      	movs	r7, #170	; 0xaa
	*ptr++ = (BYTE)val; val >>= 8;
 8013a8a:	4808      	ldr	r0, [pc, #32]	; (8013aac <sync_fs+0xec>)
 8013a8c:	4d08      	ldr	r5, [pc, #32]	; (8013ab0 <sync_fs+0xf0>)
 8013a8e:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
 8013a92:	f8c4 6220 	str.w	r6, [r4, #544]	; 0x220
	*ptr++ = (BYTE)val;
 8013a96:	f884 7233 	strb.w	r7, [r4, #563]	; 0x233
	*ptr++ = (BYTE)val; val >>= 8;
 8013a9a:	6365      	str	r5, [r4, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8013a9c:	7860      	ldrb	r0, [r4, #1]
 8013a9e:	f7ff feb9 	bl	8013814 <disk_write>
			fs->fsi_flag = 0;
 8013aa2:	2300      	movs	r3, #0
 8013aa4:	7123      	strb	r3, [r4, #4]
 8013aa6:	e792      	b.n	80139ce <sync_fs+0xe>
			res = FR_DISK_ERR;
 8013aa8:	2001      	movs	r0, #1
}
 8013aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013aac:	61417272 	.word	0x61417272
 8013ab0:	41615252 	.word	0x41615252

08013ab4 <put_fat.part.7>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 8013ab4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		switch (fs->fs_type) {
 8013ab8:	7803      	ldrb	r3, [r0, #0]
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 8013aba:	4604      	mov	r4, r0
 8013abc:	460d      	mov	r5, r1
 8013abe:	4617      	mov	r7, r2
		switch (fs->fs_type) {
 8013ac0:	2b02      	cmp	r3, #2
 8013ac2:	f000 808b 	beq.w	8013bdc <put_fat.part.7+0x128>
 8013ac6:	2b03      	cmp	r3, #3
 8013ac8:	d062      	beq.n	8013b90 <put_fat.part.7+0xdc>
 8013aca:	2b01      	cmp	r3, #1
 8013acc:	d002      	beq.n	8013ad4 <put_fat.part.7+0x20>
	FRESULT res = FR_INT_ERR;
 8013ace:	2002      	movs	r0, #2
}
 8013ad0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			bc = (UINT)clst; bc += bc / 2;
 8013ad4:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013ad8:	6a42      	ldr	r2, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013ada:	f8d0 a030 	ldr.w	sl, [r0, #48]	; 0x30
 8013ade:	f100 0634 	add.w	r6, r0, #52	; 0x34
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013ae2:	eb02 2958 	add.w	r9, r2, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013ae6:	45d1      	cmp	r9, sl
 8013ae8:	f040 80f0 	bne.w	8013ccc <put_fat.part.7+0x218>
			p = fs->win + bc++ % SS(fs);
 8013aec:	f108 0901 	add.w	r9, r8, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8013af0:	f015 0a01 	ands.w	sl, r5, #1
			p = fs->win + bc++ % SS(fs);
 8013af4:	f3c8 0808 	ubfx	r8, r8, #0, #9
 8013af8:	ea4f 2259 	mov.w	r2, r9, lsr #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8013afc:	f000 8116 	beq.w	8013d2c <put_fat.part.7+0x278>
 8013b00:	f816 3008 	ldrb.w	r3, [r6, r8]
			fs->wflag = 1;
 8013b04:	2101      	movs	r1, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8013b06:	f003 030f 	and.w	r3, r3, #15
 8013b0a:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
 8013b0e:	f806 3008 	strb.w	r3, [r6, r8]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013b12:	6a65      	ldr	r5, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013b14:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013b18:	4415      	add	r5, r2
			fs->wflag = 1;
 8013b1a:	70e1      	strb	r1, [r4, #3]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013b1c:	4545      	cmp	r5, r8
 8013b1e:	f000 8122 	beq.w	8013d66 <put_fat.part.7+0x2b2>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8013b22:	2301      	movs	r3, #1
 8013b24:	4642      	mov	r2, r8
 8013b26:	4631      	mov	r1, r6
 8013b28:	7860      	ldrb	r0, [r4, #1]
 8013b2a:	f7ff fe73 	bl	8013814 <disk_write>
 8013b2e:	2800      	cmp	r0, #0
 8013b30:	f040 80f9 	bne.w	8013d26 <put_fat.part.7+0x272>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8013b34:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8013b36:	69e3      	ldr	r3, [r4, #28]
 8013b38:	eba8 0202 	sub.w	r2, r8, r2
			fs->wflag = 0;
 8013b3c:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8013b3e:	429a      	cmp	r2, r3
 8013b40:	d212      	bcs.n	8013b68 <put_fat.part.7+0xb4>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013b42:	f894 b002 	ldrb.w	fp, [r4, #2]
 8013b46:	f1bb 0f01 	cmp.w	fp, #1
 8013b4a:	d801      	bhi.n	8013b50 <put_fat.part.7+0x9c>
 8013b4c:	e00c      	b.n	8013b68 <put_fat.part.7+0xb4>
 8013b4e:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
 8013b50:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013b52:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8013b56:	2301      	movs	r3, #1
 8013b58:	4631      	mov	r1, r6
 8013b5a:	4642      	mov	r2, r8
 8013b5c:	7860      	ldrb	r0, [r4, #1]
 8013b5e:	f7ff fe59 	bl	8013814 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013b62:	f1bb 0f01 	cmp.w	fp, #1
 8013b66:	d1f2      	bne.n	8013b4e <put_fat.part.7+0x9a>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8013b68:	2301      	movs	r3, #1
 8013b6a:	462a      	mov	r2, r5
 8013b6c:	4631      	mov	r1, r6
 8013b6e:	7860      	ldrb	r0, [r4, #1]
 8013b70:	f7ff fe42 	bl	80137f8 <disk_read>
 8013b74:	2800      	cmp	r0, #0
 8013b76:	f040 80a3 	bne.w	8013cc0 <put_fat.part.7+0x20c>
			p = fs->win + bc % SS(fs);
 8013b7a:	f3c9 0908 	ubfx	r9, r9, #0, #9
			fs->winsect = sector;
 8013b7e:	6325      	str	r5, [r4, #48]	; 0x30
			p = fs->win + bc % SS(fs);
 8013b80:	444e      	add	r6, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8013b82:	f1ba 0f00 	cmp.w	sl, #0
 8013b86:	f000 80df 	beq.w	8013d48 <put_fat.part.7+0x294>
 8013b8a:	f3c7 1707 	ubfx	r7, r7, #4, #8
 8013b8e:	e0e1      	b.n	8013d54 <put_fat.part.7+0x2a0>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8013b90:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013b92:	f100 0634 	add.w	r6, r0, #52	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013b96:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8013b9a:	eb03 18d1 	add.w	r8, r3, r1, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013b9e:	45c8      	cmp	r8, r9
 8013ba0:	d161      	bne.n	8013c66 <put_fat.part.7+0x1b2>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8013ba2:	00ad      	lsls	r5, r5, #2
 8013ba4:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
	*ptr++ = (BYTE)val; val >>= 8;
 8013ba8:	2300      	movs	r3, #0
			fs->wflag = 1;
 8013baa:	2101      	movs	r1, #1
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8013bac:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
			fs->wflag = 1;
 8013bb0:	4618      	mov	r0, r3
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8013bb2:	1972      	adds	r2, r6, r5
	rv = rv << 8 | ptr[2];
 8013bb4:	8852      	ldrh	r2, [r2, #2]
	rv = rv << 8 | ptr[0];
 8013bb6:	0412      	lsls	r2, r2, #16
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8013bb8:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8013bbc:	433a      	orrs	r2, r7
	*ptr++ = (BYTE)val; val >>= 8;
 8013bbe:	0a17      	lsrs	r7, r2, #8
 8013bc0:	f362 0307 	bfi	r3, r2, #0, #8
 8013bc4:	f367 230f 	bfi	r3, r7, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8013bc8:	0c17      	lsrs	r7, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8013bca:	0e12      	lsrs	r2, r2, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8013bcc:	f367 4317 	bfi	r3, r7, #16, #8
 8013bd0:	f362 631f 	bfi	r3, r2, #24, #8
 8013bd4:	5173      	str	r3, [r6, r5]
			fs->wflag = 1;
 8013bd6:	70e1      	strb	r1, [r4, #3]
}
 8013bd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8013bdc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013bde:	f100 0634 	add.w	r6, r0, #52	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013be2:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8013be6:	eb03 2811 	add.w	r8, r3, r1, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013bea:	45c8      	cmp	r8, r9
 8013bec:	d02e      	beq.n	8013c4c <put_fat.part.7+0x198>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8013bee:	78c3      	ldrb	r3, [r0, #3]
 8013bf0:	7840      	ldrb	r0, [r0, #1]
 8013bf2:	b313      	cbz	r3, 8013c3a <put_fat.part.7+0x186>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8013bf4:	2301      	movs	r3, #1
 8013bf6:	464a      	mov	r2, r9
 8013bf8:	4631      	mov	r1, r6
 8013bfa:	f7ff fe0b 	bl	8013814 <disk_write>
 8013bfe:	2800      	cmp	r0, #0
 8013c00:	f040 8091 	bne.w	8013d26 <put_fat.part.7+0x272>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8013c04:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8013c06:	69e3      	ldr	r3, [r4, #28]
 8013c08:	eba9 0202 	sub.w	r2, r9, r2
			fs->wflag = 0;
 8013c0c:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8013c0e:	429a      	cmp	r2, r3
 8013c10:	d212      	bcs.n	8013c38 <put_fat.part.7+0x184>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013c12:	f894 a002 	ldrb.w	sl, [r4, #2]
 8013c16:	f1ba 0f01 	cmp.w	sl, #1
 8013c1a:	d801      	bhi.n	8013c20 <put_fat.part.7+0x16c>
 8013c1c:	e00c      	b.n	8013c38 <put_fat.part.7+0x184>
 8013c1e:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
 8013c20:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013c22:	f10a 3aff 	add.w	sl, sl, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8013c26:	2301      	movs	r3, #1
 8013c28:	4631      	mov	r1, r6
 8013c2a:	464a      	mov	r2, r9
 8013c2c:	7860      	ldrb	r0, [r4, #1]
 8013c2e:	f7ff fdf1 	bl	8013814 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013c32:	f1ba 0f01 	cmp.w	sl, #1
 8013c36:	d1f2      	bne.n	8013c1e <put_fat.part.7+0x16a>
 8013c38:	7860      	ldrb	r0, [r4, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8013c3a:	2301      	movs	r3, #1
 8013c3c:	4642      	mov	r2, r8
 8013c3e:	4631      	mov	r1, r6
 8013c40:	f7ff fdda 	bl	80137f8 <disk_read>
 8013c44:	2800      	cmp	r0, #0
 8013c46:	d13b      	bne.n	8013cc0 <put_fat.part.7+0x20c>
			fs->winsect = sector;
 8013c48:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8013c4c:	006d      	lsls	r5, r5, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8013c4e:	f3c7 2207 	ubfx	r2, r7, #8, #8
			fs->wflag = 1;
 8013c52:	2301      	movs	r3, #1
 8013c54:	2000      	movs	r0, #0
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8013c56:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 8013c5a:	5577      	strb	r7, [r6, r5]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8013c5c:	442e      	add	r6, r5
	*ptr++ = (BYTE)val;
 8013c5e:	7072      	strb	r2, [r6, #1]
			fs->wflag = 1;
 8013c60:	70e3      	strb	r3, [r4, #3]
}
 8013c62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8013c66:	78c3      	ldrb	r3, [r0, #3]
 8013c68:	7840      	ldrb	r0, [r0, #1]
 8013c6a:	b313      	cbz	r3, 8013cb2 <put_fat.part.7+0x1fe>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8013c6c:	2301      	movs	r3, #1
 8013c6e:	464a      	mov	r2, r9
 8013c70:	4631      	mov	r1, r6
 8013c72:	f7ff fdcf 	bl	8013814 <disk_write>
 8013c76:	2800      	cmp	r0, #0
 8013c78:	d155      	bne.n	8013d26 <put_fat.part.7+0x272>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8013c7a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8013c7c:	69e3      	ldr	r3, [r4, #28]
 8013c7e:	eba9 0202 	sub.w	r2, r9, r2
			fs->wflag = 0;
 8013c82:	70e0      	strb	r0, [r4, #3]
 8013c84:	7860      	ldrb	r0, [r4, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8013c86:	429a      	cmp	r2, r3
 8013c88:	d213      	bcs.n	8013cb2 <put_fat.part.7+0x1fe>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013c8a:	f894 a002 	ldrb.w	sl, [r4, #2]
 8013c8e:	f1ba 0f01 	cmp.w	sl, #1
 8013c92:	d802      	bhi.n	8013c9a <put_fat.part.7+0x1e6>
 8013c94:	e00d      	b.n	8013cb2 <put_fat.part.7+0x1fe>
 8013c96:	69e3      	ldr	r3, [r4, #28]
 8013c98:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 8013c9a:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013c9c:	f10a 3aff 	add.w	sl, sl, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8013ca0:	2301      	movs	r3, #1
 8013ca2:	4631      	mov	r1, r6
 8013ca4:	464a      	mov	r2, r9
 8013ca6:	f7ff fdb5 	bl	8013814 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013caa:	f1ba 0f01 	cmp.w	sl, #1
 8013cae:	d1f2      	bne.n	8013c96 <put_fat.part.7+0x1e2>
 8013cb0:	7860      	ldrb	r0, [r4, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8013cb2:	2301      	movs	r3, #1
 8013cb4:	4642      	mov	r2, r8
 8013cb6:	4631      	mov	r1, r6
 8013cb8:	f7ff fd9e 	bl	80137f8 <disk_read>
 8013cbc:	2800      	cmp	r0, #0
 8013cbe:	d04f      	beq.n	8013d60 <put_fat.part.7+0x2ac>
			fs->winsect = sector;
 8013cc0:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 8013cc4:	2001      	movs	r0, #1
			fs->winsect = sector;
 8013cc6:	6323      	str	r3, [r4, #48]	; 0x30
}
 8013cc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8013ccc:	78c2      	ldrb	r2, [r0, #3]
 8013cce:	7840      	ldrb	r0, [r0, #1]
 8013cd0:	b1fa      	cbz	r2, 8013d12 <put_fat.part.7+0x25e>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8013cd2:	4652      	mov	r2, sl
 8013cd4:	4631      	mov	r1, r6
 8013cd6:	f7ff fd9d 	bl	8013814 <disk_write>
 8013cda:	bb20      	cbnz	r0, 8013d26 <put_fat.part.7+0x272>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8013cdc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8013cde:	69e3      	ldr	r3, [r4, #28]
 8013ce0:	ebaa 0202 	sub.w	r2, sl, r2
			fs->wflag = 0;
 8013ce4:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8013ce6:	429a      	cmp	r2, r3
 8013ce8:	d212      	bcs.n	8013d10 <put_fat.part.7+0x25c>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013cea:	f894 b002 	ldrb.w	fp, [r4, #2]
 8013cee:	f1bb 0f01 	cmp.w	fp, #1
 8013cf2:	d801      	bhi.n	8013cf8 <put_fat.part.7+0x244>
 8013cf4:	e00c      	b.n	8013d10 <put_fat.part.7+0x25c>
 8013cf6:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
 8013cf8:	449a      	add	sl, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013cfa:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8013cfe:	2301      	movs	r3, #1
 8013d00:	4631      	mov	r1, r6
 8013d02:	4652      	mov	r2, sl
 8013d04:	7860      	ldrb	r0, [r4, #1]
 8013d06:	f7ff fd85 	bl	8013814 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013d0a:	f1bb 0f01 	cmp.w	fp, #1
 8013d0e:	d1f2      	bne.n	8013cf6 <put_fat.part.7+0x242>
 8013d10:	7860      	ldrb	r0, [r4, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8013d12:	2301      	movs	r3, #1
 8013d14:	464a      	mov	r2, r9
 8013d16:	4631      	mov	r1, r6
 8013d18:	f7ff fd6e 	bl	80137f8 <disk_read>
 8013d1c:	2800      	cmp	r0, #0
 8013d1e:	d1cf      	bne.n	8013cc0 <put_fat.part.7+0x20c>
			fs->winsect = sector;
 8013d20:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 8013d24:	e6e2      	b.n	8013aec <put_fat.part.7+0x38>
	FRESULT res = FR_INT_ERR;
 8013d26:	2001      	movs	r0, #1
}
 8013d28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8013d2c:	f806 7008 	strb.w	r7, [r6, r8]
			fs->wflag = 1;
 8013d30:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013d32:	6a65      	ldr	r5, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013d34:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013d38:	4415      	add	r5, r2
			fs->wflag = 1;
 8013d3a:	70e3      	strb	r3, [r4, #3]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013d3c:	45a8      	cmp	r8, r5
 8013d3e:	f47f aef0 	bne.w	8013b22 <put_fat.part.7+0x6e>
			p = fs->win + bc % SS(fs);
 8013d42:	f3c9 0908 	ubfx	r9, r9, #0, #9
 8013d46:	444e      	add	r6, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8013d48:	7833      	ldrb	r3, [r6, #0]
 8013d4a:	f3c7 2203 	ubfx	r2, r7, #8, #4
 8013d4e:	f023 070f 	bic.w	r7, r3, #15
 8013d52:	4317      	orrs	r7, r2
			fs->wflag = 1;
 8013d54:	2301      	movs	r3, #1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8013d56:	7037      	strb	r7, [r6, #0]
			fs->wflag = 1;
 8013d58:	2000      	movs	r0, #0
 8013d5a:	70e3      	strb	r3, [r4, #3]
}
 8013d5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 8013d60:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 8013d64:	e71d      	b.n	8013ba2 <put_fat.part.7+0xee>
			p = fs->win + bc % SS(fs);
 8013d66:	f3c9 0908 	ubfx	r9, r9, #0, #9
 8013d6a:	444e      	add	r6, r9
 8013d6c:	e70d      	b.n	8013b8a <put_fat.part.7+0xd6>
 8013d6e:	bf00      	nop

08013d70 <remove_chain>:
{
 8013d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8013d74:	2901      	cmp	r1, #1
{
 8013d76:	b085      	sub	sp, #20
 8013d78:	9000      	str	r0, [sp, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8013d7a:	d914      	bls.n	8013da6 <remove_chain+0x36>
	FATFS *fs = obj->fs;
 8013d7c:	6804      	ldr	r4, [r0, #0]
 8013d7e:	460d      	mov	r5, r1
 8013d80:	4606      	mov	r6, r0
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8013d82:	69a3      	ldr	r3, [r4, #24]
 8013d84:	428b      	cmp	r3, r1
 8013d86:	d90e      	bls.n	8013da6 <remove_chain+0x36>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8013d88:	b98a      	cbnz	r2, 8013dae <remove_chain+0x3e>
 8013d8a:	46a3      	mov	fp, r4
 8013d8c:	f104 0a34 	add.w	sl, r4, #52	; 0x34
 8013d90:	465e      	mov	r6, fp
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8013d92:	429d      	cmp	r5, r3
 8013d94:	d207      	bcs.n	8013da6 <remove_chain+0x36>
		switch (fs->fs_type) {
 8013d96:	7833      	ldrb	r3, [r6, #0]
 8013d98:	2b02      	cmp	r3, #2
 8013d9a:	f000 8106 	beq.w	8013faa <remove_chain+0x23a>
 8013d9e:	2b03      	cmp	r3, #3
 8013da0:	d068      	beq.n	8013e74 <remove_chain+0x104>
 8013da2:	2b01      	cmp	r3, #1
 8013da4:	d014      	beq.n	8013dd0 <remove_chain+0x60>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8013da6:	2002      	movs	r0, #2
}
 8013da8:	b005      	add	sp, #20
 8013daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8013dae:	4293      	cmp	r3, r2
 8013db0:	d9f9      	bls.n	8013da6 <remove_chain+0x36>
 8013db2:	2a01      	cmp	r2, #1
 8013db4:	d9f7      	bls.n	8013da6 <remove_chain+0x36>
 8013db6:	4611      	mov	r1, r2
 8013db8:	4620      	mov	r0, r4
 8013dba:	f04f 32ff 	mov.w	r2, #4294967295
 8013dbe:	f7ff fe79 	bl	8013ab4 <put_fat.part.7>
		if (res != FR_OK) return res;
 8013dc2:	2800      	cmp	r0, #0
 8013dc4:	d1f0      	bne.n	8013da8 <remove_chain+0x38>
 8013dc6:	f8d6 b000 	ldr.w	fp, [r6]
 8013dca:	f8db 3018 	ldr.w	r3, [fp, #24]
 8013dce:	e7dd      	b.n	8013d8c <remove_chain+0x1c>
			bc = (UINT)clst; bc += bc / 2;
 8013dd0:	eb05 0755 	add.w	r7, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013dd4:	6a72      	ldr	r2, [r6, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013dd6:	f8d6 9030 	ldr.w	r9, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013dda:	eb02 2857 	add.w	r8, r2, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013dde:	45c8      	cmp	r8, r9
 8013de0:	f040 8127 	bne.w	8014032 <remove_chain+0x2c2>
			wc = fs->win[bc++ % SS(fs)];
 8013de4:	f3c7 0308 	ubfx	r3, r7, #0, #9
 8013de8:	3701      	adds	r7, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013dea:	eb02 2857 	add.w	r8, r2, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 8013dee:	4433      	add	r3, r6
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013df0:	45c8      	cmp	r8, r9
			wc = fs->win[bc++ % SS(fs)];
 8013df2:	f893 b034 	ldrb.w	fp, [r3, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013df6:	f000 8260 	beq.w	80142ba <remove_chain+0x54a>
 8013dfa:	f106 0234 	add.w	r2, r6, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8013dfe:	78f3      	ldrb	r3, [r6, #3]
 8013e00:	7870      	ldrb	r0, [r6, #1]
 8013e02:	4611      	mov	r1, r2
 8013e04:	9201      	str	r2, [sp, #4]
 8013e06:	b333      	cbz	r3, 8013e56 <remove_chain+0xe6>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8013e08:	2301      	movs	r3, #1
 8013e0a:	464a      	mov	r2, r9
 8013e0c:	f7ff fd02 	bl	8013814 <disk_write>
 8013e10:	2800      	cmp	r0, #0
 8013e12:	f040 816f 	bne.w	80140f4 <remove_chain+0x384>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8013e16:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8013e18:	69f3      	ldr	r3, [r6, #28]
 8013e1a:	eba9 0202 	sub.w	r2, r9, r2
			fs->wflag = 0;
 8013e1e:	70f0      	strb	r0, [r6, #3]
 8013e20:	7870      	ldrb	r0, [r6, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8013e22:	429a      	cmp	r2, r3
 8013e24:	d217      	bcs.n	8013e56 <remove_chain+0xe6>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013e26:	f896 c002 	ldrb.w	ip, [r6, #2]
 8013e2a:	4662      	mov	r2, ip
 8013e2c:	2a01      	cmp	r2, #1
 8013e2e:	d912      	bls.n	8013e56 <remove_chain+0xe6>
 8013e30:	9402      	str	r4, [sp, #8]
 8013e32:	4664      	mov	r4, ip
 8013e34:	9503      	str	r5, [sp, #12]
 8013e36:	9d01      	ldr	r5, [sp, #4]
 8013e38:	e001      	b.n	8013e3e <remove_chain+0xce>
 8013e3a:	69f3      	ldr	r3, [r6, #28]
 8013e3c:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 8013e3e:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013e40:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8013e42:	2301      	movs	r3, #1
 8013e44:	4629      	mov	r1, r5
 8013e46:	464a      	mov	r2, r9
 8013e48:	f7ff fce4 	bl	8013814 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013e4c:	2c01      	cmp	r4, #1
 8013e4e:	d1f4      	bne.n	8013e3a <remove_chain+0xca>
 8013e50:	7870      	ldrb	r0, [r6, #1]
 8013e52:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8013e56:	9901      	ldr	r1, [sp, #4]
 8013e58:	2301      	movs	r3, #1
 8013e5a:	4642      	mov	r2, r8
 8013e5c:	f7ff fccc 	bl	80137f8 <disk_read>
 8013e60:	2800      	cmp	r0, #0
 8013e62:	f000 8228 	beq.w	80142b6 <remove_chain+0x546>
			fs->winsect = sector;
 8013e66:	f04f 33ff 	mov.w	r3, #4294967295
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8013e6a:	2001      	movs	r0, #1
			fs->winsect = sector;
 8013e6c:	6333      	str	r3, [r6, #48]	; 0x30
}
 8013e6e:	b005      	add	sp, #20
 8013e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013e74:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8013e76:	f106 0834 	add.w	r8, r6, #52	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013e7a:	f8d6 9030 	ldr.w	r9, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013e7e:	eb07 17d5 	add.w	r7, r7, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013e82:	454f      	cmp	r7, r9
 8013e84:	f040 8107 	bne.w	8014096 <remove_chain+0x326>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8013e88:	00ab      	lsls	r3, r5, #2
 8013e8a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8013e8e:	eb08 0203 	add.w	r2, r8, r3
	rv = rv << 8 | ptr[0];
 8013e92:	f818 7003 	ldrb.w	r7, [r8, r3]
	rv = rv << 8 | ptr[1];
 8013e96:	f892 b001 	ldrb.w	fp, [r2, #1]
	rv = rv << 8 | ptr[2];
 8013e9a:	8853      	ldrh	r3, [r2, #2]
	rv = rv << 8 | ptr[1];
 8013e9c:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
	rv = rv << 8 | ptr[0];
 8013ea0:	ea47 270b 	orr.w	r7, r7, fp, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8013ea4:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
		if (nxt == 0) break;				/* Empty cluster? */
 8013ea8:	2f00      	cmp	r7, #0
 8013eaa:	f000 8214 	beq.w	80142d6 <remove_chain+0x566>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8013eae:	2f01      	cmp	r7, #1
 8013eb0:	f43f af79 	beq.w	8013da6 <remove_chain+0x36>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8013eb4:	69a3      	ldr	r3, [r4, #24]
 8013eb6:	42ab      	cmp	r3, r5
 8013eb8:	f67f af75 	bls.w	8013da6 <remove_chain+0x36>
		switch (fs->fs_type) {
 8013ebc:	7823      	ldrb	r3, [r4, #0]
 8013ebe:	2b02      	cmp	r3, #2
 8013ec0:	f000 8165 	beq.w	801418e <remove_chain+0x41e>
 8013ec4:	2b03      	cmp	r3, #3
 8013ec6:	f000 8119 	beq.w	80140fc <remove_chain+0x38c>
 8013eca:	2b01      	cmp	r3, #1
 8013ecc:	f47f af6b 	bne.w	8013da6 <remove_chain+0x36>
			bc = (UINT)clst; bc += bc / 2;
 8013ed0:	eb05 0655 	add.w	r6, r5, r5, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013ed4:	6a62      	ldr	r2, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013ed6:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013eda:	eb02 2856 	add.w	r8, r2, r6, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013ede:	45c8      	cmp	r8, r9
 8013ee0:	d02e      	beq.n	8013f40 <remove_chain+0x1d0>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8013ee2:	78e2      	ldrb	r2, [r4, #3]
 8013ee4:	7860      	ldrb	r0, [r4, #1]
 8013ee6:	b30a      	cbz	r2, 8013f2c <remove_chain+0x1bc>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8013ee8:	464a      	mov	r2, r9
 8013eea:	4651      	mov	r1, sl
 8013eec:	f7ff fc92 	bl	8013814 <disk_write>
 8013ef0:	2800      	cmp	r0, #0
 8013ef2:	f040 80ff 	bne.w	80140f4 <remove_chain+0x384>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8013ef6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8013ef8:	69e3      	ldr	r3, [r4, #28]
 8013efa:	eba9 0202 	sub.w	r2, r9, r2
			fs->wflag = 0;
 8013efe:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8013f00:	429a      	cmp	r2, r3
 8013f02:	d212      	bcs.n	8013f2a <remove_chain+0x1ba>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013f04:	f894 b002 	ldrb.w	fp, [r4, #2]
 8013f08:	f1bb 0f01 	cmp.w	fp, #1
 8013f0c:	d801      	bhi.n	8013f12 <remove_chain+0x1a2>
 8013f0e:	e00c      	b.n	8013f2a <remove_chain+0x1ba>
 8013f10:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
 8013f12:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013f14:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8013f18:	2301      	movs	r3, #1
 8013f1a:	4651      	mov	r1, sl
 8013f1c:	464a      	mov	r2, r9
 8013f1e:	7860      	ldrb	r0, [r4, #1]
 8013f20:	f7ff fc78 	bl	8013814 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013f24:	f1bb 0f01 	cmp.w	fp, #1
 8013f28:	d1f2      	bne.n	8013f10 <remove_chain+0x1a0>
 8013f2a:	7860      	ldrb	r0, [r4, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8013f2c:	2301      	movs	r3, #1
 8013f2e:	4642      	mov	r2, r8
 8013f30:	4651      	mov	r1, sl
 8013f32:	f7ff fc61 	bl	80137f8 <disk_read>
 8013f36:	2800      	cmp	r0, #0
 8013f38:	f040 8168 	bne.w	801420c <remove_chain+0x49c>
			fs->winsect = sector;
 8013f3c:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
			p = fs->win + bc++ % SS(fs);
 8013f40:	f106 0801 	add.w	r8, r6, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8013f44:	f015 0901 	ands.w	r9, r5, #1
			p = fs->win + bc++ % SS(fs);
 8013f48:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8013f4c:	ea4f 2258 	mov.w	r2, r8, lsr #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8013f50:	f000 8171 	beq.w	8014236 <remove_chain+0x4c6>
 8013f54:	f81a 3006 	ldrb.w	r3, [sl, r6]
 8013f58:	f003 030f 	and.w	r3, r3, #15
 8013f5c:	f80a 3006 	strb.w	r3, [sl, r6]
			fs->wflag = 1;
 8013f60:	f04f 0301 	mov.w	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013f64:	6a66      	ldr	r6, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013f66:	6b25      	ldr	r5, [r4, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013f68:	4416      	add	r6, r2
			fs->wflag = 1;
 8013f6a:	70e3      	strb	r3, [r4, #3]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013f6c:	42b5      	cmp	r5, r6
 8013f6e:	f040 816c 	bne.w	801424a <remove_chain+0x4da>
			p = fs->win + bc % SS(fs);
 8013f72:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8013f76:	2300      	movs	r3, #0
			p = fs->win + bc % SS(fs);
 8013f78:	44d0      	add	r8, sl
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8013f7a:	f888 3000 	strb.w	r3, [r8]
			fs->wflag = 1;
 8013f7e:	f04f 0301 	mov.w	r3, #1
 8013f82:	70e3      	strb	r3, [r4, #3]
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8013f84:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8013f88:	1e91      	subs	r1, r2, #2
 8013f8a:	428b      	cmp	r3, r1
 8013f8c:	d205      	bcs.n	8013f9a <remove_chain+0x22a>
			fs->fsi_flag |= 1;
 8013f8e:	7921      	ldrb	r1, [r4, #4]
			fs->free_clst++;
 8013f90:	3301      	adds	r3, #1
			fs->fsi_flag |= 1;
 8013f92:	f041 0101 	orr.w	r1, r1, #1
			fs->free_clst++;
 8013f96:	6163      	str	r3, [r4, #20]
			fs->fsi_flag |= 1;
 8013f98:	7121      	strb	r1, [r4, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8013f9a:	42ba      	cmp	r2, r7
 8013f9c:	f240 819b 	bls.w	80142d6 <remove_chain+0x566>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8013fa0:	9b00      	ldr	r3, [sp, #0]
 8013fa2:	463d      	mov	r5, r7
 8013fa4:	681e      	ldr	r6, [r3, #0]
 8013fa6:	69b3      	ldr	r3, [r6, #24]
 8013fa8:	e6f3      	b.n	8013d92 <remove_chain+0x22>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013faa:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8013fac:	f106 0834 	add.w	r8, r6, #52	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013fb0:	f8d6 9030 	ldr.w	r9, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013fb4:	eb07 2715 	add.w	r7, r7, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013fb8:	454f      	cmp	r7, r9
 8013fba:	d02e      	beq.n	801401a <remove_chain+0x2aa>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8013fbc:	78f3      	ldrb	r3, [r6, #3]
 8013fbe:	7870      	ldrb	r0, [r6, #1]
 8013fc0:	b313      	cbz	r3, 8014008 <remove_chain+0x298>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8013fc2:	2301      	movs	r3, #1
 8013fc4:	464a      	mov	r2, r9
 8013fc6:	4641      	mov	r1, r8
 8013fc8:	f7ff fc24 	bl	8013814 <disk_write>
 8013fcc:	2800      	cmp	r0, #0
 8013fce:	f040 8091 	bne.w	80140f4 <remove_chain+0x384>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8013fd2:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8013fd4:	69f3      	ldr	r3, [r6, #28]
 8013fd6:	eba9 0202 	sub.w	r2, r9, r2
			fs->wflag = 0;
 8013fda:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8013fdc:	429a      	cmp	r2, r3
 8013fde:	d212      	bcs.n	8014006 <remove_chain+0x296>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013fe0:	f896 b002 	ldrb.w	fp, [r6, #2]
 8013fe4:	f1bb 0f01 	cmp.w	fp, #1
 8013fe8:	d801      	bhi.n	8013fee <remove_chain+0x27e>
 8013fea:	e00c      	b.n	8014006 <remove_chain+0x296>
 8013fec:	69f3      	ldr	r3, [r6, #28]
					wsect += fs->fsize;
 8013fee:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013ff0:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8013ff4:	2301      	movs	r3, #1
 8013ff6:	4641      	mov	r1, r8
 8013ff8:	464a      	mov	r2, r9
 8013ffa:	7870      	ldrb	r0, [r6, #1]
 8013ffc:	f7ff fc0a 	bl	8013814 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014000:	f1bb 0f01 	cmp.w	fp, #1
 8014004:	d1f2      	bne.n	8013fec <remove_chain+0x27c>
 8014006:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8014008:	2301      	movs	r3, #1
 801400a:	463a      	mov	r2, r7
 801400c:	4641      	mov	r1, r8
 801400e:	f7ff fbf3 	bl	80137f8 <disk_read>
 8014012:	2800      	cmp	r0, #0
 8014014:	f47f af27 	bne.w	8013e66 <remove_chain+0xf6>
			fs->winsect = sector;
 8014018:	6337      	str	r7, [r6, #48]	; 0x30
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801401a:	006b      	lsls	r3, r5, #1
 801401c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8014020:	eb08 0203 	add.w	r2, r8, r3
	rv = rv << 8 | ptr[0];
 8014024:	f818 7003 	ldrb.w	r7, [r8, r3]
 8014028:	f892 b001 	ldrb.w	fp, [r2, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801402c:	ea47 270b 	orr.w	r7, r7, fp, lsl #8
 8014030:	e73a      	b.n	8013ea8 <remove_chain+0x138>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8014032:	78f2      	ldrb	r2, [r6, #3]
 8014034:	f106 0b34 	add.w	fp, r6, #52	; 0x34
 8014038:	7870      	ldrb	r0, [r6, #1]
 801403a:	b1fa      	cbz	r2, 801407c <remove_chain+0x30c>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801403c:	464a      	mov	r2, r9
 801403e:	4659      	mov	r1, fp
 8014040:	f7ff fbe8 	bl	8013814 <disk_write>
 8014044:	2800      	cmp	r0, #0
 8014046:	d155      	bne.n	80140f4 <remove_chain+0x384>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8014048:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801404a:	69f3      	ldr	r3, [r6, #28]
 801404c:	eba9 0202 	sub.w	r2, r9, r2
			fs->wflag = 0;
 8014050:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8014052:	429a      	cmp	r2, r3
 8014054:	d211      	bcs.n	801407a <remove_chain+0x30a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014056:	78b2      	ldrb	r2, [r6, #2]
 8014058:	2a01      	cmp	r2, #1
 801405a:	d90e      	bls.n	801407a <remove_chain+0x30a>
 801405c:	9401      	str	r4, [sp, #4]
 801405e:	4614      	mov	r4, r2
 8014060:	e000      	b.n	8014064 <remove_chain+0x2f4>
 8014062:	69f3      	ldr	r3, [r6, #28]
					wsect += fs->fsize;
 8014064:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014066:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8014068:	2301      	movs	r3, #1
 801406a:	4659      	mov	r1, fp
 801406c:	464a      	mov	r2, r9
 801406e:	7870      	ldrb	r0, [r6, #1]
 8014070:	f7ff fbd0 	bl	8013814 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014074:	2c01      	cmp	r4, #1
 8014076:	d1f4      	bne.n	8014062 <remove_chain+0x2f2>
 8014078:	9c01      	ldr	r4, [sp, #4]
 801407a:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801407c:	4659      	mov	r1, fp
 801407e:	2301      	movs	r3, #1
 8014080:	4642      	mov	r2, r8
 8014082:	f7ff fbb9 	bl	80137f8 <disk_read>
 8014086:	2800      	cmp	r0, #0
 8014088:	f47f aeed 	bne.w	8013e66 <remove_chain+0xf6>
			fs->winsect = sector;
 801408c:	46c1      	mov	r9, r8
 801408e:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8014090:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
 8014094:	e6a6      	b.n	8013de4 <remove_chain+0x74>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8014096:	78f3      	ldrb	r3, [r6, #3]
 8014098:	7870      	ldrb	r0, [r6, #1]
 801409a:	b30b      	cbz	r3, 80140e0 <remove_chain+0x370>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801409c:	2301      	movs	r3, #1
 801409e:	464a      	mov	r2, r9
 80140a0:	4641      	mov	r1, r8
 80140a2:	f7ff fbb7 	bl	8013814 <disk_write>
 80140a6:	bb28      	cbnz	r0, 80140f4 <remove_chain+0x384>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80140a8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80140aa:	69f3      	ldr	r3, [r6, #28]
 80140ac:	eba9 0202 	sub.w	r2, r9, r2
			fs->wflag = 0;
 80140b0:	70f0      	strb	r0, [r6, #3]
 80140b2:	7870      	ldrb	r0, [r6, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80140b4:	429a      	cmp	r2, r3
 80140b6:	d213      	bcs.n	80140e0 <remove_chain+0x370>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80140b8:	f896 b002 	ldrb.w	fp, [r6, #2]
 80140bc:	f1bb 0f01 	cmp.w	fp, #1
 80140c0:	d802      	bhi.n	80140c8 <remove_chain+0x358>
 80140c2:	e00d      	b.n	80140e0 <remove_chain+0x370>
 80140c4:	69f3      	ldr	r3, [r6, #28]
 80140c6:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 80140c8:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80140ca:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 80140ce:	2301      	movs	r3, #1
 80140d0:	4641      	mov	r1, r8
 80140d2:	464a      	mov	r2, r9
 80140d4:	f7ff fb9e 	bl	8013814 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80140d8:	f1bb 0f01 	cmp.w	fp, #1
 80140dc:	d1f2      	bne.n	80140c4 <remove_chain+0x354>
 80140de:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80140e0:	2301      	movs	r3, #1
 80140e2:	463a      	mov	r2, r7
 80140e4:	4641      	mov	r1, r8
 80140e6:	f7ff fb87 	bl	80137f8 <disk_read>
 80140ea:	2800      	cmp	r0, #0
 80140ec:	f47f aebb 	bne.w	8013e66 <remove_chain+0xf6>
			fs->winsect = sector;
 80140f0:	6337      	str	r7, [r6, #48]	; 0x30
 80140f2:	e6c9      	b.n	8013e88 <remove_chain+0x118>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80140f4:	2001      	movs	r0, #1
}
 80140f6:	b005      	add	sp, #20
 80140f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80140fc:	6a66      	ldr	r6, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80140fe:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8014102:	eb06 16d5 	add.w	r6, r6, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014106:	4546      	cmp	r6, r8
 8014108:	d02d      	beq.n	8014166 <remove_chain+0x3f6>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801410a:	78e3      	ldrb	r3, [r4, #3]
 801410c:	7860      	ldrb	r0, [r4, #1]
 801410e:	b313      	cbz	r3, 8014156 <remove_chain+0x3e6>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8014110:	2301      	movs	r3, #1
 8014112:	4642      	mov	r2, r8
 8014114:	4651      	mov	r1, sl
 8014116:	f7ff fb7d 	bl	8013814 <disk_write>
 801411a:	2800      	cmp	r0, #0
 801411c:	d1ea      	bne.n	80140f4 <remove_chain+0x384>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801411e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8014120:	69e3      	ldr	r3, [r4, #28]
 8014122:	eba8 0202 	sub.w	r2, r8, r2
			fs->wflag = 0;
 8014126:	70e0      	strb	r0, [r4, #3]
 8014128:	7860      	ldrb	r0, [r4, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801412a:	429a      	cmp	r2, r3
 801412c:	d213      	bcs.n	8014156 <remove_chain+0x3e6>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801412e:	f894 9002 	ldrb.w	r9, [r4, #2]
 8014132:	f1b9 0f01 	cmp.w	r9, #1
 8014136:	d802      	bhi.n	801413e <remove_chain+0x3ce>
 8014138:	e00d      	b.n	8014156 <remove_chain+0x3e6>
 801413a:	69e3      	ldr	r3, [r4, #28]
 801413c:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 801413e:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014140:	f109 39ff 	add.w	r9, r9, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8014144:	2301      	movs	r3, #1
 8014146:	4651      	mov	r1, sl
 8014148:	4642      	mov	r2, r8
 801414a:	f7ff fb63 	bl	8013814 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801414e:	f1b9 0f01 	cmp.w	r9, #1
 8014152:	d1f2      	bne.n	801413a <remove_chain+0x3ca>
 8014154:	7860      	ldrb	r0, [r4, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8014156:	2301      	movs	r3, #1
 8014158:	4632      	mov	r2, r6
 801415a:	4651      	mov	r1, sl
 801415c:	f7ff fb4c 	bl	80137f8 <disk_read>
 8014160:	2800      	cmp	r0, #0
 8014162:	d153      	bne.n	801420c <remove_chain+0x49c>
			fs->winsect = sector;
 8014164:	6326      	str	r6, [r4, #48]	; 0x30
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8014166:	00ad      	lsls	r5, r5, #2
	*ptr++ = (BYTE)val; val >>= 8;
 8014168:	f04f 0100 	mov.w	r1, #0
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801416c:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
 8014170:	eb0a 0205 	add.w	r2, sl, r5
	rv = rv << 8 | ptr[2];
 8014174:	8853      	ldrh	r3, [r2, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8014176:	f80a 1005 	strb.w	r1, [sl, r5]
	*ptr++ = (BYTE)val; val >>= 8;
 801417a:	0a1b      	lsrs	r3, r3, #8
	*ptr++ = (BYTE)val; val >>= 8;
 801417c:	7051      	strb	r1, [r2, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 801417e:	7091      	strb	r1, [r2, #2]
 8014180:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	*ptr++ = (BYTE)val;
 8014184:	70d3      	strb	r3, [r2, #3]
			fs->wflag = 1;
 8014186:	f04f 0301 	mov.w	r3, #1
 801418a:	70e3      	strb	r3, [r4, #3]
 801418c:	e6fa      	b.n	8013f84 <remove_chain+0x214>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801418e:	6a66      	ldr	r6, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014190:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8014194:	eb06 2615 	add.w	r6, r6, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014198:	4546      	cmp	r6, r8
 801419a:	d03e      	beq.n	801421a <remove_chain+0x4aa>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801419c:	78e3      	ldrb	r3, [r4, #3]
 801419e:	7860      	ldrb	r0, [r4, #1]
 80141a0:	b30b      	cbz	r3, 80141e6 <remove_chain+0x476>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80141a2:	2301      	movs	r3, #1
 80141a4:	4642      	mov	r2, r8
 80141a6:	4651      	mov	r1, sl
 80141a8:	f7ff fb34 	bl	8013814 <disk_write>
 80141ac:	2800      	cmp	r0, #0
 80141ae:	d1a1      	bne.n	80140f4 <remove_chain+0x384>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80141b0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80141b2:	69e3      	ldr	r3, [r4, #28]
 80141b4:	eba8 0202 	sub.w	r2, r8, r2
			fs->wflag = 0;
 80141b8:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80141ba:	429a      	cmp	r2, r3
 80141bc:	d212      	bcs.n	80141e4 <remove_chain+0x474>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80141be:	f894 9002 	ldrb.w	r9, [r4, #2]
 80141c2:	f1b9 0f01 	cmp.w	r9, #1
 80141c6:	d801      	bhi.n	80141cc <remove_chain+0x45c>
 80141c8:	e00c      	b.n	80141e4 <remove_chain+0x474>
 80141ca:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
 80141cc:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80141ce:	f109 39ff 	add.w	r9, r9, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 80141d2:	2301      	movs	r3, #1
 80141d4:	4651      	mov	r1, sl
 80141d6:	4642      	mov	r2, r8
 80141d8:	7860      	ldrb	r0, [r4, #1]
 80141da:	f7ff fb1b 	bl	8013814 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80141de:	f1b9 0f01 	cmp.w	r9, #1
 80141e2:	d1f2      	bne.n	80141ca <remove_chain+0x45a>
 80141e4:	7860      	ldrb	r0, [r4, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80141e6:	2301      	movs	r3, #1
 80141e8:	4632      	mov	r2, r6
 80141ea:	4651      	mov	r1, sl
 80141ec:	f7ff fb04 	bl	80137f8 <disk_read>
 80141f0:	b960      	cbnz	r0, 801420c <remove_chain+0x49c>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80141f2:	006d      	lsls	r5, r5, #1
			fs->winsect = sector;
 80141f4:	6326      	str	r6, [r4, #48]	; 0x30
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80141f6:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
 80141fa:	eb0a 0305 	add.w	r3, sl, r5
	*ptr++ = (BYTE)val; val >>= 8;
 80141fe:	f80a 0005 	strb.w	r0, [sl, r5]
	*ptr++ = (BYTE)val;
 8014202:	7058      	strb	r0, [r3, #1]
			fs->wflag = 1;
 8014204:	f04f 0301 	mov.w	r3, #1
 8014208:	70e3      	strb	r3, [r4, #3]
 801420a:	e6bb      	b.n	8013f84 <remove_chain+0x214>
			fs->winsect = sector;
 801420c:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 8014210:	2001      	movs	r0, #1
			fs->winsect = sector;
 8014212:	6323      	str	r3, [r4, #48]	; 0x30
}
 8014214:	b005      	add	sp, #20
 8014216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801421a:	006d      	lsls	r5, r5, #1
	*ptr++ = (BYTE)val; val >>= 8;
 801421c:	f04f 0200 	mov.w	r2, #0
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8014220:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
 8014224:	eb0a 0305 	add.w	r3, sl, r5
	*ptr++ = (BYTE)val; val >>= 8;
 8014228:	f80a 2005 	strb.w	r2, [sl, r5]
	*ptr++ = (BYTE)val;
 801422c:	705a      	strb	r2, [r3, #1]
			fs->wflag = 1;
 801422e:	f04f 0301 	mov.w	r3, #1
 8014232:	70e3      	strb	r3, [r4, #3]
 8014234:	e6a6      	b.n	8013f84 <remove_chain+0x214>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8014236:	f80a 9006 	strb.w	r9, [sl, r6]
			fs->wflag = 1;
 801423a:	f04f 0301 	mov.w	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801423e:	6a66      	ldr	r6, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014240:	6b25      	ldr	r5, [r4, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8014242:	4416      	add	r6, r2
			fs->wflag = 1;
 8014244:	70e3      	strb	r3, [r4, #3]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014246:	42ae      	cmp	r6, r5
 8014248:	d047      	beq.n	80142da <remove_chain+0x56a>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801424a:	2301      	movs	r3, #1
 801424c:	462a      	mov	r2, r5
 801424e:	4651      	mov	r1, sl
 8014250:	7860      	ldrb	r0, [r4, #1]
 8014252:	f7ff fadf 	bl	8013814 <disk_write>
 8014256:	2800      	cmp	r0, #0
 8014258:	f47f af4c 	bne.w	80140f4 <remove_chain+0x384>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801425c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801425e:	69e3      	ldr	r3, [r4, #28]
 8014260:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
 8014262:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8014264:	429a      	cmp	r2, r3
 8014266:	d212      	bcs.n	801428e <remove_chain+0x51e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014268:	f894 b002 	ldrb.w	fp, [r4, #2]
 801426c:	f1bb 0f01 	cmp.w	fp, #1
 8014270:	d801      	bhi.n	8014276 <remove_chain+0x506>
 8014272:	e00c      	b.n	801428e <remove_chain+0x51e>
 8014274:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
 8014276:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014278:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 801427c:	2301      	movs	r3, #1
 801427e:	4651      	mov	r1, sl
 8014280:	462a      	mov	r2, r5
 8014282:	7860      	ldrb	r0, [r4, #1]
 8014284:	f7ff fac6 	bl	8013814 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014288:	f1bb 0f01 	cmp.w	fp, #1
 801428c:	d1f2      	bne.n	8014274 <remove_chain+0x504>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801428e:	2301      	movs	r3, #1
 8014290:	4632      	mov	r2, r6
 8014292:	4651      	mov	r1, sl
 8014294:	7860      	ldrb	r0, [r4, #1]
 8014296:	f7ff faaf 	bl	80137f8 <disk_read>
 801429a:	2800      	cmp	r0, #0
 801429c:	d1b6      	bne.n	801420c <remove_chain+0x49c>
			p = fs->win + bc % SS(fs);
 801429e:	f3c8 0808 	ubfx	r8, r8, #0, #9
			fs->winsect = sector;
 80142a2:	6326      	str	r6, [r4, #48]	; 0x30
			p = fs->win + bc % SS(fs);
 80142a4:	44d0      	add	r8, sl
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80142a6:	f1b9 0f00 	cmp.w	r9, #0
 80142aa:	d11a      	bne.n	80142e2 <remove_chain+0x572>
 80142ac:	f898 3000 	ldrb.w	r3, [r8]
 80142b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80142b4:	e661      	b.n	8013f7a <remove_chain+0x20a>
			fs->winsect = sector;
 80142b6:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
			wc |= fs->win[bc % SS(fs)] << 8;
 80142ba:	f3c7 0708 	ubfx	r7, r7, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80142be:	07eb      	lsls	r3, r5, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 80142c0:	443e      	add	r6, r7
 80142c2:	f896 7034 	ldrb.w	r7, [r6, #52]	; 0x34
 80142c6:	ea4b 2b07 	orr.w	fp, fp, r7, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80142ca:	bf4c      	ite	mi
 80142cc:	ea4f 171b 	movmi.w	r7, fp, lsr #4
 80142d0:	f3cb 070b 	ubfxpl	r7, fp, #0, #12
 80142d4:	e5e8      	b.n	8013ea8 <remove_chain+0x138>
	return FR_OK;
 80142d6:	2000      	movs	r0, #0
 80142d8:	e566      	b.n	8013da8 <remove_chain+0x38>
			p = fs->win + bc % SS(fs);
 80142da:	f3c8 0808 	ubfx	r8, r8, #0, #9
 80142de:	44d0      	add	r8, sl
 80142e0:	e7e4      	b.n	80142ac <remove_chain+0x53c>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80142e2:	4603      	mov	r3, r0
 80142e4:	e649      	b.n	8013f7a <remove_chain+0x20a>
 80142e6:	bf00      	nop

080142e8 <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80142e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80142ec:	d239      	bcs.n	8014362 <dir_sdi+0x7a>
{
 80142ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142f2:	460d      	mov	r5, r1
 80142f4:	b085      	sub	sp, #20
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80142f6:	06e9      	lsls	r1, r5, #27
 80142f8:	d12f      	bne.n	801435a <dir_sdi+0x72>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80142fa:	6884      	ldr	r4, [r0, #8]
 80142fc:	4680      	mov	r8, r0
	dp->dptr = ofs;				/* Set current offset */
 80142fe:	6145      	str	r5, [r0, #20]
	FATFS *fs = dp->obj.fs;
 8014300:	f8d0 b000 	ldr.w	fp, [r0]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8014304:	bb84      	cbnz	r4, 8014368 <dir_sdi+0x80>
 8014306:	f89b 3000 	ldrb.w	r3, [fp]
 801430a:	2b02      	cmp	r3, #2
 801430c:	d902      	bls.n	8014314 <dir_sdi+0x2c>
		clst = fs->dirbase;
 801430e:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8014312:	bb43      	cbnz	r3, 8014366 <dir_sdi+0x7e>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8014314:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 8014318:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 801431c:	d91d      	bls.n	801435a <dir_sdi+0x72>
		dp->sect = fs->dirbase;
 801431e:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 8014322:	f8c8 201c 	str.w	r2, [r8, #28]
	dp->clust = clst;					/* Current cluster# */
 8014326:	f8c8 4018 	str.w	r4, [r8, #24]
	if (!dp->sect) return FR_INT_ERR;
 801432a:	b1b2      	cbz	r2, 801435a <dir_sdi+0x72>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801432c:	f3c5 0108 	ubfx	r1, r5, #0, #9
 8014330:	f10b 0334 	add.w	r3, fp, #52	; 0x34
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8014334:	eb02 2555 	add.w	r5, r2, r5, lsr #9
	return FR_OK;
 8014338:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801433a:	440b      	add	r3, r1
 801433c:	e9c8 5307 	strd	r5, r3, [r8, #28]
}
 8014340:	b005      	add	sp, #20
 8014342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014346:	f8dd 8000 	ldr.w	r8, [sp]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801434a:	3b02      	subs	r3, #2
	clst -= 2;
 801434c:	1ea1      	subs	r1, r4, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801434e:	4299      	cmp	r1, r3
 8014350:	f0c0 8153 	bcc.w	80145fa <dir_sdi+0x312>
		dp->sect = clust2sect(fs, clst);
 8014354:	2300      	movs	r3, #0
 8014356:	e9c8 4306 	strd	r4, r3, [r8, #24]
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801435a:	2002      	movs	r0, #2
}
 801435c:	b005      	add	sp, #20
 801435e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return FR_INT_ERR;
 8014362:	2002      	movs	r0, #2
}
 8014364:	4770      	bx	lr
 8014366:	461c      	mov	r4, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8014368:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 801436c:	ea4f 2a43 	mov.w	sl, r3, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
 8014370:	4555      	cmp	r5, sl
 8014372:	f0c0 814d 	bcc.w	8014610 <dir_sdi+0x328>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8014376:	2c01      	cmp	r4, #1
 8014378:	d9ef      	bls.n	801435a <dir_sdi+0x72>
 801437a:	f8db 3018 	ldr.w	r3, [fp, #24]
 801437e:	42a3      	cmp	r3, r4
 8014380:	d9eb      	bls.n	801435a <dir_sdi+0x72>
 8014382:	465e      	mov	r6, fp
 8014384:	f8cd 8000 	str.w	r8, [sp]
		switch (fs->fs_type) {
 8014388:	7833      	ldrb	r3, [r6, #0]
 801438a:	2b02      	cmp	r3, #2
 801438c:	f000 80a3 	beq.w	80144d6 <dir_sdi+0x1ee>
 8014390:	2b03      	cmp	r3, #3
 8014392:	d043      	beq.n	801441c <dir_sdi+0x134>
 8014394:	2b01      	cmp	r3, #1
 8014396:	d1e0      	bne.n	801435a <dir_sdi+0x72>
			bc = (UINT)clst; bc += bc / 2;
 8014398:	eb04 0754 	add.w	r7, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801439c:	6a72      	ldr	r2, [r6, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 801439e:	f8d6 8030 	ldr.w	r8, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80143a2:	eb02 2957 	add.w	r9, r2, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 80143a6:	45c1      	cmp	r9, r8
 80143a8:	f000 80db 	beq.w	8014562 <dir_sdi+0x27a>
 80143ac:	f106 0134 	add.w	r1, r6, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80143b0:	78f2      	ldrb	r2, [r6, #3]
 80143b2:	7870      	ldrb	r0, [r6, #1]
 80143b4:	9101      	str	r1, [sp, #4]
 80143b6:	b31a      	cbz	r2, 8014400 <dir_sdi+0x118>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80143b8:	4642      	mov	r2, r8
 80143ba:	f7ff fa2b 	bl	8013814 <disk_write>
 80143be:	2800      	cmp	r0, #0
 80143c0:	f040 8124 	bne.w	801460c <dir_sdi+0x324>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80143c4:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80143c6:	69f3      	ldr	r3, [r6, #28]
 80143c8:	eba8 0202 	sub.w	r2, r8, r2
			fs->wflag = 0;
 80143cc:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80143ce:	429a      	cmp	r2, r3
 80143d0:	d214      	bcs.n	80143fc <dir_sdi+0x114>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80143d2:	78b2      	ldrb	r2, [r6, #2]
 80143d4:	2a01      	cmp	r2, #1
 80143d6:	d911      	bls.n	80143fc <dir_sdi+0x114>
 80143d8:	9402      	str	r4, [sp, #8]
 80143da:	4614      	mov	r4, r2
 80143dc:	9503      	str	r5, [sp, #12]
 80143de:	9d01      	ldr	r5, [sp, #4]
 80143e0:	e000      	b.n	80143e4 <dir_sdi+0xfc>
 80143e2:	69f3      	ldr	r3, [r6, #28]
					wsect += fs->fsize;
 80143e4:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80143e6:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 80143e8:	2301      	movs	r3, #1
 80143ea:	4629      	mov	r1, r5
 80143ec:	4642      	mov	r2, r8
 80143ee:	7870      	ldrb	r0, [r6, #1]
 80143f0:	f7ff fa10 	bl	8013814 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80143f4:	2c01      	cmp	r4, #1
 80143f6:	d1f4      	bne.n	80143e2 <dir_sdi+0xfa>
 80143f8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80143fc:	7870      	ldrb	r0, [r6, #1]
 80143fe:	9901      	ldr	r1, [sp, #4]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8014400:	2301      	movs	r3, #1
 8014402:	464a      	mov	r2, r9
 8014404:	f7ff f9f8 	bl	80137f8 <disk_read>
 8014408:	2800      	cmp	r0, #0
 801440a:	f000 80a6 	beq.w	801455a <dir_sdi+0x272>
			fs->winsect = sector;
 801440e:	f04f 33ff 	mov.w	r3, #4294967295
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8014412:	2001      	movs	r0, #1
			fs->winsect = sector;
 8014414:	6333      	str	r3, [r6, #48]	; 0x30
}
 8014416:	b005      	add	sp, #20
 8014418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801441c:	6a77      	ldr	r7, [r6, #36]	; 0x24
 801441e:	f106 0834 	add.w	r8, r6, #52	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014422:	f8d6 9030 	ldr.w	r9, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8014426:	eb07 17d4 	add.w	r7, r7, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 801442a:	454f      	cmp	r7, r9
 801442c:	d02d      	beq.n	801448a <dir_sdi+0x1a2>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801442e:	78f3      	ldrb	r3, [r6, #3]
 8014430:	7870      	ldrb	r0, [r6, #1]
 8014432:	b313      	cbz	r3, 801447a <dir_sdi+0x192>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8014434:	2301      	movs	r3, #1
 8014436:	464a      	mov	r2, r9
 8014438:	4641      	mov	r1, r8
 801443a:	f7ff f9eb 	bl	8013814 <disk_write>
 801443e:	2800      	cmp	r0, #0
 8014440:	f040 80e4 	bne.w	801460c <dir_sdi+0x324>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8014444:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8014446:	69f3      	ldr	r3, [r6, #28]
 8014448:	eba9 0202 	sub.w	r2, r9, r2
			fs->wflag = 0;
 801444c:	70f0      	strb	r0, [r6, #3]
 801444e:	7870      	ldrb	r0, [r6, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8014450:	429a      	cmp	r2, r3
 8014452:	d212      	bcs.n	801447a <dir_sdi+0x192>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014454:	78b2      	ldrb	r2, [r6, #2]
 8014456:	2a01      	cmp	r2, #1
 8014458:	d90f      	bls.n	801447a <dir_sdi+0x192>
 801445a:	9401      	str	r4, [sp, #4]
 801445c:	4614      	mov	r4, r2
 801445e:	e001      	b.n	8014464 <dir_sdi+0x17c>
 8014460:	69f3      	ldr	r3, [r6, #28]
 8014462:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 8014464:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014466:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8014468:	2301      	movs	r3, #1
 801446a:	4641      	mov	r1, r8
 801446c:	464a      	mov	r2, r9
 801446e:	f7ff f9d1 	bl	8013814 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014472:	2c01      	cmp	r4, #1
 8014474:	d1f4      	bne.n	8014460 <dir_sdi+0x178>
 8014476:	9c01      	ldr	r4, [sp, #4]
 8014478:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801447a:	2301      	movs	r3, #1
 801447c:	463a      	mov	r2, r7
 801447e:	4641      	mov	r1, r8
 8014480:	f7ff f9ba 	bl	80137f8 <disk_read>
 8014484:	2800      	cmp	r0, #0
 8014486:	d1c2      	bne.n	801440e <dir_sdi+0x126>
			fs->winsect = sector;
 8014488:	6337      	str	r7, [r6, #48]	; 0x30
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801448a:	00a4      	lsls	r4, r4, #2
 801448c:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8014490:	eb08 0204 	add.w	r2, r8, r4
	rv = rv << 8 | ptr[0];
 8014494:	f818 4004 	ldrb.w	r4, [r8, r4]
	rv = rv << 8 | ptr[2];
 8014498:	8851      	ldrh	r1, [r2, #2]
	rv = rv << 8 | ptr[1];
 801449a:	7853      	ldrb	r3, [r2, #1]
 801449c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 80144a0:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80144a4:	f024 4470 	bic.w	r4, r4, #4026531840	; 0xf0000000
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80144a8:	2c01      	cmp	r4, #1
 80144aa:	f67f af56 	bls.w	801435a <dir_sdi+0x72>
 80144ae:	f8db 3018 	ldr.w	r3, [fp, #24]
 80144b2:	42a3      	cmp	r3, r4
 80144b4:	f67f af51 	bls.w	801435a <dir_sdi+0x72>
			ofs -= csz;
 80144b8:	eba5 050a 	sub.w	r5, r5, sl
		while (ofs >= csz) {				/* Follow cluster chain */
 80144bc:	45aa      	cmp	sl, r5
 80144be:	f63f af42 	bhi.w	8014346 <dir_sdi+0x5e>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80144c2:	9b00      	ldr	r3, [sp, #0]
 80144c4:	681e      	ldr	r6, [r3, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80144c6:	69b3      	ldr	r3, [r6, #24]
 80144c8:	42a3      	cmp	r3, r4
 80144ca:	f67f af46 	bls.w	801435a <dir_sdi+0x72>
		switch (fs->fs_type) {
 80144ce:	7833      	ldrb	r3, [r6, #0]
 80144d0:	2b02      	cmp	r3, #2
 80144d2:	f47f af5d 	bne.w	8014390 <dir_sdi+0xa8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80144d6:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80144d8:	f106 0834 	add.w	r8, r6, #52	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 80144dc:	f8d6 9030 	ldr.w	r9, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80144e0:	eb07 2714 	add.w	r7, r7, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 80144e4:	454f      	cmp	r7, r9
 80144e6:	d02d      	beq.n	8014544 <dir_sdi+0x25c>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80144e8:	78f3      	ldrb	r3, [r6, #3]
 80144ea:	7870      	ldrb	r0, [r6, #1]
 80144ec:	b30b      	cbz	r3, 8014532 <dir_sdi+0x24a>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80144ee:	2301      	movs	r3, #1
 80144f0:	464a      	mov	r2, r9
 80144f2:	4641      	mov	r1, r8
 80144f4:	f7ff f98e 	bl	8013814 <disk_write>
 80144f8:	2800      	cmp	r0, #0
 80144fa:	f040 8087 	bne.w	801460c <dir_sdi+0x324>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80144fe:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8014500:	69f3      	ldr	r3, [r6, #28]
 8014502:	eba9 0202 	sub.w	r2, r9, r2
			fs->wflag = 0;
 8014506:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8014508:	429a      	cmp	r2, r3
 801450a:	d211      	bcs.n	8014530 <dir_sdi+0x248>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801450c:	78b2      	ldrb	r2, [r6, #2]
 801450e:	2a01      	cmp	r2, #1
 8014510:	d90e      	bls.n	8014530 <dir_sdi+0x248>
 8014512:	9401      	str	r4, [sp, #4]
 8014514:	4614      	mov	r4, r2
 8014516:	e000      	b.n	801451a <dir_sdi+0x232>
 8014518:	69f3      	ldr	r3, [r6, #28]
					wsect += fs->fsize;
 801451a:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801451c:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 801451e:	2301      	movs	r3, #1
 8014520:	4641      	mov	r1, r8
 8014522:	464a      	mov	r2, r9
 8014524:	7870      	ldrb	r0, [r6, #1]
 8014526:	f7ff f975 	bl	8013814 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801452a:	2c01      	cmp	r4, #1
 801452c:	d1f4      	bne.n	8014518 <dir_sdi+0x230>
 801452e:	9c01      	ldr	r4, [sp, #4]
 8014530:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8014532:	2301      	movs	r3, #1
 8014534:	463a      	mov	r2, r7
 8014536:	4641      	mov	r1, r8
 8014538:	f7ff f95e 	bl	80137f8 <disk_read>
 801453c:	2800      	cmp	r0, #0
 801453e:	f47f af66 	bne.w	801440e <dir_sdi+0x126>
			fs->winsect = sector;
 8014542:	6337      	str	r7, [r6, #48]	; 0x30
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8014544:	0064      	lsls	r4, r4, #1
 8014546:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 801454a:	eb08 0304 	add.w	r3, r8, r4
	rv = rv << 8 | ptr[0];
 801454e:	f818 4004 	ldrb.w	r4, [r8, r4]
 8014552:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8014554:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8014558:	e7a6      	b.n	80144a8 <dir_sdi+0x1c0>
			fs->winsect = sector;
 801455a:	46c8      	mov	r8, r9
 801455c:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801455e:	f8c6 9030 	str.w	r9, [r6, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 8014562:	1c79      	adds	r1, r7, #1
 8014564:	f3c7 0308 	ubfx	r3, r7, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014568:	eb02 2951 	add.w	r9, r2, r1, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 801456c:	4433      	add	r3, r6
 801456e:	9101      	str	r1, [sp, #4]
 8014570:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014574:	45c1      	cmp	r9, r8
			wc = fs->win[bc++ % SS(fs)];
 8014576:	9302      	str	r3, [sp, #8]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014578:	d030      	beq.n	80145dc <dir_sdi+0x2f4>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801457a:	78f3      	ldrb	r3, [r6, #3]
 801457c:	f106 0734 	add.w	r7, r6, #52	; 0x34
 8014580:	7870      	ldrb	r0, [r6, #1]
 8014582:	b30b      	cbz	r3, 80145c8 <dir_sdi+0x2e0>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8014584:	2301      	movs	r3, #1
 8014586:	4642      	mov	r2, r8
 8014588:	4639      	mov	r1, r7
 801458a:	f7ff f943 	bl	8013814 <disk_write>
 801458e:	2800      	cmp	r0, #0
 8014590:	d13c      	bne.n	801460c <dir_sdi+0x324>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8014592:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8014594:	69f3      	ldr	r3, [r6, #28]
 8014596:	eba8 0202 	sub.w	r2, r8, r2
			fs->wflag = 0;
 801459a:	70f0      	strb	r0, [r6, #3]
 801459c:	7870      	ldrb	r0, [r6, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801459e:	429a      	cmp	r2, r3
 80145a0:	d212      	bcs.n	80145c8 <dir_sdi+0x2e0>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80145a2:	78b2      	ldrb	r2, [r6, #2]
 80145a4:	2a01      	cmp	r2, #1
 80145a6:	d90f      	bls.n	80145c8 <dir_sdi+0x2e0>
 80145a8:	9403      	str	r4, [sp, #12]
 80145aa:	4614      	mov	r4, r2
 80145ac:	e001      	b.n	80145b2 <dir_sdi+0x2ca>
 80145ae:	69f3      	ldr	r3, [r6, #28]
 80145b0:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 80145b2:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80145b4:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 80145b6:	2301      	movs	r3, #1
 80145b8:	4639      	mov	r1, r7
 80145ba:	4642      	mov	r2, r8
 80145bc:	f7ff f92a 	bl	8013814 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80145c0:	2c01      	cmp	r4, #1
 80145c2:	d1f4      	bne.n	80145ae <dir_sdi+0x2c6>
 80145c4:	9c03      	ldr	r4, [sp, #12]
 80145c6:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80145c8:	4639      	mov	r1, r7
 80145ca:	2301      	movs	r3, #1
 80145cc:	464a      	mov	r2, r9
 80145ce:	f7ff f913 	bl	80137f8 <disk_read>
 80145d2:	2800      	cmp	r0, #0
 80145d4:	f47f af1b 	bne.w	801440e <dir_sdi+0x126>
			fs->winsect = sector;
 80145d8:	f8c6 9030 	str.w	r9, [r6, #48]	; 0x30
			wc |= fs->win[bc % SS(fs)] << 8;
 80145dc:	9b01      	ldr	r3, [sp, #4]
 80145de:	9a02      	ldr	r2, [sp, #8]
 80145e0:	f3c3 0708 	ubfx	r7, r3, #0, #9
 80145e4:	443e      	add	r6, r7
 80145e6:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 80145ea:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80145ee:	07e2      	lsls	r2, r4, #31
 80145f0:	bf4c      	ite	mi
 80145f2:	091c      	lsrmi	r4, r3, #4
 80145f4:	f3c3 040b 	ubfxpl	r4, r3, #0, #12
 80145f8:	e756      	b.n	80144a8 <dir_sdi+0x1c0>
	return clst * fs->csize + fs->database;
 80145fa:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 80145fe:	f8db 302c 	ldr.w	r3, [fp, #44]	; 0x2c
 8014602:	fb01 3202 	mla	r2, r1, r2, r3
		dp->sect = clust2sect(fs, clst);
 8014606:	f8c8 201c 	str.w	r2, [r8, #28]
 801460a:	e68c      	b.n	8014326 <dir_sdi+0x3e>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801460c:	2001      	movs	r0, #1
 801460e:	e6a5      	b.n	801435c <dir_sdi+0x74>
 8014610:	f8db 3018 	ldr.w	r3, [fp, #24]
 8014614:	e699      	b.n	801434a <dir_sdi+0x62>
 8014616:	bf00      	nop

08014618 <get_fat.isra.8>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8014618:	2901      	cmp	r1, #1
 801461a:	d932      	bls.n	8014682 <get_fat.isra.8+0x6a>
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 801461c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8014620:	6983      	ldr	r3, [r0, #24]
 8014622:	4299      	cmp	r1, r3
 8014624:	d22a      	bcs.n	801467c <get_fat.isra.8+0x64>
		switch (fs->fs_type) {
 8014626:	7803      	ldrb	r3, [r0, #0]
 8014628:	4606      	mov	r6, r0
 801462a:	460c      	mov	r4, r1
 801462c:	2b02      	cmp	r3, #2
 801462e:	d041      	beq.n	80146b4 <get_fat.isra.8+0x9c>
 8014630:	2b03      	cmp	r3, #3
 8014632:	d028      	beq.n	8014686 <get_fat.isra.8+0x6e>
 8014634:	2b01      	cmp	r3, #1
 8014636:	d121      	bne.n	801467c <get_fat.isra.8+0x64>
			bc = (UINT)clst; bc += bc / 2;
 8014638:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801463c:	6a42      	ldr	r2, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 801463e:	f8d0 8030 	ldr.w	r8, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014642:	eb02 2557 	add.w	r5, r2, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014646:	4545      	cmp	r5, r8
 8014648:	f040 80a5 	bne.w	8014796 <get_fat.isra.8+0x17e>
			wc = fs->win[bc++ % SS(fs)];
 801464c:	f3c7 0308 	ubfx	r3, r7, #0, #9
 8014650:	3701      	adds	r7, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014652:	eb02 2957 	add.w	r9, r2, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 8014656:	4433      	add	r3, r6
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014658:	45c1      	cmp	r9, r8
			wc = fs->win[bc++ % SS(fs)];
 801465a:	f893 5034 	ldrb.w	r5, [r3, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 801465e:	f040 80ca 	bne.w	80147f6 <get_fat.isra.8+0x1de>
			wc |= fs->win[bc % SS(fs)] << 8;
 8014662:	f3c7 0008 	ubfx	r0, r7, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8014666:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8014668:	4430      	add	r0, r6
 801466a:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 801466e:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8014672:	bf4c      	ite	mi
 8014674:	0900      	lsrmi	r0, r0, #4
 8014676:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 801467a:	e000      	b.n	801467e <get_fat.isra.8+0x66>
			val = 1;	/* Internal error */
 801467c:	2001      	movs	r0, #1
}
 801467e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		val = 1;	/* Internal error */
 8014682:	2001      	movs	r0, #1
}
 8014684:	4770      	bx	lr
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8014686:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014688:	f100 0734 	add.w	r7, r0, #52	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 801468c:	f8d0 8030 	ldr.w	r8, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8014690:	eb05 15d1 	add.w	r5, r5, r1, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014694:	4545      	cmp	r5, r8
 8014696:	d14e      	bne.n	8014736 <get_fat.isra.8+0x11e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8014698:	00a1      	lsls	r1, r4, #2
 801469a:	f401 71fe 	and.w	r1, r1, #508	; 0x1fc
 801469e:	187a      	adds	r2, r7, r1
	rv = rv << 8 | ptr[0];
 80146a0:	5c78      	ldrb	r0, [r7, r1]
	rv = rv << 8 | ptr[1];
 80146a2:	7853      	ldrb	r3, [r2, #1]
	rv = rv << 8 | ptr[2];
 80146a4:	8851      	ldrh	r1, [r2, #2]
	rv = rv << 8 | ptr[1];
 80146a6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 80146aa:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80146ae:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 80146b2:	e7e4      	b.n	801467e <get_fat.isra.8+0x66>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80146b4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80146b6:	f100 0734 	add.w	r7, r0, #52	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 80146ba:	f8d0 8030 	ldr.w	r8, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80146be:	eb05 2511 	add.w	r5, r5, r1, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 80146c2:	4545      	cmp	r5, r8
 80146c4:	d02e      	beq.n	8014724 <get_fat.isra.8+0x10c>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80146c6:	78c3      	ldrb	r3, [r0, #3]
 80146c8:	7840      	ldrb	r0, [r0, #1]
 80146ca:	b313      	cbz	r3, 8014712 <get_fat.isra.8+0xfa>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80146cc:	2301      	movs	r3, #1
 80146ce:	4642      	mov	r2, r8
 80146d0:	4639      	mov	r1, r7
 80146d2:	f7ff f89f 	bl	8013814 <disk_write>
 80146d6:	2800      	cmp	r0, #0
 80146d8:	f040 80c1 	bne.w	801485e <get_fat.isra.8+0x246>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80146dc:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80146de:	69f3      	ldr	r3, [r6, #28]
 80146e0:	eba8 0202 	sub.w	r2, r8, r2
			fs->wflag = 0;
 80146e4:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80146e6:	429a      	cmp	r2, r3
 80146e8:	d212      	bcs.n	8014710 <get_fat.isra.8+0xf8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80146ea:	f896 9002 	ldrb.w	r9, [r6, #2]
 80146ee:	f1b9 0f01 	cmp.w	r9, #1
 80146f2:	d801      	bhi.n	80146f8 <get_fat.isra.8+0xe0>
 80146f4:	e00c      	b.n	8014710 <get_fat.isra.8+0xf8>
 80146f6:	69f3      	ldr	r3, [r6, #28]
					wsect += fs->fsize;
 80146f8:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80146fa:	f109 39ff 	add.w	r9, r9, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 80146fe:	2301      	movs	r3, #1
 8014700:	4639      	mov	r1, r7
 8014702:	4642      	mov	r2, r8
 8014704:	7870      	ldrb	r0, [r6, #1]
 8014706:	f7ff f885 	bl	8013814 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801470a:	f1b9 0f01 	cmp.w	r9, #1
 801470e:	d1f2      	bne.n	80146f6 <get_fat.isra.8+0xde>
 8014710:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8014712:	2301      	movs	r3, #1
 8014714:	462a      	mov	r2, r5
 8014716:	4639      	mov	r1, r7
 8014718:	f7ff f86e 	bl	80137f8 <disk_read>
 801471c:	2800      	cmp	r0, #0
 801471e:	f040 809a 	bne.w	8014856 <get_fat.isra.8+0x23e>
			fs->winsect = sector;
 8014722:	6335      	str	r5, [r6, #48]	; 0x30
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8014724:	0061      	lsls	r1, r4, #1
 8014726:	f401 71ff 	and.w	r1, r1, #510	; 0x1fe
 801472a:	187b      	adds	r3, r7, r1
	rv = rv << 8 | ptr[0];
 801472c:	5c78      	ldrb	r0, [r7, r1]
 801472e:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8014730:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8014734:	e7a3      	b.n	801467e <get_fat.isra.8+0x66>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8014736:	78c3      	ldrb	r3, [r0, #3]
 8014738:	7840      	ldrb	r0, [r0, #1]
 801473a:	b31b      	cbz	r3, 8014784 <get_fat.isra.8+0x16c>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801473c:	2301      	movs	r3, #1
 801473e:	4642      	mov	r2, r8
 8014740:	4639      	mov	r1, r7
 8014742:	f7ff f867 	bl	8013814 <disk_write>
 8014746:	2800      	cmp	r0, #0
 8014748:	f040 8089 	bne.w	801485e <get_fat.isra.8+0x246>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801474c:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801474e:	69f3      	ldr	r3, [r6, #28]
 8014750:	eba8 0202 	sub.w	r2, r8, r2
			fs->wflag = 0;
 8014754:	70f0      	strb	r0, [r6, #3]
 8014756:	7870      	ldrb	r0, [r6, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8014758:	429a      	cmp	r2, r3
 801475a:	d213      	bcs.n	8014784 <get_fat.isra.8+0x16c>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801475c:	f896 9002 	ldrb.w	r9, [r6, #2]
 8014760:	f1b9 0f01 	cmp.w	r9, #1
 8014764:	d802      	bhi.n	801476c <get_fat.isra.8+0x154>
 8014766:	e00d      	b.n	8014784 <get_fat.isra.8+0x16c>
 8014768:	69f3      	ldr	r3, [r6, #28]
 801476a:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 801476c:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801476e:	f109 39ff 	add.w	r9, r9, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8014772:	2301      	movs	r3, #1
 8014774:	4639      	mov	r1, r7
 8014776:	4642      	mov	r2, r8
 8014778:	f7ff f84c 	bl	8013814 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801477c:	f1b9 0f01 	cmp.w	r9, #1
 8014780:	d1f2      	bne.n	8014768 <get_fat.isra.8+0x150>
 8014782:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8014784:	2301      	movs	r3, #1
 8014786:	462a      	mov	r2, r5
 8014788:	4639      	mov	r1, r7
 801478a:	f7ff f835 	bl	80137f8 <disk_read>
 801478e:	2800      	cmp	r0, #0
 8014790:	d161      	bne.n	8014856 <get_fat.isra.8+0x23e>
			fs->winsect = sector;
 8014792:	6335      	str	r5, [r6, #48]	; 0x30
 8014794:	e780      	b.n	8014698 <get_fat.isra.8+0x80>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8014796:	78c2      	ldrb	r2, [r0, #3]
 8014798:	f100 0934 	add.w	r9, r0, #52	; 0x34
 801479c:	7840      	ldrb	r0, [r0, #1]
 801479e:	b302      	cbz	r2, 80147e2 <get_fat.isra.8+0x1ca>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80147a0:	4642      	mov	r2, r8
 80147a2:	4649      	mov	r1, r9
 80147a4:	f7ff f836 	bl	8013814 <disk_write>
 80147a8:	2800      	cmp	r0, #0
 80147aa:	d158      	bne.n	801485e <get_fat.isra.8+0x246>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80147ac:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80147ae:	69f3      	ldr	r3, [r6, #28]
 80147b0:	eba8 0202 	sub.w	r2, r8, r2
			fs->wflag = 0;
 80147b4:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80147b6:	429a      	cmp	r2, r3
 80147b8:	d212      	bcs.n	80147e0 <get_fat.isra.8+0x1c8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80147ba:	f896 a002 	ldrb.w	sl, [r6, #2]
 80147be:	f1ba 0f01 	cmp.w	sl, #1
 80147c2:	d801      	bhi.n	80147c8 <get_fat.isra.8+0x1b0>
 80147c4:	e00c      	b.n	80147e0 <get_fat.isra.8+0x1c8>
 80147c6:	69f3      	ldr	r3, [r6, #28]
					wsect += fs->fsize;
 80147c8:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80147ca:	f10a 3aff 	add.w	sl, sl, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 80147ce:	2301      	movs	r3, #1
 80147d0:	4649      	mov	r1, r9
 80147d2:	4642      	mov	r2, r8
 80147d4:	7870      	ldrb	r0, [r6, #1]
 80147d6:	f7ff f81d 	bl	8013814 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80147da:	f1ba 0f01 	cmp.w	sl, #1
 80147de:	d1f2      	bne.n	80147c6 <get_fat.isra.8+0x1ae>
 80147e0:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80147e2:	4649      	mov	r1, r9
 80147e4:	2301      	movs	r3, #1
 80147e6:	462a      	mov	r2, r5
 80147e8:	f7ff f806 	bl	80137f8 <disk_read>
 80147ec:	bb98      	cbnz	r0, 8014856 <get_fat.isra.8+0x23e>
			fs->winsect = sector;
 80147ee:	46a8      	mov	r8, r5
 80147f0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80147f2:	6335      	str	r5, [r6, #48]	; 0x30
 80147f4:	e72a      	b.n	801464c <get_fat.isra.8+0x34>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80147f6:	78f3      	ldrb	r3, [r6, #3]
 80147f8:	f106 0a34 	add.w	sl, r6, #52	; 0x34
 80147fc:	7870      	ldrb	r0, [r6, #1]
 80147fe:	b30b      	cbz	r3, 8014844 <get_fat.isra.8+0x22c>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8014800:	2301      	movs	r3, #1
 8014802:	4642      	mov	r2, r8
 8014804:	4651      	mov	r1, sl
 8014806:	f7ff f805 	bl	8013814 <disk_write>
 801480a:	bb40      	cbnz	r0, 801485e <get_fat.isra.8+0x246>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801480c:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801480e:	69f3      	ldr	r3, [r6, #28]
 8014810:	eba8 0202 	sub.w	r2, r8, r2
			fs->wflag = 0;
 8014814:	70f0      	strb	r0, [r6, #3]
 8014816:	7870      	ldrb	r0, [r6, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8014818:	429a      	cmp	r2, r3
 801481a:	d213      	bcs.n	8014844 <get_fat.isra.8+0x22c>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801481c:	f896 b002 	ldrb.w	fp, [r6, #2]
 8014820:	f1bb 0f01 	cmp.w	fp, #1
 8014824:	d802      	bhi.n	801482c <get_fat.isra.8+0x214>
 8014826:	e00d      	b.n	8014844 <get_fat.isra.8+0x22c>
 8014828:	69f3      	ldr	r3, [r6, #28]
 801482a:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 801482c:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801482e:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8014832:	2301      	movs	r3, #1
 8014834:	4651      	mov	r1, sl
 8014836:	4642      	mov	r2, r8
 8014838:	f7fe ffec 	bl	8013814 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801483c:	f1bb 0f01 	cmp.w	fp, #1
 8014840:	d1f2      	bne.n	8014828 <get_fat.isra.8+0x210>
 8014842:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8014844:	4651      	mov	r1, sl
 8014846:	2301      	movs	r3, #1
 8014848:	464a      	mov	r2, r9
 801484a:	f7fe ffd5 	bl	80137f8 <disk_read>
 801484e:	b910      	cbnz	r0, 8014856 <get_fat.isra.8+0x23e>
			fs->winsect = sector;
 8014850:	f8c6 9030 	str.w	r9, [r6, #48]	; 0x30
 8014854:	e705      	b.n	8014662 <get_fat.isra.8+0x4a>
 8014856:	f04f 30ff 	mov.w	r0, #4294967295
 801485a:	6330      	str	r0, [r6, #48]	; 0x30
 801485c:	e70f      	b.n	801467e <get_fat.isra.8+0x66>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801485e:	f04f 30ff 	mov.w	r0, #4294967295
 8014862:	e70c      	b.n	801467e <get_fat.isra.8+0x66>

08014864 <create_chain>:
{
 8014864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014868:	b087      	sub	sp, #28
 801486a:	4682      	mov	sl, r0
	FATFS *fs = obj->fs;
 801486c:	f8d0 b000 	ldr.w	fp, [r0]
	if (clst == 0) {	/* Create a new chain */
 8014870:	9101      	str	r1, [sp, #4]
 8014872:	2900      	cmp	r1, #0
 8014874:	f040 8191 	bne.w	8014b9a <create_chain+0x336>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8014878:	f8db 8010 	ldr.w	r8, [fp, #16]
 801487c:	f8db 3018 	ldr.w	r3, [fp, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8014880:	f1b8 0f00 	cmp.w	r8, #0
 8014884:	d020      	beq.n	80148c8 <create_chain+0x64>
 8014886:	4598      	cmp	r8, r3
 8014888:	bf28      	it	cs
 801488a:	f04f 0801 	movcs.w	r8, #1
 801488e:	4644      	mov	r4, r8
 8014890:	46d1      	mov	r9, sl
			ncl++;							/* Next cluster */
 8014892:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8014894:	429c      	cmp	r4, r3
 8014896:	d31a      	bcc.n	80148ce <create_chain+0x6a>
				if (ncl > scl) return 0;	/* No free cluster */
 8014898:	f1b8 0f01 	cmp.w	r8, #1
 801489c:	f240 8178 	bls.w	8014b90 <create_chain+0x32c>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80148a0:	f8d9 5000 	ldr.w	r5, [r9]
				ncl = 2;
 80148a4:	2402      	movs	r4, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80148a6:	69ab      	ldr	r3, [r5, #24]
 80148a8:	42a3      	cmp	r3, r4
 80148aa:	d908      	bls.n	80148be <create_chain+0x5a>
		switch (fs->fs_type) {
 80148ac:	782b      	ldrb	r3, [r5, #0]
 80148ae:	2b02      	cmp	r3, #2
 80148b0:	f000 8126 	beq.w	8014b00 <create_chain+0x29c>
 80148b4:	2b03      	cmp	r3, #3
 80148b6:	f000 80ac 	beq.w	8014a12 <create_chain+0x1ae>
 80148ba:	2b01      	cmp	r3, #1
 80148bc:	d00c      	beq.n	80148d8 <create_chain+0x74>
			val = 1;	/* Internal error */
 80148be:	2401      	movs	r4, #1
}
 80148c0:	4620      	mov	r0, r4
 80148c2:	b007      	add	sp, #28
 80148c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80148c8:	f04f 0801 	mov.w	r8, #1
 80148cc:	e7df      	b.n	801488e <create_chain+0x2a>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80148ce:	2c01      	cmp	r4, #1
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80148d0:	f8d9 5000 	ldr.w	r5, [r9]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80148d4:	d9f3      	bls.n	80148be <create_chain+0x5a>
 80148d6:	e7e6      	b.n	80148a6 <create_chain+0x42>
			bc = (UINT)clst; bc += bc / 2;
 80148d8:	eb04 0654 	add.w	r6, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80148dc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80148de:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80148e2:	eb02 2756 	add.w	r7, r2, r6, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 80148e6:	4557      	cmp	r7, sl
 80148e8:	d036      	beq.n	8014958 <create_chain+0xf4>
 80148ea:	f105 0134 	add.w	r1, r5, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80148ee:	78ea      	ldrb	r2, [r5, #3]
 80148f0:	7868      	ldrb	r0, [r5, #1]
 80148f2:	9102      	str	r1, [sp, #8]
 80148f4:	b332      	cbz	r2, 8014944 <create_chain+0xe0>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80148f6:	4652      	mov	r2, sl
 80148f8:	f7fe ff8c 	bl	8013814 <disk_write>
 80148fc:	2800      	cmp	r0, #0
 80148fe:	f040 8160 	bne.w	8014bc2 <create_chain+0x35e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8014902:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8014904:	69eb      	ldr	r3, [r5, #28]
 8014906:	ebaa 0202 	sub.w	r2, sl, r2
			fs->wflag = 0;
 801490a:	70e8      	strb	r0, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801490c:	429a      	cmp	r2, r3
 801490e:	d217      	bcs.n	8014940 <create_chain+0xdc>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014910:	78aa      	ldrb	r2, [r5, #2]
 8014912:	2a01      	cmp	r2, #1
 8014914:	d914      	bls.n	8014940 <create_chain+0xdc>
 8014916:	f8cd 800c 	str.w	r8, [sp, #12]
 801491a:	4690      	mov	r8, r2
 801491c:	9404      	str	r4, [sp, #16]
 801491e:	9c02      	ldr	r4, [sp, #8]
 8014920:	e000      	b.n	8014924 <create_chain+0xc0>
 8014922:	69eb      	ldr	r3, [r5, #28]
					wsect += fs->fsize;
 8014924:	449a      	add	sl, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014926:	f108 38ff 	add.w	r8, r8, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 801492a:	2301      	movs	r3, #1
 801492c:	4621      	mov	r1, r4
 801492e:	4652      	mov	r2, sl
 8014930:	7868      	ldrb	r0, [r5, #1]
 8014932:	f7fe ff6f 	bl	8013814 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014936:	f1b8 0f01 	cmp.w	r8, #1
 801493a:	d1f2      	bne.n	8014922 <create_chain+0xbe>
 801493c:	e9dd 8403 	ldrd	r8, r4, [sp, #12]
 8014940:	7868      	ldrb	r0, [r5, #1]
 8014942:	9902      	ldr	r1, [sp, #8]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8014944:	2301      	movs	r3, #1
 8014946:	463a      	mov	r2, r7
 8014948:	f7fe ff56 	bl	80137f8 <disk_read>
 801494c:	2800      	cmp	r0, #0
 801494e:	f040 810e 	bne.w	8014b6e <create_chain+0x30a>
			fs->winsect = sector;
 8014952:	46ba      	mov	sl, r7
 8014954:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8014956:	632f      	str	r7, [r5, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 8014958:	f3c6 0308 	ubfx	r3, r6, #0, #9
 801495c:	3601      	adds	r6, #1
 801495e:	442b      	add	r3, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014960:	eb02 2756 	add.w	r7, r2, r6, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 8014964:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014968:	4557      	cmp	r7, sl
			wc = fs->win[bc++ % SS(fs)];
 801496a:	9302      	str	r3, [sp, #8]
	if (sector != fs->winsect) {	/* Window offset changed? */
 801496c:	d03a      	beq.n	80149e4 <create_chain+0x180>
 801496e:	f105 0234 	add.w	r2, r5, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8014972:	78eb      	ldrb	r3, [r5, #3]
 8014974:	7868      	ldrb	r0, [r5, #1]
 8014976:	4611      	mov	r1, r2
 8014978:	9203      	str	r2, [sp, #12]
 801497a:	b34b      	cbz	r3, 80149d0 <create_chain+0x16c>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801497c:	2301      	movs	r3, #1
 801497e:	4652      	mov	r2, sl
 8014980:	f7fe ff48 	bl	8013814 <disk_write>
 8014984:	2800      	cmp	r0, #0
 8014986:	f040 811c 	bne.w	8014bc2 <create_chain+0x35e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801498a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801498c:	69eb      	ldr	r3, [r5, #28]
 801498e:	ebaa 0202 	sub.w	r2, sl, r2
			fs->wflag = 0;
 8014992:	70e8      	strb	r0, [r5, #3]
 8014994:	7868      	ldrb	r0, [r5, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8014996:	429a      	cmp	r2, r3
 8014998:	d21a      	bcs.n	80149d0 <create_chain+0x16c>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801499a:	f895 c002 	ldrb.w	ip, [r5, #2]
 801499e:	4662      	mov	r2, ip
 80149a0:	2a01      	cmp	r2, #1
 80149a2:	d915      	bls.n	80149d0 <create_chain+0x16c>
 80149a4:	f8cd 8010 	str.w	r8, [sp, #16]
 80149a8:	46e0      	mov	r8, ip
 80149aa:	9405      	str	r4, [sp, #20]
 80149ac:	9c03      	ldr	r4, [sp, #12]
 80149ae:	e001      	b.n	80149b4 <create_chain+0x150>
 80149b0:	69eb      	ldr	r3, [r5, #28]
 80149b2:	7868      	ldrb	r0, [r5, #1]
					wsect += fs->fsize;
 80149b4:	449a      	add	sl, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80149b6:	f108 38ff 	add.w	r8, r8, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 80149ba:	2301      	movs	r3, #1
 80149bc:	4621      	mov	r1, r4
 80149be:	4652      	mov	r2, sl
 80149c0:	f7fe ff28 	bl	8013814 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80149c4:	f1b8 0f01 	cmp.w	r8, #1
 80149c8:	d1f2      	bne.n	80149b0 <create_chain+0x14c>
 80149ca:	7868      	ldrb	r0, [r5, #1]
 80149cc:	e9dd 8404 	ldrd	r8, r4, [sp, #16]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80149d0:	9903      	ldr	r1, [sp, #12]
 80149d2:	2301      	movs	r3, #1
 80149d4:	463a      	mov	r2, r7
 80149d6:	f7fe ff0f 	bl	80137f8 <disk_read>
 80149da:	2800      	cmp	r0, #0
 80149dc:	f040 80c7 	bne.w	8014b6e <create_chain+0x30a>
 80149e0:	9b02      	ldr	r3, [sp, #8]
			fs->winsect = sector;
 80149e2:	632f      	str	r7, [r5, #48]	; 0x30
			wc |= fs->win[bc % SS(fs)] << 8;
 80149e4:	f3c6 0608 	ubfx	r6, r6, #0, #9
 80149e8:	4435      	add	r5, r6
 80149ea:	f895 7034 	ldrb.w	r7, [r5, #52]	; 0x34
 80149ee:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80149f2:	07e3      	lsls	r3, r4, #31
 80149f4:	bf4c      	ite	mi
 80149f6:	093f      	lsrmi	r7, r7, #4
 80149f8:	f3c7 070b 	ubfxpl	r7, r7, #0, #12
			if (cs == 0) break;				/* Found a free cluster */
 80149fc:	2f00      	cmp	r7, #0
 80149fe:	d051      	beq.n	8014aa4 <create_chain+0x240>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8014a00:	2f01      	cmp	r7, #1
 8014a02:	f000 80e4 	beq.w	8014bce <create_chain+0x36a>
			if (ncl == scl) return 0;		/* No free cluster */
 8014a06:	45a0      	cmp	r8, r4
 8014a08:	f000 80c2 	beq.w	8014b90 <create_chain+0x32c>
 8014a0c:	f8db 3018 	ldr.w	r3, [fp, #24]
 8014a10:	e73f      	b.n	8014892 <create_chain+0x2e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8014a12:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014a14:	f105 0634 	add.w	r6, r5, #52	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014a18:	6b2f      	ldr	r7, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8014a1a:	eb03 1ad4 	add.w	sl, r3, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014a1e:	45ba      	cmp	sl, r7
 8014a20:	d031      	beq.n	8014a86 <create_chain+0x222>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8014a22:	78eb      	ldrb	r3, [r5, #3]
 8014a24:	7868      	ldrb	r0, [r5, #1]
 8014a26:	b32b      	cbz	r3, 8014a74 <create_chain+0x210>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8014a28:	2301      	movs	r3, #1
 8014a2a:	463a      	mov	r2, r7
 8014a2c:	4631      	mov	r1, r6
 8014a2e:	f7fe fef1 	bl	8013814 <disk_write>
 8014a32:	2800      	cmp	r0, #0
 8014a34:	f040 80c5 	bne.w	8014bc2 <create_chain+0x35e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8014a38:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8014a3a:	69eb      	ldr	r3, [r5, #28]
 8014a3c:	1aba      	subs	r2, r7, r2
			fs->wflag = 0;
 8014a3e:	70e8      	strb	r0, [r5, #3]
 8014a40:	7868      	ldrb	r0, [r5, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8014a42:	429a      	cmp	r2, r3
 8014a44:	d216      	bcs.n	8014a74 <create_chain+0x210>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014a46:	78aa      	ldrb	r2, [r5, #2]
 8014a48:	2a01      	cmp	r2, #1
 8014a4a:	d913      	bls.n	8014a74 <create_chain+0x210>
 8014a4c:	f8cd 8008 	str.w	r8, [sp, #8]
 8014a50:	4690      	mov	r8, r2
 8014a52:	e001      	b.n	8014a58 <create_chain+0x1f4>
 8014a54:	69eb      	ldr	r3, [r5, #28]
 8014a56:	7868      	ldrb	r0, [r5, #1]
					wsect += fs->fsize;
 8014a58:	441f      	add	r7, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014a5a:	f108 38ff 	add.w	r8, r8, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8014a5e:	2301      	movs	r3, #1
 8014a60:	4631      	mov	r1, r6
 8014a62:	463a      	mov	r2, r7
 8014a64:	f7fe fed6 	bl	8013814 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014a68:	f1b8 0f01 	cmp.w	r8, #1
 8014a6c:	d1f2      	bne.n	8014a54 <create_chain+0x1f0>
 8014a6e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8014a72:	7868      	ldrb	r0, [r5, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8014a74:	2301      	movs	r3, #1
 8014a76:	4652      	mov	r2, sl
 8014a78:	4631      	mov	r1, r6
 8014a7a:	f7fe febd 	bl	80137f8 <disk_read>
 8014a7e:	2800      	cmp	r0, #0
 8014a80:	d175      	bne.n	8014b6e <create_chain+0x30a>
			fs->winsect = sector;
 8014a82:	f8c5 a030 	str.w	sl, [r5, #48]	; 0x30
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8014a86:	00a3      	lsls	r3, r4, #2
 8014a88:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8014a8c:	18f2      	adds	r2, r6, r3
	rv = rv << 8 | ptr[0];
 8014a8e:	5cf7      	ldrb	r7, [r6, r3]
	rv = rv << 8 | ptr[2];
 8014a90:	8851      	ldrh	r1, [r2, #2]
	rv = rv << 8 | ptr[1];
 8014a92:	7853      	ldrb	r3, [r2, #1]
 8014a94:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 8014a98:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8014a9c:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
			if (cs == 0) break;				/* Found a free cluster */
 8014aa0:	2f00      	cmp	r7, #0
 8014aa2:	d1ad      	bne.n	8014a00 <create_chain+0x19c>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8014aa4:	f8db 3018 	ldr.w	r3, [fp, #24]
 8014aa8:	42a3      	cmp	r3, r4
 8014aaa:	f67f af08 	bls.w	80148be <create_chain+0x5a>
 8014aae:	f04f 32ff 	mov.w	r2, #4294967295
 8014ab2:	4621      	mov	r1, r4
 8014ab4:	4658      	mov	r0, fp
 8014ab6:	f7fe fffd 	bl	8013ab4 <put_fat.part.7>
		if (res == FR_OK && clst != 0) {
 8014aba:	b970      	cbnz	r0, 8014ada <create_chain+0x276>
 8014abc:	9a01      	ldr	r2, [sp, #4]
 8014abe:	b162      	cbz	r2, 8014ada <create_chain+0x276>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8014ac0:	2a01      	cmp	r2, #1
 8014ac2:	f67f aefc 	bls.w	80148be <create_chain+0x5a>
 8014ac6:	f8db 3018 	ldr.w	r3, [fp, #24]
 8014aca:	429a      	cmp	r2, r3
 8014acc:	f4bf aef7 	bcs.w	80148be <create_chain+0x5a>
 8014ad0:	4611      	mov	r1, r2
 8014ad2:	4658      	mov	r0, fp
 8014ad4:	4622      	mov	r2, r4
 8014ad6:	f7fe ffed 	bl	8013ab4 <put_fat.part.7>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8014ada:	2800      	cmp	r0, #0
 8014adc:	d16e      	bne.n	8014bbc <create_chain+0x358>
		fs->last_clst = ncl;
 8014ade:	f8cb 4010 	str.w	r4, [fp, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8014ae2:	e9db 2305 	ldrd	r2, r3, [fp, #20]
 8014ae6:	3b02      	subs	r3, #2
 8014ae8:	429a      	cmp	r2, r3
 8014aea:	d802      	bhi.n	8014af2 <create_chain+0x28e>
 8014aec:	3a01      	subs	r2, #1
 8014aee:	f8cb 2014 	str.w	r2, [fp, #20]
		fs->fsi_flag |= 1;
 8014af2:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8014af6:	f043 0301 	orr.w	r3, r3, #1
 8014afa:	f88b 3004 	strb.w	r3, [fp, #4]
 8014afe:	e6df      	b.n	80148c0 <create_chain+0x5c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8014b00:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 8014b02:	f105 0734 	add.w	r7, r5, #52	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014b06:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8014b0a:	eb06 2614 	add.w	r6, r6, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014b0e:	4556      	cmp	r6, sl
 8014b10:	d035      	beq.n	8014b7e <create_chain+0x31a>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8014b12:	78eb      	ldrb	r3, [r5, #3]
 8014b14:	7868      	ldrb	r0, [r5, #1]
 8014b16:	b323      	cbz	r3, 8014b62 <create_chain+0x2fe>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8014b18:	2301      	movs	r3, #1
 8014b1a:	4652      	mov	r2, sl
 8014b1c:	4639      	mov	r1, r7
 8014b1e:	f7fe fe79 	bl	8013814 <disk_write>
 8014b22:	2800      	cmp	r0, #0
 8014b24:	d14d      	bne.n	8014bc2 <create_chain+0x35e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8014b26:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8014b28:	69eb      	ldr	r3, [r5, #28]
 8014b2a:	ebaa 0202 	sub.w	r2, sl, r2
			fs->wflag = 0;
 8014b2e:	70e8      	strb	r0, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8014b30:	429a      	cmp	r2, r3
 8014b32:	d215      	bcs.n	8014b60 <create_chain+0x2fc>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014b34:	78aa      	ldrb	r2, [r5, #2]
 8014b36:	2a01      	cmp	r2, #1
 8014b38:	d912      	bls.n	8014b60 <create_chain+0x2fc>
 8014b3a:	f8cd 8008 	str.w	r8, [sp, #8]
 8014b3e:	4690      	mov	r8, r2
 8014b40:	e000      	b.n	8014b44 <create_chain+0x2e0>
 8014b42:	69eb      	ldr	r3, [r5, #28]
					wsect += fs->fsize;
 8014b44:	449a      	add	sl, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014b46:	f108 38ff 	add.w	r8, r8, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8014b4a:	2301      	movs	r3, #1
 8014b4c:	4639      	mov	r1, r7
 8014b4e:	4652      	mov	r2, sl
 8014b50:	7868      	ldrb	r0, [r5, #1]
 8014b52:	f7fe fe5f 	bl	8013814 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014b56:	f1b8 0f01 	cmp.w	r8, #1
 8014b5a:	d1f2      	bne.n	8014b42 <create_chain+0x2de>
 8014b5c:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8014b60:	7868      	ldrb	r0, [r5, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8014b62:	2301      	movs	r3, #1
 8014b64:	4632      	mov	r2, r6
 8014b66:	4639      	mov	r1, r7
 8014b68:	f7fe fe46 	bl	80137f8 <disk_read>
 8014b6c:	b130      	cbz	r0, 8014b7c <create_chain+0x318>
			fs->winsect = sector;
 8014b6e:	f04f 34ff 	mov.w	r4, #4294967295
}
 8014b72:	4620      	mov	r0, r4
			fs->winsect = sector;
 8014b74:	632c      	str	r4, [r5, #48]	; 0x30
}
 8014b76:	b007      	add	sp, #28
 8014b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 8014b7c:	632e      	str	r6, [r5, #48]	; 0x30
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8014b7e:	0063      	lsls	r3, r4, #1
 8014b80:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8014b84:	18fa      	adds	r2, r7, r3
	rv = rv << 8 | ptr[0];
 8014b86:	5cff      	ldrb	r7, [r7, r3]
 8014b88:	7853      	ldrb	r3, [r2, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8014b8a:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 8014b8e:	e735      	b.n	80149fc <create_chain+0x198>
				if (ncl > scl) return 0;	/* No free cluster */
 8014b90:	2400      	movs	r4, #0
}
 8014b92:	4620      	mov	r0, r4
 8014b94:	b007      	add	sp, #28
 8014b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8014b9a:	4658      	mov	r0, fp
 8014b9c:	f7ff fd3c 	bl	8014618 <get_fat.isra.8>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8014ba0:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8014ba2:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8014ba4:	f67f ae8b 	bls.w	80148be <create_chain+0x5a>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8014ba8:	1c42      	adds	r2, r0, #1
 8014baa:	d00a      	beq.n	8014bc2 <create_chain+0x35e>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8014bac:	f8db 3018 	ldr.w	r3, [fp, #24]
 8014bb0:	4283      	cmp	r3, r0
 8014bb2:	f63f ae85 	bhi.w	80148c0 <create_chain+0x5c>
 8014bb6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014bba:	e668      	b.n	801488e <create_chain+0x2a>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8014bbc:	2801      	cmp	r0, #1
 8014bbe:	f47f ae7e 	bne.w	80148be <create_chain+0x5a>
 8014bc2:	f04f 34ff 	mov.w	r4, #4294967295
}
 8014bc6:	4620      	mov	r0, r4
 8014bc8:	b007      	add	sp, #28
 8014bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bce:	463c      	mov	r4, r7
 8014bd0:	e676      	b.n	80148c0 <create_chain+0x5c>
 8014bd2:	bf00      	nop

08014bd4 <dir_next.constprop.16>:
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
 8014bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8014bd6:	69c3      	ldr	r3, [r0, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8014bd8:	6944      	ldr	r4, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8014bda:	b1b3      	cbz	r3, 8014c0a <dir_next.constprop.16+0x36>
 8014bdc:	3420      	adds	r4, #32
 8014bde:	f5b4 1f00 	cmp.w	r4, #2097152	; 0x200000
 8014be2:	d212      	bcs.n	8014c0a <dir_next.constprop.16+0x36>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8014be4:	f3c4 0708 	ubfx	r7, r4, #0, #9
 8014be8:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 8014bea:	6806      	ldr	r6, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8014bec:	b93f      	cbnz	r7, 8014bfe <dir_next.constprop.16+0x2a>
		dp->sect++;				/* Next sector */
 8014bee:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
 8014bf0:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 8014bf2:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 8014bf4:	b959      	cbnz	r1, 8014c0e <dir_next.constprop.16+0x3a>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8014bf6:	8933      	ldrh	r3, [r6, #8]
 8014bf8:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 8014bfc:	d921      	bls.n	8014c42 <dir_next.constprop.16+0x6e>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8014bfe:	3634      	adds	r6, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 8014c00:	616c      	str	r4, [r5, #20]
	return FR_OK;
 8014c02:	2000      	movs	r0, #0
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8014c04:	443e      	add	r6, r7
 8014c06:	622e      	str	r6, [r5, #32]
}
 8014c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8014c0a:	2004      	movs	r0, #4
}
 8014c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8014c0e:	8973      	ldrh	r3, [r6, #10]
 8014c10:	3b01      	subs	r3, #1
 8014c12:	ea13 2354 	ands.w	r3, r3, r4, lsr #9
 8014c16:	d1f2      	bne.n	8014bfe <dir_next.constprop.16+0x2a>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8014c18:	4630      	mov	r0, r6
 8014c1a:	f7ff fcfd 	bl	8014618 <get_fat.isra.8>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8014c1e:	2801      	cmp	r0, #1
 8014c20:	d915      	bls.n	8014c4e <dir_next.constprop.16+0x7a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8014c22:	1c43      	adds	r3, r0, #1
 8014c24:	d011      	beq.n	8014c4a <dir_next.constprop.16+0x76>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8014c26:	69b3      	ldr	r3, [r6, #24]
 8014c28:	4298      	cmp	r0, r3
 8014c2a:	d20a      	bcs.n	8014c42 <dir_next.constprop.16+0x6e>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8014c2c:	3b02      	subs	r3, #2
	clst -= 2;
 8014c2e:	1e82      	subs	r2, r0, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 8014c30:	61a8      	str	r0, [r5, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8014c32:	429a      	cmp	r2, r3
 8014c34:	d20d      	bcs.n	8014c52 <dir_next.constprop.16+0x7e>
	return clst * fs->csize + fs->database;
 8014c36:	8973      	ldrh	r3, [r6, #10]
 8014c38:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8014c3a:	fb02 1303 	mla	r3, r2, r3, r1
				dp->sect = clust2sect(fs, clst);
 8014c3e:	61eb      	str	r3, [r5, #28]
 8014c40:	e7dd      	b.n	8014bfe <dir_next.constprop.16+0x2a>
				dp->sect = 0; return FR_NO_FILE;
 8014c42:	2300      	movs	r3, #0
 8014c44:	2004      	movs	r0, #4
 8014c46:	61eb      	str	r3, [r5, #28]
}
 8014c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8014c4a:	2001      	movs	r0, #1
}
 8014c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8014c4e:	2002      	movs	r0, #2
}
 8014c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8014c52:	463b      	mov	r3, r7
 8014c54:	e7f3      	b.n	8014c3e <dir_next.constprop.16+0x6a>
 8014c56:	bf00      	nop

08014c58 <dir_read.constprop.11>:
FRESULT dir_read (
 8014c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while (dp->sect) {
 8014c5c:	69c5      	ldr	r5, [r0, #28]
FRESULT dir_read (
 8014c5e:	b083      	sub	sp, #12
 8014c60:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8014c62:	6806      	ldr	r6, [r0, #0]
	while (dp->sect) {
 8014c64:	2d00      	cmp	r5, #0
 8014c66:	d06d      	beq.n	8014d44 <dir_read.constprop.11+0xec>
	BYTE ord = 0xFF, sum = 0xFF;
 8014c68:	23ff      	movs	r3, #255	; 0xff
 8014c6a:	f106 0a34 	add.w	sl, r6, #52	; 0x34
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8014c6e:	f8df b494 	ldr.w	fp, [pc, #1172]	; 8015104 <dir_read.constprop.11+0x4ac>
	BYTE ord = 0xFF, sum = 0xFF;
 8014c72:	4699      	mov	r9, r3
 8014c74:	9300      	str	r3, [sp, #0]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014c76:	6b37      	ldr	r7, [r6, #48]	; 0x30
 8014c78:	42af      	cmp	r7, r5
 8014c7a:	d035      	beq.n	8014ce8 <dir_read.constprop.11+0x90>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8014c7c:	78f3      	ldrb	r3, [r6, #3]
 8014c7e:	7870      	ldrb	r0, [r6, #1]
 8014c80:	b313      	cbz	r3, 8014cc8 <dir_read.constprop.11+0x70>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8014c82:	2301      	movs	r3, #1
 8014c84:	463a      	mov	r2, r7
 8014c86:	4651      	mov	r1, sl
 8014c88:	f7fe fdc4 	bl	8013814 <disk_write>
 8014c8c:	2800      	cmp	r0, #0
 8014c8e:	f040 8116 	bne.w	8014ebe <dir_read.constprop.11+0x266>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8014c92:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8014c94:	69f3      	ldr	r3, [r6, #28]
 8014c96:	1aba      	subs	r2, r7, r2
			fs->wflag = 0;
 8014c98:	70f0      	strb	r0, [r6, #3]
 8014c9a:	7870      	ldrb	r0, [r6, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8014c9c:	429a      	cmp	r2, r3
 8014c9e:	d213      	bcs.n	8014cc8 <dir_read.constprop.11+0x70>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014ca0:	f896 8002 	ldrb.w	r8, [r6, #2]
 8014ca4:	f1b8 0f01 	cmp.w	r8, #1
 8014ca8:	d802      	bhi.n	8014cb0 <dir_read.constprop.11+0x58>
 8014caa:	e00d      	b.n	8014cc8 <dir_read.constprop.11+0x70>
 8014cac:	69f3      	ldr	r3, [r6, #28]
 8014cae:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 8014cb0:	441f      	add	r7, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014cb2:	f108 38ff 	add.w	r8, r8, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8014cb6:	2301      	movs	r3, #1
 8014cb8:	4651      	mov	r1, sl
 8014cba:	463a      	mov	r2, r7
 8014cbc:	f7fe fdaa 	bl	8013814 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014cc0:	f1b8 0f01 	cmp.w	r8, #1
 8014cc4:	d1f2      	bne.n	8014cac <dir_read.constprop.11+0x54>
 8014cc6:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8014cc8:	2301      	movs	r3, #1
 8014cca:	462a      	mov	r2, r5
 8014ccc:	4651      	mov	r1, sl
 8014cce:	f7fe fd93 	bl	80137f8 <disk_read>
 8014cd2:	b140      	cbz	r0, 8014ce6 <dir_read.constprop.11+0x8e>
			fs->winsect = sector;
 8014cd4:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 8014cd8:	2001      	movs	r0, #1
			fs->winsect = sector;
 8014cda:	6333      	str	r3, [r6, #48]	; 0x30
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8014cdc:	2300      	movs	r3, #0
 8014cde:	61e3      	str	r3, [r4, #28]
}
 8014ce0:	b003      	add	sp, #12
 8014ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 8014ce6:	6335      	str	r5, [r6, #48]	; 0x30
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8014ce8:	6a22      	ldr	r2, [r4, #32]
 8014cea:	7811      	ldrb	r1, [r2, #0]
		if (c == 0) {
 8014cec:	b351      	cbz	r1, 8014d44 <dir_read.constprop.11+0xec>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8014cee:	7ad3      	ldrb	r3, [r2, #11]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8014cf0:	29e5      	cmp	r1, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8014cf2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014cf6:	71a3      	strb	r3, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8014cf8:	d005      	beq.n	8014d06 <dir_read.constprop.11+0xae>
 8014cfa:	292e      	cmp	r1, #46	; 0x2e
 8014cfc:	d003      	beq.n	8014d06 <dir_read.constprop.11+0xae>
 8014cfe:	f023 0020 	bic.w	r0, r3, #32
 8014d02:	2808      	cmp	r0, #8
 8014d04:	d125      	bne.n	8014d52 <dir_read.constprop.11+0xfa>
 8014d06:	6967      	ldr	r7, [r4, #20]
				ord = 0xFF;
 8014d08:	f04f 09ff 	mov.w	r9, #255	; 0xff
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8014d0c:	3720      	adds	r7, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8014d0e:	69e5      	ldr	r5, [r4, #28]
 8014d10:	455f      	cmp	r7, fp
 8014d12:	d817      	bhi.n	8014d44 <dir_read.constprop.11+0xec>
 8014d14:	b1b5      	cbz	r5, 8014d44 <dir_read.constprop.11+0xec>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8014d16:	f3c7 0208 	ubfx	r2, r7, #0, #9
	FATFS *fs = dp->obj.fs;
 8014d1a:	6823      	ldr	r3, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8014d1c:	b9a2      	cbnz	r2, 8014d48 <dir_read.constprop.11+0xf0>
		dp->sect++;				/* Next sector */
 8014d1e:	3501      	adds	r5, #1
		if (!dp->clust) {		/* Static table */
 8014d20:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 8014d22:	61e5      	str	r5, [r4, #28]
		if (!dp->clust) {		/* Static table */
 8014d24:	2900      	cmp	r1, #0
 8014d26:	f040 80bc 	bne.w	8014ea2 <dir_read.constprop.11+0x24a>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8014d2a:	891a      	ldrh	r2, [r3, #8]
 8014d2c:	ebb2 1f57 	cmp.w	r2, r7, lsr #5
 8014d30:	d908      	bls.n	8014d44 <dir_read.constprop.11+0xec>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8014d32:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 8014d34:	6167      	str	r7, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8014d36:	6223      	str	r3, [r4, #32]
	while (dp->sect) {
 8014d38:	2d00      	cmp	r5, #0
 8014d3a:	d19c      	bne.n	8014c76 <dir_read.constprop.11+0x1e>
				res = FR_DISK_ERR;
 8014d3c:	2000      	movs	r0, #0
}
 8014d3e:	b003      	add	sp, #12
 8014d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				dp->sect = 0; return FR_NO_FILE;
 8014d44:	2004      	movs	r0, #4
 8014d46:	e7c9      	b.n	8014cdc <dir_read.constprop.11+0x84>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8014d48:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 8014d4a:	6167      	str	r7, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8014d4c:	441a      	add	r2, r3
 8014d4e:	6222      	str	r2, [r4, #32]
 8014d50:	e791      	b.n	8014c76 <dir_read.constprop.11+0x1e>
				if (a == AM_LFN) {			/* An LFN entry is found */
 8014d52:	2b0f      	cmp	r3, #15
 8014d54:	f040 80cd 	bne.w	8014ef2 <dir_read.constprop.11+0x29a>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8014d58:	0648      	lsls	r0, r1, #25
 8014d5a:	6967      	ldr	r7, [r4, #20]
 8014d5c:	f140 80b1 	bpl.w	8014ec2 <dir_read.constprop.11+0x26a>
						sum = dp->dir[LDIR_Chksum];
 8014d60:	7b53      	ldrb	r3, [r2, #13]
						c &= (BYTE)~LLEF; ord = c;
 8014d62:	f001 09bf 	and.w	r9, r1, #191	; 0xbf
						dp->blk_ofs = dp->dptr;
 8014d66:	6327      	str	r7, [r4, #48]	; 0x30
						sum = dp->dir[LDIR_Chksum];
 8014d68:	9300      	str	r3, [sp, #0]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8014d6a:	7b53      	ldrb	r3, [r2, #13]
 8014d6c:	9900      	ldr	r1, [sp, #0]
 8014d6e:	428b      	cmp	r3, r1
 8014d70:	d1ca      	bne.n	8014d08 <dir_read.constprop.11+0xb0>
	rv = rv << 8 | ptr[0];
 8014d72:	7ed1      	ldrb	r1, [r2, #27]
 8014d74:	7e93      	ldrb	r3, [r2, #26]
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8014d76:	ea53 2301 	orrs.w	r3, r3, r1, lsl #8
 8014d7a:	d1c5      	bne.n	8014d08 <dir_read.constprop.11+0xb0>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8014d7c:	7813      	ldrb	r3, [r2, #0]
	rv = rv << 8 | ptr[0];
 8014d7e:	7891      	ldrb	r1, [r2, #2]
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8014d80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
	rv = rv << 8 | ptr[0];
 8014d84:	7850      	ldrb	r0, [r2, #1]
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8014d86:	3b01      	subs	r3, #1
	rv = rv << 8 | ptr[0];
 8014d88:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8014d8c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8014d90:	eb03 0381 	add.w	r3, r3, r1, lsl #2
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8014d94:	2bfe      	cmp	r3, #254	; 0xfe
 8014d96:	d8b7      	bhi.n	8014d08 <dir_read.constprop.11+0xb0>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8014d98:	f8d6 c00c 	ldr.w	ip, [r6, #12]
			lfnbuf[i++] = wc = uc;			/* Store it */
 8014d9c:	1c59      	adds	r1, r3, #1
 8014d9e:	f82c 0013 	strh.w	r0, [ip, r3, lsl #1]
	rv = rv << 8 | ptr[0];
 8014da2:	f892 e004 	ldrb.w	lr, [r2, #4]
 8014da6:	78d5      	ldrb	r5, [r2, #3]
 8014da8:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
		if (wc) {
 8014dac:	2800      	cmp	r0, #0
 8014dae:	f040 80af 	bne.w	8014f10 <dir_read.constprop.11+0x2b8>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8014db2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014db6:	429d      	cmp	r5, r3
 8014db8:	d1a6      	bne.n	8014d08 <dir_read.constprop.11+0xb0>
	rv = rv << 8 | ptr[0];
 8014dba:	7993      	ldrb	r3, [r2, #6]
 8014dbc:	f892 8005 	ldrb.w	r8, [r2, #5]
 8014dc0:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8014dc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014dc8:	4598      	cmp	r8, r3
 8014dca:	d19d      	bne.n	8014d08 <dir_read.constprop.11+0xb0>
	rv = rv << 8 | ptr[0];
 8014dcc:	7a13      	ldrb	r3, [r2, #8]
 8014dce:	f892 e007 	ldrb.w	lr, [r2, #7]
 8014dd2:	ea4e 2e03 	orr.w	lr, lr, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8014dd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014dda:	459e      	cmp	lr, r3
 8014ddc:	d194      	bne.n	8014d08 <dir_read.constprop.11+0xb0>
	rv = rv << 8 | ptr[0];
 8014dde:	7a93      	ldrb	r3, [r2, #10]
 8014de0:	7a55      	ldrb	r5, [r2, #9]
 8014de2:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8014de6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014dea:	429d      	cmp	r5, r3
 8014dec:	d18c      	bne.n	8014d08 <dir_read.constprop.11+0xb0>
	rv = rv << 8 | ptr[0];
 8014dee:	7bd3      	ldrb	r3, [r2, #15]
 8014df0:	f892 800e 	ldrb.w	r8, [r2, #14]
 8014df4:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8014df8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014dfc:	4598      	cmp	r8, r3
 8014dfe:	d183      	bne.n	8014d08 <dir_read.constprop.11+0xb0>
	rv = rv << 8 | ptr[0];
 8014e00:	7c53      	ldrb	r3, [r2, #17]
 8014e02:	f892 e010 	ldrb.w	lr, [r2, #16]
 8014e06:	ea4e 2e03 	orr.w	lr, lr, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8014e0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014e0e:	459e      	cmp	lr, r3
 8014e10:	f47f af7a 	bne.w	8014d08 <dir_read.constprop.11+0xb0>
	rv = rv << 8 | ptr[0];
 8014e14:	7cd3      	ldrb	r3, [r2, #19]
 8014e16:	7c95      	ldrb	r5, [r2, #18]
 8014e18:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8014e1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014e20:	429d      	cmp	r5, r3
 8014e22:	f47f af71 	bne.w	8014d08 <dir_read.constprop.11+0xb0>
	rv = rv << 8 | ptr[0];
 8014e26:	7d53      	ldrb	r3, [r2, #21]
 8014e28:	f892 e014 	ldrb.w	lr, [r2, #20]
 8014e2c:	ea4e 2e03 	orr.w	lr, lr, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8014e30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014e34:	459e      	cmp	lr, r3
 8014e36:	f47f af67 	bne.w	8014d08 <dir_read.constprop.11+0xb0>
	rv = rv << 8 | ptr[0];
 8014e3a:	7dd3      	ldrb	r3, [r2, #23]
 8014e3c:	7d95      	ldrb	r5, [r2, #22]
 8014e3e:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8014e42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014e46:	429d      	cmp	r5, r3
 8014e48:	f47f af5e 	bne.w	8014d08 <dir_read.constprop.11+0xb0>
	rv = rv << 8 | ptr[0];
 8014e4c:	7e53      	ldrb	r3, [r2, #25]
 8014e4e:	f892 e018 	ldrb.w	lr, [r2, #24]
 8014e52:	ea4e 2e03 	orr.w	lr, lr, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8014e56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014e5a:	459e      	cmp	lr, r3
 8014e5c:	f47f af54 	bne.w	8014d08 <dir_read.constprop.11+0xb0>
	rv = rv << 8 | ptr[0];
 8014e60:	7f53      	ldrb	r3, [r2, #29]
 8014e62:	7f15      	ldrb	r5, [r2, #28]
 8014e64:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8014e68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014e6c:	429d      	cmp	r5, r3
 8014e6e:	f47f af4b 	bne.w	8014d08 <dir_read.constprop.11+0xb0>
	rv = rv << 8 | ptr[0];
 8014e72:	7fd3      	ldrb	r3, [r2, #31]
 8014e74:	f892 e01e 	ldrb.w	lr, [r2, #30]
 8014e78:	ea4e 2e03 	orr.w	lr, lr, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8014e7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014e80:	459e      	cmp	lr, r3
 8014e82:	f47f af41 	bne.w	8014d08 <dir_read.constprop.11+0xb0>
	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8014e86:	7813      	ldrb	r3, [r2, #0]
 8014e88:	065a      	lsls	r2, r3, #25
 8014e8a:	d505      	bpl.n	8014e98 <dir_read.constprop.11+0x240>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8014e8c:	29ff      	cmp	r1, #255	; 0xff
 8014e8e:	f000 8137 	beq.w	8015100 <dir_read.constprop.11+0x4a8>
		lfnbuf[i] = 0;
 8014e92:	2300      	movs	r3, #0
 8014e94:	f82c 3011 	strh.w	r3, [ip, r1, lsl #1]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8014e98:	f109 39ff 	add.w	r9, r9, #4294967295
 8014e9c:	fa5f f989 	uxtb.w	r9, r9
 8014ea0:	e734      	b.n	8014d0c <dir_read.constprop.11+0xb4>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8014ea2:	895a      	ldrh	r2, [r3, #10]
 8014ea4:	3a01      	subs	r2, #1
 8014ea6:	ea12 2857 	ands.w	r8, r2, r7, lsr #9
 8014eaa:	f47f af42 	bne.w	8014d32 <dir_read.constprop.11+0xda>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8014eae:	4618      	mov	r0, r3
 8014eb0:	9301      	str	r3, [sp, #4]
 8014eb2:	f7ff fbb1 	bl	8014618 <get_fat.isra.8>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8014eb6:	2801      	cmp	r0, #1
 8014eb8:	d919      	bls.n	8014eee <dir_read.constprop.11+0x296>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8014eba:	1c43      	adds	r3, r0, #1
 8014ebc:	d105      	bne.n	8014eca <dir_read.constprop.11+0x272>
				dp->sect = 0; return FR_NO_FILE;
 8014ebe:	2001      	movs	r0, #1
 8014ec0:	e70c      	b.n	8014cdc <dir_read.constprop.11+0x84>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8014ec2:	4549      	cmp	r1, r9
 8014ec4:	f47f af20 	bne.w	8014d08 <dir_read.constprop.11+0xb0>
 8014ec8:	e74f      	b.n	8014d6a <dir_read.constprop.11+0x112>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8014eca:	9b01      	ldr	r3, [sp, #4]
 8014ecc:	699a      	ldr	r2, [r3, #24]
 8014ece:	4290      	cmp	r0, r2
 8014ed0:	f4bf af38 	bcs.w	8014d44 <dir_read.constprop.11+0xec>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8014ed4:	3a02      	subs	r2, #2
	clst -= 2;
 8014ed6:	1e81      	subs	r1, r0, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 8014ed8:	61a0      	str	r0, [r4, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8014eda:	4291      	cmp	r1, r2
 8014edc:	d312      	bcc.n	8014f04 <dir_read.constprop.11+0x2ac>
 8014ede:	463a      	mov	r2, r7
 8014ee0:	461f      	mov	r7, r3
				dp->sect = clust2sect(fs, clst);
 8014ee2:	f8c4 801c 	str.w	r8, [r4, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8014ee6:	3734      	adds	r7, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 8014ee8:	6162      	str	r2, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8014eea:	6227      	str	r7, [r4, #32]
 8014eec:	e726      	b.n	8014d3c <dir_read.constprop.11+0xe4>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8014eee:	2002      	movs	r0, #2
 8014ef0:	e6f4      	b.n	8014cdc <dir_read.constprop.11+0x84>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8014ef2:	f1b9 0f00 	cmp.w	r9, #0
 8014ef6:	f000 80b8 	beq.w	801506a <dir_read.constprop.11+0x412>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8014efa:	f04f 33ff 	mov.w	r3, #4294967295
 8014efe:	2000      	movs	r0, #0
 8014f00:	6323      	str	r3, [r4, #48]	; 0x30
 8014f02:	e6ed      	b.n	8014ce0 <dir_read.constprop.11+0x88>
	return clst * fs->csize + fs->database;
 8014f04:	895d      	ldrh	r5, [r3, #10]
 8014f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014f08:	fb01 2505 	mla	r5, r1, r5, r2
				dp->sect = clust2sect(fs, clst);
 8014f0c:	61e5      	str	r5, [r4, #28]
 8014f0e:	e710      	b.n	8014d32 <dir_read.constprop.11+0xda>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8014f10:	29ff      	cmp	r1, #255	; 0xff
 8014f12:	f000 80f5 	beq.w	8015100 <dir_read.constprop.11+0x4a8>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8014f16:	f82c 5011 	strh.w	r5, [ip, r1, lsl #1]
 8014f1a:	0048      	lsls	r0, r1, #1
	rv = rv << 8 | ptr[0];
 8014f1c:	f892 e006 	ldrb.w	lr, [r2, #6]
			lfnbuf[i++] = wc = uc;			/* Store it */
 8014f20:	1c99      	adds	r1, r3, #2
	rv = rv << 8 | ptr[0];
 8014f22:	f892 8005 	ldrb.w	r8, [r2, #5]
 8014f26:	ea48 280e 	orr.w	r8, r8, lr, lsl #8
		if (wc) {
 8014f2a:	2d00      	cmp	r5, #0
 8014f2c:	f43f af4a 	beq.w	8014dc4 <dir_read.constprop.11+0x16c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8014f30:	29ff      	cmp	r1, #255	; 0xff
 8014f32:	f000 80e5 	beq.w	8015100 <dir_read.constprop.11+0x4a8>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8014f36:	4460      	add	r0, ip
 8014f38:	1cd9      	adds	r1, r3, #3
 8014f3a:	f8a0 8002 	strh.w	r8, [r0, #2]
	rv = rv << 8 | ptr[0];
 8014f3e:	7a15      	ldrb	r5, [r2, #8]
 8014f40:	f892 e007 	ldrb.w	lr, [r2, #7]
 8014f44:	ea4e 2e05 	orr.w	lr, lr, r5, lsl #8
		if (wc) {
 8014f48:	f1b8 0f00 	cmp.w	r8, #0
 8014f4c:	f43f af43 	beq.w	8014dd6 <dir_read.constprop.11+0x17e>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8014f50:	29ff      	cmp	r1, #255	; 0xff
 8014f52:	f000 80d5 	beq.w	8015100 <dir_read.constprop.11+0x4a8>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8014f56:	f8a0 e004 	strh.w	lr, [r0, #4]
 8014f5a:	1d19      	adds	r1, r3, #4
	rv = rv << 8 | ptr[0];
 8014f5c:	f892 800a 	ldrb.w	r8, [r2, #10]
 8014f60:	7a55      	ldrb	r5, [r2, #9]
 8014f62:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
		if (wc) {
 8014f66:	f1be 0f00 	cmp.w	lr, #0
 8014f6a:	f43f af3c 	beq.w	8014de6 <dir_read.constprop.11+0x18e>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8014f6e:	29ff      	cmp	r1, #255	; 0xff
 8014f70:	f000 80c6 	beq.w	8015100 <dir_read.constprop.11+0x4a8>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8014f74:	80c5      	strh	r5, [r0, #6]
 8014f76:	1d59      	adds	r1, r3, #5
	rv = rv << 8 | ptr[0];
 8014f78:	f892 e00f 	ldrb.w	lr, [r2, #15]
 8014f7c:	f892 800e 	ldrb.w	r8, [r2, #14]
 8014f80:	ea48 280e 	orr.w	r8, r8, lr, lsl #8
		if (wc) {
 8014f84:	2d00      	cmp	r5, #0
 8014f86:	f43f af37 	beq.w	8014df8 <dir_read.constprop.11+0x1a0>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8014f8a:	29ff      	cmp	r1, #255	; 0xff
 8014f8c:	f000 80b8 	beq.w	8015100 <dir_read.constprop.11+0x4a8>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8014f90:	f8a0 8008 	strh.w	r8, [r0, #8]
 8014f94:	1d99      	adds	r1, r3, #6
	rv = rv << 8 | ptr[0];
 8014f96:	7c55      	ldrb	r5, [r2, #17]
 8014f98:	f892 e010 	ldrb.w	lr, [r2, #16]
 8014f9c:	ea4e 2e05 	orr.w	lr, lr, r5, lsl #8
		if (wc) {
 8014fa0:	f1b8 0f00 	cmp.w	r8, #0
 8014fa4:	f43f af31 	beq.w	8014e0a <dir_read.constprop.11+0x1b2>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8014fa8:	29ff      	cmp	r1, #255	; 0xff
 8014faa:	f000 80a9 	beq.w	8015100 <dir_read.constprop.11+0x4a8>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8014fae:	f8a0 e00a 	strh.w	lr, [r0, #10]
 8014fb2:	1dd9      	adds	r1, r3, #7
	rv = rv << 8 | ptr[0];
 8014fb4:	f892 8013 	ldrb.w	r8, [r2, #19]
 8014fb8:	7c95      	ldrb	r5, [r2, #18]
 8014fba:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
		if (wc) {
 8014fbe:	f1be 0f00 	cmp.w	lr, #0
 8014fc2:	f43f af2b 	beq.w	8014e1c <dir_read.constprop.11+0x1c4>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8014fc6:	29ff      	cmp	r1, #255	; 0xff
 8014fc8:	f000 809a 	beq.w	8015100 <dir_read.constprop.11+0x4a8>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8014fcc:	8185      	strh	r5, [r0, #12]
 8014fce:	f103 0108 	add.w	r1, r3, #8
	rv = rv << 8 | ptr[0];
 8014fd2:	f892 8015 	ldrb.w	r8, [r2, #21]
 8014fd6:	f892 e014 	ldrb.w	lr, [r2, #20]
 8014fda:	ea4e 2e08 	orr.w	lr, lr, r8, lsl #8
		if (wc) {
 8014fde:	2d00      	cmp	r5, #0
 8014fe0:	f43f af26 	beq.w	8014e30 <dir_read.constprop.11+0x1d8>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8014fe4:	29ff      	cmp	r1, #255	; 0xff
 8014fe6:	f000 808b 	beq.w	8015100 <dir_read.constprop.11+0x4a8>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8014fea:	f8a0 e00e 	strh.w	lr, [r0, #14]
 8014fee:	f103 0109 	add.w	r1, r3, #9
	rv = rv << 8 | ptr[0];
 8014ff2:	f892 8017 	ldrb.w	r8, [r2, #23]
 8014ff6:	7d95      	ldrb	r5, [r2, #22]
 8014ff8:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
		if (wc) {
 8014ffc:	f1be 0f00 	cmp.w	lr, #0
 8015000:	f43f af1f 	beq.w	8014e42 <dir_read.constprop.11+0x1ea>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8015004:	29ff      	cmp	r1, #255	; 0xff
 8015006:	f43f ae7f 	beq.w	8014d08 <dir_read.constprop.11+0xb0>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801500a:	8205      	strh	r5, [r0, #16]
 801500c:	f103 010a 	add.w	r1, r3, #10
	rv = rv << 8 | ptr[0];
 8015010:	f892 8019 	ldrb.w	r8, [r2, #25]
 8015014:	f892 e018 	ldrb.w	lr, [r2, #24]
 8015018:	ea4e 2e08 	orr.w	lr, lr, r8, lsl #8
		if (wc) {
 801501c:	2d00      	cmp	r5, #0
 801501e:	f43f af1a 	beq.w	8014e56 <dir_read.constprop.11+0x1fe>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8015022:	29ff      	cmp	r1, #255	; 0xff
 8015024:	d06c      	beq.n	8015100 <dir_read.constprop.11+0x4a8>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8015026:	f8a0 e012 	strh.w	lr, [r0, #18]
 801502a:	f103 010b 	add.w	r1, r3, #11
	rv = rv << 8 | ptr[0];
 801502e:	f892 801d 	ldrb.w	r8, [r2, #29]
 8015032:	7f15      	ldrb	r5, [r2, #28]
 8015034:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
		if (wc) {
 8015038:	f1be 0f00 	cmp.w	lr, #0
 801503c:	f43f af14 	beq.w	8014e68 <dir_read.constprop.11+0x210>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8015040:	29ff      	cmp	r1, #255	; 0xff
 8015042:	d05d      	beq.n	8015100 <dir_read.constprop.11+0x4a8>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8015044:	8285      	strh	r5, [r0, #20]
 8015046:	f103 010c 	add.w	r1, r3, #12
	rv = rv << 8 | ptr[0];
 801504a:	f892 801f 	ldrb.w	r8, [r2, #31]
 801504e:	f892 e01e 	ldrb.w	lr, [r2, #30]
 8015052:	ea4e 2e08 	orr.w	lr, lr, r8, lsl #8
		if (wc) {
 8015056:	2d00      	cmp	r5, #0
 8015058:	f43f af10 	beq.w	8014e7c <dir_read.constprop.11+0x224>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 801505c:	29ff      	cmp	r1, #255	; 0xff
 801505e:	d04f      	beq.n	8015100 <dir_read.constprop.11+0x4a8>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8015060:	f103 010d 	add.w	r1, r3, #13
 8015064:	f8a0 e016 	strh.w	lr, [r0, #22]
 8015068:	e70d      	b.n	8014e86 <dir_read.constprop.11+0x22e>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801506a:	7811      	ldrb	r1, [r2, #0]
 801506c:	7856      	ldrb	r6, [r2, #1]
 801506e:	01cb      	lsls	r3, r1, #7
 8015070:	7895      	ldrb	r5, [r2, #2]
 8015072:	78d0      	ldrb	r0, [r2, #3]
 8015074:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
 8015078:	1999      	adds	r1, r3, r6
 801507a:	7916      	ldrb	r6, [r2, #4]
 801507c:	f3c1 0346 	ubfx	r3, r1, #1, #7
 8015080:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 8015084:	fa55 f183 	uxtab	r1, r5, r3
 8015088:	7955      	ldrb	r5, [r2, #5]
 801508a:	f3c1 0346 	ubfx	r3, r1, #1, #7
 801508e:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 8015092:	fa50 f183 	uxtab	r1, r0, r3
 8015096:	7990      	ldrb	r0, [r2, #6]
 8015098:	f3c1 0346 	ubfx	r3, r1, #1, #7
 801509c:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 80150a0:	fa56 f183 	uxtab	r1, r6, r3
 80150a4:	79d6      	ldrb	r6, [r2, #7]
 80150a6:	f3c1 0346 	ubfx	r3, r1, #1, #7
 80150aa:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 80150ae:	fa55 f183 	uxtab	r1, r5, r3
 80150b2:	7a15      	ldrb	r5, [r2, #8]
 80150b4:	f3c1 0346 	ubfx	r3, r1, #1, #7
 80150b8:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 80150bc:	fa50 f183 	uxtab	r1, r0, r3
 80150c0:	7a50      	ldrb	r0, [r2, #9]
 80150c2:	f3c1 0346 	ubfx	r3, r1, #1, #7
 80150c6:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 80150ca:	7a91      	ldrb	r1, [r2, #10]
 80150cc:	fa56 f283 	uxtab	r2, r6, r3
 80150d0:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80150d4:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80150d8:	fa55 f283 	uxtab	r2, r5, r3
 80150dc:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80150e0:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80150e4:	fa50 f283 	uxtab	r2, r0, r3
 80150e8:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80150ec:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80150f0:	9a00      	ldr	r2, [sp, #0]
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80150f2:	fa51 f383 	uxtab	r3, r1, r3
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80150f6:	b2db      	uxtb	r3, r3
 80150f8:	4293      	cmp	r3, r2
 80150fa:	f47f aefe 	bne.w	8014efa <dir_read.constprop.11+0x2a2>
 80150fe:	e61d      	b.n	8014d3c <dir_read.constprop.11+0xe4>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8015100:	4689      	mov	r9, r1
 8015102:	e603      	b.n	8014d0c <dir_read.constprop.11+0xb4>
 8015104:	001fffff 	.word	0x001fffff

08015108 <dir_find>:
{
 8015108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801510c:	2100      	movs	r1, #0
{
 801510e:	b087      	sub	sp, #28
 8015110:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8015112:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8015114:	f7ff f8e8 	bl	80142e8 <dir_sdi>
	if (res != FR_OK) return res;
 8015118:	4683      	mov	fp, r0
 801511a:	2800      	cmp	r0, #0
 801511c:	d13d      	bne.n	801519a <dir_find+0x92>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801511e:	23ff      	movs	r3, #255	; 0xff
 8015120:	69e7      	ldr	r7, [r4, #28]
 8015122:	461d      	mov	r5, r3
 8015124:	9301      	str	r3, [sp, #4]
 8015126:	f04f 33ff 	mov.w	r3, #4294967295
 801512a:	46a8      	mov	r8, r5
 801512c:	6323      	str	r3, [r4, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 801512e:	6b35      	ldr	r5, [r6, #48]	; 0x30
 8015130:	42af      	cmp	r7, r5
 8015132:	d037      	beq.n	80151a4 <dir_find+0x9c>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8015134:	78f3      	ldrb	r3, [r6, #3]
 8015136:	f106 0934 	add.w	r9, r6, #52	; 0x34
 801513a:	7870      	ldrb	r0, [r6, #1]
 801513c:	b313      	cbz	r3, 8015184 <dir_find+0x7c>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801513e:	2301      	movs	r3, #1
 8015140:	462a      	mov	r2, r5
 8015142:	4649      	mov	r1, r9
 8015144:	f7fe fb66 	bl	8013814 <disk_write>
 8015148:	2800      	cmp	r0, #0
 801514a:	f040 80bf 	bne.w	80152cc <dir_find+0x1c4>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801514e:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8015150:	69f3      	ldr	r3, [r6, #28]
 8015152:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
 8015154:	70f0      	strb	r0, [r6, #3]
 8015156:	7870      	ldrb	r0, [r6, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8015158:	429a      	cmp	r2, r3
 801515a:	d213      	bcs.n	8015184 <dir_find+0x7c>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801515c:	f896 a002 	ldrb.w	sl, [r6, #2]
 8015160:	f1ba 0f01 	cmp.w	sl, #1
 8015164:	d802      	bhi.n	801516c <dir_find+0x64>
 8015166:	e00d      	b.n	8015184 <dir_find+0x7c>
 8015168:	69f3      	ldr	r3, [r6, #28]
 801516a:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 801516c:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801516e:	f10a 3aff 	add.w	sl, sl, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8015172:	2301      	movs	r3, #1
 8015174:	4649      	mov	r1, r9
 8015176:	462a      	mov	r2, r5
 8015178:	f7fe fb4c 	bl	8013814 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801517c:	f1ba 0f01 	cmp.w	sl, #1
 8015180:	d1f2      	bne.n	8015168 <dir_find+0x60>
 8015182:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8015184:	4649      	mov	r1, r9
 8015186:	2301      	movs	r3, #1
 8015188:	463a      	mov	r2, r7
 801518a:	f7fe fb35 	bl	80137f8 <disk_read>
 801518e:	b140      	cbz	r0, 80151a2 <dir_find+0x9a>
			fs->winsect = sector;
 8015190:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 8015194:	f04f 0b01 	mov.w	fp, #1
			fs->winsect = sector;
 8015198:	6333      	str	r3, [r6, #48]	; 0x30
}
 801519a:	4658      	mov	r0, fp
 801519c:	b007      	add	sp, #28
 801519e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 80151a2:	6337      	str	r7, [r6, #48]	; 0x30
		c = dp->dir[DIR_Name];
 80151a4:	6a27      	ldr	r7, [r4, #32]
 80151a6:	783d      	ldrb	r5, [r7, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80151a8:	b345      	cbz	r5, 80151fc <dir_find+0xf4>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80151aa:	7afa      	ldrb	r2, [r7, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80151ac:	2de5      	cmp	r5, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80151ae:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 80151b2:	71a3      	strb	r3, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80151b4:	d003      	beq.n	80151be <dir_find+0xb6>
 80151b6:	0712      	lsls	r2, r2, #28
 80151b8:	d526      	bpl.n	8015208 <dir_find+0x100>
 80151ba:	2b0f      	cmp	r3, #15
 80151bc:	d065      	beq.n	801528a <dir_find+0x182>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80151be:	f04f 33ff 	mov.w	r3, #4294967295
 80151c2:	f04f 08ff 	mov.w	r8, #255	; 0xff
 80151c6:	6323      	str	r3, [r4, #48]	; 0x30
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80151c8:	6965      	ldr	r5, [r4, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80151ca:	4ba2      	ldr	r3, [pc, #648]	; (8015454 <dir_find+0x34c>)
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80151cc:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80151ce:	69e7      	ldr	r7, [r4, #28]
 80151d0:	429d      	cmp	r5, r3
 80151d2:	d813      	bhi.n	80151fc <dir_find+0xf4>
 80151d4:	b197      	cbz	r7, 80151fc <dir_find+0xf4>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80151d6:	f3c5 0208 	ubfx	r2, r5, #0, #9
	FATFS *fs = dp->obj.fs;
 80151da:	6823      	ldr	r3, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80151dc:	b94a      	cbnz	r2, 80151f2 <dir_find+0xea>
		dp->sect++;				/* Next sector */
 80151de:	3701      	adds	r7, #1
		if (!dp->clust) {		/* Static table */
 80151e0:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 80151e2:	61e7      	str	r7, [r4, #28]
		if (!dp->clust) {		/* Static table */
 80151e4:	2900      	cmp	r1, #0
 80151e6:	d163      	bne.n	80152b0 <dir_find+0x1a8>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80151e8:	8919      	ldrh	r1, [r3, #8]
 80151ea:	ebb1 1f55 	cmp.w	r1, r5, lsr #5
 80151ee:	f240 80bc 	bls.w	801536a <dir_find+0x262>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80151f2:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 80151f4:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80151f6:	4413      	add	r3, r2
 80151f8:	6223      	str	r3, [r4, #32]
 80151fa:	e798      	b.n	801512e <dir_find+0x26>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80151fc:	f04f 0b04 	mov.w	fp, #4
}
 8015200:	4658      	mov	r0, fp
 8015202:	b007      	add	sp, #28
 8015204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (a == AM_LFN) {			/* An LFN entry is found */
 8015208:	2b0f      	cmp	r3, #15
 801520a:	d03e      	beq.n	801528a <dir_find+0x182>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801520c:	f1b8 0f00 	cmp.w	r8, #0
 8015210:	d05f      	beq.n	80152d2 <dir_find+0x1ca>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8015212:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8015216:	07da      	lsls	r2, r3, #31
 8015218:	d4d1      	bmi.n	80151be <dir_find+0xb6>
	} while (--cnt && r == 0);
 801521a:	783a      	ldrb	r2, [r7, #0]
 801521c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8015220:	429a      	cmp	r2, r3
 8015222:	d1cc      	bne.n	80151be <dir_find+0xb6>
 8015224:	787a      	ldrb	r2, [r7, #1]
 8015226:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801522a:	429a      	cmp	r2, r3
 801522c:	d1c7      	bne.n	80151be <dir_find+0xb6>
 801522e:	78ba      	ldrb	r2, [r7, #2]
 8015230:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8015234:	429a      	cmp	r2, r3
 8015236:	d1c2      	bne.n	80151be <dir_find+0xb6>
 8015238:	78fa      	ldrb	r2, [r7, #3]
 801523a:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 801523e:	429a      	cmp	r2, r3
 8015240:	d1bd      	bne.n	80151be <dir_find+0xb6>
 8015242:	793a      	ldrb	r2, [r7, #4]
 8015244:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8015248:	429a      	cmp	r2, r3
 801524a:	d1b8      	bne.n	80151be <dir_find+0xb6>
 801524c:	797a      	ldrb	r2, [r7, #5]
 801524e:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8015252:	429a      	cmp	r2, r3
 8015254:	d1b3      	bne.n	80151be <dir_find+0xb6>
 8015256:	79ba      	ldrb	r2, [r7, #6]
 8015258:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 801525c:	429a      	cmp	r2, r3
 801525e:	d1ae      	bne.n	80151be <dir_find+0xb6>
 8015260:	79fa      	ldrb	r2, [r7, #7]
 8015262:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8015266:	429a      	cmp	r2, r3
 8015268:	d1a9      	bne.n	80151be <dir_find+0xb6>
 801526a:	7a3a      	ldrb	r2, [r7, #8]
 801526c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8015270:	429a      	cmp	r2, r3
 8015272:	d1a4      	bne.n	80151be <dir_find+0xb6>
 8015274:	7a7a      	ldrb	r2, [r7, #9]
 8015276:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801527a:	429a      	cmp	r2, r3
 801527c:	d19f      	bne.n	80151be <dir_find+0xb6>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801527e:	7aba      	ldrb	r2, [r7, #10]
 8015280:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8015284:	429a      	cmp	r2, r3
 8015286:	d19a      	bne.n	80151be <dir_find+0xb6>
 8015288:	e787      	b.n	801519a <dir_find+0x92>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 801528a:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 801528e:	065b      	lsls	r3, r3, #25
 8015290:	d49a      	bmi.n	80151c8 <dir_find+0xc0>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8015292:	0668      	lsls	r0, r5, #25
 8015294:	d56e      	bpl.n	8015374 <dir_find+0x26c>
						sum = dp->dir[LDIR_Chksum];
 8015296:	7b7a      	ldrb	r2, [r7, #13]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8015298:	f005 05bf 	and.w	r5, r5, #191	; 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801529c:	6963      	ldr	r3, [r4, #20]
						sum = dp->dir[LDIR_Chksum];
 801529e:	9201      	str	r2, [sp, #4]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80152a0:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80152a2:	7b7b      	ldrb	r3, [r7, #13]
 80152a4:	9a01      	ldr	r2, [sp, #4]
 80152a6:	4293      	cmp	r3, r2
 80152a8:	d07e      	beq.n	80153a8 <dir_find+0x2a0>
 80152aa:	f04f 08ff 	mov.w	r8, #255	; 0xff
 80152ae:	e78b      	b.n	80151c8 <dir_find+0xc0>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80152b0:	8958      	ldrh	r0, [r3, #10]
 80152b2:	3801      	subs	r0, #1
 80152b4:	ea10 2055 	ands.w	r0, r0, r5, lsr #9
 80152b8:	d19b      	bne.n	80151f2 <dir_find+0xea>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80152ba:	4618      	mov	r0, r3
 80152bc:	9203      	str	r2, [sp, #12]
 80152be:	9302      	str	r3, [sp, #8]
 80152c0:	f7ff f9aa 	bl	8014618 <get_fat.isra.8>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80152c4:	2801      	cmp	r0, #1
 80152c6:	d96a      	bls.n	801539e <dir_find+0x296>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80152c8:	1c43      	adds	r3, r0, #1
 80152ca:	d158      	bne.n	801537e <dir_find+0x276>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80152cc:	f04f 0b01 	mov.w	fp, #1
 80152d0:	e763      	b.n	801519a <dir_find+0x92>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80152d2:	783b      	ldrb	r3, [r7, #0]
 80152d4:	787a      	ldrb	r2, [r7, #1]
 80152d6:	01d9      	lsls	r1, r3, #7
 80152d8:	78b8      	ldrb	r0, [r7, #2]
 80152da:	f897 c004 	ldrb.w	ip, [r7, #4]
 80152de:	ea41 0153 	orr.w	r1, r1, r3, lsr #1
 80152e2:	78fb      	ldrb	r3, [r7, #3]
 80152e4:	79bd      	ldrb	r5, [r7, #6]
 80152e6:	4411      	add	r1, r2
 80152e8:	f3c1 0246 	ubfx	r2, r1, #1, #7
 80152ec:	ea42 11c1 	orr.w	r1, r2, r1, lsl #7
 80152f0:	fa50 f281 	uxtab	r2, r0, r1
 80152f4:	7978      	ldrb	r0, [r7, #5]
 80152f6:	f3c2 0146 	ubfx	r1, r2, #1, #7
 80152fa:	ea41 11c2 	orr.w	r1, r1, r2, lsl #7
 80152fe:	7a3a      	ldrb	r2, [r7, #8]
 8015300:	fa53 f181 	uxtab	r1, r3, r1
 8015304:	f3c1 0346 	ubfx	r3, r1, #1, #7
 8015308:	ea43 11c1 	orr.w	r1, r3, r1, lsl #7
 801530c:	fa5c f381 	uxtab	r3, ip, r1
 8015310:	f3c3 0146 	ubfx	r1, r3, #1, #7
 8015314:	ea41 11c3 	orr.w	r1, r1, r3, lsl #7
 8015318:	79fb      	ldrb	r3, [r7, #7]
 801531a:	fa50 f181 	uxtab	r1, r0, r1
 801531e:	f3c1 0046 	ubfx	r0, r1, #1, #7
 8015322:	ea40 11c1 	orr.w	r1, r0, r1, lsl #7
 8015326:	fa55 f081 	uxtab	r0, r5, r1
 801532a:	f3c0 0146 	ubfx	r1, r0, #1, #7
 801532e:	ea41 11c0 	orr.w	r1, r1, r0, lsl #7
 8015332:	7a78      	ldrb	r0, [r7, #9]
 8015334:	fa53 f181 	uxtab	r1, r3, r1
 8015338:	f3c1 0346 	ubfx	r3, r1, #1, #7
 801533c:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 8015340:	7ab9      	ldrb	r1, [r7, #10]
 8015342:	fa52 f383 	uxtab	r3, r2, r3
 8015346:	f3c3 0246 	ubfx	r2, r3, #1, #7
 801534a:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
 801534e:	fa50 f283 	uxtab	r2, r0, r3
 8015352:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8015356:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801535a:	9a01      	ldr	r2, [sp, #4]
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801535c:	fa51 f383 	uxtab	r3, r1, r3
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8015360:	b2db      	uxtb	r3, r3
 8015362:	429a      	cmp	r2, r3
 8015364:	f47f af55 	bne.w	8015212 <dir_find+0x10a>
 8015368:	e717      	b.n	801519a <dir_find+0x92>
				dp->sect = 0; return FR_NO_FILE;
 801536a:	2300      	movs	r3, #0
 801536c:	f04f 0b04 	mov.w	fp, #4
 8015370:	61e3      	str	r3, [r4, #28]
 8015372:	e712      	b.n	801519a <dir_find+0x92>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8015374:	45a8      	cmp	r8, r5
 8015376:	d094      	beq.n	80152a2 <dir_find+0x19a>
 8015378:	f04f 08ff 	mov.w	r8, #255	; 0xff
 801537c:	e724      	b.n	80151c8 <dir_find+0xc0>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801537e:	9b02      	ldr	r3, [sp, #8]
 8015380:	6999      	ldr	r1, [r3, #24]
 8015382:	4288      	cmp	r0, r1
 8015384:	d2f1      	bcs.n	801536a <dir_find+0x262>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8015386:	3902      	subs	r1, #2
	clst -= 2;
 8015388:	1e87      	subs	r7, r0, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 801538a:	61a0      	str	r0, [r4, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801538c:	428f      	cmp	r7, r1
 801538e:	9a03      	ldr	r2, [sp, #12]
 8015390:	d208      	bcs.n	80153a4 <dir_find+0x29c>
	return clst * fs->csize + fs->database;
 8015392:	8958      	ldrh	r0, [r3, #10]
 8015394:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8015396:	fb07 1700 	mla	r7, r7, r0, r1
				dp->sect = clust2sect(fs, clst);
 801539a:	61e7      	str	r7, [r4, #28]
 801539c:	e729      	b.n	80151f2 <dir_find+0xea>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801539e:	f04f 0b02 	mov.w	fp, #2
 80153a2:	e6fa      	b.n	801519a <dir_find+0x92>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80153a4:	4617      	mov	r7, r2
 80153a6:	e7f8      	b.n	801539a <dir_find+0x292>
	rv = rv << 8 | ptr[0];
 80153a8:	7efa      	ldrb	r2, [r7, #27]
 80153aa:	7ebb      	ldrb	r3, [r7, #26]
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80153ac:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 80153b0:	f47f af7b 	bne.w	80152aa <dir_find+0x1a2>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80153b4:	f897 9000 	ldrb.w	r9, [r7]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80153b8:	2201      	movs	r2, #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80153ba:	68f1      	ldr	r1, [r6, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80153bc:	f009 093f 	and.w	r9, r9, #63	; 0x3f
 80153c0:	9505      	str	r5, [sp, #20]
 80153c2:	f8df a098 	ldr.w	sl, [pc, #152]	; 801545c <dir_find+0x354>
 80153c6:	460d      	mov	r5, r1
 80153c8:	f109 39ff 	add.w	r9, r9, #4294967295
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80153cc:	9104      	str	r1, [sp, #16]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80153ce:	9602      	str	r6, [sp, #8]
 80153d0:	4610      	mov	r0, r2
 80153d2:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 80153d6:	9403      	str	r4, [sp, #12]
 80153d8:	eb09 0983 	add.w	r9, r9, r3, lsl #2
 80153dc:	e011      	b.n	8015402 <dir_find+0x2fa>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80153de:	f1b9 0ffe 	cmp.w	r9, #254	; 0xfe
 80153e2:	4640      	mov	r0, r8
 80153e4:	d81f      	bhi.n	8015426 <dir_find+0x31e>
 80153e6:	f7fe f99f 	bl	8013728 <ff_wtoupper>
 80153ea:	4604      	mov	r4, r0
 80153ec:	f835 0019 	ldrh.w	r0, [r5, r9, lsl #1]
 80153f0:	46b1      	mov	r9, r6
 80153f2:	f7fe f999 	bl	8013728 <ff_wtoupper>
 80153f6:	4284      	cmp	r4, r0
	rv = rv << 8 | ptr[0];
 80153f8:	4640      	mov	r0, r8
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80153fa:	d114      	bne.n	8015426 <dir_find+0x31e>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80153fc:	4b16      	ldr	r3, [pc, #88]	; (8015458 <dir_find+0x350>)
 80153fe:	4553      	cmp	r3, sl
 8015400:	d016      	beq.n	8015430 <dir_find+0x328>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8015402:	f81a 3b01 	ldrb.w	r3, [sl], #1
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8015406:	f109 0601 	add.w	r6, r9, #1
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801540a:	eb07 0c03 	add.w	ip, r7, r3
	rv = rv << 8 | ptr[0];
 801540e:	f817 8003 	ldrb.w	r8, [r7, r3]
 8015412:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8015416:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
		if (wc) {
 801541a:	2800      	cmp	r0, #0
 801541c:	d1df      	bne.n	80153de <dir_find+0x2d6>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801541e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015422:	4598      	cmp	r8, r3
 8015424:	d0ea      	beq.n	80153fc <dir_find+0x2f4>
 8015426:	e9dd 6402 	ldrd	r6, r4, [sp, #8]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801542a:	f04f 08ff 	mov.w	r8, #255	; 0xff
 801542e:	e6cb      	b.n	80151c8 <dir_find+0xc0>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8015430:	783b      	ldrb	r3, [r7, #0]
 8015432:	9e02      	ldr	r6, [sp, #8]
 8015434:	0659      	lsls	r1, r3, #25
 8015436:	9d05      	ldr	r5, [sp, #20]
 8015438:	9c03      	ldr	r4, [sp, #12]
 801543a:	d500      	bpl.n	801543e <dir_find+0x336>
 801543c:	b918      	cbnz	r0, 8015446 <dir_find+0x33e>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801543e:	3d01      	subs	r5, #1
 8015440:	fa5f f885 	uxtb.w	r8, r5
 8015444:	e6c0      	b.n	80151c8 <dir_find+0xc0>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8015446:	9b04      	ldr	r3, [sp, #16]
 8015448:	f833 3019 	ldrh.w	r3, [r3, r9, lsl #1]
 801544c:	2b00      	cmp	r3, #0
 801544e:	d0f6      	beq.n	801543e <dir_find+0x336>
 8015450:	e72b      	b.n	80152aa <dir_find+0x1a2>
 8015452:	bf00      	nop
 8015454:	001fffff 	.word	0x001fffff
 8015458:	0802186d 	.word	0x0802186d
 801545c:	08021860 	.word	0x08021860

08015460 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8015460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8015464:	780b      	ldrb	r3, [r1, #0]
{
 8015466:	b085      	sub	sp, #20
 8015468:	460f      	mov	r7, r1
 801546a:	4606      	mov	r6, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801546c:	2b5c      	cmp	r3, #92	; 0x5c
	FATFS *fs = obj->fs;
 801546e:	f8d0 b000 	ldr.w	fp, [r0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8015472:	d001      	beq.n	8015478 <follow_path+0x18>
 8015474:	2b2f      	cmp	r3, #47	; 0x2f
 8015476:	d105      	bne.n	8015484 <follow_path+0x24>
 8015478:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 801547c:	2b2f      	cmp	r3, #47	; 0x2f
 801547e:	d0fb      	beq.n	8015478 <follow_path+0x18>
 8015480:	2b5c      	cmp	r3, #92	; 0x5c
 8015482:	d0f9      	beq.n	8015478 <follow_path+0x18>
		obj->sclust = 0;					/* Start from root directory */
 8015484:	2100      	movs	r1, #0
 8015486:	60b1      	str	r1, [r6, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8015488:	7838      	ldrb	r0, [r7, #0]
 801548a:	281f      	cmp	r0, #31
 801548c:	f240 814c 	bls.w	8015728 <follow_path+0x2c8>
 8015490:	465b      	mov	r3, fp
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8015492:	9101      	str	r1, [sp, #4]
		w = p[si++];					/* Get a character */
 8015494:	b280      	uxth	r0, r0
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8015496:	68dd      	ldr	r5, [r3, #12]
		if (w < ' ') break;				/* Break if end of the path name */
 8015498:	281f      	cmp	r0, #31
 801549a:	d92d      	bls.n	80154f8 <follow_path+0x98>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801549c:	285c      	cmp	r0, #92	; 0x5c
 801549e:	d031      	beq.n	8015504 <follow_path+0xa4>
 80154a0:	282f      	cmp	r0, #47	; 0x2f
 80154a2:	d02f      	beq.n	8015504 <follow_path+0xa4>
 80154a4:	f1a5 0902 	sub.w	r9, r5, #2
 80154a8:	46b8      	mov	r8, r7
		w = p[si++];					/* Get a character */
 80154aa:	2401      	movs	r4, #1
 80154ac:	e00f      	b.n	80154ce <follow_path+0x6e>
		lfn[di++] = w;					/* Store the Unicode character */
 80154ae:	f829 0f02 	strh.w	r0, [r9, #2]!
		w = p[si++];					/* Get a character */
 80154b2:	1c63      	adds	r3, r4, #1
 80154b4:	f818 0f01 	ldrb.w	r0, [r8, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
 80154b8:	281f      	cmp	r0, #31
 80154ba:	f240 811e 	bls.w	80156fa <follow_path+0x29a>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80154be:	282f      	cmp	r0, #47	; 0x2f
 80154c0:	d022      	beq.n	8015508 <follow_path+0xa8>
 80154c2:	285c      	cmp	r0, #92	; 0x5c
 80154c4:	d020      	beq.n	8015508 <follow_path+0xa8>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80154c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80154ca:	d011      	beq.n	80154f0 <follow_path+0x90>
 80154cc:	461c      	mov	r4, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80154ce:	2101      	movs	r1, #1
 80154d0:	f7fe f908 	bl	80136e4 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80154d4:	b160      	cbz	r0, 80154f0 <follow_path+0x90>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80154d6:	287f      	cmp	r0, #127	; 0x7f
 80154d8:	d8e9      	bhi.n	80154ae <follow_path+0x4e>
	while (*str && *str != chr) str++;
 80154da:	2822      	cmp	r0, #34	; 0x22
 80154dc:	d008      	beq.n	80154f0 <follow_path+0x90>
 80154de:	232a      	movs	r3, #42	; 0x2a
 80154e0:	4aa4      	ldr	r2, [pc, #656]	; (8015774 <follow_path+0x314>)
 80154e2:	e003      	b.n	80154ec <follow_path+0x8c>
 80154e4:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d0e0      	beq.n	80154ae <follow_path+0x4e>
 80154ec:	4298      	cmp	r0, r3
 80154ee:	d1f9      	bne.n	80154e4 <follow_path+0x84>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80154f0:	2006      	movs	r0, #6
			}
		}
	}

	return res;
}
 80154f2:	b005      	add	sp, #20
 80154f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	lfn[di] = 0;						/* LFN is created */
 80154f8:	2300      	movs	r3, #0
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80154fa:	2006      	movs	r0, #6
	lfn[di] = 0;						/* LFN is created */
 80154fc:	802b      	strh	r3, [r5, #0]
}
 80154fe:	b005      	add	sp, #20
 8015500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		w = p[si++];					/* Get a character */
 8015504:	2301      	movs	r3, #1
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8015506:	2400      	movs	r4, #0
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8015508:	5cfa      	ldrb	r2, [r7, r3]
 801550a:	18f9      	adds	r1, r7, r3
 801550c:	2a2f      	cmp	r2, #47	; 0x2f
 801550e:	d002      	beq.n	8015516 <follow_path+0xb6>
 8015510:	2a5c      	cmp	r2, #92	; 0x5c
 8015512:	f040 8114 	bne.w	801573e <follow_path+0x2de>
 8015516:	3301      	adds	r3, #1
 8015518:	443b      	add	r3, r7
 801551a:	461f      	mov	r7, r3
 801551c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015520:	2a2f      	cmp	r2, #47	; 0x2f
 8015522:	d0fa      	beq.n	801551a <follow_path+0xba>
 8015524:	2a5c      	cmp	r2, #92	; 0x5c
 8015526:	d0f8      	beq.n	801551a <follow_path+0xba>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8015528:	2c00      	cmp	r4, #0
 801552a:	d0e5      	beq.n	80154f8 <follow_path+0x98>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801552c:	f04f 0900 	mov.w	r9, #0
		w = lfn[di - 1];
 8015530:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015534:	4423      	add	r3, r4
 8015536:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
 801553a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
		if (w != ' ' && w != '.') break;
 801553e:	2a20      	cmp	r2, #32
 8015540:	d105      	bne.n	801554e <follow_path+0xee>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8015542:	3c01      	subs	r4, #1
 8015544:	d0d8      	beq.n	80154f8 <follow_path+0x98>
		w = lfn[di - 1];
 8015546:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
		if (w != ' ' && w != '.') break;
 801554a:	2a20      	cmp	r2, #32
 801554c:	d0f9      	beq.n	8015542 <follow_path+0xe2>
 801554e:	2a2e      	cmp	r2, #46	; 0x2e
 8015550:	d0f7      	beq.n	8015542 <follow_path+0xe2>
		*d++ = (BYTE)val;
 8015552:	2220      	movs	r2, #32
 8015554:	f04f 3120 	mov.w	r1, #538976288	; 0x20202020
	lfn[di] = 0;						/* LFN is created */
 8015558:	9b01      	ldr	r3, [sp, #4]
 801555a:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
 801555e:	eb05 0344 	add.w	r3, r5, r4, lsl #1
		*d++ = (BYTE)val;
 8015562:	6271      	str	r1, [r6, #36]	; 0x24
 8015564:	62b1      	str	r1, [r6, #40]	; 0x28
 8015566:	f886 202c 	strb.w	r2, [r6, #44]	; 0x2c
 801556a:	f886 202d 	strb.w	r2, [r6, #45]	; 0x2d
 801556e:	f886 202e 	strb.w	r2, [r6, #46]	; 0x2e
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8015572:	8828      	ldrh	r0, [r5, #0]
 8015574:	282e      	cmp	r0, #46	; 0x2e
 8015576:	d006      	beq.n	8015586 <follow_path+0x126>
 8015578:	1a82      	subs	r2, r0, r2
 801557a:	fab2 f282 	clz	r2, r2
 801557e:	0952      	lsrs	r2, r2, #5
 8015580:	2a00      	cmp	r2, #0
 8015582:	f000 80da 	beq.w	801573a <follow_path+0x2da>
 8015586:	462a      	mov	r2, r5
 8015588:	f04f 0800 	mov.w	r8, #0
 801558c:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 8015590:	f108 0801 	add.w	r8, r8, #1
 8015594:	2820      	cmp	r0, #32
 8015596:	d0f9      	beq.n	801558c <follow_path+0x12c>
 8015598:	282e      	cmp	r0, #46	; 0x2e
 801559a:	d0f7      	beq.n	801558c <follow_path+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801559c:	f049 0903 	orr.w	r9, r9, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80155a0:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
 80155a4:	2a2e      	cmp	r2, #46	; 0x2e
 80155a6:	d001      	beq.n	80155ac <follow_path+0x14c>
 80155a8:	3c01      	subs	r4, #1
 80155aa:	d1f9      	bne.n	80155a0 <follow_path+0x140>
		dp->fn[i++] = (BYTE)w;
 80155ac:	2208      	movs	r2, #8
 80155ae:	4639      	mov	r1, r7
 80155b0:	f04f 0a00 	mov.w	sl, #0
 80155b4:	4637      	mov	r7, r6
		w = lfn[si++];					/* Get an LFN character */
 80155b6:	f108 0801 	add.w	r8, r8, #1
 80155ba:	462e      	mov	r6, r5
		dp->fn[i++] = (BYTE)w;
 80155bc:	4653      	mov	r3, sl
 80155be:	4615      	mov	r5, r2
 80155c0:	460a      	mov	r2, r1
		if (!w) break;					/* Break on end of the LFN */
 80155c2:	b168      	cbz	r0, 80155e0 <follow_path+0x180>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80155c4:	2820      	cmp	r0, #32
 80155c6:	d003      	beq.n	80155d0 <follow_path+0x170>
 80155c8:	282e      	cmp	r0, #46	; 0x2e
 80155ca:	d152      	bne.n	8015672 <follow_path+0x212>
 80155cc:	45a0      	cmp	r8, r4
 80155ce:	d050      	beq.n	8015672 <follow_path+0x212>
			cf |= NS_LOSS | NS_LFN; continue;
 80155d0:	f049 0903 	orr.w	r9, r9, #3
 80155d4:	f836 0018 	ldrh.w	r0, [r6, r8, lsl #1]
		w = lfn[si++];					/* Get an LFN character */
 80155d8:	f108 0801 	add.w	r8, r8, #1
		if (!w) break;					/* Break on end of the LFN */
 80155dc:	2800      	cmp	r0, #0
 80155de:	d1f1      	bne.n	80155c4 <follow_path+0x164>
 80155e0:	463e      	mov	r6, r7
 80155e2:	4617      	mov	r7, r2
 80155e4:	462a      	mov	r2, r5
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80155e6:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
 80155ea:	29e5      	cmp	r1, #229	; 0xe5
 80155ec:	d102      	bne.n	80155f4 <follow_path+0x194>
 80155ee:	2105      	movs	r1, #5
 80155f0:	f886 1024 	strb.w	r1, [r6, #36]	; 0x24
	if (ni == 8) b <<= 2;
 80155f4:	2a08      	cmp	r2, #8
 80155f6:	d101      	bne.n	80155fc <follow_path+0x19c>
 80155f8:	009b      	lsls	r3, r3, #2
 80155fa:	b2db      	uxtb	r3, r3
 80155fc:	f003 020c 	and.w	r2, r3, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8015600:	2a0c      	cmp	r2, #12
 8015602:	d07e      	beq.n	8015702 <follow_path+0x2a2>
 8015604:	f003 0303 	and.w	r3, r3, #3
 8015608:	2b03      	cmp	r3, #3
 801560a:	d07a      	beq.n	8015702 <follow_path+0x2a2>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801560c:	f019 0f02 	tst.w	r9, #2
 8015610:	d107      	bne.n	8015622 <follow_path+0x1c2>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8015612:	2b01      	cmp	r3, #1
 8015614:	bf08      	it	eq
 8015616:	f049 0910 	orreq.w	r9, r9, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801561a:	2a04      	cmp	r2, #4
 801561c:	bf08      	it	eq
 801561e:	f049 0908 	orreq.w	r9, r9, #8
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8015622:	f886 902f 	strb.w	r9, [r6, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 8015626:	4630      	mov	r0, r6
 8015628:	f7ff fd6e 	bl	8015108 <dir_find>
			ns = dp->fn[NSFLAG];
 801562c:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8015630:	2800      	cmp	r0, #0
 8015632:	d171      	bne.n	8015718 <follow_path+0x2b8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8015634:	075a      	lsls	r2, r3, #29
 8015636:	f53f af5c 	bmi.w	80154f2 <follow_path+0x92>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801563a:	79b3      	ldrb	r3, [r6, #6]
 801563c:	06db      	lsls	r3, r3, #27
 801563e:	f140 8089 	bpl.w	8015754 <follow_path+0x2f4>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8015642:	6972      	ldr	r2, [r6, #20]
 8015644:	f10b 0334 	add.w	r3, fp, #52	; 0x34
	if (fs->fs_type == FS_FAT32) {
 8015648:	f89b 1000 	ldrb.w	r1, [fp]
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801564c:	f3c2 0208 	ubfx	r2, r2, #0, #9
	if (fs->fs_type == FS_FAT32) {
 8015650:	2903      	cmp	r1, #3
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8015652:	4413      	add	r3, r2
	rv = rv << 8 | ptr[0];
 8015654:	7ed8      	ldrb	r0, [r3, #27]
 8015656:	7e9a      	ldrb	r2, [r3, #26]
	cl = ld_word(dir + DIR_FstClusLO);
 8015658:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (fs->fs_type == FS_FAT32) {
 801565c:	d105      	bne.n	801566a <follow_path+0x20a>
	rv = rv << 8 | ptr[0];
 801565e:	7d59      	ldrb	r1, [r3, #21]
 8015660:	7d1b      	ldrb	r3, [r3, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8015662:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8015666:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801566a:	60b2      	str	r2, [r6, #8]
 801566c:	6833      	ldr	r3, [r6, #0]
 801566e:	7838      	ldrb	r0, [r7, #0]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8015670:	e710      	b.n	8015494 <follow_path+0x34>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8015672:	45aa      	cmp	sl, r5
 8015674:	d21a      	bcs.n	80156ac <follow_path+0x24c>
 8015676:	eba8 0104 	sub.w	r1, r8, r4
 801567a:	fab1 f181 	clz	r1, r1
 801567e:	0949      	lsrs	r1, r1, #5
 8015680:	b9a1      	cbnz	r1, 80156ac <follow_path+0x24c>
		if (w >= 0x80) {				/* Non ASCII character */
 8015682:	287f      	cmp	r0, #127	; 0x7f
 8015684:	d820      	bhi.n	80156c8 <follow_path+0x268>
	while (*str && *str != chr) str++;
 8015686:	282b      	cmp	r0, #43	; 0x2b
 8015688:	d02d      	beq.n	80156e6 <follow_path+0x286>
 801568a:	212c      	movs	r1, #44	; 0x2c
 801568c:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 801577c <follow_path+0x31c>
 8015690:	4281      	cmp	r1, r0
 8015692:	d028      	beq.n	80156e6 <follow_path+0x286>
 8015694:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 8015698:	2900      	cmp	r1, #0
 801569a:	d1f9      	bne.n	8015690 <follow_path+0x230>
				if (IsUpper(w)) {		/* ASCII large capital */
 801569c:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 80156a0:	2919      	cmp	r1, #25
 80156a2:	d84e      	bhi.n	8015742 <follow_path+0x2e2>
					b |= 2;
 80156a4:	f043 0302 	orr.w	r3, r3, #2
 80156a8:	b2c0      	uxtb	r0, r0
 80156aa:	e01f      	b.n	80156ec <follow_path+0x28c>
			if (ni == 11) {				/* Long extension */
 80156ac:	2d0b      	cmp	r5, #11
 80156ae:	d053      	beq.n	8015758 <follow_path+0x2f8>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80156b0:	45a0      	cmp	r8, r4
 80156b2:	d002      	beq.n	80156ba <follow_path+0x25a>
 80156b4:	f049 0903 	orr.w	r9, r9, #3
			if (si > di) break;			/* No extension */
 80156b8:	d892      	bhi.n	80155e0 <follow_path+0x180>
			b <<= 2; continue;
 80156ba:	009b      	lsls	r3, r3, #2
 80156bc:	46a0      	mov	r8, r4
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80156be:	250b      	movs	r5, #11
 80156c0:	f04f 0a08 	mov.w	sl, #8
			b <<= 2; continue;
 80156c4:	b2db      	uxtb	r3, r3
 80156c6:	e785      	b.n	80155d4 <follow_path+0x174>
 80156c8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80156cc:	f049 0902 	orr.w	r9, r9, #2
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80156d0:	f7fe f808 	bl	80136e4 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80156d4:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80156d8:	b128      	cbz	r0, 80156e6 <follow_path+0x286>
 80156da:	4927      	ldr	r1, [pc, #156]	; (8015778 <follow_path+0x318>)
 80156dc:	4408      	add	r0, r1
 80156de:	f810 0c80 	ldrb.w	r0, [r0, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80156e2:	2800      	cmp	r0, #0
 80156e4:	d1cf      	bne.n	8015686 <follow_path+0x226>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80156e6:	f049 0903 	orr.w	r9, r9, #3
 80156ea:	205f      	movs	r0, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 80156ec:	eb07 010a 	add.w	r1, r7, sl
 80156f0:	f10a 0a01 	add.w	sl, sl, #1
 80156f4:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
 80156f8:	e76c      	b.n	80155d4 <follow_path+0x174>
	*path = &p[si];						/* Return pointer to the next segment */
 80156fa:	441f      	add	r7, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80156fc:	f04f 0904 	mov.w	r9, #4
 8015700:	e716      	b.n	8015530 <follow_path+0xd0>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8015702:	f049 0902 	orr.w	r9, r9, #2
			res = dir_find(dp);				/* Find an object with the segment name */
 8015706:	4630      	mov	r0, r6
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8015708:	f886 902f 	strb.w	r9, [r6, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 801570c:	f7ff fcfc 	bl	8015108 <dir_find>
			ns = dp->fn[NSFLAG];
 8015710:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8015714:	2800      	cmp	r0, #0
 8015716:	d08d      	beq.n	8015634 <follow_path+0x1d4>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8015718:	2804      	cmp	r0, #4
 801571a:	f47f aeea 	bne.w	80154f2 <follow_path+0x92>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801571e:	f013 0f04 	tst.w	r3, #4
 8015722:	bf08      	it	eq
 8015724:	2005      	moveq	r0, #5
 8015726:	e6e4      	b.n	80154f2 <follow_path+0x92>
		dp->fn[NSFLAG] = NS_NONAME;
 8015728:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 801572a:	4630      	mov	r0, r6
		dp->fn[NSFLAG] = NS_NONAME;
 801572c:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
}
 8015730:	b005      	add	sp, #20
 8015732:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 8015736:	f7fe bdd7 	b.w	80142e8 <dir_sdi>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801573a:	4690      	mov	r8, r2
 801573c:	e730      	b.n	80155a0 <follow_path+0x140>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801573e:	460f      	mov	r7, r1
 8015740:	e6f2      	b.n	8015528 <follow_path+0xc8>
					if (IsLower(w)) {	/* ASCII small capital */
 8015742:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 8015746:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 8015748:	bf9c      	itt	ls
 801574a:	3820      	subls	r0, #32
 801574c:	f043 0301 	orrls.w	r3, r3, #1
 8015750:	b2c0      	uxtb	r0, r0
 8015752:	e7cb      	b.n	80156ec <follow_path+0x28c>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8015754:	2005      	movs	r0, #5
 8015756:	e6cc      	b.n	80154f2 <follow_path+0x92>
 8015758:	463e      	mov	r6, r7
 801575a:	4617      	mov	r7, r2
				cf |= NS_LOSS | NS_LFN; break;
 801575c:	f049 0903 	orr.w	r9, r9, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8015760:	f896 2024 	ldrb.w	r2, [r6, #36]	; 0x24
 8015764:	2ae5      	cmp	r2, #229	; 0xe5
 8015766:	f47f af49 	bne.w	80155fc <follow_path+0x19c>
 801576a:	2205      	movs	r2, #5
 801576c:	f886 2024 	strb.w	r2, [r6, #36]	; 0x24
 8015770:	e744      	b.n	80155fc <follow_path+0x19c>
 8015772:	bf00      	nop
 8015774:	08021871 	.word	0x08021871
 8015778:	080217e0 	.word	0x080217e0
 801577c:	0802187d 	.word	0x0802187d

08015780 <dir_register>:
{
 8015780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8015784:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
{
 8015788:	b091      	sub	sp, #68	; 0x44
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801578a:	f013 06a0 	ands.w	r6, r3, #160	; 0xa0
 801578e:	f040 82d7 	bne.w	8015d40 <dir_register+0x5c0>
	FATFS *fs = dp->obj.fs;
 8015792:	6803      	ldr	r3, [r0, #0]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8015794:	68df      	ldr	r7, [r3, #12]
	FATFS *fs = dp->obj.fs;
 8015796:	9302      	str	r3, [sp, #8]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8015798:	883b      	ldrh	r3, [r7, #0]
 801579a:	2b00      	cmp	r3, #0
 801579c:	f000 834f 	beq.w	8015e3e <dir_register+0x6be>
 80157a0:	463b      	mov	r3, r7
 80157a2:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 80157a6:	3601      	adds	r6, #1
 80157a8:	2a00      	cmp	r2, #0
 80157aa:	d1fa      	bne.n	80157a2 <dir_register+0x22>
	mem_cpy(sn, dp->fn, 12);
 80157ac:	4683      	mov	fp, r0
 80157ae:	4682      	mov	sl, r0
 80157b0:	ab0d      	add	r3, sp, #52	; 0x34
 80157b2:	f85b 0f24 	ldr.w	r0, [fp, #36]!
 80157b6:	f8db 2008 	ldr.w	r2, [fp, #8]
 80157ba:	f8db 1004 	ldr.w	r1, [fp, #4]
 80157be:	c307      	stmia	r3!, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80157c0:	f89d 503f 	ldrb.w	r5, [sp, #63]	; 0x3f
 80157c4:	07ea      	lsls	r2, r5, #31
 80157c6:	d460      	bmi.n	801588a <dir_register+0x10a>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80157c8:	07aa      	lsls	r2, r5, #30
 80157ca:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80157ce:	f140 82af 	bpl.w	8015d30 <dir_register+0x5b0>
 80157d2:	f106 030c 	add.w	r3, r6, #12
 80157d6:	4abd      	ldr	r2, [pc, #756]	; (8015acc <dir_register+0x34c>)
 80157d8:	fba2 2303 	umull	r2, r3, r2, r3
 80157dc:	089b      	lsrs	r3, r3, #2
 80157de:	3301      	adds	r3, #1
 80157e0:	9303      	str	r3, [sp, #12]
	res = dir_sdi(dp, 0);
 80157e2:	2100      	movs	r1, #0
 80157e4:	4650      	mov	r0, sl
 80157e6:	f7fe fd7f 	bl	80142e8 <dir_sdi>
	if (res == FR_OK) {
 80157ea:	9001      	str	r0, [sp, #4]
 80157ec:	4605      	mov	r5, r0
 80157ee:	2800      	cmp	r0, #0
 80157f0:	f040 82ba 	bne.w	8015d68 <dir_register+0x5e8>
 80157f4:	f108 0334 	add.w	r3, r8, #52	; 0x34
 80157f8:	f8da 901c 	ldr.w	r9, [sl, #28]
 80157fc:	f8d8 6030 	ldr.w	r6, [r8, #48]	; 0x30
 8015800:	9304      	str	r3, [sp, #16]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8015802:	f8cd b020 	str.w	fp, [sp, #32]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8015806:	454e      	cmp	r6, r9
 8015808:	f000 81b4 	beq.w	8015b74 <dir_register+0x3f4>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801580c:	f898 3003 	ldrb.w	r3, [r8, #3]
 8015810:	f898 0001 	ldrb.w	r0, [r8, #1]
 8015814:	b33b      	cbz	r3, 8015866 <dir_register+0xe6>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8015816:	9f04      	ldr	r7, [sp, #16]
 8015818:	2301      	movs	r3, #1
 801581a:	4632      	mov	r2, r6
 801581c:	4639      	mov	r1, r7
 801581e:	f7fd fff9 	bl	8013814 <disk_write>
 8015822:	2800      	cmp	r0, #0
 8015824:	f040 8275 	bne.w	8015d12 <dir_register+0x592>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8015828:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 801582c:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8015830:	1ab2      	subs	r2, r6, r2
			fs->wflag = 0;
 8015832:	f888 0003 	strb.w	r0, [r8, #3]
 8015836:	f898 0001 	ldrb.w	r0, [r8, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801583a:	429a      	cmp	r2, r3
 801583c:	d213      	bcs.n	8015866 <dir_register+0xe6>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801583e:	f898 4002 	ldrb.w	r4, [r8, #2]
 8015842:	2c01      	cmp	r4, #1
 8015844:	d804      	bhi.n	8015850 <dir_register+0xd0>
 8015846:	e00e      	b.n	8015866 <dir_register+0xe6>
 8015848:	f8d8 301c 	ldr.w	r3, [r8, #28]
 801584c:	f898 0001 	ldrb.w	r0, [r8, #1]
					wsect += fs->fsize;
 8015850:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015852:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8015854:	2301      	movs	r3, #1
 8015856:	4639      	mov	r1, r7
 8015858:	4632      	mov	r2, r6
 801585a:	f7fd ffdb 	bl	8013814 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801585e:	2c01      	cmp	r4, #1
 8015860:	d1f2      	bne.n	8015848 <dir_register+0xc8>
 8015862:	f898 0001 	ldrb.w	r0, [r8, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8015866:	2301      	movs	r3, #1
 8015868:	464a      	mov	r2, r9
 801586a:	9904      	ldr	r1, [sp, #16]
 801586c:	f7fd ffc4 	bl	80137f8 <disk_read>
 8015870:	2800      	cmp	r0, #0
 8015872:	f000 817d 	beq.w	8015b70 <dir_register+0x3f0>
			fs->winsect = sector;
 8015876:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 801587a:	2201      	movs	r2, #1
			fs->winsect = sector;
 801587c:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
				res = FR_DISK_ERR;
 8015880:	9201      	str	r2, [sp, #4]
}
 8015882:	9801      	ldr	r0, [sp, #4]
 8015884:	b011      	add	sp, #68	; 0x44
 8015886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 801588a:	2340      	movs	r3, #64	; 0x40
		for (n = 1; n < 100; n++) {
 801588c:	f04f 0801 	mov.w	r8, #1
				if (sr & 0x10000) sr ^= 0x11021;
 8015890:	4c8f      	ldr	r4, [pc, #572]	; (8015ad0 <dir_register+0x350>)
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8015892:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8015896:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
 801589a:	9501      	str	r5, [sp, #4]
			*d++ = *s++;
 801589c:	f89d 103e 	ldrb.w	r1, [sp, #62]	; 0x3e
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80158a0:	f1b8 0f05 	cmp.w	r8, #5
			*d++ = *s++;
 80158a4:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 80158a8:	f89d 003d 	ldrb.w	r0, [sp, #61]	; 0x3d
 80158ac:	f88a 102e 	strb.w	r1, [sl, #46]	; 0x2e
 80158b0:	f88a 502c 	strb.w	r5, [sl, #44]	; 0x2c
 80158b4:	f88a 002d 	strb.w	r0, [sl, #45]	; 0x2d
 80158b8:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 80158bc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80158c0:	e9ca 2309 	strd	r2, r3, [sl, #36]	; 0x24
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80158c4:	f240 8182 	bls.w	8015bcc <dir_register+0x44c>
 80158c8:	3f02      	subs	r7, #2
 80158ca:	4643      	mov	r3, r8
 80158cc:	e08a      	b.n	80159e4 <dir_register+0x264>
				sr = (sr << 1) + (wc & 1);
 80158ce:	f002 0501 	and.w	r5, r2, #1
				wc >>= 1;
 80158d2:	0850      	lsrs	r0, r2, #1
				sr = (sr << 1) + (wc & 1);
 80158d4:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 80158d8:	f000 0001 	and.w	r0, r0, #1
				if (sr & 0x10000) sr ^= 0x11021;
 80158dc:	03eb      	lsls	r3, r5, #15
				wc >>= 1;
 80158de:	ea4f 0392 	mov.w	r3, r2, lsr #2
				if (sr & 0x10000) sr ^= 0x11021;
 80158e2:	bf48      	it	mi
 80158e4:	4065      	eormi	r5, r4
				sr = (sr << 1) + (wc & 1);
 80158e6:	f003 0301 	and.w	r3, r3, #1
 80158ea:	eb00 0045 	add.w	r0, r0, r5, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80158ee:	03c5      	lsls	r5, r0, #15
				wc >>= 1;
 80158f0:	ea4f 05d2 	mov.w	r5, r2, lsr #3
				if (sr & 0x10000) sr ^= 0x11021;
 80158f4:	bf48      	it	mi
 80158f6:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 80158f8:	f005 0501 	and.w	r5, r5, #1
 80158fc:	eb03 0340 	add.w	r3, r3, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8015900:	03d8      	lsls	r0, r3, #15
				wc >>= 1;
 8015902:	ea4f 1012 	mov.w	r0, r2, lsr #4
				if (sr & 0x10000) sr ^= 0x11021;
 8015906:	bf48      	it	mi
 8015908:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 801590a:	f000 0001 	and.w	r0, r0, #1
 801590e:	eb05 0543 	add.w	r5, r5, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8015912:	03eb      	lsls	r3, r5, #15
				wc >>= 1;
 8015914:	ea4f 1352 	mov.w	r3, r2, lsr #5
				if (sr & 0x10000) sr ^= 0x11021;
 8015918:	bf48      	it	mi
 801591a:	4065      	eormi	r5, r4
				sr = (sr << 1) + (wc & 1);
 801591c:	f003 0301 	and.w	r3, r3, #1
 8015920:	eb00 0045 	add.w	r0, r0, r5, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8015924:	03c5      	lsls	r5, r0, #15
				wc >>= 1;
 8015926:	ea4f 1592 	mov.w	r5, r2, lsr #6
				if (sr & 0x10000) sr ^= 0x11021;
 801592a:	bf48      	it	mi
 801592c:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 801592e:	f005 0501 	and.w	r5, r5, #1
 8015932:	eb03 0340 	add.w	r3, r3, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8015936:	03d8      	lsls	r0, r3, #15
				wc >>= 1;
 8015938:	ea4f 10d2 	mov.w	r0, r2, lsr #7
				if (sr & 0x10000) sr ^= 0x11021;
 801593c:	bf48      	it	mi
 801593e:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 8015940:	f000 0001 	and.w	r0, r0, #1
 8015944:	eb05 0543 	add.w	r5, r5, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8015948:	03eb      	lsls	r3, r5, #15
				wc >>= 1;
 801594a:	ea4f 2312 	mov.w	r3, r2, lsr #8
				if (sr & 0x10000) sr ^= 0x11021;
 801594e:	bf48      	it	mi
 8015950:	4065      	eormi	r5, r4
				sr = (sr << 1) + (wc & 1);
 8015952:	f003 0301 	and.w	r3, r3, #1
 8015956:	eb00 0045 	add.w	r0, r0, r5, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 801595a:	03c5      	lsls	r5, r0, #15
				wc >>= 1;
 801595c:	ea4f 2552 	mov.w	r5, r2, lsr #9
				if (sr & 0x10000) sr ^= 0x11021;
 8015960:	bf48      	it	mi
 8015962:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 8015964:	f005 0501 	and.w	r5, r5, #1
 8015968:	eb03 0340 	add.w	r3, r3, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 801596c:	03d8      	lsls	r0, r3, #15
				wc >>= 1;
 801596e:	ea4f 2092 	mov.w	r0, r2, lsr #10
				if (sr & 0x10000) sr ^= 0x11021;
 8015972:	bf48      	it	mi
 8015974:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 8015976:	f000 0001 	and.w	r0, r0, #1
 801597a:	eb05 0543 	add.w	r5, r5, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 801597e:	03eb      	lsls	r3, r5, #15
				wc >>= 1;
 8015980:	ea4f 23d2 	mov.w	r3, r2, lsr #11
				if (sr & 0x10000) sr ^= 0x11021;
 8015984:	bf48      	it	mi
 8015986:	4065      	eormi	r5, r4
				sr = (sr << 1) + (wc & 1);
 8015988:	f003 0301 	and.w	r3, r3, #1
 801598c:	eb00 0045 	add.w	r0, r0, r5, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8015990:	03c5      	lsls	r5, r0, #15
				wc >>= 1;
 8015992:	ea4f 3512 	mov.w	r5, r2, lsr #12
				if (sr & 0x10000) sr ^= 0x11021;
 8015996:	bf48      	it	mi
 8015998:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 801599a:	f005 0501 	and.w	r5, r5, #1
 801599e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80159a2:	03d8      	lsls	r0, r3, #15
				wc >>= 1;
 80159a4:	ea4f 3052 	mov.w	r0, r2, lsr #13
				if (sr & 0x10000) sr ^= 0x11021;
 80159a8:	bf48      	it	mi
 80159aa:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 80159ac:	f000 0001 	and.w	r0, r0, #1
 80159b0:	eb05 0543 	add.w	r5, r5, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80159b4:	03eb      	lsls	r3, r5, #15
				wc >>= 1;
 80159b6:	ea4f 3392 	mov.w	r3, r2, lsr #14
 80159ba:	ea4f 32d2 	mov.w	r2, r2, lsr #15
				if (sr & 0x10000) sr ^= 0x11021;
 80159be:	bf48      	it	mi
 80159c0:	4065      	eormi	r5, r4
				sr = (sr << 1) + (wc & 1);
 80159c2:	f003 0301 	and.w	r3, r3, #1
 80159c6:	eb00 0045 	add.w	r0, r0, r5, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80159ca:	03c5      	lsls	r5, r0, #15
 80159cc:	bf48      	it	mi
 80159ce:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 80159d0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80159d4:	03dd      	lsls	r5, r3, #15
 80159d6:	bf48      	it	mi
 80159d8:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 80159da:	eb02 0343 	add.w	r3, r2, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80159de:	03d8      	lsls	r0, r3, #15
 80159e0:	bf48      	it	mi
 80159e2:	4063      	eormi	r3, r4
		while (*lfn) {	/* Create a CRC */
 80159e4:	f837 2f02 	ldrh.w	r2, [r7, #2]!
 80159e8:	2a00      	cmp	r2, #0
 80159ea:	f47f af70 	bne.w	80158ce <dir_register+0x14e>
		c = (BYTE)((seq % 16) + '0');
 80159ee:	f003 020f 	and.w	r2, r3, #15
 80159f2:	f102 0e30 	add.w	lr, r2, #48	; 0x30
		if (c > '9') c += 7;
 80159f6:	f1be 0f39 	cmp.w	lr, #57	; 0x39
 80159fa:	bf88      	it	hi
 80159fc:	f102 0e37 	addhi.w	lr, r2, #55	; 0x37
	} while (seq);
 8015a00:	091a      	lsrs	r2, r3, #4
		ns[i--] = c;
 8015a02:	f88d e033 	strb.w	lr, [sp, #51]	; 0x33
	} while (seq);
 8015a06:	f000 8159 	beq.w	8015cbc <dir_register+0x53c>
		c = (BYTE)((seq % 16) + '0');
 8015a0a:	f002 020f 	and.w	r2, r2, #15
 8015a0e:	f102 0030 	add.w	r0, r2, #48	; 0x30
		if (c > '9') c += 7;
 8015a12:	2839      	cmp	r0, #57	; 0x39
 8015a14:	bf88      	it	hi
 8015a16:	f102 0037 	addhi.w	r0, r2, #55	; 0x37
	} while (seq);
 8015a1a:	0a1a      	lsrs	r2, r3, #8
		ns[i--] = c;
 8015a1c:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
	} while (seq);
 8015a20:	f000 8154 	beq.w	8015ccc <dir_register+0x54c>
		c = (BYTE)((seq % 16) + '0');
 8015a24:	f002 020f 	and.w	r2, r2, #15
 8015a28:	f102 0030 	add.w	r0, r2, #48	; 0x30
		if (c > '9') c += 7;
 8015a2c:	2839      	cmp	r0, #57	; 0x39
 8015a2e:	bf88      	it	hi
 8015a30:	f102 0037 	addhi.w	r0, r2, #55	; 0x37
	} while (seq);
 8015a34:	0b1a      	lsrs	r2, r3, #12
		ns[i--] = c;
 8015a36:	f88d 0031 	strb.w	r0, [sp, #49]	; 0x31
	} while (seq);
 8015a3a:	f000 8160 	beq.w	8015cfe <dir_register+0x57e>
		c = (BYTE)((seq % 16) + '0');
 8015a3e:	f002 020f 	and.w	r2, r2, #15
 8015a42:	f102 0030 	add.w	r0, r2, #48	; 0x30
		if (c > '9') c += 7;
 8015a46:	2839      	cmp	r0, #57	; 0x39
 8015a48:	bf88      	it	hi
 8015a4a:	f102 0037 	addhi.w	r0, r2, #55	; 0x37
	} while (seq);
 8015a4e:	0c1a      	lsrs	r2, r3, #16
		ns[i--] = c;
 8015a50:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
	} while (seq);
 8015a54:	f000 8158 	beq.w	8015d08 <dir_register+0x588>
		c = (BYTE)((seq % 16) + '0');
 8015a58:	f002 020f 	and.w	r2, r2, #15
 8015a5c:	f102 0030 	add.w	r0, r2, #48	; 0x30
		if (c > '9') c += 7;
 8015a60:	2839      	cmp	r0, #57	; 0x39
 8015a62:	bf88      	it	hi
 8015a64:	f102 0037 	addhi.w	r0, r2, #55	; 0x37
	} while (seq);
 8015a68:	0d1a      	lsrs	r2, r3, #20
		ns[i--] = c;
 8015a6a:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
	} while (seq);
 8015a6e:	f000 8162 	beq.w	8015d36 <dir_register+0x5b6>
		c = (BYTE)((seq % 16) + '0');
 8015a72:	f002 020f 	and.w	r2, r2, #15
 8015a76:	f102 0030 	add.w	r0, r2, #48	; 0x30
		if (c > '9') c += 7;
 8015a7a:	2839      	cmp	r0, #57	; 0x39
 8015a7c:	bf88      	it	hi
 8015a7e:	f102 0037 	addhi.w	r0, r2, #55	; 0x37
	} while (seq);
 8015a82:	0e1a      	lsrs	r2, r3, #24
		ns[i--] = c;
 8015a84:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
	} while (seq);
 8015a88:	f000 815d 	beq.w	8015d46 <dir_register+0x5c6>
		c = (BYTE)((seq % 16) + '0');
 8015a8c:	f002 020f 	and.w	r2, r2, #15
 8015a90:	f102 0030 	add.w	r0, r2, #48	; 0x30
		if (c > '9') c += 7;
 8015a94:	2839      	cmp	r0, #57	; 0x39
 8015a96:	bf88      	it	hi
 8015a98:	f102 0037 	addhi.w	r0, r2, #55	; 0x37
	} while (seq);
 8015a9c:	0f1b      	lsrs	r3, r3, #28
		ns[i--] = c;
 8015a9e:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	} while (seq);
 8015aa2:	f000 8155 	beq.w	8015d50 <dir_register+0x5d0>
		c = (BYTE)((seq % 16) + '0');
 8015aa6:	b2db      	uxtb	r3, r3
 8015aa8:	f103 0230 	add.w	r2, r3, #48	; 0x30
		if (c > '9') c += 7;
 8015aac:	2a39      	cmp	r2, #57	; 0x39
 8015aae:	bf88      	it	hi
 8015ab0:	f103 0237 	addhi.w	r2, r3, #55	; 0x37
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8015ab4:	2920      	cmp	r1, #32
		ns[i--] = c;
 8015ab6:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8015aba:	f000 81b7 	beq.w	8015e2c <dir_register+0x6ac>
		ns[i--] = c;
 8015abe:	f04f 35ff 	mov.w	r5, #4294967295
 8015ac2:	f10a 0125 	add.w	r1, sl, #37	; 0x25
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8015ac6:	2200      	movs	r2, #0
 8015ac8:	e008      	b.n	8015adc <dir_register+0x35c>
 8015aca:	bf00      	nop
 8015acc:	4ec4ec4f 	.word	0x4ec4ec4f
 8015ad0:	00011021 	.word	0x00011021
 8015ad4:	7807      	ldrb	r7, [r0, #0]
 8015ad6:	2f20      	cmp	r7, #32
 8015ad8:	d007      	beq.n	8015aea <dir_register+0x36a>
 8015ada:	461a      	mov	r2, r3
 8015adc:	1c53      	adds	r3, r2, #1
 8015ade:	4608      	mov	r0, r1
 8015ae0:	f102 0c02 	add.w	ip, r2, #2
 8015ae4:	3101      	adds	r1, #1
 8015ae6:	429d      	cmp	r5, r3
 8015ae8:	d8f4      	bhi.n	8015ad4 <dir_register+0x354>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015aea:	2d07      	cmp	r5, #7
 8015aec:	d970      	bls.n	8015bd0 <dir_register+0x450>
 8015aee:	2120      	movs	r1, #32
	} while (j < 8);
 8015af0:	f1bc 0f07 	cmp.w	ip, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015af4:	7001      	strb	r1, [r0, #0]
	} while (j < 8);
 8015af6:	d82c      	bhi.n	8015b52 <dir_register+0x3d2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015af8:	1cd1      	adds	r1, r2, #3
 8015afa:	2020      	movs	r0, #32
	} while (j < 8);
 8015afc:	2908      	cmp	r1, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015afe:	f80b 000c 	strb.w	r0, [fp, ip]
	} while (j < 8);
 8015b02:	d026      	beq.n	8015b52 <dir_register+0x3d2>
 8015b04:	3204      	adds	r2, #4
 8015b06:	4459      	add	r1, fp
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015b08:	2020      	movs	r0, #32
	} while (j < 8);
 8015b0a:	2a08      	cmp	r2, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015b0c:	7008      	strb	r0, [r1, #0]
	} while (j < 8);
 8015b0e:	d020      	beq.n	8015b52 <dir_register+0x3d2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015b10:	1d19      	adds	r1, r3, #4
 8015b12:	2020      	movs	r0, #32
	} while (j < 8);
 8015b14:	2908      	cmp	r1, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015b16:	f80b 0002 	strb.w	r0, [fp, r2]
	} while (j < 8);
 8015b1a:	d01a      	beq.n	8015b52 <dir_register+0x3d2>
 8015b1c:	4459      	add	r1, fp
 8015b1e:	1d5a      	adds	r2, r3, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015b20:	2020      	movs	r0, #32
	} while (j < 8);
 8015b22:	2a08      	cmp	r2, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015b24:	7008      	strb	r0, [r1, #0]
	} while (j < 8);
 8015b26:	d014      	beq.n	8015b52 <dir_register+0x3d2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015b28:	1d99      	adds	r1, r3, #6
 8015b2a:	2020      	movs	r0, #32
	} while (j < 8);
 8015b2c:	2908      	cmp	r1, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015b2e:	f80b 0002 	strb.w	r0, [fp, r2]
	} while (j < 8);
 8015b32:	d00e      	beq.n	8015b52 <dir_register+0x3d2>
 8015b34:	4459      	add	r1, fp
 8015b36:	1dda      	adds	r2, r3, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015b38:	2020      	movs	r0, #32
	} while (j < 8);
 8015b3a:	2a08      	cmp	r2, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015b3c:	7008      	strb	r0, [r1, #0]
	} while (j < 8);
 8015b3e:	d008      	beq.n	8015b52 <dir_register+0x3d2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015b40:	f04f 0e20 	mov.w	lr, #32
	} while (j < 8);
 8015b44:	3301      	adds	r3, #1
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015b46:	f80b e002 	strb.w	lr, [fp, r2]
	} while (j < 8);
 8015b4a:	d102      	bne.n	8015b52 <dir_register+0x3d2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015b4c:	2320      	movs	r3, #32
 8015b4e:	f88a 302b 	strb.w	r3, [sl, #43]	; 0x2b
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8015b52:	4650      	mov	r0, sl
 8015b54:	f7ff fad8 	bl	8015108 <dir_find>
			if (res != FR_OK) break;
 8015b58:	2800      	cmp	r0, #0
 8015b5a:	f040 80dd 	bne.w	8015d18 <dir_register+0x598>
		for (n = 1; n < 100; n++) {
 8015b5e:	f108 0801 	add.w	r8, r8, #1
 8015b62:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
 8015b66:	f000 80a3 	beq.w	8015cb0 <dir_register+0x530>
 8015b6a:	f8d9 700c 	ldr.w	r7, [r9, #12]
 8015b6e:	e695      	b.n	801589c <dir_register+0x11c>
			fs->winsect = sector;
 8015b70:	f8c8 9030 	str.w	r9, [r8, #48]	; 0x30
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8015b74:	f8da 3020 	ldr.w	r3, [sl, #32]
 8015b78:	781c      	ldrb	r4, [r3, #0]
 8015b7a:	2ce5      	cmp	r4, #229	; 0xe5
 8015b7c:	d003      	beq.n	8015b86 <dir_register+0x406>
 8015b7e:	fab4 f484 	clz	r4, r4
 8015b82:	0964      	lsrs	r4, r4, #5
 8015b84:	b124      	cbz	r4, 8015b90 <dir_register+0x410>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8015b86:	1c6c      	adds	r4, r5, #1
 8015b88:	9b03      	ldr	r3, [sp, #12]
 8015b8a:	42a3      	cmp	r3, r4
 8015b8c:	f000 8159 	beq.w	8015e42 <dir_register+0x6c2>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8015b90:	f8da 5014 	ldr.w	r5, [sl, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8015b94:	4ac4      	ldr	r2, [pc, #784]	; (8015ea8 <dir_register+0x728>)
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8015b96:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8015b98:	f8da 301c 	ldr.w	r3, [sl, #28]
 8015b9c:	4295      	cmp	r5, r2
 8015b9e:	f200 8087 	bhi.w	8015cb0 <dir_register+0x530>
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	f000 8084 	beq.w	8015cb0 <dir_register+0x530>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8015ba8:	f3c5 0b08 	ubfx	fp, r5, #0, #9
	FATFS *fs = dp->obj.fs;
 8015bac:	f8da 6000 	ldr.w	r6, [sl]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8015bb0:	f1bb 0f00 	cmp.w	fp, #0
 8015bb4:	d070      	beq.n	8015c98 <dir_register+0x518>
 8015bb6:	f106 0734 	add.w	r7, r6, #52	; 0x34
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8015bba:	445f      	add	r7, fp
 8015bbc:	464e      	mov	r6, r9
	dp->dptr = ofs;						/* Current entry */
 8015bbe:	f8ca 5014 	str.w	r5, [sl, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8015bc2:	4699      	mov	r9, r3
 8015bc4:	f8ca 7020 	str.w	r7, [sl, #32]
 8015bc8:	4625      	mov	r5, r4
 8015bca:	e61c      	b.n	8015806 <dir_register+0x86>
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8015bcc:	4643      	mov	r3, r8
 8015bce:	e70e      	b.n	80159ee <dir_register+0x26e>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015bd0:	277e      	movs	r7, #126	; 0x7e
	} while (j < 8);
 8015bd2:	f1bc 0f07 	cmp.w	ip, #7
 8015bd6:	f105 0101 	add.w	r1, r5, #1
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015bda:	7007      	strb	r7, [r0, #0]
	} while (j < 8);
 8015bdc:	d8b9      	bhi.n	8015b52 <dir_register+0x3d2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015bde:	2908      	cmp	r1, #8
 8015be0:	d08a      	beq.n	8015af8 <dir_register+0x378>
 8015be2:	aa10      	add	r2, sp, #64	; 0x40
 8015be4:	1c98      	adds	r0, r3, #2
 8015be6:	3502      	adds	r5, #2
 8015be8:	4411      	add	r1, r2
	} while (j < 8);
 8015bea:	2808      	cmp	r0, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015bec:	f811 2c14 	ldrb.w	r2, [r1, #-20]
 8015bf0:	f80b 200c 	strb.w	r2, [fp, ip]
	} while (j < 8);
 8015bf4:	d0ad      	beq.n	8015b52 <dir_register+0x3d2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015bf6:	2d07      	cmp	r5, #7
 8015bf8:	f103 0203 	add.w	r2, r3, #3
 8015bfc:	eb0b 0100 	add.w	r1, fp, r0
 8015c00:	d882      	bhi.n	8015b08 <dir_register+0x388>
 8015c02:	af10      	add	r7, sp, #64	; 0x40
	} while (j < 8);
 8015c04:	2a08      	cmp	r2, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015c06:	f105 0101 	add.w	r1, r5, #1
 8015c0a:	442f      	add	r7, r5
 8015c0c:	f817 7c14 	ldrb.w	r7, [r7, #-20]
 8015c10:	f80b 7000 	strb.w	r7, [fp, r0]
	} while (j < 8);
 8015c14:	d09d      	beq.n	8015b52 <dir_register+0x3d2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015c16:	2908      	cmp	r1, #8
 8015c18:	f43f af7a 	beq.w	8015b10 <dir_register+0x390>
 8015c1c:	a810      	add	r0, sp, #64	; 0x40
 8015c1e:	1caf      	adds	r7, r5, #2
 8015c20:	4401      	add	r1, r0
 8015c22:	1d18      	adds	r0, r3, #4
 8015c24:	f811 1c14 	ldrb.w	r1, [r1, #-20]
	} while (j < 8);
 8015c28:	2808      	cmp	r0, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015c2a:	f80b 1002 	strb.w	r1, [fp, r2]
	} while (j < 8);
 8015c2e:	d090      	beq.n	8015b52 <dir_register+0x3d2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015c30:	2f08      	cmp	r7, #8
 8015c32:	f103 0205 	add.w	r2, r3, #5
 8015c36:	eb0b 0100 	add.w	r1, fp, r0
 8015c3a:	f43f af71 	beq.w	8015b20 <dir_register+0x3a0>
 8015c3e:	a910      	add	r1, sp, #64	; 0x40
	} while (j < 8);
 8015c40:	2a08      	cmp	r2, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015c42:	440f      	add	r7, r1
 8015c44:	f105 0103 	add.w	r1, r5, #3
 8015c48:	f817 7c14 	ldrb.w	r7, [r7, #-20]
 8015c4c:	f80b 7000 	strb.w	r7, [fp, r0]
	} while (j < 8);
 8015c50:	f43f af7f 	beq.w	8015b52 <dir_register+0x3d2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015c54:	2908      	cmp	r1, #8
 8015c56:	f43f af67 	beq.w	8015b28 <dir_register+0x3a8>
 8015c5a:	a810      	add	r0, sp, #64	; 0x40
 8015c5c:	3504      	adds	r5, #4
 8015c5e:	4401      	add	r1, r0
 8015c60:	1d98      	adds	r0, r3, #6
 8015c62:	f811 1c14 	ldrb.w	r1, [r1, #-20]
	} while (j < 8);
 8015c66:	2808      	cmp	r0, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015c68:	f80b 1002 	strb.w	r1, [fp, r2]
	} while (j < 8);
 8015c6c:	f43f af71 	beq.w	8015b52 <dir_register+0x3d2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015c70:	2d08      	cmp	r5, #8
 8015c72:	f103 0207 	add.w	r2, r3, #7
 8015c76:	eb0b 0100 	add.w	r1, fp, r0
 8015c7a:	f43f af5d 	beq.w	8015b38 <dir_register+0x3b8>
 8015c7e:	a910      	add	r1, sp, #64	; 0x40
	} while (j < 8);
 8015c80:	2a08      	cmp	r2, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015c82:	4429      	add	r1, r5
 8015c84:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8015c88:	f80b 1000 	strb.w	r1, [fp, r0]
	} while (j < 8);
 8015c8c:	f43f af61 	beq.w	8015b52 <dir_register+0x3d2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015c90:	2d06      	cmp	r5, #6
 8015c92:	f43f af57 	beq.w	8015b44 <dir_register+0x3c4>
 8015c96:	e753      	b.n	8015b40 <dir_register+0x3c0>
		dp->sect++;				/* Next sector */
 8015c98:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
 8015c9a:	f8da 1018 	ldr.w	r1, [sl, #24]
		dp->sect++;				/* Next sector */
 8015c9e:	f8ca 301c 	str.w	r3, [sl, #28]
		if (!dp->clust) {		/* Static table */
 8015ca2:	bb11      	cbnz	r1, 8015cea <dir_register+0x56a>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8015ca4:	8932      	ldrh	r2, [r6, #8]
 8015ca6:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
 8015caa:	d823      	bhi.n	8015cf4 <dir_register+0x574>
				dp->sect = 0; return FR_NO_FILE;
 8015cac:	f8ca 101c 	str.w	r1, [sl, #28]
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8015cb0:	2307      	movs	r3, #7
 8015cb2:	9301      	str	r3, [sp, #4]
}
 8015cb4:	9801      	ldr	r0, [sp, #4]
 8015cb6:	b011      	add	sp, #68	; 0x44
 8015cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ns[i] = '~';
 8015cbc:	237e      	movs	r3, #126	; 0x7e
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8015cbe:	2920      	cmp	r1, #32
	ns[i] = '~';
 8015cc0:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8015cc4:	f000 82e5 	beq.w	8016292 <dir_register+0xb12>
		ns[i--] = c;
 8015cc8:	2506      	movs	r5, #6
 8015cca:	e6fa      	b.n	8015ac2 <dir_register+0x342>
	ns[i] = '~';
 8015ccc:	237e      	movs	r3, #126	; 0x7e
		ns[i--] = c;
 8015cce:	2505      	movs	r5, #5
	ns[i] = '~';
 8015cd0:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8015cd4:	2920      	cmp	r1, #32
 8015cd6:	f47f aef4 	bne.w	8015ac2 <dir_register+0x342>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015cda:	237e      	movs	r3, #126	; 0x7e
 8015cdc:	1c69      	adds	r1, r5, #1
 8015cde:	f88a 3024 	strb.w	r3, [sl, #36]	; 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8015ce2:	2300      	movs	r3, #0
 8015ce4:	f04f 0c01 	mov.w	ip, #1
 8015ce8:	e77b      	b.n	8015be2 <dir_register+0x462>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8015cea:	8972      	ldrh	r2, [r6, #10]
 8015cec:	3a01      	subs	r2, #1
 8015cee:	ea12 2255 	ands.w	r2, r2, r5, lsr #9
 8015cf2:	d03d      	beq.n	8015d70 <dir_register+0x5f0>
 8015cf4:	f106 0734 	add.w	r7, r6, #52	; 0x34
 8015cf8:	f8d8 9030 	ldr.w	r9, [r8, #48]	; 0x30
 8015cfc:	e75d      	b.n	8015bba <dir_register+0x43a>
	ns[i] = '~';
 8015cfe:	237e      	movs	r3, #126	; 0x7e
		ns[i--] = c;
 8015d00:	2504      	movs	r5, #4
	ns[i] = '~';
 8015d02:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 8015d06:	e7e5      	b.n	8015cd4 <dir_register+0x554>
 8015d08:	237e      	movs	r3, #126	; 0x7e
		ns[i--] = c;
 8015d0a:	2503      	movs	r5, #3
	ns[i] = '~';
 8015d0c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 8015d10:	e7e0      	b.n	8015cd4 <dir_register+0x554>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8015d12:	2301      	movs	r3, #1
 8015d14:	9301      	str	r3, [sp, #4]
 8015d16:	e5b4      	b.n	8015882 <dir_register+0x102>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8015d18:	2804      	cmp	r0, #4
 8015d1a:	9d01      	ldr	r5, [sp, #4]
 8015d1c:	9001      	str	r0, [sp, #4]
 8015d1e:	f47f adb0 	bne.w	8015882 <dir_register+0x102>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8015d22:	07aa      	lsls	r2, r5, #30
		dp->fn[NSFLAG] = sn[NSFLAG];
 8015d24:	f88a 502f 	strb.w	r5, [sl, #47]	; 0x2f
 8015d28:	f8da 8000 	ldr.w	r8, [sl]
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8015d2c:	f53f ad51 	bmi.w	80157d2 <dir_register+0x52>
 8015d30:	2301      	movs	r3, #1
 8015d32:	9303      	str	r3, [sp, #12]
 8015d34:	e555      	b.n	80157e2 <dir_register+0x62>
	ns[i] = '~';
 8015d36:	237e      	movs	r3, #126	; 0x7e
		ns[i--] = c;
 8015d38:	2502      	movs	r5, #2
	ns[i] = '~';
 8015d3a:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 8015d3e:	e7c9      	b.n	8015cd4 <dir_register+0x554>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8015d40:	2306      	movs	r3, #6
 8015d42:	9301      	str	r3, [sp, #4]
 8015d44:	e59d      	b.n	8015882 <dir_register+0x102>
	ns[i] = '~';
 8015d46:	237e      	movs	r3, #126	; 0x7e
		ns[i--] = c;
 8015d48:	2501      	movs	r5, #1
	ns[i] = '~';
 8015d4a:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 8015d4e:	e7c1      	b.n	8015cd4 <dir_register+0x554>
 8015d50:	227e      	movs	r2, #126	; 0x7e
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015d52:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
 8015d56:	2002      	movs	r0, #2
	ns[i] = '~';
 8015d58:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015d5c:	f88a 2024 	strb.w	r2, [sl, #36]	; 0x24
 8015d60:	4605      	mov	r5, r0
 8015d62:	f88a 1025 	strb.w	r1, [sl, #37]	; 0x25
 8015d66:	e746      	b.n	8015bf6 <dir_register+0x476>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8015d68:	2804      	cmp	r0, #4
 8015d6a:	f47f ad8a 	bne.w	8015882 <dir_register+0x102>
 8015d6e:	e79f      	b.n	8015cb0 <dir_register+0x530>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8015d70:	4630      	mov	r0, r6
 8015d72:	f7fe fc51 	bl	8014618 <get_fat.isra.8>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8015d76:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8015d78:	9005      	str	r0, [sp, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8015d7a:	f240 82b6 	bls.w	80162ea <dir_register+0xb6a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8015d7e:	1c43      	adds	r3, r0, #1
 8015d80:	d0c7      	beq.n	8015d12 <dir_register+0x592>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8015d82:	69b3      	ldr	r3, [r6, #24]
 8015d84:	4298      	cmp	r0, r3
 8015d86:	f0c0 8289 	bcc.w	801629c <dir_register+0xb1c>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8015d8a:	f8da 1018 	ldr.w	r1, [sl, #24]
 8015d8e:	4650      	mov	r0, sl
 8015d90:	f7fe fd68 	bl	8014864 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8015d94:	9005      	str	r0, [sp, #20]
 8015d96:	2800      	cmp	r0, #0
 8015d98:	d08a      	beq.n	8015cb0 <dir_register+0x530>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8015d9a:	2801      	cmp	r0, #1
 8015d9c:	f000 82a5 	beq.w	80162ea <dir_register+0xb6a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8015da0:	1c43      	adds	r3, r0, #1
 8015da2:	d0b6      	beq.n	8015d12 <dir_register+0x592>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8015da4:	78f3      	ldrb	r3, [r6, #3]
 8015da6:	f106 0734 	add.w	r7, r6, #52	; 0x34
 8015daa:	2b00      	cmp	r3, #0
 8015dac:	f040 82a3 	bne.w	80162f6 <dir_register+0xb76>
	clst -= 2;
 8015db0:	9b05      	ldr	r3, [sp, #20]
 8015db2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015db6:	2100      	movs	r1, #0
 8015db8:	4638      	mov	r0, r7
 8015dba:	3b02      	subs	r3, #2
 8015dbc:	9307      	str	r3, [sp, #28]
 8015dbe:	f007 fe96 	bl	801daee <memset>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8015dc2:	69b3      	ldr	r3, [r6, #24]
 8015dc4:	9807      	ldr	r0, [sp, #28]
 8015dc6:	1e99      	subs	r1, r3, #2
 8015dc8:	8972      	ldrh	r2, [r6, #10]
 8015dca:	4288      	cmp	r0, r1
 8015dcc:	f0c0 82bc 	bcc.w	8016348 <dir_register+0xbc8>
 8015dd0:	f04f 0900 	mov.w	r9, #0
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8015dd4:	f8c6 9030 	str.w	r9, [r6, #48]	; 0x30
 8015dd8:	2a00      	cmp	r2, #0
 8015dda:	f000 82b2 	beq.w	8016342 <dir_register+0xbc2>
 8015dde:	2300      	movs	r3, #0
 8015de0:	9409      	str	r4, [sp, #36]	; 0x24
 8015de2:	9306      	str	r3, [sp, #24]
						fs->wflag = 1;
 8015de4:	f04f 0301 	mov.w	r3, #1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8015de8:	464a      	mov	r2, r9
 8015dea:	4639      	mov	r1, r7
 8015dec:	7870      	ldrb	r0, [r6, #1]
						fs->wflag = 1;
 8015dee:	70f3      	strb	r3, [r6, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8015df0:	2301      	movs	r3, #1
 8015df2:	f7fd fd0f 	bl	8013814 <disk_write>
 8015df6:	2800      	cmp	r0, #0
 8015df8:	d18b      	bne.n	8015d12 <dir_register+0x592>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8015dfa:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8015dfc:	69f3      	ldr	r3, [r6, #28]
 8015dfe:	eba9 0202 	sub.w	r2, r9, r2
			fs->wflag = 0;
 8015e02:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8015e04:	429a      	cmp	r2, r3
 8015e06:	f080 825d 	bcs.w	80162c4 <dir_register+0xb44>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015e0a:	78b4      	ldrb	r4, [r6, #2]
 8015e0c:	2c01      	cmp	r4, #1
 8015e0e:	f240 8259 	bls.w	80162c4 <dir_register+0xb44>
					wsect += fs->fsize;
 8015e12:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015e14:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8015e16:	2301      	movs	r3, #1
 8015e18:	4639      	mov	r1, r7
 8015e1a:	464a      	mov	r2, r9
 8015e1c:	7870      	ldrb	r0, [r6, #1]
 8015e1e:	f7fd fcf9 	bl	8013814 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015e22:	2c01      	cmp	r4, #1
 8015e24:	f000 824e 	beq.w	80162c4 <dir_register+0xb44>
 8015e28:	69f3      	ldr	r3, [r6, #28]
 8015e2a:	e7f2      	b.n	8015e12 <dir_register+0x692>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015e2c:	f242 0020 	movw	r0, #8224	; 0x2020
 8015e30:	f10a 0126 	add.w	r1, sl, #38	; 0x26
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8015e34:	2300      	movs	r3, #0
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015e36:	2203      	movs	r2, #3
 8015e38:	f8aa 0024 	strh.w	r0, [sl, #36]	; 0x24
 8015e3c:	e664      	b.n	8015b08 <dir_register+0x388>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8015e3e:	461e      	mov	r6, r3
 8015e40:	e4b4      	b.n	80157ac <dir_register+0x2c>
 8015e42:	f8dd b020 	ldr.w	fp, [sp, #32]
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8015e46:	2d00      	cmp	r5, #0
 8015e48:	d16b      	bne.n	8015f22 <dir_register+0x7a2>
	if (sector != fs->winsect) {	/* Window offset changed? */
 8015e4a:	9b02      	ldr	r3, [sp, #8]
		res = move_window(fs, dp->sect);
 8015e4c:	f8da 601c 	ldr.w	r6, [sl, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8015e50:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8015e52:	461a      	mov	r2, r3
 8015e54:	42a6      	cmp	r6, r4
 8015e56:	d033      	beq.n	8015ec0 <dir_register+0x740>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8015e58:	461d      	mov	r5, r3
 8015e5a:	78db      	ldrb	r3, [r3, #3]
 8015e5c:	f102 0734 	add.w	r7, r2, #52	; 0x34
 8015e60:	7850      	ldrb	r0, [r2, #1]
 8015e62:	b32b      	cbz	r3, 8015eb0 <dir_register+0x730>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8015e64:	2301      	movs	r3, #1
 8015e66:	4622      	mov	r2, r4
 8015e68:	4639      	mov	r1, r7
 8015e6a:	f7fd fcd3 	bl	8013814 <disk_write>
 8015e6e:	2800      	cmp	r0, #0
 8015e70:	f47f af4f 	bne.w	8015d12 <dir_register+0x592>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8015e74:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8015e76:	4629      	mov	r1, r5
 8015e78:	69eb      	ldr	r3, [r5, #28]
 8015e7a:	1aa2      	subs	r2, r4, r2
			fs->wflag = 0;
 8015e7c:	70e8      	strb	r0, [r5, #3]
 8015e7e:	7868      	ldrb	r0, [r5, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8015e80:	429a      	cmp	r2, r3
 8015e82:	d215      	bcs.n	8015eb0 <dir_register+0x730>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015e84:	78ad      	ldrb	r5, [r5, #2]
 8015e86:	2d01      	cmp	r5, #1
 8015e88:	d912      	bls.n	8015eb0 <dir_register+0x730>
 8015e8a:	4688      	mov	r8, r1
					wsect += fs->fsize;
 8015e8c:	441c      	add	r4, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015e8e:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8015e90:	2301      	movs	r3, #1
 8015e92:	4639      	mov	r1, r7
 8015e94:	4622      	mov	r2, r4
 8015e96:	f7fd fcbd 	bl	8013814 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015e9a:	2d01      	cmp	r5, #1
 8015e9c:	d006      	beq.n	8015eac <dir_register+0x72c>
 8015e9e:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8015ea2:	f898 0001 	ldrb.w	r0, [r8, #1]
 8015ea6:	e7f1      	b.n	8015e8c <dir_register+0x70c>
 8015ea8:	001fffff 	.word	0x001fffff
 8015eac:	9b02      	ldr	r3, [sp, #8]
 8015eae:	7858      	ldrb	r0, [r3, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8015eb0:	4639      	mov	r1, r7
 8015eb2:	2301      	movs	r3, #1
 8015eb4:	4632      	mov	r2, r6
 8015eb6:	f7fd fc9f 	bl	80137f8 <disk_read>
 8015eba:	bb58      	cbnz	r0, 8015f14 <dir_register+0x794>
			fs->winsect = sector;
 8015ebc:	9b02      	ldr	r3, [sp, #8]
 8015ebe:	631e      	str	r6, [r3, #48]	; 0x30
 8015ec0:	2220      	movs	r2, #32
 8015ec2:	2100      	movs	r1, #0
 8015ec4:	f8da 0020 	ldr.w	r0, [sl, #32]
 8015ec8:	f007 fe11 	bl	801daee <memset>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8015ecc:	f8da 3020 	ldr.w	r3, [sl, #32]
 8015ed0:	f10a 0228 	add.w	r2, sl, #40	; 0x28
 8015ed4:	4293      	cmp	r3, r2
 8015ed6:	d203      	bcs.n	8015ee0 <dir_register+0x760>
 8015ed8:	1d1a      	adds	r2, r3, #4
 8015eda:	4593      	cmp	fp, r2
 8015edc:	f0c0 81c0 	bcc.w	8016260 <dir_register+0xae0>
			*d++ = *s++;
 8015ee0:	f8da 2024 	ldr.w	r2, [sl, #36]	; 0x24
 8015ee4:	601a      	str	r2, [r3, #0]
 8015ee6:	f8da 2028 	ldr.w	r2, [sl, #40]	; 0x28
 8015eea:	605a      	str	r2, [r3, #4]
 8015eec:	f89a 202c 	ldrb.w	r2, [sl, #44]	; 0x2c
 8015ef0:	721a      	strb	r2, [r3, #8]
 8015ef2:	f89a 202d 	ldrb.w	r2, [sl, #45]	; 0x2d
 8015ef6:	725a      	strb	r2, [r3, #9]
 8015ef8:	f89a 202e 	ldrb.w	r2, [sl, #46]	; 0x2e
 8015efc:	729a      	strb	r2, [r3, #10]
			fs->wflag = 1;
 8015efe:	2201      	movs	r2, #1
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8015f00:	f89a 302f 	ldrb.w	r3, [sl, #47]	; 0x2f
 8015f04:	f8da 1020 	ldr.w	r1, [sl, #32]
 8015f08:	f003 0318 	and.w	r3, r3, #24
 8015f0c:	730b      	strb	r3, [r1, #12]
			fs->wflag = 1;
 8015f0e:	9b02      	ldr	r3, [sp, #8]
 8015f10:	70da      	strb	r2, [r3, #3]
 8015f12:	e4b6      	b.n	8015882 <dir_register+0x102>
				res = FR_DISK_ERR;
 8015f14:	2201      	movs	r2, #1
			fs->winsect = sector;
 8015f16:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 8015f1a:	9201      	str	r2, [sp, #4]
			fs->winsect = sector;
 8015f1c:	9a02      	ldr	r2, [sp, #8]
 8015f1e:	6313      	str	r3, [r2, #48]	; 0x30
 8015f20:	e4af      	b.n	8015882 <dir_register+0x102>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8015f22:	f8da 1014 	ldr.w	r1, [sl, #20]
 8015f26:	4650      	mov	r0, sl
 8015f28:	eba1 1145 	sub.w	r1, r1, r5, lsl #5
 8015f2c:	f7fe f9dc 	bl	80142e8 <dir_sdi>
		if (res == FR_OK) {
 8015f30:	2800      	cmp	r0, #0
 8015f32:	f040 8192 	bne.w	801625a <dir_register+0xada>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8015f36:	f89a 2024 	ldrb.w	r2, [sl, #36]	; 0x24
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8015f3a:	f04f 0901 	mov.w	r9, #1
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8015f3e:	f89a 1025 	ldrb.w	r1, [sl, #37]	; 0x25
 8015f42:	01d3      	lsls	r3, r2, #7
 8015f44:	f89a 4026 	ldrb.w	r4, [sl, #38]	; 0x26
 8015f48:	f89a 0027 	ldrb.w	r0, [sl, #39]	; 0x27
 8015f4c:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 8015f50:	9e02      	ldr	r6, [sp, #8]
 8015f52:	f8cd b010 	str.w	fp, [sp, #16]
 8015f56:	185a      	adds	r2, r3, r1
 8015f58:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8015f5c:	f106 0834 	add.w	r8, r6, #52	; 0x34
 8015f60:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8015f64:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8015f68:	fa54 f283 	uxtab	r2, r4, r3
 8015f6c:	f89a 4029 	ldrb.w	r4, [sl, #41]	; 0x29
 8015f70:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8015f74:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8015f78:	fa50 f283 	uxtab	r2, r0, r3
 8015f7c:	f89a 002a 	ldrb.w	r0, [sl, #42]	; 0x2a
 8015f80:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8015f84:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8015f88:	fa51 f283 	uxtab	r2, r1, r3
 8015f8c:	f89a 102b 	ldrb.w	r1, [sl, #43]	; 0x2b
 8015f90:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8015f94:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8015f98:	fa54 f283 	uxtab	r2, r4, r3
 8015f9c:	f89a 402c 	ldrb.w	r4, [sl, #44]	; 0x2c
 8015fa0:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8015fa4:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8015fa8:	fa50 f283 	uxtab	r2, r0, r3
 8015fac:	f89a 002d 	ldrb.w	r0, [sl, #45]	; 0x2d
 8015fb0:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8015fb4:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8015fb8:	fa51 f283 	uxtab	r2, r1, r3
 8015fbc:	f89a 102e 	ldrb.w	r1, [sl, #46]	; 0x2e
 8015fc0:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8015fc4:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8015fc8:	fa54 f283 	uxtab	r2, r4, r3
 8015fcc:	4634      	mov	r4, r6
 8015fce:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8015fd2:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8015fd6:	fa50 f383 	uxtab	r3, r0, r3
 8015fda:	f3c3 0246 	ubfx	r2, r3, #1, #7
 8015fde:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
 8015fe2:	fa51 f183 	uxtab	r1, r1, r3
 8015fe6:	b2cb      	uxtb	r3, r1
 8015fe8:	9303      	str	r3, [sp, #12]
				res = move_window(fs, dp->sect);
 8015fea:	f8da b01c 	ldr.w	fp, [sl, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8015fee:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8015ff0:	45b3      	cmp	fp, r6
 8015ff2:	d01e      	beq.n	8016032 <dir_register+0x8b2>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8015ff4:	78e3      	ldrb	r3, [r4, #3]
 8015ff6:	7860      	ldrb	r0, [r4, #1]
 8015ff8:	b18b      	cbz	r3, 801601e <dir_register+0x89e>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8015ffa:	2301      	movs	r3, #1
 8015ffc:	4632      	mov	r2, r6
 8015ffe:	4641      	mov	r1, r8
 8016000:	f7fd fc08 	bl	8013814 <disk_write>
 8016004:	2800      	cmp	r0, #0
 8016006:	f47f ae84 	bne.w	8015d12 <dir_register+0x592>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801600a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801600c:	69e3      	ldr	r3, [r4, #28]
 801600e:	1ab2      	subs	r2, r6, r2
			fs->wflag = 0;
 8016010:	70e0      	strb	r0, [r4, #3]
 8016012:	7860      	ldrb	r0, [r4, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8016014:	429a      	cmp	r2, r3
 8016016:	d202      	bcs.n	801601e <dir_register+0x89e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8016018:	78a7      	ldrb	r7, [r4, #2]
 801601a:	2f01      	cmp	r7, #1
 801601c:	d85d      	bhi.n	80160da <dir_register+0x95a>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801601e:	2301      	movs	r3, #1
 8016020:	465a      	mov	r2, fp
 8016022:	4641      	mov	r1, r8
 8016024:	f7fd fbe8 	bl	80137f8 <disk_read>
 8016028:	2800      	cmp	r0, #0
 801602a:	f47f af73 	bne.w	8015f14 <dir_register+0x794>
			fs->winsect = sector;
 801602e:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8016032:	b2ee      	uxtb	r6, r5
 8016034:	f8da 3020 	ldr.w	r3, [sl, #32]
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8016038:	9f03      	ldr	r7, [sp, #12]
	dir[LDIR_Type] = 0;
 801603a:	2000      	movs	r0, #0
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801603c:	1e72      	subs	r2, r6, #1
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801603e:	68e1      	ldr	r1, [r4, #12]
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8016040:	735f      	strb	r7, [r3, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8016042:	f04f 0c0f 	mov.w	ip, #15
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8016046:	eb02 0742 	add.w	r7, r2, r2, lsl #1
	dir[LDIR_Type] = 0;
 801604a:	7318      	strb	r0, [r3, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 801604c:	7698      	strb	r0, [r3, #26]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801604e:	eb02 0287 	add.w	r2, r2, r7, lsl #2
	*ptr++ = (BYTE)val;
 8016052:	76d8      	strb	r0, [r3, #27]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8016054:	f883 c00b 	strb.w	ip, [r3, #11]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8016058:	f831 c012 	ldrh.w	ip, [r1, r2, lsl #1]
 801605c:	0057      	lsls	r7, r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 801605e:	ea4f 201c 	mov.w	r0, ip, lsr #8
 8016062:	f883 c001 	strb.w	ip, [r3, #1]
	*ptr++ = (BYTE)val;
 8016066:	7098      	strb	r0, [r3, #2]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8016068:	f1bc 0f00 	cmp.w	ip, #0
 801606c:	d140      	bne.n	80160f0 <dir_register+0x970>
	*ptr++ = (BYTE)val; val >>= 8;
 801606e:	22ff      	movs	r2, #255	; 0xff
 8016070:	70da      	strb	r2, [r3, #3]
	*ptr++ = (BYTE)val;
 8016072:	711a      	strb	r2, [r3, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8016074:	22ff      	movs	r2, #255	; 0xff
 8016076:	715a      	strb	r2, [r3, #5]
	*ptr++ = (BYTE)val;
 8016078:	719a      	strb	r2, [r3, #6]
	*ptr++ = (BYTE)val; val >>= 8;
 801607a:	22ff      	movs	r2, #255	; 0xff
 801607c:	71da      	strb	r2, [r3, #7]
	*ptr++ = (BYTE)val;
 801607e:	721a      	strb	r2, [r3, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 8016080:	22ff      	movs	r2, #255	; 0xff
 8016082:	725a      	strb	r2, [r3, #9]
	*ptr++ = (BYTE)val;
 8016084:	729a      	strb	r2, [r3, #10]
	*ptr++ = (BYTE)val; val >>= 8;
 8016086:	22ff      	movs	r2, #255	; 0xff
 8016088:	739a      	strb	r2, [r3, #14]
	*ptr++ = (BYTE)val;
 801608a:	73da      	strb	r2, [r3, #15]
	*ptr++ = (BYTE)val; val >>= 8;
 801608c:	22ff      	movs	r2, #255	; 0xff
 801608e:	741a      	strb	r2, [r3, #16]
	*ptr++ = (BYTE)val;
 8016090:	745a      	strb	r2, [r3, #17]
	*ptr++ = (BYTE)val; val >>= 8;
 8016092:	22ff      	movs	r2, #255	; 0xff
 8016094:	749a      	strb	r2, [r3, #18]
	*ptr++ = (BYTE)val;
 8016096:	74da      	strb	r2, [r3, #19]
	*ptr++ = (BYTE)val; val >>= 8;
 8016098:	22ff      	movs	r2, #255	; 0xff
 801609a:	751a      	strb	r2, [r3, #20]
	*ptr++ = (BYTE)val;
 801609c:	755a      	strb	r2, [r3, #21]
	*ptr++ = (BYTE)val; val >>= 8;
 801609e:	22ff      	movs	r2, #255	; 0xff
 80160a0:	759a      	strb	r2, [r3, #22]
	*ptr++ = (BYTE)val;
 80160a2:	75da      	strb	r2, [r3, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 80160a4:	22ff      	movs	r2, #255	; 0xff
 80160a6:	761a      	strb	r2, [r3, #24]
	*ptr++ = (BYTE)val;
 80160a8:	765a      	strb	r2, [r3, #25]
	*ptr++ = (BYTE)val; val >>= 8;
 80160aa:	22ff      	movs	r2, #255	; 0xff
 80160ac:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val;
 80160ae:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 80160b0:	22ff      	movs	r2, #255	; 0xff
 80160b2:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 80160b4:	77da      	strb	r2, [r3, #31]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80160b6:	f046 0640 	orr.w	r6, r6, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80160ba:	701e      	strb	r6, [r3, #0]
				res = dir_next(dp, 0);	/* Next entry */
 80160bc:	4650      	mov	r0, sl
				fs->wflag = 1;
 80160be:	f884 9003 	strb.w	r9, [r4, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80160c2:	f7fe fd87 	bl	8014bd4 <dir_next.constprop.16>
			} while (res == FR_OK && --nent);
 80160c6:	2800      	cmp	r0, #0
 80160c8:	f040 80c7 	bne.w	801625a <dir_register+0xada>
 80160cc:	3d01      	subs	r5, #1
 80160ce:	d18c      	bne.n	8015fea <dir_register+0x86a>
 80160d0:	f8dd b010 	ldr.w	fp, [sp, #16]
 80160d4:	e6b9      	b.n	8015e4a <dir_register+0x6ca>
 80160d6:	69e3      	ldr	r3, [r4, #28]
 80160d8:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 80160da:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80160dc:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 80160de:	2301      	movs	r3, #1
 80160e0:	4641      	mov	r1, r8
 80160e2:	4632      	mov	r2, r6
 80160e4:	f7fd fb96 	bl	8013814 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80160e8:	2f01      	cmp	r7, #1
 80160ea:	d1f4      	bne.n	80160d6 <dir_register+0x956>
 80160ec:	7860      	ldrb	r0, [r4, #1]
 80160ee:	e796      	b.n	801601e <dir_register+0x89e>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80160f0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80160f4:	4584      	cmp	ip, r0
 80160f6:	d0ba      	beq.n	801606e <dir_register+0x8ee>
 80160f8:	3201      	adds	r2, #1
 80160fa:	f831 c012 	ldrh.w	ip, [r1, r2, lsl #1]
 80160fe:	0052      	lsls	r2, r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8016100:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8016104:	f883 c003 	strb.w	ip, [r3, #3]
	*ptr++ = (BYTE)val;
 8016108:	f883 e004 	strb.w	lr, [r3, #4]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801610c:	f1bc 0f00 	cmp.w	ip, #0
 8016110:	d0b0      	beq.n	8016074 <dir_register+0x8f4>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8016112:	4584      	cmp	ip, r0
 8016114:	d0ae      	beq.n	8016074 <dir_register+0x8f4>
 8016116:	440a      	add	r2, r1
 8016118:	f8b2 c002 	ldrh.w	ip, [r2, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801611c:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8016120:	f883 c005 	strb.w	ip, [r3, #5]
	*ptr++ = (BYTE)val;
 8016124:	f883 e006 	strb.w	lr, [r3, #6]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8016128:	f1bc 0f00 	cmp.w	ip, #0
 801612c:	d0a5      	beq.n	801607a <dir_register+0x8fa>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801612e:	4584      	cmp	ip, r0
 8016130:	d0a3      	beq.n	801607a <dir_register+0x8fa>
 8016132:	f8b2 c004 	ldrh.w	ip, [r2, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8016136:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801613a:	f883 c007 	strb.w	ip, [r3, #7]
	*ptr++ = (BYTE)val;
 801613e:	f883 e008 	strb.w	lr, [r3, #8]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8016142:	f1bc 0f00 	cmp.w	ip, #0
 8016146:	d09b      	beq.n	8016080 <dir_register+0x900>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8016148:	4584      	cmp	ip, r0
 801614a:	d099      	beq.n	8016080 <dir_register+0x900>
 801614c:	f8b2 c006 	ldrh.w	ip, [r2, #6]
	*ptr++ = (BYTE)val; val >>= 8;
 8016150:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8016154:	f883 c009 	strb.w	ip, [r3, #9]
	*ptr++ = (BYTE)val;
 8016158:	f883 e00a 	strb.w	lr, [r3, #10]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801615c:	f1bc 0f00 	cmp.w	ip, #0
 8016160:	d091      	beq.n	8016086 <dir_register+0x906>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8016162:	4584      	cmp	ip, r0
 8016164:	d08f      	beq.n	8016086 <dir_register+0x906>
 8016166:	f8b2 c008 	ldrh.w	ip, [r2, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 801616a:	ea4f 201c 	mov.w	r0, ip, lsr #8
 801616e:	f883 c00e 	strb.w	ip, [r3, #14]
	*ptr++ = (BYTE)val;
 8016172:	73d8      	strb	r0, [r3, #15]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8016174:	f1bc 0f00 	cmp.w	ip, #0
 8016178:	d088      	beq.n	801608c <dir_register+0x90c>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801617a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801617e:	4584      	cmp	ip, r0
 8016180:	d084      	beq.n	801608c <dir_register+0x90c>
 8016182:	f8b2 c00a 	ldrh.w	ip, [r2, #10]
	*ptr++ = (BYTE)val; val >>= 8;
 8016186:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801618a:	f883 c010 	strb.w	ip, [r3, #16]
	*ptr++ = (BYTE)val;
 801618e:	f883 e011 	strb.w	lr, [r3, #17]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8016192:	f1bc 0f00 	cmp.w	ip, #0
 8016196:	f43f af7c 	beq.w	8016092 <dir_register+0x912>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801619a:	4584      	cmp	ip, r0
 801619c:	f43f af79 	beq.w	8016092 <dir_register+0x912>
 80161a0:	f8b2 c00c 	ldrh.w	ip, [r2, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 80161a4:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80161a8:	f883 c012 	strb.w	ip, [r3, #18]
	*ptr++ = (BYTE)val;
 80161ac:	f883 e013 	strb.w	lr, [r3, #19]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80161b0:	f1bc 0f00 	cmp.w	ip, #0
 80161b4:	f43f af70 	beq.w	8016098 <dir_register+0x918>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80161b8:	4584      	cmp	ip, r0
 80161ba:	f43f af6d 	beq.w	8016098 <dir_register+0x918>
 80161be:	f8b2 c00e 	ldrh.w	ip, [r2, #14]
	*ptr++ = (BYTE)val; val >>= 8;
 80161c2:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80161c6:	f883 c014 	strb.w	ip, [r3, #20]
	*ptr++ = (BYTE)val;
 80161ca:	f883 e015 	strb.w	lr, [r3, #21]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80161ce:	f1bc 0f00 	cmp.w	ip, #0
 80161d2:	f43f af64 	beq.w	801609e <dir_register+0x91e>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80161d6:	4584      	cmp	ip, r0
 80161d8:	f43f af61 	beq.w	801609e <dir_register+0x91e>
 80161dc:	f8b2 c010 	ldrh.w	ip, [r2, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 80161e0:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80161e4:	f883 c016 	strb.w	ip, [r3, #22]
	*ptr++ = (BYTE)val;
 80161e8:	f883 e017 	strb.w	lr, [r3, #23]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80161ec:	f1bc 0f00 	cmp.w	ip, #0
 80161f0:	f43f af58 	beq.w	80160a4 <dir_register+0x924>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80161f4:	4584      	cmp	ip, r0
 80161f6:	f43f af55 	beq.w	80160a4 <dir_register+0x924>
 80161fa:	8a50      	ldrh	r0, [r2, #18]
	*ptr++ = (BYTE)val; val >>= 8;
 80161fc:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 8016200:	7618      	strb	r0, [r3, #24]
	*ptr++ = (BYTE)val;
 8016202:	f883 c019 	strb.w	ip, [r3, #25]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8016206:	2800      	cmp	r0, #0
 8016208:	f43f af4f 	beq.w	80160aa <dir_register+0x92a>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801620c:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8016210:	4560      	cmp	r0, ip
 8016212:	f43f af4a 	beq.w	80160aa <dir_register+0x92a>
 8016216:	8a90      	ldrh	r0, [r2, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 8016218:	ea4f 2e10 	mov.w	lr, r0, lsr #8
 801621c:	7718      	strb	r0, [r3, #28]
	*ptr++ = (BYTE)val;
 801621e:	f883 e01d 	strb.w	lr, [r3, #29]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8016222:	2800      	cmp	r0, #0
 8016224:	f43f af44 	beq.w	80160b0 <dir_register+0x930>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8016228:	4560      	cmp	r0, ip
 801622a:	f43f af41 	beq.w	80160b0 <dir_register+0x930>
 801622e:	f8b2 e016 	ldrh.w	lr, [r2, #22]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8016232:	f64f 70fd 	movw	r0, #65533	; 0xfffd
 8016236:	f10e 32ff 	add.w	r2, lr, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 801623a:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801623e:	f883 e01e 	strb.w	lr, [r3, #30]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8016242:	b292      	uxth	r2, r2
	*ptr++ = (BYTE)val;
 8016244:	f883 c01f 	strb.w	ip, [r3, #31]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8016248:	4282      	cmp	r2, r0
 801624a:	f63f af34 	bhi.w	80160b6 <dir_register+0x936>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 801624e:	4439      	add	r1, r7
 8016250:	8b4a      	ldrh	r2, [r1, #26]
 8016252:	2a00      	cmp	r2, #0
 8016254:	f43f af2f 	beq.w	80160b6 <dir_register+0x936>
 8016258:	e72f      	b.n	80160ba <dir_register+0x93a>
 801625a:	9001      	str	r0, [sp, #4]
 801625c:	f7ff bb11 	b.w	8015882 <dir_register+0x102>
			*d++ = *s++;
 8016260:	f89a 2024 	ldrb.w	r2, [sl, #36]	; 0x24
 8016264:	701a      	strb	r2, [r3, #0]
 8016266:	f89a 2025 	ldrb.w	r2, [sl, #37]	; 0x25
 801626a:	705a      	strb	r2, [r3, #1]
 801626c:	f89a 2026 	ldrb.w	r2, [sl, #38]	; 0x26
 8016270:	709a      	strb	r2, [r3, #2]
 8016272:	f89a 2027 	ldrb.w	r2, [sl, #39]	; 0x27
 8016276:	70da      	strb	r2, [r3, #3]
 8016278:	f89a 2028 	ldrb.w	r2, [sl, #40]	; 0x28
 801627c:	711a      	strb	r2, [r3, #4]
 801627e:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
 8016282:	715a      	strb	r2, [r3, #5]
 8016284:	f89a 202a 	ldrb.w	r2, [sl, #42]	; 0x2a
 8016288:	719a      	strb	r2, [r3, #6]
 801628a:	f89a 202b 	ldrb.w	r2, [sl, #43]	; 0x2b
 801628e:	71da      	strb	r2, [r3, #7]
 8016290:	e62c      	b.n	8015eec <dir_register+0x76c>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8016292:	f88a 3024 	strb.w	r3, [sl, #36]	; 0x24
 8016296:	2107      	movs	r1, #7
		ns[i--] = c;
 8016298:	2506      	movs	r5, #6
 801629a:	e522      	b.n	8015ce2 <dir_register+0x562>
 801629c:	1e82      	subs	r2, r0, #2
 801629e:	f106 0734 	add.w	r7, r6, #52	; 0x34
 80162a2:	4611      	mov	r1, r2
 80162a4:	9207      	str	r2, [sp, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80162a6:	3b02      	subs	r3, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 80162a8:	9a05      	ldr	r2, [sp, #20]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80162aa:	4299      	cmp	r1, r3
				dp->clust = clst;		/* Initialize data for new cluster */
 80162ac:	f8ca 2018 	str.w	r2, [sl, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80162b0:	d21f      	bcs.n	80162f2 <dir_register+0xb72>
	return clst * fs->csize + fs->database;
 80162b2:	8972      	ldrh	r2, [r6, #10]
 80162b4:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80162b6:	fb01 3302 	mla	r3, r1, r2, r3
 80162ba:	f8d8 9030 	ldr.w	r9, [r8, #48]	; 0x30
				dp->sect = clust2sect(fs, clst);
 80162be:	f8ca 301c 	str.w	r3, [sl, #28]
 80162c2:	e47a      	b.n	8015bba <dir_register+0x43a>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80162c4:	9b06      	ldr	r3, [sp, #24]
 80162c6:	6b32      	ldr	r2, [r6, #48]	; 0x30
 80162c8:	3301      	adds	r3, #1
 80162ca:	3201      	adds	r2, #1
 80162cc:	4619      	mov	r1, r3
 80162ce:	9306      	str	r3, [sp, #24]
 80162d0:	8973      	ldrh	r3, [r6, #10]
 80162d2:	4691      	mov	r9, r2
 80162d4:	6332      	str	r2, [r6, #48]	; 0x30
 80162d6:	4299      	cmp	r1, r3
 80162d8:	f4ff ad84 	bcc.w	8015de4 <dir_register+0x664>
 80162dc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80162de:	69b3      	ldr	r3, [r6, #24]
					fs->winsect -= n;							/* Restore window offset */
 80162e0:	9906      	ldr	r1, [sp, #24]
 80162e2:	1a52      	subs	r2, r2, r1
 80162e4:	9907      	ldr	r1, [sp, #28]
 80162e6:	6332      	str	r2, [r6, #48]	; 0x30
 80162e8:	e7dd      	b.n	80162a6 <dir_register+0xb26>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80162ea:	2302      	movs	r3, #2
 80162ec:	9301      	str	r3, [sp, #4]
 80162ee:	f7ff bac8 	b.w	8015882 <dir_register+0x102>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80162f2:	2300      	movs	r3, #0
 80162f4:	e7e1      	b.n	80162ba <dir_register+0xb3a>
		wsect = fs->winsect;	/* Current sector number */
 80162f6:	f8d6 9030 	ldr.w	r9, [r6, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80162fa:	2301      	movs	r3, #1
 80162fc:	4639      	mov	r1, r7
 80162fe:	7870      	ldrb	r0, [r6, #1]
 8016300:	464a      	mov	r2, r9
 8016302:	f7fd fa87 	bl	8013814 <disk_write>
 8016306:	2800      	cmp	r0, #0
 8016308:	f47f ad03 	bne.w	8015d12 <dir_register+0x592>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801630c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801630e:	69f2      	ldr	r2, [r6, #28]
 8016310:	eba9 0303 	sub.w	r3, r9, r3
			fs->wflag = 0;
 8016314:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8016316:	4293      	cmp	r3, r2
 8016318:	f4bf ad4a 	bcs.w	8015db0 <dir_register+0x630>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801631c:	78b3      	ldrb	r3, [r6, #2]
 801631e:	9306      	str	r3, [sp, #24]
 8016320:	9b06      	ldr	r3, [sp, #24]
					disk_write(fs->drv, fs->win, wsect, 1);
 8016322:	4639      	mov	r1, r7
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8016324:	2b01      	cmp	r3, #1
 8016326:	f103 33ff 	add.w	r3, r3, #4294967295
 801632a:	9306      	str	r3, [sp, #24]
					disk_write(fs->drv, fs->win, wsect, 1);
 801632c:	f04f 0301 	mov.w	r3, #1
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8016330:	f67f ad3e 	bls.w	8015db0 <dir_register+0x630>
					wsect += fs->fsize;
 8016334:	69f2      	ldr	r2, [r6, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 8016336:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 8016338:	4491      	add	r9, r2
					disk_write(fs->drv, fs->win, wsect, 1);
 801633a:	464a      	mov	r2, r9
 801633c:	f7fd fa6a 	bl	8013814 <disk_write>
 8016340:	e7ee      	b.n	8016320 <dir_register+0xba0>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8016342:	9206      	str	r2, [sp, #24]
 8016344:	464a      	mov	r2, r9
 8016346:	e7cb      	b.n	80162e0 <dir_register+0xb60>
	return clst * fs->csize + fs->database;
 8016348:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 801634a:	9807      	ldr	r0, [sp, #28]
 801634c:	fb02 1900 	mla	r9, r2, r0, r1
 8016350:	e540      	b.n	8015dd4 <dir_register+0x654>
 8016352:	bf00      	nop

08016354 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8016354:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8016358:	2300      	movs	r3, #0
	if (*path) {	/* If the pointer is not a null */
 801635a:	6805      	ldr	r5, [r0, #0]
{
 801635c:	b085      	sub	sp, #20
	*rfs = 0;
 801635e:	600b      	str	r3, [r1, #0]
	if (*path) {	/* If the pointer is not a null */
 8016360:	2d00      	cmp	r5, #0
 8016362:	f000 828a 	beq.w	801687a <find_volume+0x526>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8016366:	782e      	ldrb	r6, [r5, #0]
 8016368:	2e1f      	cmp	r6, #31
 801636a:	f240 81d8 	bls.w	801671e <find_volume+0x3ca>
 801636e:	2e3a      	cmp	r6, #58	; 0x3a
 8016370:	f000 81d5 	beq.w	801671e <find_volume+0x3ca>
 8016374:	462c      	mov	r4, r5
 8016376:	e001      	b.n	801637c <find_volume+0x28>
 8016378:	2b3a      	cmp	r3, #58	; 0x3a
 801637a:	d003      	beq.n	8016384 <find_volume+0x30>
 801637c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8016380:	2b1f      	cmp	r3, #31
 8016382:	d8f9      	bhi.n	8016378 <find_volume+0x24>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8016384:	2b3a      	cmp	r3, #58	; 0x3a
 8016386:	f000 8119 	beq.w	80165bc <find_volume+0x268>
		vol = 0;		/* Drive 0 */
 801638a:	2600      	movs	r6, #0
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801638c:	4bc2      	ldr	r3, [pc, #776]	; (8016698 <find_volume+0x344>)
 801638e:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8016392:	2c00      	cmp	r4, #0
 8016394:	f000 8122 	beq.w	80165dc <find_volume+0x288>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8016398:	600c      	str	r4, [r1, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801639a:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 801639e:	7823      	ldrb	r3, [r4, #0]
 80163a0:	b173      	cbz	r3, 80163c0 <find_volume+0x6c>
		stat = disk_status(fs->drv);
 80163a2:	7860      	ldrb	r0, [r4, #1]
 80163a4:	f7fd fa0a 	bl	80137bc <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80163a8:	07c1      	lsls	r1, r0, #31
 80163aa:	d409      	bmi.n	80163c0 <find_volume+0x6c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80163ac:	2d00      	cmp	r5, #0
 80163ae:	f000 8103 	beq.w	80165b8 <find_volume+0x264>
 80163b2:	f010 0004 	ands.w	r0, r0, #4
 80163b6:	f040 811e 	bne.w	80165f6 <find_volume+0x2a2>
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 80163ba:	b005      	add	sp, #20
 80163bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80163c0:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 80163c2:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80163c4:	7060      	strb	r0, [r4, #1]
	fs->fs_type = 0;					/* Clear the file system object */
 80163c6:	7023      	strb	r3, [r4, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80163c8:	f7fd fa02 	bl	80137d0 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80163cc:	07c2      	lsls	r2, r0, #31
 80163ce:	f100 8109 	bmi.w	80165e4 <find_volume+0x290>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80163d2:	b115      	cbz	r5, 80163da <find_volume+0x86>
 80163d4:	0743      	lsls	r3, r0, #29
 80163d6:	f100 810e 	bmi.w	80165f6 <find_volume+0x2a2>
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80163da:	2200      	movs	r2, #0
 80163dc:	f04f 35ff 	mov.w	r5, #4294967295
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80163e0:	f104 0634 	add.w	r6, r4, #52	; 0x34
 80163e4:	2301      	movs	r3, #1
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80163e6:	70e2      	strb	r2, [r4, #3]
 80163e8:	6325      	str	r5, [r4, #48]	; 0x30
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80163ea:	4631      	mov	r1, r6
 80163ec:	7860      	ldrb	r0, [r4, #1]
 80163ee:	f7fd fa03 	bl	80137f8 <disk_read>
 80163f2:	2800      	cmp	r0, #0
 80163f4:	f040 80fa 	bne.w	80165ec <find_volume+0x298>
	rv = rv << 8 | ptr[0];
 80163f8:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80163fc:	f64a 2155 	movw	r1, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
 8016400:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
			fs->winsect = sector;
 8016404:	6320      	str	r0, [r4, #48]	; 0x30
	rv = rv << 8 | ptr[0];
 8016406:	ea43 2002 	orr.w	r0, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801640a:	4288      	cmp	r0, r1
 801640c:	f040 8183 	bne.w	8016716 <find_volume+0x3c2>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8016410:	f894 7034 	ldrb.w	r7, [r4, #52]	; 0x34
 8016414:	2fe9      	cmp	r7, #233	; 0xe9
 8016416:	d006      	beq.n	8016426 <find_volume+0xd2>
 8016418:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801641a:	48a0      	ldr	r0, [pc, #640]	; (801669c <find_volume+0x348>)
 801641c:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8016420:	4281      	cmp	r1, r0
 8016422:	f040 80ec 	bne.w	80165fe <find_volume+0x2aa>
	rv = rv << 8 | ptr[2];
 8016426:	f8b4 506c 	ldrh.w	r5, [r4, #108]	; 0x6c
	rv = rv << 8 | ptr[1];
 801642a:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
	rv = rv << 8 | ptr[0];
 801642e:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
	rv = rv << 8 | ptr[1];
 8016432:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8016436:	4d9a      	ldr	r5, [pc, #616]	; (80166a0 <find_volume+0x34c>)
	rv = rv << 8 | ptr[0];
 8016438:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801643c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8016440:	42a9      	cmp	r1, r5
 8016442:	d00d      	beq.n	8016460 <find_volume+0x10c>
	rv = rv << 8 | ptr[2];
 8016444:	f8b4 5088 	ldrh.w	r5, [r4, #136]	; 0x88
	rv = rv << 8 | ptr[1];
 8016448:	f894 0087 	ldrb.w	r0, [r4, #135]	; 0x87
	rv = rv << 8 | ptr[0];
 801644c:	f894 1086 	ldrb.w	r1, [r4, #134]	; 0x86
	rv = rv << 8 | ptr[1];
 8016450:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8016454:	4d93      	ldr	r5, [pc, #588]	; (80166a4 <find_volume+0x350>)
	rv = rv << 8 | ptr[0];
 8016456:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801645a:	42a9      	cmp	r1, r5
 801645c:	f040 80cf 	bne.w	80165fe <find_volume+0x2aa>
	bsect = 0;
 8016460:	2500      	movs	r5, #0
	rv = rv << 8 | ptr[0];
 8016462:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8016466:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
 801646a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801646e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8016472:	f040 8150 	bne.w	8016716 <find_volume+0x3c2>
	rv = rv << 8 | ptr[0];
 8016476:	f894 004b 	ldrb.w	r0, [r4, #75]	; 0x4b
 801647a:	f894 104a 	ldrb.w	r1, [r4, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801647e:	ea51 2100 	orrs.w	r1, r1, r0, lsl #8
 8016482:	d109      	bne.n	8016498 <find_volume+0x144>
	rv = rv << 8 | ptr[2];
 8016484:	f8b4 605a 	ldrh.w	r6, [r4, #90]	; 0x5a
	rv = rv << 8 | ptr[1];
 8016488:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
	rv = rv << 8 | ptr[0];
 801648c:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
	rv = rv << 8 | ptr[1];
 8016490:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
	rv = rv << 8 | ptr[0];
 8016494:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8016498:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
		fs->fsize = fasize;
 801649c:	61e1      	str	r1, [r4, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801649e:	1e70      	subs	r0, r6, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80164a0:	70a6      	strb	r6, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80164a2:	2801      	cmp	r0, #1
 80164a4:	f200 8137 	bhi.w	8016716 <find_volume+0x3c2>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80164a8:	f894 e041 	ldrb.w	lr, [r4, #65]	; 0x41
 80164ac:	fa1f f08e 	uxth.w	r0, lr
 80164b0:	8160      	strh	r0, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80164b2:	2800      	cmp	r0, #0
 80164b4:	f000 812f 	beq.w	8016716 <find_volume+0x3c2>
 80164b8:	f10e 30ff 	add.w	r0, lr, #4294967295
 80164bc:	ea10 0f0e 	tst.w	r0, lr
 80164c0:	f040 8129 	bne.w	8016716 <find_volume+0x3c2>
	rv = rv << 8 | ptr[0];
 80164c4:	f894 0046 	ldrb.w	r0, [r4, #70]	; 0x46
 80164c8:	f894 c045 	ldrb.w	ip, [r4, #69]	; 0x45
 80164cc:	ea4c 2c00 	orr.w	ip, ip, r0, lsl #8
 80164d0:	fa0f fc8c 	sxth.w	ip, ip
 80164d4:	fa1f f88c 	uxth.w	r8, ip
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80164d8:	f018 0f0f 	tst.w	r8, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80164dc:	f8a4 8008 	strh.w	r8, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80164e0:	f040 8119 	bne.w	8016716 <find_volume+0x3c2>
	rv = rv << 8 | ptr[0];
 80164e4:	f894 7048 	ldrb.w	r7, [r4, #72]	; 0x48
 80164e8:	f894 0047 	ldrb.w	r0, [r4, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80164ec:	ea50 2007 	orrs.w	r0, r0, r7, lsl #8
 80164f0:	d109      	bne.n	8016506 <find_volume+0x1b2>
	rv = rv << 8 | ptr[2];
 80164f2:	f8b4 9056 	ldrh.w	r9, [r4, #86]	; 0x56
	rv = rv << 8 | ptr[1];
 80164f6:	f894 0055 	ldrb.w	r0, [r4, #85]	; 0x55
	rv = rv << 8 | ptr[0];
 80164fa:	f894 7054 	ldrb.w	r7, [r4, #84]	; 0x54
	rv = rv << 8 | ptr[1];
 80164fe:	ea40 2009 	orr.w	r0, r0, r9, lsl #8
	rv = rv << 8 | ptr[0];
 8016502:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
	rv = rv << 8 | ptr[0];
 8016506:	f894 9043 	ldrb.w	r9, [r4, #67]	; 0x43
 801650a:	f894 7042 	ldrb.w	r7, [r4, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801650e:	ea57 2709 	orrs.w	r7, r7, r9, lsl #8
 8016512:	f000 8100 	beq.w	8016716 <find_volume+0x3c2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8016516:	fb01 f606 	mul.w	r6, r1, r6
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801651a:	eb07 1918 	add.w	r9, r7, r8, lsr #4
 801651e:	44b1      	add	r9, r6
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8016520:	4548      	cmp	r0, r9
 8016522:	f0c0 80f8 	bcc.w	8016716 <find_volume+0x3c2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8016526:	eba0 0009 	sub.w	r0, r0, r9
 801652a:	fbb0 f0fe 	udiv	r0, r0, lr
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801652e:	2800      	cmp	r0, #0
 8016530:	f000 80f1 	beq.w	8016716 <find_volume+0x3c2>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8016534:	f64f 7ef5 	movw	lr, #65525	; 0xfff5
 8016538:	4570      	cmp	r0, lr
 801653a:	f200 81da 	bhi.w	80168f2 <find_volume+0x59e>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801653e:	f640 7cf5 	movw	ip, #4085	; 0xff5
 8016542:	442f      	add	r7, r5
 8016544:	eb09 0205 	add.w	r2, r9, r5
 8016548:	1c83      	adds	r3, r0, #2
 801654a:	4560      	cmp	r0, ip
 801654c:	f240 8207 	bls.w	801695e <find_volume+0x60a>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8016550:	61a3      	str	r3, [r4, #24]
		fs->database = bsect + sysect;					/* Data start sector */
 8016552:	62e2      	str	r2, [r4, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8016554:	e9c4 5708 	strd	r5, r7, [r4, #32]
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8016558:	f1b8 0f00 	cmp.w	r8, #0
 801655c:	f000 80db 	beq.w	8016716 <find_volume+0x3c2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8016560:	443e      	add	r6, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8016562:	005b      	lsls	r3, r3, #1
 8016564:	2002      	movs	r0, #2
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8016566:	62a6      	str	r6, [r4, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8016568:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 801656c:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
 8016570:	f0c0 80d1 	bcc.w	8016716 <find_volume+0x3c2>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8016574:	f04f 33ff 	mov.w	r3, #4294967295
		fs->fsi_flag = 0x80;
 8016578:	2280      	movs	r2, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801657a:	e9c4 3304 	strd	r3, r3, [r4, #16]
		fs->fsi_flag = 0x80;
 801657e:	7122      	strb	r2, [r4, #4]
	fs->id = ++Fsid;		/* File system mount ID */
 8016580:	4949      	ldr	r1, [pc, #292]	; (80166a8 <find_volume+0x354>)
		if (Files[i].fs == fs) Files[i].fs = 0;
 8016582:	4b4a      	ldr	r3, [pc, #296]	; (80166ac <find_volume+0x358>)
	fs->id = ++Fsid;		/* File system mount ID */
 8016584:	880a      	ldrh	r2, [r1, #0]
	fs->fs_type = fmt;		/* FAT sub-type */
 8016586:	7020      	strb	r0, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8016588:	3201      	adds	r2, #1
		if (Files[i].fs == fs) Files[i].fs = 0;
 801658a:	6818      	ldr	r0, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801658c:	b292      	uxth	r2, r2
		if (Files[i].fs == fs) Files[i].fs = 0;
 801658e:	4284      	cmp	r4, r0
	fs->id = ++Fsid;		/* File system mount ID */
 8016590:	800a      	strh	r2, [r1, #0]
 8016592:	80e2      	strh	r2, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 8016594:	d101      	bne.n	801659a <find_volume+0x246>
 8016596:	2200      	movs	r2, #0
 8016598:	601a      	str	r2, [r3, #0]
 801659a:	691a      	ldr	r2, [r3, #16]
 801659c:	4294      	cmp	r4, r2
 801659e:	d101      	bne.n	80165a4 <find_volume+0x250>
 80165a0:	2200      	movs	r2, #0
 80165a2:	611a      	str	r2, [r3, #16]
 80165a4:	6a1a      	ldr	r2, [r3, #32]
 80165a6:	4294      	cmp	r4, r2
 80165a8:	d101      	bne.n	80165ae <find_volume+0x25a>
 80165aa:	2200      	movs	r2, #0
 80165ac:	621a      	str	r2, [r3, #32]
 80165ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80165b0:	4294      	cmp	r4, r2
 80165b2:	d101      	bne.n	80165b8 <find_volume+0x264>
 80165b4:	2200      	movs	r2, #0
 80165b6:	631a      	str	r2, [r3, #48]	; 0x30
	return FR_OK;
 80165b8:	2000      	movs	r0, #0
 80165ba:	e6fe      	b.n	80163ba <find_volume+0x66>
			i = *tp++ - '0';
 80165bc:	3501      	adds	r5, #1
 80165be:	3e30      	subs	r6, #48	; 0x30
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80165c0:	42ac      	cmp	r4, r5
 80165c2:	f040 815a 	bne.w	801687a <find_volume+0x526>
 80165c6:	2e01      	cmp	r6, #1
 80165c8:	f200 8157 	bhi.w	801687a <find_volume+0x526>
					*path = ++tt;
 80165cc:	3401      	adds	r4, #1
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80165ce:	4b32      	ldr	r3, [pc, #200]	; (8016698 <find_volume+0x344>)
					*path = ++tt;
 80165d0:	6004      	str	r4, [r0, #0]
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80165d2:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80165d6:	2c00      	cmp	r4, #0
 80165d8:	f47f aede 	bne.w	8016398 <find_volume+0x44>
 80165dc:	200c      	movs	r0, #12
}
 80165de:	b005      	add	sp, #20
 80165e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80165e4:	2003      	movs	r0, #3
}
 80165e6:	b005      	add	sp, #20
 80165e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80165ec:	2001      	movs	r0, #1
			fs->winsect = sector;
 80165ee:	6325      	str	r5, [r4, #48]	; 0x30
}
 80165f0:	b005      	add	sp, #20
 80165f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				return FR_WRITE_PROTECTED;
 80165f6:	200a      	movs	r0, #10
}
 80165f8:	b005      	add	sp, #20
 80165fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80165fe:	f894 51f6 	ldrb.w	r5, [r4, #502]	; 0x1f6
 8016602:	b14d      	cbz	r5, 8016618 <find_volume+0x2c4>
	rv = rv << 8 | ptr[2];
 8016604:	f8b4 01fc 	ldrh.w	r0, [r4, #508]	; 0x1fc
	rv = rv << 8 | ptr[1];
 8016608:	f894 11fb 	ldrb.w	r1, [r4, #507]	; 0x1fb
	rv = rv << 8 | ptr[0];
 801660c:	f894 51fa 	ldrb.w	r5, [r4, #506]	; 0x1fa
	rv = rv << 8 | ptr[1];
 8016610:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
	rv = rv << 8 | ptr[0];
 8016614:	ea45 2501 	orr.w	r5, r5, r1, lsl #8
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8016618:	f894 0206 	ldrb.w	r0, [r4, #518]	; 0x206
 801661c:	b148      	cbz	r0, 8016632 <find_volume+0x2de>
	rv = rv << 8 | ptr[2];
 801661e:	f8b4 c20c 	ldrh.w	ip, [r4, #524]	; 0x20c
	rv = rv << 8 | ptr[1];
 8016622:	f894 020b 	ldrb.w	r0, [r4, #523]	; 0x20b
	rv = rv << 8 | ptr[0];
 8016626:	f894 120a 	ldrb.w	r1, [r4, #522]	; 0x20a
	rv = rv << 8 | ptr[1];
 801662a:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
	rv = rv << 8 | ptr[0];
 801662e:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8016632:	f894 1216 	ldrb.w	r1, [r4, #534]	; 0x216
 8016636:	9001      	str	r0, [sp, #4]
 8016638:	2900      	cmp	r1, #0
 801663a:	d173      	bne.n	8016724 <find_volume+0x3d0>
 801663c:	4608      	mov	r0, r1
 801663e:	f894 1226 	ldrb.w	r1, [r4, #550]	; 0x226
 8016642:	9002      	str	r0, [sp, #8]
 8016644:	b149      	cbz	r1, 801665a <find_volume+0x306>
	rv = rv << 8 | ptr[2];
 8016646:	f8b4 c22c 	ldrh.w	ip, [r4, #556]	; 0x22c
	rv = rv << 8 | ptr[1];
 801664a:	f894 022b 	ldrb.w	r0, [r4, #555]	; 0x22b
	rv = rv << 8 | ptr[0];
 801664e:	f894 122a 	ldrb.w	r1, [r4, #554]	; 0x22a
	rv = rv << 8 | ptr[1];
 8016652:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
	rv = rv << 8 | ptr[0];
 8016656:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801665a:	9103      	str	r1, [sp, #12]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801665c:	2d00      	cmp	r5, #0
 801665e:	d16c      	bne.n	801673a <find_volume+0x3e6>
			bsect = br[i];
 8016660:	9d01      	ldr	r5, [sp, #4]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8016662:	2d00      	cmp	r5, #0
 8016664:	d17e      	bne.n	8016764 <find_volume+0x410>
			bsect = br[i];
 8016666:	9d02      	ldr	r5, [sp, #8]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8016668:	2d00      	cmp	r5, #0
 801666a:	f040 80c1 	bne.w	80167f0 <find_volume+0x49c>
			bsect = br[i];
 801666e:	9d03      	ldr	r5, [sp, #12]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8016670:	2d00      	cmp	r5, #0
 8016672:	d050      	beq.n	8016716 <find_volume+0x3c2>
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8016674:	f04f 37ff 	mov.w	r7, #4294967295
 8016678:	2300      	movs	r3, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 801667a:	42bd      	cmp	r5, r7
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801667c:	70e3      	strb	r3, [r4, #3]
 801667e:	6327      	str	r7, [r4, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 8016680:	d017      	beq.n	80166b2 <find_volume+0x35e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8016682:	4631      	mov	r1, r6
 8016684:	2301      	movs	r3, #1
 8016686:	462a      	mov	r2, r5
 8016688:	7860      	ldrb	r0, [r4, #1]
 801668a:	f7fd f8b5 	bl	80137f8 <disk_read>
 801668e:	b178      	cbz	r0, 80166b0 <find_volume+0x35c>
			fs->winsect = sector;
 8016690:	6327      	str	r7, [r4, #48]	; 0x30
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8016692:	2001      	movs	r0, #1
 8016694:	e691      	b.n	80163ba <find_volume+0x66>
 8016696:	bf00      	nop
 8016698:	24003e14 	.word	0x24003e14
 801669c:	009000eb 	.word	0x009000eb
 80166a0:	00544146 	.word	0x00544146
 80166a4:	33544146 	.word	0x33544146
 80166a8:	24003e5c 	.word	0x24003e5c
 80166ac:	24003e1c 	.word	0x24003e1c
			fs->winsect = sector;
 80166b0:	6325      	str	r5, [r4, #48]	; 0x30
	rv = rv << 8 | ptr[0];
 80166b2:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80166b6:	f64a 2155 	movw	r1, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
 80166ba:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
 80166be:	ea43 2002 	orr.w	r0, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80166c2:	4288      	cmp	r0, r1
 80166c4:	d127      	bne.n	8016716 <find_volume+0x3c2>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80166c6:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 80166ca:	29e9      	cmp	r1, #233	; 0xe9
 80166cc:	d005      	beq.n	80166da <find_volume+0x386>
 80166ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80166d0:	48cf      	ldr	r0, [pc, #828]	; (8016a10 <find_volume+0x6bc>)
 80166d2:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80166d6:	4281      	cmp	r1, r0
 80166d8:	d11d      	bne.n	8016716 <find_volume+0x3c2>
	rv = rv << 8 | ptr[2];
 80166da:	f8b4 606c 	ldrh.w	r6, [r4, #108]	; 0x6c
	rv = rv << 8 | ptr[1];
 80166de:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
	rv = rv << 8 | ptr[0];
 80166e2:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
	rv = rv << 8 | ptr[1];
 80166e6:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80166ea:	4eca      	ldr	r6, [pc, #808]	; (8016a14 <find_volume+0x6c0>)
	rv = rv << 8 | ptr[0];
 80166ec:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80166f0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80166f4:	42b1      	cmp	r1, r6
 80166f6:	f43f aeb4 	beq.w	8016462 <find_volume+0x10e>
	rv = rv << 8 | ptr[2];
 80166fa:	f8b4 6088 	ldrh.w	r6, [r4, #136]	; 0x88
	rv = rv << 8 | ptr[1];
 80166fe:	f894 0087 	ldrb.w	r0, [r4, #135]	; 0x87
	rv = rv << 8 | ptr[0];
 8016702:	f894 1086 	ldrb.w	r1, [r4, #134]	; 0x86
	rv = rv << 8 | ptr[1];
 8016706:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801670a:	4ec3      	ldr	r6, [pc, #780]	; (8016a18 <find_volume+0x6c4>)
	rv = rv << 8 | ptr[0];
 801670c:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8016710:	42b1      	cmp	r1, r6
 8016712:	f43f aea6 	beq.w	8016462 <find_volume+0x10e>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8016716:	200d      	movs	r0, #13
}
 8016718:	b005      	add	sp, #20
 801671a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801671e:	4633      	mov	r3, r6
 8016720:	462c      	mov	r4, r5
 8016722:	e62f      	b.n	8016384 <find_volume+0x30>
	rv = rv << 8 | ptr[2];
 8016724:	f8b4 c21c 	ldrh.w	ip, [r4, #540]	; 0x21c
	rv = rv << 8 | ptr[1];
 8016728:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
	rv = rv << 8 | ptr[0];
 801672c:	f894 121a 	ldrb.w	r1, [r4, #538]	; 0x21a
	rv = rv << 8 | ptr[1];
 8016730:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
	rv = rv << 8 | ptr[0];
 8016734:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 8016738:	e781      	b.n	801663e <find_volume+0x2ea>
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801673a:	f04f 38ff 	mov.w	r8, #4294967295
 801673e:	2100      	movs	r1, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8016740:	4545      	cmp	r5, r8
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8016742:	70e1      	strb	r1, [r4, #3]
 8016744:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 8016748:	f000 80a7 	beq.w	801689a <find_volume+0x546>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801674c:	2301      	movs	r3, #1
 801674e:	462a      	mov	r2, r5
 8016750:	4631      	mov	r1, r6
 8016752:	7860      	ldrb	r0, [r4, #1]
 8016754:	f7fd f850 	bl	80137f8 <disk_read>
 8016758:	2800      	cmp	r0, #0
 801675a:	f000 8090 	beq.w	801687e <find_volume+0x52a>
			fs->winsect = sector;
 801675e:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 8016762:	e77d      	b.n	8016660 <find_volume+0x30c>
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8016764:	f04f 37ff 	mov.w	r7, #4294967295
 8016768:	2300      	movs	r3, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 801676a:	42bd      	cmp	r5, r7
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801676c:	70e3      	strb	r3, [r4, #3]
 801676e:	6327      	str	r7, [r4, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 8016770:	d009      	beq.n	8016786 <find_volume+0x432>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8016772:	2301      	movs	r3, #1
 8016774:	462a      	mov	r2, r5
 8016776:	4631      	mov	r1, r6
 8016778:	7860      	ldrb	r0, [r4, #1]
 801677a:	f7fd f83d 	bl	80137f8 <disk_read>
 801677e:	2800      	cmp	r0, #0
 8016780:	f040 80b3 	bne.w	80168ea <find_volume+0x596>
			fs->winsect = sector;
 8016784:	6325      	str	r5, [r4, #48]	; 0x30
	rv = rv << 8 | ptr[0];
 8016786:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801678a:	f64a 2155 	movw	r1, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
 801678e:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
 8016792:	ea43 2002 	orr.w	r0, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8016796:	4288      	cmp	r0, r1
 8016798:	f47f af65 	bne.w	8016666 <find_volume+0x312>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801679c:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 80167a0:	29e9      	cmp	r1, #233	; 0xe9
 80167a2:	d006      	beq.n	80167b2 <find_volume+0x45e>
 80167a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80167a6:	489a      	ldr	r0, [pc, #616]	; (8016a10 <find_volume+0x6bc>)
 80167a8:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80167ac:	4281      	cmp	r1, r0
 80167ae:	f47f af5a 	bne.w	8016666 <find_volume+0x312>
	rv = rv << 8 | ptr[2];
 80167b2:	f8b4 706c 	ldrh.w	r7, [r4, #108]	; 0x6c
	rv = rv << 8 | ptr[1];
 80167b6:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
	rv = rv << 8 | ptr[0];
 80167ba:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
	rv = rv << 8 | ptr[1];
 80167be:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80167c2:	4f94      	ldr	r7, [pc, #592]	; (8016a14 <find_volume+0x6c0>)
	rv = rv << 8 | ptr[0];
 80167c4:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80167c8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80167cc:	42b9      	cmp	r1, r7
 80167ce:	f43f ae48 	beq.w	8016462 <find_volume+0x10e>
	rv = rv << 8 | ptr[2];
 80167d2:	f8b4 7088 	ldrh.w	r7, [r4, #136]	; 0x88
	rv = rv << 8 | ptr[1];
 80167d6:	f894 0087 	ldrb.w	r0, [r4, #135]	; 0x87
	rv = rv << 8 | ptr[0];
 80167da:	f894 1086 	ldrb.w	r1, [r4, #134]	; 0x86
	rv = rv << 8 | ptr[1];
 80167de:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80167e2:	4f8d      	ldr	r7, [pc, #564]	; (8016a18 <find_volume+0x6c4>)
	rv = rv << 8 | ptr[0];
 80167e4:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80167e8:	42b9      	cmp	r1, r7
 80167ea:	f43f ae3a 	beq.w	8016462 <find_volume+0x10e>
 80167ee:	e73a      	b.n	8016666 <find_volume+0x312>
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80167f0:	f04f 37ff 	mov.w	r7, #4294967295
 80167f4:	2300      	movs	r3, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 80167f6:	42bd      	cmp	r5, r7
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80167f8:	70e3      	strb	r3, [r4, #3]
 80167fa:	6327      	str	r7, [r4, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 80167fc:	d008      	beq.n	8016810 <find_volume+0x4bc>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80167fe:	2301      	movs	r3, #1
 8016800:	462a      	mov	r2, r5
 8016802:	4631      	mov	r1, r6
 8016804:	7860      	ldrb	r0, [r4, #1]
 8016806:	f7fc fff7 	bl	80137f8 <disk_read>
 801680a:	2800      	cmp	r0, #0
 801680c:	d16f      	bne.n	80168ee <find_volume+0x59a>
			fs->winsect = sector;
 801680e:	6325      	str	r5, [r4, #48]	; 0x30
	rv = rv << 8 | ptr[0];
 8016810:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8016814:	f64a 2155 	movw	r1, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
 8016818:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
 801681c:	ea43 2002 	orr.w	r0, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8016820:	4288      	cmp	r0, r1
 8016822:	f47f af24 	bne.w	801666e <find_volume+0x31a>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8016826:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 801682a:	29e9      	cmp	r1, #233	; 0xe9
 801682c:	d006      	beq.n	801683c <find_volume+0x4e8>
 801682e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016830:	4877      	ldr	r0, [pc, #476]	; (8016a10 <find_volume+0x6bc>)
 8016832:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8016836:	4281      	cmp	r1, r0
 8016838:	f47f af19 	bne.w	801666e <find_volume+0x31a>
	rv = rv << 8 | ptr[2];
 801683c:	f8b4 706c 	ldrh.w	r7, [r4, #108]	; 0x6c
	rv = rv << 8 | ptr[1];
 8016840:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
	rv = rv << 8 | ptr[0];
 8016844:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
	rv = rv << 8 | ptr[1];
 8016848:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801684c:	4f71      	ldr	r7, [pc, #452]	; (8016a14 <find_volume+0x6c0>)
	rv = rv << 8 | ptr[0];
 801684e:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8016852:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8016856:	42b9      	cmp	r1, r7
 8016858:	f43f ae03 	beq.w	8016462 <find_volume+0x10e>
	rv = rv << 8 | ptr[2];
 801685c:	f8b4 7088 	ldrh.w	r7, [r4, #136]	; 0x88
	rv = rv << 8 | ptr[1];
 8016860:	f894 0087 	ldrb.w	r0, [r4, #135]	; 0x87
	rv = rv << 8 | ptr[0];
 8016864:	f894 1086 	ldrb.w	r1, [r4, #134]	; 0x86
	rv = rv << 8 | ptr[1];
 8016868:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801686c:	4f6a      	ldr	r7, [pc, #424]	; (8016a18 <find_volume+0x6c4>)
	rv = rv << 8 | ptr[0];
 801686e:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8016872:	42b9      	cmp	r1, r7
 8016874:	f43f adf5 	beq.w	8016462 <find_volume+0x10e>
 8016878:	e6f9      	b.n	801666e <find_volume+0x31a>
	if (vol < 0) return FR_INVALID_DRIVE;
 801687a:	200b      	movs	r0, #11
 801687c:	e59d      	b.n	80163ba <find_volume+0x66>
	rv = rv << 8 | ptr[0];
 801687e:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8016882:	f64a 2155 	movw	r1, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
 8016886:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
			fs->winsect = sector;
 801688a:	6325      	str	r5, [r4, #48]	; 0x30
	rv = rv << 8 | ptr[0];
 801688c:	ea43 2002 	orr.w	r0, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8016890:	4288      	cmp	r0, r1
 8016892:	f47f aee5 	bne.w	8016660 <find_volume+0x30c>
 8016896:	f894 7034 	ldrb.w	r7, [r4, #52]	; 0x34
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801689a:	2fe9      	cmp	r7, #233	; 0xe9
 801689c:	d006      	beq.n	80168ac <find_volume+0x558>
 801689e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80168a0:	485b      	ldr	r0, [pc, #364]	; (8016a10 <find_volume+0x6bc>)
 80168a2:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80168a6:	4281      	cmp	r1, r0
 80168a8:	f47f aeda 	bne.w	8016660 <find_volume+0x30c>
	rv = rv << 8 | ptr[2];
 80168ac:	f8b4 706c 	ldrh.w	r7, [r4, #108]	; 0x6c
	rv = rv << 8 | ptr[1];
 80168b0:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
	rv = rv << 8 | ptr[0];
 80168b4:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
	rv = rv << 8 | ptr[1];
 80168b8:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80168bc:	4f55      	ldr	r7, [pc, #340]	; (8016a14 <find_volume+0x6c0>)
	rv = rv << 8 | ptr[0];
 80168be:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80168c2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80168c6:	42b9      	cmp	r1, r7
 80168c8:	f43f adcb 	beq.w	8016462 <find_volume+0x10e>
	rv = rv << 8 | ptr[2];
 80168cc:	f8b4 7088 	ldrh.w	r7, [r4, #136]	; 0x88
	rv = rv << 8 | ptr[1];
 80168d0:	f894 0087 	ldrb.w	r0, [r4, #135]	; 0x87
	rv = rv << 8 | ptr[0];
 80168d4:	f894 1086 	ldrb.w	r1, [r4, #134]	; 0x86
	rv = rv << 8 | ptr[1];
 80168d8:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80168dc:	4f4e      	ldr	r7, [pc, #312]	; (8016a18 <find_volume+0x6c4>)
	rv = rv << 8 | ptr[0];
 80168de:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80168e2:	42b9      	cmp	r1, r7
 80168e4:	f43f adbd 	beq.w	8016462 <find_volume+0x10e>
 80168e8:	e6ba      	b.n	8016660 <find_volume+0x30c>
			fs->winsect = sector;
 80168ea:	6327      	str	r7, [r4, #48]	; 0x30
 80168ec:	e6bb      	b.n	8016666 <find_volume+0x312>
 80168ee:	6327      	str	r7, [r4, #48]	; 0x30
 80168f0:	e6bd      	b.n	801666e <find_volume+0x31a>
	rv = rv << 8 | ptr[0];
 80168f2:	f894 805f 	ldrb.w	r8, [r4, #95]	; 0x5f
		fs->database = bsect + sysect;					/* Data start sector */
 80168f6:	eb09 0605 	add.w	r6, r9, r5
	rv = rv << 8 | ptr[0];
 80168fa:	f894 e05e 	ldrb.w	lr, [r4, #94]	; 0x5e
 80168fe:	3002      	adds	r0, #2
		fs->database = bsect + sysect;					/* Data start sector */
 8016900:	62e6      	str	r6, [r4, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8016902:	442f      	add	r7, r5
	rv = rv << 8 | ptr[0];
 8016904:	ea4e 2e08 	orr.w	lr, lr, r8, lsl #8
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8016908:	61a0      	str	r0, [r4, #24]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801690a:	6267      	str	r7, [r4, #36]	; 0x24
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801690c:	ea4c 060e 	orr.w	r6, ip, lr
		fs->volbase = bsect;							/* Volume start sector */
 8016910:	6225      	str	r5, [r4, #32]
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8016912:	b236      	sxth	r6, r6
 8016914:	2e00      	cmp	r6, #0
 8016916:	f47f aefe 	bne.w	8016716 <find_volume+0x3c2>
	rv = rv << 8 | ptr[2];
 801691a:	f8b4 c062 	ldrh.w	ip, [r4, #98]	; 0x62
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801691e:	0080      	lsls	r0, r0, #2
	rv = rv << 8 | ptr[1];
 8016920:	f894 7061 	ldrb.w	r7, [r4, #97]	; 0x61
	rv = rv << 8 | ptr[0];
 8016924:	f894 6060 	ldrb.w	r6, [r4, #96]	; 0x60
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8016928:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
	rv = rv << 8 | ptr[1];
 801692c:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8016930:	ebb1 2f50 	cmp.w	r1, r0, lsr #9
	rv = rv << 8 | ptr[0];
 8016934:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8016938:	62a6      	str	r6, [r4, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801693a:	f4ff aeec 	bcc.w	8016716 <find_volume+0x3c2>
	rv = rv << 8 | ptr[0];
 801693e:	f894 7065 	ldrb.w	r7, [r4, #101]	; 0x65
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8016942:	f04f 30ff 	mov.w	r0, #4294967295
	rv = rv << 8 | ptr[0];
 8016946:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64
		fs->fsi_flag = 0x80;
 801694a:	2680      	movs	r6, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801694c:	6160      	str	r0, [r4, #20]
	rv = rv << 8 | ptr[0];
 801694e:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8016952:	6120      	str	r0, [r4, #16]
		fs->fsi_flag = 0x80;
 8016954:	7126      	strb	r6, [r4, #4]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8016956:	2901      	cmp	r1, #1
 8016958:	d013      	beq.n	8016982 <find_volume+0x62e>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801695a:	2003      	movs	r0, #3
 801695c:	e610      	b.n	8016580 <find_volume+0x22c>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801695e:	61a3      	str	r3, [r4, #24]
		fs->database = bsect + sysect;					/* Data start sector */
 8016960:	62e2      	str	r2, [r4, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8016962:	e9c4 5708 	strd	r5, r7, [r4, #32]
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8016966:	f1b8 0f00 	cmp.w	r8, #0
 801696a:	f43f aed4 	beq.w	8016716 <find_volume+0x3c2>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801696e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8016972:	443e      	add	r6, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8016974:	f003 0301 	and.w	r3, r3, #1
 8016978:	2001      	movs	r0, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801697a:	62a6      	str	r6, [r4, #40]	; 0x28
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801697c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8016980:	e5f2      	b.n	8016568 <find_volume+0x214>
			&& move_window(fs, bsect + 1) == FR_OK)
 8016982:	1c69      	adds	r1, r5, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8016984:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8016986:	4281      	cmp	r1, r0
 8016988:	d138      	bne.n	80169fc <find_volume+0x6a8>
	rv = rv << 8 | ptr[0];
 801698a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801698e:	f64a 2255 	movw	r2, #43605	; 0xaa55
			fs->fsi_flag = 0;
 8016992:	2100      	movs	r1, #0
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8016994:	4293      	cmp	r3, r2
			fs->fsi_flag = 0;
 8016996:	7121      	strb	r1, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8016998:	d1df      	bne.n	801695a <find_volume+0x606>
	rv = rv << 8 | ptr[2];
 801699a:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
	rv = rv << 8 | ptr[1];
 801699c:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
	rv = rv << 8 | ptr[0];
 80169a0:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
	rv = rv << 8 | ptr[1];
 80169a4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80169a8:	491c      	ldr	r1, [pc, #112]	; (8016a1c <find_volume+0x6c8>)
	rv = rv << 8 | ptr[0];
 80169aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80169ae:	428b      	cmp	r3, r1
 80169b0:	d1d3      	bne.n	801695a <find_volume+0x606>
	rv = rv << 8 | ptr[2];
 80169b2:	f8b4 121a 	ldrh.w	r1, [r4, #538]	; 0x21a
	rv = rv << 8 | ptr[1];
 80169b6:	f894 2219 	ldrb.w	r2, [r4, #537]	; 0x219
	rv = rv << 8 | ptr[0];
 80169ba:	f894 3218 	ldrb.w	r3, [r4, #536]	; 0x218
	rv = rv << 8 | ptr[1];
 80169be:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80169c2:	4917      	ldr	r1, [pc, #92]	; (8016a20 <find_volume+0x6cc>)
	rv = rv << 8 | ptr[0];
 80169c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80169c8:	428b      	cmp	r3, r1
 80169ca:	d1c6      	bne.n	801695a <find_volume+0x606>
	rv = rv << 8 | ptr[1];
 80169cc:	f894 221d 	ldrb.w	r2, [r4, #541]	; 0x21d
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80169d0:	2003      	movs	r0, #3
	rv = rv << 8 | ptr[1];
 80169d2:	f894 3221 	ldrb.w	r3, [r4, #545]	; 0x221
	rv = rv << 8 | ptr[2];
 80169d6:	f8b4 521e 	ldrh.w	r5, [r4, #542]	; 0x21e
 80169da:	f8b4 1222 	ldrh.w	r1, [r4, #546]	; 0x222
	rv = rv << 8 | ptr[1];
 80169de:	ea42 2505 	orr.w	r5, r2, r5, lsl #8
	rv = rv << 8 | ptr[0];
 80169e2:	f894 221c 	ldrb.w	r2, [r4, #540]	; 0x21c
	rv = rv << 8 | ptr[1];
 80169e6:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 80169ea:	f894 3220 	ldrb.w	r3, [r4, #544]	; 0x220
 80169ee:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80169f2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80169f6:	e9c4 3204 	strd	r3, r2, [r4, #16]
 80169fa:	e5c1      	b.n	8016580 <find_volume+0x22c>
 80169fc:	4620      	mov	r0, r4
 80169fe:	f7fc ffa7 	bl	8013950 <move_window.part.5>
			&& move_window(fs, bsect + 1) == FR_OK)
 8016a02:	2800      	cmp	r0, #0
 8016a04:	d1a9      	bne.n	801695a <find_volume+0x606>
 8016a06:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
 8016a0a:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
 8016a0e:	e7bc      	b.n	801698a <find_volume+0x636>
 8016a10:	009000eb 	.word	0x009000eb
 8016a14:	00544146 	.word	0x00544146
 8016a18:	33544146 	.word	0x33544146
 8016a1c:	41615252 	.word	0x41615252
 8016a20:	61417272 	.word	0x61417272

08016a24 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8016a24:	b530      	push	{r4, r5, lr}
 8016a26:	b083      	sub	sp, #12
 8016a28:	e9cd 1000 	strd	r1, r0, [sp]
	if (*path) {	/* If the pointer is not a null */
 8016a2c:	2900      	cmp	r1, #0
 8016a2e:	d037      	beq.n	8016aa0 <f_mount+0x7c>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8016a30:	780c      	ldrb	r4, [r1, #0]
 8016a32:	2c3a      	cmp	r4, #58	; 0x3a
 8016a34:	d04e      	beq.n	8016ad4 <f_mount+0xb0>
 8016a36:	2c1f      	cmp	r4, #31
 8016a38:	d94c      	bls.n	8016ad4 <f_mount+0xb0>
 8016a3a:	4608      	mov	r0, r1
 8016a3c:	e001      	b.n	8016a42 <f_mount+0x1e>
 8016a3e:	2b3a      	cmp	r3, #58	; 0x3a
 8016a40:	d003      	beq.n	8016a4a <f_mount+0x26>
 8016a42:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8016a46:	2b1f      	cmp	r3, #31
 8016a48:	d8f9      	bhi.n	8016a3e <f_mount+0x1a>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8016a4a:	2b3a      	cmp	r3, #58	; 0x3a
 8016a4c:	d022      	beq.n	8016a94 <f_mount+0x70>
		vol = 0;		/* Drive 0 */
 8016a4e:	2400      	movs	r4, #0


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
	cfs = FatFs[vol];					/* Pointer to fs object */
 8016a50:	4d22      	ldr	r5, [pc, #136]	; (8016adc <f_mount+0xb8>)
 8016a52:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]

	if (cfs) {
 8016a56:	b173      	cbz	r3, 8016a76 <f_mount+0x52>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8016a58:	4921      	ldr	r1, [pc, #132]	; (8016ae0 <f_mount+0xbc>)
 8016a5a:	6808      	ldr	r0, [r1, #0]
 8016a5c:	4283      	cmp	r3, r0
 8016a5e:	d029      	beq.n	8016ab4 <f_mount+0x90>
 8016a60:	6908      	ldr	r0, [r1, #16]
 8016a62:	4283      	cmp	r3, r0
 8016a64:	d02b      	beq.n	8016abe <f_mount+0x9a>
 8016a66:	6a08      	ldr	r0, [r1, #32]
 8016a68:	4283      	cmp	r3, r0
 8016a6a:	d02d      	beq.n	8016ac8 <f_mount+0xa4>
 8016a6c:	6b08      	ldr	r0, [r1, #48]	; 0x30
 8016a6e:	4298      	cmp	r0, r3
 8016a70:	d01d      	beq.n	8016aae <f_mount+0x8a>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8016a72:	2100      	movs	r1, #0
 8016a74:	7019      	strb	r1, [r3, #0]
	}

	if (fs) {
 8016a76:	9b01      	ldr	r3, [sp, #4]
 8016a78:	b1a3      	cbz	r3, 8016aa4 <f_mount+0x80>
		fs->fs_type = 0;				/* Clear new fs object */
 8016a7a:	2000      	movs	r0, #0
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8016a7c:	2a01      	cmp	r2, #1
	FatFs[vol] = fs;					/* Register new fs object */
 8016a7e:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
		fs->fs_type = 0;				/* Clear new fs object */
 8016a82:	7018      	strb	r0, [r3, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8016a84:	d104      	bne.n	8016a90 <f_mount+0x6c>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8016a86:	4602      	mov	r2, r0
 8016a88:	a901      	add	r1, sp, #4
 8016a8a:	4668      	mov	r0, sp
 8016a8c:	f7ff fc62 	bl	8016354 <find_volume>
	LEAVE_FF(fs, res);
}
 8016a90:	b003      	add	sp, #12
 8016a92:	bd30      	pop	{r4, r5, pc}
			i = *tp++ - '0';
 8016a94:	3101      	adds	r1, #1
 8016a96:	3c30      	subs	r4, #48	; 0x30
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8016a98:	4288      	cmp	r0, r1
 8016a9a:	d101      	bne.n	8016aa0 <f_mount+0x7c>
 8016a9c:	2c01      	cmp	r4, #1
 8016a9e:	d9d7      	bls.n	8016a50 <f_mount+0x2c>
	if (vol < 0) return FR_INVALID_DRIVE;
 8016aa0:	200b      	movs	r0, #11
 8016aa2:	e7f5      	b.n	8016a90 <f_mount+0x6c>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8016aa4:	4618      	mov	r0, r3
	FatFs[vol] = fs;					/* Register new fs object */
 8016aa6:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
}
 8016aaa:	b003      	add	sp, #12
 8016aac:	bd30      	pop	{r4, r5, pc}
		if (Files[i].fs == fs) Files[i].fs = 0;
 8016aae:	2000      	movs	r0, #0
 8016ab0:	6308      	str	r0, [r1, #48]	; 0x30
 8016ab2:	e7de      	b.n	8016a72 <f_mount+0x4e>
 8016ab4:	2000      	movs	r0, #0
 8016ab6:	6008      	str	r0, [r1, #0]
 8016ab8:	6908      	ldr	r0, [r1, #16]
 8016aba:	4283      	cmp	r3, r0
 8016abc:	d1d3      	bne.n	8016a66 <f_mount+0x42>
 8016abe:	2000      	movs	r0, #0
 8016ac0:	6108      	str	r0, [r1, #16]
 8016ac2:	6a08      	ldr	r0, [r1, #32]
 8016ac4:	4283      	cmp	r3, r0
 8016ac6:	d1d1      	bne.n	8016a6c <f_mount+0x48>
 8016ac8:	2000      	movs	r0, #0
 8016aca:	6208      	str	r0, [r1, #32]
 8016acc:	6b08      	ldr	r0, [r1, #48]	; 0x30
 8016ace:	4298      	cmp	r0, r3
 8016ad0:	d1cf      	bne.n	8016a72 <f_mount+0x4e>
 8016ad2:	e7ec      	b.n	8016aae <f_mount+0x8a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8016ad4:	4623      	mov	r3, r4
 8016ad6:	4608      	mov	r0, r1
 8016ad8:	e7b7      	b.n	8016a4a <f_mount+0x26>
 8016ada:	bf00      	nop
 8016adc:	24003e14 	.word	0x24003e14
 8016ae0:	24003e1c 	.word	0x24003e1c

08016ae4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8016ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ae8:	b095      	sub	sp, #84	; 0x54
 8016aea:	9105      	str	r1, [sp, #20]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8016aec:	2800      	cmp	r0, #0
 8016aee:	d05e      	beq.n	8016bae <f_open+0xca>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8016af0:	f002 073f 	and.w	r7, r2, #63	; 0x3f
 8016af4:	4604      	mov	r4, r0
 8016af6:	4615      	mov	r5, r2
	res = find_volume(&path, &fs, mode);
 8016af8:	a906      	add	r1, sp, #24
 8016afa:	a805      	add	r0, sp, #20
 8016afc:	463a      	mov	r2, r7
 8016afe:	f7ff fc29 	bl	8016354 <find_volume>
	if (res == FR_OK) {
 8016b02:	4606      	mov	r6, r0
 8016b04:	b128      	cbz	r0, 8016b12 <f_open+0x2e>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8016b06:	2300      	movs	r3, #0
 8016b08:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 8016b0a:	4630      	mov	r0, r6
 8016b0c:	b015      	add	sp, #84	; 0x54
 8016b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dj.obj.fs = fs;
 8016b12:	9b06      	ldr	r3, [sp, #24]
		INIT_NAMBUF(fs);
 8016b14:	f44f 7000 	mov.w	r0, #512	; 0x200
		dj.obj.fs = fs;
 8016b18:	9307      	str	r3, [sp, #28]
		INIT_NAMBUF(fs);
 8016b1a:	f001 fc57 	bl	80183cc <ff_memalloc>
 8016b1e:	4681      	mov	r9, r0
 8016b20:	2800      	cmp	r0, #0
 8016b22:	d049      	beq.n	8016bb8 <f_open+0xd4>
		res = follow_path(&dj, path);	/* Follow the file path */
 8016b24:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
		INIT_NAMBUF(fs);
 8016b28:	60d8      	str	r0, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8016b2a:	a807      	add	r0, sp, #28
 8016b2c:	f7fe fc98 	bl	8015460 <follow_path>
 8016b30:	f005 031c 	and.w	r3, r5, #28
		if (res == FR_OK) {
 8016b34:	2800      	cmp	r0, #0
 8016b36:	d141      	bne.n	8016bbc <f_open+0xd8>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8016b38:	f99d 204b 	ldrsb.w	r2, [sp, #75]	; 0x4b
 8016b3c:	2a00      	cmp	r2, #0
 8016b3e:	f2c0 813d 	blt.w	8016dbc <f_open+0x2d8>
				Files[i].clu == dp->obj.sclust &&
 8016b42:	9909      	ldr	r1, [sp, #36]	; 0x24
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8016b44:	f027 0b01 	bic.w	fp, r7, #1
		if (Files[i].fs) {	/* Existing entry */
 8016b48:	f8df 8488 	ldr.w	r8, [pc, #1160]	; 8016fd4 <f_open+0x4f0>
				Files[i].clu == dp->obj.sclust &&
 8016b4c:	9102      	str	r1, [sp, #8]
		if (Files[i].fs) {	/* Existing entry */
 8016b4e:	f8d8 2000 	ldr.w	r2, [r8]
				Files[i].ofs == dp->dptr) break;
 8016b52:	990c      	ldr	r1, [sp, #48]	; 0x30
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8016b54:	9807      	ldr	r0, [sp, #28]
				Files[i].ofs == dp->dptr) break;
 8016b56:	9103      	str	r1, [sp, #12]
		if (Files[i].fs) {	/* Existing entry */
 8016b58:	2a00      	cmp	r2, #0
 8016b5a:	d04b      	beq.n	8016bf4 <f_open+0x110>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8016b5c:	4282      	cmp	r2, r0
 8016b5e:	d062      	beq.n	8016c26 <f_open+0x142>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8016b60:	46b4      	mov	ip, r6
		if (Files[i].fs) {	/* Existing entry */
 8016b62:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016b66:	2900      	cmp	r1, #0
 8016b68:	f000 8165 	beq.w	8016e36 <f_open+0x352>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8016b6c:	4288      	cmp	r0, r1
 8016b6e:	f000 8165 	beq.w	8016e3c <f_open+0x358>
		if (Files[i].fs) {	/* Existing entry */
 8016b72:	f8d8 1020 	ldr.w	r1, [r8, #32]
 8016b76:	2900      	cmp	r1, #0
 8016b78:	f000 815a 	beq.w	8016e30 <f_open+0x34c>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8016b7c:	4281      	cmp	r1, r0
 8016b7e:	f000 816b 	beq.w	8016e58 <f_open+0x374>
		if (Files[i].fs) {	/* Existing entry */
 8016b82:	f8d8 1030 	ldr.w	r1, [r8, #48]	; 0x30
 8016b86:	b121      	cbz	r1, 8016b92 <f_open+0xae>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8016b88:	4281      	cmp	r1, r0
 8016b8a:	d036      	beq.n	8016bfa <f_open+0x116>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8016b8c:	f1bc 0f00 	cmp.w	ip, #0
 8016b90:	d02e      	beq.n	8016bf0 <f_open+0x10c>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8016b92:	2b00      	cmp	r3, #0
 8016b94:	d053      	beq.n	8016c3e <f_open+0x15a>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8016b96:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 8016b9a:	f013 0f11 	tst.w	r3, #17
 8016b9e:	f000 8114 	beq.w	8016dca <f_open+0x2e6>
					res = FR_DENIED;
 8016ba2:	2007      	movs	r0, #7
		FREE_NAMBUF();
 8016ba4:	4606      	mov	r6, r0
 8016ba6:	4648      	mov	r0, r9
 8016ba8:	f001 fc12 	bl	80183d0 <ff_memfree>
 8016bac:	e7ab      	b.n	8016b06 <f_open+0x22>
	if (!fp) return FR_INVALID_OBJECT;
 8016bae:	2609      	movs	r6, #9
}
 8016bb0:	4630      	mov	r0, r6
 8016bb2:	b015      	add	sp, #84	; 0x54
 8016bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		INIT_NAMBUF(fs);
 8016bb8:	2611      	movs	r6, #17
 8016bba:	e7a6      	b.n	8016b0a <f_open+0x26>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8016bbc:	2b00      	cmp	r3, #0
 8016bbe:	d0f1      	beq.n	8016ba4 <f_open+0xc0>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8016bc0:	2804      	cmp	r0, #4
 8016bc2:	d1ef      	bne.n	8016ba4 <f_open+0xc0>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8016bc4:	f8df 840c 	ldr.w	r8, [pc, #1036]	; 8016fd4 <f_open+0x4f0>
 8016bc8:	f8d8 3000 	ldr.w	r3, [r8]
 8016bcc:	2b00      	cmp	r3, #0
 8016bce:	f000 8156 	beq.w	8016e7e <f_open+0x39a>
 8016bd2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	f000 8151 	beq.w	8016e7e <f_open+0x39a>
 8016bdc:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8016be0:	2b00      	cmp	r3, #0
 8016be2:	f000 814c 	beq.w	8016e7e <f_open+0x39a>
 8016be6:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 8016bea:	2b00      	cmp	r3, #0
 8016bec:	f000 8147 	beq.w	8016e7e <f_open+0x39a>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8016bf0:	2012      	movs	r0, #18
 8016bf2:	e7d7      	b.n	8016ba4 <f_open+0xc0>
			be = 1;
 8016bf4:	f04f 0c01 	mov.w	ip, #1
 8016bf8:	e7b3      	b.n	8016b62 <f_open+0x7e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8016bfa:	f8d8 1034 	ldr.w	r1, [r8, #52]	; 0x34
 8016bfe:	9a02      	ldr	r2, [sp, #8]
 8016c00:	4291      	cmp	r1, r2
 8016c02:	d1c3      	bne.n	8016b8c <f_open+0xa8>
				Files[i].clu == dp->obj.sclust &&
 8016c04:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
 8016c08:	9903      	ldr	r1, [sp, #12]
 8016c0a:	428a      	cmp	r2, r1
 8016c0c:	d1be      	bne.n	8016b8c <f_open+0xa8>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8016c0e:	2203      	movs	r2, #3
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8016c10:	f1bb 0f00 	cmp.w	fp, #0
 8016c14:	d105      	bne.n	8016c22 <f_open+0x13e>
 8016c16:	eb08 1202 	add.w	r2, r8, r2, lsl #4
 8016c1a:	8992      	ldrh	r2, [r2, #12]
 8016c1c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8016c20:	d1b7      	bne.n	8016b92 <f_open+0xae>
 8016c22:	2010      	movs	r0, #16
 8016c24:	e7be      	b.n	8016ba4 <f_open+0xc0>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8016c26:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8016c2a:	9902      	ldr	r1, [sp, #8]
 8016c2c:	4291      	cmp	r1, r2
 8016c2e:	d197      	bne.n	8016b60 <f_open+0x7c>
				Files[i].clu == dp->obj.sclust &&
 8016c30:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8016c34:	9903      	ldr	r1, [sp, #12]
 8016c36:	4291      	cmp	r1, r2
 8016c38:	d192      	bne.n	8016b60 <f_open+0x7c>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8016c3a:	4632      	mov	r2, r6
 8016c3c:	e7e8      	b.n	8016c10 <f_open+0x12c>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8016c3e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 8016c42:	06da      	lsls	r2, r3, #27
 8016c44:	f100 8116 	bmi.w	8016e74 <f_open+0x390>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8016c48:	07aa      	lsls	r2, r5, #30
 8016c4a:	d506      	bpl.n	8016c5a <f_open+0x176>
 8016c4c:	07db      	lsls	r3, r3, #31
 8016c4e:	d504      	bpl.n	8016c5a <f_open+0x176>
		FREE_NAMBUF();
 8016c50:	4648      	mov	r0, r9
						res = FR_DENIED;
 8016c52:	2607      	movs	r6, #7
		FREE_NAMBUF();
 8016c54:	f001 fbbc 	bl	80183d0 <ff_memfree>
 8016c58:	e755      	b.n	8016b06 <f_open+0x22>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8016c5a:	072d      	lsls	r5, r5, #28
 8016c5c:	f8dd a018 	ldr.w	sl, [sp, #24]
 8016c60:	d503      	bpl.n	8016c6a <f_open+0x186>
				mode |= FA_MODIFIED;
 8016c62:	f047 0740 	orr.w	r7, r7, #64	; 0x40
 8016c66:	f027 0b01 	bic.w	fp, r7, #1
		if (Files[i].fs == dp->obj.fs &&
 8016c6a:	f8d8 1000 	ldr.w	r1, [r8]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8016c6e:	f8da 2030 	ldr.w	r2, [sl, #48]	; 0x30
			fp->dir_ptr = dj.dir;
 8016c72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		if (Files[i].fs == dp->obj.fs &&
 8016c74:	4281      	cmp	r1, r0
			fp->dir_ptr = dj.dir;
 8016c76:	e9c4 2309 	strd	r2, r3, [r4, #36]	; 0x24
		if (Files[i].fs == dp->obj.fs &&
 8016c7a:	f000 80b8 	beq.w	8016dee <f_open+0x30a>
 8016c7e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016c82:	4290      	cmp	r0, r2
 8016c84:	9204      	str	r2, [sp, #16]
 8016c86:	f000 80c0 	beq.w	8016e0a <f_open+0x326>
 8016c8a:	f8d8 c020 	ldr.w	ip, [r8, #32]
 8016c8e:	4560      	cmp	r0, ip
 8016c90:	f000 809f 	beq.w	8016dd2 <f_open+0x2ee>
 8016c94:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 8016c98:	4282      	cmp	r2, r0
 8016c9a:	9201      	str	r2, [sp, #4]
 8016c9c:	d015      	beq.n	8016cca <f_open+0x1e6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8016c9e:	2900      	cmp	r1, #0
 8016ca0:	f000 813d 	beq.w	8016f1e <f_open+0x43a>
 8016ca4:	9904      	ldr	r1, [sp, #16]
 8016ca6:	2900      	cmp	r1, #0
 8016ca8:	f000 8150 	beq.w	8016f4c <f_open+0x468>
 8016cac:	f1bc 0f00 	cmp.w	ip, #0
 8016cb0:	f000 814f 	beq.w	8016f52 <f_open+0x46e>
 8016cb4:	9a01      	ldr	r2, [sp, #4]
 8016cb6:	2a00      	cmp	r2, #0
 8016cb8:	f000 814e 	beq.w	8016f58 <f_open+0x474>
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8016cbc:	2300      	movs	r3, #0
		FREE_NAMBUF();
 8016cbe:	4648      	mov	r0, r9
 8016cc0:	2602      	movs	r6, #2
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8016cc2:	6123      	str	r3, [r4, #16]
		FREE_NAMBUF();
 8016cc4:	f001 fb84 	bl	80183d0 <ff_memfree>
 8016cc8:	e71d      	b.n	8016b06 <f_open+0x22>
		if (Files[i].fs == dp->obj.fs &&
 8016cca:	f8d8 5034 	ldr.w	r5, [r8, #52]	; 0x34
 8016cce:	9a02      	ldr	r2, [sp, #8]
 8016cd0:	42aa      	cmp	r2, r5
 8016cd2:	d1e4      	bne.n	8016c9e <f_open+0x1ba>
			Files[i].clu == dp->obj.sclust &&
 8016cd4:	f8d8 5038 	ldr.w	r5, [r8, #56]	; 0x38
 8016cd8:	46ae      	mov	lr, r5
 8016cda:	9d03      	ldr	r5, [sp, #12]
 8016cdc:	45ae      	cmp	lr, r5
 8016cde:	d1de      	bne.n	8016c9e <f_open+0x1ba>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8016ce0:	2503      	movs	r5, #3
 8016ce2:	012a      	lsls	r2, r5, #4
 8016ce4:	eb08 0102 	add.w	r1, r8, r2
 8016ce8:	8988      	ldrh	r0, [r1, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8016cea:	f1bb 0f00 	cmp.w	fp, #0
 8016cee:	d067      	beq.n	8016dc0 <f_open+0x2dc>
 8016cf0:	2800      	cmp	r0, #0
 8016cf2:	d1e3      	bne.n	8016cbc <f_open+0x1d8>
 8016cf4:	1c69      	adds	r1, r5, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8016cf6:	f44f 7e80 	mov.w	lr, #256	; 0x100
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8016cfa:	6121      	str	r1, [r4, #16]
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8016cfc:	4442      	add	r2, r8
	if (fs->fs_type == FS_FAT32) {
 8016cfe:	f89a 1000 	ldrb.w	r1, [sl]
	rv = rv << 8 | ptr[0];
 8016d02:	f893 c01b 	ldrb.w	ip, [r3, #27]
 8016d06:	7e9d      	ldrb	r5, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 8016d08:	2903      	cmp	r1, #3
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8016d0a:	f8a2 e00c 	strh.w	lr, [r2, #12]
	cl = ld_word(dir + DIR_FstClusLO);
 8016d0e:	ea45 250c 	orr.w	r5, r5, ip, lsl #8
	if (fs->fs_type == FS_FAT32) {
 8016d12:	d105      	bne.n	8016d20 <f_open+0x23c>
	rv = rv << 8 | ptr[0];
 8016d14:	7d59      	ldrb	r1, [r3, #21]
 8016d16:	7d1a      	ldrb	r2, [r3, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8016d18:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8016d1c:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8016d20:	60a5      	str	r5, [r4, #8]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8016d22:	f04f 0c00 	mov.w	ip, #0
	rv = rv << 8 | ptr[2];
 8016d26:	8bd8      	ldrh	r0, [r3, #30]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8016d28:	f104 0830 	add.w	r8, r4, #48	; 0x30
	rv = rv << 8 | ptr[1];
 8016d2c:	7f5a      	ldrb	r2, [r3, #29]
 8016d2e:	4661      	mov	r1, ip
	rv = rv << 8 | ptr[0];
 8016d30:	f893 b01c 	ldrb.w	fp, [r3, #28]
	rv = rv << 8 | ptr[1];
 8016d34:	ea42 2300 	orr.w	r3, r2, r0, lsl #8
			fp->obj.id = fs->id;
 8016d38:	f8ba 2006 	ldrh.w	r2, [sl, #6]
 8016d3c:	4640      	mov	r0, r8
			fp->obj.fs = fs;	 	/* Validate the file object */
 8016d3e:	f8c4 a000 	str.w	sl, [r4]
	rv = rv << 8 | ptr[0];
 8016d42:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
			fp->obj.id = fs->id;
 8016d46:	80a2      	strh	r2, [r4, #4]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8016d48:	f8c4 c02c 	str.w	ip, [r4, #44]	; 0x2c
 8016d4c:	f44f 7200 	mov.w	r2, #512	; 0x200
			fp->err = 0;			/* Clear error flag */
 8016d50:	f884 c015 	strb.w	ip, [r4, #21]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8016d54:	f8c4 b00c 	str.w	fp, [r4, #12]
			fp->sect = 0;			/* Invalidate current data sector */
 8016d58:	f8c4 c020 	str.w	ip, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8016d5c:	f8c4 c018 	str.w	ip, [r4, #24]
			fp->flag = mode;		/* Set file access mode */
 8016d60:	7527      	strb	r7, [r4, #20]
 8016d62:	f006 fec4 	bl	801daee <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8016d66:	06b8      	lsls	r0, r7, #26
 8016d68:	d521      	bpl.n	8016dae <f_open+0x2ca>
 8016d6a:	f1bb 0f00 	cmp.w	fp, #0
 8016d6e:	d01e      	beq.n	8016dae <f_open+0x2ca>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8016d70:	f8ba 700a 	ldrh.w	r7, [sl, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8016d74:	f8c4 b018 	str.w	fp, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8016d78:	027f      	lsls	r7, r7, #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8016d7a:	455f      	cmp	r7, fp
 8016d7c:	f080 80f9 	bcs.w	8016f72 <f_open+0x48e>
 8016d80:	4629      	mov	r1, r5
					clst = get_fat(&fp->obj, clst);
 8016d82:	6820      	ldr	r0, [r4, #0]
 8016d84:	ebab 0b07 	sub.w	fp, fp, r7
 8016d88:	f7fd fc46 	bl	8014618 <get_fat.isra.8>
					if (clst <= 1) res = FR_INT_ERR;
 8016d8c:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 8016d8e:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 8016d90:	d911      	bls.n	8016db6 <f_open+0x2d2>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8016d92:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016d96:	bf18      	it	ne
 8016d98:	455f      	cmpne	r7, fp
 8016d9a:	d3f2      	bcc.n	8016d82 <f_open+0x29e>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8016d9c:	1c41      	adds	r1, r0, #1
 8016d9e:	4605      	mov	r5, r0
				fp->clust = clst;
 8016da0:	61e0      	str	r0, [r4, #28]
					if (clst <= 1) res = FR_INT_ERR;
 8016da2:	bf0c      	ite	eq
 8016da4:	2001      	moveq	r0, #1
 8016da6:	2000      	movne	r0, #0
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8016da8:	f040 80e4 	bne.w	8016f74 <f_open+0x490>
 8016dac:	e6fa      	b.n	8016ba4 <f_open+0xc0>
		FREE_NAMBUF();
 8016dae:	4648      	mov	r0, r9
 8016db0:	f001 fb0e 	bl	80183d0 <ff_memfree>
 8016db4:	e6a9      	b.n	8016b0a <f_open+0x26>
				fp->clust = clst;
 8016db6:	61e0      	str	r0, [r4, #28]
					if (clst <= 1) res = FR_INT_ERR;
 8016db8:	2002      	movs	r0, #2
 8016dba:	e6f3      	b.n	8016ba4 <f_open+0xc0>
				res = FR_INVALID_NAME;
 8016dbc:	2006      	movs	r0, #6
 8016dbe:	e6f1      	b.n	8016ba4 <f_open+0xc0>
 8016dc0:	3001      	adds	r0, #1
 8016dc2:	1c69      	adds	r1, r5, #1
 8016dc4:	fa1f fe80 	uxth.w	lr, r0
 8016dc8:	e797      	b.n	8016cfa <f_open+0x216>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8016dca:	076b      	lsls	r3, r5, #29
 8016dcc:	d52b      	bpl.n	8016e26 <f_open+0x342>
 8016dce:	2008      	movs	r0, #8
 8016dd0:	e6e8      	b.n	8016ba4 <f_open+0xc0>
		if (Files[i].fs == dp->obj.fs &&
 8016dd2:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 8016dd6:	9d02      	ldr	r5, [sp, #8]
 8016dd8:	4295      	cmp	r5, r2
 8016dda:	f47f af5b 	bne.w	8016c94 <f_open+0x1b0>
			Files[i].clu == dp->obj.sclust &&
 8016dde:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
 8016de2:	9d03      	ldr	r5, [sp, #12]
 8016de4:	4295      	cmp	r5, r2
 8016de6:	f47f af55 	bne.w	8016c94 <f_open+0x1b0>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8016dea:	2502      	movs	r5, #2
 8016dec:	e779      	b.n	8016ce2 <f_open+0x1fe>
		if (Files[i].fs == dp->obj.fs &&
 8016dee:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8016df2:	9d02      	ldr	r5, [sp, #8]
 8016df4:	42aa      	cmp	r2, r5
 8016df6:	f47f af42 	bne.w	8016c7e <f_open+0x19a>
			Files[i].clu == dp->obj.sclust &&
 8016dfa:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8016dfe:	9d03      	ldr	r5, [sp, #12]
 8016e00:	42aa      	cmp	r2, r5
 8016e02:	f47f af3c 	bne.w	8016c7e <f_open+0x19a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8016e06:	2500      	movs	r5, #0
 8016e08:	e76b      	b.n	8016ce2 <f_open+0x1fe>
		if (Files[i].fs == dp->obj.fs &&
 8016e0a:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8016e0e:	9d02      	ldr	r5, [sp, #8]
 8016e10:	4295      	cmp	r5, r2
 8016e12:	f47f af3a 	bne.w	8016c8a <f_open+0x1a6>
			Files[i].clu == dp->obj.sclust &&
 8016e16:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8016e1a:	9d03      	ldr	r5, [sp, #12]
 8016e1c:	42aa      	cmp	r2, r5
 8016e1e:	f47f af34 	bne.w	8016c8a <f_open+0x1a6>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8016e22:	2501      	movs	r5, #1
 8016e24:	e75d      	b.n	8016ce2 <f_open+0x1fe>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8016e26:	0729      	lsls	r1, r5, #28
 8016e28:	d431      	bmi.n	8016e8e <f_open+0x3aa>
 8016e2a:	f8dd a018 	ldr.w	sl, [sp, #24]
 8016e2e:	e71c      	b.n	8016c6a <f_open+0x186>
			be = 1;
 8016e30:	f04f 0c01 	mov.w	ip, #1
 8016e34:	e6a5      	b.n	8016b82 <f_open+0x9e>
 8016e36:	f04f 0c01 	mov.w	ip, #1
 8016e3a:	e69a      	b.n	8016b72 <f_open+0x8e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8016e3c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8016e40:	9a02      	ldr	r2, [sp, #8]
 8016e42:	428a      	cmp	r2, r1
 8016e44:	f47f ae95 	bne.w	8016b72 <f_open+0x8e>
				Files[i].clu == dp->obj.sclust &&
 8016e48:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8016e4c:	9903      	ldr	r1, [sp, #12]
 8016e4e:	4291      	cmp	r1, r2
 8016e50:	f47f ae8f 	bne.w	8016b72 <f_open+0x8e>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8016e54:	2201      	movs	r2, #1
 8016e56:	e6db      	b.n	8016c10 <f_open+0x12c>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8016e58:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
 8016e5c:	9a02      	ldr	r2, [sp, #8]
 8016e5e:	4291      	cmp	r1, r2
 8016e60:	f47f ae8f 	bne.w	8016b82 <f_open+0x9e>
				Files[i].clu == dp->obj.sclust &&
 8016e64:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
 8016e68:	9903      	ldr	r1, [sp, #12]
 8016e6a:	4291      	cmp	r1, r2
 8016e6c:	f47f ae89 	bne.w	8016b82 <f_open+0x9e>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8016e70:	2202      	movs	r2, #2
 8016e72:	e6cd      	b.n	8016c10 <f_open+0x12c>
		FREE_NAMBUF();
 8016e74:	4648      	mov	r0, r9
					res = FR_NO_FILE;
 8016e76:	2604      	movs	r6, #4
		FREE_NAMBUF();
 8016e78:	f001 faaa 	bl	80183d0 <ff_memfree>
 8016e7c:	e643      	b.n	8016b06 <f_open+0x22>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8016e7e:	a807      	add	r0, sp, #28
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8016e80:	f047 0708 	orr.w	r7, r7, #8
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8016e84:	f7fe fc7c 	bl	8015780 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8016e88:	2800      	cmp	r0, #0
 8016e8a:	f47f ae8b 	bne.w	8016ba4 <f_open+0xc0>
				dw = GET_FATTIME();
 8016e8e:	f7fc fcdd 	bl	801384c <get_fattime>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8016e92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	*ptr++ = (BYTE)val; val >>= 8;
 8016e94:	b2c5      	uxtb	r5, r0
	*ptr++ = (BYTE)val; val >>= 8;
 8016e96:	f3c0 2107 	ubfx	r1, r0, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8016e9a:	f3c0 4207 	ubfx	r2, r0, #16, #8
	*ptr++ = (BYTE)val;
 8016e9e:	0e00      	lsrs	r0, r0, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8016ea0:	739d      	strb	r5, [r3, #14]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8016ea2:	f04f 0c20 	mov.w	ip, #32
	*ptr++ = (BYTE)val; val >>= 8;
 8016ea6:	73d9      	strb	r1, [r3, #15]
	*ptr++ = (BYTE)val; val >>= 8;
 8016ea8:	741a      	strb	r2, [r3, #16]
	*ptr++ = (BYTE)val;
 8016eaa:	7458      	strb	r0, [r3, #17]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8016eac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8016eae:	f8dd a018 	ldr.w	sl, [sp, #24]
	*ptr++ = (BYTE)val; val >>= 8;
 8016eb2:	759d      	strb	r5, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 8016eb4:	75d9      	strb	r1, [r3, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 8016eb6:	761a      	strb	r2, [r3, #24]
	*ptr++ = (BYTE)val;
 8016eb8:	7658      	strb	r0, [r3, #25]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8016eba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016ebc:	f883 c00b 	strb.w	ip, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8016ec0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	if (fs->fs_type == FS_FAT32) {
 8016ec2:	f89a 2000 	ldrb.w	r2, [sl]
	rv = rv << 8 | ptr[0];
 8016ec6:	7ed9      	ldrb	r1, [r3, #27]
 8016ec8:	7e9d      	ldrb	r5, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 8016eca:	2a03      	cmp	r2, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8016ecc:	ea45 2501 	orr.w	r5, r5, r1, lsl #8
	if (fs->fs_type == FS_FAT32) {
 8016ed0:	d048      	beq.n	8016f64 <f_open+0x480>
	*ptr++ = (BYTE)val; val >>= 8;
 8016ed2:	2200      	movs	r2, #0
 8016ed4:	769a      	strb	r2, [r3, #26]
	*ptr++ = (BYTE)val;
 8016ed6:	76da      	strb	r2, [r3, #27]
	if (fs->fs_type == FS_FAT32) {
 8016ed8:	f89a 1000 	ldrb.w	r1, [sl]
 8016edc:	2903      	cmp	r1, #3
 8016ede:	d03e      	beq.n	8016f5e <f_open+0x47a>
					st_dword(dj.dir + DIR_FileSize, 0);
 8016ee0:	990f      	ldr	r1, [sp, #60]	; 0x3c
	*ptr++ = (BYTE)val; val >>= 8;
 8016ee2:	2200      	movs	r2, #0
					fs->wflag = 1;
 8016ee4:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8016ee6:	61ca      	str	r2, [r1, #28]
					fs->wflag = 1;
 8016ee8:	f88a 3003 	strb.w	r3, [sl, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 8016eec:	b18d      	cbz	r5, 8016f12 <f_open+0x42e>
						res = remove_chain(&dj.obj, cl, 0);
 8016eee:	a807      	add	r0, sp, #28
 8016ef0:	4629      	mov	r1, r5
						dw = fs->winsect;
 8016ef2:	f8da b030 	ldr.w	fp, [sl, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 8016ef6:	f7fc ff3b 	bl	8013d70 <remove_chain>
						if (res == FR_OK) {
 8016efa:	2800      	cmp	r0, #0
 8016efc:	f47f ae52 	bne.w	8016ba4 <f_open+0xc0>
							res = move_window(fs, dw);
 8016f00:	f8dd a018 	ldr.w	sl, [sp, #24]
 8016f04:	3d01      	subs	r5, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8016f06:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
 8016f0a:	459b      	cmp	fp, r3
 8016f0c:	d157      	bne.n	8016fbe <f_open+0x4da>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8016f0e:	f8ca 5010 	str.w	r5, [sl, #16]
 8016f12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016f14:	9807      	ldr	r0, [sp, #28]
 8016f16:	9302      	str	r3, [sp, #8]
 8016f18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016f1a:	9303      	str	r3, [sp, #12]
 8016f1c:	e6a1      	b.n	8016c62 <f_open+0x17e>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8016f1e:	460d      	mov	r5, r1
 8016f20:	2101      	movs	r1, #1
		Files[i].fs = dp->obj.fs;
 8016f22:	012a      	lsls	r2, r5, #4
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8016f24:	f1bb 0f00 	cmp.w	fp, #0
		Files[i].ctr = 0;
 8016f28:	f04f 0c00 	mov.w	ip, #0
		Files[i].fs = dp->obj.fs;
 8016f2c:	eb08 0502 	add.w	r5, r8, r2
 8016f30:	f848 0002 	str.w	r0, [r8, r2]
		Files[i].clu = dp->obj.sclust;
 8016f34:	9802      	ldr	r0, [sp, #8]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8016f36:	bf14      	ite	ne
 8016f38:	f44f 7e80 	movne.w	lr, #256	; 0x100
 8016f3c:	f04f 0e01 	moveq.w	lr, #1
		Files[i].ctr = 0;
 8016f40:	f8a5 c00c 	strh.w	ip, [r5, #12]
		Files[i].clu = dp->obj.sclust;
 8016f44:	6068      	str	r0, [r5, #4]
		Files[i].ofs = dp->dptr;
 8016f46:	9803      	ldr	r0, [sp, #12]
 8016f48:	60a8      	str	r0, [r5, #8]
 8016f4a:	e6d6      	b.n	8016cfa <f_open+0x216>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8016f4c:	2501      	movs	r5, #1
 8016f4e:	2102      	movs	r1, #2
 8016f50:	e7e7      	b.n	8016f22 <f_open+0x43e>
 8016f52:	2502      	movs	r5, #2
 8016f54:	2103      	movs	r1, #3
 8016f56:	e7e4      	b.n	8016f22 <f_open+0x43e>
 8016f58:	2503      	movs	r5, #3
 8016f5a:	2104      	movs	r1, #4
 8016f5c:	e7e1      	b.n	8016f22 <f_open+0x43e>
	*ptr++ = (BYTE)val; val >>= 8;
 8016f5e:	751a      	strb	r2, [r3, #20]
	*ptr++ = (BYTE)val;
 8016f60:	755a      	strb	r2, [r3, #21]
 8016f62:	e7bd      	b.n	8016ee0 <f_open+0x3fc>
	rv = rv << 8 | ptr[0];
 8016f64:	7d59      	ldrb	r1, [r3, #21]
 8016f66:	7d1a      	ldrb	r2, [r3, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8016f68:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8016f6c:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
 8016f70:	e7af      	b.n	8016ed2 <f_open+0x3ee>
				fp->clust = clst;
 8016f72:	61e5      	str	r5, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8016f74:	f3cb 0308 	ubfx	r3, fp, #0, #9
 8016f78:	2b00      	cmp	r3, #0
 8016f7a:	f43f af18 	beq.w	8016dae <f_open+0x2ca>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8016f7e:	9806      	ldr	r0, [sp, #24]
	clst -= 2;
 8016f80:	3d02      	subs	r5, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8016f82:	6983      	ldr	r3, [r0, #24]
 8016f84:	3b02      	subs	r3, #2
 8016f86:	429d      	cmp	r5, r3
 8016f88:	d204      	bcs.n	8016f94 <f_open+0x4b0>
	return clst * fs->csize + fs->database;
 8016f8a:	8942      	ldrh	r2, [r0, #10]
 8016f8c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8016f8e:	fb05 3202 	mla	r2, r5, r2, r3
					if ((sc = clust2sect(fs, clst)) == 0) {
 8016f92:	b922      	cbnz	r2, 8016f9e <f_open+0x4ba>
		FREE_NAMBUF();
 8016f94:	4648      	mov	r0, r9
						res = FR_INT_ERR;
 8016f96:	2602      	movs	r6, #2
		FREE_NAMBUF();
 8016f98:	f001 fa1a 	bl	80183d0 <ff_memfree>
 8016f9c:	e5b3      	b.n	8016b06 <f_open+0x22>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8016f9e:	eb02 225b 	add.w	r2, r2, fp, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8016fa2:	4641      	mov	r1, r8
 8016fa4:	2301      	movs	r3, #1
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8016fa6:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8016fa8:	7840      	ldrb	r0, [r0, #1]
 8016faa:	f7fc fc25 	bl	80137f8 <disk_read>
 8016fae:	2800      	cmp	r0, #0
 8016fb0:	f43f aefd 	beq.w	8016dae <f_open+0x2ca>
		FREE_NAMBUF();
 8016fb4:	4648      	mov	r0, r9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8016fb6:	2601      	movs	r6, #1
		FREE_NAMBUF();
 8016fb8:	f001 fa0a 	bl	80183d0 <ff_memfree>
 8016fbc:	e5a3      	b.n	8016b06 <f_open+0x22>
 8016fbe:	4650      	mov	r0, sl
 8016fc0:	4659      	mov	r1, fp
 8016fc2:	f7fc fcc5 	bl	8013950 <move_window.part.5>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8016fc6:	f8dd a018 	ldr.w	sl, [sp, #24]
 8016fca:	f8ca 5010 	str.w	r5, [sl, #16]
		if (res == FR_OK) {
 8016fce:	2800      	cmp	r0, #0
 8016fd0:	d09f      	beq.n	8016f12 <f_open+0x42e>
 8016fd2:	e5e7      	b.n	8016ba4 <f_open+0xc0>
 8016fd4:	24003e1c 	.word	0x24003e1c

08016fd8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8016fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fdc:	469a      	mov	sl, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 8016fde:	2300      	movs	r3, #0
{
 8016fe0:	b08b      	sub	sp, #44	; 0x2c
	*br = 0;	/* Clear read byte counter */
 8016fe2:	f8ca 3000 	str.w	r3, [sl]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8016fe6:	b148      	cbz	r0, 8016ffc <f_read+0x24>
 8016fe8:	6803      	ldr	r3, [r0, #0]
 8016fea:	4680      	mov	r8, r0
 8016fec:	b133      	cbz	r3, 8016ffc <f_read+0x24>
 8016fee:	4689      	mov	r9, r1
 8016ff0:	7819      	ldrb	r1, [r3, #0]
 8016ff2:	b119      	cbz	r1, 8016ffc <f_read+0x24>
 8016ff4:	8880      	ldrh	r0, [r0, #4]
 8016ff6:	88d9      	ldrh	r1, [r3, #6]
 8016ff8:	4288      	cmp	r0, r1
 8016ffa:	d005      	beq.n	8017008 <f_read+0x30>
	FRESULT res = FR_INVALID_OBJECT;
 8016ffc:	2309      	movs	r3, #9
 8016ffe:	9300      	str	r3, [sp, #0]
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 8017000:	9800      	ldr	r0, [sp, #0]
 8017002:	b00b      	add	sp, #44	; 0x2c
 8017004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8017008:	7858      	ldrb	r0, [r3, #1]
 801700a:	9201      	str	r2, [sp, #4]
 801700c:	f7fc fbd6 	bl	80137bc <disk_status>
 8017010:	07c1      	lsls	r1, r0, #31
 8017012:	d4f3      	bmi.n	8016ffc <f_read+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8017014:	f898 3015 	ldrb.w	r3, [r8, #21]
 8017018:	9300      	str	r3, [sp, #0]
 801701a:	2b00      	cmp	r3, #0
 801701c:	d1f0      	bne.n	8017000 <f_read+0x28>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801701e:	f898 3014 	ldrb.w	r3, [r8, #20]
 8017022:	07da      	lsls	r2, r3, #31
 8017024:	f140 8116 	bpl.w	8017254 <f_read+0x27c>
	remain = fp->obj.objsize - fp->fptr;
 8017028:	f8d8 1018 	ldr.w	r1, [r8, #24]
 801702c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017030:	9a01      	ldr	r2, [sp, #4]
 8017032:	1a5b      	subs	r3, r3, r1
 8017034:	4293      	cmp	r3, r2
 8017036:	bf28      	it	cs
 8017038:	4613      	movcs	r3, r2
 801703a:	469b      	mov	fp, r3
	for ( ;  btr;								/* Repeat until all data read */
 801703c:	2b00      	cmp	r3, #0
 801703e:	d0df      	beq.n	8017000 <f_read+0x28>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8017040:	4643      	mov	r3, r8
 8017042:	f108 0234 	add.w	r2, r8, #52	; 0x34
 8017046:	f8cd a008 	str.w	sl, [sp, #8]
 801704a:	f853 0b30 	ldr.w	r0, [r3], #48
 801704e:	9205      	str	r2, [sp, #20]
 8017050:	9301      	str	r3, [sp, #4]
 8017052:	425b      	negs	r3, r3
 8017054:	4682      	mov	sl, r0
 8017056:	f003 0303 	and.w	r3, r3, #3
 801705a:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 801705e:	9304      	str	r3, [sp, #16]
 8017060:	3330      	adds	r3, #48	; 0x30
 8017062:	9208      	str	r2, [sp, #32]
 8017064:	9309      	str	r3, [sp, #36]	; 0x24
 8017066:	0893      	lsrs	r3, r2, #2
 8017068:	9307      	str	r3, [sp, #28]
 801706a:	f022 0303 	bic.w	r3, r2, #3
 801706e:	9306      	str	r3, [sp, #24]
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8017070:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8017074:	2b00      	cmp	r3, #0
 8017076:	d14b      	bne.n	8017110 <f_read+0x138>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8017078:	f8ba 600a 	ldrh.w	r6, [sl, #10]
 801707c:	0a4b      	lsrs	r3, r1, #9
 801707e:	3e01      	subs	r6, #1
			if (csect == 0) {					/* On the cluster boundary? */
 8017080:	401e      	ands	r6, r3
 8017082:	f000 80b7 	beq.w	80171f4 <f_read+0x21c>
 8017086:	f8d8 001c 	ldr.w	r0, [r8, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801708a:	f8da 3018 	ldr.w	r3, [sl, #24]
	clst -= 2;
 801708e:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8017090:	3b02      	subs	r3, #2
 8017092:	4298      	cmp	r0, r3
 8017094:	f080 80e7 	bcs.w	8017266 <f_read+0x28e>
	return clst * fs->csize + fs->database;
 8017098:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 801709c:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
 80170a0:	fb03 f500 	mul.w	r5, r3, r0
 80170a4:	9203      	str	r2, [sp, #12]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80170a6:	18af      	adds	r7, r5, r2
 80170a8:	f000 80dd 	beq.w	8017266 <f_read+0x28e>
			if (cc) {							/* Read maximum contiguous sectors directly */
 80170ac:	ea5f 245b 	movs.w	r4, fp, lsr #9
			sect += csect;
 80170b0:	4437      	add	r7, r6
			if (cc) {							/* Read maximum contiguous sectors directly */
 80170b2:	d015      	beq.n	80170e0 <f_read+0x108>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80170b4:	1932      	adds	r2, r6, r4
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80170b6:	4649      	mov	r1, r9
 80170b8:	f89a 0001 	ldrb.w	r0, [sl, #1]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80170bc:	429a      	cmp	r2, r3
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80170be:	463a      	mov	r2, r7
					cc = fs->csize - csect;
 80170c0:	bf88      	it	hi
 80170c2:	1b9c      	subhi	r4, r3, r6
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80170c4:	4623      	mov	r3, r4
 80170c6:	f7fc fb97 	bl	80137f8 <disk_read>
 80170ca:	2800      	cmp	r0, #0
 80170cc:	f000 80c5 	beq.w	801725a <f_read+0x282>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80170d0:	2301      	movs	r3, #1
 80170d2:	9300      	str	r3, [sp, #0]
}
 80170d4:	9800      	ldr	r0, [sp, #0]
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80170d6:	f888 3015 	strb.w	r3, [r8, #21]
}
 80170da:	b00b      	add	sp, #44	; 0x2c
 80170dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80170e0:	f8d8 2020 	ldr.w	r2, [r8, #32]
 80170e4:	42ba      	cmp	r2, r7
 80170e6:	d00d      	beq.n	8017104 <f_read+0x12c>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80170e8:	f998 3014 	ldrsb.w	r3, [r8, #20]
 80170ec:	f89a 0001 	ldrb.w	r0, [sl, #1]
 80170f0:	2b00      	cmp	r3, #0
 80170f2:	f2c0 80bd 	blt.w	8017270 <f_read+0x298>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80170f6:	2301      	movs	r3, #1
 80170f8:	463a      	mov	r2, r7
 80170fa:	9901      	ldr	r1, [sp, #4]
 80170fc:	f7fc fb7c 	bl	80137f8 <disk_read>
 8017100:	2800      	cmp	r0, #0
 8017102:	d1e5      	bne.n	80170d0 <f_read+0xf8>
 8017104:	f8d8 3018 	ldr.w	r3, [r8, #24]
			fp->sect = sect;
 8017108:	f8c8 7020 	str.w	r7, [r8, #32]
 801710c:	f3c3 0308 	ubfx	r3, r3, #0, #9
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8017110:	f5c3 7400 	rsb	r4, r3, #512	; 0x200
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8017114:	9d01      	ldr	r5, [sp, #4]
 8017116:	1d1a      	adds	r2, r3, #4
 8017118:	f109 0104 	add.w	r1, r9, #4
 801711c:	455c      	cmp	r4, fp
 801711e:	eb05 0003 	add.w	r0, r5, r3
 8017122:	442a      	add	r2, r5
 8017124:	bf28      	it	cs
 8017126:	465c      	movcs	r4, fp
 8017128:	4288      	cmp	r0, r1
 801712a:	bf38      	it	cc
 801712c:	4591      	cmpcc	r9, r2
 801712e:	d372      	bcc.n	8017216 <f_read+0x23e>
 8017130:	2c0b      	cmp	r4, #11
 8017132:	d970      	bls.n	8017216 <f_read+0x23e>
 8017134:	4242      	negs	r2, r0
 8017136:	1e66      	subs	r6, r4, #1
 8017138:	f012 0203 	ands.w	r2, r2, #3
 801713c:	d068      	beq.n	8017210 <f_read+0x238>
			*d++ = *s++;
 801713e:	7801      	ldrb	r1, [r0, #0]
 8017140:	2a01      	cmp	r2, #1
 8017142:	f100 0501 	add.w	r5, r0, #1
 8017146:	f109 0e01 	add.w	lr, r9, #1
 801714a:	f889 1000 	strb.w	r1, [r9]
 801714e:	d05c      	beq.n	801720a <f_read+0x232>
 8017150:	7841      	ldrb	r1, [r0, #1]
 8017152:	2a03      	cmp	r2, #3
 8017154:	f100 0502 	add.w	r5, r0, #2
 8017158:	f109 0e02 	add.w	lr, r9, #2
		} while (--cnt);
 801715c:	f1a4 0602 	sub.w	r6, r4, #2
			*d++ = *s++;
 8017160:	f889 1001 	strb.w	r1, [r9, #1]
 8017164:	d151      	bne.n	801720a <f_read+0x232>
 8017166:	7881      	ldrb	r1, [r0, #2]
 8017168:	f109 0e03 	add.w	lr, r9, #3
 801716c:	3003      	adds	r0, #3
		} while (--cnt);
 801716e:	1ee6      	subs	r6, r4, #3
 8017170:	9d01      	ldr	r5, [sp, #4]
			*d++ = *s++;
 8017172:	f889 1002 	strb.w	r1, [r9, #2]
 8017176:	4413      	add	r3, r2
 8017178:	eba4 0c02 	sub.w	ip, r4, r2
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801717c:	2100      	movs	r1, #0
 801717e:	444a      	add	r2, r9
 8017180:	442b      	add	r3, r5
 8017182:	ea4f 079c 	mov.w	r7, ip, lsr #2
 8017186:	3101      	adds	r1, #1
			*d++ = *s++;
 8017188:	f853 5b04 	ldr.w	r5, [r3], #4
 801718c:	428f      	cmp	r7, r1
 801718e:	f842 5b04 	str.w	r5, [r2], #4
 8017192:	d8f8      	bhi.n	8017186 <f_read+0x1ae>
 8017194:	f02c 0303 	bic.w	r3, ip, #3
 8017198:	459c      	cmp	ip, r3
 801719a:	eba6 0603 	sub.w	r6, r6, r3
 801719e:	eb0e 0203 	add.w	r2, lr, r3
 80171a2:	eb00 0103 	add.w	r1, r0, r3
 80171a6:	d016      	beq.n	80171d6 <f_read+0x1fe>
 80171a8:	5cc0      	ldrb	r0, [r0, r3]
		} while (--cnt);
 80171aa:	2e01      	cmp	r6, #1
			*d++ = *s++;
 80171ac:	f80e 0003 	strb.w	r0, [lr, r3]
		} while (--cnt);
 80171b0:	d011      	beq.n	80171d6 <f_read+0x1fe>
			*d++ = *s++;
 80171b2:	784b      	ldrb	r3, [r1, #1]
		} while (--cnt);
 80171b4:	2e02      	cmp	r6, #2
			*d++ = *s++;
 80171b6:	7053      	strb	r3, [r2, #1]
		} while (--cnt);
 80171b8:	d00d      	beq.n	80171d6 <f_read+0x1fe>
			*d++ = *s++;
 80171ba:	788b      	ldrb	r3, [r1, #2]
		} while (--cnt);
 80171bc:	2e03      	cmp	r6, #3
			*d++ = *s++;
 80171be:	7093      	strb	r3, [r2, #2]
		} while (--cnt);
 80171c0:	d009      	beq.n	80171d6 <f_read+0x1fe>
			*d++ = *s++;
 80171c2:	78cb      	ldrb	r3, [r1, #3]
		} while (--cnt);
 80171c4:	2e04      	cmp	r6, #4
			*d++ = *s++;
 80171c6:	70d3      	strb	r3, [r2, #3]
		} while (--cnt);
 80171c8:	d005      	beq.n	80171d6 <f_read+0x1fe>
			*d++ = *s++;
 80171ca:	790b      	ldrb	r3, [r1, #4]
		} while (--cnt);
 80171cc:	2e05      	cmp	r6, #5
			*d++ = *s++;
 80171ce:	7113      	strb	r3, [r2, #4]
		} while (--cnt);
 80171d0:	d001      	beq.n	80171d6 <f_read+0x1fe>
			*d++ = *s++;
 80171d2:	794b      	ldrb	r3, [r1, #5]
 80171d4:	7153      	strb	r3, [r2, #5]
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80171d6:	9a02      	ldr	r2, [sp, #8]
	for ( ;  btr;								/* Repeat until all data read */
 80171d8:	ebbb 0b04 	subs.w	fp, fp, r4
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80171dc:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80171e0:	44a1      	add	r9, r4
 80171e2:	6813      	ldr	r3, [r2, #0]
 80171e4:	4421      	add	r1, r4
 80171e6:	4423      	add	r3, r4
 80171e8:	f8c8 1018 	str.w	r1, [r8, #24]
 80171ec:	6013      	str	r3, [r2, #0]
	for ( ;  btr;								/* Repeat until all data read */
 80171ee:	f47f af3f 	bne.w	8017070 <f_read+0x98>
 80171f2:	e705      	b.n	8017000 <f_read+0x28>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80171f4:	b9c9      	cbnz	r1, 801722a <f_read+0x252>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80171f6:	f8d8 0008 	ldr.w	r0, [r8, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80171fa:	2801      	cmp	r0, #1
 80171fc:	d933      	bls.n	8017266 <f_read+0x28e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80171fe:	1c43      	adds	r3, r0, #1
 8017200:	f43f af66 	beq.w	80170d0 <f_read+0xf8>
				fp->clust = clst;				/* Update current cluster */
 8017204:	f8c8 001c 	str.w	r0, [r8, #28]
 8017208:	e73f      	b.n	801708a <f_read+0xb2>
			*d++ = *s++;
 801720a:	4628      	mov	r0, r5
 801720c:	9d01      	ldr	r5, [sp, #4]
 801720e:	e7b2      	b.n	8017176 <f_read+0x19e>
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8017210:	46ce      	mov	lr, r9
 8017212:	4626      	mov	r6, r4
 8017214:	e7af      	b.n	8017176 <f_read+0x19e>
 8017216:	f109 33ff 	add.w	r3, r9, #4294967295
 801721a:	1901      	adds	r1, r0, r4
			*d++ = *s++;
 801721c:	f810 2b01 	ldrb.w	r2, [r0], #1
		} while (--cnt);
 8017220:	4288      	cmp	r0, r1
			*d++ = *s++;
 8017222:	f803 2f01 	strb.w	r2, [r3, #1]!
		} while (--cnt);
 8017226:	d1f9      	bne.n	801721c <f_read+0x244>
 8017228:	e7d5      	b.n	80171d6 <f_read+0x1fe>
					if (fp->cltbl) {
 801722a:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 801722e:	f8d8 0000 	ldr.w	r0, [r8]
 8017232:	b36a      	cbz	r2, 8017290 <f_read+0x2b8>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8017234:	8940      	ldrh	r0, [r0, #10]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8017236:	1d11      	adds	r1, r2, #4
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8017238:	6852      	ldr	r2, [r2, #4]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801723a:	fbb3 f3f0 	udiv	r3, r3, r0
		if (ncl == 0) return 0;	/* End of table? (error) */
 801723e:	b922      	cbnz	r2, 801724a <f_read+0x272>
 8017240:	e011      	b.n	8017266 <f_read+0x28e>
		cl -= ncl; tbl++;		/* Next fragment */
 8017242:	1a9b      	subs	r3, r3, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8017244:	f851 2f08 	ldr.w	r2, [r1, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 8017248:	b16a      	cbz	r2, 8017266 <f_read+0x28e>
		if (cl < ncl) break;	/* In this fragment? */
 801724a:	429a      	cmp	r2, r3
 801724c:	d9f9      	bls.n	8017242 <f_read+0x26a>
	return cl + *tbl;	/* Return the cluster number */
 801724e:	6848      	ldr	r0, [r1, #4]
 8017250:	4418      	add	r0, r3
 8017252:	e7d2      	b.n	80171fa <f_read+0x222>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8017254:	2307      	movs	r3, #7
 8017256:	9300      	str	r3, [sp, #0]
 8017258:	e6d2      	b.n	8017000 <f_read+0x28>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801725a:	f998 3014 	ldrsb.w	r3, [r8, #20]
 801725e:	2b00      	cmp	r3, #0
 8017260:	db1b      	blt.n	801729a <f_read+0x2c2>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8017262:	0264      	lsls	r4, r4, #9
				continue;
 8017264:	e7b7      	b.n	80171d6 <f_read+0x1fe>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8017266:	2302      	movs	r3, #2
 8017268:	f888 3015 	strb.w	r3, [r8, #21]
 801726c:	9300      	str	r3, [sp, #0]
 801726e:	e6c7      	b.n	8017000 <f_read+0x28>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8017270:	2301      	movs	r3, #1
 8017272:	9901      	ldr	r1, [sp, #4]
 8017274:	f7fc face 	bl	8013814 <disk_write>
 8017278:	2800      	cmp	r0, #0
 801727a:	f47f af29 	bne.w	80170d0 <f_read+0xf8>
					fp->flag &= (BYTE)~FA_DIRTY;
 801727e:	f898 3014 	ldrb.w	r3, [r8, #20]
 8017282:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017286:	f888 3014 	strb.w	r3, [r8, #20]
 801728a:	f89a 0001 	ldrb.w	r0, [sl, #1]
 801728e:	e732      	b.n	80170f6 <f_read+0x11e>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8017290:	f8d8 101c 	ldr.w	r1, [r8, #28]
 8017294:	f7fd f9c0 	bl	8014618 <get_fat.isra.8>
 8017298:	e7af      	b.n	80171fa <f_read+0x222>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801729a:	f8d8 3020 	ldr.w	r3, [r8, #32]
 801729e:	1bd9      	subs	r1, r3, r7
 80172a0:	42a1      	cmp	r1, r4
 80172a2:	d2de      	bcs.n	8017262 <f_read+0x28a>
 80172a4:	9a03      	ldr	r2, [sp, #12]
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80172a6:	eb09 2141 	add.w	r1, r9, r1, lsl #9
 80172aa:	9f01      	ldr	r7, [sp, #4]
 80172ac:	1a9b      	subs	r3, r3, r2
 80172ae:	463a      	mov	r2, r7
 80172b0:	1b9b      	subs	r3, r3, r6
 80172b2:	1b5b      	subs	r3, r3, r5
 80172b4:	9d05      	ldr	r5, [sp, #20]
 80172b6:	025b      	lsls	r3, r3, #9
 80172b8:	eb09 0003 	add.w	r0, r9, r3
 80172bc:	4285      	cmp	r5, r0
 80172be:	d903      	bls.n	80172c8 <f_read+0x2f0>
 80172c0:	1d18      	adds	r0, r3, #4
 80172c2:	4448      	add	r0, r9
 80172c4:	4287      	cmp	r7, r0
 80172c6:	d348      	bcc.n	801735a <f_read+0x382>
 80172c8:	9e04      	ldr	r6, [sp, #16]
 80172ca:	2e00      	cmp	r6, #0
 80172cc:	d040      	beq.n	8017350 <f_read+0x378>
			*d++ = *s++;
 80172ce:	f898 5030 	ldrb.w	r5, [r8, #48]	; 0x30
 80172d2:	2e01      	cmp	r6, #1
 80172d4:	f108 0231 	add.w	r2, r8, #49	; 0x31
 80172d8:	f101 0001 	add.w	r0, r1, #1
 80172dc:	700d      	strb	r5, [r1, #0]
 80172de:	d033      	beq.n	8017348 <f_read+0x370>
 80172e0:	f898 5031 	ldrb.w	r5, [r8, #49]	; 0x31
 80172e4:	2e03      	cmp	r6, #3
 80172e6:	f108 0232 	add.w	r2, r8, #50	; 0x32
 80172ea:	f101 0002 	add.w	r0, r1, #2
 80172ee:	704d      	strb	r5, [r1, #1]
 80172f0:	d13d      	bne.n	801736e <f_read+0x396>
 80172f2:	f898 5032 	ldrb.w	r5, [r8, #50]	; 0x32
 80172f6:	1cc8      	adds	r0, r1, #3
 80172f8:	f108 0233 	add.w	r2, r8, #51	; 0x33
 80172fc:	708d      	strb	r5, [r1, #2]
 80172fe:	f240 15fd 	movw	r5, #509	; 0x1fd
 8017302:	4631      	mov	r1, r6
 8017304:	440b      	add	r3, r1
 8017306:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017308:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801730c:	eb08 0601 	add.w	r6, r8, r1
 8017310:	444b      	add	r3, r9
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8017312:	2100      	movs	r1, #0
 8017314:	3101      	adds	r1, #1
			*d++ = *s++;
 8017316:	f856 7b04 	ldr.w	r7, [r6], #4
 801731a:	458c      	cmp	ip, r1
 801731c:	f843 7b04 	str.w	r7, [r3], #4
 8017320:	d8f8      	bhi.n	8017314 <f_read+0x33c>
 8017322:	9e06      	ldr	r6, [sp, #24]
 8017324:	9f08      	ldr	r7, [sp, #32]
 8017326:	1bad      	subs	r5, r5, r6
 8017328:	1983      	adds	r3, r0, r6
 801732a:	42be      	cmp	r6, r7
 801732c:	eb02 0106 	add.w	r1, r2, r6
 8017330:	d097      	beq.n	8017262 <f_read+0x28a>
 8017332:	5d92      	ldrb	r2, [r2, r6]
		} while (--cnt);
 8017334:	2d01      	cmp	r5, #1
			*d++ = *s++;
 8017336:	5582      	strb	r2, [r0, r6]
		} while (--cnt);
 8017338:	d093      	beq.n	8017262 <f_read+0x28a>
			*d++ = *s++;
 801733a:	784a      	ldrb	r2, [r1, #1]
		} while (--cnt);
 801733c:	2d02      	cmp	r5, #2
			*d++ = *s++;
 801733e:	705a      	strb	r2, [r3, #1]
		} while (--cnt);
 8017340:	d08f      	beq.n	8017262 <f_read+0x28a>
			*d++ = *s++;
 8017342:	788a      	ldrb	r2, [r1, #2]
 8017344:	709a      	strb	r2, [r3, #2]
 8017346:	e78c      	b.n	8017262 <f_read+0x28a>
 8017348:	f240 15ff 	movw	r5, #511	; 0x1ff
 801734c:	4631      	mov	r1, r6
 801734e:	e7d9      	b.n	8017304 <f_read+0x32c>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8017350:	4608      	mov	r0, r1
 8017352:	f44f 7500 	mov.w	r5, #512	; 0x200
 8017356:	4631      	mov	r1, r6
 8017358:	e7d4      	b.n	8017304 <f_read+0x32c>
 801735a:	3901      	subs	r1, #1
 801735c:	f508 700c 	add.w	r0, r8, #560	; 0x230
			*d++ = *s++;
 8017360:	f812 3b01 	ldrb.w	r3, [r2], #1
		} while (--cnt);
 8017364:	4290      	cmp	r0, r2
			*d++ = *s++;
 8017366:	f801 3f01 	strb.w	r3, [r1, #1]!
		} while (--cnt);
 801736a:	d1f9      	bne.n	8017360 <f_read+0x388>
 801736c:	e779      	b.n	8017262 <f_read+0x28a>
			*d++ = *s++;
 801736e:	f44f 75ff 	mov.w	r5, #510	; 0x1fe
 8017372:	4631      	mov	r1, r6
 8017374:	e7c6      	b.n	8017304 <f_read+0x32c>
 8017376:	bf00      	nop

08017378 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8017378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801737c:	469a      	mov	sl, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 801737e:	2300      	movs	r3, #0
{
 8017380:	b08b      	sub	sp, #44	; 0x2c
	*bw = 0;	/* Clear write byte counter */
 8017382:	f8ca 3000 	str.w	r3, [sl]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8017386:	b150      	cbz	r0, 801739e <f_write+0x26>
 8017388:	6803      	ldr	r3, [r0, #0]
 801738a:	4604      	mov	r4, r0
 801738c:	b13b      	cbz	r3, 801739e <f_write+0x26>
 801738e:	4690      	mov	r8, r2
 8017390:	781a      	ldrb	r2, [r3, #0]
 8017392:	b122      	cbz	r2, 801739e <f_write+0x26>
 8017394:	460e      	mov	r6, r1
 8017396:	88da      	ldrh	r2, [r3, #6]
 8017398:	8881      	ldrh	r1, [r0, #4]
 801739a:	4291      	cmp	r1, r2
 801739c:	d005      	beq.n	80173aa <f_write+0x32>
	FRESULT res = FR_INVALID_OBJECT;
 801739e:	f04f 0b09 	mov.w	fp, #9
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 80173a2:	4658      	mov	r0, fp
 80173a4:	b00b      	add	sp, #44	; 0x2c
 80173a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80173aa:	7858      	ldrb	r0, [r3, #1]
 80173ac:	f7fc fa06 	bl	80137bc <disk_status>
 80173b0:	07c1      	lsls	r1, r0, #31
 80173b2:	d4f4      	bmi.n	801739e <f_write+0x26>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80173b4:	f894 b015 	ldrb.w	fp, [r4, #21]
 80173b8:	f1bb 0f00 	cmp.w	fp, #0
 80173bc:	d1f1      	bne.n	80173a2 <f_write+0x2a>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80173be:	7d23      	ldrb	r3, [r4, #20]
 80173c0:	079a      	lsls	r2, r3, #30
 80173c2:	f140 8136 	bpl.w	8017632 <f_write+0x2ba>
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80173c6:	69a2      	ldr	r2, [r4, #24]
 80173c8:	eb12 0f08 	cmn.w	r2, r8
 80173cc:	d301      	bcc.n	80173d2 <f_write+0x5a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80173ce:	ea6f 0802 	mvn.w	r8, r2
	for ( ;  btw;							/* Repeat until all data written */
 80173d2:	f1b8 0f00 	cmp.w	r8, #0
 80173d6:	f000 80f0 	beq.w	80175ba <f_write+0x242>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80173da:	4623      	mov	r3, r4
 80173dc:	f104 0134 	add.w	r1, r4, #52	; 0x34
 80173e0:	f8cd b00c 	str.w	fp, [sp, #12]
 80173e4:	46d3      	mov	fp, sl
 80173e6:	9105      	str	r1, [sp, #20]
 80173e8:	f853 1b30 	ldr.w	r1, [r3], #48
 80173ec:	e9cd 3100 	strd	r3, r1, [sp]
 80173f0:	425b      	negs	r3, r3
 80173f2:	f003 0303 	and.w	r3, r3, #3
 80173f6:	f5c3 7100 	rsb	r1, r3, #512	; 0x200
 80173fa:	9304      	str	r3, [sp, #16]
 80173fc:	3330      	adds	r3, #48	; 0x30
 80173fe:	9108      	str	r1, [sp, #32]
 8017400:	9309      	str	r3, [sp, #36]	; 0x24
 8017402:	088b      	lsrs	r3, r1, #2
 8017404:	9307      	str	r3, [sp, #28]
 8017406:	f021 0303 	bic.w	r3, r1, #3
 801740a:	9306      	str	r3, [sp, #24]
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801740c:	f3c2 0308 	ubfx	r3, r2, #0, #9
 8017410:	2b00      	cmp	r3, #0
 8017412:	d151      	bne.n	80174b8 <f_write+0x140>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8017414:	9b01      	ldr	r3, [sp, #4]
 8017416:	895f      	ldrh	r7, [r3, #10]
 8017418:	0a53      	lsrs	r3, r2, #9
 801741a:	3f01      	subs	r7, #1
			if (csect == 0) {				/* On the cluster boundary? */
 801741c:	401f      	ands	r7, r3
 801741e:	d10f      	bne.n	8017440 <f_write+0xc8>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8017420:	2a00      	cmp	r2, #0
 8017422:	f040 80df 	bne.w	80175e4 <f_write+0x26c>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8017426:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8017428:	2800      	cmp	r0, #0
 801742a:	f000 8119 	beq.w	8017660 <f_write+0x2e8>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801742e:	2801      	cmp	r0, #1
 8017430:	f000 8180 	beq.w	8017734 <f_write+0x3bc>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8017434:	1c43      	adds	r3, r0, #1
 8017436:	d02c      	beq.n	8017492 <f_write+0x11a>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8017438:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 801743a:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801743c:	b903      	cbnz	r3, 8017440 <f_write+0xc8>
 801743e:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8017440:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8017444:	2b00      	cmp	r3, #0
 8017446:	f2c0 80e5 	blt.w	8017614 <f_write+0x29c>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801744a:	9901      	ldr	r1, [sp, #4]
	clst -= 2;
 801744c:	69e3      	ldr	r3, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801744e:	698a      	ldr	r2, [r1, #24]
	clst -= 2;
 8017450:	f1a3 0902 	sub.w	r9, r3, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8017454:	3a02      	subs	r2, #2
 8017456:	4591      	cmp	r9, r2
 8017458:	f080 816c 	bcs.w	8017734 <f_write+0x3bc>
	return clst * fs->csize + fs->database;
 801745c:	894b      	ldrh	r3, [r1, #10]
 801745e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8017460:	fb03 f909 	mul.w	r9, r3, r9
 8017464:	9202      	str	r2, [sp, #8]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8017466:	eb19 0a02 	adds.w	sl, r9, r2
 801746a:	f000 8163 	beq.w	8017734 <f_write+0x3bc>
			if (cc) {						/* Write maximum contiguous sectors directly */
 801746e:	ea5f 2558 	movs.w	r5, r8, lsr #9
			sect += csect;
 8017472:	44ba      	add	sl, r7
			if (cc) {						/* Write maximum contiguous sectors directly */
 8017474:	d014      	beq.n	80174a0 <f_write+0x128>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8017476:	197a      	adds	r2, r7, r5
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8017478:	9801      	ldr	r0, [sp, #4]
 801747a:	4631      	mov	r1, r6
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801747c:	429a      	cmp	r2, r3
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801747e:	7840      	ldrb	r0, [r0, #1]
 8017480:	4652      	mov	r2, sl
					cc = fs->csize - csect;
 8017482:	bf88      	it	hi
 8017484:	1bdd      	subhi	r5, r3, r7
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8017486:	462b      	mov	r3, r5
 8017488:	f7fc f9c4 	bl	8013814 <disk_write>
 801748c:	2800      	cmp	r0, #0
 801748e:	f000 80d3 	beq.w	8017638 <f_write+0x2c0>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8017492:	2301      	movs	r3, #1
 8017494:	469b      	mov	fp, r3
 8017496:	7563      	strb	r3, [r4, #21]
}
 8017498:	4658      	mov	r0, fp
 801749a:	b00b      	add	sp, #44	; 0x2c
 801749c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80174a0:	6a22      	ldr	r2, [r4, #32]
 80174a2:	69a3      	ldr	r3, [r4, #24]
 80174a4:	4552      	cmp	r2, sl
 80174a6:	d003      	beq.n	80174b0 <f_write+0x138>
 80174a8:	68e2      	ldr	r2, [r4, #12]
 80174aa:	429a      	cmp	r2, r3
 80174ac:	f200 80cc 	bhi.w	8017648 <f_write+0x2d0>
 80174b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
			fp->sect = sect;
 80174b4:	f8c4 a020 	str.w	sl, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80174b8:	f5c3 7500 	rsb	r5, r3, #512	; 0x200
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80174bc:	9f00      	ldr	r7, [sp, #0]
 80174be:	1d1a      	adds	r2, r3, #4
 80174c0:	1d31      	adds	r1, r6, #4
 80174c2:	4545      	cmp	r5, r8
 80174c4:	eb07 0003 	add.w	r0, r7, r3
 80174c8:	443a      	add	r2, r7
 80174ca:	bf28      	it	cs
 80174cc:	4645      	movcs	r5, r8
 80174ce:	4288      	cmp	r0, r1
 80174d0:	bf38      	it	cc
 80174d2:	4296      	cmpcc	r6, r2
 80174d4:	d37d      	bcc.n	80175d2 <f_write+0x25a>
 80174d6:	2d0b      	cmp	r5, #11
 80174d8:	d97b      	bls.n	80175d2 <f_write+0x25a>
 80174da:	4272      	negs	r2, r6
 80174dc:	f105 3cff 	add.w	ip, r5, #4294967295
 80174e0:	f012 0203 	ands.w	r2, r2, #3
 80174e4:	d072      	beq.n	80175cc <f_write+0x254>
			*d++ = *s++;
 80174e6:	7831      	ldrb	r1, [r6, #0]
 80174e8:	2a01      	cmp	r2, #1
 80174ea:	f106 0a01 	add.w	sl, r6, #1
 80174ee:	f100 0701 	add.w	r7, r0, #1
 80174f2:	7001      	strb	r1, [r0, #0]
 80174f4:	d067      	beq.n	80175c6 <f_write+0x24e>
 80174f6:	7871      	ldrb	r1, [r6, #1]
 80174f8:	2a03      	cmp	r2, #3
 80174fa:	f106 0a02 	add.w	sl, r6, #2
 80174fe:	f100 0702 	add.w	r7, r0, #2
		} while (--cnt);
 8017502:	f1a5 0c02 	sub.w	ip, r5, #2
			*d++ = *s++;
 8017506:	7041      	strb	r1, [r0, #1]
 8017508:	d15d      	bne.n	80175c6 <f_write+0x24e>
 801750a:	78b1      	ldrb	r1, [r6, #2]
 801750c:	f106 0a03 	add.w	sl, r6, #3
		} while (--cnt);
 8017510:	f1a5 0c03 	sub.w	ip, r5, #3
			*d++ = *s++;
 8017514:	3003      	adds	r0, #3
 8017516:	f800 1c01 	strb.w	r1, [r0, #-1]
 801751a:	9f00      	ldr	r7, [sp, #0]
 801751c:	4413      	add	r3, r2
 801751e:	eba5 0902 	sub.w	r9, r5, r2
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8017522:	2100      	movs	r1, #0
 8017524:	4432      	add	r2, r6
 8017526:	443b      	add	r3, r7
 8017528:	ea4f 0e99 	mov.w	lr, r9, lsr #2
 801752c:	3101      	adds	r1, #1
			*d++ = *s++;
 801752e:	f852 7b04 	ldr.w	r7, [r2], #4
 8017532:	458e      	cmp	lr, r1
 8017534:	f843 7b04 	str.w	r7, [r3], #4
 8017538:	d8f8      	bhi.n	801752c <f_write+0x1b4>
 801753a:	f029 0303 	bic.w	r3, r9, #3
 801753e:	4599      	cmp	r9, r3
 8017540:	ebac 0c03 	sub.w	ip, ip, r3
 8017544:	eb00 0203 	add.w	r2, r0, r3
 8017548:	eb0a 0103 	add.w	r1, sl, r3
 801754c:	d039      	beq.n	80175c2 <f_write+0x24a>
 801754e:	f81a 7003 	ldrb.w	r7, [sl, r3]
		} while (--cnt);
 8017552:	f1bc 0f01 	cmp.w	ip, #1
			*d++ = *s++;
 8017556:	54c7      	strb	r7, [r0, r3]
		} while (--cnt);
 8017558:	d033      	beq.n	80175c2 <f_write+0x24a>
			*d++ = *s++;
 801755a:	784b      	ldrb	r3, [r1, #1]
		} while (--cnt);
 801755c:	f1bc 0f02 	cmp.w	ip, #2
			*d++ = *s++;
 8017560:	7053      	strb	r3, [r2, #1]
		} while (--cnt);
 8017562:	d02e      	beq.n	80175c2 <f_write+0x24a>
			*d++ = *s++;
 8017564:	788b      	ldrb	r3, [r1, #2]
		} while (--cnt);
 8017566:	f1bc 0f03 	cmp.w	ip, #3
			*d++ = *s++;
 801756a:	7093      	strb	r3, [r2, #2]
		} while (--cnt);
 801756c:	d029      	beq.n	80175c2 <f_write+0x24a>
			*d++ = *s++;
 801756e:	78cb      	ldrb	r3, [r1, #3]
		} while (--cnt);
 8017570:	f1bc 0f04 	cmp.w	ip, #4
			*d++ = *s++;
 8017574:	70d3      	strb	r3, [r2, #3]
		} while (--cnt);
 8017576:	d024      	beq.n	80175c2 <f_write+0x24a>
			*d++ = *s++;
 8017578:	790b      	ldrb	r3, [r1, #4]
		} while (--cnt);
 801757a:	f1bc 0f05 	cmp.w	ip, #5
			*d++ = *s++;
 801757e:	7113      	strb	r3, [r2, #4]
		} while (--cnt);
 8017580:	d01f      	beq.n	80175c2 <f_write+0x24a>
			*d++ = *s++;
 8017582:	794b      	ldrb	r3, [r1, #5]
 8017584:	1971      	adds	r1, r6, r5
 8017586:	7153      	strb	r3, [r2, #5]
		fp->flag |= FA_DIRTY;
 8017588:	7d23      	ldrb	r3, [r4, #20]
 801758a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801758e:	7523      	strb	r3, [r4, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8017590:	69a2      	ldr	r2, [r4, #24]
 8017592:	460e      	mov	r6, r1
 8017594:	68e1      	ldr	r1, [r4, #12]
 8017596:	442a      	add	r2, r5
 8017598:	f8db 3000 	ldr.w	r3, [fp]
 801759c:	4291      	cmp	r1, r2
 801759e:	442b      	add	r3, r5
 80175a0:	61a2      	str	r2, [r4, #24]
 80175a2:	bf38      	it	cc
 80175a4:	4611      	movcc	r1, r2
	for ( ;  btw;							/* Repeat until all data written */
 80175a6:	ebb8 0805 	subs.w	r8, r8, r5
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80175aa:	60e1      	str	r1, [r4, #12]
 80175ac:	f8cb 3000 	str.w	r3, [fp]
	for ( ;  btw;							/* Repeat until all data written */
 80175b0:	f47f af2c 	bne.w	801740c <f_write+0x94>
 80175b4:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80175b8:	7d23      	ldrb	r3, [r4, #20]
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80175ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80175be:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 80175c0:	e6ef      	b.n	80173a2 <f_write+0x2a>
 80175c2:	1971      	adds	r1, r6, r5
 80175c4:	e7e0      	b.n	8017588 <f_write+0x210>
			*d++ = *s++;
 80175c6:	4638      	mov	r0, r7
 80175c8:	9f00      	ldr	r7, [sp, #0]
 80175ca:	e7a7      	b.n	801751c <f_write+0x1a4>
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80175cc:	46b2      	mov	sl, r6
 80175ce:	46ac      	mov	ip, r5
 80175d0:	e7a4      	b.n	801751c <f_write+0x1a4>
 80175d2:	3801      	subs	r0, #1
 80175d4:	1971      	adds	r1, r6, r5
			*d++ = *s++;
 80175d6:	f816 3b01 	ldrb.w	r3, [r6], #1
		} while (--cnt);
 80175da:	428e      	cmp	r6, r1
			*d++ = *s++;
 80175dc:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 80175e0:	d1f9      	bne.n	80175d6 <f_write+0x25e>
 80175e2:	e7d1      	b.n	8017588 <f_write+0x210>
					if (fp->cltbl) {
 80175e4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80175e6:	2a00      	cmp	r2, #0
 80175e8:	d042      	beq.n	8017670 <f_write+0x2f8>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80175ea:	6820      	ldr	r0, [r4, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80175ec:	1d11      	adds	r1, r2, #4
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80175ee:	6852      	ldr	r2, [r2, #4]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80175f0:	8940      	ldrh	r0, [r0, #10]
 80175f2:	fbb3 f3f0 	udiv	r3, r3, r0
		if (ncl == 0) return 0;	/* End of table? (error) */
 80175f6:	b92a      	cbnz	r2, 8017604 <f_write+0x28c>
 80175f8:	e7dc      	b.n	80175b4 <f_write+0x23c>
		cl -= ncl; tbl++;		/* Next fragment */
 80175fa:	1a9b      	subs	r3, r3, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80175fc:	f851 2f08 	ldr.w	r2, [r1, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 8017600:	2a00      	cmp	r2, #0
 8017602:	d0d7      	beq.n	80175b4 <f_write+0x23c>
		if (cl < ncl) break;	/* In this fragment? */
 8017604:	429a      	cmp	r2, r3
 8017606:	d9f8      	bls.n	80175fa <f_write+0x282>
	return cl + *tbl;	/* Return the cluster number */
 8017608:	6848      	ldr	r0, [r1, #4]
 801760a:	4418      	add	r0, r3
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801760c:	2800      	cmp	r0, #0
 801760e:	f47f af0e 	bne.w	801742e <f_write+0xb6>
 8017612:	e7cf      	b.n	80175b4 <f_write+0x23c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8017614:	e9dd 1000 	ldrd	r1, r0, [sp]
 8017618:	2301      	movs	r3, #1
 801761a:	6a22      	ldr	r2, [r4, #32]
 801761c:	7840      	ldrb	r0, [r0, #1]
 801761e:	f7fc f8f9 	bl	8013814 <disk_write>
 8017622:	2800      	cmp	r0, #0
 8017624:	f47f af35 	bne.w	8017492 <f_write+0x11a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8017628:	7d23      	ldrb	r3, [r4, #20]
 801762a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801762e:	7523      	strb	r3, [r4, #20]
 8017630:	e70b      	b.n	801744a <f_write+0xd2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8017632:	f04f 0b07 	mov.w	fp, #7
 8017636:	e6b4      	b.n	80173a2 <f_write+0x2a>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8017638:	6a23      	ldr	r3, [r4, #32]
 801763a:	eba3 0a0a 	sub.w	sl, r3, sl
 801763e:	45aa      	cmp	sl, r5
 8017640:	d31e      	bcc.n	8017680 <f_write+0x308>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8017642:	026d      	lsls	r5, r5, #9
 8017644:	1971      	adds	r1, r6, r5
				continue;
 8017646:	e7a3      	b.n	8017590 <f_write+0x218>
 8017648:	4608      	mov	r0, r1
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801764a:	2301      	movs	r3, #1
 801764c:	4652      	mov	r2, sl
 801764e:	9900      	ldr	r1, [sp, #0]
 8017650:	7840      	ldrb	r0, [r0, #1]
 8017652:	f7fc f8d1 	bl	80137f8 <disk_read>
				fp->fptr < fp->obj.objsize &&
 8017656:	2800      	cmp	r0, #0
 8017658:	f47f af1b 	bne.w	8017492 <f_write+0x11a>
 801765c:	69a3      	ldr	r3, [r4, #24]
 801765e:	e727      	b.n	80174b0 <f_write+0x138>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8017660:	4639      	mov	r1, r7
 8017662:	4620      	mov	r0, r4
 8017664:	f7fd f8fe 	bl	8014864 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8017668:	2800      	cmp	r0, #0
 801766a:	f47f aee0 	bne.w	801742e <f_write+0xb6>
 801766e:	e7a1      	b.n	80175b4 <f_write+0x23c>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8017670:	69e1      	ldr	r1, [r4, #28]
 8017672:	4620      	mov	r0, r4
 8017674:	f7fd f8f6 	bl	8014864 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8017678:	2800      	cmp	r0, #0
 801767a:	f47f aed8 	bne.w	801742e <f_write+0xb6>
 801767e:	e799      	b.n	80175b4 <f_write+0x23c>
 8017680:	9a02      	ldr	r2, [sp, #8]
 8017682:	9805      	ldr	r0, [sp, #20]
 8017684:	1a9b      	subs	r3, r3, r2
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8017686:	f8dd e000 	ldr.w	lr, [sp]
 801768a:	eb06 224a 	add.w	r2, r6, sl, lsl #9
 801768e:	eba3 0309 	sub.w	r3, r3, r9
 8017692:	46f4      	mov	ip, lr
 8017694:	1bdb      	subs	r3, r3, r7
 8017696:	025b      	lsls	r3, r3, #9
 8017698:	18f1      	adds	r1, r6, r3
 801769a:	4288      	cmp	r0, r1
 801769c:	d903      	bls.n	80176a6 <f_write+0x32e>
 801769e:	1d19      	adds	r1, r3, #4
 80176a0:	4431      	add	r1, r6
 80176a2:	458e      	cmp	lr, r1
 80176a4:	d34a      	bcc.n	801773c <f_write+0x3c4>
 80176a6:	9804      	ldr	r0, [sp, #16]
 80176a8:	2800      	cmp	r0, #0
 80176aa:	d056      	beq.n	801775a <f_write+0x3e2>
			*d++ = *s++;
 80176ac:	7811      	ldrb	r1, [r2, #0]
 80176ae:	2801      	cmp	r0, #1
 80176b0:	f102 0e01 	add.w	lr, r2, #1
 80176b4:	f104 0c31 	add.w	ip, r4, #49	; 0x31
 80176b8:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
 80176bc:	d049      	beq.n	8017752 <f_write+0x3da>
 80176be:	7851      	ldrb	r1, [r2, #1]
 80176c0:	2803      	cmp	r0, #3
 80176c2:	f102 0e02 	add.w	lr, r2, #2
 80176c6:	f104 0c32 	add.w	ip, r4, #50	; 0x32
 80176ca:	f884 1031 	strb.w	r1, [r4, #49]	; 0x31
 80176ce:	d149      	bne.n	8017764 <f_write+0x3ec>
 80176d0:	7891      	ldrb	r1, [r2, #2]
 80176d2:	f102 0e03 	add.w	lr, r2, #3
 80176d6:	f104 0c33 	add.w	ip, r4, #51	; 0x33
 80176da:	f240 17fd 	movw	r7, #509	; 0x1fd
 80176de:	4602      	mov	r2, r0
 80176e0:	f884 1032 	strb.w	r1, [r4, #50]	; 0x32
 80176e4:	4413      	add	r3, r2
 80176e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80176e8:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80176ec:	18a1      	adds	r1, r4, r2
 80176ee:	4433      	add	r3, r6
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80176f0:	2200      	movs	r2, #0
 80176f2:	3201      	adds	r2, #1
			*d++ = *s++;
 80176f4:	f853 0b04 	ldr.w	r0, [r3], #4
 80176f8:	4591      	cmp	r9, r2
 80176fa:	f841 0b04 	str.w	r0, [r1], #4
 80176fe:	d8f8      	bhi.n	80176f2 <f_write+0x37a>
 8017700:	9806      	ldr	r0, [sp, #24]
 8017702:	9908      	ldr	r1, [sp, #32]
 8017704:	1a3f      	subs	r7, r7, r0
 8017706:	eb0c 0300 	add.w	r3, ip, r0
 801770a:	4288      	cmp	r0, r1
 801770c:	eb0e 0200 	add.w	r2, lr, r0
 8017710:	d00b      	beq.n	801772a <f_write+0x3b2>
 8017712:	f81e 1000 	ldrb.w	r1, [lr, r0]
		} while (--cnt);
 8017716:	2f01      	cmp	r7, #1
			*d++ = *s++;
 8017718:	f80c 1000 	strb.w	r1, [ip, r0]
		} while (--cnt);
 801771c:	d005      	beq.n	801772a <f_write+0x3b2>
			*d++ = *s++;
 801771e:	7851      	ldrb	r1, [r2, #1]
		} while (--cnt);
 8017720:	2f02      	cmp	r7, #2
			*d++ = *s++;
 8017722:	7059      	strb	r1, [r3, #1]
		} while (--cnt);
 8017724:	d001      	beq.n	801772a <f_write+0x3b2>
			*d++ = *s++;
 8017726:	7892      	ldrb	r2, [r2, #2]
 8017728:	709a      	strb	r2, [r3, #2]
					fp->flag &= (BYTE)~FA_DIRTY;
 801772a:	7d23      	ldrb	r3, [r4, #20]
 801772c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017730:	7523      	strb	r3, [r4, #20]
 8017732:	e786      	b.n	8017642 <f_write+0x2ca>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8017734:	2302      	movs	r3, #2
 8017736:	7563      	strb	r3, [r4, #21]
 8017738:	469b      	mov	fp, r3
 801773a:	e632      	b.n	80173a2 <f_write+0x2a>
 801773c:	f104 032f 	add.w	r3, r4, #47	; 0x2f
 8017740:	f502 7000 	add.w	r0, r2, #512	; 0x200
			*d++ = *s++;
 8017744:	f812 1b01 	ldrb.w	r1, [r2], #1
		} while (--cnt);
 8017748:	4290      	cmp	r0, r2
			*d++ = *s++;
 801774a:	f803 1f01 	strb.w	r1, [r3, #1]!
		} while (--cnt);
 801774e:	d1f9      	bne.n	8017744 <f_write+0x3cc>
 8017750:	e7eb      	b.n	801772a <f_write+0x3b2>
			*d++ = *s++;
 8017752:	f240 17ff 	movw	r7, #511	; 0x1ff
 8017756:	4602      	mov	r2, r0
 8017758:	e7c4      	b.n	80176e4 <f_write+0x36c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801775a:	4696      	mov	lr, r2
 801775c:	f44f 7700 	mov.w	r7, #512	; 0x200
 8017760:	4602      	mov	r2, r0
 8017762:	e7bf      	b.n	80176e4 <f_write+0x36c>
			*d++ = *s++;
 8017764:	f44f 77ff 	mov.w	r7, #510	; 0x1fe
 8017768:	4602      	mov	r2, r0
 801776a:	e7bb      	b.n	80176e4 <f_write+0x36c>

0801776c <f_close>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801776c:	b138      	cbz	r0, 801777e <f_close+0x12>
 801776e:	6803      	ldr	r3, [r0, #0]
 8017770:	b12b      	cbz	r3, 801777e <f_close+0x12>
 8017772:	781a      	ldrb	r2, [r3, #0]
 8017774:	b11a      	cbz	r2, 801777e <f_close+0x12>
 8017776:	8881      	ldrh	r1, [r0, #4]
 8017778:	88da      	ldrh	r2, [r3, #6]
 801777a:	4291      	cmp	r1, r2
 801777c:	d001      	beq.n	8017782 <f_close+0x16>
	FRESULT res = FR_INVALID_OBJECT;
 801777e:	2009      	movs	r0, #9
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8017780:	4770      	bx	lr
{
 8017782:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017786:	4604      	mov	r4, r0
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8017788:	7858      	ldrb	r0, [r3, #1]
 801778a:	f7fc f817 	bl	80137bc <disk_status>
 801778e:	07c1      	lsls	r1, r0, #31
 8017790:	f100 8088 	bmi.w	80178a4 <f_close+0x138>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8017794:	7d23      	ldrb	r3, [r4, #20]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8017796:	6825      	ldr	r5, [r4, #0]
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8017798:	065a      	lsls	r2, r3, #25
 801779a:	d576      	bpl.n	801788a <f_close+0x11e>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801779c:	061b      	lsls	r3, r3, #24
 801779e:	f100 8095 	bmi.w	80178cc <f_close+0x160>
			tm = GET_FATTIME();				/* Modified time */
 80177a2:	f7fc f853 	bl	801384c <get_fattime>
				res = move_window(fs, fp->dir_sect);
 80177a6:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80177aa:	6b2f      	ldr	r7, [r5, #48]	; 0x30
			tm = GET_FATTIME();				/* Modified time */
 80177ac:	4606      	mov	r6, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 80177ae:	45b8      	cmp	r8, r7
 80177b0:	d035      	beq.n	801781e <f_close+0xb2>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80177b2:	78eb      	ldrb	r3, [r5, #3]
 80177b4:	f105 0934 	add.w	r9, r5, #52	; 0x34
 80177b8:	7868      	ldrb	r0, [r5, #1]
 80177ba:	b303      	cbz	r3, 80177fe <f_close+0x92>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80177bc:	2301      	movs	r3, #1
 80177be:	463a      	mov	r2, r7
 80177c0:	4649      	mov	r1, r9
 80177c2:	f7fc f827 	bl	8013814 <disk_write>
 80177c6:	bb28      	cbnz	r0, 8017814 <f_close+0xa8>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80177c8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80177ca:	69eb      	ldr	r3, [r5, #28]
 80177cc:	1aba      	subs	r2, r7, r2
			fs->wflag = 0;
 80177ce:	70e8      	strb	r0, [r5, #3]
 80177d0:	7868      	ldrb	r0, [r5, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80177d2:	429a      	cmp	r2, r3
 80177d4:	d213      	bcs.n	80177fe <f_close+0x92>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80177d6:	f895 a002 	ldrb.w	sl, [r5, #2]
 80177da:	f1ba 0f01 	cmp.w	sl, #1
 80177de:	d802      	bhi.n	80177e6 <f_close+0x7a>
 80177e0:	e00d      	b.n	80177fe <f_close+0x92>
 80177e2:	69eb      	ldr	r3, [r5, #28]
 80177e4:	7868      	ldrb	r0, [r5, #1]
					wsect += fs->fsize;
 80177e6:	441f      	add	r7, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80177e8:	f10a 3aff 	add.w	sl, sl, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 80177ec:	2301      	movs	r3, #1
 80177ee:	4649      	mov	r1, r9
 80177f0:	463a      	mov	r2, r7
 80177f2:	f7fc f80f 	bl	8013814 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80177f6:	f1ba 0f01 	cmp.w	sl, #1
 80177fa:	d1f2      	bne.n	80177e2 <f_close+0x76>
 80177fc:	7868      	ldrb	r0, [r5, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80177fe:	4649      	mov	r1, r9
 8017800:	2301      	movs	r3, #1
 8017802:	4642      	mov	r2, r8
 8017804:	f7fb fff8 	bl	80137f8 <disk_read>
 8017808:	b138      	cbz	r0, 801781a <f_close+0xae>
			fs->winsect = sector;
 801780a:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 801780e:	2001      	movs	r0, #1
			fs->winsect = sector;
 8017810:	632b      	str	r3, [r5, #48]	; 0x30
 8017812:	e000      	b.n	8017816 <f_close+0xaa>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8017814:	2001      	movs	r0, #1
}
 8017816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			fs->winsect = sector;
 801781a:	f8c5 8030 	str.w	r8, [r5, #48]	; 0x30
					dir = fp->dir_ptr;
 801781e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8017820:	7ada      	ldrb	r2, [r3, #11]
 8017822:	f042 0220 	orr.w	r2, r2, #32
 8017826:	72da      	strb	r2, [r3, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8017828:	68a2      	ldr	r2, [r4, #8]
 801782a:	6821      	ldr	r1, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801782c:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8017830:	769a      	strb	r2, [r3, #26]
	*ptr++ = (BYTE)val;
 8017832:	76d8      	strb	r0, [r3, #27]
	if (fs->fs_type == FS_FAT32) {
 8017834:	7809      	ldrb	r1, [r1, #0]
 8017836:	2903      	cmp	r1, #3
 8017838:	d103      	bne.n	8017842 <f_close+0xd6>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801783a:	0c12      	lsrs	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 801783c:	0a11      	lsrs	r1, r2, #8
 801783e:	751a      	strb	r2, [r3, #20]
	*ptr++ = (BYTE)val;
 8017840:	7559      	strb	r1, [r3, #21]
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8017842:	68e2      	ldr	r2, [r4, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 8017844:	2100      	movs	r1, #0
 8017846:	0a37      	lsrs	r7, r6, #8
 8017848:	759e      	strb	r6, [r3, #22]
 801784a:	0a10      	lsrs	r0, r2, #8
 801784c:	f362 0107 	bfi	r1, r2, #0, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8017850:	75df      	strb	r7, [r3, #23]
 8017852:	0c17      	lsrs	r7, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8017854:	f360 210f 	bfi	r1, r0, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8017858:	0e12      	lsrs	r2, r2, #24
	*ptr++ = (BYTE)val; val >>= 8;
 801785a:	0c30      	lsrs	r0, r6, #16
	*ptr++ = (BYTE)val; val >>= 8;
 801785c:	f367 4117 	bfi	r1, r7, #16, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8017860:	0e36      	lsrs	r6, r6, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8017862:	2700      	movs	r7, #0
	*ptr++ = (BYTE)val; val >>= 8;
 8017864:	7618      	strb	r0, [r3, #24]
	*ptr++ = (BYTE)val; val >>= 8;
 8017866:	f362 611f 	bfi	r1, r2, #24, #8
					fs->wflag = 1;
 801786a:	2201      	movs	r2, #1
	*ptr++ = (BYTE)val;
 801786c:	765e      	strb	r6, [r3, #25]
					res = sync_fs(fs);					/* Restore it to the directory */
 801786e:	4628      	mov	r0, r5
	*ptr++ = (BYTE)val; val >>= 8;
 8017870:	61d9      	str	r1, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 8017872:	749f      	strb	r7, [r3, #18]
	*ptr++ = (BYTE)val;
 8017874:	74df      	strb	r7, [r3, #19]
					fs->wflag = 1;
 8017876:	70ea      	strb	r2, [r5, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8017878:	f7fc f8a2 	bl	80139c0 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 801787c:	7d23      	ldrb	r3, [r4, #20]
 801787e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017882:	7523      	strb	r3, [r4, #20]
	if (res == FR_OK)
 8017884:	2800      	cmp	r0, #0
 8017886:	d1c6      	bne.n	8017816 <f_close+0xaa>
 8017888:	6825      	ldr	r5, [r4, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801788a:	b15d      	cbz	r5, 80178a4 <f_close+0x138>
 801788c:	782b      	ldrb	r3, [r5, #0]
 801788e:	b14b      	cbz	r3, 80178a4 <f_close+0x138>
 8017890:	88a2      	ldrh	r2, [r4, #4]
 8017892:	88eb      	ldrh	r3, [r5, #6]
 8017894:	429a      	cmp	r2, r3
 8017896:	d105      	bne.n	80178a4 <f_close+0x138>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8017898:	7868      	ldrb	r0, [r5, #1]
 801789a:	f7fb ff8f 	bl	80137bc <disk_status>
 801789e:	f010 0001 	ands.w	r0, r0, #1
 80178a2:	d002      	beq.n	80178aa <f_close+0x13e>
	FRESULT res = FR_INVALID_OBJECT;
 80178a4:	2009      	movs	r0, #9
}
 80178a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80178aa:	6923      	ldr	r3, [r4, #16]
 80178ac:	3b01      	subs	r3, #1
 80178ae:	2b03      	cmp	r3, #3
 80178b0:	d81a      	bhi.n	80178e8 <f_close+0x17c>
		n = Files[i].ctr;
 80178b2:	011b      	lsls	r3, r3, #4
 80178b4:	4911      	ldr	r1, [pc, #68]	; (80178fc <f_close+0x190>)
 80178b6:	18cd      	adds	r5, r1, r3
 80178b8:	89aa      	ldrh	r2, [r5, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80178ba:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80178be:	d01b      	beq.n	80178f8 <f_close+0x18c>
		if (n > 0) n--;				/* Decrement read mode open count */
 80178c0:	b9a2      	cbnz	r2, 80178ec <f_close+0x180>
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80178c2:	2200      	movs	r2, #0
 80178c4:	50ca      	str	r2, [r1, r3]
				fp->obj.fs = 0;			/* Invalidate file object */
 80178c6:	2000      	movs	r0, #0
 80178c8:	6020      	str	r0, [r4, #0]
 80178ca:	e7a4      	b.n	8017816 <f_close+0xaa>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80178cc:	2301      	movs	r3, #1
 80178ce:	6a22      	ldr	r2, [r4, #32]
 80178d0:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80178d4:	7868      	ldrb	r0, [r5, #1]
 80178d6:	f7fb ff9d 	bl	8013814 <disk_write>
 80178da:	2800      	cmp	r0, #0
 80178dc:	d19a      	bne.n	8017814 <f_close+0xa8>
				fp->flag &= (BYTE)~FA_DIRTY;
 80178de:	7d23      	ldrb	r3, [r4, #20]
 80178e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80178e4:	7523      	strb	r3, [r4, #20]
 80178e6:	e75c      	b.n	80177a2 <f_close+0x36>
		res = FR_INT_ERR;			/* Invalid index nunber */
 80178e8:	2002      	movs	r0, #2
 80178ea:	e794      	b.n	8017816 <f_close+0xaa>
		if (n > 0) n--;				/* Decrement read mode open count */
 80178ec:	3a01      	subs	r2, #1
 80178ee:	b292      	uxth	r2, r2
		Files[i].ctr = n;
 80178f0:	81aa      	strh	r2, [r5, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80178f2:	2a00      	cmp	r2, #0
 80178f4:	d1e7      	bne.n	80178c6 <f_close+0x15a>
 80178f6:	e7e4      	b.n	80178c2 <f_close+0x156>
		Files[i].ctr = n;
 80178f8:	81a8      	strh	r0, [r5, #12]
 80178fa:	e7e2      	b.n	80178c2 <f_close+0x156>
 80178fc:	24003e1c 	.word	0x24003e1c

08017900 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8017900:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017904:	b085      	sub	sp, #20
 8017906:	9101      	str	r1, [sp, #4]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8017908:	2800      	cmp	r0, #0
 801790a:	d044      	beq.n	8017996 <f_opendir+0x96>
 801790c:	4604      	mov	r4, r0

	/* Get logical drive */
	obj = &dp->obj;
	res = find_volume(&path, &fs, 0);
 801790e:	2200      	movs	r2, #0
 8017910:	a903      	add	r1, sp, #12
 8017912:	a801      	add	r0, sp, #4
 8017914:	f7fe fd1e 	bl	8016354 <find_volume>
	if (res == FR_OK) {
 8017918:	4605      	mov	r5, r0
 801791a:	b128      	cbz	r0, 8017928 <f_opendir+0x28>
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 801791c:	2300      	movs	r3, #0
 801791e:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 8017920:	4628      	mov	r0, r5
 8017922:	b005      	add	sp, #20
 8017924:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		obj->fs = fs;
 8017928:	9b03      	ldr	r3, [sp, #12]
		INIT_NAMBUF(fs);
 801792a:	f44f 7000 	mov.w	r0, #512	; 0x200
		obj->fs = fs;
 801792e:	6023      	str	r3, [r4, #0]
		INIT_NAMBUF(fs);
 8017930:	f000 fd4c 	bl	80183cc <ff_memalloc>
 8017934:	4606      	mov	r6, r0
 8017936:	2800      	cmp	r0, #0
 8017938:	d032      	beq.n	80179a0 <f_opendir+0xa0>
 801793a:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 801793c:	4620      	mov	r0, r4
 801793e:	9901      	ldr	r1, [sp, #4]
		INIT_NAMBUF(fs);
 8017940:	60de      	str	r6, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8017942:	f7fd fd8d 	bl	8015460 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 8017946:	4605      	mov	r5, r0
 8017948:	bb60      	cbnz	r0, 80179a4 <f_opendir+0xa4>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 801794a:	f994 302f 	ldrsb.w	r3, [r4, #47]	; 0x2f
 801794e:	2b00      	cmp	r3, #0
 8017950:	db34      	blt.n	80179bc <f_opendir+0xbc>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8017952:	79a3      	ldrb	r3, [r4, #6]
 8017954:	06db      	lsls	r3, r3, #27
 8017956:	d52c      	bpl.n	80179b2 <f_opendir+0xb2>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8017958:	9a03      	ldr	r2, [sp, #12]
 801795a:	6a21      	ldr	r1, [r4, #32]
	if (fs->fs_type == FS_FAT32) {
 801795c:	7810      	ldrb	r0, [r2, #0]
	rv = rv << 8 | ptr[0];
 801795e:	7ecd      	ldrb	r5, [r1, #27]
 8017960:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
 8017962:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8017964:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	if (fs->fs_type == FS_FAT32) {
 8017968:	d105      	bne.n	8017976 <f_opendir+0x76>
	rv = rv << 8 | ptr[0];
 801796a:	7d48      	ldrb	r0, [r1, #21]
 801796c:	7d09      	ldrb	r1, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801796e:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8017972:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8017976:	60a3      	str	r3, [r4, #8]
				obj->id = fs->id;
 8017978:	88d3      	ldrh	r3, [r2, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 801797a:	2100      	movs	r1, #0
 801797c:	4620      	mov	r0, r4
				obj->id = fs->id;
 801797e:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8017980:	f7fc fcb2 	bl	80142e8 <dir_sdi>
				if (res == FR_OK) {
 8017984:	4605      	mov	r5, r0
 8017986:	b968      	cbnz	r0, 80179a4 <f_opendir+0xa4>
					if (obj->sclust) {
 8017988:	68a2      	ldr	r2, [r4, #8]
 801798a:	b9ca      	cbnz	r2, 80179c0 <f_opendir+0xc0>
						obj->lockid = 0;	/* Root directory need not to be locked */
 801798c:	6120      	str	r0, [r4, #16]
		FREE_NAMBUF();
 801798e:	4630      	mov	r0, r6
 8017990:	f000 fd1e 	bl	80183d0 <ff_memfree>
 8017994:	e7c4      	b.n	8017920 <f_opendir+0x20>
	if (!dp) return FR_INVALID_OBJECT;
 8017996:	2509      	movs	r5, #9
}
 8017998:	4628      	mov	r0, r5
 801799a:	b005      	add	sp, #20
 801799c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		INIT_NAMBUF(fs);
 80179a0:	2511      	movs	r5, #17
 80179a2:	e7bd      	b.n	8017920 <f_opendir+0x20>
		FREE_NAMBUF();
 80179a4:	4630      	mov	r0, r6
 80179a6:	f000 fd13 	bl	80183d0 <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80179aa:	2d04      	cmp	r5, #4
 80179ac:	bf08      	it	eq
 80179ae:	2505      	moveq	r5, #5
 80179b0:	e7b4      	b.n	801791c <f_opendir+0x1c>
		FREE_NAMBUF();
 80179b2:	4630      	mov	r0, r6
					res = FR_NO_PATH;
 80179b4:	2505      	movs	r5, #5
		FREE_NAMBUF();
 80179b6:	f000 fd0b 	bl	80183d0 <ff_memfree>
 80179ba:	e7af      	b.n	801791c <f_opendir+0x1c>
 80179bc:	9a03      	ldr	r2, [sp, #12]
 80179be:	e7db      	b.n	8017978 <f_opendir+0x78>
		if (Files[i].fs == dp->obj.fs &&
 80179c0:	4b39      	ldr	r3, [pc, #228]	; (8017aa8 <f_opendir+0x1a8>)
 80179c2:	6821      	ldr	r1, [r4, #0]
 80179c4:	f8d3 9000 	ldr.w	r9, [r3]
 80179c8:	4549      	cmp	r1, r9
 80179ca:	d03f      	beq.n	8017a4c <f_opendir+0x14c>
 80179cc:	f8d3 e010 	ldr.w	lr, [r3, #16]
 80179d0:	4571      	cmp	r1, lr
 80179d2:	d031      	beq.n	8017a38 <f_opendir+0x138>
 80179d4:	f8d3 8020 	ldr.w	r8, [r3, #32]
 80179d8:	4541      	cmp	r1, r8
 80179da:	d040      	beq.n	8017a5e <f_opendir+0x15e>
 80179dc:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 80179de:	428f      	cmp	r7, r1
 80179e0:	d011      	beq.n	8017a06 <f_opendir+0x106>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80179e2:	f1b9 0f00 	cmp.w	r9, #0
 80179e6:	d054      	beq.n	8017a92 <f_opendir+0x192>
 80179e8:	f1be 0f00 	cmp.w	lr, #0
 80179ec:	d041      	beq.n	8017a72 <f_opendir+0x172>
 80179ee:	f1b8 0f00 	cmp.w	r8, #0
 80179f2:	d055      	beq.n	8017aa0 <f_opendir+0x1a0>
 80179f4:	2f00      	cmp	r7, #0
 80179f6:	d04f      	beq.n	8017a98 <f_opendir+0x198>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80179f8:	2300      	movs	r3, #0
		FREE_NAMBUF();
 80179fa:	4630      	mov	r0, r6
 80179fc:	2512      	movs	r5, #18
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80179fe:	6123      	str	r3, [r4, #16]
		FREE_NAMBUF();
 8017a00:	f000 fce6 	bl	80183d0 <ff_memfree>
 8017a04:	e78a      	b.n	801791c <f_opendir+0x1c>
		if (Files[i].fs == dp->obj.fs &&
 8017a06:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8017a08:	4282      	cmp	r2, r0
 8017a0a:	d1ea      	bne.n	80179e2 <f_opendir+0xe2>
			Files[i].clu == dp->obj.sclust &&
 8017a0c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8017a0e:	4684      	mov	ip, r0
 8017a10:	6960      	ldr	r0, [r4, #20]
 8017a12:	4584      	cmp	ip, r0
 8017a14:	d1e5      	bne.n	80179e2 <f_opendir+0xe2>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8017a16:	f04f 0c03 	mov.w	ip, #3
 8017a1a:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8017a1e:	f10c 0701 	add.w	r7, ip, #1
 8017a22:	181a      	adds	r2, r3, r0
 8017a24:	8992      	ldrh	r2, [r2, #12]
 8017a26:	3201      	adds	r2, #1
 8017a28:	b292      	uxth	r2, r2
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8017a2a:	4403      	add	r3, r0
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8017a2c:	6127      	str	r7, [r4, #16]
		FREE_NAMBUF();
 8017a2e:	4630      	mov	r0, r6
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8017a30:	819a      	strh	r2, [r3, #12]
		FREE_NAMBUF();
 8017a32:	f000 fccd 	bl	80183d0 <ff_memfree>
 8017a36:	e773      	b.n	8017920 <f_opendir+0x20>
		if (Files[i].fs == dp->obj.fs &&
 8017a38:	695f      	ldr	r7, [r3, #20]
 8017a3a:	42ba      	cmp	r2, r7
 8017a3c:	d1ca      	bne.n	80179d4 <f_opendir+0xd4>
			Files[i].clu == dp->obj.sclust &&
 8017a3e:	6967      	ldr	r7, [r4, #20]
 8017a40:	6998      	ldr	r0, [r3, #24]
 8017a42:	4287      	cmp	r7, r0
 8017a44:	d1c6      	bne.n	80179d4 <f_opendir+0xd4>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8017a46:	f04f 0c01 	mov.w	ip, #1
 8017a4a:	e7e6      	b.n	8017a1a <f_opendir+0x11a>
		if (Files[i].fs == dp->obj.fs &&
 8017a4c:	685f      	ldr	r7, [r3, #4]
 8017a4e:	42ba      	cmp	r2, r7
 8017a50:	d1bc      	bne.n	80179cc <f_opendir+0xcc>
			Files[i].clu == dp->obj.sclust &&
 8017a52:	6967      	ldr	r7, [r4, #20]
 8017a54:	6898      	ldr	r0, [r3, #8]
 8017a56:	4287      	cmp	r7, r0
 8017a58:	d1b8      	bne.n	80179cc <f_opendir+0xcc>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8017a5a:	46ac      	mov	ip, r5
 8017a5c:	e7dd      	b.n	8017a1a <f_opendir+0x11a>
		if (Files[i].fs == dp->obj.fs &&
 8017a5e:	6a5f      	ldr	r7, [r3, #36]	; 0x24
 8017a60:	42ba      	cmp	r2, r7
 8017a62:	d1bb      	bne.n	80179dc <f_opendir+0xdc>
			Files[i].clu == dp->obj.sclust &&
 8017a64:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 8017a66:	6960      	ldr	r0, [r4, #20]
 8017a68:	4287      	cmp	r7, r0
 8017a6a:	d1b7      	bne.n	80179dc <f_opendir+0xdc>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8017a6c:	f04f 0c02 	mov.w	ip, #2
 8017a70:	e7d3      	b.n	8017a1a <f_opendir+0x11a>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8017a72:	f04f 0c01 	mov.w	ip, #1
 8017a76:	2702      	movs	r7, #2
		Files[i].fs = dp->obj.fs;
 8017a78:	ea4f 100c 	mov.w	r0, ip, lsl #4
		Files[i].ctr = 0;
 8017a7c:	f04f 0c00 	mov.w	ip, #0
		Files[i].fs = dp->obj.fs;
 8017a80:	5019      	str	r1, [r3, r0]
 8017a82:	1819      	adds	r1, r3, r0
		Files[i].clu = dp->obj.sclust;
 8017a84:	604a      	str	r2, [r1, #4]
		Files[i].ofs = dp->dptr;
 8017a86:	6962      	ldr	r2, [r4, #20]
		Files[i].ctr = 0;
 8017a88:	f8a1 c00c 	strh.w	ip, [r1, #12]
		Files[i].ofs = dp->dptr;
 8017a8c:	608a      	str	r2, [r1, #8]
		Files[i].ctr = 0;
 8017a8e:	2201      	movs	r2, #1
 8017a90:	e7cb      	b.n	8017a2a <f_opendir+0x12a>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8017a92:	46cc      	mov	ip, r9
 8017a94:	2701      	movs	r7, #1
 8017a96:	e7ef      	b.n	8017a78 <f_opendir+0x178>
 8017a98:	f04f 0c03 	mov.w	ip, #3
 8017a9c:	2704      	movs	r7, #4
 8017a9e:	e7eb      	b.n	8017a78 <f_opendir+0x178>
 8017aa0:	f04f 0c02 	mov.w	ip, #2
 8017aa4:	2703      	movs	r7, #3
 8017aa6:	e7e7      	b.n	8017a78 <f_opendir+0x178>
 8017aa8:	24003e1c 	.word	0x24003e1c

08017aac <f_closedir>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8017aac:	b328      	cbz	r0, 8017afa <f_closedir+0x4e>
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8017aae:	b538      	push	{r3, r4, r5, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8017ab0:	6803      	ldr	r3, [r0, #0]
 8017ab2:	b12b      	cbz	r3, 8017ac0 <f_closedir+0x14>
 8017ab4:	781a      	ldrb	r2, [r3, #0]
 8017ab6:	b11a      	cbz	r2, 8017ac0 <f_closedir+0x14>
 8017ab8:	8881      	ldrh	r1, [r0, #4]
 8017aba:	88da      	ldrh	r2, [r3, #6]
 8017abc:	4291      	cmp	r1, r2
 8017abe:	d001      	beq.n	8017ac4 <f_closedir+0x18>
	FRESULT res = FR_INVALID_OBJECT;
 8017ac0:	2009      	movs	r0, #9
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
}
 8017ac2:	bd38      	pop	{r3, r4, r5, pc}
 8017ac4:	4604      	mov	r4, r0
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8017ac6:	7858      	ldrb	r0, [r3, #1]
 8017ac8:	f7fb fe78 	bl	80137bc <disk_status>
 8017acc:	f010 0001 	ands.w	r0, r0, #1
 8017ad0:	d1f6      	bne.n	8017ac0 <f_closedir+0x14>
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8017ad2:	6923      	ldr	r3, [r4, #16]
 8017ad4:	b173      	cbz	r3, 8017af4 <f_closedir+0x48>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8017ad6:	3b01      	subs	r3, #1
 8017ad8:	2b03      	cmp	r3, #3
 8017ada:	d814      	bhi.n	8017b06 <f_closedir+0x5a>
		n = Files[i].ctr;
 8017adc:	011b      	lsls	r3, r3, #4
 8017ade:	490b      	ldr	r1, [pc, #44]	; (8017b0c <f_closedir+0x60>)
 8017ae0:	18cd      	adds	r5, r1, r3
 8017ae2:	89aa      	ldrh	r2, [r5, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8017ae4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8017ae8:	d009      	beq.n	8017afe <f_closedir+0x52>
		if (n > 0) n--;				/* Decrement read mode open count */
 8017aea:	b14a      	cbz	r2, 8017b00 <f_closedir+0x54>
 8017aec:	3a01      	subs	r2, #1
 8017aee:	b292      	uxth	r2, r2
		Files[i].ctr = n;
 8017af0:	81aa      	strh	r2, [r5, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8017af2:	b12a      	cbz	r2, 8017b00 <f_closedir+0x54>
			dp->obj.fs = 0;			/* Invalidate directory object */
 8017af4:	2000      	movs	r0, #0
 8017af6:	6020      	str	r0, [r4, #0]
}
 8017af8:	bd38      	pop	{r3, r4, r5, pc}
	FRESULT res = FR_INVALID_OBJECT;
 8017afa:	2009      	movs	r0, #9
}
 8017afc:	4770      	bx	lr
		Files[i].ctr = n;
 8017afe:	81a8      	strh	r0, [r5, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8017b00:	2200      	movs	r2, #0
 8017b02:	50ca      	str	r2, [r1, r3]
 8017b04:	e7f6      	b.n	8017af4 <f_closedir+0x48>
		res = FR_INT_ERR;			/* Invalid index nunber */
 8017b06:	2002      	movs	r0, #2
}
 8017b08:	bd38      	pop	{r3, r4, r5, pc}
 8017b0a:	bf00      	nop
 8017b0c:	24003e1c 	.word	0x24003e1c

08017b10 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8017b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8017b12:	b138      	cbz	r0, 8017b24 <f_readdir+0x14>
 8017b14:	6803      	ldr	r3, [r0, #0]
 8017b16:	b12b      	cbz	r3, 8017b24 <f_readdir+0x14>
 8017b18:	781a      	ldrb	r2, [r3, #0]
 8017b1a:	b11a      	cbz	r2, 8017b24 <f_readdir+0x14>
 8017b1c:	8884      	ldrh	r4, [r0, #4]
 8017b1e:	88da      	ldrh	r2, [r3, #6]
 8017b20:	4294      	cmp	r4, r2
 8017b22:	d002      	beq.n	8017b2a <f_readdir+0x1a>
	FRESULT res = FR_INVALID_OBJECT;
 8017b24:	2509      	movs	r5, #9
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
}
 8017b26:	4628      	mov	r0, r5
 8017b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017b2a:	4604      	mov	r4, r0
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8017b2c:	7858      	ldrb	r0, [r3, #1]
 8017b2e:	460e      	mov	r6, r1
 8017b30:	f7fb fe44 	bl	80137bc <disk_status>
 8017b34:	07c3      	lsls	r3, r0, #31
 8017b36:	d4f5      	bmi.n	8017b24 <f_readdir+0x14>
		if (!fno) {
 8017b38:	b1f6      	cbz	r6, 8017b78 <f_readdir+0x68>
			INIT_NAMBUF(fs);
 8017b3a:	f44f 7000 	mov.w	r0, #512	; 0x200
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8017b3e:	6825      	ldr	r5, [r4, #0]
			INIT_NAMBUF(fs);
 8017b40:	f000 fc44 	bl	80183cc <ff_memalloc>
 8017b44:	4607      	mov	r7, r0
 8017b46:	b1e8      	cbz	r0, 8017b84 <f_readdir+0x74>
 8017b48:	60e8      	str	r0, [r5, #12]
			res = dir_read(dp, 0);			/* Read an item */
 8017b4a:	4620      	mov	r0, r4
 8017b4c:	f7fd f884 	bl	8014c58 <dir_read.constprop.11>
			if (res == FR_OK) {				/* A valid entry is found */
 8017b50:	f010 0ffb 	tst.w	r0, #251	; 0xfb
			res = dir_read(dp, 0);			/* Read an item */
 8017b54:	4605      	mov	r5, r0
			if (res == FR_OK) {				/* A valid entry is found */
 8017b56:	d10a      	bne.n	8017b6e <f_readdir+0x5e>
				get_fileinfo(dp, fno);		/* Get the object information */
 8017b58:	4631      	mov	r1, r6
 8017b5a:	4620      	mov	r0, r4
 8017b5c:	f7fb fe78 	bl	8013850 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8017b60:	4620      	mov	r0, r4
 8017b62:	f7fd f837 	bl	8014bd4 <dir_next.constprop.16>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8017b66:	2804      	cmp	r0, #4
 8017b68:	bf14      	ite	ne
 8017b6a:	4605      	movne	r5, r0
 8017b6c:	2500      	moveq	r5, #0
			FREE_NAMBUF();
 8017b6e:	4638      	mov	r0, r7
 8017b70:	f000 fc2e 	bl	80183d0 <ff_memfree>
}
 8017b74:	4628      	mov	r0, r5
 8017b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8017b78:	4631      	mov	r1, r6
 8017b7a:	4620      	mov	r0, r4
}
 8017b7c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8017b80:	f7fc bbb2 	b.w	80142e8 <dir_sdi>
			INIT_NAMBUF(fs);
 8017b84:	2511      	movs	r5, #17
}
 8017b86:	4628      	mov	r0, r5
 8017b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017b8a:	bf00      	nop

08017b8c <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8017b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b90:	b099      	sub	sp, #100	; 0x64
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8017b92:	2202      	movs	r2, #2
{
 8017b94:	9009      	str	r0, [sp, #36]	; 0x24
	res = find_volume(&path, &fs, FA_WRITE);
 8017b96:	a90a      	add	r1, sp, #40	; 0x28
 8017b98:	a809      	add	r0, sp, #36	; 0x24
 8017b9a:	f7fe fbdb 	bl	8016354 <find_volume>
	dj.obj.fs = fs;
 8017b9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	res = find_volume(&path, &fs, FA_WRITE);
 8017ba0:	4605      	mov	r5, r0
	dj.obj.fs = fs;
 8017ba2:	930b      	str	r3, [sp, #44]	; 0x2c
	if (res == FR_OK) {
 8017ba4:	b118      	cbz	r0, 8017bae <f_mkdir+0x22>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
 8017ba6:	4628      	mov	r0, r5
 8017ba8:	b019      	add	sp, #100	; 0x64
 8017baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017bae:	4606      	mov	r6, r0
		INIT_NAMBUF(fs);
 8017bb0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8017bb4:	f000 fc0a 	bl	80183cc <ff_memalloc>
 8017bb8:	4604      	mov	r4, r0
 8017bba:	b190      	cbz	r0, 8017be2 <f_mkdir+0x56>
		res = follow_path(&dj, path);			/* Follow the file path */
 8017bbc:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
		INIT_NAMBUF(fs);
 8017bc0:	60d8      	str	r0, [r3, #12]
		res = follow_path(&dj, path);			/* Follow the file path */
 8017bc2:	a80b      	add	r0, sp, #44	; 0x2c
 8017bc4:	f7fd fc4c 	bl	8015460 <follow_path>
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8017bc8:	4605      	mov	r5, r0
 8017bca:	b140      	cbz	r0, 8017bde <f_mkdir+0x52>
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8017bcc:	2804      	cmp	r0, #4
 8017bce:	d00d      	beq.n	8017bec <f_mkdir+0x60>
		FREE_NAMBUF();
 8017bd0:	4620      	mov	r0, r4
 8017bd2:	f000 fbfd 	bl	80183d0 <ff_memfree>
}
 8017bd6:	4628      	mov	r0, r5
 8017bd8:	b019      	add	sp, #100	; 0x64
 8017bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8017bde:	2508      	movs	r5, #8
 8017be0:	e7f6      	b.n	8017bd0 <f_mkdir+0x44>
		INIT_NAMBUF(fs);
 8017be2:	2511      	movs	r5, #17
}
 8017be4:	4628      	mov	r0, r5
 8017be6:	b019      	add	sp, #100	; 0x64
 8017be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8017bec:	4631      	mov	r1, r6
 8017bee:	a80b      	add	r0, sp, #44	; 0x2c
 8017bf0:	f7fc fe38 	bl	8014864 <create_chain>
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8017bf4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8017bf6:	4682      	mov	sl, r0
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8017bf8:	896b      	ldrh	r3, [r5, #10]
 8017bfa:	025b      	lsls	r3, r3, #9
 8017bfc:	930e      	str	r3, [sp, #56]	; 0x38
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8017bfe:	2800      	cmp	r0, #0
 8017c00:	f000 813c 	beq.w	8017e7c <f_mkdir+0x2f0>
			if (dcl == 1) res = FR_INT_ERR;
 8017c04:	2801      	cmp	r0, #1
 8017c06:	f000 816c 	beq.w	8017ee2 <f_mkdir+0x356>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8017c0a:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017c0e:	f000 8181 	beq.w	8017f14 <f_mkdir+0x388>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8017c12:	78eb      	ldrb	r3, [r5, #3]
 8017c14:	b303      	cbz	r3, 8017c58 <f_mkdir+0xcc>
		wsect = fs->winsect;	/* Current sector number */
 8017c16:	6b2e      	ldr	r6, [r5, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8017c18:	f105 0834 	add.w	r8, r5, #52	; 0x34
 8017c1c:	2301      	movs	r3, #1
 8017c1e:	7868      	ldrb	r0, [r5, #1]
 8017c20:	4632      	mov	r2, r6
 8017c22:	4641      	mov	r1, r8
 8017c24:	f7fb fdf6 	bl	8013814 <disk_write>
 8017c28:	2800      	cmp	r0, #0
 8017c2a:	f040 817e 	bne.w	8017f2a <f_mkdir+0x39e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8017c2e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8017c30:	69eb      	ldr	r3, [r5, #28]
 8017c32:	1ab2      	subs	r2, r6, r2
			fs->wflag = 0;
 8017c34:	70e8      	strb	r0, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8017c36:	429a      	cmp	r2, r3
 8017c38:	d20e      	bcs.n	8017c58 <f_mkdir+0xcc>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017c3a:	78af      	ldrb	r7, [r5, #2]
 8017c3c:	2f01      	cmp	r7, #1
 8017c3e:	d801      	bhi.n	8017c44 <f_mkdir+0xb8>
 8017c40:	e00a      	b.n	8017c58 <f_mkdir+0xcc>
 8017c42:	69eb      	ldr	r3, [r5, #28]
					wsect += fs->fsize;
 8017c44:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017c46:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8017c48:	2301      	movs	r3, #1
 8017c4a:	4641      	mov	r1, r8
 8017c4c:	4632      	mov	r2, r6
 8017c4e:	7868      	ldrb	r0, [r5, #1]
 8017c50:	f7fb fde0 	bl	8013814 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017c54:	2f01      	cmp	r7, #1
 8017c56:	d1f4      	bne.n	8017c42 <f_mkdir+0xb6>
			tm = GET_FATTIME();
 8017c58:	f7fb fdf8 	bl	801384c <get_fattime>
				dsc = clust2sect(fs, dcl);
 8017c5c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
	clst -= 2;
 8017c5e:	f1aa 0202 	sub.w	r2, sl, #2
			tm = GET_FATTIME();
 8017c62:	4605      	mov	r5, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8017c64:	69bb      	ldr	r3, [r7, #24]
 8017c66:	3b02      	subs	r3, #2
 8017c68:	429a      	cmp	r2, r3
 8017c6a:	f080 8138 	bcs.w	8017ede <f_mkdir+0x352>
	return clst * fs->csize + fs->database;
 8017c6e:	897e      	ldrh	r6, [r7, #10]
 8017c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c72:	fb02 3606 	mla	r6, r2, r6, r3
	*ptr++ = (BYTE)val; val >>= 8;
 8017c76:	b2e8      	uxtb	r0, r5
				dir = fs->win;
 8017c78:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8017c7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017c80:	2100      	movs	r1, #0
	*ptr++ = (BYTE)val; val >>= 8;
 8017c82:	9004      	str	r0, [sp, #16]
 8017c84:	4618      	mov	r0, r3
	*ptr++ = (BYTE)val; val >>= 8;
 8017c86:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8017c8a:	9305      	str	r3, [sp, #20]
 8017c8c:	f005 ff2f 	bl	801daee <memset>
 8017c90:	f04f 3220 	mov.w	r2, #538976288	; 0x20202020
 8017c94:	4603      	mov	r3, r0
	*ptr++ = (BYTE)val; val >>= 8;
 8017c96:	f3c5 4107 	ubfx	r1, r5, #16, #8
					dir[DIR_Name] = '.';
 8017c9a:	202e      	movs	r0, #46	; 0x2e
 8017c9c:	637a      	str	r2, [r7, #52]	; 0x34
	*ptr++ = (BYTE)val;
 8017c9e:	0e2d      	lsrs	r5, r5, #24
 8017ca0:	605a      	str	r2, [r3, #4]
	*ptr++ = (BYTE)val;
 8017ca2:	f3ca 2c07 	ubfx	ip, sl, #8, #8
 8017ca6:	f8c3 2007 	str.w	r2, [r3, #7]
	*ptr++ = (BYTE)val; val >>= 8;
 8017caa:	fa5f f28a 	uxtb.w	r2, sl
	*ptr++ = (BYTE)val; val >>= 8;
 8017cae:	9106      	str	r1, [sp, #24]
					dir[DIR_Attr] = AM_DIR;
 8017cb0:	f04f 0e10 	mov.w	lr, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8017cb4:	9905      	ldr	r1, [sp, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 8017cb6:	9202      	str	r2, [sp, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 8017cb8:	f887 104b 	strb.w	r1, [r7, #75]	; 0x4b
	if (fs->fs_type == FS_FAT32) {
 8017cbc:	783a      	ldrb	r2, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8017cbe:	9906      	ldr	r1, [sp, #24]
					dir[DIR_Name] = '.';
 8017cc0:	f887 0034 	strb.w	r0, [r7, #52]	; 0x34
	if (fs->fs_type == FS_FAT32) {
 8017cc4:	2a03      	cmp	r2, #3
	*ptr++ = (BYTE)val; val >>= 8;
 8017cc6:	9804      	ldr	r0, [sp, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 8017cc8:	f887 104c 	strb.w	r1, [r7, #76]	; 0x4c
	*ptr++ = (BYTE)val; val >>= 8;
 8017ccc:	9902      	ldr	r1, [sp, #8]
	*ptr++ = (BYTE)val;
 8017cce:	9507      	str	r5, [sp, #28]
	*ptr++ = (BYTE)val;
 8017cd0:	f8cd c00c 	str.w	ip, [sp, #12]
		*d++ = (BYTE)val;
 8017cd4:	9308      	str	r3, [sp, #32]
					dir[DIR_Attr] = AM_DIR;
 8017cd6:	f887 e03f 	strb.w	lr, [r7, #63]	; 0x3f
	*ptr++ = (BYTE)val; val >>= 8;
 8017cda:	f887 004a 	strb.w	r0, [r7, #74]	; 0x4a
	*ptr++ = (BYTE)val;
 8017cde:	f887 504d 	strb.w	r5, [r7, #77]	; 0x4d
	*ptr++ = (BYTE)val; val >>= 8;
 8017ce2:	f887 104e 	strb.w	r1, [r7, #78]	; 0x4e
	*ptr++ = (BYTE)val;
 8017ce6:	f887 c04f 	strb.w	ip, [r7, #79]	; 0x4f
	if (fs->fs_type == FS_FAT32) {
 8017cea:	d106      	bne.n	8017cfa <f_mkdir+0x16e>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8017cec:	fa2a f20e 	lsr.w	r2, sl, lr
	*ptr++ = (BYTE)val; val >>= 8;
 8017cf0:	0a11      	lsrs	r1, r2, #8
 8017cf2:	f887 2048 	strb.w	r2, [r7, #72]	; 0x48
	*ptr++ = (BYTE)val;
 8017cf6:	f887 1049 	strb.w	r1, [r7, #73]	; 0x49
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8017cfa:	f107 0554 	add.w	r5, r7, #84	; 0x54
 8017cfe:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8017d02:	4295      	cmp	r5, r2
 8017d04:	d204      	bcs.n	8017d10 <f_mkdir+0x184>
 8017d06:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8017d0a:	428b      	cmp	r3, r1
 8017d0c:	f0c0 8104 	bcc.w	8017f18 <f_mkdir+0x38c>
 8017d10:	4258      	negs	r0, r3
 8017d12:	f010 0003 	ands.w	r0, r0, #3
 8017d16:	f000 80f3 	beq.w	8017f00 <f_mkdir+0x374>
			*d++ = *s++;
 8017d1a:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8017d1e:	2801      	cmp	r0, #1
 8017d20:	f107 0335 	add.w	r3, r7, #53	; 0x35
 8017d24:	f107 0e55 	add.w	lr, r7, #85	; 0x55
 8017d28:	f887 2054 	strb.w	r2, [r7, #84]	; 0x54
 8017d2c:	f000 80e5 	beq.w	8017efa <f_mkdir+0x36e>
 8017d30:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8017d34:	2803      	cmp	r0, #3
 8017d36:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8017d3a:	f107 0e56 	add.w	lr, r7, #86	; 0x56
 8017d3e:	f887 2055 	strb.w	r2, [r7, #85]	; 0x55
 8017d42:	f040 80f6 	bne.w	8017f32 <f_mkdir+0x3a6>
 8017d46:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8017d4a:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8017d4e:	f107 0e57 	add.w	lr, r7, #87	; 0x57
 8017d52:	f04f 0c1d 	mov.w	ip, #29
 8017d56:	f887 2056 	strb.w	r2, [r7, #86]	; 0x56
 8017d5a:	f100 0834 	add.w	r8, r0, #52	; 0x34
 8017d5e:	1829      	adds	r1, r5, r0
 8017d60:	f1c0 0920 	rsb	r9, r0, #32
 8017d64:	eb07 0208 	add.w	r2, r7, r8
 8017d68:	f857 8008 	ldr.w	r8, [r7, r8]
 8017d6c:	3104      	adds	r1, #4
 8017d6e:	f845 8000 	str.w	r8, [r5, r0]
 8017d72:	3204      	adds	r2, #4
 8017d74:	2507      	movs	r5, #7
 8017d76:	6810      	ldr	r0, [r2, #0]
 8017d78:	2d08      	cmp	r5, #8
 8017d7a:	6008      	str	r0, [r1, #0]
 8017d7c:	6850      	ldr	r0, [r2, #4]
 8017d7e:	6048      	str	r0, [r1, #4]
 8017d80:	6890      	ldr	r0, [r2, #8]
 8017d82:	6088      	str	r0, [r1, #8]
 8017d84:	68d0      	ldr	r0, [r2, #12]
 8017d86:	60c8      	str	r0, [r1, #12]
 8017d88:	6910      	ldr	r0, [r2, #16]
 8017d8a:	6108      	str	r0, [r1, #16]
 8017d8c:	6950      	ldr	r0, [r2, #20]
 8017d8e:	6148      	str	r0, [r1, #20]
 8017d90:	f040 80d2 	bne.w	8017f38 <f_mkdir+0x3ac>
 8017d94:	6992      	ldr	r2, [r2, #24]
 8017d96:	f1b9 0f20 	cmp.w	r9, #32
 8017d9a:	f10e 0e20 	add.w	lr, lr, #32
 8017d9e:	f103 0320 	add.w	r3, r3, #32
 8017da2:	f1ac 0c20 	sub.w	ip, ip, #32
 8017da6:	618a      	str	r2, [r1, #24]
 8017da8:	d00e      	beq.n	8017dc8 <f_mkdir+0x23c>
 8017daa:	781a      	ldrb	r2, [r3, #0]
		} while (--cnt);
 8017dac:	f1bc 0f01 	cmp.w	ip, #1
			*d++ = *s++;
 8017db0:	f88e 2000 	strb.w	r2, [lr]
		} while (--cnt);
 8017db4:	d008      	beq.n	8017dc8 <f_mkdir+0x23c>
			*d++ = *s++;
 8017db6:	785a      	ldrb	r2, [r3, #1]
		} while (--cnt);
 8017db8:	f1bc 0f02 	cmp.w	ip, #2
			*d++ = *s++;
 8017dbc:	f88e 2001 	strb.w	r2, [lr, #1]
		} while (--cnt);
 8017dc0:	d002      	beq.n	8017dc8 <f_mkdir+0x23c>
			*d++ = *s++;
 8017dc2:	789b      	ldrb	r3, [r3, #2]
 8017dc4:	f88e 3002 	strb.w	r3, [lr, #2]
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8017dc8:	222e      	movs	r2, #46	; 0x2e
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8017dca:	9d0a      	ldr	r5, [sp, #40]	; 0x28
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8017dcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017dce:	f887 2055 	strb.w	r2, [r7, #85]	; 0x55
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8017dd2:	782a      	ldrb	r2, [r5, #0]
 8017dd4:	2a03      	cmp	r2, #3
 8017dd6:	f000 8088 	beq.w	8017eea <f_mkdir+0x35e>
 8017dda:	b2d9      	uxtb	r1, r3
 8017ddc:	f3c3 2207 	ubfx	r2, r3, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8017de0:	f887 106e 	strb.w	r1, [r7, #110]	; 0x6e
	*ptr++ = (BYTE)val;
 8017de4:	f887 206f 	strb.w	r2, [r7, #111]	; 0x6f
	if (fs->fs_type == FS_FAT32) {
 8017de8:	782a      	ldrb	r2, [r5, #0]
 8017dea:	2a03      	cmp	r2, #3
 8017dec:	d105      	bne.n	8017dfa <f_mkdir+0x26e>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8017dee:	0c1b      	lsrs	r3, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8017df0:	0a1a      	lsrs	r2, r3, #8
 8017df2:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
	*ptr++ = (BYTE)val;
 8017df6:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8017dfa:	896b      	ldrh	r3, [r5, #10]
 8017dfc:	2b00      	cmp	r3, #0
 8017dfe:	d043      	beq.n	8017e88 <f_mkdir+0x2fc>
 8017e00:	3b01      	subs	r3, #1
					fs->wflag = 1;
 8017e02:	f04f 0b01 	mov.w	fp, #1
 8017e06:	4433      	add	r3, r6
 8017e08:	e9cd 4a00 	strd	r4, sl, [sp]
 8017e0c:	9c08      	ldr	r4, [sp, #32]
 8017e0e:	469a      	mov	sl, r3
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8017e10:	f105 0934 	add.w	r9, r5, #52	; 0x34
					fs->winsect = dsc++;
 8017e14:	632e      	str	r6, [r5, #48]	; 0x30
					fs->wflag = 1;
 8017e16:	f885 b003 	strb.w	fp, [r5, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8017e1a:	2301      	movs	r3, #1
 8017e1c:	4649      	mov	r1, r9
 8017e1e:	4632      	mov	r2, r6
 8017e20:	7868      	ldrb	r0, [r5, #1]
 8017e22:	f7fb fcf7 	bl	8013814 <disk_write>
 8017e26:	bb00      	cbnz	r0, 8017e6a <f_mkdir+0x2de>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8017e28:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8017e2a:	69eb      	ldr	r3, [r5, #28]
 8017e2c:	1ab2      	subs	r2, r6, r2
			fs->wflag = 0;
 8017e2e:	70e8      	strb	r0, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8017e30:	429a      	cmp	r2, r3
 8017e32:	d20f      	bcs.n	8017e54 <f_mkdir+0x2c8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017e34:	78af      	ldrb	r7, [r5, #2]
 8017e36:	2f01      	cmp	r7, #1
 8017e38:	d90c      	bls.n	8017e54 <f_mkdir+0x2c8>
 8017e3a:	46b0      	mov	r8, r6
 8017e3c:	e000      	b.n	8017e40 <f_mkdir+0x2b4>
 8017e3e:	69eb      	ldr	r3, [r5, #28]
					wsect += fs->fsize;
 8017e40:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017e42:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8017e44:	2301      	movs	r3, #1
 8017e46:	4649      	mov	r1, r9
 8017e48:	4642      	mov	r2, r8
 8017e4a:	7868      	ldrb	r0, [r5, #1]
 8017e4c:	f7fb fce2 	bl	8013814 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017e50:	2f01      	cmp	r7, #1
 8017e52:	d1f4      	bne.n	8017e3e <f_mkdir+0x2b2>
 8017e54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017e58:	2100      	movs	r1, #0
 8017e5a:	4620      	mov	r0, r4
 8017e5c:	f005 fe47 	bl	801daee <memset>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8017e60:	4556      	cmp	r6, sl
 8017e62:	d00f      	beq.n	8017e84 <f_mkdir+0x2f8>
 8017e64:	3601      	adds	r6, #1
 8017e66:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8017e68:	e7d2      	b.n	8017e10 <f_mkdir+0x284>
 8017e6a:	e9dd 4a00 	ldrd	r4, sl, [sp]
			res = FR_DISK_ERR;
 8017e6e:	2501      	movs	r5, #1
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8017e70:	4651      	mov	r1, sl
 8017e72:	a80b      	add	r0, sp, #44	; 0x2c
 8017e74:	2200      	movs	r2, #0
 8017e76:	f7fb ff7b 	bl	8013d70 <remove_chain>
 8017e7a:	e6a9      	b.n	8017bd0 <f_mkdir+0x44>
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8017e7c:	2507      	movs	r5, #7
			tm = GET_FATTIME();
 8017e7e:	f7fb fce5 	bl	801384c <get_fattime>
 8017e82:	e7f5      	b.n	8017e70 <f_mkdir+0x2e4>
 8017e84:	e9dd 4a00 	ldrd	r4, sl, [sp]
				res = dir_register(&dj);	/* Register the object to the directoy */
 8017e88:	a80b      	add	r0, sp, #44	; 0x2c
 8017e8a:	f7fd fc79 	bl	8015780 <dir_register>
			if (res == FR_OK) {
 8017e8e:	4605      	mov	r5, r0
 8017e90:	2800      	cmp	r0, #0
 8017e92:	d1ed      	bne.n	8017e70 <f_mkdir+0x2e4>
	*ptr++ = (BYTE)val; val >>= 8;
 8017e94:	9a04      	ldr	r2, [sp, #16]
 8017e96:	9905      	ldr	r1, [sp, #20]
 8017e98:	f362 0507 	bfi	r5, r2, #0, #8
					dir = dj.dir;
 8017e9c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	*ptr++ = (BYTE)val; val >>= 8;
 8017e9e:	9a02      	ldr	r2, [sp, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 8017ea0:	f361 250f 	bfi	r5, r1, #8, #8
	*ptr++ = (BYTE)val;
 8017ea4:	9903      	ldr	r1, [sp, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 8017ea6:	769a      	strb	r2, [r3, #26]
	*ptr++ = (BYTE)val;
 8017ea8:	76d9      	strb	r1, [r3, #27]
	*ptr++ = (BYTE)val; val >>= 8;
 8017eaa:	9906      	ldr	r1, [sp, #24]
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8017eac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	*ptr++ = (BYTE)val; val >>= 8;
 8017eae:	f361 4517 	bfi	r5, r1, #16, #8
 8017eb2:	9907      	ldr	r1, [sp, #28]
 8017eb4:	f361 651f 	bfi	r5, r1, #24, #8
 8017eb8:	f8c3 5016 	str.w	r5, [r3, #22]
	if (fs->fs_type == FS_FAT32) {
 8017ebc:	7811      	ldrb	r1, [r2, #0]
 8017ebe:	2903      	cmp	r1, #3
 8017ec0:	d104      	bne.n	8017ecc <f_mkdir+0x340>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8017ec2:	ea4f 411a 	mov.w	r1, sl, lsr #16
	*ptr++ = (BYTE)val; val >>= 8;
 8017ec6:	0a08      	lsrs	r0, r1, #8
 8017ec8:	7519      	strb	r1, [r3, #20]
	*ptr++ = (BYTE)val;
 8017eca:	7558      	strb	r0, [r3, #21]
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8017ecc:	2510      	movs	r5, #16
					fs->wflag = 1;
 8017ece:	2101      	movs	r1, #1
					res = sync_fs(fs);
 8017ed0:	4610      	mov	r0, r2
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8017ed2:	72dd      	strb	r5, [r3, #11]
					fs->wflag = 1;
 8017ed4:	70d1      	strb	r1, [r2, #3]
					res = sync_fs(fs);
 8017ed6:	f7fb fd73 	bl	80139c0 <sync_fs>
 8017eda:	4605      	mov	r5, r0
 8017edc:	e678      	b.n	8017bd0 <f_mkdir+0x44>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8017ede:	2600      	movs	r6, #0
 8017ee0:	e6c9      	b.n	8017c76 <f_mkdir+0xea>
			tm = GET_FATTIME();
 8017ee2:	f7fb fcb3 	bl	801384c <get_fattime>
 8017ee6:	2502      	movs	r5, #2
 8017ee8:	e7c2      	b.n	8017e70 <f_mkdir+0x2e4>
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8017eea:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8017eec:	429a      	cmp	r2, r3
 8017eee:	f47f af74 	bne.w	8017dda <f_mkdir+0x24e>
 8017ef2:	2200      	movs	r2, #0
 8017ef4:	4611      	mov	r1, r2
 8017ef6:	4613      	mov	r3, r2
 8017ef8:	e772      	b.n	8017de0 <f_mkdir+0x254>
			*d++ = *s++;
 8017efa:	f04f 0c1f 	mov.w	ip, #31
 8017efe:	e72c      	b.n	8017d5a <f_mkdir+0x1ce>
 8017f00:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017f02:	f04f 0c20 	mov.w	ip, #32
	BYTE *d = (BYTE*)dst;
 8017f06:	46ae      	mov	lr, r5
			*d++ = *s++;
 8017f08:	2508      	movs	r5, #8
 8017f0a:	6579      	str	r1, [r7, #84]	; 0x54
 8017f0c:	46e1      	mov	r9, ip
 8017f0e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8017f12:	e730      	b.n	8017d76 <f_mkdir+0x1ea>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8017f14:	2501      	movs	r5, #1
 8017f16:	e7b2      	b.n	8017e7e <f_mkdir+0x2f2>
 8017f18:	f107 0253 	add.w	r2, r7, #83	; 0x53
			*d++ = *s++;
 8017f1c:	f813 1b01 	ldrb.w	r1, [r3], #1
		} while (--cnt);
 8017f20:	42ab      	cmp	r3, r5
			*d++ = *s++;
 8017f22:	f802 1f01 	strb.w	r1, [r2, #1]!
		} while (--cnt);
 8017f26:	d1f9      	bne.n	8017f1c <f_mkdir+0x390>
 8017f28:	e74e      	b.n	8017dc8 <f_mkdir+0x23c>
			tm = GET_FATTIME();
 8017f2a:	f7fb fc8f 	bl	801384c <get_fattime>
			res = FR_DISK_ERR;
 8017f2e:	2501      	movs	r5, #1
 8017f30:	e79e      	b.n	8017e70 <f_mkdir+0x2e4>
			*d++ = *s++;
 8017f32:	f04f 0c1e 	mov.w	ip, #30
 8017f36:	e710      	b.n	8017d5a <f_mkdir+0x1ce>
 8017f38:	f10e 0e1c 	add.w	lr, lr, #28
 8017f3c:	331c      	adds	r3, #28
 8017f3e:	f1ac 0c1c 	sub.w	ip, ip, #28
 8017f42:	e732      	b.n	8017daa <f_mkdir+0x21e>

08017f44 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8017f44:	b40e      	push	{r1, r2, r3}
 8017f46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f4a:	b0a0      	sub	sp, #128	; 0x80
	pb->nchr = pb->idx = 0;
 8017f4c:	2200      	movs	r2, #0
{
 8017f4e:	a929      	add	r1, sp, #164	; 0xa4
 8017f50:	4613      	mov	r3, r2
	pb->fp = fp;
 8017f52:	900d      	str	r0, [sp, #52]	; 0x34
{
 8017f54:	f851 6b04 	ldr.w	r6, [r1], #4
	pb->nchr = pb->idx = 0;
 8017f58:	920e      	str	r2, [sp, #56]	; 0x38
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);

	va_start(arp, fmt);
 8017f5a:	9103      	str	r1, [sp, #12]
	pb->nchr = pb->idx = 0;
 8017f5c:	920f      	str	r2, [sp, #60]	; 0x3c

	for (;;) {
		c = *fmt++;
 8017f5e:	7832      	ldrb	r2, [r6, #0]
 8017f60:	1c74      	adds	r4, r6, #1
		if (c == 0) break;			/* End of string */
 8017f62:	b302      	cbz	r2, 8017fa6 <f_printf+0x62>
		if (c != '%') {				/* Non escape character */
 8017f64:	2a25      	cmp	r2, #37	; 0x25
 8017f66:	d035      	beq.n	8017fd4 <f_printf+0x90>
	if (i < 0) return;
 8017f68:	2b00      	cmp	r3, #0
 8017f6a:	f2c0 816f 	blt.w	801824c <f_printf+0x308>
	pb->buf[i++] = (BYTE)c;
 8017f6e:	a920      	add	r1, sp, #128	; 0x80
 8017f70:	1c5d      	adds	r5, r3, #1
 8017f72:	4419      	add	r1, r3
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8017f74:	2d3c      	cmp	r5, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 8017f76:	f801 2c40 	strb.w	r2, [r1, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8017f7a:	dd0a      	ble.n	8017f92 <f_printf+0x4e>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8017f7c:	ab04      	add	r3, sp, #16
 8017f7e:	462a      	mov	r2, r5
 8017f80:	a910      	add	r1, sp, #64	; 0x40
 8017f82:	980d      	ldr	r0, [sp, #52]	; 0x34
 8017f84:	f7ff f9f8 	bl	8017378 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8017f88:	9b04      	ldr	r3, [sp, #16]
 8017f8a:	1b5d      	subs	r5, r3, r5
 8017f8c:	bf18      	it	ne
 8017f8e:	f04f 35ff 	movne.w	r5, #4294967295
	pb->nchr++;
 8017f92:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		c = *fmt++;
 8017f94:	4626      	mov	r6, r4
 8017f96:	462b      	mov	r3, r5
	pb->idx = i;
 8017f98:	950e      	str	r5, [sp, #56]	; 0x38
	pb->nchr++;
 8017f9a:	3201      	adds	r2, #1
		c = *fmt++;
 8017f9c:	1c74      	adds	r4, r6, #1
	pb->nchr++;
 8017f9e:	920f      	str	r2, [sp, #60]	; 0x3c
		c = *fmt++;
 8017fa0:	7832      	ldrb	r2, [r6, #0]
		if (c == 0) break;			/* End of string */
 8017fa2:	2a00      	cmp	r2, #0
 8017fa4:	d1de      	bne.n	8017f64 <f_printf+0x20>
	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8017fa6:	2b00      	cmp	r3, #0
 8017fa8:	f2c0 81e7 	blt.w	801837a <f_printf+0x436>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8017fac:	461a      	mov	r2, r3
 8017fae:	a910      	add	r1, sp, #64	; 0x40
 8017fb0:	ab04      	add	r3, sp, #16
 8017fb2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8017fb4:	f7ff f9e0 	bl	8017378 <f_write>
 8017fb8:	2800      	cmp	r0, #0
 8017fba:	f040 81de 	bne.w	801837a <f_printf+0x436>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8017fbe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017fc0:	9b04      	ldr	r3, [sp, #16]
 8017fc2:	429a      	cmp	r2, r3
 8017fc4:	f040 81d9 	bne.w	801837a <f_printf+0x436>
 8017fc8:	980f      	ldr	r0, [sp, #60]	; 0x3c
	}

	va_end(arp);

	return putc_flush(&pb);
}
 8017fca:	b020      	add	sp, #128	; 0x80
 8017fcc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fd0:	b003      	add	sp, #12
 8017fd2:	4770      	bx	lr
		c = *fmt++;
 8017fd4:	7872      	ldrb	r2, [r6, #1]
		if (c == '0') {				/* Flag: '0' padding */
 8017fd6:	2a30      	cmp	r2, #48	; 0x30
 8017fd8:	f000 8130 	beq.w	801823c <f_printf+0x2f8>
			if (c == '-') {			/* Flag: left justified */
 8017fdc:	2a2d      	cmp	r2, #45	; 0x2d
 8017fde:	f000 8178 	beq.w	80182d2 <f_printf+0x38e>
		c = *fmt++;
 8017fe2:	f04f 0b00 	mov.w	fp, #0
 8017fe6:	3602      	adds	r6, #2
 8017fe8:	2004      	movs	r0, #4
		w = f = 0;
 8017fea:	46da      	mov	sl, fp
		while (IsDigit(c)) {		/* Precision */
 8017fec:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8017ff0:	2400      	movs	r4, #0
 8017ff2:	2909      	cmp	r1, #9
 8017ff4:	d80a      	bhi.n	801800c <f_printf+0xc8>
			w = w * 10 + c - '0';
 8017ff6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8017ffa:	eb02 0444 	add.w	r4, r2, r4, lsl #1
			c = *fmt++;
 8017ffe:	f816 2b01 	ldrb.w	r2, [r6], #1
		while (IsDigit(c)) {		/* Precision */
 8018002:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
			w = w * 10 + c - '0';
 8018006:	3c30      	subs	r4, #48	; 0x30
		while (IsDigit(c)) {		/* Precision */
 8018008:	2909      	cmp	r1, #9
 801800a:	d9f4      	bls.n	8017ff6 <f_printf+0xb2>
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 801800c:	f002 01df 	and.w	r1, r2, #223	; 0xdf
 8018010:	294c      	cmp	r1, #76	; 0x4c
 8018012:	f040 810f 	bne.w	8018234 <f_printf+0x2f0>
			f |= 4; c = *fmt++;
 8018016:	7832      	ldrb	r2, [r6, #0]
 8018018:	4682      	mov	sl, r0
 801801a:	2504      	movs	r5, #4
 801801c:	3601      	adds	r6, #1
		if (!c) break;
 801801e:	2a00      	cmp	r2, #0
 8018020:	d0c1      	beq.n	8017fa6 <f_printf+0x62>
		if (IsLower(d)) d -= 0x20;
 8018022:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
 8018026:	2919      	cmp	r1, #25
 8018028:	f200 8106 	bhi.w	8018238 <f_printf+0x2f4>
 801802c:	f1a2 0020 	sub.w	r0, r2, #32
 8018030:	b2c0      	uxtb	r0, r0
		switch (d) {				/* Type is... */
 8018032:	f1a0 0142 	sub.w	r1, r0, #66	; 0x42
 8018036:	2916      	cmp	r1, #22
 8018038:	f200 80ec 	bhi.w	8018214 <f_printf+0x2d0>
 801803c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8018040:	00cc00e7 	.word	0x00cc00e7
 8018044:	00ea0097 	.word	0x00ea0097
 8018048:	00ea00ea 	.word	0x00ea00ea
 801804c:	00ea00ea 	.word	0x00ea00ea
 8018050:	00ea00ea 	.word	0x00ea00ea
 8018054:	00ea00ea 	.word	0x00ea00ea
 8018058:	007e00ea 	.word	0x007e00ea
 801805c:	00ea00ea 	.word	0x00ea00ea
 8018060:	009a00ea 	.word	0x009a00ea
 8018064:	009700ea 	.word	0x009700ea
 8018068:	00ea00ea 	.word	0x00ea00ea
 801806c:	0017      	.short	0x0017
 801806e:	f04f 0e10 	mov.w	lr, #16
 8018072:	9903      	ldr	r1, [sp, #12]
 8018074:	1d0f      	adds	r7, r1, #4
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8018076:	2d00      	cmp	r5, #0
 8018078:	d167      	bne.n	801814a <f_printf+0x206>
 801807a:	2000      	movs	r0, #0
 801807c:	6809      	ldr	r1, [r1, #0]
 801807e:	9703      	str	r7, [sp, #12]
 8018080:	9001      	str	r0, [sp, #4]
 8018082:	2a78      	cmp	r2, #120	; 0x78
 8018084:	af05      	add	r7, sp, #20
		i = 0;
 8018086:	f04f 0000 	mov.w	r0, #0
 801808a:	bf0c      	ite	eq
 801808c:	f04f 0927 	moveq.w	r9, #39	; 0x27
 8018090:	f04f 0907 	movne.w	r9, #7
 8018094:	46b8      	mov	r8, r7
 8018096:	e007      	b.n	80180a8 <f_printf+0x164>
			str[i++] = d + '0';
 8018098:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 801809c:	f808 cb01 	strb.w	ip, [r8], #1
		} while (v && i < sizeof str / sizeof str[0]);
 80180a0:	b1b1      	cbz	r1, 80180d0 <f_printf+0x18c>
 80180a2:	2d1f      	cmp	r5, #31
 80180a4:	d814      	bhi.n	80180d0 <f_printf+0x18c>
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 80180a6:	4628      	mov	r0, r5
			str[i++] = d + '0';
 80180a8:	1c45      	adds	r5, r0, #1
			d = (TCHAR)(v % r); v /= r;
 80180aa:	fbb1 f2fe 	udiv	r2, r1, lr
 80180ae:	fb0e 1c12 	mls	ip, lr, r2, r1
 80180b2:	4611      	mov	r1, r2
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 80180b4:	f1bc 0f09 	cmp.w	ip, #9
			d = (TCHAR)(v % r); v /= r;
 80180b8:	fa5f f28c 	uxtb.w	r2, ip
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 80180bc:	eb09 0c02 	add.w	ip, r9, r2
			str[i++] = d + '0';
 80180c0:	f102 0230 	add.w	r2, r2, #48	; 0x30
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 80180c4:	d8e8      	bhi.n	8018098 <f_printf+0x154>
			str[i++] = d + '0';
 80180c6:	f808 2b01 	strb.w	r2, [r8], #1
 80180ca:	1c45      	adds	r5, r0, #1
		} while (v && i < sizeof str / sizeof str[0]);
 80180cc:	2900      	cmp	r1, #0
 80180ce:	d1e8      	bne.n	80180a2 <f_printf+0x15e>
		if (f & 8) str[i++] = '-';
 80180d0:	9a01      	ldr	r2, [sp, #4]
 80180d2:	b12a      	cbz	r2, 80180e0 <f_printf+0x19c>
 80180d4:	aa20      	add	r2, sp, #128	; 0x80
 80180d6:	212d      	movs	r1, #45	; 0x2d
 80180d8:	442a      	add	r2, r5
 80180da:	1c85      	adds	r5, r0, #2
 80180dc:	f802 1c6c 	strb.w	r1, [r2, #-108]
		j = i; d = (f & 1) ? '0' : ' ';
 80180e0:	f01a 0f01 	tst.w	sl, #1
 80180e4:	bf14      	ite	ne
 80180e6:	f04f 0930 	movne.w	r9, #48	; 0x30
 80180ea:	f04f 0920 	moveq.w	r9, #32
 80180ee:	f1bb 0f00 	cmp.w	fp, #0
 80180f2:	f040 8140 	bne.w	8018376 <f_printf+0x432>
 80180f6:	462a      	mov	r2, r5
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80180f8:	46a2      	mov	sl, r4
	pb->buf[i++] = (BYTE)c;
 80180fa:	a920      	add	r1, sp, #128	; 0x80
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 80180fc:	4552      	cmp	r2, sl
	pb->buf[i++] = (BYTE)c;
 80180fe:	f103 0401 	add.w	r4, r3, #1
 8018102:	f102 0801 	add.w	r8, r2, #1
 8018106:	4419      	add	r1, r3
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8018108:	f080 80a2 	bcs.w	8018250 <f_printf+0x30c>
	if (i < 0) return;
 801810c:	2b00      	cmp	r3, #0
 801810e:	db13      	blt.n	8018138 <f_printf+0x1f4>
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8018110:	2c3c      	cmp	r4, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 8018112:	f801 9c40 	strb.w	r9, [r1, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8018116:	dd0a      	ble.n	801812e <f_printf+0x1ea>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8018118:	ab04      	add	r3, sp, #16
 801811a:	4622      	mov	r2, r4
 801811c:	a910      	add	r1, sp, #64	; 0x40
 801811e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8018120:	f7ff f92a 	bl	8017378 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8018124:	9b04      	ldr	r3, [sp, #16]
 8018126:	1b1c      	subs	r4, r3, r4
 8018128:	bf18      	it	ne
 801812a:	f04f 34ff 	movne.w	r4, #4294967295
	pb->nchr++;
 801812e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018130:	4623      	mov	r3, r4
	pb->idx = i;
 8018132:	940e      	str	r4, [sp, #56]	; 0x38
	pb->nchr++;
 8018134:	3201      	adds	r2, #1
 8018136:	920f      	str	r2, [sp, #60]	; 0x3c
 8018138:	4642      	mov	r2, r8
 801813a:	e7de      	b.n	80180fa <f_printf+0x1b6>
		switch (d) {				/* Type is... */
 801813c:	f04f 0e08 	mov.w	lr, #8
 8018140:	9903      	ldr	r1, [sp, #12]
 8018142:	1d0f      	adds	r7, r1, #4
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8018144:	b90d      	cbnz	r5, 801814a <f_printf+0x206>
 8018146:	2844      	cmp	r0, #68	; 0x44
 8018148:	d197      	bne.n	801807a <f_printf+0x136>
		if (d == 'D' && (v & 0x80000000)) {
 801814a:	2844      	cmp	r0, #68	; 0x44
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 801814c:	9703      	str	r7, [sp, #12]
 801814e:	6809      	ldr	r1, [r1, #0]
		if (d == 'D' && (v & 0x80000000)) {
 8018150:	f040 80e8 	bne.w	8018324 <f_printf+0x3e0>
 8018154:	2900      	cmp	r1, #0
 8018156:	f280 80e5 	bge.w	8018324 <f_printf+0x3e0>
			f |= 8;
 801815a:	f04a 0008 	orr.w	r0, sl, #8
 801815e:	2508      	movs	r5, #8
 8018160:	f00a 0b02 	and.w	fp, sl, #2
			v = 0 - v;
 8018164:	4249      	negs	r1, r1
			f |= 8;
 8018166:	9501      	str	r5, [sp, #4]
 8018168:	fa5f fa80 	uxtb.w	sl, r0
 801816c:	e789      	b.n	8018082 <f_printf+0x13e>
		switch (d) {				/* Type is... */
 801816e:	f04f 0e0a 	mov.w	lr, #10
 8018172:	e7e5      	b.n	8018140 <f_printf+0x1fc>
			p = va_arg(arp, TCHAR*);
 8018174:	9a03      	ldr	r2, [sp, #12]
 8018176:	6817      	ldr	r7, [r2, #0]
 8018178:	3204      	adds	r2, #4
			for (j = 0; p[j]; j++) ;
 801817a:	783d      	ldrb	r5, [r7, #0]
			p = va_arg(arp, TCHAR*);
 801817c:	9203      	str	r2, [sp, #12]
			for (j = 0; p[j]; j++) ;
 801817e:	b135      	cbz	r5, 801818e <f_printf+0x24a>
 8018180:	463a      	mov	r2, r7
 8018182:	2500      	movs	r5, #0
 8018184:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8018188:	3501      	adds	r5, #1
 801818a:	2900      	cmp	r1, #0
 801818c:	d1fa      	bne.n	8018184 <f_printf+0x240>
			if (!(f & 2)) {
 801818e:	f1bb 0f00 	cmp.w	fp, #0
 8018192:	f000 80ca 	beq.w	801832a <f_printf+0x3e6>
 8018196:	f107 38ff 	add.w	r8, r7, #4294967295
	pb->buf[i++] = (BYTE)c;
 801819a:	aa20      	add	r2, sp, #128	; 0x80
 801819c:	1c5f      	adds	r7, r3, #1
 801819e:	18d1      	adds	r1, r2, r3
			while (*p) putc_bfd(&pb, *p++);
 80181a0:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80181a4:	2a00      	cmp	r2, #0
 80181a6:	f000 809b 	beq.w	80182e0 <f_printf+0x39c>
	if (i < 0) return;
 80181aa:	2b00      	cmp	r3, #0
 80181ac:	dbf5      	blt.n	801819a <f_printf+0x256>
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80181ae:	2f3c      	cmp	r7, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 80181b0:	f801 2c40 	strb.w	r2, [r1, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80181b4:	dd0a      	ble.n	80181cc <f_printf+0x288>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80181b6:	ab04      	add	r3, sp, #16
 80181b8:	463a      	mov	r2, r7
 80181ba:	a910      	add	r1, sp, #64	; 0x40
 80181bc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80181be:	f7ff f8db 	bl	8017378 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80181c2:	9b04      	ldr	r3, [sp, #16]
 80181c4:	1bdf      	subs	r7, r3, r7
 80181c6:	bf18      	it	ne
 80181c8:	f04f 37ff 	movne.w	r7, #4294967295
	pb->nchr++;
 80181cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80181ce:	463b      	mov	r3, r7
	pb->idx = i;
 80181d0:	970e      	str	r7, [sp, #56]	; 0x38
	pb->nchr++;
 80181d2:	3201      	adds	r2, #1
 80181d4:	920f      	str	r2, [sp, #60]	; 0x3c
 80181d6:	e7e0      	b.n	801819a <f_printf+0x256>
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 80181d8:	9a03      	ldr	r2, [sp, #12]
	if (i < 0) return;
 80181da:	2b00      	cmp	r3, #0
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 80181dc:	f102 0104 	add.w	r1, r2, #4
 80181e0:	9103      	str	r1, [sp, #12]
	if (i < 0) return;
 80181e2:	f6ff aebc 	blt.w	8017f5e <f_printf+0x1a>
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 80181e6:	6811      	ldr	r1, [r2, #0]
	pb->buf[i++] = (BYTE)c;
 80181e8:	1c5c      	adds	r4, r3, #1
 80181ea:	aa20      	add	r2, sp, #128	; 0x80
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80181ec:	2c3c      	cmp	r4, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 80181ee:	441a      	add	r2, r3
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 80181f0:	f802 1c40 	strb.w	r1, [r2, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80181f4:	dd18      	ble.n	8018228 <f_printf+0x2e4>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80181f6:	ab04      	add	r3, sp, #16
 80181f8:	4622      	mov	r2, r4
 80181fa:	a910      	add	r1, sp, #64	; 0x40
 80181fc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80181fe:	f7ff f8bb 	bl	8017378 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8018202:	9b04      	ldr	r3, [sp, #16]
 8018204:	1b1c      	subs	r4, r3, r4
 8018206:	bf18      	it	ne
 8018208:	f04f 34ff 	movne.w	r4, #4294967295
 801820c:	e00c      	b.n	8018228 <f_printf+0x2e4>
		switch (d) {				/* Type is... */
 801820e:	f04f 0e02 	mov.w	lr, #2
 8018212:	e72e      	b.n	8018072 <f_printf+0x12e>
	if (i < 0) return;
 8018214:	2b00      	cmp	r3, #0
 8018216:	f6ff aea2 	blt.w	8017f5e <f_printf+0x1a>
	pb->buf[i++] = (BYTE)c;
 801821a:	a920      	add	r1, sp, #128	; 0x80
 801821c:	1c5c      	adds	r4, r3, #1
 801821e:	4419      	add	r1, r3
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8018220:	2c3c      	cmp	r4, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 8018222:	f801 2c40 	strb.w	r2, [r1, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8018226:	dce6      	bgt.n	80181f6 <f_printf+0x2b2>
	pb->nchr++;
 8018228:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801822a:	4623      	mov	r3, r4
	pb->idx = i;
 801822c:	940e      	str	r4, [sp, #56]	; 0x38
	pb->nchr++;
 801822e:	3201      	adds	r2, #1
 8018230:	920f      	str	r2, [sp, #60]	; 0x3c
 8018232:	e694      	b.n	8017f5e <f_printf+0x1a>
 8018234:	2500      	movs	r5, #0
 8018236:	e6f2      	b.n	801801e <f_printf+0xda>
 8018238:	4610      	mov	r0, r2
 801823a:	e6fa      	b.n	8018032 <f_printf+0xee>
			f = 1; c = *fmt++;
 801823c:	78b2      	ldrb	r2, [r6, #2]
 801823e:	f04f 0b00 	mov.w	fp, #0
 8018242:	3603      	adds	r6, #3
 8018244:	2005      	movs	r0, #5
 8018246:	f04f 0a01 	mov.w	sl, #1
 801824a:	e6cf      	b.n	8017fec <f_printf+0xa8>
		c = *fmt++;
 801824c:	4626      	mov	r6, r4
 801824e:	e686      	b.n	8017f5e <f_printf+0x1a>
 8018250:	4654      	mov	r4, sl
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8018252:	46a2      	mov	sl, r4
	pb->buf[i++] = (BYTE)c;
 8018254:	aa20      	add	r2, sp, #128	; 0x80
	if (i < 0) return;
 8018256:	2b00      	cmp	r3, #0
	pb->buf[i++] = (BYTE)c;
 8018258:	f103 0401 	add.w	r4, r3, #1
			putc_bfd(&pb, str[--i]);
 801825c:	f105 35ff 	add.w	r5, r5, #4294967295
	pb->buf[i++] = (BYTE)c;
 8018260:	441a      	add	r2, r3
	if (i < 0) return;
 8018262:	db14      	blt.n	801828e <f_printf+0x34a>
	pb->buf[i++] = (BYTE)c;
 8018264:	5d7b      	ldrb	r3, [r7, r5]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8018266:	2c3c      	cmp	r4, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 8018268:	f802 3c40 	strb.w	r3, [r2, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801826c:	dd0a      	ble.n	8018284 <f_printf+0x340>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 801826e:	ab04      	add	r3, sp, #16
 8018270:	4622      	mov	r2, r4
 8018272:	a910      	add	r1, sp, #64	; 0x40
 8018274:	980d      	ldr	r0, [sp, #52]	; 0x34
 8018276:	f7ff f87f 	bl	8017378 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 801827a:	9b04      	ldr	r3, [sp, #16]
 801827c:	1b1c      	subs	r4, r3, r4
 801827e:	bf18      	it	ne
 8018280:	f04f 34ff 	movne.w	r4, #4294967295
	pb->nchr++;
 8018284:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018286:	4623      	mov	r3, r4
	pb->idx = i;
 8018288:	940e      	str	r4, [sp, #56]	; 0x38
	pb->nchr++;
 801828a:	3201      	adds	r2, #1
 801828c:	920f      	str	r2, [sp, #60]	; 0x3c
		} while (i);
 801828e:	2d00      	cmp	r5, #0
 8018290:	d1e0      	bne.n	8018254 <f_printf+0x310>
 8018292:	4654      	mov	r4, sl
	pb->buf[i++] = (BYTE)c;
 8018294:	a920      	add	r1, sp, #128	; 0x80
		while (j++ < w) putc_bfd(&pb, d);
 8018296:	4544      	cmp	r4, r8
	pb->buf[i++] = (BYTE)c;
 8018298:	f103 0201 	add.w	r2, r3, #1
 801829c:	f108 0801 	add.w	r8, r8, #1
 80182a0:	4419      	add	r1, r3
		while (j++ < w) putc_bfd(&pb, d);
 80182a2:	f67f ae5c 	bls.w	8017f5e <f_printf+0x1a>
	if (i < 0) return;
 80182a6:	2b00      	cmp	r3, #0
 80182a8:	dbf4      	blt.n	8018294 <f_printf+0x350>
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80182aa:	2a3d      	cmp	r2, #61	; 0x3d
	pb->buf[i++] = (BYTE)c;
 80182ac:	f801 9c40 	strb.w	r9, [r1, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80182b0:	d109      	bne.n	80182c6 <f_printf+0x382>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80182b2:	ab04      	add	r3, sp, #16
 80182b4:	a910      	add	r1, sp, #64	; 0x40
 80182b6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80182b8:	f7ff f85e 	bl	8017378 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80182bc:	9a04      	ldr	r2, [sp, #16]
 80182be:	3a3d      	subs	r2, #61	; 0x3d
 80182c0:	bf18      	it	ne
 80182c2:	f04f 32ff 	movne.w	r2, #4294967295
	pb->nchr++;
 80182c6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80182c8:	4613      	mov	r3, r2
	pb->idx = i;
 80182ca:	920e      	str	r2, [sp, #56]	; 0x38
	pb->nchr++;
 80182cc:	3101      	adds	r1, #1
 80182ce:	910f      	str	r1, [sp, #60]	; 0x3c
 80182d0:	e7e0      	b.n	8018294 <f_printf+0x350>
				f = 2; c = *fmt++;
 80182d2:	f04f 0b02 	mov.w	fp, #2
 80182d6:	78b2      	ldrb	r2, [r6, #2]
 80182d8:	2006      	movs	r0, #6
 80182da:	3603      	adds	r6, #3
 80182dc:	46da      	mov	sl, fp
 80182de:	e685      	b.n	8017fec <f_printf+0xa8>
	pb->buf[i++] = (BYTE)c;
 80182e0:	f04f 0820 	mov.w	r8, #32
 80182e4:	aa20      	add	r2, sp, #128	; 0x80
			while (j++ < w) putc_bfd(&pb, ' ');
 80182e6:	42a5      	cmp	r5, r4
	pb->buf[i++] = (BYTE)c;
 80182e8:	f103 0701 	add.w	r7, r3, #1
 80182ec:	f105 0501 	add.w	r5, r5, #1
 80182f0:	441a      	add	r2, r3
			while (j++ < w) putc_bfd(&pb, ' ');
 80182f2:	f4bf ae34 	bcs.w	8017f5e <f_printf+0x1a>
	if (i < 0) return;
 80182f6:	2b00      	cmp	r3, #0
 80182f8:	dbf4      	blt.n	80182e4 <f_printf+0x3a0>
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80182fa:	2f3c      	cmp	r7, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 80182fc:	f802 8c40 	strb.w	r8, [r2, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8018300:	dd0a      	ble.n	8018318 <f_printf+0x3d4>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8018302:	ab04      	add	r3, sp, #16
 8018304:	463a      	mov	r2, r7
 8018306:	a910      	add	r1, sp, #64	; 0x40
 8018308:	980d      	ldr	r0, [sp, #52]	; 0x34
 801830a:	f7ff f835 	bl	8017378 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 801830e:	9b04      	ldr	r3, [sp, #16]
 8018310:	1bdf      	subs	r7, r3, r7
 8018312:	bf18      	it	ne
 8018314:	f04f 37ff 	movne.w	r7, #4294967295
	pb->nchr++;
 8018318:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801831a:	463b      	mov	r3, r7
	pb->idx = i;
 801831c:	970e      	str	r7, [sp, #56]	; 0x38
	pb->nchr++;
 801831e:	3201      	adds	r2, #1
 8018320:	920f      	str	r2, [sp, #60]	; 0x3c
 8018322:	e7df      	b.n	80182e4 <f_printf+0x3a0>
 8018324:	2000      	movs	r0, #0
 8018326:	9001      	str	r0, [sp, #4]
 8018328:	e6ab      	b.n	8018082 <f_printf+0x13e>
	pb->buf[i++] = (BYTE)c;
 801832a:	f04f 0920 	mov.w	r9, #32
 801832e:	46a8      	mov	r8, r5
 8018330:	aa20      	add	r2, sp, #128	; 0x80
				while (j++ < w) putc_bfd(&pb, ' ');
 8018332:	45a0      	cmp	r8, r4
	pb->buf[i++] = (BYTE)c;
 8018334:	f103 0501 	add.w	r5, r3, #1
 8018338:	eb02 0103 	add.w	r1, r2, r3
				while (j++ < w) putc_bfd(&pb, ' ');
 801833c:	f108 0201 	add.w	r2, r8, #1
 8018340:	4690      	mov	r8, r2
 8018342:	d216      	bcs.n	8018372 <f_printf+0x42e>
	if (i < 0) return;
 8018344:	2b00      	cmp	r3, #0
 8018346:	dbf3      	blt.n	8018330 <f_printf+0x3ec>
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8018348:	2d3c      	cmp	r5, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 801834a:	f801 9c40 	strb.w	r9, [r1, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801834e:	dd0a      	ble.n	8018366 <f_printf+0x422>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8018350:	ab04      	add	r3, sp, #16
 8018352:	462a      	mov	r2, r5
 8018354:	a910      	add	r1, sp, #64	; 0x40
 8018356:	980d      	ldr	r0, [sp, #52]	; 0x34
 8018358:	f7ff f80e 	bl	8017378 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 801835c:	9b04      	ldr	r3, [sp, #16]
 801835e:	1b5d      	subs	r5, r3, r5
 8018360:	bf18      	it	ne
 8018362:	f04f 35ff 	movne.w	r5, #4294967295
	pb->nchr++;
 8018366:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018368:	462b      	mov	r3, r5
	pb->idx = i;
 801836a:	950e      	str	r5, [sp, #56]	; 0x38
	pb->nchr++;
 801836c:	3201      	adds	r2, #1
 801836e:	920f      	str	r2, [sp, #60]	; 0x3c
 8018370:	e7de      	b.n	8018330 <f_printf+0x3ec>
				while (j++ < w) putc_bfd(&pb, ' ');
 8018372:	4615      	mov	r5, r2
 8018374:	e70f      	b.n	8018196 <f_printf+0x252>
		j = i; d = (f & 1) ? '0' : ' ';
 8018376:	46a8      	mov	r8, r5
 8018378:	e76b      	b.n	8018252 <f_printf+0x30e>
	return EOF;
 801837a:	f04f 30ff 	mov.w	r0, #4294967295
 801837e:	e624      	b.n	8017fca <f_printf+0x86>

08018380 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8018380:	4b11      	ldr	r3, [pc, #68]	; (80183c8 <FATFS_LinkDriver+0x48>)
 8018382:	7b9a      	ldrb	r2, [r3, #14]
 8018384:	2a01      	cmp	r2, #1
 8018386:	d901      	bls.n	801838c <FATFS_LinkDriver+0xc>
  uint8_t ret = 1;
 8018388:	2001      	movs	r0, #1
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
}
 801838a:	4770      	bx	lr
{
 801838c:	b4f0      	push	{r4, r5, r6, r7}
    disk.is_initialized[disk.nbr] = 0;
 801838e:	f893 c00e 	ldrb.w	ip, [r3, #14]
 8018392:	2400      	movs	r4, #0
    disk.drv[disk.nbr] = drv;
 8018394:	7b9e      	ldrb	r6, [r3, #14]
    path[1] = ':';
 8018396:	273a      	movs	r7, #58	; 0x3a
    disk.lun[disk.nbr] = lun;
 8018398:	7b9d      	ldrb	r5, [r3, #14]
    disk.is_initialized[disk.nbr] = 0;
 801839a:	fa5f fc8c 	uxtb.w	ip, ip
    DiskNum = disk.nbr++;
 801839e:	7b9a      	ldrb	r2, [r3, #14]
    disk.drv[disk.nbr] = drv;
 80183a0:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    disk.lun[disk.nbr] = lun;
 80183a4:	441d      	add	r5, r3
    disk.is_initialized[disk.nbr] = 0;
 80183a6:	f803 400c 	strb.w	r4, [r3, ip]
    DiskNum = disk.nbr++;
 80183aa:	b2d2      	uxtb	r2, r2
    disk.drv[disk.nbr] = drv;
 80183ac:	6070      	str	r0, [r6, #4]
    disk.lun[disk.nbr] = lun;
 80183ae:	732c      	strb	r4, [r5, #12]
    path[2] = '/';
 80183b0:	252f      	movs	r5, #47	; 0x2f
    DiskNum = disk.nbr++;
 80183b2:	1c50      	adds	r0, r2, #1
    path[0] = DiskNum + '0';
 80183b4:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 80183b6:	b2c0      	uxtb	r0, r0
 80183b8:	7398      	strb	r0, [r3, #14]
    path[3] = 0;
 80183ba:	4620      	mov	r0, r4
 80183bc:	70cc      	strb	r4, [r1, #3]
    path[1] = ':';
 80183be:	704f      	strb	r7, [r1, #1]
    path[2] = '/';
 80183c0:	708d      	strb	r5, [r1, #2]
    path[0] = DiskNum + '0';
 80183c2:	700a      	strb	r2, [r1, #0]
}
 80183c4:	bcf0      	pop	{r4, r5, r6, r7}
 80183c6:	4770      	bx	lr
 80183c8:	24003e60 	.word	0x24003e60

080183cc <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 80183cc:	f005 bb74 	b.w	801dab8 <malloc>

080183d0 <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 80183d0:	f005 bb7a 	b.w	801dac8 <free>

080183d4 <Init_DataMemoryLayout>:
/**
* @brief Initializes the application data memory layout
* @param  Pointer to Application context
*/
void Init_DataMemoryLayout(AppContext_TypeDef *App_Context_Ptr)
{  
 80183d4:	b470      	push	{r4, r5, r6}
  App_Context_Ptr->Camera_ContextPtr->camera_capture_buffer = ai_fp_global_memory;
  App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE;
 #if MEMORY_SCHEME == SPLIT_INT_EXT
  /*Offset so to "bottom" align pfc_output_buff buffer and resize_output_buff buffer*/
  #define  RESIZE_OUTPUT_BUFFER_OFFSET (PFC_OUTPUT_BUFFER_SIZE - RESIZE_OUTPUT_BUFFER_SIZE) 
  App_Context_Ptr->Ai_ContextPtr->activation_buffer = ai_fp_activation_memory;
 80183d6:	4b08      	ldr	r3, [pc, #32]	; (80183f8 <Init_DataMemoryLayout+0x24>)
  App_Context_Ptr->Camera_ContextPtr->camera_capture_buffer = ai_fp_global_memory;
 80183d8:	4d08      	ldr	r5, [pc, #32]	; (80183fc <Init_DataMemoryLayout+0x28>)
 80183da:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
  App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.pData = ai_fp_activation_memory;
  App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.pData = ai_fp_activation_memory + RESIZE_OUTPUT_BUFFER_OFFSET;
 80183dc:	f503 4644 	add.w	r6, r3, #50176	; 0xc400
  App_Context_Ptr->Ai_ContextPtr->activation_buffer = ai_fp_activation_memory;
 80183e0:	6f02      	ldr	r2, [r0, #112]	; 0x70
  App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE;
 80183e2:	f505 21e1 	add.w	r1, r5, #460800	; 0x70800
  App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.pData = ai_fp_activation_memory;
 80183e6:	6e00      	ldr	r0, [r0, #96]	; 0x60
  App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE;
 80183e8:	e9c4 5100 	strd	r5, r1, [r4]
  App_Context_Ptr->Ai_ContextPtr->activation_buffer = ai_fp_activation_memory;
 80183ec:	6093      	str	r3, [r2, #8]
  App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.pData = ai_fp_activation_memory + RESIZE_OUTPUT_BUFFER_OFFSET;
 80183ee:	6546      	str	r6, [r0, #84]	; 0x54
  App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.pData = ai_fp_activation_memory;
 80183f0:	6343      	str	r3, [r0, #52]	; 0x34
  #ifdef AI_NETWORK_INPUTS_IN_ACTIVATIONS
   /*Initialized to NULL since input buffer is allocated within activation buffer ==> its size does not need to be taken into account*/  
   App_Context_Ptr->Ai_ContextPtr->nn_input_buffer = NULL;
  #else
   App_Context_Ptr->Ai_ContextPtr->nn_input_buffer = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE;
 80183f2:	6051      	str	r1, [r2, #4]
  #endif
 #endif
#else
 #error Please check definition of MEMORY_SCHEME define
#endif
}
 80183f4:	bc70      	pop	{r4, r5, r6}
 80183f6:	4770      	bx	lr
 80183f8:	24005900 	.word	0x24005900
 80183fc:	d007dce0 	.word	0xd007dce0

08018400 <Run_Preprocessing>:
* @brief  Run preprocessing stages on captured frame
* @param  App context ptr
* @retval None
*/
void Run_Preprocessing(AppContext_TypeDef *App_Context_Ptr)
{
 8018400:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    /*********************************************************************************************/
    UTILS_DCache_Coherency_Maintenance((void *)(App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer), CAM_FRAME_BUFFER_SIZE, INVALIDATE);
  }
#endif
  
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer);
 8018404:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
{
 8018406:	4605      	mov	r5, r0
  TestRunContext_TypeDef* TestRunCtxt_Ptr=&App_Context_Ptr->Test_ContextPtr->TestRunContext;
 8018408:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[0];
  TestRunCtxt_Ptr->src_width_size=CAM_RES_WIDTH;
  TestRunCtxt_Ptr->src_height_size=CAM_RES_HEIGHT;
  TestRunCtxt_Ptr->src_size=CAM_FRAME_BUFFER_SIZE;
  TestRunCtxt_Ptr->PerformCapture=1;
 801840a:	f04f 0a01 	mov.w	sl, #1
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer);
 801840e:	685b      	ldr	r3, [r3, #4]
  TestRunCtxt_Ptr->src_size=CAM_FRAME_BUFFER_SIZE;
 8018410:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
  TestRunCtxt_Ptr->DumpFormat=BMP565;
  TestRunCtxt_Ptr->rb_swap=0;
 8018414:	2700      	movs	r7, #0
  TestRunCtxt_Ptr->src_width_size=CAM_RES_WIDTH;
 8018416:	f44f 7bf0 	mov.w	fp, #480	; 0x1e0
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[0];
 801841a:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 80185f0 <Run_Preprocessing+0x1f0>
  PreprocContext_TypeDef* PreprocCtxt_Ptr=App_Context_Ptr->Preproc_ContextPtr;
 801841e:	6e06      	ldr	r6, [r0, #96]	; 0x60
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 8018420:	4620      	mov	r0, r4
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer);
 8018422:	f8c4 3b48 	str.w	r3, [r4, #2888]	; 0xb48
  TestRunCtxt_Ptr->src_size=CAM_FRAME_BUFFER_SIZE;
 8018426:	f8c4 2b58 	str.w	r2, [r4, #2904]	; 0xb58
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 801842a:	7829      	ldrb	r1, [r5, #0]
  TestRunCtxt_Ptr->PerformCapture=1;
 801842c:	f8c4 ab5c 	str.w	sl, [r4, #2908]	; 0xb5c
  TestRunCtxt_Ptr->DumpFormat=BMP565;
 8018430:	f884 ab60 	strb.w	sl, [r4, #2912]	; 0xb60
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[0];
 8018434:	f8c4 8b4c 	str.w	r8, [r4, #2892]	; 0xb4c
  TestRunCtxt_Ptr->src_width_size=CAM_RES_WIDTH;
 8018438:	f8c4 bb50 	str.w	fp, [r4, #2896]	; 0xb50
  TestRunCtxt_Ptr->src_height_size=CAM_RES_HEIGHT;
 801843c:	f8c4 bb54 	str.w	fp, [r4, #2900]	; 0xb54
  TestRunCtxt_Ptr->rb_swap=0;
 8018440:	f8c4 7b64 	str.w	r7, [r4, #2916]	; 0xb64
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 8018444:	f7eb f94c 	bl	80036e0 <TEST_Run>
  
  tresize_start=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 8018448:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 801844a:	f7ec f885 	bl	8004558 <UTILS_GetTimeStamp>
  PreprocCtxt_Ptr->Resize_Src_Img.pData=App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer;
  PreprocCtxt_Ptr->Resize_Src_Img.width=CAM_RES_WIDTH;
  PreprocCtxt_Ptr->Resize_Src_Img.height=CAM_RES_HEIGHT;
  PreprocCtxt_Ptr->Resize_Src_Img.format=PXFMT_RGB565;
  PreprocCtxt_Ptr->Resize_Dst_Img.pData=App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.pData;
  PreprocCtxt_Ptr->Resize_Dst_Img.width=App_Context_Ptr->Ai_ContextPtr->nn_width;
 801844e:	6f29      	ldr	r1, [r5, #112]	; 0x70
  tresize_start=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 8018450:	4681      	mov	r9, r0
  PreprocCtxt_Ptr->Resize_Dst_Img.pData=App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.pData;
 8018452:	e9d5 3217 	ldrd	r3, r2, [r5, #92]	; 0x5c
  PreprocCtxt_Ptr->Resize_Src_Img.pData=App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer;
 8018456:	685b      	ldr	r3, [r3, #4]
  PreprocCtxt_Ptr->Resize_Dst_Img.format=PXFMT_RGB565;
  PreprocCtxt_Ptr->Roi.x0=0;
  PreprocCtxt_Ptr->Roi.y0=0;
  PreprocCtxt_Ptr->Roi.width=0;
  PreprocCtxt_Ptr->Roi.height=0;
  PREPROC_ImageResize(App_Context_Ptr->Preproc_ContextPtr);
 8018458:	4610      	mov	r0, r2
  PreprocCtxt_Ptr->Resize_Dst_Img.pData=App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.pData;
 801845a:	6d52      	ldr	r2, [r2, #84]	; 0x54
  PreprocCtxt_Ptr->Resize_Src_Img.pData=App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer;
 801845c:	6473      	str	r3, [r6, #68]	; 0x44
  PreprocCtxt_Ptr->Resize_Dst_Img.height=App_Context_Ptr->Ai_ContextPtr->nn_height;
 801845e:	e9d1 3104 	ldrd	r3, r1, [r1, #16]
  PreprocCtxt_Ptr->Resize_Src_Img.height=CAM_RES_HEIGHT;
 8018462:	e9c6 bb0f 	strd	fp, fp, [r6, #60]	; 0x3c
  PreprocCtxt_Ptr->Resize_Dst_Img.height=App_Context_Ptr->Ai_ContextPtr->nn_height;
 8018466:	e9c6 3113 	strd	r3, r1, [r6, #76]	; 0x4c
  PreprocCtxt_Ptr->Resize_Dst_Img.pData=App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.pData;
 801846a:	6572      	str	r2, [r6, #84]	; 0x54
  PreprocCtxt_Ptr->Resize_Src_Img.format=PXFMT_RGB565;
 801846c:	f886 a048 	strb.w	sl, [r6, #72]	; 0x48
  PreprocCtxt_Ptr->Resize_Dst_Img.format=PXFMT_RGB565;
 8018470:	f886 a058 	strb.w	sl, [r6, #88]	; 0x58
  PreprocCtxt_Ptr->Roi.y0=0;
 8018474:	e9c6 7703 	strd	r7, r7, [r6, #12]
  PreprocCtxt_Ptr->Roi.height=0;
 8018478:	e9c6 7705 	strd	r7, r7, [r6, #20]
  PREPROC_ImageResize(App_Context_Ptr->Preproc_ContextPtr);
 801847c:	f7e9 fa84 	bl	8001988 <PREPROC_ImageResize>
  
  tresize_stop=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 8018480:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 8018482:	f7ec f869 	bl	8004558 <UTILS_GetTimeStamp>
  
#if PIXEL_FMT_CONV == HW_PFC
  /******************************************************************************************/
  /****Coherency purpose: clean the source buffer area in L1 D-Cache before DMA2D reading****/
  /******************************************************************************************/
  UTILS_DCache_Coherency_Maintenance((void *)(App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.pData), RESIZE_OUTPUT_BUFFER_SIZE, CLEAN);
 8018486:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8018488:	f44f 31c4 	mov.w	r1, #100352	; 0x18800
 801848c:	2202      	movs	r2, #2
  tresize_stop=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 801848e:	4682      	mov	sl, r0
  UTILS_DCache_Coherency_Maintenance((void *)(App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.pData), RESIZE_OUTPUT_BUFFER_SIZE, CLEAN);
 8018490:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8018492:	f7ec f91d 	bl	80046d0 <UTILS_DCache_Coherency_Maintenance>
#endif
  
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.pData);
 8018496:	6e2a      	ldr	r2, [r5, #96]	; 0x60
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[1];
 8018498:	f108 0320 	add.w	r3, r8, #32
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.pData);
 801849c:	6d52      	ldr	r2, [r2, #84]	; 0x54
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[1];
 801849e:	f8c4 3b4c 	str.w	r3, [r4, #2892]	; 0xb4c
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.pData);
 80184a2:	f8c4 2b48 	str.w	r2, [r4, #2888]	; 0xb48
  TestRunCtxt_Ptr->src_width_size=ai_get_input_width();
 80184a6:	f7e8 f935 	bl	8000714 <ai_get_input_width>
 80184aa:	f8c4 0b50 	str.w	r0, [r4, #2896]	; 0xb50
  TestRunCtxt_Ptr->src_height_size=ai_get_input_height();
 80184ae:	f7e8 f92b 	bl	8000708 <ai_get_input_height>
  TestRunCtxt_Ptr->src_size=RESIZE_OUTPUT_BUFFER_SIZE;
  TestRunCtxt_Ptr->PerformCapture=0;
  TestRunCtxt_Ptr->DumpFormat=get_dump_format(&App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img);
 80184b2:	6e2b      	ldr	r3, [r5, #96]	; 0x60
  TestRunCtxt_Ptr->src_size=RESIZE_OUTPUT_BUFFER_SIZE;
 80184b4:	f44f 32c4 	mov.w	r2, #100352	; 0x18800
  TestRunCtxt_Ptr->src_height_size=ai_get_input_height();
 80184b8:	f8c4 0b54 	str.w	r0, [r4, #2900]	; 0xb54
  TestRunCtxt_Ptr->DumpFormat=get_dump_format(&App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img);
 80184bc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
  TestRunCtxt_Ptr->PerformCapture=0;
 80184c0:	f8c4 7b5c 	str.w	r7, [r4, #2908]	; 0xb5c
 80184c4:	2b02      	cmp	r3, #2
  TestRunCtxt_Ptr->src_size=RESIZE_OUTPUT_BUFFER_SIZE;
 80184c6:	f8c4 2b58 	str.w	r2, [r4, #2904]	; 0xb58
 80184ca:	f200 8086 	bhi.w	80185da <Run_Preprocessing+0x1da>
 80184ce:	4a45      	ldr	r2, [pc, #276]	; (80185e4 <Run_Preprocessing+0x1e4>)
 80184d0:	5cd3      	ldrb	r3, [r2, r3]
  TestRunCtxt_Ptr->rb_swap=0;
 80184d2:	2700      	movs	r7, #0
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 80184d4:	7829      	ldrb	r1, [r5, #0]
  TestRunCtxt_Ptr->DumpFormat=get_dump_format(&App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img);
 80184d6:	f884 3b60 	strb.w	r3, [r4, #2912]	; 0xb60
  /****Image Pixel Format Conversion****/
  /*************************************/
  PreprocCtxt_Ptr->Pfc_Src_Img.pData=App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.pData;
  PreprocCtxt_Ptr->Pfc_Src_Img.width=App_Context_Ptr->Ai_ContextPtr->nn_width;
  PreprocCtxt_Ptr->Pfc_Src_Img.height=App_Context_Ptr->Ai_ContextPtr->nn_height;
  PreprocCtxt_Ptr->Pfc_Src_Img.format=PXFMT_RGB565;
 80184da:	f04f 0b01 	mov.w	fp, #1
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 80184de:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
  TestRunCtxt_Ptr->rb_swap=0;
 80184e0:	f8c4 7b64 	str.w	r7, [r4, #2916]	; 0xb64
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 80184e4:	f7eb f8fc 	bl	80036e0 <TEST_Run>
  tpfc_start=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 80184e8:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 80184ea:	f7ec f835 	bl	8004558 <UTILS_GetTimeStamp>
  PreprocCtxt_Ptr->Pfc_Src_Img.pData=App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.pData;
 80184ee:	6e2b      	ldr	r3, [r5, #96]	; 0x60
  PreprocCtxt_Ptr->Pfc_Src_Img.width=App_Context_Ptr->Ai_ContextPtr->nn_width;
 80184f0:	6f29      	ldr	r1, [r5, #112]	; 0x70
  tpfc_start=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 80184f2:	4680      	mov	r8, r0
  PreprocCtxt_Ptr->Pfc_Src_Img.pData=App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.pData;
 80184f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  PreprocCtxt_Ptr->Pfc_Dst_Img.height=App_Context_Ptr->Ai_ContextPtr->nn_height;
  PreprocCtxt_Ptr->Dma2dcfg.x=0;
  PreprocCtxt_Ptr->Dma2dcfg.y=0;
  PreprocCtxt_Ptr->Dma2dcfg.rowStride=App_Context_Ptr->Ai_ContextPtr->nn_width;
  PreprocCtxt_Ptr->red_blue_swap=1;
  PREPROC_PixelFormatConversion(App_Context_Ptr->Preproc_ContextPtr);
 80184f6:	4618      	mov	r0, r3
  PreprocCtxt_Ptr->Pfc_Dst_Img.pData=App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.pData;
 80184f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  PreprocCtxt_Ptr->Pfc_Src_Img.pData=App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.pData;
 80184fa:	6272      	str	r2, [r6, #36]	; 0x24
  PreprocCtxt_Ptr->Pfc_Src_Img.height=App_Context_Ptr->Ai_ContextPtr->nn_height;
 80184fc:	e9d1 2104 	ldrd	r2, r1, [r1, #16]
  PreprocCtxt_Ptr->Pfc_Dst_Img.pData=App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.pData;
 8018500:	6373      	str	r3, [r6, #52]	; 0x34
  PreprocCtxt_Ptr->Pfc_Src_Img.width=App_Context_Ptr->Ai_ContextPtr->nn_width;
 8018502:	61f2      	str	r2, [r6, #28]
  PreprocCtxt_Ptr->Pfc_Src_Img.height=App_Context_Ptr->Ai_ContextPtr->nn_height;
 8018504:	6231      	str	r1, [r6, #32]
  PreprocCtxt_Ptr->Pfc_Src_Img.format=PXFMT_RGB565;
 8018506:	f886 b028 	strb.w	fp, [r6, #40]	; 0x28
  PreprocCtxt_Ptr->red_blue_swap=1;
 801850a:	f8c6 b008 	str.w	fp, [r6, #8]
  PreprocCtxt_Ptr->Pfc_Dst_Img.height=App_Context_Ptr->Ai_ContextPtr->nn_height;
 801850e:	e9c6 210b 	strd	r2, r1, [r6, #44]	; 0x2c
  PreprocCtxt_Ptr->Dma2dcfg.x=0;
 8018512:	e9c6 7200 	strd	r7, r2, [r6]
  PREPROC_PixelFormatConversion(App_Context_Ptr->Preproc_ContextPtr);
 8018516:	f7e9 fa3f 	bl	8001998 <PREPROC_PixelFormatConversion>
  
  tpfc_stop=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 801851a:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 801851c:	f7ec f81c 	bl	8004558 <UTILS_GetTimeStamp>
  
#if PIXEL_FMT_CONV == HW_PFC 
  /**************************************************************************************/
  /****Coherency purpose: invalidate the source area in L1 D-Cache before CPU reading****/  
  /**************************************************************************************/
  UTILS_DCache_Coherency_Maintenance((void *)(App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.pData), 
 8018520:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8018522:	f44f 3113 	mov.w	r1, #150528	; 0x24c00
 8018526:	465a      	mov	r2, fp
  tpfc_stop=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 8018528:	4606      	mov	r6, r0
  UTILS_DCache_Coherency_Maintenance((void *)(App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.pData), 
 801852a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801852c:	f7ec f8d0 	bl	80046d0 <UTILS_DCache_Coherency_Maintenance>
                                     PFC_OUTPUT_BUFFER_SIZE, 
                                     INVALIDATE);
#endif
  
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.pData);
 8018530:	6e2b      	ldr	r3, [r5, #96]	; 0x60
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[2];
 8018532:	4a2d      	ldr	r2, [pc, #180]	; (80185e8 <Run_Preprocessing+0x1e8>)
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.pData);
 8018534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[2];
 8018536:	f8c4 2b4c 	str.w	r2, [r4, #2892]	; 0xb4c
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.pData);
 801853a:	f8c4 3b48 	str.w	r3, [r4, #2888]	; 0xb48
  TestRunCtxt_Ptr->src_width_size=ai_get_input_width();
 801853e:	f7e8 f8e9 	bl	8000714 <ai_get_input_width>
 8018542:	f8c4 0b50 	str.w	r0, [r4, #2896]	; 0xb50
  TestRunCtxt_Ptr->src_height_size=ai_get_input_height();
 8018546:	f7e8 f8df 	bl	8000708 <ai_get_input_height>
  TestRunCtxt_Ptr->src_size=PFC_OUTPUT_BUFFER_SIZE;
  TestRunCtxt_Ptr->PerformCapture=0;
  TestRunCtxt_Ptr->DumpFormat=get_dump_format(&App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img);
 801854a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
  TestRunCtxt_Ptr->src_size=PFC_OUTPUT_BUFFER_SIZE;
 801854c:	f44f 3213 	mov.w	r2, #150528	; 0x24c00
  TestRunCtxt_Ptr->PerformCapture=0;
 8018550:	f8c4 7b5c 	str.w	r7, [r4, #2908]	; 0xb5c
  TestRunCtxt_Ptr->DumpFormat=get_dump_format(&App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img);
 8018554:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
  TestRunCtxt_Ptr->src_height_size=ai_get_input_height();
 8018558:	f8c4 0b54 	str.w	r0, [r4, #2900]	; 0xb54
 801855c:	2b02      	cmp	r3, #2
  TestRunCtxt_Ptr->src_size=PFC_OUTPUT_BUFFER_SIZE;
 801855e:	f8c4 2b58 	str.w	r2, [r4, #2904]	; 0xb58
 8018562:	d83c      	bhi.n	80185de <Run_Preprocessing+0x1de>
 8018564:	4a1f      	ldr	r2, [pc, #124]	; (80185e4 <Run_Preprocessing+0x1e4>)
 8018566:	5cd2      	ldrb	r2, [r2, r3]
  TestRunCtxt_Ptr->rb_swap=1;
 8018568:	2301      	movs	r3, #1
  TestRunCtxt_Ptr->DumpFormat=get_dump_format(&App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img);
 801856a:	f884 2b60 	strb.w	r2, [r4, #2912]	; 0xb60
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 801856e:	7829      	ldrb	r1, [r5, #0]
  TestRunCtxt_Ptr->PerformCapture=0;
  TestRunCtxt_Ptr->DumpFormat=RAW;
  TestRunCtxt_Ptr->rb_swap=0;
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
  
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_PFC]=tpfc_stop-tpfc_start;
 8018570:	eba6 0608 	sub.w	r6, r6, r8
  TestRunCtxt_Ptr->rb_swap=1;
 8018574:	f8c4 3b64 	str.w	r3, [r4, #2916]	; 0xb64
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 8018578:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 801857a:	f7eb f8b1 	bl	80036e0 <TEST_Run>
  tpvc_start=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 801857e:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 8018580:	f7eb ffea 	bl	8004558 <UTILS_GetTimeStamp>
  AI_PixelValueConversion(App_Context_Ptr->Ai_ContextPtr, 
 8018584:	6e2b      	ldr	r3, [r5, #96]	; 0x60
  tpvc_start=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 8018586:	4683      	mov	fp, r0
  AI_PixelValueConversion(App_Context_Ptr->Ai_ContextPtr, 
 8018588:	6f28      	ldr	r0, [r5, #112]	; 0x70
 801858a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801858c:	f7e8 faee 	bl	8000b6c <AI_PixelValueConversion>
  tpvc_stop=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 8018590:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 8018592:	f7eb ffe1 	bl	8004558 <UTILS_GetTimeStamp>
  TestRunCtxt_Ptr->src_buff_addr=(void *)(NULL);
 8018596:	2300      	movs	r3, #0
  TestRunCtxt_Ptr->DumpFormat=RAW;
 8018598:	2203      	movs	r2, #3
  TestRunCtxt_Ptr->src_buff_name="";
 801859a:	4914      	ldr	r1, [pc, #80]	; (80185ec <Run_Preprocessing+0x1ec>)
  tpvc_stop=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 801859c:	4607      	mov	r7, r0
  TestRunCtxt_Ptr->src_buff_addr=(void *)(NULL);
 801859e:	f8c4 3b48 	str.w	r3, [r4, #2888]	; 0xb48
  TestRunCtxt_Ptr->src_width_size=0;
 80185a2:	f8c4 3b50 	str.w	r3, [r4, #2896]	; 0xb50
  TestRunCtxt_Ptr->src_height_size=0;
 80185a6:	f8c4 3b54 	str.w	r3, [r4, #2900]	; 0xb54
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_RESIZE]=tresize_stop-tresize_start;
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_PVC]=tpvc_stop-tpvc_start;
 80185aa:	eba7 070b 	sub.w	r7, r7, fp
  TestRunCtxt_Ptr->src_size=0;
 80185ae:	f8c4 3b58 	str.w	r3, [r4, #2904]	; 0xb58
  TestRunCtxt_Ptr->PerformCapture=0;
 80185b2:	f8c4 3b5c 	str.w	r3, [r4, #2908]	; 0xb5c
  TestRunCtxt_Ptr->rb_swap=0;
 80185b6:	f8c4 3b64 	str.w	r3, [r4, #2916]	; 0xb64
  TestRunCtxt_Ptr->src_buff_name="";
 80185ba:	f8c4 1b4c 	str.w	r1, [r4, #2892]	; 0xb4c
  TestRunCtxt_Ptr->DumpFormat=RAW;
 80185be:	f884 2b60 	strb.w	r2, [r4, #2912]	; 0xb60
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 80185c2:	7829      	ldrb	r1, [r5, #0]
 80185c4:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 80185c6:	f7eb f88b 	bl	80036e0 <TEST_Run>
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_PFC]=tpfc_stop-tpfc_start;
 80185ca:	6eab      	ldr	r3, [r5, #104]	; 0x68
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_RESIZE]=tresize_stop-tresize_start;
 80185cc:	ebaa 0209 	sub.w	r2, sl, r9
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_PFC]=tpfc_stop-tpfc_start;
 80185d0:	e9c3 6702 	strd	r6, r7, [r3, #8]
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_RESIZE]=tresize_stop-tresize_start;
 80185d4:	605a      	str	r2, [r3, #4]
}
 80185d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TestRunCtxt_Ptr->DumpFormat=get_dump_format(&App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img);
 80185da:	2303      	movs	r3, #3
 80185dc:	e779      	b.n	80184d2 <Run_Preprocessing+0xd2>
  TestRunCtxt_Ptr->DumpFormat=get_dump_format(&App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img);
 80185de:	2203      	movs	r2, #3
 80185e0:	e7c2      	b.n	8018568 <Run_Preprocessing+0x168>
 80185e2:	bf00      	nop
 80185e4:	08021884 	.word	0x08021884
 80185e8:	24000094 	.word	0x24000094
 80185ec:	0802062c 	.word	0x0802062c
 80185f0:	24000054 	.word	0x24000054

080185f4 <Resize_Frame>:
* @param  dstH         Destination image height
* @param  Top2Bottom   Value of 1/0 indicates that the rescales performs from the top/bottom to the bottom/top of the buffers
* @retval void         None
*/
void Resize_Frame(Image_TypeDef *srcImage, Image_TypeDef *dstImage, Roi_TypeDef *roi)
{
 80185f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int x_ratio = (int)(((roi->width ? roi->width : srcImage->width)<<16)/dstImage->width)+1;
 80185f8:	6897      	ldr	r7, [r2, #8]
{
 80185fa:	b085      	sub	sp, #20
 80185fc:	4616      	mov	r6, r2
 80185fe:	4605      	mov	r5, r0
 8018600:	4688      	mov	r8, r1
  int x_ratio = (int)(((roi->width ? roi->width : srcImage->width)<<16)/dstImage->width)+1;
 8018602:	b907      	cbnz	r7, 8018606 <Resize_Frame+0x12>
 8018604:	6807      	ldr	r7, [r0, #0]
 8018606:	f8d8 2000 	ldr.w	r2, [r8]
 801860a:	043f      	lsls	r7, r7, #16
  int y_ratio = (int)(((roi->height ? roi->height : srcImage->height)<<16)/dstImage->height)+1;
 801860c:	68f3      	ldr	r3, [r6, #12]
  int x_ratio = (int)(((roi->width ? roi->width : srcImage->width)<<16)/dstImage->width)+1;
 801860e:	fbb7 f7f2 	udiv	r7, r7, r2
 8018612:	1c7a      	adds	r2, r7, #1
 8018614:	9202      	str	r2, [sp, #8]
  int y_ratio = (int)(((roi->height ? roi->height : srcImage->height)<<16)/dstImage->height)+1;
 8018616:	b903      	cbnz	r3, 801861a <Resize_Frame+0x26>
 8018618:	686b      	ldr	r3, [r5, #4]
 801861a:	041b      	lsls	r3, r3, #16
 801861c:	f8d8 1004 	ldr.w	r1, [r8, #4]
  uint32_t pixelSize=IMG_BYTES_PER_PX(srcImage->format);
 8018620:	7b2a      	ldrb	r2, [r5, #12]
  int y_ratio = (int)(((roi->height ? roi->height : srcImage->height)<<16)/dstImage->height)+1;
 8018622:	fbb3 faf1 	udiv	sl, r3, r1
 8018626:	f10a 0b01 	add.w	fp, sl, #1
  uint32_t pixelSize=IMG_BYTES_PER_PX(srcImage->format);
 801862a:	b1a2      	cbz	r2, 8018656 <Resize_Frame+0x62>
 801862c:	2a01      	cmp	r2, #1
 801862e:	f000 810f 	beq.w	8018850 <Resize_Frame+0x25c>
 8018632:	2a02      	cmp	r2, #2
 8018634:	f000 810e 	beq.w	8018854 <Resize_Frame+0x260>
 8018638:	2a03      	cmp	r2, #3
  uint32_t Top2Bottom;
  
  Top2Bottom=Image_CheckResizeMemoryLayout(srcImage, dstImage);
 801863a:	4641      	mov	r1, r8
 801863c:	4628      	mov	r0, r5
  uint32_t pixelSize=IMG_BYTES_PER_PX(srcImage->format);
 801863e:	bf14      	ite	ne
 8018640:	2400      	movne	r4, #0
 8018642:	2404      	moveq	r4, #4
  Top2Bottom=Image_CheckResizeMemoryLayout(srcImage, dstImage);
 8018644:	f001 f8e2 	bl	801980c <Image_CheckResizeMemoryLayout>
  
  if(Top2Bottom == 0)
 8018648:	b160      	cbz	r0, 8018664 <Resize_Frame+0x70>
          *((uint8_t*)dstImage->pData + i + j) = *((uint8_t*)srcImage->pData + (((sy+roi->y0)*srcImage->width) + (sx+roi->x0))*pixelSize + j);//(uint8_t) srcImage->pData[];
        }
      }
    }
  }
  else if(Top2Bottom == 1)
 801864a:	2801      	cmp	r0, #1
 801864c:	f000 8088 	beq.w	8018760 <Resize_Frame+0x16c>
          *((uint8_t*)dstImage->pData + i + j) =  *((uint8_t*)srcImage->pData +(((sy+roi->y0)*srcImage->width) + (sx+roi->x0))*pixelSize + j);
        }
      }
    }
  }
}
 8018650:	b005      	add	sp, #20
 8018652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint32_t pixelSize=IMG_BYTES_PER_PX(srcImage->format);
 8018656:	2401      	movs	r4, #1
  Top2Bottom=Image_CheckResizeMemoryLayout(srcImage, dstImage);
 8018658:	4641      	mov	r1, r8
 801865a:	4628      	mov	r0, r5
 801865c:	f001 f8d6 	bl	801980c <Image_CheckResizeMemoryLayout>
  if(Top2Bottom == 0)
 8018660:	2800      	cmp	r0, #0
 8018662:	d1f2      	bne.n	801864a <Resize_Frame+0x56>
    for (int y=dstImage->height-1, i=(dstImage->width*dstImage->height*pixelSize -2  ); y>=0; y--)
 8018664:	e9d8 2300 	ldrd	r2, r3, [r8]
 8018668:	fb02 fc03 	mul.w	ip, r2, r3
 801866c:	f1b3 0901 	subs.w	r9, r3, #1
 8018670:	fb04 fc0c 	mul.w	ip, r4, ip
 8018674:	f1ac 0c02 	sub.w	ip, ip, #2
 8018678:	d4ea      	bmi.n	8018650 <Resize_Frame+0x5c>
 801867a:	ea6f 0e07 	mvn.w	lr, r7
 801867e:	ea6f 030a 	mvn.w	r3, sl
 8018682:	4611      	mov	r1, r2
 8018684:	fb09 fa0b 	mul.w	sl, r9, fp
 8018688:	46cb      	mov	fp, r9
 801868a:	46f1      	mov	r9, lr
 801868c:	9303      	str	r3, [sp, #12]
      for (int x=dstImage->width-1; x>=0; x--, i-=pixelSize)
 801868e:	3901      	subs	r1, #1
      int sy = (y*y_ratio)>>16;
 8018690:	ea4f 4e2a 	mov.w	lr, sl, asr #16
      for (int x=dstImage->width-1; x>=0; x--, i-=pixelSize)
 8018694:	d459      	bmi.n	801874a <Resize_Frame+0x156>
 8018696:	9b02      	ldr	r3, [sp, #8]
 8018698:	f8cd b004 	str.w	fp, [sp, #4]
 801869c:	46d3      	mov	fp, sl
 801869e:	fb01 f703 	mul.w	r7, r1, r3
 80186a2:	46ca      	mov	sl, r9
 80186a4:	46f1      	mov	r9, lr
 80186a6:	468e      	mov	lr, r1
        int sx = (x*x_ratio)>>16;
 80186a8:	143a      	asrs	r2, r7, #16
      for (int x=dstImage->width-1; x>=0; x--, i-=pixelSize)
 80186aa:	f10e 3eff 	add.w	lr, lr, #4294967295
 80186ae:	4457      	add	r7, sl
        for(int j=0; j<pixelSize; j++)
 80186b0:	2c00      	cmp	r4, #0
 80186b2:	d041      	beq.n	8018738 <Resize_Frame+0x144>
          *((uint8_t*)dstImage->pData + i + j) = *((uint8_t*)srcImage->pData + (((sy+roi->y0)*srcImage->width) + (sx+roi->x0))*pixelSize + j);//(uint8_t) srcImage->pData[];
 80186b4:	6873      	ldr	r3, [r6, #4]
        for(int j=0; j<pixelSize; j++)
 80186b6:	2c01      	cmp	r4, #1
          *((uint8_t*)dstImage->pData + i + j) = *((uint8_t*)srcImage->pData + (((sy+roi->y0)*srcImage->width) + (sx+roi->x0))*pixelSize + j);//(uint8_t) srcImage->pData[];
 80186b8:	6831      	ldr	r1, [r6, #0]
 80186ba:	6828      	ldr	r0, [r5, #0]
 80186bc:	444b      	add	r3, r9
 80186be:	fb00 1303 	mla	r3, r0, r3, r1
 80186c2:	68a8      	ldr	r0, [r5, #8]
 80186c4:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80186c8:	4413      	add	r3, r2
 80186ca:	fb04 f303 	mul.w	r3, r4, r3
 80186ce:	5cc3      	ldrb	r3, [r0, r3]
 80186d0:	f801 300c 	strb.w	r3, [r1, ip]
        for(int j=0; j<pixelSize; j++)
 80186d4:	d030      	beq.n	8018738 <Resize_Frame+0x144>
          *((uint8_t*)dstImage->pData + i + j) = *((uint8_t*)srcImage->pData + (((sy+roi->y0)*srcImage->width) + (sx+roi->x0))*pixelSize + j);//(uint8_t) srcImage->pData[];
 80186d6:	6873      	ldr	r3, [r6, #4]
        for(int j=0; j<pixelSize; j++)
 80186d8:	2c02      	cmp	r4, #2
          *((uint8_t*)dstImage->pData + i + j) = *((uint8_t*)srcImage->pData + (((sy+roi->y0)*srcImage->width) + (sx+roi->x0))*pixelSize + j);//(uint8_t) srcImage->pData[];
 80186da:	6831      	ldr	r1, [r6, #0]
 80186dc:	6828      	ldr	r0, [r5, #0]
 80186de:	444b      	add	r3, r9
 80186e0:	fb00 1303 	mla	r3, r0, r3, r1
 80186e4:	68a8      	ldr	r0, [r5, #8]
 80186e6:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80186ea:	4413      	add	r3, r2
 80186ec:	4461      	add	r1, ip
 80186ee:	fb04 0303 	mla	r3, r4, r3, r0
 80186f2:	785b      	ldrb	r3, [r3, #1]
 80186f4:	704b      	strb	r3, [r1, #1]
        for(int j=0; j<pixelSize; j++)
 80186f6:	d01f      	beq.n	8018738 <Resize_Frame+0x144>
          *((uint8_t*)dstImage->pData + i + j) = *((uint8_t*)srcImage->pData + (((sy+roi->y0)*srcImage->width) + (sx+roi->x0))*pixelSize + j);//(uint8_t) srcImage->pData[];
 80186f8:	6873      	ldr	r3, [r6, #4]
        for(int j=0; j<pixelSize; j++)
 80186fa:	2c04      	cmp	r4, #4
          *((uint8_t*)dstImage->pData + i + j) = *((uint8_t*)srcImage->pData + (((sy+roi->y0)*srcImage->width) + (sx+roi->x0))*pixelSize + j);//(uint8_t) srcImage->pData[];
 80186fc:	6831      	ldr	r1, [r6, #0]
 80186fe:	6828      	ldr	r0, [r5, #0]
 8018700:	444b      	add	r3, r9
 8018702:	fb00 1303 	mla	r3, r0, r3, r1
 8018706:	68a8      	ldr	r0, [r5, #8]
 8018708:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801870c:	4413      	add	r3, r2
 801870e:	4461      	add	r1, ip
 8018710:	fb04 0303 	mla	r3, r4, r3, r0
 8018714:	789b      	ldrb	r3, [r3, #2]
 8018716:	708b      	strb	r3, [r1, #2]
        for(int j=0; j<pixelSize; j++)
 8018718:	d10e      	bne.n	8018738 <Resize_Frame+0x144>
          *((uint8_t*)dstImage->pData + i + j) = *((uint8_t*)srcImage->pData + (((sy+roi->y0)*srcImage->width) + (sx+roi->x0))*pixelSize + j);//(uint8_t) srcImage->pData[];
 801871a:	6873      	ldr	r3, [r6, #4]
 801871c:	6829      	ldr	r1, [r5, #0]
 801871e:	444b      	add	r3, r9
 8018720:	6830      	ldr	r0, [r6, #0]
 8018722:	fb01 2203 	mla	r2, r1, r3, r2
 8018726:	68ab      	ldr	r3, [r5, #8]
 8018728:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801872c:	4402      	add	r2, r0
 801872e:	4461      	add	r1, ip
 8018730:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8018734:	78d3      	ldrb	r3, [r2, #3]
 8018736:	70cb      	strb	r3, [r1, #3]
      for (int x=dstImage->width-1; x>=0; x--, i-=pixelSize)
 8018738:	f1be 3fff 	cmp.w	lr, #4294967295
 801873c:	ebac 0c04 	sub.w	ip, ip, r4
 8018740:	d1b2      	bne.n	80186a8 <Resize_Frame+0xb4>
 8018742:	46d1      	mov	r9, sl
 8018744:	46da      	mov	sl, fp
 8018746:	f8dd b004 	ldr.w	fp, [sp, #4]
    for (int y=dstImage->height-1, i=(dstImage->width*dstImage->height*pixelSize -2  ); y>=0; y--)
 801874a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801874e:	9b03      	ldr	r3, [sp, #12]
 8018750:	f1bb 3fff 	cmp.w	fp, #4294967295
 8018754:	449a      	add	sl, r3
 8018756:	f43f af7b 	beq.w	8018650 <Resize_Frame+0x5c>
 801875a:	f8d8 1000 	ldr.w	r1, [r8]
 801875e:	e796      	b.n	801868e <Resize_Frame+0x9a>
    for (int y=0, i=0; y<dstImage->height; y++)
 8018760:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8018764:	2a00      	cmp	r2, #0
 8018766:	f43f af73 	beq.w	8018650 <Resize_Frame+0x5c>
 801876a:	f04f 0e00 	mov.w	lr, #0
 801876e:	f8cd b00c 	str.w	fp, [sp, #12]
 8018772:	f8d8 3000 	ldr.w	r3, [r8]
 8018776:	46f4      	mov	ip, lr
 8018778:	46f3      	mov	fp, lr
 801877a:	f8dd 9008 	ldr.w	r9, [sp, #8]
 801877e:	46f2      	mov	sl, lr
      int sy = (y*y_ratio)>>16;
 8018780:	ea4f 4e2a 	mov.w	lr, sl, asr #16
      for (int x=0; x<dstImage->width; x++, i+=pixelSize)
 8018784:	2b00      	cmp	r3, #0
 8018786:	d05a      	beq.n	801883e <Resize_Frame+0x24a>
 8018788:	4652      	mov	r2, sl
 801878a:	2100      	movs	r1, #0
 801878c:	46ca      	mov	sl, r9
 801878e:	f8cd b004 	str.w	fp, [sp, #4]
 8018792:	46f1      	mov	r9, lr
 8018794:	4693      	mov	fp, r2
 8018796:	468e      	mov	lr, r1
        int sx = (x*x_ratio)>>16;
 8018798:	140a      	asrs	r2, r1, #16
        for(int j=0; j<pixelSize; j++)
 801879a:	2c00      	cmp	r4, #0
 801879c:	d043      	beq.n	8018826 <Resize_Frame+0x232>
          *((uint8_t*)dstImage->pData + i + j) =  *((uint8_t*)srcImage->pData +(((sy+roi->y0)*srcImage->width) + (sx+roi->x0))*pixelSize + j);
 801879e:	6873      	ldr	r3, [r6, #4]
        for(int j=0; j<pixelSize; j++)
 80187a0:	2c01      	cmp	r4, #1
          *((uint8_t*)dstImage->pData + i + j) =  *((uint8_t*)srcImage->pData +(((sy+roi->y0)*srcImage->width) + (sx+roi->x0))*pixelSize + j);
 80187a2:	6830      	ldr	r0, [r6, #0]
 80187a4:	682f      	ldr	r7, [r5, #0]
 80187a6:	444b      	add	r3, r9
 80187a8:	fb07 0303 	mla	r3, r7, r3, r0
 80187ac:	68af      	ldr	r7, [r5, #8]
 80187ae:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80187b2:	4413      	add	r3, r2
 80187b4:	fb04 f303 	mul.w	r3, r4, r3
 80187b8:	5cfb      	ldrb	r3, [r7, r3]
 80187ba:	f800 300c 	strb.w	r3, [r0, ip]
        for(int j=0; j<pixelSize; j++)
 80187be:	d030      	beq.n	8018822 <Resize_Frame+0x22e>
          *((uint8_t*)dstImage->pData + i + j) =  *((uint8_t*)srcImage->pData +(((sy+roi->y0)*srcImage->width) + (sx+roi->x0))*pixelSize + j);
 80187c0:	6873      	ldr	r3, [r6, #4]
        for(int j=0; j<pixelSize; j++)
 80187c2:	2c02      	cmp	r4, #2
          *((uint8_t*)dstImage->pData + i + j) =  *((uint8_t*)srcImage->pData +(((sy+roi->y0)*srcImage->width) + (sx+roi->x0))*pixelSize + j);
 80187c4:	6830      	ldr	r0, [r6, #0]
 80187c6:	682f      	ldr	r7, [r5, #0]
 80187c8:	444b      	add	r3, r9
 80187ca:	fb07 0303 	mla	r3, r7, r3, r0
 80187ce:	68af      	ldr	r7, [r5, #8]
 80187d0:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80187d4:	4413      	add	r3, r2
 80187d6:	4460      	add	r0, ip
 80187d8:	fb04 7303 	mla	r3, r4, r3, r7
 80187dc:	785b      	ldrb	r3, [r3, #1]
 80187de:	7043      	strb	r3, [r0, #1]
        for(int j=0; j<pixelSize; j++)
 80187e0:	d01f      	beq.n	8018822 <Resize_Frame+0x22e>
          *((uint8_t*)dstImage->pData + i + j) =  *((uint8_t*)srcImage->pData +(((sy+roi->y0)*srcImage->width) + (sx+roi->x0))*pixelSize + j);
 80187e2:	6873      	ldr	r3, [r6, #4]
        for(int j=0; j<pixelSize; j++)
 80187e4:	2c04      	cmp	r4, #4
          *((uint8_t*)dstImage->pData + i + j) =  *((uint8_t*)srcImage->pData +(((sy+roi->y0)*srcImage->width) + (sx+roi->x0))*pixelSize + j);
 80187e6:	6830      	ldr	r0, [r6, #0]
 80187e8:	682f      	ldr	r7, [r5, #0]
 80187ea:	444b      	add	r3, r9
 80187ec:	fb07 0303 	mla	r3, r7, r3, r0
 80187f0:	68af      	ldr	r7, [r5, #8]
 80187f2:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80187f6:	4413      	add	r3, r2
 80187f8:	4460      	add	r0, ip
 80187fa:	fb04 7303 	mla	r3, r4, r3, r7
 80187fe:	789b      	ldrb	r3, [r3, #2]
 8018800:	7083      	strb	r3, [r0, #2]
        for(int j=0; j<pixelSize; j++)
 8018802:	d10e      	bne.n	8018822 <Resize_Frame+0x22e>
          *((uint8_t*)dstImage->pData + i + j) =  *((uint8_t*)srcImage->pData +(((sy+roi->y0)*srcImage->width) + (sx+roi->x0))*pixelSize + j);
 8018804:	6873      	ldr	r3, [r6, #4]
 8018806:	6828      	ldr	r0, [r5, #0]
 8018808:	444b      	add	r3, r9
 801880a:	6837      	ldr	r7, [r6, #0]
 801880c:	fb00 2203 	mla	r2, r0, r3, r2
 8018810:	68ab      	ldr	r3, [r5, #8]
 8018812:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8018816:	443a      	add	r2, r7
 8018818:	4460      	add	r0, ip
 801881a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801881e:	78d3      	ldrb	r3, [r2, #3]
 8018820:	70c3      	strb	r3, [r0, #3]
 8018822:	f8d8 3000 	ldr.w	r3, [r8]
      for (int x=0; x<dstImage->width; x++, i+=pixelSize)
 8018826:	f10e 0e01 	add.w	lr, lr, #1
 801882a:	44a4      	add	ip, r4
 801882c:	4451      	add	r1, sl
 801882e:	459e      	cmp	lr, r3
 8018830:	d3b2      	bcc.n	8018798 <Resize_Frame+0x1a4>
 8018832:	46d1      	mov	r9, sl
 8018834:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8018838:	46da      	mov	sl, fp
 801883a:	f8dd b004 	ldr.w	fp, [sp, #4]
    for (int y=0, i=0; y<dstImage->height; y++)
 801883e:	f10b 0b01 	add.w	fp, fp, #1
 8018842:	9903      	ldr	r1, [sp, #12]
 8018844:	4593      	cmp	fp, r2
 8018846:	448a      	add	sl, r1
 8018848:	d39a      	bcc.n	8018780 <Resize_Frame+0x18c>
}
 801884a:	b005      	add	sp, #20
 801884c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint32_t pixelSize=IMG_BYTES_PER_PX(srcImage->format);
 8018850:	2402      	movs	r4, #2
 8018852:	e701      	b.n	8018658 <Resize_Frame+0x64>
 8018854:	2403      	movs	r4, #3
 8018856:	e6ff      	b.n	8018658 <Resize_Frame+0x64>

08018858 <GetImageInfoBMP.part.0>:
 * @param height[in,out] pointer to the variable containing image height
 * @param bpp[in,out] pointer to the variable containing image number of bytes per pixel
 * @param rs[in,out] pointer to the bmp setting structure
 * @return stm32fs_err_t
 */
static stm32fs_err_t GetImageInfoBMP(FIL *File, uint32_t* width, uint32_t* height, uint32_t* bpp, bmp_read_settings_t *rs)
 8018858:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801885c:	b089      	sub	sp, #36	; 0x24
 801885e:	460e      	mov	r6, r1
 8018860:	4617      	mov	r7, r2
 8018862:	4698      	mov	r8, r3
  {
    return STM32FS_ERROR_FILE_NOT_SUPPORTED;
  }

  uint32_t file_size;
  F_READ_SAFE(File, &file_size, sizeof(file_size));
 8018864:	2204      	movs	r2, #4
 8018866:	ab07      	add	r3, sp, #28
 8018868:	a904      	add	r1, sp, #16
static stm32fs_err_t GetImageInfoBMP(FIL *File, uint32_t* width, uint32_t* height, uint32_t* bpp, bmp_read_settings_t *rs)
 801886a:	4605      	mov	r5, r0
  F_READ_SAFE(File, &file_size, sizeof(file_size));
 801886c:	f7fe fbb4 	bl	8016fd8 <f_read>
 8018870:	9c07      	ldr	r4, [sp, #28]
 8018872:	2c04      	cmp	r4, #4
 8018874:	d003      	beq.n	801887e <GetImageInfoBMP.part.0+0x26>
    }
    if (header_type >= 108) { // Skip past the remaining BITMAPV4HEADER bytes.
      for (int i = 0; i < 13; i++) F_READ_SAFE(File, &ignore_32, sizeof(ignore_32));
    }
    if (header_type >= 124) { // Skip past the remaining BITMAPV5HEADER bytes.
      for (int i = 0; i < 4; i++) F_READ_SAFE(File, &ignore_32, sizeof(ignore_32));
 8018876:	2006      	movs	r0, #6
  if (data_size != (rs->bmp_row_bytes * (*height))) {
    return STM32FS_ERROR_FILE_NOT_SUPPORTED;
  }

  return STM32FS_ERROR_NONE;
}
 8018878:	b009      	add	sp, #36	; 0x24
 801887a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  F_READ_SAFE(File, &ignore_16, sizeof(ignore_16));
 801887e:	2202      	movs	r2, #2
 8018880:	ab07      	add	r3, sp, #28
 8018882:	4628      	mov	r0, r5
 8018884:	a901      	add	r1, sp, #4
 8018886:	f7fe fba7 	bl	8016fd8 <f_read>
 801888a:	9a07      	ldr	r2, [sp, #28]
 801888c:	2a02      	cmp	r2, #2
 801888e:	d1f2      	bne.n	8018876 <GetImageInfoBMP.part.0+0x1e>
  F_READ_SAFE(File, &ignore_16, sizeof(ignore_16));
 8018890:	ab07      	add	r3, sp, #28
 8018892:	a901      	add	r1, sp, #4
 8018894:	4628      	mov	r0, r5
 8018896:	f7fe fb9f 	bl	8016fd8 <f_read>
 801889a:	9b07      	ldr	r3, [sp, #28]
 801889c:	2b02      	cmp	r3, #2
 801889e:	d1ea      	bne.n	8018876 <GetImageInfoBMP.part.0+0x1e>
  F_READ_SAFE(File, &header_size, sizeof(header_size));
 80188a0:	4622      	mov	r2, r4
 80188a2:	ab07      	add	r3, sp, #28
 80188a4:	a905      	add	r1, sp, #20
 80188a6:	4628      	mov	r0, r5
 80188a8:	f7fe fb96 	bl	8016fd8 <f_read>
 80188ac:	9a07      	ldr	r2, [sp, #28]
 80188ae:	2a04      	cmp	r2, #4
 80188b0:	d1e1      	bne.n	8018876 <GetImageInfoBMP.part.0+0x1e>
  if (file_size <= header_size){
 80188b2:	e9dd 1304 	ldrd	r1, r3, [sp, #16]
 80188b6:	4299      	cmp	r1, r3
 80188b8:	d945      	bls.n	8018946 <GetImageInfoBMP.part.0+0xee>
  uint32_t data_size = file_size - header_size;
 80188ba:	eba1 0903 	sub.w	r9, r1, r3
  if (data_size % 4) {
 80188be:	f019 0f03 	tst.w	r9, #3
 80188c2:	d140      	bne.n	8018946 <GetImageInfoBMP.part.0+0xee>
  F_READ_SAFE(File, &header_type, sizeof(header_type));
 80188c4:	ab07      	add	r3, sp, #28
 80188c6:	a906      	add	r1, sp, #24
 80188c8:	4628      	mov	r0, r5
 80188ca:	f7fe fb85 	bl	8016fd8 <f_read>
 80188ce:	9b07      	ldr	r3, [sp, #28]
 80188d0:	2b04      	cmp	r3, #4
 80188d2:	d1d0      	bne.n	8018876 <GetImageInfoBMP.part.0+0x1e>
      && (header_type != 52) // BITMAPV2INFOHEADER
 80188d4:	9a06      	ldr	r2, [sp, #24]
 80188d6:	f022 0310 	bic.w	r3, r2, #16
      && (header_type != 124)) {
 80188da:	2b6c      	cmp	r3, #108	; 0x6c
 80188dc:	bf18      	it	ne
 80188de:	2b28      	cmpne	r3, #40	; 0x28
 80188e0:	d001      	beq.n	80188e6 <GetImageInfoBMP.part.0+0x8e>
 80188e2:	2a34      	cmp	r2, #52	; 0x34
 80188e4:	d12f      	bne.n	8018946 <GetImageInfoBMP.part.0+0xee>
  F_READ_SAFE(File, &rs->bmp_w, sizeof(rs->bmp_w));
 80188e6:	2204      	movs	r2, #4
 80188e8:	ab07      	add	r3, sp, #28
 80188ea:	9910      	ldr	r1, [sp, #64]	; 0x40
 80188ec:	4628      	mov	r0, r5
 80188ee:	f7fe fb73 	bl	8016fd8 <f_read>
 80188f2:	9a07      	ldr	r2, [sp, #28]
 80188f4:	2a04      	cmp	r2, #4
 80188f6:	d1be      	bne.n	8018876 <GetImageInfoBMP.part.0+0x1e>
  F_READ_SAFE(File, &rs->bmp_h, sizeof(rs->bmp_w));
 80188f8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80188fa:	ab07      	add	r3, sp, #28
 80188fc:	4628      	mov	r0, r5
 80188fe:	3104      	adds	r1, #4
 8018900:	f7fe fb6a 	bl	8016fd8 <f_read>
 8018904:	9b07      	ldr	r3, [sp, #28]
 8018906:	2b04      	cmp	r3, #4
 8018908:	d1b5      	bne.n	8018876 <GetImageInfoBMP.part.0+0x1e>
  if ((rs->bmp_w == 0) || (rs->bmp_h == 0)){
 801890a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801890c:	6818      	ldr	r0, [r3, #0]
 801890e:	b1d0      	cbz	r0, 8018946 <GetImageInfoBMP.part.0+0xee>
 8018910:	685a      	ldr	r2, [r3, #4]
 8018912:	b1c2      	cbz	r2, 8018946 <GetImageInfoBMP.part.0+0xee>
  *width = abs(rs->bmp_w);
 8018914:	2800      	cmp	r0, #0
  *height = abs(rs->bmp_h);
 8018916:	9c10      	ldr	r4, [sp, #64]	; 0x40
  F_READ_SAFE(File, &tmp_16, sizeof(tmp_16));
 8018918:	f04f 0202 	mov.w	r2, #2
 801891c:	ab07      	add	r3, sp, #28
  *width = abs(rs->bmp_w);
 801891e:	bfb8      	it	lt
 8018920:	4240      	neglt	r0, r0
  F_READ_SAFE(File, &tmp_16, sizeof(tmp_16));
 8018922:	f10d 0106 	add.w	r1, sp, #6
  *width = abs(rs->bmp_w);
 8018926:	6030      	str	r0, [r6, #0]
  F_READ_SAFE(File, &tmp_16, sizeof(tmp_16));
 8018928:	4628      	mov	r0, r5
  *height = abs(rs->bmp_h);
 801892a:	6864      	ldr	r4, [r4, #4]
 801892c:	2c00      	cmp	r4, #0
 801892e:	bfb8      	it	lt
 8018930:	4264      	neglt	r4, r4
 8018932:	603c      	str	r4, [r7, #0]
  F_READ_SAFE(File, &tmp_16, sizeof(tmp_16));
 8018934:	f7fe fb50 	bl	8016fd8 <f_read>
 8018938:	9a07      	ldr	r2, [sp, #28]
 801893a:	2a02      	cmp	r2, #2
 801893c:	d19b      	bne.n	8018876 <GetImageInfoBMP.part.0+0x1e>
  if (tmp_16 != 1){
 801893e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8018942:	2b01      	cmp	r3, #1
 8018944:	d001      	beq.n	801894a <GetImageInfoBMP.part.0+0xf2>
    return STM32FS_ERROR_FILE_NOT_SUPPORTED;
 8018946:	2005      	movs	r0, #5
 8018948:	e796      	b.n	8018878 <GetImageInfoBMP.part.0+0x20>
  F_READ_SAFE(File, &rs->bmp_bpp, sizeof(rs->bmp_bpp));
 801894a:	9910      	ldr	r1, [sp, #64]	; 0x40
 801894c:	ab07      	add	r3, sp, #28
 801894e:	4628      	mov	r0, r5
 8018950:	3108      	adds	r1, #8
 8018952:	f7fe fb41 	bl	8016fd8 <f_read>
 8018956:	9b07      	ldr	r3, [sp, #28]
 8018958:	2b02      	cmp	r3, #2
 801895a:	d18c      	bne.n	8018876 <GetImageInfoBMP.part.0+0x1e>
  if ((rs->bmp_bpp != 8) && (rs->bmp_bpp != 16) && (rs->bmp_bpp != 24)){
 801895c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801895e:	891b      	ldrh	r3, [r3, #8]
 8018960:	2b08      	cmp	r3, #8
 8018962:	d060      	beq.n	8018a26 <GetImageInfoBMP.part.0+0x1ce>
 8018964:	2b10      	cmp	r3, #16
 8018966:	d05e      	beq.n	8018a26 <GetImageInfoBMP.part.0+0x1ce>
 8018968:	2b18      	cmp	r3, #24
 801896a:	d1ec      	bne.n	8018946 <GetImageInfoBMP.part.0+0xee>
  *bpp = (rs->bmp_bpp == 8)  ? 1 :
 801896c:	2303      	movs	r3, #3
  F_READ_SAFE(File, &rs->bmp_fmt, sizeof(rs->bmp_fmt));
 801896e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8018970:	2204      	movs	r2, #4
  *bpp = (rs->bmp_bpp == 8)  ? 1 :
 8018972:	f8c8 3000 	str.w	r3, [r8]
  F_READ_SAFE(File, &rs->bmp_fmt, sizeof(rs->bmp_fmt));
 8018976:	4628      	mov	r0, r5
 8018978:	ab07      	add	r3, sp, #28
 801897a:	310c      	adds	r1, #12
 801897c:	f7fe fb2c 	bl	8016fd8 <f_read>
 8018980:	9b07      	ldr	r3, [sp, #28]
 8018982:	2b04      	cmp	r3, #4
 8018984:	f47f af77 	bne.w	8018876 <GetImageInfoBMP.part.0+0x1e>
  if ((rs->bmp_fmt != 0) && (rs->bmp_fmt != 3)){
 8018988:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801898a:	68db      	ldr	r3, [r3, #12]
 801898c:	b10b      	cbz	r3, 8018992 <GetImageInfoBMP.part.0+0x13a>
 801898e:	2b03      	cmp	r3, #3
 8018990:	d1d9      	bne.n	8018946 <GetImageInfoBMP.part.0+0xee>
  F_READ_SAFE(File, &tmp_32, sizeof(tmp_32));
 8018992:	2204      	movs	r2, #4
 8018994:	ab07      	add	r3, sp, #28
 8018996:	4628      	mov	r0, r5
 8018998:	a903      	add	r1, sp, #12
 801899a:	f7fe fb1d 	bl	8016fd8 <f_read>
 801899e:	9a07      	ldr	r2, [sp, #28]
 80189a0:	2a04      	cmp	r2, #4
 80189a2:	f47f af68 	bne.w	8018876 <GetImageInfoBMP.part.0+0x1e>
  if (tmp_32 != data_size){
 80189a6:	9b03      	ldr	r3, [sp, #12]
 80189a8:	4599      	cmp	r9, r3
 80189aa:	d1cc      	bne.n	8018946 <GetImageInfoBMP.part.0+0xee>
  F_READ_SAFE(File, &ignore_32, sizeof(ignore_32));
 80189ac:	ab07      	add	r3, sp, #28
 80189ae:	4628      	mov	r0, r5
 80189b0:	a902      	add	r1, sp, #8
 80189b2:	f7fe fb11 	bl	8016fd8 <f_read>
 80189b6:	9a07      	ldr	r2, [sp, #28]
 80189b8:	2a04      	cmp	r2, #4
 80189ba:	f47f af5c 	bne.w	8018876 <GetImageInfoBMP.part.0+0x1e>
  F_READ_SAFE(File, &ignore_32, sizeof(ignore_32));
 80189be:	ab07      	add	r3, sp, #28
 80189c0:	a902      	add	r1, sp, #8
 80189c2:	4628      	mov	r0, r5
 80189c4:	f7fe fb08 	bl	8016fd8 <f_read>
 80189c8:	9a07      	ldr	r2, [sp, #28]
 80189ca:	2a04      	cmp	r2, #4
 80189cc:	f47f af53 	bne.w	8018876 <GetImageInfoBMP.part.0+0x1e>
  F_READ_SAFE(File, &ignore_32, sizeof(ignore_32));
 80189d0:	ab07      	add	r3, sp, #28
 80189d2:	a902      	add	r1, sp, #8
 80189d4:	4628      	mov	r0, r5
 80189d6:	f7fe faff 	bl	8016fd8 <f_read>
 80189da:	9a07      	ldr	r2, [sp, #28]
 80189dc:	2a04      	cmp	r2, #4
 80189de:	f47f af4a 	bne.w	8018876 <GetImageInfoBMP.part.0+0x1e>
  F_READ_SAFE(File, &ignore_32, sizeof(ignore_32));
 80189e2:	ab07      	add	r3, sp, #28
 80189e4:	a902      	add	r1, sp, #8
 80189e6:	4628      	mov	r0, r5
 80189e8:	f7fe faf6 	bl	8016fd8 <f_read>
 80189ec:	9a07      	ldr	r2, [sp, #28]
 80189ee:	2a04      	cmp	r2, #4
 80189f0:	f47f af41 	bne.w	8018876 <GetImageInfoBMP.part.0+0x1e>
  if (rs->bmp_bpp == 8) {
 80189f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80189f6:	8919      	ldrh	r1, [r3, #8]
 80189f8:	2908      	cmp	r1, #8
 80189fa:	f000 80de 	beq.w	8018bba <GetImageInfoBMP.part.0+0x362>
  } else if (rs->bmp_bpp == 16) {
 80189fe:	2910      	cmp	r1, #16
 8018a00:	f000 8089 	beq.w	8018b16 <GetImageInfoBMP.part.0+0x2be>
  } else if (rs->bmp_bpp == 24) {
 8018a04:	2918      	cmp	r1, #24
 8018a06:	d015      	beq.n	8018a34 <GetImageInfoBMP.part.0+0x1dc>
  rs->bmp_row_bytes = ((( (*width) * rs->bmp_bpp) + 31) / 32) * 4;
 8018a08:	6833      	ldr	r3, [r6, #0]
 8018a0a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018a0c:	fb03 f301 	mul.w	r3, r3, r1
 8018a10:	331f      	adds	r3, #31
 8018a12:	095b      	lsrs	r3, r3, #5
 8018a14:	009b      	lsls	r3, r3, #2
 8018a16:	6113      	str	r3, [r2, #16]
  if (data_size != (rs->bmp_row_bytes * (*height))) {
 8018a18:	683a      	ldr	r2, [r7, #0]
 8018a1a:	fb02 f303 	mul.w	r3, r2, r3
 8018a1e:	4599      	cmp	r9, r3
 8018a20:	d191      	bne.n	8018946 <GetImageInfoBMP.part.0+0xee>
  return STM32FS_ERROR_NONE;
 8018a22:	2000      	movs	r0, #0
 8018a24:	e728      	b.n	8018878 <GetImageInfoBMP.part.0+0x20>
  *bpp = (rs->bmp_bpp == 8)  ? 1 :
 8018a26:	2b08      	cmp	r3, #8
 8018a28:	d03d      	beq.n	8018aa6 <GetImageInfoBMP.part.0+0x24e>
 8018a2a:	2b10      	cmp	r3, #16
 8018a2c:	bf14      	ite	ne
 8018a2e:	2303      	movne	r3, #3
 8018a30:	2302      	moveq	r3, #2
 8018a32:	e79c      	b.n	801896e <GetImageInfoBMP.part.0+0x116>
    if (rs->bmp_fmt == 3) {
 8018a34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018a36:	68db      	ldr	r3, [r3, #12]
 8018a38:	2b03      	cmp	r3, #3
 8018a3a:	d036      	beq.n	8018aaa <GetImageInfoBMP.part.0+0x252>
    } else if (header_type >= 52) { // Skip past the remaining BITMAPV2INFOHEADER bytes.
 8018a3c:	9b06      	ldr	r3, [sp, #24]
 8018a3e:	2b33      	cmp	r3, #51	; 0x33
 8018a40:	d90d      	bls.n	8018a5e <GetImageInfoBMP.part.0+0x206>
 8018a42:	2403      	movs	r4, #3
      for (int i = 0; i < 3; i++) F_READ_SAFE(File, &ignore_32, sizeof(ignore_32));
 8018a44:	ab07      	add	r3, sp, #28
 8018a46:	2204      	movs	r2, #4
 8018a48:	a902      	add	r1, sp, #8
 8018a4a:	4628      	mov	r0, r5
 8018a4c:	f7fe fac4 	bl	8016fd8 <f_read>
 8018a50:	9b07      	ldr	r3, [sp, #28]
 8018a52:	2b04      	cmp	r3, #4
 8018a54:	f47f af0f 	bne.w	8018876 <GetImageInfoBMP.part.0+0x1e>
 8018a58:	3c01      	subs	r4, #1
 8018a5a:	d1f3      	bne.n	8018a44 <GetImageInfoBMP.part.0+0x1ec>
 8018a5c:	9b06      	ldr	r3, [sp, #24]
    if (header_type >= 56) { // Skip past the remaining BITMAPV3INFOHEADER bytes.
 8018a5e:	2b37      	cmp	r3, #55	; 0x37
 8018a60:	d84d      	bhi.n	8018afe <GetImageInfoBMP.part.0+0x2a6>
    if (header_type >= 108) { // Skip past the remaining BITMAPV4HEADER bytes.
 8018a62:	2b6b      	cmp	r3, #107	; 0x6b
 8018a64:	d90d      	bls.n	8018a82 <GetImageInfoBMP.part.0+0x22a>
 8018a66:	240d      	movs	r4, #13
      for (int i = 0; i < 13; i++) F_READ_SAFE(File, &ignore_32, sizeof(ignore_32));
 8018a68:	ab07      	add	r3, sp, #28
 8018a6a:	2204      	movs	r2, #4
 8018a6c:	a902      	add	r1, sp, #8
 8018a6e:	4628      	mov	r0, r5
 8018a70:	f7fe fab2 	bl	8016fd8 <f_read>
 8018a74:	9b07      	ldr	r3, [sp, #28]
 8018a76:	2b04      	cmp	r3, #4
 8018a78:	f47f aefd 	bne.w	8018876 <GetImageInfoBMP.part.0+0x1e>
 8018a7c:	3c01      	subs	r4, #1
 8018a7e:	d1f3      	bne.n	8018a68 <GetImageInfoBMP.part.0+0x210>
 8018a80:	9b06      	ldr	r3, [sp, #24]
    if (header_type >= 124) { // Skip past the remaining BITMAPV5HEADER bytes.
 8018a82:	2b7b      	cmp	r3, #123	; 0x7b
 8018a84:	d90c      	bls.n	8018aa0 <GetImageInfoBMP.part.0+0x248>
 8018a86:	2404      	movs	r4, #4
      for (int i = 0; i < 4; i++) F_READ_SAFE(File, &ignore_32, sizeof(ignore_32));
 8018a88:	ab07      	add	r3, sp, #28
 8018a8a:	2204      	movs	r2, #4
 8018a8c:	a902      	add	r1, sp, #8
 8018a8e:	4628      	mov	r0, r5
 8018a90:	f7fe faa2 	bl	8016fd8 <f_read>
 8018a94:	9b07      	ldr	r3, [sp, #28]
 8018a96:	2b04      	cmp	r3, #4
 8018a98:	f47f aeed 	bne.w	8018876 <GetImageInfoBMP.part.0+0x1e>
 8018a9c:	3c01      	subs	r4, #1
 8018a9e:	d1f3      	bne.n	8018a88 <GetImageInfoBMP.part.0+0x230>
 8018aa0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018aa2:	8919      	ldrh	r1, [r3, #8]
 8018aa4:	e7b0      	b.n	8018a08 <GetImageInfoBMP.part.0+0x1b0>
  *bpp = (rs->bmp_bpp == 8)  ? 1 :
 8018aa6:	2301      	movs	r3, #1
 8018aa8:	e761      	b.n	801896e <GetImageInfoBMP.part.0+0x116>
      F_READ_SAFE(File, &tmp_32, sizeof(tmp_32));
 8018aaa:	2204      	movs	r2, #4
 8018aac:	ab07      	add	r3, sp, #28
 8018aae:	a903      	add	r1, sp, #12
 8018ab0:	4628      	mov	r0, r5
 8018ab2:	f7fe fa91 	bl	8016fd8 <f_read>
 8018ab6:	9a07      	ldr	r2, [sp, #28]
 8018ab8:	2a04      	cmp	r2, #4
 8018aba:	f47f aedc 	bne.w	8018876 <GetImageInfoBMP.part.0+0x1e>
      if( tmp_32 != expect ) {
 8018abe:	9b03      	ldr	r3, [sp, #12]
 8018ac0:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8018ac4:	f47f af3f 	bne.w	8018946 <GetImageInfoBMP.part.0+0xee>
      F_READ_SAFE(File, &tmp_32, sizeof(tmp_32));
 8018ac8:	ab07      	add	r3, sp, #28
 8018aca:	a903      	add	r1, sp, #12
 8018acc:	4628      	mov	r0, r5
 8018ace:	f7fe fa83 	bl	8016fd8 <f_read>
 8018ad2:	9a07      	ldr	r2, [sp, #28]
 8018ad4:	2a04      	cmp	r2, #4
 8018ad6:	f47f aece 	bne.w	8018876 <GetImageInfoBMP.part.0+0x1e>
      if( tmp_32 != expect ) {
 8018ada:	9b03      	ldr	r3, [sp, #12]
 8018adc:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 8018ae0:	f47f af31 	bne.w	8018946 <GetImageInfoBMP.part.0+0xee>
      F_READ_SAFE(File, &tmp_32, sizeof(tmp_32));
 8018ae4:	ab07      	add	r3, sp, #28
 8018ae6:	a903      	add	r1, sp, #12
 8018ae8:	4628      	mov	r0, r5
 8018aea:	f7fe fa75 	bl	8016fd8 <f_read>
 8018aee:	9b07      	ldr	r3, [sp, #28]
 8018af0:	2b04      	cmp	r3, #4
 8018af2:	f47f aec0 	bne.w	8018876 <GetImageInfoBMP.part.0+0x1e>
      if( tmp_32 != expect ) {
 8018af6:	9b03      	ldr	r3, [sp, #12]
 8018af8:	2bff      	cmp	r3, #255	; 0xff
 8018afa:	d0af      	beq.n	8018a5c <GetImageInfoBMP.part.0+0x204>
 8018afc:	e723      	b.n	8018946 <GetImageInfoBMP.part.0+0xee>
      for (int i = 0; i < 1; i++) F_READ_SAFE(File, &ignore_32, sizeof(ignore_32));
 8018afe:	ab07      	add	r3, sp, #28
 8018b00:	2204      	movs	r2, #4
 8018b02:	a902      	add	r1, sp, #8
 8018b04:	4628      	mov	r0, r5
 8018b06:	f7fe fa67 	bl	8016fd8 <f_read>
 8018b0a:	9b07      	ldr	r3, [sp, #28]
 8018b0c:	2b04      	cmp	r3, #4
 8018b0e:	f47f aeb2 	bne.w	8018876 <GetImageInfoBMP.part.0+0x1e>
 8018b12:	9b06      	ldr	r3, [sp, #24]
 8018b14:	e7a5      	b.n	8018a62 <GetImageInfoBMP.part.0+0x20a>
    if (rs->bmp_fmt != 3) return STM32FS_ERROR_FILE_NOT_SUPPORTED;
 8018b16:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018b18:	68db      	ldr	r3, [r3, #12]
 8018b1a:	2b03      	cmp	r3, #3
 8018b1c:	f47f af13 	bne.w	8018946 <GetImageInfoBMP.part.0+0xee>
    F_READ_SAFE(File, &tmp_32, sizeof(tmp_32));
 8018b20:	ab07      	add	r3, sp, #28
 8018b22:	a903      	add	r1, sp, #12
 8018b24:	4628      	mov	r0, r5
 8018b26:	f7fe fa57 	bl	8016fd8 <f_read>
 8018b2a:	9b07      	ldr	r3, [sp, #28]
 8018b2c:	2b04      	cmp	r3, #4
 8018b2e:	f47f aea2 	bne.w	8018876 <GetImageInfoBMP.part.0+0x1e>
    if( tmp_32 != expect ) {
 8018b32:	9b03      	ldr	r3, [sp, #12]
 8018b34:	f5b3 4f78 	cmp.w	r3, #63488	; 0xf800
 8018b38:	f47f af05 	bne.w	8018946 <GetImageInfoBMP.part.0+0xee>
    F_READ_SAFE(File, &tmp_32, sizeof(tmp_32));
 8018b3c:	2204      	movs	r2, #4
 8018b3e:	ab07      	add	r3, sp, #28
 8018b40:	a903      	add	r1, sp, #12
 8018b42:	4628      	mov	r0, r5
 8018b44:	f7fe fa48 	bl	8016fd8 <f_read>
 8018b48:	9a07      	ldr	r2, [sp, #28]
 8018b4a:	2a04      	cmp	r2, #4
 8018b4c:	f47f ae93 	bne.w	8018876 <GetImageInfoBMP.part.0+0x1e>
    if( tmp_32 != expect ) {
 8018b50:	9b03      	ldr	r3, [sp, #12]
 8018b52:	f5b3 6ffc 	cmp.w	r3, #2016	; 0x7e0
 8018b56:	f47f aef6 	bne.w	8018946 <GetImageInfoBMP.part.0+0xee>
    F_READ_SAFE(File, &tmp_32, sizeof(tmp_32));
 8018b5a:	a903      	add	r1, sp, #12
 8018b5c:	ab07      	add	r3, sp, #28
 8018b5e:	4628      	mov	r0, r5
 8018b60:	f7fe fa3a 	bl	8016fd8 <f_read>
 8018b64:	9a07      	ldr	r2, [sp, #28]
 8018b66:	2a04      	cmp	r2, #4
 8018b68:	f47f ae85 	bne.w	8018876 <GetImageInfoBMP.part.0+0x1e>
    if( tmp_32 != expect ) {
 8018b6c:	9b03      	ldr	r3, [sp, #12]
 8018b6e:	2b1f      	cmp	r3, #31
 8018b70:	f47f aee9 	bne.w	8018946 <GetImageInfoBMP.part.0+0xee>
    if (header_type >= 56) { // Skip past the remaining BITMAPV3INFOHEADER bytes.
 8018b74:	9b06      	ldr	r3, [sp, #24]
 8018b76:	2b37      	cmp	r3, #55	; 0x37
 8018b78:	d870      	bhi.n	8018c5c <GetImageInfoBMP.part.0+0x404>
    if (header_type >= 108) { // Skip past the remaining BITMAPV4HEADER bytes.
 8018b7a:	2b6b      	cmp	r3, #107	; 0x6b
 8018b7c:	d90d      	bls.n	8018b9a <GetImageInfoBMP.part.0+0x342>
 8018b7e:	240d      	movs	r4, #13
      for (int i = 0; i < 13; i++) F_READ_SAFE(File, &ignore_32, sizeof(ignore_32));
 8018b80:	ab07      	add	r3, sp, #28
 8018b82:	2204      	movs	r2, #4
 8018b84:	a902      	add	r1, sp, #8
 8018b86:	4628      	mov	r0, r5
 8018b88:	f7fe fa26 	bl	8016fd8 <f_read>
 8018b8c:	9b07      	ldr	r3, [sp, #28]
 8018b8e:	2b04      	cmp	r3, #4
 8018b90:	f47f ae71 	bne.w	8018876 <GetImageInfoBMP.part.0+0x1e>
 8018b94:	3c01      	subs	r4, #1
 8018b96:	d1f3      	bne.n	8018b80 <GetImageInfoBMP.part.0+0x328>
 8018b98:	9b06      	ldr	r3, [sp, #24]
    if (header_type >= 124) { // Skip past the remaining BITMAPV5HEADER bytes.
 8018b9a:	2b7b      	cmp	r3, #123	; 0x7b
 8018b9c:	d980      	bls.n	8018aa0 <GetImageInfoBMP.part.0+0x248>
 8018b9e:	2404      	movs	r4, #4
      for (int i = 0; i < 4; i++) F_READ_SAFE(File, &ignore_32, sizeof(ignore_32));
 8018ba0:	ab07      	add	r3, sp, #28
 8018ba2:	2204      	movs	r2, #4
 8018ba4:	a902      	add	r1, sp, #8
 8018ba6:	4628      	mov	r0, r5
 8018ba8:	f7fe fa16 	bl	8016fd8 <f_read>
 8018bac:	9b07      	ldr	r3, [sp, #28]
 8018bae:	2b04      	cmp	r3, #4
 8018bb0:	f47f ae61 	bne.w	8018876 <GetImageInfoBMP.part.0+0x1e>
 8018bb4:	3c01      	subs	r4, #1
 8018bb6:	d1f3      	bne.n	8018ba0 <GetImageInfoBMP.part.0+0x348>
 8018bb8:	e772      	b.n	8018aa0 <GetImageInfoBMP.part.0+0x248>
    if (rs->bmp_fmt != 0) return STM32FS_ERROR_FILE_NOT_SUPPORTED;
 8018bba:	68db      	ldr	r3, [r3, #12]
 8018bbc:	2b00      	cmp	r3, #0
 8018bbe:	f47f aec2 	bne.w	8018946 <GetImageInfoBMP.part.0+0xee>
    if (header_type >= 52) { // Skip past the remaining BITMAPV2INFOHEADER bytes.
 8018bc2:	9b06      	ldr	r3, [sp, #24]
 8018bc4:	2b33      	cmp	r3, #51	; 0x33
 8018bc6:	d90d      	bls.n	8018be4 <GetImageInfoBMP.part.0+0x38c>
 8018bc8:	2403      	movs	r4, #3
      for (int i = 0; i < 3; i++) F_READ_SAFE(File, &ignore_32, sizeof(ignore_32));
 8018bca:	ab07      	add	r3, sp, #28
 8018bcc:	2204      	movs	r2, #4
 8018bce:	a902      	add	r1, sp, #8
 8018bd0:	4628      	mov	r0, r5
 8018bd2:	f7fe fa01 	bl	8016fd8 <f_read>
 8018bd6:	9b07      	ldr	r3, [sp, #28]
 8018bd8:	2b04      	cmp	r3, #4
 8018bda:	f47f ae4c 	bne.w	8018876 <GetImageInfoBMP.part.0+0x1e>
 8018bde:	3c01      	subs	r4, #1
 8018be0:	d1f3      	bne.n	8018bca <GetImageInfoBMP.part.0+0x372>
 8018be2:	9b06      	ldr	r3, [sp, #24]
    if (header_type >= 56) { // Skip past the remaining BITMAPV3INFOHEADER bytes.
 8018be4:	2b37      	cmp	r3, #55	; 0x37
 8018be6:	d844      	bhi.n	8018c72 <GetImageInfoBMP.part.0+0x41a>
    if (header_type >= 108) { // Skip past the remaining BITMAPV4HEADER bytes.
 8018be8:	2b6b      	cmp	r3, #107	; 0x6b
 8018bea:	d90d      	bls.n	8018c08 <GetImageInfoBMP.part.0+0x3b0>
 8018bec:	240d      	movs	r4, #13
      for (int i = 0; i < 13; i++) F_READ_SAFE(File, &ignore_32, sizeof(ignore_32));
 8018bee:	ab07      	add	r3, sp, #28
 8018bf0:	2204      	movs	r2, #4
 8018bf2:	a902      	add	r1, sp, #8
 8018bf4:	4628      	mov	r0, r5
 8018bf6:	f7fe f9ef 	bl	8016fd8 <f_read>
 8018bfa:	9b07      	ldr	r3, [sp, #28]
 8018bfc:	2b04      	cmp	r3, #4
 8018bfe:	f47f ae3a 	bne.w	8018876 <GetImageInfoBMP.part.0+0x1e>
 8018c02:	3c01      	subs	r4, #1
 8018c04:	d1f3      	bne.n	8018bee <GetImageInfoBMP.part.0+0x396>
 8018c06:	9b06      	ldr	r3, [sp, #24]
    if (header_type >= 124) { // Skip past the remaining BITMAPV5HEADER bytes.
 8018c08:	2b7b      	cmp	r3, #123	; 0x7b
 8018c0a:	d90c      	bls.n	8018c26 <GetImageInfoBMP.part.0+0x3ce>
 8018c0c:	2404      	movs	r4, #4
      for (int i = 0; i < 4; i++) F_READ_SAFE(File, &ignore_32, sizeof(ignore_32));
 8018c0e:	ab07      	add	r3, sp, #28
 8018c10:	2204      	movs	r2, #4
 8018c12:	a902      	add	r1, sp, #8
 8018c14:	4628      	mov	r0, r5
 8018c16:	f7fe f9df 	bl	8016fd8 <f_read>
 8018c1a:	9b07      	ldr	r3, [sp, #28]
 8018c1c:	2b04      	cmp	r3, #4
 8018c1e:	f47f ae2a 	bne.w	8018876 <GetImageInfoBMP.part.0+0x1e>
 8018c22:	3c01      	subs	r4, #1
 8018c24:	d1f3      	bne.n	8018c0e <GetImageInfoBMP.part.0+0x3b6>
    if (header_type >= 124) { // Skip past the remaining BITMAPV5HEADER bytes.
 8018c26:	2400      	movs	r4, #0
      F_READ_SAFE(File, &tmp_32, sizeof(tmp_32));
 8018c28:	ab07      	add	r3, sp, #28
 8018c2a:	2204      	movs	r2, #4
 8018c2c:	a903      	add	r1, sp, #12
 8018c2e:	4628      	mov	r0, r5
      expect = ((i) << 16) | ((i) << 8) | i;
 8018c30:	ea4f 4804 	mov.w	r8, r4, lsl #16
      F_READ_SAFE(File, &tmp_32, sizeof(tmp_32));
 8018c34:	f7fe f9d0 	bl	8016fd8 <f_read>
 8018c38:	9b07      	ldr	r3, [sp, #28]
      expect = ((i) << 16) | ((i) << 8) | i;
 8018c3a:	ea48 2804 	orr.w	r8, r8, r4, lsl #8
      F_READ_SAFE(File, &tmp_32, sizeof(tmp_32));
 8018c3e:	2b04      	cmp	r3, #4
      expect = ((i) << 16) | ((i) << 8) | i;
 8018c40:	ea48 0804 	orr.w	r8, r8, r4
    for (int i = 0; i < 256; i++) {
 8018c44:	f104 0401 	add.w	r4, r4, #1
      F_READ_SAFE(File, &tmp_32, sizeof(tmp_32));
 8018c48:	f47f ae15 	bne.w	8018876 <GetImageInfoBMP.part.0+0x1e>
      if( tmp_32 != expect ) {
 8018c4c:	9b03      	ldr	r3, [sp, #12]
 8018c4e:	4598      	cmp	r8, r3
 8018c50:	f47f ae79 	bne.w	8018946 <GetImageInfoBMP.part.0+0xee>
    for (int i = 0; i < 256; i++) {
 8018c54:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8018c58:	d1e6      	bne.n	8018c28 <GetImageInfoBMP.part.0+0x3d0>
 8018c5a:	e721      	b.n	8018aa0 <GetImageInfoBMP.part.0+0x248>
      for (int i = 0; i < 1; i++) F_READ_SAFE(File, &ignore_32, sizeof(ignore_32));
 8018c5c:	ab07      	add	r3, sp, #28
 8018c5e:	a902      	add	r1, sp, #8
 8018c60:	4628      	mov	r0, r5
 8018c62:	f7fe f9b9 	bl	8016fd8 <f_read>
 8018c66:	9b07      	ldr	r3, [sp, #28]
 8018c68:	2b04      	cmp	r3, #4
 8018c6a:	f47f ae04 	bne.w	8018876 <GetImageInfoBMP.part.0+0x1e>
 8018c6e:	9b06      	ldr	r3, [sp, #24]
 8018c70:	e783      	b.n	8018b7a <GetImageInfoBMP.part.0+0x322>
      for (int i = 0; i < 1; i++) F_READ_SAFE(File, &ignore_32, sizeof(ignore_32));
 8018c72:	ab07      	add	r3, sp, #28
 8018c74:	2204      	movs	r2, #4
 8018c76:	a902      	add	r1, sp, #8
 8018c78:	4628      	mov	r0, r5
 8018c7a:	f7fe f9ad 	bl	8016fd8 <f_read>
 8018c7e:	9b07      	ldr	r3, [sp, #28]
 8018c80:	2b04      	cmp	r3, #4
 8018c82:	f47f adf8 	bne.w	8018876 <GetImageInfoBMP.part.0+0x1e>
 8018c86:	9b06      	ldr	r3, [sp, #24]
 8018c88:	e7ae      	b.n	8018be8 <GetImageInfoBMP.part.0+0x390>
 8018c8a:	bf00      	nop

08018c8c <STM32Fs_Init>:
{
 8018c8c:	b510      	push	{r4, lr}
  if (FATFS_LinkDriver(&SD_Driver, SDPath) != 0)
 8018c8e:	4908      	ldr	r1, [pc, #32]	; (8018cb0 <STM32Fs_Init+0x24>)
 8018c90:	4808      	ldr	r0, [pc, #32]	; (8018cb4 <STM32Fs_Init+0x28>)
 8018c92:	f7ff fb75 	bl	8018380 <FATFS_LinkDriver>
  if (f_mount(&SDFatFS, (TCHAR const *)SDPath, 0) != FR_OK)
 8018c96:	2200      	movs	r2, #0
  if (FATFS_LinkDriver(&SD_Driver, SDPath) != 0)
 8018c98:	4604      	mov	r4, r0
  if (f_mount(&SDFatFS, (TCHAR const *)SDPath, 0) != FR_OK)
 8018c9a:	4905      	ldr	r1, [pc, #20]	; (8018cb0 <STM32Fs_Init+0x24>)
 8018c9c:	4806      	ldr	r0, [pc, #24]	; (8018cb8 <STM32Fs_Init+0x2c>)
 8018c9e:	f7fd fec1 	bl	8016a24 <f_mount>
 8018ca2:	b918      	cbnz	r0, 8018cac <STM32Fs_Init+0x20>
  stm32fs_err_t ret = STM32FS_ERROR_NONE;
 8018ca4:	1c20      	adds	r0, r4, #0
 8018ca6:	bf18      	it	ne
 8018ca8:	2001      	movne	r0, #1
}
 8018caa:	bd10      	pop	{r4, pc}
    return STM32FS_ERROR_MOUNT_FS_FAIL;
 8018cac:	2002      	movs	r0, #2
}
 8018cae:	bd10      	pop	{r4, pc}
 8018cb0:	24005484 	.word	0x24005484
 8018cb4:	08020a50 	.word	0x08020a50
 8018cb8:	240056b8 	.word	0x240056b8

08018cbc <STM32Fs_GetNumberFiles>:
{
 8018cbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018cc0:	b08f      	sub	sp, #60	; 0x3c
 8018cc2:	4688      	mov	r8, r1
  res = f_opendir(&dir, path); /* Open the directory */
 8018cc4:	4601      	mov	r1, r0
{
 8018cc6:	4691      	mov	r9, r2
  res = f_opendir(&dir, path); /* Open the directory */
 8018cc8:	a801      	add	r0, sp, #4
 8018cca:	f7fe fe19 	bl	8017900 <f_opendir>
  if (res == FR_OK)
 8018cce:	bb58      	cbnz	r0, 8018d28 <STM32Fs_GetNumberFiles+0x6c>
 8018cd0:	4c17      	ldr	r4, [pc, #92]	; (8018d30 <STM32Fs_GetNumberFiles+0x74>)
  uint32_t file_counter = 0;
 8018cd2:	4605      	mov	r5, r0
  uint32_t dir_counter = 0;
 8018cd4:	4606      	mov	r6, r0
      res = f_readdir(&dir, &fno);                  /* Read a directory item */
 8018cd6:	4627      	mov	r7, r4
 8018cd8:	e006      	b.n	8018ce8 <STM32Fs_GetNumberFiles+0x2c>
      if (res != FR_OK || fno.fname[0] == 0) break; /* Break on error or end of dir */
 8018cda:	7da3      	ldrb	r3, [r4, #22]
 8018cdc:	b153      	cbz	r3, 8018cf4 <STM32Fs_GetNumberFiles+0x38>
      if (fno.fattrib & AM_DIR)
 8018cde:	7a23      	ldrb	r3, [r4, #8]
 8018ce0:	06db      	lsls	r3, r3, #27
        dir_counter++;
 8018ce2:	bf4c      	ite	mi
 8018ce4:	3601      	addmi	r6, #1
        file_counter++;
 8018ce6:	3501      	addpl	r5, #1
      res = f_readdir(&dir, &fno);                  /* Read a directory item */
 8018ce8:	4639      	mov	r1, r7
 8018cea:	a801      	add	r0, sp, #4
 8018cec:	f7fe ff10 	bl	8017b10 <f_readdir>
      if (res != FR_OK || fno.fname[0] == 0) break; /* Break on error or end of dir */
 8018cf0:	2800      	cmp	r0, #0
 8018cf2:	d0f2      	beq.n	8018cda <STM32Fs_GetNumberFiles+0x1e>
    f_closedir(&dir);
 8018cf4:	a801      	add	r0, sp, #4
 8018cf6:	f7fe fed9 	bl	8017aac <f_closedir>
    *nbr += dir_counter;
 8018cfa:	f019 0f02 	tst.w	r9, #2
  *nbr = 0;
 8018cfe:	f04f 0000 	mov.w	r0, #0
    *nbr += dir_counter;
 8018d02:	bf08      	it	eq
 8018d04:	4606      	moveq	r6, r0
  if (mode & STM32FS_COUNT_FILES)
 8018d06:	f019 0901 	ands.w	r9, r9, #1
  *nbr = 0;
 8018d0a:	f8c8 0000 	str.w	r0, [r8]
  if (mode & STM32FS_COUNT_FILES)
 8018d0e:	d005      	beq.n	8018d1c <STM32Fs_GetNumberFiles+0x60>
    *nbr += file_counter;
 8018d10:	4435      	add	r5, r6
 8018d12:	f8c8 5000 	str.w	r5, [r8]
}
 8018d16:	b00f      	add	sp, #60	; 0x3c
 8018d18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return STM32FS_ERROR_NONE;
 8018d1c:	4648      	mov	r0, r9
 8018d1e:	f8c8 6000 	str.w	r6, [r8]
}
 8018d22:	b00f      	add	sp, #60	; 0x3c
 8018d24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return STM32FS_ERROR_DIR_NOT_FOUND;
 8018d28:	2009      	movs	r0, #9
}
 8018d2a:	b00f      	add	sp, #60	; 0x3c
 8018d2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018d30:	240040a0 	.word	0x240040a0

08018d34 <STM32Fs_OpenDir>:
{
 8018d34:	b508      	push	{r3, lr}
 8018d36:	460b      	mov	r3, r1
  res = f_opendir(dir, path);
 8018d38:	4601      	mov	r1, r0
 8018d3a:	4618      	mov	r0, r3
 8018d3c:	f7fe fde0 	bl	8017900 <f_opendir>
  if (res != FR_OK)
 8018d40:	2800      	cmp	r0, #0
}
 8018d42:	bf14      	ite	ne
 8018d44:	2009      	movne	r0, #9
 8018d46:	2000      	moveq	r0, #0
 8018d48:	bd08      	pop	{r3, pc}
 8018d4a:	bf00      	nop

08018d4c <STM32Fs_CreateDir>:
{
 8018d4c:	b508      	push	{r3, lr}
  res = f_mkdir(path);
 8018d4e:	f7fe ff1d 	bl	8017b8c <f_mkdir>
  if ((res != FR_OK) && (res != FR_EXIST))
 8018d52:	f010 00f7 	ands.w	r0, r0, #247	; 0xf7
 8018d56:	d000      	beq.n	8018d5a <STM32Fs_CreateDir+0xe>
 8018d58:	e7fe      	b.n	8018d58 <STM32Fs_CreateDir+0xc>
}
 8018d5a:	bd08      	pop	{r3, pc}

08018d5c <STM32Fs_GetNextDir>:
{
 8018d5c:	b510      	push	{r4, lr}
 8018d5e:	460c      	mov	r4, r1
  res = f_readdir(dir, fno);                                                  /* Read a directory item */
 8018d60:	f7fe fed6 	bl	8017b10 <f_readdir>
  if (res != FR_OK || fno->fname[0] == 0) return STM32FS_ERROR_DIR_NOT_FOUND; /* Break on error or end of dir */
 8018d64:	b940      	cbnz	r0, 8018d78 <STM32Fs_GetNextDir+0x1c>
 8018d66:	7da3      	ldrb	r3, [r4, #22]
 8018d68:	b133      	cbz	r3, 8018d78 <STM32Fs_GetNextDir+0x1c>
  if (fno->fattrib & AM_DIR)
 8018d6a:	7a23      	ldrb	r3, [r4, #8]
 8018d6c:	f013 0f10 	tst.w	r3, #16
    return STM32FS_ERROR_NONE;
 8018d70:	bf0c      	ite	eq
 8018d72:	2009      	moveq	r0, #9
 8018d74:	2000      	movne	r0, #0
}
 8018d76:	bd10      	pop	{r4, pc}
  return STM32FS_ERROR_DIR_NOT_FOUND; /* Break on error or end of dir */
 8018d78:	2009      	movs	r0, #9
}
 8018d7a:	bd10      	pop	{r4, pc}

08018d7c <STM32Fs_GetNextFile>:
{
 8018d7c:	b510      	push	{r4, lr}
 8018d7e:	460c      	mov	r4, r1
  res = f_readdir(dir, fno);                                                  /* Read a directory item */
 8018d80:	f7fe fec6 	bl	8017b10 <f_readdir>
  if (res != FR_OK || fno->fname[0] == 0) return STM32FS_ERROR_DIR_NOT_FOUND; /* Break on error or end of dir */
 8018d84:	b940      	cbnz	r0, 8018d98 <STM32Fs_GetNextFile+0x1c>
 8018d86:	7da3      	ldrb	r3, [r4, #22]
 8018d88:	b133      	cbz	r3, 8018d98 <STM32Fs_GetNextFile+0x1c>
  if (!(fno->fattrib & AM_DIR))
 8018d8a:	7a23      	ldrb	r3, [r4, #8]
 8018d8c:	f013 0f10 	tst.w	r3, #16
    return STM32FS_ERROR_NONE;
 8018d90:	bf14      	ite	ne
 8018d92:	2009      	movne	r0, #9
 8018d94:	2000      	moveq	r0, #0
}
 8018d96:	bd10      	pop	{r4, pc}
  return STM32FS_ERROR_DIR_NOT_FOUND; /* Break on error or end of dir */
 8018d98:	2009      	movs	r0, #9
}
 8018d9a:	bd10      	pop	{r4, pc}

08018d9c <STM32Fs_WriteRaw>:
{
 8018d9c:	b530      	push	{r4, r5, lr}
 8018d9e:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8018da2:	460d      	mov	r5, r1
 8018da4:	4614      	mov	r4, r2
  if (f_open(&File, path, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 8018da6:	4601      	mov	r1, r0
 8018da8:	220a      	movs	r2, #10
 8018daa:	a802      	add	r0, sp, #8
 8018dac:	f7fd fe9a 	bl	8016ae4 <f_open>
 8018db0:	b990      	cbnz	r0, 8018dd8 <STM32Fs_WriteRaw+0x3c>
  __ASM volatile ("cpsid i" : : : "memory");
 8018db2:	b672      	cpsid	i
  f_write(&File, buffer, length, (void *)&byteswritten);
 8018db4:	4629      	mov	r1, r5
 8018db6:	4622      	mov	r2, r4
 8018db8:	a802      	add	r0, sp, #8
 8018dba:	ab01      	add	r3, sp, #4
 8018dbc:	f7fe fadc 	bl	8017378 <f_write>
  __ASM volatile ("cpsie i" : : : "memory");
 8018dc0:	b662      	cpsie	i
  f_close(&File);
 8018dc2:	a802      	add	r0, sp, #8
 8018dc4:	f7fe fcd2 	bl	801776c <f_close>
  if (byteswritten != length)
 8018dc8:	9801      	ldr	r0, [sp, #4]
  return STM32FS_ERROR_NONE;
 8018dca:	42a0      	cmp	r0, r4
 8018dcc:	bf14      	ite	ne
 8018dce:	2008      	movne	r0, #8
 8018dd0:	2000      	moveq	r0, #0
}
 8018dd2:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8018dd6:	bd30      	pop	{r4, r5, pc}
    return STM32FS_ERROR_FOPEN_FAIL;
 8018dd8:	2003      	movs	r0, #3
}
 8018dda:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8018dde:	bd30      	pop	{r4, r5, pc}

08018de0 <STM32Fs_WriteImageBMP>:
{
 8018de0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018de4:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8018de8:	460d      	mov	r5, r1
 8018dea:	4691      	mov	r9, r2
  if (f_open(&File, path, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 8018dec:	4601      	mov	r1, r0
 8018dee:	220a      	movs	r2, #10
 8018df0:	a802      	add	r0, sp, #8
{
 8018df2:	461f      	mov	r7, r3
  if (f_open(&File, path, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 8018df4:	f7fd fe76 	bl	8016ae4 <f_open>
 8018df8:	2800      	cmp	r0, #0
 8018dfa:	d138      	bne.n	8018e6e <STM32Fs_WriteImageBMP+0x8e>
  unsigned int pixelBytesPerRow = width * 3;
 8018dfc:	eb09 0649 	add.w	r6, r9, r9, lsl #1
  *sizeOfFileEntry = 54 + (pixelBytesPerRow + paddingBytesPerRow) * height;
 8018e00:	4922      	ldr	r1, [pc, #136]	; (8018e8c <STM32Fs_WriteImageBMP+0xac>)
  *heightEntry = -height; /* '-' required so to avoid having to rotate the image when opening .bmp file*/
 8018e02:	427b      	negs	r3, r7
 8018e04:	4604      	mov	r4, r0
  unsigned int paddingBytesPerRow = (4 - (pixelBytesPerRow % 4)) % 4;
 8018e06:	f1c6 0800 	rsb	r8, r6, #0
  *widthEntry = width;
 8018e0a:	f8c1 9012 	str.w	r9, [r1, #18]
  *heightEntry = -height; /* '-' required so to avoid having to rotate the image when opening .bmp file*/
 8018e0e:	f8c1 3016 	str.w	r3, [r1, #22]
  unsigned int paddingBytesPerRow = (4 - (pixelBytesPerRow % 4)) % 4;
 8018e12:	f008 0803 	and.w	r8, r8, #3
  *sizeOfFileEntry = 54 + (pixelBytesPerRow + paddingBytesPerRow) * height;
 8018e16:	eb06 0308 	add.w	r3, r6, r8
 8018e1a:	fb07 f303 	mul.w	r3, r7, r3
 8018e1e:	3336      	adds	r3, #54	; 0x36
 8018e20:	f8c1 3002 	str.w	r3, [r1, #2]
  __ASM volatile ("cpsid i" : : : "memory");
 8018e24:	b672      	cpsid	i
  f_write(&File, header, 54, (void *)&byteswritten);
 8018e26:	2236      	movs	r2, #54	; 0x36
 8018e28:	a802      	add	r0, sp, #8
 8018e2a:	ab01      	add	r3, sp, #4
 8018e2c:	f7fe faa4 	bl	8017378 <f_write>
  if (width % 4 == 0)
 8018e30:	f019 0f03 	tst.w	r9, #3
 8018e34:	d020      	beq.n	8018e78 <STM32Fs_WriteImageBMP+0x98>
    for (int row = 0; row < height; row++)
 8018e36:	b18f      	cbz	r7, 8018e5c <STM32Fs_WriteImageBMP+0x7c>
      f_write(&File, zeroes, paddingBytesPerRow, (void *)&byteswritten);
 8018e38:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8018e90 <STM32Fs_WriteImageBMP+0xb0>
      f_write(&File, buffer + 3 * width * row, pixelBytesPerRow, (void *)&byteswritten);
 8018e3c:	4629      	mov	r1, r5
 8018e3e:	ab01      	add	r3, sp, #4
 8018e40:	4632      	mov	r2, r6
    for (int row = 0; row < height; row++)
 8018e42:	3401      	adds	r4, #1
      f_write(&File, buffer + 3 * width * row, pixelBytesPerRow, (void *)&byteswritten);
 8018e44:	a802      	add	r0, sp, #8
 8018e46:	4435      	add	r5, r6
 8018e48:	f7fe fa96 	bl	8017378 <f_write>
      f_write(&File, zeroes, paddingBytesPerRow, (void *)&byteswritten);
 8018e4c:	ab01      	add	r3, sp, #4
 8018e4e:	4642      	mov	r2, r8
 8018e50:	4649      	mov	r1, r9
 8018e52:	a802      	add	r0, sp, #8
 8018e54:	f7fe fa90 	bl	8017378 <f_write>
    for (int row = 0; row < height; row++)
 8018e58:	42a7      	cmp	r7, r4
 8018e5a:	d1ef      	bne.n	8018e3c <STM32Fs_WriteImageBMP+0x5c>
  __ASM volatile ("cpsie i" : : : "memory");
 8018e5c:	b662      	cpsie	i
  f_close(&File);
 8018e5e:	a802      	add	r0, sp, #8
 8018e60:	f7fe fc84 	bl	801776c <f_close>
  return STM32FS_ERROR_NONE;
 8018e64:	2000      	movs	r0, #0
}
 8018e66:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8018e6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return STM32FS_ERROR_FOPEN_FAIL;
 8018e6e:	2003      	movs	r0, #3
}
 8018e70:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8018e74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f_write(&File, buffer, width * height * 3, (void *)&byteswritten);
 8018e78:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8018e7c:	ab01      	add	r3, sp, #4
 8018e7e:	4629      	mov	r1, r5
 8018e80:	a802      	add	r0, sp, #8
 8018e82:	fb09 f207 	mul.w	r2, r9, r7
 8018e86:	f7fe fa77 	bl	8017378 <f_write>
 8018e8a:	e7e7      	b.n	8018e5c <STM32Fs_WriteImageBMP+0x7c>
 8018e8c:	240025b0 	.word	0x240025b0
 8018e90:	240041b8 	.word	0x240041b8

08018e94 <STM32Fs_WriteImageBMP16>:
{
 8018e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e98:	f5ad 7d21 	sub.w	sp, sp, #644	; 0x284
 8018e9c:	460d      	mov	r5, r1
 8018e9e:	4616      	mov	r6, r2
  if (f_open(&File, path, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 8018ea0:	4601      	mov	r1, r0
 8018ea2:	220a      	movs	r2, #10
 8018ea4:	a814      	add	r0, sp, #80	; 0x50
{
 8018ea6:	461f      	mov	r7, r3
 8018ea8:	f8dd 82a8 	ldr.w	r8, [sp, #680]	; 0x2a8
  if (f_open(&File, path, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 8018eac:	f7fd fe1a 	bl	8016ae4 <f_open>
 8018eb0:	b958      	cbnz	r0, 8018eca <STM32Fs_WriteImageBMP16+0x36>
 8018eb2:	2042      	movs	r0, #66	; 0x42
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 8018eb4:	2201      	movs	r2, #1
 8018eb6:	f10d 0103 	add.w	r1, sp, #3
 8018eba:	ab13      	add	r3, sp, #76	; 0x4c
 8018ebc:	f88d 0003 	strb.w	r0, [sp, #3]
 8018ec0:	a814      	add	r0, sp, #80	; 0x50
 8018ec2:	f7fe fa59 	bl	8017378 <f_write>
  if (res != FR_OK) while(1);
 8018ec6:	b128      	cbz	r0, 8018ed4 <STM32Fs_WriteImageBMP16+0x40>
 8018ec8:	e7fe      	b.n	8018ec8 <STM32Fs_WriteImageBMP16+0x34>
    return STM32FS_ERROR_FOPEN_FAIL;
 8018eca:	2003      	movs	r0, #3
}
 8018ecc:	f50d 7d21 	add.w	sp, sp, #644	; 0x284
 8018ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (bytes != sizeof(value)) while(1);
 8018ed4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018ed6:	2a01      	cmp	r2, #1
 8018ed8:	d000      	beq.n	8018edc <STM32Fs_WriteImageBMP16+0x48>
 8018eda:	e7fe      	b.n	8018eda <STM32Fs_WriteImageBMP16+0x46>
 8018edc:	204d      	movs	r0, #77	; 0x4d
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 8018ede:	ab13      	add	r3, sp, #76	; 0x4c
 8018ee0:	f10d 0102 	add.w	r1, sp, #2
 8018ee4:	f88d 0002 	strb.w	r0, [sp, #2]
 8018ee8:	a814      	add	r0, sp, #80	; 0x50
 8018eea:	f7fe fa45 	bl	8017378 <f_write>
  if (res != FR_OK) while(1);
 8018eee:	b918      	cbnz	r0, 8018ef8 <STM32Fs_WriteImageBMP16+0x64>
  if (bytes != sizeof(value)) while(1);
 8018ef0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018ef2:	2b01      	cmp	r3, #1
 8018ef4:	d001      	beq.n	8018efa <STM32Fs_WriteImageBMP16+0x66>
 8018ef6:	e7fe      	b.n	8018ef6 <STM32Fs_WriteImageBMP16+0x62>
 8018ef8:	e7fe      	b.n	8018ef8 <STM32Fs_WriteImageBMP16+0x64>
  const int row_bytes = (((width * 16) + 31) / 32) * 4;
 8018efa:	0134      	lsls	r4, r6, #4
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 8018efc:	a912      	add	r1, sp, #72	; 0x48
 8018efe:	ab13      	add	r3, sp, #76	; 0x4c
 8018f00:	2204      	movs	r2, #4
  const int row_bytes = (((width * 16) + 31) / 32) * 4;
 8018f02:	341f      	adds	r4, #31
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 8018f04:	a814      	add	r0, sp, #80	; 0x50
  const int row_bytes = (((width * 16) + 31) / 32) * 4;
 8018f06:	0964      	lsrs	r4, r4, #5
 8018f08:	00a4      	lsls	r4, r4, #2
  const int data_size = (row_bytes * height);
 8018f0a:	fb07 f904 	mul.w	r9, r7, r4
  write_long(&File, 14 + 40 + 12 + data_size);
 8018f0e:	f109 0c42 	add.w	ip, r9, #66	; 0x42
 8018f12:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 8018f16:	f7fe fa2f 	bl	8017378 <f_write>
  if (res != FR_OK) while(1);
 8018f1a:	4601      	mov	r1, r0
 8018f1c:	b918      	cbnz	r0, 8018f26 <STM32Fs_WriteImageBMP16+0x92>
  if (bytes != sizeof(value)) while(1);
 8018f1e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018f20:	2b04      	cmp	r3, #4
 8018f22:	d001      	beq.n	8018f28 <STM32Fs_WriteImageBMP16+0x94>
 8018f24:	e7fe      	b.n	8018f24 <STM32Fs_WriteImageBMP16+0x90>
 8018f26:	e7fe      	b.n	8018f26 <STM32Fs_WriteImageBMP16+0x92>
 8018f28:	f8ad 100a 	strh.w	r1, [sp, #10]
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 8018f2c:	ab13      	add	r3, sp, #76	; 0x4c
 8018f2e:	f10d 010a 	add.w	r1, sp, #10
 8018f32:	2202      	movs	r2, #2
 8018f34:	a814      	add	r0, sp, #80	; 0x50
 8018f36:	f7fe fa1f 	bl	8017378 <f_write>
  if (res != FR_OK) while(1);
 8018f3a:	4601      	mov	r1, r0
 8018f3c:	b918      	cbnz	r0, 8018f46 <STM32Fs_WriteImageBMP16+0xb2>
  if (bytes != sizeof(value)) while(1);
 8018f3e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018f40:	2a02      	cmp	r2, #2
 8018f42:	d001      	beq.n	8018f48 <STM32Fs_WriteImageBMP16+0xb4>
 8018f44:	e7fe      	b.n	8018f44 <STM32Fs_WriteImageBMP16+0xb0>
 8018f46:	e7fe      	b.n	8018f46 <STM32Fs_WriteImageBMP16+0xb2>
 8018f48:	f8ad 1008 	strh.w	r1, [sp, #8]
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 8018f4c:	ab13      	add	r3, sp, #76	; 0x4c
 8018f4e:	a814      	add	r0, sp, #80	; 0x50
 8018f50:	a902      	add	r1, sp, #8
 8018f52:	f7fe fa11 	bl	8017378 <f_write>
  if (res != FR_OK) while(1);
 8018f56:	b928      	cbnz	r0, 8018f64 <STM32Fs_WriteImageBMP16+0xd0>
  if (bytes != sizeof(value)) while(1);
 8018f58:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8018f5c:	f1ba 0f02 	cmp.w	sl, #2
 8018f60:	d001      	beq.n	8018f66 <STM32Fs_WriteImageBMP16+0xd2>
 8018f62:	e7fe      	b.n	8018f62 <STM32Fs_WriteImageBMP16+0xce>
 8018f64:	e7fe      	b.n	8018f64 <STM32Fs_WriteImageBMP16+0xd0>
 8018f66:	2042      	movs	r0, #66	; 0x42
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 8018f68:	ab13      	add	r3, sp, #76	; 0x4c
 8018f6a:	2204      	movs	r2, #4
 8018f6c:	a911      	add	r1, sp, #68	; 0x44
 8018f6e:	9011      	str	r0, [sp, #68]	; 0x44
 8018f70:	a814      	add	r0, sp, #80	; 0x50
 8018f72:	f7fe fa01 	bl	8017378 <f_write>
  if (res != FR_OK) while(1);
 8018f76:	b918      	cbnz	r0, 8018f80 <STM32Fs_WriteImageBMP16+0xec>
  if (bytes != sizeof(value)) while(1);
 8018f78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018f7a:	2a04      	cmp	r2, #4
 8018f7c:	d001      	beq.n	8018f82 <STM32Fs_WriteImageBMP16+0xee>
 8018f7e:	e7fe      	b.n	8018f7e <STM32Fs_WriteImageBMP16+0xea>
 8018f80:	e7fe      	b.n	8018f80 <STM32Fs_WriteImageBMP16+0xec>
 8018f82:	2028      	movs	r0, #40	; 0x28
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 8018f84:	ab13      	add	r3, sp, #76	; 0x4c
 8018f86:	a910      	add	r1, sp, #64	; 0x40
 8018f88:	9010      	str	r0, [sp, #64]	; 0x40
 8018f8a:	a814      	add	r0, sp, #80	; 0x50
 8018f8c:	f7fe f9f4 	bl	8017378 <f_write>
  if (res != FR_OK) while(1);
 8018f90:	b100      	cbz	r0, 8018f94 <STM32Fs_WriteImageBMP16+0x100>
 8018f92:	e7fe      	b.n	8018f92 <STM32Fs_WriteImageBMP16+0xfe>
  if (bytes != sizeof(value)) while(1);
 8018f94:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018f96:	2a04      	cmp	r2, #4
 8018f98:	d000      	beq.n	8018f9c <STM32Fs_WriteImageBMP16+0x108>
 8018f9a:	e7fe      	b.n	8018f9a <STM32Fs_WriteImageBMP16+0x106>
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 8018f9c:	ab13      	add	r3, sp, #76	; 0x4c
 8018f9e:	a814      	add	r0, sp, #80	; 0x50
 8018fa0:	a90f      	add	r1, sp, #60	; 0x3c
 8018fa2:	960f      	str	r6, [sp, #60]	; 0x3c
 8018fa4:	f7fe f9e8 	bl	8017378 <f_write>
  if (res != FR_OK) while(1);
 8018fa8:	b100      	cbz	r0, 8018fac <STM32Fs_WriteImageBMP16+0x118>
 8018faa:	e7fe      	b.n	8018faa <STM32Fs_WriteImageBMP16+0x116>
  if (bytes != sizeof(value)) while(1);
 8018fac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018fae:	2a04      	cmp	r2, #4
 8018fb0:	d000      	beq.n	8018fb4 <STM32Fs_WriteImageBMP16+0x120>
 8018fb2:	e7fe      	b.n	8018fb2 <STM32Fs_WriteImageBMP16+0x11e>
  write_long(&File, -height); // store the image flipped (correctly)
 8018fb4:	4278      	negs	r0, r7
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 8018fb6:	ab13      	add	r3, sp, #76	; 0x4c
 8018fb8:	a90e      	add	r1, sp, #56	; 0x38
 8018fba:	900e      	str	r0, [sp, #56]	; 0x38
 8018fbc:	a814      	add	r0, sp, #80	; 0x50
 8018fbe:	f7fe f9db 	bl	8017378 <f_write>
  if (res != FR_OK) while(1);
 8018fc2:	b100      	cbz	r0, 8018fc6 <STM32Fs_WriteImageBMP16+0x132>
 8018fc4:	e7fe      	b.n	8018fc4 <STM32Fs_WriteImageBMP16+0x130>
  if (bytes != sizeof(value)) while(1);
 8018fc6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018fc8:	2b04      	cmp	r3, #4
 8018fca:	d000      	beq.n	8018fce <STM32Fs_WriteImageBMP16+0x13a>
 8018fcc:	e7fe      	b.n	8018fcc <STM32Fs_WriteImageBMP16+0x138>
 8018fce:	2001      	movs	r0, #1
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 8018fd0:	4652      	mov	r2, sl
 8018fd2:	ab13      	add	r3, sp, #76	; 0x4c
 8018fd4:	f10d 0106 	add.w	r1, sp, #6
 8018fd8:	f8ad 0006 	strh.w	r0, [sp, #6]
 8018fdc:	a814      	add	r0, sp, #80	; 0x50
 8018fde:	f7fe f9cb 	bl	8017378 <f_write>
  if (res != FR_OK) while(1);
 8018fe2:	b100      	cbz	r0, 8018fe6 <STM32Fs_WriteImageBMP16+0x152>
 8018fe4:	e7fe      	b.n	8018fe4 <STM32Fs_WriteImageBMP16+0x150>
  if (bytes != sizeof(value)) while(1);
 8018fe6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018fe8:	2a02      	cmp	r2, #2
 8018fea:	d000      	beq.n	8018fee <STM32Fs_WriteImageBMP16+0x15a>
 8018fec:	e7fe      	b.n	8018fec <STM32Fs_WriteImageBMP16+0x158>
 8018fee:	2010      	movs	r0, #16
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 8018ff0:	ab13      	add	r3, sp, #76	; 0x4c
 8018ff2:	a901      	add	r1, sp, #4
 8018ff4:	f8ad 0004 	strh.w	r0, [sp, #4]
 8018ff8:	a814      	add	r0, sp, #80	; 0x50
 8018ffa:	f7fe f9bd 	bl	8017378 <f_write>
  if (res != FR_OK) while(1);
 8018ffe:	b100      	cbz	r0, 8019002 <STM32Fs_WriteImageBMP16+0x16e>
 8019000:	e7fe      	b.n	8019000 <STM32Fs_WriteImageBMP16+0x16c>
  if (bytes != sizeof(value)) while(1);
 8019002:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019004:	2b02      	cmp	r3, #2
 8019006:	d000      	beq.n	801900a <STM32Fs_WriteImageBMP16+0x176>
 8019008:	e7fe      	b.n	8019008 <STM32Fs_WriteImageBMP16+0x174>
 801900a:	2003      	movs	r0, #3
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801900c:	ab13      	add	r3, sp, #76	; 0x4c
 801900e:	2204      	movs	r2, #4
 8019010:	a90d      	add	r1, sp, #52	; 0x34
 8019012:	900d      	str	r0, [sp, #52]	; 0x34
 8019014:	a814      	add	r0, sp, #80	; 0x50
 8019016:	f7fe f9af 	bl	8017378 <f_write>
  if (res != FR_OK) while(1);
 801901a:	b100      	cbz	r0, 801901e <STM32Fs_WriteImageBMP16+0x18a>
 801901c:	e7fe      	b.n	801901c <STM32Fs_WriteImageBMP16+0x188>
  if (bytes != sizeof(value)) while(1);
 801901e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019020:	2a04      	cmp	r2, #4
 8019022:	d000      	beq.n	8019026 <STM32Fs_WriteImageBMP16+0x192>
 8019024:	e7fe      	b.n	8019024 <STM32Fs_WriteImageBMP16+0x190>
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 8019026:	a90c      	add	r1, sp, #48	; 0x30
 8019028:	ab13      	add	r3, sp, #76	; 0x4c
 801902a:	a814      	add	r0, sp, #80	; 0x50
 801902c:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8019030:	f7fe f9a2 	bl	8017378 <f_write>
  if (res != FR_OK) while(1);
 8019034:	4601      	mov	r1, r0
 8019036:	b100      	cbz	r0, 801903a <STM32Fs_WriteImageBMP16+0x1a6>
 8019038:	e7fe      	b.n	8019038 <STM32Fs_WriteImageBMP16+0x1a4>
  if (bytes != sizeof(value)) while(1);
 801903a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801903c:	2a04      	cmp	r2, #4
 801903e:	d000      	beq.n	8019042 <STM32Fs_WriteImageBMP16+0x1ae>
 8019040:	e7fe      	b.n	8019040 <STM32Fs_WriteImageBMP16+0x1ac>
 8019042:	910b      	str	r1, [sp, #44]	; 0x2c
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 8019044:	ab13      	add	r3, sp, #76	; 0x4c
 8019046:	a90b      	add	r1, sp, #44	; 0x2c
 8019048:	a814      	add	r0, sp, #80	; 0x50
 801904a:	f7fe f995 	bl	8017378 <f_write>
  if (res != FR_OK) while(1);
 801904e:	4601      	mov	r1, r0
 8019050:	b100      	cbz	r0, 8019054 <STM32Fs_WriteImageBMP16+0x1c0>
 8019052:	e7fe      	b.n	8019052 <STM32Fs_WriteImageBMP16+0x1be>
  if (bytes != sizeof(value)) while(1);
 8019054:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019056:	2a04      	cmp	r2, #4
 8019058:	d000      	beq.n	801905c <STM32Fs_WriteImageBMP16+0x1c8>
 801905a:	e7fe      	b.n	801905a <STM32Fs_WriteImageBMP16+0x1c6>
 801905c:	910a      	str	r1, [sp, #40]	; 0x28
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801905e:	ab13      	add	r3, sp, #76	; 0x4c
 8019060:	a814      	add	r0, sp, #80	; 0x50
 8019062:	a90a      	add	r1, sp, #40	; 0x28
 8019064:	f7fe f988 	bl	8017378 <f_write>
  if (res != FR_OK) while(1);
 8019068:	b100      	cbz	r0, 801906c <STM32Fs_WriteImageBMP16+0x1d8>
 801906a:	e7fe      	b.n	801906a <STM32Fs_WriteImageBMP16+0x1d6>
  if (bytes != sizeof(value)) while(1);
 801906c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801906e:	2a04      	cmp	r2, #4
 8019070:	d000      	beq.n	8019074 <STM32Fs_WriteImageBMP16+0x1e0>
 8019072:	e7fe      	b.n	8019072 <STM32Fs_WriteImageBMP16+0x1de>
 8019074:	2000      	movs	r0, #0
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 8019076:	a909      	add	r1, sp, #36	; 0x24
 8019078:	ab13      	add	r3, sp, #76	; 0x4c
 801907a:	9009      	str	r0, [sp, #36]	; 0x24
 801907c:	a814      	add	r0, sp, #80	; 0x50
 801907e:	f7fe f97b 	bl	8017378 <f_write>
  if (res != FR_OK) while(1);
 8019082:	4601      	mov	r1, r0
 8019084:	b100      	cbz	r0, 8019088 <STM32Fs_WriteImageBMP16+0x1f4>
 8019086:	e7fe      	b.n	8019086 <STM32Fs_WriteImageBMP16+0x1f2>
  if (bytes != sizeof(value)) while(1);
 8019088:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801908a:	2a04      	cmp	r2, #4
 801908c:	d000      	beq.n	8019090 <STM32Fs_WriteImageBMP16+0x1fc>
 801908e:	e7fe      	b.n	801908e <STM32Fs_WriteImageBMP16+0x1fa>
 8019090:	9108      	str	r1, [sp, #32]
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 8019092:	ab13      	add	r3, sp, #76	; 0x4c
 8019094:	a814      	add	r0, sp, #80	; 0x50
 8019096:	a908      	add	r1, sp, #32
 8019098:	f7fe f96e 	bl	8017378 <f_write>
  if (res != FR_OK) while(1);
 801909c:	b100      	cbz	r0, 80190a0 <STM32Fs_WriteImageBMP16+0x20c>
 801909e:	e7fe      	b.n	801909e <STM32Fs_WriteImageBMP16+0x20a>
  if (bytes != sizeof(value)) while(1);
 80190a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80190a2:	2a04      	cmp	r2, #4
 80190a4:	d000      	beq.n	80190a8 <STM32Fs_WriteImageBMP16+0x214>
 80190a6:	e7fe      	b.n	80190a6 <STM32Fs_WriteImageBMP16+0x212>
 80190a8:	f44f 4078 	mov.w	r0, #63488	; 0xf800
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 80190ac:	ab13      	add	r3, sp, #76	; 0x4c
 80190ae:	a907      	add	r1, sp, #28
 80190b0:	9007      	str	r0, [sp, #28]
 80190b2:	a814      	add	r0, sp, #80	; 0x50
 80190b4:	f7fe f960 	bl	8017378 <f_write>
  if (res != FR_OK) while(1);
 80190b8:	b100      	cbz	r0, 80190bc <STM32Fs_WriteImageBMP16+0x228>
 80190ba:	e7fe      	b.n	80190ba <STM32Fs_WriteImageBMP16+0x226>
  if (bytes != sizeof(value)) while(1);
 80190bc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80190be:	2a04      	cmp	r2, #4
 80190c0:	d000      	beq.n	80190c4 <STM32Fs_WriteImageBMP16+0x230>
 80190c2:	e7fe      	b.n	80190c2 <STM32Fs_WriteImageBMP16+0x22e>
 80190c4:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 80190c8:	ab13      	add	r3, sp, #76	; 0x4c
 80190ca:	a906      	add	r1, sp, #24
 80190cc:	9006      	str	r0, [sp, #24]
 80190ce:	a814      	add	r0, sp, #80	; 0x50
 80190d0:	f7fe f952 	bl	8017378 <f_write>
  if (res != FR_OK) while(1);
 80190d4:	b100      	cbz	r0, 80190d8 <STM32Fs_WriteImageBMP16+0x244>
 80190d6:	e7fe      	b.n	80190d6 <STM32Fs_WriteImageBMP16+0x242>
  if (bytes != sizeof(value)) while(1);
 80190d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80190da:	2a04      	cmp	r2, #4
 80190dc:	d000      	beq.n	80190e0 <STM32Fs_WriteImageBMP16+0x24c>
 80190de:	e7fe      	b.n	80190de <STM32Fs_WriteImageBMP16+0x24a>
 80190e0:	201f      	movs	r0, #31
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 80190e2:	ab13      	add	r3, sp, #76	; 0x4c
 80190e4:	a905      	add	r1, sp, #20
 80190e6:	9005      	str	r0, [sp, #20]
 80190e8:	a814      	add	r0, sp, #80	; 0x50
 80190ea:	f7fe f945 	bl	8017378 <f_write>
  if (res != FR_OK) while(1);
 80190ee:	b100      	cbz	r0, 80190f2 <STM32Fs_WriteImageBMP16+0x25e>
 80190f0:	e7fe      	b.n	80190f0 <STM32Fs_WriteImageBMP16+0x25c>
  if (bytes != sizeof(value)) while(1);
 80190f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80190f4:	2b04      	cmp	r3, #4
 80190f6:	d000      	beq.n	80190fa <STM32Fs_WriteImageBMP16+0x266>
 80190f8:	e7fe      	b.n	80190f8 <STM32Fs_WriteImageBMP16+0x264>
  if(swap_bytes == 1)
 80190fa:	f1b8 0f01 	cmp.w	r8, #1
  const int waste = (row_bytes / sizeof(uint16_t)) - width;
 80190fe:	ebc6 0454 	rsb	r4, r6, r4, lsr #1
  if(swap_bytes == 1)
 8019102:	d019      	beq.n	8019138 <STM32Fs_WriteImageBMP16+0x2a4>
  else  if(swap_bytes == 0)
 8019104:	f1b8 0f00 	cmp.w	r8, #0
 8019108:	d159      	bne.n	80191be <STM32Fs_WriteImageBMP16+0x32a>
    if(waste == 0)
 801910a:	2c00      	cmp	r4, #0
 801910c:	d04f      	beq.n	80191ae <STM32Fs_WriteImageBMP16+0x31a>
 801910e:	ea4f 0a46 	mov.w	sl, r6, lsl #1
      for (int i = 0; i < height; i++)
 8019112:	45b8      	cmp	r8, r7
 8019114:	d053      	beq.n	80191be <STM32Fs_WriteImageBMP16+0x32a>
        for (int j = 0; j < width; j++) 
 8019116:	f04f 0900 	mov.w	r9, #0
 801911a:	45b1      	cmp	r9, r6
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801911c:	ab13      	add	r3, sp, #76	; 0x4c
 801911e:	f04f 0202 	mov.w	r2, #2
 8019122:	a904      	add	r1, sp, #16
 8019124:	a814      	add	r0, sp, #80	; 0x50
        for (int j = 0; j < width; j++) 
 8019126:	d023      	beq.n	8019170 <STM32Fs_WriteImageBMP16+0x2dc>
 8019128:	f835 c019 	ldrh.w	ip, [r5, r9, lsl #1]
 801912c:	f8ad c010 	strh.w	ip, [sp, #16]
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 8019130:	f7fe f922 	bl	8017378 <f_write>
  if (res != FR_OK) while(1);
 8019134:	b1c0      	cbz	r0, 8019168 <STM32Fs_WriteImageBMP16+0x2d4>
 8019136:	e7fe      	b.n	8019136 <STM32Fs_WriteImageBMP16+0x2a2>
 8019138:	ea4f 0a46 	mov.w	sl, r6, lsl #1
    for (int i = 0; i < height; i++)
 801913c:	f04f 0900 	mov.w	r9, #0
 8019140:	45b9      	cmp	r9, r7
 8019142:	d03c      	beq.n	80191be <STM32Fs_WriteImageBMP16+0x32a>
      for (int j = 0; j < width; j++) 
 8019144:	f04f 0800 	mov.w	r8, #0
 8019148:	45b0      	cmp	r8, r6
 801914a:	d041      	beq.n	80191d0 <STM32Fs_WriteImageBMP16+0x33c>
        write_word(&File, IM_SWAP16(IM_GET_RGB565_PIXEL(buffer, width, (j), (i))));
 801914c:	f835 c018 	ldrh.w	ip, [r5, r8, lsl #1]
  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 8019150:	fa9c fc9c 	rev16.w	ip, ip
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 8019154:	2202      	movs	r2, #2
 8019156:	ab13      	add	r3, sp, #76	; 0x4c
 8019158:	a903      	add	r1, sp, #12
 801915a:	a814      	add	r0, sp, #80	; 0x50
        write_word(&File, IM_SWAP16(IM_GET_RGB565_PIXEL(buffer, width, (j), (i))));
 801915c:	f8ad c00c 	strh.w	ip, [sp, #12]
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 8019160:	f7fe f90a 	bl	8017378 <f_write>
  if (res != FR_OK) while(1);
 8019164:	b380      	cbz	r0, 80191c8 <STM32Fs_WriteImageBMP16+0x334>
 8019166:	e7fe      	b.n	8019166 <STM32Fs_WriteImageBMP16+0x2d2>
  if (bytes != sizeof(value)) while(1);
 8019168:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801916a:	2b02      	cmp	r3, #2
 801916c:	d011      	beq.n	8019192 <STM32Fs_WriteImageBMP16+0x2fe>
 801916e:	e7fe      	b.n	801916e <STM32Fs_WriteImageBMP16+0x2da>
        for (int j = 0; j < waste; j++) 
 8019170:	f04f 0900 	mov.w	r9, #0
 8019174:	46cb      	mov	fp, r9
 8019176:	45a1      	cmp	r9, r4
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 8019178:	ab13      	add	r3, sp, #76	; 0x4c
 801917a:	f04f 0202 	mov.w	r2, #2
 801917e:	f10d 0112 	add.w	r1, sp, #18
 8019182:	a814      	add	r0, sp, #80	; 0x50
        for (int j = 0; j < waste; j++) 
 8019184:	da0c      	bge.n	80191a0 <STM32Fs_WriteImageBMP16+0x30c>
 8019186:	f8ad b012 	strh.w	fp, [sp, #18]
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801918a:	f7fe f8f5 	bl	8017378 <f_write>
  if (res != FR_OK) while(1);
 801918e:	b118      	cbz	r0, 8019198 <STM32Fs_WriteImageBMP16+0x304>
 8019190:	e7fe      	b.n	8019190 <STM32Fs_WriteImageBMP16+0x2fc>
        for (int j = 0; j < width; j++) 
 8019192:	f109 0901 	add.w	r9, r9, #1
 8019196:	e7c0      	b.n	801911a <STM32Fs_WriteImageBMP16+0x286>
  if (bytes != sizeof(value)) while(1);
 8019198:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801919a:	2b02      	cmp	r3, #2
 801919c:	d004      	beq.n	80191a8 <STM32Fs_WriteImageBMP16+0x314>
 801919e:	e7fe      	b.n	801919e <STM32Fs_WriteImageBMP16+0x30a>
      for (int i = 0; i < height; i++)
 80191a0:	f108 0801 	add.w	r8, r8, #1
 80191a4:	4455      	add	r5, sl
 80191a6:	e7b4      	b.n	8019112 <STM32Fs_WriteImageBMP16+0x27e>
        for (int j = 0; j < waste; j++) 
 80191a8:	f109 0901 	add.w	r9, r9, #1
 80191ac:	e7e3      	b.n	8019176 <STM32Fs_WriteImageBMP16+0x2e2>
      f_write(&File, buffer, width * height * 2, (void *)&byteswritten);
 80191ae:	007a      	lsls	r2, r7, #1
 80191b0:	ab13      	add	r3, sp, #76	; 0x4c
 80191b2:	4629      	mov	r1, r5
 80191b4:	a814      	add	r0, sp, #80	; 0x50
 80191b6:	fb06 f202 	mul.w	r2, r6, r2
 80191ba:	f7fe f8dd 	bl	8017378 <f_write>
  f_close(&File);
 80191be:	a814      	add	r0, sp, #80	; 0x50
 80191c0:	f7fe fad4 	bl	801776c <f_close>
  return STM32FS_ERROR_NONE;
 80191c4:	2000      	movs	r0, #0
 80191c6:	e681      	b.n	8018ecc <STM32Fs_WriteImageBMP16+0x38>
  if (bytes != sizeof(value)) while(1);
 80191c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80191ca:	2b02      	cmp	r3, #2
 80191cc:	d011      	beq.n	80191f2 <STM32Fs_WriteImageBMP16+0x35e>
 80191ce:	e7fe      	b.n	80191ce <STM32Fs_WriteImageBMP16+0x33a>
      for (int j = 0; j < waste; j++) 
 80191d0:	f04f 0800 	mov.w	r8, #0
 80191d4:	46c3      	mov	fp, r8
 80191d6:	45a0      	cmp	r8, r4
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 80191d8:	ab13      	add	r3, sp, #76	; 0x4c
 80191da:	f04f 0202 	mov.w	r2, #2
 80191de:	f10d 010e 	add.w	r1, sp, #14
 80191e2:	a814      	add	r0, sp, #80	; 0x50
      for (int j = 0; j < waste; j++) 
 80191e4:	da0c      	bge.n	8019200 <STM32Fs_WriteImageBMP16+0x36c>
 80191e6:	f8ad b00e 	strh.w	fp, [sp, #14]
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 80191ea:	f7fe f8c5 	bl	8017378 <f_write>
  if (res != FR_OK) while(1);
 80191ee:	b118      	cbz	r0, 80191f8 <STM32Fs_WriteImageBMP16+0x364>
 80191f0:	e7fe      	b.n	80191f0 <STM32Fs_WriteImageBMP16+0x35c>
      for (int j = 0; j < width; j++) 
 80191f2:	f108 0801 	add.w	r8, r8, #1
 80191f6:	e7a7      	b.n	8019148 <STM32Fs_WriteImageBMP16+0x2b4>
  if (bytes != sizeof(value)) while(1);
 80191f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80191fa:	2b02      	cmp	r3, #2
 80191fc:	d004      	beq.n	8019208 <STM32Fs_WriteImageBMP16+0x374>
 80191fe:	e7fe      	b.n	80191fe <STM32Fs_WriteImageBMP16+0x36a>
    for (int i = 0; i < height; i++)
 8019200:	f109 0901 	add.w	r9, r9, #1
 8019204:	4455      	add	r5, sl
 8019206:	e79b      	b.n	8019140 <STM32Fs_WriteImageBMP16+0x2ac>
      for (int j = 0; j < waste; j++) 
 8019208:	f108 0801 	add.w	r8, r8, #1
 801920c:	e7e3      	b.n	80191d6 <STM32Fs_WriteImageBMP16+0x342>
 801920e:	bf00      	nop

08019210 <STM32Fs_WriteImageBMPGray>:
{
 8019210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019214:	f5ad 7d1c 	sub.w	sp, sp, #624	; 0x270
 8019218:	460e      	mov	r6, r1
 801921a:	4615      	mov	r5, r2
  if (f_open(&File, path, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 801921c:	4601      	mov	r1, r0
 801921e:	220a      	movs	r2, #10
 8019220:	a810      	add	r0, sp, #64	; 0x40
{
 8019222:	461f      	mov	r7, r3
  if (f_open(&File, path, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 8019224:	f7fd fc5e 	bl	8016ae4 <f_open>
 8019228:	b958      	cbnz	r0, 8019242 <STM32Fs_WriteImageBMPGray+0x32>
 801922a:	2042      	movs	r0, #66	; 0x42
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801922c:	2201      	movs	r2, #1
 801922e:	f10d 0102 	add.w	r1, sp, #2
 8019232:	ab0f      	add	r3, sp, #60	; 0x3c
 8019234:	f88d 0002 	strb.w	r0, [sp, #2]
 8019238:	a810      	add	r0, sp, #64	; 0x40
 801923a:	f7fe f89d 	bl	8017378 <f_write>
  if (res != FR_OK) while(1);
 801923e:	b128      	cbz	r0, 801924c <STM32Fs_WriteImageBMPGray+0x3c>
 8019240:	e7fe      	b.n	8019240 <STM32Fs_WriteImageBMPGray+0x30>
    return STM32FS_ERROR_FOPEN_FAIL;
 8019242:	2003      	movs	r0, #3
}
 8019244:	f50d 7d1c 	add.w	sp, sp, #624	; 0x270
 8019248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (bytes != sizeof(value)) while(1);
 801924c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801924e:	2a01      	cmp	r2, #1
 8019250:	d000      	beq.n	8019254 <STM32Fs_WriteImageBMPGray+0x44>
 8019252:	e7fe      	b.n	8019252 <STM32Fs_WriteImageBMPGray+0x42>
 8019254:	204d      	movs	r0, #77	; 0x4d
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 8019256:	ab0f      	add	r3, sp, #60	; 0x3c
 8019258:	f10d 0101 	add.w	r1, sp, #1
 801925c:	f88d 0001 	strb.w	r0, [sp, #1]
 8019260:	a810      	add	r0, sp, #64	; 0x40
 8019262:	f7fe f889 	bl	8017378 <f_write>
  if (res != FR_OK) while(1);
 8019266:	b918      	cbnz	r0, 8019270 <STM32Fs_WriteImageBMPGray+0x60>
  if (bytes != sizeof(value)) while(1);
 8019268:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801926a:	2b01      	cmp	r3, #1
 801926c:	d001      	beq.n	8019272 <STM32Fs_WriteImageBMPGray+0x62>
 801926e:	e7fe      	b.n	801926e <STM32Fs_WriteImageBMPGray+0x5e>
 8019270:	e7fe      	b.n	8019270 <STM32Fs_WriteImageBMPGray+0x60>
  const int row_bytes = (((width * 8) + 31) / 32) * 4;
 8019272:	00ec      	lsls	r4, r5, #3
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 8019274:	a90d      	add	r1, sp, #52	; 0x34
 8019276:	ab0f      	add	r3, sp, #60	; 0x3c
 8019278:	2204      	movs	r2, #4
  const int row_bytes = (((width * 8) + 31) / 32) * 4;
 801927a:	341f      	adds	r4, #31
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801927c:	a810      	add	r0, sp, #64	; 0x40
  const int row_bytes = (((width * 8) + 31) / 32) * 4;
 801927e:	0964      	lsrs	r4, r4, #5
 8019280:	00a4      	lsls	r4, r4, #2
  const int data_size = (row_bytes * height);
 8019282:	fb07 f904 	mul.w	r9, r7, r4
  write_long(&File, 14 + 40 + 1024 + data_size);
 8019286:	f209 4c36 	addw	ip, r9, #1078	; 0x436
 801928a:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801928e:	f7fe f873 	bl	8017378 <f_write>
  if (res != FR_OK) while(1);
 8019292:	4601      	mov	r1, r0
 8019294:	b918      	cbnz	r0, 801929e <STM32Fs_WriteImageBMPGray+0x8e>
  if (bytes != sizeof(value)) while(1);
 8019296:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019298:	2b04      	cmp	r3, #4
 801929a:	d001      	beq.n	80192a0 <STM32Fs_WriteImageBMPGray+0x90>
 801929c:	e7fe      	b.n	801929c <STM32Fs_WriteImageBMPGray+0x8c>
 801929e:	e7fe      	b.n	801929e <STM32Fs_WriteImageBMPGray+0x8e>
 80192a0:	f8ad 100a 	strh.w	r1, [sp, #10]
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 80192a4:	ab0f      	add	r3, sp, #60	; 0x3c
 80192a6:	f10d 010a 	add.w	r1, sp, #10
 80192aa:	2202      	movs	r2, #2
 80192ac:	a810      	add	r0, sp, #64	; 0x40
 80192ae:	f7fe f863 	bl	8017378 <f_write>
  if (res != FR_OK) while(1);
 80192b2:	4601      	mov	r1, r0
 80192b4:	b918      	cbnz	r0, 80192be <STM32Fs_WriteImageBMPGray+0xae>
  if (bytes != sizeof(value)) while(1);
 80192b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80192b8:	2a02      	cmp	r2, #2
 80192ba:	d001      	beq.n	80192c0 <STM32Fs_WriteImageBMPGray+0xb0>
 80192bc:	e7fe      	b.n	80192bc <STM32Fs_WriteImageBMPGray+0xac>
 80192be:	e7fe      	b.n	80192be <STM32Fs_WriteImageBMPGray+0xae>
 80192c0:	f8ad 1008 	strh.w	r1, [sp, #8]
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 80192c4:	ab0f      	add	r3, sp, #60	; 0x3c
 80192c6:	a810      	add	r0, sp, #64	; 0x40
 80192c8:	a902      	add	r1, sp, #8
 80192ca:	f7fe f855 	bl	8017378 <f_write>
  if (res != FR_OK) while(1);
 80192ce:	b928      	cbnz	r0, 80192dc <STM32Fs_WriteImageBMPGray+0xcc>
  if (bytes != sizeof(value)) while(1);
 80192d0:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80192d4:	f1b8 0f02 	cmp.w	r8, #2
 80192d8:	d001      	beq.n	80192de <STM32Fs_WriteImageBMPGray+0xce>
 80192da:	e7fe      	b.n	80192da <STM32Fs_WriteImageBMPGray+0xca>
 80192dc:	e7fe      	b.n	80192dc <STM32Fs_WriteImageBMPGray+0xcc>
 80192de:	f240 4036 	movw	r0, #1078	; 0x436
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 80192e2:	ab0f      	add	r3, sp, #60	; 0x3c
 80192e4:	2204      	movs	r2, #4
 80192e6:	a90c      	add	r1, sp, #48	; 0x30
 80192e8:	900c      	str	r0, [sp, #48]	; 0x30
 80192ea:	a810      	add	r0, sp, #64	; 0x40
 80192ec:	f7fe f844 	bl	8017378 <f_write>
  if (res != FR_OK) while(1);
 80192f0:	b918      	cbnz	r0, 80192fa <STM32Fs_WriteImageBMPGray+0xea>
  if (bytes != sizeof(value)) while(1);
 80192f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80192f4:	2a04      	cmp	r2, #4
 80192f6:	d001      	beq.n	80192fc <STM32Fs_WriteImageBMPGray+0xec>
 80192f8:	e7fe      	b.n	80192f8 <STM32Fs_WriteImageBMPGray+0xe8>
 80192fa:	e7fe      	b.n	80192fa <STM32Fs_WriteImageBMPGray+0xea>
 80192fc:	2028      	movs	r0, #40	; 0x28
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 80192fe:	ab0f      	add	r3, sp, #60	; 0x3c
 8019300:	a90b      	add	r1, sp, #44	; 0x2c
 8019302:	900b      	str	r0, [sp, #44]	; 0x2c
 8019304:	a810      	add	r0, sp, #64	; 0x40
 8019306:	f7fe f837 	bl	8017378 <f_write>
  if (res != FR_OK) while(1);
 801930a:	b100      	cbz	r0, 801930e <STM32Fs_WriteImageBMPGray+0xfe>
 801930c:	e7fe      	b.n	801930c <STM32Fs_WriteImageBMPGray+0xfc>
  if (bytes != sizeof(value)) while(1);
 801930e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019310:	2a04      	cmp	r2, #4
 8019312:	d000      	beq.n	8019316 <STM32Fs_WriteImageBMPGray+0x106>
 8019314:	e7fe      	b.n	8019314 <STM32Fs_WriteImageBMPGray+0x104>
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 8019316:	ab0f      	add	r3, sp, #60	; 0x3c
 8019318:	a810      	add	r0, sp, #64	; 0x40
 801931a:	a90a      	add	r1, sp, #40	; 0x28
 801931c:	950a      	str	r5, [sp, #40]	; 0x28
 801931e:	f7fe f82b 	bl	8017378 <f_write>
  if (res != FR_OK) while(1);
 8019322:	b100      	cbz	r0, 8019326 <STM32Fs_WriteImageBMPGray+0x116>
 8019324:	e7fe      	b.n	8019324 <STM32Fs_WriteImageBMPGray+0x114>
  if (bytes != sizeof(value)) while(1);
 8019326:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019328:	2a04      	cmp	r2, #4
 801932a:	d000      	beq.n	801932e <STM32Fs_WriteImageBMPGray+0x11e>
 801932c:	e7fe      	b.n	801932c <STM32Fs_WriteImageBMPGray+0x11c>
  write_long(&File, -height); // store the image flipped (correctly)
 801932e:	4278      	negs	r0, r7
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 8019330:	ab0f      	add	r3, sp, #60	; 0x3c
 8019332:	a909      	add	r1, sp, #36	; 0x24
 8019334:	9009      	str	r0, [sp, #36]	; 0x24
 8019336:	a810      	add	r0, sp, #64	; 0x40
 8019338:	f7fe f81e 	bl	8017378 <f_write>
  if (res != FR_OK) while(1);
 801933c:	b100      	cbz	r0, 8019340 <STM32Fs_WriteImageBMPGray+0x130>
 801933e:	e7fe      	b.n	801933e <STM32Fs_WriteImageBMPGray+0x12e>
  if (bytes != sizeof(value)) while(1);
 8019340:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019342:	2b04      	cmp	r3, #4
 8019344:	d000      	beq.n	8019348 <STM32Fs_WriteImageBMPGray+0x138>
 8019346:	e7fe      	b.n	8019346 <STM32Fs_WriteImageBMPGray+0x136>
 8019348:	2001      	movs	r0, #1
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801934a:	4642      	mov	r2, r8
 801934c:	ab0f      	add	r3, sp, #60	; 0x3c
 801934e:	f10d 0106 	add.w	r1, sp, #6
 8019352:	f8ad 0006 	strh.w	r0, [sp, #6]
 8019356:	a810      	add	r0, sp, #64	; 0x40
 8019358:	f7fe f80e 	bl	8017378 <f_write>
  if (res != FR_OK) while(1);
 801935c:	b100      	cbz	r0, 8019360 <STM32Fs_WriteImageBMPGray+0x150>
 801935e:	e7fe      	b.n	801935e <STM32Fs_WriteImageBMPGray+0x14e>
  if (bytes != sizeof(value)) while(1);
 8019360:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019362:	2a02      	cmp	r2, #2
 8019364:	d000      	beq.n	8019368 <STM32Fs_WriteImageBMPGray+0x158>
 8019366:	e7fe      	b.n	8019366 <STM32Fs_WriteImageBMPGray+0x156>
 8019368:	2008      	movs	r0, #8
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801936a:	a901      	add	r1, sp, #4
 801936c:	ab0f      	add	r3, sp, #60	; 0x3c
 801936e:	f8ad 0004 	strh.w	r0, [sp, #4]
 8019372:	a810      	add	r0, sp, #64	; 0x40
 8019374:	f7fe f800 	bl	8017378 <f_write>
  if (res != FR_OK) while(1);
 8019378:	4601      	mov	r1, r0
 801937a:	b100      	cbz	r0, 801937e <STM32Fs_WriteImageBMPGray+0x16e>
 801937c:	e7fe      	b.n	801937c <STM32Fs_WriteImageBMPGray+0x16c>
  if (bytes != sizeof(value)) while(1);
 801937e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019380:	2b02      	cmp	r3, #2
 8019382:	d000      	beq.n	8019386 <STM32Fs_WriteImageBMPGray+0x176>
 8019384:	e7fe      	b.n	8019384 <STM32Fs_WriteImageBMPGray+0x174>
 8019386:	9108      	str	r1, [sp, #32]
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 8019388:	ab0f      	add	r3, sp, #60	; 0x3c
 801938a:	2204      	movs	r2, #4
 801938c:	a810      	add	r0, sp, #64	; 0x40
 801938e:	a908      	add	r1, sp, #32
 8019390:	f7fd fff2 	bl	8017378 <f_write>
  if (res != FR_OK) while(1);
 8019394:	b100      	cbz	r0, 8019398 <STM32Fs_WriteImageBMPGray+0x188>
 8019396:	e7fe      	b.n	8019396 <STM32Fs_WriteImageBMPGray+0x186>
  if (bytes != sizeof(value)) while(1);
 8019398:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801939a:	2a04      	cmp	r2, #4
 801939c:	d000      	beq.n	80193a0 <STM32Fs_WriteImageBMPGray+0x190>
 801939e:	e7fe      	b.n	801939e <STM32Fs_WriteImageBMPGray+0x18e>
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 80193a0:	a907      	add	r1, sp, #28
 80193a2:	ab0f      	add	r3, sp, #60	; 0x3c
 80193a4:	a810      	add	r0, sp, #64	; 0x40
 80193a6:	f8cd 901c 	str.w	r9, [sp, #28]
 80193aa:	f7fd ffe5 	bl	8017378 <f_write>
  if (res != FR_OK) while(1);
 80193ae:	4601      	mov	r1, r0
 80193b0:	b100      	cbz	r0, 80193b4 <STM32Fs_WriteImageBMPGray+0x1a4>
 80193b2:	e7fe      	b.n	80193b2 <STM32Fs_WriteImageBMPGray+0x1a2>
  if (bytes != sizeof(value)) while(1);
 80193b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80193b6:	2a04      	cmp	r2, #4
 80193b8:	d000      	beq.n	80193bc <STM32Fs_WriteImageBMPGray+0x1ac>
 80193ba:	e7fe      	b.n	80193ba <STM32Fs_WriteImageBMPGray+0x1aa>
 80193bc:	9106      	str	r1, [sp, #24]
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 80193be:	ab0f      	add	r3, sp, #60	; 0x3c
 80193c0:	a906      	add	r1, sp, #24
 80193c2:	a810      	add	r0, sp, #64	; 0x40
 80193c4:	f7fd ffd8 	bl	8017378 <f_write>
  if (res != FR_OK) while(1);
 80193c8:	4601      	mov	r1, r0
 80193ca:	b100      	cbz	r0, 80193ce <STM32Fs_WriteImageBMPGray+0x1be>
 80193cc:	e7fe      	b.n	80193cc <STM32Fs_WriteImageBMPGray+0x1bc>
  if (bytes != sizeof(value)) while(1);
 80193ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80193d0:	2a04      	cmp	r2, #4
 80193d2:	d000      	beq.n	80193d6 <STM32Fs_WriteImageBMPGray+0x1c6>
 80193d4:	e7fe      	b.n	80193d4 <STM32Fs_WriteImageBMPGray+0x1c4>
 80193d6:	9105      	str	r1, [sp, #20]
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 80193d8:	ab0f      	add	r3, sp, #60	; 0x3c
 80193da:	a810      	add	r0, sp, #64	; 0x40
 80193dc:	a905      	add	r1, sp, #20
 80193de:	f7fd ffcb 	bl	8017378 <f_write>
  if (res != FR_OK) while(1);
 80193e2:	b100      	cbz	r0, 80193e6 <STM32Fs_WriteImageBMPGray+0x1d6>
 80193e4:	e7fe      	b.n	80193e4 <STM32Fs_WriteImageBMPGray+0x1d4>
  if (bytes != sizeof(value)) while(1);
 80193e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80193e8:	2a04      	cmp	r2, #4
 80193ea:	d000      	beq.n	80193ee <STM32Fs_WriteImageBMPGray+0x1de>
 80193ec:	e7fe      	b.n	80193ec <STM32Fs_WriteImageBMPGray+0x1dc>
 80193ee:	2000      	movs	r0, #0
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 80193f0:	a904      	add	r1, sp, #16
 80193f2:	ab0f      	add	r3, sp, #60	; 0x3c
 80193f4:	9004      	str	r0, [sp, #16]
 80193f6:	a810      	add	r0, sp, #64	; 0x40
 80193f8:	f7fd ffbe 	bl	8017378 <f_write>
  if (res != FR_OK) while(1);
 80193fc:	4601      	mov	r1, r0
 80193fe:	b100      	cbz	r0, 8019402 <STM32Fs_WriteImageBMPGray+0x1f2>
 8019400:	e7fe      	b.n	8019400 <STM32Fs_WriteImageBMPGray+0x1f0>
  if (bytes != sizeof(value)) while(1);
 8019402:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019404:	2a04      	cmp	r2, #4
 8019406:	d000      	beq.n	801940a <STM32Fs_WriteImageBMPGray+0x1fa>
 8019408:	e7fe      	b.n	8019408 <STM32Fs_WriteImageBMPGray+0x1f8>
 801940a:	9103      	str	r1, [sp, #12]
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801940c:	ab0f      	add	r3, sp, #60	; 0x3c
 801940e:	a810      	add	r0, sp, #64	; 0x40
 8019410:	a903      	add	r1, sp, #12
 8019412:	f7fd ffb1 	bl	8017378 <f_write>
  if (res != FR_OK) while(1);
 8019416:	b100      	cbz	r0, 801941a <STM32Fs_WriteImageBMPGray+0x20a>
 8019418:	e7fe      	b.n	8019418 <STM32Fs_WriteImageBMPGray+0x208>
  if (bytes != sizeof(value)) while(1);
 801941a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801941c:	2b04      	cmp	r3, #4
 801941e:	d000      	beq.n	8019422 <STM32Fs_WriteImageBMPGray+0x212>
 8019420:	e7fe      	b.n	8019420 <STM32Fs_WriteImageBMPGray+0x210>
  for (int i = 0; i < 256; i++) {
 8019422:	4680      	mov	r8, r0
      write_long(&File, ((i) << 16) | ((i) << 8) | i);
 8019424:	ea4f 4c08 	mov.w	ip, r8, lsl #16
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 8019428:	ab0f      	add	r3, sp, #60	; 0x3c
 801942a:	2204      	movs	r2, #4
 801942c:	a90e      	add	r1, sp, #56	; 0x38
      write_long(&File, ((i) << 16) | ((i) << 8) | i);
 801942e:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 8019432:	a810      	add	r0, sp, #64	; 0x40
      write_long(&File, ((i) << 16) | ((i) << 8) | i);
 8019434:	ea4c 0c08 	orr.w	ip, ip, r8
 8019438:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801943c:	f7fd ff9c 	bl	8017378 <f_write>
  if (res != FR_OK) while(1);
 8019440:	b100      	cbz	r0, 8019444 <STM32Fs_WriteImageBMPGray+0x234>
 8019442:	e7fe      	b.n	8019442 <STM32Fs_WriteImageBMPGray+0x232>
  if (bytes != sizeof(value)) while(1);
 8019444:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019446:	2b04      	cmp	r3, #4
 8019448:	d000      	beq.n	801944c <STM32Fs_WriteImageBMPGray+0x23c>
 801944a:	e7fe      	b.n	801944a <STM32Fs_WriteImageBMPGray+0x23a>
  for (int i = 0; i < 256; i++) {
 801944c:	f108 0801 	add.w	r8, r8, #1
 8019450:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
 8019454:	d1e6      	bne.n	8019424 <STM32Fs_WriteImageBMPGray+0x214>
  if (width == row_bytes) { /* (width % 4) == 0 */
 8019456:	42ac      	cmp	r4, r5
 8019458:	d01d      	beq.n	8019496 <STM32Fs_WriteImageBMPGray+0x286>
      for (int i = 0; i < height; i++) {
 801945a:	4681      	mov	r9, r0
 801945c:	1b64      	subs	r4, r4, r5
 801945e:	45b9      	cmp	r9, r7
 8019460:	d031      	beq.n	80194c6 <STM32Fs_WriteImageBMPGray+0x2b6>
  FRESULT res = f_write(fp, data, size, &bytes);
 8019462:	ab0f      	add	r3, sp, #60	; 0x3c
 8019464:	462a      	mov	r2, r5
 8019466:	4631      	mov	r1, r6
 8019468:	a810      	add	r0, sp, #64	; 0x40
 801946a:	f7fd ff85 	bl	8017378 <f_write>
  if (res != FR_OK) while(1);
 801946e:	bb48      	cbnz	r0, 80194c4 <STM32Fs_WriteImageBMPGray+0x2b4>
  if (bytes != size) while(1);
 8019470:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019472:	429d      	cmp	r5, r3
 8019474:	d125      	bne.n	80194c2 <STM32Fs_WriteImageBMPGray+0x2b2>
          for (int j = 0; j < waste; j++) {
 8019476:	4680      	mov	r8, r0
 8019478:	4682      	mov	sl, r0
 801947a:	45a0      	cmp	r8, r4
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801947c:	ab0f      	add	r3, sp, #60	; 0x3c
 801947e:	f04f 0201 	mov.w	r2, #1
 8019482:	f10d 0103 	add.w	r1, sp, #3
 8019486:	a810      	add	r0, sp, #64	; 0x40
          for (int j = 0; j < waste; j++) {
 8019488:	da18      	bge.n	80194bc <STM32Fs_WriteImageBMPGray+0x2ac>
 801948a:	f88d a003 	strb.w	sl, [sp, #3]
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801948e:	f7fd ff73 	bl	8017378 <f_write>
  if (res != FR_OK) while(1);
 8019492:	b140      	cbz	r0, 80194a6 <STM32Fs_WriteImageBMPGray+0x296>
 8019494:	e7fe      	b.n	8019494 <STM32Fs_WriteImageBMPGray+0x284>
  FRESULT res = f_write(fp, data, size, &bytes);
 8019496:	4631      	mov	r1, r6
 8019498:	ab0f      	add	r3, sp, #60	; 0x3c
 801949a:	464a      	mov	r2, r9
 801949c:	a810      	add	r0, sp, #64	; 0x40
 801949e:	f7fd ff6b 	bl	8017378 <f_write>
  if (res != FR_OK) while(1);
 80194a2:	b120      	cbz	r0, 80194ae <STM32Fs_WriteImageBMPGray+0x29e>
 80194a4:	e7fe      	b.n	80194a4 <STM32Fs_WriteImageBMPGray+0x294>
  if (bytes != sizeof(value)) while(1);
 80194a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80194a8:	2b01      	cmp	r3, #1
 80194aa:	d004      	beq.n	80194b6 <STM32Fs_WriteImageBMPGray+0x2a6>
 80194ac:	e7fe      	b.n	80194ac <STM32Fs_WriteImageBMPGray+0x29c>
  if (bytes != size) while(1);
 80194ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80194b0:	4599      	cmp	r9, r3
 80194b2:	d008      	beq.n	80194c6 <STM32Fs_WriteImageBMPGray+0x2b6>
 80194b4:	e7fe      	b.n	80194b4 <STM32Fs_WriteImageBMPGray+0x2a4>
          for (int j = 0; j < waste; j++) {
 80194b6:	f108 0801 	add.w	r8, r8, #1
 80194ba:	e7de      	b.n	801947a <STM32Fs_WriteImageBMPGray+0x26a>
      for (int i = 0; i < height; i++) {
 80194bc:	4491      	add	r9, r2
 80194be:	442e      	add	r6, r5
 80194c0:	e7cd      	b.n	801945e <STM32Fs_WriteImageBMPGray+0x24e>
 80194c2:	e7fe      	b.n	80194c2 <STM32Fs_WriteImageBMPGray+0x2b2>
 80194c4:	e7fe      	b.n	80194c4 <STM32Fs_WriteImageBMPGray+0x2b4>
  f_close(&File);
 80194c6:	a810      	add	r0, sp, #64	; 0x40
 80194c8:	f7fe f950 	bl	801776c <f_close>
  return STM32FS_ERROR_NONE;
 80194cc:	2000      	movs	r0, #0
 80194ce:	e6b9      	b.n	8019244 <STM32Fs_WriteImageBMPGray+0x34>

080194d0 <STM32Fs_WriteTextToFile>:
{
 80194d0:	b530      	push	{r4, r5, lr}
  if (append_to_file == STM32FS_APPEND_TO_FILE)
 80194d2:	2a01      	cmp	r2, #1
{
 80194d4:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 80194d8:	460d      	mov	r5, r1
  if (f_open(&File, path, flags) != FR_OK)
 80194da:	4601      	mov	r1, r0
 80194dc:	bf0c      	ite	eq
 80194de:	2232      	moveq	r2, #50	; 0x32
 80194e0:	220a      	movne	r2, #10
 80194e2:	a802      	add	r0, sp, #8
 80194e4:	f7fd fafe 	bl	8016ae4 <f_open>
 80194e8:	b9a0      	cbnz	r0, 8019514 <STM32Fs_WriteTextToFile+0x44>
  FRESULT res = f_write(&File, (uint8_t *)content, strlen(content), (void *)&byteswritten);
 80194ea:	4628      	mov	r0, r5
 80194ec:	f7e6 ff02 	bl	80002f4 <strlen>
 80194f0:	4629      	mov	r1, r5
 80194f2:	4602      	mov	r2, r0
 80194f4:	ab01      	add	r3, sp, #4
 80194f6:	a802      	add	r0, sp, #8
 80194f8:	f7fd ff3e 	bl	8017378 <f_write>
  if (res != FR_OK)
 80194fc:	4604      	mov	r4, r0
 80194fe:	b968      	cbnz	r0, 801951c <STM32Fs_WriteTextToFile+0x4c>
  if (byteswritten != strlen(content))
 8019500:	4628      	mov	r0, r5
 8019502:	f7e6 fef7 	bl	80002f4 <strlen>
 8019506:	9b01      	ldr	r3, [sp, #4]
 8019508:	4298      	cmp	r0, r3
 801950a:	d00b      	beq.n	8019524 <STM32Fs_WriteTextToFile+0x54>
    return STM32FS_ERROR_FILE_WRITE_UNDERFLOW;
 801950c:	2008      	movs	r0, #8
}
 801950e:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8019512:	bd30      	pop	{r4, r5, pc}
    return STM32FS_ERROR_FOPEN_FAIL;
 8019514:	2003      	movs	r0, #3
}
 8019516:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 801951a:	bd30      	pop	{r4, r5, pc}
    return STM32FS_ERROR_FWRITE_FAIL;
 801951c:	2004      	movs	r0, #4
}
 801951e:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8019522:	bd30      	pop	{r4, r5, pc}
  f_close(&File);
 8019524:	a802      	add	r0, sp, #8
 8019526:	f7fe f921 	bl	801776c <f_close>
  return STM32FS_ERROR_NONE;
 801952a:	4620      	mov	r0, r4
}
 801952c:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8019530:	bd30      	pop	{r4, r5, pc}
 8019532:	bf00      	nop

08019534 <STM23Fs_ReadImageBMP>:
 * @param path[in] Path to the file in filesystem
 * @param out_buffer[out] pixel buffer
 * @warning In order to know the size of out_buffer, it's recommended to call STM32Fs_GetImageInfoBMP beforehand
 * @return stm32fs_err_t
 */
stm32fs_err_t STM23Fs_ReadImageBMP(const char *path, uint8_t *out_buffer){
 8019534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  static FIL File;
  stm32fs_err_t err;

  /* Open the file */
  if (f_open(&File, path, FA_OPEN_EXISTING | FA_READ) != FR_OK)
 8019538:	2201      	movs	r2, #1
stm32fs_err_t STM23Fs_ReadImageBMP(const char *path, uint8_t *out_buffer){
 801953a:	b091      	sub	sp, #68	; 0x44
 801953c:	468b      	mov	fp, r1
  if (f_open(&File, path, FA_OPEN_EXISTING | FA_READ) != FR_OK)
 801953e:	4601      	mov	r1, r0
 8019540:	48b0      	ldr	r0, [pc, #704]	; (8019804 <STM23Fs_ReadImageBMP+0x2d0>)
 8019542:	f7fd facf 	bl	8016ae4 <f_open>
 8019546:	2800      	cmp	r0, #0
 8019548:	f040 808a 	bne.w	8019660 <STM23Fs_ReadImageBMP+0x12c>
  F_READ_SAFE(File, header, 2);
 801954c:	ab0b      	add	r3, sp, #44	; 0x2c
 801954e:	2202      	movs	r2, #2
 8019550:	48ac      	ldr	r0, [pc, #688]	; (8019804 <STM23Fs_ReadImageBMP+0x2d0>)
 8019552:	a90a      	add	r1, sp, #40	; 0x28
 8019554:	f7fd fd40 	bl	8016fd8 <f_read>
 8019558:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801955a:	2b02      	cmp	r3, #2
 801955c:	d176      	bne.n	801964c <STM23Fs_ReadImageBMP+0x118>
  if (header[0] != 'B' || header[1] != 'M')
 801955e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8019562:	2b42      	cmp	r3, #66	; 0x42
 8019564:	d17a      	bne.n	801965c <STM23Fs_ReadImageBMP+0x128>
 8019566:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 801956a:	2b4d      	cmp	r3, #77	; 0x4d
 801956c:	d176      	bne.n	801965c <STM23Fs_ReadImageBMP+0x128>
 801956e:	ab0b      	add	r3, sp, #44	; 0x2c
 8019570:	aa08      	add	r2, sp, #32
 8019572:	a907      	add	r1, sp, #28
 8019574:	48a3      	ldr	r0, [pc, #652]	; (8019804 <STM23Fs_ReadImageBMP+0x2d0>)
 8019576:	9300      	str	r3, [sp, #0]
 8019578:	ab09      	add	r3, sp, #36	; 0x24
 801957a:	f7ff f96d 	bl	8018858 <GetImageInfoBMP.part.0>

  uint32_t width, height, bpp;

  err = GetImageInfoBMP(&File, &width, &height, &bpp, &rs);

  if( err != STM32FS_ERROR_NONE ){
 801957e:	4606      	mov	r6, r0
 8019580:	2800      	cmp	r0, #0
 8019582:	d164      	bne.n	801964e <STM23Fs_ReadImageBMP+0x11a>
  if (rs->bmp_bpp == 8) {
 8019584:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    f_close(&File);
    return err;
  }

  err = ReadImageBMP(&File, out_buffer , width, height, &rs);
 8019588:	e9dd 5207 	ldrd	r5, r2, [sp, #28]
  if (rs->bmp_bpp == 8) {
 801958c:	2b08      	cmp	r3, #8
  err = ReadImageBMP(&File, out_buffer , width, height, &rs);
 801958e:	9203      	str	r2, [sp, #12]
  if (rs->bmp_bpp == 8) {
 8019590:	d06b      	beq.n	801966a <STM23Fs_ReadImageBMP+0x136>
  } else if (rs->bmp_bpp == 16) {
 8019592:	2b10      	cmp	r3, #16
 8019594:	f000 80a5 	beq.w	80196e2 <STM23Fs_ReadImageBMP+0x1ae>
  } else if (rs->bmp_bpp == 24) {
 8019598:	2b18      	cmp	r3, #24
 801959a:	d158      	bne.n	801964e <STM23Fs_ReadImageBMP+0x11a>
    for (int i = 0; i < height; i++) {
 801959c:	2a00      	cmp	r2, #0
 801959e:	d056      	beq.n	801964e <STM23Fs_ReadImageBMP+0x11a>
 80195a0:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80195a4:	4682      	mov	sl, r0
        F_READ_SAFE(File, &b, sizeof(b));
 80195a6:	4f97      	ldr	r7, [pc, #604]	; (8019804 <STM23Fs_ReadImageBMP+0x2d0>)
 80195a8:	461e      	mov	r6, r3
 80195aa:	9004      	str	r0, [sp, #16]
      for (int j = 0, jj = rs->bmp_row_bytes / 3; j < jj; j++) {
 80195ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80195ae:	4a96      	ldr	r2, [pc, #600]	; (8019808 <STM23Fs_ReadImageBMP+0x2d4>)
 80195b0:	fba2 2803 	umull	r2, r8, r2, r3
 80195b4:	ea5f 0858 	movs.w	r8, r8, lsr #1
 80195b8:	f000 80f9 	beq.w	80197ae <STM23Fs_ReadImageBMP+0x27a>
 80195bc:	9b03      	ldr	r3, [sp, #12]
 80195be:	2400      	movs	r4, #0
 80195c0:	f103 39ff 	add.w	r9, r3, #4294967295
 80195c4:	eba9 090a 	sub.w	r9, r9, sl
 80195c8:	e030      	b.n	801962c <STM23Fs_ReadImageBMP+0xf8>
        F_READ_SAFE(File, &g, sizeof(g));
 80195ca:	f7fd fd05 	bl	8016fd8 <f_read>
 80195ce:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
        F_READ_SAFE(File, &r, sizeof(r));
 80195d2:	ab0a      	add	r3, sp, #40	; 0x28
 80195d4:	f10d 011a 	add.w	r1, sp, #26
        F_READ_SAFE(File, &g, sizeof(g));
 80195d8:	f1bc 0f01 	cmp.w	ip, #1
        F_READ_SAFE(File, &r, sizeof(r));
 80195dc:	4638      	mov	r0, r7
 80195de:	4662      	mov	r2, ip
        F_READ_SAFE(File, &g, sizeof(g));
 80195e0:	d134      	bne.n	801964c <STM23Fs_ReadImageBMP+0x118>
        F_READ_SAFE(File, &r, sizeof(r));
 80195e2:	f7fd fcf9 	bl	8016fd8 <f_read>
 80195e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80195e8:	2b01      	cmp	r3, #1
 80195ea:	d12f      	bne.n	801964c <STM23Fs_ReadImageBMP+0x118>
        if (j < width) {
 80195ec:	42a5      	cmp	r5, r4
 80195ee:	d919      	bls.n	8019624 <STM23Fs_ReadImageBMP+0xf0>
          int x = (rs->bmp_h < 0) ? (width - j - 1) : j; // vertical flip
 80195f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80195f2:	4623      	mov	r3, r4
 80195f4:	2a00      	cmp	r2, #0
 80195f6:	da01      	bge.n	80195fc <STM23Fs_ReadImageBMP+0xc8>
 80195f8:	1e6b      	subs	r3, r5, #1
 80195fa:	1b1b      	subs	r3, r3, r4
          int y = (rs->bmp_w < 0) ? (height - i - 1) : i; // horizontal flip
 80195fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
          IM_SET_RGB888_PIXEL(pixels, x, y, width, r, g, b);
 80195fe:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8019602:	f89d 001a 	ldrb.w	r0, [sp, #26]
 8019606:	2900      	cmp	r1, #0
 8019608:	f89d 1019 	ldrb.w	r1, [sp, #25]
 801960c:	bfac      	ite	ge
 801960e:	4653      	movge	r3, sl
 8019610:	464b      	movlt	r3, r9
 8019612:	fb06 2303 	mla	r3, r6, r3, r2
 8019616:	f89d 2018 	ldrb.w	r2, [sp, #24]
 801961a:	f80b 0003 	strb.w	r0, [fp, r3]
 801961e:	445b      	add	r3, fp
 8019620:	7059      	strb	r1, [r3, #1]
 8019622:	709a      	strb	r2, [r3, #2]
      for (int j = 0, jj = rs->bmp_row_bytes / 3; j < jj; j++) {
 8019624:	3401      	adds	r4, #1
 8019626:	45a0      	cmp	r8, r4
 8019628:	f000 80c0 	beq.w	80197ac <STM23Fs_ReadImageBMP+0x278>
        F_READ_SAFE(File, &b, sizeof(b));
 801962c:	ab0a      	add	r3, sp, #40	; 0x28
 801962e:	2201      	movs	r2, #1
 8019630:	a906      	add	r1, sp, #24
 8019632:	4638      	mov	r0, r7
 8019634:	f7fd fcd0 	bl	8016fd8 <f_read>
 8019638:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
        F_READ_SAFE(File, &g, sizeof(g));
 801963c:	ab0a      	add	r3, sp, #40	; 0x28
 801963e:	f10d 0119 	add.w	r1, sp, #25
        F_READ_SAFE(File, &b, sizeof(b));
 8019642:	f1bc 0f01 	cmp.w	ip, #1
        F_READ_SAFE(File, &g, sizeof(g));
 8019646:	4638      	mov	r0, r7
 8019648:	4662      	mov	r2, ip
        F_READ_SAFE(File, &b, sizeof(b));
 801964a:	d0be      	beq.n	80195ca <STM23Fs_ReadImageBMP+0x96>
        F_READ_SAFE(File, &ignore, sizeof(ignore));
 801964c:	2606      	movs	r6, #6

  f_close(&File);
 801964e:	486d      	ldr	r0, [pc, #436]	; (8019804 <STM23Fs_ReadImageBMP+0x2d0>)
 8019650:	f7fe f88c 	bl	801776c <f_close>

  return err;
}
 8019654:	4630      	mov	r0, r6
 8019656:	b011      	add	sp, #68	; 0x44
 8019658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return STM32FS_ERROR_FILE_NOT_SUPPORTED;
 801965c:	2605      	movs	r6, #5
 801965e:	e7f6      	b.n	801964e <STM23Fs_ReadImageBMP+0x11a>
    return STM32FS_ERROR_FOPEN_FAIL;
 8019660:	2603      	movs	r6, #3
}
 8019662:	4630      	mov	r0, r6
 8019664:	b011      	add	sp, #68	; 0x44
 8019666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((rs->bmp_h < 0) && (rs->bmp_w >= 0) && (width == rs->bmp_row_bytes)) {
 801966a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801966c:	2b00      	cmp	r3, #0
 801966e:	db72      	blt.n	8019756 <STM23Fs_ReadImageBMP+0x222>
      for (int i = 0; i < height; i++) {
 8019670:	2a00      	cmp	r2, #0
 8019672:	d0ec      	beq.n	801964e <STM23Fs_ReadImageBMP+0x11a>
 8019674:	3a01      	subs	r2, #1
 8019676:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019678:	f04f 0900 	mov.w	r9, #0
          F_READ_SAFE(File, &pixel, sizeof(pixel));
 801967c:	f8df 8184 	ldr.w	r8, [pc, #388]	; 8019804 <STM23Fs_ReadImageBMP+0x2d0>
 8019680:	9204      	str	r2, [sp, #16]
        for (int j = 0; j < rs->bmp_row_bytes; j++) {
 8019682:	2b00      	cmp	r3, #0
 8019684:	f000 80ae 	beq.w	80197e4 <STM23Fs_ReadImageBMP+0x2b0>
 8019688:	9b04      	ldr	r3, [sp, #16]
 801968a:	2400      	movs	r4, #0
 801968c:	f10d 071a 	add.w	r7, sp, #26
 8019690:	eba3 0a09 	sub.w	sl, r3, r9
 8019694:	e015      	b.n	80196c2 <STM23Fs_ReadImageBMP+0x18e>
          if (j < width) {
 8019696:	42a5      	cmp	r5, r4
 8019698:	d90f      	bls.n	80196ba <STM23Fs_ReadImageBMP+0x186>
            int x = (rs->bmp_w < 0) ? (width - j - 1) : j; // horizontal flip (BMP file perspective)
 801969a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801969c:	4622      	mov	r2, r4
 801969e:	2b00      	cmp	r3, #0
 80196a0:	da01      	bge.n	80196a6 <STM23Fs_ReadImageBMP+0x172>
 80196a2:	1e6a      	subs	r2, r5, #1
 80196a4:	1b12      	subs	r2, r2, r4
            int y = (rs->bmp_h < 0) ? i : (height - i - 1); // vertical flip (BMP file perspective)
 80196a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            IM_SET_GS_PIXEL(pixels, x, y, width, pixel);
 80196a8:	f89d 101a 	ldrb.w	r1, [sp, #26]
 80196ac:	2b00      	cmp	r3, #0
 80196ae:	bfb4      	ite	lt
 80196b0:	464b      	movlt	r3, r9
 80196b2:	4653      	movge	r3, sl
 80196b4:	fb05 b303 	mla	r3, r5, r3, fp
 80196b8:	5499      	strb	r1, [r3, r2]
        for (int j = 0; j < rs->bmp_row_bytes; j++) {
 80196ba:	3401      	adds	r4, #1
 80196bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80196be:	429c      	cmp	r4, r3
 80196c0:	d209      	bcs.n	80196d6 <STM23Fs_ReadImageBMP+0x1a2>
          F_READ_SAFE(File, &pixel, sizeof(pixel));
 80196c2:	ab0a      	add	r3, sp, #40	; 0x28
 80196c4:	2201      	movs	r2, #1
 80196c6:	4639      	mov	r1, r7
 80196c8:	4640      	mov	r0, r8
 80196ca:	f7fd fc85 	bl	8016fd8 <f_read>
 80196ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80196d0:	2b01      	cmp	r3, #1
 80196d2:	d0e0      	beq.n	8019696 <STM23Fs_ReadImageBMP+0x162>
 80196d4:	e7ba      	b.n	801964c <STM23Fs_ReadImageBMP+0x118>
 80196d6:	9a03      	ldr	r2, [sp, #12]
      for (int i = 0; i < height; i++) {
 80196d8:	f109 0901 	add.w	r9, r9, #1
 80196dc:	4591      	cmp	r9, r2
 80196de:	d1d0      	bne.n	8019682 <STM23Fs_ReadImageBMP+0x14e>
 80196e0:	e7b5      	b.n	801964e <STM23Fs_ReadImageBMP+0x11a>
    if ((rs->bmp_h < 0) && (rs->bmp_w >= 0) &&
 80196e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80196e4:	2b00      	cmp	r3, #0
 80196e6:	db4b      	blt.n	8019780 <STM23Fs_ReadImageBMP+0x24c>
      for (int i = 0; i < height; i++) {
 80196e8:	9b03      	ldr	r3, [sp, #12]
 80196ea:	2b00      	cmp	r3, #0
 80196ec:	d0af      	beq.n	801964e <STM23Fs_ReadImageBMP+0x11a>
 80196ee:	f103 3aff 	add.w	sl, r3, #4294967295
 80196f2:	2300      	movs	r3, #0
 80196f4:	1e6a      	subs	r2, r5, #1
 80196f6:	9605      	str	r6, [sp, #20]
          F_READ_SAFE(File, &pixel, sizeof(pixel));
 80196f8:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8019804 <STM23Fs_ReadImageBMP+0x2d0>
 80196fc:	fb05 fa0a 	mul.w	sl, r5, sl
 8019700:	461e      	mov	r6, r3
 8019702:	9204      	str	r2, [sp, #16]
        for (int j = 0, jj = rs->bmp_row_bytes / 2; j < jj; j++) {
 8019704:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8019706:	087f      	lsrs	r7, r7, #1
 8019708:	d01d      	beq.n	8019746 <STM23Fs_ReadImageBMP+0x212>
 801970a:	2400      	movs	r4, #0
 801970c:	f10d 081a 	add.w	r8, sp, #26
 8019710:	e00e      	b.n	8019730 <STM23Fs_ReadImageBMP+0x1fc>
          if (j < width) {
 8019712:	42a5      	cmp	r5, r4
 8019714:	d909      	bls.n	801972a <STM23Fs_ReadImageBMP+0x1f6>
            int x = (rs->bmp_w < 0) ? (width - j - 1) : j; // vertical flip
 8019716:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019718:	2a00      	cmp	r2, #0
 801971a:	da01      	bge.n	8019720 <STM23Fs_ReadImageBMP+0x1ec>
 801971c:	9b04      	ldr	r3, [sp, #16]
 801971e:	1b1b      	subs	r3, r3, r4
            IM_SET_RGB565_PIXEL(pixels, x, y, width, pixel);
 8019720:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8019724:	4453      	add	r3, sl
 8019726:	f82b 2013 	strh.w	r2, [fp, r3, lsl #1]
        for (int j = 0, jj = rs->bmp_row_bytes / 2; j < jj; j++) {
 801972a:	3401      	adds	r4, #1
 801972c:	42a7      	cmp	r7, r4
 801972e:	d00a      	beq.n	8019746 <STM23Fs_ReadImageBMP+0x212>
          F_READ_SAFE(File, &pixel, sizeof(pixel));
 8019730:	ab0a      	add	r3, sp, #40	; 0x28
 8019732:	2202      	movs	r2, #2
 8019734:	4641      	mov	r1, r8
 8019736:	4648      	mov	r0, r9
 8019738:	f7fd fc4e 	bl	8016fd8 <f_read>
 801973c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
          if (j < width) {
 801973e:	4623      	mov	r3, r4
          F_READ_SAFE(File, &pixel, sizeof(pixel));
 8019740:	2a02      	cmp	r2, #2
 8019742:	d0e6      	beq.n	8019712 <STM23Fs_ReadImageBMP+0x1de>
 8019744:	e782      	b.n	801964c <STM23Fs_ReadImageBMP+0x118>
      for (int i = 0; i < height; i++) {
 8019746:	3601      	adds	r6, #1
 8019748:	9b03      	ldr	r3, [sp, #12]
 801974a:	ebaa 0a05 	sub.w	sl, sl, r5
 801974e:	429e      	cmp	r6, r3
 8019750:	d1d8      	bne.n	8019704 <STM23Fs_ReadImageBMP+0x1d0>
 8019752:	9e05      	ldr	r6, [sp, #20]
 8019754:	e77b      	b.n	801964e <STM23Fs_ReadImageBMP+0x11a>
    if ((rs->bmp_h < 0) && (rs->bmp_w >= 0) && (width == rs->bmp_row_bytes)) {
 8019756:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019758:	2b00      	cmp	r3, #0
 801975a:	db89      	blt.n	8019670 <STM23Fs_ReadImageBMP+0x13c>
 801975c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801975e:	429d      	cmp	r5, r3
 8019760:	d186      	bne.n	8019670 <STM23Fs_ReadImageBMP+0x13c>
 8019762:	4613      	mov	r3, r2
      F_READ_SAFE(File, pixels, height * width);
 8019764:	4659      	mov	r1, fp
 8019766:	4827      	ldr	r0, [pc, #156]	; (8019804 <STM23Fs_ReadImageBMP+0x2d0>)
 8019768:	fb03 f305 	mul.w	r3, r3, r5
 801976c:	461d      	mov	r5, r3
 801976e:	ab0a      	add	r3, sp, #40	; 0x28
 8019770:	462a      	mov	r2, r5
 8019772:	f7fd fc31 	bl	8016fd8 <f_read>
 8019776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019778:	429d      	cmp	r5, r3
 801977a:	bf18      	it	ne
 801977c:	2606      	movne	r6, #6
 801977e:	e766      	b.n	801964e <STM23Fs_ReadImageBMP+0x11a>
    if ((rs->bmp_h < 0) && (rs->bmp_w >= 0) &&
 8019780:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019782:	2b00      	cmp	r3, #0
 8019784:	dbb0      	blt.n	80196e8 <STM23Fs_ReadImageBMP+0x1b4>
 8019786:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019788:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
 801978c:	d1ac      	bne.n	80196e8 <STM23Fs_ReadImageBMP+0x1b4>
 801978e:	4614      	mov	r4, r2
      F_READ_SAFE(File, pixels, 2 * width * height);
 8019790:	ab0a      	add	r3, sp, #40	; 0x28
 8019792:	4659      	mov	r1, fp
 8019794:	481b      	ldr	r0, [pc, #108]	; (8019804 <STM23Fs_ReadImageBMP+0x2d0>)
 8019796:	fb04 f405 	mul.w	r4, r4, r5
 801979a:	0064      	lsls	r4, r4, #1
 801979c:	4622      	mov	r2, r4
 801979e:	f7fd fc1b 	bl	8016fd8 <f_read>
 80197a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80197a4:	429c      	cmp	r4, r3
 80197a6:	bf18      	it	ne
 80197a8:	2606      	movne	r6, #6
 80197aa:	e750      	b.n	801964e <STM23Fs_ReadImageBMP+0x11a>
 80197ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
      for (int j = 0, jj = rs->bmp_row_bytes % 3; j < jj; j++) {
 80197ae:	4a16      	ldr	r2, [pc, #88]	; (8019808 <STM23Fs_ReadImageBMP+0x2d4>)
 80197b0:	fba2 2803 	umull	r2, r8, r2, r3
 80197b4:	ea4f 0858 	mov.w	r8, r8, lsr #1
 80197b8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80197bc:	ebb3 0808 	subs.w	r8, r3, r8
 80197c0:	d017      	beq.n	80197f2 <STM23Fs_ReadImageBMP+0x2be>
 80197c2:	2400      	movs	r4, #0
 80197c4:	f10d 091a 	add.w	r9, sp, #26
 80197c8:	e001      	b.n	80197ce <STM23Fs_ReadImageBMP+0x29a>
 80197ca:	45a0      	cmp	r8, r4
 80197cc:	d011      	beq.n	80197f2 <STM23Fs_ReadImageBMP+0x2be>
        F_READ_SAFE(File, &ignore, sizeof(ignore));
 80197ce:	ab0a      	add	r3, sp, #40	; 0x28
 80197d0:	2201      	movs	r2, #1
 80197d2:	4649      	mov	r1, r9
 80197d4:	4638      	mov	r0, r7
 80197d6:	f7fd fbff 	bl	8016fd8 <f_read>
 80197da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
      for (int j = 0, jj = rs->bmp_row_bytes % 3; j < jj; j++) {
 80197dc:	3401      	adds	r4, #1
        F_READ_SAFE(File, &ignore, sizeof(ignore));
 80197de:	2b01      	cmp	r3, #1
 80197e0:	d0f3      	beq.n	80197ca <STM23Fs_ReadImageBMP+0x296>
 80197e2:	e733      	b.n	801964c <STM23Fs_ReadImageBMP+0x118>
      for (int i = 0; i < height; i++) {
 80197e4:	f109 0901 	add.w	r9, r9, #1
 80197e8:	9a03      	ldr	r2, [sp, #12]
 80197ea:	4591      	cmp	r9, r2
 80197ec:	f47f af74 	bne.w	80196d8 <STM23Fs_ReadImageBMP+0x1a4>
 80197f0:	e72d      	b.n	801964e <STM23Fs_ReadImageBMP+0x11a>
    for (int i = 0; i < height; i++) {
 80197f2:	f10a 0a01 	add.w	sl, sl, #1
 80197f6:	9b03      	ldr	r3, [sp, #12]
 80197f8:	459a      	cmp	sl, r3
 80197fa:	f47f aed7 	bne.w	80195ac <STM23Fs_ReadImageBMP+0x78>
 80197fe:	9e04      	ldr	r6, [sp, #16]
 8019800:	e725      	b.n	801964e <STM23Fs_ReadImageBMP+0x11a>
 8019802:	bf00      	nop
 8019804:	24003e70 	.word	0x24003e70
 8019808:	aaaaaaab 	.word	0xaaaaaaab

0801980c <Image_CheckResizeMemoryLayout>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/

/* Functions Definition ------------------------------------------------------*/
uint32_t Image_CheckResizeMemoryLayout(Image_TypeDef *srcImage, Image_TypeDef *dstImage)
{
 801980c:	b430      	push	{r4, r5}
  uint32_t src_size=srcImage->width*srcImage->height*IMG_BYTES_PER_PX(srcImage->format);
 801980e:	7b02      	ldrb	r2, [r0, #12]
 8019810:	e9d0 4300 	ldrd	r4, r3, [r0]
 8019814:	fb03 f304 	mul.w	r3, r3, r4
 8019818:	b13a      	cbz	r2, 801982a <Image_CheckResizeMemoryLayout+0x1e>
 801981a:	2a01      	cmp	r2, #1
 801981c:	d028      	beq.n	8019870 <Image_CheckResizeMemoryLayout+0x64>
 801981e:	2a02      	cmp	r2, #2
 8019820:	d030      	beq.n	8019884 <Image_CheckResizeMemoryLayout+0x78>
 8019822:	2a03      	cmp	r2, #3
 8019824:	bf0c      	ite	eq
 8019826:	009b      	lsleq	r3, r3, #2
 8019828:	2300      	movne	r3, #0
 801982a:	688c      	ldr	r4, [r1, #8]
  uint32_t dst_size=dstImage->width*dstImage->height*IMG_BYTES_PER_PX(dstImage->format);
 801982c:	e9d1 5200 	ldrd	r5, r2, [r1]
 8019830:	7b09      	ldrb	r1, [r1, #12]
 8019832:	fb02 f205 	mul.w	r2, r2, r5
 8019836:	1e65      	subs	r5, r4, #1
 8019838:	b131      	cbz	r1, 8019848 <Image_CheckResizeMemoryLayout+0x3c>
 801983a:	2901      	cmp	r1, #1
 801983c:	d020      	beq.n	8019880 <Image_CheckResizeMemoryLayout+0x74>
 801983e:	2902      	cmp	r1, #2
 8019840:	d01b      	beq.n	801987a <Image_CheckResizeMemoryLayout+0x6e>
 8019842:	2903      	cmp	r1, #3
 8019844:	d103      	bne.n	801984e <Image_CheckResizeMemoryLayout+0x42>
 8019846:	0092      	lsls	r2, r2, #2
  uint32_t src_start_address=(uint32_t)srcImage->pData;
  uint32_t dst_start_address=(uint32_t)dstImage->pData;
  uint32_t src_end_address=src_start_address + src_size -1;
  uint32_t dst_end_address=dst_start_address + dst_size -1;
  
  if(src_size < dst_size)
 8019848:	4293      	cmp	r3, r2
 801984a:	d310      	bcc.n	801986e <Image_CheckResizeMemoryLayout+0x62>
  uint32_t dst_end_address=dst_start_address + dst_size -1;
 801984c:	4415      	add	r5, r2
 801984e:	6881      	ldr	r1, [r0, #8]
 8019850:	1e4a      	subs	r2, r1, #1
  {
    while(1);
  }
  else
  {
    if((src_start_address >= dst_start_address) || (src_end_address <= dst_start_address))
 8019852:	42a1      	cmp	r1, r4
 8019854:	4413      	add	r3, r2
 8019856:	d20e      	bcs.n	8019876 <Image_CheckResizeMemoryLayout+0x6a>
 8019858:	429c      	cmp	r4, r3
 801985a:	bf34      	ite	cc
 801985c:	2000      	movcc	r0, #0
 801985e:	2001      	movcs	r0, #1
 8019860:	b948      	cbnz	r0, 8019876 <Image_CheckResizeMemoryLayout+0x6a>
    {
      return 1;
    }
    else if((src_end_address > dst_start_address) && (dst_end_address >= src_end_address))
 8019862:	429c      	cmp	r4, r3
 8019864:	d206      	bcs.n	8019874 <Image_CheckResizeMemoryLayout+0x68>
 8019866:	429d      	cmp	r5, r3
 8019868:	d304      	bcc.n	8019874 <Image_CheckResizeMemoryLayout+0x68>
    else
    {
      while(1);
    }
  }
}
 801986a:	bc30      	pop	{r4, r5}
 801986c:	4770      	bx	lr
 801986e:	e7fe      	b.n	801986e <Image_CheckResizeMemoryLayout+0x62>
 8019870:	005b      	lsls	r3, r3, #1
 8019872:	e7da      	b.n	801982a <Image_CheckResizeMemoryLayout+0x1e>
 8019874:	e7fe      	b.n	8019874 <Image_CheckResizeMemoryLayout+0x68>
      return 1;
 8019876:	2001      	movs	r0, #1
 8019878:	e7f7      	b.n	801986a <Image_CheckResizeMemoryLayout+0x5e>
 801987a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801987e:	e7e3      	b.n	8019848 <Image_CheckResizeMemoryLayout+0x3c>
 8019880:	0052      	lsls	r2, r2, #1
 8019882:	e7e1      	b.n	8019848 <Image_CheckResizeMemoryLayout+0x3c>
 8019884:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019888:	e7cf      	b.n	801982a <Image_CheckResizeMemoryLayout+0x1e>
 801988a:	bf00      	nop

0801988c <ImageResize_NearestNeighbor>:
* @param  Top2Bottom   Value of 1/0 indicates that the rescales performs from the top/bottom to the bottom/top of the buffers
* @retval void         None
*/
void ImageResize_NearestNeighbor(Image_TypeDef *srcImage, Image_TypeDef *dstImage, Roi_TypeDef *roi)
{
  Resize_Frame(srcImage, dstImage, roi);
 801988c:	f7fe beb2 	b.w	80185f4 <Resize_Frame>

08019890 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 8019890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019894:	4603      	mov	r3, r0
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 8019896:	4c15      	ldr	r4, [pc, #84]	; (80198ec <UTIL_LCD_SetFuncDriver+0x5c>)
 8019898:	6807      	ldr	r7, [r0, #0]
  FuncDriver.GetXSize       = pDrv->GetXSize;
  FuncDriver.GetYSize       = pDrv->GetYSize;
  FuncDriver.SetLayer       = pDrv->SetLayer;
  FuncDriver.GetFormat      = pDrv->GetFormat;

  DrawProp->LcdLayer = 0;
 801989a:	2500      	movs	r5, #0
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 801989c:	6842      	ldr	r2, [r0, #4]
  DrawProp->LcdLayer = 0;
 801989e:	4e14      	ldr	r6, [pc, #80]	; (80198f0 <UTIL_LCD_SetFuncDriver+0x60>)
  DrawProp->LcdDevice = 0;
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 80198a0:	4628      	mov	r0, r5
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 80198a2:	e9c4 7200 	strd	r7, r2, [r4]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 80198a6:	e9d3 7202 	ldrd	r7, r2, [r3, #8]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 80198aa:	f106 0114 	add.w	r1, r6, #20
  DrawProp->LcdLayer = 0;
 80198ae:	60f5      	str	r5, [r6, #12]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 80198b0:	e9c4 7202 	strd	r7, r2, [r4, #8]
  FuncDriver.FillRect       = pDrv->FillRect;
 80198b4:	691a      	ldr	r2, [r3, #16]
  DrawProp->LcdDevice = 0;
 80198b6:	6135      	str	r5, [r6, #16]
  FuncDriver.FillRect       = pDrv->FillRect;
 80198b8:	6122      	str	r2, [r4, #16]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 80198ba:	e9d3 7205 	ldrd	r7, r2, [r3, #20]
 80198be:	e9c4 7205 	strd	r7, r2, [r4, #20]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 80198c2:	e9d3 7208 	ldrd	r7, r2, [r3, #32]
 80198c6:	e9c4 7208 	strd	r7, r2, [r4, #32]
  FuncDriver.GetFormat      = pDrv->GetFormat;
 80198ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  FuncDriver.GetXSize       = pDrv->GetXSize;
 80198cc:	69db      	ldr	r3, [r3, #28]
  FuncDriver.GetFormat      = pDrv->GetFormat;
 80198ce:	62a2      	str	r2, [r4, #40]	; 0x28
  FuncDriver.GetXSize       = pDrv->GetXSize;
 80198d0:	61e3      	str	r3, [r4, #28]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 80198d2:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 80198d4:	6a23      	ldr	r3, [r4, #32]
 80198d6:	f106 0118 	add.w	r1, r6, #24
 80198da:	4628      	mov	r0, r5
 80198dc:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 80198de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80198e0:	f106 011c 	add.w	r1, r6, #28
 80198e4:	4628      	mov	r0, r5
}
 80198e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 80198ea:	4718      	bx	r3
 80198ec:	240041fc 	.word	0x240041fc
 80198f0:	240041bc 	.word	0x240041bc

080198f4 <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
 80198f4:	b538      	push	{r3, r4, r5, lr}
  if(FuncDriver.SetLayer != NULL)
 80198f6:	4b05      	ldr	r3, [pc, #20]	; (801990c <UTIL_LCD_SetLayer+0x18>)
 80198f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80198fa:	b133      	cbz	r3, 801990a <UTIL_LCD_SetLayer+0x16>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
 80198fc:	4d04      	ldr	r5, [pc, #16]	; (8019910 <UTIL_LCD_SetLayer+0x1c>)
 80198fe:	4604      	mov	r4, r0
 8019900:	4601      	mov	r1, r0
 8019902:	6928      	ldr	r0, [r5, #16]
 8019904:	4798      	blx	r3
 8019906:	b900      	cbnz	r0, 801990a <UTIL_LCD_SetLayer+0x16>
    {
      DrawProp->LcdLayer = Layer;
 8019908:	60ec      	str	r4, [r5, #12]
    }
  }
}
 801990a:	bd38      	pop	{r3, r4, r5, pc}
 801990c:	240041fc 	.word	0x240041fc
 8019910:	240041bc 	.word	0x240041bc

08019914 <UTIL_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 8019914:	4a02      	ldr	r2, [pc, #8]	; (8019920 <UTIL_LCD_SetTextColor+0xc>)
 8019916:	68d3      	ldr	r3, [r2, #12]
 8019918:	015b      	lsls	r3, r3, #5
 801991a:	50d0      	str	r0, [r2, r3]
}
 801991c:	4770      	bx	lr
 801991e:	bf00      	nop
 8019920:	240041bc 	.word	0x240041bc

08019924 <UTIL_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 8019924:	4b02      	ldr	r3, [pc, #8]	; (8019930 <UTIL_LCD_SetBackColor+0xc>)
 8019926:	68da      	ldr	r2, [r3, #12]
 8019928:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801992c:	6058      	str	r0, [r3, #4]
}
 801992e:	4770      	bx	lr
 8019930:	240041bc 	.word	0x240041bc

08019934 <UTIL_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 8019934:	4b02      	ldr	r3, [pc, #8]	; (8019940 <UTIL_LCD_SetFont+0xc>)
 8019936:	68da      	ldr	r2, [r3, #12]
 8019938:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801993c:	6098      	str	r0, [r3, #8]
}
 801993e:	4770      	bx	lr
 8019940:	240041bc 	.word	0x240041bc

08019944 <UTIL_LCD_GetFont>:
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *UTIL_LCD_GetFont(void)
{
  return DrawProp[DrawProp->LcdLayer].pFont;
 8019944:	4b02      	ldr	r3, [pc, #8]	; (8019950 <UTIL_LCD_GetFont+0xc>)
 8019946:	68da      	ldr	r2, [r3, #12]
 8019948:	eb03 1342 	add.w	r3, r3, r2, lsl #5
}
 801994c:	6898      	ldr	r0, [r3, #8]
 801994e:	4770      	bx	lr
 8019950:	240041bc 	.word	0x240041bc

08019954 <UTIL_LCD_Clear>:
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 8019954:	4a11      	ldr	r2, [pc, #68]	; (801999c <UTIL_LCD_Clear+0x48>)
{
 8019956:	4601      	mov	r1, r0
 8019958:	f102 0010 	add.w	r0, r2, #16
 801995c:	b570      	push	{r4, r5, r6, lr}
 801995e:	c839      	ldmia	r0, {r0, r3, r4, r5}
 8019960:	4e0f      	ldr	r6, [pc, #60]	; (80199a0 <UTIL_LCD_Clear+0x4c>)
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8019962:	2d02      	cmp	r5, #2
{
 8019964:	b082      	sub	sp, #8
 8019966:	6936      	ldr	r6, [r6, #16]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8019968:	d006      	beq.n	8019978 <UTIL_LCD_Clear+0x24>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 801996a:	2200      	movs	r2, #0
 801996c:	e9cd 4100 	strd	r4, r1, [sp]
 8019970:	4611      	mov	r1, r2
 8019972:	47b0      	blx	r6
}
 8019974:	b002      	add	sp, #8
 8019976:	bd70      	pop	{r4, r5, r6, pc}
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 8019978:	094d      	lsrs	r5, r1, #5
 801997a:	9400      	str	r4, [sp, #0]
 801997c:	0a0a      	lsrs	r2, r1, #8
 801997e:	f3c1 04c4 	ubfx	r4, r1, #3, #5
 8019982:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8019986:	f402 4178 	and.w	r1, r2, #63488	; 0xf800
 801998a:	2200      	movs	r2, #0
 801998c:	430d      	orrs	r5, r1
 801998e:	4611      	mov	r1, r2
 8019990:	432c      	orrs	r4, r5
 8019992:	9401      	str	r4, [sp, #4]
 8019994:	47b0      	blx	r6
}
 8019996:	b002      	add	sp, #8
 8019998:	bd70      	pop	{r4, r5, r6, pc}
 801999a:	bf00      	nop
 801999c:	240041bc 	.word	0x240041bc
 80199a0:	240041fc 	.word	0x240041fc

080199a4 <UTIL_LCD_DisplayChar>:
{
 80199a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 80199a8:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8019adc <UTIL_LCD_DisplayChar+0x138>
{
 80199ac:	b0ad      	sub	sp, #180	; 0xb4
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 80199ae:	3a20      	subs	r2, #32
{
 80199b0:	460e      	mov	r6, r1
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 80199b2:	f8d9 700c 	ldr.w	r7, [r9, #12]
{
 80199b6:	9004      	str	r0, [sp, #16]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 80199b8:	017f      	lsls	r7, r7, #5
 80199ba:	eb09 0307 	add.w	r3, r9, r7
 80199be:	689b      	ldr	r3, [r3, #8]
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 80199c0:	f8b3 a004 	ldrh.w	sl, [r3, #4]
 80199c4:	88d9      	ldrh	r1, [r3, #6]
 80199c6:	f10a 0b07 	add.w	fp, sl, #7
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 80199ca:	681d      	ldr	r5, [r3, #0]
 80199cc:	fb01 f202 	mul.w	r2, r1, r2
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 80199d0:	ea4f 03eb 	mov.w	r3, fp, asr #3
  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
 80199d4:	f02b 0007 	bic.w	r0, fp, #7
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 80199d8:	fb03 f202 	mul.w	r2, r3, r2
  offset =  8 *((width + 7)/8) -  width ;
 80199dc:	eba0 030a 	sub.w	r3, r0, sl
 80199e0:	9306      	str	r3, [sp, #24]

  for(i = 0; i < height; i++)
 80199e2:	2900      	cmp	r1, #0
 80199e4:	d074      	beq.n	8019ad0 <UTIL_LCD_DisplayChar+0x12c>
 80199e6:	1873      	adds	r3, r6, r1
 80199e8:	4415      	add	r5, r2
 80199ea:	f8cd a00c 	str.w	sl, [sp, #12]
 80199ee:	f10a 32ff 	add.w	r2, sl, #4294967295
 80199f2:	9305      	str	r3, [sp, #20]
 80199f4:	ab14      	add	r3, sp, #80	; 0x50
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 80199f6:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 80199fa:	2401      	movs	r4, #1
 80199fc:	eb03 088a 	add.w	r8, r3, sl, lsl #2
 8019a00:	ab08      	add	r3, sp, #32
 8019a02:	9207      	str	r2, [sp, #28]
 8019a04:	eb03 034a 	add.w	r3, r3, sl, lsl #1
 8019a08:	469a      	mov	sl, r3

    switch(((width + 7)/8))
 8019a0a:	f1bb 0f01 	cmp.w	fp, #1
 8019a0e:	7828      	ldrb	r0, [r5, #0]
 8019a10:	d005      	beq.n	8019a1e <UTIL_LCD_DisplayChar+0x7a>
 8019a12:	f1bb 0f02 	cmp.w	fp, #2
 8019a16:	d154      	bne.n	8019ac2 <UTIL_LCD_DisplayChar+0x11e>
    case 1:
      line =  pchar[0];
      break;

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8019a18:	8828      	ldrh	r0, [r5, #0]
 8019a1a:	ba40      	rev16	r0, r0
 8019a1c:	b280      	uxth	r0, r0
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
      break;
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8019a1e:	444f      	add	r7, r9
 8019a20:	69fb      	ldr	r3, [r7, #28]
 8019a22:	2b02      	cmp	r3, #2
    {
      for (j = 0; j < width; j++)
 8019a24:	9b03      	ldr	r3, [sp, #12]
    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8019a26:	d02c      	beq.n	8019a82 <UTIL_LCD_DisplayChar+0xde>
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
    }
    else
    {
      for (j = 0; j < width; j++)
 8019a28:	b183      	cbz	r3, 8019a4c <UTIL_LCD_DisplayChar+0xa8>
      {
        if(line & (1 << (width- j + offset- 1)))
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
 8019a2a:	f8d7 c000 	ldr.w	ip, [r7]
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
 8019a2e:	687f      	ldr	r7, [r7, #4]
 8019a30:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019a34:	189a      	adds	r2, r3, r2
 8019a36:	ab14      	add	r3, sp, #80	; 0x50
        if(line & (1 << (width- j + offset- 1)))
 8019a38:	fa04 f102 	lsl.w	r1, r4, r2
 8019a3c:	4201      	tst	r1, r0
 8019a3e:	d119      	bne.n	8019a74 <UTIL_LCD_DisplayChar+0xd0>
 8019a40:	f843 7b04 	str.w	r7, [r3], #4
      for (j = 0; j < width; j++)
 8019a44:	4598      	cmp	r8, r3
 8019a46:	f102 32ff 	add.w	r2, r2, #4294967295
 8019a4a:	d1f5      	bne.n	8019a38 <UTIL_LCD_DisplayChar+0x94>
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 8019a4c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8019a50:	ab14      	add	r3, sp, #80	; 0x50
 8019a52:	9903      	ldr	r1, [sp, #12]
 8019a54:	4632      	mov	r2, r6
 8019a56:	9401      	str	r4, [sp, #4]
 8019a58:	3601      	adds	r6, #1
 8019a5a:	9100      	str	r1, [sp, #0]
 8019a5c:	445d      	add	r5, fp
 8019a5e:	491e      	ldr	r1, [pc, #120]	; (8019ad8 <UTIL_LCD_DisplayChar+0x134>)
 8019a60:	684f      	ldr	r7, [r1, #4]
 8019a62:	9904      	ldr	r1, [sp, #16]
 8019a64:	47b8      	blx	r7
  for(i = 0; i < height; i++)
 8019a66:	9b05      	ldr	r3, [sp, #20]
 8019a68:	429e      	cmp	r6, r3
 8019a6a:	d031      	beq.n	8019ad0 <UTIL_LCD_DisplayChar+0x12c>
 8019a6c:	f8d9 700c 	ldr.w	r7, [r9, #12]
 8019a70:	017f      	lsls	r7, r7, #5
 8019a72:	e7ca      	b.n	8019a0a <UTIL_LCD_DisplayChar+0x66>
 8019a74:	f843 cb04 	str.w	ip, [r3], #4
      for (j = 0; j < width; j++)
 8019a78:	4543      	cmp	r3, r8
 8019a7a:	f102 32ff 	add.w	r2, r2, #4294967295
 8019a7e:	d1db      	bne.n	8019a38 <UTIL_LCD_DisplayChar+0x94>
 8019a80:	e7e4      	b.n	8019a4c <UTIL_LCD_DisplayChar+0xa8>
      for (j = 0; j < width; j++)
 8019a82:	b1d3      	cbz	r3, 8019aba <UTIL_LCD_DisplayChar+0x116>
 8019a84:	f10d 0c20 	add.w	ip, sp, #32
 8019a88:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019a8c:	eb03 0e02 	add.w	lr, r3, r2
        if(line & (1 << (width- j + offset- 1)))
 8019a90:	fa04 f30e 	lsl.w	r3, r4, lr
 8019a94:	f10e 3eff 	add.w	lr, lr, #4294967295
 8019a98:	4203      	tst	r3, r0
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
 8019a9a:	bf14      	ite	ne
 8019a9c:	683a      	ldrne	r2, [r7, #0]
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 8019a9e:	687a      	ldreq	r2, [r7, #4]
 8019aa0:	0cd1      	lsrs	r1, r2, #19
 8019aa2:	f3c2 03c4 	ubfx	r3, r2, #3, #5
 8019aa6:	0952      	lsrs	r2, r2, #5
 8019aa8:	ea43 23c1 	orr.w	r3, r3, r1, lsl #11
 8019aac:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8019ab0:	4313      	orrs	r3, r2
 8019ab2:	f82c 3b02 	strh.w	r3, [ip], #2
      for (j = 0; j < width; j++)
 8019ab6:	45d4      	cmp	ip, sl
 8019ab8:	d1ea      	bne.n	8019a90 <UTIL_LCD_DisplayChar+0xec>
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 8019aba:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8019abe:	ab08      	add	r3, sp, #32
 8019ac0:	e7c7      	b.n	8019a52 <UTIL_LCD_DisplayChar+0xae>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8019ac2:	0400      	lsls	r0, r0, #16
 8019ac4:	786a      	ldrb	r2, [r5, #1]
 8019ac6:	78ab      	ldrb	r3, [r5, #2]
 8019ac8:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8019acc:	4318      	orrs	r0, r3
 8019ace:	e7a6      	b.n	8019a1e <UTIL_LCD_DisplayChar+0x7a>
}
 8019ad0:	b02d      	add	sp, #180	; 0xb4
 8019ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ad6:	bf00      	nop
 8019ad8:	240041fc 	.word	0x240041fc
 8019adc:	240041bc 	.word	0x240041bc

08019ae0 <UTIL_LCD_DisplayStringAt>:
{
 8019ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ae4:	4615      	mov	r5, r2
  while (*ptr++) size ++ ;
 8019ae6:	7812      	ldrb	r2, [r2, #0]
{
 8019ae8:	4604      	mov	r4, r0
 8019aea:	460f      	mov	r7, r1
  while (*ptr++) size ++ ;
 8019aec:	2a00      	cmp	r2, #0
 8019aee:	d045      	beq.n	8019b7c <UTIL_LCD_DisplayStringAt+0x9c>
 8019af0:	1c69      	adds	r1, r5, #1
 8019af2:	eba1 0c05 	sub.w	ip, r1, r5
 8019af6:	f811 0b01 	ldrb.w	r0, [r1], #1
 8019afa:	2800      	cmp	r0, #0
 8019afc:	d1f9      	bne.n	8019af2 <UTIL_LCD_DisplayStringAt+0x12>
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 8019afe:	4e20      	ldr	r6, [pc, #128]	; (8019b80 <UTIL_LCD_DisplayStringAt+0xa0>)
  switch (Mode)
 8019b00:	2b01      	cmp	r3, #1
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 8019b02:	68f0      	ldr	r0, [r6, #12]
 8019b04:	6971      	ldr	r1, [r6, #20]
 8019b06:	eb06 1040 	add.w	r0, r6, r0, lsl #5
 8019b0a:	6880      	ldr	r0, [r0, #8]
 8019b0c:	f8b0 e004 	ldrh.w	lr, [r0, #4]
 8019b10:	fbb1 f0fe 	udiv	r0, r1, lr
  switch (Mode)
 8019b14:	d02b      	beq.n	8019b6e <UTIL_LCD_DisplayStringAt+0x8e>
 8019b16:	2b02      	cmp	r3, #2
 8019b18:	d023      	beq.n	8019b62 <UTIL_LCD_DisplayStringAt+0x82>
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8019b1a:	b289      	uxth	r1, r1
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8019b1c:	1e60      	subs	r0, r4, #1
 8019b1e:	f647 73fe 	movw	r3, #32766	; 0x7ffe
    refcolumn = 1;
 8019b22:	4298      	cmp	r0, r3
 8019b24:	bf88      	it	hi
 8019b26:	2401      	movhi	r4, #1
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8019b28:	458e      	cmp	lr, r1
 8019b2a:	d818      	bhi.n	8019b5e <UTIL_LCD_DisplayStringAt+0x7e>
 8019b2c:	b1ba      	cbz	r2, 8019b5e <UTIL_LCD_DisplayStringAt+0x7e>
 8019b2e:	f04f 0800 	mov.w	r8, #0
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8019b32:	4639      	mov	r1, r7
 8019b34:	4620      	mov	r0, r4
 8019b36:	f7ff ff35 	bl	80199a4 <UTIL_LCD_DisplayChar>
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 8019b3a:	68f2      	ldr	r2, [r6, #12]
    i++;
 8019b3c:	f108 0801 	add.w	r8, r8, #1
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8019b40:	6973      	ldr	r3, [r6, #20]
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 8019b42:	eb06 1142 	add.w	r1, r6, r2, lsl #5
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8019b46:	f815 2f01 	ldrb.w	r2, [r5, #1]!
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 8019b4a:	6889      	ldr	r1, [r1, #8]
 8019b4c:	8889      	ldrh	r1, [r1, #4]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8019b4e:	fb08 3311 	mls	r3, r8, r1, r3
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 8019b52:	440c      	add	r4, r1
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8019b54:	b29b      	uxth	r3, r3
 8019b56:	4299      	cmp	r1, r3
 8019b58:	d801      	bhi.n	8019b5e <UTIL_LCD_DisplayStringAt+0x7e>
 8019b5a:	2a00      	cmp	r2, #0
 8019b5c:	d1e9      	bne.n	8019b32 <UTIL_LCD_DisplayStringAt+0x52>
}
 8019b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
 8019b62:	eba0 000c 	sub.w	r0, r0, ip
 8019b66:	fb0e f000 	mul.w	r0, lr, r0
 8019b6a:	1b04      	subs	r4, r0, r4
      break;
 8019b6c:	e7d5      	b.n	8019b1a <UTIL_LCD_DisplayStringAt+0x3a>
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
 8019b6e:	eba0 000c 	sub.w	r0, r0, ip
 8019b72:	fb0e f000 	mul.w	r0, lr, r0
 8019b76:	eb04 0450 	add.w	r4, r4, r0, lsr #1
      break;
 8019b7a:	e7ce      	b.n	8019b1a <UTIL_LCD_DisplayStringAt+0x3a>
  uint32_t size = 0, xsize = 0;
 8019b7c:	4694      	mov	ip, r2
 8019b7e:	e7be      	b.n	8019afe <UTIL_LCD_DisplayStringAt+0x1e>
 8019b80:	240041bc 	.word	0x240041bc

08019b84 <UTIL_LCD_DrawLine>:
{
 8019b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  x_diff = Xpos2 - Xpos1;
 8019b88:	1a17      	subs	r7, r2, r0
  y_diff = Ypos2 - Ypos1;
 8019b8a:	1a5e      	subs	r6, r3, r1
  if (Xpos2 >= Xpos1)                 /* The x-values are increasing */
 8019b8c:	f64f 74ff 	movw	r4, #65535	; 0xffff
{
 8019b90:	b087      	sub	sp, #28
  x = Xpos1;                       /* Start x off at the first pixel */
 8019b92:	b205      	sxth	r5, r0
  if (Xpos2 >= Xpos1)                 /* The x-values are increasing */
 8019b94:	4282      	cmp	r2, r0
 8019b96:	bf34      	ite	cc
 8019b98:	4622      	movcc	r2, r4
 8019b9a:	2201      	movcs	r2, #1
  if (Ypos2 >= Ypos1)                 /* The y-values are increasing */
 8019b9c:	428b      	cmp	r3, r1
 8019b9e:	bf28      	it	cs
 8019ba0:	2401      	movcs	r4, #1
  deltax = ABS(x_diff);         /* The absolute difference between the x's */
 8019ba2:	2f00      	cmp	r7, #0
  deltay = ABS(y_diff);         /* The absolute difference between the y's */
 8019ba4:	ea86 73e6 	eor.w	r3, r6, r6, asr #31
  if (Xpos2 >= Xpos1)                 /* The x-values are increasing */
 8019ba8:	9202      	str	r2, [sp, #8]
  y = Ypos1;                       /* Start y off at the first pixel */
 8019baa:	b209      	sxth	r1, r1
  deltax = ABS(x_diff);         /* The absolute difference between the x's */
 8019bac:	bfb8      	it	lt
 8019bae:	427f      	neglt	r7, r7
  deltay = ABS(y_diff);         /* The absolute difference between the y's */
 8019bb0:	eba3 73e6 	sub.w	r3, r3, r6, asr #31
  if (Ypos2 >= Ypos1)                 /* The y-values are increasing */
 8019bb4:	9403      	str	r4, [sp, #12]
  deltax = ABS(x_diff);         /* The absolute difference between the x's */
 8019bb6:	b23f      	sxth	r7, r7
  deltay = ABS(y_diff);         /* The absolute difference between the y's */
 8019bb8:	b21b      	sxth	r3, r3
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8019bba:	429f      	cmp	r7, r3
 8019bbc:	db5c      	blt.n	8019c78 <UTIL_LCD_DrawLine+0xf4>
    num = deltax / 2;
 8019bbe:	2f00      	cmp	r7, #0
 8019bc0:	463e      	mov	r6, r7
 8019bc2:	f04f 0200 	mov.w	r2, #0
 8019bc6:	f8dd b008 	ldr.w	fp, [sp, #8]
 8019bca:	bfb8      	it	lt
 8019bcc:	1c7e      	addlt	r6, r7, #1
 8019bce:	4691      	mov	r9, r2
 8019bd0:	9202      	str	r2, [sp, #8]
 8019bd2:	1076      	asrs	r6, r6, #1
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8019bd4:	2f00      	cmp	r7, #0
 8019bd6:	db42      	blt.n	8019c5e <UTIL_LCD_DrawLine+0xda>
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882RGB565(Color));
 8019bd8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019bda:	b29b      	uxth	r3, r3
 8019bdc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8019bde:	f04f 0800 	mov.w	r8, #0
 8019be2:	0952      	lsrs	r2, r2, #5
 8019be4:	9810      	ldr	r0, [sp, #64]	; 0x40
 8019be6:	0a24      	lsrs	r4, r4, #8
 8019be8:	9304      	str	r3, [sp, #16]
 8019bea:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8019bee:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8019bf2:	f404 4378 	and.w	r3, r4, #63488	; 0xf800
 8019bf6:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 8019c9c <UTIL_LCD_DrawLine+0x118>
 8019bfa:	9701      	str	r7, [sp, #4]
 8019bfc:	4313      	orrs	r3, r2
 8019bfe:	4303      	orrs	r3, r0
 8019c00:	9305      	str	r3, [sp, #20]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8019c02:	f8da 301c 	ldr.w	r3, [sl, #28]
    UTIL_LCD_SetPixel(x, y, Color);   /* Draw the current pixel */
 8019c06:	b28c      	uxth	r4, r1
 8019c08:	4a23      	ldr	r2, [pc, #140]	; (8019c98 <UTIL_LCD_DrawLine+0x114>)
 8019c0a:	b2ad      	uxth	r5, r5
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8019c0c:	2b02      	cmp	r3, #2
 8019c0e:	f8da c010 	ldr.w	ip, [sl, #16]
 8019c12:	6992      	ldr	r2, [r2, #24]
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
 8019c14:	4629      	mov	r1, r5
 8019c16:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019c18:	4660      	mov	r0, ip
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882RGB565(Color));
 8019c1a:	bf08      	it	eq
 8019c1c:	9b05      	ldreq	r3, [sp, #20]
 8019c1e:	4617      	mov	r7, r2
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
 8019c20:	4622      	mov	r2, r4
 8019c22:	f108 0801 	add.w	r8, r8, #1
 8019c26:	47b8      	blx	r7
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 8019c28:	9b04      	ldr	r3, [sp, #16]
    x += xinc2;                               /* Change the x as appropriate */
 8019c2a:	eb05 000b 	add.w	r0, r5, fp
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 8019c2e:	441e      	add	r6, r3
      x += xinc1;                             /* Change the x as appropriate */
 8019c30:	9b02      	ldr	r3, [sp, #8]
 8019c32:	18ea      	adds	r2, r5, r3
      y += yinc1;                             /* Change the y as appropriate */
 8019c34:	9b03      	ldr	r3, [sp, #12]
 8019c36:	18e1      	adds	r1, r4, r3
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 8019c38:	b2b3      	uxth	r3, r6
    x += xinc2;                               /* Change the x as appropriate */
 8019c3a:	eb0b 0502 	add.w	r5, fp, r2
    y += yinc2;                               /* Change the y as appropriate */
 8019c3e:	eb04 0209 	add.w	r2, r4, r9
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 8019c42:	b21e      	sxth	r6, r3
      num -= den;                             /* Calculate the new numerator value */
 8019c44:	9c01      	ldr	r4, [sp, #4]
    y += yinc2;                               /* Change the y as appropriate */
 8019c46:	4449      	add	r1, r9
    x += xinc2;                               /* Change the x as appropriate */
 8019c48:	b22d      	sxth	r5, r5
    if (num >= den)                           /* Check if numerator >= denominator */
 8019c4a:	42b4      	cmp	r4, r6
      num -= den;                             /* Calculate the new numerator value */
 8019c4c:	eba3 0304 	sub.w	r3, r3, r4
    y += yinc2;                               /* Change the y as appropriate */
 8019c50:	b209      	sxth	r1, r1
    if (num >= den)                           /* Check if numerator >= denominator */
 8019c52:	dc07      	bgt.n	8019c64 <UTIL_LCD_DrawLine+0xe0>
      num -= den;                             /* Calculate the new numerator value */
 8019c54:	b21e      	sxth	r6, r3
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8019c56:	fa0f f388 	sxth.w	r3, r8
 8019c5a:	42a3      	cmp	r3, r4
 8019c5c:	ddd1      	ble.n	8019c02 <UTIL_LCD_DrawLine+0x7e>
}
 8019c5e:	b007      	add	sp, #28
 8019c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    y += yinc2;                               /* Change the y as appropriate */
 8019c64:	b211      	sxth	r1, r2
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8019c66:	9a01      	ldr	r2, [sp, #4]
 8019c68:	fa0f f388 	sxth.w	r3, r8
    x += xinc2;                               /* Change the x as appropriate */
 8019c6c:	b205      	sxth	r5, r0
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8019c6e:	4293      	cmp	r3, r2
 8019c70:	ddc7      	ble.n	8019c02 <UTIL_LCD_DrawLine+0x7e>
}
 8019c72:	b007      	add	sp, #28
 8019c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    num = deltay / 2;
 8019c78:	2b00      	cmp	r3, #0
 8019c7a:	461e      	mov	r6, r3
 8019c7c:	463a      	mov	r2, r7
 8019c7e:	f04f 0000 	mov.w	r0, #0
 8019c82:	bfb8      	it	lt
 8019c84:	1c5e      	addlt	r6, r3, #1
 8019c86:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8019c8a:	461f      	mov	r7, r3
 8019c8c:	9003      	str	r0, [sp, #12]
 8019c8e:	f346 064f 	sbfx	r6, r6, #1, #16
 8019c92:	4613      	mov	r3, r2
 8019c94:	4683      	mov	fp, r0
 8019c96:	e79d      	b.n	8019bd4 <UTIL_LCD_DrawLine+0x50>
 8019c98:	240041fc 	.word	0x240041fc
 8019c9c:	240041bc 	.word	0x240041bc

08019ca0 <UTIL_LCD_DrawRect>:
{
 8019ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ca4:	4c45      	ldr	r4, [pc, #276]	; (8019dbc <UTIL_LCD_DrawRect+0x11c>)
 8019ca6:	460f      	mov	r7, r1
 8019ca8:	b083      	sub	sp, #12
 8019caa:	f8df a114 	ldr.w	sl, [pc, #276]	; 8019dc0 <UTIL_LCD_DrawRect+0x120>
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8019cae:	69e1      	ldr	r1, [r4, #28]
{
 8019cb0:	4680      	mov	r8, r0
 8019cb2:	4616      	mov	r6, r2
 8019cb4:	4699      	mov	r9, r3
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8019cb6:	2902      	cmp	r1, #2
 8019cb8:	6920      	ldr	r0, [r4, #16]
 8019cba:	f8da b008 	ldr.w	fp, [sl, #8]
{
 8019cbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8019cc0:	d02c      	beq.n	8019d1c <UTIL_LCD_DrawRect+0x7c>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 8019cc2:	4613      	mov	r3, r2
 8019cc4:	9500      	str	r5, [sp, #0]
 8019cc6:	463a      	mov	r2, r7
 8019cc8:	4641      	mov	r1, r8
 8019cca:	47d8      	blx	fp
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8019ccc:	69e3      	ldr	r3, [r4, #28]
  UTIL_LCD_DrawHLine(Xpos, (Ypos+ Height - 1U), Width, Color);
 8019cce:	f109 32ff 	add.w	r2, r9, #4294967295
 8019cd2:	f8da b008 	ldr.w	fp, [sl, #8]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8019cd6:	2b02      	cmp	r3, #2
  UTIL_LCD_DrawHLine(Xpos, (Ypos+ Height - 1U), Width, Color);
 8019cd8:	443a      	add	r2, r7
 8019cda:	6920      	ldr	r0, [r4, #16]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8019cdc:	d05a      	beq.n	8019d94 <UTIL_LCD_DrawRect+0xf4>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 8019cde:	9500      	str	r5, [sp, #0]
 8019ce0:	4633      	mov	r3, r6
 8019ce2:	4641      	mov	r1, r8
 8019ce4:	47d8      	blx	fp
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8019ce6:	69e3      	ldr	r3, [r4, #28]
 8019ce8:	f8da b00c 	ldr.w	fp, [sl, #12]
 8019cec:	2b02      	cmp	r3, #2
 8019cee:	6920      	ldr	r0, [r4, #16]
 8019cf0:	d03c      	beq.n	8019d6c <UTIL_LCD_DrawRect+0xcc>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 8019cf2:	9500      	str	r5, [sp, #0]
 8019cf4:	464b      	mov	r3, r9
 8019cf6:	463a      	mov	r2, r7
 8019cf8:	4641      	mov	r1, r8
 8019cfa:	47d8      	blx	fp
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8019cfc:	69e3      	ldr	r3, [r4, #28]
  UTIL_LCD_DrawVLine((Xpos + Width - 1U), Ypos, Height, Color);
 8019cfe:	1e71      	subs	r1, r6, #1
 8019d00:	6920      	ldr	r0, [r4, #16]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8019d02:	2b02      	cmp	r3, #2
 8019d04:	f8da 600c 	ldr.w	r6, [sl, #12]
  UTIL_LCD_DrawVLine((Xpos + Width - 1U), Ypos, Height, Color);
 8019d08:	4441      	add	r1, r8
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8019d0a:	d01b      	beq.n	8019d44 <UTIL_LCD_DrawRect+0xa4>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 8019d0c:	464b      	mov	r3, r9
 8019d0e:	463a      	mov	r2, r7
 8019d10:	46b4      	mov	ip, r6
 8019d12:	950c      	str	r5, [sp, #48]	; 0x30
}
 8019d14:	b003      	add	sp, #12
 8019d16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 8019d1a:	4760      	bx	ip
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 8019d1c:	ea4f 1e55 	mov.w	lr, r5, lsr #5
 8019d20:	f3c5 0cc4 	ubfx	ip, r5, #3, #5
 8019d24:	0a29      	lsrs	r1, r5, #8
 8019d26:	4613      	mov	r3, r2
 8019d28:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8019d2c:	463a      	mov	r2, r7
 8019d2e:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8019d32:	ea4e 0e01 	orr.w	lr, lr, r1
 8019d36:	4641      	mov	r1, r8
 8019d38:	ea4e 0c0c 	orr.w	ip, lr, ip
 8019d3c:	f8cd c000 	str.w	ip, [sp]
 8019d40:	47d8      	blx	fp
 8019d42:	e7c3      	b.n	8019ccc <UTIL_LCD_DrawRect+0x2c>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 8019d44:	096c      	lsrs	r4, r5, #5
 8019d46:	f3c5 0ec4 	ubfx	lr, r5, #3, #5
 8019d4a:	ea4f 2c15 	mov.w	ip, r5, lsr #8
 8019d4e:	464b      	mov	r3, r9
 8019d50:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8019d54:	463a      	mov	r2, r7
 8019d56:	f40c 4578 	and.w	r5, ip, #63488	; 0xf800
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 8019d5a:	46b4      	mov	ip, r6
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 8019d5c:	432c      	orrs	r4, r5
 8019d5e:	ea44 040e 	orr.w	r4, r4, lr
 8019d62:	940c      	str	r4, [sp, #48]	; 0x30
}
 8019d64:	b003      	add	sp, #12
 8019d66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 8019d6a:	4760      	bx	ip
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 8019d6c:	ea4f 1e55 	mov.w	lr, r5, lsr #5
 8019d70:	f3c5 0cc4 	ubfx	ip, r5, #3, #5
 8019d74:	0a29      	lsrs	r1, r5, #8
 8019d76:	464b      	mov	r3, r9
 8019d78:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8019d7c:	463a      	mov	r2, r7
 8019d7e:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8019d82:	ea4e 0e01 	orr.w	lr, lr, r1
 8019d86:	4641      	mov	r1, r8
 8019d88:	ea4e 0c0c 	orr.w	ip, lr, ip
 8019d8c:	f8cd c000 	str.w	ip, [sp]
 8019d90:	47d8      	blx	fp
 8019d92:	e7b3      	b.n	8019cfc <UTIL_LCD_DrawRect+0x5c>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 8019d94:	ea4f 1e55 	mov.w	lr, r5, lsr #5
 8019d98:	f3c5 0cc4 	ubfx	ip, r5, #3, #5
 8019d9c:	0a29      	lsrs	r1, r5, #8
 8019d9e:	4633      	mov	r3, r6
 8019da0:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8019da4:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8019da8:	ea4e 0e01 	orr.w	lr, lr, r1
 8019dac:	4641      	mov	r1, r8
 8019dae:	ea4e 0c0c 	orr.w	ip, lr, ip
 8019db2:	f8cd c000 	str.w	ip, [sp]
 8019db6:	47d8      	blx	fp
 8019db8:	e795      	b.n	8019ce6 <UTIL_LCD_DrawRect+0x46>
 8019dba:	bf00      	nop
 8019dbc:	240041bc 	.word	0x240041bc
 8019dc0:	240041fc 	.word	0x240041fc

08019dc4 <ai_platform_runtime_get_revision>:
 8019dc4:	4a1c      	ldr	r2, [pc, #112]	; (8019e38 <ai_platform_runtime_get_revision+0x74>)
 8019dc6:	491d      	ldr	r1, [pc, #116]	; (8019e3c <ai_platform_runtime_get_revision+0x78>)
 8019dc8:	6813      	ldr	r3, [r2, #0]
 8019dca:	f023 0301 	bic.w	r3, r3, #1
 8019dce:	6013      	str	r3, [r2, #0]
 8019dd0:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8019dd4:	680b      	ldr	r3, [r1, #0]
 8019dd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019dda:	189a      	adds	r2, r3, r2
 8019ddc:	2a01      	cmp	r2, #1
 8019dde:	d90c      	bls.n	8019dfa <ai_platform_runtime_get_revision+0x36>
 8019de0:	f240 4249 	movw	r2, #1097	; 0x449
 8019de4:	4293      	cmp	r3, r2
 8019de6:	d008      	beq.n	8019dfa <ai_platform_runtime_get_revision+0x36>
 8019de8:	4b15      	ldr	r3, [pc, #84]	; (8019e40 <ai_platform_runtime_get_revision+0x7c>)
 8019dea:	681b      	ldr	r3, [r3, #0]
 8019dec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019df0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8019df4:	d010      	beq.n	8019e18 <ai_platform_runtime_get_revision+0x54>
 8019df6:	4813      	ldr	r0, [pc, #76]	; (8019e44 <ai_platform_runtime_get_revision+0x80>)
 8019df8:	4770      	bx	lr
 8019dfa:	4b13      	ldr	r3, [pc, #76]	; (8019e48 <ai_platform_runtime_get_revision+0x84>)
 8019dfc:	2201      	movs	r2, #1
 8019dfe:	4619      	mov	r1, r3
 8019e00:	601a      	str	r2, [r3, #0]
 8019e02:	680b      	ldr	r3, [r1, #0]
 8019e04:	2b00      	cmp	r3, #0
 8019e06:	d1fc      	bne.n	8019e02 <ai_platform_runtime_get_revision+0x3e>
 8019e08:	4b10      	ldr	r3, [pc, #64]	; (8019e4c <ai_platform_runtime_get_revision+0x88>)
 8019e0a:	4911      	ldr	r1, [pc, #68]	; (8019e50 <ai_platform_runtime_get_revision+0x8c>)
 8019e0c:	4a11      	ldr	r2, [pc, #68]	; (8019e54 <ai_platform_runtime_get_revision+0x90>)
 8019e0e:	6019      	str	r1, [r3, #0]
 8019e10:	681b      	ldr	r3, [r3, #0]
 8019e12:	4293      	cmp	r3, r2
 8019e14:	d0ef      	beq.n	8019df6 <ai_platform_runtime_get_revision+0x32>
 8019e16:	e7fe      	b.n	8019e16 <ai_platform_runtime_get_revision+0x52>
 8019e18:	4b0f      	ldr	r3, [pc, #60]	; (8019e58 <ai_platform_runtime_get_revision+0x94>)
 8019e1a:	2201      	movs	r2, #1
 8019e1c:	4619      	mov	r1, r3
 8019e1e:	601a      	str	r2, [r3, #0]
 8019e20:	680b      	ldr	r3, [r1, #0]
 8019e22:	2b00      	cmp	r3, #0
 8019e24:	d1fc      	bne.n	8019e20 <ai_platform_runtime_get_revision+0x5c>
 8019e26:	4b0d      	ldr	r3, [pc, #52]	; (8019e5c <ai_platform_runtime_get_revision+0x98>)
 8019e28:	4909      	ldr	r1, [pc, #36]	; (8019e50 <ai_platform_runtime_get_revision+0x8c>)
 8019e2a:	4a0a      	ldr	r2, [pc, #40]	; (8019e54 <ai_platform_runtime_get_revision+0x90>)
 8019e2c:	6019      	str	r1, [r3, #0]
 8019e2e:	681b      	ldr	r3, [r3, #0]
 8019e30:	4293      	cmp	r3, r2
 8019e32:	d0e0      	beq.n	8019df6 <ai_platform_runtime_get_revision+0x32>
 8019e34:	e7fe      	b.n	8019e34 <ai_platform_runtime_get_revision+0x70>
 8019e36:	bf00      	nop
 8019e38:	e0002000 	.word	0xe0002000
 8019e3c:	e0042000 	.word	0xe0042000
 8019e40:	5c001000 	.word	0x5c001000
 8019e44:	0802062c 	.word	0x0802062c
 8019e48:	40023008 	.word	0x40023008
 8019e4c:	40023000 	.word	0x40023000
 8019e50:	f407a5c2 	.word	0xf407a5c2
 8019e54:	b5e8b5cd 	.word	0xb5e8b5cd
 8019e58:	58024c08 	.word	0x58024c08
 8019e5c:	58024c00 	.word	0x58024c00

08019e60 <ai_platform_runtime_get_version>:
 8019e60:	4a1d      	ldr	r2, [pc, #116]	; (8019ed8 <ai_platform_runtime_get_version+0x78>)
 8019e62:	b082      	sub	sp, #8
 8019e64:	491d      	ldr	r1, [pc, #116]	; (8019edc <ai_platform_runtime_get_version+0x7c>)
 8019e66:	6813      	ldr	r3, [r2, #0]
 8019e68:	f023 0301 	bic.w	r3, r3, #1
 8019e6c:	6013      	str	r3, [r2, #0]
 8019e6e:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8019e72:	680b      	ldr	r3, [r1, #0]
 8019e74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019e78:	189a      	adds	r2, r3, r2
 8019e7a:	2a01      	cmp	r2, #1
 8019e7c:	d90d      	bls.n	8019e9a <ai_platform_runtime_get_version+0x3a>
 8019e7e:	f240 4249 	movw	r2, #1097	; 0x449
 8019e82:	4293      	cmp	r3, r2
 8019e84:	d009      	beq.n	8019e9a <ai_platform_runtime_get_version+0x3a>
 8019e86:	4b16      	ldr	r3, [pc, #88]	; (8019ee0 <ai_platform_runtime_get_version+0x80>)
 8019e88:	681b      	ldr	r3, [r3, #0]
 8019e8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019e8e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8019e92:	d011      	beq.n	8019eb8 <ai_platform_runtime_get_version+0x58>
 8019e94:	2006      	movs	r0, #6
 8019e96:	b002      	add	sp, #8
 8019e98:	4770      	bx	lr
 8019e9a:	4b12      	ldr	r3, [pc, #72]	; (8019ee4 <ai_platform_runtime_get_version+0x84>)
 8019e9c:	2201      	movs	r2, #1
 8019e9e:	4619      	mov	r1, r3
 8019ea0:	601a      	str	r2, [r3, #0]
 8019ea2:	680b      	ldr	r3, [r1, #0]
 8019ea4:	2b00      	cmp	r3, #0
 8019ea6:	d1fc      	bne.n	8019ea2 <ai_platform_runtime_get_version+0x42>
 8019ea8:	4b0f      	ldr	r3, [pc, #60]	; (8019ee8 <ai_platform_runtime_get_version+0x88>)
 8019eaa:	4910      	ldr	r1, [pc, #64]	; (8019eec <ai_platform_runtime_get_version+0x8c>)
 8019eac:	4a10      	ldr	r2, [pc, #64]	; (8019ef0 <ai_platform_runtime_get_version+0x90>)
 8019eae:	6019      	str	r1, [r3, #0]
 8019eb0:	681b      	ldr	r3, [r3, #0]
 8019eb2:	4293      	cmp	r3, r2
 8019eb4:	d0ee      	beq.n	8019e94 <ai_platform_runtime_get_version+0x34>
 8019eb6:	e7fe      	b.n	8019eb6 <ai_platform_runtime_get_version+0x56>
 8019eb8:	4b0e      	ldr	r3, [pc, #56]	; (8019ef4 <ai_platform_runtime_get_version+0x94>)
 8019eba:	2201      	movs	r2, #1
 8019ebc:	4619      	mov	r1, r3
 8019ebe:	601a      	str	r2, [r3, #0]
 8019ec0:	680b      	ldr	r3, [r1, #0]
 8019ec2:	2b00      	cmp	r3, #0
 8019ec4:	d1fc      	bne.n	8019ec0 <ai_platform_runtime_get_version+0x60>
 8019ec6:	4b0c      	ldr	r3, [pc, #48]	; (8019ef8 <ai_platform_runtime_get_version+0x98>)
 8019ec8:	4908      	ldr	r1, [pc, #32]	; (8019eec <ai_platform_runtime_get_version+0x8c>)
 8019eca:	4a09      	ldr	r2, [pc, #36]	; (8019ef0 <ai_platform_runtime_get_version+0x90>)
 8019ecc:	6019      	str	r1, [r3, #0]
 8019ece:	681b      	ldr	r3, [r3, #0]
 8019ed0:	4293      	cmp	r3, r2
 8019ed2:	d0df      	beq.n	8019e94 <ai_platform_runtime_get_version+0x34>
 8019ed4:	e7fe      	b.n	8019ed4 <ai_platform_runtime_get_version+0x74>
 8019ed6:	bf00      	nop
 8019ed8:	e0002000 	.word	0xe0002000
 8019edc:	e0042000 	.word	0xe0042000
 8019ee0:	5c001000 	.word	0x5c001000
 8019ee4:	40023008 	.word	0x40023008
 8019ee8:	40023000 	.word	0x40023000
 8019eec:	f407a5c2 	.word	0xf407a5c2
 8019ef0:	b5e8b5cd 	.word	0xb5e8b5cd
 8019ef4:	58024c08 	.word	0x58024c08
 8019ef8:	58024c00 	.word	0x58024c00

08019efc <ai_platform_api_get_version>:
 8019efc:	4a26      	ldr	r2, [pc, #152]	; (8019f98 <ai_platform_api_get_version+0x9c>)
 8019efe:	4927      	ldr	r1, [pc, #156]	; (8019f9c <ai_platform_api_get_version+0xa0>)
 8019f00:	6813      	ldr	r3, [r2, #0]
 8019f02:	f023 0301 	bic.w	r3, r3, #1
 8019f06:	6013      	str	r3, [r2, #0]
 8019f08:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8019f0c:	680b      	ldr	r3, [r1, #0]
 8019f0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019f12:	189a      	adds	r2, r3, r2
 8019f14:	2a01      	cmp	r2, #1
 8019f16:	d921      	bls.n	8019f5c <ai_platform_api_get_version+0x60>
 8019f18:	f240 4249 	movw	r2, #1097	; 0x449
 8019f1c:	4293      	cmp	r3, r2
 8019f1e:	d01d      	beq.n	8019f5c <ai_platform_api_get_version+0x60>
 8019f20:	4b1f      	ldr	r3, [pc, #124]	; (8019fa0 <ai_platform_api_get_version+0xa4>)
 8019f22:	681b      	ldr	r3, [r3, #0]
 8019f24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019f28:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8019f2c:	d025      	beq.n	8019f7a <ai_platform_api_get_version+0x7e>
 8019f2e:	4b1d      	ldr	r3, [pc, #116]	; (8019fa4 <ai_platform_api_get_version+0xa8>)
 8019f30:	2000      	movs	r0, #0
 8019f32:	681b      	ldr	r3, [r3, #0]
 8019f34:	b410      	push	{r4}
 8019f36:	b2dc      	uxtb	r4, r3
 8019f38:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8019f3c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8019f40:	0e1b      	lsrs	r3, r3, #24
 8019f42:	f364 0007 	bfi	r0, r4, #0, #8
 8019f46:	b083      	sub	sp, #12
 8019f48:	f361 200f 	bfi	r0, r1, #8, #8
 8019f4c:	f362 4017 	bfi	r0, r2, #16, #8
 8019f50:	f363 601f 	bfi	r0, r3, #24, #8
 8019f54:	b003      	add	sp, #12
 8019f56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019f5a:	4770      	bx	lr
 8019f5c:	4b12      	ldr	r3, [pc, #72]	; (8019fa8 <ai_platform_api_get_version+0xac>)
 8019f5e:	2201      	movs	r2, #1
 8019f60:	4619      	mov	r1, r3
 8019f62:	601a      	str	r2, [r3, #0]
 8019f64:	680b      	ldr	r3, [r1, #0]
 8019f66:	2b00      	cmp	r3, #0
 8019f68:	d1fc      	bne.n	8019f64 <ai_platform_api_get_version+0x68>
 8019f6a:	4b10      	ldr	r3, [pc, #64]	; (8019fac <ai_platform_api_get_version+0xb0>)
 8019f6c:	4910      	ldr	r1, [pc, #64]	; (8019fb0 <ai_platform_api_get_version+0xb4>)
 8019f6e:	4a11      	ldr	r2, [pc, #68]	; (8019fb4 <ai_platform_api_get_version+0xb8>)
 8019f70:	6019      	str	r1, [r3, #0]
 8019f72:	681b      	ldr	r3, [r3, #0]
 8019f74:	4293      	cmp	r3, r2
 8019f76:	d0da      	beq.n	8019f2e <ai_platform_api_get_version+0x32>
 8019f78:	e7fe      	b.n	8019f78 <ai_platform_api_get_version+0x7c>
 8019f7a:	4b0f      	ldr	r3, [pc, #60]	; (8019fb8 <ai_platform_api_get_version+0xbc>)
 8019f7c:	2201      	movs	r2, #1
 8019f7e:	4619      	mov	r1, r3
 8019f80:	601a      	str	r2, [r3, #0]
 8019f82:	680b      	ldr	r3, [r1, #0]
 8019f84:	2b00      	cmp	r3, #0
 8019f86:	d1fc      	bne.n	8019f82 <ai_platform_api_get_version+0x86>
 8019f88:	4b0c      	ldr	r3, [pc, #48]	; (8019fbc <ai_platform_api_get_version+0xc0>)
 8019f8a:	4909      	ldr	r1, [pc, #36]	; (8019fb0 <ai_platform_api_get_version+0xb4>)
 8019f8c:	4a09      	ldr	r2, [pc, #36]	; (8019fb4 <ai_platform_api_get_version+0xb8>)
 8019f8e:	6019      	str	r1, [r3, #0]
 8019f90:	681b      	ldr	r3, [r3, #0]
 8019f92:	4293      	cmp	r3, r2
 8019f94:	d0cb      	beq.n	8019f2e <ai_platform_api_get_version+0x32>
 8019f96:	e7fe      	b.n	8019f96 <ai_platform_api_get_version+0x9a>
 8019f98:	e0002000 	.word	0xe0002000
 8019f9c:	e0042000 	.word	0xe0042000
 8019fa0:	5c001000 	.word	0x5c001000
 8019fa4:	0802468c 	.word	0x0802468c
 8019fa8:	40023008 	.word	0x40023008
 8019fac:	40023000 	.word	0x40023000
 8019fb0:	f407a5c2 	.word	0xf407a5c2
 8019fb4:	b5e8b5cd 	.word	0xb5e8b5cd
 8019fb8:	58024c08 	.word	0x58024c08
 8019fbc:	58024c00 	.word	0x58024c00

08019fc0 <ai_platform_interface_api_get_version>:
 8019fc0:	4a26      	ldr	r2, [pc, #152]	; (801a05c <ai_platform_interface_api_get_version+0x9c>)
 8019fc2:	4927      	ldr	r1, [pc, #156]	; (801a060 <ai_platform_interface_api_get_version+0xa0>)
 8019fc4:	6813      	ldr	r3, [r2, #0]
 8019fc6:	f023 0301 	bic.w	r3, r3, #1
 8019fca:	6013      	str	r3, [r2, #0]
 8019fcc:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8019fd0:	680b      	ldr	r3, [r1, #0]
 8019fd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019fd6:	189a      	adds	r2, r3, r2
 8019fd8:	2a01      	cmp	r2, #1
 8019fda:	d921      	bls.n	801a020 <ai_platform_interface_api_get_version+0x60>
 8019fdc:	f240 4249 	movw	r2, #1097	; 0x449
 8019fe0:	4293      	cmp	r3, r2
 8019fe2:	d01d      	beq.n	801a020 <ai_platform_interface_api_get_version+0x60>
 8019fe4:	4b1f      	ldr	r3, [pc, #124]	; (801a064 <ai_platform_interface_api_get_version+0xa4>)
 8019fe6:	681b      	ldr	r3, [r3, #0]
 8019fe8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019fec:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8019ff0:	d025      	beq.n	801a03e <ai_platform_interface_api_get_version+0x7e>
 8019ff2:	4b1d      	ldr	r3, [pc, #116]	; (801a068 <ai_platform_interface_api_get_version+0xa8>)
 8019ff4:	2000      	movs	r0, #0
 8019ff6:	681b      	ldr	r3, [r3, #0]
 8019ff8:	b410      	push	{r4}
 8019ffa:	b2dc      	uxtb	r4, r3
 8019ffc:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801a000:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801a004:	0e1b      	lsrs	r3, r3, #24
 801a006:	f364 0007 	bfi	r0, r4, #0, #8
 801a00a:	b083      	sub	sp, #12
 801a00c:	f361 200f 	bfi	r0, r1, #8, #8
 801a010:	f362 4017 	bfi	r0, r2, #16, #8
 801a014:	f363 601f 	bfi	r0, r3, #24, #8
 801a018:	b003      	add	sp, #12
 801a01a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a01e:	4770      	bx	lr
 801a020:	4b12      	ldr	r3, [pc, #72]	; (801a06c <ai_platform_interface_api_get_version+0xac>)
 801a022:	2201      	movs	r2, #1
 801a024:	4619      	mov	r1, r3
 801a026:	601a      	str	r2, [r3, #0]
 801a028:	680b      	ldr	r3, [r1, #0]
 801a02a:	2b00      	cmp	r3, #0
 801a02c:	d1fc      	bne.n	801a028 <ai_platform_interface_api_get_version+0x68>
 801a02e:	4b10      	ldr	r3, [pc, #64]	; (801a070 <ai_platform_interface_api_get_version+0xb0>)
 801a030:	4910      	ldr	r1, [pc, #64]	; (801a074 <ai_platform_interface_api_get_version+0xb4>)
 801a032:	4a11      	ldr	r2, [pc, #68]	; (801a078 <ai_platform_interface_api_get_version+0xb8>)
 801a034:	6019      	str	r1, [r3, #0]
 801a036:	681b      	ldr	r3, [r3, #0]
 801a038:	4293      	cmp	r3, r2
 801a03a:	d0da      	beq.n	8019ff2 <ai_platform_interface_api_get_version+0x32>
 801a03c:	e7fe      	b.n	801a03c <ai_platform_interface_api_get_version+0x7c>
 801a03e:	4b0f      	ldr	r3, [pc, #60]	; (801a07c <ai_platform_interface_api_get_version+0xbc>)
 801a040:	2201      	movs	r2, #1
 801a042:	4619      	mov	r1, r3
 801a044:	601a      	str	r2, [r3, #0]
 801a046:	680b      	ldr	r3, [r1, #0]
 801a048:	2b00      	cmp	r3, #0
 801a04a:	d1fc      	bne.n	801a046 <ai_platform_interface_api_get_version+0x86>
 801a04c:	4b0c      	ldr	r3, [pc, #48]	; (801a080 <ai_platform_interface_api_get_version+0xc0>)
 801a04e:	4909      	ldr	r1, [pc, #36]	; (801a074 <ai_platform_interface_api_get_version+0xb4>)
 801a050:	4a09      	ldr	r2, [pc, #36]	; (801a078 <ai_platform_interface_api_get_version+0xb8>)
 801a052:	6019      	str	r1, [r3, #0]
 801a054:	681b      	ldr	r3, [r3, #0]
 801a056:	4293      	cmp	r3, r2
 801a058:	d0cb      	beq.n	8019ff2 <ai_platform_interface_api_get_version+0x32>
 801a05a:	e7fe      	b.n	801a05a <ai_platform_interface_api_get_version+0x9a>
 801a05c:	e0002000 	.word	0xe0002000
 801a060:	e0042000 	.word	0xe0042000
 801a064:	5c001000 	.word	0x5c001000
 801a068:	08024690 	.word	0x08024690
 801a06c:	40023008 	.word	0x40023008
 801a070:	40023000 	.word	0x40023000
 801a074:	f407a5c2 	.word	0xf407a5c2
 801a078:	b5e8b5cd 	.word	0xb5e8b5cd
 801a07c:	58024c08 	.word	0x58024c08
 801a080:	58024c00 	.word	0x58024c00

0801a084 <ai_platform_context_acquire>:
 801a084:	b120      	cbz	r0, 801a090 <ai_platform_context_acquire+0xc>
 801a086:	4b1e      	ldr	r3, [pc, #120]	; (801a100 <ai_platform_context_acquire+0x7c>)
 801a088:	6802      	ldr	r2, [r0, #0]
 801a08a:	429a      	cmp	r2, r3
 801a08c:	bf18      	it	ne
 801a08e:	2000      	movne	r0, #0
 801a090:	4a1c      	ldr	r2, [pc, #112]	; (801a104 <ai_platform_context_acquire+0x80>)
 801a092:	491d      	ldr	r1, [pc, #116]	; (801a108 <ai_platform_context_acquire+0x84>)
 801a094:	6813      	ldr	r3, [r2, #0]
 801a096:	f023 0301 	bic.w	r3, r3, #1
 801a09a:	6013      	str	r3, [r2, #0]
 801a09c:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801a0a0:	680b      	ldr	r3, [r1, #0]
 801a0a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a0a6:	189a      	adds	r2, r3, r2
 801a0a8:	2a01      	cmp	r2, #1
 801a0aa:	d90b      	bls.n	801a0c4 <ai_platform_context_acquire+0x40>
 801a0ac:	f240 4249 	movw	r2, #1097	; 0x449
 801a0b0:	4293      	cmp	r3, r2
 801a0b2:	d007      	beq.n	801a0c4 <ai_platform_context_acquire+0x40>
 801a0b4:	4b15      	ldr	r3, [pc, #84]	; (801a10c <ai_platform_context_acquire+0x88>)
 801a0b6:	681b      	ldr	r3, [r3, #0]
 801a0b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a0bc:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801a0c0:	d00f      	beq.n	801a0e2 <ai_platform_context_acquire+0x5e>
 801a0c2:	4770      	bx	lr
 801a0c4:	4b12      	ldr	r3, [pc, #72]	; (801a110 <ai_platform_context_acquire+0x8c>)
 801a0c6:	2201      	movs	r2, #1
 801a0c8:	4619      	mov	r1, r3
 801a0ca:	601a      	str	r2, [r3, #0]
 801a0cc:	680b      	ldr	r3, [r1, #0]
 801a0ce:	2b00      	cmp	r3, #0
 801a0d0:	d1fc      	bne.n	801a0cc <ai_platform_context_acquire+0x48>
 801a0d2:	4b10      	ldr	r3, [pc, #64]	; (801a114 <ai_platform_context_acquire+0x90>)
 801a0d4:	4910      	ldr	r1, [pc, #64]	; (801a118 <ai_platform_context_acquire+0x94>)
 801a0d6:	4a11      	ldr	r2, [pc, #68]	; (801a11c <ai_platform_context_acquire+0x98>)
 801a0d8:	6019      	str	r1, [r3, #0]
 801a0da:	681b      	ldr	r3, [r3, #0]
 801a0dc:	4293      	cmp	r3, r2
 801a0de:	d0f0      	beq.n	801a0c2 <ai_platform_context_acquire+0x3e>
 801a0e0:	e7fe      	b.n	801a0e0 <ai_platform_context_acquire+0x5c>
 801a0e2:	4b0f      	ldr	r3, [pc, #60]	; (801a120 <ai_platform_context_acquire+0x9c>)
 801a0e4:	2201      	movs	r2, #1
 801a0e6:	4619      	mov	r1, r3
 801a0e8:	601a      	str	r2, [r3, #0]
 801a0ea:	680b      	ldr	r3, [r1, #0]
 801a0ec:	2b00      	cmp	r3, #0
 801a0ee:	d1fc      	bne.n	801a0ea <ai_platform_context_acquire+0x66>
 801a0f0:	4b0c      	ldr	r3, [pc, #48]	; (801a124 <ai_platform_context_acquire+0xa0>)
 801a0f2:	4909      	ldr	r1, [pc, #36]	; (801a118 <ai_platform_context_acquire+0x94>)
 801a0f4:	4a09      	ldr	r2, [pc, #36]	; (801a11c <ai_platform_context_acquire+0x98>)
 801a0f6:	6019      	str	r1, [r3, #0]
 801a0f8:	681b      	ldr	r3, [r3, #0]
 801a0fa:	4293      	cmp	r3, r2
 801a0fc:	d0e1      	beq.n	801a0c2 <ai_platform_context_acquire+0x3e>
 801a0fe:	e7fe      	b.n	801a0fe <ai_platform_context_acquire+0x7a>
 801a100:	a1c00100 	.word	0xa1c00100
 801a104:	e0002000 	.word	0xe0002000
 801a108:	e0042000 	.word	0xe0042000
 801a10c:	5c001000 	.word	0x5c001000
 801a110:	40023008 	.word	0x40023008
 801a114:	40023000 	.word	0x40023000
 801a118:	f407a5c2 	.word	0xf407a5c2
 801a11c:	b5e8b5cd 	.word	0xb5e8b5cd
 801a120:	58024c08 	.word	0x58024c08
 801a124:	58024c00 	.word	0x58024c00

0801a128 <ai_platform_api_get_network_report>:
 801a128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a12c:	460c      	mov	r4, r1
 801a12e:	b085      	sub	sp, #20
 801a130:	4605      	mov	r5, r0
 801a132:	b120      	cbz	r0, 801a13e <ai_platform_api_get_network_report+0x16>
 801a134:	4ba5      	ldr	r3, [pc, #660]	; (801a3cc <ai_platform_api_get_network_report+0x2a4>)
 801a136:	6802      	ldr	r2, [r0, #0]
 801a138:	429a      	cmp	r2, r3
 801a13a:	bf18      	it	ne
 801a13c:	2500      	movne	r5, #0
 801a13e:	4aa4      	ldr	r2, [pc, #656]	; (801a3d0 <ai_platform_api_get_network_report+0x2a8>)
 801a140:	f46f 678a 	mvn.w	r7, #1104	; 0x450
 801a144:	49a3      	ldr	r1, [pc, #652]	; (801a3d4 <ai_platform_api_get_network_report+0x2ac>)
 801a146:	6813      	ldr	r3, [r2, #0]
 801a148:	f023 0301 	bic.w	r3, r3, #1
 801a14c:	6013      	str	r3, [r2, #0]
 801a14e:	680b      	ldr	r3, [r1, #0]
 801a150:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a154:	19da      	adds	r2, r3, r7
 801a156:	2a01      	cmp	r2, #1
 801a158:	f240 808c 	bls.w	801a274 <ai_platform_api_get_network_report+0x14c>
 801a15c:	f240 4249 	movw	r2, #1097	; 0x449
 801a160:	4293      	cmp	r3, r2
 801a162:	f000 8087 	beq.w	801a274 <ai_platform_api_get_network_report+0x14c>
 801a166:	4b9c      	ldr	r3, [pc, #624]	; (801a3d8 <ai_platform_api_get_network_report+0x2b0>)
 801a168:	681b      	ldr	r3, [r3, #0]
 801a16a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a16e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801a172:	d070      	beq.n	801a256 <ai_platform_api_get_network_report+0x12e>
 801a174:	2d00      	cmp	r5, #0
 801a176:	f000 808d 	beq.w	801a294 <ai_platform_api_get_network_report+0x16c>
 801a17a:	fab4 f384 	clz	r3, r4
 801a17e:	095b      	lsrs	r3, r3, #5
 801a180:	2b00      	cmp	r3, #0
 801a182:	f040 8087 	bne.w	801a294 <ai_platform_api_get_network_report+0x16c>
 801a186:	66e3      	str	r3, [r4, #108]	; 0x6c
 801a188:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801a18a:	2a00      	cmp	r2, #0
 801a18c:	f000 810b 	beq.w	801a3a6 <ai_platform_api_get_network_report+0x27e>
 801a190:	2301      	movs	r3, #1
 801a192:	66e3      	str	r3, [r4, #108]	; 0x6c
 801a194:	6913      	ldr	r3, [r2, #16]
 801a196:	b17b      	cbz	r3, 801a1b8 <ai_platform_api_get_network_report+0x90>
 801a198:	429a      	cmp	r2, r3
 801a19a:	d00d      	beq.n	801a1b8 <ai_platform_api_get_network_report+0x90>
 801a19c:	2102      	movs	r1, #2
 801a19e:	e001      	b.n	801a1a4 <ai_platform_api_get_network_report+0x7c>
 801a1a0:	b132      	cbz	r2, 801a1b0 <ai_platform_api_get_network_report+0x88>
 801a1a2:	b12a      	cbz	r2, 801a1b0 <ai_platform_api_get_network_report+0x88>
 801a1a4:	66e1      	str	r1, [r4, #108]	; 0x6c
 801a1a6:	3101      	adds	r1, #1
 801a1a8:	691a      	ldr	r2, [r3, #16]
 801a1aa:	429a      	cmp	r2, r3
 801a1ac:	4613      	mov	r3, r2
 801a1ae:	d1f7      	bne.n	801a1a0 <ai_platform_api_get_network_report+0x78>
 801a1b0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801a1b2:	2b00      	cmp	r3, #0
 801a1b4:	f000 80f7 	beq.w	801a3a6 <ai_platform_api_get_network_report+0x27e>
 801a1b8:	f8b5 3048 	ldrh.w	r3, [r5, #72]	; 0x48
 801a1bc:	2b00      	cmp	r3, #0
 801a1be:	f000 80e6 	beq.w	801a38e <ai_platform_api_get_network_report+0x266>
 801a1c2:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801a1c4:	2f00      	cmp	r7, #0
 801a1c6:	f000 80e2 	beq.w	801a38e <ai_platform_api_get_network_report+0x266>
 801a1ca:	883b      	ldrh	r3, [r7, #0]
 801a1cc:	2b00      	cmp	r3, #0
 801a1ce:	f000 80de 	beq.w	801a38e <ai_platform_api_get_network_report+0x266>
 801a1d2:	687b      	ldr	r3, [r7, #4]
 801a1d4:	2b00      	cmp	r3, #0
 801a1d6:	f000 80da 	beq.w	801a38e <ai_platform_api_get_network_report+0x266>
 801a1da:	681e      	ldr	r6, [r3, #0]
 801a1dc:	2e00      	cmp	r6, #0
 801a1de:	f000 80d6 	beq.w	801a38e <ai_platform_api_get_network_report+0x266>
 801a1e2:	f04f 0901 	mov.w	r9, #1
 801a1e6:	f04f 0800 	mov.w	r8, #0
 801a1ea:	464b      	mov	r3, r9
 801a1ec:	f8d7 c008 	ldr.w	ip, [r7, #8]
 801a1f0:	eb08 0248 	add.w	r2, r8, r8, lsl #1
 801a1f4:	69b0      	ldr	r0, [r6, #24]
 801a1f6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801a1fa:	6800      	ldr	r0, [r0, #0]
 801a1fc:	eb01 0a02 	add.w	sl, r1, r2
 801a200:	9303      	str	r3, [sp, #12]
 801a202:	f8dc b008 	ldr.w	fp, [ip, #8]
 801a206:	e9cd 1201 	strd	r1, r2, [sp, #4]
 801a20a:	f003 fbbd 	bl	801d988 <ai_array_to_buffer_fmt>
 801a20e:	9b03      	ldr	r3, [sp, #12]
 801a210:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
 801a214:	5088      	str	r0, [r1, r2]
 801a216:	eb0b 0108 	add.w	r1, fp, r8
 801a21a:	f8aa 3004 	strh.w	r3, [sl, #4]
 801a21e:	68f2      	ldr	r2, [r6, #12]
 801a220:	68d2      	ldr	r2, [r2, #12]
 801a222:	f8aa 2006 	strh.w	r2, [sl, #6]
 801a226:	68f2      	ldr	r2, [r6, #12]
 801a228:	6892      	ldr	r2, [r2, #8]
 801a22a:	f8aa 2008 	strh.w	r2, [sl, #8]
 801a22e:	68f2      	ldr	r2, [r6, #12]
 801a230:	6852      	ldr	r2, [r2, #4]
 801a232:	f8ca 200c 	str.w	r2, [sl, #12]
 801a236:	69b2      	ldr	r2, [r6, #24]
 801a238:	6892      	ldr	r2, [r2, #8]
 801a23a:	f8ca 2010 	str.w	r2, [sl, #16]
 801a23e:	2900      	cmp	r1, #0
 801a240:	d02c      	beq.n	801a29c <ai_platform_api_get_network_report+0x174>
 801a242:	2200      	movs	r2, #0
 801a244:	f84b 2008 	str.w	r2, [fp, r8]
 801a248:	6832      	ldr	r2, [r6, #0]
 801a24a:	604a      	str	r2, [r1, #4]
 801a24c:	b332      	cbz	r2, 801a29c <ai_platform_api_get_network_report+0x174>
 801a24e:	8852      	ldrh	r2, [r2, #2]
 801a250:	b322      	cbz	r2, 801a29c <ai_platform_api_get_network_report+0x174>
 801a252:	600b      	str	r3, [r1, #0]
 801a254:	e023      	b.n	801a29e <ai_platform_api_get_network_report+0x176>
 801a256:	4b61      	ldr	r3, [pc, #388]	; (801a3dc <ai_platform_api_get_network_report+0x2b4>)
 801a258:	2201      	movs	r2, #1
 801a25a:	4619      	mov	r1, r3
 801a25c:	601a      	str	r2, [r3, #0]
 801a25e:	680b      	ldr	r3, [r1, #0]
 801a260:	2b00      	cmp	r3, #0
 801a262:	d1fc      	bne.n	801a25e <ai_platform_api_get_network_report+0x136>
 801a264:	4b5e      	ldr	r3, [pc, #376]	; (801a3e0 <ai_platform_api_get_network_report+0x2b8>)
 801a266:	495f      	ldr	r1, [pc, #380]	; (801a3e4 <ai_platform_api_get_network_report+0x2bc>)
 801a268:	4a5f      	ldr	r2, [pc, #380]	; (801a3e8 <ai_platform_api_get_network_report+0x2c0>)
 801a26a:	6019      	str	r1, [r3, #0]
 801a26c:	681b      	ldr	r3, [r3, #0]
 801a26e:	4293      	cmp	r3, r2
 801a270:	d080      	beq.n	801a174 <ai_platform_api_get_network_report+0x4c>
 801a272:	e7fe      	b.n	801a272 <ai_platform_api_get_network_report+0x14a>
 801a274:	4b5d      	ldr	r3, [pc, #372]	; (801a3ec <ai_platform_api_get_network_report+0x2c4>)
 801a276:	2201      	movs	r2, #1
 801a278:	4619      	mov	r1, r3
 801a27a:	601a      	str	r2, [r3, #0]
 801a27c:	680b      	ldr	r3, [r1, #0]
 801a27e:	2b00      	cmp	r3, #0
 801a280:	d1fc      	bne.n	801a27c <ai_platform_api_get_network_report+0x154>
 801a282:	4b5b      	ldr	r3, [pc, #364]	; (801a3f0 <ai_platform_api_get_network_report+0x2c8>)
 801a284:	4957      	ldr	r1, [pc, #348]	; (801a3e4 <ai_platform_api_get_network_report+0x2bc>)
 801a286:	4a58      	ldr	r2, [pc, #352]	; (801a3e8 <ai_platform_api_get_network_report+0x2c0>)
 801a288:	6019      	str	r1, [r3, #0]
 801a28a:	681b      	ldr	r3, [r3, #0]
 801a28c:	4293      	cmp	r3, r2
 801a28e:	f43f af71 	beq.w	801a174 <ai_platform_api_get_network_report+0x4c>
 801a292:	e7fe      	b.n	801a292 <ai_platform_api_get_network_report+0x16a>
 801a294:	2000      	movs	r0, #0
 801a296:	b005      	add	sp, #20
 801a298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a29c:	2100      	movs	r1, #0
 801a29e:	f8ca 1014 	str.w	r1, [sl, #20]
 801a2a2:	fa1f f289 	uxth.w	r2, r9
 801a2a6:	8839      	ldrh	r1, [r7, #0]
 801a2a8:	f108 0808 	add.w	r8, r8, #8
 801a2ac:	4589      	cmp	r9, r1
 801a2ae:	d207      	bcs.n	801a2c0 <ai_platform_api_get_network_report+0x198>
 801a2b0:	6879      	ldr	r1, [r7, #4]
 801a2b2:	b129      	cbz	r1, 801a2c0 <ai_platform_api_get_network_report+0x198>
 801a2b4:	f851 6029 	ldr.w	r6, [r1, r9, lsl #2]
 801a2b8:	f109 0901 	add.w	r9, r9, #1
 801a2bc:	2e00      	cmp	r6, #0
 801a2be:	d195      	bne.n	801a1ec <ai_platform_api_get_network_report+0xc4>
 801a2c0:	2a00      	cmp	r2, #0
 801a2c2:	d064      	beq.n	801a38e <ai_platform_api_get_network_report+0x266>
 801a2c4:	68bb      	ldr	r3, [r7, #8]
 801a2c6:	685b      	ldr	r3, [r3, #4]
 801a2c8:	8622      	strh	r2, [r4, #48]	; 0x30
 801a2ca:	6363      	str	r3, [r4, #52]	; 0x34
 801a2cc:	f8b5 3048 	ldrh.w	r3, [r5, #72]	; 0x48
 801a2d0:	2b01      	cmp	r3, #1
 801a2d2:	d970      	bls.n	801a3b6 <ai_platform_api_get_network_report+0x28e>
 801a2d4:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801a2d6:	f117 0f0c 	cmn.w	r7, #12
 801a2da:	d06c      	beq.n	801a3b6 <ai_platform_api_get_network_report+0x28e>
 801a2dc:	89bb      	ldrh	r3, [r7, #12]
 801a2de:	2b00      	cmp	r3, #0
 801a2e0:	d069      	beq.n	801a3b6 <ai_platform_api_get_network_report+0x28e>
 801a2e2:	693b      	ldr	r3, [r7, #16]
 801a2e4:	2b00      	cmp	r3, #0
 801a2e6:	d066      	beq.n	801a3b6 <ai_platform_api_get_network_report+0x28e>
 801a2e8:	681e      	ldr	r6, [r3, #0]
 801a2ea:	2e00      	cmp	r6, #0
 801a2ec:	d063      	beq.n	801a3b6 <ai_platform_api_get_network_report+0x28e>
 801a2ee:	f04f 0901 	mov.w	r9, #1
 801a2f2:	f04f 0800 	mov.w	r8, #0
 801a2f6:	464b      	mov	r3, r9
 801a2f8:	e01c      	b.n	801a334 <ai_platform_api_get_network_report+0x20c>
 801a2fa:	2200      	movs	r2, #0
 801a2fc:	f84b 2008 	str.w	r2, [fp, r8]
 801a300:	6832      	ldr	r2, [r6, #0]
 801a302:	604a      	str	r2, [r1, #4]
 801a304:	2a00      	cmp	r2, #0
 801a306:	d040      	beq.n	801a38a <ai_platform_api_get_network_report+0x262>
 801a308:	8852      	ldrh	r2, [r2, #2]
 801a30a:	2a00      	cmp	r2, #0
 801a30c:	d03d      	beq.n	801a38a <ai_platform_api_get_network_report+0x262>
 801a30e:	600b      	str	r3, [r1, #0]
 801a310:	f8ca 1014 	str.w	r1, [sl, #20]
 801a314:	fa1f f289 	uxth.w	r2, r9
 801a318:	89b9      	ldrh	r1, [r7, #12]
 801a31a:	f108 0808 	add.w	r8, r8, #8
 801a31e:	4589      	cmp	r9, r1
 801a320:	d268      	bcs.n	801a3f4 <ai_platform_api_get_network_report+0x2cc>
 801a322:	6939      	ldr	r1, [r7, #16]
 801a324:	2900      	cmp	r1, #0
 801a326:	d065      	beq.n	801a3f4 <ai_platform_api_get_network_report+0x2cc>
 801a328:	f851 6029 	ldr.w	r6, [r1, r9, lsl #2]
 801a32c:	f109 0901 	add.w	r9, r9, #1
 801a330:	2e00      	cmp	r6, #0
 801a332:	d05f      	beq.n	801a3f4 <ai_platform_api_get_network_report+0x2cc>
 801a334:	f8d7 c014 	ldr.w	ip, [r7, #20]
 801a338:	eb08 0248 	add.w	r2, r8, r8, lsl #1
 801a33c:	69b0      	ldr	r0, [r6, #24]
 801a33e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801a342:	6800      	ldr	r0, [r0, #0]
 801a344:	eb01 0a02 	add.w	sl, r1, r2
 801a348:	9303      	str	r3, [sp, #12]
 801a34a:	f8dc b008 	ldr.w	fp, [ip, #8]
 801a34e:	e9cd 1201 	strd	r1, r2, [sp, #4]
 801a352:	f003 fb19 	bl	801d988 <ai_array_to_buffer_fmt>
 801a356:	9b03      	ldr	r3, [sp, #12]
 801a358:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
 801a35c:	5088      	str	r0, [r1, r2]
 801a35e:	eb0b 0108 	add.w	r1, fp, r8
 801a362:	f8aa 3004 	strh.w	r3, [sl, #4]
 801a366:	68f2      	ldr	r2, [r6, #12]
 801a368:	68d2      	ldr	r2, [r2, #12]
 801a36a:	f8aa 2006 	strh.w	r2, [sl, #6]
 801a36e:	68f2      	ldr	r2, [r6, #12]
 801a370:	6892      	ldr	r2, [r2, #8]
 801a372:	f8aa 2008 	strh.w	r2, [sl, #8]
 801a376:	68f2      	ldr	r2, [r6, #12]
 801a378:	6852      	ldr	r2, [r2, #4]
 801a37a:	f8ca 200c 	str.w	r2, [sl, #12]
 801a37e:	69b2      	ldr	r2, [r6, #24]
 801a380:	6892      	ldr	r2, [r2, #8]
 801a382:	f8ca 2010 	str.w	r2, [sl, #16]
 801a386:	2900      	cmp	r1, #0
 801a388:	d1b7      	bne.n	801a2fa <ai_platform_api_get_network_report+0x1d2>
 801a38a:	2100      	movs	r1, #0
 801a38c:	e7c0      	b.n	801a310 <ai_platform_api_get_network_report+0x1e8>
 801a38e:	2600      	movs	r6, #0
 801a390:	f105 0010 	add.w	r0, r5, #16
 801a394:	2218      	movs	r2, #24
 801a396:	2112      	movs	r1, #18
 801a398:	8626      	strh	r6, [r4, #48]	; 0x30
 801a39a:	f000 fee7 	bl	801b16c <core_set_error>
 801a39e:	4630      	mov	r0, r6
 801a3a0:	b005      	add	sp, #20
 801a3a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a3a6:	f105 0010 	add.w	r0, r5, #16
 801a3aa:	2218      	movs	r2, #24
 801a3ac:	2111      	movs	r1, #17
 801a3ae:	f000 fedd 	bl	801b16c <core_set_error>
 801a3b2:	2000      	movs	r0, #0
 801a3b4:	e76f      	b.n	801a296 <ai_platform_api_get_network_report+0x16e>
 801a3b6:	2600      	movs	r6, #0
 801a3b8:	f105 0010 	add.w	r0, r5, #16
 801a3bc:	2218      	movs	r2, #24
 801a3be:	2113      	movs	r1, #19
 801a3c0:	8666      	strh	r6, [r4, #50]	; 0x32
 801a3c2:	f000 fed3 	bl	801b16c <core_set_error>
 801a3c6:	4630      	mov	r0, r6
 801a3c8:	e765      	b.n	801a296 <ai_platform_api_get_network_report+0x16e>
 801a3ca:	bf00      	nop
 801a3cc:	a1c00100 	.word	0xa1c00100
 801a3d0:	e0002000 	.word	0xe0002000
 801a3d4:	e0042000 	.word	0xe0042000
 801a3d8:	5c001000 	.word	0x5c001000
 801a3dc:	58024c08 	.word	0x58024c08
 801a3e0:	58024c00 	.word	0x58024c00
 801a3e4:	f407a5c2 	.word	0xf407a5c2
 801a3e8:	b5e8b5cd 	.word	0xb5e8b5cd
 801a3ec:	40023008 	.word	0x40023008
 801a3f0:	40023000 	.word	0x40023000
 801a3f4:	2a00      	cmp	r2, #0
 801a3f6:	d0de      	beq.n	801a3b6 <ai_platform_api_get_network_report+0x28e>
 801a3f8:	697b      	ldr	r3, [r7, #20]
 801a3fa:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 801a3fe:	f104 0c3c 	add.w	ip, r4, #60	; 0x3c
 801a402:	f105 0718 	add.w	r7, r5, #24
 801a406:	685b      	ldr	r3, [r3, #4]
 801a408:	f104 0654 	add.w	r6, r4, #84	; 0x54
 801a40c:	8662      	strh	r2, [r4, #50]	; 0x32
 801a40e:	63a3      	str	r3, [r4, #56]	; 0x38
 801a410:	686b      	ldr	r3, [r5, #4]
 801a412:	6723      	str	r3, [r4, #112]	; 0x70
 801a414:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a418:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a41c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801a420:	f8df e214 	ldr.w	lr, [pc, #532]	; 801a638 <ai_platform_api_get_network_report+0x510>
 801a424:	e88c 0003 	stmia.w	ip, {r0, r1}
 801a428:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801a42a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801a42c:	e897 0003 	ldmia.w	r7, {r0, r1}
 801a430:	4a7f      	ldr	r2, [pc, #508]	; (801a630 <ai_platform_api_get_network_report+0x508>)
 801a432:	e886 0003 	stmia.w	r6, {r0, r1}
 801a436:	f8de 3000 	ldr.w	r3, [lr]
 801a43a:	f46f 668a 	mvn.w	r6, #1104	; 0x450
 801a43e:	f023 0301 	bic.w	r3, r3, #1
 801a442:	f8ce 3000 	str.w	r3, [lr]
 801a446:	6813      	ldr	r3, [r2, #0]
 801a448:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a44c:	199a      	adds	r2, r3, r6
 801a44e:	2a01      	cmp	r2, #1
 801a450:	d972      	bls.n	801a538 <ai_platform_api_get_network_report+0x410>
 801a452:	f240 4249 	movw	r2, #1097	; 0x449
 801a456:	4293      	cmp	r3, r2
 801a458:	d06e      	beq.n	801a538 <ai_platform_api_get_network_report+0x410>
 801a45a:	4b76      	ldr	r3, [pc, #472]	; (801a634 <ai_platform_api_get_network_report+0x50c>)
 801a45c:	681b      	ldr	r3, [r3, #0]
 801a45e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a462:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801a466:	f000 80d2 	beq.w	801a60e <ai_platform_api_get_network_report+0x4e6>
 801a46a:	4a73      	ldr	r2, [pc, #460]	; (801a638 <ai_platform_api_get_network_report+0x510>)
 801a46c:	f46f 608a 	mvn.w	r0, #1104	; 0x450
 801a470:	4b72      	ldr	r3, [pc, #456]	; (801a63c <ai_platform_api_get_network_report+0x514>)
 801a472:	496f      	ldr	r1, [pc, #444]	; (801a630 <ai_platform_api_get_network_report+0x508>)
 801a474:	6123      	str	r3, [r4, #16]
 801a476:	6813      	ldr	r3, [r2, #0]
 801a478:	f023 0301 	bic.w	r3, r3, #1
 801a47c:	6013      	str	r3, [r2, #0]
 801a47e:	680b      	ldr	r3, [r1, #0]
 801a480:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a484:	181a      	adds	r2, r3, r0
 801a486:	2a01      	cmp	r2, #1
 801a488:	f240 80b1 	bls.w	801a5ee <ai_platform_api_get_network_report+0x4c6>
 801a48c:	f240 4249 	movw	r2, #1097	; 0x449
 801a490:	4293      	cmp	r3, r2
 801a492:	f000 80ac 	beq.w	801a5ee <ai_platform_api_get_network_report+0x4c6>
 801a496:	4b67      	ldr	r3, [pc, #412]	; (801a634 <ai_platform_api_get_network_report+0x50c>)
 801a498:	681b      	ldr	r3, [r3, #0]
 801a49a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a49e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801a4a2:	f000 8094 	beq.w	801a5ce <ai_platform_api_get_network_report+0x4a6>
 801a4a6:	4a64      	ldr	r2, [pc, #400]	; (801a638 <ai_platform_api_get_network_report+0x510>)
 801a4a8:	2306      	movs	r3, #6
 801a4aa:	4961      	ldr	r1, [pc, #388]	; (801a630 <ai_platform_api_get_network_report+0x508>)
 801a4ac:	6163      	str	r3, [r4, #20]
 801a4ae:	6813      	ldr	r3, [r2, #0]
 801a4b0:	f023 0301 	bic.w	r3, r3, #1
 801a4b4:	6013      	str	r3, [r2, #0]
 801a4b6:	680b      	ldr	r3, [r1, #0]
 801a4b8:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 801a4bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a4c0:	185a      	adds	r2, r3, r1
 801a4c2:	2a01      	cmp	r2, #1
 801a4c4:	d974      	bls.n	801a5b0 <ai_platform_api_get_network_report+0x488>
 801a4c6:	f240 4249 	movw	r2, #1097	; 0x449
 801a4ca:	4293      	cmp	r3, r2
 801a4cc:	d070      	beq.n	801a5b0 <ai_platform_api_get_network_report+0x488>
 801a4ce:	4b59      	ldr	r3, [pc, #356]	; (801a634 <ai_platform_api_get_network_report+0x50c>)
 801a4d0:	681b      	ldr	r3, [r3, #0]
 801a4d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a4d6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801a4da:	d05a      	beq.n	801a592 <ai_platform_api_get_network_report+0x46a>
 801a4dc:	4a56      	ldr	r2, [pc, #344]	; (801a638 <ai_platform_api_get_network_report+0x510>)
 801a4de:	f240 1301 	movw	r3, #257	; 0x101
 801a4e2:	4953      	ldr	r1, [pc, #332]	; (801a630 <ai_platform_api_get_network_report+0x508>)
 801a4e4:	6263      	str	r3, [r4, #36]	; 0x24
 801a4e6:	6813      	ldr	r3, [r2, #0]
 801a4e8:	f023 0301 	bic.w	r3, r3, #1
 801a4ec:	6013      	str	r3, [r2, #0]
 801a4ee:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801a4f2:	680b      	ldr	r3, [r1, #0]
 801a4f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a4f8:	189a      	adds	r2, r3, r2
 801a4fa:	2a01      	cmp	r2, #1
 801a4fc:	d93a      	bls.n	801a574 <ai_platform_api_get_network_report+0x44c>
 801a4fe:	f240 4249 	movw	r2, #1097	; 0x449
 801a502:	4293      	cmp	r3, r2
 801a504:	d036      	beq.n	801a574 <ai_platform_api_get_network_report+0x44c>
 801a506:	4b4b      	ldr	r3, [pc, #300]	; (801a634 <ai_platform_api_get_network_report+0x50c>)
 801a508:	681b      	ldr	r3, [r3, #0]
 801a50a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a50e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801a512:	d020      	beq.n	801a556 <ai_platform_api_get_network_report+0x42e>
 801a514:	f240 4301 	movw	r3, #1025	; 0x401
 801a518:	2200      	movs	r2, #0
 801a51a:	2001      	movs	r0, #1
 801a51c:	62a3      	str	r3, [r4, #40]	; 0x28
 801a51e:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 801a520:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
 801a524:	0e19      	lsrs	r1, r3, #24
 801a526:	0c1a      	lsrs	r2, r3, #16
 801a528:	0a1b      	lsrs	r3, r3, #8
 801a52a:	f884 1020 	strb.w	r1, [r4, #32]
 801a52e:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
 801a532:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 801a536:	e6ae      	b.n	801a296 <ai_platform_api_get_network_report+0x16e>
 801a538:	4b41      	ldr	r3, [pc, #260]	; (801a640 <ai_platform_api_get_network_report+0x518>)
 801a53a:	2201      	movs	r2, #1
 801a53c:	4619      	mov	r1, r3
 801a53e:	601a      	str	r2, [r3, #0]
 801a540:	680b      	ldr	r3, [r1, #0]
 801a542:	2b00      	cmp	r3, #0
 801a544:	d1fc      	bne.n	801a540 <ai_platform_api_get_network_report+0x418>
 801a546:	4b3f      	ldr	r3, [pc, #252]	; (801a644 <ai_platform_api_get_network_report+0x51c>)
 801a548:	493f      	ldr	r1, [pc, #252]	; (801a648 <ai_platform_api_get_network_report+0x520>)
 801a54a:	4a40      	ldr	r2, [pc, #256]	; (801a64c <ai_platform_api_get_network_report+0x524>)
 801a54c:	6019      	str	r1, [r3, #0]
 801a54e:	681b      	ldr	r3, [r3, #0]
 801a550:	4293      	cmp	r3, r2
 801a552:	d08a      	beq.n	801a46a <ai_platform_api_get_network_report+0x342>
 801a554:	e7fe      	b.n	801a554 <ai_platform_api_get_network_report+0x42c>
 801a556:	4b3e      	ldr	r3, [pc, #248]	; (801a650 <ai_platform_api_get_network_report+0x528>)
 801a558:	2201      	movs	r2, #1
 801a55a:	4619      	mov	r1, r3
 801a55c:	601a      	str	r2, [r3, #0]
 801a55e:	680b      	ldr	r3, [r1, #0]
 801a560:	2b00      	cmp	r3, #0
 801a562:	d1fc      	bne.n	801a55e <ai_platform_api_get_network_report+0x436>
 801a564:	4b3b      	ldr	r3, [pc, #236]	; (801a654 <ai_platform_api_get_network_report+0x52c>)
 801a566:	4938      	ldr	r1, [pc, #224]	; (801a648 <ai_platform_api_get_network_report+0x520>)
 801a568:	4a38      	ldr	r2, [pc, #224]	; (801a64c <ai_platform_api_get_network_report+0x524>)
 801a56a:	6019      	str	r1, [r3, #0]
 801a56c:	681b      	ldr	r3, [r3, #0]
 801a56e:	4293      	cmp	r3, r2
 801a570:	d0d0      	beq.n	801a514 <ai_platform_api_get_network_report+0x3ec>
 801a572:	e7fe      	b.n	801a572 <ai_platform_api_get_network_report+0x44a>
 801a574:	4b32      	ldr	r3, [pc, #200]	; (801a640 <ai_platform_api_get_network_report+0x518>)
 801a576:	2201      	movs	r2, #1
 801a578:	4619      	mov	r1, r3
 801a57a:	601a      	str	r2, [r3, #0]
 801a57c:	680b      	ldr	r3, [r1, #0]
 801a57e:	2b00      	cmp	r3, #0
 801a580:	d1fc      	bne.n	801a57c <ai_platform_api_get_network_report+0x454>
 801a582:	4b30      	ldr	r3, [pc, #192]	; (801a644 <ai_platform_api_get_network_report+0x51c>)
 801a584:	4930      	ldr	r1, [pc, #192]	; (801a648 <ai_platform_api_get_network_report+0x520>)
 801a586:	4a31      	ldr	r2, [pc, #196]	; (801a64c <ai_platform_api_get_network_report+0x524>)
 801a588:	6019      	str	r1, [r3, #0]
 801a58a:	681b      	ldr	r3, [r3, #0]
 801a58c:	4293      	cmp	r3, r2
 801a58e:	d0c1      	beq.n	801a514 <ai_platform_api_get_network_report+0x3ec>
 801a590:	e7fe      	b.n	801a590 <ai_platform_api_get_network_report+0x468>
 801a592:	4b2f      	ldr	r3, [pc, #188]	; (801a650 <ai_platform_api_get_network_report+0x528>)
 801a594:	2201      	movs	r2, #1
 801a596:	4619      	mov	r1, r3
 801a598:	601a      	str	r2, [r3, #0]
 801a59a:	680b      	ldr	r3, [r1, #0]
 801a59c:	2b00      	cmp	r3, #0
 801a59e:	d1fc      	bne.n	801a59a <ai_platform_api_get_network_report+0x472>
 801a5a0:	4b2c      	ldr	r3, [pc, #176]	; (801a654 <ai_platform_api_get_network_report+0x52c>)
 801a5a2:	4929      	ldr	r1, [pc, #164]	; (801a648 <ai_platform_api_get_network_report+0x520>)
 801a5a4:	4a29      	ldr	r2, [pc, #164]	; (801a64c <ai_platform_api_get_network_report+0x524>)
 801a5a6:	6019      	str	r1, [r3, #0]
 801a5a8:	681b      	ldr	r3, [r3, #0]
 801a5aa:	4293      	cmp	r3, r2
 801a5ac:	d096      	beq.n	801a4dc <ai_platform_api_get_network_report+0x3b4>
 801a5ae:	e7fe      	b.n	801a5ae <ai_platform_api_get_network_report+0x486>
 801a5b0:	4b23      	ldr	r3, [pc, #140]	; (801a640 <ai_platform_api_get_network_report+0x518>)
 801a5b2:	2201      	movs	r2, #1
 801a5b4:	4619      	mov	r1, r3
 801a5b6:	601a      	str	r2, [r3, #0]
 801a5b8:	680b      	ldr	r3, [r1, #0]
 801a5ba:	2b00      	cmp	r3, #0
 801a5bc:	d1fc      	bne.n	801a5b8 <ai_platform_api_get_network_report+0x490>
 801a5be:	4b21      	ldr	r3, [pc, #132]	; (801a644 <ai_platform_api_get_network_report+0x51c>)
 801a5c0:	4921      	ldr	r1, [pc, #132]	; (801a648 <ai_platform_api_get_network_report+0x520>)
 801a5c2:	4a22      	ldr	r2, [pc, #136]	; (801a64c <ai_platform_api_get_network_report+0x524>)
 801a5c4:	6019      	str	r1, [r3, #0]
 801a5c6:	681b      	ldr	r3, [r3, #0]
 801a5c8:	4293      	cmp	r3, r2
 801a5ca:	d087      	beq.n	801a4dc <ai_platform_api_get_network_report+0x3b4>
 801a5cc:	e7fe      	b.n	801a5cc <ai_platform_api_get_network_report+0x4a4>
 801a5ce:	4b20      	ldr	r3, [pc, #128]	; (801a650 <ai_platform_api_get_network_report+0x528>)
 801a5d0:	2201      	movs	r2, #1
 801a5d2:	4619      	mov	r1, r3
 801a5d4:	601a      	str	r2, [r3, #0]
 801a5d6:	680b      	ldr	r3, [r1, #0]
 801a5d8:	2b00      	cmp	r3, #0
 801a5da:	d1fc      	bne.n	801a5d6 <ai_platform_api_get_network_report+0x4ae>
 801a5dc:	4b1d      	ldr	r3, [pc, #116]	; (801a654 <ai_platform_api_get_network_report+0x52c>)
 801a5de:	491a      	ldr	r1, [pc, #104]	; (801a648 <ai_platform_api_get_network_report+0x520>)
 801a5e0:	4a1a      	ldr	r2, [pc, #104]	; (801a64c <ai_platform_api_get_network_report+0x524>)
 801a5e2:	6019      	str	r1, [r3, #0]
 801a5e4:	681b      	ldr	r3, [r3, #0]
 801a5e6:	4293      	cmp	r3, r2
 801a5e8:	f43f af5d 	beq.w	801a4a6 <ai_platform_api_get_network_report+0x37e>
 801a5ec:	e7fe      	b.n	801a5ec <ai_platform_api_get_network_report+0x4c4>
 801a5ee:	4b14      	ldr	r3, [pc, #80]	; (801a640 <ai_platform_api_get_network_report+0x518>)
 801a5f0:	2201      	movs	r2, #1
 801a5f2:	4619      	mov	r1, r3
 801a5f4:	601a      	str	r2, [r3, #0]
 801a5f6:	680b      	ldr	r3, [r1, #0]
 801a5f8:	2b00      	cmp	r3, #0
 801a5fa:	d1fc      	bne.n	801a5f6 <ai_platform_api_get_network_report+0x4ce>
 801a5fc:	4b11      	ldr	r3, [pc, #68]	; (801a644 <ai_platform_api_get_network_report+0x51c>)
 801a5fe:	4912      	ldr	r1, [pc, #72]	; (801a648 <ai_platform_api_get_network_report+0x520>)
 801a600:	4a12      	ldr	r2, [pc, #72]	; (801a64c <ai_platform_api_get_network_report+0x524>)
 801a602:	6019      	str	r1, [r3, #0]
 801a604:	681b      	ldr	r3, [r3, #0]
 801a606:	4293      	cmp	r3, r2
 801a608:	f43f af4d 	beq.w	801a4a6 <ai_platform_api_get_network_report+0x37e>
 801a60c:	e7fe      	b.n	801a60c <ai_platform_api_get_network_report+0x4e4>
 801a60e:	4b10      	ldr	r3, [pc, #64]	; (801a650 <ai_platform_api_get_network_report+0x528>)
 801a610:	2201      	movs	r2, #1
 801a612:	4619      	mov	r1, r3
 801a614:	601a      	str	r2, [r3, #0]
 801a616:	680b      	ldr	r3, [r1, #0]
 801a618:	2b00      	cmp	r3, #0
 801a61a:	d1fc      	bne.n	801a616 <ai_platform_api_get_network_report+0x4ee>
 801a61c:	4b0d      	ldr	r3, [pc, #52]	; (801a654 <ai_platform_api_get_network_report+0x52c>)
 801a61e:	490a      	ldr	r1, [pc, #40]	; (801a648 <ai_platform_api_get_network_report+0x520>)
 801a620:	4a0a      	ldr	r2, [pc, #40]	; (801a64c <ai_platform_api_get_network_report+0x524>)
 801a622:	6019      	str	r1, [r3, #0]
 801a624:	681b      	ldr	r3, [r3, #0]
 801a626:	4293      	cmp	r3, r2
 801a628:	f43f af1f 	beq.w	801a46a <ai_platform_api_get_network_report+0x342>
 801a62c:	e7fe      	b.n	801a62c <ai_platform_api_get_network_report+0x504>
 801a62e:	bf00      	nop
 801a630:	e0042000 	.word	0xe0042000
 801a634:	5c001000 	.word	0x5c001000
 801a638:	e0002000 	.word	0xe0002000
 801a63c:	0802062c 	.word	0x0802062c
 801a640:	40023008 	.word	0x40023008
 801a644:	40023000 	.word	0x40023000
 801a648:	f407a5c2 	.word	0xf407a5c2
 801a64c:	b5e8b5cd 	.word	0xb5e8b5cd
 801a650:	58024c08 	.word	0x58024c08
 801a654:	58024c00 	.word	0x58024c00

0801a658 <ai_platform_network_create>:
 801a658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a65c:	4d56      	ldr	r5, [pc, #344]	; (801a7b8 <ai_platform_network_create+0x160>)
 801a65e:	b082      	sub	sp, #8
 801a660:	4e56      	ldr	r6, [pc, #344]	; (801a7bc <ai_platform_network_create+0x164>)
 801a662:	6829      	ldr	r1, [r5, #0]
 801a664:	f89d 4020 	ldrb.w	r4, [sp, #32]
 801a668:	f021 0101 	bic.w	r1, r1, #1
 801a66c:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 801a670:	6029      	str	r1, [r5, #0]
 801a672:	f46f 658a 	mvn.w	r5, #1104	; 0x450
 801a676:	6831      	ldr	r1, [r6, #0]
 801a678:	f3c1 010a 	ubfx	r1, r1, #0, #11
 801a67c:	194d      	adds	r5, r1, r5
 801a67e:	2d01      	cmp	r5, #1
 801a680:	d939      	bls.n	801a6f6 <ai_platform_network_create+0x9e>
 801a682:	f240 4549 	movw	r5, #1097	; 0x449
 801a686:	42a9      	cmp	r1, r5
 801a688:	d035      	beq.n	801a6f6 <ai_platform_network_create+0x9e>
 801a68a:	494d      	ldr	r1, [pc, #308]	; (801a7c0 <ai_platform_network_create+0x168>)
 801a68c:	6809      	ldr	r1, [r1, #0]
 801a68e:	f3c1 010a 	ubfx	r1, r1, #0, #11
 801a692:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 801a696:	d01f      	beq.n	801a6d8 <ai_platform_network_create+0x80>
 801a698:	2800      	cmp	r0, #0
 801a69a:	d03b      	beq.n	801a714 <ai_platform_network_create+0xbc>
 801a69c:	4698      	mov	r8, r3
 801a69e:	4606      	mov	r6, r0
 801a6a0:	4b48      	ldr	r3, [pc, #288]	; (801a7c4 <ai_platform_network_create+0x16c>)
 801a6a2:	4615      	mov	r5, r2
 801a6a4:	6013      	str	r3, [r2, #0]
 801a6a6:	6032      	str	r2, [r6, #0]
 801a6a8:	f000 fd5e 	bl	801b168 <core_init>
 801a6ac:	2800      	cmp	r0, #0
 801a6ae:	d136      	bne.n	801a71e <ai_platform_network_create+0xc6>
 801a6b0:	ea4f 6808 	mov.w	r8, r8, lsl #24
 801a6b4:	2230      	movs	r2, #48	; 0x30
 801a6b6:	0424      	lsls	r4, r4, #16
 801a6b8:	2300      	movs	r3, #0
 801a6ba:	2110      	movs	r1, #16
 801a6bc:	6033      	str	r3, [r6, #0]
 801a6be:	2000      	movs	r0, #0
 801a6c0:	ea44 2307 	orr.w	r3, r4, r7, lsl #8
 801a6c4:	f362 0007 	bfi	r0, r2, #0, #8
 801a6c8:	ea43 0308 	orr.w	r3, r3, r8
 801a6cc:	f361 201f 	bfi	r0, r1, #8, #24
 801a6d0:	662b      	str	r3, [r5, #96]	; 0x60
 801a6d2:	b002      	add	sp, #8
 801a6d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a6d8:	493b      	ldr	r1, [pc, #236]	; (801a7c8 <ai_platform_network_create+0x170>)
 801a6da:	2501      	movs	r5, #1
 801a6dc:	460e      	mov	r6, r1
 801a6de:	600d      	str	r5, [r1, #0]
 801a6e0:	6831      	ldr	r1, [r6, #0]
 801a6e2:	2900      	cmp	r1, #0
 801a6e4:	d1fc      	bne.n	801a6e0 <ai_platform_network_create+0x88>
 801a6e6:	4939      	ldr	r1, [pc, #228]	; (801a7cc <ai_platform_network_create+0x174>)
 801a6e8:	4e39      	ldr	r6, [pc, #228]	; (801a7d0 <ai_platform_network_create+0x178>)
 801a6ea:	4d3a      	ldr	r5, [pc, #232]	; (801a7d4 <ai_platform_network_create+0x17c>)
 801a6ec:	600e      	str	r6, [r1, #0]
 801a6ee:	6809      	ldr	r1, [r1, #0]
 801a6f0:	42a9      	cmp	r1, r5
 801a6f2:	d0d1      	beq.n	801a698 <ai_platform_network_create+0x40>
 801a6f4:	e7fe      	b.n	801a6f4 <ai_platform_network_create+0x9c>
 801a6f6:	4938      	ldr	r1, [pc, #224]	; (801a7d8 <ai_platform_network_create+0x180>)
 801a6f8:	2501      	movs	r5, #1
 801a6fa:	460e      	mov	r6, r1
 801a6fc:	600d      	str	r5, [r1, #0]
 801a6fe:	6831      	ldr	r1, [r6, #0]
 801a700:	2900      	cmp	r1, #0
 801a702:	d1fc      	bne.n	801a6fe <ai_platform_network_create+0xa6>
 801a704:	4935      	ldr	r1, [pc, #212]	; (801a7dc <ai_platform_network_create+0x184>)
 801a706:	4e32      	ldr	r6, [pc, #200]	; (801a7d0 <ai_platform_network_create+0x178>)
 801a708:	4d32      	ldr	r5, [pc, #200]	; (801a7d4 <ai_platform_network_create+0x17c>)
 801a70a:	600e      	str	r6, [r1, #0]
 801a70c:	6809      	ldr	r1, [r1, #0]
 801a70e:	42a9      	cmp	r1, r5
 801a710:	d0c2      	beq.n	801a698 <ai_platform_network_create+0x40>
 801a712:	e7fe      	b.n	801a712 <ai_platform_network_create+0xba>
 801a714:	f241 0010 	movw	r0, #4112	; 0x1010
 801a718:	b002      	add	sp, #8
 801a71a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a71e:	4a26      	ldr	r2, [pc, #152]	; (801a7b8 <ai_platform_network_create+0x160>)
 801a720:	4926      	ldr	r1, [pc, #152]	; (801a7bc <ai_platform_network_create+0x164>)
 801a722:	6813      	ldr	r3, [r2, #0]
 801a724:	f023 0301 	bic.w	r3, r3, #1
 801a728:	6013      	str	r3, [r2, #0]
 801a72a:	f46f 638a 	mvn.w	r3, #1104	; 0x450
 801a72e:	680a      	ldr	r2, [r1, #0]
 801a730:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801a734:	18d3      	adds	r3, r2, r3
 801a736:	2b01      	cmp	r3, #1
 801a738:	d914      	bls.n	801a764 <ai_platform_network_create+0x10c>
 801a73a:	f240 4349 	movw	r3, #1097	; 0x449
 801a73e:	429a      	cmp	r2, r3
 801a740:	d010      	beq.n	801a764 <ai_platform_network_create+0x10c>
 801a742:	4b1f      	ldr	r3, [pc, #124]	; (801a7c0 <ai_platform_network_create+0x168>)
 801a744:	681b      	ldr	r3, [r3, #0]
 801a746:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a74a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801a74e:	d022      	beq.n	801a796 <ai_platform_network_create+0x13e>
 801a750:	ea4f 6808 	mov.w	r8, r8, lsl #24
 801a754:	0424      	lsls	r4, r4, #16
 801a756:	ea48 0304 	orr.w	r3, r8, r4
 801a75a:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 801a75e:	d010      	beq.n	801a782 <ai_platform_network_create+0x12a>
 801a760:	2201      	movs	r2, #1
 801a762:	e7a9      	b.n	801a6b8 <ai_platform_network_create+0x60>
 801a764:	4b1c      	ldr	r3, [pc, #112]	; (801a7d8 <ai_platform_network_create+0x180>)
 801a766:	2201      	movs	r2, #1
 801a768:	4619      	mov	r1, r3
 801a76a:	601a      	str	r2, [r3, #0]
 801a76c:	680b      	ldr	r3, [r1, #0]
 801a76e:	2b00      	cmp	r3, #0
 801a770:	d1fc      	bne.n	801a76c <ai_platform_network_create+0x114>
 801a772:	4b1a      	ldr	r3, [pc, #104]	; (801a7dc <ai_platform_network_create+0x184>)
 801a774:	4916      	ldr	r1, [pc, #88]	; (801a7d0 <ai_platform_network_create+0x178>)
 801a776:	4a17      	ldr	r2, [pc, #92]	; (801a7d4 <ai_platform_network_create+0x17c>)
 801a778:	6019      	str	r1, [r3, #0]
 801a77a:	681b      	ldr	r3, [r3, #0]
 801a77c:	4293      	cmp	r3, r2
 801a77e:	d0e7      	beq.n	801a750 <ai_platform_network_create+0xf8>
 801a780:	e7fe      	b.n	801a780 <ai_platform_network_create+0x128>
 801a782:	4b17      	ldr	r3, [pc, #92]	; (801a7e0 <ai_platform_network_create+0x188>)
 801a784:	a802      	add	r0, sp, #8
 801a786:	f840 3d04 	str.w	r3, [r0, #-4]!
 801a78a:	f003 f847 	bl	801d81c <ai_check_custom_types>
 801a78e:	b188      	cbz	r0, 801a7b4 <ai_platform_network_create+0x15c>
 801a790:	2100      	movs	r1, #0
 801a792:	460a      	mov	r2, r1
 801a794:	e793      	b.n	801a6be <ai_platform_network_create+0x66>
 801a796:	4b0c      	ldr	r3, [pc, #48]	; (801a7c8 <ai_platform_network_create+0x170>)
 801a798:	2201      	movs	r2, #1
 801a79a:	4619      	mov	r1, r3
 801a79c:	601a      	str	r2, [r3, #0]
 801a79e:	680b      	ldr	r3, [r1, #0]
 801a7a0:	2b00      	cmp	r3, #0
 801a7a2:	d1fc      	bne.n	801a79e <ai_platform_network_create+0x146>
 801a7a4:	4b09      	ldr	r3, [pc, #36]	; (801a7cc <ai_platform_network_create+0x174>)
 801a7a6:	490a      	ldr	r1, [pc, #40]	; (801a7d0 <ai_platform_network_create+0x178>)
 801a7a8:	4a0a      	ldr	r2, [pc, #40]	; (801a7d4 <ai_platform_network_create+0x17c>)
 801a7aa:	6019      	str	r1, [r3, #0]
 801a7ac:	681b      	ldr	r3, [r3, #0]
 801a7ae:	4293      	cmp	r3, r2
 801a7b0:	d0ce      	beq.n	801a750 <ai_platform_network_create+0xf8>
 801a7b2:	e7fe      	b.n	801a7b2 <ai_platform_network_create+0x15a>
 801a7b4:	2202      	movs	r2, #2
 801a7b6:	e77f      	b.n	801a6b8 <ai_platform_network_create+0x60>
 801a7b8:	e0002000 	.word	0xe0002000
 801a7bc:	e0042000 	.word	0xe0042000
 801a7c0:	5c001000 	.word	0x5c001000
 801a7c4:	a1c00100 	.word	0xa1c00100
 801a7c8:	58024c08 	.word	0x58024c08
 801a7cc:	58024c00 	.word	0x58024c00
 801a7d0:	f407a5c2 	.word	0xf407a5c2
 801a7d4:	b5e8b5cd 	.word	0xb5e8b5cd
 801a7d8:	40023008 	.word	0x40023008
 801a7dc:	40023000 	.word	0x40023000
 801a7e0:	84048403 	.word	0x84048403

0801a7e4 <ai_platform_network_destroy>:
 801a7e4:	b508      	push	{r3, lr}
 801a7e6:	b118      	cbz	r0, 801a7f0 <ai_platform_network_destroy+0xc>
 801a7e8:	4b3b      	ldr	r3, [pc, #236]	; (801a8d8 <ai_platform_network_destroy+0xf4>)
 801a7ea:	6802      	ldr	r2, [r0, #0]
 801a7ec:	429a      	cmp	r2, r3
 801a7ee:	d037      	beq.n	801a860 <ai_platform_network_destroy+0x7c>
 801a7f0:	4a3a      	ldr	r2, [pc, #232]	; (801a8dc <ai_platform_network_destroy+0xf8>)
 801a7f2:	493b      	ldr	r1, [pc, #236]	; (801a8e0 <ai_platform_network_destroy+0xfc>)
 801a7f4:	6813      	ldr	r3, [r2, #0]
 801a7f6:	f023 0301 	bic.w	r3, r3, #1
 801a7fa:	6013      	str	r3, [r2, #0]
 801a7fc:	680b      	ldr	r3, [r1, #0]
 801a7fe:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 801a802:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a806:	185a      	adds	r2, r3, r1
 801a808:	2a01      	cmp	r2, #1
 801a80a:	d91a      	bls.n	801a842 <ai_platform_network_destroy+0x5e>
 801a80c:	f240 4249 	movw	r2, #1097	; 0x449
 801a810:	4293      	cmp	r3, r2
 801a812:	d016      	beq.n	801a842 <ai_platform_network_destroy+0x5e>
 801a814:	4b33      	ldr	r3, [pc, #204]	; (801a8e4 <ai_platform_network_destroy+0x100>)
 801a816:	681b      	ldr	r3, [r3, #0]
 801a818:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a81c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801a820:	d000      	beq.n	801a824 <ai_platform_network_destroy+0x40>
 801a822:	bd08      	pop	{r3, pc}
 801a824:	4b30      	ldr	r3, [pc, #192]	; (801a8e8 <ai_platform_network_destroy+0x104>)
 801a826:	2201      	movs	r2, #1
 801a828:	4619      	mov	r1, r3
 801a82a:	601a      	str	r2, [r3, #0]
 801a82c:	680b      	ldr	r3, [r1, #0]
 801a82e:	2b00      	cmp	r3, #0
 801a830:	d1fc      	bne.n	801a82c <ai_platform_network_destroy+0x48>
 801a832:	4b2e      	ldr	r3, [pc, #184]	; (801a8ec <ai_platform_network_destroy+0x108>)
 801a834:	492e      	ldr	r1, [pc, #184]	; (801a8f0 <ai_platform_network_destroy+0x10c>)
 801a836:	4a2f      	ldr	r2, [pc, #188]	; (801a8f4 <ai_platform_network_destroy+0x110>)
 801a838:	6019      	str	r1, [r3, #0]
 801a83a:	681b      	ldr	r3, [r3, #0]
 801a83c:	4293      	cmp	r3, r2
 801a83e:	d0f0      	beq.n	801a822 <ai_platform_network_destroy+0x3e>
 801a840:	e7fe      	b.n	801a840 <ai_platform_network_destroy+0x5c>
 801a842:	4b2d      	ldr	r3, [pc, #180]	; (801a8f8 <ai_platform_network_destroy+0x114>)
 801a844:	2201      	movs	r2, #1
 801a846:	4619      	mov	r1, r3
 801a848:	601a      	str	r2, [r3, #0]
 801a84a:	680b      	ldr	r3, [r1, #0]
 801a84c:	2b00      	cmp	r3, #0
 801a84e:	d1fc      	bne.n	801a84a <ai_platform_network_destroy+0x66>
 801a850:	4b2a      	ldr	r3, [pc, #168]	; (801a8fc <ai_platform_network_destroy+0x118>)
 801a852:	4927      	ldr	r1, [pc, #156]	; (801a8f0 <ai_platform_network_destroy+0x10c>)
 801a854:	4a27      	ldr	r2, [pc, #156]	; (801a8f4 <ai_platform_network_destroy+0x110>)
 801a856:	6019      	str	r1, [r3, #0]
 801a858:	681b      	ldr	r3, [r3, #0]
 801a85a:	4293      	cmp	r3, r2
 801a85c:	d0e1      	beq.n	801a822 <ai_platform_network_destroy+0x3e>
 801a85e:	e7fe      	b.n	801a85e <ai_platform_network_destroy+0x7a>
 801a860:	4a1e      	ldr	r2, [pc, #120]	; (801a8dc <ai_platform_network_destroy+0xf8>)
 801a862:	491f      	ldr	r1, [pc, #124]	; (801a8e0 <ai_platform_network_destroy+0xfc>)
 801a864:	6813      	ldr	r3, [r2, #0]
 801a866:	f023 0301 	bic.w	r3, r3, #1
 801a86a:	6013      	str	r3, [r2, #0]
 801a86c:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801a870:	680b      	ldr	r3, [r1, #0]
 801a872:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a876:	189a      	adds	r2, r3, r2
 801a878:	2a01      	cmp	r2, #1
 801a87a:	d90e      	bls.n	801a89a <ai_platform_network_destroy+0xb6>
 801a87c:	f240 4249 	movw	r2, #1097	; 0x449
 801a880:	4293      	cmp	r3, r2
 801a882:	d00a      	beq.n	801a89a <ai_platform_network_destroy+0xb6>
 801a884:	4b17      	ldr	r3, [pc, #92]	; (801a8e4 <ai_platform_network_destroy+0x100>)
 801a886:	681b      	ldr	r3, [r3, #0]
 801a888:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a88c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801a890:	d012      	beq.n	801a8b8 <ai_platform_network_destroy+0xd4>
 801a892:	f003 f863 	bl	801d95c <ai_layers_destroy_all>
 801a896:	2000      	movs	r0, #0
 801a898:	bd08      	pop	{r3, pc}
 801a89a:	4b17      	ldr	r3, [pc, #92]	; (801a8f8 <ai_platform_network_destroy+0x114>)
 801a89c:	2201      	movs	r2, #1
 801a89e:	4619      	mov	r1, r3
 801a8a0:	601a      	str	r2, [r3, #0]
 801a8a2:	680b      	ldr	r3, [r1, #0]
 801a8a4:	2b00      	cmp	r3, #0
 801a8a6:	d1fc      	bne.n	801a8a2 <ai_platform_network_destroy+0xbe>
 801a8a8:	4b14      	ldr	r3, [pc, #80]	; (801a8fc <ai_platform_network_destroy+0x118>)
 801a8aa:	4911      	ldr	r1, [pc, #68]	; (801a8f0 <ai_platform_network_destroy+0x10c>)
 801a8ac:	4a11      	ldr	r2, [pc, #68]	; (801a8f4 <ai_platform_network_destroy+0x110>)
 801a8ae:	6019      	str	r1, [r3, #0]
 801a8b0:	681b      	ldr	r3, [r3, #0]
 801a8b2:	4293      	cmp	r3, r2
 801a8b4:	d0ed      	beq.n	801a892 <ai_platform_network_destroy+0xae>
 801a8b6:	e7fe      	b.n	801a8b6 <ai_platform_network_destroy+0xd2>
 801a8b8:	4b0b      	ldr	r3, [pc, #44]	; (801a8e8 <ai_platform_network_destroy+0x104>)
 801a8ba:	2201      	movs	r2, #1
 801a8bc:	4619      	mov	r1, r3
 801a8be:	601a      	str	r2, [r3, #0]
 801a8c0:	680b      	ldr	r3, [r1, #0]
 801a8c2:	2b00      	cmp	r3, #0
 801a8c4:	d1fc      	bne.n	801a8c0 <ai_platform_network_destroy+0xdc>
 801a8c6:	4b09      	ldr	r3, [pc, #36]	; (801a8ec <ai_platform_network_destroy+0x108>)
 801a8c8:	4909      	ldr	r1, [pc, #36]	; (801a8f0 <ai_platform_network_destroy+0x10c>)
 801a8ca:	4a0a      	ldr	r2, [pc, #40]	; (801a8f4 <ai_platform_network_destroy+0x110>)
 801a8cc:	6019      	str	r1, [r3, #0]
 801a8ce:	681b      	ldr	r3, [r3, #0]
 801a8d0:	4293      	cmp	r3, r2
 801a8d2:	d0de      	beq.n	801a892 <ai_platform_network_destroy+0xae>
 801a8d4:	e7fe      	b.n	801a8d4 <ai_platform_network_destroy+0xf0>
 801a8d6:	bf00      	nop
 801a8d8:	a1c00100 	.word	0xa1c00100
 801a8dc:	e0002000 	.word	0xe0002000
 801a8e0:	e0042000 	.word	0xe0042000
 801a8e4:	5c001000 	.word	0x5c001000
 801a8e8:	58024c08 	.word	0x58024c08
 801a8ec:	58024c00 	.word	0x58024c00
 801a8f0:	f407a5c2 	.word	0xf407a5c2
 801a8f4:	b5e8b5cd 	.word	0xb5e8b5cd
 801a8f8:	40023008 	.word	0x40023008
 801a8fc:	40023000 	.word	0x40023000

0801a900 <ai_platform_network_init>:
 801a900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a902:	2800      	cmp	r0, #0
 801a904:	d061      	beq.n	801a9ca <ai_platform_network_init+0xca>
 801a906:	4b61      	ldr	r3, [pc, #388]	; (801aa8c <ai_platform_network_init+0x18c>)
 801a908:	6802      	ldr	r2, [r0, #0]
 801a90a:	429a      	cmp	r2, r3
 801a90c:	d15d      	bne.n	801a9ca <ai_platform_network_init+0xca>
 801a90e:	4a60      	ldr	r2, [pc, #384]	; (801aa90 <ai_platform_network_init+0x190>)
 801a910:	4c60      	ldr	r4, [pc, #384]	; (801aa94 <ai_platform_network_init+0x194>)
 801a912:	6813      	ldr	r3, [r2, #0]
 801a914:	f023 0301 	bic.w	r3, r3, #1
 801a918:	6013      	str	r3, [r2, #0]
 801a91a:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801a91e:	6823      	ldr	r3, [r4, #0]
 801a920:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a924:	189a      	adds	r2, r3, r2
 801a926:	2a01      	cmp	r2, #1
 801a928:	d92f      	bls.n	801a98a <ai_platform_network_init+0x8a>
 801a92a:	f240 4249 	movw	r2, #1097	; 0x449
 801a92e:	4293      	cmp	r3, r2
 801a930:	d02b      	beq.n	801a98a <ai_platform_network_init+0x8a>
 801a932:	4b59      	ldr	r3, [pc, #356]	; (801aa98 <ai_platform_network_init+0x198>)
 801a934:	681b      	ldr	r3, [r3, #0]
 801a936:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a93a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801a93e:	d05f      	beq.n	801aa00 <ai_platform_network_init+0x100>
 801a940:	4605      	mov	r5, r0
 801a942:	460c      	mov	r4, r1
 801a944:	2900      	cmp	r1, #0
 801a946:	f000 8099 	beq.w	801aa7c <ai_platform_network_init+0x17c>
 801a94a:	6a8f      	ldr	r7, [r1, #40]	; 0x28
 801a94c:	690e      	ldr	r6, [r1, #16]
 801a94e:	2f00      	cmp	r7, #0
 801a950:	f000 8083 	beq.w	801aa5a <ai_platform_network_init+0x15a>
 801a954:	b346      	cbz	r6, 801a9a8 <ai_platform_network_init+0xa8>
 801a956:	f105 0c18 	add.w	ip, r5, #24
 801a95a:	f104 0718 	add.w	r7, r4, #24
 801a95e:	f105 0630 	add.w	r6, r5, #48	; 0x30
 801a962:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a964:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a968:	e894 0003 	ldmia.w	r4, {r0, r1}
 801a96c:	2403      	movs	r4, #3
 801a96e:	e88c 0003 	stmia.w	ip, {r0, r1}
 801a972:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801a974:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801a976:	e897 0003 	ldmia.w	r7, {r0, r1}
 801a97a:	e886 0003 	stmia.w	r6, {r0, r1}
 801a97e:	60ec      	str	r4, [r5, #12]
 801a980:	4628      	mov	r0, r5
 801a982:	f002 ff75 	bl	801d870 <ai_layers_init_all>
 801a986:	4628      	mov	r0, r5
 801a988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a98a:	4b44      	ldr	r3, [pc, #272]	; (801aa9c <ai_platform_network_init+0x19c>)
 801a98c:	2201      	movs	r2, #1
 801a98e:	461c      	mov	r4, r3
 801a990:	601a      	str	r2, [r3, #0]
 801a992:	6823      	ldr	r3, [r4, #0]
 801a994:	2b00      	cmp	r3, #0
 801a996:	d1fc      	bne.n	801a992 <ai_platform_network_init+0x92>
 801a998:	4b41      	ldr	r3, [pc, #260]	; (801aaa0 <ai_platform_network_init+0x1a0>)
 801a99a:	4c42      	ldr	r4, [pc, #264]	; (801aaa4 <ai_platform_network_init+0x1a4>)
 801a99c:	4a42      	ldr	r2, [pc, #264]	; (801aaa8 <ai_platform_network_init+0x1a8>)
 801a99e:	601c      	str	r4, [r3, #0]
 801a9a0:	681b      	ldr	r3, [r3, #0]
 801a9a2:	4293      	cmp	r3, r2
 801a9a4:	d0cc      	beq.n	801a940 <ai_platform_network_init+0x40>
 801a9a6:	e7fe      	b.n	801a9a6 <ai_platform_network_init+0xa6>
 801a9a8:	8921      	ldrh	r1, [r4, #8]
 801a9aa:	88e2      	ldrh	r2, [r4, #6]
 801a9ac:	68e3      	ldr	r3, [r4, #12]
 801a9ae:	fb02 f201 	mul.w	r2, r2, r1
 801a9b2:	fb03 f302 	mul.w	r3, r3, r2
 801a9b6:	2b00      	cmp	r3, #0
 801a9b8:	d0cd      	beq.n	801a956 <ai_platform_network_init+0x56>
 801a9ba:	f105 0010 	add.w	r0, r5, #16
 801a9be:	2212      	movs	r2, #18
 801a9c0:	2110      	movs	r1, #16
 801a9c2:	f000 fbd3 	bl	801b16c <core_set_error>
 801a9c6:	4630      	mov	r0, r6
 801a9c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a9ca:	4a31      	ldr	r2, [pc, #196]	; (801aa90 <ai_platform_network_init+0x190>)
 801a9cc:	4931      	ldr	r1, [pc, #196]	; (801aa94 <ai_platform_network_init+0x194>)
 801a9ce:	6813      	ldr	r3, [r2, #0]
 801a9d0:	f023 0301 	bic.w	r3, r3, #1
 801a9d4:	6013      	str	r3, [r2, #0]
 801a9d6:	680b      	ldr	r3, [r1, #0]
 801a9d8:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 801a9dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a9e0:	185a      	adds	r2, r3, r1
 801a9e2:	2a01      	cmp	r2, #1
 801a9e4:	d91b      	bls.n	801aa1e <ai_platform_network_init+0x11e>
 801a9e6:	f240 4249 	movw	r2, #1097	; 0x449
 801a9ea:	4293      	cmp	r3, r2
 801a9ec:	d017      	beq.n	801aa1e <ai_platform_network_init+0x11e>
 801a9ee:	4b2a      	ldr	r3, [pc, #168]	; (801aa98 <ai_platform_network_init+0x198>)
 801a9f0:	681b      	ldr	r3, [r3, #0]
 801a9f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801a9f6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801a9fa:	d01f      	beq.n	801aa3c <ai_platform_network_init+0x13c>
 801a9fc:	2000      	movs	r0, #0
 801a9fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aa00:	4b2a      	ldr	r3, [pc, #168]	; (801aaac <ai_platform_network_init+0x1ac>)
 801aa02:	2201      	movs	r2, #1
 801aa04:	461c      	mov	r4, r3
 801aa06:	601a      	str	r2, [r3, #0]
 801aa08:	6823      	ldr	r3, [r4, #0]
 801aa0a:	2b00      	cmp	r3, #0
 801aa0c:	d1fc      	bne.n	801aa08 <ai_platform_network_init+0x108>
 801aa0e:	4b28      	ldr	r3, [pc, #160]	; (801aab0 <ai_platform_network_init+0x1b0>)
 801aa10:	4c24      	ldr	r4, [pc, #144]	; (801aaa4 <ai_platform_network_init+0x1a4>)
 801aa12:	4a25      	ldr	r2, [pc, #148]	; (801aaa8 <ai_platform_network_init+0x1a8>)
 801aa14:	601c      	str	r4, [r3, #0]
 801aa16:	681b      	ldr	r3, [r3, #0]
 801aa18:	4293      	cmp	r3, r2
 801aa1a:	d091      	beq.n	801a940 <ai_platform_network_init+0x40>
 801aa1c:	e7fe      	b.n	801aa1c <ai_platform_network_init+0x11c>
 801aa1e:	4b1f      	ldr	r3, [pc, #124]	; (801aa9c <ai_platform_network_init+0x19c>)
 801aa20:	2201      	movs	r2, #1
 801aa22:	4619      	mov	r1, r3
 801aa24:	601a      	str	r2, [r3, #0]
 801aa26:	680b      	ldr	r3, [r1, #0]
 801aa28:	2b00      	cmp	r3, #0
 801aa2a:	d1fc      	bne.n	801aa26 <ai_platform_network_init+0x126>
 801aa2c:	4b1c      	ldr	r3, [pc, #112]	; (801aaa0 <ai_platform_network_init+0x1a0>)
 801aa2e:	491d      	ldr	r1, [pc, #116]	; (801aaa4 <ai_platform_network_init+0x1a4>)
 801aa30:	4a1d      	ldr	r2, [pc, #116]	; (801aaa8 <ai_platform_network_init+0x1a8>)
 801aa32:	6019      	str	r1, [r3, #0]
 801aa34:	681b      	ldr	r3, [r3, #0]
 801aa36:	4293      	cmp	r3, r2
 801aa38:	d0e0      	beq.n	801a9fc <ai_platform_network_init+0xfc>
 801aa3a:	e7fe      	b.n	801aa3a <ai_platform_network_init+0x13a>
 801aa3c:	4b1b      	ldr	r3, [pc, #108]	; (801aaac <ai_platform_network_init+0x1ac>)
 801aa3e:	2201      	movs	r2, #1
 801aa40:	4619      	mov	r1, r3
 801aa42:	601a      	str	r2, [r3, #0]
 801aa44:	680b      	ldr	r3, [r1, #0]
 801aa46:	2b00      	cmp	r3, #0
 801aa48:	d1fc      	bne.n	801aa44 <ai_platform_network_init+0x144>
 801aa4a:	4b19      	ldr	r3, [pc, #100]	; (801aab0 <ai_platform_network_init+0x1b0>)
 801aa4c:	4915      	ldr	r1, [pc, #84]	; (801aaa4 <ai_platform_network_init+0x1a4>)
 801aa4e:	4a16      	ldr	r2, [pc, #88]	; (801aaa8 <ai_platform_network_init+0x1a8>)
 801aa50:	6019      	str	r1, [r3, #0]
 801aa52:	681b      	ldr	r3, [r3, #0]
 801aa54:	4293      	cmp	r3, r2
 801aa56:	d0d1      	beq.n	801a9fc <ai_platform_network_init+0xfc>
 801aa58:	e7fe      	b.n	801aa58 <ai_platform_network_init+0x158>
 801aa5a:	8c09      	ldrh	r1, [r1, #32]
 801aa5c:	8be2      	ldrh	r2, [r4, #30]
 801aa5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801aa60:	fb02 f201 	mul.w	r2, r2, r1
 801aa64:	fb03 f302 	mul.w	r3, r3, r2
 801aa68:	2b00      	cmp	r3, #0
 801aa6a:	f43f af73 	beq.w	801a954 <ai_platform_network_init+0x54>
 801aa6e:	2213      	movs	r2, #19
 801aa70:	2110      	movs	r1, #16
 801aa72:	3010      	adds	r0, #16
 801aa74:	f000 fb7a 	bl	801b16c <core_set_error>
 801aa78:	4638      	mov	r0, r7
 801aa7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aa7c:	2211      	movs	r2, #17
 801aa7e:	2110      	movs	r1, #16
 801aa80:	3010      	adds	r0, #16
 801aa82:	f000 fb73 	bl	801b16c <core_set_error>
 801aa86:	4620      	mov	r0, r4
 801aa88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aa8a:	bf00      	nop
 801aa8c:	a1c00100 	.word	0xa1c00100
 801aa90:	e0002000 	.word	0xe0002000
 801aa94:	e0042000 	.word	0xe0042000
 801aa98:	5c001000 	.word	0x5c001000
 801aa9c:	40023008 	.word	0x40023008
 801aaa0:	40023000 	.word	0x40023000
 801aaa4:	f407a5c2 	.word	0xf407a5c2
 801aaa8:	b5e8b5cd 	.word	0xb5e8b5cd
 801aaac:	58024c08 	.word	0x58024c08
 801aab0:	58024c00 	.word	0x58024c00

0801aab4 <ai_platform_network_post_init>:
 801aab4:	b538      	push	{r3, r4, r5, lr}
 801aab6:	b118      	cbz	r0, 801aac0 <ai_platform_network_post_init+0xc>
 801aab8:	4b4b      	ldr	r3, [pc, #300]	; (801abe8 <ai_platform_network_post_init+0x134>)
 801aaba:	6802      	ldr	r2, [r0, #0]
 801aabc:	429a      	cmp	r2, r3
 801aabe:	d029      	beq.n	801ab14 <ai_platform_network_post_init+0x60>
 801aac0:	4a4a      	ldr	r2, [pc, #296]	; (801abec <ai_platform_network_post_init+0x138>)
 801aac2:	494b      	ldr	r1, [pc, #300]	; (801abf0 <ai_platform_network_post_init+0x13c>)
 801aac4:	6813      	ldr	r3, [r2, #0]
 801aac6:	f023 0301 	bic.w	r3, r3, #1
 801aaca:	6013      	str	r3, [r2, #0]
 801aacc:	680b      	ldr	r3, [r1, #0]
 801aace:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 801aad2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801aad6:	185a      	adds	r2, r3, r1
 801aad8:	2a01      	cmp	r2, #1
 801aada:	d90c      	bls.n	801aaf6 <ai_platform_network_post_init+0x42>
 801aadc:	f240 4249 	movw	r2, #1097	; 0x449
 801aae0:	4293      	cmp	r3, r2
 801aae2:	d008      	beq.n	801aaf6 <ai_platform_network_post_init+0x42>
 801aae4:	4b43      	ldr	r3, [pc, #268]	; (801abf4 <ai_platform_network_post_init+0x140>)
 801aae6:	681b      	ldr	r3, [r3, #0]
 801aae8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801aaec:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801aaf0:	d046      	beq.n	801ab80 <ai_platform_network_post_init+0xcc>
 801aaf2:	2000      	movs	r0, #0
 801aaf4:	bd38      	pop	{r3, r4, r5, pc}
 801aaf6:	4b40      	ldr	r3, [pc, #256]	; (801abf8 <ai_platform_network_post_init+0x144>)
 801aaf8:	2201      	movs	r2, #1
 801aafa:	4619      	mov	r1, r3
 801aafc:	601a      	str	r2, [r3, #0]
 801aafe:	680b      	ldr	r3, [r1, #0]
 801ab00:	2b00      	cmp	r3, #0
 801ab02:	d1fc      	bne.n	801aafe <ai_platform_network_post_init+0x4a>
 801ab04:	4b3d      	ldr	r3, [pc, #244]	; (801abfc <ai_platform_network_post_init+0x148>)
 801ab06:	493e      	ldr	r1, [pc, #248]	; (801ac00 <ai_platform_network_post_init+0x14c>)
 801ab08:	4a3e      	ldr	r2, [pc, #248]	; (801ac04 <ai_platform_network_post_init+0x150>)
 801ab0a:	6019      	str	r1, [r3, #0]
 801ab0c:	681b      	ldr	r3, [r3, #0]
 801ab0e:	4293      	cmp	r3, r2
 801ab10:	d0ef      	beq.n	801aaf2 <ai_platform_network_post_init+0x3e>
 801ab12:	e7fe      	b.n	801ab12 <ai_platform_network_post_init+0x5e>
 801ab14:	4a35      	ldr	r2, [pc, #212]	; (801abec <ai_platform_network_post_init+0x138>)
 801ab16:	4936      	ldr	r1, [pc, #216]	; (801abf0 <ai_platform_network_post_init+0x13c>)
 801ab18:	6813      	ldr	r3, [r2, #0]
 801ab1a:	f023 0301 	bic.w	r3, r3, #1
 801ab1e:	6013      	str	r3, [r2, #0]
 801ab20:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801ab24:	680b      	ldr	r3, [r1, #0]
 801ab26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801ab2a:	189a      	adds	r2, r3, r2
 801ab2c:	2a01      	cmp	r2, #1
 801ab2e:	d94c      	bls.n	801abca <ai_platform_network_post_init+0x116>
 801ab30:	f240 4249 	movw	r2, #1097	; 0x449
 801ab34:	4293      	cmp	r3, r2
 801ab36:	d048      	beq.n	801abca <ai_platform_network_post_init+0x116>
 801ab38:	4b2e      	ldr	r3, [pc, #184]	; (801abf4 <ai_platform_network_post_init+0x140>)
 801ab3a:	681b      	ldr	r3, [r3, #0]
 801ab3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801ab40:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801ab44:	d032      	beq.n	801abac <ai_platform_network_post_init+0xf8>
 801ab46:	68c3      	ldr	r3, [r0, #12]
 801ab48:	4604      	mov	r4, r0
 801ab4a:	f013 0502 	ands.w	r5, r3, #2
 801ab4e:	d026      	beq.n	801ab9e <ai_platform_network_post_init+0xea>
 801ab50:	f002 fea2 	bl	801d898 <ai_layers_post_init_all>
 801ab54:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801ab56:	b18b      	cbz	r3, 801ab7c <ai_platform_network_post_init+0xc8>
 801ab58:	6d25      	ldr	r5, [r4, #80]	; 0x50
 801ab5a:	b90d      	cbnz	r5, 801ab60 <ai_platform_network_post_init+0xac>
 801ab5c:	e00e      	b.n	801ab7c <ai_platform_network_post_init+0xc8>
 801ab5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801ab60:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 801ab62:	4629      	mov	r1, r5
 801ab64:	2000      	movs	r0, #0
 801ab66:	4798      	blx	r3
 801ab68:	692a      	ldr	r2, [r5, #16]
 801ab6a:	1b53      	subs	r3, r2, r5
 801ab6c:	4615      	mov	r5, r2
 801ab6e:	bf18      	it	ne
 801ab70:	2301      	movne	r3, #1
 801ab72:	2a00      	cmp	r2, #0
 801ab74:	bf08      	it	eq
 801ab76:	2300      	moveq	r3, #0
 801ab78:	2b00      	cmp	r3, #0
 801ab7a:	d1f0      	bne.n	801ab5e <ai_platform_network_post_init+0xaa>
 801ab7c:	2001      	movs	r0, #1
 801ab7e:	bd38      	pop	{r3, r4, r5, pc}
 801ab80:	4b21      	ldr	r3, [pc, #132]	; (801ac08 <ai_platform_network_post_init+0x154>)
 801ab82:	2201      	movs	r2, #1
 801ab84:	4619      	mov	r1, r3
 801ab86:	601a      	str	r2, [r3, #0]
 801ab88:	680b      	ldr	r3, [r1, #0]
 801ab8a:	2b00      	cmp	r3, #0
 801ab8c:	d1fc      	bne.n	801ab88 <ai_platform_network_post_init+0xd4>
 801ab8e:	4b1f      	ldr	r3, [pc, #124]	; (801ac0c <ai_platform_network_post_init+0x158>)
 801ab90:	491b      	ldr	r1, [pc, #108]	; (801ac00 <ai_platform_network_post_init+0x14c>)
 801ab92:	4a1c      	ldr	r2, [pc, #112]	; (801ac04 <ai_platform_network_post_init+0x150>)
 801ab94:	6019      	str	r1, [r3, #0]
 801ab96:	681b      	ldr	r3, [r3, #0]
 801ab98:	4293      	cmp	r3, r2
 801ab9a:	d0aa      	beq.n	801aaf2 <ai_platform_network_post_init+0x3e>
 801ab9c:	e7fe      	b.n	801ab9c <ai_platform_network_post_init+0xe8>
 801ab9e:	2210      	movs	r2, #16
 801aba0:	2111      	movs	r1, #17
 801aba2:	3010      	adds	r0, #16
 801aba4:	f000 fae2 	bl	801b16c <core_set_error>
 801aba8:	4628      	mov	r0, r5
 801abaa:	bd38      	pop	{r3, r4, r5, pc}
 801abac:	4b16      	ldr	r3, [pc, #88]	; (801ac08 <ai_platform_network_post_init+0x154>)
 801abae:	2201      	movs	r2, #1
 801abb0:	4619      	mov	r1, r3
 801abb2:	601a      	str	r2, [r3, #0]
 801abb4:	680b      	ldr	r3, [r1, #0]
 801abb6:	2b00      	cmp	r3, #0
 801abb8:	d1fc      	bne.n	801abb4 <ai_platform_network_post_init+0x100>
 801abba:	4b14      	ldr	r3, [pc, #80]	; (801ac0c <ai_platform_network_post_init+0x158>)
 801abbc:	4910      	ldr	r1, [pc, #64]	; (801ac00 <ai_platform_network_post_init+0x14c>)
 801abbe:	4a11      	ldr	r2, [pc, #68]	; (801ac04 <ai_platform_network_post_init+0x150>)
 801abc0:	6019      	str	r1, [r3, #0]
 801abc2:	681b      	ldr	r3, [r3, #0]
 801abc4:	4293      	cmp	r3, r2
 801abc6:	d0be      	beq.n	801ab46 <ai_platform_network_post_init+0x92>
 801abc8:	e7fe      	b.n	801abc8 <ai_platform_network_post_init+0x114>
 801abca:	4b0b      	ldr	r3, [pc, #44]	; (801abf8 <ai_platform_network_post_init+0x144>)
 801abcc:	2201      	movs	r2, #1
 801abce:	4619      	mov	r1, r3
 801abd0:	601a      	str	r2, [r3, #0]
 801abd2:	680b      	ldr	r3, [r1, #0]
 801abd4:	2b00      	cmp	r3, #0
 801abd6:	d1fc      	bne.n	801abd2 <ai_platform_network_post_init+0x11e>
 801abd8:	4b08      	ldr	r3, [pc, #32]	; (801abfc <ai_platform_network_post_init+0x148>)
 801abda:	4909      	ldr	r1, [pc, #36]	; (801ac00 <ai_platform_network_post_init+0x14c>)
 801abdc:	4a09      	ldr	r2, [pc, #36]	; (801ac04 <ai_platform_network_post_init+0x150>)
 801abde:	6019      	str	r1, [r3, #0]
 801abe0:	681b      	ldr	r3, [r3, #0]
 801abe2:	4293      	cmp	r3, r2
 801abe4:	d0af      	beq.n	801ab46 <ai_platform_network_post_init+0x92>
 801abe6:	e7fe      	b.n	801abe6 <ai_platform_network_post_init+0x132>
 801abe8:	a1c00100 	.word	0xa1c00100
 801abec:	e0002000 	.word	0xe0002000
 801abf0:	e0042000 	.word	0xe0042000
 801abf4:	5c001000 	.word	0x5c001000
 801abf8:	40023008 	.word	0x40023008
 801abfc:	40023000 	.word	0x40023000
 801ac00:	f407a5c2 	.word	0xf407a5c2
 801ac04:	b5e8b5cd 	.word	0xb5e8b5cd
 801ac08:	58024c08 	.word	0x58024c08
 801ac0c:	58024c00 	.word	0x58024c00

0801ac10 <ai_platform_network_process>:
 801ac10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac14:	4617      	mov	r7, r2
 801ac16:	b083      	sub	sp, #12
 801ac18:	4604      	mov	r4, r0
 801ac1a:	b120      	cbz	r0, 801ac26 <ai_platform_network_process+0x16>
 801ac1c:	4b89      	ldr	r3, [pc, #548]	; (801ae44 <ai_platform_network_process+0x234>)
 801ac1e:	6802      	ldr	r2, [r0, #0]
 801ac20:	429a      	cmp	r2, r3
 801ac22:	bf18      	it	ne
 801ac24:	2400      	movne	r4, #0
 801ac26:	4a88      	ldr	r2, [pc, #544]	; (801ae48 <ai_platform_network_process+0x238>)
 801ac28:	4888      	ldr	r0, [pc, #544]	; (801ae4c <ai_platform_network_process+0x23c>)
 801ac2a:	6813      	ldr	r3, [r2, #0]
 801ac2c:	f023 0301 	bic.w	r3, r3, #1
 801ac30:	6013      	str	r3, [r2, #0]
 801ac32:	6803      	ldr	r3, [r0, #0]
 801ac34:	f46f 608a 	mvn.w	r0, #1104	; 0x450
 801ac38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801ac3c:	181a      	adds	r2, r3, r0
 801ac3e:	2a01      	cmp	r2, #1
 801ac40:	f240 80cc 	bls.w	801addc <ai_platform_network_process+0x1cc>
 801ac44:	f240 4249 	movw	r2, #1097	; 0x449
 801ac48:	4293      	cmp	r3, r2
 801ac4a:	f000 80c7 	beq.w	801addc <ai_platform_network_process+0x1cc>
 801ac4e:	4b80      	ldr	r3, [pc, #512]	; (801ae50 <ai_platform_network_process+0x240>)
 801ac50:	681b      	ldr	r3, [r3, #0]
 801ac52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801ac56:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801ac5a:	f000 80af 	beq.w	801adbc <ai_platform_network_process+0x1ac>
 801ac5e:	2c00      	cmp	r4, #0
 801ac60:	f000 80e1 	beq.w	801ae26 <ai_platform_network_process+0x216>
 801ac64:	68e2      	ldr	r2, [r4, #12]
 801ac66:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 801ac6a:	f002 0203 	and.w	r2, r2, #3
 801ac6e:	2b00      	cmp	r3, #0
 801ac70:	f000 80c4 	beq.w	801adfc <ai_platform_network_process+0x1ec>
 801ac74:	2000      	movs	r0, #0
 801ac76:	2a03      	cmp	r2, #3
 801ac78:	f8d4 a04c 	ldr.w	sl, [r4, #76]	; 0x4c
 801ac7c:	6160      	str	r0, [r4, #20]
 801ac7e:	f040 80cc 	bne.w	801ae1a <ai_platform_network_process+0x20a>
 801ac82:	2900      	cmp	r1, #0
 801ac84:	f000 80bd 	beq.w	801ae02 <ai_platform_network_process+0x1f2>
 801ac88:	faba f28a 	clz	r2, sl
 801ac8c:	0952      	lsrs	r2, r2, #5
 801ac8e:	2a00      	cmp	r2, #0
 801ac90:	f040 80b7 	bne.w	801ae02 <ai_platform_network_process+0x1f2>
 801ac94:	f8ba 0000 	ldrh.w	r0, [sl]
 801ac98:	2800      	cmp	r0, #0
 801ac9a:	f000 80b2 	beq.w	801ae02 <ai_platform_network_process+0x1f2>
 801ac9e:	888d      	ldrh	r5, [r1, #4]
 801aca0:	f8da 0004 	ldr.w	r0, [sl, #4]
 801aca4:	9501      	str	r5, [sp, #4]
 801aca6:	2800      	cmp	r0, #0
 801aca8:	f000 80e2 	beq.w	801ae70 <ai_platform_network_process+0x260>
 801acac:	6806      	ldr	r6, [r0, #0]
 801acae:	2e00      	cmp	r6, #0
 801acb0:	f000 80de 	beq.w	801ae70 <ai_platform_network_process+0x260>
 801acb4:	f8da 3008 	ldr.w	r3, [sl, #8]
 801acb8:	f8d3 9000 	ldr.w	r9, [r3]
 801acbc:	f1b9 0f00 	cmp.w	r9, #0
 801acc0:	f000 809f 	beq.w	801ae02 <ai_platform_network_process+0x1f2>
 801acc4:	460d      	mov	r5, r1
 801acc6:	4690      	mov	r8, r2
 801acc8:	e061      	b.n	801ad8e <ai_platform_network_process+0x17e>
 801acca:	68f3      	ldr	r3, [r6, #12]
 801accc:	68da      	ldr	r2, [r3, #12]
 801acce:	455a      	cmp	r2, fp
 801acd0:	d16b      	bne.n	801adaa <ai_platform_network_process+0x19a>
 801acd2:	689a      	ldr	r2, [r3, #8]
 801acd4:	4572      	cmp	r2, lr
 801acd6:	d168      	bne.n	801adaa <ai_platform_network_process+0x19a>
 801acd8:	685b      	ldr	r3, [r3, #4]
 801acda:	459c      	cmp	ip, r3
 801acdc:	d165      	bne.n	801adaa <ai_platform_network_process+0x19a>
 801acde:	6800      	ldr	r0, [r0, #0]
 801ace0:	f002 fe9e 	bl	801da20 <ai_array_get_byte_size>
 801ace4:	68f2      	ldr	r2, [r6, #12]
 801ace6:	6973      	ldr	r3, [r6, #20]
 801ace8:	68d2      	ldr	r2, [r2, #12]
 801acea:	68db      	ldr	r3, [r3, #12]
 801acec:	fb03 f302 	mul.w	r3, r3, r2
 801acf0:	4298      	cmp	r0, r3
 801acf2:	d35a      	bcc.n	801adaa <ai_platform_network_process+0x19a>
 801acf4:	69b3      	ldr	r3, [r6, #24]
 801acf6:	6818      	ldr	r0, [r3, #0]
 801acf8:	f002 fe46 	bl	801d988 <ai_array_to_buffer_fmt>
 801acfc:	682b      	ldr	r3, [r5, #0]
 801acfe:	4043      	eors	r3, r0
 801ad00:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 801ad04:	f040 8226 	bne.w	801b154 <ai_platform_network_process+0x544>
 801ad08:	692b      	ldr	r3, [r5, #16]
 801ad0a:	2b00      	cmp	r3, #0
 801ad0c:	f000 821a 	beq.w	801b144 <ai_platform_network_process+0x534>
 801ad10:	88ab      	ldrh	r3, [r5, #4]
 801ad12:	2b00      	cmp	r3, #0
 801ad14:	f000 808d 	beq.w	801ae32 <ai_platform_network_process+0x222>
 801ad18:	9a01      	ldr	r2, [sp, #4]
 801ad1a:	68f1      	ldr	r1, [r6, #12]
 801ad1c:	429a      	cmp	r2, r3
 801ad1e:	68c9      	ldr	r1, [r1, #12]
 801ad20:	bf38      	it	cc
 801ad22:	461a      	movcc	r2, r3
 801ad24:	9201      	str	r2, [sp, #4]
 801ad26:	6972      	ldr	r2, [r6, #20]
 801ad28:	68d3      	ldr	r3, [r2, #12]
 801ad2a:	fb03 f301 	mul.w	r3, r3, r1
 801ad2e:	f8c9 3008 	str.w	r3, [r9, #8]
 801ad32:	88aa      	ldrh	r2, [r5, #4]
 801ad34:	fb03 f302 	mul.w	r3, r3, r2
 801ad38:	f8c9 300c 	str.w	r3, [r9, #12]
 801ad3c:	6929      	ldr	r1, [r5, #16]
 801ad3e:	f8c9 1004 	str.w	r1, [r9, #4]
 801ad42:	692a      	ldr	r2, [r5, #16]
 801ad44:	4413      	add	r3, r2
 801ad46:	f8c9 3000 	str.w	r3, [r9]
 801ad4a:	69b0      	ldr	r0, [r6, #24]
 801ad4c:	6803      	ldr	r3, [r0, #0]
 801ad4e:	009a      	lsls	r2, r3, #2
 801ad50:	d408      	bmi.n	801ad64 <ai_platform_network_process+0x154>
 801ad52:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 801ad56:	1a9b      	subs	r3, r3, r2
 801ad58:	4419      	add	r1, r3
 801ad5a:	6081      	str	r1, [r0, #8]
 801ad5c:	69b3      	ldr	r3, [r6, #24]
 801ad5e:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801ad62:	60da      	str	r2, [r3, #12]
 801ad64:	f108 0801 	add.w	r8, r8, #1
 801ad68:	f8ba 3000 	ldrh.w	r3, [sl]
 801ad6c:	4598      	cmp	r8, r3
 801ad6e:	d27d      	bcs.n	801ae6c <ai_platform_network_process+0x25c>
 801ad70:	f8da 3004 	ldr.w	r3, [sl, #4]
 801ad74:	2b00      	cmp	r3, #0
 801ad76:	d079      	beq.n	801ae6c <ai_platform_network_process+0x25c>
 801ad78:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 801ad7c:	2e00      	cmp	r6, #0
 801ad7e:	d075      	beq.n	801ae6c <ai_platform_network_process+0x25c>
 801ad80:	f8da 3008 	ldr.w	r3, [sl, #8]
 801ad84:	3518      	adds	r5, #24
 801ad86:	681b      	ldr	r3, [r3, #0]
 801ad88:	eb13 1908 	adds.w	r9, r3, r8, lsl #4
 801ad8c:	d039      	beq.n	801ae02 <ai_platform_network_process+0x1f2>
 801ad8e:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 801ad92:	f8b5 b006 	ldrh.w	fp, [r5, #6]
 801ad96:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 801ad9a:	fb0b f30e 	mul.w	r3, fp, lr
 801ad9e:	69b0      	ldr	r0, [r6, #24]
 801ada0:	fb0c f303 	mul.w	r3, ip, r3
 801ada4:	6841      	ldr	r1, [r0, #4]
 801ada6:	4299      	cmp	r1, r3
 801ada8:	d28f      	bcs.n	801acca <ai_platform_network_process+0xba>
 801adaa:	f104 0010 	add.w	r0, r4, #16
 801adae:	2218      	movs	r2, #24
 801adb0:	2112      	movs	r1, #18
 801adb2:	f04f 0b00 	mov.w	fp, #0
 801adb6:	f000 f9d9 	bl	801b16c <core_set_error>
 801adba:	e02a      	b.n	801ae12 <ai_platform_network_process+0x202>
 801adbc:	4b25      	ldr	r3, [pc, #148]	; (801ae54 <ai_platform_network_process+0x244>)
 801adbe:	2201      	movs	r2, #1
 801adc0:	4618      	mov	r0, r3
 801adc2:	601a      	str	r2, [r3, #0]
 801adc4:	6803      	ldr	r3, [r0, #0]
 801adc6:	2b00      	cmp	r3, #0
 801adc8:	d1fc      	bne.n	801adc4 <ai_platform_network_process+0x1b4>
 801adca:	4b23      	ldr	r3, [pc, #140]	; (801ae58 <ai_platform_network_process+0x248>)
 801adcc:	4823      	ldr	r0, [pc, #140]	; (801ae5c <ai_platform_network_process+0x24c>)
 801adce:	4a24      	ldr	r2, [pc, #144]	; (801ae60 <ai_platform_network_process+0x250>)
 801add0:	6018      	str	r0, [r3, #0]
 801add2:	681b      	ldr	r3, [r3, #0]
 801add4:	4293      	cmp	r3, r2
 801add6:	f43f af42 	beq.w	801ac5e <ai_platform_network_process+0x4e>
 801adda:	e7fe      	b.n	801adda <ai_platform_network_process+0x1ca>
 801addc:	4b21      	ldr	r3, [pc, #132]	; (801ae64 <ai_platform_network_process+0x254>)
 801adde:	2201      	movs	r2, #1
 801ade0:	4618      	mov	r0, r3
 801ade2:	601a      	str	r2, [r3, #0]
 801ade4:	6803      	ldr	r3, [r0, #0]
 801ade6:	2b00      	cmp	r3, #0
 801ade8:	d1fc      	bne.n	801ade4 <ai_platform_network_process+0x1d4>
 801adea:	4b1f      	ldr	r3, [pc, #124]	; (801ae68 <ai_platform_network_process+0x258>)
 801adec:	481b      	ldr	r0, [pc, #108]	; (801ae5c <ai_platform_network_process+0x24c>)
 801adee:	4a1c      	ldr	r2, [pc, #112]	; (801ae60 <ai_platform_network_process+0x250>)
 801adf0:	6018      	str	r0, [r3, #0]
 801adf2:	681b      	ldr	r3, [r3, #0]
 801adf4:	4293      	cmp	r3, r2
 801adf6:	f43f af32 	beq.w	801ac5e <ai_platform_network_process+0x4e>
 801adfa:	e7fe      	b.n	801adfa <ai_platform_network_process+0x1ea>
 801adfc:	2a03      	cmp	r2, #3
 801adfe:	6163      	str	r3, [r4, #20]
 801ae00:	d10b      	bne.n	801ae1a <ai_platform_network_process+0x20a>
 801ae02:	f04f 0b00 	mov.w	fp, #0
 801ae06:	f104 0010 	add.w	r0, r4, #16
 801ae0a:	2217      	movs	r2, #23
 801ae0c:	2112      	movs	r1, #18
 801ae0e:	f000 f9ad 	bl	801b16c <core_set_error>
 801ae12:	4658      	mov	r0, fp
 801ae14:	b003      	add	sp, #12
 801ae16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae1a:	f104 0010 	add.w	r0, r4, #16
 801ae1e:	2230      	movs	r2, #48	; 0x30
 801ae20:	2111      	movs	r1, #17
 801ae22:	f000 f9a3 	bl	801b16c <core_set_error>
 801ae26:	f04f 0b00 	mov.w	fp, #0
 801ae2a:	4658      	mov	r0, fp
 801ae2c:	b003      	add	sp, #12
 801ae2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae32:	f104 0010 	add.w	r0, r4, #16
 801ae36:	2221      	movs	r2, #33	; 0x21
 801ae38:	2112      	movs	r1, #18
 801ae3a:	469b      	mov	fp, r3
 801ae3c:	f000 f996 	bl	801b16c <core_set_error>
 801ae40:	e7e7      	b.n	801ae12 <ai_platform_network_process+0x202>
 801ae42:	bf00      	nop
 801ae44:	a1c00100 	.word	0xa1c00100
 801ae48:	e0002000 	.word	0xe0002000
 801ae4c:	e0042000 	.word	0xe0042000
 801ae50:	5c001000 	.word	0x5c001000
 801ae54:	58024c08 	.word	0x58024c08
 801ae58:	58024c00 	.word	0x58024c00
 801ae5c:	f407a5c2 	.word	0xf407a5c2
 801ae60:	b5e8b5cd 	.word	0xb5e8b5cd
 801ae64:	40023008 	.word	0x40023008
 801ae68:	40023000 	.word	0x40023000
 801ae6c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 801ae70:	2f00      	cmp	r7, #0
 801ae72:	f000 80ab 	beq.w	801afcc <ai_platform_network_process+0x3bc>
 801ae76:	2b01      	cmp	r3, #1
 801ae78:	f240 809c 	bls.w	801afb4 <ai_platform_network_process+0x3a4>
 801ae7c:	f8d4 a04c 	ldr.w	sl, [r4, #76]	; 0x4c
 801ae80:	f11a 0f0c 	cmn.w	sl, #12
 801ae84:	f000 8096 	beq.w	801afb4 <ai_platform_network_process+0x3a4>
 801ae88:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801ae8c:	2b00      	cmp	r3, #0
 801ae8e:	f000 8091 	beq.w	801afb4 <ai_platform_network_process+0x3a4>
 801ae92:	463d      	mov	r5, r7
 801ae94:	f04f 0900 	mov.w	r9, #0
 801ae98:	9400      	str	r4, [sp, #0]
 801ae9a:	4599      	cmp	r9, r3
 801ae9c:	f080 8093 	bcs.w	801afc6 <ai_platform_network_process+0x3b6>
 801aea0:	f8da 3010 	ldr.w	r3, [sl, #16]
 801aea4:	2b00      	cmp	r3, #0
 801aea6:	f000 808e 	beq.w	801afc6 <ai_platform_network_process+0x3b6>
 801aeaa:	f853 6029 	ldr.w	r6, [r3, r9, lsl #2]
 801aeae:	2e00      	cmp	r6, #0
 801aeb0:	f000 8089 	beq.w	801afc6 <ai_platform_network_process+0x3b6>
 801aeb4:	f8da 3014 	ldr.w	r3, [sl, #20]
 801aeb8:	ea4f 1409 	mov.w	r4, r9, lsl #4
 801aebc:	f8d3 8000 	ldr.w	r8, [r3]
 801aec0:	eb18 0704 	adds.w	r7, r8, r4
 801aec4:	f000 8135 	beq.w	801b132 <ai_platform_network_process+0x522>
 801aec8:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 801aecc:	f8b5 b006 	ldrh.w	fp, [r5, #6]
 801aed0:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 801aed4:	fb0b f30e 	mul.w	r3, fp, lr
 801aed8:	69b0      	ldr	r0, [r6, #24]
 801aeda:	fb0c f303 	mul.w	r3, ip, r3
 801aede:	6841      	ldr	r1, [r0, #4]
 801aee0:	4299      	cmp	r1, r3
 801aee2:	d366      	bcc.n	801afb2 <ai_platform_network_process+0x3a2>
 801aee4:	68f3      	ldr	r3, [r6, #12]
 801aee6:	68da      	ldr	r2, [r3, #12]
 801aee8:	455a      	cmp	r2, fp
 801aeea:	d162      	bne.n	801afb2 <ai_platform_network_process+0x3a2>
 801aeec:	689a      	ldr	r2, [r3, #8]
 801aeee:	4572      	cmp	r2, lr
 801aef0:	d15f      	bne.n	801afb2 <ai_platform_network_process+0x3a2>
 801aef2:	685b      	ldr	r3, [r3, #4]
 801aef4:	459c      	cmp	ip, r3
 801aef6:	d15c      	bne.n	801afb2 <ai_platform_network_process+0x3a2>
 801aef8:	6800      	ldr	r0, [r0, #0]
 801aefa:	f002 fd91 	bl	801da20 <ai_array_get_byte_size>
 801aefe:	68f2      	ldr	r2, [r6, #12]
 801af00:	6973      	ldr	r3, [r6, #20]
 801af02:	68d2      	ldr	r2, [r2, #12]
 801af04:	68db      	ldr	r3, [r3, #12]
 801af06:	fb03 f302 	mul.w	r3, r3, r2
 801af0a:	4298      	cmp	r0, r3
 801af0c:	d351      	bcc.n	801afb2 <ai_platform_network_process+0x3a2>
 801af0e:	69b3      	ldr	r3, [r6, #24]
 801af10:	6818      	ldr	r0, [r3, #0]
 801af12:	f002 fd39 	bl	801d988 <ai_array_to_buffer_fmt>
 801af16:	682b      	ldr	r3, [r5, #0]
 801af18:	4043      	eors	r3, r0
 801af1a:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 801af1e:	d13e      	bne.n	801af9e <ai_platform_network_process+0x38e>
 801af20:	692b      	ldr	r3, [r5, #16]
 801af22:	2b00      	cmp	r3, #0
 801af24:	d032      	beq.n	801af8c <ai_platform_network_process+0x37c>
 801af26:	88ab      	ldrh	r3, [r5, #4]
 801af28:	b33b      	cbz	r3, 801af7a <ai_platform_network_process+0x36a>
 801af2a:	9a01      	ldr	r2, [sp, #4]
 801af2c:	68f1      	ldr	r1, [r6, #12]
 801af2e:	429a      	cmp	r2, r3
 801af30:	68c9      	ldr	r1, [r1, #12]
 801af32:	bf38      	it	cc
 801af34:	461a      	movcc	r2, r3
 801af36:	9201      	str	r2, [sp, #4]
 801af38:	6972      	ldr	r2, [r6, #20]
 801af3a:	68d3      	ldr	r3, [r2, #12]
 801af3c:	fb03 f301 	mul.w	r3, r3, r1
 801af40:	60bb      	str	r3, [r7, #8]
 801af42:	88aa      	ldrh	r2, [r5, #4]
 801af44:	fb03 f302 	mul.w	r3, r3, r2
 801af48:	60fb      	str	r3, [r7, #12]
 801af4a:	6929      	ldr	r1, [r5, #16]
 801af4c:	6079      	str	r1, [r7, #4]
 801af4e:	692a      	ldr	r2, [r5, #16]
 801af50:	4413      	add	r3, r2
 801af52:	f848 3004 	str.w	r3, [r8, r4]
 801af56:	69b0      	ldr	r0, [r6, #24]
 801af58:	6803      	ldr	r3, [r0, #0]
 801af5a:	009b      	lsls	r3, r3, #2
 801af5c:	d407      	bmi.n	801af6e <ai_platform_network_process+0x35e>
 801af5e:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 801af62:	1a9b      	subs	r3, r3, r2
 801af64:	4419      	add	r1, r3
 801af66:	6081      	str	r1, [r0, #8]
 801af68:	687a      	ldr	r2, [r7, #4]
 801af6a:	69b3      	ldr	r3, [r6, #24]
 801af6c:	60da      	str	r2, [r3, #12]
 801af6e:	f109 0901 	add.w	r9, r9, #1
 801af72:	3518      	adds	r5, #24
 801af74:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801af78:	e78f      	b.n	801ae9a <ai_platform_network_process+0x28a>
 801af7a:	9c00      	ldr	r4, [sp, #0]
 801af7c:	2221      	movs	r2, #33	; 0x21
 801af7e:	2113      	movs	r1, #19
 801af80:	469b      	mov	fp, r3
 801af82:	f104 0010 	add.w	r0, r4, #16
 801af86:	f000 f8f1 	bl	801b16c <core_set_error>
 801af8a:	e742      	b.n	801ae12 <ai_platform_network_process+0x202>
 801af8c:	9c00      	ldr	r4, [sp, #0]
 801af8e:	2217      	movs	r2, #23
 801af90:	2113      	movs	r1, #19
 801af92:	469b      	mov	fp, r3
 801af94:	f104 0010 	add.w	r0, r4, #16
 801af98:	f000 f8e8 	bl	801b16c <core_set_error>
 801af9c:	e739      	b.n	801ae12 <ai_platform_network_process+0x202>
 801af9e:	9c00      	ldr	r4, [sp, #0]
 801afa0:	2219      	movs	r2, #25
 801afa2:	2113      	movs	r1, #19
 801afa4:	f04f 0b00 	mov.w	fp, #0
 801afa8:	f104 0010 	add.w	r0, r4, #16
 801afac:	f000 f8de 	bl	801b16c <core_set_error>
 801afb0:	e72f      	b.n	801ae12 <ai_platform_network_process+0x202>
 801afb2:	9c00      	ldr	r4, [sp, #0]
 801afb4:	f104 0010 	add.w	r0, r4, #16
 801afb8:	2218      	movs	r2, #24
 801afba:	2113      	movs	r1, #19
 801afbc:	f04f 0b00 	mov.w	fp, #0
 801afc0:	f000 f8d4 	bl	801b16c <core_set_error>
 801afc4:	e725      	b.n	801ae12 <ai_platform_network_process+0x202>
 801afc6:	9c00      	ldr	r4, [sp, #0]
 801afc8:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 801afcc:	9a01      	ldr	r2, [sp, #4]
 801afce:	82a2      	strh	r2, [r4, #20]
 801afd0:	2b00      	cmp	r3, #0
 801afd2:	f000 80a9 	beq.w	801b128 <ai_platform_network_process+0x518>
 801afd6:	2b01      	cmp	r3, #1
 801afd8:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 801afda:	f240 80a8 	bls.w	801b12e <ai_platform_network_process+0x51e>
 801afde:	f105 060c 	add.w	r6, r5, #12
 801afe2:	f8b4 b016 	ldrh.w	fp, [r4, #22]
 801afe6:	8aa3      	ldrh	r3, [r4, #20]
 801afe8:	455b      	cmp	r3, fp
 801afea:	f67f af12 	bls.w	801ae12 <ai_platform_network_process+0x202>
 801afee:	9400      	str	r4, [sp, #0]
 801aff0:	2d00      	cmp	r5, #0
 801aff2:	d037      	beq.n	801b064 <ai_platform_network_process+0x454>
 801aff4:	882b      	ldrh	r3, [r5, #0]
 801aff6:	2b00      	cmp	r3, #0
 801aff8:	d034      	beq.n	801b064 <ai_platform_network_process+0x454>
 801affa:	686b      	ldr	r3, [r5, #4]
 801affc:	2b00      	cmp	r3, #0
 801affe:	d031      	beq.n	801b064 <ai_platform_network_process+0x454>
 801b000:	681b      	ldr	r3, [r3, #0]
 801b002:	2b00      	cmp	r3, #0
 801b004:	d02e      	beq.n	801b064 <ai_platform_network_process+0x454>
 801b006:	f04f 0800 	mov.w	r8, #0
 801b00a:	e01a      	b.n	801b042 <ai_platform_network_process+0x432>
 801b00c:	68d4      	ldr	r4, [r2, #12]
 801b00e:	1b00      	subs	r0, r0, r4
 801b010:	4401      	add	r1, r0
 801b012:	6091      	str	r1, [r2, #8]
 801b014:	687a      	ldr	r2, [r7, #4]
 801b016:	699b      	ldr	r3, [r3, #24]
 801b018:	60da      	str	r2, [r3, #12]
 801b01a:	687b      	ldr	r3, [r7, #4]
 801b01c:	f108 0801 	add.w	r8, r8, #1
 801b020:	68b9      	ldr	r1, [r7, #8]
 801b022:	f85a 2009 	ldr.w	r2, [sl, r9]
 801b026:	440b      	add	r3, r1
 801b028:	4293      	cmp	r3, r2
 801b02a:	d301      	bcc.n	801b030 <ai_platform_network_process+0x420>
 801b02c:	68fb      	ldr	r3, [r7, #12]
 801b02e:	1ad3      	subs	r3, r2, r3
 801b030:	607b      	str	r3, [r7, #4]
 801b032:	882b      	ldrh	r3, [r5, #0]
 801b034:	4598      	cmp	r8, r3
 801b036:	d215      	bcs.n	801b064 <ai_platform_network_process+0x454>
 801b038:	686b      	ldr	r3, [r5, #4]
 801b03a:	b19b      	cbz	r3, 801b064 <ai_platform_network_process+0x454>
 801b03c:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 801b040:	b183      	cbz	r3, 801b064 <ai_platform_network_process+0x454>
 801b042:	68a9      	ldr	r1, [r5, #8]
 801b044:	ea4f 1908 	mov.w	r9, r8, lsl #4
 801b048:	699a      	ldr	r2, [r3, #24]
 801b04a:	f8d1 a000 	ldr.w	sl, [r1]
 801b04e:	6814      	ldr	r4, [r2, #0]
 801b050:	eb0a 0709 	add.w	r7, sl, r9
 801b054:	6890      	ldr	r0, [r2, #8]
 801b056:	00a4      	lsls	r4, r4, #2
 801b058:	6879      	ldr	r1, [r7, #4]
 801b05a:	d5d7      	bpl.n	801b00c <ai_platform_network_process+0x3fc>
 801b05c:	68ba      	ldr	r2, [r7, #8]
 801b05e:	f002 fd3b 	bl	801dad8 <memcpy>
 801b062:	e7da      	b.n	801b01a <ai_platform_network_process+0x40a>
 801b064:	9800      	ldr	r0, [sp, #0]
 801b066:	f002 fc2d 	bl	801d8c4 <ai_layers_forward_all>
 801b06a:	2e00      	cmp	r6, #0
 801b06c:	d04a      	beq.n	801b104 <ai_platform_network_process+0x4f4>
 801b06e:	8833      	ldrh	r3, [r6, #0]
 801b070:	2b00      	cmp	r3, #0
 801b072:	d047      	beq.n	801b104 <ai_platform_network_process+0x4f4>
 801b074:	6873      	ldr	r3, [r6, #4]
 801b076:	2b00      	cmp	r3, #0
 801b078:	d044      	beq.n	801b104 <ai_platform_network_process+0x4f4>
 801b07a:	681b      	ldr	r3, [r3, #0]
 801b07c:	2b00      	cmp	r3, #0
 801b07e:	d041      	beq.n	801b104 <ai_platform_network_process+0x4f4>
 801b080:	f04f 0800 	mov.w	r8, #0
 801b084:	e019      	b.n	801b0ba <ai_platform_network_process+0x4aa>
 801b086:	f85a 2009 	ldr.w	r2, [sl, r9]
 801b08a:	4291      	cmp	r1, r2
 801b08c:	d301      	bcc.n	801b092 <ai_platform_network_process+0x482>
 801b08e:	68f9      	ldr	r1, [r7, #12]
 801b090:	1a51      	subs	r1, r2, r1
 801b092:	6079      	str	r1, [r7, #4]
 801b094:	f108 0801 	add.w	r8, r8, #1
 801b098:	6998      	ldr	r0, [r3, #24]
 801b09a:	e9d0 2402 	ldrd	r2, r4, [r0, #8]
 801b09e:	1b12      	subs	r2, r2, r4
 801b0a0:	440a      	add	r2, r1
 801b0a2:	6082      	str	r2, [r0, #8]
 801b0a4:	687a      	ldr	r2, [r7, #4]
 801b0a6:	699b      	ldr	r3, [r3, #24]
 801b0a8:	60da      	str	r2, [r3, #12]
 801b0aa:	8833      	ldrh	r3, [r6, #0]
 801b0ac:	4598      	cmp	r8, r3
 801b0ae:	d229      	bcs.n	801b104 <ai_platform_network_process+0x4f4>
 801b0b0:	6873      	ldr	r3, [r6, #4]
 801b0b2:	b33b      	cbz	r3, 801b104 <ai_platform_network_process+0x4f4>
 801b0b4:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 801b0b8:	b323      	cbz	r3, 801b104 <ai_platform_network_process+0x4f4>
 801b0ba:	68b2      	ldr	r2, [r6, #8]
 801b0bc:	ea4f 1908 	mov.w	r9, r8, lsl #4
 801b0c0:	f8d3 e018 	ldr.w	lr, [r3, #24]
 801b0c4:	f8d2 a000 	ldr.w	sl, [r2]
 801b0c8:	f8de 1000 	ldr.w	r1, [lr]
 801b0cc:	eb0a 0709 	add.w	r7, sl, r9
 801b0d0:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
 801b0d4:	e9d7 0201 	ldrd	r0, r2, [r7, #4]
 801b0d8:	eb00 0102 	add.w	r1, r0, r2
 801b0dc:	d0d3      	beq.n	801b086 <ai_platform_network_process+0x476>
 801b0de:	f8de 1008 	ldr.w	r1, [lr, #8]
 801b0e2:	f002 fcf9 	bl	801dad8 <memcpy>
 801b0e6:	f85a 2009 	ldr.w	r2, [sl, r9]
 801b0ea:	e9d7 3101 	ldrd	r3, r1, [r7, #4]
 801b0ee:	440b      	add	r3, r1
 801b0f0:	4293      	cmp	r3, r2
 801b0f2:	d301      	bcc.n	801b0f8 <ai_platform_network_process+0x4e8>
 801b0f4:	68fb      	ldr	r3, [r7, #12]
 801b0f6:	1ad3      	subs	r3, r2, r3
 801b0f8:	607b      	str	r3, [r7, #4]
 801b0fa:	f108 0801 	add.w	r8, r8, #1
 801b0fe:	8833      	ldrh	r3, [r6, #0]
 801b100:	4598      	cmp	r8, r3
 801b102:	d3d5      	bcc.n	801b0b0 <ai_platform_network_process+0x4a0>
 801b104:	9b00      	ldr	r3, [sp, #0]
 801b106:	f8b3 b016 	ldrh.w	fp, [r3, #22]
 801b10a:	461a      	mov	r2, r3
 801b10c:	8a9b      	ldrh	r3, [r3, #20]
 801b10e:	f10b 0b01 	add.w	fp, fp, #1
 801b112:	fa1f fb8b 	uxth.w	fp, fp
 801b116:	455b      	cmp	r3, fp
 801b118:	f8a2 b016 	strh.w	fp, [r2, #22]
 801b11c:	f63f af68 	bhi.w	801aff0 <ai_platform_network_process+0x3e0>
 801b120:	4658      	mov	r0, fp
 801b122:	b003      	add	sp, #12
 801b124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b128:	461d      	mov	r5, r3
 801b12a:	461e      	mov	r6, r3
 801b12c:	e759      	b.n	801afe2 <ai_platform_network_process+0x3d2>
 801b12e:	2600      	movs	r6, #0
 801b130:	e757      	b.n	801afe2 <ai_platform_network_process+0x3d2>
 801b132:	9c00      	ldr	r4, [sp, #0]
 801b134:	2217      	movs	r2, #23
 801b136:	2113      	movs	r1, #19
 801b138:	46bb      	mov	fp, r7
 801b13a:	f104 0010 	add.w	r0, r4, #16
 801b13e:	f000 f815 	bl	801b16c <core_set_error>
 801b142:	e666      	b.n	801ae12 <ai_platform_network_process+0x202>
 801b144:	f104 0010 	add.w	r0, r4, #16
 801b148:	2217      	movs	r2, #23
 801b14a:	2112      	movs	r1, #18
 801b14c:	469b      	mov	fp, r3
 801b14e:	f000 f80d 	bl	801b16c <core_set_error>
 801b152:	e65e      	b.n	801ae12 <ai_platform_network_process+0x202>
 801b154:	f104 0010 	add.w	r0, r4, #16
 801b158:	2219      	movs	r2, #25
 801b15a:	2112      	movs	r1, #18
 801b15c:	f04f 0b00 	mov.w	fp, #0
 801b160:	f000 f804 	bl	801b16c <core_set_error>
 801b164:	e655      	b.n	801ae12 <ai_platform_network_process+0x202>
 801b166:	bf00      	nop

0801b168 <core_init>:
 801b168:	2001      	movs	r0, #1
 801b16a:	4770      	bx	lr

0801b16c <core_set_error>:
 801b16c:	4603      	mov	r3, r0
 801b16e:	7800      	ldrb	r0, [r0, #0]
 801b170:	b930      	cbnz	r0, 801b180 <core_set_error+0x14>
 801b172:	7019      	strb	r1, [r3, #0]
 801b174:	2001      	movs	r0, #1
 801b176:	6819      	ldr	r1, [r3, #0]
 801b178:	f362 211f 	bfi	r1, r2, #8, #24
 801b17c:	6019      	str	r1, [r3, #0]
 801b17e:	4770      	bx	lr
 801b180:	2000      	movs	r0, #0
 801b182:	4770      	bx	lr

0801b184 <func_dummy>:
 801b184:	4770      	bx	lr
 801b186:	bf00      	nop

0801b188 <ai_dict_decompress_f32>:
 801b188:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b18c:	9f08      	ldr	r7, [sp, #32]
 801b18e:	2b04      	cmp	r3, #4
 801b190:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 801b194:	d00e      	beq.n	801b1b4 <ai_dict_decompress_f32+0x2c>
 801b196:	2b08      	cmp	r3, #8
 801b198:	d10a      	bne.n	801b1b0 <ai_dict_decompress_f32+0x28>
 801b19a:	42b8      	cmp	r0, r7
 801b19c:	d208      	bcs.n	801b1b0 <ai_dict_decompress_f32+0x28>
 801b19e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b1a2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b1a6:	681b      	ldr	r3, [r3, #0]
 801b1a8:	f840 3b04 	str.w	r3, [r0], #4
 801b1ac:	4287      	cmp	r7, r0
 801b1ae:	d8f6      	bhi.n	801b19e <ai_dict_decompress_f32+0x16>
 801b1b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b1b4:	9b07      	ldr	r3, [sp, #28]
 801b1b6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801b1ba:	f003 0e01 	and.w	lr, r3, #1
 801b1be:	ea4f 09cc 	mov.w	r9, ip, lsl #3
 801b1c2:	f10c 38ff 	add.w	r8, ip, #4294967295
 801b1c6:	42b8      	cmp	r0, r7
 801b1c8:	d2f2      	bcs.n	801b1b0 <ai_dict_decompress_f32+0x28>
 801b1ca:	f1bc 0f00 	cmp.w	ip, #0
 801b1ce:	d019      	beq.n	801b204 <ai_dict_decompress_f32+0x7c>
 801b1d0:	f100 0508 	add.w	r5, r0, #8
 801b1d4:	1e4c      	subs	r4, r1, #1
 801b1d6:	eb01 0608 	add.w	r6, r1, r8
 801b1da:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801b1de:	3508      	adds	r5, #8
 801b1e0:	091b      	lsrs	r3, r3, #4
 801b1e2:	42a6      	cmp	r6, r4
 801b1e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b1e8:	681b      	ldr	r3, [r3, #0]
 801b1ea:	f845 3c10 	str.w	r3, [r5, #-16]
 801b1ee:	7823      	ldrb	r3, [r4, #0]
 801b1f0:	f003 030f 	and.w	r3, r3, #15
 801b1f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b1f8:	681b      	ldr	r3, [r3, #0]
 801b1fa:	f845 3c0c 	str.w	r3, [r5, #-12]
 801b1fe:	d1ec      	bne.n	801b1da <ai_dict_decompress_f32+0x52>
 801b200:	4461      	add	r1, ip
 801b202:	4448      	add	r0, r9
 801b204:	f1be 0f00 	cmp.w	lr, #0
 801b208:	d103      	bne.n	801b212 <ai_dict_decompress_f32+0x8a>
 801b20a:	4287      	cmp	r7, r0
 801b20c:	d8dd      	bhi.n	801b1ca <ai_dict_decompress_f32+0x42>
 801b20e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b212:	780b      	ldrb	r3, [r1, #0]
 801b214:	3004      	adds	r0, #4
 801b216:	3101      	adds	r1, #1
 801b218:	091b      	lsrs	r3, r3, #4
 801b21a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b21e:	681b      	ldr	r3, [r3, #0]
 801b220:	f840 3c04 	str.w	r3, [r0, #-4]
 801b224:	e7cf      	b.n	801b1c6 <ai_dict_decompress_f32+0x3e>
 801b226:	bf00      	nop

0801b228 <forward_conv2d>:
 801b228:	6983      	ldr	r3, [r0, #24]
 801b22a:	881a      	ldrh	r2, [r3, #0]
 801b22c:	2a00      	cmp	r2, #0
 801b22e:	f000 87c4 	beq.w	801c1ba <forward_conv2d+0xf92>
 801b232:	685b      	ldr	r3, [r3, #4]
 801b234:	6859      	ldr	r1, [r3, #4]
 801b236:	b101      	cbz	r1, 801b23a <forward_conv2d+0x12>
 801b238:	6809      	ldr	r1, [r1, #0]
 801b23a:	2a01      	cmp	r2, #1
 801b23c:	f240 87ba 	bls.w	801c1b4 <forward_conv2d+0xf8c>
 801b240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b244:	ed2d 8b08 	vpush	{d8-d11}
 801b248:	b0cb      	sub	sp, #300	; 0x12c
 801b24a:	691c      	ldr	r4, [r3, #16]
 801b24c:	af02      	add	r7, sp, #8
 801b24e:	2c00      	cmp	r4, #0
 801b250:	f000 87ac 	beq.w	801c1ac <forward_conv2d+0xf84>
 801b254:	6824      	ldr	r4, [r4, #0]
 801b256:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 801b25a:	2a02      	cmp	r2, #2
 801b25c:	f000 87a1 	beq.w	801c1a2 <forward_conv2d+0xf7a>
 801b260:	69dd      	ldr	r5, [r3, #28]
 801b262:	2d00      	cmp	r5, #0
 801b264:	f000 8796 	beq.w	801c194 <forward_conv2d+0xf6c>
 801b268:	f113 0218 	adds.w	r2, r3, #24
 801b26c:	682c      	ldr	r4, [r5, #0]
 801b26e:	d004      	beq.n	801b27a <forward_conv2d+0x52>
 801b270:	8b1b      	ldrh	r3, [r3, #24]
 801b272:	2b01      	cmp	r3, #1
 801b274:	f240 87a3 	bls.w	801c1be <forward_conv2d+0xf96>
 801b278:	686a      	ldr	r2, [r5, #4]
 801b27a:	68ab      	ldr	r3, [r5, #8]
 801b27c:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 801b280:	f8d1 8018 	ldr.w	r8, [r1, #24]
 801b284:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 801b288:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801b28c:	68ce      	ldr	r6, [r1, #12]
 801b28e:	69a1      	ldr	r1, [r4, #24]
 801b290:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801b292:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 801b296:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801b29a:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
 801b29e:	f8de 1004 	ldr.w	r1, [lr, #4]
 801b2a2:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 801b2a6:	f8de 100c 	ldr.w	r1, [lr, #12]
 801b2aa:	6479      	str	r1, [r7, #68]	; 0x44
 801b2ac:	f8de 1008 	ldr.w	r1, [lr, #8]
 801b2b0:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
 801b2b4:	6871      	ldr	r1, [r6, #4]
 801b2b6:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 801b2ba:	68f1      	ldr	r1, [r6, #12]
 801b2bc:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 801b2c0:	68b1      	ldr	r1, [r6, #8]
 801b2c2:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 801b2c6:	f8dc 1008 	ldr.w	r1, [ip, #8]
 801b2ca:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 801b2ce:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801b2d2:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 801b2d6:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 801b2da:	6889      	ldr	r1, [r1, #8]
 801b2dc:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 801b2e0:	6a81      	ldr	r1, [r0, #40]	; 0x28
 801b2e2:	e9d5 ba00 	ldrd	fp, sl, [r5]
 801b2e6:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 801b2ea:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 801b2ec:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 801b2f0:	69c1      	ldr	r1, [r0, #28]
 801b2f2:	e9d0 980c 	ldrd	r9, r8, [r0, #48]	; 0x30
 801b2f6:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 801b2fa:	2a00      	cmp	r2, #0
 801b2fc:	f000 873d 	beq.w	801c17a <forward_conv2d+0xf52>
 801b300:	6992      	ldr	r2, [r2, #24]
 801b302:	6892      	ldr	r2, [r2, #8]
 801b304:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 801b308:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801b30c:	4606      	mov	r6, r0
 801b30e:	6a00      	ldr	r0, [r0, #32]
 801b310:	6992      	ldr	r2, [r2, #24]
 801b312:	6892      	ldr	r2, [r2, #8]
 801b314:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 801b318:	2b00      	cmp	r3, #0
 801b31a:	f000 8721 	beq.w	801c160 <forward_conv2d+0xf38>
 801b31e:	699a      	ldr	r2, [r3, #24]
 801b320:	2a00      	cmp	r2, #0
 801b322:	f000 8592 	beq.w	801be4a <forward_conv2d+0xc22>
 801b326:	695b      	ldr	r3, [r3, #20]
 801b328:	689b      	ldr	r3, [r3, #8]
 801b32a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801b32e:	6893      	ldr	r3, [r2, #8]
 801b330:	e9d2 0100 	ldrd	r0, r1, [r2]
 801b334:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801b338:	f002 fb72 	bl	801da20 <ai_array_get_byte_size>
 801b33c:	69a3      	ldr	r3, [r4, #24]
 801b33e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 801b342:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 801b346:	681c      	ldr	r4, [r3, #0]
 801b348:	fa1f f288 	uxth.w	r2, r8
 801b34c:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 801b350:	fa1f f389 	uxth.w	r3, r9
 801b354:	f3c4 15c6 	ubfx	r5, r4, #7, #7
 801b358:	f3c4 5041 	ubfx	r0, r4, #21, #2
 801b35c:	f101 3eff 	add.w	lr, r1, #4294967295
 801b360:	f3c4 4c43 	ubfx	ip, r4, #17, #4
 801b364:	3a01      	subs	r2, #1
 801b366:	f8d7 4110 	ldr.w	r4, [r7, #272]	; 0x110
 801b36a:	fa45 f000 	asr.w	r0, r5, r0
 801b36e:	6a75      	ldr	r5, [r6, #36]	; 0x24
 801b370:	fb0e 1202 	mla	r2, lr, r2, r1
 801b374:	3b01      	subs	r3, #1
 801b376:	3c01      	subs	r4, #1
 801b378:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 801b37c:	f8c7 50ac 	str.w	r5, [r7, #172]	; 0xac
 801b380:	b285      	uxth	r5, r0
 801b382:	fb04 1103 	mla	r1, r4, r3, r1
 801b386:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801b38a:	643a      	str	r2, [r7, #64]	; 0x40
 801b38c:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 801b390:	4619      	mov	r1, r3
 801b392:	4adf      	ldr	r2, [pc, #892]	; (801b710 <forward_conv2d+0x4e8>)
 801b394:	2b00      	cmp	r3, #0
 801b396:	bf08      	it	eq
 801b398:	4611      	moveq	r1, r2
 801b39a:	f1bc 0f04 	cmp.w	ip, #4
 801b39e:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 801b3a2:	f000 852e 	beq.w	801be02 <forward_conv2d+0xbda>
 801b3a6:	f1bc 0f08 	cmp.w	ip, #8
 801b3aa:	f000 852a 	beq.w	801be02 <forward_conv2d+0xbda>
 801b3ae:	fa1f f38b 	uxth.w	r3, fp
 801b3b2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801b3b6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801b3ba:	425b      	negs	r3, r3
 801b3bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801b3c0:	2a00      	cmp	r2, #0
 801b3c2:	f000 8241 	beq.w	801b848 <forward_conv2d+0x620>
 801b3c6:	fa1f f28a 	uxth.w	r2, sl
 801b3ca:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 801b3ce:	f8d7 50c4 	ldr.w	r5, [r7, #196]	; 0xc4
 801b3d2:	fa0f f688 	sxth.w	r6, r8
 801b3d6:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 801b3da:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 801b3de:	fb01 f305 	mul.w	r3, r1, r5
 801b3e2:	f8b7 c0f0 	ldrh.w	ip, [r7, #240]	; 0xf0
 801b3e6:	fa0f f589 	sxth.w	r5, r9
 801b3ea:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 801b3ee:	f8c7 c064 	str.w	ip, [r7, #100]	; 0x64
 801b3f2:	4264      	negs	r4, r4
 801b3f4:	fb03 fc00 	mul.w	ip, r3, r0
 801b3f8:	f8c7 6090 	str.w	r6, [r7, #144]	; 0x90
 801b3fc:	f8c7 40d0 	str.w	r4, [r7, #208]	; 0xd0
 801b400:	4634      	mov	r4, r6
 801b402:	f8c7 c07c 	str.w	ip, [r7, #124]	; 0x7c
 801b406:	462e      	mov	r6, r5
 801b408:	f8b7 c100 	ldrh.w	ip, [r7, #256]	; 0x100
 801b40c:	f8c7 50a8 	str.w	r5, [r7, #168]	; 0xa8
 801b410:	f8c7 c0c8 	str.w	ip, [r7, #200]	; 0xc8
 801b414:	fb04 fc05 	mul.w	ip, r4, r5
 801b418:	4605      	mov	r5, r0
 801b41a:	0084      	lsls	r4, r0, #2
 801b41c:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 801b420:	fb06 f605 	mul.w	r6, r6, r5
 801b424:	f8d7 50d0 	ldr.w	r5, [r7, #208]	; 0xd0
 801b428:	fb01 f200 	mul.w	r2, r1, r0
 801b42c:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801b430:	627e      	str	r6, [r7, #36]	; 0x24
 801b432:	4626      	mov	r6, r4
 801b434:	fb01 f000 	mul.w	r0, r1, r0
 801b438:	ed9f 8ab6 	vldr	s16, [pc, #728]	; 801b714 <forward_conv2d+0x4ec>
 801b43c:	fb06 f605 	mul.w	r6, r6, r5
 801b440:	6ffd      	ldr	r5, [r7, #124]	; 0x7c
 801b442:	62b8      	str	r0, [r7, #40]	; 0x28
 801b444:	00ad      	lsls	r5, r5, #2
 801b446:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 801b44a:	f8c7 409c 	str.w	r4, [r7, #156]	; 0x9c
 801b44e:	f8c7 50a0 	str.w	r5, [r7, #160]	; 0xa0
 801b452:	4625      	mov	r5, r4
 801b454:	0080      	lsls	r0, r0, #2
 801b456:	f8c7 c074 	str.w	ip, [r7, #116]	; 0x74
 801b45a:	fb05 f503 	mul.w	r5, r5, r3
 801b45e:	460b      	mov	r3, r1
 801b460:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 801b464:	0089      	lsls	r1, r1, #2
 801b466:	4620      	mov	r0, r4
 801b468:	63bd      	str	r5, [r7, #56]	; 0x38
 801b46a:	f8d7 4110 	ldr.w	r4, [r7, #272]	; 0x110
 801b46e:	0095      	lsls	r5, r2, #2
 801b470:	61f9      	str	r1, [r7, #28]
 801b472:	4619      	mov	r1, r3
 801b474:	64bd      	str	r5, [r7, #72]	; 0x48
 801b476:	4625      	mov	r5, r4
 801b478:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 801b47a:	fb00 f505 	mul.w	r5, r0, r5
 801b47e:	fb04 f101 	mul.w	r1, r4, r1
 801b482:	65fe      	str	r6, [r7, #92]	; 0x5c
 801b484:	66bd      	str	r5, [r7, #104]	; 0x68
 801b486:	6179      	str	r1, [r7, #20]
 801b488:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 801b48c:	f8d7 40c8 	ldr.w	r4, [r7, #200]	; 0xc8
 801b490:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 801b494:	ea4f 0b81 	mov.w	fp, r1, lsl #2
 801b498:	fb04 f400 	mul.w	r4, r4, r0
 801b49c:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 801b4a0:	65bc      	str	r4, [r7, #88]	; 0x58
 801b4a2:	f8d7 4108 	ldr.w	r4, [r7, #264]	; 0x108
 801b4a6:	f104 4478 	add.w	r4, r4, #4160749568	; 0xf8000000
 801b4aa:	63fc      	str	r4, [r7, #60]	; 0x3c
 801b4ac:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 801b4b0:	fb02 f204 	mul.w	r2, r2, r4
 801b4b4:	61ba      	str	r2, [r7, #24]
 801b4b6:	460a      	mov	r2, r1
 801b4b8:	0109      	lsls	r1, r1, #4
 801b4ba:	6079      	str	r1, [r7, #4]
 801b4bc:	4619      	mov	r1, r3
 801b4be:	4603      	mov	r3, r0
 801b4c0:	fb01 f303 	mul.w	r3, r1, r3
 801b4c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801b4c8:	00d3      	lsls	r3, r2, #3
 801b4ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801b4ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801b4d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801b4d6:	2300      	movs	r3, #0
 801b4d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801b4dc:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 801b4e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801b4e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801b4e6:	2900      	cmp	r1, #0
 801b4e8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801b4ea:	441a      	add	r2, r3
 801b4ec:	bfb4      	ite	lt
 801b4ee:	2100      	movlt	r1, #0
 801b4f0:	2300      	movge	r3, #0
 801b4f2:	4282      	cmp	r2, r0
 801b4f4:	bf28      	it	cs
 801b4f6:	4602      	movcs	r2, r0
 801b4f8:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 801b4fc:	2801      	cmp	r0, #1
 801b4fe:	f000 8319 	beq.w	801bb34 <forward_conv2d+0x90c>
 801b502:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 801b506:	4281      	cmp	r1, r0
 801b508:	f000 81bc 	beq.w	801b884 <forward_conv2d+0x65c>
 801b50c:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 801b510:	2900      	cmp	r1, #0
 801b512:	f000 8178 	beq.w	801b806 <forward_conv2d+0x5de>
 801b516:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 801b51a:	1ad2      	subs	r2, r2, r3
 801b51c:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 801b520:	181d      	adds	r5, r3, r0
 801b522:	f8c7 b020 	str.w	fp, [r7, #32]
 801b526:	f8c7 40cc 	str.w	r4, [r7, #204]	; 0xcc
 801b52a:	f8d7 40d0 	ldr.w	r4, [r7, #208]	; 0xd0
 801b52e:	3d01      	subs	r5, #1
 801b530:	fb93 f1f0 	sdiv	r1, r3, r0
 801b534:	fb00 3111 	mls	r1, r0, r1, r3
 801b538:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
 801b53c:	2400      	movs	r4, #0
 801b53e:	1a41      	subs	r1, r0, r1
 801b540:	67bc      	str	r4, [r7, #120]	; 0x78
 801b542:	4604      	mov	r4, r0
 801b544:	fb91 f0f0 	sdiv	r0, r1, r0
 801b548:	fb04 1110 	mls	r1, r4, r0, r1
 801b54c:	4620      	mov	r0, r4
 801b54e:	1a52      	subs	r2, r2, r1
 801b550:	4419      	add	r1, r3
 801b552:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b556:	4422      	add	r2, r4
 801b558:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 801b55c:	fb03 f301 	mul.w	r3, r3, r1
 801b560:	3a01      	subs	r2, #1
 801b562:	673b      	str	r3, [r7, #112]	; 0x70
 801b564:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b568:	fb92 f8f0 	sdiv	r8, r2, r0
 801b56c:	4619      	mov	r1, r3
 801b56e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 801b572:	46c2      	mov	sl, r8
 801b574:	fbb1 f3f4 	udiv	r3, r1, r4
 801b578:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 801b57c:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 801b580:	fb95 f5f0 	sdiv	r5, r5, r0
 801b584:	eba1 0008 	sub.w	r0, r1, r8
 801b588:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b58a:	eba1 0c03 	sub.w	ip, r1, r3
 801b58e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b592:	fbb2 f2f4 	udiv	r2, r2, r4
 801b596:	fb0e f403 	mul.w	r4, lr, r3
 801b59a:	0096      	lsls	r6, r2, #2
 801b59c:	fb03 f305 	mul.w	r3, r3, r5
 801b5a0:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 801b5a4:	657a      	str	r2, [r7, #84]	; 0x54
 801b5a6:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 801b5aa:	653b      	str	r3, [r7, #80]	; 0x50
 801b5ac:	ea4f 098c 	mov.w	r9, ip, lsl #2
 801b5b0:	fb04 f300 	mul.w	r3, r4, r0
 801b5b4:	663e      	str	r6, [r7, #96]	; 0x60
 801b5b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801b5ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801b5be:	1b9b      	subs	r3, r3, r6
 801b5c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801b5c4:	008b      	lsls	r3, r1, #2
 801b5c6:	637b      	str	r3, [r7, #52]	; 0x34
 801b5c8:	00d3      	lsls	r3, r2, #3
 801b5ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b5cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801b5ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801b5d2:	189e      	adds	r6, r3, r2
 801b5d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801b5d8:	2b00      	cmp	r3, #0
 801b5da:	f2c0 813e 	blt.w	801b85a <forward_conv2d+0x632>
 801b5de:	2100      	movs	r1, #0
 801b5e0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 801b5e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801b5e6:	4688      	mov	r8, r1
 801b5e8:	460d      	mov	r5, r1
 801b5ea:	f8d7 40cc 	ldr.w	r4, [r7, #204]	; 0xcc
 801b5ee:	f103 3cff 	add.w	ip, r3, #4294967295
 801b5f2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801b5f6:	0080      	lsls	r0, r0, #2
 801b5f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801b5fc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801b600:	4422      	add	r2, r4
 801b602:	f8d7 40b4 	ldr.w	r4, [r7, #180]	; 0xb4
 801b606:	4423      	add	r3, r4
 801b608:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 801b60c:	42a2      	cmp	r2, r4
 801b60e:	bf94      	ite	ls
 801b610:	ebc5 0202 	rsbls	r2, r5, r2
 801b614:	ebc5 0204 	rsbhi	r2, r5, r4
 801b618:	f8d7 50fc 	ldr.w	r5, [r7, #252]	; 0xfc
 801b61c:	eb08 0403 	add.w	r4, r8, r3
 801b620:	1a52      	subs	r2, r2, r1
 801b622:	462b      	mov	r3, r5
 801b624:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 801b628:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 801b62c:	2d00      	cmp	r5, #0
 801b62e:	bf08      	it	eq
 801b630:	4633      	moveq	r3, r6
 801b632:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 801b636:	440a      	add	r2, r1
 801b638:	f8d7 50a4 	ldr.w	r5, [r7, #164]	; 0xa4
 801b63c:	42b3      	cmp	r3, r6
 801b63e:	f102 36ff 	add.w	r6, r2, #4294967295
 801b642:	fb00 5004 	mla	r0, r0, r4, r5
 801b646:	460a      	mov	r2, r1
 801b648:	fe08 6a06 	vseleq.f32	s12, s16, s12
 801b64c:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
 801b650:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b652:	fb96 f6f1 	sdiv	r6, r6, r1
 801b656:	fb9c f5f1 	sdiv	r5, ip, r1
 801b65a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801b65c:	440d      	add	r5, r1
 801b65e:	fb06 0112 	mls	r1, r6, r2, r0
 801b662:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 801b666:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801b66a:	fb0e 0505 	mla	r5, lr, r5, r0
 801b66e:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 801b672:	1b92      	subs	r2, r2, r6
 801b674:	2800      	cmp	r0, #0
 801b676:	d075      	beq.n	801b764 <forward_conv2d+0x53c>
 801b678:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 801b67c:	fb0e f802 	mul.w	r8, lr, r2
 801b680:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801b682:	fb00 fb01 	mul.w	fp, r0, r1
 801b686:	2a00      	cmp	r2, #0
 801b688:	d06c      	beq.n	801b764 <forward_conv2d+0x53c>
 801b68a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801b68c:	189a      	adds	r2, r3, r2
 801b68e:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 801b692:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801b696:	1ad3      	subs	r3, r2, r3
 801b698:	633b      	str	r3, [r7, #48]	; 0x30
 801b69a:	2300      	movs	r3, #0
 801b69c:	66fb      	str	r3, [r7, #108]	; 0x6c
 801b69e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801b6a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b6a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801b6a6:	4413      	add	r3, r2
 801b6a8:	188a      	adds	r2, r1, r2
 801b6aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 801b6ac:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 801b6b0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 801b6b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801b6b8:	f1ba 0f00 	cmp.w	sl, #0
 801b6bc:	ecf3 7a01 	vldmia	r3!, {s15}
 801b6c0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 801b6c4:	ee67 7a86 	vmul.f32	s15, s15, s12
 801b6c8:	f340 80c5 	ble.w	801b856 <forward_conv2d+0x62e>
 801b6cc:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 801b6d0:	f04f 0c00 	mov.w	ip, #0
 801b6d4:	2e00      	cmp	r6, #0
 801b6d6:	dd1f      	ble.n	801b718 <forward_conv2d+0x4f0>
 801b6d8:	2100      	movs	r1, #0
 801b6da:	eb00 040e 	add.w	r4, r0, lr
 801b6de:	4284      	cmp	r4, r0
 801b6e0:	d910      	bls.n	801b704 <forward_conv2d+0x4dc>
 801b6e2:	4603      	mov	r3, r0
 801b6e4:	462a      	mov	r2, r5
 801b6e6:	ecb3 7a01 	vldmia	r3!, {s14}
 801b6ea:	ecf2 6a01 	vldmia	r2!, {s13}
 801b6ee:	429c      	cmp	r4, r3
 801b6f0:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b6f4:	d8f7      	bhi.n	801b6e6 <forward_conv2d+0x4be>
 801b6f6:	43c3      	mvns	r3, r0
 801b6f8:	441c      	add	r4, r3
 801b6fa:	f024 0403 	bic.w	r4, r4, #3
 801b6fe:	3404      	adds	r4, #4
 801b700:	4425      	add	r5, r4
 801b702:	4420      	add	r0, r4
 801b704:	3101      	adds	r1, #1
 801b706:	4448      	add	r0, r9
 801b708:	428e      	cmp	r6, r1
 801b70a:	d1e6      	bne.n	801b6da <forward_conv2d+0x4b2>
 801b70c:	e004      	b.n	801b718 <forward_conv2d+0x4f0>
 801b70e:	bf00      	nop
 801b710:	0801b185 	.word	0x0801b185
 801b714:	00000000 	.word	0x00000000
 801b718:	f10c 0c01 	add.w	ip, ip, #1
 801b71c:	4458      	add	r0, fp
 801b71e:	4445      	add	r5, r8
 801b720:	45e2      	cmp	sl, ip
 801b722:	d1d7      	bne.n	801b6d4 <forward_conv2d+0x4ac>
 801b724:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 801b728:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801b72c:	441d      	add	r5, r3
 801b72e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801b732:	ece3 7a01 	vstmia	r3!, {s15}
 801b736:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 801b73a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b73e:	4293      	cmp	r3, r2
 801b740:	d1b8      	bne.n	801b6b4 <forward_conv2d+0x48c>
 801b742:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801b746:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b748:	4472      	add	r2, lr
 801b74a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b74c:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 801b750:	3301      	adds	r3, #1
 801b752:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801b754:	66fb      	str	r3, [r7, #108]	; 0x6c
 801b756:	1a52      	subs	r2, r2, r1
 801b758:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 801b75c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 801b760:	429a      	cmp	r2, r3
 801b762:	d19c      	bne.n	801b69e <forward_conv2d+0x476>
 801b764:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 801b768:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801b76c:	4608      	mov	r0, r1
 801b76e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 801b772:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801b774:	4410      	add	r0, r2
 801b776:	3301      	adds	r3, #1
 801b778:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
 801b77c:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 801b780:	67bb      	str	r3, [r7, #120]	; 0x78
 801b782:	4401      	add	r1, r0
 801b784:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 801b788:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 801b78c:	1a8a      	subs	r2, r1, r2
 801b78e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 801b792:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 801b796:	429a      	cmp	r2, r3
 801b798:	f47f af18 	bne.w	801b5cc <forward_conv2d+0x3a4>
 801b79c:	f8d7 b020 	ldr.w	fp, [r7, #32]
 801b7a0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801b7a4:	b37b      	cbz	r3, 801b806 <forward_conv2d+0x5de>
 801b7a6:	f8d7 40f8 	ldr.w	r4, [r7, #248]	; 0xf8
 801b7aa:	2500      	movs	r5, #0
 801b7ac:	f8d7 608c 	ldr.w	r6, [r7, #140]	; 0x8c
 801b7b0:	f8d7 80e0 	ldr.w	r8, [r7, #224]	; 0xe0
 801b7b4:	46a2      	mov	sl, r4
 801b7b6:	f8d7 90e8 	ldr.w	r9, [r7, #232]	; 0xe8
 801b7ba:	f8d8 1018 	ldr.w	r1, [r8, #24]
 801b7be:	4633      	mov	r3, r6
 801b7c0:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 801b7c4:	4640      	mov	r0, r8
 801b7c6:	f8c1 a008 	str.w	sl, [r1, #8]
 801b7ca:	4641      	mov	r1, r8
 801b7cc:	4416      	add	r6, r2
 801b7ce:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 801b7d2:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 801b7d6:	3501      	adds	r5, #1
 801b7d8:	47a0      	blx	r4
 801b7da:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 801b7de:	eba6 0309 	sub.w	r3, r6, r9
 801b7e2:	4492      	add	sl, r2
 801b7e4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801b7e8:	4293      	cmp	r3, r2
 801b7ea:	bfa8      	it	ge
 801b7ec:	464e      	movge	r6, r9
 801b7ee:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801b7f2:	42ab      	cmp	r3, r5
 801b7f4:	d1e1      	bne.n	801b7ba <forward_conv2d+0x592>
 801b7f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801b7fa:	69ba      	ldr	r2, [r7, #24]
 801b7fc:	f8c7 608c 	str.w	r6, [r7, #140]	; 0x8c
 801b800:	4413      	add	r3, r2
 801b802:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 801b806:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 801b80a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801b80c:	4604      	mov	r4, r0
 801b80e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b812:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 801b816:	699b      	ldr	r3, [r3, #24]
 801b818:	4414      	add	r4, r2
 801b81a:	1a82      	subs	r2, r0, r2
 801b81c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 801b820:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 801b824:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 801b828:	3101      	adds	r1, #1
 801b82a:	68da      	ldr	r2, [r3, #12]
 801b82c:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 801b830:	609a      	str	r2, [r3, #8]
 801b832:	697c      	ldr	r4, [r7, #20]
 801b834:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801b838:	4420      	add	r0, r4
 801b83a:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 801b83e:	428b      	cmp	r3, r1
 801b840:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
 801b844:	f47f ae4a 	bne.w	801b4dc <forward_conv2d+0x2b4>
 801b848:	f507 7792 	add.w	r7, r7, #292	; 0x124
 801b84c:	46bd      	mov	sp, r7
 801b84e:	ecbd 8b08 	vpop	{d8-d11}
 801b852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b856:	461a      	mov	r2, r3
 801b858:	e766      	b.n	801b728 <forward_conv2d+0x500>
 801b85a:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 801b85e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801b862:	460d      	mov	r5, r1
 801b864:	4688      	mov	r8, r1
 801b866:	1853      	adds	r3, r2, r1
 801b868:	4611      	mov	r1, r2
 801b86a:	fb95 f2f2 	sdiv	r2, r5, r2
 801b86e:	fb01 5212 	mls	r2, r1, r2, r5
 801b872:	460c      	mov	r4, r1
 801b874:	1a8a      	subs	r2, r1, r2
 801b876:	fb92 f1f1 	sdiv	r1, r2, r1
 801b87a:	fb04 2111 	mls	r1, r4, r1, r2
 801b87e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801b880:	1888      	adds	r0, r1, r2
 801b882:	e6b2      	b.n	801b5ea <forward_conv2d+0x3c2>
 801b884:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801b886:	2901      	cmp	r1, #1
 801b888:	f47f ae40 	bne.w	801b50c <forward_conv2d+0x2e4>
 801b88c:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 801b890:	2900      	cmp	r1, #0
 801b892:	d0b8      	beq.n	801b806 <forward_conv2d+0x5de>
 801b894:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 801b898:	1ad1      	subs	r1, r2, r3
 801b89a:	f8d7 a004 	ldr.w	sl, [r7, #4]
 801b89e:	0082      	lsls	r2, r0, #2
 801b8a0:	fb03 f000 	mul.w	r0, r3, r0
 801b8a4:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 801b8a8:	6738      	str	r0, [r7, #112]	; 0x70
 801b8aa:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 801b8ae:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
 801b8b2:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 801b8b6:	1a41      	subs	r1, r0, r1
 801b8b8:	69f8      	ldr	r0, [r7, #28]
 801b8ba:	fb00 f303 	mul.w	r3, r0, r3
 801b8be:	637b      	str	r3, [r7, #52]	; 0x34
 801b8c0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801b8c4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 801b8c8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801b8cc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 801b8d0:	fb02 f301 	mul.w	r3, r2, r1
 801b8d4:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801b8d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b8da:	2300      	movs	r3, #0
 801b8dc:	67bb      	str	r3, [r7, #120]	; 0x78
 801b8de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801b8e2:	fbb3 f3f2 	udiv	r3, r3, r2
 801b8e6:	4619      	mov	r1, r3
 801b8e8:	ebc3 7283 	rsb	r2, r3, r3, lsl #30
 801b8ec:	633b      	str	r3, [r7, #48]	; 0x30
 801b8ee:	ebc3 7343 	rsb	r3, r3, r3, lsl #29
 801b8f2:	0092      	lsls	r2, r2, #2
 801b8f4:	00db      	lsls	r3, r3, #3
 801b8f6:	64fa      	str	r2, [r7, #76]	; 0x4c
 801b8f8:	603b      	str	r3, [r7, #0]
 801b8fa:	008b      	lsls	r3, r1, #2
 801b8fc:	60bb      	str	r3, [r7, #8]
 801b8fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801b902:	2b00      	cmp	r3, #0
 801b904:	f2c0 810e 	blt.w	801bb24 <forward_conv2d+0x8fc>
 801b908:	2400      	movs	r4, #0
 801b90a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801b90c:	4621      	mov	r1, r4
 801b90e:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 801b912:	f8d7 6114 	ldr.w	r6, [r7, #276]	; 0x114
 801b916:	1818      	adds	r0, r3, r0
 801b918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b91c:	f8d7 50fc 	ldr.w	r5, [r7, #252]	; 0xfc
 801b920:	18f3      	adds	r3, r6, r3
 801b922:	4420      	add	r0, r4
 801b924:	461c      	mov	r4, r3
 801b926:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801b92a:	0080      	lsls	r0, r0, #2
 801b92c:	429c      	cmp	r4, r3
 801b92e:	bf28      	it	cs
 801b930:	461c      	movcs	r4, r3
 801b932:	1a64      	subs	r4, r4, r1
 801b934:	2d00      	cmp	r5, #0
 801b936:	f000 80e6 	beq.w	801bb06 <forward_conv2d+0x8de>
 801b93a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b93e:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 801b942:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 801b946:	eb03 0982 	add.w	r9, r3, r2, lsl #2
 801b94a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b94e:	428d      	cmp	r5, r1
 801b950:	462a      	mov	r2, r5
 801b952:	eba6 0104 	sub.w	r1, r6, r4
 801b956:	eba3 0304 	sub.w	r3, r3, r4
 801b95a:	fe48 3a23 	vseleq.f32	s7, s16, s7
 801b95e:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 801b960:	f8d7 60a4 	ldr.w	r6, [r7, #164]	; 0xa4
 801b964:	4428      	add	r0, r5
 801b966:	f8d7 510c 	ldr.w	r5, [r7, #268]	; 0x10c
 801b96a:	fb05 6e00 	mla	lr, r5, r0, r6
 801b96e:	eb0e 000b 	add.w	r0, lr, fp
 801b972:	4586      	cmp	lr, r0
 801b974:	6238      	str	r0, [r7, #32]
 801b976:	f080 80a7 	bcs.w	801bac8 <forward_conv2d+0x8a0>
 801b97a:	009b      	lsls	r3, r3, #2
 801b97c:	fb0b f101 	mul.w	r1, fp, r1
 801b980:	f024 0803 	bic.w	r8, r4, #3
 801b984:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801b988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b98a:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 801b98e:	2b00      	cmp	r3, #0
 801b990:	f000 809a 	beq.w	801bac8 <forward_conv2d+0x8a0>
 801b994:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801b996:	f108 33ff 	add.w	r3, r8, #4294967295
 801b99a:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 801b99e:	089b      	lsrs	r3, r3, #2
 801b9a0:	4401      	add	r1, r0
 801b9a2:	68b8      	ldr	r0, [r7, #8]
 801b9a4:	3301      	adds	r3, #1
 801b9a6:	1810      	adds	r0, r2, r0
 801b9a8:	1a8a      	subs	r2, r1, r2
 801b9aa:	613a      	str	r2, [r7, #16]
 801b9ac:	fb03 f20a 	mul.w	r2, r3, sl
 801b9b0:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
 801b9b4:	657a      	str	r2, [r7, #84]	; 0x54
 801b9b6:	011a      	lsls	r2, r3, #4
 801b9b8:	009b      	lsls	r3, r3, #2
 801b9ba:	663a      	str	r2, [r7, #96]	; 0x60
 801b9bc:	653b      	str	r3, [r7, #80]	; 0x50
 801b9be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801b9c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b9c4:	6939      	ldr	r1, [r7, #16]
 801b9c6:	4413      	add	r3, r2
 801b9c8:	188a      	adds	r2, r1, r2
 801b9ca:	60fb      	str	r3, [r7, #12]
 801b9cc:	66fa      	str	r2, [r7, #108]	; 0x6c
 801b9ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801b9d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801b9d6:	ecf3 6a01 	vldmia	r3!, {s13}
 801b9da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801b9de:	ee66 6aa3 	vmul.f32	s13, s13, s7
 801b9e2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801b9e6:	2b00      	cmp	r3, #0
 801b9e8:	dd57      	ble.n	801ba9a <forward_conv2d+0x872>
 801b9ea:	4676      	mov	r6, lr
 801b9ec:	f04f 0c00 	mov.w	ip, #0
 801b9f0:	f1b8 0f00 	cmp.w	r8, #0
 801b9f4:	f340 8085 	ble.w	801bb02 <forward_conv2d+0x8da>
 801b9f8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801b9fc:	f109 0310 	add.w	r3, r9, #16
 801ba00:	2000      	movs	r0, #0
 801ba02:	18b1      	adds	r1, r6, r2
 801ba04:	4632      	mov	r2, r6
 801ba06:	eb02 050b 	add.w	r5, r2, fp
 801ba0a:	ed53 7a03 	vldr	s15, [r3, #-12]
 801ba0e:	ed92 4a00 	vldr	s8, [r2]
 801ba12:	3004      	adds	r0, #4
 801ba14:	ed95 7a00 	vldr	s14, [r5]
 801ba18:	eb01 050b 	add.w	r5, r1, fp
 801ba1c:	ed53 4a04 	vldr	s9, [r3, #-16]
 801ba20:	4540      	cmp	r0, r8
 801ba22:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ba26:	ed91 5a00 	vldr	s10, [r1]
 801ba2a:	ed53 5a02 	vldr	s11, [r3, #-8]
 801ba2e:	4452      	add	r2, sl
 801ba30:	ed13 7a01 	vldr	s14, [r3, #-4]
 801ba34:	4451      	add	r1, sl
 801ba36:	eee4 7a24 	vfma.f32	s15, s8, s9
 801ba3a:	ed95 6a00 	vldr	s12, [r5]
 801ba3e:	f103 0310 	add.w	r3, r3, #16
 801ba42:	eee5 7a25 	vfma.f32	s15, s10, s11
 801ba46:	eee6 7a07 	vfma.f32	s15, s12, s14
 801ba4a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801ba4e:	dbda      	blt.n	801ba06 <forward_conv2d+0x7de>
 801ba50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ba52:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801ba54:	441e      	add	r6, r3
 801ba56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801ba58:	4499      	add	r9, r3
 801ba5a:	42a0      	cmp	r0, r4
 801ba5c:	da11      	bge.n	801ba82 <forward_conv2d+0x85a>
 801ba5e:	4602      	mov	r2, r0
 801ba60:	4633      	mov	r3, r6
 801ba62:	4649      	mov	r1, r9
 801ba64:	3201      	adds	r2, #1
 801ba66:	edd3 7a00 	vldr	s15, [r3]
 801ba6a:	ecb1 7a01 	vldmia	r1!, {s14}
 801ba6e:	445b      	add	r3, fp
 801ba70:	42a2      	cmp	r2, r4
 801ba72:	eee7 6a27 	vfma.f32	s13, s14, s15
 801ba76:	d1f5      	bne.n	801ba64 <forward_conv2d+0x83c>
 801ba78:	1a20      	subs	r0, r4, r0
 801ba7a:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 801ba7e:	fb00 660b 	mla	r6, r0, fp, r6
 801ba82:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801ba86:	f10c 0c01 	add.w	ip, ip, #1
 801ba8a:	441e      	add	r6, r3
 801ba8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801ba90:	4499      	add	r9, r3
 801ba92:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801ba96:	4563      	cmp	r3, ip
 801ba98:	d1aa      	bne.n	801b9f0 <forward_conv2d+0x7c8>
 801ba9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ba9c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801baa0:	4499      	add	r9, r3
 801baa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801baa4:	ece3 6a01 	vstmia	r3!, {s13}
 801baa8:	66fb      	str	r3, [r7, #108]	; 0x6c
 801baaa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801baae:	4293      	cmp	r3, r2
 801bab0:	d18f      	bne.n	801b9d2 <forward_conv2d+0x7aa>
 801bab2:	68fb      	ldr	r3, [r7, #12]
 801bab4:	f10e 0e04 	add.w	lr, lr, #4
 801bab8:	683a      	ldr	r2, [r7, #0]
 801baba:	1a9b      	subs	r3, r3, r2
 801babc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801bac0:	6a3b      	ldr	r3, [r7, #32]
 801bac2:	459e      	cmp	lr, r3
 801bac4:	f4ff af7b 	bcc.w	801b9be <forward_conv2d+0x796>
 801bac8:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 801bacc:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 801bad0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801bad2:	440a      	add	r2, r1
 801bad4:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 801bad8:	3301      	adds	r3, #1
 801bada:	4608      	mov	r0, r1
 801badc:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 801bae0:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 801bae4:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801bae8:	67bb      	str	r3, [r7, #120]	; 0x78
 801baea:	4410      	add	r0, r2
 801baec:	1a8a      	subs	r2, r1, r2
 801baee:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 801baf2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 801baf6:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 801bafa:	429a      	cmp	r2, r3
 801bafc:	f47f aeff 	bne.w	801b8fe <forward_conv2d+0x6d6>
 801bb00:	e64e      	b.n	801b7a0 <forward_conv2d+0x578>
 801bb02:	2000      	movs	r0, #0
 801bb04:	e7a9      	b.n	801ba5a <forward_conv2d+0x832>
 801bb06:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801bb0a:	eef0 3a48 	vmov.f32	s7, s16
 801bb0e:	eb03 0982 	add.w	r9, r3, r2, lsl #2
 801bb12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bb16:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 801bb1a:	1b19      	subs	r1, r3, r4
 801bb1c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801bb20:	1b1b      	subs	r3, r3, r4
 801bb22:	e71c      	b.n	801b95e <forward_conv2d+0x736>
 801bb24:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 801bb28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801bb2a:	4621      	mov	r1, r4
 801bb2c:	191a      	adds	r2, r3, r4
 801bb2e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801bb32:	e6ec      	b.n	801b90e <forward_conv2d+0x6e6>
 801bb34:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801bb36:	2801      	cmp	r0, #1
 801bb38:	f47f ace8 	bne.w	801b50c <forward_conv2d+0x2e4>
 801bb3c:	1ad2      	subs	r2, r2, r3
 801bb3e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801bb40:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 801bb44:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 801bb48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801bb4a:	fb00 4101 	mla	r1, r0, r1, r4
 801bb4e:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 801bb52:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 801bb56:	f080 818a 	bcs.w	801be6e <forward_conv2d+0xc46>
 801bb5a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 801bb5e:	2a00      	cmp	r2, #0
 801bb60:	f43f ae1e 	beq.w	801b7a0 <forward_conv2d+0x578>
 801bb64:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801bb66:	f8c7 b034 	str.w	fp, [r7, #52]	; 0x34
 801bb6a:	fb02 f303 	mul.w	r3, r2, r3
 801bb6e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801bb70:	663b      	str	r3, [r7, #96]	; 0x60
 801bb72:	4411      	add	r1, r2
 801bb74:	1a9b      	subs	r3, r3, r2
 801bb76:	64f9      	str	r1, [r7, #76]	; 0x4c
 801bb78:	66fb      	str	r3, [r7, #108]	; 0x6c
 801bb7a:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 801bb7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801bb82:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 801bb86:	67bb      	str	r3, [r7, #120]	; 0x78
 801bb88:	2300      	movs	r3, #0
 801bb8a:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 801bb8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801bb92:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 801bb96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801bb9a:	2b00      	cmp	r3, #0
 801bb9c:	f000 812e 	beq.w	801bdfc <forward_conv2d+0xbd4>
 801bba0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801bba2:	ed93 6a00 	vldr	s12, [r3]
 801bba6:	3304      	adds	r3, #4
 801bba8:	67bb      	str	r3, [r7, #120]	; 0x78
 801bbaa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801bbae:	2b00      	cmp	r3, #0
 801bbb0:	f000 80fe 	beq.w	801bdb0 <forward_conv2d+0xb88>
 801bbb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bbb8:	f04f 0b00 	mov.w	fp, #0
 801bbbc:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 801bbc0:	eb03 0802 	add.w	r8, r3, r2
 801bbc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801bbc6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801bbca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bbcc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801bbd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bbd4:	673b      	str	r3, [r7, #112]	; 0x70
 801bbd6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801bbda:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801bbde:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801bbe2:	2b00      	cmp	r3, #0
 801bbe4:	f2c0 8101 	blt.w	801bdea <forward_conv2d+0xbc2>
 801bbe8:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 801bbec:	2300      	movs	r3, #0
 801bbee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801bbf0:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 801bbf4:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 801bbf8:	4540      	cmp	r0, r8
 801bbfa:	bf94      	ite	ls
 801bbfc:	ebc3 0300 	rsbls	r3, r3, r0
 801bc00:	ebc3 0308 	rsbhi	r3, r3, r8
 801bc04:	4422      	add	r2, r4
 801bc06:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 801bc0a:	1ac0      	subs	r0, r0, r3
 801bc0c:	eba4 0903 	sub.w	r9, r4, r3
 801bc10:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 801bc14:	fb03 f304 	mul.w	r3, r3, r4
 801bc18:	f8d7 411c 	ldr.w	r4, [r7, #284]	; 0x11c
 801bc1c:	2c00      	cmp	r4, #0
 801bc1e:	f340 80e1 	ble.w	801bde4 <forward_conv2d+0xbbc>
 801bc22:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 801bc26:	f023 050f 	bic.w	r5, r3, #15
 801bc2a:	eef0 6a46 	vmov.f32	s13, s12
 801bc2e:	f04f 0e00 	mov.w	lr, #0
 801bc32:	fb04 f000 	mul.w	r0, r4, r0
 801bc36:	fb04 f909 	mul.w	r9, r4, r9
 801bc3a:	6578      	str	r0, [r7, #84]	; 0x54
 801bc3c:	1e68      	subs	r0, r5, #1
 801bc3e:	0900      	lsrs	r0, r0, #4
 801bc40:	3001      	adds	r0, #1
 801bc42:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 801bc46:	0100      	lsls	r0, r0, #4
 801bc48:	6538      	str	r0, [r7, #80]	; 0x50
 801bc4a:	2d00      	cmp	r5, #0
 801bc4c:	f340 80c8 	ble.w	801bde0 <forward_conv2d+0xbb8>
 801bc50:	f101 0440 	add.w	r4, r1, #64	; 0x40
 801bc54:	f102 0040 	add.w	r0, r2, #64	; 0x40
 801bc58:	2600      	movs	r6, #0
 801bc5a:	ed10 7a0f 	vldr	s14, [r0, #-60]	; 0xffffffc4
 801bc5e:	3610      	adds	r6, #16
 801bc60:	ed54 7a0f 	vldr	s15, [r4, #-60]	; 0xffffffc4
 801bc64:	3040      	adds	r0, #64	; 0x40
 801bc66:	ed50 5a20 	vldr	s11, [r0, #-128]	; 0xffffff80
 801bc6a:	42ae      	cmp	r6, r5
 801bc6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801bc70:	ed14 7a10 	vldr	s14, [r4, #-64]	; 0xffffffc0
 801bc74:	ed50 2a1e 	vldr	s5, [r0, #-120]	; 0xffffff88
 801bc78:	f104 0440 	add.w	r4, r4, #64	; 0x40
 801bc7c:	ed14 3a1e 	vldr	s6, [r4, #-120]	; 0xffffff88
 801bc80:	eee5 7a87 	vfma.f32	s15, s11, s14
 801bc84:	ed54 3a1d 	vldr	s7, [r4, #-116]	; 0xffffff8c
 801bc88:	ed10 4a1d 	vldr	s8, [r0, #-116]	; 0xffffff8c
 801bc8c:	ed50 4a1c 	vldr	s9, [r0, #-112]	; 0xffffff90
 801bc90:	ed14 5a1c 	vldr	s10, [r4, #-112]	; 0xffffff90
 801bc94:	ed50 5a1b 	vldr	s11, [r0, #-108]	; 0xffffff94
 801bc98:	ed14 7a1b 	vldr	s14, [r4, #-108]	; 0xffffff94
 801bc9c:	eee2 7a83 	vfma.f32	s15, s5, s6
 801bca0:	ed54 ba1a 	vldr	s23, [r4, #-104]	; 0xffffff98
 801bca4:	ed10 ba1a 	vldr	s22, [r0, #-104]	; 0xffffff98
 801bca8:	ed54 aa19 	vldr	s21, [r4, #-100]	; 0xffffff9c
 801bcac:	ed10 aa19 	vldr	s20, [r0, #-100]	; 0xffffff9c
 801bcb0:	ed50 9a18 	vldr	s19, [r0, #-96]	; 0xffffffa0
 801bcb4:	ed14 9a18 	vldr	s18, [r4, #-96]	; 0xffffffa0
 801bcb8:	eee3 7a84 	vfma.f32	s15, s7, s8
 801bcbc:	ed50 8a17 	vldr	s17, [r0, #-92]	; 0xffffffa4
 801bcc0:	ed14 0a17 	vldr	s0, [r4, #-92]	; 0xffffffa4
 801bcc4:	ed54 0a16 	vldr	s1, [r4, #-88]	; 0xffffffa8
 801bcc8:	ed10 1a16 	vldr	s2, [r0, #-88]	; 0xffffffa8
 801bccc:	ed54 1a15 	vldr	s3, [r4, #-84]	; 0xffffffac
 801bcd0:	ed10 2a15 	vldr	s4, [r0, #-84]	; 0xffffffac
 801bcd4:	eee4 7a85 	vfma.f32	s15, s9, s10
 801bcd8:	ed50 2a14 	vldr	s5, [r0, #-80]	; 0xffffffb0
 801bcdc:	ed14 3a14 	vldr	s6, [r4, #-80]	; 0xffffffb0
 801bce0:	ed50 3a13 	vldr	s7, [r0, #-76]	; 0xffffffb4
 801bce4:	ed14 4a13 	vldr	s8, [r4, #-76]	; 0xffffffb4
 801bce8:	ed50 4a12 	vldr	s9, [r0, #-72]	; 0xffffffb8
 801bcec:	ed14 5a12 	vldr	s10, [r4, #-72]	; 0xffffffb8
 801bcf0:	eee5 7a87 	vfma.f32	s15, s11, s14
 801bcf4:	ed54 5a11 	vldr	s11, [r4, #-68]	; 0xffffffbc
 801bcf8:	ed10 7a11 	vldr	s14, [r0, #-68]	; 0xffffffbc
 801bcfc:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 801bd00:	eeea 7a8a 	vfma.f32	s15, s21, s20
 801bd04:	eee9 7a89 	vfma.f32	s15, s19, s18
 801bd08:	eee8 7a80 	vfma.f32	s15, s17, s0
 801bd0c:	eee0 7a81 	vfma.f32	s15, s1, s2
 801bd10:	eee1 7a82 	vfma.f32	s15, s3, s4
 801bd14:	eee2 7a83 	vfma.f32	s15, s5, s6
 801bd18:	eee3 7a84 	vfma.f32	s15, s7, s8
 801bd1c:	eee4 7a85 	vfma.f32	s15, s9, s10
 801bd20:	eee5 7a87 	vfma.f32	s15, s11, s14
 801bd24:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801bd28:	db97      	blt.n	801bc5a <forward_conv2d+0xa32>
 801bd2a:	4451      	add	r1, sl
 801bd2c:	4452      	add	r2, sl
 801bd2e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801bd30:	4283      	cmp	r3, r0
 801bd32:	dd0f      	ble.n	801bd54 <forward_conv2d+0xb2c>
 801bd34:	4604      	mov	r4, r0
 801bd36:	468c      	mov	ip, r1
 801bd38:	4616      	mov	r6, r2
 801bd3a:	3401      	adds	r4, #1
 801bd3c:	ecb6 7a01 	vldmia	r6!, {s14}
 801bd40:	ecfc 7a01 	vldmia	ip!, {s15}
 801bd44:	42a3      	cmp	r3, r4
 801bd46:	eee7 6a27 	vfma.f32	s13, s14, s15
 801bd4a:	d1f6      	bne.n	801bd3a <forward_conv2d+0xb12>
 801bd4c:	1a18      	subs	r0, r3, r0
 801bd4e:	0080      	lsls	r0, r0, #2
 801bd50:	4402      	add	r2, r0
 801bd52:	4401      	add	r1, r0
 801bd54:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801bd56:	f10e 0e01 	add.w	lr, lr, #1
 801bd5a:	4449      	add	r1, r9
 801bd5c:	4402      	add	r2, r0
 801bd5e:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 801bd62:	4570      	cmp	r0, lr
 801bd64:	f47f af71 	bne.w	801bc4a <forward_conv2d+0xa22>
 801bd68:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 801bd6c:	f10b 0b01 	add.w	fp, fp, #1
 801bd70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801bd72:	4608      	mov	r0, r1
 801bd74:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801bd78:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 801bd7c:	4410      	add	r0, r2
 801bd7e:	edc3 6a00 	vstr	s13, [r3]
 801bd82:	440b      	add	r3, r1
 801bd84:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 801bd88:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
 801bd8c:	eba8 0802 	sub.w	r8, r8, r2
 801bd90:	4608      	mov	r0, r1
 801bd92:	673b      	str	r3, [r7, #112]	; 0x70
 801bd94:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 801bd98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801bd9a:	4418      	add	r0, r3
 801bd9c:	1acb      	subs	r3, r1, r3
 801bd9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801bda2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801bda6:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
 801bdaa:	455b      	cmp	r3, fp
 801bdac:	f47f af17 	bne.w	801bbde <forward_conv2d+0x9b6>
 801bdb0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801bdb4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801bdb6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801bdba:	440a      	add	r2, r1
 801bdbc:	3301      	adds	r3, #1
 801bdbe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 801bdc2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801bdc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801bdca:	3204      	adds	r2, #4
 801bdcc:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 801bdd0:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 801bdd4:	429a      	cmp	r2, r3
 801bdd6:	f47f aede 	bne.w	801bb96 <forward_conv2d+0x96e>
 801bdda:	f8d7 b034 	ldr.w	fp, [r7, #52]	; 0x34
 801bdde:	e4df      	b.n	801b7a0 <forward_conv2d+0x578>
 801bde0:	2000      	movs	r0, #0
 801bde2:	e7a5      	b.n	801bd30 <forward_conv2d+0xb08>
 801bde4:	eef0 6a46 	vmov.f32	s13, s12
 801bde8:	e7be      	b.n	801bd68 <forward_conv2d+0xb40>
 801bdea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bdee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801bdf2:	eba8 0303 	sub.w	r3, r8, r3
 801bdf6:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 801bdfa:	e6f9      	b.n	801bbf0 <forward_conv2d+0x9c8>
 801bdfc:	eeb0 6a48 	vmov.f32	s12, s16
 801be00:	e6d3      	b.n	801bbaa <forward_conv2d+0x982>
 801be02:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 801be06:	68ca      	ldr	r2, [r1, #12]
 801be08:	2a00      	cmp	r2, #0
 801be0a:	f43f aad0 	beq.w	801b3ae <forward_conv2d+0x186>
 801be0e:	69b3      	ldr	r3, [r6, #24]
 801be10:	8818      	ldrh	r0, [r3, #0]
 801be12:	2803      	cmp	r0, #3
 801be14:	f240 8196 	bls.w	801c144 <forward_conv2d+0xf1c>
 801be18:	685b      	ldr	r3, [r3, #4]
 801be1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801be1c:	b323      	cbz	r3, 801be68 <forward_conv2d+0xc40>
 801be1e:	681b      	ldr	r3, [r3, #0]
 801be20:	b313      	cbz	r3, 801be68 <forward_conv2d+0xc40>
 801be22:	699c      	ldr	r4, [r3, #24]
 801be24:	462b      	mov	r3, r5
 801be26:	f8d7 5108 	ldr.w	r5, [r7, #264]	; 0x108
 801be2a:	6889      	ldr	r1, [r1, #8]
 801be2c:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 801be30:	2800      	cmp	r0, #0
 801be32:	bf18      	it	ne
 801be34:	4605      	movne	r5, r0
 801be36:	f8c7 5108 	str.w	r5, [r7, #264]	; 0x108
 801be3a:	f8d7 510c 	ldr.w	r5, [r7, #268]	; 0x10c
 801be3e:	e9cd 5400 	strd	r5, r4, [sp]
 801be42:	f7ff f9a1 	bl	801b188 <ai_dict_decompress_f32>
 801be46:	f7ff bab2 	b.w	801b3ae <forward_conv2d+0x186>
 801be4a:	2800      	cmp	r0, #0
 801be4c:	f000 817d 	beq.w	801c14a <forward_conv2d+0xf22>
 801be50:	6883      	ldr	r3, [r0, #8]
 801be52:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 801be56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801be5a:	2301      	movs	r3, #1
 801be5c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801be60:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801be64:	f7ff ba6f 	b.w	801b346 <forward_conv2d+0x11e>
 801be68:	2300      	movs	r3, #0
 801be6a:	699b      	ldr	r3, [r3, #24]
 801be6c:	deff      	udf	#255	; 0xff
 801be6e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801be72:	f8c7 d060 	str.w	sp, [r7, #96]	; 0x60
 801be76:	320a      	adds	r2, #10
 801be78:	f022 0207 	bic.w	r2, r2, #7
 801be7c:	ebad 0d02 	sub.w	sp, sp, r2
 801be80:	aa02      	add	r2, sp, #8
 801be82:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 801be86:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 801be8a:	2a00      	cmp	r2, #0
 801be8c:	f000 8145 	beq.w	801c11a <forward_conv2d+0xef2>
 801be90:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801be92:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
 801be96:	fb02 f303 	mul.w	r3, r2, r3
 801be9a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801be9c:	657b      	str	r3, [r7, #84]	; 0x54
 801be9e:	4411      	add	r1, r2
 801bea0:	1a9b      	subs	r3, r3, r2
 801bea2:	6379      	str	r1, [r7, #52]	; 0x34
 801bea4:	64fb      	str	r3, [r7, #76]	; 0x4c
 801bea6:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 801beaa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801beae:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 801beb2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801beb6:	2300      	movs	r3, #0
 801beb8:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 801bebc:	67bb      	str	r3, [r7, #120]	; 0x78
 801bebe:	6739      	str	r1, [r7, #112]	; 0x70
 801bec0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801bec2:	b13b      	cbz	r3, 801bed4 <forward_conv2d+0xcac>
 801bec4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801bec8:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 801becc:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 801bed0:	f001 fe02 	bl	801dad8 <memcpy>
 801bed4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801bed8:	2b00      	cmp	r3, #0
 801beda:	f000 8130 	beq.w	801c13e <forward_conv2d+0xf16>
 801bede:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801bee0:	ed93 6a00 	vldr	s12, [r3]
 801bee4:	3304      	adds	r3, #4
 801bee6:	673b      	str	r3, [r7, #112]	; 0x70
 801bee8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801beec:	2b00      	cmp	r3, #0
 801beee:	f000 80fe 	beq.w	801c0ee <forward_conv2d+0xec6>
 801bef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801bef6:	f04f 0b00 	mov.w	fp, #0
 801befa:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 801befe:	eb03 0802 	add.w	r8, r3, r2
 801bf02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bf04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801bf08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bf0a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801bf0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bf12:	66fb      	str	r3, [r7, #108]	; 0x6c
 801bf14:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801bf18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801bf1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801bf20:	2b00      	cmp	r3, #0
 801bf22:	f2c0 8103 	blt.w	801c12c <forward_conv2d+0xf04>
 801bf26:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 801bf2a:	2300      	movs	r3, #0
 801bf2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801bf2e:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 801bf32:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 801bf36:	4540      	cmp	r0, r8
 801bf38:	bf94      	ite	ls
 801bf3a:	ebc3 0300 	rsbls	r3, r3, r0
 801bf3e:	ebc3 0308 	rsbhi	r3, r3, r8
 801bf42:	4422      	add	r2, r4
 801bf44:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 801bf48:	1ac0      	subs	r0, r0, r3
 801bf4a:	eba4 0903 	sub.w	r9, r4, r3
 801bf4e:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 801bf52:	fb03 f304 	mul.w	r3, r3, r4
 801bf56:	f8d7 411c 	ldr.w	r4, [r7, #284]	; 0x11c
 801bf5a:	2c00      	cmp	r4, #0
 801bf5c:	f340 80e3 	ble.w	801c126 <forward_conv2d+0xefe>
 801bf60:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 801bf64:	f023 050f 	bic.w	r5, r3, #15
 801bf68:	eef0 6a46 	vmov.f32	s13, s12
 801bf6c:	f04f 0e00 	mov.w	lr, #0
 801bf70:	fb04 f000 	mul.w	r0, r4, r0
 801bf74:	fb04 f909 	mul.w	r9, r4, r9
 801bf78:	6538      	str	r0, [r7, #80]	; 0x50
 801bf7a:	1e68      	subs	r0, r5, #1
 801bf7c:	0900      	lsrs	r0, r0, #4
 801bf7e:	3001      	adds	r0, #1
 801bf80:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 801bf84:	0100      	lsls	r0, r0, #4
 801bf86:	6338      	str	r0, [r7, #48]	; 0x30
 801bf88:	2d00      	cmp	r5, #0
 801bf8a:	f340 80ca 	ble.w	801c122 <forward_conv2d+0xefa>
 801bf8e:	f101 0440 	add.w	r4, r1, #64	; 0x40
 801bf92:	f102 0040 	add.w	r0, r2, #64	; 0x40
 801bf96:	2600      	movs	r6, #0
 801bf98:	ed14 7a0f 	vldr	s14, [r4, #-60]	; 0xffffffc4
 801bf9c:	3610      	adds	r6, #16
 801bf9e:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 801bfa2:	3440      	adds	r4, #64	; 0x40
 801bfa4:	ed50 5a10 	vldr	s11, [r0, #-64]	; 0xffffffc0
 801bfa8:	42b5      	cmp	r5, r6
 801bfaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 801bfae:	ed14 7a20 	vldr	s14, [r4, #-128]	; 0xffffff80
 801bfb2:	ed54 2a1e 	vldr	s5, [r4, #-120]	; 0xffffff88
 801bfb6:	f100 0040 	add.w	r0, r0, #64	; 0x40
 801bfba:	ed10 3a1e 	vldr	s6, [r0, #-120]	; 0xffffff88
 801bfbe:	eee5 7a87 	vfma.f32	s15, s11, s14
 801bfc2:	ed54 3a1d 	vldr	s7, [r4, #-116]	; 0xffffff8c
 801bfc6:	ed10 4a1d 	vldr	s8, [r0, #-116]	; 0xffffff8c
 801bfca:	ed54 4a1c 	vldr	s9, [r4, #-112]	; 0xffffff90
 801bfce:	ed10 5a1c 	vldr	s10, [r0, #-112]	; 0xffffff90
 801bfd2:	ed54 5a1b 	vldr	s11, [r4, #-108]	; 0xffffff94
 801bfd6:	ed10 7a1b 	vldr	s14, [r0, #-108]	; 0xffffff94
 801bfda:	eee2 7a83 	vfma.f32	s15, s5, s6
 801bfde:	ed54 ba1a 	vldr	s23, [r4, #-104]	; 0xffffff98
 801bfe2:	ed10 ba1a 	vldr	s22, [r0, #-104]	; 0xffffff98
 801bfe6:	ed54 aa19 	vldr	s21, [r4, #-100]	; 0xffffff9c
 801bfea:	ed10 aa19 	vldr	s20, [r0, #-100]	; 0xffffff9c
 801bfee:	ed54 9a18 	vldr	s19, [r4, #-96]	; 0xffffffa0
 801bff2:	ed10 9a18 	vldr	s18, [r0, #-96]	; 0xffffffa0
 801bff6:	eee3 7a84 	vfma.f32	s15, s7, s8
 801bffa:	ed50 8a17 	vldr	s17, [r0, #-92]	; 0xffffffa4
 801bffe:	ed14 0a17 	vldr	s0, [r4, #-92]	; 0xffffffa4
 801c002:	ed50 0a16 	vldr	s1, [r0, #-88]	; 0xffffffa8
 801c006:	ed14 1a16 	vldr	s2, [r4, #-88]	; 0xffffffa8
 801c00a:	ed50 1a15 	vldr	s3, [r0, #-84]	; 0xffffffac
 801c00e:	ed14 2a15 	vldr	s4, [r4, #-84]	; 0xffffffac
 801c012:	eee4 7a85 	vfma.f32	s15, s9, s10
 801c016:	ed54 2a14 	vldr	s5, [r4, #-80]	; 0xffffffb0
 801c01a:	ed10 3a14 	vldr	s6, [r0, #-80]	; 0xffffffb0
 801c01e:	ed50 3a13 	vldr	s7, [r0, #-76]	; 0xffffffb4
 801c022:	ed14 4a13 	vldr	s8, [r4, #-76]	; 0xffffffb4
 801c026:	ed54 4a12 	vldr	s9, [r4, #-72]	; 0xffffffb8
 801c02a:	ed10 5a12 	vldr	s10, [r0, #-72]	; 0xffffffb8
 801c02e:	eee5 7a87 	vfma.f32	s15, s11, s14
 801c032:	ed54 5a11 	vldr	s11, [r4, #-68]	; 0xffffffbc
 801c036:	ed10 7a11 	vldr	s14, [r0, #-68]	; 0xffffffbc
 801c03a:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 801c03e:	eeea 7a8a 	vfma.f32	s15, s21, s20
 801c042:	eee9 7a89 	vfma.f32	s15, s19, s18
 801c046:	eee8 7a80 	vfma.f32	s15, s17, s0
 801c04a:	eee0 7a81 	vfma.f32	s15, s1, s2
 801c04e:	eee1 7a82 	vfma.f32	s15, s3, s4
 801c052:	eee2 7a83 	vfma.f32	s15, s5, s6
 801c056:	eee3 7a84 	vfma.f32	s15, s7, s8
 801c05a:	eee4 7a85 	vfma.f32	s15, s9, s10
 801c05e:	eee5 7a87 	vfma.f32	s15, s11, s14
 801c062:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801c066:	dc97      	bgt.n	801bf98 <forward_conv2d+0xd70>
 801c068:	4451      	add	r1, sl
 801c06a:	4452      	add	r2, sl
 801c06c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801c06e:	4283      	cmp	r3, r0
 801c070:	dd0f      	ble.n	801c092 <forward_conv2d+0xe6a>
 801c072:	4604      	mov	r4, r0
 801c074:	468c      	mov	ip, r1
 801c076:	4616      	mov	r6, r2
 801c078:	3401      	adds	r4, #1
 801c07a:	ecb6 7a01 	vldmia	r6!, {s14}
 801c07e:	ecfc 7a01 	vldmia	ip!, {s15}
 801c082:	42a3      	cmp	r3, r4
 801c084:	eee7 6a27 	vfma.f32	s13, s14, s15
 801c088:	d1f6      	bne.n	801c078 <forward_conv2d+0xe50>
 801c08a:	1a18      	subs	r0, r3, r0
 801c08c:	0080      	lsls	r0, r0, #2
 801c08e:	4402      	add	r2, r0
 801c090:	4401      	add	r1, r0
 801c092:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801c094:	f10e 0e01 	add.w	lr, lr, #1
 801c098:	4449      	add	r1, r9
 801c09a:	4402      	add	r2, r0
 801c09c:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 801c0a0:	4570      	cmp	r0, lr
 801c0a2:	f47f af71 	bne.w	801bf88 <forward_conv2d+0xd60>
 801c0a6:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 801c0aa:	f10b 0b01 	add.w	fp, fp, #1
 801c0ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c0b0:	4608      	mov	r0, r1
 801c0b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801c0b6:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 801c0ba:	4410      	add	r0, r2
 801c0bc:	edc3 6a00 	vstr	s13, [r3]
 801c0c0:	440b      	add	r3, r1
 801c0c2:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 801c0c6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
 801c0ca:	eba8 0802 	sub.w	r8, r8, r2
 801c0ce:	4608      	mov	r0, r1
 801c0d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 801c0d2:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 801c0d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801c0d8:	4418      	add	r0, r3
 801c0da:	1acb      	subs	r3, r1, r3
 801c0dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801c0e0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801c0e4:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
 801c0e8:	455b      	cmp	r3, fp
 801c0ea:	f47f af17 	bne.w	801bf1c <forward_conv2d+0xcf4>
 801c0ee:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801c0f2:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801c0f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801c0f8:	440a      	add	r2, r1
 801c0fa:	3301      	adds	r3, #1
 801c0fc:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 801c100:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801c104:	67bb      	str	r3, [r7, #120]	; 0x78
 801c106:	3204      	adds	r2, #4
 801c108:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 801c10c:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 801c110:	429a      	cmp	r2, r3
 801c112:	f47f aed5 	bne.w	801bec0 <forward_conv2d+0xc98>
 801c116:	f8d7 b02c 	ldr.w	fp, [r7, #44]	; 0x2c
 801c11a:	f8d7 d060 	ldr.w	sp, [r7, #96]	; 0x60
 801c11e:	f7ff bb3f 	b.w	801b7a0 <forward_conv2d+0x578>
 801c122:	2000      	movs	r0, #0
 801c124:	e7a3      	b.n	801c06e <forward_conv2d+0xe46>
 801c126:	eef0 6a46 	vmov.f32	s13, s12
 801c12a:	e7bc      	b.n	801c0a6 <forward_conv2d+0xe7e>
 801c12c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801c130:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801c134:	eba8 0303 	sub.w	r3, r8, r3
 801c138:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 801c13c:	e6f7      	b.n	801bf2e <forward_conv2d+0xd06>
 801c13e:	eeb0 6a48 	vmov.f32	s12, s16
 801c142:	e6d1      	b.n	801bee8 <forward_conv2d+0xcc0>
 801c144:	2300      	movs	r3, #0
 801c146:	685b      	ldr	r3, [r3, #4]
 801c148:	deff      	udf	#255	; 0xff
 801c14a:	2301      	movs	r3, #1
 801c14c:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
 801c150:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 801c154:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801c158:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801c15c:	f7ff b8f3 	b.w	801b346 <forward_conv2d+0x11e>
 801c160:	b178      	cbz	r0, 801c182 <forward_conv2d+0xf5a>
 801c162:	6882      	ldr	r2, [r0, #8]
 801c164:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801c168:	2301      	movs	r3, #1
 801c16a:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 801c16e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801c172:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801c176:	f7ff b8e6 	b.w	801b346 <forward_conv2d+0x11e>
 801c17a:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 801c17e:	f7ff b8c3 	b.w	801b308 <forward_conv2d+0xe0>
 801c182:	2201      	movs	r2, #1
 801c184:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801c188:	e9c7 3236 	strd	r3, r2, [r7, #216]	; 0xd8
 801c18c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801c190:	f7ff b8d9 	b.w	801b346 <forward_conv2d+0x11e>
 801c194:	3318      	adds	r3, #24
 801c196:	d007      	beq.n	801c1a8 <forward_conv2d+0xf80>
 801c198:	462a      	mov	r2, r5
 801c19a:	462c      	mov	r4, r5
 801c19c:	462b      	mov	r3, r5
 801c19e:	f7ff b86d 	b.w	801b27c <forward_conv2d+0x54>
 801c1a2:	2300      	movs	r3, #0
 801c1a4:	685b      	ldr	r3, [r3, #4]
 801c1a6:	deff      	udf	#255	; 0xff
 801c1a8:	68db      	ldr	r3, [r3, #12]
 801c1aa:	deff      	udf	#255	; 0xff
 801c1ac:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 801c1b0:	f7ff b853 	b.w	801b25a <forward_conv2d+0x32>
 801c1b4:	2300      	movs	r3, #0
 801c1b6:	685b      	ldr	r3, [r3, #4]
 801c1b8:	deff      	udf	#255	; 0xff
 801c1ba:	6853      	ldr	r3, [r2, #4]
 801c1bc:	deff      	udf	#255	; 0xff
 801c1be:	2200      	movs	r2, #0
 801c1c0:	f7ff b85b 	b.w	801b27a <forward_conv2d+0x52>

0801c1c4 <forward_conv2d_nl_pool>:
 801c1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1c8:	ed2d 8b08 	vpush	{d8-d11}
 801c1cc:	b0e1      	sub	sp, #388	; 0x184
 801c1ce:	6983      	ldr	r3, [r0, #24]
 801c1d0:	af0a      	add	r7, sp, #40	; 0x28
 801c1d2:	881a      	ldrh	r2, [r3, #0]
 801c1d4:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 801c1d8:	2a00      	cmp	r2, #0
 801c1da:	f001 8105 	beq.w	801d3e8 <forward_conv2d_nl_pool+0x1224>
 801c1de:	6859      	ldr	r1, [r3, #4]
 801c1e0:	684d      	ldr	r5, [r1, #4]
 801c1e2:	b105      	cbz	r5, 801c1e6 <forward_conv2d_nl_pool+0x22>
 801c1e4:	682d      	ldr	r5, [r5, #0]
 801c1e6:	2a01      	cmp	r2, #1
 801c1e8:	f241 8104 	bls.w	801d3f4 <forward_conv2d_nl_pool+0x1230>
 801c1ec:	690a      	ldr	r2, [r1, #16]
 801c1ee:	2a00      	cmp	r2, #0
 801c1f0:	f001 80f7 	beq.w	801d3e2 <forward_conv2d_nl_pool+0x121e>
 801c1f4:	f8d2 9000 	ldr.w	r9, [r2]
 801c1f8:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 801c1fc:	2a02      	cmp	r2, #2
 801c1fe:	f001 80f9 	beq.w	801d3f4 <forward_conv2d_nl_pool+0x1230>
 801c202:	f8d1 c01c 	ldr.w	ip, [r1, #28]
 801c206:	f1bc 0f00 	cmp.w	ip, #0
 801c20a:	f001 80e3 	beq.w	801d3d4 <forward_conv2d_nl_pool+0x1210>
 801c20e:	f111 0218 	adds.w	r2, r1, #24
 801c212:	f8dc 4000 	ldr.w	r4, [ip]
 801c216:	d005      	beq.n	801c224 <forward_conv2d_nl_pool+0x60>
 801c218:	8b0a      	ldrh	r2, [r1, #24]
 801c21a:	2a01      	cmp	r2, #1
 801c21c:	f241 80e7 	bls.w	801d3ee <forward_conv2d_nl_pool+0x122a>
 801c220:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801c224:	f8dc 1008 	ldr.w	r1, [ip, #8]
 801c228:	f8d5 b018 	ldr.w	fp, [r5, #24]
 801c22c:	f8d5 800c 	ldr.w	r8, [r5, #12]
 801c230:	f8db 6008 	ldr.w	r6, [fp, #8]
 801c234:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 801c238:	f8c7 60bc 	str.w	r6, [r7, #188]	; 0xbc
 801c23c:	f8d8 6004 	ldr.w	r6, [r8, #4]
 801c240:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801c242:	f8c7 613c 	str.w	r6, [r7, #316]	; 0x13c
 801c246:	f8d8 600c 	ldr.w	r6, [r8, #12]
 801c24a:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 801c24e:	f8c7 6094 	str.w	r6, [r7, #148]	; 0x94
 801c252:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801c256:	f8d4 c018 	ldr.w	ip, [r4, #24]
 801c25a:	f8c7 614c 	str.w	r6, [r7, #332]	; 0x14c
 801c25e:	f8de 6004 	ldr.w	r6, [lr, #4]
 801c262:	f8c7 6138 	str.w	r6, [r7, #312]	; 0x138
 801c266:	f8de 600c 	ldr.w	r6, [lr, #12]
 801c26a:	f8c7 60c4 	str.w	r6, [r7, #196]	; 0xc4
 801c26e:	f8de 6008 	ldr.w	r6, [lr, #8]
 801c272:	f8c7 6098 	str.w	r6, [r7, #152]	; 0x98
 801c276:	682e      	ldr	r6, [r5, #0]
 801c278:	f8c7 6148 	str.w	r6, [r7, #328]	; 0x148
 801c27c:	686e      	ldr	r6, [r5, #4]
 801c27e:	68ad      	ldr	r5, [r5, #8]
 801c280:	f8c7 6140 	str.w	r6, [r7, #320]	; 0x140
 801c284:	f8da 6004 	ldr.w	r6, [sl, #4]
 801c288:	f8c7 6144 	str.w	r6, [r7, #324]	; 0x144
 801c28c:	f8da 6008 	ldr.w	r6, [sl, #8]
 801c290:	f8c7 6100 	str.w	r6, [r7, #256]	; 0x100
 801c294:	6d46      	ldr	r6, [r0, #84]	; 0x54
 801c296:	6836      	ldr	r6, [r6, #0]
 801c298:	f8c7 6134 	str.w	r6, [r7, #308]	; 0x134
 801c29c:	6d46      	ldr	r6, [r0, #84]	; 0x54
 801c29e:	6876      	ldr	r6, [r6, #4]
 801c2a0:	647e      	str	r6, [r7, #68]	; 0x44
 801c2a2:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801c2a6:	f8c7 6128 	str.w	r6, [r7, #296]	; 0x128
 801c2aa:	6a86      	ldr	r6, [r0, #40]	; 0x28
 801c2ac:	f8c7 6130 	str.w	r6, [r7, #304]	; 0x130
 801c2b0:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 801c2b2:	f8c7 6150 	str.w	r6, [r7, #336]	; 0x150
 801c2b6:	69c6      	ldr	r6, [r0, #28]
 801c2b8:	f8c7 6124 	str.w	r6, [r7, #292]	; 0x124
 801c2bc:	6c06      	ldr	r6, [r0, #64]	; 0x40
 801c2be:	64fe      	str	r6, [r7, #76]	; 0x4c
 801c2c0:	6c86      	ldr	r6, [r0, #72]	; 0x48
 801c2c2:	64be      	str	r6, [r7, #72]	; 0x48
 801c2c4:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
 801c2c6:	e9d0 ba0c 	ldrd	fp, sl, [r0, #48]	; 0x30
 801c2ca:	f8c7 60c0 	str.w	r6, [r7, #192]	; 0xc0
 801c2ce:	2a00      	cmp	r2, #0
 801c2d0:	f001 807c 	beq.w	801d3cc <forward_conv2d_nl_pool+0x1208>
 801c2d4:	6992      	ldr	r2, [r2, #24]
 801c2d6:	6892      	ldr	r2, [r2, #8]
 801c2d8:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 801c2dc:	4680      	mov	r8, r0
 801c2de:	6a00      	ldr	r0, [r0, #32]
 801c2e0:	2900      	cmp	r1, #0
 801c2e2:	f001 8056 	beq.w	801d392 <forward_conv2d_nl_pool+0x11ce>
 801c2e6:	698a      	ldr	r2, [r1, #24]
 801c2e8:	2a00      	cmp	r2, #0
 801c2ea:	f001 8047 	beq.w	801d37c <forward_conv2d_nl_pool+0x11b8>
 801c2ee:	694b      	ldr	r3, [r1, #20]
 801c2f0:	689b      	ldr	r3, [r3, #8]
 801c2f2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801c2f6:	6893      	ldr	r3, [r2, #8]
 801c2f8:	e9d2 0100 	ldrd	r0, r1, [r2]
 801c2fc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801c300:	f001 fb8e 	bl	801da20 <ai_array_get_byte_size>
 801c304:	f8d8 3018 	ldr.w	r3, [r8, #24]
 801c308:	f8d4 c018 	ldr.w	ip, [r4, #24]
 801c30c:	881a      	ldrh	r2, [r3, #0]
 801c30e:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
 801c312:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 801c316:	f8b7 1148 	ldrh.w	r1, [r7, #328]	; 0x148
 801c31a:	fa1f f28a 	uxth.w	r2, sl
 801c31e:	f8d7 6100 	ldr.w	r6, [r7, #256]	; 0x100
 801c322:	fa11 f085 	uxtah	r0, r1, r5
 801c326:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 801c32a:	f8b7 1150 	ldrh.w	r1, [r7, #336]	; 0x150
 801c32e:	1e74      	subs	r4, r6, #1
 801c330:	f8dc e000 	ldr.w	lr, [ip]
 801c334:	3a01      	subs	r2, #1
 801c336:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 801c33a:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 801c33e:	fb04 6402 	mla	r4, r4, r2, r6
 801c342:	f3ce 15c6 	ubfx	r5, lr, #7, #7
 801c346:	f8d7 6144 	ldr.w	r6, [r7, #324]	; 0x144
 801c34a:	4408      	add	r0, r1
 801c34c:	f3ce 5141 	ubfx	r1, lr, #21, #2
 801c350:	fa1f f28b 	uxth.w	r2, fp
 801c354:	63fc      	str	r4, [r7, #60]	; 0x3c
 801c356:	fa45 f101 	asr.w	r1, r5, r1
 801c35a:	f3ce 4543 	ubfx	r5, lr, #17, #4
 801c35e:	eba0 0e04 	sub.w	lr, r0, r4
 801c362:	f8d8 4024 	ldr.w	r4, [r8, #36]	; 0x24
 801c366:	3a01      	subs	r2, #1
 801c368:	1e70      	subs	r0, r6, #1
 801c36a:	f8c7 40d0 	str.w	r4, [r7, #208]	; 0xd0
 801c36e:	b289      	uxth	r1, r1
 801c370:	fb00 6602 	mla	r6, r0, r2, r6
 801c374:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 801c378:	4a85      	ldr	r2, [pc, #532]	; (801c590 <forward_conv2d_nl_pool+0x3cc>)
 801c37a:	f8c7 6090 	str.w	r6, [r7, #144]	; 0x90
 801c37e:	4606      	mov	r6, r0
 801c380:	f8b7 4140 	ldrh.w	r4, [r7, #320]	; 0x140
 801c384:	2800      	cmp	r0, #0
 801c386:	bf08      	it	eq
 801c388:	4616      	moveq	r6, r2
 801c38a:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 801c38e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801c392:	2d04      	cmp	r5, #4
 801c394:	6438      	str	r0, [r7, #64]	; 0x40
 801c396:	f8d8 0044 	ldr.w	r0, [r8, #68]	; 0x44
 801c39a:	f8c7 4104 	str.w	r4, [r7, #260]	; 0x104
 801c39e:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
 801c3a2:	f8c7 60d0 	str.w	r6, [r7, #208]	; 0xd0
 801c3a6:	fbbe f0f2 	udiv	r0, lr, r2
 801c3aa:	f100 0201 	add.w	r2, r0, #1
 801c3ae:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 801c3b2:	f000 837b 	beq.w	801caac <forward_conv2d_nl_pool+0x8e8>
 801c3b6:	2d08      	cmp	r5, #8
 801c3b8:	f000 8378 	beq.w	801caac <forward_conv2d_nl_pool+0x8e8>
 801c3bc:	f8d9 2018 	ldr.w	r2, [r9, #24]
 801c3c0:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 801c3c4:	f9b7 2134 	ldrsh.w	r2, [r7, #308]	; 0x134
 801c3c8:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 801c3cc:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 801c3d0:	2a03      	cmp	r2, #3
 801c3d2:	f241 800f 	bls.w	801d3f4 <forward_conv2d_nl_pool+0x1230>
 801c3d6:	685b      	ldr	r3, [r3, #4]
 801c3d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c3da:	2b00      	cmp	r3, #0
 801c3dc:	f000 8364 	beq.w	801caa8 <forward_conv2d_nl_pool+0x8e4>
 801c3e0:	681b      	ldr	r3, [r3, #0]
 801c3e2:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 801c3e6:	68da      	ldr	r2, [r3, #12]
 801c3e8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 801c3ec:	4249      	negs	r1, r1
 801c3ee:	699b      	ldr	r3, [r3, #24]
 801c3f0:	6896      	ldr	r6, [r2, #8]
 801c3f2:	6898      	ldr	r0, [r3, #8]
 801c3f4:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 801c3f8:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
 801c3fc:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 801c400:	f8c7 6148 	str.w	r6, [r7, #328]	; 0x148
 801c404:	2800      	cmp	r0, #0
 801c406:	f000 82da 	beq.w	801c9be <forward_conv2d_nl_pool+0x7fa>
 801c40a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801c40e:	fa0f fc8b 	sxth.w	ip, fp
 801c412:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 801c416:	f8d7 50c0 	ldr.w	r5, [r7, #192]	; 0xc0
 801c41a:	fb03 f200 	mul.w	r2, r3, r0
 801c41e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 801c422:	00ab      	lsls	r3, r5, #2
 801c424:	f8d7 5104 	ldr.w	r5, [r7, #260]	; 0x104
 801c428:	f8c7 c0e8 	str.w	ip, [r7, #232]	; 0xe8
 801c42c:	008c      	lsls	r4, r1, #2
 801c42e:	426d      	negs	r5, r5
 801c430:	fb01 fc02 	mul.w	ip, r1, r2
 801c434:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801c438:	f8c7 50fc 	str.w	r5, [r7, #252]	; 0xfc
 801c43c:	f8d7 5138 	ldr.w	r5, [r7, #312]	; 0x138
 801c440:	f8c7 c088 	str.w	ip, [r7, #136]	; 0x88
 801c444:	fa0f fc8a 	sxth.w	ip, sl
 801c448:	fb05 f803 	mul.w	r8, r5, r3
 801c44c:	462b      	mov	r3, r5
 801c44e:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 801c452:	00ad      	lsls	r5, r5, #2
 801c454:	fb02 f203 	mul.w	r2, r2, r3
 801c458:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801c45c:	fb04 f000 	mul.w	r0, r4, r0
 801c460:	ed9f 8a4c 	vldr	s16, [pc, #304]	; 801c594 <forward_conv2d_nl_pool+0x3d0>
 801c464:	f8c7 c0cc 	str.w	ip, [r7, #204]	; 0xcc
 801c468:	009b      	lsls	r3, r3, #2
 801c46a:	f8b7 c130 	ldrh.w	ip, [r7, #304]	; 0x130
 801c46e:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 801c472:	f8c7 c0ec 	str.w	ip, [r7, #236]	; 0xec
 801c476:	f04f 0c00 	mov.w	ip, #0
 801c47a:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 801c47e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801c482:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801c486:	f8c7 5114 	str.w	r5, [r7, #276]	; 0x114
 801c48a:	460d      	mov	r5, r1
 801c48c:	f8c7 c0e0 	str.w	ip, [r7, #224]	; 0xe0
 801c490:	469c      	mov	ip, r3
 801c492:	fb00 f101 	mul.w	r1, r0, r1
 801c496:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801c49a:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 801c49e:	fb0c fc03 	mul.w	ip, ip, r3
 801c4a2:	008b      	lsls	r3, r1, #2
 801c4a4:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 801c4a8:	f8c7 c034 	str.w	ip, [r7, #52]	; 0x34
 801c4ac:	633b      	str	r3, [r7, #48]	; 0x30
 801c4ae:	468e      	mov	lr, r1
 801c4b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801c4b4:	fb06 fc08 	mul.w	ip, r6, r8
 801c4b8:	f8c7 c054 	str.w	ip, [r7, #84]	; 0x54
 801c4bc:	469c      	mov	ip, r3
 801c4be:	0093      	lsls	r3, r2, #2
 801c4c0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 801c4c4:	fb0c fc01 	mul.w	ip, ip, r1
 801c4c8:	653b      	str	r3, [r7, #80]	; 0x50
 801c4ca:	4603      	mov	r3, r0
 801c4cc:	f8c7 c080 	str.w	ip, [r7, #128]	; 0x80
 801c4d0:	fb00 fc02 	mul.w	ip, r0, r2
 801c4d4:	2000      	movs	r0, #0
 801c4d6:	f8c7 c024 	str.w	ip, [r7, #36]	; 0x24
 801c4da:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
 801c4de:	fb01 f005 	mul.w	r0, r1, r5
 801c4e2:	f8d7 50fc 	ldr.w	r5, [r7, #252]	; 0xfc
 801c4e6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801c4ea:	6238      	str	r0, [r7, #32]
 801c4ec:	4618      	mov	r0, r3
 801c4ee:	009b      	lsls	r3, r3, #2
 801c4f0:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 801c4f4:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 801c4f8:	61bb      	str	r3, [r7, #24]
 801c4fa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801c4fe:	469c      	mov	ip, r3
 801c500:	4623      	mov	r3, r4
 801c502:	fb05 f303 	mul.w	r3, r5, r3
 801c506:	f8d7 5114 	ldr.w	r5, [r7, #276]	; 0x114
 801c50a:	fb0c f404 	mul.w	r4, ip, r4
 801c50e:	66fb      	str	r3, [r7, #108]	; 0x6c
 801c510:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801c514:	66bc      	str	r4, [r7, #104]	; 0x68
 801c516:	0114      	lsls	r4, r2, #4
 801c518:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 801c51c:	46a2      	mov	sl, r4
 801c51e:	63bb      	str	r3, [r7, #56]	; 0x38
 801c520:	fb05 f306 	mul.w	r3, r5, r6
 801c524:	f8d7 50e4 	ldr.w	r5, [r7, #228]	; 0xe4
 801c528:	65bb      	str	r3, [r7, #88]	; 0x58
 801c52a:	4603      	mov	r3, r0
 801c52c:	fb00 f005 	mul.w	r0, r0, r5
 801c530:	fb03 f301 	mul.w	r3, r3, r1
 801c534:	6778      	str	r0, [r7, #116]	; 0x74
 801c536:	00d0      	lsls	r0, r2, #3
 801c538:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 801c53c:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 801c540:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801c544:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 801c548:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801c54c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801c550:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801c554:	2b00      	cmp	r3, #0
 801c556:	f340 81ca 	ble.w	801c8ee <forward_conv2d_nl_pool+0x72a>
 801c55a:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 801c55e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801c562:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801c566:	2900      	cmp	r1, #0
 801c568:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801c56a:	441a      	add	r2, r3
 801c56c:	bfb4      	ite	lt
 801c56e:	2100      	movlt	r1, #0
 801c570:	2300      	movge	r3, #0
 801c572:	4282      	cmp	r2, r0
 801c574:	bf28      	it	cs
 801c576:	4602      	movcs	r2, r0
 801c578:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 801c57c:	2801      	cmp	r0, #1
 801c57e:	f000 8403 	beq.w	801cd88 <forward_conv2d_nl_pool+0xbc4>
 801c582:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 801c586:	4281      	cmp	r1, r0
 801c588:	f000 82be 	beq.w	801cb08 <forward_conv2d_nl_pool+0x944>
 801c58c:	e004      	b.n	801c598 <forward_conv2d_nl_pool+0x3d4>
 801c58e:	bf00      	nop
 801c590:	0801b185 	.word	0x0801b185
 801c594:	00000000 	.word	0x00000000
 801c598:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 801c59c:	2900      	cmp	r1, #0
 801c59e:	f000 8199 	beq.w	801c8d4 <forward_conv2d_nl_pool+0x710>
 801c5a2:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 801c5a6:	1ad2      	subs	r2, r2, r3
 801c5a8:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 801c5ac:	181d      	adds	r5, r3, r0
 801c5ae:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 801c5b2:	f8d7 40fc 	ldr.w	r4, [r7, #252]	; 0xfc
 801c5b6:	3d01      	subs	r5, #1
 801c5b8:	fb93 f1f0 	sdiv	r1, r3, r0
 801c5bc:	fb00 3111 	mls	r1, r0, r1, r3
 801c5c0:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
 801c5c4:	2400      	movs	r4, #0
 801c5c6:	1a41      	subs	r1, r0, r1
 801c5c8:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
 801c5cc:	4604      	mov	r4, r0
 801c5ce:	fb91 f0f0 	sdiv	r0, r1, r0
 801c5d2:	fb04 1110 	mls	r1, r4, r0, r1
 801c5d6:	4620      	mov	r0, r4
 801c5d8:	1a52      	subs	r2, r2, r1
 801c5da:	4419      	add	r1, r3
 801c5dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801c5e0:	4422      	add	r2, r4
 801c5e2:	f8d7 4124 	ldr.w	r4, [r7, #292]	; 0x124
 801c5e6:	fb03 f301 	mul.w	r3, r3, r1
 801c5ea:	3a01      	subs	r2, #1
 801c5ec:	67fb      	str	r3, [r7, #124]	; 0x7c
 801c5ee:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801c5f2:	fb92 f8f0 	sdiv	r8, r2, r0
 801c5f6:	4619      	mov	r1, r3
 801c5f8:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 801c5fc:	fbb1 f3f4 	udiv	r3, r1, r4
 801c600:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 801c604:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 801c608:	fb95 f5f0 	sdiv	r5, r5, r0
 801c60c:	eba1 0008 	sub.w	r0, r1, r8
 801c610:	6a39      	ldr	r1, [r7, #32]
 801c612:	eba1 0c03 	sub.w	ip, r1, r3
 801c616:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801c61a:	fbb2 f2f4 	udiv	r2, r2, r4
 801c61e:	fb0e f403 	mul.w	r4, lr, r3
 801c622:	0096      	lsls	r6, r2, #2
 801c624:	fb03 f305 	mul.w	r3, r3, r5
 801c628:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 801c62c:	667a      	str	r2, [r7, #100]	; 0x64
 801c62e:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 801c632:	663b      	str	r3, [r7, #96]	; 0x60
 801c634:	ea4f 098c 	mov.w	r9, ip, lsl #2
 801c638:	fb04 f300 	mul.w	r3, r4, r0
 801c63c:	673e      	str	r6, [r7, #112]	; 0x70
 801c63e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801c642:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 801c646:	1b9b      	subs	r3, r3, r6
 801c648:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801c64c:	008b      	lsls	r3, r1, #2
 801c64e:	e9c7 ab04 	strd	sl, fp, [r7, #16]
 801c652:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c654:	46c2      	mov	sl, r8
 801c656:	00d3      	lsls	r3, r2, #3
 801c658:	61fb      	str	r3, [r7, #28]
 801c65a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c65c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 801c660:	189e      	adds	r6, r3, r2
 801c662:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801c666:	2b00      	cmp	r3, #0
 801c668:	f2c0 811f 	blt.w	801c8aa <forward_conv2d_nl_pool+0x6e6>
 801c66c:	2100      	movs	r1, #0
 801c66e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 801c670:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801c674:	4688      	mov	r8, r1
 801c676:	460d      	mov	r5, r1
 801c678:	f8d7 40f0 	ldr.w	r4, [r7, #240]	; 0xf0
 801c67c:	f103 3cff 	add.w	ip, r3, #4294967295
 801c680:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 801c684:	0080      	lsls	r0, r0, #2
 801c686:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801c68a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801c68e:	4422      	add	r2, r4
 801c690:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 801c694:	4423      	add	r3, r4
 801c696:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 801c69a:	42a2      	cmp	r2, r4
 801c69c:	bf94      	ite	ls
 801c69e:	ebc5 0202 	rsbls	r2, r5, r2
 801c6a2:	ebc5 0204 	rsbhi	r2, r5, r4
 801c6a6:	f8d7 512c 	ldr.w	r5, [r7, #300]	; 0x12c
 801c6aa:	eb08 0403 	add.w	r4, r8, r3
 801c6ae:	1a52      	subs	r2, r2, r1
 801c6b0:	462b      	mov	r3, r5
 801c6b2:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 801c6b6:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 801c6ba:	2d00      	cmp	r5, #0
 801c6bc:	bf08      	it	eq
 801c6be:	4633      	moveq	r3, r6
 801c6c0:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 801c6c4:	440a      	add	r2, r1
 801c6c6:	f8d7 50bc 	ldr.w	r5, [r7, #188]	; 0xbc
 801c6ca:	42b3      	cmp	r3, r6
 801c6cc:	f102 36ff 	add.w	r6, r2, #4294967295
 801c6d0:	fb00 5004 	mla	r0, r0, r4, r5
 801c6d4:	460a      	mov	r2, r1
 801c6d6:	fe08 6a06 	vseleq.f32	s12, s16, s12
 801c6da:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
 801c6de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c6e0:	fb96 f6f1 	sdiv	r6, r6, r1
 801c6e4:	fb9c f5f1 	sdiv	r5, ip, r1
 801c6e8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801c6ea:	440d      	add	r5, r1
 801c6ec:	fb06 0112 	mls	r1, r6, r2, r0
 801c6f0:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 801c6f4:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 801c6f8:	fb0e 0505 	mla	r5, lr, r5, r0
 801c6fc:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 801c700:	1b92      	subs	r2, r2, r6
 801c702:	2800      	cmp	r0, #0
 801c704:	d06f      	beq.n	801c7e6 <forward_conv2d_nl_pool+0x622>
 801c706:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 801c70a:	fb0e f802 	mul.w	r8, lr, r2
 801c70e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801c710:	fb00 fb01 	mul.w	fp, r0, r1
 801c714:	2a00      	cmp	r2, #0
 801c716:	d066      	beq.n	801c7e6 <forward_conv2d_nl_pool+0x622>
 801c718:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801c71a:	189a      	adds	r2, r3, r2
 801c71c:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 801c720:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 801c724:	1ad3      	subs	r3, r2, r3
 801c726:	62bb      	str	r3, [r7, #40]	; 0x28
 801c728:	2300      	movs	r3, #0
 801c72a:	67bb      	str	r3, [r7, #120]	; 0x78
 801c72c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801c730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c732:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801c734:	4413      	add	r3, r2
 801c736:	188a      	adds	r2, r1, r2
 801c738:	65fb      	str	r3, [r7, #92]	; 0x5c
 801c73a:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 801c73e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 801c742:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 801c746:	f1ba 0f00 	cmp.w	sl, #0
 801c74a:	ecf3 7a01 	vldmia	r3!, {s15}
 801c74e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 801c752:	ee67 7a86 	vmul.f32	s15, s15, s12
 801c756:	f340 80a6 	ble.w	801c8a6 <forward_conv2d_nl_pool+0x6e2>
 801c75a:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 801c75e:	f04f 0c00 	mov.w	ip, #0
 801c762:	2e00      	cmp	r6, #0
 801c764:	dd19      	ble.n	801c79a <forward_conv2d_nl_pool+0x5d6>
 801c766:	2100      	movs	r1, #0
 801c768:	eb00 040e 	add.w	r4, r0, lr
 801c76c:	4284      	cmp	r4, r0
 801c76e:	d910      	bls.n	801c792 <forward_conv2d_nl_pool+0x5ce>
 801c770:	4603      	mov	r3, r0
 801c772:	462a      	mov	r2, r5
 801c774:	ecb3 7a01 	vldmia	r3!, {s14}
 801c778:	ecf2 6a01 	vldmia	r2!, {s13}
 801c77c:	429c      	cmp	r4, r3
 801c77e:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c782:	d8f7      	bhi.n	801c774 <forward_conv2d_nl_pool+0x5b0>
 801c784:	43c3      	mvns	r3, r0
 801c786:	441c      	add	r4, r3
 801c788:	f024 0403 	bic.w	r4, r4, #3
 801c78c:	3404      	adds	r4, #4
 801c78e:	4425      	add	r5, r4
 801c790:	4420      	add	r0, r4
 801c792:	3101      	adds	r1, #1
 801c794:	4448      	add	r0, r9
 801c796:	428e      	cmp	r6, r1
 801c798:	d1e6      	bne.n	801c768 <forward_conv2d_nl_pool+0x5a4>
 801c79a:	f10c 0c01 	add.w	ip, ip, #1
 801c79e:	4458      	add	r0, fp
 801c7a0:	4445      	add	r5, r8
 801c7a2:	45e2      	cmp	sl, ip
 801c7a4:	d1dd      	bne.n	801c762 <forward_conv2d_nl_pool+0x59e>
 801c7a6:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 801c7aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801c7ae:	441d      	add	r5, r3
 801c7b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801c7b4:	ece3 7a01 	vstmia	r3!, {s15}
 801c7b8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 801c7bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801c7c0:	4293      	cmp	r3, r2
 801c7c2:	d1be      	bne.n	801c742 <forward_conv2d_nl_pool+0x57e>
 801c7c4:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801c7c8:	69f9      	ldr	r1, [r7, #28]
 801c7ca:	4472      	add	r2, lr
 801c7cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801c7ce:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 801c7d2:	3301      	adds	r3, #1
 801c7d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801c7d6:	67bb      	str	r3, [r7, #120]	; 0x78
 801c7d8:	1a52      	subs	r2, r2, r1
 801c7da:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 801c7de:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801c7e2:	429a      	cmp	r2, r3
 801c7e4:	d1a2      	bne.n	801c72c <forward_conv2d_nl_pool+0x568>
 801c7e6:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 801c7ea:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801c7ee:	4608      	mov	r0, r1
 801c7f0:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 801c7f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801c7f8:	4410      	add	r0, r2
 801c7fa:	3301      	adds	r3, #1
 801c7fc:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 801c800:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 801c804:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801c808:	4401      	add	r1, r0
 801c80a:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 801c80e:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 801c812:	1a8a      	subs	r2, r1, r2
 801c814:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 801c818:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801c81c:	429a      	cmp	r2, r3
 801c81e:	f47f af1c 	bne.w	801c65a <forward_conv2d_nl_pool+0x496>
 801c822:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801c826:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801c82a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801c82e:	699b      	ldr	r3, [r3, #24]
 801c830:	2a00      	cmp	r2, #0
 801c832:	f000 8167 	beq.w	801cb04 <forward_conv2d_nl_pool+0x940>
 801c836:	2400      	movs	r4, #0
 801c838:	f8d7 509c 	ldr.w	r5, [r7, #156]	; 0x9c
 801c83c:	f8d7 6150 	ldr.w	r6, [r7, #336]	; 0x150
 801c840:	f8d7 8134 	ldr.w	r8, [r7, #308]	; 0x134
 801c844:	f8d7 910c 	ldr.w	r9, [r7, #268]	; 0x10c
 801c848:	f8c7 4154 	str.w	r4, [r7, #340]	; 0x154
 801c84c:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 801c850:	4641      	mov	r1, r8
 801c852:	609e      	str	r6, [r3, #8]
 801c854:	4640      	mov	r0, r8
 801c856:	462b      	mov	r3, r5
 801c858:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 801c85c:	4425      	add	r5, r4
 801c85e:	f8d7 40d0 	ldr.w	r4, [r7, #208]	; 0xd0
 801c862:	47a0      	blx	r4
 801c864:	f8d8 3018 	ldr.w	r3, [r8, #24]
 801c868:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801c86c:	eba5 0009 	sub.w	r0, r5, r9
 801c870:	6859      	ldr	r1, [r3, #4]
 801c872:	4416      	add	r6, r2
 801c874:	f8d7 40f8 	ldr.w	r4, [r7, #248]	; 0xf8
 801c878:	0089      	lsls	r1, r1, #2
 801c87a:	68da      	ldr	r2, [r3, #12]
 801c87c:	42a0      	cmp	r0, r4
 801c87e:	bfa8      	it	ge
 801c880:	464d      	movge	r5, r9
 801c882:	1850      	adds	r0, r2, r1
 801c884:	4286      	cmp	r6, r0
 801c886:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 801c88a:	bf28      	it	cs
 801c88c:	1a76      	subcs	r6, r6, r1
 801c88e:	3001      	adds	r0, #1
 801c890:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 801c894:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154
 801c898:	4281      	cmp	r1, r0
 801c89a:	d1d7      	bne.n	801c84c <forward_conv2d_nl_pool+0x688>
 801c89c:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
 801c8a0:	f8c7 6150 	str.w	r6, [r7, #336]	; 0x150
 801c8a4:	e01a      	b.n	801c8dc <forward_conv2d_nl_pool+0x718>
 801c8a6:	461a      	mov	r2, r3
 801c8a8:	e77f      	b.n	801c7aa <forward_conv2d_nl_pool+0x5e6>
 801c8aa:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 801c8ae:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 801c8b2:	460d      	mov	r5, r1
 801c8b4:	4688      	mov	r8, r1
 801c8b6:	1853      	adds	r3, r2, r1
 801c8b8:	4611      	mov	r1, r2
 801c8ba:	fb95 f2f2 	sdiv	r2, r5, r2
 801c8be:	fb01 5212 	mls	r2, r1, r2, r5
 801c8c2:	460c      	mov	r4, r1
 801c8c4:	1a8a      	subs	r2, r1, r2
 801c8c6:	fb92 f1f1 	sdiv	r1, r2, r1
 801c8ca:	fb04 2111 	mls	r1, r4, r1, r2
 801c8ce:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801c8d0:	1888      	adds	r0, r1, r2
 801c8d2:	e6d1      	b.n	801c678 <forward_conv2d_nl_pool+0x4b4>
 801c8d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801c8d8:	699b      	ldr	r3, [r3, #24]
 801c8da:	68da      	ldr	r2, [r3, #12]
 801c8dc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 801c8e0:	609a      	str	r2, [r3, #8]
 801c8e2:	3101      	adds	r1, #1
 801c8e4:	b20b      	sxth	r3, r1
 801c8e6:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 801c8ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801c8ee:	3b01      	subs	r3, #1
 801c8f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801c8f4:	f100 808b 	bmi.w	801ca0e <forward_conv2d_nl_pool+0x84a>
 801c8f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801c8fc:	f8d7 5140 	ldr.w	r5, [r7, #320]	; 0x140
 801c900:	42ab      	cmp	r3, r5
 801c902:	d869      	bhi.n	801c9d8 <forward_conv2d_nl_pool+0x814>
 801c904:	f8d7 90c0 	ldr.w	r9, [r7, #192]	; 0xc0
 801c908:	b29c      	uxth	r4, r3
 801c90a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801c90e:	2101      	movs	r1, #1
 801c910:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801c914:	6998      	ldr	r0, [r3, #24]
 801c916:	fa1f f389 	uxth.w	r3, r9
 801c91a:	9401      	str	r4, [sp, #4]
 801c91c:	1aa2      	subs	r2, r4, r2
 801c91e:	1aee      	subs	r6, r5, r3
 801c920:	f8d7 50b4 	ldr.w	r5, [r7, #180]	; 0xb4
 801c924:	f8b7 4098 	ldrh.w	r4, [r7, #152]	; 0x98
 801c928:	b292      	uxth	r2, r2
 801c92a:	9508      	str	r5, [sp, #32]
 801c92c:	b236      	sxth	r6, r6
 801c92e:	f8b7 5048 	ldrh.w	r5, [r7, #72]	; 0x48
 801c932:	9305      	str	r3, [sp, #20]
 801c934:	f8d7 808c 	ldr.w	r8, [r7, #140]	; 0x8c
 801c938:	9107      	str	r1, [sp, #28]
 801c93a:	fa1f f388 	uxth.w	r3, r8
 801c93e:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 801c942:	9406      	str	r4, [sp, #24]
 801c944:	f8b7 404c 	ldrh.w	r4, [r7, #76]	; 0x4c
 801c948:	9504      	str	r5, [sp, #16]
 801c94a:	f8c7 6140 	str.w	r6, [r7, #320]	; 0x140
 801c94e:	9303      	str	r3, [sp, #12]
 801c950:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 801c954:	9102      	str	r1, [sp, #8]
 801c956:	f8b7 1148 	ldrh.w	r1, [r7, #328]	; 0x148
 801c95a:	9400      	str	r4, [sp, #0]
 801c95c:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 801c960:	6c3e      	ldr	r6, [r7, #64]	; 0x40
 801c962:	3401      	adds	r4, #1
 801c964:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 801c968:	47b0      	blx	r6
 801c96a:	f8d7 5120 	ldr.w	r5, [r7, #288]	; 0x120
 801c96e:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 801c972:	fa0f f389 	sxth.w	r3, r9
 801c976:	462e      	mov	r6, r5
 801c978:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 801c97a:	688a      	ldr	r2, [r1, #8]
 801c97c:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 801c980:	442a      	add	r2, r5
 801c982:	f8d7 511c 	ldr.w	r5, [r7, #284]	; 0x11c
 801c986:	4406      	add	r6, r0
 801c988:	1a28      	subs	r0, r5, r0
 801c98a:	6f7d      	ldr	r5, [r7, #116]	; 0x74
 801c98c:	f8c7 6120 	str.w	r6, [r7, #288]	; 0x120
 801c990:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
 801c994:	4640      	mov	r0, r8
 801c996:	608a      	str	r2, [r1, #8]
 801c998:	1ac3      	subs	r3, r0, r3
 801c99a:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 801c99e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c9a2:	4428      	add	r0, r5
 801c9a4:	b21b      	sxth	r3, r3
 801c9a6:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
 801c9aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801c9ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801c9b2:	42a3      	cmp	r3, r4
 801c9b4:	f63f adcc 	bhi.w	801c550 <forward_conv2d_nl_pool+0x38c>
 801c9b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801c9bc:	699b      	ldr	r3, [r3, #24]
 801c9be:	68da      	ldr	r2, [r3, #12]
 801c9c0:	609a      	str	r2, [r3, #8]
 801c9c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801c9c6:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 801c9ca:	68d3      	ldr	r3, [r2, #12]
 801c9cc:	6093      	str	r3, [r2, #8]
 801c9ce:	46bd      	mov	sp, r7
 801c9d0:	ecbd 8b08 	vpop	{d8-d11}
 801c9d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c9d8:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 801c9dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801c9e0:	4611      	mov	r1, r2
 801c9e2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 801c9e6:	4419      	add	r1, r3
 801c9e8:	1ad3      	subs	r3, r2, r3
 801c9ea:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801c9ec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 801c9f0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801c9f4:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 801c9f8:	4413      	add	r3, r2
 801c9fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801c9fe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 801ca02:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801ca06:	4293      	cmp	r3, r2
 801ca08:	f63f ada2 	bhi.w	801c550 <forward_conv2d_nl_pool+0x38c>
 801ca0c:	e7d4      	b.n	801c9b8 <forward_conv2d_nl_pool+0x7f4>
 801ca0e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801ca12:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 801ca16:	6999      	ldr	r1, [r3, #24]
 801ca18:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 801ca1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801ca1e:	fb02 0213 	mls	r2, r2, r3, r0
 801ca22:	68c8      	ldr	r0, [r1, #12]
 801ca24:	684b      	ldr	r3, [r1, #4]
 801ca26:	4290      	cmp	r0, r2
 801ca28:	ea4f 0383 	mov.w	r3, r3, lsl #2
 801ca2c:	bf88      	it	hi
 801ca2e:	18d2      	addhi	r2, r2, r3
 801ca30:	18c1      	adds	r1, r0, r3
 801ca32:	4290      	cmp	r0, r2
 801ca34:	d216      	bcs.n	801ca64 <forward_conv2d_nl_pool+0x8a0>
 801ca36:	f9b7 00b8 	ldrsh.w	r0, [r7, #184]	; 0xb8
 801ca3a:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 801ca3e:	42a0      	cmp	r0, r4
 801ca40:	d010      	beq.n	801ca64 <forward_conv2d_nl_pool+0x8a0>
 801ca42:	428a      	cmp	r2, r1
 801ca44:	d20e      	bcs.n	801ca64 <forward_conv2d_nl_pool+0x8a0>
 801ca46:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 801ca4a:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 801ca4e:	f852 3b04 	ldr.w	r3, [r2], #4
 801ca52:	f840 3b04 	str.w	r3, [r0], #4
 801ca56:	69a1      	ldr	r1, [r4, #24]
 801ca58:	684b      	ldr	r3, [r1, #4]
 801ca5a:	68c9      	ldr	r1, [r1, #12]
 801ca5c:	009b      	lsls	r3, r3, #2
 801ca5e:	4419      	add	r1, r3
 801ca60:	4291      	cmp	r1, r2
 801ca62:	d8f4      	bhi.n	801ca4e <forward_conv2d_nl_pool+0x88a>
 801ca64:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 801ca68:	f8d7 40b8 	ldr.w	r4, [r7, #184]	; 0xb8
 801ca6c:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 801ca6e:	4420      	add	r0, r4
 801ca70:	f8d7 4150 	ldr.w	r4, [r7, #336]	; 0x150
 801ca74:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 801ca78:	442c      	add	r4, r5
 801ca7a:	f8d7 50c0 	ldr.w	r5, [r7, #192]	; 0xc0
 801ca7e:	1a80      	subs	r0, r0, r2
 801ca80:	442a      	add	r2, r5
 801ca82:	428c      	cmp	r4, r1
 801ca84:	b200      	sxth	r0, r0
 801ca86:	f8c7 4150 	str.w	r4, [r7, #336]	; 0x150
 801ca8a:	b212      	sxth	r2, r2
 801ca8c:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
 801ca90:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 801ca94:	4622      	mov	r2, r4
 801ca96:	f4ff af2f 	bcc.w	801c8f8 <forward_conv2d_nl_pool+0x734>
 801ca9a:	425b      	negs	r3, r3
 801ca9c:	441a      	add	r2, r3
 801ca9e:	428a      	cmp	r2, r1
 801caa0:	d2fc      	bcs.n	801ca9c <forward_conv2d_nl_pool+0x8d8>
 801caa2:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 801caa6:	e727      	b.n	801c8f8 <forward_conv2d_nl_pool+0x734>
 801caa8:	68db      	ldr	r3, [r3, #12]
 801caaa:	deff      	udf	#255	; 0xff
 801caac:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801cab0:	2a00      	cmp	r2, #0
 801cab2:	f43f ac83 	beq.w	801c3bc <forward_conv2d_nl_pool+0x1f8>
 801cab6:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 801caba:	2803      	cmp	r0, #3
 801cabc:	f240 849a 	bls.w	801d3f4 <forward_conv2d_nl_pool+0x1230>
 801cac0:	685b      	ldr	r3, [r3, #4]
 801cac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cac4:	b1db      	cbz	r3, 801cafe <forward_conv2d_nl_pool+0x93a>
 801cac6:	685b      	ldr	r3, [r3, #4]
 801cac8:	b1cb      	cbz	r3, 801cafe <forward_conv2d_nl_pool+0x93a>
 801caca:	6998      	ldr	r0, [r3, #24]
 801cacc:	460b      	mov	r3, r1
 801cace:	f8dc 1008 	ldr.w	r1, [ip, #8]
 801cad2:	e9d0 5401 	ldrd	r5, r4, [r0, #4]
 801cad6:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 801cada:	9501      	str	r5, [sp, #4]
 801cadc:	9000      	str	r0, [sp, #0]
 801cade:	4620      	mov	r0, r4
 801cae0:	f7fe fb52 	bl	801b188 <ai_dict_decompress_f32>
 801cae4:	f8d8 3018 	ldr.w	r3, [r8, #24]
 801cae8:	b12c      	cbz	r4, 801caf6 <forward_conv2d_nl_pool+0x932>
 801caea:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 801caee:	881a      	ldrh	r2, [r3, #0]
 801caf0:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 801caf4:	e462      	b.n	801c3bc <forward_conv2d_nl_pool+0x1f8>
 801caf6:	881a      	ldrh	r2, [r3, #0]
 801caf8:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 801cafc:	e45e      	b.n	801c3bc <forward_conv2d_nl_pool+0x1f8>
 801cafe:	2300      	movs	r3, #0
 801cb00:	699b      	ldr	r3, [r3, #24]
 801cb02:	deff      	udf	#255	; 0xff
 801cb04:	68da      	ldr	r2, [r3, #12]
 801cb06:	e6e9      	b.n	801c8dc <forward_conv2d_nl_pool+0x718>
 801cb08:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 801cb0c:	2901      	cmp	r1, #1
 801cb0e:	f47f ad43 	bne.w	801c598 <forward_conv2d_nl_pool+0x3d4>
 801cb12:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 801cb16:	2900      	cmp	r1, #0
 801cb18:	f43f aedc 	beq.w	801c8d4 <forward_conv2d_nl_pool+0x710>
 801cb1c:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 801cb20:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 801cb24:	f8d7 6144 	ldr.w	r6, [r7, #324]	; 0x144
 801cb28:	fbb1 f1f0 	udiv	r1, r1, r0
 801cb2c:	ebc1 7481 	rsb	r4, r1, r1, lsl #30
 801cb30:	fb03 f506 	mul.w	r5, r3, r6
 801cb34:	1ad0      	subs	r0, r2, r3
 801cb36:	00b2      	lsls	r2, r6, #2
 801cb38:	00a4      	lsls	r4, r4, #2
 801cb3a:	67fd      	str	r5, [r7, #124]	; 0x7c
 801cb3c:	f8d7 5100 	ldr.w	r5, [r7, #256]	; 0x100
 801cb40:	65fc      	str	r4, [r7, #92]	; 0x5c
 801cb42:	69bc      	ldr	r4, [r7, #24]
 801cb44:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
 801cb48:	1a28      	subs	r0, r5, r0
 801cb4a:	fb04 f303 	mul.w	r3, r4, r3
 801cb4e:	460d      	mov	r5, r1
 801cb50:	62f9      	str	r1, [r7, #44]	; 0x2c
 801cb52:	ebc1 7141 	rsb	r1, r1, r1, lsl #29
 801cb56:	617b      	str	r3, [r7, #20]
 801cb58:	fb02 f300 	mul.w	r3, r2, r0
 801cb5c:	62bb      	str	r3, [r7, #40]	; 0x28
 801cb5e:	00cb      	lsls	r3, r1, #3
 801cb60:	607b      	str	r3, [r7, #4]
 801cb62:	00ab      	lsls	r3, r5, #2
 801cb64:	60bb      	str	r3, [r7, #8]
 801cb66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cb6a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801cb6e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 801cb72:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 801cb76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801cb7a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801cb7e:	2300      	movs	r3, #0
 801cb80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801cb84:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801cb88:	2b00      	cmp	r3, #0
 801cb8a:	f2c0 826a 	blt.w	801d062 <forward_conv2d_nl_pool+0xe9e>
 801cb8e:	2400      	movs	r4, #0
 801cb90:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801cb92:	4621      	mov	r1, r4
 801cb94:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 801cb98:	f8d7 614c 	ldr.w	r6, [r7, #332]	; 0x14c
 801cb9c:	1818      	adds	r0, r3, r0
 801cb9e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801cba2:	f8d7 512c 	ldr.w	r5, [r7, #300]	; 0x12c
 801cba6:	18f3      	adds	r3, r6, r3
 801cba8:	4420      	add	r0, r4
 801cbaa:	461c      	mov	r4, r3
 801cbac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801cbb0:	0080      	lsls	r0, r0, #2
 801cbb2:	429c      	cmp	r4, r3
 801cbb4:	bf28      	it	cs
 801cbb6:	461c      	movcs	r4, r3
 801cbb8:	1a64      	subs	r4, r4, r1
 801cbba:	2d00      	cmp	r5, #0
 801cbbc:	f000 8242 	beq.w	801d044 <forward_conv2d_nl_pool+0xe80>
 801cbc0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801cbc4:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 801cbc8:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 801cbcc:	eb03 0982 	add.w	r9, r3, r2, lsl #2
 801cbd0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801cbd4:	428d      	cmp	r5, r1
 801cbd6:	462a      	mov	r2, r5
 801cbd8:	eba6 0104 	sub.w	r1, r6, r4
 801cbdc:	eba3 0304 	sub.w	r3, r3, r4
 801cbe0:	fe48 3a23 	vseleq.f32	s7, s16, s7
 801cbe4:	697d      	ldr	r5, [r7, #20]
 801cbe6:	f8d7 60bc 	ldr.w	r6, [r7, #188]	; 0xbc
 801cbea:	4428      	add	r0, r5
 801cbec:	f8d7 513c 	ldr.w	r5, [r7, #316]	; 0x13c
 801cbf0:	fb05 6e00 	mla	lr, r5, r0, r6
 801cbf4:	eb0e 000b 	add.w	r0, lr, fp
 801cbf8:	4586      	cmp	lr, r0
 801cbfa:	61f8      	str	r0, [r7, #28]
 801cbfc:	f080 80a5 	bcs.w	801cd4a <forward_conv2d_nl_pool+0xb86>
 801cc00:	009b      	lsls	r3, r3, #2
 801cc02:	fb01 f10b 	mul.w	r1, r1, fp
 801cc06:	f024 0803 	bic.w	r8, r4, #3
 801cc0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801cc0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cc10:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 801cc14:	2b00      	cmp	r3, #0
 801cc16:	f000 8098 	beq.w	801cd4a <forward_conv2d_nl_pool+0xb86>
 801cc1a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801cc1c:	f108 33ff 	add.w	r3, r8, #4294967295
 801cc20:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 801cc24:	089b      	lsrs	r3, r3, #2
 801cc26:	4401      	add	r1, r0
 801cc28:	68b8      	ldr	r0, [r7, #8]
 801cc2a:	3301      	adds	r3, #1
 801cc2c:	1810      	adds	r0, r2, r0
 801cc2e:	1a8a      	subs	r2, r1, r2
 801cc30:	613a      	str	r2, [r7, #16]
 801cc32:	fb03 f20a 	mul.w	r2, r3, sl
 801cc36:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 801cc3a:	667a      	str	r2, [r7, #100]	; 0x64
 801cc3c:	011a      	lsls	r2, r3, #4
 801cc3e:	009b      	lsls	r3, r3, #2
 801cc40:	673a      	str	r2, [r7, #112]	; 0x70
 801cc42:	663b      	str	r3, [r7, #96]	; 0x60
 801cc44:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 801cc48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801cc4a:	6939      	ldr	r1, [r7, #16]
 801cc4c:	4413      	add	r3, r2
 801cc4e:	188a      	adds	r2, r1, r2
 801cc50:	60fb      	str	r3, [r7, #12]
 801cc52:	67ba      	str	r2, [r7, #120]	; 0x78
 801cc54:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801cc58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801cc5c:	ecf3 6a01 	vldmia	r3!, {s13}
 801cc60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801cc64:	ee66 6aa3 	vmul.f32	s13, s13, s7
 801cc68:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801cc6c:	2b00      	cmp	r3, #0
 801cc6e:	dd57      	ble.n	801cd20 <forward_conv2d_nl_pool+0xb5c>
 801cc70:	4676      	mov	r6, lr
 801cc72:	f04f 0c00 	mov.w	ip, #0
 801cc76:	f1b8 0f00 	cmp.w	r8, #0
 801cc7a:	f340 81e1 	ble.w	801d040 <forward_conv2d_nl_pool+0xe7c>
 801cc7e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801cc82:	f109 0310 	add.w	r3, r9, #16
 801cc86:	2000      	movs	r0, #0
 801cc88:	18b1      	adds	r1, r6, r2
 801cc8a:	4632      	mov	r2, r6
 801cc8c:	eb02 050b 	add.w	r5, r2, fp
 801cc90:	ed53 7a03 	vldr	s15, [r3, #-12]
 801cc94:	ed92 4a00 	vldr	s8, [r2]
 801cc98:	3004      	adds	r0, #4
 801cc9a:	ed95 7a00 	vldr	s14, [r5]
 801cc9e:	eb01 050b 	add.w	r5, r1, fp
 801cca2:	ed53 4a04 	vldr	s9, [r3, #-16]
 801cca6:	4540      	cmp	r0, r8
 801cca8:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ccac:	ed91 5a00 	vldr	s10, [r1]
 801ccb0:	ed53 5a02 	vldr	s11, [r3, #-8]
 801ccb4:	4452      	add	r2, sl
 801ccb6:	ed13 7a01 	vldr	s14, [r3, #-4]
 801ccba:	4451      	add	r1, sl
 801ccbc:	eee4 7a24 	vfma.f32	s15, s8, s9
 801ccc0:	ed95 6a00 	vldr	s12, [r5]
 801ccc4:	f103 0310 	add.w	r3, r3, #16
 801ccc8:	eee5 7a25 	vfma.f32	s15, s10, s11
 801cccc:	eee6 7a07 	vfma.f32	s15, s12, s14
 801ccd0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801ccd4:	dbda      	blt.n	801cc8c <forward_conv2d_nl_pool+0xac8>
 801ccd6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801ccd8:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801ccda:	441e      	add	r6, r3
 801ccdc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ccde:	4499      	add	r9, r3
 801cce0:	42a0      	cmp	r0, r4
 801cce2:	da11      	bge.n	801cd08 <forward_conv2d_nl_pool+0xb44>
 801cce4:	4602      	mov	r2, r0
 801cce6:	4633      	mov	r3, r6
 801cce8:	4649      	mov	r1, r9
 801ccea:	3201      	adds	r2, #1
 801ccec:	edd3 7a00 	vldr	s15, [r3]
 801ccf0:	ecb1 7a01 	vldmia	r1!, {s14}
 801ccf4:	445b      	add	r3, fp
 801ccf6:	42a2      	cmp	r2, r4
 801ccf8:	eee7 6a27 	vfma.f32	s13, s14, s15
 801ccfc:	d1f5      	bne.n	801ccea <forward_conv2d_nl_pool+0xb26>
 801ccfe:	1a20      	subs	r0, r4, r0
 801cd00:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 801cd04:	fb00 660b 	mla	r6, r0, fp, r6
 801cd08:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801cd0c:	f10c 0c01 	add.w	ip, ip, #1
 801cd10:	441e      	add	r6, r3
 801cd12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801cd16:	4499      	add	r9, r3
 801cd18:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801cd1c:	4563      	cmp	r3, ip
 801cd1e:	d1aa      	bne.n	801cc76 <forward_conv2d_nl_pool+0xab2>
 801cd20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cd22:	4499      	add	r9, r3
 801cd24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801cd26:	ece3 6a01 	vstmia	r3!, {s13}
 801cd2a:	67bb      	str	r3, [r7, #120]	; 0x78
 801cd2c:	e9d7 2335 	ldrd	r2, r3, [r7, #212]	; 0xd4
 801cd30:	4293      	cmp	r3, r2
 801cd32:	d191      	bne.n	801cc58 <forward_conv2d_nl_pool+0xa94>
 801cd34:	68fb      	ldr	r3, [r7, #12]
 801cd36:	f10e 0e04 	add.w	lr, lr, #4
 801cd3a:	687a      	ldr	r2, [r7, #4]
 801cd3c:	1a9b      	subs	r3, r3, r2
 801cd3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801cd42:	69fb      	ldr	r3, [r7, #28]
 801cd44:	459e      	cmp	lr, r3
 801cd46:	f4ff af7d 	bcc.w	801cc44 <forward_conv2d_nl_pool+0xa80>
 801cd4a:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 801cd4e:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 801cd52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801cd56:	440a      	add	r2, r1
 801cd58:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 801cd5c:	3301      	adds	r3, #1
 801cd5e:	4608      	mov	r0, r1
 801cd60:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 801cd64:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 801cd68:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801cd6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801cd70:	4410      	add	r0, r2
 801cd72:	1a8a      	subs	r2, r1, r2
 801cd74:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 801cd78:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801cd7c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
 801cd80:	429a      	cmp	r2, r3
 801cd82:	f47f aeff 	bne.w	801cb84 <forward_conv2d_nl_pool+0x9c0>
 801cd86:	e54e      	b.n	801c826 <forward_conv2d_nl_pool+0x662>
 801cd88:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 801cd8c:	2801      	cmp	r0, #1
 801cd8e:	f47f ac03 	bne.w	801c598 <forward_conv2d_nl_pool+0x3d4>
 801cd92:	1ad2      	subs	r2, r2, r3
 801cd94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801cd96:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 801cd9a:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 801cd9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801cda0:	fb00 4101 	mla	r1, r0, r1, r4
 801cda4:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 801cda8:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 801cdac:	f080 8172 	bcs.w	801d094 <forward_conv2d_nl_pool+0xed0>
 801cdb0:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 801cdb4:	2a00      	cmp	r2, #0
 801cdb6:	f43f ad36 	beq.w	801c826 <forward_conv2d_nl_pool+0x662>
 801cdba:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801cdbe:	fb02 f303 	mul.w	r3, r2, r3
 801cdc2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801cdc4:	67bb      	str	r3, [r7, #120]	; 0x78
 801cdc6:	4411      	add	r1, r2
 801cdc8:	1a9b      	subs	r3, r3, r2
 801cdca:	6639      	str	r1, [r7, #96]	; 0x60
 801cdcc:	667b      	str	r3, [r7, #100]	; 0x64
 801cdce:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 801cdd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801cdd6:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 801cdda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801cdde:	2300      	movs	r3, #0
 801cde0:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 801cde4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801cde8:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 801cdec:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
 801cdf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801cdf4:	2b00      	cmp	r3, #0
 801cdf6:	f000 814a 	beq.w	801d08e <forward_conv2d_nl_pool+0xeca>
 801cdfa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801cdfe:	ed93 6a00 	vldr	s12, [r3]
 801ce02:	3304      	adds	r3, #4
 801ce04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801ce08:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801ce0c:	2b00      	cmp	r3, #0
 801ce0e:	f000 80fe 	beq.w	801d00e <forward_conv2d_nl_pool+0xe4a>
 801ce12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ce16:	f04f 0b00 	mov.w	fp, #0
 801ce1a:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 801ce1e:	eb03 0802 	add.w	r8, r3, r2
 801ce22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801ce24:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801ce28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801ce2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801ce2e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801ce32:	67fb      	str	r3, [r7, #124]	; 0x7c
 801ce34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801ce38:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801ce3c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801ce40:	2b00      	cmp	r3, #0
 801ce42:	f2c0 811b 	blt.w	801d07c <forward_conv2d_nl_pool+0xeb8>
 801ce46:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 801ce4a:	2300      	movs	r3, #0
 801ce4c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801ce4e:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 801ce52:	f8d7 4110 	ldr.w	r4, [r7, #272]	; 0x110
 801ce56:	4540      	cmp	r0, r8
 801ce58:	bf94      	ite	ls
 801ce5a:	ebc3 0300 	rsbls	r3, r3, r0
 801ce5e:	ebc3 0308 	rsbhi	r3, r3, r8
 801ce62:	4422      	add	r2, r4
 801ce64:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 801ce68:	1ac0      	subs	r0, r0, r3
 801ce6a:	eba4 0903 	sub.w	r9, r4, r3
 801ce6e:	f8d7 413c 	ldr.w	r4, [r7, #316]	; 0x13c
 801ce72:	fb03 f304 	mul.w	r3, r3, r4
 801ce76:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 801ce7a:	2c00      	cmp	r4, #0
 801ce7c:	f340 80fb 	ble.w	801d076 <forward_conv2d_nl_pool+0xeb2>
 801ce80:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 801ce84:	f023 050f 	bic.w	r5, r3, #15
 801ce88:	eef0 6a46 	vmov.f32	s13, s12
 801ce8c:	f04f 0e00 	mov.w	lr, #0
 801ce90:	fb04 f000 	mul.w	r0, r4, r0
 801ce94:	fb04 f909 	mul.w	r9, r4, r9
 801ce98:	6738      	str	r0, [r7, #112]	; 0x70
 801ce9a:	1e68      	subs	r0, r5, #1
 801ce9c:	0900      	lsrs	r0, r0, #4
 801ce9e:	3001      	adds	r0, #1
 801cea0:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 801cea4:	0100      	lsls	r0, r0, #4
 801cea6:	65f8      	str	r0, [r7, #92]	; 0x5c
 801cea8:	2d00      	cmp	r5, #0
 801ceaa:	f340 80e2 	ble.w	801d072 <forward_conv2d_nl_pool+0xeae>
 801ceae:	f101 0440 	add.w	r4, r1, #64	; 0x40
 801ceb2:	f102 0040 	add.w	r0, r2, #64	; 0x40
 801ceb6:	2600      	movs	r6, #0
 801ceb8:	ed10 7a0f 	vldr	s14, [r0, #-60]	; 0xffffffc4
 801cebc:	3610      	adds	r6, #16
 801cebe:	ed54 7a0f 	vldr	s15, [r4, #-60]	; 0xffffffc4
 801cec2:	3040      	adds	r0, #64	; 0x40
 801cec4:	ed54 5a10 	vldr	s11, [r4, #-64]	; 0xffffffc0
 801cec8:	42ae      	cmp	r6, r5
 801ceca:	ee67 7a27 	vmul.f32	s15, s14, s15
 801cece:	ed10 7a20 	vldr	s14, [r0, #-128]	; 0xffffff80
 801ced2:	ed54 2a0e 	vldr	s5, [r4, #-56]	; 0xffffffc8
 801ced6:	f104 0440 	add.w	r4, r4, #64	; 0x40
 801ceda:	ed10 3a1e 	vldr	s6, [r0, #-120]	; 0xffffff88
 801cede:	eee5 7a87 	vfma.f32	s15, s11, s14
 801cee2:	ed54 3a1d 	vldr	s7, [r4, #-116]	; 0xffffff8c
 801cee6:	ed10 4a1d 	vldr	s8, [r0, #-116]	; 0xffffff8c
 801ceea:	ed50 4a1c 	vldr	s9, [r0, #-112]	; 0xffffff90
 801ceee:	ed14 5a1c 	vldr	s10, [r4, #-112]	; 0xffffff90
 801cef2:	ed50 5a1b 	vldr	s11, [r0, #-108]	; 0xffffff94
 801cef6:	ed14 7a1b 	vldr	s14, [r4, #-108]	; 0xffffff94
 801cefa:	eee2 7a83 	vfma.f32	s15, s5, s6
 801cefe:	ed50 ba1a 	vldr	s23, [r0, #-104]	; 0xffffff98
 801cf02:	ed14 ba1a 	vldr	s22, [r4, #-104]	; 0xffffff98
 801cf06:	ed50 aa19 	vldr	s21, [r0, #-100]	; 0xffffff9c
 801cf0a:	ed14 aa19 	vldr	s20, [r4, #-100]	; 0xffffff9c
 801cf0e:	ed54 9a18 	vldr	s19, [r4, #-96]	; 0xffffffa0
 801cf12:	ed10 9a18 	vldr	s18, [r0, #-96]	; 0xffffffa0
 801cf16:	eee3 7a84 	vfma.f32	s15, s7, s8
 801cf1a:	ed54 8a17 	vldr	s17, [r4, #-92]	; 0xffffffa4
 801cf1e:	ed10 0a17 	vldr	s0, [r0, #-92]	; 0xffffffa4
 801cf22:	ed50 0a16 	vldr	s1, [r0, #-88]	; 0xffffffa8
 801cf26:	ed14 1a16 	vldr	s2, [r4, #-88]	; 0xffffffa8
 801cf2a:	ed54 1a15 	vldr	s3, [r4, #-84]	; 0xffffffac
 801cf2e:	ed10 2a15 	vldr	s4, [r0, #-84]	; 0xffffffac
 801cf32:	eee4 7a85 	vfma.f32	s15, s9, s10
 801cf36:	ed50 2a14 	vldr	s5, [r0, #-80]	; 0xffffffb0
 801cf3a:	ed14 3a14 	vldr	s6, [r4, #-80]	; 0xffffffb0
 801cf3e:	ed50 3a13 	vldr	s7, [r0, #-76]	; 0xffffffb4
 801cf42:	ed14 4a13 	vldr	s8, [r4, #-76]	; 0xffffffb4
 801cf46:	ed50 4a12 	vldr	s9, [r0, #-72]	; 0xffffffb8
 801cf4a:	ed14 5a12 	vldr	s10, [r4, #-72]	; 0xffffffb8
 801cf4e:	eee5 7a87 	vfma.f32	s15, s11, s14
 801cf52:	ed54 5a11 	vldr	s11, [r4, #-68]	; 0xffffffbc
 801cf56:	ed10 7a11 	vldr	s14, [r0, #-68]	; 0xffffffbc
 801cf5a:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 801cf5e:	eeea 7a8a 	vfma.f32	s15, s21, s20
 801cf62:	eee9 7a89 	vfma.f32	s15, s19, s18
 801cf66:	eee8 7a80 	vfma.f32	s15, s17, s0
 801cf6a:	eee0 7a81 	vfma.f32	s15, s1, s2
 801cf6e:	eee1 7a82 	vfma.f32	s15, s3, s4
 801cf72:	eee2 7a83 	vfma.f32	s15, s5, s6
 801cf76:	eee3 7a84 	vfma.f32	s15, s7, s8
 801cf7a:	eee4 7a85 	vfma.f32	s15, s9, s10
 801cf7e:	eee5 7a87 	vfma.f32	s15, s11, s14
 801cf82:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801cf86:	db97      	blt.n	801ceb8 <forward_conv2d_nl_pool+0xcf4>
 801cf88:	4451      	add	r1, sl
 801cf8a:	4452      	add	r2, sl
 801cf8c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801cf8e:	4283      	cmp	r3, r0
 801cf90:	dd0f      	ble.n	801cfb2 <forward_conv2d_nl_pool+0xdee>
 801cf92:	4604      	mov	r4, r0
 801cf94:	468c      	mov	ip, r1
 801cf96:	4616      	mov	r6, r2
 801cf98:	3401      	adds	r4, #1
 801cf9a:	ecb6 7a01 	vldmia	r6!, {s14}
 801cf9e:	ecfc 7a01 	vldmia	ip!, {s15}
 801cfa2:	42a3      	cmp	r3, r4
 801cfa4:	eee7 6a27 	vfma.f32	s13, s14, s15
 801cfa8:	d1f6      	bne.n	801cf98 <forward_conv2d_nl_pool+0xdd4>
 801cfaa:	1a18      	subs	r0, r3, r0
 801cfac:	0080      	lsls	r0, r0, #2
 801cfae:	4402      	add	r2, r0
 801cfb0:	4401      	add	r1, r0
 801cfb2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 801cfb4:	f10e 0e01 	add.w	lr, lr, #1
 801cfb8:	4449      	add	r1, r9
 801cfba:	4402      	add	r2, r0
 801cfbc:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 801cfc0:	4570      	cmp	r0, lr
 801cfc2:	f47f af71 	bne.w	801cea8 <forward_conv2d_nl_pool+0xce4>
 801cfc6:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 801cfca:	f10b 0b01 	add.w	fp, fp, #1
 801cfce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801cfd0:	4608      	mov	r0, r1
 801cfd2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801cfd6:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 801cfda:	4410      	add	r0, r2
 801cfdc:	edc3 6a00 	vstr	s13, [r3]
 801cfe0:	440b      	add	r3, r1
 801cfe2:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 801cfe6:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 801cfea:	eba8 0802 	sub.w	r8, r8, r2
 801cfee:	4608      	mov	r0, r1
 801cff0:	67fb      	str	r3, [r7, #124]	; 0x7c
 801cff2:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 801cff6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801cff8:	4418      	add	r0, r3
 801cffa:	1acb      	subs	r3, r1, r3
 801cffc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801d000:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801d004:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 801d008:	455b      	cmp	r3, fp
 801d00a:	f47f af17 	bne.w	801ce3c <forward_conv2d_nl_pool+0xc78>
 801d00e:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801d012:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801d014:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801d018:	440a      	add	r2, r1
 801d01a:	3301      	adds	r3, #1
 801d01c:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 801d020:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801d024:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801d028:	3204      	adds	r2, #4
 801d02a:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 801d02e:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 801d032:	429a      	cmp	r2, r3
 801d034:	f47f aedc 	bne.w	801cdf0 <forward_conv2d_nl_pool+0xc2c>
 801d038:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 801d03c:	f7ff bbf3 	b.w	801c826 <forward_conv2d_nl_pool+0x662>
 801d040:	2000      	movs	r0, #0
 801d042:	e64d      	b.n	801cce0 <forward_conv2d_nl_pool+0xb1c>
 801d044:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801d048:	eef0 3a48 	vmov.f32	s7, s16
 801d04c:	eb03 0982 	add.w	r9, r3, r2, lsl #2
 801d050:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801d054:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 801d058:	1b19      	subs	r1, r3, r4
 801d05a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801d05e:	1b1b      	subs	r3, r3, r4
 801d060:	e5c0      	b.n	801cbe4 <forward_conv2d_nl_pool+0xa20>
 801d062:	f8d7 4108 	ldr.w	r4, [r7, #264]	; 0x108
 801d066:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801d068:	4621      	mov	r1, r4
 801d06a:	191a      	adds	r2, r3, r4
 801d06c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801d070:	e590      	b.n	801cb94 <forward_conv2d_nl_pool+0x9d0>
 801d072:	2000      	movs	r0, #0
 801d074:	e78b      	b.n	801cf8e <forward_conv2d_nl_pool+0xdca>
 801d076:	eef0 6a46 	vmov.f32	s13, s12
 801d07a:	e7a4      	b.n	801cfc6 <forward_conv2d_nl_pool+0xe02>
 801d07c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801d080:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801d084:	eba8 0303 	sub.w	r3, r8, r3
 801d088:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 801d08c:	e6df      	b.n	801ce4e <forward_conv2d_nl_pool+0xc8a>
 801d08e:	eeb0 6a48 	vmov.f32	s12, s16
 801d092:	e6b9      	b.n	801ce08 <forward_conv2d_nl_pool+0xc44>
 801d094:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801d098:	f8c7 d070 	str.w	sp, [r7, #112]	; 0x70
 801d09c:	320a      	adds	r2, #10
 801d09e:	f022 0207 	bic.w	r2, r2, #7
 801d0a2:	ebad 0d02 	sub.w	sp, sp, r2
 801d0a6:	aa0a      	add	r2, sp, #40	; 0x28
 801d0a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 801d0ac:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 801d0b0:	2a00      	cmp	r2, #0
 801d0b2:	f000 814e 	beq.w	801d352 <forward_conv2d_nl_pool+0x118e>
 801d0b6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801d0ba:	f8c7 b01c 	str.w	fp, [r7, #28]
 801d0be:	fb02 f303 	mul.w	r3, r2, r3
 801d0c2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801d0c4:	f8c7 a014 	str.w	sl, [r7, #20]
 801d0c8:	4411      	add	r1, r2
 801d0ca:	667b      	str	r3, [r7, #100]	; 0x64
 801d0cc:	1a9b      	subs	r3, r3, r2
 801d0ce:	62f9      	str	r1, [r7, #44]	; 0x2c
 801d0d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 801d0d2:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 801d0d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801d0da:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 801d0de:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801d0e2:	2300      	movs	r3, #0
 801d0e4:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 801d0e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801d0ec:	67f9      	str	r1, [r7, #124]	; 0x7c
 801d0ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801d0f2:	b13b      	cbz	r3, 801d104 <forward_conv2d_nl_pool+0xf40>
 801d0f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801d0f8:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 801d0fc:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 801d100:	f000 fcea 	bl	801dad8 <memcpy>
 801d104:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801d108:	2b00      	cmp	r3, #0
 801d10a:	f000 8134 	beq.w	801d376 <forward_conv2d_nl_pool+0x11b2>
 801d10e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801d110:	ed93 6a00 	vldr	s12, [r3]
 801d114:	3304      	adds	r3, #4
 801d116:	67fb      	str	r3, [r7, #124]	; 0x7c
 801d118:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801d11c:	2b00      	cmp	r3, #0
 801d11e:	f000 80fe 	beq.w	801d31e <forward_conv2d_nl_pool+0x115a>
 801d122:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d126:	f04f 0b00 	mov.w	fp, #0
 801d12a:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 801d12e:	eb03 0802 	add.w	r8, r3, r2
 801d132:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801d134:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801d138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d13a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801d13e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801d142:	67bb      	str	r3, [r7, #120]	; 0x78
 801d144:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801d148:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801d14c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801d150:	2b00      	cmp	r3, #0
 801d152:	f2c0 8107 	blt.w	801d364 <forward_conv2d_nl_pool+0x11a0>
 801d156:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 801d15a:	2300      	movs	r3, #0
 801d15c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801d15e:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 801d162:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 801d166:	4540      	cmp	r0, r8
 801d168:	bf94      	ite	ls
 801d16a:	ebc3 0300 	rsbls	r3, r3, r0
 801d16e:	ebc3 0308 	rsbhi	r3, r3, r8
 801d172:	4422      	add	r2, r4
 801d174:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 801d178:	1ac0      	subs	r0, r0, r3
 801d17a:	eba4 0903 	sub.w	r9, r4, r3
 801d17e:	f8d7 413c 	ldr.w	r4, [r7, #316]	; 0x13c
 801d182:	fb03 f304 	mul.w	r3, r3, r4
 801d186:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 801d18a:	2c00      	cmp	r4, #0
 801d18c:	f340 80e7 	ble.w	801d35e <forward_conv2d_nl_pool+0x119a>
 801d190:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 801d194:	f023 050f 	bic.w	r5, r3, #15
 801d198:	eef0 6a46 	vmov.f32	s13, s12
 801d19c:	f04f 0e00 	mov.w	lr, #0
 801d1a0:	fb04 f000 	mul.w	r0, r4, r0
 801d1a4:	fb04 f909 	mul.w	r9, r4, r9
 801d1a8:	6638      	str	r0, [r7, #96]	; 0x60
 801d1aa:	1e68      	subs	r0, r5, #1
 801d1ac:	0900      	lsrs	r0, r0, #4
 801d1ae:	3001      	adds	r0, #1
 801d1b0:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 801d1b4:	0100      	lsls	r0, r0, #4
 801d1b6:	62b8      	str	r0, [r7, #40]	; 0x28
 801d1b8:	2d00      	cmp	r5, #0
 801d1ba:	f340 80ce 	ble.w	801d35a <forward_conv2d_nl_pool+0x1196>
 801d1be:	f101 0440 	add.w	r4, r1, #64	; 0x40
 801d1c2:	f102 0040 	add.w	r0, r2, #64	; 0x40
 801d1c6:	2600      	movs	r6, #0
 801d1c8:	ed10 7a0f 	vldr	s14, [r0, #-60]	; 0xffffffc4
 801d1cc:	3610      	adds	r6, #16
 801d1ce:	ed54 7a0f 	vldr	s15, [r4, #-60]	; 0xffffffc4
 801d1d2:	3040      	adds	r0, #64	; 0x40
 801d1d4:	ed54 5a10 	vldr	s11, [r4, #-64]	; 0xffffffc0
 801d1d8:	42ae      	cmp	r6, r5
 801d1da:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d1de:	ed10 7a20 	vldr	s14, [r0, #-128]	; 0xffffff80
 801d1e2:	ed54 2a0e 	vldr	s5, [r4, #-56]	; 0xffffffc8
 801d1e6:	f104 0440 	add.w	r4, r4, #64	; 0x40
 801d1ea:	ed10 3a1e 	vldr	s6, [r0, #-120]	; 0xffffff88
 801d1ee:	eee5 7a87 	vfma.f32	s15, s11, s14
 801d1f2:	ed54 3a1d 	vldr	s7, [r4, #-116]	; 0xffffff8c
 801d1f6:	ed10 4a1d 	vldr	s8, [r0, #-116]	; 0xffffff8c
 801d1fa:	ed50 4a1c 	vldr	s9, [r0, #-112]	; 0xffffff90
 801d1fe:	ed14 5a1c 	vldr	s10, [r4, #-112]	; 0xffffff90
 801d202:	ed50 5a1b 	vldr	s11, [r0, #-108]	; 0xffffff94
 801d206:	ed14 7a1b 	vldr	s14, [r4, #-108]	; 0xffffff94
 801d20a:	eee2 7a83 	vfma.f32	s15, s5, s6
 801d20e:	ed54 ba1a 	vldr	s23, [r4, #-104]	; 0xffffff98
 801d212:	ed10 ba1a 	vldr	s22, [r0, #-104]	; 0xffffff98
 801d216:	ed54 aa19 	vldr	s21, [r4, #-100]	; 0xffffff9c
 801d21a:	ed10 aa19 	vldr	s20, [r0, #-100]	; 0xffffff9c
 801d21e:	ed50 9a18 	vldr	s19, [r0, #-96]	; 0xffffffa0
 801d222:	ed14 9a18 	vldr	s18, [r4, #-96]	; 0xffffffa0
 801d226:	eee3 7a84 	vfma.f32	s15, s7, s8
 801d22a:	ed50 8a17 	vldr	s17, [r0, #-92]	; 0xffffffa4
 801d22e:	ed14 0a17 	vldr	s0, [r4, #-92]	; 0xffffffa4
 801d232:	ed50 0a16 	vldr	s1, [r0, #-88]	; 0xffffffa8
 801d236:	ed14 1a16 	vldr	s2, [r4, #-88]	; 0xffffffa8
 801d23a:	ed50 1a15 	vldr	s3, [r0, #-84]	; 0xffffffac
 801d23e:	ed14 2a15 	vldr	s4, [r4, #-84]	; 0xffffffac
 801d242:	eee4 7a85 	vfma.f32	s15, s9, s10
 801d246:	ed50 2a14 	vldr	s5, [r0, #-80]	; 0xffffffb0
 801d24a:	ed14 3a14 	vldr	s6, [r4, #-80]	; 0xffffffb0
 801d24e:	ed54 3a13 	vldr	s7, [r4, #-76]	; 0xffffffb4
 801d252:	ed10 4a13 	vldr	s8, [r0, #-76]	; 0xffffffb4
 801d256:	ed50 4a12 	vldr	s9, [r0, #-72]	; 0xffffffb8
 801d25a:	ed14 5a12 	vldr	s10, [r4, #-72]	; 0xffffffb8
 801d25e:	eee5 7a87 	vfma.f32	s15, s11, s14
 801d262:	ed54 5a11 	vldr	s11, [r4, #-68]	; 0xffffffbc
 801d266:	ed10 7a11 	vldr	s14, [r0, #-68]	; 0xffffffbc
 801d26a:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 801d26e:	eeea 7a8a 	vfma.f32	s15, s21, s20
 801d272:	eee9 7a89 	vfma.f32	s15, s19, s18
 801d276:	eee8 7a80 	vfma.f32	s15, s17, s0
 801d27a:	eee0 7a81 	vfma.f32	s15, s1, s2
 801d27e:	eee1 7a82 	vfma.f32	s15, s3, s4
 801d282:	eee2 7a83 	vfma.f32	s15, s5, s6
 801d286:	eee3 7a84 	vfma.f32	s15, s7, s8
 801d28a:	eee4 7a85 	vfma.f32	s15, s9, s10
 801d28e:	eee5 7a87 	vfma.f32	s15, s11, s14
 801d292:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801d296:	db97      	blt.n	801d1c8 <forward_conv2d_nl_pool+0x1004>
 801d298:	4451      	add	r1, sl
 801d29a:	4452      	add	r2, sl
 801d29c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d29e:	4283      	cmp	r3, r0
 801d2a0:	dd0f      	ble.n	801d2c2 <forward_conv2d_nl_pool+0x10fe>
 801d2a2:	4604      	mov	r4, r0
 801d2a4:	468c      	mov	ip, r1
 801d2a6:	4616      	mov	r6, r2
 801d2a8:	3401      	adds	r4, #1
 801d2aa:	ecb6 7a01 	vldmia	r6!, {s14}
 801d2ae:	ecfc 7a01 	vldmia	ip!, {s15}
 801d2b2:	42a3      	cmp	r3, r4
 801d2b4:	eee7 6a27 	vfma.f32	s13, s14, s15
 801d2b8:	d1f6      	bne.n	801d2a8 <forward_conv2d_nl_pool+0x10e4>
 801d2ba:	1a18      	subs	r0, r3, r0
 801d2bc:	0080      	lsls	r0, r0, #2
 801d2be:	4402      	add	r2, r0
 801d2c0:	4401      	add	r1, r0
 801d2c2:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801d2c4:	f10e 0e01 	add.w	lr, lr, #1
 801d2c8:	4449      	add	r1, r9
 801d2ca:	4402      	add	r2, r0
 801d2cc:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 801d2d0:	4570      	cmp	r0, lr
 801d2d2:	f47f af71 	bne.w	801d1b8 <forward_conv2d_nl_pool+0xff4>
 801d2d6:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 801d2da:	f10b 0b01 	add.w	fp, fp, #1
 801d2de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801d2e0:	4608      	mov	r0, r1
 801d2e2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801d2e6:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 801d2ea:	4410      	add	r0, r2
 801d2ec:	edc3 6a00 	vstr	s13, [r3]
 801d2f0:	440b      	add	r3, r1
 801d2f2:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 801d2f6:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 801d2fa:	eba8 0802 	sub.w	r8, r8, r2
 801d2fe:	4608      	mov	r0, r1
 801d300:	67bb      	str	r3, [r7, #120]	; 0x78
 801d302:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 801d306:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d308:	4418      	add	r0, r3
 801d30a:	1acb      	subs	r3, r1, r3
 801d30c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801d310:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801d314:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 801d318:	455b      	cmp	r3, fp
 801d31a:	f47f af17 	bne.w	801d14c <forward_conv2d_nl_pool+0xf88>
 801d31e:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801d322:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 801d326:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801d32a:	440a      	add	r2, r1
 801d32c:	3301      	adds	r3, #1
 801d32e:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 801d332:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801d336:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801d33a:	3204      	adds	r2, #4
 801d33c:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 801d340:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 801d344:	429a      	cmp	r2, r3
 801d346:	f47f aed2 	bne.w	801d0ee <forward_conv2d_nl_pool+0xf2a>
 801d34a:	f8d7 b01c 	ldr.w	fp, [r7, #28]
 801d34e:	f8d7 a014 	ldr.w	sl, [r7, #20]
 801d352:	f8d7 d070 	ldr.w	sp, [r7, #112]	; 0x70
 801d356:	f7ff ba66 	b.w	801c826 <forward_conv2d_nl_pool+0x662>
 801d35a:	2000      	movs	r0, #0
 801d35c:	e79f      	b.n	801d29e <forward_conv2d_nl_pool+0x10da>
 801d35e:	eef0 6a46 	vmov.f32	s13, s12
 801d362:	e7b8      	b.n	801d2d6 <forward_conv2d_nl_pool+0x1112>
 801d364:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801d368:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801d36c:	eba8 0303 	sub.w	r3, r8, r3
 801d370:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 801d374:	e6f3      	b.n	801d15e <forward_conv2d_nl_pool+0xf9a>
 801d376:	eeb0 6a48 	vmov.f32	s12, s16
 801d37a:	e6cd      	b.n	801d118 <forward_conv2d_nl_pool+0xf54>
 801d37c:	b1a0      	cbz	r0, 801d3a8 <forward_conv2d_nl_pool+0x11e4>
 801d37e:	6881      	ldr	r1, [r0, #8]
 801d380:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 801d384:	2201      	movs	r2, #1
 801d386:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 801d38a:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 801d38e:	f7fe bfc2 	b.w	801c316 <forward_conv2d_nl_pool+0x152>
 801d392:	b190      	cbz	r0, 801d3ba <forward_conv2d_nl_pool+0x11f6>
 801d394:	6882      	ldr	r2, [r0, #8]
 801d396:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 801d39a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 801d39e:	2201      	movs	r2, #1
 801d3a0:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 801d3a4:	f7fe bfb7 	b.w	801c316 <forward_conv2d_nl_pool+0x152>
 801d3a8:	2201      	movs	r2, #1
 801d3aa:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 801d3ae:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 801d3b2:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 801d3b6:	f7fe bfae 	b.w	801c316 <forward_conv2d_nl_pool+0x152>
 801d3ba:	2201      	movs	r2, #1
 801d3bc:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 801d3c0:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 801d3c4:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 801d3c8:	f7fe bfa5 	b.w	801c316 <forward_conv2d_nl_pool+0x152>
 801d3cc:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 801d3d0:	f7fe bf84 	b.w	801c2dc <forward_conv2d_nl_pool+0x118>
 801d3d4:	3118      	adds	r1, #24
 801d3d6:	d010      	beq.n	801d3fa <forward_conv2d_nl_pool+0x1236>
 801d3d8:	4662      	mov	r2, ip
 801d3da:	4664      	mov	r4, ip
 801d3dc:	4661      	mov	r1, ip
 801d3de:	f7fe bf23 	b.w	801c228 <forward_conv2d_nl_pool+0x64>
 801d3e2:	4691      	mov	r9, r2
 801d3e4:	f7fe bf08 	b.w	801c1f8 <forward_conv2d_nl_pool+0x34>
 801d3e8:	4613      	mov	r3, r2
 801d3ea:	685b      	ldr	r3, [r3, #4]
 801d3ec:	deff      	udf	#255	; 0xff
 801d3ee:	2200      	movs	r2, #0
 801d3f0:	f7fe bf18 	b.w	801c224 <forward_conv2d_nl_pool+0x60>
 801d3f4:	2300      	movs	r3, #0
 801d3f6:	685b      	ldr	r3, [r3, #4]
 801d3f8:	deff      	udf	#255	; 0xff
 801d3fa:	68cb      	ldr	r3, [r1, #12]
 801d3fc:	deff      	udf	#255	; 0xff
 801d3fe:	bf00      	nop

0801d400 <nl_func_relu_array_f32>:
 801d400:	b430      	push	{r4, r5}
 801d402:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 801d406:	698d      	ldr	r5, [r1, #24]
 801d408:	6981      	ldr	r1, [r0, #24]
 801d40a:	4414      	add	r4, r2
 801d40c:	68ab      	ldr	r3, [r5, #8]
 801d40e:	6889      	ldr	r1, [r1, #8]
 801d410:	00a4      	lsls	r4, r4, #2
 801d412:	191b      	adds	r3, r3, r4
 801d414:	d210      	bcs.n	801d438 <nl_func_relu_array_f32+0x38>
 801d416:	3404      	adds	r4, #4
 801d418:	3304      	adds	r3, #4
 801d41a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 801d43c <nl_func_relu_array_f32+0x3c>
 801d41e:	4421      	add	r1, r4
 801d420:	ed53 7a01 	vldr	s15, [r3, #-4]
 801d424:	f1a3 0208 	sub.w	r2, r3, #8
 801d428:	3b04      	subs	r3, #4
 801d42a:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 801d42e:	ed61 7a01 	vstmdb	r1!, {s15}
 801d432:	68a8      	ldr	r0, [r5, #8]
 801d434:	4290      	cmp	r0, r2
 801d436:	d9f3      	bls.n	801d420 <nl_func_relu_array_f32+0x20>
 801d438:	bc30      	pop	{r4, r5}
 801d43a:	4770      	bx	lr
 801d43c:	00000000 	.word	0x00000000

0801d440 <nl_func_sm_channel_f32>:
 801d440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d444:	ed2d 8b02 	vpush	{d8}
 801d448:	6989      	ldr	r1, [r1, #24]
 801d44a:	2a01      	cmp	r2, #1
 801d44c:	6983      	ldr	r3, [r0, #24]
 801d44e:	688c      	ldr	r4, [r1, #8]
 801d450:	689f      	ldr	r7, [r3, #8]
 801d452:	ed94 8a00 	vldr	s16, [r4]
 801d456:	d932      	bls.n	801d4be <nl_func_sm_channel_f32+0x7e>
 801d458:	ea4f 0982 	mov.w	r9, r2, lsl #2
 801d45c:	1d23      	adds	r3, r4, #4
 801d45e:	eb04 0209 	add.w	r2, r4, r9
 801d462:	ecf3 7a01 	vldmia	r3!, {s15}
 801d466:	429a      	cmp	r2, r3
 801d468:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
 801d46c:	d1f9      	bne.n	801d462 <nl_func_sm_channel_f32+0x22>
 801d46e:	463d      	mov	r5, r7
 801d470:	463e      	mov	r6, r7
 801d472:	eddf 8a15 	vldr	s17, [pc, #84]	; 801d4c8 <nl_func_sm_channel_f32+0x88>
 801d476:	eb04 0809 	add.w	r8, r4, r9
 801d47a:	ecb4 0a01 	vldmia	r4!, {s0}
 801d47e:	ee30 0a48 	vsub.f32	s0, s0, s16
 801d482:	f002 faef 	bl	801fa64 <expf>
 801d486:	45a0      	cmp	r8, r4
 801d488:	eca6 0a01 	vstmia	r6!, {s0}
 801d48c:	ee78 8a80 	vadd.f32	s17, s17, s0
 801d490:	d1f3      	bne.n	801d47a <nl_func_sm_channel_f32+0x3a>
 801d492:	eef5 8a40 	vcmp.f32	s17, #0.0
 801d496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d49a:	d00c      	beq.n	801d4b6 <nl_func_sm_channel_f32+0x76>
 801d49c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801d4a0:	444f      	add	r7, r9
 801d4a2:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 801d4a6:	edd5 7a00 	vldr	s15, [r5]
 801d4aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 801d4ae:	ece5 7a01 	vstmia	r5!, {s15}
 801d4b2:	42af      	cmp	r7, r5
 801d4b4:	d1f7      	bne.n	801d4a6 <nl_func_sm_channel_f32+0x66>
 801d4b6:	ecbd 8b02 	vpop	{d8}
 801d4ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d4be:	2a00      	cmp	r2, #0
 801d4c0:	d0f9      	beq.n	801d4b6 <nl_func_sm_channel_f32+0x76>
 801d4c2:	ea4f 0982 	mov.w	r9, r2, lsl #2
 801d4c6:	e7d2      	b.n	801d46e <nl_func_sm_channel_f32+0x2e>
 801d4c8:	00000000 	.word	0x00000000

0801d4cc <pool_func_ap_array_f32>:
 801d4cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d4d0:	b09b      	sub	sp, #108	; 0x6c
 801d4d2:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801d4d4:	9305      	str	r3, [sp, #20]
 801d4d6:	6883      	ldr	r3, [r0, #8]
 801d4d8:	9102      	str	r1, [sp, #8]
 801d4da:	9308      	str	r3, [sp, #32]
 801d4dc:	68a3      	ldr	r3, [r4, #8]
 801d4de:	f8bd 1098 	ldrh.w	r1, [sp, #152]	; 0x98
 801d4e2:	9306      	str	r3, [sp, #24]
 801d4e4:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 801d4e8:	9210      	str	r2, [sp, #64]	; 0x40
 801d4ea:	930b      	str	r3, [sp, #44]	; 0x2c
 801d4ec:	f8bd 3094 	ldrh.w	r3, [sp, #148]	; 0x94
 801d4f0:	f8bd 209c 	ldrh.w	r2, [sp, #156]	; 0x9c
 801d4f4:	9304      	str	r3, [sp, #16]
 801d4f6:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	; 0xa0
 801d4fa:	ea52 0401 	orrs.w	r4, r2, r1
 801d4fe:	930f      	str	r3, [sp, #60]	; 0x3c
 801d500:	f8bd 30a4 	ldrh.w	r3, [sp, #164]	; 0xa4
 801d504:	9316      	str	r3, [sp, #88]	; 0x58
 801d506:	f8bd 30a8 	ldrh.w	r3, [sp, #168]	; 0xa8
 801d50a:	930d      	str	r3, [sp, #52]	; 0x34
 801d50c:	f8bd 30ac 	ldrh.w	r3, [sp, #172]	; 0xac
 801d510:	9313      	str	r3, [sp, #76]	; 0x4c
 801d512:	f040 80b8 	bne.w	801d686 <pool_func_ap_array_f32+0x1ba>
 801d516:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d518:	9d02      	ldr	r5, [sp, #8]
 801d51a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801d51c:	1b58      	subs	r0, r3, r5
 801d51e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801d520:	1e73      	subs	r3, r6, #1
 801d522:	3801      	subs	r0, #1
 801d524:	fb13 0307 	smlabb	r3, r3, r7, r0
 801d528:	0418      	lsls	r0, r3, #16
 801d52a:	f140 80ac 	bpl.w	801d686 <pool_func_ap_array_f32+0x1ba>
 801d52e:	9b04      	ldr	r3, [sp, #16]
 801d530:	9810      	ldr	r0, [sp, #64]	; 0x40
 801d532:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801d534:	1a18      	subs	r0, r3, r0
 801d536:	1e7b      	subs	r3, r7, #1
 801d538:	3801      	subs	r0, #1
 801d53a:	469c      	mov	ip, r3
 801d53c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801d53e:	fb1c 0303 	smlabb	r3, ip, r3, r0
 801d542:	041b      	lsls	r3, r3, #16
 801d544:	f140 809f 	bpl.w	801d686 <pool_func_ap_array_f32+0x1ba>
 801d548:	2f00      	cmp	r7, #0
 801d54a:	f000 8096 	beq.w	801d67a <pool_func_ap_array_f32+0x1ae>
 801d54e:	2e00      	cmp	r6, #0
 801d550:	f000 8093 	beq.w	801d67a <pool_func_ap_array_f32+0x1ae>
 801d554:	9b05      	ldr	r3, [sp, #20]
 801d556:	2b00      	cmp	r3, #0
 801d558:	f000 808f 	beq.w	801d67a <pool_func_ap_array_f32+0x1ae>
 801d55c:	fb05 f203 	mul.w	r2, r5, r3
 801d560:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 801d564:	ed9f 6aab 	vldr	s12, [pc, #684]	; 801d814 <pool_func_ap_array_f32+0x348>
 801d568:	4623      	mov	r3, r4
 801d56a:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 801d56e:	9407      	str	r4, [sp, #28]
 801d570:	940e      	str	r4, [sp, #56]	; 0x38
 801d572:	990d      	ldr	r1, [sp, #52]	; 0x34
 801d574:	2200      	movs	r2, #0
 801d576:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 801d57a:	fb01 f303 	mul.w	r3, r1, r3
 801d57e:	f9bd 7010 	ldrsh.w	r7, [sp, #16]
 801d582:	9209      	str	r2, [sp, #36]	; 0x24
 801d584:	9310      	str	r3, [sp, #64]	; 0x40
 801d586:	9b02      	ldr	r3, [sp, #8]
 801d588:	920c      	str	r2, [sp, #48]	; 0x30
 801d58a:	fb03 f309 	mul.w	r3, r3, r9
 801d58e:	9311      	str	r3, [sp, #68]	; 0x44
 801d590:	4613      	mov	r3, r2
 801d592:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d594:	920a      	str	r2, [sp, #40]	; 0x28
 801d596:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d598:	f04f 0e00 	mov.w	lr, #0
 801d59c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801d59e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d5a0:	b206      	sxth	r6, r0
 801d5a2:	f101 38ff 	add.w	r8, r1, #4294967295
 801d5a6:	46f4      	mov	ip, lr
 801d5a8:	189a      	adds	r2, r3, r2
 801d5aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d5ac:	eba8 0800 	sub.w	r8, r8, r0
 801d5b0:	9805      	ldr	r0, [sp, #20]
 801d5b2:	18f3      	adds	r3, r6, r3
 801d5b4:	b209      	sxth	r1, r1
 801d5b6:	fb00 f202 	mul.w	r2, r0, r2
 801d5ba:	fa1f f888 	uxth.w	r8, r8
 801d5be:	fb00 f303 	mul.w	r3, r0, r3
 801d5c2:	9201      	str	r2, [sp, #4]
 801d5c4:	9303      	str	r3, [sp, #12]
 801d5c6:	454f      	cmp	r7, r9
 801d5c8:	dd5a      	ble.n	801d680 <pool_func_ap_array_f32+0x1b4>
 801d5ca:	9b03      	ldr	r3, [sp, #12]
 801d5cc:	4648      	mov	r0, r9
 801d5ce:	2400      	movs	r4, #0
 801d5d0:	eddf 7a91 	vldr	s15, [pc, #580]	; 801d818 <pool_func_ap_array_f32+0x34c>
 801d5d4:	eb0c 0503 	add.w	r5, ip, r3
 801d5d8:	9b08      	ldr	r3, [sp, #32]
 801d5da:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 801d5de:	42b1      	cmp	r1, r6
 801d5e0:	dd0c      	ble.n	801d5fc <pool_func_ap_array_f32+0x130>
 801d5e2:	462a      	mov	r2, r5
 801d5e4:	4633      	mov	r3, r6
 801d5e6:	3301      	adds	r3, #1
 801d5e8:	ed92 7a00 	vldr	s14, [r2]
 801d5ec:	4452      	add	r2, sl
 801d5ee:	b21b      	sxth	r3, r3
 801d5f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d5f4:	4299      	cmp	r1, r3
 801d5f6:	d1f6      	bne.n	801d5e6 <pool_func_ap_array_f32+0x11a>
 801d5f8:	3401      	adds	r4, #1
 801d5fa:	4444      	add	r4, r8
 801d5fc:	3001      	adds	r0, #1
 801d5fe:	445d      	add	r5, fp
 801d600:	b200      	sxth	r0, r0
 801d602:	4287      	cmp	r7, r0
 801d604:	d1eb      	bne.n	801d5de <pool_func_ap_array_f32+0x112>
 801d606:	ee07 4a10 	vmov	s14, r4
 801d60a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d60e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801d612:	9b01      	ldr	r3, [sp, #4]
 801d614:	f10e 0e01 	add.w	lr, lr, #1
 801d618:	9a06      	ldr	r2, [sp, #24]
 801d61a:	4463      	add	r3, ip
 801d61c:	fa0f fe8e 	sxth.w	lr, lr
 801d620:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d624:	46f4      	mov	ip, lr
 801d626:	edc3 6a00 	vstr	s13, [r3]
 801d62a:	9b05      	ldr	r3, [sp, #20]
 801d62c:	459e      	cmp	lr, r3
 801d62e:	dbca      	blt.n	801d5c6 <pool_func_ap_array_f32+0xfa>
 801d630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d632:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801d634:	461a      	mov	r2, r3
 801d636:	990c      	ldr	r1, [sp, #48]	; 0x30
 801d638:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d63a:	4402      	add	r2, r0
 801d63c:	3101      	adds	r1, #1
 801d63e:	4403      	add	r3, r0
 801d640:	b292      	uxth	r2, r2
 801d642:	b209      	sxth	r1, r1
 801d644:	920a      	str	r2, [sp, #40]	; 0x28
 801d646:	b29b      	uxth	r3, r3
 801d648:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d64a:	9309      	str	r3, [sp, #36]	; 0x24
 801d64c:	460b      	mov	r3, r1
 801d64e:	428a      	cmp	r2, r1
 801d650:	910c      	str	r1, [sp, #48]	; 0x30
 801d652:	dca0      	bgt.n	801d596 <pool_func_ap_array_f32+0xca>
 801d654:	9b04      	ldr	r3, [sp, #16]
 801d656:	9816      	ldr	r0, [sp, #88]	; 0x58
 801d658:	461a      	mov	r2, r3
 801d65a:	990e      	ldr	r1, [sp, #56]	; 0x38
 801d65c:	9b07      	ldr	r3, [sp, #28]
 801d65e:	4402      	add	r2, r0
 801d660:	3101      	adds	r1, #1
 801d662:	4403      	add	r3, r0
 801d664:	b292      	uxth	r2, r2
 801d666:	b209      	sxth	r1, r1
 801d668:	9204      	str	r2, [sp, #16]
 801d66a:	b29b      	uxth	r3, r3
 801d66c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d66e:	9307      	str	r3, [sp, #28]
 801d670:	460b      	mov	r3, r1
 801d672:	428a      	cmp	r2, r1
 801d674:	910e      	str	r1, [sp, #56]	; 0x38
 801d676:	f73f af7c 	bgt.w	801d572 <pool_func_ap_array_f32+0xa6>
 801d67a:	b01b      	add	sp, #108	; 0x6c
 801d67c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d680:	eef0 6a46 	vmov.f32	s13, s12
 801d684:	e7c5      	b.n	801d612 <pool_func_ap_array_f32+0x146>
 801d686:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801d688:	2b00      	cmp	r3, #0
 801d68a:	d0f6      	beq.n	801d67a <pool_func_ap_array_f32+0x1ae>
 801d68c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d68e:	2b00      	cmp	r3, #0
 801d690:	d0f3      	beq.n	801d67a <pool_func_ap_array_f32+0x1ae>
 801d692:	9d05      	ldr	r5, [sp, #20]
 801d694:	2d00      	cmp	r5, #0
 801d696:	d0f0      	beq.n	801d67a <pool_func_ap_array_f32+0x1ae>
 801d698:	9b04      	ldr	r3, [sp, #16]
 801d69a:	ea4f 0b85 	mov.w	fp, r5, lsl #2
 801d69e:	ed9f 6a5d 	vldr	s12, [pc, #372]	; 801d814 <pool_func_ap_array_f32+0x348>
 801d6a2:	1a9c      	subs	r4, r3, r2
 801d6a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d6a6:	4252      	negs	r2, r2
 801d6a8:	1a58      	subs	r0, r3, r1
 801d6aa:	9b02      	ldr	r3, [sp, #8]
 801d6ac:	b292      	uxth	r2, r2
 801d6ae:	4249      	negs	r1, r1
 801d6b0:	461e      	mov	r6, r3
 801d6b2:	462b      	mov	r3, r5
 801d6b4:	b2a4      	uxth	r4, r4
 801d6b6:	9214      	str	r2, [sp, #80]	; 0x50
 801d6b8:	fb06 f303 	mul.w	r3, r6, r3
 801d6bc:	2600      	movs	r6, #0
 801d6be:	b280      	uxth	r0, r0
 801d6c0:	9415      	str	r4, [sp, #84]	; 0x54
 801d6c2:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 801d6c6:	4632      	mov	r2, r6
 801d6c8:	b289      	uxth	r1, r1
 801d6ca:	9617      	str	r6, [sp, #92]	; 0x5c
 801d6cc:	46e1      	mov	r9, ip
 801d6ce:	9018      	str	r0, [sp, #96]	; 0x60
 801d6d0:	9119      	str	r1, [sp, #100]	; 0x64
 801d6d2:	9915      	ldr	r1, [sp, #84]	; 0x54
 801d6d4:	2000      	movs	r0, #0
 801d6d6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801d6d8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801d6da:	1e4b      	subs	r3, r1, #1
 801d6dc:	fb05 f202 	mul.w	r2, r5, r2
 801d6e0:	b209      	sxth	r1, r1
 801d6e2:	fa0f fa84 	sxth.w	sl, r4
 801d6e6:	1b1b      	subs	r3, r3, r4
 801d6e8:	9211      	str	r2, [sp, #68]	; 0x44
 801d6ea:	46a6      	mov	lr, r4
 801d6ec:	9a02      	ldr	r2, [sp, #8]
 801d6ee:	b29b      	uxth	r3, r3
 801d6f0:	9109      	str	r1, [sp, #36]	; 0x24
 801d6f2:	fb02 f20a 	mul.w	r2, r2, sl
 801d6f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 801d6f8:	f103 0c01 	add.w	ip, r3, #1
 801d6fc:	900e      	str	r0, [sp, #56]	; 0x38
 801d6fe:	9212      	str	r2, [sp, #72]	; 0x48
 801d700:	4602      	mov	r2, r0
 801d702:	910c      	str	r1, [sp, #48]	; 0x30
 801d704:	9919      	ldr	r1, [sp, #100]	; 0x64
 801d706:	910b      	str	r1, [sp, #44]	; 0x2c
 801d708:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d70a:	2100      	movs	r1, #0
 801d70c:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	; 0x2c
 801d710:	441a      	add	r2, r3
 801d712:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801d714:	9805      	ldr	r0, [sp, #20]
 801d716:	18fb      	adds	r3, r7, r3
 801d718:	f9bd 5030 	ldrsh.w	r5, [sp, #48]	; 0x30
 801d71c:	fb00 f202 	mul.w	r2, r0, r2
 801d720:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 801d724:	fb00 f303 	mul.w	r3, r0, r3
 801d728:	9104      	str	r1, [sp, #16]
 801d72a:	9207      	str	r2, [sp, #28]
 801d72c:	9103      	str	r1, [sp, #12]
 801d72e:	930a      	str	r3, [sp, #40]	; 0x28
 801d730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d732:	4553      	cmp	r3, sl
 801d734:	dd6b      	ble.n	801d80e <pool_func_ap_array_f32+0x342>
 801d736:	9b03      	ldr	r3, [sp, #12]
 801d738:	2400      	movs	r4, #0
 801d73a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d73c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 801d818 <pool_func_ap_array_f32+0x34c>
 801d740:	189e      	adds	r6, r3, r2
 801d742:	9b08      	ldr	r3, [sp, #32]
 801d744:	9401      	str	r4, [sp, #4]
 801d746:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 801d74a:	42bd      	cmp	r5, r7
 801d74c:	dd1c      	ble.n	801d788 <pool_func_ap_array_f32+0x2bc>
 801d74e:	eb0e 0204 	add.w	r2, lr, r4
 801d752:	eb0a 0304 	add.w	r3, sl, r4
 801d756:	43d2      	mvns	r2, r2
 801d758:	4598      	cmp	r8, r3
 801d75a:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 801d75e:	dd13      	ble.n	801d788 <pool_func_ap_array_f32+0x2bc>
 801d760:	4631      	mov	r1, r6
 801d762:	463b      	mov	r3, r7
 801d764:	0418      	lsls	r0, r3, #16
 801d766:	d40a      	bmi.n	801d77e <pool_func_ap_array_f32+0x2b2>
 801d768:	b14a      	cbz	r2, 801d77e <pool_func_ap_array_f32+0x2b2>
 801d76a:	9802      	ldr	r0, [sp, #8]
 801d76c:	4298      	cmp	r0, r3
 801d76e:	dd06      	ble.n	801d77e <pool_func_ap_array_f32+0x2b2>
 801d770:	edd1 7a00 	vldr	s15, [r1]
 801d774:	9801      	ldr	r0, [sp, #4]
 801d776:	ee37 7a27 	vadd.f32	s14, s14, s15
 801d77a:	3001      	adds	r0, #1
 801d77c:	9001      	str	r0, [sp, #4]
 801d77e:	3301      	adds	r3, #1
 801d780:	4459      	add	r1, fp
 801d782:	b218      	sxth	r0, r3
 801d784:	4285      	cmp	r5, r0
 801d786:	dced      	bgt.n	801d764 <pool_func_ap_array_f32+0x298>
 801d788:	3401      	adds	r4, #1
 801d78a:	444e      	add	r6, r9
 801d78c:	45a4      	cmp	ip, r4
 801d78e:	d1dc      	bne.n	801d74a <pool_func_ap_array_f32+0x27e>
 801d790:	eddd 7a01 	vldr	s15, [sp, #4]
 801d794:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d798:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801d79c:	9b03      	ldr	r3, [sp, #12]
 801d79e:	9a07      	ldr	r2, [sp, #28]
 801d7a0:	9906      	ldr	r1, [sp, #24]
 801d7a2:	4413      	add	r3, r2
 801d7a4:	9a04      	ldr	r2, [sp, #16]
 801d7a6:	3201      	adds	r2, #1
 801d7a8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801d7ac:	b212      	sxth	r2, r2
 801d7ae:	edc3 6a00 	vstr	s13, [r3]
 801d7b2:	9204      	str	r2, [sp, #16]
 801d7b4:	4613      	mov	r3, r2
 801d7b6:	9203      	str	r2, [sp, #12]
 801d7b8:	9a05      	ldr	r2, [sp, #20]
 801d7ba:	4293      	cmp	r3, r2
 801d7bc:	dbb8      	blt.n	801d730 <pool_func_ap_array_f32+0x264>
 801d7be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d7c0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801d7c2:	461a      	mov	r2, r3
 801d7c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d7c6:	990e      	ldr	r1, [sp, #56]	; 0x38
 801d7c8:	4403      	add	r3, r0
 801d7ca:	4402      	add	r2, r0
 801d7cc:	3101      	adds	r1, #1
 801d7ce:	b29b      	uxth	r3, r3
 801d7d0:	b209      	sxth	r1, r1
 801d7d2:	930b      	str	r3, [sp, #44]	; 0x2c
 801d7d4:	b292      	uxth	r2, r2
 801d7d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d7d8:	920c      	str	r2, [sp, #48]	; 0x30
 801d7da:	460a      	mov	r2, r1
 801d7dc:	428b      	cmp	r3, r1
 801d7de:	910e      	str	r1, [sp, #56]	; 0x38
 801d7e0:	dc92      	bgt.n	801d708 <pool_func_ap_array_f32+0x23c>
 801d7e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d7e4:	9816      	ldr	r0, [sp, #88]	; 0x58
 801d7e6:	461a      	mov	r2, r3
 801d7e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d7ea:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801d7ec:	4403      	add	r3, r0
 801d7ee:	4402      	add	r2, r0
 801d7f0:	3101      	adds	r1, #1
 801d7f2:	b29b      	uxth	r3, r3
 801d7f4:	b209      	sxth	r1, r1
 801d7f6:	9314      	str	r3, [sp, #80]	; 0x50
 801d7f8:	b292      	uxth	r2, r2
 801d7fa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801d7fc:	9215      	str	r2, [sp, #84]	; 0x54
 801d7fe:	460a      	mov	r2, r1
 801d800:	428b      	cmp	r3, r1
 801d802:	9117      	str	r1, [sp, #92]	; 0x5c
 801d804:	f73f af65 	bgt.w	801d6d2 <pool_func_ap_array_f32+0x206>
 801d808:	b01b      	add	sp, #108	; 0x6c
 801d80a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d80e:	eef0 6a46 	vmov.f32	s13, s12
 801d812:	e7c3      	b.n	801d79c <pool_func_ap_array_f32+0x2d0>
 801d814:	7fc00000 	.word	0x7fc00000
 801d818:	00000000 	.word	0x00000000

0801d81c <ai_check_custom_types>:
 801d81c:	4b13      	ldr	r3, [pc, #76]	; (801d86c <ai_check_custom_types+0x50>)
 801d81e:	b082      	sub	sp, #8
 801d820:	681b      	ldr	r3, [r3, #0]
 801d822:	9301      	str	r3, [sp, #4]
 801d824:	b118      	cbz	r0, 801d82e <ai_check_custom_types+0x12>
 801d826:	7803      	ldrb	r3, [r0, #0]
 801d828:	2b03      	cmp	r3, #3
 801d82a:	d002      	beq.n	801d832 <ai_check_custom_types+0x16>
 801d82c:	2000      	movs	r0, #0
 801d82e:	b002      	add	sp, #8
 801d830:	4770      	bx	lr
 801d832:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801d836:	4293      	cmp	r3, r2
 801d838:	d004      	beq.n	801d844 <ai_check_custom_types+0x28>
 801d83a:	2001      	movs	r0, #1
 801d83c:	f080 0001 	eor.w	r0, r0, #1
 801d840:	b002      	add	sp, #8
 801d842:	4770      	bx	lr
 801d844:	7842      	ldrb	r2, [r0, #1]
 801d846:	3001      	adds	r0, #1
 801d848:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801d84c:	429a      	cmp	r2, r3
 801d84e:	d1f4      	bne.n	801d83a <ai_check_custom_types+0x1e>
 801d850:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 801d854:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801d858:	429a      	cmp	r2, r3
 801d85a:	d1ee      	bne.n	801d83a <ai_check_custom_types+0x1e>
 801d85c:	7842      	ldrb	r2, [r0, #1]
 801d85e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801d862:	429a      	cmp	r2, r3
 801d864:	d1e9      	bne.n	801d83a <ai_check_custom_types+0x1e>
 801d866:	2000      	movs	r0, #0
 801d868:	e7e8      	b.n	801d83c <ai_check_custom_types+0x20>
 801d86a:	bf00      	nop
 801d86c:	08020000 	.word	0x08020000

0801d870 <ai_layers_init_all>:
 801d870:	6d02      	ldr	r2, [r0, #80]	; 0x50
 801d872:	b16a      	cbz	r2, 801d890 <ai_layers_init_all+0x20>
 801d874:	6913      	ldr	r3, [r2, #16]
 801d876:	60d0      	str	r0, [r2, #12]
 801d878:	429a      	cmp	r2, r3
 801d87a:	f04f 0201 	mov.w	r2, #1
 801d87e:	d007      	beq.n	801d890 <ai_layers_init_all+0x20>
 801d880:	b133      	cbz	r3, 801d890 <ai_layers_init_all+0x20>
 801d882:	6919      	ldr	r1, [r3, #16]
 801d884:	3201      	adds	r2, #1
 801d886:	60d8      	str	r0, [r3, #12]
 801d888:	4299      	cmp	r1, r3
 801d88a:	bf18      	it	ne
 801d88c:	2900      	cmpne	r1, #0
 801d88e:	d101      	bne.n	801d894 <ai_layers_init_all+0x24>
 801d890:	4610      	mov	r0, r2
 801d892:	4770      	bx	lr
 801d894:	460b      	mov	r3, r1
 801d896:	e7f4      	b.n	801d882 <ai_layers_init_all+0x12>

0801d898 <ai_layers_post_init_all>:
 801d898:	b538      	push	{r3, r4, r5, lr}
 801d89a:	6d04      	ldr	r4, [r0, #80]	; 0x50
 801d89c:	b184      	cbz	r4, 801d8c0 <ai_layers_post_init_all+0x28>
 801d89e:	2500      	movs	r5, #0
 801d8a0:	6863      	ldr	r3, [r4, #4]
 801d8a2:	4620      	mov	r0, r4
 801d8a4:	07db      	lsls	r3, r3, #31
 801d8a6:	d503      	bpl.n	801d8b0 <ai_layers_post_init_all+0x18>
 801d8a8:	6a23      	ldr	r3, [r4, #32]
 801d8aa:	b10b      	cbz	r3, 801d8b0 <ai_layers_post_init_all+0x18>
 801d8ac:	3501      	adds	r5, #1
 801d8ae:	4798      	blx	r3
 801d8b0:	6923      	ldr	r3, [r4, #16]
 801d8b2:	429c      	cmp	r4, r3
 801d8b4:	bf18      	it	ne
 801d8b6:	2b00      	cmpne	r3, #0
 801d8b8:	461c      	mov	r4, r3
 801d8ba:	d1f1      	bne.n	801d8a0 <ai_layers_post_init_all+0x8>
 801d8bc:	4628      	mov	r0, r5
 801d8be:	bd38      	pop	{r3, r4, r5, pc}
 801d8c0:	4625      	mov	r5, r4
 801d8c2:	e7fb      	b.n	801d8bc <ai_layers_post_init_all+0x24>

0801d8c4 <ai_layers_forward_all>:
 801d8c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d8c8:	6d87      	ldr	r7, [r0, #88]	; 0x58
 801d8ca:	4604      	mov	r4, r0
 801d8cc:	6d05      	ldr	r5, [r0, #80]	; 0x50
 801d8ce:	2f00      	cmp	r7, #0
 801d8d0:	d02b      	beq.n	801d92a <ai_layers_forward_all+0x66>
 801d8d2:	2d00      	cmp	r5, #0
 801d8d4:	d03d      	beq.n	801d952 <ai_layers_forward_all+0x8e>
 801d8d6:	2600      	movs	r6, #0
 801d8d8:	6545      	str	r5, [r0, #84]	; 0x54
 801d8da:	4629      	mov	r1, r5
 801d8dc:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 801d8de:	2001      	movs	r0, #1
 801d8e0:	46b0      	mov	r8, r6
 801d8e2:	47b8      	blx	r7
 801d8e4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 801d8e6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 801d8e8:	2002      	movs	r0, #2
 801d8ea:	47b8      	blx	r7
 801d8ec:	6d65      	ldr	r5, [r4, #84]	; 0x54
 801d8ee:	696b      	ldr	r3, [r5, #20]
 801d8f0:	4628      	mov	r0, r5
 801d8f2:	4798      	blx	r3
 801d8f4:	692b      	ldr	r3, [r5, #16]
 801d8f6:	2003      	movs	r0, #3
 801d8f8:	429d      	cmp	r5, r3
 801d8fa:	4619      	mov	r1, r3
 801d8fc:	d009      	beq.n	801d912 <ai_layers_forward_all+0x4e>
 801d8fe:	6563      	str	r3, [r4, #84]	; 0x54
 801d900:	3601      	adds	r6, #1
 801d902:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 801d904:	47b8      	blx	r7
 801d906:	6d61      	ldr	r1, [r4, #84]	; 0x54
 801d908:	2900      	cmp	r1, #0
 801d90a:	d1ec      	bne.n	801d8e6 <ai_layers_forward_all+0x22>
 801d90c:	4630      	mov	r0, r6
 801d90e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d912:	2100      	movs	r1, #0
 801d914:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
 801d918:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 801d91a:	3601      	adds	r6, #1
 801d91c:	47b8      	blx	r7
 801d91e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 801d920:	2900      	cmp	r1, #0
 801d922:	d1e0      	bne.n	801d8e6 <ai_layers_forward_all+0x22>
 801d924:	4630      	mov	r0, r6
 801d926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d92a:	b195      	cbz	r5, 801d952 <ai_layers_forward_all+0x8e>
 801d92c:	463e      	mov	r6, r7
 801d92e:	6545      	str	r5, [r0, #84]	; 0x54
 801d930:	696b      	ldr	r3, [r5, #20]
 801d932:	4628      	mov	r0, r5
 801d934:	4798      	blx	r3
 801d936:	692b      	ldr	r3, [r5, #16]
 801d938:	3601      	adds	r6, #1
 801d93a:	42ab      	cmp	r3, r5
 801d93c:	461d      	mov	r5, r3
 801d93e:	d003      	beq.n	801d948 <ai_layers_forward_all+0x84>
 801d940:	6563      	str	r3, [r4, #84]	; 0x54
 801d942:	2b00      	cmp	r3, #0
 801d944:	d1f4      	bne.n	801d930 <ai_layers_forward_all+0x6c>
 801d946:	e7e1      	b.n	801d90c <ai_layers_forward_all+0x48>
 801d948:	2300      	movs	r3, #0
 801d94a:	4630      	mov	r0, r6
 801d94c:	6563      	str	r3, [r4, #84]	; 0x54
 801d94e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d952:	462e      	mov	r6, r5
 801d954:	4630      	mov	r0, r6
 801d956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d95a:	bf00      	nop

0801d95c <ai_layers_destroy_all>:
 801d95c:	b538      	push	{r3, r4, r5, lr}
 801d95e:	6d04      	ldr	r4, [r0, #80]	; 0x50
 801d960:	b184      	cbz	r4, 801d984 <ai_layers_destroy_all+0x28>
 801d962:	2500      	movs	r5, #0
 801d964:	6863      	ldr	r3, [r4, #4]
 801d966:	4620      	mov	r0, r4
 801d968:	075b      	lsls	r3, r3, #29
 801d96a:	d503      	bpl.n	801d974 <ai_layers_destroy_all+0x18>
 801d96c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801d96e:	b10b      	cbz	r3, 801d974 <ai_layers_destroy_all+0x18>
 801d970:	3501      	adds	r5, #1
 801d972:	4798      	blx	r3
 801d974:	6923      	ldr	r3, [r4, #16]
 801d976:	429c      	cmp	r4, r3
 801d978:	bf18      	it	ne
 801d97a:	2b00      	cmpne	r3, #0
 801d97c:	461c      	mov	r4, r3
 801d97e:	d1f1      	bne.n	801d964 <ai_layers_destroy_all+0x8>
 801d980:	4628      	mov	r0, r5
 801d982:	bd38      	pop	{r3, r4, r5, pc}
 801d984:	4625      	mov	r5, r4
 801d986:	e7fb      	b.n	801d980 <ai_layers_destroy_all+0x24>

0801d988 <ai_array_to_buffer_fmt>:
 801d988:	f3c0 4343 	ubfx	r3, r0, #17, #4
 801d98c:	2b02      	cmp	r3, #2
 801d98e:	d02e      	beq.n	801d9ee <ai_array_to_buffer_fmt+0x66>
 801d990:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 801d994:	4a1a      	ldr	r2, [pc, #104]	; (801da00 <ai_array_to_buffer_fmt+0x78>)
 801d996:	4293      	cmp	r3, r2
 801d998:	d00e      	beq.n	801d9b8 <ai_array_to_buffer_fmt+0x30>
 801d99a:	dd11      	ble.n	801d9c0 <ai_array_to_buffer_fmt+0x38>
 801d99c:	4a19      	ldr	r2, [pc, #100]	; (801da04 <ai_array_to_buffer_fmt+0x7c>)
 801d99e:	4293      	cmp	r3, r2
 801d9a0:	d00a      	beq.n	801d9b8 <ai_array_to_buffer_fmt+0x30>
 801d9a2:	dd18      	ble.n	801d9d6 <ai_array_to_buffer_fmt+0x4e>
 801d9a4:	4a18      	ldr	r2, [pc, #96]	; (801da08 <ai_array_to_buffer_fmt+0x80>)
 801d9a6:	4293      	cmp	r3, r2
 801d9a8:	d006      	beq.n	801d9b8 <ai_array_to_buffer_fmt+0x30>
 801d9aa:	4a18      	ldr	r2, [pc, #96]	; (801da0c <ai_array_to_buffer_fmt+0x84>)
 801d9ac:	4293      	cmp	r3, r2
 801d9ae:	d003      	beq.n	801d9b8 <ai_array_to_buffer_fmt+0x30>
 801d9b0:	4a17      	ldr	r2, [pc, #92]	; (801da10 <ai_array_to_buffer_fmt+0x88>)
 801d9b2:	4293      	cmp	r3, r2
 801d9b4:	d000      	beq.n	801d9b8 <ai_array_to_buffer_fmt+0x30>
 801d9b6:	2340      	movs	r3, #64	; 0x40
 801d9b8:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 801d9bc:	4318      	orrs	r0, r3
 801d9be:	4770      	bx	lr
 801d9c0:	4a14      	ldr	r2, [pc, #80]	; (801da14 <ai_array_to_buffer_fmt+0x8c>)
 801d9c2:	4293      	cmp	r3, r2
 801d9c4:	d0f8      	beq.n	801d9b8 <ai_array_to_buffer_fmt+0x30>
 801d9c6:	dd06      	ble.n	801d9d6 <ai_array_to_buffer_fmt+0x4e>
 801d9c8:	4a13      	ldr	r2, [pc, #76]	; (801da18 <ai_array_to_buffer_fmt+0x90>)
 801d9ca:	4293      	cmp	r3, r2
 801d9cc:	d0f4      	beq.n	801d9b8 <ai_array_to_buffer_fmt+0x30>
 801d9ce:	320f      	adds	r2, #15
 801d9d0:	4293      	cmp	r3, r2
 801d9d2:	d0f1      	beq.n	801d9b8 <ai_array_to_buffer_fmt+0x30>
 801d9d4:	e7ef      	b.n	801d9b6 <ai_array_to_buffer_fmt+0x2e>
 801d9d6:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 801d9da:	4293      	cmp	r3, r2
 801d9dc:	d0ec      	beq.n	801d9b8 <ai_array_to_buffer_fmt+0x30>
 801d9de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801d9e2:	4293      	cmp	r3, r2
 801d9e4:	d1e7      	bne.n	801d9b6 <ai_array_to_buffer_fmt+0x2e>
 801d9e6:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 801d9ea:	4318      	orrs	r0, r3
 801d9ec:	4770      	bx	lr
 801d9ee:	4b0b      	ldr	r3, [pc, #44]	; (801da1c <ai_array_to_buffer_fmt+0x94>)
 801d9f0:	4003      	ands	r3, r0
 801d9f2:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 801d9f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801d9fa:	4318      	orrs	r0, r3
 801d9fc:	4770      	bx	lr
 801d9fe:	bf00      	nop
 801da00:	00060440 	.word	0x00060440
 801da04:	00840447 	.word	0x00840447
 801da08:	0084084f 	.word	0x0084084f
 801da0c:	01821040 	.word	0x01821040
 801da10:	00840840 	.word	0x00840840
 801da14:	00040447 	.word	0x00040447
 801da18:	00040840 	.word	0x00040840
 801da1c:	00803fff 	.word	0x00803fff

0801da20 <ai_array_get_byte_size>:
 801da20:	b1e1      	cbz	r1, 801da5c <ai_array_get_byte_size+0x3c>
 801da22:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 801da26:	f3c0 5241 	ubfx	r2, r0, #21, #2
 801da2a:	b410      	push	{r4}
 801da2c:	f3c0 3482 	ubfx	r4, r0, #14, #3
 801da30:	f3c0 4043 	ubfx	r0, r0, #17, #4
 801da34:	4423      	add	r3, r4
 801da36:	2804      	cmp	r0, #4
 801da38:	fb01 f103 	mul.w	r1, r1, r3
 801da3c:	f101 0107 	add.w	r1, r1, #7
 801da40:	f021 0107 	bic.w	r1, r1, #7
 801da44:	fa21 f102 	lsr.w	r1, r1, r2
 801da48:	d00a      	beq.n	801da60 <ai_array_get_byte_size+0x40>
 801da4a:	2808      	cmp	r0, #8
 801da4c:	d101      	bne.n	801da52 <ai_array_get_byte_size+0x32>
 801da4e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 801da52:	3107      	adds	r1, #7
 801da54:	f85d 4b04 	ldr.w	r4, [sp], #4
 801da58:	08c8      	lsrs	r0, r1, #3
 801da5a:	4770      	bx	lr
 801da5c:	4608      	mov	r0, r1
 801da5e:	4770      	bx	lr
 801da60:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 801da64:	f85d 4b04 	ldr.w	r4, [sp], #4
 801da68:	3107      	adds	r1, #7
 801da6a:	08c8      	lsrs	r0, r1, #3
 801da6c:	4770      	bx	lr
 801da6e:	bf00      	nop

0801da70 <__libc_init_array>:
 801da70:	b570      	push	{r4, r5, r6, lr}
 801da72:	4e0d      	ldr	r6, [pc, #52]	; (801daa8 <__libc_init_array+0x38>)
 801da74:	4c0d      	ldr	r4, [pc, #52]	; (801daac <__libc_init_array+0x3c>)
 801da76:	1ba4      	subs	r4, r4, r6
 801da78:	10a4      	asrs	r4, r4, #2
 801da7a:	2500      	movs	r5, #0
 801da7c:	42a5      	cmp	r5, r4
 801da7e:	d109      	bne.n	801da94 <__libc_init_array+0x24>
 801da80:	4e0b      	ldr	r6, [pc, #44]	; (801dab0 <__libc_init_array+0x40>)
 801da82:	4c0c      	ldr	r4, [pc, #48]	; (801dab4 <__libc_init_array+0x44>)
 801da84:	f002 fa40 	bl	801ff08 <_init>
 801da88:	1ba4      	subs	r4, r4, r6
 801da8a:	10a4      	asrs	r4, r4, #2
 801da8c:	2500      	movs	r5, #0
 801da8e:	42a5      	cmp	r5, r4
 801da90:	d105      	bne.n	801da9e <__libc_init_array+0x2e>
 801da92:	bd70      	pop	{r4, r5, r6, pc}
 801da94:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801da98:	4798      	blx	r3
 801da9a:	3501      	adds	r5, #1
 801da9c:	e7ee      	b.n	801da7c <__libc_init_array+0xc>
 801da9e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801daa2:	4798      	blx	r3
 801daa4:	3501      	adds	r5, #1
 801daa6:	e7f2      	b.n	801da8e <__libc_init_array+0x1e>
 801daa8:	08024a44 	.word	0x08024a44
 801daac:	08024a44 	.word	0x08024a44
 801dab0:	08024a44 	.word	0x08024a44
 801dab4:	08024a48 	.word	0x08024a48

0801dab8 <malloc>:
 801dab8:	4b02      	ldr	r3, [pc, #8]	; (801dac4 <malloc+0xc>)
 801daba:	4601      	mov	r1, r0
 801dabc:	6818      	ldr	r0, [r3, #0]
 801dabe:	f000 b86d 	b.w	801db9c <_malloc_r>
 801dac2:	bf00      	nop
 801dac4:	24002600 	.word	0x24002600

0801dac8 <free>:
 801dac8:	4b02      	ldr	r3, [pc, #8]	; (801dad4 <free+0xc>)
 801daca:	4601      	mov	r1, r0
 801dacc:	6818      	ldr	r0, [r3, #0]
 801dace:	f000 b817 	b.w	801db00 <_free_r>
 801dad2:	bf00      	nop
 801dad4:	24002600 	.word	0x24002600

0801dad8 <memcpy>:
 801dad8:	b510      	push	{r4, lr}
 801dada:	1e43      	subs	r3, r0, #1
 801dadc:	440a      	add	r2, r1
 801dade:	4291      	cmp	r1, r2
 801dae0:	d100      	bne.n	801dae4 <memcpy+0xc>
 801dae2:	bd10      	pop	{r4, pc}
 801dae4:	f811 4b01 	ldrb.w	r4, [r1], #1
 801dae8:	f803 4f01 	strb.w	r4, [r3, #1]!
 801daec:	e7f7      	b.n	801dade <memcpy+0x6>

0801daee <memset>:
 801daee:	4402      	add	r2, r0
 801daf0:	4603      	mov	r3, r0
 801daf2:	4293      	cmp	r3, r2
 801daf4:	d100      	bne.n	801daf8 <memset+0xa>
 801daf6:	4770      	bx	lr
 801daf8:	f803 1b01 	strb.w	r1, [r3], #1
 801dafc:	e7f9      	b.n	801daf2 <memset+0x4>
	...

0801db00 <_free_r>:
 801db00:	b538      	push	{r3, r4, r5, lr}
 801db02:	4605      	mov	r5, r0
 801db04:	2900      	cmp	r1, #0
 801db06:	d045      	beq.n	801db94 <_free_r+0x94>
 801db08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801db0c:	1f0c      	subs	r4, r1, #4
 801db0e:	2b00      	cmp	r3, #0
 801db10:	bfb8      	it	lt
 801db12:	18e4      	addlt	r4, r4, r3
 801db14:	f001 fb02 	bl	801f11c <__malloc_lock>
 801db18:	4a1f      	ldr	r2, [pc, #124]	; (801db98 <_free_r+0x98>)
 801db1a:	6813      	ldr	r3, [r2, #0]
 801db1c:	4610      	mov	r0, r2
 801db1e:	b933      	cbnz	r3, 801db2e <_free_r+0x2e>
 801db20:	6063      	str	r3, [r4, #4]
 801db22:	6014      	str	r4, [r2, #0]
 801db24:	4628      	mov	r0, r5
 801db26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801db2a:	f001 baf8 	b.w	801f11e <__malloc_unlock>
 801db2e:	42a3      	cmp	r3, r4
 801db30:	d90c      	bls.n	801db4c <_free_r+0x4c>
 801db32:	6821      	ldr	r1, [r4, #0]
 801db34:	1862      	adds	r2, r4, r1
 801db36:	4293      	cmp	r3, r2
 801db38:	bf04      	itt	eq
 801db3a:	681a      	ldreq	r2, [r3, #0]
 801db3c:	685b      	ldreq	r3, [r3, #4]
 801db3e:	6063      	str	r3, [r4, #4]
 801db40:	bf04      	itt	eq
 801db42:	1852      	addeq	r2, r2, r1
 801db44:	6022      	streq	r2, [r4, #0]
 801db46:	6004      	str	r4, [r0, #0]
 801db48:	e7ec      	b.n	801db24 <_free_r+0x24>
 801db4a:	4613      	mov	r3, r2
 801db4c:	685a      	ldr	r2, [r3, #4]
 801db4e:	b10a      	cbz	r2, 801db54 <_free_r+0x54>
 801db50:	42a2      	cmp	r2, r4
 801db52:	d9fa      	bls.n	801db4a <_free_r+0x4a>
 801db54:	6819      	ldr	r1, [r3, #0]
 801db56:	1858      	adds	r0, r3, r1
 801db58:	42a0      	cmp	r0, r4
 801db5a:	d10b      	bne.n	801db74 <_free_r+0x74>
 801db5c:	6820      	ldr	r0, [r4, #0]
 801db5e:	4401      	add	r1, r0
 801db60:	1858      	adds	r0, r3, r1
 801db62:	4282      	cmp	r2, r0
 801db64:	6019      	str	r1, [r3, #0]
 801db66:	d1dd      	bne.n	801db24 <_free_r+0x24>
 801db68:	6810      	ldr	r0, [r2, #0]
 801db6a:	6852      	ldr	r2, [r2, #4]
 801db6c:	605a      	str	r2, [r3, #4]
 801db6e:	4401      	add	r1, r0
 801db70:	6019      	str	r1, [r3, #0]
 801db72:	e7d7      	b.n	801db24 <_free_r+0x24>
 801db74:	d902      	bls.n	801db7c <_free_r+0x7c>
 801db76:	230c      	movs	r3, #12
 801db78:	602b      	str	r3, [r5, #0]
 801db7a:	e7d3      	b.n	801db24 <_free_r+0x24>
 801db7c:	6820      	ldr	r0, [r4, #0]
 801db7e:	1821      	adds	r1, r4, r0
 801db80:	428a      	cmp	r2, r1
 801db82:	bf04      	itt	eq
 801db84:	6811      	ldreq	r1, [r2, #0]
 801db86:	6852      	ldreq	r2, [r2, #4]
 801db88:	6062      	str	r2, [r4, #4]
 801db8a:	bf04      	itt	eq
 801db8c:	1809      	addeq	r1, r1, r0
 801db8e:	6021      	streq	r1, [r4, #0]
 801db90:	605c      	str	r4, [r3, #4]
 801db92:	e7c7      	b.n	801db24 <_free_r+0x24>
 801db94:	bd38      	pop	{r3, r4, r5, pc}
 801db96:	bf00      	nop
 801db98:	24004228 	.word	0x24004228

0801db9c <_malloc_r>:
 801db9c:	b570      	push	{r4, r5, r6, lr}
 801db9e:	1ccd      	adds	r5, r1, #3
 801dba0:	f025 0503 	bic.w	r5, r5, #3
 801dba4:	3508      	adds	r5, #8
 801dba6:	2d0c      	cmp	r5, #12
 801dba8:	bf38      	it	cc
 801dbaa:	250c      	movcc	r5, #12
 801dbac:	2d00      	cmp	r5, #0
 801dbae:	4606      	mov	r6, r0
 801dbb0:	db01      	blt.n	801dbb6 <_malloc_r+0x1a>
 801dbb2:	42a9      	cmp	r1, r5
 801dbb4:	d903      	bls.n	801dbbe <_malloc_r+0x22>
 801dbb6:	230c      	movs	r3, #12
 801dbb8:	6033      	str	r3, [r6, #0]
 801dbba:	2000      	movs	r0, #0
 801dbbc:	bd70      	pop	{r4, r5, r6, pc}
 801dbbe:	f001 faad 	bl	801f11c <__malloc_lock>
 801dbc2:	4a21      	ldr	r2, [pc, #132]	; (801dc48 <_malloc_r+0xac>)
 801dbc4:	6814      	ldr	r4, [r2, #0]
 801dbc6:	4621      	mov	r1, r4
 801dbc8:	b991      	cbnz	r1, 801dbf0 <_malloc_r+0x54>
 801dbca:	4c20      	ldr	r4, [pc, #128]	; (801dc4c <_malloc_r+0xb0>)
 801dbcc:	6823      	ldr	r3, [r4, #0]
 801dbce:	b91b      	cbnz	r3, 801dbd8 <_malloc_r+0x3c>
 801dbd0:	4630      	mov	r0, r6
 801dbd2:	f000 fc79 	bl	801e4c8 <_sbrk_r>
 801dbd6:	6020      	str	r0, [r4, #0]
 801dbd8:	4629      	mov	r1, r5
 801dbda:	4630      	mov	r0, r6
 801dbdc:	f000 fc74 	bl	801e4c8 <_sbrk_r>
 801dbe0:	1c43      	adds	r3, r0, #1
 801dbe2:	d124      	bne.n	801dc2e <_malloc_r+0x92>
 801dbe4:	230c      	movs	r3, #12
 801dbe6:	6033      	str	r3, [r6, #0]
 801dbe8:	4630      	mov	r0, r6
 801dbea:	f001 fa98 	bl	801f11e <__malloc_unlock>
 801dbee:	e7e4      	b.n	801dbba <_malloc_r+0x1e>
 801dbf0:	680b      	ldr	r3, [r1, #0]
 801dbf2:	1b5b      	subs	r3, r3, r5
 801dbf4:	d418      	bmi.n	801dc28 <_malloc_r+0x8c>
 801dbf6:	2b0b      	cmp	r3, #11
 801dbf8:	d90f      	bls.n	801dc1a <_malloc_r+0x7e>
 801dbfa:	600b      	str	r3, [r1, #0]
 801dbfc:	50cd      	str	r5, [r1, r3]
 801dbfe:	18cc      	adds	r4, r1, r3
 801dc00:	4630      	mov	r0, r6
 801dc02:	f001 fa8c 	bl	801f11e <__malloc_unlock>
 801dc06:	f104 000b 	add.w	r0, r4, #11
 801dc0a:	1d23      	adds	r3, r4, #4
 801dc0c:	f020 0007 	bic.w	r0, r0, #7
 801dc10:	1ac3      	subs	r3, r0, r3
 801dc12:	d0d3      	beq.n	801dbbc <_malloc_r+0x20>
 801dc14:	425a      	negs	r2, r3
 801dc16:	50e2      	str	r2, [r4, r3]
 801dc18:	e7d0      	b.n	801dbbc <_malloc_r+0x20>
 801dc1a:	428c      	cmp	r4, r1
 801dc1c:	684b      	ldr	r3, [r1, #4]
 801dc1e:	bf16      	itet	ne
 801dc20:	6063      	strne	r3, [r4, #4]
 801dc22:	6013      	streq	r3, [r2, #0]
 801dc24:	460c      	movne	r4, r1
 801dc26:	e7eb      	b.n	801dc00 <_malloc_r+0x64>
 801dc28:	460c      	mov	r4, r1
 801dc2a:	6849      	ldr	r1, [r1, #4]
 801dc2c:	e7cc      	b.n	801dbc8 <_malloc_r+0x2c>
 801dc2e:	1cc4      	adds	r4, r0, #3
 801dc30:	f024 0403 	bic.w	r4, r4, #3
 801dc34:	42a0      	cmp	r0, r4
 801dc36:	d005      	beq.n	801dc44 <_malloc_r+0xa8>
 801dc38:	1a21      	subs	r1, r4, r0
 801dc3a:	4630      	mov	r0, r6
 801dc3c:	f000 fc44 	bl	801e4c8 <_sbrk_r>
 801dc40:	3001      	adds	r0, #1
 801dc42:	d0cf      	beq.n	801dbe4 <_malloc_r+0x48>
 801dc44:	6025      	str	r5, [r4, #0]
 801dc46:	e7db      	b.n	801dc00 <_malloc_r+0x64>
 801dc48:	24004228 	.word	0x24004228
 801dc4c:	2400422c 	.word	0x2400422c

0801dc50 <__cvt>:
 801dc50:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dc52:	ed2d 8b02 	vpush	{d8}
 801dc56:	eeb0 8b40 	vmov.f64	d8, d0
 801dc5a:	b085      	sub	sp, #20
 801dc5c:	4617      	mov	r7, r2
 801dc5e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801dc60:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801dc62:	ee18 2a90 	vmov	r2, s17
 801dc66:	f025 0520 	bic.w	r5, r5, #32
 801dc6a:	2a00      	cmp	r2, #0
 801dc6c:	bfb6      	itet	lt
 801dc6e:	222d      	movlt	r2, #45	; 0x2d
 801dc70:	2200      	movge	r2, #0
 801dc72:	eeb1 8b40 	vneglt.f64	d8, d0
 801dc76:	2d46      	cmp	r5, #70	; 0x46
 801dc78:	460c      	mov	r4, r1
 801dc7a:	701a      	strb	r2, [r3, #0]
 801dc7c:	d004      	beq.n	801dc88 <__cvt+0x38>
 801dc7e:	2d45      	cmp	r5, #69	; 0x45
 801dc80:	d100      	bne.n	801dc84 <__cvt+0x34>
 801dc82:	3401      	adds	r4, #1
 801dc84:	2102      	movs	r1, #2
 801dc86:	e000      	b.n	801dc8a <__cvt+0x3a>
 801dc88:	2103      	movs	r1, #3
 801dc8a:	ab03      	add	r3, sp, #12
 801dc8c:	9301      	str	r3, [sp, #4]
 801dc8e:	ab02      	add	r3, sp, #8
 801dc90:	9300      	str	r3, [sp, #0]
 801dc92:	4622      	mov	r2, r4
 801dc94:	4633      	mov	r3, r6
 801dc96:	eeb0 0b48 	vmov.f64	d0, d8
 801dc9a:	f000 fce5 	bl	801e668 <_dtoa_r>
 801dc9e:	2d47      	cmp	r5, #71	; 0x47
 801dca0:	d101      	bne.n	801dca6 <__cvt+0x56>
 801dca2:	07fb      	lsls	r3, r7, #31
 801dca4:	d51e      	bpl.n	801dce4 <__cvt+0x94>
 801dca6:	2d46      	cmp	r5, #70	; 0x46
 801dca8:	eb00 0304 	add.w	r3, r0, r4
 801dcac:	d10c      	bne.n	801dcc8 <__cvt+0x78>
 801dcae:	7802      	ldrb	r2, [r0, #0]
 801dcb0:	2a30      	cmp	r2, #48	; 0x30
 801dcb2:	d107      	bne.n	801dcc4 <__cvt+0x74>
 801dcb4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801dcb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dcbc:	bf1c      	itt	ne
 801dcbe:	f1c4 0401 	rsbne	r4, r4, #1
 801dcc2:	6034      	strne	r4, [r6, #0]
 801dcc4:	6832      	ldr	r2, [r6, #0]
 801dcc6:	4413      	add	r3, r2
 801dcc8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801dccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dcd0:	d007      	beq.n	801dce2 <__cvt+0x92>
 801dcd2:	2130      	movs	r1, #48	; 0x30
 801dcd4:	9a03      	ldr	r2, [sp, #12]
 801dcd6:	429a      	cmp	r2, r3
 801dcd8:	d204      	bcs.n	801dce4 <__cvt+0x94>
 801dcda:	1c54      	adds	r4, r2, #1
 801dcdc:	9403      	str	r4, [sp, #12]
 801dcde:	7011      	strb	r1, [r2, #0]
 801dce0:	e7f8      	b.n	801dcd4 <__cvt+0x84>
 801dce2:	9303      	str	r3, [sp, #12]
 801dce4:	9b03      	ldr	r3, [sp, #12]
 801dce6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801dce8:	1a1b      	subs	r3, r3, r0
 801dcea:	6013      	str	r3, [r2, #0]
 801dcec:	b005      	add	sp, #20
 801dcee:	ecbd 8b02 	vpop	{d8}
 801dcf2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801dcf4 <__exponent>:
 801dcf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801dcf6:	2900      	cmp	r1, #0
 801dcf8:	4604      	mov	r4, r0
 801dcfa:	bfba      	itte	lt
 801dcfc:	4249      	neglt	r1, r1
 801dcfe:	232d      	movlt	r3, #45	; 0x2d
 801dd00:	232b      	movge	r3, #43	; 0x2b
 801dd02:	2909      	cmp	r1, #9
 801dd04:	f804 2b02 	strb.w	r2, [r4], #2
 801dd08:	7043      	strb	r3, [r0, #1]
 801dd0a:	dd20      	ble.n	801dd4e <__exponent+0x5a>
 801dd0c:	f10d 0307 	add.w	r3, sp, #7
 801dd10:	461f      	mov	r7, r3
 801dd12:	260a      	movs	r6, #10
 801dd14:	fb91 f5f6 	sdiv	r5, r1, r6
 801dd18:	fb06 1115 	mls	r1, r6, r5, r1
 801dd1c:	3130      	adds	r1, #48	; 0x30
 801dd1e:	2d09      	cmp	r5, #9
 801dd20:	f803 1c01 	strb.w	r1, [r3, #-1]
 801dd24:	f103 32ff 	add.w	r2, r3, #4294967295
 801dd28:	4629      	mov	r1, r5
 801dd2a:	dc09      	bgt.n	801dd40 <__exponent+0x4c>
 801dd2c:	3130      	adds	r1, #48	; 0x30
 801dd2e:	3b02      	subs	r3, #2
 801dd30:	f802 1c01 	strb.w	r1, [r2, #-1]
 801dd34:	42bb      	cmp	r3, r7
 801dd36:	4622      	mov	r2, r4
 801dd38:	d304      	bcc.n	801dd44 <__exponent+0x50>
 801dd3a:	1a10      	subs	r0, r2, r0
 801dd3c:	b003      	add	sp, #12
 801dd3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dd40:	4613      	mov	r3, r2
 801dd42:	e7e7      	b.n	801dd14 <__exponent+0x20>
 801dd44:	f813 2b01 	ldrb.w	r2, [r3], #1
 801dd48:	f804 2b01 	strb.w	r2, [r4], #1
 801dd4c:	e7f2      	b.n	801dd34 <__exponent+0x40>
 801dd4e:	2330      	movs	r3, #48	; 0x30
 801dd50:	4419      	add	r1, r3
 801dd52:	7083      	strb	r3, [r0, #2]
 801dd54:	1d02      	adds	r2, r0, #4
 801dd56:	70c1      	strb	r1, [r0, #3]
 801dd58:	e7ef      	b.n	801dd3a <__exponent+0x46>
 801dd5a:	0000      	movs	r0, r0
 801dd5c:	0000      	movs	r0, r0
	...

0801dd60 <_printf_float>:
 801dd60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd64:	b08d      	sub	sp, #52	; 0x34
 801dd66:	460c      	mov	r4, r1
 801dd68:	4616      	mov	r6, r2
 801dd6a:	461f      	mov	r7, r3
 801dd6c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801dd70:	4605      	mov	r5, r0
 801dd72:	f001 f9c5 	bl	801f100 <_localeconv_r>
 801dd76:	f8d0 b000 	ldr.w	fp, [r0]
 801dd7a:	4658      	mov	r0, fp
 801dd7c:	f7e2 faba 	bl	80002f4 <strlen>
 801dd80:	2300      	movs	r3, #0
 801dd82:	930a      	str	r3, [sp, #40]	; 0x28
 801dd84:	f8d8 3000 	ldr.w	r3, [r8]
 801dd88:	9005      	str	r0, [sp, #20]
 801dd8a:	3307      	adds	r3, #7
 801dd8c:	f023 0307 	bic.w	r3, r3, #7
 801dd90:	f103 0108 	add.w	r1, r3, #8
 801dd94:	f894 9018 	ldrb.w	r9, [r4, #24]
 801dd98:	6822      	ldr	r2, [r4, #0]
 801dd9a:	f8c8 1000 	str.w	r1, [r8]
 801dd9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801dda2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801dda6:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 801e030 <_printf_float+0x2d0>
 801ddaa:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801ddae:	eeb0 6bc0 	vabs.f64	d6, d0
 801ddb2:	eeb4 6b47 	vcmp.f64	d6, d7
 801ddb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ddba:	dd24      	ble.n	801de06 <_printf_float+0xa6>
 801ddbc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801ddc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ddc4:	d502      	bpl.n	801ddcc <_printf_float+0x6c>
 801ddc6:	232d      	movs	r3, #45	; 0x2d
 801ddc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ddcc:	499a      	ldr	r1, [pc, #616]	; (801e038 <_printf_float+0x2d8>)
 801ddce:	4b9b      	ldr	r3, [pc, #620]	; (801e03c <_printf_float+0x2dc>)
 801ddd0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801ddd4:	bf8c      	ite	hi
 801ddd6:	4688      	movhi	r8, r1
 801ddd8:	4698      	movls	r8, r3
 801ddda:	f022 0204 	bic.w	r2, r2, #4
 801ddde:	2303      	movs	r3, #3
 801dde0:	6123      	str	r3, [r4, #16]
 801dde2:	6022      	str	r2, [r4, #0]
 801dde4:	f04f 0a00 	mov.w	sl, #0
 801dde8:	9700      	str	r7, [sp, #0]
 801ddea:	4633      	mov	r3, r6
 801ddec:	aa0b      	add	r2, sp, #44	; 0x2c
 801ddee:	4621      	mov	r1, r4
 801ddf0:	4628      	mov	r0, r5
 801ddf2:	f000 f9e1 	bl	801e1b8 <_printf_common>
 801ddf6:	3001      	adds	r0, #1
 801ddf8:	f040 8089 	bne.w	801df0e <_printf_float+0x1ae>
 801ddfc:	f04f 30ff 	mov.w	r0, #4294967295
 801de00:	b00d      	add	sp, #52	; 0x34
 801de02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de06:	eeb4 0b40 	vcmp.f64	d0, d0
 801de0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801de0e:	d702      	bvc.n	801de16 <_printf_float+0xb6>
 801de10:	498b      	ldr	r1, [pc, #556]	; (801e040 <_printf_float+0x2e0>)
 801de12:	4b8c      	ldr	r3, [pc, #560]	; (801e044 <_printf_float+0x2e4>)
 801de14:	e7dc      	b.n	801ddd0 <_printf_float+0x70>
 801de16:	6861      	ldr	r1, [r4, #4]
 801de18:	1c4b      	adds	r3, r1, #1
 801de1a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801de1e:	ab0a      	add	r3, sp, #40	; 0x28
 801de20:	a809      	add	r0, sp, #36	; 0x24
 801de22:	d13b      	bne.n	801de9c <_printf_float+0x13c>
 801de24:	2106      	movs	r1, #6
 801de26:	6061      	str	r1, [r4, #4]
 801de28:	f04f 0c00 	mov.w	ip, #0
 801de2c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801de30:	e9cd 0900 	strd	r0, r9, [sp]
 801de34:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801de38:	6022      	str	r2, [r4, #0]
 801de3a:	6861      	ldr	r1, [r4, #4]
 801de3c:	4628      	mov	r0, r5
 801de3e:	f7ff ff07 	bl	801dc50 <__cvt>
 801de42:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 801de46:	2b47      	cmp	r3, #71	; 0x47
 801de48:	4680      	mov	r8, r0
 801de4a:	d109      	bne.n	801de60 <_printf_float+0x100>
 801de4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801de4e:	1cd8      	adds	r0, r3, #3
 801de50:	db02      	blt.n	801de58 <_printf_float+0xf8>
 801de52:	6862      	ldr	r2, [r4, #4]
 801de54:	4293      	cmp	r3, r2
 801de56:	dd47      	ble.n	801dee8 <_printf_float+0x188>
 801de58:	f1a9 0902 	sub.w	r9, r9, #2
 801de5c:	fa5f f989 	uxtb.w	r9, r9
 801de60:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801de64:	9909      	ldr	r1, [sp, #36]	; 0x24
 801de66:	d824      	bhi.n	801deb2 <_printf_float+0x152>
 801de68:	3901      	subs	r1, #1
 801de6a:	464a      	mov	r2, r9
 801de6c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801de70:	9109      	str	r1, [sp, #36]	; 0x24
 801de72:	f7ff ff3f 	bl	801dcf4 <__exponent>
 801de76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801de78:	1813      	adds	r3, r2, r0
 801de7a:	2a01      	cmp	r2, #1
 801de7c:	4682      	mov	sl, r0
 801de7e:	6123      	str	r3, [r4, #16]
 801de80:	dc02      	bgt.n	801de88 <_printf_float+0x128>
 801de82:	6822      	ldr	r2, [r4, #0]
 801de84:	07d1      	lsls	r1, r2, #31
 801de86:	d501      	bpl.n	801de8c <_printf_float+0x12c>
 801de88:	3301      	adds	r3, #1
 801de8a:	6123      	str	r3, [r4, #16]
 801de8c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801de90:	2b00      	cmp	r3, #0
 801de92:	d0a9      	beq.n	801dde8 <_printf_float+0x88>
 801de94:	232d      	movs	r3, #45	; 0x2d
 801de96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801de9a:	e7a5      	b.n	801dde8 <_printf_float+0x88>
 801de9c:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 801dea0:	f000 8178 	beq.w	801e194 <_printf_float+0x434>
 801dea4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801dea8:	d1be      	bne.n	801de28 <_printf_float+0xc8>
 801deaa:	2900      	cmp	r1, #0
 801deac:	d1bc      	bne.n	801de28 <_printf_float+0xc8>
 801deae:	2101      	movs	r1, #1
 801deb0:	e7b9      	b.n	801de26 <_printf_float+0xc6>
 801deb2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801deb6:	d119      	bne.n	801deec <_printf_float+0x18c>
 801deb8:	2900      	cmp	r1, #0
 801deba:	6863      	ldr	r3, [r4, #4]
 801debc:	dd0c      	ble.n	801ded8 <_printf_float+0x178>
 801debe:	6121      	str	r1, [r4, #16]
 801dec0:	b913      	cbnz	r3, 801dec8 <_printf_float+0x168>
 801dec2:	6822      	ldr	r2, [r4, #0]
 801dec4:	07d2      	lsls	r2, r2, #31
 801dec6:	d502      	bpl.n	801dece <_printf_float+0x16e>
 801dec8:	3301      	adds	r3, #1
 801deca:	440b      	add	r3, r1
 801decc:	6123      	str	r3, [r4, #16]
 801dece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ded0:	65a3      	str	r3, [r4, #88]	; 0x58
 801ded2:	f04f 0a00 	mov.w	sl, #0
 801ded6:	e7d9      	b.n	801de8c <_printf_float+0x12c>
 801ded8:	b913      	cbnz	r3, 801dee0 <_printf_float+0x180>
 801deda:	6822      	ldr	r2, [r4, #0]
 801dedc:	07d0      	lsls	r0, r2, #31
 801dede:	d501      	bpl.n	801dee4 <_printf_float+0x184>
 801dee0:	3302      	adds	r3, #2
 801dee2:	e7f3      	b.n	801decc <_printf_float+0x16c>
 801dee4:	2301      	movs	r3, #1
 801dee6:	e7f1      	b.n	801decc <_printf_float+0x16c>
 801dee8:	f04f 0967 	mov.w	r9, #103	; 0x67
 801deec:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801def0:	4293      	cmp	r3, r2
 801def2:	db05      	blt.n	801df00 <_printf_float+0x1a0>
 801def4:	6822      	ldr	r2, [r4, #0]
 801def6:	6123      	str	r3, [r4, #16]
 801def8:	07d1      	lsls	r1, r2, #31
 801defa:	d5e8      	bpl.n	801dece <_printf_float+0x16e>
 801defc:	3301      	adds	r3, #1
 801defe:	e7e5      	b.n	801decc <_printf_float+0x16c>
 801df00:	2b00      	cmp	r3, #0
 801df02:	bfd4      	ite	le
 801df04:	f1c3 0302 	rsble	r3, r3, #2
 801df08:	2301      	movgt	r3, #1
 801df0a:	4413      	add	r3, r2
 801df0c:	e7de      	b.n	801decc <_printf_float+0x16c>
 801df0e:	6823      	ldr	r3, [r4, #0]
 801df10:	055a      	lsls	r2, r3, #21
 801df12:	d407      	bmi.n	801df24 <_printf_float+0x1c4>
 801df14:	6923      	ldr	r3, [r4, #16]
 801df16:	4642      	mov	r2, r8
 801df18:	4631      	mov	r1, r6
 801df1a:	4628      	mov	r0, r5
 801df1c:	47b8      	blx	r7
 801df1e:	3001      	adds	r0, #1
 801df20:	d12a      	bne.n	801df78 <_printf_float+0x218>
 801df22:	e76b      	b.n	801ddfc <_printf_float+0x9c>
 801df24:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801df28:	f240 80de 	bls.w	801e0e8 <_printf_float+0x388>
 801df2c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801df30:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801df34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801df38:	d133      	bne.n	801dfa2 <_printf_float+0x242>
 801df3a:	2301      	movs	r3, #1
 801df3c:	4a42      	ldr	r2, [pc, #264]	; (801e048 <_printf_float+0x2e8>)
 801df3e:	4631      	mov	r1, r6
 801df40:	4628      	mov	r0, r5
 801df42:	47b8      	blx	r7
 801df44:	3001      	adds	r0, #1
 801df46:	f43f af59 	beq.w	801ddfc <_printf_float+0x9c>
 801df4a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801df4e:	429a      	cmp	r2, r3
 801df50:	db02      	blt.n	801df58 <_printf_float+0x1f8>
 801df52:	6823      	ldr	r3, [r4, #0]
 801df54:	07d8      	lsls	r0, r3, #31
 801df56:	d50f      	bpl.n	801df78 <_printf_float+0x218>
 801df58:	9b05      	ldr	r3, [sp, #20]
 801df5a:	465a      	mov	r2, fp
 801df5c:	4631      	mov	r1, r6
 801df5e:	4628      	mov	r0, r5
 801df60:	47b8      	blx	r7
 801df62:	3001      	adds	r0, #1
 801df64:	f43f af4a 	beq.w	801ddfc <_printf_float+0x9c>
 801df68:	f04f 0800 	mov.w	r8, #0
 801df6c:	f104 091a 	add.w	r9, r4, #26
 801df70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801df72:	3b01      	subs	r3, #1
 801df74:	4543      	cmp	r3, r8
 801df76:	dc09      	bgt.n	801df8c <_printf_float+0x22c>
 801df78:	6823      	ldr	r3, [r4, #0]
 801df7a:	079b      	lsls	r3, r3, #30
 801df7c:	f100 8105 	bmi.w	801e18a <_printf_float+0x42a>
 801df80:	68e0      	ldr	r0, [r4, #12]
 801df82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801df84:	4298      	cmp	r0, r3
 801df86:	bfb8      	it	lt
 801df88:	4618      	movlt	r0, r3
 801df8a:	e739      	b.n	801de00 <_printf_float+0xa0>
 801df8c:	2301      	movs	r3, #1
 801df8e:	464a      	mov	r2, r9
 801df90:	4631      	mov	r1, r6
 801df92:	4628      	mov	r0, r5
 801df94:	47b8      	blx	r7
 801df96:	3001      	adds	r0, #1
 801df98:	f43f af30 	beq.w	801ddfc <_printf_float+0x9c>
 801df9c:	f108 0801 	add.w	r8, r8, #1
 801dfa0:	e7e6      	b.n	801df70 <_printf_float+0x210>
 801dfa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dfa4:	2b00      	cmp	r3, #0
 801dfa6:	dc2b      	bgt.n	801e000 <_printf_float+0x2a0>
 801dfa8:	2301      	movs	r3, #1
 801dfaa:	4a27      	ldr	r2, [pc, #156]	; (801e048 <_printf_float+0x2e8>)
 801dfac:	4631      	mov	r1, r6
 801dfae:	4628      	mov	r0, r5
 801dfb0:	47b8      	blx	r7
 801dfb2:	3001      	adds	r0, #1
 801dfb4:	f43f af22 	beq.w	801ddfc <_printf_float+0x9c>
 801dfb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dfba:	b923      	cbnz	r3, 801dfc6 <_printf_float+0x266>
 801dfbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dfbe:	b913      	cbnz	r3, 801dfc6 <_printf_float+0x266>
 801dfc0:	6823      	ldr	r3, [r4, #0]
 801dfc2:	07d9      	lsls	r1, r3, #31
 801dfc4:	d5d8      	bpl.n	801df78 <_printf_float+0x218>
 801dfc6:	9b05      	ldr	r3, [sp, #20]
 801dfc8:	465a      	mov	r2, fp
 801dfca:	4631      	mov	r1, r6
 801dfcc:	4628      	mov	r0, r5
 801dfce:	47b8      	blx	r7
 801dfd0:	3001      	adds	r0, #1
 801dfd2:	f43f af13 	beq.w	801ddfc <_printf_float+0x9c>
 801dfd6:	f04f 0900 	mov.w	r9, #0
 801dfda:	f104 0a1a 	add.w	sl, r4, #26
 801dfde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dfe0:	425b      	negs	r3, r3
 801dfe2:	454b      	cmp	r3, r9
 801dfe4:	dc01      	bgt.n	801dfea <_printf_float+0x28a>
 801dfe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dfe8:	e795      	b.n	801df16 <_printf_float+0x1b6>
 801dfea:	2301      	movs	r3, #1
 801dfec:	4652      	mov	r2, sl
 801dfee:	4631      	mov	r1, r6
 801dff0:	4628      	mov	r0, r5
 801dff2:	47b8      	blx	r7
 801dff4:	3001      	adds	r0, #1
 801dff6:	f43f af01 	beq.w	801ddfc <_printf_float+0x9c>
 801dffa:	f109 0901 	add.w	r9, r9, #1
 801dffe:	e7ee      	b.n	801dfde <_printf_float+0x27e>
 801e000:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e002:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801e004:	429a      	cmp	r2, r3
 801e006:	bfa8      	it	ge
 801e008:	461a      	movge	r2, r3
 801e00a:	2a00      	cmp	r2, #0
 801e00c:	4691      	mov	r9, r2
 801e00e:	dd07      	ble.n	801e020 <_printf_float+0x2c0>
 801e010:	4613      	mov	r3, r2
 801e012:	4631      	mov	r1, r6
 801e014:	4642      	mov	r2, r8
 801e016:	4628      	mov	r0, r5
 801e018:	47b8      	blx	r7
 801e01a:	3001      	adds	r0, #1
 801e01c:	f43f aeee 	beq.w	801ddfc <_printf_float+0x9c>
 801e020:	f104 031a 	add.w	r3, r4, #26
 801e024:	f04f 0a00 	mov.w	sl, #0
 801e028:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801e02c:	9307      	str	r3, [sp, #28]
 801e02e:	e017      	b.n	801e060 <_printf_float+0x300>
 801e030:	ffffffff 	.word	0xffffffff
 801e034:	7fefffff 	.word	0x7fefffff
 801e038:	08024698 	.word	0x08024698
 801e03c:	08024694 	.word	0x08024694
 801e040:	080246a0 	.word	0x080246a0
 801e044:	0802469c 	.word	0x0802469c
 801e048:	080246a4 	.word	0x080246a4
 801e04c:	2301      	movs	r3, #1
 801e04e:	9a07      	ldr	r2, [sp, #28]
 801e050:	4631      	mov	r1, r6
 801e052:	4628      	mov	r0, r5
 801e054:	47b8      	blx	r7
 801e056:	3001      	adds	r0, #1
 801e058:	f43f aed0 	beq.w	801ddfc <_printf_float+0x9c>
 801e05c:	f10a 0a01 	add.w	sl, sl, #1
 801e060:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801e062:	9306      	str	r3, [sp, #24]
 801e064:	eba3 0309 	sub.w	r3, r3, r9
 801e068:	4553      	cmp	r3, sl
 801e06a:	dcef      	bgt.n	801e04c <_printf_float+0x2ec>
 801e06c:	9b06      	ldr	r3, [sp, #24]
 801e06e:	4498      	add	r8, r3
 801e070:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801e074:	429a      	cmp	r2, r3
 801e076:	db15      	blt.n	801e0a4 <_printf_float+0x344>
 801e078:	6823      	ldr	r3, [r4, #0]
 801e07a:	07da      	lsls	r2, r3, #31
 801e07c:	d412      	bmi.n	801e0a4 <_printf_float+0x344>
 801e07e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e080:	9a06      	ldr	r2, [sp, #24]
 801e082:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e084:	1a9a      	subs	r2, r3, r2
 801e086:	eba3 0a01 	sub.w	sl, r3, r1
 801e08a:	4592      	cmp	sl, r2
 801e08c:	bfa8      	it	ge
 801e08e:	4692      	movge	sl, r2
 801e090:	f1ba 0f00 	cmp.w	sl, #0
 801e094:	dc0e      	bgt.n	801e0b4 <_printf_float+0x354>
 801e096:	f04f 0800 	mov.w	r8, #0
 801e09a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801e09e:	f104 091a 	add.w	r9, r4, #26
 801e0a2:	e019      	b.n	801e0d8 <_printf_float+0x378>
 801e0a4:	9b05      	ldr	r3, [sp, #20]
 801e0a6:	465a      	mov	r2, fp
 801e0a8:	4631      	mov	r1, r6
 801e0aa:	4628      	mov	r0, r5
 801e0ac:	47b8      	blx	r7
 801e0ae:	3001      	adds	r0, #1
 801e0b0:	d1e5      	bne.n	801e07e <_printf_float+0x31e>
 801e0b2:	e6a3      	b.n	801ddfc <_printf_float+0x9c>
 801e0b4:	4653      	mov	r3, sl
 801e0b6:	4642      	mov	r2, r8
 801e0b8:	4631      	mov	r1, r6
 801e0ba:	4628      	mov	r0, r5
 801e0bc:	47b8      	blx	r7
 801e0be:	3001      	adds	r0, #1
 801e0c0:	d1e9      	bne.n	801e096 <_printf_float+0x336>
 801e0c2:	e69b      	b.n	801ddfc <_printf_float+0x9c>
 801e0c4:	2301      	movs	r3, #1
 801e0c6:	464a      	mov	r2, r9
 801e0c8:	4631      	mov	r1, r6
 801e0ca:	4628      	mov	r0, r5
 801e0cc:	47b8      	blx	r7
 801e0ce:	3001      	adds	r0, #1
 801e0d0:	f43f ae94 	beq.w	801ddfc <_printf_float+0x9c>
 801e0d4:	f108 0801 	add.w	r8, r8, #1
 801e0d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801e0dc:	1a9b      	subs	r3, r3, r2
 801e0de:	eba3 030a 	sub.w	r3, r3, sl
 801e0e2:	4543      	cmp	r3, r8
 801e0e4:	dcee      	bgt.n	801e0c4 <_printf_float+0x364>
 801e0e6:	e747      	b.n	801df78 <_printf_float+0x218>
 801e0e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e0ea:	2a01      	cmp	r2, #1
 801e0ec:	dc01      	bgt.n	801e0f2 <_printf_float+0x392>
 801e0ee:	07db      	lsls	r3, r3, #31
 801e0f0:	d539      	bpl.n	801e166 <_printf_float+0x406>
 801e0f2:	2301      	movs	r3, #1
 801e0f4:	4642      	mov	r2, r8
 801e0f6:	4631      	mov	r1, r6
 801e0f8:	4628      	mov	r0, r5
 801e0fa:	47b8      	blx	r7
 801e0fc:	3001      	adds	r0, #1
 801e0fe:	f43f ae7d 	beq.w	801ddfc <_printf_float+0x9c>
 801e102:	9b05      	ldr	r3, [sp, #20]
 801e104:	465a      	mov	r2, fp
 801e106:	4631      	mov	r1, r6
 801e108:	4628      	mov	r0, r5
 801e10a:	47b8      	blx	r7
 801e10c:	3001      	adds	r0, #1
 801e10e:	f108 0801 	add.w	r8, r8, #1
 801e112:	f43f ae73 	beq.w	801ddfc <_printf_float+0x9c>
 801e116:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801e11a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e11c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801e120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e124:	f103 33ff 	add.w	r3, r3, #4294967295
 801e128:	d018      	beq.n	801e15c <_printf_float+0x3fc>
 801e12a:	4642      	mov	r2, r8
 801e12c:	4631      	mov	r1, r6
 801e12e:	4628      	mov	r0, r5
 801e130:	47b8      	blx	r7
 801e132:	3001      	adds	r0, #1
 801e134:	d10e      	bne.n	801e154 <_printf_float+0x3f4>
 801e136:	e661      	b.n	801ddfc <_printf_float+0x9c>
 801e138:	2301      	movs	r3, #1
 801e13a:	464a      	mov	r2, r9
 801e13c:	4631      	mov	r1, r6
 801e13e:	4628      	mov	r0, r5
 801e140:	47b8      	blx	r7
 801e142:	3001      	adds	r0, #1
 801e144:	f43f ae5a 	beq.w	801ddfc <_printf_float+0x9c>
 801e148:	f108 0801 	add.w	r8, r8, #1
 801e14c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e14e:	3b01      	subs	r3, #1
 801e150:	4543      	cmp	r3, r8
 801e152:	dcf1      	bgt.n	801e138 <_printf_float+0x3d8>
 801e154:	4653      	mov	r3, sl
 801e156:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801e15a:	e6dd      	b.n	801df18 <_printf_float+0x1b8>
 801e15c:	f04f 0800 	mov.w	r8, #0
 801e160:	f104 091a 	add.w	r9, r4, #26
 801e164:	e7f2      	b.n	801e14c <_printf_float+0x3ec>
 801e166:	2301      	movs	r3, #1
 801e168:	e7df      	b.n	801e12a <_printf_float+0x3ca>
 801e16a:	2301      	movs	r3, #1
 801e16c:	464a      	mov	r2, r9
 801e16e:	4631      	mov	r1, r6
 801e170:	4628      	mov	r0, r5
 801e172:	47b8      	blx	r7
 801e174:	3001      	adds	r0, #1
 801e176:	f43f ae41 	beq.w	801ddfc <_printf_float+0x9c>
 801e17a:	f108 0801 	add.w	r8, r8, #1
 801e17e:	68e3      	ldr	r3, [r4, #12]
 801e180:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e182:	1a9b      	subs	r3, r3, r2
 801e184:	4543      	cmp	r3, r8
 801e186:	dcf0      	bgt.n	801e16a <_printf_float+0x40a>
 801e188:	e6fa      	b.n	801df80 <_printf_float+0x220>
 801e18a:	f04f 0800 	mov.w	r8, #0
 801e18e:	f104 0919 	add.w	r9, r4, #25
 801e192:	e7f4      	b.n	801e17e <_printf_float+0x41e>
 801e194:	2900      	cmp	r1, #0
 801e196:	f43f ae8a 	beq.w	801deae <_printf_float+0x14e>
 801e19a:	f04f 0c00 	mov.w	ip, #0
 801e19e:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801e1a2:	e9cd 0900 	strd	r0, r9, [sp]
 801e1a6:	6022      	str	r2, [r4, #0]
 801e1a8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801e1ac:	4628      	mov	r0, r5
 801e1ae:	f7ff fd4f 	bl	801dc50 <__cvt>
 801e1b2:	4680      	mov	r8, r0
 801e1b4:	e64a      	b.n	801de4c <_printf_float+0xec>
 801e1b6:	bf00      	nop

0801e1b8 <_printf_common>:
 801e1b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e1bc:	4691      	mov	r9, r2
 801e1be:	461f      	mov	r7, r3
 801e1c0:	688a      	ldr	r2, [r1, #8]
 801e1c2:	690b      	ldr	r3, [r1, #16]
 801e1c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801e1c8:	4293      	cmp	r3, r2
 801e1ca:	bfb8      	it	lt
 801e1cc:	4613      	movlt	r3, r2
 801e1ce:	f8c9 3000 	str.w	r3, [r9]
 801e1d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801e1d6:	4606      	mov	r6, r0
 801e1d8:	460c      	mov	r4, r1
 801e1da:	b112      	cbz	r2, 801e1e2 <_printf_common+0x2a>
 801e1dc:	3301      	adds	r3, #1
 801e1de:	f8c9 3000 	str.w	r3, [r9]
 801e1e2:	6823      	ldr	r3, [r4, #0]
 801e1e4:	0699      	lsls	r1, r3, #26
 801e1e6:	bf42      	ittt	mi
 801e1e8:	f8d9 3000 	ldrmi.w	r3, [r9]
 801e1ec:	3302      	addmi	r3, #2
 801e1ee:	f8c9 3000 	strmi.w	r3, [r9]
 801e1f2:	6825      	ldr	r5, [r4, #0]
 801e1f4:	f015 0506 	ands.w	r5, r5, #6
 801e1f8:	d107      	bne.n	801e20a <_printf_common+0x52>
 801e1fa:	f104 0a19 	add.w	sl, r4, #25
 801e1fe:	68e3      	ldr	r3, [r4, #12]
 801e200:	f8d9 2000 	ldr.w	r2, [r9]
 801e204:	1a9b      	subs	r3, r3, r2
 801e206:	42ab      	cmp	r3, r5
 801e208:	dc28      	bgt.n	801e25c <_printf_common+0xa4>
 801e20a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801e20e:	6822      	ldr	r2, [r4, #0]
 801e210:	3300      	adds	r3, #0
 801e212:	bf18      	it	ne
 801e214:	2301      	movne	r3, #1
 801e216:	0692      	lsls	r2, r2, #26
 801e218:	d42d      	bmi.n	801e276 <_printf_common+0xbe>
 801e21a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801e21e:	4639      	mov	r1, r7
 801e220:	4630      	mov	r0, r6
 801e222:	47c0      	blx	r8
 801e224:	3001      	adds	r0, #1
 801e226:	d020      	beq.n	801e26a <_printf_common+0xb2>
 801e228:	6823      	ldr	r3, [r4, #0]
 801e22a:	68e5      	ldr	r5, [r4, #12]
 801e22c:	f8d9 2000 	ldr.w	r2, [r9]
 801e230:	f003 0306 	and.w	r3, r3, #6
 801e234:	2b04      	cmp	r3, #4
 801e236:	bf08      	it	eq
 801e238:	1aad      	subeq	r5, r5, r2
 801e23a:	68a3      	ldr	r3, [r4, #8]
 801e23c:	6922      	ldr	r2, [r4, #16]
 801e23e:	bf0c      	ite	eq
 801e240:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e244:	2500      	movne	r5, #0
 801e246:	4293      	cmp	r3, r2
 801e248:	bfc4      	itt	gt
 801e24a:	1a9b      	subgt	r3, r3, r2
 801e24c:	18ed      	addgt	r5, r5, r3
 801e24e:	f04f 0900 	mov.w	r9, #0
 801e252:	341a      	adds	r4, #26
 801e254:	454d      	cmp	r5, r9
 801e256:	d11a      	bne.n	801e28e <_printf_common+0xd6>
 801e258:	2000      	movs	r0, #0
 801e25a:	e008      	b.n	801e26e <_printf_common+0xb6>
 801e25c:	2301      	movs	r3, #1
 801e25e:	4652      	mov	r2, sl
 801e260:	4639      	mov	r1, r7
 801e262:	4630      	mov	r0, r6
 801e264:	47c0      	blx	r8
 801e266:	3001      	adds	r0, #1
 801e268:	d103      	bne.n	801e272 <_printf_common+0xba>
 801e26a:	f04f 30ff 	mov.w	r0, #4294967295
 801e26e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e272:	3501      	adds	r5, #1
 801e274:	e7c3      	b.n	801e1fe <_printf_common+0x46>
 801e276:	18e1      	adds	r1, r4, r3
 801e278:	1c5a      	adds	r2, r3, #1
 801e27a:	2030      	movs	r0, #48	; 0x30
 801e27c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801e280:	4422      	add	r2, r4
 801e282:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801e286:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801e28a:	3302      	adds	r3, #2
 801e28c:	e7c5      	b.n	801e21a <_printf_common+0x62>
 801e28e:	2301      	movs	r3, #1
 801e290:	4622      	mov	r2, r4
 801e292:	4639      	mov	r1, r7
 801e294:	4630      	mov	r0, r6
 801e296:	47c0      	blx	r8
 801e298:	3001      	adds	r0, #1
 801e29a:	d0e6      	beq.n	801e26a <_printf_common+0xb2>
 801e29c:	f109 0901 	add.w	r9, r9, #1
 801e2a0:	e7d8      	b.n	801e254 <_printf_common+0x9c>
	...

0801e2a4 <_printf_i>:
 801e2a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e2a8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801e2ac:	460c      	mov	r4, r1
 801e2ae:	7e09      	ldrb	r1, [r1, #24]
 801e2b0:	b085      	sub	sp, #20
 801e2b2:	296e      	cmp	r1, #110	; 0x6e
 801e2b4:	4617      	mov	r7, r2
 801e2b6:	4606      	mov	r6, r0
 801e2b8:	4698      	mov	r8, r3
 801e2ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e2bc:	f000 80b3 	beq.w	801e426 <_printf_i+0x182>
 801e2c0:	d822      	bhi.n	801e308 <_printf_i+0x64>
 801e2c2:	2963      	cmp	r1, #99	; 0x63
 801e2c4:	d036      	beq.n	801e334 <_printf_i+0x90>
 801e2c6:	d80a      	bhi.n	801e2de <_printf_i+0x3a>
 801e2c8:	2900      	cmp	r1, #0
 801e2ca:	f000 80b9 	beq.w	801e440 <_printf_i+0x19c>
 801e2ce:	2958      	cmp	r1, #88	; 0x58
 801e2d0:	f000 8083 	beq.w	801e3da <_printf_i+0x136>
 801e2d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e2d8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801e2dc:	e032      	b.n	801e344 <_printf_i+0xa0>
 801e2de:	2964      	cmp	r1, #100	; 0x64
 801e2e0:	d001      	beq.n	801e2e6 <_printf_i+0x42>
 801e2e2:	2969      	cmp	r1, #105	; 0x69
 801e2e4:	d1f6      	bne.n	801e2d4 <_printf_i+0x30>
 801e2e6:	6820      	ldr	r0, [r4, #0]
 801e2e8:	6813      	ldr	r3, [r2, #0]
 801e2ea:	0605      	lsls	r5, r0, #24
 801e2ec:	f103 0104 	add.w	r1, r3, #4
 801e2f0:	d52a      	bpl.n	801e348 <_printf_i+0xa4>
 801e2f2:	681b      	ldr	r3, [r3, #0]
 801e2f4:	6011      	str	r1, [r2, #0]
 801e2f6:	2b00      	cmp	r3, #0
 801e2f8:	da03      	bge.n	801e302 <_printf_i+0x5e>
 801e2fa:	222d      	movs	r2, #45	; 0x2d
 801e2fc:	425b      	negs	r3, r3
 801e2fe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801e302:	486f      	ldr	r0, [pc, #444]	; (801e4c0 <_printf_i+0x21c>)
 801e304:	220a      	movs	r2, #10
 801e306:	e039      	b.n	801e37c <_printf_i+0xd8>
 801e308:	2973      	cmp	r1, #115	; 0x73
 801e30a:	f000 809d 	beq.w	801e448 <_printf_i+0x1a4>
 801e30e:	d808      	bhi.n	801e322 <_printf_i+0x7e>
 801e310:	296f      	cmp	r1, #111	; 0x6f
 801e312:	d020      	beq.n	801e356 <_printf_i+0xb2>
 801e314:	2970      	cmp	r1, #112	; 0x70
 801e316:	d1dd      	bne.n	801e2d4 <_printf_i+0x30>
 801e318:	6823      	ldr	r3, [r4, #0]
 801e31a:	f043 0320 	orr.w	r3, r3, #32
 801e31e:	6023      	str	r3, [r4, #0]
 801e320:	e003      	b.n	801e32a <_printf_i+0x86>
 801e322:	2975      	cmp	r1, #117	; 0x75
 801e324:	d017      	beq.n	801e356 <_printf_i+0xb2>
 801e326:	2978      	cmp	r1, #120	; 0x78
 801e328:	d1d4      	bne.n	801e2d4 <_printf_i+0x30>
 801e32a:	2378      	movs	r3, #120	; 0x78
 801e32c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801e330:	4864      	ldr	r0, [pc, #400]	; (801e4c4 <_printf_i+0x220>)
 801e332:	e055      	b.n	801e3e0 <_printf_i+0x13c>
 801e334:	6813      	ldr	r3, [r2, #0]
 801e336:	1d19      	adds	r1, r3, #4
 801e338:	681b      	ldr	r3, [r3, #0]
 801e33a:	6011      	str	r1, [r2, #0]
 801e33c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e340:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801e344:	2301      	movs	r3, #1
 801e346:	e08c      	b.n	801e462 <_printf_i+0x1be>
 801e348:	681b      	ldr	r3, [r3, #0]
 801e34a:	6011      	str	r1, [r2, #0]
 801e34c:	f010 0f40 	tst.w	r0, #64	; 0x40
 801e350:	bf18      	it	ne
 801e352:	b21b      	sxthne	r3, r3
 801e354:	e7cf      	b.n	801e2f6 <_printf_i+0x52>
 801e356:	6813      	ldr	r3, [r2, #0]
 801e358:	6825      	ldr	r5, [r4, #0]
 801e35a:	1d18      	adds	r0, r3, #4
 801e35c:	6010      	str	r0, [r2, #0]
 801e35e:	0628      	lsls	r0, r5, #24
 801e360:	d501      	bpl.n	801e366 <_printf_i+0xc2>
 801e362:	681b      	ldr	r3, [r3, #0]
 801e364:	e002      	b.n	801e36c <_printf_i+0xc8>
 801e366:	0668      	lsls	r0, r5, #25
 801e368:	d5fb      	bpl.n	801e362 <_printf_i+0xbe>
 801e36a:	881b      	ldrh	r3, [r3, #0]
 801e36c:	4854      	ldr	r0, [pc, #336]	; (801e4c0 <_printf_i+0x21c>)
 801e36e:	296f      	cmp	r1, #111	; 0x6f
 801e370:	bf14      	ite	ne
 801e372:	220a      	movne	r2, #10
 801e374:	2208      	moveq	r2, #8
 801e376:	2100      	movs	r1, #0
 801e378:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801e37c:	6865      	ldr	r5, [r4, #4]
 801e37e:	60a5      	str	r5, [r4, #8]
 801e380:	2d00      	cmp	r5, #0
 801e382:	f2c0 8095 	blt.w	801e4b0 <_printf_i+0x20c>
 801e386:	6821      	ldr	r1, [r4, #0]
 801e388:	f021 0104 	bic.w	r1, r1, #4
 801e38c:	6021      	str	r1, [r4, #0]
 801e38e:	2b00      	cmp	r3, #0
 801e390:	d13d      	bne.n	801e40e <_printf_i+0x16a>
 801e392:	2d00      	cmp	r5, #0
 801e394:	f040 808e 	bne.w	801e4b4 <_printf_i+0x210>
 801e398:	4665      	mov	r5, ip
 801e39a:	2a08      	cmp	r2, #8
 801e39c:	d10b      	bne.n	801e3b6 <_printf_i+0x112>
 801e39e:	6823      	ldr	r3, [r4, #0]
 801e3a0:	07db      	lsls	r3, r3, #31
 801e3a2:	d508      	bpl.n	801e3b6 <_printf_i+0x112>
 801e3a4:	6923      	ldr	r3, [r4, #16]
 801e3a6:	6862      	ldr	r2, [r4, #4]
 801e3a8:	429a      	cmp	r2, r3
 801e3aa:	bfde      	ittt	le
 801e3ac:	2330      	movle	r3, #48	; 0x30
 801e3ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 801e3b2:	f105 35ff 	addle.w	r5, r5, #4294967295
 801e3b6:	ebac 0305 	sub.w	r3, ip, r5
 801e3ba:	6123      	str	r3, [r4, #16]
 801e3bc:	f8cd 8000 	str.w	r8, [sp]
 801e3c0:	463b      	mov	r3, r7
 801e3c2:	aa03      	add	r2, sp, #12
 801e3c4:	4621      	mov	r1, r4
 801e3c6:	4630      	mov	r0, r6
 801e3c8:	f7ff fef6 	bl	801e1b8 <_printf_common>
 801e3cc:	3001      	adds	r0, #1
 801e3ce:	d14d      	bne.n	801e46c <_printf_i+0x1c8>
 801e3d0:	f04f 30ff 	mov.w	r0, #4294967295
 801e3d4:	b005      	add	sp, #20
 801e3d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e3da:	4839      	ldr	r0, [pc, #228]	; (801e4c0 <_printf_i+0x21c>)
 801e3dc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801e3e0:	6813      	ldr	r3, [r2, #0]
 801e3e2:	6821      	ldr	r1, [r4, #0]
 801e3e4:	1d1d      	adds	r5, r3, #4
 801e3e6:	681b      	ldr	r3, [r3, #0]
 801e3e8:	6015      	str	r5, [r2, #0]
 801e3ea:	060a      	lsls	r2, r1, #24
 801e3ec:	d50b      	bpl.n	801e406 <_printf_i+0x162>
 801e3ee:	07ca      	lsls	r2, r1, #31
 801e3f0:	bf44      	itt	mi
 801e3f2:	f041 0120 	orrmi.w	r1, r1, #32
 801e3f6:	6021      	strmi	r1, [r4, #0]
 801e3f8:	b91b      	cbnz	r3, 801e402 <_printf_i+0x15e>
 801e3fa:	6822      	ldr	r2, [r4, #0]
 801e3fc:	f022 0220 	bic.w	r2, r2, #32
 801e400:	6022      	str	r2, [r4, #0]
 801e402:	2210      	movs	r2, #16
 801e404:	e7b7      	b.n	801e376 <_printf_i+0xd2>
 801e406:	064d      	lsls	r5, r1, #25
 801e408:	bf48      	it	mi
 801e40a:	b29b      	uxthmi	r3, r3
 801e40c:	e7ef      	b.n	801e3ee <_printf_i+0x14a>
 801e40e:	4665      	mov	r5, ip
 801e410:	fbb3 f1f2 	udiv	r1, r3, r2
 801e414:	fb02 3311 	mls	r3, r2, r1, r3
 801e418:	5cc3      	ldrb	r3, [r0, r3]
 801e41a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801e41e:	460b      	mov	r3, r1
 801e420:	2900      	cmp	r1, #0
 801e422:	d1f5      	bne.n	801e410 <_printf_i+0x16c>
 801e424:	e7b9      	b.n	801e39a <_printf_i+0xf6>
 801e426:	6813      	ldr	r3, [r2, #0]
 801e428:	6825      	ldr	r5, [r4, #0]
 801e42a:	6961      	ldr	r1, [r4, #20]
 801e42c:	1d18      	adds	r0, r3, #4
 801e42e:	6010      	str	r0, [r2, #0]
 801e430:	0628      	lsls	r0, r5, #24
 801e432:	681b      	ldr	r3, [r3, #0]
 801e434:	d501      	bpl.n	801e43a <_printf_i+0x196>
 801e436:	6019      	str	r1, [r3, #0]
 801e438:	e002      	b.n	801e440 <_printf_i+0x19c>
 801e43a:	066a      	lsls	r2, r5, #25
 801e43c:	d5fb      	bpl.n	801e436 <_printf_i+0x192>
 801e43e:	8019      	strh	r1, [r3, #0]
 801e440:	2300      	movs	r3, #0
 801e442:	6123      	str	r3, [r4, #16]
 801e444:	4665      	mov	r5, ip
 801e446:	e7b9      	b.n	801e3bc <_printf_i+0x118>
 801e448:	6813      	ldr	r3, [r2, #0]
 801e44a:	1d19      	adds	r1, r3, #4
 801e44c:	6011      	str	r1, [r2, #0]
 801e44e:	681d      	ldr	r5, [r3, #0]
 801e450:	6862      	ldr	r2, [r4, #4]
 801e452:	2100      	movs	r1, #0
 801e454:	4628      	mov	r0, r5
 801e456:	f7e1 ff5b 	bl	8000310 <memchr>
 801e45a:	b108      	cbz	r0, 801e460 <_printf_i+0x1bc>
 801e45c:	1b40      	subs	r0, r0, r5
 801e45e:	6060      	str	r0, [r4, #4]
 801e460:	6863      	ldr	r3, [r4, #4]
 801e462:	6123      	str	r3, [r4, #16]
 801e464:	2300      	movs	r3, #0
 801e466:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e46a:	e7a7      	b.n	801e3bc <_printf_i+0x118>
 801e46c:	6923      	ldr	r3, [r4, #16]
 801e46e:	462a      	mov	r2, r5
 801e470:	4639      	mov	r1, r7
 801e472:	4630      	mov	r0, r6
 801e474:	47c0      	blx	r8
 801e476:	3001      	adds	r0, #1
 801e478:	d0aa      	beq.n	801e3d0 <_printf_i+0x12c>
 801e47a:	6823      	ldr	r3, [r4, #0]
 801e47c:	079b      	lsls	r3, r3, #30
 801e47e:	d413      	bmi.n	801e4a8 <_printf_i+0x204>
 801e480:	68e0      	ldr	r0, [r4, #12]
 801e482:	9b03      	ldr	r3, [sp, #12]
 801e484:	4298      	cmp	r0, r3
 801e486:	bfb8      	it	lt
 801e488:	4618      	movlt	r0, r3
 801e48a:	e7a3      	b.n	801e3d4 <_printf_i+0x130>
 801e48c:	2301      	movs	r3, #1
 801e48e:	464a      	mov	r2, r9
 801e490:	4639      	mov	r1, r7
 801e492:	4630      	mov	r0, r6
 801e494:	47c0      	blx	r8
 801e496:	3001      	adds	r0, #1
 801e498:	d09a      	beq.n	801e3d0 <_printf_i+0x12c>
 801e49a:	3501      	adds	r5, #1
 801e49c:	68e3      	ldr	r3, [r4, #12]
 801e49e:	9a03      	ldr	r2, [sp, #12]
 801e4a0:	1a9b      	subs	r3, r3, r2
 801e4a2:	42ab      	cmp	r3, r5
 801e4a4:	dcf2      	bgt.n	801e48c <_printf_i+0x1e8>
 801e4a6:	e7eb      	b.n	801e480 <_printf_i+0x1dc>
 801e4a8:	2500      	movs	r5, #0
 801e4aa:	f104 0919 	add.w	r9, r4, #25
 801e4ae:	e7f5      	b.n	801e49c <_printf_i+0x1f8>
 801e4b0:	2b00      	cmp	r3, #0
 801e4b2:	d1ac      	bne.n	801e40e <_printf_i+0x16a>
 801e4b4:	7803      	ldrb	r3, [r0, #0]
 801e4b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801e4ba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e4be:	e76c      	b.n	801e39a <_printf_i+0xf6>
 801e4c0:	080246a6 	.word	0x080246a6
 801e4c4:	080246b7 	.word	0x080246b7

0801e4c8 <_sbrk_r>:
 801e4c8:	b538      	push	{r3, r4, r5, lr}
 801e4ca:	4c06      	ldr	r4, [pc, #24]	; (801e4e4 <_sbrk_r+0x1c>)
 801e4cc:	2300      	movs	r3, #0
 801e4ce:	4605      	mov	r5, r0
 801e4d0:	4608      	mov	r0, r1
 801e4d2:	6023      	str	r3, [r4, #0]
 801e4d4:	f001 fd0a 	bl	801feec <_sbrk>
 801e4d8:	1c43      	adds	r3, r0, #1
 801e4da:	d102      	bne.n	801e4e2 <_sbrk_r+0x1a>
 801e4dc:	6823      	ldr	r3, [r4, #0]
 801e4de:	b103      	cbz	r3, 801e4e2 <_sbrk_r+0x1a>
 801e4e0:	602b      	str	r3, [r5, #0]
 801e4e2:	bd38      	pop	{r3, r4, r5, pc}
 801e4e4:	240058ec 	.word	0x240058ec

0801e4e8 <siprintf>:
 801e4e8:	b40e      	push	{r1, r2, r3}
 801e4ea:	b500      	push	{lr}
 801e4ec:	b09c      	sub	sp, #112	; 0x70
 801e4ee:	ab1d      	add	r3, sp, #116	; 0x74
 801e4f0:	9002      	str	r0, [sp, #8]
 801e4f2:	9006      	str	r0, [sp, #24]
 801e4f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801e4f8:	4809      	ldr	r0, [pc, #36]	; (801e520 <siprintf+0x38>)
 801e4fa:	9107      	str	r1, [sp, #28]
 801e4fc:	9104      	str	r1, [sp, #16]
 801e4fe:	4909      	ldr	r1, [pc, #36]	; (801e524 <siprintf+0x3c>)
 801e500:	f853 2b04 	ldr.w	r2, [r3], #4
 801e504:	9105      	str	r1, [sp, #20]
 801e506:	6800      	ldr	r0, [r0, #0]
 801e508:	9301      	str	r3, [sp, #4]
 801e50a:	a902      	add	r1, sp, #8
 801e50c:	f001 f972 	bl	801f7f4 <_svfiprintf_r>
 801e510:	9b02      	ldr	r3, [sp, #8]
 801e512:	2200      	movs	r2, #0
 801e514:	701a      	strb	r2, [r3, #0]
 801e516:	b01c      	add	sp, #112	; 0x70
 801e518:	f85d eb04 	ldr.w	lr, [sp], #4
 801e51c:	b003      	add	sp, #12
 801e51e:	4770      	bx	lr
 801e520:	24002600 	.word	0x24002600
 801e524:	ffff0208 	.word	0xffff0208

0801e528 <stpcpy>:
 801e528:	4603      	mov	r3, r0
 801e52a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e52e:	4618      	mov	r0, r3
 801e530:	f803 2b01 	strb.w	r2, [r3], #1
 801e534:	2a00      	cmp	r2, #0
 801e536:	d1f8      	bne.n	801e52a <stpcpy+0x2>
 801e538:	4770      	bx	lr

0801e53a <strcpy>:
 801e53a:	4603      	mov	r3, r0
 801e53c:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e540:	f803 2b01 	strb.w	r2, [r3], #1
 801e544:	2a00      	cmp	r2, #0
 801e546:	d1f9      	bne.n	801e53c <strcpy+0x2>
 801e548:	4770      	bx	lr

0801e54a <quorem>:
 801e54a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e54e:	6903      	ldr	r3, [r0, #16]
 801e550:	690c      	ldr	r4, [r1, #16]
 801e552:	42a3      	cmp	r3, r4
 801e554:	4680      	mov	r8, r0
 801e556:	f2c0 8082 	blt.w	801e65e <quorem+0x114>
 801e55a:	3c01      	subs	r4, #1
 801e55c:	f101 0714 	add.w	r7, r1, #20
 801e560:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801e564:	f100 0614 	add.w	r6, r0, #20
 801e568:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801e56c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801e570:	eb06 030c 	add.w	r3, r6, ip
 801e574:	3501      	adds	r5, #1
 801e576:	eb07 090c 	add.w	r9, r7, ip
 801e57a:	9301      	str	r3, [sp, #4]
 801e57c:	fbb0 f5f5 	udiv	r5, r0, r5
 801e580:	b395      	cbz	r5, 801e5e8 <quorem+0x9e>
 801e582:	f04f 0a00 	mov.w	sl, #0
 801e586:	4638      	mov	r0, r7
 801e588:	46b6      	mov	lr, r6
 801e58a:	46d3      	mov	fp, sl
 801e58c:	f850 2b04 	ldr.w	r2, [r0], #4
 801e590:	b293      	uxth	r3, r2
 801e592:	fb05 a303 	mla	r3, r5, r3, sl
 801e596:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801e59a:	b29b      	uxth	r3, r3
 801e59c:	ebab 0303 	sub.w	r3, fp, r3
 801e5a0:	0c12      	lsrs	r2, r2, #16
 801e5a2:	f8de b000 	ldr.w	fp, [lr]
 801e5a6:	fb05 a202 	mla	r2, r5, r2, sl
 801e5aa:	fa13 f38b 	uxtah	r3, r3, fp
 801e5ae:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801e5b2:	fa1f fb82 	uxth.w	fp, r2
 801e5b6:	f8de 2000 	ldr.w	r2, [lr]
 801e5ba:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 801e5be:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801e5c2:	b29b      	uxth	r3, r3
 801e5c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e5c8:	4581      	cmp	r9, r0
 801e5ca:	ea4f 4b22 	mov.w	fp, r2, asr #16
 801e5ce:	f84e 3b04 	str.w	r3, [lr], #4
 801e5d2:	d2db      	bcs.n	801e58c <quorem+0x42>
 801e5d4:	f856 300c 	ldr.w	r3, [r6, ip]
 801e5d8:	b933      	cbnz	r3, 801e5e8 <quorem+0x9e>
 801e5da:	9b01      	ldr	r3, [sp, #4]
 801e5dc:	3b04      	subs	r3, #4
 801e5de:	429e      	cmp	r6, r3
 801e5e0:	461a      	mov	r2, r3
 801e5e2:	d330      	bcc.n	801e646 <quorem+0xfc>
 801e5e4:	f8c8 4010 	str.w	r4, [r8, #16]
 801e5e8:	4640      	mov	r0, r8
 801e5ea:	f000 ffaf 	bl	801f54c <__mcmp>
 801e5ee:	2800      	cmp	r0, #0
 801e5f0:	db25      	blt.n	801e63e <quorem+0xf4>
 801e5f2:	3501      	adds	r5, #1
 801e5f4:	4630      	mov	r0, r6
 801e5f6:	f04f 0c00 	mov.w	ip, #0
 801e5fa:	f857 2b04 	ldr.w	r2, [r7], #4
 801e5fe:	f8d0 e000 	ldr.w	lr, [r0]
 801e602:	b293      	uxth	r3, r2
 801e604:	ebac 0303 	sub.w	r3, ip, r3
 801e608:	0c12      	lsrs	r2, r2, #16
 801e60a:	fa13 f38e 	uxtah	r3, r3, lr
 801e60e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801e612:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801e616:	b29b      	uxth	r3, r3
 801e618:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e61c:	45b9      	cmp	r9, r7
 801e61e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801e622:	f840 3b04 	str.w	r3, [r0], #4
 801e626:	d2e8      	bcs.n	801e5fa <quorem+0xb0>
 801e628:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801e62c:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801e630:	b92a      	cbnz	r2, 801e63e <quorem+0xf4>
 801e632:	3b04      	subs	r3, #4
 801e634:	429e      	cmp	r6, r3
 801e636:	461a      	mov	r2, r3
 801e638:	d30b      	bcc.n	801e652 <quorem+0x108>
 801e63a:	f8c8 4010 	str.w	r4, [r8, #16]
 801e63e:	4628      	mov	r0, r5
 801e640:	b003      	add	sp, #12
 801e642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e646:	6812      	ldr	r2, [r2, #0]
 801e648:	3b04      	subs	r3, #4
 801e64a:	2a00      	cmp	r2, #0
 801e64c:	d1ca      	bne.n	801e5e4 <quorem+0x9a>
 801e64e:	3c01      	subs	r4, #1
 801e650:	e7c5      	b.n	801e5de <quorem+0x94>
 801e652:	6812      	ldr	r2, [r2, #0]
 801e654:	3b04      	subs	r3, #4
 801e656:	2a00      	cmp	r2, #0
 801e658:	d1ef      	bne.n	801e63a <quorem+0xf0>
 801e65a:	3c01      	subs	r4, #1
 801e65c:	e7ea      	b.n	801e634 <quorem+0xea>
 801e65e:	2000      	movs	r0, #0
 801e660:	e7ee      	b.n	801e640 <quorem+0xf6>
 801e662:	0000      	movs	r0, r0
 801e664:	0000      	movs	r0, r0
	...

0801e668 <_dtoa_r>:
 801e668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e66c:	ec57 6b10 	vmov	r6, r7, d0
 801e670:	b095      	sub	sp, #84	; 0x54
 801e672:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801e674:	9108      	str	r1, [sp, #32]
 801e676:	4604      	mov	r4, r0
 801e678:	920a      	str	r2, [sp, #40]	; 0x28
 801e67a:	9311      	str	r3, [sp, #68]	; 0x44
 801e67c:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 801e680:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801e684:	b93d      	cbnz	r5, 801e696 <_dtoa_r+0x2e>
 801e686:	2010      	movs	r0, #16
 801e688:	f7ff fa16 	bl	801dab8 <malloc>
 801e68c:	6260      	str	r0, [r4, #36]	; 0x24
 801e68e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801e692:	6005      	str	r5, [r0, #0]
 801e694:	60c5      	str	r5, [r0, #12]
 801e696:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e698:	6819      	ldr	r1, [r3, #0]
 801e69a:	b151      	cbz	r1, 801e6b2 <_dtoa_r+0x4a>
 801e69c:	685a      	ldr	r2, [r3, #4]
 801e69e:	604a      	str	r2, [r1, #4]
 801e6a0:	2301      	movs	r3, #1
 801e6a2:	4093      	lsls	r3, r2
 801e6a4:	608b      	str	r3, [r1, #8]
 801e6a6:	4620      	mov	r0, r4
 801e6a8:	f000 fd6e 	bl	801f188 <_Bfree>
 801e6ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e6ae:	2200      	movs	r2, #0
 801e6b0:	601a      	str	r2, [r3, #0]
 801e6b2:	1e3b      	subs	r3, r7, #0
 801e6b4:	bfb9      	ittee	lt
 801e6b6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801e6ba:	9303      	strlt	r3, [sp, #12]
 801e6bc:	2300      	movge	r3, #0
 801e6be:	f8c8 3000 	strge.w	r3, [r8]
 801e6c2:	9d03      	ldr	r5, [sp, #12]
 801e6c4:	4bac      	ldr	r3, [pc, #688]	; (801e978 <_dtoa_r+0x310>)
 801e6c6:	bfbc      	itt	lt
 801e6c8:	2201      	movlt	r2, #1
 801e6ca:	f8c8 2000 	strlt.w	r2, [r8]
 801e6ce:	43ab      	bics	r3, r5
 801e6d0:	d11b      	bne.n	801e70a <_dtoa_r+0xa2>
 801e6d2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e6d4:	f242 730f 	movw	r3, #9999	; 0x270f
 801e6d8:	6013      	str	r3, [r2, #0]
 801e6da:	9b02      	ldr	r3, [sp, #8]
 801e6dc:	b923      	cbnz	r3, 801e6e8 <_dtoa_r+0x80>
 801e6de:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801e6e2:	2d00      	cmp	r5, #0
 801e6e4:	f000 84dd 	beq.w	801f0a2 <_dtoa_r+0xa3a>
 801e6e8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801e6ea:	b953      	cbnz	r3, 801e702 <_dtoa_r+0x9a>
 801e6ec:	4ba3      	ldr	r3, [pc, #652]	; (801e97c <_dtoa_r+0x314>)
 801e6ee:	e020      	b.n	801e732 <_dtoa_r+0xca>
 801e6f0:	4ba3      	ldr	r3, [pc, #652]	; (801e980 <_dtoa_r+0x318>)
 801e6f2:	9304      	str	r3, [sp, #16]
 801e6f4:	3308      	adds	r3, #8
 801e6f6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801e6f8:	6013      	str	r3, [r2, #0]
 801e6fa:	9804      	ldr	r0, [sp, #16]
 801e6fc:	b015      	add	sp, #84	; 0x54
 801e6fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e702:	4b9e      	ldr	r3, [pc, #632]	; (801e97c <_dtoa_r+0x314>)
 801e704:	9304      	str	r3, [sp, #16]
 801e706:	3303      	adds	r3, #3
 801e708:	e7f5      	b.n	801e6f6 <_dtoa_r+0x8e>
 801e70a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801e70e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801e712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e716:	ed8d 7b04 	vstr	d7, [sp, #16]
 801e71a:	d10c      	bne.n	801e736 <_dtoa_r+0xce>
 801e71c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e71e:	2301      	movs	r3, #1
 801e720:	6013      	str	r3, [r2, #0]
 801e722:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801e724:	2b00      	cmp	r3, #0
 801e726:	f000 84b9 	beq.w	801f09c <_dtoa_r+0xa34>
 801e72a:	4b96      	ldr	r3, [pc, #600]	; (801e984 <_dtoa_r+0x31c>)
 801e72c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801e72e:	6013      	str	r3, [r2, #0]
 801e730:	3b01      	subs	r3, #1
 801e732:	9304      	str	r3, [sp, #16]
 801e734:	e7e1      	b.n	801e6fa <_dtoa_r+0x92>
 801e736:	a913      	add	r1, sp, #76	; 0x4c
 801e738:	aa12      	add	r2, sp, #72	; 0x48
 801e73a:	ed9d 0b04 	vldr	d0, [sp, #16]
 801e73e:	4620      	mov	r0, r4
 801e740:	f000 ff7b 	bl	801f63a <__d2b>
 801e744:	f3c5 560a 	ubfx	r6, r5, #20, #11
 801e748:	9001      	str	r0, [sp, #4]
 801e74a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e74c:	2e00      	cmp	r6, #0
 801e74e:	d046      	beq.n	801e7de <_dtoa_r+0x176>
 801e750:	9805      	ldr	r0, [sp, #20]
 801e752:	f3c0 0013 	ubfx	r0, r0, #0, #20
 801e756:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801e75a:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 801e75e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801e762:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 801e766:	2700      	movs	r7, #0
 801e768:	ee07 aa90 	vmov	s15, sl
 801e76c:	ec43 2b16 	vmov	d6, r2, r3
 801e770:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801e774:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 801e960 <_dtoa_r+0x2f8>
 801e778:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801e77c:	ee36 7b47 	vsub.f64	d7, d6, d7
 801e780:	ed9f 6b79 	vldr	d6, [pc, #484]	; 801e968 <_dtoa_r+0x300>
 801e784:	eea7 6b04 	vfma.f64	d6, d7, d4
 801e788:	eeb0 7b46 	vmov.f64	d7, d6
 801e78c:	ed9f 6b78 	vldr	d6, [pc, #480]	; 801e970 <_dtoa_r+0x308>
 801e790:	eea5 7b06 	vfma.f64	d7, d5, d6
 801e794:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801e798:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801e79c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e7a0:	ee16 ba90 	vmov	fp, s13
 801e7a4:	d508      	bpl.n	801e7b8 <_dtoa_r+0x150>
 801e7a6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801e7aa:	eeb4 6b47 	vcmp.f64	d6, d7
 801e7ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e7b2:	bf18      	it	ne
 801e7b4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801e7b8:	f1bb 0f16 	cmp.w	fp, #22
 801e7bc:	d834      	bhi.n	801e828 <_dtoa_r+0x1c0>
 801e7be:	4b72      	ldr	r3, [pc, #456]	; (801e988 <_dtoa_r+0x320>)
 801e7c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801e7c4:	ed93 7b00 	vldr	d7, [r3]
 801e7c8:	ed9d 6b02 	vldr	d6, [sp, #8]
 801e7cc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801e7d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e7d4:	dd01      	ble.n	801e7da <_dtoa_r+0x172>
 801e7d6:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e7da:	2300      	movs	r3, #0
 801e7dc:	e025      	b.n	801e82a <_dtoa_r+0x1c2>
 801e7de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e7e0:	eb01 0a03 	add.w	sl, r1, r3
 801e7e4:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 801e7e8:	2b20      	cmp	r3, #32
 801e7ea:	dd17      	ble.n	801e81c <_dtoa_r+0x1b4>
 801e7ec:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 801e7f0:	9a02      	ldr	r2, [sp, #8]
 801e7f2:	409d      	lsls	r5, r3
 801e7f4:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 801e7f8:	fa22 f303 	lsr.w	r3, r2, r3
 801e7fc:	432b      	orrs	r3, r5
 801e7fe:	ee07 3a90 	vmov	s15, r3
 801e802:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801e806:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e80a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801e80e:	9805      	ldr	r0, [sp, #20]
 801e810:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801e814:	2701      	movs	r7, #1
 801e816:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 801e81a:	e7a5      	b.n	801e768 <_dtoa_r+0x100>
 801e81c:	9a02      	ldr	r2, [sp, #8]
 801e81e:	f1c3 0320 	rsb	r3, r3, #32
 801e822:	fa02 f303 	lsl.w	r3, r2, r3
 801e826:	e7ea      	b.n	801e7fe <_dtoa_r+0x196>
 801e828:	2301      	movs	r3, #1
 801e82a:	eba1 0a0a 	sub.w	sl, r1, sl
 801e82e:	9310      	str	r3, [sp, #64]	; 0x40
 801e830:	f1ba 0301 	subs.w	r3, sl, #1
 801e834:	9307      	str	r3, [sp, #28]
 801e836:	bf43      	ittte	mi
 801e838:	2300      	movmi	r3, #0
 801e83a:	f1ca 0a01 	rsbmi	sl, sl, #1
 801e83e:	9307      	strmi	r3, [sp, #28]
 801e840:	f04f 0a00 	movpl.w	sl, #0
 801e844:	f1bb 0f00 	cmp.w	fp, #0
 801e848:	db19      	blt.n	801e87e <_dtoa_r+0x216>
 801e84a:	9b07      	ldr	r3, [sp, #28]
 801e84c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801e850:	445b      	add	r3, fp
 801e852:	9307      	str	r3, [sp, #28]
 801e854:	f04f 0800 	mov.w	r8, #0
 801e858:	9b08      	ldr	r3, [sp, #32]
 801e85a:	2b09      	cmp	r3, #9
 801e85c:	d866      	bhi.n	801e92c <_dtoa_r+0x2c4>
 801e85e:	2b05      	cmp	r3, #5
 801e860:	bfc4      	itt	gt
 801e862:	3b04      	subgt	r3, #4
 801e864:	9308      	strgt	r3, [sp, #32]
 801e866:	9b08      	ldr	r3, [sp, #32]
 801e868:	f1a3 0302 	sub.w	r3, r3, #2
 801e86c:	bfcc      	ite	gt
 801e86e:	2500      	movgt	r5, #0
 801e870:	2501      	movle	r5, #1
 801e872:	2b03      	cmp	r3, #3
 801e874:	d866      	bhi.n	801e944 <_dtoa_r+0x2dc>
 801e876:	e8df f003 	tbb	[pc, r3]
 801e87a:	5755      	.short	0x5755
 801e87c:	4909      	.short	0x4909
 801e87e:	2300      	movs	r3, #0
 801e880:	ebaa 0a0b 	sub.w	sl, sl, fp
 801e884:	f1cb 0800 	rsb	r8, fp, #0
 801e888:	930b      	str	r3, [sp, #44]	; 0x2c
 801e88a:	e7e5      	b.n	801e858 <_dtoa_r+0x1f0>
 801e88c:	2301      	movs	r3, #1
 801e88e:	9309      	str	r3, [sp, #36]	; 0x24
 801e890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e892:	2b00      	cmp	r3, #0
 801e894:	dd59      	ble.n	801e94a <_dtoa_r+0x2e2>
 801e896:	9306      	str	r3, [sp, #24]
 801e898:	4699      	mov	r9, r3
 801e89a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801e89c:	2200      	movs	r2, #0
 801e89e:	6072      	str	r2, [r6, #4]
 801e8a0:	2204      	movs	r2, #4
 801e8a2:	f102 0014 	add.w	r0, r2, #20
 801e8a6:	4298      	cmp	r0, r3
 801e8a8:	6871      	ldr	r1, [r6, #4]
 801e8aa:	d953      	bls.n	801e954 <_dtoa_r+0x2ec>
 801e8ac:	4620      	mov	r0, r4
 801e8ae:	f000 fc37 	bl	801f120 <_Balloc>
 801e8b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e8b4:	6030      	str	r0, [r6, #0]
 801e8b6:	681b      	ldr	r3, [r3, #0]
 801e8b8:	9304      	str	r3, [sp, #16]
 801e8ba:	f1b9 0f0e 	cmp.w	r9, #14
 801e8be:	f200 80c2 	bhi.w	801ea46 <_dtoa_r+0x3de>
 801e8c2:	2d00      	cmp	r5, #0
 801e8c4:	f000 80bf 	beq.w	801ea46 <_dtoa_r+0x3de>
 801e8c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 801e8cc:	f1bb 0f00 	cmp.w	fp, #0
 801e8d0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 801e8d4:	f340 80e6 	ble.w	801eaa4 <_dtoa_r+0x43c>
 801e8d8:	4a2b      	ldr	r2, [pc, #172]	; (801e988 <_dtoa_r+0x320>)
 801e8da:	f00b 030f 	and.w	r3, fp, #15
 801e8de:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801e8e2:	ed93 7b00 	vldr	d7, [r3]
 801e8e6:	ea4f 132b 	mov.w	r3, fp, asr #4
 801e8ea:	06da      	lsls	r2, r3, #27
 801e8ec:	f140 80d8 	bpl.w	801eaa0 <_dtoa_r+0x438>
 801e8f0:	4a26      	ldr	r2, [pc, #152]	; (801e98c <_dtoa_r+0x324>)
 801e8f2:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 801e8f6:	ed92 6b08 	vldr	d6, [r2, #32]
 801e8fa:	ee85 6b06 	vdiv.f64	d6, d5, d6
 801e8fe:	ed8d 6b02 	vstr	d6, [sp, #8]
 801e902:	f003 030f 	and.w	r3, r3, #15
 801e906:	2203      	movs	r2, #3
 801e908:	4920      	ldr	r1, [pc, #128]	; (801e98c <_dtoa_r+0x324>)
 801e90a:	e04a      	b.n	801e9a2 <_dtoa_r+0x33a>
 801e90c:	2301      	movs	r3, #1
 801e90e:	9309      	str	r3, [sp, #36]	; 0x24
 801e910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e912:	445b      	add	r3, fp
 801e914:	f103 0901 	add.w	r9, r3, #1
 801e918:	9306      	str	r3, [sp, #24]
 801e91a:	464b      	mov	r3, r9
 801e91c:	2b01      	cmp	r3, #1
 801e91e:	bfb8      	it	lt
 801e920:	2301      	movlt	r3, #1
 801e922:	e7ba      	b.n	801e89a <_dtoa_r+0x232>
 801e924:	2300      	movs	r3, #0
 801e926:	e7b2      	b.n	801e88e <_dtoa_r+0x226>
 801e928:	2300      	movs	r3, #0
 801e92a:	e7f0      	b.n	801e90e <_dtoa_r+0x2a6>
 801e92c:	2501      	movs	r5, #1
 801e92e:	2300      	movs	r3, #0
 801e930:	e9cd 3508 	strd	r3, r5, [sp, #32]
 801e934:	f04f 33ff 	mov.w	r3, #4294967295
 801e938:	9306      	str	r3, [sp, #24]
 801e93a:	4699      	mov	r9, r3
 801e93c:	2200      	movs	r2, #0
 801e93e:	2312      	movs	r3, #18
 801e940:	920a      	str	r2, [sp, #40]	; 0x28
 801e942:	e7aa      	b.n	801e89a <_dtoa_r+0x232>
 801e944:	2301      	movs	r3, #1
 801e946:	9309      	str	r3, [sp, #36]	; 0x24
 801e948:	e7f4      	b.n	801e934 <_dtoa_r+0x2cc>
 801e94a:	2301      	movs	r3, #1
 801e94c:	9306      	str	r3, [sp, #24]
 801e94e:	4699      	mov	r9, r3
 801e950:	461a      	mov	r2, r3
 801e952:	e7f5      	b.n	801e940 <_dtoa_r+0x2d8>
 801e954:	3101      	adds	r1, #1
 801e956:	6071      	str	r1, [r6, #4]
 801e958:	0052      	lsls	r2, r2, #1
 801e95a:	e7a2      	b.n	801e8a2 <_dtoa_r+0x23a>
 801e95c:	f3af 8000 	nop.w
 801e960:	636f4361 	.word	0x636f4361
 801e964:	3fd287a7 	.word	0x3fd287a7
 801e968:	8b60c8b3 	.word	0x8b60c8b3
 801e96c:	3fc68a28 	.word	0x3fc68a28
 801e970:	509f79fb 	.word	0x509f79fb
 801e974:	3fd34413 	.word	0x3fd34413
 801e978:	7ff00000 	.word	0x7ff00000
 801e97c:	080246d1 	.word	0x080246d1
 801e980:	080246c8 	.word	0x080246c8
 801e984:	080246a5 	.word	0x080246a5
 801e988:	08024700 	.word	0x08024700
 801e98c:	080246d8 	.word	0x080246d8
 801e990:	07de      	lsls	r6, r3, #31
 801e992:	d504      	bpl.n	801e99e <_dtoa_r+0x336>
 801e994:	ed91 6b00 	vldr	d6, [r1]
 801e998:	3201      	adds	r2, #1
 801e99a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801e99e:	105b      	asrs	r3, r3, #1
 801e9a0:	3108      	adds	r1, #8
 801e9a2:	2b00      	cmp	r3, #0
 801e9a4:	d1f4      	bne.n	801e990 <_dtoa_r+0x328>
 801e9a6:	ed9d 6b02 	vldr	d6, [sp, #8]
 801e9aa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801e9ae:	ed8d 7b02 	vstr	d7, [sp, #8]
 801e9b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e9b4:	2b00      	cmp	r3, #0
 801e9b6:	f000 80a7 	beq.w	801eb08 <_dtoa_r+0x4a0>
 801e9ba:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801e9be:	ed9d 7b02 	vldr	d7, [sp, #8]
 801e9c2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801e9c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e9ca:	f140 809d 	bpl.w	801eb08 <_dtoa_r+0x4a0>
 801e9ce:	f1b9 0f00 	cmp.w	r9, #0
 801e9d2:	f000 8099 	beq.w	801eb08 <_dtoa_r+0x4a0>
 801e9d6:	9b06      	ldr	r3, [sp, #24]
 801e9d8:	2b00      	cmp	r3, #0
 801e9da:	dd30      	ble.n	801ea3e <_dtoa_r+0x3d6>
 801e9dc:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801e9e0:	ee27 7b06 	vmul.f64	d7, d7, d6
 801e9e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 801e9e8:	9d06      	ldr	r5, [sp, #24]
 801e9ea:	f10b 33ff 	add.w	r3, fp, #4294967295
 801e9ee:	3201      	adds	r2, #1
 801e9f0:	ed9d 6b02 	vldr	d6, [sp, #8]
 801e9f4:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801e9f8:	ee07 2a90 	vmov	s15, r2
 801e9fc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801ea00:	eea7 5b06 	vfma.f64	d5, d7, d6
 801ea04:	ed8d 5b02 	vstr	d5, [sp, #8]
 801ea08:	9a03      	ldr	r2, [sp, #12]
 801ea0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ea0e:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 801ea12:	2d00      	cmp	r5, #0
 801ea14:	d17b      	bne.n	801eb0e <_dtoa_r+0x4a6>
 801ea16:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801ea1a:	ee36 6b47 	vsub.f64	d6, d6, d7
 801ea1e:	ec41 0b17 	vmov	d7, r0, r1
 801ea22:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801ea26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ea2a:	f300 8253 	bgt.w	801eed4 <_dtoa_r+0x86c>
 801ea2e:	eeb1 7b47 	vneg.f64	d7, d7
 801ea32:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801ea36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ea3a:	f100 8249 	bmi.w	801eed0 <_dtoa_r+0x868>
 801ea3e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801ea42:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801ea46:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ea48:	2b00      	cmp	r3, #0
 801ea4a:	f2c0 8119 	blt.w	801ec80 <_dtoa_r+0x618>
 801ea4e:	f1bb 0f0e 	cmp.w	fp, #14
 801ea52:	f300 8115 	bgt.w	801ec80 <_dtoa_r+0x618>
 801ea56:	4bc3      	ldr	r3, [pc, #780]	; (801ed64 <_dtoa_r+0x6fc>)
 801ea58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801ea5c:	ed93 6b00 	vldr	d6, [r3]
 801ea60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ea62:	2b00      	cmp	r3, #0
 801ea64:	f280 80ba 	bge.w	801ebdc <_dtoa_r+0x574>
 801ea68:	f1b9 0f00 	cmp.w	r9, #0
 801ea6c:	f300 80b6 	bgt.w	801ebdc <_dtoa_r+0x574>
 801ea70:	f040 822d 	bne.w	801eece <_dtoa_r+0x866>
 801ea74:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801ea78:	ee26 6b07 	vmul.f64	d6, d6, d7
 801ea7c:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ea80:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801ea84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ea88:	464d      	mov	r5, r9
 801ea8a:	464f      	mov	r7, r9
 801ea8c:	f280 8204 	bge.w	801ee98 <_dtoa_r+0x830>
 801ea90:	9b04      	ldr	r3, [sp, #16]
 801ea92:	9a04      	ldr	r2, [sp, #16]
 801ea94:	1c5e      	adds	r6, r3, #1
 801ea96:	2331      	movs	r3, #49	; 0x31
 801ea98:	7013      	strb	r3, [r2, #0]
 801ea9a:	f10b 0b01 	add.w	fp, fp, #1
 801ea9e:	e1ff      	b.n	801eea0 <_dtoa_r+0x838>
 801eaa0:	2202      	movs	r2, #2
 801eaa2:	e731      	b.n	801e908 <_dtoa_r+0x2a0>
 801eaa4:	d02e      	beq.n	801eb04 <_dtoa_r+0x49c>
 801eaa6:	f1cb 0300 	rsb	r3, fp, #0
 801eaaa:	4aae      	ldr	r2, [pc, #696]	; (801ed64 <_dtoa_r+0x6fc>)
 801eaac:	f003 010f 	and.w	r1, r3, #15
 801eab0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801eab4:	ed92 7b00 	vldr	d7, [r2]
 801eab8:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 801eabc:	ee26 7b07 	vmul.f64	d7, d6, d7
 801eac0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801eac4:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 801eac8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801eacc:	49a6      	ldr	r1, [pc, #664]	; (801ed68 <_dtoa_r+0x700>)
 801eace:	111b      	asrs	r3, r3, #4
 801ead0:	2000      	movs	r0, #0
 801ead2:	2202      	movs	r2, #2
 801ead4:	b93b      	cbnz	r3, 801eae6 <_dtoa_r+0x47e>
 801ead6:	2800      	cmp	r0, #0
 801ead8:	f43f af6b 	beq.w	801e9b2 <_dtoa_r+0x34a>
 801eadc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801eae0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801eae4:	e765      	b.n	801e9b2 <_dtoa_r+0x34a>
 801eae6:	07dd      	lsls	r5, r3, #31
 801eae8:	d509      	bpl.n	801eafe <_dtoa_r+0x496>
 801eaea:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 801eaee:	ed91 7b00 	vldr	d7, [r1]
 801eaf2:	ee26 7b07 	vmul.f64	d7, d6, d7
 801eaf6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801eafa:	3201      	adds	r2, #1
 801eafc:	2001      	movs	r0, #1
 801eafe:	105b      	asrs	r3, r3, #1
 801eb00:	3108      	adds	r1, #8
 801eb02:	e7e7      	b.n	801ead4 <_dtoa_r+0x46c>
 801eb04:	2202      	movs	r2, #2
 801eb06:	e754      	b.n	801e9b2 <_dtoa_r+0x34a>
 801eb08:	465b      	mov	r3, fp
 801eb0a:	464d      	mov	r5, r9
 801eb0c:	e770      	b.n	801e9f0 <_dtoa_r+0x388>
 801eb0e:	4a95      	ldr	r2, [pc, #596]	; (801ed64 <_dtoa_r+0x6fc>)
 801eb10:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 801eb14:	ed12 4b02 	vldr	d4, [r2, #-8]
 801eb18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801eb1a:	ec41 0b17 	vmov	d7, r0, r1
 801eb1e:	b35a      	cbz	r2, 801eb78 <_dtoa_r+0x510>
 801eb20:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801eb24:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801eb28:	9e04      	ldr	r6, [sp, #16]
 801eb2a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801eb2e:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801eb32:	ee35 7b47 	vsub.f64	d7, d5, d7
 801eb36:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801eb3a:	ee14 2a90 	vmov	r2, s9
 801eb3e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801eb42:	3230      	adds	r2, #48	; 0x30
 801eb44:	ee36 6b45 	vsub.f64	d6, d6, d5
 801eb48:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801eb4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eb50:	f806 2b01 	strb.w	r2, [r6], #1
 801eb54:	d43b      	bmi.n	801ebce <_dtoa_r+0x566>
 801eb56:	ee32 5b46 	vsub.f64	d5, d2, d6
 801eb5a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801eb5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eb62:	d472      	bmi.n	801ec4a <_dtoa_r+0x5e2>
 801eb64:	9a04      	ldr	r2, [sp, #16]
 801eb66:	1ab2      	subs	r2, r6, r2
 801eb68:	4295      	cmp	r5, r2
 801eb6a:	f77f af68 	ble.w	801ea3e <_dtoa_r+0x3d6>
 801eb6e:	ee27 7b03 	vmul.f64	d7, d7, d3
 801eb72:	ee26 6b03 	vmul.f64	d6, d6, d3
 801eb76:	e7de      	b.n	801eb36 <_dtoa_r+0x4ce>
 801eb78:	9a04      	ldr	r2, [sp, #16]
 801eb7a:	ee24 7b07 	vmul.f64	d7, d4, d7
 801eb7e:	1956      	adds	r6, r2, r5
 801eb80:	4611      	mov	r1, r2
 801eb82:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801eb86:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801eb8a:	ee14 2a90 	vmov	r2, s9
 801eb8e:	3230      	adds	r2, #48	; 0x30
 801eb90:	f801 2b01 	strb.w	r2, [r1], #1
 801eb94:	42b1      	cmp	r1, r6
 801eb96:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801eb9a:	ee36 6b45 	vsub.f64	d6, d6, d5
 801eb9e:	d11a      	bne.n	801ebd6 <_dtoa_r+0x56e>
 801eba0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801eba4:	ee37 4b05 	vadd.f64	d4, d7, d5
 801eba8:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801ebac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ebb0:	dc4b      	bgt.n	801ec4a <_dtoa_r+0x5e2>
 801ebb2:	ee35 7b47 	vsub.f64	d7, d5, d7
 801ebb6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801ebba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ebbe:	f57f af3e 	bpl.w	801ea3e <_dtoa_r+0x3d6>
 801ebc2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801ebc6:	2a30      	cmp	r2, #48	; 0x30
 801ebc8:	f106 31ff 	add.w	r1, r6, #4294967295
 801ebcc:	d001      	beq.n	801ebd2 <_dtoa_r+0x56a>
 801ebce:	469b      	mov	fp, r3
 801ebd0:	e02a      	b.n	801ec28 <_dtoa_r+0x5c0>
 801ebd2:	460e      	mov	r6, r1
 801ebd4:	e7f5      	b.n	801ebc2 <_dtoa_r+0x55a>
 801ebd6:	ee26 6b03 	vmul.f64	d6, d6, d3
 801ebda:	e7d4      	b.n	801eb86 <_dtoa_r+0x51e>
 801ebdc:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ebe0:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801ebe4:	9e04      	ldr	r6, [sp, #16]
 801ebe6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801ebea:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801ebee:	ee15 3a10 	vmov	r3, s10
 801ebf2:	3330      	adds	r3, #48	; 0x30
 801ebf4:	f806 3b01 	strb.w	r3, [r6], #1
 801ebf8:	9b04      	ldr	r3, [sp, #16]
 801ebfa:	1af3      	subs	r3, r6, r3
 801ebfc:	4599      	cmp	r9, r3
 801ebfe:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801ec02:	eea3 7b46 	vfms.f64	d7, d3, d6
 801ec06:	d133      	bne.n	801ec70 <_dtoa_r+0x608>
 801ec08:	ee37 7b07 	vadd.f64	d7, d7, d7
 801ec0c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801ec10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ec14:	dc18      	bgt.n	801ec48 <_dtoa_r+0x5e0>
 801ec16:	eeb4 7b46 	vcmp.f64	d7, d6
 801ec1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ec1e:	d103      	bne.n	801ec28 <_dtoa_r+0x5c0>
 801ec20:	ee15 3a10 	vmov	r3, s10
 801ec24:	07db      	lsls	r3, r3, #31
 801ec26:	d40f      	bmi.n	801ec48 <_dtoa_r+0x5e0>
 801ec28:	9901      	ldr	r1, [sp, #4]
 801ec2a:	4620      	mov	r0, r4
 801ec2c:	f000 faac 	bl	801f188 <_Bfree>
 801ec30:	2300      	movs	r3, #0
 801ec32:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ec34:	7033      	strb	r3, [r6, #0]
 801ec36:	f10b 0301 	add.w	r3, fp, #1
 801ec3a:	6013      	str	r3, [r2, #0]
 801ec3c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801ec3e:	2b00      	cmp	r3, #0
 801ec40:	f43f ad5b 	beq.w	801e6fa <_dtoa_r+0x92>
 801ec44:	601e      	str	r6, [r3, #0]
 801ec46:	e558      	b.n	801e6fa <_dtoa_r+0x92>
 801ec48:	465b      	mov	r3, fp
 801ec4a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801ec4e:	2939      	cmp	r1, #57	; 0x39
 801ec50:	f106 32ff 	add.w	r2, r6, #4294967295
 801ec54:	d106      	bne.n	801ec64 <_dtoa_r+0x5fc>
 801ec56:	9904      	ldr	r1, [sp, #16]
 801ec58:	4291      	cmp	r1, r2
 801ec5a:	d107      	bne.n	801ec6c <_dtoa_r+0x604>
 801ec5c:	2230      	movs	r2, #48	; 0x30
 801ec5e:	700a      	strb	r2, [r1, #0]
 801ec60:	3301      	adds	r3, #1
 801ec62:	460a      	mov	r2, r1
 801ec64:	7811      	ldrb	r1, [r2, #0]
 801ec66:	3101      	adds	r1, #1
 801ec68:	7011      	strb	r1, [r2, #0]
 801ec6a:	e7b0      	b.n	801ebce <_dtoa_r+0x566>
 801ec6c:	4616      	mov	r6, r2
 801ec6e:	e7ec      	b.n	801ec4a <_dtoa_r+0x5e2>
 801ec70:	ee27 7b04 	vmul.f64	d7, d7, d4
 801ec74:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801ec78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ec7c:	d1b3      	bne.n	801ebe6 <_dtoa_r+0x57e>
 801ec7e:	e7d3      	b.n	801ec28 <_dtoa_r+0x5c0>
 801ec80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ec82:	2a00      	cmp	r2, #0
 801ec84:	f000 808d 	beq.w	801eda2 <_dtoa_r+0x73a>
 801ec88:	9a08      	ldr	r2, [sp, #32]
 801ec8a:	2a01      	cmp	r2, #1
 801ec8c:	dc72      	bgt.n	801ed74 <_dtoa_r+0x70c>
 801ec8e:	2f00      	cmp	r7, #0
 801ec90:	d06c      	beq.n	801ed6c <_dtoa_r+0x704>
 801ec92:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801ec96:	4645      	mov	r5, r8
 801ec98:	4656      	mov	r6, sl
 801ec9a:	9a07      	ldr	r2, [sp, #28]
 801ec9c:	2101      	movs	r1, #1
 801ec9e:	441a      	add	r2, r3
 801eca0:	4620      	mov	r0, r4
 801eca2:	449a      	add	sl, r3
 801eca4:	9207      	str	r2, [sp, #28]
 801eca6:	f000 fb0f 	bl	801f2c8 <__i2b>
 801ecaa:	4607      	mov	r7, r0
 801ecac:	2e00      	cmp	r6, #0
 801ecae:	dd0b      	ble.n	801ecc8 <_dtoa_r+0x660>
 801ecb0:	9b07      	ldr	r3, [sp, #28]
 801ecb2:	2b00      	cmp	r3, #0
 801ecb4:	dd08      	ble.n	801ecc8 <_dtoa_r+0x660>
 801ecb6:	42b3      	cmp	r3, r6
 801ecb8:	9a07      	ldr	r2, [sp, #28]
 801ecba:	bfa8      	it	ge
 801ecbc:	4633      	movge	r3, r6
 801ecbe:	ebaa 0a03 	sub.w	sl, sl, r3
 801ecc2:	1af6      	subs	r6, r6, r3
 801ecc4:	1ad3      	subs	r3, r2, r3
 801ecc6:	9307      	str	r3, [sp, #28]
 801ecc8:	f1b8 0f00 	cmp.w	r8, #0
 801eccc:	d01d      	beq.n	801ed0a <_dtoa_r+0x6a2>
 801ecce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ecd0:	2b00      	cmp	r3, #0
 801ecd2:	d06a      	beq.n	801edaa <_dtoa_r+0x742>
 801ecd4:	b18d      	cbz	r5, 801ecfa <_dtoa_r+0x692>
 801ecd6:	4639      	mov	r1, r7
 801ecd8:	462a      	mov	r2, r5
 801ecda:	4620      	mov	r0, r4
 801ecdc:	f000 fb94 	bl	801f408 <__pow5mult>
 801ece0:	9a01      	ldr	r2, [sp, #4]
 801ece2:	4601      	mov	r1, r0
 801ece4:	4607      	mov	r7, r0
 801ece6:	4620      	mov	r0, r4
 801ece8:	f000 faf7 	bl	801f2da <__multiply>
 801ecec:	9901      	ldr	r1, [sp, #4]
 801ecee:	900c      	str	r0, [sp, #48]	; 0x30
 801ecf0:	4620      	mov	r0, r4
 801ecf2:	f000 fa49 	bl	801f188 <_Bfree>
 801ecf6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ecf8:	9301      	str	r3, [sp, #4]
 801ecfa:	ebb8 0205 	subs.w	r2, r8, r5
 801ecfe:	d004      	beq.n	801ed0a <_dtoa_r+0x6a2>
 801ed00:	9901      	ldr	r1, [sp, #4]
 801ed02:	4620      	mov	r0, r4
 801ed04:	f000 fb80 	bl	801f408 <__pow5mult>
 801ed08:	9001      	str	r0, [sp, #4]
 801ed0a:	2101      	movs	r1, #1
 801ed0c:	4620      	mov	r0, r4
 801ed0e:	f000 fadb 	bl	801f2c8 <__i2b>
 801ed12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ed14:	4605      	mov	r5, r0
 801ed16:	2b00      	cmp	r3, #0
 801ed18:	f000 81ca 	beq.w	801f0b0 <_dtoa_r+0xa48>
 801ed1c:	461a      	mov	r2, r3
 801ed1e:	4601      	mov	r1, r0
 801ed20:	4620      	mov	r0, r4
 801ed22:	f000 fb71 	bl	801f408 <__pow5mult>
 801ed26:	9b08      	ldr	r3, [sp, #32]
 801ed28:	2b01      	cmp	r3, #1
 801ed2a:	4605      	mov	r5, r0
 801ed2c:	dc44      	bgt.n	801edb8 <_dtoa_r+0x750>
 801ed2e:	9b02      	ldr	r3, [sp, #8]
 801ed30:	2b00      	cmp	r3, #0
 801ed32:	d13c      	bne.n	801edae <_dtoa_r+0x746>
 801ed34:	9b03      	ldr	r3, [sp, #12]
 801ed36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ed3a:	2b00      	cmp	r3, #0
 801ed3c:	d137      	bne.n	801edae <_dtoa_r+0x746>
 801ed3e:	9b03      	ldr	r3, [sp, #12]
 801ed40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801ed44:	0d1b      	lsrs	r3, r3, #20
 801ed46:	051b      	lsls	r3, r3, #20
 801ed48:	2b00      	cmp	r3, #0
 801ed4a:	d033      	beq.n	801edb4 <_dtoa_r+0x74c>
 801ed4c:	9b07      	ldr	r3, [sp, #28]
 801ed4e:	3301      	adds	r3, #1
 801ed50:	f10a 0a01 	add.w	sl, sl, #1
 801ed54:	9307      	str	r3, [sp, #28]
 801ed56:	f04f 0801 	mov.w	r8, #1
 801ed5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ed5c:	bb73      	cbnz	r3, 801edbc <_dtoa_r+0x754>
 801ed5e:	2001      	movs	r0, #1
 801ed60:	e034      	b.n	801edcc <_dtoa_r+0x764>
 801ed62:	bf00      	nop
 801ed64:	08024700 	.word	0x08024700
 801ed68:	080246d8 	.word	0x080246d8
 801ed6c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ed6e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801ed72:	e790      	b.n	801ec96 <_dtoa_r+0x62e>
 801ed74:	f109 35ff 	add.w	r5, r9, #4294967295
 801ed78:	45a8      	cmp	r8, r5
 801ed7a:	bfbf      	itttt	lt
 801ed7c:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 801ed7e:	eba5 0808 	sublt.w	r8, r5, r8
 801ed82:	4443      	addlt	r3, r8
 801ed84:	930b      	strlt	r3, [sp, #44]	; 0x2c
 801ed86:	bfb6      	itet	lt
 801ed88:	46a8      	movlt	r8, r5
 801ed8a:	eba8 0505 	subge.w	r5, r8, r5
 801ed8e:	2500      	movlt	r5, #0
 801ed90:	f1b9 0f00 	cmp.w	r9, #0
 801ed94:	bfb9      	ittee	lt
 801ed96:	ebaa 0609 	sublt.w	r6, sl, r9
 801ed9a:	2300      	movlt	r3, #0
 801ed9c:	4656      	movge	r6, sl
 801ed9e:	464b      	movge	r3, r9
 801eda0:	e77b      	b.n	801ec9a <_dtoa_r+0x632>
 801eda2:	4645      	mov	r5, r8
 801eda4:	4656      	mov	r6, sl
 801eda6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801eda8:	e780      	b.n	801ecac <_dtoa_r+0x644>
 801edaa:	4642      	mov	r2, r8
 801edac:	e7a8      	b.n	801ed00 <_dtoa_r+0x698>
 801edae:	f04f 0800 	mov.w	r8, #0
 801edb2:	e7d2      	b.n	801ed5a <_dtoa_r+0x6f2>
 801edb4:	4698      	mov	r8, r3
 801edb6:	e7d0      	b.n	801ed5a <_dtoa_r+0x6f2>
 801edb8:	f04f 0800 	mov.w	r8, #0
 801edbc:	692b      	ldr	r3, [r5, #16]
 801edbe:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801edc2:	6918      	ldr	r0, [r3, #16]
 801edc4:	f000 fa32 	bl	801f22c <__hi0bits>
 801edc8:	f1c0 0020 	rsb	r0, r0, #32
 801edcc:	9b07      	ldr	r3, [sp, #28]
 801edce:	4418      	add	r0, r3
 801edd0:	f010 001f 	ands.w	r0, r0, #31
 801edd4:	d047      	beq.n	801ee66 <_dtoa_r+0x7fe>
 801edd6:	f1c0 0320 	rsb	r3, r0, #32
 801edda:	2b04      	cmp	r3, #4
 801eddc:	dd3b      	ble.n	801ee56 <_dtoa_r+0x7ee>
 801edde:	9b07      	ldr	r3, [sp, #28]
 801ede0:	f1c0 001c 	rsb	r0, r0, #28
 801ede4:	4482      	add	sl, r0
 801ede6:	4406      	add	r6, r0
 801ede8:	4403      	add	r3, r0
 801edea:	9307      	str	r3, [sp, #28]
 801edec:	f1ba 0f00 	cmp.w	sl, #0
 801edf0:	dd05      	ble.n	801edfe <_dtoa_r+0x796>
 801edf2:	4652      	mov	r2, sl
 801edf4:	9901      	ldr	r1, [sp, #4]
 801edf6:	4620      	mov	r0, r4
 801edf8:	f000 fb54 	bl	801f4a4 <__lshift>
 801edfc:	9001      	str	r0, [sp, #4]
 801edfe:	9b07      	ldr	r3, [sp, #28]
 801ee00:	2b00      	cmp	r3, #0
 801ee02:	dd05      	ble.n	801ee10 <_dtoa_r+0x7a8>
 801ee04:	4629      	mov	r1, r5
 801ee06:	461a      	mov	r2, r3
 801ee08:	4620      	mov	r0, r4
 801ee0a:	f000 fb4b 	bl	801f4a4 <__lshift>
 801ee0e:	4605      	mov	r5, r0
 801ee10:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ee12:	b353      	cbz	r3, 801ee6a <_dtoa_r+0x802>
 801ee14:	4629      	mov	r1, r5
 801ee16:	9801      	ldr	r0, [sp, #4]
 801ee18:	f000 fb98 	bl	801f54c <__mcmp>
 801ee1c:	2800      	cmp	r0, #0
 801ee1e:	da24      	bge.n	801ee6a <_dtoa_r+0x802>
 801ee20:	2300      	movs	r3, #0
 801ee22:	220a      	movs	r2, #10
 801ee24:	9901      	ldr	r1, [sp, #4]
 801ee26:	4620      	mov	r0, r4
 801ee28:	f000 f9c5 	bl	801f1b6 <__multadd>
 801ee2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ee2e:	9001      	str	r0, [sp, #4]
 801ee30:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ee34:	2b00      	cmp	r3, #0
 801ee36:	f000 8142 	beq.w	801f0be <_dtoa_r+0xa56>
 801ee3a:	2300      	movs	r3, #0
 801ee3c:	4639      	mov	r1, r7
 801ee3e:	220a      	movs	r2, #10
 801ee40:	4620      	mov	r0, r4
 801ee42:	f000 f9b8 	bl	801f1b6 <__multadd>
 801ee46:	9b06      	ldr	r3, [sp, #24]
 801ee48:	2b00      	cmp	r3, #0
 801ee4a:	4607      	mov	r7, r0
 801ee4c:	dc4b      	bgt.n	801eee6 <_dtoa_r+0x87e>
 801ee4e:	9b08      	ldr	r3, [sp, #32]
 801ee50:	2b02      	cmp	r3, #2
 801ee52:	dd48      	ble.n	801eee6 <_dtoa_r+0x87e>
 801ee54:	e011      	b.n	801ee7a <_dtoa_r+0x812>
 801ee56:	d0c9      	beq.n	801edec <_dtoa_r+0x784>
 801ee58:	9a07      	ldr	r2, [sp, #28]
 801ee5a:	331c      	adds	r3, #28
 801ee5c:	441a      	add	r2, r3
 801ee5e:	449a      	add	sl, r3
 801ee60:	441e      	add	r6, r3
 801ee62:	4613      	mov	r3, r2
 801ee64:	e7c1      	b.n	801edea <_dtoa_r+0x782>
 801ee66:	4603      	mov	r3, r0
 801ee68:	e7f6      	b.n	801ee58 <_dtoa_r+0x7f0>
 801ee6a:	f1b9 0f00 	cmp.w	r9, #0
 801ee6e:	dc34      	bgt.n	801eeda <_dtoa_r+0x872>
 801ee70:	9b08      	ldr	r3, [sp, #32]
 801ee72:	2b02      	cmp	r3, #2
 801ee74:	dd31      	ble.n	801eeda <_dtoa_r+0x872>
 801ee76:	f8cd 9018 	str.w	r9, [sp, #24]
 801ee7a:	9b06      	ldr	r3, [sp, #24]
 801ee7c:	b963      	cbnz	r3, 801ee98 <_dtoa_r+0x830>
 801ee7e:	4629      	mov	r1, r5
 801ee80:	2205      	movs	r2, #5
 801ee82:	4620      	mov	r0, r4
 801ee84:	f000 f997 	bl	801f1b6 <__multadd>
 801ee88:	4601      	mov	r1, r0
 801ee8a:	4605      	mov	r5, r0
 801ee8c:	9801      	ldr	r0, [sp, #4]
 801ee8e:	f000 fb5d 	bl	801f54c <__mcmp>
 801ee92:	2800      	cmp	r0, #0
 801ee94:	f73f adfc 	bgt.w	801ea90 <_dtoa_r+0x428>
 801ee98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ee9a:	9e04      	ldr	r6, [sp, #16]
 801ee9c:	ea6f 0b03 	mvn.w	fp, r3
 801eea0:	f04f 0900 	mov.w	r9, #0
 801eea4:	4629      	mov	r1, r5
 801eea6:	4620      	mov	r0, r4
 801eea8:	f000 f96e 	bl	801f188 <_Bfree>
 801eeac:	2f00      	cmp	r7, #0
 801eeae:	f43f aebb 	beq.w	801ec28 <_dtoa_r+0x5c0>
 801eeb2:	f1b9 0f00 	cmp.w	r9, #0
 801eeb6:	d005      	beq.n	801eec4 <_dtoa_r+0x85c>
 801eeb8:	45b9      	cmp	r9, r7
 801eeba:	d003      	beq.n	801eec4 <_dtoa_r+0x85c>
 801eebc:	4649      	mov	r1, r9
 801eebe:	4620      	mov	r0, r4
 801eec0:	f000 f962 	bl	801f188 <_Bfree>
 801eec4:	4639      	mov	r1, r7
 801eec6:	4620      	mov	r0, r4
 801eec8:	f000 f95e 	bl	801f188 <_Bfree>
 801eecc:	e6ac      	b.n	801ec28 <_dtoa_r+0x5c0>
 801eece:	2500      	movs	r5, #0
 801eed0:	462f      	mov	r7, r5
 801eed2:	e7e1      	b.n	801ee98 <_dtoa_r+0x830>
 801eed4:	469b      	mov	fp, r3
 801eed6:	462f      	mov	r7, r5
 801eed8:	e5da      	b.n	801ea90 <_dtoa_r+0x428>
 801eeda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eedc:	f8cd 9018 	str.w	r9, [sp, #24]
 801eee0:	2b00      	cmp	r3, #0
 801eee2:	f000 80f3 	beq.w	801f0cc <_dtoa_r+0xa64>
 801eee6:	2e00      	cmp	r6, #0
 801eee8:	dd05      	ble.n	801eef6 <_dtoa_r+0x88e>
 801eeea:	4639      	mov	r1, r7
 801eeec:	4632      	mov	r2, r6
 801eeee:	4620      	mov	r0, r4
 801eef0:	f000 fad8 	bl	801f4a4 <__lshift>
 801eef4:	4607      	mov	r7, r0
 801eef6:	f1b8 0f00 	cmp.w	r8, #0
 801eefa:	d04c      	beq.n	801ef96 <_dtoa_r+0x92e>
 801eefc:	6879      	ldr	r1, [r7, #4]
 801eefe:	4620      	mov	r0, r4
 801ef00:	f000 f90e 	bl	801f120 <_Balloc>
 801ef04:	693a      	ldr	r2, [r7, #16]
 801ef06:	3202      	adds	r2, #2
 801ef08:	4606      	mov	r6, r0
 801ef0a:	0092      	lsls	r2, r2, #2
 801ef0c:	f107 010c 	add.w	r1, r7, #12
 801ef10:	300c      	adds	r0, #12
 801ef12:	f7fe fde1 	bl	801dad8 <memcpy>
 801ef16:	2201      	movs	r2, #1
 801ef18:	4631      	mov	r1, r6
 801ef1a:	4620      	mov	r0, r4
 801ef1c:	f000 fac2 	bl	801f4a4 <__lshift>
 801ef20:	9b02      	ldr	r3, [sp, #8]
 801ef22:	f8dd a010 	ldr.w	sl, [sp, #16]
 801ef26:	f003 0301 	and.w	r3, r3, #1
 801ef2a:	46b9      	mov	r9, r7
 801ef2c:	9307      	str	r3, [sp, #28]
 801ef2e:	4607      	mov	r7, r0
 801ef30:	4629      	mov	r1, r5
 801ef32:	9801      	ldr	r0, [sp, #4]
 801ef34:	f7ff fb09 	bl	801e54a <quorem>
 801ef38:	4649      	mov	r1, r9
 801ef3a:	4606      	mov	r6, r0
 801ef3c:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801ef40:	9801      	ldr	r0, [sp, #4]
 801ef42:	f000 fb03 	bl	801f54c <__mcmp>
 801ef46:	463a      	mov	r2, r7
 801ef48:	9002      	str	r0, [sp, #8]
 801ef4a:	4629      	mov	r1, r5
 801ef4c:	4620      	mov	r0, r4
 801ef4e:	f000 fb17 	bl	801f580 <__mdiff>
 801ef52:	68c3      	ldr	r3, [r0, #12]
 801ef54:	4602      	mov	r2, r0
 801ef56:	bb03      	cbnz	r3, 801ef9a <_dtoa_r+0x932>
 801ef58:	4601      	mov	r1, r0
 801ef5a:	9009      	str	r0, [sp, #36]	; 0x24
 801ef5c:	9801      	ldr	r0, [sp, #4]
 801ef5e:	f000 faf5 	bl	801f54c <__mcmp>
 801ef62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ef64:	4603      	mov	r3, r0
 801ef66:	4611      	mov	r1, r2
 801ef68:	4620      	mov	r0, r4
 801ef6a:	9309      	str	r3, [sp, #36]	; 0x24
 801ef6c:	f000 f90c 	bl	801f188 <_Bfree>
 801ef70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ef72:	b9a3      	cbnz	r3, 801ef9e <_dtoa_r+0x936>
 801ef74:	9a08      	ldr	r2, [sp, #32]
 801ef76:	b992      	cbnz	r2, 801ef9e <_dtoa_r+0x936>
 801ef78:	9a07      	ldr	r2, [sp, #28]
 801ef7a:	b982      	cbnz	r2, 801ef9e <_dtoa_r+0x936>
 801ef7c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801ef80:	d029      	beq.n	801efd6 <_dtoa_r+0x96e>
 801ef82:	9b02      	ldr	r3, [sp, #8]
 801ef84:	2b00      	cmp	r3, #0
 801ef86:	dd01      	ble.n	801ef8c <_dtoa_r+0x924>
 801ef88:	f106 0831 	add.w	r8, r6, #49	; 0x31
 801ef8c:	f10a 0601 	add.w	r6, sl, #1
 801ef90:	f88a 8000 	strb.w	r8, [sl]
 801ef94:	e786      	b.n	801eea4 <_dtoa_r+0x83c>
 801ef96:	4638      	mov	r0, r7
 801ef98:	e7c2      	b.n	801ef20 <_dtoa_r+0x8b8>
 801ef9a:	2301      	movs	r3, #1
 801ef9c:	e7e3      	b.n	801ef66 <_dtoa_r+0x8fe>
 801ef9e:	9a02      	ldr	r2, [sp, #8]
 801efa0:	2a00      	cmp	r2, #0
 801efa2:	db04      	blt.n	801efae <_dtoa_r+0x946>
 801efa4:	d124      	bne.n	801eff0 <_dtoa_r+0x988>
 801efa6:	9a08      	ldr	r2, [sp, #32]
 801efa8:	bb12      	cbnz	r2, 801eff0 <_dtoa_r+0x988>
 801efaa:	9a07      	ldr	r2, [sp, #28]
 801efac:	bb02      	cbnz	r2, 801eff0 <_dtoa_r+0x988>
 801efae:	2b00      	cmp	r3, #0
 801efb0:	ddec      	ble.n	801ef8c <_dtoa_r+0x924>
 801efb2:	2201      	movs	r2, #1
 801efb4:	9901      	ldr	r1, [sp, #4]
 801efb6:	4620      	mov	r0, r4
 801efb8:	f000 fa74 	bl	801f4a4 <__lshift>
 801efbc:	4629      	mov	r1, r5
 801efbe:	9001      	str	r0, [sp, #4]
 801efc0:	f000 fac4 	bl	801f54c <__mcmp>
 801efc4:	2800      	cmp	r0, #0
 801efc6:	dc03      	bgt.n	801efd0 <_dtoa_r+0x968>
 801efc8:	d1e0      	bne.n	801ef8c <_dtoa_r+0x924>
 801efca:	f018 0f01 	tst.w	r8, #1
 801efce:	d0dd      	beq.n	801ef8c <_dtoa_r+0x924>
 801efd0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801efd4:	d1d8      	bne.n	801ef88 <_dtoa_r+0x920>
 801efd6:	2339      	movs	r3, #57	; 0x39
 801efd8:	f10a 0601 	add.w	r6, sl, #1
 801efdc:	f88a 3000 	strb.w	r3, [sl]
 801efe0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801efe4:	2b39      	cmp	r3, #57	; 0x39
 801efe6:	f106 32ff 	add.w	r2, r6, #4294967295
 801efea:	d04c      	beq.n	801f086 <_dtoa_r+0xa1e>
 801efec:	3301      	adds	r3, #1
 801efee:	e051      	b.n	801f094 <_dtoa_r+0xa2c>
 801eff0:	2b00      	cmp	r3, #0
 801eff2:	f10a 0601 	add.w	r6, sl, #1
 801eff6:	dd05      	ble.n	801f004 <_dtoa_r+0x99c>
 801eff8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801effc:	d0eb      	beq.n	801efd6 <_dtoa_r+0x96e>
 801effe:	f108 0801 	add.w	r8, r8, #1
 801f002:	e7c5      	b.n	801ef90 <_dtoa_r+0x928>
 801f004:	9b04      	ldr	r3, [sp, #16]
 801f006:	9a06      	ldr	r2, [sp, #24]
 801f008:	f806 8c01 	strb.w	r8, [r6, #-1]
 801f00c:	1af3      	subs	r3, r6, r3
 801f00e:	4293      	cmp	r3, r2
 801f010:	d021      	beq.n	801f056 <_dtoa_r+0x9ee>
 801f012:	2300      	movs	r3, #0
 801f014:	220a      	movs	r2, #10
 801f016:	9901      	ldr	r1, [sp, #4]
 801f018:	4620      	mov	r0, r4
 801f01a:	f000 f8cc 	bl	801f1b6 <__multadd>
 801f01e:	45b9      	cmp	r9, r7
 801f020:	9001      	str	r0, [sp, #4]
 801f022:	f04f 0300 	mov.w	r3, #0
 801f026:	f04f 020a 	mov.w	r2, #10
 801f02a:	4649      	mov	r1, r9
 801f02c:	4620      	mov	r0, r4
 801f02e:	d105      	bne.n	801f03c <_dtoa_r+0x9d4>
 801f030:	f000 f8c1 	bl	801f1b6 <__multadd>
 801f034:	4681      	mov	r9, r0
 801f036:	4607      	mov	r7, r0
 801f038:	46b2      	mov	sl, r6
 801f03a:	e779      	b.n	801ef30 <_dtoa_r+0x8c8>
 801f03c:	f000 f8bb 	bl	801f1b6 <__multadd>
 801f040:	4639      	mov	r1, r7
 801f042:	4681      	mov	r9, r0
 801f044:	2300      	movs	r3, #0
 801f046:	220a      	movs	r2, #10
 801f048:	4620      	mov	r0, r4
 801f04a:	f000 f8b4 	bl	801f1b6 <__multadd>
 801f04e:	4607      	mov	r7, r0
 801f050:	e7f2      	b.n	801f038 <_dtoa_r+0x9d0>
 801f052:	f04f 0900 	mov.w	r9, #0
 801f056:	2201      	movs	r2, #1
 801f058:	9901      	ldr	r1, [sp, #4]
 801f05a:	4620      	mov	r0, r4
 801f05c:	f000 fa22 	bl	801f4a4 <__lshift>
 801f060:	4629      	mov	r1, r5
 801f062:	9001      	str	r0, [sp, #4]
 801f064:	f000 fa72 	bl	801f54c <__mcmp>
 801f068:	2800      	cmp	r0, #0
 801f06a:	dcb9      	bgt.n	801efe0 <_dtoa_r+0x978>
 801f06c:	d102      	bne.n	801f074 <_dtoa_r+0xa0c>
 801f06e:	f018 0f01 	tst.w	r8, #1
 801f072:	d1b5      	bne.n	801efe0 <_dtoa_r+0x978>
 801f074:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801f078:	2b30      	cmp	r3, #48	; 0x30
 801f07a:	f106 32ff 	add.w	r2, r6, #4294967295
 801f07e:	f47f af11 	bne.w	801eea4 <_dtoa_r+0x83c>
 801f082:	4616      	mov	r6, r2
 801f084:	e7f6      	b.n	801f074 <_dtoa_r+0xa0c>
 801f086:	9b04      	ldr	r3, [sp, #16]
 801f088:	4293      	cmp	r3, r2
 801f08a:	d105      	bne.n	801f098 <_dtoa_r+0xa30>
 801f08c:	9a04      	ldr	r2, [sp, #16]
 801f08e:	f10b 0b01 	add.w	fp, fp, #1
 801f092:	2331      	movs	r3, #49	; 0x31
 801f094:	7013      	strb	r3, [r2, #0]
 801f096:	e705      	b.n	801eea4 <_dtoa_r+0x83c>
 801f098:	4616      	mov	r6, r2
 801f09a:	e7a1      	b.n	801efe0 <_dtoa_r+0x978>
 801f09c:	4b16      	ldr	r3, [pc, #88]	; (801f0f8 <_dtoa_r+0xa90>)
 801f09e:	f7ff bb48 	b.w	801e732 <_dtoa_r+0xca>
 801f0a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f0a4:	2b00      	cmp	r3, #0
 801f0a6:	f47f ab23 	bne.w	801e6f0 <_dtoa_r+0x88>
 801f0aa:	4b14      	ldr	r3, [pc, #80]	; (801f0fc <_dtoa_r+0xa94>)
 801f0ac:	f7ff bb41 	b.w	801e732 <_dtoa_r+0xca>
 801f0b0:	9b08      	ldr	r3, [sp, #32]
 801f0b2:	2b01      	cmp	r3, #1
 801f0b4:	f77f ae3b 	ble.w	801ed2e <_dtoa_r+0x6c6>
 801f0b8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801f0bc:	e64f      	b.n	801ed5e <_dtoa_r+0x6f6>
 801f0be:	9b06      	ldr	r3, [sp, #24]
 801f0c0:	2b00      	cmp	r3, #0
 801f0c2:	dc03      	bgt.n	801f0cc <_dtoa_r+0xa64>
 801f0c4:	9b08      	ldr	r3, [sp, #32]
 801f0c6:	2b02      	cmp	r3, #2
 801f0c8:	f73f aed7 	bgt.w	801ee7a <_dtoa_r+0x812>
 801f0cc:	9e04      	ldr	r6, [sp, #16]
 801f0ce:	9801      	ldr	r0, [sp, #4]
 801f0d0:	4629      	mov	r1, r5
 801f0d2:	f7ff fa3a 	bl	801e54a <quorem>
 801f0d6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801f0da:	f806 8b01 	strb.w	r8, [r6], #1
 801f0de:	9b04      	ldr	r3, [sp, #16]
 801f0e0:	9a06      	ldr	r2, [sp, #24]
 801f0e2:	1af3      	subs	r3, r6, r3
 801f0e4:	429a      	cmp	r2, r3
 801f0e6:	ddb4      	ble.n	801f052 <_dtoa_r+0x9ea>
 801f0e8:	2300      	movs	r3, #0
 801f0ea:	220a      	movs	r2, #10
 801f0ec:	9901      	ldr	r1, [sp, #4]
 801f0ee:	4620      	mov	r0, r4
 801f0f0:	f000 f861 	bl	801f1b6 <__multadd>
 801f0f4:	9001      	str	r0, [sp, #4]
 801f0f6:	e7ea      	b.n	801f0ce <_dtoa_r+0xa66>
 801f0f8:	080246a4 	.word	0x080246a4
 801f0fc:	080246c8 	.word	0x080246c8

0801f100 <_localeconv_r>:
 801f100:	4b04      	ldr	r3, [pc, #16]	; (801f114 <_localeconv_r+0x14>)
 801f102:	681b      	ldr	r3, [r3, #0]
 801f104:	6a18      	ldr	r0, [r3, #32]
 801f106:	4b04      	ldr	r3, [pc, #16]	; (801f118 <_localeconv_r+0x18>)
 801f108:	2800      	cmp	r0, #0
 801f10a:	bf08      	it	eq
 801f10c:	4618      	moveq	r0, r3
 801f10e:	30f0      	adds	r0, #240	; 0xf0
 801f110:	4770      	bx	lr
 801f112:	bf00      	nop
 801f114:	24002600 	.word	0x24002600
 801f118:	24002664 	.word	0x24002664

0801f11c <__malloc_lock>:
 801f11c:	4770      	bx	lr

0801f11e <__malloc_unlock>:
 801f11e:	4770      	bx	lr

0801f120 <_Balloc>:
 801f120:	b570      	push	{r4, r5, r6, lr}
 801f122:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801f124:	4604      	mov	r4, r0
 801f126:	460e      	mov	r6, r1
 801f128:	b93d      	cbnz	r5, 801f13a <_Balloc+0x1a>
 801f12a:	2010      	movs	r0, #16
 801f12c:	f7fe fcc4 	bl	801dab8 <malloc>
 801f130:	6260      	str	r0, [r4, #36]	; 0x24
 801f132:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801f136:	6005      	str	r5, [r0, #0]
 801f138:	60c5      	str	r5, [r0, #12]
 801f13a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801f13c:	68eb      	ldr	r3, [r5, #12]
 801f13e:	b183      	cbz	r3, 801f162 <_Balloc+0x42>
 801f140:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f142:	68db      	ldr	r3, [r3, #12]
 801f144:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801f148:	b9b8      	cbnz	r0, 801f17a <_Balloc+0x5a>
 801f14a:	2101      	movs	r1, #1
 801f14c:	fa01 f506 	lsl.w	r5, r1, r6
 801f150:	1d6a      	adds	r2, r5, #5
 801f152:	0092      	lsls	r2, r2, #2
 801f154:	4620      	mov	r0, r4
 801f156:	f000 fabf 	bl	801f6d8 <_calloc_r>
 801f15a:	b160      	cbz	r0, 801f176 <_Balloc+0x56>
 801f15c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801f160:	e00e      	b.n	801f180 <_Balloc+0x60>
 801f162:	2221      	movs	r2, #33	; 0x21
 801f164:	2104      	movs	r1, #4
 801f166:	4620      	mov	r0, r4
 801f168:	f000 fab6 	bl	801f6d8 <_calloc_r>
 801f16c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f16e:	60e8      	str	r0, [r5, #12]
 801f170:	68db      	ldr	r3, [r3, #12]
 801f172:	2b00      	cmp	r3, #0
 801f174:	d1e4      	bne.n	801f140 <_Balloc+0x20>
 801f176:	2000      	movs	r0, #0
 801f178:	bd70      	pop	{r4, r5, r6, pc}
 801f17a:	6802      	ldr	r2, [r0, #0]
 801f17c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801f180:	2300      	movs	r3, #0
 801f182:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801f186:	e7f7      	b.n	801f178 <_Balloc+0x58>

0801f188 <_Bfree>:
 801f188:	b570      	push	{r4, r5, r6, lr}
 801f18a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801f18c:	4606      	mov	r6, r0
 801f18e:	460d      	mov	r5, r1
 801f190:	b93c      	cbnz	r4, 801f1a2 <_Bfree+0x1a>
 801f192:	2010      	movs	r0, #16
 801f194:	f7fe fc90 	bl	801dab8 <malloc>
 801f198:	6270      	str	r0, [r6, #36]	; 0x24
 801f19a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801f19e:	6004      	str	r4, [r0, #0]
 801f1a0:	60c4      	str	r4, [r0, #12]
 801f1a2:	b13d      	cbz	r5, 801f1b4 <_Bfree+0x2c>
 801f1a4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801f1a6:	686a      	ldr	r2, [r5, #4]
 801f1a8:	68db      	ldr	r3, [r3, #12]
 801f1aa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801f1ae:	6029      	str	r1, [r5, #0]
 801f1b0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801f1b4:	bd70      	pop	{r4, r5, r6, pc}

0801f1b6 <__multadd>:
 801f1b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f1ba:	690d      	ldr	r5, [r1, #16]
 801f1bc:	461f      	mov	r7, r3
 801f1be:	4606      	mov	r6, r0
 801f1c0:	460c      	mov	r4, r1
 801f1c2:	f101 0c14 	add.w	ip, r1, #20
 801f1c6:	2300      	movs	r3, #0
 801f1c8:	f8dc 0000 	ldr.w	r0, [ip]
 801f1cc:	b281      	uxth	r1, r0
 801f1ce:	fb02 7101 	mla	r1, r2, r1, r7
 801f1d2:	0c0f      	lsrs	r7, r1, #16
 801f1d4:	0c00      	lsrs	r0, r0, #16
 801f1d6:	fb02 7000 	mla	r0, r2, r0, r7
 801f1da:	b289      	uxth	r1, r1
 801f1dc:	3301      	adds	r3, #1
 801f1de:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801f1e2:	429d      	cmp	r5, r3
 801f1e4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801f1e8:	f84c 1b04 	str.w	r1, [ip], #4
 801f1ec:	dcec      	bgt.n	801f1c8 <__multadd+0x12>
 801f1ee:	b1d7      	cbz	r7, 801f226 <__multadd+0x70>
 801f1f0:	68a3      	ldr	r3, [r4, #8]
 801f1f2:	42ab      	cmp	r3, r5
 801f1f4:	dc12      	bgt.n	801f21c <__multadd+0x66>
 801f1f6:	6861      	ldr	r1, [r4, #4]
 801f1f8:	4630      	mov	r0, r6
 801f1fa:	3101      	adds	r1, #1
 801f1fc:	f7ff ff90 	bl	801f120 <_Balloc>
 801f200:	6922      	ldr	r2, [r4, #16]
 801f202:	3202      	adds	r2, #2
 801f204:	f104 010c 	add.w	r1, r4, #12
 801f208:	4680      	mov	r8, r0
 801f20a:	0092      	lsls	r2, r2, #2
 801f20c:	300c      	adds	r0, #12
 801f20e:	f7fe fc63 	bl	801dad8 <memcpy>
 801f212:	4621      	mov	r1, r4
 801f214:	4630      	mov	r0, r6
 801f216:	f7ff ffb7 	bl	801f188 <_Bfree>
 801f21a:	4644      	mov	r4, r8
 801f21c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801f220:	3501      	adds	r5, #1
 801f222:	615f      	str	r7, [r3, #20]
 801f224:	6125      	str	r5, [r4, #16]
 801f226:	4620      	mov	r0, r4
 801f228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801f22c <__hi0bits>:
 801f22c:	0c02      	lsrs	r2, r0, #16
 801f22e:	0412      	lsls	r2, r2, #16
 801f230:	4603      	mov	r3, r0
 801f232:	b9b2      	cbnz	r2, 801f262 <__hi0bits+0x36>
 801f234:	0403      	lsls	r3, r0, #16
 801f236:	2010      	movs	r0, #16
 801f238:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801f23c:	bf04      	itt	eq
 801f23e:	021b      	lsleq	r3, r3, #8
 801f240:	3008      	addeq	r0, #8
 801f242:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801f246:	bf04      	itt	eq
 801f248:	011b      	lsleq	r3, r3, #4
 801f24a:	3004      	addeq	r0, #4
 801f24c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801f250:	bf04      	itt	eq
 801f252:	009b      	lsleq	r3, r3, #2
 801f254:	3002      	addeq	r0, #2
 801f256:	2b00      	cmp	r3, #0
 801f258:	db06      	blt.n	801f268 <__hi0bits+0x3c>
 801f25a:	005b      	lsls	r3, r3, #1
 801f25c:	d503      	bpl.n	801f266 <__hi0bits+0x3a>
 801f25e:	3001      	adds	r0, #1
 801f260:	4770      	bx	lr
 801f262:	2000      	movs	r0, #0
 801f264:	e7e8      	b.n	801f238 <__hi0bits+0xc>
 801f266:	2020      	movs	r0, #32
 801f268:	4770      	bx	lr

0801f26a <__lo0bits>:
 801f26a:	6803      	ldr	r3, [r0, #0]
 801f26c:	f013 0207 	ands.w	r2, r3, #7
 801f270:	4601      	mov	r1, r0
 801f272:	d00b      	beq.n	801f28c <__lo0bits+0x22>
 801f274:	07da      	lsls	r2, r3, #31
 801f276:	d423      	bmi.n	801f2c0 <__lo0bits+0x56>
 801f278:	0798      	lsls	r0, r3, #30
 801f27a:	bf49      	itett	mi
 801f27c:	085b      	lsrmi	r3, r3, #1
 801f27e:	089b      	lsrpl	r3, r3, #2
 801f280:	2001      	movmi	r0, #1
 801f282:	600b      	strmi	r3, [r1, #0]
 801f284:	bf5c      	itt	pl
 801f286:	600b      	strpl	r3, [r1, #0]
 801f288:	2002      	movpl	r0, #2
 801f28a:	4770      	bx	lr
 801f28c:	b298      	uxth	r0, r3
 801f28e:	b9a8      	cbnz	r0, 801f2bc <__lo0bits+0x52>
 801f290:	0c1b      	lsrs	r3, r3, #16
 801f292:	2010      	movs	r0, #16
 801f294:	f013 0fff 	tst.w	r3, #255	; 0xff
 801f298:	bf04      	itt	eq
 801f29a:	0a1b      	lsreq	r3, r3, #8
 801f29c:	3008      	addeq	r0, #8
 801f29e:	071a      	lsls	r2, r3, #28
 801f2a0:	bf04      	itt	eq
 801f2a2:	091b      	lsreq	r3, r3, #4
 801f2a4:	3004      	addeq	r0, #4
 801f2a6:	079a      	lsls	r2, r3, #30
 801f2a8:	bf04      	itt	eq
 801f2aa:	089b      	lsreq	r3, r3, #2
 801f2ac:	3002      	addeq	r0, #2
 801f2ae:	07da      	lsls	r2, r3, #31
 801f2b0:	d402      	bmi.n	801f2b8 <__lo0bits+0x4e>
 801f2b2:	085b      	lsrs	r3, r3, #1
 801f2b4:	d006      	beq.n	801f2c4 <__lo0bits+0x5a>
 801f2b6:	3001      	adds	r0, #1
 801f2b8:	600b      	str	r3, [r1, #0]
 801f2ba:	4770      	bx	lr
 801f2bc:	4610      	mov	r0, r2
 801f2be:	e7e9      	b.n	801f294 <__lo0bits+0x2a>
 801f2c0:	2000      	movs	r0, #0
 801f2c2:	4770      	bx	lr
 801f2c4:	2020      	movs	r0, #32
 801f2c6:	4770      	bx	lr

0801f2c8 <__i2b>:
 801f2c8:	b510      	push	{r4, lr}
 801f2ca:	460c      	mov	r4, r1
 801f2cc:	2101      	movs	r1, #1
 801f2ce:	f7ff ff27 	bl	801f120 <_Balloc>
 801f2d2:	2201      	movs	r2, #1
 801f2d4:	6144      	str	r4, [r0, #20]
 801f2d6:	6102      	str	r2, [r0, #16]
 801f2d8:	bd10      	pop	{r4, pc}

0801f2da <__multiply>:
 801f2da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f2de:	4614      	mov	r4, r2
 801f2e0:	690a      	ldr	r2, [r1, #16]
 801f2e2:	6923      	ldr	r3, [r4, #16]
 801f2e4:	429a      	cmp	r2, r3
 801f2e6:	bfb8      	it	lt
 801f2e8:	460b      	movlt	r3, r1
 801f2ea:	4688      	mov	r8, r1
 801f2ec:	bfbc      	itt	lt
 801f2ee:	46a0      	movlt	r8, r4
 801f2f0:	461c      	movlt	r4, r3
 801f2f2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801f2f6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801f2fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801f2fe:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801f302:	eb07 0609 	add.w	r6, r7, r9
 801f306:	42b3      	cmp	r3, r6
 801f308:	bfb8      	it	lt
 801f30a:	3101      	addlt	r1, #1
 801f30c:	f7ff ff08 	bl	801f120 <_Balloc>
 801f310:	f100 0514 	add.w	r5, r0, #20
 801f314:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801f318:	462b      	mov	r3, r5
 801f31a:	2200      	movs	r2, #0
 801f31c:	4573      	cmp	r3, lr
 801f31e:	d316      	bcc.n	801f34e <__multiply+0x74>
 801f320:	f104 0214 	add.w	r2, r4, #20
 801f324:	f108 0114 	add.w	r1, r8, #20
 801f328:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801f32c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801f330:	9300      	str	r3, [sp, #0]
 801f332:	9b00      	ldr	r3, [sp, #0]
 801f334:	9201      	str	r2, [sp, #4]
 801f336:	4293      	cmp	r3, r2
 801f338:	d80c      	bhi.n	801f354 <__multiply+0x7a>
 801f33a:	2e00      	cmp	r6, #0
 801f33c:	dd03      	ble.n	801f346 <__multiply+0x6c>
 801f33e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801f342:	2b00      	cmp	r3, #0
 801f344:	d05d      	beq.n	801f402 <__multiply+0x128>
 801f346:	6106      	str	r6, [r0, #16]
 801f348:	b003      	add	sp, #12
 801f34a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f34e:	f843 2b04 	str.w	r2, [r3], #4
 801f352:	e7e3      	b.n	801f31c <__multiply+0x42>
 801f354:	f8b2 b000 	ldrh.w	fp, [r2]
 801f358:	f1bb 0f00 	cmp.w	fp, #0
 801f35c:	d023      	beq.n	801f3a6 <__multiply+0xcc>
 801f35e:	4689      	mov	r9, r1
 801f360:	46ac      	mov	ip, r5
 801f362:	f04f 0800 	mov.w	r8, #0
 801f366:	f859 4b04 	ldr.w	r4, [r9], #4
 801f36a:	f8dc a000 	ldr.w	sl, [ip]
 801f36e:	b2a3      	uxth	r3, r4
 801f370:	fa1f fa8a 	uxth.w	sl, sl
 801f374:	fb0b a303 	mla	r3, fp, r3, sl
 801f378:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801f37c:	f8dc 4000 	ldr.w	r4, [ip]
 801f380:	4443      	add	r3, r8
 801f382:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801f386:	fb0b 840a 	mla	r4, fp, sl, r8
 801f38a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801f38e:	46e2      	mov	sl, ip
 801f390:	b29b      	uxth	r3, r3
 801f392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801f396:	454f      	cmp	r7, r9
 801f398:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801f39c:	f84a 3b04 	str.w	r3, [sl], #4
 801f3a0:	d82b      	bhi.n	801f3fa <__multiply+0x120>
 801f3a2:	f8cc 8004 	str.w	r8, [ip, #4]
 801f3a6:	9b01      	ldr	r3, [sp, #4]
 801f3a8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801f3ac:	3204      	adds	r2, #4
 801f3ae:	f1ba 0f00 	cmp.w	sl, #0
 801f3b2:	d020      	beq.n	801f3f6 <__multiply+0x11c>
 801f3b4:	682b      	ldr	r3, [r5, #0]
 801f3b6:	4689      	mov	r9, r1
 801f3b8:	46a8      	mov	r8, r5
 801f3ba:	f04f 0b00 	mov.w	fp, #0
 801f3be:	f8b9 c000 	ldrh.w	ip, [r9]
 801f3c2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801f3c6:	fb0a 440c 	mla	r4, sl, ip, r4
 801f3ca:	445c      	add	r4, fp
 801f3cc:	46c4      	mov	ip, r8
 801f3ce:	b29b      	uxth	r3, r3
 801f3d0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801f3d4:	f84c 3b04 	str.w	r3, [ip], #4
 801f3d8:	f859 3b04 	ldr.w	r3, [r9], #4
 801f3dc:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801f3e0:	0c1b      	lsrs	r3, r3, #16
 801f3e2:	fb0a b303 	mla	r3, sl, r3, fp
 801f3e6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801f3ea:	454f      	cmp	r7, r9
 801f3ec:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801f3f0:	d805      	bhi.n	801f3fe <__multiply+0x124>
 801f3f2:	f8c8 3004 	str.w	r3, [r8, #4]
 801f3f6:	3504      	adds	r5, #4
 801f3f8:	e79b      	b.n	801f332 <__multiply+0x58>
 801f3fa:	46d4      	mov	ip, sl
 801f3fc:	e7b3      	b.n	801f366 <__multiply+0x8c>
 801f3fe:	46e0      	mov	r8, ip
 801f400:	e7dd      	b.n	801f3be <__multiply+0xe4>
 801f402:	3e01      	subs	r6, #1
 801f404:	e799      	b.n	801f33a <__multiply+0x60>
	...

0801f408 <__pow5mult>:
 801f408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f40c:	4615      	mov	r5, r2
 801f40e:	f012 0203 	ands.w	r2, r2, #3
 801f412:	4606      	mov	r6, r0
 801f414:	460f      	mov	r7, r1
 801f416:	d007      	beq.n	801f428 <__pow5mult+0x20>
 801f418:	3a01      	subs	r2, #1
 801f41a:	4c21      	ldr	r4, [pc, #132]	; (801f4a0 <__pow5mult+0x98>)
 801f41c:	2300      	movs	r3, #0
 801f41e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801f422:	f7ff fec8 	bl	801f1b6 <__multadd>
 801f426:	4607      	mov	r7, r0
 801f428:	10ad      	asrs	r5, r5, #2
 801f42a:	d035      	beq.n	801f498 <__pow5mult+0x90>
 801f42c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801f42e:	b93c      	cbnz	r4, 801f440 <__pow5mult+0x38>
 801f430:	2010      	movs	r0, #16
 801f432:	f7fe fb41 	bl	801dab8 <malloc>
 801f436:	6270      	str	r0, [r6, #36]	; 0x24
 801f438:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801f43c:	6004      	str	r4, [r0, #0]
 801f43e:	60c4      	str	r4, [r0, #12]
 801f440:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801f444:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801f448:	b94c      	cbnz	r4, 801f45e <__pow5mult+0x56>
 801f44a:	f240 2171 	movw	r1, #625	; 0x271
 801f44e:	4630      	mov	r0, r6
 801f450:	f7ff ff3a 	bl	801f2c8 <__i2b>
 801f454:	2300      	movs	r3, #0
 801f456:	f8c8 0008 	str.w	r0, [r8, #8]
 801f45a:	4604      	mov	r4, r0
 801f45c:	6003      	str	r3, [r0, #0]
 801f45e:	f04f 0800 	mov.w	r8, #0
 801f462:	07eb      	lsls	r3, r5, #31
 801f464:	d50a      	bpl.n	801f47c <__pow5mult+0x74>
 801f466:	4639      	mov	r1, r7
 801f468:	4622      	mov	r2, r4
 801f46a:	4630      	mov	r0, r6
 801f46c:	f7ff ff35 	bl	801f2da <__multiply>
 801f470:	4639      	mov	r1, r7
 801f472:	4681      	mov	r9, r0
 801f474:	4630      	mov	r0, r6
 801f476:	f7ff fe87 	bl	801f188 <_Bfree>
 801f47a:	464f      	mov	r7, r9
 801f47c:	106d      	asrs	r5, r5, #1
 801f47e:	d00b      	beq.n	801f498 <__pow5mult+0x90>
 801f480:	6820      	ldr	r0, [r4, #0]
 801f482:	b938      	cbnz	r0, 801f494 <__pow5mult+0x8c>
 801f484:	4622      	mov	r2, r4
 801f486:	4621      	mov	r1, r4
 801f488:	4630      	mov	r0, r6
 801f48a:	f7ff ff26 	bl	801f2da <__multiply>
 801f48e:	6020      	str	r0, [r4, #0]
 801f490:	f8c0 8000 	str.w	r8, [r0]
 801f494:	4604      	mov	r4, r0
 801f496:	e7e4      	b.n	801f462 <__pow5mult+0x5a>
 801f498:	4638      	mov	r0, r7
 801f49a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f49e:	bf00      	nop
 801f4a0:	080247c8 	.word	0x080247c8

0801f4a4 <__lshift>:
 801f4a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f4a8:	460c      	mov	r4, r1
 801f4aa:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801f4ae:	6923      	ldr	r3, [r4, #16]
 801f4b0:	6849      	ldr	r1, [r1, #4]
 801f4b2:	eb0a 0903 	add.w	r9, sl, r3
 801f4b6:	68a3      	ldr	r3, [r4, #8]
 801f4b8:	4607      	mov	r7, r0
 801f4ba:	4616      	mov	r6, r2
 801f4bc:	f109 0501 	add.w	r5, r9, #1
 801f4c0:	42ab      	cmp	r3, r5
 801f4c2:	db32      	blt.n	801f52a <__lshift+0x86>
 801f4c4:	4638      	mov	r0, r7
 801f4c6:	f7ff fe2b 	bl	801f120 <_Balloc>
 801f4ca:	2300      	movs	r3, #0
 801f4cc:	4680      	mov	r8, r0
 801f4ce:	f100 0114 	add.w	r1, r0, #20
 801f4d2:	461a      	mov	r2, r3
 801f4d4:	4553      	cmp	r3, sl
 801f4d6:	db2b      	blt.n	801f530 <__lshift+0x8c>
 801f4d8:	6920      	ldr	r0, [r4, #16]
 801f4da:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801f4de:	f104 0314 	add.w	r3, r4, #20
 801f4e2:	f016 021f 	ands.w	r2, r6, #31
 801f4e6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801f4ea:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801f4ee:	d025      	beq.n	801f53c <__lshift+0x98>
 801f4f0:	f1c2 0e20 	rsb	lr, r2, #32
 801f4f4:	2000      	movs	r0, #0
 801f4f6:	681e      	ldr	r6, [r3, #0]
 801f4f8:	468a      	mov	sl, r1
 801f4fa:	4096      	lsls	r6, r2
 801f4fc:	4330      	orrs	r0, r6
 801f4fe:	f84a 0b04 	str.w	r0, [sl], #4
 801f502:	f853 0b04 	ldr.w	r0, [r3], #4
 801f506:	459c      	cmp	ip, r3
 801f508:	fa20 f00e 	lsr.w	r0, r0, lr
 801f50c:	d814      	bhi.n	801f538 <__lshift+0x94>
 801f50e:	6048      	str	r0, [r1, #4]
 801f510:	b108      	cbz	r0, 801f516 <__lshift+0x72>
 801f512:	f109 0502 	add.w	r5, r9, #2
 801f516:	3d01      	subs	r5, #1
 801f518:	4638      	mov	r0, r7
 801f51a:	f8c8 5010 	str.w	r5, [r8, #16]
 801f51e:	4621      	mov	r1, r4
 801f520:	f7ff fe32 	bl	801f188 <_Bfree>
 801f524:	4640      	mov	r0, r8
 801f526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f52a:	3101      	adds	r1, #1
 801f52c:	005b      	lsls	r3, r3, #1
 801f52e:	e7c7      	b.n	801f4c0 <__lshift+0x1c>
 801f530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801f534:	3301      	adds	r3, #1
 801f536:	e7cd      	b.n	801f4d4 <__lshift+0x30>
 801f538:	4651      	mov	r1, sl
 801f53a:	e7dc      	b.n	801f4f6 <__lshift+0x52>
 801f53c:	3904      	subs	r1, #4
 801f53e:	f853 2b04 	ldr.w	r2, [r3], #4
 801f542:	f841 2f04 	str.w	r2, [r1, #4]!
 801f546:	459c      	cmp	ip, r3
 801f548:	d8f9      	bhi.n	801f53e <__lshift+0x9a>
 801f54a:	e7e4      	b.n	801f516 <__lshift+0x72>

0801f54c <__mcmp>:
 801f54c:	6903      	ldr	r3, [r0, #16]
 801f54e:	690a      	ldr	r2, [r1, #16]
 801f550:	1a9b      	subs	r3, r3, r2
 801f552:	b530      	push	{r4, r5, lr}
 801f554:	d10c      	bne.n	801f570 <__mcmp+0x24>
 801f556:	0092      	lsls	r2, r2, #2
 801f558:	3014      	adds	r0, #20
 801f55a:	3114      	adds	r1, #20
 801f55c:	1884      	adds	r4, r0, r2
 801f55e:	4411      	add	r1, r2
 801f560:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801f564:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801f568:	4295      	cmp	r5, r2
 801f56a:	d003      	beq.n	801f574 <__mcmp+0x28>
 801f56c:	d305      	bcc.n	801f57a <__mcmp+0x2e>
 801f56e:	2301      	movs	r3, #1
 801f570:	4618      	mov	r0, r3
 801f572:	bd30      	pop	{r4, r5, pc}
 801f574:	42a0      	cmp	r0, r4
 801f576:	d3f3      	bcc.n	801f560 <__mcmp+0x14>
 801f578:	e7fa      	b.n	801f570 <__mcmp+0x24>
 801f57a:	f04f 33ff 	mov.w	r3, #4294967295
 801f57e:	e7f7      	b.n	801f570 <__mcmp+0x24>

0801f580 <__mdiff>:
 801f580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f584:	460d      	mov	r5, r1
 801f586:	4607      	mov	r7, r0
 801f588:	4611      	mov	r1, r2
 801f58a:	4628      	mov	r0, r5
 801f58c:	4614      	mov	r4, r2
 801f58e:	f7ff ffdd 	bl	801f54c <__mcmp>
 801f592:	1e06      	subs	r6, r0, #0
 801f594:	d108      	bne.n	801f5a8 <__mdiff+0x28>
 801f596:	4631      	mov	r1, r6
 801f598:	4638      	mov	r0, r7
 801f59a:	f7ff fdc1 	bl	801f120 <_Balloc>
 801f59e:	2301      	movs	r3, #1
 801f5a0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801f5a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f5a8:	bfa4      	itt	ge
 801f5aa:	4623      	movge	r3, r4
 801f5ac:	462c      	movge	r4, r5
 801f5ae:	4638      	mov	r0, r7
 801f5b0:	6861      	ldr	r1, [r4, #4]
 801f5b2:	bfa6      	itte	ge
 801f5b4:	461d      	movge	r5, r3
 801f5b6:	2600      	movge	r6, #0
 801f5b8:	2601      	movlt	r6, #1
 801f5ba:	f7ff fdb1 	bl	801f120 <_Balloc>
 801f5be:	692b      	ldr	r3, [r5, #16]
 801f5c0:	60c6      	str	r6, [r0, #12]
 801f5c2:	6926      	ldr	r6, [r4, #16]
 801f5c4:	f105 0914 	add.w	r9, r5, #20
 801f5c8:	f104 0214 	add.w	r2, r4, #20
 801f5cc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801f5d0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801f5d4:	f100 0514 	add.w	r5, r0, #20
 801f5d8:	f04f 0e00 	mov.w	lr, #0
 801f5dc:	f852 ab04 	ldr.w	sl, [r2], #4
 801f5e0:	f859 4b04 	ldr.w	r4, [r9], #4
 801f5e4:	fa1e f18a 	uxtah	r1, lr, sl
 801f5e8:	b2a3      	uxth	r3, r4
 801f5ea:	1ac9      	subs	r1, r1, r3
 801f5ec:	0c23      	lsrs	r3, r4, #16
 801f5ee:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801f5f2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801f5f6:	b289      	uxth	r1, r1
 801f5f8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801f5fc:	45c8      	cmp	r8, r9
 801f5fe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801f602:	4694      	mov	ip, r2
 801f604:	f845 3b04 	str.w	r3, [r5], #4
 801f608:	d8e8      	bhi.n	801f5dc <__mdiff+0x5c>
 801f60a:	45bc      	cmp	ip, r7
 801f60c:	d304      	bcc.n	801f618 <__mdiff+0x98>
 801f60e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801f612:	b183      	cbz	r3, 801f636 <__mdiff+0xb6>
 801f614:	6106      	str	r6, [r0, #16]
 801f616:	e7c5      	b.n	801f5a4 <__mdiff+0x24>
 801f618:	f85c 1b04 	ldr.w	r1, [ip], #4
 801f61c:	fa1e f381 	uxtah	r3, lr, r1
 801f620:	141a      	asrs	r2, r3, #16
 801f622:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801f626:	b29b      	uxth	r3, r3
 801f628:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801f62c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801f630:	f845 3b04 	str.w	r3, [r5], #4
 801f634:	e7e9      	b.n	801f60a <__mdiff+0x8a>
 801f636:	3e01      	subs	r6, #1
 801f638:	e7e9      	b.n	801f60e <__mdiff+0x8e>

0801f63a <__d2b>:
 801f63a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801f63e:	460e      	mov	r6, r1
 801f640:	2101      	movs	r1, #1
 801f642:	ec59 8b10 	vmov	r8, r9, d0
 801f646:	4615      	mov	r5, r2
 801f648:	f7ff fd6a 	bl	801f120 <_Balloc>
 801f64c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801f650:	4607      	mov	r7, r0
 801f652:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801f656:	bb34      	cbnz	r4, 801f6a6 <__d2b+0x6c>
 801f658:	9301      	str	r3, [sp, #4]
 801f65a:	f1b8 0300 	subs.w	r3, r8, #0
 801f65e:	d027      	beq.n	801f6b0 <__d2b+0x76>
 801f660:	a802      	add	r0, sp, #8
 801f662:	f840 3d08 	str.w	r3, [r0, #-8]!
 801f666:	f7ff fe00 	bl	801f26a <__lo0bits>
 801f66a:	9900      	ldr	r1, [sp, #0]
 801f66c:	b1f0      	cbz	r0, 801f6ac <__d2b+0x72>
 801f66e:	9a01      	ldr	r2, [sp, #4]
 801f670:	f1c0 0320 	rsb	r3, r0, #32
 801f674:	fa02 f303 	lsl.w	r3, r2, r3
 801f678:	430b      	orrs	r3, r1
 801f67a:	40c2      	lsrs	r2, r0
 801f67c:	617b      	str	r3, [r7, #20]
 801f67e:	9201      	str	r2, [sp, #4]
 801f680:	9b01      	ldr	r3, [sp, #4]
 801f682:	61bb      	str	r3, [r7, #24]
 801f684:	2b00      	cmp	r3, #0
 801f686:	bf14      	ite	ne
 801f688:	2102      	movne	r1, #2
 801f68a:	2101      	moveq	r1, #1
 801f68c:	6139      	str	r1, [r7, #16]
 801f68e:	b1c4      	cbz	r4, 801f6c2 <__d2b+0x88>
 801f690:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801f694:	4404      	add	r4, r0
 801f696:	6034      	str	r4, [r6, #0]
 801f698:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801f69c:	6028      	str	r0, [r5, #0]
 801f69e:	4638      	mov	r0, r7
 801f6a0:	b003      	add	sp, #12
 801f6a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f6a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801f6aa:	e7d5      	b.n	801f658 <__d2b+0x1e>
 801f6ac:	6179      	str	r1, [r7, #20]
 801f6ae:	e7e7      	b.n	801f680 <__d2b+0x46>
 801f6b0:	a801      	add	r0, sp, #4
 801f6b2:	f7ff fdda 	bl	801f26a <__lo0bits>
 801f6b6:	9b01      	ldr	r3, [sp, #4]
 801f6b8:	617b      	str	r3, [r7, #20]
 801f6ba:	2101      	movs	r1, #1
 801f6bc:	6139      	str	r1, [r7, #16]
 801f6be:	3020      	adds	r0, #32
 801f6c0:	e7e5      	b.n	801f68e <__d2b+0x54>
 801f6c2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801f6c6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801f6ca:	6030      	str	r0, [r6, #0]
 801f6cc:	6918      	ldr	r0, [r3, #16]
 801f6ce:	f7ff fdad 	bl	801f22c <__hi0bits>
 801f6d2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801f6d6:	e7e1      	b.n	801f69c <__d2b+0x62>

0801f6d8 <_calloc_r>:
 801f6d8:	b538      	push	{r3, r4, r5, lr}
 801f6da:	fb02 f401 	mul.w	r4, r2, r1
 801f6de:	4621      	mov	r1, r4
 801f6e0:	f7fe fa5c 	bl	801db9c <_malloc_r>
 801f6e4:	4605      	mov	r5, r0
 801f6e6:	b118      	cbz	r0, 801f6f0 <_calloc_r+0x18>
 801f6e8:	4622      	mov	r2, r4
 801f6ea:	2100      	movs	r1, #0
 801f6ec:	f7fe f9ff 	bl	801daee <memset>
 801f6f0:	4628      	mov	r0, r5
 801f6f2:	bd38      	pop	{r3, r4, r5, pc}

0801f6f4 <_realloc_r>:
 801f6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f6f6:	4607      	mov	r7, r0
 801f6f8:	4614      	mov	r4, r2
 801f6fa:	460e      	mov	r6, r1
 801f6fc:	b921      	cbnz	r1, 801f708 <_realloc_r+0x14>
 801f6fe:	4611      	mov	r1, r2
 801f700:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801f704:	f7fe ba4a 	b.w	801db9c <_malloc_r>
 801f708:	b922      	cbnz	r2, 801f714 <_realloc_r+0x20>
 801f70a:	f7fe f9f9 	bl	801db00 <_free_r>
 801f70e:	4625      	mov	r5, r4
 801f710:	4628      	mov	r0, r5
 801f712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f714:	f000 f991 	bl	801fa3a <_malloc_usable_size_r>
 801f718:	42a0      	cmp	r0, r4
 801f71a:	d20f      	bcs.n	801f73c <_realloc_r+0x48>
 801f71c:	4621      	mov	r1, r4
 801f71e:	4638      	mov	r0, r7
 801f720:	f7fe fa3c 	bl	801db9c <_malloc_r>
 801f724:	4605      	mov	r5, r0
 801f726:	2800      	cmp	r0, #0
 801f728:	d0f2      	beq.n	801f710 <_realloc_r+0x1c>
 801f72a:	4631      	mov	r1, r6
 801f72c:	4622      	mov	r2, r4
 801f72e:	f7fe f9d3 	bl	801dad8 <memcpy>
 801f732:	4631      	mov	r1, r6
 801f734:	4638      	mov	r0, r7
 801f736:	f7fe f9e3 	bl	801db00 <_free_r>
 801f73a:	e7e9      	b.n	801f710 <_realloc_r+0x1c>
 801f73c:	4635      	mov	r5, r6
 801f73e:	e7e7      	b.n	801f710 <_realloc_r+0x1c>

0801f740 <__ssputs_r>:
 801f740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f744:	688e      	ldr	r6, [r1, #8]
 801f746:	429e      	cmp	r6, r3
 801f748:	4682      	mov	sl, r0
 801f74a:	460c      	mov	r4, r1
 801f74c:	4690      	mov	r8, r2
 801f74e:	4699      	mov	r9, r3
 801f750:	d837      	bhi.n	801f7c2 <__ssputs_r+0x82>
 801f752:	898a      	ldrh	r2, [r1, #12]
 801f754:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801f758:	d031      	beq.n	801f7be <__ssputs_r+0x7e>
 801f75a:	6825      	ldr	r5, [r4, #0]
 801f75c:	6909      	ldr	r1, [r1, #16]
 801f75e:	1a6f      	subs	r7, r5, r1
 801f760:	6965      	ldr	r5, [r4, #20]
 801f762:	2302      	movs	r3, #2
 801f764:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f768:	fb95 f5f3 	sdiv	r5, r5, r3
 801f76c:	f109 0301 	add.w	r3, r9, #1
 801f770:	443b      	add	r3, r7
 801f772:	429d      	cmp	r5, r3
 801f774:	bf38      	it	cc
 801f776:	461d      	movcc	r5, r3
 801f778:	0553      	lsls	r3, r2, #21
 801f77a:	d530      	bpl.n	801f7de <__ssputs_r+0x9e>
 801f77c:	4629      	mov	r1, r5
 801f77e:	f7fe fa0d 	bl	801db9c <_malloc_r>
 801f782:	4606      	mov	r6, r0
 801f784:	b950      	cbnz	r0, 801f79c <__ssputs_r+0x5c>
 801f786:	230c      	movs	r3, #12
 801f788:	f8ca 3000 	str.w	r3, [sl]
 801f78c:	89a3      	ldrh	r3, [r4, #12]
 801f78e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f792:	81a3      	strh	r3, [r4, #12]
 801f794:	f04f 30ff 	mov.w	r0, #4294967295
 801f798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f79c:	463a      	mov	r2, r7
 801f79e:	6921      	ldr	r1, [r4, #16]
 801f7a0:	f7fe f99a 	bl	801dad8 <memcpy>
 801f7a4:	89a3      	ldrh	r3, [r4, #12]
 801f7a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801f7aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f7ae:	81a3      	strh	r3, [r4, #12]
 801f7b0:	6126      	str	r6, [r4, #16]
 801f7b2:	6165      	str	r5, [r4, #20]
 801f7b4:	443e      	add	r6, r7
 801f7b6:	1bed      	subs	r5, r5, r7
 801f7b8:	6026      	str	r6, [r4, #0]
 801f7ba:	60a5      	str	r5, [r4, #8]
 801f7bc:	464e      	mov	r6, r9
 801f7be:	454e      	cmp	r6, r9
 801f7c0:	d900      	bls.n	801f7c4 <__ssputs_r+0x84>
 801f7c2:	464e      	mov	r6, r9
 801f7c4:	4632      	mov	r2, r6
 801f7c6:	4641      	mov	r1, r8
 801f7c8:	6820      	ldr	r0, [r4, #0]
 801f7ca:	f000 f91d 	bl	801fa08 <memmove>
 801f7ce:	68a3      	ldr	r3, [r4, #8]
 801f7d0:	1b9b      	subs	r3, r3, r6
 801f7d2:	60a3      	str	r3, [r4, #8]
 801f7d4:	6823      	ldr	r3, [r4, #0]
 801f7d6:	441e      	add	r6, r3
 801f7d8:	6026      	str	r6, [r4, #0]
 801f7da:	2000      	movs	r0, #0
 801f7dc:	e7dc      	b.n	801f798 <__ssputs_r+0x58>
 801f7de:	462a      	mov	r2, r5
 801f7e0:	f7ff ff88 	bl	801f6f4 <_realloc_r>
 801f7e4:	4606      	mov	r6, r0
 801f7e6:	2800      	cmp	r0, #0
 801f7e8:	d1e2      	bne.n	801f7b0 <__ssputs_r+0x70>
 801f7ea:	6921      	ldr	r1, [r4, #16]
 801f7ec:	4650      	mov	r0, sl
 801f7ee:	f7fe f987 	bl	801db00 <_free_r>
 801f7f2:	e7c8      	b.n	801f786 <__ssputs_r+0x46>

0801f7f4 <_svfiprintf_r>:
 801f7f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f7f8:	461d      	mov	r5, r3
 801f7fa:	898b      	ldrh	r3, [r1, #12]
 801f7fc:	061f      	lsls	r7, r3, #24
 801f7fe:	b09d      	sub	sp, #116	; 0x74
 801f800:	4680      	mov	r8, r0
 801f802:	460c      	mov	r4, r1
 801f804:	4616      	mov	r6, r2
 801f806:	d50f      	bpl.n	801f828 <_svfiprintf_r+0x34>
 801f808:	690b      	ldr	r3, [r1, #16]
 801f80a:	b96b      	cbnz	r3, 801f828 <_svfiprintf_r+0x34>
 801f80c:	2140      	movs	r1, #64	; 0x40
 801f80e:	f7fe f9c5 	bl	801db9c <_malloc_r>
 801f812:	6020      	str	r0, [r4, #0]
 801f814:	6120      	str	r0, [r4, #16]
 801f816:	b928      	cbnz	r0, 801f824 <_svfiprintf_r+0x30>
 801f818:	230c      	movs	r3, #12
 801f81a:	f8c8 3000 	str.w	r3, [r8]
 801f81e:	f04f 30ff 	mov.w	r0, #4294967295
 801f822:	e0c8      	b.n	801f9b6 <_svfiprintf_r+0x1c2>
 801f824:	2340      	movs	r3, #64	; 0x40
 801f826:	6163      	str	r3, [r4, #20]
 801f828:	2300      	movs	r3, #0
 801f82a:	9309      	str	r3, [sp, #36]	; 0x24
 801f82c:	2320      	movs	r3, #32
 801f82e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f832:	2330      	movs	r3, #48	; 0x30
 801f834:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f838:	9503      	str	r5, [sp, #12]
 801f83a:	f04f 0b01 	mov.w	fp, #1
 801f83e:	4637      	mov	r7, r6
 801f840:	463d      	mov	r5, r7
 801f842:	f815 3b01 	ldrb.w	r3, [r5], #1
 801f846:	b10b      	cbz	r3, 801f84c <_svfiprintf_r+0x58>
 801f848:	2b25      	cmp	r3, #37	; 0x25
 801f84a:	d13e      	bne.n	801f8ca <_svfiprintf_r+0xd6>
 801f84c:	ebb7 0a06 	subs.w	sl, r7, r6
 801f850:	d00b      	beq.n	801f86a <_svfiprintf_r+0x76>
 801f852:	4653      	mov	r3, sl
 801f854:	4632      	mov	r2, r6
 801f856:	4621      	mov	r1, r4
 801f858:	4640      	mov	r0, r8
 801f85a:	f7ff ff71 	bl	801f740 <__ssputs_r>
 801f85e:	3001      	adds	r0, #1
 801f860:	f000 80a4 	beq.w	801f9ac <_svfiprintf_r+0x1b8>
 801f864:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f866:	4453      	add	r3, sl
 801f868:	9309      	str	r3, [sp, #36]	; 0x24
 801f86a:	783b      	ldrb	r3, [r7, #0]
 801f86c:	2b00      	cmp	r3, #0
 801f86e:	f000 809d 	beq.w	801f9ac <_svfiprintf_r+0x1b8>
 801f872:	2300      	movs	r3, #0
 801f874:	f04f 32ff 	mov.w	r2, #4294967295
 801f878:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f87c:	9304      	str	r3, [sp, #16]
 801f87e:	9307      	str	r3, [sp, #28]
 801f880:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f884:	931a      	str	r3, [sp, #104]	; 0x68
 801f886:	462f      	mov	r7, r5
 801f888:	2205      	movs	r2, #5
 801f88a:	f817 1b01 	ldrb.w	r1, [r7], #1
 801f88e:	4850      	ldr	r0, [pc, #320]	; (801f9d0 <_svfiprintf_r+0x1dc>)
 801f890:	f7e0 fd3e 	bl	8000310 <memchr>
 801f894:	9b04      	ldr	r3, [sp, #16]
 801f896:	b9d0      	cbnz	r0, 801f8ce <_svfiprintf_r+0xda>
 801f898:	06d9      	lsls	r1, r3, #27
 801f89a:	bf44      	itt	mi
 801f89c:	2220      	movmi	r2, #32
 801f89e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801f8a2:	071a      	lsls	r2, r3, #28
 801f8a4:	bf44      	itt	mi
 801f8a6:	222b      	movmi	r2, #43	; 0x2b
 801f8a8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801f8ac:	782a      	ldrb	r2, [r5, #0]
 801f8ae:	2a2a      	cmp	r2, #42	; 0x2a
 801f8b0:	d015      	beq.n	801f8de <_svfiprintf_r+0xea>
 801f8b2:	9a07      	ldr	r2, [sp, #28]
 801f8b4:	462f      	mov	r7, r5
 801f8b6:	2000      	movs	r0, #0
 801f8b8:	250a      	movs	r5, #10
 801f8ba:	4639      	mov	r1, r7
 801f8bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f8c0:	3b30      	subs	r3, #48	; 0x30
 801f8c2:	2b09      	cmp	r3, #9
 801f8c4:	d94d      	bls.n	801f962 <_svfiprintf_r+0x16e>
 801f8c6:	b1b8      	cbz	r0, 801f8f8 <_svfiprintf_r+0x104>
 801f8c8:	e00f      	b.n	801f8ea <_svfiprintf_r+0xf6>
 801f8ca:	462f      	mov	r7, r5
 801f8cc:	e7b8      	b.n	801f840 <_svfiprintf_r+0x4c>
 801f8ce:	4a40      	ldr	r2, [pc, #256]	; (801f9d0 <_svfiprintf_r+0x1dc>)
 801f8d0:	1a80      	subs	r0, r0, r2
 801f8d2:	fa0b f000 	lsl.w	r0, fp, r0
 801f8d6:	4318      	orrs	r0, r3
 801f8d8:	9004      	str	r0, [sp, #16]
 801f8da:	463d      	mov	r5, r7
 801f8dc:	e7d3      	b.n	801f886 <_svfiprintf_r+0x92>
 801f8de:	9a03      	ldr	r2, [sp, #12]
 801f8e0:	1d11      	adds	r1, r2, #4
 801f8e2:	6812      	ldr	r2, [r2, #0]
 801f8e4:	9103      	str	r1, [sp, #12]
 801f8e6:	2a00      	cmp	r2, #0
 801f8e8:	db01      	blt.n	801f8ee <_svfiprintf_r+0xfa>
 801f8ea:	9207      	str	r2, [sp, #28]
 801f8ec:	e004      	b.n	801f8f8 <_svfiprintf_r+0x104>
 801f8ee:	4252      	negs	r2, r2
 801f8f0:	f043 0302 	orr.w	r3, r3, #2
 801f8f4:	9207      	str	r2, [sp, #28]
 801f8f6:	9304      	str	r3, [sp, #16]
 801f8f8:	783b      	ldrb	r3, [r7, #0]
 801f8fa:	2b2e      	cmp	r3, #46	; 0x2e
 801f8fc:	d10c      	bne.n	801f918 <_svfiprintf_r+0x124>
 801f8fe:	787b      	ldrb	r3, [r7, #1]
 801f900:	2b2a      	cmp	r3, #42	; 0x2a
 801f902:	d133      	bne.n	801f96c <_svfiprintf_r+0x178>
 801f904:	9b03      	ldr	r3, [sp, #12]
 801f906:	1d1a      	adds	r2, r3, #4
 801f908:	681b      	ldr	r3, [r3, #0]
 801f90a:	9203      	str	r2, [sp, #12]
 801f90c:	2b00      	cmp	r3, #0
 801f90e:	bfb8      	it	lt
 801f910:	f04f 33ff 	movlt.w	r3, #4294967295
 801f914:	3702      	adds	r7, #2
 801f916:	9305      	str	r3, [sp, #20]
 801f918:	4d2e      	ldr	r5, [pc, #184]	; (801f9d4 <_svfiprintf_r+0x1e0>)
 801f91a:	7839      	ldrb	r1, [r7, #0]
 801f91c:	2203      	movs	r2, #3
 801f91e:	4628      	mov	r0, r5
 801f920:	f7e0 fcf6 	bl	8000310 <memchr>
 801f924:	b138      	cbz	r0, 801f936 <_svfiprintf_r+0x142>
 801f926:	2340      	movs	r3, #64	; 0x40
 801f928:	1b40      	subs	r0, r0, r5
 801f92a:	fa03 f000 	lsl.w	r0, r3, r0
 801f92e:	9b04      	ldr	r3, [sp, #16]
 801f930:	4303      	orrs	r3, r0
 801f932:	3701      	adds	r7, #1
 801f934:	9304      	str	r3, [sp, #16]
 801f936:	7839      	ldrb	r1, [r7, #0]
 801f938:	4827      	ldr	r0, [pc, #156]	; (801f9d8 <_svfiprintf_r+0x1e4>)
 801f93a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f93e:	2206      	movs	r2, #6
 801f940:	1c7e      	adds	r6, r7, #1
 801f942:	f7e0 fce5 	bl	8000310 <memchr>
 801f946:	2800      	cmp	r0, #0
 801f948:	d038      	beq.n	801f9bc <_svfiprintf_r+0x1c8>
 801f94a:	4b24      	ldr	r3, [pc, #144]	; (801f9dc <_svfiprintf_r+0x1e8>)
 801f94c:	bb13      	cbnz	r3, 801f994 <_svfiprintf_r+0x1a0>
 801f94e:	9b03      	ldr	r3, [sp, #12]
 801f950:	3307      	adds	r3, #7
 801f952:	f023 0307 	bic.w	r3, r3, #7
 801f956:	3308      	adds	r3, #8
 801f958:	9303      	str	r3, [sp, #12]
 801f95a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f95c:	444b      	add	r3, r9
 801f95e:	9309      	str	r3, [sp, #36]	; 0x24
 801f960:	e76d      	b.n	801f83e <_svfiprintf_r+0x4a>
 801f962:	fb05 3202 	mla	r2, r5, r2, r3
 801f966:	2001      	movs	r0, #1
 801f968:	460f      	mov	r7, r1
 801f96a:	e7a6      	b.n	801f8ba <_svfiprintf_r+0xc6>
 801f96c:	2300      	movs	r3, #0
 801f96e:	3701      	adds	r7, #1
 801f970:	9305      	str	r3, [sp, #20]
 801f972:	4619      	mov	r1, r3
 801f974:	250a      	movs	r5, #10
 801f976:	4638      	mov	r0, r7
 801f978:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f97c:	3a30      	subs	r2, #48	; 0x30
 801f97e:	2a09      	cmp	r2, #9
 801f980:	d903      	bls.n	801f98a <_svfiprintf_r+0x196>
 801f982:	2b00      	cmp	r3, #0
 801f984:	d0c8      	beq.n	801f918 <_svfiprintf_r+0x124>
 801f986:	9105      	str	r1, [sp, #20]
 801f988:	e7c6      	b.n	801f918 <_svfiprintf_r+0x124>
 801f98a:	fb05 2101 	mla	r1, r5, r1, r2
 801f98e:	2301      	movs	r3, #1
 801f990:	4607      	mov	r7, r0
 801f992:	e7f0      	b.n	801f976 <_svfiprintf_r+0x182>
 801f994:	ab03      	add	r3, sp, #12
 801f996:	9300      	str	r3, [sp, #0]
 801f998:	4622      	mov	r2, r4
 801f99a:	4b11      	ldr	r3, [pc, #68]	; (801f9e0 <_svfiprintf_r+0x1ec>)
 801f99c:	a904      	add	r1, sp, #16
 801f99e:	4640      	mov	r0, r8
 801f9a0:	f7fe f9de 	bl	801dd60 <_printf_float>
 801f9a4:	f1b0 3fff 	cmp.w	r0, #4294967295
 801f9a8:	4681      	mov	r9, r0
 801f9aa:	d1d6      	bne.n	801f95a <_svfiprintf_r+0x166>
 801f9ac:	89a3      	ldrh	r3, [r4, #12]
 801f9ae:	065b      	lsls	r3, r3, #25
 801f9b0:	f53f af35 	bmi.w	801f81e <_svfiprintf_r+0x2a>
 801f9b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f9b6:	b01d      	add	sp, #116	; 0x74
 801f9b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f9bc:	ab03      	add	r3, sp, #12
 801f9be:	9300      	str	r3, [sp, #0]
 801f9c0:	4622      	mov	r2, r4
 801f9c2:	4b07      	ldr	r3, [pc, #28]	; (801f9e0 <_svfiprintf_r+0x1ec>)
 801f9c4:	a904      	add	r1, sp, #16
 801f9c6:	4640      	mov	r0, r8
 801f9c8:	f7fe fc6c 	bl	801e2a4 <_printf_i>
 801f9cc:	e7ea      	b.n	801f9a4 <_svfiprintf_r+0x1b0>
 801f9ce:	bf00      	nop
 801f9d0:	080247d4 	.word	0x080247d4
 801f9d4:	080247da 	.word	0x080247da
 801f9d8:	080247de 	.word	0x080247de
 801f9dc:	0801dd61 	.word	0x0801dd61
 801f9e0:	0801f741 	.word	0x0801f741

0801f9e4 <__ascii_mbtowc>:
 801f9e4:	b082      	sub	sp, #8
 801f9e6:	b901      	cbnz	r1, 801f9ea <__ascii_mbtowc+0x6>
 801f9e8:	a901      	add	r1, sp, #4
 801f9ea:	b142      	cbz	r2, 801f9fe <__ascii_mbtowc+0x1a>
 801f9ec:	b14b      	cbz	r3, 801fa02 <__ascii_mbtowc+0x1e>
 801f9ee:	7813      	ldrb	r3, [r2, #0]
 801f9f0:	600b      	str	r3, [r1, #0]
 801f9f2:	7812      	ldrb	r2, [r2, #0]
 801f9f4:	1c10      	adds	r0, r2, #0
 801f9f6:	bf18      	it	ne
 801f9f8:	2001      	movne	r0, #1
 801f9fa:	b002      	add	sp, #8
 801f9fc:	4770      	bx	lr
 801f9fe:	4610      	mov	r0, r2
 801fa00:	e7fb      	b.n	801f9fa <__ascii_mbtowc+0x16>
 801fa02:	f06f 0001 	mvn.w	r0, #1
 801fa06:	e7f8      	b.n	801f9fa <__ascii_mbtowc+0x16>

0801fa08 <memmove>:
 801fa08:	4288      	cmp	r0, r1
 801fa0a:	b510      	push	{r4, lr}
 801fa0c:	eb01 0302 	add.w	r3, r1, r2
 801fa10:	d807      	bhi.n	801fa22 <memmove+0x1a>
 801fa12:	1e42      	subs	r2, r0, #1
 801fa14:	4299      	cmp	r1, r3
 801fa16:	d00a      	beq.n	801fa2e <memmove+0x26>
 801fa18:	f811 4b01 	ldrb.w	r4, [r1], #1
 801fa1c:	f802 4f01 	strb.w	r4, [r2, #1]!
 801fa20:	e7f8      	b.n	801fa14 <memmove+0xc>
 801fa22:	4283      	cmp	r3, r0
 801fa24:	d9f5      	bls.n	801fa12 <memmove+0xa>
 801fa26:	1881      	adds	r1, r0, r2
 801fa28:	1ad2      	subs	r2, r2, r3
 801fa2a:	42d3      	cmn	r3, r2
 801fa2c:	d100      	bne.n	801fa30 <memmove+0x28>
 801fa2e:	bd10      	pop	{r4, pc}
 801fa30:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801fa34:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801fa38:	e7f7      	b.n	801fa2a <memmove+0x22>

0801fa3a <_malloc_usable_size_r>:
 801fa3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801fa3e:	1f18      	subs	r0, r3, #4
 801fa40:	2b00      	cmp	r3, #0
 801fa42:	bfbc      	itt	lt
 801fa44:	580b      	ldrlt	r3, [r1, r0]
 801fa46:	18c0      	addlt	r0, r0, r3
 801fa48:	4770      	bx	lr

0801fa4a <__ascii_wctomb>:
 801fa4a:	b149      	cbz	r1, 801fa60 <__ascii_wctomb+0x16>
 801fa4c:	2aff      	cmp	r2, #255	; 0xff
 801fa4e:	bf85      	ittet	hi
 801fa50:	238a      	movhi	r3, #138	; 0x8a
 801fa52:	6003      	strhi	r3, [r0, #0]
 801fa54:	700a      	strbls	r2, [r1, #0]
 801fa56:	f04f 30ff 	movhi.w	r0, #4294967295
 801fa5a:	bf98      	it	ls
 801fa5c:	2001      	movls	r0, #1
 801fa5e:	4770      	bx	lr
 801fa60:	4608      	mov	r0, r1
 801fa62:	4770      	bx	lr

0801fa64 <expf>:
 801fa64:	ee10 2a10 	vmov	r2, s0
 801fa68:	f240 412a 	movw	r1, #1066	; 0x42a
 801fa6c:	f3c2 530a 	ubfx	r3, r2, #20, #11
 801fa70:	428b      	cmp	r3, r1
 801fa72:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
 801fa76:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 801fa7a:	d92e      	bls.n	801fada <expf+0x76>
 801fa7c:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 801fa80:	d061      	beq.n	801fb46 <expf+0xe2>
 801fa82:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 801fa86:	d304      	bcc.n	801fa92 <expf+0x2e>
 801fa88:	ee30 0a00 	vadd.f32	s0, s0, s0
 801fa8c:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 801fa90:	4770      	bx	lr
 801fa92:	eddf 7a2e 	vldr	s15, [pc, #184]	; 801fb4c <expf+0xe8>
 801fa96:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801fa9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fa9e:	dd04      	ble.n	801faaa <expf+0x46>
 801faa0:	2000      	movs	r0, #0
 801faa2:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 801faa6:	f000 ba0b 	b.w	801fec0 <__math_oflowf>
 801faaa:	eddf 7a29 	vldr	s15, [pc, #164]	; 801fb50 <expf+0xec>
 801faae:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801fab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fab6:	d504      	bpl.n	801fac2 <expf+0x5e>
 801fab8:	2000      	movs	r0, #0
 801faba:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 801fabe:	f000 b9f3 	b.w	801fea8 <__math_uflowf>
 801fac2:	eddf 7a24 	vldr	s15, [pc, #144]	; 801fb54 <expf+0xf0>
 801fac6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801faca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801face:	d504      	bpl.n	801fada <expf+0x76>
 801fad0:	2000      	movs	r0, #0
 801fad2:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 801fad6:	f000 b9ed 	b.w	801feb4 <__math_may_uflowf>
 801fada:	491f      	ldr	r1, [pc, #124]	; (801fb58 <expf+0xf4>)
 801fadc:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801fae0:	ed91 5b4a 	vldr	d5, [r1, #296]	; 0x128
 801fae4:	ed91 7b48 	vldr	d7, [r1, #288]	; 0x120
 801fae8:	eeb0 4b47 	vmov.f64	d4, d7
 801faec:	eea5 4b06 	vfma.f64	d4, d5, d6
 801faf0:	ec55 4b14 	vmov	r4, r5, d4
 801faf4:	ee34 7b47 	vsub.f64	d7, d4, d7
 801faf8:	f004 021f 	and.w	r2, r4, #31
 801fafc:	ee95 7b06 	vfnms.f64	d7, d5, d6
 801fb00:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801fb04:	ed91 6b50 	vldr	d6, [r1, #320]	; 0x140
 801fb08:	e9d2 4500 	ldrd	r4, r5, [r2]
 801fb0c:	eea6 0b07 	vfma.f64	d0, d6, d7
 801fb10:	ee14 0a10 	vmov	r0, s8
 801fb14:	ed91 5b4c 	vldr	d5, [r1, #304]	; 0x130
 801fb18:	ed91 6b4e 	vldr	d6, [r1, #312]	; 0x138
 801fb1c:	f04f 0b00 	mov.w	fp, #0
 801fb20:	eb1b 0204 	adds.w	r2, fp, r4
 801fb24:	ea4f 3cc0 	mov.w	ip, r0, lsl #15
 801fb28:	eb4c 0305 	adc.w	r3, ip, r5
 801fb2c:	eea5 6b07 	vfma.f64	d6, d5, d7
 801fb30:	ee27 7b07 	vmul.f64	d7, d7, d7
 801fb34:	eea6 0b07 	vfma.f64	d0, d6, d7
 801fb38:	ec43 2b17 	vmov	d7, r2, r3
 801fb3c:	ee20 0b07 	vmul.f64	d0, d0, d7
 801fb40:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801fb44:	e7a2      	b.n	801fa8c <expf+0x28>
 801fb46:	ed9f 0a05 	vldr	s0, [pc, #20]	; 801fb5c <expf+0xf8>
 801fb4a:	e79f      	b.n	801fa8c <expf+0x28>
 801fb4c:	42b17217 	.word	0x42b17217
 801fb50:	c2cff1b4 	.word	0xc2cff1b4
 801fb54:	c2ce8ecf 	.word	0xc2ce8ecf
 801fb58:	080248f0 	.word	0x080248f0
 801fb5c:	00000000 	.word	0x00000000

0801fb60 <log>:
 801fb60:	b500      	push	{lr}
 801fb62:	ed2d 8b02 	vpush	{d8}
 801fb66:	eeb0 8b40 	vmov.f64	d8, d0
 801fb6a:	b08b      	sub	sp, #44	; 0x2c
 801fb6c:	f000 f868 	bl	801fc40 <__ieee754_log>
 801fb70:	4b2d      	ldr	r3, [pc, #180]	; (801fc28 <log+0xc8>)
 801fb72:	f993 3000 	ldrsb.w	r3, [r3]
 801fb76:	1c5a      	adds	r2, r3, #1
 801fb78:	d051      	beq.n	801fc1e <log+0xbe>
 801fb7a:	eeb4 8b48 	vcmp.f64	d8, d8
 801fb7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fb82:	d64c      	bvs.n	801fc1e <log+0xbe>
 801fb84:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 801fb88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fb8c:	dc47      	bgt.n	801fc1e <log+0xbe>
 801fb8e:	4a27      	ldr	r2, [pc, #156]	; (801fc2c <log+0xcc>)
 801fb90:	9201      	str	r2, [sp, #4]
 801fb92:	2200      	movs	r2, #0
 801fb94:	9208      	str	r2, [sp, #32]
 801fb96:	ed8d 8b02 	vstr	d8, [sp, #8]
 801fb9a:	ed8d 8b04 	vstr	d8, [sp, #16]
 801fb9e:	b993      	cbnz	r3, 801fbc6 <log+0x66>
 801fba0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801fba4:	4922      	ldr	r1, [pc, #136]	; (801fc30 <log+0xd0>)
 801fba6:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
 801fbaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fbae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801fbb2:	d025      	beq.n	801fc00 <log+0xa0>
 801fbb4:	2201      	movs	r2, #1
 801fbb6:	2b02      	cmp	r3, #2
 801fbb8:	9200      	str	r2, [sp, #0]
 801fbba:	d116      	bne.n	801fbea <log+0x8a>
 801fbbc:	f000 f990 	bl	801fee0 <__errno>
 801fbc0:	2321      	movs	r3, #33	; 0x21
 801fbc2:	6003      	str	r3, [r0, #0]
 801fbc4:	e016      	b.n	801fbf4 <log+0x94>
 801fbc6:	491b      	ldr	r1, [pc, #108]	; (801fc34 <log+0xd4>)
 801fbc8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801fbcc:	2000      	movs	r0, #0
 801fbce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fbd2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801fbd6:	d1ed      	bne.n	801fbb4 <log+0x54>
 801fbd8:	2202      	movs	r2, #2
 801fbda:	4293      	cmp	r3, r2
 801fbdc:	9200      	str	r2, [sp, #0]
 801fbde:	d111      	bne.n	801fc04 <log+0xa4>
 801fbe0:	f000 f97e 	bl	801fee0 <__errno>
 801fbe4:	2322      	movs	r3, #34	; 0x22
 801fbe6:	6003      	str	r3, [r0, #0]
 801fbe8:	e011      	b.n	801fc0e <log+0xae>
 801fbea:	4668      	mov	r0, sp
 801fbec:	f000 f96e 	bl	801fecc <matherr>
 801fbf0:	2800      	cmp	r0, #0
 801fbf2:	d0e3      	beq.n	801fbbc <log+0x5c>
 801fbf4:	4810      	ldr	r0, [pc, #64]	; (801fc38 <log+0xd8>)
 801fbf6:	f000 f96b 	bl	801fed0 <nan>
 801fbfa:	ed8d 0b06 	vstr	d0, [sp, #24]
 801fbfe:	e006      	b.n	801fc0e <log+0xae>
 801fc00:	2302      	movs	r3, #2
 801fc02:	9300      	str	r3, [sp, #0]
 801fc04:	4668      	mov	r0, sp
 801fc06:	f000 f961 	bl	801fecc <matherr>
 801fc0a:	2800      	cmp	r0, #0
 801fc0c:	d0e8      	beq.n	801fbe0 <log+0x80>
 801fc0e:	9b08      	ldr	r3, [sp, #32]
 801fc10:	b11b      	cbz	r3, 801fc1a <log+0xba>
 801fc12:	f000 f965 	bl	801fee0 <__errno>
 801fc16:	9b08      	ldr	r3, [sp, #32]
 801fc18:	6003      	str	r3, [r0, #0]
 801fc1a:	ed9d 0b06 	vldr	d0, [sp, #24]
 801fc1e:	b00b      	add	sp, #44	; 0x2c
 801fc20:	ecbd 8b02 	vpop	{d8}
 801fc24:	f85d fb04 	ldr.w	pc, [sp], #4
 801fc28:	240027d0 	.word	0x240027d0
 801fc2c:	08024a38 	.word	0x08024a38
 801fc30:	c7efffff 	.word	0xc7efffff
 801fc34:	fff00000 	.word	0xfff00000
 801fc38:	080247d9 	.word	0x080247d9
 801fc3c:	00000000 	.word	0x00000000

0801fc40 <__ieee754_log>:
 801fc40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801fc42:	ed8d 0b00 	vstr	d0, [sp]
 801fc46:	9a01      	ldr	r2, [sp, #4]
 801fc48:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 801fc4c:	da26      	bge.n	801fc9c <__ieee754_log+0x5c>
 801fc4e:	9900      	ldr	r1, [sp, #0]
 801fc50:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 801fc54:	430b      	orrs	r3, r1
 801fc56:	d107      	bne.n	801fc68 <__ieee754_log+0x28>
 801fc58:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 801fe08 <__ieee754_log+0x1c8>
 801fc5c:	ed9f 7b6c 	vldr	d7, [pc, #432]	; 801fe10 <__ieee754_log+0x1d0>
 801fc60:	ee86 0b07 	vdiv.f64	d0, d6, d7
 801fc64:	b003      	add	sp, #12
 801fc66:	bd30      	pop	{r4, r5, pc}
 801fc68:	2a00      	cmp	r2, #0
 801fc6a:	da04      	bge.n	801fc76 <__ieee754_log+0x36>
 801fc6c:	ed9d 7b00 	vldr	d7, [sp]
 801fc70:	ee37 6b47 	vsub.f64	d6, d7, d7
 801fc74:	e7f2      	b.n	801fc5c <__ieee754_log+0x1c>
 801fc76:	ed9d 6b00 	vldr	d6, [sp]
 801fc7a:	ed9f 7b67 	vldr	d7, [pc, #412]	; 801fe18 <__ieee754_log+0x1d8>
 801fc7e:	ee26 7b07 	vmul.f64	d7, d6, d7
 801fc82:	ed8d 7b00 	vstr	d7, [sp]
 801fc86:	9a01      	ldr	r2, [sp, #4]
 801fc88:	f06f 0135 	mvn.w	r1, #53	; 0x35
 801fc8c:	4b78      	ldr	r3, [pc, #480]	; (801fe70 <__ieee754_log+0x230>)
 801fc8e:	429a      	cmp	r2, r3
 801fc90:	dd06      	ble.n	801fca0 <__ieee754_log+0x60>
 801fc92:	ed9d 7b00 	vldr	d7, [sp]
 801fc96:	ee37 0b07 	vadd.f64	d0, d7, d7
 801fc9a:	e7e3      	b.n	801fc64 <__ieee754_log+0x24>
 801fc9c:	2100      	movs	r1, #0
 801fc9e:	e7f5      	b.n	801fc8c <__ieee754_log+0x4c>
 801fca0:	1513      	asrs	r3, r2, #20
 801fca2:	f3c2 0013 	ubfx	r0, r2, #0, #20
 801fca6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801fcaa:	4419      	add	r1, r3
 801fcac:	f500 2315 	add.w	r3, r0, #610304	; 0x95000
 801fcb0:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 801fcb4:	f403 1480 	and.w	r4, r3, #1048576	; 0x100000
 801fcb8:	f084 557f 	eor.w	r5, r4, #1069547520	; 0x3fc00000
 801fcbc:	e9dd 2300 	ldrd	r2, r3, [sp]
 801fcc0:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801fcc4:	f485 1540 	eor.w	r5, r5, #3145728	; 0x300000
 801fcc8:	ea45 0300 	orr.w	r3, r5, r0
 801fccc:	ec43 2b10 	vmov	d0, r2, r3
 801fcd0:	1c82      	adds	r2, r0, #2
 801fcd2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801fcd6:	2a02      	cmp	r2, #2
 801fcd8:	eb01 5414 	add.w	r4, r1, r4, lsr #20
 801fcdc:	ee30 0b47 	vsub.f64	d0, d0, d7
 801fce0:	dc31      	bgt.n	801fd46 <__ieee754_log+0x106>
 801fce2:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801fce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fcea:	d10f      	bne.n	801fd0c <__ieee754_log+0xcc>
 801fcec:	2c00      	cmp	r4, #0
 801fcee:	f000 8086 	beq.w	801fdfe <__ieee754_log+0x1be>
 801fcf2:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 801fe20 <__ieee754_log+0x1e0>
 801fcf6:	ed9f 6b4c 	vldr	d6, [pc, #304]	; 801fe28 <__ieee754_log+0x1e8>
 801fcfa:	ee07 4a90 	vmov	s15, r4
 801fcfe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801fd02:	ee27 0b00 	vmul.f64	d0, d7, d0
 801fd06:	eea7 0b06 	vfma.f64	d0, d7, d6
 801fd0a:	e7ab      	b.n	801fc64 <__ieee754_log+0x24>
 801fd0c:	ed9f 7b48 	vldr	d7, [pc, #288]	; 801fe30 <__ieee754_log+0x1f0>
 801fd10:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 801fd14:	eea0 6b47 	vfms.f64	d6, d0, d7
 801fd18:	ee20 7b00 	vmul.f64	d7, d0, d0
 801fd1c:	ee26 6b07 	vmul.f64	d6, d6, d7
 801fd20:	b914      	cbnz	r4, 801fd28 <__ieee754_log+0xe8>
 801fd22:	ee30 0b46 	vsub.f64	d0, d0, d6
 801fd26:	e79d      	b.n	801fc64 <__ieee754_log+0x24>
 801fd28:	ed9f 5b3d 	vldr	d5, [pc, #244]	; 801fe20 <__ieee754_log+0x1e0>
 801fd2c:	ee07 4a90 	vmov	s15, r4
 801fd30:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801fd34:	eea7 6b45 	vfms.f64	d6, d7, d5
 801fd38:	ee36 0b40 	vsub.f64	d0, d6, d0
 801fd3c:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 801fe28 <__ieee754_log+0x1e8>
 801fd40:	ee97 0b06 	vfnms.f64	d0, d7, d6
 801fd44:	e78e      	b.n	801fc64 <__ieee754_log+0x24>
 801fd46:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801fd4a:	ee30 7b07 	vadd.f64	d7, d0, d7
 801fd4e:	ee80 4b07 	vdiv.f64	d4, d0, d7
 801fd52:	ee07 4a90 	vmov	s15, r4
 801fd56:	ee24 2b04 	vmul.f64	d2, d4, d4
 801fd5a:	ed9f 3b37 	vldr	d3, [pc, #220]	; 801fe38 <__ieee754_log+0x1f8>
 801fd5e:	ee22 5b02 	vmul.f64	d5, d2, d2
 801fd62:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801fd66:	ed9f 7b36 	vldr	d7, [pc, #216]	; 801fe40 <__ieee754_log+0x200>
 801fd6a:	eea5 7b03 	vfma.f64	d7, d5, d3
 801fd6e:	ed9f 3b36 	vldr	d3, [pc, #216]	; 801fe48 <__ieee754_log+0x208>
 801fd72:	ed9f 1b37 	vldr	d1, [pc, #220]	; 801fe50 <__ieee754_log+0x210>
 801fd76:	eea7 3b05 	vfma.f64	d3, d7, d5
 801fd7a:	ed9f 7b37 	vldr	d7, [pc, #220]	; 801fe58 <__ieee754_log+0x218>
 801fd7e:	eea5 7b01 	vfma.f64	d7, d5, d1
 801fd82:	ed9f 1b37 	vldr	d1, [pc, #220]	; 801fe60 <__ieee754_log+0x220>
 801fd86:	f5a0 21c2 	sub.w	r1, r0, #397312	; 0x61000
 801fd8a:	f5c0 22d7 	rsb	r2, r0, #440320	; 0x6b800
 801fd8e:	eea7 1b05 	vfma.f64	d1, d7, d5
 801fd92:	f2a1 417a 	subw	r1, r1, #1146	; 0x47a
 801fd96:	ed9f 7b34 	vldr	d7, [pc, #208]	; 801fe68 <__ieee754_log+0x228>
 801fd9a:	3251      	adds	r2, #81	; 0x51
 801fd9c:	430a      	orrs	r2, r1
 801fd9e:	2a00      	cmp	r2, #0
 801fda0:	eea1 7b05 	vfma.f64	d7, d1, d5
 801fda4:	ee27 7b02 	vmul.f64	d7, d7, d2
 801fda8:	eea3 7b05 	vfma.f64	d7, d3, d5
 801fdac:	dd1c      	ble.n	801fde8 <__ieee754_log+0x1a8>
 801fdae:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801fdb2:	ee20 5b05 	vmul.f64	d5, d0, d5
 801fdb6:	ee25 5b00 	vmul.f64	d5, d5, d0
 801fdba:	ee37 7b05 	vadd.f64	d7, d7, d5
 801fdbe:	ee27 7b04 	vmul.f64	d7, d7, d4
 801fdc2:	b924      	cbnz	r4, 801fdce <__ieee754_log+0x18e>
 801fdc4:	ee35 7b47 	vsub.f64	d7, d5, d7
 801fdc8:	ee30 0b47 	vsub.f64	d0, d0, d7
 801fdcc:	e74a      	b.n	801fc64 <__ieee754_log+0x24>
 801fdce:	ed9f 4b14 	vldr	d4, [pc, #80]	; 801fe20 <__ieee754_log+0x1e0>
 801fdd2:	eea6 7b04 	vfma.f64	d7, d6, d4
 801fdd6:	ee35 7b47 	vsub.f64	d7, d5, d7
 801fdda:	ee37 0b40 	vsub.f64	d0, d7, d0
 801fdde:	ed9f 7b12 	vldr	d7, [pc, #72]	; 801fe28 <__ieee754_log+0x1e8>
 801fde2:	ee96 0b07 	vfnms.f64	d0, d6, d7
 801fde6:	e73d      	b.n	801fc64 <__ieee754_log+0x24>
 801fde8:	ee30 7b47 	vsub.f64	d7, d0, d7
 801fdec:	ee27 7b04 	vmul.f64	d7, d7, d4
 801fdf0:	2c00      	cmp	r4, #0
 801fdf2:	d0e9      	beq.n	801fdc8 <__ieee754_log+0x188>
 801fdf4:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 801fe20 <__ieee754_log+0x1e0>
 801fdf8:	eea6 7b45 	vfms.f64	d7, d6, d5
 801fdfc:	e7ed      	b.n	801fdda <__ieee754_log+0x19a>
 801fdfe:	ed9f 0b04 	vldr	d0, [pc, #16]	; 801fe10 <__ieee754_log+0x1d0>
 801fe02:	e72f      	b.n	801fc64 <__ieee754_log+0x24>
 801fe04:	f3af 8000 	nop.w
 801fe08:	00000000 	.word	0x00000000
 801fe0c:	c3500000 	.word	0xc3500000
	...
 801fe1c:	43500000 	.word	0x43500000
 801fe20:	35793c76 	.word	0x35793c76
 801fe24:	3dea39ef 	.word	0x3dea39ef
 801fe28:	fee00000 	.word	0xfee00000
 801fe2c:	3fe62e42 	.word	0x3fe62e42
 801fe30:	55555555 	.word	0x55555555
 801fe34:	3fd55555 	.word	0x3fd55555
 801fe38:	d078c69f 	.word	0xd078c69f
 801fe3c:	3fc39a09 	.word	0x3fc39a09
 801fe40:	1d8e78af 	.word	0x1d8e78af
 801fe44:	3fcc71c5 	.word	0x3fcc71c5
 801fe48:	9997fa04 	.word	0x9997fa04
 801fe4c:	3fd99999 	.word	0x3fd99999
 801fe50:	df3e5244 	.word	0xdf3e5244
 801fe54:	3fc2f112 	.word	0x3fc2f112
 801fe58:	96cb03de 	.word	0x96cb03de
 801fe5c:	3fc74664 	.word	0x3fc74664
 801fe60:	94229359 	.word	0x94229359
 801fe64:	3fd24924 	.word	0x3fd24924
 801fe68:	55555593 	.word	0x55555593
 801fe6c:	3fe55555 	.word	0x3fe55555
 801fe70:	7fefffff 	.word	0x7fefffff

0801fe74 <with_errnof>:
 801fe74:	b510      	push	{r4, lr}
 801fe76:	ed2d 8b02 	vpush	{d8}
 801fe7a:	eeb0 8a40 	vmov.f32	s16, s0
 801fe7e:	4604      	mov	r4, r0
 801fe80:	f000 f82e 	bl	801fee0 <__errno>
 801fe84:	eeb0 0a48 	vmov.f32	s0, s16
 801fe88:	ecbd 8b02 	vpop	{d8}
 801fe8c:	6004      	str	r4, [r0, #0]
 801fe8e:	bd10      	pop	{r4, pc}

0801fe90 <xflowf>:
 801fe90:	b130      	cbz	r0, 801fea0 <xflowf+0x10>
 801fe92:	eef1 7a40 	vneg.f32	s15, s0
 801fe96:	2022      	movs	r0, #34	; 0x22
 801fe98:	ee27 0a80 	vmul.f32	s0, s15, s0
 801fe9c:	f7ff bfea 	b.w	801fe74 <with_errnof>
 801fea0:	eef0 7a40 	vmov.f32	s15, s0
 801fea4:	e7f7      	b.n	801fe96 <xflowf+0x6>
	...

0801fea8 <__math_uflowf>:
 801fea8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801feb0 <__math_uflowf+0x8>
 801feac:	f7ff bff0 	b.w	801fe90 <xflowf>
 801feb0:	10000000 	.word	0x10000000

0801feb4 <__math_may_uflowf>:
 801feb4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801febc <__math_may_uflowf+0x8>
 801feb8:	f7ff bfea 	b.w	801fe90 <xflowf>
 801febc:	1a200000 	.word	0x1a200000

0801fec0 <__math_oflowf>:
 801fec0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801fec8 <__math_oflowf+0x8>
 801fec4:	f7ff bfe4 	b.w	801fe90 <xflowf>
 801fec8:	70000000 	.word	0x70000000

0801fecc <matherr>:
 801fecc:	2000      	movs	r0, #0
 801fece:	4770      	bx	lr

0801fed0 <nan>:
 801fed0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801fed8 <nan+0x8>
 801fed4:	4770      	bx	lr
 801fed6:	bf00      	nop
 801fed8:	00000000 	.word	0x00000000
 801fedc:	7ff80000 	.word	0x7ff80000

0801fee0 <__errno>:
 801fee0:	4b01      	ldr	r3, [pc, #4]	; (801fee8 <__errno+0x8>)
 801fee2:	6818      	ldr	r0, [r3, #0]
 801fee4:	4770      	bx	lr
 801fee6:	bf00      	nop
 801fee8:	24002600 	.word	0x24002600

0801feec <_sbrk>:
 801feec:	4b04      	ldr	r3, [pc, #16]	; (801ff00 <_sbrk+0x14>)
 801feee:	6819      	ldr	r1, [r3, #0]
 801fef0:	4602      	mov	r2, r0
 801fef2:	b909      	cbnz	r1, 801fef8 <_sbrk+0xc>
 801fef4:	4903      	ldr	r1, [pc, #12]	; (801ff04 <_sbrk+0x18>)
 801fef6:	6019      	str	r1, [r3, #0]
 801fef8:	6818      	ldr	r0, [r3, #0]
 801fefa:	4402      	add	r2, r0
 801fefc:	601a      	str	r2, [r3, #0]
 801fefe:	4770      	bx	lr
 801ff00:	24004230 	.word	0x24004230
 801ff04:	24068020 	.word	0x24068020

0801ff08 <_init>:
 801ff08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ff0a:	bf00      	nop
 801ff0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ff0e:	bc08      	pop	{r3}
 801ff10:	469e      	mov	lr, r3
 801ff12:	4770      	bx	lr

0801ff14 <_fini>:
 801ff14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ff16:	bf00      	nop
 801ff18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ff1a:	bc08      	pop	{r3}
 801ff1c:	469e      	mov	lr, r3
 801ff1e:	4770      	bx	lr
