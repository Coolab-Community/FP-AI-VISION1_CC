
STM32H747I_DISCO_FoodReco_Quantized_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .isr_vector_m4 00000008  08100000  08100000  000f0000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .rodata2      000e4e1e  08100020  08100020  000f0020  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .text         00028610  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       0009aab4  080288c0  080288c0  000388c0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  080c3374  080c3374  000d3374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000004  080c337c  080c337c  000d337c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080c3380  080c3380  000d3380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000075e4  24000000  080c3384  000e0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .uart_rx_buffer 00000020  24007600  080ca968  000e7600  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 10 .uart_tx_buffer 000000a0  24007620  080ca988  000e7620  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00003264  240076c0  080caa28  000e76c0  2**5
                  ALLOC
 12 ._user_heap_stack 00001404  2400a924  080caa28  000ea924  2**0
                  ALLOC
 13 .sram_section 000003c0  30000000  30000000  001e0000  2**2
                  ALLOC
 14 .sdram_section 00e83980  d0000000  d0000000  001e0000  2**5
                  ALLOC
 15 .ARM.attributes 0000002e  00000000  00000000  001d4e3e  2**0
                  CONTENTS, READONLY
 16 .debug_line   00049979  00000000  00000000  001d4e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_info   000cf3d5  00000000  00000000  0021e7e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_abbrev 0000d3c8  00000000  00000000  002edbba  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_aranges 00003420  00000000  00000000  002faf88  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    001dd6a1  00000000  00000000  002fe3a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_ranges 00010958  00000000  00000000  004dba50  2**3
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_loc    00064ebe  00000000  00000000  004ec3a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  00054613  00000000  00000000  00551266  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .comment      0000007b  00000000  00000000  005a5879  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000df04  00000000  00000000  005a58f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240076c0 	.word	0x240076c0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08028898 	.word	0x08028898

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240076c4 	.word	0x240076c4
 80002dc:	08028898 	.word	0x08028898

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b9ae 	b.w	8000724 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f842 	bl	8000458 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__aeabi_f2lz>:
 80003e0:	ee07 0a90 	vmov	s15, r0
 80003e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80003e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003ec:	d401      	bmi.n	80003f2 <__aeabi_f2lz+0x12>
 80003ee:	f000 b80b 	b.w	8000408 <__aeabi_f2ulz>
 80003f2:	b508      	push	{r3, lr}
 80003f4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80003f8:	f000 f806 	bl	8000408 <__aeabi_f2ulz>
 80003fc:	4240      	negs	r0, r0
 80003fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000402:	bd08      	pop	{r3, pc}
 8000404:	0000      	movs	r0, r0
	...

08000408 <__aeabi_f2ulz>:
 8000408:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8000448 <__aeabi_f2ulz+0x40>
 800040c:	ee07 0a90 	vmov	s15, r0
 8000410:	ed9f 5b0f 	vldr	d5, [pc, #60]	; 8000450 <__aeabi_f2ulz+0x48>
 8000414:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000418:	ee27 6b06 	vmul.f64	d6, d7, d6
 800041c:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 8000420:	f84d bd04 	str.w	fp, [sp, #-4]!
 8000424:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000428:	eea4 7b45 	vfms.f64	d7, d4, d5
 800042c:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 8000430:	f04f 0b00 	mov.w	fp, #0
 8000434:	ee17 3a10 	vmov	r3, s14
 8000438:	ee16 1a10 	vmov	r1, s12
 800043c:	ea4b 0003 	orr.w	r0, fp, r3
 8000440:	f85d bb04 	ldr.w	fp, [sp], #4
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop
 8000448:	00000000 	.word	0x00000000
 800044c:	3df00000 	.word	0x3df00000
 8000450:	00000000 	.word	0x00000000
 8000454:	41f00000 	.word	0x41f00000

08000458 <__udivmoddi4>:
 8000458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800045c:	9e08      	ldr	r6, [sp, #32]
 800045e:	4604      	mov	r4, r0
 8000460:	4688      	mov	r8, r1
 8000462:	2b00      	cmp	r3, #0
 8000464:	d14b      	bne.n	80004fe <__udivmoddi4+0xa6>
 8000466:	428a      	cmp	r2, r1
 8000468:	4615      	mov	r5, r2
 800046a:	d967      	bls.n	800053c <__udivmoddi4+0xe4>
 800046c:	fab2 f282 	clz	r2, r2
 8000470:	b14a      	cbz	r2, 8000486 <__udivmoddi4+0x2e>
 8000472:	f1c2 0720 	rsb	r7, r2, #32
 8000476:	fa01 f302 	lsl.w	r3, r1, r2
 800047a:	fa20 f707 	lsr.w	r7, r0, r7
 800047e:	4095      	lsls	r5, r2
 8000480:	ea47 0803 	orr.w	r8, r7, r3
 8000484:	4094      	lsls	r4, r2
 8000486:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048a:	0c23      	lsrs	r3, r4, #16
 800048c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000490:	fa1f fc85 	uxth.w	ip, r5
 8000494:	fb0e 8817 	mls	r8, lr, r7, r8
 8000498:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049c:	fb07 f10c 	mul.w	r1, r7, ip
 80004a0:	4299      	cmp	r1, r3
 80004a2:	d909      	bls.n	80004b8 <__udivmoddi4+0x60>
 80004a4:	18eb      	adds	r3, r5, r3
 80004a6:	f107 30ff 	add.w	r0, r7, #4294967295
 80004aa:	f080 811b 	bcs.w	80006e4 <__udivmoddi4+0x28c>
 80004ae:	4299      	cmp	r1, r3
 80004b0:	f240 8118 	bls.w	80006e4 <__udivmoddi4+0x28c>
 80004b4:	3f02      	subs	r7, #2
 80004b6:	442b      	add	r3, r5
 80004b8:	1a5b      	subs	r3, r3, r1
 80004ba:	b2a4      	uxth	r4, r4
 80004bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c8:	fb00 fc0c 	mul.w	ip, r0, ip
 80004cc:	45a4      	cmp	ip, r4
 80004ce:	d909      	bls.n	80004e4 <__udivmoddi4+0x8c>
 80004d0:	192c      	adds	r4, r5, r4
 80004d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d6:	f080 8107 	bcs.w	80006e8 <__udivmoddi4+0x290>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	f240 8104 	bls.w	80006e8 <__udivmoddi4+0x290>
 80004e0:	3802      	subs	r0, #2
 80004e2:	442c      	add	r4, r5
 80004e4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80004e8:	eba4 040c 	sub.w	r4, r4, ip
 80004ec:	2700      	movs	r7, #0
 80004ee:	b11e      	cbz	r6, 80004f8 <__udivmoddi4+0xa0>
 80004f0:	40d4      	lsrs	r4, r2
 80004f2:	2300      	movs	r3, #0
 80004f4:	e9c6 4300 	strd	r4, r3, [r6]
 80004f8:	4639      	mov	r1, r7
 80004fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fe:	428b      	cmp	r3, r1
 8000500:	d909      	bls.n	8000516 <__udivmoddi4+0xbe>
 8000502:	2e00      	cmp	r6, #0
 8000504:	f000 80eb 	beq.w	80006de <__udivmoddi4+0x286>
 8000508:	2700      	movs	r7, #0
 800050a:	e9c6 0100 	strd	r0, r1, [r6]
 800050e:	4638      	mov	r0, r7
 8000510:	4639      	mov	r1, r7
 8000512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000516:	fab3 f783 	clz	r7, r3
 800051a:	2f00      	cmp	r7, #0
 800051c:	d147      	bne.n	80005ae <__udivmoddi4+0x156>
 800051e:	428b      	cmp	r3, r1
 8000520:	d302      	bcc.n	8000528 <__udivmoddi4+0xd0>
 8000522:	4282      	cmp	r2, r0
 8000524:	f200 80fa 	bhi.w	800071c <__udivmoddi4+0x2c4>
 8000528:	1a84      	subs	r4, r0, r2
 800052a:	eb61 0303 	sbc.w	r3, r1, r3
 800052e:	2001      	movs	r0, #1
 8000530:	4698      	mov	r8, r3
 8000532:	2e00      	cmp	r6, #0
 8000534:	d0e0      	beq.n	80004f8 <__udivmoddi4+0xa0>
 8000536:	e9c6 4800 	strd	r4, r8, [r6]
 800053a:	e7dd      	b.n	80004f8 <__udivmoddi4+0xa0>
 800053c:	b902      	cbnz	r2, 8000540 <__udivmoddi4+0xe8>
 800053e:	deff      	udf	#255	; 0xff
 8000540:	fab2 f282 	clz	r2, r2
 8000544:	2a00      	cmp	r2, #0
 8000546:	f040 808f 	bne.w	8000668 <__udivmoddi4+0x210>
 800054a:	1b49      	subs	r1, r1, r5
 800054c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000550:	fa1f f885 	uxth.w	r8, r5
 8000554:	2701      	movs	r7, #1
 8000556:	fbb1 fcfe 	udiv	ip, r1, lr
 800055a:	0c23      	lsrs	r3, r4, #16
 800055c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000560:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000564:	fb08 f10c 	mul.w	r1, r8, ip
 8000568:	4299      	cmp	r1, r3
 800056a:	d907      	bls.n	800057c <__udivmoddi4+0x124>
 800056c:	18eb      	adds	r3, r5, r3
 800056e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000572:	d202      	bcs.n	800057a <__udivmoddi4+0x122>
 8000574:	4299      	cmp	r1, r3
 8000576:	f200 80cd 	bhi.w	8000714 <__udivmoddi4+0x2bc>
 800057a:	4684      	mov	ip, r0
 800057c:	1a59      	subs	r1, r3, r1
 800057e:	b2a3      	uxth	r3, r4
 8000580:	fbb1 f0fe 	udiv	r0, r1, lr
 8000584:	fb0e 1410 	mls	r4, lr, r0, r1
 8000588:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800058c:	fb08 f800 	mul.w	r8, r8, r0
 8000590:	45a0      	cmp	r8, r4
 8000592:	d907      	bls.n	80005a4 <__udivmoddi4+0x14c>
 8000594:	192c      	adds	r4, r5, r4
 8000596:	f100 33ff 	add.w	r3, r0, #4294967295
 800059a:	d202      	bcs.n	80005a2 <__udivmoddi4+0x14a>
 800059c:	45a0      	cmp	r8, r4
 800059e:	f200 80b6 	bhi.w	800070e <__udivmoddi4+0x2b6>
 80005a2:	4618      	mov	r0, r3
 80005a4:	eba4 0408 	sub.w	r4, r4, r8
 80005a8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80005ac:	e79f      	b.n	80004ee <__udivmoddi4+0x96>
 80005ae:	f1c7 0c20 	rsb	ip, r7, #32
 80005b2:	40bb      	lsls	r3, r7
 80005b4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80005b8:	ea4e 0e03 	orr.w	lr, lr, r3
 80005bc:	fa01 f407 	lsl.w	r4, r1, r7
 80005c0:	fa20 f50c 	lsr.w	r5, r0, ip
 80005c4:	fa21 f30c 	lsr.w	r3, r1, ip
 80005c8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80005cc:	4325      	orrs	r5, r4
 80005ce:	fbb3 f9f8 	udiv	r9, r3, r8
 80005d2:	0c2c      	lsrs	r4, r5, #16
 80005d4:	fb08 3319 	mls	r3, r8, r9, r3
 80005d8:	fa1f fa8e 	uxth.w	sl, lr
 80005dc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80005e0:	fb09 f40a 	mul.w	r4, r9, sl
 80005e4:	429c      	cmp	r4, r3
 80005e6:	fa02 f207 	lsl.w	r2, r2, r7
 80005ea:	fa00 f107 	lsl.w	r1, r0, r7
 80005ee:	d90b      	bls.n	8000608 <__udivmoddi4+0x1b0>
 80005f0:	eb1e 0303 	adds.w	r3, lr, r3
 80005f4:	f109 30ff 	add.w	r0, r9, #4294967295
 80005f8:	f080 8087 	bcs.w	800070a <__udivmoddi4+0x2b2>
 80005fc:	429c      	cmp	r4, r3
 80005fe:	f240 8084 	bls.w	800070a <__udivmoddi4+0x2b2>
 8000602:	f1a9 0902 	sub.w	r9, r9, #2
 8000606:	4473      	add	r3, lr
 8000608:	1b1b      	subs	r3, r3, r4
 800060a:	b2ad      	uxth	r5, r5
 800060c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000610:	fb08 3310 	mls	r3, r8, r0, r3
 8000614:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000618:	fb00 fa0a 	mul.w	sl, r0, sl
 800061c:	45a2      	cmp	sl, r4
 800061e:	d908      	bls.n	8000632 <__udivmoddi4+0x1da>
 8000620:	eb1e 0404 	adds.w	r4, lr, r4
 8000624:	f100 33ff 	add.w	r3, r0, #4294967295
 8000628:	d26b      	bcs.n	8000702 <__udivmoddi4+0x2aa>
 800062a:	45a2      	cmp	sl, r4
 800062c:	d969      	bls.n	8000702 <__udivmoddi4+0x2aa>
 800062e:	3802      	subs	r0, #2
 8000630:	4474      	add	r4, lr
 8000632:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000636:	fba0 8902 	umull	r8, r9, r0, r2
 800063a:	eba4 040a 	sub.w	r4, r4, sl
 800063e:	454c      	cmp	r4, r9
 8000640:	46c2      	mov	sl, r8
 8000642:	464b      	mov	r3, r9
 8000644:	d354      	bcc.n	80006f0 <__udivmoddi4+0x298>
 8000646:	d051      	beq.n	80006ec <__udivmoddi4+0x294>
 8000648:	2e00      	cmp	r6, #0
 800064a:	d069      	beq.n	8000720 <__udivmoddi4+0x2c8>
 800064c:	ebb1 050a 	subs.w	r5, r1, sl
 8000650:	eb64 0403 	sbc.w	r4, r4, r3
 8000654:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000658:	40fd      	lsrs	r5, r7
 800065a:	40fc      	lsrs	r4, r7
 800065c:	ea4c 0505 	orr.w	r5, ip, r5
 8000660:	e9c6 5400 	strd	r5, r4, [r6]
 8000664:	2700      	movs	r7, #0
 8000666:	e747      	b.n	80004f8 <__udivmoddi4+0xa0>
 8000668:	f1c2 0320 	rsb	r3, r2, #32
 800066c:	fa20 f703 	lsr.w	r7, r0, r3
 8000670:	4095      	lsls	r5, r2
 8000672:	fa01 f002 	lsl.w	r0, r1, r2
 8000676:	fa21 f303 	lsr.w	r3, r1, r3
 800067a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800067e:	4338      	orrs	r0, r7
 8000680:	0c01      	lsrs	r1, r0, #16
 8000682:	fbb3 f7fe 	udiv	r7, r3, lr
 8000686:	fa1f f885 	uxth.w	r8, r5
 800068a:	fb0e 3317 	mls	r3, lr, r7, r3
 800068e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000692:	fb07 f308 	mul.w	r3, r7, r8
 8000696:	428b      	cmp	r3, r1
 8000698:	fa04 f402 	lsl.w	r4, r4, r2
 800069c:	d907      	bls.n	80006ae <__udivmoddi4+0x256>
 800069e:	1869      	adds	r1, r5, r1
 80006a0:	f107 3cff 	add.w	ip, r7, #4294967295
 80006a4:	d22f      	bcs.n	8000706 <__udivmoddi4+0x2ae>
 80006a6:	428b      	cmp	r3, r1
 80006a8:	d92d      	bls.n	8000706 <__udivmoddi4+0x2ae>
 80006aa:	3f02      	subs	r7, #2
 80006ac:	4429      	add	r1, r5
 80006ae:	1acb      	subs	r3, r1, r3
 80006b0:	b281      	uxth	r1, r0
 80006b2:	fbb3 f0fe 	udiv	r0, r3, lr
 80006b6:	fb0e 3310 	mls	r3, lr, r0, r3
 80006ba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006be:	fb00 f308 	mul.w	r3, r0, r8
 80006c2:	428b      	cmp	r3, r1
 80006c4:	d907      	bls.n	80006d6 <__udivmoddi4+0x27e>
 80006c6:	1869      	adds	r1, r5, r1
 80006c8:	f100 3cff 	add.w	ip, r0, #4294967295
 80006cc:	d217      	bcs.n	80006fe <__udivmoddi4+0x2a6>
 80006ce:	428b      	cmp	r3, r1
 80006d0:	d915      	bls.n	80006fe <__udivmoddi4+0x2a6>
 80006d2:	3802      	subs	r0, #2
 80006d4:	4429      	add	r1, r5
 80006d6:	1ac9      	subs	r1, r1, r3
 80006d8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80006dc:	e73b      	b.n	8000556 <__udivmoddi4+0xfe>
 80006de:	4637      	mov	r7, r6
 80006e0:	4630      	mov	r0, r6
 80006e2:	e709      	b.n	80004f8 <__udivmoddi4+0xa0>
 80006e4:	4607      	mov	r7, r0
 80006e6:	e6e7      	b.n	80004b8 <__udivmoddi4+0x60>
 80006e8:	4618      	mov	r0, r3
 80006ea:	e6fb      	b.n	80004e4 <__udivmoddi4+0x8c>
 80006ec:	4541      	cmp	r1, r8
 80006ee:	d2ab      	bcs.n	8000648 <__udivmoddi4+0x1f0>
 80006f0:	ebb8 0a02 	subs.w	sl, r8, r2
 80006f4:	eb69 020e 	sbc.w	r2, r9, lr
 80006f8:	3801      	subs	r0, #1
 80006fa:	4613      	mov	r3, r2
 80006fc:	e7a4      	b.n	8000648 <__udivmoddi4+0x1f0>
 80006fe:	4660      	mov	r0, ip
 8000700:	e7e9      	b.n	80006d6 <__udivmoddi4+0x27e>
 8000702:	4618      	mov	r0, r3
 8000704:	e795      	b.n	8000632 <__udivmoddi4+0x1da>
 8000706:	4667      	mov	r7, ip
 8000708:	e7d1      	b.n	80006ae <__udivmoddi4+0x256>
 800070a:	4681      	mov	r9, r0
 800070c:	e77c      	b.n	8000608 <__udivmoddi4+0x1b0>
 800070e:	3802      	subs	r0, #2
 8000710:	442c      	add	r4, r5
 8000712:	e747      	b.n	80005a4 <__udivmoddi4+0x14c>
 8000714:	f1ac 0c02 	sub.w	ip, ip, #2
 8000718:	442b      	add	r3, r5
 800071a:	e72f      	b.n	800057c <__udivmoddi4+0x124>
 800071c:	4638      	mov	r0, r7
 800071e:	e708      	b.n	8000532 <__udivmoddi4+0xda>
 8000720:	4637      	mov	r7, r6
 8000722:	e6e9      	b.n	80004f8 <__udivmoddi4+0xa0>

08000724 <__aeabi_idiv0>:
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop

08000728 <Reset_Handler_m4>:
    .section  .text.Reset_Handler_m4
  .weak  Reset_Handler_m4
  .type  Reset_Handler_m4, %function
Reset_Handler_m4:
 Infinite_Loop:
  b  Infinite_Loop
 8000728:	e7fe      	b.n	8000728 <Reset_Handler_m4>
	...

0800072c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800072c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000764 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000730:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000732:	e003      	b.n	800073c <LoopCopyDataInit>

08000734 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000736:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000738:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800073a:	3104      	adds	r1, #4

0800073c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800073c:	480b      	ldr	r0, [pc, #44]	; (800076c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800073e:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000740:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000742:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000744:	d3f6      	bcc.n	8000734 <CopyDataInit>
  ldr  r2, =_sbss
 8000746:	4a0b      	ldr	r2, [pc, #44]	; (8000774 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000748:	e002      	b.n	8000750 <LoopFillZerobss>

0800074a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800074a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800074c:	f842 3b04 	str.w	r3, [r2], #4

08000750 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000750:	4b09      	ldr	r3, [pc, #36]	; (8000778 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000752:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000754:	d3f9      	bcc.n	800074a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000756:	f006 fa93 	bl	8006c80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800075a:	f025 fcdf 	bl	802611c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800075e:	f004 fc23 	bl	8004fa8 <main>
  bx  lr    
 8000762:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000764:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8000768:	080c3384 	.word	0x080c3384
  ldr  r0, =_sdata
 800076c:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8000770:	240075e4 	.word	0x240075e4
  ldr  r2, =_sbss
 8000774:	240076c0 	.word	0x240076c0
  ldr  r3, = _ebss
 8000778:	2400a924 	.word	0x2400a924

0800077c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800077c:	e7fe      	b.n	800077c <ADC3_IRQHandler>
	...

08000780 <ai_get_input_height>:

/**
 * @brief Returns value of the height for the first input tensor
 * @retval ai_u16 Height for the first input tensor
 */
ai_u16 ai_get_input_height(void) { return (AI_BUFFER_HEIGHT(&ai_input[0])); }
 8000780:	4b01      	ldr	r3, [pc, #4]	; (8000788 <ai_get_input_height+0x8>)
 8000782:	88d8      	ldrh	r0, [r3, #6]
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	240076dc 	.word	0x240076dc

0800078c <ai_get_input_width>:

/**
 * @brief Returns value of the width for the first input tensor
 * @retval ai_u16 Width for the first input tensor
 */
ai_u16 ai_get_input_width(void) { return (AI_BUFFER_WIDTH(&ai_input[0])); }
 800078c:	4b01      	ldr	r3, [pc, #4]	; (8000794 <ai_get_input_width+0x8>)
 800078e:	8918      	ldrh	r0, [r3, #8]
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	240076dc 	.word	0x240076dc

08000798 <ai_get_input_channels>:

/**
 * @brief Returns value of the channels for the first input tensor
 * @retval ai_u16 Channels for the first input tensor
 */
ai_u16 ai_get_input_channels(void) { return (AI_BUFFER_CHANNELS(&ai_input[0])); }
 8000798:	4b01      	ldr	r3, [pc, #4]	; (80007a0 <ai_get_input_channels+0x8>)
 800079a:	8998      	ldrh	r0, [r3, #12]
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	240076dc 	.word	0x240076dc

080007a4 <ai_get_input_format>:
 * @brief Returns the input format type
 * @retval ai_size Input format type: quantized (AI_BUFFER_FMT_TYPE_Q) or float (AI_BUFFER_FMT_TYPE_FLOAT)
 */
ai_size ai_get_input_format(void)
{
  ai_buffer_format fmt = AI_BUFFER_FORMAT(&ai_input[0]);
 80007a4:	4b02      	ldr	r3, [pc, #8]	; (80007b0 <ai_get_input_format+0xc>)
  return AI_BUFFER_FMT_GET_TYPE(fmt);
 80007a6:	6818      	ldr	r0, [r3, #0]
}
 80007a8:	f3c0 4043 	ubfx	r0, r0, #17, #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	240076dc 	.word	0x240076dc

080007b4 <ai_get_output_format>:
 * @brief Returns the output format type
 * @retval ai_size Output format type: quantized (AI_BUFFER_FMT_TYPE_Q) or float (AI_BUFFER_FMT_TYPE_FLOAT)
 */
ai_size ai_get_output_format(void)
{
  ai_buffer_format fmt = AI_BUFFER_FORMAT(&ai_output[0]);
 80007b4:	4b02      	ldr	r3, [pc, #8]	; (80007c0 <ai_get_output_format+0xc>)
  return AI_BUFFER_FMT_GET_TYPE(fmt);
 80007b6:	6818      	ldr	r0, [r3, #0]
}
 80007b8:	f3c0 4043 	ubfx	r0, r0, #17, #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	240076f4 	.word	0x240076f4

080007c4 <ai_get_input_quantized_format>:
 * @brief Returns value of the input quantized format
 * @retval ai_size Input quantized format
 */
ai_size ai_get_input_quantized_format(void)
{
  ai_buffer_format fmt = AI_BUFFER_FORMAT(&ai_input[0]);
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <ai_get_input_quantized_format+0x1c>)
 80007c6:	6818      	ldr	r0, [r3, #0]
 80007c8:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
  return (AI_BUFFER_FMT_GET_BITS(fmt) - AI_BUFFER_FMT_GET_SIGN(fmt) - AI_BUFFER_FMT_GET_FBITS(fmt));
 80007cc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80007d0:	f3c3 12c6 	ubfx	r2, r3, #7, #7
 80007d4:	f3c3 53c0 	ubfx	r3, r3, #23, #1
 80007d8:	3840      	subs	r0, #64	; 0x40
 80007da:	1ad3      	subs	r3, r2, r3
}
 80007dc:	1a18      	subs	r0, r3, r0
 80007de:	4770      	bx	lr
 80007e0:	240076dc 	.word	0x240076dc

080007e4 <ai_get_input_quantization_scheme>:
 * @brief Returns value of the scale for the input quantized format
 * @retval ai_size Scale for input quantized format
 */
ai_float ai_get_input_scale(void)
{
  return AI_BUFFER_META_INFO_INTQ_GET_SCALE(ai_input[0].meta_info, 0);
 80007e4:	490f      	ldr	r1, [pc, #60]	; (8000824 <ai_get_input_quantization_scheme+0x40>)
 80007e6:	694a      	ldr	r2, [r1, #20]
 80007e8:	b1ca      	cbz	r2, 800081e <ai_get_input_quantization_scheme+0x3a>
 80007ea:	6813      	ldr	r3, [r2, #0]
 80007ec:	f013 0001 	ands.w	r0, r3, #1
 80007f0:	d016      	beq.n	8000820 <ai_get_input_quantization_scheme+0x3c>
 80007f2:	6850      	ldr	r0, [r2, #4]
 80007f4:	b1a0      	cbz	r0, 8000820 <ai_get_input_quantization_scheme+0x3c>
 80007f6:	6843      	ldr	r3, [r0, #4]
 80007f8:	b18b      	cbz	r3, 800081e <ai_get_input_quantization_scheme+0x3a>
 80007fa:	8840      	ldrh	r0, [r0, #2]
 80007fc:	b180      	cbz	r0, 8000820 <ai_get_input_quantization_scheme+0x3c>
 80007fe:	681a      	ldr	r2, [r3, #0]
  ai_size sign = AI_BUFFER_FMT_GET_SIGN(fmt);  
 8000800:	680b      	ldr	r3, [r1, #0]
  if(scale==0)
 8000802:	edd2 7a00 	vldr	s15, [r2]
  ai_size sign = AI_BUFFER_FMT_GET_SIGN(fmt);  
 8000806:	f3c3 53c0 	ubfx	r3, r3, #23, #1
  if(scale==0)
 800080a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800080e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000812:	d004      	beq.n	800081e <ai_get_input_quantization_scheme+0x3a>
    if(sign==0)
 8000814:	2b00      	cmp	r3, #0
      return AI_SINT_Q;
 8000816:	bf0c      	ite	eq
 8000818:	2001      	moveq	r0, #1
 800081a:	2002      	movne	r0, #2
 800081c:	4770      	bx	lr
    return AI_FXP_Q;
 800081e:	2000      	movs	r0, #0
}
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	240076dc 	.word	0x240076dc

08000828 <ai_get_output_quantization_scheme>:
 * @brief Returns value of the scale for the output quantized format
 * @retval ai_size Scale for output quantized format
 */
ai_float ai_get_output_scale(void)
{
  return AI_BUFFER_META_INFO_INTQ_GET_SCALE(ai_output[0].meta_info, 0);
 8000828:	490f      	ldr	r1, [pc, #60]	; (8000868 <ai_get_output_quantization_scheme+0x40>)
 800082a:	694a      	ldr	r2, [r1, #20]
 800082c:	b1ca      	cbz	r2, 8000862 <ai_get_output_quantization_scheme+0x3a>
 800082e:	6813      	ldr	r3, [r2, #0]
 8000830:	f013 0001 	ands.w	r0, r3, #1
 8000834:	d016      	beq.n	8000864 <ai_get_output_quantization_scheme+0x3c>
 8000836:	6850      	ldr	r0, [r2, #4]
 8000838:	b1a0      	cbz	r0, 8000864 <ai_get_output_quantization_scheme+0x3c>
 800083a:	6843      	ldr	r3, [r0, #4]
 800083c:	b18b      	cbz	r3, 8000862 <ai_get_output_quantization_scheme+0x3a>
 800083e:	8840      	ldrh	r0, [r0, #2]
 8000840:	b180      	cbz	r0, 8000864 <ai_get_output_quantization_scheme+0x3c>
 8000842:	681a      	ldr	r2, [r3, #0]
  ai_size sign = AI_BUFFER_FMT_GET_SIGN(fmt);  
 8000844:	680b      	ldr	r3, [r1, #0]
  if(scale==0)
 8000846:	edd2 7a00 	vldr	s15, [r2]
  ai_size sign = AI_BUFFER_FMT_GET_SIGN(fmt);  
 800084a:	f3c3 53c0 	ubfx	r3, r3, #23, #1
  if(scale==0)
 800084e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000856:	d004      	beq.n	8000862 <ai_get_output_quantization_scheme+0x3a>
    if(sign==0)
 8000858:	2b00      	cmp	r3, #0
      return AI_SINT_Q;
 800085a:	bf0c      	ite	eq
 800085c:	2001      	moveq	r0, #1
 800085e:	2002      	movne	r0, #2
 8000860:	4770      	bx	lr
    return AI_FXP_Q;
 8000862:	2000      	movs	r0, #0
}
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	240076f4 	.word	0x240076f4

0800086c <ai_get_output_fxp_scale>:
  fmt_1 = AI_BUFFER_FORMAT(&ai_output[0]);
 800086c:	4a07      	ldr	r2, [pc, #28]	; (800088c <ai_get_output_fxp_scale+0x20>)
  scale = 1.0f / (0x1U << AI_BUFFER_FMT_GET_FBITS(fmt_1));
 800086e:	2301      	movs	r3, #1
 8000870:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000874:	6812      	ldr	r2, [r2, #0]
 8000876:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800087a:	3a40      	subs	r2, #64	; 0x40
 800087c:	4093      	lsls	r3, r2
 800087e:	ee00 3a10 	vmov	s0, r3
 8000882:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
 8000886:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800088a:	4770      	bx	lr
 800088c:	240076f4 	.word	0x240076f4

08000890 <ai_get_input_scale>:
  return AI_BUFFER_META_INFO_INTQ_GET_SCALE(ai_input[0].meta_info, 0);
 8000890:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <ai_get_input_scale+0x28>)
 8000892:	695b      	ldr	r3, [r3, #20]
 8000894:	b163      	cbz	r3, 80008b0 <ai_get_input_scale+0x20>
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	07d2      	lsls	r2, r2, #31
 800089a:	d509      	bpl.n	80008b0 <ai_get_input_scale+0x20>
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	b13b      	cbz	r3, 80008b0 <ai_get_input_scale+0x20>
 80008a0:	685a      	ldr	r2, [r3, #4]
 80008a2:	b12a      	cbz	r2, 80008b0 <ai_get_input_scale+0x20>
 80008a4:	885b      	ldrh	r3, [r3, #2]
 80008a6:	b11b      	cbz	r3, 80008b0 <ai_get_input_scale+0x20>
 80008a8:	6813      	ldr	r3, [r2, #0]
 80008aa:	ed93 0a00 	vldr	s0, [r3]
 80008ae:	4770      	bx	lr
 80008b0:	ed9f 0a02 	vldr	s0, [pc, #8]	; 80008bc <ai_get_input_scale+0x2c>
}
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	240076dc 	.word	0x240076dc
 80008bc:	00000000 	.word	0x00000000

080008c0 <ai_get_input_zero_point>:
  return AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(ai_input[0].meta_info, 0);
 80008c0:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <ai_get_input_zero_point+0x40>)
 80008c2:	695a      	ldr	r2, [r3, #20]
 80008c4:	b18a      	cbz	r2, 80008ea <ai_get_input_zero_point+0x2a>
 80008c6:	6813      	ldr	r3, [r2, #0]
 80008c8:	f013 0001 	ands.w	r0, r3, #1
 80008cc:	d00c      	beq.n	80008e8 <ai_get_input_zero_point+0x28>
 80008ce:	6850      	ldr	r0, [r2, #4]
 80008d0:	b150      	cbz	r0, 80008e8 <ai_get_input_zero_point+0x28>
 80008d2:	8802      	ldrh	r2, [r0, #0]
 80008d4:	6843      	ldr	r3, [r0, #4]
 80008d6:	0792      	lsls	r2, r2, #30
 80008d8:	d509      	bpl.n	80008ee <ai_get_input_zero_point+0x2e>
 80008da:	b123      	cbz	r3, 80008e6 <ai_get_input_zero_point+0x26>
 80008dc:	8840      	ldrh	r0, [r0, #2]
 80008de:	b118      	cbz	r0, 80008e8 <ai_get_input_zero_point+0x28>
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	7818      	ldrb	r0, [r3, #0]
 80008e4:	4770      	bx	lr
 80008e6:	4618      	mov	r0, r3
}
 80008e8:	4770      	bx	lr
  return AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(ai_input[0].meta_info, 0);
 80008ea:	4610      	mov	r0, r2
 80008ec:	4770      	bx	lr
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d0f9      	beq.n	80008e6 <ai_get_input_zero_point+0x26>
 80008f2:	8840      	ldrh	r0, [r0, #2]
 80008f4:	2800      	cmp	r0, #0
 80008f6:	d0f7      	beq.n	80008e8 <ai_get_input_zero_point+0x28>
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	f993 0000 	ldrsb.w	r0, [r3]
 80008fe:	4770      	bx	lr
 8000900:	240076dc 	.word	0x240076dc

08000904 <ai_get_output_scale>:
  return AI_BUFFER_META_INFO_INTQ_GET_SCALE(ai_output[0].meta_info, 0);
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <ai_get_output_scale+0x28>)
 8000906:	695b      	ldr	r3, [r3, #20]
 8000908:	b163      	cbz	r3, 8000924 <ai_get_output_scale+0x20>
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	07d2      	lsls	r2, r2, #31
 800090e:	d509      	bpl.n	8000924 <ai_get_output_scale+0x20>
 8000910:	685b      	ldr	r3, [r3, #4]
 8000912:	b13b      	cbz	r3, 8000924 <ai_get_output_scale+0x20>
 8000914:	685a      	ldr	r2, [r3, #4]
 8000916:	b12a      	cbz	r2, 8000924 <ai_get_output_scale+0x20>
 8000918:	885b      	ldrh	r3, [r3, #2]
 800091a:	b11b      	cbz	r3, 8000924 <ai_get_output_scale+0x20>
 800091c:	6813      	ldr	r3, [r2, #0]
 800091e:	ed93 0a00 	vldr	s0, [r3]
 8000922:	4770      	bx	lr
 8000924:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8000930 <ai_get_output_scale+0x2c>
}
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	240076f4 	.word	0x240076f4
 8000930:	00000000 	.word	0x00000000

08000934 <ai_get_output_zero_point>:
 * @brief Returns value of the zero point for the output quantized format
 * @retval ai_size Zero point for output quantized format
 */
ai_i32 ai_get_output_zero_point(void)
{
  return AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(ai_output[0].meta_info, 0);
 8000934:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <ai_get_output_zero_point+0x40>)
 8000936:	695a      	ldr	r2, [r3, #20]
 8000938:	b18a      	cbz	r2, 800095e <ai_get_output_zero_point+0x2a>
 800093a:	6813      	ldr	r3, [r2, #0]
 800093c:	f013 0001 	ands.w	r0, r3, #1
 8000940:	d00c      	beq.n	800095c <ai_get_output_zero_point+0x28>
 8000942:	6850      	ldr	r0, [r2, #4]
 8000944:	b150      	cbz	r0, 800095c <ai_get_output_zero_point+0x28>
 8000946:	8802      	ldrh	r2, [r0, #0]
 8000948:	6843      	ldr	r3, [r0, #4]
 800094a:	0792      	lsls	r2, r2, #30
 800094c:	d509      	bpl.n	8000962 <ai_get_output_zero_point+0x2e>
 800094e:	b123      	cbz	r3, 800095a <ai_get_output_zero_point+0x26>
 8000950:	8840      	ldrh	r0, [r0, #2]
 8000952:	b118      	cbz	r0, 800095c <ai_get_output_zero_point+0x28>
 8000954:	685b      	ldr	r3, [r3, #4]
 8000956:	7818      	ldrb	r0, [r3, #0]
 8000958:	4770      	bx	lr
 800095a:	4618      	mov	r0, r3
}
 800095c:	4770      	bx	lr
  return AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(ai_output[0].meta_info, 0);
 800095e:	4610      	mov	r0, r2
 8000960:	4770      	bx	lr
 8000962:	2b00      	cmp	r3, #0
 8000964:	d0f9      	beq.n	800095a <ai_get_output_zero_point+0x26>
 8000966:	8840      	ldrh	r0, [r0, #2]
 8000968:	2800      	cmp	r0, #0
 800096a:	d0f7      	beq.n	800095c <ai_get_output_zero_point+0x28>
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	f993 0000 	ldrsb.w	r0, [r3]
 8000972:	4770      	bx	lr
 8000974:	240076f4 	.word	0x240076f4

08000978 <ai_init>:
 * @brief Initializes the generated C model for a neural network
 * @param  activation_buffer Pointer to the activation buffer (i.e. working buffer used during NN inference)
 * @retval ai_handle
 */
ai_handle ai_init(void* activation_buffer)
{
 8000978:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  network_handle = AI_HANDLE_NULL;
 800097c:	4c21      	ldr	r4, [pc, #132]	; (8000a04 <ai_init+0x8c>)
 800097e:	2500      	movs	r5, #0
{
 8000980:	b08d      	sub	sp, #52	; 0x34
 8000982:	4681      	mov	r9, r0

  /* Creating the network */
  ai_network_create(&network_handle, AI_NETWORK_DATA_CONFIG);
 8000984:	4629      	mov	r1, r5
 8000986:	4620      	mov	r0, r4

  /* Initialize param structure for the activation and weight buffers */
  const ai_network_params params = {AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()),
 8000988:	f04f 1701 	mov.w	r7, #65537	; 0x10001
  network_handle = AI_HANDLE_NULL;
 800098c:	6025      	str	r5, [r4, #0]
  const ai_network_params params = {AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()),
 800098e:	2601      	movs	r6, #1
  ai_network_create(&network_handle, AI_NETWORK_DATA_CONFIG);
 8000990:	f004 fca0 	bl	80052d4 <ai_network_create>
  const ai_network_params params = {AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()),
 8000994:	4a1c      	ldr	r2, [pc, #112]	; (8000a08 <ai_init+0x90>)
 8000996:	4b1d      	ldr	r3, [pc, #116]	; (8000a0c <ai_init+0x94>)

  /* Initializing the network */
  ai_network_init(network_handle, &params);
  
  /*Retrieve network descriptor*/
  ai_network_get_info(network_handle, &desc_report);
 8000998:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8000a20 <ai_init+0xa8>
  const ai_network_params params = {AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()),
 800099c:	f8ad 6008 	strh.w	r6, [sp, #8]
 80009a0:	9303      	str	r3, [sp, #12]
 80009a2:	e9cd 2700 	strd	r2, r7, [sp]
 80009a6:	f005 ffc3 	bl	8006930 <ai_network_data_weights_get>
 80009aa:	4a19      	ldr	r2, [pc, #100]	; (8000a10 <ai_init+0x98>)
 80009ac:	4b19      	ldr	r3, [pc, #100]	; (8000a14 <ai_init+0x9c>)
  ai_network_init(network_handle, &params);
 80009ae:	4669      	mov	r1, sp
  const ai_network_params params = {AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()),
 80009b0:	9004      	str	r0, [sp, #16]
  ai_network_init(network_handle, &params);
 80009b2:	6820      	ldr	r0, [r4, #0]
  const ai_network_params params = {AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()),
 80009b4:	9206      	str	r2, [sp, #24]
 80009b6:	9309      	str	r3, [sp, #36]	; 0x24
 80009b8:	9505      	str	r5, [sp, #20]
 80009ba:	9707      	str	r7, [sp, #28]
 80009bc:	f8ad 6020 	strh.w	r6, [sp, #32]
 80009c0:	950b      	str	r5, [sp, #44]	; 0x2c
 80009c2:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  ai_network_init(network_handle, &params);
 80009c6:	f004 fc95 	bl	80052f4 <ai_network_init>
  ai_network_get_info(network_handle, &desc_report);
 80009ca:	4641      	mov	r1, r8
 80009cc:	6820      	ldr	r0, [r4, #0]
 80009ce:	f004 fc3d 	bl	800524c <ai_network_get_info>
  
  /*Copy descriptor info*/
  ai_input[0]= desc_report.inputs[0];
 80009d2:	f8d8 c034 	ldr.w	ip, [r8, #52]	; 0x34
 80009d6:	4e10      	ldr	r6, [pc, #64]	; (8000a18 <ai_init+0xa0>)
 80009d8:	4667      	mov	r7, ip
  ai_output[0]= desc_report.outputs[0];
 80009da:	f8d8 5038 	ldr.w	r5, [r8, #56]	; 0x38
 80009de:	4c0f      	ldr	r4, [pc, #60]	; (8000a1c <ai_init+0xa4>)
  ai_input[0]= desc_report.inputs[0];
 80009e0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80009e2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80009e4:	e897 0003 	ldmia.w	r7, {r0, r1}
 80009e8:	e886 0003 	stmia.w	r6, {r0, r1}
  ai_output[0]= desc_report.outputs[0];
 80009ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80009f4:	e884 0003 	stmia.w	r4, {r0, r1}
  
  return desc_report.inputs->data;
}
 80009f8:	f8dc 0010 	ldr.w	r0, [ip, #16]
 80009fc:	b00d      	add	sp, #52	; 0x34
 80009fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a02:	bf00      	nop
 8000a04:	24007780 	.word	0x24007780
 8000a08:	40040440 	.word	0x40040440
 8000a0c:	00083a60 	.word	0x00083a60
 8000a10:	00040440 	.word	0x00040440
 8000a14:	000951e0 	.word	0x000951e0
 8000a18:	240076dc 	.word	0x240076dc
 8000a1c:	240076f4 	.word	0x240076f4
 8000a20:	2400770c 	.word	0x2400770c

08000a24 <ai_deinit>:

/**
 * @brief De-initializes the generated C model for a neural network
 */
void ai_deinit(void) { ai_network_destroy(network_handle); }
 8000a24:	4b01      	ldr	r3, [pc, #4]	; (8000a2c <ai_deinit+0x8>)
 8000a26:	6818      	ldr	r0, [r3, #0]
 8000a28:	f004 bc62 	b.w	80052f0 <ai_network_destroy>
 8000a2c:	24007780 	.word	0x24007780

08000a30 <ai_run>:
 * @brief  Run an inference of the generated C model for a neural network
 * @param  input   Pointer to the buffer containing the inference input data
 * @param  output  Pointer to the buffer for the inference output data
 */
void ai_run(void* input, void* output)
{
 8000a30:	b538      	push	{r3, r4, r5, lr}
  ai_i32 nbatch;
  
  ai_input[0].data = AI_HANDLE_PTR(input);
 8000a32:	4b07      	ldr	r3, [pc, #28]	; (8000a50 <ai_run+0x20>)
  ai_output[0].data = AI_HANDLE_PTR(output);
 8000a34:	4c07      	ldr	r4, [pc, #28]	; (8000a54 <ai_run+0x24>)
  
  nbatch = ai_network_run(network_handle, &ai_input[0], &ai_output[0]);
 8000a36:	4d08      	ldr	r5, [pc, #32]	; (8000a58 <ai_run+0x28>)
  ai_input[0].data = AI_HANDLE_PTR(input);
 8000a38:	6118      	str	r0, [r3, #16]
  nbatch = ai_network_run(network_handle, &ai_input[0], &ai_output[0]);
 8000a3a:	4622      	mov	r2, r4
  ai_output[0].data = AI_HANDLE_PTR(output);
 8000a3c:	6121      	str	r1, [r4, #16]
  nbatch = ai_network_run(network_handle, &ai_input[0], &ai_output[0]);
 8000a3e:	4619      	mov	r1, r3
 8000a40:	6828      	ldr	r0, [r5, #0]
 8000a42:	f005 ff73 	bl	800692c <ai_network_run>
  
  if (nbatch != 1) {
 8000a46:	2801      	cmp	r0, #1
 8000a48:	d000      	beq.n	8000a4c <ai_run+0x1c>
 8000a4a:	e7fe      	b.n	8000a4a <ai_run+0x1a>
        while(1);
  }
}
 8000a4c:	bd38      	pop	{r3, r4, r5, pc}
 8000a4e:	bf00      	nop
 8000a50:	240076dc 	.word	0x240076dc
 8000a54:	240076f4 	.word	0x240076f4
 8000a58:	24007780 	.word	0x24007780

08000a5c <AUDIO_Process.part.0>:

  switch(audio_state)
  {
  case AUDIO_STATE_PLAYING:

    if(buffer_ctl.fptr >= buffer_ctl.AudioFileSize)
 8000a5c:	4942      	ldr	r1, [pc, #264]	; (8000b68 <AUDIO_Process.part.0+0x10c>)
uint8_t AUDIO_Process(void)
 8000a5e:	b4f0      	push	{r4, r5, r6, r7}
    if(buffer_ctl.fptr >= buffer_ctl.AudioFileSize)
 8000a60:	f8d1 2808 	ldr.w	r2, [r1, #2056]	; 0x808
 8000a64:	f8d1 7800 	ldr.w	r7, [r1, #2048]	; 0x800
 8000a68:	4297      	cmp	r7, r2
 8000a6a:	d33d      	bcc.n	8000ae8 <AUDIO_Process.part.0+0x8c>
      error_state = AUDIO_ERROR_EOF;

    }

    /* 1st half buffer played; so fill it and continue playing from bottom*/
    if(buffer_ctl.state == BUFFER_OFFSET_HALF)
 8000a6c:	f891 3804 	ldrb.w	r3, [r1, #2052]	; 0x804
      buffer_ctl.fptr = 0;
 8000a70:	2700      	movs	r7, #0
    if(buffer_ctl.state == BUFFER_OFFSET_HALF)
 8000a72:	2b01      	cmp	r3, #1
      buffer_ctl.fptr = 0;
 8000a74:	f8c1 7800 	str.w	r7, [r1, #2048]	; 0x800
    if(buffer_ctl.state == BUFFER_OFFSET_HALF)
 8000a78:	d070      	beq.n	8000b5c <AUDIO_Process.part.0+0x100>
      SCB_CleanDCache_by_Addr((uint32_t*)&buffer_ctl.buff[0], AUDIO_BUFFER_SIZE/2);
      }
    }

    /* 2nd half buffer played; so fill it and continue playing from top */
    if(buffer_ctl.state == BUFFER_OFFSET_FULL)
 8000a7a:	2b02      	cmp	r3, #2
      error_state = AUDIO_ERROR_EOF;
 8000a7c:	f04f 0003 	mov.w	r0, #3
    if(buffer_ctl.state == BUFFER_OFFSET_FULL)
 8000a80:	d139      	bne.n	8000af6 <AUDIO_Process.part.0+0x9a>
    {
      bytesread = GetData((void *)buffer_ctl.SrcAddress,
 8000a82:	f8d1 7800 	ldr.w	r7, [r1, #2048]	; 0x800
{
  uint8_t *lptr = pdata;
  uint32_t ReadDataNbr;

  ReadDataNbr = 0;
  while(((offset + ReadDataNbr) < buffer_ctl.AudioFileSize) && (ReadDataNbr < NbrOfData))
 8000a86:	f8d1 3808 	ldr.w	r3, [r1, #2056]	; 0x808
      bytesread = GetData((void *)buffer_ctl.SrcAddress,
 8000a8a:	f8d1 480c 	ldr.w	r4, [r1, #2060]	; 0x80c
  while(((offset + ReadDataNbr) < buffer_ctl.AudioFileSize) && (ReadDataNbr < NbrOfData))
 8000a8e:	429f      	cmp	r7, r3
 8000a90:	d231      	bcs.n	8000af6 <AUDIO_Process.part.0+0x9a>
 8000a92:	1e7b      	subs	r3, r7, #1
 8000a94:	4d35      	ldr	r5, [pc, #212]	; (8000b6c <AUDIO_Process.part.0+0x110>)
  ReadDataNbr = 0;
 8000a96:	2200      	movs	r2, #0
 8000a98:	4423      	add	r3, r4
 8000a9a:	e002      	b.n	8000aa2 <AUDIO_Process.part.0+0x46>
  while(((offset + ReadDataNbr) < buffer_ctl.AudioFileSize) && (ReadDataNbr < NbrOfData))
 8000a9c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000aa0:	d009      	beq.n	8000ab6 <AUDIO_Process.part.0+0x5a>
  {
    pbuf[ReadDataNbr]= lptr [offset + ReadDataNbr];
 8000aa2:	f813 6f01 	ldrb.w	r6, [r3, #1]!
    ReadDataNbr++;
 8000aa6:	3201      	adds	r2, #1
    pbuf[ReadDataNbr]= lptr [offset + ReadDataNbr];
 8000aa8:	f805 6f01 	strb.w	r6, [r5, #1]!
  while(((offset + ReadDataNbr) < buffer_ctl.AudioFileSize) && (ReadDataNbr < NbrOfData))
 8000aac:	18bc      	adds	r4, r7, r2
 8000aae:	f8d1 6808 	ldr.w	r6, [r1, #2056]	; 0x808
 8000ab2:	42a6      	cmp	r6, r4
 8000ab4:	d8f2      	bhi.n	8000a9c <AUDIO_Process.part.0+0x40>
        buffer_ctl.fptr += bytesread;
 8000ab6:	f8d1 4800 	ldr.w	r4, [r1, #2048]	; 0x800
        buffer_ctl.state = BUFFER_OFFSET_NONE;
 8000aba:	2500      	movs	r5, #0
*/
__STATIC_INLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
    uint32_t op_addr = (uint32_t) addr;
 8000abc:	4b2c      	ldr	r3, [pc, #176]	; (8000b70 <AUDIO_Process.part.0+0x114>)
        buffer_ctl.fptr += bytesread;
 8000abe:	4422      	add	r2, r4
        buffer_ctl.state = BUFFER_OFFSET_NONE;
 8000ac0:	f881 5804 	strb.w	r5, [r1, #2052]	; 0x804
        buffer_ctl.fptr += bytesread;
 8000ac4:	f8c1 2800 	str.w	r2, [r1, #2048]	; 0x800
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ac8:	f3bf 8f4f 	dsb	sy
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */

    __DSB();

    while (op_size > 0) {
      SCB->DCCMVAC = op_addr;
 8000acc:	4929      	ldr	r1, [pc, #164]	; (8000b74 <AUDIO_Process.part.0+0x118>)
 8000ace:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 8000ad2:	f8c1 3268 	str.w	r3, [r1, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 8000ad6:	3320      	adds	r3, #32
    while (op_size > 0) {
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d1fa      	bne.n	8000ad2 <AUDIO_Process.part.0+0x76>
 8000adc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000ae0:	f3bf 8f6f 	isb	sy
}
 8000ae4:	bcf0      	pop	{r4, r5, r6, r7}
 8000ae6:	4770      	bx	lr
    if(buffer_ctl.state == BUFFER_OFFSET_HALF)
 8000ae8:	f891 3804 	ldrb.w	r3, [r1, #2052]	; 0x804
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d004      	beq.n	8000afa <AUDIO_Process.part.0+0x9e>
  AUDIO_ErrorTypeDef error_state = AUDIO_ERROR_NONE;
 8000af0:	2000      	movs	r0, #0
    if(buffer_ctl.state == BUFFER_OFFSET_FULL)
 8000af2:	2b02      	cmp	r3, #2
 8000af4:	d0c5      	beq.n	8000a82 <AUDIO_Process.part.0+0x26>
}
 8000af6:	bcf0      	pop	{r4, r5, r6, r7}
 8000af8:	4770      	bx	lr
      bytesread = GetData((void *)buffer_ctl.SrcAddress,
 8000afa:	f8d1 480c 	ldr.w	r4, [r1, #2060]	; 0x80c
  AUDIO_ErrorTypeDef error_state = AUDIO_ERROR_NONE;
 8000afe:	2000      	movs	r0, #0
 8000b00:	1e7a      	subs	r2, r7, #1
 8000b02:	4919      	ldr	r1, [pc, #100]	; (8000b68 <AUDIO_Process.part.0+0x10c>)
  ReadDataNbr = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	4422      	add	r2, r4
  AUDIO_ErrorTypeDef error_state = AUDIO_ERROR_NONE;
 8000b08:	460c      	mov	r4, r1
 8000b0a:	e002      	b.n	8000b12 <AUDIO_Process.part.0+0xb6>
  while(((offset + ReadDataNbr) < buffer_ctl.AudioFileSize) && (ReadDataNbr < NbrOfData))
 8000b0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b10:	d009      	beq.n	8000b26 <AUDIO_Process.part.0+0xca>
    pbuf[ReadDataNbr]= lptr [offset + ReadDataNbr];
 8000b12:	f812 6f01 	ldrb.w	r6, [r2, #1]!
    ReadDataNbr++;
 8000b16:	3301      	adds	r3, #1
    pbuf[ReadDataNbr]= lptr [offset + ReadDataNbr];
 8000b18:	f804 6b01 	strb.w	r6, [r4], #1
  while(((offset + ReadDataNbr) < buffer_ctl.AudioFileSize) && (ReadDataNbr < NbrOfData))
 8000b1c:	19dd      	adds	r5, r3, r7
 8000b1e:	f8d1 6808 	ldr.w	r6, [r1, #2056]	; 0x808
 8000b22:	42ae      	cmp	r6, r5
 8000b24:	d8f2      	bhi.n	8000b0c <AUDIO_Process.part.0+0xb0>
        buffer_ctl.fptr += bytesread;
 8000b26:	f8d1 2800 	ldr.w	r2, [r1, #2048]	; 0x800
        buffer_ctl.state = BUFFER_OFFSET_NONE;
 8000b2a:	2400      	movs	r4, #0
        buffer_ctl.fptr += bytesread;
 8000b2c:	4413      	add	r3, r2
        buffer_ctl.state = BUFFER_OFFSET_NONE;
 8000b2e:	f881 4804 	strb.w	r4, [r1, #2052]	; 0x804
        buffer_ctl.fptr += bytesread;
 8000b32:	f8c1 3800 	str.w	r3, [r1, #2048]	; 0x800
    uint32_t op_addr = (uint32_t) addr;
 8000b36:	490c      	ldr	r1, [pc, #48]	; (8000b68 <AUDIO_Process.part.0+0x10c>)
 8000b38:	460b      	mov	r3, r1
  __ASM volatile ("dsb 0xF":::"memory");
 8000b3a:	f3bf 8f4f 	dsb	sy
      SCB->DCCMVAC = op_addr;
 8000b3e:	4c0d      	ldr	r4, [pc, #52]	; (8000b74 <AUDIO_Process.part.0+0x118>)
 8000b40:	f501 6280 	add.w	r2, r1, #1024	; 0x400
 8000b44:	f8c4 3268 	str.w	r3, [r4, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 8000b48:	3320      	adds	r3, #32
    while (op_size > 0) {
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d1fa      	bne.n	8000b44 <AUDIO_Process.part.0+0xe8>
 8000b4e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000b52:	f3bf 8f6f 	isb	sy
 8000b56:	f891 3804 	ldrb.w	r3, [r1, #2052]	; 0x804
 8000b5a:	e7ca      	b.n	8000af2 <AUDIO_Process.part.0+0x96>
      bytesread = GetData((void *)buffer_ctl.SrcAddress,
 8000b5c:	f8d1 480c 	ldr.w	r4, [r1, #2060]	; 0x80c
      error_state = AUDIO_ERROR_EOF;
 8000b60:	2003      	movs	r0, #3
  while(((offset + ReadDataNbr) < buffer_ctl.AudioFileSize) && (ReadDataNbr < NbrOfData))
 8000b62:	2a00      	cmp	r2, #0
 8000b64:	d1cc      	bne.n	8000b00 <AUDIO_Process.part.0+0xa4>
 8000b66:	e7c6      	b.n	8000af6 <AUDIO_Process.part.0+0x9a>
 8000b68:	240077a0 	.word	0x240077a0
 8000b6c:	24007b9f 	.word	0x24007b9f
 8000b70:	24007ba0 	.word	0x24007ba0
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <AudioPlay_demo>:
	if(myTest == 1 || myTest == 3 || myTest == 5 )
 8000b78:	2805      	cmp	r0, #5
  buffer_ctl.state = BUFFER_OFFSET_NONE;
 8000b7a:	4a3a      	ldr	r2, [pc, #232]	; (8000c64 <AudioPlay_demo+0xec>)
{
 8000b7c:	b570      	push	{r4, r5, r6, lr}
	if(myTest == 1 || myTest == 3 || myTest == 5 )
 8000b7e:	d039      	beq.n	8000bf4 <AudioPlay_demo+0x7c>
 8000b80:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d035      	beq.n	8000bf4 <AudioPlay_demo+0x7c>
	else if(myTest == 0 || myTest == 2 || myTest == 4 )
 8000b88:	2804      	cmp	r0, #4
 8000b8a:	d004      	beq.n	8000b96 <AudioPlay_demo+0x1e>
 8000b8c:	fab3 f383 	clz	r3, r3
 8000b90:	095b      	lsrs	r3, r3, #5
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d04b      	beq.n	8000c2e <AudioPlay_demo+0xb6>
  buffer_ctl.SrcAddress = psrc_address;
 8000b96:	4834      	ldr	r0, [pc, #208]	; (8000c68 <AudioPlay_demo+0xf0>)
  buffer_ctl.state = BUFFER_OFFSET_NONE;
 8000b98:	2600      	movs	r6, #0
  buffer_ctl.AudioFileSize = file_size;
 8000b9a:	f44f 2390 	mov.w	r3, #294912	; 0x48000
 8000b9e:	4615      	mov	r5, r2
    pbuf[ReadDataNbr]= lptr [offset + ReadDataNbr];
 8000ba0:	4601      	mov	r1, r0
  buffer_ctl.SrcAddress = psrc_address;
 8000ba2:	f8c2 080c 	str.w	r0, [r2, #2060]	; 0x80c
  buffer_ctl.AudioFileSize = file_size;
 8000ba6:	f8c2 3808 	str.w	r3, [r2, #2056]	; 0x808
  ReadDataNbr = 0;
 8000baa:	4634      	mov	r4, r6
 8000bac:	4613      	mov	r3, r2
  buffer_ctl.state = BUFFER_OFFSET_NONE;
 8000bae:	f882 6804 	strb.w	r6, [r2, #2052]	; 0x804
  while(((offset + ReadDataNbr) < buffer_ctl.AudioFileSize) && (ReadDataNbr < NbrOfData))
 8000bb2:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8000bb6:	e001      	b.n	8000bbc <AudioPlay_demo+0x44>
 8000bb8:	4284      	cmp	r4, r0
 8000bba:	d807      	bhi.n	8000bcc <AudioPlay_demo+0x54>
    pbuf[ReadDataNbr]= lptr [offset + ReadDataNbr];
 8000bbc:	5c62      	ldrb	r2, [r4, r1]
    ReadDataNbr++;
 8000bbe:	3401      	adds	r4, #1
    pbuf[ReadDataNbr]= lptr [offset + ReadDataNbr];
 8000bc0:	f803 2b01 	strb.w	r2, [r3], #1
  while(((offset + ReadDataNbr) < buffer_ctl.AudioFileSize) && (ReadDataNbr < NbrOfData))
 8000bc4:	f8d5 2808 	ldr.w	r2, [r5, #2056]	; 0x808
 8000bc8:	4294      	cmp	r4, r2
 8000bca:	d3f5      	bcc.n	8000bb8 <AudioPlay_demo+0x40>
    BSP_AUDIO_OUT_Play(0,(uint8_t *)&buffer_ctl.buff[0], AUDIO_BUFFER_SIZE);
 8000bcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bd0:	4924      	ldr	r1, [pc, #144]	; (8000c64 <AudioPlay_demo+0xec>)
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	f00a fd1e 	bl	800b614 <BSP_AUDIO_OUT_Play>
    audio_state = AUDIO_STATE_PLAYING;
 8000bd8:	4b24      	ldr	r3, [pc, #144]	; (8000c6c <AudioPlay_demo+0xf4>)
 8000bda:	2202      	movs	r2, #2
    buffer_ctl.fptr = bytesread;
 8000bdc:	f8c5 4800 	str.w	r4, [r5, #2048]	; 0x800
    audio_state = AUDIO_STATE_PLAYING;
 8000be0:	701a      	strb	r2, [r3, #0]
 8000be2:	f7ff ff3b 	bl	8000a5c <AUDIO_Process.part.0>
  }while(flag !=3);
 8000be6:	2803      	cmp	r0, #3
 8000be8:	d1fb      	bne.n	8000be2 <AudioPlay_demo+0x6a>
  BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8000bea:	2001      	movs	r0, #1
}
 8000bec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8000bf0:	f00a bd4a 	b.w	800b688 <BSP_AUDIO_OUT_Stop>
  buffer_ctl.state = BUFFER_OFFSET_NONE;
 8000bf4:	2000      	movs	r0, #0
  buffer_ctl.AudioFileSize = file_size;
 8000bf6:	f44f 218c 	mov.w	r1, #286720	; 0x46000
  buffer_ctl.SrcAddress = psrc_address;
 8000bfa:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8000bfe:	4615      	mov	r5, r2
  buffer_ctl.AudioFileSize = file_size;
 8000c00:	f8c2 1808 	str.w	r1, [r2, #2056]	; 0x808
  ReadDataNbr = 0;
 8000c04:	4604      	mov	r4, r0
  buffer_ctl.SrcAddress = psrc_address;
 8000c06:	f8c2 380c 	str.w	r3, [r2, #2060]	; 0x80c
  while(((offset + ReadDataNbr) < buffer_ctl.AudioFileSize) && (ReadDataNbr < NbrOfData))
 8000c0a:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8000c0e:	4613      	mov	r3, r2
  buffer_ctl.state = BUFFER_OFFSET_NONE;
 8000c10:	f882 0804 	strb.w	r0, [r2, #2052]	; 0x804
    pbuf[ReadDataNbr]= lptr [offset + ReadDataNbr];
 8000c14:	f104 4210 	add.w	r2, r4, #2415919104	; 0x90000000
    ReadDataNbr++;
 8000c18:	3401      	adds	r4, #1
    pbuf[ReadDataNbr]= lptr [offset + ReadDataNbr];
 8000c1a:	7812      	ldrb	r2, [r2, #0]
 8000c1c:	f803 2b01 	strb.w	r2, [r3], #1
  while(((offset + ReadDataNbr) < buffer_ctl.AudioFileSize) && (ReadDataNbr < NbrOfData))
 8000c20:	f8d5 2808 	ldr.w	r2, [r5, #2056]	; 0x808
 8000c24:	4294      	cmp	r4, r2
 8000c26:	d2d1      	bcs.n	8000bcc <AudioPlay_demo+0x54>
 8000c28:	428c      	cmp	r4, r1
 8000c2a:	d9f3      	bls.n	8000c14 <AudioPlay_demo+0x9c>
 8000c2c:	e7ce      	b.n	8000bcc <AudioPlay_demo+0x54>
  buffer_ctl.SrcAddress = psrc_address;
 8000c2e:	4810      	ldr	r0, [pc, #64]	; (8000c70 <AudioPlay_demo+0xf8>)
  buffer_ctl.AudioFileSize = file_size;
 8000c30:	f44f 3654 	mov.w	r6, #217088	; 0x35000
  ReadDataNbr = 0;
 8000c34:	461c      	mov	r4, r3
  buffer_ctl.state = BUFFER_OFFSET_NONE;
 8000c36:	f882 3804 	strb.w	r3, [r2, #2052]	; 0x804
    pbuf[ReadDataNbr]= lptr [offset + ReadDataNbr];
 8000c3a:	4601      	mov	r1, r0
  buffer_ctl.SrcAddress = psrc_address;
 8000c3c:	f8c2 080c 	str.w	r0, [r2, #2060]	; 0x80c
 8000c40:	4615      	mov	r5, r2
  buffer_ctl.AudioFileSize = file_size;
 8000c42:	f8c2 6808 	str.w	r6, [r2, #2056]	; 0x808
 8000c46:	4613      	mov	r3, r2
  while(((offset + ReadDataNbr) < buffer_ctl.AudioFileSize) && (ReadDataNbr < NbrOfData))
 8000c48:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8000c4c:	e001      	b.n	8000c52 <AudioPlay_demo+0xda>
 8000c4e:	4284      	cmp	r4, r0
 8000c50:	d8bc      	bhi.n	8000bcc <AudioPlay_demo+0x54>
    pbuf[ReadDataNbr]= lptr [offset + ReadDataNbr];
 8000c52:	5c62      	ldrb	r2, [r4, r1]
    ReadDataNbr++;
 8000c54:	3401      	adds	r4, #1
    pbuf[ReadDataNbr]= lptr [offset + ReadDataNbr];
 8000c56:	f803 2b01 	strb.w	r2, [r3], #1
  while(((offset + ReadDataNbr) < buffer_ctl.AudioFileSize) && (ReadDataNbr < NbrOfData))
 8000c5a:	f8d5 2808 	ldr.w	r2, [r5, #2056]	; 0x808
 8000c5e:	4294      	cmp	r4, r2
 8000c60:	d3f5      	bcc.n	8000c4e <AudioPlay_demo+0xd6>
 8000c62:	e7b3      	b.n	8000bcc <AudioPlay_demo+0x54>
 8000c64:	240077a0 	.word	0x240077a0
 8000c68:	900a0000 	.word	0x900a0000
 8000c6c:	24007784 	.word	0x24007784
 8000c70:	90050000 	.word	0x90050000

08000c74 <BSP_AUDIO_OUT_TransferComplete_CallBack>:
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_TransferComplete_CallBack(uint32_t Instance)
{
    if(audio_state == AUDIO_STATE_PLAYING)
 8000c74:	4b03      	ldr	r3, [pc, #12]	; (8000c84 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x10>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b02      	cmp	r3, #2
 8000c7a:	d102      	bne.n	8000c82 <BSP_AUDIO_OUT_TransferComplete_CallBack+0xe>
  {
    /* allows AUDIO_Process() to refill 2nd part of the buffer  */
    buffer_ctl.state = BUFFER_OFFSET_FULL;
 8000c7c:	4a02      	ldr	r2, [pc, #8]	; (8000c88 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x14>)
 8000c7e:	f882 3804 	strb.w	r3, [r2, #2052]	; 0x804
  }

}
 8000c82:	4770      	bx	lr
 8000c84:	24007784 	.word	0x24007784
 8000c88:	240077a0 	.word	0x240077a0

08000c8c <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_HalfTransfer_CallBack(uint32_t Instance)
{
    if(audio_state == AUDIO_STATE_PLAYING)
 8000c8c:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x14>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b02      	cmp	r3, #2
 8000c92:	d103      	bne.n	8000c9c <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x10>
  {
    /* allows AUDIO_Process() to refill 1st part of the buffer  */
    buffer_ctl.state = BUFFER_OFFSET_HALF;
 8000c94:	4b03      	ldr	r3, [pc, #12]	; (8000ca4 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x18>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
  }

}
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	24007784 	.word	0x24007784
 8000ca4:	240077a0 	.word	0x240077a0

08000ca8 <BSP_AUDIO_OUT_Error_CallBack>:
  //UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_RED);
  //UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"       DMA  ERROR     ", CENTER_MODE);
  //UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);

  /* Stop the program with an infinite loop */
  while (BSP_PB_GetState(BUTTON_WAKEUP) != RESET)
 8000ca8:	2000      	movs	r0, #0
 8000caa:	f00a b863 	b.w	800ad74 <BSP_PB_GetState>
 8000cae:	bf00      	nop

08000cb0 <AI_Init>:
  input_data_ptr =ai_init((void*)(Ai_Context_Ptr->activation_buffer));
  
  if(input_data_ptr!= NULL)
    Ai_Context_Ptr->nn_input_buffer=input_data_ptr;
#else
  if (Ai_Context_Ptr->nn_input_buffer == NULL)
 8000cb0:	6843      	ldr	r3, [r0, #4]
 8000cb2:	b363      	cbz	r3, 8000d0e <AI_Init+0x5e>
{
 8000cb4:	b570      	push	{r4, r5, r6, lr}
 8000cb6:	4605      	mov	r5, r0
  {
    while(1);
  }
  
  /*Initialize the AI library*/
  ai_init((void*)(Ai_Context_Ptr->activation_buffer));
 8000cb8:	6880      	ldr	r0, [r0, #8]
 Ai_Context_Ptr->lut=pixel_conv_lut;
 8000cba:	4c5c      	ldr	r4, [pc, #368]	; (8000e2c <AI_Init+0x17c>)
{
 8000cbc:	ed2d 8b02 	vpush	{d8}
 8000cc0:	b082      	sub	sp, #8
  ai_init((void*)(Ai_Context_Ptr->activation_buffer));
 8000cc2:	f7ff fe59 	bl	8000978 <ai_init>
 Ai_Context_Ptr->nn_width=ai_get_input_width();
 8000cc6:	f7ff fd61 	bl	800078c <ai_get_input_width>
 8000cca:	6128      	str	r0, [r5, #16]
 Ai_Context_Ptr->nn_height=ai_get_input_height();
 8000ccc:	f7ff fd58 	bl	8000780 <ai_get_input_height>
 8000cd0:	6168      	str	r0, [r5, #20]
 Ai_Context_Ptr->nn_channels=ai_get_input_channels();
 8000cd2:	f7ff fd61 	bl	8000798 <ai_get_input_channels>
 Ai_Context_Ptr->lut=pixel_conv_lut;
 8000cd6:	60ec      	str	r4, [r5, #12]
 Ai_Context_Ptr->nn_channels=ai_get_input_channels();
 8000cd8:	61a8      	str	r0, [r5, #24]
  float prepro_scale = Ai_Context_Ptr->nn_input_norm_scale;
 8000cda:	ed95 8a07 	vldr	s16, [r5, #28]
  int32_t prepro_zp = Ai_Context_Ptr->nn_input_norm_zp;
 8000cde:	6a2d      	ldr	r5, [r5, #32]
  switch(ai_get_input_quantization_scheme())
 8000ce0:	f7ff fd80 	bl	80007e4 <ai_get_input_quantization_scheme>
 8000ce4:	2801      	cmp	r0, #1
 8000ce6:	d04d      	beq.n	8000d84 <AI_Init+0xd4>
 8000ce8:	f0c0 808e 	bcc.w	8000e08 <AI_Init+0x158>
 8000cec:	2802      	cmp	r0, #2
 8000cee:	d143      	bne.n	8000d78 <AI_Init+0xc8>
    Precompute_8IntS(lut, ai_get_input_scale(), ai_get_input_zero_point(), prepro_scale, prepro_zp);
 8000cf0:	f7ff fdce 	bl	8000890 <ai_get_input_scale>
 8000cf4:	eef0 8a40 	vmov.f32	s17, s0
 8000cf8:	f7ff fde2 	bl	80008c0 <ai_get_input_zero_point>
 8000cfc:	f504 7180 	add.w	r1, r4, #256	; 0x100
    *(lut + i) = _CLAMP(zp + _ROUND(tmp * scale, int32_t),  -128, 127, int8_t);
 8000d00:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8000d04:	b2c6      	uxtb	r6, r0
 8000d06:	ee28 8a28 	vmul.f32	s16, s16, s17
    Precompute_8IntS(lut, ai_get_input_scale(), ai_get_input_zero_point(), prepro_scale, prepro_zp);
 8000d0a:	4622      	mov	r2, r4
 8000d0c:	e017      	b.n	8000d3e <AI_Init+0x8e>
 8000d0e:	e7fe      	b.n	8000d0e <AI_Init+0x5e>
    *(lut + i) = _CLAMP(zp + _ROUND(tmp * scale, int32_t),  -128, 127, int8_t);
 8000d10:	337f      	adds	r3, #127	; 0x7f
 8000d12:	db35      	blt.n	8000d80 <AI_Init+0xd0>
 8000d14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d1c:	bf4c      	ite	mi
 8000d1e:	ee77 7ae6 	vsubmi.f32	s15, s15, s13
 8000d22:	ee77 7aa6 	vaddpl.f32	s15, s15, s13
 8000d26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d2a:	edcd 7a01 	vstr	s15, [sp, #4]
 8000d2e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000d32:	4433      	add	r3, r6
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	f802 3b01 	strb.w	r3, [r2], #1
  for (int32_t i = 0 ; i < 256 ; i++)
 8000d3a:	428a      	cmp	r2, r1
 8000d3c:	d01c      	beq.n	8000d78 <AI_Init+0xc8>
    float tmp = (i - zp_prepro) * scale_prepro;
 8000d3e:	1b53      	subs	r3, r2, r5
 8000d40:	1b1b      	subs	r3, r3, r4
 8000d42:	ee07 3a90 	vmov	s15, r3
 8000d46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    *(lut + i) = _CLAMP(zp + _ROUND(tmp * scale, int32_t),  -128, 127, int8_t);
 8000d4a:	ee67 7a88 	vmul.f32	s15, s15, s16
 8000d4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d56:	bf4c      	ite	mi
 8000d58:	ee37 7ae6 	vsubmi.f32	s14, s15, s13
 8000d5c:	ee37 7aa6 	vaddpl.f32	s14, s15, s13
 8000d60:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8000d64:	ee17 3a10 	vmov	r3, s14
 8000d68:	4403      	add	r3, r0
 8000d6a:	2b7e      	cmp	r3, #126	; 0x7e
 8000d6c:	ddd0      	ble.n	8000d10 <AI_Init+0x60>
 8000d6e:	237f      	movs	r3, #127	; 0x7f
 8000d70:	f802 3b01 	strb.w	r3, [r2], #1
  for (int32_t i = 0 ; i < 256 ; i++)
 8000d74:	428a      	cmp	r2, r1
 8000d76:	d1e2      	bne.n	8000d3e <AI_Init+0x8e>
#endif
  
  Ai_Context_Init(Ai_Context_Ptr);
  Compute_pix_conv_tab(Ai_Context_Ptr);
}
 8000d78:	b002      	add	sp, #8
 8000d7a:	ecbd 8b02 	vpop	{d8}
 8000d7e:	bd70      	pop	{r4, r5, r6, pc}
    *(lut + i) = _CLAMP(zp + _ROUND(tmp * scale, int32_t),  -128, 127, int8_t);
 8000d80:	2380      	movs	r3, #128	; 0x80
 8000d82:	e7d8      	b.n	8000d36 <AI_Init+0x86>
    Precompute_8IntU(lut, ai_get_input_scale(), ai_get_input_zero_point(), prepro_scale, prepro_zp);
 8000d84:	f7ff fd84 	bl	8000890 <ai_get_input_scale>
 8000d88:	eef0 8a40 	vmov.f32	s17, s0
 8000d8c:	f7ff fd98 	bl	80008c0 <ai_get_input_zero_point>
 8000d90:	f504 7180 	add.w	r1, r4, #256	; 0x100
    *(lut + i) = _CLAMP(zp + _ROUND(tmp * scale, int32_t), 0, 255, uint8_t);
 8000d94:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8000d98:	b2c6      	uxtb	r6, r0
 8000d9a:	ee28 8a28 	vmul.f32	s16, s16, s17
    Precompute_8IntU(lut, ai_get_input_scale(), ai_get_input_zero_point(), prepro_scale, prepro_zp);
 8000d9e:	4622      	mov	r2, r4
 8000da0:	e016      	b.n	8000dd0 <AI_Init+0x120>
    *(lut + i) = _CLAMP(zp + _ROUND(tmp * scale, int32_t), 0, 255, uint8_t);
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	dd2e      	ble.n	8000e04 <AI_Init+0x154>
 8000da6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dae:	bf4c      	ite	mi
 8000db0:	ee77 7ae6 	vsubmi.f32	s15, s15, s13
 8000db4:	ee77 7aa6 	vaddpl.f32	s15, s15, s13
 8000db8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dbc:	edcd 7a01 	vstr	s15, [sp, #4]
 8000dc0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000dc4:	4433      	add	r3, r6
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	f802 3b01 	strb.w	r3, [r2], #1
  for (int32_t i = 0 ; i < 256 ; i++)
 8000dcc:	428a      	cmp	r2, r1
 8000dce:	d0d3      	beq.n	8000d78 <AI_Init+0xc8>
    float tmp = (i - zp_prepro) * scale_prepro;
 8000dd0:	1b53      	subs	r3, r2, r5
 8000dd2:	1b1b      	subs	r3, r3, r4
 8000dd4:	ee07 3a90 	vmov	s15, r3
 8000dd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    *(lut + i) = _CLAMP(zp + _ROUND(tmp * scale, int32_t), 0, 255, uint8_t);
 8000ddc:	ee67 7a88 	vmul.f32	s15, s15, s16
 8000de0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000de8:	bf4c      	ite	mi
 8000dea:	ee37 7ae6 	vsubmi.f32	s14, s15, s13
 8000dee:	ee37 7aa6 	vaddpl.f32	s14, s15, s13
 8000df2:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8000df6:	ee17 3a10 	vmov	r3, s14
 8000dfa:	4403      	add	r3, r0
 8000dfc:	2bfe      	cmp	r3, #254	; 0xfe
 8000dfe:	ddd0      	ble.n	8000da2 <AI_Init+0xf2>
 8000e00:	23ff      	movs	r3, #255	; 0xff
 8000e02:	e7e1      	b.n	8000dc8 <AI_Init+0x118>
 8000e04:	2300      	movs	r3, #0
 8000e06:	e7df      	b.n	8000dc8 <AI_Init+0x118>
    Precompute_8FXP(lut, ai_get_input_quantized_format());
 8000e08:	f7ff fcdc 	bl	80007c4 <ai_get_input_quantized_format>
   *(lut+index)=__USAT((index + (1 << q_input_shift)) >> (1 + q_input_shift), 8);
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	4622      	mov	r2, r4
 8000e10:	f504 7480 	add.w	r4, r4, #256	; 0x100
 8000e14:	1845      	adds	r5, r0, r1
 8000e16:	4081      	lsls	r1, r0
 8000e18:	1a89      	subs	r1, r1, r2
 8000e1a:	188b      	adds	r3, r1, r2
 8000e1c:	40eb      	lsrs	r3, r5
 8000e1e:	f383 0308 	usat	r3, #8, r3
 8000e22:	f802 3b01 	strb.w	r3, [r2], #1
 for(index=0;index<256;index++)
 8000e26:	42a2      	cmp	r2, r4
 8000e28:	d1f7      	bne.n	8000e1a <AI_Init+0x16a>
 8000e2a:	e7a5      	b.n	8000d78 <AI_Init+0xc8>
 8000e2c:	240096b0 	.word	0x240096b0

08000e30 <AI_Run>:
* @param  Ai_Context_Ptr Pointer to the AI NN context
* @retval None
*/
void AI_Run(AiContext_TypeDef* Ai_Context_Ptr)
{
  ai_run((void*)Ai_Context_Ptr->nn_input_buffer, (void*)Ai_Context_Ptr->nn_output_buffer);
 8000e30:	e9d0 1000 	ldrd	r1, r0, [r0]
 8000e34:	f7ff bdfc 	b.w	8000a30 <ai_run>

08000e38 <AI_PixelValueConversion>:
* @param  Ai_Context_Ptr Pointer to the AI NN context
* @param  pSrc           Pointer to source buffer
* @retval None
*/
void AI_PixelValueConversion(AiContext_TypeDef* Ai_Context_Ptr, void *pSrc)
{
 8000e38:	b538      	push	{r3, r4, r5, lr}
 8000e3a:	4605      	mov	r5, r0
 8000e3c:	460c      	mov	r4, r1
  /**Check format of the input so to call the right fucntion for pixel format conversion**/
  if(ai_get_input_format() == AI_BUFFER_FMT_TYPE_Q)
 8000e3e:	f7ff fcb1 	bl	80007a4 <ai_get_input_format>
 8000e42:	2802      	cmp	r0, #2
 8000e44:	d026      	beq.n	8000e94 <AI_PixelValueConversion+0x5c>
  {
    AI_PixelValueConversion_QuantizedNN(Ai_Context_Ptr, (uint8_t *)pSrc);
  }
  else if(ai_get_input_format() == AI_BUFFER_FMT_TYPE_FLOAT)
 8000e46:	f7ff fcad 	bl	80007a4 <ai_get_input_format>
 8000e4a:	2801      	cmp	r0, #1
 8000e4c:	d000      	beq.n	8000e50 <AI_PixelValueConversion+0x18>
 8000e4e:	e7fe      	b.n	8000e4e <AI_PixelValueConversion+0x16>
  {
    if(Ai_Context_Ptr->nn_input_norm_scale == 255.0f)
 8000e50:	edd5 7a07 	vldr	s15, [r5, #28]
 8000e54:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8000f2c <AI_PixelValueConversion+0xf4>
 8000e58:	eef4 7a47 	vcmp.f32	s15, s14
 8000e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e60:	d13d      	bne.n	8000ede <AI_PixelValueConversion+0xa6>
 * @param  normalization_type  Asymmetric normalization (=0), i.e. in the range [0,+1] or Symmetric normalization (=1), i.e. in the range [-1,+1]
 * @retval None
 */
void AI_PixelValueConversion_FloatNN(AiContext_TypeDef* Ai_Context_Ptr, uint8_t *pSrc, uint32_t normalization_type)
{
  const uint32_t nb_pixels = Ai_Context_Ptr->nn_height * Ai_Context_Ptr->nn_width * Ai_Context_Ptr->nn_channels;
 8000e62:	69ab      	ldr	r3, [r5, #24]
 8000e64:	e9d5 2104 	ldrd	r2, r1, [r5, #16]
 8000e68:	fb02 f201 	mul.w	r2, r2, r1
  float *pDst = (float *) Ai_Context_Ptr->nn_input_buffer;
 8000e6c:	6869      	ldr	r1, [r5, #4]
  const uint32_t nb_pixels = Ai_Context_Ptr->nn_height * Ai_Context_Ptr->nn_width * Ai_Context_Ptr->nn_channels;
 8000e6e:	fb03 f302 	mul.w	r3, r3, r2
  else
  {
    while(1);
  }

  for (int32_t i = 0; i < nb_pixels; i++)
 8000e72:	b173      	cbz	r3, 8000e92 <AI_PixelValueConversion+0x5a>
 8000e74:	4423      	add	r3, r4
  {
    *pDst++ = (((float) *pSrc++) / div) - sub;
 8000e76:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8000f30 <AI_PixelValueConversion+0xf8>
 8000e7a:	f814 2b01 	ldrb.w	r2, [r4], #1
 8000e7e:	ee07 2a90 	vmov	s15, r2
  for (int32_t i = 0; i < nb_pixels; i++)
 8000e82:	429c      	cmp	r4, r3
    *pDst++ = (((float) *pSrc++) / div) - sub;
 8000e84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e8c:	ece1 7a01 	vstmia	r1!, {s15}
  for (int32_t i = 0; i < nb_pixels; i++)
 8000e90:	d1f3      	bne.n	8000e7a <AI_PixelValueConversion+0x42>
}
 8000e92:	bd38      	pop	{r3, r4, r5, pc}
  const uint32_t nb_pixels = Ai_Context_Ptr->nn_height * Ai_Context_Ptr->nn_width * Ai_Context_Ptr->nn_channels;
 8000e94:	e9d5 2104 	ldrd	r2, r1, [r5, #16]
 8000e98:	69ab      	ldr	r3, [r5, #24]
 8000e9a:	fb02 f101 	mul.w	r1, r2, r1
  uint8_t *pDst = (uint8_t *) Ai_Context_Ptr->nn_input_buffer;
 8000e9e:	686a      	ldr	r2, [r5, #4]
  const uint8_t *lut = Ai_Context_Ptr->lut;
 8000ea0:	68e8      	ldr	r0, [r5, #12]
  if (pDst > pSrc)
 8000ea2:	4294      	cmp	r4, r2
  const uint32_t nb_pixels = Ai_Context_Ptr->nn_height * Ai_Context_Ptr->nn_width * Ai_Context_Ptr->nn_channels;
 8000ea4:	fb03 f301 	mul.w	r3, r3, r1
  if (pDst > pSrc)
 8000ea8:	d20c      	bcs.n	8000ec4 <AI_PixelValueConversion+0x8c>
    for (int32_t i = nb_pixels - 1; i >= 0; i--)
 8000eaa:	1e59      	subs	r1, r3, #1
 8000eac:	d4f1      	bmi.n	8000e92 <AI_PixelValueConversion+0x5a>
 8000eae:	441c      	add	r4, r3
 8000eb0:	4413      	add	r3, r2
      pDst[i] = lut[pSrc[i]];
 8000eb2:	f814 2d01 	ldrb.w	r2, [r4, #-1]!
    for (int32_t i = nb_pixels - 1; i >= 0; i--)
 8000eb6:	3901      	subs	r1, #1
      pDst[i] = lut[pSrc[i]];
 8000eb8:	5c82      	ldrb	r2, [r0, r2]
 8000eba:	f803 2d01 	strb.w	r2, [r3, #-1]!
    for (int32_t i = nb_pixels - 1; i >= 0; i--)
 8000ebe:	1c4a      	adds	r2, r1, #1
 8000ec0:	d1f7      	bne.n	8000eb2 <AI_PixelValueConversion+0x7a>
}
 8000ec2:	bd38      	pop	{r3, r4, r5, pc}
    for (int32_t i = 0; i < nb_pixels; i++)
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d0e4      	beq.n	8000e92 <AI_PixelValueConversion+0x5a>
 8000ec8:	3c01      	subs	r4, #1
 8000eca:	3a01      	subs	r2, #1
 8000ecc:	4423      	add	r3, r4
      pDst[i] = lut[pSrc[i]];
 8000ece:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8000ed2:	5c41      	ldrb	r1, [r0, r1]
    for (int32_t i = 0; i < nb_pixels; i++)
 8000ed4:	42a3      	cmp	r3, r4
      pDst[i] = lut[pSrc[i]];
 8000ed6:	f802 1f01 	strb.w	r1, [r2, #1]!
    for (int32_t i = 0; i < nb_pixels; i++)
 8000eda:	d1f8      	bne.n	8000ece <AI_PixelValueConversion+0x96>
}
 8000edc:	bd38      	pop	{r3, r4, r5, pc}
    else if(Ai_Context_Ptr->nn_input_norm_scale == 127.0f)
 8000ede:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000f34 <AI_PixelValueConversion+0xfc>
 8000ee2:	eef4 7a47 	vcmp.f32	s15, s14
 8000ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eea:	d11d      	bne.n	8000f28 <AI_PixelValueConversion+0xf0>
  const uint32_t nb_pixels = Ai_Context_Ptr->nn_height * Ai_Context_Ptr->nn_width * Ai_Context_Ptr->nn_channels;
 8000eec:	69ab      	ldr	r3, [r5, #24]
 8000eee:	e9d5 2104 	ldrd	r2, r1, [r5, #16]
 8000ef2:	fb02 f201 	mul.w	r2, r2, r1
  float *pDst = (float *) Ai_Context_Ptr->nn_input_buffer;
 8000ef6:	6869      	ldr	r1, [r5, #4]
  const uint32_t nb_pixels = Ai_Context_Ptr->nn_height * Ai_Context_Ptr->nn_width * Ai_Context_Ptr->nn_channels;
 8000ef8:	fb03 f302 	mul.w	r3, r3, r2
  for (int32_t i = 0; i < nb_pixels; i++)
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d0c8      	beq.n	8000e92 <AI_PixelValueConversion+0x5a>
    *pDst++ = (((float) *pSrc++) / div) - sub;
 8000f00:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8000f04:	4423      	add	r3, r4
 8000f06:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000f38 <AI_PixelValueConversion+0x100>
 8000f0a:	f814 2b01 	ldrb.w	r2, [r4], #1
 8000f0e:	eeb0 6a66 	vmov.f32	s12, s13
 8000f12:	ee07 2a90 	vmov	s15, r2
  for (int32_t i = 0; i < nb_pixels; i++)
 8000f16:	429c      	cmp	r4, r3
    *pDst++ = (((float) *pSrc++) / div) - sub;
 8000f18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f1c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8000f20:	eca1 6a01 	vstmia	r1!, {s12}
  for (int32_t i = 0; i < nb_pixels; i++)
 8000f24:	d1f1      	bne.n	8000f0a <AI_PixelValueConversion+0xd2>
}
 8000f26:	bd38      	pop	{r3, r4, r5, pc}
 8000f28:	e7fe      	b.n	8000f28 <AI_PixelValueConversion+0xf0>
 8000f2a:	bf00      	nop
 8000f2c:	437f0000 	.word	0x437f0000
 8000f30:	3b808081 	.word	0x3b808081
 8000f34:	42fe0000 	.word	0x42fe0000
 8000f38:	3c008081 	.word	0x3c008081

08000f3c <AI_Output_Dequantize>:
* @brief  Performs the dequantization of a quantized NN output
* @param  Ai_Context_Ptr Pointer to the AI NN context
* @retval None
*/
void AI_Output_Dequantize(AiContext_TypeDef* Ai_Context_Ptr)
{
 8000f3c:	b538      	push	{r3, r4, r5, lr}
 8000f3e:	ed2d 8b02 	vpush	{d8}
 8000f42:	4604      	mov	r4, r0
  /**Check format of the output and convert to float if required**/
  if(ai_get_output_format() == AI_BUFFER_FMT_TYPE_Q)
 8000f44:	f7ff fc36 	bl	80007b4 <ai_get_output_format>
 8000f48:	2802      	cmp	r0, #2
 8000f4a:	d002      	beq.n	8000f52 <AI_Output_Dequantize+0x16>
      
    default:
      break;
    }  
  }
}
 8000f4c:	ecbd 8b02 	vpop	{d8}
 8000f50:	bd38      	pop	{r3, r4, r5, pc}
    switch(ai_get_output_quantization_scheme())
 8000f52:	f7ff fc69 	bl	8000828 <ai_get_output_quantization_scheme>
 8000f56:	2801      	cmp	r0, #1
 8000f58:	d04e      	beq.n	8000ff8 <AI_Output_Dequantize+0xbc>
 8000f5a:	d367      	bcc.n	800102c <AI_Output_Dequantize+0xf0>
 8000f5c:	2802      	cmp	r0, #2
 8000f5e:	d1f5      	bne.n	8000f4c <AI_Output_Dequantize+0x10>
      scale = ai_get_output_scale();
 8000f60:	f7ff fcd0 	bl	8000904 <ai_get_output_scale>
 8000f64:	eeb0 8a40 	vmov.f32	s16, s0
      zero_point = ai_get_output_zero_point();
 8000f68:	f7ff fce4 	bl	8000934 <ai_get_output_zero_point>
      nn_output_i8 = (ai_i8 *) Ai_Context_Ptr->nn_output_buffer;
 8000f6c:	6823      	ldr	r3, [r4, #0]
        int32_t q_value = (int32_t) *(nn_output_i8 + i);
 8000f6e:	f993 4005 	ldrsb.w	r4, [r3, #5]
 8000f72:	f993 1004 	ldrsb.w	r1, [r3, #4]
        *(nn_output_f32 + i) = scale * (q_value - zero_point);
 8000f76:	1a22      	subs	r2, r4, r0
        int32_t q_value = (int32_t) *(nn_output_i8 + i);
 8000f78:	f993 5003 	ldrsb.w	r5, [r3, #3]
 8000f7c:	f993 4002 	ldrsb.w	r4, [r3, #2]
        *(nn_output_f32 + i) = scale * (q_value - zero_point);
 8000f80:	ee05 2a10 	vmov	s10, r2
 8000f84:	1a0a      	subs	r2, r1, r0
        int32_t q_value = (int32_t) *(nn_output_i8 + i);
 8000f86:	f993 1001 	ldrsb.w	r1, [r3, #1]
        *(nn_output_f32 + i) = scale * (q_value - zero_point);
 8000f8a:	ee05 2a90 	vmov	s11, r2
 8000f8e:	1a2a      	subs	r2, r5, r0
 8000f90:	ee06 2a10 	vmov	s12, r2
 8000f94:	1a22      	subs	r2, r4, r0
 8000f96:	ee06 2a90 	vmov	s13, r2
        int32_t q_value = (int32_t) *(nn_output_i8 + i);
 8000f9a:	f993 2000 	ldrsb.w	r2, [r3]
        *(nn_output_f32 + i) = scale * (q_value - zero_point);
 8000f9e:	1a09      	subs	r1, r1, r0
 8000fa0:	1a12      	subs	r2, r2, r0
 8000fa2:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8000fa6:	ee07 1a10 	vmov	s14, r1
 8000faa:	ee07 2a90 	vmov	s15, r2
 8000fae:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8000fb2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8000fb6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8000fba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000fbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fc2:	ee25 5a08 	vmul.f32	s10, s10, s16
 8000fc6:	ee65 5a88 	vmul.f32	s11, s11, s16
 8000fca:	ee26 6a08 	vmul.f32	s12, s12, s16
 8000fce:	ee66 6a88 	vmul.f32	s13, s13, s16
 8000fd2:	ed83 5a05 	vstr	s10, [r3, #20]
 8000fd6:	ee27 7a08 	vmul.f32	s14, s14, s16
 8000fda:	edc3 5a04 	vstr	s11, [r3, #16]
 8000fde:	ee27 0a88 	vmul.f32	s0, s15, s16
 8000fe2:	ed83 6a03 	vstr	s12, [r3, #12]
 8000fe6:	edc3 6a02 	vstr	s13, [r3, #8]
 8000fea:	ed83 7a01 	vstr	s14, [r3, #4]
 8000fee:	ed83 0a00 	vstr	s0, [r3]
}
 8000ff2:	ecbd 8b02 	vpop	{d8}
 8000ff6:	bd38      	pop	{r3, r4, r5, pc}
      scale = ai_get_output_scale();
 8000ff8:	f7ff fc84 	bl	8000904 <ai_get_output_scale>
 8000ffc:	eeb0 8a40 	vmov.f32	s16, s0
      zero_point = ai_get_output_zero_point();
 8001000:	f7ff fc98 	bl	8000934 <ai_get_output_zero_point>
      nn_output_u8 = (ai_u8 *) Ai_Context_Ptr->nn_output_buffer;
 8001004:	6823      	ldr	r3, [r4, #0]
        int32_t q_value = (int32_t) *(nn_output_u8 + i);
 8001006:	795c      	ldrb	r4, [r3, #5]
 8001008:	7919      	ldrb	r1, [r3, #4]
        *(nn_output_f32 + i) = scale * (q_value - zero_point);
 800100a:	1a22      	subs	r2, r4, r0
        int32_t q_value = (int32_t) *(nn_output_u8 + i);
 800100c:	78dd      	ldrb	r5, [r3, #3]
 800100e:	789c      	ldrb	r4, [r3, #2]
        *(nn_output_f32 + i) = scale * (q_value - zero_point);
 8001010:	ee05 2a10 	vmov	s10, r2
 8001014:	1a0a      	subs	r2, r1, r0
        int32_t q_value = (int32_t) *(nn_output_u8 + i);
 8001016:	7859      	ldrb	r1, [r3, #1]
        *(nn_output_f32 + i) = scale * (q_value - zero_point);
 8001018:	ee05 2a90 	vmov	s11, r2
 800101c:	1a2a      	subs	r2, r5, r0
 800101e:	ee06 2a10 	vmov	s12, r2
 8001022:	1a22      	subs	r2, r4, r0
 8001024:	ee06 2a90 	vmov	s13, r2
        int32_t q_value = (int32_t) *(nn_output_u8 + i);
 8001028:	781a      	ldrb	r2, [r3, #0]
 800102a:	e7b8      	b.n	8000f9e <AI_Output_Dequantize+0x62>
      scale=ai_get_output_fxp_scale();
 800102c:	f7ff fc1e 	bl	800086c <ai_get_output_fxp_scale>
      nn_output_i8 = (ai_i8 *) Ai_Context_Ptr->nn_output_buffer;
 8001030:	6823      	ldr	r3, [r4, #0]
        float q_value = (float) *(nn_output_i8 + i);
 8001032:	f993 2005 	ldrsb.w	r2, [r3, #5]
 8001036:	ee05 2a10 	vmov	s10, r2
 800103a:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800103e:	ee05 2a90 	vmov	s11, r2
 8001042:	f993 2003 	ldrsb.w	r2, [r3, #3]
 8001046:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 800104a:	ee06 2a10 	vmov	s12, r2
 800104e:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8001052:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8001056:	ee06 2a90 	vmov	s13, r2
 800105a:	f993 2001 	ldrsb.w	r2, [r3, #1]
 800105e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8001062:	ee07 2a10 	vmov	s14, r2
 8001066:	f993 2000 	ldrsb.w	r2, [r3]
 800106a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800106e:	ee07 2a90 	vmov	s15, r2
 8001072:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
        *(nn_output_f32 + i) = scale * q_value;
 8001076:	ee25 5a00 	vmul.f32	s10, s10, s0
        float q_value = (float) *(nn_output_i8 + i);
 800107a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        *(nn_output_f32 + i) = scale * q_value;
 800107e:	ee65 5a80 	vmul.f32	s11, s11, s0
 8001082:	ee26 6a00 	vmul.f32	s12, s12, s0
 8001086:	ed83 5a05 	vstr	s10, [r3, #20]
 800108a:	ee66 6a80 	vmul.f32	s13, s13, s0
 800108e:	ee27 7a00 	vmul.f32	s14, s14, s0
 8001092:	edc3 5a04 	vstr	s11, [r3, #16]
 8001096:	ee27 0a80 	vmul.f32	s0, s15, s0
 800109a:	ed83 6a03 	vstr	s12, [r3, #12]
 800109e:	edc3 6a02 	vstr	s13, [r3, #8]
 80010a2:	ed83 7a01 	vstr	s14, [r3, #4]
 80010a6:	ed83 0a00 	vstr	s0, [r3]
 80010aa:	e74f      	b.n	8000f4c <AI_Output_Dequantize+0x10>

080010ac <AI_Deinit>:
/**
 * @brief De-initializes the generated C model for a neural network
 */
void AI_Deinit(void) 
{ 
  ai_deinit(); 
 80010ac:	f7ff bcba 	b.w	8000a24 <ai_deinit>

080010b0 <APP_Init>:
/**
 * @brief Initializes the application context structure
 * @param App_Context_Ptr pointer to application context
 */
void APP_Init(AppContext_TypeDef *App_Context_Ptr)
{  
 80010b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  App_Context_Ptr->Ai_ContextPtr=&Ai_Context;
 80010b2:	4a1b      	ldr	r2, [pc, #108]	; (8001120 <APP_Init+0x70>)
{  
 80010b4:	4604      	mov	r4, r0
  App_Context_Ptr->Preproc_ContextPtr=&Preproc_Context;
 80010b6:	491b      	ldr	r1, [pc, #108]	; (8001124 <APP_Init+0x74>)
  App_Context_Ptr->Operating_Mode=NOMINAL;
 80010b8:	2001      	movs	r0, #1
  App_Context_Ptr->Ai_ContextPtr=&Ai_Context;
 80010ba:	6422      	str	r2, [r4, #64]	; 0x40
  App_Context_Ptr->Camera_ContextPtr->mirror_flip=CAMERA_MIRRORFLIP_NONE;
 80010bc:	2700      	movs	r7, #0
  App_Context_Ptr->Preproc_ContextPtr=&Preproc_Context;
 80010be:	6321      	str	r1, [r4, #48]	; 0x30
  App_Context_Ptr->Test_ContextPtr=&TestContext;
 80010c0:	4b19      	ldr	r3, [pc, #100]	; (8001128 <APP_Init+0x78>)
  App_Context_Ptr->Camera_ContextPtr=&CameraContext;
 80010c2:	4a1a      	ldr	r2, [pc, #104]	; (800112c <APP_Init+0x7c>)
  App_Context_Ptr->Utils_ContextPtr=&UtilsContext;
 80010c4:	491a      	ldr	r1, [pc, #104]	; (8001130 <APP_Init+0x80>)
  strcpy(App_Context_Ptr->Test_ContextPtr->ValidationContext.class_path,"/onboard_valid_dataset_vga/");
 80010c6:	f503 7570 	add.w	r5, r3, #960	; 0x3c0
  App_Context_Ptr->Display_ContextPtr=&Display_Context;
 80010ca:	f8df c070 	ldr.w	ip, [pc, #112]	; 800113c <APP_Init+0x8c>
  strcpy(App_Context_Ptr->Test_ContextPtr->ValidationContext.class_path,"/onboard_valid_dataset_vga/");
 80010ce:	4e19      	ldr	r6, [pc, #100]	; (8001134 <APP_Init+0x84>)
  App_Context_Ptr->Display_ContextPtr=&Display_Context;
 80010d0:	f8c4 c034 	str.w	ip, [r4, #52]	; 0x34
  App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.format=PXFMT_RGB888;
 80010d4:	f04f 0c02 	mov.w	ip, #2
  App_Context_Ptr->Operating_Mode=NOMINAL;
 80010d8:	7020      	strb	r0, [r4, #0]
  App_Context_Ptr->run_loop=1;
 80010da:	6060      	str	r0, [r4, #4]
  App_Context_Ptr->Camera_ContextPtr=&CameraContext;
 80010dc:	62e2      	str	r2, [r4, #44]	; 0x2c
  App_Context_Ptr->Ai_ContextPtr->nn_output_buffer=nn_output_buff;
 80010de:	f8df e060 	ldr.w	lr, [pc, #96]	; 8001140 <APP_Init+0x90>
  App_Context_Ptr->Test_ContextPtr=&TestContext;
 80010e2:	e9c4 130e 	strd	r1, r3, [r4, #56]	; 0x38
  App_Context_Ptr->Camera_ContextPtr->mirror_flip=CAMERA_MIRRORFLIP_NONE;
 80010e6:	e9c2 4706 	strd	r4, r7, [r2, #24]
  App_Context_Ptr->Utils_ContextPtr->AppCtxPtr =App_Context_Ptr;
 80010ea:	638c      	str	r4, [r1, #56]	; 0x38
  App_Context_Ptr->Test_ContextPtr->AppCtxPtr =App_Context_Ptr;
 80010ec:	f8c3 463c 	str.w	r4, [r3, #1596]	; 0x63c
  strcpy(App_Context_Ptr->Test_ContextPtr->ValidationContext.class_path,"/onboard_valid_dataset_vga/");
 80010f0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80010f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010f4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80010f8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  App_Context_Ptr->Ai_ContextPtr->nn_input_norm_scale=255.0f;
 80010fc:	4a0e      	ldr	r2, [pc, #56]	; (8001138 <APP_Init+0x88>)
  App_Context_Init(App_Context_Ptr);
  Init_DataMemoryLayout(App_Context_Ptr);
 80010fe:	4620      	mov	r0, r4
  App_Context_Ptr->Ai_ContextPtr->AppCtxPtr =App_Context_Ptr;
 8001100:	6c23      	ldr	r3, [r4, #64]	; 0x40
  App_Context_Ptr->Display_ContextPtr->AppCtxPtr =App_Context_Ptr;
 8001102:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001104:	60cc      	str	r4, [r1, #12]
  App_Context_Ptr->Ai_ContextPtr->AppCtxPtr =App_Context_Ptr;
 8001106:	625c      	str	r4, [r3, #36]	; 0x24
  App_Context_Ptr->Ai_ContextPtr->nn_output_buffer=nn_output_buff;
 8001108:	f8c3 e000 	str.w	lr, [r3]
  App_Context_Ptr->Ai_ContextPtr->nn_input_norm_scale=255.0f;
 800110c:	61da      	str	r2, [r3, #28]
  App_Context_Ptr->Ai_ContextPtr->nn_input_norm_zp=0;
 800110e:	621f      	str	r7, [r3, #32]
  App_Context_Ptr->Preproc_ContextPtr->AppCtxPtr =App_Context_Ptr;
 8001110:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001112:	65dc      	str	r4, [r3, #92]	; 0x5c
  App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.format=PXFMT_RGB888;
 8001114:	f883 c038 	strb.w	ip, [r3, #56]	; 0x38
}
 8001118:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  Init_DataMemoryLayout(App_Context_Ptr);
 800111c:	f01a bf2a 	b.w	801bf74 <Init_DataMemoryLayout>
 8001120:	240097b0 	.word	0x240097b0
 8001124:	240098b8 	.word	0x240098b8
 8001128:	24009a00 	.word	0x24009a00
 800112c:	24009888 	.word	0x24009888
 8001130:	2400a040 	.word	0x2400a040
 8001134:	080289a4 	.word	0x080289a4
 8001138:	437f0000 	.word	0x437f0000
 800113c:	240098a8 	.word	0x240098a8
 8001140:	24007fb0 	.word	0x24007fb0

08001144 <APP_GetNextReadyFrame>:
  uint8_t* cam_capture_buff = App_Context_Ptr->Camera_ContextPtr->camera_capture_buffer;
#if MEMORY_SCHEME != FULL_INTERNAL_MEM_OPT
  uint8_t* cam_frame_buff = App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer;
#endif
  
  if((App_Context_Ptr->Operating_Mode == VALID) && (Validation_Ctx_Ptr->validation_completed ==0))
 8001144:	7803      	ldrb	r3, [r0, #0]
  uint8_t* cam_capture_buff = App_Context_Ptr->Camera_ContextPtr->camera_capture_buffer;
 8001146:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if((App_Context_Ptr->Operating_Mode == VALID) && (Validation_Ctx_Ptr->validation_completed ==0))
 8001148:	2b02      	cmp	r3, #2
{
 800114a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800114e:	4605      	mov	r5, r0
 8001150:	b089      	sub	sp, #36	; 0x24
  ValidationContext_TypeDef* Validation_Ctx_Ptr=&App_Context_Ptr->Test_ContextPtr->ValidationContext;
 8001152:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
  uint8_t* cam_frame_buff = App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer;
 8001154:	e9d2 6400 	ldrd	r6, r4, [r2]
  if((App_Context_Ptr->Operating_Mode == VALID) && (Validation_Ctx_Ptr->validation_completed ==0))
 8001158:	d07e      	beq.n	8001258 <APP_GetNextReadyFrame+0x114>
  {
    TEST_GetNextValidationInput(App_Context_Ptr->Test_ContextPtr, 
                                cam_capture_buff);    
  } 
  else if((App_Context_Ptr->Operating_Mode == DUMP) && 
 800115a:	2b03      	cmp	r3, #3
 800115c:	d064      	beq.n	8001228 <APP_GetNextReadyFrame+0xe4>
                          cam_capture_buff);
  }
  else
  {
    /* Wait for current camera acquisition to complete*/
    while(App_Context_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 800115e:	7d13      	ldrb	r3, [r2, #20]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d0fc      	beq.n	800115e <APP_GetNextReadyFrame+0x1a>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8001164:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001168:	f01c f9c6 	bl	801d4f8 <UTIL_LCD_Clear>
  if((App_Context_Ptr->Operating_Mode == DUMP)&& (App_Context_Ptr->Test_ContextPtr->DumpContext.Dump_FrameSource == SDCARD_FILE))
 800116c:	782b      	ldrb	r3, [r5, #0]
  if(App_Context_Ptr->Operating_Mode == VALID || ((App_Context_Ptr->Operating_Mode == DUMP)&& (App_Context_Ptr->Test_ContextPtr->DumpContext.Dump_FrameSource == SDCARD_FILE)))
 800116e:	2b02      	cmp	r3, #2
 8001170:	f000 8082 	beq.w	8001278 <APP_GetNextReadyFrame+0x134>
 8001174:	2b03      	cmp	r3, #3
 8001176:	f000 80d6 	beq.w	8001326 <APP_GetNextReadyFrame+0x1e2>
    DISPLAY_Copy2LCDWriteBuffer(App_Context_Ptr->Display_ContextPtr, (uint32_t *)(App_Context_Ptr->Camera_ContextPtr->camera_capture_buffer), 
 800117a:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800117c:	2202      	movs	r2, #2
 800117e:	2300      	movs	r3, #0
 8001180:	f44f 77f0 	mov.w	r7, #480	; 0x1e0
 8001184:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8001186:	6809      	ldr	r1, [r1, #0]
 8001188:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800118c:	e9cd 7700 	strd	r7, r7, [sp]
 8001190:	22a0      	movs	r2, #160	; 0xa0
 8001192:	f000 fdab 	bl	8001cec <DISPLAY_Copy2LCDWriteBuffer>
  
  /* DMA2D transfer from camera frame buffer to LCD write buffer */
  CameraCaptureBuff2LcdBuff_Copy(App_Context_Ptr);
  
#if MEMORY_SCHEME != FULL_INTERNAL_MEM_OPT  
  if(App_Context_Ptr->Operating_Mode != VALID)
 8001196:	782b      	ldrb	r3, [r5, #0]
 8001198:	2b02      	cmp	r3, #2
 800119a:	d005      	beq.n	80011a8 <APP_GetNextReadyFrame+0x64>
  {
    /****Coherency purpose: invalidate the camera_capture_buffer area in L1 D-Cache before CPU reading****/
    UTILS_DCache_Coherency_Maintenance((void*)cam_capture_buff, 
 800119c:	2201      	movs	r2, #1
 800119e:	f44f 21e1 	mov.w	r1, #460800	; 0x70800
 80011a2:	4630      	mov	r0, r6
 80011a4:	f003 fe86 	bl	8004eb4 <UTILS_DCache_Coherency_Maintenance>
 80011a8:	1d33      	adds	r3, r6, #4
 80011aa:	429c      	cmp	r4, r3
 80011ac:	d202      	bcs.n	80011b4 <APP_GetNextReadyFrame+0x70>
 80011ae:	1d23      	adds	r3, r4, #4
 80011b0:	429e      	cmp	r6, r3
 80011b2:	d340      	bcc.n	8001236 <APP_GetNextReadyFrame+0xf2>
 80011b4:	4272      	negs	r2, r6
 80011b6:	f012 0203 	ands.w	r2, r2, #3
 80011ba:	f000 80ba 	beq.w	8001332 <APP_GetNextReadyFrame+0x1ee>
  }
  
  /****Copy the camera_capture_buff buffer content onto the camera_frame_buff buffer so to release the camera capture buffer before triggering the subsequent camera frame capture****/
  for(uint32_t i=0;i<CAM_RES_WIDTH*CAM_RES_HEIGHT*RGB_565_BPP; i++)
  {
    *((uint8_t *)(cam_frame_buff + i)) = *((uint8_t *)(cam_capture_buff + i));
 80011be:	7833      	ldrb	r3, [r6, #0]
 80011c0:	2a01      	cmp	r2, #1
 80011c2:	7023      	strb	r3, [r4, #0]
 80011c4:	d044      	beq.n	8001250 <APP_GetNextReadyFrame+0x10c>
 80011c6:	7873      	ldrb	r3, [r6, #1]
 80011c8:	2a03      	cmp	r2, #3
 80011ca:	7063      	strb	r3, [r4, #1]
 80011cc:	f040 80b5 	bne.w	800133a <APP_GetNextReadyFrame+0x1f6>
 80011d0:	78b3      	ldrb	r3, [r6, #2]
  for(uint32_t i=0;i<CAM_RES_WIDTH*CAM_RES_HEIGHT*RGB_565_BPP; i++)
 80011d2:	4617      	mov	r7, r2
    *((uint8_t *)(cam_frame_buff + i)) = *((uint8_t *)(cam_capture_buff + i));
 80011d4:	f8df c174 	ldr.w	ip, [pc, #372]	; 800134c <APP_GetNextReadyFrame+0x208>
 80011d8:	70a3      	strb	r3, [r4, #2]
 80011da:	f5c2 2ee1 	rsb	lr, r2, #460800	; 0x70800
 80011de:	18b1      	adds	r1, r6, r2
  for(uint32_t i=0;i<CAM_RES_WIDTH*CAM_RES_HEIGHT*RGB_565_BPP; i++)
 80011e0:	2300      	movs	r3, #0
 80011e2:	4422      	add	r2, r4
 80011e4:	ea4f 059e 	mov.w	r5, lr, lsr #2
 80011e8:	3301      	adds	r3, #1
    *((uint8_t *)(cam_frame_buff + i)) = *((uint8_t *)(cam_capture_buff + i));
 80011ea:	f851 0b04 	ldr.w	r0, [r1], #4
 80011ee:	429d      	cmp	r5, r3
 80011f0:	f842 0b04 	str.w	r0, [r2], #4
 80011f4:	d8f8      	bhi.n	80011e8 <APP_GetNextReadyFrame+0xa4>
 80011f6:	f02e 0103 	bic.w	r1, lr, #3
 80011fa:	458e      	cmp	lr, r1
 80011fc:	eb07 0301 	add.w	r3, r7, r1
 8001200:	ebac 0201 	sub.w	r2, ip, r1
 8001204:	d00d      	beq.n	8001222 <APP_GetNextReadyFrame+0xde>
 8001206:	5cf0      	ldrb	r0, [r6, r3]
  for(uint32_t i=0;i<CAM_RES_WIDTH*CAM_RES_HEIGHT*RGB_565_BPP; i++)
 8001208:	2a01      	cmp	r2, #1
 800120a:	f103 0101 	add.w	r1, r3, #1
    *((uint8_t *)(cam_frame_buff + i)) = *((uint8_t *)(cam_capture_buff + i));
 800120e:	54e0      	strb	r0, [r4, r3]
  for(uint32_t i=0;i<CAM_RES_WIDTH*CAM_RES_HEIGHT*RGB_565_BPP; i++)
 8001210:	d007      	beq.n	8001222 <APP_GetNextReadyFrame+0xde>
    *((uint8_t *)(cam_frame_buff + i)) = *((uint8_t *)(cam_capture_buff + i));
 8001212:	5c70      	ldrb	r0, [r6, r1]
  for(uint32_t i=0;i<CAM_RES_WIDTH*CAM_RES_HEIGHT*RGB_565_BPP; i++)
 8001214:	2a02      	cmp	r2, #2
 8001216:	f103 0302 	add.w	r3, r3, #2
    *((uint8_t *)(cam_frame_buff + i)) = *((uint8_t *)(cam_capture_buff + i));
 800121a:	5460      	strb	r0, [r4, r1]
  for(uint32_t i=0;i<CAM_RES_WIDTH*CAM_RES_HEIGHT*RGB_565_BPP; i++)
 800121c:	d001      	beq.n	8001222 <APP_GetNextReadyFrame+0xde>
    *((uint8_t *)(cam_frame_buff + i)) = *((uint8_t *)(cam_capture_buff + i));
 800121e:	5cf2      	ldrb	r2, [r6, r3]
 8001220:	54e2      	strb	r2, [r4, r3]
  }
#endif
}
 8001222:	b009      	add	sp, #36	; 0x24
 8001224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if((App_Context_Ptr->Operating_Mode == DUMP) && 
 8001228:	7903      	ldrb	r3, [r0, #4]
 800122a:	2b03      	cmp	r3, #3
 800122c:	d197      	bne.n	800115e <APP_GetNextReadyFrame+0x1a>
    TEST_GetNextDumpInput(App_Context_Ptr->Test_ContextPtr, 
 800122e:	4631      	mov	r1, r6
 8001230:	f002 f8b0 	bl	8003394 <TEST_GetNextDumpInput>
 8001234:	e796      	b.n	8001164 <APP_GetNextReadyFrame+0x20>
 8001236:	4943      	ldr	r1, [pc, #268]	; (8001344 <APP_GetNextReadyFrame+0x200>)
 8001238:	3c01      	subs	r4, #1
 800123a:	1e73      	subs	r3, r6, #1
 800123c:	4431      	add	r1, r6
    *((uint8_t *)(cam_frame_buff + i)) = *((uint8_t *)(cam_capture_buff + i));
 800123e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  for(uint32_t i=0;i<CAM_RES_WIDTH*CAM_RES_HEIGHT*RGB_565_BPP; i++)
 8001242:	428b      	cmp	r3, r1
    *((uint8_t *)(cam_frame_buff + i)) = *((uint8_t *)(cam_capture_buff + i));
 8001244:	f804 2f01 	strb.w	r2, [r4, #1]!
  for(uint32_t i=0;i<CAM_RES_WIDTH*CAM_RES_HEIGHT*RGB_565_BPP; i++)
 8001248:	d1f9      	bne.n	800123e <APP_GetNextReadyFrame+0xfa>
}
 800124a:	b009      	add	sp, #36	; 0x24
 800124c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    *((uint8_t *)(cam_frame_buff + i)) = *((uint8_t *)(cam_capture_buff + i));
 8001250:	f8df c0f0 	ldr.w	ip, [pc, #240]	; 8001344 <APP_GetNextReadyFrame+0x200>
  for(uint32_t i=0;i<CAM_RES_WIDTH*CAM_RES_HEIGHT*RGB_565_BPP; i++)
 8001254:	4617      	mov	r7, r2
 8001256:	e7c0      	b.n	80011da <APP_GetNextReadyFrame+0x96>
  if((App_Context_Ptr->Operating_Mode == VALID) && (Validation_Ctx_Ptr->validation_completed ==0))
 8001258:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 800125c:	2b00      	cmp	r3, #0
 800125e:	f47f af7e 	bne.w	800115e <APP_GetNextReadyFrame+0x1a>
    TEST_GetNextValidationInput(App_Context_Ptr->Test_ContextPtr, 
 8001262:	4631      	mov	r1, r6
 8001264:	f002 f8d0 	bl	8003408 <TEST_GetNextValidationInput>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8001268:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800126c:	f01c f944 	bl	801d4f8 <UTIL_LCD_Clear>
  if((App_Context_Ptr->Operating_Mode == DUMP)&& (App_Context_Ptr->Test_ContextPtr->DumpContext.Dump_FrameSource == SDCARD_FILE))
 8001270:	782b      	ldrb	r3, [r5, #0]
  if(App_Context_Ptr->Operating_Mode == VALID || ((App_Context_Ptr->Operating_Mode == DUMP)&& (App_Context_Ptr->Test_ContextPtr->DumpContext.Dump_FrameSource == SDCARD_FILE)))
 8001272:	2b02      	cmp	r3, #2
 8001274:	f47f af7e 	bne.w	8001174 <APP_GetNextReadyFrame+0x30>
    UTILS_DCache_Coherency_Maintenance((void *)App_Context_Ptr->Camera_ContextPtr->camera_capture_buffer,
 8001278:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800127a:	2202      	movs	r2, #2
 800127c:	f44f 21e1 	mov.w	r1, #460800	; 0x70800
 8001280:	6818      	ldr	r0, [r3, #0]
 8001282:	f003 fe17 	bl	8004eb4 <UTILS_DCache_Coherency_Maintenance>
  if(App_Context_Ptr->Operating_Mode == VALID)
 8001286:	f895 a000 	ldrb.w	sl, [r5]
 800128a:	f1ba 0f02 	cmp.w	sl, #2
 800128e:	f47f af74 	bne.w	800117a <APP_GetNextReadyFrame+0x36>
      UTILS_Dma2d_Memcpy((uint32_t *)(App_Context_Ptr->Camera_ContextPtr->camera_capture_buffer), 
 8001292:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001294:	f44f 79f0 	mov.w	r9, #480	; 0x1e0
 8001298:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8001350 <APP_GetNextReadyFrame+0x20c>
 800129c:	f04f 0b01 	mov.w	fp, #1
 80012a0:	6818      	ldr	r0, [r3, #0]
 80012a2:	2300      	movs	r3, #0
 80012a4:	4641      	mov	r1, r8
 80012a6:	f8cd a00c 	str.w	sl, [sp, #12]
 80012aa:	9306      	str	r3, [sp, #24]
 80012ac:	461a      	mov	r2, r3
 80012ae:	f8cd 9000 	str.w	r9, [sp]
      App_Context_Ptr->Preproc_ContextPtr->Roi.x0=0;
 80012b2:	2700      	movs	r7, #0
      UTILS_Dma2d_Memcpy((uint32_t *)(App_Context_Ptr->Camera_ContextPtr->camera_capture_buffer), 
 80012b4:	e9cd bb04 	strd	fp, fp, [sp, #16]
 80012b8:	e9cd 9901 	strd	r9, r9, [sp, #4]
 80012bc:	f003 fd40 	bl	8004d40 <UTILS_Dma2d_Memcpy>
      UTILS_DCache_Coherency_Maintenance((void *)valid_image_buff, CAM_RES_WIDTH*CAM_RES_HEIGHT*RGB_888_BPP, INVALIDATE);
 80012c0:	465a      	mov	r2, fp
 80012c2:	4640      	mov	r0, r8
 80012c4:	4920      	ldr	r1, [pc, #128]	; (8001348 <APP_GetNextReadyFrame+0x204>)
 80012c6:	f003 fdf5 	bl	8004eb4 <UTILS_DCache_Coherency_Maintenance>
      App_Context_Ptr->Preproc_ContextPtr->Resize_Src_Img.pData=valid_image_buff;
 80012ca:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      App_Context_Ptr->Preproc_ContextPtr->Roi.y0=0;
 80012cc:	e9c3 7703 	strd	r7, r7, [r3, #12]
      App_Context_Ptr->Preproc_ContextPtr->Roi.height=0;
 80012d0:	e9c3 7705 	strd	r7, r7, [r3, #20]
      App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.width=224;
 80012d4:	27e0      	movs	r7, #224	; 0xe0
      App_Context_Ptr->Preproc_ContextPtr->Resize_Src_Img.pData=valid_image_buff;
 80012d6:	f8c3 8044 	str.w	r8, [r3, #68]	; 0x44
      ImageResize_NearestNeighbor(&App_Context_Ptr->Preproc_ContextPtr->Resize_Src_Img, 
 80012da:	f103 020c 	add.w	r2, r3, #12
      App_Context_Ptr->Preproc_ContextPtr->Resize_Src_Img.width=CAM_RES_WIDTH;
 80012de:	f8c3 903c 	str.w	r9, [r3, #60]	; 0x3c
      ImageResize_NearestNeighbor(&App_Context_Ptr->Preproc_ContextPtr->Resize_Src_Img, 
 80012e2:	f103 014c 	add.w	r1, r3, #76	; 0x4c
      App_Context_Ptr->Preproc_ContextPtr->Resize_Src_Img.height=CAM_RES_HEIGHT;
 80012e6:	f8c3 9040 	str.w	r9, [r3, #64]	; 0x40
      ImageResize_NearestNeighbor(&App_Context_Ptr->Preproc_ContextPtr->Resize_Src_Img, 
 80012ea:	f103 003c 	add.w	r0, r3, #60	; 0x3c
      App_Context_Ptr->Preproc_ContextPtr->Resize_Src_Img.format=PXFMT_RGB888;
 80012ee:	f883 a048 	strb.w	sl, [r3, #72]	; 0x48
      App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.pData=valid_image_buff;
 80012f2:	f8c3 8054 	str.w	r8, [r3, #84]	; 0x54
      App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.format=PXFMT_RGB888;
 80012f6:	f883 a058 	strb.w	sl, [r3, #88]	; 0x58
      App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.height=224;
 80012fa:	e9c3 7713 	strd	r7, r7, [r3, #76]	; 0x4c
      ImageResize_NearestNeighbor(&App_Context_Ptr->Preproc_ContextPtr->Resize_Src_Img, 
 80012fe:	f01c f897 	bl	801d430 <ImageResize_NearestNeighbor>
      UTILS_DCache_Coherency_Maintenance((void *)valid_image_buff, CAM_RES_WIDTH*CAM_RES_HEIGHT*RGB_888_BPP, CLEAN);
 8001302:	4652      	mov	r2, sl
 8001304:	4640      	mov	r0, r8
 8001306:	4910      	ldr	r1, [pc, #64]	; (8001348 <APP_GetNextReadyFrame+0x204>)
 8001308:	f003 fdd4 	bl	8004eb4 <UTILS_DCache_Coherency_Maintenance>
      DISPLAY_Copy2LCDWriteBuffer(App_Context_Ptr->Display_ContextPtr, (uint32_t *)(valid_image_buff), 50,
 800130c:	2300      	movs	r3, #0
 800130e:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8001310:	4641      	mov	r1, r8
 8001312:	9303      	str	r3, [sp, #12]
 8001314:	2232      	movs	r2, #50	; 0x32
 8001316:	f8cd b008 	str.w	fp, [sp, #8]
 800131a:	2382      	movs	r3, #130	; 0x82
 800131c:	9701      	str	r7, [sp, #4]
 800131e:	9700      	str	r7, [sp, #0]
 8001320:	f000 fce4 	bl	8001cec <DISPLAY_Copy2LCDWriteBuffer>
 8001324:	e737      	b.n	8001196 <APP_GetNextReadyFrame+0x52>
  if(App_Context_Ptr->Operating_Mode == VALID || ((App_Context_Ptr->Operating_Mode == DUMP)&& (App_Context_Ptr->Test_ContextPtr->DumpContext.Dump_FrameSource == SDCARD_FILE)))
 8001326:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8001328:	791b      	ldrb	r3, [r3, #4]
 800132a:	2b03      	cmp	r3, #3
 800132c:	f47f af25 	bne.w	800117a <APP_GetNextReadyFrame+0x36>
 8001330:	e7a2      	b.n	8001278 <APP_GetNextReadyFrame+0x134>
  for(uint32_t i=0;i<CAM_RES_WIDTH*CAM_RES_HEIGHT*RGB_565_BPP; i++)
 8001332:	f44f 2ce1 	mov.w	ip, #460800	; 0x70800
 8001336:	4617      	mov	r7, r2
 8001338:	e74f      	b.n	80011da <APP_GetNextReadyFrame+0x96>
    *((uint8_t *)(cam_frame_buff + i)) = *((uint8_t *)(cam_capture_buff + i));
 800133a:	f8df c018 	ldr.w	ip, [pc, #24]	; 8001354 <APP_GetNextReadyFrame+0x210>
  for(uint32_t i=0;i<CAM_RES_WIDTH*CAM_RES_HEIGHT*RGB_565_BPP; i++)
 800133e:	2702      	movs	r7, #2
 8001340:	e74b      	b.n	80011da <APP_GetNextReadyFrame+0x96>
 8001342:	bf00      	nop
 8001344:	000707ff 	.word	0x000707ff
 8001348:	000a8c00 	.word	0x000a8c00
 800134c:	000707fd 	.word	0x000707fd
 8001350:	d0aa15e0 	.word	0xd0aa15e0
 8001354:	000707fe 	.word	0x000707fe

08001358 <APP_StartNewFrameAcquisition>:
 * @brief Start the camera acquisition of the subsequent frame
 * @param App_Context_Ptr pointer to application context
 */
void APP_StartNewFrameAcquisition(AppContext_TypeDef *App_Context_Ptr)
{
  if(App_Context_Ptr->Operating_Mode == NOMINAL || 
 8001358:	7803      	ldrb	r3, [r0, #0]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d008      	beq.n	8001370 <APP_StartNewFrameAcquisition+0x18>
 800135e:	2b04      	cmp	r3, #4
 8001360:	d006      	beq.n	8001370 <APP_StartNewFrameAcquisition+0x18>
     App_Context_Ptr->Operating_Mode == CAPTURE || 
 8001362:	2b03      	cmp	r3, #3
 8001364:	d000      	beq.n	8001368 <APP_StartNewFrameAcquisition+0x10>
 8001366:	4770      	bx	lr
       ((App_Context_Ptr->Operating_Mode == DUMP)&& (App_Context_Ptr->Test_ContextPtr->DumpContext.Dump_FrameSource != SDCARD_FILE)))
 8001368:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800136a:	791b      	ldrb	r3, [r3, #4]
 800136c:	2b03      	cmp	r3, #3
 800136e:	d0fa      	beq.n	8001366 <APP_StartNewFrameAcquisition+0xe>
  {
 //   __disable_irq();
    App_Context_Ptr->Camera_ContextPtr->vsync_it=0;
 8001370:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
 8001372:	b570      	push	{r4, r5, r6, lr}
    App_Context_Ptr->Camera_ContextPtr->vsync_it=0;
 8001374:	2500      	movs	r5, #0
 8001376:	4604      	mov	r4, r0
    
    App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1=HAL_GetTick();
 8001378:	6b86      	ldr	r6, [r0, #56]	; 0x38
    App_Context_Ptr->Camera_ContextPtr->vsync_it=0;
 800137a:	609d      	str	r5, [r3, #8]
    App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1=HAL_GetTick();
 800137c:	f00c faf0 	bl	800d960 <HAL_GetTick>
    
    App_Context_Ptr->Camera_ContextPtr->new_frame_ready = 0;
 8001380:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1=HAL_GetTick();
 8001382:	61b0      	str	r0, [r6, #24]
    
    /***Resume the camera capture in NOMINAL mode****/
    BSP_CAMERA_Resume(0);
 8001384:	4628      	mov	r0, r5
    App_Context_Ptr->Camera_ContextPtr->new_frame_ready = 0;
 8001386:	751d      	strb	r5, [r3, #20]
  //  __enable_irq();
  }
}
 8001388:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    BSP_CAMERA_Resume(0);
 800138c:	f00b b8ea 	b.w	800c564 <BSP_CAMERA_Resume>

08001390 <APP_FramePreprocess>:
 * @param App_Context_Ptr pointer to application context
 */
void APP_FramePreprocess(AppContext_TypeDef *App_Context_Ptr)
{
  /*Call a fct in charge of executing the sequence of preprocessing steps*/
  Run_Preprocessing(App_Context_Ptr);
 8001390:	f01a be08 	b.w	801bfa4 <Run_Preprocessing>

08001394 <APP_NetworkInference>:
/**
 * @brief Run neural network inference on preprocessed captured frame
 * @param App_Context_Ptr pointer to application context
 */
void APP_NetworkInference(AppContext_TypeDef *App_Context_Ptr)
{
 8001394:	b538      	push	{r3, r4, r5, lr}
  uint32_t tinf_start;
  uint32_t tinf_stop;
  TestRunContext_TypeDef* TestRunCtxt_Ptr=&App_Context_Ptr->Test_ContextPtr->TestRunContext;
 8001396:	e9d0 530f 	ldrd	r5, r3, [r0, #60]	; 0x3c
  
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Ai_ContextPtr->nn_input_buffer);
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[3];
 800139a:	4a16      	ldr	r2, [pc, #88]	; (80013f4 <APP_NetworkInference+0x60>)
{
 800139c:	4604      	mov	r4, r0
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Ai_ContextPtr->nn_input_buffer);
 800139e:	685b      	ldr	r3, [r3, #4]
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[3];
 80013a0:	f8c5 260c 	str.w	r2, [r5, #1548]	; 0x60c
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Ai_ContextPtr->nn_input_buffer);
 80013a4:	f8c5 3608 	str.w	r3, [r5, #1544]	; 0x608
  TestRunCtxt_Ptr->src_width_size=ai_get_input_width();
 80013a8:	f7ff f9f0 	bl	800078c <ai_get_input_width>
 80013ac:	f8c5 0610 	str.w	r0, [r5, #1552]	; 0x610
  TestRunCtxt_Ptr->src_height_size=ai_get_input_height();
 80013b0:	f7ff f9e6 	bl	8000780 <ai_get_input_height>
  TestRunCtxt_Ptr->src_size=AI_NET_INPUT_SIZE;
  TestRunCtxt_Ptr->PerformCapture=1;
 80013b4:	2301      	movs	r3, #1
  TestRunCtxt_Ptr->DumpFormat=BMP888;
 80013b6:	2202      	movs	r2, #2
  TestRunCtxt_Ptr->src_size=AI_NET_INPUT_SIZE;
 80013b8:	f44f 3113 	mov.w	r1, #150528	; 0x24c00
  TestRunCtxt_Ptr->PerformCapture=1;
 80013bc:	f8c5 361c 	str.w	r3, [r5, #1564]	; 0x61c
  TestRunCtxt_Ptr->rb_swap=1;
 80013c0:	f8c5 3624 	str.w	r3, [r5, #1572]	; 0x624
  TestRunCtxt_Ptr->DumpFormat=BMP888;
 80013c4:	f885 2620 	strb.w	r2, [r5, #1568]	; 0x620
  TestRunCtxt_Ptr->src_height_size=ai_get_input_height();
 80013c8:	f8c5 0614 	str.w	r0, [r5, #1556]	; 0x614
  TestRunCtxt_Ptr->src_size=AI_NET_INPUT_SIZE;
 80013cc:	f8c5 1618 	str.w	r1, [r5, #1560]	; 0x618
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 80013d0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80013d2:	7821      	ldrb	r1, [r4, #0]
 80013d4:	f002 fc60 	bl	8003c98 <TEST_Run>
 
  tinf_start=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 80013d8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80013da:	f003 fcaf 	bl	8004d3c <UTILS_GetTimeStamp>
 80013de:	4605      	mov	r5, r0
  
  /***********************************/
  /*********Run NN inference**********/
  /***********************************/
  AI_Run(App_Context_Ptr->Ai_ContextPtr);
 80013e0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80013e2:	f7ff fd25 	bl	8000e30 <AI_Run>
  
  tinf_stop=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 80013e6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80013e8:	f003 fca8 	bl	8004d3c <UTILS_GetTimeStamp>

  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE]=tinf_stop-tinf_start;
 80013ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80013ee:	1b40      	subs	r0, r0, r5
 80013f0:	6118      	str	r0, [r3, #16]
}
 80013f2:	bd38      	pop	{r3, r4, r5, pc}
 80013f4:	24000088 	.word	0x24000088

080013f8 <APP_Postprocess>:
/**
 * @brief Run post-processing operation
 * @param App_Context_Ptr pointer to application context
 */
void APP_Postprocess(AppContext_TypeDef *App_Context_Ptr)
{
 80013f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TestRunContext_TypeDef* TestRunCtxt_Ptr=&App_Context_Ptr->Test_ContextPtr->TestRunContext;

  /*** At that point, it is recommended to wait until current camera acquisition is completed before proceeding  
  *** before proceeding in order to avoid bottleneck at FMC slave (btw LTDC/DMA2D and DMA).
  ***/
  while(App_Context_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 80013fc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
{
 80013fe:	4604      	mov	r4, r0
  TestRunContext_TypeDef* TestRunCtxt_Ptr=&App_Context_Ptr->Test_ContextPtr->TestRunContext;
 8001400:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
{
 8001402:	ed2d 8b02 	vpush	{d8}
 8001406:	b094      	sub	sp, #80	; 0x50
  while(App_Context_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 8001408:	7d13      	ldrb	r3, [r2, #20]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d0fc      	beq.n	8001408 <APP_Postprocess+0x10>
  
  UTILS_Compute_ExecutionTiming(App_Context_Ptr->Utils_ContextPtr);
 800140e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  /**NN ouput dequantization if required**/
  AI_Output_Dequantize(App_Context_Ptr->Ai_ContextPtr);

  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer);
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[4];
  TestRunCtxt_Ptr->src_width_size=0;
 8001410:	2600      	movs	r6, #0
  UTILS_Compute_ExecutionTiming(App_Context_Ptr->Utils_ContextPtr);
 8001412:	f003 fda7 	bl	8004f64 <UTILS_Compute_ExecutionTiming>
  AI_Output_Dequantize(App_Context_Ptr->Ai_ContextPtr);
 8001416:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001418:	f7ff fd90 	bl	8000f3c <AI_Output_Dequantize>
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer);
 800141c:	6c23      	ldr	r3, [r4, #64]	; 0x40
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[4];
 800141e:	4aa7      	ldr	r2, [pc, #668]	; (80016bc <APP_Postprocess+0x2c4>)
  TestRunCtxt_Ptr->src_height_size=0;
  TestRunCtxt_Ptr->src_size=/*AI_NETWORK_OUT_1_SIZE*/AI_NETWORK_OUT_1_SIZE_BYTES;//so to make it compatible w/ case where dump is in SDRAM
 8001420:	2706      	movs	r7, #6
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer);
 8001422:	681b      	ldr	r3, [r3, #0]
  TestRunCtxt_Ptr->PerformCapture=0;
  TestRunCtxt_Ptr->DumpFormat=TXT;
 8001424:	f04f 0805 	mov.w	r8, #5
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[4];
 8001428:	f8c5 260c 	str.w	r2, [r5, #1548]	; 0x60c
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer);
 800142c:	f8c5 3608 	str.w	r3, [r5, #1544]	; 0x608
  TestRunCtxt_Ptr->src_width_size=0;
 8001430:	f8c5 6610 	str.w	r6, [r5, #1552]	; 0x610
  TestRunCtxt_Ptr->src_height_size=0;
 8001434:	f8c5 6614 	str.w	r6, [r5, #1556]	; 0x614
  TestRunCtxt_Ptr->PerformCapture=0;
 8001438:	f8c5 661c 	str.w	r6, [r5, #1564]	; 0x61c
  TestRunCtxt_Ptr->rb_swap=0;
 800143c:	f8c5 6624 	str.w	r6, [r5, #1572]	; 0x624
  TestRunCtxt_Ptr->src_size=/*AI_NETWORK_OUT_1_SIZE*/AI_NETWORK_OUT_1_SIZE_BYTES;//so to make it compatible w/ case where dump is in SDRAM
 8001440:	f8c5 7618 	str.w	r7, [r5, #1560]	; 0x618
  TestRunCtxt_Ptr->DumpFormat=TXT;
 8001444:	f885 8620 	strb.w	r8, [r5, #1568]	; 0x620
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);

  /**Perform ranking**/
  for (int i = 0; i < NN_OUTPUT_CLASS_NUMBER; i++)
  {
    App_Context_Ptr->ranking[i] = i;
 8001448:	2503      	movs	r5, #3
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 800144a:	7821      	ldrb	r1, [r4, #0]
 800144c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800144e:	f002 fc23 	bl	8003c98 <TEST_Run>
    App_Context_Ptr->ranking[i] = i;
 8001452:	2302      	movs	r3, #2
 8001454:	2101      	movs	r1, #1
 8001456:	6166      	str	r6, [r4, #20]
 8001458:	2004      	movs	r0, #4
  }
  
  UTILS_Bubblesort((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer), App_Context_Ptr->ranking, NN_OUTPUT_CLASS_NUMBER);
 800145a:	6c26      	ldr	r6, [r4, #64]	; 0x40
 800145c:	463a      	mov	r2, r7
    App_Context_Ptr->ranking[i] = i;
 800145e:	61a1      	str	r1, [r4, #24]
 8001460:	6260      	str	r0, [r4, #36]	; 0x24
  UTILS_Bubblesort((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer), App_Context_Ptr->ranking, NN_OUTPUT_CLASS_NUMBER);
 8001462:	f104 0114 	add.w	r1, r4, #20
    App_Context_Ptr->ranking[i] = i;
 8001466:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
  UTILS_Bubblesort((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer), App_Context_Ptr->ranking, NN_OUTPUT_CLASS_NUMBER);
 800146a:	6830      	ldr	r0, [r6, #0]
    App_Context_Ptr->ranking[i] = i;
 800146c:	e9c4 3507 	strd	r3, r5, [r4, #28]
  UTILS_Bubblesort((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer), App_Context_Ptr->ranking, NN_OUTPUT_CLASS_NUMBER);
 8001470:	f003 fd52 	bl	8004f18 <UTILS_Bubblesort>
  
  App_Context_Ptr->nn_top1_output_class_name=NN_OUTPUT_CLASS_LIST[App_Context_Ptr->ranking[0]];
  App_Context_Ptr->nn_top1_output_class_proba=*((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+0);
 8001474:	6c23      	ldr	r3, [r4, #64]	; 0x40
  App_Context_Ptr->nn_top1_output_class_name=NN_OUTPUT_CLASS_LIST[App_Context_Ptr->ranking[0]];
 8001476:	4d92      	ldr	r5, [pc, #584]	; (80016c0 <APP_Postprocess+0x2c8>)
  App_Context_Ptr->nn_top1_output_class_proba=*((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+0);
 8001478:	681a      	ldr	r2, [r3, #0]
  App_Context_Ptr->nn_top1_output_class_name=NN_OUTPUT_CLASS_LIST[App_Context_Ptr->ranking[0]];
 800147a:	6963      	ldr	r3, [r4, #20]
  App_Context_Ptr->nn_top1_output_class_proba=*((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+0);
 800147c:	6811      	ldr	r1, [r2, #0]
  App_Context_Ptr->nn_top1_output_class_name=NN_OUTPUT_CLASS_LIST[App_Context_Ptr->ranking[0]];
 800147e:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
  
  if(App_Context_Ptr->Operating_Mode == NOMINAL)
 8001482:	7823      	ldrb	r3, [r4, #0]
  App_Context_Ptr->nn_top1_output_class_proba=*((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+0);
 8001484:	6121      	str	r1, [r4, #16]
  if(App_Context_Ptr->Operating_Mode == NOMINAL)
 8001486:	2b01      	cmp	r3, #1
  App_Context_Ptr->nn_top1_output_class_name=NN_OUTPUT_CLASS_LIST[App_Context_Ptr->ranking[0]];
 8001488:	60e2      	str	r2, [r4, #12]
  if(App_Context_Ptr->Operating_Mode == NOMINAL)
 800148a:	d007      	beq.n	800149c <APP_Postprocess+0xa4>
    //AudioPlay_demo();

  }
  else 
  {
    TEST_PostProcess(App_Context_Ptr->Test_ContextPtr);
 800148c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800148e:	f002 ff37 	bl	8004300 <TEST_PostProcess>
  }
}
 8001492:	b014      	add	sp, #80	; 0x50
 8001494:	ecbd 8b02 	vpop	{d8}
 8001498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  occurrence_number--;
 800149c:	4a89      	ldr	r2, [pc, #548]	; (80016c4 <APP_Postprocess+0x2cc>)
 800149e:	6810      	ldr	r0, [r2, #0]
  if (occurrence_number == 0)
 80014a0:	3801      	subs	r0, #1
 80014a2:	d005      	beq.n	80014b0 <APP_Postprocess+0xb8>
  occurrence_number--;
 80014a4:	6010      	str	r0, [r2, #0]
}
 80014a6:	b014      	add	sp, #80	; 0x50
 80014a8:	ecbd 8b02 	vpop	{d8}
 80014ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    occurrence_number = NN_OUTPUT_DISPLAY_REFRESH_RATE;
 80014b0:	6013      	str	r3, [r2, #0]
    if (BSP_PB_GetState(BUTTON_WAKEUP) != RESET)
 80014b2:	f009 fc5f 	bl	800ad74 <BSP_PB_GetState>
      display_mode = !display_mode;
 80014b6:	f8df 822c 	ldr.w	r8, [pc, #556]	; 80016e4 <APP_Postprocess+0x2ec>
    if (BSP_PB_GetState(BUTTON_WAKEUP) != RESET)
 80014ba:	2800      	cmp	r0, #0
 80014bc:	d17b      	bne.n	80015b6 <APP_Postprocess+0x1be>
 80014be:	ae02      	add	r6, sp, #8
    if (display_mode == 0)
 80014c0:	f8d8 7000 	ldr.w	r7, [r8]
 80014c4:	2f00      	cmp	r7, #0
 80014c6:	f000 80c9 	beq.w	800165c <APP_Postprocess+0x264>
    else  if (display_mode == 1)
 80014ca:	2f01      	cmp	r7, #1
 80014cc:	f000 80d2 	beq.w	8001674 <APP_Postprocess+0x27c>
      sprintf(msg, "%s %.0f%%", NN_OUTPUT_CLASS_LIST[App_Context_Ptr->ranking[i]], *((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+i) * 100);
 80014d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014d2:	4630      	mov	r0, r6
 80014d4:	ed9f 8a7c 	vldr	s16, [pc, #496]	; 80016c8 <APP_Postprocess+0x2d0>
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	6963      	ldr	r3, [r4, #20]
 80014dc:	ed92 7a00 	vldr	s14, [r2]
 80014e0:	497a      	ldr	r1, [pc, #488]	; (80016cc <APP_Postprocess+0x2d4>)
 80014e2:	ee27 7a08 	vmul.f32	s14, s14, s16
 80014e6:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 80014ea:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80014ee:	ed8d 7b00 	vstr	d7, [sp]
 80014f2:	f025 fb4d 	bl	8026b90 <siprintf>
      UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_TOP_N_LAST_LINE - NN_TOP_N_DISPLAY + i), (uint8_t *)msg, CENTER_MODE);
 80014f6:	f01b fff7 	bl	801d4e8 <UTIL_LCD_GetFont>
 80014fa:	88c1      	ldrh	r1, [r0, #6]
 80014fc:	2301      	movs	r3, #1
 80014fe:	4632      	mov	r2, r6
 8001500:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 8001504:	2000      	movs	r0, #0
 8001506:	eb01 0145 	add.w	r1, r1, r5, lsl #1
 800150a:	f01c f8bb 	bl	801d684 <UTIL_LCD_DisplayStringAt>
    sprintf(msg, "Inference: %ldms", App_Context_Ptr->nn_inference_time);
 800150e:	68a2      	ldr	r2, [r4, #8]
 8001510:	496f      	ldr	r1, [pc, #444]	; (80016d0 <APP_Postprocess+0x2d8>)
 8001512:	4630      	mov	r0, r6
      myTest = App_Context_Ptr->ranking[i];
 8001514:	6965      	ldr	r5, [r4, #20]
    sprintf(msg, "Inference: %ldms", App_Context_Ptr->nn_inference_time);
 8001516:	f025 fb3b 	bl	8026b90 <siprintf>
    UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_INFER_TIME_LINE), (uint8_t *)msg, CENTER_MODE);
 800151a:	f01b ffe5 	bl	801d4e8 <UTIL_LCD_GetFont>
 800151e:	88c1      	ldrh	r1, [r0, #6]
 8001520:	2301      	movs	r3, #1
 8001522:	4632      	mov	r2, r6
 8001524:	0109      	lsls	r1, r1, #4
 8001526:	2000      	movs	r0, #0
 8001528:	f01c f8ac 	bl	801d684 <UTIL_LCD_DisplayStringAt>
    sprintf(msg, "Fps: %.1f", 1000.0F / (float)(App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.Tfps));
 800152c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800152e:	eddf 6a69 	vldr	s13, [pc, #420]	; 80016d4 <APP_Postprocess+0x2dc>
 8001532:	4630      	mov	r0, r6
 8001534:	ed93 7a05 	vldr	s14, [r3, #20]
 8001538:	4967      	ldr	r1, [pc, #412]	; (80016d8 <APP_Postprocess+0x2e0>)
 800153a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800153e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001542:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001546:	ec53 2b17 	vmov	r2, r3, d7
 800154a:	f025 fb21 	bl	8026b90 <siprintf>
    UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_FPS_LINE), (uint8_t *)msg, CENTER_MODE);
 800154e:	f01b ffcb 	bl	801d4e8 <UTIL_LCD_GetFont>
 8001552:	88c1      	ldrh	r1, [r0, #6]
 8001554:	2301      	movs	r3, #1
 8001556:	4632      	mov	r2, r6
 8001558:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800155c:	2000      	movs	r0, #0
 800155e:	4099      	lsls	r1, r3
 8001560:	f01c f890 	bl	801d684 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Context_Ptr->Display_ContextPtr);
 8001564:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001566:	f000 fb9f 	bl	8001ca8 <DISPLAY_Refresh>
    BSP_LED_Off(LED_GREEN);
 800156a:	2000      	movs	r0, #0
 800156c:	f009 fb98 	bl	800aca0 <BSP_LED_Off>
    BSP_LED_Off(LED_ORANGE);
 8001570:	2001      	movs	r0, #1
 8001572:	f009 fb95 	bl	800aca0 <BSP_LED_Off>
    BSP_LED_Off(LED_RED);
 8001576:	2002      	movs	r0, #2
 8001578:	f009 fb92 	bl	800aca0 <BSP_LED_Off>
    if ((*((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+0) * 100) < NN_BAD_RES)
 800157c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800157e:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80016dc <APP_Postprocess+0x2e4>
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	edd3 7a00 	vldr	s15, [r3]
 8001588:	ee67 7a88 	vmul.f32	s15, s15, s16
 800158c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001594:	d45b      	bmi.n	800164e <APP_Postprocess+0x256>
    else if (((*((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+0) * 100) >= NN_BAD_RES) && ((*((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+0) * 100) < NN_GOOD_RES))
 8001596:	ed9f 7a52 	vldr	s14, [pc, #328]	; 80016e0 <APP_Postprocess+0x2e8>
      myTest = App_Context_Ptr->ranking[i];
 800159a:	b2ed      	uxtb	r5, r5
    else if (((*((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+0) * 100) >= NN_BAD_RES) && ((*((float*)(App_Context_Ptr->Ai_ContextPtr->nn_output_buffer)+0) * 100) < NN_GOOD_RES))
 800159c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      BSP_LED_On(LED_ORANGE);
 80015a4:	bf4c      	ite	mi
 80015a6:	2001      	movmi	r0, #1
      BSP_LED_On(LED_GREEN);
 80015a8:	2000      	movpl	r0, #0
 80015aa:	f009 fb69 	bl	800ac80 <BSP_LED_On>
    	  AudioPlay_demo(myTest);
 80015ae:	4628      	mov	r0, r5
 80015b0:	f7ff fae2 	bl	8000b78 <AudioPlay_demo>
 80015b4:	e76d      	b.n	8001492 <APP_Postprocess+0x9a>
      display_mode = !display_mode;
 80015b6:	f8d8 3000 	ldr.w	r3, [r8]
      UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 80015ba:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
        sprintf(msg, "Entering CAMERA PREVIEW mode");
 80015be:	ae02      	add	r6, sp, #8
      display_mode = !display_mode;
 80015c0:	fab3 f383 	clz	r3, r3
 80015c4:	095b      	lsrs	r3, r3, #5
 80015c6:	f8c8 3000 	str.w	r3, [r8]
      UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 80015ca:	f01b ff95 	bl	801d4f8 <UTIL_LCD_Clear>
      if (display_mode == 1)
 80015ce:	f8d8 3000 	ldr.w	r3, [r8]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d066      	beq.n	80016a4 <APP_Postprocess+0x2ac>
      else  if (display_mode == 0)
 80015d6:	b94b      	cbnz	r3, 80015ec <APP_Postprocess+0x1f4>
        sprintf(msg, "Exiting CAMERA PREVIEW mode");
 80015d8:	f8df c10c 	ldr.w	ip, [pc, #268]	; 80016e8 <APP_Postprocess+0x2f0>
 80015dc:	4637      	mov	r7, r6
 80015de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80015e2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80015e4:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80015e8:	e887 0007 	stmia.w	r7, {r0, r1, r2}
      UTIL_LCD_DisplayStringAt(0, LINE(9), (uint8_t*)msg, CENTER_MODE);
 80015ec:	f01b ff7c 	bl	801d4e8 <UTIL_LCD_GetFont>
 80015f0:	88c1      	ldrh	r1, [r0, #6]
 80015f2:	2301      	movs	r3, #1
 80015f4:	4632      	mov	r2, r6
 80015f6:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80015fa:	2000      	movs	r0, #0
 80015fc:	f01c f842 	bl	801d684 <UTIL_LCD_DisplayStringAt>
      sprintf(msg, "Please release button");
 8001600:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 80016ec <APP_Postprocess+0x2f4>
 8001604:	4637      	mov	r7, r6
 8001606:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800160a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800160c:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8001610:	f847 0b04 	str.w	r0, [r7], #4
 8001614:	8039      	strh	r1, [r7, #0]
      UTIL_LCD_DisplayStringAt(0, LINE(11), (uint8_t*)msg, CENTER_MODE);
 8001616:	f01b ff67 	bl	801d4e8 <UTIL_LCD_GetFont>
 800161a:	88c1      	ldrh	r1, [r0, #6]
 800161c:	2301      	movs	r3, #1
 800161e:	2000      	movs	r0, #0
 8001620:	eb01 0781 	add.w	r7, r1, r1, lsl #2
 8001624:	4632      	mov	r2, r6
 8001626:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 800162a:	f01c f82b 	bl	801d684 <UTIL_LCD_DisplayStringAt>
      DISPLAY_Refresh(App_Context_Ptr->Display_ContextPtr);
 800162e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001630:	f000 fb3a 	bl	8001ca8 <DISPLAY_Refresh>
      while (BSP_PB_GetState(BUTTON_WAKEUP) != RESET);
 8001634:	2000      	movs	r0, #0
 8001636:	f009 fb9d 	bl	800ad74 <BSP_PB_GetState>
 800163a:	2800      	cmp	r0, #0
 800163c:	d1fa      	bne.n	8001634 <APP_Postprocess+0x23c>
      HAL_Delay(200);
 800163e:	20c8      	movs	r0, #200	; 0xc8
 8001640:	f00c f994 	bl	800d96c <HAL_Delay>
      UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8001644:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001648:	f01b ff56 	bl	801d4f8 <UTIL_LCD_Clear>
 800164c:	e738      	b.n	80014c0 <APP_Postprocess+0xc8>
      BSP_LED_On(LED_RED);
 800164e:	2002      	movs	r0, #2
 8001650:	f009 fb16 	bl	800ac80 <BSP_LED_On>
      AudioPlay_demo(myTest);
 8001654:	2006      	movs	r0, #6
 8001656:	f7ff fa8f 	bl	8000b78 <AudioPlay_demo>
 800165a:	e71a      	b.n	8001492 <APP_Postprocess+0x9a>
      UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);/*To clear the camera capture*/
 800165c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001660:	f01b ff4a 	bl	801d4f8 <UTIL_LCD_Clear>
      DISPLAY_FoodLogo(App_Context_Ptr->Display_ContextPtr, LCD_RES_WIDTH / 2 - 64, LCD_RES_HEIGHT / 2 -100, App_Context_Ptr->ranking[0]);
 8001664:	6963      	ldr	r3, [r4, #20]
 8001666:	228c      	movs	r2, #140	; 0x8c
 8001668:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800166c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800166e:	f000 fafd 	bl	8001c6c <DISPLAY_FoodLogo>
 8001672:	e72d      	b.n	80014d0 <APP_Postprocess+0xd8>
      sprintf(msg, "CAMERA PREVIEW MODE");
 8001674:	f8df e078 	ldr.w	lr, [pc, #120]	; 80016f0 <APP_Postprocess+0x2f8>
 8001678:	46b4      	mov	ip, r6
 800167a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800167e:	f8de e000 	ldr.w	lr, [lr]
 8001682:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001686:	f8cc e000 	str.w	lr, [ip]
      UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_ACQU_MODE_LINE), (uint8_t*)msg, CENTER_MODE);
 800168a:	f01b ff2d 	bl	801d4e8 <UTIL_LCD_GetFont>
 800168e:	88c1      	ldrh	r1, [r0, #6]
 8001690:	463b      	mov	r3, r7
 8001692:	4632      	mov	r2, r6
 8001694:	eb01 07c1 	add.w	r7, r1, r1, lsl #3
 8001698:	2000      	movs	r0, #0
 800169a:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 800169e:	f01b fff1 	bl	801d684 <UTIL_LCD_DisplayStringAt>
 80016a2:	e715      	b.n	80014d0 <APP_Postprocess+0xd8>
        sprintf(msg, "Entering CAMERA PREVIEW mode");
 80016a4:	f8df c04c 	ldr.w	ip, [pc, #76]	; 80016f4 <APP_Postprocess+0x2fc>
 80016a8:	4637      	mov	r7, r6
 80016aa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80016ae:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80016b0:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80016b4:	c707      	stmia	r7!, {r0, r1, r2}
 80016b6:	703b      	strb	r3, [r7, #0]
 80016b8:	e798      	b.n	80015ec <APP_Postprocess+0x1f4>
 80016ba:	bf00      	nop
 80016bc:	240000a8 	.word	0x240000a8
 80016c0:	24000008 	.word	0x24000008
 80016c4:	24000004 	.word	0x24000004
 80016c8:	42c80000 	.word	0x42c80000
 80016cc:	08028a28 	.word	0x08028a28
 80016d0:	08028a34 	.word	0x08028a34
 80016d4:	447a0000 	.word	0x447a0000
 80016d8:	08028a48 	.word	0x08028a48
 80016dc:	425c0000 	.word	0x425c0000
 80016e0:	428c0000 	.word	0x428c0000
 80016e4:	24000000 	.word	0x24000000
 80016e8:	080289e0 	.word	0x080289e0
 80016ec:	080289fc 	.word	0x080289fc
 80016f0:	08028a14 	.word	0x08028a14
 80016f4:	080289c0 	.word	0x080289c0

080016f8 <DCMI_MDMAError>:
  * @retval None
  */
static void DCMI_MDMAError(MDMA_HandleTypeDef *hmdma)
{
  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 80016f8:	6802      	ldr	r2, [r0, #0]
 80016fa:	68d3      	ldr	r3, [r2, #12]
 80016fc:	f023 0301 	bic.w	r3, r3, #1
 8001700:	60d3      	str	r3, [r2, #12]

  Error_Handler();
 8001702:	f003 bc43 	b.w	8004f8c <Error_Handler>
 8001706:	bf00      	nop

08001708 <DCMI_DMAError>:
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001708:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 800170a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800170c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800170e:	2a02      	cmp	r2, #2
 8001710:	d006      	beq.n	8001720 <DCMI_DMAError+0x18>
    hdcmi->State = HAL_DCMI_STATE_READY;
 8001712:	2201      	movs	r2, #1
 8001714:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8001718:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800171a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800171e:	64da      	str	r2, [r3, #76]	; 0x4c
  Error_Handler();
 8001720:	f003 bc34 	b.w	8004f8c <Error_Handler>

08001724 <DCMI_DMALineXferCplt>:
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001724:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (HAL_MDMA_Start_IT(&hmdma, (uint32_t) pCameraLineBuffer, (uint32_t) pDst, line_size, 1) != HAL_OK)
 8001726:	490b      	ldr	r1, [pc, #44]	; (8001754 <DCMI_DMALineXferCplt+0x30>)
  uint32_t line_size =  hdcmi->XferSize * 4U;
 8001728:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  uint8_t *pDst = (uint8_t *) hdcmi->pBuffPtr + line_size * hdcmi->XferCount;
 800172a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t line_size =  hdcmi->XferSize * 4U;
 800172c:	009b      	lsls	r3, r3, #2
  uint8_t *pDst = (uint8_t *) hdcmi->pBuffPtr + line_size * hdcmi->XferCount;
 800172e:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8001730:	b510      	push	{r4, lr}
  if (HAL_MDMA_Start_IT(&hmdma, (uint32_t) pCameraLineBuffer, (uint32_t) pDst, line_size, 1) != HAL_OK)
 8001732:	2401      	movs	r4, #1
{
 8001734:	b082      	sub	sp, #8
  if (HAL_MDMA_Start_IT(&hmdma, (uint32_t) pCameraLineBuffer, (uint32_t) pDst, line_size, 1) != HAL_OK)
 8001736:	fb03 2200 	mla	r2, r3, r0, r2
 800173a:	4807      	ldr	r0, [pc, #28]	; (8001758 <DCMI_DMALineXferCplt+0x34>)
 800173c:	9400      	str	r4, [sp, #0]
 800173e:	f00f fea9 	bl	8011494 <HAL_MDMA_Start_IT>
 8001742:	b908      	cbnz	r0, 8001748 <DCMI_DMALineXferCplt+0x24>
}
 8001744:	b002      	add	sp, #8
 8001746:	bd10      	pop	{r4, pc}
 8001748:	b002      	add	sp, #8
 800174a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800174e:	f003 bc1d 	b.w	8004f8c <Error_Handler>
 8001752:	bf00      	nop
 8001754:	30000000 	.word	0x30000000
 8001758:	2400981c 	.word	0x2400981c

0800175c <DCMI_MDMAFrameXferCplt>:
  __HAL_MDMA_DISABLE(hmdma);
 800175c:	6801      	ldr	r1, [r0, #0]
  hdcmi->XferCount++;
 800175e:	4b0e      	ldr	r3, [pc, #56]	; (8001798 <DCMI_MDMAFrameXferCplt+0x3c>)
  __HAL_MDMA_DISABLE(hmdma);
 8001760:	68ca      	ldr	r2, [r1, #12]
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8001762:	6c18      	ldr	r0, [r3, #64]	; 0x40
  __HAL_MDMA_DISABLE(hmdma);
 8001764:	f022 0201 	bic.w	r2, r2, #1
 8001768:	60ca      	str	r2, [r1, #12]
  hdcmi->XferCount++;
 800176a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800176c:	3201      	adds	r2, #1
 800176e:	639a      	str	r2, [r3, #56]	; 0x38
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8001770:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001772:	4282      	cmp	r2, r0
 8001774:	d000      	beq.n	8001778 <DCMI_MDMAFrameXferCplt+0x1c>
}
 8001776:	4770      	bx	lr
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	68d1      	ldr	r1, [r2, #12]
 800177c:	f041 0101 	orr.w	r1, r1, #1
 8001780:	60d1      	str	r1, [r2, #12]
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001782:	6812      	ldr	r2, [r2, #0]
 8001784:	f012 0202 	ands.w	r2, r2, #2
 8001788:	d101      	bne.n	800178e <DCMI_MDMAFrameXferCplt+0x32>
      hdcmi->XferCount = 0;
 800178a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800178c:	4770      	bx	lr
      hdcmi->State = HAL_DCMI_STATE_READY;
 800178e:	2201      	movs	r2, #1
 8001790:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	2400a208 	.word	0x2400a208

0800179c <CAMERA_Init>:
  Camera_Context_Ptr->new_frame_ready=0;
 800179c:	2300      	movs	r3, #0
  __HAL_RCC_MDMA_CLK_ENABLE();
 800179e:	4a64      	ldr	r2, [pc, #400]	; (8001930 <CAMERA_Init+0x194>)
  Camera_Context_Ptr->mirror_flip=1;
 80017a0:	2101      	movs	r1, #1
  hmdma.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 80017a2:	f04f 5c80 	mov.w	ip, #268435456	; 0x10000000
{
 80017a6:	b5f0      	push	{r4, r5, r6, r7, lr}
  Camera_Context_Ptr->vsync_it=0;
 80017a8:	6083      	str	r3, [r0, #8]
{
 80017aa:	b085      	sub	sp, #20
  Camera_Context_Ptr->new_frame_ready=0;
 80017ac:	7503      	strb	r3, [r0, #20]
{
 80017ae:	4606      	mov	r6, r0
  Camera_Context_Ptr->mirror_flip=1;
 80017b0:	61c1      	str	r1, [r0, #28]
  hmdma.Init.SourceInc                = MDMA_SRC_INC_WORD;
 80017b2:	f240 2702 	movw	r7, #514	; 0x202
  hmdma.Instance = MDMA_Channel0;
 80017b6:	4c5f      	ldr	r4, [pc, #380]	; (8001934 <CAMERA_Init+0x198>)
  hmdma.Init.Request                  = MDMA_REQUEST_SW;
 80017b8:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
  hmdma.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 80017bc:	2520      	movs	r5, #32
  Camera_Context_Ptr->Tvsync_evt=0;
 80017be:	e9c0 3303 	strd	r3, r3, [r0, #12]
  __HAL_RCC_MDMA_CLK_ENABLE();
 80017c2:	f8d2 10d4 	ldr.w	r1, [r2, #212]	; 0xd4
  hmdma.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 80017c6:	f640 0008 	movw	r0, #2056	; 0x808
  __HAL_RCC_MDMA_CLK_ENABLE();
 80017ca:	f041 0101 	orr.w	r1, r1, #1
 80017ce:	f8c2 10d4 	str.w	r1, [r2, #212]	; 0xd4
  hmdma.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 80017d2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  __HAL_RCC_MDMA_CLK_ENABLE();
 80017d6:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
  hmdma.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80017da:	6123      	str	r3, [r4, #16]
  __HAL_RCC_MDMA_CLK_ENABLE();
 80017dc:	f002 0201 	and.w	r2, r2, #1
  hmdma.Init.SourceBurst              = MDMA_DEST_BURST_SINGLE;
 80017e0:	62e3      	str	r3, [r4, #44]	; 0x2c
  hmdma.Init.Request                  = MDMA_REQUEST_SW;
 80017e2:	f8c4 e004 	str.w	lr, [r4, #4]
  __HAL_RCC_MDMA_CLK_ENABLE();
 80017e6:	9203      	str	r2, [sp, #12]
 80017e8:	9a03      	ldr	r2, [sp, #12]
  hmdma.Init.DestBurst                = MDMA_DEST_BURST_16BEATS;
 80017ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  hmdma.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 80017ee:	f8c4 c008 	str.w	ip, [r4, #8]
  hmdma.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 80017f2:	61e5      	str	r5, [r4, #28]
  hmdma.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 80017f4:	6261      	str	r1, [r4, #36]	; 0x24
  hmdma.Init.DestBurst                = MDMA_DEST_BURST_16BEATS;
 80017f6:	6322      	str	r2, [r4, #48]	; 0x30
  hmdma.Init.DestBlockAddressOffset   = 0;
 80017f8:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
  hmdma.Instance = MDMA_Channel0;
 80017fc:	4b4e      	ldr	r3, [pc, #312]	; (8001938 <CAMERA_Init+0x19c>)
 80017fe:	6023      	str	r3, [r4, #0]
  hmdma.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8001800:	2380      	movs	r3, #128	; 0x80
  hmdma.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8001802:	e9c4 7005 	strd	r7, r0, [r4, #20]
  if (HAL_MDMA_Init(&hmdma) != HAL_OK)
 8001806:	4620      	mov	r0, r4
  hmdma.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8001808:	60e3      	str	r3, [r4, #12]
  hmdma.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 800180a:	6223      	str	r3, [r4, #32]
  hmdma.Init.BufferTransferLength     = 128;
 800180c:	62a3      	str	r3, [r4, #40]	; 0x28
  if (HAL_MDMA_Init(&hmdma) != HAL_OK)
 800180e:	f00f fdc9 	bl	80113a4 <HAL_MDMA_Init>
 8001812:	b108      	cbz	r0, 8001818 <CAMERA_Init+0x7c>
    Error_Handler();
 8001814:	f003 fbba 	bl	8004f8c <Error_Handler>
  HAL_NVIC_SetPriority(MDMA_IRQn, 15U, 0);
 8001818:	2200      	movs	r2, #0
 800181a:	210f      	movs	r1, #15
 800181c:	207a      	movs	r0, #122	; 0x7a
 800181e:	f00c f8d9 	bl	800d9d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8001822:	207a      	movs	r0, #122	; 0x7a
 8001824:	f00c f90c 	bl	800da40 <HAL_NVIC_EnableIRQ>
  BSP_CAMERA_PwrDown(0);
 8001828:	2000      	movs	r0, #0
 800182a:	f00a ff17 	bl	800c65c <BSP_CAMERA_PwrDown>
  HAL_Delay(200);
 800182e:	20c8      	movs	r0, #200	; 0xc8
 8001830:	f00c f89c 	bl	800d96c <HAL_Delay>
  if (BSP_CAMERA_Init(0, CAMERA_RESOLUTION, CAMERA_PF_RGB565) != BSP_ERROR_NONE) 
 8001834:	2200      	movs	r2, #0
 8001836:	2103      	movs	r1, #3
 8001838:	4610      	mov	r0, r2
 800183a:	f00a fc79 	bl	800c130 <BSP_CAMERA_Init>
 800183e:	b108      	cbz	r0, 8001844 <CAMERA_Init+0xa8>
    Error_Handler();
 8001840:	f003 fba4 	bl	8004f8c <Error_Handler>
  if (Camera_Ctx[0].CameraId == OV5640_ID)
 8001844:	4a3d      	ldr	r2, [pc, #244]	; (800193c <CAMERA_Init+0x1a0>)
 8001846:	f245 6340 	movw	r3, #22080	; 0x5640
 800184a:	6812      	ldr	r2, [r2, #0]
 800184c:	429a      	cmp	r2, r3
 800184e:	d006      	beq.n	800185e <CAMERA_Init+0xc2>
  if (BSP_CAMERA_SetMirrorFlip(0, Camera_Context_Ptr->mirror_flip) != BSP_ERROR_NONE)
 8001850:	69f1      	ldr	r1, [r6, #28]
 8001852:	2000      	movs	r0, #0
 8001854:	f00a fede 	bl	800c614 <BSP_CAMERA_SetMirrorFlip>
 8001858:	4607      	mov	r7, r0
 800185a:	b178      	cbz	r0, 800187c <CAMERA_Init+0xe0>
 800185c:	e7fe      	b.n	800185c <CAMERA_Init+0xc0>
    OV5640_Object_t *pObj = Camera_CompObj;
 800185e:	4938      	ldr	r1, [pc, #224]	; (8001940 <CAMERA_Init+0x1a4>)
    uint8_t tmp = 0xC0; /* Bits[7:0]: PLL multiplier */
 8001860:	25c0      	movs	r5, #192	; 0xc0
 8001862:	aa04      	add	r2, sp, #16
    if (ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL2,  &tmp, 1) != OV5640_OK)
 8001864:	2301      	movs	r3, #1
    OV5640_Object_t *pObj = Camera_CompObj;
 8001866:	6808      	ldr	r0, [r1, #0]
    if (ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL2,  &tmp, 1) != OV5640_OK)
 8001868:	f243 0136 	movw	r1, #12342	; 0x3036
    uint8_t tmp = 0xC0; /* Bits[7:0]: PLL multiplier */
 800186c:	f802 5d05 	strb.w	r5, [r2, #-5]!
    if (ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL2,  &tmp, 1) != OV5640_OK)
 8001870:	3018      	adds	r0, #24
 8001872:	f007 fb41 	bl	8008ef8 <ov5640_write_reg>
 8001876:	2800      	cmp	r0, #0
 8001878:	d0ea      	beq.n	8001850 <CAMERA_Init+0xb4>
 800187a:	e7fe      	b.n	800187a <CAMERA_Init+0xde>
  HAL_Delay(100);
 800187c:	2064      	movs	r0, #100	; 0x64
   HAL_DCMI_ConfigCrop(&hcamera_dcmi,
 800187e:	4d31      	ldr	r5, [pc, #196]	; (8001944 <CAMERA_Init+0x1a8>)
  HAL_Delay(100);
 8001880:	f00c f874 	bl	800d96c <HAL_Delay>
   HAL_DCMI_ConfigCrop(&hcamera_dcmi,
 8001884:	f240 12df 	movw	r2, #479	; 0x1df
 8001888:	f240 33bf 	movw	r3, #959	; 0x3bf
 800188c:	21a0      	movs	r1, #160	; 0xa0
 800188e:	9200      	str	r2, [sp, #0]
 8001890:	4628      	mov	r0, r5
 8001892:	463a      	mov	r2, r7
 8001894:	f00c fabe 	bl	800de14 <HAL_DCMI_ConfigCrop>
   HAL_DCMI_EnableCrop(&hcamera_dcmi);
 8001898:	4628      	mov	r0, r5
 800189a:	f00c faf3 	bl	800de84 <HAL_DCMI_EnableCrop>
   HAL_Delay(200);
 800189e:	20c8      	movs	r0, #200	; 0xc8
 80018a0:	f00c f864 	bl	800d96c <HAL_Delay>
  __HAL_LOCK(hdcmi);
 80018a4:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  if (HAL_DCMIEx_Start_DMA_MDMA(&hcamera_dcmi, CAMERA_MODE_CONTINUOUS,
 80018a8:	f8d6 c000 	ldr.w	ip, [r6]
  __HAL_LOCK(hdcmi);
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d03e      	beq.n	800192e <CAMERA_Init+0x192>
  __HAL_DCMI_ENABLE(hdcmi);
 80018b0:	682b      	ldr	r3, [r5, #0]
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80018b2:	2102      	movs	r1, #2
  __HAL_LOCK(hdcmi);
 80018b4:	2601      	movs	r6, #1
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMALineXferCplt;
 80018b6:	6caa      	ldr	r2, [r5, #72]	; 0x48
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80018b8:	f885 1035 	strb.w	r1, [r5, #53]	; 0x35
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 80018bc:	4619      	mov	r1, r3
  __HAL_DCMI_ENABLE(hdcmi);
 80018be:	6818      	ldr	r0, [r3, #0]
  __HAL_LOCK(hdcmi);
 80018c0:	f885 6034 	strb.w	r6, [r5, #52]	; 0x34
  __HAL_DCMI_ENABLE(hdcmi);
 80018c4:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMALineXferCplt;
 80018c8:	f8df e08c 	ldr.w	lr, [pc, #140]	; 8001958 <CAMERA_Init+0x1bc>
  __HAL_DCMI_ENABLE(hdcmi);
 80018cc:	6018      	str	r0, [r3, #0]
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 80018ce:	6818      	ldr	r0, [r3, #0]
 80018d0:	f020 0002 	bic.w	r0, r0, #2
 80018d4:	6018      	str	r0, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 80018d6:	6818      	ldr	r0, [r3, #0]
  hdcmi->XferSize = line_size / 4U;
 80018d8:	23f0      	movs	r3, #240	; 0xf0
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 80018da:	f841 0b28 	str.w	r0, [r1], #40
  if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, pLineData, hdcmi->XferSize) != HAL_OK)
 80018de:	4610      	mov	r0, r2
  hdcmi->XferCount = 0;
 80018e0:	63af      	str	r7, [r5, #56]	; 0x38
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 80018e2:	6517      	str	r7, [r2, #80]	; 0x50
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 80018e4:	4f18      	ldr	r7, [pc, #96]	; (8001948 <CAMERA_Init+0x1ac>)
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMALineXferCplt;
 80018e6:	f8c2 e03c 	str.w	lr, [r2, #60]	; 0x3c
  hdcmi->XferTransferNumber = num_lines;
 80018ea:	f44f 7ef0 	mov.w	lr, #480	; 0x1e0
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 80018ee:	64d7      	str	r7, [r2, #76]	; 0x4c
  hmdma.XferCpltCallback = DCMI_MDMAFrameXferCplt;
 80018f0:	4a16      	ldr	r2, [pc, #88]	; (800194c <CAMERA_Init+0x1b0>)
  hmdma.XferErrorCallback = DCMI_MDMAError;
 80018f2:	4f17      	ldr	r7, [pc, #92]	; (8001950 <CAMERA_Init+0x1b4>)
  hdcmi->XferSize = line_size / 4U;
 80018f4:	63eb      	str	r3, [r5, #60]	; 0x3c
  hmdma.XferCpltCallback = DCMI_MDMAFrameXferCplt;
 80018f6:	6462      	str	r2, [r4, #68]	; 0x44
  if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, pLineData, hdcmi->XferSize) != HAL_OK)
 80018f8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80018fa:	4a16      	ldr	r2, [pc, #88]	; (8001954 <CAMERA_Init+0x1b8>)
  hdcmi->pBuffPtr = (uint32_t) pData;
 80018fc:	f8c5 c044 	str.w	ip, [r5, #68]	; 0x44
  hdcmi->XferTransferNumber = num_lines;
 8001900:	f8c5 e040 	str.w	lr, [r5, #64]	; 0x40
  hmdma.XferErrorCallback = DCMI_MDMAError;
 8001904:	6567      	str	r7, [r4, #84]	; 0x54
  if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, pLineData, hdcmi->XferSize) != HAL_OK)
 8001906:	f00c ffbf 	bl	800e888 <HAL_DMA_Start_IT>
 800190a:	4602      	mov	r2, r0
 800190c:	b958      	cbnz	r0, 8001926 <CAMERA_Init+0x18a>
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 800190e:	6829      	ldr	r1, [r5, #0]
  HAL_Delay(200);
 8001910:	20c8      	movs	r0, #200	; 0xc8
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8001912:	680b      	ldr	r3, [r1, #0]
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	600b      	str	r3, [r1, #0]
  __HAL_UNLOCK(hdcmi);
 800191a:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
  HAL_Delay(200);
 800191e:	f00c f825 	bl	800d96c <HAL_Delay>
}
 8001922:	b005      	add	sp, #20
 8001924:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8001926:	2340      	movs	r3, #64	; 0x40
 8001928:	64eb      	str	r3, [r5, #76]	; 0x4c
    hdcmi->State = HAL_DCMI_STATE_READY;
 800192a:	f885 6035 	strb.w	r6, [r5, #53]	; 0x35
 800192e:	e7fe      	b.n	800192e <CAMERA_Init+0x192>
 8001930:	58024400 	.word	0x58024400
 8001934:	2400981c 	.word	0x2400981c
 8001938:	52000040 	.word	0x52000040
 800193c:	2400a258 	.word	0x2400a258
 8001940:	24009194 	.word	0x24009194
 8001944:	2400a208 	.word	0x2400a208
 8001948:	08001709 	.word	0x08001709
 800194c:	0800175d 	.word	0x0800175d
 8001950:	080016f9 	.word	0x080016f9
 8001954:	30000000 	.word	0x30000000
 8001958:	08001725 	.word	0x08001725

0800195c <CAMERA_Set_TestBar_Mode>:
  uint32_t camera_id = Camera_Ctx[0].CameraId;
 800195c:	4a15      	ldr	r2, [pc, #84]	; (80019b4 <CAMERA_Set_TestBar_Mode+0x58>)
  if ((camera_id == OV9655_ID) || (camera_id == OV9655_ID_2))
 800195e:	4b16      	ldr	r3, [pc, #88]	; (80019b8 <CAMERA_Set_TestBar_Mode+0x5c>)
 8001960:	6811      	ldr	r1, [r2, #0]
 8001962:	4a16      	ldr	r2, [pc, #88]	; (80019bc <CAMERA_Set_TestBar_Mode+0x60>)
 8001964:	440b      	add	r3, r1
 8001966:	6810      	ldr	r0, [r2, #0]
 8001968:	2b01      	cmp	r3, #1
{
 800196a:	b510      	push	{r4, lr}
 800196c:	b082      	sub	sp, #8
  if ((camera_id == OV9655_ID) || (camera_id == OV9655_ID_2))
 800196e:	d904      	bls.n	800197a <CAMERA_Set_TestBar_Mode+0x1e>
    if (OV5640_ColorbarModeConfig(pObj, COLORBAR_MODE_ENABLE) != OV5640_OK)
 8001970:	2101      	movs	r1, #1
 8001972:	f007 fa6f 	bl	8008e54 <OV5640_ColorbarModeConfig>
 8001976:	b1b0      	cbz	r0, 80019a6 <CAMERA_Set_TestBar_Mode+0x4a>
 8001978:	e7fe      	b.n	8001978 <CAMERA_Set_TestBar_Mode+0x1c>
    ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL20, &tmp, 1);
 800197a:	f100 0418 	add.w	r4, r0, #24
 800197e:	2301      	movs	r3, #1
 8001980:	218d      	movs	r1, #141	; 0x8d
 8001982:	f10d 0207 	add.w	r2, sp, #7
 8001986:	4620      	mov	r0, r4
 8001988:	f007 ff04 	bl	8009794 <ov9655_read_reg>
    tmp |= 0x10; /* Set bit[4]: Color bar test mode */
 800198c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL20, &tmp, 1);
 8001990:	4620      	mov	r0, r4
 8001992:	f10d 0207 	add.w	r2, sp, #7
    tmp |= 0x10; /* Set bit[4]: Color bar test mode */
 8001996:	f043 0410 	orr.w	r4, r3, #16
    ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL20, &tmp, 1);
 800199a:	218d      	movs	r1, #141	; 0x8d
 800199c:	2301      	movs	r3, #1
    tmp |= 0x10; /* Set bit[4]: Color bar test mode */
 800199e:	f88d 4007 	strb.w	r4, [sp, #7]
    ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL20, &tmp, 1);
 80019a2:	f007 feff 	bl	80097a4 <ov9655_write_reg>
  HAL_Delay(500);
 80019a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019aa:	f00b ffdf 	bl	800d96c <HAL_Delay>
}
 80019ae:	b002      	add	sp, #8
 80019b0:	bd10      	pop	{r4, pc}
 80019b2:	bf00      	nop
 80019b4:	2400a258 	.word	0x2400a258
 80019b8:	ffff69aa 	.word	0xffff69aa
 80019bc:	24009194 	.word	0x24009194

080019c0 <BSP_CAMERA_FrameEventCallback>:
{
 80019c0:	b570      	push	{r4, r5, r6, lr}
  AppContext_TypeDef *App_Cxt_Ptr=CameraContext.AppCtxPtr;
 80019c2:	4c0c      	ldr	r4, [pc, #48]	; (80019f4 <BSP_CAMERA_FrameEventCallback+0x34>)
 80019c4:	69a3      	ldr	r3, [r4, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 80019c6:	b672      	cpsid	i
  CameraContext.new_frame_ready = 1;
 80019c8:	2501      	movs	r5, #1
  App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestop = HAL_GetTick();
 80019ca:	6b9e      	ldr	r6, [r3, #56]	; 0x38
  CameraContext.new_frame_ready = 1;
 80019cc:	7525      	strb	r5, [r4, #20]
  App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestop = HAL_GetTick();
 80019ce:	f00b ffc7 	bl	800d960 <HAL_GetTick>
 80019d2:	6270      	str	r0, [r6, #36]	; 0x24
  CameraContext.new_frame_ready = 1;
 80019d4:	7525      	strb	r5, [r4, #20]
  CameraContext.Tframe_evt=HAL_GetTick();
 80019d6:	f00b ffc3 	bl	800d960 <HAL_GetTick>
  if((CameraContext.Tframe_evt-CameraContext.Tvsync_evt)<3)
 80019da:	6923      	ldr	r3, [r4, #16]
  CameraContext.Tframe_evt=HAL_GetTick();
 80019dc:	60e0      	str	r0, [r4, #12]
  if((CameraContext.Tframe_evt-CameraContext.Tvsync_evt)<3)
 80019de:	1ac0      	subs	r0, r0, r3
 80019e0:	2802      	cmp	r0, #2
 80019e2:	d801      	bhi.n	80019e8 <BSP_CAMERA_FrameEventCallback+0x28>
    CameraContext.vsync_it =2;
 80019e4:	2302      	movs	r3, #2
 80019e6:	60a3      	str	r3, [r4, #8]
  BSP_CAMERA_Suspend(0);
 80019e8:	2000      	movs	r0, #0
 80019ea:	f00a fdab 	bl	800c544 <BSP_CAMERA_Suspend>
  __ASM volatile ("cpsie i" : : : "memory");
 80019ee:	b662      	cpsie	i
}
 80019f0:	bd70      	pop	{r4, r5, r6, pc}
 80019f2:	bf00      	nop
 80019f4:	24009888 	.word	0x24009888

080019f8 <BSP_CAMERA_VsyncEventCallback>:
{ 
 80019f8:	b570      	push	{r4, r5, r6, lr}
  AppContext_TypeDef *App_Cxt_Ptr=CameraContext.AppCtxPtr;
 80019fa:	4c17      	ldr	r4, [pc, #92]	; (8001a58 <BSP_CAMERA_VsyncEventCallback+0x60>)
 80019fc:	69a5      	ldr	r5, [r4, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 80019fe:	b672      	cpsid	i
  CameraContext.Tvsync_evt=HAL_GetTick();
 8001a00:	f00b ffae 	bl	800d960 <HAL_GetTick>
  if(CameraContext.vsync_it==0)
 8001a04:	68a3      	ldr	r3, [r4, #8]
  CameraContext.Tvsync_evt=HAL_GetTick();
 8001a06:	6120      	str	r0, [r4, #16]
  if(CameraContext.vsync_it==0)
 8001a08:	b193      	cbz	r3, 8001a30 <BSP_CAMERA_VsyncEventCallback+0x38>
 8001a0a:	68e2      	ldr	r2, [r4, #12]
  else if(CameraContext.vsync_it==1 && ((CameraContext.new_frame_ready == 0) || ((CameraContext.new_frame_ready == 1) && ((CameraContext.Tvsync_evt - CameraContext.Tframe_evt) < 3))))//3 ms: in reality the time diff is in the magnitude of a few hundreds of ns, but some margin is required because there could be other interrupts in between the vsync_evt IT and the frame_evt IT.
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	eba0 0002 	sub.w	r0, r0, r2
 8001a12:	d005      	beq.n	8001a20 <BSP_CAMERA_VsyncEventCallback+0x28>
  if(CameraContext.Tvsync_evt - CameraContext.Tframe_evt <3)
 8001a14:	2802      	cmp	r0, #2
 8001a16:	d801      	bhi.n	8001a1c <BSP_CAMERA_VsyncEventCallback+0x24>
    CameraContext.vsync_it =2;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	60a3      	str	r3, [r4, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8001a1c:	b662      	cpsie	i
}
 8001a1e:	bd70      	pop	{r4, r5, r6, pc}
  else if(CameraContext.vsync_it==1 && ((CameraContext.new_frame_ready == 0) || ((CameraContext.new_frame_ready == 1) && ((CameraContext.Tvsync_evt - CameraContext.Tframe_evt) < 3))))//3 ms: in reality the time diff is in the magnitude of a few hundreds of ns, but some margin is required because there could be other interrupts in between the vsync_evt IT and the frame_evt IT.
 8001a20:	7d23      	ldrb	r3, [r4, #20]
 8001a22:	b993      	cbnz	r3, 8001a4a <BSP_CAMERA_VsyncEventCallback+0x52>
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart=App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart2;
 8001a24:	6bab      	ldr	r3, [r5, #56]	; 0x38
    CameraContext.vsync_it ++;
 8001a26:	2102      	movs	r1, #2
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart=App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart2;
 8001a28:	69da      	ldr	r2, [r3, #28]
    CameraContext.vsync_it ++;
 8001a2a:	60a1      	str	r1, [r4, #8]
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart=App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart2;
 8001a2c:	621a      	str	r2, [r3, #32]
 8001a2e:	e7f1      	b.n	8001a14 <BSP_CAMERA_VsyncEventCallback+0x1c>
    CameraContext.vsync_it ++;
 8001a30:	2301      	movs	r3, #1
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart2 = HAL_GetTick();
 8001a32:	6bae      	ldr	r6, [r5, #56]	; 0x38
    CameraContext.vsync_it ++;
 8001a34:	60a3      	str	r3, [r4, #8]
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart2 = HAL_GetTick();
 8001a36:	f00b ff93 	bl	800d960 <HAL_GetTick>
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart=App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1;
 8001a3a:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001a3c:	6923      	ldr	r3, [r4, #16]
 8001a3e:	6991      	ldr	r1, [r2, #24]
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart2 = HAL_GetTick();
 8001a40:	61f0      	str	r0, [r6, #28]
 8001a42:	68e0      	ldr	r0, [r4, #12]
    App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart=App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.tcapturestart1;
 8001a44:	6211      	str	r1, [r2, #32]
 8001a46:	1a18      	subs	r0, r3, r0
 8001a48:	e7e4      	b.n	8001a14 <BSP_CAMERA_VsyncEventCallback+0x1c>
  else if(CameraContext.vsync_it==1 && ((CameraContext.new_frame_ready == 0) || ((CameraContext.new_frame_ready == 1) && ((CameraContext.Tvsync_evt - CameraContext.Tframe_evt) < 3))))//3 ms: in reality the time diff is in the magnitude of a few hundreds of ns, but some margin is required because there could be other interrupts in between the vsync_evt IT and the frame_evt IT.
 8001a4a:	7d23      	ldrb	r3, [r4, #20]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d1e1      	bne.n	8001a14 <BSP_CAMERA_VsyncEventCallback+0x1c>
 8001a50:	2802      	cmp	r0, #2
 8001a52:	d8e3      	bhi.n	8001a1c <BSP_CAMERA_VsyncEventCallback+0x24>
 8001a54:	e7e6      	b.n	8001a24 <BSP_CAMERA_VsyncEventCallback+0x2c>
 8001a56:	bf00      	nop
 8001a58:	24009888 	.word	0x24009888

08001a5c <BSP_CAMERA_ErrorCallback>:
  Error_Handler();
 8001a5c:	f003 ba96 	b.w	8004f8c <Error_Handler>

08001a60 <DISPLAY_Init>:
 * @brief  Dispaly Initialization
 * @param Display_Context_Ptr pointer to display context
 * @retval None
 */
void DISPLAY_Init(DisplayContext_TypeDef* Display_Context_Ptr)
{
 8001a60:	b5f0      	push	{r4, r5, r6, r7, lr}

  /*
   * Disable FMC Bank1 to prevent CPU speculative read accesses
   * AN4861: 4.6.1 Disable FMC bank1 if not used.
   */
  __FMC_NORSRAM_DISABLE(FMC_Bank1_R, FMC_NORSRAM_BANK1);
 8001a62:	4a21      	ldr	r2, [pc, #132]	; (8001ae8 <DISPLAY_Init+0x88>)
  Display_Context_Ptr->lcd_sync=0;
 8001a64:	2400      	movs	r4, #0
{
 8001a66:	4605      	mov	r5, r0
  Display_Context_Ptr->lcd_frame_read_buff=lcd_display_read_buffer;
 8001a68:	4e20      	ldr	r6, [pc, #128]	; (8001aec <DISPLAY_Init+0x8c>)
  Display_Context_Ptr->lcd_frame_write_buff=lcd_display_write_buffer;
 8001a6a:	4b21      	ldr	r3, [pc, #132]	; (8001af0 <DISPLAY_Init+0x90>)
{
 8001a6c:	b087      	sub	sp, #28
  Display_Context_Ptr->lcd_sync=0;
 8001a6e:	60ac      	str	r4, [r5, #8]

  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);/*by default, 0xD0000000 is used as start address for lcd frame buffer*/
 8001a70:	2101      	movs	r1, #1
  Display_Context_Ptr->lcd_frame_read_buff=lcd_display_read_buffer;
 8001a72:	6837      	ldr	r7, [r6, #0]
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);/*by default, 0xD0000000 is used as start address for lcd frame buffer*/
 8001a74:	4620      	mov	r0, r4
  Display_Context_Ptr->lcd_frame_write_buff=lcd_display_write_buffer;
 8001a76:	681e      	ldr	r6, [r3, #0]
  __FMC_NORSRAM_DISABLE(FMC_Bank1_R, FMC_NORSRAM_BANK1);
 8001a78:	6813      	ldr	r3, [r2, #0]
  Display_Context_Ptr->lcd_frame_write_buff=lcd_display_write_buffer;
 8001a7a:	606e      	str	r6, [r5, #4]

  config.X0          = 0;
  config.X1          = LCD_DEFAULT_WIDTH;
 8001a7c:	f44f 7648 	mov.w	r6, #800	; 0x320
  __FMC_NORSRAM_DISABLE(FMC_Bank1_R, FMC_NORSRAM_BANK1);
 8001a80:	f023 0301 	bic.w	r3, r3, #1
  Display_Context_Ptr->lcd_frame_read_buff=lcd_display_read_buffer;
 8001a84:	602f      	str	r7, [r5, #0]
  __FMC_NORSRAM_DISABLE(FMC_Bank1_R, FMC_NORSRAM_BANK1);
 8001a86:	6013      	str	r3, [r2, #0]
  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);/*by default, 0xD0000000 is used as start address for lcd frame buffer*/
 8001a88:	f00b fb7c 	bl	800d184 <BSP_LCD_Init>
  config.Y0          = 0;
  config.Y1          = LCD_DEFAULT_HEIGHT;
  config.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
  config.Address     = (uint32_t)Display_Context_Ptr->lcd_frame_read_buff;/*lcd_frame_read_buff buffer used as lcd frame buffer*/
 8001a8c:	682a      	ldr	r2, [r5, #0]
  config.Y1          = LCD_DEFAULT_HEIGHT;
 8001a8e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  BSP_LCD_ConfigLayer(0, 0, &config);//overwrite config 
 8001a92:	4621      	mov	r1, r4
 8001a94:	4620      	mov	r0, r4
  config.X0          = 0;
 8001a96:	9400      	str	r4, [sp, #0]
  config.Y1          = LCD_DEFAULT_HEIGHT;
 8001a98:	9303      	str	r3, [sp, #12]
  config.Y0          = 0;
 8001a9a:	9402      	str	r4, [sp, #8]
  config.X1          = LCD_DEFAULT_WIDTH;
 8001a9c:	9601      	str	r6, [sp, #4]
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
  UTIL_LCD_SetFont(&Font24);
  
  /*Use lcd_frame_write_buff buffer for display composition*/
  hlcd_ltdc.LayerCfg[Lcd_Ctx[0].ActiveLayer].FBStartAdress=(uint32_t)Display_Context_Ptr->lcd_frame_write_buff;
 8001a9e:	2634      	movs	r6, #52	; 0x34
  config.Address     = (uint32_t)Display_Context_Ptr->lcd_frame_read_buff;/*lcd_frame_read_buff buffer used as lcd frame buffer*/
 8001aa0:	e9cd 4204 	strd	r4, r2, [sp, #16]
  BSP_LCD_ConfigLayer(0, 0, &config);//overwrite config 
 8001aa4:	466a      	mov	r2, sp
 8001aa6:	f00b fb79 	bl	800d19c <BSP_LCD_ConfigLayer>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
 8001aaa:	4812      	ldr	r0, [pc, #72]	; (8001af4 <DISPLAY_Init+0x94>)
 8001aac:	f01b fcc2 	bl	801d434 <UTIL_LCD_SetFuncDriver>
  UTIL_LCD_SetLayer(0);
 8001ab0:	4620      	mov	r0, r4
 8001ab2:	f01b fcf1 	bl	801d498 <UTIL_LCD_SetLayer>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
 8001ab6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001aba:	f01b fd05 	bl	801d4c8 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8001abe:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac2:	f01b fcf9 	bl	801d4b8 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetFont(&Font24);
 8001ac6:	480c      	ldr	r0, [pc, #48]	; (8001af8 <DISPLAY_Init+0x98>)
 8001ac8:	f01b fd06 	bl	801d4d8 <UTIL_LCD_SetFont>
  hlcd_ltdc.LayerCfg[Lcd_Ctx[0].ActiveLayer].FBStartAdress=(uint32_t)Display_Context_Ptr->lcd_frame_write_buff;
 8001acc:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <DISPLAY_Init+0x9c>)
 8001ace:	4a0c      	ldr	r2, [pc, #48]	; (8001b00 <DISPLAY_Init+0xa0>)
  
  /*LCD sync: set LTDCreload type to vertical blanking*/
  HAL_LTDC_Reload(&hlcd_ltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 8001ad0:	2102      	movs	r1, #2
  hlcd_ltdc.LayerCfg[Lcd_Ctx[0].ActiveLayer].FBStartAdress=(uint32_t)Display_Context_Ptr->lcd_frame_write_buff;
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	686c      	ldr	r4, [r5, #4]
  HAL_LTDC_Reload(&hlcd_ltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 8001ad6:	4610      	mov	r0, r2
  hlcd_ltdc.LayerCfg[Lcd_Ctx[0].ActiveLayer].FBStartAdress=(uint32_t)Display_Context_Ptr->lcd_frame_write_buff;
 8001ad8:	fb06 2303 	mla	r3, r6, r3, r2
 8001adc:	65dc      	str	r4, [r3, #92]	; 0x5c
  HAL_LTDC_Reload(&hlcd_ltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 8001ade:	f00f fc47 	bl	8011370 <HAL_LTDC_Reload>
}
 8001ae2:	b007      	add	sp, #28
 8001ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	52004000 	.word	0x52004000
 8001aec:	24000020 	.word	0x24000020
 8001af0:	24000024 	.word	0x24000024
 8001af4:	080bfbb0 	.word	0x080bfbb0
 8001af8:	24007408 	.word	0x24007408
 8001afc:	2400a334 	.word	0x2400a334
 8001b00:	2400a28c 	.word	0x2400a28c

08001b04 <DISPLAY_WelcomeScreen>:
 *
 * @param Display_Context_Ptr pointer to display context
 * @return int boolean value, 1 if WakeUp button has been pressed, 0 otherwise
 */
int DISPLAY_WelcomeScreen(DisplayContext_TypeDef* Display_Context_Ptr)
{
 8001b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b06:	4604      	mov	r4, r0
 8001b08:	b089      	sub	sp, #36	; 0x24
  int magic_menu = 0;
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8001b0a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001b0e:	f01b fcf3 	bl	801d4f8 <UTIL_LCD_Clear>

  /* Draw logos.*/
  BSP_LCD_DrawBitmap(0, 50, 77, (uint8_t *)stlogo);
 8001b12:	4b4b      	ldr	r3, [pc, #300]	; (8001c40 <DISPLAY_WelcomeScreen+0x13c>)
 8001b14:	224d      	movs	r2, #77	; 0x4d
 8001b16:	2132      	movs	r1, #50	; 0x32
 8001b18:	2000      	movs	r0, #0
 8001b1a:	f00a febd 	bl	800c898 <BSP_LCD_DrawBitmap>
  BSP_LCD_DrawBitmap(0, 620, 85, (uint8_t *)stm32h7logo);
 8001b1e:	4b49      	ldr	r3, [pc, #292]	; (8001c44 <DISPLAY_WelcomeScreen+0x140>)
 8001b20:	2255      	movs	r2, #85	; 0x55
 8001b22:	f44f 711b 	mov.w	r1, #620	; 0x26c
 8001b26:	2000      	movs	r0, #0
 8001b28:	f00a feb6 	bl	800c898 <BSP_LCD_DrawBitmap>

  /*Display welcome message*/
  UTIL_LCD_DisplayStringAt(0, LINE(6), (uint8_t *)"VISION1 Function Pack", CENTER_MODE);
 8001b2c:	f01b fcdc 	bl	801d4e8 <UTIL_LCD_GetFont>
 8001b30:	88c1      	ldrh	r1, [r0, #6]
 8001b32:	2301      	movs	r3, #1
 8001b34:	4a44      	ldr	r2, [pc, #272]	; (8001c48 <DISPLAY_WelcomeScreen+0x144>)
 8001b36:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	4099      	lsls	r1, r3
 8001b3e:	f01b fda1 	bl	801d684 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(7), (uint8_t *)"V3.0.0", CENTER_MODE);
 8001b42:	f01b fcd1 	bl	801d4e8 <UTIL_LCD_GetFont>
 8001b46:	88c1      	ldrh	r1, [r0, #6]
 8001b48:	2301      	movs	r3, #1
 8001b4a:	4a40      	ldr	r2, [pc, #256]	; (8001c4c <DISPLAY_WelcomeScreen+0x148>)
 8001b4c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8001b50:	2000      	movs	r0, #0
 8001b52:	f01b fd97 	bl	801d684 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(10), (uint8_t *)WELCOME_MSG_0, CENTER_MODE);
 8001b56:	f01b fcc7 	bl	801d4e8 <UTIL_LCD_GetFont>
 8001b5a:	88c1      	ldrh	r1, [r0, #6]
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	4a3c      	ldr	r2, [pc, #240]	; (8001c50 <DISPLAY_WelcomeScreen+0x14c>)
 8001b60:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001b64:	2000      	movs	r0, #0
 8001b66:	4099      	lsls	r1, r3
 8001b68:	f01b fd8c 	bl	801d684 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(11), (uint8_t *)WELCOME_MSG_2, CENTER_MODE);
 8001b6c:	f01b fcbc 	bl	801d4e8 <UTIL_LCD_GetFont>
 8001b70:	88c1      	ldrh	r1, [r0, #6]
 8001b72:	2301      	movs	r3, #1
 8001b74:	4a37      	ldr	r2, [pc, #220]	; (8001c54 <DISPLAY_WelcomeScreen+0x150>)
 8001b76:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 8001b7a:	2000      	movs	r0, #0
 8001b7c:	eb01 0145 	add.w	r1, r1, r5, lsl #1
 8001b80:	f01b fd80 	bl	801d684 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(12), (uint8_t *)WELCOME_MSG_1, CENTER_MODE);
 8001b84:	f01b fcb0 	bl	801d4e8 <UTIL_LCD_GetFont>
 8001b88:	88c1      	ldrh	r1, [r0, #6]
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	4a32      	ldr	r2, [pc, #200]	; (8001c58 <DISPLAY_WelcomeScreen+0x154>)
 8001b8e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001b92:	2000      	movs	r0, #0
 8001b94:	0089      	lsls	r1, r1, #2
 8001b96:	f01b fd75 	bl	801d684 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(13), (uint8_t *)WELCOME_MSG_4, CENTER_MODE);
 8001b9a:	f01b fca5 	bl	801d4e8 <UTIL_LCD_GetFont>
 8001b9e:	88c1      	ldrh	r1, [r0, #6]
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	4a2e      	ldr	r2, [pc, #184]	; (8001c5c <DISPLAY_WelcomeScreen+0x158>)
 8001ba4:	eb01 0541 	add.w	r5, r1, r1, lsl #1
 8001ba8:	2000      	movs	r0, #0
 8001baa:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8001bae:	f01b fd69 	bl	801d684 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)WELCOME_MSG_5, CENTER_MODE);
 8001bb2:	f01b fc99 	bl	801d4e8 <UTIL_LCD_GetFont>
 8001bb6:	88c1      	ldrh	r1, [r0, #6]
 8001bb8:	2301      	movs	r3, #1
 8001bba:	4a29      	ldr	r2, [pc, #164]	; (8001c60 <DISPLAY_WelcomeScreen+0x15c>)
 8001bbc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8001bc0:	2000      	movs	r0, #0
 8001bc2:	4099      	lsls	r1, r3
 8001bc4:	f01b fd5e 	bl	801d684 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(15), (uint8_t *)WELCOME_MSG_3, CENTER_MODE);
 8001bc8:	f01b fc8e 	bl	801d4e8 <UTIL_LCD_GetFont>
 8001bcc:	88c1      	ldrh	r1, [r0, #6]
 8001bce:	2301      	movs	r3, #1
 8001bd0:	4a24      	ldr	r2, [pc, #144]	; (8001c64 <DISPLAY_WelcomeScreen+0x160>)
 8001bd2:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	f01b fd54 	bl	801d684 <UTIL_LCD_DisplayStringAt>
 */
void DISPLAY_Refresh(DisplayContext_TypeDef* Display_Context_Ptr)
{
  /*LCD sync: wait for next VSYNC event before refreshing, i.e. before updating the content of the buffer that will be read by the LTDC for display. 
  The refresh occurs during the blanking period => this sync mecanism should enable to avoid tearing effect*/
  Display_Context_Ptr->lcd_sync =0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	60a3      	str	r3, [r4, #8]
  while(Display_Context_Ptr->lcd_sync==0);
 8001be0:	68a3      	ldr	r3, [r4, #8]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d0fc      	beq.n	8001be0 <DISPLAY_WelcomeScreen+0xdc>
  
  /*Coherency purpose: clean the lcd_frame_write_buff area in L1 D-Cache before DMA2D reading*/
  UTILS_DCache_Coherency_Maintenance((void *)Display_Context_Ptr->lcd_frame_write_buff, LCD_FRAME_BUFFER_SIZE, CLEAN);
 8001be6:	6860      	ldr	r0, [r4, #4]
 8001be8:	2202      	movs	r2, #2
 8001bea:	491f      	ldr	r1, [pc, #124]	; (8001c68 <DISPLAY_WelcomeScreen+0x164>)
  
  UTILS_Dma2d_Memcpy((uint32_t *)(Display_Context_Ptr->lcd_frame_write_buff), (uint32_t *)(Display_Context_Ptr->lcd_frame_read_buff), 0, 0, LCD_RES_WIDTH,
 8001bec:	2600      	movs	r6, #0
  UTILS_DCache_Coherency_Maintenance((void *)Display_Context_Ptr->lcd_frame_write_buff, LCD_FRAME_BUFFER_SIZE, CLEAN);
 8001bee:	f003 f961 	bl	8004eb4 <UTILS_DCache_Coherency_Maintenance>
  UTILS_Dma2d_Memcpy((uint32_t *)(Display_Context_Ptr->lcd_frame_write_buff), (uint32_t *)(Display_Context_Ptr->lcd_frame_read_buff), 0, 0, LCD_RES_WIDTH,
 8001bf2:	f44f 7748 	mov.w	r7, #800	; 0x320
 8001bf6:	f44f 7cf0 	mov.w	ip, #480	; 0x1e0
 8001bfa:	4633      	mov	r3, r6
 8001bfc:	4632      	mov	r2, r6
  int magic_menu = 0;
 8001bfe:	4635      	mov	r5, r6
  UTILS_Dma2d_Memcpy((uint32_t *)(Display_Context_Ptr->lcd_frame_write_buff), (uint32_t *)(Display_Context_Ptr->lcd_frame_read_buff), 0, 0, LCD_RES_WIDTH,
 8001c00:	e9d4 1000 	ldrd	r1, r0, [r4]
 8001c04:	9606      	str	r6, [sp, #24]
 8001c06:	2405      	movs	r4, #5
 8001c08:	9603      	str	r6, [sp, #12]
 8001c0a:	9702      	str	r7, [sp, #8]
 8001c0c:	e9cd 6604 	strd	r6, r6, [sp, #16]
 8001c10:	e9cd 7c00 	strd	r7, ip, [sp]
 8001c14:	f003 f894 	bl	8004d40 <UTILS_Dma2d_Memcpy>
    HAL_Delay(500);
 8001c18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c1c:	f00b fea6 	bl	800d96c <HAL_Delay>
    if (BSP_PB_GetState(BUTTON_WAKEUP) != RESET)
 8001c20:	2000      	movs	r0, #0
 8001c22:	f009 f8a7 	bl	800ad74 <BSP_PB_GetState>
      magic_menu = 1;
 8001c26:	2800      	cmp	r0, #0
 8001c28:	bf18      	it	ne
 8001c2a:	2501      	movne	r5, #1
  for (int i = 0; i < 5; i++)
 8001c2c:	3c01      	subs	r4, #1
 8001c2e:	d1f3      	bne.n	8001c18 <DISPLAY_WelcomeScreen+0x114>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8001c30:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001c34:	f01b fc60 	bl	801d4f8 <UTIL_LCD_Clear>
}
 8001c38:	4628      	mov	r0, r5
 8001c3a:	b009      	add	sp, #36	; 0x24
 8001c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	081d80c0 	.word	0x081d80c0
 8001c44:	081e0308 	.word	0x081e0308
 8001c48:	08100020 	.word	0x08100020
 8001c4c:	08100038 	.word	0x08100038
 8001c50:	08100040 	.word	0x08100040
 8001c54:	0810005c 	.word	0x0810005c
 8001c58:	08100070 	.word	0x08100070
 8001c5c:	08100088 	.word	0x08100088
 8001c60:	08100098 	.word	0x08100098
 8001c64:	081000b8 	.word	0x081000b8
 8001c68:	00177000 	.word	0x00177000

08001c6c <DISPLAY_FoodLogo>:
{
 8001c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 * @param red_blue_swap boolean flag for red-blue channel swap, 0 is no swap, 1 is swap
 */
void DISPLAY_Copy2LCDWriteBuffer(DisplayContext_TypeDef* Display_Context_Ptr, uint32_t *pSrc, uint16_t x, uint16_t y, uint16_t xsize, uint16_t ysize,
                              uint32_t input_color_format, int red_blue_swap)
{
  UTILS_Dma2d_Memcpy((uint32_t *)pSrc, (uint32_t *)Display_Context_Ptr->lcd_frame_write_buff, x, y, xsize, ysize, LCD_RES_WIDTH,
 8001c6e:	6847      	ldr	r7, [r0, #4]
{
 8001c70:	b089      	sub	sp, #36	; 0x24
  UTILS_Dma2d_Memcpy((uint32_t *)pSrc, (uint32_t *)Display_Context_Ptr->lcd_frame_write_buff, x, y, xsize, ysize, LCD_RES_WIDTH,
 8001c72:	2401      	movs	r4, #1
  DISPLAY_Copy2LCDWriteBuffer(Display_Context_Ptr, (uint32_t *)(Logos_128x128_raw[index]), x,
 8001c74:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 8001c78:	480a      	ldr	r0, [pc, #40]	; (8001ca4 <DISPLAY_FoodLogo+0x38>)
  UTILS_Dma2d_Memcpy((uint32_t *)pSrc, (uint32_t *)Display_Context_Ptr->lcd_frame_write_buff, x, y, xsize, ysize, LCD_RES_WIDTH,
 8001c7a:	2600      	movs	r6, #0
 8001c7c:	9406      	str	r4, [sp, #24]
 8001c7e:	b293      	uxth	r3, r2
 8001c80:	eb00 3085 	add.w	r0, r0, r5, lsl #14
 8001c84:	9405      	str	r4, [sp, #20]
 8001c86:	9403      	str	r4, [sp, #12]
 8001c88:	f44f 7548 	mov.w	r5, #800	; 0x320
 8001c8c:	2480      	movs	r4, #128	; 0x80
 8001c8e:	b28a      	uxth	r2, r1
 8001c90:	4639      	mov	r1, r7
 8001c92:	9604      	str	r6, [sp, #16]
 8001c94:	9400      	str	r4, [sp, #0]
 8001c96:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8001c9a:	f003 f851 	bl	8004d40 <UTILS_Dma2d_Memcpy>
}
 8001c9e:	b009      	add	sp, #36	; 0x24
 8001ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	081000c0 	.word	0x081000c0

08001ca8 <DISPLAY_Refresh>:
{
 8001ca8:	b530      	push	{r4, r5, lr}
  Display_Context_Ptr->lcd_sync =0;
 8001caa:	2300      	movs	r3, #0
{
 8001cac:	b089      	sub	sp, #36	; 0x24
 8001cae:	4604      	mov	r4, r0
  Display_Context_Ptr->lcd_sync =0;
 8001cb0:	6083      	str	r3, [r0, #8]
  while(Display_Context_Ptr->lcd_sync==0);
 8001cb2:	68a3      	ldr	r3, [r4, #8]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d0fc      	beq.n	8001cb2 <DISPLAY_Refresh+0xa>
  UTILS_DCache_Coherency_Maintenance((void *)Display_Context_Ptr->lcd_frame_write_buff, LCD_FRAME_BUFFER_SIZE, CLEAN);
 8001cb8:	6860      	ldr	r0, [r4, #4]
 8001cba:	2202      	movs	r2, #2
 8001cbc:	490a      	ldr	r1, [pc, #40]	; (8001ce8 <DISPLAY_Refresh+0x40>)
  UTILS_Dma2d_Memcpy((uint32_t *)(Display_Context_Ptr->lcd_frame_write_buff), (uint32_t *)(Display_Context_Ptr->lcd_frame_read_buff), 0, 0, LCD_RES_WIDTH,
 8001cbe:	f44f 75f0 	mov.w	r5, #480	; 0x1e0
  UTILS_DCache_Coherency_Maintenance((void *)Display_Context_Ptr->lcd_frame_write_buff, LCD_FRAME_BUFFER_SIZE, CLEAN);
 8001cc2:	f003 f8f7 	bl	8004eb4 <UTILS_DCache_Coherency_Maintenance>
  UTILS_Dma2d_Memcpy((uint32_t *)(Display_Context_Ptr->lcd_frame_write_buff), (uint32_t *)(Display_Context_Ptr->lcd_frame_read_buff), 0, 0, LCD_RES_WIDTH,
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	e9d4 1000 	ldrd	r1, r0, [r4]
 8001ccc:	f44f 7448 	mov.w	r4, #800	; 0x320
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8001cd6:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001cda:	9402      	str	r4, [sp, #8]
 8001cdc:	e9cd 4500 	strd	r4, r5, [sp]
 8001ce0:	f003 f82e 	bl	8004d40 <UTILS_Dma2d_Memcpy>
}
 8001ce4:	b009      	add	sp, #36	; 0x24
 8001ce6:	bd30      	pop	{r4, r5, pc}
 8001ce8:	00177000 	.word	0x00177000

08001cec <DISPLAY_Copy2LCDWriteBuffer>:
{
 8001cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cee:	b089      	sub	sp, #36	; 0x24
 8001cf0:	460e      	mov	r6, r1
  UTILS_Dma2d_Memcpy((uint32_t *)pSrc, (uint32_t *)Display_Context_Ptr->lcd_frame_write_buff, x, y, xsize, ysize, LCD_RES_WIDTH,
 8001cf2:	6841      	ldr	r1, [r0, #4]
 8001cf4:	2701      	movs	r7, #1
{
 8001cf6:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
  UTILS_Dma2d_Memcpy((uint32_t *)pSrc, (uint32_t *)Display_Context_Ptr->lcd_frame_write_buff, x, y, xsize, ysize, LCD_RES_WIDTH,
 8001cfa:	4630      	mov	r0, r6
{
 8001cfc:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
  UTILS_Dma2d_Memcpy((uint32_t *)pSrc, (uint32_t *)Display_Context_Ptr->lcd_frame_write_buff, x, y, xsize, ysize, LCD_RES_WIDTH,
 8001d00:	2600      	movs	r6, #0
 8001d02:	9705      	str	r7, [sp, #20]
 8001d04:	9604      	str	r6, [sp, #16]
 8001d06:	e9cd 5400 	strd	r5, r4, [sp]
{
 8001d0a:	9d10      	ldr	r5, [sp, #64]	; 0x40
  UTILS_Dma2d_Memcpy((uint32_t *)pSrc, (uint32_t *)Display_Context_Ptr->lcd_frame_write_buff, x, y, xsize, ysize, LCD_RES_WIDTH,
 8001d0c:	f44f 7448 	mov.w	r4, #800	; 0x320
 8001d10:	9503      	str	r5, [sp, #12]
{
 8001d12:	9d11      	ldr	r5, [sp, #68]	; 0x44
  UTILS_Dma2d_Memcpy((uint32_t *)pSrc, (uint32_t *)Display_Context_Ptr->lcd_frame_write_buff, x, y, xsize, ysize, LCD_RES_WIDTH,
 8001d14:	9402      	str	r4, [sp, #8]
 8001d16:	9506      	str	r5, [sp, #24]
 8001d18:	f003 f812 	bl	8004d40 <UTILS_Dma2d_Memcpy>
                input_color_format, DMA2D_OUTPUT_ARGB8888, 1, red_blue_swap);
}
 8001d1c:	b009      	add	sp, #36	; 0x24
 8001d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d20 <HAL_LTDC_ReloadEventCallback>:

}

void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
  Display_Context.lcd_sync=1;
 8001d20:	4b02      	ldr	r3, [pc, #8]	; (8001d2c <HAL_LTDC_ReloadEventCallback+0xc>)
 8001d22:	2201      	movs	r2, #1
  
  /*Set LTDCreload type to vertical blanking*/
  HAL_LTDC_Reload(hltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 8001d24:	2102      	movs	r1, #2
  Display_Context.lcd_sync=1;
 8001d26:	609a      	str	r2, [r3, #8]
  HAL_LTDC_Reload(hltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 8001d28:	f00f bb22 	b.w	8011370 <HAL_LTDC_Reload>
 8001d2c:	240098a8 	.word	0x240098a8

08001d30 <PREPROC_ImageResize>:
 * @param Preproc_Context_Ptr Pointer to PREPROC context
 */
void PREPROC_ImageResize(PreprocContext_TypeDef* Preproc_Context_Ptr)
{  
#if RESIZING_ALGO == RESIZING_NEAREST_NEIGHBOR
  ImageResize_NearestNeighbor(&Preproc_Context_Ptr->Resize_Src_Img, 
 8001d30:	f100 020c 	add.w	r2, r0, #12
 8001d34:	f100 014c 	add.w	r1, r0, #76	; 0x4c
 8001d38:	303c      	adds	r0, #60	; 0x3c
 8001d3a:	f01b bb79 	b.w	801d430 <ImageResize_NearestNeighbor>
 8001d3e:	bf00      	nop

08001d40 <PREPROC_PixelFormatConversion>:
 * @param Preproc_Context_Ptr Pointer to PREPROC context
 */
void PREPROC_PixelFormatConversion(PreprocContext_TypeDef* Preproc_Context_Ptr)
{
#if PIXEL_FMT_CONV == HW_PFC
  if(Preproc_Context_Ptr->Pfc_Src_Img.format==PXFMT_RGB565 && 
 8001d40:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
 8001d44:	2901      	cmp	r1, #1
 8001d46:	d000      	beq.n	8001d4a <PREPROC_PixelFormatConversion+0xa>
 8001d48:	e7fe      	b.n	8001d48 <PREPROC_PixelFormatConversion+0x8>
{
 8001d4a:	b570      	push	{r4, r5, r6, lr}
  if(Preproc_Context_Ptr->Pfc_Src_Img.format==PXFMT_RGB565 && 
 8001d4c:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
{
 8001d50:	b088      	sub	sp, #32
  if(Preproc_Context_Ptr->Pfc_Src_Img.format==PXFMT_RGB565 && 
 8001d52:	2c02      	cmp	r4, #2
 8001d54:	d000      	beq.n	8001d58 <PREPROC_PixelFormatConversion+0x18>
 8001d56:	e7fe      	b.n	8001d56 <PREPROC_PixelFormatConversion+0x16>
     Preproc_Context_Ptr->Pfc_Dst_Img.format==PXFMT_RGB888)
  {
    /*DMA2D transfer w/ PFC*/
    UTILS_Dma2d_Memcpy((uint32_t *)(Preproc_Context_Ptr->Pfc_Src_Img.pData), 
 8001d58:	6886      	ldr	r6, [r0, #8]
 8001d5a:	8843      	ldrh	r3, [r0, #2]
 8001d5c:	8802      	ldrh	r2, [r0, #0]
 8001d5e:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8001d62:	6845      	ldr	r5, [r0, #4]
 8001d64:	9403      	str	r4, [sp, #12]
 8001d66:	8c04      	ldrh	r4, [r0, #32]
 8001d68:	9606      	str	r6, [sp, #24]
 8001d6a:	8b81      	ldrh	r1, [r0, #28]
 8001d6c:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8001d70:	9100      	str	r1, [sp, #0]
 8001d72:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8001d74:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001d76:	f002 ffe3 	bl	8004d40 <UTILS_Dma2d_Memcpy>
    while(1);
  }
#else
 #error PFC method not valid!
#endif
}
 8001d7a:	b008      	add	sp, #32
 8001d7c:	bd70      	pop	{r4, r5, r6, pc}
 8001d7e:	bf00      	nop

08001d80 <PREPROC_Pixel_RB_Swap>:
  uint8_t tmp_r;
  
  struct rgb_Src *pivot = (struct rgb_Src *) pSrc;
  struct rgb_Dst *dest = (struct rgb_Dst *) pDst;
  
  for (int i = pixels-1; i >= 0; i--)
 8001d80:	1e53      	subs	r3, r2, #1
 8001d82:	d414      	bmi.n	8001dae <PREPROC_Pixel_RB_Swap+0x2e>
 8001d84:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001d88:	4410      	add	r0, r2
 8001d8a:	4411      	add	r1, r2
{
 8001d8c:	b410      	push	{r4}
  {
    tmp_r=pivot[i].r;
    
    dest[i].r = pivot[i].b;
 8001d8e:	f810 2c01 	ldrb.w	r2, [r0, #-1]
  for (int i = pixels-1; i >= 0; i--)
 8001d92:	3b01      	subs	r3, #1
    tmp_r=pivot[i].r;
 8001d94:	f810 4c03 	ldrb.w	r4, [r0, #-3]
 8001d98:	3903      	subs	r1, #3
    dest[i].r = pivot[i].b;
 8001d9a:	700a      	strb	r2, [r1, #0]
 8001d9c:	3803      	subs	r0, #3
    dest[i].b = tmp_r;
 8001d9e:	708c      	strb	r4, [r1, #2]
    dest[i].g = pivot[i].g;
 8001da0:	7842      	ldrb	r2, [r0, #1]
 8001da2:	704a      	strb	r2, [r1, #1]
  for (int i = pixels-1; i >= 0; i--)
 8001da4:	1c5a      	adds	r2, r3, #1
 8001da6:	d1f2      	bne.n	8001d8e <PREPROC_Pixel_RB_Swap+0xe>
  }
}
 8001da8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	4770      	bx	lr

08001db0 <UartCmd_Run_NonRegression>:

/* Private function prototypes -----------------------------------------------*/

#ifndef OBJECTDETECT
static void UartCmd_Run_NonRegression(TestContext_TypeDef *Test_Context_Ptr, uint8_t* data_buffer, uint16_t data_size)
{
 8001db0:	b430      	push	{r4, r5}
  *Number of consecutive full run (-1) to execute (4 bytes): 0x00000000 <=> one run, 0xFFFFFFFE <=> 2^32 runs and 0xFFFFFFFF <=> infinite runs (= debug mode)
  ************************************************************************************************************************************************************/

  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;

  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8001db2:	2301      	movs	r3, #1
  Test_Context_Ptr->UartContext.uart_host_requested_mode=DUMP;
 8001db4:	2403      	movs	r4, #3
  App_Cxt_Ptr->run_loop = 0;
 8001db6:	2500      	movs	r5, #0
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 8001db8:	f8d0 263c 	ldr.w	r2, [r0, #1596]	; 0x63c
  Test_Context_Ptr->UartContext.uart_host_requested_mode=DUMP;
 8001dbc:	f880 4564 	strb.w	r4, [r0, #1380]	; 0x564

  Test_Context_Ptr->UartContext.uart_host_requested_dump_submode=CAMERA_COLORBAR;
 8001dc0:	2402      	movs	r4, #2
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8001dc2:	f8c0 3560 	str.w	r3, [r0, #1376]	; 0x560
  App_Cxt_Ptr->run_loop = 0;
 8001dc6:	6055      	str	r5, [r2, #4]
  Test_Context_Ptr->UartContext.uart_host_requested_dump_memory=SDRAM;

  Test_Context_Ptr->DumpContext.dump_write_bufferPtr=dump_intermediate_data_ping_buff;
 8001dc8:	4a06      	ldr	r2, [pc, #24]	; (8001de4 <UartCmd_Run_NonRegression+0x34>)

  Test_Context_Ptr->UartContext.uart_host_requested_dump_number=*(uint32_t*)(data_buffer);
 8001dca:	6809      	ldr	r1, [r1, #0]
  Test_Context_Ptr->UartContext.uart_host_requested_dump_submode=CAMERA_COLORBAR;
 8001dcc:	f880 4565 	strb.w	r4, [r0, #1381]	; 0x565
  Test_Context_Ptr->UartContext.uart_host_requested_dump_memory=SDRAM;
 8001dd0:	f880 3566 	strb.w	r3, [r0, #1382]	; 0x566
  Test_Context_Ptr->UartContext.uart_host_requested_dump_number=*(uint32_t*)(data_buffer);
 8001dd4:	f8c0 1568 	str.w	r1, [r0, #1384]	; 0x568

  Test_Context_Ptr->UartContext.uart_host_nonreg_run=1;
 8001dd8:	f8c0 3578 	str.w	r3, [r0, #1400]	; 0x578
  Test_Context_Ptr->DumpContext.dump_write_bufferPtr=dump_intermediate_data_ping_buff;
 8001ddc:	6002      	str	r2, [r0, #0]
}
 8001dde:	bc30      	pop	{r4, r5}
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	d0cde780 	.word	0xd0cde780

08001de8 <UartCmd_Run_Validation>:

static void UartCmd_Run_Validation(TestContext_TypeDef *Test_Context_Ptr, uint8_t* data_buffer, uint16_t data_size)
{
 8001de8:	b430      	push	{r4, r5}

  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;

  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
  Test_Context_Ptr->UartContext.uart_host_requested_mode=VALID;
  Test_Context_Ptr->ValidationContext.validation_write_bufferPtr=(uint8_t*)validation_output_buff;
 8001dea:	4907      	ldr	r1, [pc, #28]	; (8001e08 <UartCmd_Run_Validation+0x20>)
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8001dec:	2501      	movs	r5, #1
  Test_Context_Ptr->UartContext.uart_host_requested_mode=VALID;
 8001dee:	2402      	movs	r4, #2
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 8001df0:	f8d0 363c 	ldr.w	r3, [r0, #1596]	; 0x63c
  App_Cxt_Ptr->run_loop = 0;
 8001df4:	2200      	movs	r2, #0
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8001df6:	f8c0 5560 	str.w	r5, [r0, #1376]	; 0x560
  Test_Context_Ptr->UartContext.uart_host_requested_mode=VALID;
 8001dfa:	f880 4564 	strb.w	r4, [r0, #1380]	; 0x564
  Test_Context_Ptr->ValidationContext.validation_write_bufferPtr=(uint8_t*)validation_output_buff;
 8001dfe:	f8c0 1558 	str.w	r1, [r0, #1368]	; 0x558
  App_Cxt_Ptr->run_loop = 0;
 8001e02:	605a      	str	r2, [r3, #4]
}
 8001e04:	bc30      	pop	{r4, r5}
 8001e06:	4770      	bx	lr
 8001e08:	d0cdaf00 	.word	0xd0cdaf00

08001e0c <UartCmd_Launch_Dump>:
  Uart_Rx(Test_Context_Ptr, aRxBuffer, RX_TRANSFER_SIZE);
}


static void UartCmd_Launch_Dump(TestContext_TypeDef *Test_Context_Ptr, uint8_t* data_buffer, uint16_t data_size)
{
 8001e0c:	b430      	push	{r4, r5}
  *This command has two parameters:
  *Dump sub-mode (1 byte): CAMERA_LIVE= 0x01, CAMERA_COLORBAR= 0x02, SDCARD_FILE= 0x03
  *Dump memory location (1 byte): SDCARD (0x00) or SDRAM (0x01)
  ***********************************************************************************/

  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 8001e0e:	f8d0 363c 	ldr.w	r3, [r0, #1596]	; 0x63c

  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8001e12:	2501      	movs	r5, #1
  Test_Context_Ptr->UartContext.uart_host_requested_mode=DUMP;
 8001e14:	2403      	movs	r4, #3
  App_Cxt_Ptr->run_loop = 0;
 8001e16:	2200      	movs	r2, #0
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8001e18:	f8c0 5560 	str.w	r5, [r0, #1376]	; 0x560
  Test_Context_Ptr->UartContext.uart_host_requested_mode=DUMP;
 8001e1c:	f880 4564 	strb.w	r4, [r0, #1380]	; 0x564
  App_Cxt_Ptr->run_loop = 0;
 8001e20:	605a      	str	r2, [r3, #4]

  Test_Context_Ptr->UartContext.uart_host_requested_dump_submode=(MemDumpFrameSource_TypeDef)(*(uint8_t*)(data_buffer));
 8001e22:	780b      	ldrb	r3, [r1, #0]
 8001e24:	f880 3565 	strb.w	r3, [r0, #1381]	; 0x565
  Test_Context_Ptr->UartContext.uart_host_requested_dump_memory=(MemDumpMemoryLocation_TypeDef)(*(uint8_t*)(data_buffer+1));
 8001e28:	784b      	ldrb	r3, [r1, #1]

  if(Test_Context_Ptr->UartContext.uart_host_requested_dump_memory == SDRAM)
 8001e2a:	42ab      	cmp	r3, r5
  Test_Context_Ptr->UartContext.uart_host_requested_dump_memory=(MemDumpMemoryLocation_TypeDef)(*(uint8_t*)(data_buffer+1));
 8001e2c:	f880 3566 	strb.w	r3, [r0, #1382]	; 0x566
  if(Test_Context_Ptr->UartContext.uart_host_requested_dump_memory == SDRAM)
 8001e30:	d101      	bne.n	8001e36 <UartCmd_Launch_Dump+0x2a>
    Test_Context_Ptr->DumpContext.dump_write_bufferPtr=dump_intermediate_data_ping_buff;
 8001e32:	4b02      	ldr	r3, [pc, #8]	; (8001e3c <UartCmd_Launch_Dump+0x30>)
 8001e34:	6003      	str	r3, [r0, #0]
}
 8001e36:	bc30      	pop	{r4, r5}
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	d0cde780 	.word	0xd0cde780

08001e40 <UartCmd_Launch_Capture>:
    Uart_Rx(Test_Context_Ptr, aRxBuffer, RX_TRANSFER_SIZE);
  }
}

static void UartCmd_Launch_Capture(TestContext_TypeDef *Test_Context_Ptr, uint8_t* data_buffer, uint16_t data_size)
{
 8001e40:	b430      	push	{r4, r5}
  *Capure format (1 byte): possible values are RAW= 0x03, BMP= 0x04
  *Inter-capture delay (2 bytes): expressed in milliseconds, for 'automatic' capture mode. If equals zero=> 'manual' capture mode
  *Number of capture (2 bytes): applies for 'automatic' mode only
  *******************************************************************************************************************************/

  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 8001e42:	f8d0 363c 	ldr.w	r3, [r0, #1596]	; 0x63c

  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8001e46:	2501      	movs	r5, #1
  Test_Context_Ptr->UartContext.uart_host_requested_mode=CAPTURE;
 8001e48:	2404      	movs	r4, #4
  App_Cxt_Ptr->run_loop = 0;
 8001e4a:	2200      	movs	r2, #0
  Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8001e4c:	f8c0 5560 	str.w	r5, [r0, #1376]	; 0x560
  Test_Context_Ptr->UartContext.uart_host_requested_mode=CAPTURE;
 8001e50:	f880 4564 	strb.w	r4, [r0, #1380]	; 0x564

  Test_Context_Ptr->UartContext.uart_host_requested_capture_format=(DataFormat_TypeDef)(*(uint8_t*)(data_buffer));
  Test_Context_Ptr->UartContext.uart_host_requested_capture_delay=*(uint16_t*)(data_buffer+1);
 8001e54:	f8b1 4001 	ldrh.w	r4, [r1, #1]
  App_Cxt_Ptr->run_loop = 0;
 8001e58:	605a      	str	r2, [r3, #4]
  Test_Context_Ptr->UartContext.uart_host_requested_capture_number=*(uint16_t*)(data_buffer+3);
 8001e5a:	f8b1 3003 	ldrh.w	r3, [r1, #3]
  Test_Context_Ptr->UartContext.uart_host_requested_capture_format=(DataFormat_TypeDef)(*(uint8_t*)(data_buffer));
 8001e5e:	780a      	ldrb	r2, [r1, #0]
  Test_Context_Ptr->UartContext.uart_host_requested_capture_delay=*(uint16_t*)(data_buffer+1);
 8001e60:	f8c0 4570 	str.w	r4, [r0, #1392]	; 0x570
  Test_Context_Ptr->UartContext.uart_host_requested_capture_format=(DataFormat_TypeDef)(*(uint8_t*)(data_buffer));
 8001e64:	f880 256c 	strb.w	r2, [r0, #1388]	; 0x56c
  Test_Context_Ptr->UartContext.uart_host_requested_capture_number=*(uint16_t*)(data_buffer+3);
 8001e68:	f8c0 3574 	str.w	r3, [r0, #1396]	; 0x574
  else
  {
    /*Automatic mode => Program TIM for periodic capture*/
    ;
  }
}
 8001e6c:	bc30      	pop	{r4, r5}
 8001e6e:	4770      	bx	lr

08001e70 <Uart_Tx>:
 * @param TxDataTransferSize Data size in bytes of the TX transfer
 */
static void Uart_Tx(TestContext_TypeDef *Test_Context_Ptr, uint8_t *TxDataBufPtr, uint32_t TxDataBufSize, uint32_t TxDataTransferSize)
{
  /*Check that TxDataTransferSize is lower or equal to TxDataBufSize*/
  if(TxDataTransferSize > TxDataBufSize)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d900      	bls.n	8001e76 <Uart_Tx+0x6>
 8001e74:	e7fe      	b.n	8001e74 <Uart_Tx+0x4>
{
 8001e76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e7a:	460c      	mov	r4, r1
 8001e7c:	4607      	mov	r7, r0
 8001e7e:	4611      	mov	r1, r2
    while(1);

  /*Perform D-Cache clean before DMA transfer*/
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8001e80:	2202      	movs	r2, #2
 8001e82:	4620      	mov	r0, r4
 8001e84:	461d      	mov	r5, r3
 8001e86:	f003 f815 	bl	8004eb4 <UTILS_DCache_Coherency_Maintenance>

  if(TxDataTransferSize<0xFFFF)
 8001e8a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8001e8e:	f207 577c 	addw	r7, r7, #1404	; 0x57c
 8001e92:	429d      	cmp	r5, r3
 8001e94:	d920      	bls.n	8001ed8 <Uart_Tx+0x68>
  else
  {
    uint32_t dma_xfer_num;
    uint32_t i;

    dma_xfer_num=TxDataTransferSize/0xFFFF;
 8001e96:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8001e9a:	fbb5 f3f6 	udiv	r3, r5, r6
 8001e9e:	ebc3 4303 	rsb	r3, r3, r3, lsl #16
 8001ea2:	eb04 0803 	add.w	r8, r4, r3

    for(i=0;i<dma_xfer_num;i++)
    {
      /* Start transmission data */
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8001ea6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eaa:	4621      	mov	r1, r4
 8001eac:	4638      	mov	r0, r7
 8001eae:	f013 fdaf 	bl	8015a10 <HAL_UART_Transmit_DMA>
 8001eb2:	b108      	cbz	r0, 8001eb8 <Uart_Tx+0x48>
      {
        /* Transfer error in transmission process */
        Error_Handler();
 8001eb4:	f003 f86a 	bl	8004f8c <Error_Handler>
      }
      /*######## Wait for the end of the transfer ######*/
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8001eb8:	4638      	mov	r0, r7
 8001eba:	f013 ffef 	bl	8015e9c <HAL_UART_GetState>
 8001ebe:	2820      	cmp	r0, #32
 8001ec0:	d1fa      	bne.n	8001eb8 <Uart_Tx+0x48>
 8001ec2:	4434      	add	r4, r6
    for(i=0;i<dma_xfer_num;i++)
 8001ec4:	4544      	cmp	r4, r8
 8001ec6:	d1ee      	bne.n	8001ea6 <Uart_Tx+0x36>
    }

    if((TxDataTransferSize%0xFFFF)!=0)
 8001ec8:	fbb5 f6f6 	udiv	r6, r5, r6
 8001ecc:	ebc6 4606 	rsb	r6, r6, r6, lsl #16
 8001ed0:	1baa      	subs	r2, r5, r6
 8001ed2:	d10f      	bne.n	8001ef4 <Uart_Tx+0x84>
      }
      /*######## Wait for the end of the transfer ######*/
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
    }
  }
}
 8001ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8001ed8:	b2aa      	uxth	r2, r5
 8001eda:	4621      	mov	r1, r4
 8001edc:	4638      	mov	r0, r7
 8001ede:	f013 fd97 	bl	8015a10 <HAL_UART_Transmit_DMA>
 8001ee2:	b108      	cbz	r0, 8001ee8 <Uart_Tx+0x78>
      Error_Handler();
 8001ee4:	f003 f852 	bl	8004f8c <Error_Handler>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8001ee8:	4638      	mov	r0, r7
 8001eea:	f013 ffd7 	bl	8015e9c <HAL_UART_GetState>
 8001eee:	2820      	cmp	r0, #32
 8001ef0:	d1fa      	bne.n	8001ee8 <Uart_Tx+0x78>
 8001ef2:	e7ef      	b.n	8001ed4 <Uart_Tx+0x64>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), TxDataTransferSize%0xFFFF)!= HAL_OK)
 8001ef4:	b292      	uxth	r2, r2
 8001ef6:	4621      	mov	r1, r4
 8001ef8:	4638      	mov	r0, r7
 8001efa:	f013 fd89 	bl	8015a10 <HAL_UART_Transmit_DMA>
 8001efe:	b108      	cbz	r0, 8001f04 <Uart_Tx+0x94>
        Error_Handler();
 8001f00:	f003 f844 	bl	8004f8c <Error_Handler>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8001f04:	4638      	mov	r0, r7
 8001f06:	f013 ffc9 	bl	8015e9c <HAL_UART_GetState>
 8001f0a:	2820      	cmp	r0, #32
 8001f0c:	d1fa      	bne.n	8001f04 <Uart_Tx+0x94>
 8001f0e:	e7e1      	b.n	8001ed4 <Uart_Tx+0x64>

08001f10 <UartCmd_Write_Camera_Register>:
{
 8001f10:	b570      	push	{r4, r5, r6, lr}
  OV9655_Object_t *pObj=Camera_CompObj;
 8001f12:	4e0e      	ldr	r6, [pc, #56]	; (8001f4c <UartCmd_Write_Camera_Register+0x3c>)
{
 8001f14:	b082      	sub	sp, #8
  uint8_t tmp=*(data_buffer+1);
 8001f16:	784d      	ldrb	r5, [r1, #1]
{
 8001f18:	4604      	mov	r4, r0
  uint8_t tmp=*(data_buffer+1);
 8001f1a:	aa02      	add	r2, sp, #8
  OV9655_Object_t *pObj=Camera_CompObj;
 8001f1c:	6830      	ldr	r0, [r6, #0]
  ov9655_write_reg(&pObj->Ctx, *(data_buffer), &tmp, 1);
 8001f1e:	7809      	ldrb	r1, [r1, #0]
 8001f20:	2301      	movs	r3, #1
  uint8_t tmp=*(data_buffer+1);
 8001f22:	f802 5d01 	strb.w	r5, [r2, #-1]!
  ov9655_write_reg(&pObj->Ctx, *(data_buffer), &tmp, 1);
 8001f26:	3018      	adds	r0, #24
 8001f28:	f007 fc3c 	bl	80097a4 <ov9655_write_reg>
  HAL_Delay(300);
 8001f2c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001f30:	f00b fd1c 	bl	800d96c <HAL_Delay>
 * @param RxDataSize Data size in bytes expected to RX
 */
static void Uart_Rx(TestContext_TypeDef *Test_Context_Ptr, uint8_t *RxDataBufPtr, uint32_t RxDataSize)
{
  /**Configure the UART in reception mode for receiving subsequent command from Host**/
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8001f34:	f204 507c 	addw	r0, r4, #1404	; 0x57c
 8001f38:	220a      	movs	r2, #10
 8001f3a:	4905      	ldr	r1, [pc, #20]	; (8001f50 <UartCmd_Write_Camera_Register+0x40>)
 8001f3c:	f013 fdbe 	bl	8015abc <HAL_UART_Receive_DMA>
 8001f40:	b108      	cbz	r0, 8001f46 <UartCmd_Write_Camera_Register+0x36>
  {
    /* Transfer error in reception process */
    Error_Handler();
 8001f42:	f003 f823 	bl	8004f8c <Error_Handler>
}
 8001f46:	b002      	add	sp, #8
 8001f48:	bd70      	pop	{r4, r5, r6, pc}
 8001f4a:	bf00      	nop
 8001f4c:	24009194 	.word	0x24009194
 8001f50:	24007600 	.word	0x24007600

08001f54 <UartCmd_Set_Camera_Mode>:
{
 8001f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  OV9655_Object_t *pObj=Camera_CompObj;
 8001f58:	4b23      	ldr	r3, [pc, #140]	; (8001fe8 <UartCmd_Set_Camera_Mode+0x94>)
{
 8001f5a:	b082      	sub	sp, #8
  if(*(data_buffer) == 0x00)
 8001f5c:	780c      	ldrb	r4, [r1, #0]
{
 8001f5e:	460d      	mov	r5, r1
 8001f60:	4607      	mov	r7, r0
  OV9655_Object_t *pObj=Camera_CompObj;
 8001f62:	681e      	ldr	r6, [r3, #0]
  if(*(data_buffer) == 0x00)
 8001f64:	b17c      	cbz	r4, 8001f86 <UartCmd_Set_Camera_Mode+0x32>
  else if(*(data_buffer) == 0x01)
 8001f66:	2c01      	cmp	r4, #1
 8001f68:	d02d      	beq.n	8001fc6 <UartCmd_Set_Camera_Mode+0x72>
  if(*(data_buffer) == 0x02)
 8001f6a:	2c02      	cmp	r4, #2
 8001f6c:	d027      	beq.n	8001fbe <UartCmd_Set_Camera_Mode+0x6a>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8001f6e:	f207 507c 	addw	r0, r7, #1404	; 0x57c
 8001f72:	220a      	movs	r2, #10
 8001f74:	491d      	ldr	r1, [pc, #116]	; (8001fec <UartCmd_Set_Camera_Mode+0x98>)
 8001f76:	f013 fda1 	bl	8015abc <HAL_UART_Receive_DMA>
 8001f7a:	b108      	cbz	r0, 8001f80 <UartCmd_Set_Camera_Mode+0x2c>
    Error_Handler();
 8001f7c:	f003 f806 	bl	8004f8c <Error_Handler>
}
 8001f80:	b002      	add	sp, #8
 8001f82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmp=0x00;
 8001f86:	f10d 0808 	add.w	r8, sp, #8
    ov9655_write_reg(&pObj->Ctx, /*0x8D*/OV9655_COMMON_CTRL20, &tmp, 1);
 8001f8a:	3618      	adds	r6, #24
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	218d      	movs	r1, #141	; 0x8d
    tmp=0x00;
 8001f90:	f808 4d01 	strb.w	r4, [r8, #-1]!
    ov9655_write_reg(&pObj->Ctx, /*0x8D*/OV9655_COMMON_CTRL20, &tmp, 1);
 8001f94:	4630      	mov	r0, r6
 8001f96:	4642      	mov	r2, r8
 8001f98:	f007 fc04 	bl	80097a4 <ov9655_write_reg>
    HAL_Delay(300);
 8001f9c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001fa0:	f00b fce4 	bl	800d96c <HAL_Delay>
    ov9655_write_reg(&pObj->Ctx, /*0x0C*/OV9655_COMMON_CTRL3, &tmp, 1);
 8001fa4:	4642      	mov	r2, r8
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	210c      	movs	r1, #12
 8001faa:	4630      	mov	r0, r6
 8001fac:	f007 fbfa 	bl	80097a4 <ov9655_write_reg>
    HAL_Delay(300);
 8001fb0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001fb4:	f00b fcda 	bl	800d96c <HAL_Delay>
 8001fb8:	782c      	ldrb	r4, [r5, #0]
  if(*(data_buffer) == 0x02)
 8001fba:	2c02      	cmp	r4, #2
 8001fbc:	d1d7      	bne.n	8001f6e <UartCmd_Set_Camera_Mode+0x1a>
    CAMERA_Set_TestBar_Mode(NULL);
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	f7ff fccc 	bl	800195c <CAMERA_Set_TestBar_Mode>
 8001fc4:	e7d3      	b.n	8001f6e <UartCmd_Set_Camera_Mode+0x1a>
    tmp=0x10;
 8001fc6:	aa02      	add	r2, sp, #8
 8001fc8:	2110      	movs	r1, #16
    ov9655_write_reg(&pObj->Ctx, /*0x8D*/OV9655_COMMON_CTRL20, &tmp, 1);
 8001fca:	4623      	mov	r3, r4
 8001fcc:	f106 0018 	add.w	r0, r6, #24
    tmp=0x10;
 8001fd0:	f802 1d01 	strb.w	r1, [r2, #-1]!
    ov9655_write_reg(&pObj->Ctx, /*0x8D*/OV9655_COMMON_CTRL20, &tmp, 1);
 8001fd4:	218d      	movs	r1, #141	; 0x8d
 8001fd6:	f007 fbe5 	bl	80097a4 <ov9655_write_reg>
    HAL_Delay(300);
 8001fda:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001fde:	f00b fcc5 	bl	800d96c <HAL_Delay>
 8001fe2:	782c      	ldrb	r4, [r5, #0]
 8001fe4:	e7c1      	b.n	8001f6a <UartCmd_Set_Camera_Mode+0x16>
 8001fe6:	bf00      	nop
 8001fe8:	24009194 	.word	0x24009194
 8001fec:	24007600 	.word	0x24007600

08001ff0 <UartCmd_Read_Camera_Register>:
{
 8001ff0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ff4:	460e      	mov	r6, r1
  uint32_t Num_reg_to_read=(*(data_buffer+1) - *data_buffer)+1;
 8001ff6:	7809      	ldrb	r1, [r1, #0]
{
 8001ff8:	b083      	sub	sp, #12
 8001ffa:	4681      	mov	r9, r0
  uint32_t Num_reg_to_read=(*(data_buffer+1) - *data_buffer)+1;
 8001ffc:	7875      	ldrb	r5, [r6, #1]
 8001ffe:	1a6d      	subs	r5, r5, r1
  for(uint8_t i=0; i<Num_reg_to_read;i++)
 8002000:	3501      	adds	r5, #1
 8002002:	d014      	beq.n	800202e <UartCmd_Read_Camera_Register+0x3e>
 8002004:	2400      	movs	r4, #0
 8002006:	f8df 8054 	ldr.w	r8, [pc, #84]	; 800205c <UartCmd_Read_Camera_Register+0x6c>
 800200a:	4f12      	ldr	r7, [pc, #72]	; (8002054 <UartCmd_Read_Camera_Register+0x64>)
 800200c:	e000      	b.n	8002010 <UartCmd_Read_Camera_Register+0x20>
 800200e:	5d31      	ldrb	r1, [r6, r4]
    ov9655_read_reg(&pObj->Ctx, *(data_buffer+i), &tmp, 1);
 8002010:	f8d8 0000 	ldr.w	r0, [r8]
 8002014:	2301      	movs	r3, #1
 8002016:	f10d 0207 	add.w	r2, sp, #7
 800201a:	3018      	adds	r0, #24
 800201c:	f007 fbba 	bl	8009794 <ov9655_read_reg>
    Cam_Reg_Table[i]=tmp;
 8002020:	f89d 2007 	ldrb.w	r2, [sp, #7]
  for(uint8_t i=0; i<Num_reg_to_read;i++)
 8002024:	1c63      	adds	r3, r4, #1
    Cam_Reg_Table[i]=tmp;
 8002026:	553a      	strb	r2, [r7, r4]
  for(uint8_t i=0; i<Num_reg_to_read;i++)
 8002028:	b2dc      	uxtb	r4, r3
 800202a:	42ac      	cmp	r4, r5
 800202c:	d3ef      	bcc.n	800200e <UartCmd_Read_Camera_Register+0x1e>
  Uart_Tx(Test_Context_Ptr, (uint8_t*)Cam_Reg_Table, sizeof(Cam_Reg_Table), Num_reg_to_read);
 800202e:	22e0      	movs	r2, #224	; 0xe0
 8002030:	4908      	ldr	r1, [pc, #32]	; (8002054 <UartCmd_Read_Camera_Register+0x64>)
 8002032:	4648      	mov	r0, r9
 8002034:	462b      	mov	r3, r5
 8002036:	f7ff ff1b 	bl	8001e70 <Uart_Tx>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 800203a:	f209 507c 	addw	r0, r9, #1404	; 0x57c
 800203e:	220a      	movs	r2, #10
 8002040:	4905      	ldr	r1, [pc, #20]	; (8002058 <UartCmd_Read_Camera_Register+0x68>)
 8002042:	f013 fd3b 	bl	8015abc <HAL_UART_Receive_DMA>
 8002046:	b108      	cbz	r0, 800204c <UartCmd_Read_Camera_Register+0x5c>
    Error_Handler();
 8002048:	f002 ffa0 	bl	8004f8c <Error_Handler>
}
 800204c:	b003      	add	sp, #12
 800204e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002052:	bf00      	nop
 8002054:	24009920 	.word	0x24009920
 8002058:	24007600 	.word	0x24007600
 800205c:	24009194 	.word	0x24009194

08002060 <FrameCaptureInit>:
{
 8002060:	b570      	push	{r4, r5, r6, lr}
  UTIL_LCD_DrawRect(200, 10, 400, 50, UTIL_LCD_COLOR_WHITE);
 8002062:	f04f 35ff 	mov.w	r5, #4294967295
{
 8002066:	b082      	sub	sp, #8
 8002068:	4604      	mov	r4, r0
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 800206a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 800206e:	f8d4 663c 	ldr.w	r6, [r4, #1596]	; 0x63c
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8002072:	f01b fa41 	bl	801d4f8 <UTIL_LCD_Clear>
  UTIL_LCD_DrawRect(200, 10, 400, 50, UTIL_LCD_COLOR_WHITE);
 8002076:	2332      	movs	r3, #50	; 0x32
 8002078:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800207c:	210a      	movs	r1, #10
 800207e:	20c8      	movs	r0, #200	; 0xc8
 8002080:	9500      	str	r5, [sp, #0]
 8002082:	f01b fbdf 	bl	801d844 <UTIL_LCD_DrawRect>
  UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"Capture file format", CENTER_MODE);
 8002086:	f01b fa2f 	bl	801d4e8 <UTIL_LCD_GetFont>
 800208a:	2301      	movs	r3, #1
 800208c:	88c1      	ldrh	r1, [r0, #6]
 800208e:	2000      	movs	r0, #0
 8002090:	4a68      	ldr	r2, [pc, #416]	; (8002234 <FrameCaptureInit+0x1d4>)
 8002092:	f01b faf7 	bl	801d684 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(5), (uint8_t *)"Press one of the key of the joystick", CENTER_MODE);
 8002096:	f01b fa27 	bl	801d4e8 <UTIL_LCD_GetFont>
 800209a:	88c1      	ldrh	r1, [r0, #6]
 800209c:	2301      	movs	r3, #1
 800209e:	4a66      	ldr	r2, [pc, #408]	; (8002238 <FrameCaptureInit+0x1d8>)
 80020a0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80020a4:	2000      	movs	r0, #0
 80020a6:	f01b faed 	bl	801d684 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(6), (uint8_t *)"to select the format of the captured files", CENTER_MODE);
 80020aa:	f01b fa1d 	bl	801d4e8 <UTIL_LCD_GetFont>
 80020ae:	88c1      	ldrh	r1, [r0, #6]
 80020b0:	2301      	movs	r3, #1
 80020b2:	4a62      	ldr	r2, [pc, #392]	; (800223c <FrameCaptureInit+0x1dc>)
 80020b4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80020b8:	2000      	movs	r0, #0
 80020ba:	4099      	lsls	r1, r3
 80020bc:	f01b fae2 	bl	801d684 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DrawLine(pt_center.x - pt_offset, pt_center.y, pt_center.x, pt_center.y - pt_offset, UTIL_LCD_COLOR_WHITE);
 80020c0:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80020c4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80020c8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80020cc:	4608      	mov	r0, r1
 80020ce:	9500      	str	r5, [sp, #0]
 80020d0:	f01b fb2a 	bl	801d728 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x, pt_center.y - pt_offset, pt_center.x + pt_offset, pt_center.y, UTIL_LCD_COLOR_WHITE);
 80020d4:	f44f 73af 	mov.w	r3, #350	; 0x15e
 80020d8:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 80020dc:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80020e0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80020e4:	9500      	str	r5, [sp, #0]
 80020e6:	f01b fb1f 	bl	801d728 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x + pt_offset, pt_center.y, pt_center.x, pt_center.y + pt_offset, UTIL_LCD_COLOR_WHITE);
 80020ea:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80020ee:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80020f2:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 80020f6:	461a      	mov	r2, r3
 80020f8:	9500      	str	r5, [sp, #0]
 80020fa:	f01b fb15 	bl	801d728 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x, pt_center.y + pt_offset, pt_center.x - pt_offset, pt_center.y, UTIL_LCD_COLOR_WHITE);
 80020fe:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8002102:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002106:	9500      	str	r5, [sp, #0]
 8002108:	461a      	mov	r2, r3
 800210a:	4608      	mov	r0, r1
 800210c:	f01b fb0c 	bl	801d728 <UTIL_LCD_DrawLine>
  UTIL_LCD_DisplayStringAt(0, pt_center.y - pt_offset - LINE(2), (uint8_t*)appli_names[0], CENTER_MODE);//UP
 8002110:	f01b f9ea 	bl	801d4e8 <UTIL_LCD_GetFont>
 8002114:	2301      	movs	r3, #1
 8002116:	88c1      	ldrh	r1, [r0, #6]
 8002118:	2000      	movs	r0, #0
 800211a:	4a49      	ldr	r2, [pc, #292]	; (8002240 <FrameCaptureInit+0x1e0>)
 800211c:	4099      	lsls	r1, r3
 800211e:	f5c1 7196 	rsb	r1, r1, #300	; 0x12c
 8002122:	f01b faaf 	bl	801d684 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, pt_center.y + pt_offset + LINE(1), (uint8_t*)appli_names[1], CENTER_MODE);//DOWN
 8002126:	f01b f9df 	bl	801d4e8 <UTIL_LCD_GetFont>
 800212a:	88c1      	ldrh	r1, [r0, #6]
 800212c:	2301      	movs	r3, #1
 800212e:	4a45      	ldr	r2, [pc, #276]	; (8002244 <FrameCaptureInit+0x1e4>)
 8002130:	f501 71c8 	add.w	r1, r1, #400	; 0x190
 8002134:	2000      	movs	r0, #0
 8002136:	f01b faa5 	bl	801d684 <UTIL_LCD_DisplayStringAt>
  DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 800213a:	6b70      	ldr	r0, [r6, #52]	; 0x34
 800213c:	f7ff fdb4 	bl	8001ca8 <DISPLAY_Refresh>
  if(Test_Context_Ptr->UartContext.uart_cmd_ongoing)
 8002140:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
 8002144:	2b00      	cmp	r3, #0
 8002146:	d040      	beq.n	80021ca <FrameCaptureInit+0x16a>
    switch (Test_Context_Ptr->UartContext.uart_host_requested_capture_format)
 8002148:	f894 356c 	ldrb.w	r3, [r4, #1388]	; 0x56c
 800214c:	2b03      	cmp	r3, #3
 800214e:	d001      	beq.n	8002154 <FrameCaptureInit+0xf4>
 8002150:	2b04      	cmp	r3, #4
 8002152:	d101      	bne.n	8002158 <FrameCaptureInit+0xf8>
      Test_Context_Ptr->CaptureContext.capture_file_format=BMP;
 8002154:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
    Test_Context_Ptr->UartContext.uart_cmd_ongoing = 0;
 8002158:	2300      	movs	r3, #0
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 800215a:	220a      	movs	r2, #10
 800215c:	493a      	ldr	r1, [pc, #232]	; (8002248 <FrameCaptureInit+0x1e8>)
 800215e:	f204 507c 	addw	r0, r4, #1404	; 0x57c
    Test_Context_Ptr->UartContext.uart_cmd_ongoing = 0;
 8002162:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002166:	f013 fca9 	bl	8015abc <HAL_UART_Receive_DMA>
 800216a:	2800      	cmp	r0, #0
 800216c:	d15e      	bne.n	800222c <FrameCaptureInit+0x1cc>
  Test_Context_Ptr->RngHandle.Instance = RNG;
 800216e:	4b37      	ldr	r3, [pc, #220]	; (800224c <FrameCaptureInit+0x1ec>)
  HAL_RNG_DeInit(&Test_Context_Ptr->RngHandle);
 8002170:	f504 65c5 	add.w	r5, r4, #1576	; 0x628
  Test_Context_Ptr->RngHandle.Instance = RNG;
 8002174:	f8c4 3628 	str.w	r3, [r4, #1576]	; 0x628
  HAL_RNG_DeInit(&Test_Context_Ptr->RngHandle);
 8002178:	4628      	mov	r0, r5
 800217a:	f011 ff69 	bl	8014050 <HAL_RNG_DeInit>
  HAL_RNG_Init(&Test_Context_Ptr->RngHandle);
 800217e:	4628      	mov	r0, r5
 8002180:	f011 ff2c 	bl	8013fdc <HAL_RNG_Init>
  HAL_RNG_GenerateRandomNumber(&Test_Context_Ptr->RngHandle, &Test_Context_Ptr->CaptureContext.capture_session_id);
 8002184:	4628      	mov	r0, r5
 8002186:	f104 01c4 	add.w	r1, r4, #196	; 0xc4
 800218a:	f011 ff7b 	bl	8014084 <HAL_RNG_GenerateRandomNumber>
  sprintf(Test_Context_Ptr->CaptureContext.capture_session_name, "Session %X", (unsigned int)Test_Context_Ptr->CaptureContext.capture_session_id);
 800218e:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8002192:	492f      	ldr	r1, [pc, #188]	; (8002250 <FrameCaptureInit+0x1f0>)
 8002194:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
 8002198:	f024 fcfa 	bl	8026b90 <siprintf>
  if (BSP_SD_Init(0) != BSP_ERROR_NONE)
 800219c:	2000      	movs	r0, #0
 800219e:	f00b fa9f 	bl	800d6e0 <BSP_SD_Init>
 80021a2:	4605      	mov	r5, r0
 80021a4:	b340      	cbz	r0, 80021f8 <FrameCaptureInit+0x198>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Error. SD Card not detected", CENTER_MODE);
 80021a6:	f01b f99f 	bl	801d4e8 <UTIL_LCD_GetFont>
 80021aa:	88c1      	ldrh	r1, [r0, #6]
 80021ac:	2301      	movs	r3, #1
 80021ae:	4a29      	ldr	r2, [pc, #164]	; (8002254 <FrameCaptureInit+0x1f4>)
 80021b0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80021b4:	2000      	movs	r0, #0
 80021b6:	4099      	lsls	r1, r3
 80021b8:	f01b fa64 	bl	801d684 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 80021bc:	6b70      	ldr	r0, [r6, #52]	; 0x34
 80021be:	f7ff fd73 	bl	8001ca8 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 80021c2:	2002      	movs	r0, #2
 80021c4:	f008 fd5c 	bl	800ac80 <BSP_LED_On>
 80021c8:	e7fe      	b.n	80021c8 <FrameCaptureInit+0x168>
    HAL_Delay(200);
 80021ca:	20c8      	movs	r0, #200	; 0xc8
 80021cc:	f00b fbce 	bl	800d96c <HAL_Delay>
      joy_state = (JOYPin_TypeDef) BSP_JOY_GetState(JOY1, 0);
 80021d0:	2100      	movs	r1, #0
 80021d2:	4608      	mov	r0, r1
 80021d4:	f008 fe68 	bl	800aea8 <BSP_JOY_GetState>
 80021d8:	b2c0      	uxtb	r0, r0
    while (joy_state == JOY_NONE || joy_state == JOY_RIGHT || joy_state == JOY_LEFT || joy_state == JOY_SEL)
 80021da:	f010 0ff7 	tst.w	r0, #247	; 0xf7
 80021de:	d0f7      	beq.n	80021d0 <FrameCaptureInit+0x170>
 80021e0:	2804      	cmp	r0, #4
 80021e2:	d0f5      	beq.n	80021d0 <FrameCaptureInit+0x170>
 80021e4:	2801      	cmp	r0, #1
 80021e6:	d0f3      	beq.n	80021d0 <FrameCaptureInit+0x170>
    switch (joy_state)
 80021e8:	2802      	cmp	r0, #2
 80021ea:	d01b      	beq.n	8002224 <FrameCaptureInit+0x1c4>
 80021ec:	2810      	cmp	r0, #16
 80021ee:	d1be      	bne.n	800216e <FrameCaptureInit+0x10e>
      Test_Context_Ptr->CaptureContext.capture_file_format=RAW;
 80021f0:	2303      	movs	r3, #3
 80021f2:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
      break;
 80021f6:	e7ba      	b.n	800216e <FrameCaptureInit+0x10e>
  sprintf(Test_Context_Ptr->CaptureContext.capture_folder_name, "/Camera_Capture/CAM_CAPTURE_SESS_%X", (unsigned int)Test_Context_Ptr->CaptureContext.capture_session_id);
 80021f8:	f104 06de 	add.w	r6, r4, #222	; 0xde
  STM32Fs_Init();
 80021fc:	f01a fb18 	bl	801c830 <STM32Fs_Init>
  STM32Fs_CreateDir("/Camera_Capture");
 8002200:	4815      	ldr	r0, [pc, #84]	; (8002258 <FrameCaptureInit+0x1f8>)
 8002202:	f01a fb75 	bl	801c8f0 <STM32Fs_CreateDir>
  sprintf(Test_Context_Ptr->CaptureContext.capture_folder_name, "/Camera_Capture/CAM_CAPTURE_SESS_%X", (unsigned int)Test_Context_Ptr->CaptureContext.capture_session_id);
 8002206:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800220a:	4914      	ldr	r1, [pc, #80]	; (800225c <FrameCaptureInit+0x1fc>)
 800220c:	4630      	mov	r0, r6
 800220e:	f024 fcbf 	bl	8026b90 <siprintf>
  STM32Fs_CreateDir(Test_Context_Ptr->CaptureContext.capture_folder_name);
 8002212:	4630      	mov	r0, r6
 8002214:	f01a fb6c 	bl	801c8f0 <STM32Fs_CreateDir>
  BSP_SD_DeInit(0);
 8002218:	4628      	mov	r0, r5
}
 800221a:	b002      	add	sp, #8
 800221c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  BSP_SD_DeInit(0);
 8002220:	f00b ba20 	b.w	800d664 <BSP_SD_DeInit>
      Test_Context_Ptr->CaptureContext.capture_file_format=BMP;
 8002224:	2304      	movs	r3, #4
 8002226:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
      break;
 800222a:	e7a0      	b.n	800216e <FrameCaptureInit+0x10e>
    Error_Handler();
 800222c:	f002 feae 	bl	8004f8c <Error_Handler>
 8002230:	e79d      	b.n	800216e <FrameCaptureInit+0x10e>
 8002232:	bf00      	nop
 8002234:	08028a90 	.word	0x08028a90
 8002238:	08028aa4 	.word	0x08028aa4
 800223c:	08028acc 	.word	0x08028acc
 8002240:	080291c0 	.word	0x080291c0
 8002244:	080291c4 	.word	0x080291c4
 8002248:	24007600 	.word	0x24007600
 800224c:	48021800 	.word	0x48021800
 8002250:	08028af8 	.word	0x08028af8
 8002254:	08028b04 	.word	0x08028b04
 8002258:	08028b20 	.word	0x08028b20
 800225c:	08028b30 	.word	0x08028b30

08002260 <MemoryDumpInit>:
{
 8002260:	b5f0      	push	{r4, r5, r6, r7, lr}
  char  dump_dir_path[64]=  "/dump_src_image_vga";
 8002262:	4ea3      	ldr	r6, [pc, #652]	; (80024f0 <MemoryDumpInit+0x290>)
{
 8002264:	b095      	sub	sp, #84	; 0x54
 8002266:	4604      	mov	r4, r0
  UTIL_LCD_DrawRect(200, 10, 400, 50, UTIL_LCD_COLOR_WHITE);
 8002268:	f04f 37ff 	mov.w	r7, #4294967295
  char  dump_dir_path[64]=  "/dump_src_image_vga";
 800226c:	ad04      	add	r5, sp, #16
 800226e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002270:	6836      	ldr	r6, [r6, #0]
 8002272:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002274:	222c      	movs	r2, #44	; 0x2c
 8002276:	2100      	movs	r1, #0
 8002278:	a809      	add	r0, sp, #36	; 0x24
 800227a:	602e      	str	r6, [r5, #0]
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 800227c:	f8d4 563c 	ldr.w	r5, [r4, #1596]	; 0x63c
  char  dump_dir_path[64]=  "/dump_src_image_vga";
 8002280:	f023 ff8b 	bl	802619a <memset>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8002284:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002288:	f01b f936 	bl	801d4f8 <UTIL_LCD_Clear>
  UTIL_LCD_DrawRect(200, 10, 400, 50, UTIL_LCD_COLOR_WHITE);
 800228c:	2332      	movs	r3, #50	; 0x32
 800228e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002292:	210a      	movs	r1, #10
 8002294:	20c8      	movs	r0, #200	; 0xc8
 8002296:	9700      	str	r7, [sp, #0]
 8002298:	f01b fad4 	bl	801d844 <UTIL_LCD_DrawRect>
  UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"Memory dump sub-mode", CENTER_MODE);
 800229c:	f01b f924 	bl	801d4e8 <UTIL_LCD_GetFont>
 80022a0:	2301      	movs	r3, #1
 80022a2:	88c1      	ldrh	r1, [r0, #6]
 80022a4:	2000      	movs	r0, #0
 80022a6:	4a93      	ldr	r2, [pc, #588]	; (80024f4 <MemoryDumpInit+0x294>)
 80022a8:	f01b f9ec 	bl	801d684 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(5), (uint8_t *)"Press one of the key of the joystick", CENTER_MODE);
 80022ac:	f01b f91c 	bl	801d4e8 <UTIL_LCD_GetFont>
 80022b0:	88c1      	ldrh	r1, [r0, #6]
 80022b2:	2301      	movs	r3, #1
 80022b4:	4a90      	ldr	r2, [pc, #576]	; (80024f8 <MemoryDumpInit+0x298>)
 80022b6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80022ba:	2000      	movs	r0, #0
 80022bc:	f01b f9e2 	bl	801d684 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(6), (uint8_t *)"to select the frame source", CENTER_MODE);
 80022c0:	f01b f912 	bl	801d4e8 <UTIL_LCD_GetFont>
 80022c4:	88c1      	ldrh	r1, [r0, #6]
 80022c6:	2301      	movs	r3, #1
 80022c8:	4a8c      	ldr	r2, [pc, #560]	; (80024fc <MemoryDumpInit+0x29c>)
 80022ca:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80022ce:	2000      	movs	r0, #0
 80022d0:	4099      	lsls	r1, r3
 80022d2:	f01b f9d7 	bl	801d684 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DrawLine(pt_center.x - pt_offset, pt_center.y, pt_center.x, pt_center.y - pt_offset, UTIL_LCD_COLOR_WHITE);
 80022d6:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80022da:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80022de:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80022e2:	4608      	mov	r0, r1
 80022e4:	9700      	str	r7, [sp, #0]
 80022e6:	f01b fa1f 	bl	801d728 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x, pt_center.y - pt_offset, pt_center.x + pt_offset, pt_center.y, UTIL_LCD_COLOR_WHITE);
 80022ea:	f44f 73af 	mov.w	r3, #350	; 0x15e
 80022ee:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 80022f2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80022f6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80022fa:	9700      	str	r7, [sp, #0]
 80022fc:	f01b fa14 	bl	801d728 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x + pt_offset, pt_center.y, pt_center.x, pt_center.y + pt_offset, UTIL_LCD_COLOR_WHITE);
 8002300:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002304:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8002308:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 800230c:	461a      	mov	r2, r3
 800230e:	9700      	str	r7, [sp, #0]
 8002310:	f01b fa0a 	bl	801d728 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x, pt_center.y + pt_offset, pt_center.x - pt_offset, pt_center.y, UTIL_LCD_COLOR_WHITE);
 8002314:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8002318:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800231c:	9700      	str	r7, [sp, #0]
 800231e:	461a      	mov	r2, r3
 8002320:	4608      	mov	r0, r1
 8002322:	f01b fa01 	bl	801d728 <UTIL_LCD_DrawLine>
  UTIL_LCD_DisplayStringAt(0, pt_center.y - pt_offset - LINE(2), (uint8_t*)appli_names[0], CENTER_MODE);//UP
 8002326:	f01b f8df 	bl	801d4e8 <UTIL_LCD_GetFont>
 800232a:	2301      	movs	r3, #1
 800232c:	88c1      	ldrh	r1, [r0, #6]
 800232e:	2000      	movs	r0, #0
 8002330:	4a73      	ldr	r2, [pc, #460]	; (8002500 <MemoryDumpInit+0x2a0>)
 8002332:	4099      	lsls	r1, r3
 8002334:	f5c1 7196 	rsb	r1, r1, #300	; 0x12c
 8002338:	f01b f9a4 	bl	801d684 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(pt_center.x + pt_offset + 10, pt_center.y - LINE(1) / 2, (uint8_t*)appli_names[1], LEFT_MODE);//RIGHT
 800233c:	f01b f8d4 	bl	801d4e8 <UTIL_LCD_GetFont>
 8002340:	88c1      	ldrh	r1, [r0, #6]
 8002342:	2303      	movs	r3, #3
 8002344:	4a6f      	ldr	r2, [pc, #444]	; (8002504 <MemoryDumpInit+0x2a4>)
 8002346:	1049      	asrs	r1, r1, #1
 8002348:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
 800234c:	f5c1 71af 	rsb	r1, r1, #350	; 0x15e
 8002350:	f01b f998 	bl	801d684 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(200, pt_center.y - LINE(1) / 2, (uint8_t*)appli_names[2], LEFT_MODE);//LEFT
 8002354:	f01b f8c8 	bl	801d4e8 <UTIL_LCD_GetFont>
 8002358:	88c1      	ldrh	r1, [r0, #6]
 800235a:	2303      	movs	r3, #3
 800235c:	4a6a      	ldr	r2, [pc, #424]	; (8002508 <MemoryDumpInit+0x2a8>)
 800235e:	1049      	asrs	r1, r1, #1
 8002360:	20c8      	movs	r0, #200	; 0xc8
 8002362:	f5c1 71af 	rsb	r1, r1, #350	; 0x15e
 8002366:	f01b f98d 	bl	801d684 <UTIL_LCD_DisplayStringAt>
  DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 800236a:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800236c:	f7ff fc9c 	bl	8001ca8 <DISPLAY_Refresh>
  if(Test_Context_Ptr->UartContext.uart_cmd_ongoing)
 8002370:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
 8002374:	2b00      	cmp	r3, #0
 8002376:	d062      	beq.n	800243e <MemoryDumpInit+0x1de>
    switch (Test_Context_Ptr->UartContext.uart_host_requested_dump_submode)
 8002378:	f894 3565 	ldrb.w	r3, [r4, #1381]	; 0x565
 800237c:	2b02      	cmp	r3, #2
 800237e:	d073      	beq.n	8002468 <MemoryDumpInit+0x208>
 8002380:	2b03      	cmp	r3, #3
 8002382:	d06f      	beq.n	8002464 <MemoryDumpInit+0x204>
 8002384:	2b01      	cmp	r3, #1
 8002386:	d06d      	beq.n	8002464 <MemoryDumpInit+0x204>
    if(Test_Context_Ptr->UartContext.uart_host_nonreg_run==1)
 8002388:	f8d4 2578 	ldr.w	r2, [r4, #1400]	; 0x578
 800238c:	2a01      	cmp	r2, #1
 800238e:	d148      	bne.n	8002422 <MemoryDumpInit+0x1c2>
        dump_output_buff[i]=0x00;
 8002390:	4b5e      	ldr	r3, [pc, #376]	; (800250c <MemoryDumpInit+0x2ac>)
      Test_Context_Ptr->UartContext.uart_host_nonreg_run=0;
 8002392:	2100      	movs	r1, #0
      Test_Context_Ptr->DumpContext.dump_state = 1;
 8002394:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
        dump_output_buff[i]=0x00;
 8002398:	2200      	movs	r2, #0
      Test_Context_Ptr->UartContext.uart_host_nonreg_run=0;
 800239a:	f8c4 1578 	str.w	r1, [r4, #1400]	; 0x578
        dump_output_buff[i]=0x00;
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	605a      	str	r2, [r3, #4]
 80023a2:	609a      	str	r2, [r3, #8]
 80023a4:	60da      	str	r2, [r3, #12]
 80023a6:	611a      	str	r2, [r3, #16]
 80023a8:	615a      	str	r2, [r3, #20]
  if (BSP_SD_Init(0) != BSP_ERROR_NONE)
 80023aa:	2000      	movs	r0, #0
 80023ac:	f00b f998 	bl	800d6e0 <BSP_SD_Init>
 80023b0:	4606      	mov	r6, r0
 80023b2:	b188      	cbz	r0, 80023d8 <MemoryDumpInit+0x178>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Error. SD Card not detected", CENTER_MODE);
 80023b4:	f01b f898 	bl	801d4e8 <UTIL_LCD_GetFont>
 80023b8:	88c1      	ldrh	r1, [r0, #6]
 80023ba:	2301      	movs	r3, #1
 80023bc:	4a54      	ldr	r2, [pc, #336]	; (8002510 <MemoryDumpInit+0x2b0>)
 80023be:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80023c2:	2000      	movs	r0, #0
 80023c4:	4099      	lsls	r1, r3
 80023c6:	f01b f95d 	bl	801d684 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 80023ca:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80023cc:	f7ff fc6c 	bl	8001ca8 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 80023d0:	2002      	movs	r0, #2
 80023d2:	f008 fc55 	bl	800ac80 <BSP_LED_On>
 80023d6:	e7fe      	b.n	80023d6 <MemoryDumpInit+0x176>
  STM32Fs_Init();
 80023d8:	f01a fa2a 	bl	801c830 <STM32Fs_Init>
  HAL_RNG_DeInit(&Test_Context_Ptr->RngHandle);
 80023dc:	f504 67c5 	add.w	r7, r4, #1576	; 0x628
  Test_Context_Ptr->RngHandle.Instance = RNG;
 80023e0:	4b4c      	ldr	r3, [pc, #304]	; (8002514 <MemoryDumpInit+0x2b4>)
  HAL_RNG_DeInit(&Test_Context_Ptr->RngHandle);
 80023e2:	4638      	mov	r0, r7
  Test_Context_Ptr->RngHandle.Instance = RNG;
 80023e4:	f8c4 3628 	str.w	r3, [r4, #1576]	; 0x628
  HAL_RNG_DeInit(&Test_Context_Ptr->RngHandle);
 80023e8:	f011 fe32 	bl	8014050 <HAL_RNG_DeInit>
  HAL_RNG_Init(&Test_Context_Ptr->RngHandle);
 80023ec:	4638      	mov	r0, r7
 80023ee:	f011 fdf5 	bl	8013fdc <HAL_RNG_Init>
  sprintf(Test_Context_Ptr->DumpContext.dump_folder_name, "/Memory_Dump");
 80023f2:	4b49      	ldr	r3, [pc, #292]	; (8002518 <MemoryDumpInit+0x2b8>)
 80023f4:	f104 0722 	add.w	r7, r4, #34	; 0x22
 80023f8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	f8c4 0022 	str.w	r0, [r4, #34]	; 0x22
  STM32Fs_CreateDir(Test_Context_Ptr->DumpContext.dump_folder_name);
 8002400:	4638      	mov	r0, r7
  sprintf(Test_Context_Ptr->DumpContext.dump_folder_name, "/Memory_Dump");
 8002402:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 8002406:	f8c4 1026 	str.w	r1, [r4, #38]	; 0x26
 800240a:	f8c4 202a 	str.w	r2, [r4, #42]	; 0x2a
  STM32Fs_CreateDir(Test_Context_Ptr->DumpContext.dump_folder_name);
 800240e:	f01a fa6f 	bl	801c8f0 <STM32Fs_CreateDir>
  if(Test_Context_Ptr->DumpContext.Dump_FrameSource==SDCARD_FILE)
 8002412:	7923      	ldrb	r3, [r4, #4]
 8002414:	2b03      	cmp	r3, #3
 8002416:	d02f      	beq.n	8002478 <MemoryDumpInit+0x218>
    BSP_SD_DeInit(0);
 8002418:	4630      	mov	r0, r6
 800241a:	f00b f923 	bl	800d664 <BSP_SD_DeInit>
}
 800241e:	b015      	add	sp, #84	; 0x54
 8002420:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Test_Context_Ptr->UartContext.uart_cmd_ongoing = 0;
 8002422:	2300      	movs	r3, #0
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002424:	220a      	movs	r2, #10
 8002426:	493d      	ldr	r1, [pc, #244]	; (800251c <MemoryDumpInit+0x2bc>)
 8002428:	f204 507c 	addw	r0, r4, #1404	; 0x57c
      Test_Context_Ptr->UartContext.uart_cmd_ongoing = 0;
 800242c:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002430:	f013 fb44 	bl	8015abc <HAL_UART_Receive_DMA>
 8002434:	2800      	cmp	r0, #0
 8002436:	d0b8      	beq.n	80023aa <MemoryDumpInit+0x14a>
    Error_Handler();
 8002438:	f002 fda8 	bl	8004f8c <Error_Handler>
 800243c:	e7b5      	b.n	80023aa <MemoryDumpInit+0x14a>
    HAL_Delay(200);
 800243e:	20c8      	movs	r0, #200	; 0xc8
 8002440:	f00b fa94 	bl	800d96c <HAL_Delay>
      joy_state = (JOYPin_TypeDef) BSP_JOY_GetState(JOY1, 0);
 8002444:	2100      	movs	r1, #0
 8002446:	4608      	mov	r0, r1
 8002448:	f008 fd2e 	bl	800aea8 <BSP_JOY_GetState>
 800244c:	b2c0      	uxtb	r0, r0
    while (joy_state == JOY_NONE || joy_state == JOY_DOWN || joy_state == JOY_SEL)
 800244e:	2802      	cmp	r0, #2
 8002450:	d9f8      	bls.n	8002444 <MemoryDumpInit+0x1e4>
    switch (joy_state)
 8002452:	2808      	cmp	r0, #8
 8002454:	d040      	beq.n	80024d8 <MemoryDumpInit+0x278>
 8002456:	2810      	cmp	r0, #16
 8002458:	d047      	beq.n	80024ea <MemoryDumpInit+0x28a>
 800245a:	2804      	cmp	r0, #4
 800245c:	d1a5      	bne.n	80023aa <MemoryDumpInit+0x14a>
      Test_Context_Ptr->DumpContext.Dump_FrameSource=SDCARD_FILE;
 800245e:	2303      	movs	r3, #3
 8002460:	7123      	strb	r3, [r4, #4]
   break;
 8002462:	e7a2      	b.n	80023aa <MemoryDumpInit+0x14a>
      Test_Context_Ptr->DumpContext.Dump_FrameSource=SDCARD_FILE;
 8002464:	7123      	strb	r3, [r4, #4]
      break;
 8002466:	e78f      	b.n	8002388 <MemoryDumpInit+0x128>
      CAMERA_Init(App_Cxt_Ptr->Camera_ContextPtr);
 8002468:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
      Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_COLORBAR;
 800246a:	7123      	strb	r3, [r4, #4]
      CAMERA_Init(App_Cxt_Ptr->Camera_ContextPtr);
 800246c:	f7ff f996 	bl	800179c <CAMERA_Init>
      CAMERA_Set_TestBar_Mode(App_Cxt_Ptr->Camera_ContextPtr);
 8002470:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8002472:	f7ff fa73 	bl	800195c <CAMERA_Set_TestBar_Mode>
      break;
 8002476:	e787      	b.n	8002388 <MemoryDumpInit+0x128>
    nbr_dir = 0;
 8002478:	a914      	add	r1, sp, #80	; 0x50
    ret = STM32Fs_GetNumberFiles(dump_dir_path, &nbr_dir, STM32FS_COUNT_DIRS);
 800247a:	a804      	add	r0, sp, #16
 800247c:	2202      	movs	r2, #2
    nbr_dir = 0;
 800247e:	f841 6d44 	str.w	r6, [r1, #-68]!
    ret = STM32Fs_GetNumberFiles(dump_dir_path, &nbr_dir, STM32FS_COUNT_DIRS);
 8002482:	f01a f9ed 	bl	801c860 <STM32Fs_GetNumberFiles>
    if (ret == STM32FS_ERROR_DIR_NOT_FOUND)
 8002486:	2809      	cmp	r0, #9
 8002488:	d014      	beq.n	80024b4 <MemoryDumpInit+0x254>
    if (nbr_dir != 0)
 800248a:	9b03      	ldr	r3, [sp, #12]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0c6      	beq.n	800241e <MemoryDumpInit+0x1be>
      UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Error. Number of found directories incorrect", CENTER_MODE);
 8002490:	f01b f82a 	bl	801d4e8 <UTIL_LCD_GetFont>
 8002494:	240e      	movs	r4, #14
 8002496:	88c1      	ldrh	r1, [r0, #6]
 8002498:	2301      	movs	r3, #1
 800249a:	4630      	mov	r0, r6
 800249c:	4a20      	ldr	r2, [pc, #128]	; (8002520 <MemoryDumpInit+0x2c0>)
 800249e:	fb04 f101 	mul.w	r1, r4, r1
 80024a2:	f01b f8ef 	bl	801d684 <UTIL_LCD_DisplayStringAt>
      DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 80024a6:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80024a8:	f7ff fbfe 	bl	8001ca8 <DISPLAY_Refresh>
      BSP_LED_On(LED_RED);
 80024ac:	2002      	movs	r0, #2
 80024ae:	f008 fbe7 	bl	800ac80 <BSP_LED_On>
 80024b2:	e7fe      	b.n	80024b2 <MemoryDumpInit+0x252>
      UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Error. Directory 'dataset' doesn't exist", CENTER_MODE);
 80024b4:	f01b f818 	bl	801d4e8 <UTIL_LCD_GetFont>
 80024b8:	240e      	movs	r4, #14
 80024ba:	88c1      	ldrh	r1, [r0, #6]
 80024bc:	2301      	movs	r3, #1
 80024be:	4630      	mov	r0, r6
 80024c0:	4a18      	ldr	r2, [pc, #96]	; (8002524 <MemoryDumpInit+0x2c4>)
 80024c2:	fb04 f101 	mul.w	r1, r4, r1
 80024c6:	f01b f8dd 	bl	801d684 <UTIL_LCD_DisplayStringAt>
      DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 80024ca:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80024cc:	f7ff fbec 	bl	8001ca8 <DISPLAY_Refresh>
      BSP_LED_On(LED_RED);
 80024d0:	2002      	movs	r0, #2
 80024d2:	f008 fbd5 	bl	800ac80 <BSP_LED_On>
 80024d6:	e7fe      	b.n	80024d6 <MemoryDumpInit+0x276>
      Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_COLORBAR;
 80024d8:	2302      	movs	r3, #2
      CAMERA_Init(App_Cxt_Ptr->Camera_ContextPtr);
 80024da:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
      Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_COLORBAR;
 80024dc:	7123      	strb	r3, [r4, #4]
      CAMERA_Init(App_Cxt_Ptr->Camera_ContextPtr);
 80024de:	f7ff f95d 	bl	800179c <CAMERA_Init>
      CAMERA_Set_TestBar_Mode(App_Cxt_Ptr->Camera_ContextPtr);
 80024e2:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80024e4:	f7ff fa3a 	bl	800195c <CAMERA_Set_TestBar_Mode>
      break;
 80024e8:	e75f      	b.n	80023aa <MemoryDumpInit+0x14a>
      Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_LIVE;
 80024ea:	2301      	movs	r3, #1
 80024ec:	7123      	strb	r3, [r4, #4]
      break;
 80024ee:	e75c      	b.n	80023aa <MemoryDumpInit+0x14a>
 80024f0:	080288c0 	.word	0x080288c0
 80024f4:	08028b54 	.word	0x08028b54
 80024f8:	08028aa4 	.word	0x08028aa4
 80024fc:	08028b6c 	.word	0x08028b6c
 8002500:	080291c8 	.word	0x080291c8
 8002504:	080291d4 	.word	0x080291d4
 8002508:	080291e4 	.word	0x080291e4
 800250c:	d0cdae80 	.word	0xd0cdae80
 8002510:	08028b04 	.word	0x08028b04
 8002514:	48021800 	.word	0x48021800
 8002518:	08028b88 	.word	0x08028b88
 800251c:	24007600 	.word	0x24007600
 8002520:	08028bc4 	.word	0x08028bc4
 8002524:	08028b98 	.word	0x08028b98

08002528 <OnBoardValidInit>:
{
 8002528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800252c:	4605      	mov	r5, r0
 800252e:	b095      	sub	sp, #84	; 0x54
static void DisplayIntroMessage(TestContext_TypeDef *Test_Context_Ptr)
{
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
  static const uint16_t margin = 15; /* margin for text in pixels*/

  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8002530:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 8002534:	f8d5 863c 	ldr.w	r8, [r5, #1596]	; 0x63c
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8002538:	f01a ffde 	bl	801d4f8 <UTIL_LCD_Clear>
  UTIL_LCD_DrawRect(200, 10, 400, 50, UTIL_LCD_COLOR_WHITE);
 800253c:	f04f 30ff 	mov.w	r0, #4294967295
 8002540:	2332      	movs	r3, #50	; 0x32
 8002542:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002546:	210a      	movs	r1, #10
 8002548:	9000      	str	r0, [sp, #0]
 800254a:	20c8      	movs	r0, #200	; 0xc8
 800254c:	f01b f97a 	bl	801d844 <UTIL_LCD_DrawRect>
  UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"Onboard Validation", CENTER_MODE);
 8002550:	f01a ffca 	bl	801d4e8 <UTIL_LCD_GetFont>
 8002554:	2301      	movs	r3, #1
 8002556:	88c1      	ldrh	r1, [r0, #6]
 8002558:	2000      	movs	r0, #0
 800255a:	4aa3      	ldr	r2, [pc, #652]	; (80027e8 <OnBoardValidInit+0x2c0>)
 800255c:	f01b f892 	bl	801d684 <UTIL_LCD_DisplayStringAt>

  UTIL_LCD_DisplayStringAt(margin, LINE(4), (uint8_t *)"Onboard validation will look for a directory", LEFT_MODE);
 8002560:	f01a ffc2 	bl	801d4e8 <UTIL_LCD_GetFont>
 8002564:	88c1      	ldrh	r1, [r0, #6]
 8002566:	2303      	movs	r3, #3
 8002568:	4aa0      	ldr	r2, [pc, #640]	; (80027ec <OnBoardValidInit+0x2c4>)
 800256a:	0089      	lsls	r1, r1, #2
 800256c:	200f      	movs	r0, #15
 800256e:	f01b f889 	bl	801d684 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(margin, LINE(5), (uint8_t *)"named 'onboard_valid_dataset_vga or _qvga'", LEFT_MODE);
 8002572:	f01a ffb9 	bl	801d4e8 <UTIL_LCD_GetFont>
 8002576:	88c1      	ldrh	r1, [r0, #6]
 8002578:	2303      	movs	r3, #3
 800257a:	4a9d      	ldr	r2, [pc, #628]	; (80027f0 <OnBoardValidInit+0x2c8>)
 800257c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002580:	200f      	movs	r0, #15
 8002582:	f01b f87f 	bl	801d684 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(margin, LINE(6), (uint8_t *)"at the root of the SDCard.", LEFT_MODE);
 8002586:	f01a ffaf 	bl	801d4e8 <UTIL_LCD_GetFont>
 800258a:	88c1      	ldrh	r1, [r0, #6]
 800258c:	2303      	movs	r3, #3
 800258e:	4a99      	ldr	r2, [pc, #612]	; (80027f4 <OnBoardValidInit+0x2cc>)
 8002590:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8002594:	200f      	movs	r0, #15
 8002596:	0049      	lsls	r1, r1, #1
 8002598:	f01b f874 	bl	801d684 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(margin, LINE(7), (uint8_t *)"This directory should contain one directory", LEFT_MODE);
 800259c:	f01a ffa4 	bl	801d4e8 <UTIL_LCD_GetFont>
 80025a0:	88c1      	ldrh	r1, [r0, #6]
 80025a2:	2303      	movs	r3, #3
 80025a4:	4a94      	ldr	r2, [pc, #592]	; (80027f8 <OnBoardValidInit+0x2d0>)
 80025a6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80025aa:	200f      	movs	r0, #15
 80025ac:	f01b f86a 	bl	801d684 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(margin, LINE(8), (uint8_t *)"per class containing images in BPM 16 bpp", LEFT_MODE);
 80025b0:	f01a ff9a 	bl	801d4e8 <UTIL_LCD_GetFont>
 80025b4:	2303      	movs	r3, #3
 80025b6:	88c1      	ldrh	r1, [r0, #6]
 80025b8:	200f      	movs	r0, #15
 80025ba:	4a90      	ldr	r2, [pc, #576]	; (80027fc <OnBoardValidInit+0x2d4>)
 80025bc:	4099      	lsls	r1, r3
 80025be:	f01b f861 	bl	801d684 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(margin, LINE(9), (uint8_t *)"format.", LEFT_MODE);
 80025c2:	f01a ff91 	bl	801d4e8 <UTIL_LCD_GetFont>
 80025c6:	88c1      	ldrh	r1, [r0, #6]
 80025c8:	2303      	movs	r3, #3
 80025ca:	4a8d      	ldr	r2, [pc, #564]	; (8002800 <OnBoardValidInit+0x2d8>)
 80025cc:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80025d0:	200f      	movs	r0, #15
 80025d2:	f01b f857 	bl	801d684 <UTIL_LCD_DisplayStringAt>

  UTIL_LCD_DisplayStringAt(margin, LINE(12), (uint8_t *)"Please insert the SDCard now,", LEFT_MODE);
 80025d6:	f01a ff87 	bl	801d4e8 <UTIL_LCD_GetFont>
 80025da:	88c1      	ldrh	r1, [r0, #6]
 80025dc:	2303      	movs	r3, #3
 80025de:	4a89      	ldr	r2, [pc, #548]	; (8002804 <OnBoardValidInit+0x2dc>)
 80025e0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80025e4:	200f      	movs	r0, #15
 80025e6:	0089      	lsls	r1, r1, #2
 80025e8:	f01b f84c 	bl	801d684 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(margin, LINE(13), (uint8_t *)"then press the WAKE-UP button to get started", LEFT_MODE);
 80025ec:	f01a ff7c 	bl	801d4e8 <UTIL_LCD_GetFont>
 80025f0:	88c1      	ldrh	r1, [r0, #6]
 80025f2:	2303      	movs	r3, #3
 80025f4:	4a84      	ldr	r2, [pc, #528]	; (8002808 <OnBoardValidInit+0x2e0>)
 80025f6:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 80025fa:	200f      	movs	r0, #15
 80025fc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8002600:	f01b f840 	bl	801d684 <UTIL_LCD_DisplayStringAt>

  DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8002604:	f8d8 0034 	ldr.w	r0, [r8, #52]	; 0x34
 8002608:	f7ff fb4e 	bl	8001ca8 <DISPLAY_Refresh>
 800260c:	e002      	b.n	8002614 <OnBoardValidInit+0xec>

  /* Wait for button input */
  while ((Test_Context_Ptr->UartContext.uart_cmd_ongoing==0) && (BSP_PB_GetState(BUTTON_WAKEUP) == RESET))
 800260e:	f008 fbb1 	bl	800ad74 <BSP_PB_GetState>
 8002612:	b920      	cbnz	r0, 800261e <OnBoardValidInit+0xf6>
 8002614:	f8d5 3560 	ldr.w	r3, [r5, #1376]	; 0x560
 8002618:	4618      	mov	r0, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d0f7      	beq.n	800260e <OnBoardValidInit+0xe6>
  sd_error = BSP_SD_Init(0);
 800261e:	2000      	movs	r0, #0
 8002620:	f00b f85e 	bl	800d6e0 <BSP_SD_Init>
  if (sd_error != BSP_ERROR_NONE)
 8002624:	b2c7      	uxtb	r7, r0
 8002626:	b197      	cbz	r7, 800264e <OnBoardValidInit+0x126>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Error. SD Card not detected", CENTER_MODE);
 8002628:	f01a ff5e 	bl	801d4e8 <UTIL_LCD_GetFont>
 800262c:	88c1      	ldrh	r1, [r0, #6]
 800262e:	2301      	movs	r3, #1
 8002630:	4a76      	ldr	r2, [pc, #472]	; (800280c <OnBoardValidInit+0x2e4>)
 8002632:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8002636:	2000      	movs	r0, #0
 8002638:	4099      	lsls	r1, r3
 800263a:	f01b f823 	bl	801d684 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 800263e:	f8d8 0034 	ldr.w	r0, [r8, #52]	; 0x34
 8002642:	f7ff fb31 	bl	8001ca8 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 8002646:	2002      	movs	r0, #2
 8002648:	f008 fb1a 	bl	800ac80 <BSP_LED_On>
 800264c:	e7fe      	b.n	800264c <OnBoardValidInit+0x124>
  strcpy(valid_dir_path, Test_Context_Ptr->ValidationContext.class_path);
 800264e:	f10d 0a10 	add.w	sl, sp, #16
 8002652:	f505 7970 	add.w	r9, r5, #960	; 0x3c0
  STM32Fs_Init();
 8002656:	f01a f8eb 	bl	801c830 <STM32Fs_Init>
  nbr_dir = 0;
 800265a:	9703      	str	r7, [sp, #12]
  strcpy(valid_dir_path, Test_Context_Ptr->ValidationContext.class_path);
 800265c:	4649      	mov	r1, r9
 800265e:	4650      	mov	r0, sl
 8002660:	f024 fab6 	bl	8026bd0 <stpcpy>
  valid_dir_path[strlen(valid_dir_path)-1]='\0';/*so to remove the '/' at the end of the string*/
 8002664:	a914      	add	r1, sp, #80	; 0x50
 8002666:	eba0 030a 	sub.w	r3, r0, sl
  ret = STM32Fs_GetNumberFiles(valid_dir_path, &nbr_dir, STM32FS_COUNT_DIRS);
 800266a:	2202      	movs	r2, #2
 800266c:	4650      	mov	r0, sl
  valid_dir_path[strlen(valid_dir_path)-1]='\0';/*so to remove the '/' at the end of the string*/
 800266e:	440b      	add	r3, r1
  ret = STM32Fs_GetNumberFiles(valid_dir_path, &nbr_dir, STM32FS_COUNT_DIRS);
 8002670:	a903      	add	r1, sp, #12
  valid_dir_path[strlen(valid_dir_path)-1]='\0';/*so to remove the '/' at the end of the string*/
 8002672:	f803 7c41 	strb.w	r7, [r3, #-65]
  ret = STM32Fs_GetNumberFiles(valid_dir_path, &nbr_dir, STM32FS_COUNT_DIRS);
 8002676:	f01a f8f3 	bl	801c860 <STM32Fs_GetNumberFiles>
  if (ret == STM32FS_ERROR_DIR_NOT_FOUND)
 800267a:	2809      	cmp	r0, #9
 800267c:	d015      	beq.n	80026aa <OnBoardValidInit+0x182>
  if (nbr_dir != AI_NETWORK_OUT_1_SIZE)
 800267e:	9b03      	ldr	r3, [sp, #12]
 8002680:	2b06      	cmp	r3, #6
 8002682:	d025      	beq.n	80026d0 <OnBoardValidInit+0x1a8>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Error. Number of found directories incorrect", CENTER_MODE);
 8002684:	f01a ff30 	bl	801d4e8 <UTIL_LCD_GetFont>
 8002688:	88c1      	ldrh	r1, [r0, #6]
 800268a:	2301      	movs	r3, #1
 800268c:	4638      	mov	r0, r7
 800268e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8002692:	4a5f      	ldr	r2, [pc, #380]	; (8002810 <OnBoardValidInit+0x2e8>)
 8002694:	4099      	lsls	r1, r3
 8002696:	f01a fff5 	bl	801d684 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 800269a:	f8d8 0034 	ldr.w	r0, [r8, #52]	; 0x34
 800269e:	f7ff fb03 	bl	8001ca8 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 80026a2:	2002      	movs	r0, #2
 80026a4:	f008 faec 	bl	800ac80 <BSP_LED_On>
 80026a8:	e7fe      	b.n	80026a8 <OnBoardValidInit+0x180>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Error. Directory 'onboard_valid_dataset' doesn't exist", CENTER_MODE);
 80026aa:	f01a ff1d 	bl	801d4e8 <UTIL_LCD_GetFont>
 80026ae:	240e      	movs	r4, #14
 80026b0:	88c1      	ldrh	r1, [r0, #6]
 80026b2:	2301      	movs	r3, #1
 80026b4:	4638      	mov	r0, r7
 80026b6:	4a57      	ldr	r2, [pc, #348]	; (8002814 <OnBoardValidInit+0x2ec>)
 80026b8:	fb04 f101 	mul.w	r1, r4, r1
 80026bc:	f01a ffe2 	bl	801d684 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 80026c0:	f8d8 0034 	ldr.w	r0, [r8, #52]	; 0x34
 80026c4:	f7ff faf0 	bl	8001ca8 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 80026c8:	2002      	movs	r0, #2
 80026ca:	f008 fad9 	bl	800ac80 <BSP_LED_On>
 80026ce:	e7fe      	b.n	80026ce <OnBoardValidInit+0x1a6>
  sprintf(tmp_msg, "List of missclassified files:\n");
 80026d0:	4e51      	ldr	r6, [pc, #324]	; (8002818 <OnBoardValidInit+0x2f0>)
  BSP_LED_On(LED_GREEN);
 80026d2:	4638      	mov	r0, r7
 80026d4:	f008 fad4 	bl	800ac80 <BSP_LED_On>
  sprintf(tmp_msg, "List of missclassified files:\n");
 80026d8:	4c50      	ldr	r4, [pc, #320]	; (800281c <OnBoardValidInit+0x2f4>)
 80026da:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80026dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026de:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80026e2:	c407      	stmia	r4!, {r0, r1, r2}
 80026e4:	0c1e      	lsrs	r6, r3, #16
 80026e6:	f824 3b02 	strh.w	r3, [r4], #2
 80026ea:	4621      	mov	r1, r4
  if (STM32Fs_WriteTextToFile("missclassified.txt", tmp_msg, STM32FS_CREATE_NEW_FILE) != STM32FS_ERROR_NONE)
 80026ec:	463a      	mov	r2, r7
 80026ee:	484c      	ldr	r0, [pc, #304]	; (8002820 <OnBoardValidInit+0x2f8>)
  sprintf(tmp_msg, "List of missclassified files:\n");
 80026f0:	f801 691e 	strb.w	r6, [r1], #-30
  if (STM32Fs_WriteTextToFile("missclassified.txt", tmp_msg, STM32FS_CREATE_NEW_FILE) != STM32FS_ERROR_NONE)
 80026f4:	f01a fcbe 	bl	801d074 <STM32Fs_WriteTextToFile>
 80026f8:	4683      	mov	fp, r0
 80026fa:	b190      	cbz	r0, 8002722 <OnBoardValidInit+0x1fa>
    UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Error. Unable to create the missclassified file", CENTER_MODE);
 80026fc:	f01a fef4 	bl	801d4e8 <UTIL_LCD_GetFont>
 8002700:	240e      	movs	r4, #14
 8002702:	88c1      	ldrh	r1, [r0, #6]
 8002704:	2301      	movs	r3, #1
 8002706:	4638      	mov	r0, r7
 8002708:	4a46      	ldr	r2, [pc, #280]	; (8002824 <OnBoardValidInit+0x2fc>)
 800270a:	fb04 f101 	mul.w	r1, r4, r1
 800270e:	f01a ffb9 	bl	801d684 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8002712:	f8d8 0034 	ldr.w	r0, [r8, #52]	; 0x34
 8002716:	f7ff fac7 	bl	8001ca8 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 800271a:	2002      	movs	r0, #2
 800271c:	f008 fab0 	bl	800ac80 <BSP_LED_On>
 8002720:	e7fe      	b.n	8002720 <OnBoardValidInit+0x1f8>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8002722:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
  STM32Fs_OpenDir(valid_dir_path, &Test_Context_Ptr->ValidationContext.dataset_dir);
 8002726:	f505 7692 	add.w	r6, r5, #292	; 0x124
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 800272a:	f01a fee5 	bl	801d4f8 <UTIL_LCD_Clear>
  UTIL_LCD_SetFont(&Font20);
 800272e:	483e      	ldr	r0, [pc, #248]	; (8002828 <OnBoardValidInit+0x300>)
 8002730:	f01a fed2 	bl	801d4d8 <UTIL_LCD_SetFont>
  sprintf(tmp_msg, "Found %d classes", (unsigned int)nbr_dir);
 8002734:	9a03      	ldr	r2, [sp, #12]
 8002736:	493d      	ldr	r1, [pc, #244]	; (800282c <OnBoardValidInit+0x304>)
 8002738:	f1a4 001e 	sub.w	r0, r4, #30
 800273c:	f024 fa28 	bl	8026b90 <siprintf>
  UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)tmp_msg, CENTER_MODE);
 8002740:	f01a fed2 	bl	801d4e8 <UTIL_LCD_GetFont>
 8002744:	f1a4 021e 	sub.w	r2, r4, #30
 8002748:	88c1      	ldrh	r1, [r0, #6]
 800274a:	2301      	movs	r3, #1
 800274c:	4658      	mov	r0, fp
 800274e:	f01a ff99 	bl	801d684 <UTIL_LCD_DisplayStringAt>
  STM32Fs_OpenDir(valid_dir_path, &Test_Context_Ptr->ValidationContext.dataset_dir);
 8002752:	4631      	mov	r1, r6
 8002754:	4650      	mov	r0, sl
 8002756:	f01a f8bf 	bl	801c8d8 <STM32Fs_OpenDir>
  if(STM32Fs_GetNextDir(&Test_Context_Ptr->ValidationContext.dataset_dir, &Test_Context_Ptr->ValidationContext.fno) != STM32FS_ERROR_NONE)
 800275a:	4630      	mov	r0, r6
 800275c:	f505 71ac 	add.w	r1, r5, #344	; 0x158
 8002760:	f01a f8ce 	bl	801c900 <STM32Fs_GetNextDir>
 8002764:	bb48      	cbnz	r0, 80027ba <OnBoardValidInit+0x292>
  for (size_t j = 0; j < AI_NET_OUTPUT_SIZE; j++)
 8002766:	4604      	mov	r4, r0
  Test_Context_Ptr->ValidationContext.class_index = FindClassIndexFromString(Test_Context_Ptr->ValidationContext.fno.fname);
 8002768:	f505 76b7 	add.w	r6, r5, #366	; 0x16e
 800276c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8002834 <OnBoardValidInit+0x30c>
    if (strcmp(className, NN_OUTPUT_CLASS_LIST[j]) == 0)
 8002770:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 8002774:	4630      	mov	r0, r6
 8002776:	f7fd fdb3 	bl	80002e0 <strcmp>
 800277a:	4607      	mov	r7, r0
 800277c:	b1f0      	cbz	r0, 80027bc <OnBoardValidInit+0x294>
  for (size_t j = 0; j < AI_NET_OUTPUT_SIZE; j++)
 800277e:	3401      	adds	r4, #1
 8002780:	2c06      	cmp	r4, #6
 8002782:	d1f5      	bne.n	8002770 <OnBoardValidInit+0x248>
  Test_Context_Ptr->ValidationContext.class_index = FindClassIndexFromString(Test_Context_Ptr->ValidationContext.fno.fname);
 8002784:	f04f 33ff 	mov.w	r3, #4294967295
    sprintf(tmp_msg, "Error, class %s doesn't exists", Test_Context_Ptr->ValidationContext.fno.fname);
 8002788:	4632      	mov	r2, r6
 800278a:	4929      	ldr	r1, [pc, #164]	; (8002830 <OnBoardValidInit+0x308>)
  Test_Context_Ptr->ValidationContext.class_index = FindClassIndexFromString(Test_Context_Ptr->ValidationContext.fno.fname);
 800278c:	f8c5 33bc 	str.w	r3, [r5, #956]	; 0x3bc
    sprintf(tmp_msg, "Error, class %s doesn't exists", Test_Context_Ptr->ValidationContext.fno.fname);
 8002790:	4822      	ldr	r0, [pc, #136]	; (800281c <OnBoardValidInit+0x2f4>)
 8002792:	f024 f9fd 	bl	8026b90 <siprintf>
    UTIL_LCD_DisplayStringAt(0, LINE(3), (uint8_t *)tmp_msg, CENTER_MODE);
 8002796:	f01a fea7 	bl	801d4e8 <UTIL_LCD_GetFont>
 800279a:	88c1      	ldrh	r1, [r0, #6]
 800279c:	2301      	movs	r3, #1
 800279e:	4a1f      	ldr	r2, [pc, #124]	; (800281c <OnBoardValidInit+0x2f4>)
 80027a0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80027a4:	2000      	movs	r0, #0
 80027a6:	f01a ff6d 	bl	801d684 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 80027aa:	f8d8 0034 	ldr.w	r0, [r8, #52]	; 0x34
 80027ae:	f7ff fa7b 	bl	8001ca8 <DISPLAY_Refresh>
    BSP_LED_On(LED_RED);
 80027b2:	2002      	movs	r0, #2
 80027b4:	f008 fa64 	bl	800ac80 <BSP_LED_On>
 80027b8:	e7fe      	b.n	80027b8 <OnBoardValidInit+0x290>
 80027ba:	e7fe      	b.n	80027ba <OnBoardValidInit+0x292>
  strcpy(Test_Context_Ptr->ValidationContext.tmp_class_path, ""); //string "null"
 80027bc:	f505 6880 	add.w	r8, r5, #1024	; 0x400
  strcpy(Test_Context_Ptr->ValidationContext.tmp_class_path, Test_Context_Ptr->ValidationContext.class_path );
 80027c0:	4649      	mov	r1, r9
  Test_Context_Ptr->ValidationContext.class_index = FindClassIndexFromString(Test_Context_Ptr->ValidationContext.fno.fname);
 80027c2:	f8c5 43bc 	str.w	r4, [r5, #956]	; 0x3bc
  strcpy(Test_Context_Ptr->ValidationContext.tmp_class_path, Test_Context_Ptr->ValidationContext.class_path );
 80027c6:	4640      	mov	r0, r8
 80027c8:	f024 fa02 	bl	8026bd0 <stpcpy>
  strcat(Test_Context_Ptr->ValidationContext.tmp_class_path, Test_Context_Ptr->ValidationContext.fno.fname);
 80027cc:	4631      	mov	r1, r6
 80027ce:	f024 fa08 	bl	8026be2 <strcpy>
  STM32Fs_OpenDir(Test_Context_Ptr->ValidationContext.tmp_class_path, &Test_Context_Ptr->ValidationContext.class_dir);
 80027d2:	f505 711c 	add.w	r1, r5, #624	; 0x270
 80027d6:	4640      	mov	r0, r8
 80027d8:	f01a f87e 	bl	801c8d8 <STM32Fs_OpenDir>
  Test_Context_Ptr->ValidationContext.validation_completed = 0;
 80027dc:	f8c5 7440 	str.w	r7, [r5, #1088]	; 0x440
}
 80027e0:	b015      	add	sp, #84	; 0x54
 80027e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027e6:	bf00      	nop
 80027e8:	08028bf4 	.word	0x08028bf4
 80027ec:	08028c08 	.word	0x08028c08
 80027f0:	08028c38 	.word	0x08028c38
 80027f4:	08028c64 	.word	0x08028c64
 80027f8:	08028c80 	.word	0x08028c80
 80027fc:	08028cac 	.word	0x08028cac
 8002800:	08028cd8 	.word	0x08028cd8
 8002804:	08028ce0 	.word	0x08028ce0
 8002808:	08028d00 	.word	0x08028d00
 800280c:	08028b04 	.word	0x08028b04
 8002810:	08028bc4 	.word	0x08028bc4
 8002814:	08028d30 	.word	0x08028d30
 8002818:	08028d68 	.word	0x08028d68
 800281c:	24007fc8 	.word	0x24007fc8
 8002820:	08028d88 	.word	0x08028d88
 8002824:	08028d9c 	.word	0x08028d9c
 8002828:	24007400 	.word	0x24007400
 800282c:	08028dcc 	.word	0x08028dcc
 8002830:	08028de0 	.word	0x08028de0
 8002834:	24000008 	.word	0x24000008

08002838 <UartCmd_Upload_NonRegression_Report>:
{
 8002838:	b510      	push	{r4, lr}
 800283a:	4604      	mov	r4, r0
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800283c:	2202      	movs	r2, #2
 800283e:	2180      	movs	r1, #128	; 0x80
 8002840:	480e      	ldr	r0, [pc, #56]	; (800287c <UartCmd_Upload_NonRegression_Report+0x44>)
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002842:	f204 547c 	addw	r4, r4, #1404	; 0x57c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002846:	f002 fb35 	bl	8004eb4 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 800284a:	2206      	movs	r2, #6
 800284c:	490b      	ldr	r1, [pc, #44]	; (800287c <UartCmd_Upload_NonRegression_Report+0x44>)
 800284e:	4620      	mov	r0, r4
 8002850:	f013 f8de 	bl	8015a10 <HAL_UART_Transmit_DMA>
 8002854:	b978      	cbnz	r0, 8002876 <UartCmd_Upload_NonRegression_Report+0x3e>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002856:	4620      	mov	r0, r4
 8002858:	f013 fb20 	bl	8015e9c <HAL_UART_GetState>
 800285c:	2820      	cmp	r0, #32
 800285e:	d1fa      	bne.n	8002856 <UartCmd_Upload_NonRegression_Report+0x1e>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002860:	4620      	mov	r0, r4
 8002862:	220a      	movs	r2, #10
 8002864:	4906      	ldr	r1, [pc, #24]	; (8002880 <UartCmd_Upload_NonRegression_Report+0x48>)
 8002866:	f013 f929 	bl	8015abc <HAL_UART_Receive_DMA>
 800286a:	b900      	cbnz	r0, 800286e <UartCmd_Upload_NonRegression_Report+0x36>
}
 800286c:	bd10      	pop	{r4, pc}
 800286e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8002872:	f002 bb8b 	b.w	8004f8c <Error_Handler>
      Error_Handler();
 8002876:	f002 fb89 	bl	8004f8c <Error_Handler>
 800287a:	e7ec      	b.n	8002856 <UartCmd_Upload_NonRegression_Report+0x1e>
 800287c:	d0cdae80 	.word	0xd0cdae80
 8002880:	24007600 	.word	0x24007600

08002884 <UartCmd_Upload_Validation_Report>:
{
 8002884:	b510      	push	{r4, lr}
 8002886:	4604      	mov	r4, r0
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002888:	2202      	movs	r2, #2
 800288a:	f44f 5162 	mov.w	r1, #14464	; 0x3880
 800288e:	480f      	ldr	r0, [pc, #60]	; (80028cc <UartCmd_Upload_Validation_Report+0x48>)
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002890:	f204 547c 	addw	r4, r4, #1404	; 0x57c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002894:	f002 fb0e 	bl	8004eb4 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002898:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800289c:	490b      	ldr	r1, [pc, #44]	; (80028cc <UartCmd_Upload_Validation_Report+0x48>)
 800289e:	4620      	mov	r0, r4
 80028a0:	f013 f8b6 	bl	8015a10 <HAL_UART_Transmit_DMA>
 80028a4:	b978      	cbnz	r0, 80028c6 <UartCmd_Upload_Validation_Report+0x42>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 80028a6:	4620      	mov	r0, r4
 80028a8:	f013 faf8 	bl	8015e9c <HAL_UART_GetState>
 80028ac:	2820      	cmp	r0, #32
 80028ae:	d1fa      	bne.n	80028a6 <UartCmd_Upload_Validation_Report+0x22>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 80028b0:	4620      	mov	r0, r4
 80028b2:	220a      	movs	r2, #10
 80028b4:	4906      	ldr	r1, [pc, #24]	; (80028d0 <UartCmd_Upload_Validation_Report+0x4c>)
 80028b6:	f013 f901 	bl	8015abc <HAL_UART_Receive_DMA>
 80028ba:	b900      	cbnz	r0, 80028be <UartCmd_Upload_Validation_Report+0x3a>
}
 80028bc:	bd10      	pop	{r4, pc}
 80028be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80028c2:	f002 bb63 	b.w	8004f8c <Error_Handler>
      Error_Handler();
 80028c6:	f002 fb61 	bl	8004f8c <Error_Handler>
 80028ca:	e7ec      	b.n	80028a6 <UartCmd_Upload_Validation_Report+0x22>
 80028cc:	d0cdaf00 	.word	0xd0cdaf00
 80028d0:	24007600 	.word	0x24007600

080028d4 <UartCmd_Upload_Timing_Report>:
{
 80028d4:	b510      	push	{r4, lr}
 80028d6:	4604      	mov	r4, r0
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80028d8:	2202      	movs	r2, #2
 80028da:	2180      	movs	r1, #128	; 0x80
 80028dc:	480e      	ldr	r0, [pc, #56]	; (8002918 <UartCmd_Upload_Timing_Report+0x44>)
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80028de:	f204 547c 	addw	r4, r4, #1404	; 0x57c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80028e2:	f002 fae7 	bl	8004eb4 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80028e6:	2214      	movs	r2, #20
 80028e8:	490b      	ldr	r1, [pc, #44]	; (8002918 <UartCmd_Upload_Timing_Report+0x44>)
 80028ea:	4620      	mov	r0, r4
 80028ec:	f013 f890 	bl	8015a10 <HAL_UART_Transmit_DMA>
 80028f0:	b978      	cbnz	r0, 8002912 <UartCmd_Upload_Timing_Report+0x3e>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 80028f2:	4620      	mov	r0, r4
 80028f4:	f013 fad2 	bl	8015e9c <HAL_UART_GetState>
 80028f8:	2820      	cmp	r0, #32
 80028fa:	d1fa      	bne.n	80028f2 <UartCmd_Upload_Timing_Report+0x1e>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 80028fc:	4620      	mov	r0, r4
 80028fe:	220a      	movs	r2, #10
 8002900:	4906      	ldr	r1, [pc, #24]	; (800291c <UartCmd_Upload_Timing_Report+0x48>)
 8002902:	f013 f8db 	bl	8015abc <HAL_UART_Receive_DMA>
 8002906:	b900      	cbnz	r0, 800290a <UartCmd_Upload_Timing_Report+0x36>
}
 8002908:	bd10      	pop	{r4, pc}
 800290a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800290e:	f002 bb3d 	b.w	8004f8c <Error_Handler>
      Error_Handler();
 8002912:	f002 fb3b 	bl	8004f8c <Error_Handler>
 8002916:	e7ec      	b.n	80028f2 <UartCmd_Upload_Timing_Report+0x1e>
 8002918:	d0e83900 	.word	0xd0e83900
 800291c:	24007600 	.word	0x24007600

08002920 <UartCmd_Get_Dump_Output_Data_Size>:
{
 8002920:	b538      	push	{r3, r4, r5, lr}
  *((uint16_t*)aTxBuffer) = AI_NET_OUTPUT_SIZE_BYTES;
 8002922:	4d11      	ldr	r5, [pc, #68]	; (8002968 <UartCmd_Get_Dump_Output_Data_Size+0x48>)
 8002924:	2306      	movs	r3, #6
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002926:	f200 547c 	addw	r4, r0, #1404	; 0x57c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800292a:	2202      	movs	r2, #2
 800292c:	4628      	mov	r0, r5
 800292e:	21a0      	movs	r1, #160	; 0xa0
  *((uint16_t*)aTxBuffer) = AI_NET_OUTPUT_SIZE_BYTES;
 8002930:	802b      	strh	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002932:	f002 fabf 	bl	8004eb4 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002936:	4629      	mov	r1, r5
 8002938:	4620      	mov	r0, r4
 800293a:	2202      	movs	r2, #2
 800293c:	f013 f868 	bl	8015a10 <HAL_UART_Transmit_DMA>
 8002940:	b978      	cbnz	r0, 8002962 <UartCmd_Get_Dump_Output_Data_Size+0x42>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002942:	4620      	mov	r0, r4
 8002944:	f013 faaa 	bl	8015e9c <HAL_UART_GetState>
 8002948:	2820      	cmp	r0, #32
 800294a:	d1fa      	bne.n	8002942 <UartCmd_Get_Dump_Output_Data_Size+0x22>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 800294c:	4620      	mov	r0, r4
 800294e:	220a      	movs	r2, #10
 8002950:	4906      	ldr	r1, [pc, #24]	; (800296c <UartCmd_Get_Dump_Output_Data_Size+0x4c>)
 8002952:	f013 f8b3 	bl	8015abc <HAL_UART_Receive_DMA>
 8002956:	b900      	cbnz	r0, 800295a <UartCmd_Get_Dump_Output_Data_Size+0x3a>
}
 8002958:	bd38      	pop	{r3, r4, r5, pc}
 800295a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 800295e:	f002 bb15 	b.w	8004f8c <Error_Handler>
      Error_Handler();
 8002962:	f002 fb13 	bl	8004f8c <Error_Handler>
 8002966:	e7ec      	b.n	8002942 <UartCmd_Get_Dump_Output_Data_Size+0x22>
 8002968:	24007620 	.word	0x24007620
 800296c:	24007600 	.word	0x24007600

08002970 <UartCmd_Get_Validation_Final_Accuracy>:
{
 8002970:	b538      	push	{r3, r4, r5, lr}
  *((float*)aTxBuffer) = Test_Context_Ptr->ValidationContext.final_accuracy;
 8002972:	f200 4344 	addw	r3, r0, #1092	; 0x444
 8002976:	4d11      	ldr	r5, [pc, #68]	; (80029bc <UartCmd_Get_Validation_Final_Accuracy+0x4c>)
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002978:	f200 547c 	addw	r4, r0, #1404	; 0x57c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800297c:	2202      	movs	r2, #2
  *((float*)aTxBuffer) = Test_Context_Ptr->ValidationContext.final_accuracy;
 800297e:	681b      	ldr	r3, [r3, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002980:	21a0      	movs	r1, #160	; 0xa0
 8002982:	4628      	mov	r0, r5
  *((float*)aTxBuffer) = Test_Context_Ptr->ValidationContext.final_accuracy;
 8002984:	602b      	str	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002986:	f002 fa95 	bl	8004eb4 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 800298a:	4629      	mov	r1, r5
 800298c:	4620      	mov	r0, r4
 800298e:	2204      	movs	r2, #4
 8002990:	f013 f83e 	bl	8015a10 <HAL_UART_Transmit_DMA>
 8002994:	b978      	cbnz	r0, 80029b6 <UartCmd_Get_Validation_Final_Accuracy+0x46>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002996:	4620      	mov	r0, r4
 8002998:	f013 fa80 	bl	8015e9c <HAL_UART_GetState>
 800299c:	2820      	cmp	r0, #32
 800299e:	d1fa      	bne.n	8002996 <UartCmd_Get_Validation_Final_Accuracy+0x26>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 80029a0:	4620      	mov	r0, r4
 80029a2:	220a      	movs	r2, #10
 80029a4:	4906      	ldr	r1, [pc, #24]	; (80029c0 <UartCmd_Get_Validation_Final_Accuracy+0x50>)
 80029a6:	f013 f889 	bl	8015abc <HAL_UART_Receive_DMA>
 80029aa:	b900      	cbnz	r0, 80029ae <UartCmd_Get_Validation_Final_Accuracy+0x3e>
}
 80029ac:	bd38      	pop	{r3, r4, r5, pc}
 80029ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 80029b2:	f002 baeb 	b.w	8004f8c <Error_Handler>
      Error_Handler();
 80029b6:	f002 fae9 	bl	8004f8c <Error_Handler>
 80029ba:	e7ec      	b.n	8002996 <UartCmd_Get_Validation_Final_Accuracy+0x26>
 80029bc:	24007620 	.word	0x24007620
 80029c0:	24007600 	.word	0x24007600

080029c4 <UartCmd_Upload_Valid_Output>:
 80029c4:	b510      	push	{r4, lr}
 80029c6:	4604      	mov	r4, r0
 80029c8:	2202      	movs	r2, #2
 80029ca:	f44f 5162 	mov.w	r1, #14464	; 0x3880
 80029ce:	480f      	ldr	r0, [pc, #60]	; (8002a0c <UartCmd_Upload_Valid_Output+0x48>)
 80029d0:	f204 547c 	addw	r4, r4, #1404	; 0x57c
 80029d4:	f002 fa6e 	bl	8004eb4 <UTILS_DCache_Coherency_Maintenance>
 80029d8:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80029dc:	490b      	ldr	r1, [pc, #44]	; (8002a0c <UartCmd_Upload_Valid_Output+0x48>)
 80029de:	4620      	mov	r0, r4
 80029e0:	f013 f816 	bl	8015a10 <HAL_UART_Transmit_DMA>
 80029e4:	b978      	cbnz	r0, 8002a06 <UartCmd_Upload_Valid_Output+0x42>
 80029e6:	4620      	mov	r0, r4
 80029e8:	f013 fa58 	bl	8015e9c <HAL_UART_GetState>
 80029ec:	2820      	cmp	r0, #32
 80029ee:	d1fa      	bne.n	80029e6 <UartCmd_Upload_Valid_Output+0x22>
 80029f0:	4620      	mov	r0, r4
 80029f2:	220a      	movs	r2, #10
 80029f4:	4906      	ldr	r1, [pc, #24]	; (8002a10 <UartCmd_Upload_Valid_Output+0x4c>)
 80029f6:	f013 f861 	bl	8015abc <HAL_UART_Receive_DMA>
 80029fa:	b900      	cbnz	r0, 80029fe <UartCmd_Upload_Valid_Output+0x3a>
 80029fc:	bd10      	pop	{r4, pc}
 80029fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a02:	f002 bac3 	b.w	8004f8c <Error_Handler>
 8002a06:	f002 fac1 	bl	8004f8c <Error_Handler>
 8002a0a:	e7ec      	b.n	80029e6 <UartCmd_Upload_Valid_Output+0x22>
 8002a0c:	d0cdaf00 	.word	0xd0cdaf00
 8002a10:	24007600 	.word	0x24007600

08002a14 <UartCmd_Upload_Dump_Output_Data>:
 8002a14:	b510      	push	{r4, lr}
 8002a16:	4604      	mov	r4, r0
 8002a18:	2202      	movs	r2, #2
 8002a1a:	2180      	movs	r1, #128	; 0x80
 8002a1c:	480e      	ldr	r0, [pc, #56]	; (8002a58 <UartCmd_Upload_Dump_Output_Data+0x44>)
 8002a1e:	f204 547c 	addw	r4, r4, #1404	; 0x57c
 8002a22:	f002 fa47 	bl	8004eb4 <UTILS_DCache_Coherency_Maintenance>
 8002a26:	2206      	movs	r2, #6
 8002a28:	490b      	ldr	r1, [pc, #44]	; (8002a58 <UartCmd_Upload_Dump_Output_Data+0x44>)
 8002a2a:	4620      	mov	r0, r4
 8002a2c:	f012 fff0 	bl	8015a10 <HAL_UART_Transmit_DMA>
 8002a30:	b978      	cbnz	r0, 8002a52 <UartCmd_Upload_Dump_Output_Data+0x3e>
 8002a32:	4620      	mov	r0, r4
 8002a34:	f013 fa32 	bl	8015e9c <HAL_UART_GetState>
 8002a38:	2820      	cmp	r0, #32
 8002a3a:	d1fa      	bne.n	8002a32 <UartCmd_Upload_Dump_Output_Data+0x1e>
 8002a3c:	4620      	mov	r0, r4
 8002a3e:	220a      	movs	r2, #10
 8002a40:	4906      	ldr	r1, [pc, #24]	; (8002a5c <UartCmd_Upload_Dump_Output_Data+0x48>)
 8002a42:	f013 f83b 	bl	8015abc <HAL_UART_Receive_DMA>
 8002a46:	b900      	cbnz	r0, 8002a4a <UartCmd_Upload_Dump_Output_Data+0x36>
 8002a48:	bd10      	pop	{r4, pc}
 8002a4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a4e:	f002 ba9d 	b.w	8004f8c <Error_Handler>
 8002a52:	f002 fa9b 	bl	8004f8c <Error_Handler>
 8002a56:	e7ec      	b.n	8002a32 <UartCmd_Upload_Dump_Output_Data+0x1e>
 8002a58:	d0cdae80 	.word	0xd0cdae80
 8002a5c:	24007600 	.word	0x24007600

08002a60 <UartCmd_Get_Valid_Output_Size>:
 8002a60:	b538      	push	{r3, r4, r5, lr}
 8002a62:	4d12      	ldr	r5, [pc, #72]	; (8002aac <UartCmd_Get_Valid_Output_Size+0x4c>)
 8002a64:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002a68:	f200 547c 	addw	r4, r0, #1404	; 0x57c
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	4628      	mov	r0, r5
 8002a70:	21a0      	movs	r1, #160	; 0xa0
 8002a72:	602b      	str	r3, [r5, #0]
 8002a74:	f002 fa1e 	bl	8004eb4 <UTILS_DCache_Coherency_Maintenance>
 8002a78:	4629      	mov	r1, r5
 8002a7a:	4620      	mov	r0, r4
 8002a7c:	2204      	movs	r2, #4
 8002a7e:	f012 ffc7 	bl	8015a10 <HAL_UART_Transmit_DMA>
 8002a82:	b978      	cbnz	r0, 8002aa4 <UartCmd_Get_Valid_Output_Size+0x44>
 8002a84:	4620      	mov	r0, r4
 8002a86:	f013 fa09 	bl	8015e9c <HAL_UART_GetState>
 8002a8a:	2820      	cmp	r0, #32
 8002a8c:	d1fa      	bne.n	8002a84 <UartCmd_Get_Valid_Output_Size+0x24>
 8002a8e:	4620      	mov	r0, r4
 8002a90:	220a      	movs	r2, #10
 8002a92:	4907      	ldr	r1, [pc, #28]	; (8002ab0 <UartCmd_Get_Valid_Output_Size+0x50>)
 8002a94:	f013 f812 	bl	8015abc <HAL_UART_Receive_DMA>
 8002a98:	b900      	cbnz	r0, 8002a9c <UartCmd_Get_Valid_Output_Size+0x3c>
 8002a9a:	bd38      	pop	{r3, r4, r5, pc}
 8002a9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002aa0:	f002 ba74 	b.w	8004f8c <Error_Handler>
 8002aa4:	f002 fa72 	bl	8004f8c <Error_Handler>
 8002aa8:	e7ec      	b.n	8002a84 <UartCmd_Get_Valid_Output_Size+0x24>
 8002aaa:	bf00      	nop
 8002aac:	24007620 	.word	0x24007620
 8002ab0:	24007600 	.word	0x24007600

08002ab4 <UartCmd_Get_Dump_Whole_Data_Size>:
{
 8002ab4:	b538      	push	{r3, r4, r5, lr}
  *((uint32_t*)aTxBuffer) = DUMP_INTERMEDIATE_DATA_BUFFER_SIZE;
 8002ab6:	4d11      	ldr	r5, [pc, #68]	; (8002afc <UartCmd_Get_Dump_Whole_Data_Size+0x48>)
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002ab8:	f200 547c 	addw	r4, r0, #1404	; 0x57c
  *((uint32_t*)aTxBuffer) = DUMP_INTERMEDIATE_DATA_BUFFER_SIZE;
 8002abc:	4b10      	ldr	r3, [pc, #64]	; (8002b00 <UartCmd_Get_Dump_Whole_Data_Size+0x4c>)
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002abe:	2202      	movs	r2, #2
 8002ac0:	4628      	mov	r0, r5
 8002ac2:	21a0      	movs	r1, #160	; 0xa0
  *((uint32_t*)aTxBuffer) = DUMP_INTERMEDIATE_DATA_BUFFER_SIZE;
 8002ac4:	602b      	str	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002ac6:	f002 f9f5 	bl	8004eb4 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002aca:	4629      	mov	r1, r5
 8002acc:	4620      	mov	r0, r4
 8002ace:	2204      	movs	r2, #4
 8002ad0:	f012 ff9e 	bl	8015a10 <HAL_UART_Transmit_DMA>
 8002ad4:	b978      	cbnz	r0, 8002af6 <UartCmd_Get_Dump_Whole_Data_Size+0x42>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002ad6:	4620      	mov	r0, r4
 8002ad8:	f013 f9e0 	bl	8015e9c <HAL_UART_GetState>
 8002adc:	2820      	cmp	r0, #32
 8002ade:	d1fa      	bne.n	8002ad6 <UartCmd_Get_Dump_Whole_Data_Size+0x22>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002ae0:	4620      	mov	r0, r4
 8002ae2:	220a      	movs	r2, #10
 8002ae4:	4907      	ldr	r1, [pc, #28]	; (8002b04 <UartCmd_Get_Dump_Whole_Data_Size+0x50>)
 8002ae6:	f012 ffe9 	bl	8015abc <HAL_UART_Receive_DMA>
 8002aea:	b900      	cbnz	r0, 8002aee <UartCmd_Get_Dump_Whole_Data_Size+0x3a>
}
 8002aec:	bd38      	pop	{r3, r4, r5, pc}
 8002aee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8002af2:	f002 ba4b 	b.w	8004f8c <Error_Handler>
      Error_Handler();
 8002af6:	f002 fa49 	bl	8004f8c <Error_Handler>
 8002afa:	e7ec      	b.n	8002ad6 <UartCmd_Get_Dump_Whole_Data_Size+0x22>
 8002afc:	24007620 	.word	0x24007620
 8002b00:	000d28a6 	.word	0x000d28a6
 8002b04:	24007600 	.word	0x24007600

08002b08 <UartCmd_Get_NonRegression_Report_Size>:
{
 8002b08:	b538      	push	{r3, r4, r5, lr}
  *((uint32_t*)aTxBuffer) = AI_NET_OUTPUT_SIZE_BYTES;
 8002b0a:	4d11      	ldr	r5, [pc, #68]	; (8002b50 <UartCmd_Get_NonRegression_Report_Size+0x48>)
 8002b0c:	2306      	movs	r3, #6
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002b0e:	f200 547c 	addw	r4, r0, #1404	; 0x57c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002b12:	2202      	movs	r2, #2
 8002b14:	4628      	mov	r0, r5
 8002b16:	21a0      	movs	r1, #160	; 0xa0
  *((uint32_t*)aTxBuffer) = AI_NET_OUTPUT_SIZE_BYTES;
 8002b18:	602b      	str	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002b1a:	f002 f9cb 	bl	8004eb4 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002b1e:	4629      	mov	r1, r5
 8002b20:	4620      	mov	r0, r4
 8002b22:	2204      	movs	r2, #4
 8002b24:	f012 ff74 	bl	8015a10 <HAL_UART_Transmit_DMA>
 8002b28:	b978      	cbnz	r0, 8002b4a <UartCmd_Get_NonRegression_Report_Size+0x42>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002b2a:	4620      	mov	r0, r4
 8002b2c:	f013 f9b6 	bl	8015e9c <HAL_UART_GetState>
 8002b30:	2820      	cmp	r0, #32
 8002b32:	d1fa      	bne.n	8002b2a <UartCmd_Get_NonRegression_Report_Size+0x22>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002b34:	4620      	mov	r0, r4
 8002b36:	220a      	movs	r2, #10
 8002b38:	4906      	ldr	r1, [pc, #24]	; (8002b54 <UartCmd_Get_NonRegression_Report_Size+0x4c>)
 8002b3a:	f012 ffbf 	bl	8015abc <HAL_UART_Receive_DMA>
 8002b3e:	b900      	cbnz	r0, 8002b42 <UartCmd_Get_NonRegression_Report_Size+0x3a>
}
 8002b40:	bd38      	pop	{r3, r4, r5, pc}
 8002b42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8002b46:	f002 ba21 	b.w	8004f8c <Error_Handler>
      Error_Handler();
 8002b4a:	f002 fa1f 	bl	8004f8c <Error_Handler>
 8002b4e:	e7ec      	b.n	8002b2a <UartCmd_Get_NonRegression_Report_Size+0x22>
 8002b50:	24007620 	.word	0x24007620
 8002b54:	24007600 	.word	0x24007600

08002b58 <UartCmd_Get_Validation_Report_Size>:
{
 8002b58:	b538      	push	{r3, r4, r5, lr}
  *((uint32_t*)aTxBuffer) = AI_NET_OUTPUT_SIZE*AI_NET_OUTPUT_SIZE_BYTES*NUM_FILE_PER_DIR;
 8002b5a:	4d12      	ldr	r5, [pc, #72]	; (8002ba4 <UartCmd_Get_Validation_Report_Size+0x4c>)
 8002b5c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002b60:	f200 547c 	addw	r4, r0, #1404	; 0x57c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002b64:	2202      	movs	r2, #2
 8002b66:	4628      	mov	r0, r5
 8002b68:	21a0      	movs	r1, #160	; 0xa0
  *((uint32_t*)aTxBuffer) = AI_NET_OUTPUT_SIZE*AI_NET_OUTPUT_SIZE_BYTES*NUM_FILE_PER_DIR;
 8002b6a:	602b      	str	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002b6c:	f002 f9a2 	bl	8004eb4 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002b70:	4629      	mov	r1, r5
 8002b72:	4620      	mov	r0, r4
 8002b74:	2204      	movs	r2, #4
 8002b76:	f012 ff4b 	bl	8015a10 <HAL_UART_Transmit_DMA>
 8002b7a:	b978      	cbnz	r0, 8002b9c <UartCmd_Get_Validation_Report_Size+0x44>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002b7c:	4620      	mov	r0, r4
 8002b7e:	f013 f98d 	bl	8015e9c <HAL_UART_GetState>
 8002b82:	2820      	cmp	r0, #32
 8002b84:	d1fa      	bne.n	8002b7c <UartCmd_Get_Validation_Report_Size+0x24>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002b86:	4620      	mov	r0, r4
 8002b88:	220a      	movs	r2, #10
 8002b8a:	4907      	ldr	r1, [pc, #28]	; (8002ba8 <UartCmd_Get_Validation_Report_Size+0x50>)
 8002b8c:	f012 ff96 	bl	8015abc <HAL_UART_Receive_DMA>
 8002b90:	b900      	cbnz	r0, 8002b94 <UartCmd_Get_Validation_Report_Size+0x3c>
}
 8002b92:	bd38      	pop	{r3, r4, r5, pc}
 8002b94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8002b98:	f002 b9f8 	b.w	8004f8c <Error_Handler>
      Error_Handler();
 8002b9c:	f002 f9f6 	bl	8004f8c <Error_Handler>
 8002ba0:	e7ec      	b.n	8002b7c <UartCmd_Get_Validation_Report_Size+0x24>
 8002ba2:	bf00      	nop
 8002ba4:	24007620 	.word	0x24007620
 8002ba8:	24007600 	.word	0x24007600

08002bac <UartCmd_Get_Timing_Report_Size>:
{
 8002bac:	b538      	push	{r3, r4, r5, lr}
  *((uint32_t*)aTxBuffer) = APP_FRAMEOPERATION_NUM*sizeof(uint32_t);
 8002bae:	4d11      	ldr	r5, [pc, #68]	; (8002bf4 <UartCmd_Get_Timing_Report_Size+0x48>)
 8002bb0:	2314      	movs	r3, #20
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002bb2:	f200 547c 	addw	r4, r0, #1404	; 0x57c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	4628      	mov	r0, r5
 8002bba:	21a0      	movs	r1, #160	; 0xa0
  *((uint32_t*)aTxBuffer) = APP_FRAMEOPERATION_NUM*sizeof(uint32_t);
 8002bbc:	602b      	str	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002bbe:	f002 f979 	bl	8004eb4 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002bc2:	4629      	mov	r1, r5
 8002bc4:	4620      	mov	r0, r4
 8002bc6:	2204      	movs	r2, #4
 8002bc8:	f012 ff22 	bl	8015a10 <HAL_UART_Transmit_DMA>
 8002bcc:	b978      	cbnz	r0, 8002bee <UartCmd_Get_Timing_Report_Size+0x42>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002bce:	4620      	mov	r0, r4
 8002bd0:	f013 f964 	bl	8015e9c <HAL_UART_GetState>
 8002bd4:	2820      	cmp	r0, #32
 8002bd6:	d1fa      	bne.n	8002bce <UartCmd_Get_Timing_Report_Size+0x22>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002bd8:	4620      	mov	r0, r4
 8002bda:	220a      	movs	r2, #10
 8002bdc:	4906      	ldr	r1, [pc, #24]	; (8002bf8 <UartCmd_Get_Timing_Report_Size+0x4c>)
 8002bde:	f012 ff6d 	bl	8015abc <HAL_UART_Receive_DMA>
 8002be2:	b900      	cbnz	r0, 8002be6 <UartCmd_Get_Timing_Report_Size+0x3a>
}
 8002be4:	bd38      	pop	{r3, r4, r5, pc}
 8002be6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8002bea:	f002 b9cf 	b.w	8004f8c <Error_Handler>
      Error_Handler();
 8002bee:	f002 f9cd 	bl	8004f8c <Error_Handler>
 8002bf2:	e7ec      	b.n	8002bce <UartCmd_Get_Timing_Report_Size+0x22>
 8002bf4:	24007620 	.word	0x24007620
 8002bf8:	24007600 	.word	0x24007600

08002bfc <UartCmd_Get_NonRegression_Debug_Report_Size>:
{
 8002bfc:	b538      	push	{r3, r4, r5, lr}
  *((uint32_t*)aTxBuffer) = DUMP_INTERMEDIATE_DATA_BUFFER_SIZE*2;
 8002bfe:	4d11      	ldr	r5, [pc, #68]	; (8002c44 <UartCmd_Get_NonRegression_Debug_Report_Size+0x48>)
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002c00:	f200 547c 	addw	r4, r0, #1404	; 0x57c
  *((uint32_t*)aTxBuffer) = DUMP_INTERMEDIATE_DATA_BUFFER_SIZE*2;
 8002c04:	4b10      	ldr	r3, [pc, #64]	; (8002c48 <UartCmd_Get_NonRegression_Debug_Report_Size+0x4c>)
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002c06:	2202      	movs	r2, #2
 8002c08:	4628      	mov	r0, r5
 8002c0a:	21a0      	movs	r1, #160	; 0xa0
  *((uint32_t*)aTxBuffer) = DUMP_INTERMEDIATE_DATA_BUFFER_SIZE*2;
 8002c0c:	602b      	str	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002c0e:	f002 f951 	bl	8004eb4 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002c12:	4629      	mov	r1, r5
 8002c14:	4620      	mov	r0, r4
 8002c16:	2204      	movs	r2, #4
 8002c18:	f012 fefa 	bl	8015a10 <HAL_UART_Transmit_DMA>
 8002c1c:	b978      	cbnz	r0, 8002c3e <UartCmd_Get_NonRegression_Debug_Report_Size+0x42>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002c1e:	4620      	mov	r0, r4
 8002c20:	f013 f93c 	bl	8015e9c <HAL_UART_GetState>
 8002c24:	2820      	cmp	r0, #32
 8002c26:	d1fa      	bne.n	8002c1e <UartCmd_Get_NonRegression_Debug_Report_Size+0x22>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002c28:	4620      	mov	r0, r4
 8002c2a:	220a      	movs	r2, #10
 8002c2c:	4907      	ldr	r1, [pc, #28]	; (8002c4c <UartCmd_Get_NonRegression_Debug_Report_Size+0x50>)
 8002c2e:	f012 ff45 	bl	8015abc <HAL_UART_Receive_DMA>
 8002c32:	b900      	cbnz	r0, 8002c36 <UartCmd_Get_NonRegression_Debug_Report_Size+0x3a>
}
 8002c34:	bd38      	pop	{r3, r4, r5, pc}
 8002c36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8002c3a:	f002 b9a7 	b.w	8004f8c <Error_Handler>
      Error_Handler();
 8002c3e:	f002 f9a5 	bl	8004f8c <Error_Handler>
 8002c42:	e7ec      	b.n	8002c1e <UartCmd_Get_NonRegression_Debug_Report_Size+0x22>
 8002c44:	24007620 	.word	0x24007620
 8002c48:	001a514c 	.word	0x001a514c
 8002c4c:	24007600 	.word	0x24007600

08002c50 <UartCmd_Trigger_Capture>:
{
 8002c50:	b538      	push	{r3, r4, r5, lr}
  if((Test_Context_Ptr->UartContext.uart_host_requested_mode==CAPTURE)&&(Test_Context_Ptr->UartContext.uart_host_requested_capture_delay==0))
 8002c52:	f890 3564 	ldrb.w	r3, [r0, #1380]	; 0x564
 8002c56:	2b04      	cmp	r3, #4
 8002c58:	d102      	bne.n	8002c60 <UartCmd_Trigger_Capture+0x10>
 8002c5a:	f8d0 3570 	ldr.w	r3, [r0, #1392]	; 0x570
 8002c5e:	b1fb      	cbz	r3, 8002ca0 <UartCmd_Trigger_Capture+0x50>
    *(aTxBuffer) = CMD_ERROR_EVT;
 8002c60:	4d14      	ldr	r5, [pc, #80]	; (8002cb4 <UartCmd_Trigger_Capture+0x64>)
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002c62:	f200 547c 	addw	r4, r0, #1404	; 0x57c
    *(aTxBuffer) = CMD_ERROR_EVT;
 8002c66:	2304      	movs	r3, #4
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002c68:	2202      	movs	r2, #2
 8002c6a:	4628      	mov	r0, r5
 8002c6c:	21a0      	movs	r1, #160	; 0xa0
    *(aTxBuffer) = CMD_ERROR_EVT;
 8002c6e:	702b      	strb	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002c70:	f002 f920 	bl	8004eb4 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002c74:	4629      	mov	r1, r5
 8002c76:	4620      	mov	r0, r4
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f012 fec9 	bl	8015a10 <HAL_UART_Transmit_DMA>
 8002c7e:	b9a8      	cbnz	r0, 8002cac <UartCmd_Trigger_Capture+0x5c>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002c80:	4620      	mov	r0, r4
 8002c82:	f013 f90b 	bl	8015e9c <HAL_UART_GetState>
 8002c86:	2820      	cmp	r0, #32
 8002c88:	d1fa      	bne.n	8002c80 <UartCmd_Trigger_Capture+0x30>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002c8a:	4620      	mov	r0, r4
 8002c8c:	220a      	movs	r2, #10
 8002c8e:	490a      	ldr	r1, [pc, #40]	; (8002cb8 <UartCmd_Trigger_Capture+0x68>)
 8002c90:	f012 ff14 	bl	8015abc <HAL_UART_Receive_DMA>
 8002c94:	b900      	cbnz	r0, 8002c98 <UartCmd_Trigger_Capture+0x48>
}
 8002c96:	bd38      	pop	{r3, r4, r5, pc}
 8002c98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8002c9c:	f002 b976 	b.w	8004f8c <Error_Handler>
    Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	f8c0 3560 	str.w	r3, [r0, #1376]	; 0x560
    Test_Context_Ptr->CaptureContext.capture_state = 1;
 8002ca6:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
}
 8002caa:	bd38      	pop	{r3, r4, r5, pc}
      Error_Handler();
 8002cac:	f002 f96e 	bl	8004f8c <Error_Handler>
 8002cb0:	e7e6      	b.n	8002c80 <UartCmd_Trigger_Capture+0x30>
 8002cb2:	bf00      	nop
 8002cb4:	24007620 	.word	0x24007620
 8002cb8:	24007600 	.word	0x24007600

08002cbc <UartCmd_Trigger_Dump>:
{
 8002cbc:	b538      	push	{r3, r4, r5, lr}
  if(Test_Context_Ptr->UartContext.uart_host_requested_mode==DUMP)
 8002cbe:	f890 3564 	ldrb.w	r3, [r0, #1380]	; 0x564
 8002cc2:	2b03      	cmp	r3, #3
 8002cc4:	d110      	bne.n	8002ce8 <UartCmd_Trigger_Dump+0x2c>
    Test_Context_Ptr->UartContext.uart_host_requested_dump_number=*(uint16_t*)(data_buffer);
 8002cc6:	880c      	ldrh	r4, [r1, #0]
      dump_output_buff[i]=0x00;
 8002cc8:	2200      	movs	r2, #0
 8002cca:	4b19      	ldr	r3, [pc, #100]	; (8002d30 <UartCmd_Trigger_Dump+0x74>)
    Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8002ccc:	2101      	movs	r1, #1
    Test_Context_Ptr->UartContext.uart_host_requested_dump_number=*(uint16_t*)(data_buffer);
 8002cce:	f8c0 4568 	str.w	r4, [r0, #1384]	; 0x568
    Test_Context_Ptr->UartContext.uart_cmd_ongoing = 1;
 8002cd2:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    Test_Context_Ptr->DumpContext.dump_state = 1;
 8002cd6:	f8c0 10b8 	str.w	r1, [r0, #184]	; 0xb8
      dump_output_buff[i]=0x00;
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	605a      	str	r2, [r3, #4]
 8002cde:	609a      	str	r2, [r3, #8]
 8002ce0:	60da      	str	r2, [r3, #12]
 8002ce2:	611a      	str	r2, [r3, #16]
 8002ce4:	615a      	str	r2, [r3, #20]
}
 8002ce6:	bd38      	pop	{r3, r4, r5, pc}
    *(aTxBuffer) = CMD_ERROR_EVT;
 8002ce8:	4d12      	ldr	r5, [pc, #72]	; (8002d34 <UartCmd_Trigger_Dump+0x78>)
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002cea:	f200 547c 	addw	r4, r0, #1404	; 0x57c
    *(aTxBuffer) = CMD_ERROR_EVT;
 8002cee:	2304      	movs	r3, #4
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002cf0:	2202      	movs	r2, #2
 8002cf2:	4628      	mov	r0, r5
 8002cf4:	21a0      	movs	r1, #160	; 0xa0
    *(aTxBuffer) = CMD_ERROR_EVT;
 8002cf6:	702b      	strb	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002cf8:	f002 f8dc 	bl	8004eb4 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002cfc:	4629      	mov	r1, r5
 8002cfe:	4620      	mov	r0, r4
 8002d00:	2201      	movs	r2, #1
 8002d02:	f012 fe85 	bl	8015a10 <HAL_UART_Transmit_DMA>
 8002d06:	b978      	cbnz	r0, 8002d28 <UartCmd_Trigger_Dump+0x6c>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002d08:	4620      	mov	r0, r4
 8002d0a:	f013 f8c7 	bl	8015e9c <HAL_UART_GetState>
 8002d0e:	2820      	cmp	r0, #32
 8002d10:	d1fa      	bne.n	8002d08 <UartCmd_Trigger_Dump+0x4c>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002d12:	4620      	mov	r0, r4
 8002d14:	220a      	movs	r2, #10
 8002d16:	4908      	ldr	r1, [pc, #32]	; (8002d38 <UartCmd_Trigger_Dump+0x7c>)
 8002d18:	f012 fed0 	bl	8015abc <HAL_UART_Receive_DMA>
 8002d1c:	2800      	cmp	r0, #0
 8002d1e:	d0e2      	beq.n	8002ce6 <UartCmd_Trigger_Dump+0x2a>
}
 8002d20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8002d24:	f002 b932 	b.w	8004f8c <Error_Handler>
      Error_Handler();
 8002d28:	f002 f930 	bl	8004f8c <Error_Handler>
 8002d2c:	e7ec      	b.n	8002d08 <UartCmd_Trigger_Dump+0x4c>
 8002d2e:	bf00      	nop
 8002d30:	d0cdae80 	.word	0xd0cdae80
 8002d34:	24007620 	.word	0x24007620
 8002d38:	24007600 	.word	0x24007600

08002d3c <UartCmd_Upload_NonRegression_Debug_Report>:
{
 8002d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d3e:	4d31      	ldr	r5, [pc, #196]	; (8002e04 <UartCmd_Upload_NonRegression_Debug_Report+0xc8>)
 8002d40:	f200 547c 	addw	r4, r0, #1404	; 0x57c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002d44:	2202      	movs	r2, #2
 8002d46:	4930      	ldr	r1, [pc, #192]	; (8002e08 <UartCmd_Upload_NonRegression_Debug_Report+0xcc>)
 8002d48:	4628      	mov	r0, r5
 8002d4a:	4f30      	ldr	r7, [pc, #192]	; (8002e0c <UartCmd_Upload_NonRegression_Debug_Report+0xd0>)
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8002d4c:	f64f 76ff 	movw	r6, #65535	; 0xffff
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002d50:	f002 f8b0 	bl	8004eb4 <UTILS_DCache_Coherency_Maintenance>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8002d54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d58:	4629      	mov	r1, r5
 8002d5a:	4620      	mov	r0, r4
 8002d5c:	f012 fe58 	bl	8015a10 <HAL_UART_Transmit_DMA>
 8002d60:	2800      	cmp	r0, #0
 8002d62:	d142      	bne.n	8002dea <UartCmd_Upload_NonRegression_Debug_Report+0xae>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002d64:	4620      	mov	r0, r4
 8002d66:	f013 f899 	bl	8015e9c <HAL_UART_GetState>
 8002d6a:	2820      	cmp	r0, #32
 8002d6c:	d1fa      	bne.n	8002d64 <UartCmd_Upload_NonRegression_Debug_Report+0x28>
 8002d6e:	4435      	add	r5, r6
    for(i=0;i<dma_xfer_num;i++)
 8002d70:	42af      	cmp	r7, r5
 8002d72:	d1ef      	bne.n	8002d54 <UartCmd_Upload_NonRegression_Debug_Report+0x18>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), TxDataTransferSize%0xFFFF)!= HAL_OK)
 8002d74:	f642 02b3 	movw	r2, #10419	; 0x28b3
 8002d78:	4924      	ldr	r1, [pc, #144]	; (8002e0c <UartCmd_Upload_NonRegression_Debug_Report+0xd0>)
 8002d7a:	4620      	mov	r0, r4
 8002d7c:	f012 fe48 	bl	8015a10 <HAL_UART_Transmit_DMA>
 8002d80:	2800      	cmp	r0, #0
 8002d82:	d13c      	bne.n	8002dfe <UartCmd_Upload_NonRegression_Debug_Report+0xc2>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002d84:	4620      	mov	r0, r4
 8002d86:	f013 f889 	bl	8015e9c <HAL_UART_GetState>
 8002d8a:	2820      	cmp	r0, #32
 8002d8c:	d1fa      	bne.n	8002d84 <UartCmd_Upload_NonRegression_Debug_Report+0x48>
 8002d8e:	4d20      	ldr	r5, [pc, #128]	; (8002e10 <UartCmd_Upload_NonRegression_Debug_Report+0xd4>)
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8002d90:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8002d94:	4e1f      	ldr	r6, [pc, #124]	; (8002e14 <UartCmd_Upload_NonRegression_Debug_Report+0xd8>)
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002d96:	2202      	movs	r2, #2
 8002d98:	491b      	ldr	r1, [pc, #108]	; (8002e08 <UartCmd_Upload_NonRegression_Debug_Report+0xcc>)
 8002d9a:	4628      	mov	r0, r5
 8002d9c:	f002 f88a 	bl	8004eb4 <UTILS_DCache_Coherency_Maintenance>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8002da0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002da4:	4629      	mov	r1, r5
 8002da6:	4620      	mov	r0, r4
 8002da8:	f012 fe32 	bl	8015a10 <HAL_UART_Transmit_DMA>
 8002dac:	b9d0      	cbnz	r0, 8002de4 <UartCmd_Upload_NonRegression_Debug_Report+0xa8>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002dae:	4620      	mov	r0, r4
 8002db0:	f013 f874 	bl	8015e9c <HAL_UART_GetState>
 8002db4:	2820      	cmp	r0, #32
 8002db6:	d1fa      	bne.n	8002dae <UartCmd_Upload_NonRegression_Debug_Report+0x72>
 8002db8:	443d      	add	r5, r7
    for(i=0;i<dma_xfer_num;i++)
 8002dba:	42ae      	cmp	r6, r5
 8002dbc:	d1f0      	bne.n	8002da0 <UartCmd_Upload_NonRegression_Debug_Report+0x64>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), TxDataTransferSize%0xFFFF)!= HAL_OK)
 8002dbe:	f642 02b3 	movw	r2, #10419	; 0x28b3
 8002dc2:	4914      	ldr	r1, [pc, #80]	; (8002e14 <UartCmd_Upload_NonRegression_Debug_Report+0xd8>)
 8002dc4:	4620      	mov	r0, r4
 8002dc6:	f012 fe23 	bl	8015a10 <HAL_UART_Transmit_DMA>
 8002dca:	b9a8      	cbnz	r0, 8002df8 <UartCmd_Upload_NonRegression_Debug_Report+0xbc>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002dcc:	4620      	mov	r0, r4
 8002dce:	f013 f865 	bl	8015e9c <HAL_UART_GetState>
 8002dd2:	2820      	cmp	r0, #32
 8002dd4:	d1fa      	bne.n	8002dcc <UartCmd_Upload_NonRegression_Debug_Report+0x90>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002dd6:	4620      	mov	r0, r4
 8002dd8:	220a      	movs	r2, #10
 8002dda:	490f      	ldr	r1, [pc, #60]	; (8002e18 <UartCmd_Upload_NonRegression_Debug_Report+0xdc>)
 8002ddc:	f012 fe6e 	bl	8015abc <HAL_UART_Receive_DMA>
 8002de0:	b930      	cbnz	r0, 8002df0 <UartCmd_Upload_NonRegression_Debug_Report+0xb4>
}
 8002de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        Error_Handler();
 8002de4:	f002 f8d2 	bl	8004f8c <Error_Handler>
 8002de8:	e7e1      	b.n	8002dae <UartCmd_Upload_NonRegression_Debug_Report+0x72>
 8002dea:	f002 f8cf 	bl	8004f8c <Error_Handler>
 8002dee:	e7b9      	b.n	8002d64 <UartCmd_Upload_NonRegression_Debug_Report+0x28>
}
 8002df0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Error_Handler();
 8002df4:	f002 b8ca 	b.w	8004f8c <Error_Handler>
        Error_Handler();
 8002df8:	f002 f8c8 	bl	8004f8c <Error_Handler>
 8002dfc:	e7e6      	b.n	8002dcc <UartCmd_Upload_NonRegression_Debug_Report+0x90>
 8002dfe:	f002 f8c5 	bl	8004f8c <Error_Handler>
 8002e02:	e7bf      	b.n	8002d84 <UartCmd_Upload_NonRegression_Debug_Report+0x48>
 8002e04:	d0cde780 	.word	0xd0cde780
 8002e08:	000d28c0 	.word	0x000d28c0
 8002e0c:	d0dae773 	.word	0xd0dae773
 8002e10:	d0db1040 	.word	0xd0db1040
 8002e14:	d0e81033 	.word	0xd0e81033
 8002e18:	24007600 	.word	0x24007600

08002e1c <UartCmd_Upload_Dump_Whole_Data>:
{
 8002e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if((*(uint8_t*)(data_buffer))== 0x00)
 8002e1e:	780b      	ldrb	r3, [r1, #0]
 8002e20:	f200 547c 	addw	r4, r0, #1404	; 0x57c
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d04e      	beq.n	8002ec6 <UartCmd_Upload_Dump_Whole_Data+0xaa>
  else if((*(uint8_t*)(data_buffer))== 0x01)
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d01a      	beq.n	8002e62 <UartCmd_Upload_Dump_Whole_Data+0x46>
    *(aTxBuffer) = CMD_ERROR_EVT;
 8002e2c:	4d3e      	ldr	r5, [pc, #248]	; (8002f28 <UartCmd_Upload_Dump_Whole_Data+0x10c>)
 8002e2e:	2304      	movs	r3, #4
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002e30:	2202      	movs	r2, #2
 8002e32:	21a0      	movs	r1, #160	; 0xa0
 8002e34:	4628      	mov	r0, r5
    *(aTxBuffer) = CMD_ERROR_EVT;
 8002e36:	702b      	strb	r3, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002e38:	f002 f83c 	bl	8004eb4 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8002e3c:	4629      	mov	r1, r5
 8002e3e:	2201      	movs	r2, #1
 8002e40:	4620      	mov	r0, r4
 8002e42:	f012 fde5 	bl	8015a10 <HAL_UART_Transmit_DMA>
 8002e46:	2800      	cmp	r0, #0
 8002e48:	d165      	bne.n	8002f16 <UartCmd_Upload_Dump_Whole_Data+0xfa>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002e4a:	4620      	mov	r0, r4
 8002e4c:	f013 f826 	bl	8015e9c <HAL_UART_GetState>
 8002e50:	2820      	cmp	r0, #32
 8002e52:	d1fa      	bne.n	8002e4a <UartCmd_Upload_Dump_Whole_Data+0x2e>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8002e54:	4620      	mov	r0, r4
 8002e56:	220a      	movs	r2, #10
 8002e58:	4934      	ldr	r1, [pc, #208]	; (8002f2c <UartCmd_Upload_Dump_Whole_Data+0x110>)
 8002e5a:	f012 fe2f 	bl	8015abc <HAL_UART_Receive_DMA>
 8002e5e:	bb70      	cbnz	r0, 8002ebe <UartCmd_Upload_Dump_Whole_Data+0xa2>
}
 8002e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e62:	4d33      	ldr	r5, [pc, #204]	; (8002f30 <UartCmd_Upload_Dump_Whole_Data+0x114>)
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8002e64:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8002e68:	4e32      	ldr	r6, [pc, #200]	; (8002f34 <UartCmd_Upload_Dump_Whole_Data+0x118>)
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	4932      	ldr	r1, [pc, #200]	; (8002f38 <UartCmd_Upload_Dump_Whole_Data+0x11c>)
 8002e6e:	4628      	mov	r0, r5
 8002e70:	f002 f820 	bl	8004eb4 <UTILS_DCache_Coherency_Maintenance>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8002e74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e78:	4629      	mov	r1, r5
 8002e7a:	4620      	mov	r0, r4
 8002e7c:	f012 fdc8 	bl	8015a10 <HAL_UART_Transmit_DMA>
 8002e80:	b9d0      	cbnz	r0, 8002eb8 <UartCmd_Upload_Dump_Whole_Data+0x9c>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002e82:	4620      	mov	r0, r4
 8002e84:	f013 f80a 	bl	8015e9c <HAL_UART_GetState>
 8002e88:	2820      	cmp	r0, #32
 8002e8a:	d1fa      	bne.n	8002e82 <UartCmd_Upload_Dump_Whole_Data+0x66>
 8002e8c:	443d      	add	r5, r7
    for(i=0;i<dma_xfer_num;i++)
 8002e8e:	42ae      	cmp	r6, r5
 8002e90:	d1f0      	bne.n	8002e74 <UartCmd_Upload_Dump_Whole_Data+0x58>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), TxDataTransferSize%0xFFFF)!= HAL_OK)
 8002e92:	f642 02b3 	movw	r2, #10419	; 0x28b3
 8002e96:	4927      	ldr	r1, [pc, #156]	; (8002f34 <UartCmd_Upload_Dump_Whole_Data+0x118>)
 8002e98:	4620      	mov	r0, r4
 8002e9a:	f012 fdb9 	bl	8015a10 <HAL_UART_Transmit_DMA>
 8002e9e:	2800      	cmp	r0, #0
 8002ea0:	d13c      	bne.n	8002f1c <UartCmd_Upload_Dump_Whole_Data+0x100>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002ea2:	4620      	mov	r0, r4
 8002ea4:	f012 fffa 	bl	8015e9c <HAL_UART_GetState>
 8002ea8:	2820      	cmp	r0, #32
 8002eaa:	d0d3      	beq.n	8002e54 <UartCmd_Upload_Dump_Whole_Data+0x38>
 8002eac:	4620      	mov	r0, r4
 8002eae:	f012 fff5 	bl	8015e9c <HAL_UART_GetState>
 8002eb2:	2820      	cmp	r0, #32
 8002eb4:	d1f5      	bne.n	8002ea2 <UartCmd_Upload_Dump_Whole_Data+0x86>
 8002eb6:	e7cd      	b.n	8002e54 <UartCmd_Upload_Dump_Whole_Data+0x38>
        Error_Handler();
 8002eb8:	f002 f868 	bl	8004f8c <Error_Handler>
 8002ebc:	e7e1      	b.n	8002e82 <UartCmd_Upload_Dump_Whole_Data+0x66>
}
 8002ebe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Error_Handler();
 8002ec2:	f002 b863 	b.w	8004f8c <Error_Handler>
 8002ec6:	4d1d      	ldr	r5, [pc, #116]	; (8002f3c <UartCmd_Upload_Dump_Whole_Data+0x120>)
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8002ec8:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8002ecc:	4e1c      	ldr	r6, [pc, #112]	; (8002f40 <UartCmd_Upload_Dump_Whole_Data+0x124>)
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8002ece:	2202      	movs	r2, #2
 8002ed0:	4919      	ldr	r1, [pc, #100]	; (8002f38 <UartCmd_Upload_Dump_Whole_Data+0x11c>)
 8002ed2:	4628      	mov	r0, r5
 8002ed4:	f001 ffee 	bl	8004eb4 <UTILS_DCache_Coherency_Maintenance>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), 0xFFFF)!= HAL_OK)
 8002ed8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002edc:	4629      	mov	r1, r5
 8002ede:	4620      	mov	r0, r4
 8002ee0:	f012 fd96 	bl	8015a10 <HAL_UART_Transmit_DMA>
 8002ee4:	b9a0      	cbnz	r0, 8002f10 <UartCmd_Upload_Dump_Whole_Data+0xf4>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002ee6:	4620      	mov	r0, r4
 8002ee8:	f012 ffd8 	bl	8015e9c <HAL_UART_GetState>
 8002eec:	2820      	cmp	r0, #32
 8002eee:	d1fa      	bne.n	8002ee6 <UartCmd_Upload_Dump_Whole_Data+0xca>
 8002ef0:	443d      	add	r5, r7
    for(i=0;i<dma_xfer_num;i++)
 8002ef2:	42ae      	cmp	r6, r5
 8002ef4:	d1f0      	bne.n	8002ed8 <UartCmd_Upload_Dump_Whole_Data+0xbc>
      if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)(TxDataBufPtr+i*0xFFFF), TxDataTransferSize%0xFFFF)!= HAL_OK)
 8002ef6:	f642 02b3 	movw	r2, #10419	; 0x28b3
 8002efa:	4911      	ldr	r1, [pc, #68]	; (8002f40 <UartCmd_Upload_Dump_Whole_Data+0x124>)
 8002efc:	4620      	mov	r0, r4
 8002efe:	f012 fd87 	bl	8015a10 <HAL_UART_Transmit_DMA>
 8002f02:	b970      	cbnz	r0, 8002f22 <UartCmd_Upload_Dump_Whole_Data+0x106>
      while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8002f04:	4620      	mov	r0, r4
 8002f06:	f012 ffc9 	bl	8015e9c <HAL_UART_GetState>
 8002f0a:	2820      	cmp	r0, #32
 8002f0c:	d1fa      	bne.n	8002f04 <UartCmd_Upload_Dump_Whole_Data+0xe8>
 8002f0e:	e7a1      	b.n	8002e54 <UartCmd_Upload_Dump_Whole_Data+0x38>
        Error_Handler();
 8002f10:	f002 f83c 	bl	8004f8c <Error_Handler>
 8002f14:	e7e7      	b.n	8002ee6 <UartCmd_Upload_Dump_Whole_Data+0xca>
      Error_Handler();
 8002f16:	f002 f839 	bl	8004f8c <Error_Handler>
 8002f1a:	e796      	b.n	8002e4a <UartCmd_Upload_Dump_Whole_Data+0x2e>
        Error_Handler();
 8002f1c:	f002 f836 	bl	8004f8c <Error_Handler>
 8002f20:	e7bf      	b.n	8002ea2 <UartCmd_Upload_Dump_Whole_Data+0x86>
 8002f22:	f002 f833 	bl	8004f8c <Error_Handler>
 8002f26:	e7ed      	b.n	8002f04 <UartCmd_Upload_Dump_Whole_Data+0xe8>
 8002f28:	24007620 	.word	0x24007620
 8002f2c:	24007600 	.word	0x24007600
 8002f30:	d0db1040 	.word	0xd0db1040
 8002f34:	d0e81033 	.word	0xd0e81033
 8002f38:	000d28c0 	.word	0x000d28c0
 8002f3c:	d0cde780 	.word	0xd0cde780
 8002f40:	d0dae773 	.word	0xd0dae773

08002f44 <TEST_Init>:
 * @param TestContext_Ptr pointer to test context
 */
static void Test_Context_Init(TestContext_TypeDef *Test_Context_Ptr)
{
  Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_LIVE;
  Test_Context_Ptr->DumpContext.dump_session_id = 0;
 8002f44:	2300      	movs	r3, #0
  Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_LIVE;
 8002f46:	2201      	movs	r2, #1
  Test_Context_Ptr->DumpContext.dump_frame_count = 0;
  Test_Context_Ptr->DumpContext.dump_state = 0;

  Test_Context_Ptr->CaptureContext.capture_file_format=RAW;
 8002f48:	2103      	movs	r1, #3
  Test_Context_Ptr->UartContext.UartHandle.Instance        = USARTx;
 8002f4a:	f8df c168 	ldr.w	ip, [pc, #360]	; 80030b4 <TEST_Init+0x170>
 * @brief Test Init
 *
 * @param Test_Context_Ptr pointer to test context
 */
void TEST_Init(TestContext_TypeDef *Test_Context_Ptr)
{
 8002f4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f50:	4604      	mov	r4, r0
  Test_Context_Ptr->CaptureContext.capture_file_format=RAW;
 8002f52:	f880 10bc 	strb.w	r1, [r0, #188]	; 0xbc
  Test_Context_Ptr->DumpContext.Dump_FrameSource=CAMERA_LIVE;
 8002f56:	7102      	strb	r2, [r0, #4]
  Test_Context_Ptr->ValidationContext.overall_loss = 0.0;
 8002f58:	2100      	movs	r1, #0
  Test_Context_Ptr->ValidationContext.nbr_tested = 1;
 8002f5a:	f8c0 2120 	str.w	r2, [r0, #288]	; 0x120
  Test_Context_Ptr->UartContext.UartHandle.Init.BaudRate   = 115200;
 8002f5e:	f44f 36e1 	mov.w	r6, #115200	; 0x1c200
  Test_Context_Ptr->DumpContext.dump_state = 0;
 8002f62:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
  Test_Context_Ptr->UartContext.UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8002f66:	250c      	movs	r5, #12
  Test_Context_Ptr->CaptureContext.capture_frame_count=0;
 8002f68:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
  if(HAL_UART_Init(&Test_Context_Ptr->UartContext.UartHandle) != HAL_OK)
 8002f6c:	f204 577c 	addw	r7, r4, #1404	; 0x57c
  Test_Context_Ptr->ValidationContext.validation_completed=0;
 8002f70:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
{
 8002f74:	b091      	sub	sp, #68	; 0x44
      Test_Context_Ptr->ValidationContext.valid_conf_matrix[i][j]=0;
 8002f76:	f8c0 3448 	str.w	r3, [r0, #1096]	; 0x448
 8002f7a:	f8c0 344c 	str.w	r3, [r0, #1100]	; 0x44c
 8002f7e:	f8c0 3450 	str.w	r3, [r0, #1104]	; 0x450
 8002f82:	f8c0 3454 	str.w	r3, [r0, #1108]	; 0x454
 8002f86:	f8c0 3458 	str.w	r3, [r0, #1112]	; 0x458
 8002f8a:	f8c0 345c 	str.w	r3, [r0, #1116]	; 0x45c
 8002f8e:	f8c0 3460 	str.w	r3, [r0, #1120]	; 0x460
 8002f92:	f8c0 3464 	str.w	r3, [r0, #1124]	; 0x464
 8002f96:	f8c0 3468 	str.w	r3, [r0, #1128]	; 0x468
 8002f9a:	f8c0 346c 	str.w	r3, [r0, #1132]	; 0x46c
 8002f9e:	f8c0 3470 	str.w	r3, [r0, #1136]	; 0x470
 8002fa2:	f8c0 3474 	str.w	r3, [r0, #1140]	; 0x474
 8002fa6:	f8c0 3478 	str.w	r3, [r0, #1144]	; 0x478
 8002faa:	f8c0 347c 	str.w	r3, [r0, #1148]	; 0x47c
 8002fae:	f8c0 3480 	str.w	r3, [r0, #1152]	; 0x480
 8002fb2:	f8c0 3484 	str.w	r3, [r0, #1156]	; 0x484
 8002fb6:	f8c0 3488 	str.w	r3, [r0, #1160]	; 0x488
 8002fba:	f8c0 348c 	str.w	r3, [r0, #1164]	; 0x48c
 8002fbe:	f8c0 3490 	str.w	r3, [r0, #1168]	; 0x490
 8002fc2:	f8c0 3494 	str.w	r3, [r0, #1172]	; 0x494
  Test_Context_Ptr->DumpContext.dump_frame_count = 0;
 8002fc6:	e9c0 3302 	strd	r3, r3, [r0, #8]
  Test_Context_Ptr->CaptureContext.capture_session_id=0;
 8002fca:	e9c0 3330 	strd	r3, r3, [r0, #192]	; 0xc0
  Test_Context_Ptr->ValidationContext.overall_loss = 0.0;
 8002fce:	2000      	movs	r0, #0
 8002fd0:	e9c4 0144 	strd	r0, r1, [r4, #272]	; 0x110
  Test_Context_Ptr->ValidationContext.avg_loss = 0.0;
 8002fd4:	e9c4 0146 	strd	r0, r1, [r4, #280]	; 0x118
      Test_Context_Ptr->ValidationContext.valid_conf_matrix[i][j]=0;
 8002fd8:	f8c4 3498 	str.w	r3, [r4, #1176]	; 0x498
  if(HAL_UART_Init(&Test_Context_Ptr->UartContext.UartHandle) != HAL_OK)
 8002fdc:	4638      	mov	r0, r7
      Test_Context_Ptr->ValidationContext.valid_conf_matrix[i][j]=0;
 8002fde:	f8c4 349c 	str.w	r3, [r4, #1180]	; 0x49c
 8002fe2:	f8c4 34a0 	str.w	r3, [r4, #1184]	; 0x4a0
 8002fe6:	f8c4 34a4 	str.w	r3, [r4, #1188]	; 0x4a4
 8002fea:	f8c4 34a8 	str.w	r3, [r4, #1192]	; 0x4a8
 8002fee:	f8c4 34ac 	str.w	r3, [r4, #1196]	; 0x4ac
 8002ff2:	f8c4 34b0 	str.w	r3, [r4, #1200]	; 0x4b0
 8002ff6:	f8c4 34b4 	str.w	r3, [r4, #1204]	; 0x4b4
 8002ffa:	f8c4 34b8 	str.w	r3, [r4, #1208]	; 0x4b8
 8002ffe:	f8c4 34bc 	str.w	r3, [r4, #1212]	; 0x4bc
 8003002:	f8c4 34c0 	str.w	r3, [r4, #1216]	; 0x4c0
 8003006:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
 800300a:	f8c4 34c8 	str.w	r3, [r4, #1224]	; 0x4c8
 800300e:	f8c4 34cc 	str.w	r3, [r4, #1228]	; 0x4cc
 8003012:	f8c4 34d0 	str.w	r3, [r4, #1232]	; 0x4d0
 8003016:	f8c4 34d4 	str.w	r3, [r4, #1236]	; 0x4d4
  Test_Context_Ptr->UartContext.uart_cmd_ongoing=0;
 800301a:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
  Test_Context_Ptr->UartContext.uart_host_requested_mode = NOMINAL;
 800301e:	f884 2564 	strb.w	r2, [r4, #1380]	; 0x564
  Test_Context_Ptr->UartContext.uart_host_nonreg_run=0;
 8003022:	f8c4 3578 	str.w	r3, [r4, #1400]	; 0x578
  Test_Context_Ptr->UartContext.UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8003026:	f8c4 3584 	str.w	r3, [r4, #1412]	; 0x584
  Test_Context_Ptr->UartContext.UartHandle.Init.StopBits   = UART_STOPBITS_1;
 800302a:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
  Test_Context_Ptr->UartContext.UartHandle.Init.Parity     = UART_PARITY_NONE;
 800302e:	f8c4 358c 	str.w	r3, [r4, #1420]	; 0x58c
  Test_Context_Ptr->UartContext.UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8003032:	f8c4 3594 	str.w	r3, [r4, #1428]	; 0x594
  Test_Context_Ptr->UartContext.UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8003036:	f8c4 3598 	str.w	r3, [r4, #1432]	; 0x598
  Test_Context_Ptr->UartContext.UartHandle.Init.ClockPrescaler  = UART_PRESCALER_DIV1;
 800303a:	f8c4 35a0 	str.w	r3, [r4, #1440]	; 0x5a0
  Test_Context_Ptr->UartContext.UartHandle.Init.OneBitSampling  = UART_ONE_BIT_SAMPLE_DISABLE;
 800303e:	f8c4 359c 	str.w	r3, [r4, #1436]	; 0x59c
  Test_Context_Ptr->UartContext.UartHandle.Instance        = USARTx;
 8003042:	f8c4 c57c 	str.w	ip, [r4, #1404]	; 0x57c
  Test_Context_Ptr->UartContext.UartHandle.Init.BaudRate   = 115200;
 8003046:	f8c4 6580 	str.w	r6, [r4, #1408]	; 0x580
  Test_Context_Ptr->UartContext.UartHandle.Init.Mode       = UART_MODE_TX_RX;
 800304a:	f8c4 5590 	str.w	r5, [r4, #1424]	; 0x590
  if(HAL_UART_Init(&Test_Context_Ptr->UartContext.UartHandle) != HAL_OK)
 800304e:	f012 ff83 	bl	8015f58 <HAL_UART_Init>
 8003052:	bb30      	cbnz	r0, 80030a2 <TEST_Init+0x15e>
  char alive_msg[64]="Board ON & UART link OK \n";
 8003054:	4e14      	ldr	r6, [pc, #80]	; (80030a8 <TEST_Init+0x164>)
 8003056:	466d      	mov	r5, sp
 8003058:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800305a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800305c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
  strcpy((char*)aTxBuffer, alive_msg);
 8003060:	466e      	mov	r6, sp
  char alive_msg[64]="Board ON & UART link OK \n";
 8003062:	c503      	stmia	r5!, {r0, r1}
 8003064:	2100      	movs	r1, #0
 8003066:	802a      	strh	r2, [r5, #0]
 8003068:	f10d 001a 	add.w	r0, sp, #26
 800306c:	2226      	movs	r2, #38	; 0x26
 800306e:	f023 f894 	bl	802619a <memset>
  strcpy((char*)aTxBuffer, alive_msg);
 8003072:	4d0e      	ldr	r5, [pc, #56]	; (80030ac <TEST_Init+0x168>)
 8003074:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003076:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003078:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800307c:	c503      	stmia	r5!, {r0, r1}
 800307e:	4629      	mov	r1, r5
  Uart_Tx(Test_Context_Ptr, (uint8_t*)aTxBuffer, sizeof(aTxBuffer), strlen (alive_msg));
 8003080:	4620      	mov	r0, r4
 8003082:	2319      	movs	r3, #25
  strcpy((char*)aTxBuffer, alive_msg);
 8003084:	f821 2918 	strh.w	r2, [r1], #-24
  Uart_Tx(Test_Context_Ptr, (uint8_t*)aTxBuffer, sizeof(aTxBuffer), strlen (alive_msg));
 8003088:	22a0      	movs	r2, #160	; 0xa0
 800308a:	f7fe fef1 	bl	8001e70 <Uart_Tx>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 800308e:	4638      	mov	r0, r7
 8003090:	220a      	movs	r2, #10
 8003092:	4907      	ldr	r1, [pc, #28]	; (80030b0 <TEST_Init+0x16c>)
 8003094:	f012 fd12 	bl	8015abc <HAL_UART_Receive_DMA>
 8003098:	b108      	cbz	r0, 800309e <TEST_Init+0x15a>
    Error_Handler();
 800309a:	f001 ff77 	bl	8004f8c <Error_Handler>
  Test_Context_Init(Test_Context_Ptr);

#ifndef OBJECTDETECT
  Test_ComIf_Init(Test_Context_Ptr);
#endif /* !OBJECTDETECT */
}
 800309e:	b011      	add	sp, #68	; 0x44
 80030a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 80030a2:	f001 ff73 	bl	8004f8c <Error_Handler>
 80030a6:	e7d5      	b.n	8003054 <TEST_Init+0x110>
 80030a8:	08028900 	.word	0x08028900
 80030ac:	24007620 	.word	0x24007620
 80030b0:	24007600 	.word	0x24007600
 80030b4:	40011000 	.word	0x40011000

080030b8 <TEST_CmdIf_Check>:
 * @brief Check UART status for any received frame
 *
 * @param Test_Context_Ptr pointer to test context
 */
void TEST_CmdIf_Check(TestContext_TypeDef *Test_Context_Ptr)
{
 80030b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if((HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) == HAL_UART_STATE_READY) && (Test_Context_Ptr->UartContext.uart_cmd_ongoing ==0))
 80030bc:	f200 547c 	addw	r4, r0, #1404	; 0x57c
{
 80030c0:	4605      	mov	r5, r0
  if((HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) == HAL_UART_STATE_READY) && (Test_Context_Ptr->UartContext.uart_cmd_ongoing ==0))
 80030c2:	4620      	mov	r0, r4
 80030c4:	f012 feea 	bl	8015e9c <HAL_UART_GetState>
 80030c8:	2820      	cmp	r0, #32
 80030ca:	d001      	beq.n	80030d0 <TEST_CmdIf_Check+0x18>

      /**Configure the UART in reception mode for receiving subsequent command from Host**/
      Uart_Rx(Test_Context_Ptr, aRxBuffer, RX_TRANSFER_SIZE);
    }
  }
}
 80030cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if((HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) == HAL_UART_STATE_READY) && (Test_Context_Ptr->UartContext.uart_cmd_ongoing ==0))
 80030d0:	f8d5 6560 	ldr.w	r6, [r5, #1376]	; 0x560
 80030d4:	2e00      	cmp	r6, #0
 80030d6:	d1f9      	bne.n	80030cc <TEST_CmdIf_Check+0x14>
    UTILS_DCache_Coherency_Maintenance((void *)aRxBuffer, RX_BUFFER_SIZE, INVALIDATE);
 80030d8:	4f27      	ldr	r7, [pc, #156]	; (8003178 <TEST_CmdIf_Check+0xc0>)
 80030da:	4601      	mov	r1, r0
 80030dc:	2201      	movs	r2, #1
 80030de:	4638      	mov	r0, r7
 80030e0:	f001 fee8 	bl	8004eb4 <UTILS_DCache_Coherency_Maintenance>
    if(aRxBuffer[0]< UART_CMD_NUMBER)
 80030e4:	783b      	ldrb	r3, [r7, #0]
 80030e6:	2b18      	cmp	r3, #24
 80030e8:	d91d      	bls.n	8003126 <TEST_CmdIf_Check+0x6e>
      *(aTxBuffer) = CMD_NACK_EVT;
 80030ea:	4d24      	ldr	r5, [pc, #144]	; (800317c <TEST_CmdIf_Check+0xc4>)
 80030ec:	2601      	movs	r6, #1
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80030ee:	2202      	movs	r2, #2
 80030f0:	21a0      	movs	r1, #160	; 0xa0
 80030f2:	4628      	mov	r0, r5
      *(aTxBuffer) = CMD_NACK_EVT;
 80030f4:	702e      	strb	r6, [r5, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 80030f6:	f001 fedd 	bl	8004eb4 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80030fa:	4632      	mov	r2, r6
 80030fc:	4629      	mov	r1, r5
 80030fe:	4620      	mov	r0, r4
 8003100:	f012 fc86 	bl	8015a10 <HAL_UART_Transmit_DMA>
 8003104:	bba0      	cbnz	r0, 8003170 <TEST_CmdIf_Check+0xb8>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8003106:	4620      	mov	r0, r4
 8003108:	f012 fec8 	bl	8015e9c <HAL_UART_GetState>
 800310c:	2820      	cmp	r0, #32
 800310e:	d1fa      	bne.n	8003106 <TEST_CmdIf_Check+0x4e>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8003110:	4620      	mov	r0, r4
 8003112:	220a      	movs	r2, #10
 8003114:	4918      	ldr	r1, [pc, #96]	; (8003178 <TEST_CmdIf_Check+0xc0>)
 8003116:	f012 fcd1 	bl	8015abc <HAL_UART_Receive_DMA>
 800311a:	2800      	cmp	r0, #0
 800311c:	d0d6      	beq.n	80030cc <TEST_CmdIf_Check+0x14>
}
 800311e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    Error_Handler();
 8003122:	f001 bf33 	b.w	8004f8c <Error_Handler>
      *(aTxBuffer) = CMD_ACK_EVT;
 8003126:	f8df 8054 	ldr.w	r8, [pc, #84]	; 800317c <TEST_CmdIf_Check+0xc4>
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800312a:	2202      	movs	r2, #2
 800312c:	21a0      	movs	r1, #160	; 0xa0
 800312e:	4640      	mov	r0, r8
      *(aTxBuffer) = CMD_ACK_EVT;
 8003130:	f888 6000 	strb.w	r6, [r8]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8003134:	f001 febe 	bl	8004eb4 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8003138:	4641      	mov	r1, r8
 800313a:	2201      	movs	r2, #1
 800313c:	4620      	mov	r0, r4
 800313e:	f012 fc67 	bl	8015a10 <HAL_UART_Transmit_DMA>
 8003142:	b990      	cbnz	r0, 800316a <TEST_CmdIf_Check+0xb2>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8003144:	4620      	mov	r0, r4
 8003146:	f012 fea9 	bl	8015e9c <HAL_UART_GetState>
 800314a:	2820      	cmp	r0, #32
 800314c:	d1fa      	bne.n	8003144 <TEST_CmdIf_Check+0x8c>
      HAL_Delay(500);
 800314e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003152:	f00a fc0b 	bl	800d96c <HAL_Delay>
      (*UartCmdFct_Table[*(uint8_t*)aRxBuffer])(Test_Context_Ptr, (uint8_t *)(aRxBuffer+1), 0/*not used for now*/);
 8003156:	783c      	ldrb	r4, [r7, #0]
 8003158:	4b09      	ldr	r3, [pc, #36]	; (8003180 <TEST_CmdIf_Check+0xc8>)
 800315a:	4628      	mov	r0, r5
 800315c:	2200      	movs	r2, #0
 800315e:	4909      	ldr	r1, [pc, #36]	; (8003184 <TEST_CmdIf_Check+0xcc>)
 8003160:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
}
 8003164:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      (*UartCmdFct_Table[*(uint8_t*)aRxBuffer])(Test_Context_Ptr, (uint8_t *)(aRxBuffer+1), 0/*not used for now*/);
 8003168:	4718      	bx	r3
      Error_Handler();
 800316a:	f001 ff0f 	bl	8004f8c <Error_Handler>
 800316e:	e7e9      	b.n	8003144 <TEST_CmdIf_Check+0x8c>
 8003170:	f001 ff0c 	bl	8004f8c <Error_Handler>
 8003174:	e7c7      	b.n	8003106 <TEST_CmdIf_Check+0x4e>
 8003176:	bf00      	nop
 8003178:	24007600 	.word	0x24007600
 800317c:	24007620 	.word	0x24007620
 8003180:	08029134 	.word	0x08029134
 8003184:	24007601 	.word	0x24007601

08003188 <TEST_MainMenu>:
 *        - Camera Capture
 *
 * @param Test_Context_Ptr pointer to test context
 */
void TEST_MainMenu(TestContext_TypeDef *Test_Context_Ptr)
{
 8003188:	b570      	push	{r4, r5, r6, lr}
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;

  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);

  UTIL_LCD_DrawRect(200, 10, 400, 50, UTIL_LCD_COLOR_WHITE);
 800318a:	f04f 34ff 	mov.w	r4, #4294967295
{
 800318e:	b082      	sub	sp, #8
 8003190:	4605      	mov	r5, r0
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8003192:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
  AppContext_TypeDef *App_Cxt_Ptr=Test_Context_Ptr->AppCtxPtr;
 8003196:	f8d5 663c 	ldr.w	r6, [r5, #1596]	; 0x63c
  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 800319a:	f01a f9ad 	bl	801d4f8 <UTIL_LCD_Clear>
  UTIL_LCD_DrawRect(200, 10, 400, 50, UTIL_LCD_COLOR_WHITE);
 800319e:	2332      	movs	r3, #50	; 0x32
 80031a0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80031a4:	210a      	movs	r1, #10
 80031a6:	20c8      	movs	r0, #200	; 0xc8
 80031a8:	9400      	str	r4, [sp, #0]
 80031aa:	f01a fb4b 	bl	801d844 <UTIL_LCD_DrawRect>
  UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"Operating mode", CENTER_MODE);
 80031ae:	f01a f99b 	bl	801d4e8 <UTIL_LCD_GetFont>
 80031b2:	2301      	movs	r3, #1
 80031b4:	88c1      	ldrh	r1, [r0, #6]
 80031b6:	2000      	movs	r0, #0
 80031b8:	4a6f      	ldr	r2, [pc, #444]	; (8003378 <TEST_MainMenu+0x1f0>)
 80031ba:	f01a fa63 	bl	801d684 <UTIL_LCD_DisplayStringAt>

  UTIL_LCD_DisplayStringAt(0, LINE(5), (uint8_t *)"Press one of the key of the joystick", CENTER_MODE);
 80031be:	f01a f993 	bl	801d4e8 <UTIL_LCD_GetFont>
 80031c2:	88c1      	ldrh	r1, [r0, #6]
 80031c4:	2301      	movs	r3, #1
 80031c6:	4a6d      	ldr	r2, [pc, #436]	; (800337c <TEST_MainMenu+0x1f4>)
 80031c8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80031cc:	2000      	movs	r0, #0
 80031ce:	f01a fa59 	bl	801d684 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(6), (uint8_t *)"to select an operating mode", CENTER_MODE);
 80031d2:	f01a f989 	bl	801d4e8 <UTIL_LCD_GetFont>
 80031d6:	88c1      	ldrh	r1, [r0, #6]
 80031d8:	2301      	movs	r3, #1
 80031da:	4a69      	ldr	r2, [pc, #420]	; (8003380 <TEST_MainMenu+0x1f8>)
 80031dc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80031e0:	2000      	movs	r0, #0
 80031e2:	4099      	lsls	r1, r3
 80031e4:	f01a fa4e 	bl	801d684 <UTIL_LCD_DisplayStringAt>
    uint16_t y;
  };
  const struct point_t pt_center = {.x = 400, .y = 350}; /* x,y coordinates */
  const uint16_t pt_offset = 50;                         /* pixels offset from the center (wideness of the square) */

  UTIL_LCD_DrawLine(pt_center.x - pt_offset, pt_center.y, pt_center.x, pt_center.y - pt_offset, UTIL_LCD_COLOR_WHITE);
 80031e8:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80031ec:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80031f0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80031f4:	4608      	mov	r0, r1
 80031f6:	9400      	str	r4, [sp, #0]
 80031f8:	f01a fa96 	bl	801d728 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x, pt_center.y - pt_offset, pt_center.x + pt_offset, pt_center.y, UTIL_LCD_COLOR_WHITE);
 80031fc:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8003200:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8003204:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003208:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800320c:	9400      	str	r4, [sp, #0]
 800320e:	f01a fa8b 	bl	801d728 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x + pt_offset, pt_center.y, pt_center.x, pt_center.y + pt_offset, UTIL_LCD_COLOR_WHITE);
 8003212:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003216:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800321a:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 800321e:	461a      	mov	r2, r3
 8003220:	9400      	str	r4, [sp, #0]
 8003222:	f01a fa81 	bl	801d728 <UTIL_LCD_DrawLine>
  UTIL_LCD_DrawLine(pt_center.x, pt_center.y + pt_offset, pt_center.x - pt_offset, pt_center.y, UTIL_LCD_COLOR_WHITE);
 8003226:	f44f 73af 	mov.w	r3, #350	; 0x15e
 800322a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800322e:	9400      	str	r4, [sp, #0]
 8003230:	461a      	mov	r2, r3
 8003232:	4608      	mov	r0, r1
 8003234:	f01a fa78 	bl	801d728 <UTIL_LCD_DrawLine>

  const char *appli_names[] = {"Nominal Run", "Frame Capture", "OnBoard Validation",
                                   "Memory Dump"};

  UTIL_LCD_DisplayStringAt(0, pt_center.y - pt_offset - LINE(2), (uint8_t*)appli_names[0], CENTER_MODE);//UP
 8003238:	f01a f956 	bl	801d4e8 <UTIL_LCD_GetFont>
 800323c:	2301      	movs	r3, #1
 800323e:	88c1      	ldrh	r1, [r0, #6]
 8003240:	2000      	movs	r0, #0
 8003242:	4a50      	ldr	r2, [pc, #320]	; (8003384 <TEST_MainMenu+0x1fc>)
 8003244:	4099      	lsls	r1, r3
 8003246:	f5c1 7196 	rsb	r1, r1, #300	; 0x12c
 800324a:	f01a fa1b 	bl	801d684 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(pt_center.x + pt_offset + 10, pt_center.y - LINE(1) / 2, (uint8_t*)appli_names[1], LEFT_MODE);//RIGHT
 800324e:	f01a f94b 	bl	801d4e8 <UTIL_LCD_GetFont>
 8003252:	88c1      	ldrh	r1, [r0, #6]
 8003254:	2303      	movs	r3, #3
 8003256:	4a4c      	ldr	r2, [pc, #304]	; (8003388 <TEST_MainMenu+0x200>)
 8003258:	1049      	asrs	r1, r1, #1
 800325a:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
 800325e:	f5c1 71af 	rsb	r1, r1, #350	; 0x15e
 8003262:	f01a fa0f 	bl	801d684 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, pt_center.y + pt_offset + LINE(1), (uint8_t*)appli_names[2], CENTER_MODE);//DOWN
 8003266:	f01a f93f 	bl	801d4e8 <UTIL_LCD_GetFont>
 800326a:	88c1      	ldrh	r1, [r0, #6]
 800326c:	2301      	movs	r3, #1
 800326e:	4a47      	ldr	r2, [pc, #284]	; (800338c <TEST_MainMenu+0x204>)
 8003270:	f501 71c8 	add.w	r1, r1, #400	; 0x190
 8003274:	2000      	movs	r0, #0
 8003276:	f01a fa05 	bl	801d684 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(150, pt_center.y - LINE(1) / 2, (uint8_t*)appli_names[3], LEFT_MODE);//LEFT
 800327a:	f01a f935 	bl	801d4e8 <UTIL_LCD_GetFont>
 800327e:	88c1      	ldrh	r1, [r0, #6]
 8003280:	2303      	movs	r3, #3
 8003282:	4a43      	ldr	r2, [pc, #268]	; (8003390 <TEST_MainMenu+0x208>)
 8003284:	1049      	asrs	r1, r1, #1
 8003286:	2096      	movs	r0, #150	; 0x96
 8003288:	f5c1 71af 	rsb	r1, r1, #350	; 0x15e
 800328c:	f01a f9fa 	bl	801d684 <UTIL_LCD_DisplayStringAt>

  DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8003290:	6b70      	ldr	r0, [r6, #52]	; 0x34
 8003292:	f7fe fd09 	bl	8001ca8 <DISPLAY_Refresh>

  if(Test_Context_Ptr->UartContext.uart_cmd_ongoing)
 8003296:	f8d5 3560 	ldr.w	r3, [r5, #1376]	; 0x560
 800329a:	b143      	cbz	r3, 80032ae <TEST_MainMenu+0x126>
  {
    switch (Test_Context_Ptr->UartContext.uart_host_requested_mode)
 800329c:	f895 3564 	ldrb.w	r3, [r5, #1380]	; 0x564
 80032a0:	4423      	add	r3, r4
 80032a2:	2b03      	cmp	r3, #3
 80032a4:	d827      	bhi.n	80032f6 <TEST_MainMenu+0x16e>
 80032a6:	e8df f003 	tbb	[pc, r3]
 80032aa:	2f21      	.short	0x2f21
 80032ac:	2839      	.short	0x2839
  else
  {
    JOYPin_TypeDef joy_state = JOY_NONE;
    while (joy_state == JOY_NONE)
    {
      joy_state = (JOYPin_TypeDef) BSP_JOY_GetState(JOY1, 0);
 80032ae:	2100      	movs	r1, #0
 80032b0:	4608      	mov	r0, r1
 80032b2:	f007 fdf9 	bl	800aea8 <BSP_JOY_GetState>
 80032b6:	b2c0      	uxtb	r0, r0
    while (joy_state == JOY_NONE)
 80032b8:	2800      	cmp	r0, #0
 80032ba:	d0f8      	beq.n	80032ae <TEST_MainMenu+0x126>
    }

    switch (joy_state)
 80032bc:	3802      	subs	r0, #2
 80032be:	280e      	cmp	r0, #14
 80032c0:	d80e      	bhi.n	80032e0 <TEST_MainMenu+0x158>
 80032c2:	e8df f000 	tbb	[pc, r0]
 80032c6:	0d43      	.short	0x0d43
 80032c8:	0d0d0d37 	.word	0x0d0d0d37
 80032cc:	0d0d0d08 	.word	0x0d0d0d08
 80032d0:	0d0d0d0d 	.word	0x0d0d0d0d
 80032d4:	51          	.byte	0x51
 80032d5:	00          	.byte	0x00
    {
    case JOY_RIGHT:
      FrameCaptureInit(Test_Context_Ptr);
 80032d6:	4628      	mov	r0, r5
 80032d8:	f7fe fec2 	bl	8002060 <FrameCaptureInit>
      App_Cxt_Ptr->Operating_Mode=CAPTURE;
 80032dc:	2304      	movs	r3, #4
 80032de:	7033      	strb	r3, [r6, #0]
    default:
      break;
    };

    //Tempo joystick
    HAL_Delay(200);
 80032e0:	20c8      	movs	r0, #200	; 0xc8
  }
}
 80032e2:	b002      	add	sp, #8
 80032e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_Delay(200);
 80032e8:	f00a bb40 	b.w	800d96c <HAL_Delay>
      App_Cxt_Ptr->Operating_Mode=NOMINAL;
 80032ec:	2201      	movs	r2, #1
      Test_Context_Ptr->UartContext.uart_cmd_ongoing=0;//returning to NOMINAL mode terminates the UART command processing
 80032ee:	2300      	movs	r3, #0
      App_Cxt_Ptr->Operating_Mode=NOMINAL;
 80032f0:	7032      	strb	r2, [r6, #0]
      Test_Context_Ptr->UartContext.uart_cmd_ongoing=0;//returning to NOMINAL mode terminates the UART command processing
 80032f2:	f8c5 3560 	str.w	r3, [r5, #1376]	; 0x560
}
 80032f6:	b002      	add	sp, #8
 80032f8:	bd70      	pop	{r4, r5, r6, pc}
      FrameCaptureInit(Test_Context_Ptr);
 80032fa:	4628      	mov	r0, r5
 80032fc:	f7fe feb0 	bl	8002060 <FrameCaptureInit>
      App_Cxt_Ptr->Operating_Mode=CAPTURE;
 8003300:	2304      	movs	r3, #4
 8003302:	7033      	strb	r3, [r6, #0]
}
 8003304:	b002      	add	sp, #8
 8003306:	bd70      	pop	{r4, r5, r6, pc}
      OnBoardValidInit(Test_Context_Ptr);
 8003308:	4628      	mov	r0, r5
 800330a:	f7ff f90d 	bl	8002528 <OnBoardValidInit>
      App_Cxt_Ptr->Operating_Mode=VALID;
 800330e:	2102      	movs	r1, #2
      App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready=1;
 8003310:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8003312:	2201      	movs	r2, #1
      App_Cxt_Ptr->Operating_Mode=VALID;
 8003314:	7031      	strb	r1, [r6, #0]
      App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready=1;
 8003316:	751a      	strb	r2, [r3, #20]
}
 8003318:	b002      	add	sp, #8
 800331a:	bd70      	pop	{r4, r5, r6, pc}
      MemoryDumpInit(Test_Context_Ptr);
 800331c:	4628      	mov	r0, r5
 800331e:	f7fe ff9f 	bl	8002260 <MemoryDumpInit>
      if(Test_Context_Ptr->DumpContext.Dump_FrameSource == SDCARD_FILE)
 8003322:	792b      	ldrb	r3, [r5, #4]
      App_Cxt_Ptr->Operating_Mode=DUMP;
 8003324:	2203      	movs	r2, #3
      if(Test_Context_Ptr->DumpContext.Dump_FrameSource == SDCARD_FILE)
 8003326:	4293      	cmp	r3, r2
      App_Cxt_Ptr->Operating_Mode=DUMP;
 8003328:	7032      	strb	r2, [r6, #0]
      if(Test_Context_Ptr->DumpContext.Dump_FrameSource == SDCARD_FILE)
 800332a:	d1e4      	bne.n	80032f6 <TEST_MainMenu+0x16e>
        App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready=1;
 800332c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800332e:	2201      	movs	r2, #1
 8003330:	751a      	strb	r2, [r3, #20]
 8003332:	e7e0      	b.n	80032f6 <TEST_MainMenu+0x16e>
      MemoryDumpInit(Test_Context_Ptr);
 8003334:	4628      	mov	r0, r5
 8003336:	f7fe ff93 	bl	8002260 <MemoryDumpInit>
      if(Test_Context_Ptr->DumpContext.Dump_FrameSource == SDCARD_FILE)
 800333a:	792b      	ldrb	r3, [r5, #4]
      App_Cxt_Ptr->Operating_Mode=DUMP;
 800333c:	2203      	movs	r2, #3
      if(Test_Context_Ptr->DumpContext.Dump_FrameSource == SDCARD_FILE)
 800333e:	4293      	cmp	r3, r2
      App_Cxt_Ptr->Operating_Mode=DUMP;
 8003340:	7032      	strb	r2, [r6, #0]
      if(Test_Context_Ptr->DumpContext.Dump_FrameSource == SDCARD_FILE)
 8003342:	d1cd      	bne.n	80032e0 <TEST_MainMenu+0x158>
        App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready=1;
 8003344:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8003346:	2201      	movs	r2, #1
 8003348:	751a      	strb	r2, [r3, #20]
 800334a:	e7c9      	b.n	80032e0 <TEST_MainMenu+0x158>
      OnBoardValidInit(Test_Context_Ptr);
 800334c:	4628      	mov	r0, r5
 800334e:	f7ff f8eb 	bl	8002528 <OnBoardValidInit>
      App_Cxt_Ptr->Operating_Mode=VALID;
 8003352:	2102      	movs	r1, #2
      App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready=1;
 8003354:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8003356:	2201      	movs	r2, #1
    HAL_Delay(200);
 8003358:	20c8      	movs	r0, #200	; 0xc8
      App_Cxt_Ptr->Operating_Mode=VALID;
 800335a:	7031      	strb	r1, [r6, #0]
      App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready=1;
 800335c:	751a      	strb	r2, [r3, #20]
}
 800335e:	b002      	add	sp, #8
 8003360:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_Delay(200);
 8003364:	f00a bb02 	b.w	800d96c <HAL_Delay>
      App_Cxt_Ptr->Operating_Mode=NOMINAL;
 8003368:	2301      	movs	r3, #1
    HAL_Delay(200);
 800336a:	20c8      	movs	r0, #200	; 0xc8
      App_Cxt_Ptr->Operating_Mode=NOMINAL;
 800336c:	7033      	strb	r3, [r6, #0]
}
 800336e:	b002      	add	sp, #8
 8003370:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_Delay(200);
 8003374:	f00a bafa 	b.w	800d96c <HAL_Delay>
 8003378:	08028f8c 	.word	0x08028f8c
 800337c:	08028aa4 	.word	0x08028aa4
 8003380:	08028f9c 	.word	0x08028f9c
 8003384:	080291ec 	.word	0x080291ec
 8003388:	080291f8 	.word	0x080291f8
 800338c:	08029208 	.word	0x08029208
 8003390:	0802921c 	.word	0x0802921c

08003394 <TEST_GetNextDumpInput>:
 *
 * @param TestContext_Ptr pointer to test context
 * @param DestBuffPtr pointer to the destination buffer where the input file data content is copied to
 */
void TEST_GetNextDumpInput(TestContext_TypeDef *TestContext_Ptr, uint8_t * DestBuffPtr)
{
 8003394:	b5f0      	push	{r4, r5, r6, r7, lr}
  DIR class_dir;
  FILINFO img_fno;
#if CAMERA_CAPTURE_RES == VGA_640_480_RES
  char  class_path[64]=  "/dump_src_image_vga";
 8003396:	4d1a      	ldr	r5, [pc, #104]	; (8003400 <TEST_GetNextDumpInput+0x6c>)
{
 8003398:	b0e5      	sub	sp, #404	; 0x194
 800339a:	4607      	mov	r7, r0
 800339c:	460e      	mov	r6, r1
  char  class_path[64]=  "/dump_src_image_vga";
 800339e:	ac0e      	add	r4, sp, #56	; 0x38
 80033a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033a2:	682d      	ldr	r5, [r5, #0]
 80033a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033a6:	222c      	movs	r2, #44	; 0x2c
 80033a8:	2100      	movs	r1, #0
 80033aa:	a813      	add	r0, sp, #76	; 0x4c
 80033ac:	6025      	str	r5, [r4, #0]
 80033ae:	f022 fef4 	bl	802619a <memset>
#endif
  stm32fs_err_t err;
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;


  STM32Fs_OpenDir(class_path, &class_dir);
 80033b2:	a901      	add	r1, sp, #4
 80033b4:	a80e      	add	r0, sp, #56	; 0x38
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 80033b6:	f8d7 563c 	ldr.w	r5, [r7, #1596]	; 0x63c
  STM32Fs_OpenDir(class_path, &class_dir);
 80033ba:	f019 fa8d 	bl	801c8d8 <STM32Fs_OpenDir>

  /* For each image in this directory (i.e class) */
  if(STM32Fs_GetNextFile(&class_dir, &img_fno) != STM32FS_ERROR_NONE)
 80033be:	a801      	add	r0, sp, #4
 80033c0:	a91e      	add	r1, sp, #120	; 0x78
 80033c2:	f019 faad 	bl	801c920 <STM32Fs_GetNextFile>
 80033c6:	b100      	cbz	r0, 80033ca <TEST_GetNextDumpInput+0x36>
 80033c8:	e7fe      	b.n	80033c8 <TEST_GetNextDumpInput+0x34>
    while(1);

  strcpy(tmp_msg, class_path);
 80033ca:	4c0e      	ldr	r4, [pc, #56]	; (8003404 <TEST_GetNextDumpInput+0x70>)
 80033cc:	a90e      	add	r1, sp, #56	; 0x38
 80033ce:	4620      	mov	r0, r4
 80033d0:	f023 fbfe 	bl	8026bd0 <stpcpy>
  strcat(tmp_msg, "/");
 80033d4:	232f      	movs	r3, #47	; 0x2f
  strcat(tmp_msg, img_fno.fname);
 80033d6:	f10d 018e 	add.w	r1, sp, #142	; 0x8e
 80033da:	3001      	adds	r0, #1
  strcat(tmp_msg, "/");
 80033dc:	f800 3c01 	strb.w	r3, [r0, #-1]
  strcat(tmp_msg, img_fno.fname);
 80033e0:	f023 fbff 	bl	8026be2 <strcpy>

  /* Read the image to DestBuffPtr */
  err = STM23Fs_ReadImageBMP(tmp_msg, DestBuffPtr);
 80033e4:	4631      	mov	r1, r6
 80033e6:	4620      	mov	r0, r4
 80033e8:	f019 fe76 	bl	801d0d8 <STM23Fs_ReadImageBMP>
  if (err != STM32FS_ERROR_NONE)
 80033ec:	b100      	cbz	r0, 80033f0 <TEST_GetNextDumpInput+0x5c>
 80033ee:	e7fe      	b.n	80033ee <TEST_GetNextDumpInput+0x5a>
  {
    while(1);
  }

  f_closedir(&class_dir);
 80033f0:	a801      	add	r0, sp, #4
 80033f2:	f018 f92b 	bl	801b64c <f_closedir>

  App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready = 1;
 80033f6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80033f8:	2201      	movs	r2, #1
 80033fa:	751a      	strb	r2, [r3, #20]
}
 80033fc:	b065      	add	sp, #404	; 0x194
 80033fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003400:	080288c0 	.word	0x080288c0
 8003404:	24007fc8 	.word	0x24007fc8

08003408 <TEST_GetNextValidationInput>:
 *
 * @param TestContext_Ptr pointer to test context
 * @param DestBuffPtr pointer to the destination buffer where the input file data content is copied to
 */
void TEST_GetNextValidationInput(TestContext_TypeDef *TestContext_Ptr, uint8_t * DestBuffPtr)
{
 8003408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DestBuffPtr = App_Cxt_Ptr->Camera_ContextPtr->camera_capture_buffer;
#endif
#endif /* OBJECTDETECT */

  /* Get next image in this directory (i.e class) */
  if(STM32Fs_GetNextFile(&TestContext_Ptr->ValidationContext.class_dir, &TestContext_Ptr->ValidationContext.img_fno) == STM32FS_ERROR_NONE)
 800340c:	f500 7329 	add.w	r3, r0, #676	; 0x2a4
 8003410:	f500 771c 	add.w	r7, r0, #624	; 0x270
{
 8003414:	4683      	mov	fp, r0
 8003416:	468a      	mov	sl, r1
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 8003418:	f8d0 663c 	ldr.w	r6, [r0, #1596]	; 0x63c
  if(STM32Fs_GetNextFile(&TestContext_Ptr->ValidationContext.class_dir, &TestContext_Ptr->ValidationContext.img_fno) == STM32FS_ERROR_NONE)
 800341c:	4619      	mov	r1, r3
 800341e:	4638      	mov	r0, r7
{
 8003420:	ed2d 8b10 	vpush	{d8-d15}
 8003424:	f5ad 7d49 	sub.w	sp, sp, #804	; 0x324
  if(STM32Fs_GetNextFile(&TestContext_Ptr->ValidationContext.class_dir, &TestContext_Ptr->ValidationContext.img_fno) == STM32FS_ERROR_NONE)
 8003428:	9308      	str	r3, [sp, #32]
 800342a:	f019 fa79 	bl	801c920 <STM32Fs_GetNextFile>
 800342e:	b9e0      	cbnz	r0, 800346a <TEST_GetNextValidationInput+0x62>
    stm32fs_err_t err;

    BSP_LED_Toggle(LED_BLUE);
    UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);

    strcpy(tmp_msg, TestContext_Ptr->ValidationContext.tmp_class_path);
 8003430:	4c7b      	ldr	r4, [pc, #492]	; (8003620 <TEST_GetNextValidationInput+0x218>)
    BSP_LED_Toggle(LED_BLUE);
 8003432:	2003      	movs	r0, #3
 8003434:	f007 fc44 	bl	800acc0 <BSP_LED_Toggle>
    UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8003438:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800343c:	f01a f85c 	bl	801d4f8 <UTIL_LCD_Clear>
    strcpy(tmp_msg, TestContext_Ptr->ValidationContext.tmp_class_path);
 8003440:	f50b 6180 	add.w	r1, fp, #1024	; 0x400
 8003444:	4620      	mov	r0, r4
 8003446:	f023 fbc3 	bl	8026bd0 <stpcpy>
    strcat(tmp_msg, "/");
 800344a:	222f      	movs	r2, #47	; 0x2f
    strcpy(tmp_msg, TestContext_Ptr->ValidationContext.tmp_class_path);
 800344c:	4603      	mov	r3, r0
    strcat(tmp_msg, TestContext_Ptr->ValidationContext.img_fno.fname);
 800344e:	f20b 21ba 	addw	r1, fp, #698	; 0x2ba
 8003452:	3001      	adds	r0, #1
    strcat(tmp_msg, "/");
 8003454:	701a      	strb	r2, [r3, #0]
    strcat(tmp_msg, TestContext_Ptr->ValidationContext.img_fno.fname);
 8003456:	f023 fbc4 	bl	8026be2 <strcpy>

    /* Read the image to DestBuffPtr */
    err = STM23Fs_ReadImageBMP(tmp_msg, DestBuffPtr);
 800345a:	4651      	mov	r1, sl
 800345c:	4620      	mov	r0, r4
 800345e:	f019 fe3b 	bl	801d0d8 <STM23Fs_ReadImageBMP>

    if (err != STM32FS_ERROR_NONE)
 8003462:	2800      	cmp	r0, #0
 8003464:	f000 8083 	beq.w	800356e <TEST_GetNextValidationInput+0x166>
 8003468:	e7fe      	b.n	8003468 <TEST_GetNextValidationInput+0x60>
 800346a:	f50b 73ac 	add.w	r3, fp, #344	; 0x158

  } /* End for each file in class directory */
  else
  {
    /*Close class directory*/
    f_closedir(&TestContext_Ptr->ValidationContext.class_dir);
 800346e:	4638      	mov	r0, r7
 8003470:	f50b 7992 	add.w	r9, fp, #292	; 0x124
 8003474:	4d6b      	ldr	r5, [pc, #428]	; (8003624 <TEST_GetNextValidationInput+0x21c>)
 8003476:	9309      	str	r3, [sp, #36]	; 0x24
  FIND_NEXT_DIR:
    /* Get into next directory in "/onboard_valid_dataset" directory */
    if(STM32Fs_GetNextDir(&TestContext_Ptr->ValidationContext.dataset_dir, &TestContext_Ptr->ValidationContext.fno) == STM32FS_ERROR_NONE)
    {
      /* Find corresponding class index */
      TestContext_Ptr->ValidationContext.class_index = FindClassIndexFromString(TestContext_Ptr->ValidationContext.fno.fname);
 8003478:	f50b 74b7 	add.w	r4, fp, #366	; 0x16e
    f_closedir(&TestContext_Ptr->ValidationContext.class_dir);
 800347c:	f018 f8e6 	bl	801b64c <f_closedir>
    if(STM32Fs_GetNextDir(&TestContext_Ptr->ValidationContext.dataset_dir, &TestContext_Ptr->ValidationContext.fno) == STM32FS_ERROR_NONE)
 8003480:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003482:	4648      	mov	r0, r9
 8003484:	f019 fa3c 	bl	801c900 <STM32Fs_GetNextDir>
 8003488:	4680      	mov	r8, r0
 800348a:	2800      	cmp	r0, #0
 800348c:	d17c      	bne.n	8003588 <TEST_GetNextValidationInput+0x180>
    if (strcmp(className, NN_OUTPUT_CLASS_LIST[j]) == 0)
 800348e:	6829      	ldr	r1, [r5, #0]
 8003490:	4620      	mov	r0, r4
 8003492:	f7fc ff25 	bl	80002e0 <strcmp>
 8003496:	2800      	cmp	r0, #0
 8003498:	d039      	beq.n	800350e <TEST_GetNextValidationInput+0x106>
 800349a:	6869      	ldr	r1, [r5, #4]
 800349c:	4620      	mov	r0, r4
 800349e:	f7fc ff1f 	bl	80002e0 <strcmp>
 80034a2:	2800      	cmp	r0, #0
 80034a4:	f000 80b9 	beq.w	800361a <TEST_GetNextValidationInput+0x212>
 80034a8:	68a9      	ldr	r1, [r5, #8]
 80034aa:	4620      	mov	r0, r4
 80034ac:	f7fc ff18 	bl	80002e0 <strcmp>
 80034b0:	2800      	cmp	r0, #0
 80034b2:	f000 80b0 	beq.w	8003616 <TEST_GetNextValidationInput+0x20e>
 80034b6:	68e9      	ldr	r1, [r5, #12]
 80034b8:	4620      	mov	r0, r4
 80034ba:	f7fc ff11 	bl	80002e0 <strcmp>
 80034be:	2800      	cmp	r0, #0
 80034c0:	d05e      	beq.n	8003580 <TEST_GetNextValidationInput+0x178>
 80034c2:	6929      	ldr	r1, [r5, #16]
 80034c4:	4620      	mov	r0, r4
 80034c6:	f7fc ff0b 	bl	80002e0 <strcmp>
 80034ca:	b1f8      	cbz	r0, 800350c <TEST_GetNextValidationInput+0x104>
 80034cc:	6969      	ldr	r1, [r5, #20]
 80034ce:	4620      	mov	r0, r4
 80034d0:	f7fc ff06 	bl	80002e0 <strcmp>
 80034d4:	2800      	cmp	r0, #0
 80034d6:	d055      	beq.n	8003584 <TEST_GetNextValidationInput+0x17c>
      TestContext_Ptr->ValidationContext.class_index = FindClassIndexFromString(TestContext_Ptr->ValidationContext.fno.fname);
 80034d8:	f04f 33ff 	mov.w	r3, #4294967295

      if(TestContext_Ptr->ValidationContext.class_index == -1)
      { /* Class index was not found */
        sprintf(tmp_msg, "Error, class %s doesn't exists", TestContext_Ptr->ValidationContext.fno.fname);
 80034dc:	4622      	mov	r2, r4
 80034de:	4952      	ldr	r1, [pc, #328]	; (8003628 <TEST_GetNextValidationInput+0x220>)
      TestContext_Ptr->ValidationContext.class_index = FindClassIndexFromString(TestContext_Ptr->ValidationContext.fno.fname);
 80034e0:	f8cb 33bc 	str.w	r3, [fp, #956]	; 0x3bc
        sprintf(tmp_msg, "Error, class %s doesn't exists", TestContext_Ptr->ValidationContext.fno.fname);
 80034e4:	484e      	ldr	r0, [pc, #312]	; (8003620 <TEST_GetNextValidationInput+0x218>)
 80034e6:	f023 fb53 	bl	8026b90 <siprintf>
        UTIL_LCD_DisplayStringAt(0, LINE(3), (uint8_t *)tmp_msg, CENTER_MODE);
 80034ea:	f019 fffd 	bl	801d4e8 <UTIL_LCD_GetFont>
 80034ee:	88c1      	ldrh	r1, [r0, #6]
 80034f0:	2301      	movs	r3, #1
 80034f2:	4640      	mov	r0, r8
 80034f4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80034f8:	4a49      	ldr	r2, [pc, #292]	; (8003620 <TEST_GetNextValidationInput+0x218>)
 80034fa:	f01a f8c3 	bl	801d684 <UTIL_LCD_DisplayStringAt>
        DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 80034fe:	6b70      	ldr	r0, [r6, #52]	; 0x34
 8003500:	f7fe fbd2 	bl	8001ca8 <DISPLAY_Refresh>
        BSP_LED_On(LED_RED);
 8003504:	2002      	movs	r0, #2
 8003506:	f007 fbbb 	bl	800ac80 <BSP_LED_On>
 800350a:	e7fe      	b.n	800350a <TEST_GetNextValidationInput+0x102>
  for (size_t j = 0; j < AI_NET_OUTPUT_SIZE; j++)
 800350c:	2004      	movs	r0, #4
        while (1)
          ;
      }

      strcpy(TestContext_Ptr->ValidationContext.tmp_class_path, ""); //chaine "nulle"
 800350e:	f50b 6880 	add.w	r8, fp, #1024	; 0x400
      TestContext_Ptr->ValidationContext.class_index = FindClassIndexFromString(TestContext_Ptr->ValidationContext.fno.fname);
 8003512:	f8cb 03bc 	str.w	r0, [fp, #956]	; 0x3bc
      strcpy(TestContext_Ptr->ValidationContext.tmp_class_path, TestContext_Ptr->ValidationContext.class_path );
 8003516:	f50b 7170 	add.w	r1, fp, #960	; 0x3c0
 800351a:	4640      	mov	r0, r8
 800351c:	f023 fb58 	bl	8026bd0 <stpcpy>
      strcat(TestContext_Ptr->ValidationContext.tmp_class_path, TestContext_Ptr->ValidationContext.fno.fname);
 8003520:	4621      	mov	r1, r4
 8003522:	f023 fb5e 	bl	8026be2 <strcpy>
      STM32Fs_OpenDir(TestContext_Ptr->ValidationContext.tmp_class_path, &TestContext_Ptr->ValidationContext.class_dir);
 8003526:	4639      	mov	r1, r7
 8003528:	4640      	mov	r0, r8
 800352a:	f019 f9d5 	bl	801c8d8 <STM32Fs_OpenDir>

      /*Get first file immediately*/
      if(STM32Fs_GetNextFile(&TestContext_Ptr->ValidationContext.class_dir, &TestContext_Ptr->ValidationContext.img_fno) == STM32FS_ERROR_NONE)
 800352e:	9908      	ldr	r1, [sp, #32]
 8003530:	4638      	mov	r0, r7
 8003532:	f019 f9f5 	bl	801c920 <STM32Fs_GetNextFile>
 8003536:	2800      	cmp	r0, #0
 8003538:	d1a2      	bne.n	8003480 <TEST_GetNextValidationInput+0x78>
        stm32fs_err_t err;

        BSP_LED_Toggle(LED_BLUE);
        UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);

        strcpy(tmp_msg, TestContext_Ptr->ValidationContext.tmp_class_path);
 800353a:	4c39      	ldr	r4, [pc, #228]	; (8003620 <TEST_GetNextValidationInput+0x218>)
        BSP_LED_Toggle(LED_BLUE);
 800353c:	2003      	movs	r0, #3
 800353e:	f007 fbbf 	bl	800acc0 <BSP_LED_Toggle>
        UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8003542:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8003546:	f019 ffd7 	bl	801d4f8 <UTIL_LCD_Clear>
        strcpy(tmp_msg, TestContext_Ptr->ValidationContext.tmp_class_path);
 800354a:	4641      	mov	r1, r8
 800354c:	4620      	mov	r0, r4
 800354e:	f023 fb3f 	bl	8026bd0 <stpcpy>
        strcat(tmp_msg, "/");
 8003552:	222f      	movs	r2, #47	; 0x2f
        strcpy(tmp_msg, TestContext_Ptr->ValidationContext.tmp_class_path);
 8003554:	4603      	mov	r3, r0
        strcat(tmp_msg, TestContext_Ptr->ValidationContext.img_fno.fname);
 8003556:	f20b 21ba 	addw	r1, fp, #698	; 0x2ba
 800355a:	3001      	adds	r0, #1
        strcat(tmp_msg, "/");
 800355c:	701a      	strb	r2, [r3, #0]
        strcat(tmp_msg, TestContext_Ptr->ValidationContext.img_fno.fname);
 800355e:	f023 fb40 	bl	8026be2 <strcpy>

        /* Read the image to DestBuffPtr */
        err = STM23Fs_ReadImageBMP(tmp_msg, DestBuffPtr);
 8003562:	4651      	mov	r1, sl
 8003564:	4620      	mov	r0, r4
 8003566:	f019 fdb7 	bl	801d0d8 <STM23Fs_ReadImageBMP>
        if (err != STM32FS_ERROR_NONE)
 800356a:	b100      	cbz	r0, 800356e <TEST_GetNextValidationInput+0x166>
 800356c:	e7fe      	b.n	800356c <TEST_GetNextValidationInput+0x164>
        {
          while(1);
        }

        App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready = 1;
 800356e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8003570:	2201      	movs	r2, #1
 8003572:	751a      	strb	r2, [r3, #20]
        HAL_Delay(1000);

      TestContext_Ptr->ValidationContext.validation_completed =1;
    }
  }
}
 8003574:	f50d 7d49 	add.w	sp, sp, #804	; 0x324
 8003578:	ecbd 8b10 	vpop	{d8-d15}
 800357c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (size_t j = 0; j < AI_NET_OUTPUT_SIZE; j++)
 8003580:	2003      	movs	r0, #3
 8003582:	e7c4      	b.n	800350e <TEST_GetNextValidationInput+0x106>
 8003584:	2005      	movs	r0, #5
 8003586:	e7c2      	b.n	800350e <TEST_GetNextValidationInput+0x106>
      f_closedir(&TestContext_Ptr->ValidationContext.dataset_dir);
 8003588:	4648      	mov	r0, r9
      BSP_LCD_FillRect(0, 50, 130, 224, 224, UTIL_LCD_COLOR_WHITE);
 800358a:	f04f 34ff 	mov.w	r4, #4294967295
      f_closedir(&TestContext_Ptr->ValidationContext.dataset_dir);
 800358e:	f018 f85d 	bl	801b64c <f_closedir>
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLACK);
 8003592:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8003596:	f019 ff8f 	bl	801d4b8 <UTIL_LCD_SetTextColor>
      BSP_LCD_FillRect(0, 50, 130, 224, 224, UTIL_LCD_COLOR_WHITE);
 800359a:	23e0      	movs	r3, #224	; 0xe0
 800359c:	2282      	movs	r2, #130	; 0x82
 800359e:	2132      	movs	r1, #50	; 0x32
 80035a0:	9300      	str	r3, [sp, #0]
 80035a2:	2000      	movs	r0, #0
 80035a4:	9401      	str	r4, [sp, #4]
 80035a6:	f009 fabd 	bl	800cb24 <BSP_LCD_FillRect>
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 80035aa:	4620      	mov	r0, r4
 80035ac:	f019 ff84 	bl	801d4b8 <UTIL_LCD_SetTextColor>
      UTIL_LCD_DisplayStringAt(40, LINE(10), (uint8_t*)"End of validation.", LEFT_MODE);
 80035b0:	f019 ff9a 	bl	801d4e8 <UTIL_LCD_GetFont>
 80035b4:	88c1      	ldrh	r1, [r0, #6]
 80035b6:	2303      	movs	r3, #3
 80035b8:	4a1c      	ldr	r2, [pc, #112]	; (800362c <TEST_GetNextValidationInput+0x224>)
 80035ba:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80035be:	2028      	movs	r0, #40	; 0x28
 80035c0:	0049      	lsls	r1, r1, #1
 80035c2:	f01a f85f 	bl	801d684 <UTIL_LCD_DisplayStringAt>
      UTIL_LCD_DisplayStringAt(40, LINE(11), (uint8_t*)"Press wake-up", LEFT_MODE);
 80035c6:	f019 ff8f 	bl	801d4e8 <UTIL_LCD_GetFont>
 80035ca:	88c1      	ldrh	r1, [r0, #6]
 80035cc:	2303      	movs	r3, #3
 80035ce:	4a18      	ldr	r2, [pc, #96]	; (8003630 <TEST_GetNextValidationInput+0x228>)
 80035d0:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 80035d4:	2028      	movs	r0, #40	; 0x28
 80035d6:	eb01 0144 	add.w	r1, r1, r4, lsl #1
 80035da:	f01a f853 	bl	801d684 <UTIL_LCD_DisplayStringAt>
      UTIL_LCD_DisplayStringAt(40, LINE(12), (uint8_t*)"button to see report", LEFT_MODE);
 80035de:	f019 ff83 	bl	801d4e8 <UTIL_LCD_GetFont>
 80035e2:	88c1      	ldrh	r1, [r0, #6]
 80035e4:	2303      	movs	r3, #3
 80035e6:	4a13      	ldr	r2, [pc, #76]	; (8003634 <TEST_GetNextValidationInput+0x22c>)
 80035e8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80035ec:	2028      	movs	r0, #40	; 0x28
 80035ee:	0089      	lsls	r1, r1, #2
 80035f0:	f01a f848 	bl	801d684 <UTIL_LCD_DisplayStringAt>
      DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 80035f4:	6b70      	ldr	r0, [r6, #52]	; 0x34
 80035f6:	f7fe fb57 	bl	8001ca8 <DISPLAY_Refresh>
      while((TestContext_Ptr->UartContext.uart_cmd_ongoing==0) && (BSP_PB_GetState(BUTTON_WAKEUP) == RESET))
 80035fa:	e002      	b.n	8003602 <TEST_GetNextValidationInput+0x1fa>
 80035fc:	f007 fbba 	bl	800ad74 <BSP_PB_GetState>
 8003600:	b9f0      	cbnz	r0, 8003640 <TEST_GetNextValidationInput+0x238>
 8003602:	f8db 3560 	ldr.w	r3, [fp, #1376]	; 0x560
 8003606:	4618      	mov	r0, r3
 8003608:	2b00      	cmp	r3, #0
 800360a:	d0f7      	beq.n	80035fc <TEST_GetNextValidationInput+0x1f4>
        HAL_Delay(1000);
 800360c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003610:	f00a f9ac 	bl	800d96c <HAL_Delay>
 8003614:	e018      	b.n	8003648 <TEST_GetNextValidationInput+0x240>
  for (size_t j = 0; j < AI_NET_OUTPUT_SIZE; j++)
 8003616:	2002      	movs	r0, #2
 8003618:	e779      	b.n	800350e <TEST_GetNextValidationInput+0x106>
 800361a:	2001      	movs	r0, #1
 800361c:	e777      	b.n	800350e <TEST_GetNextValidationInput+0x106>
 800361e:	bf00      	nop
 8003620:	24007fc8 	.word	0x24007fc8
 8003624:	24000008 	.word	0x24000008
 8003628:	08028de0 	.word	0x08028de0
 800362c:	08028e00 	.word	0x08028e00
 8003630:	08028e14 	.word	0x08028e14
 8003634:	08028e24 	.word	0x08028e24
 8003638:	00000000 	.word	0x00000000
 800363c:	3e2aaaab 	.word	0x3e2aaaab
      if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
 8003640:	f8db 3560 	ldr.w	r3, [fp, #1376]	; 0x560
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1e1      	bne.n	800360c <TEST_GetNextValidationInput+0x204>
      UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 8003648:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
  uint32_t total_support = 0;
 800364c:	2400      	movs	r4, #0
      UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 800364e:	f019 ff53 	bl	801d4f8 <UTIL_LCD_Clear>
      ClassificationReport_Typedef report = classification_report(TestContext_Ptr->ValidationContext.valid_conf_matrix);
 8003652:	f50b 6c89 	add.w	ip, fp, #1096	; 0x448
 8003656:	f10d 0ef0 	add.w	lr, sp, #240	; 0xf0
  for (uint32_t target = 0; target < AI_NET_OUTPUT_SIZE; target++)
 800365a:	4627      	mov	r7, r4
 800365c:	4666      	mov	r6, ip
      ClassificationReport_Typedef report = classification_report(TestContext_Ptr->ValidationContext.valid_conf_matrix);
 800365e:	46e0      	mov	r8, ip
    float precision = 0.0f;
 8003660:	ed5f 7a0b 	vldr	s15, [pc, #-44]	; 8003638 <TEST_GetNextValidationInput+0x230>
 8003664:	46a1      	mov	r9, r4
  uint32_t diagonal_sum = 0;
 8003666:	9408      	str	r4, [sp, #32]
 8003668:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800366c:	f8dc 0014 	ldr.w	r0, [ip, #20]
 8003670:	e9dc a500 	ldrd	sl, r5, [ip]
 8003674:	e9dc 2403 	ldrd	r2, r4, [ip, #12]
 8003678:	eb0a 0105 	add.w	r1, sl, r5
      if (target != pred)
 800367c:	2f00      	cmp	r7, #0
 800367e:	f000 82ca 	beq.w	8003c16 <TEST_GetNextValidationInput+0x80e>
 8003682:	2f01      	cmp	r7, #1
 8003684:	f000 82c0 	beq.w	8003c08 <TEST_GetNextValidationInput+0x800>
 8003688:	2f02      	cmp	r7, #2
      support += conf_matrix[target][pred];
 800368a:	440b      	add	r3, r1
      if (target != pred)
 800368c:	f000 82f4 	beq.w	8003c78 <TEST_GetNextValidationInput+0x870>
 8003690:	2f03      	cmp	r7, #3
        false_negatives += conf_matrix[target][pred];
 8003692:	461d      	mov	r5, r3
      support += conf_matrix[target][pred];
 8003694:	eb03 0102 	add.w	r1, r3, r2
      if (target != pred)
 8003698:	f000 82e8 	beq.w	8003c6c <TEST_GetNextValidationInput+0x864>
 800369c:	1823      	adds	r3, r4, r0
 800369e:	2f04      	cmp	r7, #4
        false_negatives += conf_matrix[target][pred];
 80036a0:	442a      	add	r2, r5
 80036a2:	4419      	add	r1, r3
      if (target != pred)
 80036a4:	f000 82df 	beq.w	8003c66 <TEST_GetNextValidationInput+0x85e>
 80036a8:	2f05      	cmp	r7, #5
        false_negatives += conf_matrix[target][pred];
 80036aa:	4422      	add	r2, r4
      if (target != pred)
 80036ac:	f000 82d5 	beq.w	8003c5a <TEST_GetNextValidationInput+0x852>
        false_negatives += conf_matrix[target][pred];
 80036b0:	4402      	add	r2, r0
      if (target != gtruth)
 80036b2:	2f00      	cmp	r7, #0
 80036b4:	f000 82cb 	beq.w	8003c4e <TEST_GetNextValidationInput+0x846>
 80036b8:	2f01      	cmp	r7, #1
        false_positives += conf_matrix[gtruth][target];
 80036ba:	6834      	ldr	r4, [r6, #0]
      if (target != gtruth)
 80036bc:	f000 82c0 	beq.w	8003c40 <TEST_GetNextValidationInput+0x838>
        false_positives += conf_matrix[gtruth][target];
 80036c0:	69b3      	ldr	r3, [r6, #24]
      if (target != gtruth)
 80036c2:	2f02      	cmp	r7, #2
        false_positives += conf_matrix[gtruth][target];
 80036c4:	441c      	add	r4, r3
      if (target != gtruth)
 80036c6:	f000 82b6 	beq.w	8003c36 <TEST_GetNextValidationInput+0x82e>
        false_positives += conf_matrix[gtruth][target];
 80036ca:	6b33      	ldr	r3, [r6, #48]	; 0x30
      if (target != gtruth)
 80036cc:	2f03      	cmp	r7, #3
        false_positives += conf_matrix[gtruth][target];
 80036ce:	4423      	add	r3, r4
      if (target != gtruth)
 80036d0:	f000 82ae 	beq.w	8003c30 <TEST_GetNextValidationInput+0x828>
        false_positives += conf_matrix[gtruth][target];
 80036d4:	6cb5      	ldr	r5, [r6, #72]	; 0x48
      if (target != gtruth)
 80036d6:	2f04      	cmp	r7, #4
        false_positives += conf_matrix[gtruth][target];
 80036d8:	eb03 0005 	add.w	r0, r3, r5
      if (target != gtruth)
 80036dc:	d003      	beq.n	80036e6 <TEST_GetNextValidationInput+0x2de>
        false_positives += conf_matrix[gtruth][target];
 80036de:	6e33      	ldr	r3, [r6, #96]	; 0x60
      if (target != gtruth)
 80036e0:	2f05      	cmp	r7, #5
        false_positives += conf_matrix[gtruth][target];
 80036e2:	4418      	add	r0, r3
      if (target != gtruth)
 80036e4:	d001      	beq.n	80036ea <TEST_GetNextValidationInput+0x2e2>
        false_positives += conf_matrix[gtruth][target];
 80036e6:	6fb3      	ldr	r3, [r6, #120]	; 0x78
 80036e8:	4418      	add	r0, r3
    true_positives = conf_matrix[target][target];
 80036ea:	f8d8 4000 	ldr.w	r4, [r8]
    if ((true_positives + false_positives) != 0)
 80036ee:	1823      	adds	r3, r4, r0
 80036f0:	4422      	add	r2, r4
 80036f2:	f000 8270 	beq.w	8003bd6 <TEST_GetNextValidationInput+0x7ce>
      precision = true_positives / (float)(true_positives + false_positives);
 80036f6:	ee07 4a10 	vmov	s14, r4
 80036fa:	eef8 5a47 	vcvt.f32.u32	s11, s14
 80036fe:	ee07 3a10 	vmov	s14, r3
 8003702:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8003706:	ee85 7aa6 	vdiv.f32	s14, s11, s13
    if ((true_positives + false_negatives) != 0)
 800370a:	2a00      	cmp	r2, #0
 800370c:	f040 826b 	bne.w	8003be6 <TEST_GetNextValidationInput+0x7de>
    float recall = 0.0f;
 8003710:	eeb0 6a67 	vmov.f32	s12, s15
    if ((recall + precision) != 0.0f)
 8003714:	ee36 5a07 	vadd.f32	s10, s12, s14
 8003718:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800371c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003720:	f000 8256 	beq.w	8003bd0 <TEST_GetNextValidationInput+0x7c8>
      f1_score = 2 * (recall * precision) / (recall + precision);
 8003724:	ee66 6a07 	vmul.f32	s13, s12, s14
 8003728:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800372c:	eec6 5a85 	vdiv.f32	s11, s13, s10
    diagonal_sum += true_positives;
 8003730:	9b08      	ldr	r3, [sp, #32]
  for (uint32_t target = 0; target < AI_NET_OUTPUT_SIZE; target++)
 8003732:	3701      	adds	r7, #1
    report.precisions[target] = precision;
 8003734:	ecae 7a01 	vstmia	lr!, {s14}
    total_support += support;
 8003738:	4489      	add	r9, r1
    diagonal_sum += true_positives;
 800373a:	4423      	add	r3, r4
  for (uint32_t target = 0; target < AI_NET_OUTPUT_SIZE; target++)
 800373c:	2f06      	cmp	r7, #6
    report.recalls[target] = recall;
 800373e:	ed8e 6a05 	vstr	s12, [lr, #20]
 8003742:	f10c 0c18 	add.w	ip, ip, #24
    diagonal_sum += true_positives;
 8003746:	9308      	str	r3, [sp, #32]
 8003748:	f108 081c 	add.w	r8, r8, #28
    report.f1_scores[target] = f1_score;
 800374c:	edce 5a0b 	vstr	s11, [lr, #44]	; 0x2c
 8003750:	f106 0604 	add.w	r6, r6, #4
    report.supports[target] = support;
 8003754:	f8ce 1044 	str.w	r1, [lr, #68]	; 0x44
  for (uint32_t target = 0; target < AI_NET_OUTPUT_SIZE; target++)
 8003758:	d186      	bne.n	8003668 <TEST_GetNextValidationInput+0x260>
 800375a:	ee07 9a90 	vmov	s15, r9
 800375e:	464c      	mov	r4, r9
 8003760:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003764:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003768:	ee87 6a87 	vdiv.f32	s12, s15, s14
  if (total_support != 0)
 800376c:	2c00      	cmp	r4, #0
 800376e:	f000 8241 	beq.w	8003bf4 <TEST_GetNextValidationInput+0x7ec>
    report.accuracy = diagonal_sum / (float)total_support;
 8003772:	eddd 7a08 	vldr	s15, [sp, #32]
 8003776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800377a:	ee87 fa87 	vdiv.f32	s30, s15, s14
 800377e:	eeb7 cacf 	vcvt.f64.f32	d12, s30
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 8003782:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 8003784:	ad1c      	add	r5, sp, #112	; 0x70
    report.macro_avg_recall += (float)report.recalls[target];
 8003786:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
  return report;
 800378a:	2280      	movs	r2, #128	; 0x80
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 800378c:	ee07 3a90 	vmov	s15, r3
 8003790:	9b4e      	ldr	r3, [sp, #312]	; 0x138
    report.macro_avg_precision += (float)report.precisions[target];
 8003792:	ed9d 9a3d 	vldr	s18, [sp, #244]	; 0xf4
  return report;
 8003796:	a93c      	add	r1, sp, #240	; 0xf0
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 8003798:	eef8 7a67 	vcvt.f32.u32	s15, s15
    report.macro_avg_f1_score += (float)report.f1_scores[target];
 800379c:	ed9d ba49 	vldr	s22, [sp, #292]	; 0x124
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 80037a0:	ee06 3a90 	vmov	s13, r3
    report.macro_avg_recall += (float)report.recalls[target];
 80037a4:	ed9d aa42 	vldr	s20, [sp, #264]	; 0x108
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 80037a8:	9b50      	ldr	r3, [sp, #320]	; 0x140
  return report;
 80037aa:	4628      	mov	r0, r5
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 80037ac:	eef8 5a66 	vcvt.f32.u32	s11, s13
    report.macro_avg_precision += (float)report.precisions[target];
 80037b0:	eddd 6a3c 	vldr	s13, [sp, #240]	; 0xf0
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 80037b4:	ee27 ea89 	vmul.f32	s28, s15, s18
 80037b8:	9308      	str	r3, [sp, #32]
    report.weighted_avg_recall += (float)report.recalls[target] * report.supports[target];
 80037ba:	ee27 da27 	vmul.f32	s26, s14, s15
    report.macro_avg_f1_score += (float)report.f1_scores[target];
 80037be:	ed9d 2a4a 	vldr	s4, [sp, #296]	; 0x128
    report.weighted_avg_f1_score += (float)report.f1_scores[target] * report.supports[target];
 80037c2:	ee2b 8a27 	vmul.f32	s16, s22, s15
    report.macro_avg_f1_score += (float)report.f1_scores[target];
 80037c6:	eddd 7a48 	vldr	s15, [sp, #288]	; 0x120
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 80037ca:	eea6 eaa5 	vfma.f32	s28, s13, s11
    report.macro_avg_precision += (float)report.precisions[target];
 80037ce:	eddd 3a3e 	vldr	s7, [sp, #248]	; 0xf8
    report.weighted_avg_recall += (float)report.recalls[target] * report.supports[target];
 80037d2:	eea5 da8a 	vfma.f32	s26, s11, s20
    report.macro_avg_recall += (float)report.recalls[target];
 80037d6:	ed9d 4a44 	vldr	s8, [sp, #272]	; 0x110
    report.weighted_avg_f1_score += (float)report.f1_scores[target] * report.supports[target];
 80037da:	eea7 8aa5 	vfma.f32	s16, s15, s11
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 80037de:	eddd 5a08 	vldr	s11, [sp, #32]
 80037e2:	9b51      	ldr	r3, [sp, #324]	; 0x144
    report.macro_avg_precision += (float)report.precisions[target];
 80037e4:	ee36 9a89 	vadd.f32	s18, s13, s18
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 80037e8:	eeb8 5a65 	vcvt.f32.u32	s10, s11
    report.macro_avg_precision += (float)report.precisions[target];
 80037ec:	eddd 2a3f 	vldr	s5, [sp, #252]	; 0xfc
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 80037f0:	ee05 3a90 	vmov	s11, r3
    report.macro_avg_f1_score += (float)report.f1_scores[target];
 80037f4:	ed9d 3a4b 	vldr	s6, [sp, #300]	; 0x12c
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 80037f8:	9b52      	ldr	r3, [sp, #328]	; 0x148
    report.macro_avg_recall += (float)report.recalls[target];
 80037fa:	ee37 aa0a 	vadd.f32	s20, s14, s20
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 80037fe:	eea3 ea85 	vfma.f32	s28, s7, s10
    report.macro_avg_precision += (float)report.precisions[target];
 8003802:	eddd 4a40 	vldr	s9, [sp, #256]	; 0x100
    report.weighted_avg_f1_score += (float)report.f1_scores[target] * report.supports[target];
 8003806:	eea2 8a05 	vfma.f32	s16, s4, s10
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 800380a:	9308      	str	r3, [sp, #32]
    report.weighted_avg_recall += (float)report.recalls[target] * report.supports[target];
 800380c:	eea4 da05 	vfma.f32	s26, s8, s10
    report.macro_avg_recall += (float)report.recalls[target];
 8003810:	ed9d 5a45 	vldr	s10, [sp, #276]	; 0x114
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 8003814:	eef8 5a65 	vcvt.f32.u32	s11, s11
 8003818:	9b53      	ldr	r3, [sp, #332]	; 0x14c
    report.macro_avg_f1_score += (float)report.f1_scores[target];
 800381a:	ee37 ba8b 	vadd.f32	s22, s15, s22
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 800381e:	eddd 7a08 	vldr	s15, [sp, #32]
    report.macro_avg_precision += (float)report.precisions[target];
 8003822:	ee39 9a23 	vadd.f32	s18, s18, s7
    report.macro_avg_recall += (float)report.recalls[target];
 8003826:	eddd 3a46 	vldr	s7, [sp, #280]	; 0x118
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 800382a:	eea2 eaa5 	vfma.f32	s28, s5, s11
    report.macro_avg_precision += (float)report.precisions[target];
 800382e:	eddd 6a41 	vldr	s13, [sp, #260]	; 0x104
    report.weighted_avg_f1_score += (float)report.f1_scores[target] * report.supports[target];
 8003832:	eea3 8a25 	vfma.f32	s16, s6, s11
  report.macro_avg_precision /= (float)AI_NET_OUTPUT_SIZE;
 8003836:	ed1f 7a7f 	vldr	s14, [pc, #-508]	; 800363c <TEST_GetNextValidationInput+0x234>
    report.weighted_avg_recall += (float)report.recalls[target] * report.supports[target];
 800383a:	eea5 da25 	vfma.f32	s26, s10, s11
    report.macro_avg_f1_score += (float)report.f1_scores[target];
 800383e:	eddd 5a4d 	vldr	s11, [sp, #308]	; 0x134
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 8003842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003846:	4fcd      	ldr	r7, [pc, #820]	; (8003b7c <TEST_GetNextValidationInput+0x774>)
    report.macro_avg_recall += (float)report.recalls[target];
 8003848:	ee3a aa04 	vadd.f32	s20, s20, s8
    report.macro_avg_f1_score += (float)report.f1_scores[target];
 800384c:	ed9d 4a4c 	vldr	s8, [sp, #304]	; 0x130
 8003850:	ee3b ba02 	vadd.f32	s22, s22, s4
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 8003854:	9309      	str	r3, [sp, #36]	; 0x24
 8003856:	eea4 eaa7 	vfma.f32	s28, s9, s15
  return report;
 800385a:	ed8d fa54 	vstr	s30, [sp, #336]	; 0x150
    report.weighted_avg_f1_score += (float)report.f1_scores[target] * report.supports[target];
 800385e:	eea4 8a27 	vfma.f32	s16, s8, s15
  return report;
 8003862:	9455      	str	r4, [sp, #340]	; 0x154
    report.weighted_avg_recall += (float)report.recalls[target] * report.supports[target];
 8003864:	eea3 daa7 	vfma.f32	s26, s7, s15
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 8003868:	ee07 3a90 	vmov	s15, r3
    report.macro_avg_precision += (float)report.precisions[target];
 800386c:	ee39 9a22 	vadd.f32	s18, s18, s5
  UTIL_LCD_DisplayStringAt(320, LINE(0), (uint8_t *)"precision recall f1-score support", LEFT_MODE);
 8003870:	462e      	mov	r6, r5
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 8003872:	eef8 7a67 	vcvt.f32.u32	s15, s15
  UTIL_LCD_DisplayStringAt(320, LINE(0), (uint8_t *)"precision recall f1-score support", LEFT_MODE);
 8003876:	46b9      	mov	r9, r7
    report.macro_avg_f1_score += (float)report.f1_scores[target];
 8003878:	ee3b ba03 	vadd.f32	s22, s22, s6
  UTIL_LCD_DisplayStringAt(320, LINE(0), (uint8_t *)"precision recall f1-score support", LEFT_MODE);
 800387c:	f04f 0802 	mov.w	r8, #2
    report.macro_avg_recall += (float)report.recalls[target];
 8003880:	ee3a aa05 	vadd.f32	s20, s20, s10
 8003884:	ed9d 5a47 	vldr	s10, [sp, #284]	; 0x11c
    report.macro_avg_precision += (float)report.precisions[target];
 8003888:	ee39 9a24 	vadd.f32	s18, s18, s9
    sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", NN_OUTPUT_CLASS_LIST[target], report->precisions[target],
 800388c:	f8df a304 	ldr.w	sl, [pc, #772]	; 8003b94 <TEST_GetNextValidationInput+0x78c>
    report.weighted_avg_precision += (float)report.precisions[target] * report.supports[target];
 8003890:	eea6 eaa7 	vfma.f32	s28, s13, s15
    report.macro_avg_recall += (float)report.recalls[target];
 8003894:	ee3a aa23 	vadd.f32	s20, s20, s7
    report.macro_avg_f1_score += (float)report.f1_scores[target];
 8003898:	ee3b ba04 	vadd.f32	s22, s22, s8
    report.weighted_avg_recall += (float)report.recalls[target] * report.supports[target];
 800389c:	eea5 da27 	vfma.f32	s26, s10, s15
    report.weighted_avg_f1_score += (float)report.f1_scores[target] * report.supports[target];
 80038a0:	eea5 8aa7 	vfma.f32	s16, s11, s15
    report.macro_avg_precision += (float)report.precisions[target];
 80038a4:	ee39 9a26 	vadd.f32	s18, s18, s13
    report.macro_avg_recall += (float)report.recalls[target];
 80038a8:	ee3a aa05 	vadd.f32	s20, s20, s10
    report.macro_avg_f1_score += (float)report.f1_scores[target];
 80038ac:	ee3b ba25 	vadd.f32	s22, s22, s11
  report.weighted_avg_precision /= (float)report.total_support;
 80038b0:	ee2e ea06 	vmul.f32	s28, s28, s12
  report.weighted_avg_recall /= (float)report.total_support;
 80038b4:	ee2d da06 	vmul.f32	s26, s26, s12
  report.weighted_avg_f1_score /= (float)report.total_support;
 80038b8:	ee28 8a06 	vmul.f32	s16, s16, s12
  report.macro_avg_precision /= (float)AI_NET_OUTPUT_SIZE;
 80038bc:	ee29 9a07 	vmul.f32	s18, s18, s14
  return report;
 80038c0:	ed8d ea59 	vstr	s28, [sp, #356]	; 0x164
  report.macro_avg_recall /= (float)AI_NET_OUTPUT_SIZE;
 80038c4:	ee2a aa07 	vmul.f32	s20, s20, s14
  return report;
 80038c8:	ed8d da5a 	vstr	s26, [sp, #360]	; 0x168
  report.macro_avg_f1_score /= (float)AI_NET_OUTPUT_SIZE;
 80038cc:	ee2b ba07 	vmul.f32	s22, s22, s14
  return report;
 80038d0:	ed8d 8a5b 	vstr	s16, [sp, #364]	; 0x16c
 80038d4:	ed8d 9a56 	vstr	s18, [sp, #344]	; 0x158
 80038d8:	ed8d aa57 	vstr	s20, [sp, #348]	; 0x15c
 80038dc:	ed8d ba58 	vstr	s22, [sp, #352]	; 0x160
 80038e0:	f022 fc50 	bl	8026184 <memcpy>
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 80038e4:	f8db 363c 	ldr.w	r3, [fp, #1596]	; 0x63c
 80038e8:	9308      	str	r3, [sp, #32]
  UTIL_LCD_DisplayStringAt(320, LINE(0), (uint8_t *)"precision recall f1-score support", LEFT_MODE);
 80038ea:	f019 fdfd 	bl	801d4e8 <UTIL_LCD_GetFont>
 80038ee:	2303      	movs	r3, #3
 80038f0:	4aa3      	ldr	r2, [pc, #652]	; (8003b80 <TEST_GetNextValidationInput+0x778>)
 80038f2:	2100      	movs	r1, #0
 80038f4:	f44f 70a0 	mov.w	r0, #320	; 0x140
 80038f8:	f019 fec4 	bl	801d684 <UTIL_LCD_DisplayStringAt>
    sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", NN_OUTPUT_CLASS_LIST[target], report->precisions[target],
 80038fc:	ecb6 7a01 	vldmia	r6!, {s14}
 8003900:	4651      	mov	r1, sl
 8003902:	f859 2b04 	ldr.w	r2, [r9], #4
 8003906:	a83c      	add	r0, sp, #240	; 0xf0
 8003908:	ed96 5a0b 	vldr	s10, [r6, #44]	; 0x2c
 800390c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003910:	ed96 6a05 	vldr	s12, [r6, #20]
 8003914:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 8003918:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800391a:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 800391e:	9306      	str	r3, [sp, #24]
 8003920:	ed8d 5b04 	vstr	d5, [sp, #16]
 8003924:	ed8d 6b02 	vstr	d6, [sp, #8]
 8003928:	ed8d 7b00 	vstr	d7, [sp]
 800392c:	f023 f930 	bl	8026b90 <siprintf>
    UTIL_LCD_DisplayStringAt(40, LINE(2 + target), (uint8_t *)line, LEFT_MODE);
 8003930:	f019 fdda 	bl	801d4e8 <UTIL_LCD_GetFont>
 8003934:	88c1      	ldrh	r1, [r0, #6]
 8003936:	2303      	movs	r3, #3
 8003938:	aa3c      	add	r2, sp, #240	; 0xf0
 800393a:	fb08 f101 	mul.w	r1, r8, r1
 800393e:	f108 0801 	add.w	r8, r8, #1
 8003942:	2028      	movs	r0, #40	; 0x28
 8003944:	f019 fe9e 	bl	801d684 <UTIL_LCD_DisplayStringAt>
  for (uint32_t target = 0; target < AI_NET_OUTPUT_SIZE; target++)
 8003948:	f1b8 0f08 	cmp.w	r8, #8
 800394c:	d1d6      	bne.n	80038fc <TEST_GetNextValidationInput+0x4f4>
  sprintf(line, "%20s %26.3f %4d", "accuracy", report->accuracy, (unsigned int)report->total_support);
 800394e:	4a8d      	ldr	r2, [pc, #564]	; (8003b84 <TEST_GetNextValidationInput+0x77c>)
 8003950:	a83c      	add	r0, sp, #240	; 0xf0
 8003952:	498d      	ldr	r1, [pc, #564]	; (8003b88 <TEST_GetNextValidationInput+0x780>)
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", "macro avg", report->macro_avg_precision, report->macro_avg_recall,
 8003954:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
  sprintf(line, "%20s %26.3f %4d", "accuracy", report->accuracy, (unsigned int)report->total_support);
 8003958:	9402      	str	r4, [sp, #8]
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", "macro avg", report->macro_avg_precision, report->macro_avg_recall,
 800395a:	eeb7 aaca 	vcvt.f64.f32	d10, s20
 800395e:	eeb7 bacb 	vcvt.f64.f32	d11, s22
 8003962:	4e8a      	ldr	r6, [pc, #552]	; (8003b8c <TEST_GetNextValidationInput+0x784>)
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", "weighted avg", report->weighted_avg_precision,
 8003964:	eeb7 eace 	vcvt.f64.f32	d14, s28
    sprintf(line, "%20s %8.3f %8.3f %8.3f %4d\n", NN_OUTPUT_CLASS_LIST[target], report->precisions[target],
 8003968:	f8df 8244 	ldr.w	r8, [pc, #580]	; 8003bb0 <TEST_GetNextValidationInput+0x7a8>
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", "weighted avg", report->weighted_avg_precision,
 800396c:	eeb7 dacd 	vcvt.f64.f32	d13, s26
 8003970:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
  sprintf(line, "%20s %26.3f %4d", "accuracy", report->accuracy, (unsigned int)report->total_support);
 8003974:	ed8d cb00 	vstr	d12, [sp]
 8003978:	f023 f90a 	bl	8026b90 <siprintf>
  UTIL_LCD_DisplayStringAt(40, LINE(3 + AI_NET_OUTPUT_SIZE), (uint8_t *)line, LEFT_MODE);
 800397c:	f019 fdb4 	bl	801d4e8 <UTIL_LCD_GetFont>
 8003980:	88c1      	ldrh	r1, [r0, #6]
 8003982:	2303      	movs	r3, #3
 8003984:	aa3c      	add	r2, sp, #240	; 0xf0
 8003986:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800398a:	2028      	movs	r0, #40	; 0x28
 800398c:	f019 fe7a 	bl	801d684 <UTIL_LCD_DisplayStringAt>
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", "macro avg", report->macro_avg_precision, report->macro_avg_recall,
 8003990:	4a7f      	ldr	r2, [pc, #508]	; (8003b90 <TEST_GetNextValidationInput+0x788>)
 8003992:	4980      	ldr	r1, [pc, #512]	; (8003b94 <TEST_GetNextValidationInput+0x78c>)
 8003994:	a83c      	add	r0, sp, #240	; 0xf0
 8003996:	9406      	str	r4, [sp, #24]
 8003998:	ed8d 9b00 	vstr	d9, [sp]
 800399c:	ed8d ab02 	vstr	d10, [sp, #8]
 80039a0:	ed8d bb04 	vstr	d11, [sp, #16]
 80039a4:	f023 f8f4 	bl	8026b90 <siprintf>
  UTIL_LCD_DisplayStringAt(40, LINE(4 + AI_NET_OUTPUT_SIZE), (uint8_t *)line, LEFT_MODE);
 80039a8:	f019 fd9e 	bl	801d4e8 <UTIL_LCD_GetFont>
 80039ac:	88c1      	ldrh	r1, [r0, #6]
 80039ae:	2303      	movs	r3, #3
 80039b0:	aa3c      	add	r2, sp, #240	; 0xf0
 80039b2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80039b6:	2028      	movs	r0, #40	; 0x28
 80039b8:	0049      	lsls	r1, r1, #1
 80039ba:	f019 fe63 	bl	801d684 <UTIL_LCD_DisplayStringAt>
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d", "weighted avg", report->weighted_avg_precision,
 80039be:	4a76      	ldr	r2, [pc, #472]	; (8003b98 <TEST_GetNextValidationInput+0x790>)
 80039c0:	4974      	ldr	r1, [pc, #464]	; (8003b94 <TEST_GetNextValidationInput+0x78c>)
 80039c2:	a83c      	add	r0, sp, #240	; 0xf0
 80039c4:	9406      	str	r4, [sp, #24]
 80039c6:	ed8d eb00 	vstr	d14, [sp]
 80039ca:	ed8d db02 	vstr	d13, [sp, #8]
 80039ce:	ed8d 8b04 	vstr	d8, [sp, #16]
 80039d2:	f023 f8dd 	bl	8026b90 <siprintf>
  UTIL_LCD_DisplayStringAt(40, LINE(5 + AI_NET_OUTPUT_SIZE), (uint8_t *)line, LEFT_MODE);
 80039d6:	f019 fd87 	bl	801d4e8 <UTIL_LCD_GetFont>
 80039da:	88c1      	ldrh	r1, [r0, #6]
 80039dc:	aa3c      	add	r2, sp, #240	; 0xf0
 80039de:	2303      	movs	r3, #3
 80039e0:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 80039e4:	2028      	movs	r0, #40	; 0x28
 80039e6:	eb01 014c 	add.w	r1, r1, ip, lsl #1
 80039ea:	f019 fe4b 	bl	801d684 <UTIL_LCD_DisplayStringAt>
  DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 80039ee:	9b08      	ldr	r3, [sp, #32]
 80039f0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80039f2:	f7fe f959 	bl	8001ca8 <DISPLAY_Refresh>
  f_open(&File, path, FA_CREATE_ALWAYS | FA_WRITE);
 80039f6:	220a      	movs	r2, #10
 80039f8:	4968      	ldr	r1, [pc, #416]	; (8003b9c <TEST_GetNextValidationInput+0x794>)
 80039fa:	a83c      	add	r0, sp, #240	; 0xf0
 80039fc:	f016 fe42 	bl	801a684 <f_open>
  f_close(&File);
 8003a00:	a83c      	add	r0, sp, #240	; 0xf0
 8003a02:	f017 fc83 	bl	801b30c <f_close>
  f_open(&File, path, FA_OPEN_APPEND | FA_WRITE);
 8003a06:	4965      	ldr	r1, [pc, #404]	; (8003b9c <TEST_GetNextValidationInput+0x794>)
 8003a08:	2232      	movs	r2, #50	; 0x32
 8003a0a:	a83c      	add	r0, sp, #240	; 0xf0
 8003a0c:	f016 fe3a 	bl	801a684 <f_open>
  f_printf(&File, "                       precision recall f1-score support\n");
 8003a10:	4963      	ldr	r1, [pc, #396]	; (8003ba0 <TEST_GetNextValidationInput+0x798>)
 8003a12:	a83c      	add	r0, sp, #240	; 0xf0
 8003a14:	f018 f866 	bl	801bae4 <f_printf>
    sprintf(line, "%20s %8.3f %8.3f %8.3f %4d\n", NN_OUTPUT_CLASS_LIST[target], report->precisions[target],
 8003a18:	ecb5 7a01 	vldmia	r5!, {s14}
 8003a1c:	4641      	mov	r1, r8
 8003a1e:	f857 2b04 	ldr.w	r2, [r7], #4
 8003a22:	a80c      	add	r0, sp, #48	; 0x30
 8003a24:	ed95 5a0b 	vldr	s10, [r5, #44]	; 0x2c
 8003a28:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003a2c:	ed95 6a05 	vldr	s12, [r5, #20]
 8003a30:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 8003a34:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8003a36:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8003a3a:	9306      	str	r3, [sp, #24]
 8003a3c:	ed8d 5b04 	vstr	d5, [sp, #16]
 8003a40:	ed8d 6b02 	vstr	d6, [sp, #8]
 8003a44:	ed8d 7b00 	vstr	d7, [sp]
 8003a48:	f023 f8a2 	bl	8026b90 <siprintf>
    f_write(&File, line, strlen(line), (void *)&byteswritten);
 8003a4c:	a80c      	add	r0, sp, #48	; 0x30
 8003a4e:	f7fc fc51 	bl	80002f4 <strlen>
 8003a52:	ab0b      	add	r3, sp, #44	; 0x2c
 8003a54:	4602      	mov	r2, r0
 8003a56:	a90c      	add	r1, sp, #48	; 0x30
 8003a58:	a83c      	add	r0, sp, #240	; 0xf0
 8003a5a:	f017 fa5d 	bl	801af18 <f_write>
  for (uint32_t target = 0; target < AI_NET_OUTPUT_SIZE; target++)
 8003a5e:	42be      	cmp	r6, r7
 8003a60:	d1da      	bne.n	8003a18 <TEST_GetNextValidationInput+0x610>
  f_printf(&File, "\n");
 8003a62:	4950      	ldr	r1, [pc, #320]	; (8003ba4 <TEST_GetNextValidationInput+0x79c>)
 8003a64:	a83c      	add	r0, sp, #240	; 0xf0
 8003a66:	f018 f83d 	bl	801bae4 <f_printf>
  sprintf(line, "%20s %26.3f %4d\n", "accuracy", report->accuracy, (unsigned int)report->total_support);
 8003a6a:	4a46      	ldr	r2, [pc, #280]	; (8003b84 <TEST_GetNextValidationInput+0x77c>)
 8003a6c:	494e      	ldr	r1, [pc, #312]	; (8003ba8 <TEST_GetNextValidationInput+0x7a0>)
 8003a6e:	a80c      	add	r0, sp, #48	; 0x30
 8003a70:	9402      	str	r4, [sp, #8]
      TestContext_Ptr->ValidationContext.final_accuracy=report.accuracy;
 8003a72:	f20b 4544 	addw	r5, fp, #1092	; 0x444
 8003a76:	f8df 8148 	ldr.w	r8, [pc, #328]	; 8003bc0 <TEST_GetNextValidationInput+0x7b8>
    f_printf(&File, "%s,", NN_OUTPUT_CLASS_LIST[row]);
 8003a7a:	f8df a148 	ldr.w	sl, [pc, #328]	; 8003bc4 <TEST_GetNextValidationInput+0x7bc>
      f_printf(&File, "%d,", value);
 8003a7e:	4f4b      	ldr	r7, [pc, #300]	; (8003bac <TEST_GetNextValidationInput+0x7a4>)
    f_printf(&File, "\n");
 8003a80:	4e48      	ldr	r6, [pc, #288]	; (8003ba4 <TEST_GetNextValidationInput+0x79c>)
  sprintf(line, "%20s %26.3f %4d\n", "accuracy", report->accuracy, (unsigned int)report->total_support);
 8003a82:	ed8d cb00 	vstr	d12, [sp]
 8003a86:	f023 f883 	bl	8026b90 <siprintf>
  f_write(&File, line, strlen(line), (void *)&byteswritten);
 8003a8a:	a80c      	add	r0, sp, #48	; 0x30
 8003a8c:	f7fc fc32 	bl	80002f4 <strlen>
 8003a90:	ab0b      	add	r3, sp, #44	; 0x2c
 8003a92:	4602      	mov	r2, r0
 8003a94:	a90c      	add	r1, sp, #48	; 0x30
 8003a96:	a83c      	add	r0, sp, #240	; 0xf0
 8003a98:	f017 fa3e 	bl	801af18 <f_write>
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d\n", "macro avg", report->macro_avg_precision, report->macro_avg_recall,
 8003a9c:	4a3c      	ldr	r2, [pc, #240]	; (8003b90 <TEST_GetNextValidationInput+0x788>)
 8003a9e:	4944      	ldr	r1, [pc, #272]	; (8003bb0 <TEST_GetNextValidationInput+0x7a8>)
 8003aa0:	a80c      	add	r0, sp, #48	; 0x30
 8003aa2:	9406      	str	r4, [sp, #24]
 8003aa4:	ed8d bb04 	vstr	d11, [sp, #16]
 8003aa8:	ed8d ab02 	vstr	d10, [sp, #8]
 8003aac:	ed8d 9b00 	vstr	d9, [sp]
 8003ab0:	f023 f86e 	bl	8026b90 <siprintf>
  f_write(&File, line, strlen(line), (void *)&byteswritten);
 8003ab4:	a80c      	add	r0, sp, #48	; 0x30
 8003ab6:	f7fc fc1d 	bl	80002f4 <strlen>
 8003aba:	ab0b      	add	r3, sp, #44	; 0x2c
 8003abc:	4602      	mov	r2, r0
 8003abe:	a90c      	add	r1, sp, #48	; 0x30
 8003ac0:	a83c      	add	r0, sp, #240	; 0xf0
 8003ac2:	f017 fa29 	bl	801af18 <f_write>
  sprintf(line, "%20s %8.3f %8.3f %8.3f %4d\n", "weighted avg", report->weighted_avg_precision,
 8003ac6:	4a34      	ldr	r2, [pc, #208]	; (8003b98 <TEST_GetNextValidationInput+0x790>)
 8003ac8:	4939      	ldr	r1, [pc, #228]	; (8003bb0 <TEST_GetNextValidationInput+0x7a8>)
 8003aca:	a80c      	add	r0, sp, #48	; 0x30
 8003acc:	9406      	str	r4, [sp, #24]
 8003ace:	462c      	mov	r4, r5
 8003ad0:	ed8d 8b04 	vstr	d8, [sp, #16]
 8003ad4:	ed8d db02 	vstr	d13, [sp, #8]
 8003ad8:	ed8d eb00 	vstr	d14, [sp]
 8003adc:	f023 f858 	bl	8026b90 <siprintf>
  f_write(&File, line, strlen(line), (void *)&byteswritten);
 8003ae0:	a80c      	add	r0, sp, #48	; 0x30
 8003ae2:	f7fc fc07 	bl	80002f4 <strlen>
 8003ae6:	ab0b      	add	r3, sp, #44	; 0x2c
 8003ae8:	4602      	mov	r2, r0
 8003aea:	a90c      	add	r1, sp, #48	; 0x30
 8003aec:	a83c      	add	r0, sp, #240	; 0xf0
 8003aee:	f017 fa13 	bl	801af18 <f_write>
  f_close(&File);
 8003af2:	a83c      	add	r0, sp, #240	; 0xf0
 8003af4:	f017 fc0a 	bl	801b30c <f_close>
  f_open(&File, path, FA_CREATE_ALWAYS | FA_WRITE);
 8003af8:	220a      	movs	r2, #10
 8003afa:	492e      	ldr	r1, [pc, #184]	; (8003bb4 <TEST_GetNextValidationInput+0x7ac>)
 8003afc:	a83c      	add	r0, sp, #240	; 0xf0
      TestContext_Ptr->ValidationContext.final_accuracy=report.accuracy;
 8003afe:	ed85 fa00 	vstr	s30, [r5]
  for (int row = 0; row < NN_OUTPUT_CLASS_NUMBER; row++)
 8003b02:	2500      	movs	r5, #0
  f_open(&File, path, FA_CREATE_ALWAYS | FA_WRITE);
 8003b04:	f016 fdbe 	bl	801a684 <f_open>
  f_close(&File);
 8003b08:	a83c      	add	r0, sp, #240	; 0xf0
 8003b0a:	f017 fbff 	bl	801b30c <f_close>
  f_open(&File, path, FA_OPEN_APPEND | FA_WRITE);
 8003b0e:	2232      	movs	r2, #50	; 0x32
 8003b10:	4928      	ldr	r1, [pc, #160]	; (8003bb4 <TEST_GetNextValidationInput+0x7ac>)
 8003b12:	a83c      	add	r0, sp, #240	; 0xf0
 8003b14:	f016 fdb6 	bl	801a684 <f_open>
  f_printf(&File, ",Confusion Matrix\n\n");
 8003b18:	4927      	ldr	r1, [pc, #156]	; (8003bb8 <TEST_GetNextValidationInput+0x7b0>)
 8003b1a:	a83c      	add	r0, sp, #240	; 0xf0
 8003b1c:	f017 ffe2 	bl	801bae4 <f_printf>
  f_printf(&File, ",Predicted\n");
 8003b20:	a83c      	add	r0, sp, #240	; 0xf0
 8003b22:	4926      	ldr	r1, [pc, #152]	; (8003bbc <TEST_GetNextValidationInput+0x7b4>)
 8003b24:	f017 ffde 	bl	801bae4 <f_printf>
    f_printf(&File, "%s,", NN_OUTPUT_CLASS_LIST[row]);
 8003b28:	f858 2f04 	ldr.w	r2, [r8, #4]!
 8003b2c:	4651      	mov	r1, sl
 8003b2e:	a83c      	add	r0, sp, #240	; 0xf0
 8003b30:	f104 0918 	add.w	r9, r4, #24
 8003b34:	f017 ffd6 	bl	801bae4 <f_printf>
      f_printf(&File, "%d,", value);
 8003b38:	f854 2f04 	ldr.w	r2, [r4, #4]!
 8003b3c:	4639      	mov	r1, r7
 8003b3e:	a83c      	add	r0, sp, #240	; 0xf0
 8003b40:	f017 ffd0 	bl	801bae4 <f_printf>
    for (int col = 0; col < NN_OUTPUT_CLASS_NUMBER; col++)
 8003b44:	45a1      	cmp	r9, r4
 8003b46:	d1f7      	bne.n	8003b38 <TEST_GetNextValidationInput+0x730>
 8003b48:	3501      	adds	r5, #1
    if (row == NN_OUTPUT_CLASS_NUMBER / 2)
 8003b4a:	2d04      	cmp	r5, #4
 8003b4c:	d067      	beq.n	8003c1e <TEST_GetNextValidationInput+0x816>
    f_printf(&File, "\n");
 8003b4e:	4631      	mov	r1, r6
 8003b50:	a83c      	add	r0, sp, #240	; 0xf0
 8003b52:	f017 ffc7 	bl	801bae4 <f_printf>
  for (int row = 0; row < NN_OUTPUT_CLASS_NUMBER; row++)
 8003b56:	2d06      	cmp	r5, #6
 8003b58:	d1e6      	bne.n	8003b28 <TEST_GetNextValidationInput+0x720>
  f_close(&File);
 8003b5a:	a83c      	add	r0, sp, #240	; 0xf0
 8003b5c:	f017 fbd6 	bl	801b30c <f_close>
      if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
 8003b60:	f8db 3560 	ldr.w	r3, [fp, #1376]	; 0x560
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d14a      	bne.n	8003bfe <TEST_GetNextValidationInput+0x7f6>
      TestContext_Ptr->ValidationContext.validation_completed =1;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	f8cb 3440 	str.w	r3, [fp, #1088]	; 0x440
}
 8003b6e:	f50d 7d49 	add.w	sp, sp, #804	; 0x324
 8003b72:	ecbd 8b10 	vpop	{d8-d15}
 8003b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b7a:	bf00      	nop
 8003b7c:	24000008 	.word	0x24000008
 8003b80:	08028e3c 	.word	0x08028e3c
 8003b84:	08028e7c 	.word	0x08028e7c
 8003b88:	08028e88 	.word	0x08028e88
 8003b8c:	24000020 	.word	0x24000020
 8003b90:	08028e98 	.word	0x08028e98
 8003b94:	08028e60 	.word	0x08028e60
 8003b98:	08028ea4 	.word	0x08028ea4
 8003b9c:	08028eb4 	.word	0x08028eb4
 8003ba0:	08028ed0 	.word	0x08028ed0
 8003ba4:	080290c8 	.word	0x080290c8
 8003ba8:	08028f28 	.word	0x08028f28
 8003bac:	08028f78 	.word	0x08028f78
 8003bb0:	08028f0c 	.word	0x08028f0c
 8003bb4:	08028f3c 	.word	0x08028f3c
 8003bb8:	08028f54 	.word	0x08028f54
 8003bbc:	08028f68 	.word	0x08028f68
 8003bc0:	24000004 	.word	0x24000004
 8003bc4:	08028f74 	.word	0x08028f74
    float recall = 0.0f;
 8003bc8:	eeb0 6a67 	vmov.f32	s12, s15
    float precision = 0.0f;
 8003bcc:	eeb0 7a67 	vmov.f32	s14, s15
    float f1_score = 0.0f;
 8003bd0:	eef0 5a67 	vmov.f32	s11, s15
 8003bd4:	e5ac      	b.n	8003730 <TEST_GetNextValidationInput+0x328>
    if ((true_positives + false_negatives) != 0)
 8003bd6:	2a00      	cmp	r2, #0
 8003bd8:	d0f6      	beq.n	8003bc8 <TEST_GetNextValidationInput+0x7c0>
 8003bda:	ee07 4a10 	vmov	s14, r4
 8003bde:	eef8 5a47 	vcvt.f32.u32	s11, s14
    float precision = 0.0f;
 8003be2:	eeb0 7a67 	vmov.f32	s14, s15
      recall = true_positives / (float)(true_positives + false_negatives);
 8003be6:	ee06 2a90 	vmov	s13, r2
 8003bea:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8003bee:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 8003bf2:	e58f      	b.n	8003714 <TEST_GetNextValidationInput+0x30c>
  if (total_support != 0)
 8003bf4:	ed9f cb24 	vldr	d12, [pc, #144]	; 8003c88 <TEST_GetNextValidationInput+0x880>
  report.accuracy = 0.0f;
 8003bf8:	ed9f fa25 	vldr	s30, [pc, #148]	; 8003c90 <TEST_GetNextValidationInput+0x888>
 8003bfc:	e5c1      	b.n	8003782 <TEST_GetNextValidationInput+0x37a>
        HAL_Delay(1000);
 8003bfe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c02:	f009 feb3 	bl	800d96c <HAL_Delay>
 8003c06:	e7af      	b.n	8003b68 <TEST_GetNextValidationInput+0x760>
      support += conf_matrix[target][pred];
 8003c08:	189d      	adds	r5, r3, r2
        false_negatives += conf_matrix[target][pred];
 8003c0a:	449a      	add	sl, r3
 8003c0c:	1823      	adds	r3, r4, r0
      support += conf_matrix[target][pred];
 8003c0e:	4429      	add	r1, r5
        false_negatives += conf_matrix[target][pred];
 8003c10:	4452      	add	r2, sl
 8003c12:	4419      	add	r1, r3
 8003c14:	e548      	b.n	80036a8 <TEST_GetNextValidationInput+0x2a0>
      support += conf_matrix[target][pred];
 8003c16:	4419      	add	r1, r3
        false_negatives += conf_matrix[target][pred];
 8003c18:	441d      	add	r5, r3
      support += conf_matrix[target][pred];
 8003c1a:	4411      	add	r1, r2
 8003c1c:	e53e      	b.n	800369c <TEST_GetNextValidationInput+0x294>
      f_printf(&File, " Ground truth");
 8003c1e:	491d      	ldr	r1, [pc, #116]	; (8003c94 <TEST_GetNextValidationInput+0x88c>)
 8003c20:	a83c      	add	r0, sp, #240	; 0xf0
 8003c22:	f017 ff5f 	bl	801bae4 <f_printf>
    f_printf(&File, "\n");
 8003c26:	4631      	mov	r1, r6
 8003c28:	a83c      	add	r0, sp, #240	; 0xf0
 8003c2a:	f017 ff5b 	bl	801bae4 <f_printf>
 8003c2e:	e77b      	b.n	8003b28 <TEST_GetNextValidationInput+0x720>
        false_positives += conf_matrix[gtruth][target];
 8003c30:	6e34      	ldr	r4, [r6, #96]	; 0x60
 8003c32:	1918      	adds	r0, r3, r4
 8003c34:	e557      	b.n	80036e6 <TEST_GetNextValidationInput+0x2de>
 8003c36:	6cb0      	ldr	r0, [r6, #72]	; 0x48
 8003c38:	6e33      	ldr	r3, [r6, #96]	; 0x60
 8003c3a:	4420      	add	r0, r4
 8003c3c:	4418      	add	r0, r3
 8003c3e:	e552      	b.n	80036e6 <TEST_GetNextValidationInput+0x2de>
 8003c40:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003c42:	6cb0      	ldr	r0, [r6, #72]	; 0x48
 8003c44:	441c      	add	r4, r3
 8003c46:	6e33      	ldr	r3, [r6, #96]	; 0x60
 8003c48:	4420      	add	r0, r4
 8003c4a:	4418      	add	r0, r3
 8003c4c:	e54b      	b.n	80036e6 <TEST_GetNextValidationInput+0x2de>
 8003c4e:	69b3      	ldr	r3, [r6, #24]
 8003c50:	6b34      	ldr	r4, [r6, #48]	; 0x30
 8003c52:	6cb0      	ldr	r0, [r6, #72]	; 0x48
 8003c54:	4423      	add	r3, r4
 8003c56:	4418      	add	r0, r3
 8003c58:	e541      	b.n	80036de <TEST_GetNextValidationInput+0x2d6>
 8003c5a:	6833      	ldr	r3, [r6, #0]
 8003c5c:	69b4      	ldr	r4, [r6, #24]
 8003c5e:	6b30      	ldr	r0, [r6, #48]	; 0x30
 8003c60:	4423      	add	r3, r4
 8003c62:	4403      	add	r3, r0
 8003c64:	e536      	b.n	80036d4 <TEST_GetNextValidationInput+0x2cc>
        false_negatives += conf_matrix[target][pred];
 8003c66:	4402      	add	r2, r0
        false_positives += conf_matrix[gtruth][target];
 8003c68:	6834      	ldr	r4, [r6, #0]
 8003c6a:	e529      	b.n	80036c0 <TEST_GetNextValidationInput+0x2b8>
        false_negatives += conf_matrix[target][pred];
 8003c6c:	4423      	add	r3, r4
      support += conf_matrix[target][pred];
 8003c6e:	1825      	adds	r5, r4, r0
        false_positives += conf_matrix[gtruth][target];
 8003c70:	6834      	ldr	r4, [r6, #0]
        false_negatives += conf_matrix[target][pred];
 8003c72:	181a      	adds	r2, r3, r0
      support += conf_matrix[target][pred];
 8003c74:	4429      	add	r1, r5
 8003c76:	e523      	b.n	80036c0 <TEST_GetNextValidationInput+0x2b8>
        false_negatives += conf_matrix[target][pred];
 8003c78:	4411      	add	r1, r2
 8003c7a:	4422      	add	r2, r4
 8003c7c:	440c      	add	r4, r1
 8003c7e:	1811      	adds	r1, r2, r0
 8003c80:	1902      	adds	r2, r0, r4
 8003c82:	4419      	add	r1, r3
 8003c84:	e518      	b.n	80036b8 <TEST_GetNextValidationInput+0x2b0>
 8003c86:	bf00      	nop
	...
 8003c94:	08028f7c 	.word	0x08028f7c

08003c98 <TEST_Run>:
  uint8_t sd_error;
  stm32fs_err_t ret;
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;


  if((Operating_Mode == DUMP) && (TestContext_Ptr->TestRunContext.src_buff_addr != NULL))
 8003c98:	2903      	cmp	r1, #3
{
 8003c9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c9e:	4604      	mov	r4, r0
 8003ca0:	b0da      	sub	sp, #360	; 0x168
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 8003ca2:	f8d0 563c 	ldr.w	r5, [r0, #1596]	; 0x63c
  if((Operating_Mode == DUMP) && (TestContext_Ptr->TestRunContext.src_buff_addr != NULL))
 8003ca6:	d04b      	beq.n	8003d40 <TEST_Run+0xa8>
        }
      }
      break;
    }
  }
  else if((Operating_Mode == CAPTURE) && (TestContext_Ptr->TestRunContext.PerformCapture == 1) && (TestContext_Ptr->TestRunContext.src_buff_addr != NULL))
 8003ca8:	2904      	cmp	r1, #4
 8003caa:	d002      	beq.n	8003cb2 <TEST_Run+0x1a>

    default:
      break;
    }
  }
}
 8003cac:	b05a      	add	sp, #360	; 0x168
 8003cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  else if((Operating_Mode == CAPTURE) && (TestContext_Ptr->TestRunContext.PerformCapture == 1) && (TestContext_Ptr->TestRunContext.src_buff_addr != NULL))
 8003cb2:	f8d0 361c 	ldr.w	r3, [r0, #1564]	; 0x61c
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d1f8      	bne.n	8003cac <TEST_Run+0x14>
 8003cba:	f8d0 1608 	ldr.w	r1, [r0, #1544]	; 0x608
 8003cbe:	2900      	cmp	r1, #0
 8003cc0:	d0f4      	beq.n	8003cac <TEST_Run+0x14>
    switch(TestContext_Ptr->CaptureContext.capture_state)
 8003cc2:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	f000 816e 	beq.w	8003fa8 <TEST_Run+0x310>
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d1ed      	bne.n	8003cac <TEST_Run+0x14>
      while(App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 8003cd0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003cd2:	7d13      	ldrb	r3, [r2, #20]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d0fc      	beq.n	8003cd2 <TEST_Run+0x3a>
      if(TestContext_Ptr->TestRunContext.rb_swap == 1)
 8003cd8:	f8d4 3624 	ldr.w	r3, [r4, #1572]	; 0x624
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	f000 82ee 	beq.w	80042be <TEST_Run+0x626>
      if(TestContext_Ptr->CaptureContext.capture_file_format == BMP)
 8003ce2:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	f000 82dd 	beq.w	80042a6 <TEST_Run+0x60e>
      else if(TestContext_Ptr->CaptureContext.capture_file_format == RAW)
 8003cec:	2b03      	cmp	r3, #3
 8003cee:	f040 810c 	bne.w	8003f0a <TEST_Run+0x272>
        sprintf(file_name, "%s/%s_%d.raw", TestContext_Ptr->CaptureContext.capture_folder_name, TestContext_Ptr->TestRunContext.src_buff_name, (unsigned int)TestContext_Ptr->CaptureContext.capture_frame_count);
 8003cf2:	f8d4 10c8 	ldr.w	r1, [r4, #200]	; 0xc8
 8003cf6:	f104 02de 	add.w	r2, r4, #222	; 0xde
 8003cfa:	f8d4 360c 	ldr.w	r3, [r4, #1548]	; 0x60c
 8003cfe:	a834      	add	r0, sp, #208	; 0xd0
 8003d00:	9100      	str	r1, [sp, #0]
 8003d02:	49c6      	ldr	r1, [pc, #792]	; (800401c <TEST_Run+0x384>)
 8003d04:	f022 ff44 	bl	8026b90 <siprintf>
        ret = STM32Fs_WriteRaw(file_name, (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr, TestContext_Ptr->TestRunContext.src_width_size*TestContext_Ptr->TestRunContext.src_height_size);
 8003d08:	f8d4 3610 	ldr.w	r3, [r4, #1552]	; 0x610
 8003d0c:	a834      	add	r0, sp, #208	; 0xd0
 8003d0e:	f8d4 2614 	ldr.w	r2, [r4, #1556]	; 0x614
 8003d12:	f8d4 1608 	ldr.w	r1, [r4, #1544]	; 0x608
 8003d16:	fb02 f203 	mul.w	r2, r2, r3
 8003d1a:	f018 fe11 	bl	801c940 <STM32Fs_WriteRaw>
      if (ret != STM32FS_ERROR_NONE)
 8003d1e:	2800      	cmp	r0, #0
 8003d20:	d0c4      	beq.n	8003cac <TEST_Run+0x14>
        UTIL_LCD_DisplayStringAt(0, LINE(12), (uint8_t *)"Error. Writting image failed", CENTER_MODE);
 8003d22:	f019 fbe1 	bl	801d4e8 <UTIL_LCD_GetFont>
 8003d26:	88c1      	ldrh	r1, [r0, #6]
 8003d28:	2301      	movs	r3, #1
 8003d2a:	4abd      	ldr	r2, [pc, #756]	; (8004020 <TEST_Run+0x388>)
 8003d2c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8003d30:	2000      	movs	r0, #0
 8003d32:	0089      	lsls	r1, r1, #2
 8003d34:	f019 fca6 	bl	801d684 <UTIL_LCD_DisplayStringAt>
        DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8003d38:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8003d3a:	f7fd ffb5 	bl	8001ca8 <DISPLAY_Refresh>
 8003d3e:	e0e4      	b.n	8003f0a <TEST_Run+0x272>
  if((Operating_Mode == DUMP) && (TestContext_Ptr->TestRunContext.src_buff_addr != NULL))
 8003d40:	f8d0 3608 	ldr.w	r3, [r0, #1544]	; 0x608
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d0b1      	beq.n	8003cac <TEST_Run+0x14>
    switch(TestContext_Ptr->DumpContext.dump_state)
 8003d48:	f8d0 60b8 	ldr.w	r6, [r0, #184]	; 0xb8
 8003d4c:	2e01      	cmp	r6, #1
 8003d4e:	d02f      	beq.n	8003db0 <TEST_Run+0x118>
 8003d50:	2e02      	cmp	r6, #2
 8003d52:	d1ab      	bne.n	8003cac <TEST_Run+0x14>
      if((App_Cxt_Ptr->Test_ContextPtr->UartContext.uart_cmd_ongoing) && (App_Cxt_Ptr->Test_ContextPtr->UartContext.uart_host_requested_dump_memory == SDRAM))
 8003d54:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003d56:	f8d3 2560 	ldr.w	r2, [r3, #1376]	; 0x560
 8003d5a:	2a00      	cmp	r2, #0
 8003d5c:	f000 80c5 	beq.w	8003eea <TEST_Run+0x252>
 8003d60:	f893 3566 	ldrb.w	r3, [r3, #1382]	; 0x566
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	f040 80c0 	bne.w	8003eea <TEST_Run+0x252>
        for(int i=0; i<strlen(TestContext_Ptr->TestRunContext.src_buff_name);i++)
 8003d6a:	2600      	movs	r6, #0
 8003d6c:	e006      	b.n	8003d7c <TEST_Run+0xe4>
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(TestContext_Ptr->TestRunContext.src_buff_name+i);
 8003d6e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8003d70:	6813      	ldr	r3, [r2, #0]
 8003d72:	1c59      	adds	r1, r3, #1
 8003d74:	6011      	str	r1, [r2, #0]
 8003d76:	5dba      	ldrb	r2, [r7, r6]
        for(int i=0; i<strlen(TestContext_Ptr->TestRunContext.src_buff_name);i++)
 8003d78:	3601      	adds	r6, #1
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(TestContext_Ptr->TestRunContext.src_buff_name+i);
 8003d7a:	701a      	strb	r2, [r3, #0]
        for(int i=0; i<strlen(TestContext_Ptr->TestRunContext.src_buff_name);i++)
 8003d7c:	f8d4 760c 	ldr.w	r7, [r4, #1548]	; 0x60c
 8003d80:	4638      	mov	r0, r7
 8003d82:	f7fc fab7 	bl	80002f4 <strlen>
 8003d86:	42b0      	cmp	r0, r6
 8003d88:	d8f1      	bhi.n	8003d6e <TEST_Run+0xd6>
        for(int i=0; i<TestContext_Ptr->TestRunContext.src_size;i++)
 8003d8a:	f8d4 3618 	ldr.w	r3, [r4, #1560]	; 0x618
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d08c      	beq.n	8003cac <TEST_Run+0x14>
 8003d92:	2300      	movs	r3, #0
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(((uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr)+i);
 8003d94:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8003d96:	f8d4 0608 	ldr.w	r0, [r4, #1544]	; 0x608
 8003d9a:	680a      	ldr	r2, [r1, #0]
 8003d9c:	1c56      	adds	r6, r2, #1
 8003d9e:	600e      	str	r6, [r1, #0]
 8003da0:	5cc1      	ldrb	r1, [r0, r3]
        for(int i=0; i<TestContext_Ptr->TestRunContext.src_size;i++)
 8003da2:	3301      	adds	r3, #1
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(((uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr)+i);
 8003da4:	7011      	strb	r1, [r2, #0]
        for(int i=0; i<TestContext_Ptr->TestRunContext.src_size;i++)
 8003da6:	f8d4 2618 	ldr.w	r2, [r4, #1560]	; 0x618
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d8f2      	bhi.n	8003d94 <TEST_Run+0xfc>
 8003dae:	e77d      	b.n	8003cac <TEST_Run+0x14>
      BSP_LED_Off(LED_GREEN);
 8003db0:	2000      	movs	r0, #0
 8003db2:	f006 ff75 	bl	800aca0 <BSP_LED_Off>
      BSP_LED_On(LED_RED);
 8003db6:	2002      	movs	r0, #2
 8003db8:	f006 ff62 	bl	800ac80 <BSP_LED_On>
      UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"DUMP BUSY ", RIGHT_MODE);
 8003dbc:	f019 fb94 	bl	801d4e8 <UTIL_LCD_GetFont>
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	88c1      	ldrh	r1, [r0, #6]
 8003dc4:	2000      	movs	r0, #0
 8003dc6:	4a97      	ldr	r2, [pc, #604]	; (8004024 <TEST_Run+0x38c>)
 8003dc8:	f019 fc5c 	bl	801d684 <UTIL_LCD_DisplayStringAt>
      sprintf(msg, "%s %.0f%%", App_Cxt_Ptr->nn_top1_output_class_name, App_Cxt_Ptr->nn_top1_output_class_proba * 100);
 8003dcc:	ed95 7a04 	vldr	s14, [r5, #16]
 8003dd0:	eddf 7a95 	vldr	s15, [pc, #596]	; 8004028 <TEST_Run+0x390>
 8003dd4:	a802      	add	r0, sp, #8
 8003dd6:	68ea      	ldr	r2, [r5, #12]
 8003dd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ddc:	4993      	ldr	r1, [pc, #588]	; (800402c <TEST_Run+0x394>)
 8003dde:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003de2:	ed8d 7b00 	vstr	d7, [sp]
 8003de6:	f022 fed3 	bl	8026b90 <siprintf>
      UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_TOP_N_LAST_LINE - NN_TOP_N_DISPLAY + 0), (uint8_t *)msg, CENTER_MODE);
 8003dea:	f019 fb7d 	bl	801d4e8 <UTIL_LCD_GetFont>
 8003dee:	88c1      	ldrh	r1, [r0, #6]
 8003df0:	4633      	mov	r3, r6
 8003df2:	aa02      	add	r2, sp, #8
 8003df4:	eb01 0781 	add.w	r7, r1, r1, lsl #2
 8003df8:	2000      	movs	r0, #0
 8003dfa:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 8003dfe:	f019 fc41 	bl	801d684 <UTIL_LCD_DisplayStringAt>
      sprintf(msg, "Inference: %ldms", App_Cxt_Ptr->nn_inference_time);
 8003e02:	68aa      	ldr	r2, [r5, #8]
 8003e04:	498a      	ldr	r1, [pc, #552]	; (8004030 <TEST_Run+0x398>)
 8003e06:	a802      	add	r0, sp, #8
 8003e08:	f022 fec2 	bl	8026b90 <siprintf>
      UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_INFER_TIME_LINE), (uint8_t *)msg, CENTER_MODE);
 8003e0c:	f019 fb6c 	bl	801d4e8 <UTIL_LCD_GetFont>
 8003e10:	88c1      	ldrh	r1, [r0, #6]
 8003e12:	aa02      	add	r2, sp, #8
 8003e14:	4633      	mov	r3, r6
 8003e16:	0109      	lsls	r1, r1, #4
 8003e18:	2000      	movs	r0, #0
 8003e1a:	f019 fc33 	bl	801d684 <UTIL_LCD_DisplayStringAt>
      DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8003e1e:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8003e20:	f7fd ff42 	bl	8001ca8 <DISPLAY_Refresh>
      HAL_Delay(200);
 8003e24:	20c8      	movs	r0, #200	; 0xc8
 8003e26:	f009 fda1 	bl	800d96c <HAL_Delay>
      while(App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 8003e2a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003e2c:	7d13      	ldrb	r3, [r2, #20]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d0fc      	beq.n	8003e2c <TEST_Run+0x194>
      if((App_Cxt_Ptr->Test_ContextPtr->UartContext.uart_cmd_ongoing) && (App_Cxt_Ptr->Test_ContextPtr->UartContext.uart_host_requested_dump_memory == SDRAM))
 8003e32:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003e34:	f8d3 2560 	ldr.w	r2, [r3, #1376]	; 0x560
 8003e38:	b332      	cbz	r2, 8003e88 <TEST_Run+0x1f0>
 8003e3a:	f893 2566 	ldrb.w	r2, [r3, #1382]	; 0x566
 8003e3e:	2a01      	cmp	r2, #1
 8003e40:	d122      	bne.n	8003e88 <TEST_Run+0x1f0>
        for(int i=0; i<strlen(TestContext_Ptr->TestRunContext.src_buff_name);i++)
 8003e42:	2600      	movs	r6, #0
 8003e44:	e006      	b.n	8003e54 <TEST_Run+0x1bc>
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(TestContext_Ptr->TestRunContext.src_buff_name+i);
 8003e46:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8003e48:	6813      	ldr	r3, [r2, #0]
 8003e4a:	1c59      	adds	r1, r3, #1
 8003e4c:	6011      	str	r1, [r2, #0]
 8003e4e:	5dba      	ldrb	r2, [r7, r6]
        for(int i=0; i<strlen(TestContext_Ptr->TestRunContext.src_buff_name);i++)
 8003e50:	3601      	adds	r6, #1
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(TestContext_Ptr->TestRunContext.src_buff_name+i);
 8003e52:	701a      	strb	r2, [r3, #0]
        for(int i=0; i<strlen(TestContext_Ptr->TestRunContext.src_buff_name);i++)
 8003e54:	f8d4 760c 	ldr.w	r7, [r4, #1548]	; 0x60c
 8003e58:	4638      	mov	r0, r7
 8003e5a:	f7fc fa4b 	bl	80002f4 <strlen>
 8003e5e:	42b0      	cmp	r0, r6
 8003e60:	d8f1      	bhi.n	8003e46 <TEST_Run+0x1ae>
        for(int i=0; i<TestContext_Ptr->TestRunContext.src_size;i++)
 8003e62:	f8d4 3618 	ldr.w	r3, [r4, #1560]	; 0x618
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d03b      	beq.n	8003ee2 <TEST_Run+0x24a>
 8003e6a:	2300      	movs	r3, #0
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(((uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr)+i);
 8003e6c:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8003e6e:	f8d4 0608 	ldr.w	r0, [r4, #1544]	; 0x608
 8003e72:	680a      	ldr	r2, [r1, #0]
 8003e74:	1c56      	adds	r6, r2, #1
 8003e76:	600e      	str	r6, [r1, #0]
 8003e78:	5cc1      	ldrb	r1, [r0, r3]
        for(int i=0; i<TestContext_Ptr->TestRunContext.src_size;i++)
 8003e7a:	3301      	adds	r3, #1
          *(App_Cxt_Ptr->Test_ContextPtr->DumpContext.dump_write_bufferPtr)++=*(((uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr)+i);
 8003e7c:	7011      	strb	r1, [r2, #0]
        for(int i=0; i<TestContext_Ptr->TestRunContext.src_size;i++)
 8003e7e:	f8d4 2618 	ldr.w	r2, [r4, #1560]	; 0x618
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d8f2      	bhi.n	8003e6c <TEST_Run+0x1d4>
 8003e86:	e02c      	b.n	8003ee2 <TEST_Run+0x24a>
        if(App_Cxt_Ptr->Test_ContextPtr->DumpContext.Dump_FrameSource != SDCARD_FILE)
 8003e88:	791b      	ldrb	r3, [r3, #4]
 8003e8a:	2b03      	cmp	r3, #3
 8003e8c:	d140      	bne.n	8003f10 <TEST_Run+0x278>
        HAL_RNG_GenerateRandomNumber(&TestContext_Ptr->RngHandle, &TestContext_Ptr->DumpContext.dump_session_id);
 8003e8e:	f104 0108 	add.w	r1, r4, #8
        sprintf(TestContext_Ptr->DumpContext.dump_session_folder_name,"%s/DUMP_SESS_%X", TestContext_Ptr->DumpContext.dump_folder_name, (unsigned int)TestContext_Ptr->DumpContext.dump_session_id);
 8003e92:	f104 0654 	add.w	r6, r4, #84	; 0x54
        HAL_RNG_GenerateRandomNumber(&TestContext_Ptr->RngHandle, &TestContext_Ptr->DumpContext.dump_session_id);
 8003e96:	f504 60c5 	add.w	r0, r4, #1576	; 0x628
 8003e9a:	f010 f8f3 	bl	8014084 <HAL_RNG_GenerateRandomNumber>
        sprintf(TestContext_Ptr->DumpContext.dump_session_name, "Session %X", (unsigned int)TestContext_Ptr->DumpContext.dump_session_id);
 8003e9e:	68a2      	ldr	r2, [r4, #8]
 8003ea0:	4964      	ldr	r1, [pc, #400]	; (8004034 <TEST_Run+0x39c>)
 8003ea2:	f104 0010 	add.w	r0, r4, #16
 8003ea6:	f022 fe73 	bl	8026b90 <siprintf>
        sprintf(TestContext_Ptr->DumpContext.dump_session_folder_name,"%s/DUMP_SESS_%X", TestContext_Ptr->DumpContext.dump_folder_name, (unsigned int)TestContext_Ptr->DumpContext.dump_session_id);
 8003eaa:	68a3      	ldr	r3, [r4, #8]
 8003eac:	f104 0222 	add.w	r2, r4, #34	; 0x22
 8003eb0:	4961      	ldr	r1, [pc, #388]	; (8004038 <TEST_Run+0x3a0>)
 8003eb2:	4630      	mov	r0, r6
 8003eb4:	f022 fe6c 	bl	8026b90 <siprintf>
        STM32Fs_CreateDir(TestContext_Ptr->DumpContext.dump_session_folder_name);
 8003eb8:	4630      	mov	r0, r6
 8003eba:	f018 fd19 	bl	801c8f0 <STM32Fs_CreateDir>
        if(TestContext_Ptr->TestRunContext.DumpFormat == GRAY8)
 8003ebe:	f894 3620 	ldrb.w	r3, [r4, #1568]	; 0x620
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d03d      	beq.n	8003f42 <TEST_Run+0x2aa>
        else if(TestContext_Ptr->TestRunContext.DumpFormat == BMP888)
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	f000 80c0 	beq.w	800404c <TEST_Run+0x3b4>
        else if(TestContext_Ptr->TestRunContext.DumpFormat == BMP565)
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	f000 8186 	beq.w	80041de <TEST_Run+0x546>
        else if(TestContext_Ptr->TestRunContext.DumpFormat == RAW)
 8003ed2:	2b03      	cmp	r3, #3
 8003ed4:	f000 81b1 	beq.w	800423a <TEST_Run+0x5a2>
        else if(TestContext_Ptr->TestRunContext.DumpFormat == TXT)
 8003ed8:	2b05      	cmp	r3, #5
 8003eda:	f000 8123 	beq.w	8004124 <TEST_Run+0x48c>
          Error_Handler();
 8003ede:	f001 f855 	bl	8004f8c <Error_Handler>
      TestContext_Ptr->DumpContext.dump_state = 2;
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
      break;
 8003ee8:	e6e0      	b.n	8003cac <TEST_Run+0x14>
        if(TestContext_Ptr->TestRunContext.DumpFormat == GRAY8)
 8003eea:	f894 3620 	ldrb.w	r3, [r4, #1568]	; 0x620
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d048      	beq.n	8003f84 <TEST_Run+0x2ec>
        else if(TestContext_Ptr->TestRunContext.DumpFormat == BMP565)
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	f000 80bb 	beq.w	800406e <TEST_Run+0x3d6>
        else if(TestContext_Ptr->TestRunContext.DumpFormat == BMP888)
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	f000 8183 	beq.w	8004204 <TEST_Run+0x56c>
        else if(TestContext_Ptr->TestRunContext.DumpFormat == RAW)
 8003efe:	2b03      	cmp	r3, #3
 8003f00:	f000 8192 	beq.w	8004228 <TEST_Run+0x590>
        else if(TestContext_Ptr->TestRunContext.DumpFormat == TXT)
 8003f04:	2b05      	cmp	r3, #5
 8003f06:	f000 80d7 	beq.w	80040b8 <TEST_Run+0x420>
        Error_Handler();
 8003f0a:	f001 f83f 	bl	8004f8c <Error_Handler>
}
 8003f0e:	e6cd      	b.n	8003cac <TEST_Run+0x14>
          BSP_CAMERA_DeInit(0);
 8003f10:	2000      	movs	r0, #0
 8003f12:	f008 f865 	bl	800bfe0 <BSP_CAMERA_DeInit>
          if (BSP_SD_Init(0) != BSP_ERROR_NONE)
 8003f16:	2000      	movs	r0, #0
 8003f18:	f009 fbe2 	bl	800d6e0 <BSP_SD_Init>
 8003f1c:	2800      	cmp	r0, #0
 8003f1e:	d0b6      	beq.n	8003e8e <TEST_Run+0x1f6>
            UTIL_LCD_DisplayStringAt(0, LINE(12), (uint8_t *)"Error. SD Card not detected", CENTER_MODE);
 8003f20:	f019 fae2 	bl	801d4e8 <UTIL_LCD_GetFont>
 8003f24:	88c1      	ldrh	r1, [r0, #6]
 8003f26:	2301      	movs	r3, #1
 8003f28:	4a44      	ldr	r2, [pc, #272]	; (800403c <TEST_Run+0x3a4>)
 8003f2a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8003f2e:	2000      	movs	r0, #0
 8003f30:	0089      	lsls	r1, r1, #2
 8003f32:	f019 fba7 	bl	801d684 <UTIL_LCD_DisplayStringAt>
            DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8003f36:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8003f38:	f7fd feb6 	bl	8001ca8 <DISPLAY_Refresh>
            Error_Handler();
 8003f3c:	f001 f826 	bl	8004f8c <Error_Handler>
 8003f40:	e7a5      	b.n	8003e8e <TEST_Run+0x1f6>
          sprintf(file_name, "%s/%s_.bmp", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 8003f42:	4632      	mov	r2, r6
 8003f44:	f8d4 360c 	ldr.w	r3, [r4, #1548]	; 0x60c
 8003f48:	493d      	ldr	r1, [pc, #244]	; (8004040 <TEST_Run+0x3a8>)
 8003f4a:	a834      	add	r0, sp, #208	; 0xd0
 8003f4c:	f022 fe20 	bl	8026b90 <siprintf>
          ret = STM32Fs_WriteImageBMPGray(file_name, (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr, TestContext_Ptr->TestRunContext.src_width_size, TestContext_Ptr->TestRunContext.src_height_size);
 8003f50:	a834      	add	r0, sp, #208	; 0xd0
 8003f52:	f8d4 3614 	ldr.w	r3, [r4, #1556]	; 0x614
 8003f56:	f8d4 2610 	ldr.w	r2, [r4, #1552]	; 0x610
 8003f5a:	f8d4 1608 	ldr.w	r1, [r4, #1544]	; 0x608
 8003f5e:	f018 ff29 	bl	801cdb4 <STM32Fs_WriteImageBMPGray>
        if (ret != STM32FS_ERROR_NONE)
 8003f62:	2800      	cmp	r0, #0
 8003f64:	d0bd      	beq.n	8003ee2 <TEST_Run+0x24a>
          UTIL_LCD_DisplayStringAt(0, LINE(12), (uint8_t *)"Error. Writting image failed", CENTER_MODE);
 8003f66:	f019 fabf 	bl	801d4e8 <UTIL_LCD_GetFont>
 8003f6a:	88c1      	ldrh	r1, [r0, #6]
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	4a2c      	ldr	r2, [pc, #176]	; (8004020 <TEST_Run+0x388>)
 8003f70:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8003f74:	2000      	movs	r0, #0
 8003f76:	0089      	lsls	r1, r1, #2
 8003f78:	f019 fb84 	bl	801d684 <UTIL_LCD_DisplayStringAt>
          DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8003f7c:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8003f7e:	f7fd fe93 	bl	8001ca8 <DISPLAY_Refresh>
 8003f82:	e7ac      	b.n	8003ede <TEST_Run+0x246>
          sprintf(file_name, "%s/%s.bmp", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 8003f84:	f8d4 360c 	ldr.w	r3, [r4, #1548]	; 0x60c
 8003f88:	f104 0254 	add.w	r2, r4, #84	; 0x54
 8003f8c:	492d      	ldr	r1, [pc, #180]	; (8004044 <TEST_Run+0x3ac>)
 8003f8e:	a834      	add	r0, sp, #208	; 0xd0
 8003f90:	f022 fdfe 	bl	8026b90 <siprintf>
          ret = STM32Fs_WriteImageBMPGray(file_name, (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr, TestContext_Ptr->TestRunContext.src_width_size, TestContext_Ptr->TestRunContext.src_height_size);
 8003f94:	a834      	add	r0, sp, #208	; 0xd0
 8003f96:	f8d4 3614 	ldr.w	r3, [r4, #1556]	; 0x614
 8003f9a:	f8d4 2610 	ldr.w	r2, [r4, #1552]	; 0x610
 8003f9e:	f8d4 1608 	ldr.w	r1, [r4, #1544]	; 0x608
 8003fa2:	f018 ff07 	bl	801cdb4 <STM32Fs_WriteImageBMPGray>
 8003fa6:	e6ba      	b.n	8003d1e <TEST_Run+0x86>
      BSP_LED_Off(LED_GREEN);
 8003fa8:	2000      	movs	r0, #0
 8003faa:	f006 fe79 	bl	800aca0 <BSP_LED_Off>
      BSP_LED_On(LED_RED);
 8003fae:	2002      	movs	r0, #2
 8003fb0:	f006 fe66 	bl	800ac80 <BSP_LED_On>
      UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"CAPTURE BUSY ", RIGHT_MODE);
 8003fb4:	f019 fa98 	bl	801d4e8 <UTIL_LCD_GetFont>
 8003fb8:	4a23      	ldr	r2, [pc, #140]	; (8004048 <TEST_Run+0x3b0>)
 8003fba:	88c1      	ldrh	r1, [r0, #6]
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	2000      	movs	r0, #0
 8003fc0:	f019 fb60 	bl	801d684 <UTIL_LCD_DisplayStringAt>
      DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8003fc4:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8003fc6:	f7fd fe6f 	bl	8001ca8 <DISPLAY_Refresh>
      HAL_Delay(200);
 8003fca:	20c8      	movs	r0, #200	; 0xc8
 8003fcc:	f009 fcce 	bl	800d96c <HAL_Delay>
      while(App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready == 0);
 8003fd0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003fd2:	7d13      	ldrb	r3, [r2, #20]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d0fc      	beq.n	8003fd2 <TEST_Run+0x33a>
      BSP_CAMERA_DeInit(0);
 8003fd8:	2000      	movs	r0, #0
 8003fda:	f008 f801 	bl	800bfe0 <BSP_CAMERA_DeInit>
      TestContext_Ptr->CaptureContext.capture_frame_count ++;
 8003fde:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
      sd_error = BSP_SD_Init(0);
 8003fe2:	2000      	movs	r0, #0
      TestContext_Ptr->CaptureContext.capture_frame_count ++;
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
      sd_error = BSP_SD_Init(0);
 8003fea:	f009 fb79 	bl	800d6e0 <BSP_SD_Init>
      if (sd_error != BSP_ERROR_NONE)
 8003fee:	f010 0fff 	tst.w	r0, #255	; 0xff
 8003ff2:	d150      	bne.n	8004096 <TEST_Run+0x3fe>
      if(TestContext_Ptr->TestRunContext.rb_swap == 1)
 8003ff4:	f8d4 3624 	ldr.w	r3, [r4, #1572]	; 0x624
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	f000 8131 	beq.w	8004260 <TEST_Run+0x5c8>
      if(TestContext_Ptr->CaptureContext.capture_file_format == BMP)
 8003ffe:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
 8004002:	2b04      	cmp	r3, #4
 8004004:	f000 8138 	beq.w	8004278 <TEST_Run+0x5e0>
      else if(TestContext_Ptr->CaptureContext.capture_file_format == RAW)
 8004008:	2b03      	cmp	r3, #3
 800400a:	f000 80c0 	beq.w	800418e <TEST_Run+0x4f6>
        Error_Handler();
 800400e:	f000 ffbd 	bl	8004f8c <Error_Handler>
      TestContext_Ptr->CaptureContext.capture_state = 2;
 8004012:	2302      	movs	r3, #2
 8004014:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
      break;
 8004018:	e648      	b.n	8003cac <TEST_Run+0x14>
 800401a:	bf00      	nop
 800401c:	08029124 	.word	0x08029124
 8004020:	080290d8 	.word	0x080290d8
 8004024:	08029068 	.word	0x08029068
 8004028:	42c80000 	.word	0x42c80000
 800402c:	08028a28 	.word	0x08028a28
 8004030:	08028a34 	.word	0x08028a34
 8004034:	08028af8 	.word	0x08028af8
 8004038:	08029074 	.word	0x08029074
 800403c:	08028b04 	.word	0x08028b04
 8004040:	08029084 	.word	0x08029084
 8004044:	080290f8 	.word	0x080290f8
 8004048:	08029104 	.word	0x08029104
          sprintf(file_name, "%s/%s_.bmp", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 800404c:	4632      	mov	r2, r6
 800404e:	f8d4 360c 	ldr.w	r3, [r4, #1548]	; 0x60c
 8004052:	a834      	add	r0, sp, #208	; 0xd0
 8004054:	499f      	ldr	r1, [pc, #636]	; (80042d4 <TEST_Run+0x63c>)
 8004056:	f022 fd9b 	bl	8026b90 <siprintf>
          ret = STM32Fs_WriteImageBMP(file_name, (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr, TestContext_Ptr->TestRunContext.src_width_size, TestContext_Ptr->TestRunContext.src_height_size);
 800405a:	a834      	add	r0, sp, #208	; 0xd0
 800405c:	f8d4 3614 	ldr.w	r3, [r4, #1556]	; 0x614
 8004060:	f8d4 2610 	ldr.w	r2, [r4, #1552]	; 0x610
 8004064:	f8d4 1608 	ldr.w	r1, [r4, #1544]	; 0x608
 8004068:	f018 fc8c 	bl	801c984 <STM32Fs_WriteImageBMP>
 800406c:	e779      	b.n	8003f62 <TEST_Run+0x2ca>
          ret = STM32Fs_WriteImageBMP16(file_name, (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr, TestContext_Ptr->TestRunContext.src_width_size, TestContext_Ptr->TestRunContext.src_height_size, 0);
 800406e:	2600      	movs	r6, #0
          sprintf(file_name, "%s/%s.bmp", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 8004070:	f8d4 360c 	ldr.w	r3, [r4, #1548]	; 0x60c
 8004074:	f104 0254 	add.w	r2, r4, #84	; 0x54
 8004078:	4997      	ldr	r1, [pc, #604]	; (80042d8 <TEST_Run+0x640>)
 800407a:	a834      	add	r0, sp, #208	; 0xd0
 800407c:	f022 fd88 	bl	8026b90 <siprintf>
          ret = STM32Fs_WriteImageBMP16(file_name, (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr, TestContext_Ptr->TestRunContext.src_width_size, TestContext_Ptr->TestRunContext.src_height_size, 0);
 8004080:	f8d4 3614 	ldr.w	r3, [r4, #1556]	; 0x614
 8004084:	f8d4 2610 	ldr.w	r2, [r4, #1552]	; 0x610
 8004088:	a834      	add	r0, sp, #208	; 0xd0
 800408a:	f8d4 1608 	ldr.w	r1, [r4, #1544]	; 0x608
 800408e:	9600      	str	r6, [sp, #0]
 8004090:	f018 fcd2 	bl	801ca38 <STM32Fs_WriteImageBMP16>
 8004094:	e643      	b.n	8003d1e <TEST_Run+0x86>
        UTIL_LCD_DisplayStringAt(0, LINE(12), (uint8_t *)"Error. SD Card not detected", CENTER_MODE);
 8004096:	f019 fa27 	bl	801d4e8 <UTIL_LCD_GetFont>
 800409a:	88c1      	ldrh	r1, [r0, #6]
 800409c:	2301      	movs	r3, #1
 800409e:	4a8f      	ldr	r2, [pc, #572]	; (80042dc <TEST_Run+0x644>)
 80040a0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80040a4:	2000      	movs	r0, #0
 80040a6:	0089      	lsls	r1, r1, #2
 80040a8:	f019 faec 	bl	801d684 <UTIL_LCD_DisplayStringAt>
        DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 80040ac:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80040ae:	f7fd fdfb 	bl	8001ca8 <DISPLAY_Refresh>
        Error_Handler();
 80040b2:	f000 ff6b 	bl	8004f8c <Error_Handler>
 80040b6:	e79d      	b.n	8003ff4 <TEST_Run+0x35c>
          sprintf(file_name, "%s/%s.txt", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 80040b8:	f10d 08d0 	add.w	r8, sp, #208	; 0xd0
 80040bc:	f8d4 360c 	ldr.w	r3, [r4, #1548]	; 0x60c
 80040c0:	f104 0254 	add.w	r2, r4, #84	; 0x54
 80040c4:	4986      	ldr	r1, [pc, #536]	; (80042e0 <TEST_Run+0x648>)
 80040c6:	4640      	mov	r0, r8
 80040c8:	f022 fd62 	bl	8026b90 <siprintf>
          ret = STM32Fs_WriteTextToFile(file_name, "          Neural Network Output\n\n", STM32FS_CREATE_NEW_FILE);
 80040cc:	4640      	mov	r0, r8
 80040ce:	2200      	movs	r2, #0
 80040d0:	4984      	ldr	r1, [pc, #528]	; (80042e4 <TEST_Run+0x64c>)
 80040d2:	f018 ffcf 	bl	801d074 <STM32Fs_WriteTextToFile>
          for (int i = 0; i < (TestContext_Ptr->TestRunContext.src_size)/4; i++)
 80040d6:	f8d4 3618 	ldr.w	r3, [r4, #1560]	; 0x618
 80040da:	089b      	lsrs	r3, r3, #2
 80040dc:	f43f ae1f 	beq.w	8003d1e <TEST_Run+0x86>
 80040e0:	f8df a214 	ldr.w	sl, [pc, #532]	; 80042f8 <TEST_Run+0x660>
 80040e4:	2600      	movs	r6, #0
 80040e6:	af14      	add	r7, sp, #80	; 0x50
            sprintf(str, "%20s:%8.3f\n", NN_OUTPUT_CLASS_LIST[i], *((float*)TestContext_Ptr->TestRunContext.src_buff_addr + i));
 80040e8:	f8df 9210 	ldr.w	r9, [pc, #528]	; 80042fc <TEST_Run+0x664>
 80040ec:	f8d4 3608 	ldr.w	r3, [r4, #1544]	; 0x608
 80040f0:	4649      	mov	r1, r9
 80040f2:	f85a 2b04 	ldr.w	r2, [sl], #4
 80040f6:	4638      	mov	r0, r7
 80040f8:	eb03 0386 	add.w	r3, r3, r6, lsl #2
          for (int i = 0; i < (TestContext_Ptr->TestRunContext.src_size)/4; i++)
 80040fc:	3601      	adds	r6, #1
            sprintf(str, "%20s:%8.3f\n", NN_OUTPUT_CLASS_LIST[i], *((float*)TestContext_Ptr->TestRunContext.src_buff_addr + i));
 80040fe:	ed93 7a00 	vldr	s14, [r3]
 8004102:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8004106:	ed8d 7b00 	vstr	d7, [sp]
 800410a:	f022 fd41 	bl	8026b90 <siprintf>
            ret = STM32Fs_WriteTextToFile(file_name, str, STM32FS_APPEND_TO_FILE);
 800410e:	2201      	movs	r2, #1
 8004110:	4639      	mov	r1, r7
 8004112:	4640      	mov	r0, r8
 8004114:	f018 ffae 	bl	801d074 <STM32Fs_WriteTextToFile>
          for (int i = 0; i < (TestContext_Ptr->TestRunContext.src_size)/4; i++)
 8004118:	f8d4 3618 	ldr.w	r3, [r4, #1560]	; 0x618
 800411c:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
 8004120:	d3e4      	bcc.n	80040ec <TEST_Run+0x454>
 8004122:	e5fc      	b.n	8003d1e <TEST_Run+0x86>
          sprintf(file_name, "%s/%s.txt", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 8004124:	f10d 08d0 	add.w	r8, sp, #208	; 0xd0
 8004128:	f8d4 360c 	ldr.w	r3, [r4, #1548]	; 0x60c
 800412c:	4632      	mov	r2, r6
 800412e:	496c      	ldr	r1, [pc, #432]	; (80042e0 <TEST_Run+0x648>)
 8004130:	4640      	mov	r0, r8
 8004132:	f022 fd2d 	bl	8026b90 <siprintf>
          ret = STM32Fs_WriteTextToFile(file_name, "          Neural Network Output\n\n", STM32FS_CREATE_NEW_FILE);
 8004136:	4640      	mov	r0, r8
 8004138:	2200      	movs	r2, #0
 800413a:	496a      	ldr	r1, [pc, #424]	; (80042e4 <TEST_Run+0x64c>)
 800413c:	f018 ff9a 	bl	801d074 <STM32Fs_WriteTextToFile>
          for (int i = 0; i < (TestContext_Ptr->TestRunContext.src_size/4); i++)
 8004140:	f8d4 3618 	ldr.w	r3, [r4, #1560]	; 0x618
 8004144:	089b      	lsrs	r3, r3, #2
 8004146:	f43f af0c 	beq.w	8003f62 <TEST_Run+0x2ca>
 800414a:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 80042f8 <TEST_Run+0x660>
 800414e:	2600      	movs	r6, #0
 8004150:	af14      	add	r7, sp, #80	; 0x50
            sprintf(str, "%20s:%8.3f\n", NN_OUTPUT_CLASS_LIST[i], *((float*)TestContext_Ptr->TestRunContext.src_buff_addr + i));
 8004152:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 80042fc <TEST_Run+0x664>
 8004156:	f8d4 3608 	ldr.w	r3, [r4, #1544]	; 0x608
 800415a:	4649      	mov	r1, r9
 800415c:	f85a 2b04 	ldr.w	r2, [sl], #4
 8004160:	4638      	mov	r0, r7
 8004162:	eb03 0386 	add.w	r3, r3, r6, lsl #2
          for (int i = 0; i < (TestContext_Ptr->TestRunContext.src_size/4); i++)
 8004166:	3601      	adds	r6, #1
            sprintf(str, "%20s:%8.3f\n", NN_OUTPUT_CLASS_LIST[i], *((float*)TestContext_Ptr->TestRunContext.src_buff_addr + i));
 8004168:	ed93 7a00 	vldr	s14, [r3]
 800416c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8004170:	ed8d 7b00 	vstr	d7, [sp]
 8004174:	f022 fd0c 	bl	8026b90 <siprintf>
            ret = STM32Fs_WriteTextToFile(file_name, str, STM32FS_APPEND_TO_FILE);
 8004178:	2201      	movs	r2, #1
 800417a:	4639      	mov	r1, r7
 800417c:	4640      	mov	r0, r8
 800417e:	f018 ff79 	bl	801d074 <STM32Fs_WriteTextToFile>
          for (int i = 0; i < (TestContext_Ptr->TestRunContext.src_size/4); i++)
 8004182:	f8d4 3618 	ldr.w	r3, [r4, #1560]	; 0x618
 8004186:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
 800418a:	d3e4      	bcc.n	8004156 <TEST_Run+0x4be>
 800418c:	e6e9      	b.n	8003f62 <TEST_Run+0x2ca>
        sprintf(file_name, "%s/%s_%d.raw", TestContext_Ptr->CaptureContext.capture_folder_name, TestContext_Ptr->TestRunContext.src_buff_name, (unsigned int)TestContext_Ptr->CaptureContext.capture_frame_count);
 800418e:	f8d4 10c8 	ldr.w	r1, [r4, #200]	; 0xc8
 8004192:	f104 02de 	add.w	r2, r4, #222	; 0xde
 8004196:	f8d4 360c 	ldr.w	r3, [r4, #1548]	; 0x60c
 800419a:	a834      	add	r0, sp, #208	; 0xd0
 800419c:	9100      	str	r1, [sp, #0]
 800419e:	4952      	ldr	r1, [pc, #328]	; (80042e8 <TEST_Run+0x650>)
 80041a0:	f022 fcf6 	bl	8026b90 <siprintf>
        ret = STM32Fs_WriteRaw(file_name, (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr, TestContext_Ptr->TestRunContext.src_width_size*TestContext_Ptr->TestRunContext.src_height_size);
 80041a4:	f8d4 3610 	ldr.w	r3, [r4, #1552]	; 0x610
 80041a8:	f8d4 2614 	ldr.w	r2, [r4, #1556]	; 0x614
 80041ac:	a834      	add	r0, sp, #208	; 0xd0
 80041ae:	f8d4 1608 	ldr.w	r1, [r4, #1544]	; 0x608
 80041b2:	fb02 f203 	mul.w	r2, r2, r3
 80041b6:	f018 fbc3 	bl	801c940 <STM32Fs_WriteRaw>
      if (ret != STM32FS_ERROR_NONE)
 80041ba:	2800      	cmp	r0, #0
 80041bc:	f43f af29 	beq.w	8004012 <TEST_Run+0x37a>
        UTIL_LCD_DisplayStringAt(0, LINE(12), (uint8_t *)"Error. Writting image failed", CENTER_MODE);
 80041c0:	f019 f992 	bl	801d4e8 <UTIL_LCD_GetFont>
 80041c4:	88c1      	ldrh	r1, [r0, #6]
 80041c6:	2301      	movs	r3, #1
 80041c8:	4a48      	ldr	r2, [pc, #288]	; (80042ec <TEST_Run+0x654>)
 80041ca:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80041ce:	2000      	movs	r0, #0
 80041d0:	0089      	lsls	r1, r1, #2
 80041d2:	f019 fa57 	bl	801d684 <UTIL_LCD_DisplayStringAt>
        DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 80041d6:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80041d8:	f7fd fd66 	bl	8001ca8 <DISPLAY_Refresh>
 80041dc:	e717      	b.n	800400e <TEST_Run+0x376>
          sprintf(file_name, "%s/%s_.bmp", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 80041de:	4632      	mov	r2, r6
          ret = STM32Fs_WriteImageBMP16(file_name, (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr, TestContext_Ptr->TestRunContext.src_width_size, TestContext_Ptr->TestRunContext.src_height_size, 0);
 80041e0:	2600      	movs	r6, #0
          sprintf(file_name, "%s/%s_.bmp", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 80041e2:	f8d4 360c 	ldr.w	r3, [r4, #1548]	; 0x60c
 80041e6:	a834      	add	r0, sp, #208	; 0xd0
 80041e8:	493a      	ldr	r1, [pc, #232]	; (80042d4 <TEST_Run+0x63c>)
 80041ea:	f022 fcd1 	bl	8026b90 <siprintf>
          ret = STM32Fs_WriteImageBMP16(file_name, (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr, TestContext_Ptr->TestRunContext.src_width_size, TestContext_Ptr->TestRunContext.src_height_size, 0);
 80041ee:	f8d4 3614 	ldr.w	r3, [r4, #1556]	; 0x614
 80041f2:	f8d4 2610 	ldr.w	r2, [r4, #1552]	; 0x610
 80041f6:	a834      	add	r0, sp, #208	; 0xd0
 80041f8:	f8d4 1608 	ldr.w	r1, [r4, #1544]	; 0x608
 80041fc:	9600      	str	r6, [sp, #0]
 80041fe:	f018 fc1b 	bl	801ca38 <STM32Fs_WriteImageBMP16>
 8004202:	e6ae      	b.n	8003f62 <TEST_Run+0x2ca>
          sprintf(file_name, "%s/%s.bmp", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 8004204:	f8d4 360c 	ldr.w	r3, [r4, #1548]	; 0x60c
 8004208:	f104 0254 	add.w	r2, r4, #84	; 0x54
 800420c:	4932      	ldr	r1, [pc, #200]	; (80042d8 <TEST_Run+0x640>)
 800420e:	a834      	add	r0, sp, #208	; 0xd0
 8004210:	f022 fcbe 	bl	8026b90 <siprintf>
        ret = STM32Fs_WriteImageBMP(file_name, (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr, TestContext_Ptr->TestRunContext.src_width_size, TestContext_Ptr->TestRunContext.src_height_size);
 8004214:	a834      	add	r0, sp, #208	; 0xd0
 8004216:	f8d4 3614 	ldr.w	r3, [r4, #1556]	; 0x614
 800421a:	f8d4 2610 	ldr.w	r2, [r4, #1552]	; 0x610
 800421e:	f8d4 1608 	ldr.w	r1, [r4, #1544]	; 0x608
 8004222:	f018 fbaf 	bl	801c984 <STM32Fs_WriteImageBMP>
 8004226:	e57a      	b.n	8003d1e <TEST_Run+0x86>
          sprintf(file_name, "%s/%s.raw", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 8004228:	f8d4 360c 	ldr.w	r3, [r4, #1548]	; 0x60c
 800422c:	f104 0254 	add.w	r2, r4, #84	; 0x54
 8004230:	492f      	ldr	r1, [pc, #188]	; (80042f0 <TEST_Run+0x658>)
 8004232:	a834      	add	r0, sp, #208	; 0xd0
 8004234:	f022 fcac 	bl	8026b90 <siprintf>
 8004238:	e566      	b.n	8003d08 <TEST_Run+0x70>
          sprintf(file_name, "%s/%s.raw", TestContext_Ptr->DumpContext.dump_session_folder_name, TestContext_Ptr->TestRunContext.src_buff_name);
 800423a:	4632      	mov	r2, r6
 800423c:	f8d4 360c 	ldr.w	r3, [r4, #1548]	; 0x60c
 8004240:	a834      	add	r0, sp, #208	; 0xd0
 8004242:	492b      	ldr	r1, [pc, #172]	; (80042f0 <TEST_Run+0x658>)
 8004244:	f022 fca4 	bl	8026b90 <siprintf>
          ret = STM32Fs_WriteRaw(file_name, (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr, TestContext_Ptr->TestRunContext.src_width_size*TestContext_Ptr->TestRunContext.src_height_size);
 8004248:	f8d4 3610 	ldr.w	r3, [r4, #1552]	; 0x610
 800424c:	f8d4 2614 	ldr.w	r2, [r4, #1556]	; 0x614
 8004250:	a834      	add	r0, sp, #208	; 0xd0
 8004252:	f8d4 1608 	ldr.w	r1, [r4, #1544]	; 0x608
 8004256:	fb02 f203 	mul.w	r2, r2, r3
 800425a:	f018 fb71 	bl	801c940 <STM32Fs_WriteRaw>
 800425e:	e680      	b.n	8003f62 <TEST_Run+0x2ca>
        PREPROC_Pixel_RB_Swap((void*)TestContext_Ptr->TestRunContext.src_buff_addr, (void*)TestContext_Ptr->TestRunContext.src_buff_addr, TestContext_Ptr->TestRunContext.src_width_size*TestContext_Ptr->TestRunContext.src_height_size);//caution: this is modifying the content of the data contained at src_buff_addr! To do: implement this on the fly when writing onto the SD card!!
 8004260:	f8d4 1608 	ldr.w	r1, [r4, #1544]	; 0x608
 8004264:	f8d4 3610 	ldr.w	r3, [r4, #1552]	; 0x610
 8004268:	f8d4 2614 	ldr.w	r2, [r4, #1556]	; 0x614
 800426c:	4608      	mov	r0, r1
 800426e:	fb02 f203 	mul.w	r2, r2, r3
 8004272:	f7fd fd85 	bl	8001d80 <PREPROC_Pixel_RB_Swap>
 8004276:	e6c2      	b.n	8003ffe <TEST_Run+0x366>
        sprintf(file_name, "%s/%s_%d.bmp", TestContext_Ptr->CaptureContext.capture_folder_name, TestContext_Ptr->TestRunContext.src_buff_name, (unsigned int)TestContext_Ptr->CaptureContext.capture_frame_count);
 8004278:	f8d4 10c8 	ldr.w	r1, [r4, #200]	; 0xc8
        ret = STM32Fs_WriteImageBMP16(file_name, (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr, TestContext_Ptr->TestRunContext.src_width_size, TestContext_Ptr->TestRunContext.src_height_size, 0);
 800427c:	2600      	movs	r6, #0
        sprintf(file_name, "%s/%s_%d.bmp", TestContext_Ptr->CaptureContext.capture_folder_name, TestContext_Ptr->TestRunContext.src_buff_name, (unsigned int)TestContext_Ptr->CaptureContext.capture_frame_count);
 800427e:	f8d4 360c 	ldr.w	r3, [r4, #1548]	; 0x60c
 8004282:	f104 02de 	add.w	r2, r4, #222	; 0xde
 8004286:	9100      	str	r1, [sp, #0]
 8004288:	a834      	add	r0, sp, #208	; 0xd0
 800428a:	491a      	ldr	r1, [pc, #104]	; (80042f4 <TEST_Run+0x65c>)
 800428c:	f022 fc80 	bl	8026b90 <siprintf>
        ret = STM32Fs_WriteImageBMP16(file_name, (uint8_t *)TestContext_Ptr->TestRunContext.src_buff_addr, TestContext_Ptr->TestRunContext.src_width_size, TestContext_Ptr->TestRunContext.src_height_size, 0);
 8004290:	f8d4 3614 	ldr.w	r3, [r4, #1556]	; 0x614
 8004294:	f8d4 2610 	ldr.w	r2, [r4, #1552]	; 0x610
 8004298:	a834      	add	r0, sp, #208	; 0xd0
 800429a:	f8d4 1608 	ldr.w	r1, [r4, #1544]	; 0x608
 800429e:	9600      	str	r6, [sp, #0]
 80042a0:	f018 fbca 	bl	801ca38 <STM32Fs_WriteImageBMP16>
 80042a4:	e789      	b.n	80041ba <TEST_Run+0x522>
        sprintf(file_name, "%s/%s_%d.bmp", TestContext_Ptr->CaptureContext.capture_folder_name, TestContext_Ptr->TestRunContext.src_buff_name, (unsigned int)TestContext_Ptr->CaptureContext.capture_frame_count);
 80042a6:	f8d4 10c8 	ldr.w	r1, [r4, #200]	; 0xc8
 80042aa:	f104 02de 	add.w	r2, r4, #222	; 0xde
 80042ae:	f8d4 360c 	ldr.w	r3, [r4, #1548]	; 0x60c
 80042b2:	a834      	add	r0, sp, #208	; 0xd0
 80042b4:	9100      	str	r1, [sp, #0]
 80042b6:	490f      	ldr	r1, [pc, #60]	; (80042f4 <TEST_Run+0x65c>)
 80042b8:	f022 fc6a 	bl	8026b90 <siprintf>
 80042bc:	e7aa      	b.n	8004214 <TEST_Run+0x57c>
        PREPROC_Pixel_RB_Swap((void*)TestContext_Ptr->TestRunContext.src_buff_addr, (void*)TestContext_Ptr->TestRunContext.src_buff_addr, TestContext_Ptr->TestRunContext.src_width_size*TestContext_Ptr->TestRunContext.src_height_size);//caution: this is modifying the content of the data contained at src_buff_addr! To do: implement this on the fly when writing onto the SD card!!
 80042be:	f8d4 3610 	ldr.w	r3, [r4, #1552]	; 0x610
 80042c2:	4608      	mov	r0, r1
 80042c4:	f8d4 2614 	ldr.w	r2, [r4, #1556]	; 0x614
 80042c8:	fb02 f203 	mul.w	r2, r2, r3
 80042cc:	f7fd fd58 	bl	8001d80 <PREPROC_Pixel_RB_Swap>
 80042d0:	e507      	b.n	8003ce2 <TEST_Run+0x4a>
 80042d2:	bf00      	nop
 80042d4:	08029084 	.word	0x08029084
 80042d8:	080290f8 	.word	0x080290f8
 80042dc:	08028b04 	.word	0x08028b04
 80042e0:	0802909c 	.word	0x0802909c
 80042e4:	080290a8 	.word	0x080290a8
 80042e8:	08029124 	.word	0x08029124
 80042ec:	080290d8 	.word	0x080290d8
 80042f0:	08029090 	.word	0x08029090
 80042f4:	08029114 	.word	0x08029114
 80042f8:	24000008 	.word	0x24000008
 80042fc:	080290cc 	.word	0x080290cc

08004300 <TEST_PostProcess>:
 *
 * @param TestContext_Ptr pointer to test context
 */
void TEST_PostProcess(TestContext_TypeDef *TestContext_Ptr)
{
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 8004300:	f8d0 363c 	ldr.w	r3, [r0, #1596]	; 0x63c
{
 8004304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  if(App_Cxt_Ptr->Operating_Mode == CAPTURE)
 8004308:	f893 8000 	ldrb.w	r8, [r3]
 800430c:	f1b8 0f04 	cmp.w	r8, #4
{
 8004310:	ed2d 8b04 	vpush	{d8-d9}
 8004314:	b097      	sub	sp, #92	; 0x5c
  if(App_Cxt_Ptr->Operating_Mode == CAPTURE)
 8004316:	d00b      	beq.n	8004330 <TEST_PostProcess+0x30>
  {
    Capture_PostProcess(App_Cxt_Ptr->Test_ContextPtr);
  }
  else if(App_Cxt_Ptr->Operating_Mode == DUMP)
 8004318:	f1b8 0f03 	cmp.w	r8, #3
 800431c:	f000 80e7 	beq.w	80044ee <TEST_PostProcess+0x1ee>
  {
    Dump_PostProcess(App_Cxt_Ptr->Test_ContextPtr);
  }
  else if(App_Cxt_Ptr->Operating_Mode == VALID)
 8004320:	f1b8 0f02 	cmp.w	r8, #2
 8004324:	d048      	beq.n	80043b8 <TEST_PostProcess+0xb8>
  {
    Validation_PostProcess(App_Cxt_Ptr->Test_ContextPtr);
  }
}
 8004326:	b017      	add	sp, #92	; 0x5c
 8004328:	ecbd 8b04 	vpop	{d8-d9}
 800432c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Capture_PostProcess(App_Cxt_Ptr->Test_ContextPtr);
 8004330:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if ((TestContext_Ptr->CaptureContext.capture_state==0) /*&& (BSP_PB_GetState(BUTTON_WAKEUP) != RESET)*/)
 8004332:	f8d4 50c0 	ldr.w	r5, [r4, #192]	; 0xc0
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 8004336:	f8d4 663c 	ldr.w	r6, [r4, #1596]	; 0x63c
  if ((TestContext_Ptr->CaptureContext.capture_state==0) /*&& (BSP_PB_GetState(BUTTON_WAKEUP) != RESET)*/)
 800433a:	2d00      	cmp	r5, #0
 800433c:	f000 832f 	beq.w	800499e <TEST_PostProcess+0x69e>
  else if(TestContext_Ptr->CaptureContext.capture_state==2)
 8004340:	2d02      	cmp	r5, #2
 8004342:	d1f0      	bne.n	8004326 <TEST_PostProcess+0x26>
    TestContext_Ptr->CaptureContext.capture_state = 0;
 8004344:	2000      	movs	r0, #0
 8004346:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
    BSP_SD_DeInit(0);
 800434a:	f009 f98b 	bl	800d664 <BSP_SD_DeInit>
    CAMERA_Init(App_Cxt_Ptr->Camera_ContextPtr);
 800434e:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8004350:	f7fd fa24 	bl	800179c <CAMERA_Init>
    while (!App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready);
 8004354:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8004356:	7d1a      	ldrb	r2, [r3, #20]
 8004358:	2a00      	cmp	r2, #0
 800435a:	d0fc      	beq.n	8004356 <TEST_PostProcess+0x56>
    App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready = 0; /* Reset flag */
 800435c:	2700      	movs	r7, #0
 800435e:	751f      	strb	r7, [r3, #20]
    BSP_CAMERA_Resume(0);
 8004360:	4638      	mov	r0, r7
 8004362:	f008 f8ff 	bl	800c564 <BSP_CAMERA_Resume>
    if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
 8004366:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
 800436a:	2b00      	cmp	r3, #0
 800436c:	f000 811f 	beq.w	80045ae <TEST_PostProcess+0x2ae>
      *(aTxBuffer) = CMD_COMPLETE_SUCCESS_EVT;
 8004370:	4e9b      	ldr	r6, [pc, #620]	; (80045e0 <TEST_PostProcess+0x2e0>)
 8004372:	2302      	movs	r3, #2
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8004374:	f204 557c 	addw	r5, r4, #1404	; 0x57c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8004378:	21a0      	movs	r1, #160	; 0xa0
 800437a:	4630      	mov	r0, r6
 800437c:	461a      	mov	r2, r3
      TestContext_Ptr->UartContext.uart_cmd_ongoing=0;//terminates the UART command processing
 800437e:	f8c4 7560 	str.w	r7, [r4, #1376]	; 0x560
      *(aTxBuffer) = CMD_COMPLETE_SUCCESS_EVT;
 8004382:	7033      	strb	r3, [r6, #0]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8004384:	f000 fd96 	bl	8004eb4 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8004388:	4631      	mov	r1, r6
 800438a:	4628      	mov	r0, r5
 800438c:	2201      	movs	r2, #1
 800438e:	f011 fb3f 	bl	8015a10 <HAL_UART_Transmit_DMA>
 8004392:	b108      	cbz	r0, 8004398 <TEST_PostProcess+0x98>
      Error_Handler();
 8004394:	f000 fdfa 	bl	8004f8c <Error_Handler>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8004398:	4628      	mov	r0, r5
 800439a:	f011 fd7f 	bl	8015e9c <HAL_UART_GetState>
 800439e:	2820      	cmp	r0, #32
 80043a0:	d1fa      	bne.n	8004398 <TEST_PostProcess+0x98>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 80043a2:	4628      	mov	r0, r5
 80043a4:	220a      	movs	r2, #10
 80043a6:	498f      	ldr	r1, [pc, #572]	; (80045e4 <TEST_PostProcess+0x2e4>)
 80043a8:	f011 fb88 	bl	8015abc <HAL_UART_Receive_DMA>
 80043ac:	2800      	cmp	r0, #0
 80043ae:	f000 80fe 	beq.w	80045ae <TEST_PostProcess+0x2ae>
    Error_Handler();
 80043b2:	f000 fdeb 	bl	8004f8c <Error_Handler>
 80043b6:	e0fa      	b.n	80045ae <TEST_PostProcess+0x2ae>
    Validation_PostProcess(App_Cxt_Ptr->Test_ContextPtr);
 80043b8:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if(TestContext_Ptr->ValidationContext.validation_completed == 0)
 80043ba:	f8d4 9440 	ldr.w	r9, [r4, #1088]	; 0x440
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 80043be:	f8d4 763c 	ldr.w	r7, [r4, #1596]	; 0x63c
  if(TestContext_Ptr->ValidationContext.validation_completed == 0)
 80043c2:	f1b9 0f00 	cmp.w	r9, #0
 80043c6:	f000 8115 	beq.w	80045f4 <TEST_PostProcess+0x2f4>
    if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
 80043ca:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f000 80f8 	beq.w	80045c4 <TEST_PostProcess+0x2c4>
      TestContext_Ptr->ValidationContext.validation_completed=0;
 80043d4:	2200      	movs	r2, #0
      TestContext_Ptr->UartContext.uart_host_requested_mode=NOMINAL;
 80043d6:	f04f 0901 	mov.w	r9, #1
      TestContext_Ptr->ValidationContext.overall_loss = 0.0;
 80043da:	f04f 0a00 	mov.w	sl, #0
 80043de:	f04f 0b00 	mov.w	fp, #0
      *(aTxBuffer) = CMD_COMPLETE_SUCCESS_EVT;
 80043e2:	4e7f      	ldr	r6, [pc, #508]	; (80045e0 <TEST_PostProcess+0x2e0>)
      BSP_SD_DeInit(0);
 80043e4:	4610      	mov	r0, r2
      TestContext_Ptr->ValidationContext.validation_completed=0;
 80043e6:	f8c4 2440 	str.w	r2, [r4, #1088]	; 0x440
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80043ea:	f204 557c 	addw	r5, r4, #1404	; 0x57c
          TestContext_Ptr->ValidationContext.valid_conf_matrix[i][j]=0;
 80043ee:	f8c4 2448 	str.w	r2, [r4, #1096]	; 0x448
 80043f2:	f8c4 244c 	str.w	r2, [r4, #1100]	; 0x44c
 80043f6:	f8c4 2450 	str.w	r2, [r4, #1104]	; 0x450
 80043fa:	f8c4 2454 	str.w	r2, [r4, #1108]	; 0x454
 80043fe:	f8c4 2458 	str.w	r2, [r4, #1112]	; 0x458
 8004402:	f8c4 245c 	str.w	r2, [r4, #1116]	; 0x45c
 8004406:	f8c4 2460 	str.w	r2, [r4, #1120]	; 0x460
 800440a:	f8c4 2464 	str.w	r2, [r4, #1124]	; 0x464
 800440e:	f8c4 2468 	str.w	r2, [r4, #1128]	; 0x468
 8004412:	f8c4 246c 	str.w	r2, [r4, #1132]	; 0x46c
 8004416:	f8c4 2470 	str.w	r2, [r4, #1136]	; 0x470
 800441a:	f8c4 2474 	str.w	r2, [r4, #1140]	; 0x474
 800441e:	f8c4 2478 	str.w	r2, [r4, #1144]	; 0x478
 8004422:	f8c4 247c 	str.w	r2, [r4, #1148]	; 0x47c
 8004426:	f8c4 2480 	str.w	r2, [r4, #1152]	; 0x480
 800442a:	f8c4 2484 	str.w	r2, [r4, #1156]	; 0x484
 800442e:	f8c4 2488 	str.w	r2, [r4, #1160]	; 0x488
 8004432:	f8c4 248c 	str.w	r2, [r4, #1164]	; 0x48c
 8004436:	f8c4 2490 	str.w	r2, [r4, #1168]	; 0x490
 800443a:	f8c4 2494 	str.w	r2, [r4, #1172]	; 0x494
 800443e:	f8c4 2498 	str.w	r2, [r4, #1176]	; 0x498
 8004442:	f8c4 249c 	str.w	r2, [r4, #1180]	; 0x49c
 8004446:	f8c4 24a0 	str.w	r2, [r4, #1184]	; 0x4a0
 800444a:	f8c4 24a4 	str.w	r2, [r4, #1188]	; 0x4a4
 800444e:	f8c4 24a8 	str.w	r2, [r4, #1192]	; 0x4a8
 8004452:	f8c4 24ac 	str.w	r2, [r4, #1196]	; 0x4ac
 8004456:	f8c4 24b0 	str.w	r2, [r4, #1200]	; 0x4b0
      TestContext_Ptr->UartContext.uart_host_requested_mode=NOMINAL;
 800445a:	f884 9564 	strb.w	r9, [r4, #1380]	; 0x564
      TestContext_Ptr->ValidationContext.nbr_tested = 1;
 800445e:	f8c4 9120 	str.w	r9, [r4, #288]	; 0x120
      TestContext_Ptr->ValidationContext.overall_loss = 0.0;
 8004462:	e9c4 ab44 	strd	sl, fp, [r4, #272]	; 0x110
      TestContext_Ptr->ValidationContext.avg_loss = 0.0;
 8004466:	e9c4 ab46 	strd	sl, fp, [r4, #280]	; 0x118
          TestContext_Ptr->ValidationContext.valid_conf_matrix[i][j]=0;
 800446a:	f8c4 24b4 	str.w	r2, [r4, #1204]	; 0x4b4
 800446e:	f8c4 24b8 	str.w	r2, [r4, #1208]	; 0x4b8
 8004472:	f8c4 24bc 	str.w	r2, [r4, #1212]	; 0x4bc
 8004476:	f8c4 24c0 	str.w	r2, [r4, #1216]	; 0x4c0
 800447a:	f8c4 24c4 	str.w	r2, [r4, #1220]	; 0x4c4
 800447e:	f8c4 24c8 	str.w	r2, [r4, #1224]	; 0x4c8
 8004482:	f8c4 24cc 	str.w	r2, [r4, #1228]	; 0x4cc
 8004486:	f8c4 24d0 	str.w	r2, [r4, #1232]	; 0x4d0
 800448a:	f8c4 24d4 	str.w	r2, [r4, #1236]	; 0x4d4
      App_Cxt_Ptr->run_loop = 0;
 800448e:	607a      	str	r2, [r7, #4]
      BSP_SD_DeInit(0);
 8004490:	f009 f8e8 	bl	800d664 <BSP_SD_DeInit>
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8004494:	4642      	mov	r2, r8
 8004496:	4630      	mov	r0, r6
 8004498:	21a0      	movs	r1, #160	; 0xa0
      *(aTxBuffer) = CMD_COMPLETE_SUCCESS_EVT;
 800449a:	f886 8000 	strb.w	r8, [r6]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 800449e:	f000 fd09 	bl	8004eb4 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 80044a2:	464a      	mov	r2, r9
 80044a4:	4631      	mov	r1, r6
 80044a6:	4628      	mov	r0, r5
 80044a8:	f011 fab2 	bl	8015a10 <HAL_UART_Transmit_DMA>
 80044ac:	2800      	cmp	r0, #0
 80044ae:	f040 8326 	bne.w	8004afe <TEST_PostProcess+0x7fe>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 80044b2:	4628      	mov	r0, r5
 80044b4:	f011 fcf2 	bl	8015e9c <HAL_UART_GetState>
 80044b8:	2820      	cmp	r0, #32
 80044ba:	d1fa      	bne.n	80044b2 <TEST_PostProcess+0x1b2>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 80044bc:	4628      	mov	r0, r5
 80044be:	220a      	movs	r2, #10
 80044c0:	4948      	ldr	r1, [pc, #288]	; (80045e4 <TEST_PostProcess+0x2e4>)
 80044c2:	f011 fafb 	bl	8015abc <HAL_UART_Receive_DMA>
 80044c6:	2800      	cmp	r0, #0
 80044c8:	f040 8304 	bne.w	8004ad4 <TEST_PostProcess+0x7d4>
        execution_timings_buff[i] = App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[i];
 80044cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044ce:	4b46      	ldr	r3, [pc, #280]	; (80045e8 <TEST_PostProcess+0x2e8>)
 80044d0:	6811      	ldr	r1, [r2, #0]
 80044d2:	6019      	str	r1, [r3, #0]
 80044d4:	6851      	ldr	r1, [r2, #4]
 80044d6:	6059      	str	r1, [r3, #4]
 80044d8:	6891      	ldr	r1, [r2, #8]
 80044da:	6099      	str	r1, [r3, #8]
 80044dc:	68d1      	ldr	r1, [r2, #12]
 80044de:	60d9      	str	r1, [r3, #12]
 80044e0:	6912      	ldr	r2, [r2, #16]
 80044e2:	611a      	str	r2, [r3, #16]
}
 80044e4:	b017      	add	sp, #92	; 0x5c
 80044e6:	ecbd 8b04 	vpop	{d8-d9}
 80044ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Dump_PostProcess(App_Cxt_Ptr->Test_ContextPtr);
 80044ee:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if(TestContext_Ptr->DumpContext.dump_state==0)
 80044f0:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
  AppContext_TypeDef *App_Cxt_Ptr=TestContext_Ptr->AppCtxPtr;
 80044f4:	f8d4 663c 	ldr.w	r6, [r4, #1596]	; 0x63c
  if(TestContext_Ptr->DumpContext.dump_state==0)
 80044f8:	2d00      	cmp	r5, #0
 80044fa:	f000 8209 	beq.w	8004910 <TEST_PostProcess+0x610>
  else if(TestContext_Ptr->DumpContext.dump_state == 2)
 80044fe:	2d02      	cmp	r5, #2
 8004500:	f47f af11 	bne.w	8004326 <TEST_PostProcess+0x26>
    if(TestContext_Ptr->DumpContext.Dump_FrameSource != SDCARD_FILE)
 8004504:	7923      	ldrb	r3, [r4, #4]
 8004506:	2b03      	cmp	r3, #3
 8004508:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
 800450c:	d005      	beq.n	800451a <TEST_PostProcess+0x21a>
      if((TestContext_Ptr->UartContext.uart_cmd_ongoing==0)|| (TestContext_Ptr->UartContext.uart_cmd_ongoing==1 && TestContext_Ptr->UartContext.uart_host_requested_dump_memory == SDCARD))
 800450e:	2b00      	cmp	r3, #0
 8004510:	f000 82c9 	beq.w	8004aa6 <TEST_PostProcess+0x7a6>
 8004514:	2b01      	cmp	r3, #1
 8004516:	f000 82c1 	beq.w	8004a9c <TEST_PostProcess+0x79c>
    TestContext_Ptr->DumpContext.dump_state = 0;
 800451a:	2200      	movs	r2, #0
 800451c:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
    if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
 8004520:	2b00      	cmp	r3, #0
 8004522:	d044      	beq.n	80045ae <TEST_PostProcess+0x2ae>
      if(TestContext_Ptr->UartContext.uart_host_requested_dump_memory == SDRAM)
 8004524:	f894 3566 	ldrb.w	r3, [r4, #1382]	; 0x566
 8004528:	2b01      	cmp	r3, #1
 800452a:	f000 8314 	beq.w	8004b56 <TEST_PostProcess+0x856>
  uint8_t cmd_status=CMD_COMPLETE_SUCCESS_EVT;
 800452e:	2502      	movs	r5, #2
 8004530:	4f2e      	ldr	r7, [pc, #184]	; (80045ec <TEST_PostProcess+0x2ec>)
      if(TestContext_Ptr->UartContext.uart_host_requested_dump_number == 0)
 8004532:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
 8004536:	2b00      	cmp	r3, #0
 8004538:	f000 82e4 	beq.w	8004b04 <TEST_PostProcess+0x804>
        if(TestContext_Ptr->UartContext.uart_host_requested_dump_number == 0xFFFF)
 800453c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004540:	4293      	cmp	r3, r2
 8004542:	f000 8359 	beq.w	8004bf8 <TEST_PostProcess+0x8f8>
          TestContext_Ptr->UartContext.uart_host_requested_dump_number --;
 8004546:	3b01      	subs	r3, #1
 8004548:	f8c4 3568 	str.w	r3, [r4, #1384]	; 0x568
        UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)TestContext_Ptr->DumpContext.dump_session_name, LEFT_MODE);
 800454c:	f018 ffcc 	bl	801d4e8 <UTIL_LCD_GetFont>
 8004550:	2303      	movs	r3, #3
 8004552:	88c1      	ldrh	r1, [r0, #6]
 8004554:	f104 0210 	add.w	r2, r4, #16
 8004558:	2000      	movs	r0, #0
 800455a:	f019 f893 	bl	801d684 <UTIL_LCD_DisplayStringAt>
        UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"DUMP READY", RIGHT_MODE);
 800455e:	f018 ffc3 	bl	801d4e8 <UTIL_LCD_GetFont>
 8004562:	2302      	movs	r3, #2
 8004564:	88c1      	ldrh	r1, [r0, #6]
 8004566:	2000      	movs	r0, #0
 8004568:	4a21      	ldr	r2, [pc, #132]	; (80045f0 <TEST_PostProcess+0x2f0>)
 800456a:	f019 f88b 	bl	801d684 <UTIL_LCD_DisplayStringAt>
        DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 800456e:	6b70      	ldr	r0, [r6, #52]	; 0x34
 8004570:	f7fd fb9a 	bl	8001ca8 <DISPLAY_Refresh>
        TestContext_Ptr->DumpContext.dump_state = 1;
 8004574:	2301      	movs	r3, #1
 8004576:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
        dump_output_buff[i] = *((float*)App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer + i);
 800457a:	6c33      	ldr	r3, [r6, #64]	; 0x40
        execution_timings_buff[i] = App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[i];
 800457c:	6bb1      	ldr	r1, [r6, #56]	; 0x38
        dump_output_buff[i] = *((float*)App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer + i);
 800457e:	681b      	ldr	r3, [r3, #0]
        execution_timings_buff[i] = App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[i];
 8004580:	680c      	ldr	r4, [r1, #0]
        dump_output_buff[i] = *((float*)App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer + i);
 8004582:	6818      	ldr	r0, [r3, #0]
        execution_timings_buff[i] = App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[i];
 8004584:	4a18      	ldr	r2, [pc, #96]	; (80045e8 <TEST_PostProcess+0x2e8>)
        dump_output_buff[i] = *((float*)App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer + i);
 8004586:	6038      	str	r0, [r7, #0]
 8004588:	6858      	ldr	r0, [r3, #4]
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6898      	ldr	r0, [r3, #8]
 800458e:	60b8      	str	r0, [r7, #8]
 8004590:	68d8      	ldr	r0, [r3, #12]
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	6918      	ldr	r0, [r3, #16]
 8004596:	6138      	str	r0, [r7, #16]
 8004598:	6958      	ldr	r0, [r3, #20]
        execution_timings_buff[i] = App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[i];
 800459a:	6014      	str	r4, [r2, #0]
 800459c:	684b      	ldr	r3, [r1, #4]
        dump_output_buff[i] = *((float*)App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer + i);
 800459e:	6178      	str	r0, [r7, #20]
        execution_timings_buff[i] = App_Cxt_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[i];
 80045a0:	6053      	str	r3, [r2, #4]
 80045a2:	688b      	ldr	r3, [r1, #8]
 80045a4:	6093      	str	r3, [r2, #8]
 80045a6:	68cb      	ldr	r3, [r1, #12]
 80045a8:	60d3      	str	r3, [r2, #12]
 80045aa:	690b      	ldr	r3, [r1, #16]
 80045ac:	6113      	str	r3, [r2, #16]
    BSP_LED_On(LED_GREEN);
 80045ae:	2000      	movs	r0, #0
 80045b0:	f006 fb66 	bl	800ac80 <BSP_LED_On>
    BSP_LED_Off(LED_RED);
 80045b4:	2002      	movs	r0, #2
 80045b6:	f006 fb73 	bl	800aca0 <BSP_LED_Off>
}
 80045ba:	b017      	add	sp, #92	; 0x5c
 80045bc:	ecbd 8b04 	vpop	{d8-d9}
 80045c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        HAL_Delay(100);
 80045c4:	2064      	movs	r0, #100	; 0x64
 80045c6:	f009 f9d1 	bl	800d96c <HAL_Delay>
        BSP_LED_Toggle(LED_GREEN);
 80045ca:	2000      	movs	r0, #0
 80045cc:	f006 fb78 	bl	800acc0 <BSP_LED_Toggle>
        HAL_Delay(100);
 80045d0:	2064      	movs	r0, #100	; 0x64
 80045d2:	f009 f9cb 	bl	800d96c <HAL_Delay>
        BSP_LED_Toggle(LED_GREEN);
 80045d6:	2000      	movs	r0, #0
 80045d8:	f006 fb72 	bl	800acc0 <BSP_LED_Toggle>
 80045dc:	e7f2      	b.n	80045c4 <TEST_PostProcess+0x2c4>
 80045de:	bf00      	nop
 80045e0:	24007620 	.word	0x24007620
 80045e4:	24007600 	.word	0x24007600
 80045e8:	d0e83900 	.word	0xd0e83900
 80045ec:	d0cdae80 	.word	0xd0cdae80
 80045f0:	08028fc8 	.word	0x08028fc8
    strcpy(tmp_msg, TestContext_Ptr->ValidationContext.tmp_class_path);
 80045f4:	4ebf      	ldr	r6, [pc, #764]	; (80048f4 <TEST_PostProcess+0x5f4>)
 80045f6:	f504 6180 	add.w	r1, r4, #1024	; 0x400
 80045fa:	4630      	mov	r0, r6
 80045fc:	f022 fae8 	bl	8026bd0 <stpcpy>
    strcat(tmp_msg, "/");
 8004600:	232f      	movs	r3, #47	; 0x2f
    strcat(tmp_msg, TestContext_Ptr->ValidationContext.img_fno.fname);
 8004602:	f204 21ba 	addw	r1, r4, #698	; 0x2ba
 8004606:	3001      	adds	r0, #1
    strcat(tmp_msg, "/");
 8004608:	f800 3c01 	strb.w	r3, [r0, #-1]
    strcat(tmp_msg, TestContext_Ptr->ValidationContext.img_fno.fname);
 800460c:	f022 fae9 	bl	8026be2 <strcpy>
    size_t predicted_class = App_Cxt_Ptr->ranking[0];
 8004610:	f8d7 a014 	ldr.w	sl, [r7, #20]
    if (predicted_class != TestContext_Ptr->ValidationContext.class_index)
 8004614:	f8d4 53bc 	ldr.w	r5, [r4, #956]	; 0x3bc
      sprintf(tmp_msg, " was missclassified as %s\n", NN_OUTPUT_CLASS_LIST[predicted_class]);
 8004618:	4bb7      	ldr	r3, [pc, #732]	; (80048f8 <TEST_PostProcess+0x5f8>)
    if (predicted_class != TestContext_Ptr->ValidationContext.class_index)
 800461a:	45aa      	cmp	sl, r5
      sprintf(tmp_msg, " was missclassified as %s\n", NN_OUTPUT_CLASS_LIST[predicted_class]);
 800461c:	9303      	str	r3, [sp, #12]
    if (predicted_class != TestContext_Ptr->ValidationContext.class_index)
 800461e:	d018      	beq.n	8004652 <TEST_PostProcess+0x352>
      stm32fs_err_t res = STM32Fs_WriteTextToFile("missclassified.txt", tmp_msg, STM32FS_APPEND_TO_FILE);
 8004620:	2201      	movs	r2, #1
 8004622:	4631      	mov	r1, r6
 8004624:	48b5      	ldr	r0, [pc, #724]	; (80048fc <TEST_PostProcess+0x5fc>)
 8004626:	f018 fd25 	bl	801d074 <STM32Fs_WriteTextToFile>
      sprintf(tmp_msg, " was missclassified as %s\n", NN_OUTPUT_CLASS_LIST[predicted_class]);
 800462a:	9b03      	ldr	r3, [sp, #12]
      stm32fs_err_t res = STM32Fs_WriteTextToFile("missclassified.txt", tmp_msg, STM32FS_APPEND_TO_FILE);
 800462c:	4605      	mov	r5, r0
      sprintf(tmp_msg, " was missclassified as %s\n", NN_OUTPUT_CLASS_LIST[predicted_class]);
 800462e:	49b4      	ldr	r1, [pc, #720]	; (8004900 <TEST_PostProcess+0x600>)
 8004630:	f853 202a 	ldr.w	r2, [r3, sl, lsl #2]
 8004634:	4630      	mov	r0, r6
 8004636:	f022 faab 	bl	8026b90 <siprintf>
      res |= STM32Fs_WriteTextToFile("missclassified.txt", tmp_msg, STM32FS_APPEND_TO_FILE);
 800463a:	4631      	mov	r1, r6
 800463c:	2201      	movs	r2, #1
 800463e:	48af      	ldr	r0, [pc, #700]	; (80048fc <TEST_PostProcess+0x5fc>)
 8004640:	f018 fd18 	bl	801d074 <STM32Fs_WriteTextToFile>
 8004644:	4328      	orrs	r0, r5
      if (res != STM32FS_ERROR_NONE)
 8004646:	f010 0fff 	tst.w	r0, #255	; 0xff
 800464a:	f040 8249 	bne.w	8004ae0 <TEST_PostProcess+0x7e0>
 800464e:	f8d4 53bc 	ldr.w	r5, [r4, #956]	; 0x3bc
    float confidence = App_Cxt_Ptr->nn_top1_output_class_proba;
 8004652:	edd7 8a04 	vldr	s17, [r7, #16]
    TestContext_Ptr->ValidationContext.nbr_tested++;
 8004656:	f8d4 6120 	ldr.w	r6, [r4, #288]	; 0x120
    if (confidence > 0)
 800465a:	eef5 8ac0 	vcmpe.f32	s17, #0.0
    TestContext_Ptr->ValidationContext.nbr_tested++;
 800465e:	3601      	adds	r6, #1
    if (confidence > 0)
 8004660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    TestContext_Ptr->ValidationContext.nbr_tested++;
 8004664:	f8c4 6120 	str.w	r6, [r4, #288]	; 0x120
    if (confidence > 0)
 8004668:	f340 8237 	ble.w	8004ada <TEST_PostProcess+0x7da>
      categorical_crossentropy = -log((double)confidence);
 800466c:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
 8004670:	f023 ff20 	bl	80284b4 <log>
 8004674:	eeb1 6b40 	vneg.f64	d6, d0
    TestContext_Ptr->ValidationContext.overall_loss += categorical_crossentropy;
 8004678:	ed94 7b44 	vldr	d7, [r4, #272]	; 0x110
 800467c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004680:	ed84 6b44 	vstr	d6, [r4, #272]	; 0x110
    if (TestContext_Ptr->ValidationContext.nbr_tested > 0)
 8004684:	b13e      	cbz	r6, 8004696 <TEST_PostProcess+0x396>
      TestContext_Ptr->ValidationContext.avg_loss = TestContext_Ptr->ValidationContext.overall_loss / (double)TestContext_Ptr->ValidationContext.nbr_tested;
 8004686:	ee07 6a90 	vmov	s15, r6
 800468a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800468e:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8004692:	ed84 5b46 	vstr	d5, [r4, #280]	; 0x118
 8004696:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800469a:	eb0a 0343 	add.w	r3, sl, r3, lsl #1
 800469e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    TestContext_Ptr->ValidationContext.valid_conf_matrix[TestContext_Ptr->ValidationContext.class_index][predicted_class]++;
 80046a2:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
 80046a6:	3201      	adds	r2, #1
 80046a8:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
      if (conf_matrix[row][col] > conf_max)
 80046ac:	f8d4 2448 	ldr.w	r2, [r4, #1096]	; 0x448
 80046b0:	f8d4 144c 	ldr.w	r1, [r4, #1100]	; 0x44c
 80046b4:	4613      	mov	r3, r2
 80046b6:	428a      	cmp	r2, r1
 80046b8:	d201      	bcs.n	80046be <TEST_PostProcess+0x3be>
        conf_max = conf_matrix[row][col];
 80046ba:	460b      	mov	r3, r1
 80046bc:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 80046be:	f8d4 1450 	ldr.w	r1, [r4, #1104]	; 0x450
 80046c2:	428a      	cmp	r2, r1
 80046c4:	d201      	bcs.n	80046ca <TEST_PostProcess+0x3ca>
        conf_max = conf_matrix[row][col];
 80046c6:	460b      	mov	r3, r1
 80046c8:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 80046ca:	f8d4 1454 	ldr.w	r1, [r4, #1108]	; 0x454
 80046ce:	428a      	cmp	r2, r1
 80046d0:	d201      	bcs.n	80046d6 <TEST_PostProcess+0x3d6>
        conf_max = conf_matrix[row][col];
 80046d2:	460b      	mov	r3, r1
 80046d4:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 80046d6:	f8d4 1458 	ldr.w	r1, [r4, #1112]	; 0x458
 80046da:	428a      	cmp	r2, r1
 80046dc:	d201      	bcs.n	80046e2 <TEST_PostProcess+0x3e2>
        conf_max = conf_matrix[row][col];
 80046de:	460b      	mov	r3, r1
 80046e0:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 80046e2:	f8d4 045c 	ldr.w	r0, [r4, #1116]	; 0x45c
 80046e6:	f8d4 1460 	ldr.w	r1, [r4, #1120]	; 0x460
        conf_max = conf_matrix[row][col];
 80046ea:	4282      	cmp	r2, r0
 80046ec:	bf38      	it	cc
 80046ee:	4603      	movcc	r3, r0
      if (conf_matrix[row][col] > conf_max)
 80046f0:	4299      	cmp	r1, r3
 80046f2:	461a      	mov	r2, r3
 80046f4:	d901      	bls.n	80046fa <TEST_PostProcess+0x3fa>
        conf_max = conf_matrix[row][col];
 80046f6:	460b      	mov	r3, r1
 80046f8:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 80046fa:	f8d4 1464 	ldr.w	r1, [r4, #1124]	; 0x464
 80046fe:	428a      	cmp	r2, r1
 8004700:	d201      	bcs.n	8004706 <TEST_PostProcess+0x406>
        conf_max = conf_matrix[row][col];
 8004702:	460b      	mov	r3, r1
 8004704:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 8004706:	f8d4 1468 	ldr.w	r1, [r4, #1128]	; 0x468
 800470a:	428a      	cmp	r2, r1
 800470c:	d201      	bcs.n	8004712 <TEST_PostProcess+0x412>
        conf_max = conf_matrix[row][col];
 800470e:	460b      	mov	r3, r1
 8004710:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 8004712:	f8d4 146c 	ldr.w	r1, [r4, #1132]	; 0x46c
 8004716:	428a      	cmp	r2, r1
 8004718:	d201      	bcs.n	800471e <TEST_PostProcess+0x41e>
        conf_max = conf_matrix[row][col];
 800471a:	460b      	mov	r3, r1
 800471c:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 800471e:	f8d4 1470 	ldr.w	r1, [r4, #1136]	; 0x470
 8004722:	428a      	cmp	r2, r1
 8004724:	d201      	bcs.n	800472a <TEST_PostProcess+0x42a>
        conf_max = conf_matrix[row][col];
 8004726:	460b      	mov	r3, r1
 8004728:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 800472a:	f8d4 0474 	ldr.w	r0, [r4, #1140]	; 0x474
 800472e:	f8d4 1478 	ldr.w	r1, [r4, #1144]	; 0x478
        conf_max = conf_matrix[row][col];
 8004732:	4282      	cmp	r2, r0
 8004734:	bf38      	it	cc
 8004736:	4603      	movcc	r3, r0
      if (conf_matrix[row][col] > conf_max)
 8004738:	4299      	cmp	r1, r3
 800473a:	461a      	mov	r2, r3
 800473c:	d901      	bls.n	8004742 <TEST_PostProcess+0x442>
        conf_max = conf_matrix[row][col];
 800473e:	460b      	mov	r3, r1
 8004740:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 8004742:	f8d4 147c 	ldr.w	r1, [r4, #1148]	; 0x47c
 8004746:	428a      	cmp	r2, r1
 8004748:	d201      	bcs.n	800474e <TEST_PostProcess+0x44e>
        conf_max = conf_matrix[row][col];
 800474a:	460b      	mov	r3, r1
 800474c:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 800474e:	f8d4 1480 	ldr.w	r1, [r4, #1152]	; 0x480
 8004752:	428a      	cmp	r2, r1
 8004754:	d201      	bcs.n	800475a <TEST_PostProcess+0x45a>
        conf_max = conf_matrix[row][col];
 8004756:	460b      	mov	r3, r1
 8004758:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 800475a:	f8d4 1484 	ldr.w	r1, [r4, #1156]	; 0x484
 800475e:	428a      	cmp	r2, r1
 8004760:	d201      	bcs.n	8004766 <TEST_PostProcess+0x466>
        conf_max = conf_matrix[row][col];
 8004762:	460b      	mov	r3, r1
 8004764:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 8004766:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
 800476a:	428a      	cmp	r2, r1
 800476c:	d201      	bcs.n	8004772 <TEST_PostProcess+0x472>
        conf_max = conf_matrix[row][col];
 800476e:	460b      	mov	r3, r1
 8004770:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 8004772:	f8d4 048c 	ldr.w	r0, [r4, #1164]	; 0x48c
 8004776:	f8d4 1490 	ldr.w	r1, [r4, #1168]	; 0x490
        conf_max = conf_matrix[row][col];
 800477a:	4282      	cmp	r2, r0
 800477c:	bf38      	it	cc
 800477e:	4603      	movcc	r3, r0
      if (conf_matrix[row][col] > conf_max)
 8004780:	4299      	cmp	r1, r3
 8004782:	461a      	mov	r2, r3
 8004784:	d901      	bls.n	800478a <TEST_PostProcess+0x48a>
        conf_max = conf_matrix[row][col];
 8004786:	460b      	mov	r3, r1
 8004788:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 800478a:	f8d4 1494 	ldr.w	r1, [r4, #1172]	; 0x494
 800478e:	428a      	cmp	r2, r1
 8004790:	d201      	bcs.n	8004796 <TEST_PostProcess+0x496>
        conf_max = conf_matrix[row][col];
 8004792:	460b      	mov	r3, r1
 8004794:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 8004796:	f8d4 1498 	ldr.w	r1, [r4, #1176]	; 0x498
 800479a:	428a      	cmp	r2, r1
 800479c:	d201      	bcs.n	80047a2 <TEST_PostProcess+0x4a2>
        conf_max = conf_matrix[row][col];
 800479e:	460b      	mov	r3, r1
 80047a0:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 80047a2:	f8d4 149c 	ldr.w	r1, [r4, #1180]	; 0x49c
 80047a6:	428a      	cmp	r2, r1
 80047a8:	d201      	bcs.n	80047ae <TEST_PostProcess+0x4ae>
        conf_max = conf_matrix[row][col];
 80047aa:	460b      	mov	r3, r1
 80047ac:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 80047ae:	f8d4 14a0 	ldr.w	r1, [r4, #1184]	; 0x4a0
 80047b2:	428a      	cmp	r2, r1
 80047b4:	d201      	bcs.n	80047ba <TEST_PostProcess+0x4ba>
        conf_max = conf_matrix[row][col];
 80047b6:	460b      	mov	r3, r1
 80047b8:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 80047ba:	f8d4 04a4 	ldr.w	r0, [r4, #1188]	; 0x4a4
 80047be:	f8d4 14a8 	ldr.w	r1, [r4, #1192]	; 0x4a8
        conf_max = conf_matrix[row][col];
 80047c2:	4282      	cmp	r2, r0
 80047c4:	bf38      	it	cc
 80047c6:	4603      	movcc	r3, r0
      if (conf_matrix[row][col] > conf_max)
 80047c8:	4299      	cmp	r1, r3
 80047ca:	461a      	mov	r2, r3
 80047cc:	d901      	bls.n	80047d2 <TEST_PostProcess+0x4d2>
        conf_max = conf_matrix[row][col];
 80047ce:	460b      	mov	r3, r1
 80047d0:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 80047d2:	f8d4 14ac 	ldr.w	r1, [r4, #1196]	; 0x4ac
 80047d6:	428a      	cmp	r2, r1
 80047d8:	d201      	bcs.n	80047de <TEST_PostProcess+0x4de>
        conf_max = conf_matrix[row][col];
 80047da:	460b      	mov	r3, r1
 80047dc:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 80047de:	f8d4 14b0 	ldr.w	r1, [r4, #1200]	; 0x4b0
 80047e2:	428a      	cmp	r2, r1
 80047e4:	d201      	bcs.n	80047ea <TEST_PostProcess+0x4ea>
        conf_max = conf_matrix[row][col];
 80047e6:	460b      	mov	r3, r1
 80047e8:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 80047ea:	f8d4 14b4 	ldr.w	r1, [r4, #1204]	; 0x4b4
 80047ee:	428a      	cmp	r2, r1
 80047f0:	d201      	bcs.n	80047f6 <TEST_PostProcess+0x4f6>
        conf_max = conf_matrix[row][col];
 80047f2:	460b      	mov	r3, r1
 80047f4:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 80047f6:	f8d4 14b8 	ldr.w	r1, [r4, #1208]	; 0x4b8
 80047fa:	428a      	cmp	r2, r1
 80047fc:	d201      	bcs.n	8004802 <TEST_PostProcess+0x502>
        conf_max = conf_matrix[row][col];
 80047fe:	460b      	mov	r3, r1
 8004800:	460a      	mov	r2, r1
      if (conf_matrix[row][col] > conf_max)
 8004802:	f8d4 14bc 	ldr.w	r1, [r4, #1212]	; 0x4bc
 8004806:	f204 4b44 	addw	fp, r4, #1092	; 0x444
 800480a:	f8d4 54c0 	ldr.w	r5, [r4, #1216]	; 0x4c0
        float value_norm = value / (float)(conf_max + 1);
 800480e:	f04f 093c 	mov.w	r9, #60	; 0x3c
        conf_max = conf_matrix[row][col];
 8004812:	428a      	cmp	r2, r1
 8004814:	bf38      	it	cc
 8004816:	460b      	movcc	r3, r1
      if (conf_matrix[row][col] > conf_max)
 8004818:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
 800481c:	f8d4 14c8 	ldr.w	r1, [r4, #1224]	; 0x4c8
 8004820:	429d      	cmp	r5, r3
 8004822:	f8d4 24cc 	ldr.w	r2, [r4, #1228]	; 0x4cc
 8004826:	f8d4 64d4 	ldr.w	r6, [r4, #1236]	; 0x4d4
 800482a:	bf38      	it	cc
 800482c:	461d      	movcc	r5, r3
 800482e:	f8d4 34d0 	ldr.w	r3, [r4, #1232]	; 0x4d0
 8004832:	42a8      	cmp	r0, r5
 8004834:	bf38      	it	cc
 8004836:	4628      	movcc	r0, r5
 8004838:	ad04      	add	r5, sp, #16
 800483a:	4281      	cmp	r1, r0
 800483c:	bf38      	it	cc
 800483e:	4601      	movcc	r1, r0
  UTIL_LCD_SetFont(&Font12);
 8004840:	4830      	ldr	r0, [pc, #192]	; (8004904 <TEST_PostProcess+0x604>)
      if (conf_matrix[row][col] > conf_max)
 8004842:	428a      	cmp	r2, r1
 8004844:	bf38      	it	cc
 8004846:	460a      	movcc	r2, r1
 8004848:	4293      	cmp	r3, r2
 800484a:	bf38      	it	cc
 800484c:	4613      	movcc	r3, r2
 800484e:	429e      	cmp	r6, r3
 8004850:	bf38      	it	cc
 8004852:	461e      	movcc	r6, r3
  UTIL_LCD_SetFont(&Font12);
 8004854:	f018 fe40 	bl	801d4d8 <UTIL_LCD_SetFont>
 8004858:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
        float value_norm = value / (float)(conf_max + 1);
 800485c:	3601      	adds	r6, #1
 800485e:	ee07 6a90 	vmov	s15, r6
 8004862:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004866:	ee87 9a27 	vdiv.f32	s18, s14, s15
      if (conf_matrix[row][col] > conf_max)
 800486a:	46d8      	mov	r8, fp
 800486c:	f240 1681 	movw	r6, #385	; 0x181
 8004870:	e032      	b.n	80048d8 <TEST_PostProcess+0x5d8>
        int heat_map_idx = (int)floorf(value_norm * 9.0f);
 8004872:	ee27 8a27 	vmul.f32	s16, s14, s15
        UTIL_LCD_SetBackColor(heat_map[heat_map_idx]);
 8004876:	4b24      	ldr	r3, [pc, #144]	; (8004908 <TEST_PostProcess+0x608>)
        int heat_map_idx = (int)floorf(value_norm * 9.0f);
 8004878:	ee28 8a09 	vmul.f32	s16, s16, s18
 800487c:	febb 8a48 	vrintm.f32	s16, s16
 8004880:	eebd 8ac8 	vcvt.s32.f32	s16, s16
        UTIL_LCD_SetBackColor(heat_map[heat_map_idx]);
 8004884:	ee18 2a10 	vmov	r2, s16
 8004888:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800488c:	f018 fe1c 	bl	801d4c8 <UTIL_LCD_SetBackColor>
        uint32_t text_color = heat_map_idx > 5 ? UTIL_LCD_COLOR_BLACK : UTIL_LCD_COLOR_WHITE;
 8004890:	ee18 3a10 	vmov	r3, s16
 8004894:	2b06      	cmp	r3, #6
        UTIL_LCD_SetTextColor(text_color);
 8004896:	bfb4      	ite	lt
 8004898:	f04f 30ff 	movlt.w	r0, #4294967295
 800489c:	f04f 407f 	movge.w	r0, #4278190080	; 0xff000000
 80048a0:	f018 fe0a 	bl	801d4b8 <UTIL_LCD_SetTextColor>
        sprintf(conf_value, "%d", (unsigned int)conf_matrix[row][col]);
 80048a4:	f8d8 2000 	ldr.w	r2, [r8]
 80048a8:	4918      	ldr	r1, [pc, #96]	; (800490c <TEST_PostProcess+0x60c>)
 80048aa:	4628      	mov	r0, r5
 80048ac:	f022 f970 	bl	8026b90 <siprintf>
      UTIL_LCD_DisplayStringAt(x_off + col * 20, y_off + row * 20, (uint8_t *)conf_value, LEFT_MODE);
 80048b0:	2303      	movs	r3, #3
 80048b2:	462a      	mov	r2, r5
 80048b4:	4649      	mov	r1, r9
 80048b6:	4630      	mov	r0, r6
 80048b8:	f018 fee4 	bl	801d684 <UTIL_LCD_DisplayStringAt>
      UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
 80048bc:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80048c0:	f018 fe02 	bl	801d4c8 <UTIL_LCD_SetBackColor>
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 80048c4:	f04f 30ff 	mov.w	r0, #4294967295
 80048c8:	f018 fdf6 	bl	801d4b8 <UTIL_LCD_SetTextColor>
 80048cc:	3614      	adds	r6, #20
    for (int col = 0; col < NN_OUTPUT_CLASS_NUMBER; col++)
 80048ce:	f240 13f9 	movw	r3, #505	; 0x1f9
 80048d2:	429e      	cmp	r6, r3
 80048d4:	f000 8085 	beq.w	80049e2 <TEST_PostProcess+0x6e2>
      uint32_t value = conf_matrix[row][col];
 80048d8:	f858 3f04 	ldr.w	r3, [r8, #4]!
        int heat_map_idx = (int)floorf(value_norm * 9.0f);
 80048dc:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
        float value_norm = value / (float)(conf_max + 1);
 80048e0:	ee07 3a10 	vmov	s14, r3
 80048e4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
      if (value > 0)
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1c2      	bne.n	8004872 <TEST_PostProcess+0x572>
        sprintf(conf_value, ".");
 80048ec:	f04f 032e 	mov.w	r3, #46	; 0x2e
 80048f0:	802b      	strh	r3, [r5, #0]
 80048f2:	e7dd      	b.n	80048b0 <TEST_PostProcess+0x5b0>
 80048f4:	24007fc8 	.word	0x24007fc8
 80048f8:	24000008 	.word	0x24000008
 80048fc:	08028d88 	.word	0x08028d88
 8004900:	08028fd4 	.word	0x08028fd4
 8004904:	240073f8 	.word	0x240073f8
 8004908:	08029198 	.word	0x08029198
 800490c:	08029020 	.word	0x08029020
    UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)TestContext_Ptr->DumpContext.dump_session_name, LEFT_MODE);
 8004910:	f018 fdea 	bl	801d4e8 <UTIL_LCD_GetFont>
 8004914:	4643      	mov	r3, r8
 8004916:	88c1      	ldrh	r1, [r0, #6]
 8004918:	f104 0210 	add.w	r2, r4, #16
 800491c:	4628      	mov	r0, r5
 800491e:	f018 feb1 	bl	801d684 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"DUMP READY", RIGHT_MODE);
 8004922:	f018 fde1 	bl	801d4e8 <UTIL_LCD_GetFont>
 8004926:	2302      	movs	r3, #2
 8004928:	88c1      	ldrh	r1, [r0, #6]
 800492a:	4628      	mov	r0, r5
 800492c:	4ac2      	ldr	r2, [pc, #776]	; (8004c38 <TEST_PostProcess+0x938>)
 800492e:	f018 fea9 	bl	801d684 <UTIL_LCD_DisplayStringAt>
    sprintf(msg, "%s %.0f%%", App_Cxt_Ptr->nn_top1_output_class_name, App_Cxt_Ptr->nn_top1_output_class_proba * 100);
 8004932:	ed96 7a04 	vldr	s14, [r6, #16]
 8004936:	eddf 7ac1 	vldr	s15, [pc, #772]	; 8004c3c <TEST_PostProcess+0x93c>
 800493a:	a804      	add	r0, sp, #16
 800493c:	68f2      	ldr	r2, [r6, #12]
 800493e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004942:	49bf      	ldr	r1, [pc, #764]	; (8004c40 <TEST_PostProcess+0x940>)
 8004944:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8004948:	ed8d 7b00 	vstr	d7, [sp]
 800494c:	f022 f920 	bl	8026b90 <siprintf>
    UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_TOP_N_LAST_LINE - NN_TOP_N_DISPLAY + 0), (uint8_t *)msg, CENTER_MODE);
 8004950:	f018 fdca 	bl	801d4e8 <UTIL_LCD_GetFont>
 8004954:	88c1      	ldrh	r1, [r0, #6]
 8004956:	2301      	movs	r3, #1
 8004958:	aa04      	add	r2, sp, #16
 800495a:	eb01 0781 	add.w	r7, r1, r1, lsl #2
 800495e:	4628      	mov	r0, r5
 8004960:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 8004964:	f018 fe8e 	bl	801d684 <UTIL_LCD_DisplayStringAt>
    sprintf(msg, "Inference: %ldms", App_Cxt_Ptr->nn_inference_time);
 8004968:	68b2      	ldr	r2, [r6, #8]
 800496a:	49b6      	ldr	r1, [pc, #728]	; (8004c44 <TEST_PostProcess+0x944>)
 800496c:	a804      	add	r0, sp, #16
 800496e:	f022 f90f 	bl	8026b90 <siprintf>
    UTIL_LCD_DisplayStringAt(0, LINE(DISPLAY_INFER_TIME_LINE), (uint8_t *)msg, CENTER_MODE);
 8004972:	f018 fdb9 	bl	801d4e8 <UTIL_LCD_GetFont>
 8004976:	88c1      	ldrh	r1, [r0, #6]
 8004978:	aa04      	add	r2, sp, #16
 800497a:	2301      	movs	r3, #1
 800497c:	0109      	lsls	r1, r1, #4
 800497e:	4628      	mov	r0, r5
 8004980:	f018 fe80 	bl	801d684 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8004984:	6b70      	ldr	r0, [r6, #52]	; 0x34
 8004986:	f7fd f98f 	bl	8001ca8 <DISPLAY_Refresh>
    if(BSP_PB_GetState(BUTTON_WAKEUP) != RESET)
 800498a:	4628      	mov	r0, r5
 800498c:	f006 f9f2 	bl	800ad74 <BSP_PB_GetState>
 8004990:	2800      	cmp	r0, #0
 8004992:	f43f acc8 	beq.w	8004326 <TEST_PostProcess+0x26>
      TestContext_Ptr->DumpContext.dump_state = 1;
 8004996:	2301      	movs	r3, #1
 8004998:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 800499c:	e4c3      	b.n	8004326 <TEST_PostProcess+0x26>
    UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)TestContext_Ptr->CaptureContext.capture_session_name, LEFT_MODE);
 800499e:	f018 fda3 	bl	801d4e8 <UTIL_LCD_GetFont>
 80049a2:	2303      	movs	r3, #3
 80049a4:	88c1      	ldrh	r1, [r0, #6]
 80049a6:	f104 02cc 	add.w	r2, r4, #204	; 0xcc
 80049aa:	4628      	mov	r0, r5
 80049ac:	f018 fe6a 	bl	801d684 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)"CAPTURE READY", RIGHT_MODE);
 80049b0:	f018 fd9a 	bl	801d4e8 <UTIL_LCD_GetFont>
 80049b4:	2302      	movs	r3, #2
 80049b6:	88c1      	ldrh	r1, [r0, #6]
 80049b8:	4628      	mov	r0, r5
 80049ba:	4aa3      	ldr	r2, [pc, #652]	; (8004c48 <TEST_PostProcess+0x948>)
 80049bc:	f018 fe62 	bl	801d684 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 80049c0:	6b70      	ldr	r0, [r6, #52]	; 0x34
 80049c2:	f7fd f971 	bl	8001ca8 <DISPLAY_Refresh>
    if(BSP_PB_GetState(BUTTON_WAKEUP) != RESET)
 80049c6:	4628      	mov	r0, r5
 80049c8:	f006 f9d4 	bl	800ad74 <BSP_PB_GetState>
 80049cc:	2800      	cmp	r0, #0
 80049ce:	f43f acaa 	beq.w	8004326 <TEST_PostProcess+0x26>
      TestContext_Ptr->CaptureContext.capture_state = 1;
 80049d2:	2301      	movs	r3, #1
 80049d4:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
}
 80049d8:	b017      	add	sp, #92	; 0x5c
 80049da:	ecbd 8b04 	vpop	{d8-d9}
 80049de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049e2:	f109 0914 	add.w	r9, r9, #20
 80049e6:	f10b 0b18 	add.w	fp, fp, #24
  for (int row = 0; row < NN_OUTPUT_CLASS_NUMBER; row++)
 80049ea:	f1b9 0fb4 	cmp.w	r9, #180	; 0xb4
 80049ee:	f47f af3c 	bne.w	800486a <TEST_PostProcess+0x56a>
  UTIL_LCD_SetFont(&Font20);
 80049f2:	4896      	ldr	r0, [pc, #600]	; (8004c4c <TEST_PostProcess+0x94c>)
    UTIL_LCD_DisplayStringAt(40, LINE(22), (uint8_t *)tmp_msg, LEFT_MODE);
 80049f4:	2516      	movs	r5, #22
  UTIL_LCD_SetFont(&Font20);
 80049f6:	f018 fd6f 	bl	801d4d8 <UTIL_LCD_SetFont>
    sprintf(tmp_msg, "%s %.0f%%", NN_OUTPUT_CLASS_LIST[predicted_class], confidence * 100);
 80049fa:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8004c3c <TEST_PostProcess+0x93c>
 80049fe:	9b03      	ldr	r3, [sp, #12]
 8004a00:	ee28 7a87 	vmul.f32	s14, s17, s14
 8004a04:	498e      	ldr	r1, [pc, #568]	; (8004c40 <TEST_PostProcess+0x940>)
 8004a06:	f853 202a 	ldr.w	r2, [r3, sl, lsl #2]
 8004a0a:	4891      	ldr	r0, [pc, #580]	; (8004c50 <TEST_PostProcess+0x950>)
 8004a0c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8004a10:	ed8d 7b00 	vstr	d7, [sp]
 8004a14:	f022 f8bc 	bl	8026b90 <siprintf>
    UTIL_LCD_DisplayStringAt(40, LINE(21), (uint8_t *)tmp_msg, LEFT_MODE);
 8004a18:	f018 fd66 	bl	801d4e8 <UTIL_LCD_GetFont>
 8004a1c:	88c1      	ldrh	r1, [r0, #6]
 8004a1e:	2303      	movs	r3, #3
 8004a20:	4a8b      	ldr	r2, [pc, #556]	; (8004c50 <TEST_PostProcess+0x950>)
 8004a22:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8004a26:	2028      	movs	r0, #40	; 0x28
 8004a28:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8004a2c:	f018 fe2a 	bl	801d684 <UTIL_LCD_DisplayStringAt>
    sprintf(tmp_msg, "Average loss (categorical cross-entropy) %.4f ", TestContext_Ptr->ValidationContext.avg_loss);
 8004a30:	4988      	ldr	r1, [pc, #544]	; (8004c54 <TEST_PostProcess+0x954>)
 8004a32:	4887      	ldr	r0, [pc, #540]	; (8004c50 <TEST_PostProcess+0x950>)
 8004a34:	e9d4 2346 	ldrd	r2, r3, [r4, #280]	; 0x118
 8004a38:	f022 f8aa 	bl	8026b90 <siprintf>
    UTIL_LCD_DisplayStringAt(40, LINE(22), (uint8_t *)tmp_msg, LEFT_MODE);
 8004a3c:	f018 fd54 	bl	801d4e8 <UTIL_LCD_GetFont>
 8004a40:	88c1      	ldrh	r1, [r0, #6]
 8004a42:	2303      	movs	r3, #3
 8004a44:	4a82      	ldr	r2, [pc, #520]	; (8004c50 <TEST_PostProcess+0x950>)
 8004a46:	2028      	movs	r0, #40	; 0x28
 8004a48:	fb05 f101 	mul.w	r1, r5, r1
 8004a4c:	f018 fe1a 	bl	801d684 <UTIL_LCD_DisplayStringAt>
    sprintf(tmp_msg, "Class: %s, id %d", TestContext_Ptr->ValidationContext.fno.fname, TestContext_Ptr->ValidationContext.class_index);
 8004a50:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8004a54:	f504 72b7 	add.w	r2, r4, #366	; 0x16e
 8004a58:	497f      	ldr	r1, [pc, #508]	; (8004c58 <TEST_PostProcess+0x958>)
 8004a5a:	487d      	ldr	r0, [pc, #500]	; (8004c50 <TEST_PostProcess+0x950>)
 8004a5c:	f022 f898 	bl	8026b90 <siprintf>
    UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)tmp_msg, CENTER_MODE);
 8004a60:	f018 fd42 	bl	801d4e8 <UTIL_LCD_GetFont>
 8004a64:	2301      	movs	r3, #1
 8004a66:	88c1      	ldrh	r1, [r0, #6]
 8004a68:	2000      	movs	r0, #0
 8004a6a:	4a79      	ldr	r2, [pc, #484]	; (8004c50 <TEST_PostProcess+0x950>)
 8004a6c:	f018 fe0a 	bl	801d684 <UTIL_LCD_DisplayStringAt>
    DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8004a70:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004a72:	f7fd f919 	bl	8001ca8 <DISPLAY_Refresh>
    if(TestContext_Ptr->UartContext.uart_cmd_ongoing)
 8004a76:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f43f ac53 	beq.w	8004326 <TEST_PostProcess+0x26>
      for (int i=0; i<AI_NET_OUTPUT_SIZE*4; i++)
 8004a80:	2300      	movs	r3, #0
        *(TestContext_Ptr->ValidationContext.validation_write_bufferPtr)++=*((uint8_t *)(App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer) + i);
 8004a82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a84:	f8d4 2558 	ldr.w	r2, [r4, #1368]	; 0x558
 8004a88:	6809      	ldr	r1, [r1, #0]
 8004a8a:	1c50      	adds	r0, r2, #1
 8004a8c:	f8c4 0558 	str.w	r0, [r4, #1368]	; 0x558
 8004a90:	5cc9      	ldrb	r1, [r1, r3]
      for (int i=0; i<AI_NET_OUTPUT_SIZE*4; i++)
 8004a92:	3301      	adds	r3, #1
 8004a94:	2b18      	cmp	r3, #24
        *(TestContext_Ptr->ValidationContext.validation_write_bufferPtr)++=*((uint8_t *)(App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer) + i);
 8004a96:	7011      	strb	r1, [r2, #0]
      for (int i=0; i<AI_NET_OUTPUT_SIZE*4; i++)
 8004a98:	d1f3      	bne.n	8004a82 <TEST_PostProcess+0x782>
 8004a9a:	e444      	b.n	8004326 <TEST_PostProcess+0x26>
      if((TestContext_Ptr->UartContext.uart_cmd_ongoing==0)|| (TestContext_Ptr->UartContext.uart_cmd_ongoing==1 && TestContext_Ptr->UartContext.uart_host_requested_dump_memory == SDCARD))
 8004a9c:	f894 2566 	ldrb.w	r2, [r4, #1382]	; 0x566
 8004aa0:	2a00      	cmp	r2, #0
 8004aa2:	f47f ad3a 	bne.w	800451a <TEST_PostProcess+0x21a>
        BSP_SD_DeInit(0);
 8004aa6:	2000      	movs	r0, #0
 8004aa8:	f008 fddc 	bl	800d664 <BSP_SD_DeInit>
        CAMERA_Init(App_Cxt_Ptr->Camera_ContextPtr);
 8004aac:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8004aae:	f7fc fe75 	bl	800179c <CAMERA_Init>
        if(TestContext_Ptr->DumpContext.Dump_FrameSource == CAMERA_COLORBAR)
 8004ab2:	7923      	ldrb	r3, [r4, #4]
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d102      	bne.n	8004abe <TEST_PostProcess+0x7be>
          CAMERA_Set_TestBar_Mode(App_Cxt_Ptr->Camera_ContextPtr);
 8004ab8:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8004aba:	f7fc ff4f 	bl	800195c <CAMERA_Set_TestBar_Mode>
        while (!App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready);
 8004abe:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8004ac0:	7d1a      	ldrb	r2, [r3, #20]
 8004ac2:	2a00      	cmp	r2, #0
 8004ac4:	d0fc      	beq.n	8004ac0 <TEST_PostProcess+0x7c0>
        App_Cxt_Ptr->Camera_ContextPtr->new_frame_ready = 0; /* Reset flag */
 8004ac6:	2000      	movs	r0, #0
 8004ac8:	7518      	strb	r0, [r3, #20]
        BSP_CAMERA_Resume(0);
 8004aca:	f007 fd4b 	bl	800c564 <BSP_CAMERA_Resume>
 8004ace:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
 8004ad2:	e522      	b.n	800451a <TEST_PostProcess+0x21a>
    Error_Handler();
 8004ad4:	f000 fa5a 	bl	8004f8c <Error_Handler>
 8004ad8:	e4f8      	b.n	80044cc <TEST_PostProcess+0x1cc>
    double categorical_crossentropy = 10.0;
 8004ada:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8004ade:	e5cb      	b.n	8004678 <TEST_PostProcess+0x378>
        UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Error. Unable to write to missclassified file", CENTER_MODE);
 8004ae0:	f018 fd02 	bl	801d4e8 <UTIL_LCD_GetFont>
 8004ae4:	240e      	movs	r4, #14
 8004ae6:	88c1      	ldrh	r1, [r0, #6]
 8004ae8:	2301      	movs	r3, #1
 8004aea:	4648      	mov	r0, r9
 8004aec:	4a5b      	ldr	r2, [pc, #364]	; (8004c5c <TEST_PostProcess+0x95c>)
 8004aee:	fb04 f101 	mul.w	r1, r4, r1
 8004af2:	f018 fdc7 	bl	801d684 <UTIL_LCD_DisplayStringAt>
        DISPLAY_Refresh(App_Cxt_Ptr->Display_ContextPtr);
 8004af6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004af8:	f7fd f8d6 	bl	8001ca8 <DISPLAY_Refresh>
 8004afc:	e7fe      	b.n	8004afc <TEST_PostProcess+0x7fc>
      Error_Handler();
 8004afe:	f000 fa45 	bl	8004f8c <Error_Handler>
 8004b02:	e4d6      	b.n	80044b2 <TEST_PostProcess+0x1b2>
        *(aTxBuffer) = cmd_status;
 8004b04:	f8df 916c 	ldr.w	r9, [pc, #364]	; 8004c74 <TEST_PostProcess+0x974>
        TestContext_Ptr->UartContext.uart_host_requested_mode=NOMINAL;
 8004b08:	f04f 0a01 	mov.w	sl, #1
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8004b0c:	f204 587c 	addw	r8, r4, #1404	; 0x57c
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8004b10:	2202      	movs	r2, #2
        TestContext_Ptr->UartContext.uart_host_requested_mode=NOMINAL;
 8004b12:	f884 a564 	strb.w	sl, [r4, #1380]	; 0x564
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8004b16:	4648      	mov	r0, r9
        App_Cxt_Ptr->run_loop = 0;
 8004b18:	6073      	str	r3, [r6, #4]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8004b1a:	21a0      	movs	r1, #160	; 0xa0
        *(aTxBuffer) = cmd_status;
 8004b1c:	f889 5000 	strb.w	r5, [r9]
  UTILS_DCache_Coherency_Maintenance((void *)TxDataBufPtr, TxDataBufSize, CLEAN);
 8004b20:	f000 f9c8 	bl	8004eb4 <UTILS_DCache_Coherency_Maintenance>
    if(HAL_UART_Transmit_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t*)TxDataBufPtr, TxDataTransferSize)!= HAL_OK)
 8004b24:	4652      	mov	r2, sl
 8004b26:	4649      	mov	r1, r9
 8004b28:	4640      	mov	r0, r8
 8004b2a:	f010 ff71 	bl	8015a10 <HAL_UART_Transmit_DMA>
 8004b2e:	b108      	cbz	r0, 8004b34 <TEST_PostProcess+0x834>
      Error_Handler();
 8004b30:	f000 fa2c 	bl	8004f8c <Error_Handler>
    while (HAL_UART_GetState(&Test_Context_Ptr->UartContext.UartHandle) != HAL_UART_STATE_READY);
 8004b34:	4640      	mov	r0, r8
 8004b36:	f011 f9b1 	bl	8015e9c <HAL_UART_GetState>
 8004b3a:	2820      	cmp	r0, #32
 8004b3c:	d1fa      	bne.n	8004b34 <TEST_PostProcess+0x834>
  if (HAL_UART_Receive_DMA(&Test_Context_Ptr->UartContext.UartHandle, (uint8_t *)RxDataBufPtr, RxDataSize) != HAL_OK)
 8004b3e:	4640      	mov	r0, r8
 8004b40:	220a      	movs	r2, #10
 8004b42:	4947      	ldr	r1, [pc, #284]	; (8004c60 <TEST_PostProcess+0x960>)
 8004b44:	f010 ffba 	bl	8015abc <HAL_UART_Receive_DMA>
 8004b48:	b108      	cbz	r0, 8004b4e <TEST_PostProcess+0x84e>
    Error_Handler();
 8004b4a:	f000 fa1f 	bl	8004f8c <Error_Handler>
         BSP_SD_DeInit(0);/*Required in order to avoid subsequent call to Camera_Init() fct to fail*/
 8004b4e:	2000      	movs	r0, #0
 8004b50:	f008 fd88 	bl	800d664 <BSP_SD_DeInit>
 8004b54:	e511      	b.n	800457a <TEST_PostProcess+0x27a>
          if(dump_output_buff[i]!=0)
 8004b56:	4f43      	ldr	r7, [pc, #268]	; (8004c64 <TEST_PostProcess+0x964>)
 8004b58:	edd7 7a00 	vldr	s15, [r7]
 8004b5c:	ed97 6a01 	vldr	s12, [r7, #4]
 8004b60:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004b64:	edd7 6a02 	vldr	s13, [r7, #8]
 8004b68:	ed97 7a03 	vldr	s14, [r7, #12]
 8004b6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            first_run =0;
 8004b74:	eeb5 6a40 	vcmp.f32	s12, #0.0
          if(dump_output_buff[i]!=0)
 8004b78:	bf14      	ite	ne
 8004b7a:	4613      	movne	r3, r2
 8004b7c:	2301      	moveq	r3, #1
            first_run =0;
 8004b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b82:	eef5 6a40 	vcmp.f32	s13, #0.0
 8004b86:	bf18      	it	ne
 8004b88:	4613      	movne	r3, r2
 8004b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b8e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8004b92:	bf18      	it	ne
 8004b94:	4613      	movne	r3, r2
 8004b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
          if(dump_output_buff[i]!=0)
 8004b9a:	eef5 7a40 	vcmp.f32	s15, #0.0
            first_run =0;
 8004b9e:	bf18      	it	ne
 8004ba0:	4613      	movne	r3, r2
          if(dump_output_buff[i]!=0)
 8004ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ba6:	d107      	bne.n	8004bb8 <TEST_PostProcess+0x8b8>
 8004ba8:	edd7 7a05 	vldr	s15, [r7, #20]
 8004bac:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bb4:	d100      	bne.n	8004bb8 <TEST_PostProcess+0x8b8>
        if(first_run == 0)
 8004bb6:	b99b      	cbnz	r3, 8004be0 <TEST_PostProcess+0x8e0>
            if(dump_output_buff[i] != *((float*)App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer + i))
 8004bb8:	6c33      	ldr	r3, [r6, #64]	; 0x40
        uint32_t issue_ocurence=0;
 8004bba:	2200      	movs	r2, #0
 8004bbc:	4929      	ldr	r1, [pc, #164]	; (8004c64 <TEST_PostProcess+0x964>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f103 0018 	add.w	r0, r3, #24
            if(dump_output_buff[i] != *((float*)App_Cxt_Ptr->Ai_ContextPtr->nn_output_buffer + i))
 8004bc4:	ecb3 7a01 	vldmia	r3!, {s14}
 8004bc8:	ecf1 7a01 	vldmia	r1!, {s15}
              issue_ocurence =1;
 8004bcc:	eeb4 7a67 	vcmp.f32	s14, s15
 8004bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bd4:	bf18      	it	ne
 8004bd6:	2201      	movne	r2, #1
          for(uint32_t i=0; i<AI_NET_OUTPUT_SIZE;i++)
 8004bd8:	4298      	cmp	r0, r3
 8004bda:	d1f3      	bne.n	8004bc4 <TEST_PostProcess+0x8c4>
          if(issue_ocurence == 1)
 8004bdc:	2a01      	cmp	r2, #1
 8004bde:	d068      	beq.n	8004cb2 <TEST_PostProcess+0x9b2>
  uint8_t cmd_status=CMD_COMPLETE_SUCCESS_EVT;
 8004be0:	2502      	movs	r5, #2
        if(TestContext_Ptr->DumpContext.dump_write_bufferPtr == (dump_intermediate_data_ping_buff + DUMP_INTERMEDIATE_DATA_BUFFER_SIZE))
 8004be2:	6823      	ldr	r3, [r4, #0]
 8004be4:	4a20      	ldr	r2, [pc, #128]	; (8004c68 <TEST_PostProcess+0x968>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d068      	beq.n	8004cbc <TEST_PostProcess+0x9bc>
        else if(TestContext_Ptr->DumpContext.dump_write_bufferPtr == (dump_intermediate_data_pong_buff + DUMP_INTERMEDIATE_DATA_BUFFER_SIZE))
 8004bea:	4a20      	ldr	r2, [pc, #128]	; (8004c6c <TEST_PostProcess+0x96c>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	f47f aca0 	bne.w	8004532 <TEST_PostProcess+0x232>
          TestContext_Ptr->DumpContext.dump_write_bufferPtr=dump_intermediate_data_ping_buff;
 8004bf2:	4b1f      	ldr	r3, [pc, #124]	; (8004c70 <TEST_PostProcess+0x970>)
 8004bf4:	6023      	str	r3, [r4, #0]
 8004bf6:	e49c      	b.n	8004532 <TEST_PostProcess+0x232>
          sprintf(msg, "%s %.0f%%", App_Cxt_Ptr->nn_top1_output_class_name, App_Cxt_Ptr->nn_top1_output_class_proba * 100);
 8004bf8:	ed96 7a04 	vldr	s14, [r6, #16]
 8004bfc:	ad04      	add	r5, sp, #16
 8004bfe:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8004c3c <TEST_PostProcess+0x93c>
          for(int i=0;i<strlen(msg);i++)
 8004c02:	f04f 0900 	mov.w	r9, #0
          sprintf(msg, "%s %.0f%%", App_Cxt_Ptr->nn_top1_output_class_name, App_Cxt_Ptr->nn_top1_output_class_proba * 100);
 8004c06:	4628      	mov	r0, r5
 8004c08:	490d      	ldr	r1, [pc, #52]	; (8004c40 <TEST_PostProcess+0x940>)
 8004c0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c0e:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8004c74 <TEST_PostProcess+0x974>
 8004c12:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8004c16:	ed8d 7b00 	vstr	d7, [sp]
 8004c1a:	68f2      	ldr	r2, [r6, #12]
 8004c1c:	f021 ffb8 	bl	8026b90 <siprintf>
          for(int i=0;i<strlen(msg);i++)
 8004c20:	4628      	mov	r0, r5
 8004c22:	f7fb fb67 	bl	80002f4 <strlen>
 8004c26:	4581      	cmp	r9, r0
 8004c28:	d226      	bcs.n	8004c78 <TEST_PostProcess+0x978>
            *(aTxBuffer + i) = msg[i];
 8004c2a:	f815 3009 	ldrb.w	r3, [r5, r9]
 8004c2e:	f808 3009 	strb.w	r3, [r8, r9]
          for(int i=0;i<strlen(msg);i++)
 8004c32:	f109 0901 	add.w	r9, r9, #1
 8004c36:	e7f3      	b.n	8004c20 <TEST_PostProcess+0x920>
 8004c38:	08028fc8 	.word	0x08028fc8
 8004c3c:	42c80000 	.word	0x42c80000
 8004c40:	08028a28 	.word	0x08028a28
 8004c44:	08028a34 	.word	0x08028a34
 8004c48:	08028fb8 	.word	0x08028fb8
 8004c4c:	24007400 	.word	0x24007400
 8004c50:	24007fc8 	.word	0x24007fc8
 8004c54:	08029024 	.word	0x08029024
 8004c58:	08029054 	.word	0x08029054
 8004c5c:	08028ff0 	.word	0x08028ff0
 8004c60:	24007600 	.word	0x24007600
 8004c64:	d0cdae80 	.word	0xd0cdae80
 8004c68:	d0db1026 	.word	0xd0db1026
 8004c6c:	d0e838e6 	.word	0xd0e838e6
 8004c70:	d0cde780 	.word	0xd0cde780
 8004c74:	24007620 	.word	0x24007620
          *(aTxBuffer + strlen(msg)) = 32;//Space
 8004c78:	f04f 0c20 	mov.w	ip, #32
          Uart_Tx(TestContext_Ptr, (uint8_t*)aTxBuffer, sizeof(aTxBuffer), strlen(msg)+1);
 8004c7c:	1c43      	adds	r3, r0, #1
 8004c7e:	22a0      	movs	r2, #160	; 0xa0
 8004c80:	4918      	ldr	r1, [pc, #96]	; (8004ce4 <TEST_PostProcess+0x9e4>)
          *(aTxBuffer + strlen(msg)) = 32;//Space
 8004c82:	f808 c000 	strb.w	ip, [r8, r0]
          for(int i=0;i<strlen(msg);i++)
 8004c86:	f04f 0900 	mov.w	r9, #0
          Uart_Tx(TestContext_Ptr, (uint8_t*)aTxBuffer, sizeof(aTxBuffer), strlen(msg)+1);
 8004c8a:	4620      	mov	r0, r4
 8004c8c:	f7fd f8f0 	bl	8001e70 <Uart_Tx>
          sprintf(msg, "Inference: %ldms", App_Cxt_Ptr->nn_inference_time);
 8004c90:	68b2      	ldr	r2, [r6, #8]
 8004c92:	4915      	ldr	r1, [pc, #84]	; (8004ce8 <TEST_PostProcess+0x9e8>)
 8004c94:	4628      	mov	r0, r5
 8004c96:	f021 ff7b 	bl	8026b90 <siprintf>
          for(int i=0;i<strlen(msg);i++)
 8004c9a:	4628      	mov	r0, r5
 8004c9c:	f7fb fb2a 	bl	80002f4 <strlen>
 8004ca0:	4581      	cmp	r9, r0
 8004ca2:	d20e      	bcs.n	8004cc2 <TEST_PostProcess+0x9c2>
            *(aTxBuffer + i) = msg[i];
 8004ca4:	f815 3009 	ldrb.w	r3, [r5, r9]
 8004ca8:	f808 3009 	strb.w	r3, [r8, r9]
          for(int i=0;i<strlen(msg);i++)
 8004cac:	f109 0901 	add.w	r9, r9, #1
 8004cb0:	e7f3      	b.n	8004c9a <TEST_PostProcess+0x99a>
            TestContext_Ptr->UartContext.uart_host_requested_dump_number = 0;//so to subsequently terminates the UART command processing
 8004cb2:	2300      	movs	r3, #0
            cmd_status=CMD_COMPLETE_FAILURE_EVT;
 8004cb4:	2503      	movs	r5, #3
            TestContext_Ptr->UartContext.uart_host_requested_dump_number = 0;//so to subsequently terminates the UART command processing
 8004cb6:	f8c4 3568 	str.w	r3, [r4, #1384]	; 0x568
 8004cba:	e792      	b.n	8004be2 <TEST_PostProcess+0x8e2>
          TestContext_Ptr->DumpContext.dump_write_bufferPtr=dump_intermediate_data_pong_buff;
 8004cbc:	4b0b      	ldr	r3, [pc, #44]	; (8004cec <TEST_PostProcess+0x9ec>)
 8004cbe:	6023      	str	r3, [r4, #0]
 8004cc0:	e437      	b.n	8004532 <TEST_PostProcess+0x232>
          *(aTxBuffer + strlen(msg)+1) = 10;//LF
 8004cc2:	eb08 0500 	add.w	r5, r8, r0
          *(aTxBuffer + strlen(msg)) = 13;//CR
 8004cc6:	220d      	movs	r2, #13
          *(aTxBuffer + strlen(msg)+1) = 10;//LF
 8004cc8:	f04f 0c0a 	mov.w	ip, #10
          Uart_Tx(TestContext_Ptr, (uint8_t*)aTxBuffer, sizeof(aTxBuffer), strlen(msg)+2);
 8004ccc:	1c83      	adds	r3, r0, #2
          *(aTxBuffer + strlen(msg)) = 13;//CR
 8004cce:	f808 2000 	strb.w	r2, [r8, r0]
          Uart_Tx(TestContext_Ptr, (uint8_t*)aTxBuffer, sizeof(aTxBuffer), strlen(msg)+2);
 8004cd2:	22a0      	movs	r2, #160	; 0xa0
 8004cd4:	4903      	ldr	r1, [pc, #12]	; (8004ce4 <TEST_PostProcess+0x9e4>)
 8004cd6:	4620      	mov	r0, r4
          *(aTxBuffer + strlen(msg)+1) = 10;//LF
 8004cd8:	f885 c001 	strb.w	ip, [r5, #1]
          Uart_Tx(TestContext_Ptr, (uint8_t*)aTxBuffer, sizeof(aTxBuffer), strlen(msg)+2);
 8004cdc:	f7fd f8c8 	bl	8001e70 <Uart_Tx>
 8004ce0:	e434      	b.n	800454c <TEST_PostProcess+0x24c>
 8004ce2:	bf00      	nop
 8004ce4:	24007620 	.word	0x24007620
 8004ce8:	08028a34 	.word	0x08028a34
 8004cec:	d0db1040 	.word	0xd0db1040

08004cf0 <HAL_UART_ErrorCallback>:
 * Traps UART errors.
 *
 * @param huart pointer to UART handle
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004cf0:	e7fe      	b.n	8004cf0 <HAL_UART_ErrorCallback>
 8004cf2:	bf00      	nop

08004cf4 <UTILS_Init>:
* @brief  UTILS Initialization
* @param  Utils_Context_Ptr  Pointer to Utilities context
* @retval None
*/
void UTILS_Init(UtilsContext_TypeDef *Utils_Context_Ptr)
{
 8004cf4:	b510      	push	{r4, lr}
 8004cf6:	4603      	mov	r3, r0
  Utils_Context_Ptr->JoystickContext.joyState=JOY_NONE;
 8004cf8:	2400      	movs	r4, #0
  Utils_Context_Ptr->JoystickContext.lcdBrightness=LCD_BRIGHTNESS_MID;
 8004cfa:	2232      	movs	r2, #50	; 0x32
  Utils_Context_Ptr->JoystickContext.joyState=JOY_NONE;
 8004cfc:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
  Utils_Context_Ptr->JoystickContext.lcdBrightness=LCD_BRIGHTNESS_MID;
 8004d00:	6342      	str	r2, [r0, #52]	; 0x34
  Utils_Context_Init(Utils_Context_Ptr);
  
  /*LEDs Init*/
  BSP_LED_Init(LED_GREEN);
 8004d02:	4620      	mov	r0, r4
  Utils_Context_Ptr->JoystickContext.camBrightness=0;/* Mid-level camera brightness. */
 8004d04:	e9c3 440b 	strd	r4, r4, [r3, #44]	; 0x2c
  Utils_Context_Ptr->ExecTimingContext.tcapturestart2= 0;
 8004d08:	e9c3 4406 	strd	r4, r4, [r3, #24]
  Utils_Context_Ptr->ExecTimingContext.tcapturestop=0; 
 8004d0c:	e9c3 4408 	strd	r4, r4, [r3, #32]
  BSP_LED_Init(LED_GREEN);
 8004d10:	f005 ff88 	bl	800ac24 <BSP_LED_Init>
  BSP_LED_Init(LED_ORANGE);
 8004d14:	2001      	movs	r0, #1
 8004d16:	f005 ff85 	bl	800ac24 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8004d1a:	2002      	movs	r0, #2
 8004d1c:	f005 ff82 	bl	800ac24 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 8004d20:	2003      	movs	r0, #3
 8004d22:	f005 ff7f 	bl	800ac24 <BSP_LED_Init>
  
  /* Activate joystick. */
  BSP_JOY_Init(JOY1, JOY_MODE_GPIO,JOY_ALL);
 8004d26:	4621      	mov	r1, r4
 8004d28:	4620      	mov	r0, r4
 8004d2a:	221f      	movs	r2, #31
 8004d2c:	f006 f834 	bl	800ad98 <BSP_JOY_Init>
  
  /* Configure the Wakeup push-button in GPIO Mode */
  BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 8004d30:	4621      	mov	r1, r4
 8004d32:	4620      	mov	r0, r4
}
 8004d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 8004d38:	f005 bfd2 	b.w	800ace0 <BSP_PB_Init>

08004d3c <UTILS_GetTimeStamp>:
* @param  Utils_Context_Ptr  Pointer to Utilities context
* @retval Time stamp
*/
uint32_t UTILS_GetTimeStamp(UtilsContext_TypeDef *Utils_Context_Ptr)
{
  return HAL_GetTick();
 8004d3c:	f008 be10 	b.w	800d960 <HAL_GetTick>

08004d40 <UTILS_Dma2d_Memcpy>:
 * @param red_blue_swap boolean flag for red-blue channel swap, 0 if no swap, else 1
*/
void UTILS_Dma2d_Memcpy(uint32_t *pSrc, uint32_t *pDst, uint16_t x, uint16_t y, uint16_t xsize, uint16_t ysize,
                        uint32_t rowStride, uint32_t input_color_format, uint32_t output_color_format, int pfc,
                        int red_blue_swap)
{
 8004d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d44:	b087      	sub	sp, #28
 8004d46:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8004d48:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
 8004d4c:	2d04      	cmp	r5, #4
 8004d4e:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8004d52:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 8004d56:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
 8004d5a:	9105      	str	r1, [sp, #20]
 8004d5c:	e9dd 4915 	ldrd	r4, r9, [sp, #84]	; 0x54
 8004d60:	d82d      	bhi.n	8004dbe <UTILS_Dma2d_Memcpy+0x7e>
 8004d62:	4824      	ldr	r0, [pc, #144]	; (8004df4 <UTILS_Dma2d_Memcpy+0xb4>)
 8004d64:	fb0a 2303 	mla	r3, sl, r3, r2
 8004d68:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 8004d6c:	fb07 f703 	mul.w	r7, r7, r3
  uint32_t bytepp = GetBytesPerPixel(output_color_format);

  uint32_t destination = (uint32_t)pDst + (y * rowStride + x) * bytepp;
  uint32_t source = (uint32_t)pSrc;

  HAL_DMA2D_DeInit(&hlcd_dma2d);
 8004d70:	4821      	ldr	r0, [pc, #132]	; (8004df8 <UTILS_Dma2d_Memcpy+0xb8>)

  /*##-2- DMA2D Callbacks Configuration ######################################*/
  hlcd_dma2d.XferCpltCallback = NULL;

  /*##-3- Foreground Configuration ###########################################*/
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8004d72:	2601      	movs	r6, #1
  HAL_DMA2D_DeInit(&hlcd_dma2d);
 8004d74:	f00a fd12 	bl	800f79c <HAL_DMA2D_DeInit>
  hlcd_dma2d.Init.Mode = pfc ? DMA2D_M2M_PFC : DMA2D_M2M;
 8004d78:	2c00      	cmp	r4, #0
  hlcd_dma2d.Init.OutputOffset = rowStride - xsize;
 8004d7a:	ebaa 0108 	sub.w	r1, sl, r8
  hlcd_dma2d.Init.Mode = pfc ? DMA2D_M2M_PFC : DMA2D_M2M;
 8004d7e:	4c1e      	ldr	r4, [pc, #120]	; (8004df8 <UTILS_Dma2d_Memcpy+0xb8>)
 8004d80:	bf0c      	ite	eq
 8004d82:	2200      	moveq	r2, #0
 8004d84:	f44f 3280 	movne.w	r2, #65536	; 0x10000
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
  hlcd_dma2d.LayerCfg[1].InputColorMode = input_color_format;
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
  hlcd_dma2d.LayerCfg[1].RedBlueSwap = red_blue_swap ? DMA2D_RB_SWAP : DMA2D_RB_REGULAR;
 8004d88:	f119 0c00 	adds.w	ip, r9, #0
  hlcd_dma2d.XferCpltCallback = NULL;
 8004d8c:	f04f 0300 	mov.w	r3, #0
  hlcd_dma2d.Init.OutputOffset = rowStride - xsize;
 8004d90:	60e1      	str	r1, [r4, #12]
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8004d92:	f04f 01ff 	mov.w	r1, #255	; 0xff
  hlcd_dma2d.LayerCfg[1].RedBlueSwap = red_blue_swap ? DMA2D_RB_SWAP : DMA2D_RB_REGULAR;
 8004d96:	bf18      	it	ne
 8004d98:	f04f 0c01 	movne.w	ip, #1
  hlcd_dma2d.LayerCfg[1].InputColorMode = input_color_format;
 8004d9c:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48

  /* DMA2D Initialization */
  if (HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8004da0:	4620      	mov	r0, r4
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8004da2:	6521      	str	r1, [r4, #80]	; 0x50
  hlcd_dma2d.LayerCfg[1].RedBlueSwap = red_blue_swap ? DMA2D_RB_SWAP : DMA2D_RB_REGULAR;
 8004da4:	f8c4 c058 	str.w	ip, [r4, #88]	; 0x58
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 8004da8:	6463      	str	r3, [r4, #68]	; 0x44
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8004daa:	64e6      	str	r6, [r4, #76]	; 0x4c
  hlcd_dma2d.Init.ColorMode = output_color_format;
 8004dac:	60a5      	str	r5, [r4, #8]
  hlcd_dma2d.Init.Mode = pfc ? DMA2D_M2M_PFC : DMA2D_M2M;
 8004dae:	6062      	str	r2, [r4, #4]
  hlcd_dma2d.XferCpltCallback = NULL;
 8004db0:	6223      	str	r3, [r4, #32]
  if (HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8004db2:	f00a fcaf 	bl	800f714 <HAL_DMA2D_Init>
 8004db6:	b120      	cbz	r0, 8004dc2 <UTILS_Dma2d_Memcpy+0x82>
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 30);
      }
    }
  }
}
 8004db8:	b007      	add	sp, #28
 8004dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
 8004dbe:	2700      	movs	r7, #0
 8004dc0:	e7d6      	b.n	8004d70 <UTILS_Dma2d_Memcpy+0x30>
    if (HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8004dc2:	4631      	mov	r1, r6
 8004dc4:	4620      	mov	r0, r4
 8004dc6:	f00a feef 	bl	800fba8 <HAL_DMA2D_ConfigLayer>
 8004dca:	2800      	cmp	r0, #0
 8004dcc:	d1f4      	bne.n	8004db8 <UTILS_Dma2d_Memcpy+0x78>
      if (HAL_DMA2D_Start(&hlcd_dma2d, source, destination, xsize, ysize) == HAL_OK)
 8004dce:	9b05      	ldr	r3, [sp, #20]
 8004dd0:	4620      	mov	r0, r4
 8004dd2:	9a04      	ldr	r2, [sp, #16]
 8004dd4:	9300      	str	r3, [sp, #0]
 8004dd6:	4643      	mov	r3, r8
 8004dd8:	443a      	add	r2, r7
 8004dda:	9903      	ldr	r1, [sp, #12]
 8004ddc:	f00a fd62 	bl	800f8a4 <HAL_DMA2D_Start>
 8004de0:	2800      	cmp	r0, #0
 8004de2:	d1e9      	bne.n	8004db8 <UTILS_Dma2d_Memcpy+0x78>
        HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 30);
 8004de4:	4620      	mov	r0, r4
 8004de6:	211e      	movs	r1, #30
}
 8004de8:	b007      	add	sp, #28
 8004dea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 30);
 8004dee:	f00a bdb3 	b.w	800f958 <HAL_DMA2D_PollForTransfer>
 8004df2:	bf00      	nop
 8004df4:	08029228 	.word	0x08029228
 8004df8:	2400a36c 	.word	0x2400a36c

08004dfc <UTILS_Joystick_Check>:
void UTILS_Joystick_Check(UtilsContext_TypeDef *Utils_Context_Ptr)
{
  JoystickContext_TypeDef* Joystick_Ctx_Ptr=&Utils_Context_Ptr->JoystickContext;
  
  /* Get the joystick state. */
  Joystick_Ctx_Ptr->joyState = (JOYPin_TypeDef) BSP_JOY_GetState(JOY1, 0);
 8004dfc:	2100      	movs	r1, #0
{
 8004dfe:	b538      	push	{r3, r4, r5, lr}
 8004e00:	4604      	mov	r4, r0
  Joystick_Ctx_Ptr->joyState = (JOYPin_TypeDef) BSP_JOY_GetState(JOY1, 0);
 8004e02:	4608      	mov	r0, r1
 8004e04:	f006 f850 	bl	800aea8 <BSP_JOY_GetState>
 8004e08:	b2c0      	uxtb	r0, r0

  switch (Joystick_Ctx_Ptr->joyState)
 8004e0a:	1e83      	subs	r3, r0, #2
  Joystick_Ctx_Ptr->joyState = (JOYPin_TypeDef) BSP_JOY_GetState(JOY1, 0);
 8004e0c:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
  switch (Joystick_Ctx_Ptr->joyState)
 8004e10:	2b0e      	cmp	r3, #14
 8004e12:	d82e      	bhi.n	8004e72 <UTILS_Joystick_Check+0x76>
 8004e14:	e8df f003 	tbb	[pc, r3]
 8004e18:	2d272d21 	.word	0x2d272d21
 8004e1c:	2d1b2d2d 	.word	0x2d1b2d2d
 8004e20:	2d2d2d2d 	.word	0x2d2d2d2d
 8004e24:	2d2d      	.short	0x2d2d
 8004e26:	08          	.byte	0x08
 8004e27:	00          	.byte	0x00
  {
    case JOY_UP:
      if (Joystick_Ctx_Ptr->lcdBrightness < LCD_BRIGHTNESS_MAX)
 8004e28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e2a:	2b63      	cmp	r3, #99	; 0x63
 8004e2c:	dc3c      	bgt.n	8004ea8 <UTILS_Joystick_Check+0xac>
      {
        Joystick_Ctx_Ptr->lcdBrightness += LCD_BRIGHTNESS_STEP;
 8004e2e:	330a      	adds	r3, #10
 8004e30:	6363      	str	r3, [r4, #52]	; 0x34
  }

  if ((Joystick_Ctx_Ptr->joyState == JOY_UP) || (Joystick_Ctx_Ptr->joyState == JOY_DOWN) || (Joystick_Ctx_Ptr->joyState == JOY_LEFT) || (Joystick_Ctx_Ptr->joyState == JOY_RIGHT))
  {
    /* Execute the change. */
    BSP_CAMERA_SetBrightness(0, Joystick_Ctx_Ptr->camBrightness);
 8004e32:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004e34:	2000      	movs	r0, #0
 8004e36:	f007 fba5 	bl	800c584 <BSP_CAMERA_SetBrightness>
    BSP_CAMERA_SetContrast(0, Joystick_Ctx_Ptr->camContrast);
 8004e3a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004e3c:	2000      	movs	r0, #0
 8004e3e:	f007 fbc5 	bl	800c5cc <BSP_CAMERA_SetContrast>
    BSP_LCD_SetBrightness(0, Joystick_Ctx_Ptr->lcdBrightness);
 8004e42:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e44:	2000      	movs	r0, #0
    /* Restore the default values. */
    BSP_CAMERA_SetBrightness(0, Joystick_Ctx_Ptr->camBrightness);
    BSP_CAMERA_SetContrast(0, Joystick_Ctx_Ptr->camContrast);
    BSP_LCD_SetBrightness(0, Joystick_Ctx_Ptr->lcdBrightness);
  }
}
 8004e46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    BSP_LCD_SetBrightness(0, Joystick_Ctx_Ptr->lcdBrightness);
 8004e4a:	f008 b9b7 	b.w	800d1bc <BSP_LCD_SetBrightness>
      if (Joystick_Ctx_Ptr->camContrast < CAMERA_CONTRAST_MAX)
 8004e4e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004e50:	2b03      	cmp	r3, #3
 8004e52:	dc29      	bgt.n	8004ea8 <UTILS_Joystick_Check+0xac>
        Joystick_Ctx_Ptr->camContrast++;
 8004e54:	3301      	adds	r3, #1
 8004e56:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e58:	e7eb      	b.n	8004e32 <UTILS_Joystick_Check+0x36>
      if (Joystick_Ctx_Ptr->lcdBrightness > LCD_BRIGHTNESS_MIN)
 8004e5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	dd23      	ble.n	8004ea8 <UTILS_Joystick_Check+0xac>
        Joystick_Ctx_Ptr->lcdBrightness -= LCD_BRIGHTNESS_STEP;
 8004e60:	3b0a      	subs	r3, #10
 8004e62:	6363      	str	r3, [r4, #52]	; 0x34
 8004e64:	e7e5      	b.n	8004e32 <UTILS_Joystick_Check+0x36>
      if (Joystick_Ctx_Ptr->camContrast > CAMERA_CONTRAST_MIN)
 8004e66:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004e68:	1cda      	adds	r2, r3, #3
 8004e6a:	db1d      	blt.n	8004ea8 <UTILS_Joystick_Check+0xac>
        Joystick_Ctx_Ptr->camContrast--;
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e70:	e7df      	b.n	8004e32 <UTILS_Joystick_Check+0x36>
  if ((Joystick_Ctx_Ptr->joyState == JOY_UP) || (Joystick_Ctx_Ptr->joyState == JOY_DOWN) || (Joystick_Ctx_Ptr->joyState == JOY_LEFT) || (Joystick_Ctx_Ptr->joyState == JOY_RIGHT))
 8004e72:	2810      	cmp	r0, #16
 8004e74:	d81b      	bhi.n	8004eae <UTILS_Joystick_Check+0xb2>
 8004e76:	4b0e      	ldr	r3, [pc, #56]	; (8004eb0 <UTILS_Joystick_Check+0xb4>)
 8004e78:	40c3      	lsrs	r3, r0
 8004e7a:	07db      	lsls	r3, r3, #31
 8004e7c:	d4d9      	bmi.n	8004e32 <UTILS_Joystick_Check+0x36>
  else if (Joystick_Ctx_Ptr->joyState == JOY_SEL)
 8004e7e:	2801      	cmp	r0, #1
 8004e80:	d115      	bne.n	8004eae <UTILS_Joystick_Check+0xb2>
    Joystick_Ctx_Ptr->camContrast = 0;     /* Mid-level camera contrast. */
 8004e82:	2500      	movs	r5, #0
    Joystick_Ctx_Ptr->lcdBrightness = LCD_BRIGHTNESS_MID;       /* Mid-level LCD brightness. */
 8004e84:	2332      	movs	r3, #50	; 0x32
    BSP_CAMERA_SetBrightness(0, Joystick_Ctx_Ptr->camBrightness);
 8004e86:	4629      	mov	r1, r5
    Joystick_Ctx_Ptr->lcdBrightness = LCD_BRIGHTNESS_MID;       /* Mid-level LCD brightness. */
 8004e88:	6363      	str	r3, [r4, #52]	; 0x34
    Joystick_Ctx_Ptr->camContrast = 0;     /* Mid-level camera contrast. */
 8004e8a:	62e5      	str	r5, [r4, #44]	; 0x2c
    BSP_CAMERA_SetBrightness(0, Joystick_Ctx_Ptr->camBrightness);
 8004e8c:	4628      	mov	r0, r5
    Joystick_Ctx_Ptr->camBrightness = 0; /* Mid-level camera brightness. */
 8004e8e:	6325      	str	r5, [r4, #48]	; 0x30
    BSP_CAMERA_SetBrightness(0, Joystick_Ctx_Ptr->camBrightness);
 8004e90:	f007 fb78 	bl	800c584 <BSP_CAMERA_SetBrightness>
    BSP_CAMERA_SetContrast(0, Joystick_Ctx_Ptr->camContrast);
 8004e94:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004e96:	4628      	mov	r0, r5
 8004e98:	f007 fb98 	bl	800c5cc <BSP_CAMERA_SetContrast>
    BSP_LCD_SetBrightness(0, Joystick_Ctx_Ptr->lcdBrightness);
 8004e9c:	4628      	mov	r0, r5
 8004e9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
}
 8004ea0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    BSP_LCD_SetBrightness(0, Joystick_Ctx_Ptr->lcdBrightness);
 8004ea4:	f008 b98a 	b.w	800d1bc <BSP_LCD_SetBrightness>
        Joystick_Ctx_Ptr->joyState = JOY_NONE; /* Cancel LCD brightness change. */
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
 8004eae:	bd38      	pop	{r3, r4, r5, pc}
 8004eb0:	00010114 	.word	0x00010114

08004eb4 <UTILS_DCache_Coherency_Maintenance>:
 * @retval None
 */
void UTILS_DCache_Coherency_Maintenance(uint32_t *mem_addr, int32_t mem_size, DCache_Coherency_TypeDef Maintenance_operation)
{
  /*Check alignement on 32-bytes for the memory adress and check that the memory size is multiple of 32-bytes*/
  if(((uint32_t)mem_addr%32 != 0) || (mem_size%32 != 0))
 8004eb4:	06c3      	lsls	r3, r0, #27
 8004eb6:	d106      	bne.n	8004ec6 <UTILS_DCache_Coherency_Maintenance+0x12>
 8004eb8:	06cb      	lsls	r3, r1, #27
 8004eba:	d104      	bne.n	8004ec6 <UTILS_DCache_Coherency_Maintenance+0x12>
    while(1);
  
  if(Maintenance_operation == INVALIDATE)
 8004ebc:	2a01      	cmp	r2, #1
 8004ebe:	d018      	beq.n	8004ef2 <UTILS_DCache_Coherency_Maintenance+0x3e>
  {
    SCB_InvalidateDCache_by_Addr((void*)mem_addr, mem_size);
  }
  else if(Maintenance_operation == CLEAN)
 8004ec0:	2a02      	cmp	r2, #2
 8004ec2:	d001      	beq.n	8004ec8 <UTILS_DCache_Coherency_Maintenance+0x14>
  {
    SCB_CleanDCache_by_Addr((void *)mem_addr, mem_size);
  }
}
 8004ec4:	4770      	bx	lr
 8004ec6:	e7fe      	b.n	8004ec6 <UTILS_DCache_Coherency_Maintenance+0x12>
  __ASM volatile ("dsb 0xF":::"memory");
 8004ec8:	f3bf 8f4f 	dsb	sy
 8004ecc:	2900      	cmp	r1, #0
 8004ece:	dd0b      	ble.n	8004ee8 <UTILS_DCache_Coherency_Maintenance+0x34>
 8004ed0:	1e4b      	subs	r3, r1, #1
 8004ed2:	f100 0220 	add.w	r2, r0, #32
      SCB->DCCMVAC = op_addr;
 8004ed6:	490f      	ldr	r1, [pc, #60]	; (8004f14 <UTILS_DCache_Coherency_Maintenance+0x60>)
 8004ed8:	f023 031f 	bic.w	r3, r3, #31
 8004edc:	4413      	add	r3, r2
 8004ede:	f8c1 0268 	str.w	r0, [r1, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 8004ee2:	3020      	adds	r0, #32
    while (op_size > 0) {
 8004ee4:	4298      	cmp	r0, r3
 8004ee6:	d1fa      	bne.n	8004ede <UTILS_DCache_Coherency_Maintenance+0x2a>
 8004ee8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004eec:	f3bf 8f6f 	isb	sy
 8004ef0:	e7e8      	b.n	8004ec4 <UTILS_DCache_Coherency_Maintenance+0x10>
  __ASM volatile ("dsb 0xF":::"memory");
 8004ef2:	f3bf 8f4f 	dsb	sy
    while (op_size > 0) {
 8004ef6:	2900      	cmp	r1, #0
 8004ef8:	ddf6      	ble.n	8004ee8 <UTILS_DCache_Coherency_Maintenance+0x34>
 8004efa:	1e4b      	subs	r3, r1, #1
 8004efc:	f100 0220 	add.w	r2, r0, #32
      SCB->DCIMVAC = op_addr;
 8004f00:	4904      	ldr	r1, [pc, #16]	; (8004f14 <UTILS_DCache_Coherency_Maintenance+0x60>)
 8004f02:	f023 031f 	bic.w	r3, r3, #31
 8004f06:	4413      	add	r3, r2
 8004f08:	f8c1 025c 	str.w	r0, [r1, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8004f0c:	3020      	adds	r0, #32
    while (op_size > 0) {
 8004f0e:	4298      	cmp	r0, r3
 8004f10:	d1fa      	bne.n	8004f08 <UTILS_DCache_Coherency_Maintenance+0x54>
 8004f12:	e7e9      	b.n	8004ee8 <UTILS_DCache_Coherency_Maintenance+0x34>
 8004f14:	e000ed00 	.word	0xe000ed00

08004f18 <UTILS_Bubblesort>:
void UTILS_Bubblesort(float *prob, int *classes, int size)
{
  float p;
  int c;

  for (int i = 0; i < size; i++)
 8004f18:	2a00      	cmp	r2, #0
 8004f1a:	dd22      	ble.n	8004f62 <UTILS_Bubblesort+0x4a>
{
 8004f1c:	b4f0      	push	{r4, r5, r6, r7}
 8004f1e:	1f04      	subs	r4, r0, #4
 8004f20:	1e57      	subs	r7, r2, #1
 8004f22:	eb04 0482 	add.w	r4, r4, r2, lsl #2
  {
    for (int ii = 0; ii < size - i - 1; ii++)
 8004f26:	b1b7      	cbz	r7, 8004f56 <UTILS_Bubblesort+0x3e>
 8004f28:	460a      	mov	r2, r1
 8004f2a:	4603      	mov	r3, r0
    {
      if (prob[ii] < prob[ii + 1])
 8004f2c:	edd3 7a00 	vldr	s15, [r3]
 8004f30:	ed93 7a01 	vldr	s14, [r3, #4]
 8004f34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f3c:	d507      	bpl.n	8004f4e <UTILS_Bubblesort+0x36>
      {
        p = prob[ii];
        prob[ii] = prob[ii + 1];
        prob[ii + 1] = p;
        c = classes[ii];
        classes[ii] = classes[ii + 1];
 8004f3e:	e9d2 6500 	ldrd	r6, r5, [r2]
        prob[ii] = prob[ii + 1];
 8004f42:	ed83 7a00 	vstr	s14, [r3]
        prob[ii + 1] = p;
 8004f46:	edc3 7a01 	vstr	s15, [r3, #4]
        classes[ii] = classes[ii + 1];
 8004f4a:	e9c2 5600 	strd	r5, r6, [r2]
 8004f4e:	3304      	adds	r3, #4
 8004f50:	3204      	adds	r2, #4
    for (int ii = 0; ii < size - i - 1; ii++)
 8004f52:	42a3      	cmp	r3, r4
 8004f54:	d1ea      	bne.n	8004f2c <UTILS_Bubblesort+0x14>
 8004f56:	3f01      	subs	r7, #1
 8004f58:	3c04      	subs	r4, #4
  for (int i = 0; i < size; i++)
 8004f5a:	1c7b      	adds	r3, r7, #1
 8004f5c:	d1e3      	bne.n	8004f26 <UTILS_Bubblesort+0xe>
        classes[ii + 1] = c;
      }
    }
  }
}
 8004f5e:	bcf0      	pop	{r4, r5, r6, r7}
 8004f60:	4770      	bx	lr
 8004f62:	4770      	bx	lr

08004f64 <UTILS_Compute_ExecutionTiming>:
/**
 * @brief Compute the execution timing  of the various operation
 * @param UtilsContext_Ptr pointer to utilities context
 */
void UTILS_Compute_ExecutionTiming(UtilsContext_TypeDef *UtilsContext_Ptr)
{
 8004f64:	b430      	push	{r4, r5}
  UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE] = UtilsContext_Ptr->ExecTimingContext.tcapturestop - UtilsContext_Ptr->ExecTimingContext.tcapturestart;
  
#if MEMORY_SCHEME == FULL_INTERNAL_MEM_OPT  
  UtilsContext_Ptr->ExecTimingContext.Tfps =UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PFC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PVC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_RESIZE] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE];
#elif MEMORY_SCHEME != FULL_INTERNAL_MEM_OPT 
  if((UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PFC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE]) > UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE])
 8004f66:	6901      	ldr	r1, [r0, #16]
 8004f68:	6882      	ldr	r2, [r0, #8]
  UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE] = UtilsContext_Ptr->ExecTimingContext.tcapturestop - UtilsContext_Ptr->ExecTimingContext.tcapturestart;
 8004f6a:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
  if((UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PFC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE]) > UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE])
 8004f6e:	440a      	add	r2, r1
  UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE] = UtilsContext_Ptr->ExecTimingContext.tcapturestop - UtilsContext_Ptr->ExecTimingContext.tcapturestart;
 8004f70:	1b1b      	subs	r3, r3, r4
  AppContext_TypeDef *App_Cxt_Ptr=UtilsContext_Ptr->AppCtxPtr;
 8004f72:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if((UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PFC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE]) > UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE])
 8004f74:	4293      	cmp	r3, r2
  UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE] = UtilsContext_Ptr->ExecTimingContext.tcapturestop - UtilsContext_Ptr->ExecTimingContext.tcapturestart;
 8004f76:	6003      	str	r3, [r0, #0]
  if((UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PFC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE]) > UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE])
 8004f78:	d203      	bcs.n	8004f82 <UTILS_Compute_ExecutionTiming+0x1e>
    UtilsContext_Ptr->ExecTimingContext.Tfps = UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PFC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_PVC] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_RESIZE] + UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE];
 8004f7a:	68c3      	ldr	r3, [r0, #12]
 8004f7c:	6845      	ldr	r5, [r0, #4]
 8004f7e:	442b      	add	r3, r5
 8004f80:	4413      	add	r3, r2
 8004f82:	6143      	str	r3, [r0, #20]
  else
    UtilsContext_Ptr->ExecTimingContext.Tfps =  UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_CAPTURE];
#endif

  App_Cxt_Ptr->nn_inference_time=UtilsContext_Ptr->ExecTimingContext.operation_exec_time[FRAME_INFERENCE];
 8004f84:	60a1      	str	r1, [r4, #8]
}
 8004f86:	bc30      	pop	{r4, r5}
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop

08004f8c <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
void Error_Handler(void)
{
 8004f8c:	b508      	push	{r3, lr}
  BSP_LED_Off(LED_GREEN);
 8004f8e:	2000      	movs	r0, #0
 8004f90:	f005 fe86 	bl	800aca0 <BSP_LED_Off>
  BSP_LED_Off(LED_ORANGE);
 8004f94:	2001      	movs	r0, #1
 8004f96:	f005 fe83 	bl	800aca0 <BSP_LED_Off>
  BSP_LED_Off(LED_RED);
 8004f9a:	2002      	movs	r0, #2
 8004f9c:	f005 fe80 	bl	800aca0 <BSP_LED_Off>
  BSP_LED_Off(LED_BLUE);
 8004fa0:	2003      	movs	r0, #3
 8004fa2:	f005 fe7d 	bl	800aca0 <BSP_LED_Off>
 8004fa6:	e7fe      	b.n	8004fa6 <Error_Handler+0x1a>

08004fa8 <main>:
{
 8004fa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004fac:	b09f      	sub	sp, #124	; 0x7c
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8004fae:	f04f 4450 	mov.w	r4, #3489660928	; 0xd0000000
  HAL_MPU_Disable();
 8004fb2:	f008 fd7f 	bl	800dab4 <HAL_MPU_Disable>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8004fb6:	2101      	movs	r1, #1
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8004fb8:	4a99      	ldr	r2, [pc, #612]	; (8005220 <main+0x278>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8004fba:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8004fbc:	4b99      	ldr	r3, [pc, #612]	; (8005224 <main+0x27c>)
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8004fbe:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8004fc2:	940c      	str	r4, [sp, #48]	; 0x30
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8004fc4:	e9cd 230d 	strd	r2, r3, [sp, #52]	; 0x34
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8004fc8:	f008 fd96 	bl	800daf8 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8004fcc:	2004      	movs	r0, #4
 8004fce:	f008 fd81 	bl	800dad4 <HAL_MPU_Enable>
 8004fd2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004fd6:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8004fda:	4893      	ldr	r0, [pc, #588]	; (8005228 <main+0x280>)
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f8c0 2250 	str.w	r2, [r0, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8004fe2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004fe6:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8004fea:	6943      	ldr	r3, [r0, #20]
 8004fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ff0:	6143      	str	r3, [r0, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8004ff2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004ff6:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8004ffa:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8004ffe:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8005002:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005006:	f643 7ce0 	movw	ip, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800500a:	f3c3 06c9 	ubfx	r6, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800500e:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8005012:	07b7      	lsls	r7, r6, #30
 8005014:	015c      	lsls	r4, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005016:	ea04 050c 	and.w	r5, r4, ip
 800501a:	4639      	mov	r1, r7
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800501c:	4632      	mov	r2, r6
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800501e:	ea45 0301 	orr.w	r3, r5, r1
      } while (ways-- != 0U);
 8005022:	3a01      	subs	r2, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005024:	f101 4140 	add.w	r1, r1, #3221225472	; 0xc0000000
 8005028:	f8c0 3260 	str.w	r3, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 800502c:	1c53      	adds	r3, r2, #1
 800502e:	d1f6      	bne.n	800501e <main+0x76>
 8005030:	3c20      	subs	r4, #32
    } while(sets-- != 0U);
 8005032:	f114 0f20 	cmn.w	r4, #32
 8005036:	d1ee      	bne.n	8005016 <main+0x6e>
 8005038:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800503c:	6943      	ldr	r3, [r0, #20]
 800503e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005042:	6143      	str	r3, [r0, #20]
 8005044:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005048:	f3bf 8f6f 	isb	sy
  HAL_Init();
 800504c:	f008 fc4a 	bl	800d8e4 <HAL_Init>
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8005050:	2004      	movs	r0, #4
 8005052:	f00c fb5b 	bl	801170c <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005056:	4a75      	ldr	r2, [pc, #468]	; (800522c <main+0x284>)
 8005058:	2300      	movs	r3, #0
 800505a:	9301      	str	r3, [sp, #4]
 800505c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800505e:	4b74      	ldr	r3, [pc, #464]	; (8005230 <main+0x288>)
 8005060:	f021 0101 	bic.w	r1, r1, #1
  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8005064:	4618      	mov	r0, r3
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005066:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005068:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800506a:	f002 0201 	and.w	r2, r2, #1
 800506e:	9201      	str	r2, [sp, #4]
 8005070:	699a      	ldr	r2, [r3, #24]
 8005072:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8005076:	619a      	str	r2, [r3, #24]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800507e:	9301      	str	r3, [sp, #4]
 8005080:	9b01      	ldr	r3, [sp, #4]
  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8005082:	6983      	ldr	r3, [r0, #24]
 8005084:	049b      	lsls	r3, r3, #18
 8005086:	d5fc      	bpl.n	8005082 <main+0xda>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005088:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 800508c:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800508e:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005090:	2701      	movs	r7, #1
  RCC_OscInitStruct.PLL.PLLM = 5;
 8005092:	2605      	movs	r6, #5
  RCC_OscInitStruct.PLL.PLLN = 160;
 8005094:	21a0      	movs	r1, #160	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005096:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8005098:	2508      	movs	r5, #8
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800509a:	2204      	movs	r2, #4
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800509c:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800509e:	970b      	str	r7, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 80050a0:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 80050a2:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = 2;
 80050a4:	9418      	str	r4, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLR = 2;
 80050a6:	941a      	str	r4, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80050a8:	9219      	str	r2, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80050aa:	951b      	str	r5, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80050ac:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80050b0:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 80050b4:	e9cd 6116 	strd	r6, r1, [sp, #88]	; 0x58
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80050b8:	f00c feac 	bl	8011e14 <HAL_RCC_OscConfig>
  if (ret != HAL_OK)
 80050bc:	2800      	cmp	r0, #0
 80050be:	d14f      	bne.n	8005160 <main+0x1b8>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 |
 80050c0:	223f      	movs	r2, #63	; 0x3f
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80050c2:	2640      	movs	r6, #64	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80050c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80050c8:	f04f 0803 	mov.w	r8, #3
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80050cc:	9005      	str	r0, [sp, #20]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 80050ce:	4621      	mov	r1, r4
 80050d0:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80050d2:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 |
 80050d4:	9203      	str	r2, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80050d6:	f8cd 8010 	str.w	r8, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80050da:	e9cd 6607 	strd	r6, r6, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80050de:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 80050e2:	f00d fa21 	bl	8012528 <HAL_RCC_ClockConfig>
  if (ret != HAL_OK)
 80050e6:	4681      	mov	r9, r0
 80050e8:	2800      	cmp	r0, #0
 80050ea:	d139      	bne.n	8005160 <main+0x1b8>
  __HAL_RCC_CSI_ENABLE();
 80050ec:	4c51      	ldr	r4, [pc, #324]	; (8005234 <main+0x28c>)
  APP_Init(&App_Context);
 80050ee:	4d52      	ldr	r5, [pc, #328]	; (8005238 <main+0x290>)
  __HAL_RCC_CSI_ENABLE();
 80050f0:	6823      	ldr	r3, [r4, #0]
 80050f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050f6:	6023      	str	r3, [r4, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050f8:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 80050fc:	f043 0302 	orr.w	r3, r3, #2
 8005100:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8005104:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8005108:	f003 0302 	and.w	r3, r3, #2
 800510c:	9302      	str	r3, [sp, #8]
 800510e:	9b02      	ldr	r3, [sp, #8]
  HAL_EnableCompensationCell();
 8005110:	f008 fc44 	bl	800d99c <HAL_EnableCompensationCell>
  __HAL_RCC_CRC_CLK_ENABLE();
 8005114:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  APP_Init(&App_Context);
 8005118:	4628      	mov	r0, r5
  __HAL_RCC_CRC_CLK_ENABLE();
 800511a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800511e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8005122:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8005126:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800512a:	9303      	str	r3, [sp, #12]
 800512c:	9b03      	ldr	r3, [sp, #12]
  APP_Init(&App_Context);
 800512e:	f7fb ffbf 	bl	80010b0 <APP_Init>
  TEST_Init(App_Context.Test_ContextPtr);
 8005132:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8005134:	f7fd ff06 	bl	8002f44 <TEST_Init>
  UTILS_Init(App_Context.Utils_ContextPtr);
 8005138:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 800513a:	f7ff fddb 	bl	8004cf4 <UTILS_Init>
  DISPLAY_Init(App_Context.Display_ContextPtr);
 800513e:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8005140:	f7fc fc8e 	bl	8001a60 <DISPLAY_Init>
  AI_Init(App_Context.Ai_ContextPtr);
 8005144:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8005146:	f7fb fdb3 	bl	8000cb0 <AI_Init>
   init.InterfaceMode=MT25TL01G_QPI_MODE;
 800514a:	4b3c      	ldr	r3, [pc, #240]	; (800523c <main+0x294>)
   if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 800514c:	4648      	mov	r0, r9
 800514e:	4619      	mov	r1, r3
   init.InterfaceMode=MT25TL01G_QPI_MODE;
 8005150:	f883 8000 	strb.w	r8, [r3]
   init.TransferRate= MT25TL01G_DTR_TRANSFER ;
 8005154:	705f      	strb	r7, [r3, #1]
   init.DualFlashMode= MT25TL01G_DUALFLASH_ENABLE;
 8005156:	709e      	strb	r6, [r3, #2]
   if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 8005158:	f008 f85c 	bl	800d214 <BSP_QSPI_Init>
 800515c:	b110      	cbz	r0, 8005164 <main+0x1bc>
 800515e:	e7fe      	b.n	800515e <main+0x1b6>
    Error_Handler();
 8005160:	f7ff ff14 	bl	8004f8c <Error_Handler>
     if(BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8005164:	f008 fa62 	bl	800d62c <BSP_QSPI_EnableMemoryMappedMode>
 8005168:	b100      	cbz	r0, 800516c <main+0x1c4>
 800516a:	e7fe      	b.n	800516a <main+0x1c2>
  int is_menu = DISPLAY_WelcomeScreen(App_Context.Display_ContextPtr);
 800516c:	6b68      	ldr	r0, [r5, #52]	; 0x34
    APP_GetNextReadyFrame(&App_Context);
 800516e:	462c      	mov	r4, r5
  int is_menu = DISPLAY_WelcomeScreen(App_Context.Display_ContextPtr);
 8005170:	f7fc fcc8 	bl	8001b04 <DISPLAY_WelcomeScreen>
 8005174:	4607      	mov	r7, r0
 8005176:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8005244 <main+0x29c>
	 AudioPlayInit->SampleRate = 96000 ;
 800517a:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8005248 <main+0x2a0>
    UTIL_LCD_SetFont(&Font24);
 800517e:	4e30      	ldr	r6, [pc, #192]	; (8005240 <main+0x298>)
 8005180:	6be8      	ldr	r0, [r5, #60]	; 0x3c
  if ((is_menu != 0) || (App_Context.Test_ContextPtr->UartContext.uart_cmd_ongoing == 1))
 8005182:	bb6f      	cbnz	r7, 80051e0 <main+0x238>
 8005184:	f8d0 3560 	ldr.w	r3, [r0, #1376]	; 0x560
 8005188:	2b01      	cmp	r3, #1
 800518a:	d029      	beq.n	80051e0 <main+0x238>
  if(App_Context.Operating_Mode == NOMINAL || App_Context.Operating_Mode == CAPTURE || (App_Context.Operating_Mode == DUMP && App_Context.Test_ContextPtr->DumpContext.Dump_FrameSource == CAMERA_LIVE))
 800518c:	782b      	ldrb	r3, [r5, #0]
 800518e:	2b01      	cmp	r3, #1
 8005190:	d02b      	beq.n	80051ea <main+0x242>
 8005192:	2b04      	cmp	r3, #4
 8005194:	d029      	beq.n	80051ea <main+0x242>
 8005196:	2b03      	cmp	r3, #3
 8005198:	d115      	bne.n	80051c6 <main+0x21e>
 800519a:	e03b      	b.n	8005214 <main+0x26c>
    UTILS_Joystick_Check(App_Context.Utils_ContextPtr);
 800519c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 800519e:	f7ff fe2d 	bl	8004dfc <UTILS_Joystick_Check>
    TEST_CmdIf_Check(App_Context.Test_ContextPtr);          
 80051a2:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 80051a4:	f7fd ff88 	bl	80030b8 <TEST_CmdIf_Check>
    APP_GetNextReadyFrame(&App_Context);
 80051a8:	4620      	mov	r0, r4
 80051aa:	f7fb ffcb 	bl	8001144 <APP_GetNextReadyFrame>
    APP_StartNewFrameAcquisition(&App_Context);
 80051ae:	4620      	mov	r0, r4
 80051b0:	f7fc f8d2 	bl	8001358 <APP_StartNewFrameAcquisition>
    APP_FramePreprocess(&App_Context);
 80051b4:	4620      	mov	r0, r4
 80051b6:	f7fc f8eb 	bl	8001390 <APP_FramePreprocess>
    APP_NetworkInference(&App_Context);
 80051ba:	4620      	mov	r0, r4
 80051bc:	f7fc f8ea 	bl	8001394 <APP_NetworkInference>
    APP_Postprocess(&App_Context);
 80051c0:	4620      	mov	r0, r4
 80051c2:	f7fc f919 	bl	80013f8 <APP_Postprocess>
  while(App_Context.run_loop)
 80051c6:	686b      	ldr	r3, [r5, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d1e7      	bne.n	800519c <main+0x1f4>
    AI_Deinit();
 80051cc:	f7fb ff6e 	bl	80010ac <AI_Deinit>
    App_Context.run_loop = 1;
 80051d0:	2301      	movs	r3, #1
    UTIL_LCD_SetFont(&Font24);
 80051d2:	4630      	mov	r0, r6
    App_Context.run_loop = 1;
 80051d4:	606b      	str	r3, [r5, #4]
    UTIL_LCD_SetFont(&Font24);
 80051d6:	f018 f97f 	bl	801d4d8 <UTIL_LCD_SetFont>
 80051da:	6be8      	ldr	r0, [r5, #60]	; 0x3c
  if ((is_menu != 0) || (App_Context.Test_ContextPtr->UartContext.uart_cmd_ongoing == 1))
 80051dc:	2f00      	cmp	r7, #0
 80051de:	d0d1      	beq.n	8005184 <main+0x1dc>
   TEST_MainMenu(App_Context.Test_ContextPtr);
 80051e0:	f7fd ffd2 	bl	8003188 <TEST_MainMenu>
  if(App_Context.Operating_Mode == NOMINAL || App_Context.Operating_Mode == CAPTURE || (App_Context.Operating_Mode == DUMP && App_Context.Test_ContextPtr->DumpContext.Dump_FrameSource == CAMERA_LIVE))
 80051e4:	782b      	ldrb	r3, [r5, #0]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d1d3      	bne.n	8005192 <main+0x1ea>
    CAMERA_Init(App_Context.Camera_ContextPtr);
 80051ea:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80051ec:	f7fc fad6 	bl	800179c <CAMERA_Init>
	 AudioPlayInit->Device = AUDIO_OUT_DEVICE_HEADPHONE;
 80051f0:	f8d9 3000 	ldr.w	r3, [r9]
 80051f4:	2202      	movs	r2, #2
	__IO uint32_t uwVolume = 100;
 80051f6:	2164      	movs	r1, #100	; 0x64
	 AudioPlayInit->BitsPerSample = AUDIO_RESOLUTION_16B;
 80051f8:	2010      	movs	r0, #16
	__IO uint32_t uwVolume = 100;
 80051fa:	910b      	str	r1, [sp, #44]	; 0x2c
	 BSP_AUDIO_OUT_Init(0, AudioPlayInit);
 80051fc:	4619      	mov	r1, r3
	 AudioPlayInit->BitsPerSample = AUDIO_RESOLUTION_16B;
 80051fe:	6098      	str	r0, [r3, #8]
	 BSP_AUDIO_OUT_Init(0, AudioPlayInit);
 8005200:	2000      	movs	r0, #0
	 AudioPlayInit->SampleRate = 96000 ;
 8005202:	f8c3 8004 	str.w	r8, [r3, #4]
	 AudioPlayInit->Device = AUDIO_OUT_DEVICE_HEADPHONE;
 8005206:	601a      	str	r2, [r3, #0]
	 AudioPlayInit->ChannelsNbr = 2;
 8005208:	60da      	str	r2, [r3, #12]
	 AudioPlayInit->Volume = uwVolume;
 800520a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800520c:	611a      	str	r2, [r3, #16]
	 BSP_AUDIO_OUT_Init(0, AudioPlayInit);
 800520e:	f006 f929 	bl	800b464 <BSP_AUDIO_OUT_Init>
 8005212:	e7d8      	b.n	80051c6 <main+0x21e>
  if(App_Context.Operating_Mode == NOMINAL || App_Context.Operating_Mode == CAPTURE || (App_Context.Operating_Mode == DUMP && App_Context.Test_ContextPtr->DumpContext.Dump_FrameSource == CAMERA_LIVE))
 8005214:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8005216:	791b      	ldrb	r3, [r3, #4]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d1d4      	bne.n	80051c6 <main+0x21e>
 800521c:	e7e5      	b.n	80051ea <main+0x242>
 800521e:	bf00      	nop
 8005220:	03010018 	.word	0x03010018
 8005224:	01010000 	.word	0x01010000
 8005228:	e000ed00 	.word	0xe000ed00
 800522c:	58000400 	.word	0x58000400
 8005230:	58024800 	.word	0x58024800
 8005234:	58024400 	.word	0x58024400
 8005238:	240097d8 	.word	0x240097d8
 800523c:	2400a080 	.word	0x2400a080
 8005240:	24007408 	.word	0x24007408
 8005244:	2400a07c 	.word	0x2400a07c
 8005248:	00017700 	.word	0x00017700

0800524c <ai_network_get_info>:
/**  PUBLIC APIs SECTION  *****************************************************/

AI_API_ENTRY
ai_bool ai_network_get_info(
  ai_handle network, ai_network_report* report)
{
 800524c:	b530      	push	{r4, r5, lr}
 800524e:	460c      	mov	r4, r1
 8005250:	b09f      	sub	sp, #124	; 0x7c
 8005252:	4605      	mov	r5, r0
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 8005254:	f018 fce8 	bl	801dc28 <ai_platform_context_acquire>

  if ( report && net_ctx )
 8005258:	b36c      	cbz	r4, 80052b6 <ai_network_get_info+0x6a>
 800525a:	b360      	cbz	r0, 80052b6 <ai_network_get_info+0x6a>
  {
    ai_network_report r = {
 800525c:	2264      	movs	r2, #100	; 0x64
 800525e:	2100      	movs	r1, #0
 8005260:	a805      	add	r0, sp, #20
 8005262:	f020 ff9a 	bl	802619a <memset>
 8005266:	4b15      	ldr	r3, [pc, #84]	; (80052bc <ai_network_get_info+0x70>)
 8005268:	4915      	ldr	r1, [pc, #84]	; (80052c0 <ai_network_get_info+0x74>)
 800526a:	4a16      	ldr	r2, [pc, #88]	; (80052c4 <ai_network_get_info+0x78>)
 800526c:	9301      	str	r3, [sp, #4]
 800526e:	4b16      	ldr	r3, [pc, #88]	; (80052c8 <ai_network_get_info+0x7c>)
 8005270:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8005274:	9304      	str	r3, [sp, #16]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8005276:	f018 fb77 	bl	801d968 <ai_platform_runtime_get_revision>
    ai_network_report r = {
 800527a:	9005      	str	r0, [sp, #20]
 800527c:	f018 fbc2 	bl	801da04 <ai_platform_runtime_get_version>
 8005280:	2306      	movs	r3, #6
 8005282:	4a12      	ldr	r2, [pc, #72]	; (80052cc <ai_network_get_info+0x80>)
 8005284:	f88d 3020 	strb.w	r3, [sp, #32]
 8005288:	e9cd 0206 	strd	r0, r2, [sp, #24]
 800528c:	f018 fc08 	bl	801daa0 <ai_platform_api_get_version>
 8005290:	900a      	str	r0, [sp, #40]	; 0x28
 8005292:	f018 fc67 	bl	801db64 <ai_platform_interface_api_get_version>
 8005296:	4b0e      	ldr	r3, [pc, #56]	; (80052d0 <ai_network_get_info+0x84>)
 8005298:	900b      	str	r0, [sp, #44]	; 0x2c
      .params            = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 800529a:	a901      	add	r1, sp, #4
 800529c:	4628      	mov	r0, r5
    ai_network_report r = {
 800529e:	930c      	str	r3, [sp, #48]	; 0x30
    if (!ai_platform_api_get_network_report(network, &r)) return false;
 80052a0:	f018 fd14 	bl	801dccc <ai_platform_api_get_network_report>
 80052a4:	b140      	cbz	r0, 80052b8 <ai_network_get_info+0x6c>

    *report = r;
 80052a6:	a901      	add	r1, sp, #4
 80052a8:	4620      	mov	r0, r4
 80052aa:	2274      	movs	r2, #116	; 0x74
 80052ac:	f020 ff6a 	bl	8026184 <memcpy>
    return true;
 80052b0:	2001      	movs	r0, #1
  }

  return false;
}
 80052b2:	b01f      	add	sp, #124	; 0x7c
 80052b4:	bd30      	pop	{r4, r5, pc}
  return false;
 80052b6:	2000      	movs	r0, #0
}
 80052b8:	b01f      	add	sp, #124	; 0x7c
 80052ba:	bd30      	pop	{r4, r5, pc}
 80052bc:	0803aefc 	.word	0x0803aefc
 80052c0:	0803af04 	.word	0x0803af04
 80052c4:	0803af28 	.word	0x0803af28
 80052c8:	0803af44 	.word	0x0803af44
 80052cc:	08028f38 	.word	0x08028f38
 80052d0:	037dfa74 	.word	0x037dfa74

080052d4 <ai_network_create>:
}

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 80052d4:	b530      	push	{r4, r5, lr}
  return ai_platform_network_create(
 80052d6:	2500      	movs	r5, #0
{
 80052d8:	b083      	sub	sp, #12
  return ai_platform_network_create(
 80052da:	2404      	movs	r4, #4
 80052dc:	2301      	movs	r3, #1
 80052de:	4a03      	ldr	r2, [pc, #12]	; (80052ec <ai_network_create+0x18>)
 80052e0:	e9cd 4500 	strd	r4, r5, [sp]
 80052e4:	f018 ff8a 	bl	801e1fc <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 80052e8:	b003      	add	sp, #12
 80052ea:	bd30      	pop	{r4, r5, pc}
 80052ec:	24007164 	.word	0x24007164

080052f0 <ai_network_destroy>:

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
  return ai_platform_network_destroy(network);
 80052f0:	f019 b84a 	b.w	801e388 <ai_platform_network_destroy>

080052f4 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 80052f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052f8:	b087      	sub	sp, #28
 80052fa:	4604      	mov	r4, r0
 80052fc:	468b      	mov	fp, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 80052fe:	f019 f8d1 	bl	801e4a4 <ai_platform_network_init>
  if ( !net_ctx ) return false;
 8005302:	2800      	cmp	r0, #0
 8005304:	f001 830f 	beq.w	8006926 <ai_network_init+0x1632>
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8005308:	4dd3      	ldr	r5, [pc, #844]	; (8005658 <ai_network_init+0x364>)

  ai_bool ok = true;
  ok &= network_configure_weights(net_ctx, &params->params);
  ok &= network_configure_activations(net_ctx, &params->activations);

  ok &= ai_platform_network_post_init(network);
 800530a:	4620      	mov	r0, r4
    conv2d_3_weights_array.format |= AI_FMT_FLAG_CONST;
 800530c:	4cd3      	ldr	r4, [pc, #844]	; (800565c <ai_network_init+0x368>)
    conv2d_15_bias_array.data = AI_PTR(weights + 5104);
 800530e:	f241 33f0 	movw	r3, #5104	; 0x13f0
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8005312:	682e      	ldr	r6, [r5, #0]
    conv2d_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8005314:	49d2      	ldr	r1, [pc, #840]	; (8005660 <ai_network_init+0x36c>)
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8005316:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 800531a:	f8df c39c 	ldr.w	ip, [pc, #924]	; 80056b8 <ai_network_init+0x3c4>
    conv2d_4_weights_array.format |= AI_FMT_FLAG_CONST;
 800531e:	4ad1      	ldr	r2, [pc, #836]	; (8005664 <ai_network_init+0x370>)
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8005320:	9600      	str	r6, [sp, #0]
    conv2d_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8005322:	6826      	ldr	r6, [r4, #0]
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8005324:	f8dc 7000 	ldr.w	r7, [ip]
    conv2d_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8005328:	f046 4a80 	orr.w	sl, r6, #1073741824	; 0x40000000
    conv2d_3_bias_array.format |= AI_FMT_FLAG_CONST;
 800532c:	680e      	ldr	r6, [r1, #0]
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 800532e:	f047 4780 	orr.w	r7, r7, #1073741824	; 0x40000000
    conv2d_5_weights_array.format |= AI_FMT_FLAG_CONST;
 8005332:	f8df e388 	ldr.w	lr, [pc, #904]	; 80056bc <ai_network_init+0x3c8>
    conv2d_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8005336:	f046 4980 	orr.w	r9, r6, #1073741824	; 0x40000000
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800533a:	9e00      	ldr	r6, [sp, #0]
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 800533c:	f8cc 7000 	str.w	r7, [ip]
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8005340:	602e      	str	r6, [r5, #0]
    conv2d_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8005342:	4ec9      	ldr	r6, [pc, #804]	; (8005668 <ai_network_init+0x374>)
    conv2d_4_weights_array.format |= AI_FMT_FLAG_CONST;
 8005344:	6817      	ldr	r7, [r2, #0]
    conv2d_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8005346:	6836      	ldr	r6, [r6, #0]
    conv2d_5_bias_array.format |= AI_FMT_FLAG_CONST;
 8005348:	f8df 8374 	ldr.w	r8, [pc, #884]	; 80056c0 <ai_network_init+0x3cc>
    conv2d_4_weights_array.format |= AI_FMT_FLAG_CONST;
 800534c:	f047 4780 	orr.w	r7, r7, #1073741824	; 0x40000000
    conv2d_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8005350:	f8c4 a000 	str.w	sl, [r4]
    conv2d_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8005354:	f046 4a80 	orr.w	sl, r6, #1073741824	; 0x40000000
    conv2d_5_weights_array.format |= AI_FMT_FLAG_CONST;
 8005358:	f8de 6000 	ldr.w	r6, [lr]
    conv2d_3_bias_array.format |= AI_FMT_FLAG_CONST;
 800535c:	f8c1 9000 	str.w	r9, [r1]
    conv2d_4_weights_array.format |= AI_FMT_FLAG_CONST;
 8005360:	6017      	str	r7, [r2, #0]
    conv2d_5_weights_array.format |= AI_FMT_FLAG_CONST;
 8005362:	f046 4980 	orr.w	r9, r6, #1073741824	; 0x40000000
  ok &= network_configure_weights(net_ctx, &params->params);
 8005366:	f8cd b00c 	str.w	fp, [sp, #12]
    conv2d_5_bias_array.format |= AI_FMT_FLAG_CONST;
 800536a:	f8d8 6000 	ldr.w	r6, [r8]
  ok &= network_configure_weights(net_ctx, &params->params);
 800536e:	f8db b010 	ldr.w	fp, [fp, #16]
    conv2d_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8005372:	4fbd      	ldr	r7, [pc, #756]	; (8005668 <ai_network_init+0x374>)
    conv2d_5_bias_array.format |= AI_FMT_FLAG_CONST;
 8005374:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
    conv2d_15_bias_array.data = AI_PTR(weights + 5104);
 8005378:	445b      	add	r3, fp
    conv2d_5_weights_array.format |= AI_FMT_FLAG_CONST;
 800537a:	f8ce 9000 	str.w	r9, [lr]
    conv2d_4_bias_array.format |= AI_FMT_FLAG_CONST;
 800537e:	f8c7 a000 	str.w	sl, [r7]
    conv2d_2_bias_array.data = AI_PTR(weights + 432);
 8005382:	f50b 77d8 	add.w	r7, fp, #432	; 0x1b0
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 8005386:	f8df 933c 	ldr.w	r9, [pc, #828]	; 80056c4 <ai_network_init+0x3d0>
    conv2d_4_bias_array.data = AI_PTR(weights + 832);
 800538a:	f50b 7a50 	add.w	sl, fp, #832	; 0x340
    conv2d_5_bias_array.format |= AI_FMT_FLAG_CONST;
 800538e:	f8c8 6000 	str.w	r6, [r8]
    conv2d_3_weights_array.data = AI_PTR(weights + 496);
 8005392:	f50b 76f8 	add.w	r6, fp, #496	; 0x1f0
    conv2d_2_weights_array.data = AI_PTR(weights + 0);
 8005396:	f8cc b008 	str.w	fp, [ip, #8]
    conv2d_15_bias_array.data = AI_PTR(weights + 5104);
 800539a:	9300      	str	r3, [sp, #0]
    conv2d_2_weights_array.data_start = AI_PTR(weights + 0);
 800539c:	f8cc b00c 	str.w	fp, [ip, #12]
    conv2d_3_bias_array.data = AI_PTR(weights + 640);
 80053a0:	f50b 7c20 	add.w	ip, fp, #640	; 0x280
    conv2d_4_bias_array.data = AI_PTR(weights + 832);
 80053a4:	4bb0      	ldr	r3, [pc, #704]	; (8005668 <ai_network_init+0x374>)
    conv2d_2_bias_array.data_start = AI_PTR(weights + 432);
 80053a6:	e9c5 7702 	strd	r7, r7, [r5, #8]
    conv2d_4_weights_array.data = AI_PTR(weights + 704);
 80053aa:	f50b 7530 	add.w	r5, fp, #704	; 0x2c0
    conv2d_5_weights_array.data = AI_PTR(weights + 864);
 80053ae:	f50b 7758 	add.w	r7, fp, #864	; 0x360
    conv2d_3_weights_array.data_start = AI_PTR(weights + 496);
 80053b2:	e9c4 6602 	strd	r6, r6, [r4, #8]
    conv2d_3_bias_array.data_start = AI_PTR(weights + 640);
 80053b6:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    conv2d_4_weights_array.data_start = AI_PTR(weights + 704);
 80053ba:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_4_bias_array.data_start = AI_PTR(weights + 832);
 80053be:	e9c3 aa02 	strd	sl, sl, [r3, #8]
    conv2d_5_weights_array.data_start = AI_PTR(weights + 864);
 80053c2:	e9ce 7702 	strd	r7, r7, [lr, #8]
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 80053c6:	f8d9 7000 	ldr.w	r7, [r9]
    conv2d_5_bias_array.data = AI_PTR(weights + 1248);
 80053ca:	f50b 669c 	add.w	r6, fp, #1248	; 0x4e0
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 80053ce:	f8df c2f8 	ldr.w	ip, [pc, #760]	; 80056c8 <ai_network_init+0x3d4>
    conv2d_8_weights_array.format |= AI_FMT_FLAG_CONST;
 80053d2:	4da6      	ldr	r5, [pc, #664]	; (800566c <ai_network_init+0x378>)
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 80053d4:	f047 4780 	orr.w	r7, r7, #1073741824	; 0x40000000
    conv2d_8_bias_array.format |= AI_FMT_FLAG_CONST;
 80053d8:	4ca5      	ldr	r4, [pc, #660]	; (8005670 <ai_network_init+0x37c>)
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 80053da:	f8c9 7000 	str.w	r7, [r9]
    conv2d_8_weights_array.format |= AI_FMT_FLAG_CONST;
 80053de:	682f      	ldr	r7, [r5, #0]
    conv2d_10_weights_array.format |= AI_FMT_FLAG_CONST;
 80053e0:	4ba4      	ldr	r3, [pc, #656]	; (8005674 <ai_network_init+0x380>)
    conv2d_8_weights_array.format |= AI_FMT_FLAG_CONST;
 80053e2:	f047 4780 	orr.w	r7, r7, #1073741824	; 0x40000000
    conv2d_9_weights_array.format |= AI_FMT_FLAG_CONST;
 80053e6:	49a4      	ldr	r1, [pc, #656]	; (8005678 <ai_network_init+0x384>)
    conv2d_10_bias_array.format |= AI_FMT_FLAG_CONST;
 80053e8:	f8df e2e0 	ldr.w	lr, [pc, #736]	; 80056cc <ai_network_init+0x3d8>
    conv2d_8_weights_array.format |= AI_FMT_FLAG_CONST;
 80053ec:	602f      	str	r7, [r5, #0]
    conv2d_9_bias_array.format |= AI_FMT_FLAG_CONST;
 80053ee:	4aa3      	ldr	r2, [pc, #652]	; (800567c <ai_network_init+0x388>)
    conv2d_9_weights_array.format |= AI_FMT_FLAG_CONST;
 80053f0:	680f      	ldr	r7, [r1, #0]
    conv2d_5_bias_array.data_start = AI_PTR(weights + 1248);
 80053f2:	e9c8 6602 	strd	r6, r6, [r8, #8]
    conv2d_7_weights_array.data = AI_PTR(weights + 1440);
 80053f6:	f50b 68b4 	add.w	r8, fp, #1440	; 0x5a0
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 80053fa:	f8dc 6000 	ldr.w	r6, [ip]
    conv2d_9_weights_array.format |= AI_FMT_FLAG_CONST;
 80053fe:	f047 4780 	orr.w	r7, r7, #1073741824	; 0x40000000
    conv2d_7_weights_array.data = AI_PTR(weights + 1440);
 8005402:	f8c9 8008 	str.w	r8, [r9, #8]
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 8005406:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
    conv2d_7_weights_array.data_start = AI_PTR(weights + 1440);
 800540a:	f8c9 800c 	str.w	r8, [r9, #12]
    conv2d_8_weights_array.data = AI_PTR(weights + 2064);
 800540e:	f50b 6801 	add.w	r8, fp, #2064	; 0x810
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 8005412:	f8cc 6000 	str.w	r6, [ip]
    conv2d_7_bias_array.data = AI_PTR(weights + 1872);
 8005416:	f50b 69ea 	add.w	r9, fp, #1872	; 0x750
    conv2d_8_bias_array.format |= AI_FMT_FLAG_CONST;
 800541a:	6826      	ldr	r6, [r4, #0]
    conv2d_8_weights_array.data = AI_PTR(weights + 2064);
 800541c:	f8c5 8008 	str.w	r8, [r5, #8]
    conv2d_8_weights_array.data_start = AI_PTR(weights + 2064);
 8005420:	f8c5 800c 	str.w	r8, [r5, #12]
    conv2d_8_bias_array.format |= AI_FMT_FLAG_CONST;
 8005424:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
    conv2d_10_weights_array.format |= AI_FMT_FLAG_CONST;
 8005428:	681d      	ldr	r5, [r3, #0]
    conv2d_8_bias_array.format |= AI_FMT_FLAG_CONST;
 800542a:	6026      	str	r6, [r4, #0]
    conv2d_10_weights_array.format |= AI_FMT_FLAG_CONST;
 800542c:	f045 4880 	orr.w	r8, r5, #1073741824	; 0x40000000
    conv2d_10_bias_array.format |= AI_FMT_FLAG_CONST;
 8005430:	f8de 5000 	ldr.w	r5, [lr]
    conv2d_9_bias_array.format |= AI_FMT_FLAG_CONST;
 8005434:	6816      	ldr	r6, [r2, #0]
    conv2d_10_bias_array.format |= AI_FMT_FLAG_CONST;
 8005436:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    conv2d_7_bias_array.data = AI_PTR(weights + 1872);
 800543a:	f8cc 9008 	str.w	r9, [ip, #8]
    conv2d_7_bias_array.data_start = AI_PTR(weights + 1872);
 800543e:	f8cc 900c 	str.w	r9, [ip, #12]
    conv2d_9_bias_array.format |= AI_FMT_FLAG_CONST;
 8005442:	f046 4a80 	orr.w	sl, r6, #1073741824	; 0x40000000
    conv2d_8_bias_array.data = AI_PTR(weights + 2448);
 8005446:	f50b 6919 	add.w	r9, fp, #2448	; 0x990
    conv2d_9_weights_array.data = AI_PTR(weights + 2480);
 800544a:	f50b 6c1b 	add.w	ip, fp, #2480	; 0x9b0
    conv2d_9_weights_array.format |= AI_FMT_FLAG_CONST;
 800544e:	600f      	str	r7, [r1, #0]
    conv2d_9_bias_array.data = AI_PTR(weights + 2864);
 8005450:	f50b 6633 	add.w	r6, fp, #2864	; 0xb30
    conv2d_10_weights_array.data = AI_PTR(weights + 3056);
 8005454:	f50b 673f 	add.w	r7, fp, #3056	; 0xbf0
    conv2d_10_bias_array.format |= AI_FMT_FLAG_CONST;
 8005458:	f8ce 5000 	str.w	r5, [lr]
    conv2d_11_weights_array.format |= AI_FMT_FLAG_CONST;
 800545c:	4d88      	ldr	r5, [pc, #544]	; (8005680 <ai_network_init+0x38c>)
    conv2d_9_bias_array.format |= AI_FMT_FLAG_CONST;
 800545e:	f8c2 a000 	str.w	sl, [r2]
    conv2d_16_bias_array.data = AI_PTR(weights + 6064);
 8005462:	f241 7ab0 	movw	sl, #6064	; 0x17b0
    conv2d_8_bias_array.data = AI_PTR(weights + 2448);
 8005466:	f8c4 9008 	str.w	r9, [r4, #8]
    conv2d_10_weights_array.format |= AI_FMT_FLAG_CONST;
 800546a:	f8c3 8000 	str.w	r8, [r3]
    conv2d_10_bias_array.data = AI_PTR(weights + 3488);
 800546e:	f50b 685a 	add.w	r8, fp, #3488	; 0xda0
    conv2d_8_bias_array.data_start = AI_PTR(weights + 2448);
 8005472:	f8c4 900c 	str.w	r9, [r4, #12]
    conv2d_16_weights_array.data = AI_PTR(weights + 5296);
 8005476:	f241 49b0 	movw	r9, #5296	; 0x14b0
    conv2d_13_weights_array.format |= AI_FMT_FLAG_CONST;
 800547a:	4c82      	ldr	r4, [pc, #520]	; (8005684 <ai_network_init+0x390>)
    conv2d_16_bias_array.data = AI_PTR(weights + 6064);
 800547c:	44da      	add	sl, fp
    conv2d_16_weights_array.data = AI_PTR(weights + 5296);
 800547e:	44d9      	add	r9, fp
    conv2d_9_weights_array.data_start = AI_PTR(weights + 2480);
 8005480:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    conv2d_9_bias_array.data_start = AI_PTR(weights + 2864);
 8005484:	e9c2 6602 	strd	r6, r6, [r2, #8]
    conv2d_10_weights_array.data_start = AI_PTR(weights + 3056);
 8005488:	e9c3 7702 	strd	r7, r7, [r3, #8]
    conv2d_11_weights_array.format |= AI_FMT_FLAG_CONST;
 800548c:	682e      	ldr	r6, [r5, #0]
    conv2d_11_bias_array.format |= AI_FMT_FLAG_CONST;
 800548e:	f8df c240 	ldr.w	ip, [pc, #576]	; 80056d0 <ai_network_init+0x3dc>
    conv2d_11_weights_array.format |= AI_FMT_FLAG_CONST;
 8005492:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
    conv2d_13_bias_array.format |= AI_FMT_FLAG_CONST;
 8005496:	497c      	ldr	r1, [pc, #496]	; (8005688 <ai_network_init+0x394>)
    conv2d_15_bias_array.format |= AI_FMT_FLAG_CONST;
 8005498:	4f7c      	ldr	r7, [pc, #496]	; (800568c <ai_network_init+0x398>)
    conv2d_11_weights_array.format |= AI_FMT_FLAG_CONST;
 800549a:	602e      	str	r6, [r5, #0]
    conv2d_11_bias_array.format |= AI_FMT_FLAG_CONST;
 800549c:	f8dc 6000 	ldr.w	r6, [ip]
    conv2d_15_bias_array.data = AI_PTR(weights + 5104);
 80054a0:	9b00      	ldr	r3, [sp, #0]
    conv2d_11_bias_array.format |= AI_FMT_FLAG_CONST;
 80054a2:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
    conv2d_15_weights_array.format |= AI_FMT_FLAG_CONST;
 80054a6:	4a7a      	ldr	r2, [pc, #488]	; (8005690 <ai_network_init+0x39c>)
    conv2d_15_bias_array.data = AI_PTR(weights + 5104);
 80054a8:	60bb      	str	r3, [r7, #8]
    conv2d_11_bias_array.format |= AI_FMT_FLAG_CONST;
 80054aa:	f8cc 6000 	str.w	r6, [ip]
    conv2d_15_bias_array.data_start = AI_PTR(weights + 5104);
 80054ae:	60fb      	str	r3, [r7, #12]
    conv2d_16_weights_array.format |= AI_FMT_FLAG_CONST;
 80054b0:	4b78      	ldr	r3, [pc, #480]	; (8005694 <ai_network_init+0x3a0>)
    conv2d_10_bias_array.data_start = AI_PTR(weights + 3488);
 80054b2:	e9ce 8802 	strd	r8, r8, [lr, #8]
    conv2d_11_weights_array.data = AI_PTR(weights + 3680);
 80054b6:	f50b 6866 	add.w	r8, fp, #3680	; 0xe60
    conv2d_16_bias_array.format |= AI_FMT_FLAG_CONST;
 80054ba:	f8df e218 	ldr.w	lr, [pc, #536]	; 80056d4 <ai_network_init+0x3e0>
    conv2d_16_weights_array.format |= AI_FMT_FLAG_CONST;
 80054be:	681b      	ldr	r3, [r3, #0]
    conv2d_11_weights_array.data = AI_PTR(weights + 3680);
 80054c0:	f8c5 8008 	str.w	r8, [r5, #8]
    conv2d_11_weights_array.data_start = AI_PTR(weights + 3680);
 80054c4:	f8c5 800c 	str.w	r8, [r5, #12]
    conv2d_11_bias_array.data = AI_PTR(weights + 4064);
 80054c8:	f50b 687e 	add.w	r8, fp, #4064	; 0xfe0
    conv2d_13_weights_array.format |= AI_FMT_FLAG_CONST;
 80054cc:	6825      	ldr	r5, [r4, #0]
    conv2d_11_bias_array.data = AI_PTR(weights + 4064);
 80054ce:	f8cc 8008 	str.w	r8, [ip, #8]
    conv2d_13_weights_array.format |= AI_FMT_FLAG_CONST;
 80054d2:	f045 4680 	orr.w	r6, r5, #1073741824	; 0x40000000
    conv2d_13_bias_array.format |= AI_FMT_FLAG_CONST;
 80054d6:	680d      	ldr	r5, [r1, #0]
    conv2d_11_bias_array.data_start = AI_PTR(weights + 4064);
 80054d8:	f8cc 800c 	str.w	r8, [ip, #12]
    conv2d_13_weights_array.data = AI_PTR(weights + 4096);
 80054dc:	f50b 5880 	add.w	r8, fp, #4096	; 0x1000
    conv2d_13_bias_array.format |= AI_FMT_FLAG_CONST;
 80054e0:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    conv2d_13_bias_array.data = AI_PTR(weights + 4480);
 80054e4:	f50b 5c8c 	add.w	ip, fp, #4480	; 0x1180
    conv2d_13_weights_array.format |= AI_FMT_FLAG_CONST;
 80054e8:	6026      	str	r6, [r4, #0]
    conv2d_13_bias_array.format |= AI_FMT_FLAG_CONST;
 80054ea:	600d      	str	r5, [r1, #0]
    conv2d_15_weights_array.format |= AI_FMT_FLAG_CONST;
 80054ec:	6816      	ldr	r6, [r2, #0]
    conv2d_15_bias_array.format |= AI_FMT_FLAG_CONST;
 80054ee:	683d      	ldr	r5, [r7, #0]
    conv2d_13_weights_array.data = AI_PTR(weights + 4096);
 80054f0:	f8c4 8008 	str.w	r8, [r4, #8]
    conv2d_15_weights_array.format |= AI_FMT_FLAG_CONST;
 80054f4:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
    conv2d_13_weights_array.data_start = AI_PTR(weights + 4096);
 80054f8:	f8c4 800c 	str.w	r8, [r4, #12]
    conv2d_15_bias_array.format |= AI_FMT_FLAG_CONST;
 80054fc:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    conv2d_16_bias_array.format |= AI_FMT_FLAG_CONST;
 8005500:	f8de 4000 	ldr.w	r4, [lr]
    conv2d_13_bias_array.data = AI_PTR(weights + 4480);
 8005504:	f8c1 c008 	str.w	ip, [r1, #8]
    conv2d_13_bias_array.data_start = AI_PTR(weights + 4480);
 8005508:	f8c1 c00c 	str.w	ip, [r1, #12]
    conv2d_18_bias_array.data = AI_PTR(weights + 8912);
 800550c:	f242 21d0 	movw	r1, #8912	; 0x22d0
    conv2d_15_weights_array.format |= AI_FMT_FLAG_CONST;
 8005510:	6016      	str	r6, [r2, #0]
    conv2d_16_bias_array.format |= AI_FMT_FLAG_CONST;
 8005512:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    conv2d_15_weights_array.data = AI_PTR(weights + 4672);
 8005516:	f50b 5692 	add.w	r6, fp, #4672	; 0x1240
    conv2d_15_bias_array.format |= AI_FMT_FLAG_CONST;
 800551a:	603d      	str	r5, [r7, #0]
    conv2d_18_bias_array.data = AI_PTR(weights + 8912);
 800551c:	4459      	add	r1, fp
    conv2d_16_weights_array.format |= AI_FMT_FLAG_CONST;
 800551e:	f043 4580 	orr.w	r5, r3, #1073741824	; 0x40000000
 8005522:	4b5c      	ldr	r3, [pc, #368]	; (8005694 <ai_network_init+0x3a0>)
    conv2d_17_weights_array.data = AI_PTR(weights + 6128);
 8005524:	f241 77f0 	movw	r7, #6128	; 0x17f0
    conv2d_16_bias_array.format |= AI_FMT_FLAG_CONST;
 8005528:	f8ce 4000 	str.w	r4, [lr]
    conv2d_17_bias_array.data = AI_PTR(weights + 7664);
 800552c:	f641 54f0 	movw	r4, #7664	; 0x1df0
    conv2d_16_weights_array.format |= AI_FMT_FLAG_CONST;
 8005530:	601d      	str	r5, [r3, #0]
    conv2d_17_weights_array.data = AI_PTR(weights + 6128);
 8005532:	445f      	add	r7, fp
    conv2d_17_weights_array.format |= AI_FMT_FLAG_CONST;
 8005534:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 80056d8 <ai_network_init+0x3e4>
    conv2d_17_bias_array.data = AI_PTR(weights + 7664);
 8005538:	445c      	add	r4, fp
    conv2d_17_bias_array.format |= AI_FMT_FLAG_CONST;
 800553a:	4d57      	ldr	r5, [pc, #348]	; (8005698 <ai_network_init+0x3a4>)
    conv2d_19_bias_array.format |= AI_FMT_FLAG_CONST;
 800553c:	f8df 819c 	ldr.w	r8, [pc, #412]	; 80056dc <ai_network_init+0x3e8>
    conv2d_15_weights_array.data_start = AI_PTR(weights + 4672);
 8005540:	e9c2 6602 	strd	r6, r6, [r2, #8]
    conv2d_16_weights_array.data_start = AI_PTR(weights + 5296);
 8005544:	e9c3 9902 	strd	r9, r9, [r3, #8]
    conv2d_18_bias_array.data = AI_PTR(weights + 8912);
 8005548:	9100      	str	r1, [sp, #0]
    conv2d_19_weights_array.data = AI_PTR(weights + 9296);
 800554a:	f242 4150 	movw	r1, #9296	; 0x2450
    conv2d_17_weights_array.format |= AI_FMT_FLAG_CONST;
 800554e:	f8dc 3000 	ldr.w	r3, [ip]
    conv2d_19_weights_array.data = AI_PTR(weights + 9296);
 8005552:	4459      	add	r1, fp
    conv2d_17_bias_array.data = AI_PTR(weights + 7664);
 8005554:	60ac      	str	r4, [r5, #8]
    conv2d_17_bias_array.data_start = AI_PTR(weights + 7664);
 8005556:	60ec      	str	r4, [r5, #12]
    conv2d_17_weights_array.format |= AI_FMT_FLAG_CONST;
 8005558:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    conv2d_19_weights_array.data = AI_PTR(weights + 9296);
 800555c:	9101      	str	r1, [sp, #4]
    conv2d_18_weights_array.format |= AI_FMT_FLAG_CONST;
 800555e:	494f      	ldr	r1, [pc, #316]	; (800569c <ai_network_init+0x3a8>)
    conv2d_18_bias_array.format |= AI_FMT_FLAG_CONST;
 8005560:	4e4f      	ldr	r6, [pc, #316]	; (80056a0 <ai_network_init+0x3ac>)
    conv2d_18_weights_array.format |= AI_FMT_FLAG_CONST;
 8005562:	680c      	ldr	r4, [r1, #0]
    conv2d_17_weights_array.format |= AI_FMT_FLAG_CONST;
 8005564:	f8cc 3000 	str.w	r3, [ip]
    conv2d_18_weights_array.format |= AI_FMT_FLAG_CONST;
 8005568:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    conv2d_17_bias_array.format |= AI_FMT_FLAG_CONST;
 800556c:	682b      	ldr	r3, [r5, #0]
    conv2d_21_weights_array.format |= AI_FMT_FLAG_CONST;
 800556e:	f8df 9170 	ldr.w	r9, [pc, #368]	; 80056e0 <ai_network_init+0x3ec>
    conv2d_18_weights_array.format |= AI_FMT_FLAG_CONST;
 8005572:	600c      	str	r4, [r1, #0]
    conv2d_17_bias_array.format |= AI_FMT_FLAG_CONST;
 8005574:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    conv2d_18_bias_array.format |= AI_FMT_FLAG_CONST;
 8005578:	6834      	ldr	r4, [r6, #0]
    conv2d_17_bias_array.format |= AI_FMT_FLAG_CONST;
 800557a:	602b      	str	r3, [r5, #0]
    conv2d_21_bias_array.data = AI_PTR(weights + 12432);
 800557c:	f243 0390 	movw	r3, #12432	; 0x3090
    conv2d_18_bias_array.data = AI_PTR(weights + 8912);
 8005580:	9d00      	ldr	r5, [sp, #0]
    conv2d_18_bias_array.format |= AI_FMT_FLAG_CONST;
 8005582:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    conv2d_19_weights_array.format |= AI_FMT_FLAG_CONST;
 8005586:	4a47      	ldr	r2, [pc, #284]	; (80056a4 <ai_network_init+0x3b0>)
    conv2d_21_bias_array.data = AI_PTR(weights + 12432);
 8005588:	445b      	add	r3, fp
    conv2d_18_bias_array.data = AI_PTR(weights + 8912);
 800558a:	60b5      	str	r5, [r6, #8]
    conv2d_18_bias_array.data_start = AI_PTR(weights + 8912);
 800558c:	60f5      	str	r5, [r6, #12]
    conv2d_18_bias_array.format |= AI_FMT_FLAG_CONST;
 800558e:	6034      	str	r4, [r6, #0]
    conv2d_21_weights_array.format |= AI_FMT_FLAG_CONST;
 8005590:	f8d9 4000 	ldr.w	r4, [r9]
    conv2d_19_bias_array.format |= AI_FMT_FLAG_CONST;
 8005594:	f8d8 5000 	ldr.w	r5, [r8]
    conv2d_21_weights_array.format |= AI_FMT_FLAG_CONST;
 8005598:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    conv2d_17_weights_array.data = AI_PTR(weights + 6128);
 800559c:	f8cc 7008 	str.w	r7, [ip, #8]
    conv2d_19_bias_array.format |= AI_FMT_FLAG_CONST;
 80055a0:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    conv2d_17_weights_array.data_start = AI_PTR(weights + 6128);
 80055a4:	f8cc 700c 	str.w	r7, [ip, #12]
    conv2d_21_weights_array.format |= AI_FMT_FLAG_CONST;
 80055a8:	f8c9 4000 	str.w	r4, [r9]
    conv2d_19_bias_array.data = AI_PTR(weights + 10832);
 80055ac:	f642 2750 	movw	r7, #10832	; 0x2a50
    conv2d_19_weights_array.data = AI_PTR(weights + 9296);
 80055b0:	9c01      	ldr	r4, [sp, #4]
    conv2d_21_weights_array.data = AI_PTR(weights + 10896);
 80055b2:	f642 2c90 	movw	ip, #10896	; 0x2a90
    conv2d_19_bias_array.format |= AI_FMT_FLAG_CONST;
 80055b6:	f8c8 5000 	str.w	r5, [r8]
    conv2d_19_bias_array.data = AI_PTR(weights + 10832);
 80055ba:	445f      	add	r7, fp
    conv2d_23_weights_array.format |= AI_FMT_FLAG_CONST;
 80055bc:	4d3a      	ldr	r5, [pc, #232]	; (80056a8 <ai_network_init+0x3b4>)
    conv2d_21_weights_array.data = AI_PTR(weights + 10896);
 80055be:	44dc      	add	ip, fp
    conv2d_16_bias_array.data_start = AI_PTR(weights + 6064);
 80055c0:	e9ce aa02 	strd	sl, sl, [lr, #8]
    conv2d_21_bias_array.format |= AI_FMT_FLAG_CONST;
 80055c4:	f8df a11c 	ldr.w	sl, [pc, #284]	; 80056e4 <ai_network_init+0x3f0>
    conv2d_18_weights_array.data = AI_PTR(weights + 8048);
 80055c8:	f641 7e70 	movw	lr, #8048	; 0x1f70
    conv2d_21_bias_array.format |= AI_FMT_FLAG_CONST;
 80055cc:	f8da 6000 	ldr.w	r6, [sl]
    conv2d_18_weights_array.data = AI_PTR(weights + 8048);
 80055d0:	44de      	add	lr, fp
    conv2d_21_bias_array.format |= AI_FMT_FLAG_CONST;
 80055d2:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
    conv2d_18_weights_array.data = AI_PTR(weights + 8048);
 80055d6:	f8c1 e008 	str.w	lr, [r1, #8]
    conv2d_18_weights_array.data_start = AI_PTR(weights + 8048);
 80055da:	f8c1 e00c 	str.w	lr, [r1, #12]
    conv2d_19_weights_array.format |= AI_FMT_FLAG_CONST;
 80055de:	6811      	ldr	r1, [r2, #0]
    conv2d_21_bias_array.format |= AI_FMT_FLAG_CONST;
 80055e0:	f8ca 6000 	str.w	r6, [sl]
    conv2d_22_bias_array.data = AI_PTR(weights + 13680);
 80055e4:	f243 5670 	movw	r6, #13680	; 0x3570
    conv2d_19_weights_array.format |= AI_FMT_FLAG_CONST;
 80055e8:	f041 4e80 	orr.w	lr, r1, #1073741824	; 0x40000000
    conv2d_22_weights_array.data = AI_PTR(weights + 12816);
 80055ec:	f243 2110 	movw	r1, #12816	; 0x3210
    conv2d_22_bias_array.data = AI_PTR(weights + 13680);
 80055f0:	445e      	add	r6, fp
    conv2d_19_weights_array.format |= AI_FMT_FLAG_CONST;
 80055f2:	f8c2 e000 	str.w	lr, [r2]
    conv2d_22_weights_array.data = AI_PTR(weights + 12816);
 80055f6:	4459      	add	r1, fp
    conv2d_22_weights_array.format |= AI_FMT_FLAG_CONST;
 80055f8:	f8df e0ec 	ldr.w	lr, [pc, #236]	; 80056e8 <ai_network_init+0x3f4>
    conv2d_19_weights_array.data_start = AI_PTR(weights + 9296);
 80055fc:	e9c2 4402 	strd	r4, r4, [r2, #8]
    conv2d_22_bias_array.format |= AI_FMT_FLAG_CONST;
 8005600:	4a2a      	ldr	r2, [pc, #168]	; (80056ac <ai_network_init+0x3b8>)
    conv2d_23_bias_array.format |= AI_FMT_FLAG_CONST;
 8005602:	4c2b      	ldr	r4, [pc, #172]	; (80056b0 <ai_network_init+0x3bc>)
    conv2d_22_bias_array.data = AI_PTR(weights + 13680);
 8005604:	6096      	str	r6, [r2, #8]
    conv2d_22_bias_array.data_start = AI_PTR(weights + 13680);
 8005606:	60d6      	str	r6, [r2, #12]
    conv2d_23_weights_array.format |= AI_FMT_FLAG_CONST;
 8005608:	682e      	ldr	r6, [r5, #0]
    conv2d_22_weights_array.data = AI_PTR(weights + 12816);
 800560a:	f8ce 1008 	str.w	r1, [lr, #8]
    conv2d_23_weights_array.format |= AI_FMT_FLAG_CONST;
 800560e:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
    conv2d_22_weights_array.data_start = AI_PTR(weights + 12816);
 8005612:	f8ce 100c 	str.w	r1, [lr, #12]
    conv2d_25_bias_array.data = AI_PTR(weights + 17200);
 8005616:	f244 3130 	movw	r1, #17200	; 0x4330
    conv2d_23_weights_array.format |= AI_FMT_FLAG_CONST;
 800561a:	602e      	str	r6, [r5, #0]
    conv2d_23_bias_array.format |= AI_FMT_FLAG_CONST;
 800561c:	6826      	ldr	r6, [r4, #0]
    conv2d_25_bias_array.data = AI_PTR(weights + 17200);
 800561e:	4459      	add	r1, fp
    conv2d_19_bias_array.data_start = AI_PTR(weights + 10832);
 8005620:	e9c8 7702 	strd	r7, r7, [r8, #8]
    conv2d_21_weights_array.data_start = AI_PTR(weights + 10896);
 8005624:	e9c9 cc02 	strd	ip, ip, [r9, #8]
    conv2d_23_weights_array.data = AI_PTR(weights + 14064);
 8005628:	f243 67f0 	movw	r7, #14064	; 0x36f0
    conv2d_23_bias_array.data = AI_PTR(weights + 15600);
 800562c:	f643 4cf0 	movw	ip, #15600	; 0x3cf0
    conv2d_25_weights_array.format |= AI_FMT_FLAG_CONST;
 8005630:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80056ec <ai_network_init+0x3f8>
    conv2d_23_bias_array.format |= AI_FMT_FLAG_CONST;
 8005634:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
    conv2d_23_weights_array.data = AI_PTR(weights + 14064);
 8005638:	445f      	add	r7, fp
    conv2d_23_bias_array.data = AI_PTR(weights + 15600);
 800563a:	44dc      	add	ip, fp
    conv2d_23_bias_array.format |= AI_FMT_FLAG_CONST;
 800563c:	6026      	str	r6, [r4, #0]
    conv2d_23_weights_array.data = AI_PTR(weights + 14064);
 800563e:	60af      	str	r7, [r5, #8]
    conv2d_23_weights_array.data_start = AI_PTR(weights + 14064);
 8005640:	60ef      	str	r7, [r5, #12]
    conv2d_23_bias_array.data = AI_PTR(weights + 15600);
 8005642:	f8c4 c008 	str.w	ip, [r4, #8]
    conv2d_25_weights_array.format |= AI_FMT_FLAG_CONST;
 8005646:	f8d8 5000 	ldr.w	r5, [r8]
    conv2d_23_bias_array.data_start = AI_PTR(weights + 15600);
 800564a:	f8c4 c00c 	str.w	ip, [r4, #12]
    conv2d_25_bias_array.format |= AI_FMT_FLAG_CONST;
 800564e:	4c19      	ldr	r4, [pc, #100]	; (80056b4 <ai_network_init+0x3c0>)
    conv2d_25_weights_array.format |= AI_FMT_FLAG_CONST;
 8005650:	f045 4780 	orr.w	r7, r5, #1073741824	; 0x40000000
 8005654:	e04c      	b.n	80056f0 <ai_network_init+0x3fc>
 8005656:	bf00      	nop
 8005658:	2400459c 	.word	0x2400459c
 800565c:	24005004 	.word	0x24005004
 8005660:	24004f14 	.word	0x24004f14
 8005664:	2400597c 	.word	0x2400597c
 8005668:	240058b8 	.word	0x240058b8
 800566c:	24006b40 	.word	0x24006b40
 8005670:	24006a7c 	.word	0x24006a7c
 8005674:	240036f0 	.word	0x240036f0
 8005678:	24006c5c 	.word	0x24006c5c
 800567c:	24006b6c 	.word	0x24006b6c
 8005680:	240037e0 	.word	0x240037e0
 8005684:	240038fc 	.word	0x240038fc
 8005688:	2400380c 	.word	0x2400380c
 800568c:	24003928 	.word	0x24003928
 8005690:	240039ec 	.word	0x240039ec
 8005694:	24003adc 	.word	0x24003adc
 8005698:	24003b08 	.word	0x24003b08
 800569c:	24003d14 	.word	0x24003d14
 80056a0:	24003c24 	.word	0x24003c24
 80056a4:	24003e04 	.word	0x24003e04
 80056a8:	2400412c 	.word	0x2400412c
 80056ac:	24003f4c 	.word	0x24003f4c
 80056b0:	24004068 	.word	0x24004068
 80056b4:	24004158 	.word	0x24004158
 80056b8:	2400468c 	.word	0x2400468c
 80056bc:	240061ac 	.word	0x240061ac
 80056c0:	240060bc 	.word	0x240060bc
 80056c4:	24006a50 	.word	0x24006a50
 80056c8:	24006960 	.word	0x24006960
 80056cc:	24003600 	.word	0x24003600
 80056d0:	2400371c 	.word	0x2400371c
 80056d4:	24003a18 	.word	0x24003a18
 80056d8:	24003bf8 	.word	0x24003bf8
 80056dc:	24003d40 	.word	0x24003d40
 80056e0:	24003f20 	.word	0x24003f20
 80056e4:	24003e30 	.word	0x24003e30
 80056e8:	2400403c 	.word	0x2400403c
 80056ec:	24004248 	.word	0x24004248
    conv2d_27_weights_array.format |= AI_FMT_FLAG_CONST;
 80056f0:	4ec7      	ldr	r6, [pc, #796]	; (8005a10 <ai_network_init+0x71c>)
    conv2d_25_bias_array.format |= AI_FMT_FLAG_CONST;
 80056f2:	6825      	ldr	r5, [r4, #0]
    conv2d_25_weights_array.format |= AI_FMT_FLAG_CONST;
 80056f4:	f8c8 7000 	str.w	r7, [r8]
    conv2d_27_weights_array.format |= AI_FMT_FLAG_CONST;
 80056f8:	6834      	ldr	r4, [r6, #0]
    conv2d_25_bias_array.format |= AI_FMT_FLAG_CONST;
 80056fa:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
 80056fe:	4fc5      	ldr	r7, [pc, #788]	; (8005a14 <ai_network_init+0x720>)
    conv2d_27_bias_array.format |= AI_FMT_FLAG_CONST;
 8005700:	f8df 9370 	ldr.w	r9, [pc, #880]	; 8005a74 <ai_network_init+0x780>
    conv2d_27_weights_array.format |= AI_FMT_FLAG_CONST;
 8005704:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    conv2d_25_bias_array.format |= AI_FMT_FLAG_CONST;
 8005708:	603d      	str	r5, [r7, #0]
    conv2d_27_weights_array.format |= AI_FMT_FLAG_CONST;
 800570a:	4dc1      	ldr	r5, [pc, #772]	; (8005a10 <ai_network_init+0x71c>)
    conv2d_27_bias_array.format |= AI_FMT_FLAG_CONST;
 800570c:	f8d9 6000 	ldr.w	r6, [r9]
    conv2d_27_weights_array.format |= AI_FMT_FLAG_CONST;
 8005710:	602c      	str	r4, [r5, #0]
    conv2d_28_bias_array.data = AI_PTR(weights + 21136);
 8005712:	f245 2490 	movw	r4, #21136	; 0x5290
    conv2d_28_weights_array.format |= AI_FMT_FLAG_CONST;
 8005716:	4dc0      	ldr	r5, [pc, #768]	; (8005a18 <ai_network_init+0x724>)
    conv2d_27_bias_array.format |= AI_FMT_FLAG_CONST;
 8005718:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
    conv2d_28_bias_array.data = AI_PTR(weights + 21136);
 800571c:	445c      	add	r4, fp
    conv2d_28_bias_array.format |= AI_FMT_FLAG_CONST;
 800571e:	f8df c358 	ldr.w	ip, [pc, #856]	; 8005a78 <ai_network_init+0x784>
    conv2d_27_bias_array.format |= AI_FMT_FLAG_CONST;
 8005722:	f8c9 6000 	str.w	r6, [r9]
    conv2d_29_bias_array.format |= AI_FMT_FLAG_CONST;
 8005726:	4ebd      	ldr	r6, [pc, #756]	; (8005a1c <ai_network_init+0x728>)
    conv2d_21_bias_array.data_start = AI_PTR(weights + 12432);
 8005728:	e9ca 3302 	strd	r3, r3, [sl, #8]
    conv2d_22_weights_array.format |= AI_FMT_FLAG_CONST;
 800572c:	f8de 3000 	ldr.w	r3, [lr]
    conv2d_28_weights_array.data = AI_PTR(weights + 18832);
 8005730:	f644 1a90 	movw	sl, #18832	; 0x4990
    conv2d_22_weights_array.format |= AI_FMT_FLAG_CONST;
 8005734:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    conv2d_28_weights_array.data = AI_PTR(weights + 18832);
 8005738:	44da      	add	sl, fp
    conv2d_22_weights_array.format |= AI_FMT_FLAG_CONST;
 800573a:	f8ce 3000 	str.w	r3, [lr]
    conv2d_25_weights_array.data = AI_PTR(weights + 15664);
 800573e:	f643 5e30 	movw	lr, #15664	; 0x3d30
    conv2d_22_bias_array.format |= AI_FMT_FLAG_CONST;
 8005742:	6813      	ldr	r3, [r2, #0]
    conv2d_25_weights_array.data = AI_PTR(weights + 15664);
 8005744:	44de      	add	lr, fp
    conv2d_22_bias_array.format |= AI_FMT_FLAG_CONST;
 8005746:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    conv2d_25_weights_array.data_start = AI_PTR(weights + 15664);
 800574a:	e9c8 ee02 	strd	lr, lr, [r8, #8]
    conv2d_22_bias_array.format |= AI_FMT_FLAG_CONST;
 800574e:	6013      	str	r3, [r2, #0]
    conv2d_27_bias_array.data = AI_PTR(weights + 18448);
 8005750:	f644 0310 	movw	r3, #18448	; 0x4810
    conv2d_28_bias_array.data = AI_PTR(weights + 21136);
 8005754:	9400      	str	r4, [sp, #0]
    conv2d_27_weights_array.data = AI_PTR(weights + 17584);
 8005756:	f244 42b0 	movw	r2, #17584	; 0x44b0
    conv2d_28_weights_array.format |= AI_FMT_FLAG_CONST;
 800575a:	682c      	ldr	r4, [r5, #0]
    conv2d_27_bias_array.data = AI_PTR(weights + 18448);
 800575c:	445b      	add	r3, fp
    conv2d_28_weights_array.data = AI_PTR(weights + 18832);
 800575e:	f8c5 a008 	str.w	sl, [r5, #8]
    conv2d_27_weights_array.data = AI_PTR(weights + 17584);
 8005762:	445a      	add	r2, fp
    conv2d_28_weights_array.format |= AI_FMT_FLAG_CONST;
 8005764:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    conv2d_28_weights_array.data_start = AI_PTR(weights + 18832);
 8005768:	f8c5 a00c 	str.w	sl, [r5, #12]
    conv2d_29_weights_array.format |= AI_FMT_FLAG_CONST;
 800576c:	f8df e30c 	ldr.w	lr, [pc, #780]	; 8005a7c <ai_network_init+0x788>
    conv2d_29_weights_array.data = AI_PTR(weights + 21232);
 8005770:	f245 28f0 	movw	r8, #21232	; 0x52f0
    conv2d_28_weights_array.format |= AI_FMT_FLAG_CONST;
 8005774:	602c      	str	r4, [r5, #0]
    conv2d_30_weights_array.data = AI_PTR(weights + 25264);
 8005776:	f246 2ab0 	movw	sl, #25264	; 0x62b0
    conv2d_28_bias_array.format |= AI_FMT_FLAG_CONST;
 800577a:	f8dc 5000 	ldr.w	r5, [ip]
    conv2d_29_weights_array.data = AI_PTR(weights + 21232);
 800577e:	44d8      	add	r8, fp
    conv2d_30_weights_array.data = AI_PTR(weights + 25264);
 8005780:	44da      	add	sl, fp
    conv2d_30_bias_array.data = AI_PTR(weights + 26560);
 8005782:	f246 74c0 	movw	r4, #26560	; 0x67c0
    conv2d_28_bias_array.format |= AI_FMT_FLAG_CONST;
 8005786:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    conv2d_29_weights_array.data = AI_PTR(weights + 21232);
 800578a:	f8ce 8008 	str.w	r8, [lr, #8]
    conv2d_29_weights_array.data_start = AI_PTR(weights + 21232);
 800578e:	f8ce 800c 	str.w	r8, [lr, #12]
    conv2d_30_bias_array.data = AI_PTR(weights + 26560);
 8005792:	445c      	add	r4, fp
    conv2d_28_bias_array.format |= AI_FMT_FLAG_CONST;
 8005794:	f8cc 5000 	str.w	r5, [ip]
    conv2d_29_weights_array.format |= AI_FMT_FLAG_CONST;
 8005798:	f8de 5000 	ldr.w	r5, [lr]
    conv2d_33_weights_array.format |= AI_FMT_FLAG_CONST;
 800579c:	f8df 82e0 	ldr.w	r8, [pc, #736]	; 8005a80 <ai_network_init+0x78c>
    conv2d_29_weights_array.format |= AI_FMT_FLAG_CONST;
 80057a0:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    conv2d_27_bias_array.data_start = AI_PTR(weights + 18448);
 80057a4:	e9c9 3302 	strd	r3, r3, [r9, #8]
    conv2d_29_bias_array.data = AI_PTR(weights + 24688);
 80057a8:	f246 0370 	movw	r3, #24688	; 0x6070
    conv2d_29_weights_array.format |= AI_FMT_FLAG_CONST;
 80057ac:	f8ce 5000 	str.w	r5, [lr]
    conv2d_29_bias_array.format |= AI_FMT_FLAG_CONST;
 80057b0:	6835      	ldr	r5, [r6, #0]
    conv2d_31_bias_array.data = AI_PTR(weights + 30592);
 80057b2:	f50b 4eef 	add.w	lr, fp, #30592	; 0x7780
    conv2d_29_bias_array.data = AI_PTR(weights + 24688);
 80057b6:	445b      	add	r3, fp
    conv2d_29_bias_array.format |= AI_FMT_FLAG_CONST;
 80057b8:	f045 4980 	orr.w	r9, r5, #1073741824	; 0x40000000
    conv2d_29_bias_array.data = AI_PTR(weights + 24688);
 80057bc:	9301      	str	r3, [sp, #4]
    conv2d_28_bias_array.data = AI_PTR(weights + 21136);
 80057be:	9b00      	ldr	r3, [sp, #0]
    conv2d_29_bias_array.format |= AI_FMT_FLAG_CONST;
 80057c0:	f8c6 9000 	str.w	r9, [r6]
    conv2d_28_bias_array.data = AI_PTR(weights + 21136);
 80057c4:	f8cc 3008 	str.w	r3, [ip, #8]
    conv2d_28_bias_array.data_start = AI_PTR(weights + 21136);
 80057c8:	f8cc 300c 	str.w	r3, [ip, #12]
    conv2d_31_weights_array.data = AI_PTR(weights + 27136);
 80057cc:	f50b 4cd4 	add.w	ip, fp, #27136	; 0x6a00
    conv2d_29_bias_array.data = AI_PTR(weights + 24688);
 80057d0:	9b01      	ldr	r3, [sp, #4]
    conv2d_35_bias_array.format |= AI_FMT_FLAG_CONST;
 80057d2:	f8df 92b0 	ldr.w	r9, [pc, #688]	; 8005a84 <ai_network_init+0x790>
    conv2d_29_bias_array.data = AI_PTR(weights + 24688);
 80057d6:	60b3      	str	r3, [r6, #8]
    conv2d_29_bias_array.data_start = AI_PTR(weights + 24688);
 80057d8:	60f3      	str	r3, [r6, #12]
    conv2d_33_weights_array.data = AI_PTR(weights + 30688);
 80057da:	f247 73e0 	movw	r3, #30688	; 0x77e0
    conv2d_25_bias_array.data_start = AI_PTR(weights + 17200);
 80057de:	e9c7 1102 	strd	r1, r1, [r7, #8]
    conv2d_27_weights_array.data = AI_PTR(weights + 17584);
 80057e2:	498b      	ldr	r1, [pc, #556]	; (8005a10 <ai_network_init+0x71c>)
    conv2d_33_weights_array.data = AI_PTR(weights + 30688);
 80057e4:	445b      	add	r3, fp
    conv2d_30_weights_array.format |= AI_FMT_FLAG_CONST;
 80057e6:	4f8e      	ldr	r7, [pc, #568]	; (8005a20 <ai_network_init+0x72c>)
    conv2d_33_weights_array.data = AI_PTR(weights + 30688);
 80057e8:	9300      	str	r3, [sp, #0]
    conv2d_30_weights_array.format |= AI_FMT_FLAG_CONST;
 80057ea:	683d      	ldr	r5, [r7, #0]
    conv2d_31_bias_array.format |= AI_FMT_FLAG_CONST;
 80057ec:	4b8d      	ldr	r3, [pc, #564]	; (8005a24 <ai_network_init+0x730>)
    conv2d_30_weights_array.format |= AI_FMT_FLAG_CONST;
 80057ee:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    conv2d_27_weights_array.data_start = AI_PTR(weights + 17584);
 80057f2:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_30_bias_array.format |= AI_FMT_FLAG_CONST;
 80057f6:	498c      	ldr	r1, [pc, #560]	; (8005a28 <ai_network_init+0x734>)
    conv2d_31_weights_array.format |= AI_FMT_FLAG_CONST;
 80057f8:	4a8c      	ldr	r2, [pc, #560]	; (8005a2c <ai_network_init+0x738>)
    conv2d_30_bias_array.format |= AI_FMT_FLAG_CONST;
 80057fa:	680e      	ldr	r6, [r1, #0]
    conv2d_30_weights_array.format |= AI_FMT_FLAG_CONST;
 80057fc:	603d      	str	r5, [r7, #0]
    conv2d_30_bias_array.format |= AI_FMT_FLAG_CONST;
 80057fe:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
    conv2d_31_weights_array.format |= AI_FMT_FLAG_CONST;
 8005802:	6815      	ldr	r5, [r2, #0]
    conv2d_30_bias_array.format |= AI_FMT_FLAG_CONST;
 8005804:	600e      	str	r6, [r1, #0]
    conv2d_31_weights_array.format |= AI_FMT_FLAG_CONST;
 8005806:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    conv2d_31_bias_array.format |= AI_FMT_FLAG_CONST;
 800580a:	681e      	ldr	r6, [r3, #0]
    conv2d_31_weights_array.format |= AI_FMT_FLAG_CONST;
 800580c:	6015      	str	r5, [r2, #0]
    conv2d_31_bias_array.format |= AI_FMT_FLAG_CONST;
 800580e:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
    conv2d_34_weights_array.format |= AI_FMT_FLAG_CONST;
 8005812:	4d87      	ldr	r5, [pc, #540]	; (8005a30 <ai_network_init+0x73c>)
    conv2d_31_bias_array.format |= AI_FMT_FLAG_CONST;
 8005814:	601e      	str	r6, [r3, #0]
    conv2d_33_bias_array.data = AI_PTR(weights + 34144);
 8005816:	f248 5660 	movw	r6, #34144	; 0x8560
    conv2d_31_bias_array.data_start = AI_PTR(weights + 30592);
 800581a:	e9c3 ee02 	strd	lr, lr, [r3, #8]
    conv2d_33_weights_array.format |= AI_FMT_FLAG_CONST;
 800581e:	f8d8 3000 	ldr.w	r3, [r8]
    conv2d_33_bias_array.data = AI_PTR(weights + 34144);
 8005822:	445e      	add	r6, fp
    conv2d_37_bias_array.format |= AI_FMT_FLAG_CONST;
 8005824:	f8df e260 	ldr.w	lr, [pc, #608]	; 8005a88 <ai_network_init+0x794>
    conv2d_33_weights_array.format |= AI_FMT_FLAG_CONST;
 8005828:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    conv2d_30_weights_array.data_start = AI_PTR(weights + 25264);
 800582c:	e9c7 aa02 	strd	sl, sl, [r7, #8]
    conv2d_33_bias_array.format |= AI_FMT_FLAG_CONST;
 8005830:	4f80      	ldr	r7, [pc, #512]	; (8005a34 <ai_network_init+0x740>)
    conv2d_33_weights_array.format |= AI_FMT_FLAG_CONST;
 8005832:	f8c8 3000 	str.w	r3, [r8]
    conv2d_33_bias_array.format |= AI_FMT_FLAG_CONST;
 8005836:	683b      	ldr	r3, [r7, #0]
    conv2d_33_bias_array.data = AI_PTR(weights + 34144);
 8005838:	60be      	str	r6, [r7, #8]
    conv2d_33_bias_array.format |= AI_FMT_FLAG_CONST;
 800583a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    conv2d_33_bias_array.data_start = AI_PTR(weights + 34144);
 800583e:	60fe      	str	r6, [r7, #12]
    conv2d_37_weights_array.data = AI_PTR(weights + 40144);
 8005840:	f649 46d0 	movw	r6, #40144	; 0x9cd0
    conv2d_35_weights_array.format |= AI_FMT_FLAG_CONST;
 8005844:	f8df a244 	ldr.w	sl, [pc, #580]	; 8005a8c <ai_network_init+0x798>
    conv2d_33_bias_array.format |= AI_FMT_FLAG_CONST;
 8005848:	603b      	str	r3, [r7, #0]
    conv2d_34_weights_array.format |= AI_FMT_FLAG_CONST;
 800584a:	682b      	ldr	r3, [r5, #0]
    conv2d_37_weights_array.data = AI_PTR(weights + 40144);
 800584c:	445e      	add	r6, fp
    conv2d_31_weights_array.data_start = AI_PTR(weights + 27136);
 800584e:	e9c2 cc02 	strd	ip, ip, [r2, #8]
    conv2d_34_weights_array.data = AI_PTR(weights + 34720);
 8005852:	f248 7ca0 	movw	ip, #34720	; 0x87a0
    conv2d_34_bias_array.data = AI_PTR(weights + 36016);
 8005856:	f648 42b0 	movw	r2, #36016	; 0x8cb0
    conv2d_34_weights_array.format |= AI_FMT_FLAG_CONST;
 800585a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    conv2d_37_weights_array.data = AI_PTR(weights + 40144);
 800585e:	9601      	str	r6, [sp, #4]
    conv2d_34_weights_array.data = AI_PTR(weights + 34720);
 8005860:	44dc      	add	ip, fp
    conv2d_34_bias_array.data = AI_PTR(weights + 36016);
 8005862:	445a      	add	r2, fp
    conv2d_34_weights_array.format |= AI_FMT_FLAG_CONST;
 8005864:	602b      	str	r3, [r5, #0]
    conv2d_34_weights_array.data = AI_PTR(weights + 34720);
 8005866:	f8c5 c008 	str.w	ip, [r5, #8]
    conv2d_34_weights_array.data_start = AI_PTR(weights + 34720);
 800586a:	f8c5 c00c 	str.w	ip, [r5, #12]
    conv2d_38_weights_array.data = AI_PTR(weights + 44176);
 800586e:	f64a 4c90 	movw	ip, #44176	; 0xac90
    conv2d_35_weights_array.format |= AI_FMT_FLAG_CONST;
 8005872:	f8da 3000 	ldr.w	r3, [sl]
    conv2d_38_weights_array.data = AI_PTR(weights + 44176);
 8005876:	44dc      	add	ip, fp
    conv2d_30_bias_array.data_start = AI_PTR(weights + 26560);
 8005878:	e9c1 4402 	strd	r4, r4, [r1, #8]
    conv2d_34_bias_array.format |= AI_FMT_FLAG_CONST;
 800587c:	496e      	ldr	r1, [pc, #440]	; (8005a38 <ai_network_init+0x744>)
    conv2d_33_weights_array.data = AI_PTR(weights + 30688);
 800587e:	9c00      	ldr	r4, [sp, #0]
    conv2d_34_bias_array.format |= AI_FMT_FLAG_CONST;
 8005880:	680d      	ldr	r5, [r1, #0]
    conv2d_34_bias_array.data = AI_PTR(weights + 36016);
 8005882:	9200      	str	r2, [sp, #0]
    conv2d_37_bias_array.data = AI_PTR(weights + 43600);
 8005884:	f64a 2250 	movw	r2, #43600	; 0xaa50
    conv2d_34_bias_array.data = AI_PTR(weights + 36016);
 8005888:	9f00      	ldr	r7, [sp, #0]
    conv2d_34_bias_array.format |= AI_FMT_FLAG_CONST;
 800588a:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    conv2d_37_bias_array.data = AI_PTR(weights + 43600);
 800588e:	eb0b 0602 	add.w	r6, fp, r2
    conv2d_37_weights_array.format |= AI_FMT_FLAG_CONST;
 8005892:	4a6a      	ldr	r2, [pc, #424]	; (8005a3c <ai_network_init+0x748>)
    conv2d_33_weights_array.data = AI_PTR(weights + 30688);
 8005894:	f8c8 4008 	str.w	r4, [r8, #8]
    conv2d_33_weights_array.data_start = AI_PTR(weights + 30688);
 8005898:	f8c8 400c 	str.w	r4, [r8, #12]
    conv2d_35_bias_array.data = AI_PTR(weights + 40048);
 800589c:	f649 4470 	movw	r4, #40048	; 0x9c70
    conv2d_37_bias_array.data = AI_PTR(weights + 43600);
 80058a0:	9602      	str	r6, [sp, #8]
    conv2d_35_weights_array.format |= AI_FMT_FLAG_CONST;
 80058a2:	f043 4680 	orr.w	r6, r3, #1073741824	; 0x40000000
    conv2d_34_bias_array.data = AI_PTR(weights + 36016);
 80058a6:	608f      	str	r7, [r1, #8]
    conv2d_35_bias_array.data = AI_PTR(weights + 40048);
 80058a8:	445c      	add	r4, fp
    conv2d_34_bias_array.data_start = AI_PTR(weights + 36016);
 80058aa:	60cf      	str	r7, [r1, #12]
    conv2d_35_weights_array.data = AI_PTR(weights + 36592);
 80058ac:	f648 68f0 	movw	r8, #36592	; 0x8ef0
    conv2d_34_bias_array.format |= AI_FMT_FLAG_CONST;
 80058b0:	600d      	str	r5, [r1, #0]
    conv2d_38_bias_array.data = AI_PTR(weights + 45472);
 80058b2:	f24b 17a0 	movw	r7, #45472	; 0xb1a0
    conv2d_35_bias_array.format |= AI_FMT_FLAG_CONST;
 80058b6:	f8d9 1000 	ldr.w	r1, [r9]
    conv2d_35_weights_array.data = AI_PTR(weights + 36592);
 80058ba:	44d8      	add	r8, fp
    conv2d_37_weights_array.format |= AI_FMT_FLAG_CONST;
 80058bc:	6813      	ldr	r3, [r2, #0]
    conv2d_38_bias_array.data = AI_PTR(weights + 45472);
 80058be:	445f      	add	r7, fp
    conv2d_35_bias_array.format |= AI_FMT_FLAG_CONST;
 80058c0:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    conv2d_35_weights_array.format |= AI_FMT_FLAG_CONST;
 80058c4:	f8ca 6000 	str.w	r6, [sl]
    conv2d_37_weights_array.format |= AI_FMT_FLAG_CONST;
 80058c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    conv2d_38_weights_array.format |= AI_FMT_FLAG_CONST;
 80058cc:	4e5c      	ldr	r6, [pc, #368]	; (8005a40 <ai_network_init+0x74c>)
    conv2d_35_bias_array.format |= AI_FMT_FLAG_CONST;
 80058ce:	f8c9 1000 	str.w	r1, [r9]
    conv2d_37_weights_array.format |= AI_FMT_FLAG_CONST;
 80058d2:	4611      	mov	r1, r2
 80058d4:	6013      	str	r3, [r2, #0]
    conv2d_37_weights_array.data = AI_PTR(weights + 40144);
 80058d6:	9a01      	ldr	r2, [sp, #4]
    conv2d_37_bias_array.format |= AI_FMT_FLAG_CONST;
 80058d8:	f8de 5000 	ldr.w	r5, [lr]
    conv2d_37_weights_array.data = AI_PTR(weights + 40144);
 80058dc:	608a      	str	r2, [r1, #8]
    conv2d_37_weights_array.data_start = AI_PTR(weights + 40144);
 80058de:	60ca      	str	r2, [r1, #12]
    conv2d_41_weights_array.data = AI_PTR(weights + 49600);
 80058e0:	f24c 11c0 	movw	r1, #49600	; 0xc1c0
    conv2d_37_bias_array.data = AI_PTR(weights + 43600);
 80058e4:	9a02      	ldr	r2, [sp, #8]
    conv2d_37_bias_array.format |= AI_FMT_FLAG_CONST;
 80058e6:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    conv2d_41_weights_array.data = AI_PTR(weights + 49600);
 80058ea:	4459      	add	r1, fp
    conv2d_38_bias_array.format |= AI_FMT_FLAG_CONST;
 80058ec:	4b55      	ldr	r3, [pc, #340]	; (8005a44 <ai_network_init+0x750>)
    conv2d_37_bias_array.data = AI_PTR(weights + 43600);
 80058ee:	f8ce 2008 	str.w	r2, [lr, #8]
    conv2d_37_bias_array.data_start = AI_PTR(weights + 43600);
 80058f2:	f8ce 200c 	str.w	r2, [lr, #12]
    conv2d_41_bias_array.data = AI_PTR(weights + 53056);
 80058f6:	f64c 7240 	movw	r2, #53056	; 0xcf40
    conv2d_41_weights_array.data = AI_PTR(weights + 49600);
 80058fa:	9101      	str	r1, [sp, #4]
    conv2d_41_bias_array.data = AI_PTR(weights + 53056);
 80058fc:	4611      	mov	r1, r2
    conv2d_38_weights_array.format |= AI_FMT_FLAG_CONST;
 80058fe:	6832      	ldr	r2, [r6, #0]
    conv2d_37_bias_array.format |= AI_FMT_FLAG_CONST;
 8005900:	f8ce 5000 	str.w	r5, [lr]
    conv2d_38_weights_array.format |= AI_FMT_FLAG_CONST;
 8005904:	9204      	str	r2, [sp, #16]
 8005906:	9a04      	ldr	r2, [sp, #16]
    conv2d_39_weights_array.format |= AI_FMT_FLAG_CONST;
 8005908:	4d4f      	ldr	r5, [pc, #316]	; (8005a48 <ai_network_init+0x754>)
    conv2d_38_weights_array.format |= AI_FMT_FLAG_CONST;
 800590a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    conv2d_38_weights_array.data = AI_PTR(weights + 44176);
 800590e:	f8c6 c008 	str.w	ip, [r6, #8]
    conv2d_38_weights_array.data_start = AI_PTR(weights + 44176);
 8005912:	f8c6 c00c 	str.w	ip, [r6, #12]
    conv2d_38_weights_array.format |= AI_FMT_FLAG_CONST;
 8005916:	6032      	str	r2, [r6, #0]
    conv2d_39_weights_array.format |= AI_FMT_FLAG_CONST;
 8005918:	682e      	ldr	r6, [r5, #0]
    conv2d_38_bias_array.format |= AI_FMT_FLAG_CONST;
 800591a:	681a      	ldr	r2, [r3, #0]
    conv2d_35_bias_array.data = AI_PTR(weights + 40048);
 800591c:	f8c9 4008 	str.w	r4, [r9, #8]
    conv2d_39_weights_array.format |= AI_FMT_FLAG_CONST;
 8005920:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
    conv2d_35_bias_array.data_start = AI_PTR(weights + 40048);
 8005924:	f8c9 400c 	str.w	r4, [r9, #12]
    conv2d_38_bias_array.format |= AI_FMT_FLAG_CONST;
 8005928:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    conv2d_39_bias_array.format |= AI_FMT_FLAG_CONST;
 800592c:	4c47      	ldr	r4, [pc, #284]	; (8005a4c <ai_network_init+0x758>)
    conv2d_39_bias_array.data = AI_PTR(weights + 49504);
 800592e:	f24c 1960 	movw	r9, #49504	; 0xc160
    conv2d_39_weights_array.format |= AI_FMT_FLAG_CONST;
 8005932:	602e      	str	r6, [r5, #0]
    conv2d_39_bias_array.format |= AI_FMT_FLAG_CONST;
 8005934:	6826      	ldr	r6, [r4, #0]
    conv2d_39_bias_array.data = AI_PTR(weights + 49504);
 8005936:	44d9      	add	r9, fp
    conv2d_41_weights_array.format |= AI_FMT_FLAG_CONST;
 8005938:	f8df e154 	ldr.w	lr, [pc, #340]	; 8005a90 <ai_network_init+0x79c>
    conv2d_38_bias_array.format |= AI_FMT_FLAG_CONST;
 800593c:	601a      	str	r2, [r3, #0]
    conv2d_38_bias_array.data = AI_PTR(weights + 45472);
 800593e:	609f      	str	r7, [r3, #8]
    conv2d_42_weights_array.format |= AI_FMT_FLAG_CONST;
 8005940:	4a43      	ldr	r2, [pc, #268]	; (8005a50 <ai_network_init+0x75c>)
    conv2d_38_bias_array.data_start = AI_PTR(weights + 45472);
 8005942:	60df      	str	r7, [r3, #12]
    conv2d_39_bias_array.format |= AI_FMT_FLAG_CONST;
 8005944:	f046 4780 	orr.w	r7, r6, #1073741824	; 0x40000000
    conv2d_42_bias_array.format |= AI_FMT_FLAG_CONST;
 8005948:	4b42      	ldr	r3, [pc, #264]	; (8005a54 <ai_network_init+0x760>)
    conv2d_44_weights_array.format |= AI_FMT_FLAG_CONST;
 800594a:	f8df c148 	ldr.w	ip, [pc, #328]	; 8005a94 <ai_network_init+0x7a0>
    conv2d_35_weights_array.data_start = AI_PTR(weights + 36592);
 800594e:	e9ca 8802 	strd	r8, r8, [sl, #8]
    conv2d_41_bias_array.data = AI_PTR(weights + 53056);
 8005952:	eb0b 0a01 	add.w	sl, fp, r1
    conv2d_39_weights_array.data = AI_PTR(weights + 46048);
 8005956:	f24b 38e0 	movw	r8, #46048	; 0xb3e0
    conv2d_42_weights_array.data = AI_PTR(weights + 53632);
 800595a:	f24d 1180 	movw	r1, #53632	; 0xd180
    conv2d_39_weights_array.data = AI_PTR(weights + 46048);
 800595e:	44d8      	add	r8, fp
    conv2d_41_bias_array.data = AI_PTR(weights + 53056);
 8005960:	f8cd a008 	str.w	sl, [sp, #8]
    conv2d_42_weights_array.data = AI_PTR(weights + 53632);
 8005964:	eb0b 0a01 	add.w	sl, fp, r1
    conv2d_41_bias_array.format |= AI_FMT_FLAG_CONST;
 8005968:	493b      	ldr	r1, [pc, #236]	; (8005a58 <ai_network_init+0x764>)
    conv2d_42_weights_array.data = AI_PTR(weights + 53632);
 800596a:	f8cd a000 	str.w	sl, [sp]
    conv2d_42_bias_array.data = AI_PTR(weights + 54928);
 800596e:	f24d 6a90 	movw	sl, #54928	; 0xd690
    conv2d_39_weights_array.data = AI_PTR(weights + 46048);
 8005972:	f8c5 8008 	str.w	r8, [r5, #8]
    conv2d_39_weights_array.data_start = AI_PTR(weights + 46048);
 8005976:	f8c5 800c 	str.w	r8, [r5, #12]
    conv2d_43_bias_array.data = AI_PTR(weights + 60112);
 800597a:	f64e 28d0 	movw	r8, #60112	; 0xead0
    conv2d_41_weights_array.format |= AI_FMT_FLAG_CONST;
 800597e:	f8de 5000 	ldr.w	r5, [lr]
    conv2d_42_bias_array.data = AI_PTR(weights + 54928);
 8005982:	44da      	add	sl, fp
    conv2d_39_bias_array.data = AI_PTR(weights + 49504);
 8005984:	f8c4 9008 	str.w	r9, [r4, #8]
    conv2d_43_bias_array.data = AI_PTR(weights + 60112);
 8005988:	44d8      	add	r8, fp
    conv2d_39_bias_array.data_start = AI_PTR(weights + 49504);
 800598a:	f8c4 900c 	str.w	r9, [r4, #12]
    conv2d_41_weights_array.format |= AI_FMT_FLAG_CONST;
 800598e:	f045 4680 	orr.w	r6, r5, #1073741824	; 0x40000000
    conv2d_39_bias_array.format |= AI_FMT_FLAG_CONST;
 8005992:	6027      	str	r7, [r4, #0]
    conv2d_43_weights_array.data = AI_PTR(weights + 55504);
 8005994:	f64d 09d0 	movw	r9, #55504	; 0xd8d0
    conv2d_42_weights_array.format |= AI_FMT_FLAG_CONST;
 8005998:	6814      	ldr	r4, [r2, #0]
    conv2d_41_weights_array.data = AI_PTR(weights + 49600);
 800599a:	9f01      	ldr	r7, [sp, #4]
    conv2d_43_weights_array.data = AI_PTR(weights + 55504);
 800599c:	44d9      	add	r9, fp
    conv2d_41_weights_array.format |= AI_FMT_FLAG_CONST;
 800599e:	f8ce 6000 	str.w	r6, [lr]
    conv2d_41_weights_array.data = AI_PTR(weights + 49600);
 80059a2:	f8ce 7008 	str.w	r7, [lr, #8]
    conv2d_42_weights_array.format |= AI_FMT_FLAG_CONST;
 80059a6:	f044 4780 	orr.w	r7, r4, #1073741824	; 0x40000000
    conv2d_41_weights_array.data_start = AI_PTR(weights + 49600);
 80059aa:	9c01      	ldr	r4, [sp, #4]
    conv2d_42_bias_array.format |= AI_FMT_FLAG_CONST;
 80059ac:	681e      	ldr	r6, [r3, #0]
    conv2d_41_weights_array.data_start = AI_PTR(weights + 49600);
 80059ae:	f8ce 400c 	str.w	r4, [lr, #12]
    conv2d_44_weights_array.data = AI_PTR(weights + 60240);
 80059b2:	f64e 3e50 	movw	lr, #60240	; 0xeb50
    conv2d_41_bias_array.data = AI_PTR(weights + 53056);
 80059b6:	9c02      	ldr	r4, [sp, #8]
    conv2d_41_bias_array.format |= AI_FMT_FLAG_CONST;
 80059b8:	680d      	ldr	r5, [r1, #0]
    conv2d_44_weights_array.data = AI_PTR(weights + 60240);
 80059ba:	44de      	add	lr, fp
    conv2d_41_bias_array.data = AI_PTR(weights + 53056);
 80059bc:	608c      	str	r4, [r1, #8]
    conv2d_42_bias_array.format |= AI_FMT_FLAG_CONST;
 80059be:	f046 4480 	orr.w	r4, r6, #1073741824	; 0x40000000
    conv2d_41_bias_array.data_start = AI_PTR(weights + 53056);
 80059c2:	9e02      	ldr	r6, [sp, #8]
    conv2d_41_bias_array.format |= AI_FMT_FLAG_CONST;
 80059c4:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    conv2d_42_bias_array.format |= AI_FMT_FLAG_CONST;
 80059c8:	601c      	str	r4, [r3, #0]
    conv2d_41_bias_array.data_start = AI_PTR(weights + 53056);
 80059ca:	60ce      	str	r6, [r1, #12]
    conv2d_43_weights_array.format |= AI_FMT_FLAG_CONST;
 80059cc:	4e23      	ldr	r6, [pc, #140]	; (8005a5c <ai_network_init+0x768>)
    conv2d_42_weights_array.format |= AI_FMT_FLAG_CONST;
 80059ce:	6017      	str	r7, [r2, #0]
    conv2d_43_weights_array.format |= AI_FMT_FLAG_CONST;
 80059d0:	6834      	ldr	r4, [r6, #0]
    conv2d_43_bias_array.format |= AI_FMT_FLAG_CONST;
 80059d2:	4f23      	ldr	r7, [pc, #140]	; (8005a60 <ai_network_init+0x76c>)
    conv2d_43_weights_array.format |= AI_FMT_FLAG_CONST;
 80059d4:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    conv2d_41_bias_array.format |= AI_FMT_FLAG_CONST;
 80059d8:	600d      	str	r5, [r1, #0]
    conv2d_43_weights_array.data = AI_PTR(weights + 55504);
 80059da:	f8c6 9008 	str.w	r9, [r6, #8]
    conv2d_42_weights_array.data = AI_PTR(weights + 53632);
 80059de:	9900      	ldr	r1, [sp, #0]
    conv2d_43_weights_array.format |= AI_FMT_FLAG_CONST;
 80059e0:	6034      	str	r4, [r6, #0]
    conv2d_43_weights_array.data_start = AI_PTR(weights + 55504);
 80059e2:	f8c6 900c 	str.w	r9, [r6, #12]
    conv2d_43_bias_array.format |= AI_FMT_FLAG_CONST;
 80059e6:	683e      	ldr	r6, [r7, #0]
    conv2d_44_bias_array.format |= AI_FMT_FLAG_CONST;
 80059e8:	4d1e      	ldr	r5, [pc, #120]	; (8005a64 <ai_network_init+0x770>)
    conv2d_42_weights_array.data = AI_PTR(weights + 53632);
 80059ea:	6091      	str	r1, [r2, #8]
    conv2d_43_bias_array.format |= AI_FMT_FLAG_CONST;
 80059ec:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
    conv2d_42_weights_array.data_start = AI_PTR(weights + 53632);
 80059f0:	60d1      	str	r1, [r2, #12]
    conv2d_57_bias_array.data = AI_PTR(weights + 135168);
 80059f2:	f50b 3104 	add.w	r1, fp, #135168	; 0x21000
    conv2d_44_weights_array.format |= AI_FMT_FLAG_CONST;
 80059f6:	f8dc 4000 	ldr.w	r4, [ip]
    conv2d_57_bias_array.data = AI_PTR(weights + 135168);
 80059fa:	9100      	str	r1, [sp, #0]
    conv2d_45_weights_array.format |= AI_FMT_FLAG_CONST;
 80059fc:	491a      	ldr	r1, [pc, #104]	; (8005a68 <ai_network_init+0x774>)
    conv2d_44_weights_array.format |= AI_FMT_FLAG_CONST;
 80059fe:	f044 4980 	orr.w	r9, r4, #1073741824	; 0x40000000
    conv2d_45_weights_array.data = AI_PTR(weights + 67152);
 8005a02:	4c1a      	ldr	r4, [pc, #104]	; (8005a6c <ai_network_init+0x778>)
    conv2d_45_bias_array.format |= AI_FMT_FLAG_CONST;
 8005a04:	4a1a      	ldr	r2, [pc, #104]	; (8005a70 <ai_network_init+0x77c>)
    conv2d_45_weights_array.data = AI_PTR(weights + 67152);
 8005a06:	445c      	add	r4, fp
    conv2d_42_bias_array.data_start = AI_PTR(weights + 54928);
 8005a08:	e9c3 aa02 	strd	sl, sl, [r3, #8]
 8005a0c:	e044      	b.n	8005a98 <ai_network_init+0x7a4>
 8005a0e:	bf00      	nop
 8005a10:	24004364 	.word	0x24004364
 8005a14:	24004158 	.word	0x24004158
 8005a18:	24004454 	.word	0x24004454
 8005a1c:	24004480 	.word	0x24004480
 8005a20:	240047a8 	.word	0x240047a8
 8005a24:	240047d4 	.word	0x240047d4
 8005a28:	240046b8 	.word	0x240046b8
 8005a2c:	24004898 	.word	0x24004898
 8005a30:	24004ad0 	.word	0x24004ad0
 8005a34:	240048c4 	.word	0x240048c4
 8005a38:	240049e0 	.word	0x240049e0
 8005a3c:	24004cdc 	.word	0x24004cdc
 8005a40:	24004df8 	.word	0x24004df8
 8005a44:	24004d08 	.word	0x24004d08
 8005a48:	24004ee8 	.word	0x24004ee8
 8005a4c:	24004e24 	.word	0x24004e24
 8005a50:	2400523c 	.word	0x2400523c
 8005a54:	2400514c 	.word	0x2400514c
 8005a58:	24005030 	.word	0x24005030
 8005a5c:	2400532c 	.word	0x2400532c
 8005a60:	24005268 	.word	0x24005268
 8005a64:	24005358 	.word	0x24005358
 8005a68:	24005564 	.word	0x24005564
 8005a6c:	00010650 	.word	0x00010650
 8005a70:	24005474 	.word	0x24005474
 8005a74:	24004274 	.word	0x24004274
 8005a78:	24004390 	.word	0x24004390
 8005a7c:	24004570 	.word	0x24004570
 8005a80:	240049b4 	.word	0x240049b4
 8005a84:	24004afc 	.word	0x24004afc
 8005a88:	24004bec 	.word	0x24004bec
 8005a8c:	24004bc0 	.word	0x24004bc0
 8005a90:	24005120 	.word	0x24005120
 8005a94:	24005448 	.word	0x24005448
    conv2d_43_bias_array.data = AI_PTR(weights + 60112);
 8005a98:	f8c7 8008 	str.w	r8, [r7, #8]
    conv2d_43_bias_array.data_start = AI_PTR(weights + 60112);
 8005a9c:	f8c7 800c 	str.w	r8, [r7, #12]
    conv2d_43_bias_array.format |= AI_FMT_FLAG_CONST;
 8005aa0:	603e      	str	r6, [r7, #0]
    conv2d_44_bias_array.format |= AI_FMT_FLAG_CONST;
 8005aa2:	682e      	ldr	r6, [r5, #0]
    conv2d_44_bias_array.data = AI_PTR(weights + 66384);
 8005aa4:	4fd0      	ldr	r7, [pc, #832]	; (8005de8 <ai_network_init+0xaf4>)
    conv2d_44_bias_array.format |= AI_FMT_FLAG_CONST;
 8005aa6:	f046 4880 	orr.w	r8, r6, #1073741824	; 0x40000000
    conv2d_45_weights_array.format |= AI_FMT_FLAG_CONST;
 8005aaa:	680e      	ldr	r6, [r1, #0]
    conv2d_44_bias_array.data = AI_PTR(weights + 66384);
 8005aac:	445f      	add	r7, fp
    conv2d_44_weights_array.format |= AI_FMT_FLAG_CONST;
 8005aae:	f8cc 9000 	str.w	r9, [ip]
    conv2d_46_bias_array.format |= AI_FMT_FLAG_CONST;
 8005ab2:	4bce      	ldr	r3, [pc, #824]	; (8005dec <ai_network_init+0xaf8>)
    conv2d_45_weights_array.format |= AI_FMT_FLAG_CONST;
 8005ab4:	f046 4980 	orr.w	r9, r6, #1073741824	; 0x40000000
    conv2d_44_weights_array.data = AI_PTR(weights + 60240);
 8005ab8:	f8cc e008 	str.w	lr, [ip, #8]
    conv2d_44_weights_array.data_start = AI_PTR(weights + 60240);
 8005abc:	f8cc e00c 	str.w	lr, [ip, #12]
    conv2d_44_bias_array.data = AI_PTR(weights + 66384);
 8005ac0:	60af      	str	r7, [r5, #8]
    conv2d_44_bias_array.data_start = AI_PTR(weights + 66384);
 8005ac2:	60ef      	str	r7, [r5, #12]
    conv2d_45_bias_array.data = AI_PTR(weights + 68880);
 8005ac4:	f8df c3bc 	ldr.w	ip, [pc, #956]	; 8005e84 <ai_network_init+0xb90>
    conv2d_46_bias_array.data = AI_PTR(weights + 75792);
 8005ac8:	4fc9      	ldr	r7, [pc, #804]	; (8005df0 <ai_network_init+0xafc>)
    conv2d_45_bias_array.format |= AI_FMT_FLAG_CONST;
 8005aca:	6816      	ldr	r6, [r2, #0]
    conv2d_45_bias_array.data = AI_PTR(weights + 68880);
 8005acc:	44dc      	add	ip, fp
    conv2d_45_weights_array.data = AI_PTR(weights + 67152);
 8005ace:	608c      	str	r4, [r1, #8]
    conv2d_46_bias_array.data = AI_PTR(weights + 75792);
 8005ad0:	445f      	add	r7, fp
    conv2d_45_weights_array.data_start = AI_PTR(weights + 67152);
 8005ad2:	60cc      	str	r4, [r1, #12]
    conv2d_45_bias_array.format |= AI_FMT_FLAG_CONST;
 8005ad4:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
    conv2d_45_weights_array.format |= AI_FMT_FLAG_CONST;
 8005ad8:	f8c1 9000 	str.w	r9, [r1]
    conv2d_46_bias_array.format |= AI_FMT_FLAG_CONST;
 8005adc:	6819      	ldr	r1, [r3, #0]
    conv2d_46_weights_array.format |= AI_FMT_FLAG_CONST;
 8005ade:	f8df a3a8 	ldr.w	sl, [pc, #936]	; 8005e88 <ai_network_init+0xb94>
    conv2d_44_bias_array.format |= AI_FMT_FLAG_CONST;
 8005ae2:	f8c5 8000 	str.w	r8, [r5]
    conv2d_46_bias_array.format |= AI_FMT_FLAG_CONST;
 8005ae6:	f041 4880 	orr.w	r8, r1, #1073741824	; 0x40000000
    conv2d_45_bias_array.data = AI_PTR(weights + 68880);
 8005aea:	f8c2 c008 	str.w	ip, [r2, #8]
    conv2d_45_bias_array.data_start = AI_PTR(weights + 68880);
 8005aee:	f8c2 c00c 	str.w	ip, [r2, #12]
    conv2d_46_weights_array.data = AI_PTR(weights + 69648);
 8005af2:	f8df e398 	ldr.w	lr, [pc, #920]	; 8005e8c <ai_network_init+0xb98>
    conv2d_48_weights_array.format |= AI_FMT_FLAG_CONST;
 8005af6:	f8df c398 	ldr.w	ip, [pc, #920]	; 8005e90 <ai_network_init+0xb9c>
    conv2d_49_weights_array.format |= AI_FMT_FLAG_CONST;
 8005afa:	4cbe      	ldr	r4, [pc, #760]	; (8005df4 <ai_network_init+0xb00>)
    conv2d_46_weights_array.data = AI_PTR(weights + 69648);
 8005afc:	44de      	add	lr, fp
    conv2d_46_weights_array.format |= AI_FMT_FLAG_CONST;
 8005afe:	f8da 5000 	ldr.w	r5, [sl]
    conv2d_45_bias_array.format |= AI_FMT_FLAG_CONST;
 8005b02:	6016      	str	r6, [r2, #0]
    conv2d_46_bias_array.format |= AI_FMT_FLAG_CONST;
 8005b04:	f8c3 8000 	str.w	r8, [r3]
    conv2d_46_weights_array.format |= AI_FMT_FLAG_CONST;
 8005b08:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    conv2d_48_bias_array.format |= AI_FMT_FLAG_CONST;
 8005b0c:	4eba      	ldr	r6, [pc, #744]	; (8005df8 <ai_network_init+0xb04>)
    conv2d_48_bias_array.data = AI_PTR(weights + 82064);
 8005b0e:	f8df 8384 	ldr.w	r8, [pc, #900]	; 8005e94 <ai_network_init+0xba0>
    conv2d_46_weights_array.format |= AI_FMT_FLAG_CONST;
 8005b12:	f8ca 5000 	str.w	r5, [sl]
    conv2d_48_bias_array.data = AI_PTR(weights + 82064);
 8005b16:	44d8      	add	r8, fp
    conv2d_50_weights_array.format |= AI_FMT_FLAG_CONST;
 8005b18:	4db8      	ldr	r5, [pc, #736]	; (8005dfc <ai_network_init+0xb08>)
    conv2d_50_bias_array.format |= AI_FMT_FLAG_CONST;
 8005b1a:	4ab9      	ldr	r2, [pc, #740]	; (8005e00 <ai_network_init+0xb0c>)
    conv2d_48_bias_array.data = AI_PTR(weights + 82064);
 8005b1c:	f8c6 8008 	str.w	r8, [r6, #8]
    conv2d_49_bias_array.format |= AI_FMT_FLAG_CONST;
 8005b20:	49b8      	ldr	r1, [pc, #736]	; (8005e04 <ai_network_init+0xb10>)
    conv2d_52_bias_array.format |= AI_FMT_FLAG_CONST;
 8005b22:	f8df 9374 	ldr.w	r9, [pc, #884]	; 8005e98 <ai_network_init+0xba4>
    conv2d_46_bias_array.data_start = AI_PTR(weights + 75792);
 8005b26:	e9c3 7702 	strd	r7, r7, [r3, #8]
    conv2d_48_weights_array.data = AI_PTR(weights + 75920);
 8005b2a:	4fb7      	ldr	r7, [pc, #732]	; (8005e08 <ai_network_init+0xb14>)
    conv2d_48_weights_array.format |= AI_FMT_FLAG_CONST;
 8005b2c:	f8dc 3000 	ldr.w	r3, [ip]
    conv2d_48_weights_array.data = AI_PTR(weights + 75920);
 8005b30:	445f      	add	r7, fp
    conv2d_46_weights_array.data_start = AI_PTR(weights + 69648);
 8005b32:	e9ca ee02 	strd	lr, lr, [sl, #8]
    conv2d_48_weights_array.data = AI_PTR(weights + 75920);
 8005b36:	f8cc 7008 	str.w	r7, [ip, #8]
    conv2d_48_weights_array.format |= AI_FMT_FLAG_CONST;
 8005b3a:	f043 4e80 	orr.w	lr, r3, #1073741824	; 0x40000000
    conv2d_48_weights_array.data_start = AI_PTR(weights + 75920);
 8005b3e:	f8cc 700c 	str.w	r7, [ip, #12]
    conv2d_48_bias_array.format |= AI_FMT_FLAG_CONST;
 8005b42:	6833      	ldr	r3, [r6, #0]
    conv2d_49_weights_array.format |= AI_FMT_FLAG_CONST;
 8005b44:	6827      	ldr	r7, [r4, #0]
    conv2d_48_weights_array.format |= AI_FMT_FLAG_CONST;
 8005b46:	f8cc e000 	str.w	lr, [ip]
    conv2d_48_bias_array.format |= AI_FMT_FLAG_CONST;
 8005b4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    conv2d_49_weights_array.format |= AI_FMT_FLAG_CONST;
 8005b4e:	f047 4c80 	orr.w	ip, r7, #1073741824	; 0x40000000
    conv2d_49_weights_array.data = AI_PTR(weights + 82832);
 8005b52:	f8df e348 	ldr.w	lr, [pc, #840]	; 8005e9c <ai_network_init+0xba8>
    conv2d_49_bias_array.data = AI_PTR(weights + 84560);
 8005b56:	4fad      	ldr	r7, [pc, #692]	; (8005e0c <ai_network_init+0xb18>)
    conv2d_49_weights_array.format |= AI_FMT_FLAG_CONST;
 8005b58:	f8c4 c000 	str.w	ip, [r4]
    conv2d_49_weights_array.data = AI_PTR(weights + 82832);
 8005b5c:	44de      	add	lr, fp
    conv2d_48_bias_array.format |= AI_FMT_FLAG_CONST;
 8005b5e:	6033      	str	r3, [r6, #0]
    conv2d_49_bias_array.data = AI_PTR(weights + 84560);
 8005b60:	445f      	add	r7, fp
    conv2d_48_bias_array.data_start = AI_PTR(weights + 82064);
 8005b62:	f8c6 800c 	str.w	r8, [r6, #12]
    conv2d_50_weights_array.data = AI_PTR(weights + 85328);
 8005b66:	f8df c338 	ldr.w	ip, [pc, #824]	; 8005ea0 <ai_network_init+0xbac>
    conv2d_50_weights_array.format |= AI_FMT_FLAG_CONST;
 8005b6a:	682e      	ldr	r6, [r5, #0]
    conv2d_50_weights_array.data = AI_PTR(weights + 85328);
 8005b6c:	44dc      	add	ip, fp
    conv2d_49_weights_array.data = AI_PTR(weights + 82832);
 8005b6e:	f8c4 e008 	str.w	lr, [r4, #8]
    conv2d_49_weights_array.data_start = AI_PTR(weights + 82832);
 8005b72:	f8c4 e00c 	str.w	lr, [r4, #12]
    conv2d_50_weights_array.format |= AI_FMT_FLAG_CONST;
 8005b76:	f046 4e80 	orr.w	lr, r6, #1073741824	; 0x40000000
    conv2d_50_bias_array.data = AI_PTR(weights + 91472);
 8005b7a:	4ca5      	ldr	r4, [pc, #660]	; (8005e10 <ai_network_init+0xb1c>)
    conv2d_50_bias_array.format |= AI_FMT_FLAG_CONST;
 8005b7c:	6816      	ldr	r6, [r2, #0]
    conv2d_49_bias_array.format |= AI_FMT_FLAG_CONST;
 8005b7e:	680b      	ldr	r3, [r1, #0]
    conv2d_50_bias_array.data = AI_PTR(weights + 91472);
 8005b80:	445c      	add	r4, fp
    conv2d_50_weights_array.data = AI_PTR(weights + 85328);
 8005b82:	f8c5 c008 	str.w	ip, [r5, #8]
    conv2d_50_bias_array.format |= AI_FMT_FLAG_CONST;
 8005b86:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
    conv2d_50_weights_array.data_start = AI_PTR(weights + 85328);
 8005b8a:	f8c5 c00c 	str.w	ip, [r5, #12]
    conv2d_49_bias_array.format |= AI_FMT_FLAG_CONST;
 8005b8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    conv2d_54_weights_array.format |= AI_FMT_FLAG_CONST;
 8005b92:	f8df c310 	ldr.w	ip, [pc, #784]	; 8005ea4 <ai_network_init+0xbb0>
    conv2d_50_weights_array.format |= AI_FMT_FLAG_CONST;
 8005b96:	f8c5 e000 	str.w	lr, [r5]
    conv2d_50_bias_array.data = AI_PTR(weights + 91472);
 8005b9a:	6094      	str	r4, [r2, #8]
    conv2d_52_bias_array.format |= AI_FMT_FLAG_CONST;
 8005b9c:	f8d9 5000 	ldr.w	r5, [r9]
    conv2d_50_bias_array.data_start = AI_PTR(weights + 91472);
 8005ba0:	60d4      	str	r4, [r2, #12]
    conv2d_50_bias_array.format |= AI_FMT_FLAG_CONST;
 8005ba2:	6016      	str	r6, [r2, #0]
    conv2d_52_bias_array.format |= AI_FMT_FLAG_CONST;
 8005ba4:	f045 4e80 	orr.w	lr, r5, #1073741824	; 0x40000000
    conv2d_54_weights_array.format |= AI_FMT_FLAG_CONST;
 8005ba8:	f8dc 2000 	ldr.w	r2, [ip]
    conv2d_54_bias_array.format |= AI_FMT_FLAG_CONST;
 8005bac:	4e99      	ldr	r6, [pc, #612]	; (8005e14 <ai_network_init+0xb20>)
    conv2d_52_weights_array.format |= AI_FMT_FLAG_CONST;
 8005bae:	f8df a2f8 	ldr.w	sl, [pc, #760]	; 8005ea8 <ai_network_init+0xbb4>
    conv2d_54_weights_array.format |= AI_FMT_FLAG_CONST;
 8005bb2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    conv2d_49_bias_array.format |= AI_FMT_FLAG_CONST;
 8005bb6:	600b      	str	r3, [r1, #0]
    conv2d_52_bias_array.data = AI_PTR(weights + 97744);
 8005bb8:	4b97      	ldr	r3, [pc, #604]	; (8005e18 <ai_network_init+0xb24>)
    conv2d_49_bias_array.data = AI_PTR(weights + 84560);
 8005bba:	608f      	str	r7, [r1, #8]
    conv2d_49_bias_array.data_start = AI_PTR(weights + 84560);
 8005bbc:	60cf      	str	r7, [r1, #12]
    conv2d_52_bias_array.data = AI_PTR(weights + 97744);
 8005bbe:	445b      	add	r3, fp
    conv2d_52_weights_array.format |= AI_FMT_FLAG_CONST;
 8005bc0:	f8da 7000 	ldr.w	r7, [sl]
    conv2d_52_bias_array.format |= AI_FMT_FLAG_CONST;
 8005bc4:	f8c9 e000 	str.w	lr, [r9]
    conv2d_54_weights_array.format |= AI_FMT_FLAG_CONST;
 8005bc8:	f8cc 2000 	str.w	r2, [ip]
    conv2d_52_weights_array.format |= AI_FMT_FLAG_CONST;
 8005bcc:	f047 4780 	orr.w	r7, r7, #1073741824	; 0x40000000
    conv2d_54_bias_array.format |= AI_FMT_FLAG_CONST;
 8005bd0:	6832      	ldr	r2, [r6, #0]
    conv2d_52_weights_array.data = AI_PTR(weights + 91600);
 8005bd2:	4992      	ldr	r1, [pc, #584]	; (8005e1c <ai_network_init+0xb28>)
    conv2d_54_weights_array.data = AI_PTR(weights + 98512);
 8005bd4:	f8df 82d4 	ldr.w	r8, [pc, #724]	; 8005eac <ai_network_init+0xbb8>
    conv2d_54_bias_array.format |= AI_FMT_FLAG_CONST;
 8005bd8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    conv2d_54_bias_array.data = AI_PTR(weights + 100240);
 8005bdc:	f8df e2d0 	ldr.w	lr, [pc, #720]	; 8005eb0 <ai_network_init+0xbbc>
    conv2d_52_weights_array.data = AI_PTR(weights + 91600);
 8005be0:	4459      	add	r1, fp
    conv2d_55_weights_array.format |= AI_FMT_FLAG_CONST;
 8005be2:	4c8f      	ldr	r4, [pc, #572]	; (8005e20 <ai_network_init+0xb2c>)
    conv2d_54_weights_array.data = AI_PTR(weights + 98512);
 8005be4:	44d8      	add	r8, fp
    conv2d_55_bias_array.format |= AI_FMT_FLAG_CONST;
 8005be6:	4d8f      	ldr	r5, [pc, #572]	; (8005e24 <ai_network_init+0xb30>)
    conv2d_54_bias_array.data = AI_PTR(weights + 100240);
 8005be8:	44de      	add	lr, fp
    conv2d_52_weights_array.format |= AI_FMT_FLAG_CONST;
 8005bea:	f8ca 7000 	str.w	r7, [sl]
    conv2d_54_weights_array.data = AI_PTR(weights + 98512);
 8005bee:	f8cc 8008 	str.w	r8, [ip, #8]
    conv2d_56_weights_array.format |= AI_FMT_FLAG_CONST;
 8005bf2:	4f8d      	ldr	r7, [pc, #564]	; (8005e28 <ai_network_init+0xb34>)
    conv2d_54_weights_array.data_start = AI_PTR(weights + 98512);
 8005bf4:	f8cc 800c 	str.w	r8, [ip, #12]
    conv2d_54_bias_array.data = AI_PTR(weights + 100240);
 8005bf8:	f8c6 e008 	str.w	lr, [r6, #8]
    conv2d_55_weights_array.data = AI_PTR(weights + 101008);
 8005bfc:	f8df c2b4 	ldr.w	ip, [pc, #692]	; 8005eb4 <ai_network_init+0xbc0>
    conv2d_52_bias_array.data_start = AI_PTR(weights + 97744);
 8005c00:	e9c9 3302 	strd	r3, r3, [r9, #8]
    conv2d_57_bias_array.format |= AI_FMT_FLAG_CONST;
 8005c04:	f8df 92b0 	ldr.w	r9, [pc, #688]	; 8005eb8 <ai_network_init+0xbc4>
    conv2d_55_weights_array.data = AI_PTR(weights + 101008);
 8005c08:	44dc      	add	ip, fp
    conv2d_57_bias_array.data = AI_PTR(weights + 135168);
 8005c0a:	9b00      	ldr	r3, [sp, #0]
    conv2d_52_weights_array.data_start = AI_PTR(weights + 91600);
 8005c0c:	e9ca 1102 	strd	r1, r1, [sl, #8]
    conv2d_57_bias_array.data = AI_PTR(weights + 135168);
 8005c10:	f8c9 3008 	str.w	r3, [r9, #8]
    conv2d_55_weights_array.format |= AI_FMT_FLAG_CONST;
 8005c14:	6823      	ldr	r3, [r4, #0]
    conv2d_54_bias_array.format |= AI_FMT_FLAG_CONST;
 8005c16:	6032      	str	r2, [r6, #0]
    conv2d_54_bias_array.data_start = AI_PTR(weights + 100240);
 8005c18:	f8c6 e00c 	str.w	lr, [r6, #12]
    conv2d_55_weights_array.format |= AI_FMT_FLAG_CONST;
 8005c1c:	f043 4880 	orr.w	r8, r3, #1073741824	; 0x40000000
    conv2d_55_bias_array.format |= AI_FMT_FLAG_CONST;
 8005c20:	682a      	ldr	r2, [r5, #0]
    conv2d_55_bias_array.data = AI_PTR(weights + 111760);
 8005c22:	4e82      	ldr	r6, [pc, #520]	; (8005e2c <ai_network_init+0xb38>)
    conv2d_56_weights_array.format |= AI_FMT_FLAG_CONST;
 8005c24:	683b      	ldr	r3, [r7, #0]
    conv2d_55_bias_array.format |= AI_FMT_FLAG_CONST;
 8005c26:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    conv2d_56_bias_array.format |= AI_FMT_FLAG_CONST;
 8005c2a:	4981      	ldr	r1, [pc, #516]	; (8005e30 <ai_network_init+0xb3c>)
    conv2d_55_bias_array.data = AI_PTR(weights + 111760);
 8005c2c:	445e      	add	r6, fp
    conv2d_57_weights_array.format |= AI_FMT_FLAG_CONST;
 8005c2e:	f8df a28c 	ldr.w	sl, [pc, #652]	; 8005ebc <ai_network_init+0xbc8>
    conv2d_55_weights_array.data = AI_PTR(weights + 101008);
 8005c32:	f8c4 c008 	str.w	ip, [r4, #8]
    conv2d_55_weights_array.data_start = AI_PTR(weights + 101008);
 8005c36:	f8c4 c00c 	str.w	ip, [r4, #12]
    conv2d_56_weights_array.format |= AI_FMT_FLAG_CONST;
 8005c3a:	f043 4c80 	orr.w	ip, r3, #1073741824	; 0x40000000
    conv2d_55_bias_array.data = AI_PTR(weights + 111760);
 8005c3e:	60ae      	str	r6, [r5, #8]
    conv2d_56_bias_array.format |= AI_FMT_FLAG_CONST;
 8005c40:	680b      	ldr	r3, [r1, #0]
    conv2d_55_bias_array.data_start = AI_PTR(weights + 111760);
 8005c42:	60ee      	str	r6, [r5, #12]
    conv2d_55_bias_array.format |= AI_FMT_FLAG_CONST;
 8005c44:	602a      	str	r2, [r5, #0]
    conv2d_57_weights_array.format |= AI_FMT_FLAG_CONST;
 8005c46:	f8da 6000 	ldr.w	r6, [sl]
    conv2d_57_bias_array.format |= AI_FMT_FLAG_CONST;
 8005c4a:	f8d9 5000 	ldr.w	r5, [r9]
    conv2d_56_weights_array.format |= AI_FMT_FLAG_CONST;
 8005c4e:	f8c7 c000 	str.w	ip, [r7]
    conv2d_57_weights_array.format |= AI_FMT_FLAG_CONST;
 8005c52:	f046 4c80 	orr.w	ip, r6, #1073741824	; 0x40000000
    conv2d_55_weights_array.format |= AI_FMT_FLAG_CONST;
 8005c56:	f8c4 8000 	str.w	r8, [r4]
    conv2d_57_bias_array.format |= AI_FMT_FLAG_CONST;
 8005c5a:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    conv2d_58_weights_array.format |= AI_FMT_FLAG_CONST;
 8005c5e:	4e75      	ldr	r6, [pc, #468]	; (8005e34 <ai_network_init+0xb40>)
    conv2d_56_bias_array.format |= AI_FMT_FLAG_CONST;
 8005c60:	f043 4880 	orr.w	r8, r3, #1073741824	; 0x40000000
    conv2d_56_weights_array.data = AI_PTR(weights + 111984);
 8005c64:	f8df e258 	ldr.w	lr, [pc, #600]	; 8005ec0 <ai_network_init+0xbcc>
    conv2d_57_bias_array.data_start = AI_PTR(weights + 135168);
 8005c68:	9b00      	ldr	r3, [sp, #0]
    conv2d_57_weights_array.data = AI_PTR(weights + 132144);
 8005c6a:	4a73      	ldr	r2, [pc, #460]	; (8005e38 <ai_network_init+0xb44>)
    conv2d_56_weights_array.data = AI_PTR(weights + 111984);
 8005c6c:	44de      	add	lr, fp
    conv2d_57_bias_array.data_start = AI_PTR(weights + 135168);
 8005c6e:	f8c9 300c 	str.w	r3, [r9, #12]
    conv2d_57_weights_array.data = AI_PTR(weights + 132144);
 8005c72:	445a      	add	r2, fp
    conv2d_58_weights_array.format |= AI_FMT_FLAG_CONST;
 8005c74:	6833      	ldr	r3, [r6, #0]
    conv2d_57_bias_array.format |= AI_FMT_FLAG_CONST;
 8005c76:	f8c9 5000 	str.w	r5, [r9]
    conv2d_56_bias_array.data = AI_PTR(weights + 130800);
 8005c7a:	4c70      	ldr	r4, [pc, #448]	; (8005e3c <ai_network_init+0xb48>)
    conv2d_58_weights_array.data = AI_PTR(weights + 136512);
 8005c7c:	4d70      	ldr	r5, [pc, #448]	; (8005e40 <ai_network_init+0xb4c>)
    conv2d_56_bias_array.data = AI_PTR(weights + 130800);
 8005c7e:	445c      	add	r4, fp
    conv2d_56_weights_array.data = AI_PTR(weights + 111984);
 8005c80:	f8c7 e008 	str.w	lr, [r7, #8]
    conv2d_58_weights_array.data = AI_PTR(weights + 136512);
 8005c84:	445d      	add	r5, fp
    conv2d_56_weights_array.data_start = AI_PTR(weights + 111984);
 8005c86:	f8c7 e00c 	str.w	lr, [r7, #12]
    conv2d_56_bias_array.format |= AI_FMT_FLAG_CONST;
 8005c8a:	f8c1 8000 	str.w	r8, [r1]
    conv2d_58_bias_array.format |= AI_FMT_FLAG_CONST;
 8005c8e:	f8df e234 	ldr.w	lr, [pc, #564]	; 8005ec4 <ai_network_init+0xbd0>
    conv2d_60_weights_array.format |= AI_FMT_FLAG_CONST;
 8005c92:	4f6c      	ldr	r7, [pc, #432]	; (8005e44 <ai_network_init+0xb50>)
    conv2d_57_weights_array.format |= AI_FMT_FLAG_CONST;
 8005c94:	f8ca c000 	str.w	ip, [sl]
    conv2d_58_bias_array.data = AI_PTR(weights + 155328);
 8005c98:	f8df 822c 	ldr.w	r8, [pc, #556]	; 8005ec8 <ai_network_init+0xbd4>
    conv2d_58_weights_array.data = AI_PTR(weights + 136512);
 8005c9c:	60b5      	str	r5, [r6, #8]
    conv2d_58_bias_array.data = AI_PTR(weights + 155328);
 8005c9e:	44d8      	add	r8, fp
    conv2d_58_weights_array.data_start = AI_PTR(weights + 136512);
 8005ca0:	60f5      	str	r5, [r6, #12]
    conv2d_60_bias_array.data = AI_PTR(weights + 174368);
 8005ca2:	4d69      	ldr	r5, [pc, #420]	; (8005e48 <ai_network_init+0xb54>)
    conv2d_60_weights_array.data = AI_PTR(weights + 155552);
 8005ca4:	f8df c224 	ldr.w	ip, [pc, #548]	; 8005ecc <ai_network_init+0xbd8>
    conv2d_60_bias_array.data = AI_PTR(weights + 174368);
 8005ca8:	445d      	add	r5, fp
    conv2d_60_weights_array.data = AI_PTR(weights + 155552);
 8005caa:	44dc      	add	ip, fp
    conv2d_57_weights_array.data_start = AI_PTR(weights + 132144);
 8005cac:	e9ca 2202 	strd	r2, r2, [sl, #8]
    conv2d_58_weights_array.format |= AI_FMT_FLAG_CONST;
 8005cb0:	f043 4a80 	orr.w	sl, r3, #1073741824	; 0x40000000
    conv2d_61_bias_array.format |= AI_FMT_FLAG_CONST;
 8005cb4:	4a65      	ldr	r2, [pc, #404]	; (8005e4c <ai_network_init+0xb58>)
    conv2d_58_bias_array.format |= AI_FMT_FLAG_CONST;
 8005cb6:	f8de 3000 	ldr.w	r3, [lr]
    conv2d_58_weights_array.format |= AI_FMT_FLAG_CONST;
 8005cba:	f8c6 a000 	str.w	sl, [r6]
    conv2d_60_weights_array.format |= AI_FMT_FLAG_CONST;
 8005cbe:	683e      	ldr	r6, [r7, #0]
    conv2d_58_bias_array.format |= AI_FMT_FLAG_CONST;
 8005cc0:	f043 4980 	orr.w	r9, r3, #1073741824	; 0x40000000
    conv2d_56_bias_array.data_start = AI_PTR(weights + 130800);
 8005cc4:	e9c1 4402 	strd	r4, r4, [r1, #8]
    conv2d_60_bias_array.format |= AI_FMT_FLAG_CONST;
 8005cc8:	4c61      	ldr	r4, [pc, #388]	; (8005e50 <ai_network_init+0xb5c>)
    conv2d_60_weights_array.format |= AI_FMT_FLAG_CONST;
 8005cca:	f046 4a80 	orr.w	sl, r6, #1073741824	; 0x40000000
    conv2d_58_bias_array.data = AI_PTR(weights + 155328);
 8005cce:	f8ce 8008 	str.w	r8, [lr, #8]
    conv2d_60_bias_array.format |= AI_FMT_FLAG_CONST;
 8005cd2:	6826      	ldr	r6, [r4, #0]
    conv2d_61_bias_array.format |= AI_FMT_FLAG_CONST;
 8005cd4:	6813      	ldr	r3, [r2, #0]
    conv2d_58_bias_array.format |= AI_FMT_FLAG_CONST;
 8005cd6:	f8ce 9000 	str.w	r9, [lr]
    conv2d_58_bias_array.data_start = AI_PTR(weights + 155328);
 8005cda:	f8ce 800c 	str.w	r8, [lr, #12]
    conv2d_61_bias_array.format |= AI_FMT_FLAG_CONST;
 8005cde:	f043 4980 	orr.w	r9, r3, #1073741824	; 0x40000000
    conv2d_60_bias_array.format |= AI_FMT_FLAG_CONST;
 8005ce2:	f046 4880 	orr.w	r8, r6, #1073741824	; 0x40000000
    conv2d_62_weights_array.format |= AI_FMT_FLAG_CONST;
 8005ce6:	4b5b      	ldr	r3, [pc, #364]	; (8005e54 <ai_network_init+0xb60>)
    conv2d_60_bias_array.data = AI_PTR(weights + 174368);
 8005ce8:	60a5      	str	r5, [r4, #8]
    conv2d_60_bias_array.format |= AI_FMT_FLAG_CONST;
 8005cea:	f8c4 8000 	str.w	r8, [r4]
    conv2d_60_bias_array.data_start = AI_PTR(weights + 174368);
 8005cee:	60e5      	str	r5, [r4, #12]
    conv2d_62_weights_array.format |= AI_FMT_FLAG_CONST;
 8005cf0:	681c      	ldr	r4, [r3, #0]
    conv2d_60_weights_array.format |= AI_FMT_FLAG_CONST;
 8005cf2:	f8c7 a000 	str.w	sl, [r7]
    conv2d_62_weights_array.format |= AI_FMT_FLAG_CONST;
 8005cf6:	f044 4a80 	orr.w	sl, r4, #1073741824	; 0x40000000
    conv2d_62_bias_array.format |= AI_FMT_FLAG_CONST;
 8005cfa:	4c57      	ldr	r4, [pc, #348]	; (8005e58 <ai_network_init+0xb64>)
    conv2d_61_weights_array.data = AI_PTR(weights + 175712);
 8005cfc:	f8df e1d0 	ldr.w	lr, [pc, #464]	; 8005ed0 <ai_network_init+0xbdc>
    conv2d_62_bias_array.format |= AI_FMT_FLAG_CONST;
 8005d00:	4623      	mov	r3, r4
 8005d02:	6824      	ldr	r4, [r4, #0]
    conv2d_61_weights_array.format |= AI_FMT_FLAG_CONST;
 8005d04:	4955      	ldr	r1, [pc, #340]	; (8005e5c <ai_network_init+0xb68>)
    conv2d_61_weights_array.data = AI_PTR(weights + 175712);
 8005d06:	44de      	add	lr, fp
    conv2d_60_weights_array.data = AI_PTR(weights + 155552);
 8005d08:	f8c7 c008 	str.w	ip, [r7, #8]
    conv2d_62_bias_array.format |= AI_FMT_FLAG_CONST;
 8005d0c:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    conv2d_60_weights_array.data_start = AI_PTR(weights + 155552);
 8005d10:	f8c7 c00c 	str.w	ip, [r7, #12]
    conv2d_62_bias_array.data = AI_PTR(weights + 198896);
 8005d14:	4d52      	ldr	r5, [pc, #328]	; (8005e60 <ai_network_init+0xb6c>)
    conv2d_61_bias_array.data = AI_PTR(weights + 178736);
 8005d16:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 8005ed4 <ai_network_init+0xbe0>
    conv2d_62_bias_array.data = AI_PTR(weights + 198896);
 8005d1a:	445d      	add	r5, fp
    conv2d_61_weights_array.data = AI_PTR(weights + 175712);
 8005d1c:	f8c1 e008 	str.w	lr, [r1, #8]
    conv2d_61_bias_array.data = AI_PTR(weights + 178736);
 8005d20:	44dc      	add	ip, fp
    conv2d_61_weights_array.data_start = AI_PTR(weights + 175712);
 8005d22:	f8c1 e00c 	str.w	lr, [r1, #12]
    conv2d_62_bias_array.format |= AI_FMT_FLAG_CONST;
 8005d26:	601c      	str	r4, [r3, #0]
    conv2d_64_weights_array.format |= AI_FMT_FLAG_CONST;
 8005d28:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 8005ed8 <ai_network_init+0xbe4>
    conv2d_64_weights_array.data = AI_PTR(weights + 199120);
 8005d2c:	4c4d      	ldr	r4, [pc, #308]	; (8005e64 <ai_network_init+0xb70>)
    conv2d_64_bias_array.format |= AI_FMT_FLAG_CONST;
 8005d2e:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8005edc <ai_network_init+0xbe8>
    conv2d_61_weights_array.format |= AI_FMT_FLAG_CONST;
 8005d32:	680e      	ldr	r6, [r1, #0]
    conv2d_64_weights_array.data = AI_PTR(weights + 199120);
 8005d34:	445c      	add	r4, fp
    conv2d_61_bias_array.format |= AI_FMT_FLAG_CONST;
 8005d36:	f8c2 9000 	str.w	r9, [r2]
    conv2d_64_weights_array.data = AI_PTR(weights + 199120);
 8005d3a:	f8ce 4008 	str.w	r4, [lr, #8]
    conv2d_61_weights_array.format |= AI_FMT_FLAG_CONST;
 8005d3e:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
    conv2d_64_weights_array.data_start = AI_PTR(weights + 199120);
 8005d42:	f8ce 400c 	str.w	r4, [lr, #12]
    conv2d_62_weights_array.data = AI_PTR(weights + 180080);
 8005d46:	4f48      	ldr	r7, [pc, #288]	; (8005e68 <ai_network_init+0xb74>)
    conv2d_64_bias_array.data = AI_PTR(weights + 217936);
 8005d48:	f8df 9194 	ldr.w	r9, [pc, #404]	; 8005ee0 <ai_network_init+0xbec>
    conv2d_62_weights_array.data = AI_PTR(weights + 180080);
 8005d4c:	445f      	add	r7, fp
    conv2d_61_weights_array.format |= AI_FMT_FLAG_CONST;
 8005d4e:	600e      	str	r6, [r1, #0]
    conv2d_64_bias_array.data = AI_PTR(weights + 217936);
 8005d50:	44d9      	add	r9, fp
    conv2d_65_bias_array.format |= AI_FMT_FLAG_CONST;
 8005d52:	4946      	ldr	r1, [pc, #280]	; (8005e6c <ai_network_init+0xb78>)
    conv2d_62_weights_array.data = AI_PTR(weights + 180080);
 8005d54:	4e3f      	ldr	r6, [pc, #252]	; (8005e54 <ai_network_init+0xb60>)
    conv2d_61_bias_array.data_start = AI_PTR(weights + 178736);
 8005d56:	e9c2 cc02 	strd	ip, ip, [r2, #8]
    conv2d_62_bias_array.data_start = AI_PTR(weights + 198896);
 8005d5a:	e9c3 5502 	strd	r5, r5, [r3, #8]
    conv2d_65_weights_array.format |= AI_FMT_FLAG_CONST;
 8005d5e:	f8df c184 	ldr.w	ip, [pc, #388]	; 8005ee4 <ai_network_init+0xbf0>
    conv2d_64_weights_array.format |= AI_FMT_FLAG_CONST;
 8005d62:	f8de 3000 	ldr.w	r3, [lr]
    conv2d_65_weights_array.format |= AI_FMT_FLAG_CONST;
 8005d66:	f8dc 4000 	ldr.w	r4, [ip]
    conv2d_64_weights_array.format |= AI_FMT_FLAG_CONST;
 8005d6a:	f043 4580 	orr.w	r5, r3, #1073741824	; 0x40000000
    conv2d_64_bias_array.format |= AI_FMT_FLAG_CONST;
 8005d6e:	f8d8 3000 	ldr.w	r3, [r8]
    conv2d_65_weights_array.format |= AI_FMT_FLAG_CONST;
 8005d72:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    conv2d_62_weights_array.format |= AI_FMT_FLAG_CONST;
 8005d76:	f8c6 a000 	str.w	sl, [r6]
    conv2d_64_bias_array.format |= AI_FMT_FLAG_CONST;
 8005d7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    conv2d_64_weights_array.format |= AI_FMT_FLAG_CONST;
 8005d7e:	f8ce 5000 	str.w	r5, [lr]
    conv2d_65_weights_array.format |= AI_FMT_FLAG_CONST;
 8005d82:	f8cc 4000 	str.w	r4, [ip]
    conv2d_65_weights_array.data = AI_PTR(weights + 219280);
 8005d86:	f8df e160 	ldr.w	lr, [pc, #352]	; 8005ee8 <ai_network_init+0xbf4>
    conv2d_65_bias_array.data = AI_PTR(weights + 222304);
 8005d8a:	4d39      	ldr	r5, [pc, #228]	; (8005e70 <ai_network_init+0xb7c>)
    conv2d_66_weights_array.format |= AI_FMT_FLAG_CONST;
 8005d8c:	4a39      	ldr	r2, [pc, #228]	; (8005e74 <ai_network_init+0xb80>)
    conv2d_65_weights_array.data = AI_PTR(weights + 219280);
 8005d8e:	44de      	add	lr, fp
    conv2d_65_bias_array.data = AI_PTR(weights + 222304);
 8005d90:	445d      	add	r5, fp
    conv2d_66_weights_array.data = AI_PTR(weights + 223648);
 8005d92:	4c39      	ldr	r4, [pc, #228]	; (8005e78 <ai_network_init+0xb84>)
    conv2d_67_bias_array.format |= AI_FMT_FLAG_CONST;
 8005d94:	f8df a154 	ldr.w	sl, [pc, #340]	; 8005eec <ai_network_init+0xbf8>
    conv2d_66_weights_array.data = AI_PTR(weights + 223648);
 8005d98:	445c      	add	r4, fp
    conv2d_62_weights_array.data_start = AI_PTR(weights + 180080);
 8005d9a:	e9c6 7702 	strd	r7, r7, [r6, #8]
    conv2d_64_bias_array.data = AI_PTR(weights + 217936);
 8005d9e:	f8c8 9008 	str.w	r9, [r8, #8]
    conv2d_64_bias_array.format |= AI_FMT_FLAG_CONST;
 8005da2:	f8c8 3000 	str.w	r3, [r8]
    conv2d_65_bias_array.format |= AI_FMT_FLAG_CONST;
 8005da6:	680b      	ldr	r3, [r1, #0]
    conv2d_67_weights_array.format |= AI_FMT_FLAG_CONST;
 8005da8:	4f34      	ldr	r7, [pc, #208]	; (8005e7c <ai_network_init+0xb88>)
    conv2d_64_bias_array.data_start = AI_PTR(weights + 217936);
 8005daa:	f8c8 900c 	str.w	r9, [r8, #12]
    conv2d_65_bias_array.format |= AI_FMT_FLAG_CONST;
 8005dae:	f043 4880 	orr.w	r8, r3, #1073741824	; 0x40000000
    conv2d_66_bias_array.format |= AI_FMT_FLAG_CONST;
 8005db2:	4e33      	ldr	r6, [pc, #204]	; (8005e80 <ai_network_init+0xb8c>)
    conv2d_66_weights_array.format |= AI_FMT_FLAG_CONST;
 8005db4:	6813      	ldr	r3, [r2, #0]
    conv2d_65_weights_array.data = AI_PTR(weights + 219280);
 8005db6:	f8cc e008 	str.w	lr, [ip, #8]
    conv2d_65_weights_array.data_start = AI_PTR(weights + 219280);
 8005dba:	f8cc e00c 	str.w	lr, [ip, #12]
    conv2d_66_weights_array.format |= AI_FMT_FLAG_CONST;
 8005dbe:	f043 4980 	orr.w	r9, r3, #1073741824	; 0x40000000
    conv2d_65_bias_array.data = AI_PTR(weights + 222304);
 8005dc2:	608d      	str	r5, [r1, #8]
    conv2d_65_bias_array.data_start = AI_PTR(weights + 222304);
 8005dc4:	60cd      	str	r5, [r1, #12]
    conv2d_65_bias_array.format |= AI_FMT_FLAG_CONST;
 8005dc6:	f8c1 8000 	str.w	r8, [r1]
    conv2d_67_weights_array.data = AI_PTR(weights + 261728);
 8005dca:	f8df c124 	ldr.w	ip, [pc, #292]	; 8005ef0 <ai_network_init+0xbfc>
    conv2d_67_weights_array.format |= AI_FMT_FLAG_CONST;
 8005dce:	6839      	ldr	r1, [r7, #0]
    conv2d_66_bias_array.format |= AI_FMT_FLAG_CONST;
 8005dd0:	6833      	ldr	r3, [r6, #0]
    conv2d_67_weights_array.data = AI_PTR(weights + 261728);
 8005dd2:	44dc      	add	ip, fp
    conv2d_67_weights_array.format |= AI_FMT_FLAG_CONST;
 8005dd4:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    conv2d_66_bias_array.data = AI_PTR(weights + 261280);
 8005dd8:	f8df e118 	ldr.w	lr, [pc, #280]	; 8005ef4 <ai_network_init+0xc00>
    conv2d_66_weights_array.data = AI_PTR(weights + 223648);
 8005ddc:	6094      	str	r4, [r2, #8]
    conv2d_66_bias_array.format |= AI_FMT_FLAG_CONST;
 8005dde:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    conv2d_66_bias_array.data = AI_PTR(weights + 261280);
 8005de2:	44de      	add	lr, fp
 8005de4:	e088      	b.n	8005ef8 <ai_network_init+0xc04>
 8005de6:	bf00      	nop
 8005de8:	00010350 	.word	0x00010350
 8005dec:	24005590 	.word	0x24005590
 8005df0:	00012810 	.word	0x00012810
 8005df4:	2400588c 	.word	0x2400588c
 8005df8:	24005680 	.word	0x24005680
 8005dfc:	24005a6c 	.word	0x24005a6c
 8005e00:	240059a8 	.word	0x240059a8
 8005e04:	2400579c 	.word	0x2400579c
 8005e08:	00012890 	.word	0x00012890
 8005e0c:	00014a50 	.word	0x00014a50
 8005e10:	00016550 	.word	0x00016550
 8005e14:	24005bb4 	.word	0x24005bb4
 8005e18:	00017dd0 	.word	0x00017dd0
 8005e1c:	000165d0 	.word	0x000165d0
 8005e20:	24005d94 	.word	0x24005d94
 8005e24:	24005cd0 	.word	0x24005cd0
 8005e28:	24005eb0 	.word	0x24005eb0
 8005e2c:	0001b490 	.word	0x0001b490
 8005e30:	24005dc0 	.word	0x24005dc0
 8005e34:	24006090 	.word	0x24006090
 8005e38:	00020430 	.word	0x00020430
 8005e3c:	0001fef0 	.word	0x0001fef0
 8005e40:	00021540 	.word	0x00021540
 8005e44:	240062c8 	.word	0x240062c8
 8005e48:	0002a920 	.word	0x0002a920
 8005e4c:	240062f4 	.word	0x240062f4
 8005e50:	240061d8 	.word	0x240061d8
 8005e54:	240064a8 	.word	0x240064a8
 8005e58:	240063e4 	.word	0x240063e4
 8005e5c:	240063b8 	.word	0x240063b8
 8005e60:	000308f0 	.word	0x000308f0
 8005e64:	000309d0 	.word	0x000309d0
 8005e68:	0002bf70 	.word	0x0002bf70
 8005e6c:	240065f0 	.word	0x240065f0
 8005e70:	00036460 	.word	0x00036460
 8005e74:	240067d0 	.word	0x240067d0
 8005e78:	000369a0 	.word	0x000369a0
 8005e7c:	24006934 	.word	0x24006934
 8005e80:	2400670c 	.word	0x2400670c
 8005e84:	00010d10 	.word	0x00010d10
 8005e88:	24005654 	.word	0x24005654
 8005e8c:	00011010 	.word	0x00011010
 8005e90:	24005770 	.word	0x24005770
 8005e94:	00014090 	.word	0x00014090
 8005e98:	24005a98 	.word	0x24005a98
 8005e9c:	00014390 	.word	0x00014390
 8005ea0:	00014d50 	.word	0x00014d50
 8005ea4:	24005ca4 	.word	0x24005ca4
 8005ea8:	24005b88 	.word	0x24005b88
 8005eac:	000180d0 	.word	0x000180d0
 8005eb0:	00018790 	.word	0x00018790
 8005eb4:	00018a90 	.word	0x00018a90
 8005eb8:	24005edc 	.word	0x24005edc
 8005ebc:	24005fa0 	.word	0x24005fa0
 8005ec0:	0001b570 	.word	0x0001b570
 8005ec4:	24005fcc 	.word	0x24005fcc
 8005ec8:	00025ec0 	.word	0x00025ec0
 8005ecc:	00025fa0 	.word	0x00025fa0
 8005ed0:	0002ae60 	.word	0x0002ae60
 8005ed4:	0002ba30 	.word	0x0002ba30
 8005ed8:	240065c4 	.word	0x240065c4
 8005edc:	240064d4 	.word	0x240064d4
 8005ee0:	00035350 	.word	0x00035350
 8005ee4:	240066e0 	.word	0x240066e0
 8005ee8:	00035890 	.word	0x00035890
 8005eec:	240067fc 	.word	0x240067fc
 8005ef0:	0003fe60 	.word	0x0003fe60
 8005ef4:	0003fca0 	.word	0x0003fca0
    conv2d_66_weights_array.data_start = AI_PTR(weights + 223648);
 8005ef8:	60d4      	str	r4, [r2, #12]
    conv2d_66_weights_array.format |= AI_FMT_FLAG_CONST;
 8005efa:	f8c2 9000 	str.w	r9, [r2]
    eltwise_12_output_array.data = AI_PTR(activations + 25360);
 8005efe:	f246 3410 	movw	r4, #25360	; 0x6310
    conv2d_67_bias_array.format |= AI_FMT_FLAG_CONST;
 8005f02:	f8da 2000 	ldr.w	r2, [sl]
    conv2d_67_weights_array.format |= AI_FMT_FLAG_CONST;
 8005f06:	6039      	str	r1, [r7, #0]
    conv2d_66_bias_array.data = AI_PTR(weights + 261280);
 8005f08:	f8c6 e008 	str.w	lr, [r6, #8]
    conv2d_67_bias_array.format |= AI_FMT_FLAG_CONST;
 8005f0c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    conv2d_66_bias_array.data_start = AI_PTR(weights + 261280);
 8005f10:	f8c6 e00c 	str.w	lr, [r6, #12]
    conv2d_66_bias_array.format |= AI_FMT_FLAG_CONST;
 8005f14:	6033      	str	r3, [r6, #0]
    dense_69_weights_array.format |= AI_FMT_FLAG_CONST;
 8005f16:	f8df e410 	ldr.w	lr, [pc, #1040]	; 8006328 <ai_network_init+0x1034>
    conv2d_67_bias_array.data = AI_PTR(weights + 405088);
 8005f1a:	4de7      	ldr	r5, [pc, #924]	; (80062b8 <ai_network_init+0xfc4>)
    conv2d_67_bias_array.format |= AI_FMT_FLAG_CONST;
 8005f1c:	f8ca 2000 	str.w	r2, [sl]
    conv2d_67_bias_array.data = AI_PTR(weights + 405088);
 8005f20:	445d      	add	r5, fp
    dense_69_weights_array.format |= AI_FMT_FLAG_CONST;
 8005f22:	f8de 2000 	ldr.w	r2, [lr]
    dense_69_weights_array.data = AI_PTR(weights + 410208);
 8005f26:	4ee5      	ldr	r6, [pc, #916]	; (80062bc <ai_network_init+0xfc8>)
    conv2d_2_output_array.data = AI_PTR(activations + 312688);
 8005f28:	49e5      	ldr	r1, [pc, #916]	; (80062c0 <ai_network_init+0xfcc>)
    dense_69_weights_array.data = AI_PTR(weights + 410208);
 8005f2a:	445e      	add	r6, fp
    conversion_0_output_array.data = AI_PTR(activations + 364672);
 8005f2c:	f8df 93fc 	ldr.w	r9, [pc, #1020]	; 800632c <ai_network_init+0x1038>
    conv2d_4_output_array.data = AI_PTR(activations + 509920);
 8005f30:	f8df 83fc 	ldr.w	r8, [pc, #1020]	; 8006330 <ai_network_init+0x103c>
    dense_69_weights_array.data = AI_PTR(weights + 410208);
 8005f34:	f8ce 6008 	str.w	r6, [lr, #8]
    dense_69_weights_array.data_start = AI_PTR(weights + 410208);
 8005f38:	f8ce 600c 	str.w	r6, [lr, #12]
    conv2d_67_weights_array.data_start = AI_PTR(weights + 261728);
 8005f3c:	e9c7 cc02 	strd	ip, ip, [r7, #8]
  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 8005f40:	9f03      	ldr	r7, [sp, #12]
    dense_69_bias_array.format |= AI_FMT_FLAG_CONST;
 8005f42:	f8df c3f0 	ldr.w	ip, [pc, #1008]	; 8006334 <ai_network_init+0x1040>
  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 8005f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
    dense_70_weights_array.format |= AI_FMT_FLAG_CONST;
 8005f48:	4fde      	ldr	r7, [pc, #888]	; (80062c4 <ai_network_init+0xfd0>)
  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 8005f4a:	3303      	adds	r3, #3
    conv2d_67_bias_array.data_start = AI_PTR(weights + 405088);
 8005f4c:	e9ca 5502 	strd	r5, r5, [sl, #8]
  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 8005f50:	f023 0303 	bic.w	r3, r3, #3
    dense_69_weights_array.format |= AI_FMT_FLAG_CONST;
 8005f54:	f042 4a80 	orr.w	sl, r2, #1073741824	; 0x40000000
    conv2d_3_output_array.data = AI_PTR(activations + 309072);
 8005f58:	4adb      	ldr	r2, [pc, #876]	; (80062c8 <ai_network_init+0xfd4>)
    conv2d_2_output_array.data = AI_PTR(activations + 312688);
 8005f5a:	4419      	add	r1, r3
    dense_69_weights_array.format |= AI_FMT_FLAG_CONST;
 8005f5c:	f8ce a000 	str.w	sl, [lr]
    conv2d_3_output_array.data = AI_PTR(activations + 309072);
 8005f60:	189a      	adds	r2, r3, r2
    conversion_0_output_array.data = AI_PTR(activations + 364672);
 8005f62:	4499      	add	r9, r3
    conv2d_2_output_array.data = AI_PTR(activations + 312688);
 8005f64:	9100      	str	r1, [sp, #0]
    conv2d_4_output_array.data = AI_PTR(activations + 509920);
 8005f66:	4498      	add	r8, r3
    conv2d_3_output_array.data = AI_PTR(activations + 309072);
 8005f68:	9202      	str	r2, [sp, #8]
    eltwise_12_output_array.data = AI_PTR(activations + 25360);
 8005f6a:	441c      	add	r4, r3
    dense_69_bias_array.format |= AI_FMT_FLAG_CONST;
 8005f6c:	f8dc 6000 	ldr.w	r6, [ip]
    conv2d_16_output_array.data = AI_PTR(activations + 39412);
 8005f70:	f649 11f4 	movw	r1, #39412	; 0x99f4
    conversion_0_output_array.data = AI_PTR(activations + 364672);
 8005f74:	f8df a3c0 	ldr.w	sl, [pc, #960]	; 8006338 <ai_network_init+0x1044>
    dense_69_bias_array.format |= AI_FMT_FLAG_CONST;
 8005f78:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
    dense_70_bias_array.format |= AI_FMT_FLAG_CONST;
 8005f7c:	4dd3      	ldr	r5, [pc, #844]	; (80062cc <ai_network_init+0xfd8>)
    conversion_0_output_array.data = AI_PTR(activations + 364672);
 8005f7e:	f8ca 9008 	str.w	r9, [sl, #8]
    conv2d_16_output_array.data = AI_PTR(activations + 39412);
 8005f82:	4419      	add	r1, r3
    dense_69_bias_array.format |= AI_FMT_FLAG_CONST;
 8005f84:	4632      	mov	r2, r6
    conversion_0_output_array.data_start = AI_PTR(activations + 364672);
 8005f86:	f8ca 900c 	str.w	r9, [sl, #12]
    conv2d_2_output_array.data = AI_PTR(activations + 312688);
 8005f8a:	f8df 93b0 	ldr.w	r9, [pc, #944]	; 800633c <ai_network_init+0x1048>
    conv2d_5_output_array.data = AI_PTR(activations + 2736);
 8005f8e:	f503 662b 	add.w	r6, r3, #2736	; 0xab0
    dense_69_bias_array.format |= AI_FMT_FLAG_CONST;
 8005f92:	f8cc 2000 	str.w	r2, [ip]
    conv2d_2_output_array.data = AI_PTR(activations + 312688);
 8005f96:	9a00      	ldr	r2, [sp, #0]
    conv2d_3_output_array.data = AI_PTR(activations + 309072);
 8005f98:	f8df a3a4 	ldr.w	sl, [pc, #932]	; 8006340 <ai_network_init+0x104c>
    conv2d_2_output_array.data = AI_PTR(activations + 312688);
 8005f9c:	f8c9 2008 	str.w	r2, [r9, #8]
    conv2d_2_output_array.data_start = AI_PTR(activations + 312688);
 8005fa0:	f8c9 200c 	str.w	r2, [r9, #12]
    eltwise_20_output_array.data = AI_PTR(activations + 13088);
 8005fa4:	f243 3920 	movw	r9, #13088	; 0x3320
    conv2d_3_output_array.data = AI_PTR(activations + 309072);
 8005fa8:	9a02      	ldr	r2, [sp, #8]
    conv2d_5_output_array.data = AI_PTR(activations + 2736);
 8005faa:	9601      	str	r6, [sp, #4]
    eltwise_20_output_array.data = AI_PTR(activations + 13088);
 8005fac:	4499      	add	r9, r3
    conv2d_3_output_array.data = AI_PTR(activations + 309072);
 8005fae:	f8ca 2008 	str.w	r2, [sl, #8]
    conv2d_3_output_array.data_start = AI_PTR(activations + 309072);
 8005fb2:	f8ca 200c 	str.w	r2, [sl, #12]
    conv2d_4_output_array.data = AI_PTR(activations + 509920);
 8005fb6:	f8df a38c 	ldr.w	sl, [pc, #908]	; 8006344 <ai_network_init+0x1050>
    conv2d_3_output_array.data_start = AI_PTR(activations + 309072);
 8005fba:	9204      	str	r2, [sp, #16]
    conv2d_4_output_array.data = AI_PTR(activations + 509920);
 8005fbc:	f8ca 8008 	str.w	r8, [sl, #8]
    conv2d_4_output_array.data_start = AI_PTR(activations + 509920);
 8005fc0:	f8ca 800c 	str.w	r8, [sl, #12]
    conv2d_5_output_array.data = AI_PTR(activations + 2736);
 8005fc4:	9a01      	ldr	r2, [sp, #4]
 8005fc6:	f8df a380 	ldr.w	sl, [pc, #896]	; 8006348 <ai_network_init+0x1054>
    dense_70_weights_array.format |= AI_FMT_FLAG_CONST;
 8005fca:	683e      	ldr	r6, [r7, #0]
    conv2d_8_output_array.data = AI_PTR(activations + 150800);
 8005fcc:	f8df e37c 	ldr.w	lr, [pc, #892]	; 800634c <ai_network_init+0x1058>
    dense_70_weights_array.format |= AI_FMT_FLAG_CONST;
 8005fd0:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
    conv2d_8_output_array.data = AI_PTR(activations + 150800);
 8005fd4:	f8df 8378 	ldr.w	r8, [pc, #888]	; 8006350 <ai_network_init+0x105c>
 8005fd8:	449e      	add	lr, r3
    dense_70_weights_array.format |= AI_FMT_FLAG_CONST;
 8005fda:	603e      	str	r6, [r7, #0]
    dense_70_bias_array.format |= AI_FMT_FLAG_CONST;
 8005fdc:	682e      	ldr	r6, [r5, #0]
    conv2d_8_output_array.data = AI_PTR(activations + 150800);
 8005fde:	f8c8 e008 	str.w	lr, [r8, #8]
    dense_70_bias_array.format |= AI_FMT_FLAG_CONST;
 8005fe2:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
    conv2d_5_output_array.data_start = AI_PTR(activations + 2736);
 8005fe6:	e9ca 2202 	strd	r2, r2, [sl, #8]
    conv2d_7_output_array.data = AI_PTR(activations + 0);
 8005fea:	f8df a368 	ldr.w	sl, [pc, #872]	; 8006354 <ai_network_init+0x1060>
    dense_70_bias_array.format |= AI_FMT_FLAG_CONST;
 8005fee:	602e      	str	r6, [r5, #0]
    dense_69_bias_array.data = AI_PTR(weights + 538208);
 8005ff0:	4eb7      	ldr	r6, [pc, #732]	; (80062d0 <ai_network_init+0xfdc>)
    conv2d_7_output_array.data_start = AI_PTR(activations + 0);
 8005ff2:	e9ca 3302 	strd	r3, r3, [sl, #8]
    eltwise_24_output_array.data = AI_PTR(activations + 25632);
 8005ff6:	f246 4a20 	movw	sl, #25632	; 0x6420
    dense_69_bias_array.data = AI_PTR(weights + 538208);
 8005ffa:	445e      	add	r6, fp
    eltwise_24_output_array.data = AI_PTR(activations + 25632);
 8005ffc:	4652      	mov	r2, sl
    dense_70_weights_array.data = AI_PTR(weights + 538608);
 8005ffe:	f8df a358 	ldr.w	sl, [pc, #856]	; 8006358 <ai_network_init+0x1064>
 8006002:	44da      	add	sl, fp
    eltwise_24_output_array.data = AI_PTR(activations + 25632);
 8006004:	189a      	adds	r2, r3, r2
    dense_70_weights_array.data = AI_PTR(weights + 538608);
 8006006:	f8c7 a008 	str.w	sl, [r7, #8]
    dense_70_weights_array.data_start = AI_PTR(weights + 538608);
 800600a:	f8c7 a00c 	str.w	sl, [r7, #12]
    conv2d_29_output_array.data = AI_PTR(activations + 35088);
 800600e:	f648 1710 	movw	r7, #35088	; 0x8910
    dense_70_bias_array.data = AI_PTR(weights + 539208);
 8006012:	f8df a348 	ldr.w	sl, [pc, #840]	; 800635c <ai_network_init+0x1068>
    eltwise_24_output_array.data = AI_PTR(activations + 25632);
 8006016:	9202      	str	r2, [sp, #8]
    conv2d_29_output_array.data = AI_PTR(activations + 35088);
 8006018:	441f      	add	r7, r3
    dense_70_bias_array.data = AI_PTR(weights + 539208);
 800601a:	44da      	add	sl, fp
    sequential_3_input_output_array.data = AI_PTR(NULL);
 800601c:	f04f 0b00 	mov.w	fp, #0
    dense_69_bias_array.data_start = AI_PTR(weights + 538208);
 8006020:	e9cc 6602 	strd	r6, r6, [ip, #8]
    dense_70_bias_array.data = AI_PTR(weights + 539208);
 8006024:	f8c5 a008 	str.w	sl, [r5, #8]
    conv2d_27_output_array.data = AI_PTR(activations + 22372);
 8006028:	f245 7664 	movw	r6, #22372	; 0x5764
    dense_70_bias_array.data_start = AI_PTR(weights + 539208);
 800602c:	f8c5 a00c 	str.w	sl, [r5, #12]
    conv2d_9_output_array.data = AI_PTR(activations + 326416);
 8006030:	f8df c32c 	ldr.w	ip, [pc, #812]	; 8006360 <ai_network_init+0x106c>
    conv2d_27_output_array.data = AI_PTR(activations + 22372);
 8006034:	441e      	add	r6, r3
    sequential_3_input_output_array.data = AI_PTR(NULL);
 8006036:	f8df a32c 	ldr.w	sl, [pc, #812]	; 8006364 <ai_network_init+0x1070>
    conv2d_9_output_array.data = AI_PTR(activations + 326416);
 800603a:	449c      	add	ip, r3
    conv2d_10_output_array.data = AI_PTR(activations + 175888);
 800603c:	4da5      	ldr	r5, [pc, #660]	; (80062d4 <ai_network_init+0xfe0>)
    sequential_3_input_output_array.data = AI_PTR(NULL);
 800603e:	f8ca b008 	str.w	fp, [sl, #8]
    sequential_3_input_output_array.data_start = AI_PTR(NULL);
 8006042:	f8ca b00c 	str.w	fp, [sl, #12]
    conv2d_10_output_array.data = AI_PTR(activations + 175888);
 8006046:	441d      	add	r5, r3
    conv2d_8_output_array.data_start = AI_PTR(activations + 150800);
 8006048:	f8c8 e00c 	str.w	lr, [r8, #12]
    conv2d_15_output_array.data = AI_PTR(activations + 1780);
 800604c:	f203 6bf4 	addw	fp, r3, #1780	; 0x6f4
    conv2d_9_output_array.data = AI_PTR(activations + 326416);
 8006050:	f8df 8314 	ldr.w	r8, [pc, #788]	; 8006368 <ai_network_init+0x1074>
    eltwise_32_output_array.data = AI_PTR(activations + 10848);
 8006054:	f642 2e60 	movw	lr, #10848	; 0x2a60
    conv2d_13_output_array.data = AI_PTR(activations + 200976);
 8006058:	f8df a310 	ldr.w	sl, [pc, #784]	; 800636c <ai_network_init+0x1078>
    conv2d_9_output_array.data = AI_PTR(activations + 326416);
 800605c:	f8c8 c008 	str.w	ip, [r8, #8]
    eltwise_32_output_array.data = AI_PTR(activations + 10848);
 8006060:	449e      	add	lr, r3
    conv2d_9_output_array.data_start = AI_PTR(activations + 326416);
 8006062:	f8c8 c00c 	str.w	ip, [r8, #12]
    conv2d_11_output_array.data = AI_PTR(activations + 272);
 8006066:	f503 7888 	add.w	r8, r3, #272	; 0x110
    conv2d_10_output_array.data = AI_PTR(activations + 175888);
 800606a:	f8df c304 	ldr.w	ip, [pc, #772]	; 8006370 <ai_network_init+0x107c>
    conv2d_13_output_array.data = AI_PTR(activations + 200976);
 800606e:	449a      	add	sl, r3
    conv2d_10_output_array.data_start = AI_PTR(activations + 175888);
 8006070:	e9cc 5502 	strd	r5, r5, [ip, #8]
    conv2d_11_output_array.data = AI_PTR(activations + 272);
 8006074:	f8df c2fc 	ldr.w	ip, [pc, #764]	; 8006374 <ai_network_init+0x1080>
    conv2d_11_output_array.data_start = AI_PTR(activations + 272);
 8006078:	e9cc 8802 	strd	r8, r8, [ip, #8]
    eltwise_12_output_array.data = AI_PTR(activations + 25360);
 800607c:	f8df c2f8 	ldr.w	ip, [pc, #760]	; 8006378 <ai_network_init+0x1084>
    conv2d_17_output_array.data = AI_PTR(activations + 127220);
 8006080:	f8df 82f8 	ldr.w	r8, [pc, #760]	; 800637c <ai_network_init+0x1088>
    eltwise_12_output_array.data = AI_PTR(activations + 25360);
 8006084:	f8cc 4008 	str.w	r4, [ip, #8]
    eltwise_12_output_array.data_start = AI_PTR(activations + 25360);
 8006088:	f8cc 400c 	str.w	r4, [ip, #12]
    conv2d_17_output_array.data = AI_PTR(activations + 127220);
 800608c:	4498      	add	r8, r3
    conv2d_13_output_array.data = AI_PTR(activations + 200976);
 800608e:	4c92      	ldr	r4, [pc, #584]	; (80062d8 <ai_network_init+0xfe4>)
    eltwise_36_output_array.data = AI_PTR(activations + 5520);
 8006090:	f241 5c90 	movw	ip, #5520	; 0x1590
    conv2d_13_output_array.data_start = AI_PTR(activations + 200976);
 8006094:	e9c4 aa02 	strd	sl, sl, [r4, #8]
    conv2d_15_output_array.data = AI_PTR(activations + 1780);
 8006098:	f8df a2e4 	ldr.w	sl, [pc, #740]	; 8006380 <ai_network_init+0x108c>
    eltwise_36_output_array.data = AI_PTR(activations + 5520);
 800609c:	449c      	add	ip, r3
    conv2d_37_output_array.data = AI_PTR(activations + 38448);
 800609e:	f249 6430 	movw	r4, #38448	; 0x9630
    conv2d_15_output_array.data_start = AI_PTR(activations + 1780);
 80060a2:	e9ca bb02 	strd	fp, fp, [sl, #8]
    conv2d_16_output_array.data = AI_PTR(activations + 39412);
 80060a6:	f8df a2dc 	ldr.w	sl, [pc, #732]	; 8006384 <ai_network_init+0x1090>
    conv2d_37_output_array.data = AI_PTR(activations + 38448);
 80060aa:	441c      	add	r4, r3
    conv2d_5_scratch0_array.data = AI_PTR(activations + 610272);
 80060ac:	f8df b2d8 	ldr.w	fp, [pc, #728]	; 8006388 <ai_network_init+0x1094>
    conv2d_16_output_array.data_start = AI_PTR(activations + 39412);
 80060b0:	e9ca 1102 	strd	r1, r1, [sl, #8]
    conv2d_17_output_array.data = AI_PTR(activations + 127220);
 80060b4:	4989      	ldr	r1, [pc, #548]	; (80062dc <ai_network_init+0xfe8>)
    eltwise_40_output_array.data = AI_PTR(activations + 10224);
 80060b6:	f242 7af0 	movw	sl, #10224	; 0x27f0
    conv2d_5_scratch0_array.data = AI_PTR(activations + 610272);
 80060ba:	449b      	add	fp, r3
    eltwise_40_output_array.data = AI_PTR(activations + 10224);
 80060bc:	4652      	mov	r2, sl
    conv2d_18_output_array.data = AI_PTR(activations + 202484);
 80060be:	f8df a2cc 	ldr.w	sl, [pc, #716]	; 800638c <ai_network_init+0x1098>
    conv2d_17_output_array.data_start = AI_PTR(activations + 127220);
 80060c2:	e9c1 8802 	strd	r8, r8, [r1, #8]
    conv2d_18_output_array.data = AI_PTR(activations + 202484);
 80060c6:	4986      	ldr	r1, [pc, #536]	; (80062e0 <ai_network_init+0xfec>)
    eltwise_40_output_array.data = AI_PTR(activations + 10224);
 80060c8:	189a      	adds	r2, r3, r2
    conv2d_21_output_array.data = AI_PTR(activations + 100896);
 80060ca:	f8df 82c4 	ldr.w	r8, [pc, #708]	; 8006390 <ai_network_init+0x109c>
    conv2d_18_output_array.data = AI_PTR(activations + 202484);
 80060ce:	4419      	add	r1, r3
    eltwise_40_output_array.data = AI_PTR(activations + 10224);
 80060d0:	9203      	str	r2, [sp, #12]
    conv2d_21_output_array.data = AI_PTR(activations + 100896);
 80060d2:	4498      	add	r8, r3
    eltwise_24_output_array.data = AI_PTR(activations + 25632);
 80060d4:	9a02      	ldr	r2, [sp, #8]
    conv2d_18_output_array.data_start = AI_PTR(activations + 202484);
 80060d6:	e9ca 1102 	strd	r1, r1, [sl, #8]
    conv2d_19_output_array.data = AI_PTR(activations + 544);
 80060da:	f503 7108 	add.w	r1, r3, #544	; 0x220
 80060de:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 8006394 <ai_network_init+0x10a0>
    conv2d_19_output_array.data_start = AI_PTR(activations + 544);
 80060e2:	e9ca 1102 	strd	r1, r1, [sl, #8]
    conv2d_23_output_array.data = AI_PTR(activations + 544);
 80060e6:	f8df a2b0 	ldr.w	sl, [pc, #688]	; 8006398 <ai_network_init+0x10a4>
    conv2d_23_output_array.data_start = AI_PTR(activations + 544);
 80060ea:	e9ca 1102 	strd	r1, r1, [sl, #8]
    eltwise_20_output_array.data = AI_PTR(activations + 13088);
 80060ee:	f8df a2ac 	ldr.w	sl, [pc, #684]	; 800639c <ai_network_init+0x10a8>
    conv2d_41_output_array.data = AI_PTR(activations + 43152);
 80060f2:	f64a 0190 	movw	r1, #43152	; 0xa890
    eltwise_20_output_array.data_start = AI_PTR(activations + 13088);
 80060f6:	e9ca 9902 	strd	r9, r9, [sl, #8]
    conv2d_21_output_array.data = AI_PTR(activations + 100896);
 80060fa:	f8df 92a4 	ldr.w	r9, [pc, #676]	; 80063a0 <ai_network_init+0x10ac>
    conv2d_41_output_array.data = AI_PTR(activations + 43152);
 80060fe:	4419      	add	r1, r3
    conv2d_22_output_array.data = AI_PTR(activations + 176160);
 8006100:	f8df a2a0 	ldr.w	sl, [pc, #672]	; 80063a4 <ai_network_init+0x10b0>
    conv2d_21_output_array.data_start = AI_PTR(activations + 100896);
 8006104:	e9c9 8802 	strd	r8, r8, [r9, #8]
    conv2d_22_output_array.data = AI_PTR(activations + 176160);
 8006108:	f8df 829c 	ldr.w	r8, [pc, #668]	; 80063a8 <ai_network_init+0x10b4>
    conv2d_25_output_array.data = AI_PTR(activations + 113440);
 800610c:	f8df 929c 	ldr.w	r9, [pc, #668]	; 80063ac <ai_network_init+0x10b8>
    conv2d_22_output_array.data = AI_PTR(activations + 176160);
 8006110:	4498      	add	r8, r3
    conv2d_25_output_array.data = AI_PTR(activations + 113440);
 8006112:	4499      	add	r9, r3
    conv2d_22_output_array.data_start = AI_PTR(activations + 176160);
 8006114:	e9ca 8802 	strd	r8, r8, [sl, #8]
    eltwise_24_output_array.data = AI_PTR(activations + 25632);
 8006118:	f8df 8294 	ldr.w	r8, [pc, #660]	; 80063b0 <ai_network_init+0x10bc>
    conv2d_25_output_array.data = AI_PTR(activations + 113440);
 800611c:	f8df a294 	ldr.w	sl, [pc, #660]	; 80063b4 <ai_network_init+0x10c0>
    eltwise_24_output_array.data_start = AI_PTR(activations + 25632);
 8006120:	e9c8 2202 	strd	r2, r2, [r8, #8]
    conv2d_25_output_array.data_start = AI_PTR(activations + 113440);
 8006124:	e9ca 9902 	strd	r9, r9, [sl, #8]
    conv2d_27_output_array.data = AI_PTR(activations + 22372);
 8006128:	f8df 928c 	ldr.w	r9, [pc, #652]	; 80063b8 <ai_network_init+0x10c4>
    conv2d_31_output_array.data = AI_PTR(activations + 6144);
 800612c:	f503 5ac0 	add.w	sl, r3, #6144	; 0x1800
    eltwise_40_output_array.data = AI_PTR(activations + 10224);
 8006130:	9a03      	ldr	r2, [sp, #12]
    conv2d_48_output_array.data = AI_PTR(activations + 58432);
 8006132:	f24e 4840 	movw	r8, #58432	; 0xe440
    conv2d_27_output_array.data_start = AI_PTR(activations + 22372);
 8006136:	e9c9 6602 	strd	r6, r6, [r9, #8]
    conv2d_28_output_array.data = AI_PTR(activations + 624);
 800613a:	f503 791c 	add.w	r9, r3, #624	; 0x270
 800613e:	4e69      	ldr	r6, [pc, #420]	; (80062e4 <ai_network_init+0xff0>)
    conv2d_48_output_array.data = AI_PTR(activations + 58432);
 8006140:	4498      	add	r8, r3
    conv2d_28_output_array.data_start = AI_PTR(activations + 624);
 8006142:	e9c6 9902 	strd	r9, r9, [r6, #8]
    conv2d_29_output_array.data = AI_PTR(activations + 35088);
 8006146:	f8df 9274 	ldr.w	r9, [pc, #628]	; 80063bc <ai_network_init+0x10c8>
    conv2d_30_output_array.data = AI_PTR(activations + 91536);
 800614a:	4e67      	ldr	r6, [pc, #412]	; (80062e8 <ai_network_init+0xff4>)
    conv2d_29_output_array.data = AI_PTR(activations + 35088);
 800614c:	f8c9 7008 	str.w	r7, [r9, #8]
    conv2d_30_output_array.data = AI_PTR(activations + 91536);
 8006150:	441e      	add	r6, r3
    conv2d_29_output_array.data_start = AI_PTR(activations + 35088);
 8006152:	f8c9 700c 	str.w	r7, [r9, #12]
    conv2d_30_output_array.data = AI_PTR(activations + 91536);
 8006156:	4f65      	ldr	r7, [pc, #404]	; (80062ec <ai_network_init+0xff8>)
    conv2d_52_output_array.data = AI_PTR(activations + 51264);
 8006158:	f64c 0940 	movw	r9, #51264	; 0xc840
    conv2d_30_output_array.data_start = AI_PTR(activations + 91536);
 800615c:	e9c7 6602 	strd	r6, r6, [r7, #8]
    conv2d_31_output_array.data = AI_PTR(activations + 6144);
 8006160:	4e63      	ldr	r6, [pc, #396]	; (80062f0 <ai_network_init+0xffc>)
    conv2d_52_output_array.data = AI_PTR(activations + 51264);
 8006162:	4499      	add	r9, r3
    conv2d_54_output_array.data = AI_PTR(activations + 16516);
 8006164:	f244 0784 	movw	r7, #16516	; 0x4084
    conv2d_31_output_array.data_start = AI_PTR(activations + 6144);
 8006168:	e9c6 aa02 	strd	sl, sl, [r6, #8]
    eltwise_32_output_array.data = AI_PTR(activations + 10848);
 800616c:	4e61      	ldr	r6, [pc, #388]	; (80062f4 <ai_network_init+0x1000>)
    conv2d_33_output_array.data = AI_PTR(activations + 43776);
 800616e:	f503 4a2b 	add.w	sl, r3, #43776	; 0xab00
    conv2d_54_output_array.data = AI_PTR(activations + 16516);
 8006172:	441f      	add	r7, r3
    eltwise_32_output_array.data_start = AI_PTR(activations + 10848);
 8006174:	e9c6 ee02 	strd	lr, lr, [r6, #8]
    conv2d_33_output_array.data = AI_PTR(activations + 43776);
 8006178:	4e5f      	ldr	r6, [pc, #380]	; (80062f8 <ai_network_init+0x1004>)
    conv2d_56_output_array.data = AI_PTR(activations + 24120);
 800617a:	f645 6e38 	movw	lr, #24120	; 0x5e38
    conv2d_33_output_array.data_start = AI_PTR(activations + 43776);
 800617e:	e9c6 aa02 	strd	sl, sl, [r6, #8]
    conv2d_34_output_array.data = AI_PTR(activations + 72000);
 8006182:	4e5e      	ldr	r6, [pc, #376]	; (80062fc <ai_network_init+0x1008>)
    conv2d_56_output_array.data = AI_PTR(activations + 24120);
 8006184:	449e      	add	lr, r3
    conv2d_34_output_array.data = AI_PTR(activations + 72000);
 8006186:	f8df a238 	ldr.w	sl, [pc, #568]	; 80063c0 <ai_network_init+0x10cc>
 800618a:	441e      	add	r6, r3
    conv2d_34_output_array.data_start = AI_PTR(activations + 72000);
 800618c:	e9ca 6602 	strd	r6, r6, [sl, #8]
    conv2d_35_output_array.data = AI_PTR(activations + 816);
 8006190:	f503 764c 	add.w	r6, r3, #816	; 0x330
 8006194:	f8df a22c 	ldr.w	sl, [pc, #556]	; 80063c4 <ai_network_init+0x10d0>
    conv2d_35_output_array.data_start = AI_PTR(activations + 816);
 8006198:	e9ca 6602 	strd	r6, r6, [sl, #8]
    conv2d_39_output_array.data = AI_PTR(activations + 816);
 800619c:	f8df a228 	ldr.w	sl, [pc, #552]	; 80063c8 <ai_network_init+0x10d4>
    conv2d_39_output_array.data_start = AI_PTR(activations + 816);
 80061a0:	e9ca 6602 	strd	r6, r6, [sl, #8]
    eltwise_36_output_array.data = AI_PTR(activations + 5520);
 80061a4:	f8df a224 	ldr.w	sl, [pc, #548]	; 80063cc <ai_network_init+0x10d8>
    conv2d_57_output_array.data = AI_PTR(activations + 40584);
 80061a8:	f649 6688 	movw	r6, #40584	; 0x9e88
    eltwise_36_output_array.data_start = AI_PTR(activations + 5520);
 80061ac:	e9ca cc02 	strd	ip, ip, [sl, #8]
    conv2d_37_output_array.data = AI_PTR(activations + 38448);
 80061b0:	f8df a21c 	ldr.w	sl, [pc, #540]	; 80063d0 <ai_network_init+0x10dc>
    conv2d_57_output_array.data = AI_PTR(activations + 40584);
 80061b4:	441e      	add	r6, r3
    conv2d_58_output_array.data = AI_PTR(activations + 5976);
 80061b6:	f241 7c58 	movw	ip, #5976	; 0x1758
    conv2d_37_output_array.data_start = AI_PTR(activations + 38448);
 80061ba:	e9ca 4402 	strd	r4, r4, [sl, #8]
    conv2d_38_output_array.data = AI_PTR(activations + 66672);
 80061be:	4c50      	ldr	r4, [pc, #320]	; (8006300 <ai_network_init+0x100c>)
    conv2d_58_output_array.data = AI_PTR(activations + 5976);
 80061c0:	449c      	add	ip, r3
    conv2d_38_output_array.data = AI_PTR(activations + 66672);
 80061c2:	f8df a210 	ldr.w	sl, [pc, #528]	; 80063d4 <ai_network_init+0x10e0>
 80061c6:	441c      	add	r4, r3
    conv2d_38_output_array.data_start = AI_PTR(activations + 66672);
 80061c8:	e9ca 4402 	strd	r4, r4, [sl, #8]
    eltwise_40_output_array.data = AI_PTR(activations + 10224);
 80061cc:	f8df a208 	ldr.w	sl, [pc, #520]	; 80063d8 <ai_network_init+0x10e4>
    eltwise_59_output_array.data = AI_PTR(activations + 8720);
 80061d0:	f242 2410 	movw	r4, #8720	; 0x2210
    eltwise_40_output_array.data_start = AI_PTR(activations + 10224);
 80061d4:	e9ca 2202 	strd	r2, r2, [sl, #8]
    conv2d_41_output_array.data = AI_PTR(activations + 43152);
 80061d8:	f8df a200 	ldr.w	sl, [pc, #512]	; 80063dc <ai_network_init+0x10e8>
    eltwise_59_output_array.data = AI_PTR(activations + 8720);
 80061dc:	441c      	add	r4, r3
    conv2d_41_output_array.data_start = AI_PTR(activations + 43152);
 80061de:	e9ca 1102 	strd	r1, r1, [sl, #8]
    conv2d_42_output_array.data = AI_PTR(activations + 71376);
 80061e2:	4948      	ldr	r1, [pc, #288]	; (8006304 <ai_network_init+0x1010>)
 80061e4:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 80063e0 <ai_network_init+0x10ec>
 80061e8:	4419      	add	r1, r3
    conv2d_42_output_array.data_start = AI_PTR(activations + 71376);
 80061ea:	e9ca 1102 	strd	r1, r1, [sl, #8]
    conv2d_43_output_array.data = AI_PTR(activations + 896);
 80061ee:	f503 7a60 	add.w	sl, r3, #896	; 0x380
 80061f2:	4945      	ldr	r1, [pc, #276]	; (8006308 <ai_network_init+0x1014>)
    conv2d_43_output_array.data_start = AI_PTR(activations + 896);
 80061f4:	e9c1 aa02 	strd	sl, sl, [r1, #8]
    conv2d_44_output_array.data = AI_PTR(activations + 46848);
 80061f8:	f503 4a37 	add.w	sl, r3, #46848	; 0xb700
 80061fc:	4943      	ldr	r1, [pc, #268]	; (800630c <ai_network_init+0x1018>)
    conv2d_44_output_array.data_start = AI_PTR(activations + 46848);
 80061fe:	e9c1 aa02 	strd	sl, sl, [r1, #8]
    conv2d_45_output_array.data = AI_PTR(activations + 122112);
 8006202:	4943      	ldr	r1, [pc, #268]	; (8006310 <ai_network_init+0x101c>)
 8006204:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 80063e4 <ai_network_init+0x10f0>
 8006208:	4419      	add	r1, r3
    conv2d_45_output_array.data_start = AI_PTR(activations + 122112);
 800620a:	e9ca 1102 	strd	r1, r1, [sl, #8]
    conv2d_46_output_array.data = AI_PTR(activations + 8256);
 800620e:	f503 5a01 	add.w	sl, r3, #8256	; 0x2040
 8006212:	4940      	ldr	r1, [pc, #256]	; (8006314 <ai_network_init+0x1020>)
    conv2d_46_output_array.data_start = AI_PTR(activations + 8256);
 8006214:	e9c1 aa02 	strd	sl, sl, [r1, #8]
    eltwise_47_output_array.data = AI_PTR(activations + 14528);
 8006218:	f503 5a63 	add.w	sl, r3, #14528	; 0x38c0
 800621c:	493e      	ldr	r1, [pc, #248]	; (8006318 <ai_network_init+0x1024>)
    eltwise_47_output_array.data_start = AI_PTR(activations + 14528);
 800621e:	e9c1 aa02 	strd	sl, sl, [r1, #8]
    conv2d_48_output_array.data = AI_PTR(activations + 58432);
 8006222:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 80063e8 <ai_network_init+0x10f4>
    conv2d_60_output_array.data = AI_PTR(activations + 27928);
 8006226:	f646 5118 	movw	r1, #27928	; 0x6d18
    conv2d_48_output_array.data_start = AI_PTR(activations + 58432);
 800622a:	e9ca 8802 	strd	r8, r8, [sl, #8]
    conv2d_49_output_array.data = AI_PTR(activations + 96064);
 800622e:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80063ec <ai_network_init+0x10f8>
    conv2d_60_output_array.data = AI_PTR(activations + 27928);
 8006232:	4419      	add	r1, r3
    conv2d_49_output_array.data = AI_PTR(activations + 96064);
 8006234:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 80063f0 <ai_network_init+0x10fc>
 8006238:	4498      	add	r8, r3
    conv2d_49_output_array.data_start = AI_PTR(activations + 96064);
 800623a:	e9ca 8802 	strd	r8, r8, [sl, #8]
    conv2d_50_output_array.data = AI_PTR(activations + 1088);
 800623e:	f503 6a88 	add.w	sl, r3, #1088	; 0x440
 8006242:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80063f4 <ai_network_init+0x1100>
    conv2d_50_output_array.data_start = AI_PTR(activations + 1088);
 8006246:	e9c8 aa02 	strd	sl, sl, [r8, #8]
    eltwise_51_output_array.data = AI_PTR(activations + 7360);
 800624a:	f503 5ae6 	add.w	sl, r3, #7360	; 0x1cc0
 800624e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80063f8 <ai_network_init+0x1104>
    eltwise_51_output_array.data_start = AI_PTR(activations + 7360);
 8006252:	e9c8 aa02 	strd	sl, sl, [r8, #8]
    conv2d_52_output_array.data = AI_PTR(activations + 51264);
 8006256:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 80063fc <ai_network_init+0x1108>
    conv2d_61_output_array.data = AI_PTR(activations + 44392);
 800625a:	f64a 5868 	movw	r8, #44392	; 0xad68
    conv2d_52_output_array.data_start = AI_PTR(activations + 51264);
 800625e:	e9ca 9902 	strd	r9, r9, [sl, #8]
    conv2d_54_output_array.data = AI_PTR(activations + 16516);
 8006262:	f8df a19c 	ldr.w	sl, [pc, #412]	; 8006400 <ai_network_init+0x110c>
    conv2d_61_output_array.data = AI_PTR(activations + 44392);
 8006266:	4498      	add	r8, r3
    eltwise_63_output_array.data = AI_PTR(activations + 4648);
 8006268:	f241 2928 	movw	r9, #4648	; 0x1228
    conv2d_54_output_array.data_start = AI_PTR(activations + 16516);
 800626c:	e9ca 7702 	strd	r7, r7, [sl, #8]
    conv2d_55_output_array.data = AI_PTR(activations + 1328);
 8006270:	f503 6aa6 	add.w	sl, r3, #1328	; 0x530
 8006274:	4f29      	ldr	r7, [pc, #164]	; (800631c <ai_network_init+0x1028>)
    eltwise_63_output_array.data = AI_PTR(activations + 4648);
 8006276:	4499      	add	r9, r3
    conv2d_55_output_array.data_start = AI_PTR(activations + 1328);
 8006278:	e9c7 aa02 	strd	sl, sl, [r7, #8]
    conv2d_56_output_array.data = AI_PTR(activations + 24120);
 800627c:	f8df a184 	ldr.w	sl, [pc, #388]	; 8006404 <ai_network_init+0x1110>
    conv2d_64_output_array.data = AI_PTR(activations + 23856);
 8006280:	f645 5730 	movw	r7, #23856	; 0x5d30
    conv2d_56_output_array.data_start = AI_PTR(activations + 24120);
 8006284:	e9ca ee02 	strd	lr, lr, [sl, #8]
    conv2d_57_output_array.data = AI_PTR(activations + 40584);
 8006288:	f8df a17c 	ldr.w	sl, [pc, #380]	; 8006408 <ai_network_init+0x1114>
    conv2d_64_output_array.data = AI_PTR(activations + 23856);
 800628c:	441f      	add	r7, r3
    conv2d_65_output_array.data = AI_PTR(activations + 56784);
 800628e:	f64d 5ed0 	movw	lr, #56784	; 0xddd0
    conv2d_57_output_array.data_start = AI_PTR(activations + 40584);
 8006292:	e9ca 6602 	strd	r6, r6, [sl, #8]
    conv2d_58_output_array.data = AI_PTR(activations + 5976);
 8006296:	4e22      	ldr	r6, [pc, #136]	; (8006320 <ai_network_init+0x102c>)
    conv2d_65_output_array.data = AI_PTR(activations + 56784);
 8006298:	449e      	add	lr, r3
    conv2d_4_scratch0_array.data = AI_PTR(activations + 509776);
 800629a:	f8df a170 	ldr.w	sl, [pc, #368]	; 800640c <ai_network_init+0x1118>
    conv2d_58_output_array.data_start = AI_PTR(activations + 5976);
 800629e:	e9c6 cc02 	strd	ip, ip, [r6, #8]
    eltwise_59_output_array.data = AI_PTR(activations + 8720);
 80062a2:	f8df c16c 	ldr.w	ip, [pc, #364]	; 8006410 <ai_network_init+0x111c>
    conv2d_4_scratch0_array.data = AI_PTR(activations + 509776);
 80062a6:	449a      	add	sl, r3
    conv2d_2_scratch0_array.data = AI_PTR(activations + 515200);
 80062a8:	4e1e      	ldr	r6, [pc, #120]	; (8006324 <ai_network_init+0x1030>)
    eltwise_59_output_array.data = AI_PTR(activations + 8720);
 80062aa:	f8cc 4008 	str.w	r4, [ip, #8]
    eltwise_59_output_array.data_start = AI_PTR(activations + 8720);
 80062ae:	f8cc 400c 	str.w	r4, [ip, #12]
    conv2d_13_scratch1_array.data = AI_PTR(activations + 50448);
 80062b2:	f24c 5410 	movw	r4, #50448	; 0xc510
 80062b6:	e0ad      	b.n	8006414 <ai_network_init+0x1120>
 80062b8:	00062e60 	.word	0x00062e60
 80062bc:	00064260 	.word	0x00064260
 80062c0:	0004c570 	.word	0x0004c570
 80062c4:	24006e34 	.word	0x24006e34
 80062c8:	0004b750 	.word	0x0004b750
 80062cc:	24006d74 	.word	0x24006d74
 80062d0:	00083660 	.word	0x00083660
 80062d4:	0002af10 	.word	0x0002af10
 80062d8:	24003878 	.word	0x24003878
 80062dc:	24003b74 	.word	0x24003b74
 80062e0:	000316f4 	.word	0x000316f4
 80062e4:	240043fc 	.word	0x240043fc
 80062e8:	00016590 	.word	0x00016590
 80062ec:	24004724 	.word	0x24004724
 80062f0:	24004840 	.word	0x24004840
 80062f4:	24006f74 	.word	0x24006f74
 80062f8:	24004930 	.word	0x24004930
 80062fc:	00011940 	.word	0x00011940
 8006300:	00010470 	.word	0x00010470
 8006304:	000116d0 	.word	0x000116d0
 8006308:	240052d4 	.word	0x240052d4
 800630c:	240053c4 	.word	0x240053c4
 8006310:	0001dd00 	.word	0x0001dd00
 8006314:	240055fc 	.word	0x240055fc
 8006318:	24007064 	.word	0x24007064
 800631c:	24005d3c 	.word	0x24005d3c
 8006320:	24006038 	.word	0x24006038
 8006324:	0007dc80 	.word	0x0007dc80
 8006328:	24006d48 	.word	0x24006d48
 800632c:	00059080 	.word	0x00059080
 8006330:	0007c7e0 	.word	0x0007c7e0
 8006334:	24006cd4 	.word	0x24006cd4
 8006338:	24006ca8 	.word	0x24006ca8
 800633c:	24004608 	.word	0x24004608
 8006340:	24004f80 	.word	0x24004f80
 8006344:	24005924 	.word	0x24005924
 8006348:	24006128 	.word	0x24006128
 800634c:	00024d10 	.word	0x00024d10
 8006350:	24006ae8 	.word	0x24006ae8
 8006354:	240069cc 	.word	0x240069cc
 8006358:	000837f0 	.word	0x000837f0
 800635c:	00083a48 	.word	0x00083a48
 8006360:	0004fb10 	.word	0x0004fb10
 8006364:	2400727c 	.word	0x2400727c
 8006368:	24006bd8 	.word	0x24006bd8
 800636c:	00031110 	.word	0x00031110
 8006370:	2400366c 	.word	0x2400366c
 8006374:	24003788 	.word	0x24003788
 8006378:	24006e84 	.word	0x24006e84
 800637c:	0001f0f4 	.word	0x0001f0f4
 8006380:	24003994 	.word	0x24003994
 8006384:	24003a84 	.word	0x24003a84
 8006388:	00094fe0 	.word	0x00094fe0
 800638c:	24003c90 	.word	0x24003c90
 8006390:	00018a20 	.word	0x00018a20
 8006394:	24003dac 	.word	0x24003dac
 8006398:	240040d4 	.word	0x240040d4
 800639c:	24006ed4 	.word	0x24006ed4
 80063a0:	24003e9c 	.word	0x24003e9c
 80063a4:	24003fb8 	.word	0x24003fb8
 80063a8:	0002b020 	.word	0x0002b020
 80063ac:	0001bb20 	.word	0x0001bb20
 80063b0:	24006f24 	.word	0x24006f24
 80063b4:	240041c4 	.word	0x240041c4
 80063b8:	240042e0 	.word	0x240042e0
 80063bc:	240044ec 	.word	0x240044ec
 80063c0:	24004a4c 	.word	0x24004a4c
 80063c4:	24004b68 	.word	0x24004b68
 80063c8:	24004e90 	.word	0x24004e90
 80063cc:	24006fc4 	.word	0x24006fc4
 80063d0:	24004c58 	.word	0x24004c58
 80063d4:	24004d74 	.word	0x24004d74
 80063d8:	24007014 	.word	0x24007014
 80063dc:	2400509c 	.word	0x2400509c
 80063e0:	240051b8 	.word	0x240051b8
 80063e4:	240054e0 	.word	0x240054e0
 80063e8:	240056ec 	.word	0x240056ec
 80063ec:	00017740 	.word	0x00017740
 80063f0:	24005808 	.word	0x24005808
 80063f4:	24005a14 	.word	0x24005a14
 80063f8:	240070b4 	.word	0x240070b4
 80063fc:	24005b04 	.word	0x24005b04
 8006400:	24005c20 	.word	0x24005c20
 8006404:	24005e2c 	.word	0x24005e2c
 8006408:	24005f48 	.word	0x24005f48
 800640c:	0007c750 	.word	0x0007c750
 8006410:	24007104 	.word	0x24007104
    conv2d_60_output_array.data = AI_PTR(activations + 27928);
 8006414:	f8df c450 	ldr.w	ip, [pc, #1104]	; 8006868 <ai_network_init+0x1574>
    conv2d_2_scratch0_array.data = AI_PTR(activations + 515200);
 8006418:	441e      	add	r6, r3
    conv2d_2_scratch1_array.data = AI_PTR(activations + 312688);
 800641a:	9a00      	ldr	r2, [sp, #0]
    conv2d_13_scratch1_array.data = AI_PTR(activations + 50448);
 800641c:	441c      	add	r4, r3
    conv2d_60_output_array.data_start = AI_PTR(activations + 27928);
 800641e:	e9cc 1102 	strd	r1, r1, [ip, #8]
    conv2d_61_output_array.data = AI_PTR(activations + 44392);
 8006422:	49d2      	ldr	r1, [pc, #840]	; (800676c <ai_network_init+0x1478>)
    conv2d_17_scratch1_array.data = AI_PTR(activations + 51956);
 8006424:	f64c 2cf4 	movw	ip, #51956	; 0xcaf4
    conv2d_13_scratch1_array.data = AI_PTR(activations + 50448);
 8006428:	9405      	str	r4, [sp, #20]
    conv2d_3_scratch1_array.data = AI_PTR(activations + 309072);
 800642a:	9c04      	ldr	r4, [sp, #16]
    conv2d_17_scratch1_array.data = AI_PTR(activations + 51956);
 800642c:	449c      	add	ip, r3
    conv2d_61_output_array.data_start = AI_PTR(activations + 44392);
 800642e:	e9c1 8802 	strd	r8, r8, [r1, #8]
    conv2d_2_scratch1_array.data = AI_PTR(activations + 312688);
 8006432:	f8df 8438 	ldr.w	r8, [pc, #1080]	; 800686c <ai_network_init+0x1578>
    conv2d_3_scratch0_array.data = AI_PTR(activations + 515800);
 8006436:	49ce      	ldr	r1, [pc, #824]	; (8006770 <ai_network_init+0x147c>)
    conv2d_2_scratch1_array.data = AI_PTR(activations + 312688);
 8006438:	f8c8 2008 	str.w	r2, [r8, #8]
    conv2d_2_scratch1_array.data_start = AI_PTR(activations + 312688);
 800643c:	f8c8 200c 	str.w	r2, [r8, #12]
    conv2d_62_output_array.data = AI_PTR(activations + 1904);
 8006440:	f503 68ee 	add.w	r8, r3, #1904	; 0x770
    conv2d_3_scratch1_array.data = AI_PTR(activations + 309072);
 8006444:	4acb      	ldr	r2, [pc, #812]	; (8006774 <ai_network_init+0x1480>)
    conv2d_3_scratch0_array.data = AI_PTR(activations + 515800);
 8006446:	4419      	add	r1, r3
    conv2d_3_scratch1_array.data = AI_PTR(activations + 309072);
 8006448:	6094      	str	r4, [r2, #8]
    conv2d_3_scratch1_array.data_start = AI_PTR(activations + 309072);
 800644a:	60d4      	str	r4, [r2, #12]
    nl_71_fmt_output_array.data = AI_PTR(NULL);
 800644c:	2400      	movs	r4, #0
    conv2d_62_output_array.data = AI_PTR(activations + 1904);
 800644e:	4aca      	ldr	r2, [pc, #808]	; (8006778 <ai_network_init+0x1484>)
    conv2d_62_output_array.data_start = AI_PTR(activations + 1904);
 8006450:	e9c2 8802 	strd	r8, r8, [r2, #8]
    eltwise_63_output_array.data = AI_PTR(activations + 4648);
 8006454:	4ac9      	ldr	r2, [pc, #804]	; (800677c <ai_network_init+0x1488>)
    conv2d_7_scratch0_array.data = AI_PTR(activations + 609004);
 8006456:	f8df 8418 	ldr.w	r8, [pc, #1048]	; 8006870 <ai_network_init+0x157c>
    eltwise_63_output_array.data = AI_PTR(activations + 4648);
 800645a:	f8c2 9008 	str.w	r9, [r2, #8]
    eltwise_63_output_array.data_start = AI_PTR(activations + 4648);
 800645e:	f8c2 900c 	str.w	r9, [r2, #12]
    conv2d_7_scratch0_array.data = AI_PTR(activations + 609004);
 8006462:	4498      	add	r8, r3
    conv2d_64_output_array.data = AI_PTR(activations + 23856);
 8006464:	4ac6      	ldr	r2, [pc, #792]	; (8006780 <ai_network_init+0x148c>)
    dense_70_output_array.data = AI_PTR(activations + 0);
 8006466:	f8df 940c 	ldr.w	r9, [pc, #1036]	; 8006874 <ai_network_init+0x1580>
    conv2d_64_output_array.data = AI_PTR(activations + 23856);
 800646a:	6097      	str	r7, [r2, #8]
    conv2d_64_output_array.data_start = AI_PTR(activations + 23856);
 800646c:	60d7      	str	r7, [r2, #12]
    conv2d_66_output_array.data = AI_PTR(activations + 2464);
 800646e:	f503 671a 	add.w	r7, r3, #2464	; 0x9a0
    conv2d_65_output_array.data = AI_PTR(activations + 56784);
 8006472:	4ac4      	ldr	r2, [pc, #784]	; (8006784 <ai_network_init+0x1490>)
    conv2d_65_output_array.data_start = AI_PTR(activations + 56784);
 8006474:	e9c2 ee02 	strd	lr, lr, [r2, #8]
    conv2d_66_output_array.data = AI_PTR(activations + 2464);
 8006478:	4ac3      	ldr	r2, [pc, #780]	; (8006788 <ai_network_init+0x1494>)
    dense_70_fmt_output_array.data = AI_PTR(activations + 8);
 800647a:	f103 0e08 	add.w	lr, r3, #8
    conv2d_66_output_array.data_start = AI_PTR(activations + 2464);
 800647e:	e9c2 7702 	strd	r7, r7, [r2, #8]
    dense_69_output_array.data = AI_PTR(activations + 1280);
 8006482:	f503 67a0 	add.w	r7, r3, #1280	; 0x500
 8006486:	4ac1      	ldr	r2, [pc, #772]	; (800678c <ai_network_init+0x1498>)
    dense_69_output_array.data_start = AI_PTR(activations + 1280);
 8006488:	e9c2 7702 	strd	r7, r7, [r2, #8]
    dense_70_fmt_output_array.data = AI_PTR(activations + 8);
 800648c:	4ac0      	ldr	r2, [pc, #768]	; (8006790 <ai_network_init+0x149c>)
    conv2d_25_scratch1_array.data = AI_PTR(activations + 38176);
 800648e:	f249 5720 	movw	r7, #38176	; 0x9520
    dense_70_fmt_output_array.data_start = AI_PTR(activations + 8);
 8006492:	e9c2 ee02 	strd	lr, lr, [r2, #8]
    nl_71_output_array.data = AI_PTR(activations + 32);
 8006496:	f103 0e20 	add.w	lr, r3, #32
 800649a:	4abe      	ldr	r2, [pc, #760]	; (8006794 <ai_network_init+0x14a0>)
    conv2d_25_scratch1_array.data = AI_PTR(activations + 38176);
 800649c:	441f      	add	r7, r3
    nl_71_output_array.data_start = AI_PTR(activations + 32);
 800649e:	e9c2 ee02 	strd	lr, lr, [r2, #8]
    conv2d_2_scratch0_array.data = AI_PTR(activations + 515200);
 80064a2:	f8df e3d4 	ldr.w	lr, [pc, #980]	; 8006878 <ai_network_init+0x1584>
    conv2d_29_scratch0_array.data = AI_PTR(activations + 5328);
 80064a6:	f241 42d0 	movw	r2, #5328	; 0x14d0
    conv2d_2_scratch0_array.data_start = AI_PTR(activations + 515200);
 80064aa:	e9ce 6602 	strd	r6, r6, [lr, #8]
    conv2d_3_scratch0_array.data = AI_PTR(activations + 515800);
 80064ae:	4eba      	ldr	r6, [pc, #744]	; (8006798 <ai_network_init+0x14a4>)
    conv2d_29_scratch1_array.data = AI_PTR(activations + 6864);
 80064b0:	f641 2ed0 	movw	lr, #6864	; 0x1ad0
    conv2d_29_scratch0_array.data = AI_PTR(activations + 5328);
 80064b4:	441a      	add	r2, r3
    conv2d_29_scratch1_array.data = AI_PTR(activations + 6864);
 80064b6:	449e      	add	lr, r3
    conv2d_3_scratch0_array.data_start = AI_PTR(activations + 515800);
 80064b8:	e9c6 1102 	strd	r1, r1, [r6, #8]
    conv2d_4_scratch0_array.data = AI_PTR(activations + 509776);
 80064bc:	49b7      	ldr	r1, [pc, #732]	; (800679c <ai_network_init+0x14a8>)
    conv2d_67_output_array.data = AI_PTR(activations + 0);
 80064be:	4eb8      	ldr	r6, [pc, #736]	; (80067a0 <ai_network_init+0x14ac>)
    conv2d_4_scratch0_array.data = AI_PTR(activations + 509776);
 80064c0:	f8c1 a008 	str.w	sl, [r1, #8]
    conv2d_4_scratch0_array.data_start = AI_PTR(activations + 509776);
 80064c4:	f8c1 a00c 	str.w	sl, [r1, #12]
    conv2d_8_scratch0_array.data = AI_PTR(activations + 150528);
 80064c8:	f503 3a13 	add.w	sl, r3, #150528	; 0x24c00
    conv2d_5_scratch1_array.data = AI_PTR(activations + 2736);
 80064cc:	49b5      	ldr	r1, [pc, #724]	; (80067a4 <ai_network_init+0x14b0>)
    dense_70_output_array.data_start = AI_PTR(activations + 0);
 80064ce:	e9c9 3302 	strd	r3, r3, [r9, #8]
    nl_71_fmt_output_array.data = AI_PTR(NULL);
 80064d2:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 800687c <ai_network_init+0x1588>
    nl_71_fmt_output_array.data_start = AI_PTR(NULL);
 80064d6:	e9c9 4402 	strd	r4, r4, [r9, #8]
    conv2d_5_scratch1_array.data = AI_PTR(activations + 2736);
 80064da:	9c01      	ldr	r4, [sp, #4]
    conv2d_27_scratch1_array.data = AI_PTR(activations + 3556);
 80064dc:	f603 59e4 	addw	r9, r3, #3556	; 0xde4
    conv2d_5_scratch1_array.data_start = AI_PTR(activations + 2736);
 80064e0:	e9c1 4402 	strd	r4, r4, [r1, #8]
    conv2d_9_scratch1_array.data = AI_PTR(activations + 175888);
 80064e4:	49b0      	ldr	r1, [pc, #704]	; (80067a8 <ai_network_init+0x14b4>)
    conv2d_44_scratch1_array.data = AI_PTR(activations + 9216);
 80064e6:	f503 5410 	add.w	r4, r3, #9216	; 0x2400
    conv2d_9_scratch1_array.data_start = AI_PTR(activations + 175888);
 80064ea:	e9c1 5502 	strd	r5, r5, [r1, #8]
    conv2d_10_scratch1_array.data = AI_PTR(activations + 175888);
 80064ee:	49af      	ldr	r1, [pc, #700]	; (80067ac <ai_network_init+0x14b8>)
    conv2d_44_scratch1_array.data = AI_PTR(activations + 9216);
 80064f0:	9401      	str	r4, [sp, #4]
    conv2d_45_scratch1_array.data = AI_PTR(activations + 84480);
 80064f2:	f503 34a5 	add.w	r4, r3, #84480	; 0x14a00
    conv2d_10_scratch1_array.data_start = AI_PTR(activations + 175888);
 80064f6:	e9c1 5502 	strd	r5, r5, [r1, #8]
    conv2d_5_scratch0_array.data = AI_PTR(activations + 610272);
 80064fa:	49ad      	ldr	r1, [pc, #692]	; (80067b0 <ai_network_init+0x14bc>)
    conv2d_33_scratch1_array.data = AI_PTR(activations + 15552);
 80064fc:	f503 5573 	add.w	r5, r3, #15552	; 0x3cc0
    conv2d_45_scratch1_array.data = AI_PTR(activations + 84480);
 8006500:	9404      	str	r4, [sp, #16]
    conv2d_13_scratch1_array.data = AI_PTR(activations + 50448);
 8006502:	9c05      	ldr	r4, [sp, #20]
    conv2d_33_scratch1_array.data = AI_PTR(activations + 15552);
 8006504:	9500      	str	r5, [sp, #0]
    conv2d_5_scratch0_array.data_start = AI_PTR(activations + 610272);
 8006506:	e9c1 bb02 	strd	fp, fp, [r1, #8]
    conv2d_7_scratch0_array.data = AI_PTR(activations + 609004);
 800650a:	f8df b374 	ldr.w	fp, [pc, #884]	; 8006880 <ai_network_init+0x158c>
    conv2d_44_scratch0_array.data = AI_PTR(activations + 7168);
 800650e:	f503 51e0 	add.w	r1, r3, #7168	; 0x1c00
    conv2d_7_scratch0_array.data_start = AI_PTR(activations + 609004);
 8006512:	e9cb 8802 	strd	r8, r8, [fp, #8]
    conv2d_8_scratch0_array.data = AI_PTR(activations + 150528);
 8006516:	f8df 836c 	ldr.w	r8, [pc, #876]	; 8006884 <ai_network_init+0x1590>
    conv2d_22_scratch0_array.data = AI_PTR(activations + 0);
 800651a:	f8df b36c 	ldr.w	fp, [pc, #876]	; 8006888 <ai_network_init+0x1594>
    conv2d_8_scratch0_array.data_start = AI_PTR(activations + 150528);
 800651e:	e9c8 aa02 	strd	sl, sl, [r8, #8]
    conv2d_13_scratch1_array.data = AI_PTR(activations + 50448);
 8006522:	f8df 8368 	ldr.w	r8, [pc, #872]	; 800688c <ai_network_init+0x1598>
    conv2d_41_scratch1_array.data = AI_PTR(activations + 14928);
 8006526:	f643 2a50 	movw	sl, #14928	; 0x3a50
    conv2d_13_scratch1_array.data_start = AI_PTR(activations + 50448);
 800652a:	e9c8 4402 	strd	r4, r4, [r8, #8]
    conv2d_17_scratch1_array.data = AI_PTR(activations + 51956);
 800652e:	4ca1      	ldr	r4, [pc, #644]	; (80067b4 <ai_network_init+0x14c0>)
    conv2d_52_scratch1_array.data = AI_PTR(activations + 13632);
 8006530:	f503 5855 	add.w	r8, r3, #13632	; 0x3540
    conv2d_41_scratch1_array.data = AI_PTR(activations + 14928);
 8006534:	449a      	add	sl, r3
    conv2d_52_scratch1_array.data = AI_PTR(activations + 13632);
 8006536:	f8cd 8014 	str.w	r8, [sp, #20]
    conv2d_42_scratch1_array.data = AI_PTR(activations + 5332);
 800653a:	f241 48d4 	movw	r8, #5332	; 0x14d4
    conv2d_17_scratch1_array.data_start = AI_PTR(activations + 51956);
 800653e:	e9c4 cc02 	strd	ip, ip, [r4, #8]
    conv2d_7_scratch1_array.data = AI_PTR(activations + 0);
 8006542:	4c9d      	ldr	r4, [pc, #628]	; (80067b8 <ai_network_init+0x14c4>)
    conv2d_42_scratch1_array.data = AI_PTR(activations + 5332);
 8006544:	4498      	add	r8, r3
    conv2d_7_scratch1_array.data_start = AI_PTR(activations + 0);
 8006546:	e9c4 3302 	strd	r3, r3, [r4, #8]
    conv2d_9_scratch0_array.data = AI_PTR(activations + 0);
 800654a:	4c9c      	ldr	r4, [pc, #624]	; (80067bc <ai_network_init+0x14c8>)
    conv2d_67_output_array.data_start = AI_PTR(activations + 0);
 800654c:	e9c6 3302 	strd	r3, r3, [r6, #8]
    conv2d_9_scratch0_array.data_start = AI_PTR(activations + 0);
 8006550:	e9c4 3302 	strd	r3, r3, [r4, #8]
    conv2d_10_scratch0_array.data = AI_PTR(activations + 0);
 8006554:	4c9a      	ldr	r4, [pc, #616]	; (80067c0 <ai_network_init+0x14cc>)
    conv2d_30_scratch1_array.data = AI_PTR(activations + 63312);
 8006556:	f24f 7650 	movw	r6, #63312	; 0xf750
    conv2d_21_scratch1_array.data = AI_PTR(activations + 25632);
 800655a:	9d02      	ldr	r5, [sp, #8]
    conv2d_30_scratch1_array.data = AI_PTR(activations + 63312);
 800655c:	441e      	add	r6, r3
    conv2d_10_scratch0_array.data_start = AI_PTR(activations + 0);
 800655e:	e9c4 3302 	strd	r3, r3, [r4, #8]
    conv2d_11_scratch0_array.data = AI_PTR(activations + 0);
 8006562:	4c98      	ldr	r4, [pc, #608]	; (80067c4 <ai_network_init+0x14d0>)
    conv2d_11_scratch0_array.data_start = AI_PTR(activations + 0);
 8006564:	e9c4 3302 	strd	r3, r3, [r4, #8]
    conv2d_13_scratch0_array.data = AI_PTR(activations + 0);
 8006568:	4c97      	ldr	r4, [pc, #604]	; (80067c8 <ai_network_init+0x14d4>)
    conv2d_13_scratch0_array.data_start = AI_PTR(activations + 0);
 800656a:	e9c4 3302 	strd	r3, r3, [r4, #8]
    conv2d_15_scratch0_array.data = AI_PTR(activations + 0);
 800656e:	4c97      	ldr	r4, [pc, #604]	; (80067cc <ai_network_init+0x14d8>)
    conv2d_15_scratch0_array.data_start = AI_PTR(activations + 0);
 8006570:	e9c4 3302 	strd	r3, r3, [r4, #8]
    conv2d_16_scratch0_array.data = AI_PTR(activations + 0);
 8006574:	4c96      	ldr	r4, [pc, #600]	; (80067d0 <ai_network_init+0x14dc>)
    conv2d_16_scratch0_array.data_start = AI_PTR(activations + 0);
 8006576:	e9c4 3302 	strd	r3, r3, [r4, #8]
    conv2d_17_scratch0_array.data = AI_PTR(activations + 0);
 800657a:	4c96      	ldr	r4, [pc, #600]	; (80067d4 <ai_network_init+0x14e0>)
    conv2d_17_scratch0_array.data_start = AI_PTR(activations + 0);
 800657c:	e9c4 3302 	strd	r3, r3, [r4, #8]
    conv2d_18_scratch0_array.data = AI_PTR(activations + 0);
 8006580:	4c95      	ldr	r4, [pc, #596]	; (80067d8 <ai_network_init+0x14e4>)
    conv2d_18_scratch0_array.data_start = AI_PTR(activations + 0);
 8006582:	e9c4 3302 	strd	r3, r3, [r4, #8]
    conv2d_18_scratch1_array.data = AI_PTR(activations + 51956);
 8006586:	4c95      	ldr	r4, [pc, #596]	; (80067dc <ai_network_init+0x14e8>)
    conv2d_18_scratch1_array.data_start = AI_PTR(activations + 51956);
 8006588:	e9c4 cc02 	strd	ip, ip, [r4, #8]
    conv2d_21_scratch1_array.data = AI_PTR(activations + 25632);
 800658c:	4c94      	ldr	r4, [pc, #592]	; (80067e0 <ai_network_init+0x14ec>)
    conv2d_64_scratch1_array.data = AI_PTR(activations + 7392);
 800658e:	f503 5ce7 	add.w	ip, r3, #7392	; 0x1ce0
    conv2d_21_scratch1_array.data_start = AI_PTR(activations + 25632);
 8006592:	e9c4 5502 	strd	r5, r5, [r4, #8]
    conv2d_22_scratch1_array.data = AI_PTR(activations + 25632);
 8006596:	4c93      	ldr	r4, [pc, #588]	; (80067e4 <ai_network_init+0x14f0>)
    conv2d_22_scratch1_array.data_start = AI_PTR(activations + 25632);
 8006598:	e9c4 5502 	strd	r5, r5, [r4, #8]
    conv2d_25_scratch1_array.data = AI_PTR(activations + 38176);
 800659c:	4c92      	ldr	r4, [pc, #584]	; (80067e8 <ai_network_init+0x14f4>)
    conv2d_25_scratch1_array.data_start = AI_PTR(activations + 38176);
 800659e:	e9c4 7702 	strd	r7, r7, [r4, #8]
    conv2d_27_scratch1_array.data = AI_PTR(activations + 3556);
 80065a2:	4f92      	ldr	r7, [pc, #584]	; (80067ec <ai_network_init+0x14f8>)
    conv2d_56_scratch0_array.data = AI_PTR(activations + 4072);
 80065a4:	f603 74e8 	addw	r4, r3, #4072	; 0xfe8
    conv2d_27_scratch1_array.data_start = AI_PTR(activations + 3556);
 80065a8:	e9c7 9902 	strd	r9, r9, [r7, #8]
    conv2d_29_scratch1_array.data = AI_PTR(activations + 6864);
 80065ac:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 8006890 <ai_network_init+0x159c>
    conv2d_29_scratch0_array.data = AI_PTR(activations + 5328);
 80065b0:	4f8f      	ldr	r7, [pc, #572]	; (80067f0 <ai_network_init+0x14fc>)
    conv2d_29_scratch1_array.data = AI_PTR(activations + 6864);
 80065b2:	f8c9 e008 	str.w	lr, [r9, #8]
    conv2d_29_scratch1_array.data_start = AI_PTR(activations + 6864);
 80065b6:	f8c9 e00c 	str.w	lr, [r9, #12]
    conv2d_30_scratch1_array.data = AI_PTR(activations + 63312);
 80065ba:	f8df 92d8 	ldr.w	r9, [pc, #728]	; 8006894 <ai_network_init+0x15a0>
    conv2d_19_scratch0_array.data = AI_PTR(activations + 0);
 80065be:	f8df e2d8 	ldr.w	lr, [pc, #728]	; 8006898 <ai_network_init+0x15a4>
    conv2d_30_scratch1_array.data = AI_PTR(activations + 63312);
 80065c2:	f8c9 6008 	str.w	r6, [r9, #8]
    conv2d_29_scratch0_array.data_start = AI_PTR(activations + 5328);
 80065c6:	e9c7 2202 	strd	r2, r2, [r7, #8]
    conv2d_30_scratch0_array.data = AI_PTR(activations + 5328);
 80065ca:	4f8a      	ldr	r7, [pc, #552]	; (80067f4 <ai_network_init+0x1500>)
    conv2d_30_scratch0_array.data_start = AI_PTR(activations + 5328);
 80065cc:	e9c7 2202 	strd	r2, r2, [r7, #8]
    conv2d_19_scratch0_array.data_start = AI_PTR(activations + 0);
 80065d0:	e9ce 3302 	strd	r3, r3, [lr, #8]
    conv2d_30_scratch1_array.data_start = AI_PTR(activations + 63312);
 80065d4:	f8c9 600c 	str.w	r6, [r9, #12]
    conv2d_48_scratch1_array.data = AI_PTR(activations + 20800);
 80065d8:	f245 1740 	movw	r7, #20800	; 0x5140
    conv2d_31_scratch0_array.data = AI_PTR(activations + 5328);
 80065dc:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 800689c <ai_network_init+0x15a8>
    conv2d_56_scratch1_array.data = AI_PTR(activations + 7656);
 80065e0:	f641 56e8 	movw	r6, #7656	; 0x1de8
    conv2d_37_scratch1_array.data = AI_PTR(activations + 10224);
 80065e4:	9d03      	ldr	r5, [sp, #12]
    conv2d_48_scratch1_array.data = AI_PTR(activations + 20800);
 80065e6:	441f      	add	r7, r3
    conv2d_21_scratch0_array.data = AI_PTR(activations + 0);
 80065e8:	f8df e2b4 	ldr.w	lr, [pc, #692]	; 80068a0 <ai_network_init+0x15ac>
    conv2d_56_scratch1_array.data = AI_PTR(activations + 7656);
 80065ec:	441e      	add	r6, r3
    conv2d_31_scratch0_array.data_start = AI_PTR(activations + 5328);
 80065ee:	e9c9 2202 	strd	r2, r2, [r9, #8]
    conv2d_37_scratch1_array.data = AI_PTR(activations + 10224);
 80065f2:	4a81      	ldr	r2, [pc, #516]	; (80067f8 <ai_network_init+0x1504>)
    conv2d_67_scratch0_array.data = AI_PTR(activations + 7952);
 80065f4:	f641 7910 	movw	r9, #7952	; 0x1f10
    conv2d_37_scratch1_array.data_start = AI_PTR(activations + 10224);
 80065f8:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_38_scratch1_array.data = AI_PTR(activations + 10224);
 80065fc:	4a7f      	ldr	r2, [pc, #508]	; (80067fc <ai_network_init+0x1508>)
    conv2d_67_scratch0_array.data = AI_PTR(activations + 7952);
 80065fe:	4499      	add	r9, r3
    conv2d_38_scratch1_array.data_start = AI_PTR(activations + 10224);
 8006600:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_33_scratch1_array.data = AI_PTR(activations + 15552);
 8006604:	9d00      	ldr	r5, [sp, #0]
 8006606:	4a7e      	ldr	r2, [pc, #504]	; (8006800 <ai_network_init+0x150c>)
    conv2d_22_scratch0_array.data_start = AI_PTR(activations + 0);
 8006608:	e9cb 3302 	strd	r3, r3, [fp, #8]
    conv2d_33_scratch1_array.data_start = AI_PTR(activations + 15552);
 800660c:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_23_scratch0_array.data = AI_PTR(activations + 0);
 8006610:	f8df b290 	ldr.w	fp, [pc, #656]	; 80068a4 <ai_network_init+0x15b0>
    conv2d_34_scratch1_array.data = AI_PTR(activations + 15552);
 8006614:	4a7b      	ldr	r2, [pc, #492]	; (8006804 <ai_network_init+0x1510>)
    conv2d_23_scratch0_array.data_start = AI_PTR(activations + 0);
 8006616:	e9cb 3302 	strd	r3, r3, [fp, #8]
    conv2d_34_scratch1_array.data_start = AI_PTR(activations + 15552);
 800661a:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_25_scratch0_array.data = AI_PTR(activations + 0);
 800661e:	f8df b288 	ldr.w	fp, [pc, #648]	; 80068a8 <ai_network_init+0x15b4>
    conv2d_42_scratch1_array.data = AI_PTR(activations + 5332);
 8006622:	4d79      	ldr	r5, [pc, #484]	; (8006808 <ai_network_init+0x1514>)
    conv2d_41_scratch1_array.data = AI_PTR(activations + 14928);
 8006624:	4a79      	ldr	r2, [pc, #484]	; (800680c <ai_network_init+0x1518>)
    conv2d_25_scratch0_array.data_start = AI_PTR(activations + 0);
 8006626:	e9cb 3302 	strd	r3, r3, [fp, #8]
    conv2d_42_scratch1_array.data_start = AI_PTR(activations + 5332);
 800662a:	e9c5 8802 	strd	r8, r8, [r5, #8]
    conv2d_27_scratch0_array.data = AI_PTR(activations + 0);
 800662e:	f8df b27c 	ldr.w	fp, [pc, #636]	; 80068ac <ai_network_init+0x15b8>
    conv2d_33_scratch0_array.data = AI_PTR(activations + 0);
 8006632:	4d77      	ldr	r5, [pc, #476]	; (8006810 <ai_network_init+0x151c>)
    conv2d_34_scratch0_array.data = AI_PTR(activations + 0);
 8006634:	f8df 8278 	ldr.w	r8, [pc, #632]	; 80068b0 <ai_network_init+0x15bc>
    conv2d_27_scratch0_array.data_start = AI_PTR(activations + 0);
 8006638:	e9cb 3302 	strd	r3, r3, [fp, #8]
    conv2d_33_scratch0_array.data_start = AI_PTR(activations + 0);
 800663c:	e9c5 3302 	strd	r3, r3, [r5, #8]
    conv2d_28_scratch0_array.data = AI_PTR(activations + 0);
 8006640:	f8df b270 	ldr.w	fp, [pc, #624]	; 80068b4 <ai_network_init+0x15c0>
    conv2d_35_scratch0_array.data = AI_PTR(activations + 0);
 8006644:	4d73      	ldr	r5, [pc, #460]	; (8006814 <ai_network_init+0x1520>)
    conv2d_21_scratch0_array.data_start = AI_PTR(activations + 0);
 8006646:	e9ce 3302 	strd	r3, r3, [lr, #8]
    conv2d_28_scratch0_array.data_start = AI_PTR(activations + 0);
 800664a:	e9cb 3302 	strd	r3, r3, [fp, #8]
    conv2d_41_scratch1_array.data_start = AI_PTR(activations + 14928);
 800664e:	e9c2 aa02 	strd	sl, sl, [r2, #8]
    conv2d_42_scratch0_array.data = AI_PTR(activations + 0);
 8006652:	f8df b264 	ldr.w	fp, [pc, #612]	; 80068b8 <ai_network_init+0x15c4>
    conv2d_54_scratch1_array.data = AI_PTR(activations + 7108);
 8006656:	f641 3ec4 	movw	lr, #7108	; 0x1bc4
    conv2d_60_scratch1_array.data = AI_PTR(activations + 11464);
 800665a:	f642 42c8 	movw	r2, #11464	; 0x2cc8
    conv2d_65_scratch1_array.data = AI_PTR(activations + 40320);
 800665e:	f649 5a80 	movw	sl, #40320	; 0x9d80
    conv2d_54_scratch1_array.data = AI_PTR(activations + 7108);
 8006662:	449e      	add	lr, r3
    conv2d_60_scratch1_array.data = AI_PTR(activations + 11464);
 8006664:	441a      	add	r2, r3
    conv2d_65_scratch1_array.data = AI_PTR(activations + 40320);
 8006666:	449a      	add	sl, r3
    conv2d_34_scratch0_array.data_start = AI_PTR(activations + 0);
 8006668:	e9c8 3302 	strd	r3, r3, [r8, #8]
    conv2d_35_scratch0_array.data_start = AI_PTR(activations + 0);
 800666c:	e9c5 3302 	strd	r3, r3, [r5, #8]
    conv2d_38_scratch0_array.data = AI_PTR(activations + 0);
 8006670:	4d69      	ldr	r5, [pc, #420]	; (8006818 <ai_network_init+0x1524>)
    conv2d_42_scratch0_array.data = AI_PTR(activations + 0);
 8006672:	f8cb 3008 	str.w	r3, [fp, #8]
    conv2d_42_scratch0_array.data_start = AI_PTR(activations + 0);
 8006676:	f8cb 300c 	str.w	r3, [fp, #12]
    conv2d_38_scratch0_array.data = AI_PTR(activations + 0);
 800667a:	60ab      	str	r3, [r5, #8]
    conv2d_38_scratch0_array.data_start = AI_PTR(activations + 0);
 800667c:	60eb      	str	r3, [r5, #12]
    conv2d_43_scratch0_array.data = AI_PTR(activations + 0);
 800667e:	f8df b23c 	ldr.w	fp, [pc, #572]	; 80068bc <ai_network_init+0x15c8>
    conv2d_39_scratch0_array.data = AI_PTR(activations + 0);
 8006682:	4d66      	ldr	r5, [pc, #408]	; (800681c <ai_network_init+0x1528>)
    conv2d_37_scratch0_array.data = AI_PTR(activations + 0);
 8006684:	f8df 8238 	ldr.w	r8, [pc, #568]	; 80068c0 <ai_network_init+0x15cc>
    conv2d_39_scratch0_array.data = AI_PTR(activations + 0);
 8006688:	60ab      	str	r3, [r5, #8]
    conv2d_39_scratch0_array.data_start = AI_PTR(activations + 0);
 800668a:	60eb      	str	r3, [r5, #12]
    conv2d_41_scratch0_array.data = AI_PTR(activations + 0);
 800668c:	4d64      	ldr	r5, [pc, #400]	; (8006820 <ai_network_init+0x152c>)
    conv2d_43_scratch0_array.data_start = AI_PTR(activations + 0);
 800668e:	e9cb 3302 	strd	r3, r3, [fp, #8]
    conv2d_44_scratch0_array.data = AI_PTR(activations + 7168);
 8006692:	f8df b230 	ldr.w	fp, [pc, #560]	; 80068c4 <ai_network_init+0x15d0>
    conv2d_41_scratch0_array.data_start = AI_PTR(activations + 0);
 8006696:	e9c5 3302 	strd	r3, r3, [r5, #8]
    conv2d_44_scratch0_array.data_start = AI_PTR(activations + 7168);
 800669a:	e9cb 1102 	strd	r1, r1, [fp, #8]
    conv2d_67_scratch2_array.data = AI_PTR(activations + 83920);
 800669e:	4d61      	ldr	r5, [pc, #388]	; (8006824 <ai_network_init+0x1530>)
    conv2d_45_scratch0_array.data = AI_PTR(activations + 7168);
 80066a0:	f8df b224 	ldr.w	fp, [pc, #548]	; 80068c8 <ai_network_init+0x15d4>
    conv2d_67_scratch2_array.data = AI_PTR(activations + 83920);
 80066a4:	441d      	add	r5, r3
    conv2d_45_scratch0_array.data_start = AI_PTR(activations + 7168);
 80066a6:	e9cb 1102 	strd	r1, r1, [fp, #8]
    conv2d_46_scratch0_array.data = AI_PTR(activations + 7168);
 80066aa:	f8df b220 	ldr.w	fp, [pc, #544]	; 80068cc <ai_network_init+0x15d8>
    conv2d_67_scratch2_array.data = AI_PTR(activations + 83920);
 80066ae:	9500      	str	r5, [sp, #0]
    conv2d_44_scratch1_array.data = AI_PTR(activations + 9216);
 80066b0:	9d01      	ldr	r5, [sp, #4]
    conv2d_46_scratch0_array.data_start = AI_PTR(activations + 7168);
 80066b2:	e9cb 1102 	strd	r1, r1, [fp, #8]
    conv2d_44_scratch1_array.data = AI_PTR(activations + 9216);
 80066b6:	495c      	ldr	r1, [pc, #368]	; (8006828 <ai_network_init+0x1534>)
    conv2d_48_scratch1_array.data = AI_PTR(activations + 20800);
 80066b8:	f8df b214 	ldr.w	fp, [pc, #532]	; 80068d0 <ai_network_init+0x15dc>
    conv2d_44_scratch1_array.data_start = AI_PTR(activations + 9216);
 80066bc:	e9c1 5502 	strd	r5, r5, [r1, #8]
    conv2d_45_scratch1_array.data = AI_PTR(activations + 84480);
 80066c0:	9d04      	ldr	r5, [sp, #16]
 80066c2:	495a      	ldr	r1, [pc, #360]	; (800682c <ai_network_init+0x1538>)
    conv2d_45_scratch1_array.data_start = AI_PTR(activations + 84480);
 80066c4:	e9c1 5502 	strd	r5, r5, [r1, #8]
    conv2d_49_scratch1_array.data = AI_PTR(activations + 20800);
 80066c8:	4959      	ldr	r1, [pc, #356]	; (8006830 <ai_network_init+0x153c>)
    conv2d_48_scratch1_array.data_start = AI_PTR(activations + 20800);
 80066ca:	e9cb 7702 	strd	r7, r7, [fp, #8]
    conv2d_49_scratch1_array.data_start = AI_PTR(activations + 20800);
 80066ce:	e9c1 7702 	strd	r7, r7, [r1, #8]
    conv2d_54_scratch1_array.data = AI_PTR(activations + 7108);
 80066d2:	4f58      	ldr	r7, [pc, #352]	; (8006834 <ai_network_init+0x1540>)
    conv2d_56_scratch0_array.data = AI_PTR(activations + 4072);
 80066d4:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80068d4 <ai_network_init+0x15e0>
    conv2d_52_scratch1_array.data = AI_PTR(activations + 13632);
 80066d8:	4957      	ldr	r1, [pc, #348]	; (8006838 <ai_network_init+0x1544>)
    conv2d_37_scratch0_array.data_start = AI_PTR(activations + 0);
 80066da:	e9c8 3302 	strd	r3, r3, [r8, #8]
    conv2d_52_scratch1_array.data = AI_PTR(activations + 13632);
 80066de:	9d05      	ldr	r5, [sp, #20]
    conv2d_67_scratch1_array.data = AI_PTR(activations + 21200);
 80066e0:	f245 28d0 	movw	r8, #21200	; 0x52d0
    conv2d_54_scratch1_array.data_start = AI_PTR(activations + 7108);
 80066e4:	e9c7 ee02 	strd	lr, lr, [r7, #8]
    conv2d_48_scratch0_array.data = AI_PTR(activations + 0);
 80066e8:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 80068d8 <ai_network_init+0x15e4>
    conv2d_67_scratch1_array.data = AI_PTR(activations + 21200);
 80066ec:	4498      	add	r8, r3
    conv2d_49_scratch0_array.data = AI_PTR(activations + 0);
 80066ee:	4f53      	ldr	r7, [pc, #332]	; (800683c <ai_network_init+0x1548>)
    conv2d_56_scratch0_array.data_start = AI_PTR(activations + 4072);
 80066f0:	e9cb 4402 	strd	r4, r4, [fp, #8]
    conv2d_48_scratch0_array.data_start = AI_PTR(activations + 0);
 80066f4:	e9ce 3302 	strd	r3, r3, [lr, #8]
    conv2d_50_scratch0_array.data = AI_PTR(activations + 0);
 80066f8:	f8df b1e0 	ldr.w	fp, [pc, #480]	; 80068dc <ai_network_init+0x15e8>
    conv2d_52_scratch0_array.data = AI_PTR(activations + 0);
 80066fc:	f8df e1e0 	ldr.w	lr, [pc, #480]	; 80068e0 <ai_network_init+0x15ec>
    conv2d_52_scratch1_array.data_start = AI_PTR(activations + 13632);
 8006700:	e9c1 5502 	strd	r5, r5, [r1, #8]
    conv2d_49_scratch0_array.data_start = AI_PTR(activations + 0);
 8006704:	e9c7 3302 	strd	r3, r3, [r7, #8]
    conv2d_50_scratch0_array.data_start = AI_PTR(activations + 0);
 8006708:	e9cb 3302 	strd	r3, r3, [fp, #8]
    conv2d_52_scratch0_array.data_start = AI_PTR(activations + 0);
 800670c:	e9ce 3302 	strd	r3, r3, [lr, #8]
    conv2d_56_scratch1_array.data = AI_PTR(activations + 7656);
 8006710:	494b      	ldr	r1, [pc, #300]	; (8006840 <ai_network_init+0x154c>)
    conv2d_54_scratch0_array.data = AI_PTR(activations + 0);
 8006712:	4f4c      	ldr	r7, [pc, #304]	; (8006844 <ai_network_init+0x1550>)
    conv2d_55_scratch0_array.data = AI_PTR(activations + 0);
 8006714:	f8df b1cc 	ldr.w	fp, [pc, #460]	; 80068e4 <ai_network_init+0x15f0>
    conv2d_57_scratch0_array.data = AI_PTR(activations + 4072);
 8006718:	f8df e1cc 	ldr.w	lr, [pc, #460]	; 80068e8 <ai_network_init+0x15f4>
    conv2d_56_scratch1_array.data = AI_PTR(activations + 7656);
 800671c:	608e      	str	r6, [r1, #8]
    conv2d_56_scratch1_array.data_start = AI_PTR(activations + 7656);
 800671e:	60ce      	str	r6, [r1, #12]
    conv2d_61_scratch0_array.data = AI_PTR(activations + 11464);
 8006720:	4e49      	ldr	r6, [pc, #292]	; (8006848 <ai_network_init+0x1554>)
    conv2d_64_scratch1_array.data = AI_PTR(activations + 7392);
 8006722:	494a      	ldr	r1, [pc, #296]	; (800684c <ai_network_init+0x1558>)
    conv2d_54_scratch0_array.data_start = AI_PTR(activations + 0);
 8006724:	e9c7 3302 	strd	r3, r3, [r7, #8]
    conv2d_55_scratch0_array.data_start = AI_PTR(activations + 0);
 8006728:	e9cb 3302 	strd	r3, r3, [fp, #8]
    conv2d_57_scratch0_array.data_start = AI_PTR(activations + 4072);
 800672c:	e9ce 4402 	strd	r4, r4, [lr, #8]
    conv2d_58_scratch0_array.data = AI_PTR(activations + 4072);
 8006730:	4f47      	ldr	r7, [pc, #284]	; (8006850 <ai_network_init+0x155c>)
    conv2d_60_scratch1_array.data = AI_PTR(activations + 11464);
 8006732:	f8df b1b8 	ldr.w	fp, [pc, #440]	; 80068ec <ai_network_init+0x15f8>
    conv2d_65_scratch1_array.data = AI_PTR(activations + 40320);
 8006736:	f8df e1b8 	ldr.w	lr, [pc, #440]	; 80068f0 <ai_network_init+0x15fc>
    conv2d_58_scratch0_array.data_start = AI_PTR(activations + 4072);
 800673a:	e9c7 4402 	strd	r4, r4, [r7, #8]
    conv2d_60_scratch1_array.data_start = AI_PTR(activations + 11464);
 800673e:	e9cb 2202 	strd	r2, r2, [fp, #8]
    conv2d_61_scratch0_array.data_start = AI_PTR(activations + 11464);
 8006742:	e9c6 2202 	strd	r2, r2, [r6, #8]
    conv2d_64_scratch1_array.data_start = AI_PTR(activations + 7392);
 8006746:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    conv2d_67_scratch0_array.data = AI_PTR(activations + 7952);
 800674a:	4f42      	ldr	r7, [pc, #264]	; (8006854 <ai_network_init+0x1560>)
    conv2d_67_scratch1_array.data = AI_PTR(activations + 21200);
 800674c:	4c42      	ldr	r4, [pc, #264]	; (8006858 <ai_network_init+0x1564>)
    conv2d_67_scratch2_array.data = AI_PTR(activations + 83920);
 800674e:	f8df b1a4 	ldr.w	fp, [pc, #420]	; 80068f4 <ai_network_init+0x1600>
    conv2d_60_scratch0_array.data = AI_PTR(activations + 0);
 8006752:	4e42      	ldr	r6, [pc, #264]	; (800685c <ai_network_init+0x1568>)
    conv2d_62_scratch0_array.data = AI_PTR(activations + 0);
 8006754:	4a42      	ldr	r2, [pc, #264]	; (8006860 <ai_network_init+0x156c>)
    conv2d_64_scratch0_array.data = AI_PTR(activations + 0);
 8006756:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 80068f8 <ai_network_init+0x1604>
    conv2d_65_scratch0_array.data = AI_PTR(activations + 0);
 800675a:	4942      	ldr	r1, [pc, #264]	; (8006864 <ai_network_init+0x1570>)
    conv2d_65_scratch1_array.data_start = AI_PTR(activations + 40320);
 800675c:	e9ce aa02 	strd	sl, sl, [lr, #8]
    conv2d_66_scratch0_array.data = AI_PTR(activations + 0);
 8006760:	f8df e198 	ldr.w	lr, [pc, #408]	; 80068fc <ai_network_init+0x1608>
    conv2d_67_scratch2_array.data = AI_PTR(activations + 83920);
 8006764:	9d00      	ldr	r5, [sp, #0]
    conv2d_67_scratch0_array.data_start = AI_PTR(activations + 7952);
 8006766:	e9c7 9902 	strd	r9, r9, [r7, #8]
 800676a:	e0c9      	b.n	8006900 <ai_network_init+0x160c>
 800676c:	24006360 	.word	0x24006360
 8006770:	0007ded8 	.word	0x0007ded8
 8006774:	24004fd8 	.word	0x24004fd8
 8006778:	24006450 	.word	0x24006450
 800677c:	24007154 	.word	0x24007154
 8006780:	24006540 	.word	0x24006540
 8006784:	2400665c 	.word	0x2400665c
 8006788:	24006778 	.word	0x24006778
 800678c:	24006d1c 	.word	0x24006d1c
 8006790:	24006dc0 	.word	0x24006dc0
 8006794:	24007250 	.word	0x24007250
 8006798:	24004fac 	.word	0x24004fac
 800679c:	24005950 	.word	0x24005950
 80067a0:	24006884 	.word	0x24006884
 80067a4:	24006180 	.word	0x24006180
 80067a8:	24006c30 	.word	0x24006c30
 80067ac:	240036c4 	.word	0x240036c4
 80067b0:	24006154 	.word	0x24006154
 80067b4:	24003bcc 	.word	0x24003bcc
 80067b8:	24006a24 	.word	0x24006a24
 80067bc:	24006c04 	.word	0x24006c04
 80067c0:	24003698 	.word	0x24003698
 80067c4:	240037b4 	.word	0x240037b4
 80067c8:	240038a4 	.word	0x240038a4
 80067cc:	240039c0 	.word	0x240039c0
 80067d0:	24003ab0 	.word	0x24003ab0
 80067d4:	24003ba0 	.word	0x24003ba0
 80067d8:	24003cbc 	.word	0x24003cbc
 80067dc:	24003ce8 	.word	0x24003ce8
 80067e0:	24003ef4 	.word	0x24003ef4
 80067e4:	24004010 	.word	0x24004010
 80067e8:	2400421c 	.word	0x2400421c
 80067ec:	24004338 	.word	0x24004338
 80067f0:	24004518 	.word	0x24004518
 80067f4:	24004750 	.word	0x24004750
 80067f8:	24004cb0 	.word	0x24004cb0
 80067fc:	24004dcc 	.word	0x24004dcc
 8006800:	24004988 	.word	0x24004988
 8006804:	24004aa4 	.word	0x24004aa4
 8006808:	24005210 	.word	0x24005210
 800680c:	240050f4 	.word	0x240050f4
 8006810:	2400495c 	.word	0x2400495c
 8006814:	24004b94 	.word	0x24004b94
 8006818:	24004da0 	.word	0x24004da0
 800681c:	24004ebc 	.word	0x24004ebc
 8006820:	240050c8 	.word	0x240050c8
 8006824:	000147d0 	.word	0x000147d0
 8006828:	2400541c 	.word	0x2400541c
 800682c:	24005538 	.word	0x24005538
 8006830:	24005860 	.word	0x24005860
 8006834:	24005c78 	.word	0x24005c78
 8006838:	24005b5c 	.word	0x24005b5c
 800683c:	24005834 	.word	0x24005834
 8006840:	24005e84 	.word	0x24005e84
 8006844:	24005c4c 	.word	0x24005c4c
 8006848:	2400638c 	.word	0x2400638c
 800684c:	24006598 	.word	0x24006598
 8006850:	24006064 	.word	0x24006064
 8006854:	240068b0 	.word	0x240068b0
 8006858:	240068dc 	.word	0x240068dc
 800685c:	24006270 	.word	0x24006270
 8006860:	2400647c 	.word	0x2400647c
 8006864:	24006688 	.word	0x24006688
 8006868:	24006244 	.word	0x24006244
 800686c:	24004660 	.word	0x24004660
 8006870:	00094aec 	.word	0x00094aec
 8006874:	24006e08 	.word	0x24006e08
 8006878:	24004634 	.word	0x24004634
 800687c:	24007204 	.word	0x24007204
 8006880:	240069f8 	.word	0x240069f8
 8006884:	24006b14 	.word	0x24006b14
 8006888:	24003fe4 	.word	0x24003fe4
 800688c:	240038d0 	.word	0x240038d0
 8006890:	24004544 	.word	0x24004544
 8006894:	2400477c 	.word	0x2400477c
 8006898:	24003dd8 	.word	0x24003dd8
 800689c:	2400486c 	.word	0x2400486c
 80068a0:	24003ec8 	.word	0x24003ec8
 80068a4:	24004100 	.word	0x24004100
 80068a8:	240041f0 	.word	0x240041f0
 80068ac:	2400430c 	.word	0x2400430c
 80068b0:	24004a78 	.word	0x24004a78
 80068b4:	24004428 	.word	0x24004428
 80068b8:	240051e4 	.word	0x240051e4
 80068bc:	24005300 	.word	0x24005300
 80068c0:	24004c84 	.word	0x24004c84
 80068c4:	240053f0 	.word	0x240053f0
 80068c8:	2400550c 	.word	0x2400550c
 80068cc:	24005628 	.word	0x24005628
 80068d0:	24005744 	.word	0x24005744
 80068d4:	24005e58 	.word	0x24005e58
 80068d8:	24005718 	.word	0x24005718
 80068dc:	24005a40 	.word	0x24005a40
 80068e0:	24005b30 	.word	0x24005b30
 80068e4:	24005d68 	.word	0x24005d68
 80068e8:	24005f74 	.word	0x24005f74
 80068ec:	2400629c 	.word	0x2400629c
 80068f0:	240066b4 	.word	0x240066b4
 80068f4:	24006908 	.word	0x24006908
 80068f8:	2400656c 	.word	0x2400656c
 80068fc:	240067a4 	.word	0x240067a4
    conv2d_67_scratch1_array.data_start = AI_PTR(activations + 21200);
 8006900:	e9c4 8802 	strd	r8, r8, [r4, #8]
    conv2d_67_scratch2_array.data_start = AI_PTR(activations + 83920);
 8006904:	e9cb 5502 	strd	r5, r5, [fp, #8]
    conv2d_60_scratch0_array.data_start = AI_PTR(activations + 0);
 8006908:	e9c6 3302 	strd	r3, r3, [r6, #8]
    conv2d_62_scratch0_array.data_start = AI_PTR(activations + 0);
 800690c:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_64_scratch0_array.data_start = AI_PTR(activations + 0);
 8006910:	e9cc 3302 	strd	r3, r3, [ip, #8]
    conv2d_65_scratch0_array.data_start = AI_PTR(activations + 0);
 8006914:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_66_scratch0_array.data_start = AI_PTR(activations + 0);
 8006918:	e9ce 3302 	strd	r3, r3, [lr, #8]

  return ok;
}
 800691c:	b007      	add	sp, #28
 800691e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ok &= ai_platform_network_post_init(network);
 8006922:	f017 be99 	b.w	801e658 <ai_platform_network_post_init>
}
 8006926:	b007      	add	sp, #28
 8006928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800692c <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 800692c:	f017 bf42 	b.w	801e7b4 <ai_platform_network_process>

08006930 <ai_network_data_weights_get>:
    0x22, 0xd5, 0xf6, 0xe6, 0x16, 0xf9, 0x3c, 0x19, 0xe8,
    0x1b, 0xf5, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00  };
  return AI_HANDLE_PTR(s_network_weights);
}
 8006930:	4800      	ldr	r0, [pc, #0]	; (8006934 <ai_network_data_weights_get+0x4>)
 8006932:	4770      	bx	lr
 8006934:	0803b800 	.word	0x0803b800

08006938 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006938:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 800693a:	2301      	movs	r3, #1
 800693c:	4c07      	ldr	r4, [pc, #28]	; (800695c <SD_initialize+0x24>)
  if(BSP_SD_GetCardState(0) == SD_TRANSFER_OK)
 800693e:	2000      	movs	r0, #0
  Stat = STA_NOINIT;
 8006940:	7023      	strb	r3, [r4, #0]
  Stat = STA_NOINIT;
 8006942:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState(0) == SD_TRANSFER_OK)
 8006944:	f006 ff8a 	bl	800d85c <BSP_SD_GetCardState>
 8006948:	b918      	cbnz	r0, 8006952 <SD_initialize+0x1a>
    Stat &= ~STA_NOINIT;
 800694a:	7823      	ldrb	r3, [r4, #0]
 800694c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006950:	7023      	strb	r3, [r4, #0]
  return Stat;
 8006952:	7823      	ldrb	r3, [r4, #0]
 8006954:	b2db      	uxtb	r3, r3
  {
    Stat = SD_CheckStatus(lun);
  }

#else
  Stat = SD_CheckStatus(lun);
 8006956:	7023      	strb	r3, [r4, #0]
#endif
  return Stat;
 8006958:	7820      	ldrb	r0, [r4, #0]
}
 800695a:	bd10      	pop	{r4, pc}
 800695c:	2400728c 	.word	0x2400728c

08006960 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006960:	b508      	push	{r3, lr}
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks(0, (uint32_t*)buff,
 8006962:	2000      	movs	r0, #0
 8006964:	f006 ff4e 	bl	800d804 <BSP_SD_ReadBlocks>
 8006968:	b928      	cbnz	r0, 8006976 <SD_read+0x16>
                       (uint32_t) (sector),
                       count) == BSP_ERROR_NONE)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState(0) != SD_TRANSFER_OK)
 800696a:	2000      	movs	r0, #0
 800696c:	f006 ff76 	bl	800d85c <BSP_SD_GetCardState>
 8006970:	2800      	cmp	r0, #0
 8006972:	d1fa      	bne.n	800696a <SD_read+0xa>
    }
    res = RES_OK;
  }

  return res;
}
 8006974:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8006976:	2001      	movs	r0, #1
}
 8006978:	bd08      	pop	{r3, pc}
 800697a:	bf00      	nop

0800697c <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800697c:	4b18      	ldr	r3, [pc, #96]	; (80069e0 <SD_ioctl+0x64>)
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	07db      	lsls	r3, r3, #31
 8006982:	d408      	bmi.n	8006996 <SD_ioctl+0x1a>
{
 8006984:	b510      	push	{r4, lr}
 8006986:	4614      	mov	r4, r2
 8006988:	b08a      	sub	sp, #40	; 0x28

  switch (cmd)
 800698a:	2903      	cmp	r1, #3
 800698c:	d824      	bhi.n	80069d8 <SD_ioctl+0x5c>
 800698e:	e8df f001 	tbb	[pc, r1]
 8006992:	0704      	.short	0x0704
 8006994:	1910      	.short	0x1910
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006996:	2003      	movs	r0, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 8006998:	4770      	bx	lr
    res = RES_OK;
 800699a:	2000      	movs	r0, #0
}
 800699c:	b00a      	add	sp, #40	; 0x28
 800699e:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(0, &CardInfo);
 80069a0:	a901      	add	r1, sp, #4
 80069a2:	2000      	movs	r0, #0
 80069a4:	f006 ff66 	bl	800d874 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80069a8:	9b07      	ldr	r3, [sp, #28]
    res = RES_OK;
 80069aa:	2000      	movs	r0, #0
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80069ac:	6023      	str	r3, [r4, #0]
}
 80069ae:	b00a      	add	sp, #40	; 0x28
 80069b0:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(0, &CardInfo);
 80069b2:	a901      	add	r1, sp, #4
 80069b4:	2000      	movs	r0, #0
 80069b6:	f006 ff5d 	bl	800d874 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80069ba:	9b08      	ldr	r3, [sp, #32]
    res = RES_OK;
 80069bc:	2000      	movs	r0, #0
    *(WORD*)buff = CardInfo.LogBlockSize;
 80069be:	8023      	strh	r3, [r4, #0]
}
 80069c0:	b00a      	add	sp, #40	; 0x28
 80069c2:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(0, &CardInfo);
 80069c4:	a901      	add	r1, sp, #4
 80069c6:	2000      	movs	r0, #0
 80069c8:	f006 ff54 	bl	800d874 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80069cc:	9b08      	ldr	r3, [sp, #32]
 80069ce:	2000      	movs	r0, #0
 80069d0:	0a5b      	lsrs	r3, r3, #9
 80069d2:	6023      	str	r3, [r4, #0]
}
 80069d4:	b00a      	add	sp, #40	; 0x28
 80069d6:	bd10      	pop	{r4, pc}
    res = RES_PARERR;
 80069d8:	2004      	movs	r0, #4
}
 80069da:	b00a      	add	sp, #40	; 0x28
 80069dc:	bd10      	pop	{r4, pc}
 80069de:	bf00      	nop
 80069e0:	2400728c 	.word	0x2400728c

080069e4 <SD_write>:
{
 80069e4:	b508      	push	{r3, lr}
  if(BSP_SD_WriteBlocks(0, (uint32_t*)buff,
 80069e6:	2000      	movs	r0, #0
 80069e8:	f006 ff22 	bl	800d830 <BSP_SD_WriteBlocks>
 80069ec:	b928      	cbnz	r0, 80069fa <SD_write+0x16>
    while(BSP_SD_GetCardState(0) != SD_TRANSFER_OK)
 80069ee:	2000      	movs	r0, #0
 80069f0:	f006 ff34 	bl	800d85c <BSP_SD_GetCardState>
 80069f4:	2800      	cmp	r0, #0
 80069f6:	d1fa      	bne.n	80069ee <SD_write+0xa>
}
 80069f8:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 80069fa:	2001      	movs	r0, #1
}
 80069fc:	bd08      	pop	{r3, pc}
 80069fe:	bf00      	nop

08006a00 <SD_status>:
{
 8006a00:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8006a02:	2301      	movs	r3, #1
 8006a04:	4c05      	ldr	r4, [pc, #20]	; (8006a1c <SD_status+0x1c>)
  if(BSP_SD_GetCardState(0) == SD_TRANSFER_OK)
 8006a06:	2000      	movs	r0, #0
  Stat = STA_NOINIT;
 8006a08:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState(0) == SD_TRANSFER_OK)
 8006a0a:	f006 ff27 	bl	800d85c <BSP_SD_GetCardState>
 8006a0e:	b918      	cbnz	r0, 8006a18 <SD_status+0x18>
    Stat &= ~STA_NOINIT;
 8006a10:	7823      	ldrb	r3, [r4, #0]
 8006a12:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006a16:	7023      	strb	r3, [r4, #0]
  return Stat;
 8006a18:	7820      	ldrb	r0, [r4, #0]
}
 8006a1a:	bd10      	pop	{r4, pc}
 8006a1c:	2400728c 	.word	0x2400728c

08006a20 <HAL_MspInit>:
/**
 * @brief  Initializes the Global MSP.
 * @param  None
 * @retval None
 */
void HAL_MspInit(void) {}
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop

08006a24 <HAL_RNG_MspInit>:
 *           - Peripheral's clock enable
 * @param hrng: RNG handle pointer
 * @retval None
 */
void HAL_RNG_MspInit(RNG_HandleTypeDef *hrng)
{
 8006a24:	b500      	push	{lr}
 8006a26:	b0b3      	sub	sp, #204	; 0xcc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

  /*Select PLL output as RNG clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8006a28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_PLL;
 8006a2c:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8006a30:	a802      	add	r0, sp, #8
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8006a32:	9202      	str	r2, [sp, #8]
  PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_PLL;
 8006a34:	9322      	str	r3, [sp, #136]	; 0x88
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8006a36:	f00c f9a1 	bl	8012d7c <HAL_RCCEx_PeriphCLKConfig>

  /* RNG Peripheral clock enable */
  __HAL_RCC_RNG_CLK_ENABLE();
 8006a3a:	4b08      	ldr	r3, [pc, #32]	; (8006a5c <HAL_RNG_MspInit+0x38>)
 8006a3c:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 8006a40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a44:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8006a48:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a50:	9301      	str	r3, [sp, #4]
 8006a52:	9b01      	ldr	r3, [sp, #4]
}
 8006a54:	b033      	add	sp, #204	; 0xcc
 8006a56:	f85d fb04 	ldr.w	pc, [sp], #4
 8006a5a:	bf00      	nop
 8006a5c:	58024400 	.word	0x58024400

08006a60 <HAL_RNG_MspDeInit>:
 * @retval None
 */
void HAL_RNG_MspDeInit(RNG_HandleTypeDef *hrng)
{
  /* Enable RNG reset state */
  __HAL_RCC_RNG_FORCE_RESET();
 8006a60:	4b06      	ldr	r3, [pc, #24]	; (8006a7c <HAL_RNG_MspDeInit+0x1c>)
 8006a62:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006a66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Release RNG from reset state */
  __HAL_RCC_RNG_RELEASE_RESET();
 8006a6e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006a72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8006a7a:	4770      	bx	lr
 8006a7c:	58024400 	.word	0x58024400

08006a80 <HAL_UART_MspInit>:
  *           - NVIC configuration for DMA interrupt request enable
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8006a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  RCC_PeriphCLKInitTypeDef RCC_PeriphClkInit;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8006a84:	4e51      	ldr	r6, [pc, #324]	; (8006bcc <HAL_UART_MspInit+0x14c>)
  USARTx_RX_GPIO_CLK_ENABLE();

  /* Select SysClk as source of USART1 clocks */
  RCC_PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART16;
 8006a86:	2701      	movs	r7, #1
{
 8006a88:	b0bd      	sub	sp, #244	; 0xf4
  RCC_PeriphClkInit.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8006a8a:	2400      	movs	r4, #0
  USARTx_TX_GPIO_CLK_ENABLE();
 8006a8c:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
{
 8006a90:	4680      	mov	r8, r0
  HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphClkInit);
 8006a92:	a80c      	add	r0, sp, #48	; 0x30
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = USARTx_TX_AF;

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8006a94:	f8df b144 	ldr.w	fp, [pc, #324]	; 8006bdc <HAL_UART_MspInit+0x15c>
  USARTx_TX_GPIO_CLK_ENABLE();
 8006a98:	433b      	orrs	r3, r7
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a9a:	f04f 0903 	mov.w	r9, #3
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8006a9e:	2507      	movs	r5, #7

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8006aa0:	f44f 6a80 	mov.w	sl, #1024	; 0x400
  USARTx_TX_GPIO_CLK_ENABLE();
 8006aa4:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 8006aa8:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 8006aac:	403b      	ands	r3, r7
 8006aae:	9303      	str	r3, [sp, #12]
 8006ab0:	9b03      	ldr	r3, [sp, #12]
  USARTx_RX_GPIO_CLK_ENABLE();
 8006ab2:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
 8006ab6:	433b      	orrs	r3, r7
 8006ab8:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
 8006abc:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
  RCC_PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART16;
 8006ac0:	970c      	str	r7, [sp, #48]	; 0x30
  USARTx_RX_GPIO_CLK_ENABLE();
 8006ac2:	403b      	ands	r3, r7
  RCC_PeriphClkInit.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8006ac4:	942b      	str	r4, [sp, #172]	; 0xac
  USARTx_RX_GPIO_CLK_ENABLE();
 8006ac6:	9304      	str	r3, [sp, #16]
 8006ac8:	9b04      	ldr	r3, [sp, #16]
  HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphClkInit);
 8006aca:	f00c f957 	bl	8012d7c <HAL_RCCEx_PeriphCLKConfig>
  USARTx_CLK_ENABLE();
 8006ace:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8006ad2:	f44f 7200 	mov.w	r2, #512	; 0x200
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8006ad6:	a907      	add	r1, sp, #28
 8006ad8:	4658      	mov	r0, fp
  USARTx_CLK_ENABLE();
 8006ada:	f043 0310 	orr.w	r3, r3, #16
 8006ade:	f8c6 30f0 	str.w	r3, [r6, #240]	; 0xf0
 8006ae2:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 8006ae6:	f003 0310 	and.w	r3, r3, #16
 8006aea:	9305      	str	r3, [sp, #20]
 8006aec:	9b05      	ldr	r3, [sp, #20]
  DMAx_CLK_ENABLE();
 8006aee:	f8d6 30d8 	ldr.w	r3, [r6, #216]	; 0xd8
 8006af2:	433b      	orrs	r3, r7
 8006af4:	f8c6 30d8 	str.w	r3, [r6, #216]	; 0xd8
 8006af8:	f8d6 30d8 	ldr.w	r3, [r6, #216]	; 0xd8
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8006afc:	9207      	str	r2, [sp, #28]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8006afe:	2202      	movs	r2, #2
  DMAx_CLK_ENABLE();
 8006b00:	403b      	ands	r3, r7
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8006b02:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8006b04:	9208      	str	r2, [sp, #32]
  DMAx_CLK_ENABLE();
 8006b06:	9306      	str	r3, [sp, #24]
 8006b08:	9b06      	ldr	r3, [sp, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8006b0a:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b0c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8006b10:	f009 fc9a 	bl	8010448 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = USARTx_RX_AF;

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8006b14:	a907      	add	r1, sp, #28
 8006b16:	4658      	mov	r0, fp

  /*##-3- Configure the DMA ##################################################*/
  /* Configure the DMA handler for Transmission process */
  hdma_tx.Instance                 = USARTx_TX_DMA_STREAM;
 8006b18:	4e2d      	ldr	r6, [pc, #180]	; (8006bd0 <HAL_UART_MspInit+0x150>)
  hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
  hdma_tx.Init.Mode                = DMA_NORMAL;
  hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
  hdma_tx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
  hdma_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  hdma_tx.Init.MemBurst            = DMA_MBURST_INC4;
 8006b1a:	f44f 0b00 	mov.w	fp, #8388608	; 0x800000
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8006b1e:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8006b20:	f8cd a01c 	str.w	sl, [sp, #28]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8006b24:	f009 fc90 	bl	8010448 <HAL_GPIO_Init>
  hdma_tx.Instance                 = USARTx_TX_DMA_STREAM;
 8006b28:	482a      	ldr	r0, [pc, #168]	; (8006bd4 <HAL_UART_MspInit+0x154>)
  hdma_tx.Init.PeriphBurst         = DMA_PBURST_INC4;
 8006b2a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  hdma_tx.Init.Request             = USARTx_TX_DMA_CHANNEL;
 8006b2e:	212a      	movs	r1, #42	; 0x2a
  hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8006b30:	2240      	movs	r2, #64	; 0x40

  /* Associate the initialized DMA handle to the UART handle */
  __HAL_LINKDMA(huart, hdmatx, hdma_tx);

  /* Configure the DMA handler for reception process */
  hdma_rx.Instance                 = USARTx_RX_DMA_STREAM;
 8006b32:	4d29      	ldr	r5, [pc, #164]	; (8006bd8 <HAL_UART_MspInit+0x158>)
  hdma_tx.Instance                 = USARTx_TX_DMA_STREAM;
 8006b34:	6030      	str	r0, [r6, #0]
  HAL_DMA_Init(&hdma_tx);
 8006b36:	4630      	mov	r0, r6
  hdma_tx.Init.PeriphBurst         = DMA_PBURST_INC4;
 8006b38:	9301      	str	r3, [sp, #4]
  hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8006b3a:	e9c6 1201 	strd	r1, r2, [r6, #4]
  hdma_tx.Init.PeriphBurst         = DMA_PBURST_INC4;
 8006b3e:	e9c6 b30b 	strd	fp, r3, [r6, #44]	; 0x2c
  hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8006b42:	e9c6 4a03 	strd	r4, sl, [r6, #12]
  hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8006b46:	e9c6 4405 	strd	r4, r4, [r6, #20]
  hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 8006b4a:	e9c6 4407 	strd	r4, r4, [r6, #28]
  hdma_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8006b4e:	e9c6 4909 	strd	r4, r9, [r6, #36]	; 0x24
  HAL_DMA_Init(&hdma_tx);
 8006b52:	f007 fa2d 	bl	800dfb0 <HAL_DMA_Init>
  hdma_rx.Instance                 = USARTx_RX_DMA_STREAM;
 8006b56:	f8df c088 	ldr.w	ip, [pc, #136]	; 8006be0 <HAL_UART_MspInit+0x160>
  hdma_rx.Init.Mode                = DMA_NORMAL;
  hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
  hdma_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
  hdma_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  hdma_rx.Init.MemBurst            = DMA_MBURST_INC4;
  hdma_rx.Init.PeriphBurst         = DMA_PBURST_INC4;
 8006b5a:	9b01      	ldr	r3, [sp, #4]
  hdma_rx.Init.Request             = USARTx_RX_DMA_CHANNEL;
 8006b5c:	2129      	movs	r1, #41	; 0x29
  hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8006b5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  __HAL_LINKDMA(huart, hdmatx, hdma_tx);
 8006b62:	f8c8 6074 	str.w	r6, [r8, #116]	; 0x74

  HAL_DMA_Init(&hdma_rx);
 8006b66:	4628      	mov	r0, r5
  hdma_rx.Init.PeriphBurst         = DMA_PBURST_INC4;
 8006b68:	632b      	str	r3, [r5, #48]	; 0x30
  hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8006b6a:	622a      	str	r2, [r5, #32]
  __HAL_LINKDMA(huart, hdmatx, hdma_tx);
 8006b6c:	f8c6 8038 	str.w	r8, [r6, #56]	; 0x38
  hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8006b70:	f8c5 a010 	str.w	sl, [r5, #16]
  hdma_rx.Init.Mode                = DMA_NORMAL;
 8006b74:	61ec      	str	r4, [r5, #28]
  hdma_rx.Init.MemBurst            = DMA_MBURST_INC4;
 8006b76:	f8c5 b02c 	str.w	fp, [r5, #44]	; 0x2c
  hdma_rx.Init.Request             = USARTx_RX_DMA_CHANNEL;
 8006b7a:	e9c5 c100 	strd	ip, r1, [r5]
  hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8006b7e:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8006b82:	e9c5 4405 	strd	r4, r4, [r5, #20]
  hdma_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8006b86:	e9c5 4909 	strd	r4, r9, [r5, #36]	; 0x24
  HAL_DMA_Init(&hdma_rx);
 8006b8a:	f007 fa11 	bl	800dfb0 <HAL_DMA_Init>
  /* Associate the initialized DMA handle to the the UART handle */
  __HAL_LINKDMA(huart, hdmarx, hdma_rx);

  /*##-4- Configure the NVIC for DMA #########################################*/
  /* NVIC configuration for DMA transfer complete interrupt (USARTx_TX) */
  HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, 0, 1);
 8006b8e:	463a      	mov	r2, r7
 8006b90:	4621      	mov	r1, r4
  __HAL_LINKDMA(huart, hdmarx, hdma_rx);
 8006b92:	f8c8 5078 	str.w	r5, [r8, #120]	; 0x78
  HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, 0, 1);
 8006b96:	202f      	movs	r0, #47	; 0x2f
  __HAL_LINKDMA(huart, hdmarx, hdma_rx);
 8006b98:	f8c5 8038 	str.w	r8, [r5, #56]	; 0x38
  HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, 0, 1);
 8006b9c:	f006 ff1a 	bl	800d9d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 8006ba0:	202f      	movs	r0, #47	; 0x2f
 8006ba2:	f006 ff4d 	bl	800da40 <HAL_NVIC_EnableIRQ>

  /* NVIC configuration for DMA transfer complete interrupt (USARTx_RX) */
  HAL_NVIC_SetPriority(USARTx_DMA_RX_IRQn, 0, 0);
 8006ba6:	4622      	mov	r2, r4
 8006ba8:	4621      	mov	r1, r4
 8006baa:	2010      	movs	r0, #16
 8006bac:	f006 ff12 	bl	800d9d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTx_DMA_RX_IRQn);
 8006bb0:	2010      	movs	r0, #16
 8006bb2:	f006 ff45 	bl	800da40 <HAL_NVIC_EnableIRQ>

  /* NVIC configuration for USART, to catch the TX complete */
  HAL_NVIC_SetPriority(USARTx_IRQn, 0, 1);
 8006bb6:	463a      	mov	r2, r7
 8006bb8:	4621      	mov	r1, r4
 8006bba:	2025      	movs	r0, #37	; 0x25
 8006bbc:	f006 ff0a 	bl	800d9d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTx_IRQn);
 8006bc0:	2025      	movs	r0, #37	; 0x25
 8006bc2:	f006 ff3d 	bl	800da40 <HAL_NVIC_EnableIRQ>
}
 8006bc6:	b03d      	add	sp, #244	; 0xf4
 8006bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bcc:	58024400 	.word	0x58024400
 8006bd0:	24008548 	.word	0x24008548
 8006bd4:	400200b8 	.word	0x400200b8
 8006bd8:	240084d0 	.word	0x240084d0
 8006bdc:	58020000 	.word	0x58020000
 8006be0:	40020088 	.word	0x40020088

08006be4 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8006be4:	4770      	bx	lr
 8006be6:	bf00      	nop

08006be8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8006be8:	e7fe      	b.n	8006be8 <HardFault_Handler>
 8006bea:	bf00      	nop

08006bec <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8006bec:	e7fe      	b.n	8006bec <MemManage_Handler>
 8006bee:	bf00      	nop

08006bf0 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8006bf0:	e7fe      	b.n	8006bf0 <BusFault_Handler>
 8006bf2:	bf00      	nop

08006bf4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8006bf4:	e7fe      	b.n	8006bf4 <UsageFault_Handler>
 8006bf6:	bf00      	nop

08006bf8 <SVC_Handler>:
 8006bf8:	4770      	bx	lr
 8006bfa:	bf00      	nop

08006bfc <DebugMon_Handler>:
 8006bfc:	4770      	bx	lr
 8006bfe:	bf00      	nop

08006c00 <PendSV_Handler>:
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop

08006c04 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8006c04:	f006 bea0 	b.w	800d948 <HAL_IncTick>

08006c08 <DMA2_Stream3_IRQHandler>:
  * @param  None
  * @retval None
  */
void DMA2_Stream3_IRQHandler(void)
{
  BSP_CAMERA_DMA_IRQHandler(0);
 8006c08:	2000      	movs	r0, #0
 8006c0a:	f005 bd59 	b.w	800c6c0 <BSP_CAMERA_DMA_IRQHandler>
 8006c0e:	bf00      	nop

08006c10 <DCMI_IRQHandler>:
  * @param  None
  * @retval None
  */
void DCMI_IRQHandler(void)
{
   BSP_CAMERA_IRQHandler(0);
 8006c10:	2000      	movs	r0, #0
 8006c12:	f005 bd4f 	b.w	800c6b4 <BSP_CAMERA_IRQHandler>
 8006c16:	bf00      	nop

08006c18 <DMA2_Stream1_IRQHandler>:
  * @param  None
  * @retval None
  */
void AUDIO_OUT_SAIx_DMAx_IRQHandler(void)
{
  BSP_AUDIO_OUT_IRQHandler(0);
 8006c18:	2000      	movs	r0, #0
 8006c1a:	f004 bd65 	b.w	800b6e8 <BSP_AUDIO_OUT_IRQHandler>
 8006c1e:	bf00      	nop

08006c20 <MDMA_IRQHandler>:
  * @param  None
  * @retval None
  */
void MDMA_IRQHandler(void)
{
  HAL_MDMA_IRQHandler(&hmdma);
 8006c20:	4801      	ldr	r0, [pc, #4]	; (8006c28 <MDMA_IRQHandler+0x8>)
 8006c22:	f00a bcb3 	b.w	801158c <HAL_MDMA_IRQHandler>
 8006c26:	bf00      	nop
 8006c28:	2400981c 	.word	0x2400981c

08006c2c <DSI_IRQHandler>:
  * @param  None
  * @retval None
  */
void DSI_IRQHandler(void)
{
  HAL_DSI_IRQHandler(&hlcd_dsi);
 8006c2c:	4801      	ldr	r0, [pc, #4]	; (8006c34 <DSI_IRQHandler+0x8>)
 8006c2e:	f009 b8e7 	b.w	800fe00 <HAL_DSI_IRQHandler>
 8006c32:	bf00      	nop
 8006c34:	2400a350 	.word	0x2400a350

08006c38 <DMA2D_IRQHandler>:
  * @param  None
  * @retval None
  */
void DMA2D_IRQHandler(void)
{
  HAL_DMA2D_IRQHandler(&hlcd_dma2d);
 8006c38:	4801      	ldr	r0, [pc, #4]	; (8006c40 <DMA2D_IRQHandler+0x8>)
 8006c3a:	f008 bf27 	b.w	800fa8c <HAL_DMA2D_IRQHandler>
 8006c3e:	bf00      	nop
 8006c40:	2400a36c 	.word	0x2400a36c

08006c44 <DMA1_Stream5_IRQHandler>:
  * @Note   This function is redefined in "main.h" and related to DMA stream
  *         used for USART data transmission
  */
void USARTx_DMA_RX_IRQHandler(void)
{
  HAL_DMA_IRQHandler(App_Context.Test_ContextPtr->UartContext.UartHandle.hdmarx);
 8006c44:	4b02      	ldr	r3, [pc, #8]	; (8006c50 <DMA1_Stream5_IRQHandler+0xc>)
 8006c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c48:	f8d3 05f4 	ldr.w	r0, [r3, #1524]	; 0x5f4
 8006c4c:	f008 ba22 	b.w	800f094 <HAL_DMA_IRQHandler>
 8006c50:	240097d8 	.word	0x240097d8

08006c54 <DMA1_Stream7_IRQHandler>:
  * @Note   This function is redefined in "main.h" and related to DMA stream
  *         used for USART data reception
  */
void USARTx_DMA_TX_IRQHandler(void)
{
  HAL_DMA_IRQHandler(App_Context.Test_ContextPtr->UartContext.UartHandle.hdmatx);
 8006c54:	4b02      	ldr	r3, [pc, #8]	; (8006c60 <DMA1_Stream7_IRQHandler+0xc>)
 8006c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c58:	f8d3 05f0 	ldr.w	r0, [r3, #1520]	; 0x5f0
 8006c5c:	f008 ba1a 	b.w	800f094 <HAL_DMA_IRQHandler>
 8006c60:	240097d8 	.word	0x240097d8

08006c64 <USART1_IRQHandler>:
  * @note   This function is redefined in "main.h" and related to DMA
  *         used for USART data transmission
  */
void USARTx_IRQHandler(void)
{
  HAL_UART_IRQHandler(&App_Context.Test_ContextPtr->UartContext.UartHandle);
 8006c64:	4b02      	ldr	r3, [pc, #8]	; (8006c70 <USART1_IRQHandler+0xc>)
 8006c66:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006c68:	f200 507c 	addw	r0, r0, #1404	; 0x57c
 8006c6c:	f00f b810 	b.w	8015c90 <HAL_UART_IRQHandler>
 8006c70:	240097d8 	.word	0x240097d8

08006c74 <LTDC_IRQHandler>:
  * @param  None
  * @retval None
  */
void LTDC_IRQHandler(void)
{
  HAL_LTDC_IRQHandler(&hlcd_ltdc);
 8006c74:	4801      	ldr	r0, [pc, #4]	; (8006c7c <LTDC_IRQHandler+0x8>)
 8006c76:	f00a ba51 	b.w	801111c <HAL_LTDC_IRQHandler>
 8006c7a:	bf00      	nop
 8006c7c:	2400a28c 	.word	0x2400a28c

08006c80 <SystemInit>:
 */
void SystemInit(void)
{
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8006c80:	4988      	ldr	r1, [pc, #544]	; (8006ea4 <SystemInit+0x224>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006c82:	2200      	movs	r2, #0
  RCC->CR |= RCC_CR_HSION;
 8006c84:	4b88      	ldr	r3, [pc, #544]	; (8006ea8 <SystemInit+0x228>)

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8006c86:	4889      	ldr	r0, [pc, #548]	; (8006eac <SystemInit+0x22c>)
{
 8006c88:	b4f0      	push	{r4, r5, r6, r7}
  SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8006c8a:	f8d1 4088 	ldr.w	r4, [r1, #136]	; 0x88
{
 8006c8e:	b082      	sub	sp, #8

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8006c90:	4d87      	ldr	r5, [pc, #540]	; (8006eb0 <SystemInit+0x230>)
  SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8006c92:	f444 0470 	orr.w	r4, r4, #15728640	; 0xf00000

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8006c96:	4e87      	ldr	r6, [pc, #540]	; (8006eb4 <SystemInit+0x234>)
  SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8006c98:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
  SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 8006c9c:	690c      	ldr	r4, [r1, #16]
 8006c9e:	f044 0404 	orr.w	r4, r4, #4
 8006ca2:	610c      	str	r4, [r1, #16]
  RCC->CR |= RCC_CR_HSION;
 8006ca4:	681c      	ldr	r4, [r3, #0]
  if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8006ca6:	4984      	ldr	r1, [pc, #528]	; (8006eb8 <SystemInit+0x238>)
  RCC->CR |= RCC_CR_HSION;
 8006ca8:	f044 0401 	orr.w	r4, r4, #1
 8006cac:	601c      	str	r4, [r3, #0]
  RCC->CFGR = 0x00000000;
 8006cae:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8006cb0:	681c      	ldr	r4, [r3, #0]
 8006cb2:	4020      	ands	r0, r4
 8006cb4:	6018      	str	r0, [r3, #0]
  RCC->D1CFGR = 0x00000000;
 8006cb6:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8006cb8:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8006cba:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x00000000;
 8006cbc:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x00000000;
 8006cbe:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x00000000;
 8006cc0:	631a      	str	r2, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
 8006cc2:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x00000000;
 8006cc4:	639a      	str	r2, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
 8006cc6:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x00000000;
 8006cc8:	641a      	str	r2, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
 8006cca:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
 8006ccc:	6818      	ldr	r0, [r3, #0]
 8006cce:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8006cd2:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8006cd4:	661a      	str	r2, [r3, #96]	; 0x60
  EXTI_D2->EMR3 |= 0x4000UL;
 8006cd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006cd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006cdc:	626b      	str	r3, [r5, #36]	; 0x24
  if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8006cde:	6833      	ldr	r3, [r6, #0]
 8006ce0:	4019      	ands	r1, r3
 8006ce2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8006ce6:	d202      	bcs.n	8006cee <SystemInit+0x6e>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x00000001U;
 8006ce8:	4b74      	ldr	r3, [pc, #464]	; (8006ebc <SystemInit+0x23c>)
 8006cea:	2201      	movs	r2, #1
 8006cec:	601a      	str	r2, [r3, #0]
 * @param  None
 * @retval None
 */
void SystemInit_ExtMemCtl(void)
{
  __IO uint32_t tmp = 0;
 8006cee:	2300      	movs	r3, #0
  register uint32_t tmpreg = 0, timeout = 0xFFFF;
  register __IO uint32_t index;

  /* Enable GPIOD, GPIOE, GPIOF, GPIOG, GPIOH and GPIOI interface
      clock */
  RCC->AHB4ENR |= 0x000001F8;
 8006cf0:	486d      	ldr	r0, [pc, #436]	; (8006ea8 <SystemInit+0x228>)

  /* Delay after an RCC peripheral clock enabling */
  tmp = READ_BIT(RCC->AHB4ENR, RCC_AHB4ENR_GPIOEEN);

  /* Connect PDx pins to FMC Alternate function */
  GPIOD->AFR[0] = 0x000000CC;
 8006cf2:	4973      	ldr	r1, [pc, #460]	; (8006ec0 <SystemInit+0x240>)
 8006cf4:	f04f 0ccc 	mov.w	ip, #204	; 0xcc
  __IO uint32_t tmp = 0;
 8006cf8:	9300      	str	r3, [sp, #0]
  /* Configure PDx pins in Pull-up */
  GPIOD->PUPDR = 0x50150005;

  /* Connect PEx pins to FMC Alternate function */
  GPIOE->AFR[0] = 0xC00000CC;
  GPIOE->AFR[1] = 0xCCCCCCCC;
 8006cfa:	f04f 34cc 	mov.w	r4, #3435973836	; 0xcccccccc
  RCC->AHB4ENR |= 0x000001F8;
 8006cfe:	f8d0 20e0 	ldr.w	r2, [r0, #224]	; 0xe0
  /* Configure PHx pins in Pull-up */
  GPIOH->PUPDR = 0x55555400;

  /* Connect PIx pins to FMC Alternate function */
  GPIOI->AFR[0] = 0xCCCCCCCC;
  GPIOI->AFR[1] = 0x00000CC0;
 8006d02:	f44f 654c 	mov.w	r5, #3264	; 0xcc0
  GPIOD->AFR[1] = 0xCC000CCC;
 8006d06:	4f6f      	ldr	r7, [pc, #444]	; (8006ec4 <SystemInit+0x244>)
  RCC->AHB4ENR |= 0x000001F8;
 8006d08:	f442 72fc 	orr.w	r2, r2, #504	; 0x1f8
  GPIOD->MODER = 0xAFEAFFFA;
 8006d0c:	4e6e      	ldr	r6, [pc, #440]	; (8006ec8 <SystemInit+0x248>)
  RCC->AHB4ENR |= 0x000001F8;
 8006d0e:	f8c0 20e0 	str.w	r2, [r0, #224]	; 0xe0
  tmp = READ_BIT(RCC->AHB4ENR, RCC_AHB4ENR_GPIOEEN);
 8006d12:	f8d0 20e0 	ldr.w	r2, [r0, #224]	; 0xe0
 8006d16:	f002 0210 	and.w	r2, r2, #16
 8006d1a:	9200      	str	r2, [sp, #0]
  GPIOD->OSPEEDR = 0xF03F000F;
 8006d1c:	4a6b      	ldr	r2, [pc, #428]	; (8006ecc <SystemInit+0x24c>)
  GPIOD->AFR[0] = 0x000000CC;
 8006d1e:	f8c1 c020 	str.w	ip, [r1, #32]
  GPIOD->AFR[1] = 0xCC000CCC;
 8006d22:	624f      	str	r7, [r1, #36]	; 0x24
  GPIOE->AFR[0] = 0xC00000CC;
 8006d24:	f1a7 270c 	sub.w	r7, r7, #201329664	; 0xc000c00
  GPIOD->MODER = 0xAFEAFFFA;
 8006d28:	600e      	str	r6, [r1, #0]
  GPIOD->OSPEEDR = 0xF03F000F;
 8006d2a:	608a      	str	r2, [r1, #8]
  GPIOD->PUPDR = 0x50150005;
 8006d2c:	4e68      	ldr	r6, [pc, #416]	; (8006ed0 <SystemInit+0x250>)
  GPIOE->AFR[0] = 0xC00000CC;
 8006d2e:	4a69      	ldr	r2, [pc, #420]	; (8006ed4 <SystemInit+0x254>)
  GPIOD->OTYPER = 0x00000000;
 8006d30:	604b      	str	r3, [r1, #4]
  GPIOD->PUPDR = 0x50150005;
 8006d32:	60ce      	str	r6, [r1, #12]
  GPIOE->AFR[0] = 0xC00000CC;
 8006d34:	6217      	str	r7, [r2, #32]
  GPIOE->MODER = 0xAAAABFFA;
 8006d36:	4e68      	ldr	r6, [pc, #416]	; (8006ed8 <SystemInit+0x258>)
  GPIOE->OSPEEDR = 0xFFFFC00F;
 8006d38:	4968      	ldr	r1, [pc, #416]	; (8006edc <SystemInit+0x25c>)
  GPIOE->PUPDR = 0x55554005;
 8006d3a:	4f69      	ldr	r7, [pc, #420]	; (8006ee0 <SystemInit+0x260>)
  GPIOE->AFR[1] = 0xCCCCCCCC;
 8006d3c:	6254      	str	r4, [r2, #36]	; 0x24
  GPIOE->MODER = 0xAAAABFFA;
 8006d3e:	6016      	str	r6, [r2, #0]
  GPIOE->OSPEEDR = 0xFFFFC00F;
 8006d40:	6091      	str	r1, [r2, #8]
  GPIOF->AFR[0] = 0x00CCCCCC;
 8006d42:	4e68      	ldr	r6, [pc, #416]	; (8006ee4 <SystemInit+0x264>)
  GPIOE->OTYPER = 0x00000000;
 8006d44:	6053      	str	r3, [r2, #4]
  GPIOF->AFR[0] = 0x00CCCCCC;
 8006d46:	4968      	ldr	r1, [pc, #416]	; (8006ee8 <SystemInit+0x268>)
  GPIOE->PUPDR = 0x55554005;
 8006d48:	60d7      	str	r7, [r2, #12]
  GPIOF->AFR[1] = 0xCCCCC000;
 8006d4a:	4f68      	ldr	r7, [pc, #416]	; (8006eec <SystemInit+0x26c>)
  GPIOF->MODER = 0xAABFFAAA;
 8006d4c:	4a68      	ldr	r2, [pc, #416]	; (8006ef0 <SystemInit+0x270>)
  GPIOF->AFR[0] = 0x00CCCCCC;
 8006d4e:	620e      	str	r6, [r1, #32]
  GPIOF->AFR[1] = 0xCCCCC000;
 8006d50:	624f      	str	r7, [r1, #36]	; 0x24
  GPIOF->MODER = 0xAABFFAAA;
 8006d52:	600a      	str	r2, [r1, #0]
  GPIOF->OSPEEDR = 0xFFC00FFF;
 8006d54:	4a67      	ldr	r2, [pc, #412]	; (8006ef4 <SystemInit+0x274>)
  GPIOF->PUPDR = 0x55400555;
 8006d56:	4f68      	ldr	r7, [pc, #416]	; (8006ef8 <SystemInit+0x278>)
  GPIOF->OSPEEDR = 0xFFC00FFF;
 8006d58:	608a      	str	r2, [r1, #8]
  GPIOG->AFR[0] = 0x00CCCCCC;
 8006d5a:	4a68      	ldr	r2, [pc, #416]	; (8006efc <SystemInit+0x27c>)
  GPIOF->OTYPER = 0x00000000;
 8006d5c:	604b      	str	r3, [r1, #4]
  GPIOF->PUPDR = 0x55400555;
 8006d5e:	60cf      	str	r7, [r1, #12]
    WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE
    SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2
    ReadBurst          = FMC_SDRAM_RBURST_ENABLE
    ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0*/

  FMC_Bank5_6_R->SDCR[0] = 0x00001800;
 8006d60:	f44f 57c0 	mov.w	r7, #6144	; 0x1800
  GPIOG->AFR[0] = 0x00CCCCCC;
 8006d64:	6216      	str	r6, [r2, #32]
  GPIOG->MODER = 0xBFFEFAAA;
 8006d66:	4966      	ldr	r1, [pc, #408]	; (8006f00 <SystemInit+0x280>)
  GPIOG->AFR[1] = 0xC000000C;
 8006d68:	4e66      	ldr	r6, [pc, #408]	; (8006f04 <SystemInit+0x284>)
 8006d6a:	6256      	str	r6, [r2, #36]	; 0x24
  GPIOG->MODER = 0xBFFEFAAA;
 8006d6c:	6011      	str	r1, [r2, #0]
  GPIOG->OSPEEDR = 0xC0030FFF;
 8006d6e:	f501 2182 	add.w	r1, r1, #266240	; 0x41000
  GPIOG->PUPDR = 0x40010555;
 8006d72:	4e65      	ldr	r6, [pc, #404]	; (8006f08 <SystemInit+0x288>)
  GPIOG->OSPEEDR = 0xC0030FFF;
 8006d74:	f201 5155 	addw	r1, r1, #1365	; 0x555
 8006d78:	6091      	str	r1, [r2, #8]
  GPIOH->AFR[0] = 0xCCC00000;
 8006d7a:	4964      	ldr	r1, [pc, #400]	; (8006f0c <SystemInit+0x28c>)
  GPIOG->OTYPER = 0x00000000;
 8006d7c:	6053      	str	r3, [r2, #4]
  GPIOG->PUPDR = 0x40010555;
 8006d7e:	60d6      	str	r6, [r2, #12]
  GPIOH->AFR[0] = 0xCCC00000;
 8006d80:	4a63      	ldr	r2, [pc, #396]	; (8006f10 <SystemInit+0x290>)
  GPIOH->MODER = 0xAAAAABFF;
 8006d82:	4e64      	ldr	r6, [pc, #400]	; (8006f14 <SystemInit+0x294>)
  GPIOH->AFR[0] = 0xCCC00000;
 8006d84:	620a      	str	r2, [r1, #32]
  GPIOH->OSPEEDR = 0xFFFFFC00;
 8006d86:	4a64      	ldr	r2, [pc, #400]	; (8006f18 <SystemInit+0x298>)
  GPIOH->AFR[1] = 0xCCCCCCCC;
 8006d88:	624c      	str	r4, [r1, #36]	; 0x24
  GPIOH->MODER = 0xAAAAABFF;
 8006d8a:	600e      	str	r6, [r1, #0]
  GPIOH->OSPEEDR = 0xFFFFFC00;
 8006d8c:	608a      	str	r2, [r1, #8]
  GPIOH->PUPDR = 0x55555400;
 8006d8e:	4e63      	ldr	r6, [pc, #396]	; (8006f1c <SystemInit+0x29c>)
  GPIOI->AFR[0] = 0xCCCCCCCC;
 8006d90:	4a63      	ldr	r2, [pc, #396]	; (8006f20 <SystemInit+0x2a0>)
  GPIOH->OTYPER = 0x00000000;
 8006d92:	604b      	str	r3, [r1, #4]
  GPIOH->PUPDR = 0x55555400;
 8006d94:	60ce      	str	r6, [r1, #12]
  FMC_Bank5_6_R->SDCR[1] = 0x00000165;
 8006d96:	f240 1665 	movw	r6, #357	; 0x165
  GPIOI->AFR[0] = 0xCCCCCCCC;
 8006d9a:	6214      	str	r4, [r2, #32]
  FMC_Bank5_6_R->SDTR[0] = 0x00105000;
  FMC_Bank5_6_R->SDTR[1] = 0x01010351;

  /* SDRAM initialization sequence */
  /* Clock enable command */
  FMC_Bank5_6_R->SDCMR = 0x00000009;
 8006d9c:	2409      	movs	r4, #9
  GPIOI->AFR[1] = 0x00000CC0;
 8006d9e:	6255      	str	r5, [r2, #36]	; 0x24
  GPIOI->MODER = 0xFFEBAAAA;
 8006da0:	f5a5 15a3 	sub.w	r5, r5, #1335296	; 0x146000
  GPIOI->OSPEEDR = 0x003CFFFF;
 8006da4:	495f      	ldr	r1, [pc, #380]	; (8006f24 <SystemInit+0x2a4>)
  GPIOI->MODER = 0xFFEBAAAA;
 8006da6:	f2a5 2516 	subw	r5, r5, #534	; 0x216
 8006daa:	6015      	str	r5, [r2, #0]
  GPIOI->OSPEEDR = 0x003CFFFF;
 8006dac:	6091      	str	r1, [r2, #8]
  GPIOI->PUPDR = 0x00145555;
 8006dae:	495e      	ldr	r1, [pc, #376]	; (8006f28 <SystemInit+0x2a8>)
  GPIOI->OTYPER = 0x00000000;
 8006db0:	6053      	str	r3, [r2, #4]
  GPIOI->PUPDR = 0x00145555;
 8006db2:	60d1      	str	r1, [r2, #12]
  (RCC->AHB3ENR |= (RCC_AHB3ENR_FMCEN));
 8006db4:	f8d0 30d4 	ldr.w	r3, [r0, #212]	; 0xd4
  FMC_Bank5_6_R->SDCR[0] = 0x00001800;
 8006db8:	495c      	ldr	r1, [pc, #368]	; (8006f2c <SystemInit+0x2ac>)
  (RCC->AHB3ENR |= (RCC_AHB3ENR_FMCEN));
 8006dba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  FMC_Bank5_6_R->SDTR[0] = 0x00105000;
 8006dbe:	4d5c      	ldr	r5, [pc, #368]	; (8006f30 <SystemInit+0x2b0>)
  FMC_Bank5_6_R->SDTR[1] = 0x01010351;
 8006dc0:	4a5c      	ldr	r2, [pc, #368]	; (8006f34 <SystemInit+0x2b4>)
  (RCC->AHB3ENR |= (RCC_AHB3ENR_FMCEN));
 8006dc2:	f8c0 30d4 	str.w	r3, [r0, #212]	; 0xd4
  FMC_Bank5_6_R->SDCR[0] = 0x00001800;
 8006dc6:	600f      	str	r7, [r1, #0]
  FMC_Bank5_6_R->SDCR[1] = 0x00000165;
 8006dc8:	604e      	str	r6, [r1, #4]
  FMC_Bank5_6_R->SDTR[0] = 0x00105000;
 8006dca:	608d      	str	r5, [r1, #8]
  FMC_Bank5_6_R->SDTR[1] = 0x01010351;
 8006dcc:	60ca      	str	r2, [r1, #12]
  FMC_Bank5_6_R->SDCMR = 0x00000009;
 8006dce:	610c      	str	r4, [r1, #16]
  tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 8006dd0:	698b      	ldr	r3, [r1, #24]
  while ((tmpreg != 0) && (timeout-- > 0))
 8006dd2:	f013 0320 	ands.w	r3, r3, #32
 8006dd6:	d008      	beq.n	8006dea <SystemInit+0x16a>
 8006dd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006ddc:	e001      	b.n	8006de2 <SystemInit+0x162>
 8006dde:	3a01      	subs	r2, #1
 8006de0:	d054      	beq.n	8006e8c <SystemInit+0x20c>
  {
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 8006de2:	698b      	ldr	r3, [r1, #24]
  while ((tmpreg != 0) && (timeout-- > 0))
 8006de4:	f013 0320 	ands.w	r3, r3, #32
 8006de8:	d1f9      	bne.n	8006dde <SystemInit+0x15e>
  }

  /* Delay */
  for (index = 0; index < 1000; index++)
 8006dea:	9301      	str	r3, [sp, #4]
 8006dec:	9b01      	ldr	r3, [sp, #4]
 8006dee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006df2:	d253      	bcs.n	8006e9c <SystemInit+0x21c>
  while ((tmpreg != 0) && (timeout-- > 0))
 8006df4:	2300      	movs	r3, #0
  for (index = 0; index < 1000; index++)
 8006df6:	9a01      	ldr	r2, [sp, #4]
 8006df8:	3201      	adds	r2, #1
 8006dfa:	9201      	str	r2, [sp, #4]
 8006dfc:	9a01      	ldr	r2, [sp, #4]
 8006dfe:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8006e02:	d3f8      	bcc.n	8006df6 <SystemInit+0x176>
    ;

  /* PALL command */
  FMC_Bank5_6_R->SDCMR = 0x0000000A;
 8006e04:	4a49      	ldr	r2, [pc, #292]	; (8006f2c <SystemInit+0x2ac>)
 8006e06:	210a      	movs	r1, #10
 8006e08:	6111      	str	r1, [r2, #16]
  timeout = 0xFFFF;
  while ((tmpreg != 0) && (timeout-- > 0))
 8006e0a:	b143      	cbz	r3, 8006e1e <SystemInit+0x19e>
  while ((tmpreg != 0) && (timeout-- > 0))
 8006e0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
  {
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 8006e10:	4846      	ldr	r0, [pc, #280]	; (8006f2c <SystemInit+0x2ac>)
 8006e12:	e001      	b.n	8006e18 <SystemInit+0x198>
  while ((tmpreg != 0) && (timeout-- > 0))
 8006e14:	3b01      	subs	r3, #1
 8006e16:	d01f      	beq.n	8006e58 <SystemInit+0x1d8>
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 8006e18:	6982      	ldr	r2, [r0, #24]
  while ((tmpreg != 0) && (timeout-- > 0))
 8006e1a:	0694      	lsls	r4, r2, #26
 8006e1c:	d4fa      	bmi.n	8006e14 <SystemInit+0x194>
  }

  FMC_Bank5_6_R->SDCMR = 0x000000EB;
 8006e1e:	4b43      	ldr	r3, [pc, #268]	; (8006f2c <SystemInit+0x2ac>)
 8006e20:	22eb      	movs	r2, #235	; 0xeb
 8006e22:	611a      	str	r2, [r3, #16]
  while ((tmpreg != 0) && (timeout-- > 0))
  {
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
  }

  FMC_Bank5_6_R->SDCMR = 0x0004400C;
 8006e24:	4b41      	ldr	r3, [pc, #260]	; (8006f2c <SystemInit+0x2ac>)
 8006e26:	4a44      	ldr	r2, [pc, #272]	; (8006f38 <SystemInit+0x2b8>)
 8006e28:	611a      	str	r2, [r3, #16]
  while ((tmpreg != 0) && (timeout-- > 0))
  {
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
  }
  /* Set refresh count */
  tmpreg = FMC_Bank5_6_R->SDRTR;
 8006e2a:	4b40      	ldr	r3, [pc, #256]	; (8006f2c <SystemInit+0x2ac>)
  FMC_Bank5_6_R->SDRTR = (tmpreg | (0x00000603 << 1));
 8006e2c:	f640 4206 	movw	r2, #3078	; 0xc06
  /* Disable write protection */
  tmpreg = FMC_Bank5_6_R->SDCR[1];
  FMC_Bank5_6_R->SDCR[1] = (tmpreg & 0xFFFFFDFF);

  /*FMC controller Enable*/
  FMC_Bank1_R->BTCR[0] |= 0x80000000;
 8006e30:	4942      	ldr	r1, [pc, #264]	; (8006f3c <SystemInit+0x2bc>)
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006e32:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  tmpreg = FMC_Bank5_6_R->SDRTR;
 8006e36:	695d      	ldr	r5, [r3, #20]
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006e38:	481a      	ldr	r0, [pc, #104]	; (8006ea4 <SystemInit+0x224>)
  FMC_Bank5_6_R->SDRTR = (tmpreg | (0x00000603 << 1));
 8006e3a:	432a      	orrs	r2, r5
 8006e3c:	615a      	str	r2, [r3, #20]
  tmpreg = FMC_Bank5_6_R->SDCR[1];
 8006e3e:	685a      	ldr	r2, [r3, #4]
  FMC_Bank5_6_R->SDCR[1] = (tmpreg & 0xFFFFFDFF);
 8006e40:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006e44:	605a      	str	r2, [r3, #4]
  FMC_Bank1_R->BTCR[0] |= 0x80000000;
 8006e46:	680b      	ldr	r3, [r1, #0]
 8006e48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e4c:	600b      	str	r3, [r1, #0]

  (void)(tmp);
 8006e4e:	9b00      	ldr	r3, [sp, #0]
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006e50:	6084      	str	r4, [r0, #8]
}
 8006e52:	b002      	add	sp, #8
 8006e54:	bcf0      	pop	{r4, r5, r6, r7}
 8006e56:	4770      	bx	lr
  FMC_Bank5_6_R->SDCMR = 0x000000EB;
 8006e58:	22eb      	movs	r2, #235	; 0xeb
 8006e5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 8006e5e:	4933      	ldr	r1, [pc, #204]	; (8006f2c <SystemInit+0x2ac>)
  FMC_Bank5_6_R->SDCMR = 0x000000EB;
 8006e60:	6102      	str	r2, [r0, #16]
 8006e62:	e001      	b.n	8006e68 <SystemInit+0x1e8>
  while ((tmpreg != 0) && (timeout-- > 0))
 8006e64:	3b01      	subs	r3, #1
 8006e66:	d005      	beq.n	8006e74 <SystemInit+0x1f4>
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 8006e68:	698a      	ldr	r2, [r1, #24]
  while ((tmpreg != 0) && (timeout-- > 0))
 8006e6a:	0690      	lsls	r0, r2, #26
 8006e6c:	d4fa      	bmi.n	8006e64 <SystemInit+0x1e4>
  FMC_Bank5_6_R->SDCMR = 0x0004400C;
 8006e6e:	4b32      	ldr	r3, [pc, #200]	; (8006f38 <SystemInit+0x2b8>)
 8006e70:	610b      	str	r3, [r1, #16]
 8006e72:	e7da      	b.n	8006e2a <SystemInit+0x1aa>
 8006e74:	4a30      	ldr	r2, [pc, #192]	; (8006f38 <SystemInit+0x2b8>)
 8006e76:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 8006e7a:	482c      	ldr	r0, [pc, #176]	; (8006f2c <SystemInit+0x2ac>)
  FMC_Bank5_6_R->SDCMR = 0x0004400C;
 8006e7c:	610a      	str	r2, [r1, #16]
 8006e7e:	e001      	b.n	8006e84 <SystemInit+0x204>
  while ((tmpreg != 0) && (timeout-- > 0))
 8006e80:	3b01      	subs	r3, #1
 8006e82:	d0d2      	beq.n	8006e2a <SystemInit+0x1aa>
    tmpreg = FMC_Bank5_6_R->SDSR & 0x00000020;
 8006e84:	6982      	ldr	r2, [r0, #24]
  while ((tmpreg != 0) && (timeout-- > 0))
 8006e86:	0692      	lsls	r2, r2, #26
 8006e88:	d5cf      	bpl.n	8006e2a <SystemInit+0x1aa>
 8006e8a:	e7f9      	b.n	8006e80 <SystemInit+0x200>
  for (index = 0; index < 1000; index++)
 8006e8c:	9201      	str	r2, [sp, #4]
 8006e8e:	9a01      	ldr	r2, [sp, #4]
 8006e90:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8006e94:	d3af      	bcc.n	8006df6 <SystemInit+0x176>
  FMC_Bank5_6_R->SDCMR = 0x0000000A;
 8006e96:	230a      	movs	r3, #10
 8006e98:	610b      	str	r3, [r1, #16]
 8006e9a:	e7b7      	b.n	8006e0c <SystemInit+0x18c>
 8006e9c:	230a      	movs	r3, #10
 8006e9e:	610b      	str	r3, [r1, #16]
 8006ea0:	e7bd      	b.n	8006e1e <SystemInit+0x19e>
 8006ea2:	bf00      	nop
 8006ea4:	e000ed00 	.word	0xe000ed00
 8006ea8:	58024400 	.word	0x58024400
 8006eac:	eaf6ed7f 	.word	0xeaf6ed7f
 8006eb0:	580000c0 	.word	0x580000c0
 8006eb4:	5c001000 	.word	0x5c001000
 8006eb8:	ffff0000 	.word	0xffff0000
 8006ebc:	51008108 	.word	0x51008108
 8006ec0:	58020c00 	.word	0x58020c00
 8006ec4:	cc000ccc 	.word	0xcc000ccc
 8006ec8:	afeafffa 	.word	0xafeafffa
 8006ecc:	f03f000f 	.word	0xf03f000f
 8006ed0:	50150005 	.word	0x50150005
 8006ed4:	58021000 	.word	0x58021000
 8006ed8:	aaaabffa 	.word	0xaaaabffa
 8006edc:	ffffc00f 	.word	0xffffc00f
 8006ee0:	55554005 	.word	0x55554005
 8006ee4:	00cccccc 	.word	0x00cccccc
 8006ee8:	58021400 	.word	0x58021400
 8006eec:	ccccc000 	.word	0xccccc000
 8006ef0:	aabffaaa 	.word	0xaabffaaa
 8006ef4:	ffc00fff 	.word	0xffc00fff
 8006ef8:	55400555 	.word	0x55400555
 8006efc:	58021800 	.word	0x58021800
 8006f00:	bffefaaa 	.word	0xbffefaaa
 8006f04:	c000000c 	.word	0xc000000c
 8006f08:	40010555 	.word	0x40010555
 8006f0c:	58021c00 	.word	0x58021c00
 8006f10:	ccc00000 	.word	0xccc00000
 8006f14:	aaaaabff 	.word	0xaaaaabff
 8006f18:	fffffc00 	.word	0xfffffc00
 8006f1c:	55555400 	.word	0x55555400
 8006f20:	58022000 	.word	0x58022000
 8006f24:	003cffff 	.word	0x003cffff
 8006f28:	00145555 	.word	0x00145555
 8006f2c:	52004140 	.word	0x52004140
 8006f30:	00105000 	.word	0x00105000
 8006f34:	01010351 	.word	0x01010351
 8006f38:	0004400c 	.word	0x0004400c
 8006f3c:	52004000 	.word	0x52004000

08006f40 <MT25TL01G_GetFlashInfo>:
  * @brief  Return the configuration of the QSPI memory.
  * @param  pInfo pointer on the configuration structure
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
 8006f40:	b430      	push	{r4, r5}
 8006f42:	4603      	mov	r3, r0
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 8006f44:	f44f 5500 	mov.w	r5, #8192	; 0x2000
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
 8006f48:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
 8006f4c:	f44f 7480 	mov.w	r4, #256	; 0x100
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 8006f50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 8006f54:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
 8006f58:	6018      	str	r0, [r3, #0]
  return MT25TL01G_OK;
}
 8006f5a:	2000      	movs	r0, #0
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 8006f5c:	605d      	str	r5, [r3, #4]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 8006f5e:	611a      	str	r2, [r3, #16]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 8006f60:	e9c3 1402 	strd	r1, r4, [r3, #8]
}
 8006f64:	bc30      	pop	{r4, r5}
 8006f66:	4770      	bx	lr

08006f68 <MT25TL01G_Enter4BytesAddressMode>:
int32_t MT25TL01G_Enter4BytesAddressMode(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8006f68:	2903      	cmp	r1, #3
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 8006f6a:	f04f 02b7 	mov.w	r2, #183	; 0xb7
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8006f6e:	f04f 0300 	mov.w	r3, #0
{
 8006f72:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006f76:	b0a3      	sub	sp, #140	; 0x8c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8006f78:	bf0c      	ite	eq
 8006f7a:	f44f 7440 	moveq.w	r4, #768	; 0x300
 8006f7e:	f44f 7480 	movne.w	r4, #256	; 0x100
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;

  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 8006f82:	2606      	movs	r6, #6
{
 8006f84:	460d      	mov	r5, r1
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 8006f86:	9206      	str	r2, [sp, #24]
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006f88:	a914      	add	r1, sp, #80	; 0x50
 8006f8a:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8006f8e:	940c      	str	r4, [sp, #48]	; 0x30
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8006f90:	941a      	str	r4, [sp, #104]	; 0x68
{
 8006f92:	4604      	mov	r4, r0
  s_command.DataMode          = QSPI_DATA_NONE;
 8006f94:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DummyCycles       = 0;
 8006f96:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006f98:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DataMode          = QSPI_DATA_NONE;
 8006f9a:	931d      	str	r3, [sp, #116]	; 0x74
  s_command.DummyCycles       = 0;
 8006f9c:	9319      	str	r3, [sp, #100]	; 0x64
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006f9e:	9321      	str	r3, [sp, #132]	; 0x84
  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 8006fa0:	9614      	str	r6, [sp, #80]	; 0x50
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006fa2:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006fa6:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006faa:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006fae:	e9cd 331f 	strd	r3, r3, [sp, #124]	; 0x7c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006fb2:	f00a fd13 	bl	80119dc <HAL_QSPI_Command>
 8006fb6:	2800      	cmp	r0, #0
 8006fb8:	d150      	bne.n	800705c <MT25TL01G_Enter4BytesAddressMode+0xf4>
  s_config.StatusBytesSize = 2;
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8006fba:	2d03      	cmp	r5, #3
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8006fbc:	f240 2602 	movw	r6, #514	; 0x202
  s_config.StatusBytesSize = 2;
 8006fc0:	f04f 0502 	mov.w	r5, #2
  s_config.Interval        = 0x10;
 8006fc4:	f04f 0810 	mov.w	r8, #16
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8006fc8:	bf0c      	ite	eq
 8006fca:	f04f 7c40 	moveq.w	ip, #50331648	; 0x3000000
 8006fce:	f04f 7c80 	movne.w	ip, #16777216	; 0x1000000
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8006fd2:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8006fd6:	f04f 0905 	mov.w	r9, #5
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8006fda:	9004      	str	r0, [sp, #16]


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006fdc:	466a      	mov	r2, sp
 8006fde:	f241 3388 	movw	r3, #5000	; 0x1388
 8006fe2:	a914      	add	r1, sp, #80	; 0x50
 8006fe4:	4620      	mov	r0, r4
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8006fe6:	f8cd c074 	str.w	ip, [sp, #116]	; 0x74
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8006fea:	9705      	str	r7, [sp, #20]
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8006fec:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8006ff0:	e9cd 6600 	strd	r6, r6, [sp]
  s_config.Interval        = 0x10;
 8006ff4:	e9cd 8502 	strd	r8, r5, [sp, #8]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006ff8:	f00a fe48 	bl	8011c8c <HAL_QSPI_AutoPolling>
 8006ffc:	bb70      	cbnz	r0, 800705c <MT25TL01G_Enter4BytesAddressMode+0xf4>
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007002:	a906      	add	r1, sp, #24
 8007004:	4620      	mov	r0, r4
 8007006:	f00a fce9 	bl	80119dc <HAL_QSPI_Command>
 800700a:	4603      	mov	r3, r0
 800700c:	bb30      	cbnz	r0, 800705c <MT25TL01G_Enter4BytesAddressMode+0xf4>
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800700e:	f44f 7c40 	mov.w	ip, #768	; 0x300
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007012:	4620      	mov	r0, r4
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8007014:	f04f 7640 	mov.w	r6, #50331648	; 0x3000000
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 8007018:	f240 1401 	movw	r4, #257	; 0x101
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800701c:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800701e:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8007020:	931c      	str	r3, [sp, #112]	; 0x70
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007022:	a914      	add	r1, sp, #80	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8007024:	9321      	str	r3, [sp, #132]	; 0x84
  s_config.Match           = 0;
 8007026:	9300      	str	r3, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8007028:	9304      	str	r3, [sp, #16]
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 800702a:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
  s_command.DummyCycles       = 2;
 800702e:	9519      	str	r5, [sp, #100]	; 0x64
  s_config.Interval        = 0x10;
 8007030:	f8cd 8008 	str.w	r8, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8007034:	9705      	str	r7, [sp, #20]
  s_config.StatusBytesSize = 2;
 8007036:	9503      	str	r5, [sp, #12]
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8007038:	f8cd c068 	str.w	ip, [sp, #104]	; 0x68
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800703c:	961d      	str	r6, [sp, #116]	; 0x74
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 800703e:	9401      	str	r4, [sp, #4]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8007040:	e9cd 331f 	strd	r3, r3, [sp, #124]	; 0x7c
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007044:	f241 3388 	movw	r3, #5000	; 0x1388
 8007048:	f00a fe20 	bl	8011c8c <HAL_QSPI_AutoPolling>
 800704c:	2800      	cmp	r0, #0
  return MT25TL01G_OK;
 800704e:	bf14      	ite	ne
 8007050:	f06f 0001 	mvnne.w	r0, #1
 8007054:	2000      	moveq	r0, #0
}
 8007056:	b023      	add	sp, #140	; 0x8c
 8007058:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return MT25TL01G_ERROR_COMMAND;
 800705c:	f06f 0001 	mvn.w	r0, #1
 8007060:	e7f9      	b.n	8007056 <MT25TL01G_Enter4BytesAddressMode+0xee>
 8007062:	bf00      	nop

08007064 <MT25TL01G_AutoPollingMemReady>:
{
 8007064:	b570      	push	{r4, r5, r6, lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8007066:	f44f 7540 	mov.w	r5, #768	; 0x300
{
 800706a:	b094      	sub	sp, #80	; 0x50
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 800706c:	2405      	movs	r4, #5
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800706e:	2300      	movs	r3, #0
  s_command.DummyCycles       = 2;
 8007070:	2102      	movs	r1, #2
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8007072:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8007076:	950c      	str	r5, [sp, #48]	; 0x30
  s_config.Interval        = 0x10;
 8007078:	2610      	movs	r6, #16
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 800707a:	9406      	str	r4, [sp, #24]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800707c:	f44f 0580 	mov.w	r5, #4194304	; 0x400000
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 8007080:	f240 1401 	movw	r4, #257	; 0x101
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8007084:	9313      	str	r3, [sp, #76]	; 0x4c
  s_config.Match           = 0;
 8007086:	9300      	str	r3, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8007088:	9304      	str	r3, [sp, #16]
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800708a:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800708c:	466a      	mov	r2, sp
  s_command.DummyCycles       = 2;
 800708e:	910b      	str	r1, [sp, #44]	; 0x2c
  s_config.StatusBytesSize = 2;
 8007090:	9103      	str	r1, [sp, #12]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007092:	a906      	add	r1, sp, #24
  s_config.Interval        = 0x10;
 8007094:	9602      	str	r6, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8007096:	9505      	str	r5, [sp, #20]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 8007098:	9401      	str	r4, [sp, #4]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800709a:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800709e:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80070a2:	f241 3388 	movw	r3, #5000	; 0x1388
 80070a6:	f00a fdf1 	bl	8011c8c <HAL_QSPI_AutoPolling>
 80070aa:	2800      	cmp	r0, #0
}
 80070ac:	bf14      	ite	ne
 80070ae:	f06f 0004 	mvnne.w	r0, #4
 80070b2:	2000      	moveq	r0, #0
 80070b4:	b014      	add	sp, #80	; 0x50
 80070b6:	bd70      	pop	{r4, r5, r6, pc}

080070b8 <MT25TL01G_WriteEnable>:
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80070b8:	2903      	cmp	r1, #3
  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 80070ba:	f04f 0206 	mov.w	r2, #6
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80070be:	f04f 0300 	mov.w	r3, #0
{
 80070c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070c4:	b095      	sub	sp, #84	; 0x54
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80070c6:	bf0c      	ite	eq
 80070c8:	f44f 7540 	moveq.w	r5, #768	; 0x300
 80070cc:	f44f 7580 	movne.w	r5, #256	; 0x100
{
 80070d0:	460c      	mov	r4, r1
  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 80070d2:	9206      	str	r2, [sp, #24]
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80070d4:	a906      	add	r1, sp, #24
 80070d6:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80070da:	950c      	str	r5, [sp, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_NONE;
 80070dc:	930f      	str	r3, [sp, #60]	; 0x3c
{
 80070de:	4605      	mov	r5, r0
  s_command.DummyCycles       = 0;
 80070e0:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80070e2:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80070e4:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80070e8:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80070ec:	f00a fc76 	bl	80119dc <HAL_QSPI_Command>
 80070f0:	bb18      	cbnz	r0, 800713a <MT25TL01G_WriteEnable+0x82>
 80070f2:	4603      	mov	r3, r0
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 80070f4:	2c03      	cmp	r4, #3
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 80070f6:	f240 2202 	movw	r2, #514	; 0x202
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80070fa:	4628      	mov	r0, r5
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80070fc:	9304      	str	r3, [sp, #16]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 80070fe:	bf0c      	ite	eq
 8007100:	f04f 7340 	moveq.w	r3, #50331648	; 0x3000000
 8007104:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  s_config.StatusBytesSize = 2;
 8007108:	2702      	movs	r7, #2
  s_config.Interval        = 0x10;
 800710a:	2610      	movs	r6, #16
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800710c:	f44f 0580 	mov.w	r5, #4194304	; 0x400000
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8007110:	2405      	movs	r4, #5
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8007112:	9200      	str	r2, [sp, #0]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8007114:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007116:	a906      	add	r1, sp, #24
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8007118:	9201      	str	r2, [sp, #4]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800711a:	f241 3388 	movw	r3, #5000	; 0x1388
 800711e:	466a      	mov	r2, sp
  s_config.StatusBytesSize = 2;
 8007120:	9703      	str	r7, [sp, #12]
  s_config.Interval        = 0x10;
 8007122:	9602      	str	r6, [sp, #8]
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8007124:	e9cd 5405 	strd	r5, r4, [sp, #20]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007128:	f00a fdb0 	bl	8011c8c <HAL_QSPI_AutoPolling>
 800712c:	2800      	cmp	r0, #0
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 800712e:	bf14      	ite	ne
 8007130:	f06f 0004 	mvnne.w	r0, #4
 8007134:	2000      	moveq	r0, #0
}
 8007136:	b015      	add	sp, #84	; 0x54
 8007138:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return MT25TL01G_ERROR_COMMAND;
 800713a:	f06f 0001 	mvn.w	r0, #1
 800713e:	e7fa      	b.n	8007136 <MT25TL01G_WriteEnable+0x7e>

08007140 <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8007140:	b530      	push	{r4, r5, lr}
 8007142:	b08f      	sub	sp, #60	; 0x3c
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8007144:	2300      	movs	r3, #0
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8007146:	f44f 7580 	mov.w	r5, #256	; 0x100
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 800714a:	2435      	movs	r4, #53	; 0x35
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800714c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007150:	4669      	mov	r1, sp
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8007152:	9506      	str	r5, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8007154:	9400      	str	r4, [sp, #0]
  s_command.DataMode          = QSPI_DATA_NONE;
 8007156:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 8007158:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800715a:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800715c:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8007160:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007164:	f00a fc3a 	bl	80119dc <HAL_QSPI_Command>
 8007168:	2800      	cmp	r0, #0
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
}
 800716a:	bf14      	ite	ne
 800716c:	f06f 0001 	mvnne.w	r0, #1
 8007170:	2000      	moveq	r0, #0
 8007172:	b00f      	add	sp, #60	; 0x3c
 8007174:	bd30      	pop	{r4, r5, pc}
 8007176:	bf00      	nop

08007178 <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8007178:	b530      	push	{r4, r5, lr}
 800717a:	b08f      	sub	sp, #60	; 0x3c
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800717c:	2300      	movs	r3, #0
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800717e:	f44f 7580 	mov.w	r5, #256	; 0x100
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8007182:	24f5      	movs	r4, #245	; 0xf5
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007184:	f241 3288 	movw	r2, #5000	; 0x1388
 8007188:	4669      	mov	r1, sp
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800718a:	9506      	str	r5, [sp, #24]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 800718c:	9400      	str	r4, [sp, #0]
  s_command.DataMode          = QSPI_DATA_NONE;
 800718e:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 8007190:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8007192:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8007194:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8007198:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800719c:	f00a fc1e 	bl	80119dc <HAL_QSPI_Command>
 80071a0:	2800      	cmp	r0, #0
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
}
 80071a2:	bf14      	ite	ne
 80071a4:	f06f 0001 	mvnne.w	r0, #1
 80071a8:	2000      	moveq	r0, #0
 80071aa:	b00f      	add	sp, #60	; 0x3c
 80071ac:	bd30      	pop	{r4, r5, pc}
 80071ae:	bf00      	nop

080071b0 <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 80071b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071b2:	b091      	sub	sp, #68	; 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 80071b4:	2903      	cmp	r1, #3
 80071b6:	d80e      	bhi.n	80071d6 <MT25TL01G_EnableMemoryMappedModeDTR+0x26>
 80071b8:	e8df f001 	tbb	[pc, r1]
 80071bc:	022a2e3a 	.word	0x022a2e3a
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;

    break;
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80071c0:	f44f 7440 	mov.w	r4, #768	; 0x300
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 80071c4:	21ed      	movs	r1, #237	; 0xed
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 80071c6:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    s_command.DataMode          = QSPI_DATA_4_LINES;
 80071ca:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80071ce:	9408      	str	r4, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 80071d0:	9102      	str	r1, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 80071d2:	9209      	str	r2, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 80071d4:	930b      	str	r3, [sp, #44]	; 0x2c

    break;
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80071d6:	2300      	movs	r3, #0
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 80071d8:	aa10      	add	r2, sp, #64	; 0x40
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 80071da:	2608      	movs	r6, #8
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 80071dc:	f44f 5740 	mov.w	r7, #12288	; 0x3000
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
 80071e0:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 80071e4:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 80071e8:	f842 3d40 	str.w	r3, [r2, #-64]!

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80071ec:	eb0d 0106 	add.w	r1, sp, r6
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80071f0:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80071f2:	930f      	str	r3, [sp, #60]	; 0x3c
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 80071f4:	9301      	str	r3, [sp, #4]
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 80071f6:	9705      	str	r7, [sp, #20]
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 80071f8:	9607      	str	r6, [sp, #28]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 80071fa:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80071fe:	f00a fdb1 	bl	8011d64 <HAL_QSPI_MemoryMapped>
 8007202:	2800      	cmp	r0, #0
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
}
 8007204:	bf14      	ite	ne
 8007206:	f06f 0005 	mvnne.w	r0, #5
 800720a:	2000      	moveq	r0, #0
 800720c:	b011      	add	sp, #68	; 0x44
 800720e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8007210:	f44f 7480 	mov.w	r4, #256	; 0x100
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 8007214:	21ee      	movs	r1, #238	; 0xee
 8007216:	e7d6      	b.n	80071c6 <MT25TL01G_EnableMemoryMappedModeDTR+0x16>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8007218:	f44f 7480 	mov.w	r4, #256	; 0x100
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 800721c:	213d      	movs	r1, #61	; 0x3d
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800721e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8007222:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8007226:	9408      	str	r4, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 8007228:	9102      	str	r1, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800722a:	9209      	str	r2, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 800722c:	930b      	str	r3, [sp, #44]	; 0x2c
    break;
 800722e:	e7d2      	b.n	80071d6 <MT25TL01G_EnableMemoryMappedModeDTR+0x26>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8007230:	f44f 7480 	mov.w	r4, #256	; 0x100
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 8007234:	210e      	movs	r1, #14
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8007236:	f44f 6280 	mov.w	r2, #1024	; 0x400
    s_command.DataMode          = QSPI_DATA_1_LINE;
 800723a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800723e:	9408      	str	r4, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 8007240:	9102      	str	r1, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8007242:	9209      	str	r2, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8007244:	930b      	str	r3, [sp, #44]	; 0x2c
    break;
 8007246:	e7c6      	b.n	80071d6 <MT25TL01G_EnableMemoryMappedModeDTR+0x26>

08007248 <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8007248:	b530      	push	{r4, r5, lr}
 800724a:	b091      	sub	sp, #68	; 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 800724c:	2903      	cmp	r1, #3
 800724e:	d80e      	bhi.n	800726e <MT25TL01G_EnableMemoryMappedModeSTR+0x26>
 8007250:	e8df f001 	tbb	[pc, r1]
 8007254:	02262a36 	.word	0x02262a36
    s_command.DataMode          = QSPI_DATA_4_LINES;

    break;

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8007258:	f44f 7440 	mov.w	r4, #768	; 0x300
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 800725c:	21eb      	movs	r1, #235	; 0xeb
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800725e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8007262:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8007266:	9408      	str	r4, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8007268:	9102      	str	r1, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800726a:	9209      	str	r2, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800726c:	930b      	str	r3, [sp, #44]	; 0x2c

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800726e:	2300      	movs	r3, #0
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8007270:	aa10      	add	r2, sp, #64	; 0x40
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8007272:	2508      	movs	r5, #8
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8007274:	f44f 5440 	mov.w	r4, #12288	; 0x3000
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8007278:	f842 3d40 	str.w	r3, [r2, #-64]!

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800727c:	eb0d 0105 	add.w	r1, sp, r5
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8007280:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8007282:	930f      	str	r3, [sp, #60]	; 0x3c
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8007284:	9301      	str	r3, [sp, #4]
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8007286:	9507      	str	r5, [sp, #28]
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8007288:	9405      	str	r4, [sp, #20]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800728a:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800728e:	f00a fd69 	bl	8011d64 <HAL_QSPI_MemoryMapped>
 8007292:	2800      	cmp	r0, #0
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
}
 8007294:	bf14      	ite	ne
 8007296:	f06f 0005 	mvnne.w	r0, #5
 800729a:	2000      	moveq	r0, #0
 800729c:	b011      	add	sp, #68	; 0x44
 800729e:	bd30      	pop	{r4, r5, pc}
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80072a0:	f44f 7480 	mov.w	r4, #256	; 0x100
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 80072a4:	21ec      	movs	r1, #236	; 0xec
 80072a6:	e7da      	b.n	800725e <MT25TL01G_EnableMemoryMappedModeSTR+0x16>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80072a8:	f44f 7480 	mov.w	r4, #256	; 0x100
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 80072ac:	21bc      	movs	r1, #188	; 0xbc
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 80072ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
    s_command.DataMode          = QSPI_DATA_2_LINES;
 80072b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80072b6:	9408      	str	r4, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 80072b8:	9102      	str	r1, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 80072ba:	9209      	str	r2, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 80072bc:	930b      	str	r3, [sp, #44]	; 0x2c
    break;
 80072be:	e7d6      	b.n	800726e <MT25TL01G_EnableMemoryMappedModeSTR+0x26>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80072c0:	f44f 7480 	mov.w	r4, #256	; 0x100
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 80072c4:	210c      	movs	r1, #12
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 80072c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    s_command.DataMode          = QSPI_DATA_1_LINE;
 80072ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80072ce:	9408      	str	r4, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 80072d0:	9102      	str	r1, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 80072d2:	9209      	str	r2, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 80072d4:	930b      	str	r3, [sp, #44]	; 0x2c
    break;
 80072d6:	e7ca      	b.n	800726e <MT25TL01G_EnableMemoryMappedModeSTR+0x26>

080072d8 <MT25TL01G_ResetEnable>:
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80072d8:	2903      	cmp	r1, #3
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80072da:	f04f 0300 	mov.w	r3, #0
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80072de:	f241 3288 	movw	r2, #5000	; 0x1388
{
 80072e2:	b530      	push	{r4, r5, lr}
 80072e4:	b08f      	sub	sp, #60	; 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80072e6:	bf0c      	ite	eq
 80072e8:	f44f 7440 	moveq.w	r4, #768	; 0x300
 80072ec:	f44f 7480 	movne.w	r4, #256	; 0x100
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 80072f0:	2566      	movs	r5, #102	; 0x66
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80072f2:	4669      	mov	r1, sp
  s_command.DummyCycles       = 0;
 80072f4:	9305      	str	r3, [sp, #20]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 80072f6:	9500      	str	r5, [sp, #0]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80072f8:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80072fa:	e9cd 4306 	strd	r4, r3, [sp, #24]
  s_command.DataMode          = QSPI_DATA_NONE;
 80072fe:	e9cd 3308 	strd	r3, r3, [sp, #32]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8007302:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007306:	f00a fb69 	bl	80119dc <HAL_QSPI_Command>
 800730a:	2800      	cmp	r0, #0
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
}
 800730c:	bf14      	ite	ne
 800730e:	f06f 0001 	mvnne.w	r0, #1
 8007312:	2000      	moveq	r0, #0
 8007314:	b00f      	add	sp, #60	; 0x3c
 8007316:	bd30      	pop	{r4, r5, pc}

08007318 <MT25TL01G_ResetMemory>:
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8007318:	2903      	cmp	r1, #3
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800731a:	f04f 0300 	mov.w	r3, #0
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800731e:	f241 3288 	movw	r2, #5000	; 0x1388
{
 8007322:	b530      	push	{r4, r5, lr}
 8007324:	b08f      	sub	sp, #60	; 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8007326:	bf0c      	ite	eq
 8007328:	f44f 7440 	moveq.w	r4, #768	; 0x300
 800732c:	f44f 7480 	movne.w	r4, #256	; 0x100
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 8007330:	2599      	movs	r5, #153	; 0x99
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007332:	4669      	mov	r1, sp
  s_command.DummyCycles       = 0;
 8007334:	9305      	str	r3, [sp, #20]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 8007336:	9500      	str	r5, [sp, #0]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8007338:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800733a:	e9cd 4306 	strd	r4, r3, [sp, #24]
  s_command.DataMode          = QSPI_DATA_NONE;
 800733e:	e9cd 3308 	strd	r3, r3, [sp, #32]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8007342:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007346:	f00a fb49 	bl	80119dc <HAL_QSPI_Command>
 800734a:	2800      	cmp	r0, #0
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
}
 800734c:	bf14      	ite	ne
 800734e:	f06f 0001 	mvnne.w	r0, #1
 8007352:	2000      	moveq	r0, #0
 8007354:	b00f      	add	sp, #60	; 0x3c
 8007356:	bd30      	pop	{r4, r5, pc}

08007358 <OTM8009A_DeInit>:
  * @retval Component status
  */
int32_t OTM8009A_DeInit(OTM8009A_Object_t *pObj)
{
  return OTM8009A_ERROR;
}
 8007358:	f04f 30ff 	mov.w	r0, #4294967295
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop

08007360 <OTM8009A_GetBrightness>:
  * @param  Brightness   display brightness to be returned
  * @retval Component status
  */
int32_t OTM8009A_GetBrightness(OTM8009A_Object_t *pObj, uint32_t *Brightness)
{
  *Brightness = OTM8009ACtx.Brightness;
 8007360:	4b02      	ldr	r3, [pc, #8]	; (800736c <OTM8009A_GetBrightness+0xc>)
  return OTM8009A_OK;  
}
 8007362:	2000      	movs	r0, #0
  *Brightness = OTM8009ACtx.Brightness;
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	600b      	str	r3, [r1, #0]
}
 8007368:	4770      	bx	lr
 800736a:	bf00      	nop
 800736c:	240085c0 	.word	0x240085c0

08007370 <OTM8009A_GetOrientation>:
int32_t OTM8009A_GetOrientation(OTM8009A_Object_t *pObj, uint32_t *Orientation)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  *Orientation = OTM8009ACtx.Orientation;
 8007370:	4b02      	ldr	r3, [pc, #8]	; (800737c <OTM8009A_GetOrientation+0xc>)
  
  return OTM8009A_OK;
}
 8007372:	2000      	movs	r0, #0
  *Orientation = OTM8009ACtx.Orientation;
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	600b      	str	r3, [r1, #0]
}
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop
 800737c:	240085c0 	.word	0x240085c0

08007380 <OTM8009A_GetXSize>:
int32_t OTM8009A_GetXSize(OTM8009A_Object_t *pObj, uint32_t *Xsize)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 8007380:	4b06      	ldr	r3, [pc, #24]	; (800739c <OTM8009A_GetXSize+0x1c>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	b123      	cbz	r3, 8007390 <OTM8009A_GetXSize+0x10>
  {
  case OTM8009A_ORIENTATION_PORTRAIT:
    *Xsize = OTM8009A_480X800_WIDTH;
    break;
  case OTM8009A_ORIENTATION_LANDSCAPE:
    *Xsize = OTM8009A_800X480_WIDTH;
 8007386:	f44f 7348 	mov.w	r3, #800	; 0x320
    *Xsize = OTM8009A_800X480_WIDTH;
    break;
  }
  
  return OTM8009A_OK;
}
 800738a:	2000      	movs	r0, #0
    *Xsize = OTM8009A_800X480_WIDTH;
 800738c:	600b      	str	r3, [r1, #0]
}
 800738e:	4770      	bx	lr
    *Xsize = OTM8009A_480X800_WIDTH;
 8007390:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
}
 8007394:	2000      	movs	r0, #0
    *Xsize = OTM8009A_480X800_WIDTH;
 8007396:	600b      	str	r3, [r1, #0]
}
 8007398:	4770      	bx	lr
 800739a:	bf00      	nop
 800739c:	240085c0 	.word	0x240085c0

080073a0 <OTM8009A_GetYSize>:
int32_t OTM8009A_GetYSize(OTM8009A_Object_t *pObj, uint32_t *Ysize)
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 80073a0:	4b06      	ldr	r3, [pc, #24]	; (80073bc <OTM8009A_GetYSize+0x1c>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	b123      	cbz	r3, 80073b0 <OTM8009A_GetYSize+0x10>
  {
  case OTM8009A_ORIENTATION_PORTRAIT:
    *Ysize = OTM8009A_480X800_HEIGHT;
    break;
  case OTM8009A_ORIENTATION_LANDSCAPE:
    *Ysize = OTM8009A_800X480_HEIGHT;
 80073a6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
    *Ysize = OTM8009A_800X480_HEIGHT;
    break;
  }
  
  return OTM8009A_OK;
}
 80073aa:	2000      	movs	r0, #0
    *Ysize = OTM8009A_800X480_HEIGHT;
 80073ac:	600b      	str	r3, [r1, #0]
}
 80073ae:	4770      	bx	lr
    *Ysize = OTM8009A_480X800_HEIGHT;
 80073b0:	f44f 7348 	mov.w	r3, #800	; 0x320
}
 80073b4:	2000      	movs	r0, #0
    *Ysize = OTM8009A_480X800_HEIGHT;
 80073b6:	600b      	str	r3, [r1, #0]
}
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	240085c0 	.word	0x240085c0

080073c0 <OTM8009A_SetCursor>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 80073c0:	f04f 30ff 	mov.w	r0, #4294967295
 80073c4:	4770      	bx	lr
 80073c6:	bf00      	nop

080073c8 <OTM8009A_DrawBitmap>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 80073c8:	f04f 30ff 	mov.w	r0, #4294967295
 80073cc:	4770      	bx	lr
 80073ce:	bf00      	nop

080073d0 <OTM8009A_FillRGBRect>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 80073d0:	f04f 30ff 	mov.w	r0, #4294967295
 80073d4:	4770      	bx	lr
 80073d6:	bf00      	nop

080073d8 <OTM8009A_DrawHLine>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 80073d8:	f04f 30ff 	mov.w	r0, #4294967295
 80073dc:	4770      	bx	lr
 80073de:	bf00      	nop

080073e0 <OTM8009A_FillRect>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 80073e0:	f04f 30ff 	mov.w	r0, #4294967295
 80073e4:	4770      	bx	lr
 80073e6:	bf00      	nop

080073e8 <OTM8009A_SetPixel>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
}
 80073e8:	f04f 30ff 	mov.w	r0, #4294967295
 80073ec:	4770      	bx	lr
 80073ee:	bf00      	nop

080073f0 <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 80073f0:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80073f2:	6884      	ldr	r4, [r0, #8]
 80073f4:	8800      	ldrh	r0, [r0, #0]
 80073f6:	46a4      	mov	ip, r4
}
 80073f8:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80073fc:	4760      	bx	ip
 80073fe:	bf00      	nop

08007400 <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8007400:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8007402:	6844      	ldr	r4, [r0, #4]
 8007404:	8800      	ldrh	r0, [r0, #0]
 8007406:	46a4      	mov	ip, r4
}
 8007408:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800740c:	4760      	bx	ip
 800740e:	bf00      	nop

08007410 <OTM8009A_Init>:
{
 8007410:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007414:	2300      	movs	r3, #0
 8007416:	f100 0510 	add.w	r5, r0, #16
{
 800741a:	b083      	sub	sp, #12
 800741c:	4606      	mov	r6, r0
 800741e:	460f      	mov	r7, r1
 8007420:	4690      	mov	r8, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007422:	4619      	mov	r1, r3
 8007424:	4ada      	ldr	r2, [pc, #872]	; (8007790 <OTM8009A_Init+0x380>)
 8007426:	4628      	mov	r0, r5
 8007428:	f000 fc76 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 800742c:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800742e:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8007430:	4ad8      	ldr	r2, [pc, #864]	; (8007794 <OTM8009A_Init+0x384>)
 8007432:	21ff      	movs	r1, #255	; 0xff
 8007434:	4628      	mov	r0, r5
 8007436:	f000 fc6f 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800743a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 800743c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800743e:	4ad6      	ldr	r2, [pc, #856]	; (8007798 <OTM8009A_Init+0x388>)
 8007440:	4619      	mov	r1, r3
 8007442:	4628      	mov	r0, r5
 8007444:	f000 fc68 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8007448:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800744a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 800744c:	4ad3      	ldr	r2, [pc, #844]	; (800779c <OTM8009A_Init+0x38c>)
 800744e:	21ff      	movs	r1, #255	; 0xff
 8007450:	4628      	mov	r0, r5
 8007452:	f000 fc61 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8007456:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8007458:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800745a:	4acf      	ldr	r2, [pc, #828]	; (8007798 <OTM8009A_Init+0x388>)
 800745c:	4619      	mov	r1, r3
 800745e:	4628      	mov	r0, r5
 8007460:	f000 fc5a 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8007464:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8007466:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8007468:	4acd      	ldr	r2, [pc, #820]	; (80077a0 <OTM8009A_Init+0x390>)
 800746a:	21c4      	movs	r1, #196	; 0xc4
 800746c:	4628      	mov	r0, r5
 800746e:	f000 fc53 	bl	8007d18 <otm8009a_write_reg>
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8007472:	68f3      	ldr	r3, [r6, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8007474:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 8007476:	4798      	blx	r3
 8007478:	4681      	mov	r9, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 800747a:	68f3      	ldr	r3, [r6, #12]
 800747c:	4798      	blx	r3
 800747e:	eba0 0009 	sub.w	r0, r0, r9
 8007482:	2809      	cmp	r0, #9
 8007484:	d9f9      	bls.n	800747a <OTM8009A_Init+0x6a>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 8007486:	2300      	movs	r3, #0
 8007488:	4ac6      	ldr	r2, [pc, #792]	; (80077a4 <OTM8009A_Init+0x394>)
 800748a:	4628      	mov	r0, r5
 800748c:	4619      	mov	r1, r3
 800748e:	f000 fc43 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8007492:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 8007494:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8007496:	4ac4      	ldr	r2, [pc, #784]	; (80077a8 <OTM8009A_Init+0x398>)
 8007498:	21c4      	movs	r1, #196	; 0xc4
 800749a:	4628      	mov	r0, r5
 800749c:	f000 fc3c 	bl	8007d18 <otm8009a_write_reg>
  tickstart = pObj->IO.GetTick();
 80074a0:	68f3      	ldr	r3, [r6, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 80074a2:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 80074a4:	4798      	blx	r3
 80074a6:	4681      	mov	r9, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80074a8:	68f3      	ldr	r3, [r6, #12]
 80074aa:	4798      	blx	r3
 80074ac:	eba0 0009 	sub.w	r0, r0, r9
 80074b0:	2809      	cmp	r0, #9
 80074b2:	d9f9      	bls.n	80074a8 <OTM8009A_Init+0x98>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 80074b4:	2300      	movs	r3, #0
 80074b6:	4abd      	ldr	r2, [pc, #756]	; (80077ac <OTM8009A_Init+0x39c>)
 80074b8:	4628      	mov	r0, r5
 80074ba:	4619      	mov	r1, r3
 80074bc:	f000 fc2c 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 80074c0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 80074c2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 80074c4:	4aba      	ldr	r2, [pc, #744]	; (80077b0 <OTM8009A_Init+0x3a0>)
 80074c6:	21c5      	movs	r1, #197	; 0xc5
 80074c8:	4628      	mov	r0, r5
 80074ca:	f000 fc25 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 80074ce:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 80074d0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 80074d2:	4ab8      	ldr	r2, [pc, #736]	; (80077b4 <OTM8009A_Init+0x3a4>)
 80074d4:	4619      	mov	r1, r3
 80074d6:	4628      	mov	r0, r5
 80074d8:	f000 fc1e 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80074dc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 80074de:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80074e0:	4ab5      	ldr	r2, [pc, #724]	; (80077b8 <OTM8009A_Init+0x3a8>)
 80074e2:	21c5      	movs	r1, #197	; 0xc5
 80074e4:	4628      	mov	r0, r5
 80074e6:	f000 fc17 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 80074ea:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80074ec:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 80074ee:	4ab3      	ldr	r2, [pc, #716]	; (80077bc <OTM8009A_Init+0x3ac>)
 80074f0:	4619      	mov	r1, r3
 80074f2:	4628      	mov	r0, r5
 80074f4:	f000 fc10 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 80074f8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 80074fa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 80074fc:	4ab0      	ldr	r2, [pc, #704]	; (80077c0 <OTM8009A_Init+0x3b0>)
 80074fe:	21c0      	movs	r1, #192	; 0xc0
 8007500:	4628      	mov	r0, r5
 8007502:	f000 fc09 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007506:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8007508:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800750a:	4aa1      	ldr	r2, [pc, #644]	; (8007790 <OTM8009A_Init+0x380>)
 800750c:	4619      	mov	r1, r3
 800750e:	4628      	mov	r0, r5
 8007510:	f000 fc02 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8007514:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007516:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8007518:	4aaa      	ldr	r2, [pc, #680]	; (80077c4 <OTM8009A_Init+0x3b4>)
 800751a:	21d9      	movs	r1, #217	; 0xd9
 800751c:	4628      	mov	r0, r5
 800751e:	f000 fbfb 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8007522:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8007524:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8007526:	4aa8      	ldr	r2, [pc, #672]	; (80077c8 <OTM8009A_Init+0x3b8>)
 8007528:	4619      	mov	r1, r3
 800752a:	4628      	mov	r0, r5
 800752c:	f000 fbf4 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8007530:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8007532:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8007534:	4aa5      	ldr	r2, [pc, #660]	; (80077cc <OTM8009A_Init+0x3bc>)
 8007536:	21c1      	movs	r1, #193	; 0xc1
 8007538:	4628      	mov	r0, r5
 800753a:	f000 fbed 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800753e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8007540:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8007542:	4aa3      	ldr	r2, [pc, #652]	; (80077d0 <OTM8009A_Init+0x3c0>)
 8007544:	4619      	mov	r1, r3
 8007546:	4628      	mov	r0, r5
 8007548:	f000 fbe6 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 800754c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800754e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8007550:	4aa0      	ldr	r2, [pc, #640]	; (80077d4 <OTM8009A_Init+0x3c4>)
 8007552:	21c1      	movs	r1, #193	; 0xc1
 8007554:	4628      	mov	r0, r5
 8007556:	f000 fbdf 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 800755a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 800755c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 800755e:	4a9e      	ldr	r2, [pc, #632]	; (80077d8 <OTM8009A_Init+0x3c8>)
 8007560:	4619      	mov	r1, r3
 8007562:	4628      	mov	r0, r5
 8007564:	f000 fbd8 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8007568:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 800756a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 800756c:	4a9b      	ldr	r2, [pc, #620]	; (80077dc <OTM8009A_Init+0x3cc>)
 800756e:	21c5      	movs	r1, #197	; 0xc5
 8007570:	4628      	mov	r0, r5
 8007572:	f000 fbd1 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8007576:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8007578:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 800757a:	4a99      	ldr	r2, [pc, #612]	; (80077e0 <OTM8009A_Init+0x3d0>)
 800757c:	4619      	mov	r1, r3
 800757e:	4628      	mov	r0, r5
 8007580:	f000 fbca 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8007584:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8007586:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8007588:	4a8b      	ldr	r2, [pc, #556]	; (80077b8 <OTM8009A_Init+0x3a8>)
 800758a:	21c5      	movs	r1, #197	; 0xc5
 800758c:	4628      	mov	r0, r5
 800758e:	f000 fbc3 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007592:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8007594:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007596:	4a7e      	ldr	r2, [pc, #504]	; (8007790 <OTM8009A_Init+0x380>)
 8007598:	4619      	mov	r1, r3
 800759a:	4628      	mov	r0, r5
 800759c:	f000 fbbc 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80075a0:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80075a2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80075a4:	4a8f      	ldr	r2, [pc, #572]	; (80077e4 <OTM8009A_Init+0x3d4>)
 80075a6:	21d8      	movs	r1, #216	; 0xd8
 80075a8:	4628      	mov	r0, r5
 80075aa:	f000 fbb5 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80075ae:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80075b0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80075b2:	4a8d      	ldr	r2, [pc, #564]	; (80077e8 <OTM8009A_Init+0x3d8>)
 80075b4:	4619      	mov	r1, r3
 80075b6:	4628      	mov	r0, r5
 80075b8:	f000 fbae 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80075bc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80075be:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80075c0:	4a8a      	ldr	r2, [pc, #552]	; (80077ec <OTM8009A_Init+0x3dc>)
 80075c2:	21c5      	movs	r1, #197	; 0xc5
 80075c4:	4628      	mov	r0, r5
 80075c6:	f000 fba7 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80075ca:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80075cc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80075ce:	4a88      	ldr	r2, [pc, #544]	; (80077f0 <OTM8009A_Init+0x3e0>)
 80075d0:	4619      	mov	r1, r3
 80075d2:	4628      	mov	r0, r5
 80075d4:	f000 fba0 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 80075d8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80075da:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 80075dc:	4a85      	ldr	r2, [pc, #532]	; (80077f4 <OTM8009A_Init+0x3e4>)
 80075de:	21c0      	movs	r1, #192	; 0xc0
 80075e0:	4628      	mov	r0, r5
 80075e2:	f000 fb99 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 80075e6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 80075e8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 80075ea:	4a83      	ldr	r2, [pc, #524]	; (80077f8 <OTM8009A_Init+0x3e8>)
 80075ec:	4619      	mov	r1, r3
 80075ee:	4628      	mov	r0, r5
 80075f0:	f000 fb92 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 80075f4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 80075f6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 80075f8:	4a80      	ldr	r2, [pc, #512]	; (80077fc <OTM8009A_Init+0x3ec>)
 80075fa:	21c5      	movs	r1, #197	; 0xc5
 80075fc:	4628      	mov	r0, r5
 80075fe:	f000 fb8b 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8007602:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8007604:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8007606:	4a70      	ldr	r2, [pc, #448]	; (80077c8 <OTM8009A_Init+0x3b8>)
 8007608:	4619      	mov	r1, r3
 800760a:	4628      	mov	r0, r5
 800760c:	f000 fb84 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8007610:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8007612:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8007614:	4a7a      	ldr	r2, [pc, #488]	; (8007800 <OTM8009A_Init+0x3f0>)
 8007616:	21c4      	movs	r1, #196	; 0xc4
 8007618:	4628      	mov	r0, r5
 800761a:	f000 fb7d 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800761e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8007620:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8007622:	4a6b      	ldr	r2, [pc, #428]	; (80077d0 <OTM8009A_Init+0x3c0>)
 8007624:	4619      	mov	r1, r3
 8007626:	4628      	mov	r0, r5
 8007628:	f000 fb76 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 800762c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800762e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8007630:	4a74      	ldr	r2, [pc, #464]	; (8007804 <OTM8009A_Init+0x3f4>)
 8007632:	21c1      	movs	r1, #193	; 0xc1
 8007634:	4628      	mov	r0, r5
 8007636:	f000 fb6f 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 800763a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 800763c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 800763e:	4a72      	ldr	r2, [pc, #456]	; (8007808 <OTM8009A_Init+0x3f8>)
 8007640:	4619      	mov	r1, r3
 8007642:	4628      	mov	r0, r5
 8007644:	f000 fb68 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8007648:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 800764a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 800764c:	4a6f      	ldr	r2, [pc, #444]	; (800780c <OTM8009A_Init+0x3fc>)
 800764e:	21b3      	movs	r1, #179	; 0xb3
 8007650:	4628      	mov	r0, r5
 8007652:	f000 fb61 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8007656:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8007658:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800765a:	4a4f      	ldr	r2, [pc, #316]	; (8007798 <OTM8009A_Init+0x388>)
 800765c:	4619      	mov	r1, r3
 800765e:	4628      	mov	r0, r5
 8007660:	f000 fb5a 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8007664:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8007666:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8007668:	4a69      	ldr	r2, [pc, #420]	; (8007810 <OTM8009A_Init+0x400>)
 800766a:	21ce      	movs	r1, #206	; 0xce
 800766c:	4628      	mov	r0, r5
 800766e:	f000 fb53 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8007672:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8007674:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8007676:	4a67      	ldr	r2, [pc, #412]	; (8007814 <OTM8009A_Init+0x404>)
 8007678:	4619      	mov	r1, r3
 800767a:	4628      	mov	r0, r5
 800767c:	f000 fb4c 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8007680:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8007682:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8007684:	4a64      	ldr	r2, [pc, #400]	; (8007818 <OTM8009A_Init+0x408>)
 8007686:	21ce      	movs	r1, #206	; 0xce
 8007688:	4628      	mov	r0, r5
 800768a:	f000 fb45 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800768e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8007690:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8007692:	4a62      	ldr	r2, [pc, #392]	; (800781c <OTM8009A_Init+0x40c>)
 8007694:	4619      	mov	r1, r3
 8007696:	4628      	mov	r0, r5
 8007698:	f000 fb3e 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 800769c:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800769e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80076a0:	4a5f      	ldr	r2, [pc, #380]	; (8007820 <OTM8009A_Init+0x410>)
 80076a2:	21ce      	movs	r1, #206	; 0xce
 80076a4:	4628      	mov	r0, r5
 80076a6:	f000 fb37 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80076aa:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80076ac:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80076ae:	4a5d      	ldr	r2, [pc, #372]	; (8007824 <OTM8009A_Init+0x414>)
 80076b0:	4619      	mov	r1, r3
 80076b2:	4628      	mov	r0, r5
 80076b4:	f000 fb30 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 80076b8:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80076ba:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 80076bc:	4a5a      	ldr	r2, [pc, #360]	; (8007828 <OTM8009A_Init+0x418>)
 80076be:	21cf      	movs	r1, #207	; 0xcf
 80076c0:	4628      	mov	r0, r5
 80076c2:	f000 fb29 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80076c6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 80076c8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80076ca:	4a58      	ldr	r2, [pc, #352]	; (800782c <OTM8009A_Init+0x41c>)
 80076cc:	4619      	mov	r1, r3
 80076ce:	4628      	mov	r0, r5
 80076d0:	f000 fb22 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 80076d4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80076d6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 80076d8:	4a55      	ldr	r2, [pc, #340]	; (8007830 <OTM8009A_Init+0x420>)
 80076da:	21cf      	movs	r1, #207	; 0xcf
 80076dc:	4628      	mov	r0, r5
 80076de:	f000 fb1b 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80076e2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 80076e4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80076e6:	4a2c      	ldr	r2, [pc, #176]	; (8007798 <OTM8009A_Init+0x388>)
 80076e8:	4619      	mov	r1, r3
 80076ea:	4628      	mov	r0, r5
 80076ec:	f000 fb14 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 80076f0:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80076f2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 80076f4:	4a4f      	ldr	r2, [pc, #316]	; (8007834 <OTM8009A_Init+0x424>)
 80076f6:	21cb      	movs	r1, #203	; 0xcb
 80076f8:	4628      	mov	r0, r5
 80076fa:	f000 fb0d 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80076fe:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8007700:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8007702:	4a4d      	ldr	r2, [pc, #308]	; (8007838 <OTM8009A_Init+0x428>)
 8007704:	4619      	mov	r1, r3
 8007706:	4628      	mov	r0, r5
 8007708:	f000 fb06 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 800770c:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800770e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8007710:	4a4a      	ldr	r2, [pc, #296]	; (800783c <OTM8009A_Init+0x42c>)
 8007712:	21cb      	movs	r1, #203	; 0xcb
 8007714:	4628      	mov	r0, r5
 8007716:	f000 faff 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800771a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 800771c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800771e:	4a3d      	ldr	r2, [pc, #244]	; (8007814 <OTM8009A_Init+0x404>)
 8007720:	4619      	mov	r1, r3
 8007722:	4628      	mov	r0, r5
 8007724:	f000 faf8 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8007728:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800772a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 800772c:	4a44      	ldr	r2, [pc, #272]	; (8007840 <OTM8009A_Init+0x430>)
 800772e:	21cb      	movs	r1, #203	; 0xcb
 8007730:	4628      	mov	r0, r5
 8007732:	f000 faf1 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8007736:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8007738:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800773a:	4a38      	ldr	r2, [pc, #224]	; (800781c <OTM8009A_Init+0x40c>)
 800773c:	4619      	mov	r1, r3
 800773e:	4628      	mov	r0, r5
 8007740:	f000 faea 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8007744:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8007746:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8007748:	4a3e      	ldr	r2, [pc, #248]	; (8007844 <OTM8009A_Init+0x434>)
 800774a:	21cb      	movs	r1, #203	; 0xcb
 800774c:	4628      	mov	r0, r5
 800774e:	f000 fae3 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8007752:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8007754:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8007756:	4a33      	ldr	r2, [pc, #204]	; (8007824 <OTM8009A_Init+0x414>)
 8007758:	4619      	mov	r1, r3
 800775a:	4628      	mov	r0, r5
 800775c:	f000 fadc 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8007760:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8007762:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8007764:	4a38      	ldr	r2, [pc, #224]	; (8007848 <OTM8009A_Init+0x438>)
 8007766:	21cb      	movs	r1, #203	; 0xcb
 8007768:	4628      	mov	r0, r5
 800776a:	f000 fad5 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800776e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8007770:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8007772:	4a2e      	ldr	r2, [pc, #184]	; (800782c <OTM8009A_Init+0x41c>)
 8007774:	4619      	mov	r1, r3
 8007776:	4628      	mov	r0, r5
 8007778:	f000 face 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 800777c:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800777e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8007780:	4a32      	ldr	r2, [pc, #200]	; (800784c <OTM8009A_Init+0x43c>)
 8007782:	21cb      	movs	r1, #203	; 0xcb
 8007784:	4628      	mov	r0, r5
 8007786:	f000 fac7 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 800778a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 800778c:	4404      	add	r4, r0
 800778e:	e05f      	b.n	8007850 <OTM8009A_Init+0x440>
 8007790:	080bf3bd 	.word	0x080bf3bd
 8007794:	080bf28c 	.word	0x080bf28c
 8007798:	080bf3be 	.word	0x080bf3be
 800779c:	080bf318 	.word	0x080bf318
 80077a0:	080bf3bf 	.word	0x080bf3bf
 80077a4:	080bf3c0 	.word	0x080bf3c0
 80077a8:	080bf3c1 	.word	0x080bf3c1
 80077ac:	080bf3c2 	.word	0x080bf3c2
 80077b0:	080bf3c3 	.word	0x080bf3c3
 80077b4:	080bf3c4 	.word	0x080bf3c4
 80077b8:	080bf3c5 	.word	0x080bf3c5
 80077bc:	080bf3c6 	.word	0x080bf3c6
 80077c0:	080bf3c7 	.word	0x080bf3c7
 80077c4:	080bf3c8 	.word	0x080bf3c8
 80077c8:	080bf3c9 	.word	0x080bf3c9
 80077cc:	080bf3ca 	.word	0x080bf3ca
 80077d0:	080bf3cb 	.word	0x080bf3cb
 80077d4:	080bf3cc 	.word	0x080bf3cc
 80077d8:	080bf3cd 	.word	0x080bf3cd
 80077dc:	080bf3ce 	.word	0x080bf3ce
 80077e0:	080bf3cf 	.word	0x080bf3cf
 80077e4:	080bf38c 	.word	0x080bf38c
 80077e8:	080bf3d0 	.word	0x080bf3d0
 80077ec:	080bf3d1 	.word	0x080bf3d1
 80077f0:	080bf3d2 	.word	0x080bf3d2
 80077f4:	080bf3d3 	.word	0x080bf3d3
 80077f8:	080bf3d4 	.word	0x080bf3d4
 80077fc:	080bf3d5 	.word	0x080bf3d5
 8007800:	080bf3d6 	.word	0x080bf3d6
 8007804:	080bf3d7 	.word	0x080bf3d7
 8007808:	080bf3d8 	.word	0x080bf3d8
 800780c:	080bf390 	.word	0x080bf390
 8007810:	080bf394 	.word	0x080bf394
 8007814:	080bf3d9 	.word	0x080bf3d9
 8007818:	080bf39c 	.word	0x080bf39c
 800781c:	080bf3da 	.word	0x080bf3da
 8007820:	080bf3ac 	.word	0x080bf3ac
 8007824:	080bf3db 	.word	0x080bf3db
 8007828:	080bf290 	.word	0x080bf290
 800782c:	080bf3dc 	.word	0x080bf3dc
 8007830:	080bf3e9 	.word	0x080bf3e9
 8007834:	080bf29c 	.word	0x080bf29c
 8007838:	080bf3dd 	.word	0x080bf3dd
 800783c:	080bf2a8 	.word	0x080bf2a8
 8007840:	080bf2b8 	.word	0x080bf2b8
 8007844:	080bf2c8 	.word	0x080bf2c8
 8007848:	080bf2d4 	.word	0x080bf2d4
 800784c:	080bf2e4 	.word	0x080bf2e4
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8007850:	4aa9      	ldr	r2, [pc, #676]	; (8007af8 <OTM8009A_Init+0x6e8>)
 8007852:	4619      	mov	r1, r3
 8007854:	4628      	mov	r0, r5
 8007856:	f000 fa5f 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 800785a:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 800785c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 800785e:	4aa7      	ldr	r2, [pc, #668]	; (8007afc <OTM8009A_Init+0x6ec>)
 8007860:	21cb      	movs	r1, #203	; 0xcb
 8007862:	4628      	mov	r0, r5
 8007864:	f000 fa58 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8007868:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 800786a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 800786c:	4aa4      	ldr	r2, [pc, #656]	; (8007b00 <OTM8009A_Init+0x6f0>)
 800786e:	4619      	mov	r1, r3
 8007870:	4628      	mov	r0, r5
 8007872:	f000 fa51 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8007876:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8007878:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 800787a:	4aa2      	ldr	r2, [pc, #648]	; (8007b04 <OTM8009A_Init+0x6f4>)
 800787c:	21cb      	movs	r1, #203	; 0xcb
 800787e:	4628      	mov	r0, r5
 8007880:	f000 fa4a 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8007884:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8007886:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8007888:	4a9f      	ldr	r2, [pc, #636]	; (8007b08 <OTM8009A_Init+0x6f8>)
 800788a:	4619      	mov	r1, r3
 800788c:	4628      	mov	r0, r5
 800788e:	f000 fa43 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8007892:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8007894:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8007896:	4a9d      	ldr	r2, [pc, #628]	; (8007b0c <OTM8009A_Init+0x6fc>)
 8007898:	21cc      	movs	r1, #204	; 0xcc
 800789a:	4628      	mov	r0, r5
 800789c:	f000 fa3c 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80078a0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80078a2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80078a4:	4a9a      	ldr	r2, [pc, #616]	; (8007b10 <OTM8009A_Init+0x700>)
 80078a6:	4619      	mov	r1, r3
 80078a8:	4628      	mov	r0, r5
 80078aa:	f000 fa35 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 80078ae:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80078b0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 80078b2:	4a98      	ldr	r2, [pc, #608]	; (8007b14 <OTM8009A_Init+0x704>)
 80078b4:	21cc      	movs	r1, #204	; 0xcc
 80078b6:	4628      	mov	r0, r5
 80078b8:	f000 fa2e 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80078bc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 80078be:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80078c0:	4a95      	ldr	r2, [pc, #596]	; (8007b18 <OTM8009A_Init+0x708>)
 80078c2:	4619      	mov	r1, r3
 80078c4:	4628      	mov	r0, r5
 80078c6:	f000 fa27 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 80078ca:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80078cc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 80078ce:	4a93      	ldr	r2, [pc, #588]	; (8007b1c <OTM8009A_Init+0x70c>)
 80078d0:	21cc      	movs	r1, #204	; 0xcc
 80078d2:	4628      	mov	r0, r5
 80078d4:	f000 fa20 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80078d8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 80078da:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80078dc:	4a90      	ldr	r2, [pc, #576]	; (8007b20 <OTM8009A_Init+0x710>)
 80078de:	4619      	mov	r1, r3
 80078e0:	4628      	mov	r0, r5
 80078e2:	f000 fa19 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 80078e6:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80078e8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 80078ea:	4a8e      	ldr	r2, [pc, #568]	; (8007b24 <OTM8009A_Init+0x714>)
 80078ec:	21cc      	movs	r1, #204	; 0xcc
 80078ee:	4628      	mov	r0, r5
 80078f0:	f000 fa12 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80078f4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 80078f6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80078f8:	4a8b      	ldr	r2, [pc, #556]	; (8007b28 <OTM8009A_Init+0x718>)
 80078fa:	4619      	mov	r1, r3
 80078fc:	4628      	mov	r0, r5
 80078fe:	f000 fa0b 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8007902:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8007904:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8007906:	4a89      	ldr	r2, [pc, #548]	; (8007b2c <OTM8009A_Init+0x71c>)
 8007908:	21cc      	movs	r1, #204	; 0xcc
 800790a:	4628      	mov	r0, r5
 800790c:	f000 fa04 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8007910:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8007912:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8007914:	4a86      	ldr	r2, [pc, #536]	; (8007b30 <OTM8009A_Init+0x720>)
 8007916:	4619      	mov	r1, r3
 8007918:	4628      	mov	r0, r5
 800791a:	f000 f9fd 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 800791e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8007920:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8007922:	4a84      	ldr	r2, [pc, #528]	; (8007b34 <OTM8009A_Init+0x724>)
 8007924:	21cc      	movs	r1, #204	; 0xcc
 8007926:	4628      	mov	r0, r5
 8007928:	f000 f9f6 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800792c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 800792e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8007930:	4a81      	ldr	r2, [pc, #516]	; (8007b38 <OTM8009A_Init+0x728>)
 8007932:	4619      	mov	r1, r3
 8007934:	4628      	mov	r0, r5
 8007936:	f000 f9ef 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 800793a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800793c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 800793e:	4a7f      	ldr	r2, [pc, #508]	; (8007b3c <OTM8009A_Init+0x72c>)
 8007940:	21c5      	movs	r1, #197	; 0xc5
 8007942:	4628      	mov	r0, r5
 8007944:	f000 f9e8 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8007948:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 800794a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 800794c:	4a7c      	ldr	r2, [pc, #496]	; (8007b40 <OTM8009A_Init+0x730>)
 800794e:	4619      	mov	r1, r3
 8007950:	4628      	mov	r0, r5
 8007952:	f000 f9e1 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8007956:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8007958:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 800795a:	4a7a      	ldr	r2, [pc, #488]	; (8007b44 <OTM8009A_Init+0x734>)
 800795c:	21f5      	movs	r1, #245	; 0xf5
 800795e:	4628      	mov	r0, r5
 8007960:	f000 f9da 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8007964:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8007966:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8007968:	4a77      	ldr	r2, [pc, #476]	; (8007b48 <OTM8009A_Init+0x738>)
 800796a:	4619      	mov	r1, r3
 800796c:	4628      	mov	r0, r5
 800796e:	f000 f9d3 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8007972:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8007974:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8007976:	4a75      	ldr	r2, [pc, #468]	; (8007b4c <OTM8009A_Init+0x73c>)
 8007978:	21c6      	movs	r1, #198	; 0xc6
 800797a:	4628      	mov	r0, r5
 800797c:	f000 f9cc 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007980:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8007982:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007984:	4a72      	ldr	r2, [pc, #456]	; (8007b50 <OTM8009A_Init+0x740>)
 8007986:	4619      	mov	r1, r3
 8007988:	4628      	mov	r0, r5
 800798a:	f000 f9c5 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 800798e:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007990:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8007992:	4a70      	ldr	r2, [pc, #448]	; (8007b54 <OTM8009A_Init+0x744>)
 8007994:	21ff      	movs	r1, #255	; 0xff
 8007996:	4628      	mov	r0, r5
 8007998:	f000 f9be 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800799c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 800799e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80079a0:	4a6b      	ldr	r2, [pc, #428]	; (8007b50 <OTM8009A_Init+0x740>)
 80079a2:	4619      	mov	r1, r3
 80079a4:	4628      	mov	r0, r5
 80079a6:	f000 f9b7 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80079aa:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80079ac:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80079ae:	4a68      	ldr	r2, [pc, #416]	; (8007b50 <OTM8009A_Init+0x740>)
 80079b0:	4619      	mov	r1, r3
 80079b2:	4628      	mov	r0, r5
 80079b4:	f000 f9b0 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80079b8:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80079ba:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80079bc:	4a66      	ldr	r2, [pc, #408]	; (8007b58 <OTM8009A_Init+0x748>)
 80079be:	21e1      	movs	r1, #225	; 0xe1
 80079c0:	4628      	mov	r0, r5
 80079c2:	f000 f9a9 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80079c6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80079c8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80079ca:	4a61      	ldr	r2, [pc, #388]	; (8007b50 <OTM8009A_Init+0x740>)
 80079cc:	4619      	mov	r1, r3
 80079ce:	4628      	mov	r0, r5
 80079d0:	f000 f9a2 	bl	8007d18 <otm8009a_write_reg>
 80079d4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 80079d6:	2310      	movs	r3, #16
 80079d8:	4a60      	ldr	r2, [pc, #384]	; (8007b5c <OTM8009A_Init+0x74c>)
 80079da:	21e2      	movs	r1, #226	; 0xe2
 80079dc:	4628      	mov	r0, r5
 80079de:	f000 f99b 	bl	8007d18 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 80079e2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 80079e4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 80079e6:	4a5e      	ldr	r2, [pc, #376]	; (8007b60 <OTM8009A_Init+0x750>)
 80079e8:	2111      	movs	r1, #17
 80079ea:	4628      	mov	r0, r5
 80079ec:	f000 f994 	bl	8007d18 <otm8009a_write_reg>
  tickstart = pObj->IO.GetTick();
 80079f0:	68f3      	ldr	r3, [r6, #12]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 80079f2:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 80079f4:	4798      	blx	r3
 80079f6:	4681      	mov	r9, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80079f8:	68f3      	ldr	r3, [r6, #12]
 80079fa:	4798      	blx	r3
 80079fc:	eba0 0009 	sub.w	r0, r0, r9
 8007a00:	2877      	cmp	r0, #119	; 0x77
 8007a02:	d9f9      	bls.n	80079f8 <OTM8009A_Init+0x5e8>
  switch(ColorCoding)
 8007a04:	2f00      	cmp	r7, #0
 8007a06:	d06b      	beq.n	8007ae0 <OTM8009A_Init+0x6d0>
 8007a08:	2f02      	cmp	r7, #2
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RBG565;
 8007a0a:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8007b8c <OTM8009A_Init+0x77c>
  switch(ColorCoding)
 8007a0e:	d040      	beq.n	8007a92 <OTM8009A_Init+0x682>
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8007a10:	f1b8 0f01 	cmp.w	r8, #1
 8007a14:	d049      	beq.n	8007aaa <OTM8009A_Init+0x69a>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8007a16:	2300      	movs	r3, #0
 8007a18:	f8c9 3000 	str.w	r3, [r9]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	4a51      	ldr	r2, [pc, #324]	; (8007b64 <OTM8009A_Init+0x754>)
 8007a20:	2151      	movs	r1, #81	; 0x51
 8007a22:	4628      	mov	r0, r5
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8007a24:	461e      	mov	r6, r3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8007a26:	f000 f977 	bl	8007d18 <otm8009a_write_reg>
 8007a2a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8007a2c:	4a4e      	ldr	r2, [pc, #312]	; (8007b68 <OTM8009A_Init+0x758>)
 8007a2e:	4633      	mov	r3, r6
 8007a30:	2153      	movs	r1, #83	; 0x53
 8007a32:	4628      	mov	r0, r5
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8007a34:	f8c9 6008 	str.w	r6, [r9, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8007a38:	f000 f96e 	bl	8007d18 <otm8009a_write_reg>
 8007a3c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 8007a3e:	4633      	mov	r3, r6
 8007a40:	4a4a      	ldr	r2, [pc, #296]	; (8007b6c <OTM8009A_Init+0x75c>)
 8007a42:	2155      	movs	r1, #85	; 0x55
 8007a44:	4628      	mov	r0, r5
 8007a46:	f000 f967 	bl	8007d18 <otm8009a_write_reg>
 8007a4a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8007a4c:	4633      	mov	r3, r6
 8007a4e:	4a48      	ldr	r2, [pc, #288]	; (8007b70 <OTM8009A_Init+0x760>)
 8007a50:	215e      	movs	r1, #94	; 0x5e
 8007a52:	4628      	mov	r0, r5
 8007a54:	f000 f960 	bl	8007d18 <otm8009a_write_reg>
 8007a58:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8007a5a:	4633      	mov	r3, r6
 8007a5c:	4a45      	ldr	r2, [pc, #276]	; (8007b74 <OTM8009A_Init+0x764>)
 8007a5e:	2129      	movs	r1, #41	; 0x29
 8007a60:	4628      	mov	r0, r5
 8007a62:	f000 f959 	bl	8007d18 <otm8009a_write_reg>
 8007a66:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8007a68:	4633      	mov	r3, r6
 8007a6a:	4631      	mov	r1, r6
 8007a6c:	4a38      	ldr	r2, [pc, #224]	; (8007b50 <OTM8009A_Init+0x740>)
 8007a6e:	4628      	mov	r0, r5
 8007a70:	f000 f952 	bl	8007d18 <otm8009a_write_reg>
 8007a74:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 8007a76:	4633      	mov	r3, r6
 8007a78:	4628      	mov	r0, r5
 8007a7a:	4a3f      	ldr	r2, [pc, #252]	; (8007b78 <OTM8009A_Init+0x768>)
 8007a7c:	212c      	movs	r1, #44	; 0x2c
 8007a7e:	f000 f94b 	bl	8007d18 <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 8007a82:	42c4      	cmn	r4, r0
}
 8007a84:	bf14      	ite	ne
 8007a86:	f04f 30ff 	movne.w	r0, #4294967295
 8007a8a:	4630      	moveq	r0, r6
 8007a8c:	b003      	add	sp, #12
 8007a8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 8007a92:	2300      	movs	r3, #0
 8007a94:	4a39      	ldr	r2, [pc, #228]	; (8007b7c <OTM8009A_Init+0x76c>)
 8007a96:	213a      	movs	r1, #58	; 0x3a
 8007a98:	4628      	mov	r0, r5
 8007a9a:	f000 f93d 	bl	8007d18 <otm8009a_write_reg>
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8007a9e:	f1b8 0f01 	cmp.w	r8, #1
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RBG565;
 8007aa2:	f8c9 7004 	str.w	r7, [r9, #4]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 8007aa6:	4404      	add	r4, r0
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8007aa8:	d1b5      	bne.n	8007a16 <OTM8009A_Init+0x606>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8007aaa:	aa02      	add	r2, sp, #8
 8007aac:	2060      	movs	r0, #96	; 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8007aae:	2300      	movs	r3, #0
 8007ab0:	2136      	movs	r1, #54	; 0x36
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8007ab2:	f802 0d01 	strb.w	r0, [r2, #-1]!
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8007ab6:	4628      	mov	r0, r5
 8007ab8:	f000 f92e 	bl	8007d18 <otm8009a_write_reg>
 8007abc:	4404      	add	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8007abe:	2304      	movs	r3, #4
 8007ac0:	4a2f      	ldr	r2, [pc, #188]	; (8007b80 <OTM8009A_Init+0x770>)
 8007ac2:	212a      	movs	r1, #42	; 0x2a
 8007ac4:	4628      	mov	r0, r5
 8007ac6:	f000 f927 	bl	8007d18 <otm8009a_write_reg>
 8007aca:	4404      	add	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8007acc:	2304      	movs	r3, #4
 8007ace:	4a2d      	ldr	r2, [pc, #180]	; (8007b84 <OTM8009A_Init+0x774>)
 8007ad0:	212b      	movs	r1, #43	; 0x2b
 8007ad2:	4628      	mov	r0, r5
 8007ad4:	f000 f920 	bl	8007d18 <otm8009a_write_reg>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8007ad8:	f8c9 8000 	str.w	r8, [r9]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8007adc:	4404      	add	r4, r0
 8007ade:	e79d      	b.n	8007a1c <OTM8009A_Init+0x60c>
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 8007ae0:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8007b8c <OTM8009A_Init+0x77c>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8007ae4:	463b      	mov	r3, r7
 8007ae6:	4a28      	ldr	r2, [pc, #160]	; (8007b88 <OTM8009A_Init+0x778>)
 8007ae8:	213a      	movs	r1, #58	; 0x3a
 8007aea:	4628      	mov	r0, r5
 8007aec:	f000 f914 	bl	8007d18 <otm8009a_write_reg>
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 8007af0:	f8c9 7004 	str.w	r7, [r9, #4]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8007af4:	4404      	add	r4, r0
    break;
 8007af6:	e78b      	b.n	8007a10 <OTM8009A_Init+0x600>
 8007af8:	080bf3de 	.word	0x080bf3de
 8007afc:	080bf2f4 	.word	0x080bf2f4
 8007b00:	080bf3df 	.word	0x080bf3df
 8007b04:	080bf300 	.word	0x080bf300
 8007b08:	080bf3be 	.word	0x080bf3be
 8007b0c:	080bf30c 	.word	0x080bf30c
 8007b10:	080bf3dd 	.word	0x080bf3dd
 8007b14:	080bf31c 	.word	0x080bf31c
 8007b18:	080bf3d9 	.word	0x080bf3d9
 8007b1c:	080bf32c 	.word	0x080bf32c
 8007b20:	080bf3da 	.word	0x080bf3da
 8007b24:	080bf33c 	.word	0x080bf33c
 8007b28:	080bf3db 	.word	0x080bf3db
 8007b2c:	080bf348 	.word	0x080bf348
 8007b30:	080bf3dc 	.word	0x080bf3dc
 8007b34:	080bf358 	.word	0x080bf358
 8007b38:	080bf3c9 	.word	0x080bf3c9
 8007b3c:	080bf3ea 	.word	0x080bf3ea
 8007b40:	080bf3eb 	.word	0x080bf3eb
 8007b44:	080bf3ec 	.word	0x080bf3ec
 8007b48:	080bf3ed 	.word	0x080bf3ed
 8007b4c:	080bf3ee 	.word	0x080bf3ee
 8007b50:	080bf3bd 	.word	0x080bf3bd
 8007b54:	080bf368 	.word	0x080bf368
 8007b58:	080bf36c 	.word	0x080bf36c
 8007b5c:	080bf37c 	.word	0x080bf37c
 8007b60:	080bf3e0 	.word	0x080bf3e0
 8007b64:	080bf3e3 	.word	0x080bf3e3
 8007b68:	080bf3e4 	.word	0x080bf3e4
 8007b6c:	080bf3e5 	.word	0x080bf3e5
 8007b70:	080bf3e6 	.word	0x080bf3e6
 8007b74:	080bf3e7 	.word	0x080bf3e7
 8007b78:	080bf3e8 	.word	0x080bf3e8
 8007b7c:	080bf3e1 	.word	0x080bf3e1
 8007b80:	080bf284 	.word	0x080bf284
 8007b84:	080bf288 	.word	0x080bf288
 8007b88:	080bf3e2 	.word	0x080bf3e2
 8007b8c:	240085c0 	.word	0x240085c0

08007b90 <OTM8009A_SetBrightness>:
{
 8007b90:	b530      	push	{r4, r5, lr}
 8007b92:	460d      	mov	r5, r1
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8007b94:	490b      	ldr	r1, [pc, #44]	; (8007bc4 <OTM8009A_SetBrightness+0x34>)
{
 8007b96:	b083      	sub	sp, #12
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 8007b98:	3010      	adds	r0, #16
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8007b9a:	ebc5 2405 	rsb	r4, r5, r5, lsl #8
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 8007b9e:	2300      	movs	r3, #0
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8007ba0:	aa02      	add	r2, sp, #8
 8007ba2:	fba1 1404 	umull	r1, r4, r1, r4
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 8007ba6:	2151      	movs	r1, #81	; 0x51
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8007ba8:	0964      	lsrs	r4, r4, #5
 8007baa:	f802 4d01 	strb.w	r4, [r2, #-1]!
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 8007bae:	f000 f8b3 	bl	8007d18 <otm8009a_write_reg>
 8007bb2:	b918      	cbnz	r0, 8007bbc <OTM8009A_SetBrightness+0x2c>
    OTM8009ACtx.Brightness = Brightness;
 8007bb4:	4b04      	ldr	r3, [pc, #16]	; (8007bc8 <OTM8009A_SetBrightness+0x38>)
 8007bb6:	609d      	str	r5, [r3, #8]
}
 8007bb8:	b003      	add	sp, #12
 8007bba:	bd30      	pop	{r4, r5, pc}
    ret = OTM8009A_ERROR;
 8007bbc:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 8007bc0:	e7fa      	b.n	8007bb8 <OTM8009A_SetBrightness+0x28>
 8007bc2:	bf00      	nop
 8007bc4:	51eb851f 	.word	0x51eb851f
 8007bc8:	240085c0 	.word	0x240085c0

08007bcc <OTM8009A_DisplayOn>:
{
 8007bcc:	b500      	push	{lr}
 8007bce:	b083      	sub	sp, #12
  uint8_t display = 0;
 8007bd0:	2300      	movs	r3, #0
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &display, 0) != OTM8009A_OK)
 8007bd2:	2129      	movs	r1, #41	; 0x29
 8007bd4:	3010      	adds	r0, #16
  uint8_t display = 0;
 8007bd6:	aa02      	add	r2, sp, #8
 8007bd8:	f802 3d01 	strb.w	r3, [r2, #-1]!
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &display, 0) != OTM8009A_OK)
 8007bdc:	f000 f89c 	bl	8007d18 <otm8009a_write_reg>
 8007be0:	3000      	adds	r0, #0
 8007be2:	bf18      	it	ne
 8007be4:	2001      	movne	r0, #1
}
 8007be6:	4240      	negs	r0, r0
 8007be8:	b003      	add	sp, #12
 8007bea:	f85d fb04 	ldr.w	pc, [sp], #4
 8007bee:	bf00      	nop

08007bf0 <OTM8009A_DisplayOff>:
{
 8007bf0:	b500      	push	{lr}
 8007bf2:	b083      	sub	sp, #12
  uint8_t display = 0;
 8007bf4:	2300      	movs	r3, #0
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPOFF, &display, 0) != OTM8009A_OK)
 8007bf6:	2128      	movs	r1, #40	; 0x28
 8007bf8:	3010      	adds	r0, #16
  uint8_t display = 0;
 8007bfa:	aa02      	add	r2, sp, #8
 8007bfc:	f802 3d01 	strb.w	r3, [r2, #-1]!
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPOFF, &display, 0) != OTM8009A_OK)
 8007c00:	f000 f88a 	bl	8007d18 <otm8009a_write_reg>
 8007c04:	3000      	adds	r0, #0
 8007c06:	bf18      	it	ne
 8007c08:	2001      	movne	r0, #1
}
 8007c0a:	4240      	negs	r0, r0
 8007c0c:	b003      	add	sp, #12
 8007c0e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007c12:	bf00      	nop

08007c14 <OTM8009A_SetOrientation>:
{
 8007c14:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8007c16:	2360      	movs	r3, #96	; 0x60
{
 8007c18:	b083      	sub	sp, #12
  uint8_t tmp1 = OTM8009A_MADCTR_MODE_PORTRAIT;
 8007c1a:	2600      	movs	r6, #0
  if((Orientation != OTM8009A_ORIENTATION_LANDSCAPE) && (Orientation != OTM8009A_ORIENTATION_PORTRAIT))
 8007c1c:	2901      	cmp	r1, #1
  uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8007c1e:	f88d 3006 	strb.w	r3, [sp, #6]
  uint8_t tmp1 = OTM8009A_MADCTR_MODE_PORTRAIT;
 8007c22:	f88d 6007 	strb.w	r6, [sp, #7]
  if((Orientation != OTM8009A_ORIENTATION_LANDSCAPE) && (Orientation != OTM8009A_ORIENTATION_PORTRAIT))
 8007c26:	d839      	bhi.n	8007c9c <OTM8009A_SetOrientation+0x88>
 8007c28:	460f      	mov	r7, r1
 8007c2a:	f100 0510 	add.w	r5, r0, #16
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8007c2e:	4633      	mov	r3, r6
  else if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8007c30:	d01c      	beq.n	8007c6c <OTM8009A_SetOrientation+0x58>
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp1, 0);
 8007c32:	f10d 0207 	add.w	r2, sp, #7
 8007c36:	2136      	movs	r1, #54	; 0x36
 8007c38:	4628      	mov	r0, r5
 8007c3a:	f000 f86d 	bl	8007d18 <otm8009a_write_reg>
 8007c3e:	4604      	mov	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8007c40:	2304      	movs	r3, #4
 8007c42:	4a18      	ldr	r2, [pc, #96]	; (8007ca4 <OTM8009A_SetOrientation+0x90>)
 8007c44:	212a      	movs	r1, #42	; 0x2a
 8007c46:	4628      	mov	r0, r5
 8007c48:	f000 f866 	bl	8007d18 <otm8009a_write_reg>
 8007c4c:	4404      	add	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8007c4e:	2304      	movs	r3, #4
 8007c50:	4628      	mov	r0, r5
 8007c52:	4a15      	ldr	r2, [pc, #84]	; (8007ca8 <OTM8009A_SetOrientation+0x94>)
 8007c54:	212b      	movs	r1, #43	; 0x2b
 8007c56:	f000 f85f 	bl	8007d18 <otm8009a_write_reg>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8007c5a:	4b14      	ldr	r3, [pc, #80]	; (8007cac <OTM8009A_SetOrientation+0x98>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8007c5c:	4420      	add	r0, r4
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8007c5e:	601e      	str	r6, [r3, #0]
  if(ret != OTM8009A_OK)
 8007c60:	3000      	adds	r0, #0
 8007c62:	bf18      	it	ne
 8007c64:	2001      	movne	r0, #1
 8007c66:	4240      	negs	r0, r0
}
 8007c68:	b003      	add	sp, #12
 8007c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8007c6c:	f10d 0206 	add.w	r2, sp, #6
 8007c70:	2136      	movs	r1, #54	; 0x36
 8007c72:	4628      	mov	r0, r5
 8007c74:	f000 f850 	bl	8007d18 <otm8009a_write_reg>
 8007c78:	4604      	mov	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8007c7a:	2304      	movs	r3, #4
 8007c7c:	4a09      	ldr	r2, [pc, #36]	; (8007ca4 <OTM8009A_SetOrientation+0x90>)
 8007c7e:	212a      	movs	r1, #42	; 0x2a
 8007c80:	4628      	mov	r0, r5
 8007c82:	f000 f849 	bl	8007d18 <otm8009a_write_reg>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8007c86:	2304      	movs	r3, #4
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8007c88:	4404      	add	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8007c8a:	4a07      	ldr	r2, [pc, #28]	; (8007ca8 <OTM8009A_SetOrientation+0x94>)
 8007c8c:	4628      	mov	r0, r5
 8007c8e:	212b      	movs	r1, #43	; 0x2b
 8007c90:	f000 f842 	bl	8007d18 <otm8009a_write_reg>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8007c94:	4b05      	ldr	r3, [pc, #20]	; (8007cac <OTM8009A_SetOrientation+0x98>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8007c96:	4420      	add	r0, r4
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8007c98:	601f      	str	r7, [r3, #0]
 8007c9a:	e7e1      	b.n	8007c60 <OTM8009A_SetOrientation+0x4c>
    ret = OTM8009A_ERROR;
 8007c9c:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8007ca0:	e7e2      	b.n	8007c68 <OTM8009A_SetOrientation+0x54>
 8007ca2:	bf00      	nop
 8007ca4:	080bf284 	.word	0x080bf284
 8007ca8:	080bf288 	.word	0x080bf288
 8007cac:	240085c0 	.word	0x240085c0

08007cb0 <OTM8009A_ReadID>:
{ 
 8007cb0:	b508      	push	{r3, lr}
  if(otm8009a_read_reg(&pObj->Ctx, OTM8009A_CMD_ID1, (uint8_t *)Id, 0)!= OTM8009A_OK)
 8007cb2:	460a      	mov	r2, r1
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	21da      	movs	r1, #218	; 0xda
 8007cb8:	3010      	adds	r0, #16
 8007cba:	f000 f825 	bl	8007d08 <otm8009a_read_reg>
 8007cbe:	3000      	adds	r0, #0
 8007cc0:	bf18      	it	ne
 8007cc2:	2001      	movne	r0, #1
}  
 8007cc4:	4240      	negs	r0, r0
 8007cc6:	bd08      	pop	{r3, pc}

08007cc8 <OTM8009A_DrawVLine>:
 8007cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8007ccc:	4770      	bx	lr
 8007cce:	bf00      	nop

08007cd0 <OTM8009A_GetPixel>:
 8007cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8007cd4:	4770      	bx	lr
 8007cd6:	bf00      	nop

08007cd8 <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 8007cd8:	b178      	cbz	r0, 8007cfa <OTM8009A_RegisterBusIO+0x22>
    pObj->IO.WriteReg  = pIO->WriteReg;
 8007cda:	684a      	ldr	r2, [r1, #4]
 8007cdc:	4603      	mov	r3, r0
  int32_t ret = OTM8009A_OK;
 8007cde:	2000      	movs	r0, #0
{
 8007ce0:	b430      	push	{r4, r5}
    pObj->IO.GetTick   = pIO->GetTick;
 8007ce2:	e9d1 5402 	ldrd	r5, r4, [r1, #8]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 8007ce6:	4906      	ldr	r1, [pc, #24]	; (8007d00 <OTM8009A_RegisterBusIO+0x28>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 8007ce8:	605a      	str	r2, [r3, #4]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 8007cea:	4a06      	ldr	r2, [pc, #24]	; (8007d04 <OTM8009A_RegisterBusIO+0x2c>)
    pObj->IO.GetTick   = pIO->GetTick;
 8007cec:	e9c3 5402 	strd	r5, r4, [r3, #8]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 8007cf0:	e9c3 1305 	strd	r1, r3, [r3, #20]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 8007cf4:	611a      	str	r2, [r3, #16]
}
 8007cf6:	bc30      	pop	{r4, r5}
 8007cf8:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 8007cfa:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007cfe:	4770      	bx	lr
 8007d00:	080073f1 	.word	0x080073f1
 8007d04:	08007401 	.word	0x08007401

08007d08 <otm8009a_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : Data Read
*******************************************************************************/
int32_t otm8009a_read_reg(otm8009a_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8007d08:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8007d0a:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8007d0e:	46a4      	mov	ip, r4
}
 8007d10:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8007d14:	4760      	bx	ip
 8007d16:	bf00      	nop

08007d18 <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 8007d18:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8007d1a:	6804      	ldr	r4, [r0, #0]
 8007d1c:	6880      	ldr	r0, [r0, #8]
 8007d1e:	46a4      	mov	ip, r4
}
 8007d20:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8007d24:	4760      	bx	ip
 8007d26:	bf00      	nop

08007d28 <OV5640_DeInit>:
  * @param  pObj  pointer to component object
  * @retval Component status
  */
int32_t OV5640_DeInit(OV5640_Object_t *pObj)
{
  if (pObj->IsInitialized == 1U)
 8007d28:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d102      	bne.n	8007d36 <OV5640_DeInit+0xe>
  {
    /* De-initialize camera sensor interface */
    pObj->IsInitialized = 0U;
 8007d30:	2300      	movs	r3, #0
 8007d32:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  }

  return OV5640_OK;
}
 8007d36:	2000      	movs	r0, #0
 8007d38:	4770      	bx	lr
 8007d3a:	bf00      	nop

08007d3c <OV5640_GetPixelFormat>:
{
  (void)(pObj);
  (void)(PixelFormat);

  return OV5640_ERROR;
}
 8007d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d40:	4770      	bx	lr
 8007d42:	bf00      	nop

08007d44 <OV5640_GetCapabilities>:
  */
int32_t OV5640_GetCapabilities(OV5640_Object_t *pObj, OV5640_Capabilities_t *Capabilities)
{
  int32_t ret;

  if (pObj == NULL)
 8007d44:	b160      	cbz	r0, 8007d60 <OV5640_GetCapabilities+0x1c>
  {
    ret = OV5640_ERROR;
  }
  else
  {
    Capabilities->Config_Brightness    = 1;
 8007d46:	2301      	movs	r3, #1
    Capabilities->Config_Resolution    = 1;
    Capabilities->Config_Saturation    = 1;
    Capabilities->Config_SpecialEffect = 1;
    Capabilities->Config_Zoom          = 1;

    ret = OV5640_OK;
 8007d48:	2000      	movs	r0, #0
    Capabilities->Config_Brightness    = 1;
 8007d4a:	60cb      	str	r3, [r1, #12]
    Capabilities->Config_LightMode     = 1;
 8007d4c:	604b      	str	r3, [r1, #4]
    Capabilities->Config_MirrorFlip    = 1;
 8007d4e:	61cb      	str	r3, [r1, #28]
    Capabilities->Config_NightMode     = 1;
 8007d50:	624b      	str	r3, [r1, #36]	; 0x24
    Capabilities->Config_Resolution    = 1;
 8007d52:	600b      	str	r3, [r1, #0]
    Capabilities->Config_Saturation    = 1;
 8007d54:	610b      	str	r3, [r1, #16]
    Capabilities->Config_SpecialEffect = 1;
 8007d56:	608b      	str	r3, [r1, #8]
    Capabilities->Config_Zoom          = 1;
 8007d58:	620b      	str	r3, [r1, #32]
    Capabilities->Config_HueDegree     = 1;
 8007d5a:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8007d5e:	4770      	bx	lr
    ret = OV5640_ERROR;
 8007d60:	f04f 30ff 	mov.w	r0, #4294967295
  }

  return ret;
}
 8007d64:	4770      	bx	lr
 8007d66:	bf00      	nop

08007d68 <OV5640_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_ReadRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8007d68:	b410      	push	{r4}
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8007d6a:	6904      	ldr	r4, [r0, #16]
 8007d6c:	8900      	ldrh	r0, [r0, #8]
 8007d6e:	46a4      	mov	ip, r4
}
 8007d70:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8007d74:	4760      	bx	ip
 8007d76:	bf00      	nop

08007d78 <OV5640_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_WriteRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8007d78:	b410      	push	{r4}
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8007d7a:	68c4      	ldr	r4, [r0, #12]
 8007d7c:	8900      	ldrh	r0, [r0, #8]
 8007d7e:	46a4      	mov	ip, r4
}
 8007d80:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8007d84:	4760      	bx	ip
 8007d86:	bf00      	nop

08007d88 <OV5640_SetResolution>:
  if (Resolution > OV5640_R800x480)
 8007d88:	2904      	cmp	r1, #4
 8007d8a:	f200 8095 	bhi.w	8007eb8 <OV5640_SetResolution+0x130>
    switch (Resolution)
 8007d8e:	3901      	subs	r1, #1
{
 8007d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d94:	b082      	sub	sp, #8
    switch (Resolution)
 8007d96:	2903      	cmp	r1, #3
 8007d98:	d870      	bhi.n	8007e7c <OV5640_SetResolution+0xf4>
 8007d9a:	e8df f001 	tbb	[pc, r1]
 8007d9e:	1e3b      	.short	0x1e3b
 8007da0:	5502      	.short	0x5502
 8007da2:	f8df 811c 	ldr.w	r8, [pc, #284]	; 8007ec0 <OV5640_SetResolution+0x138>
 8007da6:	f100 0418 	add.w	r4, r0, #24
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8007daa:	2600      	movs	r6, #0
 8007dac:	f10d 0507 	add.w	r5, sp, #7
 8007db0:	4647      	mov	r7, r8
            tmp = (uint8_t)OV5640_VGA[index][1];
 8007db2:	f8b7 c002 	ldrh.w	ip, [r7, #2]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 8007db6:	2301      	movs	r3, #1
 8007db8:	f838 1026 	ldrh.w	r1, [r8, r6, lsl #2]
 8007dbc:	462a      	mov	r2, r5
 8007dbe:	4620      	mov	r0, r4
 8007dc0:	3704      	adds	r7, #4
            tmp = (uint8_t)OV5640_VGA[index][1];
 8007dc2:	f88d c007 	strb.w	ip, [sp, #7]
 8007dc6:	441e      	add	r6, r3
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 8007dc8:	f001 f896 	bl	8008ef8 <ov5640_write_reg>
 8007dcc:	2800      	cmp	r0, #0
 8007dce:	d06f      	beq.n	8007eb0 <OV5640_SetResolution+0x128>
    ret = OV5640_ERROR;
 8007dd0:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007dd4:	b002      	add	sp, #8
 8007dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dda:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8007ec4 <OV5640_SetResolution+0x13c>
 8007dde:	f100 0418 	add.w	r4, r0, #24
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8007de2:	2600      	movs	r6, #0
 8007de4:	f10d 0507 	add.w	r5, sp, #7
 8007de8:	4647      	mov	r7, r8
            tmp = (uint8_t)OV5640_480x272[index][1];
 8007dea:	f8b7 c002 	ldrh.w	ip, [r7, #2]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 8007dee:	2301      	movs	r3, #1
 8007df0:	f838 1026 	ldrh.w	r1, [r8, r6, lsl #2]
 8007df4:	462a      	mov	r2, r5
 8007df6:	4620      	mov	r0, r4
 8007df8:	3704      	adds	r7, #4
            tmp = (uint8_t)OV5640_480x272[index][1];
 8007dfa:	f88d c007 	strb.w	ip, [sp, #7]
 8007dfe:	441e      	add	r6, r3
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 8007e00:	f001 f87a 	bl	8008ef8 <ov5640_write_reg>
 8007e04:	2800      	cmp	r0, #0
 8007e06:	d1e3      	bne.n	8007dd0 <OV5640_SetResolution+0x48>
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8007e08:	2e04      	cmp	r6, #4
 8007e0a:	d1ee      	bne.n	8007dea <OV5640_SetResolution+0x62>
    ret = OV5640_ERROR;
 8007e0c:	2000      	movs	r0, #0
}
 8007e0e:	b002      	add	sp, #8
 8007e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e14:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8007ec8 <OV5640_SetResolution+0x140>
 8007e18:	f100 0418 	add.w	r4, r0, #24
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8007e1c:	2600      	movs	r6, #0
 8007e1e:	f10d 0507 	add.w	r5, sp, #7
 8007e22:	4647      	mov	r7, r8
            tmp = (uint8_t)OV5640_QVGA[index][1];
 8007e24:	f8b7 c002 	ldrh.w	ip, [r7, #2]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 8007e28:	2301      	movs	r3, #1
 8007e2a:	f838 1026 	ldrh.w	r1, [r8, r6, lsl #2]
 8007e2e:	462a      	mov	r2, r5
 8007e30:	4620      	mov	r0, r4
 8007e32:	3704      	adds	r7, #4
            tmp = (uint8_t)OV5640_QVGA[index][1];
 8007e34:	f88d c007 	strb.w	ip, [sp, #7]
 8007e38:	441e      	add	r6, r3
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 8007e3a:	f001 f85d 	bl	8008ef8 <ov5640_write_reg>
 8007e3e:	2800      	cmp	r0, #0
 8007e40:	d1c6      	bne.n	8007dd0 <OV5640_SetResolution+0x48>
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8007e42:	2e04      	cmp	r6, #4
 8007e44:	d1ee      	bne.n	8007e24 <OV5640_SetResolution+0x9c>
 8007e46:	e7e1      	b.n	8007e0c <OV5640_SetResolution+0x84>
 8007e48:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8007ecc <OV5640_SetResolution+0x144>
 8007e4c:	f100 0418 	add.w	r4, r0, #24
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8007e50:	2600      	movs	r6, #0
 8007e52:	f10d 0507 	add.w	r5, sp, #7
 8007e56:	4647      	mov	r7, r8
            tmp = (uint8_t)OV5640_WVGA[index][1];
 8007e58:	f8b7 c002 	ldrh.w	ip, [r7, #2]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	f838 1026 	ldrh.w	r1, [r8, r6, lsl #2]
 8007e62:	462a      	mov	r2, r5
 8007e64:	4620      	mov	r0, r4
 8007e66:	3704      	adds	r7, #4
            tmp = (uint8_t)OV5640_WVGA[index][1];
 8007e68:	f88d c007 	strb.w	ip, [sp, #7]
 8007e6c:	441e      	add	r6, r3
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8007e6e:	f001 f843 	bl	8008ef8 <ov5640_write_reg>
 8007e72:	2800      	cmp	r0, #0
 8007e74:	d1ac      	bne.n	8007dd0 <OV5640_SetResolution+0x48>
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8007e76:	2e04      	cmp	r6, #4
 8007e78:	d1ee      	bne.n	8007e58 <OV5640_SetResolution+0xd0>
 8007e7a:	e7c7      	b.n	8007e0c <OV5640_SetResolution+0x84>
 8007e7c:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8007ed0 <OV5640_SetResolution+0x148>
 8007e80:	f100 0418 	add.w	r4, r0, #24
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8007e84:	2600      	movs	r6, #0
 8007e86:	f10d 0507 	add.w	r5, sp, #7
 8007e8a:	4647      	mov	r7, r8
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 8007e8c:	f8b7 c002 	ldrh.w	ip, [r7, #2]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8007e90:	2301      	movs	r3, #1
 8007e92:	f838 1026 	ldrh.w	r1, [r8, r6, lsl #2]
 8007e96:	462a      	mov	r2, r5
 8007e98:	4620      	mov	r0, r4
 8007e9a:	3704      	adds	r7, #4
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 8007e9c:	f88d c007 	strb.w	ip, [sp, #7]
 8007ea0:	441e      	add	r6, r3
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8007ea2:	f001 f829 	bl	8008ef8 <ov5640_write_reg>
 8007ea6:	2800      	cmp	r0, #0
 8007ea8:	d192      	bne.n	8007dd0 <OV5640_SetResolution+0x48>
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8007eaa:	2e04      	cmp	r6, #4
 8007eac:	d1ee      	bne.n	8007e8c <OV5640_SetResolution+0x104>
 8007eae:	e7ad      	b.n	8007e0c <OV5640_SetResolution+0x84>
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8007eb0:	2e04      	cmp	r6, #4
 8007eb2:	f47f af7e 	bne.w	8007db2 <OV5640_SetResolution+0x2a>
 8007eb6:	e7a9      	b.n	8007e0c <OV5640_SetResolution+0x84>
    ret = OV5640_ERROR;
 8007eb8:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007ebc:	4770      	bx	lr
 8007ebe:	bf00      	nop
 8007ec0:	080bf8a4 	.word	0x080bf8a4
 8007ec4:	080bf3f0 	.word	0x080bf3f0
 8007ec8:	080bf894 	.word	0x080bf894
 8007ecc:	080bf8b4 	.word	0x080bf8b4
 8007ed0:	080bf884 	.word	0x080bf884

08007ed4 <OV5640_SetLightMode>:
{
 8007ed4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007ed8:	b083      	sub	sp, #12
  tmp = 0x00;
 8007eda:	2200      	movs	r2, #0
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_MANUAL_CONTROL, &tmp, 1);
 8007edc:	f100 0618 	add.w	r6, r0, #24
{
 8007ee0:	460f      	mov	r7, r1
  tmp = 0x00;
 8007ee2:	ac02      	add	r4, sp, #8
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_MANUAL_CONTROL, &tmp, 1);
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	4630      	mov	r0, r6
 8007ee8:	f243 4106 	movw	r1, #13318	; 0x3406
  tmp = 0x00;
 8007eec:	f804 2d01 	strb.w	r2, [r4, #-1]!
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_MANUAL_CONTROL, &tmp, 1);
 8007ef0:	4622      	mov	r2, r4
 8007ef2:	f001 f801 	bl	8008ef8 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8007ef6:	4605      	mov	r5, r0
 8007ef8:	b118      	cbz	r0, 8007f02 <OV5640_SetLightMode+0x2e>
}
 8007efa:	4628      	mov	r0, r5
 8007efc:	b003      	add	sp, #12
 8007efe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 0x46;
 8007f02:	2546      	movs	r5, #70	; 0x46
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL16, &tmp, 1);
 8007f04:	2301      	movs	r3, #1
 8007f06:	4622      	mov	r2, r4
 8007f08:	f245 1190 	movw	r1, #20880	; 0x5190
 8007f0c:	4630      	mov	r0, r6
    tmp = 0x46;
 8007f0e:	f88d 5007 	strb.w	r5, [sp, #7]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL16, &tmp, 1);
 8007f12:	f000 fff1 	bl	8008ef8 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8007f16:	4605      	mov	r5, r0
 8007f18:	2800      	cmp	r0, #0
 8007f1a:	d1ee      	bne.n	8007efa <OV5640_SetLightMode+0x26>
    tmp = 0xF8;
 8007f1c:	25f8      	movs	r5, #248	; 0xf8
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL17, &tmp, 1);
 8007f1e:	2301      	movs	r3, #1
 8007f20:	4622      	mov	r2, r4
 8007f22:	f245 1191 	movw	r1, #20881	; 0x5191
 8007f26:	4630      	mov	r0, r6
    tmp = 0xF8;
 8007f28:	f88d 5007 	strb.w	r5, [sp, #7]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL17, &tmp, 1);
 8007f2c:	f000 ffe4 	bl	8008ef8 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8007f30:	4605      	mov	r5, r0
 8007f32:	2800      	cmp	r0, #0
 8007f34:	d1e1      	bne.n	8007efa <OV5640_SetLightMode+0x26>
    tmp = 0x04;
 8007f36:	2504      	movs	r5, #4
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL18, &tmp, 1);
 8007f38:	2301      	movs	r3, #1
 8007f3a:	4622      	mov	r2, r4
 8007f3c:	f245 1192 	movw	r1, #20882	; 0x5192
 8007f40:	4630      	mov	r0, r6
    tmp = 0x04;
 8007f42:	f88d 5007 	strb.w	r5, [sp, #7]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL18, &tmp, 1);
 8007f46:	f000 ffd7 	bl	8008ef8 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8007f4a:	4605      	mov	r5, r0
 8007f4c:	2800      	cmp	r0, #0
 8007f4e:	d1d4      	bne.n	8007efa <OV5640_SetLightMode+0x26>
    switch (LightMode)
 8007f50:	1e79      	subs	r1, r7, #1
 8007f52:	2907      	cmp	r1, #7
 8007f54:	d863      	bhi.n	800801e <OV5640_SetLightMode+0x14a>
 8007f56:	e8df f001 	tbb	[pc, r1]
 8007f5a:	458f      	.short	0x458f
 8007f5c:	62622762 	.word	0x62622762
 8007f60:	0462      	.short	0x0462
 8007f62:	f8df 915c 	ldr.w	r9, [pc, #348]	; 80080c0 <OV5640_SetLightMode+0x1ec>
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 8007f66:	2700      	movs	r7, #0
 8007f68:	46c8      	mov	r8, r9
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 8007f6a:	f8b8 c002 	ldrh.w	ip, [r8, #2]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 8007f6e:	2301      	movs	r3, #1
 8007f70:	4622      	mov	r2, r4
 8007f72:	f839 1027 	ldrh.w	r1, [r9, r7, lsl #2]
 8007f76:	4630      	mov	r0, r6
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 8007f78:	f88d c007 	strb.w	ip, [sp, #7]
 8007f7c:	f108 0804 	add.w	r8, r8, #4
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 8007f80:	f000 ffba 	bl	8008ef8 <ov5640_write_reg>
 8007f84:	1c7b      	adds	r3, r7, #1
 8007f86:	2800      	cmp	r0, #0
 8007f88:	d06a      	beq.n	8008060 <OV5640_SetLightMode+0x18c>
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 8007f8a:	2b07      	cmp	r3, #7
 8007f8c:	d006      	beq.n	8007f9c <OV5640_SetLightMode+0xc8>
 8007f8e:	3702      	adds	r7, #2
 8007f90:	2f07      	cmp	r7, #7
 8007f92:	d003      	beq.n	8007f9c <OV5640_SetLightMode+0xc8>
 8007f94:	2f06      	cmp	r7, #6
 8007f96:	f107 0702 	add.w	r7, r7, #2
 8007f9a:	d1f9      	bne.n	8007f90 <OV5640_SetLightMode+0xbc>
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 8007f9c:	f04f 35ff 	mov.w	r5, #4294967295
}
 8007fa0:	4628      	mov	r0, r5
 8007fa2:	b003      	add	sp, #12
 8007fa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007fa8:	f8df 9118 	ldr.w	r9, [pc, #280]	; 80080c4 <OV5640_SetLightMode+0x1f0>
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 8007fac:	2700      	movs	r7, #0
 8007fae:	46c8      	mov	r8, r9
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 8007fb0:	f8b8 c002 	ldrh.w	ip, [r8, #2]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	4622      	mov	r2, r4
 8007fb8:	f839 1027 	ldrh.w	r1, [r9, r7, lsl #2]
 8007fbc:	4630      	mov	r0, r6
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 8007fbe:	f88d c007 	strb.w	ip, [sp, #7]
 8007fc2:	f108 0804 	add.w	r8, r8, #4
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 8007fc6:	f000 ff97 	bl	8008ef8 <ov5640_write_reg>
 8007fca:	1c7b      	adds	r3, r7, #1
 8007fcc:	2800      	cmp	r0, #0
 8007fce:	d04b      	beq.n	8008068 <OV5640_SetLightMode+0x194>
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 8007fd0:	2b07      	cmp	r3, #7
 8007fd2:	d0e3      	beq.n	8007f9c <OV5640_SetLightMode+0xc8>
 8007fd4:	3702      	adds	r7, #2
 8007fd6:	2f07      	cmp	r7, #7
 8007fd8:	d0e0      	beq.n	8007f9c <OV5640_SetLightMode+0xc8>
 8007fda:	2f06      	cmp	r7, #6
 8007fdc:	f107 0702 	add.w	r7, r7, #2
 8007fe0:	d1f9      	bne.n	8007fd6 <OV5640_SetLightMode+0x102>
 8007fe2:	e7db      	b.n	8007f9c <OV5640_SetLightMode+0xc8>
 8007fe4:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 80080c8 <OV5640_SetLightMode+0x1f4>
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 8007fe8:	2700      	movs	r7, #0
 8007fea:	46c8      	mov	r8, r9
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 8007fec:	f8b8 c002 	ldrh.w	ip, [r8, #2]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	4622      	mov	r2, r4
 8007ff4:	f839 1027 	ldrh.w	r1, [r9, r7, lsl #2]
 8007ff8:	4630      	mov	r0, r6
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 8007ffa:	f88d c007 	strb.w	ip, [sp, #7]
 8007ffe:	f108 0804 	add.w	r8, r8, #4
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 8008002:	f000 ff79 	bl	8008ef8 <ov5640_write_reg>
 8008006:	1c7b      	adds	r3, r7, #1
 8008008:	b390      	cbz	r0, 8008070 <OV5640_SetLightMode+0x19c>
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 800800a:	2b07      	cmp	r3, #7
 800800c:	d0c6      	beq.n	8007f9c <OV5640_SetLightMode+0xc8>
 800800e:	3702      	adds	r7, #2
 8008010:	2f07      	cmp	r7, #7
 8008012:	d0c3      	beq.n	8007f9c <OV5640_SetLightMode+0xc8>
 8008014:	2f06      	cmp	r7, #6
 8008016:	f107 0702 	add.w	r7, r7, #2
 800801a:	d1f9      	bne.n	8008010 <OV5640_SetLightMode+0x13c>
 800801c:	e7be      	b.n	8007f9c <OV5640_SetLightMode+0xc8>
 800801e:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 80080cc <OV5640_SetLightMode+0x1f8>
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 8008022:	2700      	movs	r7, #0
 8008024:	46c8      	mov	r8, r9
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 8008026:	f8b8 c002 	ldrh.w	ip, [r8, #2]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 800802a:	2301      	movs	r3, #1
 800802c:	4622      	mov	r2, r4
 800802e:	f839 1027 	ldrh.w	r1, [r9, r7, lsl #2]
 8008032:	4630      	mov	r0, r6
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 8008034:	f88d c007 	strb.w	ip, [sp, #7]
 8008038:	f108 0804 	add.w	r8, r8, #4
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 800803c:	f000 ff5c 	bl	8008ef8 <ov5640_write_reg>
 8008040:	1c7b      	adds	r3, r7, #1
 8008042:	b148      	cbz	r0, 8008058 <OV5640_SetLightMode+0x184>
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 8008044:	2b07      	cmp	r3, #7
 8008046:	d0a9      	beq.n	8007f9c <OV5640_SetLightMode+0xc8>
 8008048:	3702      	adds	r7, #2
 800804a:	2f07      	cmp	r7, #7
 800804c:	d0a6      	beq.n	8007f9c <OV5640_SetLightMode+0xc8>
 800804e:	2f06      	cmp	r7, #6
 8008050:	f107 0702 	add.w	r7, r7, #2
 8008054:	d1f9      	bne.n	800804a <OV5640_SetLightMode+0x176>
 8008056:	e7a1      	b.n	8007f9c <OV5640_SetLightMode+0xc8>
 8008058:	2b07      	cmp	r3, #7
 800805a:	461f      	mov	r7, r3
 800805c:	d1e3      	bne.n	8008026 <OV5640_SetLightMode+0x152>
 800805e:	e74c      	b.n	8007efa <OV5640_SetLightMode+0x26>
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 8008060:	2b07      	cmp	r3, #7
 8008062:	461f      	mov	r7, r3
 8008064:	d181      	bne.n	8007f6a <OV5640_SetLightMode+0x96>
 8008066:	e748      	b.n	8007efa <OV5640_SetLightMode+0x26>
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 8008068:	2b07      	cmp	r3, #7
 800806a:	461f      	mov	r7, r3
 800806c:	d1a0      	bne.n	8007fb0 <OV5640_SetLightMode+0xdc>
 800806e:	e744      	b.n	8007efa <OV5640_SetLightMode+0x26>
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 8008070:	2b07      	cmp	r3, #7
 8008072:	461f      	mov	r7, r3
 8008074:	d1ba      	bne.n	8007fec <OV5640_SetLightMode+0x118>
 8008076:	e740      	b.n	8007efa <OV5640_SetLightMode+0x26>
 8008078:	f8df 9054 	ldr.w	r9, [pc, #84]	; 80080d0 <OV5640_SetLightMode+0x1fc>
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 800807c:	2700      	movs	r7, #0
 800807e:	46c8      	mov	r8, r9
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 8008080:	f8b8 c002 	ldrh.w	ip, [r8, #2]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 8008084:	2301      	movs	r3, #1
 8008086:	4622      	mov	r2, r4
 8008088:	f839 1027 	ldrh.w	r1, [r9, r7, lsl #2]
 800808c:	4630      	mov	r0, r6
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 800808e:	f88d c007 	strb.w	ip, [sp, #7]
 8008092:	f108 0804 	add.w	r8, r8, #4
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 8008096:	f000 ff2f 	bl	8008ef8 <ov5640_write_reg>
 800809a:	1c7b      	adds	r3, r7, #1
 800809c:	b158      	cbz	r0, 80080b6 <OV5640_SetLightMode+0x1e2>
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 800809e:	2b07      	cmp	r3, #7
 80080a0:	f43f af7c 	beq.w	8007f9c <OV5640_SetLightMode+0xc8>
 80080a4:	3702      	adds	r7, #2
 80080a6:	2f07      	cmp	r7, #7
 80080a8:	f43f af78 	beq.w	8007f9c <OV5640_SetLightMode+0xc8>
 80080ac:	2f06      	cmp	r7, #6
 80080ae:	f107 0702 	add.w	r7, r7, #2
 80080b2:	d1f8      	bne.n	80080a6 <OV5640_SetLightMode+0x1d2>
 80080b4:	e772      	b.n	8007f9c <OV5640_SetLightMode+0xc8>
 80080b6:	2b07      	cmp	r3, #7
 80080b8:	461f      	mov	r7, r3
 80080ba:	d1e1      	bne.n	8008080 <OV5640_SetLightMode+0x1ac>
 80080bc:	e71d      	b.n	8007efa <OV5640_SetLightMode+0x26>
 80080be:	bf00      	nop
 80080c0:	080bf814 	.word	0x080bf814
 80080c4:	080bf830 	.word	0x080bf830
 80080c8:	080bf84c 	.word	0x080bf84c
 80080cc:	080bf7f8 	.word	0x080bf7f8
 80080d0:	080bf868 	.word	0x080bf868

080080d4 <OV5640_SetColorEffect>:
  switch (Effect)
 80080d4:	3901      	subs	r1, #1
{
 80080d6:	b570      	push	{r4, r5, r6, lr}
 80080d8:	f100 0418 	add.w	r4, r0, #24
 80080dc:	b082      	sub	sp, #8
  switch (Effect)
 80080de:	291f      	cmp	r1, #31
 80080e0:	f200 80fd 	bhi.w	80082de <OV5640_SetColorEffect+0x20a>
 80080e4:	e8df f011 	tbh	[pc, r1, lsl #1]
 80080e8:	005e0032 	.word	0x005e0032
 80080ec:	008a00fb 	.word	0x008a00fb
 80080f0:	00fb00fb 	.word	0x00fb00fb
 80080f4:	00a500fb 	.word	0x00a500fb
 80080f8:	00fb00fb 	.word	0x00fb00fb
 80080fc:	00fb00fb 	.word	0x00fb00fb
 8008100:	00fb00fb 	.word	0x00fb00fb
 8008104:	00cc00fb 	.word	0x00cc00fb
 8008108:	00fb00fb 	.word	0x00fb00fb
 800810c:	00fb00fb 	.word	0x00fb00fb
 8008110:	00fb00fb 	.word	0x00fb00fb
 8008114:	00fb00fb 	.word	0x00fb00fb
 8008118:	00fb00fb 	.word	0x00fb00fb
 800811c:	00fb00fb 	.word	0x00fb00fb
 8008120:	00fb00fb 	.word	0x00fb00fb
 8008124:	002000fb 	.word	0x002000fb
      tmp = 0xFF;
 8008128:	22ff      	movs	r2, #255	; 0xff
 800812a:	ad02      	add	r5, sp, #8
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800812c:	2301      	movs	r3, #1
 800812e:	f245 0101 	movw	r1, #20481	; 0x5001
      tmp = 0xFF;
 8008132:	f805 2d01 	strb.w	r2, [r5, #-1]!
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8008136:	4620      	mov	r0, r4
 8008138:	462a      	mov	r2, r5
 800813a:	f000 fedd 	bl	8008ef8 <ov5640_write_reg>
      if (ret == OV5640_OK)
 800813e:	2800      	cmp	r0, #0
 8008140:	f000 80eb 	beq.w	800831a <OV5640_SetColorEffect+0x246>
        ret = OV5640_ERROR;
 8008144:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008148:	b002      	add	sp, #8
 800814a:	bd70      	pop	{r4, r5, r6, pc}
      tmp = 0xFF;
 800814c:	22ff      	movs	r2, #255	; 0xff
 800814e:	ad02      	add	r5, sp, #8
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8008150:	2301      	movs	r3, #1
 8008152:	f245 0101 	movw	r1, #20481	; 0x5001
      tmp = 0xFF;
 8008156:	f805 2d01 	strb.w	r2, [r5, #-1]!
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800815a:	4620      	mov	r0, r4
 800815c:	462a      	mov	r2, r5
 800815e:	f000 fecb 	bl	8008ef8 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8008162:	2800      	cmp	r0, #0
 8008164:	d1ee      	bne.n	8008144 <OV5640_SetColorEffect+0x70>
        tmp = 0x18;
 8008166:	2618      	movs	r6, #24
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8008168:	2301      	movs	r3, #1
 800816a:	462a      	mov	r2, r5
 800816c:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8008170:	4620      	mov	r0, r4
        tmp = 0x18;
 8008172:	f88d 6007 	strb.w	r6, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8008176:	f000 febf 	bl	8008ef8 <ov5640_write_reg>
      if (ret == OV5640_OK)
 800817a:	2800      	cmp	r0, #0
 800817c:	d1e2      	bne.n	8008144 <OV5640_SetColorEffect+0x70>
        tmp = 0xA0;
 800817e:	26a0      	movs	r6, #160	; 0xa0
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8008180:	2301      	movs	r3, #1
 8008182:	462a      	mov	r2, r5
 8008184:	f245 5183 	movw	r1, #21891	; 0x5583
 8008188:	4620      	mov	r0, r4
        tmp = 0xA0;
 800818a:	f88d 6007 	strb.w	r6, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 800818e:	f000 feb3 	bl	8008ef8 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8008192:	2800      	cmp	r0, #0
 8008194:	d1d6      	bne.n	8008144 <OV5640_SetColorEffect+0x70>
        tmp = 0x40;
 8008196:	2640      	movs	r6, #64	; 0x40
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8008198:	462a      	mov	r2, r5
 800819a:	4620      	mov	r0, r4
 800819c:	2301      	movs	r3, #1
 800819e:	f245 5184 	movw	r1, #21892	; 0x5584
 80081a2:	e0b0      	b.n	8008306 <OV5640_SetColorEffect+0x232>
      tmp = 0xFF;
 80081a4:	22ff      	movs	r2, #255	; 0xff
 80081a6:	ad02      	add	r5, sp, #8
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80081a8:	2301      	movs	r3, #1
 80081aa:	f245 0101 	movw	r1, #20481	; 0x5001
      tmp = 0xFF;
 80081ae:	f805 2d01 	strb.w	r2, [r5, #-1]!
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80081b2:	4620      	mov	r0, r4
 80081b4:	462a      	mov	r2, r5
 80081b6:	f000 fe9f 	bl	8008ef8 <ov5640_write_reg>
      if (ret == OV5640_OK)
 80081ba:	2800      	cmp	r0, #0
 80081bc:	d1c2      	bne.n	8008144 <OV5640_SetColorEffect+0x70>
        tmp = 0x18;
 80081be:	2618      	movs	r6, #24
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80081c0:	2301      	movs	r3, #1
 80081c2:	462a      	mov	r2, r5
 80081c4:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80081c8:	4620      	mov	r0, r4
        tmp = 0x18;
 80081ca:	f88d 6007 	strb.w	r6, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80081ce:	f000 fe93 	bl	8008ef8 <ov5640_write_reg>
      if (ret == OV5640_OK)
 80081d2:	2800      	cmp	r0, #0
 80081d4:	d1b6      	bne.n	8008144 <OV5640_SetColorEffect+0x70>
        tmp = 0x80;
 80081d6:	2680      	movs	r6, #128	; 0x80
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80081d8:	2301      	movs	r3, #1
 80081da:	462a      	mov	r2, r5
 80081dc:	f245 5183 	movw	r1, #21891	; 0x5583
 80081e0:	4620      	mov	r0, r4
        tmp = 0x80;
 80081e2:	f88d 6007 	strb.w	r6, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80081e6:	f000 fe87 	bl	8008ef8 <ov5640_write_reg>
      if (ret == OV5640_OK)
 80081ea:	2800      	cmp	r0, #0
 80081ec:	d1aa      	bne.n	8008144 <OV5640_SetColorEffect+0x70>
        tmp = 0xC0;
 80081ee:	26c0      	movs	r6, #192	; 0xc0
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 80081f0:	462a      	mov	r2, r5
 80081f2:	4620      	mov	r0, r4
 80081f4:	2301      	movs	r3, #1
 80081f6:	f245 5184 	movw	r1, #21892	; 0x5584
 80081fa:	e084      	b.n	8008306 <OV5640_SetColorEffect+0x232>
      tmp = 0xFF;
 80081fc:	22ff      	movs	r2, #255	; 0xff
 80081fe:	ad02      	add	r5, sp, #8
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8008200:	2301      	movs	r3, #1
 8008202:	f245 0101 	movw	r1, #20481	; 0x5001
      tmp = 0xFF;
 8008206:	f805 2d01 	strb.w	r2, [r5, #-1]!
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800820a:	4620      	mov	r0, r4
 800820c:	462a      	mov	r2, r5
 800820e:	f000 fe73 	bl	8008ef8 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8008212:	2800      	cmp	r0, #0
 8008214:	d196      	bne.n	8008144 <OV5640_SetColorEffect+0x70>
        tmp = 0x18;
 8008216:	2618      	movs	r6, #24
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8008218:	2301      	movs	r3, #1
 800821a:	462a      	mov	r2, r5
 800821c:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8008220:	4620      	mov	r0, r4
        tmp = 0x18;
 8008222:	f88d 6007 	strb.w	r6, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8008226:	f000 fe67 	bl	8008ef8 <ov5640_write_reg>
      if (ret == OV5640_OK)
 800822a:	2800      	cmp	r0, #0
 800822c:	d18a      	bne.n	8008144 <OV5640_SetColorEffect+0x70>
        tmp = 0x60;
 800822e:	2660      	movs	r6, #96	; 0x60
 8008230:	e01b      	b.n	800826a <OV5640_SetColorEffect+0x196>
      tmp = 0xFF;
 8008232:	22ff      	movs	r2, #255	; 0xff
 8008234:	ad02      	add	r5, sp, #8
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8008236:	2301      	movs	r3, #1
 8008238:	f245 0101 	movw	r1, #20481	; 0x5001
      tmp = 0xFF;
 800823c:	f805 2d01 	strb.w	r2, [r5, #-1]!
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8008240:	4620      	mov	r0, r4
 8008242:	462a      	mov	r2, r5
 8008244:	f000 fe58 	bl	8008ef8 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8008248:	2800      	cmp	r0, #0
 800824a:	f47f af7b 	bne.w	8008144 <OV5640_SetColorEffect+0x70>
        tmp = 0x18;
 800824e:	2618      	movs	r6, #24
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8008250:	2301      	movs	r3, #1
 8008252:	462a      	mov	r2, r5
 8008254:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8008258:	4620      	mov	r0, r4
        tmp = 0x18;
 800825a:	f88d 6007 	strb.w	r6, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800825e:	f000 fe4b 	bl	8008ef8 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8008262:	2800      	cmp	r0, #0
 8008264:	f47f af6e 	bne.w	8008144 <OV5640_SetColorEffect+0x70>
        tmp = 0x80;
 8008268:	2680      	movs	r6, #128	; 0x80
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 800826a:	2301      	movs	r3, #1
 800826c:	462a      	mov	r2, r5
 800826e:	f245 5183 	movw	r1, #21891	; 0x5583
 8008272:	4620      	mov	r0, r4
        tmp = 0x80;
 8008274:	f88d 6007 	strb.w	r6, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8008278:	f000 fe3e 	bl	8008ef8 <ov5640_write_reg>
      if (ret == OV5640_OK)
 800827c:	b348      	cbz	r0, 80082d2 <OV5640_SetColorEffect+0x1fe>
 800827e:	e761      	b.n	8008144 <OV5640_SetColorEffect+0x70>
      tmp = 0xFF;
 8008280:	22ff      	movs	r2, #255	; 0xff
 8008282:	ad02      	add	r5, sp, #8
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8008284:	2301      	movs	r3, #1
 8008286:	f245 0101 	movw	r1, #20481	; 0x5001
      tmp = 0xFF;
 800828a:	f805 2d01 	strb.w	r2, [r5, #-1]!
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800828e:	4620      	mov	r0, r4
 8008290:	462a      	mov	r2, r5
 8008292:	f000 fe31 	bl	8008ef8 <ov5640_write_reg>
      if (ret == OV5640_OK)
 8008296:	2800      	cmp	r0, #0
 8008298:	f47f af54 	bne.w	8008144 <OV5640_SetColorEffect+0x70>
        tmp = 0x18;
 800829c:	2618      	movs	r6, #24
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800829e:	2301      	movs	r3, #1
 80082a0:	462a      	mov	r2, r5
 80082a2:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80082a6:	4620      	mov	r0, r4
        tmp = 0x18;
 80082a8:	f88d 6007 	strb.w	r6, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80082ac:	f000 fe24 	bl	8008ef8 <ov5640_write_reg>
      if (ret == OV5640_OK)
 80082b0:	2800      	cmp	r0, #0
 80082b2:	f47f af47 	bne.w	8008144 <OV5640_SetColorEffect+0x70>
        tmp = 0x40;
 80082b6:	2640      	movs	r6, #64	; 0x40
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80082b8:	2301      	movs	r3, #1
 80082ba:	462a      	mov	r2, r5
 80082bc:	f245 5183 	movw	r1, #21891	; 0x5583
 80082c0:	4620      	mov	r0, r4
        tmp = 0x40;
 80082c2:	f88d 6007 	strb.w	r6, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80082c6:	f000 fe17 	bl	8008ef8 <ov5640_write_reg>
      if (ret == OV5640_OK)
 80082ca:	2800      	cmp	r0, #0
 80082cc:	f47f af3a 	bne.w	8008144 <OV5640_SetColorEffect+0x70>
        tmp = 0xA0;
 80082d0:	26a0      	movs	r6, #160	; 0xa0
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 80082d2:	462a      	mov	r2, r5
 80082d4:	4620      	mov	r0, r4
 80082d6:	2301      	movs	r3, #1
 80082d8:	f245 5184 	movw	r1, #21892	; 0x5584
 80082dc:	e013      	b.n	8008306 <OV5640_SetColorEffect+0x232>
      tmp = 0x7F;
 80082de:	227f      	movs	r2, #127	; 0x7f
 80082e0:	ad02      	add	r5, sp, #8
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80082e2:	2301      	movs	r3, #1
 80082e4:	f245 0101 	movw	r1, #20481	; 0x5001
      tmp = 0x7F;
 80082e8:	f805 2d01 	strb.w	r2, [r5, #-1]!
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80082ec:	4620      	mov	r0, r4
 80082ee:	462a      	mov	r2, r5
 80082f0:	f000 fe02 	bl	8008ef8 <ov5640_write_reg>
      if (ret == OV5640_OK)
 80082f4:	4606      	mov	r6, r0
 80082f6:	2800      	cmp	r0, #0
 80082f8:	f47f af24 	bne.w	8008144 <OV5640_SetColorEffect+0x70>
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80082fc:	462a      	mov	r2, r5
 80082fe:	4620      	mov	r0, r4
 8008300:	2301      	movs	r3, #1
 8008302:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
        tmp = 0x00;
 8008306:	f88d 6007 	strb.w	r6, [sp, #7]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800830a:	f000 fdf5 	bl	8008ef8 <ov5640_write_reg>
      if (ret != OV5640_OK)
 800830e:	3000      	adds	r0, #0
 8008310:	bf18      	it	ne
 8008312:	2001      	movne	r0, #1
 8008314:	4240      	negs	r0, r0
}
 8008316:	b002      	add	sp, #8
 8008318:	bd70      	pop	{r4, r5, r6, pc}
        tmp = 0x40;
 800831a:	2640      	movs	r6, #64	; 0x40
 800831c:	e7ee      	b.n	80082fc <OV5640_SetColorEffect+0x228>
 800831e:	bf00      	nop

08008320 <OV5640_SetBrightness>:
{
 8008320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 8008324:	4b27      	ldr	r3, [pc, #156]	; (80083c4 <OV5640_SetBrightness+0xa4>)
{
 8008326:	b084      	sub	sp, #16
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8008328:	f100 0518 	add.w	r5, r0, #24
{
 800832c:	4688      	mov	r8, r1
  tmp = 0xFF;
 800832e:	af04      	add	r7, sp, #16
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 8008330:	ac01      	add	r4, sp, #4
  tmp = 0xFF;
 8008332:	26ff      	movs	r6, #255	; 0xff
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 8008334:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  tmp = 0xFF;
 8008338:	f807 6d0d 	strb.w	r6, [r7, #-13]!
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800833c:	2301      	movs	r3, #1
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 800833e:	c403      	stmia	r4!, {r0, r1}
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8008340:	4628      	mov	r0, r5
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 8008342:	7022      	strb	r2, [r4, #0]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8008344:	f245 0101 	movw	r1, #20481	; 0x5001
 8008348:	463a      	mov	r2, r7
 800834a:	f000 fdd5 	bl	8008ef8 <ov5640_write_reg>
  if (ret == OV5640_OK)
 800834e:	b110      	cbz	r0, 8008356 <OV5640_SetBrightness+0x36>
}
 8008350:	b004      	add	sp, #16
 8008352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmp = brightness_level[Level + 4];
 8008356:	a804      	add	r0, sp, #16
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL7, &tmp, 1);
 8008358:	2301      	movs	r3, #1
 800835a:	463a      	mov	r2, r7
 800835c:	f245 5187 	movw	r1, #21895	; 0x5587
    tmp = brightness_level[Level + 4];
 8008360:	4440      	add	r0, r8
 8008362:	f810 4c08 	ldrb.w	r4, [r0, #-8]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL7, &tmp, 1);
 8008366:	4628      	mov	r0, r5
    tmp = brightness_level[Level + 4];
 8008368:	f88d 4003 	strb.w	r4, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL7, &tmp, 1);
 800836c:	f000 fdc4 	bl	8008ef8 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8008370:	2800      	cmp	r0, #0
 8008372:	d1ed      	bne.n	8008350 <OV5640_SetBrightness+0x30>
    tmp = 0x04;
 8008374:	2404      	movs	r4, #4
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8008376:	2301      	movs	r3, #1
 8008378:	463a      	mov	r2, r7
 800837a:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800837e:	4628      	mov	r0, r5
    tmp = 0x04;
 8008380:	f88d 4003 	strb.w	r4, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8008384:	f000 fdb8 	bl	8008ef8 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8008388:	2800      	cmp	r0, #0
 800838a:	d1e1      	bne.n	8008350 <OV5640_SetBrightness+0x30>
    if (Level < 0)
 800838c:	f1b8 0f00 	cmp.w	r8, #0
 8008390:	db10      	blt.n	80083b4 <OV5640_SetBrightness+0x94>
      tmp = 0x09;
 8008392:	2409      	movs	r4, #9
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 8008394:	463a      	mov	r2, r7
 8008396:	4628      	mov	r0, r5
 8008398:	2301      	movs	r3, #1
 800839a:	f245 5188 	movw	r1, #21896	; 0x5588
      tmp = 0x09;
 800839e:	f88d 4003 	strb.w	r4, [sp, #3]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 80083a2:	f000 fda9 	bl	8008ef8 <ov5640_write_reg>
 80083a6:	3000      	adds	r0, #0
 80083a8:	bf18      	it	ne
 80083aa:	2001      	movne	r0, #1
 80083ac:	4240      	negs	r0, r0
}
 80083ae:	b004      	add	sp, #16
 80083b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmp = 0x01;
 80083b4:	2401      	movs	r4, #1
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 80083b6:	463a      	mov	r2, r7
 80083b8:	4628      	mov	r0, r5
 80083ba:	f245 5188 	movw	r1, #21896	; 0x5588
 80083be:	4623      	mov	r3, r4
 80083c0:	e7ed      	b.n	800839e <OV5640_SetBrightness+0x7e>
 80083c2:	bf00      	nop
 80083c4:	08028940 	.word	0x08028940

080083c8 <OV5640_SetSaturation>:
{
 80083c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 80083cc:	4b27      	ldr	r3, [pc, #156]	; (800846c <OV5640_SetSaturation+0xa4>)
{
 80083ce:	b084      	sub	sp, #16
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80083d0:	f100 0518 	add.w	r5, r0, #24
{
 80083d4:	4688      	mov	r8, r1
  tmp = 0xFF;
 80083d6:	af04      	add	r7, sp, #16
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 80083d8:	ac01      	add	r4, sp, #4
  tmp = 0xFF;
 80083da:	26ff      	movs	r6, #255	; 0xff
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 80083dc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  tmp = 0xFF;
 80083e0:	f807 6d0d 	strb.w	r6, [r7, #-13]!
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80083e4:	2301      	movs	r3, #1
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 80083e6:	c403      	stmia	r4!, {r0, r1}
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80083e8:	4628      	mov	r0, r5
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 80083ea:	7022      	strb	r2, [r4, #0]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80083ec:	f245 0101 	movw	r1, #20481	; 0x5001
 80083f0:	463a      	mov	r2, r7
 80083f2:	f000 fd81 	bl	8008ef8 <ov5640_write_reg>
  if (ret == OV5640_OK)
 80083f6:	b120      	cbz	r0, 8008402 <OV5640_SetSaturation+0x3a>
    ret = OV5640_ERROR;
 80083f8:	f04f 30ff 	mov.w	r0, #4294967295
}
 80083fc:	b004      	add	sp, #16
 80083fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmp = saturation_level[Level + 4];
 8008402:	ab04      	add	r3, sp, #16
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8008404:	463a      	mov	r2, r7
 8008406:	f245 5183 	movw	r1, #21891	; 0x5583
 800840a:	4628      	mov	r0, r5
    tmp = saturation_level[Level + 4];
 800840c:	4498      	add	r8, r3
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 800840e:	2301      	movs	r3, #1
    tmp = saturation_level[Level + 4];
 8008410:	f818 4c08 	ldrb.w	r4, [r8, #-8]
 8008414:	f88d 4003 	strb.w	r4, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8008418:	f000 fd6e 	bl	8008ef8 <ov5640_write_reg>
  if (ret == OV5640_OK)
 800841c:	2800      	cmp	r0, #0
 800841e:	d1eb      	bne.n	80083f8 <OV5640_SetSaturation+0x30>
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8008420:	2301      	movs	r3, #1
 8008422:	463a      	mov	r2, r7
 8008424:	f245 5184 	movw	r1, #21892	; 0x5584
 8008428:	4628      	mov	r0, r5
 800842a:	f000 fd65 	bl	8008ef8 <ov5640_write_reg>
  if (ret == OV5640_OK)
 800842e:	2800      	cmp	r0, #0
 8008430:	d1e2      	bne.n	80083f8 <OV5640_SetSaturation+0x30>
    tmp = 0x02;
 8008432:	2402      	movs	r4, #2
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8008434:	2301      	movs	r3, #1
 8008436:	463a      	mov	r2, r7
 8008438:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800843c:	4628      	mov	r0, r5
    tmp = 0x02;
 800843e:	f88d 4003 	strb.w	r4, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8008442:	f000 fd59 	bl	8008ef8 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8008446:	2800      	cmp	r0, #0
 8008448:	d1d6      	bne.n	80083f8 <OV5640_SetSaturation+0x30>
    tmp = 0x41;
 800844a:	2441      	movs	r4, #65	; 0x41
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 800844c:	463a      	mov	r2, r7
 800844e:	4628      	mov	r0, r5
 8008450:	2301      	movs	r3, #1
 8008452:	f245 5188 	movw	r1, #21896	; 0x5588
    tmp = 0x41;
 8008456:	f88d 4003 	strb.w	r4, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 800845a:	f000 fd4d 	bl	8008ef8 <ov5640_write_reg>
  if (ret != OV5640_OK)
 800845e:	3000      	adds	r0, #0
 8008460:	bf18      	it	ne
 8008462:	2001      	movne	r0, #1
 8008464:	4240      	negs	r0, r0
}
 8008466:	b004      	add	sp, #16
 8008468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800846c:	0802894c 	.word	0x0802894c

08008470 <OV5640_SetContrast>:
{
 8008470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 8008474:	4b27      	ldr	r3, [pc, #156]	; (8008514 <OV5640_SetContrast+0xa4>)
{
 8008476:	b084      	sub	sp, #16
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8008478:	f100 0518 	add.w	r5, r0, #24
{
 800847c:	4688      	mov	r8, r1
  tmp = 0xFF;
 800847e:	af04      	add	r7, sp, #16
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 8008480:	ac01      	add	r4, sp, #4
  tmp = 0xFF;
 8008482:	26ff      	movs	r6, #255	; 0xff
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 8008484:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  tmp = 0xFF;
 8008488:	f807 6d0d 	strb.w	r6, [r7, #-13]!
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800848c:	2301      	movs	r3, #1
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 800848e:	c403      	stmia	r4!, {r0, r1}
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8008490:	4628      	mov	r0, r5
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 8008492:	7022      	strb	r2, [r4, #0]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8008494:	f245 0101 	movw	r1, #20481	; 0x5001
 8008498:	463a      	mov	r2, r7
 800849a:	f000 fd2d 	bl	8008ef8 <ov5640_write_reg>
  if (ret == OV5640_OK)
 800849e:	b120      	cbz	r0, 80084aa <OV5640_SetContrast+0x3a>
    ret = OV5640_ERROR;
 80084a0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80084a4:	b004      	add	sp, #16
 80084a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmp = 0x04;
 80084aa:	2404      	movs	r4, #4
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80084ac:	2301      	movs	r3, #1
 80084ae:	463a      	mov	r2, r7
 80084b0:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80084b4:	4628      	mov	r0, r5
    tmp = 0x04;
 80084b6:	f88d 4003 	strb.w	r4, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80084ba:	f000 fd1d 	bl	8008ef8 <ov5640_write_reg>
  if (ret == OV5640_OK)
 80084be:	2800      	cmp	r0, #0
 80084c0:	d1ee      	bne.n	80084a0 <OV5640_SetContrast+0x30>
    tmp = contrast_level[Level + 4];
 80084c2:	ab04      	add	r3, sp, #16
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL6, &tmp, 1);
 80084c4:	463a      	mov	r2, r7
 80084c6:	f245 5186 	movw	r1, #21894	; 0x5586
 80084ca:	4628      	mov	r0, r5
    tmp = contrast_level[Level + 4];
 80084cc:	4498      	add	r8, r3
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL6, &tmp, 1);
 80084ce:	2301      	movs	r3, #1
    tmp = contrast_level[Level + 4];
 80084d0:	f818 4c08 	ldrb.w	r4, [r8, #-8]
 80084d4:	f88d 4003 	strb.w	r4, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL6, &tmp, 1);
 80084d8:	f000 fd0e 	bl	8008ef8 <ov5640_write_reg>
  if (ret == OV5640_OK)
 80084dc:	2800      	cmp	r0, #0
 80084de:	d1df      	bne.n	80084a0 <OV5640_SetContrast+0x30>
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL5, &tmp, 1);
 80084e0:	2301      	movs	r3, #1
 80084e2:	463a      	mov	r2, r7
 80084e4:	f245 5185 	movw	r1, #21893	; 0x5585
 80084e8:	4628      	mov	r0, r5
 80084ea:	f000 fd05 	bl	8008ef8 <ov5640_write_reg>
  if (ret == OV5640_OK)
 80084ee:	2800      	cmp	r0, #0
 80084f0:	d1d6      	bne.n	80084a0 <OV5640_SetContrast+0x30>
    tmp = 0x41;
 80084f2:	2441      	movs	r4, #65	; 0x41
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 80084f4:	463a      	mov	r2, r7
 80084f6:	4628      	mov	r0, r5
 80084f8:	2301      	movs	r3, #1
 80084fa:	f245 5188 	movw	r1, #21896	; 0x5588
    tmp = 0x41;
 80084fe:	f88d 4003 	strb.w	r4, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8008502:	f000 fcf9 	bl	8008ef8 <ov5640_write_reg>
  if (ret != OV5640_OK)
 8008506:	3000      	adds	r0, #0
 8008508:	bf18      	it	ne
 800850a:	2001      	movne	r0, #1
 800850c:	4240      	negs	r0, r0
}
 800850e:	b004      	add	sp, #16
 8008510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008514:	08028958 	.word	0x08028958

08008518 <OV5640_SetHueDegree>:
{
 8008518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 800851c:	4c31      	ldr	r4, [pc, #196]	; (80085e4 <OV5640_SetHueDegree+0xcc>)
{
 800851e:	b08a      	sub	sp, #40	; 0x28
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8008520:	f100 0518 	add.w	r5, r0, #24
{
 8008524:	4688      	mov	r8, r1
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 8008526:	f104 060c 	add.w	r6, r4, #12
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 800852a:	af01      	add	r7, sp, #4
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 800852c:	ab04      	add	r3, sp, #16
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 800852e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
  const uint8_t hue_degree_ctrl8[] = {0x32U, 0x32U, 0x32U, 0x02U, 0x02U, 0x02U, 0x01U, 0x01U, 0x01U, 0x31U, 0x31U,
 8008532:	3418      	adds	r4, #24
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 8008534:	e887 0007 	stmia.w	r7, {r0, r1, r2}
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 8008538:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
  tmp = 0xFF;
 800853c:	27ff      	movs	r7, #255	; 0xff
 800853e:	ae0a      	add	r6, sp, #40	; 0x28
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 8008540:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  const uint8_t hue_degree_ctrl8[] = {0x32U, 0x32U, 0x32U, 0x02U, 0x02U, 0x02U, 0x01U, 0x01U, 0x01U, 0x31U, 0x31U,
 8008544:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8008548:	ac0a      	add	r4, sp, #40	; 0x28
  tmp = 0xFF;
 800854a:	f806 7d25 	strb.w	r7, [r6, #-37]!
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800854e:	2301      	movs	r3, #1
  const uint8_t hue_degree_ctrl8[] = {0x32U, 0x32U, 0x32U, 0x02U, 0x02U, 0x02U, 0x01U, 0x01U, 0x01U, 0x31U, 0x31U,
 8008550:	e904 0007 	stmdb	r4, {r0, r1, r2}
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8008554:	4628      	mov	r0, r5
 8008556:	4632      	mov	r2, r6
 8008558:	f245 0101 	movw	r1, #20481	; 0x5001
 800855c:	f000 fccc 	bl	8008ef8 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8008560:	b120      	cbz	r0, 800856c <OV5640_SetHueDegree+0x54>
    ret = OV5640_ERROR;
 8008562:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008566:	b00a      	add	sp, #40	; 0x28
 8008568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmp = 0x01;
 800856c:	2401      	movs	r4, #1
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800856e:	4632      	mov	r2, r6
 8008570:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8008574:	4628      	mov	r0, r5
 8008576:	4623      	mov	r3, r4
    tmp = 0x01;
 8008578:	f88d 4003 	strb.w	r4, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800857c:	f000 fcbc 	bl	8008ef8 <ov5640_write_reg>
  if (ret == OV5640_OK)
 8008580:	2800      	cmp	r0, #0
 8008582:	d1ee      	bne.n	8008562 <OV5640_SetHueDegree+0x4a>
    tmp = hue_degree_ctrl1[Degree + 6];
 8008584:	a80a      	add	r0, sp, #40	; 0x28
 8008586:	f108 0806 	add.w	r8, r8, #6
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL1, &tmp, 1);
 800858a:	4623      	mov	r3, r4
 800858c:	4632      	mov	r2, r6
    tmp = hue_degree_ctrl1[Degree + 6];
 800858e:	4480      	add	r8, r0
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL1, &tmp, 1);
 8008590:	f245 5181 	movw	r1, #21889	; 0x5581
 8008594:	4628      	mov	r0, r5
    tmp = hue_degree_ctrl1[Degree + 6];
 8008596:	f818 7c24 	ldrb.w	r7, [r8, #-36]
 800859a:	f88d 7003 	strb.w	r7, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL1, &tmp, 1);
 800859e:	f000 fcab 	bl	8008ef8 <ov5640_write_reg>
  if (ret == OV5640_OK)
 80085a2:	2800      	cmp	r0, #0
 80085a4:	d1dd      	bne.n	8008562 <OV5640_SetHueDegree+0x4a>
    tmp = hue_degree_ctrl2[Degree + 6];
 80085a6:	f818 7c18 	ldrb.w	r7, [r8, #-24]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL2, &tmp, 1);
 80085aa:	4623      	mov	r3, r4
 80085ac:	4632      	mov	r2, r6
 80085ae:	f245 5182 	movw	r1, #21890	; 0x5582
 80085b2:	4628      	mov	r0, r5
    tmp = hue_degree_ctrl2[Degree + 6];
 80085b4:	f88d 7003 	strb.w	r7, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL2, &tmp, 1);
 80085b8:	f000 fc9e 	bl	8008ef8 <ov5640_write_reg>
  if (ret == OV5640_OK)
 80085bc:	2800      	cmp	r0, #0
 80085be:	d1d0      	bne.n	8008562 <OV5640_SetHueDegree+0x4a>
    tmp = hue_degree_ctrl8[Degree + 6];
 80085c0:	f818 7c0c 	ldrb.w	r7, [r8, #-12]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 80085c4:	4623      	mov	r3, r4
 80085c6:	4632      	mov	r2, r6
 80085c8:	4628      	mov	r0, r5
 80085ca:	f245 5188 	movw	r1, #21896	; 0x5588
    tmp = hue_degree_ctrl8[Degree + 6];
 80085ce:	f88d 7003 	strb.w	r7, [sp, #3]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 80085d2:	f000 fc91 	bl	8008ef8 <ov5640_write_reg>
  if (ret != OV5640_OK)
 80085d6:	3000      	adds	r0, #0
 80085d8:	bf18      	it	ne
 80085da:	2001      	movne	r0, #1
 80085dc:	4240      	negs	r0, r0
}
 80085de:	b00a      	add	sp, #40	; 0x28
 80085e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085e4:	08028964 	.word	0x08028964

080085e8 <OV5640_SetPixelFormat>:
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 80085e8:	2902      	cmp	r1, #2
{
 80085ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085ee:	b082      	sub	sp, #8
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 80085f0:	d902      	bls.n	80085f8 <OV5640_SetPixelFormat+0x10>
      (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 80085f2:	1fcb      	subs	r3, r1, #7
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d854      	bhi.n	80086a2 <OV5640_SetPixelFormat+0xba>
    switch (PixelFormat)
 80085f8:	3901      	subs	r1, #1
 80085fa:	4604      	mov	r4, r0
 80085fc:	f100 0618 	add.w	r6, r0, #24
 8008600:	2907      	cmp	r1, #7
 8008602:	f200 80fb 	bhi.w	80087fc <OV5640_SetPixelFormat+0x214>
 8008606:	e8df f011 	tbh	[pc, r1, lsl #1]
 800860a:	007b      	.short	0x007b
 800860c:	00f900a7 	.word	0x00f900a7
 8008610:	00f900f9 	.word	0x00f900f9
 8008614:	00cf00f9 	.word	0x00cf00f9
 8008618:	0052      	.short	0x0052
              ret = OV5640_ERROR;
 800861a:	f04f 37ff 	mov.w	r7, #4294967295
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 800861e:	2301      	movs	r3, #1
 8008620:	462a      	mov	r2, r5
 8008622:	f643 0121 	movw	r1, #14369	; 0x3821
 8008626:	4630      	mov	r0, r6
 8008628:	f000 fc5e 	bl	8008ee8 <ov5640_read_reg>
 800862c:	bbc8      	cbnz	r0, 80086a2 <OV5640_SetPixelFormat+0xba>
        tmp |= (1 << 5);
 800862e:	f89d 4007 	ldrb.w	r4, [sp, #7]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8008632:	2301      	movs	r3, #1
 8008634:	462a      	mov	r2, r5
 8008636:	f643 0121 	movw	r1, #14369	; 0x3821
        tmp |= (1 << 5);
 800863a:	f044 0420 	orr.w	r4, r4, #32
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 800863e:	4630      	mov	r0, r6
        tmp |= (1 << 5);
 8008640:	f88d 4007 	strb.w	r4, [sp, #7]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8008644:	f000 fc58 	bl	8008ef8 <ov5640_write_reg>
 8008648:	bb58      	cbnz	r0, 80086a2 <OV5640_SetPixelFormat+0xba>
          if (ov5640_read_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 800864a:	2301      	movs	r3, #1
 800864c:	462a      	mov	r2, r5
 800864e:	f243 0102 	movw	r1, #12290	; 0x3002
 8008652:	4630      	mov	r0, r6
 8008654:	f000 fc48 	bl	8008ee8 <ov5640_read_reg>
 8008658:	bb18      	cbnz	r0, 80086a2 <OV5640_SetPixelFormat+0xba>
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 800865a:	f89d 4007 	ldrb.w	r4, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 800865e:	2301      	movs	r3, #1
 8008660:	462a      	mov	r2, r5
 8008662:	f243 0102 	movw	r1, #12290	; 0x3002
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 8008666:	f024 041c 	bic.w	r4, r4, #28
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 800866a:	4630      	mov	r0, r6
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 800866c:	f88d 4007 	strb.w	r4, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8008670:	f000 fc42 	bl	8008ef8 <ov5640_write_reg>
 8008674:	b9a8      	cbnz	r0, 80086a2 <OV5640_SetPixelFormat+0xba>
              if (ov5640_read_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8008676:	2301      	movs	r3, #1
 8008678:	462a      	mov	r2, r5
 800867a:	f243 0106 	movw	r1, #12294	; 0x3006
 800867e:	4630      	mov	r0, r6
 8008680:	f000 fc32 	bl	8008ee8 <ov5640_read_reg>
 8008684:	b968      	cbnz	r0, 80086a2 <OV5640_SetPixelFormat+0xba>
                tmp |= ((1 << 5) | (1 << 3));
 8008686:	f89d 4007 	ldrb.w	r4, [sp, #7]
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 800868a:	462a      	mov	r2, r5
 800868c:	4630      	mov	r0, r6
 800868e:	2301      	movs	r3, #1
                tmp |= ((1 << 5) | (1 << 3));
 8008690:	f044 0428 	orr.w	r4, r4, #40	; 0x28
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8008694:	f243 0106 	movw	r1, #12294	; 0x3006
                tmp |= ((1 << 5) | (1 << 3));
 8008698:	f88d 4007 	strb.w	r4, [sp, #7]
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 800869c:	f000 fc2c 	bl	8008ef8 <ov5640_write_reg>
 80086a0:	b108      	cbz	r0, 80086a6 <OV5640_SetPixelFormat+0xbe>
              ret = OV5640_ERROR;
 80086a2:	f04f 37ff 	mov.w	r7, #4294967295
}
 80086a6:	4638      	mov	r0, r7
 80086a8:	b002      	add	sp, #8
 80086aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 80086ae:	2230      	movs	r2, #48	; 0x30
 80086b0:	ad02      	add	r5, sp, #8
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 80086b2:	2301      	movs	r3, #1
 80086b4:	f44f 4186 	mov.w	r1, #17152	; 0x4300
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 80086b8:	f805 2d01 	strb.w	r2, [r5, #-1]!
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 80086bc:	4630      	mov	r0, r6
 80086be:	462a      	mov	r2, r5
 80086c0:	f000 fc1a 	bl	8008ef8 <ov5640_write_reg>
 80086c4:	2800      	cmp	r0, #0
 80086c6:	d1a8      	bne.n	800861a <OV5640_SetPixelFormat+0x32>
  tickstart = pObj->IO.GetTick();
 80086c8:	6963      	ldr	r3, [r4, #20]
 80086ca:	4798      	blx	r3
 80086cc:	4607      	mov	r7, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 80086ce:	6963      	ldr	r3, [r4, #20]
 80086d0:	4798      	blx	r3
 80086d2:	4287      	cmp	r7, r0
 80086d4:	d0fb      	beq.n	80086ce <OV5640_SetPixelFormat+0xe6>
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 80086d6:	2700      	movs	r7, #0
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 80086d8:	2301      	movs	r3, #1
 80086da:	462a      	mov	r2, r5
 80086dc:	f245 011f 	movw	r1, #20511	; 0x501f
 80086e0:	4630      	mov	r0, r6
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 80086e2:	f88d 7007 	strb.w	r7, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 80086e6:	f000 fc07 	bl	8008ef8 <ov5640_write_reg>
 80086ea:	4607      	mov	r7, r0
 80086ec:	2800      	cmp	r0, #0
 80086ee:	d194      	bne.n	800861a <OV5640_SetPixelFormat+0x32>
  tickstart = pObj->IO.GetTick();
 80086f0:	6963      	ldr	r3, [r4, #20]
 80086f2:	4798      	blx	r3
 80086f4:	4680      	mov	r8, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 80086f6:	6963      	ldr	r3, [r4, #20]
 80086f8:	4798      	blx	r3
 80086fa:	4580      	cmp	r8, r0
 80086fc:	d0fb      	beq.n	80086f6 <OV5640_SetPixelFormat+0x10e>
 80086fe:	e78e      	b.n	800861e <OV5640_SetPixelFormat+0x36>
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 8008700:	2223      	movs	r2, #35	; 0x23
 8008702:	ad02      	add	r5, sp, #8
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 8008704:	2301      	movs	r3, #1
 8008706:	f44f 4186 	mov.w	r1, #17152	; 0x4300
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 800870a:	f805 2d01 	strb.w	r2, [r5, #-1]!
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 800870e:	4630      	mov	r0, r6
 8008710:	462a      	mov	r2, r5
 8008712:	f000 fbf1 	bl	8008ef8 <ov5640_write_reg>
 8008716:	2800      	cmp	r0, #0
 8008718:	d1c3      	bne.n	80086a2 <OV5640_SetPixelFormat+0xba>
  tickstart = pObj->IO.GetTick();
 800871a:	6963      	ldr	r3, [r4, #20]
 800871c:	4798      	blx	r3
 800871e:	4607      	mov	r7, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8008720:	6963      	ldr	r3, [r4, #20]
 8008722:	4798      	blx	r3
 8008724:	42b8      	cmp	r0, r7
 8008726:	d0fb      	beq.n	8008720 <OV5640_SetPixelFormat+0x138>
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 8008728:	2701      	movs	r7, #1
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 800872a:	462a      	mov	r2, r5
 800872c:	4630      	mov	r0, r6
 800872e:	f245 011f 	movw	r1, #20511	; 0x501f
 8008732:	463b      	mov	r3, r7
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 8008734:	f88d 7007 	strb.w	r7, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 8008738:	f000 fbde 	bl	8008ef8 <ov5640_write_reg>
 800873c:	2800      	cmp	r0, #0
 800873e:	d1b0      	bne.n	80086a2 <OV5640_SetPixelFormat+0xba>
  tickstart = pObj->IO.GetTick();
 8008740:	6963      	ldr	r3, [r4, #20]
 8008742:	4798      	blx	r3
 8008744:	4605      	mov	r5, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8008746:	6963      	ldr	r3, [r4, #20]
 8008748:	4798      	blx	r3
 800874a:	4285      	cmp	r5, r0
 800874c:	d0fb      	beq.n	8008746 <OV5640_SetPixelFormat+0x15e>
                  ret = OV5640_ERROR;
 800874e:	2700      	movs	r7, #0
}
 8008750:	4638      	mov	r0, r7
 8008752:	b002      	add	sp, #8
 8008754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 8008758:	2230      	movs	r2, #48	; 0x30
 800875a:	ad02      	add	r5, sp, #8
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 800875c:	2301      	movs	r3, #1
 800875e:	f44f 4186 	mov.w	r1, #17152	; 0x4300
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 8008762:	f805 2d01 	strb.w	r2, [r5, #-1]!
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 8008766:	4630      	mov	r0, r6
 8008768:	462a      	mov	r2, r5
 800876a:	f000 fbc5 	bl	8008ef8 <ov5640_write_reg>
 800876e:	2800      	cmp	r0, #0
 8008770:	d197      	bne.n	80086a2 <OV5640_SetPixelFormat+0xba>
  tickstart = pObj->IO.GetTick();
 8008772:	6963      	ldr	r3, [r4, #20]
 8008774:	4798      	blx	r3
 8008776:	4607      	mov	r7, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8008778:	6963      	ldr	r3, [r4, #20]
 800877a:	4798      	blx	r3
 800877c:	4287      	cmp	r7, r0
 800877e:	d0fb      	beq.n	8008778 <OV5640_SetPixelFormat+0x190>
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 8008780:	2700      	movs	r7, #0
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 8008782:	462a      	mov	r2, r5
 8008784:	4630      	mov	r0, r6
 8008786:	2301      	movs	r3, #1
 8008788:	f245 011f 	movw	r1, #20511	; 0x501f
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 800878c:	f88d 7007 	strb.w	r7, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 8008790:	f000 fbb2 	bl	8008ef8 <ov5640_write_reg>
 8008794:	2800      	cmp	r0, #0
 8008796:	d184      	bne.n	80086a2 <OV5640_SetPixelFormat+0xba>
  tickstart = pObj->IO.GetTick();
 8008798:	6963      	ldr	r3, [r4, #20]
 800879a:	4798      	blx	r3
 800879c:	4605      	mov	r5, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 800879e:	6963      	ldr	r3, [r4, #20]
 80087a0:	4798      	blx	r3
 80087a2:	4285      	cmp	r5, r0
 80087a4:	d0fb      	beq.n	800879e <OV5640_SetPixelFormat+0x1b6>
 80087a6:	e7d2      	b.n	800874e <OV5640_SetPixelFormat+0x166>
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 80087a8:	2210      	movs	r2, #16
 80087aa:	ad02      	add	r5, sp, #8
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 80087ac:	2301      	movs	r3, #1
 80087ae:	f44f 4186 	mov.w	r1, #17152	; 0x4300
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 80087b2:	f805 2d01 	strb.w	r2, [r5, #-1]!
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 80087b6:	4630      	mov	r0, r6
 80087b8:	462a      	mov	r2, r5
 80087ba:	f000 fb9d 	bl	8008ef8 <ov5640_write_reg>
 80087be:	2800      	cmp	r0, #0
 80087c0:	f47f af6f 	bne.w	80086a2 <OV5640_SetPixelFormat+0xba>
  tickstart = pObj->IO.GetTick();
 80087c4:	6963      	ldr	r3, [r4, #20]
 80087c6:	4798      	blx	r3
 80087c8:	4607      	mov	r7, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 80087ca:	6963      	ldr	r3, [r4, #20]
 80087cc:	4798      	blx	r3
 80087ce:	42b8      	cmp	r0, r7
 80087d0:	d0fb      	beq.n	80087ca <OV5640_SetPixelFormat+0x1e2>
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 80087d2:	2700      	movs	r7, #0
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 80087d4:	462a      	mov	r2, r5
 80087d6:	4630      	mov	r0, r6
 80087d8:	2301      	movs	r3, #1
 80087da:	f245 011f 	movw	r1, #20511	; 0x501f
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 80087de:	f88d 7007 	strb.w	r7, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 80087e2:	f000 fb89 	bl	8008ef8 <ov5640_write_reg>
 80087e6:	2800      	cmp	r0, #0
 80087e8:	f47f af5b 	bne.w	80086a2 <OV5640_SetPixelFormat+0xba>
  tickstart = pObj->IO.GetTick();
 80087ec:	6963      	ldr	r3, [r4, #20]
 80087ee:	4798      	blx	r3
 80087f0:	4605      	mov	r5, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 80087f2:	6963      	ldr	r3, [r4, #20]
 80087f4:	4798      	blx	r3
 80087f6:	4285      	cmp	r5, r0
 80087f8:	d0fb      	beq.n	80087f2 <OV5640_SetPixelFormat+0x20a>
 80087fa:	e7a8      	b.n	800874e <OV5640_SetPixelFormat+0x166>
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 80087fc:	226f      	movs	r2, #111	; 0x6f
 80087fe:	ad02      	add	r5, sp, #8
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 8008800:	2301      	movs	r3, #1
 8008802:	f44f 4186 	mov.w	r1, #17152	; 0x4300
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 8008806:	f805 2d01 	strb.w	r2, [r5, #-1]!
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 800880a:	4630      	mov	r0, r6
 800880c:	462a      	mov	r2, r5
 800880e:	f000 fb73 	bl	8008ef8 <ov5640_write_reg>
 8008812:	2800      	cmp	r0, #0
 8008814:	f47f af45 	bne.w	80086a2 <OV5640_SetPixelFormat+0xba>
  tickstart = pObj->IO.GetTick();
 8008818:	6963      	ldr	r3, [r4, #20]
 800881a:	4798      	blx	r3
 800881c:	4607      	mov	r7, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 800881e:	6963      	ldr	r3, [r4, #20]
 8008820:	4798      	blx	r3
 8008822:	42b8      	cmp	r0, r7
 8008824:	d0fb      	beq.n	800881e <OV5640_SetPixelFormat+0x236>
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 8008826:	2701      	movs	r7, #1
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 8008828:	462a      	mov	r2, r5
 800882a:	4630      	mov	r0, r6
 800882c:	f245 011f 	movw	r1, #20511	; 0x501f
 8008830:	463b      	mov	r3, r7
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 8008832:	f88d 7007 	strb.w	r7, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 8008836:	f000 fb5f 	bl	8008ef8 <ov5640_write_reg>
 800883a:	4607      	mov	r7, r0
 800883c:	2800      	cmp	r0, #0
 800883e:	f47f af30 	bne.w	80086a2 <OV5640_SetPixelFormat+0xba>
  tickstart = pObj->IO.GetTick();
 8008842:	6963      	ldr	r3, [r4, #20]
 8008844:	4798      	blx	r3
 8008846:	4605      	mov	r5, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8008848:	6963      	ldr	r3, [r4, #20]
 800884a:	4798      	blx	r3
 800884c:	4285      	cmp	r5, r0
 800884e:	d0fb      	beq.n	8008848 <OV5640_SetPixelFormat+0x260>
 8008850:	e729      	b.n	80086a6 <OV5640_SetPixelFormat+0xbe>
 8008852:	bf00      	nop

08008854 <OV5640_GetResolution>:
{
 8008854:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_HIGH, &tmp, 1) != OV5640_OK)
 8008856:	f100 0618 	add.w	r6, r0, #24
{
 800885a:	b083      	sub	sp, #12
 800885c:	460f      	mov	r7, r1
  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_HIGH, &tmp, 1) != OV5640_OK)
 800885e:	2301      	movs	r3, #1
 8008860:	4630      	mov	r0, r6
 8008862:	f10d 0207 	add.w	r2, sp, #7
 8008866:	f643 0108 	movw	r1, #14344	; 0x3808
 800886a:	f000 fb3d 	bl	8008ee8 <ov5640_read_reg>
 800886e:	2800      	cmp	r0, #0
 8008870:	d150      	bne.n	8008914 <OV5640_GetResolution+0xc0>
    x_size = (uint16_t)tmp << 8U;
 8008872:	f89d 4007 	ldrb.w	r4, [sp, #7]
    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_LOW, &tmp, 1) != OV5640_OK)
 8008876:	2301      	movs	r3, #1
 8008878:	f10d 0207 	add.w	r2, sp, #7
 800887c:	f643 0109 	movw	r1, #14345	; 0x3809
 8008880:	4630      	mov	r0, r6
    x_size = (uint16_t)tmp << 8U;
 8008882:	0224      	lsls	r4, r4, #8
    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_LOW, &tmp, 1) != OV5640_OK)
 8008884:	f000 fb30 	bl	8008ee8 <ov5640_read_reg>
 8008888:	2800      	cmp	r0, #0
 800888a:	d143      	bne.n	8008914 <OV5640_GetResolution+0xc0>
      x_size |= tmp;
 800888c:	f89d 5007 	ldrb.w	r5, [sp, #7]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_HIGH, &tmp, 1) != OV5640_OK)
 8008890:	2301      	movs	r3, #1
 8008892:	f10d 0207 	add.w	r2, sp, #7
 8008896:	f643 010a 	movw	r1, #14346	; 0x380a
 800889a:	4630      	mov	r0, r6
      x_size |= tmp;
 800889c:	432c      	orrs	r4, r5
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_HIGH, &tmp, 1) != OV5640_OK)
 800889e:	f000 fb23 	bl	8008ee8 <ov5640_read_reg>
 80088a2:	bbb8      	cbnz	r0, 8008914 <OV5640_GetResolution+0xc0>
        y_size = (uint16_t)tmp << 8U;
 80088a4:	f89d 5007 	ldrb.w	r5, [sp, #7]
        if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_LOW, &tmp, 1) != OV5640_OK)
 80088a8:	f10d 0207 	add.w	r2, sp, #7
 80088ac:	4630      	mov	r0, r6
 80088ae:	2301      	movs	r3, #1
 80088b0:	f643 010b 	movw	r1, #14347	; 0x380b
        y_size = (uint16_t)tmp << 8U;
 80088b4:	022d      	lsls	r5, r5, #8
        if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_LOW, &tmp, 1) != OV5640_OK)
 80088b6:	f000 fb17 	bl	8008ee8 <ov5640_read_reg>
 80088ba:	bb58      	cbnz	r0, 8008914 <OV5640_GetResolution+0xc0>
          y_size |= tmp;
 80088bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
          if ((x_size == 800U) && (y_size == 480U))
 80088c0:	f5b4 7f48 	cmp.w	r4, #800	; 0x320
          y_size |= tmp;
 80088c4:	ea43 0305 	orr.w	r3, r3, r5
          if ((x_size == 800U) && (y_size == 480U))
 80088c8:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 80088cc:	fab2 f282 	clz	r2, r2
 80088d0:	ea4f 1252 	mov.w	r2, r2, lsr #5
 80088d4:	d104      	bne.n	80088e0 <OV5640_GetResolution+0x8c>
 80088d6:	b11a      	cbz	r2, 80088e0 <OV5640_GetResolution+0x8c>
            *Resolution = OV5640_R800x480;
 80088d8:	2304      	movs	r3, #4
 80088da:	603b      	str	r3, [r7, #0]
}
 80088dc:	b003      	add	sp, #12
 80088de:	bdf0      	pop	{r4, r5, r6, r7, pc}
          else if ((x_size == 640U) && (y_size == 480U))
 80088e0:	f5b4 7f20 	cmp.w	r4, #640	; 0x280
 80088e4:	d104      	bne.n	80088f0 <OV5640_GetResolution+0x9c>
 80088e6:	b11a      	cbz	r2, 80088f0 <OV5640_GetResolution+0x9c>
            *Resolution = OV5640_R640x480;
 80088e8:	2303      	movs	r3, #3
 80088ea:	603b      	str	r3, [r7, #0]
}
 80088ec:	b003      	add	sp, #12
 80088ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
          else if ((x_size == 480U) && (y_size == 272U))
 80088f0:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
 80088f4:	d106      	bne.n	8008904 <OV5640_GetResolution+0xb0>
 80088f6:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 80088fa:	d103      	bne.n	8008904 <OV5640_GetResolution+0xb0>
            *Resolution = OV5640_R480x272;
 80088fc:	2302      	movs	r3, #2
 80088fe:	603b      	str	r3, [r7, #0]
}
 8008900:	b003      	add	sp, #12
 8008902:	bdf0      	pop	{r4, r5, r6, r7, pc}
          else if ((x_size == 320U) && (y_size == 240U))
 8008904:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
 8008908:	d108      	bne.n	800891c <OV5640_GetResolution+0xc8>
 800890a:	2bf0      	cmp	r3, #240	; 0xf0
 800890c:	d106      	bne.n	800891c <OV5640_GetResolution+0xc8>
            *Resolution = OV5640_R320x240;
 800890e:	2301      	movs	r3, #1
 8008910:	603b      	str	r3, [r7, #0]
 8008912:	e7e3      	b.n	80088dc <OV5640_GetResolution+0x88>
    ret = OV5640_ERROR;
 8008914:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008918:	b003      	add	sp, #12
 800891a:	bdf0      	pop	{r4, r5, r6, r7, pc}
          else if ((x_size == 160U) && (y_size == 120U))
 800891c:	2ca0      	cmp	r4, #160	; 0xa0
 800891e:	d1f9      	bne.n	8008914 <OV5640_GetResolution+0xc0>
 8008920:	2b78      	cmp	r3, #120	; 0x78
 8008922:	d1f7      	bne.n	8008914 <OV5640_GetResolution+0xc0>
            *Resolution = OV5640_R160x120;
 8008924:	2300      	movs	r3, #0
 8008926:	603b      	str	r3, [r7, #0]
  return ret;
 8008928:	e7d8      	b.n	80088dc <OV5640_GetResolution+0x88>
 800892a:	bf00      	nop

0800892c <OV5640_ReadID>:
{
 800892c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  pObj->IO.Init();
 8008930:	4606      	mov	r6, r0
{
 8008932:	b082      	sub	sp, #8
 8008934:	4688      	mov	r8, r1
 8008936:	4604      	mov	r4, r0
  pObj->IO.Init();
 8008938:	f856 3b18 	ldr.w	r3, [r6], #24
  tmp = 0x80;
 800893c:	af02      	add	r7, sp, #8
  pObj->IO.Init();
 800893e:	4798      	blx	r3
  tmp = 0x80;
 8008940:	2280      	movs	r2, #128	; 0x80
  if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSTEM_CTROL0, &tmp, 1) != OV5640_OK)
 8008942:	4630      	mov	r0, r6
 8008944:	2301      	movs	r3, #1
  tmp = 0x80;
 8008946:	f807 2d01 	strb.w	r2, [r7, #-1]!
  if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSTEM_CTROL0, &tmp, 1) != OV5640_OK)
 800894a:	f243 0108 	movw	r1, #12296	; 0x3008
 800894e:	463a      	mov	r2, r7
 8008950:	f000 fad2 	bl	8008ef8 <ov5640_write_reg>
 8008954:	bb38      	cbnz	r0, 80089a6 <OV5640_ReadID+0x7a>
  tickstart = pObj->IO.GetTick();
 8008956:	6963      	ldr	r3, [r4, #20]
 8008958:	4798      	blx	r3
 800895a:	4605      	mov	r5, r0
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 800895c:	6963      	ldr	r3, [r4, #20]
 800895e:	4798      	blx	r3
 8008960:	1b40      	subs	r0, r0, r5
 8008962:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8008966:	d3f9      	bcc.n	800895c <OV5640_ReadID+0x30>
    if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_HIGH_BYTE, &tmp, 1) != OV5640_OK)
 8008968:	2301      	movs	r3, #1
 800896a:	463a      	mov	r2, r7
 800896c:	f243 010a 	movw	r1, #12298	; 0x300a
 8008970:	4630      	mov	r0, r6
 8008972:	f000 fab9 	bl	8008ee8 <ov5640_read_reg>
 8008976:	b9b0      	cbnz	r0, 80089a6 <OV5640_ReadID+0x7a>
      *Id = (uint32_t)tmp << 8U;
 8008978:	f89d 4007 	ldrb.w	r4, [sp, #7]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 800897c:	463a      	mov	r2, r7
 800897e:	4630      	mov	r0, r6
 8008980:	2301      	movs	r3, #1
      *Id = (uint32_t)tmp << 8U;
 8008982:	0224      	lsls	r4, r4, #8
      if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 8008984:	f243 010b 	movw	r1, #12299	; 0x300b
      *Id = (uint32_t)tmp << 8U;
 8008988:	f8c8 4000 	str.w	r4, [r8]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 800898c:	f000 faac 	bl	8008ee8 <ov5640_read_reg>
 8008990:	b948      	cbnz	r0, 80089a6 <OV5640_ReadID+0x7a>
        *Id |= tmp;
 8008992:	f8d8 3000 	ldr.w	r3, [r8]
 8008996:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800899a:	4313      	orrs	r3, r2
 800899c:	f8c8 3000 	str.w	r3, [r8]
}
 80089a0:	b002      	add	sp, #8
 80089a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = OV5640_ERROR;
 80089a6:	f04f 30ff 	mov.w	r0, #4294967295
 80089aa:	e7f9      	b.n	80089a0 <OV5640_ReadID+0x74>

080089ac <OV5640_MirrorFlipConfig>:
{
 80089ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089ae:	b083      	sub	sp, #12
  uint8_t tmp3820 = 0;
 80089b0:	2200      	movs	r2, #0
  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 80089b2:	f100 0518 	add.w	r5, r0, #24
{
 80089b6:	460f      	mov	r7, r1
  uint8_t tmp3820 = 0;
 80089b8:	ac02      	add	r4, sp, #8
  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 80089ba:	2301      	movs	r3, #1
 80089bc:	4628      	mov	r0, r5
 80089be:	f643 0120 	movw	r1, #14368	; 0x3820
  uint8_t tmp3820 = 0;
 80089c2:	f804 2d02 	strb.w	r2, [r4, #-2]!
  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 80089c6:	4622      	mov	r2, r4
 80089c8:	f000 fa8e 	bl	8008ee8 <ov5640_read_reg>
 80089cc:	2800      	cmp	r0, #0
 80089ce:	d170      	bne.n	8008ab2 <OV5640_MirrorFlipConfig+0x106>
    tmp3820 &= 0xF9U;
 80089d0:	f89d 6006 	ldrb.w	r6, [sp, #6]
    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 80089d4:	2301      	movs	r3, #1
 80089d6:	f643 0121 	movw	r1, #14369	; 0x3821
 80089da:	f10d 0207 	add.w	r2, sp, #7
    tmp3820 &= 0xF9U;
 80089de:	f026 0606 	bic.w	r6, r6, #6
    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 80089e2:	4628      	mov	r0, r5
    tmp3820 &= 0xF9U;
 80089e4:	f88d 6006 	strb.w	r6, [sp, #6]
    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 80089e8:	f000 fa7e 	bl	8008ee8 <ov5640_read_reg>
 80089ec:	2800      	cmp	r0, #0
 80089ee:	d160      	bne.n	8008ab2 <OV5640_MirrorFlipConfig+0x106>
      tmp3821 &= 0xF9U;
 80089f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
      switch (Config)
 80089f4:	2f02      	cmp	r7, #2
      tmp3821 &= 0xF9U;
 80089f6:	f023 0306 	bic.w	r3, r3, #6
 80089fa:	f88d 3007 	strb.w	r3, [sp, #7]
      switch (Config)
 80089fe:	d04f      	beq.n	8008aa0 <OV5640_MirrorFlipConfig+0xf4>
 8008a00:	2f03      	cmp	r7, #3
 8008a02:	d018      	beq.n	8008a36 <OV5640_MirrorFlipConfig+0x8a>
 8008a04:	2f01      	cmp	r7, #1
 8008a06:	d038      	beq.n	8008a7a <OV5640_MirrorFlipConfig+0xce>
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8008a08:	4622      	mov	r2, r4
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	f643 0120 	movw	r1, #14368	; 0x3820
 8008a10:	4628      	mov	r0, r5
 8008a12:	f000 fa71 	bl	8008ef8 <ov5640_write_reg>
 8008a16:	2800      	cmp	r0, #0
 8008a18:	d14b      	bne.n	8008ab2 <OV5640_MirrorFlipConfig+0x106>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8008a1a:	f10d 0207 	add.w	r2, sp, #7
 8008a1e:	4628      	mov	r0, r5
 8008a20:	2301      	movs	r3, #1
 8008a22:	f643 0121 	movw	r1, #14369	; 0x3821
 8008a26:	f000 fa67 	bl	8008ef8 <ov5640_write_reg>
 8008a2a:	3000      	adds	r0, #0
 8008a2c:	bf18      	it	ne
 8008a2e:	2001      	movne	r0, #1
 8008a30:	4240      	negs	r0, r0
}
 8008a32:	b003      	add	sp, #12
 8008a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
          tmp3820 |= 0x06U;
 8008a36:	f89d 0006 	ldrb.w	r0, [sp, #6]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8008a3a:	4622      	mov	r2, r4
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	f643 0120 	movw	r1, #14368	; 0x3820
          tmp3820 |= 0x06U;
 8008a42:	f040 0406 	orr.w	r4, r0, #6
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8008a46:	4628      	mov	r0, r5
          tmp3820 |= 0x06U;
 8008a48:	f88d 4006 	strb.w	r4, [sp, #6]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8008a4c:	f000 fa54 	bl	8008ef8 <ov5640_write_reg>
 8008a50:	bb78      	cbnz	r0, 8008ab2 <OV5640_MirrorFlipConfig+0x106>
            tmp3821 |= 0x06U;
 8008a52:	f89d 4007 	ldrb.w	r4, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8008a56:	f10d 0207 	add.w	r2, sp, #7
 8008a5a:	4628      	mov	r0, r5
 8008a5c:	2301      	movs	r3, #1
            tmp3821 |= 0x06U;
 8008a5e:	f044 0406 	orr.w	r4, r4, #6
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8008a62:	f643 0121 	movw	r1, #14369	; 0x3821
            tmp3821 |= 0x06U;
 8008a66:	f88d 4007 	strb.w	r4, [sp, #7]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8008a6a:	f000 fa45 	bl	8008ef8 <ov5640_write_reg>
 8008a6e:	3000      	adds	r0, #0
 8008a70:	bf18      	it	ne
 8008a72:	2001      	movne	r0, #1
 8008a74:	4240      	negs	r0, r0
}
 8008a76:	b003      	add	sp, #12
 8008a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
          tmp3820 |= 0x06U;
 8008a7a:	f89d 0006 	ldrb.w	r0, [sp, #6]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8008a7e:	4622      	mov	r2, r4
 8008a80:	463b      	mov	r3, r7
 8008a82:	f643 0120 	movw	r1, #14368	; 0x3820
          tmp3820 |= 0x06U;
 8008a86:	f040 0406 	orr.w	r4, r0, #6
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8008a8a:	4628      	mov	r0, r5
          tmp3820 |= 0x06U;
 8008a8c:	f88d 4006 	strb.w	r4, [sp, #6]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8008a90:	f000 fa32 	bl	8008ef8 <ov5640_write_reg>
 8008a94:	b968      	cbnz	r0, 8008ab2 <OV5640_MirrorFlipConfig+0x106>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8008a96:	463b      	mov	r3, r7
 8008a98:	f10d 0207 	add.w	r2, sp, #7
 8008a9c:	4628      	mov	r0, r5
 8008a9e:	e7c0      	b.n	8008a22 <OV5640_MirrorFlipConfig+0x76>
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8008aa0:	4622      	mov	r2, r4
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	f643 0120 	movw	r1, #14368	; 0x3820
 8008aa8:	4628      	mov	r0, r5
 8008aaa:	f000 fa25 	bl	8008ef8 <ov5640_write_reg>
 8008aae:	2800      	cmp	r0, #0
 8008ab0:	d0cf      	beq.n	8008a52 <OV5640_MirrorFlipConfig+0xa6>
    ret = OV5640_ERROR;
 8008ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ab6:	e7bc      	b.n	8008a32 <OV5640_MirrorFlipConfig+0x86>

08008ab8 <OV5640_NightModeConfig>:
{
 8008ab8:	b570      	push	{r4, r5, r6, lr}
  uint8_t tmp = 0;
 8008aba:	2300      	movs	r3, #0
{
 8008abc:	b082      	sub	sp, #8
  if (Cmd == NIGHT_MODE_ENABLE)
 8008abe:	2901      	cmp	r1, #1
 8008ac0:	f100 0418 	add.w	r4, r0, #24
  uint8_t tmp = 0;
 8008ac4:	f88d 3007 	strb.w	r3, [sp, #7]
  if (Cmd == NIGHT_MODE_ENABLE)
 8008ac8:	d01c      	beq.n	8008b04 <OV5640_NightModeConfig+0x4c>
    if (ov5640_read_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8008aca:	2301      	movs	r3, #1
 8008acc:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8008ad0:	4620      	mov	r0, r4
 8008ad2:	f10d 0207 	add.w	r2, sp, #7
 8008ad6:	f000 fa07 	bl	8008ee8 <ov5640_read_reg>
 8008ada:	b9e8      	cbnz	r0, 8008b18 <OV5640_NightModeConfig+0x60>
      tmp &= 0xFBU;
 8008adc:	f89d 1007 	ldrb.w	r1, [sp, #7]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	f10d 0207 	add.w	r2, sp, #7
 8008ae6:	2301      	movs	r3, #1
      tmp &= 0xFBU;
 8008ae8:	f021 0404 	bic.w	r4, r1, #4
      if (ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8008aec:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
      tmp &= 0xFBU;
 8008af0:	f88d 4007 	strb.w	r4, [sp, #7]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8008af4:	f000 fa00 	bl	8008ef8 <ov5640_write_reg>
 8008af8:	3000      	adds	r0, #0
 8008afa:	bf18      	it	ne
 8008afc:	2001      	movne	r0, #1
 8008afe:	4240      	negs	r0, r0
}
 8008b00:	b002      	add	sp, #8
 8008b02:	bd70      	pop	{r4, r5, r6, pc}
 8008b04:	460d      	mov	r5, r1
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL4, &tmp, 1);
 8008b06:	460b      	mov	r3, r1
 8008b08:	4620      	mov	r0, r4
 8008b0a:	f243 0138 	movw	r1, #12344	; 0x3038
 8008b0e:	f10d 0207 	add.w	r2, sp, #7
 8008b12:	f000 f9f1 	bl	8008ef8 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8008b16:	b118      	cbz	r0, 8008b20 <OV5640_NightModeConfig+0x68>
      ret = OV5640_ERROR;
 8008b18:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008b1c:	b002      	add	sp, #8
 8008b1e:	bd70      	pop	{r4, r5, r6, pc}
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL5, &tmp, 1);
 8008b20:	462b      	mov	r3, r5
 8008b22:	f10d 0207 	add.w	r2, sp, #7
 8008b26:	f243 0139 	movw	r1, #12345	; 0x3039
 8008b2a:	4620      	mov	r0, r4
 8008b2c:	f000 f9e4 	bl	8008ef8 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8008b30:	2800      	cmp	r0, #0
 8008b32:	d1f1      	bne.n	8008b18 <OV5640_NightModeConfig+0x60>
      tmp = 0x7C;
 8008b34:	267c      	movs	r6, #124	; 0x7c
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1);
 8008b36:	462b      	mov	r3, r5
 8008b38:	f10d 0207 	add.w	r2, sp, #7
 8008b3c:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8008b40:	4620      	mov	r0, r4
      tmp = 0x7C;
 8008b42:	f88d 6007 	strb.w	r6, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1);
 8008b46:	f000 f9d7 	bl	8008ef8 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8008b4a:	2800      	cmp	r0, #0
 8008b4c:	d1e4      	bne.n	8008b18 <OV5640_NightModeConfig+0x60>
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_HIGH, &tmp, 1);
 8008b4e:	462b      	mov	r3, r5
 8008b50:	f10d 0207 	add.w	r2, sp, #7
 8008b54:	f643 2108 	movw	r1, #14856	; 0x3a08
 8008b58:	4620      	mov	r0, r4
      tmp = 0x01;
 8008b5a:	f88d 5007 	strb.w	r5, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_HIGH, &tmp, 1);
 8008b5e:	f000 f9cb 	bl	8008ef8 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8008b62:	2800      	cmp	r0, #0
 8008b64:	d1d8      	bne.n	8008b18 <OV5640_NightModeConfig+0x60>
      tmp = 0x27;
 8008b66:	2627      	movs	r6, #39	; 0x27
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_LOW, &tmp, 1);
 8008b68:	462b      	mov	r3, r5
 8008b6a:	f10d 0207 	add.w	r2, sp, #7
 8008b6e:	f643 2109 	movw	r1, #14857	; 0x3a09
 8008b72:	4620      	mov	r0, r4
      tmp = 0x27;
 8008b74:	f88d 6007 	strb.w	r6, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_LOW, &tmp, 1);
 8008b78:	f000 f9be 	bl	8008ef8 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8008b7c:	4606      	mov	r6, r0
 8008b7e:	2800      	cmp	r0, #0
 8008b80:	d1ca      	bne.n	8008b18 <OV5640_NightModeConfig+0x60>
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_HIGH, &tmp, 1);
 8008b82:	462b      	mov	r3, r5
 8008b84:	f10d 0207 	add.w	r2, sp, #7
 8008b88:	f643 210a 	movw	r1, #14858	; 0x3a0a
 8008b8c:	4620      	mov	r0, r4
      tmp = 0x00;
 8008b8e:	f88d 6007 	strb.w	r6, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_HIGH, &tmp, 1);
 8008b92:	f000 f9b1 	bl	8008ef8 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8008b96:	2800      	cmp	r0, #0
 8008b98:	d1be      	bne.n	8008b18 <OV5640_NightModeConfig+0x60>
      tmp = 0xF6;
 8008b9a:	26f6      	movs	r6, #246	; 0xf6
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_LOW, &tmp, 1);
 8008b9c:	462b      	mov	r3, r5
 8008b9e:	f10d 0207 	add.w	r2, sp, #7
 8008ba2:	f643 210b 	movw	r1, #14859	; 0x3a0b
 8008ba6:	4620      	mov	r0, r4
      tmp = 0xF6;
 8008ba8:	f88d 6007 	strb.w	r6, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_LOW, &tmp, 1);
 8008bac:	f000 f9a4 	bl	8008ef8 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8008bb0:	2800      	cmp	r0, #0
 8008bb2:	d1b1      	bne.n	8008b18 <OV5640_NightModeConfig+0x60>
      tmp = 0x04;
 8008bb4:	2604      	movs	r6, #4
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0D, &tmp, 1);
 8008bb6:	462b      	mov	r3, r5
 8008bb8:	f10d 0207 	add.w	r2, sp, #7
 8008bbc:	f643 210d 	movw	r1, #14861	; 0x3a0d
 8008bc0:	4620      	mov	r0, r4
      tmp = 0x04;
 8008bc2:	f88d 6007 	strb.w	r6, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0D, &tmp, 1);
 8008bc6:	f000 f997 	bl	8008ef8 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8008bca:	2800      	cmp	r0, #0
 8008bcc:	d1a4      	bne.n	8008b18 <OV5640_NightModeConfig+0x60>
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0E, &tmp, 1);
 8008bce:	462b      	mov	r3, r5
 8008bd0:	f10d 0207 	add.w	r2, sp, #7
 8008bd4:	f643 210e 	movw	r1, #14862	; 0x3a0e
 8008bd8:	4620      	mov	r0, r4
 8008bda:	f000 f98d 	bl	8008ef8 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8008bde:	2800      	cmp	r0, #0
 8008be0:	d19a      	bne.n	8008b18 <OV5640_NightModeConfig+0x60>
      tmp = 0x0B;
 8008be2:	260b      	movs	r6, #11
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL02, &tmp, 1);
 8008be4:	2301      	movs	r3, #1
 8008be6:	f10d 0207 	add.w	r2, sp, #7
 8008bea:	f643 2102 	movw	r1, #14850	; 0x3a02
 8008bee:	4620      	mov	r0, r4
      tmp = 0x0B;
 8008bf0:	f88d 6007 	strb.w	r6, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL02, &tmp, 1);
 8008bf4:	f000 f980 	bl	8008ef8 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8008bf8:	2800      	cmp	r0, #0
 8008bfa:	d18d      	bne.n	8008b18 <OV5640_NightModeConfig+0x60>
      tmp = 0x88;
 8008bfc:	2588      	movs	r5, #136	; 0x88
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL03, &tmp, 1);
 8008bfe:	2301      	movs	r3, #1
 8008c00:	f10d 0207 	add.w	r2, sp, #7
 8008c04:	f643 2103 	movw	r1, #14851	; 0x3a03
 8008c08:	4620      	mov	r0, r4
      tmp = 0x88;
 8008c0a:	f88d 5007 	strb.w	r5, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL03, &tmp, 1);
 8008c0e:	f000 f973 	bl	8008ef8 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8008c12:	2800      	cmp	r0, #0
 8008c14:	d180      	bne.n	8008b18 <OV5640_NightModeConfig+0x60>
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_HIGH, &tmp, 1);
 8008c16:	2301      	movs	r3, #1
 8008c18:	f10d 0207 	add.w	r2, sp, #7
 8008c1c:	f643 2114 	movw	r1, #14868	; 0x3a14
 8008c20:	4620      	mov	r0, r4
      tmp = 0x0B;
 8008c22:	f88d 6007 	strb.w	r6, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_HIGH, &tmp, 1);
 8008c26:	f000 f967 	bl	8008ef8 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8008c2a:	2800      	cmp	r0, #0
 8008c2c:	f47f af74 	bne.w	8008b18 <OV5640_NightModeConfig+0x60>
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_LOW, &tmp, 1);
 8008c30:	f10d 0207 	add.w	r2, sp, #7
 8008c34:	4620      	mov	r0, r4
 8008c36:	2301      	movs	r3, #1
 8008c38:	f643 2115 	movw	r1, #14869	; 0x3a15
      tmp = 0x88;
 8008c3c:	f88d 5007 	strb.w	r5, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_LOW, &tmp, 1);
 8008c40:	f000 f95a 	bl	8008ef8 <ov5640_write_reg>
    if (ret != OV5640_OK)
 8008c44:	3000      	adds	r0, #0
 8008c46:	bf18      	it	ne
 8008c48:	2001      	movne	r0, #1
 8008c4a:	4240      	negs	r0, r0
}
 8008c4c:	b002      	add	sp, #8
 8008c4e:	bd70      	pop	{r4, r5, r6, pc}

08008c50 <OV5640_Init>:
  if (pObj->IsInitialized == 0U)
 8008c50:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d145      	bne.n	8008ce4 <OV5640_Init+0x94>
    if ((Resolution > OV5640_R800x480) ||
 8008c58:	2904      	cmp	r1, #4
{
 8008c5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c5e:	468b      	mov	fp, r1
 8008c60:	b083      	sub	sp, #12
    if ((Resolution > OV5640_R800x480) ||
 8008c62:	d816      	bhi.n	8008c92 <OV5640_Init+0x42>
 8008c64:	2a02      	cmp	r2, #2
 8008c66:	4681      	mov	r9, r0
 8008c68:	4692      	mov	sl, r2
 8008c6a:	d837      	bhi.n	8008cdc <OV5640_Init+0x8c>
 8008c6c:	4f1e      	ldr	r7, [pc, #120]	; (8008ce8 <OV5640_Init+0x98>)
 8008c6e:	f109 0818 	add.w	r8, r9, #24
{
 8008c72:	2400      	movs	r4, #0
 8008c74:	463d      	mov	r5, r7
          tmp = (uint8_t)OV5640_Common[index][1];
 8008c76:	886e      	ldrh	r6, [r5, #2]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 8008c78:	2301      	movs	r3, #1
 8008c7a:	f837 1024 	ldrh.w	r1, [r7, r4, lsl #2]
 8008c7e:	f10d 0206 	add.w	r2, sp, #6
 8008c82:	4640      	mov	r0, r8
 8008c84:	3504      	adds	r5, #4
          tmp = (uint8_t)OV5640_Common[index][1];
 8008c86:	f88d 6006 	strb.w	r6, [sp, #6]
 8008c8a:	441c      	add	r4, r3
          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 8008c8c:	f000 f934 	bl	8008ef8 <ov5640_write_reg>
 8008c90:	b120      	cbz	r0, 8008c9c <OV5640_Init+0x4c>
{
 8008c92:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008c96:	b003      	add	sp, #12
 8008c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8008c9c:	2cfe      	cmp	r4, #254	; 0xfe
 8008c9e:	d1ea      	bne.n	8008c76 <OV5640_Init+0x26>
        if (OV5640_SetResolution(pObj, Resolution) != OV5640_OK)
 8008ca0:	4659      	mov	r1, fp
 8008ca2:	4648      	mov	r0, r9
 8008ca4:	f7ff f870 	bl	8007d88 <OV5640_SetResolution>
 8008ca8:	2800      	cmp	r0, #0
 8008caa:	d1f2      	bne.n	8008c92 <OV5640_Init+0x42>
        else if (OV5640_SetPixelFormat(pObj, PixelFormat) != OV5640_OK)
 8008cac:	4651      	mov	r1, sl
 8008cae:	4648      	mov	r0, r9
 8008cb0:	f7ff fc9a 	bl	80085e8 <OV5640_SetPixelFormat>
 8008cb4:	2800      	cmp	r0, #0
 8008cb6:	d1ec      	bne.n	8008c92 <OV5640_Init+0x42>
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 8008cb8:	2122      	movs	r1, #34	; 0x22
 8008cba:	aa02      	add	r2, sp, #8
    if (ov5640_write_reg(&pObj->Ctx, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 8008cbc:	4640      	mov	r0, r8
 8008cbe:	2301      	movs	r3, #1
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 8008cc0:	f802 1d01 	strb.w	r1, [r2, #-1]!
    if (ov5640_write_reg(&pObj->Ctx, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 8008cc4:	f244 7140 	movw	r1, #18240	; 0x4740
 8008cc8:	f000 f916 	bl	8008ef8 <ov5640_write_reg>
 8008ccc:	2800      	cmp	r0, #0
 8008cce:	d1e0      	bne.n	8008c92 <OV5640_Init+0x42>
          pObj->IsInitialized = 1U;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	f889 3024 	strb.w	r3, [r9, #36]	; 0x24
}
 8008cd6:	b003      	add	sp, #12
 8008cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8008cdc:	1fd3      	subs	r3, r2, #7
 8008cde:	2b01      	cmp	r3, #1
 8008ce0:	d9c4      	bls.n	8008c6c <OV5640_Init+0x1c>
 8008ce2:	e7d6      	b.n	8008c92 <OV5640_Init+0x42>
  int32_t ret = OV5640_OK;
 8008ce4:	2000      	movs	r0, #0
}
 8008ce6:	4770      	bx	lr
 8008ce8:	080bf400 	.word	0x080bf400

08008cec <OV5640_ZoomConfig>:
{
 8008cec:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_HIGH, &tmp, 1) != OV5640_OK)
 8008cee:	f100 0518 	add.w	r5, r0, #24
{
 8008cf2:	b083      	sub	sp, #12
 8008cf4:	460f      	mov	r7, r1
  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_HIGH, &tmp, 1) != OV5640_OK)
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	4628      	mov	r0, r5
 8008cfa:	f10d 0207 	add.w	r2, sp, #7
 8008cfe:	f643 0108 	movw	r1, #14344	; 0x3808
 8008d02:	f000 f8f1 	bl	8008ee8 <ov5640_read_reg>
 8008d06:	2800      	cmp	r0, #0
 8008d08:	d17d      	bne.n	8008e06 <OV5640_ZoomConfig+0x11a>
    x_size = (uint16_t)tmp << 8U;
 8008d0a:	f89d 4007 	ldrb.w	r4, [sp, #7]
    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_LOW, &tmp, 1) != OV5640_OK)
 8008d0e:	2301      	movs	r3, #1
 8008d10:	f10d 0207 	add.w	r2, sp, #7
 8008d14:	f643 0109 	movw	r1, #14345	; 0x3809
 8008d18:	4628      	mov	r0, r5
    x_size = (uint16_t)tmp << 8U;
 8008d1a:	0224      	lsls	r4, r4, #8
    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_LOW, &tmp, 1) != OV5640_OK)
 8008d1c:	f000 f8e4 	bl	8008ee8 <ov5640_read_reg>
 8008d20:	2800      	cmp	r0, #0
 8008d22:	d170      	bne.n	8008e06 <OV5640_ZoomConfig+0x11a>
      x_size |= tmp;
 8008d24:	f89d 6007 	ldrb.w	r6, [sp, #7]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_HIGH, &tmp, 1) != OV5640_OK)
 8008d28:	2301      	movs	r3, #1
 8008d2a:	f10d 0207 	add.w	r2, sp, #7
 8008d2e:	f643 010a 	movw	r1, #14346	; 0x380a
 8008d32:	4628      	mov	r0, r5
      x_size |= tmp;
 8008d34:	4334      	orrs	r4, r6
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_HIGH, &tmp, 1) != OV5640_OK)
 8008d36:	f000 f8d7 	bl	8008ee8 <ov5640_read_reg>
 8008d3a:	2800      	cmp	r0, #0
 8008d3c:	d163      	bne.n	8008e06 <OV5640_ZoomConfig+0x11a>
        y_size = (uint16_t)tmp << 8U;
 8008d3e:	f89d 6007 	ldrb.w	r6, [sp, #7]
        if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_LOW, &tmp, 1) != OV5640_OK)
 8008d42:	2301      	movs	r3, #1
 8008d44:	f10d 0207 	add.w	r2, sp, #7
 8008d48:	f643 010b 	movw	r1, #14347	; 0x380b
 8008d4c:	4628      	mov	r0, r5
        y_size = (uint16_t)tmp << 8U;
 8008d4e:	0236      	lsls	r6, r6, #8
        if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_LOW, &tmp, 1) != OV5640_OK)
 8008d50:	f000 f8ca 	bl	8008ee8 <ov5640_read_reg>
 8008d54:	2800      	cmp	r0, #0
 8008d56:	d156      	bne.n	8008e06 <OV5640_ZoomConfig+0x11a>
          y_size |= tmp;
 8008d58:	f89d 3007 	ldrb.w	r3, [sp, #7]
          if ((x_size == 800U) && (y_size == 480U))
 8008d5c:	f5b4 7f48 	cmp.w	r4, #800	; 0x320
          y_size |= tmp;
 8008d60:	ea43 0306 	orr.w	r3, r3, r6
          if ((x_size == 800U) && (y_size == 480U))
 8008d64:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 8008d68:	fab2 f282 	clz	r2, r2
 8008d6c:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8008d70:	d113      	bne.n	8008d9a <OV5640_ZoomConfig+0xae>
 8008d72:	b192      	cbz	r2, 8008d9a <OV5640_ZoomConfig+0xae>
    if (zoom == OV5640_ZOOM_x1)
 8008d74:	2f44      	cmp	r7, #68	; 0x44
 8008d76:	d117      	bne.n	8008da8 <OV5640_ZoomConfig+0xbc>
      tmp = 0x10;
 8008d78:	2410      	movs	r4, #16
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8008d7a:	f10d 0207 	add.w	r2, sp, #7
 8008d7e:	4628      	mov	r0, r5
 8008d80:	2301      	movs	r3, #1
 8008d82:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
      tmp = 0x10;
 8008d86:	f88d 4007 	strb.w	r4, [sp, #7]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8008d8a:	f000 f8b5 	bl	8008ef8 <ov5640_write_reg>
 8008d8e:	3000      	adds	r0, #0
 8008d90:	bf18      	it	ne
 8008d92:	2001      	movne	r0, #1
 8008d94:	4240      	negs	r0, r0
}
 8008d96:	b003      	add	sp, #12
 8008d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
          else if ((x_size == 640U) && (y_size == 480U))
 8008d9a:	f5b4 7f20 	cmp.w	r4, #640	; 0x280
 8008d9e:	d11f      	bne.n	8008de0 <OV5640_ZoomConfig+0xf4>
 8008da0:	b1f2      	cbz	r2, 8008de0 <OV5640_ZoomConfig+0xf4>
    if (zoom == OV5640_ZOOM_x1)
 8008da2:	2f44      	cmp	r7, #68	; 0x44
 8008da4:	d0e8      	beq.n	8008d78 <OV5640_ZoomConfig+0x8c>
          zoom = zoom >> 2U;
 8008da6:	08bf      	lsrs	r7, r7, #2
      tmp = 0x00;
 8008da8:	2400      	movs	r4, #0
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8008daa:	2301      	movs	r3, #1
 8008dac:	f10d 0207 	add.w	r2, sp, #7
 8008db0:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
 8008db4:	4628      	mov	r0, r5
      tmp = 0x00;
 8008db6:	f88d 4007 	strb.w	r4, [sp, #7]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8008dba:	f000 f89d 	bl	8008ef8 <ov5640_write_reg>
 8008dbe:	bb10      	cbnz	r0, 8008e06 <OV5640_ZoomConfig+0x11a>
        if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL1, &tmp, 1) != OV5640_OK)
 8008dc0:	f10d 0207 	add.w	r2, sp, #7
 8008dc4:	4628      	mov	r0, r5
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	f245 6101 	movw	r1, #22017	; 0x5601
        tmp = (uint8_t)zoom;
 8008dcc:	f88d 7007 	strb.w	r7, [sp, #7]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL1, &tmp, 1) != OV5640_OK)
 8008dd0:	f000 f892 	bl	8008ef8 <ov5640_write_reg>
 8008dd4:	1b00      	subs	r0, r0, r4
 8008dd6:	bf18      	it	ne
 8008dd8:	2001      	movne	r0, #1
 8008dda:	4240      	negs	r0, r0
}
 8008ddc:	b003      	add	sp, #12
 8008dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
          else if ((x_size == 480U) && (y_size == 272U))
 8008de0:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
 8008de4:	d106      	bne.n	8008df4 <OV5640_ZoomConfig+0x108>
 8008de6:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8008dea:	d103      	bne.n	8008df4 <OV5640_ZoomConfig+0x108>
    if (zoom == OV5640_ZOOM_x1)
 8008dec:	2f44      	cmp	r7, #68	; 0x44
 8008dee:	d0c3      	beq.n	8008d78 <OV5640_ZoomConfig+0x8c>
          zoom = zoom >> 1U;
 8008df0:	087f      	lsrs	r7, r7, #1
          break;
 8008df2:	e7d9      	b.n	8008da8 <OV5640_ZoomConfig+0xbc>
          else if ((x_size == 320U) && (y_size == 240U))
 8008df4:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
 8008df8:	d101      	bne.n	8008dfe <OV5640_ZoomConfig+0x112>
 8008dfa:	2bf0      	cmp	r3, #240	; 0xf0
 8008dfc:	d0f6      	beq.n	8008dec <OV5640_ZoomConfig+0x100>
          else if ((x_size == 160U) && (y_size == 120U))
 8008dfe:	2ca0      	cmp	r4, #160	; 0xa0
 8008e00:	d101      	bne.n	8008e06 <OV5640_ZoomConfig+0x11a>
 8008e02:	2b78      	cmp	r3, #120	; 0x78
 8008e04:	d0b6      	beq.n	8008d74 <OV5640_ZoomConfig+0x88>
        ret = OV5640_ERROR;
 8008e06:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008e0a:	b003      	add	sp, #12
 8008e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e0e:	bf00      	nop

08008e10 <OV5640_RegisterBusIO>:
  if (pObj == NULL)
 8008e10:	b1c0      	cbz	r0, 8008e44 <OV5640_RegisterBusIO+0x34>
    pObj->IO.WriteReg  = pIO->WriteReg;
 8008e12:	68ca      	ldr	r2, [r1, #12]
{
 8008e14:	b470      	push	{r4, r5, r6}
    pObj->IO.DeInit    = pIO->DeInit;
 8008e16:	e9d1 3400 	ldrd	r3, r4, [r1]
    pObj->IO.Address   = pIO->Address;
 8008e1a:	890e      	ldrh	r6, [r1, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 8008e1c:	e9c0 3400 	strd	r3, r4, [r0]
    pObj->IO.GetTick   = pIO->GetTick;
 8008e20:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
    pObj->Ctx.ReadReg  = OV5640_ReadRegWrap;
 8008e24:	4909      	ldr	r1, [pc, #36]	; (8008e4c <OV5640_RegisterBusIO+0x3c>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 8008e26:	60c2      	str	r2, [r0, #12]
    pObj->Ctx.WriteReg = OV5640_WriteRegWrap;
 8008e28:	4a09      	ldr	r2, [pc, #36]	; (8008e50 <OV5640_RegisterBusIO+0x40>)
    pObj->IO.Address   = pIO->Address;
 8008e2a:	8106      	strh	r6, [r0, #8]
    pObj->Ctx.WriteReg = OV5640_WriteRegWrap;
 8008e2c:	6182      	str	r2, [r0, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 8008e2e:	e9c0 5404 	strd	r5, r4, [r0, #16]
    pObj->Ctx.ReadReg  = OV5640_ReadRegWrap;
 8008e32:	e9c0 1007 	strd	r1, r0, [r0, #28]
    if (pObj->IO.Init != NULL)
 8008e36:	b10b      	cbz	r3, 8008e3c <OV5640_RegisterBusIO+0x2c>
}
 8008e38:	bc70      	pop	{r4, r5, r6}
      ret = pObj->IO.Init();
 8008e3a:	4718      	bx	r3
}
 8008e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e40:	bc70      	pop	{r4, r5, r6}
 8008e42:	4770      	bx	lr
 8008e44:	f04f 30ff 	mov.w	r0, #4294967295
 8008e48:	4770      	bx	lr
 8008e4a:	bf00      	nop
 8008e4c:	08007d69 	.word	0x08007d69
 8008e50:	08007d79 	.word	0x08007d79

08008e54 <OV5640_ColorbarModeConfig>:
  if ((Cmd == COLORBAR_MODE_ENABLE) || (Cmd == COLORBAR_MODE_GRADUALV))
 8008e54:	1e4b      	subs	r3, r1, #1
  uint8_t tmp = 0x40;
 8008e56:	2240      	movs	r2, #64	; 0x40
{
 8008e58:	b570      	push	{r4, r5, r6, lr}
  if ((Cmd == COLORBAR_MODE_ENABLE) || (Cmd == COLORBAR_MODE_GRADUALV))
 8008e5a:	2b01      	cmp	r3, #1
{
 8008e5c:	b082      	sub	sp, #8
 8008e5e:	f100 0518 	add.w	r5, r0, #24
  uint8_t tmp = 0x40;
 8008e62:	f88d 2007 	strb.w	r2, [sp, #7]
  if ((Cmd == COLORBAR_MODE_ENABLE) || (Cmd == COLORBAR_MODE_GRADUALV))
 8008e66:	d91f      	bls.n	8008ea8 <OV5640_ColorbarModeConfig+0x54>
    tmp = 0x10;
 8008e68:	2210      	movs	r2, #16
 8008e6a:	ac02      	add	r4, sp, #8
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	f245 5184 	movw	r1, #21892	; 0x5584
    tmp = 0x10;
 8008e72:	f804 2d01 	strb.w	r2, [r4, #-1]!
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8008e76:	4628      	mov	r0, r5
 8008e78:	4622      	mov	r2, r4
 8008e7a:	f000 f83d 	bl	8008ef8 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8008e7e:	4606      	mov	r6, r0
 8008e80:	b118      	cbz	r0, 8008e8a <OV5640_ColorbarModeConfig+0x36>
      ret = OV5640_ERROR;
 8008e82:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008e86:	b002      	add	sp, #8
 8008e88:	bd70      	pop	{r4, r5, r6, pc}
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_PRE_ISP_TEST_SETTING1, &tmp, 1);
 8008e8a:	4622      	mov	r2, r4
 8008e8c:	4628      	mov	r0, r5
 8008e8e:	2301      	movs	r3, #1
 8008e90:	f245 013d 	movw	r1, #20541	; 0x503d
      tmp = 0x00;
 8008e94:	f88d 6007 	strb.w	r6, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_PRE_ISP_TEST_SETTING1, &tmp, 1);
 8008e98:	f000 f82e 	bl	8008ef8 <ov5640_write_reg>
    if (ret != OV5640_OK)
 8008e9c:	3000      	adds	r0, #0
 8008e9e:	bf18      	it	ne
 8008ea0:	2001      	movne	r0, #1
 8008ea2:	4240      	negs	r0, r0
}
 8008ea4:	b002      	add	sp, #8
 8008ea6:	bd70      	pop	{r4, r5, r6, pc}
 8008ea8:	460c      	mov	r4, r1
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8008eaa:	2301      	movs	r3, #1
 8008eac:	f245 5184 	movw	r1, #21892	; 0x5584
 8008eb0:	4628      	mov	r0, r5
 8008eb2:	f10d 0207 	add.w	r2, sp, #7
 8008eb6:	f000 f81f 	bl	8008ef8 <ov5640_write_reg>
    if (ret == OV5640_OK)
 8008eba:	2800      	cmp	r0, #0
 8008ebc:	d1e1      	bne.n	8008e82 <OV5640_ColorbarModeConfig+0x2e>
      tmp = (Cmd == COLORBAR_MODE_GRADUALV ? 0x8c : 0x80);
 8008ebe:	2c02      	cmp	r4, #2
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_PRE_ISP_TEST_SETTING1, &tmp, 1);
 8008ec0:	f10d 0207 	add.w	r2, sp, #7
 8008ec4:	4628      	mov	r0, r5
 8008ec6:	f04f 0301 	mov.w	r3, #1
      tmp = (Cmd == COLORBAR_MODE_GRADUALV ? 0x8c : 0x80);
 8008eca:	bf14      	ite	ne
 8008ecc:	2480      	movne	r4, #128	; 0x80
 8008ece:	248c      	moveq	r4, #140	; 0x8c
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_PRE_ISP_TEST_SETTING1, &tmp, 1);
 8008ed0:	f245 013d 	movw	r1, #20541	; 0x503d
      tmp = (Cmd == COLORBAR_MODE_GRADUALV ? 0x8c : 0x80);
 8008ed4:	f88d 4007 	strb.w	r4, [sp, #7]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_PRE_ISP_TEST_SETTING1, &tmp, 1);
 8008ed8:	f000 f80e 	bl	8008ef8 <ov5640_write_reg>
    if (ret != OV5640_OK)
 8008edc:	3000      	adds	r0, #0
 8008ede:	bf18      	it	ne
 8008ee0:	2001      	movne	r0, #1
 8008ee2:	4240      	negs	r0, r0
}
 8008ee4:	b002      	add	sp, #8
 8008ee6:	bd70      	pop	{r4, r5, r6, pc}

08008ee8 <ov5640_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read
  * @retval Component status
  */
int32_t ov5640_read_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8008ee8:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8008eea:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8008eee:	46a4      	mov	ip, r4
}
 8008ef0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8008ef4:	4760      	bx	ip
 8008ef6:	bf00      	nop

08008ef8 <ov5640_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write
  * @retval Component status
  */
int32_t ov5640_write_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 8008ef8:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8008efa:	6804      	ldr	r4, [r0, #0]
 8008efc:	6880      	ldr	r0, [r0, #8]
 8008efe:	46a4      	mov	ip, r4
}
 8008f00:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8008f04:	4760      	bx	ip
 8008f06:	bf00      	nop

08008f08 <OV9655_DeInit>:
  * @param  pObj  pointer to component object
  * @retval Component status
  */
int32_t OV9655_DeInit(OV9655_Object_t *pObj)
{
  if(pObj->IsInitialized == 1U)
 8008f08:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d102      	bne.n	8008f16 <OV9655_DeInit+0xe>
  {
    pObj->IsInitialized = 0U;
 8008f10:	2300      	movs	r3, #0
 8008f12:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  }

  return OV9655_OK;
}
 8008f16:	2000      	movs	r0, #0
 8008f18:	4770      	bx	lr
 8008f1a:	bf00      	nop

08008f1c <OV9655_GetPixelFormat>:
{
  (void)(pObj);
  (void)(PixelFormat);

  return OV9655_ERROR;
}
 8008f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f20:	4770      	bx	lr
 8008f22:	bf00      	nop

08008f24 <OV9655_GetCapabilities>:
  */
int32_t OV9655_GetCapabilities(OV9655_Object_t *pObj, OV9655_Capabilities_t *Capabilities)
{
  int32_t ret;

  if(pObj == NULL)
 8008f24:	b168      	cbz	r0, 8008f42 <OV9655_GetCapabilities+0x1e>
  {
    ret = OV9655_ERROR;
  }
  else
  {
    Capabilities->Config_Brightness    = 1;
 8008f26:	2301      	movs	r3, #1
    Capabilities->Config_Contrast      = 1;
    Capabilities->Config_HueDegree     = 0;
 8008f28:	2200      	movs	r2, #0
    Capabilities->Config_Brightness    = 1;
 8008f2a:	60cb      	str	r3, [r1, #12]
    Capabilities->Config_Resolution    = 1;
    Capabilities->Config_Saturation    = 0;
    Capabilities->Config_SpecialEffect = 1;
    Capabilities->Config_Zoom          = 0;

    ret = OV9655_OK;
 8008f2c:	4610      	mov	r0, r2
    Capabilities->Config_Contrast      = 1;
 8008f2e:	614b      	str	r3, [r1, #20]
    Capabilities->Config_MirrorFlip    = 1;
 8008f30:	61cb      	str	r3, [r1, #28]
    Capabilities->Config_NightMode     = 1;
 8008f32:	624b      	str	r3, [r1, #36]	; 0x24
    Capabilities->Config_Resolution    = 1;
 8008f34:	600b      	str	r3, [r1, #0]
    Capabilities->Config_SpecialEffect = 1;
 8008f36:	608b      	str	r3, [r1, #8]
    Capabilities->Config_HueDegree     = 0;
 8008f38:	618a      	str	r2, [r1, #24]
    Capabilities->Config_LightMode     = 0;
 8008f3a:	604a      	str	r2, [r1, #4]
    Capabilities->Config_Saturation    = 0;
 8008f3c:	610a      	str	r2, [r1, #16]
    Capabilities->Config_Zoom          = 0;
 8008f3e:	620a      	str	r2, [r1, #32]
 8008f40:	4770      	bx	lr
    ret = OV9655_ERROR;
 8008f42:	f04f 30ff 	mov.w	r0, #4294967295
  }

  return ret;
}
 8008f46:	4770      	bx	lr

08008f48 <OV9655_SetLightMode>:
{
  (void)(pObj);
  (void)(LightMode);

  return OV9655_ERROR;
}
 8008f48:	f04f 30ff 	mov.w	r0, #4294967295
 8008f4c:	4770      	bx	lr
 8008f4e:	bf00      	nop

08008f50 <OV9655_SetSaturation>:
{
  (void)(pObj);
  (void)(Level);

  return OV9655_ERROR;
}
 8008f50:	f04f 30ff 	mov.w	r0, #4294967295
 8008f54:	4770      	bx	lr
 8008f56:	bf00      	nop

08008f58 <OV9655_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV9655_ReadRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8008f58:	b410      	push	{r4}
  OV9655_Object_t *pObj = (OV9655_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8008f5a:	6904      	ldr	r4, [r0, #16]
 8008f5c:	8900      	ldrh	r0, [r0, #8]
 8008f5e:	46a4      	mov	ip, r4
}
 8008f60:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8008f64:	4760      	bx	ip
 8008f66:	bf00      	nop

08008f68 <OV9655_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV9655_WriteRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8008f68:	b410      	push	{r4}
  OV9655_Object_t *pObj = (OV9655_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8008f6a:	68c4      	ldr	r4, [r0, #12]
 8008f6c:	8900      	ldrh	r0, [r0, #8]
 8008f6e:	46a4      	mov	ip, r4
}
 8008f70:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8008f74:	4760      	bx	ip
 8008f76:	bf00      	nop

08008f78 <OV9655_SetResolution>:
  if (Resolution > OV9655_R640x480)
 8008f78:	2903      	cmp	r1, #3
{
 8008f7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f7e:	b082      	sub	sp, #8
  if (Resolution > OV9655_R640x480)
 8008f80:	d83a      	bhi.n	8008ff8 <OV9655_SetResolution+0x80>
    switch (Resolution)
 8008f82:	2901      	cmp	r1, #1
 8008f84:	468a      	mov	sl, r1
 8008f86:	4604      	mov	r4, r0
      for(index=0; index<(sizeof(OV9655_QVGA_QQVGA)/2U); index++)
 8008f88:	f04f 0300 	mov.w	r3, #0
    switch (Resolution)
 8008f8c:	f000 8088 	beq.w	80090a0 <OV9655_SetResolution+0x128>
 8008f90:	d33f      	bcc.n	8009012 <OV9655_SetResolution+0x9a>
 8008f92:	2903      	cmp	r1, #3
 8008f94:	d83d      	bhi.n	8009012 <OV9655_SetResolution+0x9a>
          tmp = OV9655_VGA[index][1];
 8008f96:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8009150 <OV9655_SetResolution+0x1d8>
          if(ov9655_write_reg(&pObj->Ctx, OV9655_VGA[index][0], &tmp, 1) != OV9655_OK)
 8008f9a:	f100 0918 	add.w	r9, r0, #24
  int32_t ret = OV9655_OK;
 8008f9e:	461d      	mov	r5, r3
 8008fa0:	1c5e      	adds	r6, r3, #1
        if(ret != OV9655_ERROR)
 8008fa2:	bb9d      	cbnz	r5, 800900c <OV9655_SetResolution+0x94>
          tmp = OV9655_VGA[index][1];
 8008fa4:	eb08 0043 	add.w	r0, r8, r3, lsl #1
          if(ov9655_write_reg(&pObj->Ctx, OV9655_VGA[index][0], &tmp, 1) != OV9655_OK)
 8008fa8:	f818 1013 	ldrb.w	r1, [r8, r3, lsl #1]
 8008fac:	f10d 0207 	add.w	r2, sp, #7
 8008fb0:	2301      	movs	r3, #1
          tmp = OV9655_VGA[index][1];
 8008fb2:	7845      	ldrb	r5, [r0, #1]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_VGA[index][0], &tmp, 1) != OV9655_OK)
 8008fb4:	4648      	mov	r0, r9
          tmp = OV9655_VGA[index][1];
 8008fb6:	f88d 5007 	strb.w	r5, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_VGA[index][0], &tmp, 1) != OV9655_OK)
 8008fba:	f000 fbf3 	bl	80097a4 <ov9655_write_reg>
 8008fbe:	3000      	adds	r0, #0
  tickstart = pObj->IO.GetTick();
 8008fc0:	6963      	ldr	r3, [r4, #20]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_VGA[index][0], &tmp, 1) != OV9655_OK)
 8008fc2:	bf18      	it	ne
 8008fc4:	2001      	movne	r0, #1
 8008fc6:	4245      	negs	r5, r0
  tickstart = pObj->IO.GetTick();
 8008fc8:	4798      	blx	r3
 8008fca:	4607      	mov	r7, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8008fcc:	6963      	ldr	r3, [r4, #20]
 8008fce:	4798      	blx	r3
 8008fd0:	1bc0      	subs	r0, r0, r7
 8008fd2:	2801      	cmp	r0, #1
 8008fd4:	d9fa      	bls.n	8008fcc <OV9655_SetResolution+0x54>
      for(index=0; index<(sizeof(OV9655_VGA)/2U); index++)
 8008fd6:	2e93      	cmp	r6, #147	; 0x93
 8008fd8:	4633      	mov	r3, r6
 8008fda:	d1e1      	bne.n	8008fa0 <OV9655_SetResolution+0x28>
 8008fdc:	e00e      	b.n	8008ffc <OV9655_SetResolution+0x84>
      for(index=0; index<(sizeof(OV9655_QVGA_QQVGA)/2U); index++)
 8008fde:	2e90      	cmp	r6, #144	; 0x90
 8008fe0:	f106 0602 	add.w	r6, r6, #2
 8008fe4:	d001      	beq.n	8008fea <OV9655_SetResolution+0x72>
 8008fe6:	2e91      	cmp	r6, #145	; 0x91
 8008fe8:	d1f9      	bne.n	8008fde <OV9655_SetResolution+0x66>
 8008fea:	2601      	movs	r6, #1
      for(index=0; index<(sizeof(OV9655_QQVGA)/2U); index++)
 8008fec:	2e05      	cmp	r6, #5
 8008fee:	d003      	beq.n	8008ff8 <OV9655_SetResolution+0x80>
 8008ff0:	2e04      	cmp	r6, #4
 8008ff2:	f106 0602 	add.w	r6, r6, #2
 8008ff6:	d1f9      	bne.n	8008fec <OV9655_SetResolution+0x74>
      for(index=0; index< (sizeof(OV9655_QVGA)/2U); index++)
 8008ff8:	f04f 35ff 	mov.w	r5, #4294967295
}
 8008ffc:	4628      	mov	r0, r5
 8008ffe:	b002      	add	sp, #8
 8009000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      for(index=0; index<(sizeof(OV9655_VGA)/2U); index++)
 8009004:	2e92      	cmp	r6, #146	; 0x92
 8009006:	f106 0602 	add.w	r6, r6, #2
 800900a:	d0f7      	beq.n	8008ffc <OV9655_SetResolution+0x84>
 800900c:	2e93      	cmp	r6, #147	; 0x93
 800900e:	d1f9      	bne.n	8009004 <OV9655_SetResolution+0x8c>
 8009010:	e7f2      	b.n	8008ff8 <OV9655_SetResolution+0x80>
          tmp = OV9655_QVGA_QQVGA[index][1];
 8009012:	f8df 8140 	ldr.w	r8, [pc, #320]	; 8009154 <OV9655_SetResolution+0x1dc>
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8009016:	f104 0918 	add.w	r9, r4, #24
  int32_t ret = OV9655_OK;
 800901a:	461d      	mov	r5, r3
 800901c:	1c5e      	adds	r6, r3, #1
        if(ret != OV9655_ERROR)
 800901e:	2d00      	cmp	r5, #0
 8009020:	d1e1      	bne.n	8008fe6 <OV9655_SetResolution+0x6e>
          tmp = OV9655_QVGA_QQVGA[index][1];
 8009022:	eb08 0043 	add.w	r0, r8, r3, lsl #1
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8009026:	f818 1013 	ldrb.w	r1, [r8, r3, lsl #1]
 800902a:	f10d 0207 	add.w	r2, sp, #7
 800902e:	2301      	movs	r3, #1
          tmp = OV9655_QVGA_QQVGA[index][1];
 8009030:	7845      	ldrb	r5, [r0, #1]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8009032:	4648      	mov	r0, r9
          tmp = OV9655_QVGA_QQVGA[index][1];
 8009034:	f88d 5007 	strb.w	r5, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8009038:	f000 fbb4 	bl	80097a4 <ov9655_write_reg>
 800903c:	3000      	adds	r0, #0
  tickstart = pObj->IO.GetTick();
 800903e:	6963      	ldr	r3, [r4, #20]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8009040:	bf18      	it	ne
 8009042:	2001      	movne	r0, #1
 8009044:	4245      	negs	r5, r0
  tickstart = pObj->IO.GetTick();
 8009046:	4798      	blx	r3
 8009048:	4607      	mov	r7, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 800904a:	6963      	ldr	r3, [r4, #20]
 800904c:	4798      	blx	r3
 800904e:	1bc0      	subs	r0, r0, r7
 8009050:	2801      	cmp	r0, #1
 8009052:	d9fa      	bls.n	800904a <OV9655_SetResolution+0xd2>
      for(index=0; index<(sizeof(OV9655_QVGA_QQVGA)/2U); index++)
 8009054:	2e91      	cmp	r6, #145	; 0x91
 8009056:	4633      	mov	r3, r6
 8009058:	d1e0      	bne.n	800901c <OV9655_SetResolution+0xa4>
 800905a:	2300      	movs	r3, #0
          tmp = OV9655_QQVGA[index][1];
 800905c:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 8009158 <OV9655_SetResolution+0x1e0>
 8009060:	1c5e      	adds	r6, r3, #1
        if(ret != OV9655_ERROR)
 8009062:	2d00      	cmp	r5, #0
 8009064:	d1c2      	bne.n	8008fec <OV9655_SetResolution+0x74>
          tmp = OV9655_QQVGA[index][1];
 8009066:	eb08 0043 	add.w	r0, r8, r3, lsl #1
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 800906a:	f818 1013 	ldrb.w	r1, [r8, r3, lsl #1]
 800906e:	f10d 0207 	add.w	r2, sp, #7
 8009072:	2301      	movs	r3, #1
          tmp = OV9655_QQVGA[index][1];
 8009074:	7845      	ldrb	r5, [r0, #1]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8009076:	4648      	mov	r0, r9
          tmp = OV9655_QQVGA[index][1];
 8009078:	f88d 5007 	strb.w	r5, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 800907c:	f000 fb92 	bl	80097a4 <ov9655_write_reg>
 8009080:	3000      	adds	r0, #0
  tickstart = pObj->IO.GetTick();
 8009082:	6963      	ldr	r3, [r4, #20]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8009084:	bf18      	it	ne
 8009086:	2001      	movne	r0, #1
 8009088:	4245      	negs	r5, r0
  tickstart = pObj->IO.GetTick();
 800908a:	4798      	blx	r3
 800908c:	4607      	mov	r7, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 800908e:	6963      	ldr	r3, [r4, #20]
 8009090:	4798      	blx	r3
 8009092:	1bc0      	subs	r0, r0, r7
 8009094:	2801      	cmp	r0, #1
 8009096:	d9fa      	bls.n	800908e <OV9655_SetResolution+0x116>
      for(index=0; index<(sizeof(OV9655_QQVGA)/2U); index++)
 8009098:	2e05      	cmp	r6, #5
 800909a:	4633      	mov	r3, r6
 800909c:	d1e0      	bne.n	8009060 <OV9655_SetResolution+0xe8>
 800909e:	e7ad      	b.n	8008ffc <OV9655_SetResolution+0x84>
          tmp = OV9655_QVGA_QQVGA[index][1];
 80090a0:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8009154 <OV9655_SetResolution+0x1dc>
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 80090a4:	f100 0918 	add.w	r9, r0, #24
  int32_t ret = OV9655_OK;
 80090a8:	461d      	mov	r5, r3
 80090aa:	1c5e      	adds	r6, r3, #1
        if(ret != OV9655_ERROR)
 80090ac:	2d00      	cmp	r5, #0
 80090ae:	d141      	bne.n	8009134 <OV9655_SetResolution+0x1bc>
          tmp = OV9655_QVGA_QQVGA[index][1];
 80090b0:	eb08 0043 	add.w	r0, r8, r3, lsl #1
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 80090b4:	f818 1013 	ldrb.w	r1, [r8, r3, lsl #1]
 80090b8:	f10d 0207 	add.w	r2, sp, #7
 80090bc:	2301      	movs	r3, #1
          tmp = OV9655_QVGA_QQVGA[index][1];
 80090be:	7845      	ldrb	r5, [r0, #1]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 80090c0:	4648      	mov	r0, r9
          tmp = OV9655_QVGA_QQVGA[index][1];
 80090c2:	f88d 5007 	strb.w	r5, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 80090c6:	f000 fb6d 	bl	80097a4 <ov9655_write_reg>
 80090ca:	3000      	adds	r0, #0
  tickstart = pObj->IO.GetTick();
 80090cc:	6963      	ldr	r3, [r4, #20]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 80090ce:	bf18      	it	ne
 80090d0:	2001      	movne	r0, #1
 80090d2:	4245      	negs	r5, r0
  tickstart = pObj->IO.GetTick();
 80090d4:	4798      	blx	r3
 80090d6:	4607      	mov	r7, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80090d8:	6963      	ldr	r3, [r4, #20]
 80090da:	4798      	blx	r3
 80090dc:	1bc0      	subs	r0, r0, r7
 80090de:	2801      	cmp	r0, #1
 80090e0:	d9fa      	bls.n	80090d8 <OV9655_SetResolution+0x160>
      for(index=0; index<(sizeof(OV9655_QVGA_QQVGA)/2U); index++)
 80090e2:	2e91      	cmp	r6, #145	; 0x91
 80090e4:	4633      	mov	r3, r6
 80090e6:	d1e0      	bne.n	80090aa <OV9655_SetResolution+0x132>
 80090e8:	2300      	movs	r3, #0
          tmp = OV9655_QVGA[index][1];
 80090ea:	4f18      	ldr	r7, [pc, #96]	; (800914c <OV9655_SetResolution+0x1d4>)
 80090ec:	f103 0a01 	add.w	sl, r3, #1
        if(ret != OV9655_ERROR)
 80090f0:	bb15      	cbnz	r5, 8009138 <OV9655_SetResolution+0x1c0>
          tmp = OV9655_QVGA[index][1];
 80090f2:	eb07 0043 	add.w	r0, r7, r3, lsl #1
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA[index][0], &tmp, 1) != OV9655_OK)
 80090f6:	f817 1013 	ldrb.w	r1, [r7, r3, lsl #1]
 80090fa:	f10d 0207 	add.w	r2, sp, #7
 80090fe:	2301      	movs	r3, #1
          tmp = OV9655_QVGA[index][1];
 8009100:	7845      	ldrb	r5, [r0, #1]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA[index][0], &tmp, 1) != OV9655_OK)
 8009102:	4648      	mov	r0, r9
          tmp = OV9655_QVGA[index][1];
 8009104:	f88d 5007 	strb.w	r5, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA[index][0], &tmp, 1) != OV9655_OK)
 8009108:	f000 fb4c 	bl	80097a4 <ov9655_write_reg>
 800910c:	3000      	adds	r0, #0
  tickstart = pObj->IO.GetTick();
 800910e:	6963      	ldr	r3, [r4, #20]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA[index][0], &tmp, 1) != OV9655_OK)
 8009110:	bf18      	it	ne
 8009112:	2001      	movne	r0, #1
 8009114:	4245      	negs	r5, r0
  tickstart = pObj->IO.GetTick();
 8009116:	4798      	blx	r3
 8009118:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 800911a:	6963      	ldr	r3, [r4, #20]
 800911c:	4798      	blx	r3
 800911e:	1b80      	subs	r0, r0, r6
 8009120:	2801      	cmp	r0, #1
 8009122:	d9fa      	bls.n	800911a <OV9655_SetResolution+0x1a2>
 8009124:	4653      	mov	r3, sl
      for(index=0; index< (sizeof(OV9655_QVGA)/2U); index++)
 8009126:	2b05      	cmp	r3, #5
 8009128:	d1e0      	bne.n	80090ec <OV9655_SetResolution+0x174>
 800912a:	e767      	b.n	8008ffc <OV9655_SetResolution+0x84>
      for(index=0; index<(sizeof(OV9655_QVGA_QQVGA)/2U); index++)
 800912c:	2e90      	cmp	r6, #144	; 0x90
 800912e:	f106 0602 	add.w	r6, r6, #2
 8009132:	d001      	beq.n	8009138 <OV9655_SetResolution+0x1c0>
 8009134:	2e91      	cmp	r6, #145	; 0x91
 8009136:	d1f9      	bne.n	800912c <OV9655_SetResolution+0x1b4>
      for(index=0; index< (sizeof(OV9655_QVGA)/2U); index++)
 8009138:	f1ba 0f05 	cmp.w	sl, #5
 800913c:	f43f af5c 	beq.w	8008ff8 <OV9655_SetResolution+0x80>
 8009140:	f1ba 0f04 	cmp.w	sl, #4
 8009144:	f10a 0a02 	add.w	sl, sl, #2
 8009148:	d1f6      	bne.n	8009138 <OV9655_SetResolution+0x1c0>
 800914a:	e755      	b.n	8008ff8 <OV9655_SetResolution+0x80>
 800914c:	080bf8d0 	.word	0x080bf8d0
 8009150:	080bfa00 	.word	0x080bfa00
 8009154:	080bf8dc 	.word	0x080bf8dc
 8009158:	080bf8c4 	.word	0x080bf8c4

0800915c <OV9655_SetColorEffect>:
  switch(Effect)
 800915c:	3901      	subs	r1, #1
{
 800915e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009160:	f100 0518 	add.w	r5, r0, #24
 8009164:	b083      	sub	sp, #12
  switch(Effect)
 8009166:	291f      	cmp	r1, #31
 8009168:	f200 8153 	bhi.w	8009412 <OV9655_SetColorEffect+0x2b6>
 800916c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8009170:	00a00064 	.word	0x00a00064
 8009174:	00d20151 	.word	0x00d20151
 8009178:	01510151 	.word	0x01510151
 800917c:	01070151 	.word	0x01070151
 8009180:	01510151 	.word	0x01510151
 8009184:	01510151 	.word	0x01510151
 8009188:	01510151 	.word	0x01510151
 800918c:	01210151 	.word	0x01210151
 8009190:	01510151 	.word	0x01510151
 8009194:	01510151 	.word	0x01510151
 8009198:	01510151 	.word	0x01510151
 800919c:	01510151 	.word	0x01510151
 80091a0:	01510151 	.word	0x01510151
 80091a4:	01510151 	.word	0x01510151
 80091a8:	01510151 	.word	0x01510151
 80091ac:	00200151 	.word	0x00200151
    tmp = 0xEC;
 80091b0:	22ec      	movs	r2, #236	; 0xec
    tmp = 0xCC;
 80091b2:	ae02      	add	r6, sp, #8
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80091b4:	2301      	movs	r3, #1
 80091b6:	213a      	movs	r1, #58	; 0x3a
 80091b8:	4628      	mov	r0, r5
    tmp = 0xCC;
 80091ba:	f806 2d01 	strb.w	r2, [r6, #-1]!
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80091be:	4632      	mov	r2, r6
 80091c0:	f000 faf0 	bl	80097a4 <ov9655_write_reg>
    tmp = 0x80;
 80091c4:	2780      	movs	r7, #128	; 0x80
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80091c6:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 80091c8:	4632      	mov	r2, r6
 80091ca:	2301      	movs	r3, #1
 80091cc:	214f      	movs	r1, #79	; 0x4f
 80091ce:	4628      	mov	r0, r5
    tmp = 0x80;
 80091d0:	f88d 7007 	strb.w	r7, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 80091d4:	f000 fae6 	bl	80097a4 <ov9655_write_reg>
 80091d8:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 80091da:	4632      	mov	r2, r6
 80091dc:	2301      	movs	r3, #1
 80091de:	2150      	movs	r1, #80	; 0x50
 80091e0:	4628      	mov	r0, r5
 80091e2:	f000 fadf 	bl	80097a4 <ov9655_write_reg>
    tmp = 0x00;
 80091e6:	f04f 0c00 	mov.w	ip, #0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 80091ea:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 80091ec:	4632      	mov	r2, r6
 80091ee:	2301      	movs	r3, #1
 80091f0:	2151      	movs	r1, #81	; 0x51
 80091f2:	4628      	mov	r0, r5
    tmp = 0x00;
 80091f4:	f88d c007 	strb.w	ip, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 80091f8:	f000 fad4 	bl	80097a4 <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 80091fc:	4632      	mov	r2, r6
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 80091fe:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8009200:	2301      	movs	r3, #1
 8009202:	2152      	movs	r1, #82	; 0x52
 8009204:	4628      	mov	r0, r5
 8009206:	f000 facd 	bl	80097a4 <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 800920a:	4632      	mov	r2, r6
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 800920c:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 800920e:	2301      	movs	r3, #1
 8009210:	2153      	movs	r1, #83	; 0x53
 8009212:	4628      	mov	r0, r5
    tmp = 0x80;
 8009214:	f88d 7007 	strb.w	r7, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8009218:	f000 fac4 	bl	80097a4 <ov9655_write_reg>
 800921c:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 800921e:	4632      	mov	r2, r6
 8009220:	4628      	mov	r0, r5
 8009222:	2301      	movs	r3, #1
 8009224:	2154      	movs	r1, #84	; 0x54
 8009226:	f000 fabd 	bl	80097a4 <ov9655_write_reg>
 800922a:	4420      	add	r0, r4
  if(ret != OV9655_OK)
 800922c:	3000      	adds	r0, #0
 800922e:	bf18      	it	ne
 8009230:	2001      	movne	r0, #1
}
 8009232:	4240      	negs	r0, r0
 8009234:	b003      	add	sp, #12
 8009236:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp = 0xCC;
 8009238:	ae02      	add	r6, sp, #8
 800923a:	22cc      	movs	r2, #204	; 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 800923c:	2301      	movs	r3, #1
 800923e:	213a      	movs	r1, #58	; 0x3a
    tmp = 0xCC;
 8009240:	f806 2d01 	strb.w	r2, [r6, #-1]!
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8009244:	4628      	mov	r0, r5
 8009246:	4632      	mov	r2, r6
    tmp = 0x00;
 8009248:	2700      	movs	r7, #0
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 800924a:	f000 faab 	bl	80097a4 <ov9655_write_reg>
 800924e:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8009250:	4632      	mov	r2, r6
 8009252:	2301      	movs	r3, #1
 8009254:	214f      	movs	r1, #79	; 0x4f
 8009256:	4628      	mov	r0, r5
    tmp = 0x00;
 8009258:	f88d 7007 	strb.w	r7, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 800925c:	f000 faa2 	bl	80097a4 <ov9655_write_reg>
 8009260:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8009262:	4632      	mov	r2, r6
 8009264:	2301      	movs	r3, #1
 8009266:	2150      	movs	r1, #80	; 0x50
 8009268:	4628      	mov	r0, r5
    tmp = 0x60;
 800926a:	2760      	movs	r7, #96	; 0x60
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 800926c:	f000 fa9a 	bl	80097a4 <ov9655_write_reg>
 8009270:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8009272:	4632      	mov	r2, r6
 8009274:	2301      	movs	r3, #1
 8009276:	2151      	movs	r1, #81	; 0x51
 8009278:	4628      	mov	r0, r5
 800927a:	f000 fa93 	bl	80097a4 <ov9655_write_reg>
 800927e:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8009280:	4632      	mov	r2, r6
 8009282:	2301      	movs	r3, #1
 8009284:	2152      	movs	r1, #82	; 0x52
 8009286:	4628      	mov	r0, r5
 8009288:	f000 fa8c 	bl	80097a4 <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 800928c:	4632      	mov	r2, r6
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 800928e:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8009290:	2301      	movs	r3, #1
 8009292:	2153      	movs	r1, #83	; 0x53
 8009294:	4628      	mov	r0, r5
 8009296:	f000 fa85 	bl	80097a4 <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 800929a:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 800929c:	4632      	mov	r2, r6
 800929e:	4628      	mov	r0, r5
 80092a0:	2301      	movs	r3, #1
 80092a2:	2154      	movs	r1, #84	; 0x54
    tmp = 0x00;
 80092a4:	f88d 7007 	strb.w	r7, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 80092a8:	f000 fa7c 	bl	80097a4 <ov9655_write_reg>
 80092ac:	4420      	add	r0, r4
    break;
 80092ae:	e7bd      	b.n	800922c <OV9655_SetColorEffect+0xd0>
    tmp = 0xCC;
 80092b0:	ae02      	add	r6, sp, #8
 80092b2:	22cc      	movs	r2, #204	; 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80092b4:	2301      	movs	r3, #1
 80092b6:	213a      	movs	r1, #58	; 0x3a
    tmp = 0xCC;
 80092b8:	f806 2d01 	strb.w	r2, [r6, #-1]!
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80092bc:	4628      	mov	r0, r5
 80092be:	4632      	mov	r2, r6
    tmp = 0x60;
 80092c0:	2760      	movs	r7, #96	; 0x60
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80092c2:	f000 fa6f 	bl	80097a4 <ov9655_write_reg>
 80092c6:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 80092c8:	4632      	mov	r2, r6
 80092ca:	2301      	movs	r3, #1
 80092cc:	214f      	movs	r1, #79	; 0x4f
 80092ce:	4628      	mov	r0, r5
    tmp = 0x60;
 80092d0:	f88d 7007 	strb.w	r7, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 80092d4:	f000 fa66 	bl	80097a4 <ov9655_write_reg>
    tmp = 0x00;
 80092d8:	2700      	movs	r7, #0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 80092da:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 80092dc:	4632      	mov	r2, r6
 80092de:	2301      	movs	r3, #1
 80092e0:	2150      	movs	r1, #80	; 0x50
 80092e2:	4628      	mov	r0, r5
    tmp = 0x00;
 80092e4:	f88d 7007 	strb.w	r7, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 80092e8:	f000 fa5c 	bl	80097a4 <ov9655_write_reg>
 80092ec:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 80092ee:	4632      	mov	r2, r6
 80092f0:	2301      	movs	r3, #1
 80092f2:	2151      	movs	r1, #81	; 0x51
 80092f4:	4628      	mov	r0, r5
 80092f6:	f000 fa55 	bl	80097a4 <ov9655_write_reg>
 80092fa:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 80092fc:	4632      	mov	r2, r6
 80092fe:	2301      	movs	r3, #1
 8009300:	2152      	movs	r1, #82	; 0x52
 8009302:	4628      	mov	r0, r5
 8009304:	f000 fa4e 	bl	80097a4 <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8009308:	4632      	mov	r2, r6
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 800930a:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 800930c:	2301      	movs	r3, #1
 800930e:	2153      	movs	r1, #83	; 0x53
 8009310:	4628      	mov	r0, r5
 8009312:	e781      	b.n	8009218 <OV9655_SetColorEffect+0xbc>
    tmp = 0xCC;
 8009314:	ae02      	add	r6, sp, #8
 8009316:	22cc      	movs	r2, #204	; 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8009318:	2301      	movs	r3, #1
 800931a:	213a      	movs	r1, #58	; 0x3a
    tmp = 0xCC;
 800931c:	f806 2d01 	strb.w	r2, [r6, #-1]!
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8009320:	4628      	mov	r0, r5
 8009322:	4632      	mov	r2, r6
    tmp = 0x00;
 8009324:	2700      	movs	r7, #0
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8009326:	f000 fa3d 	bl	80097a4 <ov9655_write_reg>
 800932a:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 800932c:	4632      	mov	r2, r6
 800932e:	2301      	movs	r3, #1
 8009330:	214f      	movs	r1, #79	; 0x4f
 8009332:	4628      	mov	r0, r5
    tmp = 0x00;
 8009334:	f88d 7007 	strb.w	r7, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8009338:	f000 fa34 	bl	80097a4 <ov9655_write_reg>
 800933c:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 800933e:	4632      	mov	r2, r6
 8009340:	2301      	movs	r3, #1
 8009342:	2150      	movs	r1, #80	; 0x50
 8009344:	4628      	mov	r0, r5
 8009346:	f000 fa2d 	bl	80097a4 <ov9655_write_reg>
 800934a:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 800934c:	4632      	mov	r2, r6
 800934e:	2301      	movs	r3, #1
 8009350:	2151      	movs	r1, #81	; 0x51
 8009352:	4628      	mov	r0, r5
 8009354:	f000 fa26 	bl	80097a4 <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8009358:	4632      	mov	r2, r6
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 800935a:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 800935c:	2301      	movs	r3, #1
 800935e:	2152      	movs	r1, #82	; 0x52
 8009360:	4628      	mov	r0, r5
 8009362:	f000 fa1f 	bl	80097a4 <ov9655_write_reg>
    tmp = 0x80;
 8009366:	f04f 0c80 	mov.w	ip, #128	; 0x80
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 800936a:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 800936c:	4632      	mov	r2, r6
 800936e:	2301      	movs	r3, #1
 8009370:	2153      	movs	r1, #83	; 0x53
 8009372:	4628      	mov	r0, r5
    tmp = 0x80;
 8009374:	f88d c007 	strb.w	ip, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8009378:	f000 fa14 	bl	80097a4 <ov9655_write_reg>
 800937c:	e78d      	b.n	800929a <OV9655_SetColorEffect+0x13e>
    tmp = 0xCC;
 800937e:	ae02      	add	r6, sp, #8
 8009380:	22cc      	movs	r2, #204	; 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8009382:	2301      	movs	r3, #1
 8009384:	213a      	movs	r1, #58	; 0x3a
    tmp = 0xCC;
 8009386:	f806 2d01 	strb.w	r2, [r6, #-1]!
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 800938a:	4628      	mov	r0, r5
 800938c:	4632      	mov	r2, r6
    tmp = 0x00;
 800938e:	2700      	movs	r7, #0
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8009390:	f000 fa08 	bl	80097a4 <ov9655_write_reg>
 8009394:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8009396:	4632      	mov	r2, r6
 8009398:	2301      	movs	r3, #1
 800939a:	214f      	movs	r1, #79	; 0x4f
 800939c:	4628      	mov	r0, r5
    tmp = 0x00;
 800939e:	f88d 7007 	strb.w	r7, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 80093a2:	f000 f9ff 	bl	80097a4 <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 80093a6:	4632      	mov	r2, r6
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 80093a8:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 80093aa:	2301      	movs	r3, #1
 80093ac:	2150      	movs	r1, #80	; 0x50
 80093ae:	4628      	mov	r0, r5
 80093b0:	e79a      	b.n	80092e8 <OV9655_SetColorEffect+0x18c>
    tmp = 0xCC;
 80093b2:	ae02      	add	r6, sp, #8
 80093b4:	22cc      	movs	r2, #204	; 0xcc
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80093b6:	2301      	movs	r3, #1
 80093b8:	213a      	movs	r1, #58	; 0x3a
    tmp = 0xCC;
 80093ba:	f806 2d01 	strb.w	r2, [r6, #-1]!
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80093be:	4628      	mov	r0, r5
 80093c0:	4632      	mov	r2, r6
    tmp = 0x00;
 80093c2:	2700      	movs	r7, #0
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80093c4:	f000 f9ee 	bl	80097a4 <ov9655_write_reg>
 80093c8:	4604      	mov	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 80093ca:	4632      	mov	r2, r6
 80093cc:	2301      	movs	r3, #1
 80093ce:	214f      	movs	r1, #79	; 0x4f
 80093d0:	4628      	mov	r0, r5
    tmp = 0x00;
 80093d2:	f88d 7007 	strb.w	r7, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 80093d6:	f000 f9e5 	bl	80097a4 <ov9655_write_reg>
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 80093da:	4632      	mov	r2, r6
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 80093dc:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 80093de:	2301      	movs	r3, #1
 80093e0:	2150      	movs	r1, #80	; 0x50
 80093e2:	4628      	mov	r0, r5
 80093e4:	f000 f9de 	bl	80097a4 <ov9655_write_reg>
    tmp = 0x20;
 80093e8:	f04f 0c20 	mov.w	ip, #32
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 80093ec:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 80093ee:	4632      	mov	r2, r6
 80093f0:	2301      	movs	r3, #1
 80093f2:	2151      	movs	r1, #81	; 0x51
 80093f4:	4628      	mov	r0, r5
    tmp = 0x20;
 80093f6:	f88d c007 	strb.w	ip, [sp, #7]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 80093fa:	f000 f9d3 	bl	80097a4 <ov9655_write_reg>
    tmp = 0xF0;
 80093fe:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8009402:	4404      	add	r4, r0
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8009404:	4632      	mov	r2, r6
 8009406:	2301      	movs	r3, #1
 8009408:	2152      	movs	r1, #82	; 0x52
 800940a:	4628      	mov	r0, r5
    tmp = 0xF0;
 800940c:	f88d c007 	strb.w	ip, [sp, #7]
 8009410:	e6f9      	b.n	8009206 <OV9655_SetColorEffect+0xaa>
    tmp = 0xCC;
 8009412:	22cc      	movs	r2, #204	; 0xcc
 8009414:	e6cd      	b.n	80091b2 <OV9655_SetColorEffect+0x56>
 8009416:	bf00      	nop

08009418 <OV9655_SetBrightness>:
{
 8009418:	b570      	push	{r4, r5, r6, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	4606      	mov	r6, r0
  const uint8_t brightness_level[] = {0xB0U, 0xB0U, 0xB0U, 0x98U, 0x00U, 0x18U, 0x30U, 0x30U, 0x30U};
 800941e:	4a0c      	ldr	r2, [pc, #48]	; (8009450 <OV9655_SetBrightness+0x38>)
  tmp = brightness_level[Level + 4];
 8009420:	a804      	add	r0, sp, #16
  const uint8_t brightness_level[] = {0xB0U, 0xB0U, 0xB0U, 0x98U, 0x00U, 0x18U, 0x30U, 0x30U, 0x30U};
 8009422:	ab01      	add	r3, sp, #4
  tmp = brightness_level[Level + 4];
 8009424:	4604      	mov	r4, r0
 8009426:	1845      	adds	r5, r0, r1
  const uint8_t brightness_level[] = {0xB0U, 0xB0U, 0xB0U, 0x98U, 0x00U, 0x18U, 0x30U, 0x30U, 0x30U};
 8009428:	ca07      	ldmia	r2, {r0, r1, r2}
 800942a:	c303      	stmia	r3!, {r0, r1}
 800942c:	701a      	strb	r2, [r3, #0]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_BRIGHTNESS_ADJUSTMENT, &tmp, 1) != OV9655_OK)
 800942e:	f106 0018 	add.w	r0, r6, #24
  tmp = brightness_level[Level + 4];
 8009432:	f815 2c08 	ldrb.w	r2, [r5, #-8]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_BRIGHTNESS_ADJUSTMENT, &tmp, 1) != OV9655_OK)
 8009436:	2301      	movs	r3, #1
 8009438:	2155      	movs	r1, #85	; 0x55
  tmp = brightness_level[Level + 4];
 800943a:	f804 2d0d 	strb.w	r2, [r4, #-13]!
  if(ov9655_write_reg(&pObj->Ctx, OV9655_BRIGHTNESS_ADJUSTMENT, &tmp, 1) != OV9655_OK)
 800943e:	4622      	mov	r2, r4
 8009440:	f000 f9b0 	bl	80097a4 <ov9655_write_reg>
 8009444:	3000      	adds	r0, #0
 8009446:	bf18      	it	ne
 8009448:	2001      	movne	r0, #1
}
 800944a:	4240      	negs	r0, r0
 800944c:	b004      	add	sp, #16
 800944e:	bd70      	pop	{r4, r5, r6, pc}
 8009450:	08028988 	.word	0x08028988

08009454 <OV9655_SetContrast>:
{
 8009454:	b570      	push	{r4, r5, r6, lr}
 8009456:	b084      	sub	sp, #16
 8009458:	4606      	mov	r6, r0
  const uint8_t contrast_level[] = {0x30U, 0x30U, 0x30U, 0x38U, 0x40U, 0x50U, 0x60U, 0x60U, 0x60U};
 800945a:	4a0c      	ldr	r2, [pc, #48]	; (800948c <OV9655_SetContrast+0x38>)
  tmp = contrast_level[Level + 4];
 800945c:	a804      	add	r0, sp, #16
  const uint8_t contrast_level[] = {0x30U, 0x30U, 0x30U, 0x38U, 0x40U, 0x50U, 0x60U, 0x60U, 0x60U};
 800945e:	ab01      	add	r3, sp, #4
  tmp = contrast_level[Level + 4];
 8009460:	4604      	mov	r4, r0
 8009462:	1845      	adds	r5, r0, r1
  const uint8_t contrast_level[] = {0x30U, 0x30U, 0x30U, 0x38U, 0x40U, 0x50U, 0x60U, 0x60U, 0x60U};
 8009464:	ca07      	ldmia	r2, {r0, r1, r2}
 8009466:	c303      	stmia	r3!, {r0, r1}
 8009468:	701a      	strb	r2, [r3, #0]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_CONTRAST_COEFFICIENT_1, &tmp, 1) != OV9655_OK)
 800946a:	f106 0018 	add.w	r0, r6, #24
  tmp = contrast_level[Level + 4];
 800946e:	f815 2c08 	ldrb.w	r2, [r5, #-8]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_CONTRAST_COEFFICIENT_1, &tmp, 1) != OV9655_OK)
 8009472:	2301      	movs	r3, #1
 8009474:	2156      	movs	r1, #86	; 0x56
  tmp = contrast_level[Level + 4];
 8009476:	f804 2d0d 	strb.w	r2, [r4, #-13]!
  if(ov9655_write_reg(&pObj->Ctx, OV9655_CONTRAST_COEFFICIENT_1, &tmp, 1) != OV9655_OK)
 800947a:	4622      	mov	r2, r4
 800947c:	f000 f992 	bl	80097a4 <ov9655_write_reg>
 8009480:	3000      	adds	r0, #0
 8009482:	bf18      	it	ne
 8009484:	2001      	movne	r0, #1
}
 8009486:	4240      	negs	r0, r0
 8009488:	b004      	add	sp, #16
 800948a:	bd70      	pop	{r4, r5, r6, pc}
 800948c:	08028994 	.word	0x08028994

08009490 <OV9655_SetPixelFormat>:
  if((PixelFormat != OV9655_RGB565) && (PixelFormat != OV9655_YUV422))
 8009490:	f031 0302 	bics.w	r3, r1, #2
{
 8009494:	b530      	push	{r4, r5, lr}
 8009496:	b083      	sub	sp, #12
  if((PixelFormat != OV9655_RGB565) && (PixelFormat != OV9655_YUV422))
 8009498:	d14d      	bne.n	8009536 <OV9655_SetPixelFormat+0xa6>
  else if(ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 800949a:	f100 0418 	add.w	r4, r0, #24
 800949e:	460d      	mov	r5, r1
 80094a0:	2301      	movs	r3, #1
 80094a2:	2112      	movs	r1, #18
 80094a4:	4620      	mov	r0, r4
 80094a6:	f10d 0207 	add.w	r2, sp, #7
 80094aa:	f000 f973 	bl	8009794 <ov9655_read_reg>
 80094ae:	2800      	cmp	r0, #0
 80094b0:	d141      	bne.n	8009536 <OV9655_SetPixelFormat+0xa6>
    tmp &= ~0x03U; /* Reset Bit[0:1] corresponding to pixel format selection */
 80094b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    switch (PixelFormat)
 80094b6:	2d02      	cmp	r5, #2
    tmp &= ~0x03U; /* Reset Bit[0:1] corresponding to pixel format selection */
 80094b8:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    switch (PixelFormat)
 80094bc:	d140      	bne.n	8009540 <OV9655_SetPixelFormat+0xb0>
      tmp |= 0x02U;
 80094be:	f043 0502 	orr.w	r5, r3, #2
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 80094c2:	f10d 0207 	add.w	r2, sp, #7
 80094c6:	2301      	movs	r3, #1
 80094c8:	2112      	movs	r1, #18
 80094ca:	4620      	mov	r0, r4
      tmp |= 0x02U;
 80094cc:	f88d 5007 	strb.w	r5, [sp, #7]
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 80094d0:	f000 f968 	bl	80097a4 <ov9655_write_reg>
 80094d4:	bb78      	cbnz	r0, 8009536 <OV9655_SetPixelFormat+0xa6>
        if(ov9655_read_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1) != OV9655_OK)
 80094d6:	2301      	movs	r3, #1
 80094d8:	f10d 0207 	add.w	r2, sp, #7
 80094dc:	213a      	movs	r1, #58	; 0x3a
 80094de:	4620      	mov	r0, r4
 80094e0:	f000 f958 	bl	8009794 <ov9655_read_reg>
 80094e4:	bb38      	cbnz	r0, 8009536 <OV9655_SetPixelFormat+0xa6>
          tmp &= ~(3 << 2); /* Clear bits 3:2: YUV output sequence is 0:yuyv */
 80094e6:	f89d 5007 	ldrb.w	r5, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1) != OV9655_OK)
 80094ea:	2301      	movs	r3, #1
 80094ec:	f10d 0207 	add.w	r2, sp, #7
 80094f0:	213a      	movs	r1, #58	; 0x3a
          tmp &= ~(3 << 2); /* Clear bits 3:2: YUV output sequence is 0:yuyv */
 80094f2:	f025 052c 	bic.w	r5, r5, #44	; 0x2c
          if(ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1) != OV9655_OK)
 80094f6:	4620      	mov	r0, r4
          tmp &= ~(3 << 2); /* Clear bits 3:2: YUV output sequence is 0:yuyv */
 80094f8:	f88d 5007 	strb.w	r5, [sp, #7]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1) != OV9655_OK)
 80094fc:	f000 f952 	bl	80097a4 <ov9655_write_reg>
 8009500:	b9c8      	cbnz	r0, 8009536 <OV9655_SetPixelFormat+0xa6>
            if(ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 8009502:	2301      	movs	r3, #1
 8009504:	f10d 0207 	add.w	r2, sp, #7
 8009508:	2140      	movs	r1, #64	; 0x40
 800950a:	4620      	mov	r0, r4
 800950c:	f000 f942 	bl	8009794 <ov9655_read_reg>
 8009510:	4605      	mov	r5, r0
 8009512:	2800      	cmp	r0, #0
 8009514:	d13e      	bne.n	8009594 <OV9655_SetPixelFormat+0x104>
                tmp &= ~(3 << 4); /* Clear bits 5:4: RGB 555/565 option */
 8009516:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800951a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800951e:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8009522:	f88d 3007 	strb.w	r3, [sp, #7]
            if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 8009526:	f10d 0207 	add.w	r2, sp, #7
 800952a:	4620      	mov	r0, r4
 800952c:	2301      	movs	r3, #1
 800952e:	2140      	movs	r1, #64	; 0x40
 8009530:	f000 f938 	bl	80097a4 <ov9655_write_reg>
 8009534:	b358      	cbz	r0, 800958e <OV9655_SetPixelFormat+0xfe>
              ret = OV9655_ERROR;
 8009536:	f04f 35ff 	mov.w	r5, #4294967295
}
 800953a:	4628      	mov	r0, r5
 800953c:	b003      	add	sp, #12
 800953e:	bd30      	pop	{r4, r5, pc}
      tmp |= 0x03U;
 8009540:	f043 0503 	orr.w	r5, r3, #3
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 8009544:	f10d 0207 	add.w	r2, sp, #7
 8009548:	2301      	movs	r3, #1
 800954a:	2112      	movs	r1, #18
 800954c:	4620      	mov	r0, r4
      tmp |= 0x03U;
 800954e:	f88d 5007 	strb.w	r5, [sp, #7]
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 8009552:	f000 f927 	bl	80097a4 <ov9655_write_reg>
 8009556:	2800      	cmp	r0, #0
 8009558:	d1ed      	bne.n	8009536 <OV9655_SetPixelFormat+0xa6>
      else if(ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 800955a:	2301      	movs	r3, #1
 800955c:	f10d 0207 	add.w	r2, sp, #7
 8009560:	2140      	movs	r1, #64	; 0x40
 8009562:	4620      	mov	r0, r4
 8009564:	f000 f916 	bl	8009794 <ov9655_read_reg>
 8009568:	2800      	cmp	r0, #0
 800956a:	d1e4      	bne.n	8009536 <OV9655_SetPixelFormat+0xa6>
        tmp |= 0x10U;
 800956c:	f89d 1007 	ldrb.w	r1, [sp, #7]
        if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 8009570:	4620      	mov	r0, r4
 8009572:	f10d 0207 	add.w	r2, sp, #7
 8009576:	2301      	movs	r3, #1
        tmp |= 0x10U;
 8009578:	f041 0410 	orr.w	r4, r1, #16
        if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 800957c:	2140      	movs	r1, #64	; 0x40
        tmp |= 0x10U;
 800957e:	f88d 4007 	strb.w	r4, [sp, #7]
        if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 8009582:	f000 f90f 	bl	80097a4 <ov9655_write_reg>
 8009586:	3000      	adds	r0, #0
 8009588:	bf18      	it	ne
 800958a:	2001      	movne	r0, #1
 800958c:	4245      	negs	r5, r0
}
 800958e:	4628      	mov	r0, r5
 8009590:	b003      	add	sp, #12
 8009592:	bd30      	pop	{r4, r5, pc}
              ret = OV9655_ERROR;
 8009594:	f04f 35ff 	mov.w	r5, #4294967295
 8009598:	e7c5      	b.n	8009526 <OV9655_SetPixelFormat+0x96>
 800959a:	bf00      	nop

0800959c <OV9655_GetResolution>:
{
 800959c:	b510      	push	{r4, lr}
 800959e:	b082      	sub	sp, #8
 80095a0:	460c      	mov	r4, r1
  if(ov9655_read_reg(&pObj->Ctx, OV9655_HORIZONTAL_FRAME_CTRL, &tmp, 1) != OV9655_OK)
 80095a2:	3018      	adds	r0, #24
 80095a4:	2301      	movs	r3, #1
 80095a6:	f10d 0207 	add.w	r2, sp, #7
 80095aa:	2132      	movs	r1, #50	; 0x32
 80095ac:	f000 f8f2 	bl	8009794 <ov9655_read_reg>
 80095b0:	b938      	cbnz	r0, 80095c2 <OV9655_GetResolution+0x26>
    switch (tmp)
 80095b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80095b6:	2ba4      	cmp	r3, #164	; 0xa4
 80095b8:	d00b      	beq.n	80095d2 <OV9655_GetResolution+0x36>
 80095ba:	2bff      	cmp	r3, #255	; 0xff
 80095bc:	d005      	beq.n	80095ca <OV9655_GetResolution+0x2e>
 80095be:	2b12      	cmp	r3, #18
 80095c0:	d00a      	beq.n	80095d8 <OV9655_GetResolution+0x3c>
      ret = OV9655_ERROR;
 80095c2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80095c6:	b002      	add	sp, #8
 80095c8:	bd10      	pop	{r4, pc}
      *Resolution = OV9655_R640x480;
 80095ca:	2303      	movs	r3, #3
 80095cc:	6023      	str	r3, [r4, #0]
}
 80095ce:	b002      	add	sp, #8
 80095d0:	bd10      	pop	{r4, pc}
      *Resolution = OV9655_R160x120;
 80095d2:	6020      	str	r0, [r4, #0]
}
 80095d4:	b002      	add	sp, #8
 80095d6:	bd10      	pop	{r4, pc}
      *Resolution = OV9655_R320x240;
 80095d8:	2301      	movs	r3, #1
 80095da:	6023      	str	r3, [r4, #0]
}
 80095dc:	b002      	add	sp, #8
 80095de:	bd10      	pop	{r4, pc}

080095e0 <OV9655_ReadID>:
{
 80095e0:	b530      	push	{r4, r5, lr}
  pObj->IO.Init();
 80095e2:	4604      	mov	r4, r0
{
 80095e4:	b083      	sub	sp, #12
 80095e6:	460d      	mov	r5, r1
  pObj->IO.Init();
 80095e8:	f854 3b18 	ldr.w	r3, [r4], #24
 80095ec:	4798      	blx	r3
    if(ov9655_read_reg(&pObj->Ctx, OV9655_PID_NUMBER_HIGH, &tmp, 1)!= OV9655_OK)
 80095ee:	f10d 0207 	add.w	r2, sp, #7
 80095f2:	4620      	mov	r0, r4
 80095f4:	2301      	movs	r3, #1
 80095f6:	210a      	movs	r1, #10
 80095f8:	f000 f8cc 	bl	8009794 <ov9655_read_reg>
 80095fc:	b990      	cbnz	r0, 8009624 <OV9655_ReadID+0x44>
      *Id = (uint32_t)tmp << 8U;
 80095fe:	f89d 1007 	ldrb.w	r1, [sp, #7]
      if(ov9655_read_reg(&pObj->Ctx, OV9655_PID_NUMBER_LOW, &tmp, 1)!= OV9655_OK)
 8009602:	4620      	mov	r0, r4
 8009604:	f10d 0207 	add.w	r2, sp, #7
 8009608:	2301      	movs	r3, #1
      *Id = (uint32_t)tmp << 8U;
 800960a:	020c      	lsls	r4, r1, #8
      if(ov9655_read_reg(&pObj->Ctx, OV9655_PID_NUMBER_LOW, &tmp, 1)!= OV9655_OK)
 800960c:	210b      	movs	r1, #11
      *Id = (uint32_t)tmp << 8U;
 800960e:	602c      	str	r4, [r5, #0]
      if(ov9655_read_reg(&pObj->Ctx, OV9655_PID_NUMBER_LOW, &tmp, 1)!= OV9655_OK)
 8009610:	f000 f8c0 	bl	8009794 <ov9655_read_reg>
 8009614:	b930      	cbnz	r0, 8009624 <OV9655_ReadID+0x44>
        *Id |= tmp;
 8009616:	682b      	ldr	r3, [r5, #0]
 8009618:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800961c:	4313      	orrs	r3, r2
 800961e:	602b      	str	r3, [r5, #0]
}
 8009620:	b003      	add	sp, #12
 8009622:	bd30      	pop	{r4, r5, pc}
      ret = OV9655_ERROR;
 8009624:	f04f 30ff 	mov.w	r0, #4294967295
 8009628:	e7fa      	b.n	8009620 <OV9655_ReadID+0x40>
 800962a:	bf00      	nop

0800962c <OV9655_MirrorFlipConfig>:
  if(Config > OV9655_MIRROR_FLIP)
 800962c:	2903      	cmp	r1, #3
 800962e:	d824      	bhi.n	800967a <OV9655_MirrorFlipConfig+0x4e>
    if(ov9655_read_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 8009630:	2301      	movs	r3, #1
{
 8009632:	b570      	push	{r4, r5, r6, lr}
    if(ov9655_read_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 8009634:	f100 0418 	add.w	r4, r0, #24
{
 8009638:	b082      	sub	sp, #8
 800963a:	460e      	mov	r6, r1
    if(ov9655_read_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 800963c:	211e      	movs	r1, #30
 800963e:	4620      	mov	r0, r4
 8009640:	f10d 0207 	add.w	r2, sp, #7
 8009644:	f000 f8a6 	bl	8009794 <ov9655_read_reg>
 8009648:	b9a0      	cbnz	r0, 8009674 <OV9655_MirrorFlipConfig+0x48>
      tmp &= ~(3U << 4U);    /* Clear Bit[5:4] Mirror/VFlip */
 800964a:	f89d 5007 	ldrb.w	r5, [sp, #7]
      if(ov9655_write_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 800964e:	4620      	mov	r0, r4
 8009650:	f10d 0207 	add.w	r2, sp, #7
 8009654:	2301      	movs	r3, #1
      tmp &= ~(3U << 4U);    /* Clear Bit[5:4] Mirror/VFlip */
 8009656:	f025 0430 	bic.w	r4, r5, #48	; 0x30
      if(ov9655_write_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 800965a:	211e      	movs	r1, #30
      tmp |= (Config << 4U); /* Configure Bit[5:4] Mirror/VFlip */
 800965c:	ea44 1406 	orr.w	r4, r4, r6, lsl #4
 8009660:	f88d 4007 	strb.w	r4, [sp, #7]
      if(ov9655_write_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 8009664:	f000 f89e 	bl	80097a4 <ov9655_write_reg>
 8009668:	3000      	adds	r0, #0
 800966a:	bf18      	it	ne
 800966c:	2001      	movne	r0, #1
 800966e:	4240      	negs	r0, r0
}
 8009670:	b002      	add	sp, #8
 8009672:	bd70      	pop	{r4, r5, r6, pc}
    ret = OV9655_ERROR;
 8009674:	f04f 30ff 	mov.w	r0, #4294967295
 8009678:	e7fa      	b.n	8009670 <OV9655_MirrorFlipConfig+0x44>
 800967a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800967e:	4770      	bx	lr

08009680 <OV9655_NightModeConfig>:
{
 8009680:	b570      	push	{r4, r5, r6, lr}
  if(ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL11, &tmp, 1) != OV9655_OK)
 8009682:	f100 0518 	add.w	r5, r0, #24
{
 8009686:	b082      	sub	sp, #8
 8009688:	460e      	mov	r6, r1
  if(ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL11, &tmp, 1) != OV9655_OK)
 800968a:	2301      	movs	r3, #1
 800968c:	4628      	mov	r0, r5
 800968e:	f10d 0207 	add.w	r2, sp, #7
 8009692:	213b      	movs	r1, #59	; 0x3b
 8009694:	f000 f87e 	bl	8009794 <ov9655_read_reg>
 8009698:	b9b0      	cbnz	r0, 80096c8 <OV9655_NightModeConfig+0x48>
 800969a:	f89d 4007 	ldrb.w	r4, [sp, #7]
    if(Cmd == NIGHT_MODE_ENABLE)
 800969e:	2e01      	cmp	r6, #1
    if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL11 ,&tmp, 1) != OV9655_OK)
 80096a0:	f10d 0207 	add.w	r2, sp, #7
 80096a4:	4628      	mov	r0, r5
      tmp |= 0x80U;
 80096a6:	bf0c      	ite	eq
 80096a8:	f044 0480 	orreq.w	r4, r4, #128	; 0x80
      tmp &= 0x7FU;
 80096ac:	f004 047f 	andne.w	r4, r4, #127	; 0x7f
    if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL11 ,&tmp, 1) != OV9655_OK)
 80096b0:	2301      	movs	r3, #1
 80096b2:	213b      	movs	r1, #59	; 0x3b
 80096b4:	f88d 4007 	strb.w	r4, [sp, #7]
 80096b8:	f000 f874 	bl	80097a4 <ov9655_write_reg>
 80096bc:	3000      	adds	r0, #0
 80096be:	bf18      	it	ne
 80096c0:	2001      	movne	r0, #1
 80096c2:	4240      	negs	r0, r0
}
 80096c4:	b002      	add	sp, #8
 80096c6:	bd70      	pop	{r4, r5, r6, pc}
    ret = OV9655_ERROR;
 80096c8:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80096cc:	e7fa      	b.n	80096c4 <OV9655_NightModeConfig+0x44>
 80096ce:	bf00      	nop

080096d0 <OV9655_Init>:
  if(pObj->IsInitialized == 0U)
 80096d0:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80096d4:	bb5b      	cbnz	r3, 800972e <OV9655_Init+0x5e>
    if((Resolution > OV9655_R640x480) || ((PixelFormat != OV9655_RGB565) && (PixelFormat != OV9655_YUV422)))
 80096d6:	2903      	cmp	r1, #3
 80096d8:	d82e      	bhi.n	8009738 <OV9655_Init+0x68>
 80096da:	f032 0302 	bics.w	r3, r2, #2
 80096de:	d12b      	bne.n	8009738 <OV9655_Init+0x68>
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 80096e0:	2301      	movs	r3, #1
{
 80096e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096e4:	b083      	sub	sp, #12
 80096e6:	4604      	mov	r4, r0
 80096e8:	4617      	mov	r7, r2
      tmp = 0x80U;
 80096ea:	2080      	movs	r0, #128	; 0x80
 80096ec:	aa02      	add	r2, sp, #8
 80096ee:	460e      	mov	r6, r1
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 80096f0:	2112      	movs	r1, #18
      tmp = 0x80U;
 80096f2:	f802 0d01 	strb.w	r0, [r2, #-1]!
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 80096f6:	f104 0018 	add.w	r0, r4, #24
 80096fa:	f000 f853 	bl	80097a4 <ov9655_write_reg>
 80096fe:	b9c0      	cbnz	r0, 8009732 <OV9655_Init+0x62>
  tickstart = pObj->IO.GetTick();
 8009700:	6963      	ldr	r3, [r4, #20]
 8009702:	4798      	blx	r3
 8009704:	4605      	mov	r5, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8009706:	6963      	ldr	r3, [r4, #20]
 8009708:	4798      	blx	r3
 800970a:	1b40      	subs	r0, r0, r5
 800970c:	28c7      	cmp	r0, #199	; 0xc7
 800970e:	d9fa      	bls.n	8009706 <OV9655_Init+0x36>
        if(OV9655_SetResolution(pObj, Resolution)!= OV9655_OK)
 8009710:	4631      	mov	r1, r6
 8009712:	4620      	mov	r0, r4
 8009714:	f7ff fc30 	bl	8008f78 <OV9655_SetResolution>
 8009718:	b958      	cbnz	r0, 8009732 <OV9655_Init+0x62>
        else if(OV9655_SetPixelFormat(pObj, PixelFormat)!= OV9655_OK)
 800971a:	4639      	mov	r1, r7
 800971c:	4620      	mov	r0, r4
 800971e:	f7ff feb7 	bl	8009490 <OV9655_SetPixelFormat>
 8009722:	b930      	cbnz	r0, 8009732 <OV9655_Init+0x62>
          pObj->IsInitialized = 1U;
 8009724:	2301      	movs	r3, #1
 8009726:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 800972a:	b003      	add	sp, #12
 800972c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  int32_t ret = OV9655_OK;
 800972e:	2000      	movs	r0, #0
  return ret;
 8009730:	4770      	bx	lr
      ret = OV9655_ERROR;
 8009732:	f04f 30ff 	mov.w	r0, #4294967295
 8009736:	e7f8      	b.n	800972a <OV9655_Init+0x5a>
 8009738:	f04f 30ff 	mov.w	r0, #4294967295
}
 800973c:	4770      	bx	lr
 800973e:	bf00      	nop

08009740 <OV9655_SetHueDegree>:
 8009740:	f04f 30ff 	mov.w	r0, #4294967295
 8009744:	4770      	bx	lr
 8009746:	bf00      	nop

08009748 <OV9655_ZoomConfig>:
 8009748:	f04f 30ff 	mov.w	r0, #4294967295
 800974c:	4770      	bx	lr
 800974e:	bf00      	nop

08009750 <OV9655_RegisterBusIO>:
  if (pObj == NULL)
 8009750:	b1c0      	cbz	r0, 8009784 <OV9655_RegisterBusIO+0x34>
    pObj->IO.WriteReg  = pIO->WriteReg;
 8009752:	68ca      	ldr	r2, [r1, #12]
{
 8009754:	b470      	push	{r4, r5, r6}
    pObj->IO.DeInit    = pIO->DeInit;
 8009756:	e9d1 3400 	ldrd	r3, r4, [r1]
    pObj->IO.Address   = pIO->Address;
 800975a:	890e      	ldrh	r6, [r1, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 800975c:	e9c0 3400 	strd	r3, r4, [r0]
    pObj->IO.GetTick   = pIO->GetTick;
 8009760:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
    pObj->Ctx.ReadReg  = OV9655_ReadRegWrap;
 8009764:	4909      	ldr	r1, [pc, #36]	; (800978c <OV9655_RegisterBusIO+0x3c>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 8009766:	60c2      	str	r2, [r0, #12]
    pObj->Ctx.WriteReg = OV9655_WriteRegWrap;
 8009768:	4a09      	ldr	r2, [pc, #36]	; (8009790 <OV9655_RegisterBusIO+0x40>)
    pObj->IO.Address   = pIO->Address;
 800976a:	8106      	strh	r6, [r0, #8]
    pObj->Ctx.WriteReg = OV9655_WriteRegWrap;
 800976c:	6182      	str	r2, [r0, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 800976e:	e9c0 5404 	strd	r5, r4, [r0, #16]
    pObj->Ctx.ReadReg  = OV9655_ReadRegWrap;
 8009772:	e9c0 1007 	strd	r1, r0, [r0, #28]
    if(pObj->IO.Init != NULL)
 8009776:	b10b      	cbz	r3, 800977c <OV9655_RegisterBusIO+0x2c>
}
 8009778:	bc70      	pop	{r4, r5, r6}
      ret = pObj->IO.Init();
 800977a:	4718      	bx	r3
}
 800977c:	f04f 30ff 	mov.w	r0, #4294967295
 8009780:	bc70      	pop	{r4, r5, r6}
 8009782:	4770      	bx	lr
 8009784:	f04f 30ff 	mov.w	r0, #4294967295
 8009788:	4770      	bx	lr
 800978a:	bf00      	nop
 800978c:	08008f59 	.word	0x08008f59
 8009790:	08008f69 	.word	0x08008f69

08009794 <ov9655_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : Data Read
*******************************************************************************/
int32_t ov9655_read_reg(ov9655_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8009794:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8009796:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 800979a:	46a4      	mov	ip, r4
}
 800979c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80097a0:	4760      	bx	ip
 80097a2:	bf00      	nop

080097a4 <ov9655_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t ov9655_write_reg(ov9655_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 80097a4:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, data, length);
 80097a6:	6804      	ldr	r4, [r0, #0]
 80097a8:	6880      	ldr	r0, [r0, #8]
 80097aa:	46a4      	mov	ip, r4
}
 80097ac:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, data, length);
 80097b0:	4760      	bx	ip
 80097b2:	bf00      	nop

080097b4 <WM8994_ReadRegWrap>:
  * @param  pData   The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t WM8994_ReadRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 80097b4:	b410      	push	{r4}
  WM8994_Object_t *pObj = (WM8994_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80097b6:	6904      	ldr	r4, [r0, #16]
 80097b8:	8900      	ldrh	r0, [r0, #8]
 80097ba:	46a4      	mov	ip, r4
}
 80097bc:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80097c0:	4760      	bx	ip
 80097c2:	bf00      	nop

080097c4 <WM8994_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval error status
  */
static int32_t WM8994_WriteRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 80097c4:	b410      	push	{r4}
  WM8994_Object_t *pObj = (WM8994_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80097c6:	68c4      	ldr	r4, [r0, #12]
 80097c8:	8900      	ldrh	r0, [r0, #8]
 80097ca:	46a4      	mov	ip, r4
}
 80097cc:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80097d0:	4760      	bx	ip
 80097d2:	bf00      	nop

080097d4 <WM8994_SetMute>:
{
 80097d4:	b570      	push	{r4, r5, r6, lr}
  if(Cmd == WM8994_MUTE_ON)
 80097d6:	2901      	cmp	r1, #1
{
 80097d8:	b082      	sub	sp, #8
 80097da:	f100 0618 	add.w	r6, r0, #24
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 80097de:	f04f 0302 	mov.w	r3, #2
    tmp = 0x0200;
 80097e2:	bf0c      	ite	eq
 80097e4:	f44f 7200 	moveq.w	r2, #512	; 0x200
    tmp = 0x0010;
 80097e8:	2210      	movne	r2, #16
 80097ea:	ad02      	add	r5, sp, #8
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 80097ec:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80097f0:	4630      	mov	r0, r6
    tmp = 0x0010;
 80097f2:	f825 2d02 	strh.w	r2, [r5, #-2]!
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 80097f6:	462a      	mov	r2, r5
 80097f8:	f001 f900 	bl	800a9fc <wm8994_write_reg>
 80097fc:	4604      	mov	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 80097fe:	462a      	mov	r2, r5
 8009800:	4630      	mov	r0, r6
 8009802:	2302      	movs	r3, #2
 8009804:	f240 4122 	movw	r1, #1058	; 0x422
 8009808:	f001 f8f8 	bl	800a9fc <wm8994_write_reg>
 800980c:	4420      	add	r0, r4
  if(ret != WM8994_OK)
 800980e:	3000      	adds	r0, #0
 8009810:	bf18      	it	ne
 8009812:	2001      	movne	r0, #1
}
 8009814:	4240      	negs	r0, r0
 8009816:	b002      	add	sp, #8
 8009818:	bd70      	pop	{r4, r5, r6, pc}
 800981a:	bf00      	nop

0800981c <WM8994_SetOutputMode>:
  if((Output == WM8994_OUT_HEADPHONE) || (Output == WM8994_OUT_AUTO))
 800981c:	2902      	cmp	r1, #2
{
 800981e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009822:	4607      	mov	r7, r0
 8009824:	b083      	sub	sp, #12
 8009826:	f100 0618 	add.w	r6, r0, #24
  if((Output == WM8994_OUT_HEADPHONE) || (Output == WM8994_OUT_AUTO))
 800982a:	f000 8114 	beq.w	8009a56 <WM8994_SetOutputMode+0x23a>
 800982e:	f1a1 0904 	sub.w	r9, r1, #4
 8009832:	fab9 f989 	clz	r9, r9
 8009836:	ea4f 1959 	mov.w	r9, r9, lsr #5
 800983a:	f1b9 0f00 	cmp.w	r9, #0
 800983e:	f040 810a 	bne.w	8009a56 <WM8994_SetOutputMode+0x23a>
    switch (Output) 
 8009842:	2901      	cmp	r1, #1
 8009844:	f000 80d5 	beq.w	80099f2 <WM8994_SetOutputMode+0x1d6>
      tmp = 0x0F0F;
 8009848:	ad02      	add	r5, sp, #8
 800984a:	f640 720f 	movw	r2, #3855	; 0xf0f
      ret = wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800984e:	2302      	movs	r3, #2
 8009850:	2105      	movs	r1, #5
      tmp = 0x0F0F;
 8009852:	f825 2d02 	strh.w	r2, [r5, #-2]!
      ret = wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8009856:	4630      	mov	r0, r6
 8009858:	462a      	mov	r2, r5
 800985a:	f001 f8cf 	bl	800a9fc <wm8994_write_reg>
      tmp = 0x0001;
 800985e:	f04f 0c01 	mov.w	ip, #1
      ret = wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8009862:	4604      	mov	r4, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 8009864:	462a      	mov	r2, r5
 8009866:	2302      	movs	r3, #2
 8009868:	f240 6101 	movw	r1, #1537	; 0x601
 800986c:	4630      	mov	r0, r6
      tmp = 0x0001;
 800986e:	f8ad c006 	strh.w	ip, [sp, #6]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 8009872:	f001 f8c3 	bl	800a9fc <wm8994_write_reg>
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 8009876:	462a      	mov	r2, r5
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 8009878:	4404      	add	r4, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 800987a:	2302      	movs	r3, #2
 800987c:	f240 6102 	movw	r1, #1538	; 0x602
 8009880:	4630      	mov	r0, r6
 8009882:	f001 f8bb 	bl	800a9fc <wm8994_write_reg>
      tmp = 0x0002;
 8009886:	f04f 0c02 	mov.w	ip, #2
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 800988a:	4404      	add	r4, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);      
 800988c:	462a      	mov	r2, r5
 800988e:	4663      	mov	r3, ip
 8009890:	f240 6104 	movw	r1, #1540	; 0x604
 8009894:	4630      	mov	r0, r6
      tmp = 0x0002;
 8009896:	f8ad c006 	strh.w	ip, [sp, #6]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);      
 800989a:	f001 f8af 	bl	800a9fc <wm8994_write_reg>
 800989e:	4404      	add	r4, r0
    tmp = 0x0300;
 80098a0:	f44f 7840 	mov.w	r8, #768	; 0x300
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 80098a4:	2302      	movs	r3, #2
 80098a6:	462a      	mov	r2, r5
 80098a8:	2103      	movs	r1, #3
 80098aa:	4630      	mov	r0, r6
    tmp = 0x0300;
 80098ac:	f8ad 8006 	strh.w	r8, [sp, #6]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 80098b0:	f001 f8a4 	bl	800a9fc <wm8994_write_reg>
    tmp = 0x0000;
 80098b4:	f04f 0c00 	mov.w	ip, #0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 80098b8:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXL_ATT, &tmp, 2);
 80098ba:	2302      	movs	r3, #2
 80098bc:	462a      	mov	r2, r5
 80098be:	2122      	movs	r1, #34	; 0x22
 80098c0:	4630      	mov	r0, r6
    tmp = 0x0000;
 80098c2:	f8ad c006 	strh.w	ip, [sp, #6]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXL_ATT, &tmp, 2);
 80098c6:	f001 f899 	bl	800a9fc <wm8994_write_reg>
 80098ca:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXR_ATT, &tmp, 2);
 80098cc:	2302      	movs	r3, #2
 80098ce:	462a      	mov	r2, r5
 80098d0:	2123      	movs	r1, #35	; 0x23
 80098d2:	4630      	mov	r0, r6
 80098d4:	f001 f892 	bl	800a9fc <wm8994_write_reg>
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPEAKER_MIXER, &tmp, 2);
 80098d8:	2302      	movs	r3, #2
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXR_ATT, &tmp, 2);
 80098da:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPEAKER_MIXER, &tmp, 2);
 80098dc:	462a      	mov	r2, r5
 80098de:	2136      	movs	r1, #54	; 0x36
 80098e0:	4630      	mov	r0, r6
    tmp = 0x0300;
 80098e2:	f8ad 8006 	strh.w	r8, [sp, #6]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPEAKER_MIXER, &tmp, 2);
 80098e6:	f001 f889 	bl	800a9fc <wm8994_write_reg>
    tmp = 0x3003;
 80098ea:	f243 0c03 	movw	ip, #12291	; 0x3003
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPEAKER_MIXER, &tmp, 2);
 80098ee:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 80098f0:	2302      	movs	r3, #2
 80098f2:	462a      	mov	r2, r5
 80098f4:	2101      	movs	r1, #1
 80098f6:	4630      	mov	r0, r6
    tmp = 0x3003;
 80098f8:	f8ad c006 	strh.w	ip, [sp, #6]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 80098fc:	f001 f87e 	bl	800a9fc <wm8994_write_reg>
    tmp = 0x0005;
 8009900:	f04f 0c05 	mov.w	ip, #5
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8009904:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLASS_W, &tmp, 2);
 8009906:	2302      	movs	r3, #2
 8009908:	462a      	mov	r2, r5
 800990a:	2151      	movs	r1, #81	; 0x51
 800990c:	4630      	mov	r0, r6
    tmp = 0x0005;
 800990e:	f8ad c006 	strh.w	ip, [sp, #6]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLASS_W, &tmp, 2);
 8009912:	f001 f873 	bl	800a9fc <wm8994_write_reg>
    tmp = 0x3303;
 8009916:	f243 3c03 	movw	ip, #13059	; 0x3303
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLASS_W, &tmp, 2);
 800991a:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 800991c:	2302      	movs	r3, #2
 800991e:	462a      	mov	r2, r5
 8009920:	2101      	movs	r1, #1
 8009922:	4630      	mov	r0, r6
    tmp = 0x3303;
 8009924:	f8ad c006 	strh.w	ip, [sp, #6]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8009928:	f001 f868 	bl	800a9fc <wm8994_write_reg>
    tmp = 0x0022;
 800992c:	f04f 0c22 	mov.w	ip, #34	; 0x22
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8009930:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 8009932:	2302      	movs	r3, #2
 8009934:	462a      	mov	r2, r5
 8009936:	2160      	movs	r1, #96	; 0x60
 8009938:	4630      	mov	r0, r6
    tmp = 0x0022;
 800993a:	f8ad c006 	strh.w	ip, [sp, #6]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 800993e:	f001 f85d 	bl	800a9fc <wm8994_write_reg>
    tmp = 0x9F25;
 8009942:	f649 7c25 	movw	ip, #40741	; 0x9f25
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 8009946:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_CHARGE_PUMP1, &tmp, 2);
 8009948:	2302      	movs	r3, #2
 800994a:	462a      	mov	r2, r5
 800994c:	214c      	movs	r1, #76	; 0x4c
 800994e:	4630      	mov	r0, r6
    tmp = 0x9F25;
 8009950:	f8ad c006 	strh.w	ip, [sp, #6]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_CHARGE_PUMP1, &tmp, 2);
 8009954:	f001 f852 	bl	800a9fc <wm8994_write_reg>
  tickstart = pObj->IO.GetTick();
 8009958:	697b      	ldr	r3, [r7, #20]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_CHARGE_PUMP1, &tmp, 2);
 800995a:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 800995c:	4798      	blx	r3
 800995e:	4680      	mov	r8, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	4798      	blx	r3
 8009964:	eba0 0008 	sub.w	r0, r0, r8
 8009968:	280e      	cmp	r0, #14
 800996a:	d9f9      	bls.n	8009960 <WM8994_SetOutputMode+0x144>
    tmp = 0x0001;
 800996c:	f04f 0c01 	mov.w	ip, #1
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 8009970:	2302      	movs	r3, #2
 8009972:	462a      	mov	r2, r5
 8009974:	212d      	movs	r1, #45	; 0x2d
 8009976:	4630      	mov	r0, r6
    tmp = 0x0001;
 8009978:	f8ad c006 	strh.w	ip, [sp, #6]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 800997c:	f001 f83e 	bl	800a9fc <wm8994_write_reg>
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8009980:	2302      	movs	r3, #2
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 8009982:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8009984:	462a      	mov	r2, r5
 8009986:	212e      	movs	r1, #46	; 0x2e
 8009988:	4630      	mov	r0, r6
 800998a:	f001 f837 	bl	800a9fc <wm8994_write_reg>
    tmp = 0x0330;
 800998e:	f44f 7c4c 	mov.w	ip, #816	; 0x330
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8009992:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 8009994:	2302      	movs	r3, #2
 8009996:	462a      	mov	r2, r5
 8009998:	2103      	movs	r1, #3
 800999a:	4630      	mov	r0, r6
    tmp = 0x0330;
 800999c:	f8ad c006 	strh.w	ip, [sp, #6]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 80099a0:	f001 f82c 	bl	800a9fc <wm8994_write_reg>
    tmp = 0x0033;
 80099a4:	f04f 0c33 	mov.w	ip, #51	; 0x33
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 80099a8:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DC_SERVO1, &tmp, 2);
 80099aa:	2302      	movs	r3, #2
 80099ac:	462a      	mov	r2, r5
 80099ae:	2154      	movs	r1, #84	; 0x54
 80099b0:	4630      	mov	r0, r6
    tmp = 0x0033;
 80099b2:	f8ad c006 	strh.w	ip, [sp, #6]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DC_SERVO1, &tmp, 2);
 80099b6:	f001 f821 	bl	800a9fc <wm8994_write_reg>
  tickstart = pObj->IO.GetTick();
 80099ba:	697b      	ldr	r3, [r7, #20]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DC_SERVO1, &tmp, 2);
 80099bc:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 80099be:	4798      	blx	r3
 80099c0:	4680      	mov	r8, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	4798      	blx	r3
 80099c6:	eba0 0008 	sub.w	r0, r0, r8
 80099ca:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80099ce:	d9f8      	bls.n	80099c2 <WM8994_SetOutputMode+0x1a6>
    tmp = 0x00EE;
 80099d0:	27ee      	movs	r7, #238	; 0xee
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);    
 80099d2:	462a      	mov	r2, r5
 80099d4:	4630      	mov	r0, r6
 80099d6:	2302      	movs	r3, #2
 80099d8:	2160      	movs	r1, #96	; 0x60
    tmp = 0x00EE;
 80099da:	f8ad 7006 	strh.w	r7, [sp, #6]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);    
 80099de:	f001 f80d 	bl	800a9fc <wm8994_write_reg>
 80099e2:	4420      	add	r0, r4
  if(ret != WM8994_OK)
 80099e4:	3000      	adds	r0, #0
 80099e6:	bf18      	it	ne
 80099e8:	2001      	movne	r0, #1
}
 80099ea:	4240      	negs	r0, r0
 80099ec:	b003      	add	sp, #12
 80099ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      tmp = 0x0C0C;
 80099f2:	ad02      	add	r5, sp, #8
      ret = wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 80099f4:	2302      	movs	r3, #2
      tmp = 0x0C0C;
 80099f6:	f640 420c 	movw	r2, #3084	; 0xc0c
      ret = wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 80099fa:	2105      	movs	r1, #5
      tmp = 0x0002;
 80099fc:	4698      	mov	r8, r3
      ret = wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 80099fe:	4630      	mov	r0, r6
      tmp = 0x0C0C;
 8009a00:	f825 2d02 	strh.w	r2, [r5, #-2]!
      ret = wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8009a04:	462a      	mov	r2, r5
 8009a06:	f000 fff9 	bl	800a9fc <wm8994_write_reg>
 8009a0a:	4604      	mov	r4, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 8009a0c:	462a      	mov	r2, r5
 8009a0e:	4643      	mov	r3, r8
 8009a10:	f240 6101 	movw	r1, #1537	; 0x601
 8009a14:	4630      	mov	r0, r6
      tmp = 0x0000;
 8009a16:	f8ad 9006 	strh.w	r9, [sp, #6]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 8009a1a:	f000 ffef 	bl	800a9fc <wm8994_write_reg>
 8009a1e:	4404      	add	r4, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 8009a20:	462a      	mov	r2, r5
 8009a22:	4643      	mov	r3, r8
 8009a24:	f240 6102 	movw	r1, #1538	; 0x602
 8009a28:	4630      	mov	r0, r6
 8009a2a:	f000 ffe7 	bl	800a9fc <wm8994_write_reg>
 8009a2e:	4404      	add	r4, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 8009a30:	462a      	mov	r2, r5
 8009a32:	4643      	mov	r3, r8
 8009a34:	f240 6104 	movw	r1, #1540	; 0x604
 8009a38:	4630      	mov	r0, r6
      tmp = 0x0002;
 8009a3a:	f8ad 8006 	strh.w	r8, [sp, #6]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 8009a3e:	f000 ffdd 	bl	800a9fc <wm8994_write_reg>
 8009a42:	4404      	add	r4, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 8009a44:	4643      	mov	r3, r8
 8009a46:	462a      	mov	r2, r5
 8009a48:	f240 6105 	movw	r1, #1541	; 0x605
 8009a4c:	4630      	mov	r0, r6
 8009a4e:	f000 ffd5 	bl	800a9fc <wm8994_write_reg>
 8009a52:	4404      	add	r4, r0
      break;
 8009a54:	e724      	b.n	80098a0 <WM8994_SetOutputMode+0x84>
    tmp = 0x0000;
 8009a56:	ad02      	add	r5, sp, #8
 8009a58:	f04f 0800 	mov.w	r8, #0
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8009a5c:	2302      	movs	r3, #2
 8009a5e:	2101      	movs	r1, #1
    tmp = 0x0000;
 8009a60:	f825 8d02 	strh.w	r8, [r5, #-2]!
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8009a64:	4630      	mov	r0, r6
 8009a66:	462a      	mov	r2, r5
 8009a68:	f000 ffc8 	bl	800a9fc <wm8994_write_reg>
    tmp = 0x0303;
 8009a6c:	f240 3c03 	movw	ip, #771	; 0x303
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8009a70:	4604      	mov	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8009a72:	462a      	mov	r2, r5
 8009a74:	2302      	movs	r3, #2
 8009a76:	2105      	movs	r1, #5
 8009a78:	4630      	mov	r0, r6
    tmp = 0x0303;
 8009a7a:	f8ad c006 	strh.w	ip, [sp, #6]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8009a7e:	f000 ffbd 	bl	800a9fc <wm8994_write_reg>
    tmp = 0x0001;
 8009a82:	f04f 0c01 	mov.w	ip, #1
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8009a86:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 8009a88:	462a      	mov	r2, r5
 8009a8a:	2302      	movs	r3, #2
 8009a8c:	f240 6101 	movw	r1, #1537	; 0x601
 8009a90:	4630      	mov	r0, r6
    tmp = 0x0001;
 8009a92:	f8ad c006 	strh.w	ip, [sp, #6]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 8009a96:	f000 ffb1 	bl	800a9fc <wm8994_write_reg>
 8009a9a:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 8009a9c:	462a      	mov	r2, r5
 8009a9e:	2302      	movs	r3, #2
 8009aa0:	f240 6102 	movw	r1, #1538	; 0x602
 8009aa4:	4630      	mov	r0, r6
 8009aa6:	f000 ffa9 	bl	800a9fc <wm8994_write_reg>
 8009aaa:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 8009aac:	462a      	mov	r2, r5
 8009aae:	2302      	movs	r3, #2
 8009ab0:	f240 6104 	movw	r1, #1540	; 0x604
 8009ab4:	4630      	mov	r0, r6
    tmp = 0x0000;
 8009ab6:	f8ad 8006 	strh.w	r8, [sp, #6]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 8009aba:	f000 ff9f 	bl	800a9fc <wm8994_write_reg>
 8009abe:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 8009ac0:	462a      	mov	r2, r5
 8009ac2:	2302      	movs	r3, #2
 8009ac4:	f240 6105 	movw	r1, #1541	; 0x605
 8009ac8:	4630      	mov	r0, r6
 8009aca:	f000 ff97 	bl	800a9fc <wm8994_write_reg>
    tmp = 0x0100;
 8009ace:	f44f 7c80 	mov.w	ip, #256	; 0x100
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 8009ad2:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 8009ad4:	462a      	mov	r2, r5
 8009ad6:	2302      	movs	r3, #2
 8009ad8:	212d      	movs	r1, #45	; 0x2d
 8009ada:	4630      	mov	r0, r6
    tmp = 0x0100;
 8009adc:	f8ad c006 	strh.w	ip, [sp, #6]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 8009ae0:	f000 ff8c 	bl	800a9fc <wm8994_write_reg>
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8009ae4:	462a      	mov	r2, r5
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 8009ae6:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8009ae8:	2302      	movs	r3, #2
 8009aea:	212e      	movs	r1, #46	; 0x2e
 8009aec:	4630      	mov	r0, r6
 8009aee:	f000 ff85 	bl	800a9fc <wm8994_write_reg>
    tmp = 0x8100;
 8009af2:	f44f 4c01 	mov.w	ip, #33024	; 0x8100
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8009af6:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 8009af8:	462a      	mov	r2, r5
 8009afa:	2302      	movs	r3, #2
 8009afc:	f44f 7188 	mov.w	r1, #272	; 0x110
 8009b00:	4630      	mov	r0, r6
    tmp = 0x8100;
 8009b02:	f8ad c006 	strh.w	ip, [sp, #6]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 8009b06:	f000 ff79 	bl	800a9fc <wm8994_write_reg>
  tickstart = pObj->IO.GetTick();
 8009b0a:	697b      	ldr	r3, [r7, #20]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 8009b0c:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 8009b0e:	4798      	blx	r3
 8009b10:	4680      	mov	r8, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	4798      	blx	r3
 8009b16:	eba0 0008 	sub.w	r0, r0, r8
 8009b1a:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
 8009b1e:	d3f8      	bcc.n	8009b12 <WM8994_SetOutputMode+0x2f6>
    tmp = 0x0000;
 8009b20:	2700      	movs	r7, #0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);    
 8009b22:	462a      	mov	r2, r5
 8009b24:	4630      	mov	r0, r6
 8009b26:	2302      	movs	r3, #2
 8009b28:	f44f 6184 	mov.w	r1, #1056	; 0x420
    tmp = 0x0000;
 8009b2c:	f8ad 7006 	strh.w	r7, [sp, #6]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);    
 8009b30:	f000 ff64 	bl	800a9fc <wm8994_write_reg>
 8009b34:	4420      	add	r0, r4
 8009b36:	e755      	b.n	80099e4 <WM8994_SetOutputMode+0x1c8>

08009b38 <WM8994_SetFrequency>:
  switch (AudioFreq)
 8009b38:	f245 6322 	movw	r3, #22050	; 0x5622
 8009b3c:	3018      	adds	r0, #24
 8009b3e:	4299      	cmp	r1, r3
{
 8009b40:	b500      	push	{lr}
 8009b42:	b083      	sub	sp, #12
  switch (AudioFreq)
 8009b44:	d02c      	beq.n	8009ba0 <WM8994_SetFrequency+0x68>
 8009b46:	d915      	bls.n	8009b74 <WM8994_SetFrequency+0x3c>
 8009b48:	f64a 4344 	movw	r3, #44100	; 0xac44
 8009b4c:	4299      	cmp	r1, r3
 8009b4e:	d021      	beq.n	8009b94 <WM8994_SetFrequency+0x5c>
 8009b50:	4b14      	ldr	r3, [pc, #80]	; (8009ba4 <WM8994_SetFrequency+0x6c>)
 8009b52:	4299      	cmp	r1, r3
 8009b54:	d01a      	beq.n	8009b8c <WM8994_SetFrequency+0x54>
 8009b56:	f5b1 4ffa 	cmp.w	r1, #32000	; 0x7d00
 8009b5a:	d01d      	beq.n	8009b98 <WM8994_SetFrequency+0x60>
    tmp = 0x0083;
 8009b5c:	2183      	movs	r1, #131	; 0x83
 8009b5e:	aa02      	add	r2, sp, #8
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8009b60:	2302      	movs	r3, #2
    tmp = 0x0083;
 8009b62:	f822 1d02 	strh.w	r1, [r2, #-2]!
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8009b66:	f44f 7104 	mov.w	r1, #528	; 0x210
 8009b6a:	f000 ff47 	bl	800a9fc <wm8994_write_reg>
}
 8009b6e:	b003      	add	sp, #12
 8009b70:	f85d fb04 	ldr.w	pc, [sp], #4
  switch (AudioFreq)
 8009b74:	f642 3311 	movw	r3, #11025	; 0x2b11
 8009b78:	4299      	cmp	r1, r3
 8009b7a:	d00f      	beq.n	8009b9c <WM8994_SetFrequency+0x64>
 8009b7c:	f5b1 5f7a 	cmp.w	r1, #16000	; 0x3e80
 8009b80:	d006      	beq.n	8009b90 <WM8994_SetFrequency+0x58>
 8009b82:	f5b1 5ffa 	cmp.w	r1, #8000	; 0x1f40
 8009b86:	d1e9      	bne.n	8009b5c <WM8994_SetFrequency+0x24>
    tmp = 0x0003;
 8009b88:	2103      	movs	r1, #3
 8009b8a:	e7e8      	b.n	8009b5e <WM8994_SetFrequency+0x26>
    tmp = 0x00A3;
 8009b8c:	21a3      	movs	r1, #163	; 0xa3
 8009b8e:	e7e6      	b.n	8009b5e <WM8994_SetFrequency+0x26>
    tmp = 0x0033;
 8009b90:	2133      	movs	r1, #51	; 0x33
 8009b92:	e7e4      	b.n	8009b5e <WM8994_SetFrequency+0x26>
    tmp = 0x0073;
 8009b94:	2173      	movs	r1, #115	; 0x73
 8009b96:	e7e2      	b.n	8009b5e <WM8994_SetFrequency+0x26>
    tmp = 0x0063;
 8009b98:	2163      	movs	r1, #99	; 0x63
 8009b9a:	e7e0      	b.n	8009b5e <WM8994_SetFrequency+0x26>
    tmp = 0x0013;
 8009b9c:	2113      	movs	r1, #19
 8009b9e:	e7de      	b.n	8009b5e <WM8994_SetFrequency+0x26>
    tmp = 0x0043;
 8009ba0:	2143      	movs	r1, #67	; 0x43
 8009ba2:	e7dc      	b.n	8009b5e <WM8994_SetFrequency+0x26>
 8009ba4:	00017700 	.word	0x00017700

08009ba8 <WM8994_ReadID>:
{
 8009ba8:	b530      	push	{r4, r5, lr}
  pObj->IO.Init();
 8009baa:	4604      	mov	r4, r0
{
 8009bac:	b083      	sub	sp, #12
 8009bae:	460d      	mov	r5, r1
  pObj->IO.Init();
 8009bb0:	f854 3b18 	ldr.w	r3, [r4], #24
 8009bb4:	4798      	blx	r3
  ret = wm8994_sw_reset_r(&pObj->Ctx, &wm8994_id);
 8009bb6:	f10d 0106 	add.w	r1, sp, #6
 8009bba:	4620      	mov	r0, r4
 8009bbc:	f000 ff38 	bl	800aa30 <wm8994_sw_reset_r>
  *Id = wm8994_id;
 8009bc0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009bc4:	602b      	str	r3, [r5, #0]
}
 8009bc6:	b003      	add	sp, #12
 8009bc8:	bd30      	pop	{r4, r5, pc}
 8009bca:	bf00      	nop

08009bcc <WM8994_SetResolution>:
{
 8009bcc:	b508      	push	{r3, lr}
  if(wm8994_aif1_control1_wl(&pObj->Ctx, (uint16_t)Resolution) != WM8994_OK)
 8009bce:	b289      	uxth	r1, r1
 8009bd0:	3018      	adds	r0, #24
 8009bd2:	f000 ffa7 	bl	800ab24 <wm8994_aif1_control1_wl>
 8009bd6:	3000      	adds	r0, #0
 8009bd8:	bf18      	it	ne
 8009bda:	2001      	movne	r0, #1
}
 8009bdc:	4240      	negs	r0, r0
 8009bde:	bd08      	pop	{r3, pc}

08009be0 <WM8994_GetResolution>:
{
 8009be0:	b510      	push	{r4, lr}
 8009be2:	b082      	sub	sp, #8
  uint16_t resolution = 0;
 8009be4:	2200      	movs	r2, #0
{
 8009be6:	460c      	mov	r4, r1
  if(wm8994_aif1_control1_wl_r(&pObj->Ctx, &resolution) != WM8994_OK)
 8009be8:	3018      	adds	r0, #24
  uint16_t resolution = 0;
 8009bea:	ab02      	add	r3, sp, #8
 8009bec:	f823 2d02 	strh.w	r2, [r3, #-2]!
  if(wm8994_aif1_control1_wl_r(&pObj->Ctx, &resolution) != WM8994_OK)
 8009bf0:	4619      	mov	r1, r3
 8009bf2:	f000 ffc1 	bl	800ab78 <wm8994_aif1_control1_wl_r>
 8009bf6:	b970      	cbnz	r0, 8009c16 <WM8994_GetResolution+0x36>
    switch(resolution)
 8009bf8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009bfc:	2b02      	cmp	r3, #2
 8009bfe:	d007      	beq.n	8009c10 <WM8994_GetResolution+0x30>
 8009c00:	2b03      	cmp	r3, #3
 8009c02:	d005      	beq.n	8009c10 <WM8994_GetResolution+0x30>
 8009c04:	2b01      	cmp	r3, #1
      *Resolution = WM8994_RESOLUTION_16b;
 8009c06:	bf18      	it	ne
 8009c08:	4603      	movne	r3, r0
 8009c0a:	6023      	str	r3, [r4, #0]
}
 8009c0c:	b002      	add	sp, #8
 8009c0e:	bd10      	pop	{r4, pc}
      *Resolution = WM8994_RESOLUTION_32b;
 8009c10:	6023      	str	r3, [r4, #0]
}
 8009c12:	b002      	add	sp, #8
 8009c14:	bd10      	pop	{r4, pc}
    ret = WM8994_ERROR;
 8009c16:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8009c1a:	e7f7      	b.n	8009c0c <WM8994_GetResolution+0x2c>

08009c1c <WM8994_SetProtocol>:
{
 8009c1c:	b508      	push	{r3, lr}
  if(wm8994_aif1_control1_fmt(&pObj->Ctx, (uint16_t)Protocol) != WM8994_OK)
 8009c1e:	b289      	uxth	r1, r1
 8009c20:	3018      	adds	r0, #24
 8009c22:	f000 ff3f 	bl	800aaa4 <wm8994_aif1_control1_fmt>
 8009c26:	3000      	adds	r0, #0
 8009c28:	bf18      	it	ne
 8009c2a:	2001      	movne	r0, #1
}
 8009c2c:	4240      	negs	r0, r0
 8009c2e:	bd08      	pop	{r3, pc}

08009c30 <WM8994_GetProtocol>:
{
 8009c30:	b510      	push	{r4, lr}
 8009c32:	b082      	sub	sp, #8
 8009c34:	460c      	mov	r4, r1
  if(wm8994_aif1_control1_fmt_r(&pObj->Ctx, &protocol) != WM8994_OK)
 8009c36:	3018      	adds	r0, #24
 8009c38:	f10d 0106 	add.w	r1, sp, #6
 8009c3c:	f000 ff5c 	bl	800aaf8 <wm8994_aif1_control1_fmt_r>
 8009c40:	b920      	cbnz	r0, 8009c4c <WM8994_GetProtocol+0x1c>
    *Protocol = protocol;
 8009c42:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009c46:	6023      	str	r3, [r4, #0]
}
 8009c48:	b002      	add	sp, #8
 8009c4a:	bd10      	pop	{r4, pc}
    ret = WM8994_ERROR;
 8009c4c:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8009c50:	e7fa      	b.n	8009c48 <WM8994_GetProtocol+0x18>
 8009c52:	bf00      	nop

08009c54 <WM8994_GetFrequency>:
{
 8009c54:	b510      	push	{r4, lr}
 8009c56:	b082      	sub	sp, #8
  uint16_t freq = 0;
 8009c58:	2200      	movs	r2, #0
{
 8009c5a:	460c      	mov	r4, r1
  if(wm8994_aif1_sr_r(&pObj->Ctx, &freq) != WM8994_OK)
 8009c5c:	3018      	adds	r0, #24
  uint16_t freq = 0;
 8009c5e:	ab02      	add	r3, sp, #8
 8009c60:	f823 2d02 	strh.w	r2, [r3, #-2]!
  if(wm8994_aif1_sr_r(&pObj->Ctx, &freq) != WM8994_OK)
 8009c64:	4619      	mov	r1, r3
 8009c66:	f000 ff07 	bl	800aa78 <wm8994_aif1_sr_r>
 8009c6a:	b958      	cbnz	r0, 8009c84 <WM8994_GetFrequency+0x30>
    switch(freq)
 8009c6c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009c70:	2b0a      	cmp	r3, #10
 8009c72:	d809      	bhi.n	8009c88 <WM8994_GetFrequency+0x34>
 8009c74:	e8df f003 	tbb	[pc, r3]
 8009c78:	1808130e 	.word	0x1808130e
 8009c7c:	2722081d 	.word	0x2722081d
 8009c80:	082c      	.short	0x082c
 8009c82:	0a          	.byte	0x0a
 8009c83:	00          	.byte	0x00
    ret = WM8994_ERROR;
 8009c84:	f04f 30ff 	mov.w	r0, #4294967295
}
 8009c88:	b002      	add	sp, #8
 8009c8a:	bd10      	pop	{r4, pc}
      *AudioFreq = WM8994_FREQUENCY_96K;
 8009c8c:	4b13      	ldr	r3, [pc, #76]	; (8009cdc <WM8994_GetFrequency+0x88>)
 8009c8e:	6023      	str	r3, [r4, #0]
}
 8009c90:	b002      	add	sp, #8
 8009c92:	bd10      	pop	{r4, pc}
      *AudioFreq = WM8994_FREQUENCY_8K;
 8009c94:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8009c98:	6023      	str	r3, [r4, #0]
}
 8009c9a:	b002      	add	sp, #8
 8009c9c:	bd10      	pop	{r4, pc}
      *AudioFreq = WM8994_FREQUENCY_11K;
 8009c9e:	f642 3311 	movw	r3, #11025	; 0x2b11
 8009ca2:	6023      	str	r3, [r4, #0]
}
 8009ca4:	b002      	add	sp, #8
 8009ca6:	bd10      	pop	{r4, pc}
      *AudioFreq = WM8994_FREQUENCY_16K;
 8009ca8:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8009cac:	6023      	str	r3, [r4, #0]
}
 8009cae:	b002      	add	sp, #8
 8009cb0:	bd10      	pop	{r4, pc}
      *AudioFreq = WM8994_FREQUENCY_22K;
 8009cb2:	f245 6322 	movw	r3, #22050	; 0x5622
 8009cb6:	6023      	str	r3, [r4, #0]
}
 8009cb8:	b002      	add	sp, #8
 8009cba:	bd10      	pop	{r4, pc}
      *AudioFreq = WM8994_FREQUENCY_32K;
 8009cbc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009cc0:	6023      	str	r3, [r4, #0]
}
 8009cc2:	b002      	add	sp, #8
 8009cc4:	bd10      	pop	{r4, pc}
      *AudioFreq = WM8994_FREQUENCY_44K;
 8009cc6:	f64a 4344 	movw	r3, #44100	; 0xac44
 8009cca:	6023      	str	r3, [r4, #0]
}
 8009ccc:	b002      	add	sp, #8
 8009cce:	bd10      	pop	{r4, pc}
      *AudioFreq = WM8994_FREQUENCY_48K;
 8009cd0:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009cd4:	6023      	str	r3, [r4, #0]
}
 8009cd6:	b002      	add	sp, #8
 8009cd8:	bd10      	pop	{r4, pc}
 8009cda:	bf00      	nop
 8009cdc:	00017700 	.word	0x00017700

08009ce0 <WM8994_Reset>:
{
 8009ce0:	b508      	push	{r3, lr}
  if(wm8994_sw_reset_w(&pObj->Ctx, 0x0000) != WM8994_OK)
 8009ce2:	2100      	movs	r1, #0
 8009ce4:	3018      	adds	r0, #24
 8009ce6:	f000 fe95 	bl	800aa14 <wm8994_sw_reset_w>
 8009cea:	3000      	adds	r0, #0
 8009cec:	bf18      	it	ne
 8009cee:	2001      	movne	r0, #1
}
 8009cf0:	4240      	negs	r0, r0
 8009cf2:	bd08      	pop	{r3, pc}

08009cf4 <WM8994_GetVolume>:
{
 8009cf4:	b510      	push	{r4, lr}
  if (InputOutput == VOLUME_OUTPUT)
 8009cf6:	2901      	cmp	r1, #1
{
 8009cf8:	b082      	sub	sp, #8
 8009cfa:	4614      	mov	r4, r2
 8009cfc:	f100 0018 	add.w	r0, r0, #24
    if(wm8994_lo_hpout1l_vol_r(&pObj->Ctx, &invertedvol) != WM8994_OK)
 8009d00:	f10d 0106 	add.w	r1, sp, #6
  if (InputOutput == VOLUME_OUTPUT)
 8009d04:	d00e      	beq.n	8009d24 <WM8994_GetVolume+0x30>
    if(wm8994_aif1_adc1_left_vol_adc1l_r(&pObj->Ctx, &invertedvol) != WM8994_OK)
 8009d06:	f000 ff77 	bl	800abf8 <wm8994_aif1_adc1_left_vol_adc1l_r>
 8009d0a:	b9d8      	cbnz	r0, 8009d44 <WM8994_GetVolume+0x50>
      *Volume = VOLUME_IN_INVERT(invertedvol);
 8009d0c:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8009d10:	2364      	movs	r3, #100	; 0x64
 8009d12:	4a0e      	ldr	r2, [pc, #56]	; (8009d4c <WM8994_GetVolume+0x58>)
 8009d14:	fb03 f301 	mul.w	r3, r3, r1
 8009d18:	fba2 2303 	umull	r2, r3, r2, r3
 8009d1c:	09db      	lsrs	r3, r3, #7
 8009d1e:	7023      	strb	r3, [r4, #0]
}
 8009d20:	b002      	add	sp, #8
 8009d22:	bd10      	pop	{r4, pc}
    if(wm8994_lo_hpout1l_vol_r(&pObj->Ctx, &invertedvol) != WM8994_OK)
 8009d24:	f000 fe92 	bl	800aa4c <wm8994_lo_hpout1l_vol_r>
 8009d28:	b960      	cbnz	r0, 8009d44 <WM8994_GetVolume+0x50>
      *Volume = VOLUME_OUT_INVERT(invertedvol);
 8009d2a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8009d2e:	2264      	movs	r2, #100	; 0x64
 8009d30:	4b07      	ldr	r3, [pc, #28]	; (8009d50 <WM8994_GetVolume+0x5c>)
 8009d32:	fb02 f201 	mul.w	r2, r2, r1
 8009d36:	fb83 1302 	smull	r1, r3, r3, r2
 8009d3a:	4413      	add	r3, r2
 8009d3c:	115b      	asrs	r3, r3, #5
 8009d3e:	7023      	strb	r3, [r4, #0]
}
 8009d40:	b002      	add	sp, #8
 8009d42:	bd10      	pop	{r4, pc}
      ret = WM8994_ERROR;
 8009d44:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8009d48:	e7ea      	b.n	8009d20 <WM8994_GetVolume+0x2c>
 8009d4a:	bf00      	nop
 8009d4c:	891ac73b 	.word	0x891ac73b
 8009d50:	82082083 	.word	0x82082083

08009d54 <WM8994_Resume>:
 8009d54:	b570      	push	{r4, r5, r6, lr}
 8009d56:	b082      	sub	sp, #8
 8009d58:	f100 0518 	add.w	r5, r0, #24
 8009d5c:	2210      	movs	r2, #16
 8009d5e:	2302      	movs	r3, #2
 8009d60:	ac02      	add	r4, sp, #8
 8009d62:	4628      	mov	r0, r5
 8009d64:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8009d68:	f824 2d02 	strh.w	r2, [r4, #-2]!
 8009d6c:	4622      	mov	r2, r4
 8009d6e:	f000 fe45 	bl	800a9fc <wm8994_write_reg>
 8009d72:	4606      	mov	r6, r0
 8009d74:	4622      	mov	r2, r4
 8009d76:	4628      	mov	r0, r5
 8009d78:	2302      	movs	r3, #2
 8009d7a:	f240 4122 	movw	r1, #1058	; 0x422
 8009d7e:	f000 fe3d 	bl	800a9fc <wm8994_write_reg>
 8009d82:	42c6      	cmn	r6, r0
 8009d84:	bf14      	ite	ne
 8009d86:	f04f 30ff 	movne.w	r0, #4294967295
 8009d8a:	2000      	moveq	r0, #0
 8009d8c:	b002      	add	sp, #8
 8009d8e:	bd70      	pop	{r4, r5, r6, pc}

08009d90 <WM8994_Play>:
{ 
 8009d90:	b570      	push	{r4, r5, r6, lr}
 8009d92:	b082      	sub	sp, #8
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8009d94:	f100 0518 	add.w	r5, r0, #24
    tmp = 0x0010;
 8009d98:	2210      	movs	r2, #16
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8009d9a:	2302      	movs	r3, #2
    tmp = 0x0010;
 8009d9c:	ac02      	add	r4, sp, #8
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8009d9e:	4628      	mov	r0, r5
 8009da0:	f44f 6184 	mov.w	r1, #1056	; 0x420
    tmp = 0x0010;
 8009da4:	f824 2d02 	strh.w	r2, [r4, #-2]!
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8009da8:	4622      	mov	r2, r4
 8009daa:	f000 fe27 	bl	800a9fc <wm8994_write_reg>
 8009dae:	4606      	mov	r6, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 8009db0:	4622      	mov	r2, r4
 8009db2:	4628      	mov	r0, r5
 8009db4:	2302      	movs	r3, #2
 8009db6:	f240 4122 	movw	r1, #1058	; 0x422
 8009dba:	f000 fe1f 	bl	800a9fc <wm8994_write_reg>
  if(ret != WM8994_OK)
 8009dbe:	42c6      	cmn	r6, r0
}
 8009dc0:	bf14      	ite	ne
 8009dc2:	f04f 30ff 	movne.w	r0, #4294967295
 8009dc6:	2000      	moveq	r0, #0
 8009dc8:	b002      	add	sp, #8
 8009dca:	bd70      	pop	{r4, r5, r6, pc}

08009dcc <WM8994_Pause>:
{
 8009dcc:	b570      	push	{r4, r5, r6, lr}
 8009dce:	b082      	sub	sp, #8
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8009dd0:	f100 0518 	add.w	r5, r0, #24
    tmp = 0x0200;
 8009dd4:	f44f 7200 	mov.w	r2, #512	; 0x200
  uint16_t tmp = 0x0001;
 8009dd8:	2601      	movs	r6, #1
    tmp = 0x0200;
 8009dda:	ac02      	add	r4, sp, #8
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8009ddc:	2302      	movs	r3, #2
 8009dde:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8009de2:	4628      	mov	r0, r5
    tmp = 0x0200;
 8009de4:	f824 2d02 	strh.w	r2, [r4, #-2]!
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8009de8:	4622      	mov	r2, r4
  uint16_t tmp = 0x0001;
 8009dea:	f8ad 6004 	strh.w	r6, [sp, #4]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8009dee:	f000 fe05 	bl	800a9fc <wm8994_write_reg>
 8009df2:	4606      	mov	r6, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 8009df4:	4622      	mov	r2, r4
 8009df6:	4628      	mov	r0, r5
 8009df8:	2302      	movs	r3, #2
 8009dfa:	f240 4122 	movw	r1, #1058	; 0x422
 8009dfe:	f000 fdfd 	bl	800a9fc <wm8994_write_reg>
  if(ret != WM8994_OK)
 8009e02:	42c6      	cmn	r6, r0
 8009e04:	d10b      	bne.n	8009e1e <WM8994_Pause+0x52>
  else if(wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2) != WM8994_OK)
 8009e06:	2302      	movs	r3, #2
 8009e08:	4628      	mov	r0, r5
 8009e0a:	aa01      	add	r2, sp, #4
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	f000 fdf5 	bl	800a9fc <wm8994_write_reg>
 8009e12:	3000      	adds	r0, #0
 8009e14:	bf18      	it	ne
 8009e16:	2001      	movne	r0, #1
 8009e18:	4240      	negs	r0, r0
}
 8009e1a:	b002      	add	sp, #8
 8009e1c:	bd70      	pop	{r4, r5, r6, pc}
    ret  = WM8994_ERROR;
 8009e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8009e22:	e7fa      	b.n	8009e1a <WM8994_Pause+0x4e>

08009e24 <WM8994_Stop>:
{
 8009e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e26:	b083      	sub	sp, #12
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8009e28:	f100 0618 	add.w	r6, r0, #24
    tmp = 0x0200;
 8009e2c:	f44f 7200 	mov.w	r2, #512	; 0x200
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8009e30:	2302      	movs	r3, #2
    tmp = 0x0200;
 8009e32:	ad02      	add	r5, sp, #8
{
 8009e34:	460f      	mov	r7, r1
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8009e36:	4630      	mov	r0, r6
 8009e38:	f44f 6184 	mov.w	r1, #1056	; 0x420
    tmp = 0x0200;
 8009e3c:	f825 2d02 	strh.w	r2, [r5, #-2]!
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8009e40:	462a      	mov	r2, r5
 8009e42:	f000 fddb 	bl	800a9fc <wm8994_write_reg>
 8009e46:	4604      	mov	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 8009e48:	462a      	mov	r2, r5
 8009e4a:	4630      	mov	r0, r6
 8009e4c:	2302      	movs	r3, #2
 8009e4e:	f240 4122 	movw	r1, #1058	; 0x422
 8009e52:	f000 fdd3 	bl	800a9fc <wm8994_write_reg>
  if(ret != WM8994_OK)
 8009e56:	1824      	adds	r4, r4, r0
 8009e58:	d104      	bne.n	8009e64 <WM8994_Stop+0x40>
  if (CodecPdwnMode == WM8994_PDWN_SW)
 8009e5a:	2f01      	cmp	r7, #1
 8009e5c:	d106      	bne.n	8009e6c <WM8994_Stop+0x48>
}
 8009e5e:	4620      	mov	r0, r4
 8009e60:	b003      	add	sp, #12
 8009e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (CodecPdwnMode == WM8994_PDWN_SW)
 8009e64:	2f01      	cmp	r7, #1
    ret = WM8994_ERROR;
 8009e66:	f04f 34ff 	mov.w	r4, #4294967295
  if (CodecPdwnMode == WM8994_PDWN_SW)
 8009e6a:	d0f8      	beq.n	8009e5e <WM8994_Stop+0x3a>
    tmp = 0x0200;
 8009e6c:	f44f 7700 	mov.w	r7, #512	; 0x200
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8009e70:	462a      	mov	r2, r5
 8009e72:	2302      	movs	r3, #2
 8009e74:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8009e78:	4630      	mov	r0, r6
    tmp = 0x0200;
 8009e7a:	f8ad 7006 	strh.w	r7, [sp, #6]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8009e7e:	f000 fdbd 	bl	800a9fc <wm8994_write_reg>
 8009e82:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 8009e84:	462a      	mov	r2, r5
 8009e86:	2302      	movs	r3, #2
 8009e88:	f240 4122 	movw	r1, #1058	; 0x422
 8009e8c:	4630      	mov	r0, r6
 8009e8e:	f000 fdb5 	bl	800a9fc <wm8994_write_reg>
    tmp = 0x0000;
 8009e92:	2700      	movs	r7, #0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 8009e94:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 8009e96:	462a      	mov	r2, r5
 8009e98:	2302      	movs	r3, #2
 8009e9a:	212d      	movs	r1, #45	; 0x2d
 8009e9c:	4630      	mov	r0, r6
    tmp = 0x0000;
 8009e9e:	f8ad 7006 	strh.w	r7, [sp, #6]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 8009ea2:	f000 fdab 	bl	800a9fc <wm8994_write_reg>
 8009ea6:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8009ea8:	462a      	mov	r2, r5
 8009eaa:	2302      	movs	r3, #2
 8009eac:	212e      	movs	r1, #46	; 0x2e
 8009eae:	4630      	mov	r0, r6
 8009eb0:	f000 fda4 	bl	800a9fc <wm8994_write_reg>
 8009eb4:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8009eb6:	462a      	mov	r2, r5
 8009eb8:	2302      	movs	r3, #2
 8009eba:	2105      	movs	r1, #5
 8009ebc:	4630      	mov	r0, r6
 8009ebe:	f000 fd9d 	bl	800a9fc <wm8994_write_reg>
 8009ec2:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SW_RESET, &tmp, 2);
 8009ec4:	4639      	mov	r1, r7
 8009ec6:	462a      	mov	r2, r5
 8009ec8:	4630      	mov	r0, r6
 8009eca:	2302      	movs	r3, #2
 8009ecc:	f000 fd96 	bl	800a9fc <wm8994_write_reg>
  if(ret != WM8994_OK)
 8009ed0:	42c4      	cmn	r4, r0
 8009ed2:	bf14      	ite	ne
 8009ed4:	f04f 34ff 	movne.w	r4, #4294967295
 8009ed8:	463c      	moveq	r4, r7
}
 8009eda:	4620      	mov	r0, r4
 8009edc:	b003      	add	sp, #12
 8009ede:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009ee0 <WM8994_SetVolume>:
  if (InputOutput == VOLUME_OUTPUT)
 8009ee0:	2901      	cmp	r1, #1
{
 8009ee2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009ee6:	4617      	mov	r7, r2
 8009ee8:	b083      	sub	sp, #12
 8009eea:	f100 0518 	add.w	r5, r0, #24
  if (InputOutput == VOLUME_OUTPUT)
 8009eee:	d13e      	bne.n	8009f6e <WM8994_SetVolume+0x8e>
    if(Volume > 0x3EU)
 8009ef0:	2a3e      	cmp	r2, #62	; 0x3e
 8009ef2:	f200 8083 	bhi.w	8009ffc <WM8994_SetVolume+0x11c>
    else if (Volume == 0U)
 8009ef6:	2a00      	cmp	r2, #0
 8009ef8:	d065      	beq.n	8009fc6 <WM8994_SetVolume+0xe6>
    tmp = 0x0010;
 8009efa:	f10d 0808 	add.w	r8, sp, #8
 8009efe:	2210      	movs	r2, #16
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8009f00:	2302      	movs	r3, #2
 8009f02:	f44f 6184 	mov.w	r1, #1056	; 0x420
    tmp = 0x0010;
 8009f06:	f828 2d02 	strh.w	r2, [r8, #-2]!
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8009f0a:	4628      	mov	r0, r5
 8009f0c:	4642      	mov	r2, r8
      tmp = Volume | 0x140U;
 8009f0e:	f447 77a0 	orr.w	r7, r7, #320	; 0x140
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8009f12:	f000 fd73 	bl	800a9fc <wm8994_write_reg>
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 8009f16:	4642      	mov	r2, r8
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8009f18:	4681      	mov	r9, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 8009f1a:	2302      	movs	r3, #2
 8009f1c:	f240 4122 	movw	r1, #1058	; 0x422
 8009f20:	4628      	mov	r0, r5
 8009f22:	f000 fd6b 	bl	800a9fc <wm8994_write_reg>
 8009f26:	4604      	mov	r4, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_OUTPUT_VOL, &tmp, 2);
 8009f28:	4642      	mov	r2, r8
 8009f2a:	2302      	movs	r3, #2
  if(ret != WM8994_OK)
 8009f2c:	4264      	negs	r4, r4
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_OUTPUT_VOL, &tmp, 2);
 8009f2e:	211c      	movs	r1, #28
 8009f30:	4628      	mov	r0, r5
      tmp = Volume | 0x140U;
 8009f32:	f8ad 7006 	strh.w	r7, [sp, #6]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_OUTPUT_VOL, &tmp, 2);
 8009f36:	f000 fd61 	bl	800a9fc <wm8994_write_reg>
 8009f3a:	454c      	cmp	r4, r9
 8009f3c:	bf0c      	ite	eq
 8009f3e:	4604      	moveq	r4, r0
 8009f40:	1e44      	subne	r4, r0, #1
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_RIGHT_OUTPUT_VOL, &tmp, 2);
 8009f42:	4642      	mov	r2, r8
 8009f44:	2302      	movs	r3, #2
 8009f46:	211d      	movs	r1, #29
 8009f48:	4628      	mov	r0, r5
 8009f4a:	f000 fd57 	bl	800a9fc <wm8994_write_reg>
 8009f4e:	4404      	add	r4, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_LEFT_VOL, &tmp, 2);
 8009f50:	4642      	mov	r2, r8
 8009f52:	2302      	movs	r3, #2
 8009f54:	2126      	movs	r1, #38	; 0x26
 8009f56:	4628      	mov	r0, r5
 8009f58:	f000 fd50 	bl	800a9fc <wm8994_write_reg>
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_RIGHT_VOL, &tmp, 2);      
 8009f5c:	4642      	mov	r2, r8
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_LEFT_VOL, &tmp, 2);
 8009f5e:	4404      	add	r4, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_RIGHT_VOL, &tmp, 2);      
 8009f60:	4628      	mov	r0, r5
 8009f62:	2302      	movs	r3, #2
 8009f64:	2127      	movs	r1, #39	; 0x27
 8009f66:	f000 fd49 	bl	800a9fc <wm8994_write_reg>
 8009f6a:	4420      	add	r0, r4
 8009f6c:	e024      	b.n	8009fb8 <WM8994_SetVolume+0xd8>
    tmp = Volume | 0x100U;
 8009f6e:	ae02      	add	r6, sp, #8
 8009f70:	f442 7780 	orr.w	r7, r2, #256	; 0x100
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LEFT_VOL, &tmp, 2); 
 8009f74:	2302      	movs	r3, #2
 8009f76:	f44f 6180 	mov.w	r1, #1024	; 0x400
    tmp = Volume | 0x100U;
 8009f7a:	f826 7d02 	strh.w	r7, [r6, #-2]!
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LEFT_VOL, &tmp, 2); 
 8009f7e:	4628      	mov	r0, r5
 8009f80:	4632      	mov	r2, r6
 8009f82:	f000 fd3b 	bl	800a9fc <wm8994_write_reg>
 8009f86:	4604      	mov	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RIGHT_VOL, &tmp, 2); 
 8009f88:	4632      	mov	r2, r6
 8009f8a:	2302      	movs	r3, #2
 8009f8c:	f240 4101 	movw	r1, #1025	; 0x401
 8009f90:	4628      	mov	r0, r5
 8009f92:	f000 fd33 	bl	800a9fc <wm8994_write_reg>
 8009f96:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LEFT_VOL, &tmp, 2); 
 8009f98:	4632      	mov	r2, r6
 8009f9a:	2302      	movs	r3, #2
 8009f9c:	f240 4104 	movw	r1, #1028	; 0x404
 8009fa0:	4628      	mov	r0, r5
 8009fa2:	f000 fd2b 	bl	800a9fc <wm8994_write_reg>
 8009fa6:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RIGHT_VOL, &tmp, 2); 
 8009fa8:	4632      	mov	r2, r6
 8009faa:	4628      	mov	r0, r5
 8009fac:	2302      	movs	r3, #2
 8009fae:	f240 4105 	movw	r1, #1029	; 0x405
 8009fb2:	f000 fd23 	bl	800a9fc <wm8994_write_reg>
 8009fb6:	4420      	add	r0, r4
  if(ret != WM8994_OK)
 8009fb8:	3000      	adds	r0, #0
 8009fba:	bf18      	it	ne
 8009fbc:	2001      	movne	r0, #1
 8009fbe:	4240      	negs	r0, r0
}
 8009fc0:	b003      	add	sp, #12
 8009fc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 0x0200;
 8009fc6:	ae02      	add	r6, sp, #8
 8009fc8:	f44f 7200 	mov.w	r2, #512	; 0x200
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8009fcc:	2302      	movs	r3, #2
 8009fce:	f44f 6184 	mov.w	r1, #1056	; 0x420
    tmp = 0x0200;
 8009fd2:	f826 2d02 	strh.w	r2, [r6, #-2]!
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8009fd6:	4628      	mov	r0, r5
 8009fd8:	4632      	mov	r2, r6
 8009fda:	f000 fd0f 	bl	800a9fc <wm8994_write_reg>
 8009fde:	4604      	mov	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 8009fe0:	4632      	mov	r2, r6
 8009fe2:	4628      	mov	r0, r5
 8009fe4:	2302      	movs	r3, #2
 8009fe6:	f240 4122 	movw	r1, #1058	; 0x422
 8009fea:	f000 fd07 	bl	800a9fc <wm8994_write_reg>
  if(ret != WM8994_OK)
 8009fee:	1820      	adds	r0, r4, r0
    ret = WM8994_ERROR;
 8009ff0:	bf18      	it	ne
 8009ff2:	f04f 30ff 	movne.w	r0, #4294967295
}
 8009ff6:	b003      	add	sp, #12
 8009ff8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 0x0010;
 8009ffc:	af02      	add	r7, sp, #8
 8009ffe:	2210      	movs	r2, #16
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 800a000:	2302      	movs	r3, #2
 800a002:	f44f 6184 	mov.w	r1, #1056	; 0x420
    tmp = 0x0010;
 800a006:	f827 2d02 	strh.w	r2, [r7, #-2]!
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 800a00a:	4628      	mov	r0, r5
 800a00c:	463a      	mov	r2, r7
      tmp = 0x3FU | 0x140U;
 800a00e:	f240 147f 	movw	r4, #383	; 0x17f
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 800a012:	f000 fcf3 	bl	800a9fc <wm8994_write_reg>
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 800a016:	463a      	mov	r2, r7
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 800a018:	4680      	mov	r8, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 800a01a:	2302      	movs	r3, #2
 800a01c:	f240 4122 	movw	r1, #1058	; 0x422
 800a020:	4628      	mov	r0, r5
 800a022:	f000 fceb 	bl	800a9fc <wm8994_write_reg>
 800a026:	4606      	mov	r6, r0
      tmp = 0x3FU | 0x140U;
 800a028:	f8ad 4006 	strh.w	r4, [sp, #6]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_OUTPUT_VOL, &tmp, 2);
 800a02c:	463a      	mov	r2, r7
  if(ret != WM8994_OK)
 800a02e:	4274      	negs	r4, r6
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_OUTPUT_VOL, &tmp, 2);
 800a030:	2302      	movs	r3, #2
 800a032:	211c      	movs	r1, #28
 800a034:	4628      	mov	r0, r5
 800a036:	f000 fce1 	bl	800a9fc <wm8994_write_reg>
 800a03a:	4544      	cmp	r4, r8
 800a03c:	bf0c      	ite	eq
 800a03e:	4604      	moveq	r4, r0
 800a040:	1e44      	subne	r4, r0, #1
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_RIGHT_OUTPUT_VOL, &tmp, 2);
 800a042:	463a      	mov	r2, r7
 800a044:	2302      	movs	r3, #2
 800a046:	211d      	movs	r1, #29
 800a048:	4628      	mov	r0, r5
 800a04a:	f000 fcd7 	bl	800a9fc <wm8994_write_reg>
 800a04e:	4404      	add	r4, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_LEFT_VOL, &tmp, 2);
 800a050:	463a      	mov	r2, r7
 800a052:	2302      	movs	r3, #2
 800a054:	2126      	movs	r1, #38	; 0x26
 800a056:	4628      	mov	r0, r5
 800a058:	f000 fcd0 	bl	800a9fc <wm8994_write_reg>
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_RIGHT_VOL, &tmp, 2);
 800a05c:	463a      	mov	r2, r7
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_LEFT_VOL, &tmp, 2);
 800a05e:	4404      	add	r4, r0
 800a060:	e77e      	b.n	8009f60 <WM8994_SetVolume+0x80>
 800a062:	bf00      	nop

0800a064 <WM8994_DeInit>:
{
 800a064:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a068:	b083      	sub	sp, #12
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 800a06a:	f100 0718 	add.w	r7, r0, #24
    tmp = 0x0200;
 800a06e:	f44f 7800 	mov.w	r8, #512	; 0x200
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 800a072:	2302      	movs	r3, #2
    tmp = 0x0200;
 800a074:	ae02      	add	r6, sp, #8
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 800a076:	4638      	mov	r0, r7
 800a078:	f44f 6184 	mov.w	r1, #1056	; 0x420
    tmp = 0x0000;
 800a07c:	2500      	movs	r5, #0
    tmp = 0x0200;
 800a07e:	f826 8d02 	strh.w	r8, [r6, #-2]!
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 800a082:	4632      	mov	r2, r6
 800a084:	f000 fcba 	bl	800a9fc <wm8994_write_reg>
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 800a088:	4632      	mov	r2, r6
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 800a08a:	4681      	mov	r9, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 800a08c:	2302      	movs	r3, #2
 800a08e:	4638      	mov	r0, r7
 800a090:	f240 4122 	movw	r1, #1058	; 0x422
 800a094:	f000 fcb2 	bl	800a9fc <wm8994_write_reg>
 800a098:	4604      	mov	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 800a09a:	4632      	mov	r2, r6
 800a09c:	4638      	mov	r0, r7
  if(ret != WM8994_OK)
 800a09e:	4264      	negs	r4, r4
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 800a0a0:	2302      	movs	r3, #2
 800a0a2:	f44f 6184 	mov.w	r1, #1056	; 0x420
    tmp = 0x0200;
 800a0a6:	f8ad 8006 	strh.w	r8, [sp, #6]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 800a0aa:	f000 fca7 	bl	800a9fc <wm8994_write_reg>
 800a0ae:	454c      	cmp	r4, r9
 800a0b0:	bf0c      	ite	eq
 800a0b2:	4604      	moveq	r4, r0
 800a0b4:	1e44      	subne	r4, r0, #1
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 800a0b6:	4632      	mov	r2, r6
 800a0b8:	2302      	movs	r3, #2
 800a0ba:	f240 4122 	movw	r1, #1058	; 0x422
 800a0be:	4638      	mov	r0, r7
 800a0c0:	f000 fc9c 	bl	800a9fc <wm8994_write_reg>
 800a0c4:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 800a0c6:	4632      	mov	r2, r6
 800a0c8:	4638      	mov	r0, r7
 800a0ca:	2302      	movs	r3, #2
 800a0cc:	212d      	movs	r1, #45	; 0x2d
    tmp = 0x0000;
 800a0ce:	f8ad 5006 	strh.w	r5, [sp, #6]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 800a0d2:	f000 fc93 	bl	800a9fc <wm8994_write_reg>
 800a0d6:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 800a0d8:	4632      	mov	r2, r6
 800a0da:	4638      	mov	r0, r7
 800a0dc:	2302      	movs	r3, #2
 800a0de:	212e      	movs	r1, #46	; 0x2e
 800a0e0:	f000 fc8c 	bl	800a9fc <wm8994_write_reg>
 800a0e4:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800a0e6:	4632      	mov	r2, r6
 800a0e8:	4638      	mov	r0, r7
 800a0ea:	2302      	movs	r3, #2
 800a0ec:	2105      	movs	r1, #5
 800a0ee:	f000 fc85 	bl	800a9fc <wm8994_write_reg>
 800a0f2:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SW_RESET, &tmp, 2);
 800a0f4:	4632      	mov	r2, r6
 800a0f6:	4629      	mov	r1, r5
 800a0f8:	4638      	mov	r0, r7
 800a0fa:	2302      	movs	r3, #2
 800a0fc:	f000 fc7e 	bl	800a9fc <wm8994_write_reg>
  if(ret != WM8994_OK)
 800a100:	42c4      	cmn	r4, r0
}
 800a102:	bf14      	ite	ne
 800a104:	f04f 30ff 	movne.w	r0, #4294967295
 800a108:	4628      	moveq	r0, r5
 800a10a:	b003      	add	sp, #12
 800a10c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800a110 <WM8994_Init>:
{
 800a110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a114:	b083      	sub	sp, #12
  ret = wm8994_write_reg(&pObj->Ctx, 0x102, &tmp, 2);
 800a116:	f100 0518 	add.w	r5, r0, #24
  tmp = 0x0003;
 800a11a:	f04f 0903 	mov.w	r9, #3
{
 800a11e:	4688      	mov	r8, r1
  tmp = 0x0003;
 800a120:	ae02      	add	r6, sp, #8
  ret = wm8994_write_reg(&pObj->Ctx, 0x102, &tmp, 2);
 800a122:	2302      	movs	r3, #2
 800a124:	f44f 7181 	mov.w	r1, #258	; 0x102
{
 800a128:	4607      	mov	r7, r0
  tmp = 0x0003;
 800a12a:	f826 9d04 	strh.w	r9, [r6, #-4]!
  ret = wm8994_write_reg(&pObj->Ctx, 0x102, &tmp, 2);
 800a12e:	4628      	mov	r0, r5
 800a130:	4632      	mov	r2, r6
 800a132:	f000 fc63 	bl	800a9fc <wm8994_write_reg>
  tmp = 0x0000;
 800a136:	f04f 0c00 	mov.w	ip, #0
  ret = wm8994_write_reg(&pObj->Ctx, 0x102, &tmp, 2);
 800a13a:	4604      	mov	r4, r0
  ret += wm8994_write_reg(&pObj->Ctx, 0x817, &tmp, 2);
 800a13c:	4632      	mov	r2, r6
 800a13e:	2302      	movs	r3, #2
 800a140:	f640 0117 	movw	r1, #2071	; 0x817
 800a144:	4628      	mov	r0, r5
  tmp = 0x0000;
 800a146:	f8ad c004 	strh.w	ip, [sp, #4]
  ret += wm8994_write_reg(&pObj->Ctx, 0x817, &tmp, 2);
 800a14a:	f000 fc57 	bl	800a9fc <wm8994_write_reg>
  ret += wm8994_write_reg(&pObj->Ctx, 0x102, &tmp, 2);
 800a14e:	4632      	mov	r2, r6
  ret += wm8994_write_reg(&pObj->Ctx, 0x817, &tmp, 2);
 800a150:	4404      	add	r4, r0
  ret += wm8994_write_reg(&pObj->Ctx, 0x102, &tmp, 2);
 800a152:	2302      	movs	r3, #2
 800a154:	f44f 7181 	mov.w	r1, #258	; 0x102
 800a158:	4628      	mov	r0, r5
 800a15a:	f000 fc4f 	bl	800a9fc <wm8994_write_reg>
  tmp = 0x006C;
 800a15e:	f04f 0c6c 	mov.w	ip, #108	; 0x6c
  ret += wm8994_write_reg(&pObj->Ctx, 0x102, &tmp, 2);
 800a162:	4404      	add	r4, r0
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANTIPOP2, &tmp, 2);
 800a164:	2302      	movs	r3, #2
 800a166:	4632      	mov	r2, r6
 800a168:	4628      	mov	r0, r5
 800a16a:	2139      	movs	r1, #57	; 0x39
  tmp = 0x006C;
 800a16c:	f8ad c004 	strh.w	ip, [sp, #4]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANTIPOP2, &tmp, 2);
 800a170:	f000 fc44 	bl	800a9fc <wm8994_write_reg>
  if (pInit->InputDevice != WM8994_IN_NONE)
 800a174:	f8d8 3000 	ldr.w	r3, [r8]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANTIPOP2, &tmp, 2);
 800a178:	4404      	add	r4, r0
  if (pInit->InputDevice != WM8994_IN_NONE)
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	f000 8236 	beq.w	800a5ec <WM8994_Init+0x4dc>
    tmp = 0x0013;
 800a180:	f04f 0c13 	mov.w	ip, #19
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);  
 800a184:	2302      	movs	r3, #2
 800a186:	4632      	mov	r2, r6
 800a188:	2101      	movs	r1, #1
 800a18a:	4628      	mov	r0, r5
    tmp = 0x0013;
 800a18c:	f8ad c004 	strh.w	ip, [sp, #4]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);  
 800a190:	f000 fc34 	bl	800a9fc <wm8994_write_reg>
 800a194:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	4798      	blx	r3
 800a19a:	4681      	mov	r9, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	4798      	blx	r3
 800a1a0:	eba0 0009 	sub.w	r0, r0, r9
 800a1a4:	2831      	cmp	r0, #49	; 0x31
 800a1a6:	d9f9      	bls.n	800a19c <WM8994_Init+0x8c>
  switch (pInit->OutputDevice)
 800a1a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a1ac:	2b03      	cmp	r3, #3
 800a1ae:	d805      	bhi.n	800a1bc <WM8994_Init+0xac>
 800a1b0:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a1b4:	02260037 	.word	0x02260037
 800a1b8:	024e0004 	.word	0x024e0004
    tmp = 0x0303;
 800a1bc:	f240 3c03 	movw	ip, #771	; 0x303
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800a1c0:	2302      	movs	r3, #2
 800a1c2:	4632      	mov	r2, r6
 800a1c4:	2105      	movs	r1, #5
 800a1c6:	4628      	mov	r0, r5
    tmp = 0x0303;
 800a1c8:	f8ad c004 	strh.w	ip, [sp, #4]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800a1cc:	f000 fc16 	bl	800a9fc <wm8994_write_reg>
    tmp = 0x0001;
 800a1d0:	f04f 0c01 	mov.w	ip, #1
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800a1d4:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 800a1d6:	2302      	movs	r3, #2
 800a1d8:	4632      	mov	r2, r6
 800a1da:	f240 6101 	movw	r1, #1537	; 0x601
 800a1de:	4628      	mov	r0, r5
    tmp = 0x0001;
 800a1e0:	f8ad c004 	strh.w	ip, [sp, #4]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 800a1e4:	f000 fc0a 	bl	800a9fc <wm8994_write_reg>
 800a1e8:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 800a1ea:	2302      	movs	r3, #2
 800a1ec:	4632      	mov	r2, r6
 800a1ee:	f240 6102 	movw	r1, #1538	; 0x602
 800a1f2:	4628      	mov	r0, r5
 800a1f4:	f000 fc02 	bl	800a9fc <wm8994_write_reg>
    tmp = 0x0000;
 800a1f8:	f04f 0c00 	mov.w	ip, #0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 800a1fc:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 800a1fe:	2302      	movs	r3, #2
 800a200:	4632      	mov	r2, r6
 800a202:	f240 6104 	movw	r1, #1540	; 0x604
 800a206:	4628      	mov	r0, r5
    tmp = 0x0000;
 800a208:	f8ad c004 	strh.w	ip, [sp, #4]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 800a20c:	f000 fbf6 	bl	800a9fc <wm8994_write_reg>
 800a210:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 800a212:	2302      	movs	r3, #2
 800a214:	4632      	mov	r2, r6
 800a216:	f240 6105 	movw	r1, #1541	; 0x605
 800a21a:	4628      	mov	r0, r5
 800a21c:	f000 fbee 	bl	800a9fc <wm8994_write_reg>
 800a220:	4404      	add	r4, r0
  switch (pInit->InputDevice)
 800a222:	f8d8 3000 	ldr.w	r3, [r8]
 800a226:	3b01      	subs	r3, #1
 800a228:	2b04      	cmp	r3, #4
 800a22a:	d847      	bhi.n	800a2bc <WM8994_Init+0x1ac>
 800a22c:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a230:	02c00005 	.word	0x02c00005
 800a234:	0046026c 	.word	0x0046026c
 800a238:	0222      	.short	0x0222
    tmp = 0x030C;
 800a23a:	f44f 7c43 	mov.w	ip, #780	; 0x30c
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 800a23e:	2302      	movs	r3, #2
 800a240:	4632      	mov	r2, r6
 800a242:	2104      	movs	r1, #4
 800a244:	4628      	mov	r0, r5
    tmp = 0x030C;
 800a246:	f8ad c004 	strh.w	ip, [sp, #4]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 800a24a:	f000 fbd7 	bl	800a9fc <wm8994_write_reg>
    tmp = 0x00DB;
 800a24e:	f04f 0cdb 	mov.w	ip, #219	; 0xdb
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 800a252:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 800a254:	2302      	movs	r3, #2
 800a256:	4632      	mov	r2, r6
 800a258:	f44f 6188 	mov.w	r1, #1088	; 0x440
 800a25c:	4628      	mov	r0, r5
    tmp = 0x00DB;
 800a25e:	f8ad c004 	strh.w	ip, [sp, #4]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 800a262:	f000 fbcb 	bl	800a9fc <wm8994_write_reg>
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 800a266:	2302      	movs	r3, #2
    tmp = 0x6350;
 800a268:	f246 3c50 	movw	ip, #25424	; 0x6350
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 800a26c:	4404      	add	r4, r0
    tmp = 0x0002;
 800a26e:	4699      	mov	r9, r3
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 800a270:	4619      	mov	r1, r3
 800a272:	4632      	mov	r2, r6
 800a274:	4628      	mov	r0, r5
    tmp = 0x6350;
 800a276:	f8ad c004 	strh.w	ip, [sp, #4]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 800a27a:	f000 fbbf 	bl	800a9fc <wm8994_write_reg>
 800a27e:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 800a280:	464b      	mov	r3, r9
 800a282:	4632      	mov	r2, r6
 800a284:	f240 6106 	movw	r1, #1542	; 0x606
 800a288:	4628      	mov	r0, r5
    tmp = 0x0002;
 800a28a:	f8ad 9004 	strh.w	r9, [sp, #4]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 800a28e:	f000 fbb5 	bl	800a9fc <wm8994_write_reg>
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RMR, &tmp, 2);
 800a292:	464b      	mov	r3, r9
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 800a294:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RMR, &tmp, 2);
 800a296:	4632      	mov	r2, r6
 800a298:	f240 6107 	movw	r1, #1543	; 0x607
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RMR, &tmp, 2);
 800a29c:	4628      	mov	r0, r5
 800a29e:	f000 fbad 	bl	800a9fc <wm8994_write_reg>
    tmp = 0x000D;
 800a2a2:	f04f 0c0d 	mov.w	ip, #13
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RMR, &tmp, 2);
 800a2a6:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 800a2a8:	464b      	mov	r3, r9
 800a2aa:	4632      	mov	r2, r6
 800a2ac:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800a2b0:	4628      	mov	r0, r5
    tmp = 0x000D;
 800a2b2:	f8ad c004 	strh.w	ip, [sp, #4]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 800a2b6:	f000 fba1 	bl	800a9fc <wm8994_write_reg>
 800a2ba:	4404      	add	r4, r0
  ret += WM8994_SetFrequency(pObj, pInit->Frequency);
 800a2bc:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800a2c0:	4638      	mov	r0, r7
 800a2c2:	f7ff fc39 	bl	8009b38 <WM8994_SetFrequency>
  if(pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 800a2c6:	f8d8 3000 	ldr.w	r3, [r8]
  ret += WM8994_SetFrequency(pObj, pInit->Frequency);
 800a2ca:	4404      	add	r4, r0
  if(pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 800a2cc:	2b05      	cmp	r3, #5
 800a2ce:	f000 82a6 	beq.w	800a81e <WM8994_Init+0x70e>
  if(wm8994_aif1_control1_wl(&pObj->Ctx, (uint16_t)Resolution) != WM8994_OK)
 800a2d2:	f8b8 100c 	ldrh.w	r1, [r8, #12]
 800a2d6:	4628      	mov	r0, r5
 800a2d8:	f000 fc24 	bl	800ab24 <wm8994_aif1_control1_wl>
  if(wm8994_aif1_control1_fmt(&pObj->Ctx, (uint16_t)Protocol) != WM8994_OK)
 800a2dc:	2102      	movs	r1, #2
 800a2de:	2800      	cmp	r0, #0
 800a2e0:	bf18      	it	ne
 800a2e2:	3c01      	subne	r4, #1
 800a2e4:	4628      	mov	r0, r5
 800a2e6:	f000 fbdd 	bl	800aaa4 <wm8994_aif1_control1_fmt>
    ret += wm8994_aif1_control1_adcr_src(&pObj->Ctx, 1);
 800a2ea:	2101      	movs	r1, #1
 800a2ec:	2800      	cmp	r0, #0
 800a2ee:	bf18      	it	ne
 800a2f0:	3c01      	subne	r4, #1
 800a2f2:	4628      	mov	r0, r5
 800a2f4:	f000 fc56 	bl	800aba4 <wm8994_aif1_control1_adcr_src>
  tmp = 0x0000;
 800a2f8:	f04f 0c00 	mov.w	ip, #0
    ret += wm8994_aif1_control1_adcr_src(&pObj->Ctx, 1);
 800a2fc:	4404      	add	r4, r0
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_MASTER_SLAVE, &tmp, 2);
 800a2fe:	2302      	movs	r3, #2
 800a300:	4632      	mov	r2, r6
 800a302:	f240 3102 	movw	r1, #770	; 0x302
 800a306:	4628      	mov	r0, r5
  tmp = 0x0000;
 800a308:	f8ad c004 	strh.w	ip, [sp, #4]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_MASTER_SLAVE, &tmp, 2);
 800a30c:	f000 fb76 	bl	800a9fc <wm8994_write_reg>
  tmp = 0x000A;
 800a310:	f04f 0c0a 	mov.w	ip, #10
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_MASTER_SLAVE, &tmp, 2);
 800a314:	4404      	add	r4, r0
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLOCKING1, &tmp, 2);
 800a316:	2302      	movs	r3, #2
 800a318:	4632      	mov	r2, r6
 800a31a:	f44f 7102 	mov.w	r1, #520	; 0x208
 800a31e:	4628      	mov	r0, r5
  tmp = 0x000A;
 800a320:	f8ad c004 	strh.w	ip, [sp, #4]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLOCKING1, &tmp, 2);
 800a324:	f000 fb6a 	bl	800a9fc <wm8994_write_reg>
  tmp = 0x0001;
 800a328:	f04f 0c01 	mov.w	ip, #1
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLOCKING1, &tmp, 2);
 800a32c:	4404      	add	r4, r0
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_CLOCKING1, &tmp, 2);
 800a32e:	2302      	movs	r3, #2
 800a330:	4632      	mov	r2, r6
 800a332:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a336:	4628      	mov	r0, r5
  tmp = 0x0001;
 800a338:	f8ad c004 	strh.w	ip, [sp, #4]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_CLOCKING1, &tmp, 2);
 800a33c:	f000 fb5e 	bl	800a9fc <wm8994_write_reg>
  if (pInit->OutputDevice != WM8994_OUT_NONE)  /* Audio output selected */  
 800a340:	f8d8 9004 	ldr.w	r9, [r8, #4]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_CLOCKING1, &tmp, 2);
 800a344:	4404      	add	r4, r0
  if (pInit->OutputDevice != WM8994_OUT_NONE)  /* Audio output selected */  
 800a346:	f1b9 0f00 	cmp.w	r9, #0
 800a34a:	f000 80f6 	beq.w	800a53a <WM8994_Init+0x42a>
    if ((pInit->OutputDevice == WM8994_OUT_HEADPHONE) && (pInit->InputDevice == WM8994_IN_NONE))
 800a34e:	f1b9 0f02 	cmp.w	r9, #2
 800a352:	d105      	bne.n	800a360 <WM8994_Init+0x250>
 800a354:	f8d8 a000 	ldr.w	sl, [r8]
 800a358:	f1ba 0f00 	cmp.w	sl, #0
 800a35c:	f000 828b 	beq.w	800a876 <WM8994_Init+0x766>
      tmp = 0x0300;
 800a360:	f44f 7940 	mov.w	r9, #768	; 0x300
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 800a364:	2302      	movs	r3, #2
 800a366:	4632      	mov	r2, r6
 800a368:	2103      	movs	r1, #3
 800a36a:	4628      	mov	r0, r5
      tmp = 0x0300;
 800a36c:	f8ad 9004 	strh.w	r9, [sp, #4]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 800a370:	f000 fb44 	bl	800a9fc <wm8994_write_reg>
      tmp = 0x0000;
 800a374:	f04f 0c00 	mov.w	ip, #0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 800a378:	4404      	add	r4, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXL_ATT, &tmp, 2);
 800a37a:	2302      	movs	r3, #2
 800a37c:	4632      	mov	r2, r6
 800a37e:	2122      	movs	r1, #34	; 0x22
 800a380:	4628      	mov	r0, r5
      tmp = 0x0000;
 800a382:	f8ad c004 	strh.w	ip, [sp, #4]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXL_ATT, &tmp, 2);
 800a386:	f000 fb39 	bl	800a9fc <wm8994_write_reg>
 800a38a:	4404      	add	r4, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXR_ATT, &tmp, 2);
 800a38c:	2302      	movs	r3, #2
 800a38e:	4632      	mov	r2, r6
 800a390:	2123      	movs	r1, #35	; 0x23
 800a392:	4628      	mov	r0, r5
 800a394:	f000 fb32 	bl	800a9fc <wm8994_write_reg>
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPEAKER_MIXER, &tmp, 2);
 800a398:	2302      	movs	r3, #2
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXR_ATT, &tmp, 2);
 800a39a:	4404      	add	r4, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPEAKER_MIXER, &tmp, 2);
 800a39c:	4632      	mov	r2, r6
 800a39e:	2136      	movs	r1, #54	; 0x36
 800a3a0:	4628      	mov	r0, r5
      tmp = 0x0300;
 800a3a2:	f8ad 9004 	strh.w	r9, [sp, #4]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPEAKER_MIXER, &tmp, 2);
 800a3a6:	f000 fb29 	bl	800a9fc <wm8994_write_reg>
      tmp = 0x3003;
 800a3aa:	f243 0c03 	movw	ip, #12291	; 0x3003
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPEAKER_MIXER, &tmp, 2);
 800a3ae:	4404      	add	r4, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 800a3b0:	2302      	movs	r3, #2
 800a3b2:	4632      	mov	r2, r6
 800a3b4:	2101      	movs	r1, #1
 800a3b6:	4628      	mov	r0, r5
      tmp = 0x3003;
 800a3b8:	f8ad c004 	strh.w	ip, [sp, #4]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 800a3bc:	f000 fb1e 	bl	800a9fc <wm8994_write_reg>
      if (pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 800a3c0:	f8d8 3000 	ldr.w	r3, [r8]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 800a3c4:	4404      	add	r4, r0
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLASS_W, &tmp, 2);
 800a3c6:	4632      	mov	r2, r6
 800a3c8:	2151      	movs	r1, #81	; 0x51
      if (pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 800a3ca:	2b05      	cmp	r3, #5
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLASS_W, &tmp, 2);
 800a3cc:	4628      	mov	r0, r5
 800a3ce:	f04f 0302 	mov.w	r3, #2
        tmp = 0x0205;
 800a3d2:	bf0c      	ite	eq
 800a3d4:	f240 2c05 	movweq	ip, #517	; 0x205
        tmp = 0x0005;
 800a3d8:	f04f 0c05 	movne.w	ip, #5
 800a3dc:	f8ad c004 	strh.w	ip, [sp, #4]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLASS_W, &tmp, 2);
 800a3e0:	f000 fb0c 	bl	800a9fc <wm8994_write_reg>
      tmp = 0x3303;
 800a3e4:	f243 3c03 	movw	ip, #13059	; 0x3303
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLASS_W, &tmp, 2);
 800a3e8:	4404      	add	r4, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 800a3ea:	2302      	movs	r3, #2
 800a3ec:	4632      	mov	r2, r6
 800a3ee:	2101      	movs	r1, #1
 800a3f0:	4628      	mov	r0, r5
      tmp = 0x3303;
 800a3f2:	f8ad c004 	strh.w	ip, [sp, #4]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 800a3f6:	f000 fb01 	bl	800a9fc <wm8994_write_reg>
      tmp = 0x0022;
 800a3fa:	f04f 0c22 	mov.w	ip, #34	; 0x22
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 800a3fe:	4404      	add	r4, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 800a400:	2302      	movs	r3, #2
 800a402:	4632      	mov	r2, r6
 800a404:	2160      	movs	r1, #96	; 0x60
 800a406:	4628      	mov	r0, r5
      tmp = 0x0022;
 800a408:	f8ad c004 	strh.w	ip, [sp, #4]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 800a40c:	f000 faf6 	bl	800a9fc <wm8994_write_reg>
      tmp = 0x9F25;
 800a410:	f649 7c25 	movw	ip, #40741	; 0x9f25
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 800a414:	4404      	add	r4, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_CHARGE_PUMP1, &tmp, 2);
 800a416:	2302      	movs	r3, #2
 800a418:	4632      	mov	r2, r6
 800a41a:	214c      	movs	r1, #76	; 0x4c
 800a41c:	4628      	mov	r0, r5
      tmp = 0x9F25;
 800a41e:	f8ad c004 	strh.w	ip, [sp, #4]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_CHARGE_PUMP1, &tmp, 2);
 800a422:	f000 faeb 	bl	800a9fc <wm8994_write_reg>
  tickstart = pObj->IO.GetTick();
 800a426:	697b      	ldr	r3, [r7, #20]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_CHARGE_PUMP1, &tmp, 2);
 800a428:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 800a42a:	4798      	blx	r3
 800a42c:	4681      	mov	r9, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	4798      	blx	r3
 800a432:	eba0 0009 	sub.w	r0, r0, r9
 800a436:	280e      	cmp	r0, #14
 800a438:	d9f9      	bls.n	800a42e <WM8994_Init+0x31e>
      tmp = 0x0001;
 800a43a:	f04f 0c01 	mov.w	ip, #1
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 800a43e:	2302      	movs	r3, #2
 800a440:	4632      	mov	r2, r6
 800a442:	212d      	movs	r1, #45	; 0x2d
 800a444:	4628      	mov	r0, r5
      tmp = 0x0001;
 800a446:	f8ad c004 	strh.w	ip, [sp, #4]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 800a44a:	f000 fad7 	bl	800a9fc <wm8994_write_reg>
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 800a44e:	2302      	movs	r3, #2
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 800a450:	4404      	add	r4, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 800a452:	4632      	mov	r2, r6
 800a454:	212e      	movs	r1, #46	; 0x2e
 800a456:	4628      	mov	r0, r5
 800a458:	f000 fad0 	bl	800a9fc <wm8994_write_reg>
      tmp = 0x0330;
 800a45c:	f44f 7c4c 	mov.w	ip, #816	; 0x330
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 800a460:	4404      	add	r4, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 800a462:	2302      	movs	r3, #2
 800a464:	4632      	mov	r2, r6
 800a466:	2103      	movs	r1, #3
 800a468:	4628      	mov	r0, r5
      tmp = 0x0330;
 800a46a:	f8ad c004 	strh.w	ip, [sp, #4]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 800a46e:	f000 fac5 	bl	800a9fc <wm8994_write_reg>
      tmp = 0x0033;
 800a472:	f04f 0c33 	mov.w	ip, #51	; 0x33
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 800a476:	4404      	add	r4, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_DC_SERVO1, &tmp, 2);
 800a478:	2302      	movs	r3, #2
 800a47a:	4632      	mov	r2, r6
 800a47c:	2154      	movs	r1, #84	; 0x54
 800a47e:	4628      	mov	r0, r5
      tmp = 0x0033;
 800a480:	f8ad c004 	strh.w	ip, [sp, #4]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_DC_SERVO1, &tmp, 2);
 800a484:	f000 faba 	bl	800a9fc <wm8994_write_reg>
  tickstart = pObj->IO.GetTick();
 800a488:	697b      	ldr	r3, [r7, #20]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_DC_SERVO1, &tmp, 2);
 800a48a:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 800a48c:	4798      	blx	r3
 800a48e:	4681      	mov	r9, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	4798      	blx	r3
 800a494:	eba0 0009 	sub.w	r0, r0, r9
 800a498:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800a49c:	d9f8      	bls.n	800a490 <WM8994_Init+0x380>
      tmp = 0x00EE;
 800a49e:	f04f 0cee 	mov.w	ip, #238	; 0xee
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 800a4a2:	2302      	movs	r3, #2
 800a4a4:	4632      	mov	r2, r6
 800a4a6:	2160      	movs	r1, #96	; 0x60
 800a4a8:	4628      	mov	r0, r5
      tmp = 0x00EE;
 800a4aa:	f8ad c004 	strh.w	ip, [sp, #4]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 800a4ae:	f000 faa5 	bl	800a9fc <wm8994_write_reg>
 800a4b2:	4404      	add	r4, r0
    tmp = 0x00C0;
 800a4b4:	f04f 0ac0 	mov.w	sl, #192	; 0xc0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC1_LEFT_VOL, &tmp, 2);
 800a4b8:	2302      	movs	r3, #2
 800a4ba:	4632      	mov	r2, r6
 800a4bc:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 800a4c0:	4628      	mov	r0, r5
    tmp = 0x00C0;
 800a4c2:	f8ad a004 	strh.w	sl, [sp, #4]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC1_LEFT_VOL, &tmp, 2);
 800a4c6:	f000 fa99 	bl	800a9fc <wm8994_write_reg>
 800a4ca:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC1_RIGHT_VOL, &tmp, 2);
 800a4cc:	2302      	movs	r3, #2
 800a4ce:	4632      	mov	r2, r6
 800a4d0:	f240 6111 	movw	r1, #1553	; 0x611
 800a4d4:	4628      	mov	r0, r5
 800a4d6:	f000 fa91 	bl	800a9fc <wm8994_write_reg>
    tmp = 0x0010;
 800a4da:	f04f 0910 	mov.w	r9, #16
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC1_RIGHT_VOL, &tmp, 2);
 800a4de:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 800a4e0:	2302      	movs	r3, #2
 800a4e2:	4632      	mov	r2, r6
 800a4e4:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800a4e8:	4628      	mov	r0, r5
    tmp = 0x0010;
 800a4ea:	f8ad 9004 	strh.w	r9, [sp, #4]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 800a4ee:	f000 fa85 	bl	800a9fc <wm8994_write_reg>
 800a4f2:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC2_LEFT_VOL, &tmp, 2);
 800a4f4:	2302      	movs	r3, #2
 800a4f6:	4632      	mov	r2, r6
 800a4f8:	f240 6112 	movw	r1, #1554	; 0x612
 800a4fc:	4628      	mov	r0, r5
    tmp = 0x00C0;
 800a4fe:	f8ad a004 	strh.w	sl, [sp, #4]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC2_LEFT_VOL, &tmp, 2);
 800a502:	f000 fa7b 	bl	800a9fc <wm8994_write_reg>
 800a506:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC2_RIGHT_VOL, &tmp, 2);
 800a508:	2302      	movs	r3, #2
 800a50a:	4632      	mov	r2, r6
 800a50c:	f240 6113 	movw	r1, #1555	; 0x613
 800a510:	4628      	mov	r0, r5
 800a512:	f000 fa73 	bl	800a9fc <wm8994_write_reg>
 800a516:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 800a518:	2302      	movs	r3, #2
 800a51a:	4632      	mov	r2, r6
 800a51c:	f240 4122 	movw	r1, #1058	; 0x422
 800a520:	4628      	mov	r0, r5
    tmp = 0x0010;
 800a522:	f8ad 9004 	strh.w	r9, [sp, #4]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 800a526:	f000 fa69 	bl	800a9fc <wm8994_write_reg>
 800a52a:	4404      	add	r4, r0
    ret += WM8994_SetVolume(pObj, VOLUME_OUTPUT, (uint8_t)pInit->Volume); 
 800a52c:	f898 2010 	ldrb.w	r2, [r8, #16]
 800a530:	4638      	mov	r0, r7
 800a532:	2101      	movs	r1, #1
 800a534:	f7ff fcd4 	bl	8009ee0 <WM8994_SetVolume>
 800a538:	4404      	add	r4, r0
  if (pInit->InputDevice != WM8994_IN_NONE) /* Audio input selected */
 800a53a:	f8d8 3000 	ldr.w	r3, [r8]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d04d      	beq.n	800a5de <WM8994_Init+0x4ce>
    if ((pInit->InputDevice == WM8994_IN_MIC1) || (pInit->InputDevice == WM8994_IN_MIC2))
 800a542:	1e5a      	subs	r2, r3, #1
 800a544:	2a01      	cmp	r2, #1
 800a546:	f240 8173 	bls.w	800a830 <WM8994_Init+0x720>
    else if(pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 800a54a:	2b05      	cmp	r3, #5
 800a54c:	f000 81ed 	beq.w	800a92a <WM8994_Init+0x81a>
      tmp = 0x000B;
 800a550:	270b      	movs	r7, #11
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_LINE_IN12_VOL, &tmp, 2);
 800a552:	2302      	movs	r3, #2
 800a554:	4632      	mov	r2, r6
 800a556:	2118      	movs	r1, #24
 800a558:	4628      	mov	r0, r5
      tmp = 0x000B;
 800a55a:	f8ad 7004 	strh.w	r7, [sp, #4]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_LINE_IN12_VOL, &tmp, 2);
 800a55e:	f000 fa4d 	bl	800a9fc <wm8994_write_reg>
 800a562:	4404      	add	r4, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_RIGHT_LINE_IN12_VOL, &tmp, 2);
 800a564:	2302      	movs	r3, #2
 800a566:	4632      	mov	r2, r6
 800a568:	211a      	movs	r1, #26
 800a56a:	4628      	mov	r0, r5
 800a56c:	f000 fa46 	bl	800a9fc <wm8994_write_reg>
      tmp = 0x1800;
 800a570:	f44f 57c0 	mov.w	r7, #6144	; 0x1800
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_RIGHT_LINE_IN12_VOL, &tmp, 2);
 800a574:	4404      	add	r4, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_FILTERS, &tmp, 2);
 800a576:	4632      	mov	r2, r6
 800a578:	2302      	movs	r3, #2
 800a57a:	f44f 6182 	mov.w	r1, #1040	; 0x410
 800a57e:	4628      	mov	r0, r5
      tmp = 0x1800;
 800a580:	f8ad 7004 	strh.w	r7, [sp, #4]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_FILTERS, &tmp, 2);
 800a584:	f000 fa3a 	bl	800a9fc <wm8994_write_reg>
 800a588:	4404      	add	r4, r0
    tmp = Volume | 0x100U;
 800a58a:	f898 2010 	ldrb.w	r2, [r8, #16]
 800a58e:	ae02      	add	r6, sp, #8
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LEFT_VOL, &tmp, 2); 
 800a590:	2302      	movs	r3, #2
 800a592:	f44f 6180 	mov.w	r1, #1024	; 0x400
    tmp = Volume | 0x100U;
 800a596:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LEFT_VOL, &tmp, 2); 
 800a59a:	4628      	mov	r0, r5
    tmp = Volume | 0x100U;
 800a59c:	f826 2d02 	strh.w	r2, [r6, #-2]!
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LEFT_VOL, &tmp, 2); 
 800a5a0:	4632      	mov	r2, r6
 800a5a2:	f000 fa2b 	bl	800a9fc <wm8994_write_reg>
 800a5a6:	4607      	mov	r7, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RIGHT_VOL, &tmp, 2); 
 800a5a8:	4632      	mov	r2, r6
 800a5aa:	2302      	movs	r3, #2
 800a5ac:	f240 4101 	movw	r1, #1025	; 0x401
 800a5b0:	4628      	mov	r0, r5
 800a5b2:	f000 fa23 	bl	800a9fc <wm8994_write_reg>
 800a5b6:	4407      	add	r7, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LEFT_VOL, &tmp, 2); 
 800a5b8:	4632      	mov	r2, r6
 800a5ba:	2302      	movs	r3, #2
 800a5bc:	f240 4104 	movw	r1, #1028	; 0x404
 800a5c0:	4628      	mov	r0, r5
 800a5c2:	f000 fa1b 	bl	800a9fc <wm8994_write_reg>
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RIGHT_VOL, &tmp, 2); 
 800a5c6:	4632      	mov	r2, r6
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LEFT_VOL, &tmp, 2); 
 800a5c8:	4407      	add	r7, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RIGHT_VOL, &tmp, 2); 
 800a5ca:	2302      	movs	r3, #2
 800a5cc:	4628      	mov	r0, r5
 800a5ce:	f240 4105 	movw	r1, #1029	; 0x405
 800a5d2:	f000 fa13 	bl	800a9fc <wm8994_write_reg>
  if(ret != WM8994_OK)
 800a5d6:	4240      	negs	r0, r0
 800a5d8:	42b8      	cmp	r0, r7
 800a5da:	bf18      	it	ne
 800a5dc:	3c01      	subne	r4, #1
  if(ret != WM8994_OK)
 800a5de:	1c20      	adds	r0, r4, #0
 800a5e0:	bf18      	it	ne
 800a5e2:	2001      	movne	r0, #1
}
 800a5e4:	4240      	negs	r0, r0
 800a5e6:	b003      	add	sp, #12
 800a5e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 800a5ec:	2302      	movs	r3, #2
 800a5ee:	4632      	mov	r2, r6
 800a5f0:	2101      	movs	r1, #1
 800a5f2:	4628      	mov	r0, r5
    tmp = 0x0003;
 800a5f4:	f8ad 9004 	strh.w	r9, [sp, #4]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 800a5f8:	f000 fa00 	bl	800a9fc <wm8994_write_reg>
 800a5fc:	4404      	add	r4, r0
 800a5fe:	e5ca      	b.n	800a196 <WM8994_Init+0x86>
    tmp = 0x0C0C;
 800a600:	f640 4c0c 	movw	ip, #3084	; 0xc0c
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800a604:	2302      	movs	r3, #2
 800a606:	4632      	mov	r2, r6
 800a608:	2105      	movs	r1, #5
 800a60a:	4628      	mov	r0, r5
    tmp = 0x0C0C;
 800a60c:	f8ad c004 	strh.w	ip, [sp, #4]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800a610:	f000 f9f4 	bl	800a9fc <wm8994_write_reg>
    tmp = 0x0000;
 800a614:	f04f 0c00 	mov.w	ip, #0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800a618:	4404      	add	r4, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 800a61a:	2302      	movs	r3, #2
 800a61c:	4632      	mov	r2, r6
 800a61e:	f240 6101 	movw	r1, #1537	; 0x601
 800a622:	4628      	mov	r0, r5
      tmp = 0x0001;
 800a624:	f8ad c004 	strh.w	ip, [sp, #4]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 800a628:	f000 f9e8 	bl	800a9fc <wm8994_write_reg>
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 800a62c:	2302      	movs	r3, #2
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 800a62e:	4404      	add	r4, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 800a630:	4632      	mov	r2, r6
      tmp = 0x0002;
 800a632:	4699      	mov	r9, r3
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 800a634:	f240 6102 	movw	r1, #1538	; 0x602
 800a638:	4628      	mov	r0, r5
 800a63a:	f000 f9df 	bl	800a9fc <wm8994_write_reg>
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 800a63e:	4632      	mov	r2, r6
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 800a640:	4404      	add	r4, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 800a642:	464b      	mov	r3, r9
 800a644:	f240 6104 	movw	r1, #1540	; 0x604
 800a648:	4628      	mov	r0, r5
      tmp = 0x0002;
 800a64a:	f8ad 9004 	strh.w	r9, [sp, #4]
 800a64e:	e5dd      	b.n	800a20c <WM8994_Init+0xfc>
    if (pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 800a650:	f8d8 1000 	ldr.w	r1, [r8]
      tmp = 0x0F0F;
 800a654:	f640 7c0f 	movw	ip, #3855	; 0xf0f
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800a658:	2302      	movs	r3, #2
 800a65a:	4632      	mov	r2, r6
    if (pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 800a65c:	2905      	cmp	r1, #5
 800a65e:	f000 8144 	beq.w	800a8ea <WM8994_Init+0x7da>
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800a662:	2105      	movs	r1, #5
 800a664:	4628      	mov	r0, r5
      tmp = 0x0F0F;
 800a666:	f8ad c004 	strh.w	ip, [sp, #4]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800a66a:	f000 f9c7 	bl	800a9fc <wm8994_write_reg>
      tmp = 0x0001;
 800a66e:	f04f 0c01 	mov.w	ip, #1
 800a672:	e7d1      	b.n	800a618 <WM8994_Init+0x508>
    tmp = 0x0F3C;
 800a674:	f640 7c3c 	movw	ip, #3900	; 0xf3c
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 800a678:	2302      	movs	r3, #2
 800a67a:	4632      	mov	r2, r6
 800a67c:	2104      	movs	r1, #4
 800a67e:	4628      	mov	r0, r5
    tmp = 0x0F3C;
 800a680:	f8ad c004 	strh.w	ip, [sp, #4]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 800a684:	f000 f9ba 	bl	800a9fc <wm8994_write_reg>
    tmp = 0x00DB;
 800a688:	f04f 0cdb 	mov.w	ip, #219	; 0xdb
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 800a68c:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC2, &tmp, 2);
 800a68e:	2302      	movs	r3, #2
 800a690:	4632      	mov	r2, r6
 800a692:	f44f 618a 	mov.w	r1, #1104	; 0x450
 800a696:	4628      	mov	r0, r5
    tmp = 0x00DB;
 800a698:	f8ad c004 	strh.w	ip, [sp, #4]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC2, &tmp, 2);
 800a69c:	f000 f9ae 	bl	800a9fc <wm8994_write_reg>
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 800a6a0:	2302      	movs	r3, #2
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC2, &tmp, 2);
 800a6a2:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 800a6a4:	4632      	mov	r2, r6
 800a6a6:	f44f 6188 	mov.w	r1, #1088	; 0x440
 800a6aa:	4628      	mov	r0, r5
 800a6ac:	f000 f9a6 	bl	800a9fc <wm8994_write_reg>
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 800a6b0:	2302      	movs	r3, #2
    tmp = 0x63A0;
 800a6b2:	f246 3ca0 	movw	ip, #25504	; 0x63a0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 800a6b6:	4404      	add	r4, r0
    tmp = 0x0002;
 800a6b8:	4699      	mov	r9, r3
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 800a6ba:	4619      	mov	r1, r3
 800a6bc:	4632      	mov	r2, r6
 800a6be:	4628      	mov	r0, r5
    tmp = 0x63A0;
 800a6c0:	f8ad c004 	strh.w	ip, [sp, #4]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 800a6c4:	f000 f99a 	bl	800a9fc <wm8994_write_reg>
 800a6c8:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 800a6ca:	464b      	mov	r3, r9
 800a6cc:	4632      	mov	r2, r6
 800a6ce:	f240 6106 	movw	r1, #1542	; 0x606
 800a6d2:	4628      	mov	r0, r5
    tmp = 0x0002;
 800a6d4:	f8ad 9004 	strh.w	r9, [sp, #4]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 800a6d8:	f000 f990 	bl	800a9fc <wm8994_write_reg>
 800a6dc:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RMR, &tmp, 2);
 800a6de:	464b      	mov	r3, r9
 800a6e0:	4632      	mov	r2, r6
 800a6e2:	f240 6107 	movw	r1, #1543	; 0x607
 800a6e6:	4628      	mov	r0, r5
 800a6e8:	f000 f988 	bl	800a9fc <wm8994_write_reg>
 800a6ec:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LMR, &tmp, 2);
 800a6ee:	464b      	mov	r3, r9
 800a6f0:	4632      	mov	r2, r6
 800a6f2:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 800a6f6:	4628      	mov	r0, r5
 800a6f8:	f000 f980 	bl	800a9fc <wm8994_write_reg>
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RMR, &tmp, 2);
 800a6fc:	464b      	mov	r3, r9
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LMR, &tmp, 2);
 800a6fe:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RMR, &tmp, 2);
 800a700:	4632      	mov	r2, r6
 800a702:	f240 6109 	movw	r1, #1545	; 0x609
 800a706:	e5c9      	b.n	800a29c <WM8994_Init+0x18c>
    tmp = 0x0011;
 800a708:	f04f 0c11 	mov.w	ip, #17
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_2, &tmp, 2);
 800a70c:	2302      	movs	r3, #2
 800a70e:	4632      	mov	r2, r6
 800a710:	2128      	movs	r1, #40	; 0x28
 800a712:	4628      	mov	r0, r5
    tmp = 0x0011;
 800a714:	f8ad c004 	strh.w	ip, [sp, #4]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_2, &tmp, 2);
 800a718:	f000 f970 	bl	800a9fc <wm8994_write_reg>
    tmp = 0x0035;
 800a71c:	f04f 0c35 	mov.w	ip, #53	; 0x35
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_2, &tmp, 2);
 800a720:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_3, &tmp, 2);
 800a722:	2302      	movs	r3, #2
 800a724:	4632      	mov	r2, r6
 800a726:	2129      	movs	r1, #41	; 0x29
 800a728:	4628      	mov	r0, r5
    tmp = 0x0035;
 800a72a:	f8ad c004 	strh.w	ip, [sp, #4]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_3, &tmp, 2);
 800a72e:	f000 f965 	bl	800a9fc <wm8994_write_reg>
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_4, &tmp, 2);
 800a732:	2302      	movs	r3, #2
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_3, &tmp, 2);
 800a734:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_4, &tmp, 2);
 800a736:	4632      	mov	r2, r6
 800a738:	212a      	movs	r1, #42	; 0x2a
 800a73a:	4628      	mov	r0, r5
 800a73c:	f000 f95e 	bl	800a9fc <wm8994_write_reg>
    tmp = 0x0303;
 800a740:	f240 3c03 	movw	ip, #771	; 0x303
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_4, &tmp, 2);
 800a744:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 800a746:	2302      	movs	r3, #2
 800a748:	4632      	mov	r2, r6
 800a74a:	2104      	movs	r1, #4
 800a74c:	4628      	mov	r0, r5
    tmp = 0x0303;
 800a74e:	f8ad c004 	strh.w	ip, [sp, #4]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 800a752:	f000 f953 	bl	800a9fc <wm8994_write_reg>
    tmp = 0x00DB;
 800a756:	f04f 0cdb 	mov.w	ip, #219	; 0xdb
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 800a75a:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 800a75c:	2302      	movs	r3, #2
 800a75e:	4632      	mov	r2, r6
 800a760:	f44f 6188 	mov.w	r1, #1088	; 0x440
 800a764:	4628      	mov	r0, r5
    tmp = 0x00DB;
 800a766:	f8ad c004 	strh.w	ip, [sp, #4]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 800a76a:	f000 f947 	bl	800a9fc <wm8994_write_reg>
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 800a76e:	2302      	movs	r3, #2
    tmp = 0x6350;
 800a770:	f246 3c50 	movw	ip, #25424	; 0x6350
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 800a774:	4404      	add	r4, r0
    tmp = 0x0002;
 800a776:	4699      	mov	r9, r3
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 800a778:	4619      	mov	r1, r3
 800a77a:	4632      	mov	r2, r6
 800a77c:	4628      	mov	r0, r5
    tmp = 0x6350;
 800a77e:	f8ad c004 	strh.w	ip, [sp, #4]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 800a782:	f000 f93b 	bl	800a9fc <wm8994_write_reg>
 800a786:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 800a788:	464b      	mov	r3, r9
 800a78a:	4632      	mov	r2, r6
 800a78c:	f240 6106 	movw	r1, #1542	; 0x606
 800a790:	4628      	mov	r0, r5
    tmp = 0x0002;
 800a792:	f8ad 9004 	strh.w	r9, [sp, #4]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 800a796:	f000 f931 	bl	800a9fc <wm8994_write_reg>
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RMR, &tmp, 2);
 800a79a:	464b      	mov	r3, r9
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 800a79c:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RMR, &tmp, 2);
 800a79e:	4632      	mov	r2, r6
 800a7a0:	f240 6107 	movw	r1, #1543	; 0x607
 800a7a4:	4628      	mov	r0, r5
 800a7a6:	f000 f929 	bl	800a9fc <wm8994_write_reg>
    tmp = 0x800D;
 800a7aa:	f248 0c0d 	movw	ip, #32781	; 0x800d
 800a7ae:	e57a      	b.n	800a2a6 <WM8994_Init+0x196>
    tmp = 0x0C30;
 800a7b0:	f44f 6c43 	mov.w	ip, #3120	; 0xc30
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 800a7b4:	2302      	movs	r3, #2
 800a7b6:	4632      	mov	r2, r6
 800a7b8:	2104      	movs	r1, #4
 800a7ba:	4628      	mov	r0, r5
    tmp = 0x0C30;
 800a7bc:	f8ad c004 	strh.w	ip, [sp, #4]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 800a7c0:	f000 f91c 	bl	800a9fc <wm8994_write_reg>
    tmp = 0x00DB;
 800a7c4:	f04f 0cdb 	mov.w	ip, #219	; 0xdb
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 800a7c8:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC2, &tmp, 2);
 800a7ca:	2302      	movs	r3, #2
 800a7cc:	4632      	mov	r2, r6
 800a7ce:	f44f 618a 	mov.w	r1, #1104	; 0x450
 800a7d2:	4628      	mov	r0, r5
    tmp = 0x00DB;
 800a7d4:	f8ad c004 	strh.w	ip, [sp, #4]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC2, &tmp, 2);
 800a7d8:	f000 f910 	bl	800a9fc <wm8994_write_reg>
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 800a7dc:	2302      	movs	r3, #2
    tmp = 0x6000;
 800a7de:	f44f 4cc0 	mov.w	ip, #24576	; 0x6000
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC2, &tmp, 2);
 800a7e2:	4404      	add	r4, r0
    tmp = 0x0002;
 800a7e4:	4699      	mov	r9, r3
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 800a7e6:	4619      	mov	r1, r3
 800a7e8:	4632      	mov	r2, r6
 800a7ea:	4628      	mov	r0, r5
    tmp = 0x6000;
 800a7ec:	f8ad c004 	strh.w	ip, [sp, #4]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 800a7f0:	f000 f904 	bl	800a9fc <wm8994_write_reg>
 800a7f4:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LMR, &tmp, 2);
 800a7f6:	464b      	mov	r3, r9
 800a7f8:	4632      	mov	r2, r6
 800a7fa:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 800a7fe:	4628      	mov	r0, r5
    tmp = 0x0002;
 800a800:	f8ad 9004 	strh.w	r9, [sp, #4]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LMR, &tmp, 2);
 800a804:	f000 f8fa 	bl	800a9fc <wm8994_write_reg>
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RMR, &tmp, 2);
 800a808:	464b      	mov	r3, r9
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LMR, &tmp, 2);
 800a80a:	4404      	add	r4, r0
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RMR, &tmp, 2);
 800a80c:	4632      	mov	r2, r6
 800a80e:	f240 6109 	movw	r1, #1545	; 0x609
 800a812:	4628      	mov	r0, r5
 800a814:	f000 f8f2 	bl	800a9fc <wm8994_write_reg>
    tmp = 0x000E;
 800a818:	f04f 0c0e 	mov.w	ip, #14
 800a81c:	e543      	b.n	800a2a6 <WM8994_Init+0x196>
  if(wm8994_aif1_control1_wl(&pObj->Ctx, (uint16_t)Resolution) != WM8994_OK)
 800a81e:	2100      	movs	r1, #0
 800a820:	4628      	mov	r0, r5
 800a822:	f000 f97f 	bl	800ab24 <wm8994_aif1_control1_wl>
  if(wm8994_aif1_control1_fmt(&pObj->Ctx, (uint16_t)Protocol) != WM8994_OK)
 800a826:	2103      	movs	r1, #3
 800a828:	2800      	cmp	r0, #0
 800a82a:	bf18      	it	ne
 800a82c:	3c01      	subne	r4, #1
 800a82e:	e559      	b.n	800a2e4 <WM8994_Init+0x1d4>
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 800a830:	2302      	movs	r3, #2
      tmp = 0x0013;
 800a832:	f04f 0c13 	mov.w	ip, #19
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 800a836:	4632      	mov	r2, r6
 800a838:	2101      	movs	r1, #1
      tmp = 0x0002;
 800a83a:	461f      	mov	r7, r3
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 800a83c:	4628      	mov	r0, r5
      tmp = 0x0013;
 800a83e:	f8ad c004 	strh.w	ip, [sp, #4]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 800a842:	f000 f8db 	bl	800a9fc <wm8994_write_reg>
 800a846:	4404      	add	r4, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OVERSAMPLING, &tmp, 2);
 800a848:	463b      	mov	r3, r7
 800a84a:	4632      	mov	r2, r6
 800a84c:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 800a850:	4628      	mov	r0, r5
      tmp = 0x0002;
 800a852:	f8ad 7004 	strh.w	r7, [sp, #4]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OVERSAMPLING, &tmp, 2);
 800a856:	f000 f8d1 	bl	800a9fc <wm8994_write_reg>
      tmp = 0x3800;
 800a85a:	f44f 5c60 	mov.w	ip, #14336	; 0x3800
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OVERSAMPLING, &tmp, 2);
 800a85e:	4404      	add	r4, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_FILTERS, &tmp, 2);
 800a860:	463b      	mov	r3, r7
 800a862:	4632      	mov	r2, r6
 800a864:	f240 4111 	movw	r1, #1041	; 0x411
 800a868:	4628      	mov	r0, r5
      tmp = 0x3800;
 800a86a:	f8ad c004 	strh.w	ip, [sp, #4]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_FILTERS, &tmp, 2);
 800a86e:	f000 f8c5 	bl	800a9fc <wm8994_write_reg>
 800a872:	4404      	add	r4, r0
 800a874:	e689      	b.n	800a58a <WM8994_Init+0x47a>
      tmp = 0x0100;
 800a876:	f44f 7c80 	mov.w	ip, #256	; 0x100
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 800a87a:	464b      	mov	r3, r9
 800a87c:	4632      	mov	r2, r6
 800a87e:	212d      	movs	r1, #45	; 0x2d
 800a880:	4628      	mov	r0, r5
      if(ColdStartup == 1U)
 800a882:	f8df b130 	ldr.w	fp, [pc, #304]	; 800a9b4 <WM8994_Init+0x8a4>
      tmp = 0x0100;
 800a886:	f8ad c004 	strh.w	ip, [sp, #4]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 800a88a:	f000 f8b7 	bl	800a9fc <wm8994_write_reg>
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 800a88e:	464b      	mov	r3, r9
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 800a890:	4404      	add	r4, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 800a892:	4632      	mov	r2, r6
 800a894:	212e      	movs	r1, #46	; 0x2e
 800a896:	4628      	mov	r0, r5
 800a898:	f000 f8b0 	bl	800a9fc <wm8994_write_reg>
      if(ColdStartup == 1U)
 800a89c:	f89b 3000 	ldrb.w	r3, [fp]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 800a8a0:	4404      	add	r4, r0
      if(ColdStartup == 1U)
 800a8a2:	2b01      	cmp	r3, #1
 800a8a4:	d06c      	beq.n	800a980 <WM8994_Init+0x870>
        tmp = 0x8108;
 800a8a6:	f248 1c08 	movw	ip, #33032	; 0x8108
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 800a8aa:	464b      	mov	r3, r9
 800a8ac:	4632      	mov	r2, r6
 800a8ae:	f44f 7188 	mov.w	r1, #272	; 0x110
 800a8b2:	4628      	mov	r0, r5
        tmp = 0x8108;
 800a8b4:	f8ad c004 	strh.w	ip, [sp, #4]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 800a8b8:	f000 f8a0 	bl	800a9fc <wm8994_write_reg>
  tickstart = pObj->IO.GetTick();
 800a8bc:	697b      	ldr	r3, [r7, #20]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 800a8be:	4404      	add	r4, r0
  tickstart = pObj->IO.GetTick();
 800a8c0:	4798      	blx	r3
 800a8c2:	4681      	mov	r9, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	4798      	blx	r3
 800a8c8:	eba0 0009 	sub.w	r0, r0, r9
 800a8cc:	2831      	cmp	r0, #49	; 0x31
 800a8ce:	d9f9      	bls.n	800a8c4 <WM8994_Init+0x7b4>
      tmp = 0x0000;
 800a8d0:	f04f 0c00 	mov.w	ip, #0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 800a8d4:	2302      	movs	r3, #2
 800a8d6:	4632      	mov	r2, r6
 800a8d8:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800a8dc:	4628      	mov	r0, r5
      tmp = 0x0000;
 800a8de:	f8ad c004 	strh.w	ip, [sp, #4]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 800a8e2:	f000 f88b 	bl	800a9fc <wm8994_write_reg>
 800a8e6:	4404      	add	r4, r0
 800a8e8:	e5e4      	b.n	800a4b4 <WM8994_Init+0x3a4>
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800a8ea:	4628      	mov	r0, r5
      tmp = 0x0F0F;
 800a8ec:	f8ad c004 	strh.w	ip, [sp, #4]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800a8f0:	f000 f884 	bl	800a9fc <wm8994_write_reg>
      tmp = 0x0003;
 800a8f4:	f04f 0c03 	mov.w	ip, #3
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800a8f8:	4404      	add	r4, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 800a8fa:	2302      	movs	r3, #2
 800a8fc:	4632      	mov	r2, r6
 800a8fe:	f240 6101 	movw	r1, #1537	; 0x601
 800a902:	4628      	mov	r0, r5
      tmp = 0x0003;
 800a904:	f8ad c004 	strh.w	ip, [sp, #4]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 800a908:	f000 f878 	bl	800a9fc <wm8994_write_reg>
 800a90c:	4404      	add	r4, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 800a90e:	2302      	movs	r3, #2
 800a910:	4632      	mov	r2, r6
 800a912:	f240 6102 	movw	r1, #1538	; 0x602
 800a916:	4628      	mov	r0, r5
 800a918:	f000 f870 	bl	800a9fc <wm8994_write_reg>
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 800a91c:	2302      	movs	r3, #2
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 800a91e:	4404      	add	r4, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 800a920:	4632      	mov	r2, r6
 800a922:	f240 6104 	movw	r1, #1540	; 0x604
 800a926:	4628      	mov	r0, r5
 800a928:	e470      	b.n	800a20c <WM8994_Init+0xfc>
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 800a92a:	2302      	movs	r3, #2
      tmp = 0x0013;
 800a92c:	f04f 0c13 	mov.w	ip, #19
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 800a930:	4632      	mov	r2, r6
 800a932:	2101      	movs	r1, #1
      tmp = 0x0002;
 800a934:	461f      	mov	r7, r3
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 800a936:	4628      	mov	r0, r5
      tmp = 0x0013;
 800a938:	f8ad c004 	strh.w	ip, [sp, #4]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 800a93c:	f000 f85e 	bl	800a9fc <wm8994_write_reg>
 800a940:	4404      	add	r4, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OVERSAMPLING, &tmp, 2);
 800a942:	463b      	mov	r3, r7
 800a944:	4632      	mov	r2, r6
 800a946:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 800a94a:	4628      	mov	r0, r5
      tmp = 0x0002;
 800a94c:	f8ad 7004 	strh.w	r7, [sp, #4]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OVERSAMPLING, &tmp, 2);
 800a950:	f000 f854 	bl	800a9fc <wm8994_write_reg>
      tmp = 0x1800;
 800a954:	f44f 5cc0 	mov.w	ip, #6144	; 0x1800
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OVERSAMPLING, &tmp, 2);
 800a958:	4404      	add	r4, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_FILTERS, &tmp, 2);
 800a95a:	463b      	mov	r3, r7
 800a95c:	4632      	mov	r2, r6
 800a95e:	f44f 6182 	mov.w	r1, #1040	; 0x410
 800a962:	4628      	mov	r0, r5
      tmp = 0x1800;
 800a964:	f8ad c004 	strh.w	ip, [sp, #4]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_FILTERS, &tmp, 2);
 800a968:	f000 f848 	bl	800a9fc <wm8994_write_reg>
 800a96c:	4404      	add	r4, r0
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_FILTERS, &tmp, 2);
 800a96e:	463b      	mov	r3, r7
 800a970:	4632      	mov	r2, r6
 800a972:	f240 4111 	movw	r1, #1041	; 0x411
 800a976:	4628      	mov	r0, r5
 800a978:	f000 f840 	bl	800a9fc <wm8994_write_reg>
 800a97c:	4404      	add	r4, r0
 800a97e:	e604      	b.n	800a58a <WM8994_Init+0x47a>
        tmp = 0x8100;
 800a980:	f44f 4c01 	mov.w	ip, #33024	; 0x8100
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 800a984:	464b      	mov	r3, r9
 800a986:	4632      	mov	r2, r6
 800a988:	f44f 7188 	mov.w	r1, #272	; 0x110
 800a98c:	4628      	mov	r0, r5
        tmp = 0x8100;
 800a98e:	f8ad c004 	strh.w	ip, [sp, #4]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 800a992:	f000 f833 	bl	800a9fc <wm8994_write_reg>
  tickstart = pObj->IO.GetTick();
 800a996:	697b      	ldr	r3, [r7, #20]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 800a998:	4404      	add	r4, r0
        ColdStartup=0;
 800a99a:	f88b a000 	strb.w	sl, [fp]
  tickstart = pObj->IO.GetTick();
 800a99e:	4798      	blx	r3
 800a9a0:	4681      	mov	r9, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	4798      	blx	r3
 800a9a6:	eba0 0009 	sub.w	r0, r0, r9
 800a9aa:	f5b0 7fa2 	cmp.w	r0, #324	; 0x144
 800a9ae:	d9f8      	bls.n	800a9a2 <WM8994_Init+0x892>
 800a9b0:	e78e      	b.n	800a8d0 <WM8994_Init+0x7c0>
 800a9b2:	bf00      	nop
 800a9b4:	2400736c 	.word	0x2400736c

0800a9b8 <WM8994_RegisterBusIO>:
  if (pObj == NULL)
 800a9b8:	b1c0      	cbz	r0, 800a9ec <WM8994_RegisterBusIO+0x34>
    pObj->IO.WriteReg  = pIO->WriteReg;
 800a9ba:	68ca      	ldr	r2, [r1, #12]
{
 800a9bc:	b470      	push	{r4, r5, r6}
    pObj->IO.DeInit    = pIO->DeInit;
 800a9be:	e9d1 3400 	ldrd	r3, r4, [r1]
    pObj->IO.Address   = pIO->Address;
 800a9c2:	890e      	ldrh	r6, [r1, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 800a9c4:	e9c0 3400 	strd	r3, r4, [r0]
    pObj->IO.GetTick   = pIO->GetTick;
 800a9c8:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
    pObj->Ctx.ReadReg  = WM8994_ReadRegWrap;
 800a9cc:	4909      	ldr	r1, [pc, #36]	; (800a9f4 <WM8994_RegisterBusIO+0x3c>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 800a9ce:	60c2      	str	r2, [r0, #12]
    pObj->Ctx.WriteReg = WM8994_WriteRegWrap;
 800a9d0:	4a09      	ldr	r2, [pc, #36]	; (800a9f8 <WM8994_RegisterBusIO+0x40>)
    pObj->IO.Address   = pIO->Address;
 800a9d2:	8106      	strh	r6, [r0, #8]
    pObj->Ctx.WriteReg = WM8994_WriteRegWrap;
 800a9d4:	6182      	str	r2, [r0, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 800a9d6:	e9c0 5404 	strd	r5, r4, [r0, #16]
    pObj->Ctx.ReadReg  = WM8994_ReadRegWrap;
 800a9da:	e9c0 1007 	strd	r1, r0, [r0, #28]
    if(pObj->IO.Init != NULL)
 800a9de:	b10b      	cbz	r3, 800a9e4 <WM8994_RegisterBusIO+0x2c>
}
 800a9e0:	bc70      	pop	{r4, r5, r6}
      ret = pObj->IO.Init();
 800a9e2:	4718      	bx	r3
}
 800a9e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9e8:	bc70      	pop	{r4, r5, r6}
 800a9ea:	4770      	bx	lr
 800a9ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a9f0:	4770      	bx	lr
 800a9f2:	bf00      	nop
 800a9f4:	080097b5 	.word	0x080097b5
 800a9f8:	080097c5 	.word	0x080097c5

0800a9fc <wm8994_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t wm8994_write_reg(wm8994_ctx_t *ctx, uint16_t reg, uint16_t *data, uint16_t length)
{
 800a9fc:	b530      	push	{r4, r5, lr}
  uint16_t tmp;
  tmp = ((uint16_t)(*data >> 8) & 0x00FF);
  tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 800a9fe:	8814      	ldrh	r4, [r2, #0]
{
 800aa00:	b083      	sub	sp, #12
  
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)&tmp, length);
 800aa02:	6805      	ldr	r5, [r0, #0]
  tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 800aa04:	aa02      	add	r2, sp, #8
 800aa06:	ba64      	rev16	r4, r4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)&tmp, length);
 800aa08:	6880      	ldr	r0, [r0, #8]
  tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 800aa0a:	f822 4d02 	strh.w	r4, [r2, #-2]!
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)&tmp, length);
 800aa0e:	47a8      	blx	r5
}
 800aa10:	b003      	add	sp, #12
 800aa12:	bd30      	pop	{r4, r5, pc}

0800aa14 <wm8994_sw_reset_w>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_sw_reset_w(wm8994_ctx_t *ctx, uint16_t value)
{
 800aa14:	b530      	push	{r4, r5, lr}
 800aa16:	b083      	sub	sp, #12
  tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 800aa18:	ba4d      	rev16	r5, r1
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)&tmp, length);
 800aa1a:	6804      	ldr	r4, [r0, #0]
 800aa1c:	2302      	movs	r3, #2
  tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 800aa1e:	aa02      	add	r2, sp, #8
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)&tmp, length);
 800aa20:	2100      	movs	r1, #0
 800aa22:	6880      	ldr	r0, [r0, #8]
  tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 800aa24:	f822 5d02 	strh.w	r5, [r2, #-2]!
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)&tmp, length);
 800aa28:	47a0      	blx	r4
  return wm8994_write_reg(ctx, WM8994_SW_RESET, &value, 2);
}
 800aa2a:	b003      	add	sp, #12
 800aa2c:	bd30      	pop	{r4, r5, pc}
 800aa2e:	bf00      	nop

0800aa30 <wm8994_sw_reset_r>:
* Input          : Pointer to uint8_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_sw_reset_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 800aa30:	b538      	push	{r3, r4, r5, lr}
 800aa32:	460c      	mov	r4, r1
  ret = ctx->ReadReg(ctx->handle, reg, (uint8_t *)data, length);
 800aa34:	6845      	ldr	r5, [r0, #4]
 800aa36:	2302      	movs	r3, #2
 800aa38:	2100      	movs	r1, #0
 800aa3a:	4622      	mov	r2, r4
 800aa3c:	6880      	ldr	r0, [r0, #8]
 800aa3e:	47a8      	blx	r5
  if(ret >= 0)
 800aa40:	2800      	cmp	r0, #0
 800aa42:	db02      	blt.n	800aa4a <wm8994_sw_reset_r+0x1a>
    *data = tmp;
 800aa44:	8823      	ldrh	r3, [r4, #0]
 800aa46:	ba5b      	rev16	r3, r3
 800aa48:	8023      	strh	r3, [r4, #0]
  return wm8994_read_reg(ctx, WM8994_SW_RESET, value, 2);
}
 800aa4a:	bd38      	pop	{r3, r4, r5, pc}

0800aa4c <wm8994_lo_hpout1l_vol_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_lo_hpout1l_vol_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 800aa4c:	b538      	push	{r3, r4, r5, lr}
 800aa4e:	460c      	mov	r4, r1
  ret = ctx->ReadReg(ctx->handle, reg, (uint8_t *)data, length);
 800aa50:	6845      	ldr	r5, [r0, #4]
 800aa52:	2302      	movs	r3, #2
 800aa54:	211c      	movs	r1, #28
 800aa56:	4622      	mov	r2, r4
 800aa58:	6880      	ldr	r0, [r0, #8]
 800aa5a:	47a8      	blx	r5
  if(ret >= 0)
 800aa5c:	2800      	cmp	r0, #0
 800aa5e:	da00      	bge.n	800aa62 <wm8994_lo_hpout1l_vol_r+0x16>
  *value &= WM8994_LO_HPOUT1L_VOL_MASK;
  *value = *value >> WM8994_LO_HPOUT1L_VOL_POSITION;
  }
  
  return ret;
}
 800aa60:	bd38      	pop	{r3, r4, r5, pc}
 800aa62:	8822      	ldrh	r2, [r4, #0]
 800aa64:	ba52      	rev16	r2, r2
 800aa66:	b293      	uxth	r3, r2
  if(ret == 0)
 800aa68:	d103      	bne.n	800aa72 <wm8994_lo_hpout1l_vol_r+0x26>
  *value &= WM8994_LO_HPOUT1L_VOL_MASK;
 800aa6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa6e:	8023      	strh	r3, [r4, #0]
}
 800aa70:	bd38      	pop	{r3, r4, r5, pc}
    *data = tmp;
 800aa72:	8022      	strh	r2, [r4, #0]
}
 800aa74:	bd38      	pop	{r3, r4, r5, pc}
 800aa76:	bf00      	nop

0800aa78 <wm8994_aif1_sr_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_sr_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 800aa78:	b538      	push	{r3, r4, r5, lr}
 800aa7a:	460c      	mov	r4, r1
  ret = ctx->ReadReg(ctx->handle, reg, (uint8_t *)data, length);
 800aa7c:	6845      	ldr	r5, [r0, #4]
 800aa7e:	2302      	movs	r3, #2
 800aa80:	f44f 7104 	mov.w	r1, #528	; 0x210
 800aa84:	4622      	mov	r2, r4
 800aa86:	6880      	ldr	r0, [r0, #8]
 800aa88:	47a8      	blx	r5
  if(ret >= 0)
 800aa8a:	2800      	cmp	r0, #0
 800aa8c:	da00      	bge.n	800aa90 <wm8994_aif1_sr_r+0x18>
  *value &= WM8994_AIF1_SR_MASK;
  *value = *value >> WM8994_AIF1_SR_POSITION;
  }
  
  return ret;
}
 800aa8e:	bd38      	pop	{r3, r4, r5, pc}
 800aa90:	8822      	ldrh	r2, [r4, #0]
 800aa92:	ba52      	rev16	r2, r2
 800aa94:	b293      	uxth	r3, r2
  if(ret == 0)
 800aa96:	d103      	bne.n	800aaa0 <wm8994_aif1_sr_r+0x28>
  *value = *value >> WM8994_AIF1_SR_POSITION;
 800aa98:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800aa9c:	8023      	strh	r3, [r4, #0]
}
 800aa9e:	bd38      	pop	{r3, r4, r5, pc}
    *data = tmp;
 800aaa0:	8022      	strh	r2, [r4, #0]
}
 800aaa2:	bd38      	pop	{r3, r4, r5, pc}

0800aaa4 <wm8994_aif1_control1_fmt>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_fmt(wm8994_ctx_t *ctx, uint16_t value)
{
 800aaa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aaa6:	b083      	sub	sp, #12
 800aaa8:	4605      	mov	r5, r0
  int32_t ret;
  uint16_t tmp = 0;
 800aaaa:	2000      	movs	r0, #0
{
 800aaac:	460e      	mov	r6, r1
  uint16_t tmp = 0;
 800aaae:	aa02      	add	r2, sp, #8
  ret = ctx->ReadReg(ctx->handle, reg, (uint8_t *)data, length);
 800aab0:	686c      	ldr	r4, [r5, #4]
 800aab2:	2302      	movs	r3, #2
 800aab4:	f44f 7140 	mov.w	r1, #768	; 0x300
  uint16_t tmp = 0;
 800aab8:	f822 0d04 	strh.w	r0, [r2, #-4]!
  ret = ctx->ReadReg(ctx->handle, reg, (uint8_t *)data, length);
 800aabc:	68a8      	ldr	r0, [r5, #8]
 800aabe:	47a0      	blx	r4
  if(ret >= 0)
 800aac0:	2800      	cmp	r0, #0
 800aac2:	da01      	bge.n	800aac8 <wm8994_aif1_control1_fmt+0x24>
    
    ret = wm8994_write_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
  }
  
  return ret;
}
 800aac4:	b003      	add	sp, #12
 800aac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aac8:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 800aacc:	ba64      	rev16	r4, r4
 800aace:	b2a4      	uxth	r4, r4
  if(ret == 0)
 800aad0:	d1f8      	bne.n	800aac4 <wm8994_aif1_control1_fmt+0x20>
    tmp &= ~WM8994_AIF1_CONTROL1_FMT_MASK;
 800aad2:	f024 0418 	bic.w	r4, r4, #24
  tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 800aad6:	aa02      	add	r2, sp, #8
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)&tmp, length);
 800aad8:	682f      	ldr	r7, [r5, #0]
 800aada:	2302      	movs	r3, #2
    tmp |= value << WM8994_AIF1_CONTROL1_FMT_POSITION;
 800aadc:	ea44 04c6 	orr.w	r4, r4, r6, lsl #3
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)&tmp, length);
 800aae0:	68a8      	ldr	r0, [r5, #8]
 800aae2:	f44f 7140 	mov.w	r1, #768	; 0x300
    tmp |= value << WM8994_AIF1_CONTROL1_FMT_POSITION;
 800aae6:	b2a4      	uxth	r4, r4
  tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 800aae8:	ba65      	rev16	r5, r4
    tmp |= value << WM8994_AIF1_CONTROL1_FMT_POSITION;
 800aaea:	f8ad 4004 	strh.w	r4, [sp, #4]
  tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 800aaee:	f822 5d02 	strh.w	r5, [r2, #-2]!
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)&tmp, length);
 800aaf2:	47b8      	blx	r7
}
 800aaf4:	b003      	add	sp, #12
 800aaf6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aaf8 <wm8994_aif1_control1_fmt_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_fmt_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 800aaf8:	b538      	push	{r3, r4, r5, lr}
 800aafa:	460c      	mov	r4, r1
  ret = ctx->ReadReg(ctx->handle, reg, (uint8_t *)data, length);
 800aafc:	6845      	ldr	r5, [r0, #4]
 800aafe:	2302      	movs	r3, #2
 800ab00:	f44f 7140 	mov.w	r1, #768	; 0x300
 800ab04:	4622      	mov	r2, r4
 800ab06:	6880      	ldr	r0, [r0, #8]
 800ab08:	47a8      	blx	r5
  if(ret >= 0)
 800ab0a:	2800      	cmp	r0, #0
 800ab0c:	da00      	bge.n	800ab10 <wm8994_aif1_control1_fmt_r+0x18>
  *value &= WM8994_AIF1_CONTROL1_FMT_MASK;
  *value = *value >> WM8994_AIF1_CONTROL1_FMT_POSITION;
  }
  
  return ret;
}
 800ab0e:	bd38      	pop	{r3, r4, r5, pc}
 800ab10:	8822      	ldrh	r2, [r4, #0]
 800ab12:	ba52      	rev16	r2, r2
 800ab14:	b293      	uxth	r3, r2
  if(ret == 0)
 800ab16:	d103      	bne.n	800ab20 <wm8994_aif1_control1_fmt_r+0x28>
  *value = *value >> WM8994_AIF1_CONTROL1_FMT_POSITION;
 800ab18:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800ab1c:	8023      	strh	r3, [r4, #0]
}
 800ab1e:	bd38      	pop	{r3, r4, r5, pc}
    *data = tmp;
 800ab20:	8022      	strh	r2, [r4, #0]
}
 800ab22:	bd38      	pop	{r3, r4, r5, pc}

0800ab24 <wm8994_aif1_control1_wl>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_wl(wm8994_ctx_t *ctx, uint16_t value)
{
 800ab24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab26:	b083      	sub	sp, #12
 800ab28:	4605      	mov	r5, r0
  int32_t ret;
  uint16_t tmp = 0;
 800ab2a:	2000      	movs	r0, #0
{
 800ab2c:	460e      	mov	r6, r1
  uint16_t tmp = 0;
 800ab2e:	aa02      	add	r2, sp, #8
  ret = ctx->ReadReg(ctx->handle, reg, (uint8_t *)data, length);
 800ab30:	686c      	ldr	r4, [r5, #4]
 800ab32:	2302      	movs	r3, #2
 800ab34:	f44f 7140 	mov.w	r1, #768	; 0x300
  uint16_t tmp = 0;
 800ab38:	f822 0d04 	strh.w	r0, [r2, #-4]!
  ret = ctx->ReadReg(ctx->handle, reg, (uint8_t *)data, length);
 800ab3c:	68a8      	ldr	r0, [r5, #8]
 800ab3e:	47a0      	blx	r4
  if(ret >= 0)
 800ab40:	2800      	cmp	r0, #0
 800ab42:	da01      	bge.n	800ab48 <wm8994_aif1_control1_wl+0x24>
    
    ret = wm8994_write_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
  }
  
  return ret;
}
 800ab44:	b003      	add	sp, #12
 800ab46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab48:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 800ab4c:	ba64      	rev16	r4, r4
 800ab4e:	b2a4      	uxth	r4, r4
  if(ret == 0)
 800ab50:	d1f8      	bne.n	800ab44 <wm8994_aif1_control1_wl+0x20>
    tmp &= ~WM8994_AIF1_CONTROL1_WL_MASK;
 800ab52:	f024 0460 	bic.w	r4, r4, #96	; 0x60
  tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 800ab56:	aa02      	add	r2, sp, #8
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)&tmp, length);
 800ab58:	682f      	ldr	r7, [r5, #0]
 800ab5a:	2302      	movs	r3, #2
    tmp |= value << WM8994_AIF1_CONTROL1_WL_POSITION;
 800ab5c:	ea44 1446 	orr.w	r4, r4, r6, lsl #5
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)&tmp, length);
 800ab60:	68a8      	ldr	r0, [r5, #8]
 800ab62:	f44f 7140 	mov.w	r1, #768	; 0x300
    tmp |= value << WM8994_AIF1_CONTROL1_WL_POSITION;
 800ab66:	b2a4      	uxth	r4, r4
  tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 800ab68:	ba65      	rev16	r5, r4
    tmp |= value << WM8994_AIF1_CONTROL1_WL_POSITION;
 800ab6a:	f8ad 4004 	strh.w	r4, [sp, #4]
  tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 800ab6e:	f822 5d02 	strh.w	r5, [r2, #-2]!
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)&tmp, length);
 800ab72:	47b8      	blx	r7
}
 800ab74:	b003      	add	sp, #12
 800ab76:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ab78 <wm8994_aif1_control1_wl_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_wl_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 800ab78:	b538      	push	{r3, r4, r5, lr}
 800ab7a:	460c      	mov	r4, r1
  ret = ctx->ReadReg(ctx->handle, reg, (uint8_t *)data, length);
 800ab7c:	6845      	ldr	r5, [r0, #4]
 800ab7e:	2302      	movs	r3, #2
 800ab80:	f44f 7140 	mov.w	r1, #768	; 0x300
 800ab84:	4622      	mov	r2, r4
 800ab86:	6880      	ldr	r0, [r0, #8]
 800ab88:	47a8      	blx	r5
  if(ret >= 0)
 800ab8a:	2800      	cmp	r0, #0
 800ab8c:	da00      	bge.n	800ab90 <wm8994_aif1_control1_wl_r+0x18>
  *value &= WM8994_AIF1_CONTROL1_WL_MASK;
  *value = *value >> WM8994_AIF1_CONTROL1_WL_POSITION;
  }
  
  return ret;
}
 800ab8e:	bd38      	pop	{r3, r4, r5, pc}
 800ab90:	8822      	ldrh	r2, [r4, #0]
 800ab92:	ba52      	rev16	r2, r2
 800ab94:	b293      	uxth	r3, r2
  if(ret == 0)
 800ab96:	d103      	bne.n	800aba0 <wm8994_aif1_control1_wl_r+0x28>
  *value = *value >> WM8994_AIF1_CONTROL1_WL_POSITION;
 800ab98:	f3c3 1341 	ubfx	r3, r3, #5, #2
 800ab9c:	8023      	strh	r3, [r4, #0]
}
 800ab9e:	bd38      	pop	{r3, r4, r5, pc}
    *data = tmp;
 800aba0:	8022      	strh	r2, [r4, #0]
}
 800aba2:	bd38      	pop	{r3, r4, r5, pc}

0800aba4 <wm8994_aif1_control1_adcr_src>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_adcr_src(wm8994_ctx_t *ctx, uint16_t value)
{
 800aba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aba6:	b083      	sub	sp, #12
 800aba8:	4605      	mov	r5, r0
  int32_t ret;
  uint16_t tmp = 0;
 800abaa:	2000      	movs	r0, #0
{
 800abac:	460e      	mov	r6, r1
  uint16_t tmp = 0;
 800abae:	aa02      	add	r2, sp, #8
  ret = ctx->ReadReg(ctx->handle, reg, (uint8_t *)data, length);
 800abb0:	686c      	ldr	r4, [r5, #4]
 800abb2:	2302      	movs	r3, #2
 800abb4:	f44f 7140 	mov.w	r1, #768	; 0x300
  uint16_t tmp = 0;
 800abb8:	f822 0d04 	strh.w	r0, [r2, #-4]!
  ret = ctx->ReadReg(ctx->handle, reg, (uint8_t *)data, length);
 800abbc:	68a8      	ldr	r0, [r5, #8]
 800abbe:	47a0      	blx	r4
  if(ret >= 0)
 800abc0:	2800      	cmp	r0, #0
 800abc2:	da01      	bge.n	800abc8 <wm8994_aif1_control1_adcr_src+0x24>
    
    ret = wm8994_write_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
  }
  
  return ret;
}
 800abc4:	b003      	add	sp, #12
 800abc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abc8:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 800abcc:	ba64      	rev16	r4, r4
 800abce:	b2a4      	uxth	r4, r4
  if(ret == 0)
 800abd0:	d1f8      	bne.n	800abc4 <wm8994_aif1_control1_adcr_src+0x20>
    tmp &= ~WM8994_AIF1_CONTROL1_ADCR_SRC_MASK;
 800abd2:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
  tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 800abd6:	aa02      	add	r2, sp, #8
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)&tmp, length);
 800abd8:	682f      	ldr	r7, [r5, #0]
 800abda:	2302      	movs	r3, #2
    tmp |= value << WM8994_AIF1_CONTROL1_ADCR_SRC_POSITION;
 800abdc:	ea44 3486 	orr.w	r4, r4, r6, lsl #14
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)&tmp, length);
 800abe0:	68a8      	ldr	r0, [r5, #8]
 800abe2:	f44f 7140 	mov.w	r1, #768	; 0x300
    tmp |= value << WM8994_AIF1_CONTROL1_ADCR_SRC_POSITION;
 800abe6:	b2a4      	uxth	r4, r4
  tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 800abe8:	ba65      	rev16	r5, r4
    tmp |= value << WM8994_AIF1_CONTROL1_ADCR_SRC_POSITION;
 800abea:	f8ad 4004 	strh.w	r4, [sp, #4]
  tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 800abee:	f822 5d02 	strh.w	r5, [r2, #-2]!
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)&tmp, length);
 800abf2:	47b8      	blx	r7
}
 800abf4:	b003      	add	sp, #12
 800abf6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800abf8 <wm8994_aif1_adc1_left_vol_adc1l_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_adc1_left_vol_adc1l_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 800abf8:	b538      	push	{r3, r4, r5, lr}
 800abfa:	460c      	mov	r4, r1
  ret = ctx->ReadReg(ctx->handle, reg, (uint8_t *)data, length);
 800abfc:	6845      	ldr	r5, [r0, #4]
 800abfe:	2302      	movs	r3, #2
 800ac00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ac04:	4622      	mov	r2, r4
 800ac06:	6880      	ldr	r0, [r0, #8]
 800ac08:	47a8      	blx	r5
  if(ret >= 0)
 800ac0a:	2800      	cmp	r0, #0
 800ac0c:	da00      	bge.n	800ac10 <wm8994_aif1_adc1_left_vol_adc1l_r+0x18>
  *value &= WM8994_AIF1_ADC1_LEFT_VOL_ADC1L_MASK;
  *value = *value >> WM8994_AIF1_ADC1_LEFT_VOL_ADC1L_POSITION;
  }
  
  return ret;
}
 800ac0e:	bd38      	pop	{r3, r4, r5, pc}
 800ac10:	8822      	ldrh	r2, [r4, #0]
 800ac12:	ba52      	rev16	r2, r2
 800ac14:	b293      	uxth	r3, r2
  if(ret == 0)
 800ac16:	d102      	bne.n	800ac1e <wm8994_aif1_adc1_left_vol_adc1l_r+0x26>
  *value &= WM8994_AIF1_ADC1_LEFT_VOL_ADC1L_MASK;
 800ac18:	b2db      	uxtb	r3, r3
 800ac1a:	8023      	strh	r3, [r4, #0]
}
 800ac1c:	bd38      	pop	{r3, r4, r5, pc}
    *data = tmp;
 800ac1e:	8022      	strh	r2, [r4, #0]
}
 800ac20:	bd38      	pop	{r3, r4, r5, pc}
 800ac22:	bf00      	nop

0800ac24 <BSP_LED_Init>:
{
  int32_t ret = BSP_ERROR_NONE;
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE();
 800ac24:	4b13      	ldr	r3, [pc, #76]	; (800ac74 <BSP_LED_Init+0x50>)
  GPIO_InitStruct.Pin = LED_PIN[Led];
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800ac26:	4914      	ldr	r1, [pc, #80]	; (800ac78 <BSP_LED_Init+0x54>)
  LEDx_GPIO_CLK_ENABLE();
 800ac28:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800ac2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
{
 800ac30:	b5f0      	push	{r4, r5, r6, r7, lr}
  LEDx_GPIO_CLK_ENABLE();
 800ac32:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
{
 800ac36:	b087      	sub	sp, #28
  LEDx_GPIO_CLK_ENABLE();
 800ac38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ac3c:	2401      	movs	r4, #1
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800ac3e:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac42:	2703      	movs	r7, #3
  GPIO_InitStruct.Pin = LED_PIN[Led];
 800ac44:	490d      	ldr	r1, [pc, #52]	; (800ac7c <BSP_LED_Init+0x58>)
  LEDx_GPIO_CLK_ENABLE();
 800ac46:	f403 7380 	and.w	r3, r3, #256	; 0x100
  GPIO_InitStruct.Pin = LED_PIN[Led];
 800ac4a:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800ac4e:	4628      	mov	r0, r5
  LEDx_GPIO_CLK_ENABLE();
 800ac50:	9300      	str	r3, [sp, #0]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800ac52:	a901      	add	r1, sp, #4
  LEDx_GPIO_CLK_ENABLE();
 800ac54:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = LED_PIN[Led];
 800ac56:	e9cd 6401 	strd	r6, r4, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac5a:	e9cd 4703 	strd	r4, r7, [sp, #12]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800ac5e:	f005 fbf3 	bl	8010448 <HAL_GPIO_Init>

  /* By default, turn off LED */
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 800ac62:	4628      	mov	r0, r5
 800ac64:	4622      	mov	r2, r4
 800ac66:	b2b1      	uxth	r1, r6
 800ac68:	f005 fde8 	bl	801083c <HAL_GPIO_WritePin>
 return ret;
}
 800ac6c:	2000      	movs	r0, #0
 800ac6e:	b007      	add	sp, #28
 800ac70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac72:	bf00      	nop
 800ac74:	58024400 	.word	0x58024400
 800ac78:	080bfba0 	.word	0x080bfba0
 800ac7c:	080bfb90 	.word	0x080bfb90

0800ac80 <BSP_LED_On>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t  BSP_LED_On(Led_TypeDef Led)
{
 800ac80:	b508      	push	{r3, lr}
  int32_t ret = BSP_ERROR_NONE;

  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 800ac82:	4905      	ldr	r1, [pc, #20]	; (800ac98 <BSP_LED_On+0x18>)
 800ac84:	2200      	movs	r2, #0
 800ac86:	4b05      	ldr	r3, [pc, #20]	; (800ac9c <BSP_LED_On+0x1c>)
 800ac88:	f831 1020 	ldrh.w	r1, [r1, r0, lsl #2]
 800ac8c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800ac90:	f005 fdd4 	bl	801083c <HAL_GPIO_WritePin>
  return ret;
}
 800ac94:	2000      	movs	r0, #0
 800ac96:	bd08      	pop	{r3, pc}
 800ac98:	080bfb90 	.word	0x080bfb90
 800ac9c:	080bfba0 	.word	0x080bfba0

0800aca0 <BSP_LED_Off>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t  BSP_LED_Off(Led_TypeDef Led)
{
 800aca0:	b508      	push	{r3, lr}
  int32_t ret = BSP_ERROR_NONE;
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 800aca2:	4905      	ldr	r1, [pc, #20]	; (800acb8 <BSP_LED_Off+0x18>)
 800aca4:	2201      	movs	r2, #1
 800aca6:	4b05      	ldr	r3, [pc, #20]	; (800acbc <BSP_LED_Off+0x1c>)
 800aca8:	f831 1020 	ldrh.w	r1, [r1, r0, lsl #2]
 800acac:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800acb0:	f005 fdc4 	bl	801083c <HAL_GPIO_WritePin>
  return ret;
}
 800acb4:	2000      	movs	r0, #0
 800acb6:	bd08      	pop	{r3, pc}
 800acb8:	080bfb90 	.word	0x080bfb90
 800acbc:	080bfba0 	.word	0x080bfba0

0800acc0 <BSP_LED_Toggle>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t  BSP_LED_Toggle(Led_TypeDef Led)
{
 800acc0:	b508      	push	{r3, lr}
  int32_t ret = BSP_ERROR_NONE;
  HAL_GPIO_TogglePin(LED_PORT[Led], (uint16_t)LED_PIN[Led]);
 800acc2:	4a05      	ldr	r2, [pc, #20]	; (800acd8 <BSP_LED_Toggle+0x18>)
 800acc4:	4b05      	ldr	r3, [pc, #20]	; (800acdc <BSP_LED_Toggle+0x1c>)
 800acc6:	f832 1020 	ldrh.w	r1, [r2, r0, lsl #2]
 800acca:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800acce:	f005 fdb9 	bl	8010844 <HAL_GPIO_TogglePin>
  return ret;
}
 800acd2:	2000      	movs	r0, #0
 800acd4:	bd08      	pop	{r3, pc}
 800acd6:	bf00      	nop
 800acd8:	080bfb90 	.word	0x080bfb90
 800acdc:	080bfba0 	.word	0x080bfba0

0800ace0 <BSP_PB_Init>:
  GPIO_InitTypeDef gpio_init_structure;
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_WAKEUP_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_WAKEUP_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={BUTTON_WAKEUP_EXTI_LINE};
  /* Enable the BUTTON clock*/
  BUTTON_WAKEUP_GPIO_CLK_ENABLE();
 800ace0:	4b1e      	ldr	r3, [pc, #120]	; (800ad5c <BSP_PB_Init+0x7c>)
 800ace2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800ace6:	f042 0204 	orr.w	r2, r2, #4
{
 800acea:	b570      	push	{r4, r5, r6, lr}
  BUTTON_WAKEUP_GPIO_CLK_ENABLE();
 800acec:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
{
 800acf0:	b086      	sub	sp, #24
  BUTTON_WAKEUP_GPIO_CLK_ENABLE();
 800acf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800acf6:	f44f 5500 	mov.w	r5, #8192	; 0x2000
{
 800acfa:	4606      	mov	r6, r0
  gpio_init_structure.Pull = GPIO_NOPULL;
 800acfc:	2400      	movs	r4, #0
  BUTTON_WAKEUP_GPIO_CLK_ENABLE();
 800acfe:	f003 0304 	and.w	r3, r3, #4
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800ad02:	2002      	movs	r0, #2
  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800ad04:	9501      	str	r5, [sp, #4]
  BUTTON_WAKEUP_GPIO_CLK_ENABLE();
 800ad06:	9300      	str	r3, [sp, #0]
 800ad08:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800ad0a:	e9cd 4003 	strd	r4, r0, [sp, #12]

  if(ButtonMode == BUTTON_MODE_GPIO)
 800ad0e:	b1e1      	cbz	r1, 800ad4a <BSP_PB_Init+0x6a>
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800ad10:	4d13      	ldr	r5, [pc, #76]	; (800ad60 <BSP_PB_Init+0x80>)
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800ad12:	a901      	add	r1, sp, #4
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800ad14:	4b13      	ldr	r3, [pc, #76]	; (800ad64 <BSP_PB_Init+0x84>)
    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800ad16:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800ad1a:	4813      	ldr	r0, [pc, #76]	; (800ad68 <BSP_PB_Init+0x88>)
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800ad1c:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800ad1e:	f005 fb93 	bl	8010448 <HAL_GPIO_Init>
    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800ad22:	4912      	ldr	r1, [pc, #72]	; (800ad6c <BSP_PB_Init+0x8c>)
 800ad24:	4628      	mov	r0, r5
 800ad26:	f005 fb89 	bl	801043c <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 800ad2a:	4621      	mov	r1, r4
 800ad2c:	4628      	mov	r0, r5
 800ad2e:	4a10      	ldr	r2, [pc, #64]	; (800ad70 <BSP_PB_Init+0x90>)
 800ad30:	f005 fb7c 	bl	801042c <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800ad34:	4622      	mov	r2, r4
 800ad36:	210f      	movs	r1, #15
 800ad38:	2028      	movs	r0, #40	; 0x28
 800ad3a:	f002 fe4b 	bl	800d9d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800ad3e:	2028      	movs	r0, #40	; 0x28
 800ad40:	f002 fe7e 	bl	800da40 <HAL_NVIC_EnableIRQ>
  }
  return BSP_ERROR_NONE;
}
 800ad44:	2000      	movs	r0, #0
 800ad46:	b006      	add	sp, #24
 800ad48:	bd70      	pop	{r4, r5, r6, pc}
 800ad4a:	460a      	mov	r2, r1
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800ad4c:	4806      	ldr	r0, [pc, #24]	; (800ad68 <BSP_PB_Init+0x88>)
 800ad4e:	a901      	add	r1, sp, #4
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800ad50:	9202      	str	r2, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800ad52:	f005 fb79 	bl	8010448 <HAL_GPIO_Init>
}
 800ad56:	2000      	movs	r0, #0
 800ad58:	b006      	add	sp, #24
 800ad5a:	bd70      	pop	{r4, r5, r6, pc}
 800ad5c:	58024400 	.word	0x58024400
 800ad60:	2400a084 	.word	0x2400a084
 800ad64:	11110000 	.word	0x11110000
 800ad68:	58020800 	.word	0x58020800
 800ad6c:	1670000d 	.word	0x1670000d
 800ad70:	0800ad8d 	.word	0x0800ad8d

0800ad74 <BSP_PB_GetState>:
  *          This parameter can be one of the following values:
  *            @arg  BUTTON_WAKEUP: Wakeup Push Button
  * @retval The Button GPIO pin value
  */
int32_t  BSP_PB_GetState(Button_TypeDef Button)
{
 800ad74:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 800ad76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ad7a:	4802      	ldr	r0, [pc, #8]	; (800ad84 <BSP_PB_GetState+0x10>)
 800ad7c:	f005 fd58 	bl	8010830 <HAL_GPIO_ReadPin>
}
 800ad80:	bd08      	pop	{r3, pc}
 800ad82:	bf00      	nop
 800ad84:	58020800 	.word	0x58020800

0800ad88 <BSP_PB_Callback>:
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);
  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 800ad88:	4770      	bx	lr
 800ad8a:	bf00      	nop

0800ad8c <BUTTON_WAKEUP_EXTI_Callback>:
{
 800ad8c:	b508      	push	{r3, lr}
  BSP_PB_Callback(BUTTON_WAKEUP);
 800ad8e:	2000      	movs	r0, #0
 800ad90:	f7ff fffa 	bl	800ad88 <BSP_PB_Callback>
}
 800ad94:	bd08      	pop	{r3, pc}
 800ad96:	bf00      	nop

0800ad98 <BSP_JOY_Init>:
                                                   BSP_JOY1_RIGHT_IT_PRIORITY,
                                                   BSP_JOY1_UP_IT_PRIORITY
                                                  };

  /* Store Joystick pins initialized */
  JoyPinsMask |= (uint32_t)JoyPins;
 800ad98:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 800ae98 <BSP_JOY_Init+0x100>
{
 800ad9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  JoyPinsMask |= (uint32_t)JoyPins;
 800ada0:	f8dc 3000 	ldr.w	r3, [ip]
 800ada4:	fab0 f680 	clz	r6, r0
{
 800ada8:	b08b      	sub	sp, #44	; 0x2c
 800adaa:	4615      	mov	r5, r2
  JoyPinsMask |= (uint32_t)JoyPins;
 800adac:	4313      	orrs	r3, r2
{
 800adae:	460f      	mov	r7, r1

  /* Initialized the Joystick. */
  for(joykey = 0U; joykey < JOY_KEY_NUMBER ; joykey++)
 800adb0:	2400      	movs	r4, #0
 800adb2:	0976      	lsrs	r6, r6, #5
          {
            JOY1_UP_GPIO_CLK_ENABLE();
          }
        }

        gpio_init_structure.Pin = JOY1_PIN[joykey];
 800adb4:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 800ae9c <BSP_JOY_Init+0x104>
 800adb8:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800aea0 <BSP_JOY_Init+0x108>
          HAL_GPIO_Init(JOY1_PORT[joykey], &gpio_init_structure);
        }
        else /*(JoyMode == JOY_MODE_EXTI)*/
        {
          /* Configure Joy pin as input with External interrupt */
          gpio_init_structure.Mode = GPIO_MODE_IT_RISING_FALLING;
 800adbc:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 800aea4 <BSP_JOY_Init+0x10c>
  JoyPinsMask |= (uint32_t)JoyPins;
 800adc0:	f8cc 3000 	str.w	r3, [ip]
    key_pressed = 1UL << joykey;
 800adc4:	2301      	movs	r3, #1
 800adc6:	40a3      	lsls	r3, r4
      if(JOY == JOY1)
 800adc8:	43ab      	bics	r3, r5
 800adca:	d100      	bne.n	800adce <BSP_JOY_Init+0x36>
 800adcc:	b936      	cbnz	r6, 800addc <BSP_JOY_Init+0x44>
  for(joykey = 0U; joykey < JOY_KEY_NUMBER ; joykey++)
 800adce:	3401      	adds	r4, #1
 800add0:	2c05      	cmp	r4, #5
 800add2:	d1f7      	bne.n	800adc4 <BSP_JOY_Init+0x2c>
      }
    }
  }

  return ret;
}
 800add4:	2000      	movs	r0, #0
 800add6:	b00b      	add	sp, #44	; 0x2c
 800add8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          JOY1_SEL_GPIO_CLK_ENABLE();
 800addc:	4b28      	ldr	r3, [pc, #160]	; (800ae80 <BSP_JOY_Init+0xe8>)
 800adde:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800ade2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ade6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800adea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800adee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        if(key_pressed == (uint32_t)JOY_SEL)
 800adf2:	2c00      	cmp	r4, #0
 800adf4:	d038      	beq.n	800ae68 <BSP_JOY_Init+0xd0>
        else if(key_pressed == (uint32_t)JOY_DOWN)
 800adf6:	2c01      	cmp	r4, #1
 800adf8:	d039      	beq.n	800ae6e <BSP_JOY_Init+0xd6>
        else if(key_pressed == (uint32_t) JOY_LEFT)
 800adfa:	2c02      	cmp	r4, #2
 800adfc:	d03d      	beq.n	800ae7a <BSP_JOY_Init+0xe2>
        else if(key_pressed == (uint32_t) JOY_RIGHT)
 800adfe:	2c03      	cmp	r4, #3
 800ae00:	d038      	beq.n	800ae74 <BSP_JOY_Init+0xdc>
            JOY1_UP_GPIO_CLK_ENABLE();
 800ae02:	9304      	str	r3, [sp, #16]
 800ae04:	9b04      	ldr	r3, [sp, #16]
        gpio_init_structure.Pin = JOY1_PIN[joykey];
 800ae06:	f838 1014 	ldrh.w	r1, [r8, r4, lsl #1]
        gpio_init_structure.Pull = GPIO_PULLUP;
 800ae0a:	2201      	movs	r2, #1
        gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ae0c:	2303      	movs	r3, #3
 800ae0e:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
        gpio_init_structure.Pin = JOY1_PIN[joykey];
 800ae12:	9105      	str	r1, [sp, #20]
          HAL_GPIO_Init(JOY1_PORT[joykey], &gpio_init_structure);
 800ae14:	a905      	add	r1, sp, #20
        gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ae16:	e9cd 2307 	strd	r2, r3, [sp, #28]
        if (JoyMode == JOY_MODE_GPIO)
 800ae1a:	b91f      	cbnz	r7, 800ae24 <BSP_JOY_Init+0x8c>
          gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800ae1c:	9706      	str	r7, [sp, #24]
          HAL_GPIO_Init(JOY1_PORT[joykey], &gpio_init_structure);
 800ae1e:	f005 fb13 	bl	8010448 <HAL_GPIO_Init>
 800ae22:	e7d4      	b.n	800adce <BSP_JOY_Init+0x36>
          gpio_init_structure.Mode = GPIO_MODE_IT_RISING_FALLING;
 800ae24:	f8cd 9018 	str.w	r9, [sp, #24]
          HAL_GPIO_Init(JOY1_PORT[joykey], &gpio_init_structure);
 800ae28:	f005 fb0e 	bl	8010448 <HAL_GPIO_Init>
 800ae2c:	4b15      	ldr	r3, [pc, #84]	; (800ae84 <BSP_JOY_Init+0xec>)
         (void)HAL_EXTI_GetHandle(&hjoy_exti[joykey], JOY_EXTI_LINE[joykey]);
 800ae2e:	4a16      	ldr	r2, [pc, #88]	; (800ae88 <BSP_JOY_Init+0xf0>)
 800ae30:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800ae34:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
 800ae38:	4658      	mov	r0, fp
 800ae3a:	f005 faff 	bl	801043c <HAL_EXTI_GetHandle>
         (void)HAL_EXTI_RegisterCallback(&hjoy_exti[joykey],  HAL_EXTI_COMMON_CB_ID, JoyCallback[joykey]);
 800ae3e:	4b13      	ldr	r3, [pc, #76]	; (800ae8c <BSP_JOY_Init+0xf4>)
 800ae40:	4658      	mov	r0, fp
 800ae42:	2100      	movs	r1, #0
 800ae44:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 800ae48:	f005 faf0 	bl	801042c <HAL_EXTI_RegisterCallback>
          HAL_NVIC_SetPriority((IRQn_Type)(JOY1_IRQn[joykey]), BSP_JOY_PRIO[joykey], 0x00);
 800ae4c:	4910      	ldr	r1, [pc, #64]	; (800ae90 <BSP_JOY_Init+0xf8>)
 800ae4e:	4b11      	ldr	r3, [pc, #68]	; (800ae94 <BSP_JOY_Init+0xfc>)
 800ae50:	2200      	movs	r2, #0
 800ae52:	f931 b014 	ldrsh.w	fp, [r1, r4, lsl #1]
 800ae56:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 800ae5a:	4658      	mov	r0, fp
 800ae5c:	f002 fdba 	bl	800d9d4 <HAL_NVIC_SetPriority>
          HAL_NVIC_EnableIRQ((IRQn_Type)(JOY1_IRQn[joykey]));
 800ae60:	4658      	mov	r0, fp
 800ae62:	f002 fded 	bl	800da40 <HAL_NVIC_EnableIRQ>
 800ae66:	e7b2      	b.n	800adce <BSP_JOY_Init+0x36>
          JOY1_SEL_GPIO_CLK_ENABLE();
 800ae68:	9300      	str	r3, [sp, #0]
 800ae6a:	9b00      	ldr	r3, [sp, #0]
 800ae6c:	e7cb      	b.n	800ae06 <BSP_JOY_Init+0x6e>
          JOY1_DOWN_GPIO_CLK_ENABLE();
 800ae6e:	9301      	str	r3, [sp, #4]
 800ae70:	9b01      	ldr	r3, [sp, #4]
 800ae72:	e7c8      	b.n	800ae06 <BSP_JOY_Init+0x6e>
          JOY1_RIGHT_GPIO_CLK_ENABLE();
 800ae74:	9303      	str	r3, [sp, #12]
 800ae76:	9b03      	ldr	r3, [sp, #12]
 800ae78:	e7c5      	b.n	800ae06 <BSP_JOY_Init+0x6e>
          JOY1_LEFT_GPIO_CLK_ENABLE();
 800ae7a:	9302      	str	r3, [sp, #8]
 800ae7c:	9b02      	ldr	r3, [sp, #8]
 800ae7e:	e7c2      	b.n	800ae06 <BSP_JOY_Init+0x6e>
 800ae80:	58024400 	.word	0x58024400
 800ae84:	240085d0 	.word	0x240085d0
 800ae88:	080bfb68 	.word	0x080bfb68
 800ae8c:	080bfb7c 	.word	0x080bfb7c
 800ae90:	080bfb3c 	.word	0x080bfb3c
 800ae94:	080bfb28 	.word	0x080bfb28
 800ae98:	240085cc 	.word	0x240085cc
 800ae9c:	080bfb48 	.word	0x080bfb48
 800aea0:	080bfb54 	.word	0x080bfb54
 800aea4:	11310000 	.word	0x11310000

0800aea8 <BSP_JOY_GetState>:
*            @arg  JOY_LEFT
*            @arg  JOY_RIGHT
*            @arg  JOY_UP
*/
int32_t BSP_JOY_GetState(JOY_TypeDef JOY,uint32_t JoyPin)
{
 800aea8:	b538      	push	{r3, r4, r5, lr}

  uint32_t joykey, key_pressed;
  for (joykey = 0U; joykey < JOY_KEY_NUMBER ; joykey++)
  {
    key_pressed = 1UL << joykey;
    if((key_pressed & JoyPinsMask) == key_pressed)
 800aeaa:	4c21      	ldr	r4, [pc, #132]	; (800af30 <BSP_JOY_GetState+0x88>)
 800aeac:	fab0 f580 	clz	r5, r0
 800aeb0:	6823      	ldr	r3, [r4, #0]
 800aeb2:	096d      	lsrs	r5, r5, #5
    {
      if(JOY == JOY1)
 800aeb4:	07db      	lsls	r3, r3, #31
 800aeb6:	d500      	bpl.n	800aeba <BSP_JOY_GetState+0x12>
 800aeb8:	b98d      	cbnz	r5, 800aede <BSP_JOY_GetState+0x36>
    if((key_pressed & JoyPinsMask) == key_pressed)
 800aeba:	6823      	ldr	r3, [r4, #0]
      if(JOY == JOY1)
 800aebc:	0798      	lsls	r0, r3, #30
 800aebe:	d500      	bpl.n	800aec2 <BSP_JOY_GetState+0x1a>
 800aec0:	b9ad      	cbnz	r5, 800aeee <BSP_JOY_GetState+0x46>
    if((key_pressed & JoyPinsMask) == key_pressed)
 800aec2:	6823      	ldr	r3, [r4, #0]
      if(JOY == JOY1)
 800aec4:	0759      	lsls	r1, r3, #29
 800aec6:	d500      	bpl.n	800aeca <BSP_JOY_GetState+0x22>
 800aec8:	b9cd      	cbnz	r5, 800aefe <BSP_JOY_GetState+0x56>
    if((key_pressed & JoyPinsMask) == key_pressed)
 800aeca:	6823      	ldr	r3, [r4, #0]
      if(JOY == JOY1)
 800aecc:	071a      	lsls	r2, r3, #28
 800aece:	d500      	bpl.n	800aed2 <BSP_JOY_GetState+0x2a>
 800aed0:	b9ed      	cbnz	r5, 800af0e <BSP_JOY_GetState+0x66>
    if((key_pressed & JoyPinsMask) == key_pressed)
 800aed2:	6823      	ldr	r3, [r4, #0]
      if(JOY == JOY1)
 800aed4:	06db      	lsls	r3, r3, #27
 800aed6:	d500      	bpl.n	800aeda <BSP_JOY_GetState+0x32>
 800aed8:	bb0d      	cbnz	r5, 800af1e <BSP_JOY_GetState+0x76>
        }
      }
    }
  }
  /* No Joystick key pressed */
  return (int32_t)JOY_NONE;
 800aeda:	2000      	movs	r0, #0

}
 800aedc:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_GPIO_ReadPin(JOY1_PORT[joykey], JOY1_PIN[joykey]) != GPIO_PIN_SET)
 800aede:	2104      	movs	r1, #4
 800aee0:	4814      	ldr	r0, [pc, #80]	; (800af34 <BSP_JOY_GetState+0x8c>)
 800aee2:	f005 fca5 	bl	8010830 <HAL_GPIO_ReadPin>
 800aee6:	2801      	cmp	r0, #1
 800aee8:	d0e7      	beq.n	800aeba <BSP_JOY_GetState+0x12>
    key_pressed = 1UL << joykey;
 800aeea:	2001      	movs	r0, #1
}
 800aeec:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_GPIO_ReadPin(JOY1_PORT[joykey], JOY1_PIN[joykey]) != GPIO_PIN_SET)
 800aeee:	2108      	movs	r1, #8
 800aef0:	4810      	ldr	r0, [pc, #64]	; (800af34 <BSP_JOY_GetState+0x8c>)
 800aef2:	f005 fc9d 	bl	8010830 <HAL_GPIO_ReadPin>
 800aef6:	2801      	cmp	r0, #1
 800aef8:	d0e3      	beq.n	800aec2 <BSP_JOY_GetState+0x1a>
    key_pressed = 1UL << joykey;
 800aefa:	2002      	movs	r0, #2
}
 800aefc:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_GPIO_ReadPin(JOY1_PORT[joykey], JOY1_PIN[joykey]) != GPIO_PIN_SET)
 800aefe:	2110      	movs	r1, #16
 800af00:	480c      	ldr	r0, [pc, #48]	; (800af34 <BSP_JOY_GetState+0x8c>)
 800af02:	f005 fc95 	bl	8010830 <HAL_GPIO_ReadPin>
 800af06:	2801      	cmp	r0, #1
 800af08:	d0df      	beq.n	800aeca <BSP_JOY_GetState+0x22>
    key_pressed = 1UL << joykey;
 800af0a:	2004      	movs	r0, #4
}
 800af0c:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_GPIO_ReadPin(JOY1_PORT[joykey], JOY1_PIN[joykey]) != GPIO_PIN_SET)
 800af0e:	2120      	movs	r1, #32
 800af10:	4808      	ldr	r0, [pc, #32]	; (800af34 <BSP_JOY_GetState+0x8c>)
 800af12:	f005 fc8d 	bl	8010830 <HAL_GPIO_ReadPin>
 800af16:	2801      	cmp	r0, #1
 800af18:	d0db      	beq.n	800aed2 <BSP_JOY_GetState+0x2a>
    key_pressed = 1UL << joykey;
 800af1a:	2008      	movs	r0, #8
}
 800af1c:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_GPIO_ReadPin(JOY1_PORT[joykey], JOY1_PIN[joykey]) != GPIO_PIN_SET)
 800af1e:	2140      	movs	r1, #64	; 0x40
 800af20:	4804      	ldr	r0, [pc, #16]	; (800af34 <BSP_JOY_GetState+0x8c>)
 800af22:	f005 fc85 	bl	8010830 <HAL_GPIO_ReadPin>
 800af26:	2801      	cmp	r0, #1
 800af28:	d0d7      	beq.n	800aeda <BSP_JOY_GetState+0x32>
    key_pressed = 1UL << joykey;
 800af2a:	2010      	movs	r0, #16
}
 800af2c:	bd38      	pop	{r3, r4, r5, pc}
 800af2e:	bf00      	nop
 800af30:	240085cc 	.word	0x240085cc
 800af34:	58022800 	.word	0x58022800

0800af38 <BSP_JOY_Callback>:
  UNUSED(JOY);
  UNUSED(JoyPin);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on JoyPin is triggered. */
}
 800af38:	4770      	bx	lr
 800af3a:	bf00      	nop

0800af3c <JOY1_UP_EXTI_Callback>:
/**
  * @brief  JOY1 UP EXTI line detection callbacks.
  * @retval None
  */
static void JOY1_UP_EXTI_Callback(void)
{
 800af3c:	b508      	push	{r3, lr}
  BSP_JOY_Callback(JOY1, JOY_UP);
 800af3e:	2110      	movs	r1, #16
 800af40:	2000      	movs	r0, #0
 800af42:	f7ff fff9 	bl	800af38 <BSP_JOY_Callback>
}
 800af46:	bd08      	pop	{r3, pc}

0800af48 <JOY1_RIGHT_EXTI_Callback>:
/**
  * @brief  JOY1 RIGHT EXTI line detection callbacks.
  * @retval None
  */
static void JOY1_RIGHT_EXTI_Callback(void)
{
 800af48:	b508      	push	{r3, lr}
  BSP_JOY_Callback(JOY1, JOY_RIGHT);
 800af4a:	2108      	movs	r1, #8
 800af4c:	2000      	movs	r0, #0
 800af4e:	f7ff fff3 	bl	800af38 <BSP_JOY_Callback>
}
 800af52:	bd08      	pop	{r3, pc}

0800af54 <JOY1_LEFT_EXTI_Callback>:
{
 800af54:	b508      	push	{r3, lr}
  BSP_JOY_Callback(JOY1, JOY_LEFT);
 800af56:	2104      	movs	r1, #4
 800af58:	2000      	movs	r0, #0
 800af5a:	f7ff ffed 	bl	800af38 <BSP_JOY_Callback>
}
 800af5e:	bd08      	pop	{r3, pc}

0800af60 <JOY1_DOWN_EXTI_Callback>:
{
 800af60:	b508      	push	{r3, lr}
  BSP_JOY_Callback(JOY1, JOY_DOWN);
 800af62:	2102      	movs	r1, #2
 800af64:	2000      	movs	r0, #0
 800af66:	f7ff ffe7 	bl	800af38 <BSP_JOY_Callback>
}
 800af6a:	bd08      	pop	{r3, pc}

0800af6c <JOY1_SEL_EXTI_Callback>:
{
 800af6c:	b508      	push	{r3, lr}
  BSP_JOY_Callback(JOY1, JOY_SEL);
 800af6e:	2101      	movs	r1, #1
 800af70:	2000      	movs	r0, #0
 800af72:	f7ff ffe1 	bl	800af38 <BSP_JOY_Callback>
}
 800af76:	bd08      	pop	{r3, pc}

0800af78 <SAI_MspInit>:
  * @brief  Initialize BSP_AUDIO_OUT MSP.
  * @param  hsai  SAI handle
  * @retval None
  */
static void SAI_MspInit(SAI_HandleTypeDef *hsai)
{
 800af78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  GPIO_InitTypeDef  gpio_init_structure;
  static DMA_HandleTypeDef hdma_sai_tx, hdma_sai_rx;

    /* Enable SAI clock */
    AUDIO_OUT_SAIx_CLK_ENABLE();
 800af7c:	4cad      	ldr	r4, [pc, #692]	; (800b234 <SAI_MspInit+0x2bc>)
{
 800af7e:	b096      	sub	sp, #88	; 0x58
    /* Enable GPIO clock */
    AUDIO_OUT_SAIx_SCK_ENABLE();
    AUDIO_OUT_SAIx_SD_ENABLE();
    AUDIO_OUT_SAIx_FS_ENABLE();
    /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
    gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 800af80:	2710      	movs	r7, #16
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800af82:	2502      	movs	r5, #2
    AUDIO_OUT_SAIx_CLK_ENABLE();
 800af84:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    gpio_init_structure.Pull = GPIO_NOPULL;
 800af88:	2100      	movs	r1, #0
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800af8a:	2203      	movs	r2, #3
{
 800af8c:	4606      	mov	r6, r0
    AUDIO_OUT_SAIx_CLK_ENABLE();
 800af8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_AF;
    HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 800af92:	48a9      	ldr	r0, [pc, #676]	; (800b238 <SAI_MspInit+0x2c0>)
    AUDIO_OUT_SAIx_CLK_ENABLE();
 800af94:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
 800af98:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
 800af9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800afa0:	9300      	str	r3, [sp, #0]
 800afa2:	9b00      	ldr	r3, [sp, #0]
    AUDIO_OUT_SAIx_SCK_ENABLE();
 800afa4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800afa8:	433b      	orrs	r3, r7
 800afaa:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800afae:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800afb2:	403b      	ands	r3, r7
 800afb4:	9301      	str	r3, [sp, #4]
 800afb6:	9b01      	ldr	r3, [sp, #4]
    AUDIO_OUT_SAIx_SD_ENABLE();
 800afb8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800afbc:	433b      	orrs	r3, r7
 800afbe:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800afc2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800afc6:	403b      	ands	r3, r7
 800afc8:	9302      	str	r3, [sp, #8]
 800afca:	9b02      	ldr	r3, [sp, #8]
    AUDIO_OUT_SAIx_FS_ENABLE();
 800afcc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800afd0:	433b      	orrs	r3, r7
 800afd2:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800afd6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800afda:	9512      	str	r5, [sp, #72]	; 0x48
    gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_AF;
 800afdc:	2506      	movs	r5, #6
    AUDIO_OUT_SAIx_FS_ENABLE();
 800afde:	403b      	ands	r3, r7
    gpio_init_structure.Pull = GPIO_NOPULL;
 800afe0:	9113      	str	r1, [sp, #76]	; 0x4c
    HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 800afe2:	a911      	add	r1, sp, #68	; 0x44
    gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 800afe4:	9711      	str	r7, [sp, #68]	; 0x44
    AUDIO_OUT_SAIx_FS_ENABLE();
 800afe6:	9303      	str	r3, [sp, #12]
 800afe8:	9b03      	ldr	r3, [sp, #12]
    gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_AF;
 800afea:	e9cd 2514 	strd	r2, r5, [sp, #80]	; 0x50
    HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 800afee:	f005 fa2b 	bl	8010448 <HAL_GPIO_Init>

    gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 800aff2:	2320      	movs	r3, #32
    gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
    HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_GPIO_PORT, &gpio_init_structure);
 800aff4:	a911      	add	r1, sp, #68	; 0x44
 800aff6:	4890      	ldr	r0, [pc, #576]	; (800b238 <SAI_MspInit+0x2c0>)
    gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 800aff8:	9311      	str	r3, [sp, #68]	; 0x44
    gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 800affa:	9515      	str	r5, [sp, #84]	; 0x54
    HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_GPIO_PORT, &gpio_init_structure);
 800affc:	f005 fa24 	bl	8010448 <HAL_GPIO_Init>

    gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 800b000:	2340      	movs	r3, #64	; 0x40
    gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SD_AF;
    HAL_GPIO_Init(AUDIO_OUT_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 800b002:	a911      	add	r1, sp, #68	; 0x44
 800b004:	488c      	ldr	r0, [pc, #560]	; (800b238 <SAI_MspInit+0x2c0>)
    gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 800b006:	9311      	str	r3, [sp, #68]	; 0x44
    gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SD_AF;
 800b008:	9515      	str	r5, [sp, #84]	; 0x54
    HAL_GPIO_Init(AUDIO_OUT_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 800b00a:	f005 fa1d 	bl	8010448 <HAL_GPIO_Init>

    if(hsai->Instance != AUDIO_IN_SAI_PDMx)
 800b00e:	6833      	ldr	r3, [r6, #0]
 800b010:	4a8a      	ldr	r2, [pc, #552]	; (800b23c <SAI_MspInit+0x2c4>)
 800b012:	4293      	cmp	r3, r2
 800b014:	f000 8124 	beq.w	800b260 <SAI_MspInit+0x2e8>
    {
      if(haudio_in_sai.State != HAL_SAI_STATE_READY)
 800b018:	4a89      	ldr	r2, [pc, #548]	; (800b240 <SAI_MspInit+0x2c8>)
 800b01a:	f892 2091 	ldrb.w	r2, [r2, #145]	; 0x91
 800b01e:	2a01      	cmp	r2, #1
 800b020:	d10d      	bne.n	800b03e <SAI_MspInit+0xc6>
        gpio_init_structure.Alternate = AUDIO_OUT_SAIx_MCLK_AF;
        HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
      }
    }

  if(hsai->Instance == AUDIO_OUT_SAIx)
 800b022:	4a88      	ldr	r2, [pc, #544]	; (800b244 <SAI_MspInit+0x2cc>)
 800b024:	4293      	cmp	r3, r2
 800b026:	d021      	beq.n	800b06c <SAI_MspInit+0xf4>
    HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, BSP_AUDIO_OUT_IT_PRIORITY, 0);
    HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
  }

  /* Audio In Msp initialization */
  if(hsai->Instance == AUDIO_IN_SAI_PDMx)
 800b028:	4a84      	ldr	r2, [pc, #528]	; (800b23c <SAI_MspInit+0x2c4>)
 800b02a:	4293      	cmp	r3, r2
 800b02c:	f000 8118 	beq.w	800b260 <SAI_MspInit+0x2e8>
    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_IN_SAI_PDMx_DMAx_IRQ, BSP_AUDIO_IN_IT_PRIORITY, 0);
    HAL_NVIC_EnableIRQ(AUDIO_IN_SAI_PDMx_DMAx_IRQ);
  }
   /* Audio In Msp initialization */
  if(hsai->Instance == AUDIO_IN_SAIx)
 800b030:	4a85      	ldr	r2, [pc, #532]	; (800b248 <SAI_MspInit+0x2d0>)
 800b032:	4293      	cmp	r3, r2
 800b034:	f000 809d 	beq.w	800b172 <SAI_MspInit+0x1fa>
    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, BSP_AUDIO_IN_IT_PRIORITY, 0);
    HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);

  }
}
 800b038:	b016      	add	sp, #88	; 0x58
 800b03a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        AUDIO_OUT_SAIx_MCLK_ENABLE();
 800b03e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
        gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 800b042:	2280      	movs	r2, #128	; 0x80
        HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 800b044:	a911      	add	r1, sp, #68	; 0x44
 800b046:	4881      	ldr	r0, [pc, #516]	; (800b24c <SAI_MspInit+0x2d4>)
        AUDIO_OUT_SAIx_MCLK_ENABLE();
 800b048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b04c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800b050:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
        gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 800b054:	9211      	str	r2, [sp, #68]	; 0x44
        AUDIO_OUT_SAIx_MCLK_ENABLE();
 800b056:	f003 0340 	and.w	r3, r3, #64	; 0x40
        gpio_init_structure.Alternate = AUDIO_OUT_SAIx_MCLK_AF;
 800b05a:	9515      	str	r5, [sp, #84]	; 0x54
        AUDIO_OUT_SAIx_MCLK_ENABLE();
 800b05c:	9304      	str	r3, [sp, #16]
 800b05e:	9b04      	ldr	r3, [sp, #16]
        HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 800b060:	f005 f9f2 	bl	8010448 <HAL_GPIO_Init>
 800b064:	6833      	ldr	r3, [r6, #0]
  if(hsai->Instance == AUDIO_OUT_SAIx)
 800b066:	4a77      	ldr	r2, [pc, #476]	; (800b244 <SAI_MspInit+0x2cc>)
 800b068:	4293      	cmp	r3, r2
 800b06a:	d1dd      	bne.n	800b028 <SAI_MspInit+0xb0>
    __HAL_RCC_SAI1_CLK_ENABLE();
 800b06c:	4d71      	ldr	r5, [pc, #452]	; (800b234 <SAI_MspInit+0x2bc>)
  gpio_init_structure.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6;
 800b06e:	2070      	movs	r0, #112	; 0x70
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800b070:	2102      	movs	r1, #2
  gpio_init_structure.Pull = GPIO_NOPULL;
 800b072:	2700      	movs	r7, #0
    __HAL_RCC_SAI1_CLK_ENABLE();
 800b074:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
  gpio_init_structure.Alternate = GPIO_AF6_SAI1;
 800b078:	2206      	movs	r2, #6
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b07a:	f04f 0803 	mov.w	r8, #3
 800b07e:	4c74      	ldr	r4, [pc, #464]	; (800b250 <SAI_MspInit+0x2d8>)
    __HAL_RCC_SAI1_CLK_ENABLE();
 800b080:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b084:	f8c5 30f0 	str.w	r3, [r5, #240]	; 0xf0
 800b088:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
 800b08c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b090:	9305      	str	r3, [sp, #20]
 800b092:	9b05      	ldr	r3, [sp, #20]
 __HAL_RCC_GPIOE_CLK_ENABLE();
 800b094:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800b098:	f043 0310 	orr.w	r3, r3, #16
 800b09c:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 800b0a0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  gpio_init_structure.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6;
 800b0a4:	9011      	str	r0, [sp, #68]	; 0x44
 __HAL_RCC_GPIOE_CLK_ENABLE();
 800b0a6:	f003 0310 	and.w	r3, r3, #16
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800b0aa:	9112      	str	r1, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800b0ac:	4862      	ldr	r0, [pc, #392]	; (800b238 <SAI_MspInit+0x2c0>)
 800b0ae:	a911      	add	r1, sp, #68	; 0x44
 __HAL_RCC_GPIOE_CLK_ENABLE();
 800b0b0:	9306      	str	r3, [sp, #24]
 800b0b2:	9b06      	ldr	r3, [sp, #24]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800b0b4:	9713      	str	r7, [sp, #76]	; 0x4c
  gpio_init_structure.Alternate = GPIO_AF6_SAI1;
 800b0b6:	e9cd 8214 	strd	r8, r2, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800b0ba:	f005 f9c5 	bl	8010448 <HAL_GPIO_Init>
   __HAL_RCC_GPIOG_CLK_ENABLE();
 800b0be:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  gpio_init_structure.Pin = GPIO_PIN_7;
 800b0c2:	2280      	movs	r2, #128	; 0x80
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800b0c4:	a911      	add	r1, sp, #68	; 0x44
   __HAL_RCC_GPIOG_CLK_ENABLE();
 800b0c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800b0ca:	4860      	ldr	r0, [pc, #384]	; (800b24c <SAI_MspInit+0x2d4>)
   __HAL_RCC_GPIOG_CLK_ENABLE();
 800b0cc:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 800b0d0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  gpio_init_structure.Pin = GPIO_PIN_7;
 800b0d4:	9211      	str	r2, [sp, #68]	; 0x44
   __HAL_RCC_GPIOG_CLK_ENABLE();
 800b0d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0da:	9307      	str	r3, [sp, #28]
 800b0dc:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800b0de:	f005 f9b3 	bl	8010448 <HAL_GPIO_Init>
    AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 800b0e2:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
    hdma_sai_tx.Init.Request             = AUDIO_OUT_SAIx_DMAx_REQUEST;
 800b0e6:	2057      	movs	r0, #87	; 0x57
    if(Audio_Out_Ctx[0].BitsPerSample == AUDIO_RESOLUTION_16B)
 800b0e8:	4a5a      	ldr	r2, [pc, #360]	; (800b254 <SAI_MspInit+0x2dc>)
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 800b0ea:	f44f 6c80 	mov.w	ip, #1024	; 0x400
    AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 800b0ee:	f043 0302 	orr.w	r3, r3, #2
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800b0f2:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
    if(Audio_Out_Ctx[0].BitsPerSample == AUDIO_RESOLUTION_16B)
 800b0f6:	68d2      	ldr	r2, [r2, #12]
    AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 800b0f8:	f8c5 30d8 	str.w	r3, [r5, #216]	; 0xd8
 800b0fc:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
      hdma_sai_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_HALFWORD;
 800b100:	2a10      	cmp	r2, #16
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 800b102:	f44f 7580 	mov.w	r5, #256	; 0x100
    hdma_sai_tx.Init.Request             = AUDIO_OUT_SAIx_DMAx_REQUEST;
 800b106:	6060      	str	r0, [r4, #4]
    AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 800b108:	f003 0302 	and.w	r3, r3, #2
      hdma_sai_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_HALFWORD;
 800b10c:	bf16      	itet	ne
 800b10e:	f44f 4180 	movne.w	r1, #16384	; 0x4000
 800b112:	f44f 5100 	moveq.w	r1, #8192	; 0x2000
 800b116:	f44f 5280 	movne.w	r2, #4096	; 0x1000
    AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 800b11a:	9308      	str	r3, [sp, #32]
      hdma_sai_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_HALFWORD;
 800b11c:	bf08      	it	eq
 800b11e:	f44f 6200 	moveq.w	r2, #2048	; 0x800
    AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 800b122:	9b08      	ldr	r3, [sp, #32]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 800b124:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b128:	61a1      	str	r1, [r4, #24]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 800b12a:	2104      	movs	r1, #4
 800b12c:	6162      	str	r2, [r4, #20]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800b12e:	2240      	movs	r2, #64	; 0x40
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 800b130:	f8c6 4080 	str.w	r4, [r6, #128]	; 0x80
    (void)HAL_DMA_DeInit(&hdma_sai_tx);
 800b134:	4620      	mov	r0, r4
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 800b136:	f8c4 c010 	str.w	ip, [r4, #16]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 800b13a:	6261      	str	r1, [r4, #36]	; 0x24
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800b13c:	60a2      	str	r2, [r4, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800b13e:	60e7      	str	r7, [r4, #12]
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 800b140:	62e7      	str	r7, [r4, #44]	; 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 800b142:	6327      	str	r7, [r4, #48]	; 0x30
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 800b144:	63a6      	str	r6, [r4, #56]	; 0x38
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 800b146:	e9c4 5307 	strd	r5, r3, [r4, #28]
    hdma_sai_tx.Instance                 = AUDIO_OUT_SAIx_DMAx_STREAM;
 800b14a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b14e:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 800b152:	6023      	str	r3, [r4, #0]
    (void)HAL_DMA_DeInit(&hdma_sai_tx);
 800b154:	f003 f9f8 	bl	800e548 <HAL_DMA_DeInit>
    (void)HAL_DMA_Init(&hdma_sai_tx);
 800b158:	4620      	mov	r0, r4
 800b15a:	f002 ff29 	bl	800dfb0 <HAL_DMA_Init>
    HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, BSP_AUDIO_OUT_IT_PRIORITY, 0);
 800b15e:	463a      	mov	r2, r7
 800b160:	210e      	movs	r1, #14
 800b162:	2039      	movs	r0, #57	; 0x39
 800b164:	f002 fc36 	bl	800d9d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 800b168:	2039      	movs	r0, #57	; 0x39
 800b16a:	f002 fc69 	bl	800da40 <HAL_NVIC_EnableIRQ>
 800b16e:	6833      	ldr	r3, [r6, #0]
 800b170:	e75a      	b.n	800b028 <SAI_MspInit+0xb0>
    AUDIO_IN_SAIx_CLK_ENABLE();
 800b172:	4d30      	ldr	r5, [pc, #192]	; (800b234 <SAI_MspInit+0x2bc>)
    gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 800b174:	2008      	movs	r0, #8
    gpio_init_structure.Pull = GPIO_NOPULL;
 800b176:	2700      	movs	r7, #0
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800b178:	2202      	movs	r2, #2
    AUDIO_IN_SAIx_CLK_ENABLE();
 800b17a:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
    gpio_init_structure.Alternate = AUDIO_IN_SAIx_AF;
 800b17e:	2406      	movs	r4, #6
    HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 800b180:	a911      	add	r1, sp, #68	; 0x44
    AUDIO_IN_SAIx_CLK_ENABLE();
 800b182:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b186:	f8c5 30f0 	str.w	r3, [r5, #240]	; 0xf0
 800b18a:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
 800b18e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b192:	930e      	str	r3, [sp, #56]	; 0x38
 800b194:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    AUDIO_IN_SAIx_SD_ENABLE();
 800b196:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800b19a:	f043 0310 	orr.w	r3, r3, #16
 800b19e:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 800b1a2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
    gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 800b1a6:	9011      	str	r0, [sp, #68]	; 0x44
    AUDIO_IN_SAIx_SD_ENABLE();
 800b1a8:	f003 0310 	and.w	r3, r3, #16
    HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 800b1ac:	4822      	ldr	r0, [pc, #136]	; (800b238 <SAI_MspInit+0x2c0>)
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800b1ae:	9212      	str	r2, [sp, #72]	; 0x48
    AUDIO_IN_SAIx_SD_ENABLE();
 800b1b0:	930f      	str	r3, [sp, #60]	; 0x3c
 800b1b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800b1b4:	9214      	str	r2, [sp, #80]	; 0x50
    gpio_init_structure.Alternate = AUDIO_IN_SAIx_AF;
 800b1b6:	9415      	str	r4, [sp, #84]	; 0x54
    gpio_init_structure.Pull = GPIO_NOPULL;
 800b1b8:	9713      	str	r7, [sp, #76]	; 0x4c
    HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 800b1ba:	f005 f945 	bl	8010448 <HAL_GPIO_Init>
    AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 800b1be:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
    hdma_sai_rx.Init.Request             = AUDIO_IN_SAIx_DMAx_REQUEST;
 800b1c2:	2258      	movs	r2, #88	; 0x58
 800b1c4:	4c24      	ldr	r4, [pc, #144]	; (800b258 <SAI_MspInit+0x2e0>)
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 800b1c6:	f44f 6c80 	mov.w	ip, #1024	; 0x400
    AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 800b1ca:	f043 0302 	orr.w	r3, r3, #2
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 800b1ce:	f44f 6000 	mov.w	r0, #2048	; 0x800
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800b1d2:	60a7      	str	r7, [r4, #8]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 800b1d4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 800b1d8:	f8c5 30d8 	str.w	r3, [r5, #216]	; 0xd8
 800b1dc:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 800b1e0:	f44f 5500 	mov.w	r5, #8192	; 0x2000
    hdma_sai_rx.Init.Request             = AUDIO_IN_SAIx_DMAx_REQUEST;
 800b1e4:	6062      	str	r2, [r4, #4]
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800b1e6:	2203      	movs	r2, #3
    AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 800b1e8:	f003 0302 	and.w	r3, r3, #2
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 800b1ec:	f8c6 4084 	str.w	r4, [r6, #132]	; 0x84
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 800b1f0:	6221      	str	r1, [r4, #32]
    AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 800b1f2:	9310      	str	r3, [sp, #64]	; 0x40
 800b1f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 800b1f6:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800b1fa:	62a2      	str	r2, [r4, #40]	; 0x28
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800b1fc:	60e7      	str	r7, [r4, #12]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 800b1fe:	6267      	str	r7, [r4, #36]	; 0x24
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 800b200:	63a6      	str	r6, [r4, #56]	; 0x38
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 800b202:	e9c4 5306 	strd	r5, r3, [r4, #24]
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 800b206:	4b15      	ldr	r3, [pc, #84]	; (800b25c <SAI_MspInit+0x2e4>)
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 800b208:	e9c4 c004 	strd	ip, r0, [r4, #16]
    HAL_DMA_DeInit(&hdma_sai_rx);
 800b20c:	4620      	mov	r0, r4
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 800b20e:	6023      	str	r3, [r4, #0]
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 800b210:	e9c4 770b 	strd	r7, r7, [r4, #44]	; 0x2c
    HAL_DMA_DeInit(&hdma_sai_rx);
 800b214:	f003 f998 	bl	800e548 <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_sai_rx);
 800b218:	4620      	mov	r0, r4
 800b21a:	f002 fec9 	bl	800dfb0 <HAL_DMA_Init>
    HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, BSP_AUDIO_IN_IT_PRIORITY, 0);
 800b21e:	463a      	mov	r2, r7
 800b220:	210f      	movs	r1, #15
 800b222:	203c      	movs	r0, #60	; 0x3c
 800b224:	f002 fbd6 	bl	800d9d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 800b228:	203c      	movs	r0, #60	; 0x3c
 800b22a:	f002 fc09 	bl	800da40 <HAL_NVIC_EnableIRQ>
}
 800b22e:	b016      	add	sp, #88	; 0x58
 800b230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b234:	58024400 	.word	0x58024400
 800b238:	58021000 	.word	0x58021000
 800b23c:	58005404 	.word	0x58005404
 800b240:	2400a08c 	.word	0x2400a08c
 800b244:	40015804 	.word	0x40015804
 800b248:	40015824 	.word	0x40015824
 800b24c:	58021800 	.word	0x58021800
 800b250:	240086e8 	.word	0x240086e8
 800b254:	24008600 	.word	0x24008600
 800b258:	24008670 	.word	0x24008670
 800b25c:	40020470 	.word	0x40020470
     AUDIO_IN_SAI_PDMx_CLK_ENABLE();
 800b260:	4d44      	ldr	r5, [pc, #272]	; (800b374 <SAI_MspInit+0x3fc>)
     gpio_init_structure.Pin = AUDIO_IN_SAI_PDMx_CLK_IN_PIN;
 800b262:	2004      	movs	r0, #4
    gpio_init_structure.Pull = GPIO_NOPULL;
 800b264:	2700      	movs	r7, #0
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800b266:	2402      	movs	r4, #2
     AUDIO_IN_SAI_PDMx_CLK_ENABLE();
 800b268:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
    gpio_init_structure.Alternate = GPIO_AF10_SAI4;
 800b26c:	220a      	movs	r2, #10
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_CLK_IN_PORT, &gpio_init_structure);
 800b26e:	a911      	add	r1, sp, #68	; 0x44
    hdma_sai_rx.Init.Request             = AUDIO_IN_SAI_PDMx_DMAx_REQUEST;
 800b270:	f04f 080f 	mov.w	r8, #15
     AUDIO_IN_SAI_PDMx_CLK_ENABLE();
 800b274:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b278:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
 800b27c:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 800b280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b284:	9309      	str	r3, [sp, #36]	; 0x24
 800b286:	9b09      	ldr	r3, [sp, #36]	; 0x24
     AUDIO_IN_SAI_PDMx_CLK_IN_ENABLE();
 800b288:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800b28c:	f043 0310 	orr.w	r3, r3, #16
 800b290:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 800b294:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800b298:	f003 0310 	and.w	r3, r3, #16
 800b29c:	930a      	str	r3, [sp, #40]	; 0x28
 800b29e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     AUDIO_IN_SAI_PDMx_DATA_IN_ENABLE();
 800b2a0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800b2a4:	4303      	orrs	r3, r0
 800b2a6:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 800b2aa:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
     gpio_init_structure.Pin = AUDIO_IN_SAI_PDMx_CLK_IN_PIN;
 800b2ae:	9011      	str	r0, [sp, #68]	; 0x44
     AUDIO_IN_SAI_PDMx_DATA_IN_ENABLE();
 800b2b0:	4003      	ands	r3, r0
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_CLK_IN_PORT, &gpio_init_structure);
 800b2b2:	4831      	ldr	r0, [pc, #196]	; (800b378 <SAI_MspInit+0x400>)
    gpio_init_structure.Alternate = GPIO_AF10_SAI4;
 800b2b4:	9215      	str	r2, [sp, #84]	; 0x54
     AUDIO_IN_SAI_PDMx_DATA_IN_ENABLE();
 800b2b6:	930b      	str	r3, [sp, #44]	; 0x2c
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800b2b8:	9412      	str	r4, [sp, #72]	; 0x48
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800b2ba:	9414      	str	r4, [sp, #80]	; 0x50
     AUDIO_IN_SAI_PDMx_DATA_IN_ENABLE();
 800b2bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    gpio_init_structure.Pull = GPIO_NOPULL;
 800b2be:	9713      	str	r7, [sp, #76]	; 0x4c
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_CLK_IN_PORT, &gpio_init_structure);
 800b2c0:	f005 f8c2 	bl	8010448 <HAL_GPIO_Init>
    gpio_init_structure.Pull = GPIO_PULLUP;
 800b2c4:	2301      	movs	r3, #1
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_DATA_IN_PORT, &gpio_init_structure);
 800b2c6:	a911      	add	r1, sp, #68	; 0x44
 800b2c8:	482c      	ldr	r0, [pc, #176]	; (800b37c <SAI_MspInit+0x404>)
    gpio_init_structure.Pin = AUDIO_IN_SAI_PDMx_DATA_IN_PIN;
 800b2ca:	9411      	str	r4, [sp, #68]	; 0x44
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800b2cc:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_DATA_IN_PORT, &gpio_init_structure);
 800b2d0:	f005 f8ba 	bl	8010448 <HAL_GPIO_Init>
    AUDIO_IN_SAI_PDMx_FS_SCK_ENABLE();
 800b2d4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
    gpio_init_structure.Pin = AUDIO_IN_SAI_PDMx_FS_PIN | AUDIO_IN_SAI_PDMx_SCK_PIN;
 800b2d8:	2030      	movs	r0, #48	; 0x30
    gpio_init_structure.Alternate = AUDIO_IN_SAI_PDMx_FS_SCK_AF;
 800b2da:	2208      	movs	r2, #8
    AUDIO_IN_SAI_PDMx_FS_SCK_ENABLE();
 800b2dc:	f043 0310 	orr.w	r3, r3, #16
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_FS_SCK_GPIO_PORT, &gpio_init_structure);
 800b2e0:	a911      	add	r1, sp, #68	; 0x44
    AUDIO_IN_SAI_PDMx_FS_SCK_ENABLE();
 800b2e2:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 800b2e6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
    gpio_init_structure.Pin = AUDIO_IN_SAI_PDMx_FS_PIN | AUDIO_IN_SAI_PDMx_SCK_PIN;
 800b2ea:	9011      	str	r0, [sp, #68]	; 0x44
    AUDIO_IN_SAI_PDMx_FS_SCK_ENABLE();
 800b2ec:	f003 0310 	and.w	r3, r3, #16
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_FS_SCK_GPIO_PORT, &gpio_init_structure);
 800b2f0:	4821      	ldr	r0, [pc, #132]	; (800b378 <SAI_MspInit+0x400>)
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800b2f2:	9412      	str	r4, [sp, #72]	; 0x48
    AUDIO_IN_SAI_PDMx_FS_SCK_ENABLE();
 800b2f4:	930c      	str	r3, [sp, #48]	; 0x30
 800b2f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    gpio_init_structure.Alternate = AUDIO_IN_SAI_PDMx_FS_SCK_AF;
 800b2f8:	9215      	str	r2, [sp, #84]	; 0x54
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800b2fa:	e9cd 7413 	strd	r7, r4, [sp, #76]	; 0x4c
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_FS_SCK_GPIO_PORT, &gpio_init_structure);
 800b2fe:	f005 f8a3 	bl	8010448 <HAL_GPIO_Init>
      __HAL_RCC_BDMA_CLK_ENABLE();
 800b302:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
    hdma_sai_rx.Init.Request             = AUDIO_IN_SAI_PDMx_DMAx_REQUEST;
 800b306:	4c1e      	ldr	r4, [pc, #120]	; (800b380 <SAI_MspInit+0x408>)
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 800b308:	f44f 7180 	mov.w	r1, #256	; 0x100
      __HAL_RCC_BDMA_CLK_ENABLE();
 800b30c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 800b310:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800b314:	60a7      	str	r7, [r4, #8]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAI_PDMx_DMAx_PERIPH_DATA_SIZE;
 800b316:	f44f 6c00 	mov.w	ip, #2048	; 0x800
      __HAL_RCC_BDMA_CLK_ENABLE();
 800b31a:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAI_PDMx_DMAx_MEM_DATA_SIZE;
 800b31e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
      __HAL_RCC_BDMA_CLK_ENABLE();
 800b322:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 800b326:	6122      	str	r2, [r4, #16]
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800b328:	2203      	movs	r2, #3
      __HAL_RCC_BDMA_CLK_ENABLE();
 800b32a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 800b32e:	f8c6 4084 	str.w	r4, [r6, #132]	; 0x84
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800b332:	62a2      	str	r2, [r4, #40]	; 0x28
      __HAL_RCC_BDMA_CLK_ENABLE();
 800b334:	930d      	str	r3, [sp, #52]	; 0x34
 800b336:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 800b338:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800b33c:	60e7      	str	r7, [r4, #12]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 800b33e:	6267      	str	r7, [r4, #36]	; 0x24
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 800b340:	63a6      	str	r6, [r4, #56]	; 0x38
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 800b342:	e9c4 1307 	strd	r1, r3, [r4, #28]
    hdma_sai_rx.Instance = AUDIO_IN_SAI_PDMx_DMAx_STREAM;
 800b346:	4b0f      	ldr	r3, [pc, #60]	; (800b384 <SAI_MspInit+0x40c>)
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAI_PDMx_DMAx_MEM_DATA_SIZE;
 800b348:	e9c4 c005 	strd	ip, r0, [r4, #20]
    HAL_DMA_DeInit(&hdma_sai_rx);
 800b34c:	4620      	mov	r0, r4
    hdma_sai_rx.Init.Request             = AUDIO_IN_SAI_PDMx_DMAx_REQUEST;
 800b34e:	e9c4 3800 	strd	r3, r8, [r4]
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 800b352:	e9c4 770b 	strd	r7, r7, [r4, #44]	; 0x2c
    HAL_DMA_DeInit(&hdma_sai_rx);
 800b356:	f003 f8f7 	bl	800e548 <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_sai_rx);
 800b35a:	4620      	mov	r0, r4
 800b35c:	f002 fe28 	bl	800dfb0 <HAL_DMA_Init>
    HAL_NVIC_SetPriority(AUDIO_IN_SAI_PDMx_DMAx_IRQ, BSP_AUDIO_IN_IT_PRIORITY, 0);
 800b360:	463a      	mov	r2, r7
 800b362:	4641      	mov	r1, r8
 800b364:	2082      	movs	r0, #130	; 0x82
 800b366:	f002 fb35 	bl	800d9d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_IN_SAI_PDMx_DMAx_IRQ);
 800b36a:	2082      	movs	r0, #130	; 0x82
 800b36c:	f002 fb68 	bl	800da40 <HAL_NVIC_EnableIRQ>
 800b370:	6833      	ldr	r3, [r6, #0]
 800b372:	e65d      	b.n	800b030 <SAI_MspInit+0xb8>
 800b374:	58024400 	.word	0x58024400
 800b378:	58021000 	.word	0x58021000
 800b37c:	58020800 	.word	0x58020800
 800b380:	24008670 	.word	0x24008670
 800b384:	5802541c 	.word	0x5802541c

0800b388 <MX_SAI1_Block_A_Init>:
{
 800b388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_SAI_DISABLE(hsai);
 800b38a:	6805      	ldr	r5, [r0, #0]
  hsai->Init.NoDivider            = SAI_MASTERDIVIDER_ENABLE;
 800b38c:	2300      	movs	r3, #0
  hsai->Init.MonoStereoMode       = MXConfig->MonoStereoMode;
 800b38e:	68ce      	ldr	r6, [r1, #12]
  hsai->Init.FIFOThreshold        = SAI_FIFOTHRESHOLD_1QF;
 800b390:	2701      	movs	r7, #1
  __HAL_SAI_DISABLE(hsai);
 800b392:	682a      	ldr	r2, [r5, #0]
{
 800b394:	4604      	mov	r4, r0
  __HAL_SAI_DISABLE(hsai);
 800b396:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b39a:	602a      	str	r2, [r5, #0]
  hsai->Init.AudioMode            = MXConfig->AudioMode;
 800b39c:	684a      	ldr	r2, [r1, #4]
  hsai->Init.AudioFrequency       = MXConfig->AudioFrequency;
 800b39e:	680d      	ldr	r5, [r1, #0]
  hsai->Init.AudioMode            = MXConfig->AudioMode;
 800b3a0:	6042      	str	r2, [r0, #4]
  hsai->Init.DataSize             = MXConfig->DataSize;
 800b3a2:	688a      	ldr	r2, [r1, #8]
  hsai->Init.MonoStereoMode       = MXConfig->MonoStereoMode;
 800b3a4:	62c6      	str	r6, [r0, #44]	; 0x2c
  hsai->FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 800b3a6:	f44f 3680 	mov.w	r6, #65536	; 0x10000
  hsai->Init.DataSize             = MXConfig->DataSize;
 800b3aa:	6482      	str	r2, [r0, #72]	; 0x48
  hsai->Init.ClockStrobing        = MXConfig->ClockStrobing;
 800b3ac:	690a      	ldr	r2, [r1, #16]
  hsai->Init.AudioFrequency       = MXConfig->AudioFrequency;
 800b3ae:	6205      	str	r5, [r0, #32]
  hsai->FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 800b3b0:	f44f 2580 	mov.w	r5, #262144	; 0x40000
  hsai->Init.ClockStrobing        = MXConfig->ClockStrobing;
 800b3b4:	6502      	str	r2, [r0, #80]	; 0x50
  hsai->Init.Synchro              = MXConfig->Synchro;
 800b3b6:	694a      	ldr	r2, [r1, #20]
  hsai->Init.NoDivider            = SAI_MASTERDIVIDER_ENABLE;
 800b3b8:	6183      	str	r3, [r0, #24]
  hsai->Init.Synchro              = MXConfig->Synchro;
 800b3ba:	6082      	str	r2, [r0, #8]
  hsai->Init.OutputDrive          = MXConfig->OutputDrive;
 800b3bc:	698a      	ldr	r2, [r1, #24]
  hsai->Init.Protocol             = SAI_FREE_PROTOCOL;
 800b3be:	6443      	str	r3, [r0, #68]	; 0x44
  hsai->Init.OutputDrive          = MXConfig->OutputDrive;
 800b3c0:	6142      	str	r2, [r0, #20]
  hsai->Init.SynchroExt           = MXConfig->SynchroExt;
 800b3c2:	69ca      	ldr	r2, [r1, #28]
  hsai->Init.FirstBit             = SAI_FIRSTBIT_MSB;
 800b3c4:	64c3      	str	r3, [r0, #76]	; 0x4c
  hsai->Init.SynchroExt           = MXConfig->SynchroExt;
 800b3c6:	60c2      	str	r2, [r0, #12]
  hsai->FrameInit.FrameLength       = MXConfig->FrameLength;
 800b3c8:	6a0a      	ldr	r2, [r1, #32]
  hsai->Init.FIFOThreshold        = SAI_FIFOTHRESHOLD_1QF;
 800b3ca:	61c7      	str	r7, [r0, #28]
  hsai->Init.CompandingMode       = SAI_NOCOMPANDING;
 800b3cc:	6303      	str	r3, [r0, #48]	; 0x30
  hsai->Init.TriState             = SAI_OUTPUT_NOTRELEASED;
 800b3ce:	6343      	str	r3, [r0, #52]	; 0x34
  hsai->Init.MckOutput            = SAI_MCK_OUTPUT_DISABLE;
 800b3d0:	6103      	str	r3, [r0, #16]
  hsai->Init.PdmInit.Activation   = DISABLE;
 800b3d2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hsai->Init.MckOverSampling      = SAI_MCK_OVERSAMPLING_DISABLE;
 800b3d6:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hsai->Init.PdmInit.MicPairsNbr  = 0;
 800b3da:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hsai->SlotInit.SlotActive         = MXConfig->SlotActive;
 800b3de:	e9d1 7109 	ldrd	r7, r1, [r1, #36]	; 0x24
  hsai->FrameInit.FrameLength       = MXConfig->FrameLength;
 800b3e2:	6542      	str	r2, [r0, #84]	; 0x54
  hsai->SlotInit.SlotNumber         = 4;
 800b3e4:	2204      	movs	r2, #4
  hsai->FrameInit.ActiveFrameLength = MXConfig->ActiveFrameLength;
 800b3e6:	6587      	str	r7, [r0, #88]	; 0x58
  hsai->SlotInit.SlotActive         = MXConfig->SlotActive;
 800b3e8:	6741      	str	r1, [r0, #116]	; 0x74
  hsai->FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 800b3ea:	6603      	str	r3, [r0, #96]	; 0x60
  hsai->FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 800b3ec:	65c6      	str	r6, [r0, #92]	; 0x5c
  hsai->FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 800b3ee:	6645      	str	r5, [r0, #100]	; 0x64
  hsai->SlotInit.SlotNumber         = 4;
 800b3f0:	6702      	str	r2, [r0, #112]	; 0x70
  hsai->SlotInit.SlotSize           = SAI_SLOTSIZE_DATASIZE;
 800b3f2:	e9c0 331a 	strd	r3, r3, [r0, #104]	; 0x68
  if(HAL_SAI_Init(hsai) != HAL_OK)
 800b3f6:	f008 fe77 	bl	80140e8 <HAL_SAI_Init>
  __HAL_SAI_ENABLE(hsai);
 800b3fa:	6822      	ldr	r2, [r4, #0]
}
 800b3fc:	3000      	adds	r0, #0
  __HAL_SAI_ENABLE(hsai);
 800b3fe:	6813      	ldr	r3, [r2, #0]
}
 800b400:	bf18      	it	ne
 800b402:	2001      	movne	r0, #1
  __HAL_SAI_ENABLE(hsai);
 800b404:	4333      	orrs	r3, r6
 800b406:	6013      	str	r3, [r2, #0]
}
 800b408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b40a:	bf00      	nop

0800b40c <MX_SAI1_ClockConfig>:
{
 800b40c:	b530      	push	{r4, r5, lr}
 800b40e:	b0b1      	sub	sp, #196	; 0xc4
 800b410:	460c      	mov	r4, r1
  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 800b412:	4668      	mov	r0, sp
 800b414:	f008 fa2c 	bl	8013870 <HAL_RCCEx_GetPeriphCLKConfig>
  if((SampleRate == AUDIO_FREQUENCY_11K) || (SampleRate == AUDIO_FREQUENCY_22K) || (SampleRate == AUDIO_FREQUENCY_44K))
 800b418:	f642 3211 	movw	r2, #11025	; 0x2b11
 800b41c:	f245 6322 	movw	r3, #22050	; 0x5622
 800b420:	429c      	cmp	r4, r3
 800b422:	bf18      	it	ne
 800b424:	4294      	cmpne	r4, r2
 800b426:	d003      	beq.n	800b430 <MX_SAI1_ClockConfig+0x24>
 800b428:	f64a 4344 	movw	r3, #44100	; 0xac44
 800b42c:	429c      	cmp	r4, r3
 800b42e:	d115      	bne.n	800b45c <MX_SAI1_ClockConfig+0x50>
    rcc_ex_clk_init_struct.PLL2.PLL2N = 429;
 800b430:	f240 15ad 	movw	r5, #429	; 0x1ad
    rcc_ex_clk_init_struct.PLL2.PLL2P = 38;
 800b434:	2426      	movs	r4, #38	; 0x26
  rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 800b436:	2301      	movs	r3, #1
  rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 800b438:	f44f 7180 	mov.w	r1, #256	; 0x100
  rcc_ex_clk_init_struct.PLL2.PLL2M = 25;
 800b43c:	2219      	movs	r2, #25
  if(HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct) != HAL_OK)
 800b43e:	4668      	mov	r0, sp
  rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 800b440:	9100      	str	r1, [sp, #0]
  rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 800b442:	9316      	str	r3, [sp, #88]	; 0x58
  rcc_ex_clk_init_struct.PLL2.PLL2M = 25;
 800b444:	9201      	str	r2, [sp, #4]
 800b446:	e9cd 5402 	strd	r5, r4, [sp, #8]
  rcc_ex_clk_init_struct.PLL2.PLL2R = 1;
 800b44a:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct) != HAL_OK)
 800b44e:	f007 fc95 	bl	8012d7c <HAL_RCCEx_PeriphCLKConfig>
}
 800b452:	3000      	adds	r0, #0
 800b454:	bf18      	it	ne
 800b456:	2001      	movne	r0, #1
 800b458:	b031      	add	sp, #196	; 0xc4
 800b45a:	bd30      	pop	{r4, r5, pc}
    rcc_ex_clk_init_struct.PLL2.PLL2N = 344;
 800b45c:	f44f 75ac 	mov.w	r5, #344	; 0x158
    rcc_ex_clk_init_struct.PLL2.PLL2P = 7;
 800b460:	2407      	movs	r4, #7
 800b462:	e7e8      	b.n	800b436 <MX_SAI1_ClockConfig+0x2a>

0800b464 <BSP_AUDIO_OUT_Init>:
  if(Instance >= AUDIO_OUT_INSTANCES_NBR)
 800b464:	2801      	cmp	r0, #1
 800b466:	f200 80b4 	bhi.w	800b5d2 <BSP_AUDIO_OUT_Init+0x16e>
{
 800b46a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    Audio_Out_Ctx[Instance].Device         = AudioInit->Device;
 800b46e:	00c6      	lsls	r6, r0, #3
 800b470:	4689      	mov	r9, r1
 800b472:	4604      	mov	r4, r0
 800b474:	4d5a      	ldr	r5, [pc, #360]	; (800b5e0 <BSP_AUDIO_OUT_Init+0x17c>)
 800b476:	1833      	adds	r3, r6, r0
{
 800b478:	b091      	sub	sp, #68	; 0x44
    Audio_Out_Ctx[Instance].State          = AUDIO_OUT_STATE_RESET;
 800b47a:	2700      	movs	r7, #0
  if(WM8994_RegisterBusIO (&WM8994Obj, &IOCtx) != WM8994_OK)
 800b47c:	f8df a188 	ldr.w	sl, [pc, #392]	; 800b608 <BSP_AUDIO_OUT_Init+0x1a4>
    Audio_Out_Ctx[Instance].Device         = AudioInit->Device;
 800b480:	009b      	lsls	r3, r3, #2
    Audio_Out_Ctx[Instance].SampleRate     = AudioInit->SampleRate;
 800b482:	e9d1 0c00 	ldrd	r0, ip, [r1]
    Audio_Out_Ctx[Instance].Device         = AudioInit->Device;
 800b486:	18ea      	adds	r2, r5, r3
    Audio_Out_Ctx[Instance].BitsPerSample  = AudioInit->BitsPerSample;
 800b488:	6889      	ldr	r1, [r1, #8]
    Audio_Out_Ctx[Instance].Instance       = Instance;
 800b48a:	50ec      	str	r4, [r5, r3]
    Audio_Out_Ctx[Instance].ChannelsNbr    = AudioInit->ChannelsNbr;
 800b48c:	f8d9 300c 	ldr.w	r3, [r9, #12]
    Audio_Out_Ctx[Instance].Device         = AudioInit->Device;
 800b490:	6050      	str	r0, [r2, #4]
  IOCtx.Address     = AUDIO_I2C_ADDRESS;
 800b492:	2034      	movs	r0, #52	; 0x34
    Audio_Out_Ctx[Instance].ChannelsNbr    = AudioInit->ChannelsNbr;
 800b494:	6153      	str	r3, [r2, #20]
    Audio_Out_Ctx[Instance].Volume         = AudioInit->Volume;
 800b496:	f8d9 3010 	ldr.w	r3, [r9, #16]
    Audio_Out_Ctx[Instance].State          = AUDIO_OUT_STATE_RESET;
 800b49a:	61d7      	str	r7, [r2, #28]
    Audio_Out_Ctx[Instance].Volume         = AudioInit->Volume;
 800b49c:	6113      	str	r3, [r2, #16]
  IOCtx.Init        = BSP_I2C4_Init;
 800b49e:	4b51      	ldr	r3, [pc, #324]	; (800b5e4 <BSP_AUDIO_OUT_Init+0x180>)
  IOCtx.Address     = AUDIO_I2C_ADDRESS;
 800b4a0:	f8ad 001c 	strh.w	r0, [sp, #28]
  if(WM8994_RegisterBusIO (&WM8994Obj, &IOCtx) != WM8994_OK)
 800b4a4:	4650      	mov	r0, sl
  IOCtx.Init        = BSP_I2C4_Init;
 800b4a6:	9305      	str	r3, [sp, #20]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg16;
 800b4a8:	4b4f      	ldr	r3, [pc, #316]	; (800b5e8 <BSP_AUDIO_OUT_Init+0x184>)
    Audio_Out_Ctx[Instance].BitsPerSample  = AudioInit->BitsPerSample;
 800b4aa:	e9c2 c102 	strd	ip, r1, [r2, #8]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800b4ae:	4a4f      	ldr	r2, [pc, #316]	; (800b5ec <BSP_AUDIO_OUT_Init+0x188>)
  if(WM8994_RegisterBusIO (&WM8994Obj, &IOCtx) != WM8994_OK)
 800b4b0:	a905      	add	r1, sp, #20
  IOCtx.ReadReg     = BSP_I2C4_ReadReg16;
 800b4b2:	9309      	str	r3, [sp, #36]	; 0x24
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800b4b4:	9206      	str	r2, [sp, #24]
  IOCtx.GetTick     = BSP_GetTick;
 800b4b6:	4b4e      	ldr	r3, [pc, #312]	; (800b5f0 <BSP_AUDIO_OUT_Init+0x18c>)
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
 800b4b8:	4a4e      	ldr	r2, [pc, #312]	; (800b5f4 <BSP_AUDIO_OUT_Init+0x190>)
  IOCtx.GetTick     = BSP_GetTick;
 800b4ba:	930a      	str	r3, [sp, #40]	; 0x28
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
 800b4bc:	9208      	str	r2, [sp, #32]
  if(WM8994_RegisterBusIO (&WM8994Obj, &IOCtx) != WM8994_OK)
 800b4be:	f7ff fa7b 	bl	800a9b8 <WM8994_RegisterBusIO>
 800b4c2:	2800      	cmp	r0, #0
 800b4c4:	d17e      	bne.n	800b5c4 <BSP_AUDIO_OUT_Init+0x160>
    if(WM8994_Reset(&WM8994Obj) != WM8994_OK)
 800b4c6:	4650      	mov	r0, sl
 800b4c8:	f7fe fc0a 	bl	8009ce0 <WM8994_Reset>
 800b4cc:	2800      	cmp	r0, #0
 800b4ce:	d179      	bne.n	800b5c4 <BSP_AUDIO_OUT_Init+0x160>
    else if(WM8994_ReadID(&WM8994Obj, &id) != WM8994_OK)
 800b4d0:	4650      	mov	r0, sl
 800b4d2:	4669      	mov	r1, sp
 800b4d4:	f7fe fb68 	bl	8009ba8 <WM8994_ReadID>
 800b4d8:	2800      	cmp	r0, #0
 800b4da:	d173      	bne.n	800b5c4 <BSP_AUDIO_OUT_Init+0x160>
    else if(id != WM8994_ID)
 800b4dc:	9a00      	ldr	r2, [sp, #0]
 800b4de:	f648 1394 	movw	r3, #35220	; 0x8994
 800b4e2:	429a      	cmp	r2, r3
 800b4e4:	d16e      	bne.n	800b5c4 <BSP_AUDIO_OUT_Init+0x160>
      if(MX_SAI1_ClockConfig(&haudio_out_sai, AudioInit->SampleRate) != HAL_OK)
 800b4e6:	f8df b124 	ldr.w	fp, [pc, #292]	; 800b60c <BSP_AUDIO_OUT_Init+0x1a8>
      Audio_Drv = (AUDIO_Drv_t *) &WM8994_Driver;
 800b4ea:	4b43      	ldr	r3, [pc, #268]	; (800b5f8 <BSP_AUDIO_OUT_Init+0x194>)
 800b4ec:	f8df 8120 	ldr.w	r8, [pc, #288]	; 800b610 <BSP_AUDIO_OUT_Init+0x1ac>
      if(MX_SAI1_ClockConfig(&haudio_out_sai, AudioInit->SampleRate) != HAL_OK)
 800b4f0:	4658      	mov	r0, fp
      Audio_CompObj = &WM8994Obj;
 800b4f2:	4f42      	ldr	r7, [pc, #264]	; (800b5fc <BSP_AUDIO_OUT_Init+0x198>)
      if(MX_SAI1_ClockConfig(&haudio_out_sai, AudioInit->SampleRate) != HAL_OK)
 800b4f4:	f8d9 1004 	ldr.w	r1, [r9, #4]
      Audio_CompObj = &WM8994Obj;
 800b4f8:	f8c7 a000 	str.w	sl, [r7]
      Audio_Drv = (AUDIO_Drv_t *) &WM8994_Driver;
 800b4fc:	f8c8 3000 	str.w	r3, [r8]
      if(MX_SAI1_ClockConfig(&haudio_out_sai, AudioInit->SampleRate) != HAL_OK)
 800b500:	f7ff ff84 	bl	800b40c <MX_SAI1_ClockConfig>
 800b504:	4682      	mov	sl, r0
 800b506:	2800      	cmp	r0, #0
 800b508:	d166      	bne.n	800b5d8 <BSP_AUDIO_OUT_Init+0x174>
        haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 800b50a:	4b3d      	ldr	r3, [pc, #244]	; (800b600 <BSP_AUDIO_OUT_Init+0x19c>)
        SAI_MspInit(&haudio_out_sai);
 800b50c:	4658      	mov	r0, fp
        haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 800b50e:	f8cb 3000 	str.w	r3, [fp]
        SAI_MspInit(&haudio_out_sai);
 800b512:	f7ff fd31 	bl	800af78 <SAI_MspInit>
          mx_sai_config.MonoStereoMode    = (AudioInit->ChannelsNbr == 1U) ? SAI_MONOMODE : SAI_STEREOMODE;
 800b516:	f8d9 300c 	ldr.w	r3, [r9, #12]
          mx_sai_config.FrameLength       = 128;
 800b51a:	f04f 0e80 	mov.w	lr, #128	; 0x80
          mx_sai_config.DataSize          = (AudioInit->BitsPerSample == AUDIO_RESOLUTION_32B) ? SAI_DATASIZE_32 : SAI_DATASIZE_16;
 800b51e:	f8d9 2008 	ldr.w	r2, [r9, #8]
          mx_sai_config.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800b522:	f04f 0c01 	mov.w	ip, #1
          mx_sai_config.MonoStereoMode    = (AudioInit->ChannelsNbr == 1U) ? SAI_MONOMODE : SAI_STEREOMODE;
 800b526:	2b01      	cmp	r3, #1
          mx_sai_config.AudioMode         = SAI_MODEMASTER_TX;
 800b528:	f8cd a018 	str.w	sl, [sp, #24]
          mx_sai_config.Synchro           = SAI_ASYNCHRONOUS;
 800b52c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
          if(MX_SAI1_Block_A_Init(&haudio_out_sai, &mx_sai_config) != HAL_OK)
 800b530:	a905      	add	r1, sp, #20
          mx_sai_config.MonoStereoMode    = (AudioInit->ChannelsNbr == 1U) ? SAI_MONOMODE : SAI_STEREOMODE;
 800b532:	bf0c      	ite	eq
 800b534:	f44f 5380 	moveq.w	r3, #4096	; 0x1000
 800b538:	2300      	movne	r3, #0
          mx_sai_config.DataSize          = (AudioInit->BitsPerSample == AUDIO_RESOLUTION_32B) ? SAI_DATASIZE_32 : SAI_DATASIZE_16;
 800b53a:	2a20      	cmp	r2, #32
          mx_sai_config.SynchroExt        = SAI_SYNCEXT_DISABLE;
 800b53c:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
          mx_sai_config.MonoStereoMode    = (AudioInit->ChannelsNbr == 1U) ? SAI_MONOMODE : SAI_STEREOMODE;
 800b540:	9308      	str	r3, [sp, #32]
          mx_sai_config.ActiveFrameLength = 64;
 800b542:	f04f 0a40 	mov.w	sl, #64	; 0x40
          mx_sai_config.DataSize          = (AudioInit->BitsPerSample == AUDIO_RESOLUTION_32B) ? SAI_DATASIZE_32 : SAI_DATASIZE_16;
 800b546:	bf0c      	ite	eq
 800b548:	22e0      	moveq	r2, #224	; 0xe0
 800b54a:	4672      	movne	r2, lr
          mx_sai_config.AudioFrequency    = AudioInit->SampleRate;
 800b54c:	f8d9 3004 	ldr.w	r3, [r9, #4]
          if(MX_SAI1_Block_A_Init(&haudio_out_sai, &mx_sai_config) != HAL_OK)
 800b550:	4658      	mov	r0, fp
          mx_sai_config.DataSize          = (AudioInit->BitsPerSample == AUDIO_RESOLUTION_32B) ? SAI_DATASIZE_32 : SAI_DATASIZE_16;
 800b552:	9207      	str	r2, [sp, #28]
          mx_sai_config.OutputDrive       = SAI_OUTPUTDRIVE_ENABLE;
 800b554:	f44f 5200 	mov.w	r2, #8192	; 0x2000
          mx_sai_config.AudioFrequency    = AudioInit->SampleRate;
 800b558:	9305      	str	r3, [sp, #20]
          mx_sai_config.SlotActive        = CODEC_AUDIOFRAME_SLOT_02;
 800b55a:	2305      	movs	r3, #5
          mx_sai_config.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800b55c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
          mx_sai_config.OutputDrive       = SAI_OUTPUTDRIVE_ENABLE;
 800b560:	920b      	str	r2, [sp, #44]	; 0x2c
          mx_sai_config.SlotActive        = CODEC_AUDIOFRAME_SLOT_02;
 800b562:	930f      	str	r3, [sp, #60]	; 0x3c
          mx_sai_config.ActiveFrameLength = 64;
 800b564:	e9cd ea0d 	strd	lr, sl, [sp, #52]	; 0x34
          if(MX_SAI1_Block_A_Init(&haudio_out_sai, &mx_sai_config) != HAL_OK)
 800b568:	f7ff ff0e 	bl	800b388 <MX_SAI1_Block_A_Init>
 800b56c:	bb28      	cbnz	r0, 800b5ba <BSP_AUDIO_OUT_Init+0x156>
            codec_init.Resolution   = (AudioInit->BitsPerSample == AUDIO_RESOLUTION_32B) ? 3 : 0;
 800b56e:	f8d9 3008 	ldr.w	r3, [r9, #8]
            codec_init.InputDevice  = WM8994_IN_NONE;
 800b572:	9000      	str	r0, [sp, #0]
            codec_init.Resolution   = (AudioInit->BitsPerSample == AUDIO_RESOLUTION_32B) ? 3 : 0;
 800b574:	2b20      	cmp	r3, #32
            codec_init.Volume       = VOLUME_OUT_CONVERT(AudioInit->Volume);
 800b576:	f8d9 3010 	ldr.w	r3, [r9, #16]
            codec_init.OutputDevice = AudioInit->Device;
 800b57a:	e9d9 2100 	ldrd	r2, r1, [r9]
            codec_init.Resolution   = (AudioInit->BitsPerSample == AUDIO_RESOLUTION_32B) ? 3 : 0;
 800b57e:	bf0c      	ite	eq
 800b580:	2003      	moveq	r0, #3
 800b582:	2000      	movne	r0, #0
            codec_init.Volume       = VOLUME_OUT_CONVERT(AudioInit->Volume);
 800b584:	2b64      	cmp	r3, #100	; 0x64
            codec_init.OutputDevice = AudioInit->Device;
 800b586:	9201      	str	r2, [sp, #4]
            codec_init.Resolution   = (AudioInit->BitsPerSample == AUDIO_RESOLUTION_32B) ? 3 : 0;
 800b588:	e9cd 1002 	strd	r1, r0, [sp, #8]
            codec_init.Volume       = VOLUME_OUT_CONVERT(AudioInit->Volume);
 800b58c:	d81f      	bhi.n	800b5ce <BSP_AUDIO_OUT_Init+0x16a>
 800b58e:	ebc3 1383 	rsb	r3, r3, r3, lsl #6
 800b592:	4a1c      	ldr	r2, [pc, #112]	; (800b604 <BSP_AUDIO_OUT_Init+0x1a0>)
 800b594:	fba2 2303 	umull	r2, r3, r2, r3
 800b598:	095b      	lsrs	r3, r3, #5
            if(Audio_Drv->Init(Audio_CompObj, &codec_init) != 0)
 800b59a:	f8d8 2000 	ldr.w	r2, [r8]
 800b59e:	4669      	mov	r1, sp
            codec_init.Volume       = VOLUME_OUT_CONVERT(AudioInit->Volume);
 800b5a0:	9304      	str	r3, [sp, #16]
            if(Audio_Drv->Init(Audio_CompObj, &codec_init) != 0)
 800b5a2:	6838      	ldr	r0, [r7, #0]
 800b5a4:	6813      	ldr	r3, [r2, #0]
 800b5a6:	4798      	blx	r3
 800b5a8:	b960      	cbnz	r0, 800b5c4 <BSP_AUDIO_OUT_Init+0x160>
              Audio_Out_Ctx[Instance].State = AUDIO_OUT_STATE_STOP;
 800b5aa:	4434      	add	r4, r6
 800b5ac:	2302      	movs	r3, #2
 800b5ae:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 800b5b2:	61eb      	str	r3, [r5, #28]
}
 800b5b4:	b011      	add	sp, #68	; 0x44
 800b5b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ret = BSP_ERROR_PERIPH_FAILURE;
 800b5ba:	f06f 0003 	mvn.w	r0, #3
}
 800b5be:	b011      	add	sp, #68	; 0x44
 800b5c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
              ret = BSP_ERROR_COMPONENT_FAILURE;
 800b5c4:	f06f 0004 	mvn.w	r0, #4
}
 800b5c8:	b011      	add	sp, #68	; 0x44
 800b5ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            codec_init.Volume       = VOLUME_OUT_CONVERT(AudioInit->Volume);
 800b5ce:	233f      	movs	r3, #63	; 0x3f
 800b5d0:	e7e3      	b.n	800b59a <BSP_AUDIO_OUT_Init+0x136>
    ret = BSP_ERROR_WRONG_PARAM;
 800b5d2:	f06f 0001 	mvn.w	r0, #1
}
 800b5d6:	4770      	bx	lr
        ret = BSP_ERROR_CLOCK_FAILURE;
 800b5d8:	f06f 0008 	mvn.w	r0, #8
  return ret;
 800b5dc:	e7ea      	b.n	800b5b4 <BSP_AUDIO_OUT_Init+0x150>
 800b5de:	bf00      	nop
 800b5e0:	24008600 	.word	0x24008600
 800b5e4:	0800b7c9 	.word	0x0800b7c9
 800b5e8:	0800bfa5 	.word	0x0800bfa5
 800b5ec:	0800b735 	.word	0x0800b735
 800b5f0:	0800bfdd 	.word	0x0800bfdd
 800b5f4:	0800bf6d 	.word	0x0800bf6d
 800b5f8:	24007370 	.word	0x24007370
 800b5fc:	240085f8 	.word	0x240085f8
 800b600:	40015804 	.word	0x40015804
 800b604:	51eb851f 	.word	0x51eb851f
 800b608:	24008648 	.word	0x24008648
 800b60c:	2400a124 	.word	0x2400a124
 800b610:	240085fc 	.word	0x240085fc

0800b614 <BSP_AUDIO_OUT_Play>:
  if((Instance >= AUDIO_OUT_INSTANCES_NBR) || (((NbrOfBytes / (Audio_Out_Ctx[Instance].BitsPerSample/8U)) > 0xFFFFU)))
 800b614:	2801      	cmp	r0, #1
 800b616:	d822      	bhi.n	800b65e <BSP_AUDIO_OUT_Play+0x4a>
 800b618:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
{
 800b61c:	b510      	push	{r4, lr}
  if((Instance >= AUDIO_OUT_INSTANCES_NBR) || (((NbrOfBytes / (Audio_Out_Ctx[Instance].BitsPerSample/8U)) > 0xFFFFU)))
 800b61e:	4c16      	ldr	r4, [pc, #88]	; (800b678 <BSP_AUDIO_OUT_Play+0x64>)
 800b620:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800b624:	68e3      	ldr	r3, [r4, #12]
 800b626:	08db      	lsrs	r3, r3, #3
 800b628:	fbb2 f2f3 	udiv	r2, r2, r3
 800b62c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800b630:	d218      	bcs.n	800b664 <BSP_AUDIO_OUT_Play+0x50>
  else if((Audio_Out_Ctx[Instance].State == AUDIO_OUT_STATE_STOP) || (Audio_Out_Ctx[Instance].State == AUDIO_OUT_STATE_RESET))
 800b632:	69e3      	ldr	r3, [r4, #28]
 800b634:	f033 0302 	bics.w	r3, r3, #2
 800b638:	d10e      	bne.n	800b658 <BSP_AUDIO_OUT_Play+0x44>
    if(HAL_SAI_Transmit_DMA(&haudio_out_sai, pData, (uint16_t)(NbrOfBytes /(Audio_Out_Ctx[Instance].BitsPerSample/8U))) != HAL_OK)
 800b63a:	b292      	uxth	r2, r2
 800b63c:	480f      	ldr	r0, [pc, #60]	; (800b67c <BSP_AUDIO_OUT_Play+0x68>)
 800b63e:	f008 ffa9 	bl	8014594 <HAL_SAI_Transmit_DMA>
 800b642:	b9a8      	cbnz	r0, 800b670 <BSP_AUDIO_OUT_Play+0x5c>
      if(Audio_Drv->Play(Audio_CompObj) != BSP_ERROR_NONE)
 800b644:	4b0e      	ldr	r3, [pc, #56]	; (800b680 <BSP_AUDIO_OUT_Play+0x6c>)
 800b646:	4a0f      	ldr	r2, [pc, #60]	; (800b684 <BSP_AUDIO_OUT_Play+0x70>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	6810      	ldr	r0, [r2, #0]
 800b64c:	68db      	ldr	r3, [r3, #12]
 800b64e:	4798      	blx	r3
 800b650:	b958      	cbnz	r0, 800b66a <BSP_AUDIO_OUT_Play+0x56>
        Audio_Out_Ctx[Instance].State = AUDIO_OUT_STATE_PLAYING;
 800b652:	2301      	movs	r3, #1
 800b654:	61e3      	str	r3, [r4, #28]
}
 800b656:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_BUSY;
 800b658:	f06f 0002 	mvn.w	r0, #2
}
 800b65c:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800b65e:	f06f 0001 	mvn.w	r0, #1
}
 800b662:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 800b664:	f06f 0001 	mvn.w	r0, #1
}
 800b668:	bd10      	pop	{r4, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b66a:	f06f 0004 	mvn.w	r0, #4
}
 800b66e:	bd10      	pop	{r4, pc}
      ret = BSP_ERROR_PERIPH_FAILURE;
 800b670:	f06f 0003 	mvn.w	r0, #3
}
 800b674:	bd10      	pop	{r4, pc}
 800b676:	bf00      	nop
 800b678:	24008600 	.word	0x24008600
 800b67c:	2400a124 	.word	0x2400a124
 800b680:	240085fc 	.word	0x240085fc
 800b684:	240085f8 	.word	0x240085f8

0800b688 <BSP_AUDIO_OUT_Stop>:
  if(Instance >= AUDIO_OUT_INSTANCES_NBR)
 800b688:	2801      	cmp	r0, #1
{
 800b68a:	b538      	push	{r3, r4, r5, lr}
  if(Instance >= AUDIO_OUT_INSTANCES_NBR)
 800b68c:	d81a      	bhi.n	800b6c4 <BSP_AUDIO_OUT_Stop+0x3c>
  else if (Audio_Out_Ctx[Instance].State == AUDIO_OUT_STATE_PLAYING)
 800b68e:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800b692:	4c11      	ldr	r4, [pc, #68]	; (800b6d8 <BSP_AUDIO_OUT_Stop+0x50>)
 800b694:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800b698:	69e1      	ldr	r1, [r4, #28]
 800b69a:	2901      	cmp	r1, #1
 800b69c:	d118      	bne.n	800b6d0 <BSP_AUDIO_OUT_Stop+0x48>
    if(Audio_Drv->Stop(Audio_CompObj, CODEC_PDWN_SW) != BSP_ERROR_NONE)
 800b69e:	4b0f      	ldr	r3, [pc, #60]	; (800b6dc <BSP_AUDIO_OUT_Stop+0x54>)
 800b6a0:	4a0f      	ldr	r2, [pc, #60]	; (800b6e0 <BSP_AUDIO_OUT_Stop+0x58>)
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	6810      	ldr	r0, [r2, #0]
 800b6a6:	699b      	ldr	r3, [r3, #24]
 800b6a8:	4798      	blx	r3
 800b6aa:	4605      	mov	r5, r0
 800b6ac:	b938      	cbnz	r0, 800b6be <BSP_AUDIO_OUT_Stop+0x36>
      if(HAL_SAI_DMAStop(&haudio_out_sai)!= HAL_OK)
 800b6ae:	480d      	ldr	r0, [pc, #52]	; (800b6e4 <BSP_AUDIO_OUT_Stop+0x5c>)
 800b6b0:	f008 ff02 	bl	80144b8 <HAL_SAI_DMAStop>
 800b6b4:	b948      	cbnz	r0, 800b6ca <BSP_AUDIO_OUT_Stop+0x42>
        Audio_Out_Ctx[Instance].State = AUDIO_OUT_STATE_STOP;
 800b6b6:	2302      	movs	r3, #2
 800b6b8:	61e3      	str	r3, [r4, #28]
}
 800b6ba:	4628      	mov	r0, r5
 800b6bc:	bd38      	pop	{r3, r4, r5, pc}
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b6be:	f06f 0504 	mvn.w	r5, #4
 800b6c2:	e7fa      	b.n	800b6ba <BSP_AUDIO_OUT_Stop+0x32>
    ret = BSP_ERROR_WRONG_PARAM;
 800b6c4:	f06f 0501 	mvn.w	r5, #1
 800b6c8:	e7f7      	b.n	800b6ba <BSP_AUDIO_OUT_Stop+0x32>
        ret = BSP_ERROR_PERIPH_FAILURE;
 800b6ca:	f06f 0503 	mvn.w	r5, #3
  return ret;
 800b6ce:	e7f4      	b.n	800b6ba <BSP_AUDIO_OUT_Stop+0x32>
    ret = BSP_ERROR_BUSY;
 800b6d0:	f06f 0502 	mvn.w	r5, #2
 800b6d4:	e7f1      	b.n	800b6ba <BSP_AUDIO_OUT_Stop+0x32>
 800b6d6:	bf00      	nop
 800b6d8:	24008600 	.word	0x24008600
 800b6dc:	240085fc 	.word	0x240085fc
 800b6e0:	240085f8 	.word	0x240085f8
 800b6e4:	2400a124 	.word	0x2400a124

0800b6e8 <BSP_AUDIO_OUT_IRQHandler>:
  if (Instance == 0U)
 800b6e8:	b100      	cbz	r0, 800b6ec <BSP_AUDIO_OUT_IRQHandler+0x4>
}
 800b6ea:	4770      	bx	lr
    HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 800b6ec:	4b02      	ldr	r3, [pc, #8]	; (800b6f8 <BSP_AUDIO_OUT_IRQHandler+0x10>)
 800b6ee:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800b6f2:	f003 bccf 	b.w	800f094 <HAL_DMA_IRQHandler>
 800b6f6:	bf00      	nop
 800b6f8:	2400a124 	.word	0x2400a124

0800b6fc <HAL_SAI_TxCpltCallback>:
{
 800b6fc:	b508      	push	{r3, lr}
  BSP_AUDIO_OUT_TransferComplete_CallBack(0);
 800b6fe:	2000      	movs	r0, #0
 800b700:	f7f5 fab8 	bl	8000c74 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 800b704:	bd08      	pop	{r3, pc}
 800b706:	bf00      	nop

0800b708 <HAL_SAI_TxHalfCpltCallback>:
{
 800b708:	b508      	push	{r3, lr}
  BSP_AUDIO_OUT_HalfTransfer_CallBack(0);
 800b70a:	2000      	movs	r0, #0
 800b70c:	f7f5 fabe 	bl	8000c8c <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 800b710:	bd08      	pop	{r3, pc}
 800b712:	bf00      	nop

0800b714 <BSP_AUDIO_IN_Error_CallBack>:
 800b714:	4770      	bx	lr
 800b716:	bf00      	nop

0800b718 <HAL_SAI_ErrorCallback>:
  if(hsai->Instance == AUDIO_OUT_SAIx)
 800b718:	6802      	ldr	r2, [r0, #0]
  BSP_AUDIO_OUT_Error_CallBack(0);
 800b71a:	2000      	movs	r0, #0
{
 800b71c:	b508      	push	{r3, lr}
  if(hsai->Instance == AUDIO_OUT_SAIx)
 800b71e:	4b04      	ldr	r3, [pc, #16]	; (800b730 <HAL_SAI_ErrorCallback+0x18>)
 800b720:	429a      	cmp	r2, r3
 800b722:	d002      	beq.n	800b72a <HAL_SAI_ErrorCallback+0x12>
  BSP_AUDIO_IN_Error_CallBack(0);
 800b724:	f7ff fff6 	bl	800b714 <BSP_AUDIO_IN_Error_CallBack>
}
 800b728:	bd08      	pop	{r3, pc}
  BSP_AUDIO_OUT_Error_CallBack(0);
 800b72a:	f7f5 fabd 	bl	8000ca8 <BSP_AUDIO_OUT_Error_CallBack>
}
 800b72e:	bd08      	pop	{r3, pc}
 800b730:	40015804 	.word	0x40015804

0800b734 <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
 800b734:	4a10      	ldr	r2, [pc, #64]	; (800b778 <BSP_I2C4_DeInit+0x44>)
{
 800b736:	b508      	push	{r3, lr}
  I2c4InitCounter--;
 800b738:	6813      	ldr	r3, [r2, #0]
 800b73a:	3b01      	subs	r3, #1
 800b73c:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 800b73e:	b10b      	cbz	r3, 800b744 <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
 800b740:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
 800b742:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 800b744:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b748:	480c      	ldr	r0, [pc, #48]	; (800b77c <BSP_I2C4_DeInit+0x48>)
 800b74a:	f004 ff9b 	bl	8010684 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800b74e:	480b      	ldr	r0, [pc, #44]	; (800b77c <BSP_I2C4_DeInit+0x48>)
 800b750:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b754:	f004 ff96 	bl	8010684 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 800b758:	4a09      	ldr	r2, [pc, #36]	; (800b780 <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800b75a:	480a      	ldr	r0, [pc, #40]	; (800b784 <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
 800b75c:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
 800b760:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b764:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800b768:	f005 f97e 	bl	8010a68 <HAL_I2C_DeInit>
 800b76c:	2800      	cmp	r0, #0
 800b76e:	d0e7      	beq.n	800b740 <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
 800b770:	f06f 0007 	mvn.w	r0, #7
}
 800b774:	bd08      	pop	{r3, pc}
 800b776:	bf00      	nop
 800b778:	24008760 	.word	0x24008760
 800b77c:	58020c00 	.word	0x58020c00
 800b780:	58024400 	.word	0x58024400
 800b784:	2400a1bc 	.word	0x2400a1bc

0800b788 <MX_I2C4_Init>:
  hI2c->Init.OwnAddress1      = 0;
 800b788:	2300      	movs	r3, #0
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800b78a:	2201      	movs	r2, #1
{
 800b78c:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
 800b78e:	6041      	str	r1, [r0, #4]
{
 800b790:	4604      	mov	r4, r0
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800b792:	6203      	str	r3, [r0, #32]
  hI2c->Init.OwnAddress1      = 0;
 800b794:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
 800b798:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800b79c:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800b7a0:	f005 f90c 	bl	80109bc <HAL_I2C_Init>
 800b7a4:	b108      	cbz	r0, 800b7aa <MX_I2C4_Init+0x22>
    status = HAL_ERROR;
 800b7a6:	2001      	movs	r0, #1
}
 800b7a8:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 800b7aa:	4601      	mov	r1, r0
 800b7ac:	4620      	mov	r0, r4
 800b7ae:	f005 fbe7 	bl	8010f80 <HAL_I2CEx_ConfigAnalogFilter>
 800b7b2:	2800      	cmp	r0, #0
 800b7b4:	d1f7      	bne.n	800b7a6 <MX_I2C4_Init+0x1e>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 800b7b6:	4601      	mov	r1, r0
 800b7b8:	4620      	mov	r0, r4
 800b7ba:	f005 fc0b 	bl	8010fd4 <HAL_I2CEx_ConfigDigitalFilter>
    status = HAL_ERROR;
 800b7be:	3000      	adds	r0, #0
 800b7c0:	bf18      	it	ne
 800b7c2:	2001      	movne	r0, #1
}
 800b7c4:	bd10      	pop	{r4, pc}
 800b7c6:	bf00      	nop

0800b7c8 <BSP_I2C4_Init>:
  if (I2c4InitCounter == 0U)
 800b7c8:	4baa      	ldr	r3, [pc, #680]	; (800ba74 <BSP_I2C4_Init+0x2ac>)
  hbus_i2c4.Instance = BUS_I2C4;
 800b7ca:	48ab      	ldr	r0, [pc, #684]	; (800ba78 <BSP_I2C4_Init+0x2b0>)
  if (I2c4InitCounter == 0U)
 800b7cc:	681a      	ldr	r2, [r3, #0]
{
 800b7ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7d2:	b0a9      	sub	sp, #164	; 0xa4
  if (I2c4InitCounter == 0U)
 800b7d4:	4611      	mov	r1, r2
 800b7d6:	9203      	str	r2, [sp, #12]
  hbus_i2c4.Instance = BUS_I2C4;
 800b7d8:	4aa8      	ldr	r2, [pc, #672]	; (800ba7c <BSP_I2C4_Init+0x2b4>)
 800b7da:	6002      	str	r2, [r0, #0]
  if (I2c4InitCounter == 0U)
 800b7dc:	b119      	cbz	r1, 800b7e6 <BSP_I2C4_Init+0x1e>
  int32_t ret = BSP_ERROR_NONE;
 800b7de:	2000      	movs	r0, #0
}
 800b7e0:	b029      	add	sp, #164	; 0xa4
 800b7e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2c4InitCounter++;
 800b7e6:	2201      	movs	r2, #1
 800b7e8:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800b7ea:	f005 fbc3 	bl	8010f74 <HAL_I2C_GetState>
 800b7ee:	2800      	cmp	r0, #0
 800b7f0:	d1f5      	bne.n	800b7de <BSP_I2C4_Init+0x16>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800b7f2:	4ca3      	ldr	r4, [pc, #652]	; (800ba80 <BSP_I2C4_Init+0x2b8>)
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 800b7f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800b7f8:	9d03      	ldr	r5, [sp, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800b7fa:	2712      	movs	r7, #18
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800b7fc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800b800:	2602      	movs	r6, #2
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800b802:	f04f 0804 	mov.w	r8, #4
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800b806:	a923      	add	r1, sp, #140	; 0x8c
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800b808:	f043 0308 	orr.w	r3, r3, #8
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800b80c:	489d      	ldr	r0, [pc, #628]	; (800ba84 <BSP_I2C4_Init+0x2bc>)
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800b80e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800b812:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800b816:	f003 0308 	and.w	r3, r3, #8
 800b81a:	9320      	str	r3, [sp, #128]	; 0x80
 800b81c:	9b20      	ldr	r3, [sp, #128]	; 0x80
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800b81e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800b822:	f043 0308 	orr.w	r3, r3, #8
 800b826:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800b82a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800b82e:	9525      	str	r5, [sp, #148]	; 0x94
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800b830:	f003 0308 	and.w	r3, r3, #8
 800b834:	9321      	str	r3, [sp, #132]	; 0x84
 800b836:	9b21      	ldr	r3, [sp, #132]	; 0x84
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800b838:	e9cd 2723 	strd	r2, r7, [sp, #140]	; 0x8c
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800b83c:	e9cd 6826 	strd	r6, r8, [sp, #152]	; 0x98
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800b840:	f004 fe02 	bl	8010448 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800b844:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800b848:	a923      	add	r1, sp, #140	; 0x8c
 800b84a:	488e      	ldr	r0, [pc, #568]	; (800ba84 <BSP_I2C4_Init+0x2bc>)
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800b84c:	9323      	str	r3, [sp, #140]	; 0x8c
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800b84e:	9724      	str	r7, [sp, #144]	; 0x90
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800b850:	9525      	str	r5, [sp, #148]	; 0x94
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 800b852:	e9cd 6826 	strd	r6, r8, [sp, #152]	; 0x98
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800b856:	f004 fdf7 	bl	8010448 <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 800b85a:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 800b85e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b862:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 800b866:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 800b86a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b86e:	9322      	str	r3, [sp, #136]	; 0x88
 800b870:	9b22      	ldr	r3, [sp, #136]	; 0x88
  BUS_I2C4_FORCE_RESET();
 800b872:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800b876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b87a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  BUS_I2C4_RELEASE_RESET();
 800b87e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800b882:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b886:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800b88a:	f007 f8cf 	bl	8012a2c <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800b88e:	2800      	cmp	r0, #0
 800b890:	f000 8143 	beq.w	800bb1a <BSP_I2C4_Init+0x352>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800b894:	4c7c      	ldr	r4, [pc, #496]	; (800ba88 <BSP_I2C4_Init+0x2c0>)
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800b896:	46aa      	mov	sl, r5
 800b898:	4b7c      	ldr	r3, [pc, #496]	; (800ba8c <BSP_I2C4_Init+0x2c4>)
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800b89a:	f640 11f6 	movw	r1, #2550	; 0x9f6
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800b89e:	eb04 0450 	add.w	r4, r4, r0, lsr #1
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800b8a2:	f06f 0b1d 	mvn.w	fp, #29
 800b8a6:	681b      	ldr	r3, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800b8a8:	4a79      	ldr	r2, [pc, #484]	; (800ba90 <BSP_I2C4_Init+0x2c8>)
 800b8aa:	9306      	str	r3, [sp, #24]
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800b8ac:	fbb4 f0f0 	udiv	r0, r4, r0
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800b8b0:	fa00 f406 	lsl.w	r4, r0, r6
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800b8b4:	ea4f 0c40 	mov.w	ip, r0, lsl #1
 800b8b8:	ea4f 09c0 	mov.w	r9, r0, lsl #3
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800b8bc:	9001      	str	r0, [sp, #4]
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800b8be:	eb0c 0600 	add.w	r6, ip, r0
 800b8c2:	1823      	adds	r3, r4, r0
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800b8c4:	9414      	str	r4, [sp, #80]	; 0x50
 800b8c6:	1b09      	subs	r1, r1, r4
 800b8c8:	461d      	mov	r5, r3
 800b8ca:	00b3      	lsls	r3, r6, #2
 800b8cc:	eba9 0400 	sub.w	r4, r9, r0
 800b8d0:	eb09 0800 	add.w	r8, r9, r0
 800b8d4:	9517      	str	r5, [sp, #92]	; 0x5c
 800b8d6:	006d      	lsls	r5, r5, #1
 800b8d8:	931c      	str	r3, [sp, #112]	; 0x70
 800b8da:	00b3      	lsls	r3, r6, #2
 800b8dc:	9510      	str	r5, [sp, #64]	; 0x40
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800b8de:	4607      	mov	r7, r0
 800b8e0:	181d      	adds	r5, r3, r0
 800b8e2:	9415      	str	r4, [sp, #84]	; 0x54
 800b8e4:	0064      	lsls	r4, r4, #1
 800b8e6:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
 800b8ea:	9512      	str	r5, [sp, #72]	; 0x48
 800b8ec:	0075      	lsls	r5, r6, #1
 800b8ee:	9416      	str	r4, [sp, #88]	; 0x58
 800b8f0:	4644      	mov	r4, r8
 800b8f2:	951d      	str	r5, [sp, #116]	; 0x74
 800b8f4:	ebc0 1800 	rsb	r8, r0, r0, lsl #4
 800b8f8:	9d10      	ldr	r5, [sp, #64]	; 0x40
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800b8fa:	ebab 0b06 	sub.w	fp, fp, r6
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800b8fe:	9307      	str	r3, [sp, #28]
 800b900:	4405      	add	r5, r0
 800b902:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b904:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b906:	ea2b 7beb 	bic.w	fp, fp, fp, asr #31
 800b90a:	9518      	str	r5, [sp, #96]	; 0x60
 800b90c:	9505      	str	r5, [sp, #20]
 800b90e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800b910:	9008      	str	r0, [sp, #32]
 800b912:	9504      	str	r5, [sp, #16]
 800b914:	0075      	lsls	r5, r6, #1
 800b916:	9816      	ldr	r0, [sp, #88]	; 0x58
 800b918:	930d      	str	r3, [sp, #52]	; 0x34
 800b91a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b91c:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800b920:	46c8      	mov	r8, r9
 800b922:	950e      	str	r5, [sp, #56]	; 0x38
 800b924:	2510      	movs	r5, #16
 800b926:	9009      	str	r0, [sp, #36]	; 0x24
 800b928:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
 800b92c:	960c      	str	r6, [sp, #48]	; 0x30
 800b92e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b930:	9402      	str	r4, [sp, #8]
 800b932:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 800b936:	f8dd e050 	ldr.w	lr, [sp, #80]	; 0x50
 800b93a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b93c:	9906      	ldr	r1, [sp, #24]
 800b93e:	930a      	str	r3, [sp, #40]	; 0x28
 800b940:	4653      	mov	r3, sl
 800b942:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
 800b946:	e9cd 691e 	strd	r6, r9, [sp, #120]	; 0x78
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800b94a:	1c5c      	adds	r4, r3, #1
 800b94c:	46b9      	mov	r9, r7
 800b94e:	9706      	str	r7, [sp, #24]
 800b950:	941a      	str	r4, [sp, #104]	; 0x68
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800b952:	2400      	movs	r4, #0
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800b954:	1c66      	adds	r6, r4, #1
 800b956:	9619      	str	r6, [sp, #100]	; 0x64
      if (tscldel >= (uint32_t)tscldel_min)
 800b958:	f240 3679 	movw	r6, #889	; 0x379
 800b95c:	45b1      	cmp	r9, r6
 800b95e:	f200 80e6 	bhi.w	800bb2e <BSP_I2C4_Init+0x366>
 800b962:	9c06      	ldr	r4, [sp, #24]
 800b964:	44a1      	add	r9, r4
 800b966:	9c19      	ldr	r4, [sp, #100]	; 0x64
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800b968:	2c10      	cmp	r4, #16
 800b96a:	d1f3      	bne.n	800b954 <BSP_I2C4_Init+0x18c>
 800b96c:	9b01      	ldr	r3, [sp, #4]
 800b96e:	9f06      	ldr	r7, [sp, #24]
 800b970:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800b972:	441f      	add	r7, r3
 800b974:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b976:	4423      	add	r3, r4
 800b978:	9c16      	ldr	r4, [sp, #88]	; 0x58
 800b97a:	930a      	str	r3, [sp, #40]	; 0x28
 800b97c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b97e:	4423      	add	r3, r4
 800b980:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800b982:	9309      	str	r3, [sp, #36]	; 0x24
 800b984:	9b08      	ldr	r3, [sp, #32]
 800b986:	4423      	add	r3, r4
 800b988:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800b98a:	9308      	str	r3, [sp, #32]
 800b98c:	9b07      	ldr	r3, [sp, #28]
 800b98e:	4423      	add	r3, r4
 800b990:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800b992:	9307      	str	r3, [sp, #28]
 800b994:	9b05      	ldr	r3, [sp, #20]
 800b996:	4423      	add	r3, r4
 800b998:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800b99a:	9305      	str	r3, [sp, #20]
 800b99c:	9b04      	ldr	r3, [sp, #16]
 800b99e:	4423      	add	r3, r4
 800b9a0:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 800b9a2:	9304      	str	r3, [sp, #16]
 800b9a4:	9b02      	ldr	r3, [sp, #8]
 800b9a6:	4423      	add	r3, r4
 800b9a8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800b9aa:	9302      	str	r3, [sp, #8]
 800b9ac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b9ae:	4498      	add	r8, r3
 800b9b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b9b2:	4423      	add	r3, r4
 800b9b4:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800b9b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b9b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b9ba:	4423      	add	r3, r4
 800b9bc:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800b9be:	930e      	str	r3, [sp, #56]	; 0x38
 800b9c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b9c2:	4423      	add	r3, r4
 800b9c4:	930d      	str	r3, [sp, #52]	; 0x34
 800b9c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b9c8:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800b9ca:	449e      	add	lr, r3
 800b9cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b9ce:	4423      	add	r3, r4
 800b9d0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800b9d2:	930c      	str	r3, [sp, #48]	; 0x30
 800b9d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9d6:	4423      	add	r3, r4
 800b9d8:	930b      	str	r3, [sp, #44]	; 0x2c
 800b9da:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800b9dc:	2b10      	cmp	r3, #16
 800b9de:	d1b4      	bne.n	800b94a <BSP_I2C4_Init+0x182>
 800b9e0:	4a2a      	ldr	r2, [pc, #168]	; (800ba8c <BSP_I2C4_Init+0x2c4>)
 800b9e2:	46a4      	mov	ip, r4
 800b9e4:	9106      	str	r1, [sp, #24]
 800b9e6:	6011      	str	r1, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800b9e8:	2900      	cmp	r1, #0
 800b9ea:	f000 8096 	beq.w	800bb1a <BSP_I2C4_Init+0x352>
 800b9ee:	4b28      	ldr	r3, [pc, #160]	; (800ba90 <BSP_I2C4_Init+0x2c8>)
 800b9f0:	9307      	str	r3, [sp, #28]
 800b9f2:	f10c 0232 	add.w	r2, ip, #50	; 0x32
 800b9f6:	f640 769f 	movw	r6, #3999	; 0xf9f
 800b9fa:	4b26      	ldr	r3, [pc, #152]	; (800ba94 <BSP_I2C4_Init+0x2cc>)
  uint32_t prev_presc = I2C_PRESC_MAX;
 800b9fc:	f242 7810 	movw	r8, #10000	; 0x2710
 800ba00:	9208      	str	r2, [sp, #32]
 800ba02:	f04f 3bff 	mov.w	fp, #4294967295
 800ba06:	9a01      	ldr	r2, [sp, #4]
 800ba08:	4463      	add	r3, ip
 800ba0a:	f8df 9084 	ldr.w	r9, [pc, #132]	; 800ba90 <BSP_I2C4_Init+0x2c8>
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800ba0e:	f241 0747 	movw	r7, #4167	; 0x1047
 800ba12:	4296      	cmp	r6, r2
 800ba14:	9309      	str	r3, [sp, #36]	; 0x24
  uint32_t prev_presc = I2C_PRESC_MAX;
 800ba16:	f04f 0300 	mov.w	r3, #0
 800ba1a:	bf38      	it	cc
 800ba1c:	4616      	movcc	r6, r2
 800ba1e:	9304      	str	r3, [sp, #16]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800ba20:	9b01      	ldr	r3, [sp, #4]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800ba22:	f04f 0e00 	mov.w	lr, #0
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800ba26:	f8d9 4000 	ldr.w	r4, [r9]
 800ba2a:	fb04 3403 	mla	r4, r4, r3, r3
 800ba2e:	9b08      	ldr	r3, [sp, #32]
 800ba30:	eb03 0c04 	add.w	ip, r3, r4
 800ba34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba36:	4423      	add	r3, r4
 800ba38:	9305      	str	r3, [sp, #20]
 800ba3a:	e004      	b.n	800ba46 <BSP_I2C4_Init+0x27e>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800ba3c:	f5ba 7f80 	cmp.w	sl, #256	; 0x100
 800ba40:	44a4      	add	ip, r4
 800ba42:	46d6      	mov	lr, sl
 800ba44:	d046      	beq.n	800bad4 <BSP_I2C4_Init+0x30c>
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800ba46:	f241 225c 	movw	r2, #4700	; 0x125c
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800ba4a:	f10e 0a01 	add.w	sl, lr, #1
 800ba4e:	f1ac 0332 	sub.w	r3, ip, #50	; 0x32
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800ba52:	4594      	cmp	ip, r2
 800ba54:	d9f2      	bls.n	800ba3c <BSP_I2C4_Init+0x274>
 800ba56:	9a01      	ldr	r2, [sp, #4]
 800ba58:	ebb2 0f93 	cmp.w	r2, r3, lsr #2
 800ba5c:	d2ee      	bcs.n	800ba3c <BSP_I2C4_Init+0x274>
 800ba5e:	f641 55c7 	movw	r5, #7623	; 0x1dc7
 800ba62:	9a05      	ldr	r2, [sp, #20]
 800ba64:	f8cd c008 	str.w	ip, [sp, #8]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800ba68:	2100      	movs	r1, #0
 800ba6a:	4462      	add	r2, ip
 800ba6c:	1aed      	subs	r5, r5, r3
 800ba6e:	f8dd c010 	ldr.w	ip, [sp, #16]
 800ba72:	e016      	b.n	800baa2 <BSP_I2C4_Init+0x2da>
 800ba74:	24008760 	.word	0x24008760
 800ba78:	2400a1bc 	.word	0x2400a1bc
 800ba7c:	58001c00 	.word	0x58001c00
 800ba80:	58024400 	.word	0x58024400
 800ba84:	58020c00 	.word	0x58020c00
 800ba88:	3b9aca00 	.word	0x3b9aca00
 800ba8c:	24009164 	.word	0x24009164
 800ba90:	24008764 	.word	0x24008764
 800ba94:	ffffe239 	.word	0xffffe239
 800ba98:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800ba9c:	4601      	mov	r1, r0
 800ba9e:	4422      	add	r2, r4
 800baa0:	d015      	beq.n	800bace <BSP_I2C4_Init+0x306>
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800baa2:	18ab      	adds	r3, r5, r2
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800baa4:	1c48      	adds	r0, r1, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800baa6:	429e      	cmp	r6, r3
 800baa8:	d2f6      	bcs.n	800ba98 <BSP_I2C4_Init+0x2d0>
 800baaa:	42ba      	cmp	r2, r7
 800baac:	d8f4      	bhi.n	800ba98 <BSP_I2C4_Init+0x2d0>
            if ((uint32_t)error < prev_error)
 800baae:	f2a2 6383 	subw	r3, r2, #1667	; 0x683
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	bfb8      	it	lt
 800bab6:	425b      	neglt	r3, r3
 800bab8:	4598      	cmp	r8, r3
 800baba:	d9ed      	bls.n	800ba98 <BSP_I2C4_Init+0x2d0>
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800babc:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
              I2c_valid_timing[count].sclh = sclh;
 800bac0:	4698      	mov	r8, r3
 800bac2:	46e3      	mov	fp, ip
 800bac4:	4422      	add	r2, r4
 800bac6:	e9c9 1e03 	strd	r1, lr, [r9, #12]
 800baca:	4601      	mov	r1, r0
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800bacc:	d1e9      	bne.n	800baa2 <BSP_I2C4_Init+0x2da>
 800bace:	f8dd c008 	ldr.w	ip, [sp, #8]
 800bad2:	e7b3      	b.n	800ba3c <BSP_I2C4_Init+0x274>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800bad4:	9b04      	ldr	r3, [sp, #16]
 800bad6:	f109 0914 	add.w	r9, r9, #20
 800bada:	9a06      	ldr	r2, [sp, #24]
 800badc:	3301      	adds	r3, #1
 800bade:	4293      	cmp	r3, r2
 800bae0:	9304      	str	r3, [sp, #16]
 800bae2:	d19d      	bne.n	800ba20 <BSP_I2C4_Init+0x258>
        if (idx < I2C_VALID_TIMING_NBR)
 800bae4:	f1bb 0f7f 	cmp.w	fp, #127	; 0x7f
 800bae8:	d817      	bhi.n	800bb1a <BSP_I2C4_Init+0x352>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800baea:	eb0b 038b 	add.w	r3, fp, fp, lsl #2
 800baee:	9a07      	ldr	r2, [sp, #28]
 800baf0:	009b      	lsls	r3, r3, #2
 800baf2:	18d4      	adds	r4, r2, r3
 800baf4:	58d5      	ldr	r5, [r2, r3]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800baf6:	6862      	ldr	r2, [r4, #4]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800baf8:	7c23      	ldrb	r3, [r4, #16]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800bafa:	0510      	lsls	r0, r2, #20
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800bafc:	68a1      	ldr	r1, [r4, #8]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800bafe:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800bb02:	68e2      	ldr	r2, [r4, #12]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800bb04:	f400 0070 	and.w	r0, r0, #15728640	; 0xf00000
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800bb08:	0409      	lsls	r1, r1, #16
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800bb0a:	0212      	lsls	r2, r2, #8
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800bb0c:	4303      	orrs	r3, r0
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800bb0e:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800bb12:	b292      	uxth	r2, r2
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800bb14:	430b      	orrs	r3, r1
 800bb16:	4313      	orrs	r3, r2
 800bb18:	9303      	str	r3, [sp, #12]
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800bb1a:	9903      	ldr	r1, [sp, #12]
 800bb1c:	4879      	ldr	r0, [pc, #484]	; (800bd04 <BSP_I2C4_Init+0x53c>)
 800bb1e:	f7ff fe33 	bl	800b788 <MX_I2C4_Init>
 800bb22:	2800      	cmp	r0, #0
 800bb24:	f43f ae5b 	beq.w	800b7de <BSP_I2C4_Init+0x16>
          ret = BSP_ERROR_BUS_FAILURE;
 800bb28:	f06f 0007 	mvn.w	r0, #7
  return ret;
 800bb2c:	e658      	b.n	800b7e0 <BSP_I2C4_Init+0x18>
            if(presc != prev_presc)
 800bb2e:	42ab      	cmp	r3, r5
 800bb30:	f000 80ea 	beq.w	800bd08 <BSP_I2C4_Init+0x540>
 800bb34:	f1bb 0f00 	cmp.w	fp, #0
 800bb38:	f040 80e6 	bne.w	800bd08 <BSP_I2C4_Init+0x540>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bb3c:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
              I2c_valid_timing_nbr ++;
 800bb40:	3101      	adds	r1, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800bb42:	2700      	movs	r7, #0
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bb44:	4615      	mov	r5, r2
 800bb46:	eb02 068c 	add.w	r6, r2, ip, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bb4a:	297f      	cmp	r1, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bb4c:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800bb50:	6074      	str	r4, [r6, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800bb52:	60b7      	str	r7, [r6, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bb54:	f200 81c9 	bhi.w	800beea <BSP_I2C4_Init+0x722>
 800bb58:	461d      	mov	r5, r3
            if(presc != prev_presc)
 800bb5a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800bb5c:	45b3      	cmp	fp, r6
 800bb5e:	4637      	mov	r7, r6
 800bb60:	bf8c      	ite	hi
 800bb62:	2700      	movhi	r7, #0
 800bb64:	2701      	movls	r7, #1
 800bb66:	42b0      	cmp	r0, r6
 800bb68:	bf38      	it	cc
 800bb6a:	2700      	movcc	r7, #0
 800bb6c:	2f00      	cmp	r7, #0
 800bb6e:	f000 80ea 	beq.w	800bd46 <BSP_I2C4_Init+0x57e>
 800bb72:	42ab      	cmp	r3, r5
 800bb74:	f000 80e7 	beq.w	800bd46 <BSP_I2C4_Init+0x57e>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bb78:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
              I2c_valid_timing_nbr ++;
 800bb7c:	3101      	adds	r1, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800bb7e:	f04f 0a02 	mov.w	sl, #2
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bb82:	4615      	mov	r5, r2
 800bb84:	eb02 068c 	add.w	r6, r2, ip, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bb88:	297f      	cmp	r1, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bb8a:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800bb8e:	e9c6 4a01 	strd	r4, sl, [r6, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bb92:	f200 81aa 	bhi.w	800beea <BSP_I2C4_Init+0x722>
 800bb96:	461d      	mov	r5, r3
            if(presc != prev_presc)
 800bb98:	45f3      	cmp	fp, lr
 800bb9a:	bf8c      	ite	hi
 800bb9c:	2600      	movhi	r6, #0
 800bb9e:	2601      	movls	r6, #1
 800bba0:	4570      	cmp	r0, lr
 800bba2:	bf38      	it	cc
 800bba4:	2600      	movcc	r6, #0
 800bba6:	2e00      	cmp	r6, #0
 800bba8:	f000 80ec 	beq.w	800bd84 <BSP_I2C4_Init+0x5bc>
 800bbac:	42ab      	cmp	r3, r5
 800bbae:	f000 80e9 	beq.w	800bd84 <BSP_I2C4_Init+0x5bc>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bbb2:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
              I2c_valid_timing_nbr ++;
 800bbb6:	3101      	adds	r1, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800bbb8:	f04f 0a04 	mov.w	sl, #4
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bbbc:	4615      	mov	r5, r2
 800bbbe:	eb02 068c 	add.w	r6, r2, ip, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bbc2:	297f      	cmp	r1, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bbc4:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800bbc8:	e9c6 4a01 	strd	r4, sl, [r6, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bbcc:	f200 818d 	bhi.w	800beea <BSP_I2C4_Init+0x722>
 800bbd0:	461d      	mov	r5, r3
            if(presc != prev_presc)
 800bbd2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800bbd4:	45bb      	cmp	fp, r7
 800bbd6:	463e      	mov	r6, r7
 800bbd8:	bf8c      	ite	hi
 800bbda:	2600      	movhi	r6, #0
 800bbdc:	2601      	movls	r6, #1
 800bbde:	42b8      	cmp	r0, r7
 800bbe0:	bf38      	it	cc
 800bbe2:	2600      	movcc	r6, #0
 800bbe4:	2e00      	cmp	r6, #0
 800bbe6:	f000 80ec 	beq.w	800bdc2 <BSP_I2C4_Init+0x5fa>
 800bbea:	42ab      	cmp	r3, r5
 800bbec:	f000 80e9 	beq.w	800bdc2 <BSP_I2C4_Init+0x5fa>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bbf0:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
              I2c_valid_timing_nbr ++;
 800bbf4:	3101      	adds	r1, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800bbf6:	f04f 0a06 	mov.w	sl, #6
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bbfa:	4615      	mov	r5, r2
 800bbfc:	eb02 068c 	add.w	r6, r2, ip, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bc00:	297f      	cmp	r1, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bc02:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800bc06:	e9c6 4a01 	strd	r4, sl, [r6, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bc0a:	f200 816e 	bhi.w	800beea <BSP_I2C4_Init+0x722>
 800bc0e:	461d      	mov	r5, r3
            if(presc != prev_presc)
 800bc10:	45c3      	cmp	fp, r8
 800bc12:	bf8c      	ite	hi
 800bc14:	2600      	movhi	r6, #0
 800bc16:	2601      	movls	r6, #1
 800bc18:	4540      	cmp	r0, r8
 800bc1a:	bf38      	it	cc
 800bc1c:	2600      	movcc	r6, #0
 800bc1e:	2e00      	cmp	r6, #0
 800bc20:	f000 80ed 	beq.w	800bdfe <BSP_I2C4_Init+0x636>
 800bc24:	42ab      	cmp	r3, r5
 800bc26:	f000 80ea 	beq.w	800bdfe <BSP_I2C4_Init+0x636>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bc2a:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
              I2c_valid_timing_nbr ++;
 800bc2e:	3101      	adds	r1, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800bc30:	f04f 0a08 	mov.w	sl, #8
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bc34:	4615      	mov	r5, r2
 800bc36:	eb02 068c 	add.w	r6, r2, ip, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bc3a:	297f      	cmp	r1, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bc3c:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800bc40:	e9c6 4a01 	strd	r4, sl, [r6, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bc44:	f200 8151 	bhi.w	800beea <BSP_I2C4_Init+0x722>
 800bc48:	461d      	mov	r5, r3
            if(presc != prev_presc)
 800bc4a:	9f04      	ldr	r7, [sp, #16]
 800bc4c:	455f      	cmp	r7, fp
 800bc4e:	463e      	mov	r6, r7
 800bc50:	bf34      	ite	cc
 800bc52:	2600      	movcc	r6, #0
 800bc54:	2601      	movcs	r6, #1
 800bc56:	4287      	cmp	r7, r0
 800bc58:	bf88      	it	hi
 800bc5a:	2600      	movhi	r6, #0
 800bc5c:	2e00      	cmp	r6, #0
 800bc5e:	f000 80ec 	beq.w	800be3a <BSP_I2C4_Init+0x672>
 800bc62:	42ab      	cmp	r3, r5
 800bc64:	f000 80e9 	beq.w	800be3a <BSP_I2C4_Init+0x672>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bc68:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
              I2c_valid_timing_nbr ++;
 800bc6c:	3101      	adds	r1, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800bc6e:	270a      	movs	r7, #10
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bc70:	4615      	mov	r5, r2
 800bc72:	eb02 068c 	add.w	r6, r2, ip, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bc76:	297f      	cmp	r1, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bc78:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800bc7c:	6074      	str	r4, [r6, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800bc7e:	60b7      	str	r7, [r6, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bc80:	f200 8133 	bhi.w	800beea <BSP_I2C4_Init+0x722>
 800bc84:	461d      	mov	r5, r3
            if(presc != prev_presc)
 800bc86:	9f07      	ldr	r7, [sp, #28]
 800bc88:	45bb      	cmp	fp, r7
 800bc8a:	463e      	mov	r6, r7
 800bc8c:	bf8c      	ite	hi
 800bc8e:	2600      	movhi	r6, #0
 800bc90:	2601      	movls	r6, #1
 800bc92:	42b8      	cmp	r0, r7
 800bc94:	bf38      	it	cc
 800bc96:	2600      	movcc	r6, #0
 800bc98:	2e00      	cmp	r6, #0
 800bc9a:	f000 80eb 	beq.w	800be74 <BSP_I2C4_Init+0x6ac>
 800bc9e:	42ab      	cmp	r3, r5
 800bca0:	f000 80e8 	beq.w	800be74 <BSP_I2C4_Init+0x6ac>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bca4:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
              I2c_valid_timing_nbr ++;
 800bca8:	3101      	adds	r1, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800bcaa:	270c      	movs	r7, #12
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bcac:	4615      	mov	r5, r2
 800bcae:	eb02 068c 	add.w	r6, r2, ip, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bcb2:	297f      	cmp	r1, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bcb4:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800bcb8:	6074      	str	r4, [r6, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800bcba:	60b7      	str	r7, [r6, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bcbc:	f200 8115 	bhi.w	800beea <BSP_I2C4_Init+0x722>
 800bcc0:	461d      	mov	r5, r3
            if(presc != prev_presc)
 800bcc2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800bcc4:	45bb      	cmp	fp, r7
 800bcc6:	463e      	mov	r6, r7
 800bcc8:	bf8c      	ite	hi
 800bcca:	2600      	movhi	r6, #0
 800bccc:	2601      	movls	r6, #1
 800bcce:	42b8      	cmp	r0, r7
 800bcd0:	bf38      	it	cc
 800bcd2:	2600      	movcc	r6, #0
 800bcd4:	2e00      	cmp	r6, #0
 800bcd6:	f000 80ea 	beq.w	800beae <BSP_I2C4_Init+0x6e6>
 800bcda:	42ab      	cmp	r3, r5
 800bcdc:	f000 80e7 	beq.w	800beae <BSP_I2C4_Init+0x6e6>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bce0:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
              I2c_valid_timing_nbr ++;
 800bce4:	3101      	adds	r1, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bce6:	4615      	mov	r5, r2
 800bce8:	eb02 068c 	add.w	r6, r2, ip, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bcec:	297f      	cmp	r1, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bcee:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800bcf2:	6074      	str	r4, [r6, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800bcf4:	f04f 040e 	mov.w	r4, #14
 800bcf8:	60b4      	str	r4, [r6, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bcfa:	f200 80f6 	bhi.w	800beea <BSP_I2C4_Init+0x722>
 800bcfe:	461d      	mov	r5, r3
 800bd00:	e62f      	b.n	800b962 <BSP_I2C4_Init+0x19a>
 800bd02:	bf00      	nop
 800bd04:	2400a1bc 	.word	0x2400a1bc
            if(presc != prev_presc)
 800bd08:	9f06      	ldr	r7, [sp, #24]
 800bd0a:	45bb      	cmp	fp, r7
 800bd0c:	463e      	mov	r6, r7
 800bd0e:	bf8c      	ite	hi
 800bd10:	2600      	movhi	r6, #0
 800bd12:	2601      	movls	r6, #1
 800bd14:	42b8      	cmp	r0, r7
 800bd16:	bf38      	it	cc
 800bd18:	2600      	movcc	r6, #0
 800bd1a:	2e00      	cmp	r6, #0
 800bd1c:	f43f af1d 	beq.w	800bb5a <BSP_I2C4_Init+0x392>
 800bd20:	42ab      	cmp	r3, r5
 800bd22:	f43f af1a 	beq.w	800bb5a <BSP_I2C4_Init+0x392>
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800bd26:	f04f 0a01 	mov.w	sl, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bd2a:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 800bd2e:	4615      	mov	r5, r2
              I2c_valid_timing_nbr ++;
 800bd30:	4451      	add	r1, sl
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bd32:	eb02 068c 	add.w	r6, r2, ip, lsl #2
 800bd36:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bd3a:	297f      	cmp	r1, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800bd3c:	e9c6 4a01 	strd	r4, sl, [r6, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bd40:	f200 80d3 	bhi.w	800beea <BSP_I2C4_Init+0x722>
 800bd44:	461d      	mov	r5, r3
            if(presc != prev_presc)
 800bd46:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800bd48:	45bb      	cmp	fp, r7
 800bd4a:	463e      	mov	r6, r7
 800bd4c:	bf8c      	ite	hi
 800bd4e:	2600      	movhi	r6, #0
 800bd50:	2601      	movls	r6, #1
 800bd52:	42b8      	cmp	r0, r7
 800bd54:	bf38      	it	cc
 800bd56:	2600      	movcc	r6, #0
 800bd58:	2e00      	cmp	r6, #0
 800bd5a:	f43f af1d 	beq.w	800bb98 <BSP_I2C4_Init+0x3d0>
 800bd5e:	42ab      	cmp	r3, r5
 800bd60:	f43f af1a 	beq.w	800bb98 <BSP_I2C4_Init+0x3d0>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bd64:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
              I2c_valid_timing_nbr ++;
 800bd68:	3101      	adds	r1, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800bd6a:	f04f 0a03 	mov.w	sl, #3
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bd6e:	4615      	mov	r5, r2
 800bd70:	eb02 068c 	add.w	r6, r2, ip, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bd74:	297f      	cmp	r1, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bd76:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800bd7a:	e9c6 4a01 	strd	r4, sl, [r6, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bd7e:	f200 80b4 	bhi.w	800beea <BSP_I2C4_Init+0x722>
 800bd82:	461d      	mov	r5, r3
            if(presc != prev_presc)
 800bd84:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800bd86:	45bb      	cmp	fp, r7
 800bd88:	463e      	mov	r6, r7
 800bd8a:	bf8c      	ite	hi
 800bd8c:	2600      	movhi	r6, #0
 800bd8e:	2601      	movls	r6, #1
 800bd90:	42b8      	cmp	r0, r7
 800bd92:	bf38      	it	cc
 800bd94:	2600      	movcc	r6, #0
 800bd96:	2e00      	cmp	r6, #0
 800bd98:	f43f af1b 	beq.w	800bbd2 <BSP_I2C4_Init+0x40a>
 800bd9c:	42ab      	cmp	r3, r5
 800bd9e:	f43f af18 	beq.w	800bbd2 <BSP_I2C4_Init+0x40a>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bda2:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
              I2c_valid_timing_nbr ++;
 800bda6:	3101      	adds	r1, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800bda8:	f04f 0a05 	mov.w	sl, #5
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bdac:	4615      	mov	r5, r2
 800bdae:	eb02 068c 	add.w	r6, r2, ip, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bdb2:	297f      	cmp	r1, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bdb4:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800bdb8:	e9c6 4a01 	strd	r4, sl, [r6, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bdbc:	f200 8095 	bhi.w	800beea <BSP_I2C4_Init+0x722>
 800bdc0:	461d      	mov	r5, r3
            if(presc != prev_presc)
 800bdc2:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800bdc4:	45bb      	cmp	fp, r7
 800bdc6:	463e      	mov	r6, r7
 800bdc8:	bf8c      	ite	hi
 800bdca:	2600      	movhi	r6, #0
 800bdcc:	2601      	movls	r6, #1
 800bdce:	42b8      	cmp	r0, r7
 800bdd0:	bf38      	it	cc
 800bdd2:	2600      	movcc	r6, #0
 800bdd4:	2e00      	cmp	r6, #0
 800bdd6:	f43f af1b 	beq.w	800bc10 <BSP_I2C4_Init+0x448>
 800bdda:	42ab      	cmp	r3, r5
 800bddc:	f43f af18 	beq.w	800bc10 <BSP_I2C4_Init+0x448>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bde0:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
              I2c_valid_timing_nbr ++;
 800bde4:	3101      	adds	r1, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800bde6:	f04f 0a07 	mov.w	sl, #7
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bdea:	4615      	mov	r5, r2
 800bdec:	eb02 068c 	add.w	r6, r2, ip, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bdf0:	297f      	cmp	r1, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bdf2:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800bdf6:	e9c6 4a01 	strd	r4, sl, [r6, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bdfa:	d876      	bhi.n	800beea <BSP_I2C4_Init+0x722>
 800bdfc:	461d      	mov	r5, r3
            if(presc != prev_presc)
 800bdfe:	9f02      	ldr	r7, [sp, #8]
 800be00:	455f      	cmp	r7, fp
 800be02:	463e      	mov	r6, r7
 800be04:	bf34      	ite	cc
 800be06:	2600      	movcc	r6, #0
 800be08:	2601      	movcs	r6, #1
 800be0a:	4287      	cmp	r7, r0
 800be0c:	bf88      	it	hi
 800be0e:	2600      	movhi	r6, #0
 800be10:	2e00      	cmp	r6, #0
 800be12:	f43f af1a 	beq.w	800bc4a <BSP_I2C4_Init+0x482>
 800be16:	42ab      	cmp	r3, r5
 800be18:	f43f af17 	beq.w	800bc4a <BSP_I2C4_Init+0x482>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800be1c:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
              I2c_valid_timing_nbr ++;
 800be20:	3101      	adds	r1, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800be22:	f04f 0a09 	mov.w	sl, #9
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800be26:	4615      	mov	r5, r2
 800be28:	eb02 068c 	add.w	r6, r2, ip, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800be2c:	297f      	cmp	r1, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800be2e:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800be32:	e9c6 4a01 	strd	r4, sl, [r6, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800be36:	d858      	bhi.n	800beea <BSP_I2C4_Init+0x722>
 800be38:	461d      	mov	r5, r3
            if(presc != prev_presc)
 800be3a:	9f05      	ldr	r7, [sp, #20]
 800be3c:	455f      	cmp	r7, fp
 800be3e:	463e      	mov	r6, r7
 800be40:	bf34      	ite	cc
 800be42:	2600      	movcc	r6, #0
 800be44:	2601      	movcs	r6, #1
 800be46:	4287      	cmp	r7, r0
 800be48:	bf88      	it	hi
 800be4a:	2600      	movhi	r6, #0
 800be4c:	2e00      	cmp	r6, #0
 800be4e:	f43f af1a 	beq.w	800bc86 <BSP_I2C4_Init+0x4be>
 800be52:	42ab      	cmp	r3, r5
 800be54:	f43f af17 	beq.w	800bc86 <BSP_I2C4_Init+0x4be>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800be58:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
              I2c_valid_timing_nbr ++;
 800be5c:	3101      	adds	r1, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800be5e:	270b      	movs	r7, #11
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800be60:	4615      	mov	r5, r2
 800be62:	eb02 068c 	add.w	r6, r2, ip, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800be66:	297f      	cmp	r1, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800be68:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800be6c:	6074      	str	r4, [r6, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800be6e:	60b7      	str	r7, [r6, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800be70:	d83b      	bhi.n	800beea <BSP_I2C4_Init+0x722>
 800be72:	461d      	mov	r5, r3
            if(presc != prev_presc)
 800be74:	9f08      	ldr	r7, [sp, #32]
 800be76:	45bb      	cmp	fp, r7
 800be78:	463e      	mov	r6, r7
 800be7a:	bf8c      	ite	hi
 800be7c:	2600      	movhi	r6, #0
 800be7e:	2601      	movls	r6, #1
 800be80:	42b8      	cmp	r0, r7
 800be82:	bf38      	it	cc
 800be84:	2600      	movcc	r6, #0
 800be86:	2e00      	cmp	r6, #0
 800be88:	f43f af1b 	beq.w	800bcc2 <BSP_I2C4_Init+0x4fa>
 800be8c:	42ab      	cmp	r3, r5
 800be8e:	f43f af18 	beq.w	800bcc2 <BSP_I2C4_Init+0x4fa>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800be92:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
              I2c_valid_timing_nbr ++;
 800be96:	3101      	adds	r1, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800be98:	270d      	movs	r7, #13
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800be9a:	4615      	mov	r5, r2
 800be9c:	eb02 068c 	add.w	r6, r2, ip, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bea0:	297f      	cmp	r1, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bea2:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800bea6:	6074      	str	r4, [r6, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800bea8:	60b7      	str	r7, [r6, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800beaa:	d81e      	bhi.n	800beea <BSP_I2C4_Init+0x722>
 800beac:	461d      	mov	r5, r3
            if(presc != prev_presc)
 800beae:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800beb0:	45bb      	cmp	fp, r7
 800beb2:	463e      	mov	r6, r7
 800beb4:	bf8c      	ite	hi
 800beb6:	2600      	movhi	r6, #0
 800beb8:	2601      	movls	r6, #1
 800beba:	42b8      	cmp	r0, r7
 800bebc:	bf38      	it	cc
 800bebe:	2600      	movcc	r6, #0
 800bec0:	2e00      	cmp	r6, #0
 800bec2:	f43f ad4e 	beq.w	800b962 <BSP_I2C4_Init+0x19a>
 800bec6:	42ab      	cmp	r3, r5
 800bec8:	f43f ad4b 	beq.w	800b962 <BSP_I2C4_Init+0x19a>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800becc:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
              I2c_valid_timing_nbr ++;
 800bed0:	3101      	adds	r1, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800bed2:	4615      	mov	r5, r2
 800bed4:	eb02 068c 	add.w	r6, r2, ip, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bed8:	297f      	cmp	r1, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800beda:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800bede:	6074      	str	r4, [r6, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800bee0:	f04f 040f 	mov.w	r4, #15
 800bee4:	60b4      	str	r4, [r6, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800bee6:	f67f af0a 	bls.w	800bcfe <BSP_I2C4_Init+0x536>
 800beea:	4b03      	ldr	r3, [pc, #12]	; (800bef8 <BSP_I2C4_Init+0x730>)
 800beec:	9106      	str	r1, [sp, #24]
 800beee:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 800bef2:	9507      	str	r5, [sp, #28]
 800bef4:	6019      	str	r1, [r3, #0]
 800bef6:	e57c      	b.n	800b9f2 <BSP_I2C4_Init+0x22a>
 800bef8:	24009164 	.word	0x24009164

0800befc <BSP_I2C4_WriteReg>:
{
 800befc:	b510      	push	{r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800befe:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
 800bf02:	b084      	sub	sp, #16
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800bf04:	e9cd 2300 	strd	r2, r3, [sp]
 800bf08:	9402      	str	r4, [sp, #8]
 800bf0a:	460a      	mov	r2, r1
 800bf0c:	2301      	movs	r3, #1
 800bf0e:	4601      	mov	r1, r0
 800bf10:	4807      	ldr	r0, [pc, #28]	; (800bf30 <BSP_I2C4_WriteReg+0x34>)
 800bf12:	f004 fdc3 	bl	8010a9c <HAL_I2C_Mem_Write>
 800bf16:	b140      	cbz	r0, 800bf2a <BSP_I2C4_WriteReg+0x2e>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800bf18:	4805      	ldr	r0, [pc, #20]	; (800bf30 <BSP_I2C4_WriteReg+0x34>)
 800bf1a:	f005 f82f 	bl	8010f7c <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800bf1e:	2804      	cmp	r0, #4
 800bf20:	bf0c      	ite	eq
 800bf22:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 800bf26:	f06f 0003 	mvnne.w	r0, #3
}
 800bf2a:	b004      	add	sp, #16
 800bf2c:	bd10      	pop	{r4, pc}
 800bf2e:	bf00      	nop
 800bf30:	2400a1bc 	.word	0x2400a1bc

0800bf34 <BSP_I2C4_ReadReg>:
{
 800bf34:	b510      	push	{r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800bf36:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
 800bf3a:	b084      	sub	sp, #16
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800bf3c:	e9cd 2300 	strd	r2, r3, [sp]
 800bf40:	9402      	str	r4, [sp, #8]
 800bf42:	460a      	mov	r2, r1
 800bf44:	2301      	movs	r3, #1
 800bf46:	4601      	mov	r1, r0
 800bf48:	4807      	ldr	r0, [pc, #28]	; (800bf68 <BSP_I2C4_ReadReg+0x34>)
 800bf4a:	f004 fed7 	bl	8010cfc <HAL_I2C_Mem_Read>
 800bf4e:	b140      	cbz	r0, 800bf62 <BSP_I2C4_ReadReg+0x2e>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800bf50:	4805      	ldr	r0, [pc, #20]	; (800bf68 <BSP_I2C4_ReadReg+0x34>)
 800bf52:	f005 f813 	bl	8010f7c <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800bf56:	2804      	cmp	r0, #4
 800bf58:	bf0c      	ite	eq
 800bf5a:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 800bf5e:	f06f 0003 	mvnne.w	r0, #3
}
 800bf62:	b004      	add	sp, #16
 800bf64:	bd10      	pop	{r4, pc}
 800bf66:	bf00      	nop
 800bf68:	2400a1bc 	.word	0x2400a1bc

0800bf6c <BSP_I2C4_WriteReg16>:
{
 800bf6c:	b510      	push	{r4, lr}
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800bf6e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
 800bf72:	b084      	sub	sp, #16
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800bf74:	e9cd 2300 	strd	r2, r3, [sp]
 800bf78:	9402      	str	r4, [sp, #8]
 800bf7a:	460a      	mov	r2, r1
 800bf7c:	2302      	movs	r3, #2
 800bf7e:	4601      	mov	r1, r0
 800bf80:	4807      	ldr	r0, [pc, #28]	; (800bfa0 <BSP_I2C4_WriteReg16+0x34>)
 800bf82:	f004 fd8b 	bl	8010a9c <HAL_I2C_Mem_Write>
 800bf86:	b140      	cbz	r0, 800bf9a <BSP_I2C4_WriteReg16+0x2e>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800bf88:	4805      	ldr	r0, [pc, #20]	; (800bfa0 <BSP_I2C4_WriteReg16+0x34>)
 800bf8a:	f004 fff7 	bl	8010f7c <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800bf8e:	2804      	cmp	r0, #4
 800bf90:	bf0c      	ite	eq
 800bf92:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 800bf96:	f06f 0003 	mvnne.w	r0, #3
}
 800bf9a:	b004      	add	sp, #16
 800bf9c:	bd10      	pop	{r4, pc}
 800bf9e:	bf00      	nop
 800bfa0:	2400a1bc 	.word	0x2400a1bc

0800bfa4 <BSP_I2C4_ReadReg16>:
{
 800bfa4:	b510      	push	{r4, lr}
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800bfa6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
 800bfaa:	b084      	sub	sp, #16
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800bfac:	e9cd 2300 	strd	r2, r3, [sp]
 800bfb0:	9402      	str	r4, [sp, #8]
 800bfb2:	460a      	mov	r2, r1
 800bfb4:	2302      	movs	r3, #2
 800bfb6:	4601      	mov	r1, r0
 800bfb8:	4807      	ldr	r0, [pc, #28]	; (800bfd8 <BSP_I2C4_ReadReg16+0x34>)
 800bfba:	f004 fe9f 	bl	8010cfc <HAL_I2C_Mem_Read>
 800bfbe:	b140      	cbz	r0, 800bfd2 <BSP_I2C4_ReadReg16+0x2e>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800bfc0:	4805      	ldr	r0, [pc, #20]	; (800bfd8 <BSP_I2C4_ReadReg16+0x34>)
 800bfc2:	f004 ffdb 	bl	8010f7c <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800bfc6:	2804      	cmp	r0, #4
 800bfc8:	bf0c      	ite	eq
 800bfca:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 800bfce:	f06f 0003 	mvnne.w	r0, #3
}
 800bfd2:	b004      	add	sp, #16
 800bfd4:	bd10      	pop	{r4, pc}
 800bfd6:	bf00      	nop
 800bfd8:	2400a1bc 	.word	0x2400a1bc

0800bfdc <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 800bfdc:	f001 bcc0 	b.w	800d960 <HAL_GetTick>

0800bfe0 <BSP_CAMERA_DeInit>:
  * @brief  DeInitializes the camera.
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_DeInit(uint32_t Instance)
{
 800bfe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfe2:	b087      	sub	sp, #28
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 800bfe4:	2800      	cmp	r0, #0
 800bfe6:	d171      	bne.n	800c0cc <BSP_CAMERA_DeInit+0xec>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    if((Camera_CompObj == NULL)||(Camera_Drv == NULL))
 800bfe8:	4e3a      	ldr	r6, [pc, #232]	; (800c0d4 <BSP_CAMERA_DeInit+0xf4>)
 800bfea:	6833      	ldr	r3, [r6, #0]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d06a      	beq.n	800c0c6 <BSP_CAMERA_DeInit+0xe6>
 800bff0:	4f39      	ldr	r7, [pc, #228]	; (800c0d8 <BSP_CAMERA_DeInit+0xf8>)
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d066      	beq.n	800c0c6 <BSP_CAMERA_DeInit+0xe6>
    {
      ret = BSP_ERROR_NO_INIT;
    }
    else
    {
      hcamera_dcmi.Instance = DCMI;
 800bff8:	4c38      	ldr	r4, [pc, #224]	; (800c0dc <BSP_CAMERA_DeInit+0xfc>)
 800bffa:	4b39      	ldr	r3, [pc, #228]	; (800c0e0 <BSP_CAMERA_DeInit+0x100>)

  if(Instance >= CAMERA_INSTANCES_NBR)
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if(HAL_DCMI_Stop(&hcamera_dcmi) != HAL_OK)
 800bffc:	4620      	mov	r0, r4
      hcamera_dcmi.Instance = DCMI;
 800bffe:	6023      	str	r3, [r4, #0]
  else if(HAL_DCMI_Stop(&hcamera_dcmi) != HAL_OK)
 800c000:	f001 fe08 	bl	800dc14 <HAL_DCMI_Stop>
 800c004:	2800      	cmp	r0, #0
 800c006:	d156      	bne.n	800c0b6 <BSP_CAMERA_DeInit+0xd6>
      else if(HAL_DCMI_DisableCROP(&hcamera_dcmi)!= HAL_OK)
 800c008:	4620      	mov	r0, r4
 800c00a:	f001 ff21 	bl	800de50 <HAL_DCMI_DisableCrop>
 800c00e:	2800      	cmp	r0, #0
 800c010:	d151      	bne.n	800c0b6 <BSP_CAMERA_DeInit+0xd6>
      else if(HAL_DCMI_DeInit(&hcamera_dcmi) != HAL_OK)
 800c012:	4620      	mov	r0, r4
 800c014:	f001 fdf2 	bl	800dbfc <HAL_DCMI_DeInit>
 800c018:	2800      	cmp	r0, #0
 800c01a:	d14c      	bne.n	800c0b6 <BSP_CAMERA_DeInit+0xd6>
static void DCMI_MspDeInit(DCMI_HandleTypeDef *hdcmi)
{
  GPIO_InitTypeDef gpio_init_structure;

  /* Disable NVIC  for DCMI transfer complete interrupt */
  HAL_NVIC_DisableIRQ(DCMI_IRQn);
 800c01c:	204e      	movs	r0, #78	; 0x4e
  HAL_GPIO_DeInit(GPIOG, gpio_init_structure.Pin);



  /* Disable DCMI clock */
  __HAL_RCC_DCMI_CLK_DISABLE();
 800c01e:	4d31      	ldr	r5, [pc, #196]	; (800c0e4 <BSP_CAMERA_DeInit+0x104>)
  HAL_NVIC_DisableIRQ(DCMI_IRQn);
 800c020:	f001 fd1c 	bl	800da5c <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(DMA2_Stream3_IRQn);
 800c024:	203b      	movs	r0, #59	; 0x3b
 800c026:	f001 fd19 	bl	800da5c <HAL_NVIC_DisableIRQ>
  (void)HAL_DMA_DeInit(hdcmi->DMA_Handle);
 800c02a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800c02c:	f002 fa8c 	bl	800e548 <HAL_DMA_DeInit>
  HAL_GPIO_DeInit(GPIOA, gpio_init_structure.Pin);
 800c030:	2150      	movs	r1, #80	; 0x50
 800c032:	482d      	ldr	r0, [pc, #180]	; (800c0e8 <BSP_CAMERA_DeInit+0x108>)
 800c034:	f004 fb26 	bl	8010684 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOB, gpio_init_structure.Pin);
 800c038:	f44f 7160 	mov.w	r1, #896	; 0x380
 800c03c:	482b      	ldr	r0, [pc, #172]	; (800c0ec <BSP_CAMERA_DeInit+0x10c>)
 800c03e:	f004 fb21 	bl	8010684 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOC, gpio_init_structure.Pin);
 800c042:	f44f 612c 	mov.w	r1, #2752	; 0xac0
 800c046:	482a      	ldr	r0, [pc, #168]	; (800c0f0 <BSP_CAMERA_DeInit+0x110>)
 800c048:	f004 fb1c 	bl	8010684 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, gpio_init_structure.Pin);
 800c04c:	2108      	movs	r1, #8
 800c04e:	4829      	ldr	r0, [pc, #164]	; (800c0f4 <BSP_CAMERA_DeInit+0x114>)
 800c050:	f004 fb18 	bl	8010684 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, gpio_init_structure.Pin);
 800c054:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c058:	4827      	ldr	r0, [pc, #156]	; (800c0f8 <BSP_CAMERA_DeInit+0x118>)
 800c05a:	f004 fb13 	bl	8010684 <HAL_GPIO_DeInit>
  __HAL_RCC_DCMI_CLK_DISABLE();
 800c05e:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
        if(Camera_Drv->DeInit(Camera_CompObj) != BSP_ERROR_NONE)
 800c062:	6830      	ldr	r0, [r6, #0]
  __HAL_RCC_DCMI_CLK_DISABLE();
 800c064:	f023 0301 	bic.w	r3, r3, #1
 800c068:	f8c5 30dc 	str.w	r3, [r5, #220]	; 0xdc
        if(Camera_Drv->DeInit(Camera_CompObj) != BSP_ERROR_NONE)
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	685b      	ldr	r3, [r3, #4]
 800c070:	4798      	blx	r3
 800c072:	4604      	mov	r4, r0
 800c074:	bb20      	cbnz	r0, 800c0c0 <BSP_CAMERA_DeInit+0xe0>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800c076:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800c07a:	2202      	movs	r2, #2
    gpio_init_structure.Pin       = GPIO_PIN_14;
 800c07c:	f44f 4680 	mov.w	r6, #16384	; 0x4000
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800c080:	2701      	movs	r7, #1
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800c082:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 800c086:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800c088:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 800c08c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
    gpio_init_structure.Pull      = GPIO_NOPULL;
 800c090:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800c092:	f403 7300 	and.w	r3, r3, #512	; 0x200
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 800c096:	4819      	ldr	r0, [pc, #100]	; (800c0fc <BSP_CAMERA_DeInit+0x11c>)
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800c098:	9204      	str	r2, [sp, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800c09a:	9300      	str	r3, [sp, #0]
 800c09c:	9b00      	ldr	r3, [sp, #0]
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800c09e:	e9cd 6701 	strd	r6, r7, [sp, #4]
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 800c0a2:	f004 f9d1 	bl	8010448 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_14, GPIO_PIN_SET);
 800c0a6:	463a      	mov	r2, r7
 800c0a8:	4631      	mov	r1, r6
 800c0aa:	4814      	ldr	r0, [pc, #80]	; (800c0fc <BSP_CAMERA_DeInit+0x11c>)
 800c0ac:	f004 fbc6 	bl	801083c <HAL_GPIO_WritePin>
}
 800c0b0:	4620      	mov	r0, r4
 800c0b2:	b007      	add	sp, #28
 800c0b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ret = BSP_ERROR_PERIPH_FAILURE;
 800c0b6:	f06f 0403 	mvn.w	r4, #3
}
 800c0ba:	4620      	mov	r0, r4
 800c0bc:	b007      	add	sp, #28
 800c0be:	bdf0      	pop	{r4, r5, r6, r7, pc}
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800c0c0:	f06f 0404 	mvn.w	r4, #4
  return ret;
 800c0c4:	e7f4      	b.n	800c0b0 <BSP_CAMERA_DeInit+0xd0>
      ret = BSP_ERROR_NO_INIT;
 800c0c6:	f04f 34ff 	mov.w	r4, #4294967295
 800c0ca:	e7f1      	b.n	800c0b0 <BSP_CAMERA_DeInit+0xd0>
    ret = BSP_ERROR_WRONG_PARAM;
 800c0cc:	f06f 0401 	mvn.w	r4, #1
 800c0d0:	e7ee      	b.n	800c0b0 <BSP_CAMERA_DeInit+0xd0>
 800c0d2:	bf00      	nop
 800c0d4:	24009194 	.word	0x24009194
 800c0d8:	24009198 	.word	0x24009198
 800c0dc:	2400a208 	.word	0x2400a208
 800c0e0:	48020000 	.word	0x48020000
 800c0e4:	58024400 	.word	0x58024400
 800c0e8:	58020000 	.word	0x58020000
 800c0ec:	58020400 	.word	0x58020400
 800c0f0:	58020800 	.word	0x58020800
 800c0f4:	58020c00 	.word	0x58020c00
 800c0f8:	58021800 	.word	0x58021800
 800c0fc:	58022400 	.word	0x58022400

0800c100 <MX_DCMI_Init>:
  hdcmi->Init.HSPolarity       = HSPolarity;
 800c100:	4909      	ldr	r1, [pc, #36]	; (800c128 <MX_DCMI_Init+0x28>)
  hdcmi->Instance              = DCMI;
 800c102:	4a0a      	ldr	r2, [pc, #40]	; (800c12c <MX_DCMI_Init+0x2c>)
{
 800c104:	b538      	push	{r3, r4, r5, lr}
  hdcmi->Init.HSPolarity       = HSPolarity;
 800c106:	680d      	ldr	r5, [r1, #0]
  hdcmi->Init.VSPolarity       = DCMI_VSPOLARITY_HIGH;
 800c108:	2480      	movs	r4, #128	; 0x80
  hdcmi->Init.PCKPolarity      = DCMI_PCKPOLARITY_RISING;
 800c10a:	2120      	movs	r1, #32
  hdcmi->Instance              = DCMI;
 800c10c:	6002      	str	r2, [r0, #0]
  hdcmi->Init.CaptureRate      = DCMI_CR_ALL_FRAME;
 800c10e:	2200      	movs	r2, #0
  hdcmi->Init.PCKPolarity      = DCMI_PCKPOLARITY_RISING;
 800c110:	6081      	str	r1, [r0, #8]
  hdcmi->Init.CaptureRate      = DCMI_CR_ALL_FRAME;
 800c112:	6142      	str	r2, [r0, #20]
  hdcmi->Init.SynchroMode      = DCMI_SYNCHRO_HARDWARE;
 800c114:	6042      	str	r2, [r0, #4]
  hdcmi->Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 800c116:	6182      	str	r2, [r0, #24]
  hdcmi->Init.VSPolarity       = DCMI_VSPOLARITY_HIGH;
 800c118:	e9c0 4503 	strd	r4, r5, [r0, #12]
  if(HAL_DCMI_Init(hdcmi) != HAL_OK)
 800c11c:	f001 fd16 	bl	800db4c <HAL_DCMI_Init>
}
 800c120:	3000      	adds	r0, #0
 800c122:	bf18      	it	ne
 800c124:	2001      	movne	r0, #1
 800c126:	bd38      	pop	{r3, r4, r5, pc}
 800c128:	2400919c 	.word	0x2400919c
 800c12c:	48020000 	.word	0x48020000

0800c130 <BSP_CAMERA_Init>:
  if(Instance >= CAMERA_INSTANCES_NBR)
 800c130:	2800      	cmp	r0, #0
 800c132:	f040 81f2 	bne.w	800c51a <BSP_CAMERA_Init+0x3ea>
  gpio_init_structure.Pin       = GPIO_PIN_4 | GPIO_PIN_6;
 800c136:	2350      	movs	r3, #80	; 0x50
{
 800c138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_RCC_DCMI_CLK_ENABLE();
 800c13c:	4cbb      	ldr	r4, [pc, #748]	; (800c42c <BSP_CAMERA_Init+0x2fc>)
{
 800c13e:	b095      	sub	sp, #84	; 0x54
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800c140:	2501      	movs	r5, #1
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800c142:	2702      	movs	r7, #2
 800c144:	9203      	str	r2, [sp, #12]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800c146:	2603      	movs	r6, #3
  __HAL_RCC_DCMI_CLK_ENABLE();
 800c148:	f8d4 20dc 	ldr.w	r2, [r4, #220]	; 0xdc
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 800c14c:	f04f 080d 	mov.w	r8, #13
 800c150:	4683      	mov	fp, r0
 800c152:	4689      	mov	r9, r1
  __HAL_RCC_DCMI_CLK_ENABLE();
 800c154:	432a      	orrs	r2, r5
  HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 800c156:	a90e      	add	r1, sp, #56	; 0x38
 800c158:	48b5      	ldr	r0, [pc, #724]	; (800c430 <BSP_CAMERA_Init+0x300>)
  hdma_handler.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800c15a:	f44f 4a80 	mov.w	sl, #16384	; 0x4000
  __HAL_RCC_DCMI_CLK_ENABLE();
 800c15e:	f8c4 20dc 	str.w	r2, [r4, #220]	; 0xdc
 800c162:	f8d4 20dc 	ldr.w	r2, [r4, #220]	; 0xdc
 800c166:	402a      	ands	r2, r5
 800c168:	9205      	str	r2, [sp, #20]
 800c16a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800c16c:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
 800c170:	433a      	orrs	r2, r7
 800c172:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
 800c176:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
 800c17a:	403a      	ands	r2, r7
 800c17c:	9206      	str	r2, [sp, #24]
 800c17e:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c180:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 800c184:	432a      	orrs	r2, r5
 800c186:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
 800c18a:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 800c18e:	402a      	ands	r2, r5
 800c190:	9207      	str	r2, [sp, #28]
 800c192:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c194:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 800c198:	433a      	orrs	r2, r7
 800c19a:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
 800c19e:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 800c1a2:	403a      	ands	r2, r7
 800c1a4:	9208      	str	r2, [sp, #32]
 800c1a6:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c1a8:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 800c1ac:	f042 0204 	orr.w	r2, r2, #4
 800c1b0:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
 800c1b4:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 800c1b8:	f002 0204 	and.w	r2, r2, #4
 800c1bc:	9209      	str	r2, [sp, #36]	; 0x24
 800c1be:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c1c0:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 800c1c4:	f042 0208 	orr.w	r2, r2, #8
 800c1c8:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
 800c1cc:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 800c1d0:	f002 0208 	and.w	r2, r2, #8
 800c1d4:	920a      	str	r2, [sp, #40]	; 0x28
 800c1d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800c1d8:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 800c1dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c1e0:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
 800c1e4:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
  gpio_init_structure.Pin       = GPIO_PIN_4 | GPIO_PIN_6;
 800c1e8:	930e      	str	r3, [sp, #56]	; 0x38
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800c1ea:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800c1ee:	920b      	str	r2, [sp, #44]	; 0x2c
 800c1f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 800c1f2:	e9cd 6811 	strd	r6, r8, [sp, #68]	; 0x44
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800c1f6:	e9cd 750f 	strd	r7, r5, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 800c1fa:	f004 f925 	bl	8010448 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 800c1fe:	f44f 7260 	mov.w	r2, #896	; 0x380
  HAL_GPIO_Init(GPIOB, &gpio_init_structure);
 800c202:	a90e      	add	r1, sp, #56	; 0x38
 800c204:	488b      	ldr	r0, [pc, #556]	; (800c434 <BSP_CAMERA_Init+0x304>)
  gpio_init_structure.Pin       = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 800c206:	920e      	str	r2, [sp, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 800c208:	e9cd 6811 	strd	r6, r8, [sp, #68]	; 0x44
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800c20c:	e9cd 750f 	strd	r7, r5, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &gpio_init_structure);
 800c210:	f004 f91a 	bl	8010448 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_11;
 800c214:	f44f 622c 	mov.w	r2, #2752	; 0xac0
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800c218:	a90e      	add	r1, sp, #56	; 0x38
 800c21a:	4887      	ldr	r0, [pc, #540]	; (800c438 <BSP_CAMERA_Init+0x308>)
  gpio_init_structure.Pin       = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_11;
 800c21c:	920e      	str	r2, [sp, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 800c21e:	e9cd 6811 	strd	r6, r8, [sp, #68]	; 0x44
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800c222:	e9cd 750f 	strd	r7, r5, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800c226:	f004 f90f 	bl	8010448 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_3;
 800c22a:	2208      	movs	r2, #8
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800c22c:	a90e      	add	r1, sp, #56	; 0x38
 800c22e:	4883      	ldr	r0, [pc, #524]	; (800c43c <BSP_CAMERA_Init+0x30c>)
  gpio_init_structure.Pin       = GPIO_PIN_3;
 800c230:	920e      	str	r2, [sp, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 800c232:	e9cd 6811 	strd	r6, r8, [sp, #68]	; 0x44
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800c236:	e9cd 750f 	strd	r7, r5, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800c23a:	f004 f905 	bl	8010448 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_10;
 800c23e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800c242:	a90e      	add	r1, sp, #56	; 0x38
 800c244:	487e      	ldr	r0, [pc, #504]	; (800c440 <BSP_CAMERA_Init+0x310>)
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 800c246:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800c24a:	9611      	str	r6, [sp, #68]	; 0x44
  gpio_init_structure.Pin       = GPIO_PIN_10;
 800c24c:	930e      	str	r3, [sp, #56]	; 0x38
  __HAL_LINKDMA(hdcmi, DMA_Handle, hdma_handler);
 800c24e:	f8df 8228 	ldr.w	r8, [pc, #552]	; 800c478 <BSP_CAMERA_Init+0x348>
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800c252:	e9cd 750f 	strd	r7, r5, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800c256:	f004 f8f7 	bl	8010448 <HAL_GPIO_Init>
  hdma_handler.Init.Request             = DMA_REQUEST_DCMI;
 800c25a:	4b7a      	ldr	r3, [pc, #488]	; (800c444 <BSP_CAMERA_Init+0x314>)
  hdma_handler.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800c25c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  hdma_handler.Init.Mode                = DMA_CIRCULAR;
 800c260:	f44f 7180 	mov.w	r1, #256	; 0x100
  hdma_handler.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800c264:	629e      	str	r6, [r3, #40]	; 0x28
  hdma_handler.Init.MemInc              = DMA_MINC_ENABLE;
 800c266:	f44f 6680 	mov.w	r6, #1024	; 0x400
  hdma_handler.Init.Priority            = DMA_PRIORITY_VERY_HIGH;//DMA_PRIORITY_HIGH;
 800c26a:	f44f 3040 	mov.w	r0, #196608	; 0x30000
  hdma_handler.Init.Request             = DMA_REQUEST_DCMI;
 800c26e:	f04f 0e4b 	mov.w	lr, #75	; 0x4b
  hdma_handler.Init.MemInc              = DMA_MINC_ENABLE;
 800c272:	611e      	str	r6, [r3, #16]
  hdma_handler.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 800c274:	2604      	movs	r6, #4
  hdma_handler.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800c276:	615a      	str	r2, [r3, #20]
  HAL_NVIC_SetPriority(DCMI_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 800c278:	465a      	mov	r2, fp
  hdma_handler.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 800c27a:	625e      	str	r6, [r3, #36]	; 0x24
  hdma_handler.Instance                 = DMA2_Stream3;
 800c27c:	4e72      	ldr	r6, [pc, #456]	; (800c448 <BSP_CAMERA_Init+0x318>)
  hdma_handler.Init.Mode                = DMA_CIRCULAR;
 800c27e:	61d9      	str	r1, [r3, #28]
  HAL_NVIC_SetPriority(DCMI_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 800c280:	210f      	movs	r1, #15
  hdma_handler.Init.Priority            = DMA_PRIORITY_VERY_HIGH;//DMA_PRIORITY_HIGH;
 800c282:	6218      	str	r0, [r3, #32]
  HAL_NVIC_SetPriority(DCMI_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 800c284:	204e      	movs	r0, #78	; 0x4e
  hdma_handler.Instance                 = DMA2_Stream3;
 800c286:	601e      	str	r6, [r3, #0]
  hdma_handler.Init.Request             = DMA_REQUEST_DCMI;
 800c288:	f8c3 e004 	str.w	lr, [r3, #4]
  hdma_handler.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800c28c:	f8c3 a018 	str.w	sl, [r3, #24]
  __HAL_LINKDMA(hdcmi, DMA_Handle, hdma_handler);
 800c290:	f8c8 3048 	str.w	r3, [r8, #72]	; 0x48
 800c294:	f8c3 8038 	str.w	r8, [r3, #56]	; 0x38
  hdma_handler.Init.PeriphInc           = DMA_PINC_DISABLE;
 800c298:	e9c3 bb02 	strd	fp, fp, [r3, #8]
  hdma_handler.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 800c29c:	e9c3 bb0b 	strd	fp, fp, [r3, #44]	; 0x2c
  HAL_NVIC_SetPriority(DCMI_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 800c2a0:	f001 fb98 	bl	800d9d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DCMI_IRQn);
 800c2a4:	204e      	movs	r0, #78	; 0x4e
 800c2a6:	f001 fbcb 	bl	800da40 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 800c2aa:	465a      	mov	r2, fp
 800c2ac:	210f      	movs	r1, #15
 800c2ae:	203b      	movs	r0, #59	; 0x3b
 800c2b0:	f001 fb90 	bl	800d9d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800c2b4:	203b      	movs	r0, #59	; 0x3b
 800c2b6:	f001 fbc3 	bl	800da40 <HAL_NVIC_EnableIRQ>
  (void)HAL_DMA_Init(hdcmi->DMA_Handle);
 800c2ba:	f8d8 0048 	ldr.w	r0, [r8, #72]	; 0x48
 800c2be:	f001 fe77 	bl	800dfb0 <HAL_DMA_Init>
    if(MX_DCMI_Init(&hcamera_dcmi) != HAL_OK)
 800c2c2:	4640      	mov	r0, r8
 800c2c4:	f7ff ff1c 	bl	800c100 <MX_DCMI_Init>
 800c2c8:	4606      	mov	r6, r0
 800c2ca:	2800      	cmp	r0, #0
 800c2cc:	f040 80a8 	bne.w	800c420 <BSP_CAMERA_Init+0x2f0>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800c2d0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 800c2d4:	a90e      	add	r1, sp, #56	; 0x38
 800c2d6:	485d      	ldr	r0, [pc, #372]	; (800c44c <BSP_CAMERA_Init+0x31c>)
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800c2d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  OV9655_IO_t              IOCtx;
  static OV9655_Object_t   OV9655Obj;

  /* Configure the audio driver */
  IOCtx.Address     = CAMERA_OV9655_ADDRESS;
  IOCtx.Init        = BSP_I2C4_Init;
 800c2dc:	f8df 819c 	ldr.w	r8, [pc, #412]	; 800c47c <BSP_CAMERA_Init+0x34c>
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800c2e0:	f8df b19c 	ldr.w	fp, [pc, #412]	; 800c480 <BSP_CAMERA_Init+0x350>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800c2e4:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800c2e8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    gpio_init_structure.Pin       = GPIO_PIN_14;
 800c2ec:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800c2f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800c2f4:	9711      	str	r7, [sp, #68]	; 0x44
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800c2f6:	930c      	str	r3, [sp, #48]	; 0x30
 800c2f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    gpio_init_structure.Pull      = GPIO_NOPULL;
 800c2fa:	e9cd 560f 	strd	r5, r6, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 800c2fe:	f004 f8a3 	bl	8010448 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOJ,GPIO_PIN_14, GPIO_PIN_SET);
 800c302:	462a      	mov	r2, r5
 800c304:	4651      	mov	r1, sl
 800c306:	4851      	ldr	r0, [pc, #324]	; (800c44c <BSP_CAMERA_Init+0x31c>)
 800c308:	f004 fa98 	bl	801083c <HAL_GPIO_WritePin>
    HAL_Delay(100);     /* POWER_DOWN de-asserted during 100 ms */
 800c30c:	2064      	movs	r0, #100	; 0x64
 800c30e:	f001 fb2d 	bl	800d96c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOJ,GPIO_PIN_14, GPIO_PIN_RESET);
 800c312:	4651      	mov	r1, sl
 800c314:	4632      	mov	r2, r6
 800c316:	484d      	ldr	r0, [pc, #308]	; (800c44c <BSP_CAMERA_Init+0x31c>)
 800c318:	f004 fa90 	bl	801083c <HAL_GPIO_WritePin>
    HAL_Delay(20);
 800c31c:	2014      	movs	r0, #20
 800c31e:	f001 fb25 	bl	800d96c <HAL_Delay>
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
  IOCtx.GetTick     = BSP_GetTick;

  if(OV9655_RegisterBusIO (&OV9655Obj, &IOCtx) != OV9655_OK)
 800c322:	4d4b      	ldr	r5, [pc, #300]	; (800c450 <BSP_CAMERA_Init+0x320>)
  IOCtx.Address     = CAMERA_OV9655_ADDRESS;
 800c324:	2160      	movs	r1, #96	; 0x60
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 800c326:	4a4b      	ldr	r2, [pc, #300]	; (800c454 <BSP_CAMERA_Init+0x324>)
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 800c328:	4b4b      	ldr	r3, [pc, #300]	; (800c458 <BSP_CAMERA_Init+0x328>)
  if(OV9655_RegisterBusIO (&OV9655Obj, &IOCtx) != OV9655_OK)
 800c32a:	4628      	mov	r0, r5
  IOCtx.GetTick     = BSP_GetTick;
 800c32c:	f8df a154 	ldr.w	sl, [pc, #340]	; 800c484 <BSP_CAMERA_Init+0x354>
  IOCtx.Address     = CAMERA_OV9655_ADDRESS;
 800c330:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
  if(OV9655_RegisterBusIO (&OV9655Obj, &IOCtx) != OV9655_OK)
 800c334:	a90e      	add	r1, sp, #56	; 0x38
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 800c336:	9212      	str	r2, [sp, #72]	; 0x48
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 800c338:	9311      	str	r3, [sp, #68]	; 0x44
  IOCtx.GetTick     = BSP_GetTick;
 800c33a:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800c33e:	e9cd 8b0e 	strd	r8, fp, [sp, #56]	; 0x38
  if(OV9655_RegisterBusIO (&OV9655Obj, &IOCtx) != OV9655_OK)
 800c342:	f7fd fa05 	bl	8009750 <OV9655_RegisterBusIO>
 800c346:	2800      	cmp	r0, #0
 800c348:	f040 80a0 	bne.w	800c48c <BSP_CAMERA_Init+0x35c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(OV9655_ReadID(&OV9655Obj, &CameraId) != OV9655_OK)
 800c34c:	4c43      	ldr	r4, [pc, #268]	; (800c45c <BSP_CAMERA_Init+0x32c>)
 800c34e:	4628      	mov	r0, r5
 800c350:	4621      	mov	r1, r4
 800c352:	f7fd f945 	bl	80095e0 <OV9655_ReadID>
 800c356:	2800      	cmp	r0, #0
 800c358:	f040 8098 	bne.w	800c48c <BSP_CAMERA_Init+0x35c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    if((CameraId != OV9655_ID) && (CameraId != OV9655_ID_2))
 800c35c:	6822      	ldr	r2, [r4, #0]
 800c35e:	4b40      	ldr	r3, [pc, #256]	; (800c460 <BSP_CAMERA_Init+0x330>)
 800c360:	4413      	add	r3, r2
 800c362:	2b01      	cmp	r3, #1
 800c364:	f200 8092 	bhi.w	800c48c <BSP_CAMERA_Init+0x35c>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
    }
    else
    {
      Camera_Drv = (CAMERA_Drv_t *) &OV9655_CAMERA_Driver;
 800c368:	f8df c11c 	ldr.w	ip, [pc, #284]	; 800c488 <BSP_CAMERA_Init+0x358>
      Camera_CompObj = &OV9655Obj;
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV9655_OK)
 800c36c:	4628      	mov	r0, r5
      Camera_CompObj = &OV9655Obj;
 800c36e:	4e3d      	ldr	r6, [pc, #244]	; (800c464 <BSP_CAMERA_Init+0x334>)
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV9655_OK)
 800c370:	4649      	mov	r1, r9
      Camera_Drv = (CAMERA_Drv_t *) &OV9655_CAMERA_Driver;
 800c372:	4f3d      	ldr	r7, [pc, #244]	; (800c468 <BSP_CAMERA_Init+0x338>)
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV9655_OK)
 800c374:	9a03      	ldr	r2, [sp, #12]
 800c376:	f8dc 3000 	ldr.w	r3, [ip]
      Camera_CompObj = &OV9655Obj;
 800c37a:	6035      	str	r5, [r6, #0]
      Camera_Drv = (CAMERA_Drv_t *) &OV9655_CAMERA_Driver;
 800c37c:	f8c7 c000 	str.w	ip, [r7]
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV9655_OK)
 800c380:	4798      	blx	r3
 800c382:	2800      	cmp	r0, #0
 800c384:	f040 8082 	bne.w	800c48c <BSP_CAMERA_Init+0x35c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      else if(Camera_Drv->GetCapabilities(Camera_CompObj, &Camera_Cap) != OV9655_OK)
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	6830      	ldr	r0, [r6, #0]
 800c38c:	68db      	ldr	r3, [r3, #12]
 800c38e:	4937      	ldr	r1, [pc, #220]	; (800c46c <BSP_CAMERA_Init+0x33c>)
 800c390:	4798      	blx	r3
 800c392:	2800      	cmp	r0, #0
 800c394:	d17a      	bne.n	800c48c <BSP_CAMERA_Init+0x35c>
        if((CameraId == OV9655_ID) || (CameraId == OV9655_ID_2))
 800c396:	6822      	ldr	r2, [r4, #0]
 800c398:	4b31      	ldr	r3, [pc, #196]	; (800c460 <BSP_CAMERA_Init+0x330>)
 800c39a:	4413      	add	r3, r2
 800c39c:	2b01      	cmp	r3, #1
 800c39e:	d837      	bhi.n	800c410 <BSP_CAMERA_Init+0x2e0>
          if(Resolution == CAMERA_R480x272)
 800c3a0:	f1b9 0f02 	cmp.w	r9, #2
 800c3a4:	f000 80a7 	beq.w	800c4f6 <BSP_CAMERA_Init+0x3c6>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800c3a8:	4b20      	ldr	r3, [pc, #128]	; (800c42c <BSP_CAMERA_Init+0x2fc>)
    gpio_init_structure.Pin       = GPIO_PIN_14;
 800c3aa:	f44f 4680 	mov.w	r6, #16384	; 0x4000
    gpio_init_structure.Pull      = GPIO_NOPULL;
 800c3ae:	2500      	movs	r5, #0
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800c3b0:	2202      	movs	r2, #2
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800c3b2:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800c3b6:	2701      	movs	r7, #1
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 800c3b8:	a90e      	add	r1, sp, #56	; 0x38
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800c3ba:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 800c3be:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 800c3c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 800c3c6:	4821      	ldr	r0, [pc, #132]	; (800c44c <BSP_CAMERA_Init+0x31c>)
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800c3c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800c3cc:	9211      	str	r2, [sp, #68]	; 0x44
    gpio_init_structure.Pin       = GPIO_PIN_14;
 800c3ce:	960e      	str	r6, [sp, #56]	; 0x38
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800c3d0:	930d      	str	r3, [sp, #52]	; 0x34
 800c3d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    gpio_init_structure.Pull      = GPIO_NOPULL;
 800c3d4:	e9cd 750f 	strd	r7, r5, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 800c3d8:	f004 f836 	bl	8010448 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOJ,GPIO_PIN_14, GPIO_PIN_SET);
 800c3dc:	463a      	mov	r2, r7
 800c3de:	4631      	mov	r1, r6
 800c3e0:	481a      	ldr	r0, [pc, #104]	; (800c44c <BSP_CAMERA_Init+0x31c>)
 800c3e2:	f004 fa2b 	bl	801083c <HAL_GPIO_WritePin>
    HAL_Delay(100);     /* POWER_DOWN de-asserted during 100 ms */
 800c3e6:	2064      	movs	r0, #100	; 0x64
 800c3e8:	f001 fac0 	bl	800d96c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOJ,GPIO_PIN_14, GPIO_PIN_RESET);
 800c3ec:	462a      	mov	r2, r5
 800c3ee:	4631      	mov	r1, r6
 800c3f0:	4816      	ldr	r0, [pc, #88]	; (800c44c <BSP_CAMERA_Init+0x31c>)
 800c3f2:	f004 fa23 	bl	801083c <HAL_GPIO_WritePin>
    HAL_Delay(20);
 800c3f6:	2014      	movs	r0, #20
 800c3f8:	f001 fab8 	bl	800d96c <HAL_Delay>
          Camera_Ctx[Instance].CameraId  = CameraId;
 800c3fc:	6822      	ldr	r2, [r4, #0]
 800c3fe:	4b1c      	ldr	r3, [pc, #112]	; (800c470 <BSP_CAMERA_Init+0x340>)
          Camera_Ctx[Instance].PixelFormat = PixelFormat;
 800c400:	4628      	mov	r0, r5
          Camera_Ctx[Instance].Resolution  = Resolution;
 800c402:	e9c3 2900 	strd	r2, r9, [r3]
          Camera_Ctx[Instance].PixelFormat = PixelFormat;
 800c406:	9a03      	ldr	r2, [sp, #12]
 800c408:	609a      	str	r2, [r3, #8]
}
 800c40a:	b015      	add	sp, #84	; 0x54
 800c40c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          HSPolarity = DCMI_HSPOLARITY_HIGH;
 800c410:	4b18      	ldr	r3, [pc, #96]	; (800c474 <BSP_CAMERA_Init+0x344>)
 800c412:	2240      	movs	r2, #64	; 0x40
          if(MX_DCMI_Init(&hcamera_dcmi) != HAL_OK)
 800c414:	4818      	ldr	r0, [pc, #96]	; (800c478 <BSP_CAMERA_Init+0x348>)
          HSPolarity = DCMI_HSPOLARITY_HIGH;
 800c416:	601a      	str	r2, [r3, #0]
          if(MX_DCMI_Init(&hcamera_dcmi) != HAL_OK)
 800c418:	f7ff fe72 	bl	800c100 <MX_DCMI_Init>
 800c41c:	2800      	cmp	r0, #0
 800c41e:	d0c3      	beq.n	800c3a8 <BSP_CAMERA_Init+0x278>
      ret = BSP_ERROR_PERIPH_FAILURE;
 800c420:	f06f 0003 	mvn.w	r0, #3
}
 800c424:	b015      	add	sp, #84	; 0x54
 800c426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c42a:	bf00      	nop
 800c42c:	58024400 	.word	0x58024400
 800c430:	58020000 	.word	0x58020000
 800c434:	58020400 	.word	0x58020400
 800c438:	58020800 	.word	0x58020800
 800c43c:	58020c00 	.word	0x58020c00
 800c440:	58021800 	.word	0x58021800
 800c444:	240091f0 	.word	0x240091f0
 800c448:	40020458 	.word	0x40020458
 800c44c:	58022400 	.word	0x58022400
 800c450:	240091c8 	.word	0x240091c8
 800c454:	0800bf35 	.word	0x0800bf35
 800c458:	0800befd 	.word	0x0800befd
 800c45c:	24009168 	.word	0x24009168
 800c460:	ffff69aa 	.word	0xffff69aa
 800c464:	24009194 	.word	0x24009194
 800c468:	24009198 	.word	0x24009198
 800c46c:	2400916c 	.word	0x2400916c
 800c470:	2400a258 	.word	0x2400a258
 800c474:	2400919c 	.word	0x2400919c
 800c478:	2400a208 	.word	0x2400a208
 800c47c:	0800b7c9 	.word	0x0800b7c9
 800c480:	0800b735 	.word	0x0800b735
 800c484:	0800bfdd 	.word	0x0800bfdd
 800c488:	24007328 	.word	0x24007328
   int32_t ret;
  OV5640_IO_t              IOCtx;
  static OV5640_Object_t   OV5640Obj;

  /* Configure the audio driver */
  IOCtx.Address     = CAMERA_OV5640_ADDRESS;
 800c48c:	2378      	movs	r3, #120	; 0x78
  IOCtx.DeInit      = BSP_I2C4_DeInit;
  IOCtx.ReadReg     = BSP_I2C4_ReadReg16;
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
  IOCtx.GetTick     = BSP_GetTick;

  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 800c48e:	4d24      	ldr	r5, [pc, #144]	; (800c520 <BSP_CAMERA_Init+0x3f0>)
  IOCtx.ReadReg     = BSP_I2C4_ReadReg16;
 800c490:	4a24      	ldr	r2, [pc, #144]	; (800c524 <BSP_CAMERA_Init+0x3f4>)
  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 800c492:	a90e      	add	r1, sp, #56	; 0x38
  IOCtx.Address     = CAMERA_OV5640_ADDRESS;
 800c494:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 800c498:	4628      	mov	r0, r5
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
 800c49a:	4b23      	ldr	r3, [pc, #140]	; (800c528 <BSP_CAMERA_Init+0x3f8>)
  IOCtx.Init        = BSP_I2C4_Init;
 800c49c:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800c4a0:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  IOCtx.GetTick     = BSP_GetTick;
 800c4a4:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
 800c4a8:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 800c4ac:	f7fc fcb0 	bl	8008e10 <OV5640_RegisterBusIO>
 800c4b0:	b9f0      	cbnz	r0, 800c4f0 <BSP_CAMERA_Init+0x3c0>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(OV5640_ReadID(&OV5640Obj, &CameraId) != OV5640_OK)
 800c4b2:	4c1e      	ldr	r4, [pc, #120]	; (800c52c <BSP_CAMERA_Init+0x3fc>)
 800c4b4:	4628      	mov	r0, r5
 800c4b6:	4621      	mov	r1, r4
 800c4b8:	f7fc fa38 	bl	800892c <OV5640_ReadID>
 800c4bc:	b9c0      	cbnz	r0, 800c4f0 <BSP_CAMERA_Init+0x3c0>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    if(CameraId != OV5640_ID)
 800c4be:	6822      	ldr	r2, [r4, #0]
 800c4c0:	f245 6340 	movw	r3, #22080	; 0x5640
 800c4c4:	429a      	cmp	r2, r3
 800c4c6:	d113      	bne.n	800c4f0 <BSP_CAMERA_Init+0x3c0>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
    }
    else
    {
      Camera_Drv = (CAMERA_Drv_t *) &OV5640_CAMERA_Driver;
 800c4c8:	4b19      	ldr	r3, [pc, #100]	; (800c530 <BSP_CAMERA_Init+0x400>)
      Camera_CompObj = &OV5640Obj;
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 800c4ca:	4628      	mov	r0, r5
      Camera_CompObj = &OV5640Obj;
 800c4cc:	4e19      	ldr	r6, [pc, #100]	; (800c534 <BSP_CAMERA_Init+0x404>)
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 800c4ce:	4649      	mov	r1, r9
      Camera_Drv = (CAMERA_Drv_t *) &OV5640_CAMERA_Driver;
 800c4d0:	4f19      	ldr	r7, [pc, #100]	; (800c538 <BSP_CAMERA_Init+0x408>)
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 800c4d2:	9a03      	ldr	r2, [sp, #12]
 800c4d4:	f8d3 8000 	ldr.w	r8, [r3]
      Camera_CompObj = &OV5640Obj;
 800c4d8:	6035      	str	r5, [r6, #0]
      Camera_Drv = (CAMERA_Drv_t *) &OV5640_CAMERA_Driver;
 800c4da:	603b      	str	r3, [r7, #0]
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 800c4dc:	47c0      	blx	r8
 800c4de:	b938      	cbnz	r0, 800c4f0 <BSP_CAMERA_Init+0x3c0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      else if(Camera_Drv->GetCapabilities(Camera_CompObj, &Camera_Cap) != OV5640_OK)
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	6830      	ldr	r0, [r6, #0]
 800c4e4:	68db      	ldr	r3, [r3, #12]
 800c4e6:	4915      	ldr	r1, [pc, #84]	; (800c53c <BSP_CAMERA_Init+0x40c>)
 800c4e8:	4798      	blx	r3
 800c4ea:	2800      	cmp	r0, #0
 800c4ec:	f43f af53 	beq.w	800c396 <BSP_CAMERA_Init+0x266>
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800c4f0:	f06f 0006 	mvn.w	r0, #6
 800c4f4:	e789      	b.n	800c40a <BSP_CAMERA_Init+0x2da>
            if(HAL_DCMI_ConfigCROP(&hcamera_dcmi,           /* Crop in the middle of the VGA picture */
 800c4f6:	f240 100f 	movw	r0, #271	; 0x10f
 800c4fa:	f240 33bf 	movw	r3, #959	; 0x3bf
 800c4fe:	2268      	movs	r2, #104	; 0x68
 800c500:	2150      	movs	r1, #80	; 0x50
 800c502:	9000      	str	r0, [sp, #0]
 800c504:	480e      	ldr	r0, [pc, #56]	; (800c540 <BSP_CAMERA_Init+0x410>)
 800c506:	f001 fc85 	bl	800de14 <HAL_DCMI_ConfigCrop>
 800c50a:	2800      	cmp	r0, #0
 800c50c:	d188      	bne.n	800c420 <BSP_CAMERA_Init+0x2f0>
              if(HAL_DCMI_EnableCROP(&hcamera_dcmi) != HAL_OK)
 800c50e:	480c      	ldr	r0, [pc, #48]	; (800c540 <BSP_CAMERA_Init+0x410>)
 800c510:	f001 fcb8 	bl	800de84 <HAL_DCMI_EnableCrop>
 800c514:	2800      	cmp	r0, #0
 800c516:	d183      	bne.n	800c420 <BSP_CAMERA_Init+0x2f0>
 800c518:	e746      	b.n	800c3a8 <BSP_CAMERA_Init+0x278>
    ret = BSP_ERROR_WRONG_PARAM;
 800c51a:	f06f 0001 	mvn.w	r0, #1
}
 800c51e:	4770      	bx	lr
 800c520:	240091a0 	.word	0x240091a0
 800c524:	0800bfa5 	.word	0x0800bfa5
 800c528:	0800bf6d 	.word	0x0800bf6d
 800c52c:	24009168 	.word	0x24009168
 800c530:	240072e4 	.word	0x240072e4
 800c534:	24009194 	.word	0x24009194
 800c538:	24009198 	.word	0x24009198
 800c53c:	2400916c 	.word	0x2400916c
 800c540:	2400a208 	.word	0x2400a208

0800c544 <BSP_CAMERA_Suspend>:
  if(Instance >= CAMERA_INSTANCES_NBR)
 800c544:	b948      	cbnz	r0, 800c55a <BSP_CAMERA_Suspend+0x16>
  else if(HAL_DCMI_Suspend(&hcamera_dcmi) != HAL_OK)
 800c546:	4806      	ldr	r0, [pc, #24]	; (800c560 <BSP_CAMERA_Suspend+0x1c>)
{
 800c548:	b508      	push	{r3, lr}
  else if(HAL_DCMI_Suspend(&hcamera_dcmi) != HAL_OK)
 800c54a:	f001 fba5 	bl	800dc98 <HAL_DCMI_Suspend>
 800c54e:	2800      	cmp	r0, #0
    ret = BSP_ERROR_NONE;
 800c550:	bf14      	ite	ne
 800c552:	f06f 0003 	mvnne.w	r0, #3
 800c556:	2000      	moveq	r0, #0
}
 800c558:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800c55a:	f06f 0001 	mvn.w	r0, #1
}
 800c55e:	4770      	bx	lr
 800c560:	2400a208 	.word	0x2400a208

0800c564 <BSP_CAMERA_Resume>:
  if(Instance >= CAMERA_INSTANCES_NBR)
 800c564:	b948      	cbnz	r0, 800c57a <BSP_CAMERA_Resume+0x16>
  else if(HAL_DCMI_Resume(&hcamera_dcmi) != HAL_OK)
 800c566:	4806      	ldr	r0, [pc, #24]	; (800c580 <BSP_CAMERA_Resume+0x1c>)
{
 800c568:	b508      	push	{r3, lr}
  else if(HAL_DCMI_Resume(&hcamera_dcmi) != HAL_OK)
 800c56a:	f001 fbd9 	bl	800dd20 <HAL_DCMI_Resume>
 800c56e:	2800      	cmp	r0, #0
    ret = BSP_ERROR_NONE;
 800c570:	bf14      	ite	ne
 800c572:	f06f 0003 	mvnne.w	r0, #3
 800c576:	2000      	moveq	r0, #0
}
 800c578:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800c57a:	f06f 0001 	mvn.w	r0, #1
}
 800c57e:	4770      	bx	lr
 800c580:	2400a208 	.word	0x2400a208

0800c584 <BSP_CAMERA_SetBrightness>:
  if((Instance >= CAMERA_INSTANCES_NBR) || ((Brightness < CAMERA_BRIGHTNESS_MIN) && (Brightness > CAMERA_BRIGHTNESS_MAX)))
 800c584:	b988      	cbnz	r0, 800c5aa <BSP_CAMERA_SetBrightness+0x26>
  else if(Camera_Cap.Brightness == 0U)
 800c586:	4a0d      	ldr	r2, [pc, #52]	; (800c5bc <BSP_CAMERA_SetBrightness+0x38>)
 800c588:	68d2      	ldr	r2, [r2, #12]
 800c58a:	b1a2      	cbz	r2, 800c5b6 <BSP_CAMERA_SetBrightness+0x32>
  else if(Camera_Drv->SetBrightness(Camera_CompObj, Brightness) < 0)
 800c58c:	4a0c      	ldr	r2, [pc, #48]	; (800c5c0 <BSP_CAMERA_SetBrightness+0x3c>)
{
 800c58e:	b538      	push	{r3, r4, r5, lr}
  else if(Camera_Drv->SetBrightness(Camera_CompObj, Brightness) < 0)
 800c590:	4b0c      	ldr	r3, [pc, #48]	; (800c5c4 <BSP_CAMERA_SetBrightness+0x40>)
 800c592:	4604      	mov	r4, r0
 800c594:	6810      	ldr	r0, [r2, #0]
 800c596:	460d      	mov	r5, r1
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	699b      	ldr	r3, [r3, #24]
 800c59c:	4798      	blx	r3
 800c59e:	2800      	cmp	r0, #0
 800c5a0:	db06      	blt.n	800c5b0 <BSP_CAMERA_SetBrightness+0x2c>
    Camera_Ctx[Instance].Brightness = Brightness;
 800c5a2:	4b09      	ldr	r3, [pc, #36]	; (800c5c8 <BSP_CAMERA_SetBrightness+0x44>)
    ret = BSP_ERROR_NONE;
 800c5a4:	4620      	mov	r0, r4
    Camera_Ctx[Instance].Brightness = Brightness;
 800c5a6:	615d      	str	r5, [r3, #20]
}
 800c5a8:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800c5aa:	f06f 0001 	mvn.w	r0, #1
 800c5ae:	4770      	bx	lr
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c5b0:	f06f 0004 	mvn.w	r0, #4
}
 800c5b4:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800c5b6:	f06f 000a 	mvn.w	r0, #10
}
 800c5ba:	4770      	bx	lr
 800c5bc:	2400916c 	.word	0x2400916c
 800c5c0:	24009194 	.word	0x24009194
 800c5c4:	24009198 	.word	0x24009198
 800c5c8:	2400a258 	.word	0x2400a258

0800c5cc <BSP_CAMERA_SetContrast>:
  if((Instance >= CAMERA_INSTANCES_NBR) || ((Contrast < CAMERA_CONTRAST_MIN) && (Contrast > CAMERA_CONTRAST_MAX)))
 800c5cc:	b988      	cbnz	r0, 800c5f2 <BSP_CAMERA_SetContrast+0x26>
  else if(Camera_Cap.Contrast == 0U)
 800c5ce:	4a0d      	ldr	r2, [pc, #52]	; (800c604 <BSP_CAMERA_SetContrast+0x38>)
 800c5d0:	6952      	ldr	r2, [r2, #20]
 800c5d2:	b1a2      	cbz	r2, 800c5fe <BSP_CAMERA_SetContrast+0x32>
  else if(Camera_Drv->SetContrast(Camera_CompObj, Contrast)  < 0)
 800c5d4:	4a0c      	ldr	r2, [pc, #48]	; (800c608 <BSP_CAMERA_SetContrast+0x3c>)
{
 800c5d6:	b538      	push	{r3, r4, r5, lr}
  else if(Camera_Drv->SetContrast(Camera_CompObj, Contrast)  < 0)
 800c5d8:	4b0c      	ldr	r3, [pc, #48]	; (800c60c <BSP_CAMERA_SetContrast+0x40>)
 800c5da:	4604      	mov	r4, r0
 800c5dc:	6810      	ldr	r0, [r2, #0]
 800c5de:	460d      	mov	r5, r1
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	6a1b      	ldr	r3, [r3, #32]
 800c5e4:	4798      	blx	r3
 800c5e6:	2800      	cmp	r0, #0
 800c5e8:	db06      	blt.n	800c5f8 <BSP_CAMERA_SetContrast+0x2c>
    Camera_Ctx[Instance].Contrast = Contrast;
 800c5ea:	4b09      	ldr	r3, [pc, #36]	; (800c610 <BSP_CAMERA_SetContrast+0x44>)
    ret = BSP_ERROR_NONE;
 800c5ec:	4620      	mov	r0, r4
    Camera_Ctx[Instance].Contrast = Contrast;
 800c5ee:	61dd      	str	r5, [r3, #28]
}
 800c5f0:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800c5f2:	f06f 0001 	mvn.w	r0, #1
 800c5f6:	4770      	bx	lr
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c5f8:	f06f 0004 	mvn.w	r0, #4
}
 800c5fc:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800c5fe:	f06f 000a 	mvn.w	r0, #10
}
 800c602:	4770      	bx	lr
 800c604:	2400916c 	.word	0x2400916c
 800c608:	24009194 	.word	0x24009194
 800c60c:	24009198 	.word	0x24009198
 800c610:	2400a258 	.word	0x2400a258

0800c614 <BSP_CAMERA_SetMirrorFlip>:
  if(Instance >= CAMERA_INSTANCES_NBR)
 800c614:	b988      	cbnz	r0, 800c63a <BSP_CAMERA_SetMirrorFlip+0x26>
  else if(Camera_Cap.MirrorFlip == 0U)
 800c616:	4a0d      	ldr	r2, [pc, #52]	; (800c64c <BSP_CAMERA_SetMirrorFlip+0x38>)
 800c618:	69d2      	ldr	r2, [r2, #28]
 800c61a:	b1a2      	cbz	r2, 800c646 <BSP_CAMERA_SetMirrorFlip+0x32>
  else if(Camera_Drv->MirrorFlipConfig(Camera_CompObj, MirrorFlip)  < 0)
 800c61c:	4a0c      	ldr	r2, [pc, #48]	; (800c650 <BSP_CAMERA_SetMirrorFlip+0x3c>)
{
 800c61e:	b538      	push	{r3, r4, r5, lr}
  else if(Camera_Drv->MirrorFlipConfig(Camera_CompObj, MirrorFlip)  < 0)
 800c620:	4b0c      	ldr	r3, [pc, #48]	; (800c654 <BSP_CAMERA_SetMirrorFlip+0x40>)
 800c622:	4604      	mov	r4, r0
 800c624:	6810      	ldr	r0, [r2, #0]
 800c626:	460d      	mov	r5, r1
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c62c:	4798      	blx	r3
 800c62e:	2800      	cmp	r0, #0
 800c630:	db06      	blt.n	800c640 <BSP_CAMERA_SetMirrorFlip+0x2c>
    Camera_Ctx[Instance].MirrorFlip = MirrorFlip;
 800c632:	4b09      	ldr	r3, [pc, #36]	; (800c658 <BSP_CAMERA_SetMirrorFlip+0x44>)
    ret = BSP_ERROR_NONE;
 800c634:	4620      	mov	r0, r4
    Camera_Ctx[Instance].MirrorFlip = MirrorFlip;
 800c636:	625d      	str	r5, [r3, #36]	; 0x24
}
 800c638:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800c63a:	f06f 0001 	mvn.w	r0, #1
 800c63e:	4770      	bx	lr
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c640:	f06f 0004 	mvn.w	r0, #4
}
 800c644:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800c646:	f06f 000a 	mvn.w	r0, #10
}
 800c64a:	4770      	bx	lr
 800c64c:	2400916c 	.word	0x2400916c
 800c650:	24009194 	.word	0x24009194
 800c654:	24009198 	.word	0x24009198
 800c658:	2400a258 	.word	0x2400a258

0800c65c <BSP_CAMERA_PwrDown>:
  if(Instance >= CAMERA_INSTANCES_NBR)
 800c65c:	bb18      	cbnz	r0, 800c6a6 <BSP_CAMERA_PwrDown+0x4a>
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800c65e:	4b13      	ldr	r3, [pc, #76]	; (800c6ac <BSP_CAMERA_PwrDown+0x50>)
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800c660:	2202      	movs	r2, #2
{
 800c662:	b5f0      	push	{r4, r5, r6, r7, lr}
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800c664:	f8d3 40e0 	ldr.w	r4, [r3, #224]	; 0xe0
{
 800c668:	b087      	sub	sp, #28
    gpio_init_structure.Pin       = GPIO_PIN_14;
 800c66a:	f44f 4680 	mov.w	r6, #16384	; 0x4000
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800c66e:	2701      	movs	r7, #1
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800c670:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 800c674:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 800c676:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800c678:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
 800c67c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    gpio_init_structure.Pull      = GPIO_NOPULL;
 800c680:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800c682:	f403 7300 	and.w	r3, r3, #512	; 0x200
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 800c686:	480a      	ldr	r0, [pc, #40]	; (800c6b0 <BSP_CAMERA_PwrDown+0x54>)
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800c688:	9204      	str	r2, [sp, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800c68a:	9300      	str	r3, [sp, #0]
 800c68c:	9b00      	ldr	r3, [sp, #0]
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800c68e:	e9cd 6701 	strd	r6, r7, [sp, #4]
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 800c692:	f003 fed9 	bl	8010448 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_14, GPIO_PIN_SET);
 800c696:	463a      	mov	r2, r7
 800c698:	4631      	mov	r1, r6
 800c69a:	4805      	ldr	r0, [pc, #20]	; (800c6b0 <BSP_CAMERA_PwrDown+0x54>)
 800c69c:	f004 f8ce 	bl	801083c <HAL_GPIO_WritePin>
  int32_t ret = BSP_ERROR_NONE;
 800c6a0:	4628      	mov	r0, r5
}
 800c6a2:	b007      	add	sp, #28
 800c6a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800c6a6:	f06f 0001 	mvn.w	r0, #1
}
 800c6aa:	4770      	bx	lr
 800c6ac:	58024400 	.word	0x58024400
 800c6b0:	58022400 	.word	0x58022400

0800c6b4 <BSP_CAMERA_IRQHandler>:
  HAL_DCMI_IRQHandler(&hcamera_dcmi);
 800c6b4:	4801      	ldr	r0, [pc, #4]	; (800c6bc <BSP_CAMERA_IRQHandler+0x8>)
 800c6b6:	f001 bb5d 	b.w	800dd74 <HAL_DCMI_IRQHandler>
 800c6ba:	bf00      	nop
 800c6bc:	2400a208 	.word	0x2400a208

0800c6c0 <BSP_CAMERA_DMA_IRQHandler>:
  HAL_DMA_IRQHandler(hcamera_dcmi.DMA_Handle);
 800c6c0:	4b01      	ldr	r3, [pc, #4]	; (800c6c8 <BSP_CAMERA_DMA_IRQHandler+0x8>)
 800c6c2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800c6c4:	f002 bce6 	b.w	800f094 <HAL_DMA_IRQHandler>
 800c6c8:	2400a208 	.word	0x2400a208

0800c6cc <BSP_CAMERA_LineEventCallback>:
}
 800c6cc:	4770      	bx	lr
 800c6ce:	bf00      	nop

0800c6d0 <HAL_DCMI_LineEventCallback>:
{
 800c6d0:	b508      	push	{r3, lr}
  BSP_CAMERA_LineEventCallback(0);
 800c6d2:	2000      	movs	r0, #0
 800c6d4:	f7ff fffa 	bl	800c6cc <BSP_CAMERA_LineEventCallback>
}
 800c6d8:	bd08      	pop	{r3, pc}
 800c6da:	bf00      	nop

0800c6dc <HAL_DCMI_FrameEventCallback>:
{
 800c6dc:	b508      	push	{r3, lr}
  BSP_CAMERA_FrameEventCallback(0);
 800c6de:	2000      	movs	r0, #0
 800c6e0:	f7f5 f96e 	bl	80019c0 <BSP_CAMERA_FrameEventCallback>
}
 800c6e4:	bd08      	pop	{r3, pc}
 800c6e6:	bf00      	nop

0800c6e8 <HAL_DCMI_VsyncEventCallback>:
{
 800c6e8:	b508      	push	{r3, lr}
  BSP_CAMERA_VsyncEventCallback(0);
 800c6ea:	2000      	movs	r0, #0
 800c6ec:	f7f5 f984 	bl	80019f8 <BSP_CAMERA_VsyncEventCallback>
}
 800c6f0:	bd08      	pop	{r3, pc}
 800c6f2:	bf00      	nop

0800c6f4 <HAL_DCMI_ErrorCallback>:
{
 800c6f4:	b508      	push	{r3, lr}
  BSP_CAMERA_ErrorCallback(0);
 800c6f6:	2000      	movs	r0, #0
 800c6f8:	f7f5 f9b0 	bl	8001a5c <BSP_CAMERA_ErrorCallback>
}
 800c6fc:	bd08      	pop	{r3, pc}
 800c6fe:	bf00      	nop

0800c700 <BSP_LCD_SetActiveLayer>:
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 800c700:	b910      	cbnz	r0, 800c708 <BSP_LCD_SetActiveLayer+0x8>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 800c702:	4b03      	ldr	r3, [pc, #12]	; (800c710 <BSP_LCD_SetActiveLayer+0x10>)
 800c704:	6099      	str	r1, [r3, #8]
 800c706:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 800c708:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 800c70c:	4770      	bx	lr
 800c70e:	bf00      	nop
 800c710:	2400a334 	.word	0x2400a334

0800c714 <BSP_LCD_GetPixelFormat>:
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 800c714:	b918      	cbnz	r0, 800c71e <BSP_LCD_GetPixelFormat+0xa>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 800c716:	4b03      	ldr	r3, [pc, #12]	; (800c724 <BSP_LCD_GetPixelFormat+0x10>)
 800c718:	68db      	ldr	r3, [r3, #12]
 800c71a:	600b      	str	r3, [r1, #0]
 800c71c:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 800c71e:	f06f 0001 	mvn.w	r0, #1
  }

  return ret;
}
 800c722:	4770      	bx	lr
 800c724:	2400a334 	.word	0x2400a334

0800c728 <BSP_LCD_GetXSize>:
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 800c728:	b948      	cbnz	r0, 800c73e <BSP_LCD_GetXSize+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if(Lcd_Drv->GetXSize != NULL)
 800c72a:	4b06      	ldr	r3, [pc, #24]	; (800c744 <BSP_LCD_GetXSize+0x1c>)
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c730:	b11b      	cbz	r3, 800c73a <BSP_LCD_GetXSize+0x12>
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 800c732:	4b05      	ldr	r3, [pc, #20]	; (800c748 <BSP_LCD_GetXSize+0x20>)
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	600b      	str	r3, [r1, #0]
 800c738:	4770      	bx	lr
  int32_t ret = BSP_ERROR_NONE;
 800c73a:	4618      	mov	r0, r3
  }

  return ret;
}
 800c73c:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 800c73e:	f06f 0001 	mvn.w	r0, #1
 800c742:	4770      	bx	lr
 800c744:	2400926c 	.word	0x2400926c
 800c748:	2400a334 	.word	0x2400a334

0800c74c <BSP_LCD_GetYSize>:
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= LCD_INSTANCES_NBR)
 800c74c:	b948      	cbnz	r0, 800c762 <BSP_LCD_GetYSize+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else if(Lcd_Drv->GetYSize != NULL)
 800c74e:	4b06      	ldr	r3, [pc, #24]	; (800c768 <BSP_LCD_GetYSize+0x1c>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c754:	b11b      	cbz	r3, 800c75e <BSP_LCD_GetYSize+0x12>
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 800c756:	4b05      	ldr	r3, [pc, #20]	; (800c76c <BSP_LCD_GetYSize+0x20>)
 800c758:	685b      	ldr	r3, [r3, #4]
 800c75a:	600b      	str	r3, [r1, #0]
 800c75c:	4770      	bx	lr
  int32_t ret = BSP_ERROR_NONE;
 800c75e:	4618      	mov	r0, r3
  }

  return ret;
}
 800c760:	4770      	bx	lr
    ret = BSP_ERROR_WRONG_PARAM;
 800c762:	f06f 0001 	mvn.w	r0, #1
 800c766:	4770      	bx	lr
 800c768:	2400926c 	.word	0x2400926c
 800c76c:	2400a334 	.word	0x2400a334

0800c770 <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 800c770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c774:	e9dd 6509 	ldrd	r6, r5, [sp, #36]	; 0x24
    }
    pData += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
 800c778:	b32d      	cbz	r5, 800c7c6 <BSP_LCD_FillRGBRect+0x56>
 800c77a:	b326      	cbz	r6, 800c7c6 <BSP_LCD_FillRGBRect+0x56>
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800c77c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800c780:	4c18      	ldr	r4, [pc, #96]	; (800c7e4 <BSP_LCD_FillRGBRect+0x74>)
 800c782:	468a      	mov	sl, r1
 800c784:	eb05 0902 	add.w	r9, r5, r2
 800c788:	eb06 0c01 	add.w	ip, r6, r1
 800c78c:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800c790:	f8df 8054 	ldr.w	r8, [pc, #84]	; 800c7e8 <BSP_LCD_FillRGBRect+0x78>
 800c794:	f04f 0e34 	mov.w	lr, #52	; 0x34
{
 800c798:	4650      	mov	r0, sl
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800c79a:	68a5      	ldr	r5, [r4, #8]
 800c79c:	6826      	ldr	r6, [r4, #0]
 800c79e:	fb0e 8505 	mla	r5, lr, r5, r8
 800c7a2:	681f      	ldr	r7, [r3, #0]
 800c7a4:	fb06 0602 	mla	r6, r6, r2, r0
 800c7a8:	6ca9      	ldr	r1, [r5, #72]	; 0x48
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800c7aa:	fa1f fb87 	uxth.w	fp, r7
 800c7ae:	6ded      	ldr	r5, [r5, #92]	; 0x5c
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800c7b0:	b961      	cbnz	r1, 800c7cc <BSP_LCD_FillRGBRect+0x5c>
 800c7b2:	3001      	adds	r0, #1
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800c7b4:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
      pData += Lcd_Ctx[Instance].BppFactor;
 800c7b8:	6925      	ldr	r5, [r4, #16]
    for(j = 0; j < Width; j++)
 800c7ba:	4584      	cmp	ip, r0
      pData += Lcd_Ctx[Instance].BppFactor;
 800c7bc:	442b      	add	r3, r5
    for(j = 0; j < Width; j++)
 800c7be:	d1ec      	bne.n	800c79a <BSP_LCD_FillRGBRect+0x2a>
 800c7c0:	3201      	adds	r2, #1
  for(i = 0; i < Height; i++)
 800c7c2:	454a      	cmp	r2, r9
 800c7c4:	d1e8      	bne.n	800c798 <BSP_LCD_FillRGBRect+0x28>
}
 800c7c6:	2000      	movs	r0, #0
 800c7c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7cc:	3001      	adds	r0, #1
      pData += Lcd_Ctx[Instance].BppFactor;
 800c7ce:	6927      	ldr	r7, [r4, #16]
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800c7d0:	f825 b016 	strh.w	fp, [r5, r6, lsl #1]
    for(j = 0; j < Width; j++)
 800c7d4:	4584      	cmp	ip, r0
      pData += Lcd_Ctx[Instance].BppFactor;
 800c7d6:	443b      	add	r3, r7
    for(j = 0; j < Width; j++)
 800c7d8:	d1df      	bne.n	800c79a <BSP_LCD_FillRGBRect+0x2a>
 800c7da:	3201      	adds	r2, #1
  for(i = 0; i < Height; i++)
 800c7dc:	454a      	cmp	r2, r9
 800c7de:	d1db      	bne.n	800c798 <BSP_LCD_FillRGBRect+0x28>
 800c7e0:	e7f1      	b.n	800c7c6 <BSP_LCD_FillRGBRect+0x56>
 800c7e2:	bf00      	nop
 800c7e4:	2400a334 	.word	0x2400a334
 800c7e8:	2400a28c 	.word	0x2400a28c

0800c7ec <BSP_LCD_ReadPixel>:
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800c7ec:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
{
 800c7f0:	b4f0      	push	{r4, r5, r6, r7}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800c7f2:	4d0d      	ldr	r5, [pc, #52]	; (800c828 <BSP_LCD_ReadPixel+0x3c>)
 800c7f4:	0084      	lsls	r4, r0, #2
 800c7f6:	4e0d      	ldr	r6, [pc, #52]	; (800c82c <BSP_LCD_ReadPixel+0x40>)
 800c7f8:	2734      	movs	r7, #52	; 0x34
 800c7fa:	1928      	adds	r0, r5, r4
 800c7fc:	592c      	ldr	r4, [r5, r4]
 800c7fe:	6880      	ldr	r0, [r0, #8]
 800c800:	fb04 1202 	mla	r2, r4, r2, r1
 800c804:	fb07 6000 	mla	r0, r7, r0, r6
 800c808:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800c80a:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 800c80c:	b134      	cbz	r4, 800c81c <BSP_LCD_ReadPixel+0x30>
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 800c80e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
}
 800c812:	2000      	movs	r0, #0
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 800c814:	b292      	uxth	r2, r2
}
 800c816:	bcf0      	pop	{r4, r5, r6, r7}
 800c818:	601a      	str	r2, [r3, #0]
 800c81a:	4770      	bx	lr
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 800c81c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
}
 800c820:	2000      	movs	r0, #0
 800c822:	601a      	str	r2, [r3, #0]
 800c824:	bcf0      	pop	{r4, r5, r6, r7}
 800c826:	4770      	bx	lr
 800c828:	2400a334 	.word	0x2400a334
 800c82c:	2400a28c 	.word	0x2400a28c

0800c830 <BSP_LCD_WritePixel>:
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800c830:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
{
 800c834:	b4f0      	push	{r4, r5, r6, r7}
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800c836:	4d0c      	ldr	r5, [pc, #48]	; (800c868 <BSP_LCD_WritePixel+0x38>)
 800c838:	0084      	lsls	r4, r0, #2
 800c83a:	4e0c      	ldr	r6, [pc, #48]	; (800c86c <BSP_LCD_WritePixel+0x3c>)
 800c83c:	2734      	movs	r7, #52	; 0x34
 800c83e:	1928      	adds	r0, r5, r4
 800c840:	592c      	ldr	r4, [r5, r4]
 800c842:	6880      	ldr	r0, [r0, #8]
 800c844:	fb04 1202 	mla	r2, r4, r2, r1
 800c848:	fb07 6000 	mla	r0, r7, r0, r6
 800c84c:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800c84e:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 800c850:	b12c      	cbz	r4, 800c85e <BSP_LCD_WritePixel+0x2e>
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800c852:	b29b      	uxth	r3, r3
  }

  return BSP_ERROR_NONE;
}
 800c854:	2000      	movs	r0, #0
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800c856:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
}
 800c85a:	bcf0      	pop	{r4, r5, r6, r7}
 800c85c:	4770      	bx	lr
 800c85e:	2000      	movs	r0, #0
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800c860:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
 800c864:	bcf0      	pop	{r4, r5, r6, r7}
 800c866:	4770      	bx	lr
 800c868:	2400a334 	.word	0x2400a334
 800c86c:	2400a28c 	.word	0x2400a28c

0800c870 <DSI_IO_Read>:
  * @param  pData pointer to a buffer to store the payload of a read back operation.
  * @param  Size  Data size to be read (in byte).
  * @retval BSP status
  */
static int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t *pData, uint16_t Size)
{
 800c870:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  if(HAL_DSI_Read(&hlcd_dsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 800c872:	2406      	movs	r4, #6
{
 800c874:	b084      	sub	sp, #16
  if(HAL_DSI_Read(&hlcd_dsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 800c876:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800c87a:	9400      	str	r4, [sp, #0]
 800c87c:	4601      	mov	r1, r0
 800c87e:	4805      	ldr	r0, [pc, #20]	; (800c894 <DSI_IO_Read+0x24>)
 800c880:	f003 fd30 	bl	80102e4 <HAL_DSI_Read>
 800c884:	2800      	cmp	r0, #0
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }

  return ret;
}
 800c886:	bf14      	ite	ne
 800c888:	f06f 0007 	mvnne.w	r0, #7
 800c88c:	2000      	moveq	r0, #0
 800c88e:	b004      	add	sp, #16
 800c890:	bd10      	pop	{r4, pc}
 800c892:	bf00      	nop
 800c894:	2400a350 	.word	0x2400a350

0800c898 <BSP_LCD_DrawBitmap>:
{
 800c898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800c89c:	00c4      	lsls	r4, r0, #3
 800c89e:	4e4f      	ldr	r6, [pc, #316]	; (800c9dc <BSP_LCD_DrawBitmap+0x144>)
 800c8a0:	f04f 0b34 	mov.w	fp, #52	; 0x34
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800c8a4:	f893 c014 	ldrb.w	ip, [r3, #20]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800c8a8:	1a25      	subs	r5, r4, r0
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800c8aa:	7e1f      	ldrb	r7, [r3, #24]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800c8ac:	f893 900c 	ldrb.w	r9, [r3, #12]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800c8b0:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800c8b4:	00ad      	lsls	r5, r5, #2
{
 800c8b6:	b085      	sub	sp, #20
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800c8b8:	043f      	lsls	r7, r7, #16
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800c8ba:	eb06 0a05 	add.w	sl, r6, r5
 800c8be:	f856 8005 	ldr.w	r8, [r6, r5]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800c8c2:	ea4f 4909 	mov.w	r9, r9, lsl #16
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800c8c6:	f8da 5008 	ldr.w	r5, [sl, #8]
 800c8ca:	fb08 1802 	mla	r8, r8, r2, r1
 800c8ce:	4a44      	ldr	r2, [pc, #272]	; (800c9e0 <BSP_LCD_DrawBitmap+0x148>)
 800c8d0:	f8da 1010 	ldr.w	r1, [sl, #16]
 800c8d4:	fb0b 2e05 	mla	lr, fp, r5, r2
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800c8d8:	f893 a017 	ldrb.w	sl, [r3, #23]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800c8dc:	f893 b013 	ldrb.w	fp, [r3, #19]
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800c8e0:	f8de e05c 	ldr.w	lr, [lr, #92]	; 0x5c
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800c8e4:	eb07 270a 	add.w	r7, r7, sl, lsl #8
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800c8e8:	7add      	ldrb	r5, [r3, #11]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800c8ea:	eb0c 2c0b 	add.w	ip, ip, fp, lsl #8
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800c8ee:	fb01 e808 	mla	r8, r1, r8, lr
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800c8f2:	f893 a016 	ldrb.w	sl, [r3, #22]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800c8f6:	7c99      	ldrb	r1, [r3, #18]
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800c8f8:	eb09 2505 	add.w	r5, r9, r5, lsl #8
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 800c8fc:	7f5a      	ldrb	r2, [r3, #29]
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800c8fe:	44ba      	add	sl, r7
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 800c900:	f893 901c 	ldrb.w	r9, [r3, #28]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800c904:	4461      	add	r1, ip
 800c906:	7d5f      	ldrb	r7, [r3, #21]
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 800c908:	eb09 2902 	add.w	r9, r9, r2, lsl #8
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800c90c:	7a9a      	ldrb	r2, [r3, #10]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800c90e:	eb01 6107 	add.w	r1, r1, r7, lsl #24
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800c912:	4415      	add	r5, r2
 800c914:	7b5a      	ldrb	r2, [r3, #13]
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800c916:	9103      	str	r1, [sp, #12]
  if ((bit_pixel/8U) == 4U)
 800c918:	f1a9 0120 	sub.w	r1, r9, #32
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800c91c:	eb05 6202 	add.w	r2, r5, r2, lsl #24
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800c920:	7e5d      	ldrb	r5, [r3, #25]
  if ((bit_pixel/8U) == 4U)
 800c922:	2907      	cmp	r1, #7
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800c924:	eb0a 6a05 	add.w	sl, sl, r5, lsl #24
  if ((bit_pixel/8U) == 4U)
 800c928:	d955      	bls.n	800c9d6 <BSP_LCD_DrawBitmap+0x13e>
  else if ((bit_pixel/8U) == 2U)
 800c92a:	f1a9 0110 	sub.w	r1, r9, #16
    input_color_mode = DMA2D_INPUT_RGB565;
 800c92e:	2907      	cmp	r1, #7
 800c930:	bf8c      	ite	hi
 800c932:	f04f 0b01 	movhi.w	fp, #1
 800c936:	f04f 0b02 	movls.w	fp, #2
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 800c93a:	ea4f 09d9 	mov.w	r9, r9, lsr #3
 800c93e:	9903      	ldr	r1, [sp, #12]
 800c940:	f10a 35ff 	add.w	r5, sl, #4294967295
 800c944:	fb01 f909 	mul.w	r9, r1, r9
 800c948:	fb09 2505 	mla	r5, r9, r5, r2
 800c94c:	441d      	add	r5, r3
  for(index=0; index < height; index++)
 800c94e:	f1ba 0f00 	cmp.w	sl, #0
 800c952:	d03c      	beq.n	800c9ce <BSP_LCD_DrawBitmap+0x136>
  switch(Lcd_Ctx[Instance].PixelFormat)
 800c954:	1a20      	subs	r0, r4, r0
    pbmp -= width*(bit_pixel/8U);
 800c956:	f1c9 0900 	rsb	r9, r9, #0
  for(index=0; index < height; index++)
 800c95a:	2700      	movs	r7, #0
 800c95c:	4c21      	ldr	r4, [pc, #132]	; (800c9e4 <BSP_LCD_DrawBitmap+0x14c>)
  switch(Lcd_Ctx[Instance].PixelFormat)
 800c95e:	eb06 0680 	add.w	r6, r6, r0, lsl #2
 800c962:	e006      	b.n	800c972 <BSP_LCD_DrawBitmap+0xda>
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 800c964:	6833      	ldr	r3, [r6, #0]
  for(index=0; index < height; index++)
 800c966:	45ba      	cmp	sl, r7
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 800c968:	6932      	ldr	r2, [r6, #16]
    pbmp -= width*(bit_pixel/8U);
 800c96a:	444d      	add	r5, r9
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 800c96c:	fb02 8803 	mla	r8, r2, r3, r8
  for(index=0; index < height; index++)
 800c970:	d02d      	beq.n	800c9ce <BSP_LCD_DrawBitmap+0x136>
  switch(Lcd_Ctx[Instance].PixelFormat)
 800c972:	68f3      	ldr	r3, [r6, #12]
  hlcd_dma2d.Init.OutputOffset = 0;
 800c974:	2200      	movs	r2, #0
  hlcd_dma2d.Instance = DMA2D;
 800c976:	491c      	ldr	r1, [pc, #112]	; (800c9e8 <BSP_LCD_DrawBitmap+0x150>)
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 800c978:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 800c97c:	2b02      	cmp	r3, #2
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 800c97e:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
  hlcd_dma2d.Instance = DMA2D;
 800c982:	6021      	str	r1, [r4, #0]
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 800c984:	f04f 01ff 	mov.w	r1, #255	; 0xff
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 800c988:	bf18      	it	ne
 800c98a:	4613      	movne	r3, r2
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 800c98c:	6060      	str	r0, [r4, #4]
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800c98e:	64e2      	str	r2, [r4, #76]	; 0x4c
  for(index=0; index < height; index++)
 800c990:	3701      	adds	r7, #1
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800c992:	4814      	ldr	r0, [pc, #80]	; (800c9e4 <BSP_LCD_DrawBitmap+0x14c>)
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 800c994:	6462      	str	r2, [r4, #68]	; 0x44
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 800c996:	6521      	str	r1, [r4, #80]	; 0x50
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 800c998:	e9c4 3202 	strd	r3, r2, [r4, #8]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800c99c:	f002 feba 	bl	800f714 <HAL_DMA2D_Init>
 800c9a0:	2800      	cmp	r0, #0
 800c9a2:	d1df      	bne.n	800c964 <BSP_LCD_DrawBitmap+0xcc>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 800c9a4:	2101      	movs	r1, #1
 800c9a6:	480f      	ldr	r0, [pc, #60]	; (800c9e4 <BSP_LCD_DrawBitmap+0x14c>)
 800c9a8:	f003 f8fe 	bl	800fba8 <HAL_DMA2D_ConfigLayer>
 800c9ac:	2800      	cmp	r0, #0
 800c9ae:	d1d9      	bne.n	800c964 <BSP_LCD_DrawBitmap+0xcc>
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 800c9b0:	2001      	movs	r0, #1
 800c9b2:	9b03      	ldr	r3, [sp, #12]
 800c9b4:	4642      	mov	r2, r8
 800c9b6:	4629      	mov	r1, r5
 800c9b8:	9000      	str	r0, [sp, #0]
 800c9ba:	480a      	ldr	r0, [pc, #40]	; (800c9e4 <BSP_LCD_DrawBitmap+0x14c>)
 800c9bc:	f002 ff72 	bl	800f8a4 <HAL_DMA2D_Start>
 800c9c0:	2800      	cmp	r0, #0
 800c9c2:	d1cf      	bne.n	800c964 <BSP_LCD_DrawBitmap+0xcc>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 800c9c4:	2132      	movs	r1, #50	; 0x32
 800c9c6:	4807      	ldr	r0, [pc, #28]	; (800c9e4 <BSP_LCD_DrawBitmap+0x14c>)
 800c9c8:	f002 ffc6 	bl	800f958 <HAL_DMA2D_PollForTransfer>
 800c9cc:	e7ca      	b.n	800c964 <BSP_LCD_DrawBitmap+0xcc>
}
 800c9ce:	2000      	movs	r0, #0
 800c9d0:	b005      	add	sp, #20
 800c9d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color_mode = DMA2D_INPUT_ARGB8888;
 800c9d6:	f04f 0b00 	mov.w	fp, #0
 800c9da:	e7ae      	b.n	800c93a <BSP_LCD_DrawBitmap+0xa2>
 800c9dc:	2400a334 	.word	0x2400a334
 800c9e0:	2400a28c 	.word	0x2400a28c
 800c9e4:	2400a36c 	.word	0x2400a36c
 800c9e8:	52001000 	.word	0x52001000

0800c9ec <BSP_LCD_DrawVLine>:
{
 800c9ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9f0:	4692      	mov	sl, r2
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800c9f2:	00c2      	lsls	r2, r0, #3
{
 800c9f4:	461d      	mov	r5, r3
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800c9f6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800cadc <BSP_LCD_DrawVLine+0xf0>
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 800c9fa:	eb0a 0e03 	add.w	lr, sl, r3
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800c9fe:	1a13      	subs	r3, r2, r0
{
 800ca00:	4689      	mov	r9, r1
  switch(Lcd_Ctx[Instance].PixelFormat)
 800ca02:	1a10      	subs	r0, r2, r0
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800ca04:	009b      	lsls	r3, r3, #2
 800ca06:	f04f 0834 	mov.w	r8, #52	; 0x34
 800ca0a:	4f32      	ldr	r7, [pc, #200]	; (800cad4 <BSP_LCD_DrawVLine+0xe8>)
{
 800ca0c:	b083      	sub	sp, #12
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800ca0e:	eb0c 0103 	add.w	r1, ip, r3
 800ca12:	f85c 6003 	ldr.w	r6, [ip, r3]
  switch(Lcd_Ctx[Instance].PixelFormat)
 800ca16:	eb0c 0c80 	add.w	ip, ip, r0, lsl #2
{
 800ca1a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800ca1c:	688b      	ldr	r3, [r1, #8]
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 800ca1e:	1e72      	subs	r2, r6, #1
  switch(Lcd_Ctx[Instance].PixelFormat)
 800ca20:	f8dc 000c 	ldr.w	r0, [ip, #12]
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800ca24:	fb08 7703 	mla	r7, r8, r3, r7
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 800ca28:	684b      	ldr	r3, [r1, #4]
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800ca2a:	f8d1 8010 	ldr.w	r8, [r1, #16]
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 800ca2e:	459e      	cmp	lr, r3
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800ca30:	6dff      	ldr	r7, [r7, #92]	; 0x5c
    Length = Lcd_Ctx[Instance].YSize - Ypos;
 800ca32:	bf88      	it	hi
 800ca34:	eba3 050a 	subhi.w	r5, r3, sl
  switch(Lcd_Ctx[Instance].PixelFormat)
 800ca38:	2802      	cmp	r0, #2
 800ca3a:	d132      	bne.n	800caa2 <BSP_LCD_DrawVLine+0xb6>
    input_color = CONVERTRGB5652ARGB8888(Color);
 800ca3c:	f004 011f 	and.w	r1, r4, #31
 800ca40:	f3c4 2cc4 	ubfx	ip, r4, #11, #5
 800ca44:	f3c4 1445 	ubfx	r4, r4, #5, #6
 800ca48:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 800ca4c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 800ca50:	ebc1 1341 	rsb	r3, r1, r1, lsl #5
 800ca54:	ebcc 1c4c 	rsb	ip, ip, ip, lsl #5
 800ca58:	3317      	adds	r3, #23
 800ca5a:	eb04 11c4 	add.w	r1, r4, r4, lsl #7
 800ca5e:	f10c 0c17 	add.w	ip, ip, #23
 800ca62:	099b      	lsrs	r3, r3, #6
 800ca64:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 800ca68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ca6c:	ea4f 1c9c 	mov.w	ip, ip, lsr #6
 800ca70:	3421      	adds	r4, #33	; 0x21
 800ca72:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 800ca76:	09a4      	lsrs	r4, r4, #6
 800ca78:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 800ca7c:	f8df b060 	ldr.w	fp, [pc, #96]	; 800cae0 <BSP_LCD_DrawVLine+0xf4>
 800ca80:	f44f 3140 	mov.w	r1, #196608	; 0x30000
  hlcd_dma2d.Instance = DMA2D;
 800ca84:	4b14      	ldr	r3, [pc, #80]	; (800cad8 <BSP_LCD_DrawVLine+0xec>)
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 800ca86:	f8cb 0008 	str.w	r0, [fp, #8]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800ca8a:	4658      	mov	r0, fp
  hlcd_dma2d.Init.OutputOffset = OffLine;
 800ca8c:	f8cb 200c 	str.w	r2, [fp, #12]
  hlcd_dma2d.Instance = DMA2D;
 800ca90:	e9cb 3100 	strd	r3, r1, [fp]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800ca94:	f002 fe3e 	bl	800f714 <HAL_DMA2D_Init>
 800ca98:	b128      	cbz	r0, 800caa6 <BSP_LCD_DrawVLine+0xba>
}
 800ca9a:	2000      	movs	r0, #0
 800ca9c:	b003      	add	sp, #12
 800ca9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 800caa2:	2000      	movs	r0, #0
 800caa4:	e7ea      	b.n	800ca7c <BSP_LCD_DrawVLine+0x90>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 800caa6:	2101      	movs	r1, #1
 800caa8:	4658      	mov	r0, fp
 800caaa:	f003 f87d 	bl	800fba8 <HAL_DMA2D_ConfigLayer>
 800caae:	2800      	cmp	r0, #0
 800cab0:	d1f3      	bne.n	800ca9a <BSP_LCD_DrawVLine+0xae>
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800cab2:	fb0a 9206 	mla	r2, sl, r6, r9
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800cab6:	4621      	mov	r1, r4
 800cab8:	9500      	str	r5, [sp, #0]
 800caba:	2301      	movs	r3, #1
 800cabc:	fb08 7202 	mla	r2, r8, r2, r7
 800cac0:	4658      	mov	r0, fp
 800cac2:	f002 feef 	bl	800f8a4 <HAL_DMA2D_Start>
 800cac6:	2800      	cmp	r0, #0
 800cac8:	d1e7      	bne.n	800ca9a <BSP_LCD_DrawVLine+0xae>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 800caca:	4658      	mov	r0, fp
 800cacc:	2119      	movs	r1, #25
 800cace:	f002 ff43 	bl	800f958 <HAL_DMA2D_PollForTransfer>
 800cad2:	e7e2      	b.n	800ca9a <BSP_LCD_DrawVLine+0xae>
 800cad4:	2400a28c 	.word	0x2400a28c
 800cad8:	52001000 	.word	0x52001000
 800cadc:	2400a334 	.word	0x2400a334
 800cae0:	2400a36c 	.word	0x2400a36c

0800cae4 <DSI_IO_Write>:
  if(Size <= 1U)
 800cae4:	2b01      	cmp	r3, #1
{
 800cae6:	b530      	push	{r4, r5, lr}
 800cae8:	460d      	mov	r5, r1
 800caea:	b083      	sub	sp, #12
  if(Size <= 1U)
 800caec:	d90a      	bls.n	800cb04 <DSI_IO_Write+0x20>
    if(HAL_DSI_LongWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 800caee:	9201      	str	r2, [sp, #4]
 800caf0:	4601      	mov	r1, r0
 800caf2:	9500      	str	r5, [sp, #0]
 800caf4:	2239      	movs	r2, #57	; 0x39
 800caf6:	480a      	ldr	r0, [pc, #40]	; (800cb20 <DSI_IO_Write+0x3c>)
 800caf8:	f003 fb88 	bl	801020c <HAL_DSI_LongWrite>
 800cafc:	b960      	cbnz	r0, 800cb18 <DSI_IO_Write+0x34>
  int32_t ret = BSP_ERROR_NONE;
 800cafe:	2000      	movs	r0, #0
}
 800cb00:	b003      	add	sp, #12
 800cb02:	bd30      	pop	{r4, r5, pc}
    if(HAL_DSI_ShortWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 800cb04:	5cd4      	ldrb	r4, [r2, r3]
 800cb06:	460b      	mov	r3, r1
 800cb08:	2215      	movs	r2, #21
 800cb0a:	4601      	mov	r1, r0
 800cb0c:	9400      	str	r4, [sp, #0]
 800cb0e:	4804      	ldr	r0, [pc, #16]	; (800cb20 <DSI_IO_Write+0x3c>)
 800cb10:	f003 fb50 	bl	80101b4 <HAL_DSI_ShortWrite>
 800cb14:	2800      	cmp	r0, #0
 800cb16:	d0f2      	beq.n	800cafe <DSI_IO_Write+0x1a>
      ret = BSP_ERROR_BUS_FAILURE;
 800cb18:	f06f 0007 	mvn.w	r0, #7
 800cb1c:	e7f0      	b.n	800cb00 <DSI_IO_Write+0x1c>
 800cb1e:	bf00      	nop
 800cb20:	2400a350 	.word	0x2400a350

0800cb24 <BSP_LCD_FillRect>:
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800cb24:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
{
 800cb28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800cb2c:	0080      	lsls	r0, r0, #2
 800cb2e:	4d31      	ldr	r5, [pc, #196]	; (800cbf4 <BSP_LCD_FillRect+0xd0>)
 800cb30:	4c31      	ldr	r4, [pc, #196]	; (800cbf8 <BSP_LCD_FillRect+0xd4>)
 800cb32:	2734      	movs	r7, #52	; 0x34
 800cb34:	eb05 0c00 	add.w	ip, r5, r0
{
 800cb38:	461e      	mov	r6, r3
 800cb3a:	4689      	mov	r9, r1
 800cb3c:	b083      	sub	sp, #12
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800cb3e:	f8dc 3008 	ldr.w	r3, [ip, #8]
{
 800cb42:	4692      	mov	sl, r2
  switch(Lcd_Ctx[Instance].PixelFormat)
 800cb44:	f8dc 100c 	ldr.w	r1, [ip, #12]
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800cb48:	fb07 4303 	mla	r3, r7, r3, r4
 800cb4c:	582d      	ldr	r5, [r5, r0]
  switch(Lcd_Ctx[Instance].PixelFormat)
 800cb4e:	2902      	cmp	r1, #2
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800cb50:	f8dc 8010 	ldr.w	r8, [ip, #16]
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 800cb54:	eba5 0206 	sub.w	r2, r5, r6
{
 800cb58:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800cb5a:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
  switch(Lcd_Ctx[Instance].PixelFormat)
 800cb5c:	d130      	bne.n	800cbc0 <BSP_LCD_FillRect+0x9c>
    input_color = CONVERTRGB5652ARGB8888(Color);
 800cb5e:	f004 031f 	and.w	r3, r4, #31
 800cb62:	f3c4 20c4 	ubfx	r0, r4, #11, #5
 800cb66:	f3c4 1445 	ubfx	r4, r4, #5, #6
 800cb6a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 800cb6e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 800cb72:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
 800cb76:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 800cb7a:	3317      	adds	r3, #23
 800cb7c:	eb04 1cc4 	add.w	ip, r4, r4, lsl #7
 800cb80:	3017      	adds	r0, #23
 800cb82:	099b      	lsrs	r3, r3, #6
 800cb84:	eb04 044c 	add.w	r4, r4, ip, lsl #1
 800cb88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cb8c:	0980      	lsrs	r0, r0, #6
 800cb8e:	3421      	adds	r4, #33	; 0x21
 800cb90:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cb94:	09a4      	lsrs	r4, r4, #6
 800cb96:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 800cb9a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800cc00 <BSP_LCD_FillRect+0xdc>
 800cb9e:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
  hlcd_dma2d.Instance = DMA2D;
 800cba2:	4b16      	ldr	r3, [pc, #88]	; (800cbfc <BSP_LCD_FillRect+0xd8>)
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800cba4:	4658      	mov	r0, fp
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 800cba6:	f8cb 1008 	str.w	r1, [fp, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 800cbaa:	f8cb 200c 	str.w	r2, [fp, #12]
  hlcd_dma2d.Instance = DMA2D;
 800cbae:	e9cb 3c00 	strd	r3, ip, [fp]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800cbb2:	f002 fdaf 	bl	800f714 <HAL_DMA2D_Init>
 800cbb6:	b128      	cbz	r0, 800cbc4 <BSP_LCD_FillRect+0xa0>
}
 800cbb8:	2000      	movs	r0, #0
 800cbba:	b003      	add	sp, #12
 800cbbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 800cbc0:	2100      	movs	r1, #0
 800cbc2:	e7ea      	b.n	800cb9a <BSP_LCD_FillRect+0x76>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 800cbc4:	2101      	movs	r1, #1
 800cbc6:	4658      	mov	r0, fp
 800cbc8:	f002 ffee 	bl	800fba8 <HAL_DMA2D_ConfigLayer>
 800cbcc:	2800      	cmp	r0, #0
 800cbce:	d1f3      	bne.n	800cbb8 <BSP_LCD_FillRect+0x94>
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800cbd0:	990c      	ldr	r1, [sp, #48]	; 0x30
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800cbd2:	fb0a 9205 	mla	r2, sl, r5, r9
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800cbd6:	4633      	mov	r3, r6
 800cbd8:	4658      	mov	r0, fp
 800cbda:	9100      	str	r1, [sp, #0]
 800cbdc:	4621      	mov	r1, r4
 800cbde:	fb08 7202 	mla	r2, r8, r2, r7
 800cbe2:	f002 fe5f 	bl	800f8a4 <HAL_DMA2D_Start>
 800cbe6:	2800      	cmp	r0, #0
 800cbe8:	d1e6      	bne.n	800cbb8 <BSP_LCD_FillRect+0x94>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 800cbea:	4658      	mov	r0, fp
 800cbec:	2119      	movs	r1, #25
 800cbee:	f002 feb3 	bl	800f958 <HAL_DMA2D_PollForTransfer>
 800cbf2:	e7e1      	b.n	800cbb8 <BSP_LCD_FillRect+0x94>
 800cbf4:	2400a334 	.word	0x2400a334
 800cbf8:	2400a28c 	.word	0x2400a28c
 800cbfc:	52001000 	.word	0x52001000
 800cc00:	2400a36c 	.word	0x2400a36c

0800cc04 <BSP_LCD_DrawHLine>:
{
 800cc04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc08:	469a      	mov	sl, r3
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800cc0a:	00c3      	lsls	r3, r0, #3
{
 800cc0c:	4691      	mov	r9, r2
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800cc0e:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 800ccf0 <BSP_LCD_DrawHLine+0xec>
 800cc12:	1a1a      	subs	r2, r3, r0
  switch(Lcd_Ctx[Instance].PixelFormat)
 800cc14:	1a1b      	subs	r3, r3, r0
{
 800cc16:	460e      	mov	r6, r1
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 800cc18:	4451      	add	r1, sl
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800cc1a:	0092      	lsls	r2, r2, #2
 800cc1c:	4f32      	ldr	r7, [pc, #200]	; (800cce8 <BSP_LCD_DrawHLine+0xe4>)
 800cc1e:	f04f 0e34 	mov.w	lr, #52	; 0x34
{
 800cc22:	b083      	sub	sp, #12
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800cc24:	f85c 5002 	ldr.w	r5, [ip, r2]
 800cc28:	eb0c 0802 	add.w	r8, ip, r2
  switch(Lcd_Ctx[Instance].PixelFormat)
 800cc2c:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
{
 800cc30:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 800cc32:	428d      	cmp	r5, r1
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800cc34:	f8d8 2008 	ldr.w	r2, [r8, #8]
  switch(Lcd_Ctx[Instance].PixelFormat)
 800cc38:	f8dc 100c 	ldr.w	r1, [ip, #12]
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800cc3c:	fb0e 7702 	mla	r7, lr, r2, r7
    Length = Lcd_Ctx[Instance].XSize - Xpos;
 800cc40:	bf38      	it	cc
 800cc42:	eba5 0a06 	subcc.w	sl, r5, r6
  switch(Lcd_Ctx[Instance].PixelFormat)
 800cc46:	2902      	cmp	r1, #2
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800cc48:	f8d8 8010 	ldr.w	r8, [r8, #16]
 800cc4c:	6dff      	ldr	r7, [r7, #92]	; 0x5c
  switch(Lcd_Ctx[Instance].PixelFormat)
 800cc4e:	d131      	bne.n	800ccb4 <BSP_LCD_DrawHLine+0xb0>
    input_color = CONVERTRGB5652ARGB8888(Color);
 800cc50:	f004 021f 	and.w	r2, r4, #31
 800cc54:	f3c4 20c4 	ubfx	r0, r4, #11, #5
 800cc58:	f3c4 1445 	ubfx	r4, r4, #5, #6
 800cc5c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 800cc60:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 800cc64:	ebc2 1342 	rsb	r3, r2, r2, lsl #5
 800cc68:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 800cc6c:	3317      	adds	r3, #23
 800cc6e:	eb04 12c4 	add.w	r2, r4, r4, lsl #7
 800cc72:	3017      	adds	r0, #23
 800cc74:	099b      	lsrs	r3, r3, #6
 800cc76:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 800cc7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cc7e:	0980      	lsrs	r0, r0, #6
 800cc80:	3421      	adds	r4, #33	; 0x21
 800cc82:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cc86:	09a4      	lsrs	r4, r4, #6
 800cc88:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 800cc8c:	f8df b064 	ldr.w	fp, [pc, #100]	; 800ccf4 <BSP_LCD_DrawHLine+0xf0>
 800cc90:	f44f 3040 	mov.w	r0, #196608	; 0x30000
  hlcd_dma2d.Init.OutputOffset = OffLine;
 800cc94:	2200      	movs	r2, #0
  hlcd_dma2d.Instance = DMA2D;
 800cc96:	4b15      	ldr	r3, [pc, #84]	; (800ccec <BSP_LCD_DrawHLine+0xe8>)
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 800cc98:	e9cb 0101 	strd	r0, r1, [fp, #4]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800cc9c:	4658      	mov	r0, fp
  hlcd_dma2d.Init.OutputOffset = OffLine;
 800cc9e:	f8cb 200c 	str.w	r2, [fp, #12]
  hlcd_dma2d.Instance = DMA2D;
 800cca2:	f8cb 3000 	str.w	r3, [fp]
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800cca6:	f002 fd35 	bl	800f714 <HAL_DMA2D_Init>
 800ccaa:	b128      	cbz	r0, 800ccb8 <BSP_LCD_DrawHLine+0xb4>
}
 800ccac:	2000      	movs	r0, #0
 800ccae:	b003      	add	sp, #12
 800ccb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 800ccb4:	2100      	movs	r1, #0
 800ccb6:	e7e9      	b.n	800cc8c <BSP_LCD_DrawHLine+0x88>
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 800ccb8:	2101      	movs	r1, #1
 800ccba:	4658      	mov	r0, fp
 800ccbc:	f002 ff74 	bl	800fba8 <HAL_DMA2D_ConfigLayer>
 800ccc0:	2800      	cmp	r0, #0
 800ccc2:	d1f3      	bne.n	800ccac <BSP_LCD_DrawHLine+0xa8>
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800ccc4:	fb09 6205 	mla	r2, r9, r5, r6
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800ccc8:	2501      	movs	r5, #1
 800ccca:	4653      	mov	r3, sl
 800cccc:	4621      	mov	r1, r4
 800ccce:	fb08 7202 	mla	r2, r8, r2, r7
 800ccd2:	4658      	mov	r0, fp
 800ccd4:	9500      	str	r5, [sp, #0]
 800ccd6:	f002 fde5 	bl	800f8a4 <HAL_DMA2D_Start>
 800ccda:	2800      	cmp	r0, #0
 800ccdc:	d1e6      	bne.n	800ccac <BSP_LCD_DrawHLine+0xa8>
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 800ccde:	4658      	mov	r0, fp
 800cce0:	2119      	movs	r1, #25
 800cce2:	f002 fe39 	bl	800f958 <HAL_DMA2D_PollForTransfer>
 800cce6:	e7e1      	b.n	800ccac <BSP_LCD_DrawHLine+0xa8>
 800cce8:	2400a28c 	.word	0x2400a28c
 800ccec:	52001000 	.word	0x52001000
 800ccf0:	2400a334 	.word	0x2400a334
 800ccf4:	2400a36c 	.word	0x2400a36c

0800ccf8 <MX_DSIHOST_DSI_Init>:
  hdsi->Instance = DSI;
 800ccf8:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
{
 800ccfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  hdsi->Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 800cd00:	2700      	movs	r7, #0
{
 800cd02:	b09e      	sub	sp, #120	; 0x78
  hdsi->Init.TXEscapeCkdiv = 4;
 800cd04:	2604      	movs	r6, #4
  hdsi->Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 800cd06:	2501      	movs	r5, #1
  hdsi->Instance = DSI;
 800cd08:	f8c0 c000 	str.w	ip, [r0]
  PLLInit.PLLNDIV = 100;
 800cd0c:	f04f 0e64 	mov.w	lr, #100	; 0x64
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 800cd10:	f04f 0c05 	mov.w	ip, #5
{
 800cd14:	4688      	mov	r8, r1
  hdsi->Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 800cd16:	6047      	str	r7, [r0, #4]
  if (HAL_DSI_Init(hdsi, &PLLInit) != HAL_OK)
 800cd18:	4669      	mov	r1, sp
  hdsi->Init.TXEscapeCkdiv = 4;
 800cd1a:	6086      	str	r6, [r0, #8]
{
 800cd1c:	4604      	mov	r4, r0
  hdsi->Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 800cd1e:	60c5      	str	r5, [r0, #12]
{
 800cd20:	4691      	mov	r9, r2
 800cd22:	469a      	mov	sl, r3
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 800cd24:	9702      	str	r7, [sp, #8]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 800cd26:	e9cd ec00 	strd	lr, ip, [sp]
  if (HAL_DSI_Init(hdsi, &PLLInit) != HAL_OK)
 800cd2a:	f002 ffa7 	bl	800fc7c <HAL_DSI_Init>
 800cd2e:	b118      	cbz	r0, 800cd38 <MX_DSIHOST_DSI_Init+0x40>
    return HAL_ERROR;
 800cd30:	4628      	mov	r0, r5
}
 800cd32:	b01e      	add	sp, #120	; 0x78
 800cd34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 800cd38:	4923      	ldr	r1, [pc, #140]	; (800cdc8 <MX_DSIHOST_DSI_Init+0xd0>)
 800cd3a:	f24f 4224 	movw	r2, #62500	; 0xf424
 800cd3e:	4603      	mov	r3, r0
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 800cd40:	4620      	mov	r0, r4
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 800cd42:	fb02 1208 	mla	r2, r2, r8, r1
 800cd46:	4921      	ldr	r1, [pc, #132]	; (800cdcc <MX_DSIHOST_DSI_Init+0xd4>)
  VidCfg.Mode = DSI_VID_MODE_BURST;
 800cd48:	2402      	movs	r4, #2
  VidCfg.VerticalBackPorch = OTM8009A_480X800_VBP;
 800cd4a:	270f      	movs	r7, #15
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 800cd4c:	fba1 1202 	umull	r1, r2, r1, r2
  VidCfg.VerticalFrontPorch = OTM8009A_480X800_VFP;
 800cd50:	2110      	movs	r1, #16
  VidCfg.VirtualChannelID = 0;
 800cd52:	9303      	str	r3, [sp, #12]
  VidCfg.NullPacketSize = 0xFFFU;
 800cd54:	f640 7eff 	movw	lr, #4095	; 0xfff
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 800cd58:	0b52      	lsrs	r2, r2, #13
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 800cd5a:	9305      	str	r3, [sp, #20]
  VidCfg.HorizontalBackPorch = (OTM8009A_480X800_HBP * 62500U)/27429U;
 800cd5c:	f04f 0c4d 	mov.w	ip, #77	; 0x4d
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 800cd60:	930a      	str	r3, [sp, #40]	; 0x28
  VidCfg.HorizontalSyncActive = (OTM8009A_480X800_HSYNC * 62500U)/27429U;
 800cd62:	960d      	str	r6, [sp, #52]	; 0x34
  VidCfg.VerticalSyncActive = OTM8009A_480X800_VSYNC;
 800cd64:	9510      	str	r5, [sp, #64]	; 0x40
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 800cd66:	f44f 4500 	mov.w	r5, #32768	; 0x8000
  VidCfg.VerticalActive = Height;
 800cd6a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
  VidCfg.LPVerticalActiveEnable        = DSI_LP_VACT_ENABLE;
 800cd6e:	f44f 6900 	mov.w	r9, #2048	; 0x800
  VidCfg.FrameBTAAcknowledgeEnable     = DSI_FBTAA_DISABLE;
 800cd72:	931d      	str	r3, [sp, #116]	; 0x74
  VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 800cd74:	920f      	str	r2, [sp, #60]	; 0x3c
  VidCfg.LPVerticalBackPorchEnable     = DSI_LP_VBP_ENABLE;
 800cd76:	f44f 7200 	mov.w	r2, #512	; 0x200
  VidCfg.Mode = DSI_VID_MODE_BURST;
 800cd7a:	9406      	str	r4, [sp, #24]
  VidCfg.LPVerticalFrontPorchEnable    = DSI_LP_VFP_ENABLE;
 800cd7c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  VidCfg.ColorCoding = PixelFormat;
 800cd80:	f8cd a010 	str.w	sl, [sp, #16]
  VidCfg.NullPacketSize = 0xFFFU;
 800cd84:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
  VidCfg.HorizontalBackPorch = (OTM8009A_480X800_HBP * 62500U)/27429U;
 800cd88:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 800cd8c:	9514      	str	r5, [sp, #80]	; 0x50
  VidCfg.NumberOfChunks = 0;
 800cd8e:	e9cd 8307 	strd	r8, r3, [sp, #28]
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 800cd92:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  VidCfg.LPVACTLargestPacketSize = 4;
 800cd96:	e9cd 6615 	strd	r6, r6, [sp, #84]	; 0x54
  VidCfg.LPVerticalSyncActiveEnable    = DSI_LP_VSYNC_ENABLE;
 800cd9a:	f44f 7380 	mov.w	r3, #256	; 0x100
  VidCfg.LPHorizontalFrontPorchEnable  = DSI_LP_HFP_ENABLE;
 800cd9e:	f44f 5600 	mov.w	r6, #8192	; 0x2000
  VidCfg.LPHorizontalBackPorchEnable   = DSI_LP_HBP_ENABLE;
 800cda2:	f44f 5880 	mov.w	r8, #4096	; 0x1000
  VidCfg.VerticalFrontPorch = OTM8009A_480X800_VFP;
 800cda6:	e9cd 7111 	strd	r7, r1, [sp, #68]	; 0x44
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 800cdaa:	a903      	add	r1, sp, #12
  VidCfg.LPHorizontalBackPorchEnable   = DSI_LP_HBP_ENABLE;
 800cdac:	e9cd 6817 	strd	r6, r8, [sp, #92]	; 0x5c
  VidCfg.LPVerticalFrontPorchEnable    = DSI_LP_VFP_ENABLE;
 800cdb0:	e9cd 9419 	strd	r9, r4, [sp, #100]	; 0x64
  VidCfg.LPVerticalSyncActiveEnable    = DSI_LP_VSYNC_ENABLE;
 800cdb4:	e9cd 231b 	strd	r2, r3, [sp, #108]	; 0x6c
  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 800cdb8:	f003 f898 	bl	800feec <HAL_DSI_ConfigVideoMode>
    return HAL_ERROR;
 800cdbc:	3000      	adds	r0, #0
 800cdbe:	bf18      	it	ne
 800cdc0:	2001      	movne	r0, #1
}
 800cdc2:	b01e      	add	sp, #120	; 0x78
 800cdc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdc8:	0042c1d8 	.word	0x0042c1d8
 800cdcc:	4c751ce3 	.word	0x4c751ce3

0800cdd0 <MX_LTDC_Init>:
{
 800cdd0:	b470      	push	{r4, r5, r6}
  hltdc->Init.AccumulatedActiveW = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP - 1;
 800cdd2:	f101 0523 	add.w	r5, r1, #35	; 0x23
  hltdc->Instance = LTDC;
 800cdd6:	4c0d      	ldr	r4, [pc, #52]	; (800ce0c <MX_LTDC_Init+0x3c>)
  hltdc->Init.TotalWidth         = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP - 1;
 800cdd8:	3145      	adds	r1, #69	; 0x45
  hltdc->Init.AccumulatedHBP     = OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP - 1;
 800cdda:	2623      	movs	r6, #35	; 0x23
  hltdc->Instance = LTDC;
 800cddc:	6004      	str	r4, [r0, #0]
  hltdc->Init.HorizontalSync     = OTM8009A_480X800_HSYNC - 1;
 800cdde:	2401      	movs	r4, #1
  hltdc->Init.AccumulatedActiveW = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP - 1;
 800cde0:	6245      	str	r5, [r0, #36]	; 0x24
  hltdc->Init.AccumulatedVBP     = OTM8009A_480X800_VSYNC + OTM8009A_480X800_VBP - 1;
 800cde2:	250f      	movs	r5, #15
  hltdc->Init.TotalWidth         = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP - 1;
 800cde4:	62c1      	str	r1, [r0, #44]	; 0x2c
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800cde6:	2100      	movs	r1, #0
  hltdc->Init.HorizontalSync     = OTM8009A_480X800_HSYNC - 1;
 800cde8:	6144      	str	r4, [r0, #20]
  hltdc->Init.AccumulatedActiveH = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP - 1;
 800cdea:	1954      	adds	r4, r2, r5
  hltdc->Init.TotalHeigh         = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP + OTM8009A_480X800_VFP - 1;
 800cdec:	321f      	adds	r2, #31
  hltdc->Init.AccumulatedHBP     = OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP - 1;
 800cdee:	61c6      	str	r6, [r0, #28]
  hltdc->Init.AccumulatedVBP     = OTM8009A_480X800_VSYNC + OTM8009A_480X800_VBP - 1;
 800cdf0:	6205      	str	r5, [r0, #32]
  hltdc->Init.AccumulatedActiveH = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP - 1;
 800cdf2:	6284      	str	r4, [r0, #40]	; 0x28
  hltdc->Init.Backcolor.Blue  = 0x00;
 800cdf4:	8681      	strh	r1, [r0, #52]	; 0x34
  hltdc->Init.Backcolor.Green = 0x00;
 800cdf6:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
  hltdc->Init.TotalHeigh         = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP + OTM8009A_480X800_VFP - 1;
 800cdfa:	6302      	str	r2, [r0, #48]	; 0x30
  hltdc->Init.VerticalSync       = OTM8009A_480X800_VSYNC - 1;
 800cdfc:	6181      	str	r1, [r0, #24]
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800cdfe:	e9c0 1101 	strd	r1, r1, [r0, #4]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800ce02:	e9c0 1103 	strd	r1, r1, [r0, #12]
}
 800ce06:	bc70      	pop	{r4, r5, r6}
  return HAL_LTDC_Init(hltdc);
 800ce08:	f004 b910 	b.w	801102c <HAL_LTDC_Init>
 800ce0c:	50001000 	.word	0x50001000

0800ce10 <MX_LTDC_ConfigLayer>:
{
 800ce10:	4613      	mov	r3, r2
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 800ce12:	460a      	mov	r2, r1
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800ce14:	f04f 0c07 	mov.w	ip, #7
  pLayerCfg.WindowY0 = Config->Y0;
 800ce18:	6899      	ldr	r1, [r3, #8]
{
 800ce1a:	b5f0      	push	{r4, r5, r6, r7, lr}
  pLayerCfg.WindowX1 = Config->X1;
 800ce1c:	e9d3 4500 	ldrd	r4, r5, [r3]
{
 800ce20:	b08f      	sub	sp, #60	; 0x3c
  pLayerCfg.Alpha = 255;
 800ce22:	26ff      	movs	r6, #255	; 0xff
  pLayerCfg.Alpha0 = 0;
 800ce24:	f44f 67c0 	mov.w	r7, #1536	; 0x600
  pLayerCfg.WindowX0 = Config->X0;
 800ce28:	9400      	str	r4, [sp, #0]
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 800ce2a:	1b2c      	subs	r4, r5, r4
  pLayerCfg.WindowY0 = Config->Y0;
 800ce2c:	9102      	str	r1, [sp, #8]
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 800ce2e:	940a      	str	r4, [sp, #40]	; 0x28
  pLayerCfg.WindowY1 = Config->Y1;
 800ce30:	68dc      	ldr	r4, [r3, #12]
  pLayerCfg.WindowX1 = Config->X1;
 800ce32:	9501      	str	r5, [sp, #4]
  pLayerCfg.Backcolor.Blue = 0;
 800ce34:	2500      	movs	r5, #0
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 800ce36:	1a61      	subs	r1, r4, r1
  pLayerCfg.Alpha = 255;
 800ce38:	9605      	str	r6, [sp, #20]
  pLayerCfg.Alpha0 = 0;
 800ce3a:	2600      	movs	r6, #0
  pLayerCfg.WindowY1 = Config->Y1;
 800ce3c:	9403      	str	r4, [sp, #12]
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 800ce3e:	910b      	str	r1, [sp, #44]	; 0x2c
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800ce40:	f8cd c020 	str.w	ip, [sp, #32]
  pLayerCfg.Backcolor.Blue = 0;
 800ce44:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
  pLayerCfg.Backcolor.Green = 0;
 800ce48:	f88d 5032 	strb.w	r5, [sp, #50]	; 0x32
  pLayerCfg.FBStartAdress = Config->Address;
 800ce4c:	e9d3 1304 	ldrd	r1, r3, [r3, #16]
  pLayerCfg.Alpha0 = 0;
 800ce50:	e9cd 6706 	strd	r6, r7, [sp, #24]
  pLayerCfg.PixelFormat = Config->PixelFormat;
 800ce54:	9104      	str	r1, [sp, #16]
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 800ce56:	4669      	mov	r1, sp
  pLayerCfg.FBStartAdress = Config->Address;
 800ce58:	9309      	str	r3, [sp, #36]	; 0x24
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 800ce5a:	f004 f9c1 	bl	80111e0 <HAL_LTDC_ConfigLayer>
}
 800ce5e:	b00f      	add	sp, #60	; 0x3c
 800ce60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce62:	bf00      	nop

0800ce64 <MX_LTDC_ClockConfig>:
{
 800ce64:	b530      	push	{r4, r5, lr}
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 800ce66:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
{
 800ce6a:	b0b1      	sub	sp, #196	; 0xc4
  PeriphClkInitStruct.PLL3.PLL3M      = 5U;
 800ce6c:	2005      	movs	r0, #5
  PeriphClkInitStruct.PLL3.PLL3P      = 2U;
 800ce6e:	2202      	movs	r2, #2
  PeriphClkInitStruct.PLL3.PLL3RGE    = RCC_PLLCFGR_PLL3RGE_2;
 800ce70:	f44f 6100 	mov.w	r1, #2048	; 0x800
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 800ce74:	9300      	str	r3, [sp, #0]
  PeriphClkInitStruct.PLL3.PLL3N      = 132U;
 800ce76:	2584      	movs	r5, #132	; 0x84
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800ce78:	2300      	movs	r3, #0
  PeriphClkInitStruct.PLL3.PLL3R      = 24U;
 800ce7a:	2418      	movs	r4, #24
  PeriphClkInitStruct.PLL3.PLL3M      = 5U;
 800ce7c:	9009      	str	r0, [sp, #36]	; 0x24
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800ce7e:	4668      	mov	r0, sp
  PeriphClkInitStruct.PLL3.PLL3FRACN  = 0U;
 800ce80:	9310      	str	r3, [sp, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3P      = 2U;
 800ce82:	e9cd 520a 	strd	r5, r2, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3R      = 24U;
 800ce86:	e9cd 240c 	strd	r2, r4, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800ce8a:	e9cd 130e 	strd	r1, r3, [sp, #56]	; 0x38
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800ce8e:	f005 ff75 	bl	8012d7c <HAL_RCCEx_PeriphCLKConfig>
}
 800ce92:	b031      	add	sp, #196	; 0xc4
 800ce94:	bd30      	pop	{r4, r5, pc}
 800ce96:	bf00      	nop

0800ce98 <BSP_LCD_InitEx>:
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 800ce98:	2901      	cmp	r1, #1
 800ce9a:	f200 8150 	bhi.w	800d13e <BSP_LCD_InitEx+0x2a6>
 800ce9e:	3000      	adds	r0, #0
 800cea0:	bf18      	it	ne
 800cea2:	2001      	movne	r0, #1
 800cea4:	2800      	cmp	r0, #0
 800cea6:	f040 814a 	bne.w	800d13e <BSP_LCD_InitEx+0x2a6>
{
 800ceaa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_RGB888)))
 800ceae:	1e54      	subs	r4, r2, #1
{
 800ceb0:	b097      	sub	sp, #92	; 0x5c
  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 800ceb2:	2c01      	cmp	r4, #1
 800ceb4:	f200 8140 	bhi.w	800d138 <BSP_LCD_InitEx+0x2a0>
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800ceb8:	2a02      	cmp	r2, #2
 800ceba:	f000 810b 	beq.w	800d0d4 <BSP_LCD_InitEx+0x23c>
      ctrl_pixel_format = OTM8009A_FORMAT_RGB888;
 800cebe:	9001      	str	r0, [sp, #4]
      dsi_pixel_format = DSI_RGB888;
 800cec0:	2405      	movs	r4, #5
      Lcd_Ctx[Instance].BppFactor = 4U;
 800cec2:	2004      	movs	r0, #4
      dsi_pixel_format = DSI_RGB888;
 800cec4:	9402      	str	r4, [sp, #8]
  LCD_RESET_GPIO_CLK_ENABLE();
 800cec6:	4c9f      	ldr	r4, [pc, #636]	; (800d144 <BSP_LCD_InitEx+0x2ac>)
 800cec8:	461e      	mov	r6, r3
 800ceca:	f8df 82b0 	ldr.w	r8, [pc, #688]	; 800d17c <BSP_LCD_InitEx+0x2e4>
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cece:	f04f 0c03 	mov.w	ip, #3
 800ced2:	9103      	str	r1, [sp, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800ced4:	2501      	movs	r5, #1
    Lcd_Ctx[Instance].XSize  = Width;
 800ced6:	f8c8 3000 	str.w	r3, [r8]
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 800ceda:	2708      	movs	r7, #8
  LCD_RESET_GPIO_CLK_ENABLE();
 800cedc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 800cee0:	a910      	add	r1, sp, #64	; 0x40
 800cee2:	f8c8 0010 	str.w	r0, [r8, #16]
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 800cee6:	f44f 5980 	mov.w	r9, #4096	; 0x1000
  LCD_RESET_GPIO_CLK_ENABLE();
 800ceea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 800ceee:	f8c8 200c 	str.w	r2, [r8, #12]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 800cef2:	4895      	ldr	r0, [pc, #596]	; (800d148 <BSP_LCD_InitEx+0x2b0>)
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800cef4:	f04f 0b02 	mov.w	fp, #2
  LCD_RESET_GPIO_CLK_ENABLE();
 800cef8:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Pin       = LCD_TE_PIN;
 800cefc:	f04f 0a04 	mov.w	sl, #4
  LCD_RESET_GPIO_CLK_ENABLE();
 800cf00:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    Lcd_Ctx[Instance].YSize  = Height;
 800cf04:	9a20      	ldr	r2, [sp, #128]	; 0x80
  LCD_RESET_GPIO_CLK_ENABLE();
 800cf06:	f003 0340 	and.w	r3, r3, #64	; 0x40
    Lcd_Ctx[Instance].YSize  = Height;
 800cf0a:	f8c8 2004 	str.w	r2, [r8, #4]
  LCD_RESET_GPIO_CLK_ENABLE();
 800cf0e:	930a      	str	r3, [sp, #40]	; 0x28
 800cf10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cf12:	e9cd 5c12 	strd	r5, ip, [sp, #72]	; 0x48
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800cf16:	e9cd 7510 	strd	r7, r5, [sp, #64]	; 0x40
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 800cf1a:	f003 fa95 	bl	8010448 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_RESET);
 800cf1e:	4639      	mov	r1, r7
 800cf20:	2200      	movs	r2, #0
 800cf22:	4889      	ldr	r0, [pc, #548]	; (800d148 <BSP_LCD_InitEx+0x2b0>)
 800cf24:	f003 fc8a 	bl	801083c <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 800cf28:	2014      	movs	r0, #20
 800cf2a:	f000 fd1f 	bl	800d96c <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_SET);/* Deactivate XRES */
 800cf2e:	462a      	mov	r2, r5
 800cf30:	4639      	mov	r1, r7
 800cf32:	4885      	ldr	r0, [pc, #532]	; (800d148 <BSP_LCD_InitEx+0x2b0>)
 800cf34:	f003 fc82 	bl	801083c <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 800cf38:	200a      	movs	r0, #10
 800cf3a:	f000 fd17 	bl	800d96c <HAL_Delay>
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800cf3e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800cf42:	2700      	movs	r7, #0
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800cf44:	a910      	add	r1, sp, #64	; 0x40
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800cf46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800cf4a:	4880      	ldr	r0, [pc, #512]	; (800d14c <BSP_LCD_InitEx+0x2b4>)
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800cf4c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800cf50:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800cf54:	9511      	str	r5, [sp, #68]	; 0x44
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800cf56:	f403 7300 	and.w	r3, r3, #512	; 0x200
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 800cf5a:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800cf5e:	9712      	str	r7, [sp, #72]	; 0x48
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800cf60:	9308      	str	r3, [sp, #32]
 800cf62:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800cf64:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800cf68:	f003 fa6e 	bl	8010448 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 800cf6c:	462a      	mov	r2, r5
 800cf6e:	4649      	mov	r1, r9
 800cf70:	4876      	ldr	r0, [pc, #472]	; (800d14c <BSP_LCD_InitEx+0x2b4>)
 800cf72:	f003 fc63 	bl	801083c <HAL_GPIO_WritePin>
  LCD_TE_GPIO_CLK_ENABLE();
 800cf76:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 800cf7a:	a910      	add	r1, sp, #64	; 0x40
 800cf7c:	4873      	ldr	r0, [pc, #460]	; (800d14c <BSP_LCD_InitEx+0x2b4>)
  LCD_TE_GPIO_CLK_ENABLE();
 800cf7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    hlcd_ltdc.Instance = LTDC;
 800cf82:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 800d180 <BSP_LCD_InitEx+0x2e8>
  LCD_TE_GPIO_CLK_ENABLE();
 800cf86:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800cf8a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800cf8e:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  LCD_TE_GPIO_CLK_ENABLE();
 800cf92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cf96:	9309      	str	r3, [sp, #36]	; 0x24
 800cf98:	9b09      	ldr	r3, [sp, #36]	; 0x24
  gpio_init_structure.Pin       = LCD_TE_PIN;
 800cf9a:	e9cd a710 	strd	sl, r7, [sp, #64]	; 0x40
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 800cf9e:	f003 fa53 	bl	8010448 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LCD_TE_GPIO_PORT, LCD_TE_PIN, GPIO_PIN_SET);
 800cfa2:	462a      	mov	r2, r5
 800cfa4:	4651      	mov	r1, sl
 800cfa6:	4869      	ldr	r0, [pc, #420]	; (800d14c <BSP_LCD_InitEx+0x2b4>)
 800cfa8:	f003 fc48 	bl	801083c <HAL_GPIO_WritePin>
  HAL_NVIC_SetPriority(LTDC_IRQn, 0x0F, 0);
 800cfac:	463a      	mov	r2, r7
 800cfae:	210f      	movs	r1, #15
 800cfb0:	2058      	movs	r0, #88	; 0x58
 800cfb2:	f000 fd0f 	bl	800d9d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800cfb6:	2058      	movs	r0, #88	; 0x58
 800cfb8:	f000 fd42 	bl	800da40 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2D_IRQn, 0x0F, 0);
 800cfbc:	463a      	mov	r2, r7
 800cfbe:	210f      	movs	r1, #15
 800cfc0:	205a      	movs	r0, #90	; 0x5a
 800cfc2:	f000 fd07 	bl	800d9d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800cfc6:	205a      	movs	r0, #90	; 0x5a
 800cfc8:	f000 fd3a 	bl	800da40 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DSI_IRQn, 0x0F, 0);
 800cfcc:	463a      	mov	r2, r7
 800cfce:	210f      	movs	r1, #15
 800cfd0:	207b      	movs	r0, #123	; 0x7b
 800cfd2:	f000 fcff 	bl	800d9d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 800cfd6:	207b      	movs	r0, #123	; 0x7b
 800cfd8:	f000 fd32 	bl	800da40 <HAL_NVIC_EnableIRQ>
    hlcd_dma2d.Instance = DMA2D;
 800cfdc:	4f5c      	ldr	r7, [pc, #368]	; (800d150 <BSP_LCD_InitEx+0x2b8>)
 800cfde:	4a5d      	ldr	r2, [pc, #372]	; (800d154 <BSP_LCD_InitEx+0x2bc>)
    hlcd_dsi.Instance = DSI;
 800cfe0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 800cfe4:	4d5c      	ldr	r5, [pc, #368]	; (800d158 <BSP_LCD_InitEx+0x2c0>)
    hlcd_dma2d.Instance = DMA2D;
 800cfe6:	6017      	str	r7, [r2, #0]
    __HAL_RCC_LTDC_CLK_ENABLE();
 800cfe8:	f8d4 70e4 	ldr.w	r7, [r4, #228]	; 0xe4
    hlcd_ltdc.Instance = LTDC;
 800cfec:	485b      	ldr	r0, [pc, #364]	; (800d15c <BSP_LCD_InitEx+0x2c4>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 800cfee:	f047 0708 	orr.w	r7, r7, #8
    hlcd_dsi.Instance = DSI;
 800cff2:	6029      	str	r1, [r5, #0]
    hlcd_ltdc.Instance = LTDC;
 800cff4:	f8c9 0000 	str.w	r0, [r9]
    if(MX_DSIHOST_DSI_Init(&hlcd_dsi, Width, Height, dsi_pixel_format) != HAL_OK)
 800cff8:	4631      	mov	r1, r6
 800cffa:	9b02      	ldr	r3, [sp, #8]
 800cffc:	4628      	mov	r0, r5
 800cffe:	9a20      	ldr	r2, [sp, #128]	; 0x80
    __HAL_RCC_LTDC_CLK_ENABLE();
 800d000:	f8c4 70e4 	str.w	r7, [r4, #228]	; 0xe4
 800d004:	f8d4 70e4 	ldr.w	r7, [r4, #228]	; 0xe4
 800d008:	f007 0708 	and.w	r7, r7, #8
 800d00c:	9707      	str	r7, [sp, #28]
 800d00e:	9f07      	ldr	r7, [sp, #28]
    __HAL_RCC_LTDC_FORCE_RESET();
 800d010:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
 800d014:	f047 0708 	orr.w	r7, r7, #8
 800d018:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 800d01c:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
 800d020:	f027 0708 	bic.w	r7, r7, #8
 800d024:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800d028:	f8d4 70d4 	ldr.w	r7, [r4, #212]	; 0xd4
 800d02c:	f047 0710 	orr.w	r7, r7, #16
 800d030:	f8c4 70d4 	str.w	r7, [r4, #212]	; 0xd4
 800d034:	f8d4 70d4 	ldr.w	r7, [r4, #212]	; 0xd4
 800d038:	f007 0710 	and.w	r7, r7, #16
 800d03c:	9706      	str	r7, [sp, #24]
 800d03e:	9f06      	ldr	r7, [sp, #24]
    __HAL_RCC_DMA2D_FORCE_RESET();
 800d040:	6fe7      	ldr	r7, [r4, #124]	; 0x7c
 800d042:	f047 0710 	orr.w	r7, r7, #16
 800d046:	67e7      	str	r7, [r4, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 800d048:	6fe7      	ldr	r7, [r4, #124]	; 0x7c
 800d04a:	f027 0710 	bic.w	r7, r7, #16
 800d04e:	67e7      	str	r7, [r4, #124]	; 0x7c
    __HAL_RCC_DSI_CLK_ENABLE();
 800d050:	f8d4 70e4 	ldr.w	r7, [r4, #228]	; 0xe4
 800d054:	f047 0710 	orr.w	r7, r7, #16
 800d058:	f8c4 70e4 	str.w	r7, [r4, #228]	; 0xe4
 800d05c:	f8d4 70e4 	ldr.w	r7, [r4, #228]	; 0xe4
 800d060:	f007 0710 	and.w	r7, r7, #16
 800d064:	9705      	str	r7, [sp, #20]
 800d066:	9f05      	ldr	r7, [sp, #20]
    __HAL_RCC_DSI_FORCE_RESET();
 800d068:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
 800d06c:	f047 0710 	orr.w	r7, r7, #16
 800d070:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
    __HAL_RCC_DSI_RELEASE_RESET();
 800d074:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
 800d078:	f027 0710 	bic.w	r7, r7, #16
 800d07c:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
    if(MX_DSIHOST_DSI_Init(&hlcd_dsi, Width, Height, dsi_pixel_format) != HAL_OK)
 800d080:	f7ff fe3a 	bl	800ccf8 <MX_DSIHOST_DSI_Init>
 800d084:	2800      	cmp	r0, #0
 800d086:	d152      	bne.n	800d12e <BSP_LCD_InitEx+0x296>
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 800d088:	4648      	mov	r0, r9
 800d08a:	f7ff feeb 	bl	800ce64 <MX_LTDC_ClockConfig>
 800d08e:	2800      	cmp	r0, #0
 800d090:	d14d      	bne.n	800d12e <BSP_LCD_InitEx+0x296>
     if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 800d092:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d094:	4631      	mov	r1, r6
 800d096:	4648      	mov	r0, r9
 800d098:	f7ff fe9a 	bl	800cdd0 <MX_LTDC_Init>
 800d09c:	4603      	mov	r3, r0
 800d09e:	2800      	cmp	r0, #0
 800d0a0:	d145      	bne.n	800d12e <BSP_LCD_InitEx+0x296>
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 800d0a2:	4619      	mov	r1, r3
      config.Y0          = 0;
 800d0a4:	9312      	str	r3, [sp, #72]	; 0x48
      config.Address     = LCD_LAYER_0_ADDRESS;
 800d0a6:	f04f 4450 	mov.w	r4, #3489660928	; 0xd0000000
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 800d0aa:	aa10      	add	r2, sp, #64	; 0x40
 800d0ac:	4648      	mov	r0, r9
      config.X1          = Width;
 800d0ae:	e9cd 3610 	strd	r3, r6, [sp, #64]	; 0x40
      config.Y1          = Height;
 800d0b2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800d0b4:	9313      	str	r3, [sp, #76]	; 0x4c
      config.PixelFormat = ltdc_pixel_format;
 800d0b6:	9b01      	ldr	r3, [sp, #4]
      config.Address     = LCD_LAYER_0_ADDRESS;
 800d0b8:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 800d0bc:	f7ff fea8 	bl	800ce10 <MX_LTDC_ConfigLayer>
 800d0c0:	4604      	mov	r4, r0
 800d0c2:	b158      	cbz	r0, 800d0dc <BSP_LCD_InitEx+0x244>
        ret = BSP_ERROR_PERIPH_FAILURE;
 800d0c4:	f06f 0003 	mvn.w	r0, #3
    Lcd_Ctx[Instance].ReloadEnable = 1U;
 800d0c8:	2301      	movs	r3, #1
 800d0ca:	f8c8 3018 	str.w	r3, [r8, #24]
}
 800d0ce:	b017      	add	sp, #92	; 0x5c
 800d0d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      dsi_pixel_format = DSI_RGB565;
 800d0d4:	9002      	str	r0, [sp, #8]
      Lcd_Ctx[Instance].BppFactor = 2U;
 800d0d6:	4610      	mov	r0, r2
      ctrl_pixel_format = OTM8009A_FORMAT_RBG565;
 800d0d8:	9201      	str	r2, [sp, #4]
 800d0da:	e6f4      	b.n	800cec6 <BSP_LCD_InitEx+0x2e>
        (void)HAL_DSI_Start(&hlcd_dsi);
 800d0dc:	4628      	mov	r0, r5
  IOCtx.Address     = 0;
  IOCtx.GetTick     = BSP_GetTick;
  IOCtx.WriteReg    = DSI_IO_Write;
  IOCtx.ReadReg     = DSI_IO_Read;

  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 800d0de:	4e20      	ldr	r6, [pc, #128]	; (800d160 <BSP_LCD_InitEx+0x2c8>)
        (void)HAL_DSI_Start(&hlcd_dsi);
 800d0e0:	f003 f840 	bl	8010164 <HAL_DSI_Start>
        (void)HAL_DSI_ConfigFlowControl(&hlcd_dsi, DSI_FLOW_CONTROL_BTA);
 800d0e4:	4651      	mov	r1, sl
 800d0e6:	4628      	mov	r0, r5
 800d0e8:	f003 f828 	bl	801013c <HAL_DSI_ConfigFlowControl>
  IOCtx.GetTick     = BSP_GetTick;
 800d0ec:	4b1d      	ldr	r3, [pc, #116]	; (800d164 <BSP_LCD_InitEx+0x2cc>)
  IOCtx.WriteReg    = DSI_IO_Write;
 800d0ee:	4a1e      	ldr	r2, [pc, #120]	; (800d168 <BSP_LCD_InitEx+0x2d0>)
  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 800d0f0:	4630      	mov	r0, r6
  IOCtx.GetTick     = BSP_GetTick;
 800d0f2:	930f      	str	r3, [sp, #60]	; 0x3c
  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 800d0f4:	a90c      	add	r1, sp, #48	; 0x30
  IOCtx.ReadReg     = DSI_IO_Read;
 800d0f6:	4b1d      	ldr	r3, [pc, #116]	; (800d16c <BSP_LCD_InitEx+0x2d4>)
  IOCtx.Address     = 0;
 800d0f8:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
  IOCtx.ReadReg     = DSI_IO_Read;
 800d0fc:	e9cd 230d 	strd	r2, r3, [sp, #52]	; 0x34
  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 800d100:	f7fa fdea 	bl	8007cd8 <OTM8009A_RegisterBusIO>
 800d104:	b980      	cbnz	r0, 800d128 <BSP_LCD_InitEx+0x290>
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else
  {
    Lcd_CompObj = &OTM8009AObj;
 800d106:	4c1a      	ldr	r4, [pc, #104]	; (800d170 <BSP_LCD_InitEx+0x2d8>)

    if(OTM8009A_ReadID(Lcd_CompObj, &id) != OTM8009A_OK)
 800d108:	4630      	mov	r0, r6
 800d10a:	a90b      	add	r1, sp, #44	; 0x2c
    Lcd_CompObj = &OTM8009AObj;
 800d10c:	6026      	str	r6, [r4, #0]
    if(OTM8009A_ReadID(Lcd_CompObj, &id) != OTM8009A_OK)
 800d10e:	f7fa fdcf 	bl	8007cb0 <OTM8009A_ReadID>
 800d112:	b948      	cbnz	r0, 800d128 <BSP_LCD_InitEx+0x290>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }

    else
    {
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 800d114:	4b17      	ldr	r3, [pc, #92]	; (800d174 <BSP_LCD_InitEx+0x2dc>)
 800d116:	4d18      	ldr	r5, [pc, #96]	; (800d178 <BSP_LCD_InitEx+0x2e0>)
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 800d118:	6820      	ldr	r0, [r4, #0]
 800d11a:	9a03      	ldr	r2, [sp, #12]
 800d11c:	9901      	ldr	r1, [sp, #4]
 800d11e:	681c      	ldr	r4, [r3, #0]
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 800d120:	602b      	str	r3, [r5, #0]
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 800d122:	47a0      	blx	r4
 800d124:	2800      	cmp	r0, #0
 800d126:	d0cf      	beq.n	800d0c8 <BSP_LCD_InitEx+0x230>
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800d128:	f06f 0006 	mvn.w	r0, #6
 800d12c:	e7cc      	b.n	800d0c8 <BSP_LCD_InitEx+0x230>
      ret = BSP_ERROR_PERIPH_FAILURE;
 800d12e:	f06f 0003 	mvn.w	r0, #3
}
 800d132:	b017      	add	sp, #92	; 0x5c
 800d134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800d138:	f06f 0001 	mvn.w	r0, #1
  return ret;
 800d13c:	e7c7      	b.n	800d0ce <BSP_LCD_InitEx+0x236>
    ret = BSP_ERROR_WRONG_PARAM;
 800d13e:	f06f 0001 	mvn.w	r0, #1
}
 800d142:	4770      	bx	lr
 800d144:	58024400 	.word	0x58024400
 800d148:	58021800 	.word	0x58021800
 800d14c:	58022400 	.word	0x58022400
 800d150:	52001000 	.word	0x52001000
 800d154:	2400a36c 	.word	0x2400a36c
 800d158:	2400a350 	.word	0x2400a350
 800d15c:	50001000 	.word	0x50001000
 800d160:	24009270 	.word	0x24009270
 800d164:	0800bfdd 	.word	0x0800bfdd
 800d168:	0800cae5 	.word	0x0800cae5
 800d16c:	0800c871 	.word	0x0800c871
 800d170:	24009268 	.word	0x24009268
 800d174:	24007298 	.word	0x24007298
 800d178:	2400926c 	.word	0x2400926c
 800d17c:	2400a334 	.word	0x2400a334
 800d180:	2400a28c 	.word	0x2400a28c

0800d184 <BSP_LCD_Init>:
{
 800d184:	b510      	push	{r4, lr}
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 800d186:	f44f 74f0 	mov.w	r4, #480	; 0x1e0
{
 800d18a:	b082      	sub	sp, #8
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 800d18c:	f44f 7348 	mov.w	r3, #800	; 0x320
 800d190:	2201      	movs	r2, #1
 800d192:	9400      	str	r4, [sp, #0]
 800d194:	f7ff fe80 	bl	800ce98 <BSP_LCD_InitEx>
}
 800d198:	b002      	add	sp, #8
 800d19a:	bd10      	pop	{r4, pc}

0800d19c <BSP_LCD_ConfigLayer>:
  if(Instance >= LCD_INSTANCES_NBR)
 800d19c:	b948      	cbnz	r0, 800d1b2 <BSP_LCD_ConfigLayer+0x16>
    if (MX_LTDC_ConfigLayer(&hlcd_ltdc, LayerIndex, Config) != HAL_OK)
 800d19e:	4806      	ldr	r0, [pc, #24]	; (800d1b8 <BSP_LCD_ConfigLayer+0x1c>)
{
 800d1a0:	b508      	push	{r3, lr}
    if (MX_LTDC_ConfigLayer(&hlcd_ltdc, LayerIndex, Config) != HAL_OK)
 800d1a2:	f7ff fe35 	bl	800ce10 <MX_LTDC_ConfigLayer>
 800d1a6:	2800      	cmp	r0, #0
      ret = BSP_ERROR_PERIPH_FAILURE;
 800d1a8:	bf0c      	ite	eq
 800d1aa:	2000      	moveq	r0, #0
 800d1ac:	f06f 0003 	mvnne.w	r0, #3
}
 800d1b0:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800d1b2:	f06f 0001 	mvn.w	r0, #1
}
 800d1b6:	4770      	bx	lr
 800d1b8:	2400a28c 	.word	0x2400a28c

0800d1bc <BSP_LCD_SetBrightness>:
  if(Instance >= LCD_INSTANCES_NBR)
 800d1bc:	b958      	cbnz	r0, 800d1d6 <BSP_LCD_SetBrightness+0x1a>
    if(Lcd_Drv->SetBrightness(Lcd_CompObj, Brightness) != BSP_ERROR_NONE)
 800d1be:	4a07      	ldr	r2, [pc, #28]	; (800d1dc <BSP_LCD_SetBrightness+0x20>)
{
 800d1c0:	b508      	push	{r3, lr}
    if(Lcd_Drv->SetBrightness(Lcd_CompObj, Brightness) != BSP_ERROR_NONE)
 800d1c2:	4b07      	ldr	r3, [pc, #28]	; (800d1e0 <BSP_LCD_SetBrightness+0x24>)
 800d1c4:	6810      	ldr	r0, [r2, #0]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	695b      	ldr	r3, [r3, #20]
 800d1ca:	4798      	blx	r3
 800d1cc:	2800      	cmp	r0, #0
      ret = BSP_ERROR_PERIPH_FAILURE;
 800d1ce:	bf18      	it	ne
 800d1d0:	f06f 0003 	mvnne.w	r0, #3
}
 800d1d4:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800d1d6:	f06f 0001 	mvn.w	r0, #1
}
 800d1da:	4770      	bx	lr
 800d1dc:	24009268 	.word	0x24009268
 800d1e0:	2400926c 	.word	0x2400926c

0800d1e4 <MX_QSPI_Init>:
  * @param  hQspi       QSPI handle
  * @param  Config      QSPI configuration structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
 800d1e4:	b470      	push	{r4, r5, r6}
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 800d1e6:	4a0a      	ldr	r2, [pc, #40]	; (800d210 <MX_QSPI_Init+0x2c>)
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
  hQspi->Init.FifoThreshold      = 1;
 800d1e8:	2501      	movs	r5, #1
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 800d1ea:	684e      	ldr	r6, [r1, #4]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
  hQspi->Init.FlashSize          = Config->FlashSize;
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
 800d1ec:	f44f 7440 	mov.w	r4, #768	; 0x300
  hQspi->Instance                = QUADSPI;
 800d1f0:	6002      	str	r2, [r0, #0]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 800d1f2:	2200      	movs	r2, #0
  hQspi->Init.FifoThreshold      = 1;
 800d1f4:	e9c0 6501 	strd	r6, r5, [r0, #4]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 800d1f8:	688e      	ldr	r6, [r1, #8]
  hQspi->Init.FlashSize          = Config->FlashSize;
 800d1fa:	680d      	ldr	r5, [r1, #0]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 800d1fc:	68c9      	ldr	r1, [r1, #12]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 800d1fe:	61c2      	str	r2, [r0, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 800d200:	6201      	str	r1, [r0, #32]
  hQspi->Init.FlashSize          = Config->FlashSize;
 800d202:	e9c0 6503 	strd	r6, r5, [r0, #12]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 800d206:	e9c0 4205 	strd	r4, r2, [r0, #20]

  return HAL_QSPI_Init(hQspi);
}
 800d20a:	bc70      	pop	{r4, r5, r6}
  return HAL_QSPI_Init(hQspi);
 800d20c:	f004 bb8a 	b.w	8011924 <HAL_QSPI_Init>
 800d210:	52005000 	.word	0x52005000

0800d214 <BSP_QSPI_Init>:
{
 800d214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d218:	b0a7      	sub	sp, #156	; 0x9c
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800d21a:	2800      	cmp	r0, #0
 800d21c:	f040 81fd 	bne.w	800d61a <BSP_QSPI_Init+0x406>
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 800d220:	4c05      	ldr	r4, [pc, #20]	; (800d238 <BSP_QSPI_Init+0x24>)
 800d222:	f894 a000 	ldrb.w	sl, [r4]
 800d226:	f1ba 0f00 	cmp.w	sl, #0
 800d22a:	d007      	beq.n	800d23c <BSP_QSPI_Init+0x28>
  int32_t ret = BSP_ERROR_NONE;
 800d22c:	4607      	mov	r7, r0
}
 800d22e:	4638      	mov	r0, r7
 800d230:	b027      	add	sp, #156	; 0x9c
 800d232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d236:	bf00      	nop
 800d238:	2400a3d4 	.word	0x2400a3d4
{
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 800d23c:	f8df c374 	ldr.w	ip, [pc, #884]	; 800d5b4 <BSP_QSPI_Init+0x3a0>
  QSPI_BK2_D3_GPIO_CLK_ENABLE();

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800d240:	2202      	movs	r2, #2
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 800d242:	2740      	movs	r7, #64	; 0x40
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800d244:	2609      	movs	r6, #9
  QSPI_CLK_ENABLE();
 800d246:	f8dc 00d4 	ldr.w	r0, [ip, #212]	; 0xd4
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 800d24a:	2304      	movs	r3, #4
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800d24c:	f04f 0803 	mov.w	r8, #3
 800d250:	460d      	mov	r5, r1
  QSPI_CLK_ENABLE();
 800d252:	f440 4980 	orr.w	r9, r0, #16384	; 0x4000
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800d256:	a918      	add	r1, sp, #96	; 0x60
 800d258:	48cf      	ldr	r0, [pc, #828]	; (800d598 <BSP_QSPI_Init+0x384>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800d25a:	f04f 0b01 	mov.w	fp, #1
  QSPI_CLK_ENABLE();
 800d25e:	f8cc 90d4 	str.w	r9, [ip, #212]	; 0xd4
 800d262:	f8dc 90d4 	ldr.w	r9, [ip, #212]	; 0xd4
 800d266:	f409 4980 	and.w	r9, r9, #16384	; 0x4000
 800d26a:	f8cd 900c 	str.w	r9, [sp, #12]
 800d26e:	f8dd 900c 	ldr.w	r9, [sp, #12]
  QSPI_FORCE_RESET();
 800d272:	f8dc 907c 	ldr.w	r9, [ip, #124]	; 0x7c
 800d276:	f449 4980 	orr.w	r9, r9, #16384	; 0x4000
 800d27a:	f8cc 907c 	str.w	r9, [ip, #124]	; 0x7c
  QSPI_RELEASE_RESET();
 800d27e:	f8dc 907c 	ldr.w	r9, [ip, #124]	; 0x7c
 800d282:	f429 4980 	bic.w	r9, r9, #16384	; 0x4000
 800d286:	f8cc 907c 	str.w	r9, [ip, #124]	; 0x7c
  QSPI_CLK_GPIO_CLK_ENABLE();
 800d28a:	f8dc 90e0 	ldr.w	r9, [ip, #224]	; 0xe0
 800d28e:	ea49 0902 	orr.w	r9, r9, r2
 800d292:	f8cc 90e0 	str.w	r9, [ip, #224]	; 0xe0
 800d296:	f8dc 90e0 	ldr.w	r9, [ip, #224]	; 0xe0
 800d29a:	ea09 0902 	and.w	r9, r9, r2
 800d29e:	f8cd 9010 	str.w	r9, [sp, #16]
 800d2a2:	f8dd 9010 	ldr.w	r9, [sp, #16]
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 800d2a6:	f8dc 90e0 	ldr.w	r9, [ip, #224]	; 0xe0
 800d2aa:	ea49 0907 	orr.w	r9, r9, r7
 800d2ae:	f8cc 90e0 	str.w	r9, [ip, #224]	; 0xe0
 800d2b2:	f8dc 90e0 	ldr.w	r9, [ip, #224]	; 0xe0
 800d2b6:	ea09 0907 	and.w	r9, r9, r7
 800d2ba:	f8cd 9014 	str.w	r9, [sp, #20]
 800d2be:	f8dd 9014 	ldr.w	r9, [sp, #20]
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 800d2c2:	f8dc 90e0 	ldr.w	r9, [ip, #224]	; 0xe0
 800d2c6:	f049 0908 	orr.w	r9, r9, #8
 800d2ca:	f8cc 90e0 	str.w	r9, [ip, #224]	; 0xe0
 800d2ce:	f8dc 90e0 	ldr.w	r9, [ip, #224]	; 0xe0
 800d2d2:	f009 0908 	and.w	r9, r9, #8
 800d2d6:	f8cd 9018 	str.w	r9, [sp, #24]
 800d2da:	f8dd 9018 	ldr.w	r9, [sp, #24]
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 800d2de:	f8dc 90e0 	ldr.w	r9, [ip, #224]	; 0xe0
 800d2e2:	f049 0920 	orr.w	r9, r9, #32
 800d2e6:	f8cc 90e0 	str.w	r9, [ip, #224]	; 0xe0
 800d2ea:	f8dc 90e0 	ldr.w	r9, [ip, #224]	; 0xe0
 800d2ee:	f009 0920 	and.w	r9, r9, #32
 800d2f2:	f8cd 901c 	str.w	r9, [sp, #28]
 800d2f6:	f8dd 901c 	ldr.w	r9, [sp, #28]
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 800d2fa:	f8dc 90e0 	ldr.w	r9, [ip, #224]	; 0xe0
 800d2fe:	f049 0920 	orr.w	r9, r9, #32
 800d302:	f8cc 90e0 	str.w	r9, [ip, #224]	; 0xe0
 800d306:	f8dc 90e0 	ldr.w	r9, [ip, #224]	; 0xe0
 800d30a:	f009 0920 	and.w	r9, r9, #32
 800d30e:	f8cd 9020 	str.w	r9, [sp, #32]
 800d312:	f8dd 9020 	ldr.w	r9, [sp, #32]
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 800d316:	f8dc 90e0 	ldr.w	r9, [ip, #224]	; 0xe0
 800d31a:	f049 0920 	orr.w	r9, r9, #32
 800d31e:	f8cc 90e0 	str.w	r9, [ip, #224]	; 0xe0
 800d322:	f8dc 90e0 	ldr.w	r9, [ip, #224]	; 0xe0
 800d326:	f009 0920 	and.w	r9, r9, #32
 800d32a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800d32e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 800d332:	f8dc 90e0 	ldr.w	r9, [ip, #224]	; 0xe0
 800d336:	ea49 0907 	orr.w	r9, r9, r7
 800d33a:	f8cc 90e0 	str.w	r9, [ip, #224]	; 0xe0
 800d33e:	f8dc 90e0 	ldr.w	r9, [ip, #224]	; 0xe0
 800d342:	ea09 0907 	and.w	r9, r9, r7
 800d346:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 800d34a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 800d34e:	f8dc 90e0 	ldr.w	r9, [ip, #224]	; 0xe0
 800d352:	f049 0980 	orr.w	r9, r9, #128	; 0x80
 800d356:	f8cc 90e0 	str.w	r9, [ip, #224]	; 0xe0
 800d35a:	f8dc 90e0 	ldr.w	r9, [ip, #224]	; 0xe0
 800d35e:	f009 0980 	and.w	r9, r9, #128	; 0x80
 800d362:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 800d366:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 800d36a:	f8dc 90e0 	ldr.w	r9, [ip, #224]	; 0xe0
 800d36e:	f049 0980 	orr.w	r9, r9, #128	; 0x80
 800d372:	f8cc 90e0 	str.w	r9, [ip, #224]	; 0xe0
 800d376:	f8dc 90e0 	ldr.w	r9, [ip, #224]	; 0xe0
 800d37a:	f009 0980 	and.w	r9, r9, #128	; 0x80
 800d37e:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800d382:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 800d386:	f8dc 90e0 	ldr.w	r9, [ip, #224]	; 0xe0
 800d38a:	ea49 0907 	orr.w	r9, r9, r7
 800d38e:	f8cc 90e0 	str.w	r9, [ip, #224]	; 0xe0
 800d392:	f8dc 90e0 	ldr.w	r9, [ip, #224]	; 0xe0
 800d396:	ea09 0907 	and.w	r9, r9, r7
 800d39a:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 800d39e:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 800d3a2:	f8dc 90e0 	ldr.w	r9, [ip, #224]	; 0xe0
 800d3a6:	ea49 0907 	orr.w	r9, r9, r7
 800d3aa:	f8cc 90e0 	str.w	r9, [ip, #224]	; 0xe0
  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 800d3ae:	f44f 7900 	mov.w	r9, #512	; 0x200
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 800d3b2:	f8dc c0e0 	ldr.w	ip, [ip, #224]	; 0xe0
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 800d3b6:	9318      	str	r3, [sp, #96]	; 0x60
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 800d3b8:	ea0c 0c07 	and.w	ip, ip, r7
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 800d3bc:	9301      	str	r3, [sp, #4]
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 800d3be:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
 800d3c2:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800d3c6:	9219      	str	r2, [sp, #100]	; 0x64
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800d3c8:	961c      	str	r6, [sp, #112]	; 0x70
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800d3ca:	e9cd a81a 	strd	sl, r8, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800d3ce:	f003 f83b 	bl	8010448 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800d3d2:	230a      	movs	r3, #10
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 800d3d4:	a918      	add	r1, sp, #96	; 0x60
 800d3d6:	4871      	ldr	r0, [pc, #452]	; (800d59c <BSP_QSPI_Init+0x388>)
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800d3d8:	931c      	str	r3, [sp, #112]	; 0x70
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 800d3da:	9718      	str	r7, [sp, #96]	; 0x60
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800d3dc:	f8cd b068 	str.w	fp, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 800d3e0:	f003 f832 	bl	8010448 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 800d3e4:	f44f 6000 	mov.w	r0, #2048	; 0x800
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 800d3e8:	a918      	add	r1, sp, #96	; 0x60
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800d3ea:	961c      	str	r6, [sp, #112]	; 0x70
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 800d3ec:	9018      	str	r0, [sp, #96]	; 0x60
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 800d3ee:	486c      	ldr	r0, [pc, #432]	; (800d5a0 <BSP_QSPI_Init+0x38c>)
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800d3f0:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 800d3f4:	f003 f828 	bl	8010448 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 800d3f8:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 800d3fa:	a918      	add	r1, sp, #96	; 0x60
 800d3fc:	4869      	ldr	r0, [pc, #420]	; (800d5a4 <BSP_QSPI_Init+0x390>)
  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 800d3fe:	9318      	str	r3, [sp, #96]	; 0x60
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800d400:	961c      	str	r6, [sp, #112]	; 0x70
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 800d402:	f003 f821 	bl	8010448 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800d406:	230a      	movs	r3, #10
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 800d408:	a918      	add	r1, sp, #96	; 0x60
 800d40a:	4867      	ldr	r0, [pc, #412]	; (800d5a8 <BSP_QSPI_Init+0x394>)
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800d40c:	931c      	str	r3, [sp, #112]	; 0x70
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 800d40e:	f8cd 9060 	str.w	r9, [sp, #96]	; 0x60
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 800d412:	f003 f819 	bl	8010448 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 800d416:	2308      	movs	r3, #8
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 800d418:	a918      	add	r1, sp, #96	; 0x60
 800d41a:	4862      	ldr	r0, [pc, #392]	; (800d5a4 <BSP_QSPI_Init+0x390>)
  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 800d41c:	9318      	str	r3, [sp, #96]	; 0x60
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800d41e:	961c      	str	r6, [sp, #112]	; 0x70
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 800d420:	f003 f812 	bl	8010448 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 800d424:	2380      	movs	r3, #128	; 0x80
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 800d426:	a918      	add	r1, sp, #96	; 0x60
 800d428:	485f      	ldr	r0, [pc, #380]	; (800d5a8 <BSP_QSPI_Init+0x394>)
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 800d42a:	9318      	str	r3, [sp, #96]	; 0x60
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800d42c:	961c      	str	r6, [sp, #112]	; 0x70
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 800d42e:	f003 f80b 	bl	8010448 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 800d432:	a918      	add	r1, sp, #96	; 0x60
 800d434:	4859      	ldr	r0, [pc, #356]	; (800d59c <BSP_QSPI_Init+0x388>)
  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 800d436:	f8cd 9060 	str.w	r9, [sp, #96]	; 0x60
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 800d43a:	f003 f805 	bl	8010448 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 800d43e:	a918      	add	r1, sp, #96	; 0x60
 800d440:	4859      	ldr	r0, [pc, #356]	; (800d5a8 <BSP_QSPI_Init+0x394>)
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 800d442:	9718      	str	r7, [sp, #96]	; 0x60
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 800d444:	f003 f800 	bl	8010448 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 800d448:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 800d44c:	a918      	add	r1, sp, #96	; 0x60
 800d44e:	4853      	ldr	r0, [pc, #332]	; (800d59c <BSP_QSPI_Init+0x388>)
  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 800d450:	9318      	str	r3, [sp, #96]	; 0x60
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 800d452:	f002 fff9 	bl	8010448 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 800d456:	4652      	mov	r2, sl
 800d458:	210f      	movs	r1, #15
 800d45a:	205c      	movs	r0, #92	; 0x5c
 800d45c:	f000 faba 	bl	800d9d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 800d460:	205c      	movs	r0, #92	; 0x5c
 800d462:	f000 faed 	bl	800da40 <HAL_NVIC_EnableIRQ>
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 800d466:	a813      	add	r0, sp, #76	; 0x4c
 800d468:	f7f9 fd6a 	bl	8006f40 <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 800d46c:	786a      	ldrb	r2, [r5, #1]
 800d46e:	4b4f      	ldr	r3, [pc, #316]	; (800d5ac <BSP_QSPI_Init+0x398>)
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 800d470:	9712      	str	r7, [sp, #72]	; 0x48
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 800d472:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d476:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d478:	9110      	str	r1, [sp, #64]	; 0x40
 800d47a:	fa93 f3a3 	rbit	r3, r3
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800d47e:	2a00      	cmp	r2, #0
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 800d480:	fab3 f383 	clz	r3, r3
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 800d484:	4e4a      	ldr	r6, [pc, #296]	; (800d5b0 <BSP_QSPI_Init+0x39c>)
 800d486:	a90f      	add	r1, sp, #60	; 0x3c
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800d488:	bf0c      	ite	eq
 800d48a:	2210      	moveq	r2, #16
 800d48c:	2200      	movne	r2, #0
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 800d48e:	3b01      	subs	r3, #1
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 800d490:	4630      	mov	r0, r6
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800d492:	9211      	str	r2, [sp, #68]	; 0x44
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 800d494:	930f      	str	r3, [sp, #60]	; 0x3c
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 800d496:	f7ff fea5 	bl	800d1e4 <MX_QSPI_Init>
 800d49a:	2800      	cmp	r0, #0
 800d49c:	f040 80c0 	bne.w	800d620 <BSP_QSPI_Init+0x40c>
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 800d4a0:	4641      	mov	r1, r8
 800d4a2:	4630      	mov	r0, r6
 800d4a4:	f7f9 ff18 	bl	80072d8 <MT25TL01G_ResetEnable>
 800d4a8:	2800      	cmp	r0, #0
 800d4aa:	f040 809e 	bne.w	800d5ea <BSP_QSPI_Init+0x3d6>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 800d4ae:	4641      	mov	r1, r8
 800d4b0:	4630      	mov	r0, r6
 800d4b2:	f7f9 ff31 	bl	8007318 <MT25TL01G_ResetMemory>
 800d4b6:	2800      	cmp	r0, #0
 800d4b8:	f040 8097 	bne.w	800d5ea <BSP_QSPI_Init+0x3d6>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800d4bc:	7861      	ldrb	r1, [r4, #1]
 800d4be:	4630      	mov	r0, r6
 800d4c0:	f7f9 fdd0 	bl	8007064 <MT25TL01G_AutoPollingMemReady>
 800d4c4:	2800      	cmp	r0, #0
 800d4c6:	f040 8090 	bne.w	800d5ea <BSP_QSPI_Init+0x3d6>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 800d4ca:	4601      	mov	r1, r0
 800d4cc:	4630      	mov	r0, r6
 800d4ce:	f7f9 ff03 	bl	80072d8 <MT25TL01G_ResetEnable>
 800d4d2:	2800      	cmp	r0, #0
 800d4d4:	f040 8089 	bne.w	800d5ea <BSP_QSPI_Init+0x3d6>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 800d4d8:	4601      	mov	r1, r0
 800d4da:	4630      	mov	r0, r6
 800d4dc:	f7f9 ff1c 	bl	8007318 <MT25TL01G_ResetMemory>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	2800      	cmp	r0, #0
 800d4e4:	f040 8081 	bne.w	800d5ea <BSP_QSPI_Init+0x3d6>
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800d4e8:	4601      	mov	r1, r0
 800d4ea:	4630      	mov	r0, r6
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 800d4ec:	f884 b000 	strb.w	fp, [r4]
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
 800d4f0:	7063      	strb	r3, [r4, #1]
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 800d4f2:	70a3      	strb	r3, [r4, #2]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800d4f4:	f7f9 fdb6 	bl	8007064 <MT25TL01G_AutoPollingMemReady>
 800d4f8:	2800      	cmp	r0, #0
 800d4fa:	d176      	bne.n	800d5ea <BSP_QSPI_Init+0x3d6>
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800d4fc:	7861      	ldrb	r1, [r4, #1]
 800d4fe:	4630      	mov	r0, r6
 800d500:	f7f9 fd32 	bl	8006f68 <MT25TL01G_Enter4BytesAddressMode>
 800d504:	2800      	cmp	r0, #0
 800d506:	d170      	bne.n	800d5ea <BSP_QSPI_Init+0x3d6>
    int32_t ret= BSP_ERROR_NONE;
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800d508:	f44f 7140 	mov.w	r1, #768	; 0x300
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 800d50c:	f04f 0c85 	mov.w	ip, #133	; 0x85
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800d510:	f04f 7740 	mov.w	r7, #50331648	; 0x3000000
  s_command.DummyCycles       = 0;
  s_command.NbData            = 2;
 800d514:	2302      	movs	r3, #2
  uint16_t reg=0;
 800d516:	f8ad 000a 	strh.w	r0, [sp, #10]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800d51a:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.DummyCycles       = 0;
 800d51e:	901d      	str	r0, [sp, #116]	; 0x74
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800d520:	9025      	str	r0, [sp, #148]	; 0x94
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800d522:	911e      	str	r1, [sp, #120]	; 0x78
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800d524:	a918      	add	r1, sp, #96	; 0x60
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 800d526:	f8cd c060 	str.w	ip, [sp, #96]	; 0x60
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800d52a:	9721      	str	r7, [sp, #132]	; 0x84
  s_command.NbData            = 2;
 800d52c:	9322      	str	r3, [sp, #136]	; 0x88
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800d52e:	e9cd 001f 	strd	r0, r0, [sp, #124]	; 0x7c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800d532:	e9cd 0023 	strd	r0, r0, [sp, #140]	; 0x8c
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800d536:	481e      	ldr	r0, [pc, #120]	; (800d5b0 <BSP_QSPI_Init+0x39c>)
 800d538:	f004 fa50 	bl	80119dc <HAL_QSPI_Command>
 800d53c:	2800      	cmp	r0, #0
 800d53e:	d154      	bne.n	800d5ea <BSP_QSPI_Init+0x3d6>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800d540:	f241 3288 	movw	r2, #5000	; 0x1388
 800d544:	481a      	ldr	r0, [pc, #104]	; (800d5b0 <BSP_QSPI_Init+0x39c>)
 800d546:	f10d 010a 	add.w	r1, sp, #10
 800d54a:	f004 fb21 	bl	8011b90 <HAL_QSPI_Receive>
 800d54e:	2800      	cmp	r0, #0
 800d550:	d14b      	bne.n	800d5ea <BSP_QSPI_Init+0x3d6>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800d552:	7861      	ldrb	r1, [r4, #1]
 800d554:	4816      	ldr	r0, [pc, #88]	; (800d5b0 <BSP_QSPI_Init+0x39c>)
 800d556:	f7f9 fdaf 	bl	80070b8 <MT25TL01G_WriteEnable>
 800d55a:	4607      	mov	r7, r0
 800d55c:	2800      	cmp	r0, #0
 800d55e:	d144      	bne.n	800d5ea <BSP_QSPI_Init+0x3d6>
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 800d560:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 800d564:	f640 720f 	movw	r2, #3855	; 0xf0f
 800d568:	f248 0380 	movw	r3, #32896	; 0x8080
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800d56c:	a918      	add	r1, sp, #96	; 0x60
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 800d56e:	4002      	ands	r2, r0
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 800d570:	2081      	movs	r0, #129	; 0x81
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 800d572:	4313      	orrs	r3, r2
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 800d574:	9018      	str	r0, [sp, #96]	; 0x60
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800d576:	f241 3288 	movw	r2, #5000	; 0x1388
 800d57a:	480d      	ldr	r0, [pc, #52]	; (800d5b0 <BSP_QSPI_Init+0x39c>)
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 800d57c:	f8ad 300a 	strh.w	r3, [sp, #10]
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800d580:	f004 fa2c 	bl	80119dc <HAL_QSPI_Command>
 800d584:	bb88      	cbnz	r0, 800d5ea <BSP_QSPI_Init+0x3d6>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800d586:	f10d 010a 	add.w	r1, sp, #10
 800d58a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d58e:	4808      	ldr	r0, [pc, #32]	; (800d5b0 <BSP_QSPI_Init+0x39c>)
 800d590:	f004 fa86 	bl	8011aa0 <HAL_QSPI_Transmit>
 800d594:	bb48      	cbnz	r0, 800d5ea <BSP_QSPI_Init+0x3d6>
 800d596:	e00f      	b.n	800d5b8 <BSP_QSPI_Init+0x3a4>
 800d598:	58020400 	.word	0x58020400
 800d59c:	58021800 	.word	0x58021800
 800d5a0:	58020c00 	.word	0x58020c00
 800d5a4:	58021c00 	.word	0x58021c00
 800d5a8:	58021400 	.word	0x58021400
 800d5ac:	080bfbdc 	.word	0x080bfbdc
 800d5b0:	2400a3e0 	.word	0x2400a3e0
 800d5b4:	58024400 	.word	0x58024400
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 800d5b8:	7823      	ldrb	r3, [r4, #0]
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 800d5ba:	f895 8000 	ldrb.w	r8, [r5]
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 800d5be:	2b02      	cmp	r3, #2
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 800d5c0:	786d      	ldrb	r5, [r5, #1]
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 800d5c2:	d012      	beq.n	800d5ea <BSP_QSPI_Init+0x3d6>
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800d5c4:	2d00      	cmp	r5, #0
      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 800d5c6:	4818      	ldr	r0, [pc, #96]	; (800d628 <BSP_QSPI_Init+0x414>)
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800d5c8:	bf0c      	ite	eq
 800d5ca:	2310      	moveq	r3, #16
 800d5cc:	2300      	movne	r3, #0
 800d5ce:	60f3      	str	r3, [r6, #12]
      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 800d5d0:	f004 f9a8 	bl	8011924 <HAL_QSPI_Init>
 800d5d4:	b948      	cbnz	r0, 800d5ea <BSP_QSPI_Init+0x3d6>
        switch(QSPI_Ctx[Instance].InterfaceMode)
 800d5d6:	7863      	ldrb	r3, [r4, #1]
 800d5d8:	2b03      	cmp	r3, #3
 800d5da:	d10c      	bne.n	800d5f6 <BSP_QSPI_Init+0x3e2>
          if(Mode != MT25TL01G_QPI_MODE)
 800d5dc:	f1b8 0f03 	cmp.w	r8, #3
 800d5e0:	d00c      	beq.n	800d5fc <BSP_QSPI_Init+0x3e8>
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 800d5e2:	4811      	ldr	r0, [pc, #68]	; (800d628 <BSP_QSPI_Init+0x414>)
 800d5e4:	f7f9 fdc8 	bl	8007178 <MT25TL01G_ExitQPIMode>
 800d5e8:	b140      	cbz	r0, 800d5fc <BSP_QSPI_Init+0x3e8>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800d5ea:	f06f 0704 	mvn.w	r7, #4
}
 800d5ee:	4638      	mov	r0, r7
 800d5f0:	b027      	add	sp, #156	; 0x9c
 800d5f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if(Mode == MT25TL01G_QPI_MODE)
 800d5f6:	f1b8 0f03 	cmp.w	r8, #3
 800d5fa:	d008      	beq.n	800d60e <BSP_QSPI_Init+0x3fa>
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 800d5fc:	2301      	movs	r3, #1
}
 800d5fe:	4638      	mov	r0, r7
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 800d600:	f884 8001 	strb.w	r8, [r4, #1]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 800d604:	70a5      	strb	r5, [r4, #2]
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 800d606:	7023      	strb	r3, [r4, #0]
}
 800d608:	b027      	add	sp, #156	; 0x9c
 800d60a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 800d60e:	4806      	ldr	r0, [pc, #24]	; (800d628 <BSP_QSPI_Init+0x414>)
 800d610:	f7f9 fd96 	bl	8007140 <MT25TL01G_EnterQPIMode>
 800d614:	2800      	cmp	r0, #0
 800d616:	d0f1      	beq.n	800d5fc <BSP_QSPI_Init+0x3e8>
 800d618:	e7e7      	b.n	800d5ea <BSP_QSPI_Init+0x3d6>
    ret = BSP_ERROR_WRONG_PARAM;
 800d61a:	f06f 0701 	mvn.w	r7, #1
 800d61e:	e606      	b.n	800d22e <BSP_QSPI_Init+0x1a>
          ret = BSP_ERROR_PERIPH_FAILURE;
 800d620:	f06f 0703 	mvn.w	r7, #3
  return ret;
 800d624:	e603      	b.n	800d22e <BSP_QSPI_Init+0x1a>
 800d626:	bf00      	nop
 800d628:	2400a3e0 	.word	0x2400a3e0

0800d62c <BSP_QSPI_EnableMemoryMappedMode>:
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800d62c:	b998      	cbnz	r0, 800d656 <BSP_QSPI_EnableMemoryMappedMode+0x2a>
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800d62e:	480b      	ldr	r0, [pc, #44]	; (800d65c <BSP_QSPI_EnableMemoryMappedMode+0x30>)
{
 800d630:	b510      	push	{r4, lr}
 800d632:	4c0b      	ldr	r4, [pc, #44]	; (800d660 <BSP_QSPI_EnableMemoryMappedMode+0x34>)
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 800d634:	78a3      	ldrb	r3, [r4, #2]
 800d636:	7861      	ldrb	r1, [r4, #1]
 800d638:	b133      	cbz	r3, 800d648 <BSP_QSPI_EnableMemoryMappedMode+0x1c>
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800d63a:	f7f9 fdb9 	bl	80071b0 <MT25TL01G_EnableMemoryMappedModeDTR>
 800d63e:	b938      	cbnz	r0, 800d650 <BSP_QSPI_EnableMemoryMappedMode+0x24>
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800d640:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
 800d642:	2000      	movs	r0, #0
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800d644:	7023      	strb	r3, [r4, #0]
}
 800d646:	bd10      	pop	{r4, pc}
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800d648:	f7f9 fdfe 	bl	8007248 <MT25TL01G_EnableMemoryMappedModeSTR>
 800d64c:	2800      	cmp	r0, #0
 800d64e:	d0f7      	beq.n	800d640 <BSP_QSPI_EnableMemoryMappedMode+0x14>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800d650:	f06f 0004 	mvn.w	r0, #4
}
 800d654:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800d656:	f06f 0001 	mvn.w	r0, #1
}
 800d65a:	4770      	bx	lr
 800d65c:	2400a3e0 	.word	0x2400a3e0
 800d660:	2400a3d4 	.word	0x2400a3d4

0800d664 <BSP_SD_DeInit>:
  * @retval SD status
  */
int32_t BSP_SD_DeInit(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;
  if(Instance >= SD_INSTANCES_NBR)
 800d664:	b9d0      	cbnz	r0, 800d69c <BSP_SD_DeInit+0x38>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    if(HAL_SD_DeInit(&hsd_sdmmc[Instance]) != HAL_OK)/* HAL SD de-initialization */
 800d666:	4810      	ldr	r0, [pc, #64]	; (800d6a8 <BSP_SD_DeInit+0x44>)
{
 800d668:	b510      	push	{r4, lr}
    if(HAL_SD_DeInit(&hsd_sdmmc[Instance]) != HAL_OK)/* HAL SD de-initialization */
 800d66a:	f007 fb7f 	bl	8014d6c <HAL_SD_DeInit>
 800d66e:	4604      	mov	r4, r0
 800d670:	b9b8      	cbnz	r0, 800d6a2 <BSP_SD_DeInit+0x3e>
{
  GPIO_InitTypeDef gpio_init_structure;

  if(hsd == &hsd_sdmmc[0])
  {
    HAL_NVIC_DisableIRQ(SDMMC1_IRQn);
 800d672:	2031      	movs	r0, #49	; 0x31
 800d674:	f000 f9f2 	bl	800da5c <HAL_NVIC_DisableIRQ>

    /* DeInit GPIO pins can be done in the application
    (by surcharging this __weak function) */

    /* Disable SDMMC1 clock */
    __HAL_RCC_SDMMC1_CLK_DISABLE();
 800d678:	4a0c      	ldr	r2, [pc, #48]	; (800d6ac <BSP_SD_DeInit+0x48>)
    /* GPIOC configuration */
    gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
#else
    gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_12;
#endif
    HAL_GPIO_DeInit(GPIOC, gpio_init_structure.Pin);
 800d67a:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 800d67e:	480c      	ldr	r0, [pc, #48]	; (800d6b0 <BSP_SD_DeInit+0x4c>)
    __HAL_RCC_SDMMC1_CLK_DISABLE();
 800d680:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
 800d684:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d688:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    HAL_GPIO_DeInit(GPIOC, gpio_init_structure.Pin);
 800d68c:	f002 fffa 	bl	8010684 <HAL_GPIO_DeInit>

    /* GPIOD configuration */
    gpio_init_structure.Pin = GPIO_PIN_2;
    HAL_GPIO_DeInit(GPIOD, gpio_init_structure.Pin);
 800d690:	2104      	movs	r1, #4
 800d692:	4808      	ldr	r0, [pc, #32]	; (800d6b4 <BSP_SD_DeInit+0x50>)
 800d694:	f002 fff6 	bl	8010684 <HAL_GPIO_DeInit>
  int32_t ret = BSP_ERROR_NONE;
 800d698:	4620      	mov	r0, r4
}
 800d69a:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800d69c:	f06f 0001 	mvn.w	r0, #1
}
 800d6a0:	4770      	bx	lr
      ret = BSP_ERROR_PERIPH_FAILURE;
 800d6a2:	f06f 0003 	mvn.w	r0, #3
}
 800d6a6:	bd10      	pop	{r4, pc}
 800d6a8:	2400a42c 	.word	0x2400a42c
 800d6ac:	58024400 	.word	0x58024400
 800d6b0:	58020800 	.word	0x58020800
 800d6b4:	58020c00 	.word	0x58020c00

0800d6b8 <MX_SDMMC1_SD_Init>:
{
 800d6b8:	b538      	push	{r3, r4, r5, lr}
  hsd->Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800d6ba:	2200      	movs	r2, #0
  hsd->Init.ClockDiv            = SDMMC_NSpeed_CLK_DIV;
 800d6bc:	2104      	movs	r1, #4
  hsd->Instance                 = SDMMC1;
 800d6be:	4d07      	ldr	r5, [pc, #28]	; (800d6dc <MX_SDMMC1_SD_Init+0x24>)
  hsd->Init.TranceiverPresent   = SDMMC_TRANSCEIVER_PRESENT;
 800d6c0:	2402      	movs	r4, #2
  hsd->Instance                 = SDMMC1;
 800d6c2:	6005      	str	r5, [r0, #0]
  hsd->Init.ClockDiv            = SDMMC_NSpeed_CLK_DIV;
 800d6c4:	e9c0 1405 	strd	r1, r4, [r0, #20]
  hsd->Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800d6c8:	e9c0 2201 	strd	r2, r2, [r0, #4]
  hsd->Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800d6cc:	e9c0 2203 	strd	r2, r2, [r0, #12]
  if(HAL_SD_Init(hsd) != HAL_OK)
 800d6d0:	f007 ffc4 	bl	801565c <HAL_SD_Init>
}
 800d6d4:	3000      	adds	r0, #0
 800d6d6:	bf18      	it	ne
 800d6d8:	2001      	movne	r0, #1
 800d6da:	bd38      	pop	{r3, r4, r5, pc}
 800d6dc:	52007000 	.word	0x52007000

0800d6e0 <BSP_SD_Init>:
  if(Instance >= SD_INSTANCES_NBR)
 800d6e0:	2800      	cmp	r0, #0
 800d6e2:	d17b      	bne.n	800d7dc <BSP_SD_Init+0xfc>
    ret = (uint32_t)HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT,GPIO_PIN_8 );/*PinDetect[Instance]*/
 800d6e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d6e8:	4841      	ldr	r0, [pc, #260]	; (800d7f0 <BSP_SD_Init+0x110>)
{
 800d6ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6ee:	b08a      	sub	sp, #40	; 0x28
    ret = (uint32_t)HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT,GPIO_PIN_8 );/*PinDetect[Instance]*/
 800d6f0:	f003 f89e 	bl	8010830 <HAL_GPIO_ReadPin>
    if(ret != GPIO_PIN_RESET)
 800d6f4:	4606      	mov	r6, r0
 800d6f6:	2800      	cmp	r0, #0
 800d6f8:	d173      	bne.n	800d7e2 <BSP_SD_Init+0x102>
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 800d6fa:	4c3e      	ldr	r4, [pc, #248]	; (800d7f4 <BSP_SD_Init+0x114>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800d6fc:	2702      	movs	r7, #2
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_12;
 800d6fe:	ad0a      	add	r5, sp, #40	; 0x28
 800d700:	f44f 5188 	mov.w	r1, #4352	; 0x1100
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 800d704:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800d708:	2003      	movs	r0, #3
  gpio_init_structure.Alternate = GPIO_AF12_SDIO1;
 800d70a:	220c      	movs	r2, #12
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800d70c:	f04f 0801 	mov.w	r8, #1
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 800d710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d714:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
 800d718:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 800d71c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d720:	9300      	str	r3, [sp, #0]
 800d722:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d724:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800d728:	433b      	orrs	r3, r7
 800d72a:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800d72e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800d732:	403b      	ands	r3, r7
 800d734:	9301      	str	r3, [sp, #4]
 800d736:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800d738:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800d73c:	f043 0304 	orr.w	r3, r3, #4
 800d740:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800d744:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800d748:	f003 0304 	and.w	r3, r3, #4
 800d74c:	9302      	str	r3, [sp, #8]
 800d74e:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800d750:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800d754:	f043 0308 	orr.w	r3, r3, #8
 800d758:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800d75c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_12;
 800d760:	f845 1d14 	str.w	r1, [r5, #-20]!
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800d764:	4629      	mov	r1, r5
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800d766:	f003 0308 	and.w	r3, r3, #8
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800d76a:	9008      	str	r0, [sp, #32]
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800d76c:	4822      	ldr	r0, [pc, #136]	; (800d7f8 <BSP_SD_Init+0x118>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800d76e:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Alternate = GPIO_AF12_SDIO1;
 800d770:	9209      	str	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800d772:	9b03      	ldr	r3, [sp, #12]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800d774:	e9cd 7806 	strd	r7, r8, [sp, #24]
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800d778:	f002 fe66 	bl	8010448 <HAL_GPIO_Init>
  gpio_init_structure.Pin = GPIO_PIN_2;
 800d77c:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800d77e:	4629      	mov	r1, r5
 800d780:	481e      	ldr	r0, [pc, #120]	; (800d7fc <BSP_SD_Init+0x11c>)
  gpio_init_structure.Pin = GPIO_PIN_2;
 800d782:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800d784:	f002 fe60 	bl	8010448 <HAL_GPIO_Init>
  SD_DETECT_GPIO_CLK_ENABLE();
 800d788:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Pin = SD_DETECT_PIN;
 800d78c:	f44f 7280 	mov.w	r2, #256	; 0x100
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 800d790:	4629      	mov	r1, r5
 800d792:	4817      	ldr	r0, [pc, #92]	; (800d7f0 <BSP_SD_Init+0x110>)
  SD_DETECT_GPIO_CLK_ENABLE();
 800d794:	4313      	orrs	r3, r2
 800d796:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800d79a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Pin = SD_DETECT_PIN;
 800d79e:	9205      	str	r2, [sp, #20]
  SD_DETECT_GPIO_CLK_ENABLE();
 800d7a0:	4013      	ands	r3, r2
  gpio_init_structure.Pull = GPIO_PULLUP;
 800d7a2:	f8cd 801c 	str.w	r8, [sp, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800d7a6:	9708      	str	r7, [sp, #32]
  SD_DETECT_GPIO_CLK_ENABLE();
 800d7a8:	9304      	str	r3, [sp, #16]
 800d7aa:	9b04      	ldr	r3, [sp, #16]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800d7ac:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 800d7ae:	f002 fe4b 	bl	8010448 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDMMC1_IRQn, BSP_SD_IT_PRIORITY, 0);
 800d7b2:	4632      	mov	r2, r6
 800d7b4:	210e      	movs	r1, #14
 800d7b6:	2031      	movs	r0, #49	; 0x31
 800d7b8:	f000 f90c 	bl	800d9d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800d7bc:	2031      	movs	r0, #49	; 0x31
 800d7be:	f000 f93f 	bl	800da40 <HAL_NVIC_EnableIRQ>
        if(MX_SDMMC1_SD_Init(&hsd_sdmmc[Instance]) != HAL_OK)
 800d7c2:	480f      	ldr	r0, [pc, #60]	; (800d800 <BSP_SD_Init+0x120>)
 800d7c4:	f7ff ff78 	bl	800d6b8 <MX_SDMMC1_SD_Init>
 800d7c8:	4604      	mov	r4, r0
 800d7ca:	b968      	cbnz	r0, 800d7e8 <BSP_SD_Init+0x108>
          (void)HAL_SD_ConfigSpeedBusOperation(&hsd_sdmmc[Instance], SDMMC_SPEED_MODE_HIGH);
 800d7cc:	4639      	mov	r1, r7
 800d7ce:	480c      	ldr	r0, [pc, #48]	; (800d800 <BSP_SD_Init+0x120>)
 800d7d0:	f007 ffaa 	bl	8015728 <HAL_SD_ConfigSpeedBusOperation>
  int32_t ret = BSP_ERROR_NONE;
 800d7d4:	4620      	mov	r0, r4
}
 800d7d6:	b00a      	add	sp, #40	; 0x28
 800d7d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800d7dc:	f06f 0001 	mvn.w	r0, #1
}
 800d7e0:	4770      	bx	lr
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800d7e2:	f06f 0006 	mvn.w	r0, #6
 800d7e6:	e7f6      	b.n	800d7d6 <BSP_SD_Init+0xf6>
          ret = BSP_ERROR_PERIPH_FAILURE;
 800d7e8:	f06f 0003 	mvn.w	r0, #3
  return ret;
 800d7ec:	e7f3      	b.n	800d7d6 <BSP_SD_Init+0xf6>
 800d7ee:	bf00      	nop
 800d7f0:	58022000 	.word	0x58022000
 800d7f4:	58024400 	.word	0x58024400
 800d7f8:	58020800 	.word	0x58020800
 800d7fc:	58020c00 	.word	0x58020c00
 800d800:	2400a42c 	.word	0x2400a42c

0800d804 <BSP_SD_ReadBlocks>:
{
 800d804:	b510      	push	{r4, lr}
  uint32_t timeout = SD_READ_TIMEOUT*BlocksNbr;
 800d806:	2464      	movs	r4, #100	; 0x64
{
 800d808:	b082      	sub	sp, #8
  uint32_t timeout = SD_READ_TIMEOUT*BlocksNbr;
 800d80a:	fb04 f403 	mul.w	r4, r4, r3
  if(Instance >= SD_INSTANCES_NBR)
 800d80e:	b950      	cbnz	r0, 800d826 <BSP_SD_ReadBlocks+0x22>
    if(HAL_SD_ReadBlocks(&hsd_sdmmc[Instance], (uint8_t *)pData, BlockIdx, BlocksNbr, timeout) != HAL_OK)
 800d810:	9400      	str	r4, [sp, #0]
 800d812:	4806      	ldr	r0, [pc, #24]	; (800d82c <BSP_SD_ReadBlocks+0x28>)
 800d814:	f007 f8ae 	bl	8014974 <HAL_SD_ReadBlocks>
 800d818:	2800      	cmp	r0, #0
      ret = BSP_ERROR_PERIPH_FAILURE;
 800d81a:	bf0c      	ite	eq
 800d81c:	2000      	moveq	r0, #0
 800d81e:	f06f 0003 	mvnne.w	r0, #3
}
 800d822:	b002      	add	sp, #8
 800d824:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800d826:	f06f 0001 	mvn.w	r0, #1
 800d82a:	e7fa      	b.n	800d822 <BSP_SD_ReadBlocks+0x1e>
 800d82c:	2400a42c 	.word	0x2400a42c

0800d830 <BSP_SD_WriteBlocks>:
{
 800d830:	b510      	push	{r4, lr}
  uint32_t timeout = SD_READ_TIMEOUT*BlocksNbr;
 800d832:	2464      	movs	r4, #100	; 0x64
{
 800d834:	b082      	sub	sp, #8
  uint32_t timeout = SD_READ_TIMEOUT*BlocksNbr;
 800d836:	fb04 f403 	mul.w	r4, r4, r3
  if(Instance >= SD_INSTANCES_NBR)
 800d83a:	b950      	cbnz	r0, 800d852 <BSP_SD_WriteBlocks+0x22>
    if(HAL_SD_WriteBlocks(&hsd_sdmmc[Instance], (uint8_t *)pData, BlockIdx, BlocksNbr, timeout) != HAL_OK)
 800d83c:	9400      	str	r4, [sp, #0]
 800d83e:	4806      	ldr	r0, [pc, #24]	; (800d858 <BSP_SD_WriteBlocks+0x28>)
 800d840:	f007 f9a0 	bl	8014b84 <HAL_SD_WriteBlocks>
 800d844:	2800      	cmp	r0, #0
      ret = BSP_ERROR_PERIPH_FAILURE;
 800d846:	bf0c      	ite	eq
 800d848:	2000      	moveq	r0, #0
 800d84a:	f06f 0003 	mvnne.w	r0, #3
}
 800d84e:	b002      	add	sp, #8
 800d850:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800d852:	f06f 0001 	mvn.w	r0, #1
 800d856:	e7fa      	b.n	800d84e <BSP_SD_WriteBlocks+0x1e>
 800d858:	2400a42c 	.word	0x2400a42c

0800d85c <BSP_SD_GetCardState>:
{
 800d85c:	b508      	push	{r3, lr}
  return (int32_t)((HAL_SD_GetCardState(&hsd_sdmmc[Instance]) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d85e:	4b04      	ldr	r3, [pc, #16]	; (800d870 <BSP_SD_GetCardState+0x14>)
 800d860:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
 800d864:	f008 f8c0 	bl	80159e8 <HAL_SD_GetCardState>
}
 800d868:	3804      	subs	r0, #4
 800d86a:	bf18      	it	ne
 800d86c:	2001      	movne	r0, #1
 800d86e:	bd08      	pop	{r3, pc}
 800d870:	2400a42c 	.word	0x2400a42c

0800d874 <BSP_SD_GetCardInfo>:
  if(Instance >= SD_INSTANCES_NBR)
 800d874:	b948      	cbnz	r0, 800d88a <BSP_SD_GetCardInfo+0x16>
    if(HAL_SD_GetCardInfo(&hsd_sdmmc[Instance], CardInfo) != HAL_OK)
 800d876:	4806      	ldr	r0, [pc, #24]	; (800d890 <BSP_SD_GetCardInfo+0x1c>)
{
 800d878:	b508      	push	{r3, lr}
    if(HAL_SD_GetCardInfo(&hsd_sdmmc[Instance], CardInfo) != HAL_OK)
 800d87a:	f007 fe37 	bl	80154ec <HAL_SD_GetCardInfo>
 800d87e:	2800      	cmp	r0, #0
      ret = BSP_ERROR_PERIPH_FAILURE;
 800d880:	bf0c      	ite	eq
 800d882:	2000      	moveq	r0, #0
 800d884:	f06f 0003 	mvnne.w	r0, #3
}
 800d888:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800d88a:	f06f 0001 	mvn.w	r0, #1
}
 800d88e:	4770      	bx	lr
 800d890:	2400a42c 	.word	0x2400a42c

0800d894 <HAL_SD_DriveTransceiver_1_8V_Callback>:
}
 800d894:	4770      	bx	lr
 800d896:	bf00      	nop

0800d898 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800d898:	4b0f      	ldr	r3, [pc, #60]	; (800d8d8 <HAL_InitTick+0x40>)
 800d89a:	781b      	ldrb	r3, [r3, #0]
 800d89c:	b90b      	cbnz	r3, 800d8a2 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 800d89e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800d8a0:	4770      	bx	lr
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800d8a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d8a6:	490d      	ldr	r1, [pc, #52]	; (800d8dc <HAL_InitTick+0x44>)
 800d8a8:	fbb2 f3f3 	udiv	r3, r2, r3
{
 800d8ac:	b510      	push	{r4, lr}
 800d8ae:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800d8b0:	6808      	ldr	r0, [r1, #0]
 800d8b2:	fbb0 f0f3 	udiv	r0, r0, r3
 800d8b6:	f000 f8e5 	bl	800da84 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800d8ba:	2c0f      	cmp	r4, #15
 800d8bc:	d800      	bhi.n	800d8c0 <HAL_InitTick+0x28>
 800d8be:	b108      	cbz	r0, 800d8c4 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 800d8c0:	2001      	movs	r0, #1
}
 800d8c2:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	4621      	mov	r1, r4
 800d8c8:	f04f 30ff 	mov.w	r0, #4294967295
 800d8cc:	f000 f882 	bl	800d9d4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800d8d0:	4b03      	ldr	r3, [pc, #12]	; (800d8e0 <HAL_InitTick+0x48>)
 800d8d2:	2000      	movs	r0, #0
 800d8d4:	601c      	str	r4, [r3, #0]
}
 800d8d6:	bd10      	pop	{r4, pc}
 800d8d8:	240073b8 	.word	0x240073b8
 800d8dc:	24007290 	.word	0x24007290
 800d8e0:	240073bc 	.word	0x240073bc

0800d8e4 <HAL_Init>:
{
 800d8e4:	b530      	push	{r4, r5, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800d8e6:	2003      	movs	r0, #3
{
 800d8e8:	b083      	sub	sp, #12
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800d8ea:	f000 f85f 	bl	800d9ac <HAL_NVIC_SetPriorityGrouping>
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d8ee:	4c12      	ldr	r4, [pc, #72]	; (800d938 <HAL_Init+0x54>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800d8f0:	f004 fd8e 	bl	8012410 <HAL_RCC_GetSysClockFreq>
 800d8f4:	4a11      	ldr	r2, [pc, #68]	; (800d93c <HAL_Init+0x58>)
 800d8f6:	4912      	ldr	r1, [pc, #72]	; (800d940 <HAL_Init+0x5c>)
 800d8f8:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d8fa:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800d8fc:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
 800d900:	4d10      	ldr	r5, [pc, #64]	; (800d944 <HAL_Init+0x60>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d902:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800d906:	5ccb      	ldrb	r3, [r1, r3]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d908:	5c8a      	ldrb	r2, [r1, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800d90a:	f003 031f 	and.w	r3, r3, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d90e:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800d912:	fa20 f303 	lsr.w	r3, r0, r3
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800d916:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d918:	fa23 f202 	lsr.w	r2, r3, r2
  SystemCoreClock = common_system_clock;
 800d91c:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d91e:	6022      	str	r2, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800d920:	f7ff ffba 	bl	800d898 <HAL_InitTick>
 800d924:	b110      	cbz	r0, 800d92c <HAL_Init+0x48>
    return HAL_ERROR;
 800d926:	2001      	movs	r0, #1
}
 800d928:	b003      	add	sp, #12
 800d92a:	bd30      	pop	{r4, r5, pc}
 800d92c:	9001      	str	r0, [sp, #4]
  HAL_MspInit();
 800d92e:	f7f9 f877 	bl	8006a20 <HAL_MspInit>
  return HAL_OK;
 800d932:	9801      	ldr	r0, [sp, #4]
}
 800d934:	b003      	add	sp, #12
 800d936:	bd30      	pop	{r4, r5, pc}
 800d938:	24007294 	.word	0x24007294
 800d93c:	58024400 	.word	0x58024400
 800d940:	080bf274 	.word	0x080bf274
 800d944:	24007290 	.word	0x24007290

0800d948 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800d948:	4a03      	ldr	r2, [pc, #12]	; (800d958 <HAL_IncTick+0x10>)
 800d94a:	4b04      	ldr	r3, [pc, #16]	; (800d95c <HAL_IncTick+0x14>)
 800d94c:	6811      	ldr	r1, [r2, #0]
 800d94e:	781b      	ldrb	r3, [r3, #0]
 800d950:	440b      	add	r3, r1
 800d952:	6013      	str	r3, [r2, #0]
}
 800d954:	4770      	bx	lr
 800d956:	bf00      	nop
 800d958:	2400a4b4 	.word	0x2400a4b4
 800d95c:	240073b8 	.word	0x240073b8

0800d960 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800d960:	4b01      	ldr	r3, [pc, #4]	; (800d968 <HAL_GetTick+0x8>)
 800d962:	6818      	ldr	r0, [r3, #0]
}
 800d964:	4770      	bx	lr
 800d966:	bf00      	nop
 800d968:	2400a4b4 	.word	0x2400a4b4

0800d96c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800d96c:	b538      	push	{r3, r4, r5, lr}
 800d96e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800d970:	f7ff fff6 	bl	800d960 <HAL_GetTick>
 800d974:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800d976:	1c63      	adds	r3, r4, #1
 800d978:	d002      	beq.n	800d980 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800d97a:	4b04      	ldr	r3, [pc, #16]	; (800d98c <HAL_Delay+0x20>)
 800d97c:	781b      	ldrb	r3, [r3, #0]
 800d97e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800d980:	f7ff ffee 	bl	800d960 <HAL_GetTick>
 800d984:	1b40      	subs	r0, r0, r5
 800d986:	42a0      	cmp	r0, r4
 800d988:	d3fa      	bcc.n	800d980 <HAL_Delay+0x14>
  {
  }
}
 800d98a:	bd38      	pop	{r3, r4, r5, pc}
 800d98c:	240073b8 	.word	0x240073b8

0800d990 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800d990:	4b01      	ldr	r3, [pc, #4]	; (800d998 <HAL_GetREVID+0x8>)
 800d992:	6818      	ldr	r0, [r3, #0]
}
 800d994:	0c00      	lsrs	r0, r0, #16
 800d996:	4770      	bx	lr
 800d998:	5c001000 	.word	0x5c001000

0800d99c <HAL_EnableCompensationCell>:
  *         voltage ranges from 2.4 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 800d99c:	4a02      	ldr	r2, [pc, #8]	; (800d9a8 <HAL_EnableCompensationCell+0xc>)
 800d99e:	6a13      	ldr	r3, [r2, #32]
 800d9a0:	f043 0301 	orr.w	r3, r3, #1
 800d9a4:	6213      	str	r3, [r2, #32]
}
 800d9a6:	4770      	bx	lr
 800d9a8:	58000400 	.word	0x58000400

0800d9ac <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800d9ac:	4907      	ldr	r1, [pc, #28]	; (800d9cc <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800d9ae:	0200      	lsls	r0, r0, #8
 800d9b0:	4b07      	ldr	r3, [pc, #28]	; (800d9d0 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800d9b2:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800d9b4:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800d9b8:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800d9ba:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 800d9be:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800d9c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d9c4:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800d9c6:	4318      	orrs	r0, r3
  SCB->AIRCR =  reg_value;
 800d9c8:	60c8      	str	r0, [r1, #12]
 800d9ca:	4770      	bx	lr
 800d9cc:	e000ed00 	.word	0xe000ed00
 800d9d0:	05fa0000 	.word	0x05fa0000

0800d9d4 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800d9d4:	4b17      	ldr	r3, [pc, #92]	; (800da34 <HAL_NVIC_SetPriority+0x60>)
 800d9d6:	68db      	ldr	r3, [r3, #12]
 800d9d8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800d9dc:	b430      	push	{r4, r5}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800d9de:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800d9e2:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800d9e4:	2d04      	cmp	r5, #4
 800d9e6:	bf28      	it	cs
 800d9e8:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800d9ea:	2c06      	cmp	r4, #6
 800d9ec:	d918      	bls.n	800da20 <HAL_NVIC_SetPriority+0x4c>
 800d9ee:	3b03      	subs	r3, #3
 800d9f0:	f04f 34ff 	mov.w	r4, #4294967295
 800d9f4:	409c      	lsls	r4, r3
 800d9f6:	ea22 0404 	bic.w	r4, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d9fa:	f04f 32ff 	mov.w	r2, #4294967295
  if ((int32_t)(IRQn) >= 0)
 800d9fe:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800da00:	fa02 f205 	lsl.w	r2, r2, r5
 800da04:	ea21 0102 	bic.w	r1, r1, r2
 800da08:	fa01 f203 	lsl.w	r2, r1, r3
 800da0c:	ea42 0204 	orr.w	r2, r2, r4
 800da10:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800da14:	b2d2      	uxtb	r2, r2
  if ((int32_t)(IRQn) >= 0)
 800da16:	db06      	blt.n	800da26 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800da18:	4b07      	ldr	r3, [pc, #28]	; (800da38 <HAL_NVIC_SetPriority+0x64>)
 800da1a:	541a      	strb	r2, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800da1c:	bc30      	pop	{r4, r5}
 800da1e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800da20:	2400      	movs	r4, #0
 800da22:	4623      	mov	r3, r4
 800da24:	e7e9      	b.n	800d9fa <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800da26:	f000 000f 	and.w	r0, r0, #15
 800da2a:	4b04      	ldr	r3, [pc, #16]	; (800da3c <HAL_NVIC_SetPriority+0x68>)
 800da2c:	541a      	strb	r2, [r3, r0]
 800da2e:	bc30      	pop	{r4, r5}
 800da30:	4770      	bx	lr
 800da32:	bf00      	nop
 800da34:	e000ed00 	.word	0xe000ed00
 800da38:	e000e400 	.word	0xe000e400
 800da3c:	e000ed14 	.word	0xe000ed14

0800da40 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800da40:	2800      	cmp	r0, #0
 800da42:	db07      	blt.n	800da54 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800da44:	f000 011f 	and.w	r1, r0, #31
 800da48:	2301      	movs	r3, #1
 800da4a:	0940      	lsrs	r0, r0, #5
 800da4c:	4a02      	ldr	r2, [pc, #8]	; (800da58 <HAL_NVIC_EnableIRQ+0x18>)
 800da4e:	408b      	lsls	r3, r1
 800da50:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800da54:	4770      	bx	lr
 800da56:	bf00      	nop
 800da58:	e000e100 	.word	0xe000e100

0800da5c <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800da5c:	2800      	cmp	r0, #0
 800da5e:	db0d      	blt.n	800da7c <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800da60:	0943      	lsrs	r3, r0, #5
 800da62:	2201      	movs	r2, #1
 800da64:	f000 001f 	and.w	r0, r0, #31
 800da68:	4905      	ldr	r1, [pc, #20]	; (800da80 <HAL_NVIC_DisableIRQ+0x24>)
 800da6a:	3320      	adds	r3, #32
 800da6c:	fa02 f000 	lsl.w	r0, r2, r0
 800da70:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800da74:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800da78:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800da7c:	4770      	bx	lr
 800da7e:	bf00      	nop
 800da80:	e000e100 	.word	0xe000e100

0800da84 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800da84:	3801      	subs	r0, #1
 800da86:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800da8a:	d20d      	bcs.n	800daa8 <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800da8c:	4b07      	ldr	r3, [pc, #28]	; (800daac <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800da8e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800da90:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800da92:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800da94:	25f0      	movs	r5, #240	; 0xf0
 800da96:	4c06      	ldr	r4, [pc, #24]	; (800dab0 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800da98:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800da9a:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800da9c:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800daa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800daa2:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 800daa4:	bc30      	pop	{r4, r5}
 800daa6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800daa8:	2001      	movs	r0, #1
 800daaa:	4770      	bx	lr
 800daac:	e000e010 	.word	0xe000e010
 800dab0:	e000ed00 	.word	0xe000ed00

0800dab4 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 800dab4:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800dab8:	4a04      	ldr	r2, [pc, #16]	; (800dacc <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800daba:	2000      	movs	r0, #0
 800dabc:	4904      	ldr	r1, [pc, #16]	; (800dad0 <HAL_MPU_Disable+0x1c>)
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800dabe:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800dac0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dac4:	6253      	str	r3, [r2, #36]	; 0x24
  MPU->CTRL = 0;
 800dac6:	6048      	str	r0, [r1, #4]
}
 800dac8:	4770      	bx	lr
 800daca:	bf00      	nop
 800dacc:	e000ed00 	.word	0xe000ed00
 800dad0:	e000ed90 	.word	0xe000ed90

0800dad4 <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800dad4:	4a06      	ldr	r2, [pc, #24]	; (800daf0 <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800dad6:	f040 0001 	orr.w	r0, r0, #1
 800dada:	4b06      	ldr	r3, [pc, #24]	; (800daf4 <HAL_MPU_Enable+0x20>)
 800dadc:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800dade:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800dae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dae4:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800dae6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800daea:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800daee:	4770      	bx	lr
 800daf0:	e000ed00 	.word	0xe000ed00
 800daf4:	e000ed90 	.word	0xe000ed90

0800daf8 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800daf8:	4a12      	ldr	r2, [pc, #72]	; (800db44 <HAL_MPU_ConfigRegion+0x4c>)
 800dafa:	7843      	ldrb	r3, [r0, #1]
 800dafc:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != 0UL)
 800dafe:	7801      	ldrb	r1, [r0, #0]
 800db00:	b911      	cbnz	r1, 800db08 <HAL_MPU_ConfigRegion+0x10>
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
  }
  else
  {
    MPU->RBAR = 0x00;
 800db02:	60d1      	str	r1, [r2, #12]
    MPU->RASR = 0x00;
 800db04:	6111      	str	r1, [r2, #16]
 800db06:	4770      	bx	lr
    MPU->RBAR = MPU_Init->BaseAddress;
 800db08:	6843      	ldr	r3, [r0, #4]
{
 800db0a:	b470      	push	{r4, r5, r6}
    MPU->RBAR = MPU_Init->BaseAddress;
 800db0c:	60d3      	str	r3, [r2, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800db0e:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800db10:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800db12:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800db14:	7a85      	ldrb	r5, [r0, #10]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800db16:	7b86      	ldrb	r6, [r0, #14]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800db18:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800db1c:	7b44      	ldrb	r4, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800db1e:	430b      	orrs	r3, r1
 800db20:	7a01      	ldrb	r1, [r0, #8]
 800db22:	ea43 43c5 	orr.w	r3, r3, r5, lsl #19
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800db26:	7bc5      	ldrb	r5, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800db28:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800db2c:	7a44      	ldrb	r4, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800db2e:	ea43 4346 	orr.w	r3, r3, r6, lsl #17
 800db32:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 800db36:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800db3a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  }
}
 800db3e:	bc70      	pop	{r4, r5, r6}
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800db40:	6113      	str	r3, [r2, #16]
}
 800db42:	4770      	bx	lr
 800db44:	e000ed90 	.word	0xe000ed90

0800db48 <HAL_DCMI_MspInit>:
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_MspInit could be implemented in the user file
   */
}
 800db48:	4770      	bx	lr
 800db4a:	bf00      	nop

0800db4c <HAL_DCMI_Init>:
  if (hdcmi == NULL)
 800db4c:	2800      	cmp	r0, #0
 800db4e:	d04e      	beq.n	800dbee <HAL_DCMI_Init+0xa2>
{
 800db50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800db52:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800db56:	4604      	mov	r4, r0
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d03f      	beq.n	800dbdc <HAL_DCMI_Init+0x90>
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800db5c:	2202      	movs	r2, #2
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800db5e:	69a3      	ldr	r3, [r4, #24]
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800db60:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800db64:	2b00      	cmp	r3, #0
 800db66:	d135      	bne.n	800dbd4 <HAL_DCMI_Init+0x88>
 800db68:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800db6a:	6861      	ldr	r1, [r4, #4]
 800db6c:	6965      	ldr	r5, [r4, #20]
 800db6e:	430b      	orrs	r3, r1
 800db70:	6a27      	ldr	r7, [r4, #32]
  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800db72:	2910      	cmp	r1, #16
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800db74:	ea43 0305 	orr.w	r3, r3, r5
 800db78:	68a5      	ldr	r5, [r4, #8]
 800db7a:	e9d4 6203 	ldrd	r6, r2, [r4, #12]
 800db7e:	ea43 0306 	orr.w	r3, r3, r6
 800db82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800db84:	ea43 0302 	orr.w	r3, r3, r2
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800db88:	6822      	ldr	r2, [r4, #0]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800db8a:	ea43 0305 	orr.w	r3, r3, r5
 800db8e:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800db90:	ea43 0307 	orr.w	r3, r3, r7
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800db94:	6817      	ldr	r7, [r2, #0]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800db96:	ea43 0306 	orr.w	r3, r3, r6
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800db9a:	4e16      	ldr	r6, [pc, #88]	; (800dbf4 <HAL_DCMI_Init+0xa8>)
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800db9c:	ea43 0305 	orr.w	r3, r3, r5
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800dba0:	ea06 0607 	and.w	r6, r6, r7
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800dba4:	6b25      	ldr	r5, [r4, #48]	; 0x30
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800dba6:	6016      	str	r6, [r2, #0]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800dba8:	ea43 0305 	orr.w	r3, r3, r5
 800dbac:	6815      	ldr	r5, [r2, #0]
 800dbae:	ea43 0305 	orr.w	r3, r3, r5
 800dbb2:	ea43 0300 	orr.w	r3, r3, r0
 800dbb6:	6013      	str	r3, [r2, #0]
  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800dbb8:	d101      	bne.n	800dbbe <HAL_DCMI_Init+0x72>
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800dbba:	69e3      	ldr	r3, [r4, #28]
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800dbbc:	6193      	str	r3, [r2, #24]
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800dbbe:	68d3      	ldr	r3, [r2, #12]
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800dbc0:	2100      	movs	r1, #0
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800dbc2:	2501      	movs	r5, #1
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800dbc4:	f043 031e 	orr.w	r3, r3, #30
  return HAL_OK;
 800dbc8:	4608      	mov	r0, r1
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800dbca:	60d3      	str	r3, [r2, #12]
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800dbcc:	64e1      	str	r1, [r4, #76]	; 0x4c
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800dbce:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 800dbd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	4610      	mov	r0, r2
 800dbd8:	6262      	str	r2, [r4, #36]	; 0x24
 800dbda:	e7c6      	b.n	800db6a <HAL_DCMI_Init+0x1e>
    HAL_DCMI_MspInit(hdcmi);
 800dbdc:	f7ff ffb4 	bl	800db48 <HAL_DCMI_MspInit>
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800dbe0:	2202      	movs	r2, #2
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800dbe2:	69a3      	ldr	r3, [r4, #24]
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800dbe4:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d1f3      	bne.n	800dbd4 <HAL_DCMI_Init+0x88>
 800dbec:	e7bc      	b.n	800db68 <HAL_DCMI_Init+0x1c>
    return HAL_ERROR;
 800dbee:	2001      	movs	r0, #1
}
 800dbf0:	4770      	bx	lr
 800dbf2:	bf00      	nop
 800dbf4:	ffe0f007 	.word	0xffe0f007

0800dbf8 <HAL_DCMI_MspDeInit>:
 800dbf8:	4770      	bx	lr
 800dbfa:	bf00      	nop

0800dbfc <HAL_DCMI_DeInit>:
{
 800dbfc:	b510      	push	{r4, lr}
 800dbfe:	4604      	mov	r4, r0
  HAL_DCMI_MspDeInit(hdcmi);
 800dc00:	f7ff fffa 	bl	800dbf8 <HAL_DCMI_MspDeInit>
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800dc04:	2300      	movs	r3, #0
 800dc06:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 800dc08:	4618      	mov	r0, r3
  hdcmi->State = HAL_DCMI_STATE_RESET;
 800dc0a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdcmi);
 800dc0e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800dc12:	bd10      	pop	{r4, pc}

0800dc14 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 800dc14:	b538      	push	{r3, r4, r5, lr}
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800dc16:	4b1e      	ldr	r3, [pc, #120]	; (800dc90 <HAL_DCMI_Stop+0x7c>)
 800dc18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800dc1c:	4c1d      	ldr	r4, [pc, #116]	; (800dc94 <HAL_DCMI_Stop+0x80>)
 800dc1e:	681b      	ldr	r3, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;

  /* Process locked */
  __HAL_LOCK(hdcmi);
 800dc20:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800dc24:	fba4 4303 	umull	r4, r3, r4, r3
  __HAL_LOCK(hdcmi);
 800dc28:	2901      	cmp	r1, #1
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800dc2a:	ea4f 2353 	mov.w	r3, r3, lsr #9
 800dc2e:	fb02 f203 	mul.w	r2, r2, r3
  __HAL_LOCK(hdcmi);
 800dc32:	d02a      	beq.n	800dc8a <HAL_DCMI_Stop+0x76>

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800dc34:	2302      	movs	r3, #2

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800dc36:	6801      	ldr	r1, [r0, #0]
  __HAL_LOCK(hdcmi);
 800dc38:	2401      	movs	r4, #1
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800dc3a:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800dc3e:	680b      	ldr	r3, [r1, #0]
  __HAL_LOCK(hdcmi);
 800dc40:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800dc44:	f023 0301 	bic.w	r3, r3, #1
 800dc48:	600b      	str	r3, [r1, #0]
 800dc4a:	e003      	b.n	800dc54 <HAL_DCMI_Stop+0x40>

      status = HAL_TIMEOUT;
      break;
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 800dc4c:	680b      	ldr	r3, [r1, #0]
 800dc4e:	f013 0301 	ands.w	r3, r3, #1
 800dc52:	d018      	beq.n	800dc86 <HAL_DCMI_Stop+0x72>
    if (count == 0U)
 800dc54:	3a01      	subs	r2, #1
 800dc56:	d1f9      	bne.n	800dc4c <HAL_DCMI_Stop+0x38>
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 800dc58:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
      status = HAL_TIMEOUT;
 800dc5a:	2403      	movs	r4, #3
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 800dc5c:	f043 0320 	orr.w	r3, r3, #32
 800dc60:	64c3      	str	r3, [r0, #76]	; 0x4c

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 800dc62:	680b      	ldr	r3, [r1, #0]
 800dc64:	4605      	mov	r5, r0

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 800dc66:	6c80      	ldr	r0, [r0, #72]	; 0x48
  __HAL_DCMI_DISABLE(hdcmi);
 800dc68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dc6c:	600b      	str	r3, [r1, #0]
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 800dc6e:	f000 ffc9 	bl	800ec04 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 800dc72:	6ce9      	ldr	r1, [r5, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 800dc74:	2301      	movs	r3, #1

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800dc76:	2200      	movs	r2, #0
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 800dc78:	64e9      	str	r1, [r5, #76]	; 0x4c

  /* Return function status */
  return status;
}
 800dc7a:	4620      	mov	r0, r4
  __HAL_UNLOCK(hdcmi);
 800dc7c:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
  hdcmi->State = HAL_DCMI_STATE_READY;
 800dc80:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
}
 800dc84:	bd38      	pop	{r3, r4, r5, pc}
  HAL_StatusTypeDef status = HAL_OK;
 800dc86:	461c      	mov	r4, r3
 800dc88:	e7eb      	b.n	800dc62 <HAL_DCMI_Stop+0x4e>
  __HAL_LOCK(hdcmi);
 800dc8a:	2402      	movs	r4, #2
}
 800dc8c:	4620      	mov	r0, r4
 800dc8e:	bd38      	pop	{r3, r4, r5, pc}
 800dc90:	24007290 	.word	0x24007290
 800dc94:	10624dd3 	.word	0x10624dd3

0800dc98 <HAL_DCMI_Suspend>:
{
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
  HAL_StatusTypeDef status = HAL_OK;

  /* Process locked */
  __HAL_LOCK(hdcmi);
 800dc98:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800dc9c:	2b01      	cmp	r3, #1
 800dc9e:	d038      	beq.n	800dd12 <HAL_DCMI_Suspend+0x7a>
 800dca0:	4602      	mov	r2, r0
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800dca2:	491d      	ldr	r1, [pc, #116]	; (800dd18 <HAL_DCMI_Suspend+0x80>)
  __HAL_LOCK(hdcmi);
 800dca4:	2001      	movs	r0, #1

  if (hdcmi->State == HAL_DCMI_STATE_BUSY)
 800dca6:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800dcaa:	6809      	ldr	r1, [r1, #0]
  if (hdcmi->State == HAL_DCMI_STATE_BUSY)
 800dcac:	2b02      	cmp	r3, #2
  __HAL_LOCK(hdcmi);
 800dcae:	f882 0034 	strb.w	r0, [r2, #52]	; 0x34
  if (hdcmi->State == HAL_DCMI_STATE_BUSY)
 800dcb2:	d004      	beq.n	800dcbe <HAL_DCMI_Suspend+0x26>
      }
    }
    while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800dcb4:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 800dcb6:	2000      	movs	r0, #0
  __HAL_UNLOCK(hdcmi);
 800dcb8:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34

  /* Return function status */
  return status;
}
 800dcbc:	4770      	bx	lr
{
 800dcbe:	b430      	push	{r4, r5}
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800dcc0:	6810      	ldr	r0, [r2, #0]
    hdcmi->State = HAL_DCMI_STATE_SUSPENDED;
 800dcc2:	2405      	movs	r4, #5
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800dcc4:	4d15      	ldr	r5, [pc, #84]	; (800dd1c <HAL_DCMI_Suspend+0x84>)
 800dcc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    hdcmi->State = HAL_DCMI_STATE_SUSPENDED;
 800dcca:	f882 4035 	strb.w	r4, [r2, #53]	; 0x35
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800dcce:	fba5 5101 	umull	r5, r1, r5, r1
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800dcd2:	6804      	ldr	r4, [r0, #0]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800dcd4:	0a49      	lsrs	r1, r1, #9
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800dcd6:	f024 0401 	bic.w	r4, r4, #1
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 800dcda:	fb03 f301 	mul.w	r3, r3, r1
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 800dcde:	6004      	str	r4, [r0, #0]
 800dce0:	e002      	b.n	800dce8 <HAL_DCMI_Suspend+0x50>
    while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 800dce2:	6801      	ldr	r1, [r0, #0]
 800dce4:	07c9      	lsls	r1, r1, #31
 800dce6:	d50e      	bpl.n	800dd06 <HAL_DCMI_Suspend+0x6e>
      if (count == 0U)
 800dce8:	3b01      	subs	r3, #1
 800dcea:	d1fa      	bne.n	800dce2 <HAL_DCMI_Suspend+0x4a>
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 800dcec:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        hdcmi->State = HAL_DCMI_STATE_READY;
 800dcee:	2101      	movs	r1, #1
        status = HAL_TIMEOUT;
 800dcf0:	2003      	movs	r0, #3
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 800dcf2:	f043 0320 	orr.w	r3, r3, #32
 800dcf6:	64d3      	str	r3, [r2, #76]	; 0x4c
  __HAL_UNLOCK(hdcmi);
 800dcf8:	2300      	movs	r3, #0
        hdcmi->State = HAL_DCMI_STATE_READY;
 800dcfa:	f882 1035 	strb.w	r1, [r2, #53]	; 0x35
  __HAL_UNLOCK(hdcmi);
 800dcfe:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
}
 800dd02:	bc30      	pop	{r4, r5}
 800dd04:	4770      	bx	lr
  __HAL_UNLOCK(hdcmi);
 800dd06:	2300      	movs	r3, #0
  HAL_StatusTypeDef status = HAL_OK;
 800dd08:	2000      	movs	r0, #0
  __HAL_UNLOCK(hdcmi);
 800dd0a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
}
 800dd0e:	bc30      	pop	{r4, r5}
 800dd10:	4770      	bx	lr
  __HAL_LOCK(hdcmi);
 800dd12:	2002      	movs	r0, #2
 800dd14:	4770      	bx	lr
 800dd16:	bf00      	nop
 800dd18:	24007290 	.word	0x24007290
 800dd1c:	10624dd3 	.word	0x10624dd3

0800dd20 <HAL_DCMI_Resume>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Resume(DCMI_HandleTypeDef *hdcmi)
{
  /* Process locked */
  __HAL_LOCK(hdcmi);
 800dd20:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800dd24:	2b01      	cmp	r3, #1
 800dd26:	d013      	beq.n	800dd50 <HAL_DCMI_Resume+0x30>

  if (hdcmi->State == HAL_DCMI_STATE_SUSPENDED)
 800dd28:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
  __HAL_LOCK(hdcmi);
 800dd2c:	2201      	movs	r2, #1
  if (hdcmi->State == HAL_DCMI_STATE_SUSPENDED)
 800dd2e:	2b05      	cmp	r3, #5
  __HAL_LOCK(hdcmi);
 800dd30:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
  if (hdcmi->State == HAL_DCMI_STATE_SUSPENDED)
 800dd34:	d107      	bne.n	800dd46 <HAL_DCMI_Resume+0x26>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_BUSY;
 800dd36:	2302      	movs	r3, #2

    /* Disable Capture */
    hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 800dd38:	6802      	ldr	r2, [r0, #0]
    hdcmi->State = HAL_DCMI_STATE_BUSY;
 800dd3a:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 800dd3e:	6813      	ldr	r3, [r2, #0]
 800dd40:	f043 0301 	orr.w	r3, r3, #1
 800dd44:	6013      	str	r3, [r2, #0]
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800dd46:	2300      	movs	r3, #0
 800dd48:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	4770      	bx	lr
  __HAL_LOCK(hdcmi);
 800dd50:	2002      	movs	r0, #2
}
 800dd52:	4770      	bx	lr

0800dd54 <DCMI_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dd54:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800dd56:	b508      	push	{r3, lr}

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 800dd58:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800dd5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd5c:	2b02      	cmp	r3, #2
 800dd5e:	d006      	beq.n	800dd6e <DCMI_DMAError+0x1a>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 800dd60:	2301      	movs	r3, #1
 800dd62:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 800dd66:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800dd68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd6c:	64c3      	str	r3, [r0, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 800dd6e:	f7fe fcc1 	bl	800c6f4 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 800dd72:	bd08      	pop	{r3, pc}

0800dd74 <HAL_DCMI_IRQHandler>:
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 800dd74:	6803      	ldr	r3, [r0, #0]
{
 800dd76:	b570      	push	{r4, r5, r6, lr}
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 800dd78:	691d      	ldr	r5, [r3, #16]
{
 800dd7a:	4604      	mov	r4, r0
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 800dd7c:	076a      	lsls	r2, r5, #29
 800dd7e:	d438      	bmi.n	800ddf2 <HAL_DCMI_IRQHandler+0x7e>
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 800dd80:	07ab      	lsls	r3, r5, #30
 800dd82:	d425      	bmi.n	800ddd0 <HAL_DCMI_IRQHandler+0x5c>
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 800dd84:	06ee      	lsls	r6, r5, #27
 800dd86:	d41c      	bmi.n	800ddc2 <HAL_DCMI_IRQHandler+0x4e>
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 800dd88:	0728      	lsls	r0, r5, #28
 800dd8a:	d413      	bmi.n	800ddb4 <HAL_DCMI_IRQHandler+0x40>
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 800dd8c:	07e9      	lsls	r1, r5, #31
 800dd8e:	d510      	bpl.n	800ddb2 <HAL_DCMI_IRQHandler+0x3e>
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800dd90:	6823      	ldr	r3, [r4, #0]
 800dd92:	681a      	ldr	r2, [r3, #0]
 800dd94:	0792      	lsls	r2, r2, #30
 800dd96:	d503      	bpl.n	800dda0 <HAL_DCMI_IRQHandler+0x2c>
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800dd98:	68da      	ldr	r2, [r3, #12]
 800dd9a:	f022 021e 	bic.w	r2, r2, #30
 800dd9e:	60da      	str	r2, [r3, #12]
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 800dda0:	68da      	ldr	r2, [r3, #12]
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 800dda2:	2101      	movs	r1, #1
    HAL_DCMI_FrameEventCallback(hdcmi);
 800dda4:	4620      	mov	r0, r4
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 800dda6:	f022 0201 	bic.w	r2, r2, #1
 800ddaa:	60da      	str	r2, [r3, #12]
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 800ddac:	6159      	str	r1, [r3, #20]
    HAL_DCMI_FrameEventCallback(hdcmi);
 800ddae:	f7fe fc95 	bl	800c6dc <HAL_DCMI_FrameEventCallback>
}
 800ddb2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800ddb4:	6823      	ldr	r3, [r4, #0]
 800ddb6:	2208      	movs	r2, #8
    HAL_DCMI_VsyncEventCallback(hdcmi);
 800ddb8:	4620      	mov	r0, r4
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800ddba:	615a      	str	r2, [r3, #20]
    HAL_DCMI_VsyncEventCallback(hdcmi);
 800ddbc:	f7fe fc94 	bl	800c6e8 <HAL_DCMI_VsyncEventCallback>
 800ddc0:	e7e4      	b.n	800dd8c <HAL_DCMI_IRQHandler+0x18>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800ddc2:	6823      	ldr	r3, [r4, #0]
 800ddc4:	2210      	movs	r2, #16
    HAL_DCMI_LineEventCallback(hdcmi);
 800ddc6:	4620      	mov	r0, r4
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800ddc8:	615a      	str	r2, [r3, #20]
    HAL_DCMI_LineEventCallback(hdcmi);
 800ddca:	f7fe fc81 	bl	800c6d0 <HAL_DCMI_LineEventCallback>
 800ddce:	e7db      	b.n	800dd88 <HAL_DCMI_IRQHandler+0x14>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 800ddd0:	6823      	ldr	r3, [r4, #0]
 800ddd2:	2102      	movs	r1, #2
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800ddd4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800ddd6:	2604      	movs	r6, #4
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 800ddd8:	6159      	str	r1, [r3, #20]
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 800ddda:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800dddc:	4610      	mov	r0, r2
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800ddde:	490c      	ldr	r1, [pc, #48]	; (800de10 <HAL_DCMI_IRQHandler+0x9c>)
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 800dde0:	f043 0301 	orr.w	r3, r3, #1
 800dde4:	64e3      	str	r3, [r4, #76]	; 0x4c
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800dde6:	f884 6035 	strb.w	r6, [r4, #53]	; 0x35
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800ddea:	6511      	str	r1, [r2, #80]	; 0x50
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800ddec:	f001 f884 	bl	800eef8 <HAL_DMA_Abort_IT>
 800ddf0:	e7c8      	b.n	800dd84 <HAL_DCMI_IRQHandler+0x10>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 800ddf2:	2104      	movs	r1, #4
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800ddf4:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800ddf6:	4e06      	ldr	r6, [pc, #24]	; (800de10 <HAL_DCMI_IRQHandler+0x9c>)
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 800ddf8:	6159      	str	r1, [r3, #20]
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 800ddfa:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800ddfc:	4610      	mov	r0, r2
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 800ddfe:	f043 0302 	orr.w	r3, r3, #2
 800de02:	64e3      	str	r3, [r4, #76]	; 0x4c
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800de04:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800de08:	6516      	str	r6, [r2, #80]	; 0x50
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800de0a:	f001 f875 	bl	800eef8 <HAL_DMA_Abort_IT>
 800de0e:	e7b7      	b.n	800dd80 <HAL_DCMI_IRQHandler+0xc>
 800de10:	0800dd55 	.word	0x0800dd55

0800de14 <HAL_DCMI_ConfigCrop>:
{
 800de14:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdcmi);
 800de16:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 800de1a:	2c01      	cmp	r4, #1
 800de1c:	d014      	beq.n	800de48 <HAL_DCMI_ConfigCrop+0x34>
  hdcmi->Instance->CWSIZER = (XSize | (YSize << DCMI_CWSIZE_VLINE_Pos));
 800de1e:	9c03      	ldr	r4, [sp, #12]
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800de20:	2602      	movs	r6, #2
  hdcmi->Instance->CWSTRTR = (X0 | (Y0 << DCMI_CWSTRT_VST_Pos));
 800de22:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  __HAL_UNLOCK(hdcmi);
 800de26:	2200      	movs	r2, #0
  hdcmi->Instance->CWSIZER = (XSize | (YSize << DCMI_CWSIZE_VLINE_Pos));
 800de28:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800de2c:	6804      	ldr	r4, [r0, #0]
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800de2e:	f880 6035 	strb.w	r6, [r0, #53]	; 0x35
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800de32:	2501      	movs	r5, #1
  hdcmi->Instance->CWSIZER = (XSize | (YSize << DCMI_CWSIZE_VLINE_Pos));
 800de34:	6263      	str	r3, [r4, #36]	; 0x24
  return HAL_OK;
 800de36:	4613      	mov	r3, r2
  hdcmi->Instance->CWSTRTR = (X0 | (Y0 << DCMI_CWSTRT_VST_Pos));
 800de38:	6221      	str	r1, [r4, #32]
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800de3a:	f880 5035 	strb.w	r5, [r0, #53]	; 0x35
  __HAL_UNLOCK(hdcmi);
 800de3e:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
}
 800de42:	4618      	mov	r0, r3
 800de44:	bc70      	pop	{r4, r5, r6}
 800de46:	4770      	bx	lr
  __HAL_LOCK(hdcmi);
 800de48:	2302      	movs	r3, #2
}
 800de4a:	bc70      	pop	{r4, r5, r6}
 800de4c:	4618      	mov	r0, r3
 800de4e:	4770      	bx	lr

0800de50 <HAL_DCMI_DisableCrop>:
  __HAL_LOCK(hdcmi);
 800de50:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 800de54:	2a01      	cmp	r2, #1
 800de56:	d012      	beq.n	800de7e <HAL_DCMI_DisableCrop+0x2e>
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800de58:	2202      	movs	r2, #2
 800de5a:	4603      	mov	r3, r0
  __HAL_UNLOCK(hdcmi);
 800de5c:	2100      	movs	r1, #0
{
 800de5e:	b430      	push	{r4, r5}
  hdcmi->Instance->CR &= ~(uint32_t)DCMI_CR_CROP;
 800de60:	6804      	ldr	r4, [r0, #0]
  hdcmi->State = HAL_DCMI_STATE_READY;
 800de62:	2501      	movs	r5, #1
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800de64:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
  return HAL_OK;
 800de68:	4608      	mov	r0, r1
  hdcmi->Instance->CR &= ~(uint32_t)DCMI_CR_CROP;
 800de6a:	6822      	ldr	r2, [r4, #0]
 800de6c:	f022 0204 	bic.w	r2, r2, #4
 800de70:	6022      	str	r2, [r4, #0]
  hdcmi->State = HAL_DCMI_STATE_READY;
 800de72:	f883 5035 	strb.w	r5, [r3, #53]	; 0x35
  __HAL_UNLOCK(hdcmi);
 800de76:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
}
 800de7a:	bc30      	pop	{r4, r5}
 800de7c:	4770      	bx	lr
  __HAL_LOCK(hdcmi);
 800de7e:	2002      	movs	r0, #2
}
 800de80:	4770      	bx	lr
 800de82:	bf00      	nop

0800de84 <HAL_DCMI_EnableCrop>:
  __HAL_LOCK(hdcmi);
 800de84:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 800de88:	2a01      	cmp	r2, #1
 800de8a:	d012      	beq.n	800deb2 <HAL_DCMI_EnableCrop+0x2e>
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800de8c:	2202      	movs	r2, #2
 800de8e:	4603      	mov	r3, r0
  __HAL_UNLOCK(hdcmi);
 800de90:	2100      	movs	r1, #0
{
 800de92:	b430      	push	{r4, r5}
  hdcmi->Instance->CR |= (uint32_t)DCMI_CR_CROP;
 800de94:	6804      	ldr	r4, [r0, #0]
  hdcmi->State = HAL_DCMI_STATE_READY;
 800de96:	2501      	movs	r5, #1
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800de98:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
  return HAL_OK;
 800de9c:	4608      	mov	r0, r1
  hdcmi->Instance->CR |= (uint32_t)DCMI_CR_CROP;
 800de9e:	6822      	ldr	r2, [r4, #0]
 800dea0:	f042 0204 	orr.w	r2, r2, #4
 800dea4:	6022      	str	r2, [r4, #0]
  hdcmi->State = HAL_DCMI_STATE_READY;
 800dea6:	f883 5035 	strb.w	r5, [r3, #53]	; 0x35
  __HAL_UNLOCK(hdcmi);
 800deaa:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
}
 800deae:	bc30      	pop	{r4, r5}
 800deb0:	4770      	bx	lr
  __HAL_LOCK(hdcmi);
 800deb2:	2002      	movs	r0, #2
}
 800deb4:	4770      	bx	lr
 800deb6:	bf00      	nop

0800deb8 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800deb8:	6802      	ldr	r2, [r0, #0]
{
 800deba:	4601      	mov	r1, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800debc:	4b34      	ldr	r3, [pc, #208]	; (800df90 <DMA_CalcBaseAndBitshift+0xd8>)
 800debe:	4835      	ldr	r0, [pc, #212]	; (800df94 <DMA_CalcBaseAndBitshift+0xdc>)
{
 800dec0:	b430      	push	{r4, r5}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800dec2:	4c35      	ldr	r4, [pc, #212]	; (800df98 <DMA_CalcBaseAndBitshift+0xe0>)
 800dec4:	4d35      	ldr	r5, [pc, #212]	; (800df9c <DMA_CalcBaseAndBitshift+0xe4>)
 800dec6:	42a2      	cmp	r2, r4
 800dec8:	bf18      	it	ne
 800deca:	429a      	cmpne	r2, r3
 800decc:	f104 0448 	add.w	r4, r4, #72	; 0x48
 800ded0:	bf0c      	ite	eq
 800ded2:	2301      	moveq	r3, #1
 800ded4:	2300      	movne	r3, #0
 800ded6:	4282      	cmp	r2, r0
 800ded8:	bf08      	it	eq
 800deda:	f043 0301 	orreq.w	r3, r3, #1
 800dede:	3048      	adds	r0, #72	; 0x48
 800dee0:	42aa      	cmp	r2, r5
 800dee2:	bf08      	it	eq
 800dee4:	f043 0301 	orreq.w	r3, r3, #1
 800dee8:	3548      	adds	r5, #72	; 0x48
 800deea:	42a2      	cmp	r2, r4
 800deec:	bf08      	it	eq
 800deee:	f043 0301 	orreq.w	r3, r3, #1
 800def2:	3448      	adds	r4, #72	; 0x48
 800def4:	4282      	cmp	r2, r0
 800def6:	bf08      	it	eq
 800def8:	f043 0301 	orreq.w	r3, r3, #1
 800defc:	f500 7062 	add.w	r0, r0, #904	; 0x388
 800df00:	42aa      	cmp	r2, r5
 800df02:	bf08      	it	eq
 800df04:	f043 0301 	orreq.w	r3, r3, #1
 800df08:	f505 7562 	add.w	r5, r5, #904	; 0x388
 800df0c:	42a2      	cmp	r2, r4
 800df0e:	bf08      	it	eq
 800df10:	f043 0301 	orreq.w	r3, r3, #1
 800df14:	f504 7462 	add.w	r4, r4, #904	; 0x388
 800df18:	4282      	cmp	r2, r0
 800df1a:	bf08      	it	eq
 800df1c:	f043 0301 	orreq.w	r3, r3, #1
 800df20:	3048      	adds	r0, #72	; 0x48
 800df22:	42aa      	cmp	r2, r5
 800df24:	bf08      	it	eq
 800df26:	f043 0301 	orreq.w	r3, r3, #1
 800df2a:	3548      	adds	r5, #72	; 0x48
 800df2c:	42a2      	cmp	r2, r4
 800df2e:	bf08      	it	eq
 800df30:	f043 0301 	orreq.w	r3, r3, #1
 800df34:	3448      	adds	r4, #72	; 0x48
 800df36:	4282      	cmp	r2, r0
 800df38:	bf08      	it	eq
 800df3a:	f043 0301 	orreq.w	r3, r3, #1
 800df3e:	3048      	adds	r0, #72	; 0x48
 800df40:	42aa      	cmp	r2, r5
 800df42:	bf08      	it	eq
 800df44:	f043 0301 	orreq.w	r3, r3, #1
 800df48:	42a2      	cmp	r2, r4
 800df4a:	bf08      	it	eq
 800df4c:	f043 0301 	orreq.w	r3, r3, #1
 800df50:	4282      	cmp	r2, r0
 800df52:	bf08      	it	eq
 800df54:	f043 0301 	orreq.w	r3, r3, #1
 800df58:	b913      	cbnz	r3, 800df60 <DMA_CalcBaseAndBitshift+0xa8>
 800df5a:	4b11      	ldr	r3, [pc, #68]	; (800dfa0 <DMA_CalcBaseAndBitshift+0xe8>)
 800df5c:	429a      	cmp	r2, r3
 800df5e:	d112      	bne.n	800df86 <DMA_CalcBaseAndBitshift+0xce>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800df60:	b2d3      	uxtb	r3, r2
 800df62:	4d10      	ldr	r5, [pc, #64]	; (800dfa4 <DMA_CalcBaseAndBitshift+0xec>)
 800df64:	4810      	ldr	r0, [pc, #64]	; (800dfa8 <DMA_CalcBaseAndBitshift+0xf0>)
 800df66:	3b10      	subs	r3, #16

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800df68:	4c10      	ldr	r4, [pc, #64]	; (800dfac <DMA_CalcBaseAndBitshift+0xf4>)
 800df6a:	4010      	ands	r0, r2
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800df6c:	fba5 5303 	umull	r5, r3, r5, r3
 800df70:	091b      	lsrs	r3, r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800df72:	f003 0207 	and.w	r2, r3, #7

    if (stream_number > 3U)
 800df76:	2b03      	cmp	r3, #3
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800df78:	5ca2      	ldrb	r2, [r4, r2]
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800df7a:	bf88      	it	hi
 800df7c:	3004      	addhi	r0, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800df7e:	65ca      	str	r2, [r1, #92]	; 0x5c
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800df80:	6588      	str	r0, [r1, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 800df82:	bc30      	pop	{r4, r5}
 800df84:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800df86:	f022 00ff 	bic.w	r0, r2, #255	; 0xff
 800df8a:	6588      	str	r0, [r1, #88]	; 0x58
 800df8c:	e7f9      	b.n	800df82 <DMA_CalcBaseAndBitshift+0xca>
 800df8e:	bf00      	nop
 800df90:	40020010 	.word	0x40020010
 800df94:	40020040 	.word	0x40020040
 800df98:	40020028 	.word	0x40020028
 800df9c:	40020058 	.word	0x40020058
 800dfa0:	400204b8 	.word	0x400204b8
 800dfa4:	aaaaaaab 	.word	0xaaaaaaab
 800dfa8:	fffffc00 	.word	0xfffffc00
 800dfac:	080bfbe4 	.word	0x080bfbe4

0800dfb0 <HAL_DMA_Init>:
{
 800dfb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfb4:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800dfb6:	f7ff fcd3 	bl	800d960 <HAL_GetTick>
  if(hdma == NULL)
 800dfba:	2c00      	cmp	r4, #0
 800dfbc:	f000 8182 	beq.w	800e2c4 <HAL_DMA_Init+0x314>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800dfc0:	6823      	ldr	r3, [r4, #0]
 800dfc2:	4605      	mov	r5, r0
 800dfc4:	4a2b      	ldr	r2, [pc, #172]	; (800e074 <HAL_DMA_Init+0xc4>)
 800dfc6:	4293      	cmp	r3, r2
 800dfc8:	d049      	beq.n	800e05e <HAL_DMA_Init+0xae>
 800dfca:	3218      	adds	r2, #24
 800dfcc:	4293      	cmp	r3, r2
 800dfce:	d046      	beq.n	800e05e <HAL_DMA_Init+0xae>
 800dfd0:	3230      	adds	r2, #48	; 0x30
 800dfd2:	4829      	ldr	r0, [pc, #164]	; (800e078 <HAL_DMA_Init+0xc8>)
 800dfd4:	4929      	ldr	r1, [pc, #164]	; (800e07c <HAL_DMA_Init+0xcc>)
 800dfd6:	4283      	cmp	r3, r0
 800dfd8:	bf18      	it	ne
 800dfda:	4293      	cmpne	r3, r2
 800dfdc:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800dfe0:	bf0c      	ite	eq
 800dfe2:	2201      	moveq	r2, #1
 800dfe4:	2200      	movne	r2, #0
 800dfe6:	428b      	cmp	r3, r1
 800dfe8:	bf08      	it	eq
 800dfea:	f042 0201 	orreq.w	r2, r2, #1
 800dfee:	3130      	adds	r1, #48	; 0x30
 800dff0:	4283      	cmp	r3, r0
 800dff2:	bf08      	it	eq
 800dff4:	f042 0201 	orreq.w	r2, r2, #1
 800dff8:	3030      	adds	r0, #48	; 0x30
 800dffa:	428b      	cmp	r3, r1
 800dffc:	bf08      	it	eq
 800dffe:	f042 0201 	orreq.w	r2, r2, #1
 800e002:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800e006:	4283      	cmp	r3, r0
 800e008:	bf08      	it	eq
 800e00a:	f042 0201 	orreq.w	r2, r2, #1
 800e00e:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800e012:	428b      	cmp	r3, r1
 800e014:	bf08      	it	eq
 800e016:	f042 0201 	orreq.w	r2, r2, #1
 800e01a:	3130      	adds	r1, #48	; 0x30
 800e01c:	4283      	cmp	r3, r0
 800e01e:	bf08      	it	eq
 800e020:	f042 0201 	orreq.w	r2, r2, #1
 800e024:	3030      	adds	r0, #48	; 0x30
 800e026:	428b      	cmp	r3, r1
 800e028:	bf08      	it	eq
 800e02a:	f042 0201 	orreq.w	r2, r2, #1
 800e02e:	3130      	adds	r1, #48	; 0x30
 800e030:	4283      	cmp	r3, r0
 800e032:	bf08      	it	eq
 800e034:	f042 0201 	orreq.w	r2, r2, #1
 800e038:	3030      	adds	r0, #48	; 0x30
 800e03a:	428b      	cmp	r3, r1
 800e03c:	bf08      	it	eq
 800e03e:	f042 0201 	orreq.w	r2, r2, #1
 800e042:	3130      	adds	r1, #48	; 0x30
 800e044:	4283      	cmp	r3, r0
 800e046:	bf08      	it	eq
 800e048:	f042 0201 	orreq.w	r2, r2, #1
 800e04c:	428b      	cmp	r3, r1
 800e04e:	bf08      	it	eq
 800e050:	f042 0201 	orreq.w	r2, r2, #1
 800e054:	b91a      	cbnz	r2, 800e05e <HAL_DMA_Init+0xae>
 800e056:	4a0a      	ldr	r2, [pc, #40]	; (800e080 <HAL_DMA_Init+0xd0>)
 800e058:	4293      	cmp	r3, r2
 800e05a:	f040 81bf 	bne.w	800e3dc <HAL_DMA_Init+0x42c>
    hdma->State = HAL_DMA_STATE_BUSY;
 800e05e:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 800e060:	2100      	movs	r1, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 800e062:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800e066:	681a      	ldr	r2, [r3, #0]
    __HAL_UNLOCK(hdma);
 800e068:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 800e06c:	f022 0201 	bic.w	r2, r2, #1
 800e070:	601a      	str	r2, [r3, #0]
 800e072:	e00e      	b.n	800e092 <HAL_DMA_Init+0xe2>
 800e074:	40020010 	.word	0x40020010
 800e078:	40020040 	.word	0x40020040
 800e07c:	40020070 	.word	0x40020070
 800e080:	400204b8 	.word	0x400204b8
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800e084:	f7ff fc6c 	bl	800d960 <HAL_GetTick>
 800e088:	1b40      	subs	r0, r0, r5
 800e08a:	2805      	cmp	r0, #5
 800e08c:	f200 8112 	bhi.w	800e2b4 <HAL_DMA_Init+0x304>
 800e090:	6823      	ldr	r3, [r4, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800e092:	681a      	ldr	r2, [r3, #0]
 800e094:	07d6      	lsls	r6, r2, #31
 800e096:	d4f5      	bmi.n	800e084 <HAL_DMA_Init+0xd4>
    registerValue |=  hdma->Init.Direction           |
 800e098:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e09c:	6920      	ldr	r0, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 800e09e:	430a      	orrs	r2, r1
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800e0a0:	681f      	ldr	r7, [r3, #0]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e0a2:	e9d4 6105 	ldrd	r6, r1, [r4, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e0a6:	4302      	orrs	r2, r0
 800e0a8:	4332      	orrs	r2, r6
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800e0aa:	4eb5      	ldr	r6, [pc, #724]	; (800e380 <HAL_DMA_Init+0x3d0>)
            hdma->Init.Mode                | hdma->Init.Priority;
 800e0ac:	e9d4 5007 	ldrd	r5, r0, [r4, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e0b0:	430a      	orrs	r2, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800e0b2:	403e      	ands	r6, r7
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e0b4:	432a      	orrs	r2, r5
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800e0b6:	6a65      	ldr	r5, [r4, #36]	; 0x24
            hdma->Init.Mode                | hdma->Init.Priority;
 800e0b8:	4302      	orrs	r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800e0ba:	2d04      	cmp	r5, #4
    registerValue |=  hdma->Init.Direction           |
 800e0bc:	ea42 0206 	orr.w	r2, r2, r6
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800e0c0:	f000 8103 	beq.w	800e2ca <HAL_DMA_Init+0x31a>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800e0c4:	4eaf      	ldr	r6, [pc, #700]	; (800e384 <HAL_DMA_Init+0x3d4>)
 800e0c6:	48b0      	ldr	r0, [pc, #704]	; (800e388 <HAL_DMA_Init+0x3d8>)
 800e0c8:	6836      	ldr	r6, [r6, #0]
 800e0ca:	4030      	ands	r0, r6
 800e0cc:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 800e0d0:	f080 8108 	bcs.w	800e2e4 <HAL_DMA_Init+0x334>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800e0d4:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800e0d6:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800e0d8:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 800e0dc:	432a      	orrs	r2, r5
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800e0de:	615a      	str	r2, [r3, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800e0e0:	4620      	mov	r0, r4
 800e0e2:	f7ff fee9 	bl	800deb8 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800e0e6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800e0e8:	233f      	movs	r3, #63	; 0x3f
 800e0ea:	f002 021f 	and.w	r2, r2, #31
 800e0ee:	4093      	lsls	r3, r2
 800e0f0:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800e0f2:	6822      	ldr	r2, [r4, #0]
 800e0f4:	4ba5      	ldr	r3, [pc, #660]	; (800e38c <HAL_DMA_Init+0x3dc>)
 800e0f6:	48a6      	ldr	r0, [pc, #664]	; (800e390 <HAL_DMA_Init+0x3e0>)
 800e0f8:	49a6      	ldr	r1, [pc, #664]	; (800e394 <HAL_DMA_Init+0x3e4>)
 800e0fa:	4282      	cmp	r2, r0
 800e0fc:	bf18      	it	ne
 800e0fe:	429a      	cmpne	r2, r3
 800e100:	4ea5      	ldr	r6, [pc, #660]	; (800e398 <HAL_DMA_Init+0x3e8>)
 800e102:	4da6      	ldr	r5, [pc, #664]	; (800e39c <HAL_DMA_Init+0x3ec>)
 800e104:	f100 0060 	add.w	r0, r0, #96	; 0x60
 800e108:	bf0c      	ite	eq
 800e10a:	2301      	moveq	r3, #1
 800e10c:	2300      	movne	r3, #0
 800e10e:	f8df c2b8 	ldr.w	ip, [pc, #696]	; 800e3c8 <HAL_DMA_Init+0x418>
 800e112:	428a      	cmp	r2, r1
 800e114:	bf08      	it	eq
 800e116:	f043 0301 	orreq.w	r3, r3, #1
 800e11a:	3160      	adds	r1, #96	; 0x60
 800e11c:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 800e3cc <HAL_DMA_Init+0x41c>
 800e120:	42b2      	cmp	r2, r6
 800e122:	bf08      	it	eq
 800e124:	f043 0301 	orreq.w	r3, r3, #1
 800e128:	f8df e2a4 	ldr.w	lr, [pc, #676]	; 800e3d0 <HAL_DMA_Init+0x420>
 800e12c:	4f9c      	ldr	r7, [pc, #624]	; (800e3a0 <HAL_DMA_Init+0x3f0>)
 800e12e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800e132:	42aa      	cmp	r2, r5
 800e134:	bf08      	it	eq
 800e136:	f043 0301 	orreq.w	r3, r3, #1
 800e13a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800e13e:	f8df a284 	ldr.w	sl, [pc, #644]	; 800e3c4 <HAL_DMA_Init+0x414>
 800e142:	4282      	cmp	r2, r0
 800e144:	bf08      	it	eq
 800e146:	f043 0301 	orreq.w	r3, r3, #1
 800e14a:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800e14e:	f8df 9284 	ldr.w	r9, [pc, #644]	; 800e3d4 <HAL_DMA_Init+0x424>
 800e152:	428a      	cmp	r2, r1
 800e154:	bf08      	it	eq
 800e156:	f043 0301 	orreq.w	r3, r3, #1
 800e15a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e15e:	4562      	cmp	r2, ip
 800e160:	bf08      	it	eq
 800e162:	f043 0301 	orreq.w	r3, r3, #1
 800e166:	f8df c254 	ldr.w	ip, [pc, #596]	; 800e3bc <HAL_DMA_Init+0x40c>
 800e16a:	4542      	cmp	r2, r8
 800e16c:	bf08      	it	eq
 800e16e:	f043 0301 	orreq.w	r3, r3, #1
 800e172:	eba2 0c0c 	sub.w	ip, r2, ip
 800e176:	f8df 8248 	ldr.w	r8, [pc, #584]	; 800e3c0 <HAL_DMA_Init+0x410>
 800e17a:	4572      	cmp	r2, lr
 800e17c:	bf08      	it	eq
 800e17e:	f043 0301 	orreq.w	r3, r3, #1
 800e182:	fabc fc8c 	clz	ip, ip
 800e186:	eba2 0808 	sub.w	r8, r2, r8
 800e18a:	f8df e24c 	ldr.w	lr, [pc, #588]	; 800e3d8 <HAL_DMA_Init+0x428>
 800e18e:	42ba      	cmp	r2, r7
 800e190:	bf08      	it	eq
 800e192:	f043 0301 	orreq.w	r3, r3, #1
 800e196:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800e19a:	eba2 070a 	sub.w	r7, r2, sl
 800e19e:	fab8 f888 	clz	r8, r8
 800e1a2:	42b2      	cmp	r2, r6
 800e1a4:	bf08      	it	eq
 800e1a6:	f043 0301 	orreq.w	r3, r3, #1
 800e1aa:	f10a 0a28 	add.w	sl, sl, #40	; 0x28
 800e1ae:	eba2 060e 	sub.w	r6, r2, lr
 800e1b2:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800e1b6:	42aa      	cmp	r2, r5
 800e1b8:	bf08      	it	eq
 800e1ba:	f043 0301 	orreq.w	r3, r3, #1
 800e1be:	fab7 f787 	clz	r7, r7
 800e1c2:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 800e1c6:	eba2 050a 	sub.w	r5, r2, sl
 800e1ca:	4282      	cmp	r2, r0
 800e1cc:	bf08      	it	eq
 800e1ce:	f043 0301 	orreq.w	r3, r3, #1
 800e1d2:	097f      	lsrs	r7, r7, #5
 800e1d4:	fab6 f686 	clz	r6, r6
 800e1d8:	eba2 000e 	sub.w	r0, r2, lr
 800e1dc:	428a      	cmp	r2, r1
 800e1de:	bf08      	it	eq
 800e1e0:	f043 0301 	orreq.w	r3, r3, #1
 800e1e4:	fab5 f585 	clz	r5, r5
 800e1e8:	0976      	lsrs	r6, r6, #5
 800e1ea:	f10a 0a28 	add.w	sl, sl, #40	; 0x28
 800e1ee:	454a      	cmp	r2, r9
 800e1f0:	bf08      	it	eq
 800e1f2:	f043 0301 	orreq.w	r3, r3, #1
 800e1f6:	096d      	lsrs	r5, r5, #5
 800e1f8:	fab0 f080 	clz	r0, r0
 800e1fc:	eba2 010a 	sub.w	r1, r2, sl
 800e200:	ea4c 0303 	orr.w	r3, ip, r3
 800e204:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 800e208:	0940      	lsrs	r0, r0, #5
 800e20a:	fab1 f181 	clz	r1, r1
 800e20e:	ea48 0303 	orr.w	r3, r8, r3
 800e212:	eba2 0e0e 	sub.w	lr, r2, lr
 800e216:	0949      	lsrs	r1, r1, #5
 800e218:	433b      	orrs	r3, r7
 800e21a:	fabe fe8e 	clz	lr, lr
 800e21e:	4333      	orrs	r3, r6
 800e220:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 800e224:	432b      	orrs	r3, r5
 800e226:	4303      	orrs	r3, r0
 800e228:	430b      	orrs	r3, r1
 800e22a:	d102      	bne.n	800e232 <HAL_DMA_Init+0x282>
 800e22c:	f1be 0f00 	cmp.w	lr, #0
 800e230:	d039      	beq.n	800e2a6 <HAL_DMA_Init+0x2f6>
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800e232:	ea4c 0c08 	orr.w	ip, ip, r8
 800e236:	b2d3      	uxtb	r3, r2
 800e238:	ea47 070c 	orr.w	r7, r7, ip
 800e23c:	433e      	orrs	r6, r7
 800e23e:	4335      	orrs	r5, r6
 800e240:	4328      	orrs	r0, r5
 800e242:	4301      	orrs	r1, r0
 800e244:	ea5e 0101 	orrs.w	r1, lr, r1
 800e248:	f000 8127 	beq.w	800e49a <HAL_DMA_Init+0x4ea>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800e24c:	4d55      	ldr	r5, [pc, #340]	; (800e3a4 <HAL_DMA_Init+0x3f4>)
 800e24e:	3b08      	subs	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800e250:	4a55      	ldr	r2, [pc, #340]	; (800e3a8 <HAL_DMA_Init+0x3f8>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800e252:	2001      	movs	r0, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800e254:	fba5 5303 	umull	r5, r3, r5, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800e258:	4d54      	ldr	r5, [pc, #336]	; (800e3ac <HAL_DMA_Init+0x3fc>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800e25a:	091b      	lsrs	r3, r3, #4
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800e25c:	6665      	str	r5, [r4, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800e25e:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800e260:	f003 031f 	and.w	r3, r3, #31
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800e264:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800e266:	fa00 f303 	lsl.w	r3, r0, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800e26a:	6622      	str	r2, [r4, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800e26c:	66a3      	str	r3, [r4, #104]	; 0x68
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800e26e:	68a0      	ldr	r0, [r4, #8]
 800e270:	2880      	cmp	r0, #128	; 0x80
 800e272:	d069      	beq.n	800e348 <HAL_DMA_Init+0x398>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800e274:	6860      	ldr	r0, [r4, #4]
 800e276:	b2c6      	uxtb	r6, r0
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800e278:	3801      	subs	r0, #1
 800e27a:	2807      	cmp	r0, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800e27c:	6016      	str	r6, [r2, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800e27e:	606b      	str	r3, [r5, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800e280:	d866      	bhi.n	800e350 <HAL_DMA_Init+0x3a0>
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800e282:	1e70      	subs	r0, r6, #1
 800e284:	2807      	cmp	r0, #7
 800e286:	d868      	bhi.n	800e35a <HAL_DMA_Init+0x3aa>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800e288:	2900      	cmp	r1, #0
 800e28a:	f000 8133 	beq.w	800e4f4 <HAL_DMA_Init+0x544>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800e28e:	4b48      	ldr	r3, [pc, #288]	; (800e3b0 <HAL_DMA_Init+0x400>)

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800e290:	4948      	ldr	r1, [pc, #288]	; (800e3b4 <HAL_DMA_Init+0x404>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800e292:	4433      	add	r3, r6
 800e294:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800e296:	2201      	movs	r2, #1
 800e298:	4082      	lsls	r2, r0
 800e29a:	e9c4 311b 	strd	r3, r1, [r4, #108]	; 0x6c
 800e29e:	6762      	str	r2, [r4, #116]	; 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800e2a0:	2000      	movs	r0, #0
 800e2a2:	6018      	str	r0, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800e2a4:	604a      	str	r2, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e2a6:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800e2a8:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e2aa:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800e2ac:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800e2b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800e2b4:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 800e2b6:	2303      	movs	r3, #3
        return HAL_ERROR;
 800e2b8:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800e2ba:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 800e2bc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800e2c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_ERROR;
 800e2c4:	2001      	movs	r0, #1
}
 800e2c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800e2ca:	482e      	ldr	r0, [pc, #184]	; (800e384 <HAL_DMA_Init+0x3d4>)
 800e2cc:	4e2e      	ldr	r6, [pc, #184]	; (800e388 <HAL_DMA_Init+0x3d8>)
 800e2ce:	6807      	ldr	r7, [r0, #0]
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800e2d0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800e2d2:	403e      	ands	r6, r7
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800e2d4:	6b27      	ldr	r7, [r4, #48]	; 0x30
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800e2d6:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800e2da:	ea40 0707 	orr.w	r7, r0, r7
 800e2de:	ea42 0207 	orr.w	r2, r2, r7
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800e2e2:	d346      	bcc.n	800e372 <HAL_DMA_Init+0x3c2>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800e2e4:	6866      	ldr	r6, [r4, #4]
 800e2e6:	f1a6 0729 	sub.w	r7, r6, #41	; 0x29
 800e2ea:	2f1f      	cmp	r7, #31
 800e2ec:	d925      	bls.n	800e33a <HAL_DMA_Init+0x38a>
 800e2ee:	3e4f      	subs	r6, #79	; 0x4f
 800e2f0:	2e03      	cmp	r6, #3
 800e2f2:	d926      	bls.n	800e342 <HAL_DMA_Init+0x392>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800e2f4:	601a      	str	r2, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800e2f6:	2d04      	cmp	r5, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800e2f8:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800e2fa:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 800e2fe:	ea42 0205 	orr.w	r2, r2, r5
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800e302:	f47f aeec 	bne.w	800e0de <HAL_DMA_Init+0x12e>
 800e306:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 800e308:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800e30a:	432a      	orrs	r2, r5
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800e30c:	2800      	cmp	r0, #0
 800e30e:	f43f aee6 	beq.w	800e0de <HAL_DMA_Init+0x12e>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800e312:	b331      	cbz	r1, 800e362 <HAL_DMA_Init+0x3b2>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e314:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800e318:	f000 80dd 	beq.w	800e4d6 <HAL_DMA_Init+0x526>
    switch (hdma->Init.FIFOThreshold)
 800e31c:	2d02      	cmp	r5, #2
 800e31e:	d905      	bls.n	800e32c <HAL_DMA_Init+0x37c>
 800e320:	2d03      	cmp	r5, #3
 800e322:	f47f aedc 	bne.w	800e0de <HAL_DMA_Init+0x12e>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e326:	01c1      	lsls	r1, r0, #7
 800e328:	f57f aed9 	bpl.w	800e0de <HAL_DMA_Init+0x12e>
          hdma->State = HAL_DMA_STATE_READY;
 800e32c:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800e32e:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 800e330:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800e332:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 800e334:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          return HAL_ERROR;
 800e338:	e7c2      	b.n	800e2c0 <HAL_DMA_Init+0x310>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800e33a:	481f      	ldr	r0, [pc, #124]	; (800e3b8 <HAL_DMA_Init+0x408>)
 800e33c:	40f8      	lsrs	r0, r7
 800e33e:	07c0      	lsls	r0, r0, #31
 800e340:	d5d5      	bpl.n	800e2ee <HAL_DMA_Init+0x33e>
        registerValue |= DMA_SxCR_TRBUFF;
 800e342:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800e346:	e7d5      	b.n	800e2f4 <HAL_DMA_Init+0x344>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800e348:	2100      	movs	r1, #0
 800e34a:	6061      	str	r1, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800e34c:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800e34e:	606b      	str	r3, [r5, #4]
      hdma->DMAmuxRequestGen = 0U;
 800e350:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 800e352:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800e356:	6763      	str	r3, [r4, #116]	; 0x74
 800e358:	e7a5      	b.n	800e2a6 <HAL_DMA_Init+0x2f6>
 800e35a:	e9d4 311b 	ldrd	r3, r1, [r4, #108]	; 0x6c
 800e35e:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800e360:	e79e      	b.n	800e2a0 <HAL_DMA_Init+0x2f0>
    switch (hdma->Init.FIFOThreshold)
 800e362:	2d01      	cmp	r5, #1
 800e364:	f000 80b2 	beq.w	800e4cc <HAL_DMA_Init+0x51c>
 800e368:	d3dd      	bcc.n	800e326 <HAL_DMA_Init+0x376>
 800e36a:	2d02      	cmp	r5, #2
 800e36c:	f47f aeb7 	bne.w	800e0de <HAL_DMA_Init+0x12e>
 800e370:	e7d9      	b.n	800e326 <HAL_DMA_Init+0x376>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800e372:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800e374:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800e376:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 800e37a:	f042 0204 	orr.w	r2, r2, #4
 800e37e:	e7c3      	b.n	800e308 <HAL_DMA_Init+0x358>
 800e380:	fe10803f 	.word	0xfe10803f
 800e384:	5c001000 	.word	0x5c001000
 800e388:	ffff0000 	.word	0xffff0000
 800e38c:	40020010 	.word	0x40020010
 800e390:	40020028 	.word	0x40020028
 800e394:	40020040 	.word	0x40020040
 800e398:	40020058 	.word	0x40020058
 800e39c:	40020070 	.word	0x40020070
 800e3a0:	40020440 	.word	0x40020440
 800e3a4:	cccccccd 	.word	0xcccccccd
 800e3a8:	16009600 	.word	0x16009600
 800e3ac:	58025880 	.word	0x58025880
 800e3b0:	1600963f 	.word	0x1600963f
 800e3b4:	58025940 	.word	0x58025940
 800e3b8:	c3c0003f 	.word	0xc3c0003f
 800e3bc:	58025408 	.word	0x58025408
 800e3c0:	5802541c 	.word	0x5802541c
 800e3c4:	58025430 	.word	0x58025430
 800e3c8:	400200b8 	.word	0x400200b8
 800e3cc:	40020410 	.word	0x40020410
 800e3d0:	40020428 	.word	0x40020428
 800e3d4:	400204b8 	.word	0x400204b8
 800e3d8:	58025444 	.word	0x58025444
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800e3dc:	4a4c      	ldr	r2, [pc, #304]	; (800e510 <HAL_DMA_Init+0x560>)
 800e3de:	494d      	ldr	r1, [pc, #308]	; (800e514 <HAL_DMA_Init+0x564>)
 800e3e0:	484d      	ldr	r0, [pc, #308]	; (800e518 <HAL_DMA_Init+0x568>)
 800e3e2:	428b      	cmp	r3, r1
 800e3e4:	bf18      	it	ne
 800e3e6:	4293      	cmpne	r3, r2
 800e3e8:	f101 0128 	add.w	r1, r1, #40	; 0x28
 800e3ec:	4d4b      	ldr	r5, [pc, #300]	; (800e51c <HAL_DMA_Init+0x56c>)
 800e3ee:	bf0c      	ite	eq
 800e3f0:	2201      	moveq	r2, #1
 800e3f2:	2200      	movne	r2, #0
 800e3f4:	4283      	cmp	r3, r0
 800e3f6:	bf08      	it	eq
 800e3f8:	f042 0201 	orreq.w	r2, r2, #1
 800e3fc:	303c      	adds	r0, #60	; 0x3c
 800e3fe:	428b      	cmp	r3, r1
 800e400:	bf08      	it	eq
 800e402:	f042 0201 	orreq.w	r2, r2, #1
 800e406:	313c      	adds	r1, #60	; 0x3c
 800e408:	42ab      	cmp	r3, r5
 800e40a:	bf08      	it	eq
 800e40c:	f042 0201 	orreq.w	r2, r2, #1
 800e410:	4283      	cmp	r3, r0
 800e412:	bf08      	it	eq
 800e414:	f042 0201 	orreq.w	r2, r2, #1
 800e418:	428b      	cmp	r3, r1
 800e41a:	bf08      	it	eq
 800e41c:	f042 0201 	orreq.w	r2, r2, #1
 800e420:	b912      	cbnz	r2, 800e428 <HAL_DMA_Init+0x478>
 800e422:	4a3f      	ldr	r2, [pc, #252]	; (800e520 <HAL_DMA_Init+0x570>)
 800e424:	4293      	cmp	r3, r2
 800e426:	d16c      	bne.n	800e502 <HAL_DMA_Init+0x552>
    hdma->State = HAL_DMA_STATE_BUSY;
 800e428:	2002      	movs	r0, #2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800e42a:	68a2      	ldr	r2, [r4, #8]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800e42c:	493d      	ldr	r1, [pc, #244]	; (800e524 <HAL_DMA_Init+0x574>)
    __HAL_UNLOCK(hdma);
 800e42e:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 800e430:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800e434:	2a40      	cmp	r2, #64	; 0x40
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800e436:	6818      	ldr	r0, [r3, #0]
    __HAL_UNLOCK(hdma);
 800e438:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800e43c:	ea01 0100 	and.w	r1, r1, r0
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800e440:	d05d      	beq.n	800e4fe <HAL_DMA_Init+0x54e>
 800e442:	2a80      	cmp	r2, #128	; 0x80
 800e444:	bf14      	ite	ne
 800e446:	462f      	movne	r7, r5
 800e448:	f44f 4780 	moveq.w	r7, #16384	; 0x4000
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800e44c:	6922      	ldr	r2, [r4, #16]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800e44e:	4620      	mov	r0, r4
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800e450:	68e6      	ldr	r6, [r4, #12]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800e452:	08d2      	lsrs	r2, r2, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800e454:	6965      	ldr	r5, [r4, #20]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800e456:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 800e544 <HAL_DMA_Init+0x594>
 800e45a:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800e45e:	69a6      	ldr	r6, [r4, #24]
 800e460:	ea42 02d5 	orr.w	r2, r2, r5, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800e464:	69e5      	ldr	r5, [r4, #28]
 800e466:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800e46a:	4e2f      	ldr	r6, [pc, #188]	; (800e528 <HAL_DMA_Init+0x578>)
 800e46c:	ea42 02d5 	orr.w	r2, r2, r5, lsr #3
 800e470:	441e      	add	r6, r3
 800e472:	6a25      	ldr	r5, [r4, #32]
 800e474:	ea42 1215 	orr.w	r2, r2, r5, lsr #4
 800e478:	fbac 5606 	umull	r5, r6, ip, r6
 800e47c:	430a      	orrs	r2, r1
 800e47e:	0931      	lsrs	r1, r6, #4
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800e480:	433a      	orrs	r2, r7
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800e482:	0089      	lsls	r1, r1, #2
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800e484:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800e486:	65e1      	str	r1, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800e488:	f7ff fd16 	bl	800deb8 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800e48c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800e48e:	2301      	movs	r3, #1
 800e490:	f002 021f 	and.w	r2, r2, #31
 800e494:	4093      	lsls	r3, r2
 800e496:	6043      	str	r3, [r0, #4]
 800e498:	e62b      	b.n	800e0f2 <HAL_DMA_Init+0x142>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800e49a:	f1a3 0010 	sub.w	r0, r3, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800e49e:	4b23      	ldr	r3, [pc, #140]	; (800e52c <HAL_DMA_Init+0x57c>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800e4a0:	4d23      	ldr	r5, [pc, #140]	; (800e530 <HAL_DMA_Init+0x580>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800e4a2:	4413      	add	r3, r2
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800e4a4:	fba5 5000 	umull	r5, r0, r5, r0
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800e4a8:	2ba8      	cmp	r3, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800e4aa:	ea4f 1010 	mov.w	r0, r0, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800e4ae:	d800      	bhi.n	800e4b2 <HAL_DMA_Init+0x502>
      stream_number += 8U;
 800e4b0:	3008      	adds	r0, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800e4b2:	4a20      	ldr	r2, [pc, #128]	; (800e534 <HAL_DMA_Init+0x584>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800e4b4:	f000 051f 	and.w	r5, r0, #31
 800e4b8:	2301      	movs	r3, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800e4ba:	4402      	add	r2, r0
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800e4bc:	481e      	ldr	r0, [pc, #120]	; (800e538 <HAL_DMA_Init+0x588>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800e4be:	40ab      	lsls	r3, r5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800e4c0:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800e4c2:	4605      	mov	r5, r0
 800e4c4:	66a3      	str	r3, [r4, #104]	; 0x68
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800e4c6:	e9c4 2018 	strd	r2, r0, [r4, #96]	; 0x60
 800e4ca:	e6d0      	b.n	800e26e <HAL_DMA_Init+0x2be>
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800e4cc:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 800e4d0:	f47f ae05 	bne.w	800e0de <HAL_DMA_Init+0x12e>
 800e4d4:	e72a      	b.n	800e32c <HAL_DMA_Init+0x37c>
    switch (hdma->Init.FIFOThreshold)
 800e4d6:	2d03      	cmp	r5, #3
 800e4d8:	f63f ae01 	bhi.w	800e0de <HAL_DMA_Init+0x12e>
 800e4dc:	a101      	add	r1, pc, #4	; (adr r1, 800e4e4 <HAL_DMA_Init+0x534>)
 800e4de:	f851 f025 	ldr.w	pc, [r1, r5, lsl #2]
 800e4e2:	bf00      	nop
 800e4e4:	0800e32d 	.word	0x0800e32d
 800e4e8:	0800e327 	.word	0x0800e327
 800e4ec:	0800e32d 	.word	0x0800e32d
 800e4f0:	0800e4cd 	.word	0x0800e4cd
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800e4f4:	4b11      	ldr	r3, [pc, #68]	; (800e53c <HAL_DMA_Init+0x58c>)
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800e4f6:	4912      	ldr	r1, [pc, #72]	; (800e540 <HAL_DMA_Init+0x590>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800e4f8:	4433      	add	r3, r6
 800e4fa:	009b      	lsls	r3, r3, #2
 800e4fc:	e6cb      	b.n	800e296 <HAL_DMA_Init+0x2e6>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800e4fe:	2710      	movs	r7, #16
 800e500:	e7a4      	b.n	800e44c <HAL_DMA_Init+0x49c>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800e502:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 800e504:	2303      	movs	r3, #3
    return HAL_ERROR;
 800e506:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800e508:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800e50a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 800e50e:	e6d7      	b.n	800e2c0 <HAL_DMA_Init+0x310>
 800e510:	58025408 	.word	0x58025408
 800e514:	5802541c 	.word	0x5802541c
 800e518:	58025430 	.word	0x58025430
 800e51c:	58025458 	.word	0x58025458
 800e520:	58025494 	.word	0x58025494
 800e524:	fffe000f 	.word	0xfffe000f
 800e528:	a7fdabf8 	.word	0xa7fdabf8
 800e52c:	bffdfbf0 	.word	0xbffdfbf0
 800e530:	aaaaaaab 	.word	0xaaaaaaab
 800e534:	10008200 	.word	0x10008200
 800e538:	40020880 	.word	0x40020880
 800e53c:	1000823f 	.word	0x1000823f
 800e540:	40020940 	.word	0x40020940
 800e544:	cccccccd 	.word	0xcccccccd

0800e548 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 800e548:	2800      	cmp	r0, #0
 800e54a:	f000 810b 	beq.w	800e764 <HAL_DMA_DeInit+0x21c>
  __HAL_DMA_DISABLE(hdma);
 800e54e:	6803      	ldr	r3, [r0, #0]
 800e550:	4a92      	ldr	r2, [pc, #584]	; (800e79c <HAL_DMA_DeInit+0x254>)
 800e552:	4993      	ldr	r1, [pc, #588]	; (800e7a0 <HAL_DMA_DeInit+0x258>)
{
 800e554:	b570      	push	{r4, r5, r6, lr}
 800e556:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 800e558:	4892      	ldr	r0, [pc, #584]	; (800e7a4 <HAL_DMA_DeInit+0x25c>)
 800e55a:	4d93      	ldr	r5, [pc, #588]	; (800e7a8 <HAL_DMA_DeInit+0x260>)
 800e55c:	4283      	cmp	r3, r0
 800e55e:	bf18      	it	ne
 800e560:	4293      	cmpne	r3, r2
 800e562:	f100 0030 	add.w	r0, r0, #48	; 0x30
 800e566:	bf0c      	ite	eq
 800e568:	2201      	moveq	r2, #1
 800e56a:	2200      	movne	r2, #0
 800e56c:	428b      	cmp	r3, r1
 800e56e:	bf08      	it	eq
 800e570:	f042 0201 	orreq.w	r2, r2, #1
 800e574:	3148      	adds	r1, #72	; 0x48
 800e576:	4283      	cmp	r3, r0
 800e578:	bf08      	it	eq
 800e57a:	f042 0201 	orreq.w	r2, r2, #1
 800e57e:	f500 7062 	add.w	r0, r0, #904	; 0x388
 800e582:	42ab      	cmp	r3, r5
 800e584:	bf08      	it	eq
 800e586:	f042 0201 	orreq.w	r2, r2, #1
 800e58a:	f505 7562 	add.w	r5, r5, #904	; 0x388
 800e58e:	428b      	cmp	r3, r1
 800e590:	bf08      	it	eq
 800e592:	f042 0201 	orreq.w	r2, r2, #1
 800e596:	f501 7162 	add.w	r1, r1, #904	; 0x388
 800e59a:	4283      	cmp	r3, r0
 800e59c:	bf08      	it	eq
 800e59e:	f042 0201 	orreq.w	r2, r2, #1
 800e5a2:	3048      	adds	r0, #72	; 0x48
 800e5a4:	42ab      	cmp	r3, r5
 800e5a6:	bf08      	it	eq
 800e5a8:	f042 0201 	orreq.w	r2, r2, #1
 800e5ac:	3548      	adds	r5, #72	; 0x48
 800e5ae:	428b      	cmp	r3, r1
 800e5b0:	bf08      	it	eq
 800e5b2:	f042 0201 	orreq.w	r2, r2, #1
 800e5b6:	3148      	adds	r1, #72	; 0x48
 800e5b8:	4283      	cmp	r3, r0
 800e5ba:	bf08      	it	eq
 800e5bc:	f042 0201 	orreq.w	r2, r2, #1
 800e5c0:	3048      	adds	r0, #72	; 0x48
 800e5c2:	42ab      	cmp	r3, r5
 800e5c4:	bf08      	it	eq
 800e5c6:	f042 0201 	orreq.w	r2, r2, #1
 800e5ca:	3548      	adds	r5, #72	; 0x48
 800e5cc:	428b      	cmp	r3, r1
 800e5ce:	bf08      	it	eq
 800e5d0:	f042 0201 	orreq.w	r2, r2, #1
 800e5d4:	f5a1 618f 	sub.w	r1, r1, #1144	; 0x478
 800e5d8:	4283      	cmp	r3, r0
 800e5da:	bf08      	it	eq
 800e5dc:	f042 0201 	orreq.w	r2, r2, #1
 800e5e0:	f5a0 608f 	sub.w	r0, r0, #1144	; 0x478
 800e5e4:	42ab      	cmp	r3, r5
 800e5e6:	bf08      	it	eq
 800e5e8:	f042 0201 	orreq.w	r2, r2, #1
 800e5ec:	4283      	cmp	r3, r0
 800e5ee:	bf18      	it	ne
 800e5f0:	428b      	cmpne	r3, r1
 800e5f2:	bf0c      	ite	eq
 800e5f4:	2101      	moveq	r1, #1
 800e5f6:	2100      	movne	r1, #0
 800e5f8:	b912      	cbnz	r2, 800e600 <HAL_DMA_DeInit+0xb8>
 800e5fa:	2900      	cmp	r1, #0
 800e5fc:	f000 80f4 	beq.w	800e7e8 <HAL_DMA_DeInit+0x2a0>
 800e600:	681a      	ldr	r2, [r3, #0]
 800e602:	f022 0201 	bic.w	r2, r2, #1
 800e606:	601a      	str	r2, [r3, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800e608:	2900      	cmp	r1, #0
 800e60a:	d170      	bne.n	800e6ee <HAL_DMA_DeInit+0x1a6>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 800e60c:	2221      	movs	r2, #33	; 0x21
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 800e60e:	6019      	str	r1, [r3, #0]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 800e610:	6059      	str	r1, [r3, #4]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 800e612:	6099      	str	r1, [r3, #8]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 800e614:	60d9      	str	r1, [r3, #12]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 800e616:	6119      	str	r1, [r3, #16]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 800e618:	615a      	str	r2, [r3, #20]
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800e61a:	b2da      	uxtb	r2, r3
 800e61c:	4863      	ldr	r0, [pc, #396]	; (800e7ac <HAL_DMA_DeInit+0x264>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800e61e:	4d64      	ldr	r5, [pc, #400]	; (800e7b0 <HAL_DMA_DeInit+0x268>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800e620:	3a10      	subs	r2, #16
 800e622:	4964      	ldr	r1, [pc, #400]	; (800e7b4 <HAL_DMA_DeInit+0x26c>)
 800e624:	fba0 0202 	umull	r0, r2, r0, r2
 800e628:	4019      	ands	r1, r3
 800e62a:	0912      	lsrs	r2, r2, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800e62c:	f002 0007 	and.w	r0, r2, #7
    if (stream_number > 3U)
 800e630:	2a03      	cmp	r2, #3
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800e632:	f04f 023f 	mov.w	r2, #63	; 0x3f
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800e636:	5c28      	ldrb	r0, [r5, r0]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800e638:	bf88      	it	hi
 800e63a:	3104      	addhi	r1, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800e63c:	65e0      	str	r0, [r4, #92]	; 0x5c
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800e63e:	f000 001f 	and.w	r0, r0, #31
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800e642:	65a1      	str	r1, [r4, #88]	; 0x58
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800e644:	fa02 f000 	lsl.w	r0, r2, r0
 800e648:	6088      	str	r0, [r1, #8]
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800e64a:	4a5b      	ldr	r2, [pc, #364]	; (800e7b8 <HAL_DMA_DeInit+0x270>)
 800e64c:	b2d9      	uxtb	r1, r3
 800e64e:	4d5b      	ldr	r5, [pc, #364]	; (800e7bc <HAL_DMA_DeInit+0x274>)
 800e650:	485b      	ldr	r0, [pc, #364]	; (800e7c0 <HAL_DMA_DeInit+0x278>)
 800e652:	42ab      	cmp	r3, r5
 800e654:	bf18      	it	ne
 800e656:	4293      	cmpne	r3, r2
 800e658:	f105 0528 	add.w	r5, r5, #40	; 0x28
 800e65c:	bf0c      	ite	eq
 800e65e:	2201      	moveq	r2, #1
 800e660:	2200      	movne	r2, #0
 800e662:	4283      	cmp	r3, r0
 800e664:	bf08      	it	eq
 800e666:	f042 0201 	orreq.w	r2, r2, #1
 800e66a:	3028      	adds	r0, #40	; 0x28
 800e66c:	42ab      	cmp	r3, r5
 800e66e:	bf08      	it	eq
 800e670:	f042 0201 	orreq.w	r2, r2, #1
 800e674:	3528      	adds	r5, #40	; 0x28
 800e676:	4283      	cmp	r3, r0
 800e678:	bf08      	it	eq
 800e67a:	f042 0201 	orreq.w	r2, r2, #1
 800e67e:	3028      	adds	r0, #40	; 0x28
 800e680:	42ab      	cmp	r3, r5
 800e682:	bf08      	it	eq
 800e684:	f042 0201 	orreq.w	r2, r2, #1
 800e688:	4283      	cmp	r3, r0
 800e68a:	bf08      	it	eq
 800e68c:	f042 0201 	orreq.w	r2, r2, #1
 800e690:	b912      	cbnz	r2, 800e698 <HAL_DMA_DeInit+0x150>
 800e692:	4a4c      	ldr	r2, [pc, #304]	; (800e7c4 <HAL_DMA_DeInit+0x27c>)
 800e694:	4293      	cmp	r3, r2
 800e696:	d167      	bne.n	800e768 <HAL_DMA_DeInit+0x220>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800e698:	f1a1 0208 	sub.w	r2, r1, #8
 800e69c:	4d4a      	ldr	r5, [pc, #296]	; (800e7c8 <HAL_DMA_DeInit+0x280>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800e69e:	494b      	ldr	r1, [pc, #300]	; (800e7cc <HAL_DMA_DeInit+0x284>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800e6a0:	2001      	movs	r0, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800e6a2:	fba5 5202 	umull	r5, r2, r5, r2
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800e6a6:	4d4a      	ldr	r5, [pc, #296]	; (800e7d0 <HAL_DMA_DeInit+0x288>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800e6a8:	0912      	lsrs	r2, r2, #4
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800e6aa:	6665      	str	r5, [r4, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800e6ac:	4411      	add	r1, r2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800e6ae:	f002 021f 	and.w	r2, r2, #31
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800e6b2:	0089      	lsls	r1, r1, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800e6b4:	fa00 f202 	lsl.w	r2, r0, r2
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800e6b8:	6621      	str	r1, [r4, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800e6ba:	66a2      	str	r2, [r4, #104]	; 0x68
    if(hdma->DMAmuxChannel != 0U)
 800e6bc:	b111      	cbz	r1, 800e6c4 <HAL_DMA_DeInit+0x17c>
      hdma->DMAmuxChannel->CCR = 0U;
 800e6be:	2000      	movs	r0, #0
 800e6c0:	6008      	str	r0, [r1, #0]
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800e6c2:	606a      	str	r2, [r5, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800e6c4:	6860      	ldr	r0, [r4, #4]
 800e6c6:	1e41      	subs	r1, r0, #1
 800e6c8:	2907      	cmp	r1, #7
 800e6ca:	d919      	bls.n	800e700 <HAL_DMA_DeInit+0x1b8>
    hdma->DMAmuxRequestGen = 0U;
 800e6cc:	2300      	movs	r3, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e6ce:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 800e6d0:	4618      	mov	r0, r3
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800e6d2:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->State = HAL_DMA_STATE_RESET;
 800e6d4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 800e6d8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->DMAmuxRequestGenStatus = 0U;
 800e6dc:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
  hdma->XferHalfCpltCallback   = NULL;
 800e6e0:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 800e6e4:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
  hdma->XferAbortCallback      = NULL;
 800e6e8:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
}
 800e6ec:	bd70      	pop	{r4, r5, r6, pc}
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 800e6ee:	2200      	movs	r2, #0
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 800e6f0:	2121      	movs	r1, #33	; 0x21
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 800e6f2:	601a      	str	r2, [r3, #0]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 800e6f4:	605a      	str	r2, [r3, #4]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 800e6f6:	609a      	str	r2, [r3, #8]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 800e6f8:	60da      	str	r2, [r3, #12]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 800e6fa:	611a      	str	r2, [r3, #16]
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 800e6fc:	6159      	str	r1, [r3, #20]
 800e6fe:	e78c      	b.n	800e61a <HAL_DMA_DeInit+0xd2>
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800e700:	4a2d      	ldr	r2, [pc, #180]	; (800e7b8 <HAL_DMA_DeInit+0x270>)
 800e702:	4e2e      	ldr	r6, [pc, #184]	; (800e7bc <HAL_DMA_DeInit+0x274>)
 800e704:	4d2e      	ldr	r5, [pc, #184]	; (800e7c0 <HAL_DMA_DeInit+0x278>)
 800e706:	42b3      	cmp	r3, r6
 800e708:	bf18      	it	ne
 800e70a:	4293      	cmpne	r3, r2
 800e70c:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800e710:	bf0c      	ite	eq
 800e712:	2201      	moveq	r2, #1
 800e714:	2200      	movne	r2, #0
 800e716:	42ab      	cmp	r3, r5
 800e718:	bf08      	it	eq
 800e71a:	f042 0201 	orreq.w	r2, r2, #1
 800e71e:	3528      	adds	r5, #40	; 0x28
 800e720:	42b3      	cmp	r3, r6
 800e722:	bf08      	it	eq
 800e724:	f042 0201 	orreq.w	r2, r2, #1
 800e728:	3628      	adds	r6, #40	; 0x28
 800e72a:	42ab      	cmp	r3, r5
 800e72c:	bf08      	it	eq
 800e72e:	f042 0201 	orreq.w	r2, r2, #1
 800e732:	3528      	adds	r5, #40	; 0x28
 800e734:	42b3      	cmp	r3, r6
 800e736:	bf08      	it	eq
 800e738:	f042 0201 	orreq.w	r2, r2, #1
 800e73c:	42ab      	cmp	r3, r5
 800e73e:	bf08      	it	eq
 800e740:	f042 0201 	orreq.w	r2, r2, #1
 800e744:	b91a      	cbnz	r2, 800e74e <HAL_DMA_DeInit+0x206>
 800e746:	4a1f      	ldr	r2, [pc, #124]	; (800e7c4 <HAL_DMA_DeInit+0x27c>)
 800e748:	4293      	cmp	r3, r2
 800e74a:	f040 808a 	bne.w	800e862 <HAL_DMA_DeInit+0x31a>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800e74e:	4a21      	ldr	r2, [pc, #132]	; (800e7d4 <HAL_DMA_DeInit+0x28c>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800e750:	4d21      	ldr	r5, [pc, #132]	; (800e7d8 <HAL_DMA_DeInit+0x290>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800e752:	4402      	add	r2, r0
 800e754:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800e756:	2301      	movs	r3, #1
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800e758:	2000      	movs	r0, #0
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800e75a:	fa03 f101 	lsl.w	r1, r3, r1
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800e75e:	6010      	str	r0, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800e760:	6069      	str	r1, [r5, #4]
 800e762:	e7b3      	b.n	800e6cc <HAL_DMA_DeInit+0x184>
    return HAL_ERROR;
 800e764:	2001      	movs	r0, #1
}
 800e766:	4770      	bx	lr
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800e768:	4a1c      	ldr	r2, [pc, #112]	; (800e7dc <HAL_DMA_DeInit+0x294>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800e76a:	f1a1 0010 	sub.w	r0, r1, #16
 800e76e:	490f      	ldr	r1, [pc, #60]	; (800e7ac <HAL_DMA_DeInit+0x264>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800e770:	441a      	add	r2, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800e772:	fba1 1000 	umull	r1, r0, r1, r0
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800e776:	2aa8      	cmp	r2, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800e778:	ea4f 1010 	mov.w	r0, r0, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800e77c:	d800      	bhi.n	800e780 <HAL_DMA_DeInit+0x238>
      stream_number += 8U;
 800e77e:	3008      	adds	r0, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800e780:	4917      	ldr	r1, [pc, #92]	; (800e7e0 <HAL_DMA_DeInit+0x298>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800e782:	f000 051f 	and.w	r5, r0, #31
 800e786:	2201      	movs	r2, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800e788:	4401      	add	r1, r0
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800e78a:	4816      	ldr	r0, [pc, #88]	; (800e7e4 <HAL_DMA_DeInit+0x29c>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800e78c:	40aa      	lsls	r2, r5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800e78e:	0089      	lsls	r1, r1, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800e790:	4605      	mov	r5, r0
 800e792:	66a2      	str	r2, [r4, #104]	; 0x68
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800e794:	e9c4 1018 	strd	r1, r0, [r4, #96]	; 0x60
 800e798:	e790      	b.n	800e6bc <HAL_DMA_DeInit+0x174>
 800e79a:	bf00      	nop
 800e79c:	40020040 	.word	0x40020040
 800e7a0:	40020070 	.word	0x40020070
 800e7a4:	40020058 	.word	0x40020058
 800e7a8:	400200a0 	.word	0x400200a0
 800e7ac:	aaaaaaab 	.word	0xaaaaaaab
 800e7b0:	080bfbe4 	.word	0x080bfbe4
 800e7b4:	fffffc00 	.word	0xfffffc00
 800e7b8:	58025408 	.word	0x58025408
 800e7bc:	5802541c 	.word	0x5802541c
 800e7c0:	58025430 	.word	0x58025430
 800e7c4:	58025494 	.word	0x58025494
 800e7c8:	cccccccd 	.word	0xcccccccd
 800e7cc:	16009600 	.word	0x16009600
 800e7d0:	58025880 	.word	0x58025880
 800e7d4:	1600963f 	.word	0x1600963f
 800e7d8:	58025940 	.word	0x58025940
 800e7dc:	bffdfbf0 	.word	0xbffdfbf0
 800e7e0:	10008200 	.word	0x10008200
 800e7e4:	40020880 	.word	0x40020880
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800e7e8:	4a20      	ldr	r2, [pc, #128]	; (800e86c <HAL_DMA_DeInit+0x324>)
 800e7ea:	4921      	ldr	r1, [pc, #132]	; (800e870 <HAL_DMA_DeInit+0x328>)
 800e7ec:	4d21      	ldr	r5, [pc, #132]	; (800e874 <HAL_DMA_DeInit+0x32c>)
 800e7ee:	428b      	cmp	r3, r1
 800e7f0:	bf18      	it	ne
 800e7f2:	4293      	cmpne	r3, r2
 800e7f4:	4820      	ldr	r0, [pc, #128]	; (800e878 <HAL_DMA_DeInit+0x330>)
 800e7f6:	f101 013c 	add.w	r1, r1, #60	; 0x3c
 800e7fa:	bf0c      	ite	eq
 800e7fc:	2201      	moveq	r2, #1
 800e7fe:	2200      	movne	r2, #0
 800e800:	42ab      	cmp	r3, r5
 800e802:	bf08      	it	eq
 800e804:	f042 0201 	orreq.w	r2, r2, #1
 800e808:	353c      	adds	r5, #60	; 0x3c
 800e80a:	4283      	cmp	r3, r0
 800e80c:	bf08      	it	eq
 800e80e:	f042 0201 	orreq.w	r2, r2, #1
 800e812:	303c      	adds	r0, #60	; 0x3c
 800e814:	428b      	cmp	r3, r1
 800e816:	bf08      	it	eq
 800e818:	f042 0201 	orreq.w	r2, r2, #1
  __HAL_DMA_DISABLE(hdma);
 800e81c:	6819      	ldr	r1, [r3, #0]
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800e81e:	42ab      	cmp	r3, r5
 800e820:	bf08      	it	eq
 800e822:	f042 0201 	orreq.w	r2, r2, #1
  __HAL_DMA_DISABLE(hdma);
 800e826:	f021 0101 	bic.w	r1, r1, #1
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800e82a:	4283      	cmp	r3, r0
 800e82c:	bf08      	it	eq
 800e82e:	f042 0201 	orreq.w	r2, r2, #1
  __HAL_DMA_DISABLE(hdma);
 800e832:	6019      	str	r1, [r3, #0]
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800e834:	b912      	cbnz	r2, 800e83c <HAL_DMA_DeInit+0x2f4>
 800e836:	4a11      	ldr	r2, [pc, #68]	; (800e87c <HAL_DMA_DeInit+0x334>)
 800e838:	4293      	cmp	r3, r2
 800e83a:	d110      	bne.n	800e85e <HAL_DMA_DeInit+0x316>
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 800e83c:	2200      	movs	r2, #0
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800e83e:	4620      	mov	r0, r4
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 800e840:	601a      	str	r2, [r3, #0]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 800e842:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 800e844:	609a      	str	r2, [r3, #8]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 800e846:	60da      	str	r2, [r3, #12]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 800e848:	611a      	str	r2, [r3, #16]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800e84a:	f7ff fb35 	bl	800deb8 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800e84e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800e850:	2201      	movs	r2, #1
 800e852:	6823      	ldr	r3, [r4, #0]
 800e854:	f001 011f 	and.w	r1, r1, #31
 800e858:	408a      	lsls	r2, r1
 800e85a:	6042      	str	r2, [r0, #4]
 800e85c:	e6f5      	b.n	800e64a <HAL_DMA_DeInit+0x102>
    return HAL_ERROR;
 800e85e:	2001      	movs	r0, #1
}
 800e860:	bd70      	pop	{r4, r5, r6, pc}
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800e862:	4a07      	ldr	r2, [pc, #28]	; (800e880 <HAL_DMA_DeInit+0x338>)
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800e864:	4d07      	ldr	r5, [pc, #28]	; (800e884 <HAL_DMA_DeInit+0x33c>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800e866:	4402      	add	r2, r0
 800e868:	0092      	lsls	r2, r2, #2
 800e86a:	e774      	b.n	800e756 <HAL_DMA_DeInit+0x20e>
 800e86c:	58025408 	.word	0x58025408
 800e870:	5802541c 	.word	0x5802541c
 800e874:	58025430 	.word	0x58025430
 800e878:	58025444 	.word	0x58025444
 800e87c:	58025494 	.word	0x58025494
 800e880:	1000823f 	.word	0x1000823f
 800e884:	40020940 	.word	0x40020940

0800e888 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 800e888:	2800      	cmp	r0, #0
 800e88a:	f000 8104 	beq.w	800ea96 <HAL_DMA_Start_IT+0x20e>
{
 800e88e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e892:	4605      	mov	r5, r0
  __HAL_LOCK(hdma);
 800e894:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 800e898:	2801      	cmp	r0, #1
 800e89a:	f000 8138 	beq.w	800eb0e <HAL_DMA_Start_IT+0x286>
 800e89e:	2001      	movs	r0, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 800e8a0:	f895 4035 	ldrb.w	r4, [r5, #53]	; 0x35
 800e8a4:	4284      	cmp	r4, r0
  __HAL_LOCK(hdma);
 800e8a6:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800e8aa:	d007      	beq.n	800e8bc <HAL_DMA_Start_IT+0x34>
    __HAL_UNLOCK(hdma);
 800e8ac:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800e8ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 800e8b2:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800e8b6:	656b      	str	r3, [r5, #84]	; 0x54
}
 800e8b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_DMA_DISABLE(hdma);
 800e8bc:	682c      	ldr	r4, [r5, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 800e8be:	f04f 0e02 	mov.w	lr, #2
    __HAL_DMA_DISABLE(hdma);
 800e8c2:	489b      	ldr	r0, [pc, #620]	; (800eb30 <HAL_DMA_Start_IT+0x2a8>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e8c4:	f04f 0c00 	mov.w	ip, #0
    __HAL_DMA_DISABLE(hdma);
 800e8c8:	4f9a      	ldr	r7, [pc, #616]	; (800eb34 <HAL_DMA_Start_IT+0x2ac>)
 800e8ca:	4e9b      	ldr	r6, [pc, #620]	; (800eb38 <HAL_DMA_Start_IT+0x2b0>)
 800e8cc:	42bc      	cmp	r4, r7
 800e8ce:	bf18      	it	ne
 800e8d0:	4284      	cmpne	r4, r0
 800e8d2:	f107 0748 	add.w	r7, r7, #72	; 0x48
    hdma->State = HAL_DMA_STATE_BUSY;
 800e8d6:	f885 e035 	strb.w	lr, [r5, #53]	; 0x35
 800e8da:	bf0c      	ite	eq
 800e8dc:	2001      	moveq	r0, #1
 800e8de:	2000      	movne	r0, #0
    __HAL_DMA_DISABLE(hdma);
 800e8e0:	f8df e264 	ldr.w	lr, [pc, #612]	; 800eb48 <HAL_DMA_Start_IT+0x2c0>
 800e8e4:	42b4      	cmp	r4, r6
 800e8e6:	bf08      	it	eq
 800e8e8:	f040 0001 	orreq.w	r0, r0, #1
 800e8ec:	3630      	adds	r6, #48	; 0x30
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e8ee:	f8c5 c054 	str.w	ip, [r5, #84]	; 0x54
 800e8f2:	42bc      	cmp	r4, r7
 800e8f4:	bf08      	it	eq
 800e8f6:	f040 0001 	orreq.w	r0, r0, #1
    __HAL_DMA_DISABLE(hdma);
 800e8fa:	f507 7762 	add.w	r7, r7, #904	; 0x388
 800e8fe:	f8df c24c 	ldr.w	ip, [pc, #588]	; 800eb4c <HAL_DMA_Start_IT+0x2c4>
 800e902:	42b4      	cmp	r4, r6
 800e904:	bf08      	it	eq
 800e906:	f040 0001 	orreq.w	r0, r0, #1
 800e90a:	f506 7662 	add.w	r6, r6, #904	; 0x388
 800e90e:	4574      	cmp	r4, lr
 800e910:	bf08      	it	eq
 800e912:	f040 0001 	orreq.w	r0, r0, #1
 800e916:	f50e 7e68 	add.w	lr, lr, #928	; 0x3a0
 800e91a:	42bc      	cmp	r4, r7
 800e91c:	bf08      	it	eq
 800e91e:	f040 0001 	orreq.w	r0, r0, #1
 800e922:	3760      	adds	r7, #96	; 0x60
 800e924:	42b4      	cmp	r4, r6
 800e926:	bf08      	it	eq
 800e928:	f040 0001 	orreq.w	r0, r0, #1
 800e92c:	3660      	adds	r6, #96	; 0x60
 800e92e:	4564      	cmp	r4, ip
 800e930:	bf08      	it	eq
 800e932:	f040 0001 	orreq.w	r0, r0, #1
 800e936:	f10c 0c60 	add.w	ip, ip, #96	; 0x60
 800e93a:	4574      	cmp	r4, lr
 800e93c:	bf08      	it	eq
 800e93e:	f040 0001 	orreq.w	r0, r0, #1
 800e942:	f10e 0e60 	add.w	lr, lr, #96	; 0x60
 800e946:	42bc      	cmp	r4, r7
 800e948:	bf08      	it	eq
 800e94a:	f040 0001 	orreq.w	r0, r0, #1
 800e94e:	f5a7 678c 	sub.w	r7, r7, #1120	; 0x460
 800e952:	42b4      	cmp	r4, r6
 800e954:	bf08      	it	eq
 800e956:	f040 0001 	orreq.w	r0, r0, #1
 800e95a:	f5a6 668c 	sub.w	r6, r6, #1120	; 0x460
 800e95e:	4564      	cmp	r4, ip
 800e960:	bf08      	it	eq
 800e962:	f040 0001 	orreq.w	r0, r0, #1
 800e966:	f8d5 c058 	ldr.w	ip, [r5, #88]	; 0x58
 800e96a:	4574      	cmp	r4, lr
 800e96c:	bf14      	ite	ne
 800e96e:	4682      	movne	sl, r0
 800e970:	f040 0a01 	orreq.w	sl, r0, #1
 800e974:	42b4      	cmp	r4, r6
 800e976:	bf18      	it	ne
 800e978:	42bc      	cmpne	r4, r7
 800e97a:	6827      	ldr	r7, [r4, #0]
 800e97c:	bf0c      	ite	eq
 800e97e:	2601      	moveq	r6, #1
 800e980:	2600      	movne	r6, #0
 800e982:	f027 0701 	bic.w	r7, r7, #1
 800e986:	6027      	str	r7, [r4, #0]
 800e988:	d003      	beq.n	800e992 <HAL_DMA_Start_IT+0x10a>
 800e98a:	f1ba 0f00 	cmp.w	sl, #0
 800e98e:	f000 8084 	beq.w	800ea9a <HAL_DMA_Start_IT+0x212>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800e992:	2e00      	cmp	r6, #0
 800e994:	f000 8081 	beq.w	800ea9a <HAL_DMA_Start_IT+0x212>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800e998:	6e6f      	ldr	r7, [r5, #100]	; 0x64
 800e99a:	e9d5 0e1a 	ldrd	r0, lr, [r5, #104]	; 0x68
 800e99e:	6078      	str	r0, [r7, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 800e9a0:	f1be 0f00 	cmp.w	lr, #0
 800e9a4:	d007      	beq.n	800e9b6 <HAL_DMA_Start_IT+0x12e>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800e9a6:	e9d5 701c 	ldrd	r7, r0, [r5, #112]	; 0x70
 800e9aa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800e9ac:	b91e      	cbnz	r6, 800e9b6 <HAL_DMA_Start_IT+0x12e>
 800e9ae:	f1ba 0f00 	cmp.w	sl, #0
 800e9b2:	f000 80cd 	beq.w	800eb50 <HAL_DMA_Start_IT+0x2c8>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800e9b6:	6def      	ldr	r7, [r5, #92]	; 0x5c
 800e9b8:	f04f 093f 	mov.w	r9, #63	; 0x3f
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800e9bc:	f8d5 8008 	ldr.w	r8, [r5, #8]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800e9c0:	f007 071f 	and.w	r7, r7, #31
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800e9c4:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800e9c8:	fa09 f707 	lsl.w	r7, r9, r7
 800e9cc:	f8cc 7008 	str.w	r7, [ip, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800e9d0:	6827      	ldr	r7, [r4, #0]
 800e9d2:	f427 2780 	bic.w	r7, r7, #262144	; 0x40000
 800e9d6:	6027      	str	r7, [r4, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800e9d8:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800e9da:	f000 80a5 	beq.w	800eb28 <HAL_DMA_Start_IT+0x2a0>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800e9de:	60a1      	str	r1, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800e9e0:	60e2      	str	r2, [r4, #12]
 800e9e2:	6c2f      	ldr	r7, [r5, #64]	; 0x40
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800e9e4:	2e00      	cmp	r6, #0
 800e9e6:	f040 8095 	bne.w	800eb14 <HAL_DMA_Start_IT+0x28c>
 800e9ea:	f1ba 0f00 	cmp.w	sl, #0
 800e9ee:	f000 80ee 	beq.w	800ebce <HAL_DMA_Start_IT+0x346>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800e9f2:	6823      	ldr	r3, [r4, #0]
 800e9f4:	f023 031e 	bic.w	r3, r3, #30
 800e9f8:	f043 0316 	orr.w	r3, r3, #22
 800e9fc:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800e9fe:	b12f      	cbz	r7, 800ea0c <HAL_DMA_Start_IT+0x184>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800ea00:	6823      	ldr	r3, [r4, #0]
 800ea02:	f043 0308 	orr.w	r3, r3, #8
 800ea06:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ea08:	2e00      	cmp	r6, #0
 800ea0a:	d12c      	bne.n	800ea66 <HAL_DMA_Start_IT+0x1de>
 800ea0c:	4b4b      	ldr	r3, [pc, #300]	; (800eb3c <HAL_DMA_Start_IT+0x2b4>)
 800ea0e:	4a4c      	ldr	r2, [pc, #304]	; (800eb40 <HAL_DMA_Start_IT+0x2b8>)
 800ea10:	494c      	ldr	r1, [pc, #304]	; (800eb44 <HAL_DMA_Start_IT+0x2bc>)
 800ea12:	4294      	cmp	r4, r2
 800ea14:	bf18      	it	ne
 800ea16:	429c      	cmpne	r4, r3
 800ea18:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 800ea1c:	bf0c      	ite	eq
 800ea1e:	2301      	moveq	r3, #1
 800ea20:	2300      	movne	r3, #0
 800ea22:	428c      	cmp	r4, r1
 800ea24:	bf08      	it	eq
 800ea26:	f043 0301 	orreq.w	r3, r3, #1
 800ea2a:	3128      	adds	r1, #40	; 0x28
 800ea2c:	4294      	cmp	r4, r2
 800ea2e:	bf08      	it	eq
 800ea30:	f043 0301 	orreq.w	r3, r3, #1
 800ea34:	3228      	adds	r2, #40	; 0x28
 800ea36:	428c      	cmp	r4, r1
 800ea38:	bf08      	it	eq
 800ea3a:	f043 0301 	orreq.w	r3, r3, #1
 800ea3e:	3128      	adds	r1, #40	; 0x28
 800ea40:	4294      	cmp	r4, r2
 800ea42:	bf08      	it	eq
 800ea44:	f043 0301 	orreq.w	r3, r3, #1
 800ea48:	3228      	adds	r2, #40	; 0x28
 800ea4a:	428c      	cmp	r4, r1
 800ea4c:	bf08      	it	eq
 800ea4e:	f043 0301 	orreq.w	r3, r3, #1
 800ea52:	4294      	cmp	r4, r2
 800ea54:	bf08      	it	eq
 800ea56:	f043 0301 	orreq.w	r3, r3, #1
 800ea5a:	b913      	cbnz	r3, 800ea62 <HAL_DMA_Start_IT+0x1da>
 800ea5c:	f1ba 0f00 	cmp.w	sl, #0
 800ea60:	d012      	beq.n	800ea88 <HAL_DMA_Start_IT+0x200>
 800ea62:	f8d5 e06c 	ldr.w	lr, [r5, #108]	; 0x6c
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800ea66:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800ea68:	681a      	ldr	r2, [r3, #0]
 800ea6a:	03d2      	lsls	r2, r2, #15
 800ea6c:	d503      	bpl.n	800ea76 <HAL_DMA_Start_IT+0x1ee>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800ea6e:	681a      	ldr	r2, [r3, #0]
 800ea70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ea74:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 800ea76:	f1be 0f00 	cmp.w	lr, #0
 800ea7a:	d005      	beq.n	800ea88 <HAL_DMA_Start_IT+0x200>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800ea7c:	f8de 3000 	ldr.w	r3, [lr]
 800ea80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ea84:	f8ce 3000 	str.w	r3, [lr]
    __HAL_DMA_ENABLE(hdma);
 800ea88:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ea8a:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800ea8c:	f043 0301 	orr.w	r3, r3, #1
 800ea90:	6023      	str	r3, [r4, #0]
}
 800ea92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_ERROR;
 800ea96:	2001      	movs	r0, #1
}
 800ea98:	4770      	bx	lr
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ea9a:	4f28      	ldr	r7, [pc, #160]	; (800eb3c <HAL_DMA_Start_IT+0x2b4>)
 800ea9c:	f8df e0a0 	ldr.w	lr, [pc, #160]	; 800eb40 <HAL_DMA_Start_IT+0x2b8>
 800eaa0:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800eb44 <HAL_DMA_Start_IT+0x2bc>
 800eaa4:	4574      	cmp	r4, lr
 800eaa6:	bf18      	it	ne
 800eaa8:	42bc      	cmpne	r4, r7
 800eaaa:	f10e 0e3c 	add.w	lr, lr, #60	; 0x3c
 800eaae:	bf0c      	ite	eq
 800eab0:	2701      	moveq	r7, #1
 800eab2:	2700      	movne	r7, #0
 800eab4:	4544      	cmp	r4, r8
 800eab6:	bf08      	it	eq
 800eab8:	f047 0701 	orreq.w	r7, r7, #1
 800eabc:	f108 0828 	add.w	r8, r8, #40	; 0x28
 800eac0:	4574      	cmp	r4, lr
 800eac2:	bf08      	it	eq
 800eac4:	f047 0701 	orreq.w	r7, r7, #1
 800eac8:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 800eacc:	4544      	cmp	r4, r8
 800eace:	bf08      	it	eq
 800ead0:	f047 0701 	orreq.w	r7, r7, #1
 800ead4:	f108 0828 	add.w	r8, r8, #40	; 0x28
 800ead8:	4574      	cmp	r4, lr
 800eada:	bf08      	it	eq
 800eadc:	f047 0701 	orreq.w	r7, r7, #1
 800eae0:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 800eae4:	4544      	cmp	r4, r8
 800eae6:	bf08      	it	eq
 800eae8:	f047 0701 	orreq.w	r7, r7, #1
 800eaec:	4574      	cmp	r4, lr
 800eaee:	bf08      	it	eq
 800eaf0:	f047 0701 	orreq.w	r7, r7, #1
 800eaf4:	b917      	cbnz	r7, 800eafc <HAL_DMA_Start_IT+0x274>
 800eaf6:	f1ba 0f00 	cmp.w	sl, #0
 800eafa:	d029      	beq.n	800eb50 <HAL_DMA_Start_IT+0x2c8>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800eafc:	6e6f      	ldr	r7, [r5, #100]	; 0x64
 800eafe:	e9d5 0e1a 	ldrd	r0, lr, [r5, #104]	; 0x68
 800eb02:	6078      	str	r0, [r7, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 800eb04:	f1be 0f00 	cmp.w	lr, #0
 800eb08:	f47f af4d 	bne.w	800e9a6 <HAL_DMA_Start_IT+0x11e>
 800eb0c:	e74f      	b.n	800e9ae <HAL_DMA_Start_IT+0x126>
  __HAL_LOCK(hdma);
 800eb0e:	2002      	movs	r0, #2
}
 800eb10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800eb14:	6823      	ldr	r3, [r4, #0]
 800eb16:	f023 031e 	bic.w	r3, r3, #30
 800eb1a:	f043 0316 	orr.w	r3, r3, #22
 800eb1e:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800eb20:	2f00      	cmp	r7, #0
 800eb22:	f47f af6d 	bne.w	800ea00 <HAL_DMA_Start_IT+0x178>
 800eb26:	e79e      	b.n	800ea66 <HAL_DMA_Start_IT+0x1de>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800eb28:	60a2      	str	r2, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800eb2a:	60e1      	str	r1, [r4, #12]
 800eb2c:	e759      	b.n	800e9e2 <HAL_DMA_Start_IT+0x15a>
 800eb2e:	bf00      	nop
 800eb30:	40020058 	.word	0x40020058
 800eb34:	40020040 	.word	0x40020040
 800eb38:	40020070 	.word	0x40020070
 800eb3c:	5802541c 	.word	0x5802541c
 800eb40:	58025408 	.word	0x58025408
 800eb44:	58025430 	.word	0x58025430
 800eb48:	400200b8 	.word	0x400200b8
 800eb4c:	40020440 	.word	0x40020440
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800eb50:	4f28      	ldr	r7, [pc, #160]	; (800ebf4 <HAL_DMA_Start_IT+0x36c>)
 800eb52:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 800ebfc <HAL_DMA_Start_IT+0x374>
 800eb56:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 800ec00 <HAL_DMA_Start_IT+0x378>
 800eb5a:	4544      	cmp	r4, r8
 800eb5c:	bf18      	it	ne
 800eb5e:	42bc      	cmpne	r4, r7
 800eb60:	f108 0828 	add.w	r8, r8, #40	; 0x28
 800eb64:	bf0c      	ite	eq
 800eb66:	2701      	moveq	r7, #1
 800eb68:	2700      	movne	r7, #0
 800eb6a:	4574      	cmp	r4, lr
 800eb6c:	bf08      	it	eq
 800eb6e:	f047 0701 	orreq.w	r7, r7, #1
 800eb72:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 800eb76:	4544      	cmp	r4, r8
 800eb78:	bf08      	it	eq
 800eb7a:	f047 0701 	orreq.w	r7, r7, #1
 800eb7e:	f108 0828 	add.w	r8, r8, #40	; 0x28
 800eb82:	4574      	cmp	r4, lr
 800eb84:	bf08      	it	eq
 800eb86:	f047 0701 	orreq.w	r7, r7, #1
 800eb8a:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 800eb8e:	4544      	cmp	r4, r8
 800eb90:	bf08      	it	eq
 800eb92:	f047 0701 	orreq.w	r7, r7, #1
 800eb96:	4574      	cmp	r4, lr
 800eb98:	bf08      	it	eq
 800eb9a:	f047 0701 	orreq.w	r7, r7, #1
 800eb9e:	b927      	cbnz	r7, 800ebaa <HAL_DMA_Start_IT+0x322>
 800eba0:	4f15      	ldr	r7, [pc, #84]	; (800ebf8 <HAL_DMA_Start_IT+0x370>)
 800eba2:	42bc      	cmp	r4, r7
 800eba4:	bf18      	it	ne
 800eba6:	6c2f      	ldrne	r7, [r5, #64]	; 0x40
 800eba8:	d111      	bne.n	800ebce <HAL_DMA_Start_IT+0x346>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800ebaa:	6def      	ldr	r7, [r5, #92]	; 0x5c
 800ebac:	f04f 0e01 	mov.w	lr, #1
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ebb0:	f8d5 8008 	ldr.w	r8, [r5, #8]
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800ebb4:	f007 071f 	and.w	r7, r7, #31
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ebb8:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800ebbc:	fa0e f707 	lsl.w	r7, lr, r7
 800ebc0:	f8cc 7004 	str.w	r7, [ip, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800ebc4:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ebc6:	d010      	beq.n	800ebea <HAL_DMA_Start_IT+0x362>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800ebc8:	60a1      	str	r1, [r4, #8]
 800ebca:	6c2f      	ldr	r7, [r5, #64]	; 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800ebcc:	60e2      	str	r2, [r4, #12]
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800ebce:	6823      	ldr	r3, [r4, #0]
 800ebd0:	f023 030e 	bic.w	r3, r3, #14
 800ebd4:	f043 030a 	orr.w	r3, r3, #10
 800ebd8:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800ebda:	2f00      	cmp	r7, #0
 800ebdc:	f43f af16 	beq.w	800ea0c <HAL_DMA_Start_IT+0x184>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800ebe0:	6823      	ldr	r3, [r4, #0]
 800ebe2:	f043 0304 	orr.w	r3, r3, #4
 800ebe6:	6023      	str	r3, [r4, #0]
 800ebe8:	e710      	b.n	800ea0c <HAL_DMA_Start_IT+0x184>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800ebea:	60a2      	str	r2, [r4, #8]
 800ebec:	6c2f      	ldr	r7, [r5, #64]	; 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800ebee:	60e1      	str	r1, [r4, #12]
 800ebf0:	e7ed      	b.n	800ebce <HAL_DMA_Start_IT+0x346>
 800ebf2:	bf00      	nop
 800ebf4:	58025408 	.word	0x58025408
 800ebf8:	58025494 	.word	0x58025494
 800ebfc:	5802541c 	.word	0x5802541c
 800ec00:	58025430 	.word	0x58025430

0800ec04 <HAL_DMA_Abort>:
{
 800ec04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec06:	4606      	mov	r6, r0
  uint32_t tickstart = HAL_GetTick();
 800ec08:	f7fe feaa 	bl	800d960 <HAL_GetTick>
  if(hdma == NULL)
 800ec0c:	2e00      	cmp	r6, #0
 800ec0e:	f000 8147 	beq.w	800eea0 <HAL_DMA_Abort+0x29c>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ec12:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
 800ec16:	2b02      	cmp	r3, #2
 800ec18:	d006      	beq.n	800ec28 <HAL_DMA_Abort+0x24>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ec1a:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 800ec1c:	2300      	movs	r3, #0
    return HAL_ERROR;
 800ec1e:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ec20:	6572      	str	r2, [r6, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 800ec22:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
}
 800ec26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800ec28:	6834      	ldr	r4, [r6, #0]
 800ec2a:	4605      	mov	r5, r0
 800ec2c:	4b9d      	ldr	r3, [pc, #628]	; (800eea4 <HAL_DMA_Abort+0x2a0>)
 800ec2e:	4a9e      	ldr	r2, [pc, #632]	; (800eea8 <HAL_DMA_Abort+0x2a4>)
 800ec30:	499e      	ldr	r1, [pc, #632]	; (800eeac <HAL_DMA_Abort+0x2a8>)
 800ec32:	4294      	cmp	r4, r2
 800ec34:	bf18      	it	ne
 800ec36:	429c      	cmpne	r4, r3
 800ec38:	f102 0248 	add.w	r2, r2, #72	; 0x48
 800ec3c:	489c      	ldr	r0, [pc, #624]	; (800eeb0 <HAL_DMA_Abort+0x2ac>)
 800ec3e:	bf0c      	ite	eq
 800ec40:	2301      	moveq	r3, #1
 800ec42:	2300      	movne	r3, #0
 800ec44:	428c      	cmp	r4, r1
 800ec46:	bf08      	it	eq
 800ec48:	f043 0301 	orreq.w	r3, r3, #1
 800ec4c:	3148      	adds	r1, #72	; 0x48
 800ec4e:	4294      	cmp	r4, r2
 800ec50:	bf08      	it	eq
 800ec52:	f043 0301 	orreq.w	r3, r3, #1
 800ec56:	f502 7262 	add.w	r2, r2, #904	; 0x388
 800ec5a:	4284      	cmp	r4, r0
 800ec5c:	bf08      	it	eq
 800ec5e:	f043 0301 	orreq.w	r3, r3, #1
 800ec62:	f500 7062 	add.w	r0, r0, #904	; 0x388
 800ec66:	428c      	cmp	r4, r1
 800ec68:	bf08      	it	eq
 800ec6a:	f043 0301 	orreq.w	r3, r3, #1
 800ec6e:	f501 7162 	add.w	r1, r1, #904	; 0x388
 800ec72:	4294      	cmp	r4, r2
 800ec74:	bf08      	it	eq
 800ec76:	f043 0301 	orreq.w	r3, r3, #1
 800ec7a:	3248      	adds	r2, #72	; 0x48
 800ec7c:	4284      	cmp	r4, r0
 800ec7e:	bf08      	it	eq
 800ec80:	f043 0301 	orreq.w	r3, r3, #1
 800ec84:	3048      	adds	r0, #72	; 0x48
 800ec86:	428c      	cmp	r4, r1
 800ec88:	bf08      	it	eq
 800ec8a:	f043 0301 	orreq.w	r3, r3, #1
 800ec8e:	3148      	adds	r1, #72	; 0x48
 800ec90:	4294      	cmp	r4, r2
 800ec92:	bf08      	it	eq
 800ec94:	f043 0301 	orreq.w	r3, r3, #1
 800ec98:	3248      	adds	r2, #72	; 0x48
 800ec9a:	4284      	cmp	r4, r0
 800ec9c:	bf08      	it	eq
 800ec9e:	f043 0301 	orreq.w	r3, r3, #1
 800eca2:	3048      	adds	r0, #72	; 0x48
 800eca4:	428c      	cmp	r4, r1
 800eca6:	bf08      	it	eq
 800eca8:	f043 0301 	orreq.w	r3, r3, #1
 800ecac:	f5a1 618f 	sub.w	r1, r1, #1144	; 0x478
 800ecb0:	4294      	cmp	r4, r2
 800ecb2:	bf08      	it	eq
 800ecb4:	f043 0301 	orreq.w	r3, r3, #1
 800ecb8:	f5a2 628f 	sub.w	r2, r2, #1144	; 0x478
 800ecbc:	4284      	cmp	r4, r0
 800ecbe:	bf08      	it	eq
 800ecc0:	f043 0301 	orreq.w	r3, r3, #1
 800ecc4:	4294      	cmp	r4, r2
 800ecc6:	bf18      	it	ne
 800ecc8:	428c      	cmpne	r4, r1
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800ecca:	6822      	ldr	r2, [r4, #0]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800eccc:	bf0c      	ite	eq
 800ecce:	2101      	moveq	r1, #1
 800ecd0:	2100      	movne	r1, #0
 800ecd2:	d002      	beq.n	800ecda <HAL_DMA_Abort+0xd6>
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	f000 8105 	beq.w	800eee4 <HAL_DMA_Abort+0x2e0>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800ecda:	f022 021e 	bic.w	r2, r2, #30
 800ecde:	6022      	str	r2, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800ece0:	6962      	ldr	r2, [r4, #20]
 800ece2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ece6:	6162      	str	r2, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ece8:	4a72      	ldr	r2, [pc, #456]	; (800eeb4 <HAL_DMA_Abort+0x2b0>)
 800ecea:	4873      	ldr	r0, [pc, #460]	; (800eeb8 <HAL_DMA_Abort+0x2b4>)
 800ecec:	4f73      	ldr	r7, [pc, #460]	; (800eebc <HAL_DMA_Abort+0x2b8>)
 800ecee:	4284      	cmp	r4, r0
 800ecf0:	bf18      	it	ne
 800ecf2:	4294      	cmpne	r4, r2
 800ecf4:	f100 003c 	add.w	r0, r0, #60	; 0x3c
 800ecf8:	bf0c      	ite	eq
 800ecfa:	2201      	moveq	r2, #1
 800ecfc:	2200      	movne	r2, #0
 800ecfe:	42bc      	cmp	r4, r7
 800ed00:	bf08      	it	eq
 800ed02:	f042 0201 	orreq.w	r2, r2, #1
 800ed06:	3728      	adds	r7, #40	; 0x28
 800ed08:	4284      	cmp	r4, r0
 800ed0a:	bf08      	it	eq
 800ed0c:	f042 0201 	orreq.w	r2, r2, #1
 800ed10:	3028      	adds	r0, #40	; 0x28
 800ed12:	42bc      	cmp	r4, r7
 800ed14:	bf08      	it	eq
 800ed16:	f042 0201 	orreq.w	r2, r2, #1
 800ed1a:	3728      	adds	r7, #40	; 0x28
 800ed1c:	4284      	cmp	r4, r0
 800ed1e:	bf08      	it	eq
 800ed20:	f042 0201 	orreq.w	r2, r2, #1
 800ed24:	3028      	adds	r0, #40	; 0x28
 800ed26:	42bc      	cmp	r4, r7
 800ed28:	bf08      	it	eq
 800ed2a:	f042 0201 	orreq.w	r2, r2, #1
 800ed2e:	4284      	cmp	r4, r0
 800ed30:	bf08      	it	eq
 800ed32:	f042 0201 	orreq.w	r2, r2, #1
 800ed36:	430a      	orrs	r2, r1
 800ed38:	d100      	bne.n	800ed3c <HAL_DMA_Abort+0x138>
 800ed3a:	b123      	cbz	r3, 800ed46 <HAL_DMA_Abort+0x142>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800ed3c:	6e30      	ldr	r0, [r6, #96]	; 0x60
 800ed3e:	6802      	ldr	r2, [r0, #0]
 800ed40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ed44:	6002      	str	r2, [r0, #0]
    __HAL_DMA_DISABLE(hdma);
 800ed46:	6823      	ldr	r3, [r4, #0]
 800ed48:	f023 0301 	bic.w	r3, r3, #1
 800ed4c:	6023      	str	r3, [r4, #0]
 800ed4e:	e005      	b.n	800ed5c <HAL_DMA_Abort+0x158>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800ed50:	f7fe fe06 	bl	800d960 <HAL_GetTick>
 800ed54:	1b40      	subs	r0, r0, r5
 800ed56:	2805      	cmp	r0, #5
 800ed58:	f200 80ba 	bhi.w	800eed0 <HAL_DMA_Abort+0x2cc>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800ed5c:	6823      	ldr	r3, [r4, #0]
 800ed5e:	07db      	lsls	r3, r3, #31
 800ed60:	d4f6      	bmi.n	800ed50 <HAL_DMA_Abort+0x14c>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800ed62:	6831      	ldr	r1, [r6, #0]
 800ed64:	4a4f      	ldr	r2, [pc, #316]	; (800eea4 <HAL_DMA_Abort+0x2a0>)
 800ed66:	4b50      	ldr	r3, [pc, #320]	; (800eea8 <HAL_DMA_Abort+0x2a4>)
 800ed68:	4c50      	ldr	r4, [pc, #320]	; (800eeac <HAL_DMA_Abort+0x2a8>)
 800ed6a:	4299      	cmp	r1, r3
 800ed6c:	bf18      	it	ne
 800ed6e:	4291      	cmpne	r1, r2
 800ed70:	f103 0348 	add.w	r3, r3, #72	; 0x48
 800ed74:	484e      	ldr	r0, [pc, #312]	; (800eeb0 <HAL_DMA_Abort+0x2ac>)
 800ed76:	bf0c      	ite	eq
 800ed78:	2201      	moveq	r2, #1
 800ed7a:	2200      	movne	r2, #0
 800ed7c:	4d50      	ldr	r5, [pc, #320]	; (800eec0 <HAL_DMA_Abort+0x2bc>)
 800ed7e:	42a1      	cmp	r1, r4
 800ed80:	bf08      	it	eq
 800ed82:	f042 0201 	orreq.w	r2, r2, #1
 800ed86:	f504 7468 	add.w	r4, r4, #928	; 0x3a0
 800ed8a:	4f4e      	ldr	r7, [pc, #312]	; (800eec4 <HAL_DMA_Abort+0x2c0>)
 800ed8c:	4299      	cmp	r1, r3
 800ed8e:	bf08      	it	eq
 800ed90:	f042 0201 	orreq.w	r2, r2, #1
 800ed94:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 800ed98:	f8df c130 	ldr.w	ip, [pc, #304]	; 800eecc <HAL_DMA_Abort+0x2c8>
 800ed9c:	4281      	cmp	r1, r0
 800ed9e:	bf08      	it	eq
 800eda0:	f042 0201 	orreq.w	r2, r2, #1
 800eda4:	f500 706e 	add.w	r0, r0, #952	; 0x3b8
 800eda8:	42a9      	cmp	r1, r5
 800edaa:	bf08      	it	eq
 800edac:	f042 0201 	orreq.w	r2, r2, #1
 800edb0:	f505 757a 	add.w	r5, r5, #1000	; 0x3e8
 800edb4:	42a1      	cmp	r1, r4
 800edb6:	bf08      	it	eq
 800edb8:	f042 0201 	orreq.w	r2, r2, #1
 800edbc:	3478      	adds	r4, #120	; 0x78
 800edbe:	4299      	cmp	r1, r3
 800edc0:	bf14      	ite	ne
 800edc2:	4613      	movne	r3, r2
 800edc4:	f042 0301 	orreq.w	r3, r2, #1
 800edc8:	4a3f      	ldr	r2, [pc, #252]	; (800eec8 <HAL_DMA_Abort+0x2c4>)
 800edca:	42b9      	cmp	r1, r7
 800edcc:	bf08      	it	eq
 800edce:	f043 0301 	orreq.w	r3, r3, #1
 800edd2:	3778      	adds	r7, #120	; 0x78
 800edd4:	4281      	cmp	r1, r0
 800edd6:	bf08      	it	eq
 800edd8:	f043 0301 	orreq.w	r3, r3, #1
 800eddc:	6df0      	ldr	r0, [r6, #92]	; 0x5c
 800edde:	4561      	cmp	r1, ip
 800ede0:	bf08      	it	eq
 800ede2:	f043 0301 	orreq.w	r3, r3, #1
 800ede6:	f000 001f 	and.w	r0, r0, #31
 800edea:	42a1      	cmp	r1, r4
 800edec:	bf08      	it	eq
 800edee:	f043 0301 	orreq.w	r3, r3, #1
 800edf2:	f5a4 648c 	sub.w	r4, r4, #1120	; 0x460
 800edf6:	42a9      	cmp	r1, r5
 800edf8:	bf08      	it	eq
 800edfa:	f043 0301 	orreq.w	r3, r3, #1
 800edfe:	6db5      	ldr	r5, [r6, #88]	; 0x58
 800ee00:	42b9      	cmp	r1, r7
 800ee02:	bf08      	it	eq
 800ee04:	f043 0301 	orreq.w	r3, r3, #1
 800ee08:	42a1      	cmp	r1, r4
 800ee0a:	bf18      	it	ne
 800ee0c:	4291      	cmpne	r1, r2
 800ee0e:	bf0c      	ite	eq
 800ee10:	2201      	moveq	r2, #1
 800ee12:	2200      	movne	r2, #0
 800ee14:	d001      	beq.n	800ee1a <HAL_DMA_Abort+0x216>
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d068      	beq.n	800eeec <HAL_DMA_Abort+0x2e8>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800ee1a:	243f      	movs	r4, #63	; 0x3f
 800ee1c:	fa04 f000 	lsl.w	r0, r4, r0
 800ee20:	60a8      	str	r0, [r5, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ee22:	2a00      	cmp	r2, #0
 800ee24:	d129      	bne.n	800ee7a <HAL_DMA_Abort+0x276>
 800ee26:	4a24      	ldr	r2, [pc, #144]	; (800eeb8 <HAL_DMA_Abort+0x2b4>)
 800ee28:	4822      	ldr	r0, [pc, #136]	; (800eeb4 <HAL_DMA_Abort+0x2b0>)
 800ee2a:	4c24      	ldr	r4, [pc, #144]	; (800eebc <HAL_DMA_Abort+0x2b8>)
 800ee2c:	4281      	cmp	r1, r0
 800ee2e:	bf18      	it	ne
 800ee30:	4291      	cmpne	r1, r2
 800ee32:	f100 0028 	add.w	r0, r0, #40	; 0x28
 800ee36:	bf0c      	ite	eq
 800ee38:	2201      	moveq	r2, #1
 800ee3a:	2200      	movne	r2, #0
 800ee3c:	42a1      	cmp	r1, r4
 800ee3e:	bf08      	it	eq
 800ee40:	f042 0201 	orreq.w	r2, r2, #1
 800ee44:	3428      	adds	r4, #40	; 0x28
 800ee46:	4281      	cmp	r1, r0
 800ee48:	bf08      	it	eq
 800ee4a:	f042 0201 	orreq.w	r2, r2, #1
 800ee4e:	3028      	adds	r0, #40	; 0x28
 800ee50:	42a1      	cmp	r1, r4
 800ee52:	bf08      	it	eq
 800ee54:	f042 0201 	orreq.w	r2, r2, #1
 800ee58:	3428      	adds	r4, #40	; 0x28
 800ee5a:	4281      	cmp	r1, r0
 800ee5c:	bf08      	it	eq
 800ee5e:	f042 0201 	orreq.w	r2, r2, #1
 800ee62:	3028      	adds	r0, #40	; 0x28
 800ee64:	42a1      	cmp	r1, r4
 800ee66:	bf08      	it	eq
 800ee68:	f042 0201 	orreq.w	r2, r2, #1
 800ee6c:	4281      	cmp	r1, r0
 800ee6e:	bf14      	ite	ne
 800ee70:	4611      	movne	r1, r2
 800ee72:	f042 0101 	orreq.w	r1, r2, #1
 800ee76:	b901      	cbnz	r1, 800ee7a <HAL_DMA_Abort+0x276>
 800ee78:	b15b      	cbz	r3, 800ee92 <HAL_DMA_Abort+0x28e>
      if(hdma->DMAmuxRequestGen != 0U)
 800ee7a:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ee7c:	e9d6 2119 	ldrd	r2, r1, [r6, #100]	; 0x64
 800ee80:	6051      	str	r1, [r2, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 800ee82:	b133      	cbz	r3, 800ee92 <HAL_DMA_Abort+0x28e>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800ee84:	681a      	ldr	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ee86:	6f31      	ldr	r1, [r6, #112]	; 0x70
 800ee88:	6f70      	ldr	r0, [r6, #116]	; 0x74
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800ee8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ee8e:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ee90:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hdma);
 800ee92:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 800ee94:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 800ee96:	f886 0034 	strb.w	r0, [r6, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 800ee9a:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
}
 800ee9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800eea0:	2001      	movs	r0, #1
}
 800eea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eea4:	40020058 	.word	0x40020058
 800eea8:	40020040 	.word	0x40020040
 800eeac:	40020070 	.word	0x40020070
 800eeb0:	400200a0 	.word	0x400200a0
 800eeb4:	5802541c 	.word	0x5802541c
 800eeb8:	58025408 	.word	0x58025408
 800eebc:	58025430 	.word	0x58025430
 800eec0:	400200b8 	.word	0x400200b8
 800eec4:	40020440 	.word	0x40020440
 800eec8:	40020010 	.word	0x40020010
 800eecc:	40020470 	.word	0x40020470
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800eed0:	2120      	movs	r1, #32
        __HAL_UNLOCK(hdma);
 800eed2:	2200      	movs	r2, #0
        hdma->State = HAL_DMA_STATE_ERROR;
 800eed4:	2303      	movs	r3, #3
        return HAL_ERROR;
 800eed6:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800eed8:	6571      	str	r1, [r6, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 800eeda:	f886 2034 	strb.w	r2, [r6, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
 800eede:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
}
 800eee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800eee4:	f022 020e 	bic.w	r2, r2, #14
 800eee8:	6022      	str	r2, [r4, #0]
 800eeea:	e6fd      	b.n	800ece8 <HAL_DMA_Abort+0xe4>
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800eeec:	2201      	movs	r2, #1
 800eeee:	fa02 f000 	lsl.w	r0, r2, r0
 800eef2:	6068      	str	r0, [r5, #4]
 800eef4:	e797      	b.n	800ee26 <HAL_DMA_Abort+0x222>
 800eef6:	bf00      	nop

0800eef8 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 800eef8:	2800      	cmp	r0, #0
 800eefa:	d060      	beq.n	800efbe <HAL_DMA_Abort_IT+0xc6>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800eefc:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 800ef00:	2a02      	cmp	r2, #2
{
 800ef02:	b538      	push	{r3, r4, r5, lr}
 800ef04:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ef06:	d003      	beq.n	800ef10 <HAL_DMA_Abort_IT+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ef08:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 800ef0a:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ef0c:	655a      	str	r2, [r3, #84]	; 0x54
}
 800ef0e:	bd38      	pop	{r3, r4, r5, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800ef10:	6801      	ldr	r1, [r0, #0]
 800ef12:	4a57      	ldr	r2, [pc, #348]	; (800f070 <HAL_DMA_Abort_IT+0x178>)
 800ef14:	4291      	cmp	r1, r2
 800ef16:	d049      	beq.n	800efac <HAL_DMA_Abort_IT+0xb4>
 800ef18:	3218      	adds	r2, #24
 800ef1a:	4291      	cmp	r1, r2
 800ef1c:	d046      	beq.n	800efac <HAL_DMA_Abort_IT+0xb4>
 800ef1e:	3230      	adds	r2, #48	; 0x30
 800ef20:	4854      	ldr	r0, [pc, #336]	; (800f074 <HAL_DMA_Abort_IT+0x17c>)
 800ef22:	4c55      	ldr	r4, [pc, #340]	; (800f078 <HAL_DMA_Abort_IT+0x180>)
 800ef24:	4281      	cmp	r1, r0
 800ef26:	bf18      	it	ne
 800ef28:	4291      	cmpne	r1, r2
 800ef2a:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800ef2e:	4d53      	ldr	r5, [pc, #332]	; (800f07c <HAL_DMA_Abort_IT+0x184>)
 800ef30:	bf0c      	ite	eq
 800ef32:	2201      	moveq	r2, #1
 800ef34:	2200      	movne	r2, #0
 800ef36:	42a1      	cmp	r1, r4
 800ef38:	bf08      	it	eq
 800ef3a:	f042 0201 	orreq.w	r2, r2, #1
 800ef3e:	3448      	adds	r4, #72	; 0x48
 800ef40:	4281      	cmp	r1, r0
 800ef42:	bf08      	it	eq
 800ef44:	f042 0201 	orreq.w	r2, r2, #1
 800ef48:	f500 7062 	add.w	r0, r0, #904	; 0x388
 800ef4c:	42a9      	cmp	r1, r5
 800ef4e:	bf08      	it	eq
 800ef50:	f042 0201 	orreq.w	r2, r2, #1
 800ef54:	f505 7562 	add.w	r5, r5, #904	; 0x388
 800ef58:	42a1      	cmp	r1, r4
 800ef5a:	bf08      	it	eq
 800ef5c:	f042 0201 	orreq.w	r2, r2, #1
 800ef60:	f504 7462 	add.w	r4, r4, #904	; 0x388
 800ef64:	4281      	cmp	r1, r0
 800ef66:	bf08      	it	eq
 800ef68:	f042 0201 	orreq.w	r2, r2, #1
 800ef6c:	3048      	adds	r0, #72	; 0x48
 800ef6e:	42a9      	cmp	r1, r5
 800ef70:	bf08      	it	eq
 800ef72:	f042 0201 	orreq.w	r2, r2, #1
 800ef76:	3548      	adds	r5, #72	; 0x48
 800ef78:	42a1      	cmp	r1, r4
 800ef7a:	bf08      	it	eq
 800ef7c:	f042 0201 	orreq.w	r2, r2, #1
 800ef80:	3448      	adds	r4, #72	; 0x48
 800ef82:	4281      	cmp	r1, r0
 800ef84:	bf08      	it	eq
 800ef86:	f042 0201 	orreq.w	r2, r2, #1
 800ef8a:	3048      	adds	r0, #72	; 0x48
 800ef8c:	42a9      	cmp	r1, r5
 800ef8e:	bf08      	it	eq
 800ef90:	f042 0201 	orreq.w	r2, r2, #1
 800ef94:	42a1      	cmp	r1, r4
 800ef96:	bf08      	it	eq
 800ef98:	f042 0201 	orreq.w	r2, r2, #1
 800ef9c:	4281      	cmp	r1, r0
 800ef9e:	bf08      	it	eq
 800efa0:	f042 0201 	orreq.w	r2, r2, #1
 800efa4:	b912      	cbnz	r2, 800efac <HAL_DMA_Abort_IT+0xb4>
 800efa6:	4a36      	ldr	r2, [pc, #216]	; (800f080 <HAL_DMA_Abort_IT+0x188>)
 800efa8:	4291      	cmp	r1, r2
 800efaa:	d10a      	bne.n	800efc2 <HAL_DMA_Abort_IT+0xca>
      hdma->State = HAL_DMA_STATE_ABORT;
 800efac:	2204      	movs	r2, #4
  return HAL_OK;
 800efae:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 800efb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800efb4:	680b      	ldr	r3, [r1, #0]
 800efb6:	f023 0301 	bic.w	r3, r3, #1
 800efba:	600b      	str	r3, [r1, #0]
}
 800efbc:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800efbe:	2001      	movs	r0, #1
}
 800efc0:	4770      	bx	lr
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800efc2:	f104 54c0 	add.w	r4, r4, #402653184	; 0x18000000
 800efc6:	4a2f      	ldr	r2, [pc, #188]	; (800f084 <HAL_DMA_Abort_IT+0x18c>)
 800efc8:	482f      	ldr	r0, [pc, #188]	; (800f088 <HAL_DMA_Abort_IT+0x190>)
 800efca:	f504 449f 	add.w	r4, r4, #20352	; 0x4f80
 800efce:	4d2f      	ldr	r5, [pc, #188]	; (800f08c <HAL_DMA_Abort_IT+0x194>)
 800efd0:	42a1      	cmp	r1, r4
 800efd2:	bf18      	it	ne
 800efd4:	4291      	cmpne	r1, r2
 800efd6:	f104 0450 	add.w	r4, r4, #80	; 0x50
 800efda:	bf0c      	ite	eq
 800efdc:	2201      	moveq	r2, #1
 800efde:	2200      	movne	r2, #0
 800efe0:	4281      	cmp	r1, r0
 800efe2:	bf08      	it	eq
 800efe4:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800efe8:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800efea:	42a9      	cmp	r1, r5
 800efec:	bf08      	it	eq
 800efee:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800eff2:	f020 000e 	bic.w	r0, r0, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800eff6:	3528      	adds	r5, #40	; 0x28
 800eff8:	42a1      	cmp	r1, r4
 800effa:	bf08      	it	eq
 800effc:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800f000:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800f002:	3428      	adds	r4, #40	; 0x28
      __HAL_DMA_DISABLE(hdma);
 800f004:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800f006:	42a9      	cmp	r1, r5
 800f008:	bf08      	it	eq
 800f00a:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 800f00e:	f020 0001 	bic.w	r0, r0, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800f012:	42a1      	cmp	r1, r4
 800f014:	bf08      	it	eq
 800f016:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 800f01a:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800f01c:	b912      	cbnz	r2, 800f024 <HAL_DMA_Abort_IT+0x12c>
 800f01e:	4a1c      	ldr	r2, [pc, #112]	; (800f090 <HAL_DMA_Abort_IT+0x198>)
 800f020:	4291      	cmp	r1, r2
 800f022:	d117      	bne.n	800f054 <HAL_DMA_Abort_IT+0x15c>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800f024:	6e1c      	ldr	r4, [r3, #96]	; 0x60
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800f026:	2101      	movs	r1, #1
 800f028:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800f02a:	6822      	ldr	r2, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800f02c:	f000 001f 	and.w	r0, r0, #31
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800f030:	6d9d      	ldr	r5, [r3, #88]	; 0x58
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800f032:	f422 7280 	bic.w	r2, r2, #256	; 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800f036:	4081      	lsls	r1, r0
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800f038:	6e58      	ldr	r0, [r3, #100]	; 0x64
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800f03a:	6022      	str	r2, [r4, #0]
        if(hdma->DMAmuxRequestGen != 0U)
 800f03c:	e9d3 421a 	ldrd	r4, r2, [r3, #104]	; 0x68
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800f040:	6069      	str	r1, [r5, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800f042:	6044      	str	r4, [r0, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 800f044:	b132      	cbz	r2, 800f054 <HAL_DMA_Abort_IT+0x15c>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800f046:	6811      	ldr	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800f048:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800f04a:	6f5c      	ldr	r4, [r3, #116]	; 0x74
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800f04c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800f050:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800f052:	6044      	str	r4, [r0, #4]
      __HAL_UNLOCK(hdma);
 800f054:	2400      	movs	r4, #0
      hdma->State = HAL_DMA_STATE_READY;
 800f056:	2101      	movs	r1, #1
      if(hdma->XferAbortCallback != NULL)
 800f058:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hdma);
 800f05a:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800f05e:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 800f062:	b11a      	cbz	r2, 800f06c <HAL_DMA_Abort_IT+0x174>
 800f064:	4618      	mov	r0, r3
        hdma->XferAbortCallback(hdma);
 800f066:	4790      	blx	r2
  return HAL_OK;
 800f068:	4620      	mov	r0, r4
}
 800f06a:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800f06c:	4610      	mov	r0, r2
}
 800f06e:	bd38      	pop	{r3, r4, r5, pc}
 800f070:	40020010 	.word	0x40020010
 800f074:	40020040 	.word	0x40020040
 800f078:	40020070 	.word	0x40020070
 800f07c:	400200a0 	.word	0x400200a0
 800f080:	400204b8 	.word	0x400204b8
 800f084:	5802541c 	.word	0x5802541c
 800f088:	58025430 	.word	0x58025430
 800f08c:	58025444 	.word	0x58025444
 800f090:	58025494 	.word	0x58025494

0800f094 <HAL_DMA_IRQHandler>:
{
 800f094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t timeout = SystemCoreClock / 9600U;
 800f098:	49a4      	ldr	r1, [pc, #656]	; (800f32c <HAL_DMA_IRQHandler+0x298>)
{
 800f09a:	b085      	sub	sp, #20
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800f09c:	4ea4      	ldr	r6, [pc, #656]	; (800f330 <HAL_DMA_IRQHandler+0x29c>)
  __IO uint32_t count = 0U;
 800f09e:	2400      	movs	r4, #0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800f0a0:	6803      	ldr	r3, [r0, #0]
 800f0a2:	4aa4      	ldr	r2, [pc, #656]	; (800f334 <HAL_DMA_IRQHandler+0x2a0>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f0a4:	f8d0 8058 	ldr.w	r8, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 800f0a8:	6809      	ldr	r1, [r1, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800f0aa:	4293      	cmp	r3, r2
 800f0ac:	bf18      	it	ne
 800f0ae:	42b3      	cmpne	r3, r6
  __IO uint32_t count = 0U;
 800f0b0:	9403      	str	r4, [sp, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800f0b2:	9101      	str	r1, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800f0b4:	bf08      	it	eq
 800f0b6:	2601      	moveq	r6, #1
  tmpisr_dma  = regs_dma->ISR;
 800f0b8:	f8d8 5000 	ldr.w	r5, [r8]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800f0bc:	bf18      	it	ne
 800f0be:	2600      	movne	r6, #0
  tmpisr_bdma = regs_bdma->ISR;
 800f0c0:	f8d8 1000 	ldr.w	r1, [r8]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800f0c4:	d046      	beq.n	800f154 <HAL_DMA_IRQHandler+0xc0>
 800f0c6:	3218      	adds	r2, #24
 800f0c8:	4f9b      	ldr	r7, [pc, #620]	; (800f338 <HAL_DMA_IRQHandler+0x2a4>)
 800f0ca:	4c9c      	ldr	r4, [pc, #624]	; (800f33c <HAL_DMA_IRQHandler+0x2a8>)
 800f0cc:	42bb      	cmp	r3, r7
 800f0ce:	bf18      	it	ne
 800f0d0:	4293      	cmpne	r3, r2
 800f0d2:	f107 0730 	add.w	r7, r7, #48	; 0x30
 800f0d6:	bf0c      	ite	eq
 800f0d8:	2201      	moveq	r2, #1
 800f0da:	2200      	movne	r2, #0
 800f0dc:	42a3      	cmp	r3, r4
 800f0de:	bf08      	it	eq
 800f0e0:	f042 0201 	orreq.w	r2, r2, #1
 800f0e4:	3430      	adds	r4, #48	; 0x30
 800f0e6:	42bb      	cmp	r3, r7
 800f0e8:	bf08      	it	eq
 800f0ea:	f042 0201 	orreq.w	r2, r2, #1
 800f0ee:	3730      	adds	r7, #48	; 0x30
 800f0f0:	42a3      	cmp	r3, r4
 800f0f2:	bf08      	it	eq
 800f0f4:	f042 0201 	orreq.w	r2, r2, #1
 800f0f8:	f504 745c 	add.w	r4, r4, #880	; 0x370
 800f0fc:	42bb      	cmp	r3, r7
 800f0fe:	bf08      	it	eq
 800f100:	f042 0201 	orreq.w	r2, r2, #1
 800f104:	f507 775c 	add.w	r7, r7, #880	; 0x370
 800f108:	42a3      	cmp	r3, r4
 800f10a:	bf08      	it	eq
 800f10c:	f042 0201 	orreq.w	r2, r2, #1
 800f110:	3430      	adds	r4, #48	; 0x30
 800f112:	42bb      	cmp	r3, r7
 800f114:	bf08      	it	eq
 800f116:	f042 0201 	orreq.w	r2, r2, #1
 800f11a:	3730      	adds	r7, #48	; 0x30
 800f11c:	42a3      	cmp	r3, r4
 800f11e:	bf08      	it	eq
 800f120:	f042 0201 	orreq.w	r2, r2, #1
 800f124:	3430      	adds	r4, #48	; 0x30
 800f126:	42bb      	cmp	r3, r7
 800f128:	bf08      	it	eq
 800f12a:	f042 0201 	orreq.w	r2, r2, #1
 800f12e:	3730      	adds	r7, #48	; 0x30
 800f130:	42a3      	cmp	r3, r4
 800f132:	bf08      	it	eq
 800f134:	f042 0201 	orreq.w	r2, r2, #1
 800f138:	3430      	adds	r4, #48	; 0x30
 800f13a:	42bb      	cmp	r3, r7
 800f13c:	bf08      	it	eq
 800f13e:	f042 0201 	orreq.w	r2, r2, #1
 800f142:	42a3      	cmp	r3, r4
 800f144:	bf08      	it	eq
 800f146:	f042 0201 	orreq.w	r2, r2, #1
 800f14a:	b91a      	cbnz	r2, 800f154 <HAL_DMA_IRQHandler+0xc0>
 800f14c:	4a7c      	ldr	r2, [pc, #496]	; (800f340 <HAL_DMA_IRQHandler+0x2ac>)
 800f14e:	4293      	cmp	r3, r2
 800f150:	f040 81ef 	bne.w	800f532 <HAL_DMA_IRQHandler+0x49e>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800f154:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 800f156:	2208      	movs	r2, #8
 800f158:	f001 071f 	and.w	r7, r1, #31
 800f15c:	40ba      	lsls	r2, r7
 800f15e:	422a      	tst	r2, r5
 800f160:	f040 81d8 	bne.w	800f514 <HAL_DMA_IRQHandler+0x480>
 800f164:	4604      	mov	r4, r0
 800f166:	f04f 0c04 	mov.w	ip, #4
 800f16a:	2010      	movs	r0, #16
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800f16c:	fa25 f207 	lsr.w	r2, r5, r7
 800f170:	fa0c fc07 	lsl.w	ip, ip, r7
 800f174:	40b8      	lsls	r0, r7
 800f176:	07d2      	lsls	r2, r2, #31
 800f178:	ea05 090c 	and.w	r9, r5, ip
 800f17c:	ea05 0e00 	and.w	lr, r5, r0
 800f180:	d560      	bpl.n	800f244 <HAL_DMA_IRQHandler+0x1b0>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800f182:	4a70      	ldr	r2, [pc, #448]	; (800f344 <HAL_DMA_IRQHandler+0x2b0>)
 800f184:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 800f338 <HAL_DMA_IRQHandler+0x2a4>
 800f188:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 800f33c <HAL_DMA_IRQHandler+0x2a8>
 800f18c:	4293      	cmp	r3, r2
 800f18e:	bf18      	it	ne
 800f190:	455b      	cmpne	r3, fp
 800f192:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 800f196:	bf0c      	ite	eq
 800f198:	2201      	moveq	r2, #1
 800f19a:	2200      	movne	r2, #0
 800f19c:	4553      	cmp	r3, sl
 800f19e:	bf08      	it	eq
 800f1a0:	f042 0201 	orreq.w	r2, r2, #1
 800f1a4:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
 800f1a8:	455b      	cmp	r3, fp
 800f1aa:	bf08      	it	eq
 800f1ac:	f042 0201 	orreq.w	r2, r2, #1
 800f1b0:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 800f1b4:	4553      	cmp	r3, sl
 800f1b6:	bf08      	it	eq
 800f1b8:	f042 0201 	orreq.w	r2, r2, #1
 800f1bc:	f50a 7a5c 	add.w	sl, sl, #880	; 0x370
 800f1c0:	455b      	cmp	r3, fp
 800f1c2:	bf08      	it	eq
 800f1c4:	f042 0201 	orreq.w	r2, r2, #1
 800f1c8:	f50b 7b5c 	add.w	fp, fp, #880	; 0x370
 800f1cc:	4553      	cmp	r3, sl
 800f1ce:	bf08      	it	eq
 800f1d0:	f042 0201 	orreq.w	r2, r2, #1
 800f1d4:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
 800f1d8:	455b      	cmp	r3, fp
 800f1da:	bf08      	it	eq
 800f1dc:	f042 0201 	orreq.w	r2, r2, #1
 800f1e0:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 800f1e4:	4553      	cmp	r3, sl
 800f1e6:	bf08      	it	eq
 800f1e8:	f042 0201 	orreq.w	r2, r2, #1
 800f1ec:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
 800f1f0:	455b      	cmp	r3, fp
 800f1f2:	bf08      	it	eq
 800f1f4:	f042 0201 	orreq.w	r2, r2, #1
 800f1f8:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 800f1fc:	4553      	cmp	r3, sl
 800f1fe:	bf08      	it	eq
 800f200:	f042 0201 	orreq.w	r2, r2, #1
 800f204:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
 800f208:	455b      	cmp	r3, fp
 800f20a:	bf08      	it	eq
 800f20c:	f042 0201 	orreq.w	r2, r2, #1
 800f210:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 800f214:	4553      	cmp	r3, sl
 800f216:	bf08      	it	eq
 800f218:	f042 0201 	orreq.w	r2, r2, #1
 800f21c:	455b      	cmp	r3, fp
 800f21e:	bf08      	it	eq
 800f220:	f042 0201 	orreq.w	r2, r2, #1
 800f224:	b912      	cbnz	r2, 800f22c <HAL_DMA_IRQHandler+0x198>
 800f226:	2e00      	cmp	r6, #0
 800f228:	f000 8245 	beq.w	800f6b6 <HAL_DMA_IRQHandler+0x622>
 800f22c:	695a      	ldr	r2, [r3, #20]
 800f22e:	0612      	lsls	r2, r2, #24
 800f230:	d508      	bpl.n	800f244 <HAL_DMA_IRQHandler+0x1b0>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800f232:	2201      	movs	r2, #1
 800f234:	fa02 f707 	lsl.w	r7, r2, r7
 800f238:	f8c8 7008 	str.w	r7, [r8, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800f23c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800f23e:	f042 0202 	orr.w	r2, r2, #2
 800f242:	6562      	str	r2, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800f244:	f1b9 0f00 	cmp.w	r9, #0
 800f248:	d055      	beq.n	800f2f6 <HAL_DMA_IRQHandler+0x262>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800f24a:	2e00      	cmp	r6, #0
 800f24c:	d14a      	bne.n	800f2e4 <HAL_DMA_IRQHandler+0x250>
 800f24e:	4a3d      	ldr	r2, [pc, #244]	; (800f344 <HAL_DMA_IRQHandler+0x2b0>)
 800f250:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 800f338 <HAL_DMA_IRQHandler+0x2a4>
 800f254:	4f39      	ldr	r7, [pc, #228]	; (800f33c <HAL_DMA_IRQHandler+0x2a8>)
 800f256:	454b      	cmp	r3, r9
 800f258:	bf18      	it	ne
 800f25a:	4293      	cmpne	r3, r2
 800f25c:	f109 0930 	add.w	r9, r9, #48	; 0x30
 800f260:	bf0c      	ite	eq
 800f262:	2201      	moveq	r2, #1
 800f264:	2200      	movne	r2, #0
 800f266:	42bb      	cmp	r3, r7
 800f268:	bf08      	it	eq
 800f26a:	f042 0201 	orreq.w	r2, r2, #1
 800f26e:	3730      	adds	r7, #48	; 0x30
 800f270:	454b      	cmp	r3, r9
 800f272:	bf08      	it	eq
 800f274:	f042 0201 	orreq.w	r2, r2, #1
 800f278:	f109 0930 	add.w	r9, r9, #48	; 0x30
 800f27c:	42bb      	cmp	r3, r7
 800f27e:	bf08      	it	eq
 800f280:	f042 0201 	orreq.w	r2, r2, #1
 800f284:	f507 775c 	add.w	r7, r7, #880	; 0x370
 800f288:	454b      	cmp	r3, r9
 800f28a:	bf08      	it	eq
 800f28c:	f042 0201 	orreq.w	r2, r2, #1
 800f290:	f509 795c 	add.w	r9, r9, #880	; 0x370
 800f294:	42bb      	cmp	r3, r7
 800f296:	bf08      	it	eq
 800f298:	f042 0201 	orreq.w	r2, r2, #1
 800f29c:	3730      	adds	r7, #48	; 0x30
 800f29e:	454b      	cmp	r3, r9
 800f2a0:	bf08      	it	eq
 800f2a2:	f042 0201 	orreq.w	r2, r2, #1
 800f2a6:	f109 0930 	add.w	r9, r9, #48	; 0x30
 800f2aa:	42bb      	cmp	r3, r7
 800f2ac:	bf08      	it	eq
 800f2ae:	f042 0201 	orreq.w	r2, r2, #1
 800f2b2:	3730      	adds	r7, #48	; 0x30
 800f2b4:	454b      	cmp	r3, r9
 800f2b6:	bf08      	it	eq
 800f2b8:	f042 0201 	orreq.w	r2, r2, #1
 800f2bc:	f109 0930 	add.w	r9, r9, #48	; 0x30
 800f2c0:	42bb      	cmp	r3, r7
 800f2c2:	bf08      	it	eq
 800f2c4:	f042 0201 	orreq.w	r2, r2, #1
 800f2c8:	3730      	adds	r7, #48	; 0x30
 800f2ca:	454b      	cmp	r3, r9
 800f2cc:	bf08      	it	eq
 800f2ce:	f042 0201 	orreq.w	r2, r2, #1
 800f2d2:	42bb      	cmp	r3, r7
 800f2d4:	bf08      	it	eq
 800f2d6:	f042 0201 	orreq.w	r2, r2, #1
 800f2da:	b91a      	cbnz	r2, 800f2e4 <HAL_DMA_IRQHandler+0x250>
 800f2dc:	4a18      	ldr	r2, [pc, #96]	; (800f340 <HAL_DMA_IRQHandler+0x2ac>)
 800f2de:	4293      	cmp	r3, r2
 800f2e0:	f040 81b4 	bne.w	800f64c <HAL_DMA_IRQHandler+0x5b8>
 800f2e4:	681a      	ldr	r2, [r3, #0]
 800f2e6:	0792      	lsls	r2, r2, #30
 800f2e8:	d505      	bpl.n	800f2f6 <HAL_DMA_IRQHandler+0x262>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800f2ea:	f8c8 c008 	str.w	ip, [r8, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800f2ee:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800f2f0:	f042 0204 	orr.w	r2, r2, #4
 800f2f4:	6562      	str	r2, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800f2f6:	f1be 0f00 	cmp.w	lr, #0
 800f2fa:	d06d      	beq.n	800f3d8 <HAL_DMA_IRQHandler+0x344>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800f2fc:	2e00      	cmp	r6, #0
 800f2fe:	d155      	bne.n	800f3ac <HAL_DMA_IRQHandler+0x318>
 800f300:	4a10      	ldr	r2, [pc, #64]	; (800f344 <HAL_DMA_IRQHandler+0x2b0>)
 800f302:	4f0d      	ldr	r7, [pc, #52]	; (800f338 <HAL_DMA_IRQHandler+0x2a4>)
 800f304:	4e0d      	ldr	r6, [pc, #52]	; (800f33c <HAL_DMA_IRQHandler+0x2a8>)
 800f306:	42bb      	cmp	r3, r7
 800f308:	bf18      	it	ne
 800f30a:	4293      	cmpne	r3, r2
 800f30c:	f107 0730 	add.w	r7, r7, #48	; 0x30
 800f310:	bf0c      	ite	eq
 800f312:	2201      	moveq	r2, #1
 800f314:	2200      	movne	r2, #0
 800f316:	42b3      	cmp	r3, r6
 800f318:	bf08      	it	eq
 800f31a:	f042 0201 	orreq.w	r2, r2, #1
 800f31e:	3630      	adds	r6, #48	; 0x30
 800f320:	42bb      	cmp	r3, r7
 800f322:	bf08      	it	eq
 800f324:	f042 0201 	orreq.w	r2, r2, #1
 800f328:	3730      	adds	r7, #48	; 0x30
 800f32a:	e00d      	b.n	800f348 <HAL_DMA_IRQHandler+0x2b4>
 800f32c:	24007290 	.word	0x24007290
 800f330:	40020010 	.word	0x40020010
 800f334:	40020028 	.word	0x40020028
 800f338:	40020058 	.word	0x40020058
 800f33c:	40020070 	.word	0x40020070
 800f340:	400204b8 	.word	0x400204b8
 800f344:	40020040 	.word	0x40020040
 800f348:	42b3      	cmp	r3, r6
 800f34a:	bf08      	it	eq
 800f34c:	f042 0201 	orreq.w	r2, r2, #1
 800f350:	f506 765c 	add.w	r6, r6, #880	; 0x370
 800f354:	42bb      	cmp	r3, r7
 800f356:	bf08      	it	eq
 800f358:	f042 0201 	orreq.w	r2, r2, #1
 800f35c:	f507 775c 	add.w	r7, r7, #880	; 0x370
 800f360:	42b3      	cmp	r3, r6
 800f362:	bf08      	it	eq
 800f364:	f042 0201 	orreq.w	r2, r2, #1
 800f368:	3630      	adds	r6, #48	; 0x30
 800f36a:	42bb      	cmp	r3, r7
 800f36c:	bf08      	it	eq
 800f36e:	f042 0201 	orreq.w	r2, r2, #1
 800f372:	3730      	adds	r7, #48	; 0x30
 800f374:	42b3      	cmp	r3, r6
 800f376:	bf08      	it	eq
 800f378:	f042 0201 	orreq.w	r2, r2, #1
 800f37c:	3630      	adds	r6, #48	; 0x30
 800f37e:	42bb      	cmp	r3, r7
 800f380:	bf08      	it	eq
 800f382:	f042 0201 	orreq.w	r2, r2, #1
 800f386:	3730      	adds	r7, #48	; 0x30
 800f388:	42b3      	cmp	r3, r6
 800f38a:	bf08      	it	eq
 800f38c:	f042 0201 	orreq.w	r2, r2, #1
 800f390:	3630      	adds	r6, #48	; 0x30
 800f392:	42bb      	cmp	r3, r7
 800f394:	bf08      	it	eq
 800f396:	f042 0201 	orreq.w	r2, r2, #1
 800f39a:	42b3      	cmp	r3, r6
 800f39c:	bf08      	it	eq
 800f39e:	f042 0201 	orreq.w	r2, r2, #1
 800f3a2:	b91a      	cbnz	r2, 800f3ac <HAL_DMA_IRQHandler+0x318>
 800f3a4:	4aa0      	ldr	r2, [pc, #640]	; (800f628 <HAL_DMA_IRQHandler+0x594>)
 800f3a6:	4293      	cmp	r3, r2
 800f3a8:	f040 813a 	bne.w	800f620 <HAL_DMA_IRQHandler+0x58c>
 800f3ac:	681a      	ldr	r2, [r3, #0]
 800f3ae:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 800f3b2:	b18a      	cbz	r2, 800f3d8 <HAL_DMA_IRQHandler+0x344>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800f3b4:	f8c8 0008 	str.w	r0, [r8, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800f3b8:	681a      	ldr	r2, [r3, #0]
 800f3ba:	0357      	lsls	r7, r2, #13
 800f3bc:	f100 80f7 	bmi.w	800f5ae <HAL_DMA_IRQHandler+0x51a>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800f3c0:	681a      	ldr	r2, [r3, #0]
 800f3c2:	05d0      	lsls	r0, r2, #23
 800f3c4:	d403      	bmi.n	800f3ce <HAL_DMA_IRQHandler+0x33a>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800f3c6:	681a      	ldr	r2, [r3, #0]
 800f3c8:	f022 0208 	bic.w	r2, r2, #8
 800f3cc:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 800f3ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f3d0:	b113      	cbz	r3, 800f3d8 <HAL_DMA_IRQHandler+0x344>
            hdma->XferHalfCpltCallback(hdma);
 800f3d2:	4620      	mov	r0, r4
 800f3d4:	4798      	blx	r3
 800f3d6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800f3d8:	f001 011f 	and.w	r1, r1, #31
 800f3dc:	2220      	movs	r2, #32
 800f3de:	408a      	lsls	r2, r1
 800f3e0:	422a      	tst	r2, r5
 800f3e2:	d069      	beq.n	800f4b8 <HAL_DMA_IRQHandler+0x424>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800f3e4:	6820      	ldr	r0, [r4, #0]
 800f3e6:	4b91      	ldr	r3, [pc, #580]	; (800f62c <HAL_DMA_IRQHandler+0x598>)
 800f3e8:	4e91      	ldr	r6, [pc, #580]	; (800f630 <HAL_DMA_IRQHandler+0x59c>)
 800f3ea:	4d92      	ldr	r5, [pc, #584]	; (800f634 <HAL_DMA_IRQHandler+0x5a0>)
 800f3ec:	42b0      	cmp	r0, r6
 800f3ee:	bf18      	it	ne
 800f3f0:	4298      	cmpne	r0, r3
 800f3f2:	f106 0630 	add.w	r6, r6, #48	; 0x30
 800f3f6:	bf0c      	ite	eq
 800f3f8:	2301      	moveq	r3, #1
 800f3fa:	2300      	movne	r3, #0
 800f3fc:	42a8      	cmp	r0, r5
 800f3fe:	bf08      	it	eq
 800f400:	f043 0301 	orreq.w	r3, r3, #1
 800f404:	3530      	adds	r5, #48	; 0x30
 800f406:	42b0      	cmp	r0, r6
 800f408:	bf08      	it	eq
 800f40a:	f043 0301 	orreq.w	r3, r3, #1
 800f40e:	3630      	adds	r6, #48	; 0x30
 800f410:	42a8      	cmp	r0, r5
 800f412:	bf08      	it	eq
 800f414:	f043 0301 	orreq.w	r3, r3, #1
 800f418:	3530      	adds	r5, #48	; 0x30
 800f41a:	42b0      	cmp	r0, r6
 800f41c:	bf08      	it	eq
 800f41e:	f043 0301 	orreq.w	r3, r3, #1
 800f422:	3630      	adds	r6, #48	; 0x30
 800f424:	42a8      	cmp	r0, r5
 800f426:	bf08      	it	eq
 800f428:	f043 0301 	orreq.w	r3, r3, #1
 800f42c:	f505 755c 	add.w	r5, r5, #880	; 0x370
 800f430:	42b0      	cmp	r0, r6
 800f432:	bf08      	it	eq
 800f434:	f043 0301 	orreq.w	r3, r3, #1
 800f438:	f506 765c 	add.w	r6, r6, #880	; 0x370
 800f43c:	42a8      	cmp	r0, r5
 800f43e:	bf08      	it	eq
 800f440:	f043 0301 	orreq.w	r3, r3, #1
 800f444:	3530      	adds	r5, #48	; 0x30
 800f446:	42b0      	cmp	r0, r6
 800f448:	bf08      	it	eq
 800f44a:	f043 0301 	orreq.w	r3, r3, #1
 800f44e:	3630      	adds	r6, #48	; 0x30
 800f450:	42a8      	cmp	r0, r5
 800f452:	bf08      	it	eq
 800f454:	f043 0301 	orreq.w	r3, r3, #1
 800f458:	3530      	adds	r5, #48	; 0x30
 800f45a:	42b0      	cmp	r0, r6
 800f45c:	bf08      	it	eq
 800f45e:	f043 0301 	orreq.w	r3, r3, #1
 800f462:	3630      	adds	r6, #48	; 0x30
 800f464:	42a8      	cmp	r0, r5
 800f466:	bf08      	it	eq
 800f468:	f043 0301 	orreq.w	r3, r3, #1
 800f46c:	3530      	adds	r5, #48	; 0x30
 800f46e:	42b0      	cmp	r0, r6
 800f470:	bf08      	it	eq
 800f472:	f043 0301 	orreq.w	r3, r3, #1
 800f476:	42a8      	cmp	r0, r5
 800f478:	bf08      	it	eq
 800f47a:	f043 0301 	orreq.w	r3, r3, #1
 800f47e:	b91b      	cbnz	r3, 800f488 <HAL_DMA_IRQHandler+0x3f4>
 800f480:	4b69      	ldr	r3, [pc, #420]	; (800f628 <HAL_DMA_IRQHandler+0x594>)
 800f482:	4298      	cmp	r0, r3
 800f484:	f040 8121 	bne.w	800f6ca <HAL_DMA_IRQHandler+0x636>
 800f488:	6803      	ldr	r3, [r0, #0]
 800f48a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800f48e:	b19b      	cbz	r3, 800f4b8 <HAL_DMA_IRQHandler+0x424>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800f490:	f8c8 2008 	str.w	r2, [r8, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800f494:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800f498:	2b04      	cmp	r3, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800f49a:	6803      	ldr	r3, [r0, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800f49c:	f000 8090 	beq.w	800f5c0 <HAL_DMA_IRQHandler+0x52c>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800f4a0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800f4a4:	6803      	ldr	r3, [r0, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800f4a6:	f000 80a8 	beq.w	800f5fa <HAL_DMA_IRQHandler+0x566>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800f4aa:	0319      	lsls	r1, r3, #12
 800f4ac:	f140 80b3 	bpl.w	800f616 <HAL_DMA_IRQHandler+0x582>
          if(hdma->XferCpltCallback != NULL)
 800f4b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f4b2:	b10b      	cbz	r3, 800f4b8 <HAL_DMA_IRQHandler+0x424>
            hdma->XferCpltCallback(hdma);
 800f4b4:	4620      	mov	r0, r4
 800f4b6:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800f4b8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d074      	beq.n	800f5a8 <HAL_DMA_IRQHandler+0x514>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800f4be:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800f4c0:	07da      	lsls	r2, r3, #31
 800f4c2:	d51f      	bpl.n	800f504 <HAL_DMA_IRQHandler+0x470>
        __HAL_DMA_DISABLE(hdma);
 800f4c4:	6822      	ldr	r2, [r4, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
 800f4c6:	2004      	movs	r0, #4
  uint32_t timeout = SystemCoreClock / 9600U;
 800f4c8:	495b      	ldr	r1, [pc, #364]	; (800f638 <HAL_DMA_IRQHandler+0x5a4>)
        hdma->State = HAL_DMA_STATE_ABORT;
 800f4ca:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 800f4ce:	6813      	ldr	r3, [r2, #0]
 800f4d0:	f023 0301 	bic.w	r3, r3, #1
 800f4d4:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800f4d6:	9b01      	ldr	r3, [sp, #4]
 800f4d8:	fba1 3103 	umull	r3, r1, r1, r3
 800f4dc:	0a89      	lsrs	r1, r1, #10
 800f4de:	e002      	b.n	800f4e6 <HAL_DMA_IRQHandler+0x452>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800f4e0:	6813      	ldr	r3, [r2, #0]
 800f4e2:	07db      	lsls	r3, r3, #31
 800f4e4:	d504      	bpl.n	800f4f0 <HAL_DMA_IRQHandler+0x45c>
          if (++count > timeout)
 800f4e6:	9b03      	ldr	r3, [sp, #12]
 800f4e8:	3301      	adds	r3, #1
 800f4ea:	428b      	cmp	r3, r1
 800f4ec:	9303      	str	r3, [sp, #12]
 800f4ee:	d9f7      	bls.n	800f4e0 <HAL_DMA_IRQHandler+0x44c>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800f4f0:	6813      	ldr	r3, [r2, #0]
        __HAL_UNLOCK(hdma);
 800f4f2:	2200      	movs	r2, #0
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800f4f4:	07df      	lsls	r7, r3, #31
        __HAL_UNLOCK(hdma);
 800f4f6:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_ERROR;
 800f4fa:	bf4c      	ite	mi
 800f4fc:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 800f4fe:	2301      	movpl	r3, #1
 800f500:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      if(hdma->XferErrorCallback != NULL)
 800f504:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800f506:	2b00      	cmp	r3, #0
 800f508:	d04e      	beq.n	800f5a8 <HAL_DMA_IRQHandler+0x514>
        hdma->XferErrorCallback(hdma);
 800f50a:	4620      	mov	r0, r4
}
 800f50c:	b005      	add	sp, #20
 800f50e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        hdma->XferErrorCallback(hdma);
 800f512:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800f514:	681c      	ldr	r4, [r3, #0]
 800f516:	0764      	lsls	r4, r4, #29
 800f518:	f57f ae24 	bpl.w	800f164 <HAL_DMA_IRQHandler+0xd0>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800f51c:	681c      	ldr	r4, [r3, #0]
 800f51e:	f024 0404 	bic.w	r4, r4, #4
 800f522:	601c      	str	r4, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800f524:	f8c8 2008 	str.w	r2, [r8, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800f528:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800f52a:	f042 0201 	orr.w	r2, r2, #1
 800f52e:	6542      	str	r2, [r0, #84]	; 0x54
 800f530:	e618      	b.n	800f164 <HAL_DMA_IRQHandler+0xd0>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800f532:	4a42      	ldr	r2, [pc, #264]	; (800f63c <HAL_DMA_IRQHandler+0x5a8>)
 800f534:	4d42      	ldr	r5, [pc, #264]	; (800f640 <HAL_DMA_IRQHandler+0x5ac>)
 800f536:	4c43      	ldr	r4, [pc, #268]	; (800f644 <HAL_DMA_IRQHandler+0x5b0>)
 800f538:	42ab      	cmp	r3, r5
 800f53a:	bf18      	it	ne
 800f53c:	4293      	cmpne	r3, r2
 800f53e:	f105 0528 	add.w	r5, r5, #40	; 0x28
 800f542:	bf0c      	ite	eq
 800f544:	2201      	moveq	r2, #1
 800f546:	2200      	movne	r2, #0
 800f548:	42a3      	cmp	r3, r4
 800f54a:	bf08      	it	eq
 800f54c:	f042 0201 	orreq.w	r2, r2, #1
 800f550:	3428      	adds	r4, #40	; 0x28
 800f552:	42ab      	cmp	r3, r5
 800f554:	bf08      	it	eq
 800f556:	f042 0201 	orreq.w	r2, r2, #1
 800f55a:	3528      	adds	r5, #40	; 0x28
 800f55c:	42a3      	cmp	r3, r4
 800f55e:	bf08      	it	eq
 800f560:	f042 0201 	orreq.w	r2, r2, #1
 800f564:	3428      	adds	r4, #40	; 0x28
 800f566:	42ab      	cmp	r3, r5
 800f568:	bf08      	it	eq
 800f56a:	f042 0201 	orreq.w	r2, r2, #1
 800f56e:	42a3      	cmp	r3, r4
 800f570:	bf08      	it	eq
 800f572:	f042 0201 	orreq.w	r2, r2, #1
 800f576:	b912      	cbnz	r2, 800f57e <HAL_DMA_IRQHandler+0x4ea>
 800f578:	4a33      	ldr	r2, [pc, #204]	; (800f648 <HAL_DMA_IRQHandler+0x5b4>)
 800f57a:	4293      	cmp	r3, r2
 800f57c:	d114      	bne.n	800f5a8 <HAL_DMA_IRQHandler+0x514>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800f57e:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 800f580:	2504      	movs	r5, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800f582:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800f584:	f004 041f 	and.w	r4, r4, #31
 800f588:	40a5      	lsls	r5, r4
 800f58a:	420d      	tst	r5, r1
 800f58c:	d068      	beq.n	800f660 <HAL_DMA_IRQHandler+0x5cc>
 800f58e:	0756      	lsls	r6, r2, #29
 800f590:	d566      	bpl.n	800f660 <HAL_DMA_IRQHandler+0x5cc>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800f592:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800f594:	f8c8 5004 	str.w	r5, [r8, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800f598:	f140 80ac 	bpl.w	800f6f4 <HAL_DMA_IRQHandler+0x660>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800f59c:	03d3      	lsls	r3, r2, #15
 800f59e:	f100 80af 	bmi.w	800f700 <HAL_DMA_IRQHandler+0x66c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800f5a2:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d1b1      	bne.n	800f50c <HAL_DMA_IRQHandler+0x478>
}
 800f5a8:	b005      	add	sp, #20
 800f5aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	031e      	lsls	r6, r3, #12
 800f5b2:	f57f af0c 	bpl.w	800f3ce <HAL_DMA_IRQHandler+0x33a>
            if(hdma->XferM1HalfCpltCallback != NULL)
 800f5b6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	f47f af0a 	bne.w	800f3d2 <HAL_DMA_IRQHandler+0x33e>
 800f5be:	e70b      	b.n	800f3d8 <HAL_DMA_IRQHandler+0x344>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800f5c0:	f023 0316 	bic.w	r3, r3, #22
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f5c4:	6c22      	ldr	r2, [r4, #64]	; 0x40
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800f5c6:	6003      	str	r3, [r0, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800f5c8:	6943      	ldr	r3, [r0, #20]
 800f5ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f5ce:	6143      	str	r3, [r0, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f5d0:	2a00      	cmp	r2, #0
 800f5d2:	d041      	beq.n	800f658 <HAL_DMA_IRQHandler+0x5c4>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800f5d4:	6803      	ldr	r3, [r0, #0]
 800f5d6:	f023 0308 	bic.w	r3, r3, #8
 800f5da:	6003      	str	r3, [r0, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800f5dc:	233f      	movs	r3, #63	; 0x3f
          __HAL_UNLOCK(hdma);
 800f5de:	2000      	movs	r0, #0
          hdma->State = HAL_DMA_STATE_READY;
 800f5e0:	2201      	movs	r2, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800f5e2:	fa03 f101 	lsl.w	r1, r3, r1
          if(hdma->XferAbortCallback != NULL)
 800f5e6:	6d23      	ldr	r3, [r4, #80]	; 0x50
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800f5e8:	f8c8 1008 	str.w	r1, [r8, #8]
          __HAL_UNLOCK(hdma);
 800f5ec:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800f5f0:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d188      	bne.n	800f50a <HAL_DMA_IRQHandler+0x476>
 800f5f8:	e7d6      	b.n	800f5a8 <HAL_DMA_IRQHandler+0x514>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800f5fa:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 800f5fe:	f47f af57 	bne.w	800f4b0 <HAL_DMA_IRQHandler+0x41c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800f602:	6802      	ldr	r2, [r0, #0]
            hdma->State = HAL_DMA_STATE_READY;
 800f604:	2101      	movs	r1, #1
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800f606:	f022 0210 	bic.w	r2, r2, #16
 800f60a:	6002      	str	r2, [r0, #0]
            __HAL_UNLOCK(hdma);
 800f60c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 800f610:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
 800f614:	e74c      	b.n	800f4b0 <HAL_DMA_IRQHandler+0x41c>
            if(hdma->XferM1CpltCallback != NULL)
 800f616:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f618:	2b00      	cmp	r3, #0
 800f61a:	f47f af4b 	bne.w	800f4b4 <HAL_DMA_IRQHandler+0x420>
 800f61e:	e74b      	b.n	800f4b8 <HAL_DMA_IRQHandler+0x424>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800f620:	681a      	ldr	r2, [r3, #0]
 800f622:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800f626:	e6c4      	b.n	800f3b2 <HAL_DMA_IRQHandler+0x31e>
 800f628:	400204b8 	.word	0x400204b8
 800f62c:	40020010 	.word	0x40020010
 800f630:	40020028 	.word	0x40020028
 800f634:	40020040 	.word	0x40020040
 800f638:	1b4e81b5 	.word	0x1b4e81b5
 800f63c:	58025408 	.word	0x58025408
 800f640:	5802541c 	.word	0x5802541c
 800f644:	58025430 	.word	0x58025430
 800f648:	58025494 	.word	0x58025494
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800f64c:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800f64e:	f1be 0f00 	cmp.w	lr, #0
 800f652:	f43f aec1 	beq.w	800f3d8 <HAL_DMA_IRQHandler+0x344>
 800f656:	e653      	b.n	800f300 <HAL_DMA_IRQHandler+0x26c>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f658:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d1ba      	bne.n	800f5d4 <HAL_DMA_IRQHandler+0x540>
 800f65e:	e7bd      	b.n	800f5dc <HAL_DMA_IRQHandler+0x548>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800f660:	2502      	movs	r5, #2
 800f662:	40a5      	lsls	r5, r4
 800f664:	420d      	tst	r5, r1
 800f666:	d00c      	beq.n	800f682 <HAL_DMA_IRQHandler+0x5ee>
 800f668:	0796      	lsls	r6, r2, #30
 800f66a:	d50a      	bpl.n	800f682 <HAL_DMA_IRQHandler+0x5ee>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800f66c:	0414      	lsls	r4, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800f66e:	f8c8 5004 	str.w	r5, [r8, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800f672:	d52e      	bpl.n	800f6d2 <HAL_DMA_IRQHandler+0x63e>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800f674:	03d1      	lsls	r1, r2, #15
 800f676:	d438      	bmi.n	800f6ea <HAL_DMA_IRQHandler+0x656>
          if(hdma->XferM1CpltCallback != NULL)
 800f678:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	f47f af46 	bne.w	800f50c <HAL_DMA_IRQHandler+0x478>
 800f680:	e792      	b.n	800f5a8 <HAL_DMA_IRQHandler+0x514>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800f682:	2508      	movs	r5, #8
 800f684:	40a5      	lsls	r5, r4
 800f686:	420d      	tst	r5, r1
 800f688:	d08e      	beq.n	800f5a8 <HAL_DMA_IRQHandler+0x514>
 800f68a:	0712      	lsls	r2, r2, #28
 800f68c:	d58c      	bpl.n	800f5a8 <HAL_DMA_IRQHandler+0x514>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f68e:	6819      	ldr	r1, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800f690:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 800f692:	2500      	movs	r5, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f694:	f021 010e 	bic.w	r1, r1, #14
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800f698:	fa02 f404 	lsl.w	r4, r2, r4
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f69c:	6019      	str	r1, [r3, #0]
      if (hdma->XferErrorCallback != NULL)
 800f69e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800f6a0:	f8c8 4004 	str.w	r4, [r8, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800f6a4:	6542      	str	r2, [r0, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 800f6a6:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800f6aa:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	f47f af2c 	bne.w	800f50c <HAL_DMA_IRQHandler+0x478>
 800f6b4:	e778      	b.n	800f5a8 <HAL_DMA_IRQHandler+0x514>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800f6b6:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800f6b8:	f1b9 0f00 	cmp.w	r9, #0
 800f6bc:	f47f adc7 	bne.w	800f24e <HAL_DMA_IRQHandler+0x1ba>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800f6c0:	f1be 0f00 	cmp.w	lr, #0
 800f6c4:	f43f ae88 	beq.w	800f3d8 <HAL_DMA_IRQHandler+0x344>
 800f6c8:	e618      	b.n	800f2fc <HAL_DMA_IRQHandler+0x268>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800f6ca:	6803      	ldr	r3, [r0, #0]
 800f6cc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800f6d0:	e6dd      	b.n	800f48e <HAL_DMA_IRQHandler+0x3fa>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800f6d2:	f012 0220 	ands.w	r2, r2, #32
 800f6d6:	d108      	bne.n	800f6ea <HAL_DMA_IRQHandler+0x656>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800f6d8:	6819      	ldr	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800f6da:	2401      	movs	r4, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800f6dc:	f021 010a 	bic.w	r1, r1, #10
 800f6e0:	6019      	str	r1, [r3, #0]
          __HAL_UNLOCK(hdma);
 800f6e2:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800f6e6:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 800f6ea:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	f47f af0d 	bne.w	800f50c <HAL_DMA_IRQHandler+0x478>
 800f6f2:	e759      	b.n	800f5a8 <HAL_DMA_IRQHandler+0x514>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800f6f4:	0697      	lsls	r7, r2, #26
 800f6f6:	d403      	bmi.n	800f700 <HAL_DMA_IRQHandler+0x66c>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800f6f8:	681a      	ldr	r2, [r3, #0]
 800f6fa:	f022 0204 	bic.w	r2, r2, #4
 800f6fe:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 800f700:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f702:	2b00      	cmp	r3, #0
 800f704:	f47f af02 	bne.w	800f50c <HAL_DMA_IRQHandler+0x478>
 800f708:	e74e      	b.n	800f5a8 <HAL_DMA_IRQHandler+0x514>
 800f70a:	bf00      	nop

0800f70c <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 800f70c:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 800f70e:	4770      	bx	lr

0800f710 <HAL_DMA2D_MspInit>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 800f710:	4770      	bx	lr
 800f712:	bf00      	nop

0800f714 <HAL_DMA2D_Init>:
  if(hdma2d == NULL)
 800f714:	2800      	cmp	r0, #0
 800f716:	d036      	beq.n	800f786 <HAL_DMA2D_Init+0x72>
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800f718:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
{
 800f71c:	b570      	push	{r4, r5, r6, lr}
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800f71e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800f722:	4604      	mov	r4, r0
 800f724:	b353      	cbz	r3, 800f77c <HAL_DMA2D_Init+0x68>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800f726:	6823      	ldr	r3, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800f728:	2202      	movs	r2, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800f72a:	69e0      	ldr	r0, [r4, #28]
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800f72c:	2500      	movs	r5, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800f72e:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800f732:	4916      	ldr	r1, [pc, #88]	; (800f78c <HAL_DMA2D_Init+0x78>)
 800f734:	681e      	ldr	r6, [r3, #0]
 800f736:	6862      	ldr	r2, [r4, #4]
 800f738:	4031      	ands	r1, r6
 800f73a:	4302      	orrs	r2, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 800f73c:	4814      	ldr	r0, [pc, #80]	; (800f790 <HAL_DMA2D_Init+0x7c>)
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800f73e:	4311      	orrs	r1, r2
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 800f740:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800f742:	6019      	str	r1, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 800f744:	69a1      	ldr	r1, [r4, #24]
 800f746:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800f748:	430a      	orrs	r2, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800f74a:	4912      	ldr	r1, [pc, #72]	; (800f794 <HAL_DMA2D_Init+0x80>)
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 800f74c:	4030      	ands	r0, r6
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800f74e:	2601      	movs	r6, #1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 800f750:	4302      	orrs	r2, r0
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800f752:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 800f754:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800f756:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f758:	4011      	ands	r1, r2
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 800f75a:	6962      	ldr	r2, [r4, #20]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800f75c:	4301      	orrs	r1, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 800f75e:	0552      	lsls	r2, r2, #21
 800f760:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800f762:	6419      	str	r1, [r3, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 800f764:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800f766:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
  return HAL_OK;
 800f76a:	4628      	mov	r0, r5
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 800f76c:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 800f770:	430a      	orrs	r2, r1
 800f772:	635a      	str	r2, [r3, #52]	; 0x34
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800f774:	6665      	str	r5, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800f776:	f884 6061 	strb.w	r6, [r4, #97]	; 0x61
}
 800f77a:	bd70      	pop	{r4, r5, r6, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 800f77c:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    HAL_DMA2D_MspInit(hdma2d);
 800f780:	f7ff ffc6 	bl	800f710 <HAL_DMA2D_MspInit>
 800f784:	e7cf      	b.n	800f726 <HAL_DMA2D_Init+0x12>
     return HAL_ERROR;
 800f786:	2001      	movs	r0, #1
}
 800f788:	4770      	bx	lr
 800f78a:	bf00      	nop
 800f78c:	fff8ffbf 	.word	0xfff8ffbf
 800f790:	fffffef8 	.word	0xfffffef8
 800f794:	ffff0000 	.word	0xffff0000

0800f798 <HAL_DMA2D_MspDeInit>:
 800f798:	4770      	bx	lr
 800f79a:	bf00      	nop

0800f79c <HAL_DMA2D_DeInit>:
  if(hdma2d == NULL)
 800f79c:	b318      	cbz	r0, 800f7e6 <HAL_DMA2D_DeInit+0x4a>
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 800f79e:	4b40      	ldr	r3, [pc, #256]	; (800f8a0 <HAL_DMA2D_DeInit+0x104>)
 800f7a0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
{
 800f7a4:	b570      	push	{r4, r5, r6, lr}
 800f7a6:	4605      	mov	r5, r0
 800f7a8:	6804      	ldr	r4, [r0, #0]
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 800f7aa:	06d8      	lsls	r0, r3, #27
 800f7ac:	d508      	bpl.n	800f7c0 <HAL_DMA2D_DeInit+0x24>
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 800f7ae:	6823      	ldr	r3, [r4, #0]
 800f7b0:	07d9      	lsls	r1, r3, #31
 800f7b2:	d443      	bmi.n	800f83c <HAL_DMA2D_DeInit+0xa0>
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 800f7b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f7b6:	069a      	lsls	r2, r3, #26
 800f7b8:	d45f      	bmi.n	800f87a <HAL_DMA2D_DeInit+0xde>
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 800f7ba:	69e3      	ldr	r3, [r4, #28]
 800f7bc:	069b      	lsls	r3, r3, #26
 800f7be:	d414      	bmi.n	800f7ea <HAL_DMA2D_DeInit+0x4e>
  hdma2d->Instance->CR       =    0U;
 800f7c0:	2600      	movs	r6, #0
  hdma2d->Instance->IFCR     = 0x3FU;
 800f7c2:	233f      	movs	r3, #63	; 0x3f
  HAL_DMA2D_MspDeInit(hdma2d);
 800f7c4:	4628      	mov	r0, r5
  hdma2d->Instance->CR       =    0U;
 800f7c6:	6026      	str	r6, [r4, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 800f7c8:	60a3      	str	r3, [r4, #8]
  hdma2d->Instance->FGOR     =    0U;
 800f7ca:	6126      	str	r6, [r4, #16]
  hdma2d->Instance->BGOR     =    0U;
 800f7cc:	61a6      	str	r6, [r4, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 800f7ce:	61e6      	str	r6, [r4, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 800f7d0:	6266      	str	r6, [r4, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 800f7d2:	6366      	str	r6, [r4, #52]	; 0x34
  HAL_DMA2D_MspDeInit(hdma2d);
 800f7d4:	f7ff ffe0 	bl	800f798 <HAL_DMA2D_MspDeInit>
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800f7d8:	666e      	str	r6, [r5, #100]	; 0x64
  __HAL_UNLOCK(hdma2d);
 800f7da:	f885 6060 	strb.w	r6, [r5, #96]	; 0x60
  return HAL_OK;
 800f7de:	4630      	mov	r0, r6
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 800f7e0:	f885 6061 	strb.w	r6, [r5, #97]	; 0x61
}
 800f7e4:	bd70      	pop	{r4, r5, r6, pc}
     return HAL_ERROR;
 800f7e6:	2001      	movs	r0, #1
}
 800f7e8:	4770      	bx	lr
{
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 800f7ea:	6823      	ldr	r3, [r4, #0]
 800f7ec:	f043 0304 	orr.w	r3, r3, #4
 800f7f0:	6023      	str	r3, [r4, #0]
    reg  = &(hdma2d->Instance->FGPFCCR);
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 800f7f2:	f7fe f8b5 	bl	800d960 <HAL_GetTick>
 800f7f6:	4606      	mov	r6, r0
 800f7f8:	e005      	b.n	800f806 <HAL_DMA2D_DeInit+0x6a>

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 800f7fa:	f7fe f8b1 	bl	800d960 <HAL_GetTick>
 800f7fe:	1b80      	subs	r0, r0, r6
 800f800:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800f804:	d80e      	bhi.n	800f824 <HAL_DMA2D_DeInit+0x88>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 800f806:	69e3      	ldr	r3, [r4, #28]
 800f808:	f013 0320 	ands.w	r3, r3, #32
 800f80c:	d1f5      	bne.n	800f7fa <HAL_DMA2D_DeInit+0x5e>
      return HAL_TIMEOUT;
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 800f80e:	682c      	ldr	r4, [r5, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800f810:	2101      	movs	r1, #1
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 800f812:	6822      	ldr	r2, [r4, #0]
 800f814:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 800f818:	6022      	str	r2, [r4, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 800f81a:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800f81e:	f885 1061 	strb.w	r1, [r5, #97]	; 0x61
 800f822:	e7cd      	b.n	800f7c0 <HAL_DMA2D_DeInit+0x24>
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800f824:	6e6b      	ldr	r3, [r5, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800f826:	2203      	movs	r2, #3
      __HAL_UNLOCK(hdma2d);
 800f828:	2100      	movs	r1, #0
            return HAL_ERROR;
 800f82a:	2001      	movs	r0, #1
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800f82c:	f043 0320 	orr.w	r3, r3, #32
      __HAL_UNLOCK(hdma2d);
 800f830:	f885 1060 	strb.w	r1, [r5, #96]	; 0x60
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800f834:	666b      	str	r3, [r5, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800f836:	f885 2061 	strb.w	r2, [r5, #97]	; 0x61
}
 800f83a:	bd70      	pop	{r4, r5, r6, pc}
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 800f83c:	6823      	ldr	r3, [r4, #0]
 800f83e:	f023 0305 	bic.w	r3, r3, #5
 800f842:	f043 0304 	orr.w	r3, r3, #4
 800f846:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800f848:	f7fe f88a 	bl	800d960 <HAL_GetTick>
 800f84c:	4606      	mov	r6, r0
 800f84e:	e005      	b.n	800f85c <HAL_DMA2D_DeInit+0xc0>
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 800f850:	f7fe f886 	bl	800d960 <HAL_GetTick>
 800f854:	1b80      	subs	r0, r0, r6
 800f856:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800f85a:	d8e3      	bhi.n	800f824 <HAL_DMA2D_DeInit+0x88>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800f85c:	682c      	ldr	r4, [r5, #0]
 800f85e:	6823      	ldr	r3, [r4, #0]
 800f860:	f013 0301 	ands.w	r3, r3, #1
 800f864:	d1f4      	bne.n	800f850 <HAL_DMA2D_DeInit+0xb4>
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 800f866:	6822      	ldr	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800f868:	2101      	movs	r1, #1
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 800f86a:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 800f86e:	6022      	str	r2, [r4, #0]
  __HAL_UNLOCK(hdma2d);
 800f870:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800f874:	f885 1061 	strb.w	r1, [r5, #97]	; 0x61
 800f878:	e7a2      	b.n	800f7c0 <HAL_DMA2D_DeInit+0x24>
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 800f87a:	6823      	ldr	r3, [r4, #0]
 800f87c:	f043 0304 	orr.w	r3, r3, #4
 800f880:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800f882:	f7fe f86d 	bl	800d960 <HAL_GetTick>
 800f886:	4606      	mov	r6, r0
 800f888:	e005      	b.n	800f896 <HAL_DMA2D_DeInit+0xfa>
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 800f88a:	f7fe f869 	bl	800d960 <HAL_GetTick>
 800f88e:	1b80      	subs	r0, r0, r6
 800f890:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800f894:	d8c6      	bhi.n	800f824 <HAL_DMA2D_DeInit+0x88>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 800f896:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f898:	f013 0320 	ands.w	r3, r3, #32
 800f89c:	d1f5      	bne.n	800f88a <HAL_DMA2D_DeInit+0xee>
 800f89e:	e7b6      	b.n	800f80e <HAL_DMA2D_DeInit+0x72>
 800f8a0:	58024400 	.word	0x58024400

0800f8a4 <HAL_DMA2D_Start>:
{
 800f8a4:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma2d);
 800f8a6:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 800f8aa:	2c01      	cmp	r4, #1
 800f8ac:	d039      	beq.n	800f922 <HAL_DMA2D_Start+0x7e>
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800f8ae:	6804      	ldr	r4, [r0, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800f8b0:	2502      	movs	r5, #2
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800f8b2:	9e03      	ldr	r6, [sp, #12]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800f8b4:	f880 5061 	strb.w	r5, [r0, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800f8b8:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
 800f8bc:	6c65      	ldr	r5, [r4, #68]	; 0x44
  __HAL_LOCK(hdma2d);
 800f8be:	2601      	movs	r6, #1
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800f8c0:	f005 4540 	and.w	r5, r5, #3221225472	; 0xc0000000
  __HAL_LOCK(hdma2d);
 800f8c4:	f880 6060 	strb.w	r6, [r0, #96]	; 0x60

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800f8c8:	6846      	ldr	r6, [r0, #4]
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800f8ca:	432b      	orrs	r3, r5
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800f8cc:	f5b6 3f40 	cmp.w	r6, #196608	; 0x30000
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800f8d0:	6463      	str	r3, [r4, #68]	; 0x44
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800f8d2:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800f8d4:	d00a      	beq.n	800f8ec <HAL_DMA2D_Start+0x48>
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
  }
  else if(hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 800f8d6:	f5b6 2f80 	cmp.w	r6, #262144	; 0x40000
 800f8da:	d025      	beq.n	800f928 <HAL_DMA2D_Start+0x84>
    WRITE_REG(hdma2d->Instance->BGMAR , pdata);
  }
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800f8dc:	60e1      	str	r1, [r4, #12]
  __HAL_DMA2D_ENABLE(hdma2d);
 800f8de:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 800f8e0:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 800f8e2:	f043 0301 	orr.w	r3, r3, #1
 800f8e6:	6023      	str	r3, [r4, #0]
}
 800f8e8:	bc70      	pop	{r4, r5, r6}
 800f8ea:	4770      	bx	lr
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800f8ec:	6882      	ldr	r2, [r0, #8]
 800f8ee:	b1b2      	cbz	r2, 800f91e <HAL_DMA2D_Start+0x7a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800f8f0:	2a01      	cmp	r2, #1
 800f8f2:	d026      	beq.n	800f942 <HAL_DMA2D_Start+0x9e>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800f8f4:	2a02      	cmp	r2, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800f8f6:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800f8fa:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800f8fe:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800f900:	d022      	beq.n	800f948 <HAL_DMA2D_Start+0xa4>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800f902:	2a03      	cmp	r2, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800f904:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800f908:	d010      	beq.n	800f92c <HAL_DMA2D_Start+0x88>
      tmp2 = (tmp2 >> 20U);
 800f90a:	0d1b      	lsrs	r3, r3, #20
      tmp3 = (tmp3 >> 12U);
 800f90c:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800f90e:	021b      	lsls	r3, r3, #8
      tmp1 = (tmp1 >> 28U);
 800f910:	0f09      	lsrs	r1, r1, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800f912:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 800f916:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800f91a:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800f91e:	63a1      	str	r1, [r4, #56]	; 0x38
 800f920:	e7dd      	b.n	800f8de <HAL_DMA2D_Start+0x3a>
  __HAL_LOCK(hdma2d);
 800f922:	2002      	movs	r0, #2
}
 800f924:	bc70      	pop	{r4, r5, r6}
 800f926:	4770      	bx	lr
    WRITE_REG(hdma2d->Instance->BGMAR , pdata);
 800f928:	6161      	str	r1, [r4, #20]
 800f92a:	e7d8      	b.n	800f8de <HAL_DMA2D_Start+0x3a>
      tmp2 = (tmp2 >> 19U);
 800f92c:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 800f92e:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800f930:	029b      	lsls	r3, r3, #10
      tmp1 = (tmp1 >> 31U);
 800f932:	0fc9      	lsrs	r1, r1, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800f934:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 800f938:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 800f93c:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 800f940:	e7ed      	b.n	800f91e <HAL_DMA2D_Start+0x7a>
      tmp = (tmp3 | tmp2 | tmp4);
 800f942:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800f946:	e7ea      	b.n	800f91e <HAL_DMA2D_Start+0x7a>
      tmp2 = (tmp2 >> 19U);
 800f948:	0cd9      	lsrs	r1, r3, #19
      tmp3 = (tmp3 >> 10U);
 800f94a:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800f94c:	02c9      	lsls	r1, r1, #11
 800f94e:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 800f952:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 800f956:	e7e2      	b.n	800f91e <HAL_DMA2D_Start+0x7a>

0800f958 <HAL_DMA2D_PollForTransfer>:
{
 800f958:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 800f95a:	2200      	movs	r2, #0
{
 800f95c:	b082      	sub	sp, #8
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800f95e:	6803      	ldr	r3, [r0, #0]
{
 800f960:	4604      	mov	r4, r0
  __IO uint32_t isrflags = 0x0U;
 800f962:	9201      	str	r2, [sp, #4]
{
 800f964:	460d      	mov	r5, r1
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800f966:	681a      	ldr	r2, [r3, #0]
 800f968:	07d6      	lsls	r6, r2, #31
 800f96a:	d40f      	bmi.n	800f98c <HAL_DMA2D_PollForTransfer+0x34>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800f96c:	69da      	ldr	r2, [r3, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800f96e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800f970:	430a      	orrs	r2, r1
  if (layer_start != 0U)
 800f972:	0691      	lsls	r1, r2, #26
 800f974:	d432      	bmi.n	800f9dc <HAL_DMA2D_PollForTransfer+0x84>
  __HAL_UNLOCK(hdma2d);
 800f976:	2200      	movs	r2, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 800f978:	2512      	movs	r5, #18
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800f97a:	2101      	movs	r1, #1
  return HAL_OK;
 800f97c:	4610      	mov	r0, r2
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 800f97e:	609d      	str	r5, [r3, #8]
  __HAL_UNLOCK(hdma2d);
 800f980:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800f984:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
}
 800f988:	b002      	add	sp, #8
 800f98a:	bd70      	pop	{r4, r5, r6, pc}
   tickstart = HAL_GetTick();
 800f98c:	f7fd ffe8 	bl	800d960 <HAL_GetTick>
 800f990:	4606      	mov	r6, r0
 800f992:	1c6a      	adds	r2, r5, #1
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800f994:	6823      	ldr	r3, [r4, #0]
 800f996:	d147      	bne.n	800fa28 <HAL_DMA2D_PollForTransfer+0xd0>
 800f998:	685a      	ldr	r2, [r3, #4]
 800f99a:	0796      	lsls	r6, r2, #30
 800f99c:	d4e6      	bmi.n	800f96c <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800f99e:	685a      	ldr	r2, [r3, #4]
 800f9a0:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800f9a2:	9a01      	ldr	r2, [sp, #4]
 800f9a4:	f012 0f21 	tst.w	r2, #33	; 0x21
 800f9a8:	d0f6      	beq.n	800f998 <HAL_DMA2D_PollForTransfer+0x40>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800f9aa:	9a01      	ldr	r2, [sp, #4]
 800f9ac:	0690      	lsls	r0, r2, #26
 800f9ae:	d503      	bpl.n	800f9b8 <HAL_DMA2D_PollForTransfer+0x60>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800f9b0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f9b2:	f042 0202 	orr.w	r2, r2, #2
 800f9b6:	6662      	str	r2, [r4, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800f9b8:	9a01      	ldr	r2, [sp, #4]
 800f9ba:	07d1      	lsls	r1, r2, #31
 800f9bc:	d503      	bpl.n	800f9c6 <HAL_DMA2D_PollForTransfer+0x6e>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800f9be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f9c0:	f042 0201 	orr.w	r2, r2, #1
 800f9c4:	6662      	str	r2, [r4, #100]	; 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800f9c6:	2521      	movs	r5, #33	; 0x21
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 800f9c8:	2104      	movs	r1, #4
        __HAL_UNLOCK(hdma2d);
 800f9ca:	2200      	movs	r2, #0
        return HAL_ERROR;
 800f9cc:	2001      	movs	r0, #1
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800f9ce:	609d      	str	r5, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 800f9d0:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
        __HAL_UNLOCK(hdma2d);
 800f9d4:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
}
 800f9d8:	b002      	add	sp, #8
 800f9da:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 800f9dc:	f7fd ffc0 	bl	800d960 <HAL_GetTick>
 800f9e0:	4606      	mov	r6, r0
 800f9e2:	1c68      	adds	r0, r5, #1
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800f9e4:	6823      	ldr	r3, [r4, #0]
 800f9e6:	d13b      	bne.n	800fa60 <HAL_DMA2D_PollForTransfer+0x108>
 800f9e8:	685a      	ldr	r2, [r3, #4]
 800f9ea:	06d1      	lsls	r1, r2, #27
 800f9ec:	d4c3      	bmi.n	800f976 <HAL_DMA2D_PollForTransfer+0x1e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800f9ee:	685a      	ldr	r2, [r3, #4]
 800f9f0:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800f9f2:	9a01      	ldr	r2, [sp, #4]
 800f9f4:	f012 0f29 	tst.w	r2, #41	; 0x29
 800f9f8:	d0f6      	beq.n	800f9e8 <HAL_DMA2D_PollForTransfer+0x90>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800f9fa:	9a01      	ldr	r2, [sp, #4]
 800f9fc:	0712      	lsls	r2, r2, #28
 800f9fe:	d503      	bpl.n	800fa08 <HAL_DMA2D_PollForTransfer+0xb0>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800fa00:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fa02:	f042 0204 	orr.w	r2, r2, #4
 800fa06:	6662      	str	r2, [r4, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800fa08:	9a01      	ldr	r2, [sp, #4]
 800fa0a:	0696      	lsls	r6, r2, #26
 800fa0c:	d503      	bpl.n	800fa16 <HAL_DMA2D_PollForTransfer+0xbe>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800fa0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fa10:	f042 0202 	orr.w	r2, r2, #2
 800fa14:	6662      	str	r2, [r4, #100]	; 0x64
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800fa16:	9a01      	ldr	r2, [sp, #4]
 800fa18:	07d5      	lsls	r5, r2, #31
 800fa1a:	d503      	bpl.n	800fa24 <HAL_DMA2D_PollForTransfer+0xcc>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800fa1c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fa1e:	f042 0201 	orr.w	r2, r2, #1
 800fa22:	6662      	str	r2, [r4, #100]	; 0x64
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800fa24:	2529      	movs	r5, #41	; 0x29
 800fa26:	e7cf      	b.n	800f9c8 <HAL_DMA2D_PollForTransfer+0x70>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800fa28:	685a      	ldr	r2, [r3, #4]
 800fa2a:	0790      	lsls	r0, r2, #30
 800fa2c:	d49e      	bmi.n	800f96c <HAL_DMA2D_PollForTransfer+0x14>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800fa2e:	685a      	ldr	r2, [r3, #4]
 800fa30:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800fa32:	9a01      	ldr	r2, [sp, #4]
 800fa34:	f012 0f21 	tst.w	r2, #33	; 0x21
 800fa38:	d1b7      	bne.n	800f9aa <HAL_DMA2D_PollForTransfer+0x52>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800fa3a:	f7fd ff91 	bl	800d960 <HAL_GetTick>
 800fa3e:	1b80      	subs	r0, r0, r6
 800fa40:	42a8      	cmp	r0, r5
 800fa42:	d801      	bhi.n	800fa48 <HAL_DMA2D_PollForTransfer+0xf0>
 800fa44:	2d00      	cmp	r5, #0
 800fa46:	d1a4      	bne.n	800f992 <HAL_DMA2D_PollForTransfer+0x3a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800fa48:	6e63      	ldr	r3, [r4, #100]	; 0x64
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 800fa4a:	2203      	movs	r2, #3
          __HAL_UNLOCK(hdma2d);
 800fa4c:	2100      	movs	r1, #0
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800fa4e:	f043 0320 	orr.w	r3, r3, #32
          return HAL_TIMEOUT;
 800fa52:	4610      	mov	r0, r2
          __HAL_UNLOCK(hdma2d);
 800fa54:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800fa58:	6663      	str	r3, [r4, #100]	; 0x64
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 800fa5a:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
          return HAL_TIMEOUT;
 800fa5e:	e793      	b.n	800f988 <HAL_DMA2D_PollForTransfer+0x30>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800fa60:	685a      	ldr	r2, [r3, #4]
 800fa62:	06d2      	lsls	r2, r2, #27
 800fa64:	d487      	bmi.n	800f976 <HAL_DMA2D_PollForTransfer+0x1e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800fa66:	685a      	ldr	r2, [r3, #4]
 800fa68:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800fa6a:	9a01      	ldr	r2, [sp, #4]
 800fa6c:	f012 0f29 	tst.w	r2, #41	; 0x29
 800fa70:	d1c3      	bne.n	800f9fa <HAL_DMA2D_PollForTransfer+0xa2>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800fa72:	f7fd ff75 	bl	800d960 <HAL_GetTick>
 800fa76:	1b80      	subs	r0, r0, r6
 800fa78:	42a8      	cmp	r0, r5
 800fa7a:	d8e5      	bhi.n	800fa48 <HAL_DMA2D_PollForTransfer+0xf0>
 800fa7c:	2d00      	cmp	r5, #0
 800fa7e:	d1b0      	bne.n	800f9e2 <HAL_DMA2D_PollForTransfer+0x8a>
 800fa80:	e7e2      	b.n	800fa48 <HAL_DMA2D_PollForTransfer+0xf0>
 800fa82:	bf00      	nop

0800fa84 <HAL_DMA2D_LineEventCallback>:
 800fa84:	4770      	bx	lr
 800fa86:	bf00      	nop

0800fa88 <HAL_DMA2D_CLUTLoadingCpltCallback>:
 800fa88:	4770      	bx	lr
 800fa8a:	bf00      	nop

0800fa8c <HAL_DMA2D_IRQHandler>:
{
 800fa8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800fa8e:	6803      	ldr	r3, [r0, #0]
{
 800fa90:	4604      	mov	r4, r0
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800fa92:	685d      	ldr	r5, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800fa94:	681e      	ldr	r6, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800fa96:	07e9      	lsls	r1, r5, #31
 800fa98:	d517      	bpl.n	800faca <HAL_DMA2D_IRQHandler+0x3e>
    if ((crflags & DMA2D_IT_TE) != 0U)
 800fa9a:	05f2      	lsls	r2, r6, #23
 800fa9c:	d515      	bpl.n	800faca <HAL_DMA2D_IRQHandler+0x3e>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800fa9e:	681a      	ldr	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800faa0:	f04f 0e01 	mov.w	lr, #1
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800faa4:	f04f 0c04 	mov.w	ip, #4
      __HAL_UNLOCK(hdma2d);
 800faa8:	2700      	movs	r7, #0
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800faaa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
      if(hdma2d->XferErrorCallback != NULL)
 800faae:	6a41      	ldr	r1, [r0, #36]	; 0x24
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800fab0:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800fab2:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800fab4:	ea42 020e 	orr.w	r2, r2, lr
 800fab8:	6642      	str	r2, [r0, #100]	; 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800faba:	f8c3 e008 	str.w	lr, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800fabe:	f880 c061 	strb.w	ip, [r0, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 800fac2:	f880 7060 	strb.w	r7, [r0, #96]	; 0x60
      if(hdma2d->XferErrorCallback != NULL)
 800fac6:	b101      	cbz	r1, 800faca <HAL_DMA2D_IRQHandler+0x3e>
        hdma2d->XferErrorCallback(hdma2d);
 800fac8:	4788      	blx	r1
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800faca:	06af      	lsls	r7, r5, #26
 800facc:	d516      	bpl.n	800fafc <HAL_DMA2D_IRQHandler+0x70>
    if ((crflags & DMA2D_IT_CE) != 0U)
 800face:	04b0      	lsls	r0, r6, #18
 800fad0:	d514      	bpl.n	800fafc <HAL_DMA2D_IRQHandler+0x70>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800fad2:	6823      	ldr	r3, [r4, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800fad4:	2020      	movs	r0, #32
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800fad6:	2104      	movs	r1, #4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800fad8:	681a      	ldr	r2, [r3, #0]
 800fada:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800fade:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hdma2d);
 800fae0:	2200      	movs	r2, #0
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800fae2:	6098      	str	r0, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800fae4:	6e63      	ldr	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(hdma2d);
 800fae6:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800faea:	f043 0302 	orr.w	r3, r3, #2
      if(hdma2d->XferErrorCallback != NULL)
 800faee:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800faf0:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800faf2:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
      if(hdma2d->XferErrorCallback != NULL)
 800faf6:	b10a      	cbz	r2, 800fafc <HAL_DMA2D_IRQHandler+0x70>
        hdma2d->XferErrorCallback(hdma2d);
 800faf8:	4620      	mov	r0, r4
 800fafa:	4790      	blx	r2
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800fafc:	0729      	lsls	r1, r5, #28
 800fafe:	d515      	bpl.n	800fb2c <HAL_DMA2D_IRQHandler+0xa0>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800fb00:	0532      	lsls	r2, r6, #20
 800fb02:	d513      	bpl.n	800fb2c <HAL_DMA2D_IRQHandler+0xa0>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800fb04:	6823      	ldr	r3, [r4, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800fb06:	2008      	movs	r0, #8
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800fb08:	2104      	movs	r1, #4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800fb0a:	681a      	ldr	r2, [r3, #0]
 800fb0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800fb10:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hdma2d);
 800fb12:	2200      	movs	r2, #0
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800fb14:	6098      	str	r0, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800fb16:	6e63      	ldr	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(hdma2d);
 800fb18:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800fb1c:	430b      	orrs	r3, r1
      if(hdma2d->XferErrorCallback != NULL)
 800fb1e:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800fb20:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800fb22:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
      if(hdma2d->XferErrorCallback != NULL)
 800fb26:	b10a      	cbz	r2, 800fb2c <HAL_DMA2D_IRQHandler+0xa0>
        hdma2d->XferErrorCallback(hdma2d);
 800fb28:	4620      	mov	r0, r4
 800fb2a:	4790      	blx	r2
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800fb2c:	076b      	lsls	r3, r5, #29
 800fb2e:	d501      	bpl.n	800fb34 <HAL_DMA2D_IRQHandler+0xa8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 800fb30:	0577      	lsls	r7, r6, #21
 800fb32:	d42e      	bmi.n	800fb92 <HAL_DMA2D_IRQHandler+0x106>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800fb34:	07a8      	lsls	r0, r5, #30
 800fb36:	d514      	bpl.n	800fb62 <HAL_DMA2D_IRQHandler+0xd6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 800fb38:	05b1      	lsls	r1, r6, #22
 800fb3a:	d512      	bpl.n	800fb62 <HAL_DMA2D_IRQHandler+0xd6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800fb3c:	6823      	ldr	r3, [r4, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800fb3e:	2702      	movs	r7, #2
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800fb40:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma2d);
 800fb42:	2000      	movs	r0, #0
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800fb44:	681a      	ldr	r2, [r3, #0]
 800fb46:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800fb4a:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800fb4c:	609f      	str	r7, [r3, #8]
      if(hdma2d->XferCpltCallback != NULL)
 800fb4e:	6a23      	ldr	r3, [r4, #32]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800fb50:	6e62      	ldr	r2, [r4, #100]	; 0x64
      __HAL_UNLOCK(hdma2d);
 800fb52:	f884 0060 	strb.w	r0, [r4, #96]	; 0x60
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800fb56:	6662      	str	r2, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800fb58:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
      if(hdma2d->XferCpltCallback != NULL)
 800fb5c:	b10b      	cbz	r3, 800fb62 <HAL_DMA2D_IRQHandler+0xd6>
        hdma2d->XferCpltCallback(hdma2d);
 800fb5e:	4620      	mov	r0, r4
 800fb60:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800fb62:	06ea      	lsls	r2, r5, #27
 800fb64:	d501      	bpl.n	800fb6a <HAL_DMA2D_IRQHandler+0xde>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800fb66:	04f3      	lsls	r3, r6, #19
 800fb68:	d400      	bmi.n	800fb6c <HAL_DMA2D_IRQHandler+0xe0>
}
 800fb6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800fb6c:	6823      	ldr	r3, [r4, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800fb6e:	2610      	movs	r6, #16
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800fb70:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma2d);
 800fb72:	2500      	movs	r5, #0
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800fb74:	681a      	ldr	r2, [r3, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800fb76:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800fb78:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800fb7c:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800fb7e:	609e      	str	r6, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800fb80:	6e63      	ldr	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(hdma2d);
 800fb82:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800fb86:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800fb88:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800fb8c:	f7ff ff7c 	bl	800fa88 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 800fb90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800fb92:	6823      	ldr	r3, [r4, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800fb94:	2104      	movs	r1, #4
      HAL_DMA2D_LineEventCallback(hdma2d);
 800fb96:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800fb98:	681a      	ldr	r2, [r3, #0]
 800fb9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fb9e:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800fba0:	6099      	str	r1, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800fba2:	f7ff ff6f 	bl	800fa84 <HAL_DMA2D_LineEventCallback>
 800fba6:	e7c5      	b.n	800fb34 <HAL_DMA2D_IRQHandler+0xa8>

0800fba8 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 800fba8:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 800fbac:	2b01      	cmp	r3, #1
 800fbae:	d05c      	beq.n	800fc6a <HAL_DMA2D_ConfigLayer+0xc2>
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800fbb0:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800fbb4:	2302      	movs	r3, #2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800fbb6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
{
 800fbba:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma2d);
 800fbbc:	2401      	movs	r4, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800fbbe:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800fbc2:	6b93      	ldr	r3, [r2, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800fbc4:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  __HAL_LOCK(hdma2d);
 800fbc6:	f880 4060 	strb.w	r4, [r0, #96]	; 0x60
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800fbca:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800fbcc:	6b14      	ldr	r4, [r2, #48]	; 0x30
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800fbce:	f1a6 0c09 	sub.w	ip, r6, #9
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800fbd2:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800fbd4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800fbd8:	f1bc 0f01 	cmp.w	ip, #1
 800fbdc:	6b57      	ldr	r7, [r2, #52]	; 0x34
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800fbde:	ea43 0306 	orr.w	r3, r3, r6
 800fbe2:	6804      	ldr	r4, [r0, #0]
 800fbe4:	ea43 5345 	orr.w	r3, r3, r5, lsl #21
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800fbe8:	d91f      	bls.n	800fc2a <HAL_DMA2D_ConfigLayer+0x82>
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800fbea:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800fbee:	b979      	cbnz	r1, 800fc10 <HAL_DMA2D_ConfigLayer+0x68>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800fbf0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800fbf2:	4a1f      	ldr	r2, [pc, #124]	; (800fc70 <HAL_DMA2D_ConfigLayer+0xc8>)
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800fbf4:	6a81      	ldr	r1, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800fbf6:	402a      	ands	r2, r5
 800fbf8:	4313      	orrs	r3, r2
 800fbfa:	6263      	str	r3, [r4, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800fbfc:	61a1      	str	r1, [r4, #24]
  __HAL_UNLOCK(hdma2d);
 800fbfe:	2300      	movs	r3, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800fc00:	2201      	movs	r2, #1
  __HAL_UNLOCK(hdma2d);
 800fc02:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800fc06:	f880 2061 	strb.w	r2, [r0, #97]	; 0x61
}
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	bcf0      	pop	{r4, r5, r6, r7}
 800fc0e:	4770      	bx	lr
    if(pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 800fc10:	2e0b      	cmp	r6, #11
 800fc12:	6a95      	ldr	r5, [r2, #40]	; 0x28
 800fc14:	d10e      	bne.n	800fc34 <HAL_DMA2D_ConfigLayer+0x8c>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800fc16:	69e6      	ldr	r6, [r4, #28]
 800fc18:	4916      	ldr	r1, [pc, #88]	; (800fc74 <HAL_DMA2D_ConfigLayer+0xcc>)
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 800fc1a:	6c12      	ldr	r2, [r2, #64]	; 0x40
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800fc1c:	4031      	ands	r1, r6
 800fc1e:	ea41 4182 	orr.w	r1, r1, r2, lsl #18
 800fc22:	430b      	orrs	r3, r1
 800fc24:	61e3      	str	r3, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800fc26:	6125      	str	r5, [r4, #16]
 800fc28:	e7e9      	b.n	800fbfe <HAL_DMA2D_ConfigLayer+0x56>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800fc2a:	f007 457f 	and.w	r5, r7, #4278190080	; 0xff000000
 800fc2e:	432b      	orrs	r3, r5
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800fc30:	b179      	cbz	r1, 800fc52 <HAL_DMA2D_ConfigLayer+0xaa>
 800fc32:	6a95      	ldr	r5, [r2, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800fc34:	69e1      	ldr	r1, [r4, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800fc36:	f1bc 0f01 	cmp.w	ip, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800fc3a:	4a0d      	ldr	r2, [pc, #52]	; (800fc70 <HAL_DMA2D_ConfigLayer+0xc8>)
 800fc3c:	ea02 0201 	and.w	r2, r2, r1
 800fc40:	ea43 0302 	orr.w	r3, r3, r2
 800fc44:	61e3      	str	r3, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800fc46:	6125      	str	r5, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800fc48:	d8d9      	bhi.n	800fbfe <HAL_DMA2D_ConfigLayer+0x56>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800fc4a:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
 800fc4e:	6227      	str	r7, [r4, #32]
 800fc50:	e7d5      	b.n	800fbfe <HAL_DMA2D_ConfigLayer+0x56>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800fc52:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800fc54:	4a06      	ldr	r2, [pc, #24]	; (800fc70 <HAL_DMA2D_ConfigLayer+0xc8>)
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800fc56:	6b41      	ldr	r1, [r0, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800fc58:	402a      	ands	r2, r5
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800fc5a:	6a85      	ldr	r5, [r0, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800fc5c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800fc60:	4313      	orrs	r3, r2
 800fc62:	6263      	str	r3, [r4, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800fc64:	61a5      	str	r5, [r4, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800fc66:	62a1      	str	r1, [r4, #40]	; 0x28
 800fc68:	e7c9      	b.n	800fbfe <HAL_DMA2D_ConfigLayer+0x56>
  __HAL_LOCK(hdma2d);
 800fc6a:	2202      	movs	r2, #2
}
 800fc6c:	4610      	mov	r0, r2
 800fc6e:	4770      	bx	lr
 800fc70:	00ccfff0 	.word	0x00ccfff0
 800fc74:	00c0fff0 	.word	0x00c0fff0

0800fc78 <HAL_DSI_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 800fc78:	4770      	bx	lr
 800fc7a:	bf00      	nop

0800fc7c <HAL_DSI_Init>:
  if (hdsi == NULL)
 800fc7c:	2800      	cmp	r0, #0
 800fc7e:	f000 80b2 	beq.w	800fde6 <HAL_DSI_Init+0x16a>
  if (hdsi->State == HAL_DSI_STATE_RESET)
 800fc82:	7c43      	ldrb	r3, [r0, #17]
{
 800fc84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc86:	4604      	mov	r4, r0
 800fc88:	b083      	sub	sp, #12
 800fc8a:	460e      	mov	r6, r1
  if (hdsi->State == HAL_DSI_STATE_RESET)
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	f000 80a7 	beq.w	800fde0 <HAL_DSI_Init+0x164>
  __HAL_DSI_REG_ENABLE(hdsi);
 800fc92:	6823      	ldr	r3, [r4, #0]
  hdsi->State = HAL_DSI_STATE_BUSY;
 800fc94:	2103      	movs	r1, #3
  __HAL_DSI_REG_ENABLE(hdsi);
 800fc96:	2200      	movs	r2, #0
  hdsi->State = HAL_DSI_STATE_BUSY;
 800fc98:	7461      	strb	r1, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 800fc9a:	9200      	str	r2, [sp, #0]
 800fc9c:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800fca0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800fca4:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800fca8:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800fcac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fcb0:	9300      	str	r3, [sp, #0]
 800fcb2:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 800fcb4:	f7fd fe54 	bl	800d960 <HAL_GetTick>
 800fcb8:	4605      	mov	r5, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800fcba:	e006      	b.n	800fcca <HAL_DSI_Init+0x4e>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800fcbc:	f7fd fe50 	bl	800d960 <HAL_GetTick>
 800fcc0:	1b40      	subs	r0, r0, r5
 800fcc2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800fcc6:	f200 8088 	bhi.w	800fdda <HAL_DSI_Init+0x15e>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800fcca:	6823      	ldr	r3, [r4, #0]
 800fccc:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800fcd0:	04d1      	lsls	r1, r2, #19
 800fcd2:	d5f3      	bpl.n	800fcbc <HAL_DSI_Init+0x40>
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800fcd4:	6872      	ldr	r2, [r6, #4]
  __HAL_DSI_PLL_ENABLE(hdsi);
 800fcd6:	2000      	movs	r0, #0
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800fcd8:	f8d3 7430 	ldr.w	r7, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800fcdc:	6835      	ldr	r5, [r6, #0]
 800fcde:	02d2      	lsls	r2, r2, #11
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800fce0:	4942      	ldr	r1, [pc, #264]	; (800fdec <HAL_DSI_Init+0x170>)
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800fce2:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 800fce6:	68b5      	ldr	r5, [r6, #8]
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800fce8:	4039      	ands	r1, r7
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800fcea:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800fcee:	f8c3 1430 	str.w	r1, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 800fcf2:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 800fcf6:	430a      	orrs	r2, r1
 800fcf8:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 800fcfc:	9001      	str	r0, [sp, #4]
 800fcfe:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800fd02:	f042 0201 	orr.w	r2, r2, #1
 800fd06:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800fd0a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800fd0e:	f003 0301 	and.w	r3, r3, #1
 800fd12:	9301      	str	r3, [sp, #4]
 800fd14:	9b01      	ldr	r3, [sp, #4]
  tickstart = HAL_GetTick();
 800fd16:	f7fd fe23 	bl	800d960 <HAL_GetTick>
 800fd1a:	4605      	mov	r5, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800fd1c:	e005      	b.n	800fd2a <HAL_DSI_Init+0xae>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800fd1e:	f7fd fe1f 	bl	800d960 <HAL_GetTick>
 800fd22:	1b40      	subs	r0, r0, r5
 800fd24:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800fd28:	d857      	bhi.n	800fdda <HAL_DSI_Init+0x15e>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800fd2a:	6823      	ldr	r3, [r4, #0]
 800fd2c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800fd30:	05d2      	lsls	r2, r2, #23
 800fd32:	d5f4      	bpl.n	800fd1e <HAL_DSI_Init+0xa2>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800fd34:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800fd38:	6862      	ldr	r2, [r4, #4]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800fd3a:	f041 0106 	orr.w	r1, r1, #6
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800fd3e:	f8d4 e00c 	ldr.w	lr, [r4, #12]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800fd42:	f8d4 c008 	ldr.w	ip, [r4, #8]
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800fd46:	f042 0201 	orr.w	r2, r2, #1
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800fd4a:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800fd4e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 800fd52:	6877      	ldr	r7, [r6, #4]
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800fd54:	f021 0103 	bic.w	r1, r1, #3
 800fd58:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800fd5c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800fd60:	430a      	orrs	r2, r1
 800fd62:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800fd66:	f8d3 50a4 	ldr.w	r5, [r3, #164]	; 0xa4
 800fd6a:	4a21      	ldr	r2, [pc, #132]	; (800fdf0 <HAL_DSI_Init+0x174>)
 800fd6c:	f025 0503 	bic.w	r5, r5, #3
 800fd70:	f8c3 50a4 	str.w	r5, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800fd74:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
 800fd78:	ea40 000e 	orr.w	r0, r0, lr
 800fd7c:	f8c3 00a4 	str.w	r0, [r3, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800fd80:	6898      	ldr	r0, [r3, #8]
 800fd82:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 800fd86:	6098      	str	r0, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800fd88:	6899      	ldr	r1, [r3, #8]
 800fd8a:	ea41 010c 	orr.w	r1, r1, ip
 800fd8e:	6099      	str	r1, [r3, #8]
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 800fd90:	b10f      	cbz	r7, 800fd96 <HAL_DSI_Init+0x11a>
 800fd92:	fb02 f207 	mul.w	r2, r2, r7
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800fd96:	68b1      	ldr	r1, [r6, #8]
 800fd98:	f246 15a8 	movw	r5, #25000	; 0x61a8
 800fd9c:	6830      	ldr	r0, [r6, #0]
  hdsi->State = HAL_DSI_STATE_READY;
 800fd9e:	2601      	movs	r6, #1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800fda0:	f001 0103 	and.w	r1, r1, #3
 800fda4:	fb05 f500 	mul.w	r5, r5, r0
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800fda8:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800fdac:	408a      	lsls	r2, r1
  hdsi->Instance->IER[0U] = 0U;
 800fdae:	2100      	movs	r1, #0
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800fdb0:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800fdb4:	fbb2 f2f5 	udiv	r2, r2, r5
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800fdb8:	f8c3 0418 	str.w	r0, [r3, #1048]	; 0x418
  return HAL_OK;
 800fdbc:	4608      	mov	r0, r1
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800fdbe:	f8d3 5418 	ldr.w	r5, [r3, #1048]	; 0x418
 800fdc2:	432a      	orrs	r2, r5
 800fdc4:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 800fdc8:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800fdcc:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800fdd0:	6161      	str	r1, [r4, #20]
  hdsi->ErrorMsk = 0U;
 800fdd2:	61a1      	str	r1, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 800fdd4:	7466      	strb	r6, [r4, #17]
}
 800fdd6:	b003      	add	sp, #12
 800fdd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_TIMEOUT;
 800fdda:	2003      	movs	r0, #3
}
 800fddc:	b003      	add	sp, #12
 800fdde:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_DSI_MspInit(hdsi);
 800fde0:	f7ff ff4a 	bl	800fc78 <HAL_DSI_MspInit>
 800fde4:	e755      	b.n	800fc92 <HAL_DSI_Init+0x16>
    return HAL_ERROR;
 800fde6:	2001      	movs	r0, #1
}
 800fde8:	4770      	bx	lr
 800fdea:	bf00      	nop
 800fdec:	fffc8603 	.word	0xfffc8603
 800fdf0:	003d0900 	.word	0x003d0900

0800fdf4 <HAL_DSI_TearingEffectCallback>:
 800fdf4:	4770      	bx	lr
 800fdf6:	bf00      	nop

0800fdf8 <HAL_DSI_EndOfRefreshCallback>:
 800fdf8:	4770      	bx	lr
 800fdfa:	bf00      	nop

0800fdfc <HAL_DSI_ErrorCallback>:
 800fdfc:	4770      	bx	lr
 800fdfe:	bf00      	nop

0800fe00 <HAL_DSI_IRQHandler>:
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
  uint32_t ErrorStatus0, ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800fe00:	6803      	ldr	r3, [r0, #0]
 800fe02:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800fe06:	07d1      	lsls	r1, r2, #31
{
 800fe08:	b510      	push	{r4, lr}
 800fe0a:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800fe0c:	d503      	bpl.n	800fe16 <HAL_DSI_IRQHandler+0x16>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 800fe0e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800fe12:	07d2      	lsls	r2, r2, #31
 800fe14:	d45b      	bmi.n	800fece <HAL_DSI_IRQHandler+0xce>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 800fe16:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800fe1a:	0791      	lsls	r1, r2, #30
 800fe1c:	d503      	bpl.n	800fe26 <HAL_DSI_IRQHandler+0x26>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 800fe1e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800fe22:	0792      	lsls	r2, r2, #30
 800fe24:	d45a      	bmi.n	800fedc <HAL_DSI_IRQHandler+0xdc>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 800fe26:	69a3      	ldr	r3, [r4, #24]
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d04b      	beq.n	800fec4 <HAL_DSI_IRQHandler+0xc4>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 800fe2c:	6821      	ldr	r1, [r4, #0]
 800fe2e:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800fe32:	f8d1 30c4 	ldr.w	r3, [r1, #196]	; 0xc4
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 800fe36:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800fe3a:	401a      	ands	r2, r3
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 800fe3c:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 800fe40:	b291      	uxth	r1, r2
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 800fe42:	4003      	ands	r3, r0
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 800fe44:	b119      	cbz	r1, 800fe4e <HAL_DSI_IRQHandler+0x4e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 800fe46:	6961      	ldr	r1, [r4, #20]
 800fe48:	f041 0101 	orr.w	r1, r1, #1
 800fe4c:	6161      	str	r1, [r4, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 800fe4e:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
 800fe52:	d003      	beq.n	800fe5c <HAL_DSI_IRQHandler+0x5c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 800fe54:	6962      	ldr	r2, [r4, #20]
 800fe56:	f042 0202 	orr.w	r2, r2, #2
 800fe5a:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 800fe5c:	07d8      	lsls	r0, r3, #31
 800fe5e:	d503      	bpl.n	800fe68 <HAL_DSI_IRQHandler+0x68>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 800fe60:	6962      	ldr	r2, [r4, #20]
 800fe62:	f042 0204 	orr.w	r2, r2, #4
 800fe66:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 800fe68:	0799      	lsls	r1, r3, #30
 800fe6a:	d503      	bpl.n	800fe74 <HAL_DSI_IRQHandler+0x74>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 800fe6c:	6962      	ldr	r2, [r4, #20]
 800fe6e:	f042 0208 	orr.w	r2, r2, #8
 800fe72:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 800fe74:	f013 0f0c 	tst.w	r3, #12
 800fe78:	d003      	beq.n	800fe82 <HAL_DSI_IRQHandler+0x82>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 800fe7a:	6962      	ldr	r2, [r4, #20]
 800fe7c:	f042 0210 	orr.w	r2, r2, #16
 800fe80:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 800fe82:	06da      	lsls	r2, r3, #27
 800fe84:	d503      	bpl.n	800fe8e <HAL_DSI_IRQHandler+0x8e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 800fe86:	6962      	ldr	r2, [r4, #20]
 800fe88:	f042 0220 	orr.w	r2, r2, #32
 800fe8c:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 800fe8e:	0698      	lsls	r0, r3, #26
 800fe90:	d503      	bpl.n	800fe9a <HAL_DSI_IRQHandler+0x9a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 800fe92:	6962      	ldr	r2, [r4, #20]
 800fe94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fe98:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 800fe9a:	0659      	lsls	r1, r3, #25
 800fe9c:	d503      	bpl.n	800fea6 <HAL_DSI_IRQHandler+0xa6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 800fe9e:	6962      	ldr	r2, [r4, #20]
 800fea0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800fea4:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 800fea6:	061a      	lsls	r2, r3, #24
 800fea8:	d503      	bpl.n	800feb2 <HAL_DSI_IRQHandler+0xb2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 800feaa:	6962      	ldr	r2, [r4, #20]
 800feac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800feb0:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 800feb2:	f413 5ff8 	tst.w	r3, #7936	; 0x1f00
 800feb6:	d003      	beq.n	800fec0 <HAL_DSI_IRQHandler+0xc0>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 800feb8:	6963      	ldr	r3, [r4, #20]
 800feba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800febe:	6163      	str	r3, [r4, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 800fec0:	6963      	ldr	r3, [r4, #20]
 800fec2:	b903      	cbnz	r3, 800fec6 <HAL_DSI_IRQHandler+0xc6>
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 800fec4:	bd10      	pop	{r4, pc}
      HAL_DSI_ErrorCallback(hdsi);
 800fec6:	4620      	mov	r0, r4
 800fec8:	f7ff ff98 	bl	800fdfc <HAL_DSI_ErrorCallback>
}
 800fecc:	bd10      	pop	{r4, pc}
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 800fece:	2201      	movs	r2, #1
 800fed0:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 800fed4:	f7ff ff8e 	bl	800fdf4 <HAL_DSI_TearingEffectCallback>
 800fed8:	6823      	ldr	r3, [r4, #0]
 800feda:	e79c      	b.n	800fe16 <HAL_DSI_IRQHandler+0x16>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800fedc:	2202      	movs	r2, #2
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800fede:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800fee0:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800fee4:	f7ff ff88 	bl	800fdf8 <HAL_DSI_EndOfRefreshCallback>
 800fee8:	e79d      	b.n	800fe26 <HAL_DSI_IRQHandler+0x26>
 800feea:	bf00      	nop

0800feec <HAL_DSI_ConfigVideoMode>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800feec:	7c03      	ldrb	r3, [r0, #16]
 800feee:	2b01      	cmp	r3, #1
{
 800fef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hdsi);
 800fef4:	f000 8113 	beq.w	801011e <HAL_DSI_ConfigVideoMode+0x232>
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800fef8:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hdsi);
 800fefa:	2501      	movs	r5, #1
  if (VidCfg->ColorCoding == DSI_RGB666)
 800fefc:	684c      	ldr	r4, [r1, #4]
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800fefe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
  hdsi->Instance->VMCR |= VidCfg->Mode;
 800ff00:	f8d1 e00c 	ldr.w	lr, [r1, #12]
  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 800ff04:	2c03      	cmp	r4, #3
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800ff06:	f022 0201 	bic.w	r2, r2, #1
  __HAL_LOCK(hdsi);
 800ff0a:	7405      	strb	r5, [r0, #16]
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 800ff0c:	f8d1 c010 	ldr.w	ip, [r1, #16]
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800ff10:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800ff12:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 800ff16:	f8d1 8014 	ldr.w	r8, [r1, #20]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800ff1a:	f022 0201 	bic.w	r2, r2, #1
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 800ff1e:	4e82      	ldr	r6, [pc, #520]	; (8010128 <HAL_DSI_ConfigVideoMode+0x23c>)
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 800ff20:	4d82      	ldr	r5, [pc, #520]	; (801012c <HAL_DSI_ConfigVideoMode+0x240>)
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800ff22:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 800ff26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ff28:	f022 0203 	bic.w	r2, r2, #3
 800ff2c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 800ff2e:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 800ff30:	ea47 070e 	orr.w	r7, r7, lr
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 800ff34:	f8d1 e018 	ldr.w	lr, [r1, #24]
  hdsi->Instance->VMCR |= VidCfg->Mode;
 800ff38:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 800ff3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ff3c:	ea06 0602 	and.w	r6, r6, r2
 800ff40:	63de      	str	r6, [r3, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 800ff42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ff44:	ea42 020c 	orr.w	r2, r2, ip
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 800ff48:	f8d1 c000 	ldr.w	ip, [r1]
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 800ff4c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 800ff4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ff50:	ea02 0205 	and.w	r2, r2, r5
 800ff54:	641a      	str	r2, [r3, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 800ff56:	6c1f      	ldr	r7, [r3, #64]	; 0x40
 800ff58:	ea47 0708 	orr.w	r7, r7, r8
 800ff5c:	641f      	str	r7, [r3, #64]	; 0x40
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 800ff5e:	6c5e      	ldr	r6, [r3, #68]	; 0x44
 800ff60:	ea06 0605 	and.w	r6, r6, r5
 800ff64:	645e      	str	r6, [r3, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 800ff66:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 800ff68:	ea45 050e 	orr.w	r5, r5, lr
 800ff6c:	645d      	str	r5, [r3, #68]	; 0x44
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 800ff6e:	68dd      	ldr	r5, [r3, #12]
 800ff70:	f025 0503 	bic.w	r5, r5, #3
 800ff74:	60dd      	str	r5, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 800ff76:	68da      	ldr	r2, [r3, #12]
 800ff78:	ea42 020c 	orr.w	r2, r2, ip
 800ff7c:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800ff7e:	695d      	ldr	r5, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 800ff80:	69cf      	ldr	r7, [r1, #28]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800ff82:	f025 0507 	bic.w	r5, r5, #7
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 800ff86:	e9d1 6208 	ldrd	r6, r2, [r1, #32]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800ff8a:	615d      	str	r5, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 800ff8c:	ea42 0206 	orr.w	r2, r2, r6
 800ff90:	695d      	ldr	r5, [r3, #20]
 800ff92:	ea42 0207 	orr.w	r2, r2, r7
 800ff96:	ea42 0205 	orr.w	r2, r2, r5
 800ff9a:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800ff9c:	691a      	ldr	r2, [r3, #16]
 800ff9e:	f022 020f 	bic.w	r2, r2, #15
 800ffa2:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 800ffa4:	691a      	ldr	r2, [r3, #16]
 800ffa6:	ea42 0204 	orr.w	r2, r2, r4
 800ffaa:	611a      	str	r2, [r3, #16]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800ffac:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800ffb0:	f022 020e 	bic.w	r2, r2, #14
 800ffb4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 800ffb8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800ffbc:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 800ffc0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  if (VidCfg->ColorCoding == DSI_RGB666)
 800ffc4:	d107      	bne.n	800ffd6 <HAL_DSI_ConfigVideoMode+0xea>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 800ffc6:	691c      	ldr	r4, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 800ffc8:	688d      	ldr	r5, [r1, #8]
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 800ffca:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 800ffce:	611c      	str	r4, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 800ffd0:	691a      	ldr	r2, [r3, #16]
 800ffd2:	432a      	orrs	r2, r5
 800ffd4:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 800ffd6:	6c9f      	ldr	r7, [r3, #72]	; 0x48
  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800ffd8:	2500      	movs	r5, #0
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 800ffda:	4a55      	ldr	r2, [pc, #340]	; (8010130 <HAL_DSI_ConfigVideoMode+0x244>)
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 800ffdc:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 800ffde:	4017      	ands	r7, r2
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800ffe0:	f8d1 c02c 	ldr.w	ip, [r1, #44]	; 0x2c
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 800ffe4:	f8d1 e030 	ldr.w	lr, [r1, #48]	; 0x30
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 800ffe8:	649f      	str	r7, [r3, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 800ffea:	6c9c      	ldr	r4, [r3, #72]	; 0x48
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 800ffec:	4f51      	ldr	r7, [pc, #324]	; (8010134 <HAL_DSI_ConfigVideoMode+0x248>)
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 800ffee:	4334      	orrs	r4, r6
 800fff0:	649c      	str	r4, [r3, #72]	; 0x48
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 800fff2:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 800fff4:	4016      	ands	r6, r2
 800fff6:	64de      	str	r6, [r3, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800fff8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 800fffa:	4e4f      	ldr	r6, [pc, #316]	; (8010138 <HAL_DSI_ConfigVideoMode+0x24c>)
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800fffc:	ea42 020c 	orr.w	r2, r2, ip
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8010000:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8010004:	64da      	str	r2, [r3, #76]	; 0x4c
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8010006:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010008:	4017      	ands	r7, r2
 801000a:	651f      	str	r7, [r3, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 801000c:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 801000e:	ea44 040e 	orr.w	r4, r4, lr
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8010012:	f8d1 e038 	ldr.w	lr, [r1, #56]	; 0x38
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8010016:	651c      	str	r4, [r3, #80]	; 0x50
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8010018:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 801001a:	4034      	ands	r4, r6
 801001c:	655c      	str	r4, [r3, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 801001e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010020:	ea42 020c 	orr.w	r2, r2, ip
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8010024:	f8d1 c03c 	ldr.w	ip, [r1, #60]	; 0x3c
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8010028:	655a      	str	r2, [r3, #84]	; 0x54
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 801002a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801002c:	4032      	ands	r2, r6
 801002e:	659a      	str	r2, [r3, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8010030:	6d9f      	ldr	r7, [r3, #88]	; 0x58
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8010032:	4a3d      	ldr	r2, [pc, #244]	; (8010128 <HAL_DSI_ConfigVideoMode+0x23c>)
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8010034:	ea47 070e 	orr.w	r7, r7, lr
 8010038:	659f      	str	r7, [r3, #88]	; 0x58
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 801003a:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
 801003c:	4037      	ands	r7, r6

  return HAL_OK;
 801003e:	462e      	mov	r6, r5
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8010040:	65df      	str	r7, [r3, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8010042:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 8010044:	ea44 040c 	orr.w	r4, r4, ip
 8010048:	65dc      	str	r4, [r3, #92]	; 0x5c
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 801004a:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 801004c:	4022      	ands	r2, r4
 801004e:	661a      	str	r2, [r3, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8010050:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8010052:	6c0a      	ldr	r2, [r1, #64]	; 0x40
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8010054:	f8d1 e044 	ldr.w	lr, [r1, #68]	; 0x44
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8010058:	4314      	orrs	r4, r2
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 801005a:	f8d1 c048 	ldr.w	ip, [r1, #72]	; 0x48
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 801005e:	661c      	str	r4, [r3, #96]	; 0x60
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8010060:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8010062:	f427 4700 	bic.w	r7, r7, #32768	; 0x8000
 8010066:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8010068:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801006a:	ea42 020e 	orr.w	r2, r2, lr
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 801006e:	f8d1 e04c 	ldr.w	lr, [r1, #76]	; 0x4c
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8010072:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8010074:	699f      	ldr	r7, [r3, #24]
 8010076:	f427 077f 	bic.w	r7, r7, #16711680	; 0xff0000
 801007a:	619f      	str	r7, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 801007c:	699c      	ldr	r4, [r3, #24]
 801007e:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8010082:	f8d1 c050 	ldr.w	ip, [r1, #80]	; 0x50
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8010086:	619c      	str	r4, [r3, #24]
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8010088:	699c      	ldr	r4, [r3, #24]
 801008a:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
 801008e:	619c      	str	r4, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8010090:	699a      	ldr	r2, [r3, #24]
 8010092:	ea42 020e 	orr.w	r2, r2, lr
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8010096:	f8d1 e054 	ldr.w	lr, [r1, #84]	; 0x54
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 801009a:	619a      	str	r2, [r3, #24]
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 801009c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801009e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80100a2:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 80100a4:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80100a6:	ea47 070c 	orr.w	r7, r7, ip
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 80100aa:	f8d1 c058 	ldr.w	ip, [r1, #88]	; 0x58
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 80100ae:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 80100b0:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 80100b2:	f427 5780 	bic.w	r7, r7, #4096	; 0x1000
 80100b6:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 80100b8:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80100ba:	ea44 040e 	orr.w	r4, r4, lr
 80100be:	639c      	str	r4, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 80100c0:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80100c2:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 80100c6:	639c      	str	r4, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 80100c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80100ca:	ea42 020c 	orr.w	r2, r2, ip
 80100ce:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 80100d0:	6b9f      	ldr	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 80100d2:	6dcc      	ldr	r4, [r1, #92]	; 0x5c
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 80100d4:	f427 6780 	bic.w	r7, r7, #1024	; 0x400
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 80100d8:	f8d1 e060 	ldr.w	lr, [r1, #96]	; 0x60
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 80100dc:	639f      	str	r7, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 80100de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80100e0:	4322      	orrs	r2, r4
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 80100e2:	e9d1 c719 	ldrd	ip, r7, [r1, #100]	; 0x64
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 80100e6:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 80100e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80100ea:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80100ee:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 80100f0:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80100f2:	ea44 040e 	orr.w	r4, r4, lr
 80100f6:	639c      	str	r4, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 80100f8:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80100fa:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 80100fe:	639c      	str	r4, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8010100:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8010102:	ea41 010c 	orr.w	r1, r1, ip
 8010106:	6399      	str	r1, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8010108:	6b99      	ldr	r1, [r3, #56]	; 0x38
 801010a:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 801010e:	6399      	str	r1, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8010110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010112:	433a      	orrs	r2, r7
 8010114:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_UNLOCK(hdsi);
 8010116:	7405      	strb	r5, [r0, #16]
}
 8010118:	4630      	mov	r0, r6
 801011a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hdsi);
 801011e:	2602      	movs	r6, #2
}
 8010120:	4630      	mov	r0, r6
 8010122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010126:	bf00      	nop
 8010128:	ffffc000 	.word	0xffffc000
 801012c:	ffffe000 	.word	0xffffe000
 8010130:	fffff000 	.word	0xfffff000
 8010134:	ffff8000 	.word	0xffff8000
 8010138:	fffffc00 	.word	0xfffffc00

0801013c <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 801013c:	7c03      	ldrb	r3, [r0, #16]
 801013e:	2b01      	cmp	r3, #1
 8010140:	d00e      	beq.n	8010160 <HAL_DSI_ConfigFlowControl+0x24>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8010142:	6803      	ldr	r3, [r0, #0]
 8010144:	4602      	mov	r2, r0
{
 8010146:	b430      	push	{r4, r5}
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8010148:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 801014a:	2500      	movs	r5, #0
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 801014c:	f024 041f 	bic.w	r4, r4, #31

  return HAL_OK;
 8010150:	4628      	mov	r0, r5
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8010152:	62dc      	str	r4, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8010154:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8010156:	4321      	orrs	r1, r4
 8010158:	62d9      	str	r1, [r3, #44]	; 0x2c
  __HAL_UNLOCK(hdsi);
 801015a:	7415      	strb	r5, [r2, #16]
}
 801015c:	bc30      	pop	{r4, r5}
 801015e:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8010160:	2002      	movs	r0, #2
}
 8010162:	4770      	bx	lr

08010164 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8010164:	7c03      	ldrb	r3, [r0, #16]
 8010166:	2b01      	cmp	r3, #1
 8010168:	d021      	beq.n	80101ae <HAL_DSI_Start+0x4a>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 801016a:	6803      	ldr	r3, [r0, #0]
 801016c:	2200      	movs	r2, #0
 801016e:	4601      	mov	r1, r0
  __HAL_DSI_WRAPPER_ENABLE(hdsi);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
 8010170:	4610      	mov	r0, r2
{
 8010172:	b410      	push	{r4}
 8010174:	b083      	sub	sp, #12
  __HAL_DSI_ENABLE(hdsi);
 8010176:	9200      	str	r2, [sp, #0]
 8010178:	685c      	ldr	r4, [r3, #4]
 801017a:	f044 0401 	orr.w	r4, r4, #1
 801017e:	605c      	str	r4, [r3, #4]
 8010180:	685c      	ldr	r4, [r3, #4]
 8010182:	f004 0401 	and.w	r4, r4, #1
 8010186:	9400      	str	r4, [sp, #0]
 8010188:	9c00      	ldr	r4, [sp, #0]
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 801018a:	9201      	str	r2, [sp, #4]
 801018c:	f8d3 4404 	ldr.w	r4, [r3, #1028]	; 0x404
 8010190:	f044 0408 	orr.w	r4, r4, #8
 8010194:	f8c3 4404 	str.w	r4, [r3, #1028]	; 0x404
 8010198:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
  __HAL_UNLOCK(hdsi);
 801019c:	740a      	strb	r2, [r1, #16]
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 801019e:	f003 0308 	and.w	r3, r3, #8
 80101a2:	9301      	str	r3, [sp, #4]
 80101a4:	9b01      	ldr	r3, [sp, #4]
}
 80101a6:	b003      	add	sp, #12
 80101a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80101ac:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80101ae:	2002      	movs	r0, #2
}
 80101b0:	4770      	bx	lr
 80101b2:	bf00      	nop

080101b4 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 80101b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 80101b8:	7c04      	ldrb	r4, [r0, #16]
 80101ba:	2c01      	cmp	r4, #1
 80101bc:	d022      	beq.n	8010204 <HAL_DSI_ShortWrite+0x50>
 80101be:	4699      	mov	r9, r3
 80101c0:	2301      	movs	r3, #1
 80101c2:	4617      	mov	r7, r2
 80101c4:	4688      	mov	r8, r1
 80101c6:	7403      	strb	r3, [r0, #16]
 80101c8:	4605      	mov	r5, r0
  tickstart = HAL_GetTick();
 80101ca:	f7fd fbc9 	bl	800d960 <HAL_GetTick>
 80101ce:	4606      	mov	r6, r0
 80101d0:	e005      	b.n	80101de <HAL_DSI_ShortWrite+0x2a>
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 80101d2:	f7fd fbc5 	bl	800d960 <HAL_GetTick>
 80101d6:	1b80      	subs	r0, r0, r6
 80101d8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80101dc:	d810      	bhi.n	8010200 <HAL_DSI_ShortWrite+0x4c>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80101de:	682c      	ldr	r4, [r5, #0]
 80101e0:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80101e2:	07c3      	lsls	r3, r0, #31
 80101e4:	d5f5      	bpl.n	80101d2 <HAL_DSI_ShortWrite+0x1e>
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80101e6:	ea47 2709 	orr.w	r7, r7, r9, lsl #8
 80101ea:	9b08      	ldr	r3, [sp, #32]
  return HAL_OK;
 80101ec:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80101ee:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
 80101f2:	ea47 1788 	orr.w	r7, r7, r8, lsl #6
 80101f6:	66e7      	str	r7, [r4, #108]	; 0x6c

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80101f8:	2300      	movs	r3, #0
 80101fa:	742b      	strb	r3, [r5, #16]

  return status;
}
 80101fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 8010200:	2003      	movs	r0, #3
 8010202:	e7f9      	b.n	80101f8 <HAL_DSI_ShortWrite+0x44>
  __HAL_LOCK(hdsi);
 8010204:	2002      	movs	r0, #2
}
 8010206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801020a:	bf00      	nop

0801020c <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 801020c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8010210:	7c04      	ldrb	r4, [r0, #16]
 8010212:	2c01      	cmp	r4, #1
 8010214:	d05f      	beq.n	80102d6 <HAL_DSI_LongWrite+0xca>
 8010216:	461e      	mov	r6, r3
 8010218:	2301      	movs	r3, #1
 801021a:	4690      	mov	r8, r2
 801021c:	460f      	mov	r7, r1
 801021e:	7403      	strb	r3, [r0, #16]
 8010220:	4605      	mov	r5, r0

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8010222:	f7fd fb9d 	bl	800d960 <HAL_GetTick>
 8010226:	4681      	mov	r9, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8010228:	e006      	b.n	8010238 <HAL_DSI_LongWrite+0x2c>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 801022a:	f7fd fb99 	bl	800d960 <HAL_GetTick>
 801022e:	eba0 0009 	sub.w	r0, r0, r9
 8010232:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8010236:	d84a      	bhi.n	80102ce <HAL_DSI_LongWrite+0xc2>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8010238:	682a      	ldr	r2, [r5, #0]
 801023a:	6f54      	ldr	r4, [r2, #116]	; 0x74
 801023c:	f014 0401 	ands.w	r4, r4, #1
 8010240:	d0f3      	beq.n	801022a <HAL_DSI_LongWrite+0x1e>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8010242:	2e03      	cmp	r6, #3
 8010244:	4634      	mov	r4, r6
 8010246:	bf28      	it	cs
 8010248:	2403      	movcs	r4, #3

  for (count = 0U; count < nbBytes; count++)
 801024a:	2e00      	cmp	r6, #0
 801024c:	d046      	beq.n	80102dc <HAL_DSI_LongWrite+0xd0>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 801024e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  for (count = 0U; count < nbBytes; count++)
 8010250:	2e01      	cmp	r6, #1
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8010252:	9908      	ldr	r1, [sp, #32]
 8010254:	781b      	ldrb	r3, [r3, #0]
 8010256:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  for (count = 0U; count < nbBytes; count++)
 801025a:	d909      	bls.n	8010270 <HAL_DSI_LongWrite+0x64>
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 801025c:	9909      	ldr	r1, [sp, #36]	; 0x24
  for (count = 0U; count < nbBytes; count++)
 801025e:	2e02      	cmp	r6, #2
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8010260:	7849      	ldrb	r1, [r1, #1]
 8010262:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  for (count = 0U; count < nbBytes; count++)
 8010266:	d903      	bls.n	8010270 <HAL_DSI_LongWrite+0x64>
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8010268:	9909      	ldr	r1, [sp, #36]	; 0x24
 801026a:	7889      	ldrb	r1, [r1, #2]
 801026c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
  }
  hdsi->Instance->GPDR = fifoword;
 8010270:	6713      	str	r3, [r2, #112]	; 0x70

  uicounter = NbParams - nbBytes;
  pparams += nbBytes;
 8010272:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010274:	4423      	add	r3, r4
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8010276:	1b34      	subs	r4, r6, r4
 8010278:	d016      	beq.n	80102a8 <HAL_DSI_LongWrite+0x9c>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 801027a:	2c04      	cmp	r4, #4
 801027c:	4621      	mov	r1, r4
    fifoword = 0U;
    for (count = 0U; count < nbBytes; count++)
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 801027e:	7818      	ldrb	r0, [r3, #0]
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8010280:	bf28      	it	cs
 8010282:	2104      	movcs	r1, #4
    for (count = 0U; count < nbBytes; count++)
 8010284:	2c01      	cmp	r4, #1
 8010286:	d007      	beq.n	8010298 <HAL_DSI_LongWrite+0x8c>
 8010288:	2c02      	cmp	r4, #2
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 801028a:	8818      	ldrh	r0, [r3, #0]
    for (count = 0U; count < nbBytes; count++)
 801028c:	d00b      	beq.n	80102a6 <HAL_DSI_LongWrite+0x9a>
 801028e:	2c03      	cmp	r4, #3
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8010290:	f893 c002 	ldrb.w	ip, [r3, #2]
    for (count = 0U; count < nbBytes; count++)
 8010294:	d005      	beq.n	80102a2 <HAL_DSI_LongWrite+0x96>
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8010296:	6818      	ldr	r0, [r3, #0]
  while (uicounter != 0U)
 8010298:	1a64      	subs	r4, r4, r1
    }
    hdsi->Instance->GPDR = fifoword;

    uicounter -= nbBytes;
    pparams += nbBytes;
 801029a:	440b      	add	r3, r1
    hdsi->Instance->GPDR = fifoword;
 801029c:	6710      	str	r0, [r2, #112]	; 0x70
  while (uicounter != 0U)
 801029e:	d1ec      	bne.n	801027a <HAL_DSI_LongWrite+0x6e>
 80102a0:	e002      	b.n	80102a8 <HAL_DSI_LongWrite+0x9c>
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80102a2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    hdsi->Instance->GPDR = fifoword;
 80102a6:	6710      	str	r0, [r2, #112]	; 0x70

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 80102a8:	3601      	adds	r6, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80102aa:	ea48 1787 	orr.w	r7, r8, r7, lsl #6
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80102ae:	2300      	movs	r3, #0
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80102b0:	ea4f 2806 	mov.w	r8, r6, lsl #8

  return HAL_OK;
 80102b4:	4618      	mov	r0, r3
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80102b6:	4646      	mov	r6, r8
 80102b8:	fa1f f888 	uxth.w	r8, r8
 80102bc:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
 80102c0:	ea47 0708 	orr.w	r7, r7, r8
 80102c4:	433e      	orrs	r6, r7
 80102c6:	66d6      	str	r6, [r2, #108]	; 0x6c
  __HAL_UNLOCK(hdsi);
 80102c8:	742b      	strb	r3, [r5, #16]
}
 80102ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      __HAL_UNLOCK(hdsi);
 80102ce:	742c      	strb	r4, [r5, #16]
      return HAL_TIMEOUT;
 80102d0:	2003      	movs	r0, #3
}
 80102d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hdsi);
 80102d6:	2002      	movs	r0, #2
}
 80102d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  hdsi->Instance->GPDR = fifoword;
 80102dc:	9b08      	ldr	r3, [sp, #32]
 80102de:	6713      	str	r3, [r2, #112]	; 0x70
 80102e0:	e7e2      	b.n	80102a8 <HAL_DSI_LongWrite+0x9c>
 80102e2:	bf00      	nop

080102e4 <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 80102e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80102e8:	461c      	mov	r4, r3
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 80102ea:	7c03      	ldrb	r3, [r0, #16]
{
 80102ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
  __HAL_LOCK(hdsi);
 80102f0:	2b01      	cmp	r3, #1
 80102f2:	f000 808b 	beq.w	801040c <HAL_DSI_Read+0x128>
 80102f6:	2301      	movs	r3, #1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 80102f8:	2c02      	cmp	r4, #2
 80102fa:	4605      	mov	r5, r0
 80102fc:	460f      	mov	r7, r1
 80102fe:	4616      	mov	r6, r2
  __HAL_LOCK(hdsi);
 8010300:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 8010302:	d856      	bhi.n	80103b2 <HAL_DSI_Read+0xce>
      return HAL_ERROR;
    }
  }

  /* Configure the packet to read command */
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 8010304:	f1b8 0f06 	cmp.w	r8, #6
 8010308:	d017      	beq.n	801033a <HAL_DSI_Read+0x56>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 801030a:	f1b8 0f04 	cmp.w	r8, #4
 801030e:	f000 8083 	beq.w	8010418 <HAL_DSI_Read+0x134>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 8010312:	f1b8 0f14 	cmp.w	r8, #20
 8010316:	d06f      	beq.n	80103f8 <HAL_DSI_Read+0x114>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 8010318:	f1b8 0f24 	cmp.w	r8, #36	; 0x24
 801031c:	d164      	bne.n	80103e8 <HAL_DSI_Read+0x104>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 801031e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8010320:	01bb      	lsls	r3, r7, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8010322:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010324:	7812      	ldrb	r2, [r2, #0]
 8010326:	7849      	ldrb	r1, [r1, #1]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8010328:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 801032c:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 801032e:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 8010332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010336:	66d3      	str	r3, [r2, #108]	; 0x6c
 8010338:	e007      	b.n	801034a <HAL_DSI_Read+0x66>
 801033a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 801033c:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 801033e:	021b      	lsls	r3, r3, #8
 8010340:	f043 0306 	orr.w	r3, r3, #6
 8010344:	ea43 1787 	orr.w	r7, r3, r7, lsl #6
 8010348:	66d7      	str	r7, [r2, #108]	; 0x6c

    return HAL_ERROR;
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 801034a:	f7fd fb09 	bl	800d960 <HAL_GetTick>
 801034e:	4607      	mov	r7, r0

  /* If DSI fifo is not empty, read requested bytes */
  while (((int32_t)(datasize)) > 0)
 8010350:	e005      	b.n	801035e <HAL_DSI_Read+0x7a>
        datasize--;
      }
    }

    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8010352:	f7fd fb05 	bl	800d960 <HAL_GetTick>
 8010356:	1bc0      	subs	r0, r0, r7
 8010358:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 801035c:	d820      	bhi.n	80103a0 <HAL_DSI_Read+0xbc>
  while (((int32_t)(datasize)) > 0)
 801035e:	2c00      	cmp	r4, #0
 8010360:	dd23      	ble.n	80103aa <HAL_DSI_Read+0xc6>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 8010362:	682a      	ldr	r2, [r5, #0]
 8010364:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8010366:	f013 0310 	ands.w	r3, r3, #16
 801036a:	d1f2      	bne.n	8010352 <HAL_DSI_Read+0x6e>
      fifoword = hdsi->Instance->GPDR;
 801036c:	6f12      	ldr	r2, [r2, #112]	; 0x70
      for (count = 0U; count < nbbytes; count++)
 801036e:	2c01      	cmp	r4, #1
        *pdata = (uint8_t)(fifoword >> (8U * count));
 8010370:	ea4f 2112 	mov.w	r1, r2, lsr #8
 8010374:	7032      	strb	r2, [r6, #0]
 8010376:	ea4f 4012 	mov.w	r0, r2, lsr #16
 801037a:	ea4f 6212 	mov.w	r2, r2, lsr #24
      for (count = 0U; count < nbbytes; count++)
 801037e:	d038      	beq.n	80103f2 <HAL_DSI_Read+0x10e>
 8010380:	2c02      	cmp	r4, #2
        *pdata = (uint8_t)(fifoword >> (8U * count));
 8010382:	7071      	strb	r1, [r6, #1]
      for (count = 0U; count < nbbytes; count++)
 8010384:	d045      	beq.n	8010412 <HAL_DSI_Read+0x12e>
 8010386:	2c03      	cmp	r4, #3
        *pdata = (uint8_t)(fifoword >> (8U * count));
 8010388:	70b0      	strb	r0, [r6, #2]
        datasize--;
 801038a:	f1a4 0404 	sub.w	r4, r4, #4
      for (count = 0U; count < nbbytes; count++)
 801038e:	d049      	beq.n	8010424 <HAL_DSI_Read+0x140>
        *pdata = (uint8_t)(fifoword >> (8U * count));
 8010390:	70f2      	strb	r2, [r6, #3]
        pdata++;
 8010392:	3604      	adds	r6, #4
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8010394:	f7fd fae4 	bl	800d960 <HAL_GetTick>
 8010398:	1bc0      	subs	r0, r0, r7
 801039a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 801039e:	d9de      	bls.n	801035e <HAL_DSI_Read+0x7a>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 80103a0:	2300      	movs	r3, #0

      return HAL_TIMEOUT;
 80103a2:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 80103a4:	742b      	strb	r3, [r5, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 80103a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_UNLOCK(hdsi);
 80103aa:	2000      	movs	r0, #0
 80103ac:	7428      	strb	r0, [r5, #16]
}
 80103ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  tickstart = HAL_GetTick();
 80103b2:	f7fd fad5 	bl	800d960 <HAL_GetTick>
 80103b6:	4681      	mov	r9, r0
 80103b8:	e006      	b.n	80103c8 <HAL_DSI_Read+0xe4>
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 80103ba:	f7fd fad1 	bl	800d960 <HAL_GetTick>
 80103be:	eba0 0009 	sub.w	r0, r0, r9
 80103c2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80103c6:	d80f      	bhi.n	80103e8 <HAL_DSI_Read+0x104>
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80103c8:	682b      	ldr	r3, [r5, #0]
 80103ca:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80103cc:	07d2      	lsls	r2, r2, #31
 80103ce:	d5f4      	bpl.n	80103ba <HAL_DSI_Read+0xd6>
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80103d0:	0222      	lsls	r2, r4, #8
 80103d2:	01b9      	lsls	r1, r7, #6
 80103d4:	4610      	mov	r0, r2
 80103d6:	b292      	uxth	r2, r2
 80103d8:	f041 0137 	orr.w	r1, r1, #55	; 0x37
 80103dc:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
 80103e0:	430a      	orrs	r2, r1
 80103e2:	4302      	orrs	r2, r0
 80103e4:	66da      	str	r2, [r3, #108]	; 0x6c
 80103e6:	e78d      	b.n	8010304 <HAL_DSI_Read+0x20>
      __HAL_UNLOCK(hdsi);
 80103e8:	2300      	movs	r3, #0
      return HAL_ERROR;
 80103ea:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 80103ec:	742b      	strb	r3, [r5, #16]
}
 80103ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        pdata++;
 80103f2:	3601      	adds	r6, #1
        datasize--;
 80103f4:	461c      	mov	r4, r3
 80103f6:	e7ac      	b.n	8010352 <HAL_DSI_Read+0x6e>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 80103f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80103fa:	01bb      	lsls	r3, r7, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 80103fc:	7817      	ldrb	r7, [r2, #0]
 80103fe:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8010400:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8010404:	f043 0314 	orr.w	r3, r3, #20
 8010408:	66d3      	str	r3, [r2, #108]	; 0x6c
 801040a:	e79e      	b.n	801034a <HAL_DSI_Read+0x66>
  __HAL_LOCK(hdsi);
 801040c:	2002      	movs	r0, #2
}
 801040e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        pdata++;
 8010412:	3602      	adds	r6, #2
        datasize--;
 8010414:	461c      	mov	r4, r3
 8010416:	e79c      	b.n	8010352 <HAL_DSI_Read+0x6e>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8010418:	01bf      	lsls	r7, r7, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 801041a:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 801041c:	f047 0704 	orr.w	r7, r7, #4
 8010420:	66df      	str	r7, [r3, #108]	; 0x6c
 8010422:	e792      	b.n	801034a <HAL_DSI_Read+0x66>
        pdata++;
 8010424:	3603      	adds	r6, #3
        datasize--;
 8010426:	461c      	mov	r4, r3
 8010428:	e793      	b.n	8010352 <HAL_DSI_Read+0x6e>
 801042a:	bf00      	nop

0801042c <HAL_EXTI_RegisterCallback>:
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check null pointer */
  if (hexti == NULL)
 801042c:	b118      	cbz	r0, 8010436 <HAL_EXTI_RegisterCallback+0xa>
  {
    return HAL_ERROR;
  }

  switch (CallbackID)
 801042e:	b911      	cbnz	r1, 8010436 <HAL_EXTI_RegisterCallback+0xa>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8010430:	6042      	str	r2, [r0, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010432:	4608      	mov	r0, r1
      break;
 8010434:	4770      	bx	lr

    default:
      status = HAL_ERROR;
 8010436:	2001      	movs	r0, #1
      break;
  }

  return status;
}
 8010438:	4770      	bx	lr
 801043a:	bf00      	nop

0801043c <HAL_EXTI_GetHandle>:
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 801043c:	b110      	cbz	r0, 8010444 <HAL_EXTI_GetHandle+0x8>
    return HAL_ERROR;
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 801043e:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 8010440:	2000      	movs	r0, #0
 8010442:	4770      	bx	lr
    return HAL_ERROR;
 8010444:	2001      	movs	r0, #1
  }
}
 8010446:	4770      	bx	lr

08010448 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8010448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801044c:	468e      	mov	lr, r1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801044e:	6809      	ldr	r1, [r1, #0]
{
 8010450:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8010452:	2900      	cmp	r1, #0
 8010454:	f000 80cd 	beq.w	80105f2 <HAL_GPIO_Init+0x1aa>
  uint32_t position = 0x00U;
 8010458:	2600      	movs	r6, #0
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 801045a:	f8df 8214 	ldr.w	r8, [pc, #532]	; 8010670 <HAL_GPIO_Init+0x228>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801045e:	2301      	movs	r3, #1
 8010460:	40b3      	lsls	r3, r6
    if (iocurrent != 0x00U)
 8010462:	ea13 0501 	ands.w	r5, r3, r1
 8010466:	f000 80bf 	beq.w	80105e8 <HAL_GPIO_Init+0x1a0>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801046a:	f8de 2004 	ldr.w	r2, [lr, #4]
 801046e:	0077      	lsls	r7, r6, #1
 8010470:	f04f 0c03 	mov.w	ip, #3
 8010474:	f022 0910 	bic.w	r9, r2, #16
 8010478:	fa0c fc07 	lsl.w	ip, ip, r7
 801047c:	f109 34ff 	add.w	r4, r9, #4294967295
 8010480:	ea6f 0c0c 	mvn.w	ip, ip
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8010484:	2c01      	cmp	r4, #1
 8010486:	d812      	bhi.n	80104ae <HAL_GPIO_Init+0x66>
        temp = GPIOx->OSPEEDR;
 8010488:	6884      	ldr	r4, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 801048a:	f3c2 1a00 	ubfx	sl, r2, #4, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801048e:	ea04 0b0c 	and.w	fp, r4, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8010492:	f8de 400c 	ldr.w	r4, [lr, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8010496:	fa0a fa06 	lsl.w	sl, sl, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 801049a:	40bc      	lsls	r4, r7
 801049c:	ea44 040b 	orr.w	r4, r4, fp
        GPIOx->OSPEEDR = temp;
 80104a0:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80104a2:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80104a4:	ea24 0303 	bic.w	r3, r4, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80104a8:	ea4a 0303 	orr.w	r3, sl, r3
        GPIOx->OTYPER = temp;
 80104ac:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 80104ae:	68c3      	ldr	r3, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80104b0:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80104b4:	f8de 4008 	ldr.w	r4, [lr, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80104b8:	ea03 030c 	and.w	r3, r3, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80104bc:	fa04 f407 	lsl.w	r4, r4, r7
 80104c0:	ea44 0403 	orr.w	r4, r4, r3
      GPIOx->PUPDR = temp;
 80104c4:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80104c6:	d115      	bne.n	80104f4 <HAL_GPIO_Init+0xac>
        temp = GPIOx->AFR[position >> 3U];
 80104c8:	08f3      	lsrs	r3, r6, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80104ca:	f006 0907 	and.w	r9, r6, #7
 80104ce:	f04f 0b0f 	mov.w	fp, #15
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80104d2:	f8de 4010 	ldr.w	r4, [lr, #16]
 80104d6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80104da:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 80104de:	f8d3 a020 	ldr.w	sl, [r3, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80104e2:	fa0b fb09 	lsl.w	fp, fp, r9
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80104e6:	fa04 f409 	lsl.w	r4, r4, r9
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80104ea:	ea2a 0a0b 	bic.w	sl, sl, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80104ee:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->AFR[position >> 3U] = temp;
 80104f2:	621c      	str	r4, [r3, #32]
      temp = GPIOx->MODER;
 80104f4:	6804      	ldr	r4, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80104f6:	f002 0303 	and.w	r3, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80104fa:	ea04 0c0c 	and.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80104fe:	40bb      	lsls	r3, r7
 8010500:	ea43 030c 	orr.w	r3, r3, ip
      GPIOx->MODER = temp;
 8010504:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8010506:	00d3      	lsls	r3, r2, #3
 8010508:	d56e      	bpl.n	80105e8 <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801050a:	4b53      	ldr	r3, [pc, #332]	; (8010658 <HAL_GPIO_Init+0x210>)
 801050c:	f026 0903 	bic.w	r9, r6, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8010510:	240f      	movs	r4, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010512:	f8d3 70f4 	ldr.w	r7, [r3, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8010516:	f006 0303 	and.w	r3, r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801051a:	f047 0c02 	orr.w	ip, r7, #2
 801051e:	4f4f      	ldr	r7, [pc, #316]	; (801065c <HAL_GPIO_Init+0x214>)
 8010520:	444f      	add	r7, r9
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8010522:	ea4f 0983 	mov.w	r9, r3, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010526:	4b4c      	ldr	r3, [pc, #304]	; (8010658 <HAL_GPIO_Init+0x210>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8010528:	fa04 f409 	lsl.w	r4, r4, r9
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801052c:	f8c3 c0f4 	str.w	ip, [r3, #244]	; 0xf4
 8010530:	f8d3 c0f4 	ldr.w	ip, [r3, #244]	; 0xf4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8010534:	f5a3 4388 	sub.w	r3, r3, #17408	; 0x4400
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010538:	f00c 0c02 	and.w	ip, ip, #2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801053c:	4298      	cmp	r0, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801053e:	f8cd c004 	str.w	ip, [sp, #4]
 8010542:	f8dd c004 	ldr.w	ip, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8010546:	f8d7 c008 	ldr.w	ip, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 801054a:	ea2c 0404 	bic.w	r4, ip, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801054e:	d026      	beq.n	801059e <HAL_GPIO_Init+0x156>
 8010550:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010554:	4298      	cmp	r0, r3
 8010556:	d055      	beq.n	8010604 <HAL_GPIO_Init+0x1bc>
 8010558:	4b41      	ldr	r3, [pc, #260]	; (8010660 <HAL_GPIO_Init+0x218>)
 801055a:	4298      	cmp	r0, r3
 801055c:	d04c      	beq.n	80105f8 <HAL_GPIO_Init+0x1b0>
 801055e:	4b41      	ldr	r3, [pc, #260]	; (8010664 <HAL_GPIO_Init+0x21c>)
 8010560:	4298      	cmp	r0, r3
 8010562:	d05b      	beq.n	801061c <HAL_GPIO_Init+0x1d4>
 8010564:	4b40      	ldr	r3, [pc, #256]	; (8010668 <HAL_GPIO_Init+0x220>)
 8010566:	4298      	cmp	r0, r3
 8010568:	d05e      	beq.n	8010628 <HAL_GPIO_Init+0x1e0>
 801056a:	4b40      	ldr	r3, [pc, #256]	; (801066c <HAL_GPIO_Init+0x224>)
 801056c:	4298      	cmp	r0, r3
 801056e:	d04f      	beq.n	8010610 <HAL_GPIO_Init+0x1c8>
 8010570:	f8df c100 	ldr.w	ip, [pc, #256]	; 8010674 <HAL_GPIO_Init+0x22c>
 8010574:	4560      	cmp	r0, ip
 8010576:	d05d      	beq.n	8010634 <HAL_GPIO_Init+0x1ec>
 8010578:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 8010678 <HAL_GPIO_Init+0x230>
 801057c:	4560      	cmp	r0, ip
 801057e:	d05f      	beq.n	8010640 <HAL_GPIO_Init+0x1f8>
 8010580:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 801067c <HAL_GPIO_Init+0x234>
 8010584:	4560      	cmp	r0, ip
 8010586:	d061      	beq.n	801064c <HAL_GPIO_Init+0x204>
 8010588:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 8010680 <HAL_GPIO_Init+0x238>
 801058c:	4560      	cmp	r0, ip
 801058e:	bf0c      	ite	eq
 8010590:	f04f 0c09 	moveq.w	ip, #9
 8010594:	f04f 0c0a 	movne.w	ip, #10
 8010598:	fa0c f309 	lsl.w	r3, ip, r9
 801059c:	431c      	orrs	r4, r3
        SYSCFG->EXTICR[position >> 2U] = temp;
 801059e:	60bc      	str	r4, [r7, #8]
        temp &= ~(iocurrent);
 80105a0:	43ec      	mvns	r4, r5
        temp = EXTI_CurrentCPU->IMR1;
 80105a2:	f8d8 3000 	ldr.w	r3, [r8]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80105a6:	03d7      	lsls	r7, r2, #15
        {
          temp |= iocurrent;
 80105a8:	bf4c      	ite	mi
 80105aa:	432b      	orrmi	r3, r5
        temp &= ~(iocurrent);
 80105ac:	4023      	andpl	r3, r4
        }
        EXTI_CurrentCPU->IMR1 = temp;

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80105ae:	0397      	lsls	r7, r2, #14
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80105b0:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
        EXTI_CurrentCPU->IMR1 = temp;
 80105b4:	f8c8 3000 	str.w	r3, [r8]
        temp = EXTI_CurrentCPU->EMR1;
 80105b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
          temp |= iocurrent;
 80105bc:	bf4c      	ite	mi
 80105be:	432b      	orrmi	r3, r5
        temp &= ~(iocurrent);
 80105c0:	4023      	andpl	r3, r4
        EXTI_CurrentCPU->EMR1 = temp;
 80105c2:	f8c8 3004 	str.w	r3, [r8, #4]
        temp = EXTI->RTSR1;
 80105c6:	683b      	ldr	r3, [r7, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80105c8:	02d7      	lsls	r7, r2, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 80105ca:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
          temp |= iocurrent;
 80105ce:	bf4c      	ite	mi
 80105d0:	432b      	orrmi	r3, r5
        temp &= ~(iocurrent);
 80105d2:	4023      	andpl	r3, r4

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80105d4:	0292      	lsls	r2, r2, #10
        EXTI->RTSR1 = temp;
 80105d6:	603b      	str	r3, [r7, #0]
        temp = EXTI->FTSR1;
 80105d8:	687b      	ldr	r3, [r7, #4]
        temp &= ~(iocurrent);
 80105da:	bf54      	ite	pl
 80105dc:	ea04 0503 	andpl.w	r5, r4, r3
        {
          temp |= iocurrent;
 80105e0:	431d      	orrmi	r5, r3
        }
        EXTI->FTSR1 = temp;
 80105e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80105e6:	605d      	str	r5, [r3, #4]
      }
    }

    position++;
 80105e8:	3601      	adds	r6, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80105ea:	fa31 f306 	lsrs.w	r3, r1, r6
 80105ee:	f47f af36 	bne.w	801045e <HAL_GPIO_Init+0x16>
  }
}
 80105f2:	b003      	add	sp, #12
 80105f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105f8:	f04f 0c02 	mov.w	ip, #2
 80105fc:	fa0c f309 	lsl.w	r3, ip, r9
 8010600:	431c      	orrs	r4, r3
 8010602:	e7cc      	b.n	801059e <HAL_GPIO_Init+0x156>
 8010604:	f04f 0c01 	mov.w	ip, #1
 8010608:	fa0c f309 	lsl.w	r3, ip, r9
 801060c:	431c      	orrs	r4, r3
 801060e:	e7c6      	b.n	801059e <HAL_GPIO_Init+0x156>
 8010610:	f04f 0c05 	mov.w	ip, #5
 8010614:	fa0c f309 	lsl.w	r3, ip, r9
 8010618:	431c      	orrs	r4, r3
 801061a:	e7c0      	b.n	801059e <HAL_GPIO_Init+0x156>
 801061c:	f04f 0c03 	mov.w	ip, #3
 8010620:	fa0c f309 	lsl.w	r3, ip, r9
 8010624:	431c      	orrs	r4, r3
 8010626:	e7ba      	b.n	801059e <HAL_GPIO_Init+0x156>
 8010628:	f04f 0c04 	mov.w	ip, #4
 801062c:	fa0c f309 	lsl.w	r3, ip, r9
 8010630:	431c      	orrs	r4, r3
 8010632:	e7b4      	b.n	801059e <HAL_GPIO_Init+0x156>
 8010634:	f04f 0c06 	mov.w	ip, #6
 8010638:	fa0c f309 	lsl.w	r3, ip, r9
 801063c:	431c      	orrs	r4, r3
 801063e:	e7ae      	b.n	801059e <HAL_GPIO_Init+0x156>
 8010640:	f04f 0c07 	mov.w	ip, #7
 8010644:	fa0c f309 	lsl.w	r3, ip, r9
 8010648:	431c      	orrs	r4, r3
 801064a:	e7a8      	b.n	801059e <HAL_GPIO_Init+0x156>
 801064c:	f04f 0c08 	mov.w	ip, #8
 8010650:	fa0c f309 	lsl.w	r3, ip, r9
 8010654:	431c      	orrs	r4, r3
 8010656:	e7a2      	b.n	801059e <HAL_GPIO_Init+0x156>
 8010658:	58024400 	.word	0x58024400
 801065c:	58000400 	.word	0x58000400
 8010660:	58020800 	.word	0x58020800
 8010664:	58020c00 	.word	0x58020c00
 8010668:	58021000 	.word	0x58021000
 801066c:	58021400 	.word	0x58021400
 8010670:	58000080 	.word	0x58000080
 8010674:	58021800 	.word	0x58021800
 8010678:	58021c00 	.word	0x58021c00
 801067c:	58022000 	.word	0x58022000
 8010680:	58022400 	.word	0x58022400

08010684 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8010684:	2900      	cmp	r1, #0
 8010686:	f000 80a6 	beq.w	80107d6 <HAL_GPIO_DeInit+0x152>
  uint32_t position = 0x00U;
 801068a:	2300      	movs	r3, #0
{
 801068c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010690:	f8df a180 	ldr.w	sl, [pc, #384]	; 8010814 <HAL_GPIO_DeInit+0x190>
 8010694:	b083      	sub	sp, #12
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8010696:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8010818 <HAL_GPIO_DeInit+0x194>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 801069a:	f8df 8180 	ldr.w	r8, [pc, #384]	; 801081c <HAL_GPIO_DeInit+0x198>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 801069e:	f8df b180 	ldr.w	fp, [pc, #384]	; 8010820 <HAL_GPIO_DeInit+0x19c>
    iocurrent = GPIO_Pin & (1UL << position) ;
 80106a2:	f04f 0e01 	mov.w	lr, #1
 80106a6:	fa0e f503 	lsl.w	r5, lr, r3
    if (iocurrent != 0x00U)
 80106aa:	ea15 0201 	ands.w	r2, r5, r1
 80106ae:	9201      	str	r2, [sp, #4]
 80106b0:	d075      	beq.n	801079e <HAL_GPIO_DeInit+0x11a>
 80106b2:	f023 0603 	bic.w	r6, r3, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80106b6:	f003 0203 	and.w	r2, r3, #3
 80106ba:	270f      	movs	r7, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80106bc:	4548      	cmp	r0, r9
 80106be:	4456      	add	r6, sl
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80106c0:	ea4f 0282 	mov.w	r2, r2, lsl #2
      tmp = SYSCFG->EXTICR[position >> 2U];
 80106c4:	f8d6 c008 	ldr.w	ip, [r6, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80106c8:	fa07 f702 	lsl.w	r7, r7, r2
 80106cc:	ea07 0c0c 	and.w	ip, r7, ip
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80106d0:	d021      	beq.n	8010716 <HAL_GPIO_DeInit+0x92>
 80106d2:	4558      	cmp	r0, fp
 80106d4:	d01c      	beq.n	8010710 <HAL_GPIO_DeInit+0x8c>
 80106d6:	4c4a      	ldr	r4, [pc, #296]	; (8010800 <HAL_GPIO_DeInit+0x17c>)
 80106d8:	42a0      	cmp	r0, r4
 80106da:	d06d      	beq.n	80107b8 <HAL_GPIO_DeInit+0x134>
 80106dc:	4c49      	ldr	r4, [pc, #292]	; (8010804 <HAL_GPIO_DeInit+0x180>)
 80106de:	42a0      	cmp	r0, r4
 80106e0:	d06f      	beq.n	80107c2 <HAL_GPIO_DeInit+0x13e>
 80106e2:	4c49      	ldr	r4, [pc, #292]	; (8010808 <HAL_GPIO_DeInit+0x184>)
 80106e4:	42a0      	cmp	r0, r4
 80106e6:	d062      	beq.n	80107ae <HAL_GPIO_DeInit+0x12a>
 80106e8:	4c48      	ldr	r4, [pc, #288]	; (801080c <HAL_GPIO_DeInit+0x188>)
 80106ea:	42a0      	cmp	r0, r4
 80106ec:	d074      	beq.n	80107d8 <HAL_GPIO_DeInit+0x154>
 80106ee:	4c48      	ldr	r4, [pc, #288]	; (8010810 <HAL_GPIO_DeInit+0x18c>)
 80106f0:	42a0      	cmp	r0, r4
 80106f2:	d076      	beq.n	80107e2 <HAL_GPIO_DeInit+0x15e>
 80106f4:	f8df e12c 	ldr.w	lr, [pc, #300]	; 8010824 <HAL_GPIO_DeInit+0x1a0>
 80106f8:	4570      	cmp	r0, lr
 80106fa:	d067      	beq.n	80107cc <HAL_GPIO_DeInit+0x148>
 80106fc:	f8df e128 	ldr.w	lr, [pc, #296]	; 8010828 <HAL_GPIO_DeInit+0x1a4>
 8010700:	4570      	cmp	r0, lr
 8010702:	d073      	beq.n	80107ec <HAL_GPIO_DeInit+0x168>
 8010704:	f8df e124 	ldr.w	lr, [pc, #292]	; 801082c <HAL_GPIO_DeInit+0x1a8>
 8010708:	4570      	cmp	r0, lr
 801070a:	d074      	beq.n	80107f6 <HAL_GPIO_DeInit+0x172>
 801070c:	f04f 0e0a 	mov.w	lr, #10
 8010710:	fa0e f202 	lsl.w	r2, lr, r2
 8010714:	e000      	b.n	8010718 <HAL_GPIO_DeInit+0x94>
 8010716:	2200      	movs	r2, #0
 8010718:	4594      	cmp	ip, r2
 801071a:	d11e      	bne.n	801075a <HAL_GPIO_DeInit+0xd6>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 801071c:	9a01      	ldr	r2, [sp, #4]
 801071e:	f8d8 c000 	ldr.w	ip, [r8]
 8010722:	43d4      	mvns	r4, r2
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8010724:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8010728:	ea0c 0c04 	and.w	ip, ip, r4
 801072c:	f8c8 c000 	str.w	ip, [r8]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8010730:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8010734:	ea04 0c0c 	and.w	ip, r4, ip
 8010738:	f8c8 c004 	str.w	ip, [r8, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 801073c:	f8d2 c000 	ldr.w	ip, [r2]
 8010740:	ea04 0c0c 	and.w	ip, r4, ip
 8010744:	f8c2 c000 	str.w	ip, [r2]
        EXTI->FTSR1 &= ~(iocurrent);
 8010748:	f8d2 c004 	ldr.w	ip, [r2, #4]
 801074c:	ea04 040c 	and.w	r4, r4, ip
 8010750:	6054      	str	r4, [r2, #4]

        tmp = 0x0FUL << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8010752:	68b2      	ldr	r2, [r6, #8]
 8010754:	ea22 0707 	bic.w	r7, r2, r7
 8010758:	60b7      	str	r7, [r6, #8]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 801075a:	2403      	movs	r4, #3
 801075c:	005a      	lsls	r2, r3, #1
 801075e:	f8d0 c000 	ldr.w	ip, [r0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8010762:	270f      	movs	r7, #15
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8010764:	fa04 f202 	lsl.w	r2, r4, r2
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8010768:	fa23 f604 	lsr.w	r6, r3, r4
 801076c:	f003 0407 	and.w	r4, r3, #7
 8010770:	eb00 0686 	add.w	r6, r0, r6, lsl #2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8010774:	ea4c 0c02 	orr.w	ip, ip, r2
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8010778:	00a4      	lsls	r4, r4, #2

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801077a:	43d2      	mvns	r2, r2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 801077c:	f8c0 c000 	str.w	ip, [r0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8010780:	40a7      	lsls	r7, r4
 8010782:	6a34      	ldr	r4, [r6, #32]
 8010784:	ea24 0407 	bic.w	r4, r4, r7
 8010788:	6234      	str	r4, [r6, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801078a:	68c4      	ldr	r4, [r0, #12]
 801078c:	4014      	ands	r4, r2
 801078e:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8010790:	6844      	ldr	r4, [r0, #4]
 8010792:	ea24 0505 	bic.w	r5, r4, r5
 8010796:	6045      	str	r5, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8010798:	6884      	ldr	r4, [r0, #8]
 801079a:	4022      	ands	r2, r4
 801079c:	6082      	str	r2, [r0, #8]
    }

    position++;
 801079e:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00U)
 80107a0:	fa31 f203 	lsrs.w	r2, r1, r3
 80107a4:	f47f af7d 	bne.w	80106a2 <HAL_GPIO_DeInit+0x1e>
  }
}
 80107a8:	b003      	add	sp, #12
 80107aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107ae:	f04f 0e04 	mov.w	lr, #4
 80107b2:	fa0e f202 	lsl.w	r2, lr, r2
 80107b6:	e7af      	b.n	8010718 <HAL_GPIO_DeInit+0x94>
 80107b8:	f04f 0e02 	mov.w	lr, #2
 80107bc:	fa0e f202 	lsl.w	r2, lr, r2
 80107c0:	e7aa      	b.n	8010718 <HAL_GPIO_DeInit+0x94>
 80107c2:	f04f 0e03 	mov.w	lr, #3
 80107c6:	fa0e f202 	lsl.w	r2, lr, r2
 80107ca:	e7a5      	b.n	8010718 <HAL_GPIO_DeInit+0x94>
 80107cc:	f04f 0e07 	mov.w	lr, #7
 80107d0:	fa0e f202 	lsl.w	r2, lr, r2
 80107d4:	e7a0      	b.n	8010718 <HAL_GPIO_DeInit+0x94>
 80107d6:	4770      	bx	lr
 80107d8:	f04f 0e05 	mov.w	lr, #5
 80107dc:	fa0e f202 	lsl.w	r2, lr, r2
 80107e0:	e79a      	b.n	8010718 <HAL_GPIO_DeInit+0x94>
 80107e2:	f04f 0e06 	mov.w	lr, #6
 80107e6:	fa0e f202 	lsl.w	r2, lr, r2
 80107ea:	e795      	b.n	8010718 <HAL_GPIO_DeInit+0x94>
 80107ec:	f04f 0e08 	mov.w	lr, #8
 80107f0:	fa0e f202 	lsl.w	r2, lr, r2
 80107f4:	e790      	b.n	8010718 <HAL_GPIO_DeInit+0x94>
 80107f6:	f04f 0e09 	mov.w	lr, #9
 80107fa:	fa0e f202 	lsl.w	r2, lr, r2
 80107fe:	e78b      	b.n	8010718 <HAL_GPIO_DeInit+0x94>
 8010800:	58020800 	.word	0x58020800
 8010804:	58020c00 	.word	0x58020c00
 8010808:	58021000 	.word	0x58021000
 801080c:	58021400 	.word	0x58021400
 8010810:	58021800 	.word	0x58021800
 8010814:	58000400 	.word	0x58000400
 8010818:	58020000 	.word	0x58020000
 801081c:	58000080 	.word	0x58000080
 8010820:	58020400 	.word	0x58020400
 8010824:	58021c00 	.word	0x58021c00
 8010828:	58022000 	.word	0x58022000
 801082c:	58022400 	.word	0x58022400

08010830 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8010830:	6903      	ldr	r3, [r0, #16]
 8010832:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8010834:	bf14      	ite	ne
 8010836:	2001      	movne	r0, #1
 8010838:	2000      	moveq	r0, #0
 801083a:	4770      	bx	lr

0801083c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801083c:	b902      	cbnz	r2, 8010840 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 801083e:	0409      	lsls	r1, r1, #16
 8010840:	6181      	str	r1, [r0, #24]
  }
}
 8010842:	4770      	bx	lr

08010844 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8010844:	6943      	ldr	r3, [r0, #20]
 8010846:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 801084a:	bf08      	it	eq
 801084c:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 801084e:	6181      	str	r1, [r0, #24]
  }
}
 8010850:	4770      	bx	lr
 8010852:	bf00      	nop

08010854 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8010854:	b570      	push	{r4, r5, r6, lr}
 8010856:	4604      	mov	r4, r0
 8010858:	460d      	mov	r5, r1
 801085a:	4616      	mov	r6, r2
 801085c:	1c6a      	adds	r2, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801085e:	6823      	ldr	r3, [r4, #0]
 8010860:	d12c      	bne.n	80108bc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
 8010862:	699a      	ldr	r2, [r3, #24]
 8010864:	0790      	lsls	r0, r2, #30
 8010866:	d427      	bmi.n	80108b8 <I2C_WaitOnTXISFlagUntilTimeout+0x64>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8010868:	699a      	ldr	r2, [r3, #24]
 801086a:	06d1      	lsls	r1, r2, #27
 801086c:	d5f9      	bpl.n	8010862 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801086e:	699a      	ldr	r2, [r3, #24]
 8010870:	0691      	lsls	r1, r2, #26
 8010872:	d5fc      	bpl.n	801086e <I2C_WaitOnTXISFlagUntilTimeout+0x1a>

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010874:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010876:	2110      	movs	r1, #16
 8010878:	61d9      	str	r1, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801087a:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 801087c:	699a      	ldr	r2, [r3, #24]
 801087e:	0790      	lsls	r0, r2, #30
 8010880:	d501      	bpl.n	8010886 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
    hi2c->Instance->TXDR = 0x00U;
 8010882:	2200      	movs	r2, #0
 8010884:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8010886:	699a      	ldr	r2, [r3, #24]
 8010888:	07d1      	lsls	r1, r2, #31
 801088a:	d403      	bmi.n	8010894 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 801088c:	699a      	ldr	r2, [r3, #24]
 801088e:	f042 0201 	orr.w	r2, r2, #1
 8010892:	619a      	str	r2, [r3, #24]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8010894:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8010896:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 8010898:	4e1b      	ldr	r6, [pc, #108]	; (8010908 <I2C_WaitOnTXISFlagUntilTimeout+0xb4>)
    hi2c->State = HAL_I2C_STATE_READY;
 801089a:	2520      	movs	r5, #32
      return HAL_ERROR;
 801089c:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 801089e:	4032      	ands	r2, r6
 80108a0:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80108a2:	6c63      	ldr	r3, [r4, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80108a4:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80108a8:	f043 0304 	orr.w	r3, r3, #4
 80108ac:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80108ae:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80108b2:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 80108b6:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80108b8:	2000      	movs	r0, #0
}
 80108ba:	bd70      	pop	{r4, r5, r6, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80108bc:	699a      	ldr	r2, [r3, #24]
 80108be:	0792      	lsls	r2, r2, #30
 80108c0:	d4fa      	bmi.n	80108b8 <I2C_WaitOnTXISFlagUntilTimeout+0x64>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80108c2:	699a      	ldr	r2, [r3, #24]
 80108c4:	06d0      	lsls	r0, r2, #27
 80108c6:	d41b      	bmi.n	8010900 <I2C_WaitOnTXISFlagUntilTimeout+0xac>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80108c8:	f7fd f84a 	bl	800d960 <HAL_GetTick>
 80108cc:	1b80      	subs	r0, r0, r6
 80108ce:	42a8      	cmp	r0, r5
 80108d0:	d801      	bhi.n	80108d6 <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 80108d2:	2d00      	cmp	r5, #0
 80108d4:	d1c2      	bne.n	801085c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80108d6:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80108d8:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80108da:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 80108dc:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80108de:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 80108e0:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80108e4:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80108e6:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80108ea:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 80108ee:	bd70      	pop	{r4, r5, r6, pc}
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80108f0:	f7fd f836 	bl	800d960 <HAL_GetTick>
 80108f4:	1b80      	subs	r0, r0, r6
 80108f6:	4285      	cmp	r5, r0
 80108f8:	d3ed      	bcc.n	80108d6 <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 80108fa:	2d00      	cmp	r5, #0
 80108fc:	d0eb      	beq.n	80108d6 <I2C_WaitOnTXISFlagUntilTimeout+0x82>
 80108fe:	6823      	ldr	r3, [r4, #0]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010900:	699a      	ldr	r2, [r3, #24]
 8010902:	0692      	lsls	r2, r2, #26
 8010904:	d5f4      	bpl.n	80108f0 <I2C_WaitOnTXISFlagUntilTimeout+0x9c>
 8010906:	e7b5      	b.n	8010874 <I2C_WaitOnTXISFlagUntilTimeout+0x20>
 8010908:	fe00e800 	.word	0xfe00e800

0801090c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 801090c:	b570      	push	{r4, r5, r6, lr}
 801090e:	4604      	mov	r4, r0
 8010910:	460d      	mov	r5, r1
 8010912:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010914:	6823      	ldr	r3, [r4, #0]
 8010916:	699a      	ldr	r2, [r3, #24]
 8010918:	0692      	lsls	r2, r2, #26
 801091a:	d449      	bmi.n	80109b0 <I2C_WaitOnSTOPFlagUntilTimeout+0xa4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801091c:	699a      	ldr	r2, [r3, #24]
 801091e:	06d2      	lsls	r2, r2, #27
 8010920:	d526      	bpl.n	8010970 <I2C_WaitOnSTOPFlagUntilTimeout+0x64>
 8010922:	1c68      	adds	r0, r5, #1
 8010924:	d138      	bne.n	8010998 <I2C_WaitOnSTOPFlagUntilTimeout+0x8c>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010926:	699a      	ldr	r2, [r3, #24]
 8010928:	0691      	lsls	r1, r2, #26
 801092a:	d5fc      	bpl.n	8010926 <I2C_WaitOnSTOPFlagUntilTimeout+0x1a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801092c:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801092e:	2110      	movs	r1, #16
 8010930:	61d9      	str	r1, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010932:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8010934:	699a      	ldr	r2, [r3, #24]
 8010936:	0790      	lsls	r0, r2, #30
 8010938:	d501      	bpl.n	801093e <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
    hi2c->Instance->TXDR = 0x00U;
 801093a:	2200      	movs	r2, #0
 801093c:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801093e:	699a      	ldr	r2, [r3, #24]
 8010940:	07d1      	lsls	r1, r2, #31
 8010942:	d403      	bmi.n	801094c <I2C_WaitOnSTOPFlagUntilTimeout+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8010944:	699a      	ldr	r2, [r3, #24]
 8010946:	f042 0201 	orr.w	r2, r2, #1
 801094a:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
 801094c:	685a      	ldr	r2, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801094e:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 8010950:	4e18      	ldr	r6, [pc, #96]	; (80109b4 <I2C_WaitOnSTOPFlagUntilTimeout+0xa8>)
    hi2c->State = HAL_I2C_STATE_READY;
 8010952:	2520      	movs	r5, #32
      return HAL_ERROR;
 8010954:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8010956:	4032      	ands	r2, r6
 8010958:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801095a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 801095c:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010960:	f043 0304 	orr.w	r3, r3, #4
 8010964:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8010966:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801096a:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 801096e:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010970:	f7fc fff6 	bl	800d960 <HAL_GetTick>
 8010974:	1b80      	subs	r0, r0, r6
 8010976:	42a8      	cmp	r0, r5
 8010978:	d801      	bhi.n	801097e <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
 801097a:	2d00      	cmp	r5, #0
 801097c:	d1ca      	bne.n	8010914 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801097e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8010980:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010982:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 8010984:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010986:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8010988:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801098c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801098e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010992:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 8010996:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010998:	699a      	ldr	r2, [r3, #24]
 801099a:	0692      	lsls	r2, r2, #26
 801099c:	d4c6      	bmi.n	801092c <I2C_WaitOnSTOPFlagUntilTimeout+0x20>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801099e:	f7fc ffdf 	bl	800d960 <HAL_GetTick>
 80109a2:	1b80      	subs	r0, r0, r6
 80109a4:	4285      	cmp	r5, r0
 80109a6:	d3ea      	bcc.n	801097e <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
 80109a8:	2d00      	cmp	r5, #0
 80109aa:	d0e8      	beq.n	801097e <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
 80109ac:	6823      	ldr	r3, [r4, #0]
 80109ae:	e7b8      	b.n	8010922 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 80109b0:	2000      	movs	r0, #0
}
 80109b2:	bd70      	pop	{r4, r5, r6, pc}
 80109b4:	fe00e800 	.word	0xfe00e800

080109b8 <HAL_I2C_MspInit>:
}
 80109b8:	4770      	bx	lr
 80109ba:	bf00      	nop

080109bc <HAL_I2C_Init>:
  if (hi2c == NULL)
 80109bc:	2800      	cmp	r0, #0
 80109be:	d04d      	beq.n	8010a5c <HAL_I2C_Init+0xa0>
{
 80109c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80109c2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80109c6:	4604      	mov	r4, r0
 80109c8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d040      	beq.n	8010a52 <HAL_I2C_Init+0x96>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80109d0:	2124      	movs	r1, #36	; 0x24
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80109d2:	68e5      	ldr	r5, [r4, #12]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80109d4:	e9d4 3200 	ldrd	r3, r2, [r4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80109d8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80109dc:	2d01      	cmp	r5, #1
  __HAL_I2C_DISABLE(hi2c);
 80109de:	6818      	ldr	r0, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80109e0:	f022 6170 	bic.w	r1, r2, #251658240	; 0xf000000
 80109e4:	68a2      	ldr	r2, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 80109e6:	f020 0001 	bic.w	r0, r0, #1
 80109ea:	6018      	str	r0, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80109ec:	6119      	str	r1, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80109ee:	6899      	ldr	r1, [r3, #8]
 80109f0:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80109f4:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80109f6:	d028      	beq.n	8010a4a <HAL_I2C_Init+0x8e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80109f8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80109fc:	2d02      	cmp	r5, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80109fe:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8010a00:	d102      	bne.n	8010a08 <HAL_I2C_Init+0x4c>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8010a02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010a06:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8010a08:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010a0a:	2100      	movs	r1, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8010a0c:	4814      	ldr	r0, [pc, #80]	; (8010a60 <HAL_I2C_Init+0xa4>)
  hi2c->State = HAL_I2C_STATE_READY;
 8010a0e:	2720      	movs	r7, #32
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8010a10:	69a6      	ldr	r6, [r4, #24]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8010a12:	4310      	orrs	r0, r2
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8010a14:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8010a18:	6058      	str	r0, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8010a1a:	432a      	orrs	r2, r5
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8010a1c:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8010a1e:	69e5      	ldr	r5, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8010a20:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8010a24:	6a26      	ldr	r6, [r4, #32]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8010a26:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8010a2a:	4335      	orrs	r5, r6
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8010a2c:	60d8      	str	r0, [r3, #12]
  return HAL_OK;
 8010a2e:	4608      	mov	r0, r1
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8010a30:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8010a32:	601d      	str	r5, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8010a34:	681a      	ldr	r2, [r3, #0]
 8010a36:	f042 0201 	orr.w	r2, r2, #1
 8010a3a:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010a3c:	6461      	str	r1, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8010a3e:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8010a42:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010a44:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 8010a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8010a4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010a4e:	609a      	str	r2, [r3, #8]
 8010a50:	e7da      	b.n	8010a08 <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 8010a52:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8010a56:	f7ff ffaf 	bl	80109b8 <HAL_I2C_MspInit>
 8010a5a:	e7b9      	b.n	80109d0 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 8010a5c:	2001      	movs	r0, #1
}
 8010a5e:	4770      	bx	lr
 8010a60:	02008000 	.word	0x02008000

08010a64 <HAL_I2C_MspDeInit>:
 8010a64:	4770      	bx	lr
 8010a66:	bf00      	nop

08010a68 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 8010a68:	b1b0      	cbz	r0, 8010a98 <HAL_I2C_DeInit+0x30>
  __HAL_I2C_DISABLE(hi2c);
 8010a6a:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8010a6c:	2324      	movs	r3, #36	; 0x24
{
 8010a6e:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_BUSY;
 8010a70:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8010a74:	4604      	mov	r4, r0
  __HAL_I2C_DISABLE(hi2c);
 8010a76:	6813      	ldr	r3, [r2, #0]
 8010a78:	f023 0301 	bic.w	r3, r3, #1
 8010a7c:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8010a7e:	f7ff fff1 	bl	8010a64 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010a82:	2300      	movs	r3, #0
 8010a84:	6463      	str	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8010a86:	4618      	mov	r0, r3
  hi2c->State = HAL_I2C_STATE_RESET;
 8010a88:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
 8010a8c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  hi2c->PreviousState = I2C_STATE_NONE;
 8010a90:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010a92:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 8010a96:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8010a98:	2001      	movs	r0, #1
}
 8010a9a:	4770      	bx	lr

08010a9c <HAL_I2C_Mem_Write>:
{
 8010a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010aa0:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8010aa2:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
{
 8010aa6:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
 8010aaa:	2820      	cmp	r0, #32
 8010aac:	f040 809a 	bne.w	8010be4 <HAL_I2C_Mem_Write+0x148>
    if ((pData == NULL) || (Size == 0U))
 8010ab0:	9808      	ldr	r0, [sp, #32]
 8010ab2:	2800      	cmp	r0, #0
 8010ab4:	f000 8099 	beq.w	8010bea <HAL_I2C_Mem_Write+0x14e>
 8010ab8:	f1b8 0f00 	cmp.w	r8, #0
 8010abc:	f000 8095 	beq.w	8010bea <HAL_I2C_Mem_Write+0x14e>
    __HAL_LOCK(hi2c);
 8010ac0:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8010ac4:	2801      	cmp	r0, #1
 8010ac6:	f000 808d 	beq.w	8010be4 <HAL_I2C_Mem_Write+0x148>
 8010aca:	461f      	mov	r7, r3
 8010acc:	2301      	movs	r3, #1
 8010ace:	4691      	mov	r9, r2
 8010ad0:	460e      	mov	r6, r1
 8010ad2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    tickstart = HAL_GetTick();
 8010ad6:	f7fc ff43 	bl	800d960 <HAL_GetTick>
 8010ada:	4605      	mov	r5, r0
 8010adc:	e005      	b.n	8010aea <HAL_I2C_Mem_Write+0x4e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010ade:	f7fc ff3f 	bl	800d960 <HAL_GetTick>
 8010ae2:	1b40      	subs	r0, r0, r5
 8010ae4:	2819      	cmp	r0, #25
 8010ae6:	f200 8086 	bhi.w	8010bf6 <HAL_I2C_Mem_Write+0x15a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010aea:	6823      	ldr	r3, [r4, #0]
 8010aec:	6998      	ldr	r0, [r3, #24]
 8010aee:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 8010af2:	d1f4      	bne.n	8010ade <HAL_I2C_Mem_Write+0x42>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8010af4:	2121      	movs	r1, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8010af6:	2240      	movs	r2, #64	; 0x40
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010af8:	fa5f fc87 	uxtb.w	ip, r7
 8010afc:	f3c6 0609 	ubfx	r6, r6, #0, #10
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8010b00:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010b04:	4978      	ldr	r1, [pc, #480]	; (8010ce8 <HAL_I2C_Mem_Write+0x24c>)
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8010b06:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010b0a:	462a      	mov	r2, r5
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010b0c:	6460      	str	r0, [r4, #68]	; 0x44
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010b0e:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
    hi2c->XferCount = Size;
 8010b12:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010b16:	f8df e1e0 	ldr.w	lr, [pc, #480]	; 8010cf8 <HAL_I2C_Mem_Write+0x25c>
 8010b1a:	ea4c 0c06 	orr.w	ip, ip, r6
 8010b1e:	f8d3 8004 	ldr.w	r8, [r3, #4]
    hi2c->pBuffPtr  = pData;
 8010b22:	9908      	ldr	r1, [sp, #32]
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010b24:	ea08 0e0e 	and.w	lr, r8, lr
    hi2c->XferISR   = NULL;
 8010b28:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->pBuffPtr  = pData;
 8010b2a:	6261      	str	r1, [r4, #36]	; 0x24
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010b2c:	4620      	mov	r0, r4
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010b2e:	ea4c 0c0e 	orr.w	ip, ip, lr
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010b32:	990a      	ldr	r1, [sp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010b34:	f8c3 c004 	str.w	ip, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010b38:	f7ff fe8c 	bl	8010854 <I2C_WaitOnTXISFlagUntilTimeout>
 8010b3c:	2800      	cmp	r0, #0
 8010b3e:	f040 808c 	bne.w	8010c5a <HAL_I2C_Mem_Write+0x1be>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8010b42:	2f01      	cmp	r7, #1
 8010b44:	6820      	ldr	r0, [r4, #0]
 8010b46:	d163      	bne.n	8010c10 <HAL_I2C_Mem_Write+0x174>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8010b48:	fa5f f389 	uxtb.w	r3, r9
 8010b4c:	6283      	str	r3, [r0, #40]	; 0x28
 8010b4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b50:	3301      	adds	r3, #1
 8010b52:	f040 8087 	bne.w	8010c64 <HAL_I2C_Mem_Write+0x1c8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010b56:	6983      	ldr	r3, [r0, #24]
 8010b58:	061f      	lsls	r7, r3, #24
 8010b5a:	d5fc      	bpl.n	8010b56 <HAL_I2C_Mem_Write+0xba>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010b5c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8010b5e:	2bff      	cmp	r3, #255	; 0xff
 8010b60:	f240 809f 	bls.w	8010ca2 <HAL_I2C_Mem_Write+0x206>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010b64:	6843      	ldr	r3, [r0, #4]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010b66:	21ff      	movs	r1, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010b68:	4f60      	ldr	r7, [pc, #384]	; (8010cec <HAL_I2C_Mem_Write+0x250>)
 8010b6a:	4a61      	ldr	r2, [pc, #388]	; (8010cf0 <HAL_I2C_Mem_Write+0x254>)
 8010b6c:	403b      	ands	r3, r7
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010b6e:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010b70:	4332      	orrs	r2, r6
 8010b72:	4313      	orrs	r3, r2
 8010b74:	6043      	str	r3, [r0, #4]
 8010b76:	4f5e      	ldr	r7, [pc, #376]	; (8010cf0 <HAL_I2C_Mem_Write+0x254>)
 8010b78:	f8df 8170 	ldr.w	r8, [pc, #368]	; 8010cec <HAL_I2C_Mem_Write+0x250>
 8010b7c:	4337      	orrs	r7, r6
 8010b7e:	e004      	b.n	8010b8a <HAL_I2C_Mem_Write+0xee>
    while (hi2c->XferCount > 0U);
 8010b80:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8010b82:	b29b      	uxth	r3, r3
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	f000 809a 	beq.w	8010cbe <HAL_I2C_Mem_Write+0x222>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010b8a:	462a      	mov	r2, r5
 8010b8c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010b8e:	4620      	mov	r0, r4
 8010b90:	f7ff fe60 	bl	8010854 <I2C_WaitOnTXISFlagUntilTimeout>
 8010b94:	2800      	cmp	r0, #0
 8010b96:	f040 8082 	bne.w	8010c9e <HAL_I2C_Mem_Write+0x202>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8010b9a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010b9c:	6821      	ldr	r1, [r4, #0]
 8010b9e:	f810 2b01 	ldrb.w	r2, [r0], #1
      hi2c->XferSize--;
 8010ba2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8010ba4:	628a      	str	r2, [r1, #40]	; 0x28
      hi2c->XferCount--;
 8010ba6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8010ba8:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 8010baa:	6260      	str	r0, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8010bac:	3a01      	subs	r2, #1
      hi2c->XferSize--;
 8010bae:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 8010bb0:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 8010bb2:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8010bb4:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010bb6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8010bb8:	b292      	uxth	r2, r2
 8010bba:	2a00      	cmp	r2, #0
 8010bbc:	d0e0      	beq.n	8010b80 <HAL_I2C_Mem_Write+0xe4>
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d1de      	bne.n	8010b80 <HAL_I2C_Mem_Write+0xe4>
 8010bc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010bc4:	3301      	adds	r3, #1
 8010bc6:	d132      	bne.n	8010c2e <HAL_I2C_Mem_Write+0x192>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010bc8:	698b      	ldr	r3, [r1, #24]
 8010bca:	061a      	lsls	r2, r3, #24
 8010bcc:	d5fc      	bpl.n	8010bc8 <HAL_I2C_Mem_Write+0x12c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010bce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8010bd0:	2bff      	cmp	r3, #255	; 0xff
 8010bd2:	d955      	bls.n	8010c80 <HAL_I2C_Mem_Write+0x1e4>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010bd4:	684b      	ldr	r3, [r1, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8010bd6:	22ff      	movs	r2, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010bd8:	ea03 0308 	and.w	r3, r3, r8
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8010bdc:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010bde:	433b      	orrs	r3, r7
 8010be0:	604b      	str	r3, [r1, #4]
 8010be2:	e7cd      	b.n	8010b80 <HAL_I2C_Mem_Write+0xe4>
    return HAL_BUSY;
 8010be4:	2002      	movs	r0, #2
}
 8010be6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8010bea:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
 8010bee:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8010bf0:	6463      	str	r3, [r4, #68]	; 0x44
}
 8010bf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010bf6:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8010bf8:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010bfa:	2200      	movs	r2, #0
          return HAL_ERROR;
 8010bfc:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010bfe:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8010c00:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010c04:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8010c06:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010c0a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8010c0e:	e7ea      	b.n	8010be6 <HAL_I2C_Mem_Write+0x14a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8010c10:	ea4f 2319 	mov.w	r3, r9, lsr #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010c14:	462a      	mov	r2, r5
 8010c16:	990a      	ldr	r1, [sp, #40]	; 0x28
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8010c18:	6283      	str	r3, [r0, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010c1a:	4620      	mov	r0, r4
 8010c1c:	f7ff fe1a 	bl	8010854 <I2C_WaitOnTXISFlagUntilTimeout>
 8010c20:	b9d8      	cbnz	r0, 8010c5a <HAL_I2C_Mem_Write+0x1be>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8010c22:	fa5f f389 	uxtb.w	r3, r9
 8010c26:	6820      	ldr	r0, [r4, #0]
 8010c28:	6283      	str	r3, [r0, #40]	; 0x28
 8010c2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c2c:	e790      	b.n	8010b50 <HAL_I2C_Mem_Write+0xb4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010c2e:	698b      	ldr	r3, [r1, #24]
 8010c30:	061b      	lsls	r3, r3, #24
 8010c32:	d4cc      	bmi.n	8010bce <HAL_I2C_Mem_Write+0x132>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010c34:	f7fc fe94 	bl	800d960 <HAL_GetTick>
 8010c38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c3a:	1b40      	subs	r0, r0, r5
 8010c3c:	4283      	cmp	r3, r0
 8010c3e:	d3da      	bcc.n	8010bf6 <HAL_I2C_Mem_Write+0x15a>
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d0d8      	beq.n	8010bf6 <HAL_I2C_Mem_Write+0x15a>
 8010c44:	6821      	ldr	r1, [r4, #0]
 8010c46:	e7bd      	b.n	8010bc4 <HAL_I2C_Mem_Write+0x128>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010c48:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8010c4a:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010c4c:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010c4e:	430b      	orrs	r3, r1
 8010c50:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8010c52:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010c56:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8010c5a:	2300      	movs	r3, #0
      return HAL_ERROR;
 8010c5c:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 8010c5e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8010c62:	e7c0      	b.n	8010be6 <HAL_I2C_Mem_Write+0x14a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010c64:	6983      	ldr	r3, [r0, #24]
 8010c66:	0619      	lsls	r1, r3, #24
 8010c68:	f53f af78 	bmi.w	8010b5c <HAL_I2C_Mem_Write+0xc0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010c6c:	f7fc fe78 	bl	800d960 <HAL_GetTick>
 8010c70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c72:	1b40      	subs	r0, r0, r5
 8010c74:	4283      	cmp	r3, r0
 8010c76:	d3e7      	bcc.n	8010c48 <HAL_I2C_Mem_Write+0x1ac>
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d0e5      	beq.n	8010c48 <HAL_I2C_Mem_Write+0x1ac>
 8010c7c:	6820      	ldr	r0, [r4, #0]
 8010c7e:	e767      	b.n	8010b50 <HAL_I2C_Mem_Write+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 8010c80:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010c82:	f046 7300 	orr.w	r3, r6, #33554432	; 0x2000000
 8010c86:	6848      	ldr	r0, [r1, #4]
          hi2c->XferSize = hi2c->XferCount;
 8010c88:	b292      	uxth	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010c8a:	ea00 0008 	and.w	r0, r0, r8
 8010c8e:	fa5f fc82 	uxtb.w	ip, r2
          hi2c->XferSize = hi2c->XferCount;
 8010c92:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010c94:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8010c98:	4303      	orrs	r3, r0
 8010c9a:	604b      	str	r3, [r1, #4]
 8010c9c:	e770      	b.n	8010b80 <HAL_I2C_Mem_Write+0xe4>
        return HAL_ERROR;
 8010c9e:	2001      	movs	r0, #1
 8010ca0:	e7a1      	b.n	8010be6 <HAL_I2C_Mem_Write+0x14a>
      hi2c->XferSize = hi2c->XferCount;
 8010ca2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010ca4:	f046 7300 	orr.w	r3, r6, #33554432	; 0x2000000
 8010ca8:	6841      	ldr	r1, [r0, #4]
      hi2c->XferSize = hi2c->XferCount;
 8010caa:	b292      	uxth	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010cac:	4f0f      	ldr	r7, [pc, #60]	; (8010cec <HAL_I2C_Mem_Write+0x250>)
 8010cae:	4039      	ands	r1, r7
 8010cb0:	b2d7      	uxtb	r7, r2
      hi2c->XferSize = hi2c->XferCount;
 8010cb2:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010cb4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010cb8:	430b      	orrs	r3, r1
 8010cba:	6043      	str	r3, [r0, #4]
 8010cbc:	e75b      	b.n	8010b76 <HAL_I2C_Mem_Write+0xda>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010cbe:	462a      	mov	r2, r5
 8010cc0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010cc2:	4620      	mov	r0, r4
 8010cc4:	f7ff fe22 	bl	801090c <I2C_WaitOnSTOPFlagUntilTimeout>
 8010cc8:	2800      	cmp	r0, #0
 8010cca:	d1e8      	bne.n	8010c9e <HAL_I2C_Mem_Write+0x202>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010ccc:	6823      	ldr	r3, [r4, #0]
 8010cce:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 8010cd0:	4d08      	ldr	r5, [pc, #32]	; (8010cf4 <HAL_I2C_Mem_Write+0x258>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010cd2:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8010cd4:	685a      	ldr	r2, [r3, #4]
 8010cd6:	402a      	ands	r2, r5
 8010cd8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8010cda:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8010cde:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8010ce2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8010ce6:	e77e      	b.n	8010be6 <HAL_I2C_Mem_Write+0x14a>
 8010ce8:	81002000 	.word	0x81002000
 8010cec:	fc009c00 	.word	0xfc009c00
 8010cf0:	01ff0000 	.word	0x01ff0000
 8010cf4:	fe00e800 	.word	0xfe00e800
 8010cf8:	fc009800 	.word	0xfc009800

08010cfc <HAL_I2C_Mem_Read>:
{
 8010cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d00:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8010d02:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
{
 8010d06:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
 8010d0a:	2820      	cmp	r0, #32
{
 8010d0c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8010d0e:	f040 8087 	bne.w	8010e20 <HAL_I2C_Mem_Read+0x124>
    if ((pData == NULL) || (Size == 0U))
 8010d12:	9808      	ldr	r0, [sp, #32]
 8010d14:	2800      	cmp	r0, #0
 8010d16:	f000 8086 	beq.w	8010e26 <HAL_I2C_Mem_Read+0x12a>
 8010d1a:	f1ba 0f00 	cmp.w	sl, #0
 8010d1e:	f000 8082 	beq.w	8010e26 <HAL_I2C_Mem_Read+0x12a>
    __HAL_LOCK(hi2c);
 8010d22:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8010d26:	2801      	cmp	r0, #1
 8010d28:	d07a      	beq.n	8010e20 <HAL_I2C_Mem_Read+0x124>
 8010d2a:	4698      	mov	r8, r3
 8010d2c:	2301      	movs	r3, #1
 8010d2e:	4691      	mov	r9, r2
 8010d30:	460f      	mov	r7, r1
 8010d32:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    tickstart = HAL_GetTick();
 8010d36:	f7fc fe13 	bl	800d960 <HAL_GetTick>
 8010d3a:	4606      	mov	r6, r0
 8010d3c:	e004      	b.n	8010d48 <HAL_I2C_Mem_Read+0x4c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010d3e:	f7fc fe0f 	bl	800d960 <HAL_GetTick>
 8010d42:	1b80      	subs	r0, r0, r6
 8010d44:	2819      	cmp	r0, #25
 8010d46:	d87d      	bhi.n	8010e44 <HAL_I2C_Mem_Read+0x148>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010d48:	6823      	ldr	r3, [r4, #0]
 8010d4a:	6998      	ldr	r0, [r3, #24]
 8010d4c:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 8010d50:	d1f5      	bne.n	8010d3e <HAL_I2C_Mem_Read+0x42>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8010d52:	2122      	movs	r1, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8010d54:	2240      	movs	r2, #64	; 0x40
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010d56:	fa5f fc88 	uxtb.w	ip, r8
 8010d5a:	f3c7 0709 	ubfx	r7, r7, #0, #10
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8010d5e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010d62:	497d      	ldr	r1, [pc, #500]	; (8010f58 <HAL_I2C_Mem_Read+0x25c>)
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8010d64:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010d68:	4632      	mov	r2, r6
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010d6a:	6460      	str	r0, [r4, #68]	; 0x44
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010d6c:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
    hi2c->XferCount = Size;
 8010d70:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010d74:	f8df e1f0 	ldr.w	lr, [pc, #496]	; 8010f68 <HAL_I2C_Mem_Read+0x26c>
 8010d78:	ea4c 0c07 	orr.w	ip, ip, r7
 8010d7c:	f8d3 a004 	ldr.w	sl, [r3, #4]
    hi2c->pBuffPtr  = pData;
 8010d80:	9908      	ldr	r1, [sp, #32]
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010d82:	ea0a 0e0e 	and.w	lr, sl, lr
    hi2c->XferISR   = NULL;
 8010d86:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->pBuffPtr  = pData;
 8010d88:	6261      	str	r1, [r4, #36]	; 0x24
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010d8a:	4620      	mov	r0, r4
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010d8c:	ea4c 0c0e 	orr.w	ip, ip, lr
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010d90:	4629      	mov	r1, r5
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010d92:	f8c3 c004 	str.w	ip, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010d96:	f7ff fd5d 	bl	8010854 <I2C_WaitOnTXISFlagUntilTimeout>
 8010d9a:	2800      	cmp	r0, #0
 8010d9c:	f040 8094 	bne.w	8010ec8 <HAL_I2C_Mem_Read+0x1cc>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8010da0:	f1b8 0f01 	cmp.w	r8, #1
 8010da4:	6820      	ldr	r0, [r4, #0]
 8010da6:	d16d      	bne.n	8010e84 <HAL_I2C_Mem_Read+0x188>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8010da8:	fa5f f389 	uxtb.w	r3, r9
 8010dac:	6283      	str	r3, [r0, #40]	; 0x28
 8010dae:	1c69      	adds	r1, r5, #1
 8010db0:	f040 809e 	bne.w	8010ef0 <HAL_I2C_Mem_Read+0x1f4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010db4:	6983      	ldr	r3, [r0, #24]
 8010db6:	065a      	lsls	r2, r3, #25
 8010db8:	d5fc      	bpl.n	8010db4 <HAL_I2C_Mem_Read+0xb8>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010dba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8010dbc:	2bff      	cmp	r3, #255	; 0xff
 8010dbe:	f240 80a4 	bls.w	8010f0a <HAL_I2C_Mem_Read+0x20e>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010dc2:	6843      	ldr	r3, [r0, #4]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010dc4:	21ff      	movs	r1, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010dc6:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8010f68 <HAL_I2C_Mem_Read+0x26c>
 8010dca:	4a64      	ldr	r2, [pc, #400]	; (8010f5c <HAL_I2C_Mem_Read+0x260>)
 8010dcc:	ea03 030c 	and.w	r3, r3, ip
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010dd0:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010dd2:	433a      	orrs	r2, r7
 8010dd4:	4313      	orrs	r3, r2
 8010dd6:	6043      	str	r3, [r0, #4]
 8010dd8:	f8df 8190 	ldr.w	r8, [pc, #400]	; 8010f6c <HAL_I2C_Mem_Read+0x270>
 8010ddc:	f8df 9190 	ldr.w	r9, [pc, #400]	; 8010f70 <HAL_I2C_Mem_Read+0x274>
 8010de0:	ea47 0808 	orr.w	r8, r7, r8
 8010de4:	1c69      	adds	r1, r5, #1
 8010de6:	d15b      	bne.n	8010ea0 <HAL_I2C_Mem_Read+0x1a4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010de8:	6983      	ldr	r3, [r0, #24]
 8010dea:	075a      	lsls	r2, r3, #29
 8010dec:	d5fc      	bpl.n	8010de8 <HAL_I2C_Mem_Read+0xec>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8010dee:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8010df0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010df2:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8010df4:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8010df6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8010df8:	3901      	subs	r1, #1
      hi2c->pBuffPtr++;
 8010dfa:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8010dfc:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 8010dfe:	b289      	uxth	r1, r1
      hi2c->pBuffPtr++;
 8010e00:	3201      	adds	r2, #1
      hi2c->XferSize--;
 8010e02:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 8010e04:	8561      	strh	r1, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010e06:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8010e08:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010e0a:	b289      	uxth	r1, r1
      hi2c->pBuffPtr++;
 8010e0c:	6262      	str	r2, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010e0e:	b903      	cbnz	r3, 8010e12 <HAL_I2C_Mem_Read+0x116>
 8010e10:	bb31      	cbnz	r1, 8010e60 <HAL_I2C_Mem_Read+0x164>
    while (hi2c->XferCount > 0U);
 8010e12:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8010e14:	b29b      	uxth	r3, r3
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	f000 8088 	beq.w	8010f2c <HAL_I2C_Mem_Read+0x230>
 8010e1c:	6820      	ldr	r0, [r4, #0]
 8010e1e:	e7e1      	b.n	8010de4 <HAL_I2C_Mem_Read+0xe8>
    return HAL_BUSY;
 8010e20:	2002      	movs	r0, #2
}
 8010e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8010e26:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
 8010e2a:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8010e2c:	6463      	str	r3, [r4, #68]	; 0x44
}
 8010e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010e32:	6993      	ldr	r3, [r2, #24]
 8010e34:	061b      	lsls	r3, r3, #24
 8010e36:	d419      	bmi.n	8010e6c <HAL_I2C_Mem_Read+0x170>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010e38:	f7fc fd92 	bl	800d960 <HAL_GetTick>
 8010e3c:	1b80      	subs	r0, r0, r6
 8010e3e:	4285      	cmp	r5, r0
 8010e40:	d300      	bcc.n	8010e44 <HAL_I2C_Mem_Read+0x148>
 8010e42:	b96d      	cbnz	r5, 8010e60 <HAL_I2C_Mem_Read+0x164>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010e44:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8010e46:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010e48:	2200      	movs	r2, #0
          return HAL_ERROR;
 8010e4a:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010e4c:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8010e4e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010e52:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8010e54:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010e58:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 8010e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e60:	1c68      	adds	r0, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010e62:	6822      	ldr	r2, [r4, #0]
 8010e64:	d1e5      	bne.n	8010e32 <HAL_I2C_Mem_Read+0x136>
 8010e66:	6993      	ldr	r3, [r2, #24]
 8010e68:	0619      	lsls	r1, r3, #24
 8010e6a:	d5fc      	bpl.n	8010e66 <HAL_I2C_Mem_Read+0x16a>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010e6c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8010e6e:	2bff      	cmp	r3, #255	; 0xff
 8010e70:	d92f      	bls.n	8010ed2 <HAL_I2C_Mem_Read+0x1d6>
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010e72:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8010e74:	21ff      	movs	r1, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010e76:	ea03 0309 	and.w	r3, r3, r9
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8010e7a:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010e7c:	ea43 0308 	orr.w	r3, r3, r8
 8010e80:	6053      	str	r3, [r2, #4]
 8010e82:	e7c6      	b.n	8010e12 <HAL_I2C_Mem_Read+0x116>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8010e84:	ea4f 2319 	mov.w	r3, r9, lsr #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010e88:	4632      	mov	r2, r6
 8010e8a:	4629      	mov	r1, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8010e8c:	6283      	str	r3, [r0, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010e8e:	4620      	mov	r0, r4
 8010e90:	f7ff fce0 	bl	8010854 <I2C_WaitOnTXISFlagUntilTimeout>
 8010e94:	b9c0      	cbnz	r0, 8010ec8 <HAL_I2C_Mem_Read+0x1cc>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8010e96:	fa5f f389 	uxtb.w	r3, r9
 8010e9a:	6820      	ldr	r0, [r4, #0]
 8010e9c:	6283      	str	r3, [r0, #40]	; 0x28
 8010e9e:	e786      	b.n	8010dae <HAL_I2C_Mem_Read+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010ea0:	6983      	ldr	r3, [r0, #24]
 8010ea2:	075b      	lsls	r3, r3, #29
 8010ea4:	d4a3      	bmi.n	8010dee <HAL_I2C_Mem_Read+0xf2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010ea6:	f7fc fd5b 	bl	800d960 <HAL_GetTick>
 8010eaa:	1b80      	subs	r0, r0, r6
 8010eac:	4285      	cmp	r5, r0
 8010eae:	d3c9      	bcc.n	8010e44 <HAL_I2C_Mem_Read+0x148>
 8010eb0:	2d00      	cmp	r5, #0
 8010eb2:	d1b3      	bne.n	8010e1c <HAL_I2C_Mem_Read+0x120>
 8010eb4:	e7c6      	b.n	8010e44 <HAL_I2C_Mem_Read+0x148>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010eb6:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8010eb8:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010eba:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010ebc:	430b      	orrs	r3, r1
 8010ebe:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8010ec0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010ec4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8010ec8:	2300      	movs	r3, #0
      return HAL_ERROR;
 8010eca:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 8010ecc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8010ed0:	e7a7      	b.n	8010e22 <HAL_I2C_Mem_Read+0x126>
          hi2c->XferSize = hi2c->XferCount;
 8010ed2:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010ed4:	f047 7300 	orr.w	r3, r7, #33554432	; 0x2000000
 8010ed8:	6850      	ldr	r0, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 8010eda:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010edc:	ea00 0009 	and.w	r0, r0, r9
 8010ee0:	fa5f fc81 	uxtb.w	ip, r1
          hi2c->XferSize = hi2c->XferCount;
 8010ee4:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010ee6:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8010eea:	4303      	orrs	r3, r0
 8010eec:	6053      	str	r3, [r2, #4]
 8010eee:	e790      	b.n	8010e12 <HAL_I2C_Mem_Read+0x116>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010ef0:	6983      	ldr	r3, [r0, #24]
 8010ef2:	065b      	lsls	r3, r3, #25
 8010ef4:	f53f af61 	bmi.w	8010dba <HAL_I2C_Mem_Read+0xbe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010ef8:	f7fc fd32 	bl	800d960 <HAL_GetTick>
 8010efc:	1b80      	subs	r0, r0, r6
 8010efe:	4285      	cmp	r5, r0
 8010f00:	d3d9      	bcc.n	8010eb6 <HAL_I2C_Mem_Read+0x1ba>
 8010f02:	2d00      	cmp	r5, #0
 8010f04:	d0d7      	beq.n	8010eb6 <HAL_I2C_Mem_Read+0x1ba>
 8010f06:	6820      	ldr	r0, [r4, #0]
 8010f08:	e751      	b.n	8010dae <HAL_I2C_Mem_Read+0xb2>
      hi2c->XferSize = hi2c->XferCount;
 8010f0a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010f0c:	4b14      	ldr	r3, [pc, #80]	; (8010f60 <HAL_I2C_Mem_Read+0x264>)
      hi2c->XferSize = hi2c->XferCount;
 8010f0e:	b292      	uxth	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010f10:	6841      	ldr	r1, [r0, #4]
 8010f12:	433b      	orrs	r3, r7
 8010f14:	f8df e050 	ldr.w	lr, [pc, #80]	; 8010f68 <HAL_I2C_Mem_Read+0x26c>
 8010f18:	fa5f fc82 	uxtb.w	ip, r2
      hi2c->XferSize = hi2c->XferCount;
 8010f1c:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8010f1e:	ea01 020e 	and.w	r2, r1, lr
 8010f22:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8010f26:	4313      	orrs	r3, r2
 8010f28:	6043      	str	r3, [r0, #4]
 8010f2a:	e755      	b.n	8010dd8 <HAL_I2C_Mem_Read+0xdc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010f2c:	4632      	mov	r2, r6
 8010f2e:	4629      	mov	r1, r5
 8010f30:	4620      	mov	r0, r4
 8010f32:	f7ff fceb 	bl	801090c <I2C_WaitOnSTOPFlagUntilTimeout>
 8010f36:	b968      	cbnz	r0, 8010f54 <HAL_I2C_Mem_Read+0x258>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010f38:	6823      	ldr	r3, [r4, #0]
 8010f3a:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 8010f3c:	4d09      	ldr	r5, [pc, #36]	; (8010f64 <HAL_I2C_Mem_Read+0x268>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010f3e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8010f40:	685a      	ldr	r2, [r3, #4]
 8010f42:	402a      	ands	r2, r5
 8010f44:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8010f46:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8010f4a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8010f4e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8010f52:	e766      	b.n	8010e22 <HAL_I2C_Mem_Read+0x126>
      return HAL_ERROR;
 8010f54:	2001      	movs	r0, #1
 8010f56:	e764      	b.n	8010e22 <HAL_I2C_Mem_Read+0x126>
 8010f58:	80002000 	.word	0x80002000
 8010f5c:	81ff2400 	.word	0x81ff2400
 8010f60:	82002400 	.word	0x82002400
 8010f64:	fe00e800 	.word	0xfe00e800
 8010f68:	fc009800 	.word	0xfc009800
 8010f6c:	01ff0000 	.word	0x01ff0000
 8010f70:	fc009c00 	.word	0xfc009c00

08010f74 <HAL_I2C_GetState>:
  return hi2c->State;
 8010f74:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8010f78:	4770      	bx	lr
 8010f7a:	bf00      	nop

08010f7c <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8010f7c:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 8010f7e:	4770      	bx	lr

08010f80 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010f80:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8010f84:	b2db      	uxtb	r3, r3
 8010f86:	2b20      	cmp	r3, #32
{
 8010f88:	b470      	push	{r4, r5, r6}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8010f8a:	d11f      	bne.n	8010fcc <HAL_I2CEx_ConfigAnalogFilter+0x4c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010f8c:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8010f90:	2a01      	cmp	r2, #1
 8010f92:	d01b      	beq.n	8010fcc <HAL_I2CEx_ConfigAnalogFilter+0x4c>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8010f94:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8010f96:	2424      	movs	r4, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010f98:	2600      	movs	r6, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 8010f9a:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8010f9e:	6815      	ldr	r5, [r2, #0]

    return HAL_OK;
 8010fa0:	4634      	mov	r4, r6
    __HAL_I2C_DISABLE(hi2c);
 8010fa2:	f025 0501 	bic.w	r5, r5, #1
 8010fa6:	6015      	str	r5, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8010fa8:	6815      	ldr	r5, [r2, #0]
 8010faa:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 8010fae:	6015      	str	r5, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8010fb0:	6815      	ldr	r5, [r2, #0]
 8010fb2:	4329      	orrs	r1, r5
 8010fb4:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8010fb6:	6811      	ldr	r1, [r2, #0]
 8010fb8:	f041 0101 	orr.w	r1, r1, #1
 8010fbc:	6011      	str	r1, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8010fbe:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8010fc2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  }
  else
  {
    return HAL_BUSY;
  }
}
 8010fc6:	4620      	mov	r0, r4
 8010fc8:	bc70      	pop	{r4, r5, r6}
 8010fca:	4770      	bx	lr
    return HAL_BUSY;
 8010fcc:	2402      	movs	r4, #2
}
 8010fce:	4620      	mov	r0, r4
 8010fd0:	bc70      	pop	{r4, r5, r6}
 8010fd2:	4770      	bx	lr

08010fd4 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010fd4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8010fd8:	b2db      	uxtb	r3, r3
 8010fda:	2b20      	cmp	r3, #32
{
 8010fdc:	b470      	push	{r4, r5, r6}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8010fde:	d11e      	bne.n	801101e <HAL_I2CEx_ConfigDigitalFilter+0x4a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010fe0:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8010fe4:	2a01      	cmp	r2, #1
 8010fe6:	d01a      	beq.n	801101e <HAL_I2CEx_ConfigDigitalFilter+0x4a>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8010fe8:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8010fea:	2424      	movs	r4, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010fec:	2600      	movs	r6, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 8010fee:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8010ff2:	6814      	ldr	r4, [r2, #0]

    return HAL_OK;
 8010ff4:	4635      	mov	r5, r6
    __HAL_I2C_DISABLE(hi2c);
 8010ff6:	f024 0401 	bic.w	r4, r4, #1
 8010ffa:	6014      	str	r4, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 8010ffc:	6814      	ldr	r4, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8010ffe:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 8011002:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 8011006:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8011008:	6811      	ldr	r1, [r2, #0]
 801100a:	f041 0101 	orr.w	r1, r1, #1
 801100e:	6011      	str	r1, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8011010:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8011014:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  }
  else
  {
    return HAL_BUSY;
  }
}
 8011018:	4628      	mov	r0, r5
 801101a:	bc70      	pop	{r4, r5, r6}
 801101c:	4770      	bx	lr
    return HAL_BUSY;
 801101e:	2502      	movs	r5, #2
}
 8011020:	4628      	mov	r0, r5
 8011022:	bc70      	pop	{r4, r5, r6}
 8011024:	4770      	bx	lr
 8011026:	bf00      	nop

08011028 <HAL_LTDC_MspInit>:
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8011028:	4770      	bx	lr
 801102a:	bf00      	nop

0801102c <HAL_LTDC_Init>:
  if (hltdc == NULL)
 801102c:	2800      	cmp	r0, #0
 801102e:	d06d      	beq.n	801110c <HAL_LTDC_Init+0xe0>
{
 8011030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8011032:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8011036:	4604      	mov	r4, r0
 8011038:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801103c:	2b00      	cmp	r3, #0
 801103e:	d060      	beq.n	8011102 <HAL_LTDC_Init+0xd6>
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8011040:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8011042:	2502      	movs	r5, #2
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8011044:	68e6      	ldr	r6, [r4, #12]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8011046:	2100      	movs	r1, #0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8011048:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 801104c:	6925      	ldr	r5, [r4, #16]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 801104e:	6967      	ldr	r7, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8011050:	f8d4 c018 	ldr.w	ip, [r4, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8011054:	e9d4 3200 	ldrd	r3, r2, [r4]
 8011058:	4302      	orrs	r2, r0
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 801105a:	6998      	ldr	r0, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 801105c:	4332      	orrs	r2, r6
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 801105e:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8011062:	4e2b      	ldr	r6, [pc, #172]	; (8011110 <HAL_LTDC_Init+0xe4>)
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8011064:	6198      	str	r0, [r3, #24]
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8011066:	432a      	orrs	r2, r5
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8011068:	6998      	ldr	r0, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 801106a:	2501      	movs	r5, #1
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 801106c:	4302      	orrs	r2, r0
 801106e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8011070:	689a      	ldr	r2, [r3, #8]
 8011072:	4032      	ands	r2, r6
 8011074:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8011076:	6898      	ldr	r0, [r3, #8]
 8011078:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 801107c:	69e7      	ldr	r7, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 801107e:	ea40 000c 	orr.w	r0, r0, ip
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8011082:	f8d4 c020 	ldr.w	ip, [r4, #32]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8011086:	6098      	str	r0, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8011088:	68d8      	ldr	r0, [r3, #12]
 801108a:	4030      	ands	r0, r6
 801108c:	60d8      	str	r0, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 801108e:	68da      	ldr	r2, [r3, #12]
 8011090:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8011094:	6a67      	ldr	r7, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8011096:	ea42 020c 	orr.w	r2, r2, ip
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 801109a:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 801109e:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80110a0:	691a      	ldr	r2, [r3, #16]
 80110a2:	4032      	ands	r2, r6
 80110a4:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80110a6:	6918      	ldr	r0, [r3, #16]
 80110a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
  tmp = (hltdc->Init.TotalWidth << 16U);
 80110ac:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80110ae:	ea40 000c 	orr.w	r0, r0, ip
 80110b2:	6118      	str	r0, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80110b4:	6958      	ldr	r0, [r3, #20]
 80110b6:	4006      	ands	r6, r0
 80110b8:	615e      	str	r6, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80110ba:	695a      	ldr	r2, [r3, #20]
 80110bc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80110be:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80110c2:	4302      	orrs	r2, r0
 80110c4:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80110c6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80110c8:	f894 7035 	ldrb.w	r7, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80110cc:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80110d0:	f894 6036 	ldrb.w	r6, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80110d4:	62d8      	str	r0, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80110d6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80110d8:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 80110dc:	4302      	orrs	r2, r0
  return HAL_OK;
 80110de:	4608      	mov	r0, r1
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80110e0:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 80110e4:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80110e8:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80110ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80110ec:	f042 0206 	orr.w	r2, r2, #6
 80110f0:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 80110f2:	699a      	ldr	r2, [r3, #24]
 80110f4:	432a      	orrs	r2, r5
 80110f6:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80110f8:	f8c4 10a4 	str.w	r1, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 80110fc:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
}
 8011100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hltdc->Lock = HAL_UNLOCKED;
 8011102:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8011106:	f7ff ff8f 	bl	8011028 <HAL_LTDC_MspInit>
 801110a:	e799      	b.n	8011040 <HAL_LTDC_Init+0x14>
    return HAL_ERROR;
 801110c:	2001      	movs	r0, #1
}
 801110e:	4770      	bx	lr
 8011110:	f000f800 	.word	0xf000f800

08011114 <HAL_LTDC_ErrorCallback>:
 8011114:	4770      	bx	lr
 8011116:	bf00      	nop

08011118 <HAL_LTDC_LineEventCallback>:
 8011118:	4770      	bx	lr
 801111a:	bf00      	nop

0801111c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 801111c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 801111e:	6803      	ldr	r3, [r0, #0]
{
 8011120:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8011122:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8011124:	6b5e      	ldr	r6, [r3, #52]	; 0x34

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8011126:	0769      	lsls	r1, r5, #29
 8011128:	d501      	bpl.n	801112e <HAL_LTDC_IRQHandler+0x12>
 801112a:	0772      	lsls	r2, r6, #29
 801112c:	d41d      	bmi.n	801116a <HAL_LTDC_IRQHandler+0x4e>
    HAL_LTDC_ErrorCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 801112e:	07ab      	lsls	r3, r5, #30
 8011130:	d501      	bpl.n	8011136 <HAL_LTDC_IRQHandler+0x1a>
 8011132:	07b7      	lsls	r7, r6, #30
 8011134:	d42d      	bmi.n	8011192 <HAL_LTDC_IRQHandler+0x76>
    HAL_LTDC_ErrorCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8011136:	07e8      	lsls	r0, r5, #31
 8011138:	d501      	bpl.n	801113e <HAL_LTDC_IRQHandler+0x22>
 801113a:	07f1      	lsls	r1, r6, #31
 801113c:	d440      	bmi.n	80111c0 <HAL_LTDC_IRQHandler+0xa4>
    HAL_LTDC_LineEventCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 801113e:	072a      	lsls	r2, r5, #28
 8011140:	d501      	bpl.n	8011146 <HAL_LTDC_IRQHandler+0x2a>
 8011142:	0733      	lsls	r3, r6, #28
 8011144:	d400      	bmi.n	8011148 <HAL_LTDC_IRQHandler+0x2c>
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8011146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8011148:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 801114a:	2608      	movs	r6, #8
    hltdc->State = HAL_LTDC_STATE_READY;
 801114c:	2501      	movs	r5, #1
    __HAL_UNLOCK(hltdc);
 801114e:	2100      	movs	r1, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8011150:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_LTDC_ReloadEventCallback(hltdc);
 8011152:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8011154:	f022 0208 	bic.w	r2, r2, #8
 8011158:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 801115a:	63de      	str	r6, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 801115c:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8011160:	f884 10a0 	strb.w	r1, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8011164:	f7f0 fddc 	bl	8001d20 <HAL_LTDC_ReloadEventCallback>
}
 8011168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 801116a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 801116c:	2104      	movs	r1, #4
    __HAL_UNLOCK(hltdc);
 801116e:	2700      	movs	r7, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8011170:	f022 0204 	bic.w	r2, r2, #4
 8011174:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8011176:	63d9      	str	r1, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8011178:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 801117c:	f880 70a0 	strb.w	r7, [r0, #160]	; 0xa0
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8011180:	f043 0301 	orr.w	r3, r3, #1
 8011184:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8011188:	f880 10a1 	strb.w	r1, [r0, #161]	; 0xa1
    HAL_LTDC_ErrorCallback(hltdc);
 801118c:	f7ff ffc2 	bl	8011114 <HAL_LTDC_ErrorCallback>
 8011190:	e7cd      	b.n	801112e <HAL_LTDC_IRQHandler+0x12>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8011192:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8011194:	2002      	movs	r0, #2
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8011196:	2104      	movs	r1, #4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8011198:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801119a:	f022 0202 	bic.w	r2, r2, #2
 801119e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_UNLOCK(hltdc);
 80111a0:	2200      	movs	r2, #0
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80111a2:	63d8      	str	r0, [r3, #60]	; 0x3c
    HAL_LTDC_ErrorCallback(hltdc);
 80111a4:	4620      	mov	r0, r4
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80111a6:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 80111aa:	f884 20a0 	strb.w	r2, [r4, #160]	; 0xa0
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80111ae:	f043 0302 	orr.w	r3, r3, #2
 80111b2:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80111b6:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
    HAL_LTDC_ErrorCallback(hltdc);
 80111ba:	f7ff ffab 	bl	8011114 <HAL_LTDC_ErrorCallback>
 80111be:	e7ba      	b.n	8011136 <HAL_LTDC_IRQHandler+0x1a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80111c0:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80111c2:	2101      	movs	r1, #1
    __HAL_UNLOCK(hltdc);
 80111c4:	2700      	movs	r7, #0
    HAL_LTDC_LineEventCallback(hltdc);
 80111c6:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80111c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80111ca:	f022 0201 	bic.w	r2, r2, #1
 80111ce:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80111d0:	63d9      	str	r1, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 80111d2:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80111d6:	f884 70a0 	strb.w	r7, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 80111da:	f7ff ff9d 	bl	8011118 <HAL_LTDC_LineEventCallback>
 80111de:	e7ae      	b.n	801113e <HAL_LTDC_IRQHandler+0x22>

080111e0 <HAL_LTDC_ConfigLayer>:
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80111e0:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80111e4:	2b01      	cmp	r3, #1
 80111e6:	f000 80b9 	beq.w	801135c <HAL_LTDC_ConfigLayer+0x17c>
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80111ea:	ea4f 1cc2 	mov.w	ip, r2, lsl #7
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80111ee:	2302      	movs	r3, #2
{
 80111f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80111f4:	f10c 0c84 	add.w	ip, ip, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80111f8:	6806      	ldr	r6, [r0, #0]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80111fa:	f04f 0834 	mov.w	r8, #52	; 0x34
 80111fe:	460d      	mov	r5, r1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8011200:	eb06 040c 	add.w	r4, r6, ip
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8011204:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8011208:	fb08 0202 	mla	r2, r8, r2, r0
 801120c:	4689      	mov	r9, r1
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 801120e:	68f1      	ldr	r1, [r6, #12]
 8011210:	4607      	mov	r7, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8011212:	6863      	ldr	r3, [r4, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8011214:	f102 0838 	add.w	r8, r2, #56	; 0x38
  __HAL_LOCK(hltdc);
 8011218:	f04f 0201 	mov.w	r2, #1
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 801121c:	f3c1 4a0b 	ubfx	sl, r1, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8011220:	f403 4e70 	and.w	lr, r3, #61440	; 0xf000
  __HAL_LOCK(hltdc);
 8011224:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8011228:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 801122c:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 8011230:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 8011234:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 8011238:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 801123c:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 8011240:	f8d9 3000 	ldr.w	r3, [r9]
  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8011244:	4848      	ldr	r0, [pc, #288]	; (8011368 <HAL_LTDC_ConfigLayer+0x188>)
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8011246:	f8c8 3000 	str.w	r3, [r8]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 801124a:	686b      	ldr	r3, [r5, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 801124c:	f8c4 e004 	str.w	lr, [r4, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8011250:	f8d5 e000 	ldr.w	lr, [r5]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8011254:	449a      	add	sl, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8011256:	68f1      	ldr	r1, [r6, #12]
 8011258:	f10e 0801 	add.w	r8, lr, #1
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 801125c:	f8d5 900c 	ldr.w	r9, [r5, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8011260:	f3c1 410b 	ubfx	r1, r1, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8011264:	68aa      	ldr	r2, [r5, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8011266:	4441      	add	r1, r8
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8011268:	f8d5 8010 	ldr.w	r8, [r5, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 801126c:	3201      	adds	r2, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 801126e:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8011272:	f8d5 a018 	ldr.w	sl, [r5, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8011276:	6061      	str	r1, [r4, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8011278:	68f1      	ldr	r1, [r6, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 801127a:	f8d4 b008 	ldr.w	fp, [r4, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 801127e:	f3c1 010a 	ubfx	r1, r1, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8011282:	f40b 4b70 	and.w	fp, fp, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8011286:	4449      	add	r1, r9
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8011288:	f8d5 9014 	ldr.w	r9, [r5, #20]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 801128c:	f8c4 b008 	str.w	fp, [r4, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8011290:	f8d6 b00c 	ldr.w	fp, [r6, #12]
 8011294:	f3cb 0b0a 	ubfx	fp, fp, #0, #11
 8011298:	445a      	add	r2, fp
 801129a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801129e:	60a2      	str	r2, [r4, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80112a0:	6922      	ldr	r2, [r4, #16]
 80112a2:	f022 0207 	bic.w	r2, r2, #7
 80112a6:	6122      	str	r2, [r4, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80112a8:	f8c4 8010 	str.w	r8, [r4, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80112ac:	69a2      	ldr	r2, [r4, #24]
 80112ae:	2200      	movs	r2, #0
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80112b0:	f895 1031 	ldrb.w	r1, [r5, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80112b4:	f895 b032 	ldrb.w	fp, [r5, #50]	; 0x32
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80112b8:	61a2      	str	r2, [r4, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80112ba:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
 80112be:	ea42 620a 	orr.w	r2, r2, sl, lsl #24
 80112c2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80112c6:	6a29      	ldr	r1, [r5, #32]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80112c8:	ea42 4a0b 	orr.w	sl, r2, fp, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80112cc:	69ea      	ldr	r2, [r5, #28]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80112ce:	f8c4 a018 	str.w	sl, [r4, #24]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80112d2:	4311      	orrs	r1, r2
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80112d4:	6962      	ldr	r2, [r4, #20]
 80112d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80112da:	6162      	str	r2, [r4, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80112dc:	f8c4 9014 	str.w	r9, [r4, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80112e0:	69e2      	ldr	r2, [r4, #28]
 80112e2:	4010      	ands	r0, r2
 80112e4:	61e0      	str	r0, [r4, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80112e6:	61e1      	str	r1, [r4, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80112e8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80112ea:	2200      	movs	r2, #0
 80112ec:	62a2      	str	r2, [r4, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80112ee:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80112f0:	62a2      	str	r2, [r4, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80112f2:	f1b8 0f00 	cmp.w	r8, #0
 80112f6:	d00b      	beq.n	8011310 <HAL_LTDC_ConfigLayer+0x130>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80112f8:	f1b8 0f01 	cmp.w	r8, #1
 80112fc:	d030      	beq.n	8011360 <HAL_LTDC_ConfigLayer+0x180>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80112fe:	f1a8 0202 	sub.w	r2, r8, #2
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8011302:	2a02      	cmp	r2, #2
 8011304:	d902      	bls.n	801130c <HAL_LTDC_ConfigLayer+0x12c>
 8011306:	f1b8 0f07 	cmp.w	r8, #7
 801130a:	d12b      	bne.n	8011364 <HAL_LTDC_ConfigLayer+0x184>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 801130c:	2202      	movs	r2, #2
 801130e:	e000      	b.n	8011312 <HAL_LTDC_ConfigLayer+0x132>
    tmp = 4U;
 8011310:	2204      	movs	r2, #4
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8011312:	eba3 030e 	sub.w	r3, r3, lr
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8011316:	e9d5 1e0a 	ldrd	r1, lr, [r5, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 801131a:	fb02 f303 	mul.w	r3, r2, r3
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 801131e:	2501      	movs	r5, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8011320:	fb01 f202 	mul.w	r2, r1, r2
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8011324:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8011326:	3307      	adds	r3, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8011328:	f001 21e0 	and.w	r1, r1, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 801132c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8011330:	4a0e      	ldr	r2, [pc, #56]	; (801136c <HAL_LTDC_ConfigLayer+0x18c>)
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8011332:	62e1      	str	r1, [r4, #44]	; 0x2c
  __HAL_UNLOCK(hltdc);
 8011334:	2100      	movs	r1, #0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8011336:	62e3      	str	r3, [r4, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8011338:	6b23      	ldr	r3, [r4, #48]	; 0x30
  return HAL_OK;
 801133a:	4608      	mov	r0, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 801133c:	401a      	ands	r2, r3
 801133e:	6322      	str	r2, [r4, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8011340:	f8c4 e030 	str.w	lr, [r4, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8011344:	f856 300c 	ldr.w	r3, [r6, ip]
 8011348:	432b      	orrs	r3, r5
 801134a:	f846 300c 	str.w	r3, [r6, ip]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 801134e:	6275      	str	r5, [r6, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8011350:	f887 50a1 	strb.w	r5, [r7, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8011354:	f887 10a0 	strb.w	r1, [r7, #160]	; 0xa0
}
 8011358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(hltdc);
 801135c:	2002      	movs	r0, #2
}
 801135e:	4770      	bx	lr
    tmp = 3U;
 8011360:	2203      	movs	r2, #3
 8011362:	e7d6      	b.n	8011312 <HAL_LTDC_ConfigLayer+0x132>
    tmp = 1U;
 8011364:	2201      	movs	r2, #1
 8011366:	e7d4      	b.n	8011312 <HAL_LTDC_ConfigLayer+0x132>
 8011368:	fffff8f8 	.word	0xfffff8f8
 801136c:	fffff800 	.word	0xfffff800

08011370 <HAL_LTDC_Reload>:
  __HAL_LOCK(hltdc);
 8011370:	f890 20a0 	ldrb.w	r2, [r0, #160]	; 0xa0
 8011374:	2a01      	cmp	r2, #1
 8011376:	d013      	beq.n	80113a0 <HAL_LTDC_Reload+0x30>
 8011378:	4603      	mov	r3, r0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 801137a:	2002      	movs	r0, #2
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 801137c:	681a      	ldr	r2, [r3, #0]
{
 801137e:	b470      	push	{r4, r5, r6}
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8011380:	f883 00a1 	strb.w	r0, [r3, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8011384:	2500      	movs	r5, #0
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 8011386:	6b54      	ldr	r4, [r2, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 8011388:	2601      	movs	r6, #1
  return HAL_OK;
 801138a:	4628      	mov	r0, r5
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 801138c:	f044 0408 	orr.w	r4, r4, #8
 8011390:	6354      	str	r4, [r2, #52]	; 0x34
  hltdc->Instance->SRCR = ReloadType;
 8011392:	6251      	str	r1, [r2, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8011394:	f883 60a1 	strb.w	r6, [r3, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8011398:	f883 50a0 	strb.w	r5, [r3, #160]	; 0xa0
}
 801139c:	bc70      	pop	{r4, r5, r6}
 801139e:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 80113a0:	2002      	movs	r0, #2
}
 80113a2:	4770      	bx	lr

080113a4 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80113a4:	b538      	push	{r3, r4, r5, lr}
 80113a6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80113a8:	f7fc fada 	bl	800d960 <HAL_GetTick>

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80113ac:	2c00      	cmp	r4, #0
 80113ae:	d05a      	beq.n	8011466 <HAL_MDMA_Init+0xc2>

  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 80113b0:	2202      	movs	r2, #2

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 80113b2:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hmdma);
 80113b4:	2100      	movs	r1, #0
 80113b6:	4605      	mov	r5, r0
  hmdma->State = HAL_MDMA_STATE_BUSY;
 80113b8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_MDMA_DISABLE(hmdma);
 80113bc:	68da      	ldr	r2, [r3, #12]
  __HAL_UNLOCK(hmdma);
 80113be:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  __HAL_MDMA_DISABLE(hmdma);
 80113c2:	f022 0201 	bic.w	r2, r2, #1
 80113c6:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80113c8:	e005      	b.n	80113d6 <HAL_MDMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 80113ca:	f7fc fac9 	bl	800d960 <HAL_GetTick>
 80113ce:	1b40      	subs	r0, r0, r5
 80113d0:	2805      	cmp	r0, #5
 80113d2:	d841      	bhi.n	8011458 <HAL_MDMA_Init+0xb4>
 80113d4:	6823      	ldr	r3, [r4, #0]
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80113d6:	68da      	ldr	r2, [r3, #12]
 80113d8:	07d2      	lsls	r2, r2, #31
 80113da:	d4f6      	bmi.n	80113ca <HAL_MDMA_Init+0x26>
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80113dc:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
 80113e0:	69e1      	ldr	r1, [r4, #28]
 80113e2:	4302      	orrs	r2, r0
 80113e4:	e9d4 5008 	ldrd	r5, r0, [r4, #32]
 80113e8:	430a      	orrs	r2, r1
 80113ea:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80113ec:	432a      	orrs	r2, r5
 80113ee:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80113f0:	4302      	orrs	r2, r0
 80113f2:	68a0      	ldr	r0, [r4, #8]
 80113f4:	430a      	orrs	r2, r1
 80113f6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80113f8:	432a      	orrs	r2, r5
 80113fa:	1e4d      	subs	r5, r1, #1
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80113fc:	68e1      	ldr	r1, [r4, #12]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80113fe:	4302      	orrs	r2, r0
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8011400:	6920      	ldr	r0, [r4, #16]
 8011402:	4308      	orrs	r0, r1
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8011404:	6861      	ldr	r1, [r4, #4]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8011406:	ea42 4285 	orr.w	r2, r2, r5, lsl #18
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 801140a:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 801140e:	60d8      	str	r0, [r3, #12]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8011410:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8011412:	d103      	bne.n	801141c <HAL_MDMA_Init+0x78>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8011414:	691a      	ldr	r2, [r3, #16]
 8011416:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 801141a:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 801141c:	2000      	movs	r0, #0

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 801141e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8011420:	4282      	cmp	r2, r0
  hmdma->Instance->CBNDTR = 0;
 8011422:	6158      	str	r0, [r3, #20]
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8011424:	db2e      	blt.n	8011484 <HAL_MDMA_Init+0xe0>
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8011426:	b292      	uxth	r2, r2
 8011428:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 801142a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801142c:	2a00      	cmp	r2, #0
 801142e:	db1f      	blt.n	8011470 <HAL_MDMA_Init+0xcc>
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8011430:	6a18      	ldr	r0, [r3, #32]
 8011432:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 8011436:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8011438:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 801143c:	d015      	beq.n	801146a <HAL_MDMA_Init+0xc6>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 801143e:	b2c9      	uxtb	r1, r1
 8011440:	6299      	str	r1, [r3, #40]	; 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8011442:	2200      	movs	r2, #0
  hmdma->State = HAL_MDMA_STATE_READY;
 8011444:	2101      	movs	r1, #1
  hmdma->Instance->CLAR =  0;
 8011446:	625a      	str	r2, [r3, #36]	; 0x24
  return HAL_OK;
 8011448:	4610      	mov	r0, r2
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 801144a:	66a2      	str	r2, [r4, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
 801144c:	6662      	str	r2, [r4, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 801144e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 8011452:	e9c4 2217 	strd	r2, r2, [r4, #92]	; 0x5c
}
 8011456:	bd38      	pop	{r3, r4, r5, pc}
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8011458:	2240      	movs	r2, #64	; 0x40
      hmdma->State = HAL_MDMA_STATE_ERROR;
 801145a:	2303      	movs	r3, #3
      return HAL_ERROR;
 801145c:	2001      	movs	r0, #1
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 801145e:	66a2      	str	r2, [r4, #104]	; 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8011460:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8011464:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8011466:	2001      	movs	r0, #1
}
 8011468:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CTBR = 0;
 801146a:	2200      	movs	r2, #0
 801146c:	629a      	str	r2, [r3, #40]	; 0x28
 801146e:	e7e8      	b.n	8011442 <HAL_MDMA_Init+0x9e>
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8011470:	6958      	ldr	r0, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8011472:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8011474:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
 8011478:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 801147a:	6a18      	ldr	r0, [r3, #32]
 801147c:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 8011480:	621a      	str	r2, [r3, #32]
 8011482:	e7d9      	b.n	8011438 <HAL_MDMA_Init+0x94>
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8011484:	6958      	ldr	r0, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8011486:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8011488:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 801148c:	b292      	uxth	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 801148e:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8011490:	621a      	str	r2, [r3, #32]
 8011492:	e7ca      	b.n	801142a <HAL_MDMA_Init+0x86>

08011494 <HAL_MDMA_Start_IT>:
  if(hmdma == NULL)
 8011494:	2800      	cmp	r0, #0
 8011496:	d06b      	beq.n	8011570 <HAL_MDMA_Start_IT+0xdc>
{
 8011498:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hmdma);
 801149a:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 801149e:	2c01      	cmp	r4, #1
 80114a0:	d06f      	beq.n	8011582 <HAL_MDMA_Start_IT+0xee>
 80114a2:	2501      	movs	r5, #1
  if(HAL_MDMA_STATE_READY == hmdma->State)
 80114a4:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 80114a8:	42ac      	cmp	r4, r5
  __HAL_LOCK(hmdma);
 80114aa:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 80114ae:	d006      	beq.n	80114be <HAL_MDMA_Start_IT+0x2a>
    __HAL_UNLOCK(hmdma);
 80114b0:	2200      	movs	r2, #0
    return HAL_BUSY;
 80114b2:	2302      	movs	r3, #2
    __HAL_UNLOCK(hmdma);
 80114b4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 80114b8:	4618      	mov	r0, r3
 80114ba:	bcf0      	pop	{r4, r5, r6, r7}
 80114bc:	4770      	bx	lr
    __HAL_MDMA_DISABLE(hmdma);
 80114be:	6804      	ldr	r4, [r0, #0]
    hmdma->State = HAL_MDMA_STATE_BUSY;
 80114c0:	2502      	movs	r5, #2
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 80114c2:	2600      	movs	r6, #0
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 80114c4:	f3c3 0310 	ubfx	r3, r3, #0, #17
    hmdma->State = HAL_MDMA_STATE_BUSY;
 80114c8:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 80114cc:	f04f 0c1f 	mov.w	ip, #31
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 80114d0:	6686      	str	r6, [r0, #104]	; 0x68
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 80114d2:	f5a6 3600 	sub.w	r6, r6, #131072	; 0x20000
    __HAL_MDMA_DISABLE(hmdma);
 80114d6:	68e7      	ldr	r7, [r4, #12]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 80114d8:	f011 4f5f 	tst.w	r1, #3741319168	; 0xdf000000
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 80114dc:	9d04      	ldr	r5, [sp, #16]
    __HAL_MDMA_DISABLE(hmdma);
 80114de:	f027 0701 	bic.w	r7, r7, #1
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 80114e2:	f105 35ff 	add.w	r5, r5, #4294967295
    __HAL_MDMA_DISABLE(hmdma);
 80114e6:	60e7      	str	r7, [r4, #12]
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 80114e8:	6967      	ldr	r7, [r4, #20]
 80114ea:	ea06 0607 	and.w	r6, r6, r7
 80114ee:	ea43 0306 	orr.w	r3, r3, r6
 80114f2:	6163      	str	r3, [r4, #20]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 80114f4:	6963      	ldr	r3, [r4, #20]
 80114f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80114fa:	ea43 5505 	orr.w	r5, r3, r5, lsl #20
 80114fe:	6165      	str	r5, [r4, #20]
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 8011500:	f8c4 c004 	str.w	ip, [r4, #4]
  hmdma->Instance->CDAR = DstAddress;
 8011504:	61e2      	str	r2, [r4, #28]
  hmdma->Instance->CSAR = SrcAddress;
 8011506:	61a1      	str	r1, [r4, #24]
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 8011508:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801150a:	bf0c      	ite	eq
 801150c:	f443 3380 	orreq.w	r3, r3, #65536	; 0x10000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 8011510:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8011514:	f012 4f5f 	tst.w	r2, #3741319168	; 0xdf000000
    if(hmdma->XferBlockCpltCallback != NULL)
 8011518:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 801151a:	62a3      	str	r3, [r4, #40]	; 0x28
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 801151c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801151e:	bf0c      	ite	eq
 8011520:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 8011524:	f423 3300 	bicne.w	r3, r3, #131072	; 0x20000
 8011528:	62a3      	str	r3, [r4, #40]	; 0x28
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 801152a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 801152c:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 801152e:	68e3      	ldr	r3, [r4, #12]
 8011530:	f043 0306 	orr.w	r3, r3, #6
 8011534:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
 8011536:	b11a      	cbz	r2, 8011540 <HAL_MDMA_Start_IT+0xac>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 8011538:	68e3      	ldr	r3, [r4, #12]
 801153a:	f043 0310 	orr.w	r3, r3, #16
 801153e:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8011540:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8011542:	b11b      	cbz	r3, 801154c <HAL_MDMA_Start_IT+0xb8>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 8011544:	68e3      	ldr	r3, [r4, #12]
 8011546:	f043 0308 	orr.w	r3, r3, #8
 801154a:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
 801154c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 801154e:	b11b      	cbz	r3, 8011558 <HAL_MDMA_Start_IT+0xc4>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 8011550:	68e3      	ldr	r3, [r4, #12]
 8011552:	f043 0320 	orr.w	r3, r3, #32
 8011556:	60e3      	str	r3, [r4, #12]
    __HAL_MDMA_ENABLE(hmdma);
 8011558:	68e3      	ldr	r3, [r4, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 801155a:	6842      	ldr	r2, [r0, #4]
    __HAL_MDMA_ENABLE(hmdma);
 801155c:	f043 0301 	orr.w	r3, r3, #1
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8011560:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
    __HAL_MDMA_ENABLE(hmdma);
 8011564:	60e3      	str	r3, [r4, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8011566:	d006      	beq.n	8011576 <HAL_MDMA_Start_IT+0xe2>
  return HAL_OK;
 8011568:	2300      	movs	r3, #0
}
 801156a:	bcf0      	pop	{r4, r5, r6, r7}
 801156c:	4618      	mov	r0, r3
 801156e:	4770      	bx	lr
    return HAL_ERROR;
 8011570:	2301      	movs	r3, #1
}
 8011572:	4618      	mov	r0, r3
 8011574:	4770      	bx	lr
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 8011576:	68e2      	ldr	r2, [r4, #12]
  return HAL_OK;
 8011578:	2300      	movs	r3, #0
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 801157a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 801157e:	60e2      	str	r2, [r4, #12]
 8011580:	e79a      	b.n	80114b8 <HAL_MDMA_Start_IT+0x24>
  __HAL_LOCK(hmdma);
 8011582:	2302      	movs	r3, #2
}
 8011584:	bcf0      	pop	{r4, r5, r6, r7}
 8011586:	4618      	mov	r0, r3
 8011588:	4770      	bx	lr
 801158a:	bf00      	nop

0801158c <HAL_MDMA_IRQHandler>:
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 801158c:	4a5c      	ldr	r2, [pc, #368]	; (8011700 <HAL_MDMA_IRQHandler+0x174>)
 801158e:	2101      	movs	r1, #1
 8011590:	6803      	ldr	r3, [r0, #0]
 8011592:	441a      	add	r2, r3
{
 8011594:	b570      	push	{r4, r5, r6, lr}
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8011596:	f3c2 1284 	ubfx	r2, r2, #6, #5
{
 801159a:	b082      	sub	sp, #8
  __IO uint32_t count = 0;
 801159c:	2500      	movs	r5, #0
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 801159e:	f04f 44a4 	mov.w	r4, #1375731712	; 0x52000000
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 80115a2:	fa01 f202 	lsl.w	r2, r1, r2
  __IO uint32_t count = 0;
 80115a6:	9501      	str	r5, [sp, #4]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 80115a8:	6824      	ldr	r4, [r4, #0]
 80115aa:	4222      	tst	r2, r4
 80115ac:	f000 808c 	beq.w	80116c8 <HAL_MDMA_IRQHandler+0x13c>
  uint32_t timeout = SystemCoreClock / 9600U;
 80115b0:	4954      	ldr	r1, [pc, #336]	; (8011704 <HAL_MDMA_IRQHandler+0x178>)
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 80115b2:	681a      	ldr	r2, [r3, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80115b4:	680d      	ldr	r5, [r1, #0]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 80115b6:	07d1      	lsls	r1, r2, #31
 80115b8:	d529      	bpl.n	801160e <HAL_MDMA_IRQHandler+0x82>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 80115ba:	68da      	ldr	r2, [r3, #12]
 80115bc:	0792      	lsls	r2, r2, #30
 80115be:	d526      	bpl.n	801160e <HAL_MDMA_IRQHandler+0x82>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 80115c0:	68da      	ldr	r2, [r3, #12]
 80115c2:	f022 0202 	bic.w	r2, r2, #2
 80115c6:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
 80115c8:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 80115ca:	6e81      	ldr	r1, [r0, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
 80115cc:	0616      	lsls	r6, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 80115ce:	bf54      	ite	pl
 80115d0:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 80115d4:	f041 0102 	orrmi.w	r1, r1, #2
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 80115d8:	0594      	lsls	r4, r2, #22
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 80115da:	6681      	str	r1, [r0, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 80115dc:	d503      	bpl.n	80115e6 <HAL_MDMA_IRQHandler+0x5a>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 80115de:	6e81      	ldr	r1, [r0, #104]	; 0x68
 80115e0:	f041 0104 	orr.w	r1, r1, #4
 80115e4:	6681      	str	r1, [r0, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
 80115e6:	05d1      	lsls	r1, r2, #23
 80115e8:	d503      	bpl.n	80115f2 <HAL_MDMA_IRQHandler+0x66>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 80115ea:	6e81      	ldr	r1, [r0, #104]	; 0x68
 80115ec:	f041 0108 	orr.w	r1, r1, #8
 80115f0:	6681      	str	r1, [r0, #104]	; 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
 80115f2:	0556      	lsls	r6, r2, #21
 80115f4:	d503      	bpl.n	80115fe <HAL_MDMA_IRQHandler+0x72>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 80115f6:	6e81      	ldr	r1, [r0, #104]	; 0x68
 80115f8:	f041 0110 	orr.w	r1, r1, #16
 80115fc:	6681      	str	r1, [r0, #104]	; 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
 80115fe:	0514      	lsls	r4, r2, #20
 8011600:	d503      	bpl.n	801160a <HAL_MDMA_IRQHandler+0x7e>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8011602:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8011604:	f042 0220 	orr.w	r2, r2, #32
 8011608:	6682      	str	r2, [r0, #104]	; 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 801160a:	2201      	movs	r2, #1
 801160c:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 801160e:	681a      	ldr	r2, [r3, #0]
 8011610:	4604      	mov	r4, r0
 8011612:	06d0      	lsls	r0, r2, #27
 8011614:	d509      	bpl.n	801162a <HAL_MDMA_IRQHandler+0x9e>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8011616:	68da      	ldr	r2, [r3, #12]
 8011618:	0691      	lsls	r1, r2, #26
 801161a:	d506      	bpl.n	801162a <HAL_MDMA_IRQHandler+0x9e>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 801161c:	2110      	movs	r1, #16
      if(hmdma->XferBufferCpltCallback != NULL)
 801161e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8011620:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
 8011622:	b112      	cbz	r2, 801162a <HAL_MDMA_IRQHandler+0x9e>
        hmdma->XferBufferCpltCallback(hmdma);
 8011624:	4620      	mov	r0, r4
 8011626:	4790      	blx	r2
 8011628:	6823      	ldr	r3, [r4, #0]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 801162a:	681a      	ldr	r2, [r3, #0]
 801162c:	0712      	lsls	r2, r2, #28
 801162e:	d509      	bpl.n	8011644 <HAL_MDMA_IRQHandler+0xb8>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8011630:	68da      	ldr	r2, [r3, #12]
 8011632:	06d6      	lsls	r6, r2, #27
 8011634:	d506      	bpl.n	8011644 <HAL_MDMA_IRQHandler+0xb8>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8011636:	2108      	movs	r1, #8
      if(hmdma->XferBlockCpltCallback != NULL)
 8011638:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 801163a:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
 801163c:	b112      	cbz	r2, 8011644 <HAL_MDMA_IRQHandler+0xb8>
        hmdma->XferBlockCpltCallback(hmdma);
 801163e:	4620      	mov	r0, r4
 8011640:	4790      	blx	r2
 8011642:	6823      	ldr	r3, [r4, #0]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8011644:	681a      	ldr	r2, [r3, #0]
 8011646:	0750      	lsls	r0, r2, #29
 8011648:	d509      	bpl.n	801165e <HAL_MDMA_IRQHandler+0xd2>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 801164a:	68da      	ldr	r2, [r3, #12]
 801164c:	0711      	lsls	r1, r2, #28
 801164e:	d506      	bpl.n	801165e <HAL_MDMA_IRQHandler+0xd2>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8011650:	2104      	movs	r1, #4
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8011652:	6d22      	ldr	r2, [r4, #80]	; 0x50
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8011654:	6059      	str	r1, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8011656:	b112      	cbz	r2, 801165e <HAL_MDMA_IRQHandler+0xd2>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 8011658:	4620      	mov	r0, r4
 801165a:	4790      	blx	r2
 801165c:	6823      	ldr	r3, [r4, #0]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 801165e:	681a      	ldr	r2, [r3, #0]
 8011660:	0792      	lsls	r2, r2, #30
 8011662:	d433      	bmi.n	80116cc <HAL_MDMA_IRQHandler+0x140>
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8011664:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8011666:	2b00      	cmp	r3, #0
 8011668:	d02e      	beq.n	80116c8 <HAL_MDMA_IRQHandler+0x13c>
    hmdma->State = HAL_MDMA_STATE_ABORT;
 801166a:	2304      	movs	r3, #4
    __HAL_MDMA_DISABLE(hmdma);
 801166c:	6821      	ldr	r1, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 801166e:	4a26      	ldr	r2, [pc, #152]	; (8011708 <HAL_MDMA_IRQHandler+0x17c>)
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8011670:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  uint32_t timeout = SystemCoreClock / 9600U;
 8011674:	fba2 3205 	umull	r3, r2, r2, r5
    __HAL_MDMA_DISABLE(hmdma);
 8011678:	68cb      	ldr	r3, [r1, #12]
 801167a:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 801167e:	0a92      	lsrs	r2, r2, #10
    __HAL_MDMA_DISABLE(hmdma);
 8011680:	60cb      	str	r3, [r1, #12]
 8011682:	e002      	b.n	801168a <HAL_MDMA_IRQHandler+0xfe>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8011684:	68cb      	ldr	r3, [r1, #12]
 8011686:	07d8      	lsls	r0, r3, #31
 8011688:	d504      	bpl.n	8011694 <HAL_MDMA_IRQHandler+0x108>
      if (++count > timeout)
 801168a:	9b01      	ldr	r3, [sp, #4]
 801168c:	3301      	adds	r3, #1
 801168e:	4293      	cmp	r3, r2
 8011690:	9301      	str	r3, [sp, #4]
 8011692:	d9f7      	bls.n	8011684 <HAL_MDMA_IRQHandler+0xf8>
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8011694:	68cb      	ldr	r3, [r1, #12]
    __HAL_UNLOCK(hmdma);
 8011696:	2200      	movs	r2, #0
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8011698:	07db      	lsls	r3, r3, #31
    __HAL_UNLOCK(hmdma);
 801169a:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      hmdma->State = HAL_MDMA_STATE_ERROR;
 801169e:	bf4c      	ite	mi
 80116a0:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
 80116a2:	2301      	movpl	r3, #1
 80116a4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    if (hmdma->XferErrorCallback != NULL)
 80116a8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80116aa:	b16b      	cbz	r3, 80116c8 <HAL_MDMA_IRQHandler+0x13c>
      hmdma->XferErrorCallback(hmdma);
 80116ac:	4620      	mov	r0, r4
}
 80116ae:	b002      	add	sp, #8
 80116b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      hmdma->XferErrorCallback(hmdma);
 80116b4:	4718      	bx	r3
        __HAL_UNLOCK(hmdma);
 80116b6:	2100      	movs	r1, #0
        hmdma->State = HAL_MDMA_STATE_READY;
 80116b8:	2201      	movs	r2, #1
        if(hmdma->XferAbortCallback != NULL)
 80116ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
        __HAL_UNLOCK(hmdma);
 80116bc:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
 80116c0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        if(hmdma->XferAbortCallback != NULL)
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d1f1      	bne.n	80116ac <HAL_MDMA_IRQHandler+0x120>
}
 80116c8:	b002      	add	sp, #8
 80116ca:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 80116cc:	68da      	ldr	r2, [r3, #12]
 80116ce:	0756      	lsls	r6, r2, #29
 80116d0:	d5c8      	bpl.n	8011664 <HAL_MDMA_IRQHandler+0xd8>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 80116d2:	68da      	ldr	r2, [r3, #12]
 80116d4:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 80116d8:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 80116da:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80116de:	2a04      	cmp	r2, #4
 80116e0:	d0e9      	beq.n	80116b6 <HAL_MDMA_IRQHandler+0x12a>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 80116e2:	2602      	movs	r6, #2
      __HAL_UNLOCK(hmdma);
 80116e4:	2000      	movs	r0, #0
      hmdma->State = HAL_MDMA_STATE_READY;
 80116e6:	2101      	movs	r1, #1
      if(hmdma->XferCpltCallback != NULL)
 80116e8:	6c62      	ldr	r2, [r4, #68]	; 0x44
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 80116ea:	605e      	str	r6, [r3, #4]
      __HAL_UNLOCK(hmdma);
 80116ec:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
 80116f0:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      if(hmdma->XferCpltCallback != NULL)
 80116f4:	2a00      	cmp	r2, #0
 80116f6:	d0b5      	beq.n	8011664 <HAL_MDMA_IRQHandler+0xd8>
        hmdma->XferCpltCallback(hmdma);
 80116f8:	4620      	mov	r0, r4
 80116fa:	4790      	blx	r2
 80116fc:	e7b2      	b.n	8011664 <HAL_MDMA_IRQHandler+0xd8>
 80116fe:	bf00      	nop
 8011700:	adffffc0 	.word	0xadffffc0
 8011704:	24007290 	.word	0x24007290
 8011708:	1b4e81b5 	.word	0x1b4e81b5

0801170c <HAL_PWREx_ConfigSupply>:

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 801170c:	4a1e      	ldr	r2, [pc, #120]	; (8011788 <HAL_PWREx_ConfigSupply+0x7c>)
 801170e:	68d3      	ldr	r3, [r2, #12]
 8011710:	f003 0307 	and.w	r3, r3, #7
 8011714:	2b06      	cmp	r3, #6
 8011716:	d006      	beq.n	8011726 <HAL_PWREx_ConfigSupply+0x1a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8011718:	68d3      	ldr	r3, [r2, #12]
 801171a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 801171e:	1a18      	subs	r0, r3, r0
 8011720:	bf18      	it	ne
 8011722:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8011724:	4770      	bx	lr
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8011726:	68d3      	ldr	r3, [r2, #12]
 8011728:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801172c:	4303      	orrs	r3, r0
{
 801172e:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8011730:	60d3      	str	r3, [r2, #12]
 8011732:	4604      	mov	r4, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8011734:	4615      	mov	r5, r2
  tickstart = HAL_GetTick ();
 8011736:	f7fc f913 	bl	800d960 <HAL_GetTick>
 801173a:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801173c:	e005      	b.n	801174a <HAL_PWREx_ConfigSupply+0x3e>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801173e:	f7fc f90f 	bl	800d960 <HAL_GetTick>
 8011742:	1b80      	subs	r0, r0, r6
 8011744:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8011748:	d81b      	bhi.n	8011782 <HAL_PWREx_ConfigSupply+0x76>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801174a:	686b      	ldr	r3, [r5, #4]
 801174c:	049a      	lsls	r2, r3, #18
 801174e:	d5f6      	bpl.n	801173e <HAL_PWREx_ConfigSupply+0x32>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8011750:	f1a4 031d 	sub.w	r3, r4, #29
 8011754:	2b01      	cmp	r3, #1
 8011756:	d905      	bls.n	8011764 <HAL_PWREx_ConfigSupply+0x58>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 8011758:	f1a4 002d 	sub.w	r0, r4, #45	; 0x2d
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 801175c:	2801      	cmp	r0, #1
 801175e:	d901      	bls.n	8011764 <HAL_PWREx_ConfigSupply+0x58>
  return HAL_OK;
 8011760:	2000      	movs	r0, #0
}
 8011762:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick ();
 8011764:	f7fc f8fc 	bl	800d960 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8011768:	4c07      	ldr	r4, [pc, #28]	; (8011788 <HAL_PWREx_ConfigSupply+0x7c>)
    tickstart = HAL_GetTick ();
 801176a:	4605      	mov	r5, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 801176c:	e005      	b.n	801177a <HAL_PWREx_ConfigSupply+0x6e>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801176e:	f7fc f8f7 	bl	800d960 <HAL_GetTick>
 8011772:	1b40      	subs	r0, r0, r5
 8011774:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8011778:	d803      	bhi.n	8011782 <HAL_PWREx_ConfigSupply+0x76>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 801177a:	68e3      	ldr	r3, [r4, #12]
 801177c:	03db      	lsls	r3, r3, #15
 801177e:	d5f6      	bpl.n	801176e <HAL_PWREx_ConfigSupply+0x62>
 8011780:	e7ee      	b.n	8011760 <HAL_PWREx_ConfigSupply+0x54>
      return HAL_ERROR;
 8011782:	2001      	movs	r0, #1
}
 8011784:	bd70      	pop	{r4, r5, r6, pc}
 8011786:	bf00      	nop
 8011788:	58024800 	.word	0x58024800

0801178c <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 801178c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8011790:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8011792:	b114      	cbz	r4, 801179a <QSPI_Config+0xe>
 8011794:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 8011798:	d15a      	bne.n	8011850 <QSPI_Config+0xc4>
 801179a:	f101 0318 	add.w	r3, r1, #24
 801179e:	e893 1208 	ldmia.w	r3, {r3, r9, ip}
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80117a2:	b37b      	cbz	r3, 8011804 <QSPI_Config+0x78>
 80117a4:	431c      	orrs	r4, r3
 80117a6:	694e      	ldr	r6, [r1, #20]
 80117a8:	6805      	ldr	r5, [r0, #0]
 80117aa:	ea44 0302 	orr.w	r3, r4, r2
 80117ae:	04b6      	lsls	r6, r6, #18
 80117b0:	6808      	ldr	r0, [r1, #0]
 80117b2:	6b4f      	ldr	r7, [r1, #52]	; 0x34
 80117b4:	e9d1 840b 	ldrd	r8, r4, [r1, #44]	; 0x2c
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80117b8:	f1bc 0f00 	cmp.w	ip, #0
 80117bc:	d06b      	beq.n	8011896 <QSPI_Config+0x10a>
 80117be:	ea4c 0c03 	orr.w	ip, ip, r3
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80117c2:	688b      	ldr	r3, [r1, #8]
 80117c4:	f8d1 e010 	ldr.w	lr, [r1, #16]
 80117c8:	61eb      	str	r3, [r5, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80117ca:	f1b9 0f00 	cmp.w	r9, #0
 80117ce:	f000 8088 	beq.w	80118e2 <QSPI_Config+0x156>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80117d2:	ea49 0000 	orr.w	r0, r9, r0
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80117d6:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80117da:	ea40 0008 	orr.w	r0, r0, r8
 80117de:	ea40 0004 	orr.w	r0, r0, r4
 80117e2:	ea40 0007 	orr.w	r0, r0, r7
 80117e6:	ea4e 0300 	orr.w	r3, lr, r0
 80117ea:	68c8      	ldr	r0, [r1, #12]
 80117ec:	ea43 0300 	orr.w	r3, r3, r0
 80117f0:	ea43 0306 	orr.w	r3, r3, r6
 80117f4:	ea43 030c 	orr.w	r3, r3, ip
 80117f8:	616b      	str	r3, [r5, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80117fa:	d001      	beq.n	8011800 <QSPI_Config+0x74>
                                         cmd->InstructionMode | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80117fc:	684b      	ldr	r3, [r1, #4]
 80117fe:	61ab      	str	r3, [r5, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8011800:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8011804:	f1bc 0f00 	cmp.w	ip, #0
 8011808:	d027      	beq.n	801185a <QSPI_Config+0xce>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 801180a:	6805      	ldr	r5, [r0, #0]
 801180c:	ea44 040c 	orr.w	r4, r4, ip
 8011810:	6888      	ldr	r0, [r1, #8]
 8011812:	694f      	ldr	r7, [r1, #20]
 8011814:	4314      	orrs	r4, r2
 8011816:	61e8      	str	r0, [r5, #28]
 8011818:	04bf      	lsls	r7, r7, #18
 801181a:	6908      	ldr	r0, [r1, #16]
 801181c:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 801181e:	e9d1 3e0b 	ldrd	r3, lr, [r1, #44]	; 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8011822:	f1b9 0f00 	cmp.w	r9, #0
 8011826:	d071      	beq.n	801190c <QSPI_Config+0x180>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8011828:	ea40 0009 	orr.w	r0, r0, r9
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 801182c:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8011830:	ea43 0300 	orr.w	r3, r3, r0
 8011834:	68c8      	ldr	r0, [r1, #12]
 8011836:	ea43 030e 	orr.w	r3, r3, lr
 801183a:	ea43 0306 	orr.w	r3, r3, r6
 801183e:	ea43 0300 	orr.w	r3, r3, r0
 8011842:	ea43 0307 	orr.w	r3, r3, r7
 8011846:	ea44 0403 	orr.w	r4, r4, r3
 801184a:	616c      	str	r4, [r5, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 801184c:	d1d6      	bne.n	80117fc <QSPI_Config+0x70>
 801184e:	e7d7      	b.n	8011800 <QSPI_Config+0x74>
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8011850:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8011852:	6805      	ldr	r5, [r0, #0]
 8011854:	3b01      	subs	r3, #1
 8011856:	612b      	str	r3, [r5, #16]
 8011858:	e79f      	b.n	801179a <QSPI_Config+0xe>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 801185a:	f1b9 0f00 	cmp.w	r9, #0
 801185e:	d031      	beq.n	80118c4 <QSPI_Config+0x138>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8011860:	ea44 0309 	orr.w	r3, r4, r9
 8011864:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8011866:	6b0d      	ldr	r5, [r1, #48]	; 0x30
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8011868:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 801186c:	ea43 0302 	orr.w	r3, r3, r2
 8011870:	6800      	ldr	r0, [r0, #0]
 8011872:	ea43 0304 	orr.w	r3, r3, r4
 8011876:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8011878:	ea43 0305 	orr.w	r3, r3, r5
 801187c:	68cd      	ldr	r5, [r1, #12]
 801187e:	ea43 0304 	orr.w	r3, r3, r4
 8011882:	694c      	ldr	r4, [r1, #20]
 8011884:	ea43 0305 	orr.w	r3, r3, r5
 8011888:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 801188c:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 801188e:	d0b7      	beq.n	8011800 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8011890:	684b      	ldr	r3, [r1, #4]
 8011892:	6183      	str	r3, [r0, #24]
 8011894:	e7b4      	b.n	8011800 <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8011896:	f1b9 0f00 	cmp.w	r9, #0
 801189a:	d02e      	beq.n	80118fa <QSPI_Config+0x16e>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 801189c:	ea49 0000 	orr.w	r0, r9, r0
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80118a0:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80118a4:	ea40 0008 	orr.w	r0, r0, r8
 80118a8:	ea40 0004 	orr.w	r0, r0, r4
 80118ac:	68cc      	ldr	r4, [r1, #12]
 80118ae:	ea40 0007 	orr.w	r0, r0, r7
 80118b2:	ea40 0004 	orr.w	r0, r0, r4
 80118b6:	ea40 0006 	orr.w	r0, r0, r6
 80118ba:	ea43 0300 	orr.w	r3, r3, r0
 80118be:	616b      	str	r3, [r5, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80118c0:	d19c      	bne.n	80117fc <QSPI_Config+0x70>
 80118c2:	e79d      	b.n	8011800 <QSPI_Config+0x74>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80118c4:	2c00      	cmp	r4, #0
 80118c6:	d09b      	beq.n	8011800 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80118c8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80118ca:	6800      	ldr	r0, [r0, #0]
 80118cc:	431c      	orrs	r4, r3
 80118ce:	e9d1 350c 	ldrd	r3, r5, [r1, #48]	; 0x30
 80118d2:	4322      	orrs	r2, r4
 80118d4:	6949      	ldr	r1, [r1, #20]
 80118d6:	4313      	orrs	r3, r2
 80118d8:	432b      	orrs	r3, r5
 80118da:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 80118de:	6143      	str	r3, [r0, #20]
}
 80118e0:	e78e      	b.n	8011800 <QSPI_Config+0x74>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80118e2:	ea40 0008 	orr.w	r0, r0, r8
 80118e6:	4320      	orrs	r0, r4
 80118e8:	4338      	orrs	r0, r7
 80118ea:	ea4e 0300 	orr.w	r3, lr, r0
 80118ee:	4333      	orrs	r3, r6
 80118f0:	ea43 030c 	orr.w	r3, r3, ip
 80118f4:	616b      	str	r3, [r5, #20]
}
 80118f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80118fa:	ea40 0008 	orr.w	r0, r0, r8
 80118fe:	4320      	orrs	r0, r4
 8011900:	4338      	orrs	r0, r7
 8011902:	4330      	orrs	r0, r6
 8011904:	4303      	orrs	r3, r0
 8011906:	616b      	str	r3, [r5, #20]
}
 8011908:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 801190c:	4318      	orrs	r0, r3
 801190e:	ea40 030e 	orr.w	r3, r0, lr
 8011912:	4333      	orrs	r3, r6
 8011914:	433b      	orrs	r3, r7
 8011916:	431c      	orrs	r4, r3
 8011918:	616c      	str	r4, [r5, #20]
}
 801191a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801191e:	bf00      	nop

08011920 <HAL_QSPI_MspInit>:
}
 8011920:	4770      	bx	lr
 8011922:	bf00      	nop

08011924 <HAL_QSPI_Init>:
{
 8011924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011926:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8011928:	f7fc f81a 	bl	800d960 <HAL_GetTick>
  if(hqspi == NULL)
 801192c:	2c00      	cmp	r4, #0
 801192e:	d047      	beq.n	80119c0 <HAL_QSPI_Init+0x9c>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8011930:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8011934:	4606      	mov	r6, r0
 8011936:	2b00      	cmp	r3, #0
 8011938:	d032      	beq.n	80119a0 <HAL_QSPI_Init+0x7c>
 801193a:	6ca5      	ldr	r5, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 801193c:	6822      	ldr	r2, [r4, #0]
 801193e:	68a1      	ldr	r1, [r4, #8]
 8011940:	6813      	ldr	r3, [r2, #0]
 8011942:	3901      	subs	r1, #1
 8011944:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8011948:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 801194c:	6013      	str	r3, [r2, #0]
 801194e:	e001      	b.n	8011954 <HAL_QSPI_Init+0x30>
    if (Timeout != HAL_MAX_DELAY)
 8011950:	1c6b      	adds	r3, r5, #1
 8011952:	d12d      	bne.n	80119b0 <HAL_QSPI_Init+0x8c>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8011954:	6893      	ldr	r3, [r2, #8]
 8011956:	f013 0320 	ands.w	r3, r3, #32
 801195a:	d1f9      	bne.n	8011950 <HAL_QSPI_Init+0x2c>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 801195c:	e9d4 0607 	ldrd	r0, r6, [r4, #28]
 8011960:	68e1      	ldr	r1, [r4, #12]
    hqspi->State = HAL_QSPI_STATE_READY;
 8011962:	2501      	movs	r5, #1
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8011964:	6817      	ldr	r7, [r2, #0]
 8011966:	4301      	orrs	r1, r0
 8011968:	6860      	ldr	r0, [r4, #4]
 801196a:	4331      	orrs	r1, r6
 801196c:	4e19      	ldr	r6, [pc, #100]	; (80119d4 <HAL_QSPI_Init+0xb0>)
 801196e:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
 8011972:	403e      	ands	r6, r7
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8011974:	6960      	ldr	r0, [r4, #20]
 8011976:	69a7      	ldr	r7, [r4, #24]
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8011978:	4331      	orrs	r1, r6
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 801197a:	4e17      	ldr	r6, [pc, #92]	; (80119d8 <HAL_QSPI_Init+0xb4>)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 801197c:	6011      	str	r1, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 801197e:	ea40 0107 	orr.w	r1, r0, r7
 8011982:	6857      	ldr	r7, [r2, #4]
 8011984:	6920      	ldr	r0, [r4, #16]
 8011986:	403e      	ands	r6, r7
 8011988:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    hqspi->State = HAL_QSPI_STATE_READY;
 801198c:	4618      	mov	r0, r3
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 801198e:	4331      	orrs	r1, r6
 8011990:	6051      	str	r1, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8011992:	6811      	ldr	r1, [r2, #0]
 8011994:	4329      	orrs	r1, r5
 8011996:	6011      	str	r1, [r2, #0]
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8011998:	6463      	str	r3, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 801199a:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
}
 801199e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_QSPI_MspInit(hqspi);
 80119a0:	4620      	mov	r0, r4
 80119a2:	f7ff ffbd 	bl	8011920 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 80119a6:	f241 3388 	movw	r3, #5000	; 0x1388
 80119aa:	461d      	mov	r5, r3
 80119ac:	64a3      	str	r3, [r4, #72]	; 0x48
 80119ae:	e7c5      	b.n	801193c <HAL_QSPI_Init+0x18>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80119b0:	f7fb ffd6 	bl	800d960 <HAL_GetTick>
 80119b4:	1b80      	subs	r0, r0, r6
 80119b6:	42a8      	cmp	r0, r5
 80119b8:	d804      	bhi.n	80119c4 <HAL_QSPI_Init+0xa0>
 80119ba:	b11d      	cbz	r5, 80119c4 <HAL_QSPI_Init+0xa0>
 80119bc:	6822      	ldr	r2, [r4, #0]
 80119be:	e7c9      	b.n	8011954 <HAL_QSPI_Init+0x30>
    return HAL_ERROR;
 80119c0:	2001      	movs	r0, #1
}
 80119c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80119c4:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80119c6:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80119c8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80119cc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80119ce:	4303      	orrs	r3, r0
 80119d0:	6463      	str	r3, [r4, #68]	; 0x44
}
 80119d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80119d4:	00ffff2f 	.word	0x00ffff2f
 80119d8:	ffe0f8fe 	.word	0xffe0f8fe

080119dc <HAL_QSPI_Command>:
{
 80119dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119de:	4604      	mov	r4, r0
 80119e0:	460d      	mov	r5, r1
 80119e2:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 80119e4:	f7fb ffbc 	bl	800d960 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 80119e8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80119ec:	2b01      	cmp	r3, #1
 80119ee:	d00b      	beq.n	8011a08 <HAL_QSPI_Command+0x2c>
 80119f0:	2301      	movs	r3, #1
 80119f2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80119f6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80119fa:	2b01      	cmp	r3, #1
 80119fc:	d006      	beq.n	8011a0c <HAL_QSPI_Command+0x30>
    status = HAL_BUSY;
 80119fe:	2002      	movs	r0, #2
  __HAL_UNLOCK(hqspi);
 8011a00:	2300      	movs	r3, #0
 8011a02:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8011a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hqspi);
 8011a08:	2002      	movs	r0, #2
}
 8011a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8011a0c:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8011a0e:	2302      	movs	r3, #2
 8011a10:	4607      	mov	r7, r0
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8011a12:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8011a14:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8011a18:	1c70      	adds	r0, r6, #1
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8011a1a:	6823      	ldr	r3, [r4, #0]
 8011a1c:	d10e      	bne.n	8011a3c <HAL_QSPI_Command+0x60>
 8011a1e:	689a      	ldr	r2, [r3, #8]
 8011a20:	f012 0220 	ands.w	r2, r2, #32
 8011a24:	d1fb      	bne.n	8011a1e <HAL_QSPI_Command+0x42>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8011a26:	4629      	mov	r1, r5
 8011a28:	4620      	mov	r0, r4
 8011a2a:	f7ff feaf 	bl	801178c <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 8011a2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011a30:	b1bb      	cbz	r3, 8011a62 <HAL_QSPI_Command+0x86>
        hqspi->State = HAL_QSPI_STATE_READY;
 8011a32:	2301      	movs	r3, #1
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8011a34:	2000      	movs	r0, #0
        hqspi->State = HAL_QSPI_STATE_READY;
 8011a36:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8011a3a:	e7e1      	b.n	8011a00 <HAL_QSPI_Command+0x24>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8011a3c:	689a      	ldr	r2, [r3, #8]
 8011a3e:	f012 0220 	ands.w	r2, r2, #32
 8011a42:	d019      	beq.n	8011a78 <HAL_QSPI_Command+0x9c>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011a44:	f7fb ff8c 	bl	800d960 <HAL_GetTick>
 8011a48:	1bc0      	subs	r0, r0, r7
 8011a4a:	4286      	cmp	r6, r0
 8011a4c:	d301      	bcc.n	8011a52 <HAL_QSPI_Command+0x76>
 8011a4e:	2e00      	cmp	r6, #0
 8011a50:	d1e2      	bne.n	8011a18 <HAL_QSPI_Command+0x3c>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8011a52:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8011a54:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8011a56:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8011a5a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011a5c:	4303      	orrs	r3, r0
 8011a5e:	6463      	str	r3, [r4, #68]	; 0x44
 8011a60:	e7ce      	b.n	8011a00 <HAL_QSPI_Command+0x24>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8011a62:	6822      	ldr	r2, [r4, #0]
 8011a64:	6893      	ldr	r3, [r2, #8]
 8011a66:	079b      	lsls	r3, r3, #30
 8011a68:	d5fc      	bpl.n	8011a64 <HAL_QSPI_Command+0x88>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8011a6a:	2102      	movs	r1, #2
          hqspi->State = HAL_QSPI_STATE_READY;
 8011a6c:	2301      	movs	r3, #1
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8011a6e:	2000      	movs	r0, #0
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8011a70:	60d1      	str	r1, [r2, #12]
          hqspi->State = HAL_QSPI_STATE_READY;
 8011a72:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8011a76:	e7c3      	b.n	8011a00 <HAL_QSPI_Command+0x24>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8011a78:	4629      	mov	r1, r5
 8011a7a:	4620      	mov	r0, r4
 8011a7c:	f7ff fe86 	bl	801178c <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 8011a80:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011a82:	b13b      	cbz	r3, 8011a94 <HAL_QSPI_Command+0xb8>
 8011a84:	e7d5      	b.n	8011a32 <HAL_QSPI_Command+0x56>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011a86:	f7fb ff6b 	bl	800d960 <HAL_GetTick>
 8011a8a:	1bc0      	subs	r0, r0, r7
 8011a8c:	4286      	cmp	r6, r0
 8011a8e:	d3e0      	bcc.n	8011a52 <HAL_QSPI_Command+0x76>
 8011a90:	2e00      	cmp	r6, #0
 8011a92:	d0de      	beq.n	8011a52 <HAL_QSPI_Command+0x76>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8011a94:	6822      	ldr	r2, [r4, #0]
 8011a96:	6893      	ldr	r3, [r2, #8]
 8011a98:	0799      	lsls	r1, r3, #30
 8011a9a:	d5f4      	bpl.n	8011a86 <HAL_QSPI_Command+0xaa>
 8011a9c:	e7e5      	b.n	8011a6a <HAL_QSPI_Command+0x8e>
 8011a9e:	bf00      	nop

08011aa0 <HAL_QSPI_Transmit>:
{
 8011aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011aa4:	4604      	mov	r4, r0
 8011aa6:	4688      	mov	r8, r1
 8011aa8:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 8011aaa:	f7fb ff59 	bl	800d960 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8011aae:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8011ab2:	2b01      	cmp	r3, #1
 8011ab4:	d069      	beq.n	8011b8a <HAL_QSPI_Transmit+0xea>
 8011ab6:	2301      	movs	r3, #1
 8011ab8:	4606      	mov	r6, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8011aba:	6827      	ldr	r7, [r4, #0]
  __HAL_LOCK(hqspi);
 8011abc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8011ac0:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
 8011ac4:	b2c0      	uxtb	r0, r0
 8011ac6:	4298      	cmp	r0, r3
 8011ac8:	d005      	beq.n	8011ad6 <HAL_QSPI_Transmit+0x36>
    status = HAL_BUSY;
 8011aca:	2002      	movs	r0, #2
  __HAL_UNLOCK(hqspi);
 8011acc:	2300      	movs	r3, #0
 8011ace:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8011ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8011ad6:	2300      	movs	r3, #0
 8011ad8:	6463      	str	r3, [r4, #68]	; 0x44
    if(pData != NULL )
 8011ada:	f1b8 0f00 	cmp.w	r8, #0
 8011ade:	d038      	beq.n	8011b52 <HAL_QSPI_Transmit+0xb2>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8011ae0:	2312      	movs	r3, #18
 8011ae2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8011ae6:	693b      	ldr	r3, [r7, #16]
 8011ae8:	3301      	adds	r3, #1
 8011aea:	62e3      	str	r3, [r4, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8011aec:	693b      	ldr	r3, [r7, #16]
      hqspi->pTxBuffPtr = pData;
 8011aee:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8011af2:	3301      	adds	r3, #1
 8011af4:	62a3      	str	r3, [r4, #40]	; 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8011af6:	697b      	ldr	r3, [r7, #20]
 8011af8:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8011afc:	617b      	str	r3, [r7, #20]
      while(hqspi->TxXferCount > 0U)
 8011afe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d036      	beq.n	8011b72 <HAL_QSPI_Transmit+0xd2>
 8011b04:	1c6a      	adds	r2, r5, #1
 8011b06:	4639      	mov	r1, r7
 8011b08:	d111      	bne.n	8011b2e <HAL_QSPI_Transmit+0x8e>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8011b0a:	688b      	ldr	r3, [r1, #8]
 8011b0c:	075b      	lsls	r3, r3, #29
 8011b0e:	d5fc      	bpl.n	8011b0a <HAL_QSPI_Transmit+0x6a>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8011b10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011b12:	781b      	ldrb	r3, [r3, #0]
 8011b14:	f887 3020 	strb.w	r3, [r7, #32]
        hqspi->TxXferCount--;
 8011b18:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        hqspi->pTxBuffPtr++;
 8011b1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 8011b1c:	3a01      	subs	r2, #1
        hqspi->pTxBuffPtr++;
 8011b1e:	3301      	adds	r3, #1
        hqspi->TxXferCount--;
 8011b20:	62e2      	str	r2, [r4, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 8011b22:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        hqspi->pTxBuffPtr++;
 8011b24:	6263      	str	r3, [r4, #36]	; 0x24
      while(hqspi->TxXferCount > 0U)
 8011b26:	b31a      	cbz	r2, 8011b70 <HAL_QSPI_Transmit+0xd0>
 8011b28:	1c6a      	adds	r2, r5, #1
 8011b2a:	6821      	ldr	r1, [r4, #0]
 8011b2c:	d0ed      	beq.n	8011b0a <HAL_QSPI_Transmit+0x6a>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8011b2e:	688b      	ldr	r3, [r1, #8]
 8011b30:	0758      	lsls	r0, r3, #29
 8011b32:	d4ed      	bmi.n	8011b10 <HAL_QSPI_Transmit+0x70>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011b34:	f7fb ff14 	bl	800d960 <HAL_GetTick>
 8011b38:	1b80      	subs	r0, r0, r6
 8011b3a:	4285      	cmp	r5, r0
 8011b3c:	d301      	bcc.n	8011b42 <HAL_QSPI_Transmit+0xa2>
 8011b3e:	2d00      	cmp	r5, #0
 8011b40:	d1f2      	bne.n	8011b28 <HAL_QSPI_Transmit+0x88>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8011b42:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8011b44:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8011b46:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8011b4a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011b4c:	4303      	orrs	r3, r0
 8011b4e:	6463      	str	r3, [r4, #68]	; 0x44
 8011b50:	e017      	b.n	8011b82 <HAL_QSPI_Transmit+0xe2>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8011b52:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011b54:	f043 0308 	orr.w	r3, r3, #8
 8011b58:	6463      	str	r3, [r4, #68]	; 0x44
 8011b5a:	e7b7      	b.n	8011acc <HAL_QSPI_Transmit+0x2c>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8011b5c:	68bb      	ldr	r3, [r7, #8]
 8011b5e:	079b      	lsls	r3, r3, #30
 8011b60:	d40c      	bmi.n	8011b7c <HAL_QSPI_Transmit+0xdc>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011b62:	f7fb fefd 	bl	800d960 <HAL_GetTick>
 8011b66:	1b80      	subs	r0, r0, r6
 8011b68:	4285      	cmp	r5, r0
 8011b6a:	d3ea      	bcc.n	8011b42 <HAL_QSPI_Transmit+0xa2>
 8011b6c:	2d00      	cmp	r5, #0
 8011b6e:	d0e8      	beq.n	8011b42 <HAL_QSPI_Transmit+0xa2>
 8011b70:	6827      	ldr	r7, [r4, #0]
 8011b72:	1c69      	adds	r1, r5, #1
 8011b74:	d1f2      	bne.n	8011b5c <HAL_QSPI_Transmit+0xbc>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8011b76:	68bb      	ldr	r3, [r7, #8]
 8011b78:	079a      	lsls	r2, r3, #30
 8011b7a:	d5fc      	bpl.n	8011b76 <HAL_QSPI_Transmit+0xd6>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8011b7c:	2302      	movs	r3, #2
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8011b7e:	2000      	movs	r0, #0
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8011b80:	60fb      	str	r3, [r7, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 8011b82:	2301      	movs	r3, #1
 8011b84:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8011b88:	e7a0      	b.n	8011acc <HAL_QSPI_Transmit+0x2c>
  __HAL_LOCK(hqspi);
 8011b8a:	2002      	movs	r0, #2
}
 8011b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011b90 <HAL_QSPI_Receive>:
{
 8011b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b94:	4604      	mov	r4, r0
 8011b96:	4615      	mov	r5, r2
 8011b98:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 8011b9a:	f7fb fee1 	bl	800d960 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8011b9e:	6826      	ldr	r6, [r4, #0]
 8011ba0:	69b2      	ldr	r2, [r6, #24]
  __HAL_LOCK(hqspi);
 8011ba2:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8011ba6:	2b01      	cmp	r3, #1
 8011ba8:	d06d      	beq.n	8011c86 <HAL_QSPI_Receive+0xf6>
 8011baa:	2301      	movs	r3, #1
 8011bac:	4607      	mov	r7, r0
 8011bae:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8011bb2:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
 8011bb6:	b2c0      	uxtb	r0, r0
 8011bb8:	4298      	cmp	r0, r3
 8011bba:	d005      	beq.n	8011bc8 <HAL_QSPI_Receive+0x38>
    status = HAL_BUSY;
 8011bbc:	2002      	movs	r0, #2
  __HAL_UNLOCK(hqspi);
 8011bbe:	2300      	movs	r3, #0
 8011bc0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8011bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8011bc8:	2300      	movs	r3, #0
 8011bca:	6463      	str	r3, [r4, #68]	; 0x44
    if(pData != NULL )
 8011bcc:	f1b8 0f00 	cmp.w	r8, #0
 8011bd0:	d03d      	beq.n	8011c4e <HAL_QSPI_Receive+0xbe>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8011bd2:	2322      	movs	r3, #34	; 0x22
 8011bd4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8011bd8:	6933      	ldr	r3, [r6, #16]
 8011bda:	3301      	adds	r3, #1
 8011bdc:	63a3      	str	r3, [r4, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8011bde:	6933      	ldr	r3, [r6, #16]
      hqspi->pRxBuffPtr = pData;
 8011be0:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8011be4:	3301      	adds	r3, #1
 8011be6:	6363      	str	r3, [r4, #52]	; 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8011be8:	6973      	ldr	r3, [r6, #20]
 8011bea:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8011bee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8011bf2:	6173      	str	r3, [r6, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8011bf4:	61b2      	str	r2, [r6, #24]
      while(hqspi->RxXferCount > 0U)
 8011bf6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d038      	beq.n	8011c6e <HAL_QSPI_Receive+0xde>
 8011bfc:	1c68      	adds	r0, r5, #1
 8011bfe:	4631      	mov	r1, r6
 8011c00:	d112      	bne.n	8011c28 <HAL_QSPI_Receive+0x98>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8011c02:	688b      	ldr	r3, [r1, #8]
 8011c04:	f013 0f06 	tst.w	r3, #6
 8011c08:	d0fb      	beq.n	8011c02 <HAL_QSPI_Receive+0x72>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8011c0a:	f896 2020 	ldrb.w	r2, [r6, #32]
 8011c0e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011c10:	701a      	strb	r2, [r3, #0]
        hqspi->RxXferCount--;
 8011c12:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hqspi->pRxBuffPtr++;
 8011c14:	6b23      	ldr	r3, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 8011c16:	3a01      	subs	r2, #1
        hqspi->pRxBuffPtr++;
 8011c18:	3301      	adds	r3, #1
        hqspi->RxXferCount--;
 8011c1a:	63a2      	str	r2, [r4, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8011c1c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hqspi->pRxBuffPtr++;
 8011c1e:	6323      	str	r3, [r4, #48]	; 0x30
      while(hqspi->RxXferCount > 0U)
 8011c20:	b322      	cbz	r2, 8011c6c <HAL_QSPI_Receive+0xdc>
 8011c22:	1c68      	adds	r0, r5, #1
 8011c24:	6821      	ldr	r1, [r4, #0]
 8011c26:	d0ec      	beq.n	8011c02 <HAL_QSPI_Receive+0x72>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8011c28:	688b      	ldr	r3, [r1, #8]
 8011c2a:	f013 0f06 	tst.w	r3, #6
 8011c2e:	d1ec      	bne.n	8011c0a <HAL_QSPI_Receive+0x7a>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011c30:	f7fb fe96 	bl	800d960 <HAL_GetTick>
 8011c34:	1bc0      	subs	r0, r0, r7
 8011c36:	4285      	cmp	r5, r0
 8011c38:	d301      	bcc.n	8011c3e <HAL_QSPI_Receive+0xae>
 8011c3a:	2d00      	cmp	r5, #0
 8011c3c:	d1f1      	bne.n	8011c22 <HAL_QSPI_Receive+0x92>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8011c3e:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8011c40:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8011c42:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8011c46:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011c48:	4303      	orrs	r3, r0
 8011c4a:	6463      	str	r3, [r4, #68]	; 0x44
 8011c4c:	e017      	b.n	8011c7e <HAL_QSPI_Receive+0xee>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8011c4e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011c50:	f043 0308 	orr.w	r3, r3, #8
 8011c54:	6463      	str	r3, [r4, #68]	; 0x44
 8011c56:	e7b2      	b.n	8011bbe <HAL_QSPI_Receive+0x2e>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8011c58:	68b3      	ldr	r3, [r6, #8]
 8011c5a:	079b      	lsls	r3, r3, #30
 8011c5c:	d40c      	bmi.n	8011c78 <HAL_QSPI_Receive+0xe8>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011c5e:	f7fb fe7f 	bl	800d960 <HAL_GetTick>
 8011c62:	1bc0      	subs	r0, r0, r7
 8011c64:	4285      	cmp	r5, r0
 8011c66:	d3ea      	bcc.n	8011c3e <HAL_QSPI_Receive+0xae>
 8011c68:	2d00      	cmp	r5, #0
 8011c6a:	d0e8      	beq.n	8011c3e <HAL_QSPI_Receive+0xae>
 8011c6c:	6826      	ldr	r6, [r4, #0]
 8011c6e:	1c69      	adds	r1, r5, #1
 8011c70:	d1f2      	bne.n	8011c58 <HAL_QSPI_Receive+0xc8>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8011c72:	68b3      	ldr	r3, [r6, #8]
 8011c74:	079a      	lsls	r2, r3, #30
 8011c76:	d5fc      	bpl.n	8011c72 <HAL_QSPI_Receive+0xe2>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8011c78:	2302      	movs	r3, #2
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8011c7a:	2000      	movs	r0, #0
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8011c7c:	60f3      	str	r3, [r6, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 8011c7e:	2301      	movs	r3, #1
 8011c80:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8011c84:	e79b      	b.n	8011bbe <HAL_QSPI_Receive+0x2e>
  __HAL_LOCK(hqspi);
 8011c86:	2002      	movs	r0, #2
}
 8011c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011c8c <HAL_QSPI_AutoPolling>:
{
 8011c8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c90:	4604      	mov	r4, r0
 8011c92:	461f      	mov	r7, r3
 8011c94:	4688      	mov	r8, r1
 8011c96:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 8011c98:	f7fb fe62 	bl	800d960 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8011c9c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8011ca0:	2b01      	cmp	r3, #1
 8011ca2:	d00c      	beq.n	8011cbe <HAL_QSPI_AutoPolling+0x32>
 8011ca4:	2301      	movs	r3, #1
 8011ca6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8011caa:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8011cae:	2b01      	cmp	r3, #1
 8011cb0:	d008      	beq.n	8011cc4 <HAL_QSPI_AutoPolling+0x38>
    status = HAL_BUSY;
 8011cb2:	2002      	movs	r0, #2
  __HAL_UNLOCK(hqspi);
 8011cb4:	2300      	movs	r3, #0
 8011cb6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8011cba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hqspi);
 8011cbe:	2002      	movs	r0, #2
}
 8011cc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8011cc4:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8011cc6:	2342      	movs	r3, #66	; 0x42
 8011cc8:	4681      	mov	r9, r0
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8011cca:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8011ccc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8011cd0:	1c79      	adds	r1, r7, #1
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8011cd2:	6825      	ldr	r5, [r4, #0]
 8011cd4:	d126      	bne.n	8011d24 <HAL_QSPI_AutoPolling+0x98>
 8011cd6:	68ab      	ldr	r3, [r5, #8]
 8011cd8:	069a      	lsls	r2, r3, #26
 8011cda:	d4fc      	bmi.n	8011cd6 <HAL_QSPI_AutoPolling+0x4a>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8011cdc:	6833      	ldr	r3, [r6, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8011cde:	4641      	mov	r1, r8
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8011ce0:	6870      	ldr	r0, [r6, #4]
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8011ce2:	68b2      	ldr	r2, [r6, #8]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8011ce4:	62ab      	str	r3, [r5, #40]	; 0x28
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8011ce6:	6933      	ldr	r3, [r6, #16]
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8011ce8:	6268      	str	r0, [r5, #36]	; 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8011cea:	62ea      	str	r2, [r5, #44]	; 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8011cec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8011cf0:	6828      	ldr	r0, [r5, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8011cf2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
      cmd->NbData = cfg->StatusBytesSize;
 8011cf6:	68f6      	ldr	r6, [r6, #12]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8011cf8:	f420 0040 	bic.w	r0, r0, #12582912	; 0xc00000
 8011cfc:	4303      	orrs	r3, r0
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8011cfe:	4620      	mov	r0, r4
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8011d00:	602b      	str	r3, [r5, #0]
      cmd->NbData = cfg->StatusBytesSize;
 8011d02:	f8c8 6028 	str.w	r6, [r8, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8011d06:	f7ff fd41 	bl	801178c <QSPI_Config>
 8011d0a:	1c78      	adds	r0, r7, #1
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8011d0c:	6822      	ldr	r2, [r4, #0]
 8011d0e:	d115      	bne.n	8011d3c <HAL_QSPI_AutoPolling+0xb0>
 8011d10:	6893      	ldr	r3, [r2, #8]
 8011d12:	0719      	lsls	r1, r3, #28
 8011d14:	d5fc      	bpl.n	8011d10 <HAL_QSPI_AutoPolling+0x84>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8011d16:	2108      	movs	r1, #8
        hqspi->State = HAL_QSPI_STATE_READY;
 8011d18:	2301      	movs	r3, #1
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8011d1a:	2000      	movs	r0, #0
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8011d1c:	60d1      	str	r1, [r2, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8011d1e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8011d22:	e7c7      	b.n	8011cb4 <HAL_QSPI_AutoPolling+0x28>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8011d24:	68ab      	ldr	r3, [r5, #8]
 8011d26:	069b      	lsls	r3, r3, #26
 8011d28:	d5d8      	bpl.n	8011cdc <HAL_QSPI_AutoPolling+0x50>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011d2a:	f7fb fe19 	bl	800d960 <HAL_GetTick>
 8011d2e:	eba0 0009 	sub.w	r0, r0, r9
 8011d32:	4287      	cmp	r7, r0
 8011d34:	d30d      	bcc.n	8011d52 <HAL_QSPI_AutoPolling+0xc6>
 8011d36:	2f00      	cmp	r7, #0
 8011d38:	d1ca      	bne.n	8011cd0 <HAL_QSPI_AutoPolling+0x44>
 8011d3a:	e00a      	b.n	8011d52 <HAL_QSPI_AutoPolling+0xc6>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8011d3c:	6893      	ldr	r3, [r2, #8]
 8011d3e:	071b      	lsls	r3, r3, #28
 8011d40:	d4e9      	bmi.n	8011d16 <HAL_QSPI_AutoPolling+0x8a>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011d42:	f7fb fe0d 	bl	800d960 <HAL_GetTick>
 8011d46:	eba0 0009 	sub.w	r0, r0, r9
 8011d4a:	4287      	cmp	r7, r0
 8011d4c:	d301      	bcc.n	8011d52 <HAL_QSPI_AutoPolling+0xc6>
 8011d4e:	2f00      	cmp	r7, #0
 8011d50:	d1db      	bne.n	8011d0a <HAL_QSPI_AutoPolling+0x7e>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8011d52:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8011d54:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8011d56:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8011d5a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011d5c:	4303      	orrs	r3, r0
 8011d5e:	6463      	str	r3, [r4, #68]	; 0x44
 8011d60:	e7a8      	b.n	8011cb4 <HAL_QSPI_AutoPolling+0x28>
 8011d62:	bf00      	nop

08011d64 <HAL_QSPI_MemoryMapped>:
{
 8011d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d68:	4604      	mov	r4, r0
 8011d6a:	460e      	mov	r6, r1
 8011d6c:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 8011d6e:	f7fb fdf7 	bl	800d960 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8011d72:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8011d76:	2b01      	cmp	r3, #1
 8011d78:	d00c      	beq.n	8011d94 <HAL_QSPI_MemoryMapped+0x30>
 8011d7a:	2301      	movs	r3, #1
 8011d7c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8011d80:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8011d84:	2b01      	cmp	r3, #1
 8011d86:	d008      	beq.n	8011d9a <HAL_QSPI_MemoryMapped+0x36>
    status = HAL_BUSY;
 8011d88:	2002      	movs	r0, #2
  __HAL_UNLOCK(hqspi);
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8011d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hqspi);
 8011d94:	2002      	movs	r0, #2
}
 8011d96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8011d9a:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8011d9c:	2382      	movs	r3, #130	; 0x82
 8011d9e:	4607      	mov	r7, r0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8011da0:	f8d4 8048 	ldr.w	r8, [r4, #72]	; 0x48
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8011da4:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8011da6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8011daa:	f1b8 3fff 	cmp.w	r8, #4294967295
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8011dae:	6822      	ldr	r2, [r4, #0]
 8011db0:	d113      	bne.n	8011dda <HAL_QSPI_MemoryMapped+0x76>
 8011db2:	6893      	ldr	r3, [r2, #8]
 8011db4:	0699      	lsls	r1, r3, #26
 8011db6:	d4fc      	bmi.n	8011db2 <HAL_QSPI_MemoryMapped+0x4e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8011db8:	6813      	ldr	r3, [r2, #0]
 8011dba:	6869      	ldr	r1, [r5, #4]
 8011dbc:	f023 0308 	bic.w	r3, r3, #8
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8011dc0:	2908      	cmp	r1, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8011dc2:	ea43 0301 	orr.w	r3, r3, r1
 8011dc6:	6013      	str	r3, [r2, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8011dc8:	d01a      	beq.n	8011e00 <HAL_QSPI_MemoryMapped+0x9c>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8011dca:	4620      	mov	r0, r4
 8011dcc:	4631      	mov	r1, r6
 8011dce:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8011dd2:	f7ff fcdb 	bl	801178c <QSPI_Config>
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8011dd6:	2000      	movs	r0, #0
 8011dd8:	e7d7      	b.n	8011d8a <HAL_QSPI_MemoryMapped+0x26>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8011dda:	6893      	ldr	r3, [r2, #8]
 8011ddc:	069b      	lsls	r3, r3, #26
 8011dde:	d5eb      	bpl.n	8011db8 <HAL_QSPI_MemoryMapped+0x54>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011de0:	f7fb fdbe 	bl	800d960 <HAL_GetTick>
 8011de4:	1bc0      	subs	r0, r0, r7
 8011de6:	4580      	cmp	r8, r0
 8011de8:	d302      	bcc.n	8011df0 <HAL_QSPI_MemoryMapped+0x8c>
 8011dea:	f1b8 0f00 	cmp.w	r8, #0
 8011dee:	d1dc      	bne.n	8011daa <HAL_QSPI_MemoryMapped+0x46>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8011df0:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8011df2:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8011df4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8011df8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011dfa:	4303      	orrs	r3, r0
 8011dfc:	6463      	str	r3, [r4, #68]	; 0x44
 8011dfe:	e7c4      	b.n	8011d8a <HAL_QSPI_MemoryMapped+0x26>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8011e00:	6829      	ldr	r1, [r5, #0]
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8011e02:	2310      	movs	r3, #16
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8011e04:	6311      	str	r1, [r2, #48]	; 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8011e06:	60d3      	str	r3, [r2, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8011e08:	6813      	ldr	r3, [r2, #0]
 8011e0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011e0e:	6013      	str	r3, [r2, #0]
 8011e10:	e7db      	b.n	8011dca <HAL_QSPI_MemoryMapped+0x66>
 8011e12:	bf00      	nop

08011e14 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8011e14:	2800      	cmp	r0, #0
 8011e16:	f000 81a1 	beq.w	801215c <HAL_RCC_OscConfig+0x348>
{
 8011e1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8011e1c:	6803      	ldr	r3, [r0, #0]
 8011e1e:	4604      	mov	r4, r0
 8011e20:	07d9      	lsls	r1, r3, #31
 8011e22:	d535      	bpl.n	8011e90 <HAL_RCC_OscConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8011e24:	49a8      	ldr	r1, [pc, #672]	; (80120c8 <HAL_RCC_OscConfig+0x2b4>)
 8011e26:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8011e28:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8011e2a:	f002 0238 	and.w	r2, r2, #56	; 0x38
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8011e2e:	2a10      	cmp	r2, #16
 8011e30:	f000 8114 	beq.w	801205c <HAL_RCC_OscConfig+0x248>
 8011e34:	2a18      	cmp	r2, #24
 8011e36:	f000 810c 	beq.w	8012052 <HAL_RCC_OscConfig+0x23e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011e3a:	6863      	ldr	r3, [r4, #4]
 8011e3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011e40:	d010      	beq.n	8011e64 <HAL_RCC_OscConfig+0x50>
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	f000 8171 	beq.w	801212a <HAL_RCC_OscConfig+0x316>
 8011e48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8011e4c:	4b9e      	ldr	r3, [pc, #632]	; (80120c8 <HAL_RCC_OscConfig+0x2b4>)
 8011e4e:	681a      	ldr	r2, [r3, #0]
 8011e50:	f000 81e8 	beq.w	8012224 <HAL_RCC_OscConfig+0x410>
 8011e54:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8011e58:	601a      	str	r2, [r3, #0]
 8011e5a:	681a      	ldr	r2, [r3, #0]
 8011e5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8011e60:	601a      	str	r2, [r3, #0]
 8011e62:	e004      	b.n	8011e6e <HAL_RCC_OscConfig+0x5a>
 8011e64:	4a98      	ldr	r2, [pc, #608]	; (80120c8 <HAL_RCC_OscConfig+0x2b4>)
 8011e66:	6813      	ldr	r3, [r2, #0]
 8011e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011e6c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011e6e:	f7fb fd77 	bl	800d960 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8011e72:	4d95      	ldr	r5, [pc, #596]	; (80120c8 <HAL_RCC_OscConfig+0x2b4>)
        tickstart = HAL_GetTick();
 8011e74:	4607      	mov	r7, r0
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011e76:	f241 3688 	movw	r6, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8011e7a:	e005      	b.n	8011e88 <HAL_RCC_OscConfig+0x74>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011e7c:	f7fb fd70 	bl	800d960 <HAL_GetTick>
 8011e80:	1bc0      	subs	r0, r0, r7
 8011e82:	42b0      	cmp	r0, r6
 8011e84:	f200 814f 	bhi.w	8012126 <HAL_RCC_OscConfig+0x312>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8011e88:	682b      	ldr	r3, [r5, #0]
 8011e8a:	039b      	lsls	r3, r3, #14
 8011e8c:	d5f6      	bpl.n	8011e7c <HAL_RCC_OscConfig+0x68>
 8011e8e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011e90:	0799      	lsls	r1, r3, #30
 8011e92:	f100 808e 	bmi.w	8011fb2 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8011e96:	06d9      	lsls	r1, r3, #27
 8011e98:	d534      	bpl.n	8011f04 <HAL_RCC_OscConfig+0xf0>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8011e9a:	4a8b      	ldr	r2, [pc, #556]	; (80120c8 <HAL_RCC_OscConfig+0x2b4>)
 8011e9c:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8011e9e:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8011ea0:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8011ea4:	2b08      	cmp	r3, #8
 8011ea6:	f000 80e9 	beq.w	801207c <HAL_RCC_OscConfig+0x268>
 8011eaa:	2b18      	cmp	r3, #24
 8011eac:	f000 80e1 	beq.w	8012072 <HAL_RCC_OscConfig+0x25e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8011eb0:	69e3      	ldr	r3, [r4, #28]
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	f000 817a 	beq.w	80121ac <HAL_RCC_OscConfig+0x398>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8011eb8:	4b83      	ldr	r3, [pc, #524]	; (80120c8 <HAL_RCC_OscConfig+0x2b4>)
 8011eba:	681a      	ldr	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8011ebc:	461d      	mov	r5, r3
        __HAL_RCC_CSI_ENABLE();
 8011ebe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8011ec2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8011ec4:	f7fb fd4c 	bl	800d960 <HAL_GetTick>
 8011ec8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8011eca:	e005      	b.n	8011ed8 <HAL_RCC_OscConfig+0xc4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8011ecc:	f7fb fd48 	bl	800d960 <HAL_GetTick>
 8011ed0:	1b80      	subs	r0, r0, r6
 8011ed2:	2802      	cmp	r0, #2
 8011ed4:	f200 8127 	bhi.w	8012126 <HAL_RCC_OscConfig+0x312>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8011ed8:	682b      	ldr	r3, [r5, #0]
 8011eda:	05db      	lsls	r3, r3, #23
 8011edc:	d5f6      	bpl.n	8011ecc <HAL_RCC_OscConfig+0xb8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8011ede:	f7fb fd57 	bl	800d990 <HAL_GetREVID>
 8011ee2:	f241 0303 	movw	r3, #4099	; 0x1003
 8011ee6:	4298      	cmp	r0, r3
 8011ee8:	f200 8266 	bhi.w	80123b8 <HAL_RCC_OscConfig+0x5a4>
 8011eec:	6a22      	ldr	r2, [r4, #32]
 8011eee:	686b      	ldr	r3, [r5, #4]
 8011ef0:	2a20      	cmp	r2, #32
 8011ef2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8011ef6:	bf0c      	ite	eq
 8011ef8:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8011efc:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8011f00:	606b      	str	r3, [r5, #4]
 8011f02:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011f04:	071d      	lsls	r5, r3, #28
 8011f06:	d517      	bpl.n	8011f38 <HAL_RCC_OscConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8011f08:	6963      	ldr	r3, [r4, #20]
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	f000 8128 	beq.w	8012160 <HAL_RCC_OscConfig+0x34c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8011f10:	4b6d      	ldr	r3, [pc, #436]	; (80120c8 <HAL_RCC_OscConfig+0x2b4>)
 8011f12:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8011f14:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 8011f16:	f042 0201 	orr.w	r2, r2, #1
 8011f1a:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8011f1c:	f7fb fd20 	bl	800d960 <HAL_GetTick>
 8011f20:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8011f22:	e005      	b.n	8011f30 <HAL_RCC_OscConfig+0x11c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011f24:	f7fb fd1c 	bl	800d960 <HAL_GetTick>
 8011f28:	1b80      	subs	r0, r0, r6
 8011f2a:	2802      	cmp	r0, #2
 8011f2c:	f200 80fb 	bhi.w	8012126 <HAL_RCC_OscConfig+0x312>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8011f30:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8011f32:	0798      	lsls	r0, r3, #30
 8011f34:	d5f6      	bpl.n	8011f24 <HAL_RCC_OscConfig+0x110>
 8011f36:	6823      	ldr	r3, [r4, #0]
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8011f38:	069a      	lsls	r2, r3, #26
 8011f3a:	d517      	bpl.n	8011f6c <HAL_RCC_OscConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8011f3c:	69a3      	ldr	r3, [r4, #24]
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	f000 8121 	beq.w	8012186 <HAL_RCC_OscConfig+0x372>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8011f44:	4b60      	ldr	r3, [pc, #384]	; (80120c8 <HAL_RCC_OscConfig+0x2b4>)
 8011f46:	681a      	ldr	r2, [r3, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8011f48:	461d      	mov	r5, r3
      __HAL_RCC_HSI48_ENABLE();
 8011f4a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011f4e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8011f50:	f7fb fd06 	bl	800d960 <HAL_GetTick>
 8011f54:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8011f56:	e005      	b.n	8011f64 <HAL_RCC_OscConfig+0x150>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8011f58:	f7fb fd02 	bl	800d960 <HAL_GetTick>
 8011f5c:	1b80      	subs	r0, r0, r6
 8011f5e:	2802      	cmp	r0, #2
 8011f60:	f200 80e1 	bhi.w	8012126 <HAL_RCC_OscConfig+0x312>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8011f64:	682b      	ldr	r3, [r5, #0]
 8011f66:	049f      	lsls	r7, r3, #18
 8011f68:	d5f6      	bpl.n	8011f58 <HAL_RCC_OscConfig+0x144>
 8011f6a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011f6c:	0759      	lsls	r1, r3, #29
 8011f6e:	f100 80a0 	bmi.w	80120b2 <HAL_RCC_OscConfig+0x29e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011f72:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011f74:	b1d8      	cbz	r0, 8011fae <HAL_RCC_OscConfig+0x19a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8011f76:	4b54      	ldr	r3, [pc, #336]	; (80120c8 <HAL_RCC_OscConfig+0x2b4>)
 8011f78:	691a      	ldr	r2, [r3, #16]
 8011f7a:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8011f7e:	2a18      	cmp	r2, #24
 8011f80:	f000 81cb 	beq.w	801231a <HAL_RCC_OscConfig+0x506>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011f84:	2802      	cmp	r0, #2
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011f86:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011f88:	f000 815d 	beq.w	8012246 <HAL_RCC_OscConfig+0x432>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011f8c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8011f90:	461c      	mov	r4, r3
        __HAL_RCC_PLL_DISABLE();
 8011f92:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8011f94:	f7fb fce4 	bl	800d960 <HAL_GetTick>
 8011f98:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8011f9a:	e005      	b.n	8011fa8 <HAL_RCC_OscConfig+0x194>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011f9c:	f7fb fce0 	bl	800d960 <HAL_GetTick>
 8011fa0:	1b40      	subs	r0, r0, r5
 8011fa2:	2802      	cmp	r0, #2
 8011fa4:	f200 80bf 	bhi.w	8012126 <HAL_RCC_OscConfig+0x312>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8011fa8:	6823      	ldr	r3, [r4, #0]
 8011faa:	019b      	lsls	r3, r3, #6
 8011fac:	d4f6      	bmi.n	8011f9c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8011fae:	2000      	movs	r0, #0
}
 8011fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8011fb2:	4a45      	ldr	r2, [pc, #276]	; (80120c8 <HAL_RCC_OscConfig+0x2b4>)
 8011fb4:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8011fb6:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8011fb8:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8011fbc:	d02f      	beq.n	801201e <HAL_RCC_OscConfig+0x20a>
 8011fbe:	2b18      	cmp	r3, #24
 8011fc0:	d02b      	beq.n	801201a <HAL_RCC_OscConfig+0x206>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8011fc2:	68e2      	ldr	r2, [r4, #12]
 8011fc4:	2a00      	cmp	r2, #0
 8011fc6:	f000 8105 	beq.w	80121d4 <HAL_RCC_OscConfig+0x3c0>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8011fca:	493f      	ldr	r1, [pc, #252]	; (80120c8 <HAL_RCC_OscConfig+0x2b4>)
 8011fcc:	680b      	ldr	r3, [r1, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011fce:	460d      	mov	r5, r1
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8011fd0:	f023 0319 	bic.w	r3, r3, #25
 8011fd4:	4313      	orrs	r3, r2
 8011fd6:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8011fd8:	f7fb fcc2 	bl	800d960 <HAL_GetTick>
 8011fdc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011fde:	e005      	b.n	8011fec <HAL_RCC_OscConfig+0x1d8>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011fe0:	f7fb fcbe 	bl	800d960 <HAL_GetTick>
 8011fe4:	1b80      	subs	r0, r0, r6
 8011fe6:	2802      	cmp	r0, #2
 8011fe8:	f200 809d 	bhi.w	8012126 <HAL_RCC_OscConfig+0x312>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011fec:	682b      	ldr	r3, [r5, #0]
 8011fee:	075f      	lsls	r7, r3, #29
 8011ff0:	d5f6      	bpl.n	8011fe0 <HAL_RCC_OscConfig+0x1cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011ff2:	f7fb fccd 	bl	800d990 <HAL_GetREVID>
 8011ff6:	f241 0303 	movw	r3, #4099	; 0x1003
 8011ffa:	4298      	cmp	r0, r3
 8011ffc:	f200 81e5 	bhi.w	80123ca <HAL_RCC_OscConfig+0x5b6>
 8012000:	6922      	ldr	r2, [r4, #16]
 8012002:	686b      	ldr	r3, [r5, #4]
 8012004:	2a40      	cmp	r2, #64	; 0x40
 8012006:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 801200a:	bf0c      	ite	eq
 801200c:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8012010:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8012014:	606b      	str	r3, [r5, #4]
 8012016:	6823      	ldr	r3, [r4, #0]
 8012018:	e73d      	b.n	8011e96 <HAL_RCC_OscConfig+0x82>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 801201a:	0792      	lsls	r2, r2, #30
 801201c:	d1d1      	bne.n	8011fc2 <HAL_RCC_OscConfig+0x1ae>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801201e:	4b2a      	ldr	r3, [pc, #168]	; (80120c8 <HAL_RCC_OscConfig+0x2b4>)
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	075b      	lsls	r3, r3, #29
 8012024:	d501      	bpl.n	801202a <HAL_RCC_OscConfig+0x216>
 8012026:	68e3      	ldr	r3, [r4, #12]
 8012028:	b30b      	cbz	r3, 801206e <HAL_RCC_OscConfig+0x25a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801202a:	f7fb fcb1 	bl	800d990 <HAL_GetREVID>
 801202e:	f241 0303 	movw	r3, #4099	; 0x1003
 8012032:	4298      	cmp	r0, r3
 8012034:	f200 80e2 	bhi.w	80121fc <HAL_RCC_OscConfig+0x3e8>
 8012038:	6922      	ldr	r2, [r4, #16]
 801203a:	2a40      	cmp	r2, #64	; 0x40
 801203c:	f000 80fa 	beq.w	8012234 <HAL_RCC_OscConfig+0x420>
 8012040:	4921      	ldr	r1, [pc, #132]	; (80120c8 <HAL_RCC_OscConfig+0x2b4>)
 8012042:	684b      	ldr	r3, [r1, #4]
 8012044:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8012048:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 801204c:	604b      	str	r3, [r1, #4]
 801204e:	6823      	ldr	r3, [r4, #0]
 8012050:	e721      	b.n	8011e96 <HAL_RCC_OscConfig+0x82>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8012052:	f001 0103 	and.w	r1, r1, #3
 8012056:	2902      	cmp	r1, #2
 8012058:	f47f aeef 	bne.w	8011e3a <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801205c:	4a1a      	ldr	r2, [pc, #104]	; (80120c8 <HAL_RCC_OscConfig+0x2b4>)
 801205e:	6812      	ldr	r2, [r2, #0]
 8012060:	0392      	lsls	r2, r2, #14
 8012062:	f57f af15 	bpl.w	8011e90 <HAL_RCC_OscConfig+0x7c>
 8012066:	6862      	ldr	r2, [r4, #4]
 8012068:	2a00      	cmp	r2, #0
 801206a:	f47f af11 	bne.w	8011e90 <HAL_RCC_OscConfig+0x7c>
        return HAL_ERROR;
 801206e:	2001      	movs	r0, #1
}
 8012070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8012072:	f002 0203 	and.w	r2, r2, #3
 8012076:	2a01      	cmp	r2, #1
 8012078:	f47f af1a 	bne.w	8011eb0 <HAL_RCC_OscConfig+0x9c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801207c:	4b12      	ldr	r3, [pc, #72]	; (80120c8 <HAL_RCC_OscConfig+0x2b4>)
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	05da      	lsls	r2, r3, #23
 8012082:	d502      	bpl.n	801208a <HAL_RCC_OscConfig+0x276>
 8012084:	69e3      	ldr	r3, [r4, #28]
 8012086:	2b80      	cmp	r3, #128	; 0x80
 8012088:	d1f1      	bne.n	801206e <HAL_RCC_OscConfig+0x25a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801208a:	f7fb fc81 	bl	800d990 <HAL_GetREVID>
 801208e:	f241 0303 	movw	r3, #4099	; 0x1003
 8012092:	4298      	cmp	r0, r3
 8012094:	f200 80bc 	bhi.w	8012210 <HAL_RCC_OscConfig+0x3fc>
 8012098:	6a22      	ldr	r2, [r4, #32]
 801209a:	2a20      	cmp	r2, #32
 801209c:	f000 81a4 	beq.w	80123e8 <HAL_RCC_OscConfig+0x5d4>
 80120a0:	4909      	ldr	r1, [pc, #36]	; (80120c8 <HAL_RCC_OscConfig+0x2b4>)
 80120a2:	684b      	ldr	r3, [r1, #4]
 80120a4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80120a8:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 80120ac:	604b      	str	r3, [r1, #4]
 80120ae:	6823      	ldr	r3, [r4, #0]
 80120b0:	e728      	b.n	8011f04 <HAL_RCC_OscConfig+0xf0>
    PWR->CR1 |= PWR_CR1_DBP;
 80120b2:	4b06      	ldr	r3, [pc, #24]	; (80120cc <HAL_RCC_OscConfig+0x2b8>)
 80120b4:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80120b6:	461d      	mov	r5, r3
    PWR->CR1 |= PWR_CR1_DBP;
 80120b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80120bc:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80120be:	f7fb fc4f 	bl	800d960 <HAL_GetTick>
 80120c2:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80120c4:	e009      	b.n	80120da <HAL_RCC_OscConfig+0x2c6>
 80120c6:	bf00      	nop
 80120c8:	58024400 	.word	0x58024400
 80120cc:	58024800 	.word	0x58024800
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80120d0:	f7fb fc46 	bl	800d960 <HAL_GetTick>
 80120d4:	1b80      	subs	r0, r0, r6
 80120d6:	2864      	cmp	r0, #100	; 0x64
 80120d8:	d825      	bhi.n	8012126 <HAL_RCC_OscConfig+0x312>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80120da:	682b      	ldr	r3, [r5, #0]
 80120dc:	05da      	lsls	r2, r3, #23
 80120de:	d5f7      	bpl.n	80120d0 <HAL_RCC_OscConfig+0x2bc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80120e0:	68a3      	ldr	r3, [r4, #8]
 80120e2:	2b01      	cmp	r3, #1
 80120e4:	f000 817a 	beq.w	80123dc <HAL_RCC_OscConfig+0x5c8>
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	f000 8144 	beq.w	8012376 <HAL_RCC_OscConfig+0x562>
 80120ee:	2b05      	cmp	r3, #5
 80120f0:	4bae      	ldr	r3, [pc, #696]	; (80123ac <HAL_RCC_OscConfig+0x598>)
 80120f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80120f4:	f000 8181 	beq.w	80123fa <HAL_RCC_OscConfig+0x5e6>
 80120f8:	f022 0201 	bic.w	r2, r2, #1
 80120fc:	671a      	str	r2, [r3, #112]	; 0x70
 80120fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012100:	f022 0204 	bic.w	r2, r2, #4
 8012104:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8012106:	f7fb fc2b 	bl	800d960 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801210a:	4da8      	ldr	r5, [pc, #672]	; (80123ac <HAL_RCC_OscConfig+0x598>)
      tickstart = HAL_GetTick();
 801210c:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801210e:	f241 3688 	movw	r6, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8012112:	e004      	b.n	801211e <HAL_RCC_OscConfig+0x30a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012114:	f7fb fc24 	bl	800d960 <HAL_GetTick>
 8012118:	1bc0      	subs	r0, r0, r7
 801211a:	42b0      	cmp	r0, r6
 801211c:	d803      	bhi.n	8012126 <HAL_RCC_OscConfig+0x312>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801211e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8012120:	079b      	lsls	r3, r3, #30
 8012122:	d5f7      	bpl.n	8012114 <HAL_RCC_OscConfig+0x300>
 8012124:	e725      	b.n	8011f72 <HAL_RCC_OscConfig+0x15e>
            return HAL_TIMEOUT;
 8012126:	2003      	movs	r0, #3
}
 8012128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801212a:	4ba0      	ldr	r3, [pc, #640]	; (80123ac <HAL_RCC_OscConfig+0x598>)
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801212c:	f241 3788 	movw	r7, #5000	; 0x1388
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8012130:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8012132:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8012134:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8012138:	601a      	str	r2, [r3, #0]
 801213a:	681a      	ldr	r2, [r3, #0]
 801213c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8012140:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8012142:	f7fb fc0d 	bl	800d960 <HAL_GetTick>
 8012146:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8012148:	e004      	b.n	8012154 <HAL_RCC_OscConfig+0x340>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801214a:	f7fb fc09 	bl	800d960 <HAL_GetTick>
 801214e:	1b80      	subs	r0, r0, r6
 8012150:	42b8      	cmp	r0, r7
 8012152:	d8e8      	bhi.n	8012126 <HAL_RCC_OscConfig+0x312>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8012154:	682b      	ldr	r3, [r5, #0]
 8012156:	0398      	lsls	r0, r3, #14
 8012158:	d4f7      	bmi.n	801214a <HAL_RCC_OscConfig+0x336>
 801215a:	e698      	b.n	8011e8e <HAL_RCC_OscConfig+0x7a>
    return HAL_ERROR;
 801215c:	2001      	movs	r0, #1
}
 801215e:	4770      	bx	lr
      __HAL_RCC_LSI_DISABLE();
 8012160:	4b92      	ldr	r3, [pc, #584]	; (80123ac <HAL_RCC_OscConfig+0x598>)
 8012162:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8012164:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 8012166:	f022 0201 	bic.w	r2, r2, #1
 801216a:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 801216c:	f7fb fbf8 	bl	800d960 <HAL_GetTick>
 8012170:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8012172:	e004      	b.n	801217e <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012174:	f7fb fbf4 	bl	800d960 <HAL_GetTick>
 8012178:	1b80      	subs	r0, r0, r6
 801217a:	2802      	cmp	r0, #2
 801217c:	d8d3      	bhi.n	8012126 <HAL_RCC_OscConfig+0x312>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801217e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8012180:	0799      	lsls	r1, r3, #30
 8012182:	d4f7      	bmi.n	8012174 <HAL_RCC_OscConfig+0x360>
 8012184:	e6d7      	b.n	8011f36 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 8012186:	4b89      	ldr	r3, [pc, #548]	; (80123ac <HAL_RCC_OscConfig+0x598>)
 8012188:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801218a:	461d      	mov	r5, r3
      __HAL_RCC_HSI48_DISABLE();
 801218c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8012190:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8012192:	f7fb fbe5 	bl	800d960 <HAL_GetTick>
 8012196:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8012198:	e004      	b.n	80121a4 <HAL_RCC_OscConfig+0x390>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 801219a:	f7fb fbe1 	bl	800d960 <HAL_GetTick>
 801219e:	1b80      	subs	r0, r0, r6
 80121a0:	2802      	cmp	r0, #2
 80121a2:	d8c0      	bhi.n	8012126 <HAL_RCC_OscConfig+0x312>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80121a4:	682b      	ldr	r3, [r5, #0]
 80121a6:	0498      	lsls	r0, r3, #18
 80121a8:	d4f7      	bmi.n	801219a <HAL_RCC_OscConfig+0x386>
 80121aa:	e6de      	b.n	8011f6a <HAL_RCC_OscConfig+0x156>
        __HAL_RCC_CSI_DISABLE();
 80121ac:	4b7f      	ldr	r3, [pc, #508]	; (80123ac <HAL_RCC_OscConfig+0x598>)
 80121ae:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80121b0:	461d      	mov	r5, r3
        __HAL_RCC_CSI_DISABLE();
 80121b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80121b6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80121b8:	f7fb fbd2 	bl	800d960 <HAL_GetTick>
 80121bc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80121be:	e004      	b.n	80121ca <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80121c0:	f7fb fbce 	bl	800d960 <HAL_GetTick>
 80121c4:	1b80      	subs	r0, r0, r6
 80121c6:	2802      	cmp	r0, #2
 80121c8:	d8ad      	bhi.n	8012126 <HAL_RCC_OscConfig+0x312>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80121ca:	682b      	ldr	r3, [r5, #0]
 80121cc:	05df      	lsls	r7, r3, #23
 80121ce:	d4f7      	bmi.n	80121c0 <HAL_RCC_OscConfig+0x3ac>
 80121d0:	6823      	ldr	r3, [r4, #0]
 80121d2:	e697      	b.n	8011f04 <HAL_RCC_OscConfig+0xf0>
        __HAL_RCC_HSI_DISABLE();
 80121d4:	4b75      	ldr	r3, [pc, #468]	; (80123ac <HAL_RCC_OscConfig+0x598>)
 80121d6:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80121d8:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 80121da:	f022 0201 	bic.w	r2, r2, #1
 80121de:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80121e0:	f7fb fbbe 	bl	800d960 <HAL_GetTick>
 80121e4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80121e6:	e004      	b.n	80121f2 <HAL_RCC_OscConfig+0x3de>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80121e8:	f7fb fbba 	bl	800d960 <HAL_GetTick>
 80121ec:	1b80      	subs	r0, r0, r6
 80121ee:	2802      	cmp	r0, #2
 80121f0:	d899      	bhi.n	8012126 <HAL_RCC_OscConfig+0x312>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80121f2:	682b      	ldr	r3, [r5, #0]
 80121f4:	0758      	lsls	r0, r3, #29
 80121f6:	d4f7      	bmi.n	80121e8 <HAL_RCC_OscConfig+0x3d4>
 80121f8:	6823      	ldr	r3, [r4, #0]
 80121fa:	e64c      	b.n	8011e96 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80121fc:	4a6b      	ldr	r2, [pc, #428]	; (80123ac <HAL_RCC_OscConfig+0x598>)
 80121fe:	6921      	ldr	r1, [r4, #16]
 8012200:	6853      	ldr	r3, [r2, #4]
 8012202:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8012206:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 801220a:	6053      	str	r3, [r2, #4]
 801220c:	6823      	ldr	r3, [r4, #0]
 801220e:	e642      	b.n	8011e96 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8012210:	4a66      	ldr	r2, [pc, #408]	; (80123ac <HAL_RCC_OscConfig+0x598>)
 8012212:	6a21      	ldr	r1, [r4, #32]
 8012214:	68d3      	ldr	r3, [r2, #12]
 8012216:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 801221a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 801221e:	60d3      	str	r3, [r2, #12]
 8012220:	6823      	ldr	r3, [r4, #0]
 8012222:	e66f      	b.n	8011f04 <HAL_RCC_OscConfig+0xf0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8012224:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8012228:	601a      	str	r2, [r3, #0]
 801222a:	681a      	ldr	r2, [r3, #0]
 801222c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8012230:	601a      	str	r2, [r3, #0]
 8012232:	e61c      	b.n	8011e6e <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012234:	4a5d      	ldr	r2, [pc, #372]	; (80123ac <HAL_RCC_OscConfig+0x598>)
 8012236:	6853      	ldr	r3, [r2, #4]
 8012238:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 801223c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012240:	6053      	str	r3, [r2, #4]
 8012242:	6823      	ldr	r3, [r4, #0]
 8012244:	e627      	b.n	8011e96 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_PLL_DISABLE();
 8012246:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801224a:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 801224c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 801224e:	f7fb fb87 	bl	800d960 <HAL_GetTick>
 8012252:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8012254:	e005      	b.n	8012262 <HAL_RCC_OscConfig+0x44e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012256:	f7fb fb83 	bl	800d960 <HAL_GetTick>
 801225a:	1b80      	subs	r0, r0, r6
 801225c:	2802      	cmp	r0, #2
 801225e:	f63f af62 	bhi.w	8012126 <HAL_RCC_OscConfig+0x312>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8012262:	682b      	ldr	r3, [r5, #0]
 8012264:	0199      	lsls	r1, r3, #6
 8012266:	d4f6      	bmi.n	8012256 <HAL_RCC_OscConfig+0x442>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8012268:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801226a:	4b51      	ldr	r3, [pc, #324]	; (80123b0 <HAL_RCC_OscConfig+0x59c>)
 801226c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801226e:	4013      	ands	r3, r2
 8012270:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8012272:	4950      	ldr	r1, [pc, #320]	; (80123b4 <HAL_RCC_OscConfig+0x5a0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8012274:	4303      	orrs	r3, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8012276:	4e4d      	ldr	r6, [pc, #308]	; (80123ac <HAL_RCC_OscConfig+0x598>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8012278:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 801227c:	62ab      	str	r3, [r5, #40]	; 0x28
 801227e:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8012280:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 8012284:	3f01      	subs	r7, #1
 8012286:	1e50      	subs	r0, r2, #1
 8012288:	3b01      	subs	r3, #1
 801228a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801228c:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8012290:	025b      	lsls	r3, r3, #9
 8012292:	0400      	lsls	r0, r0, #16
 8012294:	3a01      	subs	r2, #1
 8012296:	b29b      	uxth	r3, r3
 8012298:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 801229c:	0612      	lsls	r2, r2, #24
 801229e:	4303      	orrs	r3, r0
 80122a0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80122a4:	433b      	orrs	r3, r7
 80122a6:	4313      	orrs	r3, r2
 80122a8:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 80122aa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80122ac:	f023 0301 	bic.w	r3, r3, #1
 80122b0:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80122b2:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80122b4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80122b6:	4011      	ands	r1, r2
 80122b8:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 80122bc:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80122be:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80122c0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80122c2:	f023 030c 	bic.w	r3, r3, #12
 80122c6:	4313      	orrs	r3, r2
 80122c8:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80122ca:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80122cc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80122ce:	f023 0302 	bic.w	r3, r3, #2
 80122d2:	4313      	orrs	r3, r2
 80122d4:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80122d6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80122d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80122dc:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80122de:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80122e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80122e4:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80122e6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80122e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80122ec:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 80122ee:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80122f0:	f043 0301 	orr.w	r3, r3, #1
 80122f4:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 80122f6:	682b      	ldr	r3, [r5, #0]
 80122f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80122fc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80122fe:	f7fb fb2f 	bl	800d960 <HAL_GetTick>
 8012302:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8012304:	e005      	b.n	8012312 <HAL_RCC_OscConfig+0x4fe>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012306:	f7fb fb2b 	bl	800d960 <HAL_GetTick>
 801230a:	1b00      	subs	r0, r0, r4
 801230c:	2802      	cmp	r0, #2
 801230e:	f63f af0a 	bhi.w	8012126 <HAL_RCC_OscConfig+0x312>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8012312:	6833      	ldr	r3, [r6, #0]
 8012314:	019a      	lsls	r2, r3, #6
 8012316:	d5f6      	bpl.n	8012306 <HAL_RCC_OscConfig+0x4f2>
 8012318:	e649      	b.n	8011fae <HAL_RCC_OscConfig+0x19a>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801231a:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 801231c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 801231e:	6b1d      	ldr	r5, [r3, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8012320:	f43f ae46 	beq.w	8011fb0 <HAL_RCC_OscConfig+0x19c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012324:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8012328:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801232a:	428b      	cmp	r3, r1
 801232c:	f47f ae9f 	bne.w	801206e <HAL_RCC_OscConfig+0x25a>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8012330:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012334:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8012336:	429a      	cmp	r2, r3
 8012338:	f47f ae99 	bne.w	801206e <HAL_RCC_OscConfig+0x25a>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801233c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801233e:	f3c5 0208 	ubfx	r2, r5, #0, #9
 8012342:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8012344:	429a      	cmp	r2, r3
 8012346:	f47f ae92 	bne.w	801206e <HAL_RCC_OscConfig+0x25a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801234a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801234c:	f3c5 2246 	ubfx	r2, r5, #9, #7
 8012350:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8012352:	429a      	cmp	r2, r3
 8012354:	f47f ae8b 	bne.w	801206e <HAL_RCC_OscConfig+0x25a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8012358:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801235a:	f3c5 4206 	ubfx	r2, r5, #16, #7
 801235e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8012360:	429a      	cmp	r2, r3
 8012362:	f47f ae84 	bne.w	801206e <HAL_RCC_OscConfig+0x25a>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8012366:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8012368:	f3c5 6506 	ubfx	r5, r5, #24, #7
 801236c:	3801      	subs	r0, #1
    return HAL_ERROR;
 801236e:	1a28      	subs	r0, r5, r0
 8012370:	bf18      	it	ne
 8012372:	2001      	movne	r0, #1
 8012374:	e61c      	b.n	8011fb0 <HAL_RCC_OscConfig+0x19c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8012376:	4b0d      	ldr	r3, [pc, #52]	; (80123ac <HAL_RCC_OscConfig+0x598>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012378:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801237c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801237e:	461d      	mov	r5, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8012380:	f022 0201 	bic.w	r2, r2, #1
 8012384:	671a      	str	r2, [r3, #112]	; 0x70
 8012386:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012388:	f022 0204 	bic.w	r2, r2, #4
 801238c:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 801238e:	f7fb fae7 	bl	800d960 <HAL_GetTick>
 8012392:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8012394:	e005      	b.n	80123a2 <HAL_RCC_OscConfig+0x58e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012396:	f7fb fae3 	bl	800d960 <HAL_GetTick>
 801239a:	1b80      	subs	r0, r0, r6
 801239c:	42b8      	cmp	r0, r7
 801239e:	f63f aec2 	bhi.w	8012126 <HAL_RCC_OscConfig+0x312>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80123a2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80123a4:	0798      	lsls	r0, r3, #30
 80123a6:	d4f6      	bmi.n	8012396 <HAL_RCC_OscConfig+0x582>
 80123a8:	e5e3      	b.n	8011f72 <HAL_RCC_OscConfig+0x15e>
 80123aa:	bf00      	nop
 80123ac:	58024400 	.word	0x58024400
 80123b0:	fffffc0c 	.word	0xfffffc0c
 80123b4:	ffff0007 	.word	0xffff0007
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80123b8:	68eb      	ldr	r3, [r5, #12]
 80123ba:	6a22      	ldr	r2, [r4, #32]
 80123bc:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80123c0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80123c4:	60eb      	str	r3, [r5, #12]
 80123c6:	6823      	ldr	r3, [r4, #0]
 80123c8:	e59c      	b.n	8011f04 <HAL_RCC_OscConfig+0xf0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80123ca:	686b      	ldr	r3, [r5, #4]
 80123cc:	6922      	ldr	r2, [r4, #16]
 80123ce:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80123d2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80123d6:	606b      	str	r3, [r5, #4]
 80123d8:	6823      	ldr	r3, [r4, #0]
 80123da:	e55c      	b.n	8011e96 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80123dc:	4a0b      	ldr	r2, [pc, #44]	; (801240c <HAL_RCC_OscConfig+0x5f8>)
 80123de:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80123e0:	f043 0301 	orr.w	r3, r3, #1
 80123e4:	6713      	str	r3, [r2, #112]	; 0x70
 80123e6:	e68e      	b.n	8012106 <HAL_RCC_OscConfig+0x2f2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80123e8:	4a08      	ldr	r2, [pc, #32]	; (801240c <HAL_RCC_OscConfig+0x5f8>)
 80123ea:	6853      	ldr	r3, [r2, #4]
 80123ec:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80123f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80123f4:	6053      	str	r3, [r2, #4]
 80123f6:	6823      	ldr	r3, [r4, #0]
 80123f8:	e584      	b.n	8011f04 <HAL_RCC_OscConfig+0xf0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80123fa:	f042 0204 	orr.w	r2, r2, #4
 80123fe:	671a      	str	r2, [r3, #112]	; 0x70
 8012400:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012402:	f042 0201 	orr.w	r2, r2, #1
 8012406:	671a      	str	r2, [r3, #112]	; 0x70
 8012408:	e67d      	b.n	8012106 <HAL_RCC_OscConfig+0x2f2>
 801240a:	bf00      	nop
 801240c:	58024400 	.word	0x58024400

08012410 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8012410:	4a3e      	ldr	r2, [pc, #248]	; (801250c <HAL_RCC_GetSysClockFreq+0xfc>)
 8012412:	6913      	ldr	r3, [r2, #16]
 8012414:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012418:	2b10      	cmp	r3, #16
 801241a:	d04f      	beq.n	80124bc <HAL_RCC_GetSysClockFreq+0xac>
 801241c:	2b18      	cmp	r3, #24
 801241e:	d00b      	beq.n	8012438 <HAL_RCC_GetSysClockFreq+0x28>
 8012420:	b10b      	cbz	r3, 8012426 <HAL_RCC_GetSysClockFreq+0x16>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8012422:	483b      	ldr	r0, [pc, #236]	; (8012510 <HAL_RCC_GetSysClockFreq+0x100>)
 8012424:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012426:	6813      	ldr	r3, [r2, #0]
 8012428:	0699      	lsls	r1, r3, #26
 801242a:	d549      	bpl.n	80124c0 <HAL_RCC_GetSysClockFreq+0xb0>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 801242c:	6813      	ldr	r3, [r2, #0]
 801242e:	4839      	ldr	r0, [pc, #228]	; (8012514 <HAL_RCC_GetSysClockFreq+0x104>)
 8012430:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8012434:	40d8      	lsrs	r0, r3
 8012436:	4770      	bx	lr
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8012438:	6a91      	ldr	r1, [r2, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 801243a:	6a90      	ldr	r0, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 801243c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 801243e:	f3c0 1005 	ubfx	r0, r0, #4, #6
{
 8012442:	b410      	push	{r4}
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8012444:	6b54      	ldr	r4, [r2, #52]	; 0x34

    if (pllm != 0U)
 8012446:	b3b0      	cbz	r0, 80124b6 <HAL_RCC_GetSysClockFreq+0xa6>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8012448:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 801244c:	f003 0301 	and.w	r3, r3, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8012450:	f001 0103 	and.w	r1, r1, #3
 8012454:	ee07 0a90 	vmov	s15, r0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8012458:	fb03 f304 	mul.w	r3, r3, r4
    {
      switch (pllsource)
 801245c:	2901      	cmp	r1, #1
 801245e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8012462:	ee07 3a10 	vmov	s14, r3
 8012466:	eeba 7ae9 	vcvt.f32.s32	s14, s14, #13
      switch (pllsource)
 801246a:	d002      	beq.n	8012472 <HAL_RCC_GetSysClockFreq+0x62>
 801246c:	d32d      	bcc.n	80124ca <HAL_RCC_GetSysClockFreq+0xba>
 801246e:	2902      	cmp	r1, #2
 8012470:	d028      	beq.n	80124c4 <HAL_RCC_GetSysClockFreq+0xb4>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8012472:	eddf 5a29 	vldr	s11, [pc, #164]	; 8012518 <HAL_RCC_GetSysClockFreq+0x108>
 8012476:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 801247a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 801247c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012480:	ee07 3a90 	vmov	s15, r3
 8012484:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8012488:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801248c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8012490:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012494:	ee27 7a26 	vmul.f32	s14, s14, s13
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8012498:	4b1c      	ldr	r3, [pc, #112]	; (801250c <HAL_RCC_GetSysClockFreq+0xfc>)
 801249a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801249c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80124a0:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80124a2:	ee07 3a90 	vmov	s15, r3
 80124a6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80124aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80124ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80124b2:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 80124b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80124ba:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 80124bc:	4817      	ldr	r0, [pc, #92]	; (801251c <HAL_RCC_GetSysClockFreq+0x10c>)
 80124be:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 80124c0:	4814      	ldr	r0, [pc, #80]	; (8012514 <HAL_RCC_GetSysClockFreq+0x104>)
}
 80124c2:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80124c4:	eddf 5a16 	vldr	s11, [pc, #88]	; 8012520 <HAL_RCC_GetSysClockFreq+0x110>
 80124c8:	e7d5      	b.n	8012476 <HAL_RCC_GetSysClockFreq+0x66>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80124ca:	6813      	ldr	r3, [r2, #0]
 80124cc:	069b      	lsls	r3, r3, #26
 80124ce:	d51a      	bpl.n	8012506 <HAL_RCC_GetSysClockFreq+0xf6>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80124d0:	6810      	ldr	r0, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80124d2:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80124d6:	490f      	ldr	r1, [pc, #60]	; (8012514 <HAL_RCC_GetSysClockFreq+0x104>)
 80124d8:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80124dc:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80124de:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80124e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80124e4:	ee06 1a90 	vmov	s13, r1
 80124e8:	eef8 5ae6 	vcvt.f32.s32	s11, s13
 80124ec:	ee06 3a90 	vmov	s13, r3
 80124f0:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
 80124f4:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 80124f8:	ee76 7a05 	vadd.f32	s15, s12, s10
 80124fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012500:	ee26 7a87 	vmul.f32	s14, s13, s14
 8012504:	e7c8      	b.n	8012498 <HAL_RCC_GetSysClockFreq+0x88>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8012506:	eddf 5a07 	vldr	s11, [pc, #28]	; 8012524 <HAL_RCC_GetSysClockFreq+0x114>
 801250a:	e7b4      	b.n	8012476 <HAL_RCC_GetSysClockFreq+0x66>
 801250c:	58024400 	.word	0x58024400
 8012510:	003d0900 	.word	0x003d0900
 8012514:	03d09000 	.word	0x03d09000
 8012518:	4a742400 	.word	0x4a742400
 801251c:	017d7840 	.word	0x017d7840
 8012520:	4bbebc20 	.word	0x4bbebc20
 8012524:	4c742400 	.word	0x4c742400

08012528 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8012528:	b178      	cbz	r0, 801254a <HAL_RCC_ClockConfig+0x22>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801252a:	4a8e      	ldr	r2, [pc, #568]	; (8012764 <HAL_RCC_ClockConfig+0x23c>)
 801252c:	6813      	ldr	r3, [r2, #0]
 801252e:	f003 030f 	and.w	r3, r3, #15
 8012532:	428b      	cmp	r3, r1
 8012534:	d20b      	bcs.n	801254e <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012536:	6813      	ldr	r3, [r2, #0]
 8012538:	f023 030f 	bic.w	r3, r3, #15
 801253c:	430b      	orrs	r3, r1
 801253e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8012540:	6813      	ldr	r3, [r2, #0]
 8012542:	f003 030f 	and.w	r3, r3, #15
 8012546:	428b      	cmp	r3, r1
 8012548:	d001      	beq.n	801254e <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 801254a:	2001      	movs	r0, #1
}
 801254c:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801254e:	6803      	ldr	r3, [r0, #0]
{
 8012550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8012554:	075d      	lsls	r5, r3, #29
 8012556:	d50b      	bpl.n	8012570 <HAL_RCC_ClockConfig+0x48>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8012558:	4c83      	ldr	r4, [pc, #524]	; (8012768 <HAL_RCC_ClockConfig+0x240>)
 801255a:	6905      	ldr	r5, [r0, #16]
 801255c:	69a2      	ldr	r2, [r4, #24]
 801255e:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8012562:	4295      	cmp	r5, r2
 8012564:	d904      	bls.n	8012570 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8012566:	69a2      	ldr	r2, [r4, #24]
 8012568:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 801256c:	432a      	orrs	r2, r5
 801256e:	61a2      	str	r2, [r4, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012570:	071c      	lsls	r4, r3, #28
 8012572:	d50b      	bpl.n	801258c <HAL_RCC_ClockConfig+0x64>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8012574:	4c7c      	ldr	r4, [pc, #496]	; (8012768 <HAL_RCC_ClockConfig+0x240>)
 8012576:	6945      	ldr	r5, [r0, #20]
 8012578:	69e2      	ldr	r2, [r4, #28]
 801257a:	f002 0270 	and.w	r2, r2, #112	; 0x70
 801257e:	4295      	cmp	r5, r2
 8012580:	d904      	bls.n	801258c <HAL_RCC_ClockConfig+0x64>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8012582:	69e2      	ldr	r2, [r4, #28]
 8012584:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8012588:	432a      	orrs	r2, r5
 801258a:	61e2      	str	r2, [r4, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801258c:	06da      	lsls	r2, r3, #27
 801258e:	d50b      	bpl.n	80125a8 <HAL_RCC_ClockConfig+0x80>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8012590:	4c75      	ldr	r4, [pc, #468]	; (8012768 <HAL_RCC_ClockConfig+0x240>)
 8012592:	6985      	ldr	r5, [r0, #24]
 8012594:	69e2      	ldr	r2, [r4, #28]
 8012596:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 801259a:	4295      	cmp	r5, r2
 801259c:	d904      	bls.n	80125a8 <HAL_RCC_ClockConfig+0x80>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801259e:	69e2      	ldr	r2, [r4, #28]
 80125a0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80125a4:	432a      	orrs	r2, r5
 80125a6:	61e2      	str	r2, [r4, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80125a8:	069f      	lsls	r7, r3, #26
 80125aa:	d50b      	bpl.n	80125c4 <HAL_RCC_ClockConfig+0x9c>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80125ac:	4c6e      	ldr	r4, [pc, #440]	; (8012768 <HAL_RCC_ClockConfig+0x240>)
 80125ae:	69c5      	ldr	r5, [r0, #28]
 80125b0:	6a22      	ldr	r2, [r4, #32]
 80125b2:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80125b6:	4295      	cmp	r5, r2
 80125b8:	d904      	bls.n	80125c4 <HAL_RCC_ClockConfig+0x9c>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80125ba:	6a22      	ldr	r2, [r4, #32]
 80125bc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80125c0:	432a      	orrs	r2, r5
 80125c2:	6222      	str	r2, [r4, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80125c4:	079e      	lsls	r6, r3, #30
 80125c6:	4604      	mov	r4, r0
 80125c8:	460d      	mov	r5, r1
 80125ca:	f003 0201 	and.w	r2, r3, #1
 80125ce:	d55d      	bpl.n	801268c <HAL_RCC_ClockConfig+0x164>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80125d0:	4e65      	ldr	r6, [pc, #404]	; (8012768 <HAL_RCC_ClockConfig+0x240>)
 80125d2:	68c0      	ldr	r0, [r0, #12]
 80125d4:	69b1      	ldr	r1, [r6, #24]
 80125d6:	f001 010f 	and.w	r1, r1, #15
 80125da:	4288      	cmp	r0, r1
 80125dc:	d904      	bls.n	80125e8 <HAL_RCC_ClockConfig+0xc0>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80125de:	69b1      	ldr	r1, [r6, #24]
 80125e0:	f021 010f 	bic.w	r1, r1, #15
 80125e4:	4301      	orrs	r1, r0
 80125e6:	61b1      	str	r1, [r6, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80125e8:	2a00      	cmp	r2, #0
 80125ea:	d031      	beq.n	8012650 <HAL_RCC_ClockConfig+0x128>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80125ec:	4a5e      	ldr	r2, [pc, #376]	; (8012768 <HAL_RCC_ClockConfig+0x240>)
 80125ee:	68a1      	ldr	r1, [r4, #8]
 80125f0:	6993      	ldr	r3, [r2, #24]
 80125f2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80125f6:	430b      	orrs	r3, r1
 80125f8:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80125fa:	6863      	ldr	r3, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80125fc:	6812      	ldr	r2, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80125fe:	2b02      	cmp	r3, #2
 8012600:	f000 80a2 	beq.w	8012748 <HAL_RCC_ClockConfig+0x220>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012604:	2b03      	cmp	r3, #3
 8012606:	f000 80a5 	beq.w	8012754 <HAL_RCC_ClockConfig+0x22c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 801260a:	2b01      	cmp	r3, #1
 801260c:	f000 80a6 	beq.w	801275c <HAL_RCC_ClockConfig+0x234>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8012610:	0757      	lsls	r7, r2, #29
 8012612:	d538      	bpl.n	8012686 <HAL_RCC_ClockConfig+0x15e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8012614:	4954      	ldr	r1, [pc, #336]	; (8012768 <HAL_RCC_ClockConfig+0x240>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012616:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801261a:	690a      	ldr	r2, [r1, #16]
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801261c:	460e      	mov	r6, r1
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801261e:	f022 0207 	bic.w	r2, r2, #7
 8012622:	4313      	orrs	r3, r2
 8012624:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 8012626:	f7fb f99b 	bl	800d960 <HAL_GetTick>
 801262a:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801262c:	e005      	b.n	801263a <HAL_RCC_ClockConfig+0x112>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801262e:	f7fb f997 	bl	800d960 <HAL_GetTick>
 8012632:	1bc0      	subs	r0, r0, r7
 8012634:	4540      	cmp	r0, r8
 8012636:	f200 808b 	bhi.w	8012750 <HAL_RCC_ClockConfig+0x228>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801263a:	6933      	ldr	r3, [r6, #16]
 801263c:	6862      	ldr	r2, [r4, #4]
 801263e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012642:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8012646:	d1f2      	bne.n	801262e <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012648:	6823      	ldr	r3, [r4, #0]
 801264a:	079e      	lsls	r6, r3, #30
 801264c:	d50b      	bpl.n	8012666 <HAL_RCC_ClockConfig+0x13e>
 801264e:	68e0      	ldr	r0, [r4, #12]
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8012650:	4945      	ldr	r1, [pc, #276]	; (8012768 <HAL_RCC_ClockConfig+0x240>)
 8012652:	698a      	ldr	r2, [r1, #24]
 8012654:	f002 020f 	and.w	r2, r2, #15
 8012658:	4282      	cmp	r2, r0
 801265a:	d904      	bls.n	8012666 <HAL_RCC_ClockConfig+0x13e>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801265c:	698a      	ldr	r2, [r1, #24]
 801265e:	f022 020f 	bic.w	r2, r2, #15
 8012662:	4310      	orrs	r0, r2
 8012664:	6188      	str	r0, [r1, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8012666:	493f      	ldr	r1, [pc, #252]	; (8012764 <HAL_RCC_ClockConfig+0x23c>)
 8012668:	680a      	ldr	r2, [r1, #0]
 801266a:	f002 020f 	and.w	r2, r2, #15
 801266e:	42aa      	cmp	r2, r5
 8012670:	d914      	bls.n	801269c <HAL_RCC_ClockConfig+0x174>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012672:	680a      	ldr	r2, [r1, #0]
 8012674:	f022 020f 	bic.w	r2, r2, #15
 8012678:	432a      	orrs	r2, r5
 801267a:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801267c:	680a      	ldr	r2, [r1, #0]
 801267e:	f002 020f 	and.w	r2, r2, #15
 8012682:	42aa      	cmp	r2, r5
 8012684:	d00a      	beq.n	801269c <HAL_RCC_ClockConfig+0x174>
    return HAL_ERROR;
 8012686:	2001      	movs	r0, #1
}
 8012688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801268c:	2a00      	cmp	r2, #0
 801268e:	d1ad      	bne.n	80125ec <HAL_RCC_ClockConfig+0xc4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8012690:	4934      	ldr	r1, [pc, #208]	; (8012764 <HAL_RCC_ClockConfig+0x23c>)
 8012692:	680a      	ldr	r2, [r1, #0]
 8012694:	f002 020f 	and.w	r2, r2, #15
 8012698:	42aa      	cmp	r2, r5
 801269a:	d8ea      	bhi.n	8012672 <HAL_RCC_ClockConfig+0x14a>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801269c:	0758      	lsls	r0, r3, #29
 801269e:	d50b      	bpl.n	80126b8 <HAL_RCC_ClockConfig+0x190>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80126a0:	4931      	ldr	r1, [pc, #196]	; (8012768 <HAL_RCC_ClockConfig+0x240>)
 80126a2:	6920      	ldr	r0, [r4, #16]
 80126a4:	698a      	ldr	r2, [r1, #24]
 80126a6:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80126aa:	4290      	cmp	r0, r2
 80126ac:	d204      	bcs.n	80126b8 <HAL_RCC_ClockConfig+0x190>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80126ae:	698a      	ldr	r2, [r1, #24]
 80126b0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80126b4:	4302      	orrs	r2, r0
 80126b6:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80126b8:	0719      	lsls	r1, r3, #28
 80126ba:	d50b      	bpl.n	80126d4 <HAL_RCC_ClockConfig+0x1ac>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80126bc:	492a      	ldr	r1, [pc, #168]	; (8012768 <HAL_RCC_ClockConfig+0x240>)
 80126be:	6960      	ldr	r0, [r4, #20]
 80126c0:	69ca      	ldr	r2, [r1, #28]
 80126c2:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80126c6:	4290      	cmp	r0, r2
 80126c8:	d204      	bcs.n	80126d4 <HAL_RCC_ClockConfig+0x1ac>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80126ca:	69ca      	ldr	r2, [r1, #28]
 80126cc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80126d0:	4302      	orrs	r2, r0
 80126d2:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80126d4:	06da      	lsls	r2, r3, #27
 80126d6:	d50b      	bpl.n	80126f0 <HAL_RCC_ClockConfig+0x1c8>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80126d8:	4923      	ldr	r1, [pc, #140]	; (8012768 <HAL_RCC_ClockConfig+0x240>)
 80126da:	69a0      	ldr	r0, [r4, #24]
 80126dc:	69ca      	ldr	r2, [r1, #28]
 80126de:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80126e2:	4290      	cmp	r0, r2
 80126e4:	d204      	bcs.n	80126f0 <HAL_RCC_ClockConfig+0x1c8>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80126e6:	69ca      	ldr	r2, [r1, #28]
 80126e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80126ec:	4302      	orrs	r2, r0
 80126ee:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80126f0:	069b      	lsls	r3, r3, #26
 80126f2:	d50b      	bpl.n	801270c <HAL_RCC_ClockConfig+0x1e4>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80126f4:	4a1c      	ldr	r2, [pc, #112]	; (8012768 <HAL_RCC_ClockConfig+0x240>)
 80126f6:	69e1      	ldr	r1, [r4, #28]
 80126f8:	6a13      	ldr	r3, [r2, #32]
 80126fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80126fe:	4299      	cmp	r1, r3
 8012700:	d204      	bcs.n	801270c <HAL_RCC_ClockConfig+0x1e4>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8012702:	6a13      	ldr	r3, [r2, #32]
 8012704:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012708:	430b      	orrs	r3, r1
 801270a:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801270c:	f7ff fe80 	bl	8012410 <HAL_RCC_GetSysClockFreq>
 8012710:	4a15      	ldr	r2, [pc, #84]	; (8012768 <HAL_RCC_ClockConfig+0x240>)
 8012712:	4916      	ldr	r1, [pc, #88]	; (801276c <HAL_RCC_ClockConfig+0x244>)
 8012714:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8012716:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8012718:	f3c3 2303 	ubfx	r3, r3, #8, #4
  halstatus = HAL_InitTick (uwTickPrio);
 801271c:	4d14      	ldr	r5, [pc, #80]	; (8012770 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801271e:	f002 020f 	and.w	r2, r2, #15
 8012722:	4c14      	ldr	r4, [pc, #80]	; (8012774 <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8012724:	5ccb      	ldrb	r3, [r1, r3]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8012726:	5c8a      	ldrb	r2, [r1, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8012728:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = common_system_clock;
 801272c:	4912      	ldr	r1, [pc, #72]	; (8012778 <HAL_RCC_ClockConfig+0x250>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801272e:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8012732:	fa20 f303 	lsr.w	r3, r0, r3
  halstatus = HAL_InitTick (uwTickPrio);
 8012736:	6828      	ldr	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8012738:	fa23 f202 	lsr.w	r2, r3, r2
  SystemCoreClock = common_system_clock;
 801273c:	600b      	str	r3, [r1, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801273e:	6022      	str	r2, [r4, #0]
}
 8012740:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8012744:	f7fb b8a8 	b.w	800d898 <HAL_InitTick>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8012748:	0390      	lsls	r0, r2, #14
 801274a:	f53f af63 	bmi.w	8012614 <HAL_RCC_ClockConfig+0xec>
 801274e:	e79a      	b.n	8012686 <HAL_RCC_ClockConfig+0x15e>
            return HAL_TIMEOUT;
 8012750:	2003      	movs	r0, #3
 8012752:	e799      	b.n	8012688 <HAL_RCC_ClockConfig+0x160>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8012754:	0191      	lsls	r1, r2, #6
 8012756:	f53f af5d 	bmi.w	8012614 <HAL_RCC_ClockConfig+0xec>
 801275a:	e794      	b.n	8012686 <HAL_RCC_ClockConfig+0x15e>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801275c:	05d2      	lsls	r2, r2, #23
 801275e:	f53f af59 	bmi.w	8012614 <HAL_RCC_ClockConfig+0xec>
 8012762:	e790      	b.n	8012686 <HAL_RCC_ClockConfig+0x15e>
 8012764:	52002000 	.word	0x52002000
 8012768:	58024400 	.word	0x58024400
 801276c:	080bf274 	.word	0x080bf274
 8012770:	240073bc 	.word	0x240073bc
 8012774:	24007294 	.word	0x24007294
 8012778:	24007290 	.word	0x24007290

0801277c <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801277c:	4a49      	ldr	r2, [pc, #292]	; (80128a4 <HAL_RCC_GetHCLKFreq+0x128>)
 801277e:	6913      	ldr	r3, [r2, #16]
 8012780:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012784:	2b10      	cmp	r3, #16
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8012786:	b430      	push	{r4, r5}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8012788:	d064      	beq.n	8012854 <HAL_RCC_GetHCLKFreq+0xd8>
 801278a:	2b18      	cmp	r3, #24
 801278c:	d022      	beq.n	80127d4 <HAL_RCC_GetHCLKFreq+0x58>
 801278e:	b1bb      	cbz	r3, 80127c0 <HAL_RCC_GetHCLKFreq+0x44>
    sysclockfreq = CSI_VALUE;
 8012790:	4b45      	ldr	r3, [pc, #276]	; (80128a8 <HAL_RCC_GetHCLKFreq+0x12c>)
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8012792:	4944      	ldr	r1, [pc, #272]	; (80128a4 <HAL_RCC_GetHCLKFreq+0x128>)
 8012794:	4845      	ldr	r0, [pc, #276]	; (80128ac <HAL_RCC_GetHCLKFreq+0x130>)
 8012796:	698a      	ldr	r2, [r1, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8012798:	6989      	ldr	r1, [r1, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801279a:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801279e:	4c44      	ldr	r4, [pc, #272]	; (80128b0 <HAL_RCC_GetHCLKFreq+0x134>)
 80127a0:	f001 010f 	and.w	r1, r1, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80127a4:	4d43      	ldr	r5, [pc, #268]	; (80128b4 <HAL_RCC_GetHCLKFreq+0x138>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80127a6:	5c82      	ldrb	r2, [r0, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80127a8:	5c40      	ldrb	r0, [r0, r1]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80127aa:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80127ae:	f000 001f 	and.w	r0, r0, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80127b2:	40d3      	lsrs	r3, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80127b4:	fa23 f000 	lsr.w	r0, r3, r0
  SystemCoreClock = common_system_clock;
 80127b8:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80127ba:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 80127bc:	bc30      	pop	{r4, r5}
 80127be:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80127c0:	6813      	ldr	r3, [r2, #0]
 80127c2:	0699      	lsls	r1, r3, #26
 80127c4:	d548      	bpl.n	8012858 <HAL_RCC_GetHCLKFreq+0xdc>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80127c6:	6813      	ldr	r3, [r2, #0]
 80127c8:	4a3b      	ldr	r2, [pc, #236]	; (80128b8 <HAL_RCC_GetHCLKFreq+0x13c>)
 80127ca:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80127ce:	fa22 f303 	lsr.w	r3, r2, r3
 80127d2:	e7de      	b.n	8012792 <HAL_RCC_GetHCLKFreq+0x16>
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80127d4:	6a90      	ldr	r0, [r2, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80127d6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80127d8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80127da:	f3c3 1305 	ubfx	r3, r3, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80127de:	6b54      	ldr	r4, [r2, #52]	; 0x34
    if (pllm != 0U)
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d0d6      	beq.n	8012792 <HAL_RCC_GetHCLKFreq+0x16>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80127e4:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80127e8:	f001 0101 	and.w	r1, r1, #1
 80127ec:	ee07 3a90 	vmov	s15, r3
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80127f0:	f000 0003 	and.w	r0, r0, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80127f4:	fb01 f304 	mul.w	r3, r1, r4
 80127f8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
      switch (pllsource)
 80127fc:	2801      	cmp	r0, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80127fe:	ee07 3a90 	vmov	s15, r3
 8012802:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
      switch (pllsource)
 8012806:	d002      	beq.n	801280e <HAL_RCC_GetHCLKFreq+0x92>
 8012808:	d32b      	bcc.n	8012862 <HAL_RCC_GetHCLKFreq+0xe6>
 801280a:	2802      	cmp	r0, #2
 801280c:	d026      	beq.n	801285c <HAL_RCC_GetHCLKFreq+0xe0>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801280e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80128bc <HAL_RCC_GetHCLKFreq+0x140>
 8012812:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8012816:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8012818:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801281c:	ee07 3a10 	vmov	s14, r3
 8012820:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8012824:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012828:	ee37 7a25 	vadd.f32	s14, s14, s11
 801282c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012830:	ee67 7a86 	vmul.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8012834:	4b1b      	ldr	r3, [pc, #108]	; (80128a4 <HAL_RCC_GetHCLKFreq+0x128>)
 8012836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012838:	f3c3 2346 	ubfx	r3, r3, #9, #7
 801283c:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 801283e:	ee07 3a10 	vmov	s14, r3
 8012842:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012846:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801284a:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 801284e:	ee17 3a90 	vmov	r3, s15
 8012852:	e79e      	b.n	8012792 <HAL_RCC_GetHCLKFreq+0x16>
    sysclockfreq = HSE_VALUE;
 8012854:	4b1a      	ldr	r3, [pc, #104]	; (80128c0 <HAL_RCC_GetHCLKFreq+0x144>)
 8012856:	e79c      	b.n	8012792 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8012858:	4b17      	ldr	r3, [pc, #92]	; (80128b8 <HAL_RCC_GetHCLKFreq+0x13c>)
 801285a:	e79a      	b.n	8012792 <HAL_RCC_GetHCLKFreq+0x16>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801285c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80128c4 <HAL_RCC_GetHCLKFreq+0x148>
 8012860:	e7d7      	b.n	8012812 <HAL_RCC_GetHCLKFreq+0x96>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012862:	6813      	ldr	r3, [r2, #0]
 8012864:	069b      	lsls	r3, r3, #26
 8012866:	d51a      	bpl.n	801289e <HAL_RCC_GetHCLKFreq+0x122>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8012868:	6810      	ldr	r0, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801286a:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 801286e:	4912      	ldr	r1, [pc, #72]	; (80128b8 <HAL_RCC_GetHCLKFreq+0x13c>)
 8012870:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8012874:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8012876:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8012878:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801287c:	ee07 1a10 	vmov	s14, r1
 8012880:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8012884:	ee07 3a10 	vmov	s14, r3
 8012888:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 801288c:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8012890:	ee76 6a05 	vadd.f32	s13, s12, s10
 8012894:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012898:	ee67 7a27 	vmul.f32	s15, s14, s15
 801289c:	e7ca      	b.n	8012834 <HAL_RCC_GetHCLKFreq+0xb8>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801289e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80128c8 <HAL_RCC_GetHCLKFreq+0x14c>
 80128a2:	e7b6      	b.n	8012812 <HAL_RCC_GetHCLKFreq+0x96>
 80128a4:	58024400 	.word	0x58024400
 80128a8:	003d0900 	.word	0x003d0900
 80128ac:	080bf274 	.word	0x080bf274
 80128b0:	24007294 	.word	0x24007294
 80128b4:	24007290 	.word	0x24007290
 80128b8:	03d09000 	.word	0x03d09000
 80128bc:	4a742400 	.word	0x4a742400
 80128c0:	017d7840 	.word	0x017d7840
 80128c4:	4bbebc20 	.word	0x4bbebc20
 80128c8:	4c742400 	.word	0x4c742400

080128cc <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80128cc:	494d      	ldr	r1, [pc, #308]	; (8012a04 <HAL_RCC_GetPCLK1Freq+0x138>)
 80128ce:	690b      	ldr	r3, [r1, #16]
 80128d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80128d4:	2b10      	cmp	r3, #16
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80128d6:	b430      	push	{r4, r5}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80128d8:	d06b      	beq.n	80129b2 <HAL_RCC_GetPCLK1Freq+0xe6>
 80128da:	2b18      	cmp	r3, #24
 80128dc:	d029      	beq.n	8012932 <HAL_RCC_GetPCLK1Freq+0x66>
 80128de:	b1fb      	cbz	r3, 8012920 <HAL_RCC_GetPCLK1Freq+0x54>
    sysclockfreq = CSI_VALUE;
 80128e0:	4a49      	ldr	r2, [pc, #292]	; (8012a08 <HAL_RCC_GetPCLK1Freq+0x13c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80128e2:	4848      	ldr	r0, [pc, #288]	; (8012a04 <HAL_RCC_GetPCLK1Freq+0x138>)
 80128e4:	4949      	ldr	r1, [pc, #292]	; (8012a0c <HAL_RCC_GetPCLK1Freq+0x140>)
 80128e6:	6984      	ldr	r4, [r0, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80128e8:	6983      	ldr	r3, [r0, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80128ea:	f3c4 2403 	ubfx	r4, r4, #8, #4
  SystemCoreClock = common_system_clock;
 80128ee:	4d48      	ldr	r5, [pc, #288]	; (8012a10 <HAL_RCC_GetPCLK1Freq+0x144>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80128f0:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80128f4:	5d0c      	ldrb	r4, [r1, r4]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80128f6:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80128f8:	f004 041f 	and.w	r4, r4, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80128fc:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8012900:	40e2      	lsrs	r2, r4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8012902:	4c44      	ldr	r4, [pc, #272]	; (8012a14 <HAL_RCC_GetPCLK1Freq+0x148>)
 8012904:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 8012908:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801290a:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 801290c:	69c2      	ldr	r2, [r0, #28]
 801290e:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8012912:	5c88      	ldrb	r0, [r1, r2]
 8012914:	f000 001f 	and.w	r0, r0, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8012918:	bc30      	pop	{r4, r5}
 801291a:	fa23 f000 	lsr.w	r0, r3, r0
 801291e:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012920:	680b      	ldr	r3, [r1, #0]
 8012922:	069a      	lsls	r2, r3, #26
 8012924:	d547      	bpl.n	80129b6 <HAL_RCC_GetPCLK1Freq+0xea>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8012926:	680b      	ldr	r3, [r1, #0]
 8012928:	4a3b      	ldr	r2, [pc, #236]	; (8012a18 <HAL_RCC_GetPCLK1Freq+0x14c>)
 801292a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 801292e:	40da      	lsrs	r2, r3
 8012930:	e7d7      	b.n	80128e2 <HAL_RCC_GetPCLK1Freq+0x16>
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8012932:	6a88      	ldr	r0, [r1, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8012934:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8012936:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8012938:	f3c2 1205 	ubfx	r2, r2, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 801293c:	6b4c      	ldr	r4, [r1, #52]	; 0x34
    if (pllm != 0U)
 801293e:	2a00      	cmp	r2, #0
 8012940:	d0cf      	beq.n	80128e2 <HAL_RCC_GetPCLK1Freq+0x16>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8012942:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8012946:	f003 0301 	and.w	r3, r3, #1
 801294a:	ee07 2a90 	vmov	s15, r2
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801294e:	f000 0003 	and.w	r0, r0, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8012952:	fb03 f304 	mul.w	r3, r3, r4
 8012956:	eef8 6ae7 	vcvt.f32.s32	s13, s15
      switch (pllsource)
 801295a:	2801      	cmp	r0, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 801295c:	ee07 3a90 	vmov	s15, r3
 8012960:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
      switch (pllsource)
 8012964:	d002      	beq.n	801296c <HAL_RCC_GetPCLK1Freq+0xa0>
 8012966:	d32b      	bcc.n	80129c0 <HAL_RCC_GetPCLK1Freq+0xf4>
 8012968:	2802      	cmp	r0, #2
 801296a:	d026      	beq.n	80129ba <HAL_RCC_GetPCLK1Freq+0xee>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801296c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8012a1c <HAL_RCC_GetPCLK1Freq+0x150>
 8012970:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8012974:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8012976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801297a:	ee07 3a10 	vmov	s14, r3
 801297e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8012982:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012986:	ee37 7a25 	vadd.f32	s14, s14, s11
 801298a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801298e:	ee67 7a86 	vmul.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8012992:	4b1c      	ldr	r3, [pc, #112]	; (8012a04 <HAL_RCC_GetPCLK1Freq+0x138>)
 8012994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012996:	f3c3 2346 	ubfx	r3, r3, #9, #7
 801299a:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 801299c:	ee07 3a10 	vmov	s14, r3
 80129a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80129a4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80129a8:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 80129ac:	ee17 2a90 	vmov	r2, s15
 80129b0:	e797      	b.n	80128e2 <HAL_RCC_GetPCLK1Freq+0x16>
    sysclockfreq = HSE_VALUE;
 80129b2:	4a1b      	ldr	r2, [pc, #108]	; (8012a20 <HAL_RCC_GetPCLK1Freq+0x154>)
 80129b4:	e795      	b.n	80128e2 <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80129b6:	4a18      	ldr	r2, [pc, #96]	; (8012a18 <HAL_RCC_GetPCLK1Freq+0x14c>)
 80129b8:	e793      	b.n	80128e2 <HAL_RCC_GetPCLK1Freq+0x16>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80129ba:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8012a24 <HAL_RCC_GetPCLK1Freq+0x158>
 80129be:	e7d7      	b.n	8012970 <HAL_RCC_GetPCLK1Freq+0xa4>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80129c0:	680b      	ldr	r3, [r1, #0]
 80129c2:	069b      	lsls	r3, r3, #26
 80129c4:	d51a      	bpl.n	80129fc <HAL_RCC_GetPCLK1Freq+0x130>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80129c6:	6808      	ldr	r0, [r1, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80129c8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80129cc:	4a12      	ldr	r2, [pc, #72]	; (8012a18 <HAL_RCC_GetPCLK1Freq+0x14c>)
 80129ce:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80129d2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80129d4:	40c2      	lsrs	r2, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80129d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80129da:	ee07 2a10 	vmov	s14, r2
 80129de:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 80129e2:	ee07 3a10 	vmov	s14, r3
 80129e6:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 80129ea:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 80129ee:	ee76 6a05 	vadd.f32	s13, s12, s10
 80129f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80129f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80129fa:	e7ca      	b.n	8012992 <HAL_RCC_GetPCLK1Freq+0xc6>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80129fc:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8012a28 <HAL_RCC_GetPCLK1Freq+0x15c>
 8012a00:	e7b6      	b.n	8012970 <HAL_RCC_GetPCLK1Freq+0xa4>
 8012a02:	bf00      	nop
 8012a04:	58024400 	.word	0x58024400
 8012a08:	003d0900 	.word	0x003d0900
 8012a0c:	080bf274 	.word	0x080bf274
 8012a10:	24007290 	.word	0x24007290
 8012a14:	24007294 	.word	0x24007294
 8012a18:	03d09000 	.word	0x03d09000
 8012a1c:	4a742400 	.word	0x4a742400
 8012a20:	017d7840 	.word	0x017d7840
 8012a24:	4bbebc20 	.word	0x4bbebc20
 8012a28:	4c742400 	.word	0x4c742400

08012a2c <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8012a2c:	494d      	ldr	r1, [pc, #308]	; (8012b64 <HAL_RCC_GetPCLK2Freq+0x138>)
 8012a2e:	690b      	ldr	r3, [r1, #16]
 8012a30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012a34:	2b10      	cmp	r3, #16
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8012a36:	b430      	push	{r4, r5}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8012a38:	d06b      	beq.n	8012b12 <HAL_RCC_GetPCLK2Freq+0xe6>
 8012a3a:	2b18      	cmp	r3, #24
 8012a3c:	d029      	beq.n	8012a92 <HAL_RCC_GetPCLK2Freq+0x66>
 8012a3e:	b1fb      	cbz	r3, 8012a80 <HAL_RCC_GetPCLK2Freq+0x54>
    sysclockfreq = CSI_VALUE;
 8012a40:	4a49      	ldr	r2, [pc, #292]	; (8012b68 <HAL_RCC_GetPCLK2Freq+0x13c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8012a42:	4848      	ldr	r0, [pc, #288]	; (8012b64 <HAL_RCC_GetPCLK2Freq+0x138>)
 8012a44:	4949      	ldr	r1, [pc, #292]	; (8012b6c <HAL_RCC_GetPCLK2Freq+0x140>)
 8012a46:	6984      	ldr	r4, [r0, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8012a48:	6983      	ldr	r3, [r0, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8012a4a:	f3c4 2403 	ubfx	r4, r4, #8, #4
  SystemCoreClock = common_system_clock;
 8012a4e:	4d48      	ldr	r5, [pc, #288]	; (8012b70 <HAL_RCC_GetPCLK2Freq+0x144>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8012a50:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8012a54:	5d0c      	ldrb	r4, [r1, r4]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8012a56:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8012a58:	f004 041f 	and.w	r4, r4, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8012a5c:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8012a60:	40e2      	lsrs	r2, r4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8012a62:	4c44      	ldr	r4, [pc, #272]	; (8012b74 <HAL_RCC_GetPCLK2Freq+0x148>)
 8012a64:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 8012a68:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8012a6a:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8012a6c:	69c2      	ldr	r2, [r0, #28]
 8012a6e:	f3c2 2202 	ubfx	r2, r2, #8, #3
 8012a72:	5c88      	ldrb	r0, [r1, r2]
 8012a74:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8012a78:	bc30      	pop	{r4, r5}
 8012a7a:	fa23 f000 	lsr.w	r0, r3, r0
 8012a7e:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012a80:	680b      	ldr	r3, [r1, #0]
 8012a82:	069a      	lsls	r2, r3, #26
 8012a84:	d547      	bpl.n	8012b16 <HAL_RCC_GetPCLK2Freq+0xea>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8012a86:	680b      	ldr	r3, [r1, #0]
 8012a88:	4a3b      	ldr	r2, [pc, #236]	; (8012b78 <HAL_RCC_GetPCLK2Freq+0x14c>)
 8012a8a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8012a8e:	40da      	lsrs	r2, r3
 8012a90:	e7d7      	b.n	8012a42 <HAL_RCC_GetPCLK2Freq+0x16>
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8012a92:	6a88      	ldr	r0, [r1, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8012a94:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8012a96:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8012a98:	f3c2 1205 	ubfx	r2, r2, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8012a9c:	6b4c      	ldr	r4, [r1, #52]	; 0x34
    if (pllm != 0U)
 8012a9e:	2a00      	cmp	r2, #0
 8012aa0:	d0cf      	beq.n	8012a42 <HAL_RCC_GetPCLK2Freq+0x16>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8012aa2:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8012aa6:	f003 0301 	and.w	r3, r3, #1
 8012aaa:	ee07 2a90 	vmov	s15, r2
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8012aae:	f000 0003 	and.w	r0, r0, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8012ab2:	fb03 f304 	mul.w	r3, r3, r4
 8012ab6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
      switch (pllsource)
 8012aba:	2801      	cmp	r0, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8012abc:	ee07 3a90 	vmov	s15, r3
 8012ac0:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
      switch (pllsource)
 8012ac4:	d002      	beq.n	8012acc <HAL_RCC_GetPCLK2Freq+0xa0>
 8012ac6:	d32b      	bcc.n	8012b20 <HAL_RCC_GetPCLK2Freq+0xf4>
 8012ac8:	2802      	cmp	r0, #2
 8012aca:	d026      	beq.n	8012b1a <HAL_RCC_GetPCLK2Freq+0xee>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8012acc:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8012b7c <HAL_RCC_GetPCLK2Freq+0x150>
 8012ad0:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8012ad4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8012ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012ada:	ee07 3a10 	vmov	s14, r3
 8012ade:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8012ae2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012ae6:	ee37 7a25 	vadd.f32	s14, s14, s11
 8012aea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012aee:	ee67 7a86 	vmul.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8012af2:	4b1c      	ldr	r3, [pc, #112]	; (8012b64 <HAL_RCC_GetPCLK2Freq+0x138>)
 8012af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012af6:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8012afa:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8012afc:	ee07 3a10 	vmov	s14, r3
 8012b00:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012b04:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8012b08:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8012b0c:	ee17 2a90 	vmov	r2, s15
 8012b10:	e797      	b.n	8012a42 <HAL_RCC_GetPCLK2Freq+0x16>
    sysclockfreq = HSE_VALUE;
 8012b12:	4a1b      	ldr	r2, [pc, #108]	; (8012b80 <HAL_RCC_GetPCLK2Freq+0x154>)
 8012b14:	e795      	b.n	8012a42 <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8012b16:	4a18      	ldr	r2, [pc, #96]	; (8012b78 <HAL_RCC_GetPCLK2Freq+0x14c>)
 8012b18:	e793      	b.n	8012a42 <HAL_RCC_GetPCLK2Freq+0x16>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8012b1a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8012b84 <HAL_RCC_GetPCLK2Freq+0x158>
 8012b1e:	e7d7      	b.n	8012ad0 <HAL_RCC_GetPCLK2Freq+0xa4>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012b20:	680b      	ldr	r3, [r1, #0]
 8012b22:	069b      	lsls	r3, r3, #26
 8012b24:	d51a      	bpl.n	8012b5c <HAL_RCC_GetPCLK2Freq+0x130>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8012b26:	6808      	ldr	r0, [r1, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8012b28:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8012b2c:	4a12      	ldr	r2, [pc, #72]	; (8012b78 <HAL_RCC_GetPCLK2Freq+0x14c>)
 8012b2e:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8012b32:	6b0b      	ldr	r3, [r1, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8012b34:	40c2      	lsrs	r2, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8012b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012b3a:	ee07 2a10 	vmov	s14, r2
 8012b3e:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8012b42:	ee07 3a10 	vmov	s14, r3
 8012b46:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8012b4a:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8012b4e:	ee76 6a05 	vadd.f32	s13, s12, s10
 8012b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012b5a:	e7ca      	b.n	8012af2 <HAL_RCC_GetPCLK2Freq+0xc6>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8012b5c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8012b88 <HAL_RCC_GetPCLK2Freq+0x15c>
 8012b60:	e7b6      	b.n	8012ad0 <HAL_RCC_GetPCLK2Freq+0xa4>
 8012b62:	bf00      	nop
 8012b64:	58024400 	.word	0x58024400
 8012b68:	003d0900 	.word	0x003d0900
 8012b6c:	080bf274 	.word	0x080bf274
 8012b70:	24007290 	.word	0x24007290
 8012b74:	24007294 	.word	0x24007294
 8012b78:	03d09000 	.word	0x03d09000
 8012b7c:	4a742400 	.word	0x4a742400
 8012b80:	017d7840 	.word	0x017d7840
 8012b84:	4bbebc20 	.word	0x4bbebc20
 8012b88:	4c742400 	.word	0x4c742400

08012b8c <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8012b8c:	4a3b      	ldr	r2, [pc, #236]	; (8012c7c <RCCEx_PLL2_Config+0xf0>)
{
 8012b8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8012b90:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8012b92:	f003 0303 	and.w	r3, r3, #3
 8012b96:	2b03      	cmp	r3, #3
 8012b98:	d067      	beq.n	8012c6a <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8012b9a:	6813      	ldr	r3, [r2, #0]
 8012b9c:	460f      	mov	r7, r1
 8012b9e:	4605      	mov	r5, r0

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8012ba0:	4614      	mov	r4, r2
    __HAL_RCC_PLL2_DISABLE();
 8012ba2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012ba6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8012ba8:	f7fa feda 	bl	800d960 <HAL_GetTick>
 8012bac:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8012bae:	e004      	b.n	8012bba <RCCEx_PLL2_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8012bb0:	f7fa fed6 	bl	800d960 <HAL_GetTick>
 8012bb4:	1b80      	subs	r0, r0, r6
 8012bb6:	2802      	cmp	r0, #2
 8012bb8:	d859      	bhi.n	8012c6e <RCCEx_PLL2_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8012bba:	6823      	ldr	r3, [r4, #0]
 8012bbc:	011a      	lsls	r2, r3, #4
 8012bbe:	d4f7      	bmi.n	8012bb0 <RCCEx_PLL2_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8012bc0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012bc2:	682a      	ldr	r2, [r5, #0]
 8012bc4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8012bc8:	492d      	ldr	r1, [pc, #180]	; (8012c80 <RCCEx_PLL2_Config+0xf4>)
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8012bca:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8012bce:	62a3      	str	r3, [r4, #40]	; 0x28
 8012bd0:	686e      	ldr	r6, [r5, #4]
 8012bd2:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 8012bd6:	3e01      	subs	r6, #1
 8012bd8:	1e50      	subs	r0, r2, #1
 8012bda:	3b01      	subs	r3, #1
 8012bdc:	692a      	ldr	r2, [r5, #16]
 8012bde:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8012be2:	025b      	lsls	r3, r3, #9
 8012be4:	0400      	lsls	r0, r0, #16
 8012be6:	3a01      	subs	r2, #1
 8012be8:	b29b      	uxth	r3, r3
 8012bea:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8012bee:	0612      	lsls	r2, r2, #24
 8012bf0:	4303      	orrs	r3, r0
 8012bf2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8012bf6:	4333      	orrs	r3, r6
 8012bf8:	4313      	orrs	r3, r2
 8012bfa:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8012bfc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8012bfe:	696a      	ldr	r2, [r5, #20]
 8012c00:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8012c04:	4313      	orrs	r3, r2
 8012c06:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8012c08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8012c0a:	69aa      	ldr	r2, [r5, #24]
 8012c0c:	f023 0320 	bic.w	r3, r3, #32
 8012c10:	4313      	orrs	r3, r2
 8012c12:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8012c14:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8012c16:	f023 0310 	bic.w	r3, r3, #16
 8012c1a:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8012c1c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8012c1e:	69eb      	ldr	r3, [r5, #28]
 8012c20:	4011      	ands	r1, r2
 8012c22:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8012c26:	63e1      	str	r1, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8012c28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8012c2a:	f043 0310 	orr.w	r3, r3, #16
 8012c2e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8012c30:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8012c32:	b1f7      	cbz	r7, 8012c72 <RCCEx_PLL2_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8012c34:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8012c36:	bf0c      	ite	eq
 8012c38:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8012c3c:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8012c40:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8012c42:	4b0e      	ldr	r3, [pc, #56]	; (8012c7c <RCCEx_PLL2_Config+0xf0>)
 8012c44:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8012c46:	461c      	mov	r4, r3
    __HAL_RCC_PLL2_ENABLE();
 8012c48:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8012c4c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8012c4e:	f7fa fe87 	bl	800d960 <HAL_GetTick>
 8012c52:	4605      	mov	r5, r0
 8012c54:	e004      	b.n	8012c60 <RCCEx_PLL2_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8012c56:	f7fa fe83 	bl	800d960 <HAL_GetTick>
 8012c5a:	1b40      	subs	r0, r0, r5
 8012c5c:	2802      	cmp	r0, #2
 8012c5e:	d806      	bhi.n	8012c6e <RCCEx_PLL2_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8012c60:	6823      	ldr	r3, [r4, #0]
 8012c62:	011b      	lsls	r3, r3, #4
 8012c64:	d5f7      	bpl.n	8012c56 <RCCEx_PLL2_Config+0xca>
    }

  }


  return status;
 8012c66:	2000      	movs	r0, #0
}
 8012c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8012c6a:	2001      	movs	r0, #1
}
 8012c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8012c6e:	2003      	movs	r0, #3
}
 8012c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8012c72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012c76:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012c78:	e7e3      	b.n	8012c42 <RCCEx_PLL2_Config+0xb6>
 8012c7a:	bf00      	nop
 8012c7c:	58024400 	.word	0x58024400
 8012c80:	ffff0007 	.word	0xffff0007

08012c84 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8012c84:	4a3b      	ldr	r2, [pc, #236]	; (8012d74 <RCCEx_PLL3_Config+0xf0>)
{
 8012c86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8012c88:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8012c8a:	f003 0303 	and.w	r3, r3, #3
 8012c8e:	2b03      	cmp	r3, #3
 8012c90:	d067      	beq.n	8012d62 <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8012c92:	6813      	ldr	r3, [r2, #0]
 8012c94:	460f      	mov	r7, r1
 8012c96:	4605      	mov	r5, r0

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8012c98:	4614      	mov	r4, r2
    __HAL_RCC_PLL3_DISABLE();
 8012c9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012c9e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8012ca0:	f7fa fe5e 	bl	800d960 <HAL_GetTick>
 8012ca4:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8012ca6:	e004      	b.n	8012cb2 <RCCEx_PLL3_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8012ca8:	f7fa fe5a 	bl	800d960 <HAL_GetTick>
 8012cac:	1b80      	subs	r0, r0, r6
 8012cae:	2802      	cmp	r0, #2
 8012cb0:	d859      	bhi.n	8012d66 <RCCEx_PLL3_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8012cb2:	6823      	ldr	r3, [r4, #0]
 8012cb4:	009a      	lsls	r2, r3, #2
 8012cb6:	d4f7      	bmi.n	8012ca8 <RCCEx_PLL3_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8012cb8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012cba:	682a      	ldr	r2, [r5, #0]
 8012cbc:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8012cc0:	492d      	ldr	r1, [pc, #180]	; (8012d78 <RCCEx_PLL3_Config+0xf4>)
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8012cc2:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8012cc6:	62a3      	str	r3, [r4, #40]	; 0x28
 8012cc8:	686e      	ldr	r6, [r5, #4]
 8012cca:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 8012cce:	3e01      	subs	r6, #1
 8012cd0:	1e50      	subs	r0, r2, #1
 8012cd2:	3b01      	subs	r3, #1
 8012cd4:	692a      	ldr	r2, [r5, #16]
 8012cd6:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8012cda:	025b      	lsls	r3, r3, #9
 8012cdc:	0400      	lsls	r0, r0, #16
 8012cde:	3a01      	subs	r2, #1
 8012ce0:	b29b      	uxth	r3, r3
 8012ce2:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8012ce6:	0612      	lsls	r2, r2, #24
 8012ce8:	4303      	orrs	r3, r0
 8012cea:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8012cee:	4333      	orrs	r3, r6
 8012cf0:	4313      	orrs	r3, r2
 8012cf2:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8012cf4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8012cf6:	696a      	ldr	r2, [r5, #20]
 8012cf8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8012cfc:	4313      	orrs	r3, r2
 8012cfe:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8012d00:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8012d02:	69aa      	ldr	r2, [r5, #24]
 8012d04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012d08:	4313      	orrs	r3, r2
 8012d0a:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8012d0c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8012d0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012d12:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8012d14:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8012d16:	69eb      	ldr	r3, [r5, #28]
 8012d18:	4011      	ands	r1, r2
 8012d1a:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8012d1e:	6461      	str	r1, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8012d20:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8012d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012d26:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8012d28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8012d2a:	b1f7      	cbz	r7, 8012d6a <RCCEx_PLL3_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8012d2c:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8012d2e:	bf0c      	ite	eq
 8012d30:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8012d34:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8012d38:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8012d3a:	4b0e      	ldr	r3, [pc, #56]	; (8012d74 <RCCEx_PLL3_Config+0xf0>)
 8012d3c:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8012d3e:	461c      	mov	r4, r3
    __HAL_RCC_PLL3_ENABLE();
 8012d40:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8012d44:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8012d46:	f7fa fe0b 	bl	800d960 <HAL_GetTick>
 8012d4a:	4605      	mov	r5, r0
 8012d4c:	e004      	b.n	8012d58 <RCCEx_PLL3_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8012d4e:	f7fa fe07 	bl	800d960 <HAL_GetTick>
 8012d52:	1b40      	subs	r0, r0, r5
 8012d54:	2802      	cmp	r0, #2
 8012d56:	d806      	bhi.n	8012d66 <RCCEx_PLL3_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8012d58:	6823      	ldr	r3, [r4, #0]
 8012d5a:	009b      	lsls	r3, r3, #2
 8012d5c:	d5f7      	bpl.n	8012d4e <RCCEx_PLL3_Config+0xca>
    }

  }


  return status;
 8012d5e:	2000      	movs	r0, #0
}
 8012d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8012d62:	2001      	movs	r0, #1
}
 8012d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8012d66:	2003      	movs	r0, #3
}
 8012d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8012d6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8012d6e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012d70:	e7e3      	b.n	8012d3a <RCCEx_PLL3_Config+0xb6>
 8012d72:	bf00      	nop
 8012d74:	58024400 	.word	0x58024400
 8012d78:	ffff0007 	.word	0xffff0007

08012d7c <HAL_RCCEx_PeriphCLKConfig>:
{
 8012d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8012d80:	6803      	ldr	r3, [r0, #0]
{
 8012d82:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8012d84:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 8012d88:	d015      	beq.n	8012db6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8012d8a:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8012d8c:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8012d90:	f000 8448 	beq.w	8013624 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8012d94:	f240 84fd 	bls.w	8013792 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8012d98:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8012d9c:	f000 8481 	beq.w	80136a2 <HAL_RCCEx_PeriphCLKConfig+0x926>
 8012da0:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8012da4:	f040 8531 	bne.w	801380a <HAL_RCCEx_PeriphCLKConfig+0xa8e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8012da8:	48ae      	ldr	r0, [pc, #696]	; (8013064 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8012daa:	2600      	movs	r6, #0
 8012dac:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8012dae:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8012db2:	430a      	orrs	r2, r1
 8012db4:	6502      	str	r2, [r0, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8012db6:	05da      	lsls	r2, r3, #23
 8012db8:	d50a      	bpl.n	8012dd0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    switch(PeriphClkInit->Sai1ClockSelection)
 8012dba:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8012dbc:	2a04      	cmp	r2, #4
 8012dbe:	d806      	bhi.n	8012dce <HAL_RCCEx_PeriphCLKConfig+0x52>
 8012dc0:	e8df f012 	tbh	[pc, r2, lsl #1]
 8012dc4:	040203fb 	.word	0x040203fb
 8012dc8:	03a403f0 	.word	0x03a403f0
 8012dcc:	03a4      	.short	0x03a4
      ret = HAL_ERROR;
 8012dce:	2601      	movs	r6, #1
 8012dd0:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8012dd2:	059f      	lsls	r7, r3, #22
 8012dd4:	d51b      	bpl.n	8012e0e <HAL_RCCEx_PeriphCLKConfig+0x92>
    switch(PeriphClkInit->Sai23ClockSelection)
 8012dd6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8012dd8:	2a80      	cmp	r2, #128	; 0x80
 8012dda:	f000 843c 	beq.w	8013656 <HAL_RCCEx_PeriphCLKConfig+0x8da>
 8012dde:	f200 84f8 	bhi.w	80137d2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
 8012de2:	2a00      	cmp	r2, #0
 8012de4:	f000 8463 	beq.w	80136ae <HAL_RCCEx_PeriphCLKConfig+0x932>
 8012de8:	2a40      	cmp	r2, #64	; 0x40
 8012dea:	f040 84f9 	bne.w	80137e0 <HAL_RCCEx_PeriphCLKConfig+0xa64>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8012dee:	2100      	movs	r1, #0
 8012df0:	1d20      	adds	r0, r4, #4
 8012df2:	f7ff fecb 	bl	8012b8c <RCCEx_PLL2_Config>
 8012df6:	6823      	ldr	r3, [r4, #0]
 8012df8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8012dfa:	2d00      	cmp	r5, #0
 8012dfc:	f040 8435 	bne.w	801366a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8012e00:	4998      	ldr	r1, [pc, #608]	; (8013064 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8012e02:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8012e04:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8012e06:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 8012e0a:	4302      	orrs	r2, r0
 8012e0c:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8012e0e:	0558      	lsls	r0, r3, #21
 8012e10:	d51f      	bpl.n	8012e52 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    switch(PeriphClkInit->Sai4AClockSelection)
 8012e12:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 8012e16:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8012e1a:	f000 840f 	beq.w	801363c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8012e1e:	f200 84e3 	bhi.w	80137e8 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 8012e22:	2a00      	cmp	r2, #0
 8012e24:	f000 8430 	beq.w	8013688 <HAL_RCCEx_PeriphCLKConfig+0x90c>
 8012e28:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8012e2c:	f040 84e4 	bne.w	80137f8 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8012e30:	2100      	movs	r1, #0
 8012e32:	1d20      	adds	r0, r4, #4
 8012e34:	f7ff feaa 	bl	8012b8c <RCCEx_PLL2_Config>
 8012e38:	6823      	ldr	r3, [r4, #0]
 8012e3a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8012e3c:	2d00      	cmp	r5, #0
 8012e3e:	f040 8407 	bne.w	8013650 <HAL_RCCEx_PeriphCLKConfig+0x8d4>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8012e42:	4988      	ldr	r1, [pc, #544]	; (8013064 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8012e44:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8012e48:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8012e4a:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 8012e4e:	4302      	orrs	r2, r0
 8012e50:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8012e52:	0519      	lsls	r1, r3, #20
 8012e54:	d51f      	bpl.n	8012e96 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch(PeriphClkInit->Sai4BClockSelection)
 8012e56:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 8012e5a:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 8012e5e:	f000 83d5 	beq.w	801360c <HAL_RCCEx_PeriphCLKConfig+0x890>
 8012e62:	f200 84aa 	bhi.w	80137ba <HAL_RCCEx_PeriphCLKConfig+0xa3e>
 8012e66:	2a00      	cmp	r2, #0
 8012e68:	f000 8428 	beq.w	80136bc <HAL_RCCEx_PeriphCLKConfig+0x940>
 8012e6c:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8012e70:	f040 84ab 	bne.w	80137ca <HAL_RCCEx_PeriphCLKConfig+0xa4e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8012e74:	2100      	movs	r1, #0
 8012e76:	1d20      	adds	r0, r4, #4
 8012e78:	f7ff fe88 	bl	8012b8c <RCCEx_PLL2_Config>
 8012e7c:	6823      	ldr	r3, [r4, #0]
 8012e7e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8012e80:	2d00      	cmp	r5, #0
 8012e82:	f040 83cd 	bne.w	8013620 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8012e86:	4977      	ldr	r1, [pc, #476]	; (8013064 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8012e88:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8012e8c:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8012e8e:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8012e92:	4302      	orrs	r2, r0
 8012e94:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8012e96:	019a      	lsls	r2, r3, #6
 8012e98:	d50d      	bpl.n	8012eb6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    switch(PeriphClkInit->QspiClockSelection)
 8012e9a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8012e9c:	2a10      	cmp	r2, #16
 8012e9e:	f000 834a 	beq.w	8013536 <HAL_RCCEx_PeriphCLKConfig+0x7ba>
 8012ea2:	f240 84ad 	bls.w	8013800 <HAL_RCCEx_PeriphCLKConfig+0xa84>
 8012ea6:	2a20      	cmp	r2, #32
 8012ea8:	f000 8372 	beq.w	8013590 <HAL_RCCEx_PeriphCLKConfig+0x814>
 8012eac:	2a30      	cmp	r2, #48	; 0x30
 8012eae:	f000 8347 	beq.w	8013540 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      ret = HAL_ERROR;
 8012eb2:	2601      	movs	r6, #1
 8012eb4:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8012eb6:	04df      	lsls	r7, r3, #19
 8012eb8:	d51d      	bpl.n	8012ef6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
    switch(PeriphClkInit->Spi123ClockSelection)
 8012eba:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8012ebc:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8012ec0:	f000 83d6 	beq.w	8013670 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8012ec4:	f200 846d 	bhi.w	80137a2 <HAL_RCCEx_PeriphCLKConfig+0xa26>
 8012ec8:	2a00      	cmp	r2, #0
 8012eca:	f000 83e4 	beq.w	8013696 <HAL_RCCEx_PeriphCLKConfig+0x91a>
 8012ece:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8012ed2:	f040 846e 	bne.w	80137b2 <HAL_RCCEx_PeriphCLKConfig+0xa36>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8012ed6:	2100      	movs	r1, #0
 8012ed8:	1d20      	adds	r0, r4, #4
 8012eda:	f7ff fe57 	bl	8012b8c <RCCEx_PLL2_Config>
 8012ede:	6823      	ldr	r3, [r4, #0]
 8012ee0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8012ee2:	2d00      	cmp	r5, #0
 8012ee4:	f040 83ce 	bne.w	8013684 <HAL_RCCEx_PeriphCLKConfig+0x908>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8012ee8:	495e      	ldr	r1, [pc, #376]	; (8013064 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8012eea:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8012eec:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8012eee:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8012ef2:	4302      	orrs	r2, r0
 8012ef4:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8012ef6:	0498      	lsls	r0, r3, #18
 8012ef8:	d51b      	bpl.n	8012f32 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->Spi45ClockSelection)
 8012efa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012efc:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8012f00:	f000 830f 	beq.w	8013522 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8012f04:	f200 83fa 	bhi.w	80136fc <HAL_RCCEx_PeriphCLKConfig+0x980>
 8012f08:	b14a      	cbz	r2, 8012f1e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8012f0a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8012f0e:	f040 8401 	bne.w	8013714 <HAL_RCCEx_PeriphCLKConfig+0x998>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8012f12:	2101      	movs	r1, #1
 8012f14:	1d20      	adds	r0, r4, #4
 8012f16:	f7ff fe39 	bl	8012b8c <RCCEx_PLL2_Config>
 8012f1a:	6823      	ldr	r3, [r4, #0]
 8012f1c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8012f1e:	2d00      	cmp	r5, #0
 8012f20:	f040 8289 	bne.w	8013436 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8012f24:	494f      	ldr	r1, [pc, #316]	; (8013064 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8012f26:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8012f28:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8012f2a:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8012f2e:	4302      	orrs	r2, r0
 8012f30:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8012f32:	0459      	lsls	r1, r3, #17
 8012f34:	d51d      	bpl.n	8012f72 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    switch(PeriphClkInit->Spi6ClockSelection)
 8012f36:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8012f3a:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8012f3e:	f000 8308 	beq.w	8013552 <HAL_RCCEx_PeriphCLKConfig+0x7d6>
 8012f42:	f200 83ea 	bhi.w	801371a <HAL_RCCEx_PeriphCLKConfig+0x99e>
 8012f46:	b14a      	cbz	r2, 8012f5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8012f48:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8012f4c:	f040 83f1 	bne.w	8013732 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8012f50:	2101      	movs	r1, #1
 8012f52:	1d20      	adds	r0, r4, #4
 8012f54:	f7ff fe1a 	bl	8012b8c <RCCEx_PLL2_Config>
 8012f58:	6823      	ldr	r3, [r4, #0]
 8012f5a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8012f5c:	2d00      	cmp	r5, #0
 8012f5e:	f040 8270 	bne.w	8013442 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8012f62:	4940      	ldr	r1, [pc, #256]	; (8013064 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8012f64:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8012f68:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8012f6a:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8012f6e:	4302      	orrs	r2, r0
 8012f70:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8012f72:	015a      	lsls	r2, r3, #5
 8012f74:	d515      	bpl.n	8012fa2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    switch(PeriphClkInit->DsiClockSelection)
 8012f76:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8012f78:	b14a      	cbz	r2, 8012f8e <HAL_RCCEx_PeriphCLKConfig+0x212>
 8012f7a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8012f7e:	f040 8266 	bne.w	801344e <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8012f82:	2101      	movs	r1, #1
 8012f84:	1d20      	adds	r0, r4, #4
 8012f86:	f7ff fe01 	bl	8012b8c <RCCEx_PLL2_Config>
 8012f8a:	6823      	ldr	r3, [r4, #0]
 8012f8c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8012f8e:	2d00      	cmp	r5, #0
 8012f90:	f040 827f 	bne.w	8013492 <HAL_RCCEx_PeriphCLKConfig+0x716>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8012f94:	4933      	ldr	r1, [pc, #204]	; (8013064 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8012f96:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8012f98:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8012f9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8012f9e:	4302      	orrs	r2, r0
 8012fa0:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8012fa2:	041f      	lsls	r7, r3, #16
 8012fa4:	d50d      	bpl.n	8012fc2 <HAL_RCCEx_PeriphCLKConfig+0x246>
    switch(PeriphClkInit->FdcanClockSelection)
 8012fa6:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8012fa8:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8012fac:	f000 82dc 	beq.w	8013568 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
 8012fb0:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8012fb4:	f000 81af 	beq.w	8013316 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8012fb8:	2a00      	cmp	r2, #0
 8012fba:	f000 81b2 	beq.w	8013322 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
      ret = HAL_ERROR;
 8012fbe:	2601      	movs	r6, #1
 8012fc0:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8012fc2:	01d8      	lsls	r0, r3, #7
 8012fc4:	d519      	bpl.n	8012ffa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    switch(PeriphClkInit->FmcClockSelection)
 8012fc6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8012fc8:	2a03      	cmp	r2, #3
 8012fca:	f200 8443 	bhi.w	8013854 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8012fce:	e8df f012 	tbh	[pc, r2, lsl #1]
 8012fd2:	000a      	.short	0x000a
 8012fd4:	00040274 	.word	0x00040274
 8012fd8:	000a      	.short	0x000a
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8012fda:	2102      	movs	r1, #2
 8012fdc:	1d20      	adds	r0, r4, #4
 8012fde:	f7ff fdd5 	bl	8012b8c <RCCEx_PLL2_Config>
 8012fe2:	6823      	ldr	r3, [r4, #0]
 8012fe4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8012fe6:	2d00      	cmp	r5, #0
 8012fe8:	f040 821d 	bne.w	8013426 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8012fec:	491d      	ldr	r1, [pc, #116]	; (8013064 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8012fee:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8012ff0:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8012ff2:	f022 0203 	bic.w	r2, r2, #3
 8012ff6:	4302      	orrs	r2, r0
 8012ff8:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8012ffa:	0259      	lsls	r1, r3, #9
 8012ffc:	f100 81cd 	bmi.w	801339a <HAL_RCCEx_PeriphCLKConfig+0x61e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8013000:	07df      	lsls	r7, r3, #31
 8013002:	d542      	bpl.n	801308a <HAL_RCCEx_PeriphCLKConfig+0x30e>
    switch(PeriphClkInit->Usart16ClockSelection)
 8013004:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8013006:	2a28      	cmp	r2, #40	; 0x28
 8013008:	f200 8371 	bhi.w	80136ee <HAL_RCCEx_PeriphCLKConfig+0x972>
 801300c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8013010:	036f0033 	.word	0x036f0033
 8013014:	036f036f 	.word	0x036f036f
 8013018:	036f036f 	.word	0x036f036f
 801301c:	036f036f 	.word	0x036f036f
 8013020:	036f025d 	.word	0x036f025d
 8013024:	036f036f 	.word	0x036f036f
 8013028:	036f036f 	.word	0x036f036f
 801302c:	036f036f 	.word	0x036f036f
 8013030:	036f002c 	.word	0x036f002c
 8013034:	036f036f 	.word	0x036f036f
 8013038:	036f036f 	.word	0x036f036f
 801303c:	036f036f 	.word	0x036f036f
 8013040:	036f0033 	.word	0x036f0033
 8013044:	036f036f 	.word	0x036f036f
 8013048:	036f036f 	.word	0x036f036f
 801304c:	036f036f 	.word	0x036f036f
 8013050:	036f0033 	.word	0x036f0033
 8013054:	036f036f 	.word	0x036f036f
 8013058:	036f036f 	.word	0x036f036f
 801305c:	036f036f 	.word	0x036f036f
 8013060:	0033      	.short	0x0033
 8013062:	bf00      	nop
 8013064:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8013068:	2101      	movs	r1, #1
 801306a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801306e:	f7ff fe09 	bl	8012c84 <RCCEx_PLL3_Config>
 8013072:	6823      	ldr	r3, [r4, #0]
 8013074:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8013076:	2d00      	cmp	r5, #0
 8013078:	f040 81d3 	bne.w	8013422 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 801307c:	49ae      	ldr	r1, [pc, #696]	; (8013338 <HAL_RCCEx_PeriphCLKConfig+0x5bc>)
 801307e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8013080:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8013082:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8013086:	4302      	orrs	r2, r0
 8013088:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 801308a:	0798      	lsls	r0, r3, #30
 801308c:	d51c      	bpl.n	80130c8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
    switch(PeriphClkInit->Usart234578ClockSelection)
 801308e:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8013090:	2a05      	cmp	r2, #5
 8013092:	f200 83e6 	bhi.w	8013862 <HAL_RCCEx_PeriphCLKConfig+0xae6>
 8013096:	e8df f012 	tbh	[pc, r2, lsl #1]
 801309a:	000d      	.short	0x000d
 801309c:	00060207 	.word	0x00060207
 80130a0:	000d000d 	.word	0x000d000d
 80130a4:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80130a6:	2101      	movs	r1, #1
 80130a8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80130ac:	f7ff fdea 	bl	8012c84 <RCCEx_PLL3_Config>
 80130b0:	6823      	ldr	r3, [r4, #0]
 80130b2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80130b4:	2d00      	cmp	r5, #0
 80130b6:	f040 81b8 	bne.w	801342a <HAL_RCCEx_PeriphCLKConfig+0x6ae>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80130ba:	499f      	ldr	r1, [pc, #636]	; (8013338 <HAL_RCCEx_PeriphCLKConfig+0x5bc>)
 80130bc:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80130be:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80130c0:	f022 0207 	bic.w	r2, r2, #7
 80130c4:	4302      	orrs	r2, r0
 80130c6:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80130c8:	0759      	lsls	r1, r3, #29
 80130ca:	d51e      	bpl.n	801310a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80130cc:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 80130d0:	2a05      	cmp	r2, #5
 80130d2:	f200 83c3 	bhi.w	801385c <HAL_RCCEx_PeriphCLKConfig+0xae0>
 80130d6:	e8df f012 	tbh	[pc, r2, lsl #1]
 80130da:	000d      	.short	0x000d
 80130dc:	000601de 	.word	0x000601de
 80130e0:	000d000d 	.word	0x000d000d
 80130e4:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80130e6:	2101      	movs	r1, #1
 80130e8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80130ec:	f7ff fdca 	bl	8012c84 <RCCEx_PLL3_Config>
 80130f0:	6823      	ldr	r3, [r4, #0]
 80130f2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80130f4:	2d00      	cmp	r5, #0
 80130f6:	f040 819a 	bne.w	801342e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80130fa:	498f      	ldr	r1, [pc, #572]	; (8013338 <HAL_RCCEx_PeriphCLKConfig+0x5bc>)
 80130fc:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 8013100:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8013102:	f022 0207 	bic.w	r2, r2, #7
 8013106:	4302      	orrs	r2, r0
 8013108:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801310a:	069a      	lsls	r2, r3, #26
 801310c:	d51d      	bpl.n	801314a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    switch(PeriphClkInit->Lptim1ClockSelection)
 801310e:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8013112:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8013116:	f000 81e5 	beq.w	80134e4 <HAL_RCCEx_PeriphCLKConfig+0x768>
 801311a:	f200 831c 	bhi.w	8013756 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 801311e:	b14a      	cbz	r2, 8013134 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8013120:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8013124:	f040 8323 	bne.w	801376e <HAL_RCCEx_PeriphCLKConfig+0x9f2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8013128:	2100      	movs	r1, #0
 801312a:	1d20      	adds	r0, r4, #4
 801312c:	f7ff fd2e 	bl	8012b8c <RCCEx_PLL2_Config>
 8013130:	6823      	ldr	r3, [r4, #0]
 8013132:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8013134:	2d00      	cmp	r5, #0
 8013136:	f040 8188 	bne.w	801344a <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801313a:	497f      	ldr	r1, [pc, #508]	; (8013338 <HAL_RCCEx_PeriphCLKConfig+0x5bc>)
 801313c:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8013140:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8013142:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8013146:	4302      	orrs	r2, r0
 8013148:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 801314a:	065f      	lsls	r7, r3, #25
 801314c:	d51d      	bpl.n	801318a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    switch(PeriphClkInit->Lptim2ClockSelection)
 801314e:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 8013152:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8013156:	f000 81cf 	beq.w	80134f8 <HAL_RCCEx_PeriphCLKConfig+0x77c>
 801315a:	f200 82ed 	bhi.w	8013738 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
 801315e:	b14a      	cbz	r2, 8013174 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8013160:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8013164:	f040 82f4 	bne.w	8013750 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8013168:	2100      	movs	r1, #0
 801316a:	1d20      	adds	r0, r4, #4
 801316c:	f7ff fd0e 	bl	8012b8c <RCCEx_PLL2_Config>
 8013170:	6823      	ldr	r3, [r4, #0]
 8013172:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8013174:	2d00      	cmp	r5, #0
 8013176:	f040 815c 	bne.w	8013432 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801317a:	496f      	ldr	r1, [pc, #444]	; (8013338 <HAL_RCCEx_PeriphCLKConfig+0x5bc>)
 801317c:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 8013180:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8013182:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8013186:	4302      	orrs	r2, r0
 8013188:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 801318a:	0618      	lsls	r0, r3, #24
 801318c:	d51d      	bpl.n	80131ca <HAL_RCCEx_PeriphCLKConfig+0x44e>
    switch(PeriphClkInit->Lptim345ClockSelection)
 801318e:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 8013192:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8013196:	f000 81f0 	beq.w	801357a <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 801319a:	f200 82eb 	bhi.w	8013774 <HAL_RCCEx_PeriphCLKConfig+0x9f8>
 801319e:	b14a      	cbz	r2, 80131b4 <HAL_RCCEx_PeriphCLKConfig+0x438>
 80131a0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80131a4:	f040 82f2 	bne.w	801378c <HAL_RCCEx_PeriphCLKConfig+0xa10>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80131a8:	2100      	movs	r1, #0
 80131aa:	1d20      	adds	r0, r4, #4
 80131ac:	f7ff fcee 	bl	8012b8c <RCCEx_PLL2_Config>
 80131b0:	6823      	ldr	r3, [r4, #0]
 80131b2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80131b4:	2d00      	cmp	r5, #0
 80131b6:	f040 8146 	bne.w	8013446 <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80131ba:	495f      	ldr	r1, [pc, #380]	; (8013338 <HAL_RCCEx_PeriphCLKConfig+0x5bc>)
 80131bc:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 80131c0:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80131c2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80131c6:	4302      	orrs	r2, r0
 80131c8:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80131ca:	0719      	lsls	r1, r3, #28
 80131cc:	d50b      	bpl.n	80131e6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80131ce:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80131d2:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80131d6:	f000 81fe 	beq.w	80135d6 <HAL_RCCEx_PeriphCLKConfig+0x85a>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80131da:	4857      	ldr	r0, [pc, #348]	; (8013338 <HAL_RCCEx_PeriphCLKConfig+0x5bc>)
 80131dc:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80131de:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80131e2:	430a      	orrs	r2, r1
 80131e4:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80131e6:	06da      	lsls	r2, r3, #27
 80131e8:	d50b      	bpl.n	8013202 <HAL_RCCEx_PeriphCLKConfig+0x486>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80131ea:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80131ee:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80131f2:	f000 81fb 	beq.w	80135ec <HAL_RCCEx_PeriphCLKConfig+0x870>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80131f6:	4850      	ldr	r0, [pc, #320]	; (8013338 <HAL_RCCEx_PeriphCLKConfig+0x5bc>)
 80131f8:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80131fa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80131fe:	430a      	orrs	r2, r1
 8013200:	6582      	str	r2, [r0, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8013202:	031f      	lsls	r7, r3, #12
 8013204:	d50e      	bpl.n	8013224 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    switch(PeriphClkInit->AdcClockSelection)
 8013206:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 801320a:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 801320e:	f000 8095 	beq.w	801333c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8013212:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8013216:	f000 8098 	beq.w	801334a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
 801321a:	2900      	cmp	r1, #0
 801321c:	f000 8255 	beq.w	80136ca <HAL_RCCEx_PeriphCLKConfig+0x94e>
      ret = HAL_ERROR;
 8013220:	2601      	movs	r6, #1
 8013222:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8013224:	0358      	lsls	r0, r3, #13
 8013226:	d50f      	bpl.n	8013248 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
    switch(PeriphClkInit->UsbClockSelection)
 8013228:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 801322c:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8013230:	f000 8096 	beq.w	8013360 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 8013234:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8013238:	f000 8099 	beq.w	801336e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 801323c:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8013240:	f000 824c 	beq.w	80136dc <HAL_RCCEx_PeriphCLKConfig+0x960>
      ret = HAL_ERROR;
 8013244:	2601      	movs	r6, #1
 8013246:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8013248:	03d9      	lsls	r1, r3, #15
 801324a:	d517      	bpl.n	801327c <HAL_RCCEx_PeriphCLKConfig+0x500>
    switch(PeriphClkInit->SdmmcClockSelection)
 801324c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 801324e:	2a00      	cmp	r2, #0
 8013250:	f000 8115 	beq.w	801347e <HAL_RCCEx_PeriphCLKConfig+0x702>
 8013254:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8013258:	f040 810e 	bne.w	8013478 <HAL_RCCEx_PeriphCLKConfig+0x6fc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 801325c:	2102      	movs	r1, #2
 801325e:	1d20      	adds	r0, r4, #4
 8013260:	f7ff fc94 	bl	8012b8c <RCCEx_PLL2_Config>
 8013264:	4605      	mov	r5, r0
 8013266:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8013268:	2d00      	cmp	r5, #0
 801326a:	f040 8110 	bne.w	801348e <HAL_RCCEx_PeriphCLKConfig+0x712>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 801326e:	4932      	ldr	r1, [pc, #200]	; (8013338 <HAL_RCCEx_PeriphCLKConfig+0x5bc>)
 8013270:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8013272:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8013274:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8013278:	4302      	orrs	r2, r0
 801327a:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801327c:	009a      	lsls	r2, r3, #2
 801327e:	f100 8081 	bmi.w	8013384 <HAL_RCCEx_PeriphCLKConfig+0x608>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8013282:	039f      	lsls	r7, r3, #14
 8013284:	d435      	bmi.n	80132f2 <HAL_RCCEx_PeriphCLKConfig+0x576>
 8013286:	1c30      	adds	r0, r6, #0
 8013288:	bf18      	it	ne
 801328a:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801328c:	02de      	lsls	r6, r3, #11
 801328e:	d506      	bpl.n	801329e <HAL_RCCEx_PeriphCLKConfig+0x522>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8013290:	4929      	ldr	r1, [pc, #164]	; (8013338 <HAL_RCCEx_PeriphCLKConfig+0x5bc>)
 8013292:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8013294:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8013296:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 801329a:	432a      	orrs	r2, r5
 801329c:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 801329e:	00dd      	lsls	r5, r3, #3
 80132a0:	d507      	bpl.n	80132b2 <HAL_RCCEx_PeriphCLKConfig+0x536>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80132a2:	4925      	ldr	r1, [pc, #148]	; (8013338 <HAL_RCCEx_PeriphCLKConfig+0x5bc>)
 80132a4:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 80132a8:	690a      	ldr	r2, [r1, #16]
 80132aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80132ae:	432a      	orrs	r2, r5
 80132b0:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80132b2:	0299      	lsls	r1, r3, #10
 80132b4:	d506      	bpl.n	80132c4 <HAL_RCCEx_PeriphCLKConfig+0x548>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80132b6:	4920      	ldr	r1, [pc, #128]	; (8013338 <HAL_RCCEx_PeriphCLKConfig+0x5bc>)
 80132b8:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 80132ba:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80132bc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80132c0:	432a      	orrs	r2, r5
 80132c2:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80132c4:	005a      	lsls	r2, r3, #1
 80132c6:	d509      	bpl.n	80132dc <HAL_RCCEx_PeriphCLKConfig+0x560>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80132c8:	4a1b      	ldr	r2, [pc, #108]	; (8013338 <HAL_RCCEx_PeriphCLKConfig+0x5bc>)
 80132ca:	6911      	ldr	r1, [r2, #16]
 80132cc:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80132d0:	6111      	str	r1, [r2, #16]
 80132d2:	6911      	ldr	r1, [r2, #16]
 80132d4:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
 80132d8:	4329      	orrs	r1, r5
 80132da:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80132dc:	2b00      	cmp	r3, #0
 80132de:	da06      	bge.n	80132ee <HAL_RCCEx_PeriphCLKConfig+0x572>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80132e0:	4a15      	ldr	r2, [pc, #84]	; (8013338 <HAL_RCCEx_PeriphCLKConfig+0x5bc>)
 80132e2:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80132e4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80132e6:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80132ea:	430b      	orrs	r3, r1
 80132ec:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 80132ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->RngClockSelection)
 80132f2:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80132f6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80132fa:	f000 80ab 	beq.w	8013454 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 80132fe:	f240 80ed 	bls.w	80134dc <HAL_RCCEx_PeriphCLKConfig+0x760>
 8013302:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8013306:	f000 80aa 	beq.w	801345e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 801330a:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 801330e:	f000 80a6 	beq.w	801345e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8013312:	2001      	movs	r0, #1
 8013314:	e7ba      	b.n	801328c <HAL_RCCEx_PeriphCLKConfig+0x510>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8013316:	2101      	movs	r1, #1
 8013318:	1d20      	adds	r0, r4, #4
 801331a:	f7ff fc37 	bl	8012b8c <RCCEx_PLL2_Config>
 801331e:	6823      	ldr	r3, [r4, #0]
 8013320:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8013322:	2d00      	cmp	r5, #0
 8013324:	f040 8089 	bne.w	801343a <HAL_RCCEx_PeriphCLKConfig+0x6be>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8013328:	4903      	ldr	r1, [pc, #12]	; (8013338 <HAL_RCCEx_PeriphCLKConfig+0x5bc>)
 801332a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 801332c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 801332e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8013332:	4302      	orrs	r2, r0
 8013334:	650a      	str	r2, [r1, #80]	; 0x50
 8013336:	e644      	b.n	8012fc2 <HAL_RCCEx_PeriphCLKConfig+0x246>
 8013338:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 801333c:	2102      	movs	r1, #2
 801333e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8013342:	f7ff fc9f 	bl	8012c84 <RCCEx_PLL3_Config>
 8013346:	6823      	ldr	r3, [r4, #0]
 8013348:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 801334a:	2d00      	cmp	r5, #0
 801334c:	d177      	bne.n	801343e <HAL_RCCEx_PeriphCLKConfig+0x6c2>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801334e:	49ad      	ldr	r1, [pc, #692]	; (8013604 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8013350:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8013354:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8013356:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 801335a:	4302      	orrs	r2, r0
 801335c:	658a      	str	r2, [r1, #88]	; 0x58
 801335e:	e761      	b.n	8013224 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8013360:	2101      	movs	r1, #1
 8013362:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8013366:	f7ff fc8d 	bl	8012c84 <RCCEx_PLL3_Config>
 801336a:	6823      	ldr	r3, [r4, #0]
 801336c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 801336e:	2d00      	cmp	r5, #0
 8013370:	d155      	bne.n	801341e <HAL_RCCEx_PeriphCLKConfig+0x6a2>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8013372:	49a4      	ldr	r1, [pc, #656]	; (8013604 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8013374:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8013378:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 801337a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 801337e:	4302      	orrs	r2, r0
 8013380:	654a      	str	r2, [r1, #84]	; 0x54
 8013382:	e761      	b.n	8013248 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8013384:	2102      	movs	r1, #2
 8013386:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801338a:	f7ff fc7b 	bl	8012c84 <RCCEx_PLL3_Config>
 801338e:	6823      	ldr	r3, [r4, #0]
 8013390:	2800      	cmp	r0, #0
 8013392:	f43f af76 	beq.w	8013282 <HAL_RCCEx_PeriphCLKConfig+0x506>
      status=HAL_ERROR;
 8013396:	2601      	movs	r6, #1
 8013398:	e773      	b.n	8013282 <HAL_RCCEx_PeriphCLKConfig+0x506>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801339a:	4b9b      	ldr	r3, [pc, #620]	; (8013608 <HAL_RCCEx_PeriphCLKConfig+0x88c>)
 801339c:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801339e:	461f      	mov	r7, r3
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80133a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80133a4:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80133a6:	f7fa fadb 	bl	800d960 <HAL_GetTick>
 80133aa:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80133ac:	e006      	b.n	80133bc <HAL_RCCEx_PeriphCLKConfig+0x640>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80133ae:	f7fa fad7 	bl	800d960 <HAL_GetTick>
 80133b2:	eba0 0008 	sub.w	r0, r0, r8
 80133b6:	2864      	cmp	r0, #100	; 0x64
 80133b8:	f200 819c 	bhi.w	80136f4 <HAL_RCCEx_PeriphCLKConfig+0x978>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80133bc:	683b      	ldr	r3, [r7, #0]
 80133be:	05da      	lsls	r2, r3, #23
 80133c0:	d5f5      	bpl.n	80133ae <HAL_RCCEx_PeriphCLKConfig+0x632>
    if(ret == HAL_OK)
 80133c2:	2d00      	cmp	r5, #0
 80133c4:	f040 8242 	bne.w	801384c <HAL_RCCEx_PeriphCLKConfig+0xad0>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80133c8:	4a8e      	ldr	r2, [pc, #568]	; (8013604 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 80133ca:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 80133ce:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80133d0:	4059      	eors	r1, r3
 80133d2:	f411 7f40 	tst.w	r1, #768	; 0x300
 80133d6:	d00b      	beq.n	80133f0 <HAL_RCCEx_PeriphCLKConfig+0x674>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80133d8:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 80133da:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80133dc:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80133e0:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 80133e4:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80133e6:	6f10      	ldr	r0, [r2, #112]	; 0x70
 80133e8:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 80133ec:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 80133ee:	6711      	str	r1, [r2, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80133f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80133f4:	f000 820c 	beq.w	8013810 <HAL_RCCEx_PeriphCLKConfig+0xa94>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80133f8:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80133fc:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8013400:	f000 821a 	beq.w	8013838 <HAL_RCCEx_PeriphCLKConfig+0xabc>
 8013404:	497f      	ldr	r1, [pc, #508]	; (8013604 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8013406:	690a      	ldr	r2, [r1, #16]
 8013408:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 801340c:	610a      	str	r2, [r1, #16]
 801340e:	4a7d      	ldr	r2, [pc, #500]	; (8013604 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8013410:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013414:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8013416:	430b      	orrs	r3, r1
 8013418:	6713      	str	r3, [r2, #112]	; 0x70
 801341a:	6823      	ldr	r3, [r4, #0]
 801341c:	e5f0      	b.n	8013000 <HAL_RCCEx_PeriphCLKConfig+0x284>
 801341e:	462e      	mov	r6, r5
 8013420:	e712      	b.n	8013248 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 8013422:	462e      	mov	r6, r5
 8013424:	e631      	b.n	801308a <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8013426:	462e      	mov	r6, r5
 8013428:	e5e7      	b.n	8012ffa <HAL_RCCEx_PeriphCLKConfig+0x27e>
 801342a:	462e      	mov	r6, r5
 801342c:	e64c      	b.n	80130c8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 801342e:	462e      	mov	r6, r5
 8013430:	e66b      	b.n	801310a <HAL_RCCEx_PeriphCLKConfig+0x38e>
 8013432:	462e      	mov	r6, r5
 8013434:	e6a9      	b.n	801318a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8013436:	462e      	mov	r6, r5
 8013438:	e57b      	b.n	8012f32 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 801343a:	462e      	mov	r6, r5
 801343c:	e5c1      	b.n	8012fc2 <HAL_RCCEx_PeriphCLKConfig+0x246>
 801343e:	462e      	mov	r6, r5
 8013440:	e6f0      	b.n	8013224 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8013442:	462e      	mov	r6, r5
 8013444:	e595      	b.n	8012f72 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8013446:	462e      	mov	r6, r5
 8013448:	e6bf      	b.n	80131ca <HAL_RCCEx_PeriphCLKConfig+0x44e>
 801344a:	462e      	mov	r6, r5
 801344c:	e67d      	b.n	801314a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      ret = HAL_ERROR;
 801344e:	2601      	movs	r6, #1
 8013450:	4635      	mov	r5, r6
 8013452:	e5a6      	b.n	8012fa2 <HAL_RCCEx_PeriphCLKConfig+0x226>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013454:	486b      	ldr	r0, [pc, #428]	; (8013604 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8013456:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8013458:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 801345c:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 801345e:	2d00      	cmp	r5, #0
 8013460:	f47f af57 	bne.w	8013312 <HAL_RCCEx_PeriphCLKConfig+0x596>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8013464:	4d67      	ldr	r5, [pc, #412]	; (8013604 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8013466:	1c30      	adds	r0, r6, #0
 8013468:	6d69      	ldr	r1, [r5, #84]	; 0x54
 801346a:	bf18      	it	ne
 801346c:	2001      	movne	r0, #1
 801346e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8013472:	430a      	orrs	r2, r1
 8013474:	656a      	str	r2, [r5, #84]	; 0x54
 8013476:	e709      	b.n	801328c <HAL_RCCEx_PeriphCLKConfig+0x510>
      ret = HAL_ERROR;
 8013478:	2601      	movs	r6, #1
 801347a:	4635      	mov	r5, r6
 801347c:	e6fe      	b.n	801327c <HAL_RCCEx_PeriphCLKConfig+0x500>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801347e:	4961      	ldr	r1, [pc, #388]	; (8013604 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8013480:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8013482:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8013486:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8013488:	2d00      	cmp	r5, #0
 801348a:	f43f aef0 	beq.w	801326e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 801348e:	462e      	mov	r6, r5
 8013490:	e6f4      	b.n	801327c <HAL_RCCEx_PeriphCLKConfig+0x500>
 8013492:	462e      	mov	r6, r5
 8013494:	e585      	b.n	8012fa2 <HAL_RCCEx_PeriphCLKConfig+0x226>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8013496:	2101      	movs	r1, #1
 8013498:	1d20      	adds	r0, r4, #4
 801349a:	f7ff fb77 	bl	8012b8c <RCCEx_PLL2_Config>
 801349e:	4605      	mov	r5, r0
 80134a0:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80134a2:	2d00      	cmp	r5, #0
 80134a4:	d1c3      	bne.n	801342e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 80134a6:	e628      	b.n	80130fa <HAL_RCCEx_PeriphCLKConfig+0x37e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80134a8:	2101      	movs	r1, #1
 80134aa:	1d20      	adds	r0, r4, #4
 80134ac:	f7ff fb6e 	bl	8012b8c <RCCEx_PLL2_Config>
 80134b0:	4605      	mov	r5, r0
 80134b2:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80134b4:	2d00      	cmp	r5, #0
 80134b6:	d1b8      	bne.n	801342a <HAL_RCCEx_PeriphCLKConfig+0x6ae>
 80134b8:	e5ff      	b.n	80130ba <HAL_RCCEx_PeriphCLKConfig+0x33e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80134ba:	4952      	ldr	r1, [pc, #328]	; (8013604 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 80134bc:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80134be:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80134c2:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 80134c4:	2d00      	cmp	r5, #0
 80134c6:	d1ae      	bne.n	8013426 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 80134c8:	e590      	b.n	8012fec <HAL_RCCEx_PeriphCLKConfig+0x270>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80134ca:	2101      	movs	r1, #1
 80134cc:	1d20      	adds	r0, r4, #4
 80134ce:	f7ff fb5d 	bl	8012b8c <RCCEx_PLL2_Config>
 80134d2:	4605      	mov	r5, r0
 80134d4:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80134d6:	2d00      	cmp	r5, #0
 80134d8:	d1a3      	bne.n	8013422 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 80134da:	e5cf      	b.n	801307c <HAL_RCCEx_PeriphCLKConfig+0x300>
    switch(PeriphClkInit->RngClockSelection)
 80134dc:	2a00      	cmp	r2, #0
 80134de:	f47f af18 	bne.w	8013312 <HAL_RCCEx_PeriphCLKConfig+0x596>
 80134e2:	e7bc      	b.n	801345e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80134e4:	2102      	movs	r1, #2
 80134e6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80134ea:	f7ff fbcb 	bl	8012c84 <RCCEx_PLL3_Config>
 80134ee:	4605      	mov	r5, r0
 80134f0:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80134f2:	2d00      	cmp	r5, #0
 80134f4:	d1a9      	bne.n	801344a <HAL_RCCEx_PeriphCLKConfig+0x6ce>
 80134f6:	e620      	b.n	801313a <HAL_RCCEx_PeriphCLKConfig+0x3be>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80134f8:	2102      	movs	r1, #2
 80134fa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80134fe:	f7ff fbc1 	bl	8012c84 <RCCEx_PLL3_Config>
 8013502:	4605      	mov	r5, r0
 8013504:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8013506:	2d00      	cmp	r5, #0
 8013508:	d193      	bne.n	8013432 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 801350a:	e636      	b.n	801317a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    switch(PeriphClkInit->Sai1ClockSelection)
 801350c:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 801350e:	2d00      	cmp	r5, #0
 8013510:	d151      	bne.n	80135b6 <HAL_RCCEx_PeriphCLKConfig+0x83a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8013512:	493c      	ldr	r1, [pc, #240]	; (8013604 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8013514:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013516:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8013518:	f022 0207 	bic.w	r2, r2, #7
 801351c:	4302      	orrs	r2, r0
 801351e:	650a      	str	r2, [r1, #80]	; 0x50
 8013520:	e457      	b.n	8012dd2 <HAL_RCCEx_PeriphCLKConfig+0x56>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8013522:	2101      	movs	r1, #1
 8013524:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8013528:	f7ff fbac 	bl	8012c84 <RCCEx_PLL3_Config>
 801352c:	4605      	mov	r5, r0
 801352e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8013530:	2d00      	cmp	r5, #0
 8013532:	d180      	bne.n	8013436 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 8013534:	e4f6      	b.n	8012f24 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013536:	4933      	ldr	r1, [pc, #204]	; (8013604 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8013538:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801353a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 801353e:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8013540:	bb75      	cbnz	r5, 80135a0 <HAL_RCCEx_PeriphCLKConfig+0x824>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8013542:	4930      	ldr	r1, [pc, #192]	; (8013604 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8013544:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8013546:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8013548:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 801354c:	4302      	orrs	r2, r0
 801354e:	64ca      	str	r2, [r1, #76]	; 0x4c
 8013550:	e4b1      	b.n	8012eb6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8013552:	2101      	movs	r1, #1
 8013554:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8013558:	f7ff fb94 	bl	8012c84 <RCCEx_PLL3_Config>
 801355c:	4605      	mov	r5, r0
 801355e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8013560:	2d00      	cmp	r5, #0
 8013562:	f47f af6e 	bne.w	8013442 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 8013566:	e4fc      	b.n	8012f62 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013568:	4926      	ldr	r1, [pc, #152]	; (8013604 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 801356a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801356c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8013570:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8013572:	2d00      	cmp	r5, #0
 8013574:	f47f af61 	bne.w	801343a <HAL_RCCEx_PeriphCLKConfig+0x6be>
 8013578:	e6d6      	b.n	8013328 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 801357a:	2102      	movs	r1, #2
 801357c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8013580:	f7ff fb80 	bl	8012c84 <RCCEx_PLL3_Config>
 8013584:	4605      	mov	r5, r0
 8013586:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8013588:	2d00      	cmp	r5, #0
 801358a:	f47f af5c 	bne.w	8013446 <HAL_RCCEx_PeriphCLKConfig+0x6ca>
 801358e:	e614      	b.n	80131ba <HAL_RCCEx_PeriphCLKConfig+0x43e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8013590:	2102      	movs	r1, #2
 8013592:	1d20      	adds	r0, r4, #4
 8013594:	f7ff fafa 	bl	8012b8c <RCCEx_PLL2_Config>
 8013598:	4605      	mov	r5, r0
 801359a:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 801359c:	2d00      	cmp	r5, #0
 801359e:	d0d0      	beq.n	8013542 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
 80135a0:	462e      	mov	r6, r5
 80135a2:	e488      	b.n	8012eb6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80135a4:	2100      	movs	r1, #0
 80135a6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80135aa:	f7ff fb6b 	bl	8012c84 <RCCEx_PLL3_Config>
 80135ae:	4605      	mov	r5, r0
 80135b0:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80135b2:	2d00      	cmp	r5, #0
 80135b4:	d0ad      	beq.n	8013512 <HAL_RCCEx_PeriphCLKConfig+0x796>
 80135b6:	462e      	mov	r6, r5
 80135b8:	e40b      	b.n	8012dd2 <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80135ba:	4912      	ldr	r1, [pc, #72]	; (8013604 <HAL_RCCEx_PeriphCLKConfig+0x888>)
      break;
 80135bc:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80135be:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80135c0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80135c4:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80135c6:	e7a2      	b.n	801350e <HAL_RCCEx_PeriphCLKConfig+0x792>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80135c8:	2100      	movs	r1, #0
 80135ca:	1d20      	adds	r0, r4, #4
 80135cc:	f7ff fade 	bl	8012b8c <RCCEx_PLL2_Config>
 80135d0:	6823      	ldr	r3, [r4, #0]
 80135d2:	4605      	mov	r5, r0
      break;
 80135d4:	e79b      	b.n	801350e <HAL_RCCEx_PeriphCLKConfig+0x792>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80135d6:	2102      	movs	r1, #2
 80135d8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80135dc:	f7ff fb52 	bl	8012c84 <RCCEx_PLL3_Config>
 80135e0:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80135e4:	b100      	cbz	r0, 80135e8 <HAL_RCCEx_PeriphCLKConfig+0x86c>
          status = HAL_ERROR;
 80135e6:	2601      	movs	r6, #1
 80135e8:	6823      	ldr	r3, [r4, #0]
 80135ea:	e5f6      	b.n	80131da <HAL_RCCEx_PeriphCLKConfig+0x45e>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80135ec:	2102      	movs	r1, #2
 80135ee:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80135f2:	f7ff fb47 	bl	8012c84 <RCCEx_PLL3_Config>
 80135f6:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80135fa:	b100      	cbz	r0, 80135fe <HAL_RCCEx_PeriphCLKConfig+0x882>
        status = HAL_ERROR;
 80135fc:	2601      	movs	r6, #1
 80135fe:	6823      	ldr	r3, [r4, #0]
 8013600:	e5f9      	b.n	80131f6 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8013602:	bf00      	nop
 8013604:	58024400 	.word	0x58024400
 8013608:	58024800 	.word	0x58024800
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801360c:	2100      	movs	r1, #0
 801360e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8013612:	f7ff fb37 	bl	8012c84 <RCCEx_PLL3_Config>
 8013616:	4605      	mov	r5, r0
 8013618:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 801361a:	2d00      	cmp	r5, #0
 801361c:	f43f ac33 	beq.w	8012e86 <HAL_RCCEx_PeriphCLKConfig+0x10a>
 8013620:	462e      	mov	r6, r5
 8013622:	e438      	b.n	8012e96 <HAL_RCCEx_PeriphCLKConfig+0x11a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8013624:	2102      	movs	r1, #2
 8013626:	3004      	adds	r0, #4
 8013628:	f7ff fab0 	bl	8012b8c <RCCEx_PLL2_Config>
 801362c:	4606      	mov	r6, r0
 801362e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8013630:	2e00      	cmp	r6, #0
 8013632:	f47f abc0 	bne.w	8012db6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8013636:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8013638:	f7ff bbb6 	b.w	8012da8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 801363c:	2100      	movs	r1, #0
 801363e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8013642:	f7ff fb1f 	bl	8012c84 <RCCEx_PLL3_Config>
 8013646:	4605      	mov	r5, r0
 8013648:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 801364a:	2d00      	cmp	r5, #0
 801364c:	f43f abf9 	beq.w	8012e42 <HAL_RCCEx_PeriphCLKConfig+0xc6>
 8013650:	462e      	mov	r6, r5
 8013652:	f7ff bbfe 	b.w	8012e52 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8013656:	2100      	movs	r1, #0
 8013658:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801365c:	f7ff fb12 	bl	8012c84 <RCCEx_PLL3_Config>
 8013660:	4605      	mov	r5, r0
 8013662:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8013664:	2d00      	cmp	r5, #0
 8013666:	f43f abcb 	beq.w	8012e00 <HAL_RCCEx_PeriphCLKConfig+0x84>
 801366a:	462e      	mov	r6, r5
 801366c:	f7ff bbcf 	b.w	8012e0e <HAL_RCCEx_PeriphCLKConfig+0x92>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8013670:	2100      	movs	r1, #0
 8013672:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8013676:	f7ff fb05 	bl	8012c84 <RCCEx_PLL3_Config>
 801367a:	4605      	mov	r5, r0
 801367c:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 801367e:	2d00      	cmp	r5, #0
 8013680:	f43f ac32 	beq.w	8012ee8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8013684:	462e      	mov	r6, r5
 8013686:	e436      	b.n	8012ef6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013688:	4977      	ldr	r1, [pc, #476]	; (8013868 <HAL_RCCEx_PeriphCLKConfig+0xaec>)
 801368a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801368c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8013690:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8013692:	f7ff bbd3 	b.w	8012e3c <HAL_RCCEx_PeriphCLKConfig+0xc0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013696:	4974      	ldr	r1, [pc, #464]	; (8013868 <HAL_RCCEx_PeriphCLKConfig+0xaec>)
 8013698:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801369a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 801369e:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80136a0:	e41f      	b.n	8012ee2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80136a2:	2102      	movs	r1, #2
 80136a4:	3024      	adds	r0, #36	; 0x24
 80136a6:	f7ff faed 	bl	8012c84 <RCCEx_PLL3_Config>
 80136aa:	4606      	mov	r6, r0
      break;
 80136ac:	e7bf      	b.n	801362e <HAL_RCCEx_PeriphCLKConfig+0x8b2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80136ae:	496e      	ldr	r1, [pc, #440]	; (8013868 <HAL_RCCEx_PeriphCLKConfig+0xaec>)
 80136b0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80136b2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80136b6:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80136b8:	f7ff bb9f 	b.w	8012dfa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80136bc:	496a      	ldr	r1, [pc, #424]	; (8013868 <HAL_RCCEx_PeriphCLKConfig+0xaec>)
 80136be:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80136c0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80136c4:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80136c6:	f7ff bbdb 	b.w	8012e80 <HAL_RCCEx_PeriphCLKConfig+0x104>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80136ca:	1d20      	adds	r0, r4, #4
 80136cc:	f7ff fa5e 	bl	8012b8c <RCCEx_PLL2_Config>
 80136d0:	4605      	mov	r5, r0
 80136d2:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80136d4:	2d00      	cmp	r5, #0
 80136d6:	f47f aeb2 	bne.w	801343e <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 80136da:	e638      	b.n	801334e <HAL_RCCEx_PeriphCLKConfig+0x5d2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80136dc:	4962      	ldr	r1, [pc, #392]	; (8013868 <HAL_RCCEx_PeriphCLKConfig+0xaec>)
 80136de:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80136e0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80136e4:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 80136e6:	2d00      	cmp	r5, #0
 80136e8:	f47f ae99 	bne.w	801341e <HAL_RCCEx_PeriphCLKConfig+0x6a2>
 80136ec:	e641      	b.n	8013372 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
      ret = HAL_ERROR;
 80136ee:	2601      	movs	r6, #1
 80136f0:	4635      	mov	r5, r6
 80136f2:	e4ca      	b.n	801308a <HAL_RCCEx_PeriphCLKConfig+0x30e>
            ret = HAL_TIMEOUT;
 80136f4:	2603      	movs	r6, #3
 80136f6:	6823      	ldr	r3, [r4, #0]
 80136f8:	4635      	mov	r5, r6
 80136fa:	e481      	b.n	8013000 <HAL_RCCEx_PeriphCLKConfig+0x284>
    switch(PeriphClkInit->Spi45ClockSelection)
 80136fc:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8013700:	f43f ac0d 	beq.w	8012f1e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8013704:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8013708:	f43f ac09 	beq.w	8012f1e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 801370c:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8013710:	f43f ac05 	beq.w	8012f1e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      ret = HAL_ERROR;
 8013714:	2601      	movs	r6, #1
 8013716:	4635      	mov	r5, r6
 8013718:	e40b      	b.n	8012f32 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->Spi6ClockSelection)
 801371a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 801371e:	f43f ac1d 	beq.w	8012f5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8013722:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8013726:	f43f ac19 	beq.w	8012f5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 801372a:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 801372e:	f43f ac15 	beq.w	8012f5c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      ret = HAL_ERROR;
 8013732:	2601      	movs	r6, #1
 8013734:	4635      	mov	r5, r6
 8013736:	e41c      	b.n	8012f72 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8013738:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 801373c:	f43f ad1a 	beq.w	8013174 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8013740:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 8013744:	f43f ad16 	beq.w	8013174 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8013748:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 801374c:	f43f ad12 	beq.w	8013174 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
      ret = HAL_ERROR;
 8013750:	2601      	movs	r6, #1
 8013752:	4635      	mov	r5, r6
 8013754:	e519      	b.n	801318a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8013756:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 801375a:	f43f aceb 	beq.w	8013134 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 801375e:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8013762:	f43f ace7 	beq.w	8013134 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8013766:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 801376a:	f43f ace3 	beq.w	8013134 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      ret = HAL_ERROR;
 801376e:	2601      	movs	r6, #1
 8013770:	4635      	mov	r5, r6
 8013772:	e4ea      	b.n	801314a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8013774:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8013778:	f43f ad1c 	beq.w	80131b4 <HAL_RCCEx_PeriphCLKConfig+0x438>
 801377c:	f5b2 4f20 	cmp.w	r2, #40960	; 0xa000
 8013780:	f43f ad18 	beq.w	80131b4 <HAL_RCCEx_PeriphCLKConfig+0x438>
 8013784:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 8013788:	f43f ad14 	beq.w	80131b4 <HAL_RCCEx_PeriphCLKConfig+0x438>
      ret = HAL_ERROR;
 801378c:	2601      	movs	r6, #1
 801378e:	4635      	mov	r5, r6
 8013790:	e51b      	b.n	80131ca <HAL_RCCEx_PeriphCLKConfig+0x44e>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8013792:	bbd2      	cbnz	r2, 801380a <HAL_RCCEx_PeriphCLKConfig+0xa8e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013794:	4834      	ldr	r0, [pc, #208]	; (8013868 <HAL_RCCEx_PeriphCLKConfig+0xaec>)
 8013796:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8013798:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 801379c:	62c1      	str	r1, [r0, #44]	; 0x2c
 801379e:	f7ff bb03 	b.w	8012da8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
    switch(PeriphClkInit->Spi123ClockSelection)
 80137a2:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 80137a6:	f43f ab9c 	beq.w	8012ee2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80137aa:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80137ae:	f43f ab98 	beq.w	8012ee2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      ret = HAL_ERROR;
 80137b2:	2601      	movs	r6, #1
 80137b4:	4635      	mov	r5, r6
 80137b6:	f7ff bb9e 	b.w	8012ef6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
    switch(PeriphClkInit->Sai4BClockSelection)
 80137ba:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 80137be:	f43f ab5f 	beq.w	8012e80 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80137c2:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 80137c6:	f43f ab5b 	beq.w	8012e80 <HAL_RCCEx_PeriphCLKConfig+0x104>
      ret = HAL_ERROR;
 80137ca:	2601      	movs	r6, #1
 80137cc:	4635      	mov	r5, r6
 80137ce:	f7ff bb62 	b.w	8012e96 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch(PeriphClkInit->Sai23ClockSelection)
 80137d2:	2ac0      	cmp	r2, #192	; 0xc0
 80137d4:	f43f ab11 	beq.w	8012dfa <HAL_RCCEx_PeriphCLKConfig+0x7e>
 80137d8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80137dc:	f43f ab0d 	beq.w	8012dfa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      ret = HAL_ERROR;
 80137e0:	2601      	movs	r6, #1
 80137e2:	4635      	mov	r5, r6
 80137e4:	f7ff bb13 	b.w	8012e0e <HAL_RCCEx_PeriphCLKConfig+0x92>
    switch(PeriphClkInit->Sai4AClockSelection)
 80137e8:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 80137ec:	f43f ab26 	beq.w	8012e3c <HAL_RCCEx_PeriphCLKConfig+0xc0>
 80137f0:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80137f4:	f43f ab22 	beq.w	8012e3c <HAL_RCCEx_PeriphCLKConfig+0xc0>
      ret = HAL_ERROR;
 80137f8:	2601      	movs	r6, #1
 80137fa:	4635      	mov	r5, r6
 80137fc:	f7ff bb29 	b.w	8012e52 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    switch(PeriphClkInit->QspiClockSelection)
 8013800:	2a00      	cmp	r2, #0
 8013802:	f43f ae9d 	beq.w	8013540 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
 8013806:	f7ff bb54 	b.w	8012eb2 <HAL_RCCEx_PeriphCLKConfig+0x136>
      ret = HAL_ERROR;
 801380a:	2601      	movs	r6, #1
 801380c:	f7ff bad3 	b.w	8012db6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 8013810:	f7fa f8a6 	bl	800d960 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8013814:	4f14      	ldr	r7, [pc, #80]	; (8013868 <HAL_RCCEx_PeriphCLKConfig+0xaec>)
        tickstart = HAL_GetTick();
 8013816:	4681      	mov	r9, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013818:	f241 3888 	movw	r8, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801381c:	e006      	b.n	801382c <HAL_RCCEx_PeriphCLKConfig+0xab0>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801381e:	f7fa f89f 	bl	800d960 <HAL_GetTick>
 8013822:	eba0 0009 	sub.w	r0, r0, r9
 8013826:	4540      	cmp	r0, r8
 8013828:	f63f af64 	bhi.w	80136f4 <HAL_RCCEx_PeriphCLKConfig+0x978>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801382c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801382e:	079b      	lsls	r3, r3, #30
 8013830:	d5f5      	bpl.n	801381e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8013832:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8013836:	e5df      	b.n	80133f8 <HAL_RCCEx_PeriphCLKConfig+0x67c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8013838:	480b      	ldr	r0, [pc, #44]	; (8013868 <HAL_RCCEx_PeriphCLKConfig+0xaec>)
 801383a:	4a0c      	ldr	r2, [pc, #48]	; (801386c <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 801383c:	6901      	ldr	r1, [r0, #16]
 801383e:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8013842:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 8013846:	430a      	orrs	r2, r1
 8013848:	6102      	str	r2, [r0, #16]
 801384a:	e5e0      	b.n	801340e <HAL_RCCEx_PeriphCLKConfig+0x692>
 801384c:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 801384e:	462e      	mov	r6, r5
 8013850:	f7ff bbd6 	b.w	8013000 <HAL_RCCEx_PeriphCLKConfig+0x284>
      ret = HAL_ERROR;
 8013854:	2601      	movs	r6, #1
 8013856:	4635      	mov	r5, r6
 8013858:	f7ff bbcf 	b.w	8012ffa <HAL_RCCEx_PeriphCLKConfig+0x27e>
      ret = HAL_ERROR;
 801385c:	2601      	movs	r6, #1
 801385e:	4635      	mov	r5, r6
 8013860:	e453      	b.n	801310a <HAL_RCCEx_PeriphCLKConfig+0x38e>
      ret = HAL_ERROR;
 8013862:	2601      	movs	r6, #1
 8013864:	4635      	mov	r5, r6
 8013866:	e42f      	b.n	80130c8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8013868:	58024400 	.word	0x58024400
 801386c:	00ffffcf 	.word	0x00ffffcf

08013870 <HAL_RCCEx_GetPeriphCLKConfig>:
  PeriphClkInit->PLL3.PLL3M = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> RCC_PLLCKSELR_DIVM3_Pos);
 8013870:	4b65      	ldr	r3, [pc, #404]	; (8013a08 <HAL_RCCEx_GetPeriphCLKConfig+0x198>)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_DSI;
 8013872:	f04f 32ff 	mov.w	r2, #4294967295
 8013876:	6002      	str	r2, [r0, #0]
  PeriphClkInit->PLL3.PLL3M = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> RCC_PLLCKSELR_DIVM3_Pos);
 8013878:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801387a:	f3c2 5205 	ubfx	r2, r2, #20, #6
 801387e:	6242      	str	r2, [r0, #36]	; 0x24
  PeriphClkInit->PLL3.PLL3N = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) >> RCC_PLL3DIVR_N3_Pos)+ 1U;
 8013880:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013882:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013886:	3201      	adds	r2, #1
 8013888:	6282      	str	r2, [r0, #40]	; 0x28
  PeriphClkInit->PLL3.PLL3R = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> RCC_PLL3DIVR_R3_Pos)+ 1U;
 801388a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801388c:	f3c2 6206 	ubfx	r2, r2, #24, #7
 8013890:	3201      	adds	r2, #1
 8013892:	6342      	str	r2, [r0, #52]	; 0x34
  PeriphClkInit->PLL3.PLL3P = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> RCC_PLL3DIVR_P3_Pos)+ 1U;
 8013894:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013896:	f3c2 2246 	ubfx	r2, r2, #9, #7
 801389a:	3201      	adds	r2, #1
 801389c:	62c2      	str	r2, [r0, #44]	; 0x2c
  PeriphClkInit->PLL3.PLL3Q = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> RCC_PLL3DIVR_Q3_Pos)+ 1U;
 801389e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80138a0:	f3c2 4206 	ubfx	r2, r2, #16, #7
 80138a4:	3201      	adds	r2, #1
 80138a6:	6302      	str	r2, [r0, #48]	; 0x30
  PeriphClkInit->PLL3.PLL3RGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL3RGE) >> RCC_PLLCFGR_PLL3RGE_Pos);
 80138a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80138aa:	f3c2 2281 	ubfx	r2, r2, #10, #2
 80138ae:	6382      	str	r2, [r0, #56]	; 0x38
  PeriphClkInit->PLL3.PLL3VCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL3VCOSEL) >> RCC_PLLCFGR_PLL3VCOSEL_Pos);
 80138b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80138b2:	f3c2 2240 	ubfx	r2, r2, #9, #1
 80138b6:	63c2      	str	r2, [r0, #60]	; 0x3c
  PeriphClkInit->PLL2.PLL2M = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> RCC_PLLCKSELR_DIVM2_Pos);
 80138b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80138ba:	f3c2 3205 	ubfx	r2, r2, #12, #6
 80138be:	6042      	str	r2, [r0, #4]
  PeriphClkInit->PLL2.PLL2N = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) >> RCC_PLL2DIVR_N2_Pos)+ 1U;
 80138c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80138c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80138c6:	3201      	adds	r2, #1
 80138c8:	6082      	str	r2, [r0, #8]
  PeriphClkInit->PLL2.PLL2R = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> RCC_PLL2DIVR_R2_Pos)+ 1U;
 80138ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80138cc:	f3c2 6206 	ubfx	r2, r2, #24, #7
 80138d0:	3201      	adds	r2, #1
 80138d2:	6142      	str	r2, [r0, #20]
  PeriphClkInit->PLL2.PLL2P = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> RCC_PLL2DIVR_P2_Pos)+ 1U;
 80138d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80138d6:	f3c2 2246 	ubfx	r2, r2, #9, #7
 80138da:	3201      	adds	r2, #1
 80138dc:	60c2      	str	r2, [r0, #12]
  PeriphClkInit->PLL2.PLL2Q = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> RCC_PLL2DIVR_Q2_Pos)+ 1U;
 80138de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80138e0:	f3c2 4206 	ubfx	r2, r2, #16, #7
 80138e4:	3201      	adds	r2, #1
 80138e6:	6102      	str	r2, [r0, #16]
  PeriphClkInit->PLL2.PLL2RGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL2RGE) >> RCC_PLLCFGR_PLL2RGE_Pos);
 80138e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80138ea:	f3c2 1281 	ubfx	r2, r2, #6, #2
 80138ee:	6182      	str	r2, [r0, #24]
  PeriphClkInit->PLL2.PLL2VCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL2VCOSEL) >> RCC_PLLCFGR_PLL2VCOSEL_Pos);
 80138f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80138f2:	f3c2 1240 	ubfx	r2, r2, #5, #1
 80138f6:	61c2      	str	r2, [r0, #28]
  PeriphClkInit->Usart16ClockSelection      = __HAL_RCC_GET_USART16_SOURCE();
 80138f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80138fa:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80138fe:	67c2      	str	r2, [r0, #124]	; 0x7c
  PeriphClkInit->Usart234578ClockSelection  = __HAL_RCC_GET_USART234578_SOURCE();
 8013900:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013902:	f002 0207 	and.w	r2, r2, #7
 8013906:	6782      	str	r2, [r0, #120]	; 0x78
  PeriphClkInit->Lpuart1ClockSelection      = __HAL_RCC_GET_LPUART1_SOURCE();
 8013908:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801390a:	f002 0207 	and.w	r2, r2, #7
 801390e:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
  PeriphClkInit->I2c123ClockSelection       = __HAL_RCC_GET_I2C1_SOURCE();
 8013912:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013914:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8013918:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  PeriphClkInit->Lptim1ClockSelection       = __HAL_RCC_GET_LPTIM1_SOURCE();
 801391c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801391e:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8013922:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  PeriphClkInit->Lptim2ClockSelection       = __HAL_RCC_GET_LPTIM2_SOURCE();
 8013926:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013928:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 801392c:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
  PeriphClkInit->Lptim345ClockSelection     = __HAL_RCC_GET_LPTIM345_SOURCE();
 8013930:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013932:	f402 4260 	and.w	r2, r2, #57344	; 0xe000
 8013936:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
  PeriphClkInit->Sai1ClockSelection         = __HAL_RCC_GET_SAI1_SOURCE();
 801393a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801393c:	f002 0207 	and.w	r2, r2, #7
 8013940:	6582      	str	r2, [r0, #88]	; 0x58
  PeriphClkInit->Sai23ClockSelection        = __HAL_RCC_GET_SAI23_SOURCE();
 8013942:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013944:	f402 72e0 	and.w	r2, r2, #448	; 0x1c0
 8013948:	65c2      	str	r2, [r0, #92]	; 0x5c
  PeriphClkInit->Sai4AClockSelection        = __HAL_RCC_GET_SAI4A_SOURCE();
 801394a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801394c:	f402 0260 	and.w	r2, r2, #14680064	; 0xe00000
 8013950:	f8c0 20a8 	str.w	r2, [r0, #168]	; 0xa8
  PeriphClkInit->Sai4BClockSelection        = __HAL_RCC_GET_SAI4B_SOURCE();
 8013954:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013956:	f002 62e0 	and.w	r2, r2, #117440512	; 0x7000000
 801395a:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
  PeriphClkInit->RTCClockSelection          = __HAL_RCC_GET_RTC_SOURCE();
 801395e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8013960:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8013964:	f8c0 20b4 	str.w	r2, [r0, #180]	; 0xb4
  PeriphClkInit->UsbClockSelection          = __HAL_RCC_GET_USB_SOURCE();
 8013968:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801396a:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 801396e:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  PeriphClkInit->SdmmcClockSelection        = __HAL_RCC_GET_SDMMC_SOURCE();
 8013972:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013974:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8013978:	6502      	str	r2, [r0, #80]	; 0x50
  PeriphClkInit->RngClockSelection          = __HAL_RCC_GET_RNG_SOURCE();
 801397a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801397c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8013980:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  PeriphClkInit->Hrtim1ClockSelection       = __HAL_RCC_GET_HRTIM1_SOURCE();
 8013984:	691a      	ldr	r2, [r3, #16]
 8013986:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 801398a:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
  PeriphClkInit->AdcClockSelection          = __HAL_RCC_GET_ADC_SOURCE();
 801398e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013990:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8013994:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
  PeriphClkInit->Swpmi1ClockSelection       = __HAL_RCC_GET_SWPMI1_SOURCE();
 8013998:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801399a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 801399e:	6742      	str	r2, [r0, #116]	; 0x74
  PeriphClkInit->Dfsdm1ClockSelection       = __HAL_RCC_GET_DFSDM1_SOURCE();
 80139a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80139a2:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 80139a6:	66c2      	str	r2, [r0, #108]	; 0x6c
  PeriphClkInit->SpdifrxClockSelection      = __HAL_RCC_GET_SPDIFRX_SOURCE();
 80139a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80139aa:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 80139ae:	6682      	str	r2, [r0, #104]	; 0x68
  PeriphClkInit->Spi123ClockSelection       = __HAL_RCC_GET_SPI123_SOURCE();
 80139b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80139b2:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 80139b6:	6602      	str	r2, [r0, #96]	; 0x60
  PeriphClkInit->Spi45ClockSelection        = __HAL_RCC_GET_SPI45_SOURCE();
 80139b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80139ba:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
 80139be:	6642      	str	r2, [r0, #100]	; 0x64
  PeriphClkInit->Spi6ClockSelection         = __HAL_RCC_GET_SPI6_SOURCE();
 80139c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80139c2:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 80139c6:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
  PeriphClkInit->FdcanClockSelection        = __HAL_RCC_GET_FDCAN_SOURCE();
 80139ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80139cc:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
 80139d0:	6702      	str	r2, [r0, #112]	; 0x70
  PeriphClkInit->CecClockSelection          = __HAL_RCC_GET_CEC_SOURCE();
 80139d2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80139d4:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 80139d8:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  PeriphClkInit->FmcClockSelection          = __HAL_RCC_GET_FMC_SOURCE();
 80139dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80139de:	f002 0203 	and.w	r2, r2, #3
 80139e2:	6442      	str	r2, [r0, #68]	; 0x44
  PeriphClkInit->QspiClockSelection         = __HAL_RCC_GET_QSPI_SOURCE();
 80139e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80139e6:	f002 0230 	and.w	r2, r2, #48	; 0x30
 80139ea:	6482      	str	r2, [r0, #72]	; 0x48
  PeriphClkInit->DsiClockSelection          = __HAL_RCC_GET_DSI_SOURCE();
 80139ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80139ee:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80139f2:	64c2      	str	r2, [r0, #76]	; 0x4c
  PeriphClkInit->CkperClockSelection        = __HAL_RCC_GET_CLKP_SOURCE();
 80139f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80139f6:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
 80139fa:	6542      	str	r2, [r0, #84]	; 0x54
  if ((RCC->CFGR & RCC_CFGR_TIMPRE) == 0U)
 80139fc:	691b      	ldr	r3, [r3, #16]
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80139fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013a02:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
}
 8013a06:	4770      	bx	lr
 8013a08:	58024400 	.word	0x58024400

08013a0c <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8013a0c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8013a0e:	f7fe feb5 	bl	801277c <HAL_RCC_GetHCLKFreq>
 8013a12:	4b05      	ldr	r3, [pc, #20]	; (8013a28 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8013a14:	4a05      	ldr	r2, [pc, #20]	; (8013a2c <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8013a16:	6a1b      	ldr	r3, [r3, #32]
 8013a18:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8013a1c:	5cd3      	ldrb	r3, [r2, r3]
 8013a1e:	f003 031f 	and.w	r3, r3, #31
}
 8013a22:	40d8      	lsrs	r0, r3
 8013a24:	bd08      	pop	{r3, pc}
 8013a26:	bf00      	nop
 8013a28:	58024400 	.word	0x58024400
 8013a2c:	080bf274 	.word	0x080bf274

08013a30 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013a30:	4a46      	ldr	r2, [pc, #280]	; (8013b4c <HAL_RCCEx_GetPLL2ClockFreq+0x11c>)
{
 8013a32:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013a34:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8013a36:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8013a38:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8013a3a:	f3c3 3305 	ubfx	r3, r3, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8013a3e:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d059      	beq.n	8013af8 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8013a44:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8013a48:	f3c1 1100 	ubfx	r1, r1, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013a4c:	f004 0403 	and.w	r4, r4, #3
 8013a50:	ee07 3a90 	vmov	s15, r3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8013a54:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 8013a58:	2c01      	cmp	r4, #1
 8013a5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013a5e:	ee06 1a90 	vmov	s13, r1
 8013a62:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8013a66:	d002      	beq.n	8013a6e <HAL_RCCEx_GetPLL2ClockFreq+0x3e>
 8013a68:	d34e      	bcc.n	8013b08 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 8013a6a:	2c02      	cmp	r4, #2
 8013a6c:	d049      	beq.n	8013b02 <HAL_RCCEx_GetPLL2ClockFreq+0xd2>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8013a6e:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8013b50 <HAL_RCCEx_GetPLL2ClockFreq+0x120>
 8013a72:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8013a76:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8013a78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013a7c:	ee07 3a10 	vmov	s14, r3
 8013a80:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8013a84:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013a88:	ee37 7a25 	vadd.f32	s14, s14, s11
 8013a8c:	ee77 7a26 	vadd.f32	s15, s14, s13
 8013a90:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8013a94:	4a2d      	ldr	r2, [pc, #180]	; (8013b4c <HAL_RCCEx_GetPLL2ClockFreq+0x11c>)
 8013a96:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8013a9a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8013a9c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8013aa0:	ee06 3a90 	vmov	s13, r3
 8013aa4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 8013aa8:	bc30      	pop	{r4, r5}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8013aaa:	ee76 6a86 	vadd.f32	s13, s13, s12
 8013aae:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8013ab2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8013ab6:	ed80 7a00 	vstr	s14, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8013aba:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8013abc:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8013ac0:	ee06 3a90 	vmov	s13, r3
 8013ac4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013ac8:	ee76 6a86 	vadd.f32	s13, s13, s12
 8013acc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8013ad0:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8013ad4:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8013ad8:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8013ada:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8013ade:	ee07 3a10 	vmov	s14, r3
 8013ae2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013ae6:	ee37 7a06 	vadd.f32	s14, s14, s12
 8013aea:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8013aee:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8013af2:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8013af6:	4770      	bx	lr
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8013af8:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8013afc:	6083      	str	r3, [r0, #8]
}
 8013afe:	bc30      	pop	{r4, r5}
 8013b00:	4770      	bx	lr
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8013b02:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8013b54 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8013b06:	e7b4      	b.n	8013a72 <HAL_RCCEx_GetPLL2ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013b08:	6813      	ldr	r3, [r2, #0]
 8013b0a:	069b      	lsls	r3, r3, #26
 8013b0c:	d51a      	bpl.n	8013b44 <HAL_RCCEx_GetPLL2ClockFreq+0x114>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8013b0e:	6814      	ldr	r4, [r2, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8013b10:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8013b14:	4910      	ldr	r1, [pc, #64]	; (8013b58 <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
 8013b16:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8013b1a:	6b93      	ldr	r3, [r2, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8013b1c:	40e1      	lsrs	r1, r4
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8013b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013b22:	ee07 1a10 	vmov	s14, r1
 8013b26:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8013b2a:	ee07 3a10 	vmov	s14, r3
 8013b2e:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8013b32:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8013b36:	ee76 7a05 	vadd.f32	s15, s12, s10
 8013b3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013b42:	e7a7      	b.n	8013a94 <HAL_RCCEx_GetPLL2ClockFreq+0x64>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8013b44:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8013b5c <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
 8013b48:	e793      	b.n	8013a72 <HAL_RCCEx_GetPLL2ClockFreq+0x42>
 8013b4a:	bf00      	nop
 8013b4c:	58024400 	.word	0x58024400
 8013b50:	4a742400 	.word	0x4a742400
 8013b54:	4bbebc20 	.word	0x4bbebc20
 8013b58:	03d09000 	.word	0x03d09000
 8013b5c:	4c742400 	.word	0x4c742400

08013b60 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013b60:	4a46      	ldr	r2, [pc, #280]	; (8013c7c <HAL_RCCEx_GetPLL3ClockFreq+0x11c>)
{
 8013b62:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013b64:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8013b66:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8013b68:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8013b6a:	f3c3 5305 	ubfx	r3, r3, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8013b6e:	6c55      	ldr	r5, [r2, #68]	; 0x44
  if (pll3m != 0U)
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d059      	beq.n	8013c28 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8013b74:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8013b78:	f3c1 2100 	ubfx	r1, r1, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013b7c:	f004 0403 	and.w	r4, r4, #3
 8013b80:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8013b84:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 8013b88:	2c01      	cmp	r4, #1
 8013b8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013b8e:	ee06 1a90 	vmov	s13, r1
 8013b92:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8013b96:	d002      	beq.n	8013b9e <HAL_RCCEx_GetPLL3ClockFreq+0x3e>
 8013b98:	d34e      	bcc.n	8013c38 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 8013b9a:	2c02      	cmp	r4, #2
 8013b9c:	d049      	beq.n	8013c32 <HAL_RCCEx_GetPLL3ClockFreq+0xd2>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8013b9e:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8013c80 <HAL_RCCEx_GetPLL3ClockFreq+0x120>
 8013ba2:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8013ba6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8013ba8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013bac:	ee07 3a10 	vmov	s14, r3
 8013bb0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8013bb4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013bb8:	ee37 7a25 	vadd.f32	s14, s14, s11
 8013bbc:	ee77 7a26 	vadd.f32	s15, s14, s13
 8013bc0:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8013bc4:	4a2d      	ldr	r2, [pc, #180]	; (8013c7c <HAL_RCCEx_GetPLL3ClockFreq+0x11c>)
 8013bc6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8013bca:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8013bcc:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8013bd0:	ee06 3a90 	vmov	s13, r3
 8013bd4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 8013bd8:	bc30      	pop	{r4, r5}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8013bda:	ee76 6a86 	vadd.f32	s13, s13, s12
 8013bde:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8013be2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8013be6:	ed80 7a00 	vstr	s14, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8013bea:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8013bec:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8013bf0:	ee06 3a90 	vmov	s13, r3
 8013bf4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013bf8:	ee76 6a86 	vadd.f32	s13, s13, s12
 8013bfc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8013c00:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8013c04:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8013c08:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8013c0a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8013c0e:	ee07 3a10 	vmov	s14, r3
 8013c12:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013c16:	ee37 7a06 	vadd.f32	s14, s14, s12
 8013c1a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8013c1e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8013c22:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8013c26:	4770      	bx	lr
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8013c28:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8013c2c:	6083      	str	r3, [r0, #8]
}
 8013c2e:	bc30      	pop	{r4, r5}
 8013c30:	4770      	bx	lr
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8013c32:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8013c84 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 8013c36:	e7b4      	b.n	8013ba2 <HAL_RCCEx_GetPLL3ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013c38:	6813      	ldr	r3, [r2, #0]
 8013c3a:	069b      	lsls	r3, r3, #26
 8013c3c:	d51a      	bpl.n	8013c74 <HAL_RCCEx_GetPLL3ClockFreq+0x114>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8013c3e:	6814      	ldr	r4, [r2, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8013c40:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8013c44:	4910      	ldr	r1, [pc, #64]	; (8013c88 <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
 8013c46:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8013c4a:	6c13      	ldr	r3, [r2, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8013c4c:	40e1      	lsrs	r1, r4
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8013c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013c52:	ee07 1a10 	vmov	s14, r1
 8013c56:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8013c5a:	ee07 3a10 	vmov	s14, r3
 8013c5e:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8013c62:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8013c66:	ee76 7a05 	vadd.f32	s15, s12, s10
 8013c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013c72:	e7a7      	b.n	8013bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x64>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8013c74:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8013c8c <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
 8013c78:	e793      	b.n	8013ba2 <HAL_RCCEx_GetPLL3ClockFreq+0x42>
 8013c7a:	bf00      	nop
 8013c7c:	58024400 	.word	0x58024400
 8013c80:	4a742400 	.word	0x4a742400
 8013c84:	4bbebc20 	.word	0x4bbebc20
 8013c88:	03d09000 	.word	0x03d09000
 8013c8c:	4c742400 	.word	0x4c742400

08013c90 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013c90:	4a46      	ldr	r2, [pc, #280]	; (8013dac <HAL_RCCEx_GetPLL1ClockFreq+0x11c>)
{
 8013c92:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013c94:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8013c96:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8013c98:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8013c9a:	f3c3 1305 	ubfx	r3, r3, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8013c9e:	6b55      	ldr	r5, [r2, #52]	; 0x34
  if (pll1m != 0U)
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d059      	beq.n	8013d58 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8013ca4:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8013ca8:	f001 0101 	and.w	r1, r1, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8013cac:	f004 0403 	and.w	r4, r4, #3
 8013cb0:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8013cb4:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 8013cb8:	2c01      	cmp	r4, #1
 8013cba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013cbe:	ee06 1a90 	vmov	s13, r1
 8013cc2:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8013cc6:	d002      	beq.n	8013cce <HAL_RCCEx_GetPLL1ClockFreq+0x3e>
 8013cc8:	d34e      	bcc.n	8013d68 <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
 8013cca:	2c02      	cmp	r4, #2
 8013ccc:	d049      	beq.n	8013d62 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8013cce:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8013db0 <HAL_RCCEx_GetPLL1ClockFreq+0x120>
 8013cd2:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8013cd6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8013cd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013cdc:	ee07 3a10 	vmov	s14, r3
 8013ce0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8013ce4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013ce8:	ee37 7a25 	vadd.f32	s14, s14, s11
 8013cec:	ee77 7a26 	vadd.f32	s15, s14, s13
 8013cf0:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8013cf4:	4a2d      	ldr	r2, [pc, #180]	; (8013dac <HAL_RCCEx_GetPLL1ClockFreq+0x11c>)
 8013cf6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8013cfa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8013cfc:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8013d00:	ee06 3a90 	vmov	s13, r3
 8013d04:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 8013d08:	bc30      	pop	{r4, r5}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8013d0a:	ee76 6a86 	vadd.f32	s13, s13, s12
 8013d0e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8013d12:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8013d16:	ed80 7a00 	vstr	s14, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8013d1a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8013d1c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8013d20:	ee06 3a90 	vmov	s13, r3
 8013d24:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013d28:	ee76 6a86 	vadd.f32	s13, s13, s12
 8013d2c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8013d30:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8013d34:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8013d38:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8013d3a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8013d3e:	ee07 3a10 	vmov	s14, r3
 8013d42:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013d46:	ee37 7a06 	vadd.f32	s14, s14, s12
 8013d4a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8013d4e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8013d52:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8013d56:	4770      	bx	lr
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8013d58:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8013d5c:	6083      	str	r3, [r0, #8]
}
 8013d5e:	bc30      	pop	{r4, r5}
 8013d60:	4770      	bx	lr
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8013d62:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8013db4 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 8013d66:	e7b4      	b.n	8013cd2 <HAL_RCCEx_GetPLL1ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013d68:	6813      	ldr	r3, [r2, #0]
 8013d6a:	069b      	lsls	r3, r3, #26
 8013d6c:	d51a      	bpl.n	8013da4 <HAL_RCCEx_GetPLL1ClockFreq+0x114>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8013d6e:	6814      	ldr	r4, [r2, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8013d70:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8013d74:	4910      	ldr	r1, [pc, #64]	; (8013db8 <HAL_RCCEx_GetPLL1ClockFreq+0x128>)
 8013d76:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8013d7a:	6b13      	ldr	r3, [r2, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8013d7c:	40e1      	lsrs	r1, r4
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8013d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013d82:	ee07 1a10 	vmov	s14, r1
 8013d86:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8013d8a:	ee07 3a10 	vmov	s14, r3
 8013d8e:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8013d92:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8013d96:	ee76 7a05 	vadd.f32	s15, s12, s10
 8013d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013da2:	e7a7      	b.n	8013cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x64>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8013da4:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8013dbc <HAL_RCCEx_GetPLL1ClockFreq+0x12c>
 8013da8:	e793      	b.n	8013cd2 <HAL_RCCEx_GetPLL1ClockFreq+0x42>
 8013daa:	bf00      	nop
 8013dac:	58024400 	.word	0x58024400
 8013db0:	4a742400 	.word	0x4a742400
 8013db4:	4bbebc20 	.word	0x4bbebc20
 8013db8:	03d09000 	.word	0x03d09000
 8013dbc:	4c742400 	.word	0x4c742400

08013dc0 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8013dc0:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 8013dc4:	b500      	push	{lr}
 8013dc6:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8013dc8:	d02d      	beq.n	8013e26 <HAL_RCCEx_GetPeriphCLKFreq+0x66>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8013dca:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8013dce:	d018      	beq.n	8013e02 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8013dd0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8013dd4:	d04e      	beq.n	8013e74 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8013dd6:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8013dda:	d037      	beq.n	8013e4c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8013ddc:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8013de0:	f000 808b 	beq.w	8013efa <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8013de4:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8013de8:	f000 80ac 	beq.w	8013f44 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8013dec:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8013df0:	f000 80b6 	beq.w	8013f60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8013df4:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8013df8:	d062      	beq.n	8013ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
          frequency = 0;
 8013dfa:	2000      	movs	r0, #0
}
 8013dfc:	b005      	add	sp, #20
 8013dfe:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8013e02:	4a70      	ldr	r2, [pc, #448]	; (8013fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8013e04:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8013e06:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 8013e0a:	2b80      	cmp	r3, #128	; 0x80
 8013e0c:	d043      	beq.n	8013e96 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8013e0e:	d86a      	bhi.n	8013ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d039      	beq.n	8013e88 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 8013e14:	2b40      	cmp	r3, #64	; 0x40
 8013e16:	d1f0      	bne.n	8013dfa <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013e18:	a801      	add	r0, sp, #4
 8013e1a:	f7ff fe09 	bl	8013a30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8013e1e:	9801      	ldr	r0, [sp, #4]
}
 8013e20:	b005      	add	sp, #20
 8013e22:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8013e26:	4b67      	ldr	r3, [pc, #412]	; (8013fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8013e28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013e2a:	f003 0307 	and.w	r3, r3, #7
      switch (saiclocksource)
 8013e2e:	2b04      	cmp	r3, #4
 8013e30:	d8e3      	bhi.n	8013dfa <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8013e32:	a201      	add	r2, pc, #4	; (adr r2, 8013e38 <HAL_RCCEx_GetPeriphCLKFreq+0x78>)
 8013e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e38:	08013e89 	.word	0x08013e89
 8013e3c:	08013e19 	.word	0x08013e19
 8013e40:	08013e97 	.word	0x08013e97
 8013e44:	08013e6d 	.word	0x08013e6d
 8013e48:	08013ea5 	.word	0x08013ea5
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8013e4c:	4a5d      	ldr	r2, [pc, #372]	; (8013fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8013e4e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8013e50:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 8013e54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8013e58:	d01d      	beq.n	8013e96 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8013e5a:	d85c      	bhi.n	8013f16 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
 8013e5c:	b1a3      	cbz	r3, 8013e88 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 8013e5e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8013e62:	d0d9      	beq.n	8013e18 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 8013e64:	e7c9      	b.n	8013dfa <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (saiclocksource)
 8013e66:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8013e6a:	d15b      	bne.n	8013f24 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
          frequency = EXTERNAL_CLOCK_VALUE;
 8013e6c:	4856      	ldr	r0, [pc, #344]	; (8013fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
}
 8013e6e:	b005      	add	sp, #20
 8013e70:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8013e74:	4a53      	ldr	r2, [pc, #332]	; (8013fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8013e76:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8013e78:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 8013e7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8013e80:	d009      	beq.n	8013e96 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8013e82:	d8f0      	bhi.n	8013e66 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	d151      	bne.n	8013f2c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8013e88:	a801      	add	r0, sp, #4
 8013e8a:	f7ff ff01 	bl	8013c90 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013e8e:	9802      	ldr	r0, [sp, #8]
}
 8013e90:	b005      	add	sp, #20
 8013e92:	f85d fb04 	ldr.w	pc, [sp], #4
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013e96:	a801      	add	r0, sp, #4
 8013e98:	f7ff fe62 	bl	8013b60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8013e9c:	9801      	ldr	r0, [sp, #4]
}
 8013e9e:	b005      	add	sp, #20
 8013ea0:	f85d fb04 	ldr.w	pc, [sp], #4
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8013ea4:	4b47      	ldr	r3, [pc, #284]	; (8013fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8013ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8013ea8:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8013eac:	d019      	beq.n	8013ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8013eae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8013eb2:	d062      	beq.n	8013f7a <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
            frequency = HSE_VALUE;
 8013eb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013eb8:	4844      	ldr	r0, [pc, #272]	; (8013fcc <HAL_RCCEx_GetPeriphCLKFreq+0x20c>)
 8013eba:	bf18      	it	ne
 8013ebc:	2000      	movne	r0, #0
 8013ebe:	e79d      	b.n	8013dfc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8013ec0:	4b40      	ldr	r3, [pc, #256]	; (8013fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8013ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013ec4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 8013ec8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013ecc:	d068      	beq.n	8013fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8013ece:	d95b      	bls.n	8013f88 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>
 8013ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013ed4:	d051      	beq.n	8013f7a <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 8013ed6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8013eda:	d05f      	beq.n	8013f9c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 8013edc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8013ee0:	d18b      	bne.n	8013dfa <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
            frequency = HSI_VALUE;
 8013ee2:	483b      	ldr	r0, [pc, #236]	; (8013fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x210>)
 8013ee4:	e78a      	b.n	8013dfc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      switch (saiclocksource)
 8013ee6:	2bc0      	cmp	r3, #192	; 0xc0
 8013ee8:	d0c0      	beq.n	8013e6c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 8013eea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013eee:	d184      	bne.n	8013dfa <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8013ef0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8013ef2:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8013ef6:	d1da      	bne.n	8013eae <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 8013ef8:	e7f3      	b.n	8013ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8013efa:	4a32      	ldr	r2, [pc, #200]	; (8013fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8013efc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8013efe:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 8013f02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013f06:	d0c6      	beq.n	8013e96 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8013f08:	d815      	bhi.n	8013f36 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d0bc      	beq.n	8013e88 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 8013f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013f12:	d081      	beq.n	8013e18 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 8013f14:	e771      	b.n	8013dfa <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (saiclocksource)
 8013f16:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8013f1a:	d0a7      	beq.n	8013e6c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 8013f1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8013f20:	d0e6      	beq.n	8013ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8013f22:	e76a      	b.n	8013dfa <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (saiclocksource)
 8013f24:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8013f28:	d0e2      	beq.n	8013ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8013f2a:	e766      	b.n	8013dfa <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8013f2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013f30:	f43f af72 	beq.w	8013e18 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 8013f34:	e761      	b.n	8013dfa <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (srcclk)
 8013f36:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8013f3a:	d097      	beq.n	8013e6c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 8013f3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013f40:	d0d6      	beq.n	8013ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8013f42:	e75a      	b.n	8013dfa <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8013f44:	4a1f      	ldr	r2, [pc, #124]	; (8013fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8013f46:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8013f48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 8013f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013f50:	d015      	beq.n	8013f7e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8013f52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8013f56:	d0cb      	beq.n	8013ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	f47f af4e 	bne.w	8013dfa <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8013f5e:	e75b      	b.n	8013e18 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8013f60:	4b18      	ldr	r3, [pc, #96]	; (8013fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8013f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      switch (srcclk)
 8013f64:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8013f68:	d08e      	beq.n	8013e88 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	f43f af45 	beq.w	8013dfa <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013f70:	a801      	add	r0, sp, #4
 8013f72:	f7ff fd5d 	bl	8013a30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8013f76:	9803      	ldr	r0, [sp, #12]
          break;
 8013f78:	e740      	b.n	8013dfc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
            frequency = CSI_VALUE;
 8013f7a:	4816      	ldr	r0, [pc, #88]	; (8013fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x214>)
 8013f7c:	e73e      	b.n	8013dfc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013f7e:	a801      	add	r0, sp, #4
 8013f80:	f7ff fdee 	bl	8013b60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8013f84:	9803      	ldr	r0, [sp, #12]
          break;
 8013f86:	e739      	b.n	8013dfc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      switch (srcclk)
 8013f88:	b17b      	cbz	r3, 8013faa <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8013f8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8013f8e:	f47f af34 	bne.w	8013dfa <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013f92:	a801      	add	r0, sp, #4
 8013f94:	f7ff fd4c 	bl	8013a30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8013f98:	9802      	ldr	r0, [sp, #8]
          break;
 8013f9a:	e72f      	b.n	8013dfc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          frequency = HSE_VALUE;
 8013f9c:	480b      	ldr	r0, [pc, #44]	; (8013fcc <HAL_RCCEx_GetPeriphCLKFreq+0x20c>)
          break;
 8013f9e:	e72d      	b.n	8013dfc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013fa0:	a801      	add	r0, sp, #4
 8013fa2:	f7ff fddd 	bl	8013b60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8013fa6:	9802      	ldr	r0, [sp, #8]
          break;
 8013fa8:	e728      	b.n	8013dfc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8013faa:	f7fe fbe7 	bl	801277c <HAL_RCC_GetHCLKFreq>
 8013fae:	4b05      	ldr	r3, [pc, #20]	; (8013fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8013fb0:	4a09      	ldr	r2, [pc, #36]	; (8013fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x218>)
 8013fb2:	6a1b      	ldr	r3, [r3, #32]
 8013fb4:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8013fb8:	5cd3      	ldrb	r3, [r2, r3]
 8013fba:	f003 031f 	and.w	r3, r3, #31
 8013fbe:	40d8      	lsrs	r0, r3
          break;
 8013fc0:	e71c      	b.n	8013dfc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8013fc2:	bf00      	nop
 8013fc4:	58024400 	.word	0x58024400
 8013fc8:	00bb8000 	.word	0x00bb8000
 8013fcc:	017d7840 	.word	0x017d7840
 8013fd0:	03d09000 	.word	0x03d09000
 8013fd4:	003d0900 	.word	0x003d0900
 8013fd8:	080bf274 	.word	0x080bf274

08013fdc <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8013fdc:	b380      	cbz	r0, 8014040 <HAL_RNG_Init+0x64>
{
 8013fde:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8013fe0:	7a43      	ldrb	r3, [r0, #9]
 8013fe2:	4604      	mov	r4, r0
 8013fe4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8013fe8:	b333      	cbz	r3, 8014038 <HAL_RNG_Init+0x5c>
    HAL_RNG_MspInit(hrng);
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8013fea:	2202      	movs	r2, #2
      return HAL_ERROR;
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8013fec:	e9d4 3100 	ldrd	r3, r1, [r4]
  hrng->State = HAL_RNG_STATE_BUSY;
 8013ff0:	7262      	strb	r2, [r4, #9]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8013ff2:	681a      	ldr	r2, [r3, #0]
 8013ff4:	f022 0220 	bic.w	r2, r2, #32
 8013ff8:	430a      	orrs	r2, r1
 8013ffa:	601a      	str	r2, [r3, #0]
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8013ffc:	681a      	ldr	r2, [r3, #0]
 8013ffe:	f042 0204 	orr.w	r2, r2, #4
 8014002:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8014004:	685b      	ldr	r3, [r3, #4]
 8014006:	065b      	lsls	r3, r3, #25
 8014008:	d503      	bpl.n	8014012 <HAL_RNG_Init+0x36>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 801400a:	2304      	movs	r3, #4
    return HAL_ERROR;
 801400c:	2001      	movs	r0, #1
    hrng->State = HAL_RNG_STATE_ERROR;
 801400e:	7263      	strb	r3, [r4, #9]
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
 8014010:	bd38      	pop	{r3, r4, r5, pc}
  tickstart = HAL_GetTick();
 8014012:	f7f9 fca5 	bl	800d960 <HAL_GetTick>
 8014016:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8014018:	e004      	b.n	8014024 <HAL_RNG_Init+0x48>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 801401a:	f7f9 fca1 	bl	800d960 <HAL_GetTick>
 801401e:	1b40      	subs	r0, r0, r5
 8014020:	2802      	cmp	r0, #2
 8014022:	d80f      	bhi.n	8014044 <HAL_RNG_Init+0x68>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8014024:	6823      	ldr	r3, [r4, #0]
 8014026:	685b      	ldr	r3, [r3, #4]
 8014028:	f013 0304 	ands.w	r3, r3, #4
 801402c:	d1f5      	bne.n	801401a <HAL_RNG_Init+0x3e>
  hrng->State = HAL_RNG_STATE_READY;
 801402e:	2201      	movs	r2, #1
  return HAL_OK;
 8014030:	4618      	mov	r0, r3
  hrng->State = HAL_RNG_STATE_READY;
 8014032:	7262      	strb	r2, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8014034:	60e3      	str	r3, [r4, #12]
}
 8014036:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 8014038:	7202      	strb	r2, [r0, #8]
    HAL_RNG_MspInit(hrng);
 801403a:	f7f2 fcf3 	bl	8006a24 <HAL_RNG_MspInit>
 801403e:	e7d4      	b.n	8013fea <HAL_RNG_Init+0xe>
    return HAL_ERROR;
 8014040:	2001      	movs	r0, #1
}
 8014042:	4770      	bx	lr
      hrng->State = HAL_RNG_STATE_ERROR;
 8014044:	2204      	movs	r2, #4
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8014046:	2302      	movs	r3, #2
      return HAL_ERROR;
 8014048:	2001      	movs	r0, #1
      hrng->State = HAL_RNG_STATE_ERROR;
 801404a:	7262      	strb	r2, [r4, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 801404c:	60e3      	str	r3, [r4, #12]
}
 801404e:	bd38      	pop	{r3, r4, r5, pc}

08014050 <HAL_RNG_DeInit>:
#if defined(RNG_CR_CONDRST)
  uint32_t tickstart;

#endif /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8014050:	b1b0      	cbz	r0, 8014080 <HAL_RNG_DeInit+0x30>
    }
  }

#else
  /* Clear Clock Error Detection bit */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CED);
 8014052:	6803      	ldr	r3, [r0, #0]
 8014054:	681a      	ldr	r2, [r3, #0]
 8014056:	f022 0220 	bic.w	r2, r2, #32
{
 801405a:	b510      	push	{r4, lr}
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CED);
 801405c:	601a      	str	r2, [r3, #0]
 801405e:	4604      	mov	r4, r0
#endif /* RNG_CR_CONDRST */
  /* Disable the RNG Peripheral */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_IE | RNG_CR_RNGEN);
 8014060:	681a      	ldr	r2, [r3, #0]
 8014062:	f022 020c 	bic.w	r2, r2, #12
 8014066:	601a      	str	r2, [r3, #0]

  /* Clear RNG interrupt status flags */
  CLEAR_BIT(hrng->Instance->SR, RNG_SR_CEIS | RNG_SR_SEIS);
 8014068:	685a      	ldr	r2, [r3, #4]
 801406a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801406e:	605a      	str	r2, [r3, #4]

  /* DeInit the low level hardware */
  hrng->MspDeInitCallback(hrng);
#else
  /* DeInit the low level hardware */
  HAL_RNG_MspDeInit(hrng);
 8014070:	f7f2 fcf6 	bl	8006a60 <HAL_RNG_MspDeInit>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Update the RNG state */
  hrng->State = HAL_RNG_STATE_RESET;
 8014074:	2300      	movs	r3, #0
 8014076:	7263      	strb	r3, [r4, #9]

  /* Release Lock */
  __HAL_UNLOCK(hrng);

  /* Return the function status */
  return HAL_OK;
 8014078:	4618      	mov	r0, r3
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 801407a:	60e3      	str	r3, [r4, #12]
  __HAL_UNLOCK(hrng);
 801407c:	7223      	strb	r3, [r4, #8]
}
 801407e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8014080:	2001      	movs	r0, #1
}
 8014082:	4770      	bx	lr

08014084 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8014084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 8014086:	7a03      	ldrb	r3, [r0, #8]
 8014088:	2b01      	cmp	r3, #1
 801408a:	d00b      	beq.n	80140a4 <HAL_RNG_GenerateRandomNumber+0x20>
 801408c:	4604      	mov	r4, r0
 801408e:	2001      	movs	r0, #1
 8014090:	460e      	mov	r6, r1

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8014092:	7a63      	ldrb	r3, [r4, #9]
  __HAL_LOCK(hrng);
 8014094:	7220      	strb	r0, [r4, #8]
  if (hrng->State == HAL_RNG_STATE_READY)
 8014096:	4283      	cmp	r3, r0
 8014098:	d006      	beq.n	80140a8 <HAL_RNG_GenerateRandomNumber+0x24>

    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 801409a:	2304      	movs	r3, #4
 801409c:	60e3      	str	r3, [r4, #12]
    status = HAL_ERROR;
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 801409e:	2300      	movs	r3, #0
 80140a0:	7223      	strb	r3, [r4, #8]

  return status;
}
 80140a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hrng);
 80140a4:	2002      	movs	r0, #2
}
 80140a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 80140a8:	2302      	movs	r3, #2
 80140aa:	7263      	strb	r3, [r4, #9]
    tickstart = HAL_GetTick();
 80140ac:	f7f9 fc58 	bl	800d960 <HAL_GetTick>
 80140b0:	4607      	mov	r7, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80140b2:	e004      	b.n	80140be <HAL_RNG_GenerateRandomNumber+0x3a>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80140b4:	f7f9 fc54 	bl	800d960 <HAL_GetTick>
 80140b8:	1bc0      	subs	r0, r0, r7
 80140ba:	2802      	cmp	r0, #2
 80140bc:	d80b      	bhi.n	80140d6 <HAL_RNG_GenerateRandomNumber+0x52>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80140be:	6822      	ldr	r2, [r4, #0]
 80140c0:	6855      	ldr	r5, [r2, #4]
 80140c2:	f015 0501 	ands.w	r5, r5, #1
 80140c6:	d0f5      	beq.n	80140b4 <HAL_RNG_GenerateRandomNumber+0x30>
    hrng->RandomNumber = hrng->Instance->DR;
 80140c8:	6893      	ldr	r3, [r2, #8]
    hrng->State = HAL_RNG_STATE_READY;
 80140ca:	2201      	movs	r2, #1
  HAL_StatusTypeDef status = HAL_OK;
 80140cc:	2000      	movs	r0, #0
    hrng->RandomNumber = hrng->Instance->DR;
 80140ce:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
 80140d0:	6033      	str	r3, [r6, #0]
    hrng->State = HAL_RNG_STATE_READY;
 80140d2:	7262      	strb	r2, [r4, #9]
 80140d4:	e7e3      	b.n	801409e <HAL_RNG_GenerateRandomNumber+0x1a>
        hrng->State = HAL_RNG_STATE_READY;
 80140d6:	2001      	movs	r0, #1
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80140d8:	2302      	movs	r3, #2
        __HAL_UNLOCK(hrng);
 80140da:	7225      	strb	r5, [r4, #8]
        hrng->State = HAL_RNG_STATE_READY;
 80140dc:	7260      	strb	r0, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80140de:	60e3      	str	r3, [r4, #12]
}
 80140e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140e2:	bf00      	nop

080140e4 <HAL_SAI_MspInit>:
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_MspInit could be implemented in the user file
   */
}
 80140e4:	4770      	bx	lr
 80140e6:	bf00      	nop

080140e8 <HAL_SAI_Init>:
  if (hsai == NULL)
 80140e8:	b330      	cbz	r0, 8014138 <HAL_SAI_Init+0x50>
{
 80140ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140ec:	4604      	mov	r4, r0
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 80140ee:	f7f9 fc4f 	bl	800d990 <HAL_GetREVID>
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80140f2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 80140f6:	6822      	ldr	r2, [r4, #0]
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80140f8:	2b01      	cmp	r3, #1
 80140fa:	d058      	beq.n	80141ae <HAL_SAI_Init+0xc6>
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80140fc:	4baf      	ldr	r3, [pc, #700]	; (80143bc <HAL_SAI_Init+0x2d4>)
 80140fe:	429a      	cmp	r2, r3
 8014100:	d01c      	beq.n	801413c <HAL_SAI_Init+0x54>
 8014102:	3320      	adds	r3, #32
 8014104:	429a      	cmp	r2, r3
 8014106:	d019      	beq.n	801413c <HAL_SAI_Init+0x54>
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8014108:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 801410c:	429a      	cmp	r2, r3
 801410e:	d05b      	beq.n	80141c8 <HAL_SAI_Init+0xe0>
 8014110:	3320      	adds	r3, #32
 8014112:	429a      	cmp	r2, r3
 8014114:	d058      	beq.n	80141c8 <HAL_SAI_Init+0xe0>
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8014116:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 801411a:	429a      	cmp	r2, r3
 801411c:	f000 8189 	beq.w	8014432 <HAL_SAI_Init+0x34a>
 8014120:	3320      	adds	r3, #32
 8014122:	429a      	cmp	r2, r3
 8014124:	f000 8185 	beq.w	8014432 <HAL_SAI_Init+0x34a>
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8014128:	4ba5      	ldr	r3, [pc, #660]	; (80143c0 <HAL_SAI_Init+0x2d8>)
 801412a:	429a      	cmp	r2, r3
 801412c:	d002      	beq.n	8014134 <HAL_SAI_Init+0x4c>
 801412e:	3320      	adds	r3, #32
 8014130:	429a      	cmp	r2, r3
 8014132:	d147      	bne.n	80141c4 <HAL_SAI_Init+0xdc>
    SaiBaseAddress = SAI4;
 8014134:	4da3      	ldr	r5, [pc, #652]	; (80143c4 <HAL_SAI_Init+0x2dc>)
 8014136:	e002      	b.n	801413e <HAL_SAI_Init+0x56>
    return HAL_ERROR;
 8014138:	2001      	movs	r0, #1
}
 801413a:	4770      	bx	lr
    SaiBaseAddress = SAI1;
 801413c:	4da2      	ldr	r5, [pc, #648]	; (80143c8 <HAL_SAI_Init+0x2e0>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 801413e:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 8014142:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8014146:	2b00      	cmp	r3, #0
 8014148:	d045      	beq.n	80141d6 <HAL_SAI_Init+0xee>
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 801414a:	4ba0      	ldr	r3, [pc, #640]	; (80143cc <HAL_SAI_Init+0x2e4>)
 801414c:	48a0      	ldr	r0, [pc, #640]	; (80143d0 <HAL_SAI_Init+0x2e8>)
 801414e:	6819      	ldr	r1, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8014150:	6813      	ldr	r3, [r2, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8014152:	fba0 0101 	umull	r0, r1, r0, r1
  __HAL_SAI_DISABLE(hsai);
 8014156:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 801415a:	0b09      	lsrs	r1, r1, #12
  __HAL_SAI_DISABLE(hsai);
 801415c:	6013      	str	r3, [r2, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 801415e:	008b      	lsls	r3, r1, #2
 8014160:	b919      	cbnz	r1, 801416a <HAL_SAI_Init+0x82>
 8014162:	e106      	b.n	8014372 <HAL_SAI_Init+0x28a>
 8014164:	2b00      	cmp	r3, #0
 8014166:	f000 8104 	beq.w	8014372 <HAL_SAI_Init+0x28a>
      status = HAL_TIMEOUT;
      break;
    }
    count--;
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 801416a:	6811      	ldr	r1, [r2, #0]
    count--;
 801416c:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 801416e:	03c9      	lsls	r1, r1, #15
 8014170:	d4f8      	bmi.n	8014164 <HAL_SAI_Init+0x7c>
  switch (hsai->Init.SynchroExt)
 8014172:	68e3      	ldr	r3, [r4, #12]
  hsai->State = HAL_SAI_STATE_BUSY;
 8014174:	2102      	movs	r1, #2
  switch (hsai->Init.SynchroExt)
 8014176:	2b01      	cmp	r3, #1
  hsai->State = HAL_SAI_STATE_BUSY;
 8014178:	f884 1091 	strb.w	r1, [r4, #145]	; 0x91
  switch (hsai->Init.SynchroExt)
 801417c:	f000 8154 	beq.w	8014428 <HAL_SAI_Init+0x340>
 8014180:	428b      	cmp	r3, r1
 8014182:	bf15      	itete	ne
 8014184:	460e      	movne	r6, r1
 8014186:	2023      	moveq	r0, #35	; 0x23
 8014188:	2003      	movne	r0, #3
 801418a:	2622      	moveq	r6, #34	; 0x22
 801418c:	bf0b      	itete	eq
 801418e:	2721      	moveq	r7, #33	; 0x21
 8014190:	2701      	movne	r7, #1
 8014192:	2120      	moveq	r1, #32
 8014194:	2100      	movne	r1, #0
  switch (hsai->Init.Synchro)
 8014196:	68a3      	ldr	r3, [r4, #8]
 8014198:	3b01      	subs	r3, #1
 801419a:	2b04      	cmp	r3, #4
 801419c:	f200 8152 	bhi.w	8014444 <HAL_SAI_Init+0x35c>
 80141a0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80141a4:	00210149 	.word	0x00210149
 80141a8:	0020014c 	.word	0x0020014c
 80141ac:	0160      	.short	0x0160
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 80141ae:	4b83      	ldr	r3, [pc, #524]	; (80143bc <HAL_SAI_Init+0x2d4>)
 80141b0:	429a      	cmp	r2, r3
 80141b2:	f000 80e6 	beq.w	8014382 <HAL_SAI_Init+0x29a>
 80141b6:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 80141ba:	f5a3 3382 	sub.w	r3, r3, #66560	; 0x10400
 80141be:	429a      	cmp	r2, r3
 80141c0:	f000 80df 	beq.w	8014382 <HAL_SAI_Init+0x29a>
    return HAL_ERROR;
 80141c4:	2001      	movs	r0, #1
}
 80141c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (hsai->State == HAL_SAI_STATE_RESET)
 80141c8:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
    SaiBaseAddress = SAI2;
 80141cc:	4d81      	ldr	r5, [pc, #516]	; (80143d4 <HAL_SAI_Init+0x2ec>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 80141ce:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d1b9      	bne.n	801414a <HAL_SAI_Init+0x62>
    hsai->Lock = HAL_UNLOCKED;
 80141d6:	f884 1090 	strb.w	r1, [r4, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
 80141da:	4620      	mov	r0, r4
 80141dc:	f7ff ff82 	bl	80140e4 <HAL_SAI_MspInit>
 80141e0:	6822      	ldr	r2, [r4, #0]
 80141e2:	e7b2      	b.n	801414a <HAL_SAI_Init+0x62>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 80141e4:	4631      	mov	r1, r6
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80141e6:	f44f 6600 	mov.w	r6, #2048	; 0x800
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80141ea:	6a23      	ldr	r3, [r4, #32]
  SaiBaseAddress->GCR = tmpregisterGCR;
 80141ec:	6029      	str	r1, [r5, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	d04a      	beq.n	8014288 <HAL_SAI_Init+0x1a0>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80141f2:	4b72      	ldr	r3, [pc, #456]	; (80143bc <HAL_SAI_Init+0x2d4>)
 80141f4:	429a      	cmp	r2, r3
 80141f6:	f000 8139 	beq.w	801446c <HAL_SAI_Init+0x384>
 80141fa:	4877      	ldr	r0, [pc, #476]	; (80143d8 <HAL_SAI_Init+0x2f0>)
 80141fc:	1a10      	subs	r0, r2, r0
 80141fe:	fab0 f080 	clz	r0, r0
 8014202:	0940      	lsrs	r0, r0, #5
 8014204:	2800      	cmp	r0, #0
 8014206:	f040 8131 	bne.w	801446c <HAL_SAI_Init+0x384>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 801420a:	4b74      	ldr	r3, [pc, #464]	; (80143dc <HAL_SAI_Init+0x2f4>)
 801420c:	429a      	cmp	r2, r3
 801420e:	f000 8139 	beq.w	8014484 <HAL_SAI_Init+0x39c>
 8014212:	3320      	adds	r3, #32
 8014214:	429a      	cmp	r2, r3
 8014216:	f000 8135 	beq.w	8014484 <HAL_SAI_Init+0x39c>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 801421a:	4b71      	ldr	r3, [pc, #452]	; (80143e0 <HAL_SAI_Init+0x2f8>)
 801421c:	429a      	cmp	r2, r3
 801421e:	f000 812b 	beq.w	8014478 <HAL_SAI_Init+0x390>
 8014222:	3320      	adds	r3, #32
 8014224:	429a      	cmp	r2, r3
 8014226:	f000 8127 	beq.w	8014478 <HAL_SAI_Init+0x390>
    if (hsai->Instance == SAI4_Block_A)
 801422a:	4b65      	ldr	r3, [pc, #404]	; (80143c0 <HAL_SAI_Init+0x2d8>)
 801422c:	429a      	cmp	r2, r3
 801422e:	f000 8134 	beq.w	801449a <HAL_SAI_Init+0x3b2>
    if (hsai->Instance == SAI4_Block_B)
 8014232:	4b6c      	ldr	r3, [pc, #432]	; (80143e4 <HAL_SAI_Init+0x2fc>)
 8014234:	429a      	cmp	r2, r3
 8014236:	f000 812b 	beq.w	8014490 <HAL_SAI_Init+0x3a8>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 801423a:	69a3      	ldr	r3, [r4, #24]
 801423c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801423e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8014242:	f000 8101 	beq.w	8014448 <HAL_SAI_Init+0x360>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8014246:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8014248:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801424c:	6a22      	ldr	r2, [r4, #32]
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 801424e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8014252:	ea4f 0340 	mov.w	r3, r0, lsl #1
 8014256:	ea4f 2002 	mov.w	r0, r2, lsl #8
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 801425a:	bf14      	ite	ne
 801425c:	2201      	movne	r2, #1
 801425e:	2202      	moveq	r2, #2
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8014260:	fb02 f200 	mul.w	r2, r2, r0
 8014264:	fbb3 f3f2 	udiv	r3, r3, r2
    hsai->Init.Mckdiv = tmpval / 10U;
 8014268:	4a5f      	ldr	r2, [pc, #380]	; (80143e8 <HAL_SAI_Init+0x300>)
 801426a:	fba2 0203 	umull	r0, r2, r2, r3
 801426e:	08d2      	lsrs	r2, r2, #3
    if ((tmpval % 10U) > 8U)
 8014270:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 8014274:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 8014278:	2b09      	cmp	r3, #9
      hsai->Init.Mckdiv += 1U;
 801427a:	bf08      	it	eq
 801427c:	3201      	addeq	r2, #1
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 801427e:	2904      	cmp	r1, #4
      hsai->Init.Mckdiv += 1U;
 8014280:	6262      	str	r2, [r4, #36]	; 0x24
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8014282:	d101      	bne.n	8014288 <HAL_SAI_Init+0x1a0>
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8014284:	0852      	lsrs	r2, r2, #1
 8014286:	6262      	str	r2, [r4, #36]	; 0x24
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8014288:	6862      	ldr	r2, [r4, #4]
 801428a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801428c:	f032 0702 	bics.w	r7, r2, #2
 8014290:	f040 80c4 	bne.w	801441c <HAL_SAI_Init+0x334>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8014294:	2b01      	cmp	r3, #1
 8014296:	bf18      	it	ne
 8014298:	f44f 7700 	movne.w	r7, #512	; 0x200
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 801429c:	f7f9 fb78 	bl	800d990 <HAL_GetREVID>
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80142a0:	6863      	ldr	r3, [r4, #4]
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 80142a2:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80142a6:	e9d4 1211 	ldrd	r1, r2, [r4, #68]	; 0x44
 80142aa:	ea43 0301 	orr.w	r3, r3, r1
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 80142ae:	f0c0 80a3 	bcc.w	80143f8 <HAL_SAI_Init+0x310>
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80142b2:	431a      	orrs	r2, r3
 80142b4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80142b6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80142b8:	431a      	orrs	r2, r3
 80142ba:	69a0      	ldr	r0, [r4, #24]
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80142bc:	6823      	ldr	r3, [r4, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80142be:	430a      	orrs	r2, r1
 80142c0:	6961      	ldr	r1, [r4, #20]
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80142c2:	f8d3 c000 	ldr.w	ip, [r3]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80142c6:	430a      	orrs	r2, r1
 80142c8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80142ca:	4302      	orrs	r2, r0
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80142cc:	4847      	ldr	r0, [pc, #284]	; (80143ec <HAL_SAI_Init+0x304>)
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80142ce:	430a      	orrs	r2, r1
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80142d0:	ea00 000c 	and.w	r0, r0, ip
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80142d4:	6921      	ldr	r1, [r4, #16]
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80142d6:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80142da:	6018      	str	r0, [r3, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80142dc:	430a      	orrs	r2, r1
 80142de:	6819      	ldr	r1, [r3, #0]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80142e0:	f24f 0020 	movw	r0, #61472	; 0xf020
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80142e4:	430a      	orrs	r2, r1
 80142e6:	ea42 520c 	orr.w	r2, r2, ip, lsl #20
 80142ea:	4332      	orrs	r2, r6
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80142ec:	4e40      	ldr	r6, [pc, #256]	; (80143f0 <HAL_SAI_Init+0x308>)
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80142ee:	433a      	orrs	r2, r7
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80142f0:	4f40      	ldr	r7, [pc, #256]	; (80143f4 <HAL_SAI_Init+0x30c>)
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80142f2:	601a      	str	r2, [r3, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80142f4:	6859      	ldr	r1, [r3, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80142f6:	69e2      	ldr	r2, [r4, #28]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80142f8:	400e      	ands	r6, r1
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80142fa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80142fc:	4311      	orrs	r1, r2
 80142fe:	6b62      	ldr	r2, [r4, #52]	; 0x34
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8014300:	605e      	str	r6, [r3, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8014302:	4311      	orrs	r1, r2
 8014304:	685e      	ldr	r6, [r3, #4]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8014306:	6e62      	ldr	r2, [r4, #100]	; 0x64
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8014308:	4331      	orrs	r1, r6
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 801430a:	6de6      	ldr	r6, [r4, #92]	; 0x5c
 801430c:	4332      	orrs	r2, r6
 801430e:	6e26      	ldr	r6, [r4, #96]	; 0x60
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8014310:	6059      	str	r1, [r3, #4]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8014312:	4332      	orrs	r2, r6
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8014314:	6899      	ldr	r1, [r3, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8014316:	6d66      	ldr	r6, [r4, #84]	; 0x54
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8014318:	400f      	ands	r7, r1
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 801431a:	6da1      	ldr	r1, [r4, #88]	; 0x58
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 801431c:	3e01      	subs	r6, #1
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 801431e:	3901      	subs	r1, #1
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8014320:	609f      	str	r7, [r3, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8014322:	4332      	orrs	r2, r6
 8014324:	689e      	ldr	r6, [r3, #8]
 8014326:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 801432a:	6ea1      	ldr	r1, [r4, #104]	; 0x68
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 801432c:	4332      	orrs	r2, r6
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 801432e:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8014330:	609a      	str	r2, [r3, #8]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8014332:	ea41 0206 	orr.w	r2, r1, r6
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8014336:	68d9      	ldr	r1, [r3, #12]
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8014338:	6f66      	ldr	r6, [r4, #116]	; 0x74
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 801433a:	4008      	ands	r0, r1
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 801433c:	6f21      	ldr	r1, [r4, #112]	; 0x70
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 801433e:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8014342:	4e1e      	ldr	r6, [pc, #120]	; (80143bc <HAL_SAI_Init+0x2d4>)
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8014344:	3901      	subs	r1, #1
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8014346:	60d8      	str	r0, [r3, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8014348:	68d8      	ldr	r0, [r3, #12]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 801434a:	42b3      	cmp	r3, r6
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 801434c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8014350:	ea42 0200 	orr.w	r2, r2, r0
 8014354:	60da      	str	r2, [r3, #12]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8014356:	d01d      	beq.n	8014394 <HAL_SAI_Init+0x2ac>
 8014358:	4a19      	ldr	r2, [pc, #100]	; (80143c0 <HAL_SAI_Init+0x2d8>)
 801435a:	4293      	cmp	r3, r2
 801435c:	d01a      	beq.n	8014394 <HAL_SAI_Init+0x2ac>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 801435e:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
 8014360:	2201      	movs	r2, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8014362:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  return HAL_OK;
 8014366:	4618      	mov	r0, r3
  __HAL_UNLOCK(hsai);
 8014368:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
  hsai->State = HAL_SAI_STATE_READY;
 801436c:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
}
 8014370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8014372:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    return HAL_ERROR;
 8014376:	2001      	movs	r0, #1
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8014378:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801437c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
 8014380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8014382:	6863      	ldr	r3, [r4, #4]
 8014384:	2b01      	cmp	r3, #1
 8014386:	f47f af1d 	bne.w	80141c4 <HAL_SAI_Init+0xdc>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 801438a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801438c:	2b00      	cmp	r3, #0
 801438e:	f43f aeb5 	beq.w	80140fc <HAL_SAI_Init+0x14>
 8014392:	e717      	b.n	80141c4 <HAL_SAI_Init+0xdc>
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8014394:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8014396:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 801439a:	f023 0301 	bic.w	r3, r3, #1
    if (hsai->Init.PdmInit.Activation == ENABLE)
 801439e:	2a01      	cmp	r2, #1
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 80143a0:	646b      	str	r3, [r5, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 80143a2:	d1dc      	bne.n	801435e <HAL_SAI_Init+0x276>
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80143a4:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 80143a8:	3a01      	subs	r2, #1
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80143aa:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80143ae:	646b      	str	r3, [r5, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 80143b0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80143b2:	f043 0301 	orr.w	r3, r3, #1
 80143b6:	646b      	str	r3, [r5, #68]	; 0x44
 80143b8:	e7d1      	b.n	801435e <HAL_SAI_Init+0x276>
 80143ba:	bf00      	nop
 80143bc:	40015804 	.word	0x40015804
 80143c0:	58005404 	.word	0x58005404
 80143c4:	58005400 	.word	0x58005400
 80143c8:	40015800 	.word	0x40015800
 80143cc:	24007290 	.word	0x24007290
 80143d0:	95cbec1b 	.word	0x95cbec1b
 80143d4:	40015c00 	.word	0x40015c00
 80143d8:	40015824 	.word	0x40015824
 80143dc:	40015c04 	.word	0x40015c04
 80143e0:	40016004 	.word	0x40016004
 80143e4:	58005424 	.word	0x58005424
 80143e8:	cccccccd 	.word	0xcccccccd
 80143ec:	f005c010 	.word	0xf005c010
 80143f0:	ffff1ff0 	.word	0xffff1ff0
 80143f4:	fff88000 	.word	0xfff88000
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80143f8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80143fa:	431a      	orrs	r2, r3
 80143fc:	6960      	ldr	r0, [r4, #20]
 80143fe:	430a      	orrs	r2, r1
 8014400:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8014402:	6823      	ldr	r3, [r4, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8014404:	430a      	orrs	r2, r1
 8014406:	69a1      	ldr	r1, [r4, #24]
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8014408:	f8d3 c000 	ldr.w	ip, [r3]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 801440c:	4302      	orrs	r2, r0
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 801440e:	4828      	ldr	r0, [pc, #160]	; (80144b0 <HAL_SAI_Init+0x3c8>)
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8014410:	430a      	orrs	r2, r1
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8014412:	ea00 000c 	and.w	r0, r0, ip
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8014416:	e9d4 c109 	ldrd	ip, r1, [r4, #36]	; 0x24
 801441a:	e75e      	b.n	80142da <HAL_SAI_Init+0x1f2>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 801441c:	2b01      	cmp	r3, #1
 801441e:	bf14      	ite	ne
 8014420:	2700      	movne	r7, #0
 8014422:	f44f 7700 	moveq.w	r7, #512	; 0x200
 8014426:	e739      	b.n	801429c <HAL_SAI_Init+0x1b4>
  switch (hsai->Init.SynchroExt)
 8014428:	2013      	movs	r0, #19
 801442a:	2612      	movs	r6, #18
 801442c:	2711      	movs	r7, #17
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 801442e:	2110      	movs	r1, #16
 8014430:	e6b1      	b.n	8014196 <HAL_SAI_Init+0xae>
    SaiBaseAddress = SAI3;
 8014432:	4d20      	ldr	r5, [pc, #128]	; (80144b4 <HAL_SAI_Init+0x3cc>)
 8014434:	e683      	b.n	801413e <HAL_SAI_Init+0x56>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8014436:	f44f 6680 	mov.w	r6, #1024	; 0x400
 801443a:	e6d6      	b.n	80141ea <HAL_SAI_Init+0x102>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 801443c:	4639      	mov	r1, r7
      syncen_bits = SAI_xCR1_SYNCEN_1;
 801443e:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8014442:	e6d2      	b.n	80141ea <HAL_SAI_Init+0x102>
      syncen_bits = 0;
 8014444:	2600      	movs	r6, #0
 8014446:	e6d0      	b.n	80141ea <HAL_SAI_Init+0x102>
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8014448:	2904      	cmp	r1, #4
 801444a:	d02c      	beq.n	80144a6 <HAL_SAI_Init+0x3be>
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 801444c:	2908      	cmp	r1, #8
 801444e:	d02c      	beq.n	80144aa <HAL_SAI_Init+0x3c2>
        tmpframelength = hsai->FrameInit.FrameLength;
 8014450:	6d67      	ldr	r7, [r4, #84]	; 0x54
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8014452:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8014456:	6a22      	ldr	r2, [r4, #32]
 8014458:	0043      	lsls	r3, r0, #1
 801445a:	fb02 f207 	mul.w	r2, r2, r7
 801445e:	fbb3 f3f2 	udiv	r3, r3, r2
 8014462:	e701      	b.n	8014268 <HAL_SAI_Init+0x180>
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8014464:	4601      	mov	r1, r0
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8014466:	f44f 6600 	mov.w	r6, #2048	; 0x800
 801446a:	e6be      	b.n	80141ea <HAL_SAI_Init+0x102>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 801446c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8014470:	f7ff fca6 	bl	8013dc0 <HAL_RCCEx_GetPeriphCLKFreq>
 8014474:	6822      	ldr	r2, [r4, #0]
 8014476:	e6c8      	b.n	801420a <HAL_SAI_Init+0x122>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8014478:	f44f 7000 	mov.w	r0, #512	; 0x200
 801447c:	f7ff fca0 	bl	8013dc0 <HAL_RCCEx_GetPeriphCLKFreq>
 8014480:	6822      	ldr	r2, [r4, #0]
 8014482:	e6d2      	b.n	801422a <HAL_SAI_Init+0x142>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8014484:	f44f 7000 	mov.w	r0, #512	; 0x200
 8014488:	f7ff fc9a 	bl	8013dc0 <HAL_RCCEx_GetPeriphCLKFreq>
 801448c:	6822      	ldr	r2, [r4, #0]
 801448e:	e6c4      	b.n	801421a <HAL_SAI_Init+0x132>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8014490:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8014494:	f7ff fc94 	bl	8013dc0 <HAL_RCCEx_GetPeriphCLKFreq>
 8014498:	e6cf      	b.n	801423a <HAL_SAI_Init+0x152>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 801449a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 801449e:	f7ff fc8f 	bl	8013dc0 <HAL_RCCEx_GetPeriphCLKFreq>
 80144a2:	6822      	ldr	r2, [r4, #0]
 80144a4:	e6c5      	b.n	8014232 <HAL_SAI_Init+0x14a>
        tmpframelength = 64U;
 80144a6:	2740      	movs	r7, #64	; 0x40
 80144a8:	e7d3      	b.n	8014452 <HAL_SAI_Init+0x36a>
        tmpframelength = 256U;
 80144aa:	f44f 7780 	mov.w	r7, #256	; 0x100
 80144ae:	e7d0      	b.n	8014452 <HAL_SAI_Init+0x36a>
 80144b0:	f805c010 	.word	0xf805c010
 80144b4:	40016000 	.word	0x40016000

080144b8 <HAL_SAI_DMAStop>:
{
 80144b8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hsai);
 80144ba:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
 80144be:	2b01      	cmp	r3, #1
 80144c0:	d061      	beq.n	8014586 <HAL_SAI_DMAStop+0xce>
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80144c2:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hsai);
 80144c4:	2501      	movs	r5, #1
 80144c6:	4604      	mov	r4, r0
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80144c8:	6813      	ldr	r3, [r2, #0]
  __HAL_LOCK(hsai);
 80144ca:	f880 5090 	strb.w	r5, [r0, #144]	; 0x90
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80144ce:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80144d2:	6013      	str	r3, [r2, #0]
  if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 80144d4:	f890 3091 	ldrb.w	r3, [r0, #145]	; 0x91
 80144d8:	2b12      	cmp	r3, #18
 80144da:	d040      	beq.n	801455e <HAL_SAI_DMAStop+0xa6>
  HAL_StatusTypeDef status = HAL_OK;
 80144dc:	2500      	movs	r5, #0
  if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 80144de:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 80144e2:	2b22      	cmp	r3, #34	; 0x22
 80144e4:	d026      	beq.n	8014534 <HAL_SAI_DMAStop+0x7c>
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80144e6:	4a29      	ldr	r2, [pc, #164]	; (801458c <HAL_SAI_DMAStop+0xd4>)
 80144e8:	4b29      	ldr	r3, [pc, #164]	; (8014590 <HAL_SAI_DMAStop+0xd8>)
 80144ea:	6811      	ldr	r1, [r2, #0]
  __HAL_SAI_DISABLE(hsai);
 80144ec:	6822      	ldr	r2, [r4, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80144ee:	fba3 3101 	umull	r3, r1, r3, r1
  __HAL_SAI_DISABLE(hsai);
 80144f2:	6810      	ldr	r0, [r2, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80144f4:	0b09      	lsrs	r1, r1, #12
  __HAL_SAI_DISABLE(hsai);
 80144f6:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    if (count == 0U)
 80144fa:	008b      	lsls	r3, r1, #2
  __HAL_SAI_DISABLE(hsai);
 80144fc:	6010      	str	r0, [r2, #0]
    if (count == 0U)
 80144fe:	b909      	cbnz	r1, 8014504 <HAL_SAI_DMAStop+0x4c>
 8014500:	e010      	b.n	8014524 <HAL_SAI_DMAStop+0x6c>
 8014502:	b17b      	cbz	r3, 8014524 <HAL_SAI_DMAStop+0x6c>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8014504:	6811      	ldr	r1, [r2, #0]
    count--;
 8014506:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8014508:	03c9      	lsls	r1, r1, #15
 801450a:	d4fa      	bmi.n	8014502 <HAL_SAI_DMAStop+0x4a>
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 801450c:	6853      	ldr	r3, [r2, #4]
  hsai->State = HAL_SAI_STATE_READY;
 801450e:	2001      	movs	r0, #1
  __HAL_UNLOCK(hsai);
 8014510:	2100      	movs	r1, #0
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8014512:	f043 0308 	orr.w	r3, r3, #8
 8014516:	6053      	str	r3, [r2, #4]
  hsai->State = HAL_SAI_STATE_READY;
 8014518:	f884 0091 	strb.w	r0, [r4, #145]	; 0x91
}
 801451c:	4628      	mov	r0, r5
  __HAL_UNLOCK(hsai);
 801451e:	f884 1090 	strb.w	r1, [r4, #144]	; 0x90
}
 8014522:	bd38      	pop	{r3, r4, r5, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8014524:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    status = HAL_ERROR;
 8014528:	2501      	movs	r5, #1
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 801452a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801452e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8014532:	e7eb      	b.n	801450c <HAL_SAI_DMAStop+0x54>
  if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 8014534:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8014538:	2800      	cmp	r0, #0
 801453a:	d0d4      	beq.n	80144e6 <HAL_SAI_DMAStop+0x2e>
    if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 801453c:	f7fa fb62 	bl	800ec04 <HAL_DMA_Abort>
 8014540:	2800      	cmp	r0, #0
 8014542:	d0d0      	beq.n	80144e6 <HAL_SAI_DMAStop+0x2e>
      if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8014544:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8014548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801454a:	2b80      	cmp	r3, #128	; 0x80
 801454c:	d0cb      	beq.n	80144e6 <HAL_SAI_DMAStop+0x2e>
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 801454e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
        status = HAL_ERROR;
 8014552:	2501      	movs	r5, #1
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8014554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014558:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 801455c:	e7c3      	b.n	80144e6 <HAL_SAI_DMAStop+0x2e>
  if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 801455e:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8014562:	2800      	cmp	r0, #0
 8014564:	d0ba      	beq.n	80144dc <HAL_SAI_DMAStop+0x24>
    if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8014566:	f7fa fb4d 	bl	800ec04 <HAL_DMA_Abort>
 801456a:	2800      	cmp	r0, #0
 801456c:	d0b6      	beq.n	80144dc <HAL_SAI_DMAStop+0x24>
      if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 801456e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8014572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014574:	2b80      	cmp	r3, #128	; 0x80
 8014576:	d0b1      	beq.n	80144dc <HAL_SAI_DMAStop+0x24>
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8014578:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 801457c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014580:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8014584:	e7ab      	b.n	80144de <HAL_SAI_DMAStop+0x26>
  __HAL_LOCK(hsai);
 8014586:	2502      	movs	r5, #2
}
 8014588:	4628      	mov	r0, r5
 801458a:	bd38      	pop	{r3, r4, r5, pc}
 801458c:	24007290 	.word	0x24007290
 8014590:	95cbec1b 	.word	0x95cbec1b

08014594 <HAL_SAI_Transmit_DMA>:
{
 8014594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014598:	460f      	mov	r7, r1
 801459a:	4604      	mov	r4, r0
 801459c:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 801459e:	f7f9 f9df 	bl	800d960 <HAL_GetTick>
  if ((pData == NULL) || (Size == 0U))
 80145a2:	2f00      	cmp	r7, #0
 80145a4:	d05f      	beq.n	8014666 <HAL_SAI_Transmit_DMA+0xd2>
 80145a6:	fab8 f588 	clz	r5, r8
 80145aa:	096d      	lsrs	r5, r5, #5
 80145ac:	2d00      	cmp	r5, #0
 80145ae:	d15a      	bne.n	8014666 <HAL_SAI_Transmit_DMA+0xd2>
  if (hsai->State == HAL_SAI_STATE_READY)
 80145b0:	f894 6091 	ldrb.w	r6, [r4, #145]	; 0x91
 80145b4:	b2f6      	uxtb	r6, r6
 80145b6:	2e01      	cmp	r6, #1
 80145b8:	d151      	bne.n	801465e <HAL_SAI_Transmit_DMA+0xca>
    __HAL_LOCK(hsai);
 80145ba:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 80145be:	2b01      	cmp	r3, #1
 80145c0:	d04d      	beq.n	801465e <HAL_SAI_Transmit_DMA+0xca>
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80145c2:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80145c6:	4681      	mov	r9, r0
 80145c8:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 80146a0 <HAL_SAI_Transmit_DMA+0x10c>
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80145cc:	2012      	movs	r0, #18
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80145ce:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80145d2:	4639      	mov	r1, r7
    hsai->pBuffPtr = pData;
 80145d4:	67a7      	str	r7, [r4, #120]	; 0x78
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80145d6:	4643      	mov	r3, r8
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80145d8:	f884 0091 	strb.w	r0, [r4, #145]	; 0x91
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80145dc:	4610      	mov	r0, r2
    __HAL_LOCK(hsai);
 80145de:	f884 6090 	strb.w	r6, [r4, #144]	; 0x90
    hsai->XferSize = Size;
 80145e2:	f8a4 807c 	strh.w	r8, [r4, #124]	; 0x7c
    hsai->XferCount = Size;
 80145e6:	f8a4 807e 	strh.w	r8, [r4, #126]	; 0x7e
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 80145ea:	4f2c      	ldr	r7, [pc, #176]	; (801469c <HAL_SAI_Transmit_DMA+0x108>)
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80145ec:	f8c2 c040 	str.w	ip, [r2, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 80145f0:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 80146a4 <HAL_SAI_Transmit_DMA+0x110>
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 80145f4:	64d7      	str	r7, [r2, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
 80145f6:	6515      	str	r5, [r2, #80]	; 0x50
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 80145f8:	f8c2 c03c 	str.w	ip, [r2, #60]	; 0x3c
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80145fc:	6822      	ldr	r2, [r4, #0]
 80145fe:	321c      	adds	r2, #28
 8014600:	f7fa f942 	bl	800e888 <HAL_DMA_Start_IT>
 8014604:	4607      	mov	r7, r0
 8014606:	2800      	cmp	r0, #0
 8014608:	d131      	bne.n	801466e <HAL_SAI_Transmit_DMA+0xda>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 801460a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 801460c:	6863      	ldr	r3, [r4, #4]
 801460e:	2a08      	cmp	r2, #8
 8014610:	d03b      	beq.n	801468a <HAL_SAI_Transmit_DMA+0xf6>
 8014612:	2005      	movs	r0, #5
 8014614:	2161      	movs	r1, #97	; 0x61
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8014616:	6822      	ldr	r2, [r4, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8014618:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_WCKCFG;
 801461a:	2b01      	cmp	r3, #1
 801461c:	bf88      	it	hi
 801461e:	4601      	movhi	r1, r0
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8014620:	6913      	ldr	r3, [r2, #16]
 8014622:	430b      	orrs	r3, r1
 8014624:	6113      	str	r3, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8014626:	6813      	ldr	r3, [r2, #0]
 8014628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801462c:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 801462e:	e007      	b.n	8014640 <HAL_SAI_Transmit_DMA+0xac>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8014630:	f7f9 f996 	bl	800d960 <HAL_GetTick>
 8014634:	eba0 0009 	sub.w	r0, r0, r9
 8014638:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 801463c:	d81b      	bhi.n	8014676 <HAL_SAI_Transmit_DMA+0xe2>
 801463e:	6822      	ldr	r2, [r4, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8014640:	6955      	ldr	r5, [r2, #20]
 8014642:	f415 25e0 	ands.w	r5, r5, #458752	; 0x70000
 8014646:	d0f3      	beq.n	8014630 <HAL_SAI_Transmit_DMA+0x9c>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8014648:	6813      	ldr	r3, [r2, #0]
 801464a:	03db      	lsls	r3, r3, #15
 801464c:	d403      	bmi.n	8014656 <HAL_SAI_Transmit_DMA+0xc2>
      __HAL_SAI_ENABLE(hsai);
 801464e:	6813      	ldr	r3, [r2, #0]
 8014650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014654:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
 8014656:	2300      	movs	r3, #0
 8014658:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    return HAL_OK;
 801465c:	e000      	b.n	8014660 <HAL_SAI_Transmit_DMA+0xcc>
    return HAL_BUSY;
 801465e:	2702      	movs	r7, #2
}
 8014660:	4638      	mov	r0, r7
 8014662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return  HAL_ERROR;
 8014666:	2701      	movs	r7, #1
}
 8014668:	4638      	mov	r0, r7
 801466a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      __HAL_UNLOCK(hsai);
 801466e:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
      return  HAL_ERROR;
 8014672:	4637      	mov	r7, r6
 8014674:	e7f4      	b.n	8014660 <HAL_SAI_Transmit_DMA+0xcc>
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8014676:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
        return HAL_TIMEOUT;
 801467a:	2703      	movs	r7, #3
        __HAL_UNLOCK(hsai);
 801467c:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8014680:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014684:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
        return HAL_TIMEOUT;
 8014688:	e7ea      	b.n	8014660 <HAL_SAI_Transmit_DMA+0xcc>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 801468a:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 801468e:	2a01      	cmp	r2, #1
 8014690:	bf0b      	itete	eq
 8014692:	2015      	moveq	r0, #21
 8014694:	2005      	movne	r0, #5
 8014696:	2171      	moveq	r1, #113	; 0x71
 8014698:	2161      	movne	r1, #97	; 0x61
 801469a:	e7bc      	b.n	8014616 <HAL_SAI_Transmit_DMA+0x82>
 801469c:	08014715 	.word	0x08014715
 80146a0:	08014709 	.word	0x08014709
 80146a4:	080146a9 	.word	0x080146a9

080146a8 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80146a8:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80146aa:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80146ac:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80146ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80146b2:	d019      	beq.n	80146e8 <SAI_DMATxCplt+0x40>
  {
    hsai->XferCount = 0;

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80146b4:	6803      	ldr	r3, [r0, #0]
    hsai->XferCount = 0;
 80146b6:	2200      	movs	r2, #0
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80146b8:	6c44      	ldr	r4, [r0, #68]	; 0x44
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80146ba:	6819      	ldr	r1, [r3, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80146bc:	2c08      	cmp	r4, #8
    hsai->XferCount = 0;
 80146be:	f8a0 207e 	strh.w	r2, [r0, #126]	; 0x7e
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80146c2:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
 80146c6:	6842      	ldr	r2, [r0, #4]
 80146c8:	6019      	str	r1, [r3, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80146ca:	d010      	beq.n	80146ee <SAI_DMATxCplt+0x46>
 80146cc:	f06f 0461 	mvn.w	r4, #97	; 0x61
 80146d0:	f06f 0505 	mvn.w	r5, #5
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80146d4:	3a02      	subs	r2, #2

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80146d6:	6919      	ldr	r1, [r3, #16]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80146d8:	2a01      	cmp	r2, #1
 80146da:	bf88      	it	hi
 80146dc:	462c      	movhi	r4, r5

    hsai->State = HAL_SAI_STATE_READY;
 80146de:	2501      	movs	r5, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80146e0:	4021      	ands	r1, r4
 80146e2:	6119      	str	r1, [r3, #16]
    hsai->State = HAL_SAI_STATE_READY;
 80146e4:	f880 5091 	strb.w	r5, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 80146e8:	f7f7 f808 	bl	800b6fc <HAL_SAI_TxCpltCallback>
#endif
}
 80146ec:	bd38      	pop	{r3, r4, r5, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80146ee:	f022 0102 	bic.w	r1, r2, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80146f2:	2901      	cmp	r1, #1
 80146f4:	bf0b      	itete	eq
 80146f6:	f06f 0471 	mvneq.w	r4, #113	; 0x71
 80146fa:	f06f 0461 	mvnne.w	r4, #97	; 0x61
 80146fe:	f06f 0515 	mvneq.w	r5, #21
 8014702:	f06f 0505 	mvnne.w	r5, #5
 8014706:	e7e5      	b.n	80146d4 <SAI_DMATxCplt+0x2c>

08014708 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8014708:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 801470a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801470c:	f7f6 fffc 	bl	800b708 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 8014710:	bd08      	pop	{r3, pc}
 8014712:	bf00      	nop

08014714 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8014714:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8014716:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8014718:	f7fa fff8 	bl	800f70c <HAL_DMA_GetError>
 801471c:	2802      	cmp	r0, #2
 801471e:	d025      	beq.n	801476c <SAI_DMAError+0x58>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8014720:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8014724:	6822      	ldr	r2, [r4, #0]
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8014726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 801472a:	4914      	ldr	r1, [pc, #80]	; (801477c <SAI_DMAError+0x68>)
 801472c:	4814      	ldr	r0, [pc, #80]	; (8014780 <SAI_DMAError+0x6c>)
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 801472e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8014732:	6813      	ldr	r3, [r2, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8014734:	6809      	ldr	r1, [r1, #0]
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8014736:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 801473a:	fba0 0101 	umull	r0, r1, r0, r1
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 801473e:	6013      	str	r3, [r2, #0]
  __HAL_SAI_DISABLE(hsai);
 8014740:	6810      	ldr	r0, [r2, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8014742:	0b09      	lsrs	r1, r1, #12
  __HAL_SAI_DISABLE(hsai);
 8014744:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    if (count == 0U)
 8014748:	008b      	lsls	r3, r1, #2
  __HAL_SAI_DISABLE(hsai);
 801474a:	6010      	str	r0, [r2, #0]
    if (count == 0U)
 801474c:	b909      	cbnz	r1, 8014752 <SAI_DMAError+0x3e>
 801474e:	e00e      	b.n	801476e <SAI_DMAError+0x5a>
 8014750:	b16b      	cbz	r3, 801476e <SAI_DMAError+0x5a>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8014752:	6811      	ldr	r1, [r2, #0]
    count--;
 8014754:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8014756:	03c9      	lsls	r1, r1, #15
 8014758:	d4fa      	bmi.n	8014750 <SAI_DMAError+0x3c>
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 801475a:	2201      	movs	r2, #1

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 801475c:	2300      	movs	r3, #0

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 801475e:	4620      	mov	r0, r4
    hsai->State = HAL_SAI_STATE_READY;
 8014760:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
    hsai->XferCount = 0U;
 8014764:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
    HAL_SAI_ErrorCallback(hsai);
 8014768:	f7f6 ffd6 	bl	800b718 <HAL_SAI_ErrorCallback>
#endif
  }
}
 801476c:	bd10      	pop	{r4, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 801476e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8014772:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014776:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 801477a:	e7ee      	b.n	801475a <SAI_DMAError+0x46>
 801477c:	24007290 	.word	0x24007290
 8014780:	95cbec1b 	.word	0x95cbec1b

08014784 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8014784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014788:	4605      	mov	r5, r0
 801478a:	b087      	sub	sp, #28
 801478c:	460f      	mov	r7, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 801478e:	f7f9 f8e7 	bl	800d960 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8014792:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 8014794:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8014796:	6828      	ldr	r0, [r5, #0]
 8014798:	f002 f826 	bl	80167e8 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 801479c:	4604      	mov	r4, r0
 801479e:	b118      	cbz	r0, 80147a8 <SD_FindSCR+0x24>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 80147a0:	4620      	mov	r0, r4
 80147a2:	b007      	add	sp, #28
 80147a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80147a8:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 80147aa:	6828      	ldr	r0, [r5, #0]
 80147ac:	0409      	lsls	r1, r1, #16
 80147ae:	f002 fa87 	bl	8016cc0 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 80147b2:	4604      	mov	r4, r0
 80147b4:	2800      	cmp	r0, #0
 80147b6:	d1f3      	bne.n	80147a0 <SD_FindSCR+0x1c>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80147b8:	f04f 32ff 	mov.w	r2, #4294967295
  config.DataLength    = 8U;
 80147bc:	2308      	movs	r3, #8
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80147be:	2130      	movs	r1, #48	; 0x30
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80147c0:	9004      	str	r0, [sp, #16]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80147c2:	9200      	str	r2, [sp, #0]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80147c4:	2202      	movs	r2, #2
  config.DataLength    = 8U;
 80147c6:	9301      	str	r3, [sp, #4]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80147c8:	2301      	movs	r3, #1
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80147ca:	9102      	str	r1, [sp, #8]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80147cc:	4669      	mov	r1, sp
 80147ce:	6828      	ldr	r0, [r5, #0]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80147d0:	9203      	str	r2, [sp, #12]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80147d2:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80147d4:	f001 fff2 	bl	80167bc <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80147d8:	6828      	ldr	r0, [r5, #0]
 80147da:	f002 fb2d 	bl	8016e38 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 80147de:	4604      	mov	r4, r0
 80147e0:	2800      	cmp	r0, #0
 80147e2:	d1dd      	bne.n	80147a0 <SD_FindSCR+0x1c>
  uint32_t index = 0U;
 80147e4:	4681      	mov	r9, r0
  uint32_t tempscr[2U] = {0UL, 0UL};
 80147e6:	4683      	mov	fp, r0
 80147e8:	4682      	mov	sl, r0
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 80147ea:	f240 582a 	movw	r8, #1322	; 0x52a
 80147ee:	e004      	b.n	80147fa <SD_FindSCR+0x76>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80147f0:	f7f9 f8b6 	bl	800d960 <HAL_GetTick>
 80147f4:	1b80      	subs	r0, r0, r6
 80147f6:	3001      	adds	r0, #1
 80147f8:	d025      	beq.n	8014846 <SD_FindSCR+0xc2>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 80147fa:	6828      	ldr	r0, [r5, #0]
 80147fc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80147fe:	ea13 0f08 	tst.w	r3, r8
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8014802:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8014804:	d10e      	bne.n	8014824 <SD_FindSCR+0xa0>
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8014806:	031b      	lsls	r3, r3, #12
 8014808:	d4f2      	bmi.n	80147f0 <SD_FindSCR+0x6c>
 801480a:	f1b9 0f00 	cmp.w	r9, #0
 801480e:	d1ef      	bne.n	80147f0 <SD_FindSCR+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8014810:	f001 ffb2 	bl	8016778 <SDMMC_ReadFIFO>
 8014814:	4682      	mov	sl, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8014816:	6828      	ldr	r0, [r5, #0]
      index++;
 8014818:	f04f 0901 	mov.w	r9, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 801481c:	f001 ffac 	bl	8016778 <SDMMC_ReadFIFO>
 8014820:	4683      	mov	fp, r0
 8014822:	e7e5      	b.n	80147f0 <SD_FindSCR+0x6c>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8014824:	0719      	lsls	r1, r3, #28
 8014826:	d411      	bmi.n	801484c <SD_FindSCR+0xc8>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8014828:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801482a:	079a      	lsls	r2, r3, #30
 801482c:	d411      	bmi.n	8014852 <SD_FindSCR+0xce>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 801482e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8014830:	069b      	lsls	r3, r3, #26
 8014832:	d411      	bmi.n	8014858 <SD_FindSCR+0xd4>
 8014834:	fa9b f28b 	rev.w	r2, fp
 8014838:	fa9a f38a 	rev.w	r3, sl
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801483c:	4908      	ldr	r1, [pc, #32]	; (8014860 <SD_FindSCR+0xdc>)
 801483e:	6381      	str	r1, [r0, #56]	; 0x38
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8014840:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_SD_ERROR_NONE;
 8014844:	e7ac      	b.n	80147a0 <SD_FindSCR+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
 8014846:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801484a:	e7a9      	b.n	80147a0 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 801484c:	2408      	movs	r4, #8
 801484e:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8014850:	e7a6      	b.n	80147a0 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8014852:	2402      	movs	r4, #2
 8014854:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8014856:	e7a3      	b.n	80147a0 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8014858:	2420      	movs	r4, #32
 801485a:	6384      	str	r4, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 801485c:	e7a0      	b.n	80147a0 <SD_FindSCR+0x1c>
 801485e:	bf00      	nop
 8014860:	18000f3a 	.word	0x18000f3a

08014864 <SD_HighSpeed>:
  *         of PLL to have SDMMCCK clock between 50 and 120 MHz
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SD_HighSpeed(SD_HandleTypeDef *hsd)
{
 8014864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  SDMMC_DataInitTypeDef sdmmc_datainitstructure;
  uint32_t SD_hs[16]  = {0};
 8014868:	2640      	movs	r6, #64	; 0x40
{
 801486a:	b096      	sub	sp, #88	; 0x58
 801486c:	4604      	mov	r4, r0
  uint32_t SD_hs[16]  = {0};
 801486e:	2100      	movs	r1, #0
 8014870:	4632      	mov	r2, r6
 8014872:	a806      	add	r0, sp, #24
 8014874:	f011 fc91 	bl	802619a <memset>
  uint32_t count, loop = 0 ;
  uint32_t Timeout = HAL_GetTick();
 8014878:	f7f9 f872 	bl	800d960 <HAL_GetTick>

  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 801487c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801487e:	b13b      	cbz	r3, 8014890 <SD_HighSpeed+0x2c>
  {
     /* Standard Speed Card <= 12.5Mhz  */
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
  }

  if(hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8014880:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014884:	d00a      	beq.n	801489c <SD_HighSpeed+0x38>
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8014886:	2500      	movs	r5, #0
    }

  }

  return errorstate;
}
 8014888:	4628      	mov	r0, r5
 801488a:	b016      	add	sp, #88	; 0x58
 801488c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8014890:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
}
 8014894:	4628      	mov	r0, r5
 8014896:	b016      	add	sp, #88	; 0x58
 8014898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hsd->Instance->DCTRL = 0;
 801489c:	2300      	movs	r3, #0
 801489e:	4607      	mov	r7, r0
 80148a0:	6820      	ldr	r0, [r4, #0]
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80148a2:	4631      	mov	r1, r6
    hsd->Instance->DCTRL = 0;
 80148a4:	62c3      	str	r3, [r0, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80148a6:	f001 ff9f 	bl	80167e8 <SDMMC_CmdBlockLength>
    if (errorstate != HAL_SD_ERROR_NONE)
 80148aa:	4605      	mov	r5, r0
 80148ac:	2800      	cmp	r0, #0
 80148ae:	d1eb      	bne.n	8014888 <SD_HighSpeed+0x24>
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 80148b0:	f04f 33ff 	mov.w	r3, #4294967295
    sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B ;
 80148b4:	2160      	movs	r1, #96	; 0x60
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80148b6:	2202      	movs	r2, #2
    sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80148b8:	9004      	str	r0, [sp, #16]
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 80148ba:	9300      	str	r3, [sp, #0]
    sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 80148bc:	2301      	movs	r3, #1
    sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B ;
 80148be:	9102      	str	r1, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure);
 80148c0:	4669      	mov	r1, sp
 80148c2:	6820      	ldr	r0, [r4, #0]
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80148c4:	9203      	str	r2, [sp, #12]
    sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 80148c6:	9305      	str	r3, [sp, #20]
    sdmmc_datainitstructure.DataLength    = 64U;
 80148c8:	9601      	str	r6, [sp, #4]
    (void)SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure);
 80148ca:	f001 ff77 	bl	80167bc <SDMMC_ConfigData>
    errorstate = SDMMC_CmdSwitch(hsd->Instance,SDMMC_SDR25_SWITCH_PATTERN);
 80148ce:	4925      	ldr	r1, [pc, #148]	; (8014964 <SD_HighSpeed+0x100>)
 80148d0:	6820      	ldr	r0, [r4, #0]
 80148d2:	f002 fc4d 	bl	8017170 <SDMMC_CmdSwitch>
    if(errorstate != HAL_SD_ERROR_NONE)
 80148d6:	4605      	mov	r5, r0
 80148d8:	2800      	cmp	r0, #0
 80148da:	d1d5      	bne.n	8014888 <SD_HighSpeed+0x24>
  uint32_t count, loop = 0 ;
 80148dc:	4682      	mov	sl, r0
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 80148de:	f240 592a 	movw	r9, #1322	; 0x52a
 80148e2:	e004      	b.n	80148ee <SD_HighSpeed+0x8a>
      if((HAL_GetTick()-Timeout) >=  SDMMC_DATATIMEOUT)
 80148e4:	f7f9 f83c 	bl	800d960 <HAL_GetTick>
 80148e8:	1bc0      	subs	r0, r0, r7
 80148ea:	3001      	adds	r0, #1
 80148ec:	d02a      	beq.n	8014944 <SD_HighSpeed+0xe0>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 80148ee:	6820      	ldr	r0, [r4, #0]
 80148f0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80148f2:	ea13 0f09 	tst.w	r3, r9
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80148f6:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 80148f8:	d113      	bne.n	8014922 <SD_HighSpeed+0xbe>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80148fa:	041e      	lsls	r6, r3, #16
 80148fc:	d5f2      	bpl.n	80148e4 <SD_HighSpeed+0x80>
 80148fe:	ea4f 184a 	mov.w	r8, sl, lsl #5
 8014902:	ab06      	add	r3, sp, #24
 8014904:	eb03 0608 	add.w	r6, r3, r8
 8014908:	ab0e      	add	r3, sp, #56	; 0x38
 801490a:	4498      	add	r8, r3
 801490c:	e000      	b.n	8014910 <SD_HighSpeed+0xac>
 801490e:	6820      	ldr	r0, [r4, #0]
          SD_hs[(8U*loop)+count]  = SDMMC_ReadFIFO(hsd->Instance);
 8014910:	f001 ff32 	bl	8016778 <SDMMC_ReadFIFO>
 8014914:	f846 0b04 	str.w	r0, [r6], #4
        for (count = 0U; count < 8U; count++)
 8014918:	4546      	cmp	r6, r8
 801491a:	d1f8      	bne.n	801490e <SD_HighSpeed+0xaa>
        loop ++;
 801491c:	f10a 0a01 	add.w	sl, sl, #1
 8014920:	e7e0      	b.n	80148e4 <SD_HighSpeed+0x80>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8014922:	071c      	lsls	r4, r3, #28
 8014924:	d415      	bmi.n	8014952 <SD_HighSpeed+0xee>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8014926:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8014928:	0799      	lsls	r1, r3, #30
 801492a:	d415      	bmi.n	8014958 <SD_HighSpeed+0xf4>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 801492c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801492e:	069a      	lsls	r2, r3, #26
 8014930:	d415      	bmi.n	801495e <SD_HighSpeed+0xfa>
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 8014932:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8014936:	4a0c      	ldr	r2, [pc, #48]	; (8014968 <SD_HighSpeed+0x104>)
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 8014938:	079b      	lsls	r3, r3, #30
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801493a:	6382      	str	r2, [r0, #56]	; 0x38
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 801493c:	d4a3      	bmi.n	8014886 <SD_HighSpeed+0x22>
      errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 801493e:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8014942:	e7a1      	b.n	8014888 <SD_HighSpeed+0x24>
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8014944:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
        hsd->State= HAL_SD_STATE_READY;
 8014948:	2301      	movs	r3, #1
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 801494a:	63a5      	str	r5, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 801494c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_SD_ERROR_TIMEOUT;
 8014950:	e79a      	b.n	8014888 <SD_HighSpeed+0x24>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8014952:	2308      	movs	r3, #8
 8014954:	6383      	str	r3, [r0, #56]	; 0x38
      return errorstate;
 8014956:	e797      	b.n	8014888 <SD_HighSpeed+0x24>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8014958:	2502      	movs	r5, #2
 801495a:	6385      	str	r5, [r0, #56]	; 0x38
      return errorstate;
 801495c:	e794      	b.n	8014888 <SD_HighSpeed+0x24>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 801495e:	2520      	movs	r5, #32
 8014960:	6385      	str	r5, [r0, #56]	; 0x38
      return errorstate;
 8014962:	e791      	b.n	8014888 <SD_HighSpeed+0x24>
 8014964:	80ffff01 	.word	0x80ffff01
 8014968:	18000f3a 	.word	0x18000f3a

0801496c <HAL_SD_MspInit>:
 801496c:	4770      	bx	lr
 801496e:	bf00      	nop

08014970 <HAL_SD_MspDeInit>:
 8014970:	4770      	bx	lr
 8014972:	bf00      	nop

08014974 <HAL_SD_ReadBlocks>:
{
 8014974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014978:	460d      	mov	r5, r1
 801497a:	b086      	sub	sp, #24
 801497c:	4604      	mov	r4, r0
 801497e:	4690      	mov	r8, r2
 8014980:	461e      	mov	r6, r3
  uint32_t tickstart = HAL_GetTick();
 8014982:	f7f8 ffed 	bl	800d960 <HAL_GetTick>
  if(NULL == pData)
 8014986:	2d00      	cmp	r5, #0
 8014988:	d071      	beq.n	8014a6e <HAL_SD_ReadBlocks+0xfa>
 801498a:	4607      	mov	r7, r0
  if(hsd->State == HAL_SD_STATE_READY)
 801498c:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8014990:	b2c0      	uxtb	r0, r0
 8014992:	2801      	cmp	r0, #1
 8014994:	d007      	beq.n	80149a6 <HAL_SD_ReadBlocks+0x32>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8014996:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8014998:	2001      	movs	r0, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 801499a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801499e:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80149a0:	b006      	add	sp, #24
 80149a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80149a6:	eb08 0306 	add.w	r3, r8, r6
 80149aa:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80149ac:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80149ae:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80149b0:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80149b2:	d864      	bhi.n	8014a7e <HAL_SD_ReadBlocks+0x10a>
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80149b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    hsd->State = HAL_SD_STATE_BUSY;
 80149b6:	2203      	movs	r2, #3
    hsd->Instance->DCTRL = 0U;
 80149b8:	6820      	ldr	r0, [r4, #0]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80149ba:	f04f 0902 	mov.w	r9, #2
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80149be:	2b01      	cmp	r3, #1
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80149c0:	ea4f 2346 	mov.w	r3, r6, lsl #9
    hsd->State = HAL_SD_STATE_BUSY;
 80149c4:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80149c8:	f04f 0290 	mov.w	r2, #144	; 0x90
    hsd->Instance->DCTRL = 0U;
 80149cc:	62c1      	str	r1, [r0, #44]	; 0x2c
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80149ce:	f04f 31ff 	mov.w	r1, #4294967295
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80149d2:	9301      	str	r3, [sp, #4]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80149d4:	f04f 0300 	mov.w	r3, #0
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80149d8:	9100      	str	r1, [sp, #0]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80149da:	4669      	mov	r1, sp
      add *= 512U;
 80149dc:	bf18      	it	ne
 80149de:	ea4f 2848 	movne.w	r8, r8, lsl #9
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80149e2:	9305      	str	r3, [sp, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80149e4:	9202      	str	r2, [sp, #8]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80149e6:	e9cd 9303 	strd	r9, r3, [sp, #12]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80149ea:	f001 fee7 	bl	80167bc <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 80149ee:	6820      	ldr	r0, [r4, #0]
    if(NumberOfBlocks > 1U)
 80149f0:	2e01      	cmp	r6, #1
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 80149f2:	68c3      	ldr	r3, [r0, #12]
 80149f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80149f8:	60c3      	str	r3, [r0, #12]
    if(NumberOfBlocks > 1U)
 80149fa:	d953      	bls.n	8014aa4 <HAL_SD_ReadBlocks+0x130>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80149fc:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8014a00:	4641      	mov	r1, r8
 8014a02:	f001 ff79 	bl	80168f8 <SDMMC_CmdReadMultiBlock>
 8014a06:	4602      	mov	r2, r0
 8014a08:	6823      	ldr	r3, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 8014a0a:	2a00      	cmp	r2, #0
 8014a0c:	d13e      	bne.n	8014a8c <HAL_SD_ReadBlocks+0x118>
    dataremaining = config.DataLength;
 8014a0e:	f8dd 9004 	ldr.w	r9, [sp, #4]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8014a12:	e006      	b.n	8014a22 <HAL_SD_ReadBlocks+0xae>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8014a14:	f7f8 ffa4 	bl	800d960 <HAL_GetTick>
 8014a18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014a1a:	1bc0      	subs	r0, r0, r7
 8014a1c:	4298      	cmp	r0, r3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8014a1e:	6823      	ldr	r3, [r4, #0]
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8014a20:	d272      	bcs.n	8014b08 <HAL_SD_ReadBlocks+0x194>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8014a22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014a24:	f412 7f95 	tst.w	r2, #298	; 0x12a
 8014a28:	d143      	bne.n	8014ab2 <HAL_SD_ReadBlocks+0x13e>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8014a2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014a2c:	0411      	lsls	r1, r2, #16
 8014a2e:	d5f1      	bpl.n	8014a14 <HAL_SD_ReadBlocks+0xa0>
 8014a30:	f1b9 0f1f 	cmp.w	r9, #31
 8014a34:	d9ee      	bls.n	8014a14 <HAL_SD_ReadBlocks+0xa0>
 8014a36:	f105 0a04 	add.w	sl, r5, #4
 8014a3a:	f105 0824 	add.w	r8, r5, #36	; 0x24
 8014a3e:	e000      	b.n	8014a42 <HAL_SD_ReadBlocks+0xce>
 8014a40:	6823      	ldr	r3, [r4, #0]
          data = SDMMC_ReadFIFO(hsd->Instance);
 8014a42:	4618      	mov	r0, r3
 8014a44:	f10a 0a04 	add.w	sl, sl, #4
 8014a48:	f001 fe96 	bl	8016778 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 8014a4c:	f80a 0c08 	strb.w	r0, [sl, #-8]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8014a50:	0a02      	lsrs	r2, r0, #8
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8014a52:	0c03      	lsrs	r3, r0, #16
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8014a54:	0e00      	lsrs	r0, r0, #24
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8014a56:	f80a 2c07 	strb.w	r2, [sl, #-7]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8014a5a:	f80a 3c06 	strb.w	r3, [sl, #-6]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8014a5e:	f80a 0c05 	strb.w	r0, [sl, #-5]
        for(count = 0U; count < 8U; count++)
 8014a62:	45c2      	cmp	sl, r8
 8014a64:	d1ec      	bne.n	8014a40 <HAL_SD_ReadBlocks+0xcc>
 8014a66:	3520      	adds	r5, #32
        dataremaining -= 32U;
 8014a68:	f1a9 0920 	sub.w	r9, r9, #32
 8014a6c:	e7d2      	b.n	8014a14 <HAL_SD_ReadBlocks+0xa0>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8014a6e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8014a70:	2001      	movs	r0, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8014a72:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8014a76:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8014a78:	b006      	add	sp, #24
 8014a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8014a7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014a80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8014a84:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8014a86:	b006      	add	sp, #24
 8014a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8014a8c:	483b      	ldr	r0, [pc, #236]	; (8014b7c <HAL_SD_ReadBlocks+0x208>)
      hsd->State = HAL_SD_STATE_READY;
 8014a8e:	2101      	movs	r1, #1
      hsd->Context = SD_CONTEXT_NONE;
 8014a90:	2500      	movs	r5, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8014a92:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 8014a94:	4608      	mov	r0, r1
      hsd->ErrorCode |= errorstate;
 8014a96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014a98:	431a      	orrs	r2, r3
 8014a9a:	63a2      	str	r2, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8014a9c:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8014aa0:	6325      	str	r5, [r4, #48]	; 0x30
      return HAL_ERROR;
 8014aa2:	e77d      	b.n	80149a0 <HAL_SD_ReadBlocks+0x2c>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8014aa4:	2301      	movs	r3, #1
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8014aa6:	4641      	mov	r1, r8
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8014aa8:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8014aaa:	f001 fee1 	bl	8016870 <SDMMC_CmdReadSingleBlock>
 8014aae:	4602      	mov	r2, r0
 8014ab0:	e7aa      	b.n	8014a08 <HAL_SD_ReadBlocks+0x94>
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8014ab2:	68da      	ldr	r2, [r3, #12]
 8014ab4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014ab8:	60da      	str	r2, [r3, #12]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8014aba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014abc:	05d2      	lsls	r2, r2, #23
 8014abe:	d50b      	bpl.n	8014ad8 <HAL_SD_ReadBlocks+0x164>
 8014ac0:	2e01      	cmp	r6, #1
 8014ac2:	d909      	bls.n	8014ad8 <HAL_SD_ReadBlocks+0x164>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8014ac4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8014ac6:	2a03      	cmp	r2, #3
 8014ac8:	d006      	beq.n	8014ad8 <HAL_SD_ReadBlocks+0x164>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8014aca:	4618      	mov	r0, r3
 8014acc:	f001 ffe0 	bl	8016a90 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8014ad0:	4603      	mov	r3, r0
 8014ad2:	2800      	cmp	r0, #0
 8014ad4:	d144      	bne.n	8014b60 <HAL_SD_ReadBlocks+0x1ec>
 8014ad6:	6823      	ldr	r3, [r4, #0]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8014ad8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014ada:	f012 0208 	ands.w	r2, r2, #8
 8014ade:	d120      	bne.n	8014b22 <HAL_SD_ReadBlocks+0x1ae>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8014ae0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8014ae2:	f011 0102 	ands.w	r1, r1, #2
 8014ae6:	d129      	bne.n	8014b3c <HAL_SD_ReadBlocks+0x1c8>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8014ae8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8014aea:	f010 0020 	ands.w	r0, r0, #32
 8014aee:	d031      	beq.n	8014b54 <HAL_SD_ReadBlocks+0x1e0>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8014af0:	4822      	ldr	r0, [pc, #136]	; (8014b7c <HAL_SD_ReadBlocks+0x208>)
      hsd->State = HAL_SD_STATE_READY;
 8014af2:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8014af4:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 8014af6:	4610      	mov	r0, r2
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8014af8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014afa:	f043 0320 	orr.w	r3, r3, #32
 8014afe:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8014b00:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8014b04:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 8014b06:	e74b      	b.n	80149a0 <HAL_SD_ReadBlocks+0x2c>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8014b08:	4d1c      	ldr	r5, [pc, #112]	; (8014b7c <HAL_SD_ReadBlocks+0x208>)
        hsd->State= HAL_SD_STATE_READY;
 8014b0a:	2101      	movs	r1, #1
        hsd->Context = SD_CONTEXT_NONE;
 8014b0c:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
 8014b0e:	2003      	movs	r0, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8014b10:	639d      	str	r5, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8014b12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014b14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8014b18:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8014b1a:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8014b1e:	6322      	str	r2, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 8014b20:	e73e      	b.n	80149a0 <HAL_SD_ReadBlocks+0x2c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8014b22:	4816      	ldr	r0, [pc, #88]	; (8014b7c <HAL_SD_ReadBlocks+0x208>)
      hsd->State = HAL_SD_STATE_READY;
 8014b24:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 8014b26:	2100      	movs	r1, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8014b28:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 8014b2a:	4610      	mov	r0, r2
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8014b2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014b2e:	f043 0308 	orr.w	r3, r3, #8
 8014b32:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8014b34:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8014b38:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 8014b3a:	e731      	b.n	80149a0 <HAL_SD_ReadBlocks+0x2c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8014b3c:	480f      	ldr	r0, [pc, #60]	; (8014b7c <HAL_SD_ReadBlocks+0x208>)
      hsd->State = HAL_SD_STATE_READY;
 8014b3e:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8014b40:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 8014b42:	4608      	mov	r0, r1
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8014b44:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014b46:	f043 0302 	orr.w	r3, r3, #2
 8014b4a:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8014b4c:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8014b50:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 8014b52:	e725      	b.n	80149a0 <HAL_SD_ReadBlocks+0x2c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8014b54:	490a      	ldr	r1, [pc, #40]	; (8014b80 <HAL_SD_ReadBlocks+0x20c>)
    hsd->State = HAL_SD_STATE_READY;
 8014b56:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8014b58:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8014b5a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_OK;
 8014b5e:	e71f      	b.n	80149a0 <HAL_SD_ReadBlocks+0x2c>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8014b60:	6822      	ldr	r2, [r4, #0]
          hsd->State = HAL_SD_STATE_READY;
 8014b62:	2101      	movs	r1, #1
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8014b64:	4805      	ldr	r0, [pc, #20]	; (8014b7c <HAL_SD_ReadBlocks+0x208>)
          hsd->Context = SD_CONTEXT_NONE;
 8014b66:	2500      	movs	r5, #0
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8014b68:	6390      	str	r0, [r2, #56]	; 0x38
          return HAL_ERROR;
 8014b6a:	4608      	mov	r0, r1
          hsd->ErrorCode |= errorstate;
 8014b6c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8014b6e:	4313      	orrs	r3, r2
 8014b70:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8014b72:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8014b76:	6325      	str	r5, [r4, #48]	; 0x30
          return HAL_ERROR;
 8014b78:	e712      	b.n	80149a0 <HAL_SD_ReadBlocks+0x2c>
 8014b7a:	bf00      	nop
 8014b7c:	1fe00fff 	.word	0x1fe00fff
 8014b80:	18000f3a 	.word	0x18000f3a

08014b84 <HAL_SD_WriteBlocks>:
{
 8014b84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014b88:	460d      	mov	r5, r1
 8014b8a:	b089      	sub	sp, #36	; 0x24
 8014b8c:	4604      	mov	r4, r0
 8014b8e:	4616      	mov	r6, r2
 8014b90:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8014b92:	f7f8 fee5 	bl	800d960 <HAL_GetTick>
  if(NULL == pData)
 8014b96:	2d00      	cmp	r5, #0
 8014b98:	d05f      	beq.n	8014c5a <HAL_SD_WriteBlocks+0xd6>
 8014b9a:	4680      	mov	r8, r0
  if(hsd->State == HAL_SD_STATE_READY)
 8014b9c:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8014ba0:	b2c0      	uxtb	r0, r0
 8014ba2:	2801      	cmp	r0, #1
 8014ba4:	d007      	beq.n	8014bb6 <HAL_SD_WriteBlocks+0x32>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8014ba6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8014ba8:	2001      	movs	r0, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8014baa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014bae:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8014bb0:	b009      	add	sp, #36	; 0x24
 8014bb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8014bb6:	19f3      	adds	r3, r6, r7
 8014bb8:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8014bba:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8014bbc:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8014bbe:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8014bc0:	d853      	bhi.n	8014c6a <HAL_SD_WriteBlocks+0xe6>
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8014bc2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    hsd->State = HAL_SD_STATE_BUSY;
 8014bc4:	2203      	movs	r2, #3
    hsd->Instance->DCTRL = 0U;
 8014bc6:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8014bc8:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8014bca:	f04f 33ff 	mov.w	r3, #4294967295
    hsd->State = HAL_SD_STATE_BUSY;
 8014bce:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8014bd2:	f04f 0290 	mov.w	r2, #144	; 0x90
    hsd->Instance->DCTRL = 0U;
 8014bd6:	62c1      	str	r1, [r0, #44]	; 0x2c
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8014bd8:	ea4f 2147 	mov.w	r1, r7, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8014bdc:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8014bde:	f04f 0300 	mov.w	r3, #0
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8014be2:	9103      	str	r1, [sp, #12]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8014be4:	a902      	add	r1, sp, #8
      add *= 512U;
 8014be6:	bf18      	it	ne
 8014be8:	0276      	lslne	r6, r6, #9
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8014bea:	e9cd 2304 	strd	r2, r3, [sp, #16]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8014bee:	e9cd 3306 	strd	r3, r3, [sp, #24]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8014bf2:	f001 fde3 	bl	80167bc <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8014bf6:	6820      	ldr	r0, [r4, #0]
    if(NumberOfBlocks > 1U)
 8014bf8:	2f01      	cmp	r7, #1
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8014bfa:	68c3      	ldr	r3, [r0, #12]
 8014bfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014c00:	60c3      	str	r3, [r0, #12]
    if(NumberOfBlocks > 1U)
 8014c02:	d945      	bls.n	8014c90 <HAL_SD_WriteBlocks+0x10c>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8014c04:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8014c06:	4631      	mov	r1, r6
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8014c08:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8014c0a:	f001 fefd 	bl	8016a08 <SDMMC_CmdWriteMultiBlock>
 8014c0e:	4602      	mov	r2, r0
 8014c10:	6823      	ldr	r3, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 8014c12:	2a00      	cmp	r2, #0
 8014c14:	d130      	bne.n	8014c78 <HAL_SD_WriteBlocks+0xf4>
    dataremaining = config.DataLength;
 8014c16:	9e03      	ldr	r6, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8014c18:	e007      	b.n	8014c2a <HAL_SD_WriteBlocks+0xa6>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8014c1a:	f7f8 fea1 	bl	800d960 <HAL_GetTick>
 8014c1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014c20:	eba0 0008 	sub.w	r0, r0, r8
 8014c24:	4298      	cmp	r0, r3
 8014c26:	d265      	bcs.n	8014cf4 <HAL_SD_WriteBlocks+0x170>
 8014c28:	6823      	ldr	r3, [r4, #0]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8014c2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014c2c:	f412 7f8d 	tst.w	r2, #282	; 0x11a
 8014c30:	d135      	bne.n	8014c9e <HAL_SD_WriteBlocks+0x11a>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8014c32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014c34:	0451      	lsls	r1, r2, #17
 8014c36:	d5f0      	bpl.n	8014c1a <HAL_SD_WriteBlocks+0x96>
 8014c38:	2e1f      	cmp	r6, #31
 8014c3a:	d9ee      	bls.n	8014c1a <HAL_SD_WriteBlocks+0x96>
 8014c3c:	f105 0920 	add.w	r9, r5, #32
 8014c40:	e000      	b.n	8014c44 <HAL_SD_WriteBlocks+0xc0>
 8014c42:	6823      	ldr	r3, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 8014c44:	f855 2b04 	ldr.w	r2, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8014c48:	4618      	mov	r0, r3
 8014c4a:	a901      	add	r1, sp, #4
          data |= ((uint32_t)(*tempbuff) << 24U);
 8014c4c:	9201      	str	r2, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8014c4e:	f001 fd97 	bl	8016780 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8014c52:	454d      	cmp	r5, r9
 8014c54:	d1f5      	bne.n	8014c42 <HAL_SD_WriteBlocks+0xbe>
        dataremaining -= 32U;
 8014c56:	3e20      	subs	r6, #32
 8014c58:	e7df      	b.n	8014c1a <HAL_SD_WriteBlocks+0x96>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8014c5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8014c5c:	2001      	movs	r0, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8014c5e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8014c62:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8014c64:	b009      	add	sp, #36	; 0x24
 8014c66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8014c6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014c6c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8014c70:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8014c72:	b009      	add	sp, #36	; 0x24
 8014c74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8014c78:	483a      	ldr	r0, [pc, #232]	; (8014d64 <HAL_SD_WriteBlocks+0x1e0>)
      hsd->State = HAL_SD_STATE_READY;
 8014c7a:	2101      	movs	r1, #1
      hsd->Context = SD_CONTEXT_NONE;
 8014c7c:	2500      	movs	r5, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8014c7e:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 8014c80:	4608      	mov	r0, r1
      hsd->ErrorCode |= errorstate;
 8014c82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014c84:	431a      	orrs	r2, r3
 8014c86:	63a2      	str	r2, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8014c88:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8014c8c:	6325      	str	r5, [r4, #48]	; 0x30
      return HAL_ERROR;
 8014c8e:	e78f      	b.n	8014bb0 <HAL_SD_WriteBlocks+0x2c>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8014c90:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8014c92:	4631      	mov	r1, r6
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8014c94:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8014c96:	f001 fe73 	bl	8016980 <SDMMC_CmdWriteSingleBlock>
 8014c9a:	4602      	mov	r2, r0
 8014c9c:	e7b8      	b.n	8014c10 <HAL_SD_WriteBlocks+0x8c>
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8014c9e:	68da      	ldr	r2, [r3, #12]
 8014ca0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014ca4:	60da      	str	r2, [r3, #12]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8014ca6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014ca8:	05d2      	lsls	r2, r2, #23
 8014caa:	d50b      	bpl.n	8014cc4 <HAL_SD_WriteBlocks+0x140>
 8014cac:	2f01      	cmp	r7, #1
 8014cae:	d909      	bls.n	8014cc4 <HAL_SD_WriteBlocks+0x140>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8014cb0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8014cb2:	2a03      	cmp	r2, #3
 8014cb4:	d006      	beq.n	8014cc4 <HAL_SD_WriteBlocks+0x140>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8014cb6:	4618      	mov	r0, r3
 8014cb8:	f001 feea 	bl	8016a90 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8014cbc:	4603      	mov	r3, r0
 8014cbe:	2800      	cmp	r0, #0
 8014cc0:	d143      	bne.n	8014d4a <HAL_SD_WriteBlocks+0x1c6>
 8014cc2:	6823      	ldr	r3, [r4, #0]
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8014cc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014cc6:	f012 0208 	ands.w	r2, r2, #8
 8014cca:	d11f      	bne.n	8014d0c <HAL_SD_WriteBlocks+0x188>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8014ccc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8014cce:	f011 0102 	ands.w	r1, r1, #2
 8014cd2:	d128      	bne.n	8014d26 <HAL_SD_WriteBlocks+0x1a2>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8014cd4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8014cd6:	f010 0010 	ands.w	r0, r0, #16
 8014cda:	d030      	beq.n	8014d3e <HAL_SD_WriteBlocks+0x1ba>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8014cdc:	4821      	ldr	r0, [pc, #132]	; (8014d64 <HAL_SD_WriteBlocks+0x1e0>)
      hsd->State = HAL_SD_STATE_READY;
 8014cde:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8014ce0:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 8014ce2:	4610      	mov	r0, r2
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8014ce4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014ce6:	f043 0310 	orr.w	r3, r3, #16
 8014cea:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8014cec:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8014cf0:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 8014cf2:	e75d      	b.n	8014bb0 <HAL_SD_WriteBlocks+0x2c>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8014cf4:	6821      	ldr	r1, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 8014cf6:	2201      	movs	r2, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8014cf8:	4d1a      	ldr	r5, [pc, #104]	; (8014d64 <HAL_SD_WriteBlocks+0x1e0>)
        hsd->Context = SD_CONTEXT_NONE;
 8014cfa:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8014cfc:	2003      	movs	r0, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8014cfe:	638d      	str	r5, [r1, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8014d00:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014d02:	63a1      	str	r1, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8014d04:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8014d08:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 8014d0a:	e751      	b.n	8014bb0 <HAL_SD_WriteBlocks+0x2c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8014d0c:	4815      	ldr	r0, [pc, #84]	; (8014d64 <HAL_SD_WriteBlocks+0x1e0>)
      hsd->State = HAL_SD_STATE_READY;
 8014d0e:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 8014d10:	2100      	movs	r1, #0
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8014d12:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 8014d14:	4610      	mov	r0, r2
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8014d16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014d18:	f043 0308 	orr.w	r3, r3, #8
 8014d1c:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8014d1e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8014d22:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 8014d24:	e744      	b.n	8014bb0 <HAL_SD_WriteBlocks+0x2c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8014d26:	480f      	ldr	r0, [pc, #60]	; (8014d64 <HAL_SD_WriteBlocks+0x1e0>)
      hsd->State = HAL_SD_STATE_READY;
 8014d28:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8014d2a:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 8014d2c:	4608      	mov	r0, r1
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8014d2e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014d30:	f043 0302 	orr.w	r3, r3, #2
 8014d34:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8014d36:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8014d3a:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 8014d3c:	e738      	b.n	8014bb0 <HAL_SD_WriteBlocks+0x2c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8014d3e:	490a      	ldr	r1, [pc, #40]	; (8014d68 <HAL_SD_WriteBlocks+0x1e4>)
    hsd->State = HAL_SD_STATE_READY;
 8014d40:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8014d42:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8014d44:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_OK;
 8014d48:	e732      	b.n	8014bb0 <HAL_SD_WriteBlocks+0x2c>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8014d4a:	6822      	ldr	r2, [r4, #0]
          hsd->State = HAL_SD_STATE_READY;
 8014d4c:	2101      	movs	r1, #1
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8014d4e:	4805      	ldr	r0, [pc, #20]	; (8014d64 <HAL_SD_WriteBlocks+0x1e0>)
          hsd->Context = SD_CONTEXT_NONE;
 8014d50:	2500      	movs	r5, #0
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8014d52:	6390      	str	r0, [r2, #56]	; 0x38
          return HAL_ERROR;
 8014d54:	4608      	mov	r0, r1
          hsd->ErrorCode |= errorstate;
 8014d56:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8014d58:	4313      	orrs	r3, r2
 8014d5a:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8014d5c:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8014d60:	6325      	str	r5, [r4, #48]	; 0x30
          return HAL_ERROR;
 8014d62:	e725      	b.n	8014bb0 <HAL_SD_WriteBlocks+0x2c>
 8014d64:	1fe00fff 	.word	0x1fe00fff
 8014d68:	18000f3a 	.word	0x18000f3a

08014d6c <HAL_SD_DeInit>:
  if(hsd == NULL)
 8014d6c:	b198      	cbz	r0, 8014d96 <HAL_SD_DeInit+0x2a>
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8014d6e:	6983      	ldr	r3, [r0, #24]
  hsd->State = HAL_SD_STATE_BUSY;
 8014d70:	2203      	movs	r2, #3
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8014d72:	2b02      	cmp	r3, #2
{
 8014d74:	b510      	push	{r4, lr}
 8014d76:	4604      	mov	r4, r0
  hsd->State = HAL_SD_STATE_BUSY;
 8014d78:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8014d7c:	d00d      	beq.n	8014d9a <HAL_SD_DeInit+0x2e>
  (void)SDMMC_PowerState_OFF(hsd->Instance);
 8014d7e:	6820      	ldr	r0, [r4, #0]
 8014d80:	f001 fd0c 	bl	801679c <SDMMC_PowerState_OFF>
  HAL_SD_MspDeInit(hsd);
 8014d84:	4620      	mov	r0, r4
 8014d86:	f7ff fdf3 	bl	8014970 <HAL_SD_MspDeInit>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8014d8a:	2300      	movs	r3, #0
 8014d8c:	63a3      	str	r3, [r4, #56]	; 0x38
  return HAL_OK;
 8014d8e:	4618      	mov	r0, r3
  hsd->State = HAL_SD_STATE_RESET;
 8014d90:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8014d94:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8014d96:	2001      	movs	r0, #1
}
 8014d98:	4770      	bx	lr
    HAL_SD_DriveTransceiver_1_8V_Callback(RESET);
 8014d9a:	2000      	movs	r0, #0
 8014d9c:	f7f8 fd7a 	bl	800d894 <HAL_SD_DriveTransceiver_1_8V_Callback>
 8014da0:	e7ed      	b.n	8014d7e <HAL_SD_DeInit+0x12>
 8014da2:	bf00      	nop

08014da4 <SD_UltraHighSpeed>:
  *         of PLL to have SDMMCCK clock between 50 and 120 MHz
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SD_UltraHighSpeed(SD_HandleTypeDef *hsd)
{
 8014da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  SDMMC_DataInitTypeDef sdmmc_datainitstructure;
  uint32_t SD_hs[16]  = {0};
 8014da8:	2640      	movs	r6, #64	; 0x40
{
 8014daa:	b096      	sub	sp, #88	; 0x58
 8014dac:	4604      	mov	r4, r0
  uint32_t SD_hs[16]  = {0};
 8014dae:	2100      	movs	r1, #0
 8014db0:	4632      	mov	r2, r6
 8014db2:	a806      	add	r0, sp, #24
 8014db4:	f011 f9f1 	bl	802619a <memset>
  uint32_t count, loop = 0 ;
  uint32_t Timeout = HAL_GetTick();
 8014db8:	f7f8 fdd2 	bl	800d960 <HAL_GetTick>

  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 8014dbc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8014dbe:	b13b      	cbz	r3, 8014dd0 <SD_UltraHighSpeed+0x2c>
  {
     /* Standard Speed Card <= 12.5Mhz  */
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
  }

  if(hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8014dc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014dc4:	d00a      	beq.n	8014ddc <SD_UltraHighSpeed+0x38>
    if ( SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure) != HAL_OK)
    {
      return (HAL_SD_ERROR_GENERAL_UNKNOWN_ERR);
    }

    errorstate = SDMMC_CmdSwitch(hsd->Instance, SDMMC_SDR104_SWITCH_PATTERN);
 8014dc6:	2500      	movs	r5, #0
#endif /* (DLYB_SDMMC1) || (DLYB_SDMMC2) */
    }
  }

  return errorstate;
}
 8014dc8:	4628      	mov	r0, r5
 8014dca:	b016      	add	sp, #88	; 0x58
 8014dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8014dd0:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
}
 8014dd4:	4628      	mov	r0, r5
 8014dd6:	b016      	add	sp, #88	; 0x58
 8014dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hsd->Instance->DCTRL = 0;
 8014ddc:	2300      	movs	r3, #0
 8014dde:	4607      	mov	r7, r0
 8014de0:	6820      	ldr	r0, [r4, #0]
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8014de2:	4631      	mov	r1, r6
    hsd->Instance->DCTRL = 0;
 8014de4:	62c3      	str	r3, [r0, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8014de6:	f001 fcff 	bl	80167e8 <SDMMC_CmdBlockLength>
    if (errorstate != HAL_SD_ERROR_NONE)
 8014dea:	4605      	mov	r5, r0
 8014dec:	2800      	cmp	r0, #0
 8014dee:	d1eb      	bne.n	8014dc8 <SD_UltraHighSpeed+0x24>
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 8014df0:	f04f 33ff 	mov.w	r3, #4294967295
    sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B ;
 8014df4:	2160      	movs	r1, #96	; 0x60
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8014df6:	2202      	movs	r2, #2
    sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8014df8:	9004      	str	r0, [sp, #16]
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 8014dfa:	9300      	str	r3, [sp, #0]
    sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8014dfc:	2301      	movs	r3, #1
    sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B ;
 8014dfe:	9102      	str	r1, [sp, #8]
    if ( SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure) != HAL_OK)
 8014e00:	4669      	mov	r1, sp
 8014e02:	6820      	ldr	r0, [r4, #0]
    sdmmc_datainitstructure.DataLength    = 64U;
 8014e04:	9601      	str	r6, [sp, #4]
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8014e06:	9203      	str	r2, [sp, #12]
    sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8014e08:	9305      	str	r3, [sp, #20]
    if ( SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure) != HAL_OK)
 8014e0a:	f001 fcd7 	bl	80167bc <SDMMC_ConfigData>
 8014e0e:	2800      	cmp	r0, #0
 8014e10:	d14b      	bne.n	8014eaa <SD_UltraHighSpeed+0x106>
    errorstate = SDMMC_CmdSwitch(hsd->Instance, SDMMC_SDR104_SWITCH_PATTERN);
 8014e12:	4931      	ldr	r1, [pc, #196]	; (8014ed8 <SD_UltraHighSpeed+0x134>)
 8014e14:	6820      	ldr	r0, [r4, #0]
 8014e16:	f002 f9ab 	bl	8017170 <SDMMC_CmdSwitch>
    if(errorstate != HAL_SD_ERROR_NONE)
 8014e1a:	4605      	mov	r5, r0
 8014e1c:	2800      	cmp	r0, #0
 8014e1e:	d1d3      	bne.n	8014dc8 <SD_UltraHighSpeed+0x24>
  uint32_t count, loop = 0 ;
 8014e20:	4682      	mov	sl, r0
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 8014e22:	f240 592a 	movw	r9, #1322	; 0x52a
 8014e26:	e004      	b.n	8014e32 <SD_UltraHighSpeed+0x8e>
      if((HAL_GetTick()-Timeout) >=  SDMMC_DATATIMEOUT)
 8014e28:	f7f8 fd9a 	bl	800d960 <HAL_GetTick>
 8014e2c:	1bc0      	subs	r0, r0, r7
 8014e2e:	3001      	adds	r0, #1
 8014e30:	d03e      	beq.n	8014eb0 <SD_UltraHighSpeed+0x10c>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 8014e32:	6820      	ldr	r0, [r4, #0]
 8014e34:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8014e36:	ea13 0f09 	tst.w	r3, r9
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8014e3a:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 8014e3c:	d113      	bne.n	8014e66 <SD_UltraHighSpeed+0xc2>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8014e3e:	041b      	lsls	r3, r3, #16
 8014e40:	d5f2      	bpl.n	8014e28 <SD_UltraHighSpeed+0x84>
 8014e42:	ea4f 184a 	mov.w	r8, sl, lsl #5
 8014e46:	ab06      	add	r3, sp, #24
 8014e48:	eb03 0608 	add.w	r6, r3, r8
 8014e4c:	ab0e      	add	r3, sp, #56	; 0x38
 8014e4e:	4498      	add	r8, r3
 8014e50:	e000      	b.n	8014e54 <SD_UltraHighSpeed+0xb0>
 8014e52:	6820      	ldr	r0, [r4, #0]
          SD_hs[(8U*loop)+count]  = SDMMC_ReadFIFO(hsd->Instance);
 8014e54:	f001 fc90 	bl	8016778 <SDMMC_ReadFIFO>
 8014e58:	f846 0b04 	str.w	r0, [r6], #4
        for (count = 0U; count < 8U; count++)
 8014e5c:	4546      	cmp	r6, r8
 8014e5e:	d1f8      	bne.n	8014e52 <SD_UltraHighSpeed+0xae>
        loop ++;
 8014e60:	f10a 0a01 	add.w	sl, sl, #1
 8014e64:	e7e0      	b.n	8014e28 <SD_UltraHighSpeed+0x84>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8014e66:	071e      	lsls	r6, r3, #28
 8014e68:	d429      	bmi.n	8014ebe <SD_UltraHighSpeed+0x11a>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8014e6a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8014e6c:	0799      	lsls	r1, r3, #30
 8014e6e:	d429      	bmi.n	8014ec4 <SD_UltraHighSpeed+0x120>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8014e70:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8014e72:	069a      	lsls	r2, r3, #26
 8014e74:	d42c      	bmi.n	8014ed0 <SD_UltraHighSpeed+0x12c>
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 8014e76:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8014e7a:	4a18      	ldr	r2, [pc, #96]	; (8014edc <SD_UltraHighSpeed+0x138>)
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 8014e7c:	079b      	lsls	r3, r3, #30
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8014e7e:	6382      	str	r2, [r0, #56]	; 0x38
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 8014e80:	d523      	bpl.n	8014eca <SD_UltraHighSpeed+0x126>
      HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8014e82:	2001      	movs	r0, #1
 8014e84:	f7f8 fd06 	bl	800d894 <HAL_SD_DriveTransceiver_1_8V_Callback>
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_1);
 8014e88:	6822      	ldr	r2, [r4, #0]
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 8014e8a:	4815      	ldr	r0, [pc, #84]	; (8014ee0 <SD_UltraHighSpeed+0x13c>)
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_1);
 8014e8c:	6853      	ldr	r3, [r2, #4]
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 8014e8e:	4c15      	ldr	r4, [pc, #84]	; (8014ee4 <SD_UltraHighSpeed+0x140>)
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_1);
 8014e90:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 8014e94:	4914      	ldr	r1, [pc, #80]	; (8014ee8 <SD_UltraHighSpeed+0x144>)
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_1);
 8014e96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 8014e9a:	42a2      	cmp	r2, r4
 8014e9c:	bf08      	it	eq
 8014e9e:	4608      	moveq	r0, r1
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_1);
 8014ea0:	6053      	str	r3, [r2, #4]
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 8014ea2:	f001 fb9f 	bl	80165e4 <DelayBlock_Enable>
 8014ea6:	2800      	cmp	r0, #0
 8014ea8:	d08d      	beq.n	8014dc6 <SD_UltraHighSpeed+0x22>
      return (HAL_SD_ERROR_GENERAL_UNKNOWN_ERR);
 8014eaa:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8014eae:	e78b      	b.n	8014dc8 <SD_UltraHighSpeed+0x24>
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8014eb0:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
        hsd->State= HAL_SD_STATE_READY;
 8014eb4:	2301      	movs	r3, #1
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8014eb6:	63a5      	str	r5, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8014eb8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_SD_ERROR_TIMEOUT;
 8014ebc:	e784      	b.n	8014dc8 <SD_UltraHighSpeed+0x24>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8014ebe:	2308      	movs	r3, #8
 8014ec0:	6383      	str	r3, [r0, #56]	; 0x38
      return errorstate;
 8014ec2:	e781      	b.n	8014dc8 <SD_UltraHighSpeed+0x24>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8014ec4:	2502      	movs	r5, #2
 8014ec6:	6385      	str	r5, [r0, #56]	; 0x38
      return errorstate;
 8014ec8:	e77e      	b.n	8014dc8 <SD_UltraHighSpeed+0x24>
      errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8014eca:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8014ece:	e77b      	b.n	8014dc8 <SD_UltraHighSpeed+0x24>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8014ed0:	2520      	movs	r5, #32
 8014ed2:	6385      	str	r5, [r0, #56]	; 0x38
      return errorstate;
 8014ed4:	e778      	b.n	8014dc8 <SD_UltraHighSpeed+0x24>
 8014ed6:	bf00      	nop
 8014ed8:	80ff1f03 	.word	0x80ff1f03
 8014edc:	18000f3a 	.word	0x18000f3a
 8014ee0:	48022800 	.word	0x48022800
 8014ee4:	52007000 	.word	0x52007000
 8014ee8:	52008000 	.word	0x52008000

08014eec <HAL_SD_GetCardCSD>:
{
 8014eec:	4603      	mov	r3, r0
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8014eee:	2000      	movs	r0, #0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8014ef0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8014ef2:	b5f0      	push	{r4, r5, r6, r7, lr}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8014ef4:	0f94      	lsrs	r4, r2, #30
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8014ef6:	f3c2 6783 	ubfx	r7, r2, #26, #4
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8014efa:	f3c2 6601 	ubfx	r6, r2, #24, #2
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8014efe:	f3c2 4507 	ubfx	r5, r2, #16, #8
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8014f02:	700c      	strb	r4, [r1, #0]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8014f04:	f3c2 2407 	ubfx	r4, r2, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8014f08:	b2d2      	uxtb	r2, r2
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8014f0a:	704f      	strb	r7, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8014f0c:	708e      	strb	r6, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8014f0e:	70cd      	strb	r5, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8014f10:	710c      	strb	r4, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8014f12:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8014f14:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8014f16:	0d15      	lsrs	r5, r2, #20
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8014f18:	f3c2 4403 	ubfx	r4, r2, #16, #4
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8014f1c:	f3c2 37c0 	ubfx	r7, r2, #15, #1
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8014f20:	f3c2 3680 	ubfx	r6, r2, #14, #1
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8014f24:	80cd      	strh	r5, [r1, #6]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8014f26:	f3c2 3540 	ubfx	r5, r2, #13, #1
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8014f2a:	720c      	strb	r4, [r1, #8]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8014f2c:	f3c2 3400 	ubfx	r4, r2, #12, #1
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8014f30:	724f      	strb	r7, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8014f32:	728e      	strb	r6, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8014f34:	72cd      	strb	r5, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8014f36:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8014f38:	7348      	strb	r0, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8014f3a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8014f3c:	2800      	cmp	r0, #0
 8014f3e:	d16e      	bne.n	801501e <HAL_SD_GetCardCSD+0x132>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8014f40:	f640 74fc 	movw	r4, #4092	; 0xffc
 8014f44:	6e98      	ldr	r0, [r3, #104]	; 0x68
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8014f46:	2501      	movs	r5, #1
    hsd->SdCard.LogBlockSize = 512U;
 8014f48:	f44f 7600 	mov.w	r6, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8014f4c:	ea04 0282 	and.w	r2, r4, r2, lsl #2
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8014f50:	f3c0 6ec2 	ubfx	lr, r0, #27, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8014f54:	f3c0 4482 	ubfx	r4, r0, #18, #3
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8014f58:	f3c0 6c02 	ubfx	ip, r0, #24, #3
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8014f5c:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8014f60:	f3c0 5742 	ubfx	r7, r0, #21, #3
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8014f64:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8014f66:	f3c0 32c2 	ubfx	r2, r0, #15, #3
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8014f6a:	f881 e014 	strb.w	lr, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8014f6e:	f881 c015 	strb.w	ip, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8014f72:	758f      	strb	r7, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8014f74:	75cc      	strb	r4, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8014f76:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8014f78:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8014f7a:	7e0c      	ldrb	r4, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8014f7c:	442a      	add	r2, r5
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8014f7e:	f004 0407 	and.w	r4, r4, #7
 8014f82:	3402      	adds	r4, #2
 8014f84:	40a2      	lsls	r2, r4
 8014f86:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8014f88:	7a0c      	ldrb	r4, [r1, #8]
    hsd->SdCard.LogBlockSize = 512U;
 8014f8a:	659e      	str	r6, [r3, #88]	; 0x58
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8014f8c:	f004 040f 	and.w	r4, r4, #15
 8014f90:	40a5      	lsls	r5, r4
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8014f92:	0a6c      	lsrs	r4, r5, #9
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8014f94:	651d      	str	r5, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8014f96:	fb02 f204 	mul.w	r2, r2, r4
 8014f9a:	655a      	str	r2, [r3, #84]	; 0x54
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8014f9c:	f3c0 3580 	ubfx	r5, r0, #14, #1
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8014fa0:	f3c0 16c6 	ubfx	r6, r0, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8014fa4:	f000 027f 	and.w	r2, r0, #127	; 0x7f
  pCSD->Reserved3 = 0;
 8014fa8:	2400      	movs	r4, #0
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8014faa:	764d      	strb	r5, [r1, #25]
  pCSD->Reserved4 = 1;
 8014fac:	2501      	movs	r5, #1
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8014fae:	768e      	strb	r6, [r1, #26]
  return HAL_OK;
 8014fb0:	4620      	mov	r0, r4
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8014fb2:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8014fb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014fb6:	0fdf      	lsrs	r7, r3, #31
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8014fb8:	f3c3 7241 	ubfx	r2, r3, #29, #2
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8014fbc:	f3c3 6682 	ubfx	r6, r3, #26, #3
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8014fc0:	f3c3 3cc0 	ubfx	ip, r3, #15, #1
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8014fc4:	770f      	strb	r7, [r1, #28]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8014fc6:	f3c3 5783 	ubfx	r7, r3, #22, #4
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8014fca:	774a      	strb	r2, [r1, #29]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8014fcc:	f3c3 5240 	ubfx	r2, r3, #21, #1
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8014fd0:	778e      	strb	r6, [r1, #30]
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8014fd2:	f3c3 4600 	ubfx	r6, r3, #16, #1
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8014fd6:	77cf      	strb	r7, [r1, #31]
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8014fd8:	f3c3 3740 	ubfx	r7, r3, #13, #1
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8014fdc:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8014fe0:	f3c3 3280 	ubfx	r2, r3, #14, #1
  pCSD->Reserved3 = 0;
 8014fe4:	f881 4021 	strb.w	r4, [r1, #33]	; 0x21
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8014fe8:	f3c3 2481 	ubfx	r4, r3, #10, #2
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8014fec:	f881 6022 	strb.w	r6, [r1, #34]	; 0x22
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8014ff0:	f3c3 3600 	ubfx	r6, r3, #12, #1
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8014ff4:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8014ff8:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8014ffc:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8015000:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8015004:	f881 7025 	strb.w	r7, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8015008:	f881 6026 	strb.w	r6, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 801500c:	f881 4027 	strb.w	r4, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8015010:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8015014:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8015018:	f881 502a 	strb.w	r5, [r1, #42]	; 0x2a
}
 801501c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 801501e:	2801      	cmp	r0, #1
 8015020:	d00b      	beq.n	801503a <HAL_SD_GetCardCSD+0x14e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8015022:	681a      	ldr	r2, [r3, #0]
    hsd->State = HAL_SD_STATE_READY;
 8015024:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8015026:	4c0d      	ldr	r4, [pc, #52]	; (801505c <HAL_SD_GetCardCSD+0x170>)
    return HAL_ERROR;
 8015028:	4608      	mov	r0, r1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801502a:	6394      	str	r4, [r2, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801502c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801502e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8015032:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8015034:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
}
 8015038:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 801503a:	0412      	lsls	r2, r2, #16
 801503c:	6e98      	ldr	r0, [r3, #104]	; 0x68
    hsd->SdCard.BlockSize = 512U;
 801503e:	f44f 7400 	mov.w	r4, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8015042:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 8015046:	ea42 4210 	orr.w	r2, r2, r0, lsr #16
 801504a:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 801504c:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockSize = 512U;
 801504e:	651c      	str	r4, [r3, #80]	; 0x50
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8015050:	3201      	adds	r2, #1
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8015052:	659c      	str	r4, [r3, #88]	; 0x58
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8015054:	0292      	lsls	r2, r2, #10
 8015056:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8015058:	655a      	str	r2, [r3, #84]	; 0x54
 801505a:	e79f      	b.n	8014f9c <HAL_SD_GetCardCSD+0xb0>
 801505c:	1fe00fff 	.word	0x1fe00fff

08015060 <HAL_SD_InitCard>:
{
 8015060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8015064:	2300      	movs	r3, #0
{
 8015066:	b098      	sub	sp, #96	; 0x60
 8015068:	4604      	mov	r4, r0
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 801506a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 801506e:	e9cd 3307 	strd	r3, r3, [sp, #28]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8015072:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8015076:	f7fe fea3 	bl	8013dc0 <HAL_RCCEx_GetPeriphCLKFreq>
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 801507a:	4aad      	ldr	r2, [pc, #692]	; (8015330 <HAL_SD_InitCard+0x2d0>)
 801507c:	0a05      	lsrs	r5, r0, #8
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 801507e:	69a3      	ldr	r3, [r4, #24]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8015080:	4606      	mov	r6, r0
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8015082:	6827      	ldr	r7, [r4, #0]
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 8015084:	fba2 2505 	umull	r2, r5, r2, r5
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8015088:	2b02      	cmp	r3, #2
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 801508a:	ea4f 1515 	mov.w	r5, r5, lsr #4
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 801508e:	d103      	bne.n	8015098 <HAL_SD_InitCard+0x38>
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8015090:	683b      	ldr	r3, [r7, #0]
 8015092:	f043 0310 	orr.w	r3, r3, #16
 8015096:	603b      	str	r3, [r7, #0]
  (void)SDMMC_Init(hsd->Instance, Init);
 8015098:	aa0a      	add	r2, sp, #40	; 0x28
 801509a:	950b      	str	r5, [sp, #44]	; 0x2c
 801509c:	ab07      	add	r3, sp, #28
 801509e:	ca07      	ldmia	r2, {r0, r1, r2}
 80150a0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80150a4:	4638      	mov	r0, r7
 80150a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80150a8:	f001 fb4c 	bl	8016744 <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80150ac:	6820      	ldr	r0, [r4, #0]
 80150ae:	f001 fb6d 	bl	801678c <SDMMC_PowerState_ON>
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 80150b2:	0068      	lsls	r0, r5, #1
 80150b4:	fbb6 f0f0 	udiv	r0, r6, r0
  if(sdmmc_clk != 0U)
 80150b8:	b1c8      	cbz	r0, 80150ee <HAL_SD_InitCard+0x8e>
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 80150ba:	4d9e      	ldr	r5, [pc, #632]	; (8015334 <HAL_SD_InitCard+0x2d4>)
 80150bc:	fbb5 f0f0 	udiv	r0, r5, r0
 80150c0:	3001      	adds	r0, #1
 80150c2:	f7f8 fc53 	bl	800d96c <HAL_Delay>
  __IO uint32_t count = 0U;
 80150c6:	2300      	movs	r3, #0
 80150c8:	9306      	str	r3, [sp, #24]
  uint32_t tickstart = HAL_GetTick();
 80150ca:	f7f8 fc49 	bl	800d960 <HAL_GetTick>
 80150ce:	4680      	mov	r8, r0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80150d0:	6820      	ldr	r0, [r4, #0]
 80150d2:	f001 fd87 	bl	8016be4 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 80150d6:	4605      	mov	r5, r0
 80150d8:	b168      	cbz	r0, 80150f6 <HAL_SD_InitCard+0x96>
    hsd->State = HAL_SD_STATE_READY;
 80150da:	2601      	movs	r6, #1
 80150dc:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80150e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80150e2:	431d      	orrs	r5, r3
 80150e4:	63a5      	str	r5, [r4, #56]	; 0x38
}
 80150e6:	4630      	mov	r0, r6
 80150e8:	b018      	add	sp, #96	; 0x60
 80150ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    HAL_Delay(2U);
 80150ee:	2002      	movs	r0, #2
 80150f0:	f7f8 fc3c 	bl	800d96c <HAL_Delay>
 80150f4:	e7e7      	b.n	80150c6 <HAL_SD_InitCard+0x66>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80150f6:	6820      	ldr	r0, [r4, #0]
 80150f8:	f001 fda2 	bl	8016c40 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 80150fc:	2800      	cmp	r0, #0
 80150fe:	d17a      	bne.n	80151f6 <HAL_SD_InitCard+0x196>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8015100:	2301      	movs	r3, #1
 8015102:	6423      	str	r3, [r4, #64]	; 0x40
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8015104:	2100      	movs	r1, #0
 8015106:	6820      	ldr	r0, [r4, #0]
 8015108:	f001 fdda 	bl	8016cc0 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 801510c:	bb08      	cbnz	r0, 8015152 <HAL_SD_InitCard+0xf2>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 801510e:	9b06      	ldr	r3, [sp, #24]
 8015110:	f64f 76fe 	movw	r6, #65534	; 0xfffe
 8015114:	42b3      	cmp	r3, r6
 8015116:	f200 8105 	bhi.w	8015324 <HAL_SD_InitCard+0x2c4>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 801511a:	4f87      	ldr	r7, [pc, #540]	; (8015338 <HAL_SD_InitCard+0x2d8>)
 801511c:	e00c      	b.n	8015138 <HAL_SD_InitCard+0xd8>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 801511e:	4601      	mov	r1, r0
 8015120:	6820      	ldr	r0, [r4, #0]
 8015122:	f001 fb47 	bl	80167b4 <SDMMC_GetResponse>
    count++;
 8015126:	9b06      	ldr	r3, [sp, #24]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8015128:	2800      	cmp	r0, #0
    count++;
 801512a:	f103 0301 	add.w	r3, r3, #1
 801512e:	9306      	str	r3, [sp, #24]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8015130:	9b06      	ldr	r3, [sp, #24]
 8015132:	db11      	blt.n	8015158 <HAL_SD_InitCard+0xf8>
 8015134:	42b3      	cmp	r3, r6
 8015136:	d80f      	bhi.n	8015158 <HAL_SD_InitCard+0xf8>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8015138:	2100      	movs	r1, #0
 801513a:	6820      	ldr	r0, [r4, #0]
 801513c:	f001 fdc0 	bl	8016cc0 <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8015140:	4639      	mov	r1, r7
    if(errorstate != HAL_SD_ERROR_NONE)
 8015142:	4605      	mov	r5, r0
 8015144:	2800      	cmp	r0, #0
 8015146:	d1c8      	bne.n	80150da <HAL_SD_InitCard+0x7a>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8015148:	6820      	ldr	r0, [r4, #0]
 801514a:	f001 fdfd 	bl	8016d48 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 801514e:	2800      	cmp	r0, #0
 8015150:	d0e5      	beq.n	801511e <HAL_SD_InitCard+0xbe>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8015152:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8015156:	e7c0      	b.n	80150da <HAL_SD_InitCard+0x7a>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8015158:	9a06      	ldr	r2, [sp, #24]
 801515a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 801515e:	429a      	cmp	r2, r3
 8015160:	f200 809a 	bhi.w	8015298 <HAL_SD_InitCard+0x238>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8015164:	0047      	lsls	r7, r0, #1
 8015166:	6822      	ldr	r2, [r4, #0]
 8015168:	d504      	bpl.n	8015174 <HAL_SD_InitCard+0x114>
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 801516a:	69a3      	ldr	r3, [r4, #24]
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 801516c:	2101      	movs	r1, #1
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 801516e:	2b02      	cmp	r3, #2
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8015170:	63e1      	str	r1, [r4, #60]	; 0x3c
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8015172:	d052      	beq.n	801521a <HAL_SD_InitCard+0x1ba>
  uint16_t sd_rca = 1U;
 8015174:	2301      	movs	r3, #1
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8015176:	4610      	mov	r0, r2
  uint16_t sd_rca = 1U;
 8015178:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 801517c:	f001 fb16 	bl	80167ac <SDMMC_GetPowerState>
 8015180:	2800      	cmp	r0, #0
 8015182:	d044      	beq.n	801520e <HAL_SD_InitCard+0x1ae>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8015184:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8015186:	6823      	ldr	r3, [r4, #0]
 8015188:	2a03      	cmp	r2, #3
 801518a:	d125      	bne.n	80151d8 <HAL_SD_InitCard+0x178>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 801518c:	4618      	mov	r0, r3
 801518e:	2104      	movs	r1, #4
 8015190:	f001 fb10 	bl	80167b4 <SDMMC_GetResponse>
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8015194:	a90d      	add	r1, sp, #52	; 0x34
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8015196:	0d03      	lsrs	r3, r0, #20
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8015198:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 801519a:	6463      	str	r3, [r4, #68]	; 0x44
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 801519c:	f7ff fea6 	bl	8014eec <HAL_SD_GetCardCSD>
 80151a0:	4606      	mov	r6, r0
 80151a2:	2800      	cmp	r0, #0
 80151a4:	d136      	bne.n	8015214 <HAL_SD_InitCard+0x1b4>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80151a6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80151a8:	4603      	mov	r3, r0
 80151aa:	6820      	ldr	r0, [r4, #0]
 80151ac:	0412      	lsls	r2, r2, #16
 80151ae:	f001 fcd5 	bl	8016b5c <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 80151b2:	b9b0      	cbnz	r0, 80151e2 <HAL_SD_InitCard+0x182>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80151b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80151b8:	6820      	ldr	r0, [r4, #0]
 80151ba:	f001 fb15 	bl	80167e8 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80151be:	2800      	cmp	r0, #0
 80151c0:	d091      	beq.n	80150e6 <HAL_SD_InitCard+0x86>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80151c2:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 80151c4:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80151c6:	495d      	ldr	r1, [pc, #372]	; (801533c <HAL_SD_InitCard+0x2dc>)
    return HAL_ERROR;
 80151c8:	4616      	mov	r6, r2
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80151ca:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80151cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80151ce:	4318      	orrs	r0, r3
 80151d0:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80151d2:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_ERROR;
 80151d6:	e786      	b.n	80150e6 <HAL_SD_InitCard+0x86>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80151d8:	4618      	mov	r0, r3
 80151da:	f001 fe73 	bl	8016ec4 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 80151de:	2800      	cmp	r0, #0
 80151e0:	d05d      	beq.n	801529e <HAL_SD_InitCard+0x23e>
    hsd->State = HAL_SD_STATE_READY;
 80151e2:	2601      	movs	r6, #1
 80151e4:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80151e8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80151ea:	4308      	orrs	r0, r1
 80151ec:	63a0      	str	r0, [r4, #56]	; 0x38
}
 80151ee:	4630      	mov	r0, r6
 80151f0:	b018      	add	sp, #96	; 0x60
 80151f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hsd->SdCard.CardVersion = CARD_V1_X;
 80151f6:	6425      	str	r5, [r4, #64]	; 0x40
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80151f8:	6820      	ldr	r0, [r4, #0]
 80151fa:	f001 fcf3 	bl	8016be4 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 80151fe:	4605      	mov	r5, r0
 8015200:	2800      	cmp	r0, #0
 8015202:	f47f af6a 	bne.w	80150da <HAL_SD_InitCard+0x7a>
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8015206:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015208:	2b01      	cmp	r3, #1
 801520a:	d180      	bne.n	801510e <HAL_SD_InitCard+0xae>
 801520c:	e77a      	b.n	8015104 <HAL_SD_InitCard+0xa4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 801520e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8015212:	e7e6      	b.n	80151e2 <HAL_SD_InitCard+0x182>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8015214:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8015218:	e7e3      	b.n	80151e2 <HAL_SD_InitCard+0x182>
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 801521a:	01c6      	lsls	r6, r0, #7
 801521c:	d5aa      	bpl.n	8015174 <HAL_SD_InitCard+0x114>
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 801521e:	6813      	ldr	r3, [r2, #0]
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8015220:	f44f 7100 	mov.w	r1, #512	; 0x200
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8015224:	4610      	mov	r0, r2
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8015226:	f043 0308 	orr.w	r3, r3, #8
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 801522a:	65e1      	str	r1, [r4, #92]	; 0x5c
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 801522c:	6013      	str	r3, [r2, #0]
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 801522e:	f001 ffe3 	bl	80171f8 <SDMMC_CmdVoltageSwitch>
        if(errorstate != HAL_SD_ERROR_NONE)
 8015232:	4605      	mov	r5, r0
 8015234:	b130      	cbz	r0, 8015244 <HAL_SD_InitCard+0x1e4>
 8015236:	e750      	b.n	80150da <HAL_SD_InitCard+0x7a>
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8015238:	f7f8 fb92 	bl	800d960 <HAL_GetTick>
 801523c:	eba0 0008 	sub.w	r0, r0, r8
 8015240:	3001      	adds	r0, #1
 8015242:	d07d      	beq.n	8015340 <HAL_SD_InitCard+0x2e0>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8015244:	6823      	ldr	r3, [r4, #0]
 8015246:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015248:	0155      	lsls	r5, r2, #5
 801524a:	d5f5      	bpl.n	8015238 <HAL_SD_InitCard+0x1d8>
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 801524c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8015250:	639a      	str	r2, [r3, #56]	; 0x38
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8015252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015254:	02d8      	lsls	r0, r3, #11
 8015256:	f57f af7c 	bpl.w	8015152 <HAL_SD_InitCard+0xf2>
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 801525a:	2001      	movs	r0, #1
 801525c:	f7f8 fb1a 	bl	800d894 <HAL_SD_DriveTransceiver_1_8V_Callback>
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8015260:	6822      	ldr	r2, [r4, #0]
 8015262:	6813      	ldr	r3, [r2, #0]
 8015264:	f043 0304 	orr.w	r3, r3, #4
 8015268:	6013      	str	r3, [r2, #0]
 801526a:	e006      	b.n	801527a <HAL_SD_InitCard+0x21a>
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 801526c:	f7f8 fb78 	bl	800d960 <HAL_GetTick>
 8015270:	eba0 0008 	sub.w	r0, r0, r8
 8015274:	3001      	adds	r0, #1
 8015276:	d063      	beq.n	8015340 <HAL_SD_InitCard+0x2e0>
 8015278:	6822      	ldr	r2, [r4, #0]
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 801527a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801527c:	0199      	lsls	r1, r3, #6
 801527e:	d5f5      	bpl.n	801526c <HAL_SD_InitCard+0x20c>
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8015280:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8015284:	6393      	str	r3, [r2, #56]	; 0x38
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8015286:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8015288:	02db      	lsls	r3, r3, #11
 801528a:	d405      	bmi.n	8015298 <HAL_SD_InitCard+0x238>
          hsd->Instance->POWER = 0x13U;
 801528c:	2113      	movs	r1, #19
          hsd->Instance->ICR = 0xFFFFFFFFU;
 801528e:	f04f 33ff 	mov.w	r3, #4294967295
          hsd->Instance->POWER = 0x13U;
 8015292:	6011      	str	r1, [r2, #0]
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8015294:	6393      	str	r3, [r2, #56]	; 0x38
 8015296:	e76d      	b.n	8015174 <HAL_SD_InitCard+0x114>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8015298:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 801529c:	e71d      	b.n	80150da <HAL_SD_InitCard+0x7a>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 801529e:	4601      	mov	r1, r0
 80152a0:	6820      	ldr	r0, [r4, #0]
 80152a2:	f001 fa87 	bl	80167b4 <SDMMC_GetResponse>
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80152a6:	2104      	movs	r1, #4
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80152a8:	6720      	str	r0, [r4, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80152aa:	6820      	ldr	r0, [r4, #0]
 80152ac:	f001 fa82 	bl	80167b4 <SDMMC_GetResponse>
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80152b0:	2108      	movs	r1, #8
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80152b2:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80152b4:	6820      	ldr	r0, [r4, #0]
 80152b6:	f001 fa7d 	bl	80167b4 <SDMMC_GetResponse>
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80152ba:	210c      	movs	r1, #12
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80152bc:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80152be:	6820      	ldr	r0, [r4, #0]
 80152c0:	f001 fa78 	bl	80167b4 <SDMMC_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80152c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80152c6:	67e0      	str	r0, [r4, #124]	; 0x7c
  if(hsd->SdCard.CardType != CARD_SECURED)
 80152c8:	2b03      	cmp	r3, #3
 80152ca:	d03c      	beq.n	8015346 <HAL_SD_InitCard+0x2e6>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80152cc:	f10d 0116 	add.w	r1, sp, #22
 80152d0:	6820      	ldr	r0, [r4, #0]
 80152d2:	f001 fe6f 	bl	8016fb4 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 80152d6:	2800      	cmp	r0, #0
 80152d8:	d183      	bne.n	80151e2 <HAL_SD_InitCard+0x182>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80152da:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80152dc:	6823      	ldr	r3, [r4, #0]
 80152de:	2a03      	cmp	r2, #3
 80152e0:	f43f af54 	beq.w	801518c <HAL_SD_InitCard+0x12c>
    hsd->SdCard.RelCardAdd = sd_rca;
 80152e4:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80152e8:	4618      	mov	r0, r3
    hsd->SdCard.RelCardAdd = sd_rca;
 80152ea:	64a1      	str	r1, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80152ec:	0409      	lsls	r1, r1, #16
 80152ee:	f001 fe25 	bl	8016f3c <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 80152f2:	2800      	cmp	r0, #0
 80152f4:	f47f af75 	bne.w	80151e2 <HAL_SD_InitCard+0x182>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80152f8:	4601      	mov	r1, r0
 80152fa:	6820      	ldr	r0, [r4, #0]
 80152fc:	f001 fa5a 	bl	80167b4 <SDMMC_GetResponse>
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8015300:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8015302:	6620      	str	r0, [r4, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8015304:	6820      	ldr	r0, [r4, #0]
 8015306:	f001 fa55 	bl	80167b4 <SDMMC_GetResponse>
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 801530a:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 801530c:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 801530e:	6820      	ldr	r0, [r4, #0]
 8015310:	f001 fa50 	bl	80167b4 <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8015314:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8015316:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8015318:	6820      	ldr	r0, [r4, #0]
 801531a:	f001 fa4b 	bl	80167b4 <SDMMC_GetResponse>
 801531e:	6823      	ldr	r3, [r4, #0]
 8015320:	66e0      	str	r0, [r4, #108]	; 0x6c
 8015322:	e733      	b.n	801518c <HAL_SD_InitCard+0x12c>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8015324:	9b06      	ldr	r3, [sp, #24]
 8015326:	42b3      	cmp	r3, r6
 8015328:	d8b6      	bhi.n	8015298 <HAL_SD_InitCard+0x238>
 801532a:	6822      	ldr	r2, [r4, #0]
 801532c:	e722      	b.n	8015174 <HAL_SD_InitCard+0x114>
 801532e:	bf00      	nop
 8015330:	014f8b59 	.word	0x014f8b59
 8015334:	00012110 	.word	0x00012110
 8015338:	c1100000 	.word	0xc1100000
 801533c:	1fe00fff 	.word	0x1fe00fff
            return HAL_SD_ERROR_TIMEOUT;
 8015340:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8015344:	e6c9      	b.n	80150da <HAL_SD_InitCard+0x7a>
 8015346:	6823      	ldr	r3, [r4, #0]
 8015348:	e720      	b.n	801518c <HAL_SD_InitCard+0x12c>
 801534a:	bf00      	nop

0801534c <HAL_SD_GetCardStatus>:
{
 801534c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015350:	4604      	mov	r4, r0
 8015352:	b097      	sub	sp, #92	; 0x5c
 8015354:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8015356:	f7f8 fb03 	bl	800d960 <HAL_GetTick>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 801535a:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
 801535c:	4680      	mov	r8, r0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 801535e:	6820      	ldr	r0, [r4, #0]
 8015360:	f001 fa28 	bl	80167b4 <SDMMC_GetResponse>
 8015364:	0187      	lsls	r7, r0, #6
 8015366:	d422      	bmi.n	80153ae <HAL_SD_GetCardStatus+0x62>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8015368:	2140      	movs	r1, #64	; 0x40
 801536a:	6820      	ldr	r0, [r4, #0]
 801536c:	f001 fa3c 	bl	80167e8 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8015370:	b308      	cbz	r0, 80153b6 <HAL_SD_GetCardStatus+0x6a>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8015372:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015374:	63a3      	str	r3, [r4, #56]	; 0x38
 8015376:	6823      	ldr	r3, [r4, #0]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8015378:	4a5a      	ldr	r2, [pc, #360]	; (80154e4 <HAL_SD_GetCardStatus+0x198>)
    hsd->State = HAL_SD_STATE_READY;
 801537a:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801537c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 801537e:	460e      	mov	r6, r1
    hsd->ErrorCode |= errorstate;
 8015380:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8015382:	4310      	orrs	r0, r2
 8015384:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8015386:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 801538a:	4618      	mov	r0, r3
 801538c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8015390:	f001 fa2a 	bl	80167e8 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8015394:	b138      	cbz	r0, 80153a6 <HAL_SD_GetCardStatus+0x5a>
    hsd->State = HAL_SD_STATE_READY;
 8015396:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8015398:	6822      	ldr	r2, [r4, #0]
 801539a:	4952      	ldr	r1, [pc, #328]	; (80154e4 <HAL_SD_GetCardStatus+0x198>)
    status = HAL_ERROR;
 801539c:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801539e:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80153a0:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80153a2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80153a6:	4630      	mov	r0, r6
 80153a8:	b017      	add	sp, #92	; 0x5c
 80153aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80153ae:	6823      	ldr	r3, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80153b0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80153b4:	e7e0      	b.n	8015378 <HAL_SD_GetCardStatus+0x2c>
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80153b6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80153b8:	6820      	ldr	r0, [r4, #0]
 80153ba:	0409      	lsls	r1, r1, #16
 80153bc:	f001 fc80 	bl	8016cc0 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 80153c0:	2800      	cmp	r0, #0
 80153c2:	d1d6      	bne.n	8015372 <HAL_SD_GetCardStatus+0x26>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80153c4:	f04f 32ff 	mov.w	r2, #4294967295
  config.DataLength    = 64U;
 80153c8:	2340      	movs	r3, #64	; 0x40
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80153ca:	2160      	movs	r1, #96	; 0x60
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80153cc:	9004      	str	r0, [sp, #16]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80153ce:	9200      	str	r2, [sp, #0]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80153d0:	2202      	movs	r2, #2
  config.DataLength    = 64U;
 80153d2:	9301      	str	r3, [sp, #4]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80153d4:	2301      	movs	r3, #1
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80153d6:	9102      	str	r1, [sp, #8]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80153d8:	4669      	mov	r1, sp
 80153da:	6820      	ldr	r0, [r4, #0]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80153dc:	9203      	str	r2, [sp, #12]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80153de:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80153e0:	f001 f9ec 	bl	80167bc <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80153e4:	6820      	ldr	r0, [r4, #0]
 80153e6:	f001 fe7d 	bl	80170e4 <SDMMC_CmdStatusRegister>
  if(errorstate != HAL_SD_ERROR_NONE)
 80153ea:	2800      	cmp	r0, #0
 80153ec:	d1c1      	bne.n	8015372 <HAL_SD_GetCardStatus+0x26>
  uint32_t *pData = pSDstatus;
 80153ee:	af06      	add	r7, sp, #24
 80153f0:	e005      	b.n	80153fe <HAL_SD_GetCardStatus+0xb2>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80153f2:	f7f8 fab5 	bl	800d960 <HAL_GetTick>
 80153f6:	eba0 0008 	sub.w	r0, r0, r8
 80153fa:	3001      	adds	r0, #1
 80153fc:	d013      	beq.n	8015426 <HAL_SD_GetCardStatus+0xda>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80153fe:	6823      	ldr	r3, [r4, #0]
 8015400:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015402:	f412 7f95 	tst.w	r2, #298	; 0x12a
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8015406:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8015408:	d110      	bne.n	801542c <HAL_SD_GetCardStatus+0xe0>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 801540a:	0416      	lsls	r6, r2, #16
 801540c:	d5f1      	bpl.n	80153f2 <HAL_SD_GetCardStatus+0xa6>
 801540e:	f107 0620 	add.w	r6, r7, #32
 8015412:	e000      	b.n	8015416 <HAL_SD_GetCardStatus+0xca>
 8015414:	6823      	ldr	r3, [r4, #0]
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8015416:	4618      	mov	r0, r3
 8015418:	f001 f9ae 	bl	8016778 <SDMMC_ReadFIFO>
 801541c:	f847 0b04 	str.w	r0, [r7], #4
      for(count = 0U; count < 8U; count++)
 8015420:	42b7      	cmp	r7, r6
 8015422:	d1f7      	bne.n	8015414 <HAL_SD_GetCardStatus+0xc8>
 8015424:	e7e5      	b.n	80153f2 <HAL_SD_GetCardStatus+0xa6>
      return HAL_SD_ERROR_TIMEOUT;
 8015426:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 801542a:	e7a4      	b.n	8015376 <HAL_SD_GetCardStatus+0x2a>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 801542c:	0710      	lsls	r0, r2, #28
 801542e:	d452      	bmi.n	80154d6 <HAL_SD_GetCardStatus+0x18a>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8015430:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015432:	0791      	lsls	r1, r2, #30
 8015434:	d451      	bmi.n	80154da <HAL_SD_GetCardStatus+0x18e>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8015436:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015438:	0692      	lsls	r2, r2, #26
 801543a:	d50b      	bpl.n	8015454 <HAL_SD_GetCardStatus+0x108>
 801543c:	e04f      	b.n	80154de <HAL_SD_GetCardStatus+0x192>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 801543e:	f001 f99b 	bl	8016778 <SDMMC_ReadFIFO>
 8015442:	f847 0b04 	str.w	r0, [r7], #4
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8015446:	f7f8 fa8b 	bl	800d960 <HAL_GetTick>
 801544a:	eba0 0008 	sub.w	r0, r0, r8
 801544e:	3001      	adds	r0, #1
 8015450:	d0e9      	beq.n	8015426 <HAL_SD_GetCardStatus+0xda>
 8015452:	6823      	ldr	r3, [r4, #0]
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8015454:	6b5e      	ldr	r6, [r3, #52]	; 0x34
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8015456:	4618      	mov	r0, r3
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8015458:	f416 5680 	ands.w	r6, r6, #4096	; 0x1000
 801545c:	d1ef      	bne.n	801543e <HAL_SD_GetCardStatus+0xf2>
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 801545e:	9f06      	ldr	r7, [sp, #24]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8015460:	9808      	ldr	r0, [sp, #32]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8015462:	0a39      	lsrs	r1, r7, #8
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8015464:	f3c7 1e40 	ubfx	lr, r7, #5, #1
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8015468:	f3c7 1881 	ubfx	r8, r7, #6, #2
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 801546c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 801546e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8015472:	ea4f 4c10 	mov.w	ip, r0, lsr #16
 8015476:	fa5f f982 	uxtb.w	r9, r2
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 801547a:	ea41 6117 	orr.w	r1, r1, r7, lsr #24
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801547e:	4f1a      	ldr	r7, [pc, #104]	; (80154e8 <HAL_SD_GetCardStatus+0x19c>)
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8015480:	f02c 0cff 	bic.w	ip, ip, #255	; 0xff
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8015484:	639f      	str	r7, [r3, #56]	; 0x38
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8015486:	b289      	uxth	r1, r1
 8015488:	9f07      	ldr	r7, [sp, #28]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 801548a:	ea4c 0c09 	orr.w	ip, ip, r9
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 801548e:	f885 8000 	strb.w	r8, [r5]
 8015492:	ba3f      	rev	r7, r7
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8015494:	f885 e001 	strb.w	lr, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8015498:	8069      	strh	r1, [r5, #2]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 801549a:	fa5f fe80 	uxtb.w	lr, r0
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 801549e:	606f      	str	r7, [r5, #4]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80154a0:	f3c0 5103 	ubfx	r1, r0, #20, #4
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80154a4:	f3c0 2707 	ubfx	r7, r0, #8, #8
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80154a8:	f885 e008 	strb.w	lr, [r5, #8]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80154ac:	f3c2 1003 	ubfx	r0, r2, #4, #4
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80154b0:	f3c2 2e85 	ubfx	lr, r2, #10, #6
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80154b4:	726f      	strb	r7, [r5, #9]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80154b6:	f3c2 2701 	ubfx	r7, r2, #8, #2
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80154ba:	72a9      	strb	r1, [r5, #10]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80154bc:	f002 020f 	and.w	r2, r2, #15
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80154c0:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80154c4:	f8a5 c00c 	strh.w	ip, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80154c8:	f885 e00e 	strb.w	lr, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80154cc:	73ef      	strb	r7, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80154ce:	7428      	strb	r0, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80154d0:	746a      	strb	r2, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80154d2:	74a9      	strb	r1, [r5, #18]
 80154d4:	e759      	b.n	801538a <HAL_SD_GetCardStatus+0x3e>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80154d6:	2008      	movs	r0, #8
 80154d8:	e74e      	b.n	8015378 <HAL_SD_GetCardStatus+0x2c>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80154da:	2002      	movs	r0, #2
 80154dc:	e74c      	b.n	8015378 <HAL_SD_GetCardStatus+0x2c>
    return HAL_SD_ERROR_RX_OVERRUN;
 80154de:	2020      	movs	r0, #32
 80154e0:	e74a      	b.n	8015378 <HAL_SD_GetCardStatus+0x2c>
 80154e2:	bf00      	nop
 80154e4:	1fe00fff 	.word	0x1fe00fff
 80154e8:	18000f3a 	.word	0x18000f3a

080154ec <HAL_SD_GetCardInfo>:
{
 80154ec:	4603      	mov	r3, r0
}
 80154ee:	2000      	movs	r0, #0
{
 80154f0:	b430      	push	{r4, r5}
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80154f2:	e9d3 250f 	ldrd	r2, r5, [r3, #60]	; 0x3c
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80154f6:	6c5c      	ldr	r4, [r3, #68]	; 0x44
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80154f8:	600a      	str	r2, [r1, #0]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80154fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80154fc:	604d      	str	r5, [r1, #4]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80154fe:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8015500:	608c      	str	r4, [r1, #8]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8015502:	6d1c      	ldr	r4, [r3, #80]	; 0x50
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8015504:	60ca      	str	r2, [r1, #12]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8015506:	e9d3 2315 	ldrd	r2, r3, [r3, #84]	; 0x54
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 801550a:	e9c1 5404 	strd	r5, r4, [r1, #16]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 801550e:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8015512:	bc30      	pop	{r4, r5}
 8015514:	4770      	bx	lr
 8015516:	bf00      	nop

08015518 <HAL_SD_ConfigWideBusOperation>:
  if(hsd->SdCard.CardType != CARD_SECURED)
 8015518:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  hsd->State = HAL_SD_STATE_BUSY;
 801551a:	2303      	movs	r3, #3
  if(hsd->SdCard.CardType != CARD_SECURED)
 801551c:	2a03      	cmp	r2, #3
{
 801551e:	b570      	push	{r4, r5, r6, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 8015520:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
{
 8015524:	b08a      	sub	sp, #40	; 0x28
 8015526:	4604      	mov	r4, r0
 8015528:	460d      	mov	r5, r1
 801552a:	6803      	ldr	r3, [r0, #0]
  if(hsd->SdCard.CardType != CARD_SECURED)
 801552c:	d026      	beq.n	801557c <HAL_SD_ConfigWideBusOperation+0x64>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 801552e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8015532:	d023      	beq.n	801557c <HAL_SD_ConfigWideBusOperation+0x64>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8015534:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8015538:	d065      	beq.n	8015606 <HAL_SD_ConfigWideBusOperation+0xee>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 801553a:	2900      	cmp	r1, #0
 801553c:	d044      	beq.n	80155c8 <HAL_SD_ConfigWideBusOperation+0xb0>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 801553e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8015540:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8015544:	6382      	str	r2, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8015546:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8015548:	b9fa      	cbnz	r2, 801558a <HAL_SD_ConfigWideBusOperation+0x72>
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 801554a:	6962      	ldr	r2, [r4, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 801554c:	6921      	ldr	r1, [r4, #16]
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 801554e:	2a03      	cmp	r2, #3
    Init.BusWide             = WideMode;
 8015550:	9506      	str	r5, [sp, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8015552:	9107      	str	r1, [sp, #28]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8015554:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
 8015558:	e9cd 6004 	strd	r6, r0, [sp, #16]
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 801555c:	d92b      	bls.n	80155b6 <HAL_SD_ConfigWideBusOperation+0x9e>
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 801555e:	9208      	str	r2, [sp, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 8015560:	aa0a      	add	r2, sp, #40	; 0x28
 8015562:	ae04      	add	r6, sp, #16
  HAL_StatusTypeDef status = HAL_OK;
 8015564:	2500      	movs	r5, #0
    (void)SDMMC_Init(hsd->Instance, Init);
 8015566:	e912 0007 	ldmdb	r2, {r0, r1, r2}
 801556a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801556e:	4618      	mov	r0, r3
 8015570:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8015574:	f001 f8e6 	bl	8016744 <SDMMC_Init>
 8015578:	6823      	ldr	r3, [r4, #0]
 801557a:	e009      	b.n	8015590 <HAL_SD_ConfigWideBusOperation+0x78>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801557c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801557e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8015582:	63a2      	str	r2, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8015584:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8015586:	2a00      	cmp	r2, #0
 8015588:	d0df      	beq.n	801554a <HAL_SD_ConfigWideBusOperation+0x32>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801558a:	4a33      	ldr	r2, [pc, #204]	; (8015658 <HAL_SD_ConfigWideBusOperation+0x140>)
    status = HAL_ERROR;
 801558c:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801558e:	639a      	str	r2, [r3, #56]	; 0x38
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8015590:	4618      	mov	r0, r3
 8015592:	f44f 7100 	mov.w	r1, #512	; 0x200
 8015596:	f001 f927 	bl	80167e8 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 801559a:	b130      	cbz	r0, 80155aa <HAL_SD_ConfigWideBusOperation+0x92>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801559c:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 801559e:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80155a0:	4a2d      	ldr	r2, [pc, #180]	; (8015658 <HAL_SD_ConfigWideBusOperation+0x140>)
 80155a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80155a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80155a6:	4318      	orrs	r0, r3
 80155a8:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 80155aa:	2301      	movs	r3, #1
}
 80155ac:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 80155ae:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80155b2:	b00a      	add	sp, #40	; 0x28
 80155b4:	bd70      	pop	{r4, r5, r6, pc}
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80155b6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80155b8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80155bc:	d0cf      	beq.n	801555e <HAL_SD_ConfigWideBusOperation+0x46>
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80155be:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80155c2:	d02d      	beq.n	8015620 <HAL_SD_ConfigWideBusOperation+0x108>
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 80155c4:	2204      	movs	r2, #4
 80155c6:	e7ca      	b.n	801555e <HAL_SD_ConfigWideBusOperation+0x46>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80155c8:	4618      	mov	r0, r3
  uint32_t scr[2U] = {0UL, 0UL};
 80155ca:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80155ce:	f001 f8f1 	bl	80167b4 <SDMMC_GetResponse>
 80155d2:	0181      	lsls	r1, r0, #6
 80155d4:	d420      	bmi.n	8015618 <HAL_SD_ConfigWideBusOperation+0x100>
  errorstate = SD_FindSCR(hsd, scr);
 80155d6:	a904      	add	r1, sp, #16
 80155d8:	4620      	mov	r0, r4
 80155da:	f7ff f8d3 	bl	8014784 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 80155de:	b968      	cbnz	r0, 80155fc <HAL_SD_ConfigWideBusOperation+0xe4>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80155e0:	9a05      	ldr	r2, [sp, #20]
 80155e2:	6823      	ldr	r3, [r4, #0]
 80155e4:	03d2      	lsls	r2, r2, #15
 80155e6:	d534      	bpl.n	8015652 <HAL_SD_ConfigWideBusOperation+0x13a>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80155e8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80155ea:	4618      	mov	r0, r3
 80155ec:	0409      	lsls	r1, r1, #16
 80155ee:	f001 fb67 	bl	8016cc0 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80155f2:	b918      	cbnz	r0, 80155fc <HAL_SD_ConfigWideBusOperation+0xe4>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80155f4:	4601      	mov	r1, r0
 80155f6:	6820      	ldr	r0, [r4, #0]
 80155f8:	f001 fbda 	bl	8016db0 <SDMMC_CmdBusWidth>
 80155fc:	6823      	ldr	r3, [r4, #0]
      hsd->ErrorCode |= errorstate;
 80155fe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8015600:	4310      	orrs	r0, r2
 8015602:	63a0      	str	r0, [r4, #56]	; 0x38
 8015604:	e7be      	b.n	8015584 <HAL_SD_ConfigWideBusOperation+0x6c>
  uint32_t scr[2U] = {0UL, 0UL};
 8015606:	2200      	movs	r2, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8015608:	4618      	mov	r0, r3
 801560a:	4611      	mov	r1, r2
  uint32_t scr[2U] = {0UL, 0UL};
 801560c:	e9cd 2204 	strd	r2, r2, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8015610:	f001 f8d0 	bl	80167b4 <SDMMC_GetResponse>
 8015614:	0186      	lsls	r6, r0, #6
 8015616:	d506      	bpl.n	8015626 <HAL_SD_ConfigWideBusOperation+0x10e>
 8015618:	6823      	ldr	r3, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 801561a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801561e:	e7ee      	b.n	80155fe <HAL_SD_ConfigWideBusOperation+0xe6>
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 8015620:	2202      	movs	r2, #2
 8015622:	9208      	str	r2, [sp, #32]
 8015624:	e79c      	b.n	8015560 <HAL_SD_ConfigWideBusOperation+0x48>
  errorstate = SD_FindSCR(hsd, scr);
 8015626:	a904      	add	r1, sp, #16
 8015628:	4620      	mov	r0, r4
 801562a:	f7ff f8ab 	bl	8014784 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 801562e:	2800      	cmp	r0, #0
 8015630:	d1e4      	bne.n	80155fc <HAL_SD_ConfigWideBusOperation+0xe4>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8015632:	9a05      	ldr	r2, [sp, #20]
 8015634:	6823      	ldr	r3, [r4, #0]
 8015636:	0350      	lsls	r0, r2, #13
 8015638:	d50b      	bpl.n	8015652 <HAL_SD_ConfigWideBusOperation+0x13a>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801563a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801563c:	4618      	mov	r0, r3
 801563e:	0409      	lsls	r1, r1, #16
 8015640:	f001 fb3e 	bl	8016cc0 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8015644:	2800      	cmp	r0, #0
 8015646:	d1d9      	bne.n	80155fc <HAL_SD_ConfigWideBusOperation+0xe4>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8015648:	2102      	movs	r1, #2
 801564a:	6820      	ldr	r0, [r4, #0]
 801564c:	f001 fbb0 	bl	8016db0 <SDMMC_CmdBusWidth>
 8015650:	e7d4      	b.n	80155fc <HAL_SD_ConfigWideBusOperation+0xe4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8015652:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8015656:	e7d2      	b.n	80155fe <HAL_SD_ConfigWideBusOperation+0xe6>
 8015658:	1fe00fff 	.word	0x1fe00fff

0801565c <HAL_SD_Init>:
{
 801565c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801565e:	b087      	sub	sp, #28
  if(hsd == NULL)
 8015660:	b1a0      	cbz	r0, 801568c <HAL_SD_Init+0x30>
  if(hsd->State == HAL_SD_STATE_RESET)
 8015662:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8015666:	4604      	mov	r4, r0
 8015668:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801566c:	b93b      	cbnz	r3, 801567e <HAL_SD_Init+0x22>
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 801566e:	6983      	ldr	r3, [r0, #24]
    hsd->Lock = HAL_UNLOCKED;
 8015670:	7702      	strb	r2, [r0, #28]
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8015672:	b90b      	cbnz	r3, 8015678 <HAL_SD_Init+0x1c>
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8015674:	2302      	movs	r3, #2
 8015676:	6183      	str	r3, [r0, #24]
    HAL_SD_MspInit(hsd);
 8015678:	4620      	mov	r0, r4
 801567a:	f7ff f977 	bl	801496c <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 801567e:	2303      	movs	r3, #3
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8015680:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 8015682:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8015686:	f7ff fceb 	bl	8015060 <HAL_SD_InitCard>
 801568a:	b118      	cbz	r0, 8015694 <HAL_SD_Init+0x38>
    return HAL_ERROR;
 801568c:	2501      	movs	r5, #1
}
 801568e:	4628      	mov	r0, r5
 8015690:	b007      	add	sp, #28
 8015692:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8015694:	a901      	add	r1, sp, #4
 8015696:	4620      	mov	r0, r4
 8015698:	f7ff fe58 	bl	801534c <HAL_SD_GetCardStatus>
 801569c:	2800      	cmp	r0, #0
 801569e:	d1f5      	bne.n	801568c <HAL_SD_Init+0x30>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80156a0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  speedgrade = CardStatus.UhsSpeedGrade;
 80156a2:	f89d 2014 	ldrb.w	r2, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80156a6:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
 80156a8:	f89d 3015 	ldrb.w	r3, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
 80156ac:	b2d2      	uxtb	r2, r2
  unitsize = CardStatus.UhsAllocationUnitSize;
 80156ae:	b2db      	uxtb	r3, r3
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80156b0:	d029      	beq.n	8015706 <HAL_SD_Init+0xaa>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80156b2:	65e0      	str	r0, [r4, #92]	; 0x5c
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80156b4:	68e1      	ldr	r1, [r4, #12]
 80156b6:	4620      	mov	r0, r4
 80156b8:	f7ff ff2e 	bl	8015518 <HAL_SD_ConfigWideBusOperation>
 80156bc:	4605      	mov	r5, r0
 80156be:	2800      	cmp	r0, #0
 80156c0:	d1e4      	bne.n	801568c <HAL_SD_Init+0x30>
  tickstart = HAL_GetTick();
 80156c2:	f7f8 f94d 	bl	800d960 <HAL_GetTick>
 80156c6:	4607      	mov	r7, r0
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80156c8:	e007      	b.n	80156da <HAL_SD_Init+0x7e>
    hsd->ErrorCode |= errorstate;
 80156ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80156cc:	431e      	orrs	r6, r3
 80156ce:	63a6      	str	r6, [r4, #56]	; 0x38
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 80156d0:	f7f8 f946 	bl	800d960 <HAL_GetTick>
 80156d4:	1bc0      	subs	r0, r0, r7
 80156d6:	3001      	adds	r0, #1
 80156d8:	d01d      	beq.n	8015716 <HAL_SD_Init+0xba>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80156da:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80156dc:	6820      	ldr	r0, [r4, #0]
 80156de:	0409      	lsls	r1, r1, #16
 80156e0:	f001 fcbc 	bl	801705c <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 80156e4:	4606      	mov	r6, r0
 80156e6:	2800      	cmp	r0, #0
 80156e8:	d1ef      	bne.n	80156ca <HAL_SD_Init+0x6e>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80156ea:	4601      	mov	r1, r0
 80156ec:	6820      	ldr	r0, [r4, #0]
 80156ee:	f001 f861 	bl	80167b4 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 80156f2:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80156f6:	2804      	cmp	r0, #4
 80156f8:	d1ea      	bne.n	80156d0 <HAL_SD_Init+0x74>
  hsd->State = HAL_SD_STATE_READY;
 80156fa:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80156fc:	63a6      	str	r6, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 80156fe:	6326      	str	r6, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8015700:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8015704:	e7c3      	b.n	801568e <HAL_SD_Init+0x32>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8015706:	4313      	orrs	r3, r2
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8015708:	bf14      	ite	ne
 801570a:	f44f 7300 	movne.w	r3, #512	; 0x200
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 801570e:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8015712:	65e3      	str	r3, [r4, #92]	; 0x5c
 8015714:	e7ce      	b.n	80156b4 <HAL_SD_Init+0x58>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8015716:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
      hsd->State= HAL_SD_STATE_READY;
 801571a:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 801571c:	2503      	movs	r5, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 801571e:	63a2      	str	r2, [r4, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8015720:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_TIMEOUT;
 8015724:	e7b3      	b.n	801568e <HAL_SD_Init+0x32>
 8015726:	bf00      	nop

08015728 <HAL_SD_ConfigSpeedBusOperation>:
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8015728:	6983      	ldr	r3, [r0, #24]
  hsd->State = HAL_SD_STATE_BUSY;
 801572a:	2203      	movs	r2, #3
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 801572c:	2b02      	cmp	r3, #2
{
 801572e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015732:	4604      	mov	r4, r0
 8015734:	b096      	sub	sp, #88	; 0x58
  hsd->State = HAL_SD_STATE_BUSY;
 8015736:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 801573a:	d076      	beq.n	801582a <HAL_SD_ConfigSpeedBusOperation+0x102>
    switch (SpeedMode)
 801573c:	2901      	cmp	r1, #1
 801573e:	d01e      	beq.n	801577e <HAL_SD_ConfigSpeedBusOperation+0x56>
 8015740:	d353      	bcc.n	80157ea <HAL_SD_ConfigSpeedBusOperation+0xc2>
 8015742:	2902      	cmp	r1, #2
 8015744:	d14b      	bne.n	80157de <HAL_SD_ConfigSpeedBusOperation+0xb6>
        if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 8015746:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8015748:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801574c:	d057      	beq.n	80157fe <HAL_SD_ConfigSpeedBusOperation+0xd6>
 801574e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015752:	d054      	beq.n	80157fe <HAL_SD_ConfigSpeedBusOperation+0xd6>
            (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED) ||
 8015754:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015756:	2b01      	cmp	r3, #1
 8015758:	d051      	beq.n	80157fe <HAL_SD_ConfigSpeedBusOperation+0xd6>
          hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801575a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
          status = HAL_ERROR;
 801575c:	2601      	movs	r6, #1
          hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801575e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015762:	63a3      	str	r3, [r4, #56]	; 0x38
 8015764:	e00c      	b.n	8015780 <HAL_SD_ConfigSpeedBusOperation+0x58>
        if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 8015766:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8015768:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801576c:	f000 809f 	beq.w	80158ae <HAL_SD_ConfigSpeedBusOperation+0x186>
 8015770:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8015772:	2a01      	cmp	r2, #1
 8015774:	f000 809b 	beq.w	80158ae <HAL_SD_ConfigSpeedBusOperation+0x186>
        else if (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED)
 8015778:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801577c:	d03f      	beq.n	80157fe <HAL_SD_ConfigSpeedBusOperation+0xd6>
  HAL_StatusTypeDef status = HAL_OK;
 801577e:	2600      	movs	r6, #0
  tickstart = HAL_GetTick();
 8015780:	f7f8 f8ee 	bl	800d960 <HAL_GetTick>
 8015784:	4605      	mov	r5, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8015786:	e007      	b.n	8015798 <HAL_SD_ConfigSpeedBusOperation+0x70>
    hsd->ErrorCode |= errorstate;
 8015788:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801578a:	4308      	orrs	r0, r1
 801578c:	63a0      	str	r0, [r4, #56]	; 0x38
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 801578e:	f7f8 f8e7 	bl	800d960 <HAL_GetTick>
 8015792:	1b40      	subs	r0, r0, r5
 8015794:	3001      	adds	r0, #1
 8015796:	d03d      	beq.n	8015814 <HAL_SD_ConfigSpeedBusOperation+0xec>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8015798:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801579a:	6820      	ldr	r0, [r4, #0]
 801579c:	0409      	lsls	r1, r1, #16
 801579e:	f001 fc5d 	bl	801705c <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 80157a2:	2800      	cmp	r0, #0
 80157a4:	d1f0      	bne.n	8015788 <HAL_SD_ConfigSpeedBusOperation+0x60>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80157a6:	4601      	mov	r1, r0
 80157a8:	6820      	ldr	r0, [r4, #0]
 80157aa:	f001 f803 	bl	80167b4 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 80157ae:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80157b2:	2804      	cmp	r0, #4
 80157b4:	d1eb      	bne.n	801578e <HAL_SD_ConfigSpeedBusOperation+0x66>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80157b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80157ba:	6820      	ldr	r0, [r4, #0]
 80157bc:	f001 f814 	bl	80167e8 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80157c0:	b130      	cbz	r0, 80157d0 <HAL_SD_ConfigSpeedBusOperation+0xa8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80157c2:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 80157c4:	2601      	movs	r6, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80157c6:	4a82      	ldr	r2, [pc, #520]	; (80159d0 <HAL_SD_ConfigSpeedBusOperation+0x2a8>)
 80157c8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80157ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80157cc:	4318      	orrs	r0, r3
 80157ce:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 80157d0:	2301      	movs	r3, #1
}
 80157d2:	4630      	mov	r0, r6
  hsd->State = HAL_SD_STATE_READY;
 80157d4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80157d8:	b016      	add	sp, #88	; 0x58
 80157da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80157de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      status = HAL_ERROR;
 80157e0:	2601      	movs	r6, #1
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80157e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80157e6:	63a3      	str	r3, [r4, #56]	; 0x38
      break;
 80157e8:	e7ca      	b.n	8015780 <HAL_SD_ConfigSpeedBusOperation+0x58>
        if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 80157ea:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80157ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80157f0:	d005      	beq.n	80157fe <HAL_SD_ConfigSpeedBusOperation+0xd6>
 80157f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80157f6:	d002      	beq.n	80157fe <HAL_SD_ConfigSpeedBusOperation+0xd6>
            (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED) ||
 80157f8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80157fa:	2b01      	cmp	r3, #1
 80157fc:	d1bf      	bne.n	801577e <HAL_SD_ConfigSpeedBusOperation+0x56>
          if (SD_HighSpeed(hsd) != HAL_SD_ERROR_NONE)
 80157fe:	4620      	mov	r0, r4
 8015800:	f7ff f830 	bl	8014864 <SD_HighSpeed>
 8015804:	2800      	cmp	r0, #0
 8015806:	d0ba      	beq.n	801577e <HAL_SD_ConfigSpeedBusOperation+0x56>
          hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8015808:	6ba3      	ldr	r3, [r4, #56]	; 0x38
          status = HAL_ERROR;
 801580a:	2601      	movs	r6, #1
          hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801580c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015810:	63a3      	str	r3, [r4, #56]	; 0x38
 8015812:	e7b5      	b.n	8015780 <HAL_SD_ConfigSpeedBusOperation+0x58>
      return HAL_TIMEOUT;
 8015814:	2603      	movs	r6, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8015816:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
      hsd->State = HAL_SD_STATE_READY;
 801581a:	2301      	movs	r3, #1
}
 801581c:	4630      	mov	r0, r6
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 801581e:	63a2      	str	r2, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8015820:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8015824:	b016      	add	sp, #88	; 0x58
 8015826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    switch (SpeedMode)
 801582a:	2904      	cmp	r1, #4
 801582c:	d8d7      	bhi.n	80157de <HAL_SD_ConfigSpeedBusOperation+0xb6>
 801582e:	a301      	add	r3, pc, #4	; (adr r3, 8015834 <HAL_SD_ConfigSpeedBusOperation+0x10c>)
 8015830:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8015834:	08015767 	.word	0x08015767
 8015838:	0801577f 	.word	0x0801577f
 801583c:	08015747 	.word	0x08015747
 8015840:	08015881 	.word	0x08015881
 8015844:	08015849 	.word	0x08015849
        if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 8015848:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 801584a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801584e:	d002      	beq.n	8015856 <HAL_SD_ConfigSpeedBusOperation+0x12e>
 8015850:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8015852:	2b01      	cmp	r3, #1
 8015854:	d181      	bne.n	801575a <HAL_SD_ConfigSpeedBusOperation+0x32>
  */
static uint32_t SD_DDR_Mode(SD_HandleTypeDef *hsd)
{
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  SDMMC_DataInitTypeDef sdmmc_datainitstructure;
  uint32_t SD_hs[16]  = {0};
 8015856:	2540      	movs	r5, #64	; 0x40
 8015858:	2100      	movs	r1, #0
 801585a:	a806      	add	r0, sp, #24
 801585c:	462a      	mov	r2, r5
 801585e:	f010 fc9c 	bl	802619a <memset>
  uint32_t count, loop = 0 ;
  uint32_t Timeout = HAL_GetTick();
 8015862:	f7f8 f87d 	bl	800d960 <HAL_GetTick>

  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 8015866:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  uint32_t Timeout = HAL_GetTick();
 8015868:	4607      	mov	r7, r0
  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 801586a:	b372      	cbz	r2, 80158ca <HAL_SD_ConfigSpeedBusOperation+0x1a2>
  {
     /* Standard Speed Card <= 12.5Mhz  */
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
  }

  if(hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 801586c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8015870:	6823      	ldr	r3, [r4, #0]
 8015872:	d032      	beq.n	80158da <HAL_SD_ConfigSpeedBusOperation+0x1b2>
  HAL_StatusTypeDef status = HAL_OK;
 8015874:	2600      	movs	r6, #0
          hsd->Instance->CLKCR |=  SDMMC_CLKCR_BUSSPEED | SDMMC_CLKCR_DDR;
 8015876:	685a      	ldr	r2, [r3, #4]
 8015878:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 801587c:	605a      	str	r2, [r3, #4]
 801587e:	e77f      	b.n	8015780 <HAL_SD_ConfigSpeedBusOperation+0x58>
        if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 8015880:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8015882:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015886:	d003      	beq.n	8015890 <HAL_SD_ConfigSpeedBusOperation+0x168>
 8015888:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 801588a:	2b01      	cmp	r3, #1
 801588c:	f47f af65 	bne.w	801575a <HAL_SD_ConfigSpeedBusOperation+0x32>
          if (SD_UltraHighSpeed(hsd) != HAL_SD_ERROR_NONE)
 8015890:	4620      	mov	r0, r4
 8015892:	f7ff fa87 	bl	8014da4 <SD_UltraHighSpeed>
 8015896:	b1b0      	cbz	r0, 80158c6 <HAL_SD_ConfigSpeedBusOperation+0x19e>
            hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8015898:	6ba3      	ldr	r3, [r4, #56]	; 0x38
            status = HAL_ERROR;
 801589a:	2601      	movs	r6, #1
            hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801589c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80158a0:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->Instance->CLKCR |= SDMMC_CLKCR_BUSSPEED;
 80158a2:	6822      	ldr	r2, [r4, #0]
 80158a4:	6853      	ldr	r3, [r2, #4]
 80158a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80158aa:	6053      	str	r3, [r2, #4]
 80158ac:	e768      	b.n	8015780 <HAL_SD_ConfigSpeedBusOperation+0x58>
          hsd->Instance->CLKCR |= SDMMC_CLKCR_BUSSPEED;
 80158ae:	6822      	ldr	r2, [r4, #0]
          if (SD_UltraHighSpeed(hsd) != HAL_SD_ERROR_NONE)
 80158b0:	4620      	mov	r0, r4
          hsd->Instance->CLKCR |= SDMMC_CLKCR_BUSSPEED;
 80158b2:	6853      	ldr	r3, [r2, #4]
 80158b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80158b8:	6053      	str	r3, [r2, #4]
          if (SD_UltraHighSpeed(hsd) != HAL_SD_ERROR_NONE)
 80158ba:	f7ff fa73 	bl	8014da4 <SD_UltraHighSpeed>
 80158be:	2800      	cmp	r0, #0
 80158c0:	f43f af5d 	beq.w	801577e <HAL_SD_ConfigSpeedBusOperation+0x56>
 80158c4:	e79b      	b.n	80157fe <HAL_SD_ConfigSpeedBusOperation+0xd6>
  HAL_StatusTypeDef status = HAL_OK;
 80158c6:	4606      	mov	r6, r0
 80158c8:	e7eb      	b.n	80158a2 <HAL_SD_ConfigSpeedBusOperation+0x17a>
 80158ca:	6820      	ldr	r0, [r4, #0]
            hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80158cc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80158ce:	4603      	mov	r3, r0
            status = HAL_ERROR;
 80158d0:	2601      	movs	r6, #1
            hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80158d2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80158d6:	63a2      	str	r2, [r4, #56]	; 0x38
 80158d8:	e7cd      	b.n	8015876 <HAL_SD_ConfigSpeedBusOperation+0x14e>
  {
    /* Initialize the Data control register */
    hsd->Instance->DCTRL = 0;
 80158da:	2200      	movs	r2, #0
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80158dc:	4618      	mov	r0, r3
 80158de:	4629      	mov	r1, r5
    hsd->Instance->DCTRL = 0;
 80158e0:	62da      	str	r2, [r3, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80158e2:	f000 ff81 	bl	80167e8 <SDMMC_CmdBlockLength>

    if (errorstate != HAL_SD_ERROR_NONE)
 80158e6:	2800      	cmp	r0, #0
 80158e8:	d1ef      	bne.n	80158ca <HAL_SD_ConfigSpeedBusOperation+0x1a2>
    {
      return errorstate;
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 80158ea:	f04f 33ff 	mov.w	r3, #4294967295
    sdmmc_datainitstructure.DataLength    = 64U;
    sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B ;
 80158ee:	2160      	movs	r1, #96	; 0x60
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80158f0:	2202      	movs	r2, #2
    sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80158f2:	9004      	str	r0, [sp, #16]
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 80158f4:	9300      	str	r3, [sp, #0]
    sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 80158f6:	2301      	movs	r3, #1
    sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B ;
 80158f8:	9102      	str	r1, [sp, #8]

    if ( SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure) != HAL_OK)
 80158fa:	4669      	mov	r1, sp
 80158fc:	6820      	ldr	r0, [r4, #0]
    sdmmc_datainitstructure.DataLength    = 64U;
 80158fe:	9501      	str	r5, [sp, #4]
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8015900:	9203      	str	r2, [sp, #12]
    sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8015902:	9305      	str	r3, [sp, #20]
    if ( SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure) != HAL_OK)
 8015904:	f000 ff5a 	bl	80167bc <SDMMC_ConfigData>
 8015908:	4606      	mov	r6, r0
 801590a:	2800      	cmp	r0, #0
 801590c:	d1dd      	bne.n	80158ca <HAL_SD_ConfigSpeedBusOperation+0x1a2>
    {
      return (HAL_SD_ERROR_GENERAL_UNKNOWN_ERR);
    }

    errorstate = SDMMC_CmdSwitch(hsd->Instance, SDMMC_DDR50_SWITCH_PATTERN);
 801590e:	4931      	ldr	r1, [pc, #196]	; (80159d4 <HAL_SD_ConfigSpeedBusOperation+0x2ac>)
 8015910:	6820      	ldr	r0, [r4, #0]
 8015912:	f001 fc2d 	bl	8017170 <SDMMC_CmdSwitch>
    if(errorstate != HAL_SD_ERROR_NONE)
 8015916:	4605      	mov	r5, r0
 8015918:	2800      	cmp	r0, #0
 801591a:	d1d6      	bne.n	80158ca <HAL_SD_ConfigSpeedBusOperation+0x1a2>
    {
      return errorstate;
    }

    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 801591c:	f240 582a 	movw	r8, #1322	; 0x52a
 8015920:	e004      	b.n	801592c <HAL_SD_ConfigSpeedBusOperation+0x204>
          SD_hs[(8U*loop)+count]  = SDMMC_ReadFIFO(hsd->Instance);
        }
        loop ++;
      }

      if((HAL_GetTick()-Timeout) >=  SDMMC_DATATIMEOUT)
 8015922:	f7f8 f81d 	bl	800d960 <HAL_GetTick>
 8015926:	1bc0      	subs	r0, r0, r7
 8015928:	3001      	adds	r0, #1
 801592a:	d03f      	beq.n	80159ac <HAL_SD_ConfigSpeedBusOperation+0x284>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 801592c:	6823      	ldr	r3, [r4, #0]
 801592e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015930:	4618      	mov	r0, r3
 8015932:	ea12 0f08 	tst.w	r2, r8
 8015936:	d113      	bne.n	8015960 <HAL_SD_ConfigSpeedBusOperation+0x238>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8015938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801593a:	041b      	lsls	r3, r3, #16
 801593c:	d5f1      	bpl.n	8015922 <HAL_SD_ConfigSpeedBusOperation+0x1fa>
 801593e:	016b      	lsls	r3, r5, #5
 8015940:	aa06      	add	r2, sp, #24
 8015942:	eb02 0a03 	add.w	sl, r2, r3
 8015946:	aa0e      	add	r2, sp, #56	; 0x38
 8015948:	eb02 0903 	add.w	r9, r2, r3
 801594c:	e000      	b.n	8015950 <HAL_SD_ConfigSpeedBusOperation+0x228>
 801594e:	6820      	ldr	r0, [r4, #0]
          SD_hs[(8U*loop)+count]  = SDMMC_ReadFIFO(hsd->Instance);
 8015950:	f000 ff12 	bl	8016778 <SDMMC_ReadFIFO>
 8015954:	f84a 0b04 	str.w	r0, [sl], #4
        for (count = 0U; count < 8U; count++)
 8015958:	45d1      	cmp	r9, sl
 801595a:	d1f8      	bne.n	801594e <HAL_SD_ConfigSpeedBusOperation+0x226>
        loop ++;
 801595c:	3501      	adds	r5, #1
 801595e:	e7e0      	b.n	8015922 <HAL_SD_ConfigSpeedBusOperation+0x1fa>
        hsd->State= HAL_SD_STATE_READY;
        return HAL_SD_ERROR_TIMEOUT;
      }
    }

    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8015960:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015962:	0715      	lsls	r5, r2, #28
 8015964:	d430      	bmi.n	80159c8 <HAL_SD_ConfigSpeedBusOperation+0x2a0>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);

      return errorstate;
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8015966:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015968:	0791      	lsls	r1, r2, #30
 801596a:	d42a      	bmi.n	80159c2 <HAL_SD_ConfigSpeedBusOperation+0x29a>

      errorstate = SDMMC_ERROR_DATA_CRC_FAIL;

      return errorstate;
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 801596c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801596e:	0692      	lsls	r2, r2, #26
 8015970:	d424      	bmi.n	80159bc <HAL_SD_ConfigSpeedBusOperation+0x294>
    {
      /* No error flag set */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8015972:	4919      	ldr	r1, [pc, #100]	; (80159d8 <HAL_SD_ConfigSpeedBusOperation+0x2b0>)

    /* Test if the switch mode  is ok */
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 8015974:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8015978:	6399      	str	r1, [r3, #56]	; 0x38
    if ((((uint8_t*)SD_hs)[13] & 2U) != 2U)
 801597a:	0793      	lsls	r3, r2, #30
 801597c:	d5a6      	bpl.n	80158cc <HAL_SD_ConfigSpeedBusOperation+0x1a4>
    else
    {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
      hsd->DriveTransceiver_1_8V_Callback(SET);
#else
      HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 801597e:	2001      	movs	r0, #1
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
#if defined (DLYB_SDMMC1) || defined (DLYB_SDMMC2)
      /* Enable DelayBlock Peripheral */
      /* SDMMC_CKin feedback clock selected as receive clock, for DDR50 */
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_0);
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 8015980:	4d16      	ldr	r5, [pc, #88]	; (80159dc <HAL_SD_ConfigSpeedBusOperation+0x2b4>)
      HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8015982:	f7f7 ff87 	bl	800d894 <HAL_SD_DriveTransceiver_1_8V_Callback>
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_0);
 8015986:	6822      	ldr	r2, [r4, #0]
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 8015988:	4915      	ldr	r1, [pc, #84]	; (80159e0 <HAL_SD_ConfigSpeedBusOperation+0x2b8>)
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_0);
 801598a:	6853      	ldr	r3, [r2, #4]
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 801598c:	4815      	ldr	r0, [pc, #84]	; (80159e4 <HAL_SD_ConfigSpeedBusOperation+0x2bc>)
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_0);
 801598e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 8015992:	42aa      	cmp	r2, r5
 8015994:	bf08      	it	eq
 8015996:	4608      	moveq	r0, r1
      MODIFY_REG(hsd->Instance->CLKCR, SDMMC_CLKCR_SELCLKRX,SDMMC_CLKCR_SELCLKRX_0);
 8015998:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801599c:	6053      	str	r3, [r2, #4]
      if (DelayBlock_Enable(SD_GET_DLYB_INSTANCE(hsd->Instance)) != HAL_OK)
 801599e:	f000 fe21 	bl	80165e4 <DelayBlock_Enable>
 80159a2:	4606      	mov	r6, r0
 80159a4:	2800      	cmp	r0, #0
 80159a6:	d190      	bne.n	80158ca <HAL_SD_ConfigSpeedBusOperation+0x1a2>
 80159a8:	6823      	ldr	r3, [r4, #0]
 80159aa:	e764      	b.n	8015876 <HAL_SD_ConfigSpeedBusOperation+0x14e>
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80159ac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
        hsd->State= HAL_SD_STATE_READY;
 80159b0:	2301      	movs	r3, #1
 80159b2:	6820      	ldr	r0, [r4, #0]
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80159b4:	63a2      	str	r2, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80159b6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 80159ba:	e787      	b.n	80158cc <HAL_SD_ConfigSpeedBusOperation+0x1a4>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80159bc:	2320      	movs	r3, #32
 80159be:	6383      	str	r3, [r0, #56]	; 0x38
 80159c0:	e784      	b.n	80158cc <HAL_SD_ConfigSpeedBusOperation+0x1a4>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80159c2:	2302      	movs	r3, #2
 80159c4:	6383      	str	r3, [r0, #56]	; 0x38
 80159c6:	e781      	b.n	80158cc <HAL_SD_ConfigSpeedBusOperation+0x1a4>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80159c8:	2208      	movs	r2, #8
 80159ca:	639a      	str	r2, [r3, #56]	; 0x38
 80159cc:	e753      	b.n	8015876 <HAL_SD_ConfigSpeedBusOperation+0x14e>
 80159ce:	bf00      	nop
 80159d0:	1fe00fff 	.word	0x1fe00fff
 80159d4:	80ffff04 	.word	0x80ffff04
 80159d8:	18000f3a 	.word	0x18000f3a
 80159dc:	52007000 	.word	0x52007000
 80159e0:	52008000 	.word	0x52008000
 80159e4:	48022800 	.word	0x48022800

080159e8 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80159e8:	6c81      	ldr	r1, [r0, #72]	; 0x48
{
 80159ea:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80159ec:	0409      	lsls	r1, r1, #16
{
 80159ee:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80159f0:	6800      	ldr	r0, [r0, #0]
 80159f2:	f001 fb33 	bl	801705c <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 80159f6:	4601      	mov	r1, r0
 80159f8:	b120      	cbz	r0, 8015a04 <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
 80159fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80159fc:	2000      	movs	r0, #0
 80159fe:	4319      	orrs	r1, r3
 8015a00:	63a1      	str	r1, [r4, #56]	; 0x38
}
 8015a02:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8015a04:	6820      	ldr	r0, [r4, #0]
 8015a06:	f000 fed5 	bl	80167b4 <SDMMC_GetResponse>
 8015a0a:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 8015a0e:	bd10      	pop	{r4, pc}

08015a10 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8015a12:	f8d0 6080 	ldr.w	r6, [r0, #128]	; 0x80
 8015a16:	2e20      	cmp	r6, #32
 8015a18:	d13d      	bne.n	8015a96 <HAL_UART_Transmit_DMA+0x86>
  {
    if ((pData == NULL) || (Size == 0U))
 8015a1a:	2900      	cmp	r1, #0
 8015a1c:	d03d      	beq.n	8015a9a <HAL_UART_Transmit_DMA+0x8a>
 8015a1e:	fab2 f782 	clz	r7, r2
 8015a22:	097f      	lsrs	r7, r7, #5
 8015a24:	2f00      	cmp	r7, #0
 8015a26:	d138      	bne.n	8015a9a <HAL_UART_Transmit_DMA+0x8a>
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 8015a28:	f890 407c 	ldrb.w	r4, [r0, #124]	; 0x7c
 8015a2c:	2c01      	cmp	r4, #1
 8015a2e:	d032      	beq.n	8015a96 <HAL_UART_Transmit_DMA+0x86>
 8015a30:	4613      	mov	r3, r2
 8015a32:	4605      	mov	r5, r0
    huart->pTxBuffPtr  = pData;
    huart->TxXferSize  = Size;
    huart->TxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8015a34:	2221      	movs	r2, #33	; 0x21
    __HAL_LOCK(huart);
 8015a36:	2401      	movs	r4, #1

    if (huart->hdmatx != NULL)
 8015a38:	f8d0 e074 	ldr.w	lr, [r0, #116]	; 0x74
    huart->TxXferCount = Size;
 8015a3c:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
    huart->pTxBuffPtr  = pData;
 8015a40:	6529      	str	r1, [r5, #80]	; 0x50
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015a42:	f8c0 7088 	str.w	r7, [r0, #136]	; 0x88
    huart->TxXferSize  = Size;
 8015a46:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8015a4a:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    __HAL_LOCK(huart);
 8015a4e:	f880 407c 	strb.w	r4, [r0, #124]	; 0x7c
 8015a52:	6802      	ldr	r2, [r0, #0]
    if (huart->hdmatx != NULL)
 8015a54:	f1be 0f00 	cmp.w	lr, #0
 8015a58:	d012      	beq.n	8015a80 <HAL_UART_Transmit_DMA+0x70>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8015a5a:	f8df c058 	ldr.w	ip, [pc, #88]	; 8015ab4 <HAL_UART_Transmit_DMA+0xa4>

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8015a5e:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8015a60:	4813      	ldr	r0, [pc, #76]	; (8015ab0 <HAL_UART_Transmit_DMA+0xa0>)
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8015a62:	f8ce c040 	str.w	ip, [lr, #64]	; 0x40
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8015a66:	f8df c050 	ldr.w	ip, [pc, #80]	; 8015ab8 <HAL_UART_Transmit_DMA+0xa8>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8015a6a:	f8ce 003c 	str.w	r0, [lr, #60]	; 0x3c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8015a6e:	4670      	mov	r0, lr
      huart->hdmatx->XferAbortCallback = NULL;
 8015a70:	f8ce 7050 	str.w	r7, [lr, #80]	; 0x50
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8015a74:	f8ce c04c 	str.w	ip, [lr, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8015a78:	f7f8 ff06 	bl	800e888 <HAL_DMA_Start_IT>
 8015a7c:	b978      	cbnz	r0, 8015a9e <HAL_UART_Transmit_DMA+0x8e>
 8015a7e:	682a      	ldr	r2, [r5, #0]

        return HAL_ERROR;
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8015a80:	2340      	movs	r3, #64	; 0x40

    __HAL_UNLOCK(huart);
 8015a82:	2100      	movs	r1, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8015a84:	6213      	str	r3, [r2, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);

    return HAL_OK;
 8015a86:	4608      	mov	r0, r1
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8015a88:	6893      	ldr	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 8015a8a:	f885 107c 	strb.w	r1, [r5, #124]	; 0x7c
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8015a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015a92:	6093      	str	r3, [r2, #8]
  }
  else
  {
    return HAL_BUSY;
  }
}
 8015a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8015a96:	2002      	movs	r0, #2
}
 8015a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8015a9a:	2001      	movs	r0, #1
}
 8015a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8015a9e:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);
 8015aa0:	f885 707c 	strb.w	r7, [r5, #124]	; 0x7c
        return HAL_ERROR;
 8015aa4:	4620      	mov	r0, r4
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8015aa6:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        huart->gState = HAL_UART_STATE_READY;
 8015aaa:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
}
 8015aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015ab0:	08015b91 	.word	0x08015b91
 8015ab4:	08015bc1 	.word	0x08015bc1
 8015ab8:	08015c19 	.word	0x08015c19

08015abc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015ac0:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
 8015ac4:	2e20      	cmp	r6, #32
 8015ac6:	d14b      	bne.n	8015b60 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8015ac8:	2900      	cmp	r1, #0
 8015aca:	d04c      	beq.n	8015b66 <HAL_UART_Receive_DMA+0xaa>
 8015acc:	fab2 f782 	clz	r7, r2
 8015ad0:	097f      	lsrs	r7, r7, #5
 8015ad2:	2f00      	cmp	r7, #0
 8015ad4:	d147      	bne.n	8015b66 <HAL_UART_Receive_DMA+0xaa>
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 8015ad6:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8015ada:	2b01      	cmp	r3, #1
 8015adc:	d040      	beq.n	8015b60 <HAL_UART_Receive_DMA+0xa4>
 8015ade:	4613      	mov	r3, r2
 8015ae0:	2401      	movs	r4, #1

    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8015ae2:	2222      	movs	r2, #34	; 0x22

    if (huart->hdmarx != NULL)
 8015ae4:	f8d0 e078 	ldr.w	lr, [r0, #120]	; 0x78
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015ae8:	f8c0 7088 	str.w	r7, [r0, #136]	; 0x88
 8015aec:	4605      	mov	r5, r0
    huart->pRxBuffPtr = pData;
 8015aee:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxXferSize = Size;
 8015af0:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
    __HAL_LOCK(huart);
 8015af4:	f880 407c 	strb.w	r4, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8015af8:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
 8015afc:	f8d0 c000 	ldr.w	ip, [r0]
    if (huart->hdmarx != NULL)
 8015b00:	f1be 0f00 	cmp.w	lr, #0
 8015b04:	d015      	beq.n	8015b32 <HAL_UART_Receive_DMA+0x76>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8015b06:	481e      	ldr	r0, [pc, #120]	; (8015b80 <HAL_UART_Receive_DMA+0xc4>)

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8015b08:	460a      	mov	r2, r1
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8015b0a:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8015b84 <HAL_UART_Receive_DMA+0xc8>
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8015b0e:	f10c 0124 	add.w	r1, ip, #36	; 0x24
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8015b12:	f8df c074 	ldr.w	ip, [pc, #116]	; 8015b88 <HAL_UART_Receive_DMA+0xcc>
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8015b16:	f8ce 003c 	str.w	r0, [lr, #60]	; 0x3c
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8015b1a:	4670      	mov	r0, lr
      huart->hdmarx->XferAbortCallback = NULL;
 8015b1c:	f8ce 7050 	str.w	r7, [lr, #80]	; 0x50
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8015b20:	f8ce 8040 	str.w	r8, [lr, #64]	; 0x40
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8015b24:	f8ce c04c 	str.w	ip, [lr, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8015b28:	f7f8 feae 	bl	800e888 <HAL_DMA_Start_IT>
 8015b2c:	b9f0      	cbnz	r0, 8015b6c <HAL_UART_Receive_DMA+0xb0>
 8015b2e:	f8d5 c000 	ldr.w	ip, [r5]
      }
    }
    __HAL_UNLOCK(huart);

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015b32:	f8dc 3000 	ldr.w	r3, [ip]
    __HAL_UNLOCK(huart);
 8015b36:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    __HAL_UNLOCK(huart);
 8015b3c:	f885 007c 	strb.w	r0, [r5, #124]	; 0x7c
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015b40:	f8cc 3000 	str.w	r3, [ip]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015b44:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8015b48:	f043 0301 	orr.w	r3, r3, #1
 8015b4c:	f8cc 3008 	str.w	r3, [ip, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015b50:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8015b54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015b58:	f8cc 3008 	str.w	r3, [ip, #8]
  }
  else
  {
    return HAL_BUSY;
  }
}
 8015b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8015b60:	2002      	movs	r0, #2
}
 8015b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 8015b66:	2001      	movs	r0, #1
}
 8015b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8015b6c:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);
 8015b6e:	f885 707c 	strb.w	r7, [r5, #124]	; 0x7c
        return HAL_ERROR;
 8015b72:	4620      	mov	r0, r4
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8015b74:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        huart->gState = HAL_UART_STATE_READY;
 8015b78:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
        return HAL_ERROR;
 8015b7c:	e7f1      	b.n	8015b62 <HAL_UART_Receive_DMA+0xa6>
 8015b7e:	bf00      	nop
 8015b80:	08015bd1 	.word	0x08015bd1
 8015b84:	08015c0d 	.word	0x08015c0d
 8015b88:	08015c19 	.word	0x08015c19

08015b8c <HAL_UART_TxCpltCallback>:
 8015b8c:	4770      	bx	lr
 8015b8e:	bf00      	nop

08015b90 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8015b90:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8015b92:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015b94:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8015b96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015b9a:	d00c      	beq.n	8015bb6 <UART_DMATransmitCplt+0x26>
  {
    huart->TxXferCount = 0U;

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8015b9c:	6803      	ldr	r3, [r0, #0]
    huart->TxXferCount = 0U;
 8015b9e:	2200      	movs	r2, #0
 8015ba0:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8015ba4:	689a      	ldr	r2, [r3, #8]
 8015ba6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8015baa:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8015bac:	681a      	ldr	r2, [r3, #0]
 8015bae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015bb2:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8015bb4:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8015bb6:	f7ff ffe9 	bl	8015b8c <HAL_UART_TxCpltCallback>
}
 8015bba:	bd08      	pop	{r3, pc}

08015bbc <HAL_UART_TxHalfCpltCallback>:
 8015bbc:	4770      	bx	lr
 8015bbe:	bf00      	nop

08015bc0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8015bc0:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8015bc2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8015bc4:	f7ff fffa 	bl	8015bbc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015bc8:	bd08      	pop	{r3, pc}
 8015bca:	bf00      	nop

08015bcc <HAL_UART_RxCpltCallback>:
 8015bcc:	4770      	bx	lr
 8015bce:	bf00      	nop

08015bd0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8015bd0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8015bd2:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015bd4:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8015bd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015bda:	d012      	beq.n	8015c02 <UART_DMAReceiveCplt+0x32>
  {
    huart->RxXferCount = 0U;

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015bdc:	6803      	ldr	r3, [r0, #0]
    huart->RxXferCount = 0U;
 8015bde:	2200      	movs	r2, #0
    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8015be0:	2120      	movs	r1, #32
    huart->RxXferCount = 0U;
 8015be2:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015be6:	681a      	ldr	r2, [r3, #0]
 8015be8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8015bec:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015bee:	689a      	ldr	r2, [r3, #8]
 8015bf0:	f022 0201 	bic.w	r2, r2, #1
 8015bf4:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015bf6:	689a      	ldr	r2, [r3, #8]
 8015bf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8015bfc:	609a      	str	r2, [r3, #8]
    huart->RxState = HAL_UART_STATE_READY;
 8015bfe:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8015c02:	f7ff ffe3 	bl	8015bcc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015c06:	bd08      	pop	{r3, pc}

08015c08 <HAL_UART_RxHalfCpltCallback>:
 8015c08:	4770      	bx	lr
 8015c0a:	bf00      	nop

08015c0c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8015c0c:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8015c0e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8015c10:	f7ff fffa 	bl	8015c08 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015c14:	bd08      	pop	{r3, pc}
 8015c16:	bf00      	nop

08015c18 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8015c18:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015c1a:	6b83      	ldr	r3, [r0, #56]	; 0x38

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8015c1c:	681a      	ldr	r2, [r3, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8015c1e:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8015c22:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8015c26:	6891      	ldr	r1, [r2, #8]
 8015c28:	060d      	lsls	r5, r1, #24
 8015c2a:	d501      	bpl.n	8015c30 <UART_DMAError+0x18>
 8015c2c:	2c21      	cmp	r4, #33	; 0x21
 8015c2e:	d01e      	beq.n	8015c6e <UART_DMAError+0x56>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8015c30:	6891      	ldr	r1, [r2, #8]
 8015c32:	0649      	lsls	r1, r1, #25
 8015c34:	d501      	bpl.n	8015c3a <UART_DMAError+0x22>
 8015c36:	2822      	cmp	r0, #34	; 0x22
 8015c38:	d009      	beq.n	8015c4e <UART_DMAError+0x36>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8015c3a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8015c3e:	4618      	mov	r0, r3
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8015c40:	f042 0210 	orr.w	r2, r2, #16
 8015c44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  HAL_UART_ErrorCallback(huart);
 8015c48:	f7ef f852 	bl	8004cf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015c4c:	bd38      	pop	{r3, r4, r5, pc}
    huart->RxXferCount = 0U;
 8015c4e:	2400      	movs	r4, #0
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8015c50:	490e      	ldr	r1, [pc, #56]	; (8015c8c <UART_DMAError+0x74>)
  huart->RxState = HAL_UART_STATE_READY;
 8015c52:	2520      	movs	r5, #32
    huart->RxXferCount = 0U;
 8015c54:	f8a3 405e 	strh.w	r4, [r3, #94]	; 0x5e
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015c58:	6810      	ldr	r0, [r2, #0]
 8015c5a:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 8015c5e:	6010      	str	r0, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8015c60:	6890      	ldr	r0, [r2, #8]
 8015c62:	4001      	ands	r1, r0
 8015c64:	6091      	str	r1, [r2, #8]
  huart->RxISR = NULL;
 8015c66:	66dc      	str	r4, [r3, #108]	; 0x6c
  huart->RxState = HAL_UART_STATE_READY;
 8015c68:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
 8015c6c:	e7e5      	b.n	8015c3a <UART_DMAError+0x22>
    huart->TxXferCount = 0U;
 8015c6e:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 8015c70:	2420      	movs	r4, #32
    huart->TxXferCount = 0U;
 8015c72:	f8a3 1056 	strh.w	r1, [r3, #86]	; 0x56
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8015c76:	6811      	ldr	r1, [r2, #0]
 8015c78:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8015c7c:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8015c7e:	6891      	ldr	r1, [r2, #8]
 8015c80:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8015c84:	6091      	str	r1, [r2, #8]
  huart->gState = HAL_UART_STATE_READY;
 8015c86:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
 8015c8a:	e7d1      	b.n	8015c30 <UART_DMAError+0x18>
 8015c8c:	effffffe 	.word	0xeffffffe

08015c90 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8015c90:	6802      	ldr	r2, [r0, #0]
{
 8015c92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8015c96:	69d3      	ldr	r3, [r2, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8015c98:	f640 050f 	movw	r5, #2063	; 0x80f
{
 8015c9c:	4604      	mov	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8015c9e:	6810      	ldr	r0, [r2, #0]
  if (errorflags == 0U)
 8015ca0:	422b      	tst	r3, r5
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8015ca2:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 8015ca4:	d070      	beq.n	8015d88 <HAL_UART_IRQHandler+0xf8>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8015ca6:	4d73      	ldr	r5, [pc, #460]	; (8015e74 <HAL_UART_IRQHandler+0x1e4>)
 8015ca8:	400d      	ands	r5, r1
 8015caa:	f000 808f 	beq.w	8015dcc <HAL_UART_IRQHandler+0x13c>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8015cae:	07df      	lsls	r7, r3, #31
 8015cb0:	d509      	bpl.n	8015cc6 <HAL_UART_IRQHandler+0x36>
 8015cb2:	05c6      	lsls	r6, r0, #23
 8015cb4:	d507      	bpl.n	8015cc6 <HAL_UART_IRQHandler+0x36>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8015cb6:	2601      	movs	r6, #1
 8015cb8:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8015cba:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
 8015cbe:	f046 0601 	orr.w	r6, r6, #1
 8015cc2:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015cc6:	079f      	lsls	r7, r3, #30
 8015cc8:	f003 0604 	and.w	r6, r3, #4
 8015ccc:	f140 8093 	bpl.w	8015df6 <HAL_UART_IRQHandler+0x166>
 8015cd0:	07cf      	lsls	r7, r1, #31
 8015cd2:	d50a      	bpl.n	8015cea <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8015cd4:	2702      	movs	r7, #2
 8015cd6:	6217      	str	r7, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8015cd8:	f8d4 7088 	ldr.w	r7, [r4, #136]	; 0x88
 8015cdc:	f047 0704 	orr.w	r7, r7, #4
 8015ce0:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015ce4:	2e00      	cmp	r6, #0
 8015ce6:	f040 808c 	bne.w	8015e02 <HAL_UART_IRQHandler+0x172>
    if (((isrflags & USART_ISR_ORE) != 0U)
 8015cea:	071f      	lsls	r7, r3, #28
 8015cec:	d505      	bpl.n	8015cfa <HAL_UART_IRQHandler+0x6a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8015cee:	0686      	lsls	r6, r0, #26
 8015cf0:	f100 8097 	bmi.w	8015e22 <HAL_UART_IRQHandler+0x192>
 8015cf4:	2d00      	cmp	r5, #0
 8015cf6:	f040 8094 	bne.w	8015e22 <HAL_UART_IRQHandler+0x192>
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8015cfa:	051f      	lsls	r7, r3, #20
 8015cfc:	d50a      	bpl.n	8015d14 <HAL_UART_IRQHandler+0x84>
 8015cfe:	0146      	lsls	r6, r0, #5
 8015d00:	d508      	bpl.n	8015d14 <HAL_UART_IRQHandler+0x84>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8015d02:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8015d06:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8015d08:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 8015d0c:	f045 0520 	orr.w	r5, r5, #32
 8015d10:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8015d14:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 8015d18:	2d00      	cmp	r5, #0
 8015d1a:	d06a      	beq.n	8015df2 <HAL_UART_IRQHandler+0x162>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8015d1c:	069d      	lsls	r5, r3, #26
 8015d1e:	d507      	bpl.n	8015d30 <HAL_UART_IRQHandler+0xa0>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8015d20:	0680      	lsls	r0, r0, #26
 8015d22:	f140 808b 	bpl.w	8015e3c <HAL_UART_IRQHandler+0x1ac>
        if (huart->RxISR != NULL)
 8015d26:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8015d28:	b113      	cbz	r3, 8015d30 <HAL_UART_IRQHandler+0xa0>
          huart->RxISR(huart);
 8015d2a:	4620      	mov	r0, r4
 8015d2c:	4798      	blx	r3
 8015d2e:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 8015d30:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8015d34:	6891      	ldr	r1, [r2, #8]
 8015d36:	064f      	lsls	r7, r1, #25
 8015d38:	d403      	bmi.n	8015d42 <HAL_UART_IRQHandler+0xb2>
 8015d3a:	f015 0528 	ands.w	r5, r5, #40	; 0x28
 8015d3e:	f000 8093 	beq.w	8015e68 <HAL_UART_IRQHandler+0x1d8>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015d42:	6811      	ldr	r1, [r2, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8015d44:	2520      	movs	r5, #32
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8015d46:	4b4c      	ldr	r3, [pc, #304]	; (8015e78 <HAL_UART_IRQHandler+0x1e8>)
  huart->RxISR = NULL;
 8015d48:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015d4a:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 8015d4e:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8015d50:	6891      	ldr	r1, [r2, #8]
 8015d52:	400b      	ands	r3, r1
 8015d54:	6093      	str	r3, [r2, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8015d56:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015d5a:	6893      	ldr	r3, [r2, #8]
  huart->RxISR = NULL;
 8015d5c:	66e0      	str	r0, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015d5e:	065e      	lsls	r6, r3, #25
 8015d60:	d568      	bpl.n	8015e34 <HAL_UART_IRQHandler+0x1a4>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015d62:	6893      	ldr	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 8015d64:	6fa1      	ldr	r1, [r4, #120]	; 0x78
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015d66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015d6a:	6093      	str	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 8015d6c:	2900      	cmp	r1, #0
 8015d6e:	d061      	beq.n	8015e34 <HAL_UART_IRQHandler+0x1a4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8015d70:	4b42      	ldr	r3, [pc, #264]	; (8015e7c <HAL_UART_IRQHandler+0x1ec>)
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8015d72:	4608      	mov	r0, r1
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8015d74:	650b      	str	r3, [r1, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8015d76:	f7f9 f8bf 	bl	800eef8 <HAL_DMA_Abort_IT>
 8015d7a:	2800      	cmp	r0, #0
 8015d7c:	d039      	beq.n	8015df2 <HAL_UART_IRQHandler+0x162>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8015d7e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
}
 8015d80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8015d84:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8015d86:	4718      	bx	r3
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8015d88:	069f      	lsls	r7, r3, #26
 8015d8a:	d509      	bpl.n	8015da0 <HAL_UART_IRQHandler+0x110>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8015d8c:	0686      	lsls	r6, r0, #26
 8015d8e:	d505      	bpl.n	8015d9c <HAL_UART_IRQHandler+0x10c>
      if (huart->RxISR != NULL)
 8015d90:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8015d92:	b373      	cbz	r3, 8015df2 <HAL_UART_IRQHandler+0x162>
      huart->TxISR(huart);
 8015d94:	4620      	mov	r0, r4
}
 8015d96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 8015d9a:	4718      	bx	r3
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8015d9c:	00cd      	lsls	r5, r1, #3
 8015d9e:	d4f7      	bmi.n	8015d90 <HAL_UART_IRQHandler+0x100>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8015da0:	02dd      	lsls	r5, r3, #11
 8015da2:	d409      	bmi.n	8015db8 <HAL_UART_IRQHandler+0x128>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8015da4:	061e      	lsls	r6, r3, #24
 8015da6:	d51a      	bpl.n	8015dde <HAL_UART_IRQHandler+0x14e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8015da8:	0605      	lsls	r5, r0, #24
 8015daa:	d516      	bpl.n	8015dda <HAL_UART_IRQHandler+0x14a>
    if (huart->TxISR != NULL)
 8015dac:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015dae:	b303      	cbz	r3, 8015df2 <HAL_UART_IRQHandler+0x162>
      huart->TxISR(huart);
 8015db0:	4620      	mov	r0, r4
}
 8015db2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 8015db6:	4718      	bx	r3
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8015db8:	024f      	lsls	r7, r1, #9
 8015dba:	d5f3      	bpl.n	8015da4 <HAL_UART_IRQHandler+0x114>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8015dbc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8015dc0:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8015dc2:	6213      	str	r3, [r2, #32]
}
 8015dc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8015dc8:	f000 bc06 	b.w	80165d8 <HAL_UARTEx_WakeupCallback>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8015dcc:	4e2c      	ldr	r6, [pc, #176]	; (8015e80 <HAL_UART_IRQHandler+0x1f0>)
 8015dce:	4230      	tst	r0, r6
 8015dd0:	d0e6      	beq.n	8015da0 <HAL_UART_IRQHandler+0x110>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8015dd2:	07df      	lsls	r7, r3, #31
 8015dd4:	f57f af77 	bpl.w	8015cc6 <HAL_UART_IRQHandler+0x36>
 8015dd8:	e76b      	b.n	8015cb2 <HAL_UART_IRQHandler+0x22>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8015dda:	020f      	lsls	r7, r1, #8
 8015ddc:	d4e6      	bmi.n	8015dac <HAL_UART_IRQHandler+0x11c>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8015dde:	065e      	lsls	r6, r3, #25
 8015de0:	d501      	bpl.n	8015de6 <HAL_UART_IRQHandler+0x156>
 8015de2:	0645      	lsls	r5, r0, #25
 8015de4:	d42e      	bmi.n	8015e44 <HAL_UART_IRQHandler+0x1b4>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8015de6:	0219      	lsls	r1, r3, #8
 8015de8:	d414      	bmi.n	8015e14 <HAL_UART_IRQHandler+0x184>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8015dea:	01db      	lsls	r3, r3, #7
 8015dec:	d501      	bpl.n	8015df2 <HAL_UART_IRQHandler+0x162>
 8015dee:	2800      	cmp	r0, #0
 8015df0:	db35      	blt.n	8015e5e <HAL_UART_IRQHandler+0x1ce>
}
 8015df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015df6:	2e00      	cmp	r6, #0
 8015df8:	f43f af77 	beq.w	8015cea <HAL_UART_IRQHandler+0x5a>
 8015dfc:	07ce      	lsls	r6, r1, #31
 8015dfe:	f57f af74 	bpl.w	8015cea <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8015e02:	2604      	movs	r6, #4
 8015e04:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8015e06:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
 8015e0a:	f046 0602 	orr.w	r6, r6, #2
 8015e0e:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
 8015e12:	e76a      	b.n	8015cea <HAL_UART_IRQHandler+0x5a>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8015e14:	0042      	lsls	r2, r0, #1
 8015e16:	d5e8      	bpl.n	8015dea <HAL_UART_IRQHandler+0x15a>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8015e18:	4620      	mov	r0, r4
}
 8015e1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8015e1e:	f000 bbdf 	b.w	80165e0 <HAL_UARTEx_TxFifoEmptyCallback>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8015e22:	2508      	movs	r5, #8
 8015e24:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8015e26:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 8015e2a:	f045 0508 	orr.w	r5, r5, #8
 8015e2e:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 8015e32:	e762      	b.n	8015cfa <HAL_UART_IRQHandler+0x6a>
            HAL_UART_ErrorCallback(huart);
 8015e34:	4620      	mov	r0, r4
 8015e36:	f7ee ff5b 	bl	8004cf0 <HAL_UART_ErrorCallback>
 8015e3a:	e7da      	b.n	8015df2 <HAL_UART_IRQHandler+0x162>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8015e3c:	00cb      	lsls	r3, r1, #3
 8015e3e:	f57f af77 	bpl.w	8015d30 <HAL_UART_IRQHandler+0xa0>
 8015e42:	e770      	b.n	8015d26 <HAL_UART_IRQHandler+0x96>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8015e44:	6813      	ldr	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8015e46:	2520      	movs	r5, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8015e48:	2100      	movs	r1, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8015e4a:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8015e4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015e50:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8015e52:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  huart->TxISR = NULL;
 8015e56:	6721      	str	r1, [r4, #112]	; 0x70
  HAL_UART_TxCpltCallback(huart);
 8015e58:	f7ff fe98 	bl	8015b8c <HAL_UART_TxCpltCallback>
 8015e5c:	e7c9      	b.n	8015df2 <HAL_UART_IRQHandler+0x162>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8015e5e:	4620      	mov	r0, r4
}
 8015e60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8015e64:	f000 bbba 	b.w	80165dc <HAL_UARTEx_RxFifoFullCallback>
        HAL_UART_ErrorCallback(huart);
 8015e68:	4620      	mov	r0, r4
 8015e6a:	f7ee ff41 	bl	8004cf0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015e6e:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 8015e72:	e7be      	b.n	8015df2 <HAL_UART_IRQHandler+0x162>
 8015e74:	10000001 	.word	0x10000001
 8015e78:	effffffe 	.word	0xeffffffe
 8015e7c:	08015e85 	.word	0x08015e85
 8015e80:	04000120 	.word	0x04000120

08015e84 <UART_DMAAbortOnError>:
{
 8015e84:	b508      	push	{r3, lr}
  huart->RxXferCount = 0U;
 8015e86:	2200      	movs	r2, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015e88:	6b83      	ldr	r3, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8015e8a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  HAL_UART_ErrorCallback(huart);
 8015e8e:	4618      	mov	r0, r3
  huart->TxXferCount = 0U;
 8015e90:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8015e94:	f7ee ff2c 	bl	8004cf0 <HAL_UART_ErrorCallback>
}
 8015e98:	bd08      	pop	{r3, pc}
 8015e9a:	bf00      	nop

08015e9c <HAL_UART_GetState>:
  temp1 = huart->gState;
 8015e9c:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
  temp2 = huart->RxState;
 8015ea0:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
}
 8015ea4:	4310      	orrs	r0, r2
 8015ea6:	4770      	bx	lr

08015ea8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8015ea8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015eaa:	07da      	lsls	r2, r3, #31
{
 8015eac:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8015eae:	d506      	bpl.n	8015ebe <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8015eb0:	6801      	ldr	r1, [r0, #0]
 8015eb2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8015eb4:	684a      	ldr	r2, [r1, #4]
 8015eb6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8015eba:	4322      	orrs	r2, r4
 8015ebc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8015ebe:	079c      	lsls	r4, r3, #30
 8015ec0:	d506      	bpl.n	8015ed0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8015ec2:	6801      	ldr	r1, [r0, #0]
 8015ec4:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8015ec6:	684a      	ldr	r2, [r1, #4]
 8015ec8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8015ecc:	4322      	orrs	r2, r4
 8015ece:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8015ed0:	0759      	lsls	r1, r3, #29
 8015ed2:	d506      	bpl.n	8015ee2 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8015ed4:	6801      	ldr	r1, [r0, #0]
 8015ed6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8015ed8:	684a      	ldr	r2, [r1, #4]
 8015eda:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8015ede:	4322      	orrs	r2, r4
 8015ee0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8015ee2:	071a      	lsls	r2, r3, #28
 8015ee4:	d506      	bpl.n	8015ef4 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8015ee6:	6801      	ldr	r1, [r0, #0]
 8015ee8:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8015eea:	684a      	ldr	r2, [r1, #4]
 8015eec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8015ef0:	4322      	orrs	r2, r4
 8015ef2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8015ef4:	06dc      	lsls	r4, r3, #27
 8015ef6:	d506      	bpl.n	8015f06 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8015ef8:	6801      	ldr	r1, [r0, #0]
 8015efa:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8015efc:	688a      	ldr	r2, [r1, #8]
 8015efe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8015f02:	4322      	orrs	r2, r4
 8015f04:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8015f06:	0699      	lsls	r1, r3, #26
 8015f08:	d506      	bpl.n	8015f18 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8015f0a:	6801      	ldr	r1, [r0, #0]
 8015f0c:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8015f0e:	688a      	ldr	r2, [r1, #8]
 8015f10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8015f14:	4322      	orrs	r2, r4
 8015f16:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8015f18:	065a      	lsls	r2, r3, #25
 8015f1a:	d50a      	bpl.n	8015f32 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8015f1c:	6801      	ldr	r1, [r0, #0]
 8015f1e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8015f20:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8015f22:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8015f26:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8015f2a:	ea42 0204 	orr.w	r2, r2, r4
 8015f2e:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8015f30:	d00b      	beq.n	8015f4a <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8015f32:	061b      	lsls	r3, r3, #24
 8015f34:	d506      	bpl.n	8015f44 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8015f36:	6802      	ldr	r2, [r0, #0]
 8015f38:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8015f3a:	6853      	ldr	r3, [r2, #4]
 8015f3c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8015f40:	430b      	orrs	r3, r1
 8015f42:	6053      	str	r3, [r2, #4]
}
 8015f44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015f48:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8015f4a:	684a      	ldr	r2, [r1, #4]
 8015f4c:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8015f4e:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8015f52:	4322      	orrs	r2, r4
 8015f54:	604a      	str	r2, [r1, #4]
 8015f56:	e7ec      	b.n	8015f32 <UART_AdvFeatureConfig+0x8a>

08015f58 <HAL_UART_Init>:
  if (huart == NULL)
 8015f58:	2800      	cmp	r0, #0
 8015f5a:	f000 80d2 	beq.w	8016102 <HAL_UART_Init+0x1aa>
  if (huart->gState == HAL_UART_STATE_RESET)
 8015f5e:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
{
 8015f62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015f66:	4604      	mov	r4, r0
 8015f68:	b087      	sub	sp, #28
  if (huart->gState == HAL_UART_STATE_RESET)
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	d058      	beq.n	8016020 <HAL_UART_Init+0xc8>
  __HAL_UART_DISABLE(huart);
 8015f6e:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8015f70:	2024      	movs	r0, #36	; 0x24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8015f72:	6921      	ldr	r1, [r4, #16]
 8015f74:	68a2      	ldr	r2, [r4, #8]
  huart->gState = HAL_UART_STATE_BUSY;
 8015f76:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8015f7a:	430a      	orrs	r2, r1
  __HAL_UART_DISABLE(huart);
 8015f7c:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8015f7e:	6960      	ldr	r0, [r4, #20]
 8015f80:	69e1      	ldr	r1, [r4, #28]
  __HAL_UART_DISABLE(huart);
 8015f82:	f025 0501 	bic.w	r5, r5, #1
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8015f86:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8015f88:	48a1      	ldr	r0, [pc, #644]	; (8016210 <HAL_UART_Init+0x2b8>)
  __HAL_UART_DISABLE(huart);
 8015f8a:	601d      	str	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8015f8c:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8015f8e:	681e      	ldr	r6, [r3, #0]
  tmpreg |= (uint32_t)huart->FifoMode;
 8015f90:	6e65      	ldr	r5, [r4, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8015f92:	4030      	ands	r0, r6
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8015f94:	68e7      	ldr	r7, [r4, #12]
  tmpreg |= (uint32_t)huart->FifoMode;
 8015f96:	432a      	orrs	r2, r5
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8015f98:	f8d4 c018 	ldr.w	ip, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8015f9c:	4e9d      	ldr	r6, [pc, #628]	; (8016214 <HAL_UART_Init+0x2bc>)
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8015f9e:	4302      	orrs	r2, r0
 8015fa0:	6a65      	ldr	r5, [r4, #36]	; 0x24
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8015fa2:	42b3      	cmp	r3, r6
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8015fa4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8015fa6:	685a      	ldr	r2, [r3, #4]
 8015fa8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8015fac:	ea42 0207 	orr.w	r2, r2, r7
 8015fb0:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8015fb2:	f000 808b 	beq.w	80160cc <HAL_UART_Init+0x174>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8015fb6:	689e      	ldr	r6, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8015fb8:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8015fba:	4897      	ldr	r0, [pc, #604]	; (8016218 <HAL_UART_Init+0x2c0>)
    tmpreg |= huart->Init.OneBitSampling;
 8015fbc:	ea4c 0202 	orr.w	r2, ip, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8015fc0:	4030      	ands	r0, r6
  UART_GETCLOCKSOURCE(huart, clocksource);
 8015fc2:	4e96      	ldr	r6, [pc, #600]	; (801621c <HAL_UART_Init+0x2c4>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8015fc4:	4302      	orrs	r2, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 8015fc6:	42b3      	cmp	r3, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8015fc8:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8015fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015fcc:	f022 020f 	bic.w	r2, r2, #15
 8015fd0:	ea42 0205 	orr.w	r2, r2, r5
 8015fd4:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8015fd6:	d028      	beq.n	801602a <HAL_UART_Init+0xd2>
 8015fd8:	4a91      	ldr	r2, [pc, #580]	; (8016220 <HAL_UART_Init+0x2c8>)
 8015fda:	4293      	cmp	r3, r2
 8015fdc:	f000 810e 	beq.w	80161fc <HAL_UART_Init+0x2a4>
 8015fe0:	4a90      	ldr	r2, [pc, #576]	; (8016224 <HAL_UART_Init+0x2cc>)
 8015fe2:	4293      	cmp	r3, r2
 8015fe4:	f000 8100 	beq.w	80161e8 <HAL_UART_Init+0x290>
 8015fe8:	4a8f      	ldr	r2, [pc, #572]	; (8016228 <HAL_UART_Init+0x2d0>)
 8015fea:	4293      	cmp	r3, r2
 8015fec:	f000 829e 	beq.w	801652c <HAL_UART_Init+0x5d4>
 8015ff0:	4a8e      	ldr	r2, [pc, #568]	; (801622c <HAL_UART_Init+0x2d4>)
 8015ff2:	4293      	cmp	r3, r2
 8015ff4:	f000 82a4 	beq.w	8016540 <HAL_UART_Init+0x5e8>
 8015ff8:	4a8d      	ldr	r2, [pc, #564]	; (8016230 <HAL_UART_Init+0x2d8>)
 8015ffa:	4293      	cmp	r3, r2
 8015ffc:	f000 82aa 	beq.w	8016554 <HAL_UART_Init+0x5fc>
 8016000:	4a8c      	ldr	r2, [pc, #560]	; (8016234 <HAL_UART_Init+0x2dc>)
 8016002:	4293      	cmp	r3, r2
 8016004:	f000 82c5 	beq.w	8016592 <HAL_UART_Init+0x63a>
 8016008:	4a8b      	ldr	r2, [pc, #556]	; (8016238 <HAL_UART_Init+0x2e0>)
 801600a:	4293      	cmp	r3, r2
 801600c:	d16f      	bne.n	80160ee <HAL_UART_Init+0x196>
 801600e:	4b8b      	ldr	r3, [pc, #556]	; (801623c <HAL_UART_Init+0x2e4>)
 8016010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016012:	f003 0307 	and.w	r3, r3, #7
 8016016:	2b05      	cmp	r3, #5
 8016018:	d869      	bhi.n	80160ee <HAL_UART_Init+0x196>
 801601a:	4a89      	ldr	r2, [pc, #548]	; (8016240 <HAL_UART_Init+0x2e8>)
 801601c:	5cd3      	ldrb	r3, [r2, r3]
 801601e:	e00c      	b.n	801603a <HAL_UART_Init+0xe2>
    huart->Lock = HAL_UNLOCKED;
 8016020:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 8016024:	f7f0 fd2c 	bl	8006a80 <HAL_UART_MspInit>
 8016028:	e7a1      	b.n	8015f6e <HAL_UART_Init+0x16>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801602a:	4b84      	ldr	r3, [pc, #528]	; (801623c <HAL_UART_Init+0x2e4>)
 801602c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801602e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8016032:	2b28      	cmp	r3, #40	; 0x28
 8016034:	d85b      	bhi.n	80160ee <HAL_UART_Init+0x196>
 8016036:	4a83      	ldr	r2, [pc, #524]	; (8016244 <HAL_UART_Init+0x2ec>)
 8016038:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801603a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 801603e:	f000 810f 	beq.w	8016260 <HAL_UART_Init+0x308>
    switch (clocksource)
 8016042:	2b40      	cmp	r3, #64	; 0x40
 8016044:	d853      	bhi.n	80160ee <HAL_UART_Init+0x196>
 8016046:	e8df f013 	tbh	[pc, r3, lsl #1]
 801604a:	0209      	.short	0x0209
 801604c:	0052020c 	.word	0x0052020c
 8016050:	02040052 	.word	0x02040052
 8016054:	00520052 	.word	0x00520052
 8016058:	01fc0052 	.word	0x01fc0052
 801605c:	00520052 	.word	0x00520052
 8016060:	00520052 	.word	0x00520052
 8016064:	00520052 	.word	0x00520052
 8016068:	01d00052 	.word	0x01d00052
 801606c:	00520052 	.word	0x00520052
 8016070:	00520052 	.word	0x00520052
 8016074:	00520052 	.word	0x00520052
 8016078:	00520052 	.word	0x00520052
 801607c:	00520052 	.word	0x00520052
 8016080:	00520052 	.word	0x00520052
 8016084:	00520052 	.word	0x00520052
 8016088:	02120052 	.word	0x02120052
 801608c:	00520052 	.word	0x00520052
 8016090:	00520052 	.word	0x00520052
 8016094:	00520052 	.word	0x00520052
 8016098:	00520052 	.word	0x00520052
 801609c:	00520052 	.word	0x00520052
 80160a0:	00520052 	.word	0x00520052
 80160a4:	00520052 	.word	0x00520052
 80160a8:	00520052 	.word	0x00520052
 80160ac:	00520052 	.word	0x00520052
 80160b0:	00520052 	.word	0x00520052
 80160b4:	00520052 	.word	0x00520052
 80160b8:	00520052 	.word	0x00520052
 80160bc:	00520052 	.word	0x00520052
 80160c0:	00520052 	.word	0x00520052
 80160c4:	00520052 	.word	0x00520052
 80160c8:	020f0052 	.word	0x020f0052
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80160cc:	6898      	ldr	r0, [r3, #8]
 80160ce:	4a52      	ldr	r2, [pc, #328]	; (8016218 <HAL_UART_Init+0x2c0>)
  UART_GETCLOCKSOURCE(huart, clocksource);
 80160d0:	495a      	ldr	r1, [pc, #360]	; (801623c <HAL_UART_Init+0x2e4>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80160d2:	4002      	ands	r2, r0
 80160d4:	ea42 020c 	orr.w	r2, r2, ip
 80160d8:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80160da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80160dc:	f022 020f 	bic.w	r2, r2, #15
 80160e0:	432a      	orrs	r2, r5
 80160e2:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80160e4:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 80160e6:	f003 0307 	and.w	r3, r3, #7
 80160ea:	2b05      	cmp	r3, #5
 80160ec:	d90b      	bls.n	8016106 <HAL_UART_Init+0x1ae>
  huart->RxISR = NULL;
 80160ee:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 80160f0:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    return HAL_ERROR;
 80160f4:	2001      	movs	r0, #1
  huart->TxISR = NULL;
 80160f6:	6723      	str	r3, [r4, #112]	; 0x70
  huart->RxISR = NULL;
 80160f8:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
}
 80160fc:	b007      	add	sp, #28
 80160fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_ERROR;
 8016102:	2001      	movs	r0, #1
}
 8016104:	4770      	bx	lr
    switch (clocksource)
 8016106:	4a50      	ldr	r2, [pc, #320]	; (8016248 <HAL_UART_Init+0x2f0>)
 8016108:	5cd3      	ldrb	r3, [r2, r3]
 801610a:	2b08      	cmp	r3, #8
 801610c:	f000 823c 	beq.w	8016588 <HAL_UART_Init+0x630>
 8016110:	f240 822a 	bls.w	8016568 <HAL_UART_Init+0x610>
 8016114:	2b20      	cmp	r3, #32
 8016116:	f000 81ac 	beq.w	8016472 <HAL_UART_Init+0x51a>
 801611a:	2b40      	cmp	r3, #64	; 0x40
 801611c:	f000 8245 	beq.w	80165aa <HAL_UART_Init+0x652>
 8016120:	2b10      	cmp	r3, #16
 8016122:	d1e4      	bne.n	80160ee <HAL_UART_Init+0x196>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8016124:	680b      	ldr	r3, [r1, #0]
 8016126:	069f      	lsls	r7, r3, #26
 8016128:	f140 8242 	bpl.w	80165b0 <HAL_UART_Init+0x658>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801612c:	680b      	ldr	r3, [r1, #0]
 801612e:	4847      	ldr	r0, [pc, #284]	; (801624c <HAL_UART_Init+0x2f4>)
 8016130:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8016134:	40d8      	lsrs	r0, r3
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8016136:	4b46      	ldr	r3, [pc, #280]	; (8016250 <HAL_UART_Init+0x2f8>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8016138:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801613a:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801613e:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8016142:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8016146:	428b      	cmp	r3, r1
 8016148:	d3d1      	bcc.n	80160ee <HAL_UART_Init+0x196>
 801614a:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 801614e:	d8ce      	bhi.n	80160ee <HAL_UART_Init+0x196>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8016150:	2500      	movs	r5, #0
 8016152:	2300      	movs	r3, #0
 8016154:	0877      	lsrs	r7, r6, #1
 8016156:	4629      	mov	r1, r5
 8016158:	f7ea f92a 	bl	80003b0 <__aeabi_uldivmod>
 801615c:	4632      	mov	r2, r6
 801615e:	ea4f 2901 	mov.w	r9, r1, lsl #8
 8016162:	462b      	mov	r3, r5
 8016164:	ea4f 2800 	mov.w	r8, r0, lsl #8
 8016168:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
 801616c:	eb18 0007 	adds.w	r0, r8, r7
 8016170:	f149 0100 	adc.w	r1, r9, #0
 8016174:	f7ea f91c 	bl	80003b0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8016178:	4b36      	ldr	r3, [pc, #216]	; (8016254 <HAL_UART_Init+0x2fc>)
 801617a:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 801617e:	429a      	cmp	r2, r3
 8016180:	d8b5      	bhi.n	80160ee <HAL_UART_Init+0x196>
          huart->Instance->BRR = usartdiv;
 8016182:	6822      	ldr	r2, [r4, #0]
  huart->NbRxDataToProcess = 1;
 8016184:	f04f 1301 	mov.w	r3, #65537	; 0x10001
          huart->Instance->BRR = usartdiv;
 8016188:	60d0      	str	r0, [r2, #12]
  huart->NbRxDataToProcess = 1;
 801618a:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 801618c:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8016190:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016192:	2b00      	cmp	r3, #0
 8016194:	f040 8151 	bne.w	801643a <HAL_UART_Init+0x4e2>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8016198:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801619a:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801619c:	685a      	ldr	r2, [r3, #4]
 801619e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80161a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80161a4:	689a      	ldr	r2, [r3, #8]
 80161a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80161aa:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80161ac:	681a      	ldr	r2, [r3, #0]
 80161ae:	f042 0201 	orr.w	r2, r2, #1
 80161b2:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80161b4:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  tickstart = HAL_GetTick();
 80161b8:	f7f7 fbd2 	bl	800d960 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80161bc:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80161be:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80161c0:	681a      	ldr	r2, [r3, #0]
 80161c2:	0711      	lsls	r1, r2, #28
 80161c4:	f100 80d4 	bmi.w	8016370 <HAL_UART_Init+0x418>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80161c8:	681a      	ldr	r2, [r3, #0]
 80161ca:	0750      	lsls	r0, r2, #29
 80161cc:	f100 80f9 	bmi.w	80163c2 <HAL_UART_Init+0x46a>
  __HAL_UNLOCK(huart);
 80161d0:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80161d2:	2220      	movs	r2, #32
  return HAL_OK;
 80161d4:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 80161d6:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 80161da:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80161de:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
}
 80161e2:	b007      	add	sp, #28
 80161e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80161e8:	4b14      	ldr	r3, [pc, #80]	; (801623c <HAL_UART_Init+0x2e4>)
 80161ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80161ec:	f003 0307 	and.w	r3, r3, #7
 80161f0:	2b05      	cmp	r3, #5
 80161f2:	f63f af7c 	bhi.w	80160ee <HAL_UART_Init+0x196>
 80161f6:	4a18      	ldr	r2, [pc, #96]	; (8016258 <HAL_UART_Init+0x300>)
 80161f8:	5cd3      	ldrb	r3, [r2, r3]
 80161fa:	e71e      	b.n	801603a <HAL_UART_Init+0xe2>
 80161fc:	4b0f      	ldr	r3, [pc, #60]	; (801623c <HAL_UART_Init+0x2e4>)
 80161fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016200:	f003 0307 	and.w	r3, r3, #7
 8016204:	2b05      	cmp	r3, #5
 8016206:	f63f af72 	bhi.w	80160ee <HAL_UART_Init+0x196>
 801620a:	4a14      	ldr	r2, [pc, #80]	; (801625c <HAL_UART_Init+0x304>)
 801620c:	5cd3      	ldrb	r3, [r2, r3]
 801620e:	e714      	b.n	801603a <HAL_UART_Init+0xe2>
 8016210:	cfff69f3 	.word	0xcfff69f3
 8016214:	58000c00 	.word	0x58000c00
 8016218:	11fff4ff 	.word	0x11fff4ff
 801621c:	40011000 	.word	0x40011000
 8016220:	40004400 	.word	0x40004400
 8016224:	40004800 	.word	0x40004800
 8016228:	40004c00 	.word	0x40004c00
 801622c:	40005000 	.word	0x40005000
 8016230:	40011400 	.word	0x40011400
 8016234:	40007800 	.word	0x40007800
 8016238:	40007c00 	.word	0x40007c00
 801623c:	58024400 	.word	0x58024400
 8016240:	080bfc18 	.word	0x080bfc18
 8016244:	080bfbec 	.word	0x080bfbec
 8016248:	080bfc20 	.word	0x080bfc20
 801624c:	03d09000 	.word	0x03d09000
 8016250:	080bfc28 	.word	0x080bfc28
 8016254:	000ffcff 	.word	0x000ffcff
 8016258:	080bfc18 	.word	0x080bfc18
 801625c:	080bfc18 	.word	0x080bfc18
    switch (clocksource)
 8016260:	2b40      	cmp	r3, #64	; 0x40
 8016262:	f63f af44 	bhi.w	80160ee <HAL_UART_Init+0x196>
 8016266:	a201      	add	r2, pc, #4	; (adr r2, 801626c <HAL_UART_Init+0x314>)
 8016268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801626c:	080164e3 	.word	0x080164e3
 8016270:	080164dd 	.word	0x080164dd
 8016274:	080160ef 	.word	0x080160ef
 8016278:	080160ef 	.word	0x080160ef
 801627c:	080164e9 	.word	0x080164e9
 8016280:	080160ef 	.word	0x080160ef
 8016284:	080160ef 	.word	0x080160ef
 8016288:	080160ef 	.word	0x080160ef
 801628c:	080164cf 	.word	0x080164cf
 8016290:	080160ef 	.word	0x080160ef
 8016294:	080160ef 	.word	0x080160ef
 8016298:	080160ef 	.word	0x080160ef
 801629c:	080160ef 	.word	0x080160ef
 80162a0:	080160ef 	.word	0x080160ef
 80162a4:	080160ef 	.word	0x080160ef
 80162a8:	080160ef 	.word	0x080160ef
 80162ac:	08016477 	.word	0x08016477
 80162b0:	080160ef 	.word	0x080160ef
 80162b4:	080160ef 	.word	0x080160ef
 80162b8:	080160ef 	.word	0x080160ef
 80162bc:	080160ef 	.word	0x080160ef
 80162c0:	080160ef 	.word	0x080160ef
 80162c4:	080160ef 	.word	0x080160ef
 80162c8:	080160ef 	.word	0x080160ef
 80162cc:	080160ef 	.word	0x080160ef
 80162d0:	080160ef 	.word	0x080160ef
 80162d4:	080160ef 	.word	0x080160ef
 80162d8:	080160ef 	.word	0x080160ef
 80162dc:	080160ef 	.word	0x080160ef
 80162e0:	080160ef 	.word	0x080160ef
 80162e4:	080160ef 	.word	0x080160ef
 80162e8:	080160ef 	.word	0x080160ef
 80162ec:	080164f3 	.word	0x080164f3
 80162f0:	080160ef 	.word	0x080160ef
 80162f4:	080160ef 	.word	0x080160ef
 80162f8:	080160ef 	.word	0x080160ef
 80162fc:	080160ef 	.word	0x080160ef
 8016300:	080160ef 	.word	0x080160ef
 8016304:	080160ef 	.word	0x080160ef
 8016308:	080160ef 	.word	0x080160ef
 801630c:	080160ef 	.word	0x080160ef
 8016310:	080160ef 	.word	0x080160ef
 8016314:	080160ef 	.word	0x080160ef
 8016318:	080160ef 	.word	0x080160ef
 801631c:	080160ef 	.word	0x080160ef
 8016320:	080160ef 	.word	0x080160ef
 8016324:	080160ef 	.word	0x080160ef
 8016328:	080160ef 	.word	0x080160ef
 801632c:	080160ef 	.word	0x080160ef
 8016330:	080160ef 	.word	0x080160ef
 8016334:	080160ef 	.word	0x080160ef
 8016338:	080160ef 	.word	0x080160ef
 801633c:	080160ef 	.word	0x080160ef
 8016340:	080160ef 	.word	0x080160ef
 8016344:	080160ef 	.word	0x080160ef
 8016348:	080160ef 	.word	0x080160ef
 801634c:	080160ef 	.word	0x080160ef
 8016350:	080160ef 	.word	0x080160ef
 8016354:	080160ef 	.word	0x080160ef
 8016358:	080160ef 	.word	0x080160ef
 801635c:	080160ef 	.word	0x080160ef
 8016360:	080160ef 	.word	0x080160ef
 8016364:	080160ef 	.word	0x080160ef
 8016368:	080160ef 	.word	0x080160ef
 801636c:	080164f7 	.word	0x080164f7
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8016370:	69dd      	ldr	r5, [r3, #28]
 8016372:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 8016376:	f47f af27 	bne.w	80161c8 <HAL_UART_Init+0x270>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801637a:	f7f7 faf1 	bl	800d960 <HAL_GetTick>
 801637e:	1b80      	subs	r0, r0, r6
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8016380:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016382:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8016386:	f080 80c0 	bcs.w	801650a <HAL_UART_Init+0x5b2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801638a:	681a      	ldr	r2, [r3, #0]
 801638c:	0752      	lsls	r2, r2, #29
 801638e:	d5ef      	bpl.n	8016370 <HAL_UART_Init+0x418>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8016390:	69da      	ldr	r2, [r3, #28]
 8016392:	0517      	lsls	r7, r2, #20
 8016394:	d5ec      	bpl.n	8016370 <HAL_UART_Init+0x418>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8016396:	f44f 6100 	mov.w	r1, #2048	; 0x800
          huart->gState = HAL_UART_STATE_READY;
 801639a:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 801639c:	2003      	movs	r0, #3
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801639e:	6219      	str	r1, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80163a0:	6819      	ldr	r1, [r3, #0]
 80163a2:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 80163a6:	6019      	str	r1, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80163a8:	6899      	ldr	r1, [r3, #8]
 80163aa:	f021 0101 	bic.w	r1, r1, #1
 80163ae:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 80163b0:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
          __HAL_UNLOCK(huart);
 80163b4:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80163b8:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80163bc:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
 80163c0:	e69c      	b.n	80160fc <HAL_UART_Init+0x1a4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80163c2:	69dd      	ldr	r5, [r3, #28]
 80163c4:	f415 0580 	ands.w	r5, r5, #4194304	; 0x400000
 80163c8:	f47f af02 	bne.w	80161d0 <HAL_UART_Init+0x278>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80163cc:	f7f7 fac8 	bl	800d960 <HAL_GetTick>
 80163d0:	1b80      	subs	r0, r0, r6
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80163d2:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80163d4:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 80163d8:	f080 8097 	bcs.w	801650a <HAL_UART_Init+0x5b2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80163dc:	681a      	ldr	r2, [r3, #0]
 80163de:	0751      	lsls	r1, r2, #29
 80163e0:	d5ef      	bpl.n	80163c2 <HAL_UART_Init+0x46a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80163e2:	69da      	ldr	r2, [r3, #28]
 80163e4:	0512      	lsls	r2, r2, #20
 80163e6:	d5ec      	bpl.n	80163c2 <HAL_UART_Init+0x46a>
 80163e8:	e7d5      	b.n	8016396 <HAL_UART_Init+0x43e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80163ea:	4b73      	ldr	r3, [pc, #460]	; (80165b8 <HAL_UART_Init+0x660>)
 80163ec:	681a      	ldr	r2, [r3, #0]
 80163ee:	0690      	lsls	r0, r2, #26
 80163f0:	f140 80d9 	bpl.w	80165a6 <HAL_UART_Init+0x64e>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80163f4:	681b      	ldr	r3, [r3, #0]
 80163f6:	4871      	ldr	r0, [pc, #452]	; (80165bc <HAL_UART_Init+0x664>)
 80163f8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80163fc:	40d8      	lsrs	r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80163fe:	4b70      	ldr	r3, [pc, #448]	; (80165c0 <HAL_UART_Init+0x668>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8016400:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8016404:	6862      	ldr	r2, [r4, #4]
 8016406:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 801640a:	fbb0 f3f3 	udiv	r3, r0, r3
 801640e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8016412:	fbb3 f3f2 	udiv	r3, r3, r2
 8016416:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8016418:	f1a3 0210 	sub.w	r2, r3, #16
 801641c:	428a      	cmp	r2, r1
 801641e:	f63f ae66 	bhi.w	80160ee <HAL_UART_Init+0x196>
        huart->Instance->BRR = usartdiv;
 8016422:	6820      	ldr	r0, [r4, #0]
  huart->NbTxDataToProcess = 1;
 8016424:	2200      	movs	r2, #0
  huart->NbRxDataToProcess = 1;
 8016426:	f04f 1101 	mov.w	r1, #65537	; 0x10001
        huart->Instance->BRR = usartdiv;
 801642a:	60c3      	str	r3, [r0, #12]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801642c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  huart->RxISR = NULL;
 801642e:	6722      	str	r2, [r4, #112]	; 0x70
  huart->NbTxDataToProcess = 1;
 8016430:	e9c4 121a 	strd	r1, r2, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8016434:	2b00      	cmp	r3, #0
 8016436:	f43f aeaf 	beq.w	8016198 <HAL_UART_Init+0x240>
    UART_AdvFeatureConfig(huart);
 801643a:	4620      	mov	r0, r4
 801643c:	f7ff fd34 	bl	8015ea8 <UART_AdvFeatureConfig>
 8016440:	e6aa      	b.n	8016198 <HAL_UART_Init+0x240>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8016442:	a803      	add	r0, sp, #12
 8016444:	f7fd fb8c 	bl	8013b60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8016448:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 801644a:	2800      	cmp	r0, #0
 801644c:	d056      	beq.n	80164fc <HAL_UART_Init+0x5a4>
 801644e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8016450:	e7d5      	b.n	80163fe <HAL_UART_Init+0x4a6>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8016452:	4668      	mov	r0, sp
 8016454:	f7fd faec 	bl	8013a30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8016458:	9801      	ldr	r0, [sp, #4]
 801645a:	e7f6      	b.n	801644a <HAL_UART_Init+0x4f2>
        pclk = HAL_RCC_GetPCLK1Freq();
 801645c:	f7fc fa36 	bl	80128cc <HAL_RCC_GetPCLK1Freq>
 8016460:	e7f3      	b.n	801644a <HAL_UART_Init+0x4f2>
        pclk = HAL_RCC_GetPCLK2Freq();
 8016462:	f7fc fae3 	bl	8012a2c <HAL_RCC_GetPCLK2Freq>
 8016466:	e7f0      	b.n	801644a <HAL_UART_Init+0x4f2>
        pclk = (uint32_t) LSE_VALUE;
 8016468:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 801646c:	e7c7      	b.n	80163fe <HAL_UART_Init+0x4a6>
        pclk = (uint32_t) CSI_VALUE;
 801646e:	4855      	ldr	r0, [pc, #340]	; (80165c4 <HAL_UART_Init+0x66c>)
 8016470:	e7c5      	b.n	80163fe <HAL_UART_Init+0x4a6>
        pclk = (uint32_t) CSI_VALUE;
 8016472:	4854      	ldr	r0, [pc, #336]	; (80165c4 <HAL_UART_Init+0x66c>)
 8016474:	e65f      	b.n	8016136 <HAL_UART_Init+0x1de>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8016476:	4b50      	ldr	r3, [pc, #320]	; (80165b8 <HAL_UART_Init+0x660>)
 8016478:	681a      	ldr	r2, [r3, #0]
 801647a:	0696      	lsls	r6, r2, #26
 801647c:	f140 809a 	bpl.w	80165b4 <HAL_UART_Init+0x65c>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8016480:	681b      	ldr	r3, [r3, #0]
 8016482:	484e      	ldr	r0, [pc, #312]	; (80165bc <HAL_UART_Init+0x664>)
 8016484:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8016488:	40d8      	lsrs	r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801648a:	4b4d      	ldr	r3, [pc, #308]	; (80165c0 <HAL_UART_Init+0x668>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801648c:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8016490:	6862      	ldr	r2, [r4, #4]
 8016492:	f833 5015 	ldrh.w	r5, [r3, r5, lsl #1]
 8016496:	0853      	lsrs	r3, r2, #1
 8016498:	fbb0 f0f5 	udiv	r0, r0, r5
 801649c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80164a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80164a4:	b29a      	uxth	r2, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80164a6:	f1a2 0010 	sub.w	r0, r2, #16
 80164aa:	4288      	cmp	r0, r1
 80164ac:	f63f ae1f 	bhi.w	80160ee <HAL_UART_Init+0x196>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80164b0:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80164b4:	f3c2 0242 	ubfx	r2, r2, #1, #3
  huart->NbTxDataToProcess = 1;
 80164b8:	2100      	movs	r1, #0
        huart->Instance->BRR = brrtemp;
 80164ba:	6825      	ldr	r5, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80164bc:	b29b      	uxth	r3, r3
  huart->NbRxDataToProcess = 1;
 80164be:	f04f 1001 	mov.w	r0, #65537	; 0x10001
        huart->Instance->BRR = brrtemp;
 80164c2:	4313      	orrs	r3, r2
 80164c4:	60eb      	str	r3, [r5, #12]
  huart->RxISR = NULL;
 80164c6:	6721      	str	r1, [r4, #112]	; 0x70
  huart->NbTxDataToProcess = 1;
 80164c8:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
 80164cc:	e660      	b.n	8016190 <HAL_UART_Init+0x238>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80164ce:	a803      	add	r0, sp, #12
 80164d0:	f7fd fb46 	bl	8013b60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80164d4:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 80164d6:	b188      	cbz	r0, 80164fc <HAL_UART_Init+0x5a4>
 80164d8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80164da:	e7d6      	b.n	801648a <HAL_UART_Init+0x532>
        pclk = HAL_RCC_GetPCLK2Freq();
 80164dc:	f7fc faa6 	bl	8012a2c <HAL_RCC_GetPCLK2Freq>
 80164e0:	e7f9      	b.n	80164d6 <HAL_UART_Init+0x57e>
        pclk = HAL_RCC_GetPCLK1Freq();
 80164e2:	f7fc f9f3 	bl	80128cc <HAL_RCC_GetPCLK1Freq>
 80164e6:	e7f6      	b.n	80164d6 <HAL_UART_Init+0x57e>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80164e8:	4668      	mov	r0, sp
 80164ea:	f7fd faa1 	bl	8013a30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80164ee:	9801      	ldr	r0, [sp, #4]
 80164f0:	e7f1      	b.n	80164d6 <HAL_UART_Init+0x57e>
        pclk = (uint32_t) CSI_VALUE;
 80164f2:	4834      	ldr	r0, [pc, #208]	; (80165c4 <HAL_UART_Init+0x66c>)
 80164f4:	e7c9      	b.n	801648a <HAL_UART_Init+0x532>
        pclk = (uint32_t) LSE_VALUE;
 80164f6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80164fa:	e7c6      	b.n	801648a <HAL_UART_Init+0x532>
  huart->RxISR = NULL;
 80164fc:	2300      	movs	r3, #0
 80164fe:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->TxISR = NULL;
 8016502:	6723      	str	r3, [r4, #112]	; 0x70
  huart->RxISR = NULL;
 8016504:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
 8016508:	e642      	b.n	8016190 <HAL_UART_Init+0x238>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 801650a:	681a      	ldr	r2, [r3, #0]
        huart->gState = HAL_UART_STATE_READY;
 801650c:	2120      	movs	r1, #32
      return HAL_TIMEOUT;
 801650e:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8016510:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8016514:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016516:	689a      	ldr	r2, [r3, #8]
 8016518:	f022 0201 	bic.w	r2, r2, #1
 801651c:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 801651e:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
        __HAL_UNLOCK(huart);
 8016522:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8016526:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
 801652a:	e5e7      	b.n	80160fc <HAL_UART_Init+0x1a4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801652c:	4b22      	ldr	r3, [pc, #136]	; (80165b8 <HAL_UART_Init+0x660>)
 801652e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016530:	f003 0307 	and.w	r3, r3, #7
 8016534:	2b05      	cmp	r3, #5
 8016536:	f63f adda 	bhi.w	80160ee <HAL_UART_Init+0x196>
 801653a:	4a23      	ldr	r2, [pc, #140]	; (80165c8 <HAL_UART_Init+0x670>)
 801653c:	5cd3      	ldrb	r3, [r2, r3]
 801653e:	e57c      	b.n	801603a <HAL_UART_Init+0xe2>
 8016540:	4b1d      	ldr	r3, [pc, #116]	; (80165b8 <HAL_UART_Init+0x660>)
 8016542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016544:	f003 0307 	and.w	r3, r3, #7
 8016548:	2b05      	cmp	r3, #5
 801654a:	f63f add0 	bhi.w	80160ee <HAL_UART_Init+0x196>
 801654e:	4a1f      	ldr	r2, [pc, #124]	; (80165cc <HAL_UART_Init+0x674>)
 8016550:	5cd3      	ldrb	r3, [r2, r3]
 8016552:	e572      	b.n	801603a <HAL_UART_Init+0xe2>
 8016554:	4b18      	ldr	r3, [pc, #96]	; (80165b8 <HAL_UART_Init+0x660>)
 8016556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016558:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801655c:	2b28      	cmp	r3, #40	; 0x28
 801655e:	f63f adc6 	bhi.w	80160ee <HAL_UART_Init+0x196>
 8016562:	4a1b      	ldr	r2, [pc, #108]	; (80165d0 <HAL_UART_Init+0x678>)
 8016564:	5cd3      	ldrb	r3, [r2, r3]
 8016566:	e568      	b.n	801603a <HAL_UART_Init+0xe2>
    switch (clocksource)
 8016568:	2b02      	cmp	r3, #2
 801656a:	d00a      	beq.n	8016582 <HAL_UART_Init+0x62a>
 801656c:	2b04      	cmp	r3, #4
 801656e:	f47f adbe 	bne.w	80160ee <HAL_UART_Init+0x196>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8016572:	4668      	mov	r0, sp
 8016574:	f7fd fa5c 	bl	8013a30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8016578:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 801657a:	2800      	cmp	r0, #0
 801657c:	d0be      	beq.n	80164fc <HAL_UART_Init+0x5a4>
 801657e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8016580:	e5d9      	b.n	8016136 <HAL_UART_Init+0x1de>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8016582:	f7fd fa43 	bl	8013a0c <HAL_RCCEx_GetD3PCLK1Freq>
 8016586:	e7f8      	b.n	801657a <HAL_UART_Init+0x622>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8016588:	a803      	add	r0, sp, #12
 801658a:	f7fd fae9 	bl	8013b60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801658e:	9804      	ldr	r0, [sp, #16]
 8016590:	e7f3      	b.n	801657a <HAL_UART_Init+0x622>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8016592:	4b09      	ldr	r3, [pc, #36]	; (80165b8 <HAL_UART_Init+0x660>)
 8016594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016596:	f003 0307 	and.w	r3, r3, #7
 801659a:	2b05      	cmp	r3, #5
 801659c:	f63f ada7 	bhi.w	80160ee <HAL_UART_Init+0x196>
 80165a0:	4a0c      	ldr	r2, [pc, #48]	; (80165d4 <HAL_UART_Init+0x67c>)
 80165a2:	5cd3      	ldrb	r3, [r2, r3]
 80165a4:	e549      	b.n	801603a <HAL_UART_Init+0xe2>
          pclk = (uint32_t) HSI_VALUE;
 80165a6:	4805      	ldr	r0, [pc, #20]	; (80165bc <HAL_UART_Init+0x664>)
 80165a8:	e729      	b.n	80163fe <HAL_UART_Init+0x4a6>
        pclk = (uint32_t) LSE_VALUE;
 80165aa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80165ae:	e5c2      	b.n	8016136 <HAL_UART_Init+0x1de>
          pclk = (uint32_t) HSI_VALUE;
 80165b0:	4802      	ldr	r0, [pc, #8]	; (80165bc <HAL_UART_Init+0x664>)
 80165b2:	e5c0      	b.n	8016136 <HAL_UART_Init+0x1de>
          pclk = (uint32_t) HSI_VALUE;
 80165b4:	4801      	ldr	r0, [pc, #4]	; (80165bc <HAL_UART_Init+0x664>)
 80165b6:	e768      	b.n	801648a <HAL_UART_Init+0x532>
 80165b8:	58024400 	.word	0x58024400
 80165bc:	03d09000 	.word	0x03d09000
 80165c0:	080bfc28 	.word	0x080bfc28
 80165c4:	003d0900 	.word	0x003d0900
 80165c8:	080bfc18 	.word	0x080bfc18
 80165cc:	080bfc18 	.word	0x080bfc18
 80165d0:	080bfbec 	.word	0x080bfbec
 80165d4:	080bfc18 	.word	0x080bfc18

080165d8 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80165d8:	4770      	bx	lr
 80165da:	bf00      	nop

080165dc <HAL_UARTEx_RxFifoFullCallback>:
 80165dc:	4770      	bx	lr
 80165de:	bf00      	nop

080165e0 <HAL_UARTEx_TxFifoEmptyCallback>:
 80165e0:	4770      	bx	lr
 80165e2:	bf00      	nop

080165e4 <DelayBlock_Enable>:
  * @brief  Enable the Delay Block instance.
  * @param  DLYBx: Pointer to DLYB instance.
  * @retval HAL status
  */
HAL_StatusTypeDef DelayBlock_Enable(DLYB_TypeDef *DLYBx)
{
 80165e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t unit_current;
  uint32_t tuning;
  uint32_t lng_mask;
  uint32_t tickstart;

  DLYBx->CR = DLYB_CR_DEN | DLYB_CR_SEN;
 80165e8:	2700      	movs	r7, #0
{
 80165ea:	b083      	sub	sp, #12
  DLYBx->CR = DLYB_CR_DEN | DLYB_CR_SEN;
 80165ec:	2303      	movs	r3, #3
{
 80165ee:	4604      	mov	r4, r0

  for (sel_current = 0U; sel_current < DLYB_MAX_SELECT; sel_current++)
  {
    /* lng_mask is the mask bit for the LNG field to check the output of the UNITx*/
    lng_mask = DLYB_CFGR_LNG_0 << sel_current;
 80165f0:	f44f 3980 	mov.w	r9, #65536	; 0x10000
  uint32_t unit = 0U;
 80165f4:	46bb      	mov	fp, r7
  uint32_t sel = 0U;
 80165f6:	9701      	str	r7, [sp, #4]
  DLYBx->CR = DLYB_CR_DEN | DLYB_CR_SEN;
 80165f8:	6003      	str	r3, [r0, #0]
    tuning = 0U;
 80165fa:	f04f 0800 	mov.w	r8, #0
    lng_mask = DLYB_CFGR_LNG_0 << sel_current;
 80165fe:	fa09 fa07 	lsl.w	sl, r9, r7
    for (unit_current = 0U; unit_current < DLYB_MAX_UNIT; unit_current++)
 8016602:	4646      	mov	r6, r8
    {
      /* Set the Delay of the UNIT(s)*/
      DLYBx->CFGR = DLYB_MAX_SELECT | (unit_current << DLYB_CFGR_UNIT_Pos);
 8016604:	0233      	lsls	r3, r6, #8
 8016606:	f043 030c 	orr.w	r3, r3, #12
 801660a:	6063      	str	r3, [r4, #4]

      /* Waiting for a LNG valid value */
      tickstart =  HAL_GetTick();
 801660c:	f7f7 f9a8 	bl	800d960 <HAL_GetTick>
 8016610:	4605      	mov	r5, r0
      while ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 8016612:	e004      	b.n	801661e <DelayBlock_Enable+0x3a>
      {
        if((HAL_GetTick() - tickstart) >=  DLYB_TIMEOUT)
 8016614:	f7f7 f9a4 	bl	800d960 <HAL_GetTick>
 8016618:	1b40      	subs	r0, r0, r5
 801661a:	28fe      	cmp	r0, #254	; 0xfe
 801661c:	d81a      	bhi.n	8016654 <DelayBlock_Enable+0x70>
      while ((DLYBx->CFGR & DLYB_CFGR_LNGF) == 0U)
 801661e:	6863      	ldr	r3, [r4, #4]
 8016620:	2b00      	cmp	r3, #0
 8016622:	daf7      	bge.n	8016614 <DelayBlock_Enable+0x30>
          return HAL_TIMEOUT;
        }
      }
      if (tuning == 0U)
      {
        if ((DLYBx->CFGR & lng_mask) != 0U)
 8016624:	6863      	ldr	r3, [r4, #4]
      if (tuning == 0U)
 8016626:	f1b8 0f00 	cmp.w	r8, #0
 801662a:	d017      	beq.n	801665c <DelayBlock_Enable+0x78>
        }
      }
      else
      {
        /* 1/2 period LOW detected after the HIGH 1/2 period => FULL PERIOD passed*/
        if((DLYBx->CFGR & lng_mask ) == 0U)
 801662c:	ea13 0f0a 	tst.w	r3, sl
 8016630:	d01c      	beq.n	801666c <DelayBlock_Enable+0x88>
    for (unit_current = 0U; unit_current < DLYB_MAX_UNIT; unit_current++)
 8016632:	3601      	adds	r6, #1
 8016634:	2e80      	cmp	r6, #128	; 0x80
 8016636:	d1e5      	bne.n	8016604 <DelayBlock_Enable+0x20>
 8016638:	3701      	adds	r7, #1
  for (sel_current = 0U; sel_current < DLYB_MAX_SELECT; sel_current++)
 801663a:	2f0c      	cmp	r7, #12
 801663c:	d1dd      	bne.n	80165fa <DelayBlock_Enable+0x16>
  }

  /* Apply the Tuning settings */
  DLYBx->CR   = 0U;
  DLYBx->CR   = DLYB_CR_DEN | DLYB_CR_SEN;
  DLYBx->CFGR = sel | (unit << DLYB_CFGR_UNIT_Pos);
 801663e:	9b01      	ldr	r3, [sp, #4]
  DLYBx->CR   = 0U;
 8016640:	2000      	movs	r0, #0
  DLYBx->CR   = DLYB_CR_DEN | DLYB_CR_SEN;
 8016642:	2103      	movs	r1, #3
  DLYBx->CR   = DLYB_CR_DEN;
 8016644:	2201      	movs	r2, #1
  DLYBx->CFGR = sel | (unit << DLYB_CFGR_UNIT_Pos);
 8016646:	ea43 230b 	orr.w	r3, r3, fp, lsl #8
  DLYBx->CR   = 0U;
 801664a:	6020      	str	r0, [r4, #0]
  DLYBx->CR   = DLYB_CR_DEN | DLYB_CR_SEN;
 801664c:	6021      	str	r1, [r4, #0]
  DLYBx->CFGR = sel | (unit << DLYB_CFGR_UNIT_Pos);
 801664e:	6063      	str	r3, [r4, #4]
  DLYBx->CR   = DLYB_CR_DEN;
 8016650:	6022      	str	r2, [r4, #0]

  return HAL_OK;
 8016652:	e000      	b.n	8016656 <DelayBlock_Enable+0x72>
          return HAL_TIMEOUT;
 8016654:	2003      	movs	r0, #3
}
 8016656:	b003      	add	sp, #12
 8016658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((DLYBx->CFGR & lng_mask) != 0U)
 801665c:	ea13 0f0a 	tst.w	r3, sl
 8016660:	bf14      	ite	ne
 8016662:	f04f 0801 	movne.w	r8, #1
 8016666:	f04f 0800 	moveq.w	r8, #0
 801666a:	e7e2      	b.n	8016632 <DelayBlock_Enable+0x4e>
 801666c:	3701      	adds	r7, #1
          if( unit == 0U )
 801666e:	f1bb 0f00 	cmp.w	fp, #0
 8016672:	d1e2      	bne.n	801663a <DelayBlock_Enable+0x56>
 8016674:	46b3      	mov	fp, r6
            sel  = sel_current + 1U;
 8016676:	9701      	str	r7, [sp, #4]
 8016678:	e7df      	b.n	801663a <DelayBlock_Enable+0x56>
 801667a:	bf00      	nop

0801667c <SDMMC_GetCmdResp1.part.2>:
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 801667c:	4b30      	ldr	r3, [pc, #192]	; (8016740 <SDMMC_GetCmdResp1.part.2+0xc4>)
  return (*(__IO uint32_t *) tmp);
 801667e:	6942      	ldr	r2, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8016680:	4013      	ands	r3, r2
 8016682:	b34b      	cbz	r3, 80166d8 <SDMMC_GetCmdResp1.part.2+0x5c>
  {
    return SDMMC_ERROR_NONE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8016684:	2a00      	cmp	r2, #0
 8016686:	db29      	blt.n	80166dc <SDMMC_GetCmdResp1.part.2+0x60>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8016688:	0051      	lsls	r1, r2, #1
 801668a:	d42d      	bmi.n	80166e8 <SDMMC_GetCmdResp1.part.2+0x6c>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 801668c:	0093      	lsls	r3, r2, #2
 801668e:	d42d      	bmi.n	80166ec <SDMMC_GetCmdResp1.part.2+0x70>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8016690:	00d1      	lsls	r1, r2, #3
 8016692:	d426      	bmi.n	80166e2 <SDMMC_GetCmdResp1.part.2+0x66>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8016694:	0113      	lsls	r3, r2, #4
 8016696:	d42e      	bmi.n	80166f6 <SDMMC_GetCmdResp1.part.2+0x7a>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8016698:	0151      	lsls	r1, r2, #5
 801669a:	d42f      	bmi.n	80166fc <SDMMC_GetCmdResp1.part.2+0x80>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801669c:	01d3      	lsls	r3, r2, #7
 801669e:	d427      	bmi.n	80166f0 <SDMMC_GetCmdResp1.part.2+0x74>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80166a0:	0211      	lsls	r1, r2, #8
 80166a2:	d42e      	bmi.n	8016702 <SDMMC_GetCmdResp1.part.2+0x86>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80166a4:	0253      	lsls	r3, r2, #9
 80166a6:	d42f      	bmi.n	8016708 <SDMMC_GetCmdResp1.part.2+0x8c>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80166a8:	0291      	lsls	r1, r2, #10
 80166aa:	d430      	bmi.n	801670e <SDMMC_GetCmdResp1.part.2+0x92>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80166ac:	02d3      	lsls	r3, r2, #11
 80166ae:	d431      	bmi.n	8016714 <SDMMC_GetCmdResp1.part.2+0x98>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80166b0:	0351      	lsls	r1, r2, #13
 80166b2:	d432      	bmi.n	801671a <SDMMC_GetCmdResp1.part.2+0x9e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80166b4:	0393      	lsls	r3, r2, #14
 80166b6:	d433      	bmi.n	8016720 <SDMMC_GetCmdResp1.part.2+0xa4>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80166b8:	03d1      	lsls	r1, r2, #15
 80166ba:	d434      	bmi.n	8016726 <SDMMC_GetCmdResp1.part.2+0xaa>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80166bc:	0413      	lsls	r3, r2, #16
 80166be:	d435      	bmi.n	801672c <SDMMC_GetCmdResp1.part.2+0xb0>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80166c0:	0451      	lsls	r1, r2, #17
 80166c2:	d436      	bmi.n	8016732 <SDMMC_GetCmdResp1.part.2+0xb6>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80166c4:	0493      	lsls	r3, r2, #18
 80166c6:	d437      	bmi.n	8016738 <SDMMC_GetCmdResp1.part.2+0xbc>
  {
    return SDMMC_ERROR_ERASE_RESET;
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80166c8:	f012 0f08 	tst.w	r2, #8
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80166cc:	bf14      	ite	ne
 80166ce:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 80166d2:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80166d6:	4770      	bx	lr
    return SDMMC_ERROR_NONE;
 80166d8:	4618      	mov	r0, r3
 80166da:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80166dc:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80166e0:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80166e2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80166e6:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80166e8:	2040      	movs	r0, #64	; 0x40
 80166ea:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80166ec:	2080      	movs	r0, #128	; 0x80
 80166ee:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80166f0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80166f4:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80166f6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80166fa:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80166fc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8016700:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 8016702:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8016706:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 8016708:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 801670c:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 801670e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8016712:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 8016714:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8016718:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801671a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 801671e:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8016720:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8016724:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8016726:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 801672a:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 801672c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8016730:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8016732:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8016736:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 8016738:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  }
}
 801673c:	4770      	bx	lr
 801673e:	bf00      	nop
 8016740:	fdffe008 	.word	0xfdffe008

08016744 <SDMMC_Init>:
{
 8016744:	b084      	sub	sp, #16
 8016746:	b470      	push	{r4, r5, r6}
 8016748:	ad04      	add	r5, sp, #16
 801674a:	4606      	mov	r6, r0
             Init.BusWide             |\
 801674c:	9c07      	ldr	r4, [sp, #28]
}
 801674e:	2000      	movs	r0, #0
{
 8016750:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 8016754:	460b      	mov	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8016756:	6875      	ldr	r5, [r6, #4]
             Init.ClockPowerSave      |\
 8016758:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
  tmpreg |= (Init.ClockEdge           |\
 801675c:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 801675e:	9908      	ldr	r1, [sp, #32]
             Init.ClockPowerSave      |\
 8016760:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8016762:	4a04      	ldr	r2, [pc, #16]	; (8016774 <SDMMC_Init+0x30>)
             Init.BusWide             |\
 8016764:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8016766:	402a      	ands	r2, r5
             Init.HardwareFlowControl |\
 8016768:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 801676a:	4313      	orrs	r3, r2
 801676c:	6073      	str	r3, [r6, #4]
}
 801676e:	bc70      	pop	{r4, r5, r6}
 8016770:	b004      	add	sp, #16
 8016772:	4770      	bx	lr
 8016774:	ffc02c00 	.word	0xffc02c00

08016778 <SDMMC_ReadFIFO>:
  return (SDMMCx->FIFO);
 8016778:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 801677c:	4770      	bx	lr
 801677e:	bf00      	nop

08016780 <SDMMC_WriteFIFO>:
{
 8016780:	4603      	mov	r3, r0
  SDMMCx->FIFO = *pWriteData;
 8016782:	680a      	ldr	r2, [r1, #0]
}
 8016784:	2000      	movs	r0, #0
  SDMMCx->FIFO = *pWriteData;
 8016786:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 801678a:	4770      	bx	lr

0801678c <SDMMC_PowerState_ON>:
{
 801678c:	4602      	mov	r2, r0
}
 801678e:	2000      	movs	r0, #0
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8016790:	6813      	ldr	r3, [r2, #0]
 8016792:	f043 0303 	orr.w	r3, r3, #3
 8016796:	6013      	str	r3, [r2, #0]
}
 8016798:	4770      	bx	lr
 801679a:	bf00      	nop

0801679c <SDMMC_PowerState_OFF>:
{
 801679c:	4602      	mov	r2, r0
}
 801679e:	2000      	movs	r0, #0
  SDMMCx->POWER &= ~(SDMMC_POWER_PWRCTRL);
 80167a0:	6813      	ldr	r3, [r2, #0]
 80167a2:	f023 0303 	bic.w	r3, r3, #3
 80167a6:	6013      	str	r3, [r2, #0]
}
 80167a8:	4770      	bx	lr
 80167aa:	bf00      	nop

080167ac <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80167ac:	6800      	ldr	r0, [r0, #0]
}
 80167ae:	f000 0003 	and.w	r0, r0, #3
 80167b2:	4770      	bx	lr

080167b4 <SDMMC_GetResponse>:
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80167b4:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 80167b6:	5840      	ldr	r0, [r0, r1]
}
 80167b8:	4770      	bx	lr
 80167ba:	bf00      	nop

080167bc <SDMMC_ConfigData>:
{
 80167bc:	b430      	push	{r4, r5}
 80167be:	4602      	mov	r2, r0
  SDMMCx->DTIMER = Data->DataTimeOut;
 80167c0:	680c      	ldr	r4, [r1, #0]
}
 80167c2:	2000      	movs	r0, #0
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80167c4:	e9d1 3502 	ldrd	r3, r5, [r1, #8]
 80167c8:	432b      	orrs	r3, r5
  SDMMCx->DLEN = Data->DataLength;
 80167ca:	684d      	ldr	r5, [r1, #4]
  SDMMCx->DTIMER = Data->DataTimeOut;
 80167cc:	6254      	str	r4, [r2, #36]	; 0x24
                       Data->TransferDir   |\
 80167ce:	690c      	ldr	r4, [r1, #16]
  SDMMCx->DLEN = Data->DataLength;
 80167d0:	6295      	str	r5, [r2, #40]	; 0x28
                       Data->TransferDir   |\
 80167d2:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 80167d4:	694d      	ldr	r5, [r1, #20]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80167d6:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
                       Data->TransferMode  |\
 80167d8:	432b      	orrs	r3, r5
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80167da:	f024 01ff 	bic.w	r1, r4, #255	; 0xff
 80167de:	430b      	orrs	r3, r1
}
 80167e0:	bc30      	pop	{r4, r5}
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80167e2:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80167e4:	4770      	bx	lr
 80167e6:	bf00      	nop

080167e8 <SDMMC_CmdBlockLength>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80167e8:	4a1c      	ldr	r2, [pc, #112]	; (801685c <SDMMC_CmdBlockLength+0x74>)
 80167ea:	4b1d      	ldr	r3, [pc, #116]	; (8016860 <SDMMC_CmdBlockLength+0x78>)
 80167ec:	6812      	ldr	r2, [r2, #0]
{
 80167ee:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80167f0:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80167f4:	4d1b      	ldr	r5, [pc, #108]	; (8016864 <SDMMC_CmdBlockLength+0x7c>)
  SDMMCx->ARG = Command->Argument;
 80167f6:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80167f8:	f241 1410 	movw	r4, #4368	; 0x1110
 80167fc:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80167fe:	f241 3388 	movw	r3, #5000	; 0x1388
 8016802:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016804:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8016806:	4918      	ldr	r1, [pc, #96]	; (8016868 <SDMMC_CmdBlockLength+0x80>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016808:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801680c:	432c      	orrs	r4, r5
 801680e:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8016810:	f113 33ff 	adds.w	r3, r3, #4294967295
 8016814:	d312      	bcc.n	801683c <SDMMC_CmdBlockLength+0x54>
    sta_reg = SDMMCx->STA;
 8016816:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8016818:	420a      	tst	r2, r1
 801681a:	d0f9      	beq.n	8016810 <SDMMC_CmdBlockLength+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 801681c:	0494      	lsls	r4, r2, #18
 801681e:	d4f7      	bmi.n	8016810 <SDMMC_CmdBlockLength+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8016820:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8016822:	075a      	lsls	r2, r3, #29
 8016824:	d413      	bmi.n	801684e <SDMMC_CmdBlockLength+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8016826:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8016828:	07db      	lsls	r3, r3, #31
 801682a:	d40b      	bmi.n	8016844 <SDMMC_CmdBlockLength+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801682c:	4b0f      	ldr	r3, [pc, #60]	; (801686c <SDMMC_CmdBlockLength+0x84>)
 801682e:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8016830:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8016832:	b2db      	uxtb	r3, r3
 8016834:	2b10      	cmp	r3, #16
 8016836:	d00e      	beq.n	8016856 <SDMMC_CmdBlockLength+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8016838:	2001      	movs	r0, #1
  return errorstate;
 801683a:	e001      	b.n	8016840 <SDMMC_CmdBlockLength+0x58>
      return SDMMC_ERROR_TIMEOUT;
 801683c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8016840:	bc30      	pop	{r4, r5}
 8016842:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8016844:	2301      	movs	r3, #1
}
 8016846:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8016848:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801684a:	4618      	mov	r0, r3
}
 801684c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801684e:	2304      	movs	r3, #4
 8016850:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8016852:	4618      	mov	r0, r3
 8016854:	e7f4      	b.n	8016840 <SDMMC_CmdBlockLength+0x58>
}
 8016856:	bc30      	pop	{r4, r5}
 8016858:	f7ff bf10 	b.w	801667c <SDMMC_GetCmdResp1.part.2>
 801685c:	24007290 	.word	0x24007290
 8016860:	10624dd3 	.word	0x10624dd3
 8016864:	fffee0c0 	.word	0xfffee0c0
 8016868:	00200045 	.word	0x00200045
 801686c:	002000c5 	.word	0x002000c5

08016870 <SDMMC_CmdReadSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016870:	4a1c      	ldr	r2, [pc, #112]	; (80168e4 <SDMMC_CmdReadSingleBlock+0x74>)
 8016872:	4b1d      	ldr	r3, [pc, #116]	; (80168e8 <SDMMC_CmdReadSingleBlock+0x78>)
 8016874:	6812      	ldr	r2, [r2, #0]
{
 8016876:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016878:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801687c:	4d1b      	ldr	r5, [pc, #108]	; (80168ec <SDMMC_CmdReadSingleBlock+0x7c>)
  SDMMCx->ARG = Command->Argument;
 801687e:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016880:	f241 1411 	movw	r4, #4369	; 0x1111
 8016884:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016886:	f241 3388 	movw	r3, #5000	; 0x1388
 801688a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801688c:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 801688e:	4918      	ldr	r1, [pc, #96]	; (80168f0 <SDMMC_CmdReadSingleBlock+0x80>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016890:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016894:	432c      	orrs	r4, r5
 8016896:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8016898:	f113 33ff 	adds.w	r3, r3, #4294967295
 801689c:	d312      	bcc.n	80168c4 <SDMMC_CmdReadSingleBlock+0x54>
    sta_reg = SDMMCx->STA;
 801689e:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80168a0:	420a      	tst	r2, r1
 80168a2:	d0f9      	beq.n	8016898 <SDMMC_CmdReadSingleBlock+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80168a4:	0494      	lsls	r4, r2, #18
 80168a6:	d4f7      	bmi.n	8016898 <SDMMC_CmdReadSingleBlock+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80168a8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80168aa:	075a      	lsls	r2, r3, #29
 80168ac:	d413      	bmi.n	80168d6 <SDMMC_CmdReadSingleBlock+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80168ae:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80168b0:	07db      	lsls	r3, r3, #31
 80168b2:	d40b      	bmi.n	80168cc <SDMMC_CmdReadSingleBlock+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80168b4:	4b0f      	ldr	r3, [pc, #60]	; (80168f4 <SDMMC_CmdReadSingleBlock+0x84>)
 80168b6:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80168b8:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80168ba:	b2db      	uxtb	r3, r3
 80168bc:	2b11      	cmp	r3, #17
 80168be:	d00e      	beq.n	80168de <SDMMC_CmdReadSingleBlock+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80168c0:	2001      	movs	r0, #1
  return errorstate;
 80168c2:	e001      	b.n	80168c8 <SDMMC_CmdReadSingleBlock+0x58>
      return SDMMC_ERROR_TIMEOUT;
 80168c4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80168c8:	bc30      	pop	{r4, r5}
 80168ca:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80168cc:	2301      	movs	r3, #1
}
 80168ce:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80168d0:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80168d2:	4618      	mov	r0, r3
}
 80168d4:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80168d6:	2304      	movs	r3, #4
 80168d8:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80168da:	4618      	mov	r0, r3
 80168dc:	e7f4      	b.n	80168c8 <SDMMC_CmdReadSingleBlock+0x58>
}
 80168de:	bc30      	pop	{r4, r5}
 80168e0:	f7ff becc 	b.w	801667c <SDMMC_GetCmdResp1.part.2>
 80168e4:	24007290 	.word	0x24007290
 80168e8:	10624dd3 	.word	0x10624dd3
 80168ec:	fffee0c0 	.word	0xfffee0c0
 80168f0:	00200045 	.word	0x00200045
 80168f4:	002000c5 	.word	0x002000c5

080168f8 <SDMMC_CmdReadMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80168f8:	4a1c      	ldr	r2, [pc, #112]	; (801696c <SDMMC_CmdReadMultiBlock+0x74>)
 80168fa:	4b1d      	ldr	r3, [pc, #116]	; (8016970 <SDMMC_CmdReadMultiBlock+0x78>)
 80168fc:	6812      	ldr	r2, [r2, #0]
{
 80168fe:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016900:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016904:	4d1b      	ldr	r5, [pc, #108]	; (8016974 <SDMMC_CmdReadMultiBlock+0x7c>)
  SDMMCx->ARG = Command->Argument;
 8016906:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016908:	f241 1412 	movw	r4, #4370	; 0x1112
 801690c:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801690e:	f241 3388 	movw	r3, #5000	; 0x1388
 8016912:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016914:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8016916:	4918      	ldr	r1, [pc, #96]	; (8016978 <SDMMC_CmdReadMultiBlock+0x80>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016918:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801691c:	432c      	orrs	r4, r5
 801691e:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8016920:	f113 33ff 	adds.w	r3, r3, #4294967295
 8016924:	d312      	bcc.n	801694c <SDMMC_CmdReadMultiBlock+0x54>
    sta_reg = SDMMCx->STA;
 8016926:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8016928:	420a      	tst	r2, r1
 801692a:	d0f9      	beq.n	8016920 <SDMMC_CmdReadMultiBlock+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 801692c:	0494      	lsls	r4, r2, #18
 801692e:	d4f7      	bmi.n	8016920 <SDMMC_CmdReadMultiBlock+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8016930:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8016932:	075a      	lsls	r2, r3, #29
 8016934:	d413      	bmi.n	801695e <SDMMC_CmdReadMultiBlock+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8016936:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8016938:	07db      	lsls	r3, r3, #31
 801693a:	d40b      	bmi.n	8016954 <SDMMC_CmdReadMultiBlock+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801693c:	4b0f      	ldr	r3, [pc, #60]	; (801697c <SDMMC_CmdReadMultiBlock+0x84>)
 801693e:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8016940:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8016942:	b2db      	uxtb	r3, r3
 8016944:	2b12      	cmp	r3, #18
 8016946:	d00e      	beq.n	8016966 <SDMMC_CmdReadMultiBlock+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8016948:	2001      	movs	r0, #1
  return errorstate;
 801694a:	e001      	b.n	8016950 <SDMMC_CmdReadMultiBlock+0x58>
      return SDMMC_ERROR_TIMEOUT;
 801694c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8016950:	bc30      	pop	{r4, r5}
 8016952:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8016954:	2301      	movs	r3, #1
}
 8016956:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8016958:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801695a:	4618      	mov	r0, r3
}
 801695c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801695e:	2304      	movs	r3, #4
 8016960:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8016962:	4618      	mov	r0, r3
 8016964:	e7f4      	b.n	8016950 <SDMMC_CmdReadMultiBlock+0x58>
}
 8016966:	bc30      	pop	{r4, r5}
 8016968:	f7ff be88 	b.w	801667c <SDMMC_GetCmdResp1.part.2>
 801696c:	24007290 	.word	0x24007290
 8016970:	10624dd3 	.word	0x10624dd3
 8016974:	fffee0c0 	.word	0xfffee0c0
 8016978:	00200045 	.word	0x00200045
 801697c:	002000c5 	.word	0x002000c5

08016980 <SDMMC_CmdWriteSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016980:	4a1c      	ldr	r2, [pc, #112]	; (80169f4 <SDMMC_CmdWriteSingleBlock+0x74>)
 8016982:	4b1d      	ldr	r3, [pc, #116]	; (80169f8 <SDMMC_CmdWriteSingleBlock+0x78>)
 8016984:	6812      	ldr	r2, [r2, #0]
{
 8016986:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016988:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801698c:	4d1b      	ldr	r5, [pc, #108]	; (80169fc <SDMMC_CmdWriteSingleBlock+0x7c>)
  SDMMCx->ARG = Command->Argument;
 801698e:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016990:	f241 1418 	movw	r4, #4376	; 0x1118
 8016994:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016996:	f241 3388 	movw	r3, #5000	; 0x1388
 801699a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801699c:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 801699e:	4918      	ldr	r1, [pc, #96]	; (8016a00 <SDMMC_CmdWriteSingleBlock+0x80>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80169a0:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80169a4:	432c      	orrs	r4, r5
 80169a6:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 80169a8:	f113 33ff 	adds.w	r3, r3, #4294967295
 80169ac:	d312      	bcc.n	80169d4 <SDMMC_CmdWriteSingleBlock+0x54>
    sta_reg = SDMMCx->STA;
 80169ae:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80169b0:	420a      	tst	r2, r1
 80169b2:	d0f9      	beq.n	80169a8 <SDMMC_CmdWriteSingleBlock+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80169b4:	0494      	lsls	r4, r2, #18
 80169b6:	d4f7      	bmi.n	80169a8 <SDMMC_CmdWriteSingleBlock+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80169b8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80169ba:	075a      	lsls	r2, r3, #29
 80169bc:	d413      	bmi.n	80169e6 <SDMMC_CmdWriteSingleBlock+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80169be:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80169c0:	07db      	lsls	r3, r3, #31
 80169c2:	d40b      	bmi.n	80169dc <SDMMC_CmdWriteSingleBlock+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80169c4:	4b0f      	ldr	r3, [pc, #60]	; (8016a04 <SDMMC_CmdWriteSingleBlock+0x84>)
 80169c6:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80169c8:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80169ca:	b2db      	uxtb	r3, r3
 80169cc:	2b18      	cmp	r3, #24
 80169ce:	d00e      	beq.n	80169ee <SDMMC_CmdWriteSingleBlock+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80169d0:	2001      	movs	r0, #1
  return errorstate;
 80169d2:	e001      	b.n	80169d8 <SDMMC_CmdWriteSingleBlock+0x58>
      return SDMMC_ERROR_TIMEOUT;
 80169d4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80169d8:	bc30      	pop	{r4, r5}
 80169da:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80169dc:	2301      	movs	r3, #1
}
 80169de:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80169e0:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80169e2:	4618      	mov	r0, r3
}
 80169e4:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80169e6:	2304      	movs	r3, #4
 80169e8:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80169ea:	4618      	mov	r0, r3
 80169ec:	e7f4      	b.n	80169d8 <SDMMC_CmdWriteSingleBlock+0x58>
}
 80169ee:	bc30      	pop	{r4, r5}
 80169f0:	f7ff be44 	b.w	801667c <SDMMC_GetCmdResp1.part.2>
 80169f4:	24007290 	.word	0x24007290
 80169f8:	10624dd3 	.word	0x10624dd3
 80169fc:	fffee0c0 	.word	0xfffee0c0
 8016a00:	00200045 	.word	0x00200045
 8016a04:	002000c5 	.word	0x002000c5

08016a08 <SDMMC_CmdWriteMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016a08:	4a1c      	ldr	r2, [pc, #112]	; (8016a7c <SDMMC_CmdWriteMultiBlock+0x74>)
 8016a0a:	4b1d      	ldr	r3, [pc, #116]	; (8016a80 <SDMMC_CmdWriteMultiBlock+0x78>)
 8016a0c:	6812      	ldr	r2, [r2, #0]
{
 8016a0e:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016a10:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016a14:	4d1b      	ldr	r5, [pc, #108]	; (8016a84 <SDMMC_CmdWriteMultiBlock+0x7c>)
  SDMMCx->ARG = Command->Argument;
 8016a16:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016a18:	f241 1419 	movw	r4, #4377	; 0x1119
 8016a1c:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016a1e:	f241 3388 	movw	r3, #5000	; 0x1388
 8016a22:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016a24:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8016a26:	4918      	ldr	r1, [pc, #96]	; (8016a88 <SDMMC_CmdWriteMultiBlock+0x80>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016a28:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016a2c:	432c      	orrs	r4, r5
 8016a2e:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8016a30:	f113 33ff 	adds.w	r3, r3, #4294967295
 8016a34:	d312      	bcc.n	8016a5c <SDMMC_CmdWriteMultiBlock+0x54>
    sta_reg = SDMMCx->STA;
 8016a36:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8016a38:	420a      	tst	r2, r1
 8016a3a:	d0f9      	beq.n	8016a30 <SDMMC_CmdWriteMultiBlock+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8016a3c:	0494      	lsls	r4, r2, #18
 8016a3e:	d4f7      	bmi.n	8016a30 <SDMMC_CmdWriteMultiBlock+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8016a40:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8016a42:	075a      	lsls	r2, r3, #29
 8016a44:	d413      	bmi.n	8016a6e <SDMMC_CmdWriteMultiBlock+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8016a46:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8016a48:	07db      	lsls	r3, r3, #31
 8016a4a:	d40b      	bmi.n	8016a64 <SDMMC_CmdWriteMultiBlock+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8016a4c:	4b0f      	ldr	r3, [pc, #60]	; (8016a8c <SDMMC_CmdWriteMultiBlock+0x84>)
 8016a4e:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8016a50:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8016a52:	b2db      	uxtb	r3, r3
 8016a54:	2b19      	cmp	r3, #25
 8016a56:	d00e      	beq.n	8016a76 <SDMMC_CmdWriteMultiBlock+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8016a58:	2001      	movs	r0, #1
  return errorstate;
 8016a5a:	e001      	b.n	8016a60 <SDMMC_CmdWriteMultiBlock+0x58>
      return SDMMC_ERROR_TIMEOUT;
 8016a5c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8016a60:	bc30      	pop	{r4, r5}
 8016a62:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8016a64:	2301      	movs	r3, #1
}
 8016a66:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8016a68:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8016a6a:	4618      	mov	r0, r3
}
 8016a6c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8016a6e:	2304      	movs	r3, #4
 8016a70:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8016a72:	4618      	mov	r0, r3
 8016a74:	e7f4      	b.n	8016a60 <SDMMC_CmdWriteMultiBlock+0x58>
}
 8016a76:	bc30      	pop	{r4, r5}
 8016a78:	f7ff be00 	b.w	801667c <SDMMC_GetCmdResp1.part.2>
 8016a7c:	24007290 	.word	0x24007290
 8016a80:	10624dd3 	.word	0x10624dd3
 8016a84:	fffee0c0 	.word	0xfffee0c0
 8016a88:	00200045 	.word	0x00200045
 8016a8c:	002000c5 	.word	0x002000c5

08016a90 <SDMMC_CmdStopTransfer>:
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8016a90:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016a92:	4a2c      	ldr	r2, [pc, #176]	; (8016b44 <SDMMC_CmdStopTransfer+0xb4>)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8016a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016a98:	6812      	ldr	r2, [r2, #0]
{
 8016a9a:	b570      	push	{r4, r5, r6, lr}
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8016a9c:	60c3      	str	r3, [r0, #12]
  SDMMCx->ARG = Command->Argument;
 8016a9e:	2600      	movs	r6, #0
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8016aa0:	68c1      	ldr	r1, [r0, #12]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016aa2:	f241 140c 	movw	r4, #4364	; 0x110c
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016aa6:	4b28      	ldr	r3, [pc, #160]	; (8016b48 <SDMMC_CmdStopTransfer+0xb8>)
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8016aa8:	f021 0140 	bic.w	r1, r1, #64	; 0x40
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016aac:	4d27      	ldr	r5, [pc, #156]	; (8016b4c <SDMMC_CmdStopTransfer+0xbc>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016aae:	fba3 3202 	umull	r3, r2, r3, r2
 8016ab2:	4b27      	ldr	r3, [pc, #156]	; (8016b50 <SDMMC_CmdStopTransfer+0xc0>)
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8016ab4:	60c1      	str	r1, [r0, #12]
  SDMMCx->ARG = Command->Argument;
 8016ab6:	6086      	str	r6, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016ab8:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016aba:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016abc:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016ac0:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8016ac2:	4924      	ldr	r1, [pc, #144]	; (8016b54 <SDMMC_CmdStopTransfer+0xc4>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016ac4:	432c      	orrs	r4, r5
 8016ac6:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8016ac8:	b1c3      	cbz	r3, 8016afc <SDMMC_CmdStopTransfer+0x6c>
    sta_reg = SDMMCx->STA;
 8016aca:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8016acc:	3b01      	subs	r3, #1
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8016ace:	420a      	tst	r2, r1
 8016ad0:	d0fa      	beq.n	8016ac8 <SDMMC_CmdStopTransfer+0x38>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8016ad2:	0492      	lsls	r2, r2, #18
 8016ad4:	d4f8      	bmi.n	8016ac8 <SDMMC_CmdStopTransfer+0x38>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8016ad6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8016ad8:	075b      	lsls	r3, r3, #29
 8016ada:	d41f      	bmi.n	8016b1c <SDMMC_CmdStopTransfer+0x8c>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8016adc:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8016ade:	f014 0401 	ands.w	r4, r4, #1
 8016ae2:	d113      	bne.n	8016b0c <SDMMC_CmdStopTransfer+0x7c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8016ae4:	4b1c      	ldr	r3, [pc, #112]	; (8016b58 <SDMMC_CmdStopTransfer+0xc8>)
 8016ae6:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8016ae8:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8016aea:	b2db      	uxtb	r3, r3
 8016aec:	2b0c      	cmp	r3, #12
 8016aee:	d01c      	beq.n	8016b2a <SDMMC_CmdStopTransfer+0x9a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8016af0:	68c3      	ldr	r3, [r0, #12]
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8016af2:	2401      	movs	r4, #1
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8016af4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016af8:	60c3      	str	r3, [r0, #12]
 8016afa:	e005      	b.n	8016b08 <SDMMC_CmdStopTransfer+0x78>
 8016afc:	68c3      	ldr	r3, [r0, #12]
      return SDMMC_ERROR_TIMEOUT;
 8016afe:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8016b02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016b06:	60c3      	str	r3, [r0, #12]
}
 8016b08:	4620      	mov	r0, r4
 8016b0a:	bd70      	pop	{r4, r5, r6, pc}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8016b0c:	2401      	movs	r4, #1
 8016b0e:	6384      	str	r4, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8016b10:	68c3      	ldr	r3, [r0, #12]
 8016b12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016b16:	60c3      	str	r3, [r0, #12]
}
 8016b18:	4620      	mov	r0, r4
 8016b1a:	bd70      	pop	{r4, r5, r6, pc}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8016b1c:	2404      	movs	r4, #4
 8016b1e:	6384      	str	r4, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8016b20:	68c3      	ldr	r3, [r0, #12]
 8016b22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016b26:	60c3      	str	r3, [r0, #12]
 8016b28:	e7ee      	b.n	8016b08 <SDMMC_CmdStopTransfer+0x78>
 8016b2a:	4605      	mov	r5, r0
 8016b2c:	f7ff fda6 	bl	801667c <SDMMC_GetCmdResp1.part.2>
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8016b30:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8016b34:	bf18      	it	ne
 8016b36:	4604      	movne	r4, r0
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8016b38:	68eb      	ldr	r3, [r5, #12]
 8016b3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016b3e:	60eb      	str	r3, [r5, #12]
 8016b40:	e7e2      	b.n	8016b08 <SDMMC_CmdStopTransfer+0x78>
 8016b42:	bf00      	nop
 8016b44:	24007290 	.word	0x24007290
 8016b48:	10624dd3 	.word	0x10624dd3
 8016b4c:	fffee0c0 	.word	0xfffee0c0
 8016b50:	05f5e100 	.word	0x05f5e100
 8016b54:	00200045 	.word	0x00200045
 8016b58:	002000c5 	.word	0x002000c5

08016b5c <SDMMC_CmdSelDesel>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016b5c:	4b1c      	ldr	r3, [pc, #112]	; (8016bd0 <SDMMC_CmdSelDesel+0x74>)
 8016b5e:	491d      	ldr	r1, [pc, #116]	; (8016bd4 <SDMMC_CmdSelDesel+0x78>)
 8016b60:	681b      	ldr	r3, [r3, #0]
{
 8016b62:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 8016b64:	6082      	str	r2, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016b66:	f241 1407 	movw	r4, #4359	; 0x1107
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016b6a:	fba1 3203 	umull	r3, r2, r1, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016b6e:	4d1a      	ldr	r5, [pc, #104]	; (8016bd8 <SDMMC_CmdSelDesel+0x7c>)
 8016b70:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016b72:	f241 3388 	movw	r3, #5000	; 0x1388
 8016b76:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016b78:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8016b7a:	4918      	ldr	r1, [pc, #96]	; (8016bdc <SDMMC_CmdSelDesel+0x80>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016b7c:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016b80:	432c      	orrs	r4, r5
 8016b82:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8016b84:	f113 33ff 	adds.w	r3, r3, #4294967295
 8016b88:	d312      	bcc.n	8016bb0 <SDMMC_CmdSelDesel+0x54>
    sta_reg = SDMMCx->STA;
 8016b8a:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8016b8c:	420a      	tst	r2, r1
 8016b8e:	d0f9      	beq.n	8016b84 <SDMMC_CmdSelDesel+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8016b90:	0494      	lsls	r4, r2, #18
 8016b92:	d4f7      	bmi.n	8016b84 <SDMMC_CmdSelDesel+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8016b94:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8016b96:	075a      	lsls	r2, r3, #29
 8016b98:	d413      	bmi.n	8016bc2 <SDMMC_CmdSelDesel+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8016b9a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8016b9c:	07db      	lsls	r3, r3, #31
 8016b9e:	d40b      	bmi.n	8016bb8 <SDMMC_CmdSelDesel+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8016ba0:	4b0f      	ldr	r3, [pc, #60]	; (8016be0 <SDMMC_CmdSelDesel+0x84>)
 8016ba2:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8016ba4:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8016ba6:	b2db      	uxtb	r3, r3
 8016ba8:	2b07      	cmp	r3, #7
 8016baa:	d00e      	beq.n	8016bca <SDMMC_CmdSelDesel+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8016bac:	2001      	movs	r0, #1
  return errorstate;
 8016bae:	e001      	b.n	8016bb4 <SDMMC_CmdSelDesel+0x58>
      return SDMMC_ERROR_TIMEOUT;
 8016bb0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8016bb4:	bc30      	pop	{r4, r5}
 8016bb6:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8016bb8:	2301      	movs	r3, #1
}
 8016bba:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8016bbc:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8016bbe:	4618      	mov	r0, r3
}
 8016bc0:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8016bc2:	2304      	movs	r3, #4
 8016bc4:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8016bc6:	4618      	mov	r0, r3
 8016bc8:	e7f4      	b.n	8016bb4 <SDMMC_CmdSelDesel+0x58>
}
 8016bca:	bc30      	pop	{r4, r5}
 8016bcc:	f7ff bd56 	b.w	801667c <SDMMC_GetCmdResp1.part.2>
 8016bd0:	24007290 	.word	0x24007290
 8016bd4:	10624dd3 	.word	0x10624dd3
 8016bd8:	fffee0c0 	.word	0xfffee0c0
 8016bdc:	00200045 	.word	0x00200045
 8016be0:	002000c5 	.word	0x002000c5

08016be4 <SDMMC_CmdGoIdleState>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8016be4:	4b12      	ldr	r3, [pc, #72]	; (8016c30 <SDMMC_CmdGoIdleState+0x4c>)
{
 8016be6:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 8016be8:	2200      	movs	r2, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8016bea:	6818      	ldr	r0, [r3, #0]
 8016bec:	f241 3388 	movw	r3, #5000	; 0x1388
{
 8016bf0:	b410      	push	{r4}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8016bf2:	4c10      	ldr	r4, [pc, #64]	; (8016c34 <SDMMC_CmdGoIdleState+0x50>)
  SDMMCx->ARG = Command->Argument;
 8016bf4:	608a      	str	r2, [r1, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8016bf6:	fba4 4000 	umull	r4, r0, r4, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016bfa:	4a0f      	ldr	r2, [pc, #60]	; (8016c38 <SDMMC_CmdGoIdleState+0x54>)
 8016bfc:	68cc      	ldr	r4, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8016bfe:	0a40      	lsrs	r0, r0, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016c00:	4022      	ands	r2, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8016c02:	fb03 f300 	mul.w	r3, r3, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016c06:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8016c0a:	60ca      	str	r2, [r1, #12]
 8016c0c:	e002      	b.n	8016c14 <SDMMC_CmdGoIdleState+0x30>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8016c0e:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8016c10:	0612      	lsls	r2, r2, #24
 8016c12:	d407      	bmi.n	8016c24 <SDMMC_CmdGoIdleState+0x40>
    if (count-- == 0U)
 8016c14:	f113 33ff 	adds.w	r3, r3, #4294967295
 8016c18:	d2f9      	bcs.n	8016c0e <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8016c1a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8016c1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016c22:	4770      	bx	lr
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8016c24:	4b05      	ldr	r3, [pc, #20]	; (8016c3c <SDMMC_CmdGoIdleState+0x58>)
  return SDMMC_ERROR_NONE;
 8016c26:	2000      	movs	r0, #0
}
 8016c28:	f85d 4b04 	ldr.w	r4, [sp], #4
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8016c2c:	638b      	str	r3, [r1, #56]	; 0x38
}
 8016c2e:	4770      	bx	lr
 8016c30:	24007290 	.word	0x24007290
 8016c34:	10624dd3 	.word	0x10624dd3
 8016c38:	fffee0c0 	.word	0xfffee0c0
 8016c3c:	002000c5 	.word	0x002000c5

08016c40 <SDMMC_CmdOperCond>:
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8016c40:	4a1c      	ldr	r2, [pc, #112]	; (8016cb4 <SDMMC_CmdOperCond+0x74>)
{
 8016c42:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8016c44:	4b1c      	ldr	r3, [pc, #112]	; (8016cb8 <SDMMC_CmdOperCond+0x78>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016c46:	f241 1008 	movw	r0, #4360	; 0x1108
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8016c4a:	6812      	ldr	r2, [r2, #0]
{
 8016c4c:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 8016c4e:	f44f 74d5 	mov.w	r4, #426	; 0x1aa
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8016c52:	fba3 3202 	umull	r3, r2, r3, r2
 8016c56:	f241 3388 	movw	r3, #5000	; 0x1388
  SDMMCx->ARG = Command->Argument;
 8016c5a:	608c      	str	r4, [r1, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8016c5c:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016c5e:	68cd      	ldr	r5, [r1, #12]
 8016c60:	4c16      	ldr	r4, [pc, #88]	; (8016cbc <SDMMC_CmdOperCond+0x7c>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8016c62:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016c66:	402c      	ands	r4, r5
 8016c68:	4320      	orrs	r0, r4
 8016c6a:	60c8      	str	r0, [r1, #12]

  do
  {
    if (count-- == 0U)
 8016c6c:	f113 33ff 	adds.w	r3, r3, #4294967295
 8016c70:	d313      	bcc.n	8016c9a <SDMMC_CmdOperCond+0x5a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
 8016c72:	6b4a      	ldr	r2, [r1, #52]	; 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8016c74:	f012 0f45 	tst.w	r2, #69	; 0x45
 8016c78:	d0f8      	beq.n	8016c6c <SDMMC_CmdOperCond+0x2c>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8016c7a:	0492      	lsls	r2, r2, #18
 8016c7c:	d4f6      	bmi.n	8016c6c <SDMMC_CmdOperCond+0x2c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8016c7e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8016c80:	075b      	lsls	r3, r3, #29
 8016c82:	d412      	bmi.n	8016caa <SDMMC_CmdOperCond+0x6a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8016c84:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8016c86:	f010 0001 	ands.w	r0, r0, #1
 8016c8a:	d10a      	bne.n	8016ca2 <SDMMC_CmdOperCond+0x62>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8016c8c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8016c8e:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8016c92:	d00d      	beq.n	8016cb0 <SDMMC_CmdOperCond+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8016c94:	2340      	movs	r3, #64	; 0x40
 8016c96:	638b      	str	r3, [r1, #56]	; 0x38
 8016c98:	e001      	b.n	8016c9e <SDMMC_CmdOperCond+0x5e>
      return SDMMC_ERROR_TIMEOUT;
 8016c9a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8016c9e:	bc30      	pop	{r4, r5}
 8016ca0:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8016ca2:	2001      	movs	r0, #1
 8016ca4:	6388      	str	r0, [r1, #56]	; 0x38
}
 8016ca6:	bc30      	pop	{r4, r5}
 8016ca8:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8016caa:	2004      	movs	r0, #4
 8016cac:	6388      	str	r0, [r1, #56]	; 0x38
 8016cae:	e7f6      	b.n	8016c9e <SDMMC_CmdOperCond+0x5e>
  }

  return SDMMC_ERROR_NONE;
 8016cb0:	4618      	mov	r0, r3
  return errorstate;
 8016cb2:	e7f4      	b.n	8016c9e <SDMMC_CmdOperCond+0x5e>
 8016cb4:	24007290 	.word	0x24007290
 8016cb8:	10624dd3 	.word	0x10624dd3
 8016cbc:	fffee0c0 	.word	0xfffee0c0

08016cc0 <SDMMC_CmdAppCommand>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016cc0:	4a1c      	ldr	r2, [pc, #112]	; (8016d34 <SDMMC_CmdAppCommand+0x74>)
 8016cc2:	4b1d      	ldr	r3, [pc, #116]	; (8016d38 <SDMMC_CmdAppCommand+0x78>)
 8016cc4:	6812      	ldr	r2, [r2, #0]
{
 8016cc6:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016cc8:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016ccc:	4d1b      	ldr	r5, [pc, #108]	; (8016d3c <SDMMC_CmdAppCommand+0x7c>)
  SDMMCx->ARG = Command->Argument;
 8016cce:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016cd0:	f241 1437 	movw	r4, #4407	; 0x1137
 8016cd4:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016cd6:	f241 3388 	movw	r3, #5000	; 0x1388
 8016cda:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016cdc:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8016cde:	4918      	ldr	r1, [pc, #96]	; (8016d40 <SDMMC_CmdAppCommand+0x80>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016ce0:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016ce4:	432c      	orrs	r4, r5
 8016ce6:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8016ce8:	f113 33ff 	adds.w	r3, r3, #4294967295
 8016cec:	d312      	bcc.n	8016d14 <SDMMC_CmdAppCommand+0x54>
    sta_reg = SDMMCx->STA;
 8016cee:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8016cf0:	420a      	tst	r2, r1
 8016cf2:	d0f9      	beq.n	8016ce8 <SDMMC_CmdAppCommand+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8016cf4:	0494      	lsls	r4, r2, #18
 8016cf6:	d4f7      	bmi.n	8016ce8 <SDMMC_CmdAppCommand+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8016cf8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8016cfa:	075a      	lsls	r2, r3, #29
 8016cfc:	d413      	bmi.n	8016d26 <SDMMC_CmdAppCommand+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8016cfe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8016d00:	07db      	lsls	r3, r3, #31
 8016d02:	d40b      	bmi.n	8016d1c <SDMMC_CmdAppCommand+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8016d04:	4b0f      	ldr	r3, [pc, #60]	; (8016d44 <SDMMC_CmdAppCommand+0x84>)
 8016d06:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8016d08:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8016d0a:	b2db      	uxtb	r3, r3
 8016d0c:	2b37      	cmp	r3, #55	; 0x37
 8016d0e:	d00e      	beq.n	8016d2e <SDMMC_CmdAppCommand+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8016d10:	2001      	movs	r0, #1
  return errorstate;
 8016d12:	e001      	b.n	8016d18 <SDMMC_CmdAppCommand+0x58>
      return SDMMC_ERROR_TIMEOUT;
 8016d14:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8016d18:	bc30      	pop	{r4, r5}
 8016d1a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8016d1c:	2301      	movs	r3, #1
}
 8016d1e:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8016d20:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8016d22:	4618      	mov	r0, r3
}
 8016d24:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8016d26:	2304      	movs	r3, #4
 8016d28:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8016d2a:	4618      	mov	r0, r3
 8016d2c:	e7f4      	b.n	8016d18 <SDMMC_CmdAppCommand+0x58>
}
 8016d2e:	bc30      	pop	{r4, r5}
 8016d30:	f7ff bca4 	b.w	801667c <SDMMC_GetCmdResp1.part.2>
 8016d34:	24007290 	.word	0x24007290
 8016d38:	10624dd3 	.word	0x10624dd3
 8016d3c:	fffee0c0 	.word	0xfffee0c0
 8016d40:	00200045 	.word	0x00200045
 8016d44:	002000c5 	.word	0x002000c5

08016d48 <SDMMC_CmdAppOperCommand>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8016d48:	4a15      	ldr	r2, [pc, #84]	; (8016da0 <SDMMC_CmdAppOperCommand+0x58>)
 8016d4a:	4b16      	ldr	r3, [pc, #88]	; (8016da4 <SDMMC_CmdAppOperCommand+0x5c>)
 8016d4c:	6812      	ldr	r2, [r2, #0]
{
 8016d4e:	b430      	push	{r4, r5}
 8016d50:	4604      	mov	r4, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8016d52:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016d56:	f241 1029 	movw	r0, #4393	; 0x1129
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8016d5a:	f241 3388 	movw	r3, #5000	; 0x1388
  SDMMCx->ARG = Command->Argument;
 8016d5e:	60a1      	str	r1, [r4, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8016d60:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016d62:	68e5      	ldr	r5, [r4, #12]
 8016d64:	4910      	ldr	r1, [pc, #64]	; (8016da8 <SDMMC_CmdAppOperCommand+0x60>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8016d66:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016d6a:	4029      	ands	r1, r5
 8016d6c:	4308      	orrs	r0, r1
 8016d6e:	60e0      	str	r0, [r4, #12]
    if (count-- == 0U)
 8016d70:	f113 33ff 	adds.w	r3, r3, #4294967295
 8016d74:	d30d      	bcc.n	8016d92 <SDMMC_CmdAppOperCommand+0x4a>
    sta_reg = SDMMCx->STA;
 8016d76:	6b62      	ldr	r2, [r4, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8016d78:	f012 0f45 	tst.w	r2, #69	; 0x45
 8016d7c:	d0f8      	beq.n	8016d70 <SDMMC_CmdAppOperCommand+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8016d7e:	0492      	lsls	r2, r2, #18
 8016d80:	d4f6      	bmi.n	8016d70 <SDMMC_CmdAppOperCommand+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8016d82:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8016d84:	f010 0004 	ands.w	r0, r0, #4
 8016d88:	d107      	bne.n	8016d9a <SDMMC_CmdAppOperCommand+0x52>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8016d8a:	4b08      	ldr	r3, [pc, #32]	; (8016dac <SDMMC_CmdAppOperCommand+0x64>)
 8016d8c:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8016d8e:	bc30      	pop	{r4, r5}
 8016d90:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8016d92:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8016d96:	bc30      	pop	{r4, r5}
 8016d98:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8016d9a:	2004      	movs	r0, #4
 8016d9c:	63a0      	str	r0, [r4, #56]	; 0x38
 8016d9e:	e7fa      	b.n	8016d96 <SDMMC_CmdAppOperCommand+0x4e>
 8016da0:	24007290 	.word	0x24007290
 8016da4:	10624dd3 	.word	0x10624dd3
 8016da8:	fffee0c0 	.word	0xfffee0c0
 8016dac:	002000c5 	.word	0x002000c5

08016db0 <SDMMC_CmdBusWidth>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016db0:	4a1c      	ldr	r2, [pc, #112]	; (8016e24 <SDMMC_CmdBusWidth+0x74>)
 8016db2:	4b1d      	ldr	r3, [pc, #116]	; (8016e28 <SDMMC_CmdBusWidth+0x78>)
 8016db4:	6812      	ldr	r2, [r2, #0]
{
 8016db6:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016db8:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016dbc:	4d1b      	ldr	r5, [pc, #108]	; (8016e2c <SDMMC_CmdBusWidth+0x7c>)
  SDMMCx->ARG = Command->Argument;
 8016dbe:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016dc0:	f241 1406 	movw	r4, #4358	; 0x1106
 8016dc4:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016dc6:	f241 3388 	movw	r3, #5000	; 0x1388
 8016dca:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016dcc:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8016dce:	4918      	ldr	r1, [pc, #96]	; (8016e30 <SDMMC_CmdBusWidth+0x80>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016dd0:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016dd4:	432c      	orrs	r4, r5
 8016dd6:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8016dd8:	f113 33ff 	adds.w	r3, r3, #4294967295
 8016ddc:	d312      	bcc.n	8016e04 <SDMMC_CmdBusWidth+0x54>
    sta_reg = SDMMCx->STA;
 8016dde:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8016de0:	420a      	tst	r2, r1
 8016de2:	d0f9      	beq.n	8016dd8 <SDMMC_CmdBusWidth+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8016de4:	0494      	lsls	r4, r2, #18
 8016de6:	d4f7      	bmi.n	8016dd8 <SDMMC_CmdBusWidth+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8016de8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8016dea:	075a      	lsls	r2, r3, #29
 8016dec:	d413      	bmi.n	8016e16 <SDMMC_CmdBusWidth+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8016dee:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8016df0:	07db      	lsls	r3, r3, #31
 8016df2:	d40b      	bmi.n	8016e0c <SDMMC_CmdBusWidth+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8016df4:	4b0f      	ldr	r3, [pc, #60]	; (8016e34 <SDMMC_CmdBusWidth+0x84>)
 8016df6:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8016df8:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8016dfa:	b2db      	uxtb	r3, r3
 8016dfc:	2b06      	cmp	r3, #6
 8016dfe:	d00e      	beq.n	8016e1e <SDMMC_CmdBusWidth+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8016e00:	2001      	movs	r0, #1
  return errorstate;
 8016e02:	e001      	b.n	8016e08 <SDMMC_CmdBusWidth+0x58>
      return SDMMC_ERROR_TIMEOUT;
 8016e04:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8016e08:	bc30      	pop	{r4, r5}
 8016e0a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8016e0c:	2301      	movs	r3, #1
}
 8016e0e:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8016e10:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8016e12:	4618      	mov	r0, r3
}
 8016e14:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8016e16:	2304      	movs	r3, #4
 8016e18:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8016e1a:	4618      	mov	r0, r3
 8016e1c:	e7f4      	b.n	8016e08 <SDMMC_CmdBusWidth+0x58>
}
 8016e1e:	bc30      	pop	{r4, r5}
 8016e20:	f7ff bc2c 	b.w	801667c <SDMMC_GetCmdResp1.part.2>
 8016e24:	24007290 	.word	0x24007290
 8016e28:	10624dd3 	.word	0x10624dd3
 8016e2c:	fffee0c0 	.word	0xfffee0c0
 8016e30:	00200045 	.word	0x00200045
 8016e34:	002000c5 	.word	0x002000c5

08016e38 <SDMMC_CmdSendSCR>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016e38:	4a1d      	ldr	r2, [pc, #116]	; (8016eb0 <SDMMC_CmdSendSCR+0x78>)
  SDMMCx->ARG = Command->Argument;
 8016e3a:	2100      	movs	r1, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016e3c:	4b1d      	ldr	r3, [pc, #116]	; (8016eb4 <SDMMC_CmdSendSCR+0x7c>)
 8016e3e:	6812      	ldr	r2, [r2, #0]
{
 8016e40:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016e42:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016e46:	4d1c      	ldr	r5, [pc, #112]	; (8016eb8 <SDMMC_CmdSendSCR+0x80>)
  SDMMCx->ARG = Command->Argument;
 8016e48:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016e4a:	f241 1433 	movw	r4, #4403	; 0x1133
 8016e4e:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016e50:	f241 3388 	movw	r3, #5000	; 0x1388
 8016e54:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016e56:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8016e58:	4918      	ldr	r1, [pc, #96]	; (8016ebc <SDMMC_CmdSendSCR+0x84>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8016e5a:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016e5e:	432c      	orrs	r4, r5
 8016e60:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8016e62:	f113 33ff 	adds.w	r3, r3, #4294967295
 8016e66:	d312      	bcc.n	8016e8e <SDMMC_CmdSendSCR+0x56>
    sta_reg = SDMMCx->STA;
 8016e68:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8016e6a:	420a      	tst	r2, r1
 8016e6c:	d0f9      	beq.n	8016e62 <SDMMC_CmdSendSCR+0x2a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8016e6e:	0494      	lsls	r4, r2, #18
 8016e70:	d4f7      	bmi.n	8016e62 <SDMMC_CmdSendSCR+0x2a>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8016e72:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8016e74:	075a      	lsls	r2, r3, #29
 8016e76:	d413      	bmi.n	8016ea0 <SDMMC_CmdSendSCR+0x68>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8016e78:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8016e7a:	07db      	lsls	r3, r3, #31
 8016e7c:	d40b      	bmi.n	8016e96 <SDMMC_CmdSendSCR+0x5e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8016e7e:	4b10      	ldr	r3, [pc, #64]	; (8016ec0 <SDMMC_CmdSendSCR+0x88>)
 8016e80:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8016e82:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8016e84:	b2db      	uxtb	r3, r3
 8016e86:	2b33      	cmp	r3, #51	; 0x33
 8016e88:	d00e      	beq.n	8016ea8 <SDMMC_CmdSendSCR+0x70>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8016e8a:	2001      	movs	r0, #1
  return errorstate;
 8016e8c:	e001      	b.n	8016e92 <SDMMC_CmdSendSCR+0x5a>
      return SDMMC_ERROR_TIMEOUT;
 8016e8e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8016e92:	bc30      	pop	{r4, r5}
 8016e94:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8016e96:	2301      	movs	r3, #1
}
 8016e98:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8016e9a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8016e9c:	4618      	mov	r0, r3
}
 8016e9e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8016ea0:	2304      	movs	r3, #4
 8016ea2:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8016ea4:	4618      	mov	r0, r3
 8016ea6:	e7f4      	b.n	8016e92 <SDMMC_CmdSendSCR+0x5a>
}
 8016ea8:	bc30      	pop	{r4, r5}
 8016eaa:	f7ff bbe7 	b.w	801667c <SDMMC_GetCmdResp1.part.2>
 8016eae:	bf00      	nop
 8016eb0:	24007290 	.word	0x24007290
 8016eb4:	10624dd3 	.word	0x10624dd3
 8016eb8:	fffee0c0 	.word	0xfffee0c0
 8016ebc:	00200045 	.word	0x00200045
 8016ec0:	002000c5 	.word	0x002000c5

08016ec4 <SDMMC_CmdSendCID>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8016ec4:	4a19      	ldr	r2, [pc, #100]	; (8016f2c <SDMMC_CmdSendCID+0x68>)
{
 8016ec6:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8016ec8:	4b19      	ldr	r3, [pc, #100]	; (8016f30 <SDMMC_CmdSendCID+0x6c>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016eca:	f241 3002 	movw	r0, #4866	; 0x1302
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8016ece:	6812      	ldr	r2, [r2, #0]
{
 8016ed0:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 8016ed2:	2400      	movs	r4, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8016ed4:	fba3 3202 	umull	r3, r2, r3, r2
 8016ed8:	f241 3388 	movw	r3, #5000	; 0x1388
  SDMMCx->ARG = Command->Argument;
 8016edc:	608c      	str	r4, [r1, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8016ede:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016ee0:	68cd      	ldr	r5, [r1, #12]
 8016ee2:	4c14      	ldr	r4, [pc, #80]	; (8016f34 <SDMMC_CmdSendCID+0x70>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8016ee4:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016ee8:	402c      	ands	r4, r5
 8016eea:	4320      	orrs	r0, r4
 8016eec:	60c8      	str	r0, [r1, #12]
    if (count-- == 0U)
 8016eee:	f113 33ff 	adds.w	r3, r3, #4294967295
 8016ef2:	d310      	bcc.n	8016f16 <SDMMC_CmdSendCID+0x52>
    sta_reg = SDMMCx->STA;
 8016ef4:	6b4a      	ldr	r2, [r1, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8016ef6:	f012 0f45 	tst.w	r2, #69	; 0x45
 8016efa:	d0f8      	beq.n	8016eee <SDMMC_CmdSendCID+0x2a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8016efc:	0492      	lsls	r2, r2, #18
 8016efe:	d4f6      	bmi.n	8016eee <SDMMC_CmdSendCID+0x2a>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8016f00:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8016f02:	075b      	lsls	r3, r3, #29
 8016f04:	d40f      	bmi.n	8016f26 <SDMMC_CmdSendCID+0x62>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8016f06:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8016f08:	f010 0001 	ands.w	r0, r0, #1
 8016f0c:	d107      	bne.n	8016f1e <SDMMC_CmdSendCID+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8016f0e:	4b0a      	ldr	r3, [pc, #40]	; (8016f38 <SDMMC_CmdSendCID+0x74>)
 8016f10:	638b      	str	r3, [r1, #56]	; 0x38
}
 8016f12:	bc30      	pop	{r4, r5}
 8016f14:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8016f16:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8016f1a:	bc30      	pop	{r4, r5}
 8016f1c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8016f1e:	2001      	movs	r0, #1
 8016f20:	6388      	str	r0, [r1, #56]	; 0x38
}
 8016f22:	bc30      	pop	{r4, r5}
 8016f24:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8016f26:	2004      	movs	r0, #4
 8016f28:	6388      	str	r0, [r1, #56]	; 0x38
 8016f2a:	e7f6      	b.n	8016f1a <SDMMC_CmdSendCID+0x56>
 8016f2c:	24007290 	.word	0x24007290
 8016f30:	10624dd3 	.word	0x10624dd3
 8016f34:	fffee0c0 	.word	0xfffee0c0
 8016f38:	002000c5 	.word	0x002000c5

08016f3c <SDMMC_CmdSendCSD>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8016f3c:	4a19      	ldr	r2, [pc, #100]	; (8016fa4 <SDMMC_CmdSendCSD+0x68>)
 8016f3e:	4b1a      	ldr	r3, [pc, #104]	; (8016fa8 <SDMMC_CmdSendCSD+0x6c>)
 8016f40:	6812      	ldr	r2, [r2, #0]
{
 8016f42:	b430      	push	{r4, r5}
 8016f44:	4604      	mov	r4, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8016f46:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016f4a:	f241 3009 	movw	r0, #4873	; 0x1309
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8016f4e:	f241 3388 	movw	r3, #5000	; 0x1388
  SDMMCx->ARG = Command->Argument;
 8016f52:	60a1      	str	r1, [r4, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8016f54:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016f56:	68e5      	ldr	r5, [r4, #12]
 8016f58:	4914      	ldr	r1, [pc, #80]	; (8016fac <SDMMC_CmdSendCSD+0x70>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8016f5a:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016f5e:	4029      	ands	r1, r5
 8016f60:	4308      	orrs	r0, r1
 8016f62:	60e0      	str	r0, [r4, #12]
    if (count-- == 0U)
 8016f64:	f113 33ff 	adds.w	r3, r3, #4294967295
 8016f68:	d310      	bcc.n	8016f8c <SDMMC_CmdSendCSD+0x50>
    sta_reg = SDMMCx->STA;
 8016f6a:	6b62      	ldr	r2, [r4, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8016f6c:	f012 0f45 	tst.w	r2, #69	; 0x45
 8016f70:	d0f8      	beq.n	8016f64 <SDMMC_CmdSendCSD+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8016f72:	0492      	lsls	r2, r2, #18
 8016f74:	d4f6      	bmi.n	8016f64 <SDMMC_CmdSendCSD+0x28>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8016f76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016f78:	075b      	lsls	r3, r3, #29
 8016f7a:	d40f      	bmi.n	8016f9c <SDMMC_CmdSendCSD+0x60>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8016f7c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8016f7e:	f010 0001 	ands.w	r0, r0, #1
 8016f82:	d107      	bne.n	8016f94 <SDMMC_CmdSendCSD+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8016f84:	4b0a      	ldr	r3, [pc, #40]	; (8016fb0 <SDMMC_CmdSendCSD+0x74>)
 8016f86:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8016f88:	bc30      	pop	{r4, r5}
 8016f8a:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8016f8c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8016f90:	bc30      	pop	{r4, r5}
 8016f92:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8016f94:	2001      	movs	r0, #1
 8016f96:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8016f98:	bc30      	pop	{r4, r5}
 8016f9a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8016f9c:	2004      	movs	r0, #4
 8016f9e:	63a0      	str	r0, [r4, #56]	; 0x38
 8016fa0:	e7f6      	b.n	8016f90 <SDMMC_CmdSendCSD+0x54>
 8016fa2:	bf00      	nop
 8016fa4:	24007290 	.word	0x24007290
 8016fa8:	10624dd3 	.word	0x10624dd3
 8016fac:	fffee0c0 	.word	0xfffee0c0
 8016fb0:	002000c5 	.word	0x002000c5

08016fb4 <SDMMC_CmdSetRelAdd>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8016fb4:	4b25      	ldr	r3, [pc, #148]	; (801704c <SDMMC_CmdSetRelAdd+0x98>)
 8016fb6:	4a26      	ldr	r2, [pc, #152]	; (8017050 <SDMMC_CmdSetRelAdd+0x9c>)
 8016fb8:	681b      	ldr	r3, [r3, #0]
{
 8016fba:	b470      	push	{r4, r5, r6}
  SDMMCx->ARG = Command->Argument;
 8016fbc:	2400      	movs	r4, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8016fbe:	fba2 2303 	umull	r2, r3, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016fc2:	4d24      	ldr	r5, [pc, #144]	; (8017054 <SDMMC_CmdSetRelAdd+0xa0>)
  SDMMCx->ARG = Command->Argument;
 8016fc4:	6084      	str	r4, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8016fc6:	0a5a      	lsrs	r2, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016fc8:	68c6      	ldr	r6, [r0, #12]
 8016fca:	f241 1403 	movw	r4, #4355	; 0x1103
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8016fce:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016fd2:	4035      	ands	r5, r6
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8016fd4:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8016fd8:	432c      	orrs	r4, r5
 8016fda:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8016fdc:	f113 33ff 	adds.w	r3, r3, #4294967295
 8016fe0:	d311      	bcc.n	8017006 <SDMMC_CmdSetRelAdd+0x52>
    sta_reg = SDMMCx->STA;
 8016fe2:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8016fe4:	f012 0f45 	tst.w	r2, #69	; 0x45
 8016fe8:	d0f8      	beq.n	8016fdc <SDMMC_CmdSetRelAdd+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8016fea:	0496      	lsls	r6, r2, #18
 8016fec:	d4f6      	bmi.n	8016fdc <SDMMC_CmdSetRelAdd+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8016fee:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8016ff0:	075d      	lsls	r5, r3, #29
 8016ff2:	d411      	bmi.n	8017018 <SDMMC_CmdSetRelAdd+0x64>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8016ff4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8016ff6:	07dc      	lsls	r4, r3, #31
 8016ff8:	d409      	bmi.n	801700e <SDMMC_CmdSetRelAdd+0x5a>
  return (uint8_t)(SDMMCx->RESPCMD);
 8016ffa:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8016ffc:	b2db      	uxtb	r3, r3
 8016ffe:	2b03      	cmp	r3, #3
 8017000:	d00e      	beq.n	8017020 <SDMMC_CmdSetRelAdd+0x6c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8017002:	2001      	movs	r0, #1
 8017004:	e001      	b.n	801700a <SDMMC_CmdSetRelAdd+0x56>
      return SDMMC_ERROR_TIMEOUT;
 8017006:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 801700a:	bc70      	pop	{r4, r5, r6}
 801700c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801700e:	2301      	movs	r3, #1
}
 8017010:	bc70      	pop	{r4, r5, r6}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8017012:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8017014:	4618      	mov	r0, r3
}
 8017016:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8017018:	2304      	movs	r3, #4
 801701a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801701c:	4618      	mov	r0, r3
 801701e:	e7f4      	b.n	801700a <SDMMC_CmdSetRelAdd+0x56>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8017020:	4b0d      	ldr	r3, [pc, #52]	; (8017058 <SDMMC_CmdSetRelAdd+0xa4>)
 8017022:	6383      	str	r3, [r0, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 8017024:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8017026:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 801702a:	d009      	beq.n	8017040 <SDMMC_CmdSetRelAdd+0x8c>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801702c:	045a      	lsls	r2, r3, #17
 801702e:	d40a      	bmi.n	8017046 <SDMMC_CmdSetRelAdd+0x92>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8017030:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8017034:	bf0c      	ite	eq
 8017036:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 801703a:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 801703e:	e7e4      	b.n	801700a <SDMMC_CmdSetRelAdd+0x56>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8017040:	0c1b      	lsrs	r3, r3, #16
 8017042:	800b      	strh	r3, [r1, #0]
 8017044:	e7e1      	b.n	801700a <SDMMC_CmdSetRelAdd+0x56>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8017046:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 801704a:	e7de      	b.n	801700a <SDMMC_CmdSetRelAdd+0x56>
 801704c:	24007290 	.word	0x24007290
 8017050:	10624dd3 	.word	0x10624dd3
 8017054:	fffee0c0 	.word	0xfffee0c0
 8017058:	002000c5 	.word	0x002000c5

0801705c <SDMMC_CmdSendStatus>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801705c:	4a1c      	ldr	r2, [pc, #112]	; (80170d0 <SDMMC_CmdSendStatus+0x74>)
 801705e:	4b1d      	ldr	r3, [pc, #116]	; (80170d4 <SDMMC_CmdSendStatus+0x78>)
 8017060:	6812      	ldr	r2, [r2, #0]
{
 8017062:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8017064:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8017068:	4d1b      	ldr	r5, [pc, #108]	; (80170d8 <SDMMC_CmdSendStatus+0x7c>)
  SDMMCx->ARG = Command->Argument;
 801706a:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801706c:	f241 140d 	movw	r4, #4365	; 0x110d
 8017070:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8017072:	f241 3388 	movw	r3, #5000	; 0x1388
 8017076:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8017078:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 801707a:	4918      	ldr	r1, [pc, #96]	; (80170dc <SDMMC_CmdSendStatus+0x80>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801707c:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8017080:	432c      	orrs	r4, r5
 8017082:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8017084:	f113 33ff 	adds.w	r3, r3, #4294967295
 8017088:	d312      	bcc.n	80170b0 <SDMMC_CmdSendStatus+0x54>
    sta_reg = SDMMCx->STA;
 801708a:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801708c:	420a      	tst	r2, r1
 801708e:	d0f9      	beq.n	8017084 <SDMMC_CmdSendStatus+0x28>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8017090:	0494      	lsls	r4, r2, #18
 8017092:	d4f7      	bmi.n	8017084 <SDMMC_CmdSendStatus+0x28>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8017094:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8017096:	075a      	lsls	r2, r3, #29
 8017098:	d413      	bmi.n	80170c2 <SDMMC_CmdSendStatus+0x66>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801709a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801709c:	07db      	lsls	r3, r3, #31
 801709e:	d40b      	bmi.n	80170b8 <SDMMC_CmdSendStatus+0x5c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80170a0:	4b0f      	ldr	r3, [pc, #60]	; (80170e0 <SDMMC_CmdSendStatus+0x84>)
 80170a2:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80170a4:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80170a6:	b2db      	uxtb	r3, r3
 80170a8:	2b0d      	cmp	r3, #13
 80170aa:	d00e      	beq.n	80170ca <SDMMC_CmdSendStatus+0x6e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80170ac:	2001      	movs	r0, #1
  return errorstate;
 80170ae:	e001      	b.n	80170b4 <SDMMC_CmdSendStatus+0x58>
      return SDMMC_ERROR_TIMEOUT;
 80170b0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80170b4:	bc30      	pop	{r4, r5}
 80170b6:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80170b8:	2301      	movs	r3, #1
}
 80170ba:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80170bc:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80170be:	4618      	mov	r0, r3
}
 80170c0:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80170c2:	2304      	movs	r3, #4
 80170c4:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80170c6:	4618      	mov	r0, r3
 80170c8:	e7f4      	b.n	80170b4 <SDMMC_CmdSendStatus+0x58>
}
 80170ca:	bc30      	pop	{r4, r5}
 80170cc:	f7ff bad6 	b.w	801667c <SDMMC_GetCmdResp1.part.2>
 80170d0:	24007290 	.word	0x24007290
 80170d4:	10624dd3 	.word	0x10624dd3
 80170d8:	fffee0c0 	.word	0xfffee0c0
 80170dc:	00200045 	.word	0x00200045
 80170e0:	002000c5 	.word	0x002000c5

080170e4 <SDMMC_CmdStatusRegister>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80170e4:	4a1d      	ldr	r2, [pc, #116]	; (801715c <SDMMC_CmdStatusRegister+0x78>)
  SDMMCx->ARG = Command->Argument;
 80170e6:	2100      	movs	r1, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80170e8:	4b1d      	ldr	r3, [pc, #116]	; (8017160 <SDMMC_CmdStatusRegister+0x7c>)
 80170ea:	6812      	ldr	r2, [r2, #0]
{
 80170ec:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80170ee:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80170f2:	4d1c      	ldr	r5, [pc, #112]	; (8017164 <SDMMC_CmdStatusRegister+0x80>)
  SDMMCx->ARG = Command->Argument;
 80170f4:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80170f6:	f241 140d 	movw	r4, #4365	; 0x110d
 80170fa:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80170fc:	f241 3388 	movw	r3, #5000	; 0x1388
 8017100:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8017102:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8017104:	4918      	ldr	r1, [pc, #96]	; (8017168 <SDMMC_CmdStatusRegister+0x84>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8017106:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801710a:	432c      	orrs	r4, r5
 801710c:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 801710e:	f113 33ff 	adds.w	r3, r3, #4294967295
 8017112:	d312      	bcc.n	801713a <SDMMC_CmdStatusRegister+0x56>
    sta_reg = SDMMCx->STA;
 8017114:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8017116:	420a      	tst	r2, r1
 8017118:	d0f9      	beq.n	801710e <SDMMC_CmdStatusRegister+0x2a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 801711a:	0494      	lsls	r4, r2, #18
 801711c:	d4f7      	bmi.n	801710e <SDMMC_CmdStatusRegister+0x2a>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801711e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8017120:	075a      	lsls	r2, r3, #29
 8017122:	d413      	bmi.n	801714c <SDMMC_CmdStatusRegister+0x68>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8017124:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8017126:	07db      	lsls	r3, r3, #31
 8017128:	d40b      	bmi.n	8017142 <SDMMC_CmdStatusRegister+0x5e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801712a:	4b10      	ldr	r3, [pc, #64]	; (801716c <SDMMC_CmdStatusRegister+0x88>)
 801712c:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 801712e:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8017130:	b2db      	uxtb	r3, r3
 8017132:	2b0d      	cmp	r3, #13
 8017134:	d00e      	beq.n	8017154 <SDMMC_CmdStatusRegister+0x70>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8017136:	2001      	movs	r0, #1
  return errorstate;
 8017138:	e001      	b.n	801713e <SDMMC_CmdStatusRegister+0x5a>
      return SDMMC_ERROR_TIMEOUT;
 801713a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 801713e:	bc30      	pop	{r4, r5}
 8017140:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8017142:	2301      	movs	r3, #1
}
 8017144:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8017146:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8017148:	4618      	mov	r0, r3
}
 801714a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801714c:	2304      	movs	r3, #4
 801714e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8017150:	4618      	mov	r0, r3
 8017152:	e7f4      	b.n	801713e <SDMMC_CmdStatusRegister+0x5a>
}
 8017154:	bc30      	pop	{r4, r5}
 8017156:	f7ff ba91 	b.w	801667c <SDMMC_GetCmdResp1.part.2>
 801715a:	bf00      	nop
 801715c:	24007290 	.word	0x24007290
 8017160:	10624dd3 	.word	0x10624dd3
 8017164:	fffee0c0 	.word	0xfffee0c0
 8017168:	00200045 	.word	0x00200045
 801716c:	002000c5 	.word	0x002000c5

08017170 <SDMMC_CmdSwitch>:
 8017170:	4a1c      	ldr	r2, [pc, #112]	; (80171e4 <SDMMC_CmdSwitch+0x74>)
 8017172:	4b1d      	ldr	r3, [pc, #116]	; (80171e8 <SDMMC_CmdSwitch+0x78>)
 8017174:	6812      	ldr	r2, [r2, #0]
 8017176:	b430      	push	{r4, r5}
 8017178:	fba3 3202 	umull	r3, r2, r3, r2
 801717c:	4d1b      	ldr	r5, [pc, #108]	; (80171ec <SDMMC_CmdSwitch+0x7c>)
 801717e:	6081      	str	r1, [r0, #8]
 8017180:	f241 1406 	movw	r4, #4358	; 0x1106
 8017184:	68c1      	ldr	r1, [r0, #12]
 8017186:	f241 3388 	movw	r3, #5000	; 0x1388
 801718a:	0a52      	lsrs	r2, r2, #9
 801718c:	400d      	ands	r5, r1
 801718e:	4918      	ldr	r1, [pc, #96]	; (80171f0 <SDMMC_CmdSwitch+0x80>)
 8017190:	fb03 f302 	mul.w	r3, r3, r2
 8017194:	432c      	orrs	r4, r5
 8017196:	60c4      	str	r4, [r0, #12]
 8017198:	f113 33ff 	adds.w	r3, r3, #4294967295
 801719c:	d312      	bcc.n	80171c4 <SDMMC_CmdSwitch+0x54>
 801719e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80171a0:	420a      	tst	r2, r1
 80171a2:	d0f9      	beq.n	8017198 <SDMMC_CmdSwitch+0x28>
 80171a4:	0494      	lsls	r4, r2, #18
 80171a6:	d4f7      	bmi.n	8017198 <SDMMC_CmdSwitch+0x28>
 80171a8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80171aa:	075a      	lsls	r2, r3, #29
 80171ac:	d413      	bmi.n	80171d6 <SDMMC_CmdSwitch+0x66>
 80171ae:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80171b0:	07db      	lsls	r3, r3, #31
 80171b2:	d40b      	bmi.n	80171cc <SDMMC_CmdSwitch+0x5c>
 80171b4:	4b0f      	ldr	r3, [pc, #60]	; (80171f4 <SDMMC_CmdSwitch+0x84>)
 80171b6:	6383      	str	r3, [r0, #56]	; 0x38
 80171b8:	6903      	ldr	r3, [r0, #16]
 80171ba:	b2db      	uxtb	r3, r3
 80171bc:	2b06      	cmp	r3, #6
 80171be:	d00e      	beq.n	80171de <SDMMC_CmdSwitch+0x6e>
 80171c0:	2001      	movs	r0, #1
 80171c2:	e001      	b.n	80171c8 <SDMMC_CmdSwitch+0x58>
 80171c4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80171c8:	bc30      	pop	{r4, r5}
 80171ca:	4770      	bx	lr
 80171cc:	2301      	movs	r3, #1
 80171ce:	bc30      	pop	{r4, r5}
 80171d0:	6383      	str	r3, [r0, #56]	; 0x38
 80171d2:	4618      	mov	r0, r3
 80171d4:	4770      	bx	lr
 80171d6:	2304      	movs	r3, #4
 80171d8:	6383      	str	r3, [r0, #56]	; 0x38
 80171da:	4618      	mov	r0, r3
 80171dc:	e7f4      	b.n	80171c8 <SDMMC_CmdSwitch+0x58>
 80171de:	bc30      	pop	{r4, r5}
 80171e0:	f7ff ba4c 	b.w	801667c <SDMMC_GetCmdResp1.part.2>
 80171e4:	24007290 	.word	0x24007290
 80171e8:	10624dd3 	.word	0x10624dd3
 80171ec:	fffee0c0 	.word	0xfffee0c0
 80171f0:	00200045 	.word	0x00200045
 80171f4:	002000c5 	.word	0x002000c5

080171f8 <SDMMC_CmdVoltageSwitch>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80171f8:	4a1d      	ldr	r2, [pc, #116]	; (8017270 <SDMMC_CmdVoltageSwitch+0x78>)
  SDMMCx->ARG = Command->Argument;
 80171fa:	2100      	movs	r1, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80171fc:	4b1d      	ldr	r3, [pc, #116]	; (8017274 <SDMMC_CmdVoltageSwitch+0x7c>)
 80171fe:	6812      	ldr	r2, [r2, #0]
{
 8017200:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8017202:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8017206:	4d1c      	ldr	r5, [pc, #112]	; (8017278 <SDMMC_CmdVoltageSwitch+0x80>)
  SDMMCx->ARG = Command->Argument;
 8017208:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801720a:	f241 140b 	movw	r4, #4363	; 0x110b
 801720e:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8017210:	f241 3388 	movw	r3, #5000	; 0x1388
 8017214:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8017216:	400d      	ands	r5, r1
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8017218:	4918      	ldr	r1, [pc, #96]	; (801727c <SDMMC_CmdVoltageSwitch+0x84>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801721a:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801721e:	432c      	orrs	r4, r5
 8017220:	60c4      	str	r4, [r0, #12]
    if (count-- == 0U)
 8017222:	f113 33ff 	adds.w	r3, r3, #4294967295
 8017226:	d312      	bcc.n	801724e <SDMMC_CmdVoltageSwitch+0x56>
    sta_reg = SDMMCx->STA;
 8017228:	6b42      	ldr	r2, [r0, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801722a:	420a      	tst	r2, r1
 801722c:	d0f9      	beq.n	8017222 <SDMMC_CmdVoltageSwitch+0x2a>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 801722e:	0494      	lsls	r4, r2, #18
 8017230:	d4f7      	bmi.n	8017222 <SDMMC_CmdVoltageSwitch+0x2a>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8017232:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8017234:	075a      	lsls	r2, r3, #29
 8017236:	d413      	bmi.n	8017260 <SDMMC_CmdVoltageSwitch+0x68>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8017238:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801723a:	07db      	lsls	r3, r3, #31
 801723c:	d40b      	bmi.n	8017256 <SDMMC_CmdVoltageSwitch+0x5e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801723e:	4b10      	ldr	r3, [pc, #64]	; (8017280 <SDMMC_CmdVoltageSwitch+0x88>)
 8017240:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8017242:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8017244:	b2db      	uxtb	r3, r3
 8017246:	2b0b      	cmp	r3, #11
 8017248:	d00e      	beq.n	8017268 <SDMMC_CmdVoltageSwitch+0x70>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801724a:	2001      	movs	r0, #1
  return errorstate;
 801724c:	e001      	b.n	8017252 <SDMMC_CmdVoltageSwitch+0x5a>
      return SDMMC_ERROR_TIMEOUT;
 801724e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8017252:	bc30      	pop	{r4, r5}
 8017254:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8017256:	2301      	movs	r3, #1
}
 8017258:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801725a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801725c:	4618      	mov	r0, r3
}
 801725e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8017260:	2304      	movs	r3, #4
 8017262:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8017264:	4618      	mov	r0, r3
 8017266:	e7f4      	b.n	8017252 <SDMMC_CmdVoltageSwitch+0x5a>
}
 8017268:	bc30      	pop	{r4, r5}
 801726a:	f7ff ba07 	b.w	801667c <SDMMC_GetCmdResp1.part.2>
 801726e:	bf00      	nop
 8017270:	24007290 	.word	0x24007290
 8017274:	10624dd3 	.word	0x10624dd3
 8017278:	fffee0c0 	.word	0xfffee0c0
 801727c:	00200045 	.word	0x00200045
 8017280:	002000c5 	.word	0x002000c5

08017284 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8017284:	287f      	cmp	r0, #127	; 0x7f
 8017286:	d918      	bls.n	80172ba <ff_convert+0x36>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 8017288:	b981      	cbnz	r1, 80172ac <ff_convert+0x28>
 801728a:	4b0e      	ldr	r3, [pc, #56]	; (80172c4 <ff_convert+0x40>)
{
 801728c:	b410      	push	{r4}
 801728e:	e001      	b.n	8017294 <ff_convert+0x10>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8017290:	2980      	cmp	r1, #128	; 0x80
 8017292:	d015      	beq.n	80172c0 <ff_convert+0x3c>
				if (chr == Tbl[c]) break;
 8017294:	f833 2b02 	ldrh.w	r2, [r3], #2
 8017298:	b28c      	uxth	r4, r1
 801729a:	3101      	adds	r1, #1
 801729c:	4282      	cmp	r2, r0
 801729e:	d1f7      	bne.n	8017290 <ff_convert+0xc>
 80172a0:	f104 0080 	add.w	r0, r4, #128	; 0x80
 80172a4:	b280      	uxth	r0, r0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
 80172a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80172aa:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80172ac:	28ff      	cmp	r0, #255	; 0xff
 80172ae:	d805      	bhi.n	80172bc <ff_convert+0x38>
 80172b0:	4b04      	ldr	r3, [pc, #16]	; (80172c4 <ff_convert+0x40>)
 80172b2:	3880      	subs	r0, #128	; 0x80
 80172b4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80172b8:	4770      	bx	lr
}
 80172ba:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80172bc:	2000      	movs	r0, #0
 80172be:	4770      	bx	lr
 80172c0:	2000      	movs	r0, #0
 80172c2:	e7f0      	b.n	80172a6 <ff_convert+0x22>
 80172c4:	080bfc40 	.word	0x080bfc40

080172c8 <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80172c8:	4b22      	ldr	r3, [pc, #136]	; (8017354 <ff_wtoupper+0x8c>)
 80172ca:	4a23      	ldr	r2, [pc, #140]	; (8017358 <ff_wtoupper+0x90>)
 80172cc:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80172d0:	bf38      	it	cc
 80172d2:	4613      	movcc	r3, r2
{
 80172d4:	b470      	push	{r4, r5, r6}
 80172d6:	3304      	adds	r3, #4
 80172d8:	e001      	b.n	80172de <ff_wtoupper+0x16>
 80172da:	3304      	adds	r3, #4
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 80172dc:	b1ca      	cbz	r2, 8017312 <ff_wtoupper+0x4a>
		bc = *p++;								/* Get block base */
 80172de:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 80172e2:	461e      	mov	r6, r3
		if (!bc || chr < bc) break;
 80172e4:	b199      	cbz	r1, 801730e <ff_wtoupper+0x46>
 80172e6:	4288      	cmp	r0, r1
 80172e8:	d311      	bcc.n	801730e <ff_wtoupper+0x46>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80172ea:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 80172ee:	b2d4      	uxtb	r4, r2
 80172f0:	0a12      	lsrs	r2, r2, #8
		if (chr < bc + nc) {	/* In the block? */
 80172f2:	1865      	adds	r5, r4, r1
 80172f4:	42a8      	cmp	r0, r5
 80172f6:	daf0      	bge.n	80172da <ff_wtoupper+0x12>
			switch (cmd) {
 80172f8:	2a08      	cmp	r2, #8
 80172fa:	d808      	bhi.n	801730e <ff_wtoupper+0x46>
 80172fc:	e8df f002 	tbb	[pc, r2]
 8017300:	1d1a1410 	.word	0x1d1a1410
 8017304:	05262320 	.word	0x05262320
 8017308:	0c          	.byte	0x0c
 8017309:	00          	.byte	0x00
			case 7: chr -= 80; break;				/* Shift -80 */
 801730a:	3850      	subs	r0, #80	; 0x50
 801730c:	b280      	uxth	r0, r0
	}

	return chr;
}
 801730e:	bc70      	pop	{r4, r5, r6}
 8017310:	4770      	bx	lr
		if (!cmd) p += nc;
 8017312:	eb06 0344 	add.w	r3, r6, r4, lsl #1
 8017316:	e7de      	b.n	80172d6 <ff_wtoupper+0xe>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8017318:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 801731c:	b280      	uxth	r0, r0
 801731e:	e7f6      	b.n	801730e <ff_wtoupper+0x46>
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8017320:	1a41      	subs	r1, r0, r1
 8017322:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8017326:	e7f2      	b.n	801730e <ff_wtoupper+0x46>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8017328:	1a41      	subs	r1, r0, r1
 801732a:	f001 0301 	and.w	r3, r1, #1
 801732e:	1ac0      	subs	r0, r0, r3
 8017330:	b280      	uxth	r0, r0
 8017332:	e7ec      	b.n	801730e <ff_wtoupper+0x46>
			case 2: chr -= 16; break;				/* Shift -16 */
 8017334:	3810      	subs	r0, #16
 8017336:	b280      	uxth	r0, r0
 8017338:	e7e9      	b.n	801730e <ff_wtoupper+0x46>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801733a:	3820      	subs	r0, #32
 801733c:	b280      	uxth	r0, r0
 801733e:	e7e6      	b.n	801730e <ff_wtoupper+0x46>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8017340:	3830      	subs	r0, #48	; 0x30
 8017342:	b280      	uxth	r0, r0
 8017344:	e7e3      	b.n	801730e <ff_wtoupper+0x46>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8017346:	381a      	subs	r0, #26
 8017348:	b280      	uxth	r0, r0
 801734a:	e7e0      	b.n	801730e <ff_wtoupper+0x46>
			case 6:	chr += 8; break;				/* Shift +8 */
 801734c:	3008      	adds	r0, #8
 801734e:	b280      	uxth	r0, r0
 8017350:	e7dd      	b.n	801730e <ff_wtoupper+0x46>
 8017352:	bf00      	nop
 8017354:	080bff34 	.word	0x080bff34
 8017358:	080bfd40 	.word	0x080bfd40

0801735c <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801735c:	4b03      	ldr	r3, [pc, #12]	; (801736c <disk_status+0x10>)
 801735e:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8017362:	4403      	add	r3, r0
 8017364:	6852      	ldr	r2, [r2, #4]
 8017366:	7b18      	ldrb	r0, [r3, #12]
 8017368:	6853      	ldr	r3, [r2, #4]
 801736a:	4718      	bx	r3
 801736c:	240092dc 	.word	0x240092dc

08017370 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8017370:	4b08      	ldr	r3, [pc, #32]	; (8017394 <disk_initialize+0x24>)
 8017372:	5c1a      	ldrb	r2, [r3, r0]
 8017374:	b95a      	cbnz	r2, 801738e <disk_initialize+0x1e>
  {
    disk.is_initialized[pdrv] = 1;
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8017376:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 801737a:	1819      	adds	r1, r3, r0
{
 801737c:	b410      	push	{r4}
    disk.is_initialized[pdrv] = 1;
 801737e:	2401      	movs	r4, #1
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8017380:	6852      	ldr	r2, [r2, #4]
    disk.is_initialized[pdrv] = 1;
 8017382:	541c      	strb	r4, [r3, r0]
  }
  return stat;
}
 8017384:	f85d 4b04 	ldr.w	r4, [sp], #4
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8017388:	7b08      	ldrb	r0, [r1, #12]
 801738a:	6813      	ldr	r3, [r2, #0]
 801738c:	4718      	bx	r3
}
 801738e:	2000      	movs	r0, #0
 8017390:	4770      	bx	lr
 8017392:	bf00      	nop
 8017394:	240092dc 	.word	0x240092dc

08017398 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8017398:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801739a:	4c05      	ldr	r4, [pc, #20]	; (80173b0 <disk_read+0x18>)
 801739c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 80173a0:	4404      	add	r4, r0
 80173a2:	686d      	ldr	r5, [r5, #4]
 80173a4:	7b20      	ldrb	r0, [r4, #12]
 80173a6:	68ac      	ldr	r4, [r5, #8]
 80173a8:	46a4      	mov	ip, r4
  return res;
}
 80173aa:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80173ac:	4760      	bx	ip
 80173ae:	bf00      	nop
 80173b0:	240092dc 	.word	0x240092dc

080173b4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80173b4:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80173b6:	4c05      	ldr	r4, [pc, #20]	; (80173cc <disk_write+0x18>)
 80173b8:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 80173bc:	4404      	add	r4, r0
 80173be:	686d      	ldr	r5, [r5, #4]
 80173c0:	7b20      	ldrb	r0, [r4, #12]
 80173c2:	68ec      	ldr	r4, [r5, #12]
 80173c4:	46a4      	mov	ip, r4
  return res;
}
 80173c6:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80173c8:	4760      	bx	ip
 80173ca:	bf00      	nop
 80173cc:	240092dc 	.word	0x240092dc

080173d0 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80173d0:	4b05      	ldr	r3, [pc, #20]	; (80173e8 <disk_ioctl+0x18>)
{
 80173d2:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80173d4:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 80173d8:	4403      	add	r3, r0
 80173da:	6864      	ldr	r4, [r4, #4]
 80173dc:	7b18      	ldrb	r0, [r3, #12]
 80173de:	6923      	ldr	r3, [r4, #16]
  return res;
}
 80173e0:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80173e4:	4718      	bx	r3
 80173e6:	bf00      	nop
 80173e8:	240092dc 	.word	0x240092dc

080173ec <get_fattime>:
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
  return 0;
}
 80173ec:	2000      	movs	r0, #0
 80173ee:	4770      	bx	lr

080173f0 <get_fileinfo>:
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80173f0:	2300      	movs	r3, #0
{
 80173f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 80173f6:	6807      	ldr	r7, [r0, #0]
	fno->fname[0] = 0;		/* Invaidate file info */
 80173f8:	758b      	strb	r3, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80173fa:	69c2      	ldr	r2, [r0, #28]
 80173fc:	2a00      	cmp	r2, #0
 80173fe:	d069      	beq.n	80174d4 <get_fileinfo+0xe4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8017400:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8017402:	460d      	mov	r5, r1
 8017404:	4680      	mov	r8, r0
 8017406:	3201      	adds	r2, #1
 8017408:	d068      	beq.n	80174dc <get_fileinfo+0xec>
			i = j = 0;
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 801740a:	68fb      	ldr	r3, [r7, #12]
 801740c:	8818      	ldrh	r0, [r3, #0]
 801740e:	2800      	cmp	r0, #0
 8017410:	d062      	beq.n	80174d8 <get_fileinfo+0xe8>
 8017412:	f101 0615 	add.w	r6, r1, #21
 8017416:	2401      	movs	r4, #1
 8017418:	e000      	b.n	801741c <get_fileinfo+0x2c>
 801741a:	4614      	mov	r4, r2
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 801741c:	2100      	movs	r1, #0
 801741e:	f7ff ff31 	bl	8017284 <ff_convert>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8017422:	2800      	cmp	r0, #0
 8017424:	d058      	beq.n	80174d8 <get_fileinfo+0xe8>
 8017426:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 801742a:	f104 0201 	add.w	r2, r4, #1
 801742e:	d053      	beq.n	80174d8 <get_fileinfo+0xe8>
				fno->fname[i++] = (TCHAR)w;
 8017430:	f806 0f01 	strb.w	r0, [r6, #1]!
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8017434:	68fb      	ldr	r3, [r7, #12]
 8017436:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 801743a:	2800      	cmp	r0, #0
 801743c:	d1ed      	bne.n	801741a <get_fileinfo+0x2a>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 801743e:	442c      	add	r4, r5
 8017440:	2300      	movs	r3, #0
 8017442:	75a3      	strb	r3, [r4, #22]
 8017444:	7daf      	ldrb	r7, [r5, #22]
	}

	i = j = 0;
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
	while (i < 11) {		/* Copy name body and extension */
		c = (TCHAR)dp->dir[i++];
 8017446:	f8d8 1020 	ldr.w	r1, [r8, #32]
	i = j = 0;
 801744a:	2000      	movs	r0, #0
		if (c == ' ') continue;				/* Skip padding spaces */
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
		if (i == 9) {						/* Insert a . if extension is exist */
			if (!lfv) fno->fname[j] = '.';
			fno->altname[j++] = '.';
 801744c:	f04f 082e 	mov.w	r8, #46	; 0x2e
 8017450:	f101 0c0b 	add.w	ip, r1, #11
		c = (TCHAR)dp->dir[i++];
 8017454:	460a      	mov	r2, r1
 8017456:	f812 3b01 	ldrb.w	r3, [r2], #1
		if (c == ' ') continue;				/* Skip padding spaces */
 801745a:	2b20      	cmp	r3, #32
 801745c:	d01b      	beq.n	8017496 <get_fileinfo+0xa6>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 801745e:	2b05      	cmp	r3, #5
 8017460:	eba2 0601 	sub.w	r6, r2, r1
 8017464:	bf08      	it	eq
 8017466:	23e5      	moveq	r3, #229	; 0xe5
		if (i == 9) {						/* Insert a . if extension is exist */
 8017468:	2e09      	cmp	r6, #9
 801746a:	d039      	beq.n	80174e0 <get_fileinfo+0xf0>
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 801746c:	182c      	adds	r4, r5, r0
 801746e:	7263      	strb	r3, [r4, #9]
		if (!lfv) {
 8017470:	b987      	cbnz	r7, 8017494 <get_fileinfo+0xa4>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8017472:	f1a3 0e41 	sub.w	lr, r3, #65	; 0x41
 8017476:	f1be 0f19 	cmp.w	lr, #25
 801747a:	d80a      	bhi.n	8017492 <get_fileinfo+0xa2>
 801747c:	2e08      	cmp	r6, #8
 801747e:	f891 e00c 	ldrb.w	lr, [r1, #12]
 8017482:	bf8c      	ite	hi
 8017484:	2610      	movhi	r6, #16
 8017486:	2608      	movls	r6, #8
 8017488:	ea1e 0f06 	tst.w	lr, r6
 801748c:	d001      	beq.n	8017492 <get_fileinfo+0xa2>
				c += 0x20;			/* To lower */
 801748e:	3320      	adds	r3, #32
 8017490:	b2db      	uxtb	r3, r3
			}
			fno->fname[j] = c;
 8017492:	75a3      	strb	r3, [r4, #22]
		}
		j++;
 8017494:	3001      	adds	r0, #1
	while (i < 11) {		/* Copy name body and extension */
 8017496:	4562      	cmp	r2, ip
 8017498:	d1dd      	bne.n	8017456 <get_fileinfo+0x66>
	}
	if (!lfv) {
		fno->fname[j] = 0;
 801749a:	182c      	adds	r4, r5, r0
	if (!lfv) {
 801749c:	b927      	cbnz	r7, 80174a8 <get_fileinfo+0xb8>
		fno->fname[j] = 0;
 801749e:	75a7      	strb	r7, [r4, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 80174a0:	7b0b      	ldrb	r3, [r1, #12]
 80174a2:	2b00      	cmp	r3, #0
 80174a4:	bf08      	it	eq
 80174a6:	462c      	moveq	r4, r5
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 80174a8:	2300      	movs	r3, #0
 80174aa:	7263      	strb	r3, [r4, #9]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80174ac:	7acb      	ldrb	r3, [r1, #11]
 80174ae:	722b      	strb	r3, [r5, #8]
	rv = rv << 8 | ptr[2];
 80174b0:	8bc8      	ldrh	r0, [r1, #30]
	rv = rv << 8 | ptr[1];
 80174b2:	7f4a      	ldrb	r2, [r1, #29]
	rv = rv << 8 | ptr[0];
 80174b4:	7f0b      	ldrb	r3, [r1, #28]
	rv = rv << 8 | ptr[1];
 80174b6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	rv = rv << 8 | ptr[0];
 80174ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80174be:	602b      	str	r3, [r5, #0]
	rv = rv << 8 | ptr[2];
 80174c0:	8b08      	ldrh	r0, [r1, #24]
	rv = rv << 8 | ptr[1];
 80174c2:	7dca      	ldrb	r2, [r1, #23]
	rv = rv << 8 | ptr[0];
 80174c4:	7d8b      	ldrb	r3, [r1, #22]
	rv = rv << 8 | ptr[1];
 80174c6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	rv = rv << 8 | ptr[0];
 80174ca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80174ce:	0c1a      	lsrs	r2, r3, #16
 80174d0:	80eb      	strh	r3, [r5, #6]
 80174d2:	80aa      	strh	r2, [r5, #4]
}
 80174d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			i = j = 0;
 80174d8:	2400      	movs	r4, #0
 80174da:	e7b0      	b.n	801743e <get_fileinfo+0x4e>
 80174dc:	461f      	mov	r7, r3
 80174de:	e7b2      	b.n	8017446 <get_fileinfo+0x56>
			if (!lfv) fno->fname[j] = '.';
 80174e0:	182c      	adds	r4, r5, r0
 80174e2:	b90f      	cbnz	r7, 80174e8 <get_fileinfo+0xf8>
 80174e4:	f884 8016 	strb.w	r8, [r4, #22]
			fno->altname[j++] = '.';
 80174e8:	3001      	adds	r0, #1
 80174ea:	f884 8009 	strb.w	r8, [r4, #9]
 80174ee:	e7bd      	b.n	801746c <get_fileinfo+0x7c>

080174f0 <move_window.part.5>:
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 80174f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80174f4:	78c3      	ldrb	r3, [r0, #3]
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 80174f6:	4604      	mov	r4, r0
 80174f8:	460e      	mov	r6, r1
 80174fa:	f100 0734 	add.w	r7, r0, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80174fe:	b96b      	cbnz	r3, 801751c <move_window.part.5+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8017500:	4632      	mov	r2, r6
 8017502:	4639      	mov	r1, r7
 8017504:	2301      	movs	r3, #1
 8017506:	7860      	ldrb	r0, [r4, #1]
 8017508:	f7ff ff46 	bl	8017398 <disk_read>
 801750c:	2800      	cmp	r0, #0
 801750e:	bf1a      	itte	ne
 8017510:	f04f 36ff 	movne.w	r6, #4294967295
 8017514:	2001      	movne	r0, #1
 8017516:	2000      	moveq	r0, #0
			fs->winsect = sector;
 8017518:	6326      	str	r6, [r4, #48]	; 0x30
 801751a:	e01f      	b.n	801755c <move_window.part.5+0x6c>
		wsect = fs->winsect;	/* Current sector number */
 801751c:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801751e:	2301      	movs	r3, #1
 8017520:	4639      	mov	r1, r7
 8017522:	7840      	ldrb	r0, [r0, #1]
 8017524:	462a      	mov	r2, r5
 8017526:	f7ff ff45 	bl	80173b4 <disk_write>
 801752a:	b9b0      	cbnz	r0, 801755a <move_window.part.5+0x6a>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801752c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801752e:	69e2      	ldr	r2, [r4, #28]
 8017530:	1aeb      	subs	r3, r5, r3
			fs->wflag = 0;
 8017532:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8017534:	4293      	cmp	r3, r2
 8017536:	d2e3      	bcs.n	8017500 <move_window.part.5+0x10>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017538:	f894 8002 	ldrb.w	r8, [r4, #2]
 801753c:	f1b8 0f01 	cmp.w	r8, #1
 8017540:	7860      	ldrb	r0, [r4, #1]
 8017542:	f108 38ff 	add.w	r8, r8, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8017546:	f04f 0301 	mov.w	r3, #1
 801754a:	4639      	mov	r1, r7
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801754c:	d9d8      	bls.n	8017500 <move_window.part.5+0x10>
					wsect += fs->fsize;
 801754e:	69e2      	ldr	r2, [r4, #28]
 8017550:	4415      	add	r5, r2
					disk_write(fs->drv, fs->win, wsect, 1);
 8017552:	462a      	mov	r2, r5
 8017554:	f7ff ff2e 	bl	80173b4 <disk_write>
 8017558:	e7f0      	b.n	801753c <move_window.part.5+0x4c>
			res = FR_DISK_ERR;
 801755a:	2001      	movs	r0, #1
}
 801755c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017560 <sync_fs>:
{
 8017560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8017562:	78c3      	ldrb	r3, [r0, #3]
{
 8017564:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8017566:	b95b      	cbnz	r3, 8017580 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8017568:	7823      	ldrb	r3, [r4, #0]
 801756a:	2b03      	cmp	r3, #3
 801756c:	d029      	beq.n	80175c2 <sync_fs+0x62>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801756e:	2200      	movs	r2, #0
 8017570:	7860      	ldrb	r0, [r4, #1]
 8017572:	4611      	mov	r1, r2
 8017574:	f7ff ff2c 	bl	80173d0 <disk_ioctl>
			res = FR_DISK_ERR;
 8017578:	3000      	adds	r0, #0
 801757a:	bf18      	it	ne
 801757c:	2001      	movne	r0, #1
}
 801757e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
 8017580:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8017582:	f100 0734 	add.w	r7, r0, #52	; 0x34
 8017586:	2301      	movs	r3, #1
 8017588:	7840      	ldrb	r0, [r0, #1]
 801758a:	462a      	mov	r2, r5
 801758c:	4639      	mov	r1, r7
 801758e:	f7ff ff11 	bl	80173b4 <disk_write>
 8017592:	2800      	cmp	r0, #0
 8017594:	d158      	bne.n	8017648 <sync_fs+0xe8>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8017596:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8017598:	69e3      	ldr	r3, [r4, #28]
 801759a:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
 801759c:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801759e:	429a      	cmp	r2, r3
 80175a0:	d2e2      	bcs.n	8017568 <sync_fs+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80175a2:	78a6      	ldrb	r6, [r4, #2]
 80175a4:	2e01      	cmp	r6, #1
 80175a6:	d801      	bhi.n	80175ac <sync_fs+0x4c>
 80175a8:	e7de      	b.n	8017568 <sync_fs+0x8>
 80175aa:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
 80175ac:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80175ae:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 80175b0:	2301      	movs	r3, #1
 80175b2:	4639      	mov	r1, r7
 80175b4:	462a      	mov	r2, r5
 80175b6:	7860      	ldrb	r0, [r4, #1]
 80175b8:	f7ff fefc 	bl	80173b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80175bc:	2e01      	cmp	r6, #1
 80175be:	d1f4      	bne.n	80175aa <sync_fs+0x4a>
 80175c0:	e7d2      	b.n	8017568 <sync_fs+0x8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80175c2:	7925      	ldrb	r5, [r4, #4]
 80175c4:	2d01      	cmp	r5, #1
 80175c6:	d1d2      	bne.n	801756e <sync_fs+0xe>
		*d++ = (BYTE)val;
 80175c8:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80175cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80175d0:	2100      	movs	r1, #0
	*ptr++ = (BYTE)val; val >>= 8;
 80175d2:	2700      	movs	r7, #0
 80175d4:	4618      	mov	r0, r3
 80175d6:	f00e fde0 	bl	802619a <memset>
 80175da:	4603      	mov	r3, r0
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80175dc:	6960      	ldr	r0, [r4, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 80175de:	463e      	mov	r6, r7
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80175e0:	6922      	ldr	r2, [r4, #16]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80175e2:	4619      	mov	r1, r3
	*ptr++ = (BYTE)val; val >>= 8;
 80175e4:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 80175e8:	f360 0707 	bfi	r7, r0, #0, #8
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80175ec:	462b      	mov	r3, r5
	*ptr++ = (BYTE)val; val >>= 8;
 80175ee:	f362 0607 	bfi	r6, r2, #0, #8
 80175f2:	f36c 270f 	bfi	r7, ip, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 80175f6:	ea4f 4c10 	mov.w	ip, r0, lsr #16
	*ptr++ = (BYTE)val; val >>= 8;
 80175fa:	0a15      	lsrs	r5, r2, #8
 80175fc:	f36c 4717 	bfi	r7, ip, #16, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8017600:	0e00      	lsrs	r0, r0, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8017602:	f365 260f 	bfi	r6, r5, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8017606:	0c15      	lsrs	r5, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8017608:	f360 671f 	bfi	r7, r0, #24, #8
			fs->winsect = fs->volbase + 1;
 801760c:	6a20      	ldr	r0, [r4, #32]
	*ptr++ = (BYTE)val; val >>= 8;
 801760e:	0e12      	lsrs	r2, r2, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8017610:	f365 4617 	bfi	r6, r5, #16, #8
			fs->winsect = fs->volbase + 1;
 8017614:	3001      	adds	r0, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8017616:	2555      	movs	r5, #85	; 0x55
	*ptr++ = (BYTE)val; val >>= 8;
 8017618:	f8c4 721c 	str.w	r7, [r4, #540]	; 0x21c
 801761c:	f362 661f 	bfi	r6, r2, #24, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8017620:	f884 5232 	strb.w	r5, [r4, #562]	; 0x232
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8017624:	4602      	mov	r2, r0
			fs->winsect = fs->volbase + 1;
 8017626:	6320      	str	r0, [r4, #48]	; 0x30
	*ptr++ = (BYTE)val;
 8017628:	27aa      	movs	r7, #170	; 0xaa
	*ptr++ = (BYTE)val; val >>= 8;
 801762a:	4808      	ldr	r0, [pc, #32]	; (801764c <sync_fs+0xec>)
 801762c:	4d08      	ldr	r5, [pc, #32]	; (8017650 <sync_fs+0xf0>)
 801762e:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
 8017632:	f8c4 6220 	str.w	r6, [r4, #544]	; 0x220
	*ptr++ = (BYTE)val;
 8017636:	f884 7233 	strb.w	r7, [r4, #563]	; 0x233
	*ptr++ = (BYTE)val; val >>= 8;
 801763a:	6365      	str	r5, [r4, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801763c:	7860      	ldrb	r0, [r4, #1]
 801763e:	f7ff feb9 	bl	80173b4 <disk_write>
			fs->fsi_flag = 0;
 8017642:	2300      	movs	r3, #0
 8017644:	7123      	strb	r3, [r4, #4]
 8017646:	e792      	b.n	801756e <sync_fs+0xe>
			res = FR_DISK_ERR;
 8017648:	2001      	movs	r0, #1
}
 801764a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801764c:	61417272 	.word	0x61417272
 8017650:	41615252 	.word	0x41615252

08017654 <put_fat.part.7>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 8017654:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		switch (fs->fs_type) {
 8017658:	7803      	ldrb	r3, [r0, #0]
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 801765a:	4604      	mov	r4, r0
 801765c:	460d      	mov	r5, r1
 801765e:	4617      	mov	r7, r2
		switch (fs->fs_type) {
 8017660:	2b02      	cmp	r3, #2
 8017662:	f000 808b 	beq.w	801777c <put_fat.part.7+0x128>
 8017666:	2b03      	cmp	r3, #3
 8017668:	d062      	beq.n	8017730 <put_fat.part.7+0xdc>
 801766a:	2b01      	cmp	r3, #1
 801766c:	d002      	beq.n	8017674 <put_fat.part.7+0x20>
	FRESULT res = FR_INT_ERR;
 801766e:	2002      	movs	r0, #2
}
 8017670:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			bc = (UINT)clst; bc += bc / 2;
 8017674:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8017678:	6a42      	ldr	r2, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 801767a:	f8d0 a030 	ldr.w	sl, [r0, #48]	; 0x30
 801767e:	f100 0634 	add.w	r6, r0, #52	; 0x34
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8017682:	eb02 2958 	add.w	r9, r2, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8017686:	45d1      	cmp	r9, sl
 8017688:	f040 80f0 	bne.w	801786c <put_fat.part.7+0x218>
			p = fs->win + bc++ % SS(fs);
 801768c:	f108 0901 	add.w	r9, r8, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8017690:	f015 0a01 	ands.w	sl, r5, #1
			p = fs->win + bc++ % SS(fs);
 8017694:	f3c8 0808 	ubfx	r8, r8, #0, #9
 8017698:	ea4f 2259 	mov.w	r2, r9, lsr #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801769c:	f000 8116 	beq.w	80178cc <put_fat.part.7+0x278>
 80176a0:	f816 3008 	ldrb.w	r3, [r6, r8]
			fs->wflag = 1;
 80176a4:	2101      	movs	r1, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80176a6:	f003 030f 	and.w	r3, r3, #15
 80176aa:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
 80176ae:	f806 3008 	strb.w	r3, [r6, r8]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80176b2:	6a65      	ldr	r5, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80176b4:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80176b8:	4415      	add	r5, r2
			fs->wflag = 1;
 80176ba:	70e1      	strb	r1, [r4, #3]
	if (sector != fs->winsect) {	/* Window offset changed? */
 80176bc:	4545      	cmp	r5, r8
 80176be:	f000 8122 	beq.w	8017906 <put_fat.part.7+0x2b2>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80176c2:	2301      	movs	r3, #1
 80176c4:	4642      	mov	r2, r8
 80176c6:	4631      	mov	r1, r6
 80176c8:	7860      	ldrb	r0, [r4, #1]
 80176ca:	f7ff fe73 	bl	80173b4 <disk_write>
 80176ce:	2800      	cmp	r0, #0
 80176d0:	f040 80f9 	bne.w	80178c6 <put_fat.part.7+0x272>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80176d4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80176d6:	69e3      	ldr	r3, [r4, #28]
 80176d8:	eba8 0202 	sub.w	r2, r8, r2
			fs->wflag = 0;
 80176dc:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80176de:	429a      	cmp	r2, r3
 80176e0:	d212      	bcs.n	8017708 <put_fat.part.7+0xb4>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80176e2:	f894 b002 	ldrb.w	fp, [r4, #2]
 80176e6:	f1bb 0f01 	cmp.w	fp, #1
 80176ea:	d801      	bhi.n	80176f0 <put_fat.part.7+0x9c>
 80176ec:	e00c      	b.n	8017708 <put_fat.part.7+0xb4>
 80176ee:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
 80176f0:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80176f2:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 80176f6:	2301      	movs	r3, #1
 80176f8:	4631      	mov	r1, r6
 80176fa:	4642      	mov	r2, r8
 80176fc:	7860      	ldrb	r0, [r4, #1]
 80176fe:	f7ff fe59 	bl	80173b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017702:	f1bb 0f01 	cmp.w	fp, #1
 8017706:	d1f2      	bne.n	80176ee <put_fat.part.7+0x9a>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8017708:	2301      	movs	r3, #1
 801770a:	462a      	mov	r2, r5
 801770c:	4631      	mov	r1, r6
 801770e:	7860      	ldrb	r0, [r4, #1]
 8017710:	f7ff fe42 	bl	8017398 <disk_read>
 8017714:	2800      	cmp	r0, #0
 8017716:	f040 80a3 	bne.w	8017860 <put_fat.part.7+0x20c>
			p = fs->win + bc % SS(fs);
 801771a:	f3c9 0908 	ubfx	r9, r9, #0, #9
			fs->winsect = sector;
 801771e:	6325      	str	r5, [r4, #48]	; 0x30
			p = fs->win + bc % SS(fs);
 8017720:	444e      	add	r6, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8017722:	f1ba 0f00 	cmp.w	sl, #0
 8017726:	f000 80df 	beq.w	80178e8 <put_fat.part.7+0x294>
 801772a:	f3c7 1707 	ubfx	r7, r7, #4, #8
 801772e:	e0e1      	b.n	80178f4 <put_fat.part.7+0x2a0>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8017730:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8017732:	f100 0634 	add.w	r6, r0, #52	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8017736:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801773a:	eb03 18d1 	add.w	r8, r3, r1, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 801773e:	45c8      	cmp	r8, r9
 8017740:	d161      	bne.n	8017806 <put_fat.part.7+0x1b2>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8017742:	00ad      	lsls	r5, r5, #2
 8017744:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
	*ptr++ = (BYTE)val; val >>= 8;
 8017748:	2300      	movs	r3, #0
			fs->wflag = 1;
 801774a:	2101      	movs	r1, #1
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801774c:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
			fs->wflag = 1;
 8017750:	4618      	mov	r0, r3
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8017752:	1972      	adds	r2, r6, r5
	rv = rv << 8 | ptr[2];
 8017754:	8852      	ldrh	r2, [r2, #2]
	rv = rv << 8 | ptr[0];
 8017756:	0412      	lsls	r2, r2, #16
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8017758:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 801775c:	433a      	orrs	r2, r7
	*ptr++ = (BYTE)val; val >>= 8;
 801775e:	0a17      	lsrs	r7, r2, #8
 8017760:	f362 0307 	bfi	r3, r2, #0, #8
 8017764:	f367 230f 	bfi	r3, r7, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8017768:	0c17      	lsrs	r7, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 801776a:	0e12      	lsrs	r2, r2, #24
	*ptr++ = (BYTE)val; val >>= 8;
 801776c:	f367 4317 	bfi	r3, r7, #16, #8
 8017770:	f362 631f 	bfi	r3, r2, #24, #8
 8017774:	5173      	str	r3, [r6, r5]
			fs->wflag = 1;
 8017776:	70e1      	strb	r1, [r4, #3]
}
 8017778:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801777c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801777e:	f100 0634 	add.w	r6, r0, #52	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8017782:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8017786:	eb03 2811 	add.w	r8, r3, r1, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 801778a:	45c8      	cmp	r8, r9
 801778c:	d02e      	beq.n	80177ec <put_fat.part.7+0x198>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801778e:	78c3      	ldrb	r3, [r0, #3]
 8017790:	7840      	ldrb	r0, [r0, #1]
 8017792:	b313      	cbz	r3, 80177da <put_fat.part.7+0x186>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8017794:	2301      	movs	r3, #1
 8017796:	464a      	mov	r2, r9
 8017798:	4631      	mov	r1, r6
 801779a:	f7ff fe0b 	bl	80173b4 <disk_write>
 801779e:	2800      	cmp	r0, #0
 80177a0:	f040 8091 	bne.w	80178c6 <put_fat.part.7+0x272>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80177a4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80177a6:	69e3      	ldr	r3, [r4, #28]
 80177a8:	eba9 0202 	sub.w	r2, r9, r2
			fs->wflag = 0;
 80177ac:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80177ae:	429a      	cmp	r2, r3
 80177b0:	d212      	bcs.n	80177d8 <put_fat.part.7+0x184>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80177b2:	f894 a002 	ldrb.w	sl, [r4, #2]
 80177b6:	f1ba 0f01 	cmp.w	sl, #1
 80177ba:	d801      	bhi.n	80177c0 <put_fat.part.7+0x16c>
 80177bc:	e00c      	b.n	80177d8 <put_fat.part.7+0x184>
 80177be:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
 80177c0:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80177c2:	f10a 3aff 	add.w	sl, sl, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 80177c6:	2301      	movs	r3, #1
 80177c8:	4631      	mov	r1, r6
 80177ca:	464a      	mov	r2, r9
 80177cc:	7860      	ldrb	r0, [r4, #1]
 80177ce:	f7ff fdf1 	bl	80173b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80177d2:	f1ba 0f01 	cmp.w	sl, #1
 80177d6:	d1f2      	bne.n	80177be <put_fat.part.7+0x16a>
 80177d8:	7860      	ldrb	r0, [r4, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80177da:	2301      	movs	r3, #1
 80177dc:	4642      	mov	r2, r8
 80177de:	4631      	mov	r1, r6
 80177e0:	f7ff fdda 	bl	8017398 <disk_read>
 80177e4:	2800      	cmp	r0, #0
 80177e6:	d13b      	bne.n	8017860 <put_fat.part.7+0x20c>
			fs->winsect = sector;
 80177e8:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80177ec:	006d      	lsls	r5, r5, #1
	*ptr++ = (BYTE)val; val >>= 8;
 80177ee:	f3c7 2207 	ubfx	r2, r7, #8, #8
			fs->wflag = 1;
 80177f2:	2301      	movs	r3, #1
 80177f4:	2000      	movs	r0, #0
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80177f6:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 80177fa:	5577      	strb	r7, [r6, r5]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80177fc:	442e      	add	r6, r5
	*ptr++ = (BYTE)val;
 80177fe:	7072      	strb	r2, [r6, #1]
			fs->wflag = 1;
 8017800:	70e3      	strb	r3, [r4, #3]
}
 8017802:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8017806:	78c3      	ldrb	r3, [r0, #3]
 8017808:	7840      	ldrb	r0, [r0, #1]
 801780a:	b313      	cbz	r3, 8017852 <put_fat.part.7+0x1fe>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801780c:	2301      	movs	r3, #1
 801780e:	464a      	mov	r2, r9
 8017810:	4631      	mov	r1, r6
 8017812:	f7ff fdcf 	bl	80173b4 <disk_write>
 8017816:	2800      	cmp	r0, #0
 8017818:	d155      	bne.n	80178c6 <put_fat.part.7+0x272>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801781a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801781c:	69e3      	ldr	r3, [r4, #28]
 801781e:	eba9 0202 	sub.w	r2, r9, r2
			fs->wflag = 0;
 8017822:	70e0      	strb	r0, [r4, #3]
 8017824:	7860      	ldrb	r0, [r4, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8017826:	429a      	cmp	r2, r3
 8017828:	d213      	bcs.n	8017852 <put_fat.part.7+0x1fe>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801782a:	f894 a002 	ldrb.w	sl, [r4, #2]
 801782e:	f1ba 0f01 	cmp.w	sl, #1
 8017832:	d802      	bhi.n	801783a <put_fat.part.7+0x1e6>
 8017834:	e00d      	b.n	8017852 <put_fat.part.7+0x1fe>
 8017836:	69e3      	ldr	r3, [r4, #28]
 8017838:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 801783a:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801783c:	f10a 3aff 	add.w	sl, sl, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8017840:	2301      	movs	r3, #1
 8017842:	4631      	mov	r1, r6
 8017844:	464a      	mov	r2, r9
 8017846:	f7ff fdb5 	bl	80173b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801784a:	f1ba 0f01 	cmp.w	sl, #1
 801784e:	d1f2      	bne.n	8017836 <put_fat.part.7+0x1e2>
 8017850:	7860      	ldrb	r0, [r4, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8017852:	2301      	movs	r3, #1
 8017854:	4642      	mov	r2, r8
 8017856:	4631      	mov	r1, r6
 8017858:	f7ff fd9e 	bl	8017398 <disk_read>
 801785c:	2800      	cmp	r0, #0
 801785e:	d04f      	beq.n	8017900 <put_fat.part.7+0x2ac>
			fs->winsect = sector;
 8017860:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 8017864:	2001      	movs	r0, #1
			fs->winsect = sector;
 8017866:	6323      	str	r3, [r4, #48]	; 0x30
}
 8017868:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801786c:	78c2      	ldrb	r2, [r0, #3]
 801786e:	7840      	ldrb	r0, [r0, #1]
 8017870:	b1fa      	cbz	r2, 80178b2 <put_fat.part.7+0x25e>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8017872:	4652      	mov	r2, sl
 8017874:	4631      	mov	r1, r6
 8017876:	f7ff fd9d 	bl	80173b4 <disk_write>
 801787a:	bb20      	cbnz	r0, 80178c6 <put_fat.part.7+0x272>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801787c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801787e:	69e3      	ldr	r3, [r4, #28]
 8017880:	ebaa 0202 	sub.w	r2, sl, r2
			fs->wflag = 0;
 8017884:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8017886:	429a      	cmp	r2, r3
 8017888:	d212      	bcs.n	80178b0 <put_fat.part.7+0x25c>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801788a:	f894 b002 	ldrb.w	fp, [r4, #2]
 801788e:	f1bb 0f01 	cmp.w	fp, #1
 8017892:	d801      	bhi.n	8017898 <put_fat.part.7+0x244>
 8017894:	e00c      	b.n	80178b0 <put_fat.part.7+0x25c>
 8017896:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
 8017898:	449a      	add	sl, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801789a:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 801789e:	2301      	movs	r3, #1
 80178a0:	4631      	mov	r1, r6
 80178a2:	4652      	mov	r2, sl
 80178a4:	7860      	ldrb	r0, [r4, #1]
 80178a6:	f7ff fd85 	bl	80173b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80178aa:	f1bb 0f01 	cmp.w	fp, #1
 80178ae:	d1f2      	bne.n	8017896 <put_fat.part.7+0x242>
 80178b0:	7860      	ldrb	r0, [r4, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80178b2:	2301      	movs	r3, #1
 80178b4:	464a      	mov	r2, r9
 80178b6:	4631      	mov	r1, r6
 80178b8:	f7ff fd6e 	bl	8017398 <disk_read>
 80178bc:	2800      	cmp	r0, #0
 80178be:	d1cf      	bne.n	8017860 <put_fat.part.7+0x20c>
			fs->winsect = sector;
 80178c0:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 80178c4:	e6e2      	b.n	801768c <put_fat.part.7+0x38>
	FRESULT res = FR_INT_ERR;
 80178c6:	2001      	movs	r0, #1
}
 80178c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80178cc:	f806 7008 	strb.w	r7, [r6, r8]
			fs->wflag = 1;
 80178d0:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80178d2:	6a65      	ldr	r5, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80178d4:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80178d8:	4415      	add	r5, r2
			fs->wflag = 1;
 80178da:	70e3      	strb	r3, [r4, #3]
	if (sector != fs->winsect) {	/* Window offset changed? */
 80178dc:	45a8      	cmp	r8, r5
 80178de:	f47f aef0 	bne.w	80176c2 <put_fat.part.7+0x6e>
			p = fs->win + bc % SS(fs);
 80178e2:	f3c9 0908 	ubfx	r9, r9, #0, #9
 80178e6:	444e      	add	r6, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80178e8:	7833      	ldrb	r3, [r6, #0]
 80178ea:	f3c7 2203 	ubfx	r2, r7, #8, #4
 80178ee:	f023 070f 	bic.w	r7, r3, #15
 80178f2:	4317      	orrs	r7, r2
			fs->wflag = 1;
 80178f4:	2301      	movs	r3, #1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80178f6:	7037      	strb	r7, [r6, #0]
			fs->wflag = 1;
 80178f8:	2000      	movs	r0, #0
 80178fa:	70e3      	strb	r3, [r4, #3]
}
 80178fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 8017900:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 8017904:	e71d      	b.n	8017742 <put_fat.part.7+0xee>
			p = fs->win + bc % SS(fs);
 8017906:	f3c9 0908 	ubfx	r9, r9, #0, #9
 801790a:	444e      	add	r6, r9
 801790c:	e70d      	b.n	801772a <put_fat.part.7+0xd6>
 801790e:	bf00      	nop

08017910 <remove_chain>:
{
 8017910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8017914:	2901      	cmp	r1, #1
{
 8017916:	b085      	sub	sp, #20
 8017918:	9000      	str	r0, [sp, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801791a:	d914      	bls.n	8017946 <remove_chain+0x36>
	FATFS *fs = obj->fs;
 801791c:	6804      	ldr	r4, [r0, #0]
 801791e:	460d      	mov	r5, r1
 8017920:	4606      	mov	r6, r0
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8017922:	69a3      	ldr	r3, [r4, #24]
 8017924:	428b      	cmp	r3, r1
 8017926:	d90e      	bls.n	8017946 <remove_chain+0x36>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8017928:	b98a      	cbnz	r2, 801794e <remove_chain+0x3e>
 801792a:	46a3      	mov	fp, r4
 801792c:	f104 0a34 	add.w	sl, r4, #52	; 0x34
 8017930:	465e      	mov	r6, fp
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8017932:	429d      	cmp	r5, r3
 8017934:	d207      	bcs.n	8017946 <remove_chain+0x36>
		switch (fs->fs_type) {
 8017936:	7833      	ldrb	r3, [r6, #0]
 8017938:	2b02      	cmp	r3, #2
 801793a:	f000 8106 	beq.w	8017b4a <remove_chain+0x23a>
 801793e:	2b03      	cmp	r3, #3
 8017940:	d068      	beq.n	8017a14 <remove_chain+0x104>
 8017942:	2b01      	cmp	r3, #1
 8017944:	d014      	beq.n	8017970 <remove_chain+0x60>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8017946:	2002      	movs	r0, #2
}
 8017948:	b005      	add	sp, #20
 801794a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801794e:	4293      	cmp	r3, r2
 8017950:	d9f9      	bls.n	8017946 <remove_chain+0x36>
 8017952:	2a01      	cmp	r2, #1
 8017954:	d9f7      	bls.n	8017946 <remove_chain+0x36>
 8017956:	4611      	mov	r1, r2
 8017958:	4620      	mov	r0, r4
 801795a:	f04f 32ff 	mov.w	r2, #4294967295
 801795e:	f7ff fe79 	bl	8017654 <put_fat.part.7>
		if (res != FR_OK) return res;
 8017962:	2800      	cmp	r0, #0
 8017964:	d1f0      	bne.n	8017948 <remove_chain+0x38>
 8017966:	f8d6 b000 	ldr.w	fp, [r6]
 801796a:	f8db 3018 	ldr.w	r3, [fp, #24]
 801796e:	e7dd      	b.n	801792c <remove_chain+0x1c>
			bc = (UINT)clst; bc += bc / 2;
 8017970:	eb05 0755 	add.w	r7, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017974:	6a72      	ldr	r2, [r6, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8017976:	f8d6 9030 	ldr.w	r9, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801797a:	eb02 2857 	add.w	r8, r2, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 801797e:	45c8      	cmp	r8, r9
 8017980:	f040 8127 	bne.w	8017bd2 <remove_chain+0x2c2>
			wc = fs->win[bc++ % SS(fs)];
 8017984:	f3c7 0308 	ubfx	r3, r7, #0, #9
 8017988:	3701      	adds	r7, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801798a:	eb02 2857 	add.w	r8, r2, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 801798e:	4433      	add	r3, r6
	if (sector != fs->winsect) {	/* Window offset changed? */
 8017990:	45c8      	cmp	r8, r9
			wc = fs->win[bc++ % SS(fs)];
 8017992:	f893 b034 	ldrb.w	fp, [r3, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8017996:	f000 8260 	beq.w	8017e5a <remove_chain+0x54a>
 801799a:	f106 0234 	add.w	r2, r6, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801799e:	78f3      	ldrb	r3, [r6, #3]
 80179a0:	7870      	ldrb	r0, [r6, #1]
 80179a2:	4611      	mov	r1, r2
 80179a4:	9201      	str	r2, [sp, #4]
 80179a6:	b333      	cbz	r3, 80179f6 <remove_chain+0xe6>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80179a8:	2301      	movs	r3, #1
 80179aa:	464a      	mov	r2, r9
 80179ac:	f7ff fd02 	bl	80173b4 <disk_write>
 80179b0:	2800      	cmp	r0, #0
 80179b2:	f040 816f 	bne.w	8017c94 <remove_chain+0x384>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80179b6:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80179b8:	69f3      	ldr	r3, [r6, #28]
 80179ba:	eba9 0202 	sub.w	r2, r9, r2
			fs->wflag = 0;
 80179be:	70f0      	strb	r0, [r6, #3]
 80179c0:	7870      	ldrb	r0, [r6, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80179c2:	429a      	cmp	r2, r3
 80179c4:	d217      	bcs.n	80179f6 <remove_chain+0xe6>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80179c6:	f896 c002 	ldrb.w	ip, [r6, #2]
 80179ca:	4662      	mov	r2, ip
 80179cc:	2a01      	cmp	r2, #1
 80179ce:	d912      	bls.n	80179f6 <remove_chain+0xe6>
 80179d0:	9402      	str	r4, [sp, #8]
 80179d2:	4664      	mov	r4, ip
 80179d4:	9503      	str	r5, [sp, #12]
 80179d6:	9d01      	ldr	r5, [sp, #4]
 80179d8:	e001      	b.n	80179de <remove_chain+0xce>
 80179da:	69f3      	ldr	r3, [r6, #28]
 80179dc:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 80179de:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80179e0:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 80179e2:	2301      	movs	r3, #1
 80179e4:	4629      	mov	r1, r5
 80179e6:	464a      	mov	r2, r9
 80179e8:	f7ff fce4 	bl	80173b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80179ec:	2c01      	cmp	r4, #1
 80179ee:	d1f4      	bne.n	80179da <remove_chain+0xca>
 80179f0:	7870      	ldrb	r0, [r6, #1]
 80179f2:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80179f6:	9901      	ldr	r1, [sp, #4]
 80179f8:	2301      	movs	r3, #1
 80179fa:	4642      	mov	r2, r8
 80179fc:	f7ff fccc 	bl	8017398 <disk_read>
 8017a00:	2800      	cmp	r0, #0
 8017a02:	f000 8228 	beq.w	8017e56 <remove_chain+0x546>
			fs->winsect = sector;
 8017a06:	f04f 33ff 	mov.w	r3, #4294967295
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8017a0a:	2001      	movs	r0, #1
			fs->winsect = sector;
 8017a0c:	6333      	str	r3, [r6, #48]	; 0x30
}
 8017a0e:	b005      	add	sp, #20
 8017a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8017a14:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8017a16:	f106 0834 	add.w	r8, r6, #52	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8017a1a:	f8d6 9030 	ldr.w	r9, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8017a1e:	eb07 17d5 	add.w	r7, r7, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8017a22:	454f      	cmp	r7, r9
 8017a24:	f040 8107 	bne.w	8017c36 <remove_chain+0x326>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8017a28:	00ab      	lsls	r3, r5, #2
 8017a2a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8017a2e:	eb08 0203 	add.w	r2, r8, r3
	rv = rv << 8 | ptr[0];
 8017a32:	f818 7003 	ldrb.w	r7, [r8, r3]
	rv = rv << 8 | ptr[1];
 8017a36:	f892 b001 	ldrb.w	fp, [r2, #1]
	rv = rv << 8 | ptr[2];
 8017a3a:	8853      	ldrh	r3, [r2, #2]
	rv = rv << 8 | ptr[1];
 8017a3c:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
	rv = rv << 8 | ptr[0];
 8017a40:	ea47 270b 	orr.w	r7, r7, fp, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8017a44:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
		if (nxt == 0) break;				/* Empty cluster? */
 8017a48:	2f00      	cmp	r7, #0
 8017a4a:	f000 8214 	beq.w	8017e76 <remove_chain+0x566>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8017a4e:	2f01      	cmp	r7, #1
 8017a50:	f43f af79 	beq.w	8017946 <remove_chain+0x36>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8017a54:	69a3      	ldr	r3, [r4, #24]
 8017a56:	42ab      	cmp	r3, r5
 8017a58:	f67f af75 	bls.w	8017946 <remove_chain+0x36>
		switch (fs->fs_type) {
 8017a5c:	7823      	ldrb	r3, [r4, #0]
 8017a5e:	2b02      	cmp	r3, #2
 8017a60:	f000 8165 	beq.w	8017d2e <remove_chain+0x41e>
 8017a64:	2b03      	cmp	r3, #3
 8017a66:	f000 8119 	beq.w	8017c9c <remove_chain+0x38c>
 8017a6a:	2b01      	cmp	r3, #1
 8017a6c:	f47f af6b 	bne.w	8017946 <remove_chain+0x36>
			bc = (UINT)clst; bc += bc / 2;
 8017a70:	eb05 0655 	add.w	r6, r5, r5, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8017a74:	6a62      	ldr	r2, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8017a76:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8017a7a:	eb02 2856 	add.w	r8, r2, r6, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8017a7e:	45c8      	cmp	r8, r9
 8017a80:	d02e      	beq.n	8017ae0 <remove_chain+0x1d0>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8017a82:	78e2      	ldrb	r2, [r4, #3]
 8017a84:	7860      	ldrb	r0, [r4, #1]
 8017a86:	b30a      	cbz	r2, 8017acc <remove_chain+0x1bc>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8017a88:	464a      	mov	r2, r9
 8017a8a:	4651      	mov	r1, sl
 8017a8c:	f7ff fc92 	bl	80173b4 <disk_write>
 8017a90:	2800      	cmp	r0, #0
 8017a92:	f040 80ff 	bne.w	8017c94 <remove_chain+0x384>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8017a96:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8017a98:	69e3      	ldr	r3, [r4, #28]
 8017a9a:	eba9 0202 	sub.w	r2, r9, r2
			fs->wflag = 0;
 8017a9e:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8017aa0:	429a      	cmp	r2, r3
 8017aa2:	d212      	bcs.n	8017aca <remove_chain+0x1ba>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017aa4:	f894 b002 	ldrb.w	fp, [r4, #2]
 8017aa8:	f1bb 0f01 	cmp.w	fp, #1
 8017aac:	d801      	bhi.n	8017ab2 <remove_chain+0x1a2>
 8017aae:	e00c      	b.n	8017aca <remove_chain+0x1ba>
 8017ab0:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
 8017ab2:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017ab4:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8017ab8:	2301      	movs	r3, #1
 8017aba:	4651      	mov	r1, sl
 8017abc:	464a      	mov	r2, r9
 8017abe:	7860      	ldrb	r0, [r4, #1]
 8017ac0:	f7ff fc78 	bl	80173b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017ac4:	f1bb 0f01 	cmp.w	fp, #1
 8017ac8:	d1f2      	bne.n	8017ab0 <remove_chain+0x1a0>
 8017aca:	7860      	ldrb	r0, [r4, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8017acc:	2301      	movs	r3, #1
 8017ace:	4642      	mov	r2, r8
 8017ad0:	4651      	mov	r1, sl
 8017ad2:	f7ff fc61 	bl	8017398 <disk_read>
 8017ad6:	2800      	cmp	r0, #0
 8017ad8:	f040 8168 	bne.w	8017dac <remove_chain+0x49c>
			fs->winsect = sector;
 8017adc:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
			p = fs->win + bc++ % SS(fs);
 8017ae0:	f106 0801 	add.w	r8, r6, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8017ae4:	f015 0901 	ands.w	r9, r5, #1
			p = fs->win + bc++ % SS(fs);
 8017ae8:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8017aec:	ea4f 2258 	mov.w	r2, r8, lsr #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8017af0:	f000 8171 	beq.w	8017dd6 <remove_chain+0x4c6>
 8017af4:	f81a 3006 	ldrb.w	r3, [sl, r6]
 8017af8:	f003 030f 	and.w	r3, r3, #15
 8017afc:	f80a 3006 	strb.w	r3, [sl, r6]
			fs->wflag = 1;
 8017b00:	f04f 0301 	mov.w	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8017b04:	6a66      	ldr	r6, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8017b06:	6b25      	ldr	r5, [r4, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8017b08:	4416      	add	r6, r2
			fs->wflag = 1;
 8017b0a:	70e3      	strb	r3, [r4, #3]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8017b0c:	42b5      	cmp	r5, r6
 8017b0e:	f040 816c 	bne.w	8017dea <remove_chain+0x4da>
			p = fs->win + bc % SS(fs);
 8017b12:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8017b16:	2300      	movs	r3, #0
			p = fs->win + bc % SS(fs);
 8017b18:	44d0      	add	r8, sl
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8017b1a:	f888 3000 	strb.w	r3, [r8]
			fs->wflag = 1;
 8017b1e:	f04f 0301 	mov.w	r3, #1
 8017b22:	70e3      	strb	r3, [r4, #3]
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8017b24:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8017b28:	1e91      	subs	r1, r2, #2
 8017b2a:	428b      	cmp	r3, r1
 8017b2c:	d205      	bcs.n	8017b3a <remove_chain+0x22a>
			fs->fsi_flag |= 1;
 8017b2e:	7921      	ldrb	r1, [r4, #4]
			fs->free_clst++;
 8017b30:	3301      	adds	r3, #1
			fs->fsi_flag |= 1;
 8017b32:	f041 0101 	orr.w	r1, r1, #1
			fs->free_clst++;
 8017b36:	6163      	str	r3, [r4, #20]
			fs->fsi_flag |= 1;
 8017b38:	7121      	strb	r1, [r4, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8017b3a:	42ba      	cmp	r2, r7
 8017b3c:	f240 819b 	bls.w	8017e76 <remove_chain+0x566>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8017b40:	9b00      	ldr	r3, [sp, #0]
 8017b42:	463d      	mov	r5, r7
 8017b44:	681e      	ldr	r6, [r3, #0]
 8017b46:	69b3      	ldr	r3, [r6, #24]
 8017b48:	e6f3      	b.n	8017932 <remove_chain+0x22>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8017b4a:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8017b4c:	f106 0834 	add.w	r8, r6, #52	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8017b50:	f8d6 9030 	ldr.w	r9, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8017b54:	eb07 2715 	add.w	r7, r7, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8017b58:	454f      	cmp	r7, r9
 8017b5a:	d02e      	beq.n	8017bba <remove_chain+0x2aa>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8017b5c:	78f3      	ldrb	r3, [r6, #3]
 8017b5e:	7870      	ldrb	r0, [r6, #1]
 8017b60:	b313      	cbz	r3, 8017ba8 <remove_chain+0x298>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8017b62:	2301      	movs	r3, #1
 8017b64:	464a      	mov	r2, r9
 8017b66:	4641      	mov	r1, r8
 8017b68:	f7ff fc24 	bl	80173b4 <disk_write>
 8017b6c:	2800      	cmp	r0, #0
 8017b6e:	f040 8091 	bne.w	8017c94 <remove_chain+0x384>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8017b72:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8017b74:	69f3      	ldr	r3, [r6, #28]
 8017b76:	eba9 0202 	sub.w	r2, r9, r2
			fs->wflag = 0;
 8017b7a:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8017b7c:	429a      	cmp	r2, r3
 8017b7e:	d212      	bcs.n	8017ba6 <remove_chain+0x296>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017b80:	f896 b002 	ldrb.w	fp, [r6, #2]
 8017b84:	f1bb 0f01 	cmp.w	fp, #1
 8017b88:	d801      	bhi.n	8017b8e <remove_chain+0x27e>
 8017b8a:	e00c      	b.n	8017ba6 <remove_chain+0x296>
 8017b8c:	69f3      	ldr	r3, [r6, #28]
					wsect += fs->fsize;
 8017b8e:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017b90:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8017b94:	2301      	movs	r3, #1
 8017b96:	4641      	mov	r1, r8
 8017b98:	464a      	mov	r2, r9
 8017b9a:	7870      	ldrb	r0, [r6, #1]
 8017b9c:	f7ff fc0a 	bl	80173b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017ba0:	f1bb 0f01 	cmp.w	fp, #1
 8017ba4:	d1f2      	bne.n	8017b8c <remove_chain+0x27c>
 8017ba6:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8017ba8:	2301      	movs	r3, #1
 8017baa:	463a      	mov	r2, r7
 8017bac:	4641      	mov	r1, r8
 8017bae:	f7ff fbf3 	bl	8017398 <disk_read>
 8017bb2:	2800      	cmp	r0, #0
 8017bb4:	f47f af27 	bne.w	8017a06 <remove_chain+0xf6>
			fs->winsect = sector;
 8017bb8:	6337      	str	r7, [r6, #48]	; 0x30
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8017bba:	006b      	lsls	r3, r5, #1
 8017bbc:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8017bc0:	eb08 0203 	add.w	r2, r8, r3
	rv = rv << 8 | ptr[0];
 8017bc4:	f818 7003 	ldrb.w	r7, [r8, r3]
 8017bc8:	f892 b001 	ldrb.w	fp, [r2, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8017bcc:	ea47 270b 	orr.w	r7, r7, fp, lsl #8
 8017bd0:	e73a      	b.n	8017a48 <remove_chain+0x138>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8017bd2:	78f2      	ldrb	r2, [r6, #3]
 8017bd4:	f106 0b34 	add.w	fp, r6, #52	; 0x34
 8017bd8:	7870      	ldrb	r0, [r6, #1]
 8017bda:	b1fa      	cbz	r2, 8017c1c <remove_chain+0x30c>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8017bdc:	464a      	mov	r2, r9
 8017bde:	4659      	mov	r1, fp
 8017be0:	f7ff fbe8 	bl	80173b4 <disk_write>
 8017be4:	2800      	cmp	r0, #0
 8017be6:	d155      	bne.n	8017c94 <remove_chain+0x384>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8017be8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8017bea:	69f3      	ldr	r3, [r6, #28]
 8017bec:	eba9 0202 	sub.w	r2, r9, r2
			fs->wflag = 0;
 8017bf0:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8017bf2:	429a      	cmp	r2, r3
 8017bf4:	d211      	bcs.n	8017c1a <remove_chain+0x30a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017bf6:	78b2      	ldrb	r2, [r6, #2]
 8017bf8:	2a01      	cmp	r2, #1
 8017bfa:	d90e      	bls.n	8017c1a <remove_chain+0x30a>
 8017bfc:	9401      	str	r4, [sp, #4]
 8017bfe:	4614      	mov	r4, r2
 8017c00:	e000      	b.n	8017c04 <remove_chain+0x2f4>
 8017c02:	69f3      	ldr	r3, [r6, #28]
					wsect += fs->fsize;
 8017c04:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017c06:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8017c08:	2301      	movs	r3, #1
 8017c0a:	4659      	mov	r1, fp
 8017c0c:	464a      	mov	r2, r9
 8017c0e:	7870      	ldrb	r0, [r6, #1]
 8017c10:	f7ff fbd0 	bl	80173b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017c14:	2c01      	cmp	r4, #1
 8017c16:	d1f4      	bne.n	8017c02 <remove_chain+0x2f2>
 8017c18:	9c01      	ldr	r4, [sp, #4]
 8017c1a:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8017c1c:	4659      	mov	r1, fp
 8017c1e:	2301      	movs	r3, #1
 8017c20:	4642      	mov	r2, r8
 8017c22:	f7ff fbb9 	bl	8017398 <disk_read>
 8017c26:	2800      	cmp	r0, #0
 8017c28:	f47f aeed 	bne.w	8017a06 <remove_chain+0xf6>
			fs->winsect = sector;
 8017c2c:	46c1      	mov	r9, r8
 8017c2e:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8017c30:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
 8017c34:	e6a6      	b.n	8017984 <remove_chain+0x74>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8017c36:	78f3      	ldrb	r3, [r6, #3]
 8017c38:	7870      	ldrb	r0, [r6, #1]
 8017c3a:	b30b      	cbz	r3, 8017c80 <remove_chain+0x370>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8017c3c:	2301      	movs	r3, #1
 8017c3e:	464a      	mov	r2, r9
 8017c40:	4641      	mov	r1, r8
 8017c42:	f7ff fbb7 	bl	80173b4 <disk_write>
 8017c46:	bb28      	cbnz	r0, 8017c94 <remove_chain+0x384>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8017c48:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8017c4a:	69f3      	ldr	r3, [r6, #28]
 8017c4c:	eba9 0202 	sub.w	r2, r9, r2
			fs->wflag = 0;
 8017c50:	70f0      	strb	r0, [r6, #3]
 8017c52:	7870      	ldrb	r0, [r6, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8017c54:	429a      	cmp	r2, r3
 8017c56:	d213      	bcs.n	8017c80 <remove_chain+0x370>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017c58:	f896 b002 	ldrb.w	fp, [r6, #2]
 8017c5c:	f1bb 0f01 	cmp.w	fp, #1
 8017c60:	d802      	bhi.n	8017c68 <remove_chain+0x358>
 8017c62:	e00d      	b.n	8017c80 <remove_chain+0x370>
 8017c64:	69f3      	ldr	r3, [r6, #28]
 8017c66:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 8017c68:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017c6a:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8017c6e:	2301      	movs	r3, #1
 8017c70:	4641      	mov	r1, r8
 8017c72:	464a      	mov	r2, r9
 8017c74:	f7ff fb9e 	bl	80173b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017c78:	f1bb 0f01 	cmp.w	fp, #1
 8017c7c:	d1f2      	bne.n	8017c64 <remove_chain+0x354>
 8017c7e:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8017c80:	2301      	movs	r3, #1
 8017c82:	463a      	mov	r2, r7
 8017c84:	4641      	mov	r1, r8
 8017c86:	f7ff fb87 	bl	8017398 <disk_read>
 8017c8a:	2800      	cmp	r0, #0
 8017c8c:	f47f aebb 	bne.w	8017a06 <remove_chain+0xf6>
			fs->winsect = sector;
 8017c90:	6337      	str	r7, [r6, #48]	; 0x30
 8017c92:	e6c9      	b.n	8017a28 <remove_chain+0x118>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8017c94:	2001      	movs	r0, #1
}
 8017c96:	b005      	add	sp, #20
 8017c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8017c9c:	6a66      	ldr	r6, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8017c9e:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8017ca2:	eb06 16d5 	add.w	r6, r6, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8017ca6:	4546      	cmp	r6, r8
 8017ca8:	d02d      	beq.n	8017d06 <remove_chain+0x3f6>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8017caa:	78e3      	ldrb	r3, [r4, #3]
 8017cac:	7860      	ldrb	r0, [r4, #1]
 8017cae:	b313      	cbz	r3, 8017cf6 <remove_chain+0x3e6>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8017cb0:	2301      	movs	r3, #1
 8017cb2:	4642      	mov	r2, r8
 8017cb4:	4651      	mov	r1, sl
 8017cb6:	f7ff fb7d 	bl	80173b4 <disk_write>
 8017cba:	2800      	cmp	r0, #0
 8017cbc:	d1ea      	bne.n	8017c94 <remove_chain+0x384>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8017cbe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8017cc0:	69e3      	ldr	r3, [r4, #28]
 8017cc2:	eba8 0202 	sub.w	r2, r8, r2
			fs->wflag = 0;
 8017cc6:	70e0      	strb	r0, [r4, #3]
 8017cc8:	7860      	ldrb	r0, [r4, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8017cca:	429a      	cmp	r2, r3
 8017ccc:	d213      	bcs.n	8017cf6 <remove_chain+0x3e6>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017cce:	f894 9002 	ldrb.w	r9, [r4, #2]
 8017cd2:	f1b9 0f01 	cmp.w	r9, #1
 8017cd6:	d802      	bhi.n	8017cde <remove_chain+0x3ce>
 8017cd8:	e00d      	b.n	8017cf6 <remove_chain+0x3e6>
 8017cda:	69e3      	ldr	r3, [r4, #28]
 8017cdc:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 8017cde:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017ce0:	f109 39ff 	add.w	r9, r9, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8017ce4:	2301      	movs	r3, #1
 8017ce6:	4651      	mov	r1, sl
 8017ce8:	4642      	mov	r2, r8
 8017cea:	f7ff fb63 	bl	80173b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017cee:	f1b9 0f01 	cmp.w	r9, #1
 8017cf2:	d1f2      	bne.n	8017cda <remove_chain+0x3ca>
 8017cf4:	7860      	ldrb	r0, [r4, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8017cf6:	2301      	movs	r3, #1
 8017cf8:	4632      	mov	r2, r6
 8017cfa:	4651      	mov	r1, sl
 8017cfc:	f7ff fb4c 	bl	8017398 <disk_read>
 8017d00:	2800      	cmp	r0, #0
 8017d02:	d153      	bne.n	8017dac <remove_chain+0x49c>
			fs->winsect = sector;
 8017d04:	6326      	str	r6, [r4, #48]	; 0x30
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8017d06:	00ad      	lsls	r5, r5, #2
	*ptr++ = (BYTE)val; val >>= 8;
 8017d08:	f04f 0100 	mov.w	r1, #0
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8017d0c:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
 8017d10:	eb0a 0205 	add.w	r2, sl, r5
	rv = rv << 8 | ptr[2];
 8017d14:	8853      	ldrh	r3, [r2, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8017d16:	f80a 1005 	strb.w	r1, [sl, r5]
	*ptr++ = (BYTE)val; val >>= 8;
 8017d1a:	0a1b      	lsrs	r3, r3, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8017d1c:	7051      	strb	r1, [r2, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8017d1e:	7091      	strb	r1, [r2, #2]
 8017d20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	*ptr++ = (BYTE)val;
 8017d24:	70d3      	strb	r3, [r2, #3]
			fs->wflag = 1;
 8017d26:	f04f 0301 	mov.w	r3, #1
 8017d2a:	70e3      	strb	r3, [r4, #3]
 8017d2c:	e6fa      	b.n	8017b24 <remove_chain+0x214>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8017d2e:	6a66      	ldr	r6, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8017d30:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8017d34:	eb06 2615 	add.w	r6, r6, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8017d38:	4546      	cmp	r6, r8
 8017d3a:	d03e      	beq.n	8017dba <remove_chain+0x4aa>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8017d3c:	78e3      	ldrb	r3, [r4, #3]
 8017d3e:	7860      	ldrb	r0, [r4, #1]
 8017d40:	b30b      	cbz	r3, 8017d86 <remove_chain+0x476>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8017d42:	2301      	movs	r3, #1
 8017d44:	4642      	mov	r2, r8
 8017d46:	4651      	mov	r1, sl
 8017d48:	f7ff fb34 	bl	80173b4 <disk_write>
 8017d4c:	2800      	cmp	r0, #0
 8017d4e:	d1a1      	bne.n	8017c94 <remove_chain+0x384>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8017d50:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8017d52:	69e3      	ldr	r3, [r4, #28]
 8017d54:	eba8 0202 	sub.w	r2, r8, r2
			fs->wflag = 0;
 8017d58:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8017d5a:	429a      	cmp	r2, r3
 8017d5c:	d212      	bcs.n	8017d84 <remove_chain+0x474>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017d5e:	f894 9002 	ldrb.w	r9, [r4, #2]
 8017d62:	f1b9 0f01 	cmp.w	r9, #1
 8017d66:	d801      	bhi.n	8017d6c <remove_chain+0x45c>
 8017d68:	e00c      	b.n	8017d84 <remove_chain+0x474>
 8017d6a:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
 8017d6c:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017d6e:	f109 39ff 	add.w	r9, r9, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8017d72:	2301      	movs	r3, #1
 8017d74:	4651      	mov	r1, sl
 8017d76:	4642      	mov	r2, r8
 8017d78:	7860      	ldrb	r0, [r4, #1]
 8017d7a:	f7ff fb1b 	bl	80173b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017d7e:	f1b9 0f01 	cmp.w	r9, #1
 8017d82:	d1f2      	bne.n	8017d6a <remove_chain+0x45a>
 8017d84:	7860      	ldrb	r0, [r4, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8017d86:	2301      	movs	r3, #1
 8017d88:	4632      	mov	r2, r6
 8017d8a:	4651      	mov	r1, sl
 8017d8c:	f7ff fb04 	bl	8017398 <disk_read>
 8017d90:	b960      	cbnz	r0, 8017dac <remove_chain+0x49c>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8017d92:	006d      	lsls	r5, r5, #1
			fs->winsect = sector;
 8017d94:	6326      	str	r6, [r4, #48]	; 0x30
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8017d96:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
 8017d9a:	eb0a 0305 	add.w	r3, sl, r5
	*ptr++ = (BYTE)val; val >>= 8;
 8017d9e:	f80a 0005 	strb.w	r0, [sl, r5]
	*ptr++ = (BYTE)val;
 8017da2:	7058      	strb	r0, [r3, #1]
			fs->wflag = 1;
 8017da4:	f04f 0301 	mov.w	r3, #1
 8017da8:	70e3      	strb	r3, [r4, #3]
 8017daa:	e6bb      	b.n	8017b24 <remove_chain+0x214>
			fs->winsect = sector;
 8017dac:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 8017db0:	2001      	movs	r0, #1
			fs->winsect = sector;
 8017db2:	6323      	str	r3, [r4, #48]	; 0x30
}
 8017db4:	b005      	add	sp, #20
 8017db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8017dba:	006d      	lsls	r5, r5, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8017dbc:	f04f 0200 	mov.w	r2, #0
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8017dc0:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
 8017dc4:	eb0a 0305 	add.w	r3, sl, r5
	*ptr++ = (BYTE)val; val >>= 8;
 8017dc8:	f80a 2005 	strb.w	r2, [sl, r5]
	*ptr++ = (BYTE)val;
 8017dcc:	705a      	strb	r2, [r3, #1]
			fs->wflag = 1;
 8017dce:	f04f 0301 	mov.w	r3, #1
 8017dd2:	70e3      	strb	r3, [r4, #3]
 8017dd4:	e6a6      	b.n	8017b24 <remove_chain+0x214>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8017dd6:	f80a 9006 	strb.w	r9, [sl, r6]
			fs->wflag = 1;
 8017dda:	f04f 0301 	mov.w	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8017dde:	6a66      	ldr	r6, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8017de0:	6b25      	ldr	r5, [r4, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8017de2:	4416      	add	r6, r2
			fs->wflag = 1;
 8017de4:	70e3      	strb	r3, [r4, #3]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8017de6:	42ae      	cmp	r6, r5
 8017de8:	d047      	beq.n	8017e7a <remove_chain+0x56a>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8017dea:	2301      	movs	r3, #1
 8017dec:	462a      	mov	r2, r5
 8017dee:	4651      	mov	r1, sl
 8017df0:	7860      	ldrb	r0, [r4, #1]
 8017df2:	f7ff fadf 	bl	80173b4 <disk_write>
 8017df6:	2800      	cmp	r0, #0
 8017df8:	f47f af4c 	bne.w	8017c94 <remove_chain+0x384>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8017dfc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8017dfe:	69e3      	ldr	r3, [r4, #28]
 8017e00:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
 8017e02:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8017e04:	429a      	cmp	r2, r3
 8017e06:	d212      	bcs.n	8017e2e <remove_chain+0x51e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017e08:	f894 b002 	ldrb.w	fp, [r4, #2]
 8017e0c:	f1bb 0f01 	cmp.w	fp, #1
 8017e10:	d801      	bhi.n	8017e16 <remove_chain+0x506>
 8017e12:	e00c      	b.n	8017e2e <remove_chain+0x51e>
 8017e14:	69e3      	ldr	r3, [r4, #28]
					wsect += fs->fsize;
 8017e16:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017e18:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8017e1c:	2301      	movs	r3, #1
 8017e1e:	4651      	mov	r1, sl
 8017e20:	462a      	mov	r2, r5
 8017e22:	7860      	ldrb	r0, [r4, #1]
 8017e24:	f7ff fac6 	bl	80173b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017e28:	f1bb 0f01 	cmp.w	fp, #1
 8017e2c:	d1f2      	bne.n	8017e14 <remove_chain+0x504>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8017e2e:	2301      	movs	r3, #1
 8017e30:	4632      	mov	r2, r6
 8017e32:	4651      	mov	r1, sl
 8017e34:	7860      	ldrb	r0, [r4, #1]
 8017e36:	f7ff faaf 	bl	8017398 <disk_read>
 8017e3a:	2800      	cmp	r0, #0
 8017e3c:	d1b6      	bne.n	8017dac <remove_chain+0x49c>
			p = fs->win + bc % SS(fs);
 8017e3e:	f3c8 0808 	ubfx	r8, r8, #0, #9
			fs->winsect = sector;
 8017e42:	6326      	str	r6, [r4, #48]	; 0x30
			p = fs->win + bc % SS(fs);
 8017e44:	44d0      	add	r8, sl
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8017e46:	f1b9 0f00 	cmp.w	r9, #0
 8017e4a:	d11a      	bne.n	8017e82 <remove_chain+0x572>
 8017e4c:	f898 3000 	ldrb.w	r3, [r8]
 8017e50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017e54:	e661      	b.n	8017b1a <remove_chain+0x20a>
			fs->winsect = sector;
 8017e56:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
			wc |= fs->win[bc % SS(fs)] << 8;
 8017e5a:	f3c7 0708 	ubfx	r7, r7, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8017e5e:	07eb      	lsls	r3, r5, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8017e60:	443e      	add	r6, r7
 8017e62:	f896 7034 	ldrb.w	r7, [r6, #52]	; 0x34
 8017e66:	ea4b 2b07 	orr.w	fp, fp, r7, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8017e6a:	bf4c      	ite	mi
 8017e6c:	ea4f 171b 	movmi.w	r7, fp, lsr #4
 8017e70:	f3cb 070b 	ubfxpl	r7, fp, #0, #12
 8017e74:	e5e8      	b.n	8017a48 <remove_chain+0x138>
	return FR_OK;
 8017e76:	2000      	movs	r0, #0
 8017e78:	e566      	b.n	8017948 <remove_chain+0x38>
			p = fs->win + bc % SS(fs);
 8017e7a:	f3c8 0808 	ubfx	r8, r8, #0, #9
 8017e7e:	44d0      	add	r8, sl
 8017e80:	e7e4      	b.n	8017e4c <remove_chain+0x53c>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8017e82:	4603      	mov	r3, r0
 8017e84:	e649      	b.n	8017b1a <remove_chain+0x20a>
 8017e86:	bf00      	nop

08017e88 <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8017e88:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8017e8c:	d239      	bcs.n	8017f02 <dir_sdi+0x7a>
{
 8017e8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e92:	460d      	mov	r5, r1
 8017e94:	b085      	sub	sp, #20
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8017e96:	06e9      	lsls	r1, r5, #27
 8017e98:	d12f      	bne.n	8017efa <dir_sdi+0x72>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8017e9a:	6884      	ldr	r4, [r0, #8]
 8017e9c:	4680      	mov	r8, r0
	dp->dptr = ofs;				/* Set current offset */
 8017e9e:	6145      	str	r5, [r0, #20]
	FATFS *fs = dp->obj.fs;
 8017ea0:	f8d0 b000 	ldr.w	fp, [r0]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8017ea4:	bb84      	cbnz	r4, 8017f08 <dir_sdi+0x80>
 8017ea6:	f89b 3000 	ldrb.w	r3, [fp]
 8017eaa:	2b02      	cmp	r3, #2
 8017eac:	d902      	bls.n	8017eb4 <dir_sdi+0x2c>
		clst = fs->dirbase;
 8017eae:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8017eb2:	bb43      	cbnz	r3, 8017f06 <dir_sdi+0x7e>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8017eb4:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 8017eb8:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 8017ebc:	d91d      	bls.n	8017efa <dir_sdi+0x72>
		dp->sect = fs->dirbase;
 8017ebe:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 8017ec2:	f8c8 201c 	str.w	r2, [r8, #28]
	dp->clust = clst;					/* Current cluster# */
 8017ec6:	f8c8 4018 	str.w	r4, [r8, #24]
	if (!dp->sect) return FR_INT_ERR;
 8017eca:	b1b2      	cbz	r2, 8017efa <dir_sdi+0x72>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8017ecc:	f3c5 0108 	ubfx	r1, r5, #0, #9
 8017ed0:	f10b 0334 	add.w	r3, fp, #52	; 0x34
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8017ed4:	eb02 2555 	add.w	r5, r2, r5, lsr #9
	return FR_OK;
 8017ed8:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8017eda:	440b      	add	r3, r1
 8017edc:	e9c8 5307 	strd	r5, r3, [r8, #28]
}
 8017ee0:	b005      	add	sp, #20
 8017ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ee6:	f8dd 8000 	ldr.w	r8, [sp]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8017eea:	3b02      	subs	r3, #2
	clst -= 2;
 8017eec:	1ea1      	subs	r1, r4, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8017eee:	4299      	cmp	r1, r3
 8017ef0:	f0c0 8153 	bcc.w	801819a <dir_sdi+0x312>
		dp->sect = clust2sect(fs, clst);
 8017ef4:	2300      	movs	r3, #0
 8017ef6:	e9c8 4306 	strd	r4, r3, [r8, #24]
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8017efa:	2002      	movs	r0, #2
}
 8017efc:	b005      	add	sp, #20
 8017efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return FR_INT_ERR;
 8017f02:	2002      	movs	r0, #2
}
 8017f04:	4770      	bx	lr
 8017f06:	461c      	mov	r4, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8017f08:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 8017f0c:	ea4f 2a43 	mov.w	sl, r3, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
 8017f10:	4555      	cmp	r5, sl
 8017f12:	f0c0 814d 	bcc.w	80181b0 <dir_sdi+0x328>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8017f16:	2c01      	cmp	r4, #1
 8017f18:	d9ef      	bls.n	8017efa <dir_sdi+0x72>
 8017f1a:	f8db 3018 	ldr.w	r3, [fp, #24]
 8017f1e:	42a3      	cmp	r3, r4
 8017f20:	d9eb      	bls.n	8017efa <dir_sdi+0x72>
 8017f22:	465e      	mov	r6, fp
 8017f24:	f8cd 8000 	str.w	r8, [sp]
		switch (fs->fs_type) {
 8017f28:	7833      	ldrb	r3, [r6, #0]
 8017f2a:	2b02      	cmp	r3, #2
 8017f2c:	f000 80a3 	beq.w	8018076 <dir_sdi+0x1ee>
 8017f30:	2b03      	cmp	r3, #3
 8017f32:	d043      	beq.n	8017fbc <dir_sdi+0x134>
 8017f34:	2b01      	cmp	r3, #1
 8017f36:	d1e0      	bne.n	8017efa <dir_sdi+0x72>
			bc = (UINT)clst; bc += bc / 2;
 8017f38:	eb04 0754 	add.w	r7, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017f3c:	6a72      	ldr	r2, [r6, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8017f3e:	f8d6 8030 	ldr.w	r8, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017f42:	eb02 2957 	add.w	r9, r2, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8017f46:	45c1      	cmp	r9, r8
 8017f48:	f000 80db 	beq.w	8018102 <dir_sdi+0x27a>
 8017f4c:	f106 0134 	add.w	r1, r6, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8017f50:	78f2      	ldrb	r2, [r6, #3]
 8017f52:	7870      	ldrb	r0, [r6, #1]
 8017f54:	9101      	str	r1, [sp, #4]
 8017f56:	b31a      	cbz	r2, 8017fa0 <dir_sdi+0x118>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8017f58:	4642      	mov	r2, r8
 8017f5a:	f7ff fa2b 	bl	80173b4 <disk_write>
 8017f5e:	2800      	cmp	r0, #0
 8017f60:	f040 8124 	bne.w	80181ac <dir_sdi+0x324>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8017f64:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8017f66:	69f3      	ldr	r3, [r6, #28]
 8017f68:	eba8 0202 	sub.w	r2, r8, r2
			fs->wflag = 0;
 8017f6c:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8017f6e:	429a      	cmp	r2, r3
 8017f70:	d214      	bcs.n	8017f9c <dir_sdi+0x114>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017f72:	78b2      	ldrb	r2, [r6, #2]
 8017f74:	2a01      	cmp	r2, #1
 8017f76:	d911      	bls.n	8017f9c <dir_sdi+0x114>
 8017f78:	9402      	str	r4, [sp, #8]
 8017f7a:	4614      	mov	r4, r2
 8017f7c:	9503      	str	r5, [sp, #12]
 8017f7e:	9d01      	ldr	r5, [sp, #4]
 8017f80:	e000      	b.n	8017f84 <dir_sdi+0xfc>
 8017f82:	69f3      	ldr	r3, [r6, #28]
					wsect += fs->fsize;
 8017f84:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017f86:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8017f88:	2301      	movs	r3, #1
 8017f8a:	4629      	mov	r1, r5
 8017f8c:	4642      	mov	r2, r8
 8017f8e:	7870      	ldrb	r0, [r6, #1]
 8017f90:	f7ff fa10 	bl	80173b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017f94:	2c01      	cmp	r4, #1
 8017f96:	d1f4      	bne.n	8017f82 <dir_sdi+0xfa>
 8017f98:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8017f9c:	7870      	ldrb	r0, [r6, #1]
 8017f9e:	9901      	ldr	r1, [sp, #4]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8017fa0:	2301      	movs	r3, #1
 8017fa2:	464a      	mov	r2, r9
 8017fa4:	f7ff f9f8 	bl	8017398 <disk_read>
 8017fa8:	2800      	cmp	r0, #0
 8017faa:	f000 80a6 	beq.w	80180fa <dir_sdi+0x272>
			fs->winsect = sector;
 8017fae:	f04f 33ff 	mov.w	r3, #4294967295
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8017fb2:	2001      	movs	r0, #1
			fs->winsect = sector;
 8017fb4:	6333      	str	r3, [r6, #48]	; 0x30
}
 8017fb6:	b005      	add	sp, #20
 8017fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8017fbc:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8017fbe:	f106 0834 	add.w	r8, r6, #52	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8017fc2:	f8d6 9030 	ldr.w	r9, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8017fc6:	eb07 17d4 	add.w	r7, r7, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8017fca:	454f      	cmp	r7, r9
 8017fcc:	d02d      	beq.n	801802a <dir_sdi+0x1a2>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8017fce:	78f3      	ldrb	r3, [r6, #3]
 8017fd0:	7870      	ldrb	r0, [r6, #1]
 8017fd2:	b313      	cbz	r3, 801801a <dir_sdi+0x192>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8017fd4:	2301      	movs	r3, #1
 8017fd6:	464a      	mov	r2, r9
 8017fd8:	4641      	mov	r1, r8
 8017fda:	f7ff f9eb 	bl	80173b4 <disk_write>
 8017fde:	2800      	cmp	r0, #0
 8017fe0:	f040 80e4 	bne.w	80181ac <dir_sdi+0x324>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8017fe4:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8017fe6:	69f3      	ldr	r3, [r6, #28]
 8017fe8:	eba9 0202 	sub.w	r2, r9, r2
			fs->wflag = 0;
 8017fec:	70f0      	strb	r0, [r6, #3]
 8017fee:	7870      	ldrb	r0, [r6, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8017ff0:	429a      	cmp	r2, r3
 8017ff2:	d212      	bcs.n	801801a <dir_sdi+0x192>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017ff4:	78b2      	ldrb	r2, [r6, #2]
 8017ff6:	2a01      	cmp	r2, #1
 8017ff8:	d90f      	bls.n	801801a <dir_sdi+0x192>
 8017ffa:	9401      	str	r4, [sp, #4]
 8017ffc:	4614      	mov	r4, r2
 8017ffe:	e001      	b.n	8018004 <dir_sdi+0x17c>
 8018000:	69f3      	ldr	r3, [r6, #28]
 8018002:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 8018004:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8018006:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8018008:	2301      	movs	r3, #1
 801800a:	4641      	mov	r1, r8
 801800c:	464a      	mov	r2, r9
 801800e:	f7ff f9d1 	bl	80173b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8018012:	2c01      	cmp	r4, #1
 8018014:	d1f4      	bne.n	8018000 <dir_sdi+0x178>
 8018016:	9c01      	ldr	r4, [sp, #4]
 8018018:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801801a:	2301      	movs	r3, #1
 801801c:	463a      	mov	r2, r7
 801801e:	4641      	mov	r1, r8
 8018020:	f7ff f9ba 	bl	8017398 <disk_read>
 8018024:	2800      	cmp	r0, #0
 8018026:	d1c2      	bne.n	8017fae <dir_sdi+0x126>
			fs->winsect = sector;
 8018028:	6337      	str	r7, [r6, #48]	; 0x30
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801802a:	00a4      	lsls	r4, r4, #2
 801802c:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8018030:	eb08 0204 	add.w	r2, r8, r4
	rv = rv << 8 | ptr[0];
 8018034:	f818 4004 	ldrb.w	r4, [r8, r4]
	rv = rv << 8 | ptr[2];
 8018038:	8851      	ldrh	r1, [r2, #2]
	rv = rv << 8 | ptr[1];
 801803a:	7853      	ldrb	r3, [r2, #1]
 801803c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 8018040:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8018044:	f024 4470 	bic.w	r4, r4, #4026531840	; 0xf0000000
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8018048:	2c01      	cmp	r4, #1
 801804a:	f67f af56 	bls.w	8017efa <dir_sdi+0x72>
 801804e:	f8db 3018 	ldr.w	r3, [fp, #24]
 8018052:	42a3      	cmp	r3, r4
 8018054:	f67f af51 	bls.w	8017efa <dir_sdi+0x72>
			ofs -= csz;
 8018058:	eba5 050a 	sub.w	r5, r5, sl
		while (ofs >= csz) {				/* Follow cluster chain */
 801805c:	45aa      	cmp	sl, r5
 801805e:	f63f af42 	bhi.w	8017ee6 <dir_sdi+0x5e>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8018062:	9b00      	ldr	r3, [sp, #0]
 8018064:	681e      	ldr	r6, [r3, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8018066:	69b3      	ldr	r3, [r6, #24]
 8018068:	42a3      	cmp	r3, r4
 801806a:	f67f af46 	bls.w	8017efa <dir_sdi+0x72>
		switch (fs->fs_type) {
 801806e:	7833      	ldrb	r3, [r6, #0]
 8018070:	2b02      	cmp	r3, #2
 8018072:	f47f af5d 	bne.w	8017f30 <dir_sdi+0xa8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8018076:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8018078:	f106 0834 	add.w	r8, r6, #52	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 801807c:	f8d6 9030 	ldr.w	r9, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8018080:	eb07 2714 	add.w	r7, r7, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8018084:	454f      	cmp	r7, r9
 8018086:	d02d      	beq.n	80180e4 <dir_sdi+0x25c>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8018088:	78f3      	ldrb	r3, [r6, #3]
 801808a:	7870      	ldrb	r0, [r6, #1]
 801808c:	b30b      	cbz	r3, 80180d2 <dir_sdi+0x24a>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801808e:	2301      	movs	r3, #1
 8018090:	464a      	mov	r2, r9
 8018092:	4641      	mov	r1, r8
 8018094:	f7ff f98e 	bl	80173b4 <disk_write>
 8018098:	2800      	cmp	r0, #0
 801809a:	f040 8087 	bne.w	80181ac <dir_sdi+0x324>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801809e:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80180a0:	69f3      	ldr	r3, [r6, #28]
 80180a2:	eba9 0202 	sub.w	r2, r9, r2
			fs->wflag = 0;
 80180a6:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80180a8:	429a      	cmp	r2, r3
 80180aa:	d211      	bcs.n	80180d0 <dir_sdi+0x248>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80180ac:	78b2      	ldrb	r2, [r6, #2]
 80180ae:	2a01      	cmp	r2, #1
 80180b0:	d90e      	bls.n	80180d0 <dir_sdi+0x248>
 80180b2:	9401      	str	r4, [sp, #4]
 80180b4:	4614      	mov	r4, r2
 80180b6:	e000      	b.n	80180ba <dir_sdi+0x232>
 80180b8:	69f3      	ldr	r3, [r6, #28]
					wsect += fs->fsize;
 80180ba:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80180bc:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 80180be:	2301      	movs	r3, #1
 80180c0:	4641      	mov	r1, r8
 80180c2:	464a      	mov	r2, r9
 80180c4:	7870      	ldrb	r0, [r6, #1]
 80180c6:	f7ff f975 	bl	80173b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80180ca:	2c01      	cmp	r4, #1
 80180cc:	d1f4      	bne.n	80180b8 <dir_sdi+0x230>
 80180ce:	9c01      	ldr	r4, [sp, #4]
 80180d0:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80180d2:	2301      	movs	r3, #1
 80180d4:	463a      	mov	r2, r7
 80180d6:	4641      	mov	r1, r8
 80180d8:	f7ff f95e 	bl	8017398 <disk_read>
 80180dc:	2800      	cmp	r0, #0
 80180de:	f47f af66 	bne.w	8017fae <dir_sdi+0x126>
			fs->winsect = sector;
 80180e2:	6337      	str	r7, [r6, #48]	; 0x30
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80180e4:	0064      	lsls	r4, r4, #1
 80180e6:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 80180ea:	eb08 0304 	add.w	r3, r8, r4
	rv = rv << 8 | ptr[0];
 80180ee:	f818 4004 	ldrb.w	r4, [r8, r4]
 80180f2:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80180f4:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80180f8:	e7a6      	b.n	8018048 <dir_sdi+0x1c0>
			fs->winsect = sector;
 80180fa:	46c8      	mov	r8, r9
 80180fc:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80180fe:	f8c6 9030 	str.w	r9, [r6, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 8018102:	1c79      	adds	r1, r7, #1
 8018104:	f3c7 0308 	ubfx	r3, r7, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8018108:	eb02 2951 	add.w	r9, r2, r1, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 801810c:	4433      	add	r3, r6
 801810e:	9101      	str	r1, [sp, #4]
 8018110:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8018114:	45c1      	cmp	r9, r8
			wc = fs->win[bc++ % SS(fs)];
 8018116:	9302      	str	r3, [sp, #8]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8018118:	d030      	beq.n	801817c <dir_sdi+0x2f4>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801811a:	78f3      	ldrb	r3, [r6, #3]
 801811c:	f106 0734 	add.w	r7, r6, #52	; 0x34
 8018120:	7870      	ldrb	r0, [r6, #1]
 8018122:	b30b      	cbz	r3, 8018168 <dir_sdi+0x2e0>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8018124:	2301      	movs	r3, #1
 8018126:	4642      	mov	r2, r8
 8018128:	4639      	mov	r1, r7
 801812a:	f7ff f943 	bl	80173b4 <disk_write>
 801812e:	2800      	cmp	r0, #0
 8018130:	d13c      	bne.n	80181ac <dir_sdi+0x324>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8018132:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8018134:	69f3      	ldr	r3, [r6, #28]
 8018136:	eba8 0202 	sub.w	r2, r8, r2
			fs->wflag = 0;
 801813a:	70f0      	strb	r0, [r6, #3]
 801813c:	7870      	ldrb	r0, [r6, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801813e:	429a      	cmp	r2, r3
 8018140:	d212      	bcs.n	8018168 <dir_sdi+0x2e0>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8018142:	78b2      	ldrb	r2, [r6, #2]
 8018144:	2a01      	cmp	r2, #1
 8018146:	d90f      	bls.n	8018168 <dir_sdi+0x2e0>
 8018148:	9403      	str	r4, [sp, #12]
 801814a:	4614      	mov	r4, r2
 801814c:	e001      	b.n	8018152 <dir_sdi+0x2ca>
 801814e:	69f3      	ldr	r3, [r6, #28]
 8018150:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 8018152:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8018154:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8018156:	2301      	movs	r3, #1
 8018158:	4639      	mov	r1, r7
 801815a:	4642      	mov	r2, r8
 801815c:	f7ff f92a 	bl	80173b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8018160:	2c01      	cmp	r4, #1
 8018162:	d1f4      	bne.n	801814e <dir_sdi+0x2c6>
 8018164:	9c03      	ldr	r4, [sp, #12]
 8018166:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8018168:	4639      	mov	r1, r7
 801816a:	2301      	movs	r3, #1
 801816c:	464a      	mov	r2, r9
 801816e:	f7ff f913 	bl	8017398 <disk_read>
 8018172:	2800      	cmp	r0, #0
 8018174:	f47f af1b 	bne.w	8017fae <dir_sdi+0x126>
			fs->winsect = sector;
 8018178:	f8c6 9030 	str.w	r9, [r6, #48]	; 0x30
			wc |= fs->win[bc % SS(fs)] << 8;
 801817c:	9b01      	ldr	r3, [sp, #4]
 801817e:	9a02      	ldr	r2, [sp, #8]
 8018180:	f3c3 0708 	ubfx	r7, r3, #0, #9
 8018184:	443e      	add	r6, r7
 8018186:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 801818a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801818e:	07e2      	lsls	r2, r4, #31
 8018190:	bf4c      	ite	mi
 8018192:	091c      	lsrmi	r4, r3, #4
 8018194:	f3c3 040b 	ubfxpl	r4, r3, #0, #12
 8018198:	e756      	b.n	8018048 <dir_sdi+0x1c0>
	return clst * fs->csize + fs->database;
 801819a:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 801819e:	f8db 302c 	ldr.w	r3, [fp, #44]	; 0x2c
 80181a2:	fb01 3202 	mla	r2, r1, r2, r3
		dp->sect = clust2sect(fs, clst);
 80181a6:	f8c8 201c 	str.w	r2, [r8, #28]
 80181aa:	e68c      	b.n	8017ec6 <dir_sdi+0x3e>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80181ac:	2001      	movs	r0, #1
 80181ae:	e6a5      	b.n	8017efc <dir_sdi+0x74>
 80181b0:	f8db 3018 	ldr.w	r3, [fp, #24]
 80181b4:	e699      	b.n	8017eea <dir_sdi+0x62>
 80181b6:	bf00      	nop

080181b8 <get_fat.isra.8>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80181b8:	2901      	cmp	r1, #1
 80181ba:	d932      	bls.n	8018222 <get_fat.isra.8+0x6a>
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 80181bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80181c0:	6983      	ldr	r3, [r0, #24]
 80181c2:	4299      	cmp	r1, r3
 80181c4:	d22a      	bcs.n	801821c <get_fat.isra.8+0x64>
		switch (fs->fs_type) {
 80181c6:	7803      	ldrb	r3, [r0, #0]
 80181c8:	4606      	mov	r6, r0
 80181ca:	460c      	mov	r4, r1
 80181cc:	2b02      	cmp	r3, #2
 80181ce:	d041      	beq.n	8018254 <get_fat.isra.8+0x9c>
 80181d0:	2b03      	cmp	r3, #3
 80181d2:	d028      	beq.n	8018226 <get_fat.isra.8+0x6e>
 80181d4:	2b01      	cmp	r3, #1
 80181d6:	d121      	bne.n	801821c <get_fat.isra.8+0x64>
			bc = (UINT)clst; bc += bc / 2;
 80181d8:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80181dc:	6a42      	ldr	r2, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80181de:	f8d0 8030 	ldr.w	r8, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80181e2:	eb02 2557 	add.w	r5, r2, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 80181e6:	4545      	cmp	r5, r8
 80181e8:	f040 80a5 	bne.w	8018336 <get_fat.isra.8+0x17e>
			wc = fs->win[bc++ % SS(fs)];
 80181ec:	f3c7 0308 	ubfx	r3, r7, #0, #9
 80181f0:	3701      	adds	r7, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80181f2:	eb02 2957 	add.w	r9, r2, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 80181f6:	4433      	add	r3, r6
	if (sector != fs->winsect) {	/* Window offset changed? */
 80181f8:	45c1      	cmp	r9, r8
			wc = fs->win[bc++ % SS(fs)];
 80181fa:	f893 5034 	ldrb.w	r5, [r3, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 80181fe:	f040 80ca 	bne.w	8018396 <get_fat.isra.8+0x1de>
			wc |= fs->win[bc % SS(fs)] << 8;
 8018202:	f3c7 0008 	ubfx	r0, r7, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8018206:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8018208:	4430      	add	r0, r6
 801820a:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 801820e:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8018212:	bf4c      	ite	mi
 8018214:	0900      	lsrmi	r0, r0, #4
 8018216:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 801821a:	e000      	b.n	801821e <get_fat.isra.8+0x66>
			val = 1;	/* Internal error */
 801821c:	2001      	movs	r0, #1
}
 801821e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		val = 1;	/* Internal error */
 8018222:	2001      	movs	r0, #1
}
 8018224:	4770      	bx	lr
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8018226:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018228:	f100 0734 	add.w	r7, r0, #52	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 801822c:	f8d0 8030 	ldr.w	r8, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8018230:	eb05 15d1 	add.w	r5, r5, r1, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8018234:	4545      	cmp	r5, r8
 8018236:	d14e      	bne.n	80182d6 <get_fat.isra.8+0x11e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8018238:	00a1      	lsls	r1, r4, #2
 801823a:	f401 71fe 	and.w	r1, r1, #508	; 0x1fc
 801823e:	187a      	adds	r2, r7, r1
	rv = rv << 8 | ptr[0];
 8018240:	5c78      	ldrb	r0, [r7, r1]
	rv = rv << 8 | ptr[1];
 8018242:	7853      	ldrb	r3, [r2, #1]
	rv = rv << 8 | ptr[2];
 8018244:	8851      	ldrh	r1, [r2, #2]
	rv = rv << 8 | ptr[1];
 8018246:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 801824a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801824e:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 8018252:	e7e4      	b.n	801821e <get_fat.isra.8+0x66>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8018254:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018256:	f100 0734 	add.w	r7, r0, #52	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 801825a:	f8d0 8030 	ldr.w	r8, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801825e:	eb05 2511 	add.w	r5, r5, r1, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8018262:	4545      	cmp	r5, r8
 8018264:	d02e      	beq.n	80182c4 <get_fat.isra.8+0x10c>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8018266:	78c3      	ldrb	r3, [r0, #3]
 8018268:	7840      	ldrb	r0, [r0, #1]
 801826a:	b313      	cbz	r3, 80182b2 <get_fat.isra.8+0xfa>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801826c:	2301      	movs	r3, #1
 801826e:	4642      	mov	r2, r8
 8018270:	4639      	mov	r1, r7
 8018272:	f7ff f89f 	bl	80173b4 <disk_write>
 8018276:	2800      	cmp	r0, #0
 8018278:	f040 80c1 	bne.w	80183fe <get_fat.isra.8+0x246>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801827c:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801827e:	69f3      	ldr	r3, [r6, #28]
 8018280:	eba8 0202 	sub.w	r2, r8, r2
			fs->wflag = 0;
 8018284:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8018286:	429a      	cmp	r2, r3
 8018288:	d212      	bcs.n	80182b0 <get_fat.isra.8+0xf8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801828a:	f896 9002 	ldrb.w	r9, [r6, #2]
 801828e:	f1b9 0f01 	cmp.w	r9, #1
 8018292:	d801      	bhi.n	8018298 <get_fat.isra.8+0xe0>
 8018294:	e00c      	b.n	80182b0 <get_fat.isra.8+0xf8>
 8018296:	69f3      	ldr	r3, [r6, #28]
					wsect += fs->fsize;
 8018298:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801829a:	f109 39ff 	add.w	r9, r9, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 801829e:	2301      	movs	r3, #1
 80182a0:	4639      	mov	r1, r7
 80182a2:	4642      	mov	r2, r8
 80182a4:	7870      	ldrb	r0, [r6, #1]
 80182a6:	f7ff f885 	bl	80173b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80182aa:	f1b9 0f01 	cmp.w	r9, #1
 80182ae:	d1f2      	bne.n	8018296 <get_fat.isra.8+0xde>
 80182b0:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80182b2:	2301      	movs	r3, #1
 80182b4:	462a      	mov	r2, r5
 80182b6:	4639      	mov	r1, r7
 80182b8:	f7ff f86e 	bl	8017398 <disk_read>
 80182bc:	2800      	cmp	r0, #0
 80182be:	f040 809a 	bne.w	80183f6 <get_fat.isra.8+0x23e>
			fs->winsect = sector;
 80182c2:	6335      	str	r5, [r6, #48]	; 0x30
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80182c4:	0061      	lsls	r1, r4, #1
 80182c6:	f401 71ff 	and.w	r1, r1, #510	; 0x1fe
 80182ca:	187b      	adds	r3, r7, r1
	rv = rv << 8 | ptr[0];
 80182cc:	5c78      	ldrb	r0, [r7, r1]
 80182ce:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80182d0:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80182d4:	e7a3      	b.n	801821e <get_fat.isra.8+0x66>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80182d6:	78c3      	ldrb	r3, [r0, #3]
 80182d8:	7840      	ldrb	r0, [r0, #1]
 80182da:	b31b      	cbz	r3, 8018324 <get_fat.isra.8+0x16c>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80182dc:	2301      	movs	r3, #1
 80182de:	4642      	mov	r2, r8
 80182e0:	4639      	mov	r1, r7
 80182e2:	f7ff f867 	bl	80173b4 <disk_write>
 80182e6:	2800      	cmp	r0, #0
 80182e8:	f040 8089 	bne.w	80183fe <get_fat.isra.8+0x246>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80182ec:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80182ee:	69f3      	ldr	r3, [r6, #28]
 80182f0:	eba8 0202 	sub.w	r2, r8, r2
			fs->wflag = 0;
 80182f4:	70f0      	strb	r0, [r6, #3]
 80182f6:	7870      	ldrb	r0, [r6, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80182f8:	429a      	cmp	r2, r3
 80182fa:	d213      	bcs.n	8018324 <get_fat.isra.8+0x16c>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80182fc:	f896 9002 	ldrb.w	r9, [r6, #2]
 8018300:	f1b9 0f01 	cmp.w	r9, #1
 8018304:	d802      	bhi.n	801830c <get_fat.isra.8+0x154>
 8018306:	e00d      	b.n	8018324 <get_fat.isra.8+0x16c>
 8018308:	69f3      	ldr	r3, [r6, #28]
 801830a:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 801830c:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801830e:	f109 39ff 	add.w	r9, r9, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8018312:	2301      	movs	r3, #1
 8018314:	4639      	mov	r1, r7
 8018316:	4642      	mov	r2, r8
 8018318:	f7ff f84c 	bl	80173b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801831c:	f1b9 0f01 	cmp.w	r9, #1
 8018320:	d1f2      	bne.n	8018308 <get_fat.isra.8+0x150>
 8018322:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8018324:	2301      	movs	r3, #1
 8018326:	462a      	mov	r2, r5
 8018328:	4639      	mov	r1, r7
 801832a:	f7ff f835 	bl	8017398 <disk_read>
 801832e:	2800      	cmp	r0, #0
 8018330:	d161      	bne.n	80183f6 <get_fat.isra.8+0x23e>
			fs->winsect = sector;
 8018332:	6335      	str	r5, [r6, #48]	; 0x30
 8018334:	e780      	b.n	8018238 <get_fat.isra.8+0x80>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8018336:	78c2      	ldrb	r2, [r0, #3]
 8018338:	f100 0934 	add.w	r9, r0, #52	; 0x34
 801833c:	7840      	ldrb	r0, [r0, #1]
 801833e:	b302      	cbz	r2, 8018382 <get_fat.isra.8+0x1ca>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8018340:	4642      	mov	r2, r8
 8018342:	4649      	mov	r1, r9
 8018344:	f7ff f836 	bl	80173b4 <disk_write>
 8018348:	2800      	cmp	r0, #0
 801834a:	d158      	bne.n	80183fe <get_fat.isra.8+0x246>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801834c:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801834e:	69f3      	ldr	r3, [r6, #28]
 8018350:	eba8 0202 	sub.w	r2, r8, r2
			fs->wflag = 0;
 8018354:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8018356:	429a      	cmp	r2, r3
 8018358:	d212      	bcs.n	8018380 <get_fat.isra.8+0x1c8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801835a:	f896 a002 	ldrb.w	sl, [r6, #2]
 801835e:	f1ba 0f01 	cmp.w	sl, #1
 8018362:	d801      	bhi.n	8018368 <get_fat.isra.8+0x1b0>
 8018364:	e00c      	b.n	8018380 <get_fat.isra.8+0x1c8>
 8018366:	69f3      	ldr	r3, [r6, #28]
					wsect += fs->fsize;
 8018368:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801836a:	f10a 3aff 	add.w	sl, sl, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 801836e:	2301      	movs	r3, #1
 8018370:	4649      	mov	r1, r9
 8018372:	4642      	mov	r2, r8
 8018374:	7870      	ldrb	r0, [r6, #1]
 8018376:	f7ff f81d 	bl	80173b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801837a:	f1ba 0f01 	cmp.w	sl, #1
 801837e:	d1f2      	bne.n	8018366 <get_fat.isra.8+0x1ae>
 8018380:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8018382:	4649      	mov	r1, r9
 8018384:	2301      	movs	r3, #1
 8018386:	462a      	mov	r2, r5
 8018388:	f7ff f806 	bl	8017398 <disk_read>
 801838c:	bb98      	cbnz	r0, 80183f6 <get_fat.isra.8+0x23e>
			fs->winsect = sector;
 801838e:	46a8      	mov	r8, r5
 8018390:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8018392:	6335      	str	r5, [r6, #48]	; 0x30
 8018394:	e72a      	b.n	80181ec <get_fat.isra.8+0x34>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8018396:	78f3      	ldrb	r3, [r6, #3]
 8018398:	f106 0a34 	add.w	sl, r6, #52	; 0x34
 801839c:	7870      	ldrb	r0, [r6, #1]
 801839e:	b30b      	cbz	r3, 80183e4 <get_fat.isra.8+0x22c>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80183a0:	2301      	movs	r3, #1
 80183a2:	4642      	mov	r2, r8
 80183a4:	4651      	mov	r1, sl
 80183a6:	f7ff f805 	bl	80173b4 <disk_write>
 80183aa:	bb40      	cbnz	r0, 80183fe <get_fat.isra.8+0x246>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80183ac:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80183ae:	69f3      	ldr	r3, [r6, #28]
 80183b0:	eba8 0202 	sub.w	r2, r8, r2
			fs->wflag = 0;
 80183b4:	70f0      	strb	r0, [r6, #3]
 80183b6:	7870      	ldrb	r0, [r6, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80183b8:	429a      	cmp	r2, r3
 80183ba:	d213      	bcs.n	80183e4 <get_fat.isra.8+0x22c>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80183bc:	f896 b002 	ldrb.w	fp, [r6, #2]
 80183c0:	f1bb 0f01 	cmp.w	fp, #1
 80183c4:	d802      	bhi.n	80183cc <get_fat.isra.8+0x214>
 80183c6:	e00d      	b.n	80183e4 <get_fat.isra.8+0x22c>
 80183c8:	69f3      	ldr	r3, [r6, #28]
 80183ca:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 80183cc:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80183ce:	f10b 3bff 	add.w	fp, fp, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 80183d2:	2301      	movs	r3, #1
 80183d4:	4651      	mov	r1, sl
 80183d6:	4642      	mov	r2, r8
 80183d8:	f7fe ffec 	bl	80173b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80183dc:	f1bb 0f01 	cmp.w	fp, #1
 80183e0:	d1f2      	bne.n	80183c8 <get_fat.isra.8+0x210>
 80183e2:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80183e4:	4651      	mov	r1, sl
 80183e6:	2301      	movs	r3, #1
 80183e8:	464a      	mov	r2, r9
 80183ea:	f7fe ffd5 	bl	8017398 <disk_read>
 80183ee:	b910      	cbnz	r0, 80183f6 <get_fat.isra.8+0x23e>
			fs->winsect = sector;
 80183f0:	f8c6 9030 	str.w	r9, [r6, #48]	; 0x30
 80183f4:	e705      	b.n	8018202 <get_fat.isra.8+0x4a>
 80183f6:	f04f 30ff 	mov.w	r0, #4294967295
 80183fa:	6330      	str	r0, [r6, #48]	; 0x30
 80183fc:	e70f      	b.n	801821e <get_fat.isra.8+0x66>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80183fe:	f04f 30ff 	mov.w	r0, #4294967295
 8018402:	e70c      	b.n	801821e <get_fat.isra.8+0x66>

08018404 <create_chain>:
{
 8018404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018408:	b087      	sub	sp, #28
 801840a:	4682      	mov	sl, r0
	FATFS *fs = obj->fs;
 801840c:	f8d0 b000 	ldr.w	fp, [r0]
	if (clst == 0) {	/* Create a new chain */
 8018410:	9101      	str	r1, [sp, #4]
 8018412:	2900      	cmp	r1, #0
 8018414:	f040 8191 	bne.w	801873a <create_chain+0x336>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8018418:	f8db 8010 	ldr.w	r8, [fp, #16]
 801841c:	f8db 3018 	ldr.w	r3, [fp, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8018420:	f1b8 0f00 	cmp.w	r8, #0
 8018424:	d020      	beq.n	8018468 <create_chain+0x64>
 8018426:	4598      	cmp	r8, r3
 8018428:	bf28      	it	cs
 801842a:	f04f 0801 	movcs.w	r8, #1
 801842e:	4644      	mov	r4, r8
 8018430:	46d1      	mov	r9, sl
			ncl++;							/* Next cluster */
 8018432:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8018434:	429c      	cmp	r4, r3
 8018436:	d31a      	bcc.n	801846e <create_chain+0x6a>
				if (ncl > scl) return 0;	/* No free cluster */
 8018438:	f1b8 0f01 	cmp.w	r8, #1
 801843c:	f240 8178 	bls.w	8018730 <create_chain+0x32c>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8018440:	f8d9 5000 	ldr.w	r5, [r9]
				ncl = 2;
 8018444:	2402      	movs	r4, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8018446:	69ab      	ldr	r3, [r5, #24]
 8018448:	42a3      	cmp	r3, r4
 801844a:	d908      	bls.n	801845e <create_chain+0x5a>
		switch (fs->fs_type) {
 801844c:	782b      	ldrb	r3, [r5, #0]
 801844e:	2b02      	cmp	r3, #2
 8018450:	f000 8126 	beq.w	80186a0 <create_chain+0x29c>
 8018454:	2b03      	cmp	r3, #3
 8018456:	f000 80ac 	beq.w	80185b2 <create_chain+0x1ae>
 801845a:	2b01      	cmp	r3, #1
 801845c:	d00c      	beq.n	8018478 <create_chain+0x74>
			val = 1;	/* Internal error */
 801845e:	2401      	movs	r4, #1
}
 8018460:	4620      	mov	r0, r4
 8018462:	b007      	add	sp, #28
 8018464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8018468:	f04f 0801 	mov.w	r8, #1
 801846c:	e7df      	b.n	801842e <create_chain+0x2a>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801846e:	2c01      	cmp	r4, #1
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8018470:	f8d9 5000 	ldr.w	r5, [r9]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8018474:	d9f3      	bls.n	801845e <create_chain+0x5a>
 8018476:	e7e6      	b.n	8018446 <create_chain+0x42>
			bc = (UINT)clst; bc += bc / 2;
 8018478:	eb04 0654 	add.w	r6, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801847c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 801847e:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8018482:	eb02 2756 	add.w	r7, r2, r6, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8018486:	4557      	cmp	r7, sl
 8018488:	d036      	beq.n	80184f8 <create_chain+0xf4>
 801848a:	f105 0134 	add.w	r1, r5, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801848e:	78ea      	ldrb	r2, [r5, #3]
 8018490:	7868      	ldrb	r0, [r5, #1]
 8018492:	9102      	str	r1, [sp, #8]
 8018494:	b332      	cbz	r2, 80184e4 <create_chain+0xe0>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8018496:	4652      	mov	r2, sl
 8018498:	f7fe ff8c 	bl	80173b4 <disk_write>
 801849c:	2800      	cmp	r0, #0
 801849e:	f040 8160 	bne.w	8018762 <create_chain+0x35e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80184a2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80184a4:	69eb      	ldr	r3, [r5, #28]
 80184a6:	ebaa 0202 	sub.w	r2, sl, r2
			fs->wflag = 0;
 80184aa:	70e8      	strb	r0, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80184ac:	429a      	cmp	r2, r3
 80184ae:	d217      	bcs.n	80184e0 <create_chain+0xdc>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80184b0:	78aa      	ldrb	r2, [r5, #2]
 80184b2:	2a01      	cmp	r2, #1
 80184b4:	d914      	bls.n	80184e0 <create_chain+0xdc>
 80184b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80184ba:	4690      	mov	r8, r2
 80184bc:	9404      	str	r4, [sp, #16]
 80184be:	9c02      	ldr	r4, [sp, #8]
 80184c0:	e000      	b.n	80184c4 <create_chain+0xc0>
 80184c2:	69eb      	ldr	r3, [r5, #28]
					wsect += fs->fsize;
 80184c4:	449a      	add	sl, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80184c6:	f108 38ff 	add.w	r8, r8, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 80184ca:	2301      	movs	r3, #1
 80184cc:	4621      	mov	r1, r4
 80184ce:	4652      	mov	r2, sl
 80184d0:	7868      	ldrb	r0, [r5, #1]
 80184d2:	f7fe ff6f 	bl	80173b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80184d6:	f1b8 0f01 	cmp.w	r8, #1
 80184da:	d1f2      	bne.n	80184c2 <create_chain+0xbe>
 80184dc:	e9dd 8403 	ldrd	r8, r4, [sp, #12]
 80184e0:	7868      	ldrb	r0, [r5, #1]
 80184e2:	9902      	ldr	r1, [sp, #8]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80184e4:	2301      	movs	r3, #1
 80184e6:	463a      	mov	r2, r7
 80184e8:	f7fe ff56 	bl	8017398 <disk_read>
 80184ec:	2800      	cmp	r0, #0
 80184ee:	f040 810e 	bne.w	801870e <create_chain+0x30a>
			fs->winsect = sector;
 80184f2:	46ba      	mov	sl, r7
 80184f4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80184f6:	632f      	str	r7, [r5, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 80184f8:	f3c6 0308 	ubfx	r3, r6, #0, #9
 80184fc:	3601      	adds	r6, #1
 80184fe:	442b      	add	r3, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8018500:	eb02 2756 	add.w	r7, r2, r6, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 8018504:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8018508:	4557      	cmp	r7, sl
			wc = fs->win[bc++ % SS(fs)];
 801850a:	9302      	str	r3, [sp, #8]
	if (sector != fs->winsect) {	/* Window offset changed? */
 801850c:	d03a      	beq.n	8018584 <create_chain+0x180>
 801850e:	f105 0234 	add.w	r2, r5, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8018512:	78eb      	ldrb	r3, [r5, #3]
 8018514:	7868      	ldrb	r0, [r5, #1]
 8018516:	4611      	mov	r1, r2
 8018518:	9203      	str	r2, [sp, #12]
 801851a:	b34b      	cbz	r3, 8018570 <create_chain+0x16c>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801851c:	2301      	movs	r3, #1
 801851e:	4652      	mov	r2, sl
 8018520:	f7fe ff48 	bl	80173b4 <disk_write>
 8018524:	2800      	cmp	r0, #0
 8018526:	f040 811c 	bne.w	8018762 <create_chain+0x35e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801852a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801852c:	69eb      	ldr	r3, [r5, #28]
 801852e:	ebaa 0202 	sub.w	r2, sl, r2
			fs->wflag = 0;
 8018532:	70e8      	strb	r0, [r5, #3]
 8018534:	7868      	ldrb	r0, [r5, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8018536:	429a      	cmp	r2, r3
 8018538:	d21a      	bcs.n	8018570 <create_chain+0x16c>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801853a:	f895 c002 	ldrb.w	ip, [r5, #2]
 801853e:	4662      	mov	r2, ip
 8018540:	2a01      	cmp	r2, #1
 8018542:	d915      	bls.n	8018570 <create_chain+0x16c>
 8018544:	f8cd 8010 	str.w	r8, [sp, #16]
 8018548:	46e0      	mov	r8, ip
 801854a:	9405      	str	r4, [sp, #20]
 801854c:	9c03      	ldr	r4, [sp, #12]
 801854e:	e001      	b.n	8018554 <create_chain+0x150>
 8018550:	69eb      	ldr	r3, [r5, #28]
 8018552:	7868      	ldrb	r0, [r5, #1]
					wsect += fs->fsize;
 8018554:	449a      	add	sl, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8018556:	f108 38ff 	add.w	r8, r8, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 801855a:	2301      	movs	r3, #1
 801855c:	4621      	mov	r1, r4
 801855e:	4652      	mov	r2, sl
 8018560:	f7fe ff28 	bl	80173b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8018564:	f1b8 0f01 	cmp.w	r8, #1
 8018568:	d1f2      	bne.n	8018550 <create_chain+0x14c>
 801856a:	7868      	ldrb	r0, [r5, #1]
 801856c:	e9dd 8404 	ldrd	r8, r4, [sp, #16]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8018570:	9903      	ldr	r1, [sp, #12]
 8018572:	2301      	movs	r3, #1
 8018574:	463a      	mov	r2, r7
 8018576:	f7fe ff0f 	bl	8017398 <disk_read>
 801857a:	2800      	cmp	r0, #0
 801857c:	f040 80c7 	bne.w	801870e <create_chain+0x30a>
 8018580:	9b02      	ldr	r3, [sp, #8]
			fs->winsect = sector;
 8018582:	632f      	str	r7, [r5, #48]	; 0x30
			wc |= fs->win[bc % SS(fs)] << 8;
 8018584:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8018588:	4435      	add	r5, r6
 801858a:	f895 7034 	ldrb.w	r7, [r5, #52]	; 0x34
 801858e:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8018592:	07e3      	lsls	r3, r4, #31
 8018594:	bf4c      	ite	mi
 8018596:	093f      	lsrmi	r7, r7, #4
 8018598:	f3c7 070b 	ubfxpl	r7, r7, #0, #12
			if (cs == 0) break;				/* Found a free cluster */
 801859c:	2f00      	cmp	r7, #0
 801859e:	d051      	beq.n	8018644 <create_chain+0x240>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80185a0:	2f01      	cmp	r7, #1
 80185a2:	f000 80e4 	beq.w	801876e <create_chain+0x36a>
			if (ncl == scl) return 0;		/* No free cluster */
 80185a6:	45a0      	cmp	r8, r4
 80185a8:	f000 80c2 	beq.w	8018730 <create_chain+0x32c>
 80185ac:	f8db 3018 	ldr.w	r3, [fp, #24]
 80185b0:	e73f      	b.n	8018432 <create_chain+0x2e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80185b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80185b4:	f105 0634 	add.w	r6, r5, #52	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 80185b8:	6b2f      	ldr	r7, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80185ba:	eb03 1ad4 	add.w	sl, r3, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 80185be:	45ba      	cmp	sl, r7
 80185c0:	d031      	beq.n	8018626 <create_chain+0x222>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80185c2:	78eb      	ldrb	r3, [r5, #3]
 80185c4:	7868      	ldrb	r0, [r5, #1]
 80185c6:	b32b      	cbz	r3, 8018614 <create_chain+0x210>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80185c8:	2301      	movs	r3, #1
 80185ca:	463a      	mov	r2, r7
 80185cc:	4631      	mov	r1, r6
 80185ce:	f7fe fef1 	bl	80173b4 <disk_write>
 80185d2:	2800      	cmp	r0, #0
 80185d4:	f040 80c5 	bne.w	8018762 <create_chain+0x35e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80185d8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80185da:	69eb      	ldr	r3, [r5, #28]
 80185dc:	1aba      	subs	r2, r7, r2
			fs->wflag = 0;
 80185de:	70e8      	strb	r0, [r5, #3]
 80185e0:	7868      	ldrb	r0, [r5, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80185e2:	429a      	cmp	r2, r3
 80185e4:	d216      	bcs.n	8018614 <create_chain+0x210>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80185e6:	78aa      	ldrb	r2, [r5, #2]
 80185e8:	2a01      	cmp	r2, #1
 80185ea:	d913      	bls.n	8018614 <create_chain+0x210>
 80185ec:	f8cd 8008 	str.w	r8, [sp, #8]
 80185f0:	4690      	mov	r8, r2
 80185f2:	e001      	b.n	80185f8 <create_chain+0x1f4>
 80185f4:	69eb      	ldr	r3, [r5, #28]
 80185f6:	7868      	ldrb	r0, [r5, #1]
					wsect += fs->fsize;
 80185f8:	441f      	add	r7, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80185fa:	f108 38ff 	add.w	r8, r8, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 80185fe:	2301      	movs	r3, #1
 8018600:	4631      	mov	r1, r6
 8018602:	463a      	mov	r2, r7
 8018604:	f7fe fed6 	bl	80173b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8018608:	f1b8 0f01 	cmp.w	r8, #1
 801860c:	d1f2      	bne.n	80185f4 <create_chain+0x1f0>
 801860e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8018612:	7868      	ldrb	r0, [r5, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8018614:	2301      	movs	r3, #1
 8018616:	4652      	mov	r2, sl
 8018618:	4631      	mov	r1, r6
 801861a:	f7fe febd 	bl	8017398 <disk_read>
 801861e:	2800      	cmp	r0, #0
 8018620:	d175      	bne.n	801870e <create_chain+0x30a>
			fs->winsect = sector;
 8018622:	f8c5 a030 	str.w	sl, [r5, #48]	; 0x30
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8018626:	00a3      	lsls	r3, r4, #2
 8018628:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801862c:	18f2      	adds	r2, r6, r3
	rv = rv << 8 | ptr[0];
 801862e:	5cf7      	ldrb	r7, [r6, r3]
	rv = rv << 8 | ptr[2];
 8018630:	8851      	ldrh	r1, [r2, #2]
	rv = rv << 8 | ptr[1];
 8018632:	7853      	ldrb	r3, [r2, #1]
 8018634:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 8018638:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801863c:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
			if (cs == 0) break;				/* Found a free cluster */
 8018640:	2f00      	cmp	r7, #0
 8018642:	d1ad      	bne.n	80185a0 <create_chain+0x19c>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8018644:	f8db 3018 	ldr.w	r3, [fp, #24]
 8018648:	42a3      	cmp	r3, r4
 801864a:	f67f af08 	bls.w	801845e <create_chain+0x5a>
 801864e:	f04f 32ff 	mov.w	r2, #4294967295
 8018652:	4621      	mov	r1, r4
 8018654:	4658      	mov	r0, fp
 8018656:	f7fe fffd 	bl	8017654 <put_fat.part.7>
		if (res == FR_OK && clst != 0) {
 801865a:	b970      	cbnz	r0, 801867a <create_chain+0x276>
 801865c:	9a01      	ldr	r2, [sp, #4]
 801865e:	b162      	cbz	r2, 801867a <create_chain+0x276>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8018660:	2a01      	cmp	r2, #1
 8018662:	f67f aefc 	bls.w	801845e <create_chain+0x5a>
 8018666:	f8db 3018 	ldr.w	r3, [fp, #24]
 801866a:	429a      	cmp	r2, r3
 801866c:	f4bf aef7 	bcs.w	801845e <create_chain+0x5a>
 8018670:	4611      	mov	r1, r2
 8018672:	4658      	mov	r0, fp
 8018674:	4622      	mov	r2, r4
 8018676:	f7fe ffed 	bl	8017654 <put_fat.part.7>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801867a:	2800      	cmp	r0, #0
 801867c:	d16e      	bne.n	801875c <create_chain+0x358>
		fs->last_clst = ncl;
 801867e:	f8cb 4010 	str.w	r4, [fp, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8018682:	e9db 2305 	ldrd	r2, r3, [fp, #20]
 8018686:	3b02      	subs	r3, #2
 8018688:	429a      	cmp	r2, r3
 801868a:	d802      	bhi.n	8018692 <create_chain+0x28e>
 801868c:	3a01      	subs	r2, #1
 801868e:	f8cb 2014 	str.w	r2, [fp, #20]
		fs->fsi_flag |= 1;
 8018692:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8018696:	f043 0301 	orr.w	r3, r3, #1
 801869a:	f88b 3004 	strb.w	r3, [fp, #4]
 801869e:	e6df      	b.n	8018460 <create_chain+0x5c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80186a0:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 80186a2:	f105 0734 	add.w	r7, r5, #52	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 80186a6:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80186aa:	eb06 2614 	add.w	r6, r6, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 80186ae:	4556      	cmp	r6, sl
 80186b0:	d035      	beq.n	801871e <create_chain+0x31a>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80186b2:	78eb      	ldrb	r3, [r5, #3]
 80186b4:	7868      	ldrb	r0, [r5, #1]
 80186b6:	b323      	cbz	r3, 8018702 <create_chain+0x2fe>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80186b8:	2301      	movs	r3, #1
 80186ba:	4652      	mov	r2, sl
 80186bc:	4639      	mov	r1, r7
 80186be:	f7fe fe79 	bl	80173b4 <disk_write>
 80186c2:	2800      	cmp	r0, #0
 80186c4:	d14d      	bne.n	8018762 <create_chain+0x35e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80186c6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80186c8:	69eb      	ldr	r3, [r5, #28]
 80186ca:	ebaa 0202 	sub.w	r2, sl, r2
			fs->wflag = 0;
 80186ce:	70e8      	strb	r0, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80186d0:	429a      	cmp	r2, r3
 80186d2:	d215      	bcs.n	8018700 <create_chain+0x2fc>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80186d4:	78aa      	ldrb	r2, [r5, #2]
 80186d6:	2a01      	cmp	r2, #1
 80186d8:	d912      	bls.n	8018700 <create_chain+0x2fc>
 80186da:	f8cd 8008 	str.w	r8, [sp, #8]
 80186de:	4690      	mov	r8, r2
 80186e0:	e000      	b.n	80186e4 <create_chain+0x2e0>
 80186e2:	69eb      	ldr	r3, [r5, #28]
					wsect += fs->fsize;
 80186e4:	449a      	add	sl, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80186e6:	f108 38ff 	add.w	r8, r8, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 80186ea:	2301      	movs	r3, #1
 80186ec:	4639      	mov	r1, r7
 80186ee:	4652      	mov	r2, sl
 80186f0:	7868      	ldrb	r0, [r5, #1]
 80186f2:	f7fe fe5f 	bl	80173b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80186f6:	f1b8 0f01 	cmp.w	r8, #1
 80186fa:	d1f2      	bne.n	80186e2 <create_chain+0x2de>
 80186fc:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8018700:	7868      	ldrb	r0, [r5, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8018702:	2301      	movs	r3, #1
 8018704:	4632      	mov	r2, r6
 8018706:	4639      	mov	r1, r7
 8018708:	f7fe fe46 	bl	8017398 <disk_read>
 801870c:	b130      	cbz	r0, 801871c <create_chain+0x318>
			fs->winsect = sector;
 801870e:	f04f 34ff 	mov.w	r4, #4294967295
}
 8018712:	4620      	mov	r0, r4
			fs->winsect = sector;
 8018714:	632c      	str	r4, [r5, #48]	; 0x30
}
 8018716:	b007      	add	sp, #28
 8018718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 801871c:	632e      	str	r6, [r5, #48]	; 0x30
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801871e:	0063      	lsls	r3, r4, #1
 8018720:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8018724:	18fa      	adds	r2, r7, r3
	rv = rv << 8 | ptr[0];
 8018726:	5cff      	ldrb	r7, [r7, r3]
 8018728:	7853      	ldrb	r3, [r2, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801872a:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 801872e:	e735      	b.n	801859c <create_chain+0x198>
				if (ncl > scl) return 0;	/* No free cluster */
 8018730:	2400      	movs	r4, #0
}
 8018732:	4620      	mov	r0, r4
 8018734:	b007      	add	sp, #28
 8018736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801873a:	4658      	mov	r0, fp
 801873c:	f7ff fd3c 	bl	80181b8 <get_fat.isra.8>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8018740:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8018742:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8018744:	f67f ae8b 	bls.w	801845e <create_chain+0x5a>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8018748:	1c42      	adds	r2, r0, #1
 801874a:	d00a      	beq.n	8018762 <create_chain+0x35e>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801874c:	f8db 3018 	ldr.w	r3, [fp, #24]
 8018750:	4283      	cmp	r3, r0
 8018752:	f63f ae85 	bhi.w	8018460 <create_chain+0x5c>
 8018756:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801875a:	e668      	b.n	801842e <create_chain+0x2a>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801875c:	2801      	cmp	r0, #1
 801875e:	f47f ae7e 	bne.w	801845e <create_chain+0x5a>
 8018762:	f04f 34ff 	mov.w	r4, #4294967295
}
 8018766:	4620      	mov	r0, r4
 8018768:	b007      	add	sp, #28
 801876a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801876e:	463c      	mov	r4, r7
 8018770:	e676      	b.n	8018460 <create_chain+0x5c>
 8018772:	bf00      	nop

08018774 <dir_next.constprop.16>:
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
 8018774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8018776:	69c3      	ldr	r3, [r0, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8018778:	6944      	ldr	r4, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801877a:	b1b3      	cbz	r3, 80187aa <dir_next.constprop.16+0x36>
 801877c:	3420      	adds	r4, #32
 801877e:	f5b4 1f00 	cmp.w	r4, #2097152	; 0x200000
 8018782:	d212      	bcs.n	80187aa <dir_next.constprop.16+0x36>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8018784:	f3c4 0708 	ubfx	r7, r4, #0, #9
 8018788:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 801878a:	6806      	ldr	r6, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801878c:	b93f      	cbnz	r7, 801879e <dir_next.constprop.16+0x2a>
		dp->sect++;				/* Next sector */
 801878e:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
 8018790:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 8018792:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 8018794:	b959      	cbnz	r1, 80187ae <dir_next.constprop.16+0x3a>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8018796:	8933      	ldrh	r3, [r6, #8]
 8018798:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 801879c:	d921      	bls.n	80187e2 <dir_next.constprop.16+0x6e>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801879e:	3634      	adds	r6, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 80187a0:	616c      	str	r4, [r5, #20]
	return FR_OK;
 80187a2:	2000      	movs	r0, #0
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80187a4:	443e      	add	r6, r7
 80187a6:	622e      	str	r6, [r5, #32]
}
 80187a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80187aa:	2004      	movs	r0, #4
}
 80187ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80187ae:	8973      	ldrh	r3, [r6, #10]
 80187b0:	3b01      	subs	r3, #1
 80187b2:	ea13 2354 	ands.w	r3, r3, r4, lsr #9
 80187b6:	d1f2      	bne.n	801879e <dir_next.constprop.16+0x2a>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80187b8:	4630      	mov	r0, r6
 80187ba:	f7ff fcfd 	bl	80181b8 <get_fat.isra.8>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80187be:	2801      	cmp	r0, #1
 80187c0:	d915      	bls.n	80187ee <dir_next.constprop.16+0x7a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80187c2:	1c43      	adds	r3, r0, #1
 80187c4:	d011      	beq.n	80187ea <dir_next.constprop.16+0x76>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80187c6:	69b3      	ldr	r3, [r6, #24]
 80187c8:	4298      	cmp	r0, r3
 80187ca:	d20a      	bcs.n	80187e2 <dir_next.constprop.16+0x6e>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80187cc:	3b02      	subs	r3, #2
	clst -= 2;
 80187ce:	1e82      	subs	r2, r0, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 80187d0:	61a8      	str	r0, [r5, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80187d2:	429a      	cmp	r2, r3
 80187d4:	d20d      	bcs.n	80187f2 <dir_next.constprop.16+0x7e>
	return clst * fs->csize + fs->database;
 80187d6:	8973      	ldrh	r3, [r6, #10]
 80187d8:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 80187da:	fb02 1303 	mla	r3, r2, r3, r1
				dp->sect = clust2sect(fs, clst);
 80187de:	61eb      	str	r3, [r5, #28]
 80187e0:	e7dd      	b.n	801879e <dir_next.constprop.16+0x2a>
				dp->sect = 0; return FR_NO_FILE;
 80187e2:	2300      	movs	r3, #0
 80187e4:	2004      	movs	r0, #4
 80187e6:	61eb      	str	r3, [r5, #28]
}
 80187e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80187ea:	2001      	movs	r0, #1
}
 80187ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80187ee:	2002      	movs	r0, #2
}
 80187f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80187f2:	463b      	mov	r3, r7
 80187f4:	e7f3      	b.n	80187de <dir_next.constprop.16+0x6a>
 80187f6:	bf00      	nop

080187f8 <dir_read.constprop.11>:
FRESULT dir_read (
 80187f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while (dp->sect) {
 80187fc:	69c5      	ldr	r5, [r0, #28]
FRESULT dir_read (
 80187fe:	b083      	sub	sp, #12
 8018800:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8018802:	6806      	ldr	r6, [r0, #0]
	while (dp->sect) {
 8018804:	2d00      	cmp	r5, #0
 8018806:	d06d      	beq.n	80188e4 <dir_read.constprop.11+0xec>
	BYTE ord = 0xFF, sum = 0xFF;
 8018808:	23ff      	movs	r3, #255	; 0xff
 801880a:	f106 0a34 	add.w	sl, r6, #52	; 0x34
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801880e:	f8df b494 	ldr.w	fp, [pc, #1172]	; 8018ca4 <dir_read.constprop.11+0x4ac>
	BYTE ord = 0xFF, sum = 0xFF;
 8018812:	4699      	mov	r9, r3
 8018814:	9300      	str	r3, [sp, #0]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8018816:	6b37      	ldr	r7, [r6, #48]	; 0x30
 8018818:	42af      	cmp	r7, r5
 801881a:	d035      	beq.n	8018888 <dir_read.constprop.11+0x90>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801881c:	78f3      	ldrb	r3, [r6, #3]
 801881e:	7870      	ldrb	r0, [r6, #1]
 8018820:	b313      	cbz	r3, 8018868 <dir_read.constprop.11+0x70>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8018822:	2301      	movs	r3, #1
 8018824:	463a      	mov	r2, r7
 8018826:	4651      	mov	r1, sl
 8018828:	f7fe fdc4 	bl	80173b4 <disk_write>
 801882c:	2800      	cmp	r0, #0
 801882e:	f040 8116 	bne.w	8018a5e <dir_read.constprop.11+0x266>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8018832:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8018834:	69f3      	ldr	r3, [r6, #28]
 8018836:	1aba      	subs	r2, r7, r2
			fs->wflag = 0;
 8018838:	70f0      	strb	r0, [r6, #3]
 801883a:	7870      	ldrb	r0, [r6, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801883c:	429a      	cmp	r2, r3
 801883e:	d213      	bcs.n	8018868 <dir_read.constprop.11+0x70>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8018840:	f896 8002 	ldrb.w	r8, [r6, #2]
 8018844:	f1b8 0f01 	cmp.w	r8, #1
 8018848:	d802      	bhi.n	8018850 <dir_read.constprop.11+0x58>
 801884a:	e00d      	b.n	8018868 <dir_read.constprop.11+0x70>
 801884c:	69f3      	ldr	r3, [r6, #28]
 801884e:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 8018850:	441f      	add	r7, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8018852:	f108 38ff 	add.w	r8, r8, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8018856:	2301      	movs	r3, #1
 8018858:	4651      	mov	r1, sl
 801885a:	463a      	mov	r2, r7
 801885c:	f7fe fdaa 	bl	80173b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8018860:	f1b8 0f01 	cmp.w	r8, #1
 8018864:	d1f2      	bne.n	801884c <dir_read.constprop.11+0x54>
 8018866:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8018868:	2301      	movs	r3, #1
 801886a:	462a      	mov	r2, r5
 801886c:	4651      	mov	r1, sl
 801886e:	f7fe fd93 	bl	8017398 <disk_read>
 8018872:	b140      	cbz	r0, 8018886 <dir_read.constprop.11+0x8e>
			fs->winsect = sector;
 8018874:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 8018878:	2001      	movs	r0, #1
			fs->winsect = sector;
 801887a:	6333      	str	r3, [r6, #48]	; 0x30
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 801887c:	2300      	movs	r3, #0
 801887e:	61e3      	str	r3, [r4, #28]
}
 8018880:	b003      	add	sp, #12
 8018882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 8018886:	6335      	str	r5, [r6, #48]	; 0x30
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8018888:	6a22      	ldr	r2, [r4, #32]
 801888a:	7811      	ldrb	r1, [r2, #0]
		if (c == 0) {
 801888c:	b351      	cbz	r1, 80188e4 <dir_read.constprop.11+0xec>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801888e:	7ad3      	ldrb	r3, [r2, #11]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8018890:	29e5      	cmp	r1, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8018892:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018896:	71a3      	strb	r3, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8018898:	d005      	beq.n	80188a6 <dir_read.constprop.11+0xae>
 801889a:	292e      	cmp	r1, #46	; 0x2e
 801889c:	d003      	beq.n	80188a6 <dir_read.constprop.11+0xae>
 801889e:	f023 0020 	bic.w	r0, r3, #32
 80188a2:	2808      	cmp	r0, #8
 80188a4:	d125      	bne.n	80188f2 <dir_read.constprop.11+0xfa>
 80188a6:	6967      	ldr	r7, [r4, #20]
				ord = 0xFF;
 80188a8:	f04f 09ff 	mov.w	r9, #255	; 0xff
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80188ac:	3720      	adds	r7, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80188ae:	69e5      	ldr	r5, [r4, #28]
 80188b0:	455f      	cmp	r7, fp
 80188b2:	d817      	bhi.n	80188e4 <dir_read.constprop.11+0xec>
 80188b4:	b1b5      	cbz	r5, 80188e4 <dir_read.constprop.11+0xec>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80188b6:	f3c7 0208 	ubfx	r2, r7, #0, #9
	FATFS *fs = dp->obj.fs;
 80188ba:	6823      	ldr	r3, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80188bc:	b9a2      	cbnz	r2, 80188e8 <dir_read.constprop.11+0xf0>
		dp->sect++;				/* Next sector */
 80188be:	3501      	adds	r5, #1
		if (!dp->clust) {		/* Static table */
 80188c0:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 80188c2:	61e5      	str	r5, [r4, #28]
		if (!dp->clust) {		/* Static table */
 80188c4:	2900      	cmp	r1, #0
 80188c6:	f040 80bc 	bne.w	8018a42 <dir_read.constprop.11+0x24a>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80188ca:	891a      	ldrh	r2, [r3, #8]
 80188cc:	ebb2 1f57 	cmp.w	r2, r7, lsr #5
 80188d0:	d908      	bls.n	80188e4 <dir_read.constprop.11+0xec>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80188d2:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 80188d4:	6167      	str	r7, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80188d6:	6223      	str	r3, [r4, #32]
	while (dp->sect) {
 80188d8:	2d00      	cmp	r5, #0
 80188da:	d19c      	bne.n	8018816 <dir_read.constprop.11+0x1e>
				res = FR_DISK_ERR;
 80188dc:	2000      	movs	r0, #0
}
 80188de:	b003      	add	sp, #12
 80188e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				dp->sect = 0; return FR_NO_FILE;
 80188e4:	2004      	movs	r0, #4
 80188e6:	e7c9      	b.n	801887c <dir_read.constprop.11+0x84>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80188e8:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 80188ea:	6167      	str	r7, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80188ec:	441a      	add	r2, r3
 80188ee:	6222      	str	r2, [r4, #32]
 80188f0:	e791      	b.n	8018816 <dir_read.constprop.11+0x1e>
				if (a == AM_LFN) {			/* An LFN entry is found */
 80188f2:	2b0f      	cmp	r3, #15
 80188f4:	f040 80cd 	bne.w	8018a92 <dir_read.constprop.11+0x29a>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 80188f8:	0648      	lsls	r0, r1, #25
 80188fa:	6967      	ldr	r7, [r4, #20]
 80188fc:	f140 80b1 	bpl.w	8018a62 <dir_read.constprop.11+0x26a>
						sum = dp->dir[LDIR_Chksum];
 8018900:	7b53      	ldrb	r3, [r2, #13]
						c &= (BYTE)~LLEF; ord = c;
 8018902:	f001 09bf 	and.w	r9, r1, #191	; 0xbf
						dp->blk_ofs = dp->dptr;
 8018906:	6327      	str	r7, [r4, #48]	; 0x30
						sum = dp->dir[LDIR_Chksum];
 8018908:	9300      	str	r3, [sp, #0]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801890a:	7b53      	ldrb	r3, [r2, #13]
 801890c:	9900      	ldr	r1, [sp, #0]
 801890e:	428b      	cmp	r3, r1
 8018910:	d1ca      	bne.n	80188a8 <dir_read.constprop.11+0xb0>
	rv = rv << 8 | ptr[0];
 8018912:	7ed1      	ldrb	r1, [r2, #27]
 8018914:	7e93      	ldrb	r3, [r2, #26]
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8018916:	ea53 2301 	orrs.w	r3, r3, r1, lsl #8
 801891a:	d1c5      	bne.n	80188a8 <dir_read.constprop.11+0xb0>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 801891c:	7813      	ldrb	r3, [r2, #0]
	rv = rv << 8 | ptr[0];
 801891e:	7891      	ldrb	r1, [r2, #2]
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8018920:	f023 0340 	bic.w	r3, r3, #64	; 0x40
	rv = rv << 8 | ptr[0];
 8018924:	7850      	ldrb	r0, [r2, #1]
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8018926:	3b01      	subs	r3, #1
	rv = rv << 8 | ptr[0];
 8018928:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 801892c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8018930:	eb03 0381 	add.w	r3, r3, r1, lsl #2
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8018934:	2bfe      	cmp	r3, #254	; 0xfe
 8018936:	d8b7      	bhi.n	80188a8 <dir_read.constprop.11+0xb0>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8018938:	f8d6 c00c 	ldr.w	ip, [r6, #12]
			lfnbuf[i++] = wc = uc;			/* Store it */
 801893c:	1c59      	adds	r1, r3, #1
 801893e:	f82c 0013 	strh.w	r0, [ip, r3, lsl #1]
	rv = rv << 8 | ptr[0];
 8018942:	f892 e004 	ldrb.w	lr, [r2, #4]
 8018946:	78d5      	ldrb	r5, [r2, #3]
 8018948:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
		if (wc) {
 801894c:	2800      	cmp	r0, #0
 801894e:	f040 80af 	bne.w	8018ab0 <dir_read.constprop.11+0x2b8>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8018952:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018956:	429d      	cmp	r5, r3
 8018958:	d1a6      	bne.n	80188a8 <dir_read.constprop.11+0xb0>
	rv = rv << 8 | ptr[0];
 801895a:	7993      	ldrb	r3, [r2, #6]
 801895c:	f892 8005 	ldrb.w	r8, [r2, #5]
 8018960:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8018964:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018968:	4598      	cmp	r8, r3
 801896a:	d19d      	bne.n	80188a8 <dir_read.constprop.11+0xb0>
	rv = rv << 8 | ptr[0];
 801896c:	7a13      	ldrb	r3, [r2, #8]
 801896e:	f892 e007 	ldrb.w	lr, [r2, #7]
 8018972:	ea4e 2e03 	orr.w	lr, lr, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8018976:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801897a:	459e      	cmp	lr, r3
 801897c:	d194      	bne.n	80188a8 <dir_read.constprop.11+0xb0>
	rv = rv << 8 | ptr[0];
 801897e:	7a93      	ldrb	r3, [r2, #10]
 8018980:	7a55      	ldrb	r5, [r2, #9]
 8018982:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8018986:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801898a:	429d      	cmp	r5, r3
 801898c:	d18c      	bne.n	80188a8 <dir_read.constprop.11+0xb0>
	rv = rv << 8 | ptr[0];
 801898e:	7bd3      	ldrb	r3, [r2, #15]
 8018990:	f892 800e 	ldrb.w	r8, [r2, #14]
 8018994:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8018998:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801899c:	4598      	cmp	r8, r3
 801899e:	d183      	bne.n	80188a8 <dir_read.constprop.11+0xb0>
	rv = rv << 8 | ptr[0];
 80189a0:	7c53      	ldrb	r3, [r2, #17]
 80189a2:	f892 e010 	ldrb.w	lr, [r2, #16]
 80189a6:	ea4e 2e03 	orr.w	lr, lr, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80189aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80189ae:	459e      	cmp	lr, r3
 80189b0:	f47f af7a 	bne.w	80188a8 <dir_read.constprop.11+0xb0>
	rv = rv << 8 | ptr[0];
 80189b4:	7cd3      	ldrb	r3, [r2, #19]
 80189b6:	7c95      	ldrb	r5, [r2, #18]
 80189b8:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80189bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80189c0:	429d      	cmp	r5, r3
 80189c2:	f47f af71 	bne.w	80188a8 <dir_read.constprop.11+0xb0>
	rv = rv << 8 | ptr[0];
 80189c6:	7d53      	ldrb	r3, [r2, #21]
 80189c8:	f892 e014 	ldrb.w	lr, [r2, #20]
 80189cc:	ea4e 2e03 	orr.w	lr, lr, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80189d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80189d4:	459e      	cmp	lr, r3
 80189d6:	f47f af67 	bne.w	80188a8 <dir_read.constprop.11+0xb0>
	rv = rv << 8 | ptr[0];
 80189da:	7dd3      	ldrb	r3, [r2, #23]
 80189dc:	7d95      	ldrb	r5, [r2, #22]
 80189de:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80189e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80189e6:	429d      	cmp	r5, r3
 80189e8:	f47f af5e 	bne.w	80188a8 <dir_read.constprop.11+0xb0>
	rv = rv << 8 | ptr[0];
 80189ec:	7e53      	ldrb	r3, [r2, #25]
 80189ee:	f892 e018 	ldrb.w	lr, [r2, #24]
 80189f2:	ea4e 2e03 	orr.w	lr, lr, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80189f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80189fa:	459e      	cmp	lr, r3
 80189fc:	f47f af54 	bne.w	80188a8 <dir_read.constprop.11+0xb0>
	rv = rv << 8 | ptr[0];
 8018a00:	7f53      	ldrb	r3, [r2, #29]
 8018a02:	7f15      	ldrb	r5, [r2, #28]
 8018a04:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8018a08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018a0c:	429d      	cmp	r5, r3
 8018a0e:	f47f af4b 	bne.w	80188a8 <dir_read.constprop.11+0xb0>
	rv = rv << 8 | ptr[0];
 8018a12:	7fd3      	ldrb	r3, [r2, #31]
 8018a14:	f892 e01e 	ldrb.w	lr, [r2, #30]
 8018a18:	ea4e 2e03 	orr.w	lr, lr, r3, lsl #8
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8018a1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018a20:	459e      	cmp	lr, r3
 8018a22:	f47f af41 	bne.w	80188a8 <dir_read.constprop.11+0xb0>
	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8018a26:	7813      	ldrb	r3, [r2, #0]
 8018a28:	065a      	lsls	r2, r3, #25
 8018a2a:	d505      	bpl.n	8018a38 <dir_read.constprop.11+0x240>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8018a2c:	29ff      	cmp	r1, #255	; 0xff
 8018a2e:	f000 8137 	beq.w	8018ca0 <dir_read.constprop.11+0x4a8>
		lfnbuf[i] = 0;
 8018a32:	2300      	movs	r3, #0
 8018a34:	f82c 3011 	strh.w	r3, [ip, r1, lsl #1]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8018a38:	f109 39ff 	add.w	r9, r9, #4294967295
 8018a3c:	fa5f f989 	uxtb.w	r9, r9
 8018a40:	e734      	b.n	80188ac <dir_read.constprop.11+0xb4>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8018a42:	895a      	ldrh	r2, [r3, #10]
 8018a44:	3a01      	subs	r2, #1
 8018a46:	ea12 2857 	ands.w	r8, r2, r7, lsr #9
 8018a4a:	f47f af42 	bne.w	80188d2 <dir_read.constprop.11+0xda>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8018a4e:	4618      	mov	r0, r3
 8018a50:	9301      	str	r3, [sp, #4]
 8018a52:	f7ff fbb1 	bl	80181b8 <get_fat.isra.8>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8018a56:	2801      	cmp	r0, #1
 8018a58:	d919      	bls.n	8018a8e <dir_read.constprop.11+0x296>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8018a5a:	1c43      	adds	r3, r0, #1
 8018a5c:	d105      	bne.n	8018a6a <dir_read.constprop.11+0x272>
				dp->sect = 0; return FR_NO_FILE;
 8018a5e:	2001      	movs	r0, #1
 8018a60:	e70c      	b.n	801887c <dir_read.constprop.11+0x84>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8018a62:	4549      	cmp	r1, r9
 8018a64:	f47f af20 	bne.w	80188a8 <dir_read.constprop.11+0xb0>
 8018a68:	e74f      	b.n	801890a <dir_read.constprop.11+0x112>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8018a6a:	9b01      	ldr	r3, [sp, #4]
 8018a6c:	699a      	ldr	r2, [r3, #24]
 8018a6e:	4290      	cmp	r0, r2
 8018a70:	f4bf af38 	bcs.w	80188e4 <dir_read.constprop.11+0xec>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8018a74:	3a02      	subs	r2, #2
	clst -= 2;
 8018a76:	1e81      	subs	r1, r0, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 8018a78:	61a0      	str	r0, [r4, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8018a7a:	4291      	cmp	r1, r2
 8018a7c:	d312      	bcc.n	8018aa4 <dir_read.constprop.11+0x2ac>
 8018a7e:	463a      	mov	r2, r7
 8018a80:	461f      	mov	r7, r3
				dp->sect = clust2sect(fs, clst);
 8018a82:	f8c4 801c 	str.w	r8, [r4, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8018a86:	3734      	adds	r7, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 8018a88:	6162      	str	r2, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8018a8a:	6227      	str	r7, [r4, #32]
 8018a8c:	e726      	b.n	80188dc <dir_read.constprop.11+0xe4>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8018a8e:	2002      	movs	r0, #2
 8018a90:	e6f4      	b.n	801887c <dir_read.constprop.11+0x84>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8018a92:	f1b9 0f00 	cmp.w	r9, #0
 8018a96:	f000 80b8 	beq.w	8018c0a <dir_read.constprop.11+0x412>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8018a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8018a9e:	2000      	movs	r0, #0
 8018aa0:	6323      	str	r3, [r4, #48]	; 0x30
 8018aa2:	e6ed      	b.n	8018880 <dir_read.constprop.11+0x88>
	return clst * fs->csize + fs->database;
 8018aa4:	895d      	ldrh	r5, [r3, #10]
 8018aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018aa8:	fb01 2505 	mla	r5, r1, r5, r2
				dp->sect = clust2sect(fs, clst);
 8018aac:	61e5      	str	r5, [r4, #28]
 8018aae:	e710      	b.n	80188d2 <dir_read.constprop.11+0xda>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8018ab0:	29ff      	cmp	r1, #255	; 0xff
 8018ab2:	f000 80f5 	beq.w	8018ca0 <dir_read.constprop.11+0x4a8>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8018ab6:	f82c 5011 	strh.w	r5, [ip, r1, lsl #1]
 8018aba:	0048      	lsls	r0, r1, #1
	rv = rv << 8 | ptr[0];
 8018abc:	f892 e006 	ldrb.w	lr, [r2, #6]
			lfnbuf[i++] = wc = uc;			/* Store it */
 8018ac0:	1c99      	adds	r1, r3, #2
	rv = rv << 8 | ptr[0];
 8018ac2:	f892 8005 	ldrb.w	r8, [r2, #5]
 8018ac6:	ea48 280e 	orr.w	r8, r8, lr, lsl #8
		if (wc) {
 8018aca:	2d00      	cmp	r5, #0
 8018acc:	f43f af4a 	beq.w	8018964 <dir_read.constprop.11+0x16c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8018ad0:	29ff      	cmp	r1, #255	; 0xff
 8018ad2:	f000 80e5 	beq.w	8018ca0 <dir_read.constprop.11+0x4a8>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8018ad6:	4460      	add	r0, ip
 8018ad8:	1cd9      	adds	r1, r3, #3
 8018ada:	f8a0 8002 	strh.w	r8, [r0, #2]
	rv = rv << 8 | ptr[0];
 8018ade:	7a15      	ldrb	r5, [r2, #8]
 8018ae0:	f892 e007 	ldrb.w	lr, [r2, #7]
 8018ae4:	ea4e 2e05 	orr.w	lr, lr, r5, lsl #8
		if (wc) {
 8018ae8:	f1b8 0f00 	cmp.w	r8, #0
 8018aec:	f43f af43 	beq.w	8018976 <dir_read.constprop.11+0x17e>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8018af0:	29ff      	cmp	r1, #255	; 0xff
 8018af2:	f000 80d5 	beq.w	8018ca0 <dir_read.constprop.11+0x4a8>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8018af6:	f8a0 e004 	strh.w	lr, [r0, #4]
 8018afa:	1d19      	adds	r1, r3, #4
	rv = rv << 8 | ptr[0];
 8018afc:	f892 800a 	ldrb.w	r8, [r2, #10]
 8018b00:	7a55      	ldrb	r5, [r2, #9]
 8018b02:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
		if (wc) {
 8018b06:	f1be 0f00 	cmp.w	lr, #0
 8018b0a:	f43f af3c 	beq.w	8018986 <dir_read.constprop.11+0x18e>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8018b0e:	29ff      	cmp	r1, #255	; 0xff
 8018b10:	f000 80c6 	beq.w	8018ca0 <dir_read.constprop.11+0x4a8>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8018b14:	80c5      	strh	r5, [r0, #6]
 8018b16:	1d59      	adds	r1, r3, #5
	rv = rv << 8 | ptr[0];
 8018b18:	f892 e00f 	ldrb.w	lr, [r2, #15]
 8018b1c:	f892 800e 	ldrb.w	r8, [r2, #14]
 8018b20:	ea48 280e 	orr.w	r8, r8, lr, lsl #8
		if (wc) {
 8018b24:	2d00      	cmp	r5, #0
 8018b26:	f43f af37 	beq.w	8018998 <dir_read.constprop.11+0x1a0>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8018b2a:	29ff      	cmp	r1, #255	; 0xff
 8018b2c:	f000 80b8 	beq.w	8018ca0 <dir_read.constprop.11+0x4a8>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8018b30:	f8a0 8008 	strh.w	r8, [r0, #8]
 8018b34:	1d99      	adds	r1, r3, #6
	rv = rv << 8 | ptr[0];
 8018b36:	7c55      	ldrb	r5, [r2, #17]
 8018b38:	f892 e010 	ldrb.w	lr, [r2, #16]
 8018b3c:	ea4e 2e05 	orr.w	lr, lr, r5, lsl #8
		if (wc) {
 8018b40:	f1b8 0f00 	cmp.w	r8, #0
 8018b44:	f43f af31 	beq.w	80189aa <dir_read.constprop.11+0x1b2>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8018b48:	29ff      	cmp	r1, #255	; 0xff
 8018b4a:	f000 80a9 	beq.w	8018ca0 <dir_read.constprop.11+0x4a8>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8018b4e:	f8a0 e00a 	strh.w	lr, [r0, #10]
 8018b52:	1dd9      	adds	r1, r3, #7
	rv = rv << 8 | ptr[0];
 8018b54:	f892 8013 	ldrb.w	r8, [r2, #19]
 8018b58:	7c95      	ldrb	r5, [r2, #18]
 8018b5a:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
		if (wc) {
 8018b5e:	f1be 0f00 	cmp.w	lr, #0
 8018b62:	f43f af2b 	beq.w	80189bc <dir_read.constprop.11+0x1c4>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8018b66:	29ff      	cmp	r1, #255	; 0xff
 8018b68:	f000 809a 	beq.w	8018ca0 <dir_read.constprop.11+0x4a8>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8018b6c:	8185      	strh	r5, [r0, #12]
 8018b6e:	f103 0108 	add.w	r1, r3, #8
	rv = rv << 8 | ptr[0];
 8018b72:	f892 8015 	ldrb.w	r8, [r2, #21]
 8018b76:	f892 e014 	ldrb.w	lr, [r2, #20]
 8018b7a:	ea4e 2e08 	orr.w	lr, lr, r8, lsl #8
		if (wc) {
 8018b7e:	2d00      	cmp	r5, #0
 8018b80:	f43f af26 	beq.w	80189d0 <dir_read.constprop.11+0x1d8>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8018b84:	29ff      	cmp	r1, #255	; 0xff
 8018b86:	f000 808b 	beq.w	8018ca0 <dir_read.constprop.11+0x4a8>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8018b8a:	f8a0 e00e 	strh.w	lr, [r0, #14]
 8018b8e:	f103 0109 	add.w	r1, r3, #9
	rv = rv << 8 | ptr[0];
 8018b92:	f892 8017 	ldrb.w	r8, [r2, #23]
 8018b96:	7d95      	ldrb	r5, [r2, #22]
 8018b98:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
		if (wc) {
 8018b9c:	f1be 0f00 	cmp.w	lr, #0
 8018ba0:	f43f af1f 	beq.w	80189e2 <dir_read.constprop.11+0x1ea>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8018ba4:	29ff      	cmp	r1, #255	; 0xff
 8018ba6:	f43f ae7f 	beq.w	80188a8 <dir_read.constprop.11+0xb0>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8018baa:	8205      	strh	r5, [r0, #16]
 8018bac:	f103 010a 	add.w	r1, r3, #10
	rv = rv << 8 | ptr[0];
 8018bb0:	f892 8019 	ldrb.w	r8, [r2, #25]
 8018bb4:	f892 e018 	ldrb.w	lr, [r2, #24]
 8018bb8:	ea4e 2e08 	orr.w	lr, lr, r8, lsl #8
		if (wc) {
 8018bbc:	2d00      	cmp	r5, #0
 8018bbe:	f43f af1a 	beq.w	80189f6 <dir_read.constprop.11+0x1fe>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8018bc2:	29ff      	cmp	r1, #255	; 0xff
 8018bc4:	d06c      	beq.n	8018ca0 <dir_read.constprop.11+0x4a8>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8018bc6:	f8a0 e012 	strh.w	lr, [r0, #18]
 8018bca:	f103 010b 	add.w	r1, r3, #11
	rv = rv << 8 | ptr[0];
 8018bce:	f892 801d 	ldrb.w	r8, [r2, #29]
 8018bd2:	7f15      	ldrb	r5, [r2, #28]
 8018bd4:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
		if (wc) {
 8018bd8:	f1be 0f00 	cmp.w	lr, #0
 8018bdc:	f43f af14 	beq.w	8018a08 <dir_read.constprop.11+0x210>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8018be0:	29ff      	cmp	r1, #255	; 0xff
 8018be2:	d05d      	beq.n	8018ca0 <dir_read.constprop.11+0x4a8>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8018be4:	8285      	strh	r5, [r0, #20]
 8018be6:	f103 010c 	add.w	r1, r3, #12
	rv = rv << 8 | ptr[0];
 8018bea:	f892 801f 	ldrb.w	r8, [r2, #31]
 8018bee:	f892 e01e 	ldrb.w	lr, [r2, #30]
 8018bf2:	ea4e 2e08 	orr.w	lr, lr, r8, lsl #8
		if (wc) {
 8018bf6:	2d00      	cmp	r5, #0
 8018bf8:	f43f af10 	beq.w	8018a1c <dir_read.constprop.11+0x224>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8018bfc:	29ff      	cmp	r1, #255	; 0xff
 8018bfe:	d04f      	beq.n	8018ca0 <dir_read.constprop.11+0x4a8>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8018c00:	f103 010d 	add.w	r1, r3, #13
 8018c04:	f8a0 e016 	strh.w	lr, [r0, #22]
 8018c08:	e70d      	b.n	8018a26 <dir_read.constprop.11+0x22e>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8018c0a:	7811      	ldrb	r1, [r2, #0]
 8018c0c:	7856      	ldrb	r6, [r2, #1]
 8018c0e:	01cb      	lsls	r3, r1, #7
 8018c10:	7895      	ldrb	r5, [r2, #2]
 8018c12:	78d0      	ldrb	r0, [r2, #3]
 8018c14:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
 8018c18:	1999      	adds	r1, r3, r6
 8018c1a:	7916      	ldrb	r6, [r2, #4]
 8018c1c:	f3c1 0346 	ubfx	r3, r1, #1, #7
 8018c20:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 8018c24:	fa55 f183 	uxtab	r1, r5, r3
 8018c28:	7955      	ldrb	r5, [r2, #5]
 8018c2a:	f3c1 0346 	ubfx	r3, r1, #1, #7
 8018c2e:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 8018c32:	fa50 f183 	uxtab	r1, r0, r3
 8018c36:	7990      	ldrb	r0, [r2, #6]
 8018c38:	f3c1 0346 	ubfx	r3, r1, #1, #7
 8018c3c:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 8018c40:	fa56 f183 	uxtab	r1, r6, r3
 8018c44:	79d6      	ldrb	r6, [r2, #7]
 8018c46:	f3c1 0346 	ubfx	r3, r1, #1, #7
 8018c4a:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 8018c4e:	fa55 f183 	uxtab	r1, r5, r3
 8018c52:	7a15      	ldrb	r5, [r2, #8]
 8018c54:	f3c1 0346 	ubfx	r3, r1, #1, #7
 8018c58:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 8018c5c:	fa50 f183 	uxtab	r1, r0, r3
 8018c60:	7a50      	ldrb	r0, [r2, #9]
 8018c62:	f3c1 0346 	ubfx	r3, r1, #1, #7
 8018c66:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 8018c6a:	7a91      	ldrb	r1, [r2, #10]
 8018c6c:	fa56 f283 	uxtab	r2, r6, r3
 8018c70:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8018c74:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8018c78:	fa55 f283 	uxtab	r2, r5, r3
 8018c7c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8018c80:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8018c84:	fa50 f283 	uxtab	r2, r0, r3
 8018c88:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8018c8c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8018c90:	9a00      	ldr	r2, [sp, #0]
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8018c92:	fa51 f383 	uxtab	r3, r1, r3
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8018c96:	b2db      	uxtb	r3, r3
 8018c98:	4293      	cmp	r3, r2
 8018c9a:	f47f aefe 	bne.w	8018a9a <dir_read.constprop.11+0x2a2>
 8018c9e:	e61d      	b.n	80188dc <dir_read.constprop.11+0xe4>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8018ca0:	4689      	mov	r9, r1
 8018ca2:	e603      	b.n	80188ac <dir_read.constprop.11+0xb4>
 8018ca4:	001fffff 	.word	0x001fffff

08018ca8 <dir_find>:
{
 8018ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8018cac:	2100      	movs	r1, #0
{
 8018cae:	b087      	sub	sp, #28
 8018cb0:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8018cb2:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8018cb4:	f7ff f8e8 	bl	8017e88 <dir_sdi>
	if (res != FR_OK) return res;
 8018cb8:	4683      	mov	fp, r0
 8018cba:	2800      	cmp	r0, #0
 8018cbc:	d13d      	bne.n	8018d3a <dir_find+0x92>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8018cbe:	23ff      	movs	r3, #255	; 0xff
 8018cc0:	69e7      	ldr	r7, [r4, #28]
 8018cc2:	461d      	mov	r5, r3
 8018cc4:	9301      	str	r3, [sp, #4]
 8018cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8018cca:	46a8      	mov	r8, r5
 8018ccc:	6323      	str	r3, [r4, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 8018cce:	6b35      	ldr	r5, [r6, #48]	; 0x30
 8018cd0:	42af      	cmp	r7, r5
 8018cd2:	d037      	beq.n	8018d44 <dir_find+0x9c>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8018cd4:	78f3      	ldrb	r3, [r6, #3]
 8018cd6:	f106 0934 	add.w	r9, r6, #52	; 0x34
 8018cda:	7870      	ldrb	r0, [r6, #1]
 8018cdc:	b313      	cbz	r3, 8018d24 <dir_find+0x7c>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8018cde:	2301      	movs	r3, #1
 8018ce0:	462a      	mov	r2, r5
 8018ce2:	4649      	mov	r1, r9
 8018ce4:	f7fe fb66 	bl	80173b4 <disk_write>
 8018ce8:	2800      	cmp	r0, #0
 8018cea:	f040 80bf 	bne.w	8018e6c <dir_find+0x1c4>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8018cee:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8018cf0:	69f3      	ldr	r3, [r6, #28]
 8018cf2:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
 8018cf4:	70f0      	strb	r0, [r6, #3]
 8018cf6:	7870      	ldrb	r0, [r6, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8018cf8:	429a      	cmp	r2, r3
 8018cfa:	d213      	bcs.n	8018d24 <dir_find+0x7c>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8018cfc:	f896 a002 	ldrb.w	sl, [r6, #2]
 8018d00:	f1ba 0f01 	cmp.w	sl, #1
 8018d04:	d802      	bhi.n	8018d0c <dir_find+0x64>
 8018d06:	e00d      	b.n	8018d24 <dir_find+0x7c>
 8018d08:	69f3      	ldr	r3, [r6, #28]
 8018d0a:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 8018d0c:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8018d0e:	f10a 3aff 	add.w	sl, sl, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 8018d12:	2301      	movs	r3, #1
 8018d14:	4649      	mov	r1, r9
 8018d16:	462a      	mov	r2, r5
 8018d18:	f7fe fb4c 	bl	80173b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8018d1c:	f1ba 0f01 	cmp.w	sl, #1
 8018d20:	d1f2      	bne.n	8018d08 <dir_find+0x60>
 8018d22:	7870      	ldrb	r0, [r6, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8018d24:	4649      	mov	r1, r9
 8018d26:	2301      	movs	r3, #1
 8018d28:	463a      	mov	r2, r7
 8018d2a:	f7fe fb35 	bl	8017398 <disk_read>
 8018d2e:	b140      	cbz	r0, 8018d42 <dir_find+0x9a>
			fs->winsect = sector;
 8018d30:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 8018d34:	f04f 0b01 	mov.w	fp, #1
			fs->winsect = sector;
 8018d38:	6333      	str	r3, [r6, #48]	; 0x30
}
 8018d3a:	4658      	mov	r0, fp
 8018d3c:	b007      	add	sp, #28
 8018d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 8018d42:	6337      	str	r7, [r6, #48]	; 0x30
		c = dp->dir[DIR_Name];
 8018d44:	6a27      	ldr	r7, [r4, #32]
 8018d46:	783d      	ldrb	r5, [r7, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8018d48:	b345      	cbz	r5, 8018d9c <dir_find+0xf4>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8018d4a:	7afa      	ldrb	r2, [r7, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8018d4c:	2de5      	cmp	r5, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8018d4e:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8018d52:	71a3      	strb	r3, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8018d54:	d003      	beq.n	8018d5e <dir_find+0xb6>
 8018d56:	0712      	lsls	r2, r2, #28
 8018d58:	d526      	bpl.n	8018da8 <dir_find+0x100>
 8018d5a:	2b0f      	cmp	r3, #15
 8018d5c:	d065      	beq.n	8018e2a <dir_find+0x182>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8018d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8018d62:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8018d66:	6323      	str	r3, [r4, #48]	; 0x30
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8018d68:	6965      	ldr	r5, [r4, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8018d6a:	4ba2      	ldr	r3, [pc, #648]	; (8018ff4 <dir_find+0x34c>)
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8018d6c:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8018d6e:	69e7      	ldr	r7, [r4, #28]
 8018d70:	429d      	cmp	r5, r3
 8018d72:	d813      	bhi.n	8018d9c <dir_find+0xf4>
 8018d74:	b197      	cbz	r7, 8018d9c <dir_find+0xf4>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8018d76:	f3c5 0208 	ubfx	r2, r5, #0, #9
	FATFS *fs = dp->obj.fs;
 8018d7a:	6823      	ldr	r3, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8018d7c:	b94a      	cbnz	r2, 8018d92 <dir_find+0xea>
		dp->sect++;				/* Next sector */
 8018d7e:	3701      	adds	r7, #1
		if (!dp->clust) {		/* Static table */
 8018d80:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 8018d82:	61e7      	str	r7, [r4, #28]
		if (!dp->clust) {		/* Static table */
 8018d84:	2900      	cmp	r1, #0
 8018d86:	d163      	bne.n	8018e50 <dir_find+0x1a8>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8018d88:	8919      	ldrh	r1, [r3, #8]
 8018d8a:	ebb1 1f55 	cmp.w	r1, r5, lsr #5
 8018d8e:	f240 80bc 	bls.w	8018f0a <dir_find+0x262>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8018d92:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 8018d94:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8018d96:	4413      	add	r3, r2
 8018d98:	6223      	str	r3, [r4, #32]
 8018d9a:	e798      	b.n	8018cce <dir_find+0x26>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8018d9c:	f04f 0b04 	mov.w	fp, #4
}
 8018da0:	4658      	mov	r0, fp
 8018da2:	b007      	add	sp, #28
 8018da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (a == AM_LFN) {			/* An LFN entry is found */
 8018da8:	2b0f      	cmp	r3, #15
 8018daa:	d03e      	beq.n	8018e2a <dir_find+0x182>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8018dac:	f1b8 0f00 	cmp.w	r8, #0
 8018db0:	d05f      	beq.n	8018e72 <dir_find+0x1ca>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8018db2:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8018db6:	07da      	lsls	r2, r3, #31
 8018db8:	d4d1      	bmi.n	8018d5e <dir_find+0xb6>
	} while (--cnt && r == 0);
 8018dba:	783a      	ldrb	r2, [r7, #0]
 8018dbc:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8018dc0:	429a      	cmp	r2, r3
 8018dc2:	d1cc      	bne.n	8018d5e <dir_find+0xb6>
 8018dc4:	787a      	ldrb	r2, [r7, #1]
 8018dc6:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8018dca:	429a      	cmp	r2, r3
 8018dcc:	d1c7      	bne.n	8018d5e <dir_find+0xb6>
 8018dce:	78ba      	ldrb	r2, [r7, #2]
 8018dd0:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8018dd4:	429a      	cmp	r2, r3
 8018dd6:	d1c2      	bne.n	8018d5e <dir_find+0xb6>
 8018dd8:	78fa      	ldrb	r2, [r7, #3]
 8018dda:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 8018dde:	429a      	cmp	r2, r3
 8018de0:	d1bd      	bne.n	8018d5e <dir_find+0xb6>
 8018de2:	793a      	ldrb	r2, [r7, #4]
 8018de4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8018de8:	429a      	cmp	r2, r3
 8018dea:	d1b8      	bne.n	8018d5e <dir_find+0xb6>
 8018dec:	797a      	ldrb	r2, [r7, #5]
 8018dee:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8018df2:	429a      	cmp	r2, r3
 8018df4:	d1b3      	bne.n	8018d5e <dir_find+0xb6>
 8018df6:	79ba      	ldrb	r2, [r7, #6]
 8018df8:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8018dfc:	429a      	cmp	r2, r3
 8018dfe:	d1ae      	bne.n	8018d5e <dir_find+0xb6>
 8018e00:	79fa      	ldrb	r2, [r7, #7]
 8018e02:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8018e06:	429a      	cmp	r2, r3
 8018e08:	d1a9      	bne.n	8018d5e <dir_find+0xb6>
 8018e0a:	7a3a      	ldrb	r2, [r7, #8]
 8018e0c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8018e10:	429a      	cmp	r2, r3
 8018e12:	d1a4      	bne.n	8018d5e <dir_find+0xb6>
 8018e14:	7a7a      	ldrb	r2, [r7, #9]
 8018e16:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8018e1a:	429a      	cmp	r2, r3
 8018e1c:	d19f      	bne.n	8018d5e <dir_find+0xb6>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8018e1e:	7aba      	ldrb	r2, [r7, #10]
 8018e20:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8018e24:	429a      	cmp	r2, r3
 8018e26:	d19a      	bne.n	8018d5e <dir_find+0xb6>
 8018e28:	e787      	b.n	8018d3a <dir_find+0x92>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8018e2a:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8018e2e:	065b      	lsls	r3, r3, #25
 8018e30:	d49a      	bmi.n	8018d68 <dir_find+0xc0>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8018e32:	0668      	lsls	r0, r5, #25
 8018e34:	d56e      	bpl.n	8018f14 <dir_find+0x26c>
						sum = dp->dir[LDIR_Chksum];
 8018e36:	7b7a      	ldrb	r2, [r7, #13]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8018e38:	f005 05bf 	and.w	r5, r5, #191	; 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8018e3c:	6963      	ldr	r3, [r4, #20]
						sum = dp->dir[LDIR_Chksum];
 8018e3e:	9201      	str	r2, [sp, #4]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8018e40:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8018e42:	7b7b      	ldrb	r3, [r7, #13]
 8018e44:	9a01      	ldr	r2, [sp, #4]
 8018e46:	4293      	cmp	r3, r2
 8018e48:	d07e      	beq.n	8018f48 <dir_find+0x2a0>
 8018e4a:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8018e4e:	e78b      	b.n	8018d68 <dir_find+0xc0>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8018e50:	8958      	ldrh	r0, [r3, #10]
 8018e52:	3801      	subs	r0, #1
 8018e54:	ea10 2055 	ands.w	r0, r0, r5, lsr #9
 8018e58:	d19b      	bne.n	8018d92 <dir_find+0xea>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8018e5a:	4618      	mov	r0, r3
 8018e5c:	9203      	str	r2, [sp, #12]
 8018e5e:	9302      	str	r3, [sp, #8]
 8018e60:	f7ff f9aa 	bl	80181b8 <get_fat.isra.8>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8018e64:	2801      	cmp	r0, #1
 8018e66:	d96a      	bls.n	8018f3e <dir_find+0x296>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8018e68:	1c43      	adds	r3, r0, #1
 8018e6a:	d158      	bne.n	8018f1e <dir_find+0x276>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8018e6c:	f04f 0b01 	mov.w	fp, #1
 8018e70:	e763      	b.n	8018d3a <dir_find+0x92>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8018e72:	783b      	ldrb	r3, [r7, #0]
 8018e74:	787a      	ldrb	r2, [r7, #1]
 8018e76:	01d9      	lsls	r1, r3, #7
 8018e78:	78b8      	ldrb	r0, [r7, #2]
 8018e7a:	f897 c004 	ldrb.w	ip, [r7, #4]
 8018e7e:	ea41 0153 	orr.w	r1, r1, r3, lsr #1
 8018e82:	78fb      	ldrb	r3, [r7, #3]
 8018e84:	79bd      	ldrb	r5, [r7, #6]
 8018e86:	4411      	add	r1, r2
 8018e88:	f3c1 0246 	ubfx	r2, r1, #1, #7
 8018e8c:	ea42 11c1 	orr.w	r1, r2, r1, lsl #7
 8018e90:	fa50 f281 	uxtab	r2, r0, r1
 8018e94:	7978      	ldrb	r0, [r7, #5]
 8018e96:	f3c2 0146 	ubfx	r1, r2, #1, #7
 8018e9a:	ea41 11c2 	orr.w	r1, r1, r2, lsl #7
 8018e9e:	7a3a      	ldrb	r2, [r7, #8]
 8018ea0:	fa53 f181 	uxtab	r1, r3, r1
 8018ea4:	f3c1 0346 	ubfx	r3, r1, #1, #7
 8018ea8:	ea43 11c1 	orr.w	r1, r3, r1, lsl #7
 8018eac:	fa5c f381 	uxtab	r3, ip, r1
 8018eb0:	f3c3 0146 	ubfx	r1, r3, #1, #7
 8018eb4:	ea41 11c3 	orr.w	r1, r1, r3, lsl #7
 8018eb8:	79fb      	ldrb	r3, [r7, #7]
 8018eba:	fa50 f181 	uxtab	r1, r0, r1
 8018ebe:	f3c1 0046 	ubfx	r0, r1, #1, #7
 8018ec2:	ea40 11c1 	orr.w	r1, r0, r1, lsl #7
 8018ec6:	fa55 f081 	uxtab	r0, r5, r1
 8018eca:	f3c0 0146 	ubfx	r1, r0, #1, #7
 8018ece:	ea41 11c0 	orr.w	r1, r1, r0, lsl #7
 8018ed2:	7a78      	ldrb	r0, [r7, #9]
 8018ed4:	fa53 f181 	uxtab	r1, r3, r1
 8018ed8:	f3c1 0346 	ubfx	r3, r1, #1, #7
 8018edc:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 8018ee0:	7ab9      	ldrb	r1, [r7, #10]
 8018ee2:	fa52 f383 	uxtab	r3, r2, r3
 8018ee6:	f3c3 0246 	ubfx	r2, r3, #1, #7
 8018eea:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
 8018eee:	fa50 f283 	uxtab	r2, r0, r3
 8018ef2:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8018ef6:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8018efa:	9a01      	ldr	r2, [sp, #4]
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8018efc:	fa51 f383 	uxtab	r3, r1, r3
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8018f00:	b2db      	uxtb	r3, r3
 8018f02:	429a      	cmp	r2, r3
 8018f04:	f47f af55 	bne.w	8018db2 <dir_find+0x10a>
 8018f08:	e717      	b.n	8018d3a <dir_find+0x92>
				dp->sect = 0; return FR_NO_FILE;
 8018f0a:	2300      	movs	r3, #0
 8018f0c:	f04f 0b04 	mov.w	fp, #4
 8018f10:	61e3      	str	r3, [r4, #28]
 8018f12:	e712      	b.n	8018d3a <dir_find+0x92>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8018f14:	45a8      	cmp	r8, r5
 8018f16:	d094      	beq.n	8018e42 <dir_find+0x19a>
 8018f18:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8018f1c:	e724      	b.n	8018d68 <dir_find+0xc0>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8018f1e:	9b02      	ldr	r3, [sp, #8]
 8018f20:	6999      	ldr	r1, [r3, #24]
 8018f22:	4288      	cmp	r0, r1
 8018f24:	d2f1      	bcs.n	8018f0a <dir_find+0x262>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8018f26:	3902      	subs	r1, #2
	clst -= 2;
 8018f28:	1e87      	subs	r7, r0, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 8018f2a:	61a0      	str	r0, [r4, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8018f2c:	428f      	cmp	r7, r1
 8018f2e:	9a03      	ldr	r2, [sp, #12]
 8018f30:	d208      	bcs.n	8018f44 <dir_find+0x29c>
	return clst * fs->csize + fs->database;
 8018f32:	8958      	ldrh	r0, [r3, #10]
 8018f34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8018f36:	fb07 1700 	mla	r7, r7, r0, r1
				dp->sect = clust2sect(fs, clst);
 8018f3a:	61e7      	str	r7, [r4, #28]
 8018f3c:	e729      	b.n	8018d92 <dir_find+0xea>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8018f3e:	f04f 0b02 	mov.w	fp, #2
 8018f42:	e6fa      	b.n	8018d3a <dir_find+0x92>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8018f44:	4617      	mov	r7, r2
 8018f46:	e7f8      	b.n	8018f3a <dir_find+0x292>
	rv = rv << 8 | ptr[0];
 8018f48:	7efa      	ldrb	r2, [r7, #27]
 8018f4a:	7ebb      	ldrb	r3, [r7, #26]
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8018f4c:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8018f50:	f47f af7b 	bne.w	8018e4a <dir_find+0x1a2>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8018f54:	f897 9000 	ldrb.w	r9, [r7]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8018f58:	2201      	movs	r2, #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8018f5a:	68f1      	ldr	r1, [r6, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8018f5c:	f009 093f 	and.w	r9, r9, #63	; 0x3f
 8018f60:	9505      	str	r5, [sp, #20]
 8018f62:	f8df a098 	ldr.w	sl, [pc, #152]	; 8018ffc <dir_find+0x354>
 8018f66:	460d      	mov	r5, r1
 8018f68:	f109 39ff 	add.w	r9, r9, #4294967295
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8018f6c:	9104      	str	r1, [sp, #16]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8018f6e:	9602      	str	r6, [sp, #8]
 8018f70:	4610      	mov	r0, r2
 8018f72:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 8018f76:	9403      	str	r4, [sp, #12]
 8018f78:	eb09 0983 	add.w	r9, r9, r3, lsl #2
 8018f7c:	e011      	b.n	8018fa2 <dir_find+0x2fa>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8018f7e:	f1b9 0ffe 	cmp.w	r9, #254	; 0xfe
 8018f82:	4640      	mov	r0, r8
 8018f84:	d81f      	bhi.n	8018fc6 <dir_find+0x31e>
 8018f86:	f7fe f99f 	bl	80172c8 <ff_wtoupper>
 8018f8a:	4604      	mov	r4, r0
 8018f8c:	f835 0019 	ldrh.w	r0, [r5, r9, lsl #1]
 8018f90:	46b1      	mov	r9, r6
 8018f92:	f7fe f999 	bl	80172c8 <ff_wtoupper>
 8018f96:	4284      	cmp	r4, r0
	rv = rv << 8 | ptr[0];
 8018f98:	4640      	mov	r0, r8
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8018f9a:	d114      	bne.n	8018fc6 <dir_find+0x31e>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8018f9c:	4b16      	ldr	r3, [pc, #88]	; (8018ff8 <dir_find+0x350>)
 8018f9e:	4553      	cmp	r3, sl
 8018fa0:	d016      	beq.n	8018fd0 <dir_find+0x328>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8018fa2:	f81a 3b01 	ldrb.w	r3, [sl], #1
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8018fa6:	f109 0601 	add.w	r6, r9, #1
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8018faa:	eb07 0c03 	add.w	ip, r7, r3
	rv = rv << 8 | ptr[0];
 8018fae:	f817 8003 	ldrb.w	r8, [r7, r3]
 8018fb2:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8018fb6:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
		if (wc) {
 8018fba:	2800      	cmp	r0, #0
 8018fbc:	d1df      	bne.n	8018f7e <dir_find+0x2d6>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8018fbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018fc2:	4598      	cmp	r8, r3
 8018fc4:	d0ea      	beq.n	8018f9c <dir_find+0x2f4>
 8018fc6:	e9dd 6402 	ldrd	r6, r4, [sp, #8]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8018fca:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8018fce:	e6cb      	b.n	8018d68 <dir_find+0xc0>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8018fd0:	783b      	ldrb	r3, [r7, #0]
 8018fd2:	9e02      	ldr	r6, [sp, #8]
 8018fd4:	0659      	lsls	r1, r3, #25
 8018fd6:	9d05      	ldr	r5, [sp, #20]
 8018fd8:	9c03      	ldr	r4, [sp, #12]
 8018fda:	d500      	bpl.n	8018fde <dir_find+0x336>
 8018fdc:	b918      	cbnz	r0, 8018fe6 <dir_find+0x33e>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8018fde:	3d01      	subs	r5, #1
 8018fe0:	fa5f f885 	uxtb.w	r8, r5
 8018fe4:	e6c0      	b.n	8018d68 <dir_find+0xc0>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8018fe6:	9b04      	ldr	r3, [sp, #16]
 8018fe8:	f833 3019 	ldrh.w	r3, [r3, r9, lsl #1]
 8018fec:	2b00      	cmp	r3, #0
 8018fee:	d0f6      	beq.n	8018fde <dir_find+0x336>
 8018ff0:	e72b      	b.n	8018e4a <dir_find+0x1a2>
 8018ff2:	bf00      	nop
 8018ff4:	001fffff 	.word	0x001fffff
 8018ff8:	080c007d 	.word	0x080c007d
 8018ffc:	080c0070 	.word	0x080c0070

08019000 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8019000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8019004:	780b      	ldrb	r3, [r1, #0]
{
 8019006:	b085      	sub	sp, #20
 8019008:	460f      	mov	r7, r1
 801900a:	4606      	mov	r6, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801900c:	2b5c      	cmp	r3, #92	; 0x5c
	FATFS *fs = obj->fs;
 801900e:	f8d0 b000 	ldr.w	fp, [r0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8019012:	d001      	beq.n	8019018 <follow_path+0x18>
 8019014:	2b2f      	cmp	r3, #47	; 0x2f
 8019016:	d105      	bne.n	8019024 <follow_path+0x24>
 8019018:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 801901c:	2b2f      	cmp	r3, #47	; 0x2f
 801901e:	d0fb      	beq.n	8019018 <follow_path+0x18>
 8019020:	2b5c      	cmp	r3, #92	; 0x5c
 8019022:	d0f9      	beq.n	8019018 <follow_path+0x18>
		obj->sclust = 0;					/* Start from root directory */
 8019024:	2100      	movs	r1, #0
 8019026:	60b1      	str	r1, [r6, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8019028:	7838      	ldrb	r0, [r7, #0]
 801902a:	281f      	cmp	r0, #31
 801902c:	f240 814c 	bls.w	80192c8 <follow_path+0x2c8>
 8019030:	465b      	mov	r3, fp
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8019032:	9101      	str	r1, [sp, #4]
		w = p[si++];					/* Get a character */
 8019034:	b280      	uxth	r0, r0
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8019036:	68dd      	ldr	r5, [r3, #12]
		if (w < ' ') break;				/* Break if end of the path name */
 8019038:	281f      	cmp	r0, #31
 801903a:	d92d      	bls.n	8019098 <follow_path+0x98>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801903c:	285c      	cmp	r0, #92	; 0x5c
 801903e:	d031      	beq.n	80190a4 <follow_path+0xa4>
 8019040:	282f      	cmp	r0, #47	; 0x2f
 8019042:	d02f      	beq.n	80190a4 <follow_path+0xa4>
 8019044:	f1a5 0902 	sub.w	r9, r5, #2
 8019048:	46b8      	mov	r8, r7
		w = p[si++];					/* Get a character */
 801904a:	2401      	movs	r4, #1
 801904c:	e00f      	b.n	801906e <follow_path+0x6e>
		lfn[di++] = w;					/* Store the Unicode character */
 801904e:	f829 0f02 	strh.w	r0, [r9, #2]!
		w = p[si++];					/* Get a character */
 8019052:	1c63      	adds	r3, r4, #1
 8019054:	f818 0f01 	ldrb.w	r0, [r8, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
 8019058:	281f      	cmp	r0, #31
 801905a:	f240 811e 	bls.w	801929a <follow_path+0x29a>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801905e:	282f      	cmp	r0, #47	; 0x2f
 8019060:	d022      	beq.n	80190a8 <follow_path+0xa8>
 8019062:	285c      	cmp	r0, #92	; 0x5c
 8019064:	d020      	beq.n	80190a8 <follow_path+0xa8>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8019066:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801906a:	d011      	beq.n	8019090 <follow_path+0x90>
 801906c:	461c      	mov	r4, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801906e:	2101      	movs	r1, #1
 8019070:	f7fe f908 	bl	8017284 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8019074:	b160      	cbz	r0, 8019090 <follow_path+0x90>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8019076:	287f      	cmp	r0, #127	; 0x7f
 8019078:	d8e9      	bhi.n	801904e <follow_path+0x4e>
	while (*str && *str != chr) str++;
 801907a:	2822      	cmp	r0, #34	; 0x22
 801907c:	d008      	beq.n	8019090 <follow_path+0x90>
 801907e:	232a      	movs	r3, #42	; 0x2a
 8019080:	4aa4      	ldr	r2, [pc, #656]	; (8019314 <follow_path+0x314>)
 8019082:	e003      	b.n	801908c <follow_path+0x8c>
 8019084:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8019088:	2b00      	cmp	r3, #0
 801908a:	d0e0      	beq.n	801904e <follow_path+0x4e>
 801908c:	4298      	cmp	r0, r3
 801908e:	d1f9      	bne.n	8019084 <follow_path+0x84>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8019090:	2006      	movs	r0, #6
			}
		}
	}

	return res;
}
 8019092:	b005      	add	sp, #20
 8019094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	lfn[di] = 0;						/* LFN is created */
 8019098:	2300      	movs	r3, #0
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801909a:	2006      	movs	r0, #6
	lfn[di] = 0;						/* LFN is created */
 801909c:	802b      	strh	r3, [r5, #0]
}
 801909e:	b005      	add	sp, #20
 80190a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		w = p[si++];					/* Get a character */
 80190a4:	2301      	movs	r3, #1
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80190a6:	2400      	movs	r4, #0
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80190a8:	5cfa      	ldrb	r2, [r7, r3]
 80190aa:	18f9      	adds	r1, r7, r3
 80190ac:	2a2f      	cmp	r2, #47	; 0x2f
 80190ae:	d002      	beq.n	80190b6 <follow_path+0xb6>
 80190b0:	2a5c      	cmp	r2, #92	; 0x5c
 80190b2:	f040 8114 	bne.w	80192de <follow_path+0x2de>
 80190b6:	3301      	adds	r3, #1
 80190b8:	443b      	add	r3, r7
 80190ba:	461f      	mov	r7, r3
 80190bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80190c0:	2a2f      	cmp	r2, #47	; 0x2f
 80190c2:	d0fa      	beq.n	80190ba <follow_path+0xba>
 80190c4:	2a5c      	cmp	r2, #92	; 0x5c
 80190c6:	d0f8      	beq.n	80190ba <follow_path+0xba>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80190c8:	2c00      	cmp	r4, #0
 80190ca:	d0e5      	beq.n	8019098 <follow_path+0x98>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80190cc:	f04f 0900 	mov.w	r9, #0
		w = lfn[di - 1];
 80190d0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80190d4:	4423      	add	r3, r4
 80190d6:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
 80190da:	eb05 0343 	add.w	r3, r5, r3, lsl #1
		if (w != ' ' && w != '.') break;
 80190de:	2a20      	cmp	r2, #32
 80190e0:	d105      	bne.n	80190ee <follow_path+0xee>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80190e2:	3c01      	subs	r4, #1
 80190e4:	d0d8      	beq.n	8019098 <follow_path+0x98>
		w = lfn[di - 1];
 80190e6:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
		if (w != ' ' && w != '.') break;
 80190ea:	2a20      	cmp	r2, #32
 80190ec:	d0f9      	beq.n	80190e2 <follow_path+0xe2>
 80190ee:	2a2e      	cmp	r2, #46	; 0x2e
 80190f0:	d0f7      	beq.n	80190e2 <follow_path+0xe2>
		*d++ = (BYTE)val;
 80190f2:	2220      	movs	r2, #32
 80190f4:	f04f 3120 	mov.w	r1, #538976288	; 0x20202020
	lfn[di] = 0;						/* LFN is created */
 80190f8:	9b01      	ldr	r3, [sp, #4]
 80190fa:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
 80190fe:	eb05 0344 	add.w	r3, r5, r4, lsl #1
		*d++ = (BYTE)val;
 8019102:	6271      	str	r1, [r6, #36]	; 0x24
 8019104:	62b1      	str	r1, [r6, #40]	; 0x28
 8019106:	f886 202c 	strb.w	r2, [r6, #44]	; 0x2c
 801910a:	f886 202d 	strb.w	r2, [r6, #45]	; 0x2d
 801910e:	f886 202e 	strb.w	r2, [r6, #46]	; 0x2e
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8019112:	8828      	ldrh	r0, [r5, #0]
 8019114:	282e      	cmp	r0, #46	; 0x2e
 8019116:	d006      	beq.n	8019126 <follow_path+0x126>
 8019118:	1a82      	subs	r2, r0, r2
 801911a:	fab2 f282 	clz	r2, r2
 801911e:	0952      	lsrs	r2, r2, #5
 8019120:	2a00      	cmp	r2, #0
 8019122:	f000 80da 	beq.w	80192da <follow_path+0x2da>
 8019126:	462a      	mov	r2, r5
 8019128:	f04f 0800 	mov.w	r8, #0
 801912c:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 8019130:	f108 0801 	add.w	r8, r8, #1
 8019134:	2820      	cmp	r0, #32
 8019136:	d0f9      	beq.n	801912c <follow_path+0x12c>
 8019138:	282e      	cmp	r0, #46	; 0x2e
 801913a:	d0f7      	beq.n	801912c <follow_path+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801913c:	f049 0903 	orr.w	r9, r9, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8019140:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
 8019144:	2a2e      	cmp	r2, #46	; 0x2e
 8019146:	d001      	beq.n	801914c <follow_path+0x14c>
 8019148:	3c01      	subs	r4, #1
 801914a:	d1f9      	bne.n	8019140 <follow_path+0x140>
		dp->fn[i++] = (BYTE)w;
 801914c:	2208      	movs	r2, #8
 801914e:	4639      	mov	r1, r7
 8019150:	f04f 0a00 	mov.w	sl, #0
 8019154:	4637      	mov	r7, r6
		w = lfn[si++];					/* Get an LFN character */
 8019156:	f108 0801 	add.w	r8, r8, #1
 801915a:	462e      	mov	r6, r5
		dp->fn[i++] = (BYTE)w;
 801915c:	4653      	mov	r3, sl
 801915e:	4615      	mov	r5, r2
 8019160:	460a      	mov	r2, r1
		if (!w) break;					/* Break on end of the LFN */
 8019162:	b168      	cbz	r0, 8019180 <follow_path+0x180>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8019164:	2820      	cmp	r0, #32
 8019166:	d003      	beq.n	8019170 <follow_path+0x170>
 8019168:	282e      	cmp	r0, #46	; 0x2e
 801916a:	d152      	bne.n	8019212 <follow_path+0x212>
 801916c:	45a0      	cmp	r8, r4
 801916e:	d050      	beq.n	8019212 <follow_path+0x212>
			cf |= NS_LOSS | NS_LFN; continue;
 8019170:	f049 0903 	orr.w	r9, r9, #3
 8019174:	f836 0018 	ldrh.w	r0, [r6, r8, lsl #1]
		w = lfn[si++];					/* Get an LFN character */
 8019178:	f108 0801 	add.w	r8, r8, #1
		if (!w) break;					/* Break on end of the LFN */
 801917c:	2800      	cmp	r0, #0
 801917e:	d1f1      	bne.n	8019164 <follow_path+0x164>
 8019180:	463e      	mov	r6, r7
 8019182:	4617      	mov	r7, r2
 8019184:	462a      	mov	r2, r5
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8019186:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
 801918a:	29e5      	cmp	r1, #229	; 0xe5
 801918c:	d102      	bne.n	8019194 <follow_path+0x194>
 801918e:	2105      	movs	r1, #5
 8019190:	f886 1024 	strb.w	r1, [r6, #36]	; 0x24
	if (ni == 8) b <<= 2;
 8019194:	2a08      	cmp	r2, #8
 8019196:	d101      	bne.n	801919c <follow_path+0x19c>
 8019198:	009b      	lsls	r3, r3, #2
 801919a:	b2db      	uxtb	r3, r3
 801919c:	f003 020c 	and.w	r2, r3, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80191a0:	2a0c      	cmp	r2, #12
 80191a2:	d07e      	beq.n	80192a2 <follow_path+0x2a2>
 80191a4:	f003 0303 	and.w	r3, r3, #3
 80191a8:	2b03      	cmp	r3, #3
 80191aa:	d07a      	beq.n	80192a2 <follow_path+0x2a2>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80191ac:	f019 0f02 	tst.w	r9, #2
 80191b0:	d107      	bne.n	80191c2 <follow_path+0x1c2>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80191b2:	2b01      	cmp	r3, #1
 80191b4:	bf08      	it	eq
 80191b6:	f049 0910 	orreq.w	r9, r9, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80191ba:	2a04      	cmp	r2, #4
 80191bc:	bf08      	it	eq
 80191be:	f049 0908 	orreq.w	r9, r9, #8
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80191c2:	f886 902f 	strb.w	r9, [r6, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 80191c6:	4630      	mov	r0, r6
 80191c8:	f7ff fd6e 	bl	8018ca8 <dir_find>
			ns = dp->fn[NSFLAG];
 80191cc:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 80191d0:	2800      	cmp	r0, #0
 80191d2:	d171      	bne.n	80192b8 <follow_path+0x2b8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80191d4:	075a      	lsls	r2, r3, #29
 80191d6:	f53f af5c 	bmi.w	8019092 <follow_path+0x92>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80191da:	79b3      	ldrb	r3, [r6, #6]
 80191dc:	06db      	lsls	r3, r3, #27
 80191de:	f140 8089 	bpl.w	80192f4 <follow_path+0x2f4>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80191e2:	6972      	ldr	r2, [r6, #20]
 80191e4:	f10b 0334 	add.w	r3, fp, #52	; 0x34
	if (fs->fs_type == FS_FAT32) {
 80191e8:	f89b 1000 	ldrb.w	r1, [fp]
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80191ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
	if (fs->fs_type == FS_FAT32) {
 80191f0:	2903      	cmp	r1, #3
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80191f2:	4413      	add	r3, r2
	rv = rv << 8 | ptr[0];
 80191f4:	7ed8      	ldrb	r0, [r3, #27]
 80191f6:	7e9a      	ldrb	r2, [r3, #26]
	cl = ld_word(dir + DIR_FstClusLO);
 80191f8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (fs->fs_type == FS_FAT32) {
 80191fc:	d105      	bne.n	801920a <follow_path+0x20a>
	rv = rv << 8 | ptr[0];
 80191fe:	7d59      	ldrb	r1, [r3, #21]
 8019200:	7d1b      	ldrb	r3, [r3, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8019202:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8019206:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801920a:	60b2      	str	r2, [r6, #8]
 801920c:	6833      	ldr	r3, [r6, #0]
 801920e:	7838      	ldrb	r0, [r7, #0]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8019210:	e710      	b.n	8019034 <follow_path+0x34>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8019212:	45aa      	cmp	sl, r5
 8019214:	d21a      	bcs.n	801924c <follow_path+0x24c>
 8019216:	eba8 0104 	sub.w	r1, r8, r4
 801921a:	fab1 f181 	clz	r1, r1
 801921e:	0949      	lsrs	r1, r1, #5
 8019220:	b9a1      	cbnz	r1, 801924c <follow_path+0x24c>
		if (w >= 0x80) {				/* Non ASCII character */
 8019222:	287f      	cmp	r0, #127	; 0x7f
 8019224:	d820      	bhi.n	8019268 <follow_path+0x268>
	while (*str && *str != chr) str++;
 8019226:	282b      	cmp	r0, #43	; 0x2b
 8019228:	d02d      	beq.n	8019286 <follow_path+0x286>
 801922a:	212c      	movs	r1, #44	; 0x2c
 801922c:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 801931c <follow_path+0x31c>
 8019230:	4281      	cmp	r1, r0
 8019232:	d028      	beq.n	8019286 <follow_path+0x286>
 8019234:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 8019238:	2900      	cmp	r1, #0
 801923a:	d1f9      	bne.n	8019230 <follow_path+0x230>
				if (IsUpper(w)) {		/* ASCII large capital */
 801923c:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 8019240:	2919      	cmp	r1, #25
 8019242:	d84e      	bhi.n	80192e2 <follow_path+0x2e2>
					b |= 2;
 8019244:	f043 0302 	orr.w	r3, r3, #2
 8019248:	b2c0      	uxtb	r0, r0
 801924a:	e01f      	b.n	801928c <follow_path+0x28c>
			if (ni == 11) {				/* Long extension */
 801924c:	2d0b      	cmp	r5, #11
 801924e:	d053      	beq.n	80192f8 <follow_path+0x2f8>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8019250:	45a0      	cmp	r8, r4
 8019252:	d002      	beq.n	801925a <follow_path+0x25a>
 8019254:	f049 0903 	orr.w	r9, r9, #3
			if (si > di) break;			/* No extension */
 8019258:	d892      	bhi.n	8019180 <follow_path+0x180>
			b <<= 2; continue;
 801925a:	009b      	lsls	r3, r3, #2
 801925c:	46a0      	mov	r8, r4
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801925e:	250b      	movs	r5, #11
 8019260:	f04f 0a08 	mov.w	sl, #8
			b <<= 2; continue;
 8019264:	b2db      	uxtb	r3, r3
 8019266:	e785      	b.n	8019174 <follow_path+0x174>
 8019268:	e9cd 3202 	strd	r3, r2, [sp, #8]
 801926c:	f049 0902 	orr.w	r9, r9, #2
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8019270:	f7fe f808 	bl	8017284 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8019274:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8019278:	b128      	cbz	r0, 8019286 <follow_path+0x286>
 801927a:	4927      	ldr	r1, [pc, #156]	; (8019318 <follow_path+0x318>)
 801927c:	4408      	add	r0, r1
 801927e:	f810 0c80 	ldrb.w	r0, [r0, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8019282:	2800      	cmp	r0, #0
 8019284:	d1cf      	bne.n	8019226 <follow_path+0x226>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8019286:	f049 0903 	orr.w	r9, r9, #3
 801928a:	205f      	movs	r0, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 801928c:	eb07 010a 	add.w	r1, r7, sl
 8019290:	f10a 0a01 	add.w	sl, sl, #1
 8019294:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
 8019298:	e76c      	b.n	8019174 <follow_path+0x174>
	*path = &p[si];						/* Return pointer to the next segment */
 801929a:	441f      	add	r7, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801929c:	f04f 0904 	mov.w	r9, #4
 80192a0:	e716      	b.n	80190d0 <follow_path+0xd0>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80192a2:	f049 0902 	orr.w	r9, r9, #2
			res = dir_find(dp);				/* Find an object with the segment name */
 80192a6:	4630      	mov	r0, r6
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80192a8:	f886 902f 	strb.w	r9, [r6, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 80192ac:	f7ff fcfc 	bl	8018ca8 <dir_find>
			ns = dp->fn[NSFLAG];
 80192b0:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 80192b4:	2800      	cmp	r0, #0
 80192b6:	d08d      	beq.n	80191d4 <follow_path+0x1d4>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80192b8:	2804      	cmp	r0, #4
 80192ba:	f47f aeea 	bne.w	8019092 <follow_path+0x92>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80192be:	f013 0f04 	tst.w	r3, #4
 80192c2:	bf08      	it	eq
 80192c4:	2005      	moveq	r0, #5
 80192c6:	e6e4      	b.n	8019092 <follow_path+0x92>
		dp->fn[NSFLAG] = NS_NONAME;
 80192c8:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 80192ca:	4630      	mov	r0, r6
		dp->fn[NSFLAG] = NS_NONAME;
 80192cc:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
}
 80192d0:	b005      	add	sp, #20
 80192d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 80192d6:	f7fe bdd7 	b.w	8017e88 <dir_sdi>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80192da:	4690      	mov	r8, r2
 80192dc:	e730      	b.n	8019140 <follow_path+0x140>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80192de:	460f      	mov	r7, r1
 80192e0:	e6f2      	b.n	80190c8 <follow_path+0xc8>
					if (IsLower(w)) {	/* ASCII small capital */
 80192e2:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 80192e6:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 80192e8:	bf9c      	itt	ls
 80192ea:	3820      	subls	r0, #32
 80192ec:	f043 0301 	orrls.w	r3, r3, #1
 80192f0:	b2c0      	uxtb	r0, r0
 80192f2:	e7cb      	b.n	801928c <follow_path+0x28c>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80192f4:	2005      	movs	r0, #5
 80192f6:	e6cc      	b.n	8019092 <follow_path+0x92>
 80192f8:	463e      	mov	r6, r7
 80192fa:	4617      	mov	r7, r2
				cf |= NS_LOSS | NS_LFN; break;
 80192fc:	f049 0903 	orr.w	r9, r9, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8019300:	f896 2024 	ldrb.w	r2, [r6, #36]	; 0x24
 8019304:	2ae5      	cmp	r2, #229	; 0xe5
 8019306:	f47f af49 	bne.w	801919c <follow_path+0x19c>
 801930a:	2205      	movs	r2, #5
 801930c:	f886 2024 	strb.w	r2, [r6, #36]	; 0x24
 8019310:	e744      	b.n	801919c <follow_path+0x19c>
 8019312:	bf00      	nop
 8019314:	080c0081 	.word	0x080c0081
 8019318:	080bfff0 	.word	0x080bfff0
 801931c:	080c008d 	.word	0x080c008d

08019320 <dir_register>:
{
 8019320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8019324:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
{
 8019328:	b091      	sub	sp, #68	; 0x44
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801932a:	f013 06a0 	ands.w	r6, r3, #160	; 0xa0
 801932e:	f040 82d7 	bne.w	80198e0 <dir_register+0x5c0>
	FATFS *fs = dp->obj.fs;
 8019332:	6803      	ldr	r3, [r0, #0]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8019334:	68df      	ldr	r7, [r3, #12]
	FATFS *fs = dp->obj.fs;
 8019336:	9302      	str	r3, [sp, #8]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8019338:	883b      	ldrh	r3, [r7, #0]
 801933a:	2b00      	cmp	r3, #0
 801933c:	f000 834f 	beq.w	80199de <dir_register+0x6be>
 8019340:	463b      	mov	r3, r7
 8019342:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 8019346:	3601      	adds	r6, #1
 8019348:	2a00      	cmp	r2, #0
 801934a:	d1fa      	bne.n	8019342 <dir_register+0x22>
	mem_cpy(sn, dp->fn, 12);
 801934c:	4683      	mov	fp, r0
 801934e:	4682      	mov	sl, r0
 8019350:	ab0d      	add	r3, sp, #52	; 0x34
 8019352:	f85b 0f24 	ldr.w	r0, [fp, #36]!
 8019356:	f8db 2008 	ldr.w	r2, [fp, #8]
 801935a:	f8db 1004 	ldr.w	r1, [fp, #4]
 801935e:	c307      	stmia	r3!, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8019360:	f89d 503f 	ldrb.w	r5, [sp, #63]	; 0x3f
 8019364:	07ea      	lsls	r2, r5, #31
 8019366:	d460      	bmi.n	801942a <dir_register+0x10a>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8019368:	07aa      	lsls	r2, r5, #30
 801936a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801936e:	f140 82af 	bpl.w	80198d0 <dir_register+0x5b0>
 8019372:	f106 030c 	add.w	r3, r6, #12
 8019376:	4abd      	ldr	r2, [pc, #756]	; (801966c <dir_register+0x34c>)
 8019378:	fba2 2303 	umull	r2, r3, r2, r3
 801937c:	089b      	lsrs	r3, r3, #2
 801937e:	3301      	adds	r3, #1
 8019380:	9303      	str	r3, [sp, #12]
	res = dir_sdi(dp, 0);
 8019382:	2100      	movs	r1, #0
 8019384:	4650      	mov	r0, sl
 8019386:	f7fe fd7f 	bl	8017e88 <dir_sdi>
	if (res == FR_OK) {
 801938a:	9001      	str	r0, [sp, #4]
 801938c:	4605      	mov	r5, r0
 801938e:	2800      	cmp	r0, #0
 8019390:	f040 82ba 	bne.w	8019908 <dir_register+0x5e8>
 8019394:	f108 0334 	add.w	r3, r8, #52	; 0x34
 8019398:	f8da 901c 	ldr.w	r9, [sl, #28]
 801939c:	f8d8 6030 	ldr.w	r6, [r8, #48]	; 0x30
 80193a0:	9304      	str	r3, [sp, #16]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80193a2:	f8cd b020 	str.w	fp, [sp, #32]
	if (sector != fs->winsect) {	/* Window offset changed? */
 80193a6:	454e      	cmp	r6, r9
 80193a8:	f000 81b4 	beq.w	8019714 <dir_register+0x3f4>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80193ac:	f898 3003 	ldrb.w	r3, [r8, #3]
 80193b0:	f898 0001 	ldrb.w	r0, [r8, #1]
 80193b4:	b33b      	cbz	r3, 8019406 <dir_register+0xe6>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80193b6:	9f04      	ldr	r7, [sp, #16]
 80193b8:	2301      	movs	r3, #1
 80193ba:	4632      	mov	r2, r6
 80193bc:	4639      	mov	r1, r7
 80193be:	f7fd fff9 	bl	80173b4 <disk_write>
 80193c2:	2800      	cmp	r0, #0
 80193c4:	f040 8275 	bne.w	80198b2 <dir_register+0x592>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80193c8:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 80193cc:	f8d8 301c 	ldr.w	r3, [r8, #28]
 80193d0:	1ab2      	subs	r2, r6, r2
			fs->wflag = 0;
 80193d2:	f888 0003 	strb.w	r0, [r8, #3]
 80193d6:	f898 0001 	ldrb.w	r0, [r8, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80193da:	429a      	cmp	r2, r3
 80193dc:	d213      	bcs.n	8019406 <dir_register+0xe6>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80193de:	f898 4002 	ldrb.w	r4, [r8, #2]
 80193e2:	2c01      	cmp	r4, #1
 80193e4:	d804      	bhi.n	80193f0 <dir_register+0xd0>
 80193e6:	e00e      	b.n	8019406 <dir_register+0xe6>
 80193e8:	f8d8 301c 	ldr.w	r3, [r8, #28]
 80193ec:	f898 0001 	ldrb.w	r0, [r8, #1]
					wsect += fs->fsize;
 80193f0:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80193f2:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 80193f4:	2301      	movs	r3, #1
 80193f6:	4639      	mov	r1, r7
 80193f8:	4632      	mov	r2, r6
 80193fa:	f7fd ffdb 	bl	80173b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80193fe:	2c01      	cmp	r4, #1
 8019400:	d1f2      	bne.n	80193e8 <dir_register+0xc8>
 8019402:	f898 0001 	ldrb.w	r0, [r8, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8019406:	2301      	movs	r3, #1
 8019408:	464a      	mov	r2, r9
 801940a:	9904      	ldr	r1, [sp, #16]
 801940c:	f7fd ffc4 	bl	8017398 <disk_read>
 8019410:	2800      	cmp	r0, #0
 8019412:	f000 817d 	beq.w	8019710 <dir_register+0x3f0>
			fs->winsect = sector;
 8019416:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 801941a:	2201      	movs	r2, #1
			fs->winsect = sector;
 801941c:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
				res = FR_DISK_ERR;
 8019420:	9201      	str	r2, [sp, #4]
}
 8019422:	9801      	ldr	r0, [sp, #4]
 8019424:	b011      	add	sp, #68	; 0x44
 8019426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 801942a:	2340      	movs	r3, #64	; 0x40
		for (n = 1; n < 100; n++) {
 801942c:	f04f 0801 	mov.w	r8, #1
				if (sr & 0x10000) sr ^= 0x11021;
 8019430:	4c8f      	ldr	r4, [pc, #572]	; (8019670 <dir_register+0x350>)
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8019432:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8019436:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
 801943a:	9501      	str	r5, [sp, #4]
			*d++ = *s++;
 801943c:	f89d 103e 	ldrb.w	r1, [sp, #62]	; 0x3e
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8019440:	f1b8 0f05 	cmp.w	r8, #5
			*d++ = *s++;
 8019444:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8019448:	f89d 003d 	ldrb.w	r0, [sp, #61]	; 0x3d
 801944c:	f88a 102e 	strb.w	r1, [sl, #46]	; 0x2e
 8019450:	f88a 502c 	strb.w	r5, [sl, #44]	; 0x2c
 8019454:	f88a 002d 	strb.w	r0, [sl, #45]	; 0x2d
 8019458:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 801945c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8019460:	e9ca 2309 	strd	r2, r3, [sl, #36]	; 0x24
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8019464:	f240 8182 	bls.w	801976c <dir_register+0x44c>
 8019468:	3f02      	subs	r7, #2
 801946a:	4643      	mov	r3, r8
 801946c:	e08a      	b.n	8019584 <dir_register+0x264>
				sr = (sr << 1) + (wc & 1);
 801946e:	f002 0501 	and.w	r5, r2, #1
				wc >>= 1;
 8019472:	0850      	lsrs	r0, r2, #1
				sr = (sr << 1) + (wc & 1);
 8019474:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8019478:	f000 0001 	and.w	r0, r0, #1
				if (sr & 0x10000) sr ^= 0x11021;
 801947c:	03eb      	lsls	r3, r5, #15
				wc >>= 1;
 801947e:	ea4f 0392 	mov.w	r3, r2, lsr #2
				if (sr & 0x10000) sr ^= 0x11021;
 8019482:	bf48      	it	mi
 8019484:	4065      	eormi	r5, r4
				sr = (sr << 1) + (wc & 1);
 8019486:	f003 0301 	and.w	r3, r3, #1
 801948a:	eb00 0045 	add.w	r0, r0, r5, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 801948e:	03c5      	lsls	r5, r0, #15
				wc >>= 1;
 8019490:	ea4f 05d2 	mov.w	r5, r2, lsr #3
				if (sr & 0x10000) sr ^= 0x11021;
 8019494:	bf48      	it	mi
 8019496:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 8019498:	f005 0501 	and.w	r5, r5, #1
 801949c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80194a0:	03d8      	lsls	r0, r3, #15
				wc >>= 1;
 80194a2:	ea4f 1012 	mov.w	r0, r2, lsr #4
				if (sr & 0x10000) sr ^= 0x11021;
 80194a6:	bf48      	it	mi
 80194a8:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 80194aa:	f000 0001 	and.w	r0, r0, #1
 80194ae:	eb05 0543 	add.w	r5, r5, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80194b2:	03eb      	lsls	r3, r5, #15
				wc >>= 1;
 80194b4:	ea4f 1352 	mov.w	r3, r2, lsr #5
				if (sr & 0x10000) sr ^= 0x11021;
 80194b8:	bf48      	it	mi
 80194ba:	4065      	eormi	r5, r4
				sr = (sr << 1) + (wc & 1);
 80194bc:	f003 0301 	and.w	r3, r3, #1
 80194c0:	eb00 0045 	add.w	r0, r0, r5, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80194c4:	03c5      	lsls	r5, r0, #15
				wc >>= 1;
 80194c6:	ea4f 1592 	mov.w	r5, r2, lsr #6
				if (sr & 0x10000) sr ^= 0x11021;
 80194ca:	bf48      	it	mi
 80194cc:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 80194ce:	f005 0501 	and.w	r5, r5, #1
 80194d2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80194d6:	03d8      	lsls	r0, r3, #15
				wc >>= 1;
 80194d8:	ea4f 10d2 	mov.w	r0, r2, lsr #7
				if (sr & 0x10000) sr ^= 0x11021;
 80194dc:	bf48      	it	mi
 80194de:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 80194e0:	f000 0001 	and.w	r0, r0, #1
 80194e4:	eb05 0543 	add.w	r5, r5, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80194e8:	03eb      	lsls	r3, r5, #15
				wc >>= 1;
 80194ea:	ea4f 2312 	mov.w	r3, r2, lsr #8
				if (sr & 0x10000) sr ^= 0x11021;
 80194ee:	bf48      	it	mi
 80194f0:	4065      	eormi	r5, r4
				sr = (sr << 1) + (wc & 1);
 80194f2:	f003 0301 	and.w	r3, r3, #1
 80194f6:	eb00 0045 	add.w	r0, r0, r5, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80194fa:	03c5      	lsls	r5, r0, #15
				wc >>= 1;
 80194fc:	ea4f 2552 	mov.w	r5, r2, lsr #9
				if (sr & 0x10000) sr ^= 0x11021;
 8019500:	bf48      	it	mi
 8019502:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 8019504:	f005 0501 	and.w	r5, r5, #1
 8019508:	eb03 0340 	add.w	r3, r3, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 801950c:	03d8      	lsls	r0, r3, #15
				wc >>= 1;
 801950e:	ea4f 2092 	mov.w	r0, r2, lsr #10
				if (sr & 0x10000) sr ^= 0x11021;
 8019512:	bf48      	it	mi
 8019514:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 8019516:	f000 0001 	and.w	r0, r0, #1
 801951a:	eb05 0543 	add.w	r5, r5, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 801951e:	03eb      	lsls	r3, r5, #15
				wc >>= 1;
 8019520:	ea4f 23d2 	mov.w	r3, r2, lsr #11
				if (sr & 0x10000) sr ^= 0x11021;
 8019524:	bf48      	it	mi
 8019526:	4065      	eormi	r5, r4
				sr = (sr << 1) + (wc & 1);
 8019528:	f003 0301 	and.w	r3, r3, #1
 801952c:	eb00 0045 	add.w	r0, r0, r5, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8019530:	03c5      	lsls	r5, r0, #15
				wc >>= 1;
 8019532:	ea4f 3512 	mov.w	r5, r2, lsr #12
				if (sr & 0x10000) sr ^= 0x11021;
 8019536:	bf48      	it	mi
 8019538:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 801953a:	f005 0501 	and.w	r5, r5, #1
 801953e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8019542:	03d8      	lsls	r0, r3, #15
				wc >>= 1;
 8019544:	ea4f 3052 	mov.w	r0, r2, lsr #13
				if (sr & 0x10000) sr ^= 0x11021;
 8019548:	bf48      	it	mi
 801954a:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 801954c:	f000 0001 	and.w	r0, r0, #1
 8019550:	eb05 0543 	add.w	r5, r5, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8019554:	03eb      	lsls	r3, r5, #15
				wc >>= 1;
 8019556:	ea4f 3392 	mov.w	r3, r2, lsr #14
 801955a:	ea4f 32d2 	mov.w	r2, r2, lsr #15
				if (sr & 0x10000) sr ^= 0x11021;
 801955e:	bf48      	it	mi
 8019560:	4065      	eormi	r5, r4
				sr = (sr << 1) + (wc & 1);
 8019562:	f003 0301 	and.w	r3, r3, #1
 8019566:	eb00 0045 	add.w	r0, r0, r5, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 801956a:	03c5      	lsls	r5, r0, #15
 801956c:	bf48      	it	mi
 801956e:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 8019570:	eb03 0340 	add.w	r3, r3, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8019574:	03dd      	lsls	r5, r3, #15
 8019576:	bf48      	it	mi
 8019578:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 801957a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 801957e:	03d8      	lsls	r0, r3, #15
 8019580:	bf48      	it	mi
 8019582:	4063      	eormi	r3, r4
		while (*lfn) {	/* Create a CRC */
 8019584:	f837 2f02 	ldrh.w	r2, [r7, #2]!
 8019588:	2a00      	cmp	r2, #0
 801958a:	f47f af70 	bne.w	801946e <dir_register+0x14e>
		c = (BYTE)((seq % 16) + '0');
 801958e:	f003 020f 	and.w	r2, r3, #15
 8019592:	f102 0e30 	add.w	lr, r2, #48	; 0x30
		if (c > '9') c += 7;
 8019596:	f1be 0f39 	cmp.w	lr, #57	; 0x39
 801959a:	bf88      	it	hi
 801959c:	f102 0e37 	addhi.w	lr, r2, #55	; 0x37
	} while (seq);
 80195a0:	091a      	lsrs	r2, r3, #4
		ns[i--] = c;
 80195a2:	f88d e033 	strb.w	lr, [sp, #51]	; 0x33
	} while (seq);
 80195a6:	f000 8159 	beq.w	801985c <dir_register+0x53c>
		c = (BYTE)((seq % 16) + '0');
 80195aa:	f002 020f 	and.w	r2, r2, #15
 80195ae:	f102 0030 	add.w	r0, r2, #48	; 0x30
		if (c > '9') c += 7;
 80195b2:	2839      	cmp	r0, #57	; 0x39
 80195b4:	bf88      	it	hi
 80195b6:	f102 0037 	addhi.w	r0, r2, #55	; 0x37
	} while (seq);
 80195ba:	0a1a      	lsrs	r2, r3, #8
		ns[i--] = c;
 80195bc:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
	} while (seq);
 80195c0:	f000 8154 	beq.w	801986c <dir_register+0x54c>
		c = (BYTE)((seq % 16) + '0');
 80195c4:	f002 020f 	and.w	r2, r2, #15
 80195c8:	f102 0030 	add.w	r0, r2, #48	; 0x30
		if (c > '9') c += 7;
 80195cc:	2839      	cmp	r0, #57	; 0x39
 80195ce:	bf88      	it	hi
 80195d0:	f102 0037 	addhi.w	r0, r2, #55	; 0x37
	} while (seq);
 80195d4:	0b1a      	lsrs	r2, r3, #12
		ns[i--] = c;
 80195d6:	f88d 0031 	strb.w	r0, [sp, #49]	; 0x31
	} while (seq);
 80195da:	f000 8160 	beq.w	801989e <dir_register+0x57e>
		c = (BYTE)((seq % 16) + '0');
 80195de:	f002 020f 	and.w	r2, r2, #15
 80195e2:	f102 0030 	add.w	r0, r2, #48	; 0x30
		if (c > '9') c += 7;
 80195e6:	2839      	cmp	r0, #57	; 0x39
 80195e8:	bf88      	it	hi
 80195ea:	f102 0037 	addhi.w	r0, r2, #55	; 0x37
	} while (seq);
 80195ee:	0c1a      	lsrs	r2, r3, #16
		ns[i--] = c;
 80195f0:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
	} while (seq);
 80195f4:	f000 8158 	beq.w	80198a8 <dir_register+0x588>
		c = (BYTE)((seq % 16) + '0');
 80195f8:	f002 020f 	and.w	r2, r2, #15
 80195fc:	f102 0030 	add.w	r0, r2, #48	; 0x30
		if (c > '9') c += 7;
 8019600:	2839      	cmp	r0, #57	; 0x39
 8019602:	bf88      	it	hi
 8019604:	f102 0037 	addhi.w	r0, r2, #55	; 0x37
	} while (seq);
 8019608:	0d1a      	lsrs	r2, r3, #20
		ns[i--] = c;
 801960a:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
	} while (seq);
 801960e:	f000 8162 	beq.w	80198d6 <dir_register+0x5b6>
		c = (BYTE)((seq % 16) + '0');
 8019612:	f002 020f 	and.w	r2, r2, #15
 8019616:	f102 0030 	add.w	r0, r2, #48	; 0x30
		if (c > '9') c += 7;
 801961a:	2839      	cmp	r0, #57	; 0x39
 801961c:	bf88      	it	hi
 801961e:	f102 0037 	addhi.w	r0, r2, #55	; 0x37
	} while (seq);
 8019622:	0e1a      	lsrs	r2, r3, #24
		ns[i--] = c;
 8019624:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
	} while (seq);
 8019628:	f000 815d 	beq.w	80198e6 <dir_register+0x5c6>
		c = (BYTE)((seq % 16) + '0');
 801962c:	f002 020f 	and.w	r2, r2, #15
 8019630:	f102 0030 	add.w	r0, r2, #48	; 0x30
		if (c > '9') c += 7;
 8019634:	2839      	cmp	r0, #57	; 0x39
 8019636:	bf88      	it	hi
 8019638:	f102 0037 	addhi.w	r0, r2, #55	; 0x37
	} while (seq);
 801963c:	0f1b      	lsrs	r3, r3, #28
		ns[i--] = c;
 801963e:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	} while (seq);
 8019642:	f000 8155 	beq.w	80198f0 <dir_register+0x5d0>
		c = (BYTE)((seq % 16) + '0');
 8019646:	b2db      	uxtb	r3, r3
 8019648:	f103 0230 	add.w	r2, r3, #48	; 0x30
		if (c > '9') c += 7;
 801964c:	2a39      	cmp	r2, #57	; 0x39
 801964e:	bf88      	it	hi
 8019650:	f103 0237 	addhi.w	r2, r3, #55	; 0x37
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8019654:	2920      	cmp	r1, #32
		ns[i--] = c;
 8019656:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801965a:	f000 81b7 	beq.w	80199cc <dir_register+0x6ac>
		ns[i--] = c;
 801965e:	f04f 35ff 	mov.w	r5, #4294967295
 8019662:	f10a 0125 	add.w	r1, sl, #37	; 0x25
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8019666:	2200      	movs	r2, #0
 8019668:	e008      	b.n	801967c <dir_register+0x35c>
 801966a:	bf00      	nop
 801966c:	4ec4ec4f 	.word	0x4ec4ec4f
 8019670:	00011021 	.word	0x00011021
 8019674:	7807      	ldrb	r7, [r0, #0]
 8019676:	2f20      	cmp	r7, #32
 8019678:	d007      	beq.n	801968a <dir_register+0x36a>
 801967a:	461a      	mov	r2, r3
 801967c:	1c53      	adds	r3, r2, #1
 801967e:	4608      	mov	r0, r1
 8019680:	f102 0c02 	add.w	ip, r2, #2
 8019684:	3101      	adds	r1, #1
 8019686:	429d      	cmp	r5, r3
 8019688:	d8f4      	bhi.n	8019674 <dir_register+0x354>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801968a:	2d07      	cmp	r5, #7
 801968c:	d970      	bls.n	8019770 <dir_register+0x450>
 801968e:	2120      	movs	r1, #32
	} while (j < 8);
 8019690:	f1bc 0f07 	cmp.w	ip, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8019694:	7001      	strb	r1, [r0, #0]
	} while (j < 8);
 8019696:	d82c      	bhi.n	80196f2 <dir_register+0x3d2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8019698:	1cd1      	adds	r1, r2, #3
 801969a:	2020      	movs	r0, #32
	} while (j < 8);
 801969c:	2908      	cmp	r1, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801969e:	f80b 000c 	strb.w	r0, [fp, ip]
	} while (j < 8);
 80196a2:	d026      	beq.n	80196f2 <dir_register+0x3d2>
 80196a4:	3204      	adds	r2, #4
 80196a6:	4459      	add	r1, fp
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80196a8:	2020      	movs	r0, #32
	} while (j < 8);
 80196aa:	2a08      	cmp	r2, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80196ac:	7008      	strb	r0, [r1, #0]
	} while (j < 8);
 80196ae:	d020      	beq.n	80196f2 <dir_register+0x3d2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80196b0:	1d19      	adds	r1, r3, #4
 80196b2:	2020      	movs	r0, #32
	} while (j < 8);
 80196b4:	2908      	cmp	r1, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80196b6:	f80b 0002 	strb.w	r0, [fp, r2]
	} while (j < 8);
 80196ba:	d01a      	beq.n	80196f2 <dir_register+0x3d2>
 80196bc:	4459      	add	r1, fp
 80196be:	1d5a      	adds	r2, r3, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80196c0:	2020      	movs	r0, #32
	} while (j < 8);
 80196c2:	2a08      	cmp	r2, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80196c4:	7008      	strb	r0, [r1, #0]
	} while (j < 8);
 80196c6:	d014      	beq.n	80196f2 <dir_register+0x3d2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80196c8:	1d99      	adds	r1, r3, #6
 80196ca:	2020      	movs	r0, #32
	} while (j < 8);
 80196cc:	2908      	cmp	r1, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80196ce:	f80b 0002 	strb.w	r0, [fp, r2]
	} while (j < 8);
 80196d2:	d00e      	beq.n	80196f2 <dir_register+0x3d2>
 80196d4:	4459      	add	r1, fp
 80196d6:	1dda      	adds	r2, r3, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80196d8:	2020      	movs	r0, #32
	} while (j < 8);
 80196da:	2a08      	cmp	r2, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80196dc:	7008      	strb	r0, [r1, #0]
	} while (j < 8);
 80196de:	d008      	beq.n	80196f2 <dir_register+0x3d2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80196e0:	f04f 0e20 	mov.w	lr, #32
	} while (j < 8);
 80196e4:	3301      	adds	r3, #1
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80196e6:	f80b e002 	strb.w	lr, [fp, r2]
	} while (j < 8);
 80196ea:	d102      	bne.n	80196f2 <dir_register+0x3d2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80196ec:	2320      	movs	r3, #32
 80196ee:	f88a 302b 	strb.w	r3, [sl, #43]	; 0x2b
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80196f2:	4650      	mov	r0, sl
 80196f4:	f7ff fad8 	bl	8018ca8 <dir_find>
			if (res != FR_OK) break;
 80196f8:	2800      	cmp	r0, #0
 80196fa:	f040 80dd 	bne.w	80198b8 <dir_register+0x598>
		for (n = 1; n < 100; n++) {
 80196fe:	f108 0801 	add.w	r8, r8, #1
 8019702:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
 8019706:	f000 80a3 	beq.w	8019850 <dir_register+0x530>
 801970a:	f8d9 700c 	ldr.w	r7, [r9, #12]
 801970e:	e695      	b.n	801943c <dir_register+0x11c>
			fs->winsect = sector;
 8019710:	f8c8 9030 	str.w	r9, [r8, #48]	; 0x30
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8019714:	f8da 3020 	ldr.w	r3, [sl, #32]
 8019718:	781c      	ldrb	r4, [r3, #0]
 801971a:	2ce5      	cmp	r4, #229	; 0xe5
 801971c:	d003      	beq.n	8019726 <dir_register+0x406>
 801971e:	fab4 f484 	clz	r4, r4
 8019722:	0964      	lsrs	r4, r4, #5
 8019724:	b124      	cbz	r4, 8019730 <dir_register+0x410>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8019726:	1c6c      	adds	r4, r5, #1
 8019728:	9b03      	ldr	r3, [sp, #12]
 801972a:	42a3      	cmp	r3, r4
 801972c:	f000 8159 	beq.w	80199e2 <dir_register+0x6c2>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8019730:	f8da 5014 	ldr.w	r5, [sl, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8019734:	4ac4      	ldr	r2, [pc, #784]	; (8019a48 <dir_register+0x728>)
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8019736:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8019738:	f8da 301c 	ldr.w	r3, [sl, #28]
 801973c:	4295      	cmp	r5, r2
 801973e:	f200 8087 	bhi.w	8019850 <dir_register+0x530>
 8019742:	2b00      	cmp	r3, #0
 8019744:	f000 8084 	beq.w	8019850 <dir_register+0x530>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8019748:	f3c5 0b08 	ubfx	fp, r5, #0, #9
	FATFS *fs = dp->obj.fs;
 801974c:	f8da 6000 	ldr.w	r6, [sl]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8019750:	f1bb 0f00 	cmp.w	fp, #0
 8019754:	d070      	beq.n	8019838 <dir_register+0x518>
 8019756:	f106 0734 	add.w	r7, r6, #52	; 0x34
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801975a:	445f      	add	r7, fp
 801975c:	464e      	mov	r6, r9
	dp->dptr = ofs;						/* Current entry */
 801975e:	f8ca 5014 	str.w	r5, [sl, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8019762:	4699      	mov	r9, r3
 8019764:	f8ca 7020 	str.w	r7, [sl, #32]
 8019768:	4625      	mov	r5, r4
 801976a:	e61c      	b.n	80193a6 <dir_register+0x86>
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 801976c:	4643      	mov	r3, r8
 801976e:	e70e      	b.n	801958e <dir_register+0x26e>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8019770:	277e      	movs	r7, #126	; 0x7e
	} while (j < 8);
 8019772:	f1bc 0f07 	cmp.w	ip, #7
 8019776:	f105 0101 	add.w	r1, r5, #1
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801977a:	7007      	strb	r7, [r0, #0]
	} while (j < 8);
 801977c:	d8b9      	bhi.n	80196f2 <dir_register+0x3d2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801977e:	2908      	cmp	r1, #8
 8019780:	d08a      	beq.n	8019698 <dir_register+0x378>
 8019782:	aa10      	add	r2, sp, #64	; 0x40
 8019784:	1c98      	adds	r0, r3, #2
 8019786:	3502      	adds	r5, #2
 8019788:	4411      	add	r1, r2
	} while (j < 8);
 801978a:	2808      	cmp	r0, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801978c:	f811 2c14 	ldrb.w	r2, [r1, #-20]
 8019790:	f80b 200c 	strb.w	r2, [fp, ip]
	} while (j < 8);
 8019794:	d0ad      	beq.n	80196f2 <dir_register+0x3d2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8019796:	2d07      	cmp	r5, #7
 8019798:	f103 0203 	add.w	r2, r3, #3
 801979c:	eb0b 0100 	add.w	r1, fp, r0
 80197a0:	d882      	bhi.n	80196a8 <dir_register+0x388>
 80197a2:	af10      	add	r7, sp, #64	; 0x40
	} while (j < 8);
 80197a4:	2a08      	cmp	r2, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80197a6:	f105 0101 	add.w	r1, r5, #1
 80197aa:	442f      	add	r7, r5
 80197ac:	f817 7c14 	ldrb.w	r7, [r7, #-20]
 80197b0:	f80b 7000 	strb.w	r7, [fp, r0]
	} while (j < 8);
 80197b4:	d09d      	beq.n	80196f2 <dir_register+0x3d2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80197b6:	2908      	cmp	r1, #8
 80197b8:	f43f af7a 	beq.w	80196b0 <dir_register+0x390>
 80197bc:	a810      	add	r0, sp, #64	; 0x40
 80197be:	1caf      	adds	r7, r5, #2
 80197c0:	4401      	add	r1, r0
 80197c2:	1d18      	adds	r0, r3, #4
 80197c4:	f811 1c14 	ldrb.w	r1, [r1, #-20]
	} while (j < 8);
 80197c8:	2808      	cmp	r0, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80197ca:	f80b 1002 	strb.w	r1, [fp, r2]
	} while (j < 8);
 80197ce:	d090      	beq.n	80196f2 <dir_register+0x3d2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80197d0:	2f08      	cmp	r7, #8
 80197d2:	f103 0205 	add.w	r2, r3, #5
 80197d6:	eb0b 0100 	add.w	r1, fp, r0
 80197da:	f43f af71 	beq.w	80196c0 <dir_register+0x3a0>
 80197de:	a910      	add	r1, sp, #64	; 0x40
	} while (j < 8);
 80197e0:	2a08      	cmp	r2, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80197e2:	440f      	add	r7, r1
 80197e4:	f105 0103 	add.w	r1, r5, #3
 80197e8:	f817 7c14 	ldrb.w	r7, [r7, #-20]
 80197ec:	f80b 7000 	strb.w	r7, [fp, r0]
	} while (j < 8);
 80197f0:	f43f af7f 	beq.w	80196f2 <dir_register+0x3d2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80197f4:	2908      	cmp	r1, #8
 80197f6:	f43f af67 	beq.w	80196c8 <dir_register+0x3a8>
 80197fa:	a810      	add	r0, sp, #64	; 0x40
 80197fc:	3504      	adds	r5, #4
 80197fe:	4401      	add	r1, r0
 8019800:	1d98      	adds	r0, r3, #6
 8019802:	f811 1c14 	ldrb.w	r1, [r1, #-20]
	} while (j < 8);
 8019806:	2808      	cmp	r0, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8019808:	f80b 1002 	strb.w	r1, [fp, r2]
	} while (j < 8);
 801980c:	f43f af71 	beq.w	80196f2 <dir_register+0x3d2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8019810:	2d08      	cmp	r5, #8
 8019812:	f103 0207 	add.w	r2, r3, #7
 8019816:	eb0b 0100 	add.w	r1, fp, r0
 801981a:	f43f af5d 	beq.w	80196d8 <dir_register+0x3b8>
 801981e:	a910      	add	r1, sp, #64	; 0x40
	} while (j < 8);
 8019820:	2a08      	cmp	r2, #8
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8019822:	4429      	add	r1, r5
 8019824:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8019828:	f80b 1000 	strb.w	r1, [fp, r0]
	} while (j < 8);
 801982c:	f43f af61 	beq.w	80196f2 <dir_register+0x3d2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8019830:	2d06      	cmp	r5, #6
 8019832:	f43f af57 	beq.w	80196e4 <dir_register+0x3c4>
 8019836:	e753      	b.n	80196e0 <dir_register+0x3c0>
		dp->sect++;				/* Next sector */
 8019838:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
 801983a:	f8da 1018 	ldr.w	r1, [sl, #24]
		dp->sect++;				/* Next sector */
 801983e:	f8ca 301c 	str.w	r3, [sl, #28]
		if (!dp->clust) {		/* Static table */
 8019842:	bb11      	cbnz	r1, 801988a <dir_register+0x56a>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8019844:	8932      	ldrh	r2, [r6, #8]
 8019846:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
 801984a:	d823      	bhi.n	8019894 <dir_register+0x574>
				dp->sect = 0; return FR_NO_FILE;
 801984c:	f8ca 101c 	str.w	r1, [sl, #28]
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8019850:	2307      	movs	r3, #7
 8019852:	9301      	str	r3, [sp, #4]
}
 8019854:	9801      	ldr	r0, [sp, #4]
 8019856:	b011      	add	sp, #68	; 0x44
 8019858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ns[i] = '~';
 801985c:	237e      	movs	r3, #126	; 0x7e
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801985e:	2920      	cmp	r1, #32
	ns[i] = '~';
 8019860:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8019864:	f000 82e5 	beq.w	8019e32 <dir_register+0xb12>
		ns[i--] = c;
 8019868:	2506      	movs	r5, #6
 801986a:	e6fa      	b.n	8019662 <dir_register+0x342>
	ns[i] = '~';
 801986c:	237e      	movs	r3, #126	; 0x7e
		ns[i--] = c;
 801986e:	2505      	movs	r5, #5
	ns[i] = '~';
 8019870:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8019874:	2920      	cmp	r1, #32
 8019876:	f47f aef4 	bne.w	8019662 <dir_register+0x342>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801987a:	237e      	movs	r3, #126	; 0x7e
 801987c:	1c69      	adds	r1, r5, #1
 801987e:	f88a 3024 	strb.w	r3, [sl, #36]	; 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8019882:	2300      	movs	r3, #0
 8019884:	f04f 0c01 	mov.w	ip, #1
 8019888:	e77b      	b.n	8019782 <dir_register+0x462>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801988a:	8972      	ldrh	r2, [r6, #10]
 801988c:	3a01      	subs	r2, #1
 801988e:	ea12 2255 	ands.w	r2, r2, r5, lsr #9
 8019892:	d03d      	beq.n	8019910 <dir_register+0x5f0>
 8019894:	f106 0734 	add.w	r7, r6, #52	; 0x34
 8019898:	f8d8 9030 	ldr.w	r9, [r8, #48]	; 0x30
 801989c:	e75d      	b.n	801975a <dir_register+0x43a>
	ns[i] = '~';
 801989e:	237e      	movs	r3, #126	; 0x7e
		ns[i--] = c;
 80198a0:	2504      	movs	r5, #4
	ns[i] = '~';
 80198a2:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 80198a6:	e7e5      	b.n	8019874 <dir_register+0x554>
 80198a8:	237e      	movs	r3, #126	; 0x7e
		ns[i--] = c;
 80198aa:	2503      	movs	r5, #3
	ns[i] = '~';
 80198ac:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 80198b0:	e7e0      	b.n	8019874 <dir_register+0x554>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80198b2:	2301      	movs	r3, #1
 80198b4:	9301      	str	r3, [sp, #4]
 80198b6:	e5b4      	b.n	8019422 <dir_register+0x102>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80198b8:	2804      	cmp	r0, #4
 80198ba:	9d01      	ldr	r5, [sp, #4]
 80198bc:	9001      	str	r0, [sp, #4]
 80198be:	f47f adb0 	bne.w	8019422 <dir_register+0x102>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80198c2:	07aa      	lsls	r2, r5, #30
		dp->fn[NSFLAG] = sn[NSFLAG];
 80198c4:	f88a 502f 	strb.w	r5, [sl, #47]	; 0x2f
 80198c8:	f8da 8000 	ldr.w	r8, [sl]
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80198cc:	f53f ad51 	bmi.w	8019372 <dir_register+0x52>
 80198d0:	2301      	movs	r3, #1
 80198d2:	9303      	str	r3, [sp, #12]
 80198d4:	e555      	b.n	8019382 <dir_register+0x62>
	ns[i] = '~';
 80198d6:	237e      	movs	r3, #126	; 0x7e
		ns[i--] = c;
 80198d8:	2502      	movs	r5, #2
	ns[i] = '~';
 80198da:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 80198de:	e7c9      	b.n	8019874 <dir_register+0x554>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80198e0:	2306      	movs	r3, #6
 80198e2:	9301      	str	r3, [sp, #4]
 80198e4:	e59d      	b.n	8019422 <dir_register+0x102>
	ns[i] = '~';
 80198e6:	237e      	movs	r3, #126	; 0x7e
		ns[i--] = c;
 80198e8:	2501      	movs	r5, #1
	ns[i] = '~';
 80198ea:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 80198ee:	e7c1      	b.n	8019874 <dir_register+0x554>
 80198f0:	227e      	movs	r2, #126	; 0x7e
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80198f2:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
 80198f6:	2002      	movs	r0, #2
	ns[i] = '~';
 80198f8:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80198fc:	f88a 2024 	strb.w	r2, [sl, #36]	; 0x24
 8019900:	4605      	mov	r5, r0
 8019902:	f88a 1025 	strb.w	r1, [sl, #37]	; 0x25
 8019906:	e746      	b.n	8019796 <dir_register+0x476>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8019908:	2804      	cmp	r0, #4
 801990a:	f47f ad8a 	bne.w	8019422 <dir_register+0x102>
 801990e:	e79f      	b.n	8019850 <dir_register+0x530>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8019910:	4630      	mov	r0, r6
 8019912:	f7fe fc51 	bl	80181b8 <get_fat.isra.8>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8019916:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8019918:	9005      	str	r0, [sp, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801991a:	f240 82b6 	bls.w	8019e8a <dir_register+0xb6a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801991e:	1c43      	adds	r3, r0, #1
 8019920:	d0c7      	beq.n	80198b2 <dir_register+0x592>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8019922:	69b3      	ldr	r3, [r6, #24]
 8019924:	4298      	cmp	r0, r3
 8019926:	f0c0 8289 	bcc.w	8019e3c <dir_register+0xb1c>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801992a:	f8da 1018 	ldr.w	r1, [sl, #24]
 801992e:	4650      	mov	r0, sl
 8019930:	f7fe fd68 	bl	8018404 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8019934:	9005      	str	r0, [sp, #20]
 8019936:	2800      	cmp	r0, #0
 8019938:	d08a      	beq.n	8019850 <dir_register+0x530>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801993a:	2801      	cmp	r0, #1
 801993c:	f000 82a5 	beq.w	8019e8a <dir_register+0xb6a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8019940:	1c43      	adds	r3, r0, #1
 8019942:	d0b6      	beq.n	80198b2 <dir_register+0x592>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8019944:	78f3      	ldrb	r3, [r6, #3]
 8019946:	f106 0734 	add.w	r7, r6, #52	; 0x34
 801994a:	2b00      	cmp	r3, #0
 801994c:	f040 82a3 	bne.w	8019e96 <dir_register+0xb76>
	clst -= 2;
 8019950:	9b05      	ldr	r3, [sp, #20]
 8019952:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019956:	2100      	movs	r1, #0
 8019958:	4638      	mov	r0, r7
 801995a:	3b02      	subs	r3, #2
 801995c:	9307      	str	r3, [sp, #28]
 801995e:	f00c fc1c 	bl	802619a <memset>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8019962:	69b3      	ldr	r3, [r6, #24]
 8019964:	9807      	ldr	r0, [sp, #28]
 8019966:	1e99      	subs	r1, r3, #2
 8019968:	8972      	ldrh	r2, [r6, #10]
 801996a:	4288      	cmp	r0, r1
 801996c:	f0c0 82bc 	bcc.w	8019ee8 <dir_register+0xbc8>
 8019970:	f04f 0900 	mov.w	r9, #0
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8019974:	f8c6 9030 	str.w	r9, [r6, #48]	; 0x30
 8019978:	2a00      	cmp	r2, #0
 801997a:	f000 82b2 	beq.w	8019ee2 <dir_register+0xbc2>
 801997e:	2300      	movs	r3, #0
 8019980:	9409      	str	r4, [sp, #36]	; 0x24
 8019982:	9306      	str	r3, [sp, #24]
						fs->wflag = 1;
 8019984:	f04f 0301 	mov.w	r3, #1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8019988:	464a      	mov	r2, r9
 801998a:	4639      	mov	r1, r7
 801998c:	7870      	ldrb	r0, [r6, #1]
						fs->wflag = 1;
 801998e:	70f3      	strb	r3, [r6, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8019990:	2301      	movs	r3, #1
 8019992:	f7fd fd0f 	bl	80173b4 <disk_write>
 8019996:	2800      	cmp	r0, #0
 8019998:	d18b      	bne.n	80198b2 <dir_register+0x592>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801999a:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801999c:	69f3      	ldr	r3, [r6, #28]
 801999e:	eba9 0202 	sub.w	r2, r9, r2
			fs->wflag = 0;
 80199a2:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80199a4:	429a      	cmp	r2, r3
 80199a6:	f080 825d 	bcs.w	8019e64 <dir_register+0xb44>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80199aa:	78b4      	ldrb	r4, [r6, #2]
 80199ac:	2c01      	cmp	r4, #1
 80199ae:	f240 8259 	bls.w	8019e64 <dir_register+0xb44>
					wsect += fs->fsize;
 80199b2:	4499      	add	r9, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80199b4:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 80199b6:	2301      	movs	r3, #1
 80199b8:	4639      	mov	r1, r7
 80199ba:	464a      	mov	r2, r9
 80199bc:	7870      	ldrb	r0, [r6, #1]
 80199be:	f7fd fcf9 	bl	80173b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80199c2:	2c01      	cmp	r4, #1
 80199c4:	f000 824e 	beq.w	8019e64 <dir_register+0xb44>
 80199c8:	69f3      	ldr	r3, [r6, #28]
 80199ca:	e7f2      	b.n	80199b2 <dir_register+0x692>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80199cc:	f242 0020 	movw	r0, #8224	; 0x2020
 80199d0:	f10a 0126 	add.w	r1, sl, #38	; 0x26
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80199d4:	2300      	movs	r3, #0
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80199d6:	2203      	movs	r2, #3
 80199d8:	f8aa 0024 	strh.w	r0, [sl, #36]	; 0x24
 80199dc:	e664      	b.n	80196a8 <dir_register+0x388>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80199de:	461e      	mov	r6, r3
 80199e0:	e4b4      	b.n	801934c <dir_register+0x2c>
 80199e2:	f8dd b020 	ldr.w	fp, [sp, #32]
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80199e6:	2d00      	cmp	r5, #0
 80199e8:	d16b      	bne.n	8019ac2 <dir_register+0x7a2>
	if (sector != fs->winsect) {	/* Window offset changed? */
 80199ea:	9b02      	ldr	r3, [sp, #8]
		res = move_window(fs, dp->sect);
 80199ec:	f8da 601c 	ldr.w	r6, [sl, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 80199f0:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80199f2:	461a      	mov	r2, r3
 80199f4:	42a6      	cmp	r6, r4
 80199f6:	d033      	beq.n	8019a60 <dir_register+0x740>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80199f8:	461d      	mov	r5, r3
 80199fa:	78db      	ldrb	r3, [r3, #3]
 80199fc:	f102 0734 	add.w	r7, r2, #52	; 0x34
 8019a00:	7850      	ldrb	r0, [r2, #1]
 8019a02:	b32b      	cbz	r3, 8019a50 <dir_register+0x730>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8019a04:	2301      	movs	r3, #1
 8019a06:	4622      	mov	r2, r4
 8019a08:	4639      	mov	r1, r7
 8019a0a:	f7fd fcd3 	bl	80173b4 <disk_write>
 8019a0e:	2800      	cmp	r0, #0
 8019a10:	f47f af4f 	bne.w	80198b2 <dir_register+0x592>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8019a14:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8019a16:	4629      	mov	r1, r5
 8019a18:	69eb      	ldr	r3, [r5, #28]
 8019a1a:	1aa2      	subs	r2, r4, r2
			fs->wflag = 0;
 8019a1c:	70e8      	strb	r0, [r5, #3]
 8019a1e:	7868      	ldrb	r0, [r5, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8019a20:	429a      	cmp	r2, r3
 8019a22:	d215      	bcs.n	8019a50 <dir_register+0x730>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8019a24:	78ad      	ldrb	r5, [r5, #2]
 8019a26:	2d01      	cmp	r5, #1
 8019a28:	d912      	bls.n	8019a50 <dir_register+0x730>
 8019a2a:	4688      	mov	r8, r1
					wsect += fs->fsize;
 8019a2c:	441c      	add	r4, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8019a2e:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8019a30:	2301      	movs	r3, #1
 8019a32:	4639      	mov	r1, r7
 8019a34:	4622      	mov	r2, r4
 8019a36:	f7fd fcbd 	bl	80173b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8019a3a:	2d01      	cmp	r5, #1
 8019a3c:	d006      	beq.n	8019a4c <dir_register+0x72c>
 8019a3e:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8019a42:	f898 0001 	ldrb.w	r0, [r8, #1]
 8019a46:	e7f1      	b.n	8019a2c <dir_register+0x70c>
 8019a48:	001fffff 	.word	0x001fffff
 8019a4c:	9b02      	ldr	r3, [sp, #8]
 8019a4e:	7858      	ldrb	r0, [r3, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8019a50:	4639      	mov	r1, r7
 8019a52:	2301      	movs	r3, #1
 8019a54:	4632      	mov	r2, r6
 8019a56:	f7fd fc9f 	bl	8017398 <disk_read>
 8019a5a:	bb58      	cbnz	r0, 8019ab4 <dir_register+0x794>
			fs->winsect = sector;
 8019a5c:	9b02      	ldr	r3, [sp, #8]
 8019a5e:	631e      	str	r6, [r3, #48]	; 0x30
 8019a60:	2220      	movs	r2, #32
 8019a62:	2100      	movs	r1, #0
 8019a64:	f8da 0020 	ldr.w	r0, [sl, #32]
 8019a68:	f00c fb97 	bl	802619a <memset>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8019a6c:	f8da 3020 	ldr.w	r3, [sl, #32]
 8019a70:	f10a 0228 	add.w	r2, sl, #40	; 0x28
 8019a74:	4293      	cmp	r3, r2
 8019a76:	d203      	bcs.n	8019a80 <dir_register+0x760>
 8019a78:	1d1a      	adds	r2, r3, #4
 8019a7a:	4593      	cmp	fp, r2
 8019a7c:	f0c0 81c0 	bcc.w	8019e00 <dir_register+0xae0>
			*d++ = *s++;
 8019a80:	f8da 2024 	ldr.w	r2, [sl, #36]	; 0x24
 8019a84:	601a      	str	r2, [r3, #0]
 8019a86:	f8da 2028 	ldr.w	r2, [sl, #40]	; 0x28
 8019a8a:	605a      	str	r2, [r3, #4]
 8019a8c:	f89a 202c 	ldrb.w	r2, [sl, #44]	; 0x2c
 8019a90:	721a      	strb	r2, [r3, #8]
 8019a92:	f89a 202d 	ldrb.w	r2, [sl, #45]	; 0x2d
 8019a96:	725a      	strb	r2, [r3, #9]
 8019a98:	f89a 202e 	ldrb.w	r2, [sl, #46]	; 0x2e
 8019a9c:	729a      	strb	r2, [r3, #10]
			fs->wflag = 1;
 8019a9e:	2201      	movs	r2, #1
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8019aa0:	f89a 302f 	ldrb.w	r3, [sl, #47]	; 0x2f
 8019aa4:	f8da 1020 	ldr.w	r1, [sl, #32]
 8019aa8:	f003 0318 	and.w	r3, r3, #24
 8019aac:	730b      	strb	r3, [r1, #12]
			fs->wflag = 1;
 8019aae:	9b02      	ldr	r3, [sp, #8]
 8019ab0:	70da      	strb	r2, [r3, #3]
 8019ab2:	e4b6      	b.n	8019422 <dir_register+0x102>
				res = FR_DISK_ERR;
 8019ab4:	2201      	movs	r2, #1
			fs->winsect = sector;
 8019ab6:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 8019aba:	9201      	str	r2, [sp, #4]
			fs->winsect = sector;
 8019abc:	9a02      	ldr	r2, [sp, #8]
 8019abe:	6313      	str	r3, [r2, #48]	; 0x30
 8019ac0:	e4af      	b.n	8019422 <dir_register+0x102>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8019ac2:	f8da 1014 	ldr.w	r1, [sl, #20]
 8019ac6:	4650      	mov	r0, sl
 8019ac8:	eba1 1145 	sub.w	r1, r1, r5, lsl #5
 8019acc:	f7fe f9dc 	bl	8017e88 <dir_sdi>
		if (res == FR_OK) {
 8019ad0:	2800      	cmp	r0, #0
 8019ad2:	f040 8192 	bne.w	8019dfa <dir_register+0xada>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8019ad6:	f89a 2024 	ldrb.w	r2, [sl, #36]	; 0x24
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8019ada:	f04f 0901 	mov.w	r9, #1
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8019ade:	f89a 1025 	ldrb.w	r1, [sl, #37]	; 0x25
 8019ae2:	01d3      	lsls	r3, r2, #7
 8019ae4:	f89a 4026 	ldrb.w	r4, [sl, #38]	; 0x26
 8019ae8:	f89a 0027 	ldrb.w	r0, [sl, #39]	; 0x27
 8019aec:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 8019af0:	9e02      	ldr	r6, [sp, #8]
 8019af2:	f8cd b010 	str.w	fp, [sp, #16]
 8019af6:	185a      	adds	r2, r3, r1
 8019af8:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8019afc:	f106 0834 	add.w	r8, r6, #52	; 0x34
 8019b00:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8019b04:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8019b08:	fa54 f283 	uxtab	r2, r4, r3
 8019b0c:	f89a 4029 	ldrb.w	r4, [sl, #41]	; 0x29
 8019b10:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8019b14:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8019b18:	fa50 f283 	uxtab	r2, r0, r3
 8019b1c:	f89a 002a 	ldrb.w	r0, [sl, #42]	; 0x2a
 8019b20:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8019b24:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8019b28:	fa51 f283 	uxtab	r2, r1, r3
 8019b2c:	f89a 102b 	ldrb.w	r1, [sl, #43]	; 0x2b
 8019b30:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8019b34:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8019b38:	fa54 f283 	uxtab	r2, r4, r3
 8019b3c:	f89a 402c 	ldrb.w	r4, [sl, #44]	; 0x2c
 8019b40:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8019b44:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8019b48:	fa50 f283 	uxtab	r2, r0, r3
 8019b4c:	f89a 002d 	ldrb.w	r0, [sl, #45]	; 0x2d
 8019b50:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8019b54:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8019b58:	fa51 f283 	uxtab	r2, r1, r3
 8019b5c:	f89a 102e 	ldrb.w	r1, [sl, #46]	; 0x2e
 8019b60:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8019b64:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8019b68:	fa54 f283 	uxtab	r2, r4, r3
 8019b6c:	4634      	mov	r4, r6
 8019b6e:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8019b72:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8019b76:	fa50 f383 	uxtab	r3, r0, r3
 8019b7a:	f3c3 0246 	ubfx	r2, r3, #1, #7
 8019b7e:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
 8019b82:	fa51 f183 	uxtab	r1, r1, r3
 8019b86:	b2cb      	uxtb	r3, r1
 8019b88:	9303      	str	r3, [sp, #12]
				res = move_window(fs, dp->sect);
 8019b8a:	f8da b01c 	ldr.w	fp, [sl, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8019b8e:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8019b90:	45b3      	cmp	fp, r6
 8019b92:	d01e      	beq.n	8019bd2 <dir_register+0x8b2>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8019b94:	78e3      	ldrb	r3, [r4, #3]
 8019b96:	7860      	ldrb	r0, [r4, #1]
 8019b98:	b18b      	cbz	r3, 8019bbe <dir_register+0x89e>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8019b9a:	2301      	movs	r3, #1
 8019b9c:	4632      	mov	r2, r6
 8019b9e:	4641      	mov	r1, r8
 8019ba0:	f7fd fc08 	bl	80173b4 <disk_write>
 8019ba4:	2800      	cmp	r0, #0
 8019ba6:	f47f ae84 	bne.w	80198b2 <dir_register+0x592>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8019baa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8019bac:	69e3      	ldr	r3, [r4, #28]
 8019bae:	1ab2      	subs	r2, r6, r2
			fs->wflag = 0;
 8019bb0:	70e0      	strb	r0, [r4, #3]
 8019bb2:	7860      	ldrb	r0, [r4, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8019bb4:	429a      	cmp	r2, r3
 8019bb6:	d202      	bcs.n	8019bbe <dir_register+0x89e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8019bb8:	78a7      	ldrb	r7, [r4, #2]
 8019bba:	2f01      	cmp	r7, #1
 8019bbc:	d85d      	bhi.n	8019c7a <dir_register+0x95a>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8019bbe:	2301      	movs	r3, #1
 8019bc0:	465a      	mov	r2, fp
 8019bc2:	4641      	mov	r1, r8
 8019bc4:	f7fd fbe8 	bl	8017398 <disk_read>
 8019bc8:	2800      	cmp	r0, #0
 8019bca:	f47f af73 	bne.w	8019ab4 <dir_register+0x794>
			fs->winsect = sector;
 8019bce:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8019bd2:	b2ee      	uxtb	r6, r5
 8019bd4:	f8da 3020 	ldr.w	r3, [sl, #32]
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8019bd8:	9f03      	ldr	r7, [sp, #12]
	dir[LDIR_Type] = 0;
 8019bda:	2000      	movs	r0, #0
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8019bdc:	1e72      	subs	r2, r6, #1
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8019bde:	68e1      	ldr	r1, [r4, #12]
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8019be0:	735f      	strb	r7, [r3, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8019be2:	f04f 0c0f 	mov.w	ip, #15
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8019be6:	eb02 0742 	add.w	r7, r2, r2, lsl #1
	dir[LDIR_Type] = 0;
 8019bea:	7318      	strb	r0, [r3, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 8019bec:	7698      	strb	r0, [r3, #26]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8019bee:	eb02 0287 	add.w	r2, r2, r7, lsl #2
	*ptr++ = (BYTE)val;
 8019bf2:	76d8      	strb	r0, [r3, #27]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8019bf4:	f883 c00b 	strb.w	ip, [r3, #11]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8019bf8:	f831 c012 	ldrh.w	ip, [r1, r2, lsl #1]
 8019bfc:	0057      	lsls	r7, r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8019bfe:	ea4f 201c 	mov.w	r0, ip, lsr #8
 8019c02:	f883 c001 	strb.w	ip, [r3, #1]
	*ptr++ = (BYTE)val;
 8019c06:	7098      	strb	r0, [r3, #2]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8019c08:	f1bc 0f00 	cmp.w	ip, #0
 8019c0c:	d140      	bne.n	8019c90 <dir_register+0x970>
	*ptr++ = (BYTE)val; val >>= 8;
 8019c0e:	22ff      	movs	r2, #255	; 0xff
 8019c10:	70da      	strb	r2, [r3, #3]
	*ptr++ = (BYTE)val;
 8019c12:	711a      	strb	r2, [r3, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8019c14:	22ff      	movs	r2, #255	; 0xff
 8019c16:	715a      	strb	r2, [r3, #5]
	*ptr++ = (BYTE)val;
 8019c18:	719a      	strb	r2, [r3, #6]
	*ptr++ = (BYTE)val; val >>= 8;
 8019c1a:	22ff      	movs	r2, #255	; 0xff
 8019c1c:	71da      	strb	r2, [r3, #7]
	*ptr++ = (BYTE)val;
 8019c1e:	721a      	strb	r2, [r3, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 8019c20:	22ff      	movs	r2, #255	; 0xff
 8019c22:	725a      	strb	r2, [r3, #9]
	*ptr++ = (BYTE)val;
 8019c24:	729a      	strb	r2, [r3, #10]
	*ptr++ = (BYTE)val; val >>= 8;
 8019c26:	22ff      	movs	r2, #255	; 0xff
 8019c28:	739a      	strb	r2, [r3, #14]
	*ptr++ = (BYTE)val;
 8019c2a:	73da      	strb	r2, [r3, #15]
	*ptr++ = (BYTE)val; val >>= 8;
 8019c2c:	22ff      	movs	r2, #255	; 0xff
 8019c2e:	741a      	strb	r2, [r3, #16]
	*ptr++ = (BYTE)val;
 8019c30:	745a      	strb	r2, [r3, #17]
	*ptr++ = (BYTE)val; val >>= 8;
 8019c32:	22ff      	movs	r2, #255	; 0xff
 8019c34:	749a      	strb	r2, [r3, #18]
	*ptr++ = (BYTE)val;
 8019c36:	74da      	strb	r2, [r3, #19]
	*ptr++ = (BYTE)val; val >>= 8;
 8019c38:	22ff      	movs	r2, #255	; 0xff
 8019c3a:	751a      	strb	r2, [r3, #20]
	*ptr++ = (BYTE)val;
 8019c3c:	755a      	strb	r2, [r3, #21]
	*ptr++ = (BYTE)val; val >>= 8;
 8019c3e:	22ff      	movs	r2, #255	; 0xff
 8019c40:	759a      	strb	r2, [r3, #22]
	*ptr++ = (BYTE)val;
 8019c42:	75da      	strb	r2, [r3, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 8019c44:	22ff      	movs	r2, #255	; 0xff
 8019c46:	761a      	strb	r2, [r3, #24]
	*ptr++ = (BYTE)val;
 8019c48:	765a      	strb	r2, [r3, #25]
	*ptr++ = (BYTE)val; val >>= 8;
 8019c4a:	22ff      	movs	r2, #255	; 0xff
 8019c4c:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val;
 8019c4e:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 8019c50:	22ff      	movs	r2, #255	; 0xff
 8019c52:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 8019c54:	77da      	strb	r2, [r3, #31]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8019c56:	f046 0640 	orr.w	r6, r6, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8019c5a:	701e      	strb	r6, [r3, #0]
				res = dir_next(dp, 0);	/* Next entry */
 8019c5c:	4650      	mov	r0, sl
				fs->wflag = 1;
 8019c5e:	f884 9003 	strb.w	r9, [r4, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8019c62:	f7fe fd87 	bl	8018774 <dir_next.constprop.16>
			} while (res == FR_OK && --nent);
 8019c66:	2800      	cmp	r0, #0
 8019c68:	f040 80c7 	bne.w	8019dfa <dir_register+0xada>
 8019c6c:	3d01      	subs	r5, #1
 8019c6e:	d18c      	bne.n	8019b8a <dir_register+0x86a>
 8019c70:	f8dd b010 	ldr.w	fp, [sp, #16]
 8019c74:	e6b9      	b.n	80199ea <dir_register+0x6ca>
 8019c76:	69e3      	ldr	r3, [r4, #28]
 8019c78:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 8019c7a:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8019c7c:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8019c7e:	2301      	movs	r3, #1
 8019c80:	4641      	mov	r1, r8
 8019c82:	4632      	mov	r2, r6
 8019c84:	f7fd fb96 	bl	80173b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8019c88:	2f01      	cmp	r7, #1
 8019c8a:	d1f4      	bne.n	8019c76 <dir_register+0x956>
 8019c8c:	7860      	ldrb	r0, [r4, #1]
 8019c8e:	e796      	b.n	8019bbe <dir_register+0x89e>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8019c90:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8019c94:	4584      	cmp	ip, r0
 8019c96:	d0ba      	beq.n	8019c0e <dir_register+0x8ee>
 8019c98:	3201      	adds	r2, #1
 8019c9a:	f831 c012 	ldrh.w	ip, [r1, r2, lsl #1]
 8019c9e:	0052      	lsls	r2, r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8019ca0:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8019ca4:	f883 c003 	strb.w	ip, [r3, #3]
	*ptr++ = (BYTE)val;
 8019ca8:	f883 e004 	strb.w	lr, [r3, #4]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8019cac:	f1bc 0f00 	cmp.w	ip, #0
 8019cb0:	d0b0      	beq.n	8019c14 <dir_register+0x8f4>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8019cb2:	4584      	cmp	ip, r0
 8019cb4:	d0ae      	beq.n	8019c14 <dir_register+0x8f4>
 8019cb6:	440a      	add	r2, r1
 8019cb8:	f8b2 c002 	ldrh.w	ip, [r2, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8019cbc:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8019cc0:	f883 c005 	strb.w	ip, [r3, #5]
	*ptr++ = (BYTE)val;
 8019cc4:	f883 e006 	strb.w	lr, [r3, #6]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8019cc8:	f1bc 0f00 	cmp.w	ip, #0
 8019ccc:	d0a5      	beq.n	8019c1a <dir_register+0x8fa>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8019cce:	4584      	cmp	ip, r0
 8019cd0:	d0a3      	beq.n	8019c1a <dir_register+0x8fa>
 8019cd2:	f8b2 c004 	ldrh.w	ip, [r2, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8019cd6:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8019cda:	f883 c007 	strb.w	ip, [r3, #7]
	*ptr++ = (BYTE)val;
 8019cde:	f883 e008 	strb.w	lr, [r3, #8]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8019ce2:	f1bc 0f00 	cmp.w	ip, #0
 8019ce6:	d09b      	beq.n	8019c20 <dir_register+0x900>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8019ce8:	4584      	cmp	ip, r0
 8019cea:	d099      	beq.n	8019c20 <dir_register+0x900>
 8019cec:	f8b2 c006 	ldrh.w	ip, [r2, #6]
	*ptr++ = (BYTE)val; val >>= 8;
 8019cf0:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8019cf4:	f883 c009 	strb.w	ip, [r3, #9]
	*ptr++ = (BYTE)val;
 8019cf8:	f883 e00a 	strb.w	lr, [r3, #10]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8019cfc:	f1bc 0f00 	cmp.w	ip, #0
 8019d00:	d091      	beq.n	8019c26 <dir_register+0x906>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8019d02:	4584      	cmp	ip, r0
 8019d04:	d08f      	beq.n	8019c26 <dir_register+0x906>
 8019d06:	f8b2 c008 	ldrh.w	ip, [r2, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 8019d0a:	ea4f 201c 	mov.w	r0, ip, lsr #8
 8019d0e:	f883 c00e 	strb.w	ip, [r3, #14]
	*ptr++ = (BYTE)val;
 8019d12:	73d8      	strb	r0, [r3, #15]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8019d14:	f1bc 0f00 	cmp.w	ip, #0
 8019d18:	d088      	beq.n	8019c2c <dir_register+0x90c>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8019d1a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8019d1e:	4584      	cmp	ip, r0
 8019d20:	d084      	beq.n	8019c2c <dir_register+0x90c>
 8019d22:	f8b2 c00a 	ldrh.w	ip, [r2, #10]
	*ptr++ = (BYTE)val; val >>= 8;
 8019d26:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8019d2a:	f883 c010 	strb.w	ip, [r3, #16]
	*ptr++ = (BYTE)val;
 8019d2e:	f883 e011 	strb.w	lr, [r3, #17]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8019d32:	f1bc 0f00 	cmp.w	ip, #0
 8019d36:	f43f af7c 	beq.w	8019c32 <dir_register+0x912>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8019d3a:	4584      	cmp	ip, r0
 8019d3c:	f43f af79 	beq.w	8019c32 <dir_register+0x912>
 8019d40:	f8b2 c00c 	ldrh.w	ip, [r2, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 8019d44:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8019d48:	f883 c012 	strb.w	ip, [r3, #18]
	*ptr++ = (BYTE)val;
 8019d4c:	f883 e013 	strb.w	lr, [r3, #19]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8019d50:	f1bc 0f00 	cmp.w	ip, #0
 8019d54:	f43f af70 	beq.w	8019c38 <dir_register+0x918>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8019d58:	4584      	cmp	ip, r0
 8019d5a:	f43f af6d 	beq.w	8019c38 <dir_register+0x918>
 8019d5e:	f8b2 c00e 	ldrh.w	ip, [r2, #14]
	*ptr++ = (BYTE)val; val >>= 8;
 8019d62:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8019d66:	f883 c014 	strb.w	ip, [r3, #20]
	*ptr++ = (BYTE)val;
 8019d6a:	f883 e015 	strb.w	lr, [r3, #21]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8019d6e:	f1bc 0f00 	cmp.w	ip, #0
 8019d72:	f43f af64 	beq.w	8019c3e <dir_register+0x91e>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8019d76:	4584      	cmp	ip, r0
 8019d78:	f43f af61 	beq.w	8019c3e <dir_register+0x91e>
 8019d7c:	f8b2 c010 	ldrh.w	ip, [r2, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 8019d80:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8019d84:	f883 c016 	strb.w	ip, [r3, #22]
	*ptr++ = (BYTE)val;
 8019d88:	f883 e017 	strb.w	lr, [r3, #23]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8019d8c:	f1bc 0f00 	cmp.w	ip, #0
 8019d90:	f43f af58 	beq.w	8019c44 <dir_register+0x924>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8019d94:	4584      	cmp	ip, r0
 8019d96:	f43f af55 	beq.w	8019c44 <dir_register+0x924>
 8019d9a:	8a50      	ldrh	r0, [r2, #18]
	*ptr++ = (BYTE)val; val >>= 8;
 8019d9c:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 8019da0:	7618      	strb	r0, [r3, #24]
	*ptr++ = (BYTE)val;
 8019da2:	f883 c019 	strb.w	ip, [r3, #25]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8019da6:	2800      	cmp	r0, #0
 8019da8:	f43f af4f 	beq.w	8019c4a <dir_register+0x92a>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8019dac:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8019db0:	4560      	cmp	r0, ip
 8019db2:	f43f af4a 	beq.w	8019c4a <dir_register+0x92a>
 8019db6:	8a90      	ldrh	r0, [r2, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 8019db8:	ea4f 2e10 	mov.w	lr, r0, lsr #8
 8019dbc:	7718      	strb	r0, [r3, #28]
	*ptr++ = (BYTE)val;
 8019dbe:	f883 e01d 	strb.w	lr, [r3, #29]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8019dc2:	2800      	cmp	r0, #0
 8019dc4:	f43f af44 	beq.w	8019c50 <dir_register+0x930>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8019dc8:	4560      	cmp	r0, ip
 8019dca:	f43f af41 	beq.w	8019c50 <dir_register+0x930>
 8019dce:	f8b2 e016 	ldrh.w	lr, [r2, #22]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8019dd2:	f64f 70fd 	movw	r0, #65533	; 0xfffd
 8019dd6:	f10e 32ff 	add.w	r2, lr, #4294967295
	*ptr++ = (BYTE)val; val >>= 8;
 8019dda:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8019dde:	f883 e01e 	strb.w	lr, [r3, #30]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8019de2:	b292      	uxth	r2, r2
	*ptr++ = (BYTE)val;
 8019de4:	f883 c01f 	strb.w	ip, [r3, #31]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8019de8:	4282      	cmp	r2, r0
 8019dea:	f63f af34 	bhi.w	8019c56 <dir_register+0x936>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8019dee:	4439      	add	r1, r7
 8019df0:	8b4a      	ldrh	r2, [r1, #26]
 8019df2:	2a00      	cmp	r2, #0
 8019df4:	f43f af2f 	beq.w	8019c56 <dir_register+0x936>
 8019df8:	e72f      	b.n	8019c5a <dir_register+0x93a>
 8019dfa:	9001      	str	r0, [sp, #4]
 8019dfc:	f7ff bb11 	b.w	8019422 <dir_register+0x102>
			*d++ = *s++;
 8019e00:	f89a 2024 	ldrb.w	r2, [sl, #36]	; 0x24
 8019e04:	701a      	strb	r2, [r3, #0]
 8019e06:	f89a 2025 	ldrb.w	r2, [sl, #37]	; 0x25
 8019e0a:	705a      	strb	r2, [r3, #1]
 8019e0c:	f89a 2026 	ldrb.w	r2, [sl, #38]	; 0x26
 8019e10:	709a      	strb	r2, [r3, #2]
 8019e12:	f89a 2027 	ldrb.w	r2, [sl, #39]	; 0x27
 8019e16:	70da      	strb	r2, [r3, #3]
 8019e18:	f89a 2028 	ldrb.w	r2, [sl, #40]	; 0x28
 8019e1c:	711a      	strb	r2, [r3, #4]
 8019e1e:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
 8019e22:	715a      	strb	r2, [r3, #5]
 8019e24:	f89a 202a 	ldrb.w	r2, [sl, #42]	; 0x2a
 8019e28:	719a      	strb	r2, [r3, #6]
 8019e2a:	f89a 202b 	ldrb.w	r2, [sl, #43]	; 0x2b
 8019e2e:	71da      	strb	r2, [r3, #7]
 8019e30:	e62c      	b.n	8019a8c <dir_register+0x76c>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8019e32:	f88a 3024 	strb.w	r3, [sl, #36]	; 0x24
 8019e36:	2107      	movs	r1, #7
		ns[i--] = c;
 8019e38:	2506      	movs	r5, #6
 8019e3a:	e522      	b.n	8019882 <dir_register+0x562>
 8019e3c:	1e82      	subs	r2, r0, #2
 8019e3e:	f106 0734 	add.w	r7, r6, #52	; 0x34
 8019e42:	4611      	mov	r1, r2
 8019e44:	9207      	str	r2, [sp, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8019e46:	3b02      	subs	r3, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 8019e48:	9a05      	ldr	r2, [sp, #20]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8019e4a:	4299      	cmp	r1, r3
				dp->clust = clst;		/* Initialize data for new cluster */
 8019e4c:	f8ca 2018 	str.w	r2, [sl, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8019e50:	d21f      	bcs.n	8019e92 <dir_register+0xb72>
	return clst * fs->csize + fs->database;
 8019e52:	8972      	ldrh	r2, [r6, #10]
 8019e54:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8019e56:	fb01 3302 	mla	r3, r1, r2, r3
 8019e5a:	f8d8 9030 	ldr.w	r9, [r8, #48]	; 0x30
				dp->sect = clust2sect(fs, clst);
 8019e5e:	f8ca 301c 	str.w	r3, [sl, #28]
 8019e62:	e47a      	b.n	801975a <dir_register+0x43a>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8019e64:	9b06      	ldr	r3, [sp, #24]
 8019e66:	6b32      	ldr	r2, [r6, #48]	; 0x30
 8019e68:	3301      	adds	r3, #1
 8019e6a:	3201      	adds	r2, #1
 8019e6c:	4619      	mov	r1, r3
 8019e6e:	9306      	str	r3, [sp, #24]
 8019e70:	8973      	ldrh	r3, [r6, #10]
 8019e72:	4691      	mov	r9, r2
 8019e74:	6332      	str	r2, [r6, #48]	; 0x30
 8019e76:	4299      	cmp	r1, r3
 8019e78:	f4ff ad84 	bcc.w	8019984 <dir_register+0x664>
 8019e7c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8019e7e:	69b3      	ldr	r3, [r6, #24]
					fs->winsect -= n;							/* Restore window offset */
 8019e80:	9906      	ldr	r1, [sp, #24]
 8019e82:	1a52      	subs	r2, r2, r1
 8019e84:	9907      	ldr	r1, [sp, #28]
 8019e86:	6332      	str	r2, [r6, #48]	; 0x30
 8019e88:	e7dd      	b.n	8019e46 <dir_register+0xb26>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8019e8a:	2302      	movs	r3, #2
 8019e8c:	9301      	str	r3, [sp, #4]
 8019e8e:	f7ff bac8 	b.w	8019422 <dir_register+0x102>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8019e92:	2300      	movs	r3, #0
 8019e94:	e7e1      	b.n	8019e5a <dir_register+0xb3a>
		wsect = fs->winsect;	/* Current sector number */
 8019e96:	f8d6 9030 	ldr.w	r9, [r6, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8019e9a:	2301      	movs	r3, #1
 8019e9c:	4639      	mov	r1, r7
 8019e9e:	7870      	ldrb	r0, [r6, #1]
 8019ea0:	464a      	mov	r2, r9
 8019ea2:	f7fd fa87 	bl	80173b4 <disk_write>
 8019ea6:	2800      	cmp	r0, #0
 8019ea8:	f47f ad03 	bne.w	80198b2 <dir_register+0x592>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8019eac:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8019eae:	69f2      	ldr	r2, [r6, #28]
 8019eb0:	eba9 0303 	sub.w	r3, r9, r3
			fs->wflag = 0;
 8019eb4:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8019eb6:	4293      	cmp	r3, r2
 8019eb8:	f4bf ad4a 	bcs.w	8019950 <dir_register+0x630>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8019ebc:	78b3      	ldrb	r3, [r6, #2]
 8019ebe:	9306      	str	r3, [sp, #24]
 8019ec0:	9b06      	ldr	r3, [sp, #24]
					disk_write(fs->drv, fs->win, wsect, 1);
 8019ec2:	4639      	mov	r1, r7
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8019ec4:	2b01      	cmp	r3, #1
 8019ec6:	f103 33ff 	add.w	r3, r3, #4294967295
 8019eca:	9306      	str	r3, [sp, #24]
					disk_write(fs->drv, fs->win, wsect, 1);
 8019ecc:	f04f 0301 	mov.w	r3, #1
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8019ed0:	f67f ad3e 	bls.w	8019950 <dir_register+0x630>
					wsect += fs->fsize;
 8019ed4:	69f2      	ldr	r2, [r6, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 8019ed6:	7870      	ldrb	r0, [r6, #1]
					wsect += fs->fsize;
 8019ed8:	4491      	add	r9, r2
					disk_write(fs->drv, fs->win, wsect, 1);
 8019eda:	464a      	mov	r2, r9
 8019edc:	f7fd fa6a 	bl	80173b4 <disk_write>
 8019ee0:	e7ee      	b.n	8019ec0 <dir_register+0xba0>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8019ee2:	9206      	str	r2, [sp, #24]
 8019ee4:	464a      	mov	r2, r9
 8019ee6:	e7cb      	b.n	8019e80 <dir_register+0xb60>
	return clst * fs->csize + fs->database;
 8019ee8:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8019eea:	9807      	ldr	r0, [sp, #28]
 8019eec:	fb02 1900 	mla	r9, r2, r0, r1
 8019ef0:	e540      	b.n	8019974 <dir_register+0x654>
 8019ef2:	bf00      	nop

08019ef4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8019ef4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8019ef8:	2300      	movs	r3, #0
	if (*path) {	/* If the pointer is not a null */
 8019efa:	6805      	ldr	r5, [r0, #0]
{
 8019efc:	b085      	sub	sp, #20
	*rfs = 0;
 8019efe:	600b      	str	r3, [r1, #0]
	if (*path) {	/* If the pointer is not a null */
 8019f00:	2d00      	cmp	r5, #0
 8019f02:	f000 828a 	beq.w	801a41a <find_volume+0x526>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8019f06:	782e      	ldrb	r6, [r5, #0]
 8019f08:	2e1f      	cmp	r6, #31
 8019f0a:	f240 81d8 	bls.w	801a2be <find_volume+0x3ca>
 8019f0e:	2e3a      	cmp	r6, #58	; 0x3a
 8019f10:	f000 81d5 	beq.w	801a2be <find_volume+0x3ca>
 8019f14:	462c      	mov	r4, r5
 8019f16:	e001      	b.n	8019f1c <find_volume+0x28>
 8019f18:	2b3a      	cmp	r3, #58	; 0x3a
 8019f1a:	d003      	beq.n	8019f24 <find_volume+0x30>
 8019f1c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8019f20:	2b1f      	cmp	r3, #31
 8019f22:	d8f9      	bhi.n	8019f18 <find_volume+0x24>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8019f24:	2b3a      	cmp	r3, #58	; 0x3a
 8019f26:	f000 8119 	beq.w	801a15c <find_volume+0x268>
		vol = 0;		/* Drive 0 */
 8019f2a:	2600      	movs	r6, #0
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8019f2c:	4bc2      	ldr	r3, [pc, #776]	; (801a238 <find_volume+0x344>)
 8019f2e:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8019f32:	2c00      	cmp	r4, #0
 8019f34:	f000 8122 	beq.w	801a17c <find_volume+0x288>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8019f38:	600c      	str	r4, [r1, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8019f3a:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8019f3e:	7823      	ldrb	r3, [r4, #0]
 8019f40:	b173      	cbz	r3, 8019f60 <find_volume+0x6c>
		stat = disk_status(fs->drv);
 8019f42:	7860      	ldrb	r0, [r4, #1]
 8019f44:	f7fd fa0a 	bl	801735c <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8019f48:	07c1      	lsls	r1, r0, #31
 8019f4a:	d409      	bmi.n	8019f60 <find_volume+0x6c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8019f4c:	2d00      	cmp	r5, #0
 8019f4e:	f000 8103 	beq.w	801a158 <find_volume+0x264>
 8019f52:	f010 0004 	ands.w	r0, r0, #4
 8019f56:	f040 811e 	bne.w	801a196 <find_volume+0x2a2>
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 8019f5a:	b005      	add	sp, #20
 8019f5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8019f60:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 8019f62:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8019f64:	7060      	strb	r0, [r4, #1]
	fs->fs_type = 0;					/* Clear the file system object */
 8019f66:	7023      	strb	r3, [r4, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8019f68:	f7fd fa02 	bl	8017370 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8019f6c:	07c2      	lsls	r2, r0, #31
 8019f6e:	f100 8109 	bmi.w	801a184 <find_volume+0x290>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8019f72:	b115      	cbz	r5, 8019f7a <find_volume+0x86>
 8019f74:	0743      	lsls	r3, r0, #29
 8019f76:	f100 810e 	bmi.w	801a196 <find_volume+0x2a2>
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8019f7a:	2200      	movs	r2, #0
 8019f7c:	f04f 35ff 	mov.w	r5, #4294967295
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8019f80:	f104 0634 	add.w	r6, r4, #52	; 0x34
 8019f84:	2301      	movs	r3, #1
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8019f86:	70e2      	strb	r2, [r4, #3]
 8019f88:	6325      	str	r5, [r4, #48]	; 0x30
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8019f8a:	4631      	mov	r1, r6
 8019f8c:	7860      	ldrb	r0, [r4, #1]
 8019f8e:	f7fd fa03 	bl	8017398 <disk_read>
 8019f92:	2800      	cmp	r0, #0
 8019f94:	f040 80fa 	bne.w	801a18c <find_volume+0x298>
	rv = rv << 8 | ptr[0];
 8019f98:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8019f9c:	f64a 2155 	movw	r1, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
 8019fa0:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
			fs->winsect = sector;
 8019fa4:	6320      	str	r0, [r4, #48]	; 0x30
	rv = rv << 8 | ptr[0];
 8019fa6:	ea43 2002 	orr.w	r0, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8019faa:	4288      	cmp	r0, r1
 8019fac:	f040 8183 	bne.w	801a2b6 <find_volume+0x3c2>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8019fb0:	f894 7034 	ldrb.w	r7, [r4, #52]	; 0x34
 8019fb4:	2fe9      	cmp	r7, #233	; 0xe9
 8019fb6:	d006      	beq.n	8019fc6 <find_volume+0xd2>
 8019fb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019fba:	48a0      	ldr	r0, [pc, #640]	; (801a23c <find_volume+0x348>)
 8019fbc:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8019fc0:	4281      	cmp	r1, r0
 8019fc2:	f040 80ec 	bne.w	801a19e <find_volume+0x2aa>
	rv = rv << 8 | ptr[2];
 8019fc6:	f8b4 506c 	ldrh.w	r5, [r4, #108]	; 0x6c
	rv = rv << 8 | ptr[1];
 8019fca:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
	rv = rv << 8 | ptr[0];
 8019fce:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
	rv = rv << 8 | ptr[1];
 8019fd2:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8019fd6:	4d9a      	ldr	r5, [pc, #616]	; (801a240 <find_volume+0x34c>)
	rv = rv << 8 | ptr[0];
 8019fd8:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8019fdc:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8019fe0:	42a9      	cmp	r1, r5
 8019fe2:	d00d      	beq.n	801a000 <find_volume+0x10c>
	rv = rv << 8 | ptr[2];
 8019fe4:	f8b4 5088 	ldrh.w	r5, [r4, #136]	; 0x88
	rv = rv << 8 | ptr[1];
 8019fe8:	f894 0087 	ldrb.w	r0, [r4, #135]	; 0x87
	rv = rv << 8 | ptr[0];
 8019fec:	f894 1086 	ldrb.w	r1, [r4, #134]	; 0x86
	rv = rv << 8 | ptr[1];
 8019ff0:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8019ff4:	4d93      	ldr	r5, [pc, #588]	; (801a244 <find_volume+0x350>)
	rv = rv << 8 | ptr[0];
 8019ff6:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8019ffa:	42a9      	cmp	r1, r5
 8019ffc:	f040 80cf 	bne.w	801a19e <find_volume+0x2aa>
	bsect = 0;
 801a000:	2500      	movs	r5, #0
	rv = rv << 8 | ptr[0];
 801a002:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 801a006:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
 801a00a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801a00e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801a012:	f040 8150 	bne.w	801a2b6 <find_volume+0x3c2>
	rv = rv << 8 | ptr[0];
 801a016:	f894 004b 	ldrb.w	r0, [r4, #75]	; 0x4b
 801a01a:	f894 104a 	ldrb.w	r1, [r4, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801a01e:	ea51 2100 	orrs.w	r1, r1, r0, lsl #8
 801a022:	d109      	bne.n	801a038 <find_volume+0x144>
	rv = rv << 8 | ptr[2];
 801a024:	f8b4 605a 	ldrh.w	r6, [r4, #90]	; 0x5a
	rv = rv << 8 | ptr[1];
 801a028:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
	rv = rv << 8 | ptr[0];
 801a02c:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
	rv = rv << 8 | ptr[1];
 801a030:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
	rv = rv << 8 | ptr[0];
 801a034:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801a038:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
		fs->fsize = fasize;
 801a03c:	61e1      	str	r1, [r4, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801a03e:	1e70      	subs	r0, r6, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801a040:	70a6      	strb	r6, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801a042:	2801      	cmp	r0, #1
 801a044:	f200 8137 	bhi.w	801a2b6 <find_volume+0x3c2>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801a048:	f894 e041 	ldrb.w	lr, [r4, #65]	; 0x41
 801a04c:	fa1f f08e 	uxth.w	r0, lr
 801a050:	8160      	strh	r0, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801a052:	2800      	cmp	r0, #0
 801a054:	f000 812f 	beq.w	801a2b6 <find_volume+0x3c2>
 801a058:	f10e 30ff 	add.w	r0, lr, #4294967295
 801a05c:	ea10 0f0e 	tst.w	r0, lr
 801a060:	f040 8129 	bne.w	801a2b6 <find_volume+0x3c2>
	rv = rv << 8 | ptr[0];
 801a064:	f894 0046 	ldrb.w	r0, [r4, #70]	; 0x46
 801a068:	f894 c045 	ldrb.w	ip, [r4, #69]	; 0x45
 801a06c:	ea4c 2c00 	orr.w	ip, ip, r0, lsl #8
 801a070:	fa0f fc8c 	sxth.w	ip, ip
 801a074:	fa1f f88c 	uxth.w	r8, ip
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801a078:	f018 0f0f 	tst.w	r8, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801a07c:	f8a4 8008 	strh.w	r8, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801a080:	f040 8119 	bne.w	801a2b6 <find_volume+0x3c2>
	rv = rv << 8 | ptr[0];
 801a084:	f894 7048 	ldrb.w	r7, [r4, #72]	; 0x48
 801a088:	f894 0047 	ldrb.w	r0, [r4, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801a08c:	ea50 2007 	orrs.w	r0, r0, r7, lsl #8
 801a090:	d109      	bne.n	801a0a6 <find_volume+0x1b2>
	rv = rv << 8 | ptr[2];
 801a092:	f8b4 9056 	ldrh.w	r9, [r4, #86]	; 0x56
	rv = rv << 8 | ptr[1];
 801a096:	f894 0055 	ldrb.w	r0, [r4, #85]	; 0x55
	rv = rv << 8 | ptr[0];
 801a09a:	f894 7054 	ldrb.w	r7, [r4, #84]	; 0x54
	rv = rv << 8 | ptr[1];
 801a09e:	ea40 2009 	orr.w	r0, r0, r9, lsl #8
	rv = rv << 8 | ptr[0];
 801a0a2:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
	rv = rv << 8 | ptr[0];
 801a0a6:	f894 9043 	ldrb.w	r9, [r4, #67]	; 0x43
 801a0aa:	f894 7042 	ldrb.w	r7, [r4, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801a0ae:	ea57 2709 	orrs.w	r7, r7, r9, lsl #8
 801a0b2:	f000 8100 	beq.w	801a2b6 <find_volume+0x3c2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801a0b6:	fb01 f606 	mul.w	r6, r1, r6
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801a0ba:	eb07 1918 	add.w	r9, r7, r8, lsr #4
 801a0be:	44b1      	add	r9, r6
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801a0c0:	4548      	cmp	r0, r9
 801a0c2:	f0c0 80f8 	bcc.w	801a2b6 <find_volume+0x3c2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801a0c6:	eba0 0009 	sub.w	r0, r0, r9
 801a0ca:	fbb0 f0fe 	udiv	r0, r0, lr
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801a0ce:	2800      	cmp	r0, #0
 801a0d0:	f000 80f1 	beq.w	801a2b6 <find_volume+0x3c2>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801a0d4:	f64f 7ef5 	movw	lr, #65525	; 0xfff5
 801a0d8:	4570      	cmp	r0, lr
 801a0da:	f200 81da 	bhi.w	801a492 <find_volume+0x59e>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801a0de:	f640 7cf5 	movw	ip, #4085	; 0xff5
 801a0e2:	442f      	add	r7, r5
 801a0e4:	eb09 0205 	add.w	r2, r9, r5
 801a0e8:	1c83      	adds	r3, r0, #2
 801a0ea:	4560      	cmp	r0, ip
 801a0ec:	f240 8207 	bls.w	801a4fe <find_volume+0x60a>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801a0f0:	61a3      	str	r3, [r4, #24]
		fs->database = bsect + sysect;					/* Data start sector */
 801a0f2:	62e2      	str	r2, [r4, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801a0f4:	e9c4 5708 	strd	r5, r7, [r4, #32]
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801a0f8:	f1b8 0f00 	cmp.w	r8, #0
 801a0fc:	f000 80db 	beq.w	801a2b6 <find_volume+0x3c2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801a100:	443e      	add	r6, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801a102:	005b      	lsls	r3, r3, #1
 801a104:	2002      	movs	r0, #2
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801a106:	62a6      	str	r6, [r4, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801a108:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 801a10c:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
 801a110:	f0c0 80d1 	bcc.w	801a2b6 <find_volume+0x3c2>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801a114:	f04f 33ff 	mov.w	r3, #4294967295
		fs->fsi_flag = 0x80;
 801a118:	2280      	movs	r2, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801a11a:	e9c4 3304 	strd	r3, r3, [r4, #16]
		fs->fsi_flag = 0x80;
 801a11e:	7122      	strb	r2, [r4, #4]
	fs->id = ++Fsid;		/* File system mount ID */
 801a120:	4949      	ldr	r1, [pc, #292]	; (801a248 <find_volume+0x354>)
		if (Files[i].fs == fs) Files[i].fs = 0;
 801a122:	4b4a      	ldr	r3, [pc, #296]	; (801a24c <find_volume+0x358>)
	fs->id = ++Fsid;		/* File system mount ID */
 801a124:	880a      	ldrh	r2, [r1, #0]
	fs->fs_type = fmt;		/* FAT sub-type */
 801a126:	7020      	strb	r0, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801a128:	3201      	adds	r2, #1
		if (Files[i].fs == fs) Files[i].fs = 0;
 801a12a:	6818      	ldr	r0, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801a12c:	b292      	uxth	r2, r2
		if (Files[i].fs == fs) Files[i].fs = 0;
 801a12e:	4284      	cmp	r4, r0
	fs->id = ++Fsid;		/* File system mount ID */
 801a130:	800a      	strh	r2, [r1, #0]
 801a132:	80e2      	strh	r2, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 801a134:	d101      	bne.n	801a13a <find_volume+0x246>
 801a136:	2200      	movs	r2, #0
 801a138:	601a      	str	r2, [r3, #0]
 801a13a:	691a      	ldr	r2, [r3, #16]
 801a13c:	4294      	cmp	r4, r2
 801a13e:	d101      	bne.n	801a144 <find_volume+0x250>
 801a140:	2200      	movs	r2, #0
 801a142:	611a      	str	r2, [r3, #16]
 801a144:	6a1a      	ldr	r2, [r3, #32]
 801a146:	4294      	cmp	r4, r2
 801a148:	d101      	bne.n	801a14e <find_volume+0x25a>
 801a14a:	2200      	movs	r2, #0
 801a14c:	621a      	str	r2, [r3, #32]
 801a14e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801a150:	4294      	cmp	r4, r2
 801a152:	d101      	bne.n	801a158 <find_volume+0x264>
 801a154:	2200      	movs	r2, #0
 801a156:	631a      	str	r2, [r3, #48]	; 0x30
	return FR_OK;
 801a158:	2000      	movs	r0, #0
 801a15a:	e6fe      	b.n	8019f5a <find_volume+0x66>
			i = *tp++ - '0';
 801a15c:	3501      	adds	r5, #1
 801a15e:	3e30      	subs	r6, #48	; 0x30
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801a160:	42ac      	cmp	r4, r5
 801a162:	f040 815a 	bne.w	801a41a <find_volume+0x526>
 801a166:	2e01      	cmp	r6, #1
 801a168:	f200 8157 	bhi.w	801a41a <find_volume+0x526>
					*path = ++tt;
 801a16c:	3401      	adds	r4, #1
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801a16e:	4b32      	ldr	r3, [pc, #200]	; (801a238 <find_volume+0x344>)
					*path = ++tt;
 801a170:	6004      	str	r4, [r0, #0]
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801a172:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801a176:	2c00      	cmp	r4, #0
 801a178:	f47f aede 	bne.w	8019f38 <find_volume+0x44>
 801a17c:	200c      	movs	r0, #12
}
 801a17e:	b005      	add	sp, #20
 801a180:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801a184:	2003      	movs	r0, #3
}
 801a186:	b005      	add	sp, #20
 801a188:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801a18c:	2001      	movs	r0, #1
			fs->winsect = sector;
 801a18e:	6325      	str	r5, [r4, #48]	; 0x30
}
 801a190:	b005      	add	sp, #20
 801a192:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				return FR_WRITE_PROTECTED;
 801a196:	200a      	movs	r0, #10
}
 801a198:	b005      	add	sp, #20
 801a19a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801a19e:	f894 51f6 	ldrb.w	r5, [r4, #502]	; 0x1f6
 801a1a2:	b14d      	cbz	r5, 801a1b8 <find_volume+0x2c4>
	rv = rv << 8 | ptr[2];
 801a1a4:	f8b4 01fc 	ldrh.w	r0, [r4, #508]	; 0x1fc
	rv = rv << 8 | ptr[1];
 801a1a8:	f894 11fb 	ldrb.w	r1, [r4, #507]	; 0x1fb
	rv = rv << 8 | ptr[0];
 801a1ac:	f894 51fa 	ldrb.w	r5, [r4, #506]	; 0x1fa
	rv = rv << 8 | ptr[1];
 801a1b0:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
	rv = rv << 8 | ptr[0];
 801a1b4:	ea45 2501 	orr.w	r5, r5, r1, lsl #8
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801a1b8:	f894 0206 	ldrb.w	r0, [r4, #518]	; 0x206
 801a1bc:	b148      	cbz	r0, 801a1d2 <find_volume+0x2de>
	rv = rv << 8 | ptr[2];
 801a1be:	f8b4 c20c 	ldrh.w	ip, [r4, #524]	; 0x20c
	rv = rv << 8 | ptr[1];
 801a1c2:	f894 020b 	ldrb.w	r0, [r4, #523]	; 0x20b
	rv = rv << 8 | ptr[0];
 801a1c6:	f894 120a 	ldrb.w	r1, [r4, #522]	; 0x20a
	rv = rv << 8 | ptr[1];
 801a1ca:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
	rv = rv << 8 | ptr[0];
 801a1ce:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801a1d2:	f894 1216 	ldrb.w	r1, [r4, #534]	; 0x216
 801a1d6:	9001      	str	r0, [sp, #4]
 801a1d8:	2900      	cmp	r1, #0
 801a1da:	d173      	bne.n	801a2c4 <find_volume+0x3d0>
 801a1dc:	4608      	mov	r0, r1
 801a1de:	f894 1226 	ldrb.w	r1, [r4, #550]	; 0x226
 801a1e2:	9002      	str	r0, [sp, #8]
 801a1e4:	b149      	cbz	r1, 801a1fa <find_volume+0x306>
	rv = rv << 8 | ptr[2];
 801a1e6:	f8b4 c22c 	ldrh.w	ip, [r4, #556]	; 0x22c
	rv = rv << 8 | ptr[1];
 801a1ea:	f894 022b 	ldrb.w	r0, [r4, #555]	; 0x22b
	rv = rv << 8 | ptr[0];
 801a1ee:	f894 122a 	ldrb.w	r1, [r4, #554]	; 0x22a
	rv = rv << 8 | ptr[1];
 801a1f2:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
	rv = rv << 8 | ptr[0];
 801a1f6:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801a1fa:	9103      	str	r1, [sp, #12]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801a1fc:	2d00      	cmp	r5, #0
 801a1fe:	d16c      	bne.n	801a2da <find_volume+0x3e6>
			bsect = br[i];
 801a200:	9d01      	ldr	r5, [sp, #4]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801a202:	2d00      	cmp	r5, #0
 801a204:	d17e      	bne.n	801a304 <find_volume+0x410>
			bsect = br[i];
 801a206:	9d02      	ldr	r5, [sp, #8]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801a208:	2d00      	cmp	r5, #0
 801a20a:	f040 80c1 	bne.w	801a390 <find_volume+0x49c>
			bsect = br[i];
 801a20e:	9d03      	ldr	r5, [sp, #12]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801a210:	2d00      	cmp	r5, #0
 801a212:	d050      	beq.n	801a2b6 <find_volume+0x3c2>
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801a214:	f04f 37ff 	mov.w	r7, #4294967295
 801a218:	2300      	movs	r3, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 801a21a:	42bd      	cmp	r5, r7
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801a21c:	70e3      	strb	r3, [r4, #3]
 801a21e:	6327      	str	r7, [r4, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 801a220:	d017      	beq.n	801a252 <find_volume+0x35e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801a222:	4631      	mov	r1, r6
 801a224:	2301      	movs	r3, #1
 801a226:	462a      	mov	r2, r5
 801a228:	7860      	ldrb	r0, [r4, #1]
 801a22a:	f7fd f8b5 	bl	8017398 <disk_read>
 801a22e:	b178      	cbz	r0, 801a250 <find_volume+0x35c>
			fs->winsect = sector;
 801a230:	6327      	str	r7, [r4, #48]	; 0x30
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801a232:	2001      	movs	r0, #1
 801a234:	e691      	b.n	8019f5a <find_volume+0x66>
 801a236:	bf00      	nop
 801a238:	24009290 	.word	0x24009290
 801a23c:	009000eb 	.word	0x009000eb
 801a240:	00544146 	.word	0x00544146
 801a244:	33544146 	.word	0x33544146
 801a248:	240092d8 	.word	0x240092d8
 801a24c:	24009298 	.word	0x24009298
			fs->winsect = sector;
 801a250:	6325      	str	r5, [r4, #48]	; 0x30
	rv = rv << 8 | ptr[0];
 801a252:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801a256:	f64a 2155 	movw	r1, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
 801a25a:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
 801a25e:	ea43 2002 	orr.w	r0, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801a262:	4288      	cmp	r0, r1
 801a264:	d127      	bne.n	801a2b6 <find_volume+0x3c2>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801a266:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 801a26a:	29e9      	cmp	r1, #233	; 0xe9
 801a26c:	d005      	beq.n	801a27a <find_volume+0x386>
 801a26e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a270:	48cf      	ldr	r0, [pc, #828]	; (801a5b0 <find_volume+0x6bc>)
 801a272:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801a276:	4281      	cmp	r1, r0
 801a278:	d11d      	bne.n	801a2b6 <find_volume+0x3c2>
	rv = rv << 8 | ptr[2];
 801a27a:	f8b4 606c 	ldrh.w	r6, [r4, #108]	; 0x6c
	rv = rv << 8 | ptr[1];
 801a27e:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
	rv = rv << 8 | ptr[0];
 801a282:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
	rv = rv << 8 | ptr[1];
 801a286:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801a28a:	4eca      	ldr	r6, [pc, #808]	; (801a5b4 <find_volume+0x6c0>)
	rv = rv << 8 | ptr[0];
 801a28c:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801a290:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 801a294:	42b1      	cmp	r1, r6
 801a296:	f43f aeb4 	beq.w	801a002 <find_volume+0x10e>
	rv = rv << 8 | ptr[2];
 801a29a:	f8b4 6088 	ldrh.w	r6, [r4, #136]	; 0x88
	rv = rv << 8 | ptr[1];
 801a29e:	f894 0087 	ldrb.w	r0, [r4, #135]	; 0x87
	rv = rv << 8 | ptr[0];
 801a2a2:	f894 1086 	ldrb.w	r1, [r4, #134]	; 0x86
	rv = rv << 8 | ptr[1];
 801a2a6:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801a2aa:	4ec3      	ldr	r6, [pc, #780]	; (801a5b8 <find_volume+0x6c4>)
	rv = rv << 8 | ptr[0];
 801a2ac:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801a2b0:	42b1      	cmp	r1, r6
 801a2b2:	f43f aea6 	beq.w	801a002 <find_volume+0x10e>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801a2b6:	200d      	movs	r0, #13
}
 801a2b8:	b005      	add	sp, #20
 801a2ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801a2be:	4633      	mov	r3, r6
 801a2c0:	462c      	mov	r4, r5
 801a2c2:	e62f      	b.n	8019f24 <find_volume+0x30>
	rv = rv << 8 | ptr[2];
 801a2c4:	f8b4 c21c 	ldrh.w	ip, [r4, #540]	; 0x21c
	rv = rv << 8 | ptr[1];
 801a2c8:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
	rv = rv << 8 | ptr[0];
 801a2cc:	f894 121a 	ldrb.w	r1, [r4, #538]	; 0x21a
	rv = rv << 8 | ptr[1];
 801a2d0:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
	rv = rv << 8 | ptr[0];
 801a2d4:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 801a2d8:	e781      	b.n	801a1de <find_volume+0x2ea>
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801a2da:	f04f 38ff 	mov.w	r8, #4294967295
 801a2de:	2100      	movs	r1, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 801a2e0:	4545      	cmp	r5, r8
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801a2e2:	70e1      	strb	r1, [r4, #3]
 801a2e4:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 801a2e8:	f000 80a7 	beq.w	801a43a <find_volume+0x546>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801a2ec:	2301      	movs	r3, #1
 801a2ee:	462a      	mov	r2, r5
 801a2f0:	4631      	mov	r1, r6
 801a2f2:	7860      	ldrb	r0, [r4, #1]
 801a2f4:	f7fd f850 	bl	8017398 <disk_read>
 801a2f8:	2800      	cmp	r0, #0
 801a2fa:	f000 8090 	beq.w	801a41e <find_volume+0x52a>
			fs->winsect = sector;
 801a2fe:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 801a302:	e77d      	b.n	801a200 <find_volume+0x30c>
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801a304:	f04f 37ff 	mov.w	r7, #4294967295
 801a308:	2300      	movs	r3, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 801a30a:	42bd      	cmp	r5, r7
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801a30c:	70e3      	strb	r3, [r4, #3]
 801a30e:	6327      	str	r7, [r4, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 801a310:	d009      	beq.n	801a326 <find_volume+0x432>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801a312:	2301      	movs	r3, #1
 801a314:	462a      	mov	r2, r5
 801a316:	4631      	mov	r1, r6
 801a318:	7860      	ldrb	r0, [r4, #1]
 801a31a:	f7fd f83d 	bl	8017398 <disk_read>
 801a31e:	2800      	cmp	r0, #0
 801a320:	f040 80b3 	bne.w	801a48a <find_volume+0x596>
			fs->winsect = sector;
 801a324:	6325      	str	r5, [r4, #48]	; 0x30
	rv = rv << 8 | ptr[0];
 801a326:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801a32a:	f64a 2155 	movw	r1, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
 801a32e:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
 801a332:	ea43 2002 	orr.w	r0, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801a336:	4288      	cmp	r0, r1
 801a338:	f47f af65 	bne.w	801a206 <find_volume+0x312>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801a33c:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 801a340:	29e9      	cmp	r1, #233	; 0xe9
 801a342:	d006      	beq.n	801a352 <find_volume+0x45e>
 801a344:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a346:	489a      	ldr	r0, [pc, #616]	; (801a5b0 <find_volume+0x6bc>)
 801a348:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801a34c:	4281      	cmp	r1, r0
 801a34e:	f47f af5a 	bne.w	801a206 <find_volume+0x312>
	rv = rv << 8 | ptr[2];
 801a352:	f8b4 706c 	ldrh.w	r7, [r4, #108]	; 0x6c
	rv = rv << 8 | ptr[1];
 801a356:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
	rv = rv << 8 | ptr[0];
 801a35a:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
	rv = rv << 8 | ptr[1];
 801a35e:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801a362:	4f94      	ldr	r7, [pc, #592]	; (801a5b4 <find_volume+0x6c0>)
	rv = rv << 8 | ptr[0];
 801a364:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801a368:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 801a36c:	42b9      	cmp	r1, r7
 801a36e:	f43f ae48 	beq.w	801a002 <find_volume+0x10e>
	rv = rv << 8 | ptr[2];
 801a372:	f8b4 7088 	ldrh.w	r7, [r4, #136]	; 0x88
	rv = rv << 8 | ptr[1];
 801a376:	f894 0087 	ldrb.w	r0, [r4, #135]	; 0x87
	rv = rv << 8 | ptr[0];
 801a37a:	f894 1086 	ldrb.w	r1, [r4, #134]	; 0x86
	rv = rv << 8 | ptr[1];
 801a37e:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801a382:	4f8d      	ldr	r7, [pc, #564]	; (801a5b8 <find_volume+0x6c4>)
	rv = rv << 8 | ptr[0];
 801a384:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801a388:	42b9      	cmp	r1, r7
 801a38a:	f43f ae3a 	beq.w	801a002 <find_volume+0x10e>
 801a38e:	e73a      	b.n	801a206 <find_volume+0x312>
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801a390:	f04f 37ff 	mov.w	r7, #4294967295
 801a394:	2300      	movs	r3, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 801a396:	42bd      	cmp	r5, r7
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801a398:	70e3      	strb	r3, [r4, #3]
 801a39a:	6327      	str	r7, [r4, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 801a39c:	d008      	beq.n	801a3b0 <find_volume+0x4bc>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801a39e:	2301      	movs	r3, #1
 801a3a0:	462a      	mov	r2, r5
 801a3a2:	4631      	mov	r1, r6
 801a3a4:	7860      	ldrb	r0, [r4, #1]
 801a3a6:	f7fc fff7 	bl	8017398 <disk_read>
 801a3aa:	2800      	cmp	r0, #0
 801a3ac:	d16f      	bne.n	801a48e <find_volume+0x59a>
			fs->winsect = sector;
 801a3ae:	6325      	str	r5, [r4, #48]	; 0x30
	rv = rv << 8 | ptr[0];
 801a3b0:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801a3b4:	f64a 2155 	movw	r1, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
 801a3b8:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
 801a3bc:	ea43 2002 	orr.w	r0, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801a3c0:	4288      	cmp	r0, r1
 801a3c2:	f47f af24 	bne.w	801a20e <find_volume+0x31a>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801a3c6:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 801a3ca:	29e9      	cmp	r1, #233	; 0xe9
 801a3cc:	d006      	beq.n	801a3dc <find_volume+0x4e8>
 801a3ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a3d0:	4877      	ldr	r0, [pc, #476]	; (801a5b0 <find_volume+0x6bc>)
 801a3d2:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801a3d6:	4281      	cmp	r1, r0
 801a3d8:	f47f af19 	bne.w	801a20e <find_volume+0x31a>
	rv = rv << 8 | ptr[2];
 801a3dc:	f8b4 706c 	ldrh.w	r7, [r4, #108]	; 0x6c
	rv = rv << 8 | ptr[1];
 801a3e0:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
	rv = rv << 8 | ptr[0];
 801a3e4:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
	rv = rv << 8 | ptr[1];
 801a3e8:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801a3ec:	4f71      	ldr	r7, [pc, #452]	; (801a5b4 <find_volume+0x6c0>)
	rv = rv << 8 | ptr[0];
 801a3ee:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801a3f2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 801a3f6:	42b9      	cmp	r1, r7
 801a3f8:	f43f ae03 	beq.w	801a002 <find_volume+0x10e>
	rv = rv << 8 | ptr[2];
 801a3fc:	f8b4 7088 	ldrh.w	r7, [r4, #136]	; 0x88
	rv = rv << 8 | ptr[1];
 801a400:	f894 0087 	ldrb.w	r0, [r4, #135]	; 0x87
	rv = rv << 8 | ptr[0];
 801a404:	f894 1086 	ldrb.w	r1, [r4, #134]	; 0x86
	rv = rv << 8 | ptr[1];
 801a408:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801a40c:	4f6a      	ldr	r7, [pc, #424]	; (801a5b8 <find_volume+0x6c4>)
	rv = rv << 8 | ptr[0];
 801a40e:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801a412:	42b9      	cmp	r1, r7
 801a414:	f43f adf5 	beq.w	801a002 <find_volume+0x10e>
 801a418:	e6f9      	b.n	801a20e <find_volume+0x31a>
	if (vol < 0) return FR_INVALID_DRIVE;
 801a41a:	200b      	movs	r0, #11
 801a41c:	e59d      	b.n	8019f5a <find_volume+0x66>
	rv = rv << 8 | ptr[0];
 801a41e:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801a422:	f64a 2155 	movw	r1, #43605	; 0xaa55
	rv = rv << 8 | ptr[0];
 801a426:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
			fs->winsect = sector;
 801a42a:	6325      	str	r5, [r4, #48]	; 0x30
	rv = rv << 8 | ptr[0];
 801a42c:	ea43 2002 	orr.w	r0, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801a430:	4288      	cmp	r0, r1
 801a432:	f47f aee5 	bne.w	801a200 <find_volume+0x30c>
 801a436:	f894 7034 	ldrb.w	r7, [r4, #52]	; 0x34
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801a43a:	2fe9      	cmp	r7, #233	; 0xe9
 801a43c:	d006      	beq.n	801a44c <find_volume+0x558>
 801a43e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a440:	485b      	ldr	r0, [pc, #364]	; (801a5b0 <find_volume+0x6bc>)
 801a442:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801a446:	4281      	cmp	r1, r0
 801a448:	f47f aeda 	bne.w	801a200 <find_volume+0x30c>
	rv = rv << 8 | ptr[2];
 801a44c:	f8b4 706c 	ldrh.w	r7, [r4, #108]	; 0x6c
	rv = rv << 8 | ptr[1];
 801a450:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
	rv = rv << 8 | ptr[0];
 801a454:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
	rv = rv << 8 | ptr[1];
 801a458:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801a45c:	4f55      	ldr	r7, [pc, #340]	; (801a5b4 <find_volume+0x6c0>)
	rv = rv << 8 | ptr[0];
 801a45e:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801a462:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 801a466:	42b9      	cmp	r1, r7
 801a468:	f43f adcb 	beq.w	801a002 <find_volume+0x10e>
	rv = rv << 8 | ptr[2];
 801a46c:	f8b4 7088 	ldrh.w	r7, [r4, #136]	; 0x88
	rv = rv << 8 | ptr[1];
 801a470:	f894 0087 	ldrb.w	r0, [r4, #135]	; 0x87
	rv = rv << 8 | ptr[0];
 801a474:	f894 1086 	ldrb.w	r1, [r4, #134]	; 0x86
	rv = rv << 8 | ptr[1];
 801a478:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801a47c:	4f4e      	ldr	r7, [pc, #312]	; (801a5b8 <find_volume+0x6c4>)
	rv = rv << 8 | ptr[0];
 801a47e:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801a482:	42b9      	cmp	r1, r7
 801a484:	f43f adbd 	beq.w	801a002 <find_volume+0x10e>
 801a488:	e6ba      	b.n	801a200 <find_volume+0x30c>
			fs->winsect = sector;
 801a48a:	6327      	str	r7, [r4, #48]	; 0x30
 801a48c:	e6bb      	b.n	801a206 <find_volume+0x312>
 801a48e:	6327      	str	r7, [r4, #48]	; 0x30
 801a490:	e6bd      	b.n	801a20e <find_volume+0x31a>
	rv = rv << 8 | ptr[0];
 801a492:	f894 805f 	ldrb.w	r8, [r4, #95]	; 0x5f
		fs->database = bsect + sysect;					/* Data start sector */
 801a496:	eb09 0605 	add.w	r6, r9, r5
	rv = rv << 8 | ptr[0];
 801a49a:	f894 e05e 	ldrb.w	lr, [r4, #94]	; 0x5e
 801a49e:	3002      	adds	r0, #2
		fs->database = bsect + sysect;					/* Data start sector */
 801a4a0:	62e6      	str	r6, [r4, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801a4a2:	442f      	add	r7, r5
	rv = rv << 8 | ptr[0];
 801a4a4:	ea4e 2e08 	orr.w	lr, lr, r8, lsl #8
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801a4a8:	61a0      	str	r0, [r4, #24]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801a4aa:	6267      	str	r7, [r4, #36]	; 0x24
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801a4ac:	ea4c 060e 	orr.w	r6, ip, lr
		fs->volbase = bsect;							/* Volume start sector */
 801a4b0:	6225      	str	r5, [r4, #32]
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801a4b2:	b236      	sxth	r6, r6
 801a4b4:	2e00      	cmp	r6, #0
 801a4b6:	f47f aefe 	bne.w	801a2b6 <find_volume+0x3c2>
	rv = rv << 8 | ptr[2];
 801a4ba:	f8b4 c062 	ldrh.w	ip, [r4, #98]	; 0x62
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801a4be:	0080      	lsls	r0, r0, #2
	rv = rv << 8 | ptr[1];
 801a4c0:	f894 7061 	ldrb.w	r7, [r4, #97]	; 0x61
	rv = rv << 8 | ptr[0];
 801a4c4:	f894 6060 	ldrb.w	r6, [r4, #96]	; 0x60
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801a4c8:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
	rv = rv << 8 | ptr[1];
 801a4cc:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801a4d0:	ebb1 2f50 	cmp.w	r1, r0, lsr #9
	rv = rv << 8 | ptr[0];
 801a4d4:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801a4d8:	62a6      	str	r6, [r4, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801a4da:	f4ff aeec 	bcc.w	801a2b6 <find_volume+0x3c2>
	rv = rv << 8 | ptr[0];
 801a4de:	f894 7065 	ldrb.w	r7, [r4, #101]	; 0x65
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801a4e2:	f04f 30ff 	mov.w	r0, #4294967295
	rv = rv << 8 | ptr[0];
 801a4e6:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64
		fs->fsi_flag = 0x80;
 801a4ea:	2680      	movs	r6, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801a4ec:	6160      	str	r0, [r4, #20]
	rv = rv << 8 | ptr[0];
 801a4ee:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801a4f2:	6120      	str	r0, [r4, #16]
		fs->fsi_flag = 0x80;
 801a4f4:	7126      	strb	r6, [r4, #4]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801a4f6:	2901      	cmp	r1, #1
 801a4f8:	d013      	beq.n	801a522 <find_volume+0x62e>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801a4fa:	2003      	movs	r0, #3
 801a4fc:	e610      	b.n	801a120 <find_volume+0x22c>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801a4fe:	61a3      	str	r3, [r4, #24]
		fs->database = bsect + sysect;					/* Data start sector */
 801a500:	62e2      	str	r2, [r4, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801a502:	e9c4 5708 	strd	r5, r7, [r4, #32]
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801a506:	f1b8 0f00 	cmp.w	r8, #0
 801a50a:	f43f aed4 	beq.w	801a2b6 <find_volume+0x3c2>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801a50e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801a512:	443e      	add	r6, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801a514:	f003 0301 	and.w	r3, r3, #1
 801a518:	2001      	movs	r0, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801a51a:	62a6      	str	r6, [r4, #40]	; 0x28
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801a51c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 801a520:	e5f2      	b.n	801a108 <find_volume+0x214>
			&& move_window(fs, bsect + 1) == FR_OK)
 801a522:	1c69      	adds	r1, r5, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 801a524:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801a526:	4281      	cmp	r1, r0
 801a528:	d138      	bne.n	801a59c <find_volume+0x6a8>
	rv = rv << 8 | ptr[0];
 801a52a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801a52e:	f64a 2255 	movw	r2, #43605	; 0xaa55
			fs->fsi_flag = 0;
 801a532:	2100      	movs	r1, #0
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801a534:	4293      	cmp	r3, r2
			fs->fsi_flag = 0;
 801a536:	7121      	strb	r1, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801a538:	d1df      	bne.n	801a4fa <find_volume+0x606>
	rv = rv << 8 | ptr[2];
 801a53a:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
	rv = rv << 8 | ptr[1];
 801a53c:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
	rv = rv << 8 | ptr[0];
 801a540:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
	rv = rv << 8 | ptr[1];
 801a544:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801a548:	491c      	ldr	r1, [pc, #112]	; (801a5bc <find_volume+0x6c8>)
	rv = rv << 8 | ptr[0];
 801a54a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801a54e:	428b      	cmp	r3, r1
 801a550:	d1d3      	bne.n	801a4fa <find_volume+0x606>
	rv = rv << 8 | ptr[2];
 801a552:	f8b4 121a 	ldrh.w	r1, [r4, #538]	; 0x21a
	rv = rv << 8 | ptr[1];
 801a556:	f894 2219 	ldrb.w	r2, [r4, #537]	; 0x219
	rv = rv << 8 | ptr[0];
 801a55a:	f894 3218 	ldrb.w	r3, [r4, #536]	; 0x218
	rv = rv << 8 | ptr[1];
 801a55e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801a562:	4917      	ldr	r1, [pc, #92]	; (801a5c0 <find_volume+0x6cc>)
	rv = rv << 8 | ptr[0];
 801a564:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801a568:	428b      	cmp	r3, r1
 801a56a:	d1c6      	bne.n	801a4fa <find_volume+0x606>
	rv = rv << 8 | ptr[1];
 801a56c:	f894 221d 	ldrb.w	r2, [r4, #541]	; 0x21d
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801a570:	2003      	movs	r0, #3
	rv = rv << 8 | ptr[1];
 801a572:	f894 3221 	ldrb.w	r3, [r4, #545]	; 0x221
	rv = rv << 8 | ptr[2];
 801a576:	f8b4 521e 	ldrh.w	r5, [r4, #542]	; 0x21e
 801a57a:	f8b4 1222 	ldrh.w	r1, [r4, #546]	; 0x222
	rv = rv << 8 | ptr[1];
 801a57e:	ea42 2505 	orr.w	r5, r2, r5, lsl #8
	rv = rv << 8 | ptr[0];
 801a582:	f894 221c 	ldrb.w	r2, [r4, #540]	; 0x21c
	rv = rv << 8 | ptr[1];
 801a586:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
	rv = rv << 8 | ptr[0];
 801a58a:	f894 3220 	ldrb.w	r3, [r4, #544]	; 0x220
 801a58e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 801a592:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801a596:	e9c4 3204 	strd	r3, r2, [r4, #16]
 801a59a:	e5c1      	b.n	801a120 <find_volume+0x22c>
 801a59c:	4620      	mov	r0, r4
 801a59e:	f7fc ffa7 	bl	80174f0 <move_window.part.5>
			&& move_window(fs, bsect + 1) == FR_OK)
 801a5a2:	2800      	cmp	r0, #0
 801a5a4:	d1a9      	bne.n	801a4fa <find_volume+0x606>
 801a5a6:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
 801a5aa:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
 801a5ae:	e7bc      	b.n	801a52a <find_volume+0x636>
 801a5b0:	009000eb 	.word	0x009000eb
 801a5b4:	00544146 	.word	0x00544146
 801a5b8:	33544146 	.word	0x33544146
 801a5bc:	41615252 	.word	0x41615252
 801a5c0:	61417272 	.word	0x61417272

0801a5c4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801a5c4:	b530      	push	{r4, r5, lr}
 801a5c6:	b083      	sub	sp, #12
 801a5c8:	e9cd 1000 	strd	r1, r0, [sp]
	if (*path) {	/* If the pointer is not a null */
 801a5cc:	2900      	cmp	r1, #0
 801a5ce:	d037      	beq.n	801a640 <f_mount+0x7c>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801a5d0:	780c      	ldrb	r4, [r1, #0]
 801a5d2:	2c3a      	cmp	r4, #58	; 0x3a
 801a5d4:	d04e      	beq.n	801a674 <f_mount+0xb0>
 801a5d6:	2c1f      	cmp	r4, #31
 801a5d8:	d94c      	bls.n	801a674 <f_mount+0xb0>
 801a5da:	4608      	mov	r0, r1
 801a5dc:	e001      	b.n	801a5e2 <f_mount+0x1e>
 801a5de:	2b3a      	cmp	r3, #58	; 0x3a
 801a5e0:	d003      	beq.n	801a5ea <f_mount+0x26>
 801a5e2:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 801a5e6:	2b1f      	cmp	r3, #31
 801a5e8:	d8f9      	bhi.n	801a5de <f_mount+0x1a>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801a5ea:	2b3a      	cmp	r3, #58	; 0x3a
 801a5ec:	d022      	beq.n	801a634 <f_mount+0x70>
		vol = 0;		/* Drive 0 */
 801a5ee:	2400      	movs	r4, #0


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
	cfs = FatFs[vol];					/* Pointer to fs object */
 801a5f0:	4d22      	ldr	r5, [pc, #136]	; (801a67c <f_mount+0xb8>)
 801a5f2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]

	if (cfs) {
 801a5f6:	b173      	cbz	r3, 801a616 <f_mount+0x52>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801a5f8:	4921      	ldr	r1, [pc, #132]	; (801a680 <f_mount+0xbc>)
 801a5fa:	6808      	ldr	r0, [r1, #0]
 801a5fc:	4283      	cmp	r3, r0
 801a5fe:	d029      	beq.n	801a654 <f_mount+0x90>
 801a600:	6908      	ldr	r0, [r1, #16]
 801a602:	4283      	cmp	r3, r0
 801a604:	d02b      	beq.n	801a65e <f_mount+0x9a>
 801a606:	6a08      	ldr	r0, [r1, #32]
 801a608:	4283      	cmp	r3, r0
 801a60a:	d02d      	beq.n	801a668 <f_mount+0xa4>
 801a60c:	6b08      	ldr	r0, [r1, #48]	; 0x30
 801a60e:	4298      	cmp	r0, r3
 801a610:	d01d      	beq.n	801a64e <f_mount+0x8a>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801a612:	2100      	movs	r1, #0
 801a614:	7019      	strb	r1, [r3, #0]
	}

	if (fs) {
 801a616:	9b01      	ldr	r3, [sp, #4]
 801a618:	b1a3      	cbz	r3, 801a644 <f_mount+0x80>
		fs->fs_type = 0;				/* Clear new fs object */
 801a61a:	2000      	movs	r0, #0
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801a61c:	2a01      	cmp	r2, #1
	FatFs[vol] = fs;					/* Register new fs object */
 801a61e:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
		fs->fs_type = 0;				/* Clear new fs object */
 801a622:	7018      	strb	r0, [r3, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801a624:	d104      	bne.n	801a630 <f_mount+0x6c>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801a626:	4602      	mov	r2, r0
 801a628:	a901      	add	r1, sp, #4
 801a62a:	4668      	mov	r0, sp
 801a62c:	f7ff fc62 	bl	8019ef4 <find_volume>
	LEAVE_FF(fs, res);
}
 801a630:	b003      	add	sp, #12
 801a632:	bd30      	pop	{r4, r5, pc}
			i = *tp++ - '0';
 801a634:	3101      	adds	r1, #1
 801a636:	3c30      	subs	r4, #48	; 0x30
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801a638:	4288      	cmp	r0, r1
 801a63a:	d101      	bne.n	801a640 <f_mount+0x7c>
 801a63c:	2c01      	cmp	r4, #1
 801a63e:	d9d7      	bls.n	801a5f0 <f_mount+0x2c>
	if (vol < 0) return FR_INVALID_DRIVE;
 801a640:	200b      	movs	r0, #11
 801a642:	e7f5      	b.n	801a630 <f_mount+0x6c>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801a644:	4618      	mov	r0, r3
	FatFs[vol] = fs;					/* Register new fs object */
 801a646:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
}
 801a64a:	b003      	add	sp, #12
 801a64c:	bd30      	pop	{r4, r5, pc}
		if (Files[i].fs == fs) Files[i].fs = 0;
 801a64e:	2000      	movs	r0, #0
 801a650:	6308      	str	r0, [r1, #48]	; 0x30
 801a652:	e7de      	b.n	801a612 <f_mount+0x4e>
 801a654:	2000      	movs	r0, #0
 801a656:	6008      	str	r0, [r1, #0]
 801a658:	6908      	ldr	r0, [r1, #16]
 801a65a:	4283      	cmp	r3, r0
 801a65c:	d1d3      	bne.n	801a606 <f_mount+0x42>
 801a65e:	2000      	movs	r0, #0
 801a660:	6108      	str	r0, [r1, #16]
 801a662:	6a08      	ldr	r0, [r1, #32]
 801a664:	4283      	cmp	r3, r0
 801a666:	d1d1      	bne.n	801a60c <f_mount+0x48>
 801a668:	2000      	movs	r0, #0
 801a66a:	6208      	str	r0, [r1, #32]
 801a66c:	6b08      	ldr	r0, [r1, #48]	; 0x30
 801a66e:	4298      	cmp	r0, r3
 801a670:	d1cf      	bne.n	801a612 <f_mount+0x4e>
 801a672:	e7ec      	b.n	801a64e <f_mount+0x8a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801a674:	4623      	mov	r3, r4
 801a676:	4608      	mov	r0, r1
 801a678:	e7b7      	b.n	801a5ea <f_mount+0x26>
 801a67a:	bf00      	nop
 801a67c:	24009290 	.word	0x24009290
 801a680:	24009298 	.word	0x24009298

0801a684 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801a684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a688:	b095      	sub	sp, #84	; 0x54
 801a68a:	9105      	str	r1, [sp, #20]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801a68c:	2800      	cmp	r0, #0
 801a68e:	d05e      	beq.n	801a74e <f_open+0xca>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801a690:	f002 073f 	and.w	r7, r2, #63	; 0x3f
 801a694:	4604      	mov	r4, r0
 801a696:	4615      	mov	r5, r2
	res = find_volume(&path, &fs, mode);
 801a698:	a906      	add	r1, sp, #24
 801a69a:	a805      	add	r0, sp, #20
 801a69c:	463a      	mov	r2, r7
 801a69e:	f7ff fc29 	bl	8019ef4 <find_volume>
	if (res == FR_OK) {
 801a6a2:	4606      	mov	r6, r0
 801a6a4:	b128      	cbz	r0, 801a6b2 <f_open+0x2e>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801a6a6:	2300      	movs	r3, #0
 801a6a8:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 801a6aa:	4630      	mov	r0, r6
 801a6ac:	b015      	add	sp, #84	; 0x54
 801a6ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dj.obj.fs = fs;
 801a6b2:	9b06      	ldr	r3, [sp, #24]
		INIT_NAMBUF(fs);
 801a6b4:	f44f 7000 	mov.w	r0, #512	; 0x200
		dj.obj.fs = fs;
 801a6b8:	9307      	str	r3, [sp, #28]
		INIT_NAMBUF(fs);
 801a6ba:	f001 fc57 	bl	801bf6c <ff_memalloc>
 801a6be:	4681      	mov	r9, r0
 801a6c0:	2800      	cmp	r0, #0
 801a6c2:	d049      	beq.n	801a758 <f_open+0xd4>
		res = follow_path(&dj, path);	/* Follow the file path */
 801a6c4:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
		INIT_NAMBUF(fs);
 801a6c8:	60d8      	str	r0, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 801a6ca:	a807      	add	r0, sp, #28
 801a6cc:	f7fe fc98 	bl	8019000 <follow_path>
 801a6d0:	f005 031c 	and.w	r3, r5, #28
		if (res == FR_OK) {
 801a6d4:	2800      	cmp	r0, #0
 801a6d6:	d141      	bne.n	801a75c <f_open+0xd8>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801a6d8:	f99d 204b 	ldrsb.w	r2, [sp, #75]	; 0x4b
 801a6dc:	2a00      	cmp	r2, #0
 801a6de:	f2c0 813d 	blt.w	801a95c <f_open+0x2d8>
				Files[i].clu == dp->obj.sclust &&
 801a6e2:	9909      	ldr	r1, [sp, #36]	; 0x24
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801a6e4:	f027 0b01 	bic.w	fp, r7, #1
		if (Files[i].fs) {	/* Existing entry */
 801a6e8:	f8df 8488 	ldr.w	r8, [pc, #1160]	; 801ab74 <f_open+0x4f0>
				Files[i].clu == dp->obj.sclust &&
 801a6ec:	9102      	str	r1, [sp, #8]
		if (Files[i].fs) {	/* Existing entry */
 801a6ee:	f8d8 2000 	ldr.w	r2, [r8]
				Files[i].ofs == dp->dptr) break;
 801a6f2:	990c      	ldr	r1, [sp, #48]	; 0x30
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801a6f4:	9807      	ldr	r0, [sp, #28]
				Files[i].ofs == dp->dptr) break;
 801a6f6:	9103      	str	r1, [sp, #12]
		if (Files[i].fs) {	/* Existing entry */
 801a6f8:	2a00      	cmp	r2, #0
 801a6fa:	d04b      	beq.n	801a794 <f_open+0x110>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801a6fc:	4282      	cmp	r2, r0
 801a6fe:	d062      	beq.n	801a7c6 <f_open+0x142>
	for (i = be = 0; i < _FS_LOCK; i++) {
 801a700:	46b4      	mov	ip, r6
		if (Files[i].fs) {	/* Existing entry */
 801a702:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801a706:	2900      	cmp	r1, #0
 801a708:	f000 8165 	beq.w	801a9d6 <f_open+0x352>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801a70c:	4288      	cmp	r0, r1
 801a70e:	f000 8165 	beq.w	801a9dc <f_open+0x358>
		if (Files[i].fs) {	/* Existing entry */
 801a712:	f8d8 1020 	ldr.w	r1, [r8, #32]
 801a716:	2900      	cmp	r1, #0
 801a718:	f000 815a 	beq.w	801a9d0 <f_open+0x34c>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801a71c:	4281      	cmp	r1, r0
 801a71e:	f000 816b 	beq.w	801a9f8 <f_open+0x374>
		if (Files[i].fs) {	/* Existing entry */
 801a722:	f8d8 1030 	ldr.w	r1, [r8, #48]	; 0x30
 801a726:	b121      	cbz	r1, 801a732 <f_open+0xae>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801a728:	4281      	cmp	r1, r0
 801a72a:	d036      	beq.n	801a79a <f_open+0x116>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801a72c:	f1bc 0f00 	cmp.w	ip, #0
 801a730:	d02e      	beq.n	801a790 <f_open+0x10c>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801a732:	2b00      	cmp	r3, #0
 801a734:	d053      	beq.n	801a7de <f_open+0x15a>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801a736:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 801a73a:	f013 0f11 	tst.w	r3, #17
 801a73e:	f000 8114 	beq.w	801a96a <f_open+0x2e6>
					res = FR_DENIED;
 801a742:	2007      	movs	r0, #7
		FREE_NAMBUF();
 801a744:	4606      	mov	r6, r0
 801a746:	4648      	mov	r0, r9
 801a748:	f001 fc12 	bl	801bf70 <ff_memfree>
 801a74c:	e7ab      	b.n	801a6a6 <f_open+0x22>
	if (!fp) return FR_INVALID_OBJECT;
 801a74e:	2609      	movs	r6, #9
}
 801a750:	4630      	mov	r0, r6
 801a752:	b015      	add	sp, #84	; 0x54
 801a754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		INIT_NAMBUF(fs);
 801a758:	2611      	movs	r6, #17
 801a75a:	e7a6      	b.n	801a6aa <f_open+0x26>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801a75c:	2b00      	cmp	r3, #0
 801a75e:	d0f1      	beq.n	801a744 <f_open+0xc0>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801a760:	2804      	cmp	r0, #4
 801a762:	d1ef      	bne.n	801a744 <f_open+0xc0>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801a764:	f8df 840c 	ldr.w	r8, [pc, #1036]	; 801ab74 <f_open+0x4f0>
 801a768:	f8d8 3000 	ldr.w	r3, [r8]
 801a76c:	2b00      	cmp	r3, #0
 801a76e:	f000 8156 	beq.w	801aa1e <f_open+0x39a>
 801a772:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801a776:	2b00      	cmp	r3, #0
 801a778:	f000 8151 	beq.w	801aa1e <f_open+0x39a>
 801a77c:	f8d8 3020 	ldr.w	r3, [r8, #32]
 801a780:	2b00      	cmp	r3, #0
 801a782:	f000 814c 	beq.w	801aa1e <f_open+0x39a>
 801a786:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 801a78a:	2b00      	cmp	r3, #0
 801a78c:	f000 8147 	beq.w	801aa1e <f_open+0x39a>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801a790:	2012      	movs	r0, #18
 801a792:	e7d7      	b.n	801a744 <f_open+0xc0>
			be = 1;
 801a794:	f04f 0c01 	mov.w	ip, #1
 801a798:	e7b3      	b.n	801a702 <f_open+0x7e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801a79a:	f8d8 1034 	ldr.w	r1, [r8, #52]	; 0x34
 801a79e:	9a02      	ldr	r2, [sp, #8]
 801a7a0:	4291      	cmp	r1, r2
 801a7a2:	d1c3      	bne.n	801a72c <f_open+0xa8>
				Files[i].clu == dp->obj.sclust &&
 801a7a4:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
 801a7a8:	9903      	ldr	r1, [sp, #12]
 801a7aa:	428a      	cmp	r2, r1
 801a7ac:	d1be      	bne.n	801a72c <f_open+0xa8>
	for (i = be = 0; i < _FS_LOCK; i++) {
 801a7ae:	2203      	movs	r2, #3
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801a7b0:	f1bb 0f00 	cmp.w	fp, #0
 801a7b4:	d105      	bne.n	801a7c2 <f_open+0x13e>
 801a7b6:	eb08 1202 	add.w	r2, r8, r2, lsl #4
 801a7ba:	8992      	ldrh	r2, [r2, #12]
 801a7bc:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 801a7c0:	d1b7      	bne.n	801a732 <f_open+0xae>
 801a7c2:	2010      	movs	r0, #16
 801a7c4:	e7be      	b.n	801a744 <f_open+0xc0>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801a7c6:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801a7ca:	9902      	ldr	r1, [sp, #8]
 801a7cc:	4291      	cmp	r1, r2
 801a7ce:	d197      	bne.n	801a700 <f_open+0x7c>
				Files[i].clu == dp->obj.sclust &&
 801a7d0:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801a7d4:	9903      	ldr	r1, [sp, #12]
 801a7d6:	4291      	cmp	r1, r2
 801a7d8:	d192      	bne.n	801a700 <f_open+0x7c>
	for (i = be = 0; i < _FS_LOCK; i++) {
 801a7da:	4632      	mov	r2, r6
 801a7dc:	e7e8      	b.n	801a7b0 <f_open+0x12c>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801a7de:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 801a7e2:	06da      	lsls	r2, r3, #27
 801a7e4:	f100 8116 	bmi.w	801aa14 <f_open+0x390>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801a7e8:	07aa      	lsls	r2, r5, #30
 801a7ea:	d506      	bpl.n	801a7fa <f_open+0x176>
 801a7ec:	07db      	lsls	r3, r3, #31
 801a7ee:	d504      	bpl.n	801a7fa <f_open+0x176>
		FREE_NAMBUF();
 801a7f0:	4648      	mov	r0, r9
						res = FR_DENIED;
 801a7f2:	2607      	movs	r6, #7
		FREE_NAMBUF();
 801a7f4:	f001 fbbc 	bl	801bf70 <ff_memfree>
 801a7f8:	e755      	b.n	801a6a6 <f_open+0x22>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801a7fa:	072d      	lsls	r5, r5, #28
 801a7fc:	f8dd a018 	ldr.w	sl, [sp, #24]
 801a800:	d503      	bpl.n	801a80a <f_open+0x186>
				mode |= FA_MODIFIED;
 801a802:	f047 0740 	orr.w	r7, r7, #64	; 0x40
 801a806:	f027 0b01 	bic.w	fp, r7, #1
		if (Files[i].fs == dp->obj.fs &&
 801a80a:	f8d8 1000 	ldr.w	r1, [r8]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801a80e:	f8da 2030 	ldr.w	r2, [sl, #48]	; 0x30
			fp->dir_ptr = dj.dir;
 801a812:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		if (Files[i].fs == dp->obj.fs &&
 801a814:	4281      	cmp	r1, r0
			fp->dir_ptr = dj.dir;
 801a816:	e9c4 2309 	strd	r2, r3, [r4, #36]	; 0x24
		if (Files[i].fs == dp->obj.fs &&
 801a81a:	f000 80b8 	beq.w	801a98e <f_open+0x30a>
 801a81e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801a822:	4290      	cmp	r0, r2
 801a824:	9204      	str	r2, [sp, #16]
 801a826:	f000 80c0 	beq.w	801a9aa <f_open+0x326>
 801a82a:	f8d8 c020 	ldr.w	ip, [r8, #32]
 801a82e:	4560      	cmp	r0, ip
 801a830:	f000 809f 	beq.w	801a972 <f_open+0x2ee>
 801a834:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 801a838:	4282      	cmp	r2, r0
 801a83a:	9201      	str	r2, [sp, #4]
 801a83c:	d015      	beq.n	801a86a <f_open+0x1e6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801a83e:	2900      	cmp	r1, #0
 801a840:	f000 813d 	beq.w	801aabe <f_open+0x43a>
 801a844:	9904      	ldr	r1, [sp, #16]
 801a846:	2900      	cmp	r1, #0
 801a848:	f000 8150 	beq.w	801aaec <f_open+0x468>
 801a84c:	f1bc 0f00 	cmp.w	ip, #0
 801a850:	f000 814f 	beq.w	801aaf2 <f_open+0x46e>
 801a854:	9a01      	ldr	r2, [sp, #4]
 801a856:	2a00      	cmp	r2, #0
 801a858:	f000 814e 	beq.w	801aaf8 <f_open+0x474>
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801a85c:	2300      	movs	r3, #0
		FREE_NAMBUF();
 801a85e:	4648      	mov	r0, r9
 801a860:	2602      	movs	r6, #2
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801a862:	6123      	str	r3, [r4, #16]
		FREE_NAMBUF();
 801a864:	f001 fb84 	bl	801bf70 <ff_memfree>
 801a868:	e71d      	b.n	801a6a6 <f_open+0x22>
		if (Files[i].fs == dp->obj.fs &&
 801a86a:	f8d8 5034 	ldr.w	r5, [r8, #52]	; 0x34
 801a86e:	9a02      	ldr	r2, [sp, #8]
 801a870:	42aa      	cmp	r2, r5
 801a872:	d1e4      	bne.n	801a83e <f_open+0x1ba>
			Files[i].clu == dp->obj.sclust &&
 801a874:	f8d8 5038 	ldr.w	r5, [r8, #56]	; 0x38
 801a878:	46ae      	mov	lr, r5
 801a87a:	9d03      	ldr	r5, [sp, #12]
 801a87c:	45ae      	cmp	lr, r5
 801a87e:	d1de      	bne.n	801a83e <f_open+0x1ba>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801a880:	2503      	movs	r5, #3
 801a882:	012a      	lsls	r2, r5, #4
 801a884:	eb08 0102 	add.w	r1, r8, r2
 801a888:	8988      	ldrh	r0, [r1, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801a88a:	f1bb 0f00 	cmp.w	fp, #0
 801a88e:	d067      	beq.n	801a960 <f_open+0x2dc>
 801a890:	2800      	cmp	r0, #0
 801a892:	d1e3      	bne.n	801a85c <f_open+0x1d8>
 801a894:	1c69      	adds	r1, r5, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801a896:	f44f 7e80 	mov.w	lr, #256	; 0x100
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801a89a:	6121      	str	r1, [r4, #16]
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801a89c:	4442      	add	r2, r8
	if (fs->fs_type == FS_FAT32) {
 801a89e:	f89a 1000 	ldrb.w	r1, [sl]
	rv = rv << 8 | ptr[0];
 801a8a2:	f893 c01b 	ldrb.w	ip, [r3, #27]
 801a8a6:	7e9d      	ldrb	r5, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 801a8a8:	2903      	cmp	r1, #3
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801a8aa:	f8a2 e00c 	strh.w	lr, [r2, #12]
	cl = ld_word(dir + DIR_FstClusLO);
 801a8ae:	ea45 250c 	orr.w	r5, r5, ip, lsl #8
	if (fs->fs_type == FS_FAT32) {
 801a8b2:	d105      	bne.n	801a8c0 <f_open+0x23c>
	rv = rv << 8 | ptr[0];
 801a8b4:	7d59      	ldrb	r1, [r3, #21]
 801a8b6:	7d1a      	ldrb	r2, [r3, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801a8b8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 801a8bc:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801a8c0:	60a5      	str	r5, [r4, #8]
			fp->cltbl = 0;			/* Disable fast seek mode */
 801a8c2:	f04f 0c00 	mov.w	ip, #0
	rv = rv << 8 | ptr[2];
 801a8c6:	8bd8      	ldrh	r0, [r3, #30]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801a8c8:	f104 0830 	add.w	r8, r4, #48	; 0x30
	rv = rv << 8 | ptr[1];
 801a8cc:	7f5a      	ldrb	r2, [r3, #29]
 801a8ce:	4661      	mov	r1, ip
	rv = rv << 8 | ptr[0];
 801a8d0:	f893 b01c 	ldrb.w	fp, [r3, #28]
	rv = rv << 8 | ptr[1];
 801a8d4:	ea42 2300 	orr.w	r3, r2, r0, lsl #8
			fp->obj.id = fs->id;
 801a8d8:	f8ba 2006 	ldrh.w	r2, [sl, #6]
 801a8dc:	4640      	mov	r0, r8
			fp->obj.fs = fs;	 	/* Validate the file object */
 801a8de:	f8c4 a000 	str.w	sl, [r4]
	rv = rv << 8 | ptr[0];
 801a8e2:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
			fp->obj.id = fs->id;
 801a8e6:	80a2      	strh	r2, [r4, #4]
			fp->cltbl = 0;			/* Disable fast seek mode */
 801a8e8:	f8c4 c02c 	str.w	ip, [r4, #44]	; 0x2c
 801a8ec:	f44f 7200 	mov.w	r2, #512	; 0x200
			fp->err = 0;			/* Clear error flag */
 801a8f0:	f884 c015 	strb.w	ip, [r4, #21]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801a8f4:	f8c4 b00c 	str.w	fp, [r4, #12]
			fp->sect = 0;			/* Invalidate current data sector */
 801a8f8:	f8c4 c020 	str.w	ip, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801a8fc:	f8c4 c018 	str.w	ip, [r4, #24]
			fp->flag = mode;		/* Set file access mode */
 801a900:	7527      	strb	r7, [r4, #20]
 801a902:	f00b fc4a 	bl	802619a <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801a906:	06b8      	lsls	r0, r7, #26
 801a908:	d521      	bpl.n	801a94e <f_open+0x2ca>
 801a90a:	f1bb 0f00 	cmp.w	fp, #0
 801a90e:	d01e      	beq.n	801a94e <f_open+0x2ca>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801a910:	f8ba 700a 	ldrh.w	r7, [sl, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801a914:	f8c4 b018 	str.w	fp, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801a918:	027f      	lsls	r7, r7, #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801a91a:	455f      	cmp	r7, fp
 801a91c:	f080 80f9 	bcs.w	801ab12 <f_open+0x48e>
 801a920:	4629      	mov	r1, r5
					clst = get_fat(&fp->obj, clst);
 801a922:	6820      	ldr	r0, [r4, #0]
 801a924:	ebab 0b07 	sub.w	fp, fp, r7
 801a928:	f7fd fc46 	bl	80181b8 <get_fat.isra.8>
					if (clst <= 1) res = FR_INT_ERR;
 801a92c:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 801a92e:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 801a930:	d911      	bls.n	801a956 <f_open+0x2d2>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801a932:	f1b0 3fff 	cmp.w	r0, #4294967295
 801a936:	bf18      	it	ne
 801a938:	455f      	cmpne	r7, fp
 801a93a:	d3f2      	bcc.n	801a922 <f_open+0x29e>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801a93c:	1c41      	adds	r1, r0, #1
 801a93e:	4605      	mov	r5, r0
				fp->clust = clst;
 801a940:	61e0      	str	r0, [r4, #28]
					if (clst <= 1) res = FR_INT_ERR;
 801a942:	bf0c      	ite	eq
 801a944:	2001      	moveq	r0, #1
 801a946:	2000      	movne	r0, #0
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801a948:	f040 80e4 	bne.w	801ab14 <f_open+0x490>
 801a94c:	e6fa      	b.n	801a744 <f_open+0xc0>
		FREE_NAMBUF();
 801a94e:	4648      	mov	r0, r9
 801a950:	f001 fb0e 	bl	801bf70 <ff_memfree>
 801a954:	e6a9      	b.n	801a6aa <f_open+0x26>
				fp->clust = clst;
 801a956:	61e0      	str	r0, [r4, #28]
					if (clst <= 1) res = FR_INT_ERR;
 801a958:	2002      	movs	r0, #2
 801a95a:	e6f3      	b.n	801a744 <f_open+0xc0>
				res = FR_INVALID_NAME;
 801a95c:	2006      	movs	r0, #6
 801a95e:	e6f1      	b.n	801a744 <f_open+0xc0>
 801a960:	3001      	adds	r0, #1
 801a962:	1c69      	adds	r1, r5, #1
 801a964:	fa1f fe80 	uxth.w	lr, r0
 801a968:	e797      	b.n	801a89a <f_open+0x216>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801a96a:	076b      	lsls	r3, r5, #29
 801a96c:	d52b      	bpl.n	801a9c6 <f_open+0x342>
 801a96e:	2008      	movs	r0, #8
 801a970:	e6e8      	b.n	801a744 <f_open+0xc0>
		if (Files[i].fs == dp->obj.fs &&
 801a972:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 801a976:	9d02      	ldr	r5, [sp, #8]
 801a978:	4295      	cmp	r5, r2
 801a97a:	f47f af5b 	bne.w	801a834 <f_open+0x1b0>
			Files[i].clu == dp->obj.sclust &&
 801a97e:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
 801a982:	9d03      	ldr	r5, [sp, #12]
 801a984:	4295      	cmp	r5, r2
 801a986:	f47f af55 	bne.w	801a834 <f_open+0x1b0>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801a98a:	2502      	movs	r5, #2
 801a98c:	e779      	b.n	801a882 <f_open+0x1fe>
		if (Files[i].fs == dp->obj.fs &&
 801a98e:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801a992:	9d02      	ldr	r5, [sp, #8]
 801a994:	42aa      	cmp	r2, r5
 801a996:	f47f af42 	bne.w	801a81e <f_open+0x19a>
			Files[i].clu == dp->obj.sclust &&
 801a99a:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801a99e:	9d03      	ldr	r5, [sp, #12]
 801a9a0:	42aa      	cmp	r2, r5
 801a9a2:	f47f af3c 	bne.w	801a81e <f_open+0x19a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801a9a6:	2500      	movs	r5, #0
 801a9a8:	e76b      	b.n	801a882 <f_open+0x1fe>
		if (Files[i].fs == dp->obj.fs &&
 801a9aa:	f8d8 2014 	ldr.w	r2, [r8, #20]
 801a9ae:	9d02      	ldr	r5, [sp, #8]
 801a9b0:	4295      	cmp	r5, r2
 801a9b2:	f47f af3a 	bne.w	801a82a <f_open+0x1a6>
			Files[i].clu == dp->obj.sclust &&
 801a9b6:	f8d8 2018 	ldr.w	r2, [r8, #24]
 801a9ba:	9d03      	ldr	r5, [sp, #12]
 801a9bc:	42aa      	cmp	r2, r5
 801a9be:	f47f af34 	bne.w	801a82a <f_open+0x1a6>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801a9c2:	2501      	movs	r5, #1
 801a9c4:	e75d      	b.n	801a882 <f_open+0x1fe>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801a9c6:	0729      	lsls	r1, r5, #28
 801a9c8:	d431      	bmi.n	801aa2e <f_open+0x3aa>
 801a9ca:	f8dd a018 	ldr.w	sl, [sp, #24]
 801a9ce:	e71c      	b.n	801a80a <f_open+0x186>
			be = 1;
 801a9d0:	f04f 0c01 	mov.w	ip, #1
 801a9d4:	e6a5      	b.n	801a722 <f_open+0x9e>
 801a9d6:	f04f 0c01 	mov.w	ip, #1
 801a9da:	e69a      	b.n	801a712 <f_open+0x8e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801a9dc:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801a9e0:	9a02      	ldr	r2, [sp, #8]
 801a9e2:	428a      	cmp	r2, r1
 801a9e4:	f47f ae95 	bne.w	801a712 <f_open+0x8e>
				Files[i].clu == dp->obj.sclust &&
 801a9e8:	f8d8 2018 	ldr.w	r2, [r8, #24]
 801a9ec:	9903      	ldr	r1, [sp, #12]
 801a9ee:	4291      	cmp	r1, r2
 801a9f0:	f47f ae8f 	bne.w	801a712 <f_open+0x8e>
	for (i = be = 0; i < _FS_LOCK; i++) {
 801a9f4:	2201      	movs	r2, #1
 801a9f6:	e6db      	b.n	801a7b0 <f_open+0x12c>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801a9f8:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
 801a9fc:	9a02      	ldr	r2, [sp, #8]
 801a9fe:	4291      	cmp	r1, r2
 801aa00:	f47f ae8f 	bne.w	801a722 <f_open+0x9e>
				Files[i].clu == dp->obj.sclust &&
 801aa04:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
 801aa08:	9903      	ldr	r1, [sp, #12]
 801aa0a:	4291      	cmp	r1, r2
 801aa0c:	f47f ae89 	bne.w	801a722 <f_open+0x9e>
	for (i = be = 0; i < _FS_LOCK; i++) {
 801aa10:	2202      	movs	r2, #2
 801aa12:	e6cd      	b.n	801a7b0 <f_open+0x12c>
		FREE_NAMBUF();
 801aa14:	4648      	mov	r0, r9
					res = FR_NO_FILE;
 801aa16:	2604      	movs	r6, #4
		FREE_NAMBUF();
 801aa18:	f001 faaa 	bl	801bf70 <ff_memfree>
 801aa1c:	e643      	b.n	801a6a6 <f_open+0x22>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801aa1e:	a807      	add	r0, sp, #28
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801aa20:	f047 0708 	orr.w	r7, r7, #8
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801aa24:	f7fe fc7c 	bl	8019320 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801aa28:	2800      	cmp	r0, #0
 801aa2a:	f47f ae8b 	bne.w	801a744 <f_open+0xc0>
				dw = GET_FATTIME();
 801aa2e:	f7fc fcdd 	bl	80173ec <get_fattime>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801aa32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	*ptr++ = (BYTE)val; val >>= 8;
 801aa34:	b2c5      	uxtb	r5, r0
	*ptr++ = (BYTE)val; val >>= 8;
 801aa36:	f3c0 2107 	ubfx	r1, r0, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 801aa3a:	f3c0 4207 	ubfx	r2, r0, #16, #8
	*ptr++ = (BYTE)val;
 801aa3e:	0e00      	lsrs	r0, r0, #24
	*ptr++ = (BYTE)val; val >>= 8;
 801aa40:	739d      	strb	r5, [r3, #14]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801aa42:	f04f 0c20 	mov.w	ip, #32
	*ptr++ = (BYTE)val; val >>= 8;
 801aa46:	73d9      	strb	r1, [r3, #15]
	*ptr++ = (BYTE)val; val >>= 8;
 801aa48:	741a      	strb	r2, [r3, #16]
	*ptr++ = (BYTE)val;
 801aa4a:	7458      	strb	r0, [r3, #17]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801aa4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801aa4e:	f8dd a018 	ldr.w	sl, [sp, #24]
	*ptr++ = (BYTE)val; val >>= 8;
 801aa52:	759d      	strb	r5, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 801aa54:	75d9      	strb	r1, [r3, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 801aa56:	761a      	strb	r2, [r3, #24]
	*ptr++ = (BYTE)val;
 801aa58:	7658      	strb	r0, [r3, #25]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801aa5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801aa5c:	f883 c00b 	strb.w	ip, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801aa60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	if (fs->fs_type == FS_FAT32) {
 801aa62:	f89a 2000 	ldrb.w	r2, [sl]
	rv = rv << 8 | ptr[0];
 801aa66:	7ed9      	ldrb	r1, [r3, #27]
 801aa68:	7e9d      	ldrb	r5, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 801aa6a:	2a03      	cmp	r2, #3
	cl = ld_word(dir + DIR_FstClusLO);
 801aa6c:	ea45 2501 	orr.w	r5, r5, r1, lsl #8
	if (fs->fs_type == FS_FAT32) {
 801aa70:	d048      	beq.n	801ab04 <f_open+0x480>
	*ptr++ = (BYTE)val; val >>= 8;
 801aa72:	2200      	movs	r2, #0
 801aa74:	769a      	strb	r2, [r3, #26]
	*ptr++ = (BYTE)val;
 801aa76:	76da      	strb	r2, [r3, #27]
	if (fs->fs_type == FS_FAT32) {
 801aa78:	f89a 1000 	ldrb.w	r1, [sl]
 801aa7c:	2903      	cmp	r1, #3
 801aa7e:	d03e      	beq.n	801aafe <f_open+0x47a>
					st_dword(dj.dir + DIR_FileSize, 0);
 801aa80:	990f      	ldr	r1, [sp, #60]	; 0x3c
	*ptr++ = (BYTE)val; val >>= 8;
 801aa82:	2200      	movs	r2, #0
					fs->wflag = 1;
 801aa84:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 801aa86:	61ca      	str	r2, [r1, #28]
					fs->wflag = 1;
 801aa88:	f88a 3003 	strb.w	r3, [sl, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 801aa8c:	b18d      	cbz	r5, 801aab2 <f_open+0x42e>
						res = remove_chain(&dj.obj, cl, 0);
 801aa8e:	a807      	add	r0, sp, #28
 801aa90:	4629      	mov	r1, r5
						dw = fs->winsect;
 801aa92:	f8da b030 	ldr.w	fp, [sl, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 801aa96:	f7fc ff3b 	bl	8017910 <remove_chain>
						if (res == FR_OK) {
 801aa9a:	2800      	cmp	r0, #0
 801aa9c:	f47f ae52 	bne.w	801a744 <f_open+0xc0>
							res = move_window(fs, dw);
 801aaa0:	f8dd a018 	ldr.w	sl, [sp, #24]
 801aaa4:	3d01      	subs	r5, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 801aaa6:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
 801aaaa:	459b      	cmp	fp, r3
 801aaac:	d157      	bne.n	801ab5e <f_open+0x4da>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801aaae:	f8ca 5010 	str.w	r5, [sl, #16]
 801aab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aab4:	9807      	ldr	r0, [sp, #28]
 801aab6:	9302      	str	r3, [sp, #8]
 801aab8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801aaba:	9303      	str	r3, [sp, #12]
 801aabc:	e6a1      	b.n	801a802 <f_open+0x17e>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801aabe:	460d      	mov	r5, r1
 801aac0:	2101      	movs	r1, #1
		Files[i].fs = dp->obj.fs;
 801aac2:	012a      	lsls	r2, r5, #4
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801aac4:	f1bb 0f00 	cmp.w	fp, #0
		Files[i].ctr = 0;
 801aac8:	f04f 0c00 	mov.w	ip, #0
		Files[i].fs = dp->obj.fs;
 801aacc:	eb08 0502 	add.w	r5, r8, r2
 801aad0:	f848 0002 	str.w	r0, [r8, r2]
		Files[i].clu = dp->obj.sclust;
 801aad4:	9802      	ldr	r0, [sp, #8]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801aad6:	bf14      	ite	ne
 801aad8:	f44f 7e80 	movne.w	lr, #256	; 0x100
 801aadc:	f04f 0e01 	moveq.w	lr, #1
		Files[i].ctr = 0;
 801aae0:	f8a5 c00c 	strh.w	ip, [r5, #12]
		Files[i].clu = dp->obj.sclust;
 801aae4:	6068      	str	r0, [r5, #4]
		Files[i].ofs = dp->dptr;
 801aae6:	9803      	ldr	r0, [sp, #12]
 801aae8:	60a8      	str	r0, [r5, #8]
 801aaea:	e6d6      	b.n	801a89a <f_open+0x216>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801aaec:	2501      	movs	r5, #1
 801aaee:	2102      	movs	r1, #2
 801aaf0:	e7e7      	b.n	801aac2 <f_open+0x43e>
 801aaf2:	2502      	movs	r5, #2
 801aaf4:	2103      	movs	r1, #3
 801aaf6:	e7e4      	b.n	801aac2 <f_open+0x43e>
 801aaf8:	2503      	movs	r5, #3
 801aafa:	2104      	movs	r1, #4
 801aafc:	e7e1      	b.n	801aac2 <f_open+0x43e>
	*ptr++ = (BYTE)val; val >>= 8;
 801aafe:	751a      	strb	r2, [r3, #20]
	*ptr++ = (BYTE)val;
 801ab00:	755a      	strb	r2, [r3, #21]
 801ab02:	e7bd      	b.n	801aa80 <f_open+0x3fc>
	rv = rv << 8 | ptr[0];
 801ab04:	7d59      	ldrb	r1, [r3, #21]
 801ab06:	7d1a      	ldrb	r2, [r3, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801ab08:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 801ab0c:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
 801ab10:	e7af      	b.n	801aa72 <f_open+0x3ee>
				fp->clust = clst;
 801ab12:	61e5      	str	r5, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801ab14:	f3cb 0308 	ubfx	r3, fp, #0, #9
 801ab18:	2b00      	cmp	r3, #0
 801ab1a:	f43f af18 	beq.w	801a94e <f_open+0x2ca>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801ab1e:	9806      	ldr	r0, [sp, #24]
	clst -= 2;
 801ab20:	3d02      	subs	r5, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801ab22:	6983      	ldr	r3, [r0, #24]
 801ab24:	3b02      	subs	r3, #2
 801ab26:	429d      	cmp	r5, r3
 801ab28:	d204      	bcs.n	801ab34 <f_open+0x4b0>
	return clst * fs->csize + fs->database;
 801ab2a:	8942      	ldrh	r2, [r0, #10]
 801ab2c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801ab2e:	fb05 3202 	mla	r2, r5, r2, r3
					if ((sc = clust2sect(fs, clst)) == 0) {
 801ab32:	b922      	cbnz	r2, 801ab3e <f_open+0x4ba>
		FREE_NAMBUF();
 801ab34:	4648      	mov	r0, r9
						res = FR_INT_ERR;
 801ab36:	2602      	movs	r6, #2
		FREE_NAMBUF();
 801ab38:	f001 fa1a 	bl	801bf70 <ff_memfree>
 801ab3c:	e5b3      	b.n	801a6a6 <f_open+0x22>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801ab3e:	eb02 225b 	add.w	r2, r2, fp, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801ab42:	4641      	mov	r1, r8
 801ab44:	2301      	movs	r3, #1
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801ab46:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801ab48:	7840      	ldrb	r0, [r0, #1]
 801ab4a:	f7fc fc25 	bl	8017398 <disk_read>
 801ab4e:	2800      	cmp	r0, #0
 801ab50:	f43f aefd 	beq.w	801a94e <f_open+0x2ca>
		FREE_NAMBUF();
 801ab54:	4648      	mov	r0, r9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801ab56:	2601      	movs	r6, #1
		FREE_NAMBUF();
 801ab58:	f001 fa0a 	bl	801bf70 <ff_memfree>
 801ab5c:	e5a3      	b.n	801a6a6 <f_open+0x22>
 801ab5e:	4650      	mov	r0, sl
 801ab60:	4659      	mov	r1, fp
 801ab62:	f7fc fcc5 	bl	80174f0 <move_window.part.5>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801ab66:	f8dd a018 	ldr.w	sl, [sp, #24]
 801ab6a:	f8ca 5010 	str.w	r5, [sl, #16]
		if (res == FR_OK) {
 801ab6e:	2800      	cmp	r0, #0
 801ab70:	d09f      	beq.n	801aab2 <f_open+0x42e>
 801ab72:	e5e7      	b.n	801a744 <f_open+0xc0>
 801ab74:	24009298 	.word	0x24009298

0801ab78 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 801ab78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab7c:	469a      	mov	sl, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 801ab7e:	2300      	movs	r3, #0
{
 801ab80:	b08b      	sub	sp, #44	; 0x2c
	*br = 0;	/* Clear read byte counter */
 801ab82:	f8ca 3000 	str.w	r3, [sl]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801ab86:	b148      	cbz	r0, 801ab9c <f_read+0x24>
 801ab88:	6803      	ldr	r3, [r0, #0]
 801ab8a:	4680      	mov	r8, r0
 801ab8c:	b133      	cbz	r3, 801ab9c <f_read+0x24>
 801ab8e:	4689      	mov	r9, r1
 801ab90:	7819      	ldrb	r1, [r3, #0]
 801ab92:	b119      	cbz	r1, 801ab9c <f_read+0x24>
 801ab94:	8880      	ldrh	r0, [r0, #4]
 801ab96:	88d9      	ldrh	r1, [r3, #6]
 801ab98:	4288      	cmp	r0, r1
 801ab9a:	d005      	beq.n	801aba8 <f_read+0x30>
	FRESULT res = FR_INVALID_OBJECT;
 801ab9c:	2309      	movs	r3, #9
 801ab9e:	9300      	str	r3, [sp, #0]
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 801aba0:	9800      	ldr	r0, [sp, #0]
 801aba2:	b00b      	add	sp, #44	; 0x2c
 801aba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801aba8:	7858      	ldrb	r0, [r3, #1]
 801abaa:	9201      	str	r2, [sp, #4]
 801abac:	f7fc fbd6 	bl	801735c <disk_status>
 801abb0:	07c1      	lsls	r1, r0, #31
 801abb2:	d4f3      	bmi.n	801ab9c <f_read+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801abb4:	f898 3015 	ldrb.w	r3, [r8, #21]
 801abb8:	9300      	str	r3, [sp, #0]
 801abba:	2b00      	cmp	r3, #0
 801abbc:	d1f0      	bne.n	801aba0 <f_read+0x28>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801abbe:	f898 3014 	ldrb.w	r3, [r8, #20]
 801abc2:	07da      	lsls	r2, r3, #31
 801abc4:	f140 8116 	bpl.w	801adf4 <f_read+0x27c>
	remain = fp->obj.objsize - fp->fptr;
 801abc8:	f8d8 1018 	ldr.w	r1, [r8, #24]
 801abcc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801abd0:	9a01      	ldr	r2, [sp, #4]
 801abd2:	1a5b      	subs	r3, r3, r1
 801abd4:	4293      	cmp	r3, r2
 801abd6:	bf28      	it	cs
 801abd8:	4613      	movcs	r3, r2
 801abda:	469b      	mov	fp, r3
	for ( ;  btr;								/* Repeat until all data read */
 801abdc:	2b00      	cmp	r3, #0
 801abde:	d0df      	beq.n	801aba0 <f_read+0x28>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801abe0:	4643      	mov	r3, r8
 801abe2:	f108 0234 	add.w	r2, r8, #52	; 0x34
 801abe6:	f8cd a008 	str.w	sl, [sp, #8]
 801abea:	f853 0b30 	ldr.w	r0, [r3], #48
 801abee:	9205      	str	r2, [sp, #20]
 801abf0:	9301      	str	r3, [sp, #4]
 801abf2:	425b      	negs	r3, r3
 801abf4:	4682      	mov	sl, r0
 801abf6:	f003 0303 	and.w	r3, r3, #3
 801abfa:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 801abfe:	9304      	str	r3, [sp, #16]
 801ac00:	3330      	adds	r3, #48	; 0x30
 801ac02:	9208      	str	r2, [sp, #32]
 801ac04:	9309      	str	r3, [sp, #36]	; 0x24
 801ac06:	0893      	lsrs	r3, r2, #2
 801ac08:	9307      	str	r3, [sp, #28]
 801ac0a:	f022 0303 	bic.w	r3, r2, #3
 801ac0e:	9306      	str	r3, [sp, #24]
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801ac10:	f3c1 0308 	ubfx	r3, r1, #0, #9
 801ac14:	2b00      	cmp	r3, #0
 801ac16:	d14b      	bne.n	801acb0 <f_read+0x138>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801ac18:	f8ba 600a 	ldrh.w	r6, [sl, #10]
 801ac1c:	0a4b      	lsrs	r3, r1, #9
 801ac1e:	3e01      	subs	r6, #1
			if (csect == 0) {					/* On the cluster boundary? */
 801ac20:	401e      	ands	r6, r3
 801ac22:	f000 80b7 	beq.w	801ad94 <f_read+0x21c>
 801ac26:	f8d8 001c 	ldr.w	r0, [r8, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801ac2a:	f8da 3018 	ldr.w	r3, [sl, #24]
	clst -= 2;
 801ac2e:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801ac30:	3b02      	subs	r3, #2
 801ac32:	4298      	cmp	r0, r3
 801ac34:	f080 80e7 	bcs.w	801ae06 <f_read+0x28e>
	return clst * fs->csize + fs->database;
 801ac38:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 801ac3c:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
 801ac40:	fb03 f500 	mul.w	r5, r3, r0
 801ac44:	9203      	str	r2, [sp, #12]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801ac46:	18af      	adds	r7, r5, r2
 801ac48:	f000 80dd 	beq.w	801ae06 <f_read+0x28e>
			if (cc) {							/* Read maximum contiguous sectors directly */
 801ac4c:	ea5f 245b 	movs.w	r4, fp, lsr #9
			sect += csect;
 801ac50:	4437      	add	r7, r6
			if (cc) {							/* Read maximum contiguous sectors directly */
 801ac52:	d015      	beq.n	801ac80 <f_read+0x108>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801ac54:	1932      	adds	r2, r6, r4
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801ac56:	4649      	mov	r1, r9
 801ac58:	f89a 0001 	ldrb.w	r0, [sl, #1]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801ac5c:	429a      	cmp	r2, r3
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801ac5e:	463a      	mov	r2, r7
					cc = fs->csize - csect;
 801ac60:	bf88      	it	hi
 801ac62:	1b9c      	subhi	r4, r3, r6
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801ac64:	4623      	mov	r3, r4
 801ac66:	f7fc fb97 	bl	8017398 <disk_read>
 801ac6a:	2800      	cmp	r0, #0
 801ac6c:	f000 80c5 	beq.w	801adfa <f_read+0x282>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801ac70:	2301      	movs	r3, #1
 801ac72:	9300      	str	r3, [sp, #0]
}
 801ac74:	9800      	ldr	r0, [sp, #0]
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801ac76:	f888 3015 	strb.w	r3, [r8, #21]
}
 801ac7a:	b00b      	add	sp, #44	; 0x2c
 801ac7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801ac80:	f8d8 2020 	ldr.w	r2, [r8, #32]
 801ac84:	42ba      	cmp	r2, r7
 801ac86:	d00d      	beq.n	801aca4 <f_read+0x12c>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801ac88:	f998 3014 	ldrsb.w	r3, [r8, #20]
 801ac8c:	f89a 0001 	ldrb.w	r0, [sl, #1]
 801ac90:	2b00      	cmp	r3, #0
 801ac92:	f2c0 80bd 	blt.w	801ae10 <f_read+0x298>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801ac96:	2301      	movs	r3, #1
 801ac98:	463a      	mov	r2, r7
 801ac9a:	9901      	ldr	r1, [sp, #4]
 801ac9c:	f7fc fb7c 	bl	8017398 <disk_read>
 801aca0:	2800      	cmp	r0, #0
 801aca2:	d1e5      	bne.n	801ac70 <f_read+0xf8>
 801aca4:	f8d8 3018 	ldr.w	r3, [r8, #24]
			fp->sect = sect;
 801aca8:	f8c8 7020 	str.w	r7, [r8, #32]
 801acac:	f3c3 0308 	ubfx	r3, r3, #0, #9
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801acb0:	f5c3 7400 	rsb	r4, r3, #512	; 0x200
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801acb4:	9d01      	ldr	r5, [sp, #4]
 801acb6:	1d1a      	adds	r2, r3, #4
 801acb8:	f109 0104 	add.w	r1, r9, #4
 801acbc:	455c      	cmp	r4, fp
 801acbe:	eb05 0003 	add.w	r0, r5, r3
 801acc2:	442a      	add	r2, r5
 801acc4:	bf28      	it	cs
 801acc6:	465c      	movcs	r4, fp
 801acc8:	4288      	cmp	r0, r1
 801acca:	bf38      	it	cc
 801accc:	4591      	cmpcc	r9, r2
 801acce:	d372      	bcc.n	801adb6 <f_read+0x23e>
 801acd0:	2c0b      	cmp	r4, #11
 801acd2:	d970      	bls.n	801adb6 <f_read+0x23e>
 801acd4:	4242      	negs	r2, r0
 801acd6:	1e66      	subs	r6, r4, #1
 801acd8:	f012 0203 	ands.w	r2, r2, #3
 801acdc:	d068      	beq.n	801adb0 <f_read+0x238>
			*d++ = *s++;
 801acde:	7801      	ldrb	r1, [r0, #0]
 801ace0:	2a01      	cmp	r2, #1
 801ace2:	f100 0501 	add.w	r5, r0, #1
 801ace6:	f109 0e01 	add.w	lr, r9, #1
 801acea:	f889 1000 	strb.w	r1, [r9]
 801acee:	d05c      	beq.n	801adaa <f_read+0x232>
 801acf0:	7841      	ldrb	r1, [r0, #1]
 801acf2:	2a03      	cmp	r2, #3
 801acf4:	f100 0502 	add.w	r5, r0, #2
 801acf8:	f109 0e02 	add.w	lr, r9, #2
		} while (--cnt);
 801acfc:	f1a4 0602 	sub.w	r6, r4, #2
			*d++ = *s++;
 801ad00:	f889 1001 	strb.w	r1, [r9, #1]
 801ad04:	d151      	bne.n	801adaa <f_read+0x232>
 801ad06:	7881      	ldrb	r1, [r0, #2]
 801ad08:	f109 0e03 	add.w	lr, r9, #3
 801ad0c:	3003      	adds	r0, #3
		} while (--cnt);
 801ad0e:	1ee6      	subs	r6, r4, #3
 801ad10:	9d01      	ldr	r5, [sp, #4]
			*d++ = *s++;
 801ad12:	f889 1002 	strb.w	r1, [r9, #2]
 801ad16:	4413      	add	r3, r2
 801ad18:	eba4 0c02 	sub.w	ip, r4, r2
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801ad1c:	2100      	movs	r1, #0
 801ad1e:	444a      	add	r2, r9
 801ad20:	442b      	add	r3, r5
 801ad22:	ea4f 079c 	mov.w	r7, ip, lsr #2
 801ad26:	3101      	adds	r1, #1
			*d++ = *s++;
 801ad28:	f853 5b04 	ldr.w	r5, [r3], #4
 801ad2c:	428f      	cmp	r7, r1
 801ad2e:	f842 5b04 	str.w	r5, [r2], #4
 801ad32:	d8f8      	bhi.n	801ad26 <f_read+0x1ae>
 801ad34:	f02c 0303 	bic.w	r3, ip, #3
 801ad38:	459c      	cmp	ip, r3
 801ad3a:	eba6 0603 	sub.w	r6, r6, r3
 801ad3e:	eb0e 0203 	add.w	r2, lr, r3
 801ad42:	eb00 0103 	add.w	r1, r0, r3
 801ad46:	d016      	beq.n	801ad76 <f_read+0x1fe>
 801ad48:	5cc0      	ldrb	r0, [r0, r3]
		} while (--cnt);
 801ad4a:	2e01      	cmp	r6, #1
			*d++ = *s++;
 801ad4c:	f80e 0003 	strb.w	r0, [lr, r3]
		} while (--cnt);
 801ad50:	d011      	beq.n	801ad76 <f_read+0x1fe>
			*d++ = *s++;
 801ad52:	784b      	ldrb	r3, [r1, #1]
		} while (--cnt);
 801ad54:	2e02      	cmp	r6, #2
			*d++ = *s++;
 801ad56:	7053      	strb	r3, [r2, #1]
		} while (--cnt);
 801ad58:	d00d      	beq.n	801ad76 <f_read+0x1fe>
			*d++ = *s++;
 801ad5a:	788b      	ldrb	r3, [r1, #2]
		} while (--cnt);
 801ad5c:	2e03      	cmp	r6, #3
			*d++ = *s++;
 801ad5e:	7093      	strb	r3, [r2, #2]
		} while (--cnt);
 801ad60:	d009      	beq.n	801ad76 <f_read+0x1fe>
			*d++ = *s++;
 801ad62:	78cb      	ldrb	r3, [r1, #3]
		} while (--cnt);
 801ad64:	2e04      	cmp	r6, #4
			*d++ = *s++;
 801ad66:	70d3      	strb	r3, [r2, #3]
		} while (--cnt);
 801ad68:	d005      	beq.n	801ad76 <f_read+0x1fe>
			*d++ = *s++;
 801ad6a:	790b      	ldrb	r3, [r1, #4]
		} while (--cnt);
 801ad6c:	2e05      	cmp	r6, #5
			*d++ = *s++;
 801ad6e:	7113      	strb	r3, [r2, #4]
		} while (--cnt);
 801ad70:	d001      	beq.n	801ad76 <f_read+0x1fe>
			*d++ = *s++;
 801ad72:	794b      	ldrb	r3, [r1, #5]
 801ad74:	7153      	strb	r3, [r2, #5]
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 801ad76:	9a02      	ldr	r2, [sp, #8]
	for ( ;  btr;								/* Repeat until all data read */
 801ad78:	ebbb 0b04 	subs.w	fp, fp, r4
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 801ad7c:	f8d8 1018 	ldr.w	r1, [r8, #24]
 801ad80:	44a1      	add	r9, r4
 801ad82:	6813      	ldr	r3, [r2, #0]
 801ad84:	4421      	add	r1, r4
 801ad86:	4423      	add	r3, r4
 801ad88:	f8c8 1018 	str.w	r1, [r8, #24]
 801ad8c:	6013      	str	r3, [r2, #0]
	for ( ;  btr;								/* Repeat until all data read */
 801ad8e:	f47f af3f 	bne.w	801ac10 <f_read+0x98>
 801ad92:	e705      	b.n	801aba0 <f_read+0x28>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801ad94:	b9c9      	cbnz	r1, 801adca <f_read+0x252>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801ad96:	f8d8 0008 	ldr.w	r0, [r8, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801ad9a:	2801      	cmp	r0, #1
 801ad9c:	d933      	bls.n	801ae06 <f_read+0x28e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801ad9e:	1c43      	adds	r3, r0, #1
 801ada0:	f43f af66 	beq.w	801ac70 <f_read+0xf8>
				fp->clust = clst;				/* Update current cluster */
 801ada4:	f8c8 001c 	str.w	r0, [r8, #28]
 801ada8:	e73f      	b.n	801ac2a <f_read+0xb2>
			*d++ = *s++;
 801adaa:	4628      	mov	r0, r5
 801adac:	9d01      	ldr	r5, [sp, #4]
 801adae:	e7b2      	b.n	801ad16 <f_read+0x19e>
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801adb0:	46ce      	mov	lr, r9
 801adb2:	4626      	mov	r6, r4
 801adb4:	e7af      	b.n	801ad16 <f_read+0x19e>
 801adb6:	f109 33ff 	add.w	r3, r9, #4294967295
 801adba:	1901      	adds	r1, r0, r4
			*d++ = *s++;
 801adbc:	f810 2b01 	ldrb.w	r2, [r0], #1
		} while (--cnt);
 801adc0:	4288      	cmp	r0, r1
			*d++ = *s++;
 801adc2:	f803 2f01 	strb.w	r2, [r3, #1]!
		} while (--cnt);
 801adc6:	d1f9      	bne.n	801adbc <f_read+0x244>
 801adc8:	e7d5      	b.n	801ad76 <f_read+0x1fe>
					if (fp->cltbl) {
 801adca:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 801adce:	f8d8 0000 	ldr.w	r0, [r8]
 801add2:	b36a      	cbz	r2, 801ae30 <f_read+0x2b8>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801add4:	8940      	ldrh	r0, [r0, #10]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801add6:	1d11      	adds	r1, r2, #4
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801add8:	6852      	ldr	r2, [r2, #4]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801adda:	fbb3 f3f0 	udiv	r3, r3, r0
		if (ncl == 0) return 0;	/* End of table? (error) */
 801adde:	b922      	cbnz	r2, 801adea <f_read+0x272>
 801ade0:	e011      	b.n	801ae06 <f_read+0x28e>
		cl -= ncl; tbl++;		/* Next fragment */
 801ade2:	1a9b      	subs	r3, r3, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801ade4:	f851 2f08 	ldr.w	r2, [r1, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 801ade8:	b16a      	cbz	r2, 801ae06 <f_read+0x28e>
		if (cl < ncl) break;	/* In this fragment? */
 801adea:	429a      	cmp	r2, r3
 801adec:	d9f9      	bls.n	801ade2 <f_read+0x26a>
	return cl + *tbl;	/* Return the cluster number */
 801adee:	6848      	ldr	r0, [r1, #4]
 801adf0:	4418      	add	r0, r3
 801adf2:	e7d2      	b.n	801ad9a <f_read+0x222>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801adf4:	2307      	movs	r3, #7
 801adf6:	9300      	str	r3, [sp, #0]
 801adf8:	e6d2      	b.n	801aba0 <f_read+0x28>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801adfa:	f998 3014 	ldrsb.w	r3, [r8, #20]
 801adfe:	2b00      	cmp	r3, #0
 801ae00:	db1b      	blt.n	801ae3a <f_read+0x2c2>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801ae02:	0264      	lsls	r4, r4, #9
				continue;
 801ae04:	e7b7      	b.n	801ad76 <f_read+0x1fe>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801ae06:	2302      	movs	r3, #2
 801ae08:	f888 3015 	strb.w	r3, [r8, #21]
 801ae0c:	9300      	str	r3, [sp, #0]
 801ae0e:	e6c7      	b.n	801aba0 <f_read+0x28>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801ae10:	2301      	movs	r3, #1
 801ae12:	9901      	ldr	r1, [sp, #4]
 801ae14:	f7fc face 	bl	80173b4 <disk_write>
 801ae18:	2800      	cmp	r0, #0
 801ae1a:	f47f af29 	bne.w	801ac70 <f_read+0xf8>
					fp->flag &= (BYTE)~FA_DIRTY;
 801ae1e:	f898 3014 	ldrb.w	r3, [r8, #20]
 801ae22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ae26:	f888 3014 	strb.w	r3, [r8, #20]
 801ae2a:	f89a 0001 	ldrb.w	r0, [sl, #1]
 801ae2e:	e732      	b.n	801ac96 <f_read+0x11e>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801ae30:	f8d8 101c 	ldr.w	r1, [r8, #28]
 801ae34:	f7fd f9c0 	bl	80181b8 <get_fat.isra.8>
 801ae38:	e7af      	b.n	801ad9a <f_read+0x222>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801ae3a:	f8d8 3020 	ldr.w	r3, [r8, #32]
 801ae3e:	1bd9      	subs	r1, r3, r7
 801ae40:	42a1      	cmp	r1, r4
 801ae42:	d2de      	bcs.n	801ae02 <f_read+0x28a>
 801ae44:	9a03      	ldr	r2, [sp, #12]
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801ae46:	eb09 2141 	add.w	r1, r9, r1, lsl #9
 801ae4a:	9f01      	ldr	r7, [sp, #4]
 801ae4c:	1a9b      	subs	r3, r3, r2
 801ae4e:	463a      	mov	r2, r7
 801ae50:	1b9b      	subs	r3, r3, r6
 801ae52:	1b5b      	subs	r3, r3, r5
 801ae54:	9d05      	ldr	r5, [sp, #20]
 801ae56:	025b      	lsls	r3, r3, #9
 801ae58:	eb09 0003 	add.w	r0, r9, r3
 801ae5c:	4285      	cmp	r5, r0
 801ae5e:	d903      	bls.n	801ae68 <f_read+0x2f0>
 801ae60:	1d18      	adds	r0, r3, #4
 801ae62:	4448      	add	r0, r9
 801ae64:	4287      	cmp	r7, r0
 801ae66:	d348      	bcc.n	801aefa <f_read+0x382>
 801ae68:	9e04      	ldr	r6, [sp, #16]
 801ae6a:	2e00      	cmp	r6, #0
 801ae6c:	d040      	beq.n	801aef0 <f_read+0x378>
			*d++ = *s++;
 801ae6e:	f898 5030 	ldrb.w	r5, [r8, #48]	; 0x30
 801ae72:	2e01      	cmp	r6, #1
 801ae74:	f108 0231 	add.w	r2, r8, #49	; 0x31
 801ae78:	f101 0001 	add.w	r0, r1, #1
 801ae7c:	700d      	strb	r5, [r1, #0]
 801ae7e:	d033      	beq.n	801aee8 <f_read+0x370>
 801ae80:	f898 5031 	ldrb.w	r5, [r8, #49]	; 0x31
 801ae84:	2e03      	cmp	r6, #3
 801ae86:	f108 0232 	add.w	r2, r8, #50	; 0x32
 801ae8a:	f101 0002 	add.w	r0, r1, #2
 801ae8e:	704d      	strb	r5, [r1, #1]
 801ae90:	d13d      	bne.n	801af0e <f_read+0x396>
 801ae92:	f898 5032 	ldrb.w	r5, [r8, #50]	; 0x32
 801ae96:	1cc8      	adds	r0, r1, #3
 801ae98:	f108 0233 	add.w	r2, r8, #51	; 0x33
 801ae9c:	708d      	strb	r5, [r1, #2]
 801ae9e:	f240 15fd 	movw	r5, #509	; 0x1fd
 801aea2:	4631      	mov	r1, r6
 801aea4:	440b      	add	r3, r1
 801aea6:	9909      	ldr	r1, [sp, #36]	; 0x24
 801aea8:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801aeac:	eb08 0601 	add.w	r6, r8, r1
 801aeb0:	444b      	add	r3, r9
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801aeb2:	2100      	movs	r1, #0
 801aeb4:	3101      	adds	r1, #1
			*d++ = *s++;
 801aeb6:	f856 7b04 	ldr.w	r7, [r6], #4
 801aeba:	458c      	cmp	ip, r1
 801aebc:	f843 7b04 	str.w	r7, [r3], #4
 801aec0:	d8f8      	bhi.n	801aeb4 <f_read+0x33c>
 801aec2:	9e06      	ldr	r6, [sp, #24]
 801aec4:	9f08      	ldr	r7, [sp, #32]
 801aec6:	1bad      	subs	r5, r5, r6
 801aec8:	1983      	adds	r3, r0, r6
 801aeca:	42be      	cmp	r6, r7
 801aecc:	eb02 0106 	add.w	r1, r2, r6
 801aed0:	d097      	beq.n	801ae02 <f_read+0x28a>
 801aed2:	5d92      	ldrb	r2, [r2, r6]
		} while (--cnt);
 801aed4:	2d01      	cmp	r5, #1
			*d++ = *s++;
 801aed6:	5582      	strb	r2, [r0, r6]
		} while (--cnt);
 801aed8:	d093      	beq.n	801ae02 <f_read+0x28a>
			*d++ = *s++;
 801aeda:	784a      	ldrb	r2, [r1, #1]
		} while (--cnt);
 801aedc:	2d02      	cmp	r5, #2
			*d++ = *s++;
 801aede:	705a      	strb	r2, [r3, #1]
		} while (--cnt);
 801aee0:	d08f      	beq.n	801ae02 <f_read+0x28a>
			*d++ = *s++;
 801aee2:	788a      	ldrb	r2, [r1, #2]
 801aee4:	709a      	strb	r2, [r3, #2]
 801aee6:	e78c      	b.n	801ae02 <f_read+0x28a>
 801aee8:	f240 15ff 	movw	r5, #511	; 0x1ff
 801aeec:	4631      	mov	r1, r6
 801aeee:	e7d9      	b.n	801aea4 <f_read+0x32c>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801aef0:	4608      	mov	r0, r1
 801aef2:	f44f 7500 	mov.w	r5, #512	; 0x200
 801aef6:	4631      	mov	r1, r6
 801aef8:	e7d4      	b.n	801aea4 <f_read+0x32c>
 801aefa:	3901      	subs	r1, #1
 801aefc:	f508 700c 	add.w	r0, r8, #560	; 0x230
			*d++ = *s++;
 801af00:	f812 3b01 	ldrb.w	r3, [r2], #1
		} while (--cnt);
 801af04:	4290      	cmp	r0, r2
			*d++ = *s++;
 801af06:	f801 3f01 	strb.w	r3, [r1, #1]!
		} while (--cnt);
 801af0a:	d1f9      	bne.n	801af00 <f_read+0x388>
 801af0c:	e779      	b.n	801ae02 <f_read+0x28a>
			*d++ = *s++;
 801af0e:	f44f 75ff 	mov.w	r5, #510	; 0x1fe
 801af12:	4631      	mov	r1, r6
 801af14:	e7c6      	b.n	801aea4 <f_read+0x32c>
 801af16:	bf00      	nop

0801af18 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801af18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af1c:	469a      	mov	sl, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 801af1e:	2300      	movs	r3, #0
{
 801af20:	b08b      	sub	sp, #44	; 0x2c
	*bw = 0;	/* Clear write byte counter */
 801af22:	f8ca 3000 	str.w	r3, [sl]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801af26:	b150      	cbz	r0, 801af3e <f_write+0x26>
 801af28:	6803      	ldr	r3, [r0, #0]
 801af2a:	4604      	mov	r4, r0
 801af2c:	b13b      	cbz	r3, 801af3e <f_write+0x26>
 801af2e:	4690      	mov	r8, r2
 801af30:	781a      	ldrb	r2, [r3, #0]
 801af32:	b122      	cbz	r2, 801af3e <f_write+0x26>
 801af34:	460e      	mov	r6, r1
 801af36:	88da      	ldrh	r2, [r3, #6]
 801af38:	8881      	ldrh	r1, [r0, #4]
 801af3a:	4291      	cmp	r1, r2
 801af3c:	d005      	beq.n	801af4a <f_write+0x32>
	FRESULT res = FR_INVALID_OBJECT;
 801af3e:	f04f 0b09 	mov.w	fp, #9
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 801af42:	4658      	mov	r0, fp
 801af44:	b00b      	add	sp, #44	; 0x2c
 801af46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801af4a:	7858      	ldrb	r0, [r3, #1]
 801af4c:	f7fc fa06 	bl	801735c <disk_status>
 801af50:	07c1      	lsls	r1, r0, #31
 801af52:	d4f4      	bmi.n	801af3e <f_write+0x26>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801af54:	f894 b015 	ldrb.w	fp, [r4, #21]
 801af58:	f1bb 0f00 	cmp.w	fp, #0
 801af5c:	d1f1      	bne.n	801af42 <f_write+0x2a>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801af5e:	7d23      	ldrb	r3, [r4, #20]
 801af60:	079a      	lsls	r2, r3, #30
 801af62:	f140 8136 	bpl.w	801b1d2 <f_write+0x2ba>
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801af66:	69a2      	ldr	r2, [r4, #24]
 801af68:	eb12 0f08 	cmn.w	r2, r8
 801af6c:	d301      	bcc.n	801af72 <f_write+0x5a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801af6e:	ea6f 0802 	mvn.w	r8, r2
	for ( ;  btw;							/* Repeat until all data written */
 801af72:	f1b8 0f00 	cmp.w	r8, #0
 801af76:	f000 80f0 	beq.w	801b15a <f_write+0x242>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801af7a:	4623      	mov	r3, r4
 801af7c:	f104 0134 	add.w	r1, r4, #52	; 0x34
 801af80:	f8cd b00c 	str.w	fp, [sp, #12]
 801af84:	46d3      	mov	fp, sl
 801af86:	9105      	str	r1, [sp, #20]
 801af88:	f853 1b30 	ldr.w	r1, [r3], #48
 801af8c:	e9cd 3100 	strd	r3, r1, [sp]
 801af90:	425b      	negs	r3, r3
 801af92:	f003 0303 	and.w	r3, r3, #3
 801af96:	f5c3 7100 	rsb	r1, r3, #512	; 0x200
 801af9a:	9304      	str	r3, [sp, #16]
 801af9c:	3330      	adds	r3, #48	; 0x30
 801af9e:	9108      	str	r1, [sp, #32]
 801afa0:	9309      	str	r3, [sp, #36]	; 0x24
 801afa2:	088b      	lsrs	r3, r1, #2
 801afa4:	9307      	str	r3, [sp, #28]
 801afa6:	f021 0303 	bic.w	r3, r1, #3
 801afaa:	9306      	str	r3, [sp, #24]
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801afac:	f3c2 0308 	ubfx	r3, r2, #0, #9
 801afb0:	2b00      	cmp	r3, #0
 801afb2:	d151      	bne.n	801b058 <f_write+0x140>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801afb4:	9b01      	ldr	r3, [sp, #4]
 801afb6:	895f      	ldrh	r7, [r3, #10]
 801afb8:	0a53      	lsrs	r3, r2, #9
 801afba:	3f01      	subs	r7, #1
			if (csect == 0) {				/* On the cluster boundary? */
 801afbc:	401f      	ands	r7, r3
 801afbe:	d10f      	bne.n	801afe0 <f_write+0xc8>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801afc0:	2a00      	cmp	r2, #0
 801afc2:	f040 80df 	bne.w	801b184 <f_write+0x26c>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801afc6:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 801afc8:	2800      	cmp	r0, #0
 801afca:	f000 8119 	beq.w	801b200 <f_write+0x2e8>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801afce:	2801      	cmp	r0, #1
 801afd0:	f000 8180 	beq.w	801b2d4 <f_write+0x3bc>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801afd4:	1c43      	adds	r3, r0, #1
 801afd6:	d02c      	beq.n	801b032 <f_write+0x11a>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801afd8:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 801afda:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801afdc:	b903      	cbnz	r3, 801afe0 <f_write+0xc8>
 801afde:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801afe0:	f994 3014 	ldrsb.w	r3, [r4, #20]
 801afe4:	2b00      	cmp	r3, #0
 801afe6:	f2c0 80e5 	blt.w	801b1b4 <f_write+0x29c>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801afea:	9901      	ldr	r1, [sp, #4]
	clst -= 2;
 801afec:	69e3      	ldr	r3, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801afee:	698a      	ldr	r2, [r1, #24]
	clst -= 2;
 801aff0:	f1a3 0902 	sub.w	r9, r3, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801aff4:	3a02      	subs	r2, #2
 801aff6:	4591      	cmp	r9, r2
 801aff8:	f080 816c 	bcs.w	801b2d4 <f_write+0x3bc>
	return clst * fs->csize + fs->database;
 801affc:	894b      	ldrh	r3, [r1, #10]
 801affe:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801b000:	fb03 f909 	mul.w	r9, r3, r9
 801b004:	9202      	str	r2, [sp, #8]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801b006:	eb19 0a02 	adds.w	sl, r9, r2
 801b00a:	f000 8163 	beq.w	801b2d4 <f_write+0x3bc>
			if (cc) {						/* Write maximum contiguous sectors directly */
 801b00e:	ea5f 2558 	movs.w	r5, r8, lsr #9
			sect += csect;
 801b012:	44ba      	add	sl, r7
			if (cc) {						/* Write maximum contiguous sectors directly */
 801b014:	d014      	beq.n	801b040 <f_write+0x128>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801b016:	197a      	adds	r2, r7, r5
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801b018:	9801      	ldr	r0, [sp, #4]
 801b01a:	4631      	mov	r1, r6
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801b01c:	429a      	cmp	r2, r3
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801b01e:	7840      	ldrb	r0, [r0, #1]
 801b020:	4652      	mov	r2, sl
					cc = fs->csize - csect;
 801b022:	bf88      	it	hi
 801b024:	1bdd      	subhi	r5, r3, r7
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801b026:	462b      	mov	r3, r5
 801b028:	f7fc f9c4 	bl	80173b4 <disk_write>
 801b02c:	2800      	cmp	r0, #0
 801b02e:	f000 80d3 	beq.w	801b1d8 <f_write+0x2c0>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801b032:	2301      	movs	r3, #1
 801b034:	469b      	mov	fp, r3
 801b036:	7563      	strb	r3, [r4, #21]
}
 801b038:	4658      	mov	r0, fp
 801b03a:	b00b      	add	sp, #44	; 0x2c
 801b03c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801b040:	6a22      	ldr	r2, [r4, #32]
 801b042:	69a3      	ldr	r3, [r4, #24]
 801b044:	4552      	cmp	r2, sl
 801b046:	d003      	beq.n	801b050 <f_write+0x138>
 801b048:	68e2      	ldr	r2, [r4, #12]
 801b04a:	429a      	cmp	r2, r3
 801b04c:	f200 80cc 	bhi.w	801b1e8 <f_write+0x2d0>
 801b050:	f3c3 0308 	ubfx	r3, r3, #0, #9
			fp->sect = sect;
 801b054:	f8c4 a020 	str.w	sl, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801b058:	f5c3 7500 	rsb	r5, r3, #512	; 0x200
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801b05c:	9f00      	ldr	r7, [sp, #0]
 801b05e:	1d1a      	adds	r2, r3, #4
 801b060:	1d31      	adds	r1, r6, #4
 801b062:	4545      	cmp	r5, r8
 801b064:	eb07 0003 	add.w	r0, r7, r3
 801b068:	443a      	add	r2, r7
 801b06a:	bf28      	it	cs
 801b06c:	4645      	movcs	r5, r8
 801b06e:	4288      	cmp	r0, r1
 801b070:	bf38      	it	cc
 801b072:	4296      	cmpcc	r6, r2
 801b074:	d37d      	bcc.n	801b172 <f_write+0x25a>
 801b076:	2d0b      	cmp	r5, #11
 801b078:	d97b      	bls.n	801b172 <f_write+0x25a>
 801b07a:	4272      	negs	r2, r6
 801b07c:	f105 3cff 	add.w	ip, r5, #4294967295
 801b080:	f012 0203 	ands.w	r2, r2, #3
 801b084:	d072      	beq.n	801b16c <f_write+0x254>
			*d++ = *s++;
 801b086:	7831      	ldrb	r1, [r6, #0]
 801b088:	2a01      	cmp	r2, #1
 801b08a:	f106 0a01 	add.w	sl, r6, #1
 801b08e:	f100 0701 	add.w	r7, r0, #1
 801b092:	7001      	strb	r1, [r0, #0]
 801b094:	d067      	beq.n	801b166 <f_write+0x24e>
 801b096:	7871      	ldrb	r1, [r6, #1]
 801b098:	2a03      	cmp	r2, #3
 801b09a:	f106 0a02 	add.w	sl, r6, #2
 801b09e:	f100 0702 	add.w	r7, r0, #2
		} while (--cnt);
 801b0a2:	f1a5 0c02 	sub.w	ip, r5, #2
			*d++ = *s++;
 801b0a6:	7041      	strb	r1, [r0, #1]
 801b0a8:	d15d      	bne.n	801b166 <f_write+0x24e>
 801b0aa:	78b1      	ldrb	r1, [r6, #2]
 801b0ac:	f106 0a03 	add.w	sl, r6, #3
		} while (--cnt);
 801b0b0:	f1a5 0c03 	sub.w	ip, r5, #3
			*d++ = *s++;
 801b0b4:	3003      	adds	r0, #3
 801b0b6:	f800 1c01 	strb.w	r1, [r0, #-1]
 801b0ba:	9f00      	ldr	r7, [sp, #0]
 801b0bc:	4413      	add	r3, r2
 801b0be:	eba5 0902 	sub.w	r9, r5, r2
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801b0c2:	2100      	movs	r1, #0
 801b0c4:	4432      	add	r2, r6
 801b0c6:	443b      	add	r3, r7
 801b0c8:	ea4f 0e99 	mov.w	lr, r9, lsr #2
 801b0cc:	3101      	adds	r1, #1
			*d++ = *s++;
 801b0ce:	f852 7b04 	ldr.w	r7, [r2], #4
 801b0d2:	458e      	cmp	lr, r1
 801b0d4:	f843 7b04 	str.w	r7, [r3], #4
 801b0d8:	d8f8      	bhi.n	801b0cc <f_write+0x1b4>
 801b0da:	f029 0303 	bic.w	r3, r9, #3
 801b0de:	4599      	cmp	r9, r3
 801b0e0:	ebac 0c03 	sub.w	ip, ip, r3
 801b0e4:	eb00 0203 	add.w	r2, r0, r3
 801b0e8:	eb0a 0103 	add.w	r1, sl, r3
 801b0ec:	d039      	beq.n	801b162 <f_write+0x24a>
 801b0ee:	f81a 7003 	ldrb.w	r7, [sl, r3]
		} while (--cnt);
 801b0f2:	f1bc 0f01 	cmp.w	ip, #1
			*d++ = *s++;
 801b0f6:	54c7      	strb	r7, [r0, r3]
		} while (--cnt);
 801b0f8:	d033      	beq.n	801b162 <f_write+0x24a>
			*d++ = *s++;
 801b0fa:	784b      	ldrb	r3, [r1, #1]
		} while (--cnt);
 801b0fc:	f1bc 0f02 	cmp.w	ip, #2
			*d++ = *s++;
 801b100:	7053      	strb	r3, [r2, #1]
		} while (--cnt);
 801b102:	d02e      	beq.n	801b162 <f_write+0x24a>
			*d++ = *s++;
 801b104:	788b      	ldrb	r3, [r1, #2]
		} while (--cnt);
 801b106:	f1bc 0f03 	cmp.w	ip, #3
			*d++ = *s++;
 801b10a:	7093      	strb	r3, [r2, #2]
		} while (--cnt);
 801b10c:	d029      	beq.n	801b162 <f_write+0x24a>
			*d++ = *s++;
 801b10e:	78cb      	ldrb	r3, [r1, #3]
		} while (--cnt);
 801b110:	f1bc 0f04 	cmp.w	ip, #4
			*d++ = *s++;
 801b114:	70d3      	strb	r3, [r2, #3]
		} while (--cnt);
 801b116:	d024      	beq.n	801b162 <f_write+0x24a>
			*d++ = *s++;
 801b118:	790b      	ldrb	r3, [r1, #4]
		} while (--cnt);
 801b11a:	f1bc 0f05 	cmp.w	ip, #5
			*d++ = *s++;
 801b11e:	7113      	strb	r3, [r2, #4]
		} while (--cnt);
 801b120:	d01f      	beq.n	801b162 <f_write+0x24a>
			*d++ = *s++;
 801b122:	794b      	ldrb	r3, [r1, #5]
 801b124:	1971      	adds	r1, r6, r5
 801b126:	7153      	strb	r3, [r2, #5]
		fp->flag |= FA_DIRTY;
 801b128:	7d23      	ldrb	r3, [r4, #20]
 801b12a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801b12e:	7523      	strb	r3, [r4, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801b130:	69a2      	ldr	r2, [r4, #24]
 801b132:	460e      	mov	r6, r1
 801b134:	68e1      	ldr	r1, [r4, #12]
 801b136:	442a      	add	r2, r5
 801b138:	f8db 3000 	ldr.w	r3, [fp]
 801b13c:	4291      	cmp	r1, r2
 801b13e:	442b      	add	r3, r5
 801b140:	61a2      	str	r2, [r4, #24]
 801b142:	bf38      	it	cc
 801b144:	4611      	movcc	r1, r2
	for ( ;  btw;							/* Repeat until all data written */
 801b146:	ebb8 0805 	subs.w	r8, r8, r5
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801b14a:	60e1      	str	r1, [r4, #12]
 801b14c:	f8cb 3000 	str.w	r3, [fp]
	for ( ;  btw;							/* Repeat until all data written */
 801b150:	f47f af2c 	bne.w	801afac <f_write+0x94>
 801b154:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801b158:	7d23      	ldrb	r3, [r4, #20]
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801b15a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b15e:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 801b160:	e6ef      	b.n	801af42 <f_write+0x2a>
 801b162:	1971      	adds	r1, r6, r5
 801b164:	e7e0      	b.n	801b128 <f_write+0x210>
			*d++ = *s++;
 801b166:	4638      	mov	r0, r7
 801b168:	9f00      	ldr	r7, [sp, #0]
 801b16a:	e7a7      	b.n	801b0bc <f_write+0x1a4>
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801b16c:	46b2      	mov	sl, r6
 801b16e:	46ac      	mov	ip, r5
 801b170:	e7a4      	b.n	801b0bc <f_write+0x1a4>
 801b172:	3801      	subs	r0, #1
 801b174:	1971      	adds	r1, r6, r5
			*d++ = *s++;
 801b176:	f816 3b01 	ldrb.w	r3, [r6], #1
		} while (--cnt);
 801b17a:	428e      	cmp	r6, r1
			*d++ = *s++;
 801b17c:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 801b180:	d1f9      	bne.n	801b176 <f_write+0x25e>
 801b182:	e7d1      	b.n	801b128 <f_write+0x210>
					if (fp->cltbl) {
 801b184:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801b186:	2a00      	cmp	r2, #0
 801b188:	d042      	beq.n	801b210 <f_write+0x2f8>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801b18a:	6820      	ldr	r0, [r4, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801b18c:	1d11      	adds	r1, r2, #4
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801b18e:	6852      	ldr	r2, [r2, #4]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801b190:	8940      	ldrh	r0, [r0, #10]
 801b192:	fbb3 f3f0 	udiv	r3, r3, r0
		if (ncl == 0) return 0;	/* End of table? (error) */
 801b196:	b92a      	cbnz	r2, 801b1a4 <f_write+0x28c>
 801b198:	e7dc      	b.n	801b154 <f_write+0x23c>
		cl -= ncl; tbl++;		/* Next fragment */
 801b19a:	1a9b      	subs	r3, r3, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801b19c:	f851 2f08 	ldr.w	r2, [r1, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 801b1a0:	2a00      	cmp	r2, #0
 801b1a2:	d0d7      	beq.n	801b154 <f_write+0x23c>
		if (cl < ncl) break;	/* In this fragment? */
 801b1a4:	429a      	cmp	r2, r3
 801b1a6:	d9f8      	bls.n	801b19a <f_write+0x282>
	return cl + *tbl;	/* Return the cluster number */
 801b1a8:	6848      	ldr	r0, [r1, #4]
 801b1aa:	4418      	add	r0, r3
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801b1ac:	2800      	cmp	r0, #0
 801b1ae:	f47f af0e 	bne.w	801afce <f_write+0xb6>
 801b1b2:	e7cf      	b.n	801b154 <f_write+0x23c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801b1b4:	e9dd 1000 	ldrd	r1, r0, [sp]
 801b1b8:	2301      	movs	r3, #1
 801b1ba:	6a22      	ldr	r2, [r4, #32]
 801b1bc:	7840      	ldrb	r0, [r0, #1]
 801b1be:	f7fc f8f9 	bl	80173b4 <disk_write>
 801b1c2:	2800      	cmp	r0, #0
 801b1c4:	f47f af35 	bne.w	801b032 <f_write+0x11a>
				fp->flag &= (BYTE)~FA_DIRTY;
 801b1c8:	7d23      	ldrb	r3, [r4, #20]
 801b1ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801b1ce:	7523      	strb	r3, [r4, #20]
 801b1d0:	e70b      	b.n	801afea <f_write+0xd2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801b1d2:	f04f 0b07 	mov.w	fp, #7
 801b1d6:	e6b4      	b.n	801af42 <f_write+0x2a>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801b1d8:	6a23      	ldr	r3, [r4, #32]
 801b1da:	eba3 0a0a 	sub.w	sl, r3, sl
 801b1de:	45aa      	cmp	sl, r5
 801b1e0:	d31e      	bcc.n	801b220 <f_write+0x308>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801b1e2:	026d      	lsls	r5, r5, #9
 801b1e4:	1971      	adds	r1, r6, r5
				continue;
 801b1e6:	e7a3      	b.n	801b130 <f_write+0x218>
 801b1e8:	4608      	mov	r0, r1
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801b1ea:	2301      	movs	r3, #1
 801b1ec:	4652      	mov	r2, sl
 801b1ee:	9900      	ldr	r1, [sp, #0]
 801b1f0:	7840      	ldrb	r0, [r0, #1]
 801b1f2:	f7fc f8d1 	bl	8017398 <disk_read>
				fp->fptr < fp->obj.objsize &&
 801b1f6:	2800      	cmp	r0, #0
 801b1f8:	f47f af1b 	bne.w	801b032 <f_write+0x11a>
 801b1fc:	69a3      	ldr	r3, [r4, #24]
 801b1fe:	e727      	b.n	801b050 <f_write+0x138>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801b200:	4639      	mov	r1, r7
 801b202:	4620      	mov	r0, r4
 801b204:	f7fd f8fe 	bl	8018404 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801b208:	2800      	cmp	r0, #0
 801b20a:	f47f aee0 	bne.w	801afce <f_write+0xb6>
 801b20e:	e7a1      	b.n	801b154 <f_write+0x23c>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801b210:	69e1      	ldr	r1, [r4, #28]
 801b212:	4620      	mov	r0, r4
 801b214:	f7fd f8f6 	bl	8018404 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801b218:	2800      	cmp	r0, #0
 801b21a:	f47f aed8 	bne.w	801afce <f_write+0xb6>
 801b21e:	e799      	b.n	801b154 <f_write+0x23c>
 801b220:	9a02      	ldr	r2, [sp, #8]
 801b222:	9805      	ldr	r0, [sp, #20]
 801b224:	1a9b      	subs	r3, r3, r2
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801b226:	f8dd e000 	ldr.w	lr, [sp]
 801b22a:	eb06 224a 	add.w	r2, r6, sl, lsl #9
 801b22e:	eba3 0309 	sub.w	r3, r3, r9
 801b232:	46f4      	mov	ip, lr
 801b234:	1bdb      	subs	r3, r3, r7
 801b236:	025b      	lsls	r3, r3, #9
 801b238:	18f1      	adds	r1, r6, r3
 801b23a:	4288      	cmp	r0, r1
 801b23c:	d903      	bls.n	801b246 <f_write+0x32e>
 801b23e:	1d19      	adds	r1, r3, #4
 801b240:	4431      	add	r1, r6
 801b242:	458e      	cmp	lr, r1
 801b244:	d34a      	bcc.n	801b2dc <f_write+0x3c4>
 801b246:	9804      	ldr	r0, [sp, #16]
 801b248:	2800      	cmp	r0, #0
 801b24a:	d056      	beq.n	801b2fa <f_write+0x3e2>
			*d++ = *s++;
 801b24c:	7811      	ldrb	r1, [r2, #0]
 801b24e:	2801      	cmp	r0, #1
 801b250:	f102 0e01 	add.w	lr, r2, #1
 801b254:	f104 0c31 	add.w	ip, r4, #49	; 0x31
 801b258:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
 801b25c:	d049      	beq.n	801b2f2 <f_write+0x3da>
 801b25e:	7851      	ldrb	r1, [r2, #1]
 801b260:	2803      	cmp	r0, #3
 801b262:	f102 0e02 	add.w	lr, r2, #2
 801b266:	f104 0c32 	add.w	ip, r4, #50	; 0x32
 801b26a:	f884 1031 	strb.w	r1, [r4, #49]	; 0x31
 801b26e:	d149      	bne.n	801b304 <f_write+0x3ec>
 801b270:	7891      	ldrb	r1, [r2, #2]
 801b272:	f102 0e03 	add.w	lr, r2, #3
 801b276:	f104 0c33 	add.w	ip, r4, #51	; 0x33
 801b27a:	f240 17fd 	movw	r7, #509	; 0x1fd
 801b27e:	4602      	mov	r2, r0
 801b280:	f884 1032 	strb.w	r1, [r4, #50]	; 0x32
 801b284:	4413      	add	r3, r2
 801b286:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b288:	f8dd 901c 	ldr.w	r9, [sp, #28]
 801b28c:	18a1      	adds	r1, r4, r2
 801b28e:	4433      	add	r3, r6
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801b290:	2200      	movs	r2, #0
 801b292:	3201      	adds	r2, #1
			*d++ = *s++;
 801b294:	f853 0b04 	ldr.w	r0, [r3], #4
 801b298:	4591      	cmp	r9, r2
 801b29a:	f841 0b04 	str.w	r0, [r1], #4
 801b29e:	d8f8      	bhi.n	801b292 <f_write+0x37a>
 801b2a0:	9806      	ldr	r0, [sp, #24]
 801b2a2:	9908      	ldr	r1, [sp, #32]
 801b2a4:	1a3f      	subs	r7, r7, r0
 801b2a6:	eb0c 0300 	add.w	r3, ip, r0
 801b2aa:	4288      	cmp	r0, r1
 801b2ac:	eb0e 0200 	add.w	r2, lr, r0
 801b2b0:	d00b      	beq.n	801b2ca <f_write+0x3b2>
 801b2b2:	f81e 1000 	ldrb.w	r1, [lr, r0]
		} while (--cnt);
 801b2b6:	2f01      	cmp	r7, #1
			*d++ = *s++;
 801b2b8:	f80c 1000 	strb.w	r1, [ip, r0]
		} while (--cnt);
 801b2bc:	d005      	beq.n	801b2ca <f_write+0x3b2>
			*d++ = *s++;
 801b2be:	7851      	ldrb	r1, [r2, #1]
		} while (--cnt);
 801b2c0:	2f02      	cmp	r7, #2
			*d++ = *s++;
 801b2c2:	7059      	strb	r1, [r3, #1]
		} while (--cnt);
 801b2c4:	d001      	beq.n	801b2ca <f_write+0x3b2>
			*d++ = *s++;
 801b2c6:	7892      	ldrb	r2, [r2, #2]
 801b2c8:	709a      	strb	r2, [r3, #2]
					fp->flag &= (BYTE)~FA_DIRTY;
 801b2ca:	7d23      	ldrb	r3, [r4, #20]
 801b2cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801b2d0:	7523      	strb	r3, [r4, #20]
 801b2d2:	e786      	b.n	801b1e2 <f_write+0x2ca>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801b2d4:	2302      	movs	r3, #2
 801b2d6:	7563      	strb	r3, [r4, #21]
 801b2d8:	469b      	mov	fp, r3
 801b2da:	e632      	b.n	801af42 <f_write+0x2a>
 801b2dc:	f104 032f 	add.w	r3, r4, #47	; 0x2f
 801b2e0:	f502 7000 	add.w	r0, r2, #512	; 0x200
			*d++ = *s++;
 801b2e4:	f812 1b01 	ldrb.w	r1, [r2], #1
		} while (--cnt);
 801b2e8:	4290      	cmp	r0, r2
			*d++ = *s++;
 801b2ea:	f803 1f01 	strb.w	r1, [r3, #1]!
		} while (--cnt);
 801b2ee:	d1f9      	bne.n	801b2e4 <f_write+0x3cc>
 801b2f0:	e7eb      	b.n	801b2ca <f_write+0x3b2>
			*d++ = *s++;
 801b2f2:	f240 17ff 	movw	r7, #511	; 0x1ff
 801b2f6:	4602      	mov	r2, r0
 801b2f8:	e7c4      	b.n	801b284 <f_write+0x36c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801b2fa:	4696      	mov	lr, r2
 801b2fc:	f44f 7700 	mov.w	r7, #512	; 0x200
 801b300:	4602      	mov	r2, r0
 801b302:	e7bf      	b.n	801b284 <f_write+0x36c>
			*d++ = *s++;
 801b304:	f44f 77ff 	mov.w	r7, #510	; 0x1fe
 801b308:	4602      	mov	r2, r0
 801b30a:	e7bb      	b.n	801b284 <f_write+0x36c>

0801b30c <f_close>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801b30c:	b138      	cbz	r0, 801b31e <f_close+0x12>
 801b30e:	6803      	ldr	r3, [r0, #0]
 801b310:	b12b      	cbz	r3, 801b31e <f_close+0x12>
 801b312:	781a      	ldrb	r2, [r3, #0]
 801b314:	b11a      	cbz	r2, 801b31e <f_close+0x12>
 801b316:	8881      	ldrh	r1, [r0, #4]
 801b318:	88da      	ldrh	r2, [r3, #6]
 801b31a:	4291      	cmp	r1, r2
 801b31c:	d001      	beq.n	801b322 <f_close+0x16>
	FRESULT res = FR_INVALID_OBJECT;
 801b31e:	2009      	movs	r0, #9
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 801b320:	4770      	bx	lr
{
 801b322:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b326:	4604      	mov	r4, r0
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801b328:	7858      	ldrb	r0, [r3, #1]
 801b32a:	f7fc f817 	bl	801735c <disk_status>
 801b32e:	07c1      	lsls	r1, r0, #31
 801b330:	f100 8088 	bmi.w	801b444 <f_close+0x138>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801b334:	7d23      	ldrb	r3, [r4, #20]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801b336:	6825      	ldr	r5, [r4, #0]
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801b338:	065a      	lsls	r2, r3, #25
 801b33a:	d576      	bpl.n	801b42a <f_close+0x11e>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801b33c:	061b      	lsls	r3, r3, #24
 801b33e:	f100 8095 	bmi.w	801b46c <f_close+0x160>
			tm = GET_FATTIME();				/* Modified time */
 801b342:	f7fc f853 	bl	80173ec <get_fattime>
				res = move_window(fs, fp->dir_sect);
 801b346:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 801b34a:	6b2f      	ldr	r7, [r5, #48]	; 0x30
			tm = GET_FATTIME();				/* Modified time */
 801b34c:	4606      	mov	r6, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 801b34e:	45b8      	cmp	r8, r7
 801b350:	d035      	beq.n	801b3be <f_close+0xb2>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801b352:	78eb      	ldrb	r3, [r5, #3]
 801b354:	f105 0934 	add.w	r9, r5, #52	; 0x34
 801b358:	7868      	ldrb	r0, [r5, #1]
 801b35a:	b303      	cbz	r3, 801b39e <f_close+0x92>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801b35c:	2301      	movs	r3, #1
 801b35e:	463a      	mov	r2, r7
 801b360:	4649      	mov	r1, r9
 801b362:	f7fc f827 	bl	80173b4 <disk_write>
 801b366:	bb28      	cbnz	r0, 801b3b4 <f_close+0xa8>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801b368:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801b36a:	69eb      	ldr	r3, [r5, #28]
 801b36c:	1aba      	subs	r2, r7, r2
			fs->wflag = 0;
 801b36e:	70e8      	strb	r0, [r5, #3]
 801b370:	7868      	ldrb	r0, [r5, #1]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801b372:	429a      	cmp	r2, r3
 801b374:	d213      	bcs.n	801b39e <f_close+0x92>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801b376:	f895 a002 	ldrb.w	sl, [r5, #2]
 801b37a:	f1ba 0f01 	cmp.w	sl, #1
 801b37e:	d802      	bhi.n	801b386 <f_close+0x7a>
 801b380:	e00d      	b.n	801b39e <f_close+0x92>
 801b382:	69eb      	ldr	r3, [r5, #28]
 801b384:	7868      	ldrb	r0, [r5, #1]
					wsect += fs->fsize;
 801b386:	441f      	add	r7, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801b388:	f10a 3aff 	add.w	sl, sl, #4294967295
					disk_write(fs->drv, fs->win, wsect, 1);
 801b38c:	2301      	movs	r3, #1
 801b38e:	4649      	mov	r1, r9
 801b390:	463a      	mov	r2, r7
 801b392:	f7fc f80f 	bl	80173b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801b396:	f1ba 0f01 	cmp.w	sl, #1
 801b39a:	d1f2      	bne.n	801b382 <f_close+0x76>
 801b39c:	7868      	ldrb	r0, [r5, #1]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801b39e:	4649      	mov	r1, r9
 801b3a0:	2301      	movs	r3, #1
 801b3a2:	4642      	mov	r2, r8
 801b3a4:	f7fb fff8 	bl	8017398 <disk_read>
 801b3a8:	b138      	cbz	r0, 801b3ba <f_close+0xae>
			fs->winsect = sector;
 801b3aa:	f04f 33ff 	mov.w	r3, #4294967295
				res = FR_DISK_ERR;
 801b3ae:	2001      	movs	r0, #1
			fs->winsect = sector;
 801b3b0:	632b      	str	r3, [r5, #48]	; 0x30
 801b3b2:	e000      	b.n	801b3b6 <f_close+0xaa>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801b3b4:	2001      	movs	r0, #1
}
 801b3b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			fs->winsect = sector;
 801b3ba:	f8c5 8030 	str.w	r8, [r5, #48]	; 0x30
					dir = fp->dir_ptr;
 801b3be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801b3c0:	7ada      	ldrb	r2, [r3, #11]
 801b3c2:	f042 0220 	orr.w	r2, r2, #32
 801b3c6:	72da      	strb	r2, [r3, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801b3c8:	68a2      	ldr	r2, [r4, #8]
 801b3ca:	6821      	ldr	r1, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801b3cc:	f3c2 2007 	ubfx	r0, r2, #8, #8
 801b3d0:	769a      	strb	r2, [r3, #26]
	*ptr++ = (BYTE)val;
 801b3d2:	76d8      	strb	r0, [r3, #27]
	if (fs->fs_type == FS_FAT32) {
 801b3d4:	7809      	ldrb	r1, [r1, #0]
 801b3d6:	2903      	cmp	r1, #3
 801b3d8:	d103      	bne.n	801b3e2 <f_close+0xd6>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801b3da:	0c12      	lsrs	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 801b3dc:	0a11      	lsrs	r1, r2, #8
 801b3de:	751a      	strb	r2, [r3, #20]
	*ptr++ = (BYTE)val;
 801b3e0:	7559      	strb	r1, [r3, #21]
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801b3e2:	68e2      	ldr	r2, [r4, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 801b3e4:	2100      	movs	r1, #0
 801b3e6:	0a37      	lsrs	r7, r6, #8
 801b3e8:	759e      	strb	r6, [r3, #22]
 801b3ea:	0a10      	lsrs	r0, r2, #8
 801b3ec:	f362 0107 	bfi	r1, r2, #0, #8
	*ptr++ = (BYTE)val; val >>= 8;
 801b3f0:	75df      	strb	r7, [r3, #23]
 801b3f2:	0c17      	lsrs	r7, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 801b3f4:	f360 210f 	bfi	r1, r0, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 801b3f8:	0e12      	lsrs	r2, r2, #24
	*ptr++ = (BYTE)val; val >>= 8;
 801b3fa:	0c30      	lsrs	r0, r6, #16
	*ptr++ = (BYTE)val; val >>= 8;
 801b3fc:	f367 4117 	bfi	r1, r7, #16, #8
	*ptr++ = (BYTE)val; val >>= 8;
 801b400:	0e36      	lsrs	r6, r6, #24
	*ptr++ = (BYTE)val; val >>= 8;
 801b402:	2700      	movs	r7, #0
	*ptr++ = (BYTE)val; val >>= 8;
 801b404:	7618      	strb	r0, [r3, #24]
	*ptr++ = (BYTE)val; val >>= 8;
 801b406:	f362 611f 	bfi	r1, r2, #24, #8
					fs->wflag = 1;
 801b40a:	2201      	movs	r2, #1
	*ptr++ = (BYTE)val;
 801b40c:	765e      	strb	r6, [r3, #25]
					res = sync_fs(fs);					/* Restore it to the directory */
 801b40e:	4628      	mov	r0, r5
	*ptr++ = (BYTE)val; val >>= 8;
 801b410:	61d9      	str	r1, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 801b412:	749f      	strb	r7, [r3, #18]
	*ptr++ = (BYTE)val;
 801b414:	74df      	strb	r7, [r3, #19]
					fs->wflag = 1;
 801b416:	70ea      	strb	r2, [r5, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801b418:	f7fc f8a2 	bl	8017560 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 801b41c:	7d23      	ldrb	r3, [r4, #20]
 801b41e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b422:	7523      	strb	r3, [r4, #20]
	if (res == FR_OK)
 801b424:	2800      	cmp	r0, #0
 801b426:	d1c6      	bne.n	801b3b6 <f_close+0xaa>
 801b428:	6825      	ldr	r5, [r4, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801b42a:	b15d      	cbz	r5, 801b444 <f_close+0x138>
 801b42c:	782b      	ldrb	r3, [r5, #0]
 801b42e:	b14b      	cbz	r3, 801b444 <f_close+0x138>
 801b430:	88a2      	ldrh	r2, [r4, #4]
 801b432:	88eb      	ldrh	r3, [r5, #6]
 801b434:	429a      	cmp	r2, r3
 801b436:	d105      	bne.n	801b444 <f_close+0x138>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801b438:	7868      	ldrb	r0, [r5, #1]
 801b43a:	f7fb ff8f 	bl	801735c <disk_status>
 801b43e:	f010 0001 	ands.w	r0, r0, #1
 801b442:	d002      	beq.n	801b44a <f_close+0x13e>
	FRESULT res = FR_INVALID_OBJECT;
 801b444:	2009      	movs	r0, #9
}
 801b446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801b44a:	6923      	ldr	r3, [r4, #16]
 801b44c:	3b01      	subs	r3, #1
 801b44e:	2b03      	cmp	r3, #3
 801b450:	d81a      	bhi.n	801b488 <f_close+0x17c>
		n = Files[i].ctr;
 801b452:	011b      	lsls	r3, r3, #4
 801b454:	4911      	ldr	r1, [pc, #68]	; (801b49c <f_close+0x190>)
 801b456:	18cd      	adds	r5, r1, r3
 801b458:	89aa      	ldrh	r2, [r5, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801b45a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 801b45e:	d01b      	beq.n	801b498 <f_close+0x18c>
		if (n > 0) n--;				/* Decrement read mode open count */
 801b460:	b9a2      	cbnz	r2, 801b48c <f_close+0x180>
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801b462:	2200      	movs	r2, #0
 801b464:	50ca      	str	r2, [r1, r3]
				fp->obj.fs = 0;			/* Invalidate file object */
 801b466:	2000      	movs	r0, #0
 801b468:	6020      	str	r0, [r4, #0]
 801b46a:	e7a4      	b.n	801b3b6 <f_close+0xaa>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801b46c:	2301      	movs	r3, #1
 801b46e:	6a22      	ldr	r2, [r4, #32]
 801b470:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801b474:	7868      	ldrb	r0, [r5, #1]
 801b476:	f7fb ff9d 	bl	80173b4 <disk_write>
 801b47a:	2800      	cmp	r0, #0
 801b47c:	d19a      	bne.n	801b3b4 <f_close+0xa8>
				fp->flag &= (BYTE)~FA_DIRTY;
 801b47e:	7d23      	ldrb	r3, [r4, #20]
 801b480:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801b484:	7523      	strb	r3, [r4, #20]
 801b486:	e75c      	b.n	801b342 <f_close+0x36>
		res = FR_INT_ERR;			/* Invalid index nunber */
 801b488:	2002      	movs	r0, #2
 801b48a:	e794      	b.n	801b3b6 <f_close+0xaa>
		if (n > 0) n--;				/* Decrement read mode open count */
 801b48c:	3a01      	subs	r2, #1
 801b48e:	b292      	uxth	r2, r2
		Files[i].ctr = n;
 801b490:	81aa      	strh	r2, [r5, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801b492:	2a00      	cmp	r2, #0
 801b494:	d1e7      	bne.n	801b466 <f_close+0x15a>
 801b496:	e7e4      	b.n	801b462 <f_close+0x156>
		Files[i].ctr = n;
 801b498:	81a8      	strh	r0, [r5, #12]
 801b49a:	e7e2      	b.n	801b462 <f_close+0x156>
 801b49c:	24009298 	.word	0x24009298

0801b4a0 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 801b4a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b4a4:	b085      	sub	sp, #20
 801b4a6:	9101      	str	r1, [sp, #4]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 801b4a8:	2800      	cmp	r0, #0
 801b4aa:	d044      	beq.n	801b536 <f_opendir+0x96>
 801b4ac:	4604      	mov	r4, r0

	/* Get logical drive */
	obj = &dp->obj;
	res = find_volume(&path, &fs, 0);
 801b4ae:	2200      	movs	r2, #0
 801b4b0:	a903      	add	r1, sp, #12
 801b4b2:	a801      	add	r0, sp, #4
 801b4b4:	f7fe fd1e 	bl	8019ef4 <find_volume>
	if (res == FR_OK) {
 801b4b8:	4605      	mov	r5, r0
 801b4ba:	b128      	cbz	r0, 801b4c8 <f_opendir+0x28>
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 801b4bc:	2300      	movs	r3, #0
 801b4be:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 801b4c0:	4628      	mov	r0, r5
 801b4c2:	b005      	add	sp, #20
 801b4c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		obj->fs = fs;
 801b4c8:	9b03      	ldr	r3, [sp, #12]
		INIT_NAMBUF(fs);
 801b4ca:	f44f 7000 	mov.w	r0, #512	; 0x200
		obj->fs = fs;
 801b4ce:	6023      	str	r3, [r4, #0]
		INIT_NAMBUF(fs);
 801b4d0:	f000 fd4c 	bl	801bf6c <ff_memalloc>
 801b4d4:	4606      	mov	r6, r0
 801b4d6:	2800      	cmp	r0, #0
 801b4d8:	d032      	beq.n	801b540 <f_opendir+0xa0>
 801b4da:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 801b4dc:	4620      	mov	r0, r4
 801b4de:	9901      	ldr	r1, [sp, #4]
		INIT_NAMBUF(fs);
 801b4e0:	60de      	str	r6, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 801b4e2:	f7fd fd8d 	bl	8019000 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 801b4e6:	4605      	mov	r5, r0
 801b4e8:	bb60      	cbnz	r0, 801b544 <f_opendir+0xa4>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 801b4ea:	f994 302f 	ldrsb.w	r3, [r4, #47]	; 0x2f
 801b4ee:	2b00      	cmp	r3, #0
 801b4f0:	db34      	blt.n	801b55c <f_opendir+0xbc>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 801b4f2:	79a3      	ldrb	r3, [r4, #6]
 801b4f4:	06db      	lsls	r3, r3, #27
 801b4f6:	d52c      	bpl.n	801b552 <f_opendir+0xb2>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 801b4f8:	9a03      	ldr	r2, [sp, #12]
 801b4fa:	6a21      	ldr	r1, [r4, #32]
	if (fs->fs_type == FS_FAT32) {
 801b4fc:	7810      	ldrb	r0, [r2, #0]
	rv = rv << 8 | ptr[0];
 801b4fe:	7ecd      	ldrb	r5, [r1, #27]
 801b500:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
 801b502:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 801b504:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	if (fs->fs_type == FS_FAT32) {
 801b508:	d105      	bne.n	801b516 <f_opendir+0x76>
	rv = rv << 8 | ptr[0];
 801b50a:	7d48      	ldrb	r0, [r1, #21]
 801b50c:	7d09      	ldrb	r1, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801b50e:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 801b512:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 801b516:	60a3      	str	r3, [r4, #8]
				obj->id = fs->id;
 801b518:	88d3      	ldrh	r3, [r2, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 801b51a:	2100      	movs	r1, #0
 801b51c:	4620      	mov	r0, r4
				obj->id = fs->id;
 801b51e:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 801b520:	f7fc fcb2 	bl	8017e88 <dir_sdi>
				if (res == FR_OK) {
 801b524:	4605      	mov	r5, r0
 801b526:	b968      	cbnz	r0, 801b544 <f_opendir+0xa4>
					if (obj->sclust) {
 801b528:	68a2      	ldr	r2, [r4, #8]
 801b52a:	b9ca      	cbnz	r2, 801b560 <f_opendir+0xc0>
						obj->lockid = 0;	/* Root directory need not to be locked */
 801b52c:	6120      	str	r0, [r4, #16]
		FREE_NAMBUF();
 801b52e:	4630      	mov	r0, r6
 801b530:	f000 fd1e 	bl	801bf70 <ff_memfree>
 801b534:	e7c4      	b.n	801b4c0 <f_opendir+0x20>
	if (!dp) return FR_INVALID_OBJECT;
 801b536:	2509      	movs	r5, #9
}
 801b538:	4628      	mov	r0, r5
 801b53a:	b005      	add	sp, #20
 801b53c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		INIT_NAMBUF(fs);
 801b540:	2511      	movs	r5, #17
 801b542:	e7bd      	b.n	801b4c0 <f_opendir+0x20>
		FREE_NAMBUF();
 801b544:	4630      	mov	r0, r6
 801b546:	f000 fd13 	bl	801bf70 <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801b54a:	2d04      	cmp	r5, #4
 801b54c:	bf08      	it	eq
 801b54e:	2505      	moveq	r5, #5
 801b550:	e7b4      	b.n	801b4bc <f_opendir+0x1c>
		FREE_NAMBUF();
 801b552:	4630      	mov	r0, r6
					res = FR_NO_PATH;
 801b554:	2505      	movs	r5, #5
		FREE_NAMBUF();
 801b556:	f000 fd0b 	bl	801bf70 <ff_memfree>
 801b55a:	e7af      	b.n	801b4bc <f_opendir+0x1c>
 801b55c:	9a03      	ldr	r2, [sp, #12]
 801b55e:	e7db      	b.n	801b518 <f_opendir+0x78>
		if (Files[i].fs == dp->obj.fs &&
 801b560:	4b39      	ldr	r3, [pc, #228]	; (801b648 <f_opendir+0x1a8>)
 801b562:	6821      	ldr	r1, [r4, #0]
 801b564:	f8d3 9000 	ldr.w	r9, [r3]
 801b568:	4549      	cmp	r1, r9
 801b56a:	d03f      	beq.n	801b5ec <f_opendir+0x14c>
 801b56c:	f8d3 e010 	ldr.w	lr, [r3, #16]
 801b570:	4571      	cmp	r1, lr
 801b572:	d031      	beq.n	801b5d8 <f_opendir+0x138>
 801b574:	f8d3 8020 	ldr.w	r8, [r3, #32]
 801b578:	4541      	cmp	r1, r8
 801b57a:	d040      	beq.n	801b5fe <f_opendir+0x15e>
 801b57c:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 801b57e:	428f      	cmp	r7, r1
 801b580:	d011      	beq.n	801b5a6 <f_opendir+0x106>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801b582:	f1b9 0f00 	cmp.w	r9, #0
 801b586:	d054      	beq.n	801b632 <f_opendir+0x192>
 801b588:	f1be 0f00 	cmp.w	lr, #0
 801b58c:	d041      	beq.n	801b612 <f_opendir+0x172>
 801b58e:	f1b8 0f00 	cmp.w	r8, #0
 801b592:	d055      	beq.n	801b640 <f_opendir+0x1a0>
 801b594:	2f00      	cmp	r7, #0
 801b596:	d04f      	beq.n	801b638 <f_opendir+0x198>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 801b598:	2300      	movs	r3, #0
		FREE_NAMBUF();
 801b59a:	4630      	mov	r0, r6
 801b59c:	2512      	movs	r5, #18
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 801b59e:	6123      	str	r3, [r4, #16]
		FREE_NAMBUF();
 801b5a0:	f000 fce6 	bl	801bf70 <ff_memfree>
 801b5a4:	e78a      	b.n	801b4bc <f_opendir+0x1c>
		if (Files[i].fs == dp->obj.fs &&
 801b5a6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801b5a8:	4282      	cmp	r2, r0
 801b5aa:	d1ea      	bne.n	801b582 <f_opendir+0xe2>
			Files[i].clu == dp->obj.sclust &&
 801b5ac:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801b5ae:	4684      	mov	ip, r0
 801b5b0:	6960      	ldr	r0, [r4, #20]
 801b5b2:	4584      	cmp	ip, r0
 801b5b4:	d1e5      	bne.n	801b582 <f_opendir+0xe2>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801b5b6:	f04f 0c03 	mov.w	ip, #3
 801b5ba:	ea4f 100c 	mov.w	r0, ip, lsl #4
 801b5be:	f10c 0701 	add.w	r7, ip, #1
 801b5c2:	181a      	adds	r2, r3, r0
 801b5c4:	8992      	ldrh	r2, [r2, #12]
 801b5c6:	3201      	adds	r2, #1
 801b5c8:	b292      	uxth	r2, r2
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801b5ca:	4403      	add	r3, r0
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 801b5cc:	6127      	str	r7, [r4, #16]
		FREE_NAMBUF();
 801b5ce:	4630      	mov	r0, r6
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801b5d0:	819a      	strh	r2, [r3, #12]
		FREE_NAMBUF();
 801b5d2:	f000 fccd 	bl	801bf70 <ff_memfree>
 801b5d6:	e773      	b.n	801b4c0 <f_opendir+0x20>
		if (Files[i].fs == dp->obj.fs &&
 801b5d8:	695f      	ldr	r7, [r3, #20]
 801b5da:	42ba      	cmp	r2, r7
 801b5dc:	d1ca      	bne.n	801b574 <f_opendir+0xd4>
			Files[i].clu == dp->obj.sclust &&
 801b5de:	6967      	ldr	r7, [r4, #20]
 801b5e0:	6998      	ldr	r0, [r3, #24]
 801b5e2:	4287      	cmp	r7, r0
 801b5e4:	d1c6      	bne.n	801b574 <f_opendir+0xd4>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801b5e6:	f04f 0c01 	mov.w	ip, #1
 801b5ea:	e7e6      	b.n	801b5ba <f_opendir+0x11a>
		if (Files[i].fs == dp->obj.fs &&
 801b5ec:	685f      	ldr	r7, [r3, #4]
 801b5ee:	42ba      	cmp	r2, r7
 801b5f0:	d1bc      	bne.n	801b56c <f_opendir+0xcc>
			Files[i].clu == dp->obj.sclust &&
 801b5f2:	6967      	ldr	r7, [r4, #20]
 801b5f4:	6898      	ldr	r0, [r3, #8]
 801b5f6:	4287      	cmp	r7, r0
 801b5f8:	d1b8      	bne.n	801b56c <f_opendir+0xcc>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801b5fa:	46ac      	mov	ip, r5
 801b5fc:	e7dd      	b.n	801b5ba <f_opendir+0x11a>
		if (Files[i].fs == dp->obj.fs &&
 801b5fe:	6a5f      	ldr	r7, [r3, #36]	; 0x24
 801b600:	42ba      	cmp	r2, r7
 801b602:	d1bb      	bne.n	801b57c <f_opendir+0xdc>
			Files[i].clu == dp->obj.sclust &&
 801b604:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 801b606:	6960      	ldr	r0, [r4, #20]
 801b608:	4287      	cmp	r7, r0
 801b60a:	d1b7      	bne.n	801b57c <f_opendir+0xdc>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801b60c:	f04f 0c02 	mov.w	ip, #2
 801b610:	e7d3      	b.n	801b5ba <f_opendir+0x11a>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801b612:	f04f 0c01 	mov.w	ip, #1
 801b616:	2702      	movs	r7, #2
		Files[i].fs = dp->obj.fs;
 801b618:	ea4f 100c 	mov.w	r0, ip, lsl #4
		Files[i].ctr = 0;
 801b61c:	f04f 0c00 	mov.w	ip, #0
		Files[i].fs = dp->obj.fs;
 801b620:	5019      	str	r1, [r3, r0]
 801b622:	1819      	adds	r1, r3, r0
		Files[i].clu = dp->obj.sclust;
 801b624:	604a      	str	r2, [r1, #4]
		Files[i].ofs = dp->dptr;
 801b626:	6962      	ldr	r2, [r4, #20]
		Files[i].ctr = 0;
 801b628:	f8a1 c00c 	strh.w	ip, [r1, #12]
		Files[i].ofs = dp->dptr;
 801b62c:	608a      	str	r2, [r1, #8]
		Files[i].ctr = 0;
 801b62e:	2201      	movs	r2, #1
 801b630:	e7cb      	b.n	801b5ca <f_opendir+0x12a>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801b632:	46cc      	mov	ip, r9
 801b634:	2701      	movs	r7, #1
 801b636:	e7ef      	b.n	801b618 <f_opendir+0x178>
 801b638:	f04f 0c03 	mov.w	ip, #3
 801b63c:	2704      	movs	r7, #4
 801b63e:	e7eb      	b.n	801b618 <f_opendir+0x178>
 801b640:	f04f 0c02 	mov.w	ip, #2
 801b644:	2703      	movs	r7, #3
 801b646:	e7e7      	b.n	801b618 <f_opendir+0x178>
 801b648:	24009298 	.word	0x24009298

0801b64c <f_closedir>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801b64c:	b328      	cbz	r0, 801b69a <f_closedir+0x4e>
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 801b64e:	b538      	push	{r3, r4, r5, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801b650:	6803      	ldr	r3, [r0, #0]
 801b652:	b12b      	cbz	r3, 801b660 <f_closedir+0x14>
 801b654:	781a      	ldrb	r2, [r3, #0]
 801b656:	b11a      	cbz	r2, 801b660 <f_closedir+0x14>
 801b658:	8881      	ldrh	r1, [r0, #4]
 801b65a:	88da      	ldrh	r2, [r3, #6]
 801b65c:	4291      	cmp	r1, r2
 801b65e:	d001      	beq.n	801b664 <f_closedir+0x18>
	FRESULT res = FR_INVALID_OBJECT;
 801b660:	2009      	movs	r0, #9
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
}
 801b662:	bd38      	pop	{r3, r4, r5, pc}
 801b664:	4604      	mov	r4, r0
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801b666:	7858      	ldrb	r0, [r3, #1]
 801b668:	f7fb fe78 	bl	801735c <disk_status>
 801b66c:	f010 0001 	ands.w	r0, r0, #1
 801b670:	d1f6      	bne.n	801b660 <f_closedir+0x14>
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 801b672:	6923      	ldr	r3, [r4, #16]
 801b674:	b173      	cbz	r3, 801b694 <f_closedir+0x48>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801b676:	3b01      	subs	r3, #1
 801b678:	2b03      	cmp	r3, #3
 801b67a:	d814      	bhi.n	801b6a6 <f_closedir+0x5a>
		n = Files[i].ctr;
 801b67c:	011b      	lsls	r3, r3, #4
 801b67e:	490b      	ldr	r1, [pc, #44]	; (801b6ac <f_closedir+0x60>)
 801b680:	18cd      	adds	r5, r1, r3
 801b682:	89aa      	ldrh	r2, [r5, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801b684:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 801b688:	d009      	beq.n	801b69e <f_closedir+0x52>
		if (n > 0) n--;				/* Decrement read mode open count */
 801b68a:	b14a      	cbz	r2, 801b6a0 <f_closedir+0x54>
 801b68c:	3a01      	subs	r2, #1
 801b68e:	b292      	uxth	r2, r2
		Files[i].ctr = n;
 801b690:	81aa      	strh	r2, [r5, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801b692:	b12a      	cbz	r2, 801b6a0 <f_closedir+0x54>
			dp->obj.fs = 0;			/* Invalidate directory object */
 801b694:	2000      	movs	r0, #0
 801b696:	6020      	str	r0, [r4, #0]
}
 801b698:	bd38      	pop	{r3, r4, r5, pc}
	FRESULT res = FR_INVALID_OBJECT;
 801b69a:	2009      	movs	r0, #9
}
 801b69c:	4770      	bx	lr
		Files[i].ctr = n;
 801b69e:	81a8      	strh	r0, [r5, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801b6a0:	2200      	movs	r2, #0
 801b6a2:	50ca      	str	r2, [r1, r3]
 801b6a4:	e7f6      	b.n	801b694 <f_closedir+0x48>
		res = FR_INT_ERR;			/* Invalid index nunber */
 801b6a6:	2002      	movs	r0, #2
}
 801b6a8:	bd38      	pop	{r3, r4, r5, pc}
 801b6aa:	bf00      	nop
 801b6ac:	24009298 	.word	0x24009298

0801b6b0 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801b6b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801b6b2:	b138      	cbz	r0, 801b6c4 <f_readdir+0x14>
 801b6b4:	6803      	ldr	r3, [r0, #0]
 801b6b6:	b12b      	cbz	r3, 801b6c4 <f_readdir+0x14>
 801b6b8:	781a      	ldrb	r2, [r3, #0]
 801b6ba:	b11a      	cbz	r2, 801b6c4 <f_readdir+0x14>
 801b6bc:	8884      	ldrh	r4, [r0, #4]
 801b6be:	88da      	ldrh	r2, [r3, #6]
 801b6c0:	4294      	cmp	r4, r2
 801b6c2:	d002      	beq.n	801b6ca <f_readdir+0x1a>
	FRESULT res = FR_INVALID_OBJECT;
 801b6c4:	2509      	movs	r5, #9
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
}
 801b6c6:	4628      	mov	r0, r5
 801b6c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b6ca:	4604      	mov	r4, r0
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801b6cc:	7858      	ldrb	r0, [r3, #1]
 801b6ce:	460e      	mov	r6, r1
 801b6d0:	f7fb fe44 	bl	801735c <disk_status>
 801b6d4:	07c3      	lsls	r3, r0, #31
 801b6d6:	d4f5      	bmi.n	801b6c4 <f_readdir+0x14>
		if (!fno) {
 801b6d8:	b1f6      	cbz	r6, 801b718 <f_readdir+0x68>
			INIT_NAMBUF(fs);
 801b6da:	f44f 7000 	mov.w	r0, #512	; 0x200
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801b6de:	6825      	ldr	r5, [r4, #0]
			INIT_NAMBUF(fs);
 801b6e0:	f000 fc44 	bl	801bf6c <ff_memalloc>
 801b6e4:	4607      	mov	r7, r0
 801b6e6:	b1e8      	cbz	r0, 801b724 <f_readdir+0x74>
 801b6e8:	60e8      	str	r0, [r5, #12]
			res = dir_read(dp, 0);			/* Read an item */
 801b6ea:	4620      	mov	r0, r4
 801b6ec:	f7fd f884 	bl	80187f8 <dir_read.constprop.11>
			if (res == FR_OK) {				/* A valid entry is found */
 801b6f0:	f010 0ffb 	tst.w	r0, #251	; 0xfb
			res = dir_read(dp, 0);			/* Read an item */
 801b6f4:	4605      	mov	r5, r0
			if (res == FR_OK) {				/* A valid entry is found */
 801b6f6:	d10a      	bne.n	801b70e <f_readdir+0x5e>
				get_fileinfo(dp, fno);		/* Get the object information */
 801b6f8:	4631      	mov	r1, r6
 801b6fa:	4620      	mov	r0, r4
 801b6fc:	f7fb fe78 	bl	80173f0 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 801b700:	4620      	mov	r0, r4
 801b702:	f7fd f837 	bl	8018774 <dir_next.constprop.16>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 801b706:	2804      	cmp	r0, #4
 801b708:	bf14      	ite	ne
 801b70a:	4605      	movne	r5, r0
 801b70c:	2500      	moveq	r5, #0
			FREE_NAMBUF();
 801b70e:	4638      	mov	r0, r7
 801b710:	f000 fc2e 	bl	801bf70 <ff_memfree>
}
 801b714:	4628      	mov	r0, r5
 801b716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 801b718:	4631      	mov	r1, r6
 801b71a:	4620      	mov	r0, r4
}
 801b71c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 801b720:	f7fc bbb2 	b.w	8017e88 <dir_sdi>
			INIT_NAMBUF(fs);
 801b724:	2511      	movs	r5, #17
}
 801b726:	4628      	mov	r0, r5
 801b728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b72a:	bf00      	nop

0801b72c <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 801b72c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b730:	b099      	sub	sp, #100	; 0x64
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801b732:	2202      	movs	r2, #2
{
 801b734:	9009      	str	r0, [sp, #36]	; 0x24
	res = find_volume(&path, &fs, FA_WRITE);
 801b736:	a90a      	add	r1, sp, #40	; 0x28
 801b738:	a809      	add	r0, sp, #36	; 0x24
 801b73a:	f7fe fbdb 	bl	8019ef4 <find_volume>
	dj.obj.fs = fs;
 801b73e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	res = find_volume(&path, &fs, FA_WRITE);
 801b740:	4605      	mov	r5, r0
	dj.obj.fs = fs;
 801b742:	930b      	str	r3, [sp, #44]	; 0x2c
	if (res == FR_OK) {
 801b744:	b118      	cbz	r0, 801b74e <f_mkdir+0x22>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
 801b746:	4628      	mov	r0, r5
 801b748:	b019      	add	sp, #100	; 0x64
 801b74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b74e:	4606      	mov	r6, r0
		INIT_NAMBUF(fs);
 801b750:	f44f 7000 	mov.w	r0, #512	; 0x200
 801b754:	f000 fc0a 	bl	801bf6c <ff_memalloc>
 801b758:	4604      	mov	r4, r0
 801b75a:	b190      	cbz	r0, 801b782 <f_mkdir+0x56>
		res = follow_path(&dj, path);			/* Follow the file path */
 801b75c:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
		INIT_NAMBUF(fs);
 801b760:	60d8      	str	r0, [r3, #12]
		res = follow_path(&dj, path);			/* Follow the file path */
 801b762:	a80b      	add	r0, sp, #44	; 0x2c
 801b764:	f7fd fc4c 	bl	8019000 <follow_path>
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 801b768:	4605      	mov	r5, r0
 801b76a:	b140      	cbz	r0, 801b77e <f_mkdir+0x52>
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 801b76c:	2804      	cmp	r0, #4
 801b76e:	d00d      	beq.n	801b78c <f_mkdir+0x60>
		FREE_NAMBUF();
 801b770:	4620      	mov	r0, r4
 801b772:	f000 fbfd 	bl	801bf70 <ff_memfree>
}
 801b776:	4628      	mov	r0, r5
 801b778:	b019      	add	sp, #100	; 0x64
 801b77a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 801b77e:	2508      	movs	r5, #8
 801b780:	e7f6      	b.n	801b770 <f_mkdir+0x44>
		INIT_NAMBUF(fs);
 801b782:	2511      	movs	r5, #17
}
 801b784:	4628      	mov	r0, r5
 801b786:	b019      	add	sp, #100	; 0x64
 801b788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 801b78c:	4631      	mov	r1, r6
 801b78e:	a80b      	add	r0, sp, #44	; 0x2c
 801b790:	f7fc fe38 	bl	8018404 <create_chain>
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 801b794:	9d0a      	ldr	r5, [sp, #40]	; 0x28
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 801b796:	4682      	mov	sl, r0
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 801b798:	896b      	ldrh	r3, [r5, #10]
 801b79a:	025b      	lsls	r3, r3, #9
 801b79c:	930e      	str	r3, [sp, #56]	; 0x38
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 801b79e:	2800      	cmp	r0, #0
 801b7a0:	f000 813c 	beq.w	801ba1c <f_mkdir+0x2f0>
			if (dcl == 1) res = FR_INT_ERR;
 801b7a4:	2801      	cmp	r0, #1
 801b7a6:	f000 816c 	beq.w	801ba82 <f_mkdir+0x356>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 801b7aa:	f1b0 3fff 	cmp.w	r0, #4294967295
 801b7ae:	f000 8181 	beq.w	801bab4 <f_mkdir+0x388>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801b7b2:	78eb      	ldrb	r3, [r5, #3]
 801b7b4:	b303      	cbz	r3, 801b7f8 <f_mkdir+0xcc>
		wsect = fs->winsect;	/* Current sector number */
 801b7b6:	6b2e      	ldr	r6, [r5, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801b7b8:	f105 0834 	add.w	r8, r5, #52	; 0x34
 801b7bc:	2301      	movs	r3, #1
 801b7be:	7868      	ldrb	r0, [r5, #1]
 801b7c0:	4632      	mov	r2, r6
 801b7c2:	4641      	mov	r1, r8
 801b7c4:	f7fb fdf6 	bl	80173b4 <disk_write>
 801b7c8:	2800      	cmp	r0, #0
 801b7ca:	f040 817e 	bne.w	801baca <f_mkdir+0x39e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801b7ce:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801b7d0:	69eb      	ldr	r3, [r5, #28]
 801b7d2:	1ab2      	subs	r2, r6, r2
			fs->wflag = 0;
 801b7d4:	70e8      	strb	r0, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801b7d6:	429a      	cmp	r2, r3
 801b7d8:	d20e      	bcs.n	801b7f8 <f_mkdir+0xcc>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801b7da:	78af      	ldrb	r7, [r5, #2]
 801b7dc:	2f01      	cmp	r7, #1
 801b7de:	d801      	bhi.n	801b7e4 <f_mkdir+0xb8>
 801b7e0:	e00a      	b.n	801b7f8 <f_mkdir+0xcc>
 801b7e2:	69eb      	ldr	r3, [r5, #28]
					wsect += fs->fsize;
 801b7e4:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801b7e6:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 801b7e8:	2301      	movs	r3, #1
 801b7ea:	4641      	mov	r1, r8
 801b7ec:	4632      	mov	r2, r6
 801b7ee:	7868      	ldrb	r0, [r5, #1]
 801b7f0:	f7fb fde0 	bl	80173b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801b7f4:	2f01      	cmp	r7, #1
 801b7f6:	d1f4      	bne.n	801b7e2 <f_mkdir+0xb6>
			tm = GET_FATTIME();
 801b7f8:	f7fb fdf8 	bl	80173ec <get_fattime>
				dsc = clust2sect(fs, dcl);
 801b7fc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
	clst -= 2;
 801b7fe:	f1aa 0202 	sub.w	r2, sl, #2
			tm = GET_FATTIME();
 801b802:	4605      	mov	r5, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801b804:	69bb      	ldr	r3, [r7, #24]
 801b806:	3b02      	subs	r3, #2
 801b808:	429a      	cmp	r2, r3
 801b80a:	f080 8138 	bcs.w	801ba7e <f_mkdir+0x352>
	return clst * fs->csize + fs->database;
 801b80e:	897e      	ldrh	r6, [r7, #10]
 801b810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b812:	fb02 3606 	mla	r6, r2, r6, r3
	*ptr++ = (BYTE)val; val >>= 8;
 801b816:	b2e8      	uxtb	r0, r5
				dir = fs->win;
 801b818:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801b81c:	f44f 7200 	mov.w	r2, #512	; 0x200
 801b820:	2100      	movs	r1, #0
	*ptr++ = (BYTE)val; val >>= 8;
 801b822:	9004      	str	r0, [sp, #16]
 801b824:	4618      	mov	r0, r3
	*ptr++ = (BYTE)val; val >>= 8;
 801b826:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801b82a:	9305      	str	r3, [sp, #20]
 801b82c:	f00a fcb5 	bl	802619a <memset>
 801b830:	f04f 3220 	mov.w	r2, #538976288	; 0x20202020
 801b834:	4603      	mov	r3, r0
	*ptr++ = (BYTE)val; val >>= 8;
 801b836:	f3c5 4107 	ubfx	r1, r5, #16, #8
					dir[DIR_Name] = '.';
 801b83a:	202e      	movs	r0, #46	; 0x2e
 801b83c:	637a      	str	r2, [r7, #52]	; 0x34
	*ptr++ = (BYTE)val;
 801b83e:	0e2d      	lsrs	r5, r5, #24
 801b840:	605a      	str	r2, [r3, #4]
	*ptr++ = (BYTE)val;
 801b842:	f3ca 2c07 	ubfx	ip, sl, #8, #8
 801b846:	f8c3 2007 	str.w	r2, [r3, #7]
	*ptr++ = (BYTE)val; val >>= 8;
 801b84a:	fa5f f28a 	uxtb.w	r2, sl
	*ptr++ = (BYTE)val; val >>= 8;
 801b84e:	9106      	str	r1, [sp, #24]
					dir[DIR_Attr] = AM_DIR;
 801b850:	f04f 0e10 	mov.w	lr, #16
	*ptr++ = (BYTE)val; val >>= 8;
 801b854:	9905      	ldr	r1, [sp, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 801b856:	9202      	str	r2, [sp, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 801b858:	f887 104b 	strb.w	r1, [r7, #75]	; 0x4b
	if (fs->fs_type == FS_FAT32) {
 801b85c:	783a      	ldrb	r2, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801b85e:	9906      	ldr	r1, [sp, #24]
					dir[DIR_Name] = '.';
 801b860:	f887 0034 	strb.w	r0, [r7, #52]	; 0x34
	if (fs->fs_type == FS_FAT32) {
 801b864:	2a03      	cmp	r2, #3
	*ptr++ = (BYTE)val; val >>= 8;
 801b866:	9804      	ldr	r0, [sp, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 801b868:	f887 104c 	strb.w	r1, [r7, #76]	; 0x4c
	*ptr++ = (BYTE)val; val >>= 8;
 801b86c:	9902      	ldr	r1, [sp, #8]
	*ptr++ = (BYTE)val;
 801b86e:	9507      	str	r5, [sp, #28]
	*ptr++ = (BYTE)val;
 801b870:	f8cd c00c 	str.w	ip, [sp, #12]
		*d++ = (BYTE)val;
 801b874:	9308      	str	r3, [sp, #32]
					dir[DIR_Attr] = AM_DIR;
 801b876:	f887 e03f 	strb.w	lr, [r7, #63]	; 0x3f
	*ptr++ = (BYTE)val; val >>= 8;
 801b87a:	f887 004a 	strb.w	r0, [r7, #74]	; 0x4a
	*ptr++ = (BYTE)val;
 801b87e:	f887 504d 	strb.w	r5, [r7, #77]	; 0x4d
	*ptr++ = (BYTE)val; val >>= 8;
 801b882:	f887 104e 	strb.w	r1, [r7, #78]	; 0x4e
	*ptr++ = (BYTE)val;
 801b886:	f887 c04f 	strb.w	ip, [r7, #79]	; 0x4f
	if (fs->fs_type == FS_FAT32) {
 801b88a:	d106      	bne.n	801b89a <f_mkdir+0x16e>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801b88c:	fa2a f20e 	lsr.w	r2, sl, lr
	*ptr++ = (BYTE)val; val >>= 8;
 801b890:	0a11      	lsrs	r1, r2, #8
 801b892:	f887 2048 	strb.w	r2, [r7, #72]	; 0x48
	*ptr++ = (BYTE)val;
 801b896:	f887 1049 	strb.w	r1, [r7, #73]	; 0x49
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 801b89a:	f107 0554 	add.w	r5, r7, #84	; 0x54
 801b89e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801b8a2:	4295      	cmp	r5, r2
 801b8a4:	d204      	bcs.n	801b8b0 <f_mkdir+0x184>
 801b8a6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801b8aa:	428b      	cmp	r3, r1
 801b8ac:	f0c0 8104 	bcc.w	801bab8 <f_mkdir+0x38c>
 801b8b0:	4258      	negs	r0, r3
 801b8b2:	f010 0003 	ands.w	r0, r0, #3
 801b8b6:	f000 80f3 	beq.w	801baa0 <f_mkdir+0x374>
			*d++ = *s++;
 801b8ba:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 801b8be:	2801      	cmp	r0, #1
 801b8c0:	f107 0335 	add.w	r3, r7, #53	; 0x35
 801b8c4:	f107 0e55 	add.w	lr, r7, #85	; 0x55
 801b8c8:	f887 2054 	strb.w	r2, [r7, #84]	; 0x54
 801b8cc:	f000 80e5 	beq.w	801ba9a <f_mkdir+0x36e>
 801b8d0:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 801b8d4:	2803      	cmp	r0, #3
 801b8d6:	f107 0336 	add.w	r3, r7, #54	; 0x36
 801b8da:	f107 0e56 	add.w	lr, r7, #86	; 0x56
 801b8de:	f887 2055 	strb.w	r2, [r7, #85]	; 0x55
 801b8e2:	f040 80f6 	bne.w	801bad2 <f_mkdir+0x3a6>
 801b8e6:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 801b8ea:	f107 0337 	add.w	r3, r7, #55	; 0x37
 801b8ee:	f107 0e57 	add.w	lr, r7, #87	; 0x57
 801b8f2:	f04f 0c1d 	mov.w	ip, #29
 801b8f6:	f887 2056 	strb.w	r2, [r7, #86]	; 0x56
 801b8fa:	f100 0834 	add.w	r8, r0, #52	; 0x34
 801b8fe:	1829      	adds	r1, r5, r0
 801b900:	f1c0 0920 	rsb	r9, r0, #32
 801b904:	eb07 0208 	add.w	r2, r7, r8
 801b908:	f857 8008 	ldr.w	r8, [r7, r8]
 801b90c:	3104      	adds	r1, #4
 801b90e:	f845 8000 	str.w	r8, [r5, r0]
 801b912:	3204      	adds	r2, #4
 801b914:	2507      	movs	r5, #7
 801b916:	6810      	ldr	r0, [r2, #0]
 801b918:	2d08      	cmp	r5, #8
 801b91a:	6008      	str	r0, [r1, #0]
 801b91c:	6850      	ldr	r0, [r2, #4]
 801b91e:	6048      	str	r0, [r1, #4]
 801b920:	6890      	ldr	r0, [r2, #8]
 801b922:	6088      	str	r0, [r1, #8]
 801b924:	68d0      	ldr	r0, [r2, #12]
 801b926:	60c8      	str	r0, [r1, #12]
 801b928:	6910      	ldr	r0, [r2, #16]
 801b92a:	6108      	str	r0, [r1, #16]
 801b92c:	6950      	ldr	r0, [r2, #20]
 801b92e:	6148      	str	r0, [r1, #20]
 801b930:	f040 80d2 	bne.w	801bad8 <f_mkdir+0x3ac>
 801b934:	6992      	ldr	r2, [r2, #24]
 801b936:	f1b9 0f20 	cmp.w	r9, #32
 801b93a:	f10e 0e20 	add.w	lr, lr, #32
 801b93e:	f103 0320 	add.w	r3, r3, #32
 801b942:	f1ac 0c20 	sub.w	ip, ip, #32
 801b946:	618a      	str	r2, [r1, #24]
 801b948:	d00e      	beq.n	801b968 <f_mkdir+0x23c>
 801b94a:	781a      	ldrb	r2, [r3, #0]
		} while (--cnt);
 801b94c:	f1bc 0f01 	cmp.w	ip, #1
			*d++ = *s++;
 801b950:	f88e 2000 	strb.w	r2, [lr]
		} while (--cnt);
 801b954:	d008      	beq.n	801b968 <f_mkdir+0x23c>
			*d++ = *s++;
 801b956:	785a      	ldrb	r2, [r3, #1]
		} while (--cnt);
 801b958:	f1bc 0f02 	cmp.w	ip, #2
			*d++ = *s++;
 801b95c:	f88e 2001 	strb.w	r2, [lr, #1]
		} while (--cnt);
 801b960:	d002      	beq.n	801b968 <f_mkdir+0x23c>
			*d++ = *s++;
 801b962:	789b      	ldrb	r3, [r3, #2]
 801b964:	f88e 3002 	strb.w	r3, [lr, #2]
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 801b968:	222e      	movs	r2, #46	; 0x2e
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 801b96a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 801b96c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b96e:	f887 2055 	strb.w	r2, [r7, #85]	; 0x55
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 801b972:	782a      	ldrb	r2, [r5, #0]
 801b974:	2a03      	cmp	r2, #3
 801b976:	f000 8088 	beq.w	801ba8a <f_mkdir+0x35e>
 801b97a:	b2d9      	uxtb	r1, r3
 801b97c:	f3c3 2207 	ubfx	r2, r3, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 801b980:	f887 106e 	strb.w	r1, [r7, #110]	; 0x6e
	*ptr++ = (BYTE)val;
 801b984:	f887 206f 	strb.w	r2, [r7, #111]	; 0x6f
	if (fs->fs_type == FS_FAT32) {
 801b988:	782a      	ldrb	r2, [r5, #0]
 801b98a:	2a03      	cmp	r2, #3
 801b98c:	d105      	bne.n	801b99a <f_mkdir+0x26e>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801b98e:	0c1b      	lsrs	r3, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 801b990:	0a1a      	lsrs	r2, r3, #8
 801b992:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
	*ptr++ = (BYTE)val;
 801b996:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801b99a:	896b      	ldrh	r3, [r5, #10]
 801b99c:	2b00      	cmp	r3, #0
 801b99e:	d043      	beq.n	801ba28 <f_mkdir+0x2fc>
 801b9a0:	3b01      	subs	r3, #1
					fs->wflag = 1;
 801b9a2:	f04f 0b01 	mov.w	fp, #1
 801b9a6:	4433      	add	r3, r6
 801b9a8:	e9cd 4a00 	strd	r4, sl, [sp]
 801b9ac:	9c08      	ldr	r4, [sp, #32]
 801b9ae:	469a      	mov	sl, r3
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801b9b0:	f105 0934 	add.w	r9, r5, #52	; 0x34
					fs->winsect = dsc++;
 801b9b4:	632e      	str	r6, [r5, #48]	; 0x30
					fs->wflag = 1;
 801b9b6:	f885 b003 	strb.w	fp, [r5, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801b9ba:	2301      	movs	r3, #1
 801b9bc:	4649      	mov	r1, r9
 801b9be:	4632      	mov	r2, r6
 801b9c0:	7868      	ldrb	r0, [r5, #1]
 801b9c2:	f7fb fcf7 	bl	80173b4 <disk_write>
 801b9c6:	bb00      	cbnz	r0, 801ba0a <f_mkdir+0x2de>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801b9c8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801b9ca:	69eb      	ldr	r3, [r5, #28]
 801b9cc:	1ab2      	subs	r2, r6, r2
			fs->wflag = 0;
 801b9ce:	70e8      	strb	r0, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801b9d0:	429a      	cmp	r2, r3
 801b9d2:	d20f      	bcs.n	801b9f4 <f_mkdir+0x2c8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801b9d4:	78af      	ldrb	r7, [r5, #2]
 801b9d6:	2f01      	cmp	r7, #1
 801b9d8:	d90c      	bls.n	801b9f4 <f_mkdir+0x2c8>
 801b9da:	46b0      	mov	r8, r6
 801b9dc:	e000      	b.n	801b9e0 <f_mkdir+0x2b4>
 801b9de:	69eb      	ldr	r3, [r5, #28]
					wsect += fs->fsize;
 801b9e0:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801b9e2:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 801b9e4:	2301      	movs	r3, #1
 801b9e6:	4649      	mov	r1, r9
 801b9e8:	4642      	mov	r2, r8
 801b9ea:	7868      	ldrb	r0, [r5, #1]
 801b9ec:	f7fb fce2 	bl	80173b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801b9f0:	2f01      	cmp	r7, #1
 801b9f2:	d1f4      	bne.n	801b9de <f_mkdir+0x2b2>
 801b9f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 801b9f8:	2100      	movs	r1, #0
 801b9fa:	4620      	mov	r0, r4
 801b9fc:	f00a fbcd 	bl	802619a <memset>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801ba00:	4556      	cmp	r6, sl
 801ba02:	d00f      	beq.n	801ba24 <f_mkdir+0x2f8>
 801ba04:	3601      	adds	r6, #1
 801ba06:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801ba08:	e7d2      	b.n	801b9b0 <f_mkdir+0x284>
 801ba0a:	e9dd 4a00 	ldrd	r4, sl, [sp]
			res = FR_DISK_ERR;
 801ba0e:	2501      	movs	r5, #1
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 801ba10:	4651      	mov	r1, sl
 801ba12:	a80b      	add	r0, sp, #44	; 0x2c
 801ba14:	2200      	movs	r2, #0
 801ba16:	f7fb ff7b 	bl	8017910 <remove_chain>
 801ba1a:	e6a9      	b.n	801b770 <f_mkdir+0x44>
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 801ba1c:	2507      	movs	r5, #7
			tm = GET_FATTIME();
 801ba1e:	f7fb fce5 	bl	80173ec <get_fattime>
 801ba22:	e7f5      	b.n	801ba10 <f_mkdir+0x2e4>
 801ba24:	e9dd 4a00 	ldrd	r4, sl, [sp]
				res = dir_register(&dj);	/* Register the object to the directoy */
 801ba28:	a80b      	add	r0, sp, #44	; 0x2c
 801ba2a:	f7fd fc79 	bl	8019320 <dir_register>
			if (res == FR_OK) {
 801ba2e:	4605      	mov	r5, r0
 801ba30:	2800      	cmp	r0, #0
 801ba32:	d1ed      	bne.n	801ba10 <f_mkdir+0x2e4>
	*ptr++ = (BYTE)val; val >>= 8;
 801ba34:	9a04      	ldr	r2, [sp, #16]
 801ba36:	9905      	ldr	r1, [sp, #20]
 801ba38:	f362 0507 	bfi	r5, r2, #0, #8
					dir = dj.dir;
 801ba3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	*ptr++ = (BYTE)val; val >>= 8;
 801ba3e:	9a02      	ldr	r2, [sp, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 801ba40:	f361 250f 	bfi	r5, r1, #8, #8
	*ptr++ = (BYTE)val;
 801ba44:	9903      	ldr	r1, [sp, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 801ba46:	769a      	strb	r2, [r3, #26]
	*ptr++ = (BYTE)val;
 801ba48:	76d9      	strb	r1, [r3, #27]
	*ptr++ = (BYTE)val; val >>= 8;
 801ba4a:	9906      	ldr	r1, [sp, #24]
					st_clust(fs, dir, dcl);				/* Table start cluster */
 801ba4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	*ptr++ = (BYTE)val; val >>= 8;
 801ba4e:	f361 4517 	bfi	r5, r1, #16, #8
 801ba52:	9907      	ldr	r1, [sp, #28]
 801ba54:	f361 651f 	bfi	r5, r1, #24, #8
 801ba58:	f8c3 5016 	str.w	r5, [r3, #22]
	if (fs->fs_type == FS_FAT32) {
 801ba5c:	7811      	ldrb	r1, [r2, #0]
 801ba5e:	2903      	cmp	r1, #3
 801ba60:	d104      	bne.n	801ba6c <f_mkdir+0x340>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801ba62:	ea4f 411a 	mov.w	r1, sl, lsr #16
	*ptr++ = (BYTE)val; val >>= 8;
 801ba66:	0a08      	lsrs	r0, r1, #8
 801ba68:	7519      	strb	r1, [r3, #20]
	*ptr++ = (BYTE)val;
 801ba6a:	7558      	strb	r0, [r3, #21]
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 801ba6c:	2510      	movs	r5, #16
					fs->wflag = 1;
 801ba6e:	2101      	movs	r1, #1
					res = sync_fs(fs);
 801ba70:	4610      	mov	r0, r2
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 801ba72:	72dd      	strb	r5, [r3, #11]
					fs->wflag = 1;
 801ba74:	70d1      	strb	r1, [r2, #3]
					res = sync_fs(fs);
 801ba76:	f7fb fd73 	bl	8017560 <sync_fs>
 801ba7a:	4605      	mov	r5, r0
 801ba7c:	e678      	b.n	801b770 <f_mkdir+0x44>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801ba7e:	2600      	movs	r6, #0
 801ba80:	e6c9      	b.n	801b816 <f_mkdir+0xea>
			tm = GET_FATTIME();
 801ba82:	f7fb fcb3 	bl	80173ec <get_fattime>
 801ba86:	2502      	movs	r5, #2
 801ba88:	e7c2      	b.n	801ba10 <f_mkdir+0x2e4>
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 801ba8a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801ba8c:	429a      	cmp	r2, r3
 801ba8e:	f47f af74 	bne.w	801b97a <f_mkdir+0x24e>
 801ba92:	2200      	movs	r2, #0
 801ba94:	4611      	mov	r1, r2
 801ba96:	4613      	mov	r3, r2
 801ba98:	e772      	b.n	801b980 <f_mkdir+0x254>
			*d++ = *s++;
 801ba9a:	f04f 0c1f 	mov.w	ip, #31
 801ba9e:	e72c      	b.n	801b8fa <f_mkdir+0x1ce>
 801baa0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801baa2:	f04f 0c20 	mov.w	ip, #32
	BYTE *d = (BYTE*)dst;
 801baa6:	46ae      	mov	lr, r5
			*d++ = *s++;
 801baa8:	2508      	movs	r5, #8
 801baaa:	6579      	str	r1, [r7, #84]	; 0x54
 801baac:	46e1      	mov	r9, ip
 801baae:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801bab2:	e730      	b.n	801b916 <f_mkdir+0x1ea>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 801bab4:	2501      	movs	r5, #1
 801bab6:	e7b2      	b.n	801ba1e <f_mkdir+0x2f2>
 801bab8:	f107 0253 	add.w	r2, r7, #83	; 0x53
			*d++ = *s++;
 801babc:	f813 1b01 	ldrb.w	r1, [r3], #1
		} while (--cnt);
 801bac0:	42ab      	cmp	r3, r5
			*d++ = *s++;
 801bac2:	f802 1f01 	strb.w	r1, [r2, #1]!
		} while (--cnt);
 801bac6:	d1f9      	bne.n	801babc <f_mkdir+0x390>
 801bac8:	e74e      	b.n	801b968 <f_mkdir+0x23c>
			tm = GET_FATTIME();
 801baca:	f7fb fc8f 	bl	80173ec <get_fattime>
			res = FR_DISK_ERR;
 801bace:	2501      	movs	r5, #1
 801bad0:	e79e      	b.n	801ba10 <f_mkdir+0x2e4>
			*d++ = *s++;
 801bad2:	f04f 0c1e 	mov.w	ip, #30
 801bad6:	e710      	b.n	801b8fa <f_mkdir+0x1ce>
 801bad8:	f10e 0e1c 	add.w	lr, lr, #28
 801badc:	331c      	adds	r3, #28
 801bade:	f1ac 0c1c 	sub.w	ip, ip, #28
 801bae2:	e732      	b.n	801b94a <f_mkdir+0x21e>

0801bae4 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 801bae4:	b40e      	push	{r1, r2, r3}
 801bae6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801baea:	b0a0      	sub	sp, #128	; 0x80
	pb->nchr = pb->idx = 0;
 801baec:	2200      	movs	r2, #0
{
 801baee:	a929      	add	r1, sp, #164	; 0xa4
 801baf0:	4613      	mov	r3, r2
	pb->fp = fp;
 801baf2:	900d      	str	r0, [sp, #52]	; 0x34
{
 801baf4:	f851 6b04 	ldr.w	r6, [r1], #4
	pb->nchr = pb->idx = 0;
 801baf8:	920e      	str	r2, [sp, #56]	; 0x38
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);

	va_start(arp, fmt);
 801bafa:	9103      	str	r1, [sp, #12]
	pb->nchr = pb->idx = 0;
 801bafc:	920f      	str	r2, [sp, #60]	; 0x3c

	for (;;) {
		c = *fmt++;
 801bafe:	7832      	ldrb	r2, [r6, #0]
 801bb00:	1c74      	adds	r4, r6, #1
		if (c == 0) break;			/* End of string */
 801bb02:	b302      	cbz	r2, 801bb46 <f_printf+0x62>
		if (c != '%') {				/* Non escape character */
 801bb04:	2a25      	cmp	r2, #37	; 0x25
 801bb06:	d035      	beq.n	801bb74 <f_printf+0x90>
	if (i < 0) return;
 801bb08:	2b00      	cmp	r3, #0
 801bb0a:	f2c0 816f 	blt.w	801bdec <f_printf+0x308>
	pb->buf[i++] = (BYTE)c;
 801bb0e:	a920      	add	r1, sp, #128	; 0x80
 801bb10:	1c5d      	adds	r5, r3, #1
 801bb12:	4419      	add	r1, r3
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801bb14:	2d3c      	cmp	r5, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 801bb16:	f801 2c40 	strb.w	r2, [r1, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801bb1a:	dd0a      	ble.n	801bb32 <f_printf+0x4e>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 801bb1c:	ab04      	add	r3, sp, #16
 801bb1e:	462a      	mov	r2, r5
 801bb20:	a910      	add	r1, sp, #64	; 0x40
 801bb22:	980d      	ldr	r0, [sp, #52]	; 0x34
 801bb24:	f7ff f9f8 	bl	801af18 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 801bb28:	9b04      	ldr	r3, [sp, #16]
 801bb2a:	1b5d      	subs	r5, r3, r5
 801bb2c:	bf18      	it	ne
 801bb2e:	f04f 35ff 	movne.w	r5, #4294967295
	pb->nchr++;
 801bb32:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		c = *fmt++;
 801bb34:	4626      	mov	r6, r4
 801bb36:	462b      	mov	r3, r5
	pb->idx = i;
 801bb38:	950e      	str	r5, [sp, #56]	; 0x38
	pb->nchr++;
 801bb3a:	3201      	adds	r2, #1
		c = *fmt++;
 801bb3c:	1c74      	adds	r4, r6, #1
	pb->nchr++;
 801bb3e:	920f      	str	r2, [sp, #60]	; 0x3c
		c = *fmt++;
 801bb40:	7832      	ldrb	r2, [r6, #0]
		if (c == 0) break;			/* End of string */
 801bb42:	2a00      	cmp	r2, #0
 801bb44:	d1de      	bne.n	801bb04 <f_printf+0x20>
	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 801bb46:	2b00      	cmp	r3, #0
 801bb48:	f2c0 81e7 	blt.w	801bf1a <f_printf+0x436>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 801bb4c:	461a      	mov	r2, r3
 801bb4e:	a910      	add	r1, sp, #64	; 0x40
 801bb50:	ab04      	add	r3, sp, #16
 801bb52:	980d      	ldr	r0, [sp, #52]	; 0x34
 801bb54:	f7ff f9e0 	bl	801af18 <f_write>
 801bb58:	2800      	cmp	r0, #0
 801bb5a:	f040 81de 	bne.w	801bf1a <f_printf+0x436>
		&& (UINT)pb->idx == nw) return pb->nchr;
 801bb5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bb60:	9b04      	ldr	r3, [sp, #16]
 801bb62:	429a      	cmp	r2, r3
 801bb64:	f040 81d9 	bne.w	801bf1a <f_printf+0x436>
 801bb68:	980f      	ldr	r0, [sp, #60]	; 0x3c
	}

	va_end(arp);

	return putc_flush(&pb);
}
 801bb6a:	b020      	add	sp, #128	; 0x80
 801bb6c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb70:	b003      	add	sp, #12
 801bb72:	4770      	bx	lr
		c = *fmt++;
 801bb74:	7872      	ldrb	r2, [r6, #1]
		if (c == '0') {				/* Flag: '0' padding */
 801bb76:	2a30      	cmp	r2, #48	; 0x30
 801bb78:	f000 8130 	beq.w	801bddc <f_printf+0x2f8>
			if (c == '-') {			/* Flag: left justified */
 801bb7c:	2a2d      	cmp	r2, #45	; 0x2d
 801bb7e:	f000 8178 	beq.w	801be72 <f_printf+0x38e>
		c = *fmt++;
 801bb82:	f04f 0b00 	mov.w	fp, #0
 801bb86:	3602      	adds	r6, #2
 801bb88:	2004      	movs	r0, #4
		w = f = 0;
 801bb8a:	46da      	mov	sl, fp
		while (IsDigit(c)) {		/* Precision */
 801bb8c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801bb90:	2400      	movs	r4, #0
 801bb92:	2909      	cmp	r1, #9
 801bb94:	d80a      	bhi.n	801bbac <f_printf+0xc8>
			w = w * 10 + c - '0';
 801bb96:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801bb9a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
			c = *fmt++;
 801bb9e:	f816 2b01 	ldrb.w	r2, [r6], #1
		while (IsDigit(c)) {		/* Precision */
 801bba2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
			w = w * 10 + c - '0';
 801bba6:	3c30      	subs	r4, #48	; 0x30
		while (IsDigit(c)) {		/* Precision */
 801bba8:	2909      	cmp	r1, #9
 801bbaa:	d9f4      	bls.n	801bb96 <f_printf+0xb2>
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 801bbac:	f002 01df 	and.w	r1, r2, #223	; 0xdf
 801bbb0:	294c      	cmp	r1, #76	; 0x4c
 801bbb2:	f040 810f 	bne.w	801bdd4 <f_printf+0x2f0>
			f |= 4; c = *fmt++;
 801bbb6:	7832      	ldrb	r2, [r6, #0]
 801bbb8:	4682      	mov	sl, r0
 801bbba:	2504      	movs	r5, #4
 801bbbc:	3601      	adds	r6, #1
		if (!c) break;
 801bbbe:	2a00      	cmp	r2, #0
 801bbc0:	d0c1      	beq.n	801bb46 <f_printf+0x62>
		if (IsLower(d)) d -= 0x20;
 801bbc2:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
 801bbc6:	2919      	cmp	r1, #25
 801bbc8:	f200 8106 	bhi.w	801bdd8 <f_printf+0x2f4>
 801bbcc:	f1a2 0020 	sub.w	r0, r2, #32
 801bbd0:	b2c0      	uxtb	r0, r0
		switch (d) {				/* Type is... */
 801bbd2:	f1a0 0142 	sub.w	r1, r0, #66	; 0x42
 801bbd6:	2916      	cmp	r1, #22
 801bbd8:	f200 80ec 	bhi.w	801bdb4 <f_printf+0x2d0>
 801bbdc:	e8df f011 	tbh	[pc, r1, lsl #1]
 801bbe0:	00cc00e7 	.word	0x00cc00e7
 801bbe4:	00ea0097 	.word	0x00ea0097
 801bbe8:	00ea00ea 	.word	0x00ea00ea
 801bbec:	00ea00ea 	.word	0x00ea00ea
 801bbf0:	00ea00ea 	.word	0x00ea00ea
 801bbf4:	00ea00ea 	.word	0x00ea00ea
 801bbf8:	007e00ea 	.word	0x007e00ea
 801bbfc:	00ea00ea 	.word	0x00ea00ea
 801bc00:	009a00ea 	.word	0x009a00ea
 801bc04:	009700ea 	.word	0x009700ea
 801bc08:	00ea00ea 	.word	0x00ea00ea
 801bc0c:	0017      	.short	0x0017
 801bc0e:	f04f 0e10 	mov.w	lr, #16
 801bc12:	9903      	ldr	r1, [sp, #12]
 801bc14:	1d0f      	adds	r7, r1, #4
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 801bc16:	2d00      	cmp	r5, #0
 801bc18:	d167      	bne.n	801bcea <f_printf+0x206>
 801bc1a:	2000      	movs	r0, #0
 801bc1c:	6809      	ldr	r1, [r1, #0]
 801bc1e:	9703      	str	r7, [sp, #12]
 801bc20:	9001      	str	r0, [sp, #4]
 801bc22:	2a78      	cmp	r2, #120	; 0x78
 801bc24:	af05      	add	r7, sp, #20
		i = 0;
 801bc26:	f04f 0000 	mov.w	r0, #0
 801bc2a:	bf0c      	ite	eq
 801bc2c:	f04f 0927 	moveq.w	r9, #39	; 0x27
 801bc30:	f04f 0907 	movne.w	r9, #7
 801bc34:	46b8      	mov	r8, r7
 801bc36:	e007      	b.n	801bc48 <f_printf+0x164>
			str[i++] = d + '0';
 801bc38:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 801bc3c:	f808 cb01 	strb.w	ip, [r8], #1
		} while (v && i < sizeof str / sizeof str[0]);
 801bc40:	b1b1      	cbz	r1, 801bc70 <f_printf+0x18c>
 801bc42:	2d1f      	cmp	r5, #31
 801bc44:	d814      	bhi.n	801bc70 <f_printf+0x18c>
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 801bc46:	4628      	mov	r0, r5
			str[i++] = d + '0';
 801bc48:	1c45      	adds	r5, r0, #1
			d = (TCHAR)(v % r); v /= r;
 801bc4a:	fbb1 f2fe 	udiv	r2, r1, lr
 801bc4e:	fb0e 1c12 	mls	ip, lr, r2, r1
 801bc52:	4611      	mov	r1, r2
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 801bc54:	f1bc 0f09 	cmp.w	ip, #9
			d = (TCHAR)(v % r); v /= r;
 801bc58:	fa5f f28c 	uxtb.w	r2, ip
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 801bc5c:	eb09 0c02 	add.w	ip, r9, r2
			str[i++] = d + '0';
 801bc60:	f102 0230 	add.w	r2, r2, #48	; 0x30
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 801bc64:	d8e8      	bhi.n	801bc38 <f_printf+0x154>
			str[i++] = d + '0';
 801bc66:	f808 2b01 	strb.w	r2, [r8], #1
 801bc6a:	1c45      	adds	r5, r0, #1
		} while (v && i < sizeof str / sizeof str[0]);
 801bc6c:	2900      	cmp	r1, #0
 801bc6e:	d1e8      	bne.n	801bc42 <f_printf+0x15e>
		if (f & 8) str[i++] = '-';
 801bc70:	9a01      	ldr	r2, [sp, #4]
 801bc72:	b12a      	cbz	r2, 801bc80 <f_printf+0x19c>
 801bc74:	aa20      	add	r2, sp, #128	; 0x80
 801bc76:	212d      	movs	r1, #45	; 0x2d
 801bc78:	442a      	add	r2, r5
 801bc7a:	1c85      	adds	r5, r0, #2
 801bc7c:	f802 1c6c 	strb.w	r1, [r2, #-108]
		j = i; d = (f & 1) ? '0' : ' ';
 801bc80:	f01a 0f01 	tst.w	sl, #1
 801bc84:	bf14      	ite	ne
 801bc86:	f04f 0930 	movne.w	r9, #48	; 0x30
 801bc8a:	f04f 0920 	moveq.w	r9, #32
 801bc8e:	f1bb 0f00 	cmp.w	fp, #0
 801bc92:	f040 8140 	bne.w	801bf16 <f_printf+0x432>
 801bc96:	462a      	mov	r2, r5
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 801bc98:	46a2      	mov	sl, r4
	pb->buf[i++] = (BYTE)c;
 801bc9a:	a920      	add	r1, sp, #128	; 0x80
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 801bc9c:	4552      	cmp	r2, sl
	pb->buf[i++] = (BYTE)c;
 801bc9e:	f103 0401 	add.w	r4, r3, #1
 801bca2:	f102 0801 	add.w	r8, r2, #1
 801bca6:	4419      	add	r1, r3
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 801bca8:	f080 80a2 	bcs.w	801bdf0 <f_printf+0x30c>
	if (i < 0) return;
 801bcac:	2b00      	cmp	r3, #0
 801bcae:	db13      	blt.n	801bcd8 <f_printf+0x1f4>
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801bcb0:	2c3c      	cmp	r4, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 801bcb2:	f801 9c40 	strb.w	r9, [r1, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801bcb6:	dd0a      	ble.n	801bcce <f_printf+0x1ea>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 801bcb8:	ab04      	add	r3, sp, #16
 801bcba:	4622      	mov	r2, r4
 801bcbc:	a910      	add	r1, sp, #64	; 0x40
 801bcbe:	980d      	ldr	r0, [sp, #52]	; 0x34
 801bcc0:	f7ff f92a 	bl	801af18 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 801bcc4:	9b04      	ldr	r3, [sp, #16]
 801bcc6:	1b1c      	subs	r4, r3, r4
 801bcc8:	bf18      	it	ne
 801bcca:	f04f 34ff 	movne.w	r4, #4294967295
	pb->nchr++;
 801bcce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bcd0:	4623      	mov	r3, r4
	pb->idx = i;
 801bcd2:	940e      	str	r4, [sp, #56]	; 0x38
	pb->nchr++;
 801bcd4:	3201      	adds	r2, #1
 801bcd6:	920f      	str	r2, [sp, #60]	; 0x3c
 801bcd8:	4642      	mov	r2, r8
 801bcda:	e7de      	b.n	801bc9a <f_printf+0x1b6>
		switch (d) {				/* Type is... */
 801bcdc:	f04f 0e08 	mov.w	lr, #8
 801bce0:	9903      	ldr	r1, [sp, #12]
 801bce2:	1d0f      	adds	r7, r1, #4
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 801bce4:	b90d      	cbnz	r5, 801bcea <f_printf+0x206>
 801bce6:	2844      	cmp	r0, #68	; 0x44
 801bce8:	d197      	bne.n	801bc1a <f_printf+0x136>
		if (d == 'D' && (v & 0x80000000)) {
 801bcea:	2844      	cmp	r0, #68	; 0x44
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 801bcec:	9703      	str	r7, [sp, #12]
 801bcee:	6809      	ldr	r1, [r1, #0]
		if (d == 'D' && (v & 0x80000000)) {
 801bcf0:	f040 80e8 	bne.w	801bec4 <f_printf+0x3e0>
 801bcf4:	2900      	cmp	r1, #0
 801bcf6:	f280 80e5 	bge.w	801bec4 <f_printf+0x3e0>
			f |= 8;
 801bcfa:	f04a 0008 	orr.w	r0, sl, #8
 801bcfe:	2508      	movs	r5, #8
 801bd00:	f00a 0b02 	and.w	fp, sl, #2
			v = 0 - v;
 801bd04:	4249      	negs	r1, r1
			f |= 8;
 801bd06:	9501      	str	r5, [sp, #4]
 801bd08:	fa5f fa80 	uxtb.w	sl, r0
 801bd0c:	e789      	b.n	801bc22 <f_printf+0x13e>
		switch (d) {				/* Type is... */
 801bd0e:	f04f 0e0a 	mov.w	lr, #10
 801bd12:	e7e5      	b.n	801bce0 <f_printf+0x1fc>
			p = va_arg(arp, TCHAR*);
 801bd14:	9a03      	ldr	r2, [sp, #12]
 801bd16:	6817      	ldr	r7, [r2, #0]
 801bd18:	3204      	adds	r2, #4
			for (j = 0; p[j]; j++) ;
 801bd1a:	783d      	ldrb	r5, [r7, #0]
			p = va_arg(arp, TCHAR*);
 801bd1c:	9203      	str	r2, [sp, #12]
			for (j = 0; p[j]; j++) ;
 801bd1e:	b135      	cbz	r5, 801bd2e <f_printf+0x24a>
 801bd20:	463a      	mov	r2, r7
 801bd22:	2500      	movs	r5, #0
 801bd24:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 801bd28:	3501      	adds	r5, #1
 801bd2a:	2900      	cmp	r1, #0
 801bd2c:	d1fa      	bne.n	801bd24 <f_printf+0x240>
			if (!(f & 2)) {
 801bd2e:	f1bb 0f00 	cmp.w	fp, #0
 801bd32:	f000 80ca 	beq.w	801beca <f_printf+0x3e6>
 801bd36:	f107 38ff 	add.w	r8, r7, #4294967295
	pb->buf[i++] = (BYTE)c;
 801bd3a:	aa20      	add	r2, sp, #128	; 0x80
 801bd3c:	1c5f      	adds	r7, r3, #1
 801bd3e:	18d1      	adds	r1, r2, r3
			while (*p) putc_bfd(&pb, *p++);
 801bd40:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 801bd44:	2a00      	cmp	r2, #0
 801bd46:	f000 809b 	beq.w	801be80 <f_printf+0x39c>
	if (i < 0) return;
 801bd4a:	2b00      	cmp	r3, #0
 801bd4c:	dbf5      	blt.n	801bd3a <f_printf+0x256>
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801bd4e:	2f3c      	cmp	r7, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 801bd50:	f801 2c40 	strb.w	r2, [r1, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801bd54:	dd0a      	ble.n	801bd6c <f_printf+0x288>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 801bd56:	ab04      	add	r3, sp, #16
 801bd58:	463a      	mov	r2, r7
 801bd5a:	a910      	add	r1, sp, #64	; 0x40
 801bd5c:	980d      	ldr	r0, [sp, #52]	; 0x34
 801bd5e:	f7ff f8db 	bl	801af18 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 801bd62:	9b04      	ldr	r3, [sp, #16]
 801bd64:	1bdf      	subs	r7, r3, r7
 801bd66:	bf18      	it	ne
 801bd68:	f04f 37ff 	movne.w	r7, #4294967295
	pb->nchr++;
 801bd6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bd6e:	463b      	mov	r3, r7
	pb->idx = i;
 801bd70:	970e      	str	r7, [sp, #56]	; 0x38
	pb->nchr++;
 801bd72:	3201      	adds	r2, #1
 801bd74:	920f      	str	r2, [sp, #60]	; 0x3c
 801bd76:	e7e0      	b.n	801bd3a <f_printf+0x256>
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 801bd78:	9a03      	ldr	r2, [sp, #12]
	if (i < 0) return;
 801bd7a:	2b00      	cmp	r3, #0
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 801bd7c:	f102 0104 	add.w	r1, r2, #4
 801bd80:	9103      	str	r1, [sp, #12]
	if (i < 0) return;
 801bd82:	f6ff aebc 	blt.w	801bafe <f_printf+0x1a>
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 801bd86:	6811      	ldr	r1, [r2, #0]
	pb->buf[i++] = (BYTE)c;
 801bd88:	1c5c      	adds	r4, r3, #1
 801bd8a:	aa20      	add	r2, sp, #128	; 0x80
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801bd8c:	2c3c      	cmp	r4, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 801bd8e:	441a      	add	r2, r3
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 801bd90:	f802 1c40 	strb.w	r1, [r2, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801bd94:	dd18      	ble.n	801bdc8 <f_printf+0x2e4>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 801bd96:	ab04      	add	r3, sp, #16
 801bd98:	4622      	mov	r2, r4
 801bd9a:	a910      	add	r1, sp, #64	; 0x40
 801bd9c:	980d      	ldr	r0, [sp, #52]	; 0x34
 801bd9e:	f7ff f8bb 	bl	801af18 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 801bda2:	9b04      	ldr	r3, [sp, #16]
 801bda4:	1b1c      	subs	r4, r3, r4
 801bda6:	bf18      	it	ne
 801bda8:	f04f 34ff 	movne.w	r4, #4294967295
 801bdac:	e00c      	b.n	801bdc8 <f_printf+0x2e4>
		switch (d) {				/* Type is... */
 801bdae:	f04f 0e02 	mov.w	lr, #2
 801bdb2:	e72e      	b.n	801bc12 <f_printf+0x12e>
	if (i < 0) return;
 801bdb4:	2b00      	cmp	r3, #0
 801bdb6:	f6ff aea2 	blt.w	801bafe <f_printf+0x1a>
	pb->buf[i++] = (BYTE)c;
 801bdba:	a920      	add	r1, sp, #128	; 0x80
 801bdbc:	1c5c      	adds	r4, r3, #1
 801bdbe:	4419      	add	r1, r3
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801bdc0:	2c3c      	cmp	r4, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 801bdc2:	f801 2c40 	strb.w	r2, [r1, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801bdc6:	dce6      	bgt.n	801bd96 <f_printf+0x2b2>
	pb->nchr++;
 801bdc8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bdca:	4623      	mov	r3, r4
	pb->idx = i;
 801bdcc:	940e      	str	r4, [sp, #56]	; 0x38
	pb->nchr++;
 801bdce:	3201      	adds	r2, #1
 801bdd0:	920f      	str	r2, [sp, #60]	; 0x3c
 801bdd2:	e694      	b.n	801bafe <f_printf+0x1a>
 801bdd4:	2500      	movs	r5, #0
 801bdd6:	e6f2      	b.n	801bbbe <f_printf+0xda>
 801bdd8:	4610      	mov	r0, r2
 801bdda:	e6fa      	b.n	801bbd2 <f_printf+0xee>
			f = 1; c = *fmt++;
 801bddc:	78b2      	ldrb	r2, [r6, #2]
 801bdde:	f04f 0b00 	mov.w	fp, #0
 801bde2:	3603      	adds	r6, #3
 801bde4:	2005      	movs	r0, #5
 801bde6:	f04f 0a01 	mov.w	sl, #1
 801bdea:	e6cf      	b.n	801bb8c <f_printf+0xa8>
		c = *fmt++;
 801bdec:	4626      	mov	r6, r4
 801bdee:	e686      	b.n	801bafe <f_printf+0x1a>
 801bdf0:	4654      	mov	r4, sl
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 801bdf2:	46a2      	mov	sl, r4
	pb->buf[i++] = (BYTE)c;
 801bdf4:	aa20      	add	r2, sp, #128	; 0x80
	if (i < 0) return;
 801bdf6:	2b00      	cmp	r3, #0
	pb->buf[i++] = (BYTE)c;
 801bdf8:	f103 0401 	add.w	r4, r3, #1
			putc_bfd(&pb, str[--i]);
 801bdfc:	f105 35ff 	add.w	r5, r5, #4294967295
	pb->buf[i++] = (BYTE)c;
 801be00:	441a      	add	r2, r3
	if (i < 0) return;
 801be02:	db14      	blt.n	801be2e <f_printf+0x34a>
	pb->buf[i++] = (BYTE)c;
 801be04:	5d7b      	ldrb	r3, [r7, r5]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801be06:	2c3c      	cmp	r4, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 801be08:	f802 3c40 	strb.w	r3, [r2, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801be0c:	dd0a      	ble.n	801be24 <f_printf+0x340>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 801be0e:	ab04      	add	r3, sp, #16
 801be10:	4622      	mov	r2, r4
 801be12:	a910      	add	r1, sp, #64	; 0x40
 801be14:	980d      	ldr	r0, [sp, #52]	; 0x34
 801be16:	f7ff f87f 	bl	801af18 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 801be1a:	9b04      	ldr	r3, [sp, #16]
 801be1c:	1b1c      	subs	r4, r3, r4
 801be1e:	bf18      	it	ne
 801be20:	f04f 34ff 	movne.w	r4, #4294967295
	pb->nchr++;
 801be24:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801be26:	4623      	mov	r3, r4
	pb->idx = i;
 801be28:	940e      	str	r4, [sp, #56]	; 0x38
	pb->nchr++;
 801be2a:	3201      	adds	r2, #1
 801be2c:	920f      	str	r2, [sp, #60]	; 0x3c
		} while (i);
 801be2e:	2d00      	cmp	r5, #0
 801be30:	d1e0      	bne.n	801bdf4 <f_printf+0x310>
 801be32:	4654      	mov	r4, sl
	pb->buf[i++] = (BYTE)c;
 801be34:	a920      	add	r1, sp, #128	; 0x80
		while (j++ < w) putc_bfd(&pb, d);
 801be36:	4544      	cmp	r4, r8
	pb->buf[i++] = (BYTE)c;
 801be38:	f103 0201 	add.w	r2, r3, #1
 801be3c:	f108 0801 	add.w	r8, r8, #1
 801be40:	4419      	add	r1, r3
		while (j++ < w) putc_bfd(&pb, d);
 801be42:	f67f ae5c 	bls.w	801bafe <f_printf+0x1a>
	if (i < 0) return;
 801be46:	2b00      	cmp	r3, #0
 801be48:	dbf4      	blt.n	801be34 <f_printf+0x350>
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801be4a:	2a3d      	cmp	r2, #61	; 0x3d
	pb->buf[i++] = (BYTE)c;
 801be4c:	f801 9c40 	strb.w	r9, [r1, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801be50:	d109      	bne.n	801be66 <f_printf+0x382>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 801be52:	ab04      	add	r3, sp, #16
 801be54:	a910      	add	r1, sp, #64	; 0x40
 801be56:	980d      	ldr	r0, [sp, #52]	; 0x34
 801be58:	f7ff f85e 	bl	801af18 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 801be5c:	9a04      	ldr	r2, [sp, #16]
 801be5e:	3a3d      	subs	r2, #61	; 0x3d
 801be60:	bf18      	it	ne
 801be62:	f04f 32ff 	movne.w	r2, #4294967295
	pb->nchr++;
 801be66:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801be68:	4613      	mov	r3, r2
	pb->idx = i;
 801be6a:	920e      	str	r2, [sp, #56]	; 0x38
	pb->nchr++;
 801be6c:	3101      	adds	r1, #1
 801be6e:	910f      	str	r1, [sp, #60]	; 0x3c
 801be70:	e7e0      	b.n	801be34 <f_printf+0x350>
				f = 2; c = *fmt++;
 801be72:	f04f 0b02 	mov.w	fp, #2
 801be76:	78b2      	ldrb	r2, [r6, #2]
 801be78:	2006      	movs	r0, #6
 801be7a:	3603      	adds	r6, #3
 801be7c:	46da      	mov	sl, fp
 801be7e:	e685      	b.n	801bb8c <f_printf+0xa8>
	pb->buf[i++] = (BYTE)c;
 801be80:	f04f 0820 	mov.w	r8, #32
 801be84:	aa20      	add	r2, sp, #128	; 0x80
			while (j++ < w) putc_bfd(&pb, ' ');
 801be86:	42a5      	cmp	r5, r4
	pb->buf[i++] = (BYTE)c;
 801be88:	f103 0701 	add.w	r7, r3, #1
 801be8c:	f105 0501 	add.w	r5, r5, #1
 801be90:	441a      	add	r2, r3
			while (j++ < w) putc_bfd(&pb, ' ');
 801be92:	f4bf ae34 	bcs.w	801bafe <f_printf+0x1a>
	if (i < 0) return;
 801be96:	2b00      	cmp	r3, #0
 801be98:	dbf4      	blt.n	801be84 <f_printf+0x3a0>
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801be9a:	2f3c      	cmp	r7, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 801be9c:	f802 8c40 	strb.w	r8, [r2, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801bea0:	dd0a      	ble.n	801beb8 <f_printf+0x3d4>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 801bea2:	ab04      	add	r3, sp, #16
 801bea4:	463a      	mov	r2, r7
 801bea6:	a910      	add	r1, sp, #64	; 0x40
 801bea8:	980d      	ldr	r0, [sp, #52]	; 0x34
 801beaa:	f7ff f835 	bl	801af18 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 801beae:	9b04      	ldr	r3, [sp, #16]
 801beb0:	1bdf      	subs	r7, r3, r7
 801beb2:	bf18      	it	ne
 801beb4:	f04f 37ff 	movne.w	r7, #4294967295
	pb->nchr++;
 801beb8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801beba:	463b      	mov	r3, r7
	pb->idx = i;
 801bebc:	970e      	str	r7, [sp, #56]	; 0x38
	pb->nchr++;
 801bebe:	3201      	adds	r2, #1
 801bec0:	920f      	str	r2, [sp, #60]	; 0x3c
 801bec2:	e7df      	b.n	801be84 <f_printf+0x3a0>
 801bec4:	2000      	movs	r0, #0
 801bec6:	9001      	str	r0, [sp, #4]
 801bec8:	e6ab      	b.n	801bc22 <f_printf+0x13e>
	pb->buf[i++] = (BYTE)c;
 801beca:	f04f 0920 	mov.w	r9, #32
 801bece:	46a8      	mov	r8, r5
 801bed0:	aa20      	add	r2, sp, #128	; 0x80
				while (j++ < w) putc_bfd(&pb, ' ');
 801bed2:	45a0      	cmp	r8, r4
	pb->buf[i++] = (BYTE)c;
 801bed4:	f103 0501 	add.w	r5, r3, #1
 801bed8:	eb02 0103 	add.w	r1, r2, r3
				while (j++ < w) putc_bfd(&pb, ' ');
 801bedc:	f108 0201 	add.w	r2, r8, #1
 801bee0:	4690      	mov	r8, r2
 801bee2:	d216      	bcs.n	801bf12 <f_printf+0x42e>
	if (i < 0) return;
 801bee4:	2b00      	cmp	r3, #0
 801bee6:	dbf3      	blt.n	801bed0 <f_printf+0x3ec>
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801bee8:	2d3c      	cmp	r5, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 801beea:	f801 9c40 	strb.w	r9, [r1, #-64]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801beee:	dd0a      	ble.n	801bf06 <f_printf+0x422>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 801bef0:	ab04      	add	r3, sp, #16
 801bef2:	462a      	mov	r2, r5
 801bef4:	a910      	add	r1, sp, #64	; 0x40
 801bef6:	980d      	ldr	r0, [sp, #52]	; 0x34
 801bef8:	f7ff f80e 	bl	801af18 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 801befc:	9b04      	ldr	r3, [sp, #16]
 801befe:	1b5d      	subs	r5, r3, r5
 801bf00:	bf18      	it	ne
 801bf02:	f04f 35ff 	movne.w	r5, #4294967295
	pb->nchr++;
 801bf06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bf08:	462b      	mov	r3, r5
	pb->idx = i;
 801bf0a:	950e      	str	r5, [sp, #56]	; 0x38
	pb->nchr++;
 801bf0c:	3201      	adds	r2, #1
 801bf0e:	920f      	str	r2, [sp, #60]	; 0x3c
 801bf10:	e7de      	b.n	801bed0 <f_printf+0x3ec>
				while (j++ < w) putc_bfd(&pb, ' ');
 801bf12:	4615      	mov	r5, r2
 801bf14:	e70f      	b.n	801bd36 <f_printf+0x252>
		j = i; d = (f & 1) ? '0' : ' ';
 801bf16:	46a8      	mov	r8, r5
 801bf18:	e76b      	b.n	801bdf2 <f_printf+0x30e>
	return EOF;
 801bf1a:	f04f 30ff 	mov.w	r0, #4294967295
 801bf1e:	e624      	b.n	801bb6a <f_printf+0x86>

0801bf20 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 801bf20:	4b11      	ldr	r3, [pc, #68]	; (801bf68 <FATFS_LinkDriver+0x48>)
 801bf22:	7b9a      	ldrb	r2, [r3, #14]
 801bf24:	2a01      	cmp	r2, #1
 801bf26:	d901      	bls.n	801bf2c <FATFS_LinkDriver+0xc>
  uint8_t ret = 1;
 801bf28:	2001      	movs	r0, #1
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
}
 801bf2a:	4770      	bx	lr
{
 801bf2c:	b4f0      	push	{r4, r5, r6, r7}
    disk.is_initialized[disk.nbr] = 0;
 801bf2e:	f893 c00e 	ldrb.w	ip, [r3, #14]
 801bf32:	2400      	movs	r4, #0
    disk.drv[disk.nbr] = drv;
 801bf34:	7b9e      	ldrb	r6, [r3, #14]
    path[1] = ':';
 801bf36:	273a      	movs	r7, #58	; 0x3a
    disk.lun[disk.nbr] = lun;
 801bf38:	7b9d      	ldrb	r5, [r3, #14]
    disk.is_initialized[disk.nbr] = 0;
 801bf3a:	fa5f fc8c 	uxtb.w	ip, ip
    DiskNum = disk.nbr++;
 801bf3e:	7b9a      	ldrb	r2, [r3, #14]
    disk.drv[disk.nbr] = drv;
 801bf40:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    disk.lun[disk.nbr] = lun;
 801bf44:	441d      	add	r5, r3
    disk.is_initialized[disk.nbr] = 0;
 801bf46:	f803 400c 	strb.w	r4, [r3, ip]
    DiskNum = disk.nbr++;
 801bf4a:	b2d2      	uxtb	r2, r2
    disk.drv[disk.nbr] = drv;
 801bf4c:	6070      	str	r0, [r6, #4]
    disk.lun[disk.nbr] = lun;
 801bf4e:	732c      	strb	r4, [r5, #12]
    path[2] = '/';
 801bf50:	252f      	movs	r5, #47	; 0x2f
    DiskNum = disk.nbr++;
 801bf52:	1c50      	adds	r0, r2, #1
    path[0] = DiskNum + '0';
 801bf54:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 801bf56:	b2c0      	uxtb	r0, r0
 801bf58:	7398      	strb	r0, [r3, #14]
    path[3] = 0;
 801bf5a:	4620      	mov	r0, r4
 801bf5c:	70cc      	strb	r4, [r1, #3]
    path[1] = ':';
 801bf5e:	704f      	strb	r7, [r1, #1]
    path[2] = '/';
 801bf60:	708d      	strb	r5, [r1, #2]
    path[0] = DiskNum + '0';
 801bf62:	700a      	strb	r2, [r1, #0]
}
 801bf64:	bcf0      	pop	{r4, r5, r6, r7}
 801bf66:	4770      	bx	lr
 801bf68:	240092dc 	.word	0x240092dc

0801bf6c <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 801bf6c:	f00a b8fa 	b.w	8026164 <malloc>

0801bf70 <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 801bf70:	f00a b900 	b.w	8026174 <free>

0801bf74 <Init_DataMemoryLayout>:
/**
* @brief Initializes the application data memory layout
* @param  Pointer to Application context
*/
void Init_DataMemoryLayout(AppContext_TypeDef *App_Context_Ptr)
{  
 801bf74:	b470      	push	{r4, r5, r6}
   App_Context_Ptr->Ai_ContextPtr->nn_input_buffer = NULL;
  #else
   App_Context_Ptr->Ai_ContextPtr->nn_input_buffer = ai_fp_global_memory + AI_ACTIVATION_BUFFER_SIZE;
  #endif
#elif MEMORY_SCHEME != FULL_INTERNAL_MEM_OPT
  App_Context_Ptr->Camera_ContextPtr->camera_capture_buffer = ai_fp_global_memory;
 801bf76:	4d08      	ldr	r5, [pc, #32]	; (801bf98 <Init_DataMemoryLayout+0x24>)
 801bf78:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
   App_Context_Ptr->Ai_ContextPtr->nn_input_buffer = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE;
  #endif
 #else /*MEMORY_SCHEME == FULL_EXTERNAL*/
  /*Offset so to "bottom" align camera_frame_buff buffer and resize_output_buff buffer*/
  #define  RESIZE_OUTPUT_BUFFER_OFFSET (CAM_FRAME_BUFFER_SIZE - RESIZE_OUTPUT_BUFFER_SIZE) 
  App_Context_Ptr->Ai_ContextPtr->activation_buffer  = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE;
 801bf7a:	6c02      	ldr	r2, [r0, #64]	; 0x40
  App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE;
 801bf7c:	f505 23e1 	add.w	r3, r5, #460800	; 0x70800
  App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.pData = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE;
 801bf80:	6b01      	ldr	r1, [r0, #48]	; 0x30
  App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.pData = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE + RESIZE_OUTPUT_BUFFER_OFFSET;
 801bf82:	4e06      	ldr	r6, [pc, #24]	; (801bf9c <Init_DataMemoryLayout+0x28>)
  #ifdef AI_NETWORK_INPUTS_IN_ACTIVATIONS
   /*Initialized to NULL since input buffer is allocated within activation buffer ==> its size does not need to be taken into account*/  
   App_Context_Ptr->Ai_ContextPtr->nn_input_buffer = NULL;
  #else
   App_Context_Ptr->Ai_ContextPtr->nn_input_buffer = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE + AI_ACTIVATION_BUFFER_SIZE;
 801bf84:	4806      	ldr	r0, [pc, #24]	; (801bfa0 <Init_DataMemoryLayout+0x2c>)
  App_Context_Ptr->Camera_ContextPtr->camera_capture_buffer = ai_fp_global_memory;
 801bf86:	6025      	str	r5, [r4, #0]
  App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE;
 801bf88:	6063      	str	r3, [r4, #4]
  App_Context_Ptr->Ai_ContextPtr->activation_buffer  = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE;
 801bf8a:	6093      	str	r3, [r2, #8]
  App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.pData = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE + RESIZE_OUTPUT_BUFFER_OFFSET;
 801bf8c:	654e      	str	r6, [r1, #84]	; 0x54
  App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.pData = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE;
 801bf8e:	634b      	str	r3, [r1, #52]	; 0x34
   App_Context_Ptr->Ai_ContextPtr->nn_input_buffer = ai_fp_global_memory + CAM_FRAME_BUFFER_SIZE + AI_ACTIVATION_BUFFER_SIZE;
 801bf90:	6050      	str	r0, [r2, #4]
  #endif
 #endif
#else
 #error Please check definition of MEMORY_SCHEME define
#endif
}
 801bf92:	bc70      	pop	{r4, r5, r6}
 801bf94:	4770      	bx	lr
 801bf96:	bf00      	nop
 801bf98:	d0000000 	.word	0xd0000000
 801bf9c:	d00c8800 	.word	0xd00c8800
 801bfa0:	d01059e0 	.word	0xd01059e0

0801bfa4 <Run_Preprocessing>:
* @brief  Run preprocessing stages on captured frame
* @param  App context ptr
* @retval None
*/
void Run_Preprocessing(AppContext_TypeDef *App_Context_Ptr)
{
 801bfa4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    /*********************************************************************************************/
    UTILS_DCache_Coherency_Maintenance((void *)(App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer), CAM_FRAME_BUFFER_SIZE, INVALIDATE);
  }
#endif
  
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer);
 801bfa8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
 801bfaa:	4605      	mov	r5, r0
  TestRunContext_TypeDef* TestRunCtxt_Ptr=&App_Context_Ptr->Test_ContextPtr->TestRunContext;
 801bfac:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[0];
  TestRunCtxt_Ptr->src_width_size=CAM_RES_WIDTH;
  TestRunCtxt_Ptr->src_height_size=CAM_RES_HEIGHT;
  TestRunCtxt_Ptr->src_size=CAM_FRAME_BUFFER_SIZE;
  TestRunCtxt_Ptr->PerformCapture=1;
 801bfae:	f04f 0a01 	mov.w	sl, #1
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer);
 801bfb2:	685b      	ldr	r3, [r3, #4]
  TestRunCtxt_Ptr->src_size=CAM_FRAME_BUFFER_SIZE;
 801bfb4:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
  TestRunCtxt_Ptr->DumpFormat=BMP565;
  TestRunCtxt_Ptr->rb_swap=0;
 801bfb8:	2700      	movs	r7, #0
  TestRunCtxt_Ptr->src_width_size=CAM_RES_WIDTH;
 801bfba:	f44f 7bf0 	mov.w	fp, #480	; 0x1e0
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[0];
 801bfbe:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 801c194 <Run_Preprocessing+0x1f0>
  PreprocContext_TypeDef* PreprocCtxt_Ptr=App_Context_Ptr->Preproc_ContextPtr;
 801bfc2:	6b06      	ldr	r6, [r0, #48]	; 0x30
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 801bfc4:	4620      	mov	r0, r4
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer);
 801bfc6:	f8c4 3608 	str.w	r3, [r4, #1544]	; 0x608
  TestRunCtxt_Ptr->src_size=CAM_FRAME_BUFFER_SIZE;
 801bfca:	f8c4 2618 	str.w	r2, [r4, #1560]	; 0x618
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 801bfce:	7829      	ldrb	r1, [r5, #0]
  TestRunCtxt_Ptr->PerformCapture=1;
 801bfd0:	f8c4 a61c 	str.w	sl, [r4, #1564]	; 0x61c
  TestRunCtxt_Ptr->DumpFormat=BMP565;
 801bfd4:	f884 a620 	strb.w	sl, [r4, #1568]	; 0x620
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[0];
 801bfd8:	f8c4 860c 	str.w	r8, [r4, #1548]	; 0x60c
  TestRunCtxt_Ptr->src_width_size=CAM_RES_WIDTH;
 801bfdc:	f8c4 b610 	str.w	fp, [r4, #1552]	; 0x610
  TestRunCtxt_Ptr->src_height_size=CAM_RES_HEIGHT;
 801bfe0:	f8c4 b614 	str.w	fp, [r4, #1556]	; 0x614
  TestRunCtxt_Ptr->rb_swap=0;
 801bfe4:	f8c4 7624 	str.w	r7, [r4, #1572]	; 0x624
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 801bfe8:	f7e7 fe56 	bl	8003c98 <TEST_Run>
  
  tresize_start=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 801bfec:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 801bfee:	f7e8 fea5 	bl	8004d3c <UTILS_GetTimeStamp>
  PreprocCtxt_Ptr->Resize_Src_Img.pData=App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer;
  PreprocCtxt_Ptr->Resize_Src_Img.width=CAM_RES_WIDTH;
  PreprocCtxt_Ptr->Resize_Src_Img.height=CAM_RES_HEIGHT;
  PreprocCtxt_Ptr->Resize_Src_Img.format=PXFMT_RGB565;
  PreprocCtxt_Ptr->Resize_Dst_Img.pData=App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.pData;
  PreprocCtxt_Ptr->Resize_Dst_Img.width=App_Context_Ptr->Ai_ContextPtr->nn_width;
 801bff2:	6c29      	ldr	r1, [r5, #64]	; 0x40
  tresize_start=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 801bff4:	4681      	mov	r9, r0
  PreprocCtxt_Ptr->Resize_Dst_Img.pData=App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.pData;
 801bff6:	e9d5 320b 	ldrd	r3, r2, [r5, #44]	; 0x2c
  PreprocCtxt_Ptr->Resize_Src_Img.pData=App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer;
 801bffa:	685b      	ldr	r3, [r3, #4]
  PreprocCtxt_Ptr->Resize_Dst_Img.format=PXFMT_RGB565;
  PreprocCtxt_Ptr->Roi.x0=0;
  PreprocCtxt_Ptr->Roi.y0=0;
  PreprocCtxt_Ptr->Roi.width=0;
  PreprocCtxt_Ptr->Roi.height=0;
  PREPROC_ImageResize(App_Context_Ptr->Preproc_ContextPtr);
 801bffc:	4610      	mov	r0, r2
  PreprocCtxt_Ptr->Resize_Dst_Img.pData=App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.pData;
 801bffe:	6d52      	ldr	r2, [r2, #84]	; 0x54
  PreprocCtxt_Ptr->Resize_Src_Img.pData=App_Context_Ptr->Camera_ContextPtr->camera_frame_buffer;
 801c000:	6473      	str	r3, [r6, #68]	; 0x44
  PreprocCtxt_Ptr->Resize_Dst_Img.height=App_Context_Ptr->Ai_ContextPtr->nn_height;
 801c002:	e9d1 3104 	ldrd	r3, r1, [r1, #16]
  PreprocCtxt_Ptr->Resize_Src_Img.height=CAM_RES_HEIGHT;
 801c006:	e9c6 bb0f 	strd	fp, fp, [r6, #60]	; 0x3c
  PreprocCtxt_Ptr->Resize_Dst_Img.height=App_Context_Ptr->Ai_ContextPtr->nn_height;
 801c00a:	e9c6 3113 	strd	r3, r1, [r6, #76]	; 0x4c
  PreprocCtxt_Ptr->Resize_Dst_Img.pData=App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.pData;
 801c00e:	6572      	str	r2, [r6, #84]	; 0x54
  PreprocCtxt_Ptr->Resize_Src_Img.format=PXFMT_RGB565;
 801c010:	f886 a048 	strb.w	sl, [r6, #72]	; 0x48
  PreprocCtxt_Ptr->Resize_Dst_Img.format=PXFMT_RGB565;
 801c014:	f886 a058 	strb.w	sl, [r6, #88]	; 0x58
  PreprocCtxt_Ptr->Roi.y0=0;
 801c018:	e9c6 7703 	strd	r7, r7, [r6, #12]
  PreprocCtxt_Ptr->Roi.height=0;
 801c01c:	e9c6 7705 	strd	r7, r7, [r6, #20]
  PREPROC_ImageResize(App_Context_Ptr->Preproc_ContextPtr);
 801c020:	f7e5 fe86 	bl	8001d30 <PREPROC_ImageResize>
  
  tresize_stop=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 801c024:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 801c026:	f7e8 fe89 	bl	8004d3c <UTILS_GetTimeStamp>
  
#if PIXEL_FMT_CONV == HW_PFC
  /******************************************************************************************/
  /****Coherency purpose: clean the source buffer area in L1 D-Cache before DMA2D reading****/
  /******************************************************************************************/
  UTILS_DCache_Coherency_Maintenance((void *)(App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.pData), RESIZE_OUTPUT_BUFFER_SIZE, CLEAN);
 801c02a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c02c:	f44f 31c4 	mov.w	r1, #100352	; 0x18800
 801c030:	2202      	movs	r2, #2
  tresize_stop=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 801c032:	4682      	mov	sl, r0
  UTILS_DCache_Coherency_Maintenance((void *)(App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.pData), RESIZE_OUTPUT_BUFFER_SIZE, CLEAN);
 801c034:	6d58      	ldr	r0, [r3, #84]	; 0x54
 801c036:	f7e8 ff3d 	bl	8004eb4 <UTILS_DCache_Coherency_Maintenance>
#endif
  
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.pData);
 801c03a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[1];
 801c03c:	f108 0320 	add.w	r3, r8, #32
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.pData);
 801c040:	6d52      	ldr	r2, [r2, #84]	; 0x54
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[1];
 801c042:	f8c4 360c 	str.w	r3, [r4, #1548]	; 0x60c
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.pData);
 801c046:	f8c4 2608 	str.w	r2, [r4, #1544]	; 0x608
  TestRunCtxt_Ptr->src_width_size=ai_get_input_width();
 801c04a:	f7e4 fb9f 	bl	800078c <ai_get_input_width>
 801c04e:	f8c4 0610 	str.w	r0, [r4, #1552]	; 0x610
  TestRunCtxt_Ptr->src_height_size=ai_get_input_height();
 801c052:	f7e4 fb95 	bl	8000780 <ai_get_input_height>
  TestRunCtxt_Ptr->src_size=RESIZE_OUTPUT_BUFFER_SIZE;
  TestRunCtxt_Ptr->PerformCapture=0;
  TestRunCtxt_Ptr->DumpFormat=get_dump_format(&App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img);
 801c056:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  TestRunCtxt_Ptr->src_size=RESIZE_OUTPUT_BUFFER_SIZE;
 801c058:	f44f 32c4 	mov.w	r2, #100352	; 0x18800
  TestRunCtxt_Ptr->src_height_size=ai_get_input_height();
 801c05c:	f8c4 0614 	str.w	r0, [r4, #1556]	; 0x614
  TestRunCtxt_Ptr->DumpFormat=get_dump_format(&App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img);
 801c060:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
  TestRunCtxt_Ptr->PerformCapture=0;
 801c064:	f8c4 761c 	str.w	r7, [r4, #1564]	; 0x61c
 801c068:	2b02      	cmp	r3, #2
  TestRunCtxt_Ptr->src_size=RESIZE_OUTPUT_BUFFER_SIZE;
 801c06a:	f8c4 2618 	str.w	r2, [r4, #1560]	; 0x618
 801c06e:	f200 8086 	bhi.w	801c17e <Run_Preprocessing+0x1da>
 801c072:	4a45      	ldr	r2, [pc, #276]	; (801c188 <Run_Preprocessing+0x1e4>)
 801c074:	5cd3      	ldrb	r3, [r2, r3]
  TestRunCtxt_Ptr->rb_swap=0;
 801c076:	2700      	movs	r7, #0
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 801c078:	7829      	ldrb	r1, [r5, #0]
  TestRunCtxt_Ptr->DumpFormat=get_dump_format(&App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img);
 801c07a:	f884 3620 	strb.w	r3, [r4, #1568]	; 0x620
  /****Image Pixel Format Conversion****/
  /*************************************/
  PreprocCtxt_Ptr->Pfc_Src_Img.pData=App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.pData;
  PreprocCtxt_Ptr->Pfc_Src_Img.width=App_Context_Ptr->Ai_ContextPtr->nn_width;
  PreprocCtxt_Ptr->Pfc_Src_Img.height=App_Context_Ptr->Ai_ContextPtr->nn_height;
  PreprocCtxt_Ptr->Pfc_Src_Img.format=PXFMT_RGB565;
 801c07e:	f04f 0b01 	mov.w	fp, #1
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 801c082:	6be8      	ldr	r0, [r5, #60]	; 0x3c
  TestRunCtxt_Ptr->rb_swap=0;
 801c084:	f8c4 7624 	str.w	r7, [r4, #1572]	; 0x624
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 801c088:	f7e7 fe06 	bl	8003c98 <TEST_Run>
  tpfc_start=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 801c08c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 801c08e:	f7e8 fe55 	bl	8004d3c <UTILS_GetTimeStamp>
  PreprocCtxt_Ptr->Pfc_Src_Img.pData=App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.pData;
 801c092:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  PreprocCtxt_Ptr->Pfc_Src_Img.width=App_Context_Ptr->Ai_ContextPtr->nn_width;
 801c094:	6c29      	ldr	r1, [r5, #64]	; 0x40
  tpfc_start=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 801c096:	4680      	mov	r8, r0
  PreprocCtxt_Ptr->Pfc_Src_Img.pData=App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.pData;
 801c098:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  PreprocCtxt_Ptr->Pfc_Dst_Img.height=App_Context_Ptr->Ai_ContextPtr->nn_height;
  PreprocCtxt_Ptr->Dma2dcfg.x=0;
  PreprocCtxt_Ptr->Dma2dcfg.y=0;
  PreprocCtxt_Ptr->Dma2dcfg.rowStride=App_Context_Ptr->Ai_ContextPtr->nn_width;
  PreprocCtxt_Ptr->red_blue_swap=1;
  PREPROC_PixelFormatConversion(App_Context_Ptr->Preproc_ContextPtr);
 801c09a:	4618      	mov	r0, r3
  PreprocCtxt_Ptr->Pfc_Dst_Img.pData=App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.pData;
 801c09c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  PreprocCtxt_Ptr->Pfc_Src_Img.pData=App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img.pData;
 801c09e:	6272      	str	r2, [r6, #36]	; 0x24
  PreprocCtxt_Ptr->Pfc_Src_Img.height=App_Context_Ptr->Ai_ContextPtr->nn_height;
 801c0a0:	e9d1 2104 	ldrd	r2, r1, [r1, #16]
  PreprocCtxt_Ptr->Pfc_Dst_Img.pData=App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.pData;
 801c0a4:	6373      	str	r3, [r6, #52]	; 0x34
  PreprocCtxt_Ptr->Pfc_Src_Img.width=App_Context_Ptr->Ai_ContextPtr->nn_width;
 801c0a6:	61f2      	str	r2, [r6, #28]
  PreprocCtxt_Ptr->Pfc_Src_Img.height=App_Context_Ptr->Ai_ContextPtr->nn_height;
 801c0a8:	6231      	str	r1, [r6, #32]
  PreprocCtxt_Ptr->Pfc_Src_Img.format=PXFMT_RGB565;
 801c0aa:	f886 b028 	strb.w	fp, [r6, #40]	; 0x28
  PreprocCtxt_Ptr->red_blue_swap=1;
 801c0ae:	f8c6 b008 	str.w	fp, [r6, #8]
  PreprocCtxt_Ptr->Pfc_Dst_Img.height=App_Context_Ptr->Ai_ContextPtr->nn_height;
 801c0b2:	e9c6 210b 	strd	r2, r1, [r6, #44]	; 0x2c
  PreprocCtxt_Ptr->Dma2dcfg.x=0;
 801c0b6:	e9c6 7200 	strd	r7, r2, [r6]
  PREPROC_PixelFormatConversion(App_Context_Ptr->Preproc_ContextPtr);
 801c0ba:	f7e5 fe41 	bl	8001d40 <PREPROC_PixelFormatConversion>
  
  tpfc_stop=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 801c0be:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 801c0c0:	f7e8 fe3c 	bl	8004d3c <UTILS_GetTimeStamp>
  
#if PIXEL_FMT_CONV == HW_PFC 
  /**************************************************************************************/
  /****Coherency purpose: invalidate the source area in L1 D-Cache before CPU reading****/  
  /**************************************************************************************/
  UTILS_DCache_Coherency_Maintenance((void *)(App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.pData), 
 801c0c4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c0c6:	f44f 3113 	mov.w	r1, #150528	; 0x24c00
 801c0ca:	465a      	mov	r2, fp
  tpfc_stop=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 801c0cc:	4606      	mov	r6, r0
  UTILS_DCache_Coherency_Maintenance((void *)(App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.pData), 
 801c0ce:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801c0d0:	f7e8 fef0 	bl	8004eb4 <UTILS_DCache_Coherency_Maintenance>
                                     PFC_OUTPUT_BUFFER_SIZE, 
                                     INVALIDATE);
#endif
  
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.pData);
 801c0d4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[2];
 801c0d6:	4a2d      	ldr	r2, [pc, #180]	; (801c18c <Run_Preprocessing+0x1e8>)
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.pData);
 801c0d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  TestRunCtxt_Ptr->src_buff_name=Test_buffer_names[2];
 801c0da:	f8c4 260c 	str.w	r2, [r4, #1548]	; 0x60c
  TestRunCtxt_Ptr->src_buff_addr=(void *)(App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img.pData);
 801c0de:	f8c4 3608 	str.w	r3, [r4, #1544]	; 0x608
  TestRunCtxt_Ptr->src_width_size=ai_get_input_width();
 801c0e2:	f7e4 fb53 	bl	800078c <ai_get_input_width>
 801c0e6:	f8c4 0610 	str.w	r0, [r4, #1552]	; 0x610
  TestRunCtxt_Ptr->src_height_size=ai_get_input_height();
 801c0ea:	f7e4 fb49 	bl	8000780 <ai_get_input_height>
  TestRunCtxt_Ptr->src_size=PFC_OUTPUT_BUFFER_SIZE;
  TestRunCtxt_Ptr->PerformCapture=0;
  TestRunCtxt_Ptr->DumpFormat=get_dump_format(&App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img);
 801c0ee:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  TestRunCtxt_Ptr->src_size=PFC_OUTPUT_BUFFER_SIZE;
 801c0f0:	f44f 3213 	mov.w	r2, #150528	; 0x24c00
  TestRunCtxt_Ptr->PerformCapture=0;
 801c0f4:	f8c4 761c 	str.w	r7, [r4, #1564]	; 0x61c
  TestRunCtxt_Ptr->DumpFormat=get_dump_format(&App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img);
 801c0f8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
  TestRunCtxt_Ptr->src_height_size=ai_get_input_height();
 801c0fc:	f8c4 0614 	str.w	r0, [r4, #1556]	; 0x614
 801c100:	2b02      	cmp	r3, #2
  TestRunCtxt_Ptr->src_size=PFC_OUTPUT_BUFFER_SIZE;
 801c102:	f8c4 2618 	str.w	r2, [r4, #1560]	; 0x618
 801c106:	d83c      	bhi.n	801c182 <Run_Preprocessing+0x1de>
 801c108:	4a1f      	ldr	r2, [pc, #124]	; (801c188 <Run_Preprocessing+0x1e4>)
 801c10a:	5cd2      	ldrb	r2, [r2, r3]
  TestRunCtxt_Ptr->rb_swap=1;
 801c10c:	2301      	movs	r3, #1
  TestRunCtxt_Ptr->DumpFormat=get_dump_format(&App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img);
 801c10e:	f884 2620 	strb.w	r2, [r4, #1568]	; 0x620
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 801c112:	7829      	ldrb	r1, [r5, #0]
  TestRunCtxt_Ptr->PerformCapture=0;
  TestRunCtxt_Ptr->DumpFormat=RAW;
  TestRunCtxt_Ptr->rb_swap=0;
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
  
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_PFC]=tpfc_stop-tpfc_start;
 801c114:	eba6 0608 	sub.w	r6, r6, r8
  TestRunCtxt_Ptr->rb_swap=1;
 801c118:	f8c4 3624 	str.w	r3, [r4, #1572]	; 0x624
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 801c11c:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 801c11e:	f7e7 fdbb 	bl	8003c98 <TEST_Run>
  tpvc_start=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 801c122:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 801c124:	f7e8 fe0a 	bl	8004d3c <UTILS_GetTimeStamp>
  AI_PixelValueConversion(App_Context_Ptr->Ai_ContextPtr, 
 801c128:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  tpvc_start=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 801c12a:	4683      	mov	fp, r0
  AI_PixelValueConversion(App_Context_Ptr->Ai_ContextPtr, 
 801c12c:	6c28      	ldr	r0, [r5, #64]	; 0x40
 801c12e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801c130:	f7e4 fe82 	bl	8000e38 <AI_PixelValueConversion>
  tpvc_stop=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 801c134:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 801c136:	f7e8 fe01 	bl	8004d3c <UTILS_GetTimeStamp>
  TestRunCtxt_Ptr->src_buff_addr=(void *)(NULL);
 801c13a:	2300      	movs	r3, #0
  TestRunCtxt_Ptr->DumpFormat=RAW;
 801c13c:	2203      	movs	r2, #3
  TestRunCtxt_Ptr->src_buff_name="";
 801c13e:	4914      	ldr	r1, [pc, #80]	; (801c190 <Run_Preprocessing+0x1ec>)
  tpvc_stop=UTILS_GetTimeStamp(App_Context_Ptr->Utils_ContextPtr);
 801c140:	4607      	mov	r7, r0
  TestRunCtxt_Ptr->src_buff_addr=(void *)(NULL);
 801c142:	f8c4 3608 	str.w	r3, [r4, #1544]	; 0x608
  TestRunCtxt_Ptr->src_width_size=0;
 801c146:	f8c4 3610 	str.w	r3, [r4, #1552]	; 0x610
  TestRunCtxt_Ptr->src_height_size=0;
 801c14a:	f8c4 3614 	str.w	r3, [r4, #1556]	; 0x614
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_RESIZE]=tresize_stop-tresize_start;
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_PVC]=tpvc_stop-tpvc_start;
 801c14e:	eba7 070b 	sub.w	r7, r7, fp
  TestRunCtxt_Ptr->src_size=0;
 801c152:	f8c4 3618 	str.w	r3, [r4, #1560]	; 0x618
  TestRunCtxt_Ptr->PerformCapture=0;
 801c156:	f8c4 361c 	str.w	r3, [r4, #1564]	; 0x61c
  TestRunCtxt_Ptr->rb_swap=0;
 801c15a:	f8c4 3624 	str.w	r3, [r4, #1572]	; 0x624
  TestRunCtxt_Ptr->src_buff_name="";
 801c15e:	f8c4 160c 	str.w	r1, [r4, #1548]	; 0x60c
  TestRunCtxt_Ptr->DumpFormat=RAW;
 801c162:	f884 2620 	strb.w	r2, [r4, #1568]	; 0x620
  TEST_Run(App_Context_Ptr->Test_ContextPtr, App_Context_Ptr->Operating_Mode);
 801c166:	7829      	ldrb	r1, [r5, #0]
 801c168:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 801c16a:	f7e7 fd95 	bl	8003c98 <TEST_Run>
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_PFC]=tpfc_stop-tpfc_start;
 801c16e:	6bab      	ldr	r3, [r5, #56]	; 0x38
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_RESIZE]=tresize_stop-tresize_start;
 801c170:	ebaa 0209 	sub.w	r2, sl, r9
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_PFC]=tpfc_stop-tpfc_start;
 801c174:	e9c3 6702 	strd	r6, r7, [r3, #8]
  App_Context_Ptr->Utils_ContextPtr->ExecTimingContext.operation_exec_time[FRAME_RESIZE]=tresize_stop-tresize_start;
 801c178:	605a      	str	r2, [r3, #4]
}
 801c17a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TestRunCtxt_Ptr->DumpFormat=get_dump_format(&App_Context_Ptr->Preproc_ContextPtr->Resize_Dst_Img);
 801c17e:	2303      	movs	r3, #3
 801c180:	e779      	b.n	801c076 <Run_Preprocessing+0xd2>
  TestRunCtxt_Ptr->DumpFormat=get_dump_format(&App_Context_Ptr->Preproc_ContextPtr->Pfc_Dst_Img);
 801c182:	2203      	movs	r2, #3
 801c184:	e7c2      	b.n	801c10c <Run_Preprocessing+0x168>
 801c186:	bf00      	nop
 801c188:	080c0094 	.word	0x080c0094
 801c18c:	24000068 	.word	0x24000068
 801c190:	08028f38 	.word	0x08028f38
 801c194:	24000028 	.word	0x24000028

0801c198 <Resize_Frame>:
* @param  dstH         Destination image height
* @param  Top2Bottom   Value of 1/0 indicates that the rescales performs from the top/bottom to the bottom/top of the buffers
* @retval void         None
*/
void Resize_Frame(Image_TypeDef *srcImage, Image_TypeDef *dstImage, Roi_TypeDef *roi)
{
 801c198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int x_ratio = (int)(((roi->width ? roi->width : srcImage->width)<<16)/dstImage->width)+1;
 801c19c:	6897      	ldr	r7, [r2, #8]
{
 801c19e:	b085      	sub	sp, #20
 801c1a0:	4616      	mov	r6, r2
 801c1a2:	4605      	mov	r5, r0
 801c1a4:	4688      	mov	r8, r1
  int x_ratio = (int)(((roi->width ? roi->width : srcImage->width)<<16)/dstImage->width)+1;
 801c1a6:	b907      	cbnz	r7, 801c1aa <Resize_Frame+0x12>
 801c1a8:	6807      	ldr	r7, [r0, #0]
 801c1aa:	f8d8 2000 	ldr.w	r2, [r8]
 801c1ae:	043f      	lsls	r7, r7, #16
  int y_ratio = (int)(((roi->height ? roi->height : srcImage->height)<<16)/dstImage->height)+1;
 801c1b0:	68f3      	ldr	r3, [r6, #12]
  int x_ratio = (int)(((roi->width ? roi->width : srcImage->width)<<16)/dstImage->width)+1;
 801c1b2:	fbb7 f7f2 	udiv	r7, r7, r2
 801c1b6:	1c7a      	adds	r2, r7, #1
 801c1b8:	9202      	str	r2, [sp, #8]
  int y_ratio = (int)(((roi->height ? roi->height : srcImage->height)<<16)/dstImage->height)+1;
 801c1ba:	b903      	cbnz	r3, 801c1be <Resize_Frame+0x26>
 801c1bc:	686b      	ldr	r3, [r5, #4]
 801c1be:	041b      	lsls	r3, r3, #16
 801c1c0:	f8d8 1004 	ldr.w	r1, [r8, #4]
  uint32_t pixelSize=IMG_BYTES_PER_PX(srcImage->format);
 801c1c4:	7b2a      	ldrb	r2, [r5, #12]
  int y_ratio = (int)(((roi->height ? roi->height : srcImage->height)<<16)/dstImage->height)+1;
 801c1c6:	fbb3 faf1 	udiv	sl, r3, r1
 801c1ca:	f10a 0b01 	add.w	fp, sl, #1
  uint32_t pixelSize=IMG_BYTES_PER_PX(srcImage->format);
 801c1ce:	b1a2      	cbz	r2, 801c1fa <Resize_Frame+0x62>
 801c1d0:	2a01      	cmp	r2, #1
 801c1d2:	f000 810f 	beq.w	801c3f4 <Resize_Frame+0x25c>
 801c1d6:	2a02      	cmp	r2, #2
 801c1d8:	f000 810e 	beq.w	801c3f8 <Resize_Frame+0x260>
 801c1dc:	2a03      	cmp	r2, #3
  uint32_t Top2Bottom;
  
  Top2Bottom=Image_CheckResizeMemoryLayout(srcImage, dstImage);
 801c1de:	4641      	mov	r1, r8
 801c1e0:	4628      	mov	r0, r5
  uint32_t pixelSize=IMG_BYTES_PER_PX(srcImage->format);
 801c1e2:	bf14      	ite	ne
 801c1e4:	2400      	movne	r4, #0
 801c1e6:	2404      	moveq	r4, #4
  Top2Bottom=Image_CheckResizeMemoryLayout(srcImage, dstImage);
 801c1e8:	f001 f8e2 	bl	801d3b0 <Image_CheckResizeMemoryLayout>
  
  if(Top2Bottom == 0)
 801c1ec:	b160      	cbz	r0, 801c208 <Resize_Frame+0x70>
          *((uint8_t*)dstImage->pData + i + j) = *((uint8_t*)srcImage->pData + (((sy+roi->y0)*srcImage->width) + (sx+roi->x0))*pixelSize + j);//(uint8_t) srcImage->pData[];
        }
      }
    }
  }
  else if(Top2Bottom == 1)
 801c1ee:	2801      	cmp	r0, #1
 801c1f0:	f000 8088 	beq.w	801c304 <Resize_Frame+0x16c>
          *((uint8_t*)dstImage->pData + i + j) =  *((uint8_t*)srcImage->pData +(((sy+roi->y0)*srcImage->width) + (sx+roi->x0))*pixelSize + j);
        }
      }
    }
  }
}
 801c1f4:	b005      	add	sp, #20
 801c1f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint32_t pixelSize=IMG_BYTES_PER_PX(srcImage->format);
 801c1fa:	2401      	movs	r4, #1
  Top2Bottom=Image_CheckResizeMemoryLayout(srcImage, dstImage);
 801c1fc:	4641      	mov	r1, r8
 801c1fe:	4628      	mov	r0, r5
 801c200:	f001 f8d6 	bl	801d3b0 <Image_CheckResizeMemoryLayout>
  if(Top2Bottom == 0)
 801c204:	2800      	cmp	r0, #0
 801c206:	d1f2      	bne.n	801c1ee <Resize_Frame+0x56>
    for (int y=dstImage->height-1, i=(dstImage->width*dstImage->height*pixelSize -2  ); y>=0; y--)
 801c208:	e9d8 2300 	ldrd	r2, r3, [r8]
 801c20c:	fb02 fc03 	mul.w	ip, r2, r3
 801c210:	f1b3 0901 	subs.w	r9, r3, #1
 801c214:	fb04 fc0c 	mul.w	ip, r4, ip
 801c218:	f1ac 0c02 	sub.w	ip, ip, #2
 801c21c:	d4ea      	bmi.n	801c1f4 <Resize_Frame+0x5c>
 801c21e:	ea6f 0e07 	mvn.w	lr, r7
 801c222:	ea6f 030a 	mvn.w	r3, sl
 801c226:	4611      	mov	r1, r2
 801c228:	fb09 fa0b 	mul.w	sl, r9, fp
 801c22c:	46cb      	mov	fp, r9
 801c22e:	46f1      	mov	r9, lr
 801c230:	9303      	str	r3, [sp, #12]
      for (int x=dstImage->width-1; x>=0; x--, i-=pixelSize)
 801c232:	3901      	subs	r1, #1
      int sy = (y*y_ratio)>>16;
 801c234:	ea4f 4e2a 	mov.w	lr, sl, asr #16
      for (int x=dstImage->width-1; x>=0; x--, i-=pixelSize)
 801c238:	d459      	bmi.n	801c2ee <Resize_Frame+0x156>
 801c23a:	9b02      	ldr	r3, [sp, #8]
 801c23c:	f8cd b004 	str.w	fp, [sp, #4]
 801c240:	46d3      	mov	fp, sl
 801c242:	fb01 f703 	mul.w	r7, r1, r3
 801c246:	46ca      	mov	sl, r9
 801c248:	46f1      	mov	r9, lr
 801c24a:	468e      	mov	lr, r1
        int sx = (x*x_ratio)>>16;
 801c24c:	143a      	asrs	r2, r7, #16
      for (int x=dstImage->width-1; x>=0; x--, i-=pixelSize)
 801c24e:	f10e 3eff 	add.w	lr, lr, #4294967295
 801c252:	4457      	add	r7, sl
        for(int j=0; j<pixelSize; j++)
 801c254:	2c00      	cmp	r4, #0
 801c256:	d041      	beq.n	801c2dc <Resize_Frame+0x144>
          *((uint8_t*)dstImage->pData + i + j) = *((uint8_t*)srcImage->pData + (((sy+roi->y0)*srcImage->width) + (sx+roi->x0))*pixelSize + j);//(uint8_t) srcImage->pData[];
 801c258:	6873      	ldr	r3, [r6, #4]
        for(int j=0; j<pixelSize; j++)
 801c25a:	2c01      	cmp	r4, #1
          *((uint8_t*)dstImage->pData + i + j) = *((uint8_t*)srcImage->pData + (((sy+roi->y0)*srcImage->width) + (sx+roi->x0))*pixelSize + j);//(uint8_t) srcImage->pData[];
 801c25c:	6831      	ldr	r1, [r6, #0]
 801c25e:	6828      	ldr	r0, [r5, #0]
 801c260:	444b      	add	r3, r9
 801c262:	fb00 1303 	mla	r3, r0, r3, r1
 801c266:	68a8      	ldr	r0, [r5, #8]
 801c268:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801c26c:	4413      	add	r3, r2
 801c26e:	fb04 f303 	mul.w	r3, r4, r3
 801c272:	5cc3      	ldrb	r3, [r0, r3]
 801c274:	f801 300c 	strb.w	r3, [r1, ip]
        for(int j=0; j<pixelSize; j++)
 801c278:	d030      	beq.n	801c2dc <Resize_Frame+0x144>
          *((uint8_t*)dstImage->pData + i + j) = *((uint8_t*)srcImage->pData + (((sy+roi->y0)*srcImage->width) + (sx+roi->x0))*pixelSize + j);//(uint8_t) srcImage->pData[];
 801c27a:	6873      	ldr	r3, [r6, #4]
        for(int j=0; j<pixelSize; j++)
 801c27c:	2c02      	cmp	r4, #2
          *((uint8_t*)dstImage->pData + i + j) = *((uint8_t*)srcImage->pData + (((sy+roi->y0)*srcImage->width) + (sx+roi->x0))*pixelSize + j);//(uint8_t) srcImage->pData[];
 801c27e:	6831      	ldr	r1, [r6, #0]
 801c280:	6828      	ldr	r0, [r5, #0]
 801c282:	444b      	add	r3, r9
 801c284:	fb00 1303 	mla	r3, r0, r3, r1
 801c288:	68a8      	ldr	r0, [r5, #8]
 801c28a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801c28e:	4413      	add	r3, r2
 801c290:	4461      	add	r1, ip
 801c292:	fb04 0303 	mla	r3, r4, r3, r0
 801c296:	785b      	ldrb	r3, [r3, #1]
 801c298:	704b      	strb	r3, [r1, #1]
        for(int j=0; j<pixelSize; j++)
 801c29a:	d01f      	beq.n	801c2dc <Resize_Frame+0x144>
          *((uint8_t*)dstImage->pData + i + j) = *((uint8_t*)srcImage->pData + (((sy+roi->y0)*srcImage->width) + (sx+roi->x0))*pixelSize + j);//(uint8_t) srcImage->pData[];
 801c29c:	6873      	ldr	r3, [r6, #4]
        for(int j=0; j<pixelSize; j++)
 801c29e:	2c04      	cmp	r4, #4
          *((uint8_t*)dstImage->pData + i + j) = *((uint8_t*)srcImage->pData + (((sy+roi->y0)*srcImage->width) + (sx+roi->x0))*pixelSize + j);//(uint8_t) srcImage->pData[];
 801c2a0:	6831      	ldr	r1, [r6, #0]
 801c2a2:	6828      	ldr	r0, [r5, #0]
 801c2a4:	444b      	add	r3, r9
 801c2a6:	fb00 1303 	mla	r3, r0, r3, r1
 801c2aa:	68a8      	ldr	r0, [r5, #8]
 801c2ac:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801c2b0:	4413      	add	r3, r2
 801c2b2:	4461      	add	r1, ip
 801c2b4:	fb04 0303 	mla	r3, r4, r3, r0
 801c2b8:	789b      	ldrb	r3, [r3, #2]
 801c2ba:	708b      	strb	r3, [r1, #2]
        for(int j=0; j<pixelSize; j++)
 801c2bc:	d10e      	bne.n	801c2dc <Resize_Frame+0x144>
          *((uint8_t*)dstImage->pData + i + j) = *((uint8_t*)srcImage->pData + (((sy+roi->y0)*srcImage->width) + (sx+roi->x0))*pixelSize + j);//(uint8_t) srcImage->pData[];
 801c2be:	6873      	ldr	r3, [r6, #4]
 801c2c0:	6829      	ldr	r1, [r5, #0]
 801c2c2:	444b      	add	r3, r9
 801c2c4:	6830      	ldr	r0, [r6, #0]
 801c2c6:	fb01 2203 	mla	r2, r1, r3, r2
 801c2ca:	68ab      	ldr	r3, [r5, #8]
 801c2cc:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801c2d0:	4402      	add	r2, r0
 801c2d2:	4461      	add	r1, ip
 801c2d4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801c2d8:	78d3      	ldrb	r3, [r2, #3]
 801c2da:	70cb      	strb	r3, [r1, #3]
      for (int x=dstImage->width-1; x>=0; x--, i-=pixelSize)
 801c2dc:	f1be 3fff 	cmp.w	lr, #4294967295
 801c2e0:	ebac 0c04 	sub.w	ip, ip, r4
 801c2e4:	d1b2      	bne.n	801c24c <Resize_Frame+0xb4>
 801c2e6:	46d1      	mov	r9, sl
 801c2e8:	46da      	mov	sl, fp
 801c2ea:	f8dd b004 	ldr.w	fp, [sp, #4]
    for (int y=dstImage->height-1, i=(dstImage->width*dstImage->height*pixelSize -2  ); y>=0; y--)
 801c2ee:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c2f2:	9b03      	ldr	r3, [sp, #12]
 801c2f4:	f1bb 3fff 	cmp.w	fp, #4294967295
 801c2f8:	449a      	add	sl, r3
 801c2fa:	f43f af7b 	beq.w	801c1f4 <Resize_Frame+0x5c>
 801c2fe:	f8d8 1000 	ldr.w	r1, [r8]
 801c302:	e796      	b.n	801c232 <Resize_Frame+0x9a>
    for (int y=0, i=0; y<dstImage->height; y++)
 801c304:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801c308:	2a00      	cmp	r2, #0
 801c30a:	f43f af73 	beq.w	801c1f4 <Resize_Frame+0x5c>
 801c30e:	f04f 0e00 	mov.w	lr, #0
 801c312:	f8cd b00c 	str.w	fp, [sp, #12]
 801c316:	f8d8 3000 	ldr.w	r3, [r8]
 801c31a:	46f4      	mov	ip, lr
 801c31c:	46f3      	mov	fp, lr
 801c31e:	f8dd 9008 	ldr.w	r9, [sp, #8]
 801c322:	46f2      	mov	sl, lr
      int sy = (y*y_ratio)>>16;
 801c324:	ea4f 4e2a 	mov.w	lr, sl, asr #16
      for (int x=0; x<dstImage->width; x++, i+=pixelSize)
 801c328:	2b00      	cmp	r3, #0
 801c32a:	d05a      	beq.n	801c3e2 <Resize_Frame+0x24a>
 801c32c:	4652      	mov	r2, sl
 801c32e:	2100      	movs	r1, #0
 801c330:	46ca      	mov	sl, r9
 801c332:	f8cd b004 	str.w	fp, [sp, #4]
 801c336:	46f1      	mov	r9, lr
 801c338:	4693      	mov	fp, r2
 801c33a:	468e      	mov	lr, r1
        int sx = (x*x_ratio)>>16;
 801c33c:	140a      	asrs	r2, r1, #16
        for(int j=0; j<pixelSize; j++)
 801c33e:	2c00      	cmp	r4, #0
 801c340:	d043      	beq.n	801c3ca <Resize_Frame+0x232>
          *((uint8_t*)dstImage->pData + i + j) =  *((uint8_t*)srcImage->pData +(((sy+roi->y0)*srcImage->width) + (sx+roi->x0))*pixelSize + j);
 801c342:	6873      	ldr	r3, [r6, #4]
        for(int j=0; j<pixelSize; j++)
 801c344:	2c01      	cmp	r4, #1
          *((uint8_t*)dstImage->pData + i + j) =  *((uint8_t*)srcImage->pData +(((sy+roi->y0)*srcImage->width) + (sx+roi->x0))*pixelSize + j);
 801c346:	6830      	ldr	r0, [r6, #0]
 801c348:	682f      	ldr	r7, [r5, #0]
 801c34a:	444b      	add	r3, r9
 801c34c:	fb07 0303 	mla	r3, r7, r3, r0
 801c350:	68af      	ldr	r7, [r5, #8]
 801c352:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801c356:	4413      	add	r3, r2
 801c358:	fb04 f303 	mul.w	r3, r4, r3
 801c35c:	5cfb      	ldrb	r3, [r7, r3]
 801c35e:	f800 300c 	strb.w	r3, [r0, ip]
        for(int j=0; j<pixelSize; j++)
 801c362:	d030      	beq.n	801c3c6 <Resize_Frame+0x22e>
          *((uint8_t*)dstImage->pData + i + j) =  *((uint8_t*)srcImage->pData +(((sy+roi->y0)*srcImage->width) + (sx+roi->x0))*pixelSize + j);
 801c364:	6873      	ldr	r3, [r6, #4]
        for(int j=0; j<pixelSize; j++)
 801c366:	2c02      	cmp	r4, #2
          *((uint8_t*)dstImage->pData + i + j) =  *((uint8_t*)srcImage->pData +(((sy+roi->y0)*srcImage->width) + (sx+roi->x0))*pixelSize + j);
 801c368:	6830      	ldr	r0, [r6, #0]
 801c36a:	682f      	ldr	r7, [r5, #0]
 801c36c:	444b      	add	r3, r9
 801c36e:	fb07 0303 	mla	r3, r7, r3, r0
 801c372:	68af      	ldr	r7, [r5, #8]
 801c374:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801c378:	4413      	add	r3, r2
 801c37a:	4460      	add	r0, ip
 801c37c:	fb04 7303 	mla	r3, r4, r3, r7
 801c380:	785b      	ldrb	r3, [r3, #1]
 801c382:	7043      	strb	r3, [r0, #1]
        for(int j=0; j<pixelSize; j++)
 801c384:	d01f      	beq.n	801c3c6 <Resize_Frame+0x22e>
          *((uint8_t*)dstImage->pData + i + j) =  *((uint8_t*)srcImage->pData +(((sy+roi->y0)*srcImage->width) + (sx+roi->x0))*pixelSize + j);
 801c386:	6873      	ldr	r3, [r6, #4]
        for(int j=0; j<pixelSize; j++)
 801c388:	2c04      	cmp	r4, #4
          *((uint8_t*)dstImage->pData + i + j) =  *((uint8_t*)srcImage->pData +(((sy+roi->y0)*srcImage->width) + (sx+roi->x0))*pixelSize + j);
 801c38a:	6830      	ldr	r0, [r6, #0]
 801c38c:	682f      	ldr	r7, [r5, #0]
 801c38e:	444b      	add	r3, r9
 801c390:	fb07 0303 	mla	r3, r7, r3, r0
 801c394:	68af      	ldr	r7, [r5, #8]
 801c396:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801c39a:	4413      	add	r3, r2
 801c39c:	4460      	add	r0, ip
 801c39e:	fb04 7303 	mla	r3, r4, r3, r7
 801c3a2:	789b      	ldrb	r3, [r3, #2]
 801c3a4:	7083      	strb	r3, [r0, #2]
        for(int j=0; j<pixelSize; j++)
 801c3a6:	d10e      	bne.n	801c3c6 <Resize_Frame+0x22e>
          *((uint8_t*)dstImage->pData + i + j) =  *((uint8_t*)srcImage->pData +(((sy+roi->y0)*srcImage->width) + (sx+roi->x0))*pixelSize + j);
 801c3a8:	6873      	ldr	r3, [r6, #4]
 801c3aa:	6828      	ldr	r0, [r5, #0]
 801c3ac:	444b      	add	r3, r9
 801c3ae:	6837      	ldr	r7, [r6, #0]
 801c3b0:	fb00 2203 	mla	r2, r0, r3, r2
 801c3b4:	68ab      	ldr	r3, [r5, #8]
 801c3b6:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801c3ba:	443a      	add	r2, r7
 801c3bc:	4460      	add	r0, ip
 801c3be:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801c3c2:	78d3      	ldrb	r3, [r2, #3]
 801c3c4:	70c3      	strb	r3, [r0, #3]
 801c3c6:	f8d8 3000 	ldr.w	r3, [r8]
      for (int x=0; x<dstImage->width; x++, i+=pixelSize)
 801c3ca:	f10e 0e01 	add.w	lr, lr, #1
 801c3ce:	44a4      	add	ip, r4
 801c3d0:	4451      	add	r1, sl
 801c3d2:	459e      	cmp	lr, r3
 801c3d4:	d3b2      	bcc.n	801c33c <Resize_Frame+0x1a4>
 801c3d6:	46d1      	mov	r9, sl
 801c3d8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801c3dc:	46da      	mov	sl, fp
 801c3de:	f8dd b004 	ldr.w	fp, [sp, #4]
    for (int y=0, i=0; y<dstImage->height; y++)
 801c3e2:	f10b 0b01 	add.w	fp, fp, #1
 801c3e6:	9903      	ldr	r1, [sp, #12]
 801c3e8:	4593      	cmp	fp, r2
 801c3ea:	448a      	add	sl, r1
 801c3ec:	d39a      	bcc.n	801c324 <Resize_Frame+0x18c>
}
 801c3ee:	b005      	add	sp, #20
 801c3f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint32_t pixelSize=IMG_BYTES_PER_PX(srcImage->format);
 801c3f4:	2402      	movs	r4, #2
 801c3f6:	e701      	b.n	801c1fc <Resize_Frame+0x64>
 801c3f8:	2403      	movs	r4, #3
 801c3fa:	e6ff      	b.n	801c1fc <Resize_Frame+0x64>

0801c3fc <GetImageInfoBMP.part.0>:
 * @param height[in,out] pointer to the variable containing image height
 * @param bpp[in,out] pointer to the variable containing image number of bytes per pixel
 * @param rs[in,out] pointer to the bmp setting structure
 * @return stm32fs_err_t
 */
static stm32fs_err_t GetImageInfoBMP(FIL *File, uint32_t* width, uint32_t* height, uint32_t* bpp, bmp_read_settings_t *rs)
 801c3fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c400:	b089      	sub	sp, #36	; 0x24
 801c402:	460e      	mov	r6, r1
 801c404:	4617      	mov	r7, r2
 801c406:	4698      	mov	r8, r3
  {
    return STM32FS_ERROR_FILE_NOT_SUPPORTED;
  }

  uint32_t file_size;
  F_READ_SAFE(File, &file_size, sizeof(file_size));
 801c408:	2204      	movs	r2, #4
 801c40a:	ab07      	add	r3, sp, #28
 801c40c:	a904      	add	r1, sp, #16
static stm32fs_err_t GetImageInfoBMP(FIL *File, uint32_t* width, uint32_t* height, uint32_t* bpp, bmp_read_settings_t *rs)
 801c40e:	4605      	mov	r5, r0
  F_READ_SAFE(File, &file_size, sizeof(file_size));
 801c410:	f7fe fbb2 	bl	801ab78 <f_read>
 801c414:	9c07      	ldr	r4, [sp, #28]
 801c416:	2c04      	cmp	r4, #4
 801c418:	d003      	beq.n	801c422 <GetImageInfoBMP.part.0+0x26>
    }
    if (header_type >= 108) { // Skip past the remaining BITMAPV4HEADER bytes.
      for (int i = 0; i < 13; i++) F_READ_SAFE(File, &ignore_32, sizeof(ignore_32));
    }
    if (header_type >= 124) { // Skip past the remaining BITMAPV5HEADER bytes.
      for (int i = 0; i < 4; i++) F_READ_SAFE(File, &ignore_32, sizeof(ignore_32));
 801c41a:	2006      	movs	r0, #6
  if (data_size != (rs->bmp_row_bytes * (*height))) {
    return STM32FS_ERROR_FILE_NOT_SUPPORTED;
  }

  return STM32FS_ERROR_NONE;
}
 801c41c:	b009      	add	sp, #36	; 0x24
 801c41e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  F_READ_SAFE(File, &ignore_16, sizeof(ignore_16));
 801c422:	2202      	movs	r2, #2
 801c424:	ab07      	add	r3, sp, #28
 801c426:	4628      	mov	r0, r5
 801c428:	a901      	add	r1, sp, #4
 801c42a:	f7fe fba5 	bl	801ab78 <f_read>
 801c42e:	9a07      	ldr	r2, [sp, #28]
 801c430:	2a02      	cmp	r2, #2
 801c432:	d1f2      	bne.n	801c41a <GetImageInfoBMP.part.0+0x1e>
  F_READ_SAFE(File, &ignore_16, sizeof(ignore_16));
 801c434:	ab07      	add	r3, sp, #28
 801c436:	a901      	add	r1, sp, #4
 801c438:	4628      	mov	r0, r5
 801c43a:	f7fe fb9d 	bl	801ab78 <f_read>
 801c43e:	9b07      	ldr	r3, [sp, #28]
 801c440:	2b02      	cmp	r3, #2
 801c442:	d1ea      	bne.n	801c41a <GetImageInfoBMP.part.0+0x1e>
  F_READ_SAFE(File, &header_size, sizeof(header_size));
 801c444:	4622      	mov	r2, r4
 801c446:	ab07      	add	r3, sp, #28
 801c448:	a905      	add	r1, sp, #20
 801c44a:	4628      	mov	r0, r5
 801c44c:	f7fe fb94 	bl	801ab78 <f_read>
 801c450:	9a07      	ldr	r2, [sp, #28]
 801c452:	2a04      	cmp	r2, #4
 801c454:	d1e1      	bne.n	801c41a <GetImageInfoBMP.part.0+0x1e>
  if (file_size <= header_size){
 801c456:	e9dd 1304 	ldrd	r1, r3, [sp, #16]
 801c45a:	4299      	cmp	r1, r3
 801c45c:	d945      	bls.n	801c4ea <GetImageInfoBMP.part.0+0xee>
  uint32_t data_size = file_size - header_size;
 801c45e:	eba1 0903 	sub.w	r9, r1, r3
  if (data_size % 4) {
 801c462:	f019 0f03 	tst.w	r9, #3
 801c466:	d140      	bne.n	801c4ea <GetImageInfoBMP.part.0+0xee>
  F_READ_SAFE(File, &header_type, sizeof(header_type));
 801c468:	ab07      	add	r3, sp, #28
 801c46a:	a906      	add	r1, sp, #24
 801c46c:	4628      	mov	r0, r5
 801c46e:	f7fe fb83 	bl	801ab78 <f_read>
 801c472:	9b07      	ldr	r3, [sp, #28]
 801c474:	2b04      	cmp	r3, #4
 801c476:	d1d0      	bne.n	801c41a <GetImageInfoBMP.part.0+0x1e>
      && (header_type != 52) // BITMAPV2INFOHEADER
 801c478:	9a06      	ldr	r2, [sp, #24]
 801c47a:	f022 0310 	bic.w	r3, r2, #16
      && (header_type != 124)) {
 801c47e:	2b6c      	cmp	r3, #108	; 0x6c
 801c480:	bf18      	it	ne
 801c482:	2b28      	cmpne	r3, #40	; 0x28
 801c484:	d001      	beq.n	801c48a <GetImageInfoBMP.part.0+0x8e>
 801c486:	2a34      	cmp	r2, #52	; 0x34
 801c488:	d12f      	bne.n	801c4ea <GetImageInfoBMP.part.0+0xee>
  F_READ_SAFE(File, &rs->bmp_w, sizeof(rs->bmp_w));
 801c48a:	2204      	movs	r2, #4
 801c48c:	ab07      	add	r3, sp, #28
 801c48e:	9910      	ldr	r1, [sp, #64]	; 0x40
 801c490:	4628      	mov	r0, r5
 801c492:	f7fe fb71 	bl	801ab78 <f_read>
 801c496:	9a07      	ldr	r2, [sp, #28]
 801c498:	2a04      	cmp	r2, #4
 801c49a:	d1be      	bne.n	801c41a <GetImageInfoBMP.part.0+0x1e>
  F_READ_SAFE(File, &rs->bmp_h, sizeof(rs->bmp_w));
 801c49c:	9910      	ldr	r1, [sp, #64]	; 0x40
 801c49e:	ab07      	add	r3, sp, #28
 801c4a0:	4628      	mov	r0, r5
 801c4a2:	3104      	adds	r1, #4
 801c4a4:	f7fe fb68 	bl	801ab78 <f_read>
 801c4a8:	9b07      	ldr	r3, [sp, #28]
 801c4aa:	2b04      	cmp	r3, #4
 801c4ac:	d1b5      	bne.n	801c41a <GetImageInfoBMP.part.0+0x1e>
  if ((rs->bmp_w == 0) || (rs->bmp_h == 0)){
 801c4ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c4b0:	6818      	ldr	r0, [r3, #0]
 801c4b2:	b1d0      	cbz	r0, 801c4ea <GetImageInfoBMP.part.0+0xee>
 801c4b4:	685a      	ldr	r2, [r3, #4]
 801c4b6:	b1c2      	cbz	r2, 801c4ea <GetImageInfoBMP.part.0+0xee>
  *width = abs(rs->bmp_w);
 801c4b8:	2800      	cmp	r0, #0
  *height = abs(rs->bmp_h);
 801c4ba:	9c10      	ldr	r4, [sp, #64]	; 0x40
  F_READ_SAFE(File, &tmp_16, sizeof(tmp_16));
 801c4bc:	f04f 0202 	mov.w	r2, #2
 801c4c0:	ab07      	add	r3, sp, #28
  *width = abs(rs->bmp_w);
 801c4c2:	bfb8      	it	lt
 801c4c4:	4240      	neglt	r0, r0
  F_READ_SAFE(File, &tmp_16, sizeof(tmp_16));
 801c4c6:	f10d 0106 	add.w	r1, sp, #6
  *width = abs(rs->bmp_w);
 801c4ca:	6030      	str	r0, [r6, #0]
  F_READ_SAFE(File, &tmp_16, sizeof(tmp_16));
 801c4cc:	4628      	mov	r0, r5
  *height = abs(rs->bmp_h);
 801c4ce:	6864      	ldr	r4, [r4, #4]
 801c4d0:	2c00      	cmp	r4, #0
 801c4d2:	bfb8      	it	lt
 801c4d4:	4264      	neglt	r4, r4
 801c4d6:	603c      	str	r4, [r7, #0]
  F_READ_SAFE(File, &tmp_16, sizeof(tmp_16));
 801c4d8:	f7fe fb4e 	bl	801ab78 <f_read>
 801c4dc:	9a07      	ldr	r2, [sp, #28]
 801c4de:	2a02      	cmp	r2, #2
 801c4e0:	d19b      	bne.n	801c41a <GetImageInfoBMP.part.0+0x1e>
  if (tmp_16 != 1){
 801c4e2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801c4e6:	2b01      	cmp	r3, #1
 801c4e8:	d001      	beq.n	801c4ee <GetImageInfoBMP.part.0+0xf2>
    return STM32FS_ERROR_FILE_NOT_SUPPORTED;
 801c4ea:	2005      	movs	r0, #5
 801c4ec:	e796      	b.n	801c41c <GetImageInfoBMP.part.0+0x20>
  F_READ_SAFE(File, &rs->bmp_bpp, sizeof(rs->bmp_bpp));
 801c4ee:	9910      	ldr	r1, [sp, #64]	; 0x40
 801c4f0:	ab07      	add	r3, sp, #28
 801c4f2:	4628      	mov	r0, r5
 801c4f4:	3108      	adds	r1, #8
 801c4f6:	f7fe fb3f 	bl	801ab78 <f_read>
 801c4fa:	9b07      	ldr	r3, [sp, #28]
 801c4fc:	2b02      	cmp	r3, #2
 801c4fe:	d18c      	bne.n	801c41a <GetImageInfoBMP.part.0+0x1e>
  if ((rs->bmp_bpp != 8) && (rs->bmp_bpp != 16) && (rs->bmp_bpp != 24)){
 801c500:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c502:	891b      	ldrh	r3, [r3, #8]
 801c504:	2b08      	cmp	r3, #8
 801c506:	d060      	beq.n	801c5ca <GetImageInfoBMP.part.0+0x1ce>
 801c508:	2b10      	cmp	r3, #16
 801c50a:	d05e      	beq.n	801c5ca <GetImageInfoBMP.part.0+0x1ce>
 801c50c:	2b18      	cmp	r3, #24
 801c50e:	d1ec      	bne.n	801c4ea <GetImageInfoBMP.part.0+0xee>
  *bpp = (rs->bmp_bpp == 8)  ? 1 :
 801c510:	2303      	movs	r3, #3
  F_READ_SAFE(File, &rs->bmp_fmt, sizeof(rs->bmp_fmt));
 801c512:	9910      	ldr	r1, [sp, #64]	; 0x40
 801c514:	2204      	movs	r2, #4
  *bpp = (rs->bmp_bpp == 8)  ? 1 :
 801c516:	f8c8 3000 	str.w	r3, [r8]
  F_READ_SAFE(File, &rs->bmp_fmt, sizeof(rs->bmp_fmt));
 801c51a:	4628      	mov	r0, r5
 801c51c:	ab07      	add	r3, sp, #28
 801c51e:	310c      	adds	r1, #12
 801c520:	f7fe fb2a 	bl	801ab78 <f_read>
 801c524:	9b07      	ldr	r3, [sp, #28]
 801c526:	2b04      	cmp	r3, #4
 801c528:	f47f af77 	bne.w	801c41a <GetImageInfoBMP.part.0+0x1e>
  if ((rs->bmp_fmt != 0) && (rs->bmp_fmt != 3)){
 801c52c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c52e:	68db      	ldr	r3, [r3, #12]
 801c530:	b10b      	cbz	r3, 801c536 <GetImageInfoBMP.part.0+0x13a>
 801c532:	2b03      	cmp	r3, #3
 801c534:	d1d9      	bne.n	801c4ea <GetImageInfoBMP.part.0+0xee>
  F_READ_SAFE(File, &tmp_32, sizeof(tmp_32));
 801c536:	2204      	movs	r2, #4
 801c538:	ab07      	add	r3, sp, #28
 801c53a:	4628      	mov	r0, r5
 801c53c:	a903      	add	r1, sp, #12
 801c53e:	f7fe fb1b 	bl	801ab78 <f_read>
 801c542:	9a07      	ldr	r2, [sp, #28]
 801c544:	2a04      	cmp	r2, #4
 801c546:	f47f af68 	bne.w	801c41a <GetImageInfoBMP.part.0+0x1e>
  if (tmp_32 != data_size){
 801c54a:	9b03      	ldr	r3, [sp, #12]
 801c54c:	4599      	cmp	r9, r3
 801c54e:	d1cc      	bne.n	801c4ea <GetImageInfoBMP.part.0+0xee>
  F_READ_SAFE(File, &ignore_32, sizeof(ignore_32));
 801c550:	ab07      	add	r3, sp, #28
 801c552:	4628      	mov	r0, r5
 801c554:	a902      	add	r1, sp, #8
 801c556:	f7fe fb0f 	bl	801ab78 <f_read>
 801c55a:	9a07      	ldr	r2, [sp, #28]
 801c55c:	2a04      	cmp	r2, #4
 801c55e:	f47f af5c 	bne.w	801c41a <GetImageInfoBMP.part.0+0x1e>
  F_READ_SAFE(File, &ignore_32, sizeof(ignore_32));
 801c562:	ab07      	add	r3, sp, #28
 801c564:	a902      	add	r1, sp, #8
 801c566:	4628      	mov	r0, r5
 801c568:	f7fe fb06 	bl	801ab78 <f_read>
 801c56c:	9a07      	ldr	r2, [sp, #28]
 801c56e:	2a04      	cmp	r2, #4
 801c570:	f47f af53 	bne.w	801c41a <GetImageInfoBMP.part.0+0x1e>
  F_READ_SAFE(File, &ignore_32, sizeof(ignore_32));
 801c574:	ab07      	add	r3, sp, #28
 801c576:	a902      	add	r1, sp, #8
 801c578:	4628      	mov	r0, r5
 801c57a:	f7fe fafd 	bl	801ab78 <f_read>
 801c57e:	9a07      	ldr	r2, [sp, #28]
 801c580:	2a04      	cmp	r2, #4
 801c582:	f47f af4a 	bne.w	801c41a <GetImageInfoBMP.part.0+0x1e>
  F_READ_SAFE(File, &ignore_32, sizeof(ignore_32));
 801c586:	ab07      	add	r3, sp, #28
 801c588:	a902      	add	r1, sp, #8
 801c58a:	4628      	mov	r0, r5
 801c58c:	f7fe faf4 	bl	801ab78 <f_read>
 801c590:	9a07      	ldr	r2, [sp, #28]
 801c592:	2a04      	cmp	r2, #4
 801c594:	f47f af41 	bne.w	801c41a <GetImageInfoBMP.part.0+0x1e>
  if (rs->bmp_bpp == 8) {
 801c598:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c59a:	8919      	ldrh	r1, [r3, #8]
 801c59c:	2908      	cmp	r1, #8
 801c59e:	f000 80de 	beq.w	801c75e <GetImageInfoBMP.part.0+0x362>
  } else if (rs->bmp_bpp == 16) {
 801c5a2:	2910      	cmp	r1, #16
 801c5a4:	f000 8089 	beq.w	801c6ba <GetImageInfoBMP.part.0+0x2be>
  } else if (rs->bmp_bpp == 24) {
 801c5a8:	2918      	cmp	r1, #24
 801c5aa:	d015      	beq.n	801c5d8 <GetImageInfoBMP.part.0+0x1dc>
  rs->bmp_row_bytes = ((( (*width) * rs->bmp_bpp) + 31) / 32) * 4;
 801c5ac:	6833      	ldr	r3, [r6, #0]
 801c5ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c5b0:	fb03 f301 	mul.w	r3, r3, r1
 801c5b4:	331f      	adds	r3, #31
 801c5b6:	095b      	lsrs	r3, r3, #5
 801c5b8:	009b      	lsls	r3, r3, #2
 801c5ba:	6113      	str	r3, [r2, #16]
  if (data_size != (rs->bmp_row_bytes * (*height))) {
 801c5bc:	683a      	ldr	r2, [r7, #0]
 801c5be:	fb02 f303 	mul.w	r3, r2, r3
 801c5c2:	4599      	cmp	r9, r3
 801c5c4:	d191      	bne.n	801c4ea <GetImageInfoBMP.part.0+0xee>
  return STM32FS_ERROR_NONE;
 801c5c6:	2000      	movs	r0, #0
 801c5c8:	e728      	b.n	801c41c <GetImageInfoBMP.part.0+0x20>
  *bpp = (rs->bmp_bpp == 8)  ? 1 :
 801c5ca:	2b08      	cmp	r3, #8
 801c5cc:	d03d      	beq.n	801c64a <GetImageInfoBMP.part.0+0x24e>
 801c5ce:	2b10      	cmp	r3, #16
 801c5d0:	bf14      	ite	ne
 801c5d2:	2303      	movne	r3, #3
 801c5d4:	2302      	moveq	r3, #2
 801c5d6:	e79c      	b.n	801c512 <GetImageInfoBMP.part.0+0x116>
    if (rs->bmp_fmt == 3) {
 801c5d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c5da:	68db      	ldr	r3, [r3, #12]
 801c5dc:	2b03      	cmp	r3, #3
 801c5de:	d036      	beq.n	801c64e <GetImageInfoBMP.part.0+0x252>
    } else if (header_type >= 52) { // Skip past the remaining BITMAPV2INFOHEADER bytes.
 801c5e0:	9b06      	ldr	r3, [sp, #24]
 801c5e2:	2b33      	cmp	r3, #51	; 0x33
 801c5e4:	d90d      	bls.n	801c602 <GetImageInfoBMP.part.0+0x206>
 801c5e6:	2403      	movs	r4, #3
      for (int i = 0; i < 3; i++) F_READ_SAFE(File, &ignore_32, sizeof(ignore_32));
 801c5e8:	ab07      	add	r3, sp, #28
 801c5ea:	2204      	movs	r2, #4
 801c5ec:	a902      	add	r1, sp, #8
 801c5ee:	4628      	mov	r0, r5
 801c5f0:	f7fe fac2 	bl	801ab78 <f_read>
 801c5f4:	9b07      	ldr	r3, [sp, #28]
 801c5f6:	2b04      	cmp	r3, #4
 801c5f8:	f47f af0f 	bne.w	801c41a <GetImageInfoBMP.part.0+0x1e>
 801c5fc:	3c01      	subs	r4, #1
 801c5fe:	d1f3      	bne.n	801c5e8 <GetImageInfoBMP.part.0+0x1ec>
 801c600:	9b06      	ldr	r3, [sp, #24]
    if (header_type >= 56) { // Skip past the remaining BITMAPV3INFOHEADER bytes.
 801c602:	2b37      	cmp	r3, #55	; 0x37
 801c604:	d84d      	bhi.n	801c6a2 <GetImageInfoBMP.part.0+0x2a6>
    if (header_type >= 108) { // Skip past the remaining BITMAPV4HEADER bytes.
 801c606:	2b6b      	cmp	r3, #107	; 0x6b
 801c608:	d90d      	bls.n	801c626 <GetImageInfoBMP.part.0+0x22a>
 801c60a:	240d      	movs	r4, #13
      for (int i = 0; i < 13; i++) F_READ_SAFE(File, &ignore_32, sizeof(ignore_32));
 801c60c:	ab07      	add	r3, sp, #28
 801c60e:	2204      	movs	r2, #4
 801c610:	a902      	add	r1, sp, #8
 801c612:	4628      	mov	r0, r5
 801c614:	f7fe fab0 	bl	801ab78 <f_read>
 801c618:	9b07      	ldr	r3, [sp, #28]
 801c61a:	2b04      	cmp	r3, #4
 801c61c:	f47f aefd 	bne.w	801c41a <GetImageInfoBMP.part.0+0x1e>
 801c620:	3c01      	subs	r4, #1
 801c622:	d1f3      	bne.n	801c60c <GetImageInfoBMP.part.0+0x210>
 801c624:	9b06      	ldr	r3, [sp, #24]
    if (header_type >= 124) { // Skip past the remaining BITMAPV5HEADER bytes.
 801c626:	2b7b      	cmp	r3, #123	; 0x7b
 801c628:	d90c      	bls.n	801c644 <GetImageInfoBMP.part.0+0x248>
 801c62a:	2404      	movs	r4, #4
      for (int i = 0; i < 4; i++) F_READ_SAFE(File, &ignore_32, sizeof(ignore_32));
 801c62c:	ab07      	add	r3, sp, #28
 801c62e:	2204      	movs	r2, #4
 801c630:	a902      	add	r1, sp, #8
 801c632:	4628      	mov	r0, r5
 801c634:	f7fe faa0 	bl	801ab78 <f_read>
 801c638:	9b07      	ldr	r3, [sp, #28]
 801c63a:	2b04      	cmp	r3, #4
 801c63c:	f47f aeed 	bne.w	801c41a <GetImageInfoBMP.part.0+0x1e>
 801c640:	3c01      	subs	r4, #1
 801c642:	d1f3      	bne.n	801c62c <GetImageInfoBMP.part.0+0x230>
 801c644:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c646:	8919      	ldrh	r1, [r3, #8]
 801c648:	e7b0      	b.n	801c5ac <GetImageInfoBMP.part.0+0x1b0>
  *bpp = (rs->bmp_bpp == 8)  ? 1 :
 801c64a:	2301      	movs	r3, #1
 801c64c:	e761      	b.n	801c512 <GetImageInfoBMP.part.0+0x116>
      F_READ_SAFE(File, &tmp_32, sizeof(tmp_32));
 801c64e:	2204      	movs	r2, #4
 801c650:	ab07      	add	r3, sp, #28
 801c652:	a903      	add	r1, sp, #12
 801c654:	4628      	mov	r0, r5
 801c656:	f7fe fa8f 	bl	801ab78 <f_read>
 801c65a:	9a07      	ldr	r2, [sp, #28]
 801c65c:	2a04      	cmp	r2, #4
 801c65e:	f47f aedc 	bne.w	801c41a <GetImageInfoBMP.part.0+0x1e>
      if( tmp_32 != expect ) {
 801c662:	9b03      	ldr	r3, [sp, #12]
 801c664:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 801c668:	f47f af3f 	bne.w	801c4ea <GetImageInfoBMP.part.0+0xee>
      F_READ_SAFE(File, &tmp_32, sizeof(tmp_32));
 801c66c:	ab07      	add	r3, sp, #28
 801c66e:	a903      	add	r1, sp, #12
 801c670:	4628      	mov	r0, r5
 801c672:	f7fe fa81 	bl	801ab78 <f_read>
 801c676:	9a07      	ldr	r2, [sp, #28]
 801c678:	2a04      	cmp	r2, #4
 801c67a:	f47f aece 	bne.w	801c41a <GetImageInfoBMP.part.0+0x1e>
      if( tmp_32 != expect ) {
 801c67e:	9b03      	ldr	r3, [sp, #12]
 801c680:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 801c684:	f47f af31 	bne.w	801c4ea <GetImageInfoBMP.part.0+0xee>
      F_READ_SAFE(File, &tmp_32, sizeof(tmp_32));
 801c688:	ab07      	add	r3, sp, #28
 801c68a:	a903      	add	r1, sp, #12
 801c68c:	4628      	mov	r0, r5
 801c68e:	f7fe fa73 	bl	801ab78 <f_read>
 801c692:	9b07      	ldr	r3, [sp, #28]
 801c694:	2b04      	cmp	r3, #4
 801c696:	f47f aec0 	bne.w	801c41a <GetImageInfoBMP.part.0+0x1e>
      if( tmp_32 != expect ) {
 801c69a:	9b03      	ldr	r3, [sp, #12]
 801c69c:	2bff      	cmp	r3, #255	; 0xff
 801c69e:	d0af      	beq.n	801c600 <GetImageInfoBMP.part.0+0x204>
 801c6a0:	e723      	b.n	801c4ea <GetImageInfoBMP.part.0+0xee>
      for (int i = 0; i < 1; i++) F_READ_SAFE(File, &ignore_32, sizeof(ignore_32));
 801c6a2:	ab07      	add	r3, sp, #28
 801c6a4:	2204      	movs	r2, #4
 801c6a6:	a902      	add	r1, sp, #8
 801c6a8:	4628      	mov	r0, r5
 801c6aa:	f7fe fa65 	bl	801ab78 <f_read>
 801c6ae:	9b07      	ldr	r3, [sp, #28]
 801c6b0:	2b04      	cmp	r3, #4
 801c6b2:	f47f aeb2 	bne.w	801c41a <GetImageInfoBMP.part.0+0x1e>
 801c6b6:	9b06      	ldr	r3, [sp, #24]
 801c6b8:	e7a5      	b.n	801c606 <GetImageInfoBMP.part.0+0x20a>
    if (rs->bmp_fmt != 3) return STM32FS_ERROR_FILE_NOT_SUPPORTED;
 801c6ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c6bc:	68db      	ldr	r3, [r3, #12]
 801c6be:	2b03      	cmp	r3, #3
 801c6c0:	f47f af13 	bne.w	801c4ea <GetImageInfoBMP.part.0+0xee>
    F_READ_SAFE(File, &tmp_32, sizeof(tmp_32));
 801c6c4:	ab07      	add	r3, sp, #28
 801c6c6:	a903      	add	r1, sp, #12
 801c6c8:	4628      	mov	r0, r5
 801c6ca:	f7fe fa55 	bl	801ab78 <f_read>
 801c6ce:	9b07      	ldr	r3, [sp, #28]
 801c6d0:	2b04      	cmp	r3, #4
 801c6d2:	f47f aea2 	bne.w	801c41a <GetImageInfoBMP.part.0+0x1e>
    if( tmp_32 != expect ) {
 801c6d6:	9b03      	ldr	r3, [sp, #12]
 801c6d8:	f5b3 4f78 	cmp.w	r3, #63488	; 0xf800
 801c6dc:	f47f af05 	bne.w	801c4ea <GetImageInfoBMP.part.0+0xee>
    F_READ_SAFE(File, &tmp_32, sizeof(tmp_32));
 801c6e0:	2204      	movs	r2, #4
 801c6e2:	ab07      	add	r3, sp, #28
 801c6e4:	a903      	add	r1, sp, #12
 801c6e6:	4628      	mov	r0, r5
 801c6e8:	f7fe fa46 	bl	801ab78 <f_read>
 801c6ec:	9a07      	ldr	r2, [sp, #28]
 801c6ee:	2a04      	cmp	r2, #4
 801c6f0:	f47f ae93 	bne.w	801c41a <GetImageInfoBMP.part.0+0x1e>
    if( tmp_32 != expect ) {
 801c6f4:	9b03      	ldr	r3, [sp, #12]
 801c6f6:	f5b3 6ffc 	cmp.w	r3, #2016	; 0x7e0
 801c6fa:	f47f aef6 	bne.w	801c4ea <GetImageInfoBMP.part.0+0xee>
    F_READ_SAFE(File, &tmp_32, sizeof(tmp_32));
 801c6fe:	a903      	add	r1, sp, #12
 801c700:	ab07      	add	r3, sp, #28
 801c702:	4628      	mov	r0, r5
 801c704:	f7fe fa38 	bl	801ab78 <f_read>
 801c708:	9a07      	ldr	r2, [sp, #28]
 801c70a:	2a04      	cmp	r2, #4
 801c70c:	f47f ae85 	bne.w	801c41a <GetImageInfoBMP.part.0+0x1e>
    if( tmp_32 != expect ) {
 801c710:	9b03      	ldr	r3, [sp, #12]
 801c712:	2b1f      	cmp	r3, #31
 801c714:	f47f aee9 	bne.w	801c4ea <GetImageInfoBMP.part.0+0xee>
    if (header_type >= 56) { // Skip past the remaining BITMAPV3INFOHEADER bytes.
 801c718:	9b06      	ldr	r3, [sp, #24]
 801c71a:	2b37      	cmp	r3, #55	; 0x37
 801c71c:	d870      	bhi.n	801c800 <GetImageInfoBMP.part.0+0x404>
    if (header_type >= 108) { // Skip past the remaining BITMAPV4HEADER bytes.
 801c71e:	2b6b      	cmp	r3, #107	; 0x6b
 801c720:	d90d      	bls.n	801c73e <GetImageInfoBMP.part.0+0x342>
 801c722:	240d      	movs	r4, #13
      for (int i = 0; i < 13; i++) F_READ_SAFE(File, &ignore_32, sizeof(ignore_32));
 801c724:	ab07      	add	r3, sp, #28
 801c726:	2204      	movs	r2, #4
 801c728:	a902      	add	r1, sp, #8
 801c72a:	4628      	mov	r0, r5
 801c72c:	f7fe fa24 	bl	801ab78 <f_read>
 801c730:	9b07      	ldr	r3, [sp, #28]
 801c732:	2b04      	cmp	r3, #4
 801c734:	f47f ae71 	bne.w	801c41a <GetImageInfoBMP.part.0+0x1e>
 801c738:	3c01      	subs	r4, #1
 801c73a:	d1f3      	bne.n	801c724 <GetImageInfoBMP.part.0+0x328>
 801c73c:	9b06      	ldr	r3, [sp, #24]
    if (header_type >= 124) { // Skip past the remaining BITMAPV5HEADER bytes.
 801c73e:	2b7b      	cmp	r3, #123	; 0x7b
 801c740:	d980      	bls.n	801c644 <GetImageInfoBMP.part.0+0x248>
 801c742:	2404      	movs	r4, #4
      for (int i = 0; i < 4; i++) F_READ_SAFE(File, &ignore_32, sizeof(ignore_32));
 801c744:	ab07      	add	r3, sp, #28
 801c746:	2204      	movs	r2, #4
 801c748:	a902      	add	r1, sp, #8
 801c74a:	4628      	mov	r0, r5
 801c74c:	f7fe fa14 	bl	801ab78 <f_read>
 801c750:	9b07      	ldr	r3, [sp, #28]
 801c752:	2b04      	cmp	r3, #4
 801c754:	f47f ae61 	bne.w	801c41a <GetImageInfoBMP.part.0+0x1e>
 801c758:	3c01      	subs	r4, #1
 801c75a:	d1f3      	bne.n	801c744 <GetImageInfoBMP.part.0+0x348>
 801c75c:	e772      	b.n	801c644 <GetImageInfoBMP.part.0+0x248>
    if (rs->bmp_fmt != 0) return STM32FS_ERROR_FILE_NOT_SUPPORTED;
 801c75e:	68db      	ldr	r3, [r3, #12]
 801c760:	2b00      	cmp	r3, #0
 801c762:	f47f aec2 	bne.w	801c4ea <GetImageInfoBMP.part.0+0xee>
    if (header_type >= 52) { // Skip past the remaining BITMAPV2INFOHEADER bytes.
 801c766:	9b06      	ldr	r3, [sp, #24]
 801c768:	2b33      	cmp	r3, #51	; 0x33
 801c76a:	d90d      	bls.n	801c788 <GetImageInfoBMP.part.0+0x38c>
 801c76c:	2403      	movs	r4, #3
      for (int i = 0; i < 3; i++) F_READ_SAFE(File, &ignore_32, sizeof(ignore_32));
 801c76e:	ab07      	add	r3, sp, #28
 801c770:	2204      	movs	r2, #4
 801c772:	a902      	add	r1, sp, #8
 801c774:	4628      	mov	r0, r5
 801c776:	f7fe f9ff 	bl	801ab78 <f_read>
 801c77a:	9b07      	ldr	r3, [sp, #28]
 801c77c:	2b04      	cmp	r3, #4
 801c77e:	f47f ae4c 	bne.w	801c41a <GetImageInfoBMP.part.0+0x1e>
 801c782:	3c01      	subs	r4, #1
 801c784:	d1f3      	bne.n	801c76e <GetImageInfoBMP.part.0+0x372>
 801c786:	9b06      	ldr	r3, [sp, #24]
    if (header_type >= 56) { // Skip past the remaining BITMAPV3INFOHEADER bytes.
 801c788:	2b37      	cmp	r3, #55	; 0x37
 801c78a:	d844      	bhi.n	801c816 <GetImageInfoBMP.part.0+0x41a>
    if (header_type >= 108) { // Skip past the remaining BITMAPV4HEADER bytes.
 801c78c:	2b6b      	cmp	r3, #107	; 0x6b
 801c78e:	d90d      	bls.n	801c7ac <GetImageInfoBMP.part.0+0x3b0>
 801c790:	240d      	movs	r4, #13
      for (int i = 0; i < 13; i++) F_READ_SAFE(File, &ignore_32, sizeof(ignore_32));
 801c792:	ab07      	add	r3, sp, #28
 801c794:	2204      	movs	r2, #4
 801c796:	a902      	add	r1, sp, #8
 801c798:	4628      	mov	r0, r5
 801c79a:	f7fe f9ed 	bl	801ab78 <f_read>
 801c79e:	9b07      	ldr	r3, [sp, #28]
 801c7a0:	2b04      	cmp	r3, #4
 801c7a2:	f47f ae3a 	bne.w	801c41a <GetImageInfoBMP.part.0+0x1e>
 801c7a6:	3c01      	subs	r4, #1
 801c7a8:	d1f3      	bne.n	801c792 <GetImageInfoBMP.part.0+0x396>
 801c7aa:	9b06      	ldr	r3, [sp, #24]
    if (header_type >= 124) { // Skip past the remaining BITMAPV5HEADER bytes.
 801c7ac:	2b7b      	cmp	r3, #123	; 0x7b
 801c7ae:	d90c      	bls.n	801c7ca <GetImageInfoBMP.part.0+0x3ce>
 801c7b0:	2404      	movs	r4, #4
      for (int i = 0; i < 4; i++) F_READ_SAFE(File, &ignore_32, sizeof(ignore_32));
 801c7b2:	ab07      	add	r3, sp, #28
 801c7b4:	2204      	movs	r2, #4
 801c7b6:	a902      	add	r1, sp, #8
 801c7b8:	4628      	mov	r0, r5
 801c7ba:	f7fe f9dd 	bl	801ab78 <f_read>
 801c7be:	9b07      	ldr	r3, [sp, #28]
 801c7c0:	2b04      	cmp	r3, #4
 801c7c2:	f47f ae2a 	bne.w	801c41a <GetImageInfoBMP.part.0+0x1e>
 801c7c6:	3c01      	subs	r4, #1
 801c7c8:	d1f3      	bne.n	801c7b2 <GetImageInfoBMP.part.0+0x3b6>
    if (header_type >= 124) { // Skip past the remaining BITMAPV5HEADER bytes.
 801c7ca:	2400      	movs	r4, #0
      F_READ_SAFE(File, &tmp_32, sizeof(tmp_32));
 801c7cc:	ab07      	add	r3, sp, #28
 801c7ce:	2204      	movs	r2, #4
 801c7d0:	a903      	add	r1, sp, #12
 801c7d2:	4628      	mov	r0, r5
      expect = ((i) << 16) | ((i) << 8) | i;
 801c7d4:	ea4f 4804 	mov.w	r8, r4, lsl #16
      F_READ_SAFE(File, &tmp_32, sizeof(tmp_32));
 801c7d8:	f7fe f9ce 	bl	801ab78 <f_read>
 801c7dc:	9b07      	ldr	r3, [sp, #28]
      expect = ((i) << 16) | ((i) << 8) | i;
 801c7de:	ea48 2804 	orr.w	r8, r8, r4, lsl #8
      F_READ_SAFE(File, &tmp_32, sizeof(tmp_32));
 801c7e2:	2b04      	cmp	r3, #4
      expect = ((i) << 16) | ((i) << 8) | i;
 801c7e4:	ea48 0804 	orr.w	r8, r8, r4
    for (int i = 0; i < 256; i++) {
 801c7e8:	f104 0401 	add.w	r4, r4, #1
      F_READ_SAFE(File, &tmp_32, sizeof(tmp_32));
 801c7ec:	f47f ae15 	bne.w	801c41a <GetImageInfoBMP.part.0+0x1e>
      if( tmp_32 != expect ) {
 801c7f0:	9b03      	ldr	r3, [sp, #12]
 801c7f2:	4598      	cmp	r8, r3
 801c7f4:	f47f ae79 	bne.w	801c4ea <GetImageInfoBMP.part.0+0xee>
    for (int i = 0; i < 256; i++) {
 801c7f8:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 801c7fc:	d1e6      	bne.n	801c7cc <GetImageInfoBMP.part.0+0x3d0>
 801c7fe:	e721      	b.n	801c644 <GetImageInfoBMP.part.0+0x248>
      for (int i = 0; i < 1; i++) F_READ_SAFE(File, &ignore_32, sizeof(ignore_32));
 801c800:	ab07      	add	r3, sp, #28
 801c802:	a902      	add	r1, sp, #8
 801c804:	4628      	mov	r0, r5
 801c806:	f7fe f9b7 	bl	801ab78 <f_read>
 801c80a:	9b07      	ldr	r3, [sp, #28]
 801c80c:	2b04      	cmp	r3, #4
 801c80e:	f47f ae04 	bne.w	801c41a <GetImageInfoBMP.part.0+0x1e>
 801c812:	9b06      	ldr	r3, [sp, #24]
 801c814:	e783      	b.n	801c71e <GetImageInfoBMP.part.0+0x322>
      for (int i = 0; i < 1; i++) F_READ_SAFE(File, &ignore_32, sizeof(ignore_32));
 801c816:	ab07      	add	r3, sp, #28
 801c818:	2204      	movs	r2, #4
 801c81a:	a902      	add	r1, sp, #8
 801c81c:	4628      	mov	r0, r5
 801c81e:	f7fe f9ab 	bl	801ab78 <f_read>
 801c822:	9b07      	ldr	r3, [sp, #28]
 801c824:	2b04      	cmp	r3, #4
 801c826:	f47f adf8 	bne.w	801c41a <GetImageInfoBMP.part.0+0x1e>
 801c82a:	9b06      	ldr	r3, [sp, #24]
 801c82c:	e7ae      	b.n	801c78c <GetImageInfoBMP.part.0+0x390>
 801c82e:	bf00      	nop

0801c830 <STM32Fs_Init>:
{
 801c830:	b510      	push	{r4, lr}
  if (FATFS_LinkDriver(&SD_Driver, SDPath) != 0)
 801c832:	4908      	ldr	r1, [pc, #32]	; (801c854 <STM32Fs_Init+0x24>)
 801c834:	4808      	ldr	r0, [pc, #32]	; (801c858 <STM32Fs_Init+0x28>)
 801c836:	f7ff fb73 	bl	801bf20 <FATFS_LinkDriver>
  if (f_mount(&SDFatFS, (TCHAR const *)SDPath, 0) != FR_OK)
 801c83a:	2200      	movs	r2, #0
  if (FATFS_LinkDriver(&SD_Driver, SDPath) != 0)
 801c83c:	4604      	mov	r4, r0
  if (f_mount(&SDFatFS, (TCHAR const *)SDPath, 0) != FR_OK)
 801c83e:	4905      	ldr	r1, [pc, #20]	; (801c854 <STM32Fs_Init+0x24>)
 801c840:	4806      	ldr	r0, [pc, #24]	; (801c85c <STM32Fs_Init+0x2c>)
 801c842:	f7fd febf 	bl	801a5c4 <f_mount>
 801c846:	b918      	cbnz	r0, 801c850 <STM32Fs_Init+0x20>
  stm32fs_err_t ret = STM32FS_ERROR_NONE;
 801c848:	1c20      	adds	r0, r4, #0
 801c84a:	bf18      	it	ne
 801c84c:	2001      	movne	r0, #1
}
 801c84e:	bd10      	pop	{r4, pc}
    return STM32FS_ERROR_MOUNT_FS_FAIL;
 801c850:	2002      	movs	r0, #2
}
 801c852:	bd10      	pop	{r4, pc}
 801c854:	2400a4b8 	.word	0x2400a4b8
 801c858:	080bf260 	.word	0x080bf260
 801c85c:	2400a6ec 	.word	0x2400a6ec

0801c860 <STM32Fs_GetNumberFiles>:
{
 801c860:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c864:	b08f      	sub	sp, #60	; 0x3c
 801c866:	4688      	mov	r8, r1
  res = f_opendir(&dir, path); /* Open the directory */
 801c868:	4601      	mov	r1, r0
{
 801c86a:	4691      	mov	r9, r2
  res = f_opendir(&dir, path); /* Open the directory */
 801c86c:	a801      	add	r0, sp, #4
 801c86e:	f7fe fe17 	bl	801b4a0 <f_opendir>
  if (res == FR_OK)
 801c872:	bb58      	cbnz	r0, 801c8cc <STM32Fs_GetNumberFiles+0x6c>
 801c874:	4c17      	ldr	r4, [pc, #92]	; (801c8d4 <STM32Fs_GetNumberFiles+0x74>)
  uint32_t file_counter = 0;
 801c876:	4605      	mov	r5, r0
  uint32_t dir_counter = 0;
 801c878:	4606      	mov	r6, r0
      res = f_readdir(&dir, &fno);                  /* Read a directory item */
 801c87a:	4627      	mov	r7, r4
 801c87c:	e006      	b.n	801c88c <STM32Fs_GetNumberFiles+0x2c>
      if (res != FR_OK || fno.fname[0] == 0) break; /* Break on error or end of dir */
 801c87e:	7da3      	ldrb	r3, [r4, #22]
 801c880:	b153      	cbz	r3, 801c898 <STM32Fs_GetNumberFiles+0x38>
      if (fno.fattrib & AM_DIR)
 801c882:	7a23      	ldrb	r3, [r4, #8]
 801c884:	06db      	lsls	r3, r3, #27
        dir_counter++;
 801c886:	bf4c      	ite	mi
 801c888:	3601      	addmi	r6, #1
        file_counter++;
 801c88a:	3501      	addpl	r5, #1
      res = f_readdir(&dir, &fno);                  /* Read a directory item */
 801c88c:	4639      	mov	r1, r7
 801c88e:	a801      	add	r0, sp, #4
 801c890:	f7fe ff0e 	bl	801b6b0 <f_readdir>
      if (res != FR_OK || fno.fname[0] == 0) break; /* Break on error or end of dir */
 801c894:	2800      	cmp	r0, #0
 801c896:	d0f2      	beq.n	801c87e <STM32Fs_GetNumberFiles+0x1e>
    f_closedir(&dir);
 801c898:	a801      	add	r0, sp, #4
 801c89a:	f7fe fed7 	bl	801b64c <f_closedir>
    *nbr += dir_counter;
 801c89e:	f019 0f02 	tst.w	r9, #2
  *nbr = 0;
 801c8a2:	f04f 0000 	mov.w	r0, #0
    *nbr += dir_counter;
 801c8a6:	bf08      	it	eq
 801c8a8:	4606      	moveq	r6, r0
  if (mode & STM32FS_COUNT_FILES)
 801c8aa:	f019 0901 	ands.w	r9, r9, #1
  *nbr = 0;
 801c8ae:	f8c8 0000 	str.w	r0, [r8]
  if (mode & STM32FS_COUNT_FILES)
 801c8b2:	d005      	beq.n	801c8c0 <STM32Fs_GetNumberFiles+0x60>
    *nbr += file_counter;
 801c8b4:	4435      	add	r5, r6
 801c8b6:	f8c8 5000 	str.w	r5, [r8]
}
 801c8ba:	b00f      	add	sp, #60	; 0x3c
 801c8bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return STM32FS_ERROR_NONE;
 801c8c0:	4648      	mov	r0, r9
 801c8c2:	f8c8 6000 	str.w	r6, [r8]
}
 801c8c6:	b00f      	add	sp, #60	; 0x3c
 801c8c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return STM32FS_ERROR_DIR_NOT_FOUND;
 801c8cc:	2009      	movs	r0, #9
}
 801c8ce:	b00f      	add	sp, #60	; 0x3c
 801c8d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c8d4:	2400951c 	.word	0x2400951c

0801c8d8 <STM32Fs_OpenDir>:
{
 801c8d8:	b508      	push	{r3, lr}
 801c8da:	460b      	mov	r3, r1
  res = f_opendir(dir, path);
 801c8dc:	4601      	mov	r1, r0
 801c8de:	4618      	mov	r0, r3
 801c8e0:	f7fe fdde 	bl	801b4a0 <f_opendir>
  if (res != FR_OK)
 801c8e4:	2800      	cmp	r0, #0
}
 801c8e6:	bf14      	ite	ne
 801c8e8:	2009      	movne	r0, #9
 801c8ea:	2000      	moveq	r0, #0
 801c8ec:	bd08      	pop	{r3, pc}
 801c8ee:	bf00      	nop

0801c8f0 <STM32Fs_CreateDir>:
{
 801c8f0:	b508      	push	{r3, lr}
  res = f_mkdir(path);
 801c8f2:	f7fe ff1b 	bl	801b72c <f_mkdir>
  if ((res != FR_OK) && (res != FR_EXIST))
 801c8f6:	f010 00f7 	ands.w	r0, r0, #247	; 0xf7
 801c8fa:	d000      	beq.n	801c8fe <STM32Fs_CreateDir+0xe>
 801c8fc:	e7fe      	b.n	801c8fc <STM32Fs_CreateDir+0xc>
}
 801c8fe:	bd08      	pop	{r3, pc}

0801c900 <STM32Fs_GetNextDir>:
{
 801c900:	b510      	push	{r4, lr}
 801c902:	460c      	mov	r4, r1
  res = f_readdir(dir, fno);                                                  /* Read a directory item */
 801c904:	f7fe fed4 	bl	801b6b0 <f_readdir>
  if (res != FR_OK || fno->fname[0] == 0) return STM32FS_ERROR_DIR_NOT_FOUND; /* Break on error or end of dir */
 801c908:	b940      	cbnz	r0, 801c91c <STM32Fs_GetNextDir+0x1c>
 801c90a:	7da3      	ldrb	r3, [r4, #22]
 801c90c:	b133      	cbz	r3, 801c91c <STM32Fs_GetNextDir+0x1c>
  if (fno->fattrib & AM_DIR)
 801c90e:	7a23      	ldrb	r3, [r4, #8]
 801c910:	f013 0f10 	tst.w	r3, #16
    return STM32FS_ERROR_NONE;
 801c914:	bf0c      	ite	eq
 801c916:	2009      	moveq	r0, #9
 801c918:	2000      	movne	r0, #0
}
 801c91a:	bd10      	pop	{r4, pc}
  return STM32FS_ERROR_DIR_NOT_FOUND; /* Break on error or end of dir */
 801c91c:	2009      	movs	r0, #9
}
 801c91e:	bd10      	pop	{r4, pc}

0801c920 <STM32Fs_GetNextFile>:
{
 801c920:	b510      	push	{r4, lr}
 801c922:	460c      	mov	r4, r1
  res = f_readdir(dir, fno);                                                  /* Read a directory item */
 801c924:	f7fe fec4 	bl	801b6b0 <f_readdir>
  if (res != FR_OK || fno->fname[0] == 0) return STM32FS_ERROR_DIR_NOT_FOUND; /* Break on error or end of dir */
 801c928:	b940      	cbnz	r0, 801c93c <STM32Fs_GetNextFile+0x1c>
 801c92a:	7da3      	ldrb	r3, [r4, #22]
 801c92c:	b133      	cbz	r3, 801c93c <STM32Fs_GetNextFile+0x1c>
  if (!(fno->fattrib & AM_DIR))
 801c92e:	7a23      	ldrb	r3, [r4, #8]
 801c930:	f013 0f10 	tst.w	r3, #16
    return STM32FS_ERROR_NONE;
 801c934:	bf14      	ite	ne
 801c936:	2009      	movne	r0, #9
 801c938:	2000      	moveq	r0, #0
}
 801c93a:	bd10      	pop	{r4, pc}
  return STM32FS_ERROR_DIR_NOT_FOUND; /* Break on error or end of dir */
 801c93c:	2009      	movs	r0, #9
}
 801c93e:	bd10      	pop	{r4, pc}

0801c940 <STM32Fs_WriteRaw>:
{
 801c940:	b530      	push	{r4, r5, lr}
 801c942:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 801c946:	460d      	mov	r5, r1
 801c948:	4614      	mov	r4, r2
  if (f_open(&File, path, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 801c94a:	4601      	mov	r1, r0
 801c94c:	220a      	movs	r2, #10
 801c94e:	a802      	add	r0, sp, #8
 801c950:	f7fd fe98 	bl	801a684 <f_open>
 801c954:	b990      	cbnz	r0, 801c97c <STM32Fs_WriteRaw+0x3c>
  __ASM volatile ("cpsid i" : : : "memory");
 801c956:	b672      	cpsid	i
  f_write(&File, buffer, length, (void *)&byteswritten);
 801c958:	4629      	mov	r1, r5
 801c95a:	4622      	mov	r2, r4
 801c95c:	a802      	add	r0, sp, #8
 801c95e:	ab01      	add	r3, sp, #4
 801c960:	f7fe fada 	bl	801af18 <f_write>
  __ASM volatile ("cpsie i" : : : "memory");
 801c964:	b662      	cpsie	i
  f_close(&File);
 801c966:	a802      	add	r0, sp, #8
 801c968:	f7fe fcd0 	bl	801b30c <f_close>
  if (byteswritten != length)
 801c96c:	9801      	ldr	r0, [sp, #4]
  return STM32FS_ERROR_NONE;
 801c96e:	42a0      	cmp	r0, r4
 801c970:	bf14      	ite	ne
 801c972:	2008      	movne	r0, #8
 801c974:	2000      	moveq	r0, #0
}
 801c976:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 801c97a:	bd30      	pop	{r4, r5, pc}
    return STM32FS_ERROR_FOPEN_FAIL;
 801c97c:	2003      	movs	r0, #3
}
 801c97e:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 801c982:	bd30      	pop	{r4, r5, pc}

0801c984 <STM32Fs_WriteImageBMP>:
{
 801c984:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c988:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 801c98c:	460d      	mov	r5, r1
 801c98e:	4691      	mov	r9, r2
  if (f_open(&File, path, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 801c990:	4601      	mov	r1, r0
 801c992:	220a      	movs	r2, #10
 801c994:	a802      	add	r0, sp, #8
{
 801c996:	461f      	mov	r7, r3
  if (f_open(&File, path, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 801c998:	f7fd fe74 	bl	801a684 <f_open>
 801c99c:	2800      	cmp	r0, #0
 801c99e:	d138      	bne.n	801ca12 <STM32Fs_WriteImageBMP+0x8e>
  unsigned int pixelBytesPerRow = width * 3;
 801c9a0:	eb09 0649 	add.w	r6, r9, r9, lsl #1
  *sizeOfFileEntry = 54 + (pixelBytesPerRow + paddingBytesPerRow) * height;
 801c9a4:	4922      	ldr	r1, [pc, #136]	; (801ca30 <STM32Fs_WriteImageBMP+0xac>)
  *heightEntry = -height; /* '-' required so to avoid having to rotate the image when opening .bmp file*/
 801c9a6:	427b      	negs	r3, r7
 801c9a8:	4604      	mov	r4, r0
  unsigned int paddingBytesPerRow = (4 - (pixelBytesPerRow % 4)) % 4;
 801c9aa:	f1c6 0800 	rsb	r8, r6, #0
  *widthEntry = width;
 801c9ae:	f8c1 9012 	str.w	r9, [r1, #18]
  *heightEntry = -height; /* '-' required so to avoid having to rotate the image when opening .bmp file*/
 801c9b2:	f8c1 3016 	str.w	r3, [r1, #22]
  unsigned int paddingBytesPerRow = (4 - (pixelBytesPerRow % 4)) % 4;
 801c9b6:	f008 0803 	and.w	r8, r8, #3
  *sizeOfFileEntry = 54 + (pixelBytesPerRow + paddingBytesPerRow) * height;
 801c9ba:	eb06 0308 	add.w	r3, r6, r8
 801c9be:	fb07 f303 	mul.w	r3, r7, r3
 801c9c2:	3336      	adds	r3, #54	; 0x36
 801c9c4:	f8c1 3002 	str.w	r3, [r1, #2]
  __ASM volatile ("cpsid i" : : : "memory");
 801c9c8:	b672      	cpsid	i
  f_write(&File, header, 54, (void *)&byteswritten);
 801c9ca:	2236      	movs	r2, #54	; 0x36
 801c9cc:	a802      	add	r0, sp, #8
 801c9ce:	ab01      	add	r3, sp, #4
 801c9d0:	f7fe faa2 	bl	801af18 <f_write>
  if (width % 4 == 0)
 801c9d4:	f019 0f03 	tst.w	r9, #3
 801c9d8:	d020      	beq.n	801ca1c <STM32Fs_WriteImageBMP+0x98>
    for (int row = 0; row < height; row++)
 801c9da:	b18f      	cbz	r7, 801ca00 <STM32Fs_WriteImageBMP+0x7c>
      f_write(&File, zeroes, paddingBytesPerRow, (void *)&byteswritten);
 801c9dc:	f8df 9054 	ldr.w	r9, [pc, #84]	; 801ca34 <STM32Fs_WriteImageBMP+0xb0>
      f_write(&File, buffer + 3 * width * row, pixelBytesPerRow, (void *)&byteswritten);
 801c9e0:	4629      	mov	r1, r5
 801c9e2:	ab01      	add	r3, sp, #4
 801c9e4:	4632      	mov	r2, r6
    for (int row = 0; row < height; row++)
 801c9e6:	3401      	adds	r4, #1
      f_write(&File, buffer + 3 * width * row, pixelBytesPerRow, (void *)&byteswritten);
 801c9e8:	a802      	add	r0, sp, #8
 801c9ea:	4435      	add	r5, r6
 801c9ec:	f7fe fa94 	bl	801af18 <f_write>
      f_write(&File, zeroes, paddingBytesPerRow, (void *)&byteswritten);
 801c9f0:	ab01      	add	r3, sp, #4
 801c9f2:	4642      	mov	r2, r8
 801c9f4:	4649      	mov	r1, r9
 801c9f6:	a802      	add	r0, sp, #8
 801c9f8:	f7fe fa8e 	bl	801af18 <f_write>
    for (int row = 0; row < height; row++)
 801c9fc:	42a7      	cmp	r7, r4
 801c9fe:	d1ef      	bne.n	801c9e0 <STM32Fs_WriteImageBMP+0x5c>
  __ASM volatile ("cpsie i" : : : "memory");
 801ca00:	b662      	cpsie	i
  f_close(&File);
 801ca02:	a802      	add	r0, sp, #8
 801ca04:	f7fe fc82 	bl	801b30c <f_close>
  return STM32FS_ERROR_NONE;
 801ca08:	2000      	movs	r0, #0
}
 801ca0a:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 801ca0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return STM32FS_ERROR_FOPEN_FAIL;
 801ca12:	2003      	movs	r0, #3
}
 801ca14:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 801ca18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f_write(&File, buffer, width * height * 3, (void *)&byteswritten);
 801ca1c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801ca20:	ab01      	add	r3, sp, #4
 801ca22:	4629      	mov	r1, r5
 801ca24:	a802      	add	r0, sp, #8
 801ca26:	fb09 f207 	mul.w	r2, r9, r7
 801ca2a:	f7fe fa75 	bl	801af18 <f_write>
 801ca2e:	e7e7      	b.n	801ca00 <STM32Fs_WriteImageBMP+0x7c>
 801ca30:	240073c0 	.word	0x240073c0
 801ca34:	24009634 	.word	0x24009634

0801ca38 <STM32Fs_WriteImageBMP16>:
{
 801ca38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca3c:	f5ad 7d21 	sub.w	sp, sp, #644	; 0x284
 801ca40:	460d      	mov	r5, r1
 801ca42:	4616      	mov	r6, r2
  if (f_open(&File, path, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 801ca44:	4601      	mov	r1, r0
 801ca46:	220a      	movs	r2, #10
 801ca48:	a814      	add	r0, sp, #80	; 0x50
{
 801ca4a:	461f      	mov	r7, r3
 801ca4c:	f8dd 82a8 	ldr.w	r8, [sp, #680]	; 0x2a8
  if (f_open(&File, path, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 801ca50:	f7fd fe18 	bl	801a684 <f_open>
 801ca54:	b958      	cbnz	r0, 801ca6e <STM32Fs_WriteImageBMP16+0x36>
 801ca56:	2042      	movs	r0, #66	; 0x42
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801ca58:	2201      	movs	r2, #1
 801ca5a:	f10d 0103 	add.w	r1, sp, #3
 801ca5e:	ab13      	add	r3, sp, #76	; 0x4c
 801ca60:	f88d 0003 	strb.w	r0, [sp, #3]
 801ca64:	a814      	add	r0, sp, #80	; 0x50
 801ca66:	f7fe fa57 	bl	801af18 <f_write>
  if (res != FR_OK) while(1);
 801ca6a:	b128      	cbz	r0, 801ca78 <STM32Fs_WriteImageBMP16+0x40>
 801ca6c:	e7fe      	b.n	801ca6c <STM32Fs_WriteImageBMP16+0x34>
    return STM32FS_ERROR_FOPEN_FAIL;
 801ca6e:	2003      	movs	r0, #3
}
 801ca70:	f50d 7d21 	add.w	sp, sp, #644	; 0x284
 801ca74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (bytes != sizeof(value)) while(1);
 801ca78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ca7a:	2a01      	cmp	r2, #1
 801ca7c:	d000      	beq.n	801ca80 <STM32Fs_WriteImageBMP16+0x48>
 801ca7e:	e7fe      	b.n	801ca7e <STM32Fs_WriteImageBMP16+0x46>
 801ca80:	204d      	movs	r0, #77	; 0x4d
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801ca82:	ab13      	add	r3, sp, #76	; 0x4c
 801ca84:	f10d 0102 	add.w	r1, sp, #2
 801ca88:	f88d 0002 	strb.w	r0, [sp, #2]
 801ca8c:	a814      	add	r0, sp, #80	; 0x50
 801ca8e:	f7fe fa43 	bl	801af18 <f_write>
  if (res != FR_OK) while(1);
 801ca92:	b918      	cbnz	r0, 801ca9c <STM32Fs_WriteImageBMP16+0x64>
  if (bytes != sizeof(value)) while(1);
 801ca94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ca96:	2b01      	cmp	r3, #1
 801ca98:	d001      	beq.n	801ca9e <STM32Fs_WriteImageBMP16+0x66>
 801ca9a:	e7fe      	b.n	801ca9a <STM32Fs_WriteImageBMP16+0x62>
 801ca9c:	e7fe      	b.n	801ca9c <STM32Fs_WriteImageBMP16+0x64>
  const int row_bytes = (((width * 16) + 31) / 32) * 4;
 801ca9e:	0134      	lsls	r4, r6, #4
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801caa0:	a912      	add	r1, sp, #72	; 0x48
 801caa2:	ab13      	add	r3, sp, #76	; 0x4c
 801caa4:	2204      	movs	r2, #4
  const int row_bytes = (((width * 16) + 31) / 32) * 4;
 801caa6:	341f      	adds	r4, #31
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801caa8:	a814      	add	r0, sp, #80	; 0x50
  const int row_bytes = (((width * 16) + 31) / 32) * 4;
 801caaa:	0964      	lsrs	r4, r4, #5
 801caac:	00a4      	lsls	r4, r4, #2
  const int data_size = (row_bytes * height);
 801caae:	fb07 f904 	mul.w	r9, r7, r4
  write_long(&File, 14 + 40 + 12 + data_size);
 801cab2:	f109 0c42 	add.w	ip, r9, #66	; 0x42
 801cab6:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801caba:	f7fe fa2d 	bl	801af18 <f_write>
  if (res != FR_OK) while(1);
 801cabe:	4601      	mov	r1, r0
 801cac0:	b918      	cbnz	r0, 801caca <STM32Fs_WriteImageBMP16+0x92>
  if (bytes != sizeof(value)) while(1);
 801cac2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801cac4:	2b04      	cmp	r3, #4
 801cac6:	d001      	beq.n	801cacc <STM32Fs_WriteImageBMP16+0x94>
 801cac8:	e7fe      	b.n	801cac8 <STM32Fs_WriteImageBMP16+0x90>
 801caca:	e7fe      	b.n	801caca <STM32Fs_WriteImageBMP16+0x92>
 801cacc:	f8ad 100a 	strh.w	r1, [sp, #10]
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801cad0:	ab13      	add	r3, sp, #76	; 0x4c
 801cad2:	f10d 010a 	add.w	r1, sp, #10
 801cad6:	2202      	movs	r2, #2
 801cad8:	a814      	add	r0, sp, #80	; 0x50
 801cada:	f7fe fa1d 	bl	801af18 <f_write>
  if (res != FR_OK) while(1);
 801cade:	4601      	mov	r1, r0
 801cae0:	b918      	cbnz	r0, 801caea <STM32Fs_WriteImageBMP16+0xb2>
  if (bytes != sizeof(value)) while(1);
 801cae2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cae4:	2a02      	cmp	r2, #2
 801cae6:	d001      	beq.n	801caec <STM32Fs_WriteImageBMP16+0xb4>
 801cae8:	e7fe      	b.n	801cae8 <STM32Fs_WriteImageBMP16+0xb0>
 801caea:	e7fe      	b.n	801caea <STM32Fs_WriteImageBMP16+0xb2>
 801caec:	f8ad 1008 	strh.w	r1, [sp, #8]
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801caf0:	ab13      	add	r3, sp, #76	; 0x4c
 801caf2:	a814      	add	r0, sp, #80	; 0x50
 801caf4:	a902      	add	r1, sp, #8
 801caf6:	f7fe fa0f 	bl	801af18 <f_write>
  if (res != FR_OK) while(1);
 801cafa:	b928      	cbnz	r0, 801cb08 <STM32Fs_WriteImageBMP16+0xd0>
  if (bytes != sizeof(value)) while(1);
 801cafc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 801cb00:	f1ba 0f02 	cmp.w	sl, #2
 801cb04:	d001      	beq.n	801cb0a <STM32Fs_WriteImageBMP16+0xd2>
 801cb06:	e7fe      	b.n	801cb06 <STM32Fs_WriteImageBMP16+0xce>
 801cb08:	e7fe      	b.n	801cb08 <STM32Fs_WriteImageBMP16+0xd0>
 801cb0a:	2042      	movs	r0, #66	; 0x42
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801cb0c:	ab13      	add	r3, sp, #76	; 0x4c
 801cb0e:	2204      	movs	r2, #4
 801cb10:	a911      	add	r1, sp, #68	; 0x44
 801cb12:	9011      	str	r0, [sp, #68]	; 0x44
 801cb14:	a814      	add	r0, sp, #80	; 0x50
 801cb16:	f7fe f9ff 	bl	801af18 <f_write>
  if (res != FR_OK) while(1);
 801cb1a:	b918      	cbnz	r0, 801cb24 <STM32Fs_WriteImageBMP16+0xec>
  if (bytes != sizeof(value)) while(1);
 801cb1c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cb1e:	2a04      	cmp	r2, #4
 801cb20:	d001      	beq.n	801cb26 <STM32Fs_WriteImageBMP16+0xee>
 801cb22:	e7fe      	b.n	801cb22 <STM32Fs_WriteImageBMP16+0xea>
 801cb24:	e7fe      	b.n	801cb24 <STM32Fs_WriteImageBMP16+0xec>
 801cb26:	2028      	movs	r0, #40	; 0x28
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801cb28:	ab13      	add	r3, sp, #76	; 0x4c
 801cb2a:	a910      	add	r1, sp, #64	; 0x40
 801cb2c:	9010      	str	r0, [sp, #64]	; 0x40
 801cb2e:	a814      	add	r0, sp, #80	; 0x50
 801cb30:	f7fe f9f2 	bl	801af18 <f_write>
  if (res != FR_OK) while(1);
 801cb34:	b100      	cbz	r0, 801cb38 <STM32Fs_WriteImageBMP16+0x100>
 801cb36:	e7fe      	b.n	801cb36 <STM32Fs_WriteImageBMP16+0xfe>
  if (bytes != sizeof(value)) while(1);
 801cb38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cb3a:	2a04      	cmp	r2, #4
 801cb3c:	d000      	beq.n	801cb40 <STM32Fs_WriteImageBMP16+0x108>
 801cb3e:	e7fe      	b.n	801cb3e <STM32Fs_WriteImageBMP16+0x106>
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801cb40:	ab13      	add	r3, sp, #76	; 0x4c
 801cb42:	a814      	add	r0, sp, #80	; 0x50
 801cb44:	a90f      	add	r1, sp, #60	; 0x3c
 801cb46:	960f      	str	r6, [sp, #60]	; 0x3c
 801cb48:	f7fe f9e6 	bl	801af18 <f_write>
  if (res != FR_OK) while(1);
 801cb4c:	b100      	cbz	r0, 801cb50 <STM32Fs_WriteImageBMP16+0x118>
 801cb4e:	e7fe      	b.n	801cb4e <STM32Fs_WriteImageBMP16+0x116>
  if (bytes != sizeof(value)) while(1);
 801cb50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cb52:	2a04      	cmp	r2, #4
 801cb54:	d000      	beq.n	801cb58 <STM32Fs_WriteImageBMP16+0x120>
 801cb56:	e7fe      	b.n	801cb56 <STM32Fs_WriteImageBMP16+0x11e>
  write_long(&File, -height); // store the image flipped (correctly)
 801cb58:	4278      	negs	r0, r7
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801cb5a:	ab13      	add	r3, sp, #76	; 0x4c
 801cb5c:	a90e      	add	r1, sp, #56	; 0x38
 801cb5e:	900e      	str	r0, [sp, #56]	; 0x38
 801cb60:	a814      	add	r0, sp, #80	; 0x50
 801cb62:	f7fe f9d9 	bl	801af18 <f_write>
  if (res != FR_OK) while(1);
 801cb66:	b100      	cbz	r0, 801cb6a <STM32Fs_WriteImageBMP16+0x132>
 801cb68:	e7fe      	b.n	801cb68 <STM32Fs_WriteImageBMP16+0x130>
  if (bytes != sizeof(value)) while(1);
 801cb6a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801cb6c:	2b04      	cmp	r3, #4
 801cb6e:	d000      	beq.n	801cb72 <STM32Fs_WriteImageBMP16+0x13a>
 801cb70:	e7fe      	b.n	801cb70 <STM32Fs_WriteImageBMP16+0x138>
 801cb72:	2001      	movs	r0, #1
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801cb74:	4652      	mov	r2, sl
 801cb76:	ab13      	add	r3, sp, #76	; 0x4c
 801cb78:	f10d 0106 	add.w	r1, sp, #6
 801cb7c:	f8ad 0006 	strh.w	r0, [sp, #6]
 801cb80:	a814      	add	r0, sp, #80	; 0x50
 801cb82:	f7fe f9c9 	bl	801af18 <f_write>
  if (res != FR_OK) while(1);
 801cb86:	b100      	cbz	r0, 801cb8a <STM32Fs_WriteImageBMP16+0x152>
 801cb88:	e7fe      	b.n	801cb88 <STM32Fs_WriteImageBMP16+0x150>
  if (bytes != sizeof(value)) while(1);
 801cb8a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cb8c:	2a02      	cmp	r2, #2
 801cb8e:	d000      	beq.n	801cb92 <STM32Fs_WriteImageBMP16+0x15a>
 801cb90:	e7fe      	b.n	801cb90 <STM32Fs_WriteImageBMP16+0x158>
 801cb92:	2010      	movs	r0, #16
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801cb94:	ab13      	add	r3, sp, #76	; 0x4c
 801cb96:	a901      	add	r1, sp, #4
 801cb98:	f8ad 0004 	strh.w	r0, [sp, #4]
 801cb9c:	a814      	add	r0, sp, #80	; 0x50
 801cb9e:	f7fe f9bb 	bl	801af18 <f_write>
  if (res != FR_OK) while(1);
 801cba2:	b100      	cbz	r0, 801cba6 <STM32Fs_WriteImageBMP16+0x16e>
 801cba4:	e7fe      	b.n	801cba4 <STM32Fs_WriteImageBMP16+0x16c>
  if (bytes != sizeof(value)) while(1);
 801cba6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801cba8:	2b02      	cmp	r3, #2
 801cbaa:	d000      	beq.n	801cbae <STM32Fs_WriteImageBMP16+0x176>
 801cbac:	e7fe      	b.n	801cbac <STM32Fs_WriteImageBMP16+0x174>
 801cbae:	2003      	movs	r0, #3
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801cbb0:	ab13      	add	r3, sp, #76	; 0x4c
 801cbb2:	2204      	movs	r2, #4
 801cbb4:	a90d      	add	r1, sp, #52	; 0x34
 801cbb6:	900d      	str	r0, [sp, #52]	; 0x34
 801cbb8:	a814      	add	r0, sp, #80	; 0x50
 801cbba:	f7fe f9ad 	bl	801af18 <f_write>
  if (res != FR_OK) while(1);
 801cbbe:	b100      	cbz	r0, 801cbc2 <STM32Fs_WriteImageBMP16+0x18a>
 801cbc0:	e7fe      	b.n	801cbc0 <STM32Fs_WriteImageBMP16+0x188>
  if (bytes != sizeof(value)) while(1);
 801cbc2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cbc4:	2a04      	cmp	r2, #4
 801cbc6:	d000      	beq.n	801cbca <STM32Fs_WriteImageBMP16+0x192>
 801cbc8:	e7fe      	b.n	801cbc8 <STM32Fs_WriteImageBMP16+0x190>
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801cbca:	a90c      	add	r1, sp, #48	; 0x30
 801cbcc:	ab13      	add	r3, sp, #76	; 0x4c
 801cbce:	a814      	add	r0, sp, #80	; 0x50
 801cbd0:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801cbd4:	f7fe f9a0 	bl	801af18 <f_write>
  if (res != FR_OK) while(1);
 801cbd8:	4601      	mov	r1, r0
 801cbda:	b100      	cbz	r0, 801cbde <STM32Fs_WriteImageBMP16+0x1a6>
 801cbdc:	e7fe      	b.n	801cbdc <STM32Fs_WriteImageBMP16+0x1a4>
  if (bytes != sizeof(value)) while(1);
 801cbde:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cbe0:	2a04      	cmp	r2, #4
 801cbe2:	d000      	beq.n	801cbe6 <STM32Fs_WriteImageBMP16+0x1ae>
 801cbe4:	e7fe      	b.n	801cbe4 <STM32Fs_WriteImageBMP16+0x1ac>
 801cbe6:	910b      	str	r1, [sp, #44]	; 0x2c
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801cbe8:	ab13      	add	r3, sp, #76	; 0x4c
 801cbea:	a90b      	add	r1, sp, #44	; 0x2c
 801cbec:	a814      	add	r0, sp, #80	; 0x50
 801cbee:	f7fe f993 	bl	801af18 <f_write>
  if (res != FR_OK) while(1);
 801cbf2:	4601      	mov	r1, r0
 801cbf4:	b100      	cbz	r0, 801cbf8 <STM32Fs_WriteImageBMP16+0x1c0>
 801cbf6:	e7fe      	b.n	801cbf6 <STM32Fs_WriteImageBMP16+0x1be>
  if (bytes != sizeof(value)) while(1);
 801cbf8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cbfa:	2a04      	cmp	r2, #4
 801cbfc:	d000      	beq.n	801cc00 <STM32Fs_WriteImageBMP16+0x1c8>
 801cbfe:	e7fe      	b.n	801cbfe <STM32Fs_WriteImageBMP16+0x1c6>
 801cc00:	910a      	str	r1, [sp, #40]	; 0x28
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801cc02:	ab13      	add	r3, sp, #76	; 0x4c
 801cc04:	a814      	add	r0, sp, #80	; 0x50
 801cc06:	a90a      	add	r1, sp, #40	; 0x28
 801cc08:	f7fe f986 	bl	801af18 <f_write>
  if (res != FR_OK) while(1);
 801cc0c:	b100      	cbz	r0, 801cc10 <STM32Fs_WriteImageBMP16+0x1d8>
 801cc0e:	e7fe      	b.n	801cc0e <STM32Fs_WriteImageBMP16+0x1d6>
  if (bytes != sizeof(value)) while(1);
 801cc10:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cc12:	2a04      	cmp	r2, #4
 801cc14:	d000      	beq.n	801cc18 <STM32Fs_WriteImageBMP16+0x1e0>
 801cc16:	e7fe      	b.n	801cc16 <STM32Fs_WriteImageBMP16+0x1de>
 801cc18:	2000      	movs	r0, #0
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801cc1a:	a909      	add	r1, sp, #36	; 0x24
 801cc1c:	ab13      	add	r3, sp, #76	; 0x4c
 801cc1e:	9009      	str	r0, [sp, #36]	; 0x24
 801cc20:	a814      	add	r0, sp, #80	; 0x50
 801cc22:	f7fe f979 	bl	801af18 <f_write>
  if (res != FR_OK) while(1);
 801cc26:	4601      	mov	r1, r0
 801cc28:	b100      	cbz	r0, 801cc2c <STM32Fs_WriteImageBMP16+0x1f4>
 801cc2a:	e7fe      	b.n	801cc2a <STM32Fs_WriteImageBMP16+0x1f2>
  if (bytes != sizeof(value)) while(1);
 801cc2c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cc2e:	2a04      	cmp	r2, #4
 801cc30:	d000      	beq.n	801cc34 <STM32Fs_WriteImageBMP16+0x1fc>
 801cc32:	e7fe      	b.n	801cc32 <STM32Fs_WriteImageBMP16+0x1fa>
 801cc34:	9108      	str	r1, [sp, #32]
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801cc36:	ab13      	add	r3, sp, #76	; 0x4c
 801cc38:	a814      	add	r0, sp, #80	; 0x50
 801cc3a:	a908      	add	r1, sp, #32
 801cc3c:	f7fe f96c 	bl	801af18 <f_write>
  if (res != FR_OK) while(1);
 801cc40:	b100      	cbz	r0, 801cc44 <STM32Fs_WriteImageBMP16+0x20c>
 801cc42:	e7fe      	b.n	801cc42 <STM32Fs_WriteImageBMP16+0x20a>
  if (bytes != sizeof(value)) while(1);
 801cc44:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cc46:	2a04      	cmp	r2, #4
 801cc48:	d000      	beq.n	801cc4c <STM32Fs_WriteImageBMP16+0x214>
 801cc4a:	e7fe      	b.n	801cc4a <STM32Fs_WriteImageBMP16+0x212>
 801cc4c:	f44f 4078 	mov.w	r0, #63488	; 0xf800
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801cc50:	ab13      	add	r3, sp, #76	; 0x4c
 801cc52:	a907      	add	r1, sp, #28
 801cc54:	9007      	str	r0, [sp, #28]
 801cc56:	a814      	add	r0, sp, #80	; 0x50
 801cc58:	f7fe f95e 	bl	801af18 <f_write>
  if (res != FR_OK) while(1);
 801cc5c:	b100      	cbz	r0, 801cc60 <STM32Fs_WriteImageBMP16+0x228>
 801cc5e:	e7fe      	b.n	801cc5e <STM32Fs_WriteImageBMP16+0x226>
  if (bytes != sizeof(value)) while(1);
 801cc60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cc62:	2a04      	cmp	r2, #4
 801cc64:	d000      	beq.n	801cc68 <STM32Fs_WriteImageBMP16+0x230>
 801cc66:	e7fe      	b.n	801cc66 <STM32Fs_WriteImageBMP16+0x22e>
 801cc68:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801cc6c:	ab13      	add	r3, sp, #76	; 0x4c
 801cc6e:	a906      	add	r1, sp, #24
 801cc70:	9006      	str	r0, [sp, #24]
 801cc72:	a814      	add	r0, sp, #80	; 0x50
 801cc74:	f7fe f950 	bl	801af18 <f_write>
  if (res != FR_OK) while(1);
 801cc78:	b100      	cbz	r0, 801cc7c <STM32Fs_WriteImageBMP16+0x244>
 801cc7a:	e7fe      	b.n	801cc7a <STM32Fs_WriteImageBMP16+0x242>
  if (bytes != sizeof(value)) while(1);
 801cc7c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cc7e:	2a04      	cmp	r2, #4
 801cc80:	d000      	beq.n	801cc84 <STM32Fs_WriteImageBMP16+0x24c>
 801cc82:	e7fe      	b.n	801cc82 <STM32Fs_WriteImageBMP16+0x24a>
 801cc84:	201f      	movs	r0, #31
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801cc86:	ab13      	add	r3, sp, #76	; 0x4c
 801cc88:	a905      	add	r1, sp, #20
 801cc8a:	9005      	str	r0, [sp, #20]
 801cc8c:	a814      	add	r0, sp, #80	; 0x50
 801cc8e:	f7fe f943 	bl	801af18 <f_write>
  if (res != FR_OK) while(1);
 801cc92:	b100      	cbz	r0, 801cc96 <STM32Fs_WriteImageBMP16+0x25e>
 801cc94:	e7fe      	b.n	801cc94 <STM32Fs_WriteImageBMP16+0x25c>
  if (bytes != sizeof(value)) while(1);
 801cc96:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801cc98:	2b04      	cmp	r3, #4
 801cc9a:	d000      	beq.n	801cc9e <STM32Fs_WriteImageBMP16+0x266>
 801cc9c:	e7fe      	b.n	801cc9c <STM32Fs_WriteImageBMP16+0x264>
  if(swap_bytes == 1)
 801cc9e:	f1b8 0f01 	cmp.w	r8, #1
  const int waste = (row_bytes / sizeof(uint16_t)) - width;
 801cca2:	ebc6 0454 	rsb	r4, r6, r4, lsr #1
  if(swap_bytes == 1)
 801cca6:	d019      	beq.n	801ccdc <STM32Fs_WriteImageBMP16+0x2a4>
  else  if(swap_bytes == 0)
 801cca8:	f1b8 0f00 	cmp.w	r8, #0
 801ccac:	d159      	bne.n	801cd62 <STM32Fs_WriteImageBMP16+0x32a>
    if(waste == 0)
 801ccae:	2c00      	cmp	r4, #0
 801ccb0:	d04f      	beq.n	801cd52 <STM32Fs_WriteImageBMP16+0x31a>
 801ccb2:	ea4f 0a46 	mov.w	sl, r6, lsl #1
      for (int i = 0; i < height; i++)
 801ccb6:	45b8      	cmp	r8, r7
 801ccb8:	d053      	beq.n	801cd62 <STM32Fs_WriteImageBMP16+0x32a>
        for (int j = 0; j < width; j++) 
 801ccba:	f04f 0900 	mov.w	r9, #0
 801ccbe:	45b1      	cmp	r9, r6
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801ccc0:	ab13      	add	r3, sp, #76	; 0x4c
 801ccc2:	f04f 0202 	mov.w	r2, #2
 801ccc6:	a904      	add	r1, sp, #16
 801ccc8:	a814      	add	r0, sp, #80	; 0x50
        for (int j = 0; j < width; j++) 
 801ccca:	d023      	beq.n	801cd14 <STM32Fs_WriteImageBMP16+0x2dc>
 801cccc:	f835 c019 	ldrh.w	ip, [r5, r9, lsl #1]
 801ccd0:	f8ad c010 	strh.w	ip, [sp, #16]
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801ccd4:	f7fe f920 	bl	801af18 <f_write>
  if (res != FR_OK) while(1);
 801ccd8:	b1c0      	cbz	r0, 801cd0c <STM32Fs_WriteImageBMP16+0x2d4>
 801ccda:	e7fe      	b.n	801ccda <STM32Fs_WriteImageBMP16+0x2a2>
 801ccdc:	ea4f 0a46 	mov.w	sl, r6, lsl #1
    for (int i = 0; i < height; i++)
 801cce0:	f04f 0900 	mov.w	r9, #0
 801cce4:	45b9      	cmp	r9, r7
 801cce6:	d03c      	beq.n	801cd62 <STM32Fs_WriteImageBMP16+0x32a>
      for (int j = 0; j < width; j++) 
 801cce8:	f04f 0800 	mov.w	r8, #0
 801ccec:	45b0      	cmp	r8, r6
 801ccee:	d041      	beq.n	801cd74 <STM32Fs_WriteImageBMP16+0x33c>
        write_word(&File, IM_SWAP16(IM_GET_RGB565_PIXEL(buffer, width, (j), (i))));
 801ccf0:	f835 c018 	ldrh.w	ip, [r5, r8, lsl #1]
  __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 801ccf4:	fa9c fc9c 	rev16.w	ip, ip
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801ccf8:	2202      	movs	r2, #2
 801ccfa:	ab13      	add	r3, sp, #76	; 0x4c
 801ccfc:	a903      	add	r1, sp, #12
 801ccfe:	a814      	add	r0, sp, #80	; 0x50
        write_word(&File, IM_SWAP16(IM_GET_RGB565_PIXEL(buffer, width, (j), (i))));
 801cd00:	f8ad c00c 	strh.w	ip, [sp, #12]
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801cd04:	f7fe f908 	bl	801af18 <f_write>
  if (res != FR_OK) while(1);
 801cd08:	b380      	cbz	r0, 801cd6c <STM32Fs_WriteImageBMP16+0x334>
 801cd0a:	e7fe      	b.n	801cd0a <STM32Fs_WriteImageBMP16+0x2d2>
  if (bytes != sizeof(value)) while(1);
 801cd0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801cd0e:	2b02      	cmp	r3, #2
 801cd10:	d011      	beq.n	801cd36 <STM32Fs_WriteImageBMP16+0x2fe>
 801cd12:	e7fe      	b.n	801cd12 <STM32Fs_WriteImageBMP16+0x2da>
        for (int j = 0; j < waste; j++) 
 801cd14:	f04f 0900 	mov.w	r9, #0
 801cd18:	46cb      	mov	fp, r9
 801cd1a:	45a1      	cmp	r9, r4
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801cd1c:	ab13      	add	r3, sp, #76	; 0x4c
 801cd1e:	f04f 0202 	mov.w	r2, #2
 801cd22:	f10d 0112 	add.w	r1, sp, #18
 801cd26:	a814      	add	r0, sp, #80	; 0x50
        for (int j = 0; j < waste; j++) 
 801cd28:	da0c      	bge.n	801cd44 <STM32Fs_WriteImageBMP16+0x30c>
 801cd2a:	f8ad b012 	strh.w	fp, [sp, #18]
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801cd2e:	f7fe f8f3 	bl	801af18 <f_write>
  if (res != FR_OK) while(1);
 801cd32:	b118      	cbz	r0, 801cd3c <STM32Fs_WriteImageBMP16+0x304>
 801cd34:	e7fe      	b.n	801cd34 <STM32Fs_WriteImageBMP16+0x2fc>
        for (int j = 0; j < width; j++) 
 801cd36:	f109 0901 	add.w	r9, r9, #1
 801cd3a:	e7c0      	b.n	801ccbe <STM32Fs_WriteImageBMP16+0x286>
  if (bytes != sizeof(value)) while(1);
 801cd3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801cd3e:	2b02      	cmp	r3, #2
 801cd40:	d004      	beq.n	801cd4c <STM32Fs_WriteImageBMP16+0x314>
 801cd42:	e7fe      	b.n	801cd42 <STM32Fs_WriteImageBMP16+0x30a>
      for (int i = 0; i < height; i++)
 801cd44:	f108 0801 	add.w	r8, r8, #1
 801cd48:	4455      	add	r5, sl
 801cd4a:	e7b4      	b.n	801ccb6 <STM32Fs_WriteImageBMP16+0x27e>
        for (int j = 0; j < waste; j++) 
 801cd4c:	f109 0901 	add.w	r9, r9, #1
 801cd50:	e7e3      	b.n	801cd1a <STM32Fs_WriteImageBMP16+0x2e2>
      f_write(&File, buffer, width * height * 2, (void *)&byteswritten);
 801cd52:	007a      	lsls	r2, r7, #1
 801cd54:	ab13      	add	r3, sp, #76	; 0x4c
 801cd56:	4629      	mov	r1, r5
 801cd58:	a814      	add	r0, sp, #80	; 0x50
 801cd5a:	fb06 f202 	mul.w	r2, r6, r2
 801cd5e:	f7fe f8db 	bl	801af18 <f_write>
  f_close(&File);
 801cd62:	a814      	add	r0, sp, #80	; 0x50
 801cd64:	f7fe fad2 	bl	801b30c <f_close>
  return STM32FS_ERROR_NONE;
 801cd68:	2000      	movs	r0, #0
 801cd6a:	e681      	b.n	801ca70 <STM32Fs_WriteImageBMP16+0x38>
  if (bytes != sizeof(value)) while(1);
 801cd6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801cd6e:	2b02      	cmp	r3, #2
 801cd70:	d011      	beq.n	801cd96 <STM32Fs_WriteImageBMP16+0x35e>
 801cd72:	e7fe      	b.n	801cd72 <STM32Fs_WriteImageBMP16+0x33a>
      for (int j = 0; j < waste; j++) 
 801cd74:	f04f 0800 	mov.w	r8, #0
 801cd78:	46c3      	mov	fp, r8
 801cd7a:	45a0      	cmp	r8, r4
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801cd7c:	ab13      	add	r3, sp, #76	; 0x4c
 801cd7e:	f04f 0202 	mov.w	r2, #2
 801cd82:	f10d 010e 	add.w	r1, sp, #14
 801cd86:	a814      	add	r0, sp, #80	; 0x50
      for (int j = 0; j < waste; j++) 
 801cd88:	da0c      	bge.n	801cda4 <STM32Fs_WriteImageBMP16+0x36c>
 801cd8a:	f8ad b00e 	strh.w	fp, [sp, #14]
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801cd8e:	f7fe f8c3 	bl	801af18 <f_write>
  if (res != FR_OK) while(1);
 801cd92:	b118      	cbz	r0, 801cd9c <STM32Fs_WriteImageBMP16+0x364>
 801cd94:	e7fe      	b.n	801cd94 <STM32Fs_WriteImageBMP16+0x35c>
      for (int j = 0; j < width; j++) 
 801cd96:	f108 0801 	add.w	r8, r8, #1
 801cd9a:	e7a7      	b.n	801ccec <STM32Fs_WriteImageBMP16+0x2b4>
  if (bytes != sizeof(value)) while(1);
 801cd9c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801cd9e:	2b02      	cmp	r3, #2
 801cda0:	d004      	beq.n	801cdac <STM32Fs_WriteImageBMP16+0x374>
 801cda2:	e7fe      	b.n	801cda2 <STM32Fs_WriteImageBMP16+0x36a>
    for (int i = 0; i < height; i++)
 801cda4:	f109 0901 	add.w	r9, r9, #1
 801cda8:	4455      	add	r5, sl
 801cdaa:	e79b      	b.n	801cce4 <STM32Fs_WriteImageBMP16+0x2ac>
      for (int j = 0; j < waste; j++) 
 801cdac:	f108 0801 	add.w	r8, r8, #1
 801cdb0:	e7e3      	b.n	801cd7a <STM32Fs_WriteImageBMP16+0x342>
 801cdb2:	bf00      	nop

0801cdb4 <STM32Fs_WriteImageBMPGray>:
{
 801cdb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cdb8:	f5ad 7d1c 	sub.w	sp, sp, #624	; 0x270
 801cdbc:	460e      	mov	r6, r1
 801cdbe:	4615      	mov	r5, r2
  if (f_open(&File, path, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 801cdc0:	4601      	mov	r1, r0
 801cdc2:	220a      	movs	r2, #10
 801cdc4:	a810      	add	r0, sp, #64	; 0x40
{
 801cdc6:	461f      	mov	r7, r3
  if (f_open(&File, path, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 801cdc8:	f7fd fc5c 	bl	801a684 <f_open>
 801cdcc:	b958      	cbnz	r0, 801cde6 <STM32Fs_WriteImageBMPGray+0x32>
 801cdce:	2042      	movs	r0, #66	; 0x42
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801cdd0:	2201      	movs	r2, #1
 801cdd2:	f10d 0102 	add.w	r1, sp, #2
 801cdd6:	ab0f      	add	r3, sp, #60	; 0x3c
 801cdd8:	f88d 0002 	strb.w	r0, [sp, #2]
 801cddc:	a810      	add	r0, sp, #64	; 0x40
 801cdde:	f7fe f89b 	bl	801af18 <f_write>
  if (res != FR_OK) while(1);
 801cde2:	b128      	cbz	r0, 801cdf0 <STM32Fs_WriteImageBMPGray+0x3c>
 801cde4:	e7fe      	b.n	801cde4 <STM32Fs_WriteImageBMPGray+0x30>
    return STM32FS_ERROR_FOPEN_FAIL;
 801cde6:	2003      	movs	r0, #3
}
 801cde8:	f50d 7d1c 	add.w	sp, sp, #624	; 0x270
 801cdec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (bytes != sizeof(value)) while(1);
 801cdf0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cdf2:	2a01      	cmp	r2, #1
 801cdf4:	d000      	beq.n	801cdf8 <STM32Fs_WriteImageBMPGray+0x44>
 801cdf6:	e7fe      	b.n	801cdf6 <STM32Fs_WriteImageBMPGray+0x42>
 801cdf8:	204d      	movs	r0, #77	; 0x4d
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801cdfa:	ab0f      	add	r3, sp, #60	; 0x3c
 801cdfc:	f10d 0101 	add.w	r1, sp, #1
 801ce00:	f88d 0001 	strb.w	r0, [sp, #1]
 801ce04:	a810      	add	r0, sp, #64	; 0x40
 801ce06:	f7fe f887 	bl	801af18 <f_write>
  if (res != FR_OK) while(1);
 801ce0a:	b918      	cbnz	r0, 801ce14 <STM32Fs_WriteImageBMPGray+0x60>
  if (bytes != sizeof(value)) while(1);
 801ce0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ce0e:	2b01      	cmp	r3, #1
 801ce10:	d001      	beq.n	801ce16 <STM32Fs_WriteImageBMPGray+0x62>
 801ce12:	e7fe      	b.n	801ce12 <STM32Fs_WriteImageBMPGray+0x5e>
 801ce14:	e7fe      	b.n	801ce14 <STM32Fs_WriteImageBMPGray+0x60>
  const int row_bytes = (((width * 8) + 31) / 32) * 4;
 801ce16:	00ec      	lsls	r4, r5, #3
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801ce18:	a90d      	add	r1, sp, #52	; 0x34
 801ce1a:	ab0f      	add	r3, sp, #60	; 0x3c
 801ce1c:	2204      	movs	r2, #4
  const int row_bytes = (((width * 8) + 31) / 32) * 4;
 801ce1e:	341f      	adds	r4, #31
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801ce20:	a810      	add	r0, sp, #64	; 0x40
  const int row_bytes = (((width * 8) + 31) / 32) * 4;
 801ce22:	0964      	lsrs	r4, r4, #5
 801ce24:	00a4      	lsls	r4, r4, #2
  const int data_size = (row_bytes * height);
 801ce26:	fb07 f904 	mul.w	r9, r7, r4
  write_long(&File, 14 + 40 + 1024 + data_size);
 801ce2a:	f209 4c36 	addw	ip, r9, #1078	; 0x436
 801ce2e:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801ce32:	f7fe f871 	bl	801af18 <f_write>
  if (res != FR_OK) while(1);
 801ce36:	4601      	mov	r1, r0
 801ce38:	b918      	cbnz	r0, 801ce42 <STM32Fs_WriteImageBMPGray+0x8e>
  if (bytes != sizeof(value)) while(1);
 801ce3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ce3c:	2b04      	cmp	r3, #4
 801ce3e:	d001      	beq.n	801ce44 <STM32Fs_WriteImageBMPGray+0x90>
 801ce40:	e7fe      	b.n	801ce40 <STM32Fs_WriteImageBMPGray+0x8c>
 801ce42:	e7fe      	b.n	801ce42 <STM32Fs_WriteImageBMPGray+0x8e>
 801ce44:	f8ad 100a 	strh.w	r1, [sp, #10]
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801ce48:	ab0f      	add	r3, sp, #60	; 0x3c
 801ce4a:	f10d 010a 	add.w	r1, sp, #10
 801ce4e:	2202      	movs	r2, #2
 801ce50:	a810      	add	r0, sp, #64	; 0x40
 801ce52:	f7fe f861 	bl	801af18 <f_write>
  if (res != FR_OK) while(1);
 801ce56:	4601      	mov	r1, r0
 801ce58:	b918      	cbnz	r0, 801ce62 <STM32Fs_WriteImageBMPGray+0xae>
  if (bytes != sizeof(value)) while(1);
 801ce5a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ce5c:	2a02      	cmp	r2, #2
 801ce5e:	d001      	beq.n	801ce64 <STM32Fs_WriteImageBMPGray+0xb0>
 801ce60:	e7fe      	b.n	801ce60 <STM32Fs_WriteImageBMPGray+0xac>
 801ce62:	e7fe      	b.n	801ce62 <STM32Fs_WriteImageBMPGray+0xae>
 801ce64:	f8ad 1008 	strh.w	r1, [sp, #8]
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801ce68:	ab0f      	add	r3, sp, #60	; 0x3c
 801ce6a:	a810      	add	r0, sp, #64	; 0x40
 801ce6c:	a902      	add	r1, sp, #8
 801ce6e:	f7fe f853 	bl	801af18 <f_write>
  if (res != FR_OK) while(1);
 801ce72:	b928      	cbnz	r0, 801ce80 <STM32Fs_WriteImageBMPGray+0xcc>
  if (bytes != sizeof(value)) while(1);
 801ce74:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 801ce78:	f1b8 0f02 	cmp.w	r8, #2
 801ce7c:	d001      	beq.n	801ce82 <STM32Fs_WriteImageBMPGray+0xce>
 801ce7e:	e7fe      	b.n	801ce7e <STM32Fs_WriteImageBMPGray+0xca>
 801ce80:	e7fe      	b.n	801ce80 <STM32Fs_WriteImageBMPGray+0xcc>
 801ce82:	f240 4036 	movw	r0, #1078	; 0x436
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801ce86:	ab0f      	add	r3, sp, #60	; 0x3c
 801ce88:	2204      	movs	r2, #4
 801ce8a:	a90c      	add	r1, sp, #48	; 0x30
 801ce8c:	900c      	str	r0, [sp, #48]	; 0x30
 801ce8e:	a810      	add	r0, sp, #64	; 0x40
 801ce90:	f7fe f842 	bl	801af18 <f_write>
  if (res != FR_OK) while(1);
 801ce94:	b918      	cbnz	r0, 801ce9e <STM32Fs_WriteImageBMPGray+0xea>
  if (bytes != sizeof(value)) while(1);
 801ce96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ce98:	2a04      	cmp	r2, #4
 801ce9a:	d001      	beq.n	801cea0 <STM32Fs_WriteImageBMPGray+0xec>
 801ce9c:	e7fe      	b.n	801ce9c <STM32Fs_WriteImageBMPGray+0xe8>
 801ce9e:	e7fe      	b.n	801ce9e <STM32Fs_WriteImageBMPGray+0xea>
 801cea0:	2028      	movs	r0, #40	; 0x28
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801cea2:	ab0f      	add	r3, sp, #60	; 0x3c
 801cea4:	a90b      	add	r1, sp, #44	; 0x2c
 801cea6:	900b      	str	r0, [sp, #44]	; 0x2c
 801cea8:	a810      	add	r0, sp, #64	; 0x40
 801ceaa:	f7fe f835 	bl	801af18 <f_write>
  if (res != FR_OK) while(1);
 801ceae:	b100      	cbz	r0, 801ceb2 <STM32Fs_WriteImageBMPGray+0xfe>
 801ceb0:	e7fe      	b.n	801ceb0 <STM32Fs_WriteImageBMPGray+0xfc>
  if (bytes != sizeof(value)) while(1);
 801ceb2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ceb4:	2a04      	cmp	r2, #4
 801ceb6:	d000      	beq.n	801ceba <STM32Fs_WriteImageBMPGray+0x106>
 801ceb8:	e7fe      	b.n	801ceb8 <STM32Fs_WriteImageBMPGray+0x104>
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801ceba:	ab0f      	add	r3, sp, #60	; 0x3c
 801cebc:	a810      	add	r0, sp, #64	; 0x40
 801cebe:	a90a      	add	r1, sp, #40	; 0x28
 801cec0:	950a      	str	r5, [sp, #40]	; 0x28
 801cec2:	f7fe f829 	bl	801af18 <f_write>
  if (res != FR_OK) while(1);
 801cec6:	b100      	cbz	r0, 801ceca <STM32Fs_WriteImageBMPGray+0x116>
 801cec8:	e7fe      	b.n	801cec8 <STM32Fs_WriteImageBMPGray+0x114>
  if (bytes != sizeof(value)) while(1);
 801ceca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cecc:	2a04      	cmp	r2, #4
 801cece:	d000      	beq.n	801ced2 <STM32Fs_WriteImageBMPGray+0x11e>
 801ced0:	e7fe      	b.n	801ced0 <STM32Fs_WriteImageBMPGray+0x11c>
  write_long(&File, -height); // store the image flipped (correctly)
 801ced2:	4278      	negs	r0, r7
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801ced4:	ab0f      	add	r3, sp, #60	; 0x3c
 801ced6:	a909      	add	r1, sp, #36	; 0x24
 801ced8:	9009      	str	r0, [sp, #36]	; 0x24
 801ceda:	a810      	add	r0, sp, #64	; 0x40
 801cedc:	f7fe f81c 	bl	801af18 <f_write>
  if (res != FR_OK) while(1);
 801cee0:	b100      	cbz	r0, 801cee4 <STM32Fs_WriteImageBMPGray+0x130>
 801cee2:	e7fe      	b.n	801cee2 <STM32Fs_WriteImageBMPGray+0x12e>
  if (bytes != sizeof(value)) while(1);
 801cee4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cee6:	2b04      	cmp	r3, #4
 801cee8:	d000      	beq.n	801ceec <STM32Fs_WriteImageBMPGray+0x138>
 801ceea:	e7fe      	b.n	801ceea <STM32Fs_WriteImageBMPGray+0x136>
 801ceec:	2001      	movs	r0, #1
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801ceee:	4642      	mov	r2, r8
 801cef0:	ab0f      	add	r3, sp, #60	; 0x3c
 801cef2:	f10d 0106 	add.w	r1, sp, #6
 801cef6:	f8ad 0006 	strh.w	r0, [sp, #6]
 801cefa:	a810      	add	r0, sp, #64	; 0x40
 801cefc:	f7fe f80c 	bl	801af18 <f_write>
  if (res != FR_OK) while(1);
 801cf00:	b100      	cbz	r0, 801cf04 <STM32Fs_WriteImageBMPGray+0x150>
 801cf02:	e7fe      	b.n	801cf02 <STM32Fs_WriteImageBMPGray+0x14e>
  if (bytes != sizeof(value)) while(1);
 801cf04:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cf06:	2a02      	cmp	r2, #2
 801cf08:	d000      	beq.n	801cf0c <STM32Fs_WriteImageBMPGray+0x158>
 801cf0a:	e7fe      	b.n	801cf0a <STM32Fs_WriteImageBMPGray+0x156>
 801cf0c:	2008      	movs	r0, #8
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801cf0e:	a901      	add	r1, sp, #4
 801cf10:	ab0f      	add	r3, sp, #60	; 0x3c
 801cf12:	f8ad 0004 	strh.w	r0, [sp, #4]
 801cf16:	a810      	add	r0, sp, #64	; 0x40
 801cf18:	f7fd fffe 	bl	801af18 <f_write>
  if (res != FR_OK) while(1);
 801cf1c:	4601      	mov	r1, r0
 801cf1e:	b100      	cbz	r0, 801cf22 <STM32Fs_WriteImageBMPGray+0x16e>
 801cf20:	e7fe      	b.n	801cf20 <STM32Fs_WriteImageBMPGray+0x16c>
  if (bytes != sizeof(value)) while(1);
 801cf22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cf24:	2b02      	cmp	r3, #2
 801cf26:	d000      	beq.n	801cf2a <STM32Fs_WriteImageBMPGray+0x176>
 801cf28:	e7fe      	b.n	801cf28 <STM32Fs_WriteImageBMPGray+0x174>
 801cf2a:	9108      	str	r1, [sp, #32]
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801cf2c:	ab0f      	add	r3, sp, #60	; 0x3c
 801cf2e:	2204      	movs	r2, #4
 801cf30:	a810      	add	r0, sp, #64	; 0x40
 801cf32:	a908      	add	r1, sp, #32
 801cf34:	f7fd fff0 	bl	801af18 <f_write>
  if (res != FR_OK) while(1);
 801cf38:	b100      	cbz	r0, 801cf3c <STM32Fs_WriteImageBMPGray+0x188>
 801cf3a:	e7fe      	b.n	801cf3a <STM32Fs_WriteImageBMPGray+0x186>
  if (bytes != sizeof(value)) while(1);
 801cf3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cf3e:	2a04      	cmp	r2, #4
 801cf40:	d000      	beq.n	801cf44 <STM32Fs_WriteImageBMPGray+0x190>
 801cf42:	e7fe      	b.n	801cf42 <STM32Fs_WriteImageBMPGray+0x18e>
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801cf44:	a907      	add	r1, sp, #28
 801cf46:	ab0f      	add	r3, sp, #60	; 0x3c
 801cf48:	a810      	add	r0, sp, #64	; 0x40
 801cf4a:	f8cd 901c 	str.w	r9, [sp, #28]
 801cf4e:	f7fd ffe3 	bl	801af18 <f_write>
  if (res != FR_OK) while(1);
 801cf52:	4601      	mov	r1, r0
 801cf54:	b100      	cbz	r0, 801cf58 <STM32Fs_WriteImageBMPGray+0x1a4>
 801cf56:	e7fe      	b.n	801cf56 <STM32Fs_WriteImageBMPGray+0x1a2>
  if (bytes != sizeof(value)) while(1);
 801cf58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cf5a:	2a04      	cmp	r2, #4
 801cf5c:	d000      	beq.n	801cf60 <STM32Fs_WriteImageBMPGray+0x1ac>
 801cf5e:	e7fe      	b.n	801cf5e <STM32Fs_WriteImageBMPGray+0x1aa>
 801cf60:	9106      	str	r1, [sp, #24]
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801cf62:	ab0f      	add	r3, sp, #60	; 0x3c
 801cf64:	a906      	add	r1, sp, #24
 801cf66:	a810      	add	r0, sp, #64	; 0x40
 801cf68:	f7fd ffd6 	bl	801af18 <f_write>
  if (res != FR_OK) while(1);
 801cf6c:	4601      	mov	r1, r0
 801cf6e:	b100      	cbz	r0, 801cf72 <STM32Fs_WriteImageBMPGray+0x1be>
 801cf70:	e7fe      	b.n	801cf70 <STM32Fs_WriteImageBMPGray+0x1bc>
  if (bytes != sizeof(value)) while(1);
 801cf72:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cf74:	2a04      	cmp	r2, #4
 801cf76:	d000      	beq.n	801cf7a <STM32Fs_WriteImageBMPGray+0x1c6>
 801cf78:	e7fe      	b.n	801cf78 <STM32Fs_WriteImageBMPGray+0x1c4>
 801cf7a:	9105      	str	r1, [sp, #20]
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801cf7c:	ab0f      	add	r3, sp, #60	; 0x3c
 801cf7e:	a810      	add	r0, sp, #64	; 0x40
 801cf80:	a905      	add	r1, sp, #20
 801cf82:	f7fd ffc9 	bl	801af18 <f_write>
  if (res != FR_OK) while(1);
 801cf86:	b100      	cbz	r0, 801cf8a <STM32Fs_WriteImageBMPGray+0x1d6>
 801cf88:	e7fe      	b.n	801cf88 <STM32Fs_WriteImageBMPGray+0x1d4>
  if (bytes != sizeof(value)) while(1);
 801cf8a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cf8c:	2a04      	cmp	r2, #4
 801cf8e:	d000      	beq.n	801cf92 <STM32Fs_WriteImageBMPGray+0x1de>
 801cf90:	e7fe      	b.n	801cf90 <STM32Fs_WriteImageBMPGray+0x1dc>
 801cf92:	2000      	movs	r0, #0
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801cf94:	a904      	add	r1, sp, #16
 801cf96:	ab0f      	add	r3, sp, #60	; 0x3c
 801cf98:	9004      	str	r0, [sp, #16]
 801cf9a:	a810      	add	r0, sp, #64	; 0x40
 801cf9c:	f7fd ffbc 	bl	801af18 <f_write>
  if (res != FR_OK) while(1);
 801cfa0:	4601      	mov	r1, r0
 801cfa2:	b100      	cbz	r0, 801cfa6 <STM32Fs_WriteImageBMPGray+0x1f2>
 801cfa4:	e7fe      	b.n	801cfa4 <STM32Fs_WriteImageBMPGray+0x1f0>
  if (bytes != sizeof(value)) while(1);
 801cfa6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cfa8:	2a04      	cmp	r2, #4
 801cfaa:	d000      	beq.n	801cfae <STM32Fs_WriteImageBMPGray+0x1fa>
 801cfac:	e7fe      	b.n	801cfac <STM32Fs_WriteImageBMPGray+0x1f8>
 801cfae:	9103      	str	r1, [sp, #12]
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801cfb0:	ab0f      	add	r3, sp, #60	; 0x3c
 801cfb2:	a810      	add	r0, sp, #64	; 0x40
 801cfb4:	a903      	add	r1, sp, #12
 801cfb6:	f7fd ffaf 	bl	801af18 <f_write>
  if (res != FR_OK) while(1);
 801cfba:	b100      	cbz	r0, 801cfbe <STM32Fs_WriteImageBMPGray+0x20a>
 801cfbc:	e7fe      	b.n	801cfbc <STM32Fs_WriteImageBMPGray+0x208>
  if (bytes != sizeof(value)) while(1);
 801cfbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cfc0:	2b04      	cmp	r3, #4
 801cfc2:	d000      	beq.n	801cfc6 <STM32Fs_WriteImageBMPGray+0x212>
 801cfc4:	e7fe      	b.n	801cfc4 <STM32Fs_WriteImageBMPGray+0x210>
  for (int i = 0; i < 256; i++) {
 801cfc6:	4680      	mov	r8, r0
      write_long(&File, ((i) << 16) | ((i) << 8) | i);
 801cfc8:	ea4f 4c08 	mov.w	ip, r8, lsl #16
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801cfcc:	ab0f      	add	r3, sp, #60	; 0x3c
 801cfce:	2204      	movs	r2, #4
 801cfd0:	a90e      	add	r1, sp, #56	; 0x38
      write_long(&File, ((i) << 16) | ((i) << 8) | i);
 801cfd2:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801cfd6:	a810      	add	r0, sp, #64	; 0x40
      write_long(&File, ((i) << 16) | ((i) << 8) | i);
 801cfd8:	ea4c 0c08 	orr.w	ip, ip, r8
 801cfdc:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801cfe0:	f7fd ff9a 	bl	801af18 <f_write>
  if (res != FR_OK) while(1);
 801cfe4:	b100      	cbz	r0, 801cfe8 <STM32Fs_WriteImageBMPGray+0x234>
 801cfe6:	e7fe      	b.n	801cfe6 <STM32Fs_WriteImageBMPGray+0x232>
  if (bytes != sizeof(value)) while(1);
 801cfe8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cfea:	2b04      	cmp	r3, #4
 801cfec:	d000      	beq.n	801cff0 <STM32Fs_WriteImageBMPGray+0x23c>
 801cfee:	e7fe      	b.n	801cfee <STM32Fs_WriteImageBMPGray+0x23a>
  for (int i = 0; i < 256; i++) {
 801cff0:	f108 0801 	add.w	r8, r8, #1
 801cff4:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
 801cff8:	d1e6      	bne.n	801cfc8 <STM32Fs_WriteImageBMPGray+0x214>
  if (width == row_bytes) { /* (width % 4) == 0 */
 801cffa:	42ac      	cmp	r4, r5
 801cffc:	d01d      	beq.n	801d03a <STM32Fs_WriteImageBMPGray+0x286>
      for (int i = 0; i < height; i++) {
 801cffe:	4681      	mov	r9, r0
 801d000:	1b64      	subs	r4, r4, r5
 801d002:	45b9      	cmp	r9, r7
 801d004:	d031      	beq.n	801d06a <STM32Fs_WriteImageBMPGray+0x2b6>
  FRESULT res = f_write(fp, data, size, &bytes);
 801d006:	ab0f      	add	r3, sp, #60	; 0x3c
 801d008:	462a      	mov	r2, r5
 801d00a:	4631      	mov	r1, r6
 801d00c:	a810      	add	r0, sp, #64	; 0x40
 801d00e:	f7fd ff83 	bl	801af18 <f_write>
  if (res != FR_OK) while(1);
 801d012:	bb48      	cbnz	r0, 801d068 <STM32Fs_WriteImageBMPGray+0x2b4>
  if (bytes != size) while(1);
 801d014:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d016:	429d      	cmp	r5, r3
 801d018:	d125      	bne.n	801d066 <STM32Fs_WriteImageBMPGray+0x2b2>
          for (int j = 0; j < waste; j++) {
 801d01a:	4680      	mov	r8, r0
 801d01c:	4682      	mov	sl, r0
 801d01e:	45a0      	cmp	r8, r4
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801d020:	ab0f      	add	r3, sp, #60	; 0x3c
 801d022:	f04f 0201 	mov.w	r2, #1
 801d026:	f10d 0103 	add.w	r1, sp, #3
 801d02a:	a810      	add	r0, sp, #64	; 0x40
          for (int j = 0; j < waste; j++) {
 801d02c:	da18      	bge.n	801d060 <STM32Fs_WriteImageBMPGray+0x2ac>
 801d02e:	f88d a003 	strb.w	sl, [sp, #3]
  FRESULT res = f_write(fp, &value, sizeof(value), &bytes);
 801d032:	f7fd ff71 	bl	801af18 <f_write>
  if (res != FR_OK) while(1);
 801d036:	b140      	cbz	r0, 801d04a <STM32Fs_WriteImageBMPGray+0x296>
 801d038:	e7fe      	b.n	801d038 <STM32Fs_WriteImageBMPGray+0x284>
  FRESULT res = f_write(fp, data, size, &bytes);
 801d03a:	4631      	mov	r1, r6
 801d03c:	ab0f      	add	r3, sp, #60	; 0x3c
 801d03e:	464a      	mov	r2, r9
 801d040:	a810      	add	r0, sp, #64	; 0x40
 801d042:	f7fd ff69 	bl	801af18 <f_write>
  if (res != FR_OK) while(1);
 801d046:	b120      	cbz	r0, 801d052 <STM32Fs_WriteImageBMPGray+0x29e>
 801d048:	e7fe      	b.n	801d048 <STM32Fs_WriteImageBMPGray+0x294>
  if (bytes != sizeof(value)) while(1);
 801d04a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d04c:	2b01      	cmp	r3, #1
 801d04e:	d004      	beq.n	801d05a <STM32Fs_WriteImageBMPGray+0x2a6>
 801d050:	e7fe      	b.n	801d050 <STM32Fs_WriteImageBMPGray+0x29c>
  if (bytes != size) while(1);
 801d052:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d054:	4599      	cmp	r9, r3
 801d056:	d008      	beq.n	801d06a <STM32Fs_WriteImageBMPGray+0x2b6>
 801d058:	e7fe      	b.n	801d058 <STM32Fs_WriteImageBMPGray+0x2a4>
          for (int j = 0; j < waste; j++) {
 801d05a:	f108 0801 	add.w	r8, r8, #1
 801d05e:	e7de      	b.n	801d01e <STM32Fs_WriteImageBMPGray+0x26a>
      for (int i = 0; i < height; i++) {
 801d060:	4491      	add	r9, r2
 801d062:	442e      	add	r6, r5
 801d064:	e7cd      	b.n	801d002 <STM32Fs_WriteImageBMPGray+0x24e>
 801d066:	e7fe      	b.n	801d066 <STM32Fs_WriteImageBMPGray+0x2b2>
 801d068:	e7fe      	b.n	801d068 <STM32Fs_WriteImageBMPGray+0x2b4>
  f_close(&File);
 801d06a:	a810      	add	r0, sp, #64	; 0x40
 801d06c:	f7fe f94e 	bl	801b30c <f_close>
  return STM32FS_ERROR_NONE;
 801d070:	2000      	movs	r0, #0
 801d072:	e6b9      	b.n	801cde8 <STM32Fs_WriteImageBMPGray+0x34>

0801d074 <STM32Fs_WriteTextToFile>:
{
 801d074:	b530      	push	{r4, r5, lr}
  if (append_to_file == STM32FS_APPEND_TO_FILE)
 801d076:	2a01      	cmp	r2, #1
{
 801d078:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 801d07c:	460d      	mov	r5, r1
  if (f_open(&File, path, flags) != FR_OK)
 801d07e:	4601      	mov	r1, r0
 801d080:	bf0c      	ite	eq
 801d082:	2232      	moveq	r2, #50	; 0x32
 801d084:	220a      	movne	r2, #10
 801d086:	a802      	add	r0, sp, #8
 801d088:	f7fd fafc 	bl	801a684 <f_open>
 801d08c:	b9a0      	cbnz	r0, 801d0b8 <STM32Fs_WriteTextToFile+0x44>
  FRESULT res = f_write(&File, (uint8_t *)content, strlen(content), (void *)&byteswritten);
 801d08e:	4628      	mov	r0, r5
 801d090:	f7e3 f930 	bl	80002f4 <strlen>
 801d094:	4629      	mov	r1, r5
 801d096:	4602      	mov	r2, r0
 801d098:	ab01      	add	r3, sp, #4
 801d09a:	a802      	add	r0, sp, #8
 801d09c:	f7fd ff3c 	bl	801af18 <f_write>
  if (res != FR_OK)
 801d0a0:	4604      	mov	r4, r0
 801d0a2:	b968      	cbnz	r0, 801d0c0 <STM32Fs_WriteTextToFile+0x4c>
  if (byteswritten != strlen(content))
 801d0a4:	4628      	mov	r0, r5
 801d0a6:	f7e3 f925 	bl	80002f4 <strlen>
 801d0aa:	9b01      	ldr	r3, [sp, #4]
 801d0ac:	4298      	cmp	r0, r3
 801d0ae:	d00b      	beq.n	801d0c8 <STM32Fs_WriteTextToFile+0x54>
    return STM32FS_ERROR_FILE_WRITE_UNDERFLOW;
 801d0b0:	2008      	movs	r0, #8
}
 801d0b2:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 801d0b6:	bd30      	pop	{r4, r5, pc}
    return STM32FS_ERROR_FOPEN_FAIL;
 801d0b8:	2003      	movs	r0, #3
}
 801d0ba:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 801d0be:	bd30      	pop	{r4, r5, pc}
    return STM32FS_ERROR_FWRITE_FAIL;
 801d0c0:	2004      	movs	r0, #4
}
 801d0c2:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 801d0c6:	bd30      	pop	{r4, r5, pc}
  f_close(&File);
 801d0c8:	a802      	add	r0, sp, #8
 801d0ca:	f7fe f91f 	bl	801b30c <f_close>
  return STM32FS_ERROR_NONE;
 801d0ce:	4620      	mov	r0, r4
}
 801d0d0:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 801d0d4:	bd30      	pop	{r4, r5, pc}
 801d0d6:	bf00      	nop

0801d0d8 <STM23Fs_ReadImageBMP>:
 * @param path[in] Path to the file in filesystem
 * @param out_buffer[out] pixel buffer
 * @warning In order to know the size of out_buffer, it's recommended to call STM32Fs_GetImageInfoBMP beforehand
 * @return stm32fs_err_t
 */
stm32fs_err_t STM23Fs_ReadImageBMP(const char *path, uint8_t *out_buffer){
 801d0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  static FIL File;
  stm32fs_err_t err;

  /* Open the file */
  if (f_open(&File, path, FA_OPEN_EXISTING | FA_READ) != FR_OK)
 801d0dc:	2201      	movs	r2, #1
stm32fs_err_t STM23Fs_ReadImageBMP(const char *path, uint8_t *out_buffer){
 801d0de:	b091      	sub	sp, #68	; 0x44
 801d0e0:	468b      	mov	fp, r1
  if (f_open(&File, path, FA_OPEN_EXISTING | FA_READ) != FR_OK)
 801d0e2:	4601      	mov	r1, r0
 801d0e4:	48b0      	ldr	r0, [pc, #704]	; (801d3a8 <STM23Fs_ReadImageBMP+0x2d0>)
 801d0e6:	f7fd facd 	bl	801a684 <f_open>
 801d0ea:	2800      	cmp	r0, #0
 801d0ec:	f040 808a 	bne.w	801d204 <STM23Fs_ReadImageBMP+0x12c>
  F_READ_SAFE(File, header, 2);
 801d0f0:	ab0b      	add	r3, sp, #44	; 0x2c
 801d0f2:	2202      	movs	r2, #2
 801d0f4:	48ac      	ldr	r0, [pc, #688]	; (801d3a8 <STM23Fs_ReadImageBMP+0x2d0>)
 801d0f6:	a90a      	add	r1, sp, #40	; 0x28
 801d0f8:	f7fd fd3e 	bl	801ab78 <f_read>
 801d0fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d0fe:	2b02      	cmp	r3, #2
 801d100:	d176      	bne.n	801d1f0 <STM23Fs_ReadImageBMP+0x118>
  if (header[0] != 'B' || header[1] != 'M')
 801d102:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 801d106:	2b42      	cmp	r3, #66	; 0x42
 801d108:	d17a      	bne.n	801d200 <STM23Fs_ReadImageBMP+0x128>
 801d10a:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 801d10e:	2b4d      	cmp	r3, #77	; 0x4d
 801d110:	d176      	bne.n	801d200 <STM23Fs_ReadImageBMP+0x128>
 801d112:	ab0b      	add	r3, sp, #44	; 0x2c
 801d114:	aa08      	add	r2, sp, #32
 801d116:	a907      	add	r1, sp, #28
 801d118:	48a3      	ldr	r0, [pc, #652]	; (801d3a8 <STM23Fs_ReadImageBMP+0x2d0>)
 801d11a:	9300      	str	r3, [sp, #0]
 801d11c:	ab09      	add	r3, sp, #36	; 0x24
 801d11e:	f7ff f96d 	bl	801c3fc <GetImageInfoBMP.part.0>

  uint32_t width, height, bpp;

  err = GetImageInfoBMP(&File, &width, &height, &bpp, &rs);

  if( err != STM32FS_ERROR_NONE ){
 801d122:	4606      	mov	r6, r0
 801d124:	2800      	cmp	r0, #0
 801d126:	d164      	bne.n	801d1f2 <STM23Fs_ReadImageBMP+0x11a>
  if (rs->bmp_bpp == 8) {
 801d128:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
    f_close(&File);
    return err;
  }

  err = ReadImageBMP(&File, out_buffer , width, height, &rs);
 801d12c:	e9dd 5207 	ldrd	r5, r2, [sp, #28]
  if (rs->bmp_bpp == 8) {
 801d130:	2b08      	cmp	r3, #8
  err = ReadImageBMP(&File, out_buffer , width, height, &rs);
 801d132:	9203      	str	r2, [sp, #12]
  if (rs->bmp_bpp == 8) {
 801d134:	d06b      	beq.n	801d20e <STM23Fs_ReadImageBMP+0x136>
  } else if (rs->bmp_bpp == 16) {
 801d136:	2b10      	cmp	r3, #16
 801d138:	f000 80a5 	beq.w	801d286 <STM23Fs_ReadImageBMP+0x1ae>
  } else if (rs->bmp_bpp == 24) {
 801d13c:	2b18      	cmp	r3, #24
 801d13e:	d158      	bne.n	801d1f2 <STM23Fs_ReadImageBMP+0x11a>
    for (int i = 0; i < height; i++) {
 801d140:	2a00      	cmp	r2, #0
 801d142:	d056      	beq.n	801d1f2 <STM23Fs_ReadImageBMP+0x11a>
 801d144:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 801d148:	4682      	mov	sl, r0
        F_READ_SAFE(File, &b, sizeof(b));
 801d14a:	4f97      	ldr	r7, [pc, #604]	; (801d3a8 <STM23Fs_ReadImageBMP+0x2d0>)
 801d14c:	461e      	mov	r6, r3
 801d14e:	9004      	str	r0, [sp, #16]
      for (int j = 0, jj = rs->bmp_row_bytes / 3; j < jj; j++) {
 801d150:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d152:	4a96      	ldr	r2, [pc, #600]	; (801d3ac <STM23Fs_ReadImageBMP+0x2d4>)
 801d154:	fba2 2803 	umull	r2, r8, r2, r3
 801d158:	ea5f 0858 	movs.w	r8, r8, lsr #1
 801d15c:	f000 80f9 	beq.w	801d352 <STM23Fs_ReadImageBMP+0x27a>
 801d160:	9b03      	ldr	r3, [sp, #12]
 801d162:	2400      	movs	r4, #0
 801d164:	f103 39ff 	add.w	r9, r3, #4294967295
 801d168:	eba9 090a 	sub.w	r9, r9, sl
 801d16c:	e030      	b.n	801d1d0 <STM23Fs_ReadImageBMP+0xf8>
        F_READ_SAFE(File, &g, sizeof(g));
 801d16e:	f7fd fd03 	bl	801ab78 <f_read>
 801d172:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
        F_READ_SAFE(File, &r, sizeof(r));
 801d176:	ab0a      	add	r3, sp, #40	; 0x28
 801d178:	f10d 011a 	add.w	r1, sp, #26
        F_READ_SAFE(File, &g, sizeof(g));
 801d17c:	f1bc 0f01 	cmp.w	ip, #1
        F_READ_SAFE(File, &r, sizeof(r));
 801d180:	4638      	mov	r0, r7
 801d182:	4662      	mov	r2, ip
        F_READ_SAFE(File, &g, sizeof(g));
 801d184:	d134      	bne.n	801d1f0 <STM23Fs_ReadImageBMP+0x118>
        F_READ_SAFE(File, &r, sizeof(r));
 801d186:	f7fd fcf7 	bl	801ab78 <f_read>
 801d18a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d18c:	2b01      	cmp	r3, #1
 801d18e:	d12f      	bne.n	801d1f0 <STM23Fs_ReadImageBMP+0x118>
        if (j < width) {
 801d190:	42a5      	cmp	r5, r4
 801d192:	d919      	bls.n	801d1c8 <STM23Fs_ReadImageBMP+0xf0>
          int x = (rs->bmp_h < 0) ? (width - j - 1) : j; // vertical flip
 801d194:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d196:	4623      	mov	r3, r4
 801d198:	2a00      	cmp	r2, #0
 801d19a:	da01      	bge.n	801d1a0 <STM23Fs_ReadImageBMP+0xc8>
 801d19c:	1e6b      	subs	r3, r5, #1
 801d19e:	1b1b      	subs	r3, r3, r4
          int y = (rs->bmp_w < 0) ? (height - i - 1) : i; // horizontal flip
 801d1a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
          IM_SET_RGB888_PIXEL(pixels, x, y, width, r, g, b);
 801d1a2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801d1a6:	f89d 001a 	ldrb.w	r0, [sp, #26]
 801d1aa:	2900      	cmp	r1, #0
 801d1ac:	f89d 1019 	ldrb.w	r1, [sp, #25]
 801d1b0:	bfac      	ite	ge
 801d1b2:	4653      	movge	r3, sl
 801d1b4:	464b      	movlt	r3, r9
 801d1b6:	fb06 2303 	mla	r3, r6, r3, r2
 801d1ba:	f89d 2018 	ldrb.w	r2, [sp, #24]
 801d1be:	f80b 0003 	strb.w	r0, [fp, r3]
 801d1c2:	445b      	add	r3, fp
 801d1c4:	7059      	strb	r1, [r3, #1]
 801d1c6:	709a      	strb	r2, [r3, #2]
      for (int j = 0, jj = rs->bmp_row_bytes / 3; j < jj; j++) {
 801d1c8:	3401      	adds	r4, #1
 801d1ca:	45a0      	cmp	r8, r4
 801d1cc:	f000 80c0 	beq.w	801d350 <STM23Fs_ReadImageBMP+0x278>
        F_READ_SAFE(File, &b, sizeof(b));
 801d1d0:	ab0a      	add	r3, sp, #40	; 0x28
 801d1d2:	2201      	movs	r2, #1
 801d1d4:	a906      	add	r1, sp, #24
 801d1d6:	4638      	mov	r0, r7
 801d1d8:	f7fd fcce 	bl	801ab78 <f_read>
 801d1dc:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
        F_READ_SAFE(File, &g, sizeof(g));
 801d1e0:	ab0a      	add	r3, sp, #40	; 0x28
 801d1e2:	f10d 0119 	add.w	r1, sp, #25
        F_READ_SAFE(File, &b, sizeof(b));
 801d1e6:	f1bc 0f01 	cmp.w	ip, #1
        F_READ_SAFE(File, &g, sizeof(g));
 801d1ea:	4638      	mov	r0, r7
 801d1ec:	4662      	mov	r2, ip
        F_READ_SAFE(File, &b, sizeof(b));
 801d1ee:	d0be      	beq.n	801d16e <STM23Fs_ReadImageBMP+0x96>
        F_READ_SAFE(File, &ignore, sizeof(ignore));
 801d1f0:	2606      	movs	r6, #6

  f_close(&File);
 801d1f2:	486d      	ldr	r0, [pc, #436]	; (801d3a8 <STM23Fs_ReadImageBMP+0x2d0>)
 801d1f4:	f7fe f88a 	bl	801b30c <f_close>

  return err;
}
 801d1f8:	4630      	mov	r0, r6
 801d1fa:	b011      	add	sp, #68	; 0x44
 801d1fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return STM32FS_ERROR_FILE_NOT_SUPPORTED;
 801d200:	2605      	movs	r6, #5
 801d202:	e7f6      	b.n	801d1f2 <STM23Fs_ReadImageBMP+0x11a>
    return STM32FS_ERROR_FOPEN_FAIL;
 801d204:	2603      	movs	r6, #3
}
 801d206:	4630      	mov	r0, r6
 801d208:	b011      	add	sp, #68	; 0x44
 801d20a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((rs->bmp_h < 0) && (rs->bmp_w >= 0) && (width == rs->bmp_row_bytes)) {
 801d20e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d210:	2b00      	cmp	r3, #0
 801d212:	db72      	blt.n	801d2fa <STM23Fs_ReadImageBMP+0x222>
      for (int i = 0; i < height; i++) {
 801d214:	2a00      	cmp	r2, #0
 801d216:	d0ec      	beq.n	801d1f2 <STM23Fs_ReadImageBMP+0x11a>
 801d218:	3a01      	subs	r2, #1
 801d21a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d21c:	f04f 0900 	mov.w	r9, #0
          F_READ_SAFE(File, &pixel, sizeof(pixel));
 801d220:	f8df 8184 	ldr.w	r8, [pc, #388]	; 801d3a8 <STM23Fs_ReadImageBMP+0x2d0>
 801d224:	9204      	str	r2, [sp, #16]
        for (int j = 0; j < rs->bmp_row_bytes; j++) {
 801d226:	2b00      	cmp	r3, #0
 801d228:	f000 80ae 	beq.w	801d388 <STM23Fs_ReadImageBMP+0x2b0>
 801d22c:	9b04      	ldr	r3, [sp, #16]
 801d22e:	2400      	movs	r4, #0
 801d230:	f10d 071a 	add.w	r7, sp, #26
 801d234:	eba3 0a09 	sub.w	sl, r3, r9
 801d238:	e015      	b.n	801d266 <STM23Fs_ReadImageBMP+0x18e>
          if (j < width) {
 801d23a:	42a5      	cmp	r5, r4
 801d23c:	d90f      	bls.n	801d25e <STM23Fs_ReadImageBMP+0x186>
            int x = (rs->bmp_w < 0) ? (width - j - 1) : j; // horizontal flip (BMP file perspective)
 801d23e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d240:	4622      	mov	r2, r4
 801d242:	2b00      	cmp	r3, #0
 801d244:	da01      	bge.n	801d24a <STM23Fs_ReadImageBMP+0x172>
 801d246:	1e6a      	subs	r2, r5, #1
 801d248:	1b12      	subs	r2, r2, r4
            int y = (rs->bmp_h < 0) ? i : (height - i - 1); // vertical flip (BMP file perspective)
 801d24a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            IM_SET_GS_PIXEL(pixels, x, y, width, pixel);
 801d24c:	f89d 101a 	ldrb.w	r1, [sp, #26]
 801d250:	2b00      	cmp	r3, #0
 801d252:	bfb4      	ite	lt
 801d254:	464b      	movlt	r3, r9
 801d256:	4653      	movge	r3, sl
 801d258:	fb05 b303 	mla	r3, r5, r3, fp
 801d25c:	5499      	strb	r1, [r3, r2]
        for (int j = 0; j < rs->bmp_row_bytes; j++) {
 801d25e:	3401      	adds	r4, #1
 801d260:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d262:	429c      	cmp	r4, r3
 801d264:	d209      	bcs.n	801d27a <STM23Fs_ReadImageBMP+0x1a2>
          F_READ_SAFE(File, &pixel, sizeof(pixel));
 801d266:	ab0a      	add	r3, sp, #40	; 0x28
 801d268:	2201      	movs	r2, #1
 801d26a:	4639      	mov	r1, r7
 801d26c:	4640      	mov	r0, r8
 801d26e:	f7fd fc83 	bl	801ab78 <f_read>
 801d272:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d274:	2b01      	cmp	r3, #1
 801d276:	d0e0      	beq.n	801d23a <STM23Fs_ReadImageBMP+0x162>
 801d278:	e7ba      	b.n	801d1f0 <STM23Fs_ReadImageBMP+0x118>
 801d27a:	9a03      	ldr	r2, [sp, #12]
      for (int i = 0; i < height; i++) {
 801d27c:	f109 0901 	add.w	r9, r9, #1
 801d280:	4591      	cmp	r9, r2
 801d282:	d1d0      	bne.n	801d226 <STM23Fs_ReadImageBMP+0x14e>
 801d284:	e7b5      	b.n	801d1f2 <STM23Fs_ReadImageBMP+0x11a>
    if ((rs->bmp_h < 0) && (rs->bmp_w >= 0) &&
 801d286:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d288:	2b00      	cmp	r3, #0
 801d28a:	db4b      	blt.n	801d324 <STM23Fs_ReadImageBMP+0x24c>
      for (int i = 0; i < height; i++) {
 801d28c:	9b03      	ldr	r3, [sp, #12]
 801d28e:	2b00      	cmp	r3, #0
 801d290:	d0af      	beq.n	801d1f2 <STM23Fs_ReadImageBMP+0x11a>
 801d292:	f103 3aff 	add.w	sl, r3, #4294967295
 801d296:	2300      	movs	r3, #0
 801d298:	1e6a      	subs	r2, r5, #1
 801d29a:	9605      	str	r6, [sp, #20]
          F_READ_SAFE(File, &pixel, sizeof(pixel));
 801d29c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 801d3a8 <STM23Fs_ReadImageBMP+0x2d0>
 801d2a0:	fb05 fa0a 	mul.w	sl, r5, sl
 801d2a4:	461e      	mov	r6, r3
 801d2a6:	9204      	str	r2, [sp, #16]
        for (int j = 0, jj = rs->bmp_row_bytes / 2; j < jj; j++) {
 801d2a8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801d2aa:	087f      	lsrs	r7, r7, #1
 801d2ac:	d01d      	beq.n	801d2ea <STM23Fs_ReadImageBMP+0x212>
 801d2ae:	2400      	movs	r4, #0
 801d2b0:	f10d 081a 	add.w	r8, sp, #26
 801d2b4:	e00e      	b.n	801d2d4 <STM23Fs_ReadImageBMP+0x1fc>
          if (j < width) {
 801d2b6:	42a5      	cmp	r5, r4
 801d2b8:	d909      	bls.n	801d2ce <STM23Fs_ReadImageBMP+0x1f6>
            int x = (rs->bmp_w < 0) ? (width - j - 1) : j; // vertical flip
 801d2ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d2bc:	2a00      	cmp	r2, #0
 801d2be:	da01      	bge.n	801d2c4 <STM23Fs_ReadImageBMP+0x1ec>
 801d2c0:	9b04      	ldr	r3, [sp, #16]
 801d2c2:	1b1b      	subs	r3, r3, r4
            IM_SET_RGB565_PIXEL(pixels, x, y, width, pixel);
 801d2c4:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801d2c8:	4453      	add	r3, sl
 801d2ca:	f82b 2013 	strh.w	r2, [fp, r3, lsl #1]
        for (int j = 0, jj = rs->bmp_row_bytes / 2; j < jj; j++) {
 801d2ce:	3401      	adds	r4, #1
 801d2d0:	42a7      	cmp	r7, r4
 801d2d2:	d00a      	beq.n	801d2ea <STM23Fs_ReadImageBMP+0x212>
          F_READ_SAFE(File, &pixel, sizeof(pixel));
 801d2d4:	ab0a      	add	r3, sp, #40	; 0x28
 801d2d6:	2202      	movs	r2, #2
 801d2d8:	4641      	mov	r1, r8
 801d2da:	4648      	mov	r0, r9
 801d2dc:	f7fd fc4c 	bl	801ab78 <f_read>
 801d2e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
          if (j < width) {
 801d2e2:	4623      	mov	r3, r4
          F_READ_SAFE(File, &pixel, sizeof(pixel));
 801d2e4:	2a02      	cmp	r2, #2
 801d2e6:	d0e6      	beq.n	801d2b6 <STM23Fs_ReadImageBMP+0x1de>
 801d2e8:	e782      	b.n	801d1f0 <STM23Fs_ReadImageBMP+0x118>
      for (int i = 0; i < height; i++) {
 801d2ea:	3601      	adds	r6, #1
 801d2ec:	9b03      	ldr	r3, [sp, #12]
 801d2ee:	ebaa 0a05 	sub.w	sl, sl, r5
 801d2f2:	429e      	cmp	r6, r3
 801d2f4:	d1d8      	bne.n	801d2a8 <STM23Fs_ReadImageBMP+0x1d0>
 801d2f6:	9e05      	ldr	r6, [sp, #20]
 801d2f8:	e77b      	b.n	801d1f2 <STM23Fs_ReadImageBMP+0x11a>
    if ((rs->bmp_h < 0) && (rs->bmp_w >= 0) && (width == rs->bmp_row_bytes)) {
 801d2fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d2fc:	2b00      	cmp	r3, #0
 801d2fe:	db89      	blt.n	801d214 <STM23Fs_ReadImageBMP+0x13c>
 801d300:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d302:	429d      	cmp	r5, r3
 801d304:	d186      	bne.n	801d214 <STM23Fs_ReadImageBMP+0x13c>
 801d306:	4613      	mov	r3, r2
      F_READ_SAFE(File, pixels, height * width);
 801d308:	4659      	mov	r1, fp
 801d30a:	4827      	ldr	r0, [pc, #156]	; (801d3a8 <STM23Fs_ReadImageBMP+0x2d0>)
 801d30c:	fb03 f305 	mul.w	r3, r3, r5
 801d310:	461d      	mov	r5, r3
 801d312:	ab0a      	add	r3, sp, #40	; 0x28
 801d314:	462a      	mov	r2, r5
 801d316:	f7fd fc2f 	bl	801ab78 <f_read>
 801d31a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d31c:	429d      	cmp	r5, r3
 801d31e:	bf18      	it	ne
 801d320:	2606      	movne	r6, #6
 801d322:	e766      	b.n	801d1f2 <STM23Fs_ReadImageBMP+0x11a>
    if ((rs->bmp_h < 0) && (rs->bmp_w >= 0) &&
 801d324:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d326:	2b00      	cmp	r3, #0
 801d328:	dbb0      	blt.n	801d28c <STM23Fs_ReadImageBMP+0x1b4>
 801d32a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d32c:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
 801d330:	d1ac      	bne.n	801d28c <STM23Fs_ReadImageBMP+0x1b4>
 801d332:	4614      	mov	r4, r2
      F_READ_SAFE(File, pixels, 2 * width * height);
 801d334:	ab0a      	add	r3, sp, #40	; 0x28
 801d336:	4659      	mov	r1, fp
 801d338:	481b      	ldr	r0, [pc, #108]	; (801d3a8 <STM23Fs_ReadImageBMP+0x2d0>)
 801d33a:	fb04 f405 	mul.w	r4, r4, r5
 801d33e:	0064      	lsls	r4, r4, #1
 801d340:	4622      	mov	r2, r4
 801d342:	f7fd fc19 	bl	801ab78 <f_read>
 801d346:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d348:	429c      	cmp	r4, r3
 801d34a:	bf18      	it	ne
 801d34c:	2606      	movne	r6, #6
 801d34e:	e750      	b.n	801d1f2 <STM23Fs_ReadImageBMP+0x11a>
 801d350:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
      for (int j = 0, jj = rs->bmp_row_bytes % 3; j < jj; j++) {
 801d352:	4a16      	ldr	r2, [pc, #88]	; (801d3ac <STM23Fs_ReadImageBMP+0x2d4>)
 801d354:	fba2 2803 	umull	r2, r8, r2, r3
 801d358:	ea4f 0858 	mov.w	r8, r8, lsr #1
 801d35c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801d360:	ebb3 0808 	subs.w	r8, r3, r8
 801d364:	d017      	beq.n	801d396 <STM23Fs_ReadImageBMP+0x2be>
 801d366:	2400      	movs	r4, #0
 801d368:	f10d 091a 	add.w	r9, sp, #26
 801d36c:	e001      	b.n	801d372 <STM23Fs_ReadImageBMP+0x29a>
 801d36e:	45a0      	cmp	r8, r4
 801d370:	d011      	beq.n	801d396 <STM23Fs_ReadImageBMP+0x2be>
        F_READ_SAFE(File, &ignore, sizeof(ignore));
 801d372:	ab0a      	add	r3, sp, #40	; 0x28
 801d374:	2201      	movs	r2, #1
 801d376:	4649      	mov	r1, r9
 801d378:	4638      	mov	r0, r7
 801d37a:	f7fd fbfd 	bl	801ab78 <f_read>
 801d37e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
      for (int j = 0, jj = rs->bmp_row_bytes % 3; j < jj; j++) {
 801d380:	3401      	adds	r4, #1
        F_READ_SAFE(File, &ignore, sizeof(ignore));
 801d382:	2b01      	cmp	r3, #1
 801d384:	d0f3      	beq.n	801d36e <STM23Fs_ReadImageBMP+0x296>
 801d386:	e733      	b.n	801d1f0 <STM23Fs_ReadImageBMP+0x118>
      for (int i = 0; i < height; i++) {
 801d388:	f109 0901 	add.w	r9, r9, #1
 801d38c:	9a03      	ldr	r2, [sp, #12]
 801d38e:	4591      	cmp	r9, r2
 801d390:	f47f af74 	bne.w	801d27c <STM23Fs_ReadImageBMP+0x1a4>
 801d394:	e72d      	b.n	801d1f2 <STM23Fs_ReadImageBMP+0x11a>
    for (int i = 0; i < height; i++) {
 801d396:	f10a 0a01 	add.w	sl, sl, #1
 801d39a:	9b03      	ldr	r3, [sp, #12]
 801d39c:	459a      	cmp	sl, r3
 801d39e:	f47f aed7 	bne.w	801d150 <STM23Fs_ReadImageBMP+0x78>
 801d3a2:	9e04      	ldr	r6, [sp, #16]
 801d3a4:	e725      	b.n	801d1f2 <STM23Fs_ReadImageBMP+0x11a>
 801d3a6:	bf00      	nop
 801d3a8:	240092ec 	.word	0x240092ec
 801d3ac:	aaaaaaab 	.word	0xaaaaaaab

0801d3b0 <Image_CheckResizeMemoryLayout>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/

/* Functions Definition ------------------------------------------------------*/
uint32_t Image_CheckResizeMemoryLayout(Image_TypeDef *srcImage, Image_TypeDef *dstImage)
{
 801d3b0:	b430      	push	{r4, r5}
  uint32_t src_size=srcImage->width*srcImage->height*IMG_BYTES_PER_PX(srcImage->format);
 801d3b2:	7b02      	ldrb	r2, [r0, #12]
 801d3b4:	e9d0 4300 	ldrd	r4, r3, [r0]
 801d3b8:	fb03 f304 	mul.w	r3, r3, r4
 801d3bc:	b13a      	cbz	r2, 801d3ce <Image_CheckResizeMemoryLayout+0x1e>
 801d3be:	2a01      	cmp	r2, #1
 801d3c0:	d028      	beq.n	801d414 <Image_CheckResizeMemoryLayout+0x64>
 801d3c2:	2a02      	cmp	r2, #2
 801d3c4:	d030      	beq.n	801d428 <Image_CheckResizeMemoryLayout+0x78>
 801d3c6:	2a03      	cmp	r2, #3
 801d3c8:	bf0c      	ite	eq
 801d3ca:	009b      	lsleq	r3, r3, #2
 801d3cc:	2300      	movne	r3, #0
 801d3ce:	688c      	ldr	r4, [r1, #8]
  uint32_t dst_size=dstImage->width*dstImage->height*IMG_BYTES_PER_PX(dstImage->format);
 801d3d0:	e9d1 5200 	ldrd	r5, r2, [r1]
 801d3d4:	7b09      	ldrb	r1, [r1, #12]
 801d3d6:	fb02 f205 	mul.w	r2, r2, r5
 801d3da:	1e65      	subs	r5, r4, #1
 801d3dc:	b131      	cbz	r1, 801d3ec <Image_CheckResizeMemoryLayout+0x3c>
 801d3de:	2901      	cmp	r1, #1
 801d3e0:	d020      	beq.n	801d424 <Image_CheckResizeMemoryLayout+0x74>
 801d3e2:	2902      	cmp	r1, #2
 801d3e4:	d01b      	beq.n	801d41e <Image_CheckResizeMemoryLayout+0x6e>
 801d3e6:	2903      	cmp	r1, #3
 801d3e8:	d103      	bne.n	801d3f2 <Image_CheckResizeMemoryLayout+0x42>
 801d3ea:	0092      	lsls	r2, r2, #2
  uint32_t src_start_address=(uint32_t)srcImage->pData;
  uint32_t dst_start_address=(uint32_t)dstImage->pData;
  uint32_t src_end_address=src_start_address + src_size -1;
  uint32_t dst_end_address=dst_start_address + dst_size -1;
  
  if(src_size < dst_size)
 801d3ec:	4293      	cmp	r3, r2
 801d3ee:	d310      	bcc.n	801d412 <Image_CheckResizeMemoryLayout+0x62>
  uint32_t dst_end_address=dst_start_address + dst_size -1;
 801d3f0:	4415      	add	r5, r2
 801d3f2:	6881      	ldr	r1, [r0, #8]
 801d3f4:	1e4a      	subs	r2, r1, #1
  {
    while(1);
  }
  else
  {
    if((src_start_address >= dst_start_address) || (src_end_address <= dst_start_address))
 801d3f6:	42a1      	cmp	r1, r4
 801d3f8:	4413      	add	r3, r2
 801d3fa:	d20e      	bcs.n	801d41a <Image_CheckResizeMemoryLayout+0x6a>
 801d3fc:	429c      	cmp	r4, r3
 801d3fe:	bf34      	ite	cc
 801d400:	2000      	movcc	r0, #0
 801d402:	2001      	movcs	r0, #1
 801d404:	b948      	cbnz	r0, 801d41a <Image_CheckResizeMemoryLayout+0x6a>
    {
      return 1;
    }
    else if((src_end_address > dst_start_address) && (dst_end_address >= src_end_address))
 801d406:	429c      	cmp	r4, r3
 801d408:	d206      	bcs.n	801d418 <Image_CheckResizeMemoryLayout+0x68>
 801d40a:	429d      	cmp	r5, r3
 801d40c:	d304      	bcc.n	801d418 <Image_CheckResizeMemoryLayout+0x68>
    else
    {
      while(1);
    }
  }
}
 801d40e:	bc30      	pop	{r4, r5}
 801d410:	4770      	bx	lr
 801d412:	e7fe      	b.n	801d412 <Image_CheckResizeMemoryLayout+0x62>
 801d414:	005b      	lsls	r3, r3, #1
 801d416:	e7da      	b.n	801d3ce <Image_CheckResizeMemoryLayout+0x1e>
 801d418:	e7fe      	b.n	801d418 <Image_CheckResizeMemoryLayout+0x68>
      return 1;
 801d41a:	2001      	movs	r0, #1
 801d41c:	e7f7      	b.n	801d40e <Image_CheckResizeMemoryLayout+0x5e>
 801d41e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d422:	e7e3      	b.n	801d3ec <Image_CheckResizeMemoryLayout+0x3c>
 801d424:	0052      	lsls	r2, r2, #1
 801d426:	e7e1      	b.n	801d3ec <Image_CheckResizeMemoryLayout+0x3c>
 801d428:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d42c:	e7cf      	b.n	801d3ce <Image_CheckResizeMemoryLayout+0x1e>
 801d42e:	bf00      	nop

0801d430 <ImageResize_NearestNeighbor>:
* @param  Top2Bottom   Value of 1/0 indicates that the rescales performs from the top/bottom to the bottom/top of the buffers
* @retval void         None
*/
void ImageResize_NearestNeighbor(Image_TypeDef *srcImage, Image_TypeDef *dstImage, Roi_TypeDef *roi)
{
  Resize_Frame(srcImage, dstImage, roi);
 801d430:	f7fe beb2 	b.w	801c198 <Resize_Frame>

0801d434 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 801d434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d438:	4603      	mov	r3, r0
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 801d43a:	4c15      	ldr	r4, [pc, #84]	; (801d490 <UTIL_LCD_SetFuncDriver+0x5c>)
 801d43c:	6807      	ldr	r7, [r0, #0]
  FuncDriver.GetXSize       = pDrv->GetXSize;
  FuncDriver.GetYSize       = pDrv->GetYSize;
  FuncDriver.SetLayer       = pDrv->SetLayer;
  FuncDriver.GetFormat      = pDrv->GetFormat;

  DrawProp->LcdLayer = 0;
 801d43e:	2500      	movs	r5, #0
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 801d440:	6842      	ldr	r2, [r0, #4]
  DrawProp->LcdLayer = 0;
 801d442:	4e14      	ldr	r6, [pc, #80]	; (801d494 <UTIL_LCD_SetFuncDriver+0x60>)
  DrawProp->LcdDevice = 0;
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 801d444:	4628      	mov	r0, r5
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 801d446:	e9c4 7200 	strd	r7, r2, [r4]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 801d44a:	e9d3 7202 	ldrd	r7, r2, [r3, #8]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 801d44e:	f106 0114 	add.w	r1, r6, #20
  DrawProp->LcdLayer = 0;
 801d452:	60f5      	str	r5, [r6, #12]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 801d454:	e9c4 7202 	strd	r7, r2, [r4, #8]
  FuncDriver.FillRect       = pDrv->FillRect;
 801d458:	691a      	ldr	r2, [r3, #16]
  DrawProp->LcdDevice = 0;
 801d45a:	6135      	str	r5, [r6, #16]
  FuncDriver.FillRect       = pDrv->FillRect;
 801d45c:	6122      	str	r2, [r4, #16]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 801d45e:	e9d3 7205 	ldrd	r7, r2, [r3, #20]
 801d462:	e9c4 7205 	strd	r7, r2, [r4, #20]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 801d466:	e9d3 7208 	ldrd	r7, r2, [r3, #32]
 801d46a:	e9c4 7208 	strd	r7, r2, [r4, #32]
  FuncDriver.GetFormat      = pDrv->GetFormat;
 801d46e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  FuncDriver.GetXSize       = pDrv->GetXSize;
 801d470:	69db      	ldr	r3, [r3, #28]
  FuncDriver.GetFormat      = pDrv->GetFormat;
 801d472:	62a2      	str	r2, [r4, #40]	; 0x28
  FuncDriver.GetXSize       = pDrv->GetXSize;
 801d474:	61e3      	str	r3, [r4, #28]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 801d476:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 801d478:	6a23      	ldr	r3, [r4, #32]
 801d47a:	f106 0118 	add.w	r1, r6, #24
 801d47e:	4628      	mov	r0, r5
 801d480:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 801d482:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801d484:	f106 011c 	add.w	r1, r6, #28
 801d488:	4628      	mov	r0, r5
}
 801d48a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 801d48e:	4718      	bx	r3
 801d490:	24009678 	.word	0x24009678
 801d494:	24009638 	.word	0x24009638

0801d498 <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
 801d498:	b538      	push	{r3, r4, r5, lr}
  if(FuncDriver.SetLayer != NULL)
 801d49a:	4b05      	ldr	r3, [pc, #20]	; (801d4b0 <UTIL_LCD_SetLayer+0x18>)
 801d49c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d49e:	b133      	cbz	r3, 801d4ae <UTIL_LCD_SetLayer+0x16>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
 801d4a0:	4d04      	ldr	r5, [pc, #16]	; (801d4b4 <UTIL_LCD_SetLayer+0x1c>)
 801d4a2:	4604      	mov	r4, r0
 801d4a4:	4601      	mov	r1, r0
 801d4a6:	6928      	ldr	r0, [r5, #16]
 801d4a8:	4798      	blx	r3
 801d4aa:	b900      	cbnz	r0, 801d4ae <UTIL_LCD_SetLayer+0x16>
    {
      DrawProp->LcdLayer = Layer;
 801d4ac:	60ec      	str	r4, [r5, #12]
    }
  }
}
 801d4ae:	bd38      	pop	{r3, r4, r5, pc}
 801d4b0:	24009678 	.word	0x24009678
 801d4b4:	24009638 	.word	0x24009638

0801d4b8 <UTIL_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 801d4b8:	4a02      	ldr	r2, [pc, #8]	; (801d4c4 <UTIL_LCD_SetTextColor+0xc>)
 801d4ba:	68d3      	ldr	r3, [r2, #12]
 801d4bc:	015b      	lsls	r3, r3, #5
 801d4be:	50d0      	str	r0, [r2, r3]
}
 801d4c0:	4770      	bx	lr
 801d4c2:	bf00      	nop
 801d4c4:	24009638 	.word	0x24009638

0801d4c8 <UTIL_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 801d4c8:	4b02      	ldr	r3, [pc, #8]	; (801d4d4 <UTIL_LCD_SetBackColor+0xc>)
 801d4ca:	68da      	ldr	r2, [r3, #12]
 801d4cc:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801d4d0:	6058      	str	r0, [r3, #4]
}
 801d4d2:	4770      	bx	lr
 801d4d4:	24009638 	.word	0x24009638

0801d4d8 <UTIL_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 801d4d8:	4b02      	ldr	r3, [pc, #8]	; (801d4e4 <UTIL_LCD_SetFont+0xc>)
 801d4da:	68da      	ldr	r2, [r3, #12]
 801d4dc:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801d4e0:	6098      	str	r0, [r3, #8]
}
 801d4e2:	4770      	bx	lr
 801d4e4:	24009638 	.word	0x24009638

0801d4e8 <UTIL_LCD_GetFont>:
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *UTIL_LCD_GetFont(void)
{
  return DrawProp[DrawProp->LcdLayer].pFont;
 801d4e8:	4b02      	ldr	r3, [pc, #8]	; (801d4f4 <UTIL_LCD_GetFont+0xc>)
 801d4ea:	68da      	ldr	r2, [r3, #12]
 801d4ec:	eb03 1342 	add.w	r3, r3, r2, lsl #5
}
 801d4f0:	6898      	ldr	r0, [r3, #8]
 801d4f2:	4770      	bx	lr
 801d4f4:	24009638 	.word	0x24009638

0801d4f8 <UTIL_LCD_Clear>:
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 801d4f8:	4a11      	ldr	r2, [pc, #68]	; (801d540 <UTIL_LCD_Clear+0x48>)
{
 801d4fa:	4601      	mov	r1, r0
 801d4fc:	f102 0010 	add.w	r0, r2, #16
 801d500:	b570      	push	{r4, r5, r6, lr}
 801d502:	c839      	ldmia	r0, {r0, r3, r4, r5}
 801d504:	4e0f      	ldr	r6, [pc, #60]	; (801d544 <UTIL_LCD_Clear+0x4c>)
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801d506:	2d02      	cmp	r5, #2
{
 801d508:	b082      	sub	sp, #8
 801d50a:	6936      	ldr	r6, [r6, #16]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801d50c:	d006      	beq.n	801d51c <UTIL_LCD_Clear+0x24>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 801d50e:	2200      	movs	r2, #0
 801d510:	e9cd 4100 	strd	r4, r1, [sp]
 801d514:	4611      	mov	r1, r2
 801d516:	47b0      	blx	r6
}
 801d518:	b002      	add	sp, #8
 801d51a:	bd70      	pop	{r4, r5, r6, pc}
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 801d51c:	094d      	lsrs	r5, r1, #5
 801d51e:	9400      	str	r4, [sp, #0]
 801d520:	0a0a      	lsrs	r2, r1, #8
 801d522:	f3c1 04c4 	ubfx	r4, r1, #3, #5
 801d526:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801d52a:	f402 4178 	and.w	r1, r2, #63488	; 0xf800
 801d52e:	2200      	movs	r2, #0
 801d530:	430d      	orrs	r5, r1
 801d532:	4611      	mov	r1, r2
 801d534:	432c      	orrs	r4, r5
 801d536:	9401      	str	r4, [sp, #4]
 801d538:	47b0      	blx	r6
}
 801d53a:	b002      	add	sp, #8
 801d53c:	bd70      	pop	{r4, r5, r6, pc}
 801d53e:	bf00      	nop
 801d540:	24009638 	.word	0x24009638
 801d544:	24009678 	.word	0x24009678

0801d548 <UTIL_LCD_DisplayChar>:
{
 801d548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 801d54c:	f8df 9130 	ldr.w	r9, [pc, #304]	; 801d680 <UTIL_LCD_DisplayChar+0x138>
{
 801d550:	b0ad      	sub	sp, #180	; 0xb4
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 801d552:	3a20      	subs	r2, #32
{
 801d554:	460e      	mov	r6, r1
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 801d556:	f8d9 700c 	ldr.w	r7, [r9, #12]
{
 801d55a:	9004      	str	r0, [sp, #16]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 801d55c:	017f      	lsls	r7, r7, #5
 801d55e:	eb09 0307 	add.w	r3, r9, r7
 801d562:	689b      	ldr	r3, [r3, #8]
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 801d564:	f8b3 a004 	ldrh.w	sl, [r3, #4]
 801d568:	88d9      	ldrh	r1, [r3, #6]
 801d56a:	f10a 0b07 	add.w	fp, sl, #7
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 801d56e:	681d      	ldr	r5, [r3, #0]
 801d570:	fb01 f202 	mul.w	r2, r1, r2
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 801d574:	ea4f 03eb 	mov.w	r3, fp, asr #3
  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
 801d578:	f02b 0007 	bic.w	r0, fp, #7
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 801d57c:	fb03 f202 	mul.w	r2, r3, r2
  offset =  8 *((width + 7)/8) -  width ;
 801d580:	eba0 030a 	sub.w	r3, r0, sl
 801d584:	9306      	str	r3, [sp, #24]

  for(i = 0; i < height; i++)
 801d586:	2900      	cmp	r1, #0
 801d588:	d074      	beq.n	801d674 <UTIL_LCD_DisplayChar+0x12c>
 801d58a:	1873      	adds	r3, r6, r1
 801d58c:	4415      	add	r5, r2
 801d58e:	f8cd a00c 	str.w	sl, [sp, #12]
 801d592:	f10a 32ff 	add.w	r2, sl, #4294967295
 801d596:	9305      	str	r3, [sp, #20]
 801d598:	ab14      	add	r3, sp, #80	; 0x50
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 801d59a:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 801d59e:	2401      	movs	r4, #1
 801d5a0:	eb03 088a 	add.w	r8, r3, sl, lsl #2
 801d5a4:	ab08      	add	r3, sp, #32
 801d5a6:	9207      	str	r2, [sp, #28]
 801d5a8:	eb03 034a 	add.w	r3, r3, sl, lsl #1
 801d5ac:	469a      	mov	sl, r3

    switch(((width + 7)/8))
 801d5ae:	f1bb 0f01 	cmp.w	fp, #1
 801d5b2:	7828      	ldrb	r0, [r5, #0]
 801d5b4:	d005      	beq.n	801d5c2 <UTIL_LCD_DisplayChar+0x7a>
 801d5b6:	f1bb 0f02 	cmp.w	fp, #2
 801d5ba:	d154      	bne.n	801d666 <UTIL_LCD_DisplayChar+0x11e>
    case 1:
      line =  pchar[0];
      break;

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 801d5bc:	8828      	ldrh	r0, [r5, #0]
 801d5be:	ba40      	rev16	r0, r0
 801d5c0:	b280      	uxth	r0, r0
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
      break;
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801d5c2:	444f      	add	r7, r9
 801d5c4:	69fb      	ldr	r3, [r7, #28]
 801d5c6:	2b02      	cmp	r3, #2
    {
      for (j = 0; j < width; j++)
 801d5c8:	9b03      	ldr	r3, [sp, #12]
    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801d5ca:	d02c      	beq.n	801d626 <UTIL_LCD_DisplayChar+0xde>
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
    }
    else
    {
      for (j = 0; j < width; j++)
 801d5cc:	b183      	cbz	r3, 801d5f0 <UTIL_LCD_DisplayChar+0xa8>
      {
        if(line & (1 << (width- j + offset- 1)))
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
 801d5ce:	f8d7 c000 	ldr.w	ip, [r7]
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
 801d5d2:	687f      	ldr	r7, [r7, #4]
 801d5d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d5d8:	189a      	adds	r2, r3, r2
 801d5da:	ab14      	add	r3, sp, #80	; 0x50
        if(line & (1 << (width- j + offset- 1)))
 801d5dc:	fa04 f102 	lsl.w	r1, r4, r2
 801d5e0:	4201      	tst	r1, r0
 801d5e2:	d119      	bne.n	801d618 <UTIL_LCD_DisplayChar+0xd0>
 801d5e4:	f843 7b04 	str.w	r7, [r3], #4
      for (j = 0; j < width; j++)
 801d5e8:	4598      	cmp	r8, r3
 801d5ea:	f102 32ff 	add.w	r2, r2, #4294967295
 801d5ee:	d1f5      	bne.n	801d5dc <UTIL_LCD_DisplayChar+0x94>
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 801d5f0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801d5f4:	ab14      	add	r3, sp, #80	; 0x50
 801d5f6:	9903      	ldr	r1, [sp, #12]
 801d5f8:	4632      	mov	r2, r6
 801d5fa:	9401      	str	r4, [sp, #4]
 801d5fc:	3601      	adds	r6, #1
 801d5fe:	9100      	str	r1, [sp, #0]
 801d600:	445d      	add	r5, fp
 801d602:	491e      	ldr	r1, [pc, #120]	; (801d67c <UTIL_LCD_DisplayChar+0x134>)
 801d604:	684f      	ldr	r7, [r1, #4]
 801d606:	9904      	ldr	r1, [sp, #16]
 801d608:	47b8      	blx	r7
  for(i = 0; i < height; i++)
 801d60a:	9b05      	ldr	r3, [sp, #20]
 801d60c:	429e      	cmp	r6, r3
 801d60e:	d031      	beq.n	801d674 <UTIL_LCD_DisplayChar+0x12c>
 801d610:	f8d9 700c 	ldr.w	r7, [r9, #12]
 801d614:	017f      	lsls	r7, r7, #5
 801d616:	e7ca      	b.n	801d5ae <UTIL_LCD_DisplayChar+0x66>
 801d618:	f843 cb04 	str.w	ip, [r3], #4
      for (j = 0; j < width; j++)
 801d61c:	4543      	cmp	r3, r8
 801d61e:	f102 32ff 	add.w	r2, r2, #4294967295
 801d622:	d1db      	bne.n	801d5dc <UTIL_LCD_DisplayChar+0x94>
 801d624:	e7e4      	b.n	801d5f0 <UTIL_LCD_DisplayChar+0xa8>
      for (j = 0; j < width; j++)
 801d626:	b1d3      	cbz	r3, 801d65e <UTIL_LCD_DisplayChar+0x116>
 801d628:	f10d 0c20 	add.w	ip, sp, #32
 801d62c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d630:	eb03 0e02 	add.w	lr, r3, r2
        if(line & (1 << (width- j + offset- 1)))
 801d634:	fa04 f30e 	lsl.w	r3, r4, lr
 801d638:	f10e 3eff 	add.w	lr, lr, #4294967295
 801d63c:	4203      	tst	r3, r0
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
 801d63e:	bf14      	ite	ne
 801d640:	683a      	ldrne	r2, [r7, #0]
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 801d642:	687a      	ldreq	r2, [r7, #4]
 801d644:	0cd1      	lsrs	r1, r2, #19
 801d646:	f3c2 03c4 	ubfx	r3, r2, #3, #5
 801d64a:	0952      	lsrs	r2, r2, #5
 801d64c:	ea43 23c1 	orr.w	r3, r3, r1, lsl #11
 801d650:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801d654:	4313      	orrs	r3, r2
 801d656:	f82c 3b02 	strh.w	r3, [ip], #2
      for (j = 0; j < width; j++)
 801d65a:	45d4      	cmp	ip, sl
 801d65c:	d1ea      	bne.n	801d634 <UTIL_LCD_DisplayChar+0xec>
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 801d65e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801d662:	ab08      	add	r3, sp, #32
 801d664:	e7c7      	b.n	801d5f6 <UTIL_LCD_DisplayChar+0xae>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 801d666:	0400      	lsls	r0, r0, #16
 801d668:	786a      	ldrb	r2, [r5, #1]
 801d66a:	78ab      	ldrb	r3, [r5, #2]
 801d66c:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 801d670:	4318      	orrs	r0, r3
 801d672:	e7a6      	b.n	801d5c2 <UTIL_LCD_DisplayChar+0x7a>
}
 801d674:	b02d      	add	sp, #180	; 0xb4
 801d676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d67a:	bf00      	nop
 801d67c:	24009678 	.word	0x24009678
 801d680:	24009638 	.word	0x24009638

0801d684 <UTIL_LCD_DisplayStringAt>:
{
 801d684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d688:	4615      	mov	r5, r2
  while (*ptr++) size ++ ;
 801d68a:	7812      	ldrb	r2, [r2, #0]
{
 801d68c:	4604      	mov	r4, r0
 801d68e:	460f      	mov	r7, r1
  while (*ptr++) size ++ ;
 801d690:	2a00      	cmp	r2, #0
 801d692:	d045      	beq.n	801d720 <UTIL_LCD_DisplayStringAt+0x9c>
 801d694:	1c69      	adds	r1, r5, #1
 801d696:	eba1 0c05 	sub.w	ip, r1, r5
 801d69a:	f811 0b01 	ldrb.w	r0, [r1], #1
 801d69e:	2800      	cmp	r0, #0
 801d6a0:	d1f9      	bne.n	801d696 <UTIL_LCD_DisplayStringAt+0x12>
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 801d6a2:	4e20      	ldr	r6, [pc, #128]	; (801d724 <UTIL_LCD_DisplayStringAt+0xa0>)
  switch (Mode)
 801d6a4:	2b01      	cmp	r3, #1
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 801d6a6:	68f0      	ldr	r0, [r6, #12]
 801d6a8:	6971      	ldr	r1, [r6, #20]
 801d6aa:	eb06 1040 	add.w	r0, r6, r0, lsl #5
 801d6ae:	6880      	ldr	r0, [r0, #8]
 801d6b0:	f8b0 e004 	ldrh.w	lr, [r0, #4]
 801d6b4:	fbb1 f0fe 	udiv	r0, r1, lr
  switch (Mode)
 801d6b8:	d02b      	beq.n	801d712 <UTIL_LCD_DisplayStringAt+0x8e>
 801d6ba:	2b02      	cmp	r3, #2
 801d6bc:	d023      	beq.n	801d706 <UTIL_LCD_DisplayStringAt+0x82>
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 801d6be:	b289      	uxth	r1, r1
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 801d6c0:	1e60      	subs	r0, r4, #1
 801d6c2:	f647 73fe 	movw	r3, #32766	; 0x7ffe
    refcolumn = 1;
 801d6c6:	4298      	cmp	r0, r3
 801d6c8:	bf88      	it	hi
 801d6ca:	2401      	movhi	r4, #1
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 801d6cc:	458e      	cmp	lr, r1
 801d6ce:	d818      	bhi.n	801d702 <UTIL_LCD_DisplayStringAt+0x7e>
 801d6d0:	b1ba      	cbz	r2, 801d702 <UTIL_LCD_DisplayStringAt+0x7e>
 801d6d2:	f04f 0800 	mov.w	r8, #0
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
 801d6d6:	4639      	mov	r1, r7
 801d6d8:	4620      	mov	r0, r4
 801d6da:	f7ff ff35 	bl	801d548 <UTIL_LCD_DisplayChar>
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 801d6de:	68f2      	ldr	r2, [r6, #12]
    i++;
 801d6e0:	f108 0801 	add.w	r8, r8, #1
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 801d6e4:	6973      	ldr	r3, [r6, #20]
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 801d6e6:	eb06 1142 	add.w	r1, r6, r2, lsl #5
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 801d6ea:	f815 2f01 	ldrb.w	r2, [r5, #1]!
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 801d6ee:	6889      	ldr	r1, [r1, #8]
 801d6f0:	8889      	ldrh	r1, [r1, #4]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 801d6f2:	fb08 3311 	mls	r3, r8, r1, r3
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 801d6f6:	440c      	add	r4, r1
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 801d6f8:	b29b      	uxth	r3, r3
 801d6fa:	4299      	cmp	r1, r3
 801d6fc:	d801      	bhi.n	801d702 <UTIL_LCD_DisplayStringAt+0x7e>
 801d6fe:	2a00      	cmp	r2, #0
 801d700:	d1e9      	bne.n	801d6d6 <UTIL_LCD_DisplayStringAt+0x52>
}
 801d702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
 801d706:	eba0 000c 	sub.w	r0, r0, ip
 801d70a:	fb0e f000 	mul.w	r0, lr, r0
 801d70e:	1b04      	subs	r4, r0, r4
      break;
 801d710:	e7d5      	b.n	801d6be <UTIL_LCD_DisplayStringAt+0x3a>
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
 801d712:	eba0 000c 	sub.w	r0, r0, ip
 801d716:	fb0e f000 	mul.w	r0, lr, r0
 801d71a:	eb04 0450 	add.w	r4, r4, r0, lsr #1
      break;
 801d71e:	e7ce      	b.n	801d6be <UTIL_LCD_DisplayStringAt+0x3a>
  uint32_t size = 0, xsize = 0;
 801d720:	4694      	mov	ip, r2
 801d722:	e7be      	b.n	801d6a2 <UTIL_LCD_DisplayStringAt+0x1e>
 801d724:	24009638 	.word	0x24009638

0801d728 <UTIL_LCD_DrawLine>:
{
 801d728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  x_diff = Xpos2 - Xpos1;
 801d72c:	1a17      	subs	r7, r2, r0
  y_diff = Ypos2 - Ypos1;
 801d72e:	1a5e      	subs	r6, r3, r1
  if (Xpos2 >= Xpos1)                 /* The x-values are increasing */
 801d730:	f64f 74ff 	movw	r4, #65535	; 0xffff
{
 801d734:	b087      	sub	sp, #28
  x = Xpos1;                       /* Start x off at the first pixel */
 801d736:	b205      	sxth	r5, r0
  if (Xpos2 >= Xpos1)                 /* The x-values are increasing */
 801d738:	4282      	cmp	r2, r0
 801d73a:	bf34      	ite	cc
 801d73c:	4622      	movcc	r2, r4
 801d73e:	2201      	movcs	r2, #1
  if (Ypos2 >= Ypos1)                 /* The y-values are increasing */
 801d740:	428b      	cmp	r3, r1
 801d742:	bf28      	it	cs
 801d744:	2401      	movcs	r4, #1
  deltax = ABS(x_diff);         /* The absolute difference between the x's */
 801d746:	2f00      	cmp	r7, #0
  deltay = ABS(y_diff);         /* The absolute difference between the y's */
 801d748:	ea86 73e6 	eor.w	r3, r6, r6, asr #31
  if (Xpos2 >= Xpos1)                 /* The x-values are increasing */
 801d74c:	9202      	str	r2, [sp, #8]
  y = Ypos1;                       /* Start y off at the first pixel */
 801d74e:	b209      	sxth	r1, r1
  deltax = ABS(x_diff);         /* The absolute difference between the x's */
 801d750:	bfb8      	it	lt
 801d752:	427f      	neglt	r7, r7
  deltay = ABS(y_diff);         /* The absolute difference between the y's */
 801d754:	eba3 73e6 	sub.w	r3, r3, r6, asr #31
  if (Ypos2 >= Ypos1)                 /* The y-values are increasing */
 801d758:	9403      	str	r4, [sp, #12]
  deltax = ABS(x_diff);         /* The absolute difference between the x's */
 801d75a:	b23f      	sxth	r7, r7
  deltay = ABS(y_diff);         /* The absolute difference between the y's */
 801d75c:	b21b      	sxth	r3, r3
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 801d75e:	429f      	cmp	r7, r3
 801d760:	db5c      	blt.n	801d81c <UTIL_LCD_DrawLine+0xf4>
    num = deltax / 2;
 801d762:	2f00      	cmp	r7, #0
 801d764:	463e      	mov	r6, r7
 801d766:	f04f 0200 	mov.w	r2, #0
 801d76a:	f8dd b008 	ldr.w	fp, [sp, #8]
 801d76e:	bfb8      	it	lt
 801d770:	1c7e      	addlt	r6, r7, #1
 801d772:	4691      	mov	r9, r2
 801d774:	9202      	str	r2, [sp, #8]
 801d776:	1076      	asrs	r6, r6, #1
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 801d778:	2f00      	cmp	r7, #0
 801d77a:	db42      	blt.n	801d802 <UTIL_LCD_DrawLine+0xda>
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882RGB565(Color));
 801d77c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d77e:	b29b      	uxth	r3, r3
 801d780:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801d782:	f04f 0800 	mov.w	r8, #0
 801d786:	0952      	lsrs	r2, r2, #5
 801d788:	9810      	ldr	r0, [sp, #64]	; 0x40
 801d78a:	0a24      	lsrs	r4, r4, #8
 801d78c:	9304      	str	r3, [sp, #16]
 801d78e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801d792:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801d796:	f404 4378 	and.w	r3, r4, #63488	; 0xf800
 801d79a:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 801d840 <UTIL_LCD_DrawLine+0x118>
 801d79e:	9701      	str	r7, [sp, #4]
 801d7a0:	4313      	orrs	r3, r2
 801d7a2:	4303      	orrs	r3, r0
 801d7a4:	9305      	str	r3, [sp, #20]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801d7a6:	f8da 301c 	ldr.w	r3, [sl, #28]
    UTIL_LCD_SetPixel(x, y, Color);   /* Draw the current pixel */
 801d7aa:	b28c      	uxth	r4, r1
 801d7ac:	4a23      	ldr	r2, [pc, #140]	; (801d83c <UTIL_LCD_DrawLine+0x114>)
 801d7ae:	b2ad      	uxth	r5, r5
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801d7b0:	2b02      	cmp	r3, #2
 801d7b2:	f8da c010 	ldr.w	ip, [sl, #16]
 801d7b6:	6992      	ldr	r2, [r2, #24]
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
 801d7b8:	4629      	mov	r1, r5
 801d7ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d7bc:	4660      	mov	r0, ip
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882RGB565(Color));
 801d7be:	bf08      	it	eq
 801d7c0:	9b05      	ldreq	r3, [sp, #20]
 801d7c2:	4617      	mov	r7, r2
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
 801d7c4:	4622      	mov	r2, r4
 801d7c6:	f108 0801 	add.w	r8, r8, #1
 801d7ca:	47b8      	blx	r7
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 801d7cc:	9b04      	ldr	r3, [sp, #16]
    x += xinc2;                               /* Change the x as appropriate */
 801d7ce:	eb05 000b 	add.w	r0, r5, fp
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 801d7d2:	441e      	add	r6, r3
      x += xinc1;                             /* Change the x as appropriate */
 801d7d4:	9b02      	ldr	r3, [sp, #8]
 801d7d6:	18ea      	adds	r2, r5, r3
      y += yinc1;                             /* Change the y as appropriate */
 801d7d8:	9b03      	ldr	r3, [sp, #12]
 801d7da:	18e1      	adds	r1, r4, r3
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 801d7dc:	b2b3      	uxth	r3, r6
    x += xinc2;                               /* Change the x as appropriate */
 801d7de:	eb0b 0502 	add.w	r5, fp, r2
    y += yinc2;                               /* Change the y as appropriate */
 801d7e2:	eb04 0209 	add.w	r2, r4, r9
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 801d7e6:	b21e      	sxth	r6, r3
      num -= den;                             /* Calculate the new numerator value */
 801d7e8:	9c01      	ldr	r4, [sp, #4]
    y += yinc2;                               /* Change the y as appropriate */
 801d7ea:	4449      	add	r1, r9
    x += xinc2;                               /* Change the x as appropriate */
 801d7ec:	b22d      	sxth	r5, r5
    if (num >= den)                           /* Check if numerator >= denominator */
 801d7ee:	42b4      	cmp	r4, r6
      num -= den;                             /* Calculate the new numerator value */
 801d7f0:	eba3 0304 	sub.w	r3, r3, r4
    y += yinc2;                               /* Change the y as appropriate */
 801d7f4:	b209      	sxth	r1, r1
    if (num >= den)                           /* Check if numerator >= denominator */
 801d7f6:	dc07      	bgt.n	801d808 <UTIL_LCD_DrawLine+0xe0>
      num -= den;                             /* Calculate the new numerator value */
 801d7f8:	b21e      	sxth	r6, r3
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 801d7fa:	fa0f f388 	sxth.w	r3, r8
 801d7fe:	42a3      	cmp	r3, r4
 801d800:	ddd1      	ble.n	801d7a6 <UTIL_LCD_DrawLine+0x7e>
}
 801d802:	b007      	add	sp, #28
 801d804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    y += yinc2;                               /* Change the y as appropriate */
 801d808:	b211      	sxth	r1, r2
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 801d80a:	9a01      	ldr	r2, [sp, #4]
 801d80c:	fa0f f388 	sxth.w	r3, r8
    x += xinc2;                               /* Change the x as appropriate */
 801d810:	b205      	sxth	r5, r0
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 801d812:	4293      	cmp	r3, r2
 801d814:	ddc7      	ble.n	801d7a6 <UTIL_LCD_DrawLine+0x7e>
}
 801d816:	b007      	add	sp, #28
 801d818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    num = deltay / 2;
 801d81c:	2b00      	cmp	r3, #0
 801d81e:	461e      	mov	r6, r3
 801d820:	463a      	mov	r2, r7
 801d822:	f04f 0000 	mov.w	r0, #0
 801d826:	bfb8      	it	lt
 801d828:	1c5e      	addlt	r6, r3, #1
 801d82a:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801d82e:	461f      	mov	r7, r3
 801d830:	9003      	str	r0, [sp, #12]
 801d832:	f346 064f 	sbfx	r6, r6, #1, #16
 801d836:	4613      	mov	r3, r2
 801d838:	4683      	mov	fp, r0
 801d83a:	e79d      	b.n	801d778 <UTIL_LCD_DrawLine+0x50>
 801d83c:	24009678 	.word	0x24009678
 801d840:	24009638 	.word	0x24009638

0801d844 <UTIL_LCD_DrawRect>:
{
 801d844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d848:	4c45      	ldr	r4, [pc, #276]	; (801d960 <UTIL_LCD_DrawRect+0x11c>)
 801d84a:	460f      	mov	r7, r1
 801d84c:	b083      	sub	sp, #12
 801d84e:	f8df a114 	ldr.w	sl, [pc, #276]	; 801d964 <UTIL_LCD_DrawRect+0x120>
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801d852:	69e1      	ldr	r1, [r4, #28]
{
 801d854:	4680      	mov	r8, r0
 801d856:	4616      	mov	r6, r2
 801d858:	4699      	mov	r9, r3
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801d85a:	2902      	cmp	r1, #2
 801d85c:	6920      	ldr	r0, [r4, #16]
 801d85e:	f8da b008 	ldr.w	fp, [sl, #8]
{
 801d862:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801d864:	d02c      	beq.n	801d8c0 <UTIL_LCD_DrawRect+0x7c>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 801d866:	4613      	mov	r3, r2
 801d868:	9500      	str	r5, [sp, #0]
 801d86a:	463a      	mov	r2, r7
 801d86c:	4641      	mov	r1, r8
 801d86e:	47d8      	blx	fp
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801d870:	69e3      	ldr	r3, [r4, #28]
  UTIL_LCD_DrawHLine(Xpos, (Ypos+ Height - 1U), Width, Color);
 801d872:	f109 32ff 	add.w	r2, r9, #4294967295
 801d876:	f8da b008 	ldr.w	fp, [sl, #8]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801d87a:	2b02      	cmp	r3, #2
  UTIL_LCD_DrawHLine(Xpos, (Ypos+ Height - 1U), Width, Color);
 801d87c:	443a      	add	r2, r7
 801d87e:	6920      	ldr	r0, [r4, #16]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801d880:	d05a      	beq.n	801d938 <UTIL_LCD_DrawRect+0xf4>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 801d882:	9500      	str	r5, [sp, #0]
 801d884:	4633      	mov	r3, r6
 801d886:	4641      	mov	r1, r8
 801d888:	47d8      	blx	fp
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801d88a:	69e3      	ldr	r3, [r4, #28]
 801d88c:	f8da b00c 	ldr.w	fp, [sl, #12]
 801d890:	2b02      	cmp	r3, #2
 801d892:	6920      	ldr	r0, [r4, #16]
 801d894:	d03c      	beq.n	801d910 <UTIL_LCD_DrawRect+0xcc>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 801d896:	9500      	str	r5, [sp, #0]
 801d898:	464b      	mov	r3, r9
 801d89a:	463a      	mov	r2, r7
 801d89c:	4641      	mov	r1, r8
 801d89e:	47d8      	blx	fp
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801d8a0:	69e3      	ldr	r3, [r4, #28]
  UTIL_LCD_DrawVLine((Xpos + Width - 1U), Ypos, Height, Color);
 801d8a2:	1e71      	subs	r1, r6, #1
 801d8a4:	6920      	ldr	r0, [r4, #16]
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801d8a6:	2b02      	cmp	r3, #2
 801d8a8:	f8da 600c 	ldr.w	r6, [sl, #12]
  UTIL_LCD_DrawVLine((Xpos + Width - 1U), Ypos, Height, Color);
 801d8ac:	4441      	add	r1, r8
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801d8ae:	d01b      	beq.n	801d8e8 <UTIL_LCD_DrawRect+0xa4>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 801d8b0:	464b      	mov	r3, r9
 801d8b2:	463a      	mov	r2, r7
 801d8b4:	46b4      	mov	ip, r6
 801d8b6:	950c      	str	r5, [sp, #48]	; 0x30
}
 801d8b8:	b003      	add	sp, #12
 801d8ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 801d8be:	4760      	bx	ip
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 801d8c0:	ea4f 1e55 	mov.w	lr, r5, lsr #5
 801d8c4:	f3c5 0cc4 	ubfx	ip, r5, #3, #5
 801d8c8:	0a29      	lsrs	r1, r5, #8
 801d8ca:	4613      	mov	r3, r2
 801d8cc:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 801d8d0:	463a      	mov	r2, r7
 801d8d2:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801d8d6:	ea4e 0e01 	orr.w	lr, lr, r1
 801d8da:	4641      	mov	r1, r8
 801d8dc:	ea4e 0c0c 	orr.w	ip, lr, ip
 801d8e0:	f8cd c000 	str.w	ip, [sp]
 801d8e4:	47d8      	blx	fp
 801d8e6:	e7c3      	b.n	801d870 <UTIL_LCD_DrawRect+0x2c>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 801d8e8:	096c      	lsrs	r4, r5, #5
 801d8ea:	f3c5 0ec4 	ubfx	lr, r5, #3, #5
 801d8ee:	ea4f 2c15 	mov.w	ip, r5, lsr #8
 801d8f2:	464b      	mov	r3, r9
 801d8f4:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801d8f8:	463a      	mov	r2, r7
 801d8fa:	f40c 4578 	and.w	r5, ip, #63488	; 0xf800
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 801d8fe:	46b4      	mov	ip, r6
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 801d900:	432c      	orrs	r4, r5
 801d902:	ea44 040e 	orr.w	r4, r4, lr
 801d906:	940c      	str	r4, [sp, #48]	; 0x30
}
 801d908:	b003      	add	sp, #12
 801d90a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 801d90e:	4760      	bx	ip
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 801d910:	ea4f 1e55 	mov.w	lr, r5, lsr #5
 801d914:	f3c5 0cc4 	ubfx	ip, r5, #3, #5
 801d918:	0a29      	lsrs	r1, r5, #8
 801d91a:	464b      	mov	r3, r9
 801d91c:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 801d920:	463a      	mov	r2, r7
 801d922:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801d926:	ea4e 0e01 	orr.w	lr, lr, r1
 801d92a:	4641      	mov	r1, r8
 801d92c:	ea4e 0c0c 	orr.w	ip, lr, ip
 801d930:	f8cd c000 	str.w	ip, [sp]
 801d934:	47d8      	blx	fp
 801d936:	e7b3      	b.n	801d8a0 <UTIL_LCD_DrawRect+0x5c>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 801d938:	ea4f 1e55 	mov.w	lr, r5, lsr #5
 801d93c:	f3c5 0cc4 	ubfx	ip, r5, #3, #5
 801d940:	0a29      	lsrs	r1, r5, #8
 801d942:	4633      	mov	r3, r6
 801d944:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 801d948:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801d94c:	ea4e 0e01 	orr.w	lr, lr, r1
 801d950:	4641      	mov	r1, r8
 801d952:	ea4e 0c0c 	orr.w	ip, lr, ip
 801d956:	f8cd c000 	str.w	ip, [sp]
 801d95a:	47d8      	blx	fp
 801d95c:	e795      	b.n	801d88a <UTIL_LCD_DrawRect+0x46>
 801d95e:	bf00      	nop
 801d960:	24009638 	.word	0x24009638
 801d964:	24009678 	.word	0x24009678

0801d968 <ai_platform_runtime_get_revision>:
 801d968:	4a1c      	ldr	r2, [pc, #112]	; (801d9dc <ai_platform_runtime_get_revision+0x74>)
 801d96a:	491d      	ldr	r1, [pc, #116]	; (801d9e0 <ai_platform_runtime_get_revision+0x78>)
 801d96c:	6813      	ldr	r3, [r2, #0]
 801d96e:	f023 0301 	bic.w	r3, r3, #1
 801d972:	6013      	str	r3, [r2, #0]
 801d974:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801d978:	680b      	ldr	r3, [r1, #0]
 801d97a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801d97e:	189a      	adds	r2, r3, r2
 801d980:	2a01      	cmp	r2, #1
 801d982:	d90c      	bls.n	801d99e <ai_platform_runtime_get_revision+0x36>
 801d984:	f240 4249 	movw	r2, #1097	; 0x449
 801d988:	4293      	cmp	r3, r2
 801d98a:	d008      	beq.n	801d99e <ai_platform_runtime_get_revision+0x36>
 801d98c:	4b15      	ldr	r3, [pc, #84]	; (801d9e4 <ai_platform_runtime_get_revision+0x7c>)
 801d98e:	681b      	ldr	r3, [r3, #0]
 801d990:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801d994:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801d998:	d010      	beq.n	801d9bc <ai_platform_runtime_get_revision+0x54>
 801d99a:	4813      	ldr	r0, [pc, #76]	; (801d9e8 <ai_platform_runtime_get_revision+0x80>)
 801d99c:	4770      	bx	lr
 801d99e:	4b13      	ldr	r3, [pc, #76]	; (801d9ec <ai_platform_runtime_get_revision+0x84>)
 801d9a0:	2201      	movs	r2, #1
 801d9a2:	4619      	mov	r1, r3
 801d9a4:	601a      	str	r2, [r3, #0]
 801d9a6:	680b      	ldr	r3, [r1, #0]
 801d9a8:	2b00      	cmp	r3, #0
 801d9aa:	d1fc      	bne.n	801d9a6 <ai_platform_runtime_get_revision+0x3e>
 801d9ac:	4b10      	ldr	r3, [pc, #64]	; (801d9f0 <ai_platform_runtime_get_revision+0x88>)
 801d9ae:	4911      	ldr	r1, [pc, #68]	; (801d9f4 <ai_platform_runtime_get_revision+0x8c>)
 801d9b0:	4a11      	ldr	r2, [pc, #68]	; (801d9f8 <ai_platform_runtime_get_revision+0x90>)
 801d9b2:	6019      	str	r1, [r3, #0]
 801d9b4:	681b      	ldr	r3, [r3, #0]
 801d9b6:	4293      	cmp	r3, r2
 801d9b8:	d0ef      	beq.n	801d99a <ai_platform_runtime_get_revision+0x32>
 801d9ba:	e7fe      	b.n	801d9ba <ai_platform_runtime_get_revision+0x52>
 801d9bc:	4b0f      	ldr	r3, [pc, #60]	; (801d9fc <ai_platform_runtime_get_revision+0x94>)
 801d9be:	2201      	movs	r2, #1
 801d9c0:	4619      	mov	r1, r3
 801d9c2:	601a      	str	r2, [r3, #0]
 801d9c4:	680b      	ldr	r3, [r1, #0]
 801d9c6:	2b00      	cmp	r3, #0
 801d9c8:	d1fc      	bne.n	801d9c4 <ai_platform_runtime_get_revision+0x5c>
 801d9ca:	4b0d      	ldr	r3, [pc, #52]	; (801da00 <ai_platform_runtime_get_revision+0x98>)
 801d9cc:	4909      	ldr	r1, [pc, #36]	; (801d9f4 <ai_platform_runtime_get_revision+0x8c>)
 801d9ce:	4a0a      	ldr	r2, [pc, #40]	; (801d9f8 <ai_platform_runtime_get_revision+0x90>)
 801d9d0:	6019      	str	r1, [r3, #0]
 801d9d2:	681b      	ldr	r3, [r3, #0]
 801d9d4:	4293      	cmp	r3, r2
 801d9d6:	d0e0      	beq.n	801d99a <ai_platform_runtime_get_revision+0x32>
 801d9d8:	e7fe      	b.n	801d9d8 <ai_platform_runtime_get_revision+0x70>
 801d9da:	bf00      	nop
 801d9dc:	e0002000 	.word	0xe0002000
 801d9e0:	e0042000 	.word	0xe0042000
 801d9e4:	5c001000 	.word	0x5c001000
 801d9e8:	08028f38 	.word	0x08028f38
 801d9ec:	40023008 	.word	0x40023008
 801d9f0:	40023000 	.word	0x40023000
 801d9f4:	f407a5c2 	.word	0xf407a5c2
 801d9f8:	b5e8b5cd 	.word	0xb5e8b5cd
 801d9fc:	58024c08 	.word	0x58024c08
 801da00:	58024c00 	.word	0x58024c00

0801da04 <ai_platform_runtime_get_version>:
 801da04:	4a1d      	ldr	r2, [pc, #116]	; (801da7c <ai_platform_runtime_get_version+0x78>)
 801da06:	b082      	sub	sp, #8
 801da08:	491d      	ldr	r1, [pc, #116]	; (801da80 <ai_platform_runtime_get_version+0x7c>)
 801da0a:	6813      	ldr	r3, [r2, #0]
 801da0c:	f023 0301 	bic.w	r3, r3, #1
 801da10:	6013      	str	r3, [r2, #0]
 801da12:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801da16:	680b      	ldr	r3, [r1, #0]
 801da18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801da1c:	189a      	adds	r2, r3, r2
 801da1e:	2a01      	cmp	r2, #1
 801da20:	d90d      	bls.n	801da3e <ai_platform_runtime_get_version+0x3a>
 801da22:	f240 4249 	movw	r2, #1097	; 0x449
 801da26:	4293      	cmp	r3, r2
 801da28:	d009      	beq.n	801da3e <ai_platform_runtime_get_version+0x3a>
 801da2a:	4b16      	ldr	r3, [pc, #88]	; (801da84 <ai_platform_runtime_get_version+0x80>)
 801da2c:	681b      	ldr	r3, [r3, #0]
 801da2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801da32:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801da36:	d011      	beq.n	801da5c <ai_platform_runtime_get_version+0x58>
 801da38:	2006      	movs	r0, #6
 801da3a:	b002      	add	sp, #8
 801da3c:	4770      	bx	lr
 801da3e:	4b12      	ldr	r3, [pc, #72]	; (801da88 <ai_platform_runtime_get_version+0x84>)
 801da40:	2201      	movs	r2, #1
 801da42:	4619      	mov	r1, r3
 801da44:	601a      	str	r2, [r3, #0]
 801da46:	680b      	ldr	r3, [r1, #0]
 801da48:	2b00      	cmp	r3, #0
 801da4a:	d1fc      	bne.n	801da46 <ai_platform_runtime_get_version+0x42>
 801da4c:	4b0f      	ldr	r3, [pc, #60]	; (801da8c <ai_platform_runtime_get_version+0x88>)
 801da4e:	4910      	ldr	r1, [pc, #64]	; (801da90 <ai_platform_runtime_get_version+0x8c>)
 801da50:	4a10      	ldr	r2, [pc, #64]	; (801da94 <ai_platform_runtime_get_version+0x90>)
 801da52:	6019      	str	r1, [r3, #0]
 801da54:	681b      	ldr	r3, [r3, #0]
 801da56:	4293      	cmp	r3, r2
 801da58:	d0ee      	beq.n	801da38 <ai_platform_runtime_get_version+0x34>
 801da5a:	e7fe      	b.n	801da5a <ai_platform_runtime_get_version+0x56>
 801da5c:	4b0e      	ldr	r3, [pc, #56]	; (801da98 <ai_platform_runtime_get_version+0x94>)
 801da5e:	2201      	movs	r2, #1
 801da60:	4619      	mov	r1, r3
 801da62:	601a      	str	r2, [r3, #0]
 801da64:	680b      	ldr	r3, [r1, #0]
 801da66:	2b00      	cmp	r3, #0
 801da68:	d1fc      	bne.n	801da64 <ai_platform_runtime_get_version+0x60>
 801da6a:	4b0c      	ldr	r3, [pc, #48]	; (801da9c <ai_platform_runtime_get_version+0x98>)
 801da6c:	4908      	ldr	r1, [pc, #32]	; (801da90 <ai_platform_runtime_get_version+0x8c>)
 801da6e:	4a09      	ldr	r2, [pc, #36]	; (801da94 <ai_platform_runtime_get_version+0x90>)
 801da70:	6019      	str	r1, [r3, #0]
 801da72:	681b      	ldr	r3, [r3, #0]
 801da74:	4293      	cmp	r3, r2
 801da76:	d0df      	beq.n	801da38 <ai_platform_runtime_get_version+0x34>
 801da78:	e7fe      	b.n	801da78 <ai_platform_runtime_get_version+0x74>
 801da7a:	bf00      	nop
 801da7c:	e0002000 	.word	0xe0002000
 801da80:	e0042000 	.word	0xe0042000
 801da84:	5c001000 	.word	0x5c001000
 801da88:	40023008 	.word	0x40023008
 801da8c:	40023000 	.word	0x40023000
 801da90:	f407a5c2 	.word	0xf407a5c2
 801da94:	b5e8b5cd 	.word	0xb5e8b5cd
 801da98:	58024c08 	.word	0x58024c08
 801da9c:	58024c00 	.word	0x58024c00

0801daa0 <ai_platform_api_get_version>:
 801daa0:	4a26      	ldr	r2, [pc, #152]	; (801db3c <ai_platform_api_get_version+0x9c>)
 801daa2:	4927      	ldr	r1, [pc, #156]	; (801db40 <ai_platform_api_get_version+0xa0>)
 801daa4:	6813      	ldr	r3, [r2, #0]
 801daa6:	f023 0301 	bic.w	r3, r3, #1
 801daaa:	6013      	str	r3, [r2, #0]
 801daac:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801dab0:	680b      	ldr	r3, [r1, #0]
 801dab2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801dab6:	189a      	adds	r2, r3, r2
 801dab8:	2a01      	cmp	r2, #1
 801daba:	d921      	bls.n	801db00 <ai_platform_api_get_version+0x60>
 801dabc:	f240 4249 	movw	r2, #1097	; 0x449
 801dac0:	4293      	cmp	r3, r2
 801dac2:	d01d      	beq.n	801db00 <ai_platform_api_get_version+0x60>
 801dac4:	4b1f      	ldr	r3, [pc, #124]	; (801db44 <ai_platform_api_get_version+0xa4>)
 801dac6:	681b      	ldr	r3, [r3, #0]
 801dac8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801dacc:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801dad0:	d025      	beq.n	801db1e <ai_platform_api_get_version+0x7e>
 801dad2:	4b1d      	ldr	r3, [pc, #116]	; (801db48 <ai_platform_api_get_version+0xa8>)
 801dad4:	2000      	movs	r0, #0
 801dad6:	681b      	ldr	r3, [r3, #0]
 801dad8:	b410      	push	{r4}
 801dada:	b2dc      	uxtb	r4, r3
 801dadc:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801dae0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801dae4:	0e1b      	lsrs	r3, r3, #24
 801dae6:	f364 0007 	bfi	r0, r4, #0, #8
 801daea:	b083      	sub	sp, #12
 801daec:	f361 200f 	bfi	r0, r1, #8, #8
 801daf0:	f362 4017 	bfi	r0, r2, #16, #8
 801daf4:	f363 601f 	bfi	r0, r3, #24, #8
 801daf8:	b003      	add	sp, #12
 801dafa:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dafe:	4770      	bx	lr
 801db00:	4b12      	ldr	r3, [pc, #72]	; (801db4c <ai_platform_api_get_version+0xac>)
 801db02:	2201      	movs	r2, #1
 801db04:	4619      	mov	r1, r3
 801db06:	601a      	str	r2, [r3, #0]
 801db08:	680b      	ldr	r3, [r1, #0]
 801db0a:	2b00      	cmp	r3, #0
 801db0c:	d1fc      	bne.n	801db08 <ai_platform_api_get_version+0x68>
 801db0e:	4b10      	ldr	r3, [pc, #64]	; (801db50 <ai_platform_api_get_version+0xb0>)
 801db10:	4910      	ldr	r1, [pc, #64]	; (801db54 <ai_platform_api_get_version+0xb4>)
 801db12:	4a11      	ldr	r2, [pc, #68]	; (801db58 <ai_platform_api_get_version+0xb8>)
 801db14:	6019      	str	r1, [r3, #0]
 801db16:	681b      	ldr	r3, [r3, #0]
 801db18:	4293      	cmp	r3, r2
 801db1a:	d0da      	beq.n	801dad2 <ai_platform_api_get_version+0x32>
 801db1c:	e7fe      	b.n	801db1c <ai_platform_api_get_version+0x7c>
 801db1e:	4b0f      	ldr	r3, [pc, #60]	; (801db5c <ai_platform_api_get_version+0xbc>)
 801db20:	2201      	movs	r2, #1
 801db22:	4619      	mov	r1, r3
 801db24:	601a      	str	r2, [r3, #0]
 801db26:	680b      	ldr	r3, [r1, #0]
 801db28:	2b00      	cmp	r3, #0
 801db2a:	d1fc      	bne.n	801db26 <ai_platform_api_get_version+0x86>
 801db2c:	4b0c      	ldr	r3, [pc, #48]	; (801db60 <ai_platform_api_get_version+0xc0>)
 801db2e:	4909      	ldr	r1, [pc, #36]	; (801db54 <ai_platform_api_get_version+0xb4>)
 801db30:	4a09      	ldr	r2, [pc, #36]	; (801db58 <ai_platform_api_get_version+0xb8>)
 801db32:	6019      	str	r1, [r3, #0]
 801db34:	681b      	ldr	r3, [r3, #0]
 801db36:	4293      	cmp	r3, r2
 801db38:	d0cb      	beq.n	801dad2 <ai_platform_api_get_version+0x32>
 801db3a:	e7fe      	b.n	801db3a <ai_platform_api_get_version+0x9a>
 801db3c:	e0002000 	.word	0xe0002000
 801db40:	e0042000 	.word	0xe0042000
 801db44:	5c001000 	.word	0x5c001000
 801db48:	080c2e9c 	.word	0x080c2e9c
 801db4c:	40023008 	.word	0x40023008
 801db50:	40023000 	.word	0x40023000
 801db54:	f407a5c2 	.word	0xf407a5c2
 801db58:	b5e8b5cd 	.word	0xb5e8b5cd
 801db5c:	58024c08 	.word	0x58024c08
 801db60:	58024c00 	.word	0x58024c00

0801db64 <ai_platform_interface_api_get_version>:
 801db64:	4a26      	ldr	r2, [pc, #152]	; (801dc00 <ai_platform_interface_api_get_version+0x9c>)
 801db66:	4927      	ldr	r1, [pc, #156]	; (801dc04 <ai_platform_interface_api_get_version+0xa0>)
 801db68:	6813      	ldr	r3, [r2, #0]
 801db6a:	f023 0301 	bic.w	r3, r3, #1
 801db6e:	6013      	str	r3, [r2, #0]
 801db70:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801db74:	680b      	ldr	r3, [r1, #0]
 801db76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801db7a:	189a      	adds	r2, r3, r2
 801db7c:	2a01      	cmp	r2, #1
 801db7e:	d921      	bls.n	801dbc4 <ai_platform_interface_api_get_version+0x60>
 801db80:	f240 4249 	movw	r2, #1097	; 0x449
 801db84:	4293      	cmp	r3, r2
 801db86:	d01d      	beq.n	801dbc4 <ai_platform_interface_api_get_version+0x60>
 801db88:	4b1f      	ldr	r3, [pc, #124]	; (801dc08 <ai_platform_interface_api_get_version+0xa4>)
 801db8a:	681b      	ldr	r3, [r3, #0]
 801db8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801db90:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801db94:	d025      	beq.n	801dbe2 <ai_platform_interface_api_get_version+0x7e>
 801db96:	4b1d      	ldr	r3, [pc, #116]	; (801dc0c <ai_platform_interface_api_get_version+0xa8>)
 801db98:	2000      	movs	r0, #0
 801db9a:	681b      	ldr	r3, [r3, #0]
 801db9c:	b410      	push	{r4}
 801db9e:	b2dc      	uxtb	r4, r3
 801dba0:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801dba4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801dba8:	0e1b      	lsrs	r3, r3, #24
 801dbaa:	f364 0007 	bfi	r0, r4, #0, #8
 801dbae:	b083      	sub	sp, #12
 801dbb0:	f361 200f 	bfi	r0, r1, #8, #8
 801dbb4:	f362 4017 	bfi	r0, r2, #16, #8
 801dbb8:	f363 601f 	bfi	r0, r3, #24, #8
 801dbbc:	b003      	add	sp, #12
 801dbbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dbc2:	4770      	bx	lr
 801dbc4:	4b12      	ldr	r3, [pc, #72]	; (801dc10 <ai_platform_interface_api_get_version+0xac>)
 801dbc6:	2201      	movs	r2, #1
 801dbc8:	4619      	mov	r1, r3
 801dbca:	601a      	str	r2, [r3, #0]
 801dbcc:	680b      	ldr	r3, [r1, #0]
 801dbce:	2b00      	cmp	r3, #0
 801dbd0:	d1fc      	bne.n	801dbcc <ai_platform_interface_api_get_version+0x68>
 801dbd2:	4b10      	ldr	r3, [pc, #64]	; (801dc14 <ai_platform_interface_api_get_version+0xb0>)
 801dbd4:	4910      	ldr	r1, [pc, #64]	; (801dc18 <ai_platform_interface_api_get_version+0xb4>)
 801dbd6:	4a11      	ldr	r2, [pc, #68]	; (801dc1c <ai_platform_interface_api_get_version+0xb8>)
 801dbd8:	6019      	str	r1, [r3, #0]
 801dbda:	681b      	ldr	r3, [r3, #0]
 801dbdc:	4293      	cmp	r3, r2
 801dbde:	d0da      	beq.n	801db96 <ai_platform_interface_api_get_version+0x32>
 801dbe0:	e7fe      	b.n	801dbe0 <ai_platform_interface_api_get_version+0x7c>
 801dbe2:	4b0f      	ldr	r3, [pc, #60]	; (801dc20 <ai_platform_interface_api_get_version+0xbc>)
 801dbe4:	2201      	movs	r2, #1
 801dbe6:	4619      	mov	r1, r3
 801dbe8:	601a      	str	r2, [r3, #0]
 801dbea:	680b      	ldr	r3, [r1, #0]
 801dbec:	2b00      	cmp	r3, #0
 801dbee:	d1fc      	bne.n	801dbea <ai_platform_interface_api_get_version+0x86>
 801dbf0:	4b0c      	ldr	r3, [pc, #48]	; (801dc24 <ai_platform_interface_api_get_version+0xc0>)
 801dbf2:	4909      	ldr	r1, [pc, #36]	; (801dc18 <ai_platform_interface_api_get_version+0xb4>)
 801dbf4:	4a09      	ldr	r2, [pc, #36]	; (801dc1c <ai_platform_interface_api_get_version+0xb8>)
 801dbf6:	6019      	str	r1, [r3, #0]
 801dbf8:	681b      	ldr	r3, [r3, #0]
 801dbfa:	4293      	cmp	r3, r2
 801dbfc:	d0cb      	beq.n	801db96 <ai_platform_interface_api_get_version+0x32>
 801dbfe:	e7fe      	b.n	801dbfe <ai_platform_interface_api_get_version+0x9a>
 801dc00:	e0002000 	.word	0xe0002000
 801dc04:	e0042000 	.word	0xe0042000
 801dc08:	5c001000 	.word	0x5c001000
 801dc0c:	080c2ea0 	.word	0x080c2ea0
 801dc10:	40023008 	.word	0x40023008
 801dc14:	40023000 	.word	0x40023000
 801dc18:	f407a5c2 	.word	0xf407a5c2
 801dc1c:	b5e8b5cd 	.word	0xb5e8b5cd
 801dc20:	58024c08 	.word	0x58024c08
 801dc24:	58024c00 	.word	0x58024c00

0801dc28 <ai_platform_context_acquire>:
 801dc28:	b120      	cbz	r0, 801dc34 <ai_platform_context_acquire+0xc>
 801dc2a:	4b1e      	ldr	r3, [pc, #120]	; (801dca4 <ai_platform_context_acquire+0x7c>)
 801dc2c:	6802      	ldr	r2, [r0, #0]
 801dc2e:	429a      	cmp	r2, r3
 801dc30:	bf18      	it	ne
 801dc32:	2000      	movne	r0, #0
 801dc34:	4a1c      	ldr	r2, [pc, #112]	; (801dca8 <ai_platform_context_acquire+0x80>)
 801dc36:	491d      	ldr	r1, [pc, #116]	; (801dcac <ai_platform_context_acquire+0x84>)
 801dc38:	6813      	ldr	r3, [r2, #0]
 801dc3a:	f023 0301 	bic.w	r3, r3, #1
 801dc3e:	6013      	str	r3, [r2, #0]
 801dc40:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801dc44:	680b      	ldr	r3, [r1, #0]
 801dc46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801dc4a:	189a      	adds	r2, r3, r2
 801dc4c:	2a01      	cmp	r2, #1
 801dc4e:	d90b      	bls.n	801dc68 <ai_platform_context_acquire+0x40>
 801dc50:	f240 4249 	movw	r2, #1097	; 0x449
 801dc54:	4293      	cmp	r3, r2
 801dc56:	d007      	beq.n	801dc68 <ai_platform_context_acquire+0x40>
 801dc58:	4b15      	ldr	r3, [pc, #84]	; (801dcb0 <ai_platform_context_acquire+0x88>)
 801dc5a:	681b      	ldr	r3, [r3, #0]
 801dc5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801dc60:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801dc64:	d00f      	beq.n	801dc86 <ai_platform_context_acquire+0x5e>
 801dc66:	4770      	bx	lr
 801dc68:	4b12      	ldr	r3, [pc, #72]	; (801dcb4 <ai_platform_context_acquire+0x8c>)
 801dc6a:	2201      	movs	r2, #1
 801dc6c:	4619      	mov	r1, r3
 801dc6e:	601a      	str	r2, [r3, #0]
 801dc70:	680b      	ldr	r3, [r1, #0]
 801dc72:	2b00      	cmp	r3, #0
 801dc74:	d1fc      	bne.n	801dc70 <ai_platform_context_acquire+0x48>
 801dc76:	4b10      	ldr	r3, [pc, #64]	; (801dcb8 <ai_platform_context_acquire+0x90>)
 801dc78:	4910      	ldr	r1, [pc, #64]	; (801dcbc <ai_platform_context_acquire+0x94>)
 801dc7a:	4a11      	ldr	r2, [pc, #68]	; (801dcc0 <ai_platform_context_acquire+0x98>)
 801dc7c:	6019      	str	r1, [r3, #0]
 801dc7e:	681b      	ldr	r3, [r3, #0]
 801dc80:	4293      	cmp	r3, r2
 801dc82:	d0f0      	beq.n	801dc66 <ai_platform_context_acquire+0x3e>
 801dc84:	e7fe      	b.n	801dc84 <ai_platform_context_acquire+0x5c>
 801dc86:	4b0f      	ldr	r3, [pc, #60]	; (801dcc4 <ai_platform_context_acquire+0x9c>)
 801dc88:	2201      	movs	r2, #1
 801dc8a:	4619      	mov	r1, r3
 801dc8c:	601a      	str	r2, [r3, #0]
 801dc8e:	680b      	ldr	r3, [r1, #0]
 801dc90:	2b00      	cmp	r3, #0
 801dc92:	d1fc      	bne.n	801dc8e <ai_platform_context_acquire+0x66>
 801dc94:	4b0c      	ldr	r3, [pc, #48]	; (801dcc8 <ai_platform_context_acquire+0xa0>)
 801dc96:	4909      	ldr	r1, [pc, #36]	; (801dcbc <ai_platform_context_acquire+0x94>)
 801dc98:	4a09      	ldr	r2, [pc, #36]	; (801dcc0 <ai_platform_context_acquire+0x98>)
 801dc9a:	6019      	str	r1, [r3, #0]
 801dc9c:	681b      	ldr	r3, [r3, #0]
 801dc9e:	4293      	cmp	r3, r2
 801dca0:	d0e1      	beq.n	801dc66 <ai_platform_context_acquire+0x3e>
 801dca2:	e7fe      	b.n	801dca2 <ai_platform_context_acquire+0x7a>
 801dca4:	a1c00100 	.word	0xa1c00100
 801dca8:	e0002000 	.word	0xe0002000
 801dcac:	e0042000 	.word	0xe0042000
 801dcb0:	5c001000 	.word	0x5c001000
 801dcb4:	40023008 	.word	0x40023008
 801dcb8:	40023000 	.word	0x40023000
 801dcbc:	f407a5c2 	.word	0xf407a5c2
 801dcc0:	b5e8b5cd 	.word	0xb5e8b5cd
 801dcc4:	58024c08 	.word	0x58024c08
 801dcc8:	58024c00 	.word	0x58024c00

0801dccc <ai_platform_api_get_network_report>:
 801dccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dcd0:	460c      	mov	r4, r1
 801dcd2:	b085      	sub	sp, #20
 801dcd4:	4605      	mov	r5, r0
 801dcd6:	b120      	cbz	r0, 801dce2 <ai_platform_api_get_network_report+0x16>
 801dcd8:	4ba5      	ldr	r3, [pc, #660]	; (801df70 <ai_platform_api_get_network_report+0x2a4>)
 801dcda:	6802      	ldr	r2, [r0, #0]
 801dcdc:	429a      	cmp	r2, r3
 801dcde:	bf18      	it	ne
 801dce0:	2500      	movne	r5, #0
 801dce2:	4aa4      	ldr	r2, [pc, #656]	; (801df74 <ai_platform_api_get_network_report+0x2a8>)
 801dce4:	f46f 678a 	mvn.w	r7, #1104	; 0x450
 801dce8:	49a3      	ldr	r1, [pc, #652]	; (801df78 <ai_platform_api_get_network_report+0x2ac>)
 801dcea:	6813      	ldr	r3, [r2, #0]
 801dcec:	f023 0301 	bic.w	r3, r3, #1
 801dcf0:	6013      	str	r3, [r2, #0]
 801dcf2:	680b      	ldr	r3, [r1, #0]
 801dcf4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801dcf8:	19da      	adds	r2, r3, r7
 801dcfa:	2a01      	cmp	r2, #1
 801dcfc:	f240 808c 	bls.w	801de18 <ai_platform_api_get_network_report+0x14c>
 801dd00:	f240 4249 	movw	r2, #1097	; 0x449
 801dd04:	4293      	cmp	r3, r2
 801dd06:	f000 8087 	beq.w	801de18 <ai_platform_api_get_network_report+0x14c>
 801dd0a:	4b9c      	ldr	r3, [pc, #624]	; (801df7c <ai_platform_api_get_network_report+0x2b0>)
 801dd0c:	681b      	ldr	r3, [r3, #0]
 801dd0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801dd12:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801dd16:	d070      	beq.n	801ddfa <ai_platform_api_get_network_report+0x12e>
 801dd18:	2d00      	cmp	r5, #0
 801dd1a:	f000 808d 	beq.w	801de38 <ai_platform_api_get_network_report+0x16c>
 801dd1e:	fab4 f384 	clz	r3, r4
 801dd22:	095b      	lsrs	r3, r3, #5
 801dd24:	2b00      	cmp	r3, #0
 801dd26:	f040 8087 	bne.w	801de38 <ai_platform_api_get_network_report+0x16c>
 801dd2a:	66e3      	str	r3, [r4, #108]	; 0x6c
 801dd2c:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801dd2e:	2a00      	cmp	r2, #0
 801dd30:	f000 810b 	beq.w	801df4a <ai_platform_api_get_network_report+0x27e>
 801dd34:	2301      	movs	r3, #1
 801dd36:	66e3      	str	r3, [r4, #108]	; 0x6c
 801dd38:	6913      	ldr	r3, [r2, #16]
 801dd3a:	b17b      	cbz	r3, 801dd5c <ai_platform_api_get_network_report+0x90>
 801dd3c:	429a      	cmp	r2, r3
 801dd3e:	d00d      	beq.n	801dd5c <ai_platform_api_get_network_report+0x90>
 801dd40:	2102      	movs	r1, #2
 801dd42:	e001      	b.n	801dd48 <ai_platform_api_get_network_report+0x7c>
 801dd44:	b132      	cbz	r2, 801dd54 <ai_platform_api_get_network_report+0x88>
 801dd46:	b12a      	cbz	r2, 801dd54 <ai_platform_api_get_network_report+0x88>
 801dd48:	66e1      	str	r1, [r4, #108]	; 0x6c
 801dd4a:	3101      	adds	r1, #1
 801dd4c:	691a      	ldr	r2, [r3, #16]
 801dd4e:	429a      	cmp	r2, r3
 801dd50:	4613      	mov	r3, r2
 801dd52:	d1f7      	bne.n	801dd44 <ai_platform_api_get_network_report+0x78>
 801dd54:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801dd56:	2b00      	cmp	r3, #0
 801dd58:	f000 80f7 	beq.w	801df4a <ai_platform_api_get_network_report+0x27e>
 801dd5c:	f8b5 3048 	ldrh.w	r3, [r5, #72]	; 0x48
 801dd60:	2b00      	cmp	r3, #0
 801dd62:	f000 80e6 	beq.w	801df32 <ai_platform_api_get_network_report+0x266>
 801dd66:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801dd68:	2f00      	cmp	r7, #0
 801dd6a:	f000 80e2 	beq.w	801df32 <ai_platform_api_get_network_report+0x266>
 801dd6e:	883b      	ldrh	r3, [r7, #0]
 801dd70:	2b00      	cmp	r3, #0
 801dd72:	f000 80de 	beq.w	801df32 <ai_platform_api_get_network_report+0x266>
 801dd76:	687b      	ldr	r3, [r7, #4]
 801dd78:	2b00      	cmp	r3, #0
 801dd7a:	f000 80da 	beq.w	801df32 <ai_platform_api_get_network_report+0x266>
 801dd7e:	681e      	ldr	r6, [r3, #0]
 801dd80:	2e00      	cmp	r6, #0
 801dd82:	f000 80d6 	beq.w	801df32 <ai_platform_api_get_network_report+0x266>
 801dd86:	f04f 0901 	mov.w	r9, #1
 801dd8a:	f04f 0800 	mov.w	r8, #0
 801dd8e:	464b      	mov	r3, r9
 801dd90:	f8d7 c008 	ldr.w	ip, [r7, #8]
 801dd94:	eb08 0248 	add.w	r2, r8, r8, lsl #1
 801dd98:	69b0      	ldr	r0, [r6, #24]
 801dd9a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801dd9e:	6800      	ldr	r0, [r0, #0]
 801dda0:	eb01 0a02 	add.w	sl, r1, r2
 801dda4:	9303      	str	r3, [sp, #12]
 801dda6:	f8dc b008 	ldr.w	fp, [ip, #8]
 801ddaa:	e9cd 1201 	strd	r1, r2, [sp, #4]
 801ddae:	f008 f84f 	bl	8025e50 <ai_array_to_buffer_fmt>
 801ddb2:	9b03      	ldr	r3, [sp, #12]
 801ddb4:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
 801ddb8:	5088      	str	r0, [r1, r2]
 801ddba:	eb0b 0108 	add.w	r1, fp, r8
 801ddbe:	f8aa 3004 	strh.w	r3, [sl, #4]
 801ddc2:	68f2      	ldr	r2, [r6, #12]
 801ddc4:	68d2      	ldr	r2, [r2, #12]
 801ddc6:	f8aa 2006 	strh.w	r2, [sl, #6]
 801ddca:	68f2      	ldr	r2, [r6, #12]
 801ddcc:	6892      	ldr	r2, [r2, #8]
 801ddce:	f8aa 2008 	strh.w	r2, [sl, #8]
 801ddd2:	68f2      	ldr	r2, [r6, #12]
 801ddd4:	6852      	ldr	r2, [r2, #4]
 801ddd6:	f8ca 200c 	str.w	r2, [sl, #12]
 801ddda:	69b2      	ldr	r2, [r6, #24]
 801dddc:	6892      	ldr	r2, [r2, #8]
 801ddde:	f8ca 2010 	str.w	r2, [sl, #16]
 801dde2:	2900      	cmp	r1, #0
 801dde4:	d02c      	beq.n	801de40 <ai_platform_api_get_network_report+0x174>
 801dde6:	2200      	movs	r2, #0
 801dde8:	f84b 2008 	str.w	r2, [fp, r8]
 801ddec:	6832      	ldr	r2, [r6, #0]
 801ddee:	604a      	str	r2, [r1, #4]
 801ddf0:	b332      	cbz	r2, 801de40 <ai_platform_api_get_network_report+0x174>
 801ddf2:	8852      	ldrh	r2, [r2, #2]
 801ddf4:	b322      	cbz	r2, 801de40 <ai_platform_api_get_network_report+0x174>
 801ddf6:	600b      	str	r3, [r1, #0]
 801ddf8:	e023      	b.n	801de42 <ai_platform_api_get_network_report+0x176>
 801ddfa:	4b61      	ldr	r3, [pc, #388]	; (801df80 <ai_platform_api_get_network_report+0x2b4>)
 801ddfc:	2201      	movs	r2, #1
 801ddfe:	4619      	mov	r1, r3
 801de00:	601a      	str	r2, [r3, #0]
 801de02:	680b      	ldr	r3, [r1, #0]
 801de04:	2b00      	cmp	r3, #0
 801de06:	d1fc      	bne.n	801de02 <ai_platform_api_get_network_report+0x136>
 801de08:	4b5e      	ldr	r3, [pc, #376]	; (801df84 <ai_platform_api_get_network_report+0x2b8>)
 801de0a:	495f      	ldr	r1, [pc, #380]	; (801df88 <ai_platform_api_get_network_report+0x2bc>)
 801de0c:	4a5f      	ldr	r2, [pc, #380]	; (801df8c <ai_platform_api_get_network_report+0x2c0>)
 801de0e:	6019      	str	r1, [r3, #0]
 801de10:	681b      	ldr	r3, [r3, #0]
 801de12:	4293      	cmp	r3, r2
 801de14:	d080      	beq.n	801dd18 <ai_platform_api_get_network_report+0x4c>
 801de16:	e7fe      	b.n	801de16 <ai_platform_api_get_network_report+0x14a>
 801de18:	4b5d      	ldr	r3, [pc, #372]	; (801df90 <ai_platform_api_get_network_report+0x2c4>)
 801de1a:	2201      	movs	r2, #1
 801de1c:	4619      	mov	r1, r3
 801de1e:	601a      	str	r2, [r3, #0]
 801de20:	680b      	ldr	r3, [r1, #0]
 801de22:	2b00      	cmp	r3, #0
 801de24:	d1fc      	bne.n	801de20 <ai_platform_api_get_network_report+0x154>
 801de26:	4b5b      	ldr	r3, [pc, #364]	; (801df94 <ai_platform_api_get_network_report+0x2c8>)
 801de28:	4957      	ldr	r1, [pc, #348]	; (801df88 <ai_platform_api_get_network_report+0x2bc>)
 801de2a:	4a58      	ldr	r2, [pc, #352]	; (801df8c <ai_platform_api_get_network_report+0x2c0>)
 801de2c:	6019      	str	r1, [r3, #0]
 801de2e:	681b      	ldr	r3, [r3, #0]
 801de30:	4293      	cmp	r3, r2
 801de32:	f43f af71 	beq.w	801dd18 <ai_platform_api_get_network_report+0x4c>
 801de36:	e7fe      	b.n	801de36 <ai_platform_api_get_network_report+0x16a>
 801de38:	2000      	movs	r0, #0
 801de3a:	b005      	add	sp, #20
 801de3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de40:	2100      	movs	r1, #0
 801de42:	f8ca 1014 	str.w	r1, [sl, #20]
 801de46:	fa1f f289 	uxth.w	r2, r9
 801de4a:	8839      	ldrh	r1, [r7, #0]
 801de4c:	f108 0808 	add.w	r8, r8, #8
 801de50:	4589      	cmp	r9, r1
 801de52:	d207      	bcs.n	801de64 <ai_platform_api_get_network_report+0x198>
 801de54:	6879      	ldr	r1, [r7, #4]
 801de56:	b129      	cbz	r1, 801de64 <ai_platform_api_get_network_report+0x198>
 801de58:	f851 6029 	ldr.w	r6, [r1, r9, lsl #2]
 801de5c:	f109 0901 	add.w	r9, r9, #1
 801de60:	2e00      	cmp	r6, #0
 801de62:	d195      	bne.n	801dd90 <ai_platform_api_get_network_report+0xc4>
 801de64:	2a00      	cmp	r2, #0
 801de66:	d064      	beq.n	801df32 <ai_platform_api_get_network_report+0x266>
 801de68:	68bb      	ldr	r3, [r7, #8]
 801de6a:	685b      	ldr	r3, [r3, #4]
 801de6c:	8622      	strh	r2, [r4, #48]	; 0x30
 801de6e:	6363      	str	r3, [r4, #52]	; 0x34
 801de70:	f8b5 3048 	ldrh.w	r3, [r5, #72]	; 0x48
 801de74:	2b01      	cmp	r3, #1
 801de76:	d970      	bls.n	801df5a <ai_platform_api_get_network_report+0x28e>
 801de78:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801de7a:	f117 0f0c 	cmn.w	r7, #12
 801de7e:	d06c      	beq.n	801df5a <ai_platform_api_get_network_report+0x28e>
 801de80:	89bb      	ldrh	r3, [r7, #12]
 801de82:	2b00      	cmp	r3, #0
 801de84:	d069      	beq.n	801df5a <ai_platform_api_get_network_report+0x28e>
 801de86:	693b      	ldr	r3, [r7, #16]
 801de88:	2b00      	cmp	r3, #0
 801de8a:	d066      	beq.n	801df5a <ai_platform_api_get_network_report+0x28e>
 801de8c:	681e      	ldr	r6, [r3, #0]
 801de8e:	2e00      	cmp	r6, #0
 801de90:	d063      	beq.n	801df5a <ai_platform_api_get_network_report+0x28e>
 801de92:	f04f 0901 	mov.w	r9, #1
 801de96:	f04f 0800 	mov.w	r8, #0
 801de9a:	464b      	mov	r3, r9
 801de9c:	e01c      	b.n	801ded8 <ai_platform_api_get_network_report+0x20c>
 801de9e:	2200      	movs	r2, #0
 801dea0:	f84b 2008 	str.w	r2, [fp, r8]
 801dea4:	6832      	ldr	r2, [r6, #0]
 801dea6:	604a      	str	r2, [r1, #4]
 801dea8:	2a00      	cmp	r2, #0
 801deaa:	d040      	beq.n	801df2e <ai_platform_api_get_network_report+0x262>
 801deac:	8852      	ldrh	r2, [r2, #2]
 801deae:	2a00      	cmp	r2, #0
 801deb0:	d03d      	beq.n	801df2e <ai_platform_api_get_network_report+0x262>
 801deb2:	600b      	str	r3, [r1, #0]
 801deb4:	f8ca 1014 	str.w	r1, [sl, #20]
 801deb8:	fa1f f289 	uxth.w	r2, r9
 801debc:	89b9      	ldrh	r1, [r7, #12]
 801debe:	f108 0808 	add.w	r8, r8, #8
 801dec2:	4589      	cmp	r9, r1
 801dec4:	d268      	bcs.n	801df98 <ai_platform_api_get_network_report+0x2cc>
 801dec6:	6939      	ldr	r1, [r7, #16]
 801dec8:	2900      	cmp	r1, #0
 801deca:	d065      	beq.n	801df98 <ai_platform_api_get_network_report+0x2cc>
 801decc:	f851 6029 	ldr.w	r6, [r1, r9, lsl #2]
 801ded0:	f109 0901 	add.w	r9, r9, #1
 801ded4:	2e00      	cmp	r6, #0
 801ded6:	d05f      	beq.n	801df98 <ai_platform_api_get_network_report+0x2cc>
 801ded8:	f8d7 c014 	ldr.w	ip, [r7, #20]
 801dedc:	eb08 0248 	add.w	r2, r8, r8, lsl #1
 801dee0:	69b0      	ldr	r0, [r6, #24]
 801dee2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801dee6:	6800      	ldr	r0, [r0, #0]
 801dee8:	eb01 0a02 	add.w	sl, r1, r2
 801deec:	9303      	str	r3, [sp, #12]
 801deee:	f8dc b008 	ldr.w	fp, [ip, #8]
 801def2:	e9cd 1201 	strd	r1, r2, [sp, #4]
 801def6:	f007 ffab 	bl	8025e50 <ai_array_to_buffer_fmt>
 801defa:	9b03      	ldr	r3, [sp, #12]
 801defc:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
 801df00:	5088      	str	r0, [r1, r2]
 801df02:	eb0b 0108 	add.w	r1, fp, r8
 801df06:	f8aa 3004 	strh.w	r3, [sl, #4]
 801df0a:	68f2      	ldr	r2, [r6, #12]
 801df0c:	68d2      	ldr	r2, [r2, #12]
 801df0e:	f8aa 2006 	strh.w	r2, [sl, #6]
 801df12:	68f2      	ldr	r2, [r6, #12]
 801df14:	6892      	ldr	r2, [r2, #8]
 801df16:	f8aa 2008 	strh.w	r2, [sl, #8]
 801df1a:	68f2      	ldr	r2, [r6, #12]
 801df1c:	6852      	ldr	r2, [r2, #4]
 801df1e:	f8ca 200c 	str.w	r2, [sl, #12]
 801df22:	69b2      	ldr	r2, [r6, #24]
 801df24:	6892      	ldr	r2, [r2, #8]
 801df26:	f8ca 2010 	str.w	r2, [sl, #16]
 801df2a:	2900      	cmp	r1, #0
 801df2c:	d1b7      	bne.n	801de9e <ai_platform_api_get_network_report+0x1d2>
 801df2e:	2100      	movs	r1, #0
 801df30:	e7c0      	b.n	801deb4 <ai_platform_api_get_network_report+0x1e8>
 801df32:	2600      	movs	r6, #0
 801df34:	f105 0010 	add.w	r0, r5, #16
 801df38:	2218      	movs	r2, #24
 801df3a:	2112      	movs	r1, #18
 801df3c:	8626      	strh	r6, [r4, #48]	; 0x30
 801df3e:	f001 fa49 	bl	801f3d4 <core_set_error>
 801df42:	4630      	mov	r0, r6
 801df44:	b005      	add	sp, #20
 801df46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df4a:	f105 0010 	add.w	r0, r5, #16
 801df4e:	2218      	movs	r2, #24
 801df50:	2111      	movs	r1, #17
 801df52:	f001 fa3f 	bl	801f3d4 <core_set_error>
 801df56:	2000      	movs	r0, #0
 801df58:	e76f      	b.n	801de3a <ai_platform_api_get_network_report+0x16e>
 801df5a:	2600      	movs	r6, #0
 801df5c:	f105 0010 	add.w	r0, r5, #16
 801df60:	2218      	movs	r2, #24
 801df62:	2113      	movs	r1, #19
 801df64:	8666      	strh	r6, [r4, #50]	; 0x32
 801df66:	f001 fa35 	bl	801f3d4 <core_set_error>
 801df6a:	4630      	mov	r0, r6
 801df6c:	e765      	b.n	801de3a <ai_platform_api_get_network_report+0x16e>
 801df6e:	bf00      	nop
 801df70:	a1c00100 	.word	0xa1c00100
 801df74:	e0002000 	.word	0xe0002000
 801df78:	e0042000 	.word	0xe0042000
 801df7c:	5c001000 	.word	0x5c001000
 801df80:	58024c08 	.word	0x58024c08
 801df84:	58024c00 	.word	0x58024c00
 801df88:	f407a5c2 	.word	0xf407a5c2
 801df8c:	b5e8b5cd 	.word	0xb5e8b5cd
 801df90:	40023008 	.word	0x40023008
 801df94:	40023000 	.word	0x40023000
 801df98:	2a00      	cmp	r2, #0
 801df9a:	d0de      	beq.n	801df5a <ai_platform_api_get_network_report+0x28e>
 801df9c:	697b      	ldr	r3, [r7, #20]
 801df9e:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 801dfa2:	f104 0c3c 	add.w	ip, r4, #60	; 0x3c
 801dfa6:	f105 0718 	add.w	r7, r5, #24
 801dfaa:	685b      	ldr	r3, [r3, #4]
 801dfac:	f104 0654 	add.w	r6, r4, #84	; 0x54
 801dfb0:	8662      	strh	r2, [r4, #50]	; 0x32
 801dfb2:	63a3      	str	r3, [r4, #56]	; 0x38
 801dfb4:	686b      	ldr	r3, [r5, #4]
 801dfb6:	6723      	str	r3, [r4, #112]	; 0x70
 801dfb8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801dfbc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801dfc0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801dfc4:	f8df e214 	ldr.w	lr, [pc, #532]	; 801e1dc <ai_platform_api_get_network_report+0x510>
 801dfc8:	e88c 0003 	stmia.w	ip, {r0, r1}
 801dfcc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801dfce:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801dfd0:	e897 0003 	ldmia.w	r7, {r0, r1}
 801dfd4:	4a7f      	ldr	r2, [pc, #508]	; (801e1d4 <ai_platform_api_get_network_report+0x508>)
 801dfd6:	e886 0003 	stmia.w	r6, {r0, r1}
 801dfda:	f8de 3000 	ldr.w	r3, [lr]
 801dfde:	f46f 668a 	mvn.w	r6, #1104	; 0x450
 801dfe2:	f023 0301 	bic.w	r3, r3, #1
 801dfe6:	f8ce 3000 	str.w	r3, [lr]
 801dfea:	6813      	ldr	r3, [r2, #0]
 801dfec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801dff0:	199a      	adds	r2, r3, r6
 801dff2:	2a01      	cmp	r2, #1
 801dff4:	d972      	bls.n	801e0dc <ai_platform_api_get_network_report+0x410>
 801dff6:	f240 4249 	movw	r2, #1097	; 0x449
 801dffa:	4293      	cmp	r3, r2
 801dffc:	d06e      	beq.n	801e0dc <ai_platform_api_get_network_report+0x410>
 801dffe:	4b76      	ldr	r3, [pc, #472]	; (801e1d8 <ai_platform_api_get_network_report+0x50c>)
 801e000:	681b      	ldr	r3, [r3, #0]
 801e002:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801e006:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801e00a:	f000 80d2 	beq.w	801e1b2 <ai_platform_api_get_network_report+0x4e6>
 801e00e:	4a73      	ldr	r2, [pc, #460]	; (801e1dc <ai_platform_api_get_network_report+0x510>)
 801e010:	f46f 608a 	mvn.w	r0, #1104	; 0x450
 801e014:	4b72      	ldr	r3, [pc, #456]	; (801e1e0 <ai_platform_api_get_network_report+0x514>)
 801e016:	496f      	ldr	r1, [pc, #444]	; (801e1d4 <ai_platform_api_get_network_report+0x508>)
 801e018:	6123      	str	r3, [r4, #16]
 801e01a:	6813      	ldr	r3, [r2, #0]
 801e01c:	f023 0301 	bic.w	r3, r3, #1
 801e020:	6013      	str	r3, [r2, #0]
 801e022:	680b      	ldr	r3, [r1, #0]
 801e024:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801e028:	181a      	adds	r2, r3, r0
 801e02a:	2a01      	cmp	r2, #1
 801e02c:	f240 80b1 	bls.w	801e192 <ai_platform_api_get_network_report+0x4c6>
 801e030:	f240 4249 	movw	r2, #1097	; 0x449
 801e034:	4293      	cmp	r3, r2
 801e036:	f000 80ac 	beq.w	801e192 <ai_platform_api_get_network_report+0x4c6>
 801e03a:	4b67      	ldr	r3, [pc, #412]	; (801e1d8 <ai_platform_api_get_network_report+0x50c>)
 801e03c:	681b      	ldr	r3, [r3, #0]
 801e03e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801e042:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801e046:	f000 8094 	beq.w	801e172 <ai_platform_api_get_network_report+0x4a6>
 801e04a:	4a64      	ldr	r2, [pc, #400]	; (801e1dc <ai_platform_api_get_network_report+0x510>)
 801e04c:	2306      	movs	r3, #6
 801e04e:	4961      	ldr	r1, [pc, #388]	; (801e1d4 <ai_platform_api_get_network_report+0x508>)
 801e050:	6163      	str	r3, [r4, #20]
 801e052:	6813      	ldr	r3, [r2, #0]
 801e054:	f023 0301 	bic.w	r3, r3, #1
 801e058:	6013      	str	r3, [r2, #0]
 801e05a:	680b      	ldr	r3, [r1, #0]
 801e05c:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 801e060:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801e064:	185a      	adds	r2, r3, r1
 801e066:	2a01      	cmp	r2, #1
 801e068:	d974      	bls.n	801e154 <ai_platform_api_get_network_report+0x488>
 801e06a:	f240 4249 	movw	r2, #1097	; 0x449
 801e06e:	4293      	cmp	r3, r2
 801e070:	d070      	beq.n	801e154 <ai_platform_api_get_network_report+0x488>
 801e072:	4b59      	ldr	r3, [pc, #356]	; (801e1d8 <ai_platform_api_get_network_report+0x50c>)
 801e074:	681b      	ldr	r3, [r3, #0]
 801e076:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801e07a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801e07e:	d05a      	beq.n	801e136 <ai_platform_api_get_network_report+0x46a>
 801e080:	4a56      	ldr	r2, [pc, #344]	; (801e1dc <ai_platform_api_get_network_report+0x510>)
 801e082:	f240 1301 	movw	r3, #257	; 0x101
 801e086:	4953      	ldr	r1, [pc, #332]	; (801e1d4 <ai_platform_api_get_network_report+0x508>)
 801e088:	6263      	str	r3, [r4, #36]	; 0x24
 801e08a:	6813      	ldr	r3, [r2, #0]
 801e08c:	f023 0301 	bic.w	r3, r3, #1
 801e090:	6013      	str	r3, [r2, #0]
 801e092:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801e096:	680b      	ldr	r3, [r1, #0]
 801e098:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801e09c:	189a      	adds	r2, r3, r2
 801e09e:	2a01      	cmp	r2, #1
 801e0a0:	d93a      	bls.n	801e118 <ai_platform_api_get_network_report+0x44c>
 801e0a2:	f240 4249 	movw	r2, #1097	; 0x449
 801e0a6:	4293      	cmp	r3, r2
 801e0a8:	d036      	beq.n	801e118 <ai_platform_api_get_network_report+0x44c>
 801e0aa:	4b4b      	ldr	r3, [pc, #300]	; (801e1d8 <ai_platform_api_get_network_report+0x50c>)
 801e0ac:	681b      	ldr	r3, [r3, #0]
 801e0ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801e0b2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801e0b6:	d020      	beq.n	801e0fa <ai_platform_api_get_network_report+0x42e>
 801e0b8:	f240 4301 	movw	r3, #1025	; 0x401
 801e0bc:	2200      	movs	r2, #0
 801e0be:	2001      	movs	r0, #1
 801e0c0:	62a3      	str	r3, [r4, #40]	; 0x28
 801e0c2:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 801e0c4:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
 801e0c8:	0e19      	lsrs	r1, r3, #24
 801e0ca:	0c1a      	lsrs	r2, r3, #16
 801e0cc:	0a1b      	lsrs	r3, r3, #8
 801e0ce:	f884 1020 	strb.w	r1, [r4, #32]
 801e0d2:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
 801e0d6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 801e0da:	e6ae      	b.n	801de3a <ai_platform_api_get_network_report+0x16e>
 801e0dc:	4b41      	ldr	r3, [pc, #260]	; (801e1e4 <ai_platform_api_get_network_report+0x518>)
 801e0de:	2201      	movs	r2, #1
 801e0e0:	4619      	mov	r1, r3
 801e0e2:	601a      	str	r2, [r3, #0]
 801e0e4:	680b      	ldr	r3, [r1, #0]
 801e0e6:	2b00      	cmp	r3, #0
 801e0e8:	d1fc      	bne.n	801e0e4 <ai_platform_api_get_network_report+0x418>
 801e0ea:	4b3f      	ldr	r3, [pc, #252]	; (801e1e8 <ai_platform_api_get_network_report+0x51c>)
 801e0ec:	493f      	ldr	r1, [pc, #252]	; (801e1ec <ai_platform_api_get_network_report+0x520>)
 801e0ee:	4a40      	ldr	r2, [pc, #256]	; (801e1f0 <ai_platform_api_get_network_report+0x524>)
 801e0f0:	6019      	str	r1, [r3, #0]
 801e0f2:	681b      	ldr	r3, [r3, #0]
 801e0f4:	4293      	cmp	r3, r2
 801e0f6:	d08a      	beq.n	801e00e <ai_platform_api_get_network_report+0x342>
 801e0f8:	e7fe      	b.n	801e0f8 <ai_platform_api_get_network_report+0x42c>
 801e0fa:	4b3e      	ldr	r3, [pc, #248]	; (801e1f4 <ai_platform_api_get_network_report+0x528>)
 801e0fc:	2201      	movs	r2, #1
 801e0fe:	4619      	mov	r1, r3
 801e100:	601a      	str	r2, [r3, #0]
 801e102:	680b      	ldr	r3, [r1, #0]
 801e104:	2b00      	cmp	r3, #0
 801e106:	d1fc      	bne.n	801e102 <ai_platform_api_get_network_report+0x436>
 801e108:	4b3b      	ldr	r3, [pc, #236]	; (801e1f8 <ai_platform_api_get_network_report+0x52c>)
 801e10a:	4938      	ldr	r1, [pc, #224]	; (801e1ec <ai_platform_api_get_network_report+0x520>)
 801e10c:	4a38      	ldr	r2, [pc, #224]	; (801e1f0 <ai_platform_api_get_network_report+0x524>)
 801e10e:	6019      	str	r1, [r3, #0]
 801e110:	681b      	ldr	r3, [r3, #0]
 801e112:	4293      	cmp	r3, r2
 801e114:	d0d0      	beq.n	801e0b8 <ai_platform_api_get_network_report+0x3ec>
 801e116:	e7fe      	b.n	801e116 <ai_platform_api_get_network_report+0x44a>
 801e118:	4b32      	ldr	r3, [pc, #200]	; (801e1e4 <ai_platform_api_get_network_report+0x518>)
 801e11a:	2201      	movs	r2, #1
 801e11c:	4619      	mov	r1, r3
 801e11e:	601a      	str	r2, [r3, #0]
 801e120:	680b      	ldr	r3, [r1, #0]
 801e122:	2b00      	cmp	r3, #0
 801e124:	d1fc      	bne.n	801e120 <ai_platform_api_get_network_report+0x454>
 801e126:	4b30      	ldr	r3, [pc, #192]	; (801e1e8 <ai_platform_api_get_network_report+0x51c>)
 801e128:	4930      	ldr	r1, [pc, #192]	; (801e1ec <ai_platform_api_get_network_report+0x520>)
 801e12a:	4a31      	ldr	r2, [pc, #196]	; (801e1f0 <ai_platform_api_get_network_report+0x524>)
 801e12c:	6019      	str	r1, [r3, #0]
 801e12e:	681b      	ldr	r3, [r3, #0]
 801e130:	4293      	cmp	r3, r2
 801e132:	d0c1      	beq.n	801e0b8 <ai_platform_api_get_network_report+0x3ec>
 801e134:	e7fe      	b.n	801e134 <ai_platform_api_get_network_report+0x468>
 801e136:	4b2f      	ldr	r3, [pc, #188]	; (801e1f4 <ai_platform_api_get_network_report+0x528>)
 801e138:	2201      	movs	r2, #1
 801e13a:	4619      	mov	r1, r3
 801e13c:	601a      	str	r2, [r3, #0]
 801e13e:	680b      	ldr	r3, [r1, #0]
 801e140:	2b00      	cmp	r3, #0
 801e142:	d1fc      	bne.n	801e13e <ai_platform_api_get_network_report+0x472>
 801e144:	4b2c      	ldr	r3, [pc, #176]	; (801e1f8 <ai_platform_api_get_network_report+0x52c>)
 801e146:	4929      	ldr	r1, [pc, #164]	; (801e1ec <ai_platform_api_get_network_report+0x520>)
 801e148:	4a29      	ldr	r2, [pc, #164]	; (801e1f0 <ai_platform_api_get_network_report+0x524>)
 801e14a:	6019      	str	r1, [r3, #0]
 801e14c:	681b      	ldr	r3, [r3, #0]
 801e14e:	4293      	cmp	r3, r2
 801e150:	d096      	beq.n	801e080 <ai_platform_api_get_network_report+0x3b4>
 801e152:	e7fe      	b.n	801e152 <ai_platform_api_get_network_report+0x486>
 801e154:	4b23      	ldr	r3, [pc, #140]	; (801e1e4 <ai_platform_api_get_network_report+0x518>)
 801e156:	2201      	movs	r2, #1
 801e158:	4619      	mov	r1, r3
 801e15a:	601a      	str	r2, [r3, #0]
 801e15c:	680b      	ldr	r3, [r1, #0]
 801e15e:	2b00      	cmp	r3, #0
 801e160:	d1fc      	bne.n	801e15c <ai_platform_api_get_network_report+0x490>
 801e162:	4b21      	ldr	r3, [pc, #132]	; (801e1e8 <ai_platform_api_get_network_report+0x51c>)
 801e164:	4921      	ldr	r1, [pc, #132]	; (801e1ec <ai_platform_api_get_network_report+0x520>)
 801e166:	4a22      	ldr	r2, [pc, #136]	; (801e1f0 <ai_platform_api_get_network_report+0x524>)
 801e168:	6019      	str	r1, [r3, #0]
 801e16a:	681b      	ldr	r3, [r3, #0]
 801e16c:	4293      	cmp	r3, r2
 801e16e:	d087      	beq.n	801e080 <ai_platform_api_get_network_report+0x3b4>
 801e170:	e7fe      	b.n	801e170 <ai_platform_api_get_network_report+0x4a4>
 801e172:	4b20      	ldr	r3, [pc, #128]	; (801e1f4 <ai_platform_api_get_network_report+0x528>)
 801e174:	2201      	movs	r2, #1
 801e176:	4619      	mov	r1, r3
 801e178:	601a      	str	r2, [r3, #0]
 801e17a:	680b      	ldr	r3, [r1, #0]
 801e17c:	2b00      	cmp	r3, #0
 801e17e:	d1fc      	bne.n	801e17a <ai_platform_api_get_network_report+0x4ae>
 801e180:	4b1d      	ldr	r3, [pc, #116]	; (801e1f8 <ai_platform_api_get_network_report+0x52c>)
 801e182:	491a      	ldr	r1, [pc, #104]	; (801e1ec <ai_platform_api_get_network_report+0x520>)
 801e184:	4a1a      	ldr	r2, [pc, #104]	; (801e1f0 <ai_platform_api_get_network_report+0x524>)
 801e186:	6019      	str	r1, [r3, #0]
 801e188:	681b      	ldr	r3, [r3, #0]
 801e18a:	4293      	cmp	r3, r2
 801e18c:	f43f af5d 	beq.w	801e04a <ai_platform_api_get_network_report+0x37e>
 801e190:	e7fe      	b.n	801e190 <ai_platform_api_get_network_report+0x4c4>
 801e192:	4b14      	ldr	r3, [pc, #80]	; (801e1e4 <ai_platform_api_get_network_report+0x518>)
 801e194:	2201      	movs	r2, #1
 801e196:	4619      	mov	r1, r3
 801e198:	601a      	str	r2, [r3, #0]
 801e19a:	680b      	ldr	r3, [r1, #0]
 801e19c:	2b00      	cmp	r3, #0
 801e19e:	d1fc      	bne.n	801e19a <ai_platform_api_get_network_report+0x4ce>
 801e1a0:	4b11      	ldr	r3, [pc, #68]	; (801e1e8 <ai_platform_api_get_network_report+0x51c>)
 801e1a2:	4912      	ldr	r1, [pc, #72]	; (801e1ec <ai_platform_api_get_network_report+0x520>)
 801e1a4:	4a12      	ldr	r2, [pc, #72]	; (801e1f0 <ai_platform_api_get_network_report+0x524>)
 801e1a6:	6019      	str	r1, [r3, #0]
 801e1a8:	681b      	ldr	r3, [r3, #0]
 801e1aa:	4293      	cmp	r3, r2
 801e1ac:	f43f af4d 	beq.w	801e04a <ai_platform_api_get_network_report+0x37e>
 801e1b0:	e7fe      	b.n	801e1b0 <ai_platform_api_get_network_report+0x4e4>
 801e1b2:	4b10      	ldr	r3, [pc, #64]	; (801e1f4 <ai_platform_api_get_network_report+0x528>)
 801e1b4:	2201      	movs	r2, #1
 801e1b6:	4619      	mov	r1, r3
 801e1b8:	601a      	str	r2, [r3, #0]
 801e1ba:	680b      	ldr	r3, [r1, #0]
 801e1bc:	2b00      	cmp	r3, #0
 801e1be:	d1fc      	bne.n	801e1ba <ai_platform_api_get_network_report+0x4ee>
 801e1c0:	4b0d      	ldr	r3, [pc, #52]	; (801e1f8 <ai_platform_api_get_network_report+0x52c>)
 801e1c2:	490a      	ldr	r1, [pc, #40]	; (801e1ec <ai_platform_api_get_network_report+0x520>)
 801e1c4:	4a0a      	ldr	r2, [pc, #40]	; (801e1f0 <ai_platform_api_get_network_report+0x524>)
 801e1c6:	6019      	str	r1, [r3, #0]
 801e1c8:	681b      	ldr	r3, [r3, #0]
 801e1ca:	4293      	cmp	r3, r2
 801e1cc:	f43f af1f 	beq.w	801e00e <ai_platform_api_get_network_report+0x342>
 801e1d0:	e7fe      	b.n	801e1d0 <ai_platform_api_get_network_report+0x504>
 801e1d2:	bf00      	nop
 801e1d4:	e0042000 	.word	0xe0042000
 801e1d8:	5c001000 	.word	0x5c001000
 801e1dc:	e0002000 	.word	0xe0002000
 801e1e0:	08028f38 	.word	0x08028f38
 801e1e4:	40023008 	.word	0x40023008
 801e1e8:	40023000 	.word	0x40023000
 801e1ec:	f407a5c2 	.word	0xf407a5c2
 801e1f0:	b5e8b5cd 	.word	0xb5e8b5cd
 801e1f4:	58024c08 	.word	0x58024c08
 801e1f8:	58024c00 	.word	0x58024c00

0801e1fc <ai_platform_network_create>:
 801e1fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e200:	4d56      	ldr	r5, [pc, #344]	; (801e35c <ai_platform_network_create+0x160>)
 801e202:	b082      	sub	sp, #8
 801e204:	4e56      	ldr	r6, [pc, #344]	; (801e360 <ai_platform_network_create+0x164>)
 801e206:	6829      	ldr	r1, [r5, #0]
 801e208:	f89d 4020 	ldrb.w	r4, [sp, #32]
 801e20c:	f021 0101 	bic.w	r1, r1, #1
 801e210:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 801e214:	6029      	str	r1, [r5, #0]
 801e216:	f46f 658a 	mvn.w	r5, #1104	; 0x450
 801e21a:	6831      	ldr	r1, [r6, #0]
 801e21c:	f3c1 010a 	ubfx	r1, r1, #0, #11
 801e220:	194d      	adds	r5, r1, r5
 801e222:	2d01      	cmp	r5, #1
 801e224:	d939      	bls.n	801e29a <ai_platform_network_create+0x9e>
 801e226:	f240 4549 	movw	r5, #1097	; 0x449
 801e22a:	42a9      	cmp	r1, r5
 801e22c:	d035      	beq.n	801e29a <ai_platform_network_create+0x9e>
 801e22e:	494d      	ldr	r1, [pc, #308]	; (801e364 <ai_platform_network_create+0x168>)
 801e230:	6809      	ldr	r1, [r1, #0]
 801e232:	f3c1 010a 	ubfx	r1, r1, #0, #11
 801e236:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 801e23a:	d01f      	beq.n	801e27c <ai_platform_network_create+0x80>
 801e23c:	2800      	cmp	r0, #0
 801e23e:	d03b      	beq.n	801e2b8 <ai_platform_network_create+0xbc>
 801e240:	4698      	mov	r8, r3
 801e242:	4606      	mov	r6, r0
 801e244:	4b48      	ldr	r3, [pc, #288]	; (801e368 <ai_platform_network_create+0x16c>)
 801e246:	4615      	mov	r5, r2
 801e248:	6013      	str	r3, [r2, #0]
 801e24a:	6032      	str	r2, [r6, #0]
 801e24c:	f001 f8c0 	bl	801f3d0 <core_init>
 801e250:	2800      	cmp	r0, #0
 801e252:	d136      	bne.n	801e2c2 <ai_platform_network_create+0xc6>
 801e254:	ea4f 6808 	mov.w	r8, r8, lsl #24
 801e258:	2230      	movs	r2, #48	; 0x30
 801e25a:	0424      	lsls	r4, r4, #16
 801e25c:	2300      	movs	r3, #0
 801e25e:	2110      	movs	r1, #16
 801e260:	6033      	str	r3, [r6, #0]
 801e262:	2000      	movs	r0, #0
 801e264:	ea44 2307 	orr.w	r3, r4, r7, lsl #8
 801e268:	f362 0007 	bfi	r0, r2, #0, #8
 801e26c:	ea43 0308 	orr.w	r3, r3, r8
 801e270:	f361 201f 	bfi	r0, r1, #8, #24
 801e274:	662b      	str	r3, [r5, #96]	; 0x60
 801e276:	b002      	add	sp, #8
 801e278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e27c:	493b      	ldr	r1, [pc, #236]	; (801e36c <ai_platform_network_create+0x170>)
 801e27e:	2501      	movs	r5, #1
 801e280:	460e      	mov	r6, r1
 801e282:	600d      	str	r5, [r1, #0]
 801e284:	6831      	ldr	r1, [r6, #0]
 801e286:	2900      	cmp	r1, #0
 801e288:	d1fc      	bne.n	801e284 <ai_platform_network_create+0x88>
 801e28a:	4939      	ldr	r1, [pc, #228]	; (801e370 <ai_platform_network_create+0x174>)
 801e28c:	4e39      	ldr	r6, [pc, #228]	; (801e374 <ai_platform_network_create+0x178>)
 801e28e:	4d3a      	ldr	r5, [pc, #232]	; (801e378 <ai_platform_network_create+0x17c>)
 801e290:	600e      	str	r6, [r1, #0]
 801e292:	6809      	ldr	r1, [r1, #0]
 801e294:	42a9      	cmp	r1, r5
 801e296:	d0d1      	beq.n	801e23c <ai_platform_network_create+0x40>
 801e298:	e7fe      	b.n	801e298 <ai_platform_network_create+0x9c>
 801e29a:	4938      	ldr	r1, [pc, #224]	; (801e37c <ai_platform_network_create+0x180>)
 801e29c:	2501      	movs	r5, #1
 801e29e:	460e      	mov	r6, r1
 801e2a0:	600d      	str	r5, [r1, #0]
 801e2a2:	6831      	ldr	r1, [r6, #0]
 801e2a4:	2900      	cmp	r1, #0
 801e2a6:	d1fc      	bne.n	801e2a2 <ai_platform_network_create+0xa6>
 801e2a8:	4935      	ldr	r1, [pc, #212]	; (801e380 <ai_platform_network_create+0x184>)
 801e2aa:	4e32      	ldr	r6, [pc, #200]	; (801e374 <ai_platform_network_create+0x178>)
 801e2ac:	4d32      	ldr	r5, [pc, #200]	; (801e378 <ai_platform_network_create+0x17c>)
 801e2ae:	600e      	str	r6, [r1, #0]
 801e2b0:	6809      	ldr	r1, [r1, #0]
 801e2b2:	42a9      	cmp	r1, r5
 801e2b4:	d0c2      	beq.n	801e23c <ai_platform_network_create+0x40>
 801e2b6:	e7fe      	b.n	801e2b6 <ai_platform_network_create+0xba>
 801e2b8:	f241 0010 	movw	r0, #4112	; 0x1010
 801e2bc:	b002      	add	sp, #8
 801e2be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e2c2:	4a26      	ldr	r2, [pc, #152]	; (801e35c <ai_platform_network_create+0x160>)
 801e2c4:	4926      	ldr	r1, [pc, #152]	; (801e360 <ai_platform_network_create+0x164>)
 801e2c6:	6813      	ldr	r3, [r2, #0]
 801e2c8:	f023 0301 	bic.w	r3, r3, #1
 801e2cc:	6013      	str	r3, [r2, #0]
 801e2ce:	f46f 638a 	mvn.w	r3, #1104	; 0x450
 801e2d2:	680a      	ldr	r2, [r1, #0]
 801e2d4:	f3c2 020a 	ubfx	r2, r2, #0, #11
 801e2d8:	18d3      	adds	r3, r2, r3
 801e2da:	2b01      	cmp	r3, #1
 801e2dc:	d914      	bls.n	801e308 <ai_platform_network_create+0x10c>
 801e2de:	f240 4349 	movw	r3, #1097	; 0x449
 801e2e2:	429a      	cmp	r2, r3
 801e2e4:	d010      	beq.n	801e308 <ai_platform_network_create+0x10c>
 801e2e6:	4b1f      	ldr	r3, [pc, #124]	; (801e364 <ai_platform_network_create+0x168>)
 801e2e8:	681b      	ldr	r3, [r3, #0]
 801e2ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801e2ee:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801e2f2:	d022      	beq.n	801e33a <ai_platform_network_create+0x13e>
 801e2f4:	ea4f 6808 	mov.w	r8, r8, lsl #24
 801e2f8:	0424      	lsls	r4, r4, #16
 801e2fa:	ea48 0304 	orr.w	r3, r8, r4
 801e2fe:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 801e302:	d010      	beq.n	801e326 <ai_platform_network_create+0x12a>
 801e304:	2201      	movs	r2, #1
 801e306:	e7a9      	b.n	801e25c <ai_platform_network_create+0x60>
 801e308:	4b1c      	ldr	r3, [pc, #112]	; (801e37c <ai_platform_network_create+0x180>)
 801e30a:	2201      	movs	r2, #1
 801e30c:	4619      	mov	r1, r3
 801e30e:	601a      	str	r2, [r3, #0]
 801e310:	680b      	ldr	r3, [r1, #0]
 801e312:	2b00      	cmp	r3, #0
 801e314:	d1fc      	bne.n	801e310 <ai_platform_network_create+0x114>
 801e316:	4b1a      	ldr	r3, [pc, #104]	; (801e380 <ai_platform_network_create+0x184>)
 801e318:	4916      	ldr	r1, [pc, #88]	; (801e374 <ai_platform_network_create+0x178>)
 801e31a:	4a17      	ldr	r2, [pc, #92]	; (801e378 <ai_platform_network_create+0x17c>)
 801e31c:	6019      	str	r1, [r3, #0]
 801e31e:	681b      	ldr	r3, [r3, #0]
 801e320:	4293      	cmp	r3, r2
 801e322:	d0e7      	beq.n	801e2f4 <ai_platform_network_create+0xf8>
 801e324:	e7fe      	b.n	801e324 <ai_platform_network_create+0x128>
 801e326:	4b17      	ldr	r3, [pc, #92]	; (801e384 <ai_platform_network_create+0x188>)
 801e328:	a802      	add	r0, sp, #8
 801e32a:	f840 3d04 	str.w	r3, [r0, #-4]!
 801e32e:	f002 fab3 	bl	8020898 <ai_check_custom_types>
 801e332:	b188      	cbz	r0, 801e358 <ai_platform_network_create+0x15c>
 801e334:	2100      	movs	r1, #0
 801e336:	460a      	mov	r2, r1
 801e338:	e793      	b.n	801e262 <ai_platform_network_create+0x66>
 801e33a:	4b0c      	ldr	r3, [pc, #48]	; (801e36c <ai_platform_network_create+0x170>)
 801e33c:	2201      	movs	r2, #1
 801e33e:	4619      	mov	r1, r3
 801e340:	601a      	str	r2, [r3, #0]
 801e342:	680b      	ldr	r3, [r1, #0]
 801e344:	2b00      	cmp	r3, #0
 801e346:	d1fc      	bne.n	801e342 <ai_platform_network_create+0x146>
 801e348:	4b09      	ldr	r3, [pc, #36]	; (801e370 <ai_platform_network_create+0x174>)
 801e34a:	490a      	ldr	r1, [pc, #40]	; (801e374 <ai_platform_network_create+0x178>)
 801e34c:	4a0a      	ldr	r2, [pc, #40]	; (801e378 <ai_platform_network_create+0x17c>)
 801e34e:	6019      	str	r1, [r3, #0]
 801e350:	681b      	ldr	r3, [r3, #0]
 801e352:	4293      	cmp	r3, r2
 801e354:	d0ce      	beq.n	801e2f4 <ai_platform_network_create+0xf8>
 801e356:	e7fe      	b.n	801e356 <ai_platform_network_create+0x15a>
 801e358:	2202      	movs	r2, #2
 801e35a:	e77f      	b.n	801e25c <ai_platform_network_create+0x60>
 801e35c:	e0002000 	.word	0xe0002000
 801e360:	e0042000 	.word	0xe0042000
 801e364:	5c001000 	.word	0x5c001000
 801e368:	a1c00100 	.word	0xa1c00100
 801e36c:	58024c08 	.word	0x58024c08
 801e370:	58024c00 	.word	0x58024c00
 801e374:	f407a5c2 	.word	0xf407a5c2
 801e378:	b5e8b5cd 	.word	0xb5e8b5cd
 801e37c:	40023008 	.word	0x40023008
 801e380:	40023000 	.word	0x40023000
 801e384:	84048403 	.word	0x84048403

0801e388 <ai_platform_network_destroy>:
 801e388:	b508      	push	{r3, lr}
 801e38a:	b118      	cbz	r0, 801e394 <ai_platform_network_destroy+0xc>
 801e38c:	4b3b      	ldr	r3, [pc, #236]	; (801e47c <ai_platform_network_destroy+0xf4>)
 801e38e:	6802      	ldr	r2, [r0, #0]
 801e390:	429a      	cmp	r2, r3
 801e392:	d037      	beq.n	801e404 <ai_platform_network_destroy+0x7c>
 801e394:	4a3a      	ldr	r2, [pc, #232]	; (801e480 <ai_platform_network_destroy+0xf8>)
 801e396:	493b      	ldr	r1, [pc, #236]	; (801e484 <ai_platform_network_destroy+0xfc>)
 801e398:	6813      	ldr	r3, [r2, #0]
 801e39a:	f023 0301 	bic.w	r3, r3, #1
 801e39e:	6013      	str	r3, [r2, #0]
 801e3a0:	680b      	ldr	r3, [r1, #0]
 801e3a2:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 801e3a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801e3aa:	185a      	adds	r2, r3, r1
 801e3ac:	2a01      	cmp	r2, #1
 801e3ae:	d91a      	bls.n	801e3e6 <ai_platform_network_destroy+0x5e>
 801e3b0:	f240 4249 	movw	r2, #1097	; 0x449
 801e3b4:	4293      	cmp	r3, r2
 801e3b6:	d016      	beq.n	801e3e6 <ai_platform_network_destroy+0x5e>
 801e3b8:	4b33      	ldr	r3, [pc, #204]	; (801e488 <ai_platform_network_destroy+0x100>)
 801e3ba:	681b      	ldr	r3, [r3, #0]
 801e3bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801e3c0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801e3c4:	d000      	beq.n	801e3c8 <ai_platform_network_destroy+0x40>
 801e3c6:	bd08      	pop	{r3, pc}
 801e3c8:	4b30      	ldr	r3, [pc, #192]	; (801e48c <ai_platform_network_destroy+0x104>)
 801e3ca:	2201      	movs	r2, #1
 801e3cc:	4619      	mov	r1, r3
 801e3ce:	601a      	str	r2, [r3, #0]
 801e3d0:	680b      	ldr	r3, [r1, #0]
 801e3d2:	2b00      	cmp	r3, #0
 801e3d4:	d1fc      	bne.n	801e3d0 <ai_platform_network_destroy+0x48>
 801e3d6:	4b2e      	ldr	r3, [pc, #184]	; (801e490 <ai_platform_network_destroy+0x108>)
 801e3d8:	492e      	ldr	r1, [pc, #184]	; (801e494 <ai_platform_network_destroy+0x10c>)
 801e3da:	4a2f      	ldr	r2, [pc, #188]	; (801e498 <ai_platform_network_destroy+0x110>)
 801e3dc:	6019      	str	r1, [r3, #0]
 801e3de:	681b      	ldr	r3, [r3, #0]
 801e3e0:	4293      	cmp	r3, r2
 801e3e2:	d0f0      	beq.n	801e3c6 <ai_platform_network_destroy+0x3e>
 801e3e4:	e7fe      	b.n	801e3e4 <ai_platform_network_destroy+0x5c>
 801e3e6:	4b2d      	ldr	r3, [pc, #180]	; (801e49c <ai_platform_network_destroy+0x114>)
 801e3e8:	2201      	movs	r2, #1
 801e3ea:	4619      	mov	r1, r3
 801e3ec:	601a      	str	r2, [r3, #0]
 801e3ee:	680b      	ldr	r3, [r1, #0]
 801e3f0:	2b00      	cmp	r3, #0
 801e3f2:	d1fc      	bne.n	801e3ee <ai_platform_network_destroy+0x66>
 801e3f4:	4b2a      	ldr	r3, [pc, #168]	; (801e4a0 <ai_platform_network_destroy+0x118>)
 801e3f6:	4927      	ldr	r1, [pc, #156]	; (801e494 <ai_platform_network_destroy+0x10c>)
 801e3f8:	4a27      	ldr	r2, [pc, #156]	; (801e498 <ai_platform_network_destroy+0x110>)
 801e3fa:	6019      	str	r1, [r3, #0]
 801e3fc:	681b      	ldr	r3, [r3, #0]
 801e3fe:	4293      	cmp	r3, r2
 801e400:	d0e1      	beq.n	801e3c6 <ai_platform_network_destroy+0x3e>
 801e402:	e7fe      	b.n	801e402 <ai_platform_network_destroy+0x7a>
 801e404:	4a1e      	ldr	r2, [pc, #120]	; (801e480 <ai_platform_network_destroy+0xf8>)
 801e406:	491f      	ldr	r1, [pc, #124]	; (801e484 <ai_platform_network_destroy+0xfc>)
 801e408:	6813      	ldr	r3, [r2, #0]
 801e40a:	f023 0301 	bic.w	r3, r3, #1
 801e40e:	6013      	str	r3, [r2, #0]
 801e410:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801e414:	680b      	ldr	r3, [r1, #0]
 801e416:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801e41a:	189a      	adds	r2, r3, r2
 801e41c:	2a01      	cmp	r2, #1
 801e41e:	d90e      	bls.n	801e43e <ai_platform_network_destroy+0xb6>
 801e420:	f240 4249 	movw	r2, #1097	; 0x449
 801e424:	4293      	cmp	r3, r2
 801e426:	d00a      	beq.n	801e43e <ai_platform_network_destroy+0xb6>
 801e428:	4b17      	ldr	r3, [pc, #92]	; (801e488 <ai_platform_network_destroy+0x100>)
 801e42a:	681b      	ldr	r3, [r3, #0]
 801e42c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801e430:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801e434:	d012      	beq.n	801e45c <ai_platform_network_destroy+0xd4>
 801e436:	f002 facf 	bl	80209d8 <ai_layers_destroy_all>
 801e43a:	2000      	movs	r0, #0
 801e43c:	bd08      	pop	{r3, pc}
 801e43e:	4b17      	ldr	r3, [pc, #92]	; (801e49c <ai_platform_network_destroy+0x114>)
 801e440:	2201      	movs	r2, #1
 801e442:	4619      	mov	r1, r3
 801e444:	601a      	str	r2, [r3, #0]
 801e446:	680b      	ldr	r3, [r1, #0]
 801e448:	2b00      	cmp	r3, #0
 801e44a:	d1fc      	bne.n	801e446 <ai_platform_network_destroy+0xbe>
 801e44c:	4b14      	ldr	r3, [pc, #80]	; (801e4a0 <ai_platform_network_destroy+0x118>)
 801e44e:	4911      	ldr	r1, [pc, #68]	; (801e494 <ai_platform_network_destroy+0x10c>)
 801e450:	4a11      	ldr	r2, [pc, #68]	; (801e498 <ai_platform_network_destroy+0x110>)
 801e452:	6019      	str	r1, [r3, #0]
 801e454:	681b      	ldr	r3, [r3, #0]
 801e456:	4293      	cmp	r3, r2
 801e458:	d0ed      	beq.n	801e436 <ai_platform_network_destroy+0xae>
 801e45a:	e7fe      	b.n	801e45a <ai_platform_network_destroy+0xd2>
 801e45c:	4b0b      	ldr	r3, [pc, #44]	; (801e48c <ai_platform_network_destroy+0x104>)
 801e45e:	2201      	movs	r2, #1
 801e460:	4619      	mov	r1, r3
 801e462:	601a      	str	r2, [r3, #0]
 801e464:	680b      	ldr	r3, [r1, #0]
 801e466:	2b00      	cmp	r3, #0
 801e468:	d1fc      	bne.n	801e464 <ai_platform_network_destroy+0xdc>
 801e46a:	4b09      	ldr	r3, [pc, #36]	; (801e490 <ai_platform_network_destroy+0x108>)
 801e46c:	4909      	ldr	r1, [pc, #36]	; (801e494 <ai_platform_network_destroy+0x10c>)
 801e46e:	4a0a      	ldr	r2, [pc, #40]	; (801e498 <ai_platform_network_destroy+0x110>)
 801e470:	6019      	str	r1, [r3, #0]
 801e472:	681b      	ldr	r3, [r3, #0]
 801e474:	4293      	cmp	r3, r2
 801e476:	d0de      	beq.n	801e436 <ai_platform_network_destroy+0xae>
 801e478:	e7fe      	b.n	801e478 <ai_platform_network_destroy+0xf0>
 801e47a:	bf00      	nop
 801e47c:	a1c00100 	.word	0xa1c00100
 801e480:	e0002000 	.word	0xe0002000
 801e484:	e0042000 	.word	0xe0042000
 801e488:	5c001000 	.word	0x5c001000
 801e48c:	58024c08 	.word	0x58024c08
 801e490:	58024c00 	.word	0x58024c00
 801e494:	f407a5c2 	.word	0xf407a5c2
 801e498:	b5e8b5cd 	.word	0xb5e8b5cd
 801e49c:	40023008 	.word	0x40023008
 801e4a0:	40023000 	.word	0x40023000

0801e4a4 <ai_platform_network_init>:
 801e4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e4a6:	2800      	cmp	r0, #0
 801e4a8:	d061      	beq.n	801e56e <ai_platform_network_init+0xca>
 801e4aa:	4b61      	ldr	r3, [pc, #388]	; (801e630 <ai_platform_network_init+0x18c>)
 801e4ac:	6802      	ldr	r2, [r0, #0]
 801e4ae:	429a      	cmp	r2, r3
 801e4b0:	d15d      	bne.n	801e56e <ai_platform_network_init+0xca>
 801e4b2:	4a60      	ldr	r2, [pc, #384]	; (801e634 <ai_platform_network_init+0x190>)
 801e4b4:	4c60      	ldr	r4, [pc, #384]	; (801e638 <ai_platform_network_init+0x194>)
 801e4b6:	6813      	ldr	r3, [r2, #0]
 801e4b8:	f023 0301 	bic.w	r3, r3, #1
 801e4bc:	6013      	str	r3, [r2, #0]
 801e4be:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801e4c2:	6823      	ldr	r3, [r4, #0]
 801e4c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801e4c8:	189a      	adds	r2, r3, r2
 801e4ca:	2a01      	cmp	r2, #1
 801e4cc:	d92f      	bls.n	801e52e <ai_platform_network_init+0x8a>
 801e4ce:	f240 4249 	movw	r2, #1097	; 0x449
 801e4d2:	4293      	cmp	r3, r2
 801e4d4:	d02b      	beq.n	801e52e <ai_platform_network_init+0x8a>
 801e4d6:	4b59      	ldr	r3, [pc, #356]	; (801e63c <ai_platform_network_init+0x198>)
 801e4d8:	681b      	ldr	r3, [r3, #0]
 801e4da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801e4de:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801e4e2:	d05f      	beq.n	801e5a4 <ai_platform_network_init+0x100>
 801e4e4:	4605      	mov	r5, r0
 801e4e6:	460c      	mov	r4, r1
 801e4e8:	2900      	cmp	r1, #0
 801e4ea:	f000 8099 	beq.w	801e620 <ai_platform_network_init+0x17c>
 801e4ee:	6a8f      	ldr	r7, [r1, #40]	; 0x28
 801e4f0:	690e      	ldr	r6, [r1, #16]
 801e4f2:	2f00      	cmp	r7, #0
 801e4f4:	f000 8083 	beq.w	801e5fe <ai_platform_network_init+0x15a>
 801e4f8:	b346      	cbz	r6, 801e54c <ai_platform_network_init+0xa8>
 801e4fa:	f105 0c18 	add.w	ip, r5, #24
 801e4fe:	f104 0718 	add.w	r7, r4, #24
 801e502:	f105 0630 	add.w	r6, r5, #48	; 0x30
 801e506:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801e508:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e50c:	e894 0003 	ldmia.w	r4, {r0, r1}
 801e510:	2403      	movs	r4, #3
 801e512:	e88c 0003 	stmia.w	ip, {r0, r1}
 801e516:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801e518:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801e51a:	e897 0003 	ldmia.w	r7, {r0, r1}
 801e51e:	e886 0003 	stmia.w	r6, {r0, r1}
 801e522:	60ec      	str	r4, [r5, #12]
 801e524:	4628      	mov	r0, r5
 801e526:	f002 f9e1 	bl	80208ec <ai_layers_init_all>
 801e52a:	4628      	mov	r0, r5
 801e52c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e52e:	4b44      	ldr	r3, [pc, #272]	; (801e640 <ai_platform_network_init+0x19c>)
 801e530:	2201      	movs	r2, #1
 801e532:	461c      	mov	r4, r3
 801e534:	601a      	str	r2, [r3, #0]
 801e536:	6823      	ldr	r3, [r4, #0]
 801e538:	2b00      	cmp	r3, #0
 801e53a:	d1fc      	bne.n	801e536 <ai_platform_network_init+0x92>
 801e53c:	4b41      	ldr	r3, [pc, #260]	; (801e644 <ai_platform_network_init+0x1a0>)
 801e53e:	4c42      	ldr	r4, [pc, #264]	; (801e648 <ai_platform_network_init+0x1a4>)
 801e540:	4a42      	ldr	r2, [pc, #264]	; (801e64c <ai_platform_network_init+0x1a8>)
 801e542:	601c      	str	r4, [r3, #0]
 801e544:	681b      	ldr	r3, [r3, #0]
 801e546:	4293      	cmp	r3, r2
 801e548:	d0cc      	beq.n	801e4e4 <ai_platform_network_init+0x40>
 801e54a:	e7fe      	b.n	801e54a <ai_platform_network_init+0xa6>
 801e54c:	8921      	ldrh	r1, [r4, #8]
 801e54e:	88e2      	ldrh	r2, [r4, #6]
 801e550:	68e3      	ldr	r3, [r4, #12]
 801e552:	fb02 f201 	mul.w	r2, r2, r1
 801e556:	fb03 f302 	mul.w	r3, r3, r2
 801e55a:	2b00      	cmp	r3, #0
 801e55c:	d0cd      	beq.n	801e4fa <ai_platform_network_init+0x56>
 801e55e:	f105 0010 	add.w	r0, r5, #16
 801e562:	2212      	movs	r2, #18
 801e564:	2110      	movs	r1, #16
 801e566:	f000 ff35 	bl	801f3d4 <core_set_error>
 801e56a:	4630      	mov	r0, r6
 801e56c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e56e:	4a31      	ldr	r2, [pc, #196]	; (801e634 <ai_platform_network_init+0x190>)
 801e570:	4931      	ldr	r1, [pc, #196]	; (801e638 <ai_platform_network_init+0x194>)
 801e572:	6813      	ldr	r3, [r2, #0]
 801e574:	f023 0301 	bic.w	r3, r3, #1
 801e578:	6013      	str	r3, [r2, #0]
 801e57a:	680b      	ldr	r3, [r1, #0]
 801e57c:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 801e580:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801e584:	185a      	adds	r2, r3, r1
 801e586:	2a01      	cmp	r2, #1
 801e588:	d91b      	bls.n	801e5c2 <ai_platform_network_init+0x11e>
 801e58a:	f240 4249 	movw	r2, #1097	; 0x449
 801e58e:	4293      	cmp	r3, r2
 801e590:	d017      	beq.n	801e5c2 <ai_platform_network_init+0x11e>
 801e592:	4b2a      	ldr	r3, [pc, #168]	; (801e63c <ai_platform_network_init+0x198>)
 801e594:	681b      	ldr	r3, [r3, #0]
 801e596:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801e59a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801e59e:	d01f      	beq.n	801e5e0 <ai_platform_network_init+0x13c>
 801e5a0:	2000      	movs	r0, #0
 801e5a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e5a4:	4b2a      	ldr	r3, [pc, #168]	; (801e650 <ai_platform_network_init+0x1ac>)
 801e5a6:	2201      	movs	r2, #1
 801e5a8:	461c      	mov	r4, r3
 801e5aa:	601a      	str	r2, [r3, #0]
 801e5ac:	6823      	ldr	r3, [r4, #0]
 801e5ae:	2b00      	cmp	r3, #0
 801e5b0:	d1fc      	bne.n	801e5ac <ai_platform_network_init+0x108>
 801e5b2:	4b28      	ldr	r3, [pc, #160]	; (801e654 <ai_platform_network_init+0x1b0>)
 801e5b4:	4c24      	ldr	r4, [pc, #144]	; (801e648 <ai_platform_network_init+0x1a4>)
 801e5b6:	4a25      	ldr	r2, [pc, #148]	; (801e64c <ai_platform_network_init+0x1a8>)
 801e5b8:	601c      	str	r4, [r3, #0]
 801e5ba:	681b      	ldr	r3, [r3, #0]
 801e5bc:	4293      	cmp	r3, r2
 801e5be:	d091      	beq.n	801e4e4 <ai_platform_network_init+0x40>
 801e5c0:	e7fe      	b.n	801e5c0 <ai_platform_network_init+0x11c>
 801e5c2:	4b1f      	ldr	r3, [pc, #124]	; (801e640 <ai_platform_network_init+0x19c>)
 801e5c4:	2201      	movs	r2, #1
 801e5c6:	4619      	mov	r1, r3
 801e5c8:	601a      	str	r2, [r3, #0]
 801e5ca:	680b      	ldr	r3, [r1, #0]
 801e5cc:	2b00      	cmp	r3, #0
 801e5ce:	d1fc      	bne.n	801e5ca <ai_platform_network_init+0x126>
 801e5d0:	4b1c      	ldr	r3, [pc, #112]	; (801e644 <ai_platform_network_init+0x1a0>)
 801e5d2:	491d      	ldr	r1, [pc, #116]	; (801e648 <ai_platform_network_init+0x1a4>)
 801e5d4:	4a1d      	ldr	r2, [pc, #116]	; (801e64c <ai_platform_network_init+0x1a8>)
 801e5d6:	6019      	str	r1, [r3, #0]
 801e5d8:	681b      	ldr	r3, [r3, #0]
 801e5da:	4293      	cmp	r3, r2
 801e5dc:	d0e0      	beq.n	801e5a0 <ai_platform_network_init+0xfc>
 801e5de:	e7fe      	b.n	801e5de <ai_platform_network_init+0x13a>
 801e5e0:	4b1b      	ldr	r3, [pc, #108]	; (801e650 <ai_platform_network_init+0x1ac>)
 801e5e2:	2201      	movs	r2, #1
 801e5e4:	4619      	mov	r1, r3
 801e5e6:	601a      	str	r2, [r3, #0]
 801e5e8:	680b      	ldr	r3, [r1, #0]
 801e5ea:	2b00      	cmp	r3, #0
 801e5ec:	d1fc      	bne.n	801e5e8 <ai_platform_network_init+0x144>
 801e5ee:	4b19      	ldr	r3, [pc, #100]	; (801e654 <ai_platform_network_init+0x1b0>)
 801e5f0:	4915      	ldr	r1, [pc, #84]	; (801e648 <ai_platform_network_init+0x1a4>)
 801e5f2:	4a16      	ldr	r2, [pc, #88]	; (801e64c <ai_platform_network_init+0x1a8>)
 801e5f4:	6019      	str	r1, [r3, #0]
 801e5f6:	681b      	ldr	r3, [r3, #0]
 801e5f8:	4293      	cmp	r3, r2
 801e5fa:	d0d1      	beq.n	801e5a0 <ai_platform_network_init+0xfc>
 801e5fc:	e7fe      	b.n	801e5fc <ai_platform_network_init+0x158>
 801e5fe:	8c09      	ldrh	r1, [r1, #32]
 801e600:	8be2      	ldrh	r2, [r4, #30]
 801e602:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e604:	fb02 f201 	mul.w	r2, r2, r1
 801e608:	fb03 f302 	mul.w	r3, r3, r2
 801e60c:	2b00      	cmp	r3, #0
 801e60e:	f43f af73 	beq.w	801e4f8 <ai_platform_network_init+0x54>
 801e612:	2213      	movs	r2, #19
 801e614:	2110      	movs	r1, #16
 801e616:	3010      	adds	r0, #16
 801e618:	f000 fedc 	bl	801f3d4 <core_set_error>
 801e61c:	4638      	mov	r0, r7
 801e61e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e620:	2211      	movs	r2, #17
 801e622:	2110      	movs	r1, #16
 801e624:	3010      	adds	r0, #16
 801e626:	f000 fed5 	bl	801f3d4 <core_set_error>
 801e62a:	4620      	mov	r0, r4
 801e62c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e62e:	bf00      	nop
 801e630:	a1c00100 	.word	0xa1c00100
 801e634:	e0002000 	.word	0xe0002000
 801e638:	e0042000 	.word	0xe0042000
 801e63c:	5c001000 	.word	0x5c001000
 801e640:	40023008 	.word	0x40023008
 801e644:	40023000 	.word	0x40023000
 801e648:	f407a5c2 	.word	0xf407a5c2
 801e64c:	b5e8b5cd 	.word	0xb5e8b5cd
 801e650:	58024c08 	.word	0x58024c08
 801e654:	58024c00 	.word	0x58024c00

0801e658 <ai_platform_network_post_init>:
 801e658:	b538      	push	{r3, r4, r5, lr}
 801e65a:	b118      	cbz	r0, 801e664 <ai_platform_network_post_init+0xc>
 801e65c:	4b4b      	ldr	r3, [pc, #300]	; (801e78c <ai_platform_network_post_init+0x134>)
 801e65e:	6802      	ldr	r2, [r0, #0]
 801e660:	429a      	cmp	r2, r3
 801e662:	d029      	beq.n	801e6b8 <ai_platform_network_post_init+0x60>
 801e664:	4a4a      	ldr	r2, [pc, #296]	; (801e790 <ai_platform_network_post_init+0x138>)
 801e666:	494b      	ldr	r1, [pc, #300]	; (801e794 <ai_platform_network_post_init+0x13c>)
 801e668:	6813      	ldr	r3, [r2, #0]
 801e66a:	f023 0301 	bic.w	r3, r3, #1
 801e66e:	6013      	str	r3, [r2, #0]
 801e670:	680b      	ldr	r3, [r1, #0]
 801e672:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 801e676:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801e67a:	185a      	adds	r2, r3, r1
 801e67c:	2a01      	cmp	r2, #1
 801e67e:	d90c      	bls.n	801e69a <ai_platform_network_post_init+0x42>
 801e680:	f240 4249 	movw	r2, #1097	; 0x449
 801e684:	4293      	cmp	r3, r2
 801e686:	d008      	beq.n	801e69a <ai_platform_network_post_init+0x42>
 801e688:	4b43      	ldr	r3, [pc, #268]	; (801e798 <ai_platform_network_post_init+0x140>)
 801e68a:	681b      	ldr	r3, [r3, #0]
 801e68c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801e690:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801e694:	d046      	beq.n	801e724 <ai_platform_network_post_init+0xcc>
 801e696:	2000      	movs	r0, #0
 801e698:	bd38      	pop	{r3, r4, r5, pc}
 801e69a:	4b40      	ldr	r3, [pc, #256]	; (801e79c <ai_platform_network_post_init+0x144>)
 801e69c:	2201      	movs	r2, #1
 801e69e:	4619      	mov	r1, r3
 801e6a0:	601a      	str	r2, [r3, #0]
 801e6a2:	680b      	ldr	r3, [r1, #0]
 801e6a4:	2b00      	cmp	r3, #0
 801e6a6:	d1fc      	bne.n	801e6a2 <ai_platform_network_post_init+0x4a>
 801e6a8:	4b3d      	ldr	r3, [pc, #244]	; (801e7a0 <ai_platform_network_post_init+0x148>)
 801e6aa:	493e      	ldr	r1, [pc, #248]	; (801e7a4 <ai_platform_network_post_init+0x14c>)
 801e6ac:	4a3e      	ldr	r2, [pc, #248]	; (801e7a8 <ai_platform_network_post_init+0x150>)
 801e6ae:	6019      	str	r1, [r3, #0]
 801e6b0:	681b      	ldr	r3, [r3, #0]
 801e6b2:	4293      	cmp	r3, r2
 801e6b4:	d0ef      	beq.n	801e696 <ai_platform_network_post_init+0x3e>
 801e6b6:	e7fe      	b.n	801e6b6 <ai_platform_network_post_init+0x5e>
 801e6b8:	4a35      	ldr	r2, [pc, #212]	; (801e790 <ai_platform_network_post_init+0x138>)
 801e6ba:	4936      	ldr	r1, [pc, #216]	; (801e794 <ai_platform_network_post_init+0x13c>)
 801e6bc:	6813      	ldr	r3, [r2, #0]
 801e6be:	f023 0301 	bic.w	r3, r3, #1
 801e6c2:	6013      	str	r3, [r2, #0]
 801e6c4:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 801e6c8:	680b      	ldr	r3, [r1, #0]
 801e6ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801e6ce:	189a      	adds	r2, r3, r2
 801e6d0:	2a01      	cmp	r2, #1
 801e6d2:	d94c      	bls.n	801e76e <ai_platform_network_post_init+0x116>
 801e6d4:	f240 4249 	movw	r2, #1097	; 0x449
 801e6d8:	4293      	cmp	r3, r2
 801e6da:	d048      	beq.n	801e76e <ai_platform_network_post_init+0x116>
 801e6dc:	4b2e      	ldr	r3, [pc, #184]	; (801e798 <ai_platform_network_post_init+0x140>)
 801e6de:	681b      	ldr	r3, [r3, #0]
 801e6e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801e6e4:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801e6e8:	d032      	beq.n	801e750 <ai_platform_network_post_init+0xf8>
 801e6ea:	68c3      	ldr	r3, [r0, #12]
 801e6ec:	4604      	mov	r4, r0
 801e6ee:	f013 0502 	ands.w	r5, r3, #2
 801e6f2:	d026      	beq.n	801e742 <ai_platform_network_post_init+0xea>
 801e6f4:	f002 f90e 	bl	8020914 <ai_layers_post_init_all>
 801e6f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801e6fa:	b18b      	cbz	r3, 801e720 <ai_platform_network_post_init+0xc8>
 801e6fc:	6d25      	ldr	r5, [r4, #80]	; 0x50
 801e6fe:	b90d      	cbnz	r5, 801e704 <ai_platform_network_post_init+0xac>
 801e700:	e00e      	b.n	801e720 <ai_platform_network_post_init+0xc8>
 801e702:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801e704:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 801e706:	4629      	mov	r1, r5
 801e708:	2000      	movs	r0, #0
 801e70a:	4798      	blx	r3
 801e70c:	692a      	ldr	r2, [r5, #16]
 801e70e:	1b53      	subs	r3, r2, r5
 801e710:	4615      	mov	r5, r2
 801e712:	bf18      	it	ne
 801e714:	2301      	movne	r3, #1
 801e716:	2a00      	cmp	r2, #0
 801e718:	bf08      	it	eq
 801e71a:	2300      	moveq	r3, #0
 801e71c:	2b00      	cmp	r3, #0
 801e71e:	d1f0      	bne.n	801e702 <ai_platform_network_post_init+0xaa>
 801e720:	2001      	movs	r0, #1
 801e722:	bd38      	pop	{r3, r4, r5, pc}
 801e724:	4b21      	ldr	r3, [pc, #132]	; (801e7ac <ai_platform_network_post_init+0x154>)
 801e726:	2201      	movs	r2, #1
 801e728:	4619      	mov	r1, r3
 801e72a:	601a      	str	r2, [r3, #0]
 801e72c:	680b      	ldr	r3, [r1, #0]
 801e72e:	2b00      	cmp	r3, #0
 801e730:	d1fc      	bne.n	801e72c <ai_platform_network_post_init+0xd4>
 801e732:	4b1f      	ldr	r3, [pc, #124]	; (801e7b0 <ai_platform_network_post_init+0x158>)
 801e734:	491b      	ldr	r1, [pc, #108]	; (801e7a4 <ai_platform_network_post_init+0x14c>)
 801e736:	4a1c      	ldr	r2, [pc, #112]	; (801e7a8 <ai_platform_network_post_init+0x150>)
 801e738:	6019      	str	r1, [r3, #0]
 801e73a:	681b      	ldr	r3, [r3, #0]
 801e73c:	4293      	cmp	r3, r2
 801e73e:	d0aa      	beq.n	801e696 <ai_platform_network_post_init+0x3e>
 801e740:	e7fe      	b.n	801e740 <ai_platform_network_post_init+0xe8>
 801e742:	2210      	movs	r2, #16
 801e744:	2111      	movs	r1, #17
 801e746:	3010      	adds	r0, #16
 801e748:	f000 fe44 	bl	801f3d4 <core_set_error>
 801e74c:	4628      	mov	r0, r5
 801e74e:	bd38      	pop	{r3, r4, r5, pc}
 801e750:	4b16      	ldr	r3, [pc, #88]	; (801e7ac <ai_platform_network_post_init+0x154>)
 801e752:	2201      	movs	r2, #1
 801e754:	4619      	mov	r1, r3
 801e756:	601a      	str	r2, [r3, #0]
 801e758:	680b      	ldr	r3, [r1, #0]
 801e75a:	2b00      	cmp	r3, #0
 801e75c:	d1fc      	bne.n	801e758 <ai_platform_network_post_init+0x100>
 801e75e:	4b14      	ldr	r3, [pc, #80]	; (801e7b0 <ai_platform_network_post_init+0x158>)
 801e760:	4910      	ldr	r1, [pc, #64]	; (801e7a4 <ai_platform_network_post_init+0x14c>)
 801e762:	4a11      	ldr	r2, [pc, #68]	; (801e7a8 <ai_platform_network_post_init+0x150>)
 801e764:	6019      	str	r1, [r3, #0]
 801e766:	681b      	ldr	r3, [r3, #0]
 801e768:	4293      	cmp	r3, r2
 801e76a:	d0be      	beq.n	801e6ea <ai_platform_network_post_init+0x92>
 801e76c:	e7fe      	b.n	801e76c <ai_platform_network_post_init+0x114>
 801e76e:	4b0b      	ldr	r3, [pc, #44]	; (801e79c <ai_platform_network_post_init+0x144>)
 801e770:	2201      	movs	r2, #1
 801e772:	4619      	mov	r1, r3
 801e774:	601a      	str	r2, [r3, #0]
 801e776:	680b      	ldr	r3, [r1, #0]
 801e778:	2b00      	cmp	r3, #0
 801e77a:	d1fc      	bne.n	801e776 <ai_platform_network_post_init+0x11e>
 801e77c:	4b08      	ldr	r3, [pc, #32]	; (801e7a0 <ai_platform_network_post_init+0x148>)
 801e77e:	4909      	ldr	r1, [pc, #36]	; (801e7a4 <ai_platform_network_post_init+0x14c>)
 801e780:	4a09      	ldr	r2, [pc, #36]	; (801e7a8 <ai_platform_network_post_init+0x150>)
 801e782:	6019      	str	r1, [r3, #0]
 801e784:	681b      	ldr	r3, [r3, #0]
 801e786:	4293      	cmp	r3, r2
 801e788:	d0af      	beq.n	801e6ea <ai_platform_network_post_init+0x92>
 801e78a:	e7fe      	b.n	801e78a <ai_platform_network_post_init+0x132>
 801e78c:	a1c00100 	.word	0xa1c00100
 801e790:	e0002000 	.word	0xe0002000
 801e794:	e0042000 	.word	0xe0042000
 801e798:	5c001000 	.word	0x5c001000
 801e79c:	40023008 	.word	0x40023008
 801e7a0:	40023000 	.word	0x40023000
 801e7a4:	f407a5c2 	.word	0xf407a5c2
 801e7a8:	b5e8b5cd 	.word	0xb5e8b5cd
 801e7ac:	58024c08 	.word	0x58024c08
 801e7b0:	58024c00 	.word	0x58024c00

0801e7b4 <ai_platform_network_process>:
 801e7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e7b8:	4617      	mov	r7, r2
 801e7ba:	b083      	sub	sp, #12
 801e7bc:	4604      	mov	r4, r0
 801e7be:	b120      	cbz	r0, 801e7ca <ai_platform_network_process+0x16>
 801e7c0:	4b89      	ldr	r3, [pc, #548]	; (801e9e8 <ai_platform_network_process+0x234>)
 801e7c2:	6802      	ldr	r2, [r0, #0]
 801e7c4:	429a      	cmp	r2, r3
 801e7c6:	bf18      	it	ne
 801e7c8:	2400      	movne	r4, #0
 801e7ca:	4a88      	ldr	r2, [pc, #544]	; (801e9ec <ai_platform_network_process+0x238>)
 801e7cc:	4888      	ldr	r0, [pc, #544]	; (801e9f0 <ai_platform_network_process+0x23c>)
 801e7ce:	6813      	ldr	r3, [r2, #0]
 801e7d0:	f023 0301 	bic.w	r3, r3, #1
 801e7d4:	6013      	str	r3, [r2, #0]
 801e7d6:	6803      	ldr	r3, [r0, #0]
 801e7d8:	f46f 608a 	mvn.w	r0, #1104	; 0x450
 801e7dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801e7e0:	181a      	adds	r2, r3, r0
 801e7e2:	2a01      	cmp	r2, #1
 801e7e4:	f240 80cc 	bls.w	801e980 <ai_platform_network_process+0x1cc>
 801e7e8:	f240 4249 	movw	r2, #1097	; 0x449
 801e7ec:	4293      	cmp	r3, r2
 801e7ee:	f000 80c7 	beq.w	801e980 <ai_platform_network_process+0x1cc>
 801e7f2:	4b80      	ldr	r3, [pc, #512]	; (801e9f4 <ai_platform_network_process+0x240>)
 801e7f4:	681b      	ldr	r3, [r3, #0]
 801e7f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801e7fa:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801e7fe:	f000 80af 	beq.w	801e960 <ai_platform_network_process+0x1ac>
 801e802:	2c00      	cmp	r4, #0
 801e804:	f000 80e1 	beq.w	801e9ca <ai_platform_network_process+0x216>
 801e808:	68e2      	ldr	r2, [r4, #12]
 801e80a:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 801e80e:	f002 0203 	and.w	r2, r2, #3
 801e812:	2b00      	cmp	r3, #0
 801e814:	f000 80c4 	beq.w	801e9a0 <ai_platform_network_process+0x1ec>
 801e818:	2000      	movs	r0, #0
 801e81a:	2a03      	cmp	r2, #3
 801e81c:	f8d4 a04c 	ldr.w	sl, [r4, #76]	; 0x4c
 801e820:	6160      	str	r0, [r4, #20]
 801e822:	f040 80cc 	bne.w	801e9be <ai_platform_network_process+0x20a>
 801e826:	2900      	cmp	r1, #0
 801e828:	f000 80bd 	beq.w	801e9a6 <ai_platform_network_process+0x1f2>
 801e82c:	faba f28a 	clz	r2, sl
 801e830:	0952      	lsrs	r2, r2, #5
 801e832:	2a00      	cmp	r2, #0
 801e834:	f040 80b7 	bne.w	801e9a6 <ai_platform_network_process+0x1f2>
 801e838:	f8ba 0000 	ldrh.w	r0, [sl]
 801e83c:	2800      	cmp	r0, #0
 801e83e:	f000 80b2 	beq.w	801e9a6 <ai_platform_network_process+0x1f2>
 801e842:	888d      	ldrh	r5, [r1, #4]
 801e844:	f8da 0004 	ldr.w	r0, [sl, #4]
 801e848:	9501      	str	r5, [sp, #4]
 801e84a:	2800      	cmp	r0, #0
 801e84c:	f000 80e2 	beq.w	801ea14 <ai_platform_network_process+0x260>
 801e850:	6806      	ldr	r6, [r0, #0]
 801e852:	2e00      	cmp	r6, #0
 801e854:	f000 80de 	beq.w	801ea14 <ai_platform_network_process+0x260>
 801e858:	f8da 3008 	ldr.w	r3, [sl, #8]
 801e85c:	f8d3 9000 	ldr.w	r9, [r3]
 801e860:	f1b9 0f00 	cmp.w	r9, #0
 801e864:	f000 809f 	beq.w	801e9a6 <ai_platform_network_process+0x1f2>
 801e868:	460d      	mov	r5, r1
 801e86a:	4690      	mov	r8, r2
 801e86c:	e061      	b.n	801e932 <ai_platform_network_process+0x17e>
 801e86e:	68f3      	ldr	r3, [r6, #12]
 801e870:	68da      	ldr	r2, [r3, #12]
 801e872:	455a      	cmp	r2, fp
 801e874:	d16b      	bne.n	801e94e <ai_platform_network_process+0x19a>
 801e876:	689a      	ldr	r2, [r3, #8]
 801e878:	4572      	cmp	r2, lr
 801e87a:	d168      	bne.n	801e94e <ai_platform_network_process+0x19a>
 801e87c:	685b      	ldr	r3, [r3, #4]
 801e87e:	459c      	cmp	ip, r3
 801e880:	d165      	bne.n	801e94e <ai_platform_network_process+0x19a>
 801e882:	6800      	ldr	r0, [r0, #0]
 801e884:	f007 fb30 	bl	8025ee8 <ai_array_get_byte_size>
 801e888:	68f2      	ldr	r2, [r6, #12]
 801e88a:	6973      	ldr	r3, [r6, #20]
 801e88c:	68d2      	ldr	r2, [r2, #12]
 801e88e:	68db      	ldr	r3, [r3, #12]
 801e890:	fb03 f302 	mul.w	r3, r3, r2
 801e894:	4298      	cmp	r0, r3
 801e896:	d35a      	bcc.n	801e94e <ai_platform_network_process+0x19a>
 801e898:	69b3      	ldr	r3, [r6, #24]
 801e89a:	6818      	ldr	r0, [r3, #0]
 801e89c:	f007 fad8 	bl	8025e50 <ai_array_to_buffer_fmt>
 801e8a0:	682b      	ldr	r3, [r5, #0]
 801e8a2:	4043      	eors	r3, r0
 801e8a4:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 801e8a8:	f040 8226 	bne.w	801ecf8 <ai_platform_network_process+0x544>
 801e8ac:	692b      	ldr	r3, [r5, #16]
 801e8ae:	2b00      	cmp	r3, #0
 801e8b0:	f000 821a 	beq.w	801ece8 <ai_platform_network_process+0x534>
 801e8b4:	88ab      	ldrh	r3, [r5, #4]
 801e8b6:	2b00      	cmp	r3, #0
 801e8b8:	f000 808d 	beq.w	801e9d6 <ai_platform_network_process+0x222>
 801e8bc:	9a01      	ldr	r2, [sp, #4]
 801e8be:	68f1      	ldr	r1, [r6, #12]
 801e8c0:	429a      	cmp	r2, r3
 801e8c2:	68c9      	ldr	r1, [r1, #12]
 801e8c4:	bf38      	it	cc
 801e8c6:	461a      	movcc	r2, r3
 801e8c8:	9201      	str	r2, [sp, #4]
 801e8ca:	6972      	ldr	r2, [r6, #20]
 801e8cc:	68d3      	ldr	r3, [r2, #12]
 801e8ce:	fb03 f301 	mul.w	r3, r3, r1
 801e8d2:	f8c9 3008 	str.w	r3, [r9, #8]
 801e8d6:	88aa      	ldrh	r2, [r5, #4]
 801e8d8:	fb03 f302 	mul.w	r3, r3, r2
 801e8dc:	f8c9 300c 	str.w	r3, [r9, #12]
 801e8e0:	6929      	ldr	r1, [r5, #16]
 801e8e2:	f8c9 1004 	str.w	r1, [r9, #4]
 801e8e6:	692a      	ldr	r2, [r5, #16]
 801e8e8:	4413      	add	r3, r2
 801e8ea:	f8c9 3000 	str.w	r3, [r9]
 801e8ee:	69b0      	ldr	r0, [r6, #24]
 801e8f0:	6803      	ldr	r3, [r0, #0]
 801e8f2:	009a      	lsls	r2, r3, #2
 801e8f4:	d408      	bmi.n	801e908 <ai_platform_network_process+0x154>
 801e8f6:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 801e8fa:	1a9b      	subs	r3, r3, r2
 801e8fc:	4419      	add	r1, r3
 801e8fe:	6081      	str	r1, [r0, #8]
 801e900:	69b3      	ldr	r3, [r6, #24]
 801e902:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801e906:	60da      	str	r2, [r3, #12]
 801e908:	f108 0801 	add.w	r8, r8, #1
 801e90c:	f8ba 3000 	ldrh.w	r3, [sl]
 801e910:	4598      	cmp	r8, r3
 801e912:	d27d      	bcs.n	801ea10 <ai_platform_network_process+0x25c>
 801e914:	f8da 3004 	ldr.w	r3, [sl, #4]
 801e918:	2b00      	cmp	r3, #0
 801e91a:	d079      	beq.n	801ea10 <ai_platform_network_process+0x25c>
 801e91c:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 801e920:	2e00      	cmp	r6, #0
 801e922:	d075      	beq.n	801ea10 <ai_platform_network_process+0x25c>
 801e924:	f8da 3008 	ldr.w	r3, [sl, #8]
 801e928:	3518      	adds	r5, #24
 801e92a:	681b      	ldr	r3, [r3, #0]
 801e92c:	eb13 1908 	adds.w	r9, r3, r8, lsl #4
 801e930:	d039      	beq.n	801e9a6 <ai_platform_network_process+0x1f2>
 801e932:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 801e936:	f8b5 b006 	ldrh.w	fp, [r5, #6]
 801e93a:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 801e93e:	fb0b f30e 	mul.w	r3, fp, lr
 801e942:	69b0      	ldr	r0, [r6, #24]
 801e944:	fb0c f303 	mul.w	r3, ip, r3
 801e948:	6841      	ldr	r1, [r0, #4]
 801e94a:	4299      	cmp	r1, r3
 801e94c:	d28f      	bcs.n	801e86e <ai_platform_network_process+0xba>
 801e94e:	f104 0010 	add.w	r0, r4, #16
 801e952:	2218      	movs	r2, #24
 801e954:	2112      	movs	r1, #18
 801e956:	f04f 0b00 	mov.w	fp, #0
 801e95a:	f000 fd3b 	bl	801f3d4 <core_set_error>
 801e95e:	e02a      	b.n	801e9b6 <ai_platform_network_process+0x202>
 801e960:	4b25      	ldr	r3, [pc, #148]	; (801e9f8 <ai_platform_network_process+0x244>)
 801e962:	2201      	movs	r2, #1
 801e964:	4618      	mov	r0, r3
 801e966:	601a      	str	r2, [r3, #0]
 801e968:	6803      	ldr	r3, [r0, #0]
 801e96a:	2b00      	cmp	r3, #0
 801e96c:	d1fc      	bne.n	801e968 <ai_platform_network_process+0x1b4>
 801e96e:	4b23      	ldr	r3, [pc, #140]	; (801e9fc <ai_platform_network_process+0x248>)
 801e970:	4823      	ldr	r0, [pc, #140]	; (801ea00 <ai_platform_network_process+0x24c>)
 801e972:	4a24      	ldr	r2, [pc, #144]	; (801ea04 <ai_platform_network_process+0x250>)
 801e974:	6018      	str	r0, [r3, #0]
 801e976:	681b      	ldr	r3, [r3, #0]
 801e978:	4293      	cmp	r3, r2
 801e97a:	f43f af42 	beq.w	801e802 <ai_platform_network_process+0x4e>
 801e97e:	e7fe      	b.n	801e97e <ai_platform_network_process+0x1ca>
 801e980:	4b21      	ldr	r3, [pc, #132]	; (801ea08 <ai_platform_network_process+0x254>)
 801e982:	2201      	movs	r2, #1
 801e984:	4618      	mov	r0, r3
 801e986:	601a      	str	r2, [r3, #0]
 801e988:	6803      	ldr	r3, [r0, #0]
 801e98a:	2b00      	cmp	r3, #0
 801e98c:	d1fc      	bne.n	801e988 <ai_platform_network_process+0x1d4>
 801e98e:	4b1f      	ldr	r3, [pc, #124]	; (801ea0c <ai_platform_network_process+0x258>)
 801e990:	481b      	ldr	r0, [pc, #108]	; (801ea00 <ai_platform_network_process+0x24c>)
 801e992:	4a1c      	ldr	r2, [pc, #112]	; (801ea04 <ai_platform_network_process+0x250>)
 801e994:	6018      	str	r0, [r3, #0]
 801e996:	681b      	ldr	r3, [r3, #0]
 801e998:	4293      	cmp	r3, r2
 801e99a:	f43f af32 	beq.w	801e802 <ai_platform_network_process+0x4e>
 801e99e:	e7fe      	b.n	801e99e <ai_platform_network_process+0x1ea>
 801e9a0:	2a03      	cmp	r2, #3
 801e9a2:	6163      	str	r3, [r4, #20]
 801e9a4:	d10b      	bne.n	801e9be <ai_platform_network_process+0x20a>
 801e9a6:	f04f 0b00 	mov.w	fp, #0
 801e9aa:	f104 0010 	add.w	r0, r4, #16
 801e9ae:	2217      	movs	r2, #23
 801e9b0:	2112      	movs	r1, #18
 801e9b2:	f000 fd0f 	bl	801f3d4 <core_set_error>
 801e9b6:	4658      	mov	r0, fp
 801e9b8:	b003      	add	sp, #12
 801e9ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e9be:	f104 0010 	add.w	r0, r4, #16
 801e9c2:	2230      	movs	r2, #48	; 0x30
 801e9c4:	2111      	movs	r1, #17
 801e9c6:	f000 fd05 	bl	801f3d4 <core_set_error>
 801e9ca:	f04f 0b00 	mov.w	fp, #0
 801e9ce:	4658      	mov	r0, fp
 801e9d0:	b003      	add	sp, #12
 801e9d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e9d6:	f104 0010 	add.w	r0, r4, #16
 801e9da:	2221      	movs	r2, #33	; 0x21
 801e9dc:	2112      	movs	r1, #18
 801e9de:	469b      	mov	fp, r3
 801e9e0:	f000 fcf8 	bl	801f3d4 <core_set_error>
 801e9e4:	e7e7      	b.n	801e9b6 <ai_platform_network_process+0x202>
 801e9e6:	bf00      	nop
 801e9e8:	a1c00100 	.word	0xa1c00100
 801e9ec:	e0002000 	.word	0xe0002000
 801e9f0:	e0042000 	.word	0xe0042000
 801e9f4:	5c001000 	.word	0x5c001000
 801e9f8:	58024c08 	.word	0x58024c08
 801e9fc:	58024c00 	.word	0x58024c00
 801ea00:	f407a5c2 	.word	0xf407a5c2
 801ea04:	b5e8b5cd 	.word	0xb5e8b5cd
 801ea08:	40023008 	.word	0x40023008
 801ea0c:	40023000 	.word	0x40023000
 801ea10:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 801ea14:	2f00      	cmp	r7, #0
 801ea16:	f000 80ab 	beq.w	801eb70 <ai_platform_network_process+0x3bc>
 801ea1a:	2b01      	cmp	r3, #1
 801ea1c:	f240 809c 	bls.w	801eb58 <ai_platform_network_process+0x3a4>
 801ea20:	f8d4 a04c 	ldr.w	sl, [r4, #76]	; 0x4c
 801ea24:	f11a 0f0c 	cmn.w	sl, #12
 801ea28:	f000 8096 	beq.w	801eb58 <ai_platform_network_process+0x3a4>
 801ea2c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801ea30:	2b00      	cmp	r3, #0
 801ea32:	f000 8091 	beq.w	801eb58 <ai_platform_network_process+0x3a4>
 801ea36:	463d      	mov	r5, r7
 801ea38:	f04f 0900 	mov.w	r9, #0
 801ea3c:	9400      	str	r4, [sp, #0]
 801ea3e:	4599      	cmp	r9, r3
 801ea40:	f080 8093 	bcs.w	801eb6a <ai_platform_network_process+0x3b6>
 801ea44:	f8da 3010 	ldr.w	r3, [sl, #16]
 801ea48:	2b00      	cmp	r3, #0
 801ea4a:	f000 808e 	beq.w	801eb6a <ai_platform_network_process+0x3b6>
 801ea4e:	f853 6029 	ldr.w	r6, [r3, r9, lsl #2]
 801ea52:	2e00      	cmp	r6, #0
 801ea54:	f000 8089 	beq.w	801eb6a <ai_platform_network_process+0x3b6>
 801ea58:	f8da 3014 	ldr.w	r3, [sl, #20]
 801ea5c:	ea4f 1409 	mov.w	r4, r9, lsl #4
 801ea60:	f8d3 8000 	ldr.w	r8, [r3]
 801ea64:	eb18 0704 	adds.w	r7, r8, r4
 801ea68:	f000 8135 	beq.w	801ecd6 <ai_platform_network_process+0x522>
 801ea6c:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 801ea70:	f8b5 b006 	ldrh.w	fp, [r5, #6]
 801ea74:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 801ea78:	fb0b f30e 	mul.w	r3, fp, lr
 801ea7c:	69b0      	ldr	r0, [r6, #24]
 801ea7e:	fb0c f303 	mul.w	r3, ip, r3
 801ea82:	6841      	ldr	r1, [r0, #4]
 801ea84:	4299      	cmp	r1, r3
 801ea86:	d366      	bcc.n	801eb56 <ai_platform_network_process+0x3a2>
 801ea88:	68f3      	ldr	r3, [r6, #12]
 801ea8a:	68da      	ldr	r2, [r3, #12]
 801ea8c:	455a      	cmp	r2, fp
 801ea8e:	d162      	bne.n	801eb56 <ai_platform_network_process+0x3a2>
 801ea90:	689a      	ldr	r2, [r3, #8]
 801ea92:	4572      	cmp	r2, lr
 801ea94:	d15f      	bne.n	801eb56 <ai_platform_network_process+0x3a2>
 801ea96:	685b      	ldr	r3, [r3, #4]
 801ea98:	459c      	cmp	ip, r3
 801ea9a:	d15c      	bne.n	801eb56 <ai_platform_network_process+0x3a2>
 801ea9c:	6800      	ldr	r0, [r0, #0]
 801ea9e:	f007 fa23 	bl	8025ee8 <ai_array_get_byte_size>
 801eaa2:	68f2      	ldr	r2, [r6, #12]
 801eaa4:	6973      	ldr	r3, [r6, #20]
 801eaa6:	68d2      	ldr	r2, [r2, #12]
 801eaa8:	68db      	ldr	r3, [r3, #12]
 801eaaa:	fb03 f302 	mul.w	r3, r3, r2
 801eaae:	4298      	cmp	r0, r3
 801eab0:	d351      	bcc.n	801eb56 <ai_platform_network_process+0x3a2>
 801eab2:	69b3      	ldr	r3, [r6, #24]
 801eab4:	6818      	ldr	r0, [r3, #0]
 801eab6:	f007 f9cb 	bl	8025e50 <ai_array_to_buffer_fmt>
 801eaba:	682b      	ldr	r3, [r5, #0]
 801eabc:	4043      	eors	r3, r0
 801eabe:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 801eac2:	d13e      	bne.n	801eb42 <ai_platform_network_process+0x38e>
 801eac4:	692b      	ldr	r3, [r5, #16]
 801eac6:	2b00      	cmp	r3, #0
 801eac8:	d032      	beq.n	801eb30 <ai_platform_network_process+0x37c>
 801eaca:	88ab      	ldrh	r3, [r5, #4]
 801eacc:	b33b      	cbz	r3, 801eb1e <ai_platform_network_process+0x36a>
 801eace:	9a01      	ldr	r2, [sp, #4]
 801ead0:	68f1      	ldr	r1, [r6, #12]
 801ead2:	429a      	cmp	r2, r3
 801ead4:	68c9      	ldr	r1, [r1, #12]
 801ead6:	bf38      	it	cc
 801ead8:	461a      	movcc	r2, r3
 801eada:	9201      	str	r2, [sp, #4]
 801eadc:	6972      	ldr	r2, [r6, #20]
 801eade:	68d3      	ldr	r3, [r2, #12]
 801eae0:	fb03 f301 	mul.w	r3, r3, r1
 801eae4:	60bb      	str	r3, [r7, #8]
 801eae6:	88aa      	ldrh	r2, [r5, #4]
 801eae8:	fb03 f302 	mul.w	r3, r3, r2
 801eaec:	60fb      	str	r3, [r7, #12]
 801eaee:	6929      	ldr	r1, [r5, #16]
 801eaf0:	6079      	str	r1, [r7, #4]
 801eaf2:	692a      	ldr	r2, [r5, #16]
 801eaf4:	4413      	add	r3, r2
 801eaf6:	f848 3004 	str.w	r3, [r8, r4]
 801eafa:	69b0      	ldr	r0, [r6, #24]
 801eafc:	6803      	ldr	r3, [r0, #0]
 801eafe:	009b      	lsls	r3, r3, #2
 801eb00:	d407      	bmi.n	801eb12 <ai_platform_network_process+0x35e>
 801eb02:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 801eb06:	1a9b      	subs	r3, r3, r2
 801eb08:	4419      	add	r1, r3
 801eb0a:	6081      	str	r1, [r0, #8]
 801eb0c:	687a      	ldr	r2, [r7, #4]
 801eb0e:	69b3      	ldr	r3, [r6, #24]
 801eb10:	60da      	str	r2, [r3, #12]
 801eb12:	f109 0901 	add.w	r9, r9, #1
 801eb16:	3518      	adds	r5, #24
 801eb18:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801eb1c:	e78f      	b.n	801ea3e <ai_platform_network_process+0x28a>
 801eb1e:	9c00      	ldr	r4, [sp, #0]
 801eb20:	2221      	movs	r2, #33	; 0x21
 801eb22:	2113      	movs	r1, #19
 801eb24:	469b      	mov	fp, r3
 801eb26:	f104 0010 	add.w	r0, r4, #16
 801eb2a:	f000 fc53 	bl	801f3d4 <core_set_error>
 801eb2e:	e742      	b.n	801e9b6 <ai_platform_network_process+0x202>
 801eb30:	9c00      	ldr	r4, [sp, #0]
 801eb32:	2217      	movs	r2, #23
 801eb34:	2113      	movs	r1, #19
 801eb36:	469b      	mov	fp, r3
 801eb38:	f104 0010 	add.w	r0, r4, #16
 801eb3c:	f000 fc4a 	bl	801f3d4 <core_set_error>
 801eb40:	e739      	b.n	801e9b6 <ai_platform_network_process+0x202>
 801eb42:	9c00      	ldr	r4, [sp, #0]
 801eb44:	2219      	movs	r2, #25
 801eb46:	2113      	movs	r1, #19
 801eb48:	f04f 0b00 	mov.w	fp, #0
 801eb4c:	f104 0010 	add.w	r0, r4, #16
 801eb50:	f000 fc40 	bl	801f3d4 <core_set_error>
 801eb54:	e72f      	b.n	801e9b6 <ai_platform_network_process+0x202>
 801eb56:	9c00      	ldr	r4, [sp, #0]
 801eb58:	f104 0010 	add.w	r0, r4, #16
 801eb5c:	2218      	movs	r2, #24
 801eb5e:	2113      	movs	r1, #19
 801eb60:	f04f 0b00 	mov.w	fp, #0
 801eb64:	f000 fc36 	bl	801f3d4 <core_set_error>
 801eb68:	e725      	b.n	801e9b6 <ai_platform_network_process+0x202>
 801eb6a:	9c00      	ldr	r4, [sp, #0]
 801eb6c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 801eb70:	9a01      	ldr	r2, [sp, #4]
 801eb72:	82a2      	strh	r2, [r4, #20]
 801eb74:	2b00      	cmp	r3, #0
 801eb76:	f000 80a9 	beq.w	801eccc <ai_platform_network_process+0x518>
 801eb7a:	2b01      	cmp	r3, #1
 801eb7c:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 801eb7e:	f240 80a8 	bls.w	801ecd2 <ai_platform_network_process+0x51e>
 801eb82:	f105 060c 	add.w	r6, r5, #12
 801eb86:	f8b4 b016 	ldrh.w	fp, [r4, #22]
 801eb8a:	8aa3      	ldrh	r3, [r4, #20]
 801eb8c:	455b      	cmp	r3, fp
 801eb8e:	f67f af12 	bls.w	801e9b6 <ai_platform_network_process+0x202>
 801eb92:	9400      	str	r4, [sp, #0]
 801eb94:	2d00      	cmp	r5, #0
 801eb96:	d037      	beq.n	801ec08 <ai_platform_network_process+0x454>
 801eb98:	882b      	ldrh	r3, [r5, #0]
 801eb9a:	2b00      	cmp	r3, #0
 801eb9c:	d034      	beq.n	801ec08 <ai_platform_network_process+0x454>
 801eb9e:	686b      	ldr	r3, [r5, #4]
 801eba0:	2b00      	cmp	r3, #0
 801eba2:	d031      	beq.n	801ec08 <ai_platform_network_process+0x454>
 801eba4:	681b      	ldr	r3, [r3, #0]
 801eba6:	2b00      	cmp	r3, #0
 801eba8:	d02e      	beq.n	801ec08 <ai_platform_network_process+0x454>
 801ebaa:	f04f 0800 	mov.w	r8, #0
 801ebae:	e01a      	b.n	801ebe6 <ai_platform_network_process+0x432>
 801ebb0:	68d4      	ldr	r4, [r2, #12]
 801ebb2:	1b00      	subs	r0, r0, r4
 801ebb4:	4401      	add	r1, r0
 801ebb6:	6091      	str	r1, [r2, #8]
 801ebb8:	687a      	ldr	r2, [r7, #4]
 801ebba:	699b      	ldr	r3, [r3, #24]
 801ebbc:	60da      	str	r2, [r3, #12]
 801ebbe:	687b      	ldr	r3, [r7, #4]
 801ebc0:	f108 0801 	add.w	r8, r8, #1
 801ebc4:	68b9      	ldr	r1, [r7, #8]
 801ebc6:	f85a 2009 	ldr.w	r2, [sl, r9]
 801ebca:	440b      	add	r3, r1
 801ebcc:	4293      	cmp	r3, r2
 801ebce:	d301      	bcc.n	801ebd4 <ai_platform_network_process+0x420>
 801ebd0:	68fb      	ldr	r3, [r7, #12]
 801ebd2:	1ad3      	subs	r3, r2, r3
 801ebd4:	607b      	str	r3, [r7, #4]
 801ebd6:	882b      	ldrh	r3, [r5, #0]
 801ebd8:	4598      	cmp	r8, r3
 801ebda:	d215      	bcs.n	801ec08 <ai_platform_network_process+0x454>
 801ebdc:	686b      	ldr	r3, [r5, #4]
 801ebde:	b19b      	cbz	r3, 801ec08 <ai_platform_network_process+0x454>
 801ebe0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 801ebe4:	b183      	cbz	r3, 801ec08 <ai_platform_network_process+0x454>
 801ebe6:	68a9      	ldr	r1, [r5, #8]
 801ebe8:	ea4f 1908 	mov.w	r9, r8, lsl #4
 801ebec:	699a      	ldr	r2, [r3, #24]
 801ebee:	f8d1 a000 	ldr.w	sl, [r1]
 801ebf2:	6814      	ldr	r4, [r2, #0]
 801ebf4:	eb0a 0709 	add.w	r7, sl, r9
 801ebf8:	6890      	ldr	r0, [r2, #8]
 801ebfa:	00a4      	lsls	r4, r4, #2
 801ebfc:	6879      	ldr	r1, [r7, #4]
 801ebfe:	d5d7      	bpl.n	801ebb0 <ai_platform_network_process+0x3fc>
 801ec00:	68ba      	ldr	r2, [r7, #8]
 801ec02:	f007 fabf 	bl	8026184 <memcpy>
 801ec06:	e7da      	b.n	801ebbe <ai_platform_network_process+0x40a>
 801ec08:	9800      	ldr	r0, [sp, #0]
 801ec0a:	f001 fe99 	bl	8020940 <ai_layers_forward_all>
 801ec0e:	2e00      	cmp	r6, #0
 801ec10:	d04a      	beq.n	801eca8 <ai_platform_network_process+0x4f4>
 801ec12:	8833      	ldrh	r3, [r6, #0]
 801ec14:	2b00      	cmp	r3, #0
 801ec16:	d047      	beq.n	801eca8 <ai_platform_network_process+0x4f4>
 801ec18:	6873      	ldr	r3, [r6, #4]
 801ec1a:	2b00      	cmp	r3, #0
 801ec1c:	d044      	beq.n	801eca8 <ai_platform_network_process+0x4f4>
 801ec1e:	681b      	ldr	r3, [r3, #0]
 801ec20:	2b00      	cmp	r3, #0
 801ec22:	d041      	beq.n	801eca8 <ai_platform_network_process+0x4f4>
 801ec24:	f04f 0800 	mov.w	r8, #0
 801ec28:	e019      	b.n	801ec5e <ai_platform_network_process+0x4aa>
 801ec2a:	f85a 2009 	ldr.w	r2, [sl, r9]
 801ec2e:	4291      	cmp	r1, r2
 801ec30:	d301      	bcc.n	801ec36 <ai_platform_network_process+0x482>
 801ec32:	68f9      	ldr	r1, [r7, #12]
 801ec34:	1a51      	subs	r1, r2, r1
 801ec36:	6079      	str	r1, [r7, #4]
 801ec38:	f108 0801 	add.w	r8, r8, #1
 801ec3c:	6998      	ldr	r0, [r3, #24]
 801ec3e:	e9d0 2402 	ldrd	r2, r4, [r0, #8]
 801ec42:	1b12      	subs	r2, r2, r4
 801ec44:	440a      	add	r2, r1
 801ec46:	6082      	str	r2, [r0, #8]
 801ec48:	687a      	ldr	r2, [r7, #4]
 801ec4a:	699b      	ldr	r3, [r3, #24]
 801ec4c:	60da      	str	r2, [r3, #12]
 801ec4e:	8833      	ldrh	r3, [r6, #0]
 801ec50:	4598      	cmp	r8, r3
 801ec52:	d229      	bcs.n	801eca8 <ai_platform_network_process+0x4f4>
 801ec54:	6873      	ldr	r3, [r6, #4]
 801ec56:	b33b      	cbz	r3, 801eca8 <ai_platform_network_process+0x4f4>
 801ec58:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 801ec5c:	b323      	cbz	r3, 801eca8 <ai_platform_network_process+0x4f4>
 801ec5e:	68b2      	ldr	r2, [r6, #8]
 801ec60:	ea4f 1908 	mov.w	r9, r8, lsl #4
 801ec64:	f8d3 e018 	ldr.w	lr, [r3, #24]
 801ec68:	f8d2 a000 	ldr.w	sl, [r2]
 801ec6c:	f8de 1000 	ldr.w	r1, [lr]
 801ec70:	eb0a 0709 	add.w	r7, sl, r9
 801ec74:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
 801ec78:	e9d7 0201 	ldrd	r0, r2, [r7, #4]
 801ec7c:	eb00 0102 	add.w	r1, r0, r2
 801ec80:	d0d3      	beq.n	801ec2a <ai_platform_network_process+0x476>
 801ec82:	f8de 1008 	ldr.w	r1, [lr, #8]
 801ec86:	f007 fa7d 	bl	8026184 <memcpy>
 801ec8a:	f85a 2009 	ldr.w	r2, [sl, r9]
 801ec8e:	e9d7 3101 	ldrd	r3, r1, [r7, #4]
 801ec92:	440b      	add	r3, r1
 801ec94:	4293      	cmp	r3, r2
 801ec96:	d301      	bcc.n	801ec9c <ai_platform_network_process+0x4e8>
 801ec98:	68fb      	ldr	r3, [r7, #12]
 801ec9a:	1ad3      	subs	r3, r2, r3
 801ec9c:	607b      	str	r3, [r7, #4]
 801ec9e:	f108 0801 	add.w	r8, r8, #1
 801eca2:	8833      	ldrh	r3, [r6, #0]
 801eca4:	4598      	cmp	r8, r3
 801eca6:	d3d5      	bcc.n	801ec54 <ai_platform_network_process+0x4a0>
 801eca8:	9b00      	ldr	r3, [sp, #0]
 801ecaa:	f8b3 b016 	ldrh.w	fp, [r3, #22]
 801ecae:	461a      	mov	r2, r3
 801ecb0:	8a9b      	ldrh	r3, [r3, #20]
 801ecb2:	f10b 0b01 	add.w	fp, fp, #1
 801ecb6:	fa1f fb8b 	uxth.w	fp, fp
 801ecba:	455b      	cmp	r3, fp
 801ecbc:	f8a2 b016 	strh.w	fp, [r2, #22]
 801ecc0:	f63f af68 	bhi.w	801eb94 <ai_platform_network_process+0x3e0>
 801ecc4:	4658      	mov	r0, fp
 801ecc6:	b003      	add	sp, #12
 801ecc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eccc:	461d      	mov	r5, r3
 801ecce:	461e      	mov	r6, r3
 801ecd0:	e759      	b.n	801eb86 <ai_platform_network_process+0x3d2>
 801ecd2:	2600      	movs	r6, #0
 801ecd4:	e757      	b.n	801eb86 <ai_platform_network_process+0x3d2>
 801ecd6:	9c00      	ldr	r4, [sp, #0]
 801ecd8:	2217      	movs	r2, #23
 801ecda:	2113      	movs	r1, #19
 801ecdc:	46bb      	mov	fp, r7
 801ecde:	f104 0010 	add.w	r0, r4, #16
 801ece2:	f000 fb77 	bl	801f3d4 <core_set_error>
 801ece6:	e666      	b.n	801e9b6 <ai_platform_network_process+0x202>
 801ece8:	f104 0010 	add.w	r0, r4, #16
 801ecec:	2217      	movs	r2, #23
 801ecee:	2112      	movs	r1, #18
 801ecf0:	469b      	mov	fp, r3
 801ecf2:	f000 fb6f 	bl	801f3d4 <core_set_error>
 801ecf6:	e65e      	b.n	801e9b6 <ai_platform_network_process+0x202>
 801ecf8:	f104 0010 	add.w	r0, r4, #16
 801ecfc:	2219      	movs	r2, #25
 801ecfe:	2112      	movs	r1, #18
 801ed00:	f04f 0b00 	mov.w	fp, #0
 801ed04:	f000 fb66 	bl	801f3d4 <core_set_error>
 801ed08:	e655      	b.n	801e9b6 <ai_platform_network_process+0x202>
 801ed0a:	bf00      	nop

0801ed0c <node_convert>:
 801ed0c:	6982      	ldr	r2, [r0, #24]
 801ed0e:	8813      	ldrh	r3, [r2, #0]
 801ed10:	2b00      	cmp	r3, #0
 801ed12:	d04b      	beq.n	801edac <node_convert+0xa0>
 801ed14:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ed16:	6852      	ldr	r2, [r2, #4]
 801ed18:	b083      	sub	sp, #12
 801ed1a:	6855      	ldr	r5, [r2, #4]
 801ed1c:	b105      	cbz	r5, 801ed20 <node_convert+0x14>
 801ed1e:	682d      	ldr	r5, [r5, #0]
 801ed20:	2b01      	cmp	r3, #1
 801ed22:	d940      	bls.n	801eda6 <node_convert+0x9a>
 801ed24:	6916      	ldr	r6, [r2, #16]
 801ed26:	b106      	cbz	r6, 801ed2a <node_convert+0x1e>
 801ed28:	6836      	ldr	r6, [r6, #0]
 801ed2a:	68ab      	ldr	r3, [r5, #8]
 801ed2c:	0a1b      	lsrs	r3, r3, #8
 801ed2e:	f000 80e1 	beq.w	801eef4 <node_convert+0x1e8>
 801ed32:	68e9      	ldr	r1, [r5, #12]
 801ed34:	2401      	movs	r4, #1
 801ed36:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801ed3a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801ed3e:	428b      	cmp	r3, r1
 801ed40:	fb02 f404 	mul.w	r4, r2, r4
 801ed44:	d1f9      	bne.n	801ed3a <node_convert+0x2e>
 801ed46:	69aa      	ldr	r2, [r5, #24]
 801ed48:	69b7      	ldr	r7, [r6, #24]
 801ed4a:	6813      	ldr	r3, [r2, #0]
 801ed4c:	6890      	ldr	r0, [r2, #8]
 801ed4e:	f3c3 4243 	ubfx	r2, r3, #17, #4
 801ed52:	2a01      	cmp	r2, #1
 801ed54:	d055      	beq.n	801ee02 <node_convert+0xf6>
 801ed56:	6829      	ldr	r1, [r5, #0]
 801ed58:	15da      	asrs	r2, r3, #23
 801ed5a:	68bd      	ldr	r5, [r7, #8]
 801ed5c:	b341      	cbz	r1, 801edb0 <node_convert+0xa4>
 801ed5e:	684e      	ldr	r6, [r1, #4]
 801ed60:	f002 0201 	and.w	r2, r2, #1
 801ed64:	2e00      	cmp	r6, #0
 801ed66:	f000 80c7 	beq.w	801eef8 <node_convert+0x1ec>
 801ed6a:	884b      	ldrh	r3, [r1, #2]
 801ed6c:	2b00      	cmp	r3, #0
 801ed6e:	f000 8085 	beq.w	801ee7c <node_convert+0x170>
 801ed72:	6833      	ldr	r3, [r6, #0]
 801ed74:	ed93 7a00 	vldr	s14, [r3]
 801ed78:	6873      	ldr	r3, [r6, #4]
 801ed7a:	2a00      	cmp	r2, #0
 801ed7c:	f000 80d3 	beq.w	801ef26 <node_convert+0x21a>
 801ed80:	f993 2000 	ldrsb.w	r2, [r3]
 801ed84:	b16c      	cbz	r4, 801eda2 <node_convert+0x96>
 801ed86:	4404      	add	r4, r0
 801ed88:	f910 3b01 	ldrsb.w	r3, [r0], #1
 801ed8c:	1a9b      	subs	r3, r3, r2
 801ed8e:	42a0      	cmp	r0, r4
 801ed90:	ee07 3a90 	vmov	s15, r3
 801ed94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ed98:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ed9c:	ece5 7a01 	vstmia	r5!, {s15}
 801eda0:	d1f2      	bne.n	801ed88 <node_convert+0x7c>
 801eda2:	b003      	add	sp, #12
 801eda4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801eda6:	2300      	movs	r3, #0
 801eda8:	685b      	ldr	r3, [r3, #4]
 801edaa:	deff      	udf	#255	; 0xff
 801edac:	685b      	ldr	r3, [r3, #4]
 801edae:	deff      	udf	#255	; 0xff
 801edb0:	f3c3 11c6 	ubfx	r1, r3, #7, #7
 801edb4:	f003 067f 	and.w	r6, r3, #127	; 0x7f
 801edb8:	f002 0201 	and.w	r2, r2, #1
 801edbc:	1b8e      	subs	r6, r1, r6
 801edbe:	2908      	cmp	r1, #8
 801edc0:	4629      	mov	r1, r5
 801edc2:	f106 0640 	add.w	r6, r6, #64	; 0x40
 801edc6:	eba6 0602 	sub.w	r6, r6, r2
 801edca:	4622      	mov	r2, r4
 801edcc:	d05c      	beq.n	801ee88 <node_convert+0x17c>
 801edce:	f002 fcfb 	bl	80217c8 <arm_q15_to_float>
 801edd2:	2e00      	cmp	r6, #0
 801edd4:	d0e5      	beq.n	801eda2 <node_convert+0x96>
 801edd6:	ee07 6a90 	vmov	s15, r6
 801edda:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801edde:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 801ede2:	f009 fa29 	bl	8028238 <powf>
 801ede6:	2c00      	cmp	r4, #0
 801ede8:	d0db      	beq.n	801eda2 <node_convert+0x96>
 801edea:	2300      	movs	r3, #0
 801edec:	ecf5 7a01 	vldmia	r5!, {s15}
 801edf0:	3301      	adds	r3, #1
 801edf2:	ee67 7a80 	vmul.f32	s15, s15, s0
 801edf6:	429c      	cmp	r4, r3
 801edf8:	ed45 7a01 	vstr	s15, [r5, #-4]
 801edfc:	d1f6      	bne.n	801edec <node_convert+0xe0>
 801edfe:	b003      	add	sp, #12
 801ee00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ee02:	683b      	ldr	r3, [r7, #0]
 801ee04:	6835      	ldr	r5, [r6, #0]
 801ee06:	15da      	asrs	r2, r3, #23
 801ee08:	2d00      	cmp	r5, #0
 801ee0a:	f000 808e 	beq.w	801ef2a <node_convert+0x21e>
 801ee0e:	6869      	ldr	r1, [r5, #4]
 801ee10:	f002 0301 	and.w	r3, r2, #1
 801ee14:	68ba      	ldr	r2, [r7, #8]
 801ee16:	2900      	cmp	r1, #0
 801ee18:	d039      	beq.n	801ee8e <node_convert+0x182>
 801ee1a:	886d      	ldrh	r5, [r5, #2]
 801ee1c:	2d00      	cmp	r5, #0
 801ee1e:	d03c      	beq.n	801ee9a <node_convert+0x18e>
 801ee20:	680d      	ldr	r5, [r1, #0]
 801ee22:	edd5 7a00 	vldr	s15, [r5]
 801ee26:	2b00      	cmp	r3, #0
 801ee28:	f000 80b1 	beq.w	801ef8e <node_convert+0x282>
 801ee2c:	684b      	ldr	r3, [r1, #4]
 801ee2e:	f993 3000 	ldrsb.w	r3, [r3]
 801ee32:	ee07 3a10 	vmov	s14, r3
 801ee36:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ee3a:	2c00      	cmp	r4, #0
 801ee3c:	d0b1      	beq.n	801eda2 <node_convert+0x96>
 801ee3e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801ee42:	4414      	add	r4, r2
 801ee44:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801ee48:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 801ee4c:	ecf0 7a01 	vldmia	r0!, {s15}
 801ee50:	eef0 5a47 	vmov.f32	s11, s14
 801ee54:	eee7 5aa6 	vfma.f32	s11, s15, s13
 801ee58:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801ee5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ee60:	db3b      	blt.n	801eeda <node_convert+0x1ce>
 801ee62:	ee75 7a86 	vadd.f32	s15, s11, s12
 801ee66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ee6a:	ee17 3a90 	vmov	r3, s15
 801ee6e:	f303 0307 	ssat	r3, #8, r3
 801ee72:	f802 3b01 	strb.w	r3, [r2], #1
 801ee76:	42a2      	cmp	r2, r4
 801ee78:	d1e8      	bne.n	801ee4c <node_convert+0x140>
 801ee7a:	e792      	b.n	801eda2 <node_convert+0x96>
 801ee7c:	2a00      	cmp	r2, #0
 801ee7e:	d03d      	beq.n	801eefc <node_convert+0x1f0>
 801ee80:	461a      	mov	r2, r3
 801ee82:	ed9f 7a48 	vldr	s14, [pc, #288]	; 801efa4 <node_convert+0x298>
 801ee86:	e77d      	b.n	801ed84 <node_convert+0x78>
 801ee88:	f002 fd06 	bl	8021898 <arm_q7_to_float>
 801ee8c:	e7a1      	b.n	801edd2 <node_convert+0xc6>
 801ee8e:	b133      	cbz	r3, 801ee9e <node_convert+0x192>
 801ee90:	ed9f 7a44 	vldr	s14, [pc, #272]	; 801efa4 <node_convert+0x298>
 801ee94:	eef0 7a47 	vmov.f32	s15, s14
 801ee98:	e7cf      	b.n	801ee3a <node_convert+0x12e>
 801ee9a:	2b00      	cmp	r3, #0
 801ee9c:	d1f8      	bne.n	801ee90 <node_convert+0x184>
 801ee9e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801eea2:	eddf 7a40 	vldr	s15, [pc, #256]	; 801efa4 <node_convert+0x298>
 801eea6:	2c00      	cmp	r4, #0
 801eea8:	f43f af7b 	beq.w	801eda2 <node_convert+0x96>
 801eeac:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801eeb0:	4414      	add	r4, r2
 801eeb2:	eec6 6a27 	vdiv.f32	s13, s12, s15
 801eeb6:	ecf0 7a01 	vldmia	r0!, {s15}
 801eeba:	eeb0 6a47 	vmov.f32	s12, s14
 801eebe:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801eec2:	eefd 7ac6 	vcvt.s32.f32	s15, s12
 801eec6:	ee17 3a90 	vmov	r3, s15
 801eeca:	f383 0308 	usat	r3, #8, r3
 801eece:	f802 3b01 	strb.w	r3, [r2], #1
 801eed2:	42a2      	cmp	r2, r4
 801eed4:	d1ef      	bne.n	801eeb6 <node_convert+0x1aa>
 801eed6:	b003      	add	sp, #12
 801eed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801eeda:	ee75 7ac6 	vsub.f32	s15, s11, s12
 801eede:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801eee2:	ee17 3a90 	vmov	r3, s15
 801eee6:	f303 0307 	ssat	r3, #8, r3
 801eeea:	f802 3b01 	strb.w	r3, [r2], #1
 801eeee:	4294      	cmp	r4, r2
 801eef0:	d1ac      	bne.n	801ee4c <node_convert+0x140>
 801eef2:	e756      	b.n	801eda2 <node_convert+0x96>
 801eef4:	2401      	movs	r4, #1
 801eef6:	e726      	b.n	801ed46 <node_convert+0x3a>
 801eef8:	2a00      	cmp	r2, #0
 801eefa:	d13f      	bne.n	801ef7c <node_convert+0x270>
 801eefc:	ed9f 7a29 	vldr	s14, [pc, #164]	; 801efa4 <node_convert+0x298>
 801ef00:	2c00      	cmp	r4, #0
 801ef02:	f43f af4e 	beq.w	801eda2 <node_convert+0x96>
 801ef06:	4404      	add	r4, r0
 801ef08:	f810 3b01 	ldrb.w	r3, [r0], #1
 801ef0c:	1a9b      	subs	r3, r3, r2
 801ef0e:	42a0      	cmp	r0, r4
 801ef10:	ee07 3a90 	vmov	s15, r3
 801ef14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ef18:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ef1c:	ece5 7a01 	vstmia	r5!, {s15}
 801ef20:	d1f2      	bne.n	801ef08 <node_convert+0x1fc>
 801ef22:	b003      	add	sp, #12
 801ef24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ef26:	781a      	ldrb	r2, [r3, #0]
 801ef28:	e7ea      	b.n	801ef00 <node_convert+0x1f4>
 801ef2a:	f3c3 16c6 	ubfx	r6, r3, #7, #7
 801ef2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ef32:	f002 0201 	and.w	r2, r2, #1
 801ef36:	1af3      	subs	r3, r6, r3
 801ef38:	3340      	adds	r3, #64	; 0x40
 801ef3a:	1a9b      	subs	r3, r3, r2
 801ef3c:	d015      	beq.n	801ef6a <node_convert+0x25e>
 801ef3e:	425b      	negs	r3, r3
 801ef40:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801ef44:	9001      	str	r0, [sp, #4]
 801ef46:	ee00 3a90 	vmov	s1, r3
 801ef4a:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801ef4e:	f009 f973 	bl	8028238 <powf>
 801ef52:	9801      	ldr	r0, [sp, #4]
 801ef54:	b14c      	cbz	r4, 801ef6a <node_convert+0x25e>
 801ef56:	4603      	mov	r3, r0
 801ef58:	ecf3 7a01 	vldmia	r3!, {s15}
 801ef5c:	3501      	adds	r5, #1
 801ef5e:	ee67 7a80 	vmul.f32	s15, s15, s0
 801ef62:	42ac      	cmp	r4, r5
 801ef64:	ed43 7a01 	vstr	s15, [r3, #-4]
 801ef68:	d1f6      	bne.n	801ef58 <node_convert+0x24c>
 801ef6a:	2e08      	cmp	r6, #8
 801ef6c:	68b9      	ldr	r1, [r7, #8]
 801ef6e:	4622      	mov	r2, r4
 801ef70:	d008      	beq.n	801ef84 <node_convert+0x278>
 801ef72:	b003      	add	sp, #12
 801ef74:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801ef78:	f002 baa4 	b.w	80214c4 <arm_float_to_q15>
 801ef7c:	4632      	mov	r2, r6
 801ef7e:	ed9f 7a09 	vldr	s14, [pc, #36]	; 801efa4 <node_convert+0x298>
 801ef82:	e6ff      	b.n	801ed84 <node_convert+0x78>
 801ef84:	b003      	add	sp, #12
 801ef86:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801ef8a:	f002 bb55 	b.w	8021638 <arm_float_to_q7>
 801ef8e:	684b      	ldr	r3, [r1, #4]
 801ef90:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801ef94:	781b      	ldrb	r3, [r3, #0]
 801ef96:	ee07 3a10 	vmov	s14, r3
 801ef9a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801ef9e:	ee37 7a26 	vadd.f32	s14, s14, s13
 801efa2:	e780      	b.n	801eea6 <node_convert+0x19a>
 801efa4:	00000000 	.word	0x00000000

0801efa8 <node_convert_integer>:
 801efa8:	6982      	ldr	r2, [r0, #24]
 801efaa:	8813      	ldrh	r3, [r2, #0]
 801efac:	2b00      	cmp	r3, #0
 801efae:	f000 8084 	beq.w	801f0ba <node_convert_integer+0x112>
 801efb2:	b4f0      	push	{r4, r5, r6, r7}
 801efb4:	6852      	ldr	r2, [r2, #4]
 801efb6:	6855      	ldr	r5, [r2, #4]
 801efb8:	b105      	cbz	r5, 801efbc <node_convert_integer+0x14>
 801efba:	682d      	ldr	r5, [r5, #0]
 801efbc:	2b01      	cmp	r3, #1
 801efbe:	d979      	bls.n	801f0b4 <node_convert_integer+0x10c>
 801efc0:	6916      	ldr	r6, [r2, #16]
 801efc2:	b106      	cbz	r6, 801efc6 <node_convert_integer+0x1e>
 801efc4:	6836      	ldr	r6, [r6, #0]
 801efc6:	68ab      	ldr	r3, [r5, #8]
 801efc8:	0a1b      	lsrs	r3, r3, #8
 801efca:	f000 8178 	beq.w	801f2be <node_convert_integer+0x316>
 801efce:	68e8      	ldr	r0, [r5, #12]
 801efd0:	2201      	movs	r2, #1
 801efd2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801efd6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801efda:	4298      	cmp	r0, r3
 801efdc:	fb01 f202 	mul.w	r2, r1, r2
 801efe0:	d1f9      	bne.n	801efd6 <node_convert_integer+0x2e>
 801efe2:	0893      	lsrs	r3, r2, #2
 801efe4:	682c      	ldr	r4, [r5, #0]
 801efe6:	f8d6 c000 	ldr.w	ip, [r6]
 801efea:	b19c      	cbz	r4, 801f014 <node_convert_integer+0x6c>
 801efec:	6861      	ldr	r1, [r4, #4]
 801efee:	b189      	cbz	r1, 801f014 <node_convert_integer+0x6c>
 801eff0:	8860      	ldrh	r0, [r4, #2]
 801eff2:	b178      	cbz	r0, 801f014 <node_convert_integer+0x6c>
 801eff4:	6809      	ldr	r1, [r1, #0]
 801eff6:	edd1 6a00 	vldr	s13, [r1]
 801effa:	f1bc 0f00 	cmp.w	ip, #0
 801effe:	d00e      	beq.n	801f01e <node_convert_integer+0x76>
 801f000:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801f004:	b159      	cbz	r1, 801f01e <node_convert_integer+0x76>
 801f006:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 801f00a:	b140      	cbz	r0, 801f01e <node_convert_integer+0x76>
 801f00c:	6809      	ldr	r1, [r1, #0]
 801f00e:	ed91 7a00 	vldr	s14, [r1]
 801f012:	e006      	b.n	801f022 <node_convert_integer+0x7a>
 801f014:	eddf 6abf 	vldr	s13, [pc, #764]	; 801f314 <node_convert_integer+0x36c>
 801f018:	f1bc 0f00 	cmp.w	ip, #0
 801f01c:	d1f0      	bne.n	801f000 <node_convert_integer+0x58>
 801f01e:	ed9f 7abd 	vldr	s14, [pc, #756]	; 801f314 <node_convert_integer+0x36c>
 801f022:	69a8      	ldr	r0, [r5, #24]
 801f024:	69b7      	ldr	r7, [r6, #24]
 801f026:	6805      	ldr	r5, [r0, #0]
 801f028:	6839      	ldr	r1, [r7, #0]
 801f02a:	022d      	lsls	r5, r5, #8
 801f02c:	6880      	ldr	r0, [r0, #8]
 801f02e:	f3c1 56c0 	ubfx	r6, r1, #23, #1
 801f032:	68b9      	ldr	r1, [r7, #8]
 801f034:	d443      	bmi.n	801f0be <node_convert_integer+0x116>
 801f036:	2e00      	cmp	r6, #0
 801f038:	f040 80d4 	bne.w	801f1e4 <node_convert_integer+0x23c>
 801f03c:	b13c      	cbz	r4, 801f04e <node_convert_integer+0xa6>
 801f03e:	6863      	ldr	r3, [r4, #4]
 801f040:	2b00      	cmp	r3, #0
 801f042:	f000 815b 	beq.w	801f2fc <node_convert_integer+0x354>
 801f046:	8864      	ldrh	r4, [r4, #2]
 801f048:	b10c      	cbz	r4, 801f04e <node_convert_integer+0xa6>
 801f04a:	685b      	ldr	r3, [r3, #4]
 801f04c:	781c      	ldrb	r4, [r3, #0]
 801f04e:	f1bc 0f00 	cmp.w	ip, #0
 801f052:	f000 812c 	beq.w	801f2ae <node_convert_integer+0x306>
 801f056:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801f05a:	2b00      	cmp	r3, #0
 801f05c:	f000 8127 	beq.w	801f2ae <node_convert_integer+0x306>
 801f060:	f8bc 5002 	ldrh.w	r5, [ip, #2]
 801f064:	2d00      	cmp	r5, #0
 801f066:	f000 8122 	beq.w	801f2ae <node_convert_integer+0x306>
 801f06a:	685b      	ldr	r3, [r3, #4]
 801f06c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801f070:	781b      	ldrb	r3, [r3, #0]
 801f072:	ee06 3a10 	vmov	s12, r3
 801f076:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801f07a:	ee36 6a27 	vadd.f32	s12, s12, s15
 801f07e:	eec6 5a87 	vdiv.f32	s11, s13, s14
 801f082:	b1aa      	cbz	r2, 801f0b0 <node_convert_integer+0x108>
 801f084:	440a      	add	r2, r1
 801f086:	f810 3b01 	ldrb.w	r3, [r0], #1
 801f08a:	1b1b      	subs	r3, r3, r4
 801f08c:	eeb0 7a46 	vmov.f32	s14, s12
 801f090:	ee07 3a90 	vmov	s15, r3
 801f094:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f098:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801f09c:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801f0a0:	ee17 3a90 	vmov	r3, s15
 801f0a4:	f383 0308 	usat	r3, #8, r3
 801f0a8:	f801 3b01 	strb.w	r3, [r1], #1
 801f0ac:	4291      	cmp	r1, r2
 801f0ae:	d1ea      	bne.n	801f086 <node_convert_integer+0xde>
 801f0b0:	bcf0      	pop	{r4, r5, r6, r7}
 801f0b2:	4770      	bx	lr
 801f0b4:	2300      	movs	r3, #0
 801f0b6:	685b      	ldr	r3, [r3, #4]
 801f0b8:	deff      	udf	#255	; 0xff
 801f0ba:	685b      	ldr	r3, [r3, #4]
 801f0bc:	deff      	udf	#255	; 0xff
 801f0be:	2e00      	cmp	r6, #0
 801f0c0:	d047      	beq.n	801f152 <node_convert_integer+0x1aa>
 801f0c2:	b144      	cbz	r4, 801f0d6 <node_convert_integer+0x12e>
 801f0c4:	6863      	ldr	r3, [r4, #4]
 801f0c6:	2b00      	cmp	r3, #0
 801f0c8:	f000 8110 	beq.w	801f2ec <node_convert_integer+0x344>
 801f0cc:	8864      	ldrh	r4, [r4, #2]
 801f0ce:	b114      	cbz	r4, 801f0d6 <node_convert_integer+0x12e>
 801f0d0:	685b      	ldr	r3, [r3, #4]
 801f0d2:	f993 4000 	ldrsb.w	r4, [r3]
 801f0d6:	f1bc 0f00 	cmp.w	ip, #0
 801f0da:	f000 80eb 	beq.w	801f2b4 <node_convert_integer+0x30c>
 801f0de:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801f0e2:	2d00      	cmp	r5, #0
 801f0e4:	f000 80f9 	beq.w	801f2da <node_convert_integer+0x332>
 801f0e8:	f8bc 3002 	ldrh.w	r3, [ip, #2]
 801f0ec:	2b00      	cmp	r3, #0
 801f0ee:	f000 80ef 	beq.w	801f2d0 <node_convert_integer+0x328>
 801f0f2:	686b      	ldr	r3, [r5, #4]
 801f0f4:	f993 3000 	ldrsb.w	r3, [r3]
 801f0f8:	ee07 3a90 	vmov	s15, r3
 801f0fc:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801f100:	2a00      	cmp	r2, #0
 801f102:	d0d5      	beq.n	801f0b0 <node_convert_integer+0x108>
 801f104:	440a      	add	r2, r1
 801f106:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801f10a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801f10e:	f910 3b01 	ldrsb.w	r3, [r0], #1
 801f112:	eef0 5a47 	vmov.f32	s11, s14
 801f116:	1b1b      	subs	r3, r3, r4
 801f118:	ee07 3a90 	vmov	s15, r3
 801f11c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f120:	eee7 5a86 	vfma.f32	s11, s15, s12
 801f124:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801f128:	eef0 7a65 	vmov.f32	s15, s11
 801f12c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f130:	bfd4      	ite	le
 801f132:	ee75 7ae6 	vsuble.f32	s15, s11, s13
 801f136:	ee77 7aa6 	vaddgt.f32	s15, s15, s13
 801f13a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f13e:	ee17 3a90 	vmov	r3, s15
 801f142:	f303 0307 	ssat	r3, #8, r3
 801f146:	f801 3b01 	strb.w	r3, [r1], #1
 801f14a:	4291      	cmp	r1, r2
 801f14c:	d1df      	bne.n	801f10e <node_convert_integer+0x166>
 801f14e:	bcf0      	pop	{r4, r5, r6, r7}
 801f150:	4770      	bx	lr
 801f152:	b144      	cbz	r4, 801f166 <node_convert_integer+0x1be>
 801f154:	6865      	ldr	r5, [r4, #4]
 801f156:	2d00      	cmp	r5, #0
 801f158:	f000 80c2 	beq.w	801f2e0 <node_convert_integer+0x338>
 801f15c:	8864      	ldrh	r4, [r4, #2]
 801f15e:	b114      	cbz	r4, 801f166 <node_convert_integer+0x1be>
 801f160:	686c      	ldr	r4, [r5, #4]
 801f162:	f994 4000 	ldrsb.w	r4, [r4]
 801f166:	f1bc 0f00 	cmp.w	ip, #0
 801f16a:	d00c      	beq.n	801f186 <node_convert_integer+0x1de>
 801f16c:	f8dc 6004 	ldr.w	r6, [ip, #4]
 801f170:	2e00      	cmp	r6, #0
 801f172:	f000 80b0 	beq.w	801f2d6 <node_convert_integer+0x32e>
 801f176:	f8bc 5002 	ldrh.w	r5, [ip, #2]
 801f17a:	2d00      	cmp	r5, #0
 801f17c:	f000 80a6 	beq.w	801f2cc <node_convert_integer+0x324>
 801f180:	6875      	ldr	r5, [r6, #4]
 801f182:	f895 c000 	ldrb.w	ip, [r5]
 801f186:	eef4 6a47 	vcmp.f32	s13, s14
 801f18a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f18e:	d104      	bne.n	801f19a <node_convert_integer+0x1f2>
 801f190:	f104 0680 	add.w	r6, r4, #128	; 0x80
 801f194:	4566      	cmp	r6, ip
 801f196:	f000 80f8 	beq.w	801f38a <node_convert_integer+0x3e2>
 801f19a:	ee07 ca90 	vmov	s15, ip
 801f19e:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801f1a2:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801f1a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f1aa:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801f1ae:	2a00      	cmp	r2, #0
 801f1b0:	f43f af7e 	beq.w	801f0b0 <node_convert_integer+0x108>
 801f1b4:	4402      	add	r2, r0
 801f1b6:	f910 3b01 	ldrsb.w	r3, [r0], #1
 801f1ba:	eef0 6a67 	vmov.f32	s13, s15
 801f1be:	1b1b      	subs	r3, r3, r4
 801f1c0:	ee07 3a10 	vmov	s14, r3
 801f1c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f1c8:	eee7 6a06 	vfma.f32	s13, s14, s12
 801f1cc:	eebd 7ae6 	vcvt.s32.f32	s14, s13
 801f1d0:	ee17 3a10 	vmov	r3, s14
 801f1d4:	f383 0308 	usat	r3, #8, r3
 801f1d8:	4290      	cmp	r0, r2
 801f1da:	f801 3b01 	strb.w	r3, [r1], #1
 801f1de:	d1ea      	bne.n	801f1b6 <node_convert_integer+0x20e>
 801f1e0:	bcf0      	pop	{r4, r5, r6, r7}
 801f1e2:	4770      	bx	lr
 801f1e4:	2c00      	cmp	r4, #0
 801f1e6:	d068      	beq.n	801f2ba <node_convert_integer+0x312>
 801f1e8:	6866      	ldr	r6, [r4, #4]
 801f1ea:	2e00      	cmp	r6, #0
 801f1ec:	f000 808c 	beq.w	801f308 <node_convert_integer+0x360>
 801f1f0:	8865      	ldrh	r5, [r4, #2]
 801f1f2:	b10d      	cbz	r5, 801f1f8 <node_convert_integer+0x250>
 801f1f4:	6875      	ldr	r5, [r6, #4]
 801f1f6:	782d      	ldrb	r5, [r5, #0]
 801f1f8:	f1bc 0f00 	cmp.w	ip, #0
 801f1fc:	d061      	beq.n	801f2c2 <node_convert_integer+0x31a>
 801f1fe:	f8dc 7004 	ldr.w	r7, [ip, #4]
 801f202:	2f00      	cmp	r7, #0
 801f204:	d078      	beq.n	801f2f8 <node_convert_integer+0x350>
 801f206:	f8bc 6002 	ldrh.w	r6, [ip, #2]
 801f20a:	b116      	cbz	r6, 801f212 <node_convert_integer+0x26a>
 801f20c:	687e      	ldr	r6, [r7, #4]
 801f20e:	f996 6000 	ldrsb.w	r6, [r6]
 801f212:	eef4 6a47 	vcmp.f32	s13, s14
 801f216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f21a:	d102      	bne.n	801f222 <node_convert_integer+0x27a>
 801f21c:	3d80      	subs	r5, #128	; 0x80
 801f21e:	42b5      	cmp	r5, r6
 801f220:	d07a      	beq.n	801f318 <node_convert_integer+0x370>
 801f222:	b13c      	cbz	r4, 801f234 <node_convert_integer+0x28c>
 801f224:	6863      	ldr	r3, [r4, #4]
 801f226:	2b00      	cmp	r3, #0
 801f228:	f000 80ce 	beq.w	801f3c8 <node_convert_integer+0x420>
 801f22c:	8864      	ldrh	r4, [r4, #2]
 801f22e:	b10c      	cbz	r4, 801f234 <node_convert_integer+0x28c>
 801f230:	685b      	ldr	r3, [r3, #4]
 801f232:	781c      	ldrb	r4, [r3, #0]
 801f234:	f1bc 0f00 	cmp.w	ip, #0
 801f238:	d045      	beq.n	801f2c6 <node_convert_integer+0x31e>
 801f23a:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801f23e:	2d00      	cmp	r5, #0
 801f240:	f000 80bf 	beq.w	801f3c2 <node_convert_integer+0x41a>
 801f244:	f8bc 3002 	ldrh.w	r3, [ip, #2]
 801f248:	2b00      	cmp	r3, #0
 801f24a:	d05f      	beq.n	801f30c <node_convert_integer+0x364>
 801f24c:	686b      	ldr	r3, [r5, #4]
 801f24e:	f993 3000 	ldrsb.w	r3, [r3]
 801f252:	ee07 3a90 	vmov	s15, r3
 801f256:	ee86 6a87 	vdiv.f32	s12, s13, s14
 801f25a:	2a00      	cmp	r2, #0
 801f25c:	f43f af28 	beq.w	801f0b0 <node_convert_integer+0x108>
 801f260:	440a      	add	r2, r1
 801f262:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801f266:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801f26a:	f810 3b01 	ldrb.w	r3, [r0], #1
 801f26e:	eef0 5a47 	vmov.f32	s11, s14
 801f272:	1b1b      	subs	r3, r3, r4
 801f274:	ee07 3a90 	vmov	s15, r3
 801f278:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f27c:	eee7 5a86 	vfma.f32	s11, s15, s12
 801f280:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801f284:	eef0 7a65 	vmov.f32	s15, s11
 801f288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f28c:	bfd4      	ite	le
 801f28e:	ee75 7ae6 	vsuble.f32	s15, s11, s13
 801f292:	ee77 7aa6 	vaddgt.f32	s15, s15, s13
 801f296:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f29a:	ee17 3a90 	vmov	r3, s15
 801f29e:	f303 0307 	ssat	r3, #8, r3
 801f2a2:	f801 3b01 	strb.w	r3, [r1], #1
 801f2a6:	4291      	cmp	r1, r2
 801f2a8:	d1df      	bne.n	801f26a <node_convert_integer+0x2c2>
 801f2aa:	bcf0      	pop	{r4, r5, r6, r7}
 801f2ac:	4770      	bx	lr
 801f2ae:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801f2b2:	e6e4      	b.n	801f07e <node_convert_integer+0xd6>
 801f2b4:	ee07 ca90 	vmov	s15, ip
 801f2b8:	e720      	b.n	801f0fc <node_convert_integer+0x154>
 801f2ba:	4625      	mov	r5, r4
 801f2bc:	e79c      	b.n	801f1f8 <node_convert_integer+0x250>
 801f2be:	2201      	movs	r2, #1
 801f2c0:	e690      	b.n	801efe4 <node_convert_integer+0x3c>
 801f2c2:	4666      	mov	r6, ip
 801f2c4:	e7a5      	b.n	801f212 <node_convert_integer+0x26a>
 801f2c6:	ee07 ca90 	vmov	s15, ip
 801f2ca:	e7c4      	b.n	801f256 <node_convert_integer+0x2ae>
 801f2cc:	46ac      	mov	ip, r5
 801f2ce:	e75a      	b.n	801f186 <node_convert_integer+0x1de>
 801f2d0:	ee07 3a90 	vmov	s15, r3
 801f2d4:	e712      	b.n	801f0fc <node_convert_integer+0x154>
 801f2d6:	46b4      	mov	ip, r6
 801f2d8:	e755      	b.n	801f186 <node_convert_integer+0x1de>
 801f2da:	ee07 5a90 	vmov	s15, r5
 801f2de:	e70d      	b.n	801f0fc <node_convert_integer+0x154>
 801f2e0:	462c      	mov	r4, r5
 801f2e2:	f1bc 0f00 	cmp.w	ip, #0
 801f2e6:	f47f af41 	bne.w	801f16c <node_convert_integer+0x1c4>
 801f2ea:	e74c      	b.n	801f186 <node_convert_integer+0x1de>
 801f2ec:	461c      	mov	r4, r3
 801f2ee:	f1bc 0f00 	cmp.w	ip, #0
 801f2f2:	f47f aef4 	bne.w	801f0de <node_convert_integer+0x136>
 801f2f6:	e7dd      	b.n	801f2b4 <node_convert_integer+0x30c>
 801f2f8:	463e      	mov	r6, r7
 801f2fa:	e78a      	b.n	801f212 <node_convert_integer+0x26a>
 801f2fc:	461c      	mov	r4, r3
 801f2fe:	f1bc 0f00 	cmp.w	ip, #0
 801f302:	f47f aea8 	bne.w	801f056 <node_convert_integer+0xae>
 801f306:	e7d2      	b.n	801f2ae <node_convert_integer+0x306>
 801f308:	4635      	mov	r5, r6
 801f30a:	e775      	b.n	801f1f8 <node_convert_integer+0x250>
 801f30c:	ee07 3a90 	vmov	s15, r3
 801f310:	e7a1      	b.n	801f256 <node_convert_integer+0x2ae>
 801f312:	bf00      	nop
 801f314:	00000000 	.word	0x00000000
 801f318:	2b00      	cmp	r3, #0
 801f31a:	d057      	beq.n	801f3cc <node_convert_integer+0x424>
 801f31c:	009b      	lsls	r3, r3, #2
 801f31e:	460f      	mov	r7, r1
 801f320:	f04f 1680 	mov.w	r6, #8388736	; 0x800080
 801f324:	eb00 0c03 	add.w	ip, r0, r3
 801f328:	f850 4b04 	ldr.w	r4, [r0], #4
 801f32c:	ea4f 2534 	mov.w	r5, r4, ror #8
 801f330:	fa3f f585 	uxtb16	r5, r5
 801f334:	fad5 f506 	ssub16	r5, r5, r6
 801f338:	fa3f f484 	uxtb16	r4, r4
 801f33c:	fad4 f406 	ssub16	r4, r4, r6
 801f340:	022d      	lsls	r5, r5, #8
 801f342:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801f346:	4560      	cmp	r0, ip
 801f348:	f005 25ff 	and.w	r5, r5, #4278255360	; 0xff00ff00
 801f34c:	ea44 0405 	orr.w	r4, r4, r5
 801f350:	f847 4b04 	str.w	r4, [r7], #4
 801f354:	d1e8      	bne.n	801f328 <node_convert_integer+0x380>
 801f356:	4419      	add	r1, r3
 801f358:	f012 0203 	ands.w	r2, r2, #3
 801f35c:	f43f aea8 	beq.w	801f0b0 <node_convert_integer+0x108>
 801f360:	f89c 3000 	ldrb.w	r3, [ip]
 801f364:	2a01      	cmp	r2, #1
 801f366:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 801f36a:	700b      	strb	r3, [r1, #0]
 801f36c:	f43f aea0 	beq.w	801f0b0 <node_convert_integer+0x108>
 801f370:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801f374:	2a03      	cmp	r2, #3
 801f376:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 801f37a:	704b      	strb	r3, [r1, #1]
 801f37c:	f47f ae98 	bne.w	801f0b0 <node_convert_integer+0x108>
 801f380:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801f384:	3b80      	subs	r3, #128	; 0x80
 801f386:	708b      	strb	r3, [r1, #2]
 801f388:	e692      	b.n	801f0b0 <node_convert_integer+0x108>
 801f38a:	b1fb      	cbz	r3, 801f3cc <node_convert_integer+0x424>
 801f38c:	009b      	lsls	r3, r3, #2
 801f38e:	460f      	mov	r7, r1
 801f390:	f04f 1680 	mov.w	r6, #8388736	; 0x800080
 801f394:	eb00 0c03 	add.w	ip, r0, r3
 801f398:	f850 4b04 	ldr.w	r4, [r0], #4
 801f39c:	ea4f 2534 	mov.w	r5, r4, ror #8
 801f3a0:	fa2f f585 	sxtb16	r5, r5
 801f3a4:	fa95 f506 	sadd16	r5, r5, r6
 801f3a8:	fa2f f484 	sxtb16	r4, r4
 801f3ac:	fa94 f406 	sadd16	r4, r4, r6
 801f3b0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801f3b4:	4560      	cmp	r0, ip
 801f3b6:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 801f3ba:	f847 4b04 	str.w	r4, [r7], #4
 801f3be:	d1eb      	bne.n	801f398 <node_convert_integer+0x3f0>
 801f3c0:	e7c9      	b.n	801f356 <node_convert_integer+0x3ae>
 801f3c2:	ee07 5a90 	vmov	s15, r5
 801f3c6:	e746      	b.n	801f256 <node_convert_integer+0x2ae>
 801f3c8:	461c      	mov	r4, r3
 801f3ca:	e733      	b.n	801f234 <node_convert_integer+0x28c>
 801f3cc:	4684      	mov	ip, r0
 801f3ce:	e7c3      	b.n	801f358 <node_convert_integer+0x3b0>

0801f3d0 <core_init>:
 801f3d0:	2001      	movs	r0, #1
 801f3d2:	4770      	bx	lr

0801f3d4 <core_set_error>:
 801f3d4:	4603      	mov	r3, r0
 801f3d6:	7800      	ldrb	r0, [r0, #0]
 801f3d8:	b930      	cbnz	r0, 801f3e8 <core_set_error+0x14>
 801f3da:	7019      	strb	r1, [r3, #0]
 801f3dc:	2001      	movs	r0, #1
 801f3de:	6819      	ldr	r1, [r3, #0]
 801f3e0:	f362 211f 	bfi	r1, r2, #8, #24
 801f3e4:	6019      	str	r1, [r3, #0]
 801f3e6:	4770      	bx	lr
 801f3e8:	2000      	movs	r0, #0
 801f3ea:	4770      	bx	lr

0801f3ec <ai_sum>:
 801f3ec:	edd1 7a00 	vldr	s15, [r1]
 801f3f0:	ed92 7a00 	vldr	s14, [r2]
 801f3f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f3f8:	edc0 7a00 	vstr	s15, [r0]
 801f3fc:	4770      	bx	lr
 801f3fe:	bf00      	nop

0801f400 <ai_sum_buffer_INT8>:
 801f400:	b4f0      	push	{r4, r5, r6, r7}
 801f402:	9d04      	ldr	r5, [sp, #16]
 801f404:	9c08      	ldr	r4, [sp, #32]
 801f406:	ed95 7a00 	vldr	s14, [r5]
 801f40a:	edd4 7a00 	vldr	s15, [r4]
 801f40e:	9d07      	ldr	r5, [sp, #28]
 801f410:	eeb4 7a67 	vcmp.f32	s14, s15
 801f414:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801f416:	e9dd 6705 	ldrd	r6, r7, [sp, #20]
 801f41a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f41e:	ed97 6a00 	vldr	s12, [r7]
 801f422:	f996 6000 	ldrsb.w	r6, [r6]
 801f426:	f995 7000 	ldrsb.w	r7, [r5]
 801f42a:	f994 5000 	ldrsb.w	r5, [r4]
 801f42e:	d118      	bne.n	801f462 <ai_sum_buffer_INT8+0x62>
 801f430:	42ae      	cmp	r6, r5
 801f432:	d116      	bne.n	801f462 <ai_sum_buffer_INT8+0x62>
 801f434:	eeb4 6a67 	vcmp.f32	s12, s15
 801f438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f43c:	d111      	bne.n	801f462 <ai_sum_buffer_INT8+0x62>
 801f43e:	42af      	cmp	r7, r5
 801f440:	d10f      	bne.n	801f462 <ai_sum_buffer_INT8+0x62>
 801f442:	b163      	cbz	r3, 801f45e <ai_sum_buffer_INT8+0x5e>
 801f444:	440b      	add	r3, r1
 801f446:	f911 4b01 	ldrsb.w	r4, [r1], #1
 801f44a:	f912 6b01 	ldrsb.w	r6, [r2], #1
 801f44e:	4434      	add	r4, r6
 801f450:	1b64      	subs	r4, r4, r5
 801f452:	f304 0407 	ssat	r4, #8, r4
 801f456:	428b      	cmp	r3, r1
 801f458:	f800 4b01 	strb.w	r4, [r0], #1
 801f45c:	d1f3      	bne.n	801f446 <ai_sum_buffer_INT8+0x46>
 801f45e:	bcf0      	pop	{r4, r5, r6, r7}
 801f460:	4770      	bx	lr
 801f462:	ee06 5a90 	vmov	s13, r5
 801f466:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801f46a:	2b00      	cmp	r3, #0
 801f46c:	d0f7      	beq.n	801f45e <ai_sum_buffer_INT8+0x5e>
 801f46e:	ee87 5a27 	vdiv.f32	s10, s14, s15
 801f472:	440b      	add	r3, r1
 801f474:	eec6 5a27 	vdiv.f32	s11, s12, s15
 801f478:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801f47c:	f912 5b01 	ldrsb.w	r5, [r2], #1
 801f480:	eef0 4a66 	vmov.f32	s9, s13
 801f484:	f911 4b01 	ldrsb.w	r4, [r1], #1
 801f488:	1bed      	subs	r5, r5, r7
 801f48a:	1ba4      	subs	r4, r4, r6
 801f48c:	ee07 5a90 	vmov	s15, r5
 801f490:	ee07 4a10 	vmov	s14, r4
 801f494:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f498:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f49c:	eee7 4aa5 	vfma.f32	s9, s15, s11
 801f4a0:	eef0 7a64 	vmov.f32	s15, s9
 801f4a4:	eee7 7a05 	vfma.f32	s15, s14, s10
 801f4a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801f4ac:	ee37 7a86 	vadd.f32	s14, s15, s12
 801f4b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f4b4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801f4b8:	dd08      	ble.n	801f4cc <ai_sum_buffer_INT8+0xcc>
 801f4ba:	ee17 4a10 	vmov	r4, s14
 801f4be:	f304 0407 	ssat	r4, #8, r4
 801f4c2:	4299      	cmp	r1, r3
 801f4c4:	f800 4b01 	strb.w	r4, [r0], #1
 801f4c8:	d1d8      	bne.n	801f47c <ai_sum_buffer_INT8+0x7c>
 801f4ca:	e7c8      	b.n	801f45e <ai_sum_buffer_INT8+0x5e>
 801f4cc:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801f4d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f4d4:	ee17 4a90 	vmov	r4, s15
 801f4d8:	f304 0407 	ssat	r4, #8, r4
 801f4dc:	4299      	cmp	r1, r3
 801f4de:	f800 4b01 	strb.w	r4, [r0], #1
 801f4e2:	d1cb      	bne.n	801f47c <ai_sum_buffer_INT8+0x7c>
 801f4e4:	bcf0      	pop	{r4, r5, r6, r7}
 801f4e6:	4770      	bx	lr

0801f4e8 <func_dummy>:
 801f4e8:	4770      	bx	lr
 801f4ea:	bf00      	nop

0801f4ec <forward_conv2d_integer_SSSA_ch>:
 801f4ec:	6983      	ldr	r3, [r0, #24]
 801f4ee:	8819      	ldrh	r1, [r3, #0]
 801f4f0:	2900      	cmp	r1, #0
 801f4f2:	f000 8163 	beq.w	801f7bc <forward_conv2d_integer_SSSA_ch+0x2d0>
 801f4f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f4fa:	685a      	ldr	r2, [r3, #4]
 801f4fc:	b0ad      	sub	sp, #180	; 0xb4
 801f4fe:	6853      	ldr	r3, [r2, #4]
 801f500:	2b00      	cmp	r3, #0
 801f502:	f000 8296 	beq.w	801fa32 <forward_conv2d_integer_SSSA_ch+0x546>
 801f506:	f8d3 e000 	ldr.w	lr, [r3]
 801f50a:	2901      	cmp	r1, #1
 801f50c:	f240 8144 	bls.w	801f798 <forward_conv2d_integer_SSSA_ch+0x2ac>
 801f510:	6913      	ldr	r3, [r2, #16]
 801f512:	2b00      	cmp	r3, #0
 801f514:	f000 8163 	beq.w	801f7de <forward_conv2d_integer_SSSA_ch+0x2f2>
 801f518:	681b      	ldr	r3, [r3, #0]
 801f51a:	9327      	str	r3, [sp, #156]	; 0x9c
 801f51c:	2902      	cmp	r1, #2
 801f51e:	f000 814f 	beq.w	801f7c0 <forward_conv2d_integer_SSSA_ch+0x2d4>
 801f522:	69d3      	ldr	r3, [r2, #28]
 801f524:	2b00      	cmp	r3, #0
 801f526:	f040 813d 	bne.w	801f7a4 <forward_conv2d_integer_SSSA_ch+0x2b8>
 801f52a:	469c      	mov	ip, r3
 801f52c:	f112 0418 	adds.w	r4, r2, #24
 801f530:	d007      	beq.n	801f542 <forward_conv2d_integer_SSSA_ch+0x56>
 801f532:	8b14      	ldrh	r4, [r2, #24]
 801f534:	2c01      	cmp	r4, #1
 801f536:	f240 816b 	bls.w	801f810 <forward_conv2d_integer_SSSA_ch+0x324>
 801f53a:	2b00      	cmp	r3, #0
 801f53c:	f000 8292 	beq.w	801fa64 <forward_conv2d_integer_SSSA_ch+0x578>
 801f540:	685c      	ldr	r4, [r3, #4]
 801f542:	2903      	cmp	r1, #3
 801f544:	f000 812b 	beq.w	801f79e <forward_conv2d_integer_SSSA_ch+0x2b2>
 801f548:	6a41      	ldr	r1, [r0, #36]	; 0x24
 801f54a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 801f54c:	9124      	str	r1, [sp, #144]	; 0x90
 801f54e:	2a00      	cmp	r2, #0
 801f550:	f000 8147 	beq.w	801f7e2 <forward_conv2d_integer_SSSA_ch+0x2f6>
 801f554:	6816      	ldr	r6, [r2, #0]
 801f556:	2900      	cmp	r1, #0
 801f558:	f000 826f 	beq.w	801fa3a <forward_conv2d_integer_SSSA_ch+0x54e>
 801f55c:	f8d2 b004 	ldr.w	fp, [r2, #4]
 801f560:	f8db 100c 	ldr.w	r1, [fp, #12]
 801f564:	f8de 200c 	ldr.w	r2, [lr, #12]
 801f568:	69a5      	ldr	r5, [r4, #24]
 801f56a:	69b4      	ldr	r4, [r6, #24]
 801f56c:	684e      	ldr	r6, [r1, #4]
 801f56e:	6857      	ldr	r7, [r2, #4]
 801f570:	961d      	str	r6, [sp, #116]	; 0x74
 801f572:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 801f574:	fa1f f987 	uxth.w	r9, r7
 801f578:	f8dc a00c 	ldr.w	sl, [ip, #12]
 801f57c:	68ad      	ldr	r5, [r5, #8]
 801f57e:	9723      	str	r7, [sp, #140]	; 0x8c
 801f580:	9522      	str	r5, [sp, #136]	; 0x88
 801f582:	f8bd 7074 	ldrh.w	r7, [sp, #116]	; 0x74
 801f586:	68a5      	ldr	r5, [r4, #8]
 801f588:	68cc      	ldr	r4, [r1, #12]
 801f58a:	6889      	ldr	r1, [r1, #8]
 801f58c:	9713      	str	r7, [sp, #76]	; 0x4c
 801f58e:	9418      	str	r4, [sp, #96]	; 0x60
 801f590:	911e      	str	r1, [sp, #120]	; 0x78
 801f592:	e9d2 2802 	ldrd	r2, r8, [r2, #8]
 801f596:	921f      	str	r2, [sp, #124]	; 0x7c
 801f598:	8832      	ldrh	r2, [r6, #0]
 801f59a:	9221      	str	r2, [sp, #132]	; 0x84
 801f59c:	88b2      	ldrh	r2, [r6, #4]
 801f59e:	921a      	str	r2, [sp, #104]	; 0x68
 801f5a0:	f8da 2008 	ldr.w	r2, [sl, #8]
 801f5a4:	f8da a004 	ldr.w	sl, [sl, #4]
 801f5a8:	921c      	str	r2, [sp, #112]	; 0x70
 801f5aa:	8d02      	ldrh	r2, [r0, #40]	; 0x28
 801f5ac:	9219      	str	r2, [sp, #100]	; 0x64
 801f5ae:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801f5b0:	9220      	str	r2, [sp, #128]	; 0x80
 801f5b2:	69c2      	ldr	r2, [r0, #28]
 801f5b4:	9225      	str	r2, [sp, #148]	; 0x94
 801f5b6:	2b00      	cmp	r3, #0
 801f5b8:	f000 80f7 	beq.w	801f7aa <forward_conv2d_integer_SSSA_ch+0x2be>
 801f5bc:	689e      	ldr	r6, [r3, #8]
 801f5be:	2e00      	cmp	r6, #0
 801f5c0:	f000 80f3 	beq.w	801f7aa <forward_conv2d_integer_SSSA_ch+0x2be>
 801f5c4:	69b3      	ldr	r3, [r6, #24]
 801f5c6:	2b00      	cmp	r3, #0
 801f5c8:	bf08      	it	eq
 801f5ca:	2600      	moveq	r6, #0
 801f5cc:	f8dc 1000 	ldr.w	r1, [ip]
 801f5d0:	f8de 2000 	ldr.w	r2, [lr]
 801f5d4:	f8db 3000 	ldr.w	r3, [fp]
 801f5d8:	9128      	str	r1, [sp, #160]	; 0xa0
 801f5da:	2a00      	cmp	r2, #0
 801f5dc:	f000 80be 	beq.w	801f75c <forward_conv2d_integer_SSSA_ch+0x270>
 801f5e0:	6851      	ldr	r1, [r2, #4]
 801f5e2:	2900      	cmp	r1, #0
 801f5e4:	f000 80ba 	beq.w	801f75c <forward_conv2d_integer_SSSA_ch+0x270>
 801f5e8:	8850      	ldrh	r0, [r2, #2]
 801f5ea:	2800      	cmp	r0, #0
 801f5ec:	f000 80b6 	beq.w	801f75c <forward_conv2d_integer_SSSA_ch+0x270>
 801f5f0:	6809      	ldr	r1, [r1, #0]
 801f5f2:	ed91 0a00 	vldr	s0, [r1]
 801f5f6:	b12b      	cbz	r3, 801f604 <forward_conv2d_integer_SSSA_ch+0x118>
 801f5f8:	6859      	ldr	r1, [r3, #4]
 801f5fa:	b119      	cbz	r1, 801f604 <forward_conv2d_integer_SSSA_ch+0x118>
 801f5fc:	8858      	ldrh	r0, [r3, #2]
 801f5fe:	2800      	cmp	r0, #0
 801f600:	f040 8213 	bne.w	801fa2a <forward_conv2d_integer_SSSA_ch+0x53e>
 801f604:	eddf 0a83 	vldr	s1, [pc, #524]	; 801f814 <forward_conv2d_integer_SSSA_ch+0x328>
 801f608:	991c      	ldr	r1, [sp, #112]	; 0x70
 801f60a:	4551      	cmp	r1, sl
 801f60c:	f040 80a9 	bne.w	801f762 <forward_conv2d_integer_SSSA_ch+0x276>
 801f610:	9919      	ldr	r1, [sp, #100]	; 0x64
 801f612:	9820      	ldr	r0, [sp, #128]	; 0x80
 801f614:	4281      	cmp	r1, r0
 801f616:	f040 80a4 	bne.w	801f762 <forward_conv2d_integer_SSSA_ch+0x276>
 801f61a:	9921      	ldr	r1, [sp, #132]	; 0x84
 801f61c:	981a      	ldr	r0, [sp, #104]	; 0x68
 801f61e:	4281      	cmp	r1, r0
 801f620:	f040 809f 	bne.w	801f762 <forward_conv2d_integer_SSSA_ch+0x276>
 801f624:	991f      	ldr	r1, [sp, #124]	; 0x7c
 801f626:	4588      	cmp	r8, r1
 801f628:	f040 809b 	bne.w	801f762 <forward_conv2d_integer_SSSA_ch+0x276>
 801f62c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801f62e:	981e      	ldr	r0, [sp, #120]	; 0x78
 801f630:	4281      	cmp	r1, r0
 801f632:	bf08      	it	eq
 801f634:	f1b9 0f03 	cmpeq.w	r9, #3
 801f638:	bf0c      	ite	eq
 801f63a:	2401      	moveq	r4, #1
 801f63c:	2400      	movne	r4, #0
 801f63e:	f1ba 0f01 	cmp.w	sl, #1
 801f642:	9414      	str	r4, [sp, #80]	; 0x50
 801f644:	f000 8093 	beq.w	801f76e <forward_conv2d_integer_SSSA_ch+0x282>
 801f648:	2100      	movs	r1, #0
 801f64a:	9114      	str	r1, [sp, #80]	; 0x50
 801f64c:	f8dc 0018 	ldr.w	r0, [ip, #24]
 801f650:	f8de e018 	ldr.w	lr, [lr, #24]
 801f654:	6880      	ldr	r0, [r0, #8]
 801f656:	f8de 7008 	ldr.w	r7, [lr, #8]
 801f65a:	9014      	str	r0, [sp, #80]	; 0x50
 801f65c:	f8db 0018 	ldr.w	r0, [fp, #24]
 801f660:	971b      	str	r7, [sp, #108]	; 0x6c
 801f662:	6880      	ldr	r0, [r0, #8]
 801f664:	9017      	str	r0, [sp, #92]	; 0x5c
 801f666:	2a00      	cmp	r2, #0
 801f668:	f000 8094 	beq.w	801f794 <forward_conv2d_integer_SSSA_ch+0x2a8>
 801f66c:	6850      	ldr	r0, [r2, #4]
 801f66e:	2800      	cmp	r0, #0
 801f670:	f000 81e1 	beq.w	801fa36 <forward_conv2d_integer_SSSA_ch+0x54a>
 801f674:	8852      	ldrh	r2, [r2, #2]
 801f676:	2a00      	cmp	r2, #0
 801f678:	f000 808c 	beq.w	801f794 <forward_conv2d_integer_SSSA_ch+0x2a8>
 801f67c:	6842      	ldr	r2, [r0, #4]
 801f67e:	f992 2000 	ldrsb.w	r2, [r2]
 801f682:	9215      	str	r2, [sp, #84]	; 0x54
 801f684:	b13b      	cbz	r3, 801f696 <forward_conv2d_integer_SSSA_ch+0x1aa>
 801f686:	685a      	ldr	r2, [r3, #4]
 801f688:	2a00      	cmp	r2, #0
 801f68a:	f000 81db 	beq.w	801fa44 <forward_conv2d_integer_SSSA_ch+0x558>
 801f68e:	885b      	ldrh	r3, [r3, #2]
 801f690:	2b00      	cmp	r3, #0
 801f692:	f040 81c5 	bne.w	801fa20 <forward_conv2d_integer_SSSA_ch+0x534>
 801f696:	9316      	str	r3, [sp, #88]	; 0x58
 801f698:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f69a:	2b00      	cmp	r3, #0
 801f69c:	f000 8093 	beq.w	801f7c6 <forward_conv2d_integer_SSSA_ch+0x2da>
 801f6a0:	6858      	ldr	r0, [r3, #4]
 801f6a2:	b100      	cbz	r0, 801f6a6 <forward_conv2d_integer_SSSA_ch+0x1ba>
 801f6a4:	6800      	ldr	r0, [r0, #0]
 801f6a6:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 801f6aa:	9323      	str	r3, [sp, #140]	; 0x8c
 801f6ac:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f6ae:	2b01      	cmp	r3, #1
 801f6b0:	f000 8091 	beq.w	801f7d6 <forward_conv2d_integer_SSSA_ch+0x2ea>
 801f6b4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801f6b6:	4293      	cmp	r3, r2
 801f6b8:	bf0c      	ite	eq
 801f6ba:	2317      	moveq	r3, #23
 801f6bc:	2300      	movne	r3, #0
 801f6be:	9329      	str	r3, [sp, #164]	; 0xa4
 801f6c0:	9f18      	ldr	r7, [sp, #96]	; 0x60
 801f6c2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801f6c4:	f8bd 2074 	ldrh.w	r2, [sp, #116]	; 0x74
 801f6c8:	fb03 f307 	mul.w	r3, r3, r7
 801f6cc:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801f6ce:	921d      	str	r2, [sp, #116]	; 0x74
 801f6d0:	fb02 7303 	mla	r3, r2, r3, r7
 801f6d4:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 801f6d6:	429f      	cmp	r7, r3
 801f6d8:	d26d      	bcs.n	801f7b6 <forward_conv2d_integer_SSSA_ch+0x2ca>
 801f6da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f6dc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801f6de:	fb03 f308 	mul.w	r3, r3, r8
 801f6e2:	fb02 7303 	mla	r3, r2, r3, r7
 801f6e6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801f6e8:	429a      	cmp	r2, r3
 801f6ea:	bf2c      	ite	cs
 801f6ec:	2300      	movcs	r3, #0
 801f6ee:	2301      	movcc	r3, #1
 801f6f0:	9326      	str	r3, [sp, #152]	; 0x98
 801f6f2:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
 801f6f6:	fa1f fa8a 	uxth.w	sl, sl
 801f6fa:	9f25      	ldr	r7, [sp, #148]	; 0x94
 801f6fc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f6fe:	921c      	str	r2, [sp, #112]	; 0x70
 801f700:	2f01      	cmp	r7, #1
 801f702:	fb1a f202 	smulbb	r2, sl, r2
 801f706:	885b      	ldrh	r3, [r3, #2]
 801f708:	b292      	uxth	r2, r2
 801f70a:	d003      	beq.n	801f714 <forward_conv2d_integer_SSSA_ch+0x228>
 801f70c:	46bc      	mov	ip, r7
 801f70e:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 801f710:	45bc      	cmp	ip, r7
 801f712:	d06f      	beq.n	801f7f4 <forward_conv2d_integer_SSSA_ch+0x308>
 801f714:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 801f716:	fb02 f207 	mul.w	r2, r2, r7
 801f71a:	2c00      	cmp	r4, #0
 801f71c:	f040 8194 	bne.w	801fa48 <forward_conv2d_integer_SSSA_ch+0x55c>
 801f720:	2900      	cmp	r1, #0
 801f722:	f000 8191 	beq.w	801fa48 <forward_conv2d_integer_SSSA_ch+0x55c>
 801f726:	0094      	lsls	r4, r2, #2
 801f728:	2b01      	cmp	r3, #1
 801f72a:	d960      	bls.n	801f7ee <forward_conv2d_integer_SSSA_ch+0x302>
 801f72c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801f72e:	0093      	lsls	r3, r2, #2
 801f730:	189a      	adds	r2, r3, r2
 801f732:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 801f736:	18eb      	adds	r3, r5, r3
 801f738:	462a      	mov	r2, r5
 801f73a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801f73c:	9325      	str	r3, [sp, #148]	; 0x94
 801f73e:	f002 f97f 	bl	8021a40 <align_factor_ch>
 801f742:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801f744:	3b15      	subs	r3, #21
 801f746:	e9cd 542a 	strd	r5, r4, [sp, #168]	; 0xa8
 801f74a:	2b03      	cmp	r3, #3
 801f74c:	f200 818c 	bhi.w	801fa68 <forward_conv2d_integer_SSSA_ch+0x57c>
 801f750:	e8df f013 	tbh	[pc, r3, lsl #1]
 801f754:	00e4013d 	.word	0x00e4013d
 801f758:	006200ae 	.word	0x006200ae
 801f75c:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 801f814 <forward_conv2d_integer_SSSA_ch+0x328>
 801f760:	e749      	b.n	801f5f6 <forward_conv2d_integer_SSSA_ch+0x10a>
 801f762:	2400      	movs	r4, #0
 801f764:	f1ba 0f01 	cmp.w	sl, #1
 801f768:	9414      	str	r4, [sp, #80]	; 0x50
 801f76a:	f47f af6d 	bne.w	801f648 <forward_conv2d_integer_SSSA_ch+0x15c>
 801f76e:	991c      	ldr	r1, [sp, #112]	; 0x70
 801f770:	2901      	cmp	r1, #1
 801f772:	f47f af69 	bne.w	801f648 <forward_conv2d_integer_SSSA_ch+0x15c>
 801f776:	9921      	ldr	r1, [sp, #132]	; 0x84
 801f778:	981a      	ldr	r0, [sp, #104]	; 0x68
 801f77a:	4301      	orrs	r1, r0
 801f77c:	f47f af64 	bne.w	801f648 <forward_conv2d_integer_SSSA_ch+0x15c>
 801f780:	9919      	ldr	r1, [sp, #100]	; 0x64
 801f782:	9820      	ldr	r0, [sp, #128]	; 0x80
 801f784:	2901      	cmp	r1, #1
 801f786:	bf08      	it	eq
 801f788:	2801      	cmpeq	r0, #1
 801f78a:	bf0c      	ite	eq
 801f78c:	2101      	moveq	r1, #1
 801f78e:	2100      	movne	r1, #0
 801f790:	9114      	str	r1, [sp, #80]	; 0x50
 801f792:	e75b      	b.n	801f64c <forward_conv2d_integer_SSSA_ch+0x160>
 801f794:	9215      	str	r2, [sp, #84]	; 0x54
 801f796:	e775      	b.n	801f684 <forward_conv2d_integer_SSSA_ch+0x198>
 801f798:	2300      	movs	r3, #0
 801f79a:	685b      	ldr	r3, [r3, #4]
 801f79c:	deff      	udf	#255	; 0xff
 801f79e:	2300      	movs	r3, #0
 801f7a0:	685b      	ldr	r3, [r3, #4]
 801f7a2:	deff      	udf	#255	; 0xff
 801f7a4:	f8d3 c000 	ldr.w	ip, [r3]
 801f7a8:	e6c0      	b.n	801f52c <forward_conv2d_integer_SSSA_ch+0x40>
 801f7aa:	6a06      	ldr	r6, [r0, #32]
 801f7ac:	2e00      	cmp	r6, #0
 801f7ae:	f43f af0d 	beq.w	801f5cc <forward_conv2d_integer_SSSA_ch+0xe0>
 801f7b2:	68b6      	ldr	r6, [r6, #8]
 801f7b4:	e70a      	b.n	801f5cc <forward_conv2d_integer_SSSA_ch+0xe0>
 801f7b6:	2300      	movs	r3, #0
 801f7b8:	9326      	str	r3, [sp, #152]	; 0x98
 801f7ba:	e79a      	b.n	801f6f2 <forward_conv2d_integer_SSSA_ch+0x206>
 801f7bc:	684b      	ldr	r3, [r1, #4]
 801f7be:	deff      	udf	#255	; 0xff
 801f7c0:	2300      	movs	r3, #0
 801f7c2:	685b      	ldr	r3, [r3, #4]
 801f7c4:	deff      	udf	#255	; 0xff
 801f7c6:	4618      	mov	r0, r3
 801f7c8:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 801f7cc:	9323      	str	r3, [sp, #140]	; 0x8c
 801f7ce:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801f7d0:	2b01      	cmp	r3, #1
 801f7d2:	f47f af6f 	bne.w	801f6b4 <forward_conv2d_integer_SSSA_ch+0x1c8>
 801f7d6:	b1a4      	cbz	r4, 801f802 <forward_conv2d_integer_SSSA_ch+0x316>
 801f7d8:	2315      	movs	r3, #21
 801f7da:	9329      	str	r3, [sp, #164]	; 0xa4
 801f7dc:	e770      	b.n	801f6c0 <forward_conv2d_integer_SSSA_ch+0x1d4>
 801f7de:	9327      	str	r3, [sp, #156]	; 0x9c
 801f7e0:	e69c      	b.n	801f51c <forward_conv2d_integer_SSSA_ch+0x30>
 801f7e2:	460b      	mov	r3, r1
 801f7e4:	b909      	cbnz	r1, 801f7ea <forward_conv2d_integer_SSSA_ch+0x2fe>
 801f7e6:	699b      	ldr	r3, [r3, #24]
 801f7e8:	deff      	udf	#255	; 0xff
 801f7ea:	68d3      	ldr	r3, [r2, #12]
 801f7ec:	deff      	udf	#255	; 0xff
 801f7ee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f7f0:	009b      	lsls	r3, r3, #2
 801f7f2:	e7a0      	b.n	801f736 <forward_conv2d_integer_SSSA_ch+0x24a>
 801f7f4:	991d      	ldr	r1, [sp, #116]	; 0x74
 801f7f6:	fb01 f202 	mul.w	r2, r1, r2
 801f7fa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f7fe:	1c54      	adds	r4, r2, #1
 801f800:	e792      	b.n	801f728 <forward_conv2d_integer_SSSA_ch+0x23c>
 801f802:	2900      	cmp	r1, #0
 801f804:	460b      	mov	r3, r1
 801f806:	bf0c      	ite	eq
 801f808:	2318      	moveq	r3, #24
 801f80a:	2316      	movne	r3, #22
 801f80c:	9329      	str	r3, [sp, #164]	; 0xa4
 801f80e:	e757      	b.n	801f6c0 <forward_conv2d_integer_SSSA_ch+0x1d4>
 801f810:	2400      	movs	r4, #0
 801f812:	e696      	b.n	801f542 <forward_conv2d_integer_SSSA_ch+0x56>
 801f814:	00000000 	.word	0x00000000
 801f818:	9f15      	ldr	r7, [sp, #84]	; 0x54
 801f81a:	4653      	mov	r3, sl
 801f81c:	9922      	ldr	r1, [sp, #136]	; 0x88
 801f81e:	4648      	mov	r0, r9
 801f820:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801f822:	9702      	str	r7, [sp, #8]
 801f824:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f826:	9101      	str	r1, [sp, #4]
 801f828:	9400      	str	r4, [sp, #0]
 801f82a:	9914      	ldr	r1, [sp, #80]	; 0x50
 801f82c:	9503      	str	r5, [sp, #12]
 801f82e:	f002 ff39 	bl	80226a4 <st_sssa8_ch_convolve_rank1upd>
 801f832:	970b      	str	r7, [sp, #44]	; 0x2c
 801f834:	9f20      	ldr	r7, [sp, #128]	; 0x80
 801f836:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f838:	9707      	str	r7, [sp, #28]
 801f83a:	9f19      	ldr	r7, [sp, #100]	; 0x64
 801f83c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801f83e:	9706      	str	r7, [sp, #24]
 801f840:	9f21      	ldr	r7, [sp, #132]	; 0x84
 801f842:	9822      	ldr	r0, [sp, #136]	; 0x88
 801f844:	9705      	str	r7, [sp, #20]
 801f846:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801f848:	930d      	str	r3, [sp, #52]	; 0x34
 801f84a:	9704      	str	r7, [sp, #16]
 801f84c:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 801f84e:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
 801f852:	920c      	str	r2, [sp, #48]	; 0x30
 801f854:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801f856:	f8bd 4060 	ldrh.w	r4, [sp, #96]	; 0x60
 801f85a:	930e      	str	r3, [sp, #56]	; 0x38
 801f85c:	464b      	mov	r3, r9
 801f85e:	920a      	str	r2, [sp, #40]	; 0x28
 801f860:	fa1f f288 	uxth.w	r2, r8
 801f864:	9008      	str	r0, [sp, #32]
 801f866:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
 801f86a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801f86c:	9509      	str	r5, [sp, #36]	; 0x24
 801f86e:	e9cd a702 	strd	sl, r7, [sp, #8]
 801f872:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801f874:	9701      	str	r7, [sp, #4]
 801f876:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801f878:	e9cd 450f 	strd	r4, r5, [sp, #60]	; 0x3c
 801f87c:	9700      	str	r7, [sp, #0]
 801f87e:	f002 ff99 	bl	80227b4 <st_sssa8_ch_convolve>
 801f882:	f8db 3008 	ldr.w	r3, [fp, #8]
 801f886:	0a1b      	lsrs	r3, r3, #8
 801f888:	d046      	beq.n	801f918 <forward_conv2d_integer_SSSA_ch+0x42c>
 801f88a:	f8db 100c 	ldr.w	r1, [fp, #12]
 801f88e:	2201      	movs	r2, #1
 801f890:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801f894:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 801f898:	4299      	cmp	r1, r3
 801f89a:	fb00 f202 	mul.w	r2, r0, r2
 801f89e:	d1f9      	bne.n	801f894 <forward_conv2d_integer_SSSA_ch+0x3a8>
 801f8a0:	4633      	mov	r3, r6
 801f8a2:	4659      	mov	r1, fp
 801f8a4:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801f8a6:	9c24      	ldr	r4, [sp, #144]	; 0x90
 801f8a8:	47a0      	blx	r4
 801f8aa:	b02d      	add	sp, #180	; 0xb4
 801f8ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f8b0:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 801f8b4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f8b6:	4652      	mov	r2, sl
 801f8b8:	9500      	str	r5, [sp, #0]
 801f8ba:	f002 f935 	bl	8021b28 <st_sssa8_ch_conv_dw_Wadapt>
 801f8be:	9f20      	ldr	r7, [sp, #128]	; 0x80
 801f8c0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801f8c2:	9707      	str	r7, [sp, #28]
 801f8c4:	9f19      	ldr	r7, [sp, #100]	; 0x64
 801f8c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f8c8:	9706      	str	r7, [sp, #24]
 801f8ca:	9f21      	ldr	r7, [sp, #132]	; 0x84
 801f8cc:	920c      	str	r2, [sp, #48]	; 0x30
 801f8ce:	9705      	str	r7, [sp, #20]
 801f8d0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801f8d2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801f8d4:	9704      	str	r7, [sp, #16]
 801f8d6:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 801f8d8:	9822      	ldr	r0, [sp, #136]	; 0x88
 801f8da:	930d      	str	r3, [sp, #52]	; 0x34
 801f8dc:	920b      	str	r2, [sp, #44]	; 0x2c
 801f8de:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
 801f8e2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801f8e4:	f8bd 4060 	ldrh.w	r4, [sp, #96]	; 0x60
 801f8e8:	930e      	str	r3, [sp, #56]	; 0x38
 801f8ea:	464b      	mov	r3, r9
 801f8ec:	920a      	str	r2, [sp, #40]	; 0x28
 801f8ee:	fa1f f288 	uxth.w	r2, r8
 801f8f2:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
 801f8f6:	9008      	str	r0, [sp, #32]
 801f8f8:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801f8fa:	9509      	str	r5, [sp, #36]	; 0x24
 801f8fc:	e9cd a702 	strd	sl, r7, [sp, #8]
 801f900:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801f902:	9701      	str	r7, [sp, #4]
 801f904:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801f906:	9700      	str	r7, [sp, #0]
 801f908:	e9cd 450f 	strd	r4, r5, [sp, #60]	; 0x3c
 801f90c:	f002 f9c2 	bl	8021c94 <st_sssa8_ch_convolve_dw>
 801f910:	f8db 3008 	ldr.w	r3, [fp, #8]
 801f914:	0a1b      	lsrs	r3, r3, #8
 801f916:	d1b8      	bne.n	801f88a <forward_conv2d_integer_SSSA_ch+0x39e>
 801f918:	2201      	movs	r2, #1
 801f91a:	e7c1      	b.n	801f8a0 <forward_conv2d_integer_SSSA_ch+0x3b4>
 801f91c:	ab2a      	add	r3, sp, #168	; 0xa8
 801f91e:	464a      	mov	r2, r9
 801f920:	e9dd 1013 	ldrd	r1, r0, [sp, #76]	; 0x4c
 801f924:	f004 f890 	bl	8023a48 <st_sssa8_ch_convolve_1x1_WeightsPrefetch>
 801f928:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f92a:	2b00      	cmp	r3, #0
 801f92c:	f040 809d 	bne.w	801fa6a <forward_conv2d_integer_SSSA_ch+0x57e>
 801f930:	fa1f f388 	uxth.w	r3, r8
 801f934:	f8bd 4060 	ldrh.w	r4, [sp, #96]	; 0x60
 801f938:	f04f 0801 	mov.w	r8, #1
 801f93c:	9326      	str	r3, [sp, #152]	; 0x98
 801f93e:	991f      	ldr	r1, [sp, #124]	; 0x7c
 801f940:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801f942:	9513      	str	r5, [sp, #76]	; 0x4c
 801f944:	e9dd 321d 	ldrd	r3, r2, [sp, #116]	; 0x74
 801f948:	fb02 f303 	mul.w	r3, r2, r3
 801f94c:	931d      	str	r3, [sp, #116]	; 0x74
 801f94e:	b28b      	uxth	r3, r1
 801f950:	9328      	str	r3, [sp, #160]	; 0xa0
 801f952:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801f954:	9423      	str	r4, [sp, #140]	; 0x8c
 801f956:	fb03 f301 	mul.w	r3, r3, r1
 801f95a:	931e      	str	r3, [sp, #120]	; 0x78
 801f95c:	b293      	uxth	r3, r2
 801f95e:	931f      	str	r3, [sp, #124]	; 0x7c
 801f960:	2300      	movs	r3, #0
 801f962:	9318      	str	r3, [sp, #96]	; 0x60
 801f964:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801f966:	3301      	adds	r3, #1
 801f968:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801f96a:	9509      	str	r5, [sp, #36]	; 0x24
 801f96c:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801f96e:	940d      	str	r4, [sp, #52]	; 0x34
 801f970:	442c      	add	r4, r5
 801f972:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
 801f976:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 801f978:	9417      	str	r4, [sp, #92]	; 0x5c
 801f97a:	9c22      	ldr	r4, [sp, #136]	; 0x88
 801f97c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801f97e:	9408      	str	r4, [sp, #32]
 801f980:	4664      	mov	r4, ip
 801f982:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801f984:	442c      	add	r4, r5
 801f986:	9825      	ldr	r0, [sp, #148]	; 0x94
 801f988:	910c      	str	r1, [sp, #48]	; 0x30
 801f98a:	941b      	str	r4, [sp, #108]	; 0x6c
 801f98c:	9c20      	ldr	r4, [sp, #128]	; 0x80
 801f98e:	9915      	ldr	r1, [sp, #84]	; 0x54
 801f990:	9407      	str	r4, [sp, #28]
 801f992:	9c19      	ldr	r4, [sp, #100]	; 0x64
 801f994:	9318      	str	r3, [sp, #96]	; 0x60
 801f996:	464b      	mov	r3, r9
 801f998:	9406      	str	r4, [sp, #24]
 801f99a:	9c21      	ldr	r4, [sp, #132]	; 0x84
 801f99c:	920e      	str	r2, [sp, #56]	; 0x38
 801f99e:	9405      	str	r4, [sp, #20]
 801f9a0:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801f9a2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801f9a4:	9404      	str	r4, [sp, #16]
 801f9a6:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801f9a8:	910b      	str	r1, [sp, #44]	; 0x2c
 801f9aa:	900a      	str	r0, [sp, #40]	; 0x28
 801f9ac:	4660      	mov	r0, ip
 801f9ae:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801f9b0:	e9cd a402 	strd	sl, r4, [sp, #8]
 801f9b4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f9b6:	9701      	str	r7, [sp, #4]
 801f9b8:	9400      	str	r4, [sp, #0]
 801f9ba:	ac2a      	add	r4, sp, #168	; 0xa8
 801f9bc:	9410      	str	r4, [sp, #64]	; 0x40
 801f9be:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 801f9c0:	940f      	str	r4, [sp, #60]	; 0x3c
 801f9c2:	f004 f855 	bl	8023a70 <st_sssa8_ch_convolve_1x1>
 801f9c6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801f9c8:	4543      	cmp	r3, r8
 801f9ca:	d3cb      	bcc.n	801f964 <forward_conv2d_integer_SSSA_ch+0x478>
 801f9cc:	e759      	b.n	801f882 <forward_conv2d_integer_SSSA_ch+0x396>
 801f9ce:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f9d0:	4653      	mov	r3, sl
 801f9d2:	9f22      	ldr	r7, [sp, #136]	; 0x88
 801f9d4:	4648      	mov	r0, r9
 801f9d6:	9402      	str	r4, [sp, #8]
 801f9d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f9da:	9914      	ldr	r1, [sp, #80]	; 0x50
 801f9dc:	9503      	str	r5, [sp, #12]
 801f9de:	9701      	str	r7, [sp, #4]
 801f9e0:	f8cd a000 	str.w	sl, [sp]
 801f9e4:	f002 fe5e 	bl	80226a4 <st_sssa8_ch_convolve_rank1upd>
 801f9e8:	9407      	str	r4, [sp, #28]
 801f9ea:	9c19      	ldr	r4, [sp, #100]	; 0x64
 801f9ec:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801f9ee:	9403      	str	r4, [sp, #12]
 801f9f0:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801f9f2:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
 801f9f6:	9825      	ldr	r0, [sp, #148]	; 0x94
 801f9f8:	9109      	str	r1, [sp, #36]	; 0x24
 801f9fa:	9916      	ldr	r1, [sp, #88]	; 0x58
 801f9fc:	920a      	str	r2, [sp, #40]	; 0x28
 801f9fe:	464a      	mov	r2, r9
 801fa00:	9108      	str	r1, [sp, #32]
 801fa02:	fa1f f188 	uxth.w	r1, r8
 801fa06:	9006      	str	r0, [sp, #24]
 801fa08:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801fa0a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801fa0c:	950b      	str	r5, [sp, #44]	; 0x2c
 801fa0e:	e9cd a401 	strd	sl, r4, [sp, #4]
 801fa12:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801fa14:	e9cd 7504 	strd	r7, r5, [sp, #16]
 801fa18:	9400      	str	r4, [sp, #0]
 801fa1a:	f003 fc19 	bl	8023250 <st_sssa8_ch_convolve_rgb>
 801fa1e:	e730      	b.n	801f882 <forward_conv2d_integer_SSSA_ch+0x396>
 801fa20:	6853      	ldr	r3, [r2, #4]
 801fa22:	f993 3000 	ldrsb.w	r3, [r3]
 801fa26:	9316      	str	r3, [sp, #88]	; 0x58
 801fa28:	e636      	b.n	801f698 <forward_conv2d_integer_SSSA_ch+0x1ac>
 801fa2a:	6809      	ldr	r1, [r1, #0]
 801fa2c:	edd1 0a00 	vldr	s1, [r1]
 801fa30:	e5ea      	b.n	801f608 <forward_conv2d_integer_SSSA_ch+0x11c>
 801fa32:	469e      	mov	lr, r3
 801fa34:	e569      	b.n	801f50a <forward_conv2d_integer_SSSA_ch+0x1e>
 801fa36:	9015      	str	r0, [sp, #84]	; 0x54
 801fa38:	e624      	b.n	801f684 <forward_conv2d_integer_SSSA_ch+0x198>
 801fa3a:	4a0f      	ldr	r2, [pc, #60]	; (801fa78 <forward_conv2d_integer_SSSA_ch+0x58c>)
 801fa3c:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 801fa40:	9224      	str	r2, [sp, #144]	; 0x90
 801fa42:	e58d      	b.n	801f560 <forward_conv2d_integer_SSSA_ch+0x74>
 801fa44:	9216      	str	r2, [sp, #88]	; 0x58
 801fa46:	e627      	b.n	801f698 <forward_conv2d_integer_SSSA_ch+0x1ac>
 801fa48:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 801fa4a:	4621      	mov	r1, r4
 801fa4c:	4414      	add	r4, r2
 801fa4e:	fb02 f101 	mul.w	r1, r2, r1
 801fa52:	00a4      	lsls	r4, r4, #2
 801fa54:	004a      	lsls	r2, r1, #1
 801fa56:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 801fa5a:	bfd4      	ite	le
 801fa5c:	18a4      	addle	r4, r4, r2
 801fa5e:	f504 54a0 	addgt.w	r4, r4, #5120	; 0x1400
 801fa62:	e661      	b.n	801f728 <forward_conv2d_integer_SSSA_ch+0x23c>
 801fa64:	461c      	mov	r4, r3
 801fa66:	e56c      	b.n	801f542 <forward_conv2d_integer_SSSA_ch+0x56>
 801fa68:	e7fe      	b.n	801fa68 <forward_conv2d_integer_SSSA_ch+0x57c>
 801fa6a:	f1b8 0f00 	cmp.w	r8, #0
 801fa6e:	f43f af08 	beq.w	801f882 <forward_conv2d_integer_SSSA_ch+0x396>
 801fa72:	9c26      	ldr	r4, [sp, #152]	; 0x98
 801fa74:	e763      	b.n	801f93e <forward_conv2d_integer_SSSA_ch+0x452>
 801fa76:	bf00      	nop
 801fa78:	0801f4e9 	.word	0x0801f4e9

0801fa7c <forward_conv2d_nl_pool_integer_SSSA_ch>:
 801fa7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa80:	6983      	ldr	r3, [r0, #24]
 801fa82:	b0d3      	sub	sp, #332	; 0x14c
 801fa84:	881e      	ldrh	r6, [r3, #0]
 801fa86:	2e00      	cmp	r6, #0
 801fa88:	f000 81b8 	beq.w	801fdfc <forward_conv2d_nl_pool_integer_SSSA_ch+0x380>
 801fa8c:	6859      	ldr	r1, [r3, #4]
 801fa8e:	684d      	ldr	r5, [r1, #4]
 801fa90:	2d00      	cmp	r5, #0
 801fa92:	f000 8361 	beq.w	8020158 <forward_conv2d_nl_pool_integer_SSSA_ch+0x6dc>
 801fa96:	682b      	ldr	r3, [r5, #0]
 801fa98:	9314      	str	r3, [sp, #80]	; 0x50
 801fa9a:	2e01      	cmp	r6, #1
 801fa9c:	f240 81ab 	bls.w	801fdf6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x37a>
 801faa0:	690b      	ldr	r3, [r1, #16]
 801faa2:	2b00      	cmp	r3, #0
 801faa4:	f000 82b3 	beq.w	802000e <forward_conv2d_nl_pool_integer_SSSA_ch+0x592>
 801faa8:	681b      	ldr	r3, [r3, #0]
 801faaa:	9318      	str	r3, [sp, #96]	; 0x60
 801faac:	2e02      	cmp	r6, #2
 801faae:	f000 81a2 	beq.w	801fdf6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x37a>
 801fab2:	69cc      	ldr	r4, [r1, #28]
 801fab4:	2c00      	cmp	r4, #0
 801fab6:	f040 82a8 	bne.w	802000a <forward_conv2d_nl_pool_integer_SSSA_ch+0x58e>
 801faba:	4623      	mov	r3, r4
 801fabc:	f111 0218 	adds.w	r2, r1, #24
 801fac0:	d007      	beq.n	801fad2 <forward_conv2d_nl_pool_integer_SSSA_ch+0x56>
 801fac2:	8b0a      	ldrh	r2, [r1, #24]
 801fac4:	2a01      	cmp	r2, #1
 801fac6:	f240 8373 	bls.w	80201b0 <forward_conv2d_nl_pool_integer_SSSA_ch+0x734>
 801faca:	2c00      	cmp	r4, #0
 801facc:	f000 836e 	beq.w	80201ac <forward_conv2d_nl_pool_integer_SSSA_ch+0x730>
 801fad0:	6862      	ldr	r2, [r4, #4]
 801fad2:	2e03      	cmp	r6, #3
 801fad4:	f000 818f 	beq.w	801fdf6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x37a>
 801fad8:	6a89      	ldr	r1, [r1, #40]	; 0x28
 801fada:	2900      	cmp	r1, #0
 801fadc:	f000 8190 	beq.w	801fe00 <forward_conv2d_nl_pool_integer_SSSA_ch+0x384>
 801fae0:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801fae2:	680d      	ldr	r5, [r1, #0]
 801fae4:	962f      	str	r6, [sp, #188]	; 0xbc
 801fae6:	9515      	str	r5, [sp, #84]	; 0x54
 801fae8:	f8d1 b004 	ldr.w	fp, [r1, #4]
 801faec:	2e00      	cmp	r6, #0
 801faee:	f000 8358 	beq.w	80201a2 <forward_conv2d_nl_pool_integer_SSSA_ch+0x726>
 801faf2:	6889      	ldr	r1, [r1, #8]
 801faf4:	911c      	str	r1, [sp, #112]	; 0x70
 801faf6:	9914      	ldr	r1, [sp, #80]	; 0x50
 801faf8:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
 801fafc:	68cf      	ldr	r7, [r1, #12]
 801fafe:	f8db 100c 	ldr.w	r1, [fp, #12]
 801fb02:	687e      	ldr	r6, [r7, #4]
 801fb04:	6849      	ldr	r1, [r1, #4]
 801fb06:	4635      	mov	r5, r6
 801fb08:	9623      	str	r6, [sp, #140]	; 0x8c
 801fb0a:	9124      	str	r1, [sp, #144]	; 0x90
 801fb0c:	b2ad      	uxth	r5, r5
 801fb0e:	f8de 6000 	ldr.w	r6, [lr]
 801fb12:	f8d0 c02c 	ldr.w	ip, [r0, #44]	; 0x2c
 801fb16:	9519      	str	r5, [sp, #100]	; 0x64
 801fb18:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801fb1a:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 801fb1e:	68e9      	ldr	r1, [r5, #12]
 801fb20:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 801fb24:	f8de 9008 	ldr.w	r9, [lr, #8]
 801fb28:	9513      	str	r5, [sp, #76]	; 0x4c
 801fb2a:	b2b5      	uxth	r5, r6
 801fb2c:	9512      	str	r5, [sp, #72]	; 0x48
 801fb2e:	fa1f f58c 	uxth.w	r5, ip
 801fb32:	951f      	str	r5, [sp, #124]	; 0x7c
 801fb34:	e9d7 5802 	ldrd	r5, r8, [r7, #8]
 801fb38:	952c      	str	r5, [sp, #176]	; 0xb0
 801fb3a:	f8be 5004 	ldrh.w	r5, [lr, #4]
 801fb3e:	9520      	str	r5, [sp, #128]	; 0x80
 801fb40:	68cd      	ldr	r5, [r1, #12]
 801fb42:	6889      	ldr	r1, [r1, #8]
 801fb44:	9530      	str	r5, [sp, #192]	; 0xc0
 801fb46:	9136      	str	r1, [sp, #216]	; 0xd8
 801fb48:	e9da 1701 	ldrd	r1, r7, [sl, #4]
 801fb4c:	911a      	str	r1, [sp, #104]	; 0x68
 801fb4e:	6d41      	ldr	r1, [r0, #84]	; 0x54
 801fb50:	6809      	ldr	r1, [r1, #0]
 801fb52:	9121      	str	r1, [sp, #132]	; 0x84
 801fb54:	6d41      	ldr	r1, [r0, #84]	; 0x54
 801fb56:	6849      	ldr	r1, [r1, #4]
 801fb58:	9139      	str	r1, [sp, #228]	; 0xe4
 801fb5a:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 801fb5c:	911e      	str	r1, [sp, #120]	; 0x78
 801fb5e:	69c1      	ldr	r1, [r0, #28]
 801fb60:	9127      	str	r1, [sp, #156]	; 0x9c
 801fb62:	6c01      	ldr	r1, [r0, #64]	; 0x40
 801fb64:	9137      	str	r1, [sp, #220]	; 0xdc
 801fb66:	6c81      	ldr	r1, [r0, #72]	; 0x48
 801fb68:	9138      	str	r1, [sp, #224]	; 0xe0
 801fb6a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 801fb6c:	9128      	str	r1, [sp, #160]	; 0xa0
 801fb6e:	2c00      	cmp	r4, #0
 801fb70:	f000 8242 	beq.w	801fff8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x57c>
 801fb74:	f8d4 a008 	ldr.w	sl, [r4, #8]
 801fb78:	f1ba 0f00 	cmp.w	sl, #0
 801fb7c:	f000 823c 	beq.w	801fff8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x57c>
 801fb80:	f8da 1018 	ldr.w	r1, [sl, #24]
 801fb84:	2900      	cmp	r1, #0
 801fb86:	bf08      	it	eq
 801fb88:	f04f 0a00 	moveq.w	sl, #0
 801fb8c:	fa1f fe86 	uxth.w	lr, r6
 801fb90:	902d      	str	r0, [sp, #180]	; 0xb4
 801fb92:	9217      	str	r2, [sp, #92]	; 0x5c
 801fb94:	a93f      	add	r1, sp, #252	; 0xfc
 801fb96:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801fb98:	fa1e f089 	uxtah	r0, lr, r9
 801fb9c:	914e      	str	r1, [sp, #312]	; 0x138
 801fb9e:	2400      	movs	r4, #0
 801fba0:	6996      	ldr	r6, [r2, #24]
 801fba2:	4440      	add	r0, r8
 801fba4:	4611      	mov	r1, r2
 801fba6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801fbaa:	1bc5      	subs	r5, r0, r7
 801fbac:	44c6      	add	lr, r8
 801fbae:	924c      	str	r2, [sp, #304]	; 0x130
 801fbb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801fbb4:	9516      	str	r5, [sp, #88]	; 0x58
 801fbb6:	f50d 798e 	add.w	r9, sp, #284	; 0x11c
 801fbba:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801fbbc:	a84b      	add	r0, sp, #300	; 0x12c
 801fbbe:	924d      	str	r2, [sp, #308]	; 0x134
 801fbc0:	f240 4201 	movw	r2, #1025	; 0x401
 801fbc4:	69ad      	ldr	r5, [r5, #24]
 801fbc6:	924f      	str	r2, [sp, #316]	; 0x13c
 801fbc8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801fbca:	931b      	str	r3, [sp, #108]	; 0x6c
 801fbcc:	fa1f f38c 	uxth.w	r3, ip
 801fbd0:	9531      	str	r5, [sp, #196]	; 0xc4
 801fbd2:	f50d 7c86 	add.w	ip, sp, #268	; 0x10c
 801fbd6:	6c55      	ldr	r5, [r2, #68]	; 0x44
 801fbd8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 801fbda:	f8cd e094 	str.w	lr, [sp, #148]	; 0x94
 801fbde:	f8db 8018 	ldr.w	r8, [fp, #24]
 801fbe2:	931d      	str	r3, [sp, #116]	; 0x74
 801fbe4:	944b      	str	r4, [sp, #300]	; 0x12c
 801fbe6:	943f      	str	r4, [sp, #252]	; 0xfc
 801fbe8:	9443      	str	r4, [sp, #268]	; 0x10c
 801fbea:	9440      	str	r4, [sp, #256]	; 0x100
 801fbec:	9441      	str	r4, [sp, #260]	; 0x104
 801fbee:	9444      	str	r4, [sp, #272]	; 0x110
 801fbf0:	9442      	str	r4, [sp, #264]	; 0x108
 801fbf2:	9451      	str	r4, [sp, #324]	; 0x144
 801fbf4:	9445      	str	r4, [sp, #276]	; 0x114
 801fbf6:	9446      	str	r4, [sp, #280]	; 0x118
 801fbf8:	f8cd c140 	str.w	ip, [sp, #320]	; 0x140
 801fbfc:	9529      	str	r5, [sp, #164]	; 0xa4
 801fbfe:	f9bd 4084 	ldrsh.w	r4, [sp, #132]	; 0x84
 801fc02:	923a      	str	r2, [sp, #232]	; 0xe8
 801fc04:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801fc06:	fbb5 fcf3 	udiv	ip, r5, r3
 801fc0a:	f10c 0301 	add.w	r3, ip, #1
 801fc0e:	9326      	str	r3, [sp, #152]	; 0x98
 801fc10:	f006 fa0c 	bl	802602c <core_tensor_clone>
 801fc14:	4648      	mov	r0, r9
 801fc16:	4631      	mov	r1, r6
 801fc18:	f006 fa3a 	bl	8026090 <core_array_clone>
 801fc1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801fc1e:	f8cd 9144 	str.w	r9, [sp, #324]	; 0x144
 801fc22:	6999      	ldr	r1, [r3, #24]
 801fc24:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801fc26:	f8d1 9008 	ldr.w	r9, [r1, #8]
 801fc2a:	6818      	ldr	r0, [r3, #0]
 801fc2c:	f8db 300c 	ldr.w	r3, [fp, #12]
 801fc30:	f8db 1000 	ldr.w	r1, [fp]
 801fc34:	689b      	ldr	r3, [r3, #8]
 801fc36:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801fc38:	932e      	str	r3, [sp, #184]	; 0xb8
 801fc3a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801fc3c:	f8d3 e000 	ldr.w	lr, [r3]
 801fc40:	2800      	cmp	r0, #0
 801fc42:	f000 80df 	beq.w	801fe04 <forward_conv2d_nl_pool_integer_SSSA_ch+0x388>
 801fc46:	f8d0 c004 	ldr.w	ip, [r0, #4]
 801fc4a:	f1bc 0f00 	cmp.w	ip, #0
 801fc4e:	f000 80d9 	beq.w	801fe04 <forward_conv2d_nl_pool_integer_SSSA_ch+0x388>
 801fc52:	8845      	ldrh	r5, [r0, #2]
 801fc54:	2d00      	cmp	r5, #0
 801fc56:	f000 80d5 	beq.w	801fe04 <forward_conv2d_nl_pool_integer_SSSA_ch+0x388>
 801fc5a:	f8dc c000 	ldr.w	ip, [ip]
 801fc5e:	ed9c 0a00 	vldr	s0, [ip]
 801fc62:	2900      	cmp	r1, #0
 801fc64:	f000 80d3 	beq.w	801fe0e <forward_conv2d_nl_pool_integer_SSSA_ch+0x392>
 801fc68:	f8d1 c004 	ldr.w	ip, [r1, #4]
 801fc6c:	f1bc 0f00 	cmp.w	ip, #0
 801fc70:	f000 80cd 	beq.w	801fe0e <forward_conv2d_nl_pool_integer_SSSA_ch+0x392>
 801fc74:	884d      	ldrh	r5, [r1, #2]
 801fc76:	2d00      	cmp	r5, #0
 801fc78:	f000 80c9 	beq.w	801fe0e <forward_conv2d_nl_pool_integer_SSSA_ch+0x392>
 801fc7c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801fc7e:	f8dc c000 	ldr.w	ip, [ip]
 801fc82:	2d01      	cmp	r5, #1
 801fc84:	eddc 0a00 	vldr	s1, [ip]
 801fc88:	f040 80c7 	bne.w	801fe1a <forward_conv2d_nl_pool_integer_SSSA_ch+0x39e>
 801fc8c:	2f01      	cmp	r7, #1
 801fc8e:	f040 80c4 	bne.w	801fe1a <forward_conv2d_nl_pool_integer_SSSA_ch+0x39e>
 801fc92:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801fc94:	46ac      	mov	ip, r5
 801fc96:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801fc98:	ea5c 0505 	orrs.w	r5, ip, r5
 801fc9c:	f040 80bd 	bne.w	801fe1a <forward_conv2d_nl_pool_integer_SSSA_ch+0x39e>
 801fca0:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 801fca2:	46ac      	mov	ip, r5
 801fca4:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 801fca6:	f1bc 0f01 	cmp.w	ip, #1
 801fcaa:	bf08      	it	eq
 801fcac:	2d01      	cmpeq	r5, #1
 801fcae:	bf0c      	ite	eq
 801fcb0:	f04f 0c01 	moveq.w	ip, #1
 801fcb4:	f04f 0c00 	movne.w	ip, #0
 801fcb8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801fcba:	699b      	ldr	r3, [r3, #24]
 801fcbc:	69ad      	ldr	r5, [r5, #24]
 801fcbe:	689b      	ldr	r3, [r3, #8]
 801fcc0:	6992      	ldr	r2, [r2, #24]
 801fcc2:	68ad      	ldr	r5, [r5, #8]
 801fcc4:	9317      	str	r3, [sp, #92]	; 0x5c
 801fcc6:	6893      	ldr	r3, [r2, #8]
 801fcc8:	9535      	str	r5, [sp, #212]	; 0xd4
 801fcca:	9322      	str	r3, [sp, #136]	; 0x88
 801fccc:	2800      	cmp	r0, #0
 801fcce:	f000 81a2 	beq.w	8020016 <forward_conv2d_nl_pool_integer_SSSA_ch+0x59a>
 801fcd2:	6843      	ldr	r3, [r0, #4]
 801fcd4:	2b00      	cmp	r3, #0
 801fcd6:	f000 8262 	beq.w	802019e <forward_conv2d_nl_pool_integer_SSSA_ch+0x722>
 801fcda:	8842      	ldrh	r2, [r0, #2]
 801fcdc:	2a00      	cmp	r2, #0
 801fcde:	f000 8198 	beq.w	8020012 <forward_conv2d_nl_pool_integer_SSSA_ch+0x596>
 801fce2:	685b      	ldr	r3, [r3, #4]
 801fce4:	f993 3000 	ldrsb.w	r3, [r3]
 801fce8:	9315      	str	r3, [sp, #84]	; 0x54
 801fcea:	2900      	cmp	r1, #0
 801fcec:	f000 8182 	beq.w	801fff4 <forward_conv2d_nl_pool_integer_SSSA_ch+0x578>
 801fcf0:	684b      	ldr	r3, [r1, #4]
 801fcf2:	2b00      	cmp	r3, #0
 801fcf4:	f000 8251 	beq.w	802019a <forward_conv2d_nl_pool_integer_SSSA_ch+0x71e>
 801fcf8:	884a      	ldrh	r2, [r1, #2]
 801fcfa:	2a00      	cmp	r2, #0
 801fcfc:	f000 8178 	beq.w	801fff0 <forward_conv2d_nl_pool_integer_SSSA_ch+0x574>
 801fd00:	685b      	ldr	r3, [r3, #4]
 801fd02:	f993 3000 	ldrsb.w	r3, [r3]
 801fd06:	9316      	str	r3, [sp, #88]	; 0x58
 801fd08:	f1be 0f00 	cmp.w	lr, #0
 801fd0c:	f000 816e 	beq.w	801ffec <forward_conv2d_nl_pool_integer_SSSA_ch+0x570>
 801fd10:	f8de 0004 	ldr.w	r0, [lr, #4]
 801fd14:	b100      	cbz	r0, 801fd18 <forward_conv2d_nl_pool_integer_SSSA_ch+0x29c>
 801fd16:	6800      	ldr	r0, [r0, #0]
 801fd18:	b2b9      	uxth	r1, r7
 801fd1a:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 801fd1e:	f8bd 508c 	ldrh.w	r5, [sp, #140]	; 0x8c
 801fd22:	931a      	str	r3, [sp, #104]	; 0x68
 801fd24:	fb13 f301 	smulbb	r3, r3, r1
 801fd28:	9523      	str	r5, [sp, #140]	; 0x8c
 801fd2a:	b29d      	uxth	r5, r3
 801fd2c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801fd2e:	911b      	str	r1, [sp, #108]	; 0x6c
 801fd30:	2b01      	cmp	r3, #1
 801fd32:	f8bd 1090 	ldrh.w	r1, [sp, #144]	; 0x90
 801fd36:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801fd3a:	9114      	str	r1, [sp, #80]	; 0x50
 801fd3c:	f000 8179 	beq.w	8020032 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5b6>
 801fd40:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801fd42:	428b      	cmp	r3, r1
 801fd44:	f000 816c 	beq.w	8020020 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5a4>
 801fd48:	460b      	mov	r3, r1
 801fd4a:	2100      	movs	r1, #0
 801fd4c:	fb05 f303 	mul.w	r3, r5, r3
 801fd50:	912b      	str	r1, [sp, #172]	; 0xac
 801fd52:	9914      	ldr	r1, [sp, #80]	; 0x50
 801fd54:	fb03 f101 	mul.w	r1, r3, r1
 801fd58:	0049      	lsls	r1, r1, #1
 801fd5a:	f5b1 5fa0 	cmp.w	r1, #5120	; 0x1400
 801fd5e:	bfa8      	it	ge
 801fd60:	f44f 51a0 	movge.w	r1, #5120	; 0x1400
 801fd64:	f1bc 0f00 	cmp.w	ip, #0
 801fd68:	f000 8178 	beq.w	802005c <forward_conv2d_nl_pool_integer_SSSA_ch+0x5e0>
 801fd6c:	009d      	lsls	r5, r3, #2
 801fd6e:	2a01      	cmp	r2, #1
 801fd70:	f240 8153 	bls.w	802001a <forward_conv2d_nl_pool_integer_SSSA_ch+0x59e>
 801fd74:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fd76:	0093      	lsls	r3, r2, #2
 801fd78:	189a      	adds	r2, r3, r2
 801fd7a:	eb05 0542 	add.w	r5, r5, r2, lsl #1
 801fd7e:	444b      	add	r3, r9
 801fd80:	464a      	mov	r2, r9
 801fd82:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801fd84:	932a      	str	r3, [sp, #168]	; 0xa8
 801fd86:	f001 fe5b 	bl	8021a40 <align_factor_ch>
 801fd8a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801fd8c:	e9cd 953d 	strd	r9, r5, [sp, #244]	; 0xf4
 801fd90:	2b00      	cmp	r3, #0
 801fd92:	f000 80f6 	beq.w	801ff82 <forward_conv2d_nl_pool_integer_SSSA_ch+0x506>
 801fd96:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801fd98:	2500      	movs	r5, #0
 801fd9a:	991d      	ldr	r1, [sp, #116]	; 0x74
 801fd9c:	4613      	mov	r3, r2
 801fd9e:	982e      	ldr	r0, [sp, #184]	; 0xb8
 801fda0:	9527      	str	r5, [sp, #156]	; 0x9c
 801fda2:	fb03 f301 	mul.w	r3, r3, r1
 801fda6:	9914      	ldr	r1, [sp, #80]	; 0x50
 801fda8:	f8cd a0ec 	str.w	sl, [sp, #236]	; 0xec
 801fdac:	fb01 f100 	mul.w	r1, r1, r0
 801fdb0:	f8dd a0d4 	ldr.w	sl, [sp, #212]	; 0xd4
 801fdb4:	9714      	str	r7, [sp, #80]	; 0x50
 801fdb6:	912e      	str	r1, [sp, #184]	; 0xb8
 801fdb8:	b281      	uxth	r1, r0
 801fdba:	9124      	str	r1, [sp, #144]	; 0x90
 801fdbc:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801fdbe:	9423      	str	r4, [sp, #140]	; 0x8c
 801fdc0:	fb01 f303 	mul.w	r3, r1, r3
 801fdc4:	9333      	str	r3, [sp, #204]	; 0xcc
 801fdc6:	b293      	uxth	r3, r2
 801fdc8:	932c      	str	r3, [sp, #176]	; 0xb0
 801fdca:	fb01 f302 	mul.w	r3, r1, r2
 801fdce:	9334      	str	r3, [sp, #208]	; 0xd0
 801fdd0:	f9bd 30a4 	ldrsh.w	r3, [sp, #164]	; 0xa4
 801fdd4:	9332      	str	r3, [sp, #200]	; 0xc8
 801fdd6:	464b      	mov	r3, r9
 801fdd8:	46a9      	mov	r9, r5
 801fdda:	461d      	mov	r5, r3
 801fddc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fdde:	2b00      	cmp	r3, #0
 801fde0:	dd6b      	ble.n	801feba <forward_conv2d_nl_pool_integer_SSSA_ch+0x43e>
 801fde2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801fde4:	2b17      	cmp	r3, #23
 801fde6:	f000 8188 	beq.w	80200fa <forward_conv2d_nl_pool_integer_SSSA_ch+0x67e>
 801fdea:	2b18      	cmp	r3, #24
 801fdec:	f000 813e 	beq.w	802006c <forward_conv2d_nl_pool_integer_SSSA_ch+0x5f0>
 801fdf0:	2b16      	cmp	r3, #22
 801fdf2:	d015      	beq.n	801fe20 <forward_conv2d_nl_pool_integer_SSSA_ch+0x3a4>
 801fdf4:	e7fe      	b.n	801fdf4 <forward_conv2d_nl_pool_integer_SSSA_ch+0x378>
 801fdf6:	2300      	movs	r3, #0
 801fdf8:	685b      	ldr	r3, [r3, #4]
 801fdfa:	deff      	udf	#255	; 0xff
 801fdfc:	6873      	ldr	r3, [r6, #4]
 801fdfe:	deff      	udf	#255	; 0xff
 801fe00:	68cb      	ldr	r3, [r1, #12]
 801fe02:	deff      	udf	#255	; 0xff
 801fe04:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8020068 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5ec>
 801fe08:	2900      	cmp	r1, #0
 801fe0a:	f47f af2d 	bne.w	801fc68 <forward_conv2d_nl_pool_integer_SSSA_ch+0x1ec>
 801fe0e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801fe10:	eddf 0a95 	vldr	s1, [pc, #596]	; 8020068 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5ec>
 801fe14:	2d01      	cmp	r5, #1
 801fe16:	f43f af39 	beq.w	801fc8c <forward_conv2d_nl_pool_integer_SSSA_ch+0x210>
 801fe1a:	f04f 0c00 	mov.w	ip, #0
 801fe1e:	e74b      	b.n	801fcb8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x23c>
 801fe20:	f1b9 0f00 	cmp.w	r9, #0
 801fe24:	f040 81b6 	bne.w	8020194 <forward_conv2d_nl_pool_integer_SSSA_ch+0x718>
 801fe28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801fe2a:	429c      	cmp	r4, r3
 801fe2c:	ab3d      	add	r3, sp, #244	; 0xf4
 801fe2e:	461f      	mov	r7, r3
 801fe30:	f000 81aa 	beq.w	8020188 <forward_conv2d_nl_pool_integer_SSSA_ch+0x70c>
 801fe34:	9710      	str	r7, [sp, #64]	; 0x40
 801fe36:	2201      	movs	r2, #1
 801fe38:	9924      	ldr	r1, [sp, #144]	; 0x90
 801fe3a:	9f16      	ldr	r7, [sp, #88]	; 0x58
 801fe3c:	920f      	str	r2, [sp, #60]	; 0x3c
 801fe3e:	910e      	str	r1, [sp, #56]	; 0x38
 801fe40:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801fe44:	970c      	str	r7, [sp, #48]	; 0x30
 801fe46:	9f15      	ldr	r7, [sp, #84]	; 0x54
 801fe48:	900d      	str	r0, [sp, #52]	; 0x34
 801fe4a:	4650      	mov	r0, sl
 801fe4c:	970b      	str	r7, [sp, #44]	; 0x2c
 801fe4e:	9f2a      	ldr	r7, [sp, #168]	; 0xa8
 801fe50:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801fe52:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801fe56:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801fe58:	e9cd 5709 	strd	r5, r7, [sp, #36]	; 0x24
 801fe5c:	9f22      	ldr	r7, [sp, #136]	; 0x88
 801fe5e:	9708      	str	r7, [sp, #32]
 801fe60:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 801fe62:	9707      	str	r7, [sp, #28]
 801fe64:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 801fe66:	9706      	str	r7, [sp, #24]
 801fe68:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801fe6a:	9705      	str	r7, [sp, #20]
 801fe6c:	9f20      	ldr	r7, [sp, #128]	; 0x80
 801fe6e:	9704      	str	r7, [sp, #16]
 801fe70:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 801fe72:	9703      	str	r7, [sp, #12]
 801fe74:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801fe76:	9702      	str	r7, [sp, #8]
 801fe78:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801fe7a:	9701      	str	r7, [sp, #4]
 801fe7c:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801fe7e:	9700      	str	r7, [sp, #0]
 801fe80:	f003 fdf6 	bl	8023a70 <st_sssa8_ch_convolve_1x1>
 801fe84:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801fe86:	991d      	ldr	r1, [sp, #116]	; 0x74
 801fe88:	428b      	cmp	r3, r1
 801fe8a:	f000 8122 	beq.w	80200d2 <forward_conv2d_nl_pool_integer_SSSA_ch+0x656>
 801fe8e:	1a5b      	subs	r3, r3, r1
 801fe90:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fe92:	429a      	cmp	r2, r3
 801fe94:	9325      	str	r3, [sp, #148]	; 0x94
 801fe96:	bf28      	it	cs
 801fe98:	461a      	movcs	r2, r3
 801fe9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801fe9c:	9214      	str	r2, [sp, #80]	; 0x50
 801fe9e:	2b00      	cmp	r3, #0
 801fea0:	f040 811e 	bne.w	80200e0 <forward_conv2d_nl_pool_integer_SSSA_ch+0x664>
 801fea4:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801fea6:	449a      	add	sl, r3
 801fea8:	3401      	adds	r4, #1
 801feaa:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 801feac:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801feae:	4659      	mov	r1, fp
 801feb0:	981c      	ldr	r0, [sp, #112]	; 0x70
 801feb2:	b224      	sxth	r4, r4
 801feb4:	9f2f      	ldr	r7, [sp, #188]	; 0xbc
 801feb6:	47b8      	blx	r7
 801feb8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801feba:	3b01      	subs	r3, #1
 801febc:	9326      	str	r3, [sp, #152]	; 0x98
 801febe:	d46c      	bmi.n	801ff9a <forward_conv2d_nl_pool_integer_SSSA_ch+0x51e>
 801fec0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801fec2:	42a3      	cmp	r3, r4
 801fec4:	dc33      	bgt.n	801ff2e <forward_conv2d_nl_pool_integer_SSSA_ch+0x4b2>
 801fec6:	2001      	movs	r0, #1
 801fec8:	f8bd 30a4 	ldrh.w	r3, [sp, #164]	; 0xa4
 801fecc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801fece:	f109 0901 	add.w	r9, r9, #1
 801fed2:	9007      	str	r0, [sp, #28]
 801fed4:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801fed6:	f8bd 10a0 	ldrh.w	r1, [sp, #160]	; 0xa0
 801feda:	9208      	str	r2, [sp, #32]
 801fedc:	1a1a      	subs	r2, r3, r0
 801fede:	f8bd 00d8 	ldrh.w	r0, [sp, #216]	; 0xd8
 801fee2:	1a64      	subs	r4, r4, r1
 801fee4:	f8bd c0e0 	ldrh.w	ip, [sp, #224]	; 0xe0
 801fee8:	b292      	uxth	r2, r2
 801feea:	9301      	str	r3, [sp, #4]
 801feec:	b224      	sxth	r4, r4
 801feee:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 801fef2:	9105      	str	r1, [sp, #20]
 801fef4:	9006      	str	r0, [sp, #24]
 801fef6:	f8bd 10e4 	ldrh.w	r1, [sp, #228]	; 0xe4
 801fefa:	f8bd 00dc 	ldrh.w	r0, [sp, #220]	; 0xdc
 801fefe:	9102      	str	r1, [sp, #8]
 801ff00:	9000      	str	r0, [sp, #0]
 801ff02:	a84b      	add	r0, sp, #300	; 0x12c
 801ff04:	9924      	ldr	r1, [sp, #144]	; 0x90
 801ff06:	9f3a      	ldr	r7, [sp, #232]	; 0xe8
 801ff08:	e9cd 3c03 	strd	r3, ip, [sp, #12]
 801ff0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ff0e:	47b8      	blx	r7
 801ff10:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801ff12:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 801ff14:	f9bd 30a0 	ldrsh.w	r3, [sp, #160]	; 0xa0
 801ff18:	6951      	ldr	r1, [r2, #20]
 801ff1a:	9831      	ldr	r0, [sp, #196]	; 0xc4
 801ff1c:	1afb      	subs	r3, r7, r3
 801ff1e:	68c9      	ldr	r1, [r1, #12]
 801ff20:	6882      	ldr	r2, [r0, #8]
 801ff22:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ff26:	440a      	add	r2, r1
 801ff28:	b21b      	sxth	r3, r3
 801ff2a:	6082      	str	r2, [r0, #8]
 801ff2c:	9323      	str	r3, [sp, #140]	; 0x8c
 801ff2e:	f8db 3014 	ldr.w	r3, [fp, #20]
 801ff32:	f8d8 2008 	ldr.w	r2, [r8, #8]
 801ff36:	68db      	ldr	r3, [r3, #12]
 801ff38:	4413      	add	r3, r2
 801ff3a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801ff3c:	f8c8 3008 	str.w	r3, [r8, #8]
 801ff40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801ff42:	b13a      	cbz	r2, 801ff54 <forward_conv2d_nl_pool_integer_SSSA_ch+0x4d8>
 801ff44:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ff46:	695a      	ldr	r2, [r3, #20]
 801ff48:	68b3      	ldr	r3, [r6, #8]
 801ff4a:	68d2      	ldr	r2, [r2, #12]
 801ff4c:	4413      	add	r3, r2
 801ff4e:	60b3      	str	r3, [r6, #8]
 801ff50:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801ff54:	f8db 1014 	ldr.w	r1, [fp, #20]
 801ff58:	f8db 200c 	ldr.w	r2, [fp, #12]
 801ff5c:	68c8      	ldr	r0, [r1, #12]
 801ff5e:	68d2      	ldr	r2, [r2, #12]
 801ff60:	f8d8 100c 	ldr.w	r1, [r8, #12]
 801ff64:	fb00 1202 	mla	r2, r0, r2, r1
 801ff68:	4293      	cmp	r3, r2
 801ff6a:	d306      	bcc.n	801ff7a <forward_conv2d_nl_pool_integer_SSSA_ch+0x4fe>
 801ff6c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801ff6e:	f8c8 1008 	str.w	r1, [r8, #8]
 801ff72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ff74:	b10b      	cbz	r3, 801ff7a <forward_conv2d_nl_pool_integer_SSSA_ch+0x4fe>
 801ff76:	68f3      	ldr	r3, [r6, #12]
 801ff78:	60b3      	str	r3, [r6, #8]
 801ff7a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801ff7c:	4599      	cmp	r9, r3
 801ff7e:	f4ff af2d 	bcc.w	801fddc <forward_conv2d_nl_pool_integer_SSSA_ch+0x360>
 801ff82:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801ff86:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801ff88:	f8c8 3008 	str.w	r3, [r8, #8]
 801ff8c:	68f3      	ldr	r3, [r6, #12]
 801ff8e:	60b3      	str	r3, [r6, #8]
 801ff90:	68d3      	ldr	r3, [r2, #12]
 801ff92:	6093      	str	r3, [r2, #8]
 801ff94:	b053      	add	sp, #332	; 0x14c
 801ff96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ff9a:	e9d6 2102 	ldrd	r2, r1, [r6, #8]
 801ff9e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801ffa0:	fb03 2314 	mls	r3, r3, r4, r2
 801ffa4:	4299      	cmp	r1, r3
 801ffa6:	d901      	bls.n	801ffac <forward_conv2d_nl_pool_integer_SSSA_ch+0x530>
 801ffa8:	6870      	ldr	r0, [r6, #4]
 801ffaa:	4403      	add	r3, r0
 801ffac:	4299      	cmp	r1, r3
 801ffae:	d212      	bcs.n	801ffd6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x55a>
 801ffb0:	9832      	ldr	r0, [sp, #200]	; 0xc8
 801ffb2:	42a0      	cmp	r0, r4
 801ffb4:	d00f      	beq.n	801ffd6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x55a>
 801ffb6:	6870      	ldr	r0, [r6, #4]
 801ffb8:	4401      	add	r1, r0
 801ffba:	428b      	cmp	r3, r1
 801ffbc:	d20b      	bcs.n	801ffd6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x55a>
 801ffbe:	3a01      	subs	r2, #1
 801ffc0:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801ffc2:	f813 1b01 	ldrb.w	r1, [r3], #1
 801ffc6:	f802 1f01 	strb.w	r1, [r2, #1]!
 801ffca:	68f1      	ldr	r1, [r6, #12]
 801ffcc:	6870      	ldr	r0, [r6, #4]
 801ffce:	4401      	add	r1, r0
 801ffd0:	428b      	cmp	r3, r1
 801ffd2:	d3f6      	bcc.n	801ffc2 <forward_conv2d_nl_pool_integer_SSSA_ch+0x546>
 801ffd4:	9714      	str	r7, [sp, #80]	; 0x50
 801ffd6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ffd8:	b2a4      	uxth	r4, r4
 801ffda:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801ffdc:	4413      	add	r3, r2
 801ffde:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801ffe0:	1b1b      	subs	r3, r3, r4
 801ffe2:	4414      	add	r4, r2
 801ffe4:	b21b      	sxth	r3, r3
 801ffe6:	b224      	sxth	r4, r4
 801ffe8:	9327      	str	r3, [sp, #156]	; 0x9c
 801ffea:	e769      	b.n	801fec0 <forward_conv2d_nl_pool_integer_SSSA_ch+0x444>
 801ffec:	4670      	mov	r0, lr
 801ffee:	e693      	b.n	801fd18 <forward_conv2d_nl_pool_integer_SSSA_ch+0x29c>
 801fff0:	9216      	str	r2, [sp, #88]	; 0x58
 801fff2:	e689      	b.n	801fd08 <forward_conv2d_nl_pool_integer_SSSA_ch+0x28c>
 801fff4:	9116      	str	r1, [sp, #88]	; 0x58
 801fff6:	e687      	b.n	801fd08 <forward_conv2d_nl_pool_integer_SSSA_ch+0x28c>
 801fff8:	f8d0 a020 	ldr.w	sl, [r0, #32]
 801fffc:	f1ba 0f00 	cmp.w	sl, #0
 8020000:	f43f adc4 	beq.w	801fb8c <forward_conv2d_nl_pool_integer_SSSA_ch+0x110>
 8020004:	f8da a008 	ldr.w	sl, [sl, #8]
 8020008:	e5c0      	b.n	801fb8c <forward_conv2d_nl_pool_integer_SSSA_ch+0x110>
 802000a:	6823      	ldr	r3, [r4, #0]
 802000c:	e556      	b.n	801fabc <forward_conv2d_nl_pool_integer_SSSA_ch+0x40>
 802000e:	9318      	str	r3, [sp, #96]	; 0x60
 8020010:	e54c      	b.n	801faac <forward_conv2d_nl_pool_integer_SSSA_ch+0x30>
 8020012:	9215      	str	r2, [sp, #84]	; 0x54
 8020014:	e669      	b.n	801fcea <forward_conv2d_nl_pool_integer_SSSA_ch+0x26e>
 8020016:	9015      	str	r0, [sp, #84]	; 0x54
 8020018:	e667      	b.n	801fcea <forward_conv2d_nl_pool_integer_SSSA_ch+0x26e>
 802001a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802001c:	009b      	lsls	r3, r3, #2
 802001e:	e6ae      	b.n	801fd7e <forward_conv2d_nl_pool_integer_SSSA_ch+0x302>
 8020020:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020022:	fb05 f503 	mul.w	r5, r5, r3
 8020026:	2317      	movs	r3, #23
 8020028:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802002c:	932b      	str	r3, [sp, #172]	; 0xac
 802002e:	3501      	adds	r5, #1
 8020030:	e69d      	b.n	801fd6e <forward_conv2d_nl_pool_integer_SSSA_ch+0x2f2>
 8020032:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020034:	f1bc 0f00 	cmp.w	ip, #0
 8020038:	fb05 f303 	mul.w	r3, r5, r3
 802003c:	bf14      	ite	ne
 802003e:	2516      	movne	r5, #22
 8020040:	2518      	moveq	r5, #24
 8020042:	fb01 f103 	mul.w	r1, r1, r3
 8020046:	952b      	str	r5, [sp, #172]	; 0xac
 8020048:	0049      	lsls	r1, r1, #1
 802004a:	f5b1 5fa0 	cmp.w	r1, #5120	; 0x1400
 802004e:	bfa8      	it	ge
 8020050:	f44f 51a0 	movge.w	r1, #5120	; 0x1400
 8020054:	f1bc 0f00 	cmp.w	ip, #0
 8020058:	f47f ae88 	bne.w	801fd6c <forward_conv2d_nl_pool_integer_SSSA_ch+0x2f0>
 802005c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802005e:	441d      	add	r5, r3
 8020060:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 8020064:	e683      	b.n	801fd6e <forward_conv2d_nl_pool_integer_SSSA_ch+0x2f2>
 8020066:	bf00      	nop
 8020068:	00000000 	.word	0x00000000
 802006c:	f1b9 0f00 	cmp.w	r9, #0
 8020070:	d102      	bne.n	8020078 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5fc>
 8020072:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020074:	429c      	cmp	r4, r3
 8020076:	d079      	beq.n	802016c <forward_conv2d_nl_pool_integer_SSSA_ch+0x6f0>
 8020078:	9924      	ldr	r1, [sp, #144]	; 0x90
 802007a:	2201      	movs	r2, #1
 802007c:	9f16      	ldr	r7, [sp, #88]	; 0x58
 802007e:	920f      	str	r2, [sp, #60]	; 0x3c
 8020080:	910e      	str	r1, [sp, #56]	; 0x38
 8020082:	9510      	str	r5, [sp, #64]	; 0x40
 8020084:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8020088:	970c      	str	r7, [sp, #48]	; 0x30
 802008a:	9f15      	ldr	r7, [sp, #84]	; 0x54
 802008c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802008e:	970b      	str	r7, [sp, #44]	; 0x2c
 8020090:	9f2a      	ldr	r7, [sp, #168]	; 0xa8
 8020092:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8020094:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 8020098:	900d      	str	r0, [sp, #52]	; 0x34
 802009a:	4650      	mov	r0, sl
 802009c:	e9cd 5709 	strd	r5, r7, [sp, #36]	; 0x24
 80200a0:	9f22      	ldr	r7, [sp, #136]	; 0x88
 80200a2:	9708      	str	r7, [sp, #32]
 80200a4:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 80200a6:	9707      	str	r7, [sp, #28]
 80200a8:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 80200aa:	9706      	str	r7, [sp, #24]
 80200ac:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80200ae:	9705      	str	r7, [sp, #20]
 80200b0:	9f20      	ldr	r7, [sp, #128]	; 0x80
 80200b2:	9704      	str	r7, [sp, #16]
 80200b4:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80200b6:	9703      	str	r7, [sp, #12]
 80200b8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80200ba:	9702      	str	r7, [sp, #8]
 80200bc:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 80200be:	9701      	str	r7, [sp, #4]
 80200c0:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 80200c2:	9700      	str	r7, [sp, #0]
 80200c4:	f002 fb76 	bl	80227b4 <st_sssa8_ch_convolve>
 80200c8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80200ca:	991d      	ldr	r1, [sp, #116]	; 0x74
 80200cc:	428b      	cmp	r3, r1
 80200ce:	f47f aede 	bne.w	801fe8e <forward_conv2d_nl_pool_integer_SSSA_ch+0x412>
 80200d2:	2300      	movs	r3, #0
 80200d4:	9314      	str	r3, [sp, #80]	; 0x50
 80200d6:	9325      	str	r3, [sp, #148]	; 0x94
 80200d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80200da:	2b00      	cmp	r3, #0
 80200dc:	f43f aee2 	beq.w	801fea4 <forward_conv2d_nl_pool_integer_SSSA_ch+0x428>
 80200e0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80200e2:	1a9b      	subs	r3, r3, r2
 80200e4:	d504      	bpl.n	80200f0 <forward_conv2d_nl_pool_integer_SSSA_ch+0x674>
 80200e6:	9912      	ldr	r1, [sp, #72]	; 0x48
 80200e8:	1a52      	subs	r2, r2, r1
 80200ea:	9934      	ldr	r1, [sp, #208]	; 0xd0
 80200ec:	fb01 aa02 	mla	sl, r1, r2, sl
 80200f0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80200f4:	b29b      	uxth	r3, r3
 80200f6:	9312      	str	r3, [sp, #72]	; 0x48
 80200f8:	e6d6      	b.n	801fea8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x42c>
 80200fa:	f1b9 0f00 	cmp.w	r9, #0
 80200fe:	d102      	bne.n	8020106 <forward_conv2d_nl_pool_integer_SSSA_ch+0x68a>
 8020100:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020102:	429c      	cmp	r4, r3
 8020104:	d02a      	beq.n	802015c <forward_conv2d_nl_pool_integer_SSSA_ch+0x6e0>
 8020106:	9924      	ldr	r1, [sp, #144]	; 0x90
 8020108:	2201      	movs	r2, #1
 802010a:	9f16      	ldr	r7, [sp, #88]	; 0x58
 802010c:	920f      	str	r2, [sp, #60]	; 0x3c
 802010e:	910e      	str	r1, [sp, #56]	; 0x38
 8020110:	9510      	str	r5, [sp, #64]	; 0x40
 8020112:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8020116:	970c      	str	r7, [sp, #48]	; 0x30
 8020118:	9f15      	ldr	r7, [sp, #84]	; 0x54
 802011a:	900d      	str	r0, [sp, #52]	; 0x34
 802011c:	4650      	mov	r0, sl
 802011e:	970b      	str	r7, [sp, #44]	; 0x2c
 8020120:	9f2a      	ldr	r7, [sp, #168]	; 0xa8
 8020122:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020124:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 8020128:	992c      	ldr	r1, [sp, #176]	; 0xb0
 802012a:	e9cd 5709 	strd	r5, r7, [sp, #36]	; 0x24
 802012e:	9f22      	ldr	r7, [sp, #136]	; 0x88
 8020130:	9708      	str	r7, [sp, #32]
 8020132:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8020134:	9707      	str	r7, [sp, #28]
 8020136:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8020138:	9706      	str	r7, [sp, #24]
 802013a:	9f12      	ldr	r7, [sp, #72]	; 0x48
 802013c:	9705      	str	r7, [sp, #20]
 802013e:	9f20      	ldr	r7, [sp, #128]	; 0x80
 8020140:	9704      	str	r7, [sp, #16]
 8020142:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8020144:	9703      	str	r7, [sp, #12]
 8020146:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8020148:	9702      	str	r7, [sp, #8]
 802014a:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 802014c:	9701      	str	r7, [sp, #4]
 802014e:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8020150:	9700      	str	r7, [sp, #0]
 8020152:	f001 fd9f 	bl	8021c94 <st_sssa8_ch_convolve_dw>
 8020156:	e695      	b.n	801fe84 <forward_conv2d_nl_pool_integer_SSSA_ch+0x408>
 8020158:	9514      	str	r5, [sp, #80]	; 0x50
 802015a:	e49e      	b.n	801fa9a <forward_conv2d_nl_pool_integer_SSSA_ch+0x1e>
 802015c:	9500      	str	r5, [sp, #0]
 802015e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8020160:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8020162:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8020166:	f001 fcdf 	bl	8021b28 <st_sssa8_ch_conv_dw_Wadapt>
 802016a:	e7cc      	b.n	8020106 <forward_conv2d_nl_pool_integer_SSSA_ch+0x68a>
 802016c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802016e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8020170:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8020172:	9202      	str	r2, [sp, #8]
 8020174:	9101      	str	r1, [sp, #4]
 8020176:	9000      	str	r0, [sp, #0]
 8020178:	9503      	str	r5, [sp, #12]
 802017a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 802017c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802017e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8020180:	9819      	ldr	r0, [sp, #100]	; 0x64
 8020182:	f002 fa8f 	bl	80226a4 <st_sssa8_ch_convolve_rank1upd>
 8020186:	e777      	b.n	8020078 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5fc>
 8020188:	9a19      	ldr	r2, [sp, #100]	; 0x64
 802018a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 802018c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 802018e:	f003 fc5b 	bl	8023a48 <st_sssa8_ch_convolve_1x1_WeightsPrefetch>
 8020192:	e64f      	b.n	801fe34 <forward_conv2d_nl_pool_integer_SSSA_ch+0x3b8>
 8020194:	ab3d      	add	r3, sp, #244	; 0xf4
 8020196:	461f      	mov	r7, r3
 8020198:	e64c      	b.n	801fe34 <forward_conv2d_nl_pool_integer_SSSA_ch+0x3b8>
 802019a:	9316      	str	r3, [sp, #88]	; 0x58
 802019c:	e5b4      	b.n	801fd08 <forward_conv2d_nl_pool_integer_SSSA_ch+0x28c>
 802019e:	9315      	str	r3, [sp, #84]	; 0x54
 80201a0:	e5a3      	b.n	801fcea <forward_conv2d_nl_pool_integer_SSSA_ch+0x26e>
 80201a2:	4904      	ldr	r1, [pc, #16]	; (80201b4 <forward_conv2d_nl_pool_integer_SSSA_ch+0x738>)
 80201a4:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
 80201a8:	912f      	str	r1, [sp, #188]	; 0xbc
 80201aa:	e4a4      	b.n	801faf6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x7a>
 80201ac:	4622      	mov	r2, r4
 80201ae:	e490      	b.n	801fad2 <forward_conv2d_nl_pool_integer_SSSA_ch+0x56>
 80201b0:	2200      	movs	r2, #0
 80201b2:	e48e      	b.n	801fad2 <forward_conv2d_nl_pool_integer_SSSA_ch+0x56>
 80201b4:	0801f4e9 	.word	0x0801f4e9

080201b8 <forward_dense_integer_SSSA>:
 80201b8:	6983      	ldr	r3, [r0, #24]
 80201ba:	8818      	ldrh	r0, [r3, #0]
 80201bc:	2800      	cmp	r0, #0
 80201be:	f000 80a4 	beq.w	802030a <forward_dense_integer_SSSA+0x152>
 80201c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201c6:	ed2d 8b02 	vpush	{d8}
 80201ca:	685c      	ldr	r4, [r3, #4]
 80201cc:	b093      	sub	sp, #76	; 0x4c
 80201ce:	6862      	ldr	r2, [r4, #4]
 80201d0:	b102      	cbz	r2, 80201d4 <forward_dense_integer_SSSA+0x1c>
 80201d2:	6812      	ldr	r2, [r2, #0]
 80201d4:	2801      	cmp	r0, #1
 80201d6:	f240 808f 	bls.w	80202f8 <forward_dense_integer_SSSA+0x140>
 80201da:	6923      	ldr	r3, [r4, #16]
 80201dc:	b103      	cbz	r3, 80201e0 <forward_dense_integer_SSSA+0x28>
 80201de:	681b      	ldr	r3, [r3, #0]
 80201e0:	2802      	cmp	r0, #2
 80201e2:	f000 808f 	beq.w	8020304 <forward_dense_integer_SSSA+0x14c>
 80201e6:	69e5      	ldr	r5, [r4, #28]
 80201e8:	2d00      	cmp	r5, #0
 80201ea:	f000 80e1 	beq.w	80203b0 <forward_dense_integer_SSSA+0x1f8>
 80201ee:	6829      	ldr	r1, [r5, #0]
 80201f0:	f114 0618 	adds.w	r6, r4, #24
 80201f4:	d007      	beq.n	8020206 <forward_dense_integer_SSSA+0x4e>
 80201f6:	8b26      	ldrh	r6, [r4, #24]
 80201f8:	2e01      	cmp	r6, #1
 80201fa:	f240 80c7 	bls.w	802038c <forward_dense_integer_SSSA+0x1d4>
 80201fe:	2d00      	cmp	r5, #0
 8020200:	f000 80bb 	beq.w	802037a <forward_dense_integer_SSSA+0x1c2>
 8020204:	686e      	ldr	r6, [r5, #4]
 8020206:	2803      	cmp	r0, #3
 8020208:	d079      	beq.n	80202fe <forward_dense_integer_SSSA+0x146>
 802020a:	69b7      	ldr	r7, [r6, #24]
 802020c:	68d8      	ldr	r0, [r3, #12]
 802020e:	68bf      	ldr	r7, [r7, #8]
 8020210:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8020212:	68c5      	ldr	r5, [r0, #12]
 8020214:	68d4      	ldr	r4, [r2, #12]
 8020216:	970f      	str	r7, [sp, #60]	; 0x3c
 8020218:	6887      	ldr	r7, [r0, #8]
 802021a:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 802021e:	fb07 f505 	mul.w	r5, r7, r5
 8020222:	f8b0 b004 	ldrh.w	fp, [r0, #4]
 8020226:	699c      	ldr	r4, [r3, #24]
 8020228:	6997      	ldr	r7, [r2, #24]
 802022a:	2e00      	cmp	r6, #0
 802022c:	f000 80c6 	beq.w	80203bc <forward_dense_integer_SSSA+0x204>
 8020230:	6830      	ldr	r0, [r6, #0]
 8020232:	2800      	cmp	r0, #0
 8020234:	f000 8093 	beq.w	802035e <forward_dense_integer_SSSA+0x1a6>
 8020238:	6980      	ldr	r0, [r0, #24]
 802023a:	6880      	ldr	r0, [r0, #8]
 802023c:	900c      	str	r0, [sp, #48]	; 0x30
 802023e:	68a0      	ldr	r0, [r4, #8]
 8020240:	6816      	ldr	r6, [r2, #0]
 8020242:	698a      	ldr	r2, [r1, #24]
 8020244:	681b      	ldr	r3, [r3, #0]
 8020246:	f8d7 a008 	ldr.w	sl, [r7, #8]
 802024a:	900d      	str	r0, [sp, #52]	; 0x34
 802024c:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8020250:	680c      	ldr	r4, [r1, #0]
 8020252:	2e00      	cmp	r6, #0
 8020254:	d062      	beq.n	802031c <forward_dense_integer_SSSA+0x164>
 8020256:	6870      	ldr	r0, [r6, #4]
 8020258:	4607      	mov	r7, r0
 802025a:	2800      	cmp	r0, #0
 802025c:	d057      	beq.n	802030e <forward_dense_integer_SSSA+0x156>
 802025e:	8871      	ldrh	r1, [r6, #2]
 8020260:	2900      	cmp	r1, #0
 8020262:	d07e      	beq.n	8020362 <forward_dense_integer_SSSA+0x1aa>
 8020264:	6802      	ldr	r2, [r0, #0]
 8020266:	ed92 8a00 	vldr	s16, [r2]
 802026a:	2b00      	cmp	r3, #0
 802026c:	f000 809b 	beq.w	80203a6 <forward_dense_integer_SSSA+0x1ee>
 8020270:	6859      	ldr	r1, [r3, #4]
 8020272:	2900      	cmp	r1, #0
 8020274:	d07a      	beq.n	802036c <forward_dense_integer_SSSA+0x1b4>
 8020276:	8858      	ldrh	r0, [r3, #2]
 8020278:	2800      	cmp	r0, #0
 802027a:	d059      	beq.n	8020330 <forward_dense_integer_SSSA+0x178>
 802027c:	680a      	ldr	r2, [r1, #0]
 802027e:	edd2 8a00 	vldr	s17, [r2]
 8020282:	2e00      	cmp	r6, #0
 8020284:	f040 8084 	bne.w	8020390 <forward_dense_integer_SSSA+0x1d8>
 8020288:	684b      	ldr	r3, [r1, #4]
 802028a:	f993 3000 	ldrsb.w	r3, [r3]
 802028e:	930e      	str	r3, [sp, #56]	; 0x38
 8020290:	b114      	cbz	r4, 8020298 <forward_dense_integer_SSSA+0xe0>
 8020292:	6864      	ldr	r4, [r4, #4]
 8020294:	b104      	cbz	r4, 8020298 <forward_dense_integer_SSSA+0xe0>
 8020296:	6824      	ldr	r4, [r4, #0]
 8020298:	2700      	movs	r7, #0
 802029a:	4640      	mov	r0, r8
 802029c:	f000 fc90 	bl	8020bc0 <arm_fully_connected_s8_get_buffer_size>
 80202a0:	4620      	mov	r0, r4
 80202a2:	eef0 0a68 	vmov.f32	s1, s17
 80202a6:	ab10      	add	r3, sp, #64	; 0x40
 80202a8:	eeb0 0a48 	vmov.f32	s0, s16
 80202ac:	aa11      	add	r2, sp, #68	; 0x44
 80202ae:	2101      	movs	r1, #1
 80202b0:	247f      	movs	r4, #127	; 0x7f
 80202b2:	e9cd 7710 	strd	r7, r7, [sp, #64]	; 0x40
 80202b6:	f001 fb55 	bl	8021964 <align_factor_cmsisnn>
 80202ba:	9702      	str	r7, [sp, #8]
 80202bc:	b2a9      	uxth	r1, r5
 80202be:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80202c0:	f06f 057f 	mvn.w	r5, #127	; 0x7f
 80202c4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80202c6:	9707      	str	r7, [sp, #28]
 80202c8:	465b      	mov	r3, fp
 80202ca:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80202cc:	4642      	mov	r2, r8
 80202ce:	9100      	str	r1, [sp, #0]
 80202d0:	4649      	mov	r1, r9
 80202d2:	9706      	str	r7, [sp, #24]
 80202d4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80202d6:	900a      	str	r0, [sp, #40]	; 0x28
 80202d8:	4650      	mov	r0, sl
 80202da:	9705      	str	r7, [sp, #20]
 80202dc:	9601      	str	r6, [sp, #4]
 80202de:	e9cd 5408 	strd	r5, r4, [sp, #32]
 80202e2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80202e4:	9404      	str	r4, [sp, #16]
 80202e6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80202e8:	9403      	str	r4, [sp, #12]
 80202ea:	f000 fc3b 	bl	8020b64 <arm_fully_connected_s8>
 80202ee:	b013      	add	sp, #76	; 0x4c
 80202f0:	ecbd 8b02 	vpop	{d8}
 80202f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80202f8:	2300      	movs	r3, #0
 80202fa:	685b      	ldr	r3, [r3, #4]
 80202fc:	deff      	udf	#255	; 0xff
 80202fe:	2300      	movs	r3, #0
 8020300:	685b      	ldr	r3, [r3, #4]
 8020302:	deff      	udf	#255	; 0xff
 8020304:	2300      	movs	r3, #0
 8020306:	685b      	ldr	r3, [r3, #4]
 8020308:	deff      	udf	#255	; 0xff
 802030a:	6843      	ldr	r3, [r0, #4]
 802030c:	deff      	udf	#255	; 0xff
 802030e:	2b00      	cmp	r3, #0
 8020310:	d035      	beq.n	802037e <forward_dense_integer_SSSA+0x1c6>
 8020312:	6859      	ldr	r1, [r3, #4]
 8020314:	b939      	cbnz	r1, 8020326 <forward_dense_integer_SSSA+0x16e>
 8020316:	ed9f 8a2a 	vldr	s16, [pc, #168]	; 80203c0 <forward_dense_integer_SSSA+0x208>
 802031a:	e00c      	b.n	8020336 <forward_dense_integer_SSSA+0x17e>
 802031c:	2b00      	cmp	r3, #0
 802031e:	d02e      	beq.n	802037e <forward_dense_integer_SSSA+0x1c6>
 8020320:	6859      	ldr	r1, [r3, #4]
 8020322:	2900      	cmp	r1, #0
 8020324:	d039      	beq.n	802039a <forward_dense_integer_SSSA+0x1e2>
 8020326:	8858      	ldrh	r0, [r3, #2]
 8020328:	ed9f 8a25 	vldr	s16, [pc, #148]	; 80203c0 <forward_dense_integer_SSSA+0x208>
 802032c:	2800      	cmp	r0, #0
 802032e:	d1a5      	bne.n	802027c <forward_dense_integer_SSSA+0xc4>
 8020330:	2e00      	cmp	r6, #0
 8020332:	d035      	beq.n	80203a0 <forward_dense_integer_SSSA+0x1e8>
 8020334:	6870      	ldr	r0, [r6, #4]
 8020336:	4607      	mov	r7, r0
 8020338:	2800      	cmp	r0, #0
 802033a:	d03b      	beq.n	80203b4 <forward_dense_integer_SSSA+0x1fc>
 802033c:	eddf 8a20 	vldr	s17, [pc, #128]	; 80203c0 <forward_dense_integer_SSSA+0x208>
 8020340:	8876      	ldrh	r6, [r6, #2]
 8020342:	b12e      	cbz	r6, 8020350 <forward_dense_integer_SSSA+0x198>
 8020344:	687a      	ldr	r2, [r7, #4]
 8020346:	f992 6000 	ldrsb.w	r6, [r2]
 802034a:	4276      	negs	r6, r6
 802034c:	b12b      	cbz	r3, 802035a <forward_dense_integer_SSSA+0x1a2>
 802034e:	6859      	ldr	r1, [r3, #4]
 8020350:	b151      	cbz	r1, 8020368 <forward_dense_integer_SSSA+0x1b0>
 8020352:	8858      	ldrh	r0, [r3, #2]
 8020354:	2800      	cmp	r0, #0
 8020356:	d197      	bne.n	8020288 <forward_dense_integer_SSSA+0xd0>
 8020358:	2300      	movs	r3, #0
 802035a:	930e      	str	r3, [sp, #56]	; 0x38
 802035c:	e798      	b.n	8020290 <forward_dense_integer_SSSA+0xd8>
 802035e:	900c      	str	r0, [sp, #48]	; 0x30
 8020360:	e76d      	b.n	802023e <forward_dense_integer_SSSA+0x86>
 8020362:	ed9f 8a17 	vldr	s16, [pc, #92]	; 80203c0 <forward_dense_integer_SSSA+0x208>
 8020366:	e780      	b.n	802026a <forward_dense_integer_SSSA+0xb2>
 8020368:	910e      	str	r1, [sp, #56]	; 0x38
 802036a:	e791      	b.n	8020290 <forward_dense_integer_SSSA+0xd8>
 802036c:	2e00      	cmp	r6, #0
 802036e:	d1e2      	bne.n	8020336 <forward_dense_integer_SSSA+0x17e>
 8020370:	2600      	movs	r6, #0
 8020372:	eddf 8a13 	vldr	s17, [pc, #76]	; 80203c0 <forward_dense_integer_SSSA+0x208>
 8020376:	960e      	str	r6, [sp, #56]	; 0x38
 8020378:	e78a      	b.n	8020290 <forward_dense_integer_SSSA+0xd8>
 802037a:	462e      	mov	r6, r5
 802037c:	e743      	b.n	8020206 <forward_dense_integer_SSSA+0x4e>
 802037e:	ed9f 8a10 	vldr	s16, [pc, #64]	; 80203c0 <forward_dense_integer_SSSA+0x208>
 8020382:	461e      	mov	r6, r3
 8020384:	930e      	str	r3, [sp, #56]	; 0x38
 8020386:	eef0 8a48 	vmov.f32	s17, s16
 802038a:	e781      	b.n	8020290 <forward_dense_integer_SSSA+0xd8>
 802038c:	2600      	movs	r6, #0
 802038e:	e73a      	b.n	8020206 <forward_dense_integer_SSSA+0x4e>
 8020390:	6877      	ldr	r7, [r6, #4]
 8020392:	2f00      	cmp	r7, #0
 8020394:	d1d4      	bne.n	8020340 <forward_dense_integer_SSSA+0x188>
 8020396:	463e      	mov	r6, r7
 8020398:	e7dc      	b.n	8020354 <forward_dense_integer_SSSA+0x19c>
 802039a:	ed9f 8a09 	vldr	s16, [pc, #36]	; 80203c0 <forward_dense_integer_SSSA+0x208>
 802039e:	e7e7      	b.n	8020370 <forward_dense_integer_SSSA+0x1b8>
 80203a0:	eddf 8a07 	vldr	s17, [pc, #28]	; 80203c0 <forward_dense_integer_SSSA+0x208>
 80203a4:	e7d8      	b.n	8020358 <forward_dense_integer_SSSA+0x1a0>
 80203a6:	2900      	cmp	r1, #0
 80203a8:	d0e2      	beq.n	8020370 <forward_dense_integer_SSSA+0x1b8>
 80203aa:	eddf 8a05 	vldr	s17, [pc, #20]	; 80203c0 <forward_dense_integer_SSSA+0x208>
 80203ae:	e7c9      	b.n	8020344 <forward_dense_integer_SSSA+0x18c>
 80203b0:	4629      	mov	r1, r5
 80203b2:	e71d      	b.n	80201f0 <forward_dense_integer_SSSA+0x38>
 80203b4:	4606      	mov	r6, r0
 80203b6:	eddf 8a02 	vldr	s17, [pc, #8]	; 80203c0 <forward_dense_integer_SSSA+0x208>
 80203ba:	e7c9      	b.n	8020350 <forward_dense_integer_SSSA+0x198>
 80203bc:	960c      	str	r6, [sp, #48]	; 0x30
 80203be:	e73e      	b.n	802023e <forward_dense_integer_SSSA+0x86>
 80203c0:	00000000 	.word	0x00000000

080203c4 <nl_func_sm_array_f32>:
 80203c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80203c8:	ed2d 8b04 	vpush	{d8-d9}
 80203cc:	b089      	sub	sp, #36	; 0x24
 80203ce:	698f      	ldr	r7, [r1, #24]
 80203d0:	6986      	ldr	r6, [r0, #24]
 80203d2:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 80203d6:	68bd      	ldr	r5, [r7, #8]
 80203d8:	eba2 040e 	sub.w	r4, r2, lr
 80203dc:	f8dd c05c 	ldr.w	ip, [sp, #92]	; 0x5c
 80203e0:	9602      	str	r6, [sp, #8]
 80203e2:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 80203e6:	68fc      	ldr	r4, [r7, #12]
 80203e8:	68b6      	ldr	r6, [r6, #8]
 80203ea:	eba2 020c 	sub.w	r2, r2, ip
 80203ee:	42a5      	cmp	r5, r4
 80203f0:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 80203f4:	d351      	bcc.n	802049a <nl_func_sm_array_f32+0xd6>
 80203f6:	9303      	str	r3, [sp, #12]
 80203f8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80203fc:	009b      	lsls	r3, r3, #2
 80203fe:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8020402:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8020406:	f1ce 0200 	rsb	r2, lr, #0
 802040a:	9301      	str	r3, [sp, #4]
 802040c:	f1cc 0300 	rsb	r3, ip, #0
 8020410:	9204      	str	r2, [sp, #16]
 8020412:	e9cd 1006 	strd	r1, r0, [sp, #24]
 8020416:	9305      	str	r3, [sp, #20]
 8020418:	9b02      	ldr	r3, [sp, #8]
 802041a:	9a07      	ldr	r2, [sp, #28]
 802041c:	60bd      	str	r5, [r7, #8]
 802041e:	609e      	str	r6, [r3, #8]
 8020420:	9b06      	ldr	r3, [sp, #24]
 8020422:	6992      	ldr	r2, [r2, #24]
 8020424:	699b      	ldr	r3, [r3, #24]
 8020426:	6894      	ldr	r4, [r2, #8]
 8020428:	9a03      	ldr	r2, [sp, #12]
 802042a:	689b      	ldr	r3, [r3, #8]
 802042c:	2a01      	cmp	r2, #1
 802042e:	ed93 8a00 	vldr	s16, [r3]
 8020432:	d93b      	bls.n	80204ac <nl_func_sm_array_f32+0xe8>
 8020434:	9901      	ldr	r1, [sp, #4]
 8020436:	1d1a      	adds	r2, r3, #4
 8020438:	eb03 0b01 	add.w	fp, r3, r1
 802043c:	ecf2 7a01 	vldmia	r2!, {s15}
 8020440:	4593      	cmp	fp, r2
 8020442:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
 8020446:	d1f9      	bne.n	802043c <nl_func_sm_array_f32+0x78>
 8020448:	469a      	mov	sl, r3
 802044a:	46a1      	mov	r9, r4
 802044c:	46a0      	mov	r8, r4
 802044e:	eddf 8a1a 	vldr	s17, [pc, #104]	; 80204b8 <nl_func_sm_array_f32+0xf4>
 8020452:	ecba 0a01 	vldmia	sl!, {s0}
 8020456:	ee30 0a48 	vsub.f32	s0, s0, s16
 802045a:	f007 fe57 	bl	802810c <expf>
 802045e:	45d3      	cmp	fp, sl
 8020460:	eca8 0a01 	vstmia	r8!, {s0}
 8020464:	ee78 8a80 	vadd.f32	s17, s17, s0
 8020468:	d1f3      	bne.n	8020452 <nl_func_sm_array_f32+0x8e>
 802046a:	eef5 8a40 	vcmp.f32	s17, #0.0
 802046e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020472:	d00b      	beq.n	802048c <nl_func_sm_array_f32+0xc8>
 8020474:	ee89 7a28 	vdiv.f32	s14, s18, s17
 8020478:	9b01      	ldr	r3, [sp, #4]
 802047a:	441c      	add	r4, r3
 802047c:	edd9 7a00 	vldr	s15, [r9]
 8020480:	ee67 7a87 	vmul.f32	s15, s15, s14
 8020484:	ece9 7a01 	vstmia	r9!, {s15}
 8020488:	454c      	cmp	r4, r9
 802048a:	d1f7      	bne.n	802047c <nl_func_sm_array_f32+0xb8>
 802048c:	9b04      	ldr	r3, [sp, #16]
 802048e:	68fc      	ldr	r4, [r7, #12]
 8020490:	441d      	add	r5, r3
 8020492:	9b05      	ldr	r3, [sp, #20]
 8020494:	42ac      	cmp	r4, r5
 8020496:	441e      	add	r6, r3
 8020498:	d9be      	bls.n	8020418 <nl_func_sm_array_f32+0x54>
 802049a:	9a02      	ldr	r2, [sp, #8]
 802049c:	60bc      	str	r4, [r7, #8]
 802049e:	68d3      	ldr	r3, [r2, #12]
 80204a0:	6093      	str	r3, [r2, #8]
 80204a2:	b009      	add	sp, #36	; 0x24
 80204a4:	ecbd 8b04 	vpop	{d8-d9}
 80204a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80204ac:	2a00      	cmp	r2, #0
 80204ae:	d0ed      	beq.n	802048c <nl_func_sm_array_f32+0xc8>
 80204b0:	9a01      	ldr	r2, [sp, #4]
 80204b2:	eb03 0b02 	add.w	fp, r3, r2
 80204b6:	e7c7      	b.n	8020448 <nl_func_sm_array_f32+0x84>
 80204b8:	00000000 	.word	0x00000000

080204bc <forward_sm>:
 80204bc:	6982      	ldr	r2, [r0, #24]
 80204be:	8813      	ldrh	r3, [r2, #0]
 80204c0:	b333      	cbz	r3, 8020510 <forward_sm+0x54>
 80204c2:	6852      	ldr	r2, [r2, #4]
 80204c4:	6851      	ldr	r1, [r2, #4]
 80204c6:	b101      	cbz	r1, 80204ca <forward_sm+0xe>
 80204c8:	6809      	ldr	r1, [r1, #0]
 80204ca:	2b01      	cmp	r3, #1
 80204cc:	d91d      	bls.n	802050a <forward_sm+0x4e>
 80204ce:	6913      	ldr	r3, [r2, #16]
 80204d0:	b1cb      	cbz	r3, 8020506 <forward_sm+0x4a>
 80204d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80204d4:	6818      	ldr	r0, [r3, #0]
 80204d6:	b083      	sub	sp, #12
 80204d8:	688b      	ldr	r3, [r1, #8]
 80204da:	68cd      	ldr	r5, [r1, #12]
 80204dc:	68c2      	ldr	r2, [r0, #12]
 80204de:	0a1b      	lsrs	r3, r3, #8
 80204e0:	686e      	ldr	r6, [r5, #4]
 80204e2:	6857      	ldr	r7, [r2, #4]
 80204e4:	d016      	beq.n	8020514 <forward_sm+0x58>
 80204e6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80204ea:	2201      	movs	r2, #1
 80204ec:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 80204f0:	429d      	cmp	r5, r3
 80204f2:	fb04 f202 	mul.w	r2, r4, r2
 80204f6:	d1f9      	bne.n	80204ec <forward_sm+0x30>
 80204f8:	4633      	mov	r3, r6
 80204fa:	9701      	str	r7, [sp, #4]
 80204fc:	9600      	str	r6, [sp, #0]
 80204fe:	f7ff ff61 	bl	80203c4 <nl_func_sm_array_f32>
 8020502:	b003      	add	sp, #12
 8020504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020506:	68db      	ldr	r3, [r3, #12]
 8020508:	deff      	udf	#255	; 0xff
 802050a:	2300      	movs	r3, #0
 802050c:	685b      	ldr	r3, [r3, #4]
 802050e:	deff      	udf	#255	; 0xff
 8020510:	685b      	ldr	r3, [r3, #4]
 8020512:	deff      	udf	#255	; 0xff
 8020514:	2201      	movs	r2, #1
 8020516:	e7ef      	b.n	80204f8 <forward_sm+0x3c>

08020518 <forward_eltwise_integer_INT8>:
 8020518:	6983      	ldr	r3, [r0, #24]
 802051a:	881a      	ldrh	r2, [r3, #0]
 802051c:	2a00      	cmp	r2, #0
 802051e:	f000 8166 	beq.w	80207ee <forward_eltwise_integer_INT8+0x2d6>
 8020522:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020526:	ed2d 8b02 	vpush	{d8}
 802052a:	6859      	ldr	r1, [r3, #4]
 802052c:	b0a5      	sub	sp, #148	; 0x94
 802052e:	684b      	ldr	r3, [r1, #4]
 8020530:	2b00      	cmp	r3, #0
 8020532:	f000 81ab 	beq.w	802088c <forward_eltwise_integer_INT8+0x374>
 8020536:	e9d3 5700 	ldrd	r5, r7, [r3]
 802053a:	2a01      	cmp	r2, #1
 802053c:	f240 8154 	bls.w	80207e8 <forward_eltwise_integer_INT8+0x2d0>
 8020540:	690c      	ldr	r4, [r1, #16]
 8020542:	b104      	cbz	r4, 8020546 <forward_eltwise_integer_INT8+0x2e>
 8020544:	6824      	ldr	r4, [r4, #0]
 8020546:	f105 0208 	add.w	r2, r5, #8
 802054a:	68ab      	ldr	r3, [r5, #8]
 802054c:	f8d0 901c 	ldr.w	r9, [r0, #28]
 8020550:	9209      	str	r2, [sp, #36]	; 0x24
 8020552:	f107 0208 	add.w	r2, r7, #8
 8020556:	ea5f 2c13 	movs.w	ip, r3, lsr #8
 802055a:	9207      	str	r2, [sp, #28]
 802055c:	6a02      	ldr	r2, [r0, #32]
 802055e:	9208      	str	r2, [sp, #32]
 8020560:	f000 816e 	beq.w	8020840 <forward_eltwise_integer_INT8+0x328>
 8020564:	f10c 33ff 	add.w	r3, ip, #4294967295
 8020568:	68fa      	ldr	r2, [r7, #12]
 802056a:	68ee      	ldr	r6, [r5, #12]
 802056c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8020570:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8020574:	4288      	cmp	r0, r1
 8020576:	d10f      	bne.n	8020598 <forward_eltwise_integer_INT8+0x80>
 8020578:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 802057c:	4461      	add	r1, ip
 802057e:	0088      	lsls	r0, r1, #2
 8020580:	1831      	adds	r1, r6, r0
 8020582:	4402      	add	r2, r0
 8020584:	2b00      	cmp	r3, #0
 8020586:	f000 815b 	beq.w	8020840 <forward_eltwise_integer_INT8+0x328>
 802058a:	f851 6d04 	ldr.w	r6, [r1, #-4]!
 802058e:	3b01      	subs	r3, #1
 8020590:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8020594:	4286      	cmp	r6, r0
 8020596:	d0f5      	beq.n	8020584 <forward_eltwise_integer_INT8+0x6c>
 8020598:	2600      	movs	r6, #0
 802059a:	696a      	ldr	r2, [r5, #20]
 802059c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 80205a0:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 80205a4:	a91c      	add	r1, sp, #112	; 0x70
 80205a6:	f8d2 a000 	ldr.w	sl, [r2]
 80205aa:	2300      	movs	r3, #0
 80205ac:	6962      	ldr	r2, [r4, #20]
 80205ae:	f10d 0e80 	add.w	lr, sp, #128	; 0x80
 80205b2:	a812      	add	r0, sp, #72	; 0x48
 80205b4:	f8d2 b000 	ldr.w	fp, [r2]
 80205b8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80205bc:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80205c0:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 80205c4:	f240 4c01 	movw	ip, #1025	; 0x401
 80205c8:	9a07      	ldr	r2, [sp, #28]
 80205ca:	9115      	str	r1, [sp, #84]	; 0x54
 80205cc:	4641      	mov	r1, r8
 80205ce:	931c      	str	r3, [sp, #112]	; 0x70
 80205d0:	9320      	str	r3, [sp, #128]	; 0x80
 80205d2:	931f      	str	r3, [sp, #124]	; 0x7c
 80205d4:	9323      	str	r3, [sp, #140]	; 0x8c
 80205d6:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 80205da:	f8cd c058 	str.w	ip, [sp, #88]	; 0x58
 80205de:	f8cd e05c 	str.w	lr, [sp, #92]	; 0x5c
 80205e2:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
 80205e6:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
 80205ea:	e9cd 331d 	strd	r3, r3, [sp, #116]	; 0x74
 80205ee:	e9cd 3321 	strd	r3, r3, [sp, #132]	; 0x84
 80205f2:	f005 fca1 	bl	8025f38 <core_get_broadcasted_shape>
 80205f6:	aa12      	add	r2, sp, #72	; 0x48
 80205f8:	4641      	mov	r1, r8
 80205fa:	a814      	add	r0, sp, #80	; 0x50
 80205fc:	f005 fcb8 	bl	8025f70 <core_compute_offsets>
 8020600:	aa12      	add	r2, sp, #72	; 0x48
 8020602:	9907      	ldr	r1, [sp, #28]
 8020604:	a816      	add	r0, sp, #88	; 0x58
 8020606:	f005 fcb3 	bl	8025f70 <core_compute_offsets>
 802060a:	6829      	ldr	r1, [r5, #0]
 802060c:	f8d5 c018 	ldr.w	ip, [r5, #24]
 8020610:	6823      	ldr	r3, [r4, #0]
 8020612:	683a      	ldr	r2, [r7, #0]
 8020614:	b129      	cbz	r1, 8020622 <forward_eltwise_integer_INT8+0x10a>
 8020616:	6848      	ldr	r0, [r1, #4]
 8020618:	b118      	cbz	r0, 8020622 <forward_eltwise_integer_INT8+0x10a>
 802061a:	884d      	ldrh	r5, [r1, #2]
 802061c:	2d00      	cmp	r5, #0
 802061e:	f040 8123 	bne.w	8020868 <forward_eltwise_integer_INT8+0x350>
 8020622:	2000      	movs	r0, #0
 8020624:	900c      	str	r0, [sp, #48]	; 0x30
 8020626:	b12a      	cbz	r2, 8020634 <forward_eltwise_integer_INT8+0x11c>
 8020628:	6850      	ldr	r0, [r2, #4]
 802062a:	b118      	cbz	r0, 8020634 <forward_eltwise_integer_INT8+0x11c>
 802062c:	8855      	ldrh	r5, [r2, #2]
 802062e:	2d00      	cmp	r5, #0
 8020630:	f040 8117 	bne.w	8020862 <forward_eltwise_integer_INT8+0x34a>
 8020634:	2000      	movs	r0, #0
 8020636:	900d      	str	r0, [sp, #52]	; 0x34
 8020638:	b12b      	cbz	r3, 8020646 <forward_eltwise_integer_INT8+0x12e>
 802063a:	6858      	ldr	r0, [r3, #4]
 802063c:	b118      	cbz	r0, 8020646 <forward_eltwise_integer_INT8+0x12e>
 802063e:	885d      	ldrh	r5, [r3, #2]
 8020640:	2d00      	cmp	r5, #0
 8020642:	f040 810b 	bne.w	802085c <forward_eltwise_integer_INT8+0x344>
 8020646:	2000      	movs	r0, #0
 8020648:	69bd      	ldr	r5, [r7, #24]
 802064a:	69a4      	ldr	r4, [r4, #24]
 802064c:	68ad      	ldr	r5, [r5, #8]
 802064e:	68a7      	ldr	r7, [r4, #8]
 8020650:	900e      	str	r0, [sp, #56]	; 0x38
 8020652:	f8dc 4008 	ldr.w	r4, [ip, #8]
 8020656:	b139      	cbz	r1, 8020668 <forward_eltwise_integer_INT8+0x150>
 8020658:	6848      	ldr	r0, [r1, #4]
 802065a:	2800      	cmp	r0, #0
 802065c:	f000 8114 	beq.w	8020888 <forward_eltwise_integer_INT8+0x370>
 8020660:	8849      	ldrh	r1, [r1, #2]
 8020662:	2900      	cmp	r1, #0
 8020664:	f040 80f6 	bne.w	8020854 <forward_eltwise_integer_INT8+0x33c>
 8020668:	f88d 102d 	strb.w	r1, [sp, #45]	; 0x2d
 802066c:	b13a      	cbz	r2, 802067e <forward_eltwise_integer_INT8+0x166>
 802066e:	6851      	ldr	r1, [r2, #4]
 8020670:	2900      	cmp	r1, #0
 8020672:	f000 8107 	beq.w	8020884 <forward_eltwise_integer_INT8+0x36c>
 8020676:	8852      	ldrh	r2, [r2, #2]
 8020678:	2a00      	cmp	r2, #0
 802067a:	f040 80e7 	bne.w	802084c <forward_eltwise_integer_INT8+0x334>
 802067e:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
 8020682:	b13b      	cbz	r3, 8020694 <forward_eltwise_integer_INT8+0x17c>
 8020684:	685a      	ldr	r2, [r3, #4]
 8020686:	2a00      	cmp	r2, #0
 8020688:	f000 80fa 	beq.w	8020880 <forward_eltwise_integer_INT8+0x368>
 802068c:	885b      	ldrh	r3, [r3, #2]
 802068e:	2b00      	cmp	r3, #0
 8020690:	f040 80d8 	bne.w	8020844 <forward_eltwise_integer_INT8+0x32c>
 8020694:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 8020698:	2e00      	cmp	r6, #0
 802069a:	f040 80aa 	bne.w	80207f2 <forward_eltwise_integer_INT8+0x2da>
 802069e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80206a0:	68ca      	ldr	r2, [r1, #12]
 80206a2:	2a00      	cmp	r2, #0
 80206a4:	f000 809b 	beq.w	80207de <forward_eltwise_integer_INT8+0x2c6>
 80206a8:	f8d1 e008 	ldr.w	lr, [r1, #8]
 80206ac:	9608      	str	r6, [sp, #32]
 80206ae:	4616      	mov	r6, r2
 80206b0:	4670      	mov	r0, lr
 80206b2:	460a      	mov	r2, r1
 80206b4:	2800      	cmp	r0, #0
 80206b6:	f000 80e0 	beq.w	802087a <forward_eltwise_integer_INT8+0x362>
 80206ba:	2300      	movs	r3, #0
 80206bc:	6856      	ldr	r6, [r2, #4]
 80206be:	46be      	mov	lr, r7
 80206c0:	9307      	str	r3, [sp, #28]
 80206c2:	2e00      	cmp	r6, #0
 80206c4:	f000 80d6 	beq.w	8020874 <forward_eltwise_integer_INT8+0x35c>
 80206c8:	6810      	ldr	r0, [r2, #0]
 80206ca:	f04f 0800 	mov.w	r8, #0
 80206ce:	4677      	mov	r7, lr
 80206d0:	4694      	mov	ip, r2
 80206d2:	2800      	cmp	r0, #0
 80206d4:	f000 80cb 	beq.w	802086e <forward_eltwise_integer_INT8+0x356>
 80206d8:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 80206dc:	2600      	movs	r6, #0
 80206de:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
 80206e2:	f994 3000 	ldrsb.w	r3, [r4]
 80206e6:	aa10      	add	r2, sp, #64	; 0x40
 80206e8:	f99d c02d 	ldrsb.w	ip, [sp, #45]	; 0x2d
 80206ec:	a90f      	add	r1, sp, #60	; 0x3c
 80206ee:	eddd 6a0c 	vldr	s13, [sp, #48]	; 0x30
 80206f2:	a811      	add	r0, sp, #68	; 0x44
 80206f4:	eba3 030c 	sub.w	r3, r3, ip
 80206f8:	f99d c02e 	ldrsb.w	ip, [sp, #46]	; 0x2e
 80206fc:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 8020700:	ee07 3a90 	vmov	s15, r3
 8020704:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020708:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802070c:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
 8020710:	f995 3000 	ldrsb.w	r3, [r5]
 8020714:	eba3 030c 	sub.w	r3, r3, ip
 8020718:	ee07 3a90 	vmov	s15, r3
 802071c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020720:	ee67 7a87 	vmul.f32	s15, s15, s14
 8020724:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
 8020728:	47c8      	blx	r9
 802072a:	ed9d 6a11 	vldr	s12, [sp, #68]	; 0x44
 802072e:	eddd 6a0e 	vldr	s13, [sp, #56]	; 0x38
 8020732:	f99d 302f 	ldrsb.w	r3, [sp, #47]	; 0x2f
 8020736:	ee86 7a26 	vdiv.f32	s14, s12, s13
 802073a:	ee07 3a90 	vmov	s15, r3
 802073e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020742:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020746:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 802074a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802074e:	fe38 7a88 	vselgt.f32	s14, s17, s16
 8020752:	ee77 7a87 	vadd.f32	s15, s15, s14
 8020756:	edcd 7a11 	vstr	s15, [sp, #68]	; 0x44
 802075a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802075e:	ee17 3a90 	vmov	r3, s15
 8020762:	f303 0307 	ssat	r3, #8, r3
 8020766:	703b      	strb	r3, [r7, #0]
 8020768:	3601      	adds	r6, #1
 802076a:	9915      	ldr	r1, [sp, #84]	; 0x54
 802076c:	445f      	add	r7, fp
 802076e:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
 8020772:	6808      	ldr	r0, [r1, #0]
 8020774:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020776:	fb00 440a 	mla	r4, r0, sl, r4
 802077a:	f8dc 0000 	ldr.w	r0, [ip]
 802077e:	681a      	ldr	r2, [r3, #0]
 8020780:	42b0      	cmp	r0, r6
 8020782:	fb02 550a 	mla	r5, r2, sl, r5
 8020786:	d8ac      	bhi.n	80206e2 <forward_eltwise_integer_INT8+0x1ca>
 8020788:	f8dc 6004 	ldr.w	r6, [ip, #4]
 802078c:	684a      	ldr	r2, [r1, #4]
 802078e:	f108 0801 	add.w	r8, r8, #1
 8020792:	fb02 440a 	mla	r4, r2, sl, r4
 8020796:	45b0      	cmp	r8, r6
 8020798:	685a      	ldr	r2, [r3, #4]
 802079a:	fb02 550a 	mla	r5, r2, sl, r5
 802079e:	d398      	bcc.n	80206d2 <forward_eltwise_integer_INT8+0x1ba>
 80207a0:	46be      	mov	lr, r7
 80207a2:	4662      	mov	r2, ip
 80207a4:	f8dc 0008 	ldr.w	r0, [ip, #8]
 80207a8:	9f07      	ldr	r7, [sp, #28]
 80207aa:	3701      	adds	r7, #1
 80207ac:	9707      	str	r7, [sp, #28]
 80207ae:	688f      	ldr	r7, [r1, #8]
 80207b0:	fb07 440a 	mla	r4, r7, sl, r4
 80207b4:	689f      	ldr	r7, [r3, #8]
 80207b6:	fb07 550a 	mla	r5, r7, sl, r5
 80207ba:	9f07      	ldr	r7, [sp, #28]
 80207bc:	4287      	cmp	r7, r0
 80207be:	d380      	bcc.n	80206c2 <forward_eltwise_integer_INT8+0x1aa>
 80207c0:	4677      	mov	r7, lr
 80207c2:	68d6      	ldr	r6, [r2, #12]
 80207c4:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 80207c8:	9908      	ldr	r1, [sp, #32]
 80207ca:	68db      	ldr	r3, [r3, #12]
 80207cc:	fb0c 440a 	mla	r4, ip, sl, r4
 80207d0:	3101      	adds	r1, #1
 80207d2:	fb03 550a 	mla	r5, r3, sl, r5
 80207d6:	42b1      	cmp	r1, r6
 80207d8:	9108      	str	r1, [sp, #32]
 80207da:	f4ff af6b 	bcc.w	80206b4 <forward_eltwise_integer_INT8+0x19c>
 80207de:	b025      	add	sp, #148	; 0x94
 80207e0:	ecbd 8b02 	vpop	{d8}
 80207e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80207e8:	2300      	movs	r3, #0
 80207ea:	685b      	ldr	r3, [r3, #4]
 80207ec:	deff      	udf	#255	; 0xff
 80207ee:	6853      	ldr	r3, [r2, #4]
 80207f0:	deff      	udf	#255	; 0xff
 80207f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80207f4:	0a1a      	lsrs	r2, r3, #8
 80207f6:	d04c      	beq.n	8020892 <forward_eltwise_integer_INT8+0x37a>
 80207f8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80207fa:	2301      	movs	r3, #1
 80207fc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8020800:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8020804:	4290      	cmp	r0, r2
 8020806:	fb01 f303 	mul.w	r3, r1, r3
 802080a:	d1f9      	bne.n	8020800 <forward_eltwise_integer_INT8+0x2e8>
 802080c:	4621      	mov	r1, r4
 802080e:	ac0d      	add	r4, sp, #52	; 0x34
 8020810:	462a      	mov	r2, r5
 8020812:	f10d 052d 	add.w	r5, sp, #45	; 0x2d
 8020816:	9402      	str	r4, [sp, #8]
 8020818:	ac0c      	add	r4, sp, #48	; 0x30
 802081a:	f10d 0e2f 	add.w	lr, sp, #47	; 0x2f
 802081e:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 8020822:	f10d 062e 	add.w	r6, sp, #46	; 0x2e
 8020826:	4638      	mov	r0, r7
 8020828:	e9cd 4500 	strd	r4, r5, [sp]
 802082c:	9c08      	ldr	r4, [sp, #32]
 802082e:	9603      	str	r6, [sp, #12]
 8020830:	e9cd ce04 	strd	ip, lr, [sp, #16]
 8020834:	47a0      	blx	r4
 8020836:	b025      	add	sp, #148	; 0x94
 8020838:	ecbd 8b02 	vpop	{d8}
 802083c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020840:	2601      	movs	r6, #1
 8020842:	e6aa      	b.n	802059a <forward_eltwise_integer_INT8+0x82>
 8020844:	6853      	ldr	r3, [r2, #4]
 8020846:	f993 3000 	ldrsb.w	r3, [r3]
 802084a:	e723      	b.n	8020694 <forward_eltwise_integer_INT8+0x17c>
 802084c:	684a      	ldr	r2, [r1, #4]
 802084e:	f992 2000 	ldrsb.w	r2, [r2]
 8020852:	e714      	b.n	802067e <forward_eltwise_integer_INT8+0x166>
 8020854:	6841      	ldr	r1, [r0, #4]
 8020856:	f991 1000 	ldrsb.w	r1, [r1]
 802085a:	e705      	b.n	8020668 <forward_eltwise_integer_INT8+0x150>
 802085c:	6800      	ldr	r0, [r0, #0]
 802085e:	6800      	ldr	r0, [r0, #0]
 8020860:	e6f2      	b.n	8020648 <forward_eltwise_integer_INT8+0x130>
 8020862:	6800      	ldr	r0, [r0, #0]
 8020864:	6800      	ldr	r0, [r0, #0]
 8020866:	e6e6      	b.n	8020636 <forward_eltwise_integer_INT8+0x11e>
 8020868:	6800      	ldr	r0, [r0, #0]
 802086a:	6800      	ldr	r0, [r0, #0]
 802086c:	e6da      	b.n	8020624 <forward_eltwise_integer_INT8+0x10c>
 802086e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8020870:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020872:	e78b      	b.n	802078c <forward_eltwise_integer_INT8+0x274>
 8020874:	9915      	ldr	r1, [sp, #84]	; 0x54
 8020876:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020878:	e796      	b.n	80207a8 <forward_eltwise_integer_INT8+0x290>
 802087a:	9915      	ldr	r1, [sp, #84]	; 0x54
 802087c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802087e:	e7a1      	b.n	80207c4 <forward_eltwise_integer_INT8+0x2ac>
 8020880:	4613      	mov	r3, r2
 8020882:	e707      	b.n	8020694 <forward_eltwise_integer_INT8+0x17c>
 8020884:	460a      	mov	r2, r1
 8020886:	e6fa      	b.n	802067e <forward_eltwise_integer_INT8+0x166>
 8020888:	4601      	mov	r1, r0
 802088a:	e6ed      	b.n	8020668 <forward_eltwise_integer_INT8+0x150>
 802088c:	461d      	mov	r5, r3
 802088e:	461f      	mov	r7, r3
 8020890:	e653      	b.n	802053a <forward_eltwise_integer_INT8+0x22>
 8020892:	2301      	movs	r3, #1
 8020894:	e7ba      	b.n	802080c <forward_eltwise_integer_INT8+0x2f4>
 8020896:	bf00      	nop

08020898 <ai_check_custom_types>:
 8020898:	4b13      	ldr	r3, [pc, #76]	; (80208e8 <ai_check_custom_types+0x50>)
 802089a:	b082      	sub	sp, #8
 802089c:	681b      	ldr	r3, [r3, #0]
 802089e:	9301      	str	r3, [sp, #4]
 80208a0:	b118      	cbz	r0, 80208aa <ai_check_custom_types+0x12>
 80208a2:	7803      	ldrb	r3, [r0, #0]
 80208a4:	2b03      	cmp	r3, #3
 80208a6:	d002      	beq.n	80208ae <ai_check_custom_types+0x16>
 80208a8:	2000      	movs	r0, #0
 80208aa:	b002      	add	sp, #8
 80208ac:	4770      	bx	lr
 80208ae:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80208b2:	4293      	cmp	r3, r2
 80208b4:	d004      	beq.n	80208c0 <ai_check_custom_types+0x28>
 80208b6:	2001      	movs	r0, #1
 80208b8:	f080 0001 	eor.w	r0, r0, #1
 80208bc:	b002      	add	sp, #8
 80208be:	4770      	bx	lr
 80208c0:	7842      	ldrb	r2, [r0, #1]
 80208c2:	3001      	adds	r0, #1
 80208c4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80208c8:	429a      	cmp	r2, r3
 80208ca:	d1f4      	bne.n	80208b6 <ai_check_custom_types+0x1e>
 80208cc:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80208d0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80208d4:	429a      	cmp	r2, r3
 80208d6:	d1ee      	bne.n	80208b6 <ai_check_custom_types+0x1e>
 80208d8:	7842      	ldrb	r2, [r0, #1]
 80208da:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80208de:	429a      	cmp	r2, r3
 80208e0:	d1e9      	bne.n	80208b6 <ai_check_custom_types+0x1e>
 80208e2:	2000      	movs	r0, #0
 80208e4:	e7e8      	b.n	80208b8 <ai_check_custom_types+0x20>
 80208e6:	bf00      	nop
 80208e8:	080289a0 	.word	0x080289a0

080208ec <ai_layers_init_all>:
 80208ec:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80208ee:	b16a      	cbz	r2, 802090c <ai_layers_init_all+0x20>
 80208f0:	6913      	ldr	r3, [r2, #16]
 80208f2:	60d0      	str	r0, [r2, #12]
 80208f4:	429a      	cmp	r2, r3
 80208f6:	f04f 0201 	mov.w	r2, #1
 80208fa:	d007      	beq.n	802090c <ai_layers_init_all+0x20>
 80208fc:	b133      	cbz	r3, 802090c <ai_layers_init_all+0x20>
 80208fe:	6919      	ldr	r1, [r3, #16]
 8020900:	3201      	adds	r2, #1
 8020902:	60d8      	str	r0, [r3, #12]
 8020904:	4299      	cmp	r1, r3
 8020906:	bf18      	it	ne
 8020908:	2900      	cmpne	r1, #0
 802090a:	d101      	bne.n	8020910 <ai_layers_init_all+0x24>
 802090c:	4610      	mov	r0, r2
 802090e:	4770      	bx	lr
 8020910:	460b      	mov	r3, r1
 8020912:	e7f4      	b.n	80208fe <ai_layers_init_all+0x12>

08020914 <ai_layers_post_init_all>:
 8020914:	b538      	push	{r3, r4, r5, lr}
 8020916:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8020918:	b184      	cbz	r4, 802093c <ai_layers_post_init_all+0x28>
 802091a:	2500      	movs	r5, #0
 802091c:	6863      	ldr	r3, [r4, #4]
 802091e:	4620      	mov	r0, r4
 8020920:	07db      	lsls	r3, r3, #31
 8020922:	d503      	bpl.n	802092c <ai_layers_post_init_all+0x18>
 8020924:	6a23      	ldr	r3, [r4, #32]
 8020926:	b10b      	cbz	r3, 802092c <ai_layers_post_init_all+0x18>
 8020928:	3501      	adds	r5, #1
 802092a:	4798      	blx	r3
 802092c:	6923      	ldr	r3, [r4, #16]
 802092e:	429c      	cmp	r4, r3
 8020930:	bf18      	it	ne
 8020932:	2b00      	cmpne	r3, #0
 8020934:	461c      	mov	r4, r3
 8020936:	d1f1      	bne.n	802091c <ai_layers_post_init_all+0x8>
 8020938:	4628      	mov	r0, r5
 802093a:	bd38      	pop	{r3, r4, r5, pc}
 802093c:	4625      	mov	r5, r4
 802093e:	e7fb      	b.n	8020938 <ai_layers_post_init_all+0x24>

08020940 <ai_layers_forward_all>:
 8020940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020944:	6d87      	ldr	r7, [r0, #88]	; 0x58
 8020946:	4604      	mov	r4, r0
 8020948:	6d05      	ldr	r5, [r0, #80]	; 0x50
 802094a:	2f00      	cmp	r7, #0
 802094c:	d02b      	beq.n	80209a6 <ai_layers_forward_all+0x66>
 802094e:	2d00      	cmp	r5, #0
 8020950:	d03d      	beq.n	80209ce <ai_layers_forward_all+0x8e>
 8020952:	2600      	movs	r6, #0
 8020954:	6545      	str	r5, [r0, #84]	; 0x54
 8020956:	4629      	mov	r1, r5
 8020958:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 802095a:	2001      	movs	r0, #1
 802095c:	46b0      	mov	r8, r6
 802095e:	47b8      	blx	r7
 8020960:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8020962:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8020964:	2002      	movs	r0, #2
 8020966:	47b8      	blx	r7
 8020968:	6d65      	ldr	r5, [r4, #84]	; 0x54
 802096a:	696b      	ldr	r3, [r5, #20]
 802096c:	4628      	mov	r0, r5
 802096e:	4798      	blx	r3
 8020970:	692b      	ldr	r3, [r5, #16]
 8020972:	2003      	movs	r0, #3
 8020974:	429d      	cmp	r5, r3
 8020976:	4619      	mov	r1, r3
 8020978:	d009      	beq.n	802098e <ai_layers_forward_all+0x4e>
 802097a:	6563      	str	r3, [r4, #84]	; 0x54
 802097c:	3601      	adds	r6, #1
 802097e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8020980:	47b8      	blx	r7
 8020982:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8020984:	2900      	cmp	r1, #0
 8020986:	d1ec      	bne.n	8020962 <ai_layers_forward_all+0x22>
 8020988:	4630      	mov	r0, r6
 802098a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802098e:	2100      	movs	r1, #0
 8020990:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
 8020994:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8020996:	3601      	adds	r6, #1
 8020998:	47b8      	blx	r7
 802099a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 802099c:	2900      	cmp	r1, #0
 802099e:	d1e0      	bne.n	8020962 <ai_layers_forward_all+0x22>
 80209a0:	4630      	mov	r0, r6
 80209a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80209a6:	b195      	cbz	r5, 80209ce <ai_layers_forward_all+0x8e>
 80209a8:	463e      	mov	r6, r7
 80209aa:	6545      	str	r5, [r0, #84]	; 0x54
 80209ac:	696b      	ldr	r3, [r5, #20]
 80209ae:	4628      	mov	r0, r5
 80209b0:	4798      	blx	r3
 80209b2:	692b      	ldr	r3, [r5, #16]
 80209b4:	3601      	adds	r6, #1
 80209b6:	42ab      	cmp	r3, r5
 80209b8:	461d      	mov	r5, r3
 80209ba:	d003      	beq.n	80209c4 <ai_layers_forward_all+0x84>
 80209bc:	6563      	str	r3, [r4, #84]	; 0x54
 80209be:	2b00      	cmp	r3, #0
 80209c0:	d1f4      	bne.n	80209ac <ai_layers_forward_all+0x6c>
 80209c2:	e7e1      	b.n	8020988 <ai_layers_forward_all+0x48>
 80209c4:	2300      	movs	r3, #0
 80209c6:	4630      	mov	r0, r6
 80209c8:	6563      	str	r3, [r4, #84]	; 0x54
 80209ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80209ce:	462e      	mov	r6, r5
 80209d0:	4630      	mov	r0, r6
 80209d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80209d6:	bf00      	nop

080209d8 <ai_layers_destroy_all>:
 80209d8:	b538      	push	{r3, r4, r5, lr}
 80209da:	6d04      	ldr	r4, [r0, #80]	; 0x50
 80209dc:	b184      	cbz	r4, 8020a00 <ai_layers_destroy_all+0x28>
 80209de:	2500      	movs	r5, #0
 80209e0:	6863      	ldr	r3, [r4, #4]
 80209e2:	4620      	mov	r0, r4
 80209e4:	075b      	lsls	r3, r3, #29
 80209e6:	d503      	bpl.n	80209f0 <ai_layers_destroy_all+0x18>
 80209e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80209ea:	b10b      	cbz	r3, 80209f0 <ai_layers_destroy_all+0x18>
 80209ec:	3501      	adds	r5, #1
 80209ee:	4798      	blx	r3
 80209f0:	6923      	ldr	r3, [r4, #16]
 80209f2:	429c      	cmp	r4, r3
 80209f4:	bf18      	it	ne
 80209f6:	2b00      	cmpne	r3, #0
 80209f8:	461c      	mov	r4, r3
 80209fa:	d1f1      	bne.n	80209e0 <ai_layers_destroy_all+0x8>
 80209fc:	4628      	mov	r0, r5
 80209fe:	bd38      	pop	{r3, r4, r5, pc}
 8020a00:	4625      	mov	r5, r4
 8020a02:	e7fb      	b.n	80209fc <ai_layers_destroy_all+0x24>

08020a04 <pool_func_ap_array_integer_INT8>:
 8020a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a08:	b093      	sub	sp, #76	; 0x4c
 8020a0a:	6985      	ldr	r5, [r0, #24]
 8020a0c:	460f      	mov	r7, r1
 8020a0e:	469c      	mov	ip, r3
 8020a10:	9c24      	ldr	r4, [sp, #144]	; 0x90
 8020a12:	6803      	ldr	r3, [r0, #0]
 8020a14:	69a1      	ldr	r1, [r4, #24]
 8020a16:	68a8      	ldr	r0, [r5, #8]
 8020a18:	6825      	ldr	r5, [r4, #0]
 8020a1a:	f8bd 4074 	ldrh.w	r4, [sp, #116]	; 0x74
 8020a1e:	6889      	ldr	r1, [r1, #8]
 8020a20:	940d      	str	r4, [sp, #52]	; 0x34
 8020a22:	f8bd 4078 	ldrh.w	r4, [sp, #120]	; 0x78
 8020a26:	f8bd a070 	ldrh.w	sl, [sp, #112]	; 0x70
 8020a2a:	940e      	str	r4, [sp, #56]	; 0x38
 8020a2c:	f8bd 407c 	ldrh.w	r4, [sp, #124]	; 0x7c
 8020a30:	f8bd e084 	ldrh.w	lr, [sp, #132]	; 0x84
 8020a34:	940f      	str	r4, [sp, #60]	; 0x3c
 8020a36:	f8bd 4080 	ldrh.w	r4, [sp, #128]	; 0x80
 8020a3a:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8020a3e:	9410      	str	r4, [sp, #64]	; 0x40
 8020a40:	f8bd 908c 	ldrh.w	r9, [sp, #140]	; 0x8c
 8020a44:	2b00      	cmp	r3, #0
 8020a46:	d03c      	beq.n	8020ac2 <pool_func_ap_array_integer_INT8+0xbe>
 8020a48:	685e      	ldr	r6, [r3, #4]
 8020a4a:	46b3      	mov	fp, r6
 8020a4c:	2e00      	cmp	r6, #0
 8020a4e:	d031      	beq.n	8020ab4 <pool_func_ap_array_integer_INT8+0xb0>
 8020a50:	885c      	ldrh	r4, [r3, #2]
 8020a52:	9411      	str	r4, [sp, #68]	; 0x44
 8020a54:	2c00      	cmp	r4, #0
 8020a56:	d051      	beq.n	8020afc <pool_func_ap_array_integer_INT8+0xf8>
 8020a58:	6834      	ldr	r4, [r6, #0]
 8020a5a:	ed94 0a00 	vldr	s0, [r4]
 8020a5e:	2d00      	cmp	r5, #0
 8020a60:	d069      	beq.n	8020b36 <pool_func_ap_array_integer_INT8+0x132>
 8020a62:	686c      	ldr	r4, [r5, #4]
 8020a64:	2c00      	cmp	r4, #0
 8020a66:	d054      	beq.n	8020b12 <pool_func_ap_array_integer_INT8+0x10e>
 8020a68:	886e      	ldrh	r6, [r5, #2]
 8020a6a:	9611      	str	r6, [sp, #68]	; 0x44
 8020a6c:	2e00      	cmp	r6, #0
 8020a6e:	d033      	beq.n	8020ad8 <pool_func_ap_array_integer_INT8+0xd4>
 8020a70:	6826      	ldr	r6, [r4, #0]
 8020a72:	edd6 0a00 	vldr	s1, [r6]
 8020a76:	2b00      	cmp	r3, #0
 8020a78:	d155      	bne.n	8020b26 <pool_func_ap_array_integer_INT8+0x122>
 8020a7a:	6864      	ldr	r4, [r4, #4]
 8020a7c:	f994 4000 	ldrsb.w	r4, [r4]
 8020a80:	f8cd 9020 	str.w	r9, [sp, #32]
 8020a84:	f8cd 801c 	str.w	r8, [sp, #28]
 8020a88:	f8cd e018 	str.w	lr, [sp, #24]
 8020a8c:	f8cd c000 	str.w	ip, [sp]
 8020a90:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
 8020a94:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020a96:	4613      	mov	r3, r2
 8020a98:	463a      	mov	r2, r7
 8020a9a:	9405      	str	r4, [sp, #20]
 8020a9c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020a9e:	9404      	str	r4, [sp, #16]
 8020aa0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020aa2:	9403      	str	r4, [sp, #12]
 8020aa4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020aa6:	e9cd a401 	strd	sl, r4, [sp, #4]
 8020aaa:	f005 f8ab 	bl	8025c04 <st_int8_avepool>
 8020aae:	b013      	add	sp, #76	; 0x4c
 8020ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020ab4:	2d00      	cmp	r5, #0
 8020ab6:	d02f      	beq.n	8020b18 <pool_func_ap_array_integer_INT8+0x114>
 8020ab8:	686c      	ldr	r4, [r5, #4]
 8020aba:	b93c      	cbnz	r4, 8020acc <pool_func_ap_array_integer_INT8+0xc8>
 8020abc:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8020b60 <pool_func_ap_array_integer_INT8+0x15c>
 8020ac0:	e00d      	b.n	8020ade <pool_func_ap_array_integer_INT8+0xda>
 8020ac2:	2d00      	cmp	r5, #0
 8020ac4:	d028      	beq.n	8020b18 <pool_func_ap_array_integer_INT8+0x114>
 8020ac6:	686c      	ldr	r4, [r5, #4]
 8020ac8:	2c00      	cmp	r4, #0
 8020aca:	d03f      	beq.n	8020b4c <pool_func_ap_array_integer_INT8+0x148>
 8020acc:	886e      	ldrh	r6, [r5, #2]
 8020ace:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8020b60 <pool_func_ap_array_integer_INT8+0x15c>
 8020ad2:	9611      	str	r6, [sp, #68]	; 0x44
 8020ad4:	2e00      	cmp	r6, #0
 8020ad6:	d1cb      	bne.n	8020a70 <pool_func_ap_array_integer_INT8+0x6c>
 8020ad8:	2b00      	cmp	r3, #0
 8020ada:	d03e      	beq.n	8020b5a <pool_func_ap_array_integer_INT8+0x156>
 8020adc:	685e      	ldr	r6, [r3, #4]
 8020ade:	46b3      	mov	fp, r6
 8020ae0:	2e00      	cmp	r6, #0
 8020ae2:	d02f      	beq.n	8020b44 <pool_func_ap_array_integer_INT8+0x140>
 8020ae4:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8020b60 <pool_func_ap_array_integer_INT8+0x15c>
 8020ae8:	885b      	ldrh	r3, [r3, #2]
 8020aea:	b953      	cbnz	r3, 8020b02 <pool_func_ap_array_integer_INT8+0xfe>
 8020aec:	2c00      	cmp	r4, #0
 8020aee:	d0c7      	beq.n	8020a80 <pool_func_ap_array_integer_INT8+0x7c>
 8020af0:	886d      	ldrh	r5, [r5, #2]
 8020af2:	9511      	str	r5, [sp, #68]	; 0x44
 8020af4:	2d00      	cmp	r5, #0
 8020af6:	d1c0      	bne.n	8020a7a <pool_func_ap_array_integer_INT8+0x76>
 8020af8:	2400      	movs	r4, #0
 8020afa:	e7c1      	b.n	8020a80 <pool_func_ap_array_integer_INT8+0x7c>
 8020afc:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8020b60 <pool_func_ap_array_integer_INT8+0x15c>
 8020b00:	e7ad      	b.n	8020a5e <pool_func_ap_array_integer_INT8+0x5a>
 8020b02:	f8db 3004 	ldr.w	r3, [fp, #4]
 8020b06:	f993 3000 	ldrsb.w	r3, [r3]
 8020b0a:	2d00      	cmp	r5, #0
 8020b0c:	d0f4      	beq.n	8020af8 <pool_func_ap_array_integer_INT8+0xf4>
 8020b0e:	686c      	ldr	r4, [r5, #4]
 8020b10:	e7ec      	b.n	8020aec <pool_func_ap_array_integer_INT8+0xe8>
 8020b12:	2b00      	cmp	r3, #0
 8020b14:	d1e3      	bne.n	8020ade <pool_func_ap_array_integer_INT8+0xda>
 8020b16:	e01b      	b.n	8020b50 <pool_func_ap_array_integer_INT8+0x14c>
 8020b18:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8020b60 <pool_func_ap_array_integer_INT8+0x15c>
 8020b1c:	462b      	mov	r3, r5
 8020b1e:	462c      	mov	r4, r5
 8020b20:	eef0 0a40 	vmov.f32	s1, s0
 8020b24:	e7ac      	b.n	8020a80 <pool_func_ap_array_integer_INT8+0x7c>
 8020b26:	f8d3 b004 	ldr.w	fp, [r3, #4]
 8020b2a:	f1bb 0f00 	cmp.w	fp, #0
 8020b2e:	d1db      	bne.n	8020ae8 <pool_func_ap_array_integer_INT8+0xe4>
 8020b30:	465b      	mov	r3, fp
 8020b32:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8020b34:	e7de      	b.n	8020af4 <pool_func_ap_array_integer_INT8+0xf0>
 8020b36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020b38:	eddf 0a09 	vldr	s1, [pc, #36]	; 8020b60 <pool_func_ap_array_integer_INT8+0x15c>
 8020b3c:	2b00      	cmp	r3, #0
 8020b3e:	d1e0      	bne.n	8020b02 <pool_func_ap_array_integer_INT8+0xfe>
 8020b40:	461c      	mov	r4, r3
 8020b42:	e79d      	b.n	8020a80 <pool_func_ap_array_integer_INT8+0x7c>
 8020b44:	4633      	mov	r3, r6
 8020b46:	eddf 0a06 	vldr	s1, [pc, #24]	; 8020b60 <pool_func_ap_array_integer_INT8+0x15c>
 8020b4a:	e7cf      	b.n	8020aec <pool_func_ap_array_integer_INT8+0xe8>
 8020b4c:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8020b60 <pool_func_ap_array_integer_INT8+0x15c>
 8020b50:	2300      	movs	r3, #0
 8020b52:	eddf 0a03 	vldr	s1, [pc, #12]	; 8020b60 <pool_func_ap_array_integer_INT8+0x15c>
 8020b56:	461c      	mov	r4, r3
 8020b58:	e792      	b.n	8020a80 <pool_func_ap_array_integer_INT8+0x7c>
 8020b5a:	eddf 0a01 	vldr	s1, [pc, #4]	; 8020b60 <pool_func_ap_array_integer_INT8+0x15c>
 8020b5e:	e7cb      	b.n	8020af8 <pool_func_ap_array_integer_INT8+0xf4>
 8020b60:	00000000 	.word	0x00000000

08020b64 <arm_fully_connected_s8>:
 8020b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b68:	b08b      	sub	sp, #44	; 0x2c
 8020b6a:	f8bd 4050 	ldrh.w	r4, [sp, #80]	; 0x50
 8020b6e:	e9dd a915 	ldrd	sl, r9, [sp, #84]	; 0x54
 8020b72:	b30c      	cbz	r4, 8020bb8 <arm_fully_connected_s8+0x54>
 8020b74:	4606      	mov	r6, r0
 8020b76:	468b      	mov	fp, r1
 8020b78:	4617      	mov	r7, r2
 8020b7a:	4698      	mov	r8, r3
 8020b7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8020b7e:	3c01      	subs	r4, #1
 8020b80:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8020b82:	4630      	mov	r0, r6
 8020b84:	9308      	str	r3, [sp, #32]
 8020b86:	b2a4      	uxth	r4, r4
 8020b88:	9504      	str	r5, [sp, #16]
 8020b8a:	4659      	mov	r1, fp
 8020b8c:	f8cd 8018 	str.w	r8, [sp, #24]
 8020b90:	443e      	add	r6, r7
 8020b92:	9705      	str	r7, [sp, #20]
 8020b94:	f8cd a000 	str.w	sl, [sp]
 8020b98:	e9dd 321b 	ldrd	r3, r2, [sp, #108]	; 0x6c
 8020b9c:	461d      	mov	r5, r3
 8020b9e:	9207      	str	r2, [sp, #28]
 8020ba0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8020ba2:	4445      	add	r5, r8
 8020ba4:	951b      	str	r5, [sp, #108]	; 0x6c
 8020ba6:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8020ba8:	9503      	str	r5, [sp, #12]
 8020baa:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8020bac:	e9cd 9501 	strd	r9, r5, [sp, #4]
 8020bb0:	f000 f808 	bl	8020bc4 <arm_nn_vec_mat_mult_t_s8>
 8020bb4:	2c00      	cmp	r4, #0
 8020bb6:	d1e1      	bne.n	8020b7c <arm_fully_connected_s8+0x18>
 8020bb8:	2000      	movs	r0, #0
 8020bba:	b00b      	add	sp, #44	; 0x2c
 8020bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020bc0 <arm_fully_connected_s8_get_buffer_size>:
 8020bc0:	2000      	movs	r0, #0
 8020bc2:	4770      	bx	lr

08020bc4 <arm_nn_vec_mat_mult_t_s8>:
 8020bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020bc8:	b093      	sub	sp, #76	; 0x4c
 8020bca:	4689      	mov	r9, r1
 8020bcc:	910b      	str	r1, [sp, #44]	; 0x2c
 8020bce:	991c      	ldr	r1, [sp, #112]	; 0x70
 8020bd0:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8020bd2:	b28f      	uxth	r7, r1
 8020bd4:	991d      	ldr	r1, [sp, #116]	; 0x74
 8020bd6:	9007      	str	r0, [sp, #28]
 8020bd8:	b28d      	uxth	r5, r1
 8020bda:	ea47 4706 	orr.w	r7, r7, r6, lsl #16
 8020bde:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8020be0:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 8020be4:	e9dd e621 	ldrd	lr, r6, [sp, #132]	; 0x84
 8020be8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8020bec:	2e01      	cmp	r6, #1
 8020bee:	f340 826c 	ble.w	80210ca <arm_nn_vec_mat_mult_t_s8+0x506>
 8020bf2:	1eb4      	subs	r4, r6, #2
 8020bf4:	469c      	mov	ip, r3
 8020bf6:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8020bf8:	4690      	mov	r8, r2
 8020bfa:	f024 0301 	bic.w	r3, r4, #1
 8020bfe:	f1ae 0110 	sub.w	r1, lr, #16
 8020c02:	4276      	negs	r6, r6
 8020c04:	2201      	movs	r2, #1
 8020c06:	4463      	add	r3, ip
 8020c08:	f021 010f 	bic.w	r1, r1, #15
 8020c0c:	40b2      	lsls	r2, r6
 8020c0e:	960c      	str	r6, [sp, #48]	; 0x30
 8020c10:	3304      	adds	r3, #4
 8020c12:	ea4f 064e 	mov.w	r6, lr, lsl #1
 8020c16:	3a01      	subs	r2, #1
 8020c18:	9411      	str	r4, [sp, #68]	; 0x44
 8020c1a:	9608      	str	r6, [sp, #32]
 8020c1c:	f101 0610 	add.w	r6, r1, #16
 8020c20:	9309      	str	r3, [sp, #36]	; 0x24
 8020c22:	4603      	mov	r3, r0
 8020c24:	4664      	mov	r4, ip
 8020c26:	9920      	ldr	r1, [sp, #128]	; 0x80
 8020c28:	4433      	add	r3, r6
 8020c2a:	46ab      	mov	fp, r5
 8020c2c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8020c30:	9606      	str	r6, [sp, #24]
 8020c32:	930a      	str	r3, [sp, #40]	; 0x28
 8020c34:	1053      	asrs	r3, r2, #1
 8020c36:	920d      	str	r2, [sp, #52]	; 0x34
 8020c38:	9310      	str	r3, [sp, #64]	; 0x40
 8020c3a:	4643      	mov	r3, r8
 8020c3c:	9103      	str	r1, [sp, #12]
 8020c3e:	3308      	adds	r3, #8
 8020c40:	f8cd 9008 	str.w	r9, [sp, #8]
 8020c44:	9301      	str	r3, [sp, #4]
 8020c46:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020c48:	0fdb      	lsrs	r3, r3, #31
 8020c4a:	9304      	str	r3, [sp, #16]
 8020c4c:	1ca3      	adds	r3, r4, #2
 8020c4e:	9305      	str	r3, [sp, #20]
 8020c50:	9b01      	ldr	r3, [sp, #4]
 8020c52:	f1be 0f0f 	cmp.w	lr, #15
 8020c56:	f853 ac08 	ldr.w	sl, [r3, #-8]
 8020c5a:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8020c5e:	f340 83f8 	ble.w	8021452 <arm_nn_vec_mat_mult_t_s8+0x88e>
 8020c62:	9a02      	ldr	r2, [sp, #8]
 8020c64:	465d      	mov	r5, fp
 8020c66:	9806      	ldr	r0, [sp, #24]
 8020c68:	4616      	mov	r6, r2
 8020c6a:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8020c6e:	eb02 0800 	add.w	r8, r2, r0
 8020c72:	eb02 090e 	add.w	r9, r2, lr
 8020c76:	6834      	ldr	r4, [r6, #0]
 8020c78:	f8dc b000 	ldr.w	fp, [ip]
 8020c7c:	ea4f 2034 	mov.w	r0, r4, ror #8
 8020c80:	f856 100e 	ldr.w	r1, [r6, lr]
 8020c84:	ea4f 223b 	mov.w	r2, fp, ror #8
 8020c88:	fa25 f080 	sxtab16	r0, r5, r0
 8020c8c:	fa25 f484 	sxtab16	r4, r5, r4
 8020c90:	fa27 fb8b 	sxtab16	fp, r7, fp
 8020c94:	fa27 f282 	sxtab16	r2, r7, r2
 8020c98:	fb2b a404 	smlad	r4, fp, r4, sl
 8020c9c:	fa25 fa81 	sxtab16	sl, r5, r1
 8020ca0:	fb22 4000 	smlad	r0, r2, r0, r4
 8020ca4:	ea4f 2431 	mov.w	r4, r1, ror #8
 8020ca8:	6871      	ldr	r1, [r6, #4]
 8020caa:	fa25 f484 	sxtab16	r4, r5, r4
 8020cae:	fb2b 330a 	smlad	r3, fp, sl, r3
 8020cb2:	fb22 3a04 	smlad	sl, r2, r4, r3
 8020cb6:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8020cba:	ea4f 2431 	mov.w	r4, r1, ror #8
 8020cbe:	fa27 f382 	sxtab16	r3, r7, r2
 8020cc2:	ea4f 2b32 	mov.w	fp, r2, ror #8
 8020cc6:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8020cca:	fa27 fb8b 	sxtab16	fp, r7, fp
 8020cce:	fa25 f484 	sxtab16	r4, r5, r4
 8020cd2:	fa25 f181 	sxtab16	r1, r5, r1
 8020cd6:	fb23 0001 	smlad	r0, r3, r1, r0
 8020cda:	fa25 f182 	sxtab16	r1, r5, r2
 8020cde:	fb2b 0404 	smlad	r4, fp, r4, r0
 8020ce2:	ea4f 2232 	mov.w	r2, r2, ror #8
 8020ce6:	68b0      	ldr	r0, [r6, #8]
 8020ce8:	fa25 f282 	sxtab16	r2, r5, r2
 8020cec:	fb23 a301 	smlad	r3, r3, r1, sl
 8020cf0:	fb2b 3202 	smlad	r2, fp, r2, r3
 8020cf4:	f8dc a008 	ldr.w	sl, [ip, #8]
 8020cf8:	ea4f 2330 	mov.w	r3, r0, ror #8
 8020cfc:	f8d9 b008 	ldr.w	fp, [r9, #8]
 8020d00:	ea4f 213a 	mov.w	r1, sl, ror #8
 8020d04:	fa27 f98a 	sxtab16	r9, r7, sl
 8020d08:	fa27 f181 	sxtab16	r1, r7, r1
 8020d0c:	fa25 f383 	sxtab16	r3, r5, r3
 8020d10:	fa25 f080 	sxtab16	r0, r5, r0
 8020d14:	fb29 4a00 	smlad	sl, r9, r0, r4
 8020d18:	fa25 f48b 	sxtab16	r4, r5, fp
 8020d1c:	fb21 a303 	smlad	r3, r1, r3, sl
 8020d20:	ea4f 203b 	mov.w	r0, fp, ror #8
 8020d24:	3610      	adds	r6, #16
 8020d26:	f856 bc04 	ldr.w	fp, [r6, #-4]
 8020d2a:	fa25 f080 	sxtab16	r0, r5, r0
 8020d2e:	fb29 2204 	smlad	r2, r9, r4, r2
 8020d32:	fb21 2000 	smlad	r0, r1, r0, r2
 8020d36:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8020d3a:	eb06 090e 	add.w	r9, r6, lr
 8020d3e:	ea4f 2a3b 	mov.w	sl, fp, ror #8
 8020d42:	f10c 0c10 	add.w	ip, ip, #16
 8020d46:	ea4f 2431 	mov.w	r4, r1, ror #8
 8020d4a:	f859 2c04 	ldr.w	r2, [r9, #-4]
 8020d4e:	fa27 f484 	sxtab16	r4, r7, r4
 8020d52:	fa27 f181 	sxtab16	r1, r7, r1
 8020d56:	fa25 fa8a 	sxtab16	sl, r5, sl
 8020d5a:	fa25 fb8b 	sxtab16	fp, r5, fp
 8020d5e:	fb21 330b 	smlad	r3, r1, fp, r3
 8020d62:	fa25 fb82 	sxtab16	fp, r5, r2
 8020d66:	fb24 3a0a 	smlad	sl, r4, sl, r3
 8020d6a:	ea4f 2232 	mov.w	r2, r2, ror #8
 8020d6e:	fa25 f282 	sxtab16	r2, r5, r2
 8020d72:	fb21 030b 	smlad	r3, r1, fp, r0
 8020d76:	fb24 3302 	smlad	r3, r4, r2, r3
 8020d7a:	4546      	cmp	r6, r8
 8020d7c:	f47f af7b 	bne.w	8020c76 <arm_nn_vec_mat_mult_t_s8+0xb2>
 8020d80:	46ab      	mov	fp, r5
 8020d82:	990a      	ldr	r1, [sp, #40]	; 0x28
 8020d84:	9a06      	ldr	r2, [sp, #24]
 8020d86:	4596      	cmp	lr, r2
 8020d88:	f340 8133 	ble.w	8020ff2 <arm_nn_vec_mat_mult_t_s8+0x42e>
 8020d8c:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8020d8e:	1c54      	adds	r4, r2, #1
 8020d90:	f991 0000 	ldrsb.w	r0, [r1]
 8020d94:	f996 8000 	ldrsb.w	r8, [r6]
 8020d98:	45a6      	cmp	lr, r4
 8020d9a:	4428      	add	r0, r5
 8020d9c:	f916 c00e 	ldrsb.w	ip, [r6, lr]
 8020da0:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8020da2:	44a8      	add	r8, r5
 8020da4:	44ac      	add	ip, r5
 8020da6:	fb00 aa08 	mla	sl, r0, r8, sl
 8020daa:	fb00 330c 	mla	r3, r0, ip, r3
 8020dae:	f340 8120 	ble.w	8020ff2 <arm_nn_vec_mat_mult_t_s8+0x42e>
 8020db2:	eb06 040e 	add.w	r4, r6, lr
 8020db6:	f991 0001 	ldrsb.w	r0, [r1, #1]
 8020dba:	f996 8001 	ldrsb.w	r8, [r6, #1]
 8020dbe:	f994 c001 	ldrsb.w	ip, [r4, #1]
 8020dc2:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8020dc4:	44a8      	add	r8, r5
 8020dc6:	44ac      	add	ip, r5
 8020dc8:	4420      	add	r0, r4
 8020dca:	1c94      	adds	r4, r2, #2
 8020dcc:	45a6      	cmp	lr, r4
 8020dce:	fb00 aa08 	mla	sl, r0, r8, sl
 8020dd2:	fb00 330c 	mla	r3, r0, ip, r3
 8020dd6:	f106 0002 	add.w	r0, r6, #2
 8020dda:	f340 810a 	ble.w	8020ff2 <arm_nn_vec_mat_mult_t_s8+0x42e>
 8020dde:	f910 800e 	ldrsb.w	r8, [r0, lr]
 8020de2:	1cd4      	adds	r4, r2, #3
 8020de4:	f991 0002 	ldrsb.w	r0, [r1, #2]
 8020de8:	44a8      	add	r8, r5
 8020dea:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8020dec:	f996 c002 	ldrsb.w	ip, [r6, #2]
 8020df0:	45a6      	cmp	lr, r4
 8020df2:	4428      	add	r0, r5
 8020df4:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8020df6:	44ac      	add	ip, r5
 8020df8:	fb00 3308 	mla	r3, r0, r8, r3
 8020dfc:	fb00 aa0c 	mla	sl, r0, ip, sl
 8020e00:	f106 0003 	add.w	r0, r6, #3
 8020e04:	f340 80f5 	ble.w	8020ff2 <arm_nn_vec_mat_mult_t_s8+0x42e>
 8020e08:	f910 800e 	ldrsb.w	r8, [r0, lr]
 8020e0c:	1d14      	adds	r4, r2, #4
 8020e0e:	f991 0003 	ldrsb.w	r0, [r1, #3]
 8020e12:	44a8      	add	r8, r5
 8020e14:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8020e16:	f996 c003 	ldrsb.w	ip, [r6, #3]
 8020e1a:	45a6      	cmp	lr, r4
 8020e1c:	4428      	add	r0, r5
 8020e1e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8020e20:	44ac      	add	ip, r5
 8020e22:	fb00 3308 	mla	r3, r0, r8, r3
 8020e26:	fb00 aa0c 	mla	sl, r0, ip, sl
 8020e2a:	f106 0004 	add.w	r0, r6, #4
 8020e2e:	f340 80e0 	ble.w	8020ff2 <arm_nn_vec_mat_mult_t_s8+0x42e>
 8020e32:	f910 800e 	ldrsb.w	r8, [r0, lr]
 8020e36:	1d54      	adds	r4, r2, #5
 8020e38:	f991 0004 	ldrsb.w	r0, [r1, #4]
 8020e3c:	44a8      	add	r8, r5
 8020e3e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8020e40:	f996 c004 	ldrsb.w	ip, [r6, #4]
 8020e44:	45a6      	cmp	lr, r4
 8020e46:	4428      	add	r0, r5
 8020e48:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8020e4a:	44ac      	add	ip, r5
 8020e4c:	fb00 3308 	mla	r3, r0, r8, r3
 8020e50:	fb00 aa0c 	mla	sl, r0, ip, sl
 8020e54:	f106 0005 	add.w	r0, r6, #5
 8020e58:	f340 80cb 	ble.w	8020ff2 <arm_nn_vec_mat_mult_t_s8+0x42e>
 8020e5c:	f910 800e 	ldrsb.w	r8, [r0, lr]
 8020e60:	1d94      	adds	r4, r2, #6
 8020e62:	f991 0005 	ldrsb.w	r0, [r1, #5]
 8020e66:	44a8      	add	r8, r5
 8020e68:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8020e6a:	f996 c005 	ldrsb.w	ip, [r6, #5]
 8020e6e:	45a6      	cmp	lr, r4
 8020e70:	4428      	add	r0, r5
 8020e72:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8020e74:	44ac      	add	ip, r5
 8020e76:	fb00 3308 	mla	r3, r0, r8, r3
 8020e7a:	fb00 aa0c 	mla	sl, r0, ip, sl
 8020e7e:	f106 0006 	add.w	r0, r6, #6
 8020e82:	f340 80b6 	ble.w	8020ff2 <arm_nn_vec_mat_mult_t_s8+0x42e>
 8020e86:	f910 800e 	ldrsb.w	r8, [r0, lr]
 8020e8a:	1dd4      	adds	r4, r2, #7
 8020e8c:	f991 0006 	ldrsb.w	r0, [r1, #6]
 8020e90:	44a8      	add	r8, r5
 8020e92:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8020e94:	f996 c006 	ldrsb.w	ip, [r6, #6]
 8020e98:	45a6      	cmp	lr, r4
 8020e9a:	4428      	add	r0, r5
 8020e9c:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8020e9e:	44ac      	add	ip, r5
 8020ea0:	fb00 3308 	mla	r3, r0, r8, r3
 8020ea4:	fb00 aa0c 	mla	sl, r0, ip, sl
 8020ea8:	f106 0007 	add.w	r0, r6, #7
 8020eac:	f340 80a1 	ble.w	8020ff2 <arm_nn_vec_mat_mult_t_s8+0x42e>
 8020eb0:	f910 800e 	ldrsb.w	r8, [r0, lr]
 8020eb4:	f102 0408 	add.w	r4, r2, #8
 8020eb8:	f991 0007 	ldrsb.w	r0, [r1, #7]
 8020ebc:	44a8      	add	r8, r5
 8020ebe:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8020ec0:	f996 c007 	ldrsb.w	ip, [r6, #7]
 8020ec4:	45a6      	cmp	lr, r4
 8020ec6:	4428      	add	r0, r5
 8020ec8:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8020eca:	44ac      	add	ip, r5
 8020ecc:	fb00 3308 	mla	r3, r0, r8, r3
 8020ed0:	fb00 aa0c 	mla	sl, r0, ip, sl
 8020ed4:	f106 0008 	add.w	r0, r6, #8
 8020ed8:	f340 808b 	ble.w	8020ff2 <arm_nn_vec_mat_mult_t_s8+0x42e>
 8020edc:	f910 800e 	ldrsb.w	r8, [r0, lr]
 8020ee0:	f102 0409 	add.w	r4, r2, #9
 8020ee4:	f991 0008 	ldrsb.w	r0, [r1, #8]
 8020ee8:	44a8      	add	r8, r5
 8020eea:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8020eec:	f996 c008 	ldrsb.w	ip, [r6, #8]
 8020ef0:	45a6      	cmp	lr, r4
 8020ef2:	4428      	add	r0, r5
 8020ef4:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8020ef6:	44ac      	add	ip, r5
 8020ef8:	fb00 3308 	mla	r3, r0, r8, r3
 8020efc:	fb00 aa0c 	mla	sl, r0, ip, sl
 8020f00:	f106 0009 	add.w	r0, r6, #9
 8020f04:	dd75      	ble.n	8020ff2 <arm_nn_vec_mat_mult_t_s8+0x42e>
 8020f06:	f910 800e 	ldrsb.w	r8, [r0, lr]
 8020f0a:	f102 040a 	add.w	r4, r2, #10
 8020f0e:	f991 0009 	ldrsb.w	r0, [r1, #9]
 8020f12:	44a8      	add	r8, r5
 8020f14:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8020f16:	f996 c009 	ldrsb.w	ip, [r6, #9]
 8020f1a:	45a6      	cmp	lr, r4
 8020f1c:	4428      	add	r0, r5
 8020f1e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8020f20:	44ac      	add	ip, r5
 8020f22:	fb00 3308 	mla	r3, r0, r8, r3
 8020f26:	fb00 aa0c 	mla	sl, r0, ip, sl
 8020f2a:	f106 000a 	add.w	r0, r6, #10
 8020f2e:	dd60      	ble.n	8020ff2 <arm_nn_vec_mat_mult_t_s8+0x42e>
 8020f30:	f910 800e 	ldrsb.w	r8, [r0, lr]
 8020f34:	f102 040b 	add.w	r4, r2, #11
 8020f38:	f991 000a 	ldrsb.w	r0, [r1, #10]
 8020f3c:	44a8      	add	r8, r5
 8020f3e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8020f40:	f996 c00a 	ldrsb.w	ip, [r6, #10]
 8020f44:	45a6      	cmp	lr, r4
 8020f46:	4428      	add	r0, r5
 8020f48:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8020f4a:	44ac      	add	ip, r5
 8020f4c:	fb00 3308 	mla	r3, r0, r8, r3
 8020f50:	fb00 aa0c 	mla	sl, r0, ip, sl
 8020f54:	f106 000b 	add.w	r0, r6, #11
 8020f58:	dd4b      	ble.n	8020ff2 <arm_nn_vec_mat_mult_t_s8+0x42e>
 8020f5a:	f910 800e 	ldrsb.w	r8, [r0, lr]
 8020f5e:	f102 040c 	add.w	r4, r2, #12
 8020f62:	f991 000b 	ldrsb.w	r0, [r1, #11]
 8020f66:	44a8      	add	r8, r5
 8020f68:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8020f6a:	f996 c00b 	ldrsb.w	ip, [r6, #11]
 8020f6e:	45a6      	cmp	lr, r4
 8020f70:	4428      	add	r0, r5
 8020f72:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8020f74:	44ac      	add	ip, r5
 8020f76:	fb00 3308 	mla	r3, r0, r8, r3
 8020f7a:	fb00 aa0c 	mla	sl, r0, ip, sl
 8020f7e:	f106 000c 	add.w	r0, r6, #12
 8020f82:	dd36      	ble.n	8020ff2 <arm_nn_vec_mat_mult_t_s8+0x42e>
 8020f84:	f910 800e 	ldrsb.w	r8, [r0, lr]
 8020f88:	f102 040d 	add.w	r4, r2, #13
 8020f8c:	f991 000c 	ldrsb.w	r0, [r1, #12]
 8020f90:	44a8      	add	r8, r5
 8020f92:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8020f94:	f996 c00c 	ldrsb.w	ip, [r6, #12]
 8020f98:	45a6      	cmp	lr, r4
 8020f9a:	4428      	add	r0, r5
 8020f9c:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8020f9e:	44ac      	add	ip, r5
 8020fa0:	fb00 3308 	mla	r3, r0, r8, r3
 8020fa4:	fb00 aa0c 	mla	sl, r0, ip, sl
 8020fa8:	f106 000d 	add.w	r0, r6, #13
 8020fac:	dd21      	ble.n	8020ff2 <arm_nn_vec_mat_mult_t_s8+0x42e>
 8020fae:	f910 c00e 	ldrsb.w	ip, [r0, lr]
 8020fb2:	320e      	adds	r2, #14
 8020fb4:	f991 000d 	ldrsb.w	r0, [r1, #13]
 8020fb8:	f106 080e 	add.w	r8, r6, #14
 8020fbc:	44ac      	add	ip, r5
 8020fbe:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8020fc0:	f996 400d 	ldrsb.w	r4, [r6, #13]
 8020fc4:	4596      	cmp	lr, r2
 8020fc6:	4428      	add	r0, r5
 8020fc8:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8020fca:	442c      	add	r4, r5
 8020fcc:	fb00 330c 	mla	r3, r0, ip, r3
 8020fd0:	fb00 aa04 	mla	sl, r0, r4, sl
 8020fd4:	dd0d      	ble.n	8020ff2 <arm_nn_vec_mat_mult_t_s8+0x42e>
 8020fd6:	f991 200e 	ldrsb.w	r2, [r1, #14]
 8020fda:	f918 000e 	ldrsb.w	r0, [r8, lr]
 8020fde:	f996 100e 	ldrsb.w	r1, [r6, #14]
 8020fe2:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8020fe4:	4428      	add	r0, r5
 8020fe6:	4429      	add	r1, r5
 8020fe8:	4422      	add	r2, r4
 8020fea:	fb02 aa01 	mla	sl, r2, r1, sl
 8020fee:	fb02 3300 	mla	r3, r2, r0, r3
 8020ff2:	9a03      	ldr	r2, [sp, #12]
 8020ff4:	fa0a fa02 	lsl.w	sl, sl, r2
 8020ff8:	9a04      	ldr	r2, [sp, #16]
 8020ffa:	ebb2 7fda 	cmp.w	r2, sl, lsr #31
 8020ffe:	f000 8218 	beq.w	8021432 <arm_nn_vec_mat_mult_t_s8+0x86e>
 8021002:	48d6      	ldr	r0, [pc, #856]	; (802135c <arm_nn_vec_mat_mult_t_s8+0x798>)
 8021004:	f04f 31ff 	mov.w	r1, #4294967295
 8021008:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 802100a:	4552      	cmp	r2, sl
 802100c:	f040 81d2 	bne.w	80213b4 <arm_nn_vec_mat_mult_t_s8+0x7f0>
 8021010:	f1ba 4f00 	cmp.w	sl, #2147483648	; 0x80000000
 8021014:	f040 81ce 	bne.w	80213b4 <arm_nn_vec_mat_mult_t_s8+0x7f0>
 8021018:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802101a:	2a00      	cmp	r2, #0
 802101c:	f340 81ff 	ble.w	802141e <arm_nn_vec_mat_mult_t_s8+0x85a>
 8021020:	2400      	movs	r4, #0
 8021022:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8021026:	4620      	mov	r0, r4
 8021028:	4626      	mov	r6, r4
 802102a:	9a03      	ldr	r2, [sp, #12]
 802102c:	fa03 fc02 	lsl.w	ip, r3, r2
 8021030:	9b04      	ldr	r3, [sp, #16]
 8021032:	ebb3 7fdc 	cmp.w	r3, ip, lsr #31
 8021036:	f000 8200 	beq.w	802143a <arm_nn_vec_mat_mult_t_s8+0x876>
 802103a:	4ac8      	ldr	r2, [pc, #800]	; (802135c <arm_nn_vec_mat_mult_t_s8+0x798>)
 802103c:	f04f 33ff 	mov.w	r3, #4294967295
 8021040:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8021042:	4565      	cmp	r5, ip
 8021044:	f040 81d5 	bne.w	80213f2 <arm_nn_vec_mat_mult_t_s8+0x82e>
 8021048:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 802104c:	f040 81d1 	bne.w	80213f2 <arm_nn_vec_mat_mult_t_s8+0x82e>
 8021050:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8021054:	4010      	ands	r0, r2
 8021056:	4122      	asrs	r2, r4
 8021058:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802105a:	bf48      	it	mi
 802105c:	3601      	addmi	r6, #1
 802105e:	4419      	add	r1, r3
 8021060:	42b0      	cmp	r0, r6
 8021062:	9808      	ldr	r0, [sp, #32]
 8021064:	bfc8      	it	gt
 8021066:	3201      	addgt	r2, #1
 8021068:	441a      	add	r2, r3
 802106a:	9b02      	ldr	r3, [sp, #8]
 802106c:	4403      	add	r3, r0
 802106e:	9302      	str	r3, [sp, #8]
 8021070:	9b01      	ldr	r3, [sp, #4]
 8021072:	3308      	adds	r3, #8
 8021074:	9301      	str	r3, [sp, #4]
 8021076:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8021078:	4299      	cmp	r1, r3
 802107a:	bfb8      	it	lt
 802107c:	4619      	movlt	r1, r3
 802107e:	429a      	cmp	r2, r3
 8021080:	bfb8      	it	lt
 8021082:	461a      	movlt	r2, r3
 8021084:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021086:	4299      	cmp	r1, r3
 8021088:	bfa8      	it	ge
 802108a:	4619      	movge	r1, r3
 802108c:	429a      	cmp	r2, r3
 802108e:	bfa8      	it	ge
 8021090:	461a      	movge	r2, r3
 8021092:	9b05      	ldr	r3, [sp, #20]
 8021094:	f803 2c01 	strb.w	r2, [r3, #-1]
 8021098:	3302      	adds	r3, #2
 802109a:	f803 1c04 	strb.w	r1, [r3, #-4]
 802109e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80210a0:	9305      	str	r3, [sp, #20]
 80210a2:	429a      	cmp	r2, r3
 80210a4:	f47f add4 	bne.w	8020c50 <arm_nn_vec_mat_mult_t_s8+0x8c>
 80210a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80210aa:	465d      	mov	r5, fp
 80210ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80210ae:	085b      	lsrs	r3, r3, #1
 80210b0:	9a08      	ldr	r2, [sp, #32]
 80210b2:	3301      	adds	r3, #1
 80210b4:	fb03 1202 	mla	r2, r3, r2, r1
 80210b8:	920b      	str	r2, [sp, #44]	; 0x2c
 80210ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80210bc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80210c0:	920e      	str	r2, [sp, #56]	; 0x38
 80210c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80210c4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80210c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80210ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80210cc:	07db      	lsls	r3, r3, #31
 80210ce:	f140 816d 	bpl.w	80213ac <arm_nn_vec_mat_mult_t_s8+0x7e8>
 80210d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80210d4:	f1be 0f0f 	cmp.w	lr, #15
 80210d8:	681b      	ldr	r3, [r3, #0]
 80210da:	f340 81ea 	ble.w	80214b2 <arm_nn_vec_mat_mult_t_s8+0x8ee>
 80210de:	f1ae 0210 	sub.w	r2, lr, #16
 80210e2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80210e4:	0912      	lsrs	r2, r2, #4
 80210e6:	3201      	adds	r2, #1
 80210e8:	0111      	lsls	r1, r2, #4
 80210ea:	4692      	mov	sl, r2
 80210ec:	9a07      	ldr	r2, [sp, #28]
 80210ee:	4689      	mov	r9, r1
 80210f0:	eb02 0c01 	add.w	ip, r2, r1
 80210f4:	6830      	ldr	r0, [r6, #0]
 80210f6:	6811      	ldr	r1, [r2, #0]
 80210f8:	ea4f 2830 	mov.w	r8, r0, ror #8
 80210fc:	fa25 f080 	sxtab16	r0, r5, r0
 8021100:	fa25 f488 	sxtab16	r4, r5, r8
 8021104:	ea4f 2831 	mov.w	r8, r1, ror #8
 8021108:	fa27 f181 	sxtab16	r1, r7, r1
 802110c:	fa27 f888 	sxtab16	r8, r7, r8
 8021110:	fb21 3300 	smlad	r3, r1, r0, r3
 8021114:	fb28 3804 	smlad	r8, r8, r4, r3
 8021118:	6870      	ldr	r0, [r6, #4]
 802111a:	6853      	ldr	r3, [r2, #4]
 802111c:	ea4f 2430 	mov.w	r4, r0, ror #8
 8021120:	ea4f 2133 	mov.w	r1, r3, ror #8
 8021124:	fa25 f080 	sxtab16	r0, r5, r0
 8021128:	fa25 f484 	sxtab16	r4, r5, r4
 802112c:	fa27 f383 	sxtab16	r3, r7, r3
 8021130:	fa27 f181 	sxtab16	r1, r7, r1
 8021134:	fb23 8300 	smlad	r3, r3, r0, r8
 8021138:	fb21 3404 	smlad	r4, r1, r4, r3
 802113c:	68b0      	ldr	r0, [r6, #8]
 802113e:	6891      	ldr	r1, [r2, #8]
 8021140:	ea4f 2830 	mov.w	r8, r0, ror #8
 8021144:	ea4f 2331 	mov.w	r3, r1, ror #8
 8021148:	fa25 f080 	sxtab16	r0, r5, r0
 802114c:	fa25 f888 	sxtab16	r8, r5, r8
 8021150:	fa27 f181 	sxtab16	r1, r7, r1
 8021154:	fa27 f383 	sxtab16	r3, r7, r3
 8021158:	fb21 4100 	smlad	r1, r1, r0, r4
 802115c:	fb23 1108 	smlad	r1, r3, r8, r1
 8021160:	68f0      	ldr	r0, [r6, #12]
 8021162:	3210      	adds	r2, #16
 8021164:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8021168:	3610      	adds	r6, #16
 802116a:	ea4f 2830 	mov.w	r8, r0, ror #8
 802116e:	ea4f 2433 	mov.w	r4, r3, ror #8
 8021172:	fa25 f080 	sxtab16	r0, r5, r0
 8021176:	fa25 f888 	sxtab16	r8, r5, r8
 802117a:	fa27 f383 	sxtab16	r3, r7, r3
 802117e:	fa27 f484 	sxtab16	r4, r7, r4
 8021182:	fb23 1300 	smlad	r3, r3, r0, r1
 8021186:	fb24 3308 	smlad	r3, r4, r8, r3
 802118a:	4562      	cmp	r2, ip
 802118c:	d1b2      	bne.n	80210f4 <arm_nn_vec_mat_mult_t_s8+0x530>
 802118e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8021190:	9207      	str	r2, [sp, #28]
 8021192:	4652      	mov	r2, sl
 8021194:	4449      	add	r1, r9
 8021196:	0112      	lsls	r2, r2, #4
 8021198:	910b      	str	r1, [sp, #44]	; 0x2c
 802119a:	4596      	cmp	lr, r2
 802119c:	f340 80e0 	ble.w	8021360 <arm_nn_vec_mat_mult_t_s8+0x79c>
 80211a0:	9d07      	ldr	r5, [sp, #28]
 80211a2:	1c51      	adds	r1, r2, #1
 80211a4:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80211a6:	f995 0000 	ldrsb.w	r0, [r5]
 80211aa:	458e      	cmp	lr, r1
 80211ac:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80211ae:	4438      	add	r0, r7
 80211b0:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 80211b2:	f996 4000 	ldrsb.w	r4, [r6]
 80211b6:	443c      	add	r4, r7
 80211b8:	fb04 3300 	mla	r3, r4, r0, r3
 80211bc:	f340 80d0 	ble.w	8021360 <arm_nn_vec_mat_mult_t_s8+0x79c>
 80211c0:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80211c2:	1c91      	adds	r1, r2, #2
 80211c4:	f995 0001 	ldrsb.w	r0, [r5, #1]
 80211c8:	f996 4001 	ldrsb.w	r4, [r6, #1]
 80211cc:	458e      	cmp	lr, r1
 80211ce:	4438      	add	r0, r7
 80211d0:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 80211d2:	443c      	add	r4, r7
 80211d4:	fb04 3300 	mla	r3, r4, r0, r3
 80211d8:	f340 80c2 	ble.w	8021360 <arm_nn_vec_mat_mult_t_s8+0x79c>
 80211dc:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80211de:	1cd1      	adds	r1, r2, #3
 80211e0:	f995 0002 	ldrsb.w	r0, [r5, #2]
 80211e4:	f996 4002 	ldrsb.w	r4, [r6, #2]
 80211e8:	458e      	cmp	lr, r1
 80211ea:	4438      	add	r0, r7
 80211ec:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 80211ee:	443c      	add	r4, r7
 80211f0:	fb04 3300 	mla	r3, r4, r0, r3
 80211f4:	f340 80b4 	ble.w	8021360 <arm_nn_vec_mat_mult_t_s8+0x79c>
 80211f8:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80211fa:	1d11      	adds	r1, r2, #4
 80211fc:	f995 0003 	ldrsb.w	r0, [r5, #3]
 8021200:	f996 4003 	ldrsb.w	r4, [r6, #3]
 8021204:	458e      	cmp	lr, r1
 8021206:	4438      	add	r0, r7
 8021208:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 802120a:	443c      	add	r4, r7
 802120c:	fb04 3300 	mla	r3, r4, r0, r3
 8021210:	f340 80a6 	ble.w	8021360 <arm_nn_vec_mat_mult_t_s8+0x79c>
 8021214:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8021216:	1d51      	adds	r1, r2, #5
 8021218:	f995 0004 	ldrsb.w	r0, [r5, #4]
 802121c:	f996 4004 	ldrsb.w	r4, [r6, #4]
 8021220:	458e      	cmp	lr, r1
 8021222:	4438      	add	r0, r7
 8021224:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8021226:	443c      	add	r4, r7
 8021228:	fb04 3300 	mla	r3, r4, r0, r3
 802122c:	f340 8098 	ble.w	8021360 <arm_nn_vec_mat_mult_t_s8+0x79c>
 8021230:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8021232:	1d91      	adds	r1, r2, #6
 8021234:	f995 0005 	ldrsb.w	r0, [r5, #5]
 8021238:	f996 4005 	ldrsb.w	r4, [r6, #5]
 802123c:	458e      	cmp	lr, r1
 802123e:	4438      	add	r0, r7
 8021240:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8021242:	443c      	add	r4, r7
 8021244:	fb04 3300 	mla	r3, r4, r0, r3
 8021248:	f340 808a 	ble.w	8021360 <arm_nn_vec_mat_mult_t_s8+0x79c>
 802124c:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 802124e:	1dd1      	adds	r1, r2, #7
 8021250:	f995 0006 	ldrsb.w	r0, [r5, #6]
 8021254:	f996 4006 	ldrsb.w	r4, [r6, #6]
 8021258:	458e      	cmp	lr, r1
 802125a:	4438      	add	r0, r7
 802125c:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 802125e:	443c      	add	r4, r7
 8021260:	fb04 3300 	mla	r3, r4, r0, r3
 8021264:	dd7c      	ble.n	8021360 <arm_nn_vec_mat_mult_t_s8+0x79c>
 8021266:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8021268:	f102 0108 	add.w	r1, r2, #8
 802126c:	f995 0007 	ldrsb.w	r0, [r5, #7]
 8021270:	f996 4007 	ldrsb.w	r4, [r6, #7]
 8021274:	458e      	cmp	lr, r1
 8021276:	4438      	add	r0, r7
 8021278:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 802127a:	443c      	add	r4, r7
 802127c:	fb04 3300 	mla	r3, r4, r0, r3
 8021280:	dd6e      	ble.n	8021360 <arm_nn_vec_mat_mult_t_s8+0x79c>
 8021282:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8021284:	f102 0109 	add.w	r1, r2, #9
 8021288:	f995 0008 	ldrsb.w	r0, [r5, #8]
 802128c:	f996 4008 	ldrsb.w	r4, [r6, #8]
 8021290:	458e      	cmp	lr, r1
 8021292:	4438      	add	r0, r7
 8021294:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8021296:	443c      	add	r4, r7
 8021298:	fb04 3300 	mla	r3, r4, r0, r3
 802129c:	dd60      	ble.n	8021360 <arm_nn_vec_mat_mult_t_s8+0x79c>
 802129e:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80212a0:	f102 010a 	add.w	r1, r2, #10
 80212a4:	f995 0009 	ldrsb.w	r0, [r5, #9]
 80212a8:	f996 4009 	ldrsb.w	r4, [r6, #9]
 80212ac:	458e      	cmp	lr, r1
 80212ae:	4438      	add	r0, r7
 80212b0:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 80212b2:	443c      	add	r4, r7
 80212b4:	fb04 3300 	mla	r3, r4, r0, r3
 80212b8:	dd52      	ble.n	8021360 <arm_nn_vec_mat_mult_t_s8+0x79c>
 80212ba:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80212bc:	f102 010b 	add.w	r1, r2, #11
 80212c0:	f995 000a 	ldrsb.w	r0, [r5, #10]
 80212c4:	f996 400a 	ldrsb.w	r4, [r6, #10]
 80212c8:	458e      	cmp	lr, r1
 80212ca:	4438      	add	r0, r7
 80212cc:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 80212ce:	443c      	add	r4, r7
 80212d0:	fb04 3300 	mla	r3, r4, r0, r3
 80212d4:	dd44      	ble.n	8021360 <arm_nn_vec_mat_mult_t_s8+0x79c>
 80212d6:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80212d8:	f102 010c 	add.w	r1, r2, #12
 80212dc:	f995 000b 	ldrsb.w	r0, [r5, #11]
 80212e0:	f996 400b 	ldrsb.w	r4, [r6, #11]
 80212e4:	458e      	cmp	lr, r1
 80212e6:	4438      	add	r0, r7
 80212e8:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 80212ea:	443c      	add	r4, r7
 80212ec:	fb04 3300 	mla	r3, r4, r0, r3
 80212f0:	dd36      	ble.n	8021360 <arm_nn_vec_mat_mult_t_s8+0x79c>
 80212f2:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80212f4:	f102 010d 	add.w	r1, r2, #13
 80212f8:	f995 000c 	ldrsb.w	r0, [r5, #12]
 80212fc:	f996 400c 	ldrsb.w	r4, [r6, #12]
 8021300:	458e      	cmp	lr, r1
 8021302:	4438      	add	r0, r7
 8021304:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8021306:	443c      	add	r4, r7
 8021308:	fb04 3300 	mla	r3, r4, r0, r3
 802130c:	dd28      	ble.n	8021360 <arm_nn_vec_mat_mult_t_s8+0x79c>
 802130e:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8021310:	f102 010e 	add.w	r1, r2, #14
 8021314:	f995 000d 	ldrsb.w	r0, [r5, #13]
 8021318:	f996 400d 	ldrsb.w	r4, [r6, #13]
 802131c:	458e      	cmp	lr, r1
 802131e:	4438      	add	r0, r7
 8021320:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8021322:	443c      	add	r4, r7
 8021324:	fb04 3300 	mla	r3, r4, r0, r3
 8021328:	dd1a      	ble.n	8021360 <arm_nn_vec_mat_mult_t_s8+0x79c>
 802132a:	f995 100e 	ldrsb.w	r1, [r5, #14]
 802132e:	462c      	mov	r4, r5
 8021330:	f996 000e 	ldrsb.w	r0, [r6, #14]
 8021334:	320f      	adds	r2, #15
 8021336:	4635      	mov	r5, r6
 8021338:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 802133a:	4438      	add	r0, r7
 802133c:	4596      	cmp	lr, r2
 802133e:	4431      	add	r1, r6
 8021340:	fb00 3301 	mla	r3, r0, r1, r3
 8021344:	dd0c      	ble.n	8021360 <arm_nn_vec_mat_mult_t_s8+0x79c>
 8021346:	f995 200f 	ldrsb.w	r2, [r5, #15]
 802134a:	f994 100f 	ldrsb.w	r1, [r4, #15]
 802134e:	981c      	ldr	r0, [sp, #112]	; 0x70
 8021350:	443a      	add	r2, r7
 8021352:	4401      	add	r1, r0
 8021354:	fb01 3302 	mla	r3, r1, r2, r3
 8021358:	e002      	b.n	8021360 <arm_nn_vec_mat_mult_t_s8+0x79c>
 802135a:	bf00      	nop
 802135c:	c0000001 	.word	0xc0000001
 8021360:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8021362:	ea22 71e2 	bic.w	r1, r2, r2, asr #31
 8021366:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8021368:	fa03 f101 	lsl.w	r1, r3, r1
 802136c:	0fd2      	lsrs	r2, r2, #31
 802136e:	ebb2 7fd1 	cmp.w	r2, r1, lsr #31
 8021372:	f000 80a0 	beq.w	80214b6 <arm_nn_vec_mat_mult_t_s8+0x8f2>
 8021376:	4a52      	ldr	r2, [pc, #328]	; (80214c0 <arm_nn_vec_mat_mult_t_s8+0x8fc>)
 8021378:	f04f 33ff 	mov.w	r3, #4294967295
 802137c:	981f      	ldr	r0, [sp, #124]	; 0x7c
 802137e:	4288      	cmp	r0, r1
 8021380:	d16b      	bne.n	802145a <arm_nn_vec_mat_mult_t_s8+0x896>
 8021382:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8021386:	d168      	bne.n	802145a <arm_nn_vec_mat_mult_t_s8+0x896>
 8021388:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802138a:	2b00      	cmp	r3, #0
 802138c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8021390:	f340 808d 	ble.w	80214ae <arm_nn_vec_mat_mult_t_s8+0x8ea>
 8021394:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8021396:	4413      	add	r3, r2
 8021398:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 802139a:	4293      	cmp	r3, r2
 802139c:	bfb8      	it	lt
 802139e:	4613      	movlt	r3, r2
 80213a0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80213a2:	4293      	cmp	r3, r2
 80213a4:	bfa8      	it	ge
 80213a6:	4613      	movge	r3, r2
 80213a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80213aa:	7013      	strb	r3, [r2, #0]
 80213ac:	2000      	movs	r0, #0
 80213ae:	b013      	add	sp, #76	; 0x4c
 80213b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80213b4:	fbc2 010a 	smlal	r0, r1, r2, sl
 80213b8:	2800      	cmp	r0, #0
 80213ba:	f171 0200 	sbcs.w	r2, r1, #0
 80213be:	da06      	bge.n	80213ce <arm_nn_vec_mat_mult_t_s8+0x80a>
 80213c0:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 80213c4:	2500      	movs	r5, #0
 80213c6:	1824      	adds	r4, r4, r0
 80213c8:	414d      	adcs	r5, r1
 80213ca:	4620      	mov	r0, r4
 80213cc:	4629      	mov	r1, r5
 80213ce:	0fc2      	lsrs	r2, r0, #31
 80213d0:	ea42 0141 	orr.w	r1, r2, r1, lsl #1
 80213d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80213d6:	2a00      	cmp	r2, #0
 80213d8:	dd23      	ble.n	8021422 <arm_nn_vec_mat_mult_t_s8+0x85e>
 80213da:	2900      	cmp	r1, #0
 80213dc:	da35      	bge.n	802144a <arm_nn_vec_mat_mult_t_s8+0x886>
 80213de:	2600      	movs	r6, #0
 80213e0:	4632      	mov	r2, r6
 80213e2:	4630      	mov	r0, r6
 80213e4:	4634      	mov	r4, r6
 80213e6:	f106 0c01 	add.w	ip, r6, #1
 80213ea:	4594      	cmp	ip, r2
 80213ec:	bfb8      	it	lt
 80213ee:	3101      	addlt	r1, #1
 80213f0:	e61b      	b.n	802102a <arm_nn_vec_mat_mult_t_s8+0x466>
 80213f2:	fbc5 230c 	smlal	r2, r3, r5, ip
 80213f6:	4699      	mov	r9, r3
 80213f8:	2a00      	cmp	r2, #0
 80213fa:	4690      	mov	r8, r2
 80213fc:	f179 0300 	sbcs.w	r3, r9, #0
 8021400:	da08      	bge.n	8021414 <arm_nn_vec_mat_mult_t_s8+0x850>
 8021402:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8021406:	2300      	movs	r3, #0
 8021408:	eb12 0208 	adds.w	r2, r2, r8
 802140c:	eb43 0309 	adc.w	r3, r3, r9
 8021410:	4690      	mov	r8, r2
 8021412:	4699      	mov	r9, r3
 8021414:	ea4f 72d8 	mov.w	r2, r8, lsr #31
 8021418:	ea42 0249 	orr.w	r2, r2, r9, lsl #1
 802141c:	e61a      	b.n	8021054 <arm_nn_vec_mat_mult_t_s8+0x490>
 802141e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8021422:	980d      	ldr	r0, [sp, #52]	; 0x34
 8021424:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8021426:	ea01 0200 	and.w	r2, r1, r0
 802142a:	4121      	asrs	r1, r4
 802142c:	d509      	bpl.n	8021442 <arm_nn_vec_mat_mult_t_s8+0x87e>
 802142e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8021430:	e7d9      	b.n	80213e6 <arm_nn_vec_mat_mult_t_s8+0x822>
 8021432:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8021436:	2100      	movs	r1, #0
 8021438:	e5e6      	b.n	8021008 <arm_nn_vec_mat_mult_t_s8+0x444>
 802143a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 802143e:	2300      	movs	r3, #0
 8021440:	e5fe      	b.n	8021040 <arm_nn_vec_mat_mult_t_s8+0x47c>
 8021442:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 8021446:	4666      	mov	r6, ip
 8021448:	e7cf      	b.n	80213ea <arm_nn_vec_mat_mult_t_s8+0x826>
 802144a:	2400      	movs	r4, #0
 802144c:	4620      	mov	r0, r4
 802144e:	4626      	mov	r6, r4
 8021450:	e5eb      	b.n	802102a <arm_nn_vec_mat_mult_t_s8+0x466>
 8021452:	9e02      	ldr	r6, [sp, #8]
 8021454:	2200      	movs	r2, #0
 8021456:	9907      	ldr	r1, [sp, #28]
 8021458:	e495      	b.n	8020d86 <arm_nn_vec_mat_mult_t_s8+0x1c2>
 802145a:	fbc0 2301 	smlal	r2, r3, r0, r1
 802145e:	461d      	mov	r5, r3
 8021460:	2a00      	cmp	r2, #0
 8021462:	4614      	mov	r4, r2
 8021464:	f175 0300 	sbcs.w	r3, r5, #0
 8021468:	db14      	blt.n	8021494 <arm_nn_vec_mat_mult_t_s8+0x8d0>
 802146a:	0fe2      	lsrs	r2, r4, #31
 802146c:	ea42 0345 	orr.w	r3, r2, r5, lsl #1
 8021470:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8021472:	2a00      	cmp	r2, #0
 8021474:	dc8e      	bgt.n	8021394 <arm_nn_vec_mat_mult_t_s8+0x7d0>
 8021476:	4251      	negs	r1, r2
 8021478:	2201      	movs	r2, #1
 802147a:	408a      	lsls	r2, r1
 802147c:	3a01      	subs	r2, #1
 802147e:	ea02 0003 	and.w	r0, r2, r3
 8021482:	410b      	asrs	r3, r1
 8021484:	ea4f 0262 	mov.w	r2, r2, asr #1
 8021488:	bf48      	it	mi
 802148a:	3201      	addmi	r2, #1
 802148c:	4290      	cmp	r0, r2
 802148e:	bfc8      	it	gt
 8021490:	3301      	addgt	r3, #1
 8021492:	e77f      	b.n	8021394 <arm_nn_vec_mat_mult_t_s8+0x7d0>
 8021494:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8021498:	2100      	movs	r1, #0
 802149a:	1824      	adds	r4, r4, r0
 802149c:	414d      	adcs	r5, r1
 802149e:	0fe2      	lsrs	r2, r4, #31
 80214a0:	ea42 0345 	orr.w	r3, r2, r5, lsl #1
 80214a4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80214a6:	2a00      	cmp	r2, #0
 80214a8:	f73f af74 	bgt.w	8021394 <arm_nn_vec_mat_mult_t_s8+0x7d0>
 80214ac:	e7e3      	b.n	8021476 <arm_nn_vec_mat_mult_t_s8+0x8b2>
 80214ae:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80214b0:	e7e1      	b.n	8021476 <arm_nn_vec_mat_mult_t_s8+0x8b2>
 80214b2:	2200      	movs	r2, #0
 80214b4:	e671      	b.n	802119a <arm_nn_vec_mat_mult_t_s8+0x5d6>
 80214b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80214ba:	2300      	movs	r3, #0
 80214bc:	e75e      	b.n	802137c <arm_nn_vec_mat_mult_t_s8+0x7b8>
 80214be:	bf00      	nop
 80214c0:	c0000001 	.word	0xc0000001

080214c4 <arm_float_to_q15>:
 80214c4:	b4f0      	push	{r4, r5, r6, r7}
 80214c6:	0897      	lsrs	r7, r2, #2
 80214c8:	d06b      	beq.n	80215a2 <arm_float_to_q15+0xde>
 80214ca:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80214ce:	f100 0510 	add.w	r5, r0, #16
 80214d2:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 80214d6:	f101 0408 	add.w	r4, r1, #8
 80214da:	463e      	mov	r6, r7
 80214dc:	ed9f 6a55 	vldr	s12, [pc, #340]	; 8021634 <arm_float_to_q15+0x170>
 80214e0:	e00b      	b.n	80214fa <arm_float_to_q15+0x36>
 80214e2:	ee17 3a10 	vmov	r3, s14
 80214e6:	f303 030f 	ssat	r3, #16, r3
 80214ea:	3e01      	subs	r6, #1
 80214ec:	f824 3c02 	strh.w	r3, [r4, #-2]
 80214f0:	f105 0510 	add.w	r5, r5, #16
 80214f4:	f104 0408 	add.w	r4, r4, #8
 80214f8:	d04f      	beq.n	802159a <arm_float_to_q15+0xd6>
 80214fa:	ed55 7a04 	vldr	s15, [r5, #-16]
 80214fe:	ee27 7a86 	vmul.f32	s14, s15, s12
 8021502:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8021506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802150a:	fe76 7aa5 	vselgt.f32	s15, s13, s11
 802150e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021512:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021516:	ee17 3a90 	vmov	r3, s15
 802151a:	f303 030f 	ssat	r3, #16, r3
 802151e:	f824 3c08 	strh.w	r3, [r4, #-8]
 8021522:	ed55 7a03 	vldr	s15, [r5, #-12]
 8021526:	ee27 7a86 	vmul.f32	s14, s15, s12
 802152a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 802152e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021532:	fe76 7aa5 	vselgt.f32	s15, s13, s11
 8021536:	ee77 7a87 	vadd.f32	s15, s15, s14
 802153a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802153e:	ee17 3a90 	vmov	r3, s15
 8021542:	f303 030f 	ssat	r3, #16, r3
 8021546:	f824 3c06 	strh.w	r3, [r4, #-6]
 802154a:	ed55 7a02 	vldr	s15, [r5, #-8]
 802154e:	ee27 7a86 	vmul.f32	s14, s15, s12
 8021552:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8021556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802155a:	fe76 7aa5 	vselgt.f32	s15, s13, s11
 802155e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021562:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021566:	ee17 3a90 	vmov	r3, s15
 802156a:	f303 030f 	ssat	r3, #16, r3
 802156e:	f824 3c04 	strh.w	r3, [r4, #-4]
 8021572:	ed55 7a01 	vldr	s15, [r5, #-4]
 8021576:	ee67 7a86 	vmul.f32	s15, s15, s12
 802157a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 802157e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8021582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021586:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 802158a:	dcaa      	bgt.n	80214e2 <arm_float_to_q15+0x1e>
 802158c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8021590:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021594:	ee17 3a90 	vmov	r3, s15
 8021598:	e7a5      	b.n	80214e6 <arm_float_to_q15+0x22>
 802159a:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 802159e:	eb00 1007 	add.w	r0, r0, r7, lsl #4
 80215a2:	f012 0203 	ands.w	r2, r2, #3
 80215a6:	d042      	beq.n	802162e <arm_float_to_q15+0x16a>
 80215a8:	edd0 7a00 	vldr	s15, [r0]
 80215ac:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80215b0:	eddf 5a20 	vldr	s11, [pc, #128]	; 8021634 <arm_float_to_q15+0x170>
 80215b4:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 80215b8:	ee67 6aa5 	vmul.f32	s13, s15, s11
 80215bc:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80215c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80215c4:	fe77 7a06 	vselgt.f32	s15, s14, s12
 80215c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80215cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80215d0:	ee17 3a90 	vmov	r3, s15
 80215d4:	f303 030f 	ssat	r3, #16, r3
 80215d8:	2a01      	cmp	r2, #1
 80215da:	800b      	strh	r3, [r1, #0]
 80215dc:	d027      	beq.n	802162e <arm_float_to_q15+0x16a>
 80215de:	edd0 7a01 	vldr	s15, [r0, #4]
 80215e2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80215e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80215ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80215ee:	fe77 6a06 	vselgt.f32	s13, s14, s12
 80215f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80215f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80215fa:	ee17 3a90 	vmov	r3, s15
 80215fe:	f303 030f 	ssat	r3, #16, r3
 8021602:	2a02      	cmp	r2, #2
 8021604:	804b      	strh	r3, [r1, #2]
 8021606:	d012      	beq.n	802162e <arm_float_to_q15+0x16a>
 8021608:	edd0 7a02 	vldr	s15, [r0, #8]
 802160c:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8021610:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8021614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021618:	fe37 7a06 	vselgt.f32	s14, s14, s12
 802161c:	ee37 7a25 	vadd.f32	s14, s14, s11
 8021620:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8021624:	ee17 3a10 	vmov	r3, s14
 8021628:	f303 030f 	ssat	r3, #16, r3
 802162c:	808b      	strh	r3, [r1, #4]
 802162e:	bcf0      	pop	{r4, r5, r6, r7}
 8021630:	4770      	bx	lr
 8021632:	bf00      	nop
 8021634:	47000000 	.word	0x47000000

08021638 <arm_float_to_q7>:
 8021638:	b4f0      	push	{r4, r5, r6, r7}
 802163a:	0897      	lsrs	r7, r2, #2
 802163c:	d066      	beq.n	802170c <arm_float_to_q7+0xd4>
 802163e:	1d0c      	adds	r4, r1, #4
 8021640:	ea4f 0c87 	mov.w	ip, r7, lsl #2
 8021644:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8021648:	f100 0510 	add.w	r5, r0, #16
 802164c:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 8021650:	eb04 060c 	add.w	r6, r4, ip
 8021654:	ed9f 6a5b 	vldr	s12, [pc, #364]	; 80217c4 <arm_float_to_q7+0x18c>
 8021658:	ed55 7a04 	vldr	s15, [r5, #-16]
 802165c:	ee27 7a86 	vmul.f32	s14, s15, s12
 8021660:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8021664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021668:	fe76 7aa5 	vselgt.f32	s15, s13, s11
 802166c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021670:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021674:	ee17 3a90 	vmov	r3, s15
 8021678:	b21b      	sxth	r3, r3
 802167a:	f303 0307 	ssat	r3, #8, r3
 802167e:	f804 3c04 	strb.w	r3, [r4, #-4]
 8021682:	ed55 7a03 	vldr	s15, [r5, #-12]
 8021686:	ee27 7a86 	vmul.f32	s14, s15, s12
 802168a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 802168e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021692:	fe76 7aa5 	vselgt.f32	s15, s13, s11
 8021696:	ee77 7a87 	vadd.f32	s15, s15, s14
 802169a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802169e:	ee17 3a90 	vmov	r3, s15
 80216a2:	b21b      	sxth	r3, r3
 80216a4:	f303 0307 	ssat	r3, #8, r3
 80216a8:	f804 3c03 	strb.w	r3, [r4, #-3]
 80216ac:	ed55 7a02 	vldr	s15, [r5, #-8]
 80216b0:	ee27 7a86 	vmul.f32	s14, s15, s12
 80216b4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80216b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80216bc:	fe76 7aa5 	vselgt.f32	s15, s13, s11
 80216c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80216c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80216c8:	ee17 3a90 	vmov	r3, s15
 80216cc:	b21b      	sxth	r3, r3
 80216ce:	f303 0307 	ssat	r3, #8, r3
 80216d2:	f804 3c02 	strb.w	r3, [r4, #-2]
 80216d6:	ed55 7a01 	vldr	s15, [r5, #-4]
 80216da:	ee67 7a86 	vmul.f32	s15, s15, s12
 80216de:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80216e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80216e6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80216ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80216ee:	ee17 3a10 	vmov	r3, s14
 80216f2:	b21b      	sxth	r3, r3
 80216f4:	dd55      	ble.n	80217a2 <arm_float_to_q7+0x16a>
 80216f6:	f303 0307 	ssat	r3, #8, r3
 80216fa:	f804 3c01 	strb.w	r3, [r4, #-1]
 80216fe:	3404      	adds	r4, #4
 8021700:	3510      	adds	r5, #16
 8021702:	42a6      	cmp	r6, r4
 8021704:	d1a8      	bne.n	8021658 <arm_float_to_q7+0x20>
 8021706:	4461      	add	r1, ip
 8021708:	eb00 1007 	add.w	r0, r0, r7, lsl #4
 802170c:	f012 0203 	ands.w	r2, r2, #3
 8021710:	d045      	beq.n	802179e <arm_float_to_q7+0x166>
 8021712:	edd0 7a00 	vldr	s15, [r0]
 8021716:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 802171a:	ed9f 5a2a 	vldr	s10, [pc, #168]	; 80217c4 <arm_float_to_q7+0x18c>
 802171e:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 8021722:	ee67 6a85 	vmul.f32	s13, s15, s10
 8021726:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 802172a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802172e:	fe77 7a25 	vselgt.f32	s15, s14, s11
 8021732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021736:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802173a:	ee17 3a90 	vmov	r3, s15
 802173e:	b21b      	sxth	r3, r3
 8021740:	f303 0307 	ssat	r3, #8, r3
 8021744:	2a01      	cmp	r2, #1
 8021746:	700b      	strb	r3, [r1, #0]
 8021748:	d029      	beq.n	802179e <arm_float_to_q7+0x166>
 802174a:	edd0 6a01 	vldr	s13, [r0, #4]
 802174e:	ee26 6a85 	vmul.f32	s12, s13, s10
 8021752:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8021756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802175a:	fe77 6a25 	vselgt.f32	s13, s14, s11
 802175e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8021762:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8021766:	ee16 3a90 	vmov	r3, s13
 802176a:	b21b      	sxth	r3, r3
 802176c:	f303 0307 	ssat	r3, #8, r3
 8021770:	2a02      	cmp	r2, #2
 8021772:	704b      	strb	r3, [r1, #1]
 8021774:	d013      	beq.n	802179e <arm_float_to_q7+0x166>
 8021776:	edd0 7a02 	vldr	s15, [r0, #8]
 802177a:	ee27 5a85 	vmul.f32	s10, s15, s10
 802177e:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 8021782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021786:	fe77 7a25 	vselgt.f32	s15, s14, s11
 802178a:	ee77 7a85 	vadd.f32	s15, s15, s10
 802178e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021792:	ee17 3a90 	vmov	r3, s15
 8021796:	b21b      	sxth	r3, r3
 8021798:	f303 0307 	ssat	r3, #8, r3
 802179c:	708b      	strb	r3, [r1, #2]
 802179e:	bcf0      	pop	{r4, r5, r6, r7}
 80217a0:	4770      	bx	lr
 80217a2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80217a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80217aa:	ee17 3a90 	vmov	r3, s15
 80217ae:	b21b      	sxth	r3, r3
 80217b0:	f303 0307 	ssat	r3, #8, r3
 80217b4:	f804 3c01 	strb.w	r3, [r4, #-1]
 80217b8:	3404      	adds	r4, #4
 80217ba:	3510      	adds	r5, #16
 80217bc:	42b4      	cmp	r4, r6
 80217be:	f47f af4b 	bne.w	8021658 <arm_float_to_q7+0x20>
 80217c2:	e7a0      	b.n	8021706 <arm_float_to_q7+0xce>
 80217c4:	43000000 	.word	0x43000000

080217c8 <arm_q15_to_float>:
 80217c8:	b470      	push	{r4, r5, r6}
 80217ca:	0896      	lsrs	r6, r2, #2
 80217cc:	d038      	beq.n	8021840 <arm_q15_to_float+0x78>
 80217ce:	f100 0408 	add.w	r4, r0, #8
 80217d2:	f101 0310 	add.w	r3, r1, #16
 80217d6:	4635      	mov	r5, r6
 80217d8:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8021894 <arm_q15_to_float+0xcc>
 80217dc:	f934 cc08 	ldrsh.w	ip, [r4, #-8]
 80217e0:	3d01      	subs	r5, #1
 80217e2:	f104 0408 	add.w	r4, r4, #8
 80217e6:	f103 0310 	add.w	r3, r3, #16
 80217ea:	ee07 ca90 	vmov	s15, ip
 80217ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80217f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80217f6:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 80217fa:	f934 cc0e 	ldrsh.w	ip, [r4, #-14]
 80217fe:	ee07 ca90 	vmov	s15, ip
 8021802:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021806:	ee67 7a87 	vmul.f32	s15, s15, s14
 802180a:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 802180e:	f934 cc0c 	ldrsh.w	ip, [r4, #-12]
 8021812:	ee07 ca90 	vmov	s15, ip
 8021816:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802181a:	ee67 7a87 	vmul.f32	s15, s15, s14
 802181e:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 8021822:	f934 cc0a 	ldrsh.w	ip, [r4, #-10]
 8021826:	ee07 ca90 	vmov	s15, ip
 802182a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802182e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8021832:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8021836:	d1d1      	bne.n	80217dc <arm_q15_to_float+0x14>
 8021838:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 802183c:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8021840:	f012 0203 	ands.w	r2, r2, #3
 8021844:	d023      	beq.n	802188e <arm_q15_to_float+0xc6>
 8021846:	f9b0 3000 	ldrsh.w	r3, [r0]
 802184a:	2a01      	cmp	r2, #1
 802184c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8021894 <arm_q15_to_float+0xcc>
 8021850:	ee07 3a90 	vmov	s15, r3
 8021854:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021858:	ee67 7a87 	vmul.f32	s15, s15, s14
 802185c:	edc1 7a00 	vstr	s15, [r1]
 8021860:	d015      	beq.n	802188e <arm_q15_to_float+0xc6>
 8021862:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8021866:	2a02      	cmp	r2, #2
 8021868:	ee07 3a90 	vmov	s15, r3
 802186c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021870:	ee67 7a87 	vmul.f32	s15, s15, s14
 8021874:	edc1 7a01 	vstr	s15, [r1, #4]
 8021878:	d009      	beq.n	802188e <arm_q15_to_float+0xc6>
 802187a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 802187e:	ee07 3a90 	vmov	s15, r3
 8021882:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021886:	ee67 7a87 	vmul.f32	s15, s15, s14
 802188a:	edc1 7a02 	vstr	s15, [r1, #8]
 802188e:	bc70      	pop	{r4, r5, r6}
 8021890:	4770      	bx	lr
 8021892:	bf00      	nop
 8021894:	38000000 	.word	0x38000000

08021898 <arm_q7_to_float>:
 8021898:	b470      	push	{r4, r5, r6}
 802189a:	0895      	lsrs	r5, r2, #2
 802189c:	d036      	beq.n	802190c <arm_q7_to_float+0x74>
 802189e:	eb00 0685 	add.w	r6, r0, r5, lsl #2
 80218a2:	f101 0310 	add.w	r3, r1, #16
 80218a6:	3004      	adds	r0, #4
 80218a8:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8021960 <arm_q7_to_float+0xc8>
 80218ac:	1d34      	adds	r4, r6, #4
 80218ae:	f910 cc04 	ldrsb.w	ip, [r0, #-4]
 80218b2:	3004      	adds	r0, #4
 80218b4:	3310      	adds	r3, #16
 80218b6:	ee07 ca90 	vmov	s15, ip
 80218ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80218be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80218c2:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 80218c6:	f910 cc07 	ldrsb.w	ip, [r0, #-7]
 80218ca:	ee07 ca90 	vmov	s15, ip
 80218ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80218d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80218d6:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 80218da:	f910 cc06 	ldrsb.w	ip, [r0, #-6]
 80218de:	ee07 ca90 	vmov	s15, ip
 80218e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80218e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80218ea:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 80218ee:	f910 cc05 	ldrsb.w	ip, [r0, #-5]
 80218f2:	42a0      	cmp	r0, r4
 80218f4:	ee07 ca90 	vmov	s15, ip
 80218f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80218fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8021900:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8021904:	d1d3      	bne.n	80218ae <arm_q7_to_float+0x16>
 8021906:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 802190a:	4630      	mov	r0, r6
 802190c:	f012 0203 	ands.w	r2, r2, #3
 8021910:	d023      	beq.n	802195a <arm_q7_to_float+0xc2>
 8021912:	f990 3000 	ldrsb.w	r3, [r0]
 8021916:	2a01      	cmp	r2, #1
 8021918:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8021960 <arm_q7_to_float+0xc8>
 802191c:	ee07 3a90 	vmov	s15, r3
 8021920:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021924:	ee67 7a87 	vmul.f32	s15, s15, s14
 8021928:	edc1 7a00 	vstr	s15, [r1]
 802192c:	d015      	beq.n	802195a <arm_q7_to_float+0xc2>
 802192e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8021932:	2a02      	cmp	r2, #2
 8021934:	ee07 3a90 	vmov	s15, r3
 8021938:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802193c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8021940:	edc1 7a01 	vstr	s15, [r1, #4]
 8021944:	d009      	beq.n	802195a <arm_q7_to_float+0xc2>
 8021946:	f990 3002 	ldrsb.w	r3, [r0, #2]
 802194a:	ee07 3a90 	vmov	s15, r3
 802194e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021952:	ee67 7a87 	vmul.f32	s15, s15, s14
 8021956:	edc1 7a02 	vstr	s15, [r1, #8]
 802195a:	bc70      	pop	{r4, r5, r6}
 802195c:	4770      	bx	lr
 802195e:	bf00      	nop
 8021960:	3c000000 	.word	0x3c000000

08021964 <align_factor_cmsisnn>:
 8021964:	2900      	cmp	r1, #0
 8021966:	d068      	beq.n	8021a3a <align_factor_cmsisnn+0xd6>
 8021968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802196c:	ed2d 8b04 	vpush	{d8-d9}
 8021970:	ee80 9a20 	vdiv.f32	s18, s0, s1
 8021974:	461e      	mov	r6, r3
 8021976:	4615      	mov	r5, r2
 8021978:	4682      	mov	sl, r0
 802197a:	008c      	lsls	r4, r1, #2
 802197c:	f04f 0900 	mov.w	r9, #0
 8021980:	eddf 9a2e 	vldr	s19, [pc, #184]	; 8021a3c <align_factor_cmsisnn+0xd8>
 8021984:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8021988:	f06f 0816 	mvn.w	r8, #22
 802198c:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8021990:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8021994:	edda 7a00 	vldr	s15, [sl]
 8021998:	ee69 7a27 	vmul.f32	s15, s18, s15
 802199c:	eef4 7ae8 	vcmpe.f32	s15, s17
 80219a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80219a4:	d429      	bmi.n	80219fa <align_factor_cmsisnn+0x96>
 80219a6:	dd46      	ble.n	8021a36 <align_factor_cmsisnn+0xd2>
 80219a8:	ee67 7a88 	vmul.f32	s15, s15, s16
 80219ac:	f04f 31ff 	mov.w	r1, #4294967295
 80219b0:	e005      	b.n	80219be <align_factor_cmsisnn+0x5a>
 80219b2:	3901      	subs	r1, #1
 80219b4:	ee67 7a88 	vmul.f32	s15, s15, s16
 80219b8:	f111 0f1f 	cmn.w	r1, #31
 80219bc:	d031      	beq.n	8021a22 <align_factor_cmsisnn+0xbe>
 80219be:	eef4 7ae8 	vcmpe.f32	s15, s17
 80219c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80219c6:	dcf4      	bgt.n	80219b2 <align_factor_cmsisnn+0x4e>
 80219c8:	4249      	negs	r1, r1
 80219ca:	ee67 7aa9 	vmul.f32	s15, s15, s19
 80219ce:	f846 1009 	str.w	r1, [r6, r9]
 80219d2:	ee17 0a90 	vmov	r0, s15
 80219d6:	f7de fd03 	bl	80003e0 <__aeabi_f2lz>
 80219da:	eb05 0309 	add.w	r3, r5, r9
 80219de:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 80219e2:	bf18      	it	ne
 80219e4:	ea87 70e1 	eorne.w	r0, r7, r1, asr #31
 80219e8:	f109 0904 	add.w	r9, r9, #4
 80219ec:	6018      	str	r0, [r3, #0]
 80219ee:	454c      	cmp	r4, r9
 80219f0:	d1d0      	bne.n	8021994 <align_factor_cmsisnn+0x30>
 80219f2:	ecbd 8b04 	vpop	{d8-d9}
 80219f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80219fa:	eef4 7ac8 	vcmpe.f32	s15, s16
 80219fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021a02:	d518      	bpl.n	8021a36 <align_factor_cmsisnn+0xd2>
 8021a04:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8021a08:	2101      	movs	r1, #1
 8021a0a:	e004      	b.n	8021a16 <align_factor_cmsisnn+0xb2>
 8021a0c:	3101      	adds	r1, #1
 8021a0e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8021a12:	2918      	cmp	r1, #24
 8021a14:	d009      	beq.n	8021a2a <align_factor_cmsisnn+0xc6>
 8021a16:	eef4 7ac8 	vcmpe.f32	s15, s16
 8021a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021a1e:	d4f5      	bmi.n	8021a0c <align_factor_cmsisnn+0xa8>
 8021a20:	e7d2      	b.n	80219c8 <align_factor_cmsisnn+0x64>
 8021a22:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8021a26:	211e      	movs	r1, #30
 8021a28:	e7cf      	b.n	80219ca <align_factor_cmsisnn+0x66>
 8021a2a:	f846 8009 	str.w	r8, [r6, r9]
 8021a2e:	eb05 0309 	add.w	r3, r5, r9
 8021a32:	2000      	movs	r0, #0
 8021a34:	e7d8      	b.n	80219e8 <align_factor_cmsisnn+0x84>
 8021a36:	2100      	movs	r1, #0
 8021a38:	e7c7      	b.n	80219ca <align_factor_cmsisnn+0x66>
 8021a3a:	4770      	bx	lr
 8021a3c:	4f000000 	.word	0x4f000000

08021a40 <align_factor_ch>:
 8021a40:	2900      	cmp	r1, #0
 8021a42:	d06d      	beq.n	8021b20 <align_factor_ch+0xe0>
 8021a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021a48:	ed2d 8b04 	vpush	{d8-d9}
 8021a4c:	ee80 9a20 	vdiv.f32	s18, s0, s1
 8021a50:	4604      	mov	r4, r0
 8021a52:	4690      	mov	r8, r2
 8021a54:	461d      	mov	r5, r3
 8021a56:	eb00 0681 	add.w	r6, r0, r1, lsl #2
 8021a5a:	eddf 9a32 	vldr	s19, [pc, #200]	; 8021b24 <align_factor_ch+0xe4>
 8021a5e:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8021a62:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8021a66:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8021a6a:	ecf4 7a01 	vldmia	r4!, {s15}
 8021a6e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8021a72:	eef4 7a68 	vcmp.f32	s15, s17
 8021a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021a7a:	d52f      	bpl.n	8021adc <align_factor_ch+0x9c>
 8021a7c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8021a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021a84:	dd2a      	ble.n	8021adc <align_factor_ch+0x9c>
 8021a86:	eef4 7ac8 	vcmpe.f32	s15, s16
 8021a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021a8e:	d545      	bpl.n	8021b1c <align_factor_ch+0xdc>
 8021a90:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8021a94:	2301      	movs	r3, #1
 8021a96:	e004      	b.n	8021aa2 <align_factor_ch+0x62>
 8021a98:	2a18      	cmp	r2, #24
 8021a9a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8021a9e:	b213      	sxth	r3, r2
 8021aa0:	d033      	beq.n	8021b0a <align_factor_ch+0xca>
 8021aa2:	eef4 7ac8 	vcmpe.f32	s15, s16
 8021aa6:	1c5a      	adds	r2, r3, #1
 8021aa8:	b292      	uxth	r2, r2
 8021aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021aae:	d4f3      	bmi.n	8021a98 <align_factor_ch+0x58>
 8021ab0:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8021ab4:	802b      	strh	r3, [r5, #0]
 8021ab6:	ee17 0a90 	vmov	r0, s15
 8021aba:	f7de fc91 	bl	80003e0 <__aeabi_f2lz>
 8021abe:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 8021ac2:	bf18      	it	ne
 8021ac4:	ea87 70e1 	eorne.w	r0, r7, r1, asr #31
 8021ac8:	42a6      	cmp	r6, r4
 8021aca:	f848 0b04 	str.w	r0, [r8], #4
 8021ace:	f105 0502 	add.w	r5, r5, #2
 8021ad2:	d1ca      	bne.n	8021a6a <align_factor_ch+0x2a>
 8021ad4:	ecbd 8b04 	vpop	{d8-d9}
 8021ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021adc:	eef4 7ae8 	vcmpe.f32	s15, s17
 8021ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021ae4:	dd1a      	ble.n	8021b1c <align_factor_ch+0xdc>
 8021ae6:	ee67 7a88 	vmul.f32	s15, s15, s16
 8021aea:	f04f 33ff 	mov.w	r3, #4294967295
 8021aee:	e005      	b.n	8021afc <align_factor_ch+0xbc>
 8021af0:	b213      	sxth	r3, r2
 8021af2:	ee67 7a88 	vmul.f32	s15, s15, s16
 8021af6:	f113 0f1f 	cmn.w	r3, #31
 8021afa:	d00a      	beq.n	8021b12 <align_factor_ch+0xd2>
 8021afc:	eef4 7ae8 	vcmpe.f32	s15, s17
 8021b00:	1e5a      	subs	r2, r3, #1
 8021b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021b06:	dcf3      	bgt.n	8021af0 <align_factor_ch+0xb0>
 8021b08:	e7d2      	b.n	8021ab0 <align_factor_ch+0x70>
 8021b0a:	2317      	movs	r3, #23
 8021b0c:	2000      	movs	r0, #0
 8021b0e:	802b      	strh	r3, [r5, #0]
 8021b10:	e7da      	b.n	8021ac8 <align_factor_ch+0x88>
 8021b12:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8021b16:	f06f 031d 	mvn.w	r3, #29
 8021b1a:	e7c9      	b.n	8021ab0 <align_factor_ch+0x70>
 8021b1c:	2300      	movs	r3, #0
 8021b1e:	e7c7      	b.n	8021ab0 <align_factor_ch+0x70>
 8021b20:	4770      	bx	lr
 8021b22:	bf00      	nop
 8021b24:	4f000000 	.word	0x4f000000

08021b28 <st_sssa8_ch_conv_dw_Wadapt>:
 8021b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021b2c:	b089      	sub	sp, #36	; 0x24
 8021b2e:	4615      	mov	r5, r2
 8021b30:	ea5f 0a91 	movs.w	sl, r1, lsr #2
 8021b34:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8021b36:	9204      	str	r2, [sp, #16]
 8021b38:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8021b3c:	9007      	str	r0, [sp, #28]
 8021b3e:	9305      	str	r3, [sp, #20]
 8021b40:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8021b44:	d07a      	beq.n	8021c3c <st_sssa8_ch_conv_dw_Wadapt+0x114>
 8021b46:	fb03 fb05 	mul.w	fp, r3, r5
 8021b4a:	f10a 32ff 	add.w	r2, sl, #4294967295
 8021b4e:	4606      	mov	r6, r0
 8021b50:	3004      	adds	r0, #4
 8021b52:	f3cb 044f 	ubfx	r4, fp, #1, #16
 8021b56:	b292      	uxth	r2, r2
 8021b58:	ea4f 0841 	mov.w	r8, r1, lsl #1
 8021b5c:	f8cd a018 	str.w	sl, [sp, #24]
 8021b60:	9400      	str	r4, [sp, #0]
 8021b62:	fb15 f403 	smulbb	r4, r5, r3
 8021b66:	9b00      	ldr	r3, [sp, #0]
 8021b68:	eb00 0b82 	add.w	fp, r0, r2, lsl #2
 8021b6c:	f004 0201 	and.w	r2, r4, #1
 8021b70:	46b1      	mov	r9, r6
 8021b72:	3b01      	subs	r3, #1
 8021b74:	f8df c118 	ldr.w	ip, [pc, #280]	; 8021c90 <st_sssa8_ch_conv_dw_Wadapt+0x168>
 8021b78:	9201      	str	r2, [sp, #4]
 8021b7a:	b29b      	uxth	r3, r3
 8021b7c:	011a      	lsls	r2, r3, #4
 8021b7e:	3301      	adds	r3, #1
 8021b80:	3220      	adds	r2, #32
 8021b82:	9203      	str	r2, [sp, #12]
 8021b84:	fb03 f208 	mul.w	r2, r3, r8
 8021b88:	011b      	lsls	r3, r3, #4
 8021b8a:	469a      	mov	sl, r3
 8021b8c:	9202      	str	r2, [sp, #8]
 8021b8e:	9b00      	ldr	r3, [sp, #0]
 8021b90:	464e      	mov	r6, r9
 8021b92:	b33b      	cbz	r3, 8021be4 <st_sssa8_ch_conv_dw_Wadapt+0xbc>
 8021b94:	9b03      	ldr	r3, [sp, #12]
 8021b96:	f107 0510 	add.w	r5, r7, #16
 8021b9a:	eb07 0e03 	add.w	lr, r7, r3
 8021b9e:	6833      	ldr	r3, [r6, #0]
 8021ba0:	5872      	ldr	r2, [r6, r1]
 8021ba2:	4446      	add	r6, r8
 8021ba4:	b29c      	uxth	r4, r3
 8021ba6:	ea02 000c 	and.w	r0, r2, ip
 8021baa:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 8021bae:	ea40 4313 	orr.w	r3, r0, r3, lsr #16
 8021bb2:	ea4f 2032 	mov.w	r0, r2, ror #8
 8021bb6:	fa2f f282 	sxtb16	r2, r2
 8021bba:	fa2f f080 	sxtb16	r0, r0
 8021bbe:	f845 2c10 	str.w	r2, [r5, #-16]
 8021bc2:	ea4f 2233 	mov.w	r2, r3, ror #8
 8021bc6:	f845 0c0c 	str.w	r0, [r5, #-12]
 8021bca:	fa2f f282 	sxtb16	r2, r2
 8021bce:	fa2f f383 	sxtb16	r3, r3
 8021bd2:	e945 3202 	strd	r3, r2, [r5, #-8]
 8021bd6:	3510      	adds	r5, #16
 8021bd8:	45ae      	cmp	lr, r5
 8021bda:	d1e0      	bne.n	8021b9e <st_sssa8_ch_conv_dw_Wadapt+0x76>
 8021bdc:	9b02      	ldr	r3, [sp, #8]
 8021bde:	4457      	add	r7, sl
 8021be0:	eb09 0603 	add.w	r6, r9, r3
 8021be4:	9b01      	ldr	r3, [sp, #4]
 8021be6:	b1fb      	cbz	r3, 8021c28 <st_sssa8_ch_conv_dw_Wadapt+0x100>
 8021be8:	6833      	ldr	r3, [r6, #0]
 8021bea:	2400      	movs	r4, #0
 8021bec:	3708      	adds	r7, #8
 8021bee:	ea03 020c 	and.w	r2, r3, ip
 8021bf2:	4620      	mov	r0, r4
 8021bf4:	ea0c 2503 	and.w	r5, ip, r3, lsl #8
 8021bf8:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 8021bfc:	b29b      	uxth	r3, r3
 8021bfe:	ea4f 4232 	mov.w	r2, r2, ror #16
 8021c02:	432b      	orrs	r3, r5
 8021c04:	fa2f f282 	sxtb16	r2, r2
 8021c08:	fa2f f383 	sxtb16	r3, r3
 8021c0c:	f362 040f 	bfi	r4, r2, #0, #16
 8021c10:	f363 000f 	bfi	r0, r3, #0, #16
 8021c14:	0c12      	lsrs	r2, r2, #16
 8021c16:	0c1b      	lsrs	r3, r3, #16
 8021c18:	f362 441f 	bfi	r4, r2, #16, #16
 8021c1c:	f363 401f 	bfi	r0, r3, #16, #16
 8021c20:	f847 4c04 	str.w	r4, [r7, #-4]
 8021c24:	f847 0c08 	str.w	r0, [r7, #-8]
 8021c28:	f109 0904 	add.w	r9, r9, #4
 8021c2c:	45cb      	cmp	fp, r9
 8021c2e:	d1ae      	bne.n	8021b8e <st_sssa8_ch_conv_dw_Wadapt+0x66>
 8021c30:	f8dd a018 	ldr.w	sl, [sp, #24]
 8021c34:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8021c38:	fa1f fa8a 	uxth.w	sl, sl
 8021c3c:	f011 0603 	ands.w	r6, r1, #3
 8021c40:	d023      	beq.n	8021c8a <st_sssa8_ch_conv_dw_Wadapt+0x162>
 8021c42:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8021c46:	fb13 f302 	smulbb	r3, r3, r2
 8021c4a:	b29b      	uxth	r3, r3
 8021c4c:	b1eb      	cbz	r3, 8021c8a <st_sssa8_ch_conv_dw_Wadapt+0x162>
 8021c4e:	3b01      	subs	r3, #1
 8021c50:	4456      	add	r6, sl
 8021c52:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8021c56:	b29b      	uxth	r3, r3
 8021c58:	b2b6      	uxth	r6, r6
 8021c5a:	f103 0c01 	add.w	ip, r3, #1
 8021c5e:	005b      	lsls	r3, r3, #1
 8021c60:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8021c64:	1c9d      	adds	r5, r3, #2
 8021c66:	f10a 0001 	add.w	r0, sl, #1
 8021c6a:	eb0e 020a 	add.w	r2, lr, sl
 8021c6e:	197c      	adds	r4, r7, r5
 8021c70:	463b      	mov	r3, r7
 8021c72:	fa1f fa80 	uxth.w	sl, r0
 8021c76:	f992 0000 	ldrsb.w	r0, [r2]
 8021c7a:	440a      	add	r2, r1
 8021c7c:	f823 0b02 	strh.w	r0, [r3], #2
 8021c80:	42a3      	cmp	r3, r4
 8021c82:	d1f8      	bne.n	8021c76 <st_sssa8_ch_conv_dw_Wadapt+0x14e>
 8021c84:	45b2      	cmp	sl, r6
 8021c86:	4467      	add	r7, ip
 8021c88:	d1ed      	bne.n	8021c66 <st_sssa8_ch_conv_dw_Wadapt+0x13e>
 8021c8a:	b009      	add	sp, #36	; 0x24
 8021c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c90:	ffff0000 	.word	0xffff0000

08021c94 <st_sssa8_ch_convolve_dw>:
 8021c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c98:	b0dd      	sub	sp, #372	; 0x174
 8021c9a:	f8bd 719c 	ldrh.w	r7, [sp, #412]	; 0x19c
 8021c9e:	f8bd 41a4 	ldrh.w	r4, [sp, #420]	; 0x1a4
 8021ca2:	9020      	str	r0, [sp, #128]	; 0x80
 8021ca4:	ea4f 0887 	mov.w	r8, r7, lsl #2
 8021ca8:	f8bd 01a0 	ldrh.w	r0, [sp, #416]	; 0x1a0
 8021cac:	007e      	lsls	r6, r7, #1
 8021cae:	910a      	str	r1, [sp, #40]	; 0x28
 8021cb0:	eb08 0107 	add.w	r1, r8, r7
 8021cb4:	fb04 f900 	mul.w	r9, r4, r0
 8021cb8:	f99d 51c8 	ldrsb.w	r5, [sp, #456]	; 0x1c8
 8021cbc:	921a      	str	r2, [sp, #104]	; 0x68
 8021cbe:	fb07 1109 	mla	r1, r7, r9, r1
 8021cc2:	9a76      	ldr	r2, [sp, #472]	; 0x1d8
 8021cc4:	9033      	str	r0, [sp, #204]	; 0xcc
 8021cc6:	19f0      	adds	r0, r6, r7
 8021cc8:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8021ccc:	931f      	str	r3, [sp, #124]	; 0x7c
 8021cce:	9b76      	ldr	r3, [sp, #472]	; 0x1d8
 8021cd0:	9219      	str	r2, [sp, #100]	; 0x64
 8021cd2:	f8bd 21a8 	ldrh.w	r2, [sp, #424]	; 0x1a8
 8021cd6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8021cda:	9438      	str	r4, [sp, #224]	; 0xe0
 8021cdc:	9232      	str	r2, [sp, #200]	; 0xc8
 8021cde:	f8bd 21ac 	ldrh.w	r2, [sp, #428]	; 0x1ac
 8021ce2:	9615      	str	r6, [sp, #84]	; 0x54
 8021ce4:	9239      	str	r2, [sp, #228]	; 0xe4
 8021ce6:	f8bd 21b0 	ldrh.w	r2, [sp, #432]	; 0x1b0
 8021cea:	9326      	str	r3, [sp, #152]	; 0x98
 8021cec:	9223      	str	r2, [sp, #140]	; 0x8c
 8021cee:	f8bd 21b4 	ldrh.w	r2, [sp, #436]	; 0x1b4
 8021cf2:	9237      	str	r2, [sp, #220]	; 0xdc
 8021cf4:	f99d 21c4 	ldrsb.w	r2, [sp, #452]	; 0x1c4
 8021cf8:	920b      	str	r2, [sp, #44]	; 0x2c
 8021cfa:	f8bd 21d0 	ldrh.w	r2, [sp, #464]	; 0x1d0
 8021cfe:	9225      	str	r2, [sp, #148]	; 0x94
 8021d00:	f8bd 21d4 	ldrh.w	r2, [sp, #468]	; 0x1d4
 8021d04:	923a      	str	r2, [sp, #232]	; 0xe8
 8021d06:	b19f      	cbz	r7, 8021d30 <st_sssa8_ch_convolve_dw+0x9c>
 8021d08:	9970      	ldr	r1, [sp, #448]	; 0x1c0
 8021d0a:	1f1c      	subs	r4, r3, #4
 8021d0c:	f04f 0c01 	mov.w	ip, #1
 8021d10:	198e      	adds	r6, r1, r6
 8021d12:	f931 3b02 	ldrsh.w	r3, [r1], #2
 8021d16:	fa0c f003 	lsl.w	r0, ip, r3
 8021d1a:	fa05 f203 	lsl.w	r2, r5, r3
 8021d1e:	2b00      	cmp	r3, #0
 8021d20:	eb02 0250 	add.w	r2, r2, r0, lsr #1
 8021d24:	f340 84b3 	ble.w	802268e <st_sssa8_ch_convolve_dw+0x9fa>
 8021d28:	428e      	cmp	r6, r1
 8021d2a:	f844 2f04 	str.w	r2, [r4, #4]!
 8021d2e:	d1f0      	bne.n	8021d12 <st_sssa8_ch_convolve_dw+0x7e>
 8021d30:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021d32:	a944      	add	r1, sp, #272	; 0x110
 8021d34:	ab40      	add	r3, sp, #256	; 0x100
 8021d36:	aa3c      	add	r2, sp, #240	; 0xf0
 8021d38:	943e      	str	r4, [sp, #248]	; 0xf8
 8021d3a:	a848      	add	r0, sp, #288	; 0x120
 8021d3c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8021d3e:	9100      	str	r1, [sp, #0]
 8021d40:	a952      	add	r1, sp, #328	; 0x148
 8021d42:	943d      	str	r4, [sp, #244]	; 0xf4
 8021d44:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8021d46:	9442      	str	r4, [sp, #264]	; 0x108
 8021d48:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8021d4a:	9441      	str	r4, [sp, #260]	; 0x104
 8021d4c:	9c33      	ldr	r4, [sp, #204]	; 0xcc
 8021d4e:	9446      	str	r4, [sp, #280]	; 0x118
 8021d50:	9c38      	ldr	r4, [sp, #224]	; 0xe0
 8021d52:	9445      	str	r4, [sp, #276]	; 0x114
 8021d54:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8021d56:	9454      	str	r4, [sp, #336]	; 0x150
 8021d58:	9c37      	ldr	r4, [sp, #220]	; 0xdc
 8021d5a:	9455      	str	r4, [sp, #340]	; 0x154
 8021d5c:	9c32      	ldr	r4, [sp, #200]	; 0xc8
 8021d5e:	9456      	str	r4, [sp, #344]	; 0x158
 8021d60:	9c39      	ldr	r4, [sp, #228]	; 0xe4
 8021d62:	9457      	str	r4, [sp, #348]	; 0x15c
 8021d64:	f001 ff0a 	bl	8023b7c <ai_padding_opt_init>
 8021d68:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8021d6a:	fbb7 f3f3 	udiv	r3, r7, r3
 8021d6e:	079a      	lsls	r2, r3, #30
 8021d70:	931b      	str	r3, [sp, #108]	; 0x6c
 8021d72:	f040 8493 	bne.w	802269c <st_sssa8_ch_convolve_dw+0xa08>
 8021d76:	109c      	asrs	r4, r3, #2
 8021d78:	2304      	movs	r3, #4
 8021d7a:	931b      	str	r3, [sp, #108]	; 0x6c
 8021d7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021d7e:	425b      	negs	r3, r3
 8021d80:	b29a      	uxth	r2, r3
 8021d82:	ea42 4b03 	orr.w	fp, r2, r3, lsl #16
 8021d86:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8021d88:	2b00      	cmp	r3, #0
 8021d8a:	f000 8243 	beq.w	8022214 <st_sssa8_ch_convolve_dw+0x580>
 8021d8e:	f3c9 014f 	ubfx	r1, r9, #1, #16
 8021d92:	08ba      	lsrs	r2, r7, #2
 8021d94:	9838      	ldr	r0, [sp, #224]	; 0xe0
 8021d96:	1e4d      	subs	r5, r1, #1
 8021d98:	9110      	str	r1, [sp, #64]	; 0x40
 8021d9a:	996e      	ldr	r1, [sp, #440]	; 0x1b8
 8021d9c:	fa1f fa85 	uxth.w	sl, r5
 8021da0:	2500      	movs	r5, #0
 8021da2:	f101 0e20 	add.w	lr, r1, #32
 8021da6:	9939      	ldr	r1, [sp, #228]	; 0xe4
 8021da8:	9536      	str	r5, [sp, #216]	; 0xd8
 8021daa:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8021dac:	f1c1 0c00 	rsb	ip, r1, #0
 8021db0:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8021db2:	9224      	str	r2, [sp, #144]	; 0x90
 8021db4:	4629      	mov	r1, r5
 8021db6:	fb13 f300 	smulbb	r3, r3, r0
 8021dba:	3a01      	subs	r2, #1
 8021dbc:	fb01 f104 	mul.w	r1, r1, r4
 8021dc0:	9826      	ldr	r0, [sp, #152]	; 0x98
 8021dc2:	b292      	uxth	r2, r2
 8021dc4:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8021dc6:	4440      	add	r0, r8
 8021dc8:	9135      	str	r1, [sp, #212]	; 0xd4
 8021dca:	f102 0901 	add.w	r9, r2, #1
 8021dce:	eb0e 1102 	add.w	r1, lr, r2, lsl #4
 8021dd2:	eba7 0808 	sub.w	r8, r7, r8
 8021dd6:	9029      	str	r0, [sp, #164]	; 0xa4
 8021dd8:	9112      	str	r1, [sp, #72]	; 0x48
 8021dda:	b29b      	uxth	r3, r3
 8021ddc:	eb00 0648 	add.w	r6, r0, r8, lsl #1
 8021de0:	9976      	ldr	r1, [sp, #472]	; 0x1d8
 8021de2:	ea4f 1009 	mov.w	r0, r9, lsl #4
 8021de6:	931c      	str	r3, [sp, #112]	; 0x70
 8021de8:	3b01      	subs	r3, #1
 8021dea:	9628      	str	r6, [sp, #160]	; 0xa0
 8021dec:	4401      	add	r1, r0
 8021dee:	f10a 0601 	add.w	r6, sl, #1
 8021df2:	b29b      	uxth	r3, r3
 8021df4:	46b8      	mov	r8, r7
 8021df6:	9130      	str	r1, [sp, #192]	; 0xc0
 8021df8:	1821      	adds	r1, r4, r0
 8021dfa:	3301      	adds	r3, #1
 8021dfc:	2400      	movs	r4, #0
 8021dfe:	912d      	str	r1, [sp, #180]	; 0xb4
 8021e00:	996e      	ldr	r1, [sp, #440]	; 0x1b8
 8021e02:	4401      	add	r1, r0
 8021e04:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8021e06:	912c      	str	r1, [sp, #176]	; 0xb0
 8021e08:	0059      	lsls	r1, r3, #1
 8021e0a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8021e0c:	911e      	str	r1, [sp, #120]	; 0x78
 8021e0e:	eb00 01c9 	add.w	r1, r0, r9, lsl #3
 8021e12:	912f      	str	r1, [sp, #188]	; 0xbc
 8021e14:	9915      	ldr	r1, [sp, #84]	; 0x54
 8021e16:	fb06 f101 	mul.w	r1, r6, r1
 8021e1a:	9116      	str	r1, [sp, #88]	; 0x58
 8021e1c:	ea4f 0189 	mov.w	r1, r9, lsl #2
 8021e20:	912b      	str	r1, [sp, #172]	; 0xac
 8021e22:	f003 0101 	and.w	r1, r3, #1
 8021e26:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8021e28:	9111      	str	r1, [sp, #68]	; 0x44
 8021e2a:	ea4f 110a 	mov.w	r1, sl, lsl #4
 8021e2e:	fb05 f303 	mul.w	r3, r5, r3
 8021e32:	912a      	str	r1, [sp, #168]	; 0xa8
 8021e34:	0131      	lsls	r1, r6, #4
 8021e36:	933b      	str	r3, [sp, #236]	; 0xec
 8021e38:	9117      	str	r1, [sp, #92]	; 0x5c
 8021e3a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8021e3c:	f8cd b0c4 	str.w	fp, [sp, #196]	; 0xc4
 8021e40:	0093      	lsls	r3, r2, #2
 8021e42:	932e      	str	r3, [sp, #184]	; 0xb8
 8021e44:	f007 0303 	and.w	r3, r7, #3
 8021e48:	9322      	str	r3, [sp, #136]	; 0x88
 8021e4a:	fa1f f38c 	uxth.w	r3, ip
 8021e4e:	9334      	str	r3, [sp, #208]	; 0xd0
 8021e50:	a848      	add	r0, sp, #288	; 0x120
 8021e52:	f001 feed 	bl	8023c30 <ai_padding_opt_phase1>
 8021e56:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8021e58:	2b00      	cmp	r3, #0
 8021e5a:	f000 81cd 	beq.w	80221f8 <st_sssa8_ch_convolve_dw+0x564>
 8021e5e:	f9bd 00d0 	ldrsh.w	r0, [sp, #208]	; 0xd0
 8021e62:	2100      	movs	r1, #0
 8021e64:	46c3      	mov	fp, r8
 8021e66:	9027      	str	r0, [sp, #156]	; 0x9c
 8021e68:	9837      	ldr	r0, [sp, #220]	; 0xdc
 8021e6a:	9121      	str	r1, [sp, #132]	; 0x84
 8021e6c:	e9dd 3238 	ldrd	r3, r2, [sp, #224]	; 0xe0
 8021e70:	1a9a      	subs	r2, r3, r2
 8021e72:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8021e74:	425b      	negs	r3, r3
 8021e76:	fb00 2204 	mla	r2, r0, r4, r2
 8021e7a:	b29b      	uxth	r3, r3
 8021e7c:	9218      	str	r2, [sp, #96]	; 0x60
 8021e7e:	460a      	mov	r2, r1
 8021e80:	931d      	str	r3, [sp, #116]	; 0x74
 8021e82:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8021e84:	3b01      	subs	r3, #1
 8021e86:	9314      	str	r3, [sp, #80]	; 0x50
 8021e88:	9b48      	ldr	r3, [sp, #288]	; 0x120
 8021e8a:	2b00      	cmp	r3, #0
 8021e8c:	f000 82af 	beq.w	80223ee <st_sssa8_ch_convolve_dw+0x75a>
 8021e90:	3b01      	subs	r3, #1
 8021e92:	2101      	movs	r1, #1
 8021e94:	9348      	str	r3, [sp, #288]	; 0x120
 8021e96:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8021e98:	f8ad 1146 	strh.w	r1, [sp, #326]	; 0x146
 8021e9c:	2b01      	cmp	r3, #1
 8021e9e:	f000 82f4 	beq.w	802248a <st_sssa8_ch_convolve_dw+0x7f6>
 8021ea2:	2b04      	cmp	r3, #4
 8021ea4:	f000 838d 	beq.w	80225c2 <st_sssa8_ch_convolve_dw+0x92e>
 8021ea8:	2b02      	cmp	r3, #2
 8021eaa:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8021eac:	4618      	mov	r0, r3
 8021eae:	f000 8330 	beq.w	8022512 <st_sssa8_ch_convolve_dw+0x87e>
 8021eb2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021eb4:	4298      	cmp	r0, r3
 8021eb6:	dd45      	ble.n	8021f44 <st_sssa8_ch_convolve_dw+0x2b0>
 8021eb8:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8021eba:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8021ebc:	fb02 0201 	mla	r2, r2, r1, r0
 8021ec0:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8021ec2:	f9bd 1074 	ldrsh.w	r1, [sp, #116]	; 0x74
 8021ec6:	1a12      	subs	r2, r2, r0
 8021ec8:	9109      	str	r1, [sp, #36]	; 0x24
 8021eca:	4291      	cmp	r1, r2
 8021ecc:	9203      	str	r2, [sp, #12]
 8021ece:	da39      	bge.n	8021f44 <st_sssa8_ch_convolve_dw+0x2b0>
 8021ed0:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8021ed4:	46d9      	mov	r9, fp
 8021ed6:	461a      	mov	r2, r3
 8021ed8:	9305      	str	r3, [sp, #20]
 8021eda:	990a      	ldr	r1, [sp, #40]	; 0x28
 8021edc:	0fd2      	lsrs	r2, r2, #31
 8021ede:	981a      	ldr	r0, [sp, #104]	; 0x68
 8021ee0:	f1ca 0b00 	rsb	fp, sl, #0
 8021ee4:	fb01 f103 	mul.w	r1, r1, r3
 8021ee8:	4298      	cmp	r0, r3
 8021eea:	bfd8      	it	le
 8021eec:	f042 0201 	orrle.w	r2, r2, #1
 8021ef0:	9107      	str	r1, [sp, #28]
 8021ef2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8021ef4:	9204      	str	r2, [sp, #16]
 8021ef6:	4688      	mov	r8, r1
 8021ef8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021efa:	428b      	cmp	r3, r1
 8021efc:	bfcc      	ite	gt
 8021efe:	2300      	movgt	r3, #0
 8021f00:	2301      	movle	r3, #1
 8021f02:	ea53 73d8 	orrs.w	r3, r3, r8, lsr #31
 8021f06:	d103      	bne.n	8021f10 <st_sssa8_ch_convolve_dw+0x27c>
 8021f08:	9b04      	ldr	r3, [sp, #16]
 8021f0a:	2b00      	cmp	r3, #0
 8021f0c:	f000 81de 	beq.w	80222cc <st_sssa8_ch_convolve_dw+0x638>
 8021f10:	464a      	mov	r2, r9
 8021f12:	4651      	mov	r1, sl
 8021f14:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
 8021f18:	f001 fea6 	bl	8023c68 <st_uint8_fill>
 8021f1c:	f108 0801 	add.w	r8, r8, #1
 8021f20:	9b03      	ldr	r3, [sp, #12]
 8021f22:	44ca      	add	sl, r9
 8021f24:	ebab 0b09 	sub.w	fp, fp, r9
 8021f28:	fa0f f888 	sxth.w	r8, r8
 8021f2c:	4598      	cmp	r8, r3
 8021f2e:	4641      	mov	r1, r8
 8021f30:	dbe2      	blt.n	8021ef8 <st_sssa8_ch_convolve_dw+0x264>
 8021f32:	9b05      	ldr	r3, [sp, #20]
 8021f34:	9918      	ldr	r1, [sp, #96]	; 0x60
 8021f36:	3301      	adds	r3, #1
 8021f38:	b21b      	sxth	r3, r3
 8021f3a:	428b      	cmp	r3, r1
 8021f3c:	461a      	mov	r2, r3
 8021f3e:	9305      	str	r3, [sp, #20]
 8021f40:	dbcb      	blt.n	8021eda <st_sssa8_ch_convolve_dw+0x246>
 8021f42:	46cb      	mov	fp, r9
 8021f44:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021f46:	2b00      	cmp	r3, #0
 8021f48:	f000 8288 	beq.w	802245c <st_sssa8_ch_convolve_dw+0x7c8>
 8021f4c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8021f4e:	9b6e      	ldr	r3, [sp, #440]	; 0x1b8
 8021f50:	f102 0810 	add.w	r8, r2, #16
 8021f54:	9a73      	ldr	r2, [sp, #460]	; 0x1cc
 8021f56:	3310      	adds	r3, #16
 8021f58:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
 8021f5c:	3204      	adds	r2, #4
 8021f5e:	f8dd 90c4 	ldr.w	r9, [sp, #196]	; 0xc4
 8021f62:	9309      	str	r3, [sp, #36]	; 0x24
 8021f64:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021f66:	9205      	str	r2, [sp, #20]
 8021f68:	3308      	adds	r3, #8
 8021f6a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8021f6c:	9306      	str	r3, [sp, #24]
 8021f6e:	9208      	str	r2, [sp, #32]
 8021f70:	9b76      	ldr	r3, [sp, #472]	; 0x1d8
 8021f72:	e9dd c229 	ldrd	ip, r2, [sp, #164]	; 0xa4
 8021f76:	3310      	adds	r3, #16
 8021f78:	3220      	adds	r2, #32
 8021f7a:	f8cd c01c 	str.w	ip, [sp, #28]
 8021f7e:	469b      	mov	fp, r3
 8021f80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021f82:	9213      	str	r2, [sp, #76]	; 0x4c
 8021f84:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8021f88:	920e      	str	r2, [sp, #56]	; 0x38
 8021f8a:	f853 6c10 	ldr.w	r6, [r3, #-16]
 8021f8e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8021f92:	9908      	ldr	r1, [sp, #32]
 8021f94:	e953 5403 	ldrd	r5, r4, [r3, #-12]
 8021f98:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021f9a:	2b00      	cmp	r3, #0
 8021f9c:	d04b      	beq.n	8022036 <st_sssa8_ch_convolve_dw+0x3a2>
 8021f9e:	9b07      	ldr	r3, [sp, #28]
 8021fa0:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8021fa2:	461a      	mov	r2, r3
 8021fa4:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8021fa8:	eb03 0c07 	add.w	ip, r3, r7
 8021fac:	464f      	mov	r7, r9
 8021fae:	3210      	adds	r2, #16
 8021fb0:	e9cd 8b0c 	strd	r8, fp, [sp, #48]	; 0x30
 8021fb4:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
 8021fb8:	e9cd 4003 	strd	r4, r0, [sp, #12]
 8021fbc:	f8d1 8000 	ldr.w	r8, [r1]
 8021fc0:	f851 900a 	ldr.w	r9, [r1, sl]
 8021fc4:	4bc0      	ldr	r3, [pc, #768]	; (80222c8 <st_sssa8_ch_convolve_dw+0x634>)
 8021fc6:	fa1f fe88 	uxth.w	lr, r8
 8021fca:	f852 0c10 	ldr.w	r0, [r2, #-16]
 8021fce:	ea09 0303 	and.w	r3, r9, r3
 8021fd2:	ea4e 4e09 	orr.w	lr, lr, r9, lsl #16
 8021fd6:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8021fda:	fa27 f88e 	sxtab16	r8, r7, lr
 8021fde:	fb20 6608 	smlad	r6, r0, r8, r6
 8021fe2:	ea4f 2e3e 	mov.w	lr, lr, ror #8
 8021fe6:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 8021fea:	fa27 fe8e 	sxtab16	lr, r7, lr
 8021fee:	fb20 550e 	smlad	r5, r0, lr, r5
 8021ff2:	fa27 fe83 	sxtab16	lr, r7, r3
 8021ff6:	f852 0c08 	ldr.w	r0, [r2, #-8]
 8021ffa:	9c03      	ldr	r4, [sp, #12]
 8021ffc:	fb20 400e 	smlad	r0, r0, lr, r4
 8022000:	9003      	str	r0, [sp, #12]
 8022002:	ea4f 2333 	mov.w	r3, r3, ror #8
 8022006:	f852 0c04 	ldr.w	r0, [r2, #-4]
 802200a:	fa27 f383 	sxtab16	r3, r7, r3
 802200e:	9c04      	ldr	r4, [sp, #16]
 8022010:	fb20 4303 	smlad	r3, r0, r3, r4
 8022014:	3210      	adds	r2, #16
 8022016:	9304      	str	r3, [sp, #16]
 8022018:	4459      	add	r1, fp
 802201a:	4594      	cmp	ip, r2
 802201c:	d1ce      	bne.n	8021fbc <st_sssa8_ch_convolve_dw+0x328>
 802201e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8022020:	4618      	mov	r0, r3
 8022022:	9b07      	ldr	r3, [sp, #28]
 8022024:	46b9      	mov	r9, r7
 8022026:	9c03      	ldr	r4, [sp, #12]
 8022028:	4413      	add	r3, r2
 802202a:	9a08      	ldr	r2, [sp, #32]
 802202c:	9307      	str	r3, [sp, #28]
 802202e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8022030:	e9dd 8b0c 	ldrd	r8, fp, [sp, #48]	; 0x30
 8022034:	1899      	adds	r1, r3, r2
 8022036:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022038:	b30b      	cbz	r3, 802207e <st_sssa8_ch_convolve_dw+0x3ea>
 802203a:	680b      	ldr	r3, [r1, #0]
 802203c:	9a07      	ldr	r2, [sp, #28]
 802203e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8022040:	fa4f fc83 	sxtb.w	ip, r3
 8022044:	f8b2 e000 	ldrh.w	lr, [r2]
 8022048:	f343 2107 	sbfx	r1, r3, #8, #8
 802204c:	f343 4207 	sbfx	r2, r3, #16, #8
 8022050:	ebc7 6a23 	rsb	sl, r7, r3, asr #24
 8022054:	ebac 0c07 	sub.w	ip, ip, r7
 8022058:	1bc9      	subs	r1, r1, r7
 802205a:	1bd2      	subs	r2, r2, r7
 802205c:	9f07      	ldr	r7, [sp, #28]
 802205e:	fb1e 660c 	smlabb	r6, lr, ip, r6
 8022062:	f8b7 c002 	ldrh.w	ip, [r7, #2]
 8022066:	463b      	mov	r3, r7
 8022068:	f8b7 e004 	ldrh.w	lr, [r7, #4]
 802206c:	fb1c 5501 	smlabb	r5, ip, r1, r5
 8022070:	88f9      	ldrh	r1, [r7, #6]
 8022072:	fb1e 4402 	smlabb	r4, lr, r2, r4
 8022076:	3308      	adds	r3, #8
 8022078:	fb11 000a 	smlabb	r0, r1, sl, r0
 802207c:	9307      	str	r3, [sp, #28]
 802207e:	9b06      	ldr	r3, [sp, #24]
 8022080:	f85b 1c10 	ldr.w	r1, [fp, #-16]
 8022084:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8022088:	f858 2c10 	ldr.w	r2, [r8, #-16]
 802208c:	2b00      	cmp	r3, #0
 802208e:	f340 80fe 	ble.w	802228e <st_sssa8_ch_convolve_dw+0x5fa>
 8022092:	0076      	lsls	r6, r6, #1
 8022094:	fb56 2601 	smmla	r6, r6, r1, r2
 8022098:	411e      	asrs	r6, r3
 802209a:	f306 0607 	ssat	r6, #8, r6
 802209e:	9b05      	ldr	r3, [sp, #20]
 80220a0:	f803 6c04 	strb.w	r6, [r3, #-4]
 80220a4:	9b06      	ldr	r3, [sp, #24]
 80220a6:	f933 1c06 	ldrsh.w	r1, [r3, #-6]
 80220aa:	2900      	cmp	r1, #0
 80220ac:	f340 80dc 	ble.w	8022268 <st_sssa8_ch_convolve_dw+0x5d4>
 80220b0:	f85b 3c0c 	ldr.w	r3, [fp, #-12]
 80220b4:	006d      	lsls	r5, r5, #1
 80220b6:	f858 2c0c 	ldr.w	r2, [r8, #-12]
 80220ba:	fb55 2503 	smmla	r5, r5, r3, r2
 80220be:	410d      	asrs	r5, r1
 80220c0:	f305 0507 	ssat	r5, #8, r5
 80220c4:	9b05      	ldr	r3, [sp, #20]
 80220c6:	f803 5c03 	strb.w	r5, [r3, #-3]
 80220ca:	9b06      	ldr	r3, [sp, #24]
 80220cc:	f933 1c04 	ldrsh.w	r1, [r3, #-4]
 80220d0:	2900      	cmp	r1, #0
 80220d2:	f340 80b6 	ble.w	8022242 <st_sssa8_ch_convolve_dw+0x5ae>
 80220d6:	f85b 3c08 	ldr.w	r3, [fp, #-8]
 80220da:	0064      	lsls	r4, r4, #1
 80220dc:	f858 2c08 	ldr.w	r2, [r8, #-8]
 80220e0:	fb54 2403 	smmla	r4, r4, r3, r2
 80220e4:	410c      	asrs	r4, r1
 80220e6:	f304 0407 	ssat	r4, #8, r4
 80220ea:	9b05      	ldr	r3, [sp, #20]
 80220ec:	f803 4c02 	strb.w	r4, [r3, #-2]
 80220f0:	9b06      	ldr	r3, [sp, #24]
 80220f2:	f933 1c02 	ldrsh.w	r1, [r3, #-2]
 80220f6:	2900      	cmp	r1, #0
 80220f8:	f340 8090 	ble.w	802221c <st_sssa8_ch_convolve_dw+0x588>
 80220fc:	f85b 3c04 	ldr.w	r3, [fp, #-4]
 8022100:	0040      	lsls	r0, r0, #1
 8022102:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8022106:	fb50 2003 	smmla	r0, r0, r3, r2
 802210a:	4108      	asrs	r0, r1
 802210c:	f300 0007 	ssat	r0, #8, r0
 8022110:	9b05      	ldr	r3, [sp, #20]
 8022112:	f803 0c01 	strb.w	r0, [r3, #-1]
 8022116:	9a06      	ldr	r2, [sp, #24]
 8022118:	f10b 0b10 	add.w	fp, fp, #16
 802211c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802211e:	f108 0810 	add.w	r8, r8, #16
 8022122:	3208      	adds	r2, #8
 8022124:	3310      	adds	r3, #16
 8022126:	9206      	str	r2, [sp, #24]
 8022128:	9a05      	ldr	r2, [sp, #20]
 802212a:	9309      	str	r3, [sp, #36]	; 0x24
 802212c:	3204      	adds	r2, #4
 802212e:	9205      	str	r2, [sp, #20]
 8022130:	9a08      	ldr	r2, [sp, #32]
 8022132:	3204      	adds	r2, #4
 8022134:	9208      	str	r2, [sp, #32]
 8022136:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022138:	429a      	cmp	r2, r3
 802213a:	f47f af26 	bne.w	8021f8a <st_sssa8_ch_convolve_dw+0x2f6>
 802213e:	9b73      	ldr	r3, [sp, #460]	; 0x1cc
 8022140:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8022142:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8022146:	4413      	add	r3, r2
 8022148:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 802214c:	f8dd 80c0 	ldr.w	r8, [sp, #192]	; 0xc0
 8022150:	9373      	str	r3, [sp, #460]	; 0x1cc
 8022152:	e9dd ae2c 	ldrd	sl, lr, [sp, #176]	; 0xb0
 8022156:	e9dd 692e 	ldrd	r6, r9, [sp, #184]	; 0xb8
 802215a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802215c:	2b00      	cmp	r3, #0
 802215e:	d03d      	beq.n	80221dc <st_sssa8_ch_convolve_dw+0x548>
 8022160:	4433      	add	r3, r6
 8022162:	f1ae 0704 	sub.w	r7, lr, #4
 8022166:	f1a9 0902 	sub.w	r9, r9, #2
 802216a:	f1a8 0804 	sub.w	r8, r8, #4
 802216e:	b29b      	uxth	r3, r3
 8022170:	f8dd e1cc 	ldr.w	lr, [sp, #460]	; 0x1cc
 8022174:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 8022178:	9303      	str	r3, [sp, #12]
 802217a:	1c73      	adds	r3, r6, #1
 802217c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 802217e:	1991      	adds	r1, r2, r6
 8022180:	b29e      	uxth	r6, r3
 8022182:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022184:	f85a 2b04 	ldr.w	r2, [sl], #4
 8022188:	b163      	cbz	r3, 80221a4 <st_sssa8_ch_convolve_dw+0x510>
 802218a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802218c:	eb0c 0403 	add.w	r4, ip, r3
 8022190:	f991 3000 	ldrsb.w	r3, [r1]
 8022194:	4459      	add	r1, fp
 8022196:	f83c 0b02 	ldrh.w	r0, [ip], #2
 802219a:	1b5b      	subs	r3, r3, r5
 802219c:	45a4      	cmp	ip, r4
 802219e:	fb10 2203 	smlabb	r2, r0, r3, r2
 80221a2:	d1f5      	bne.n	8022190 <st_sssa8_ch_convolve_dw+0x4fc>
 80221a4:	f939 3f02 	ldrsh.w	r3, [r9, #2]!
 80221a8:	f858 0f04 	ldr.w	r0, [r8, #4]!
 80221ac:	2b00      	cmp	r3, #0
 80221ae:	f857 1f04 	ldr.w	r1, [r7, #4]!
 80221b2:	dd7b      	ble.n	80222ac <st_sssa8_ch_convolve_dw+0x618>
 80221b4:	0052      	lsls	r2, r2, #1
 80221b6:	fb52 1200 	smmla	r2, r2, r0, r1
 80221ba:	411a      	asrs	r2, r3
 80221bc:	f302 0207 	ssat	r2, #8, r2
 80221c0:	f88e 2000 	strb.w	r2, [lr]
 80221c4:	9b03      	ldr	r3, [sp, #12]
 80221c6:	f10e 0e01 	add.w	lr, lr, #1
 80221ca:	429e      	cmp	r6, r3
 80221cc:	d1d5      	bne.n	802217a <st_sssa8_ch_convolve_dw+0x4e6>
 80221ce:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80221d0:	9a73      	ldr	r2, [sp, #460]	; 0x1cc
 80221d2:	3b01      	subs	r3, #1
 80221d4:	b29b      	uxth	r3, r3
 80221d6:	3301      	adds	r3, #1
 80221d8:	441a      	add	r2, r3
 80221da:	9273      	str	r2, [sp, #460]	; 0x1cc
 80221dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80221de:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80221e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80221e2:	440b      	add	r3, r1
 80221e4:	3201      	adds	r2, #1
 80221e6:	b29b      	uxth	r3, r3
 80221e8:	b212      	sxth	r2, r2
 80221ea:	931d      	str	r3, [sp, #116]	; 0x74
 80221ec:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80221ee:	9221      	str	r2, [sp, #132]	; 0x84
 80221f0:	4293      	cmp	r3, r2
 80221f2:	f73f ae49 	bgt.w	8021e88 <st_sssa8_ch_convolve_dw+0x1f4>
 80221f6:	46d8      	mov	r8, fp
 80221f8:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80221fa:	9937      	ldr	r1, [sp, #220]	; 0xdc
 80221fc:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 80221fe:	440b      	add	r3, r1
 8022200:	3201      	adds	r2, #1
 8022202:	b29b      	uxth	r3, r3
 8022204:	b212      	sxth	r2, r2
 8022206:	9334      	str	r3, [sp, #208]	; 0xd0
 8022208:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 802220a:	4614      	mov	r4, r2
 802220c:	9236      	str	r2, [sp, #216]	; 0xd8
 802220e:	4293      	cmp	r3, r2
 8022210:	f73f ae1e 	bgt.w	8021e50 <st_sssa8_ch_convolve_dw+0x1bc>
 8022214:	2000      	movs	r0, #0
 8022216:	b05d      	add	sp, #372	; 0x174
 8022218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802221c:	f1c1 0101 	rsb	r1, r1, #1
 8022220:	fa00 f201 	lsl.w	r2, r0, r1
 8022224:	f302 021f 	ssat	r2, #32, r2
 8022228:	f85b 3c04 	ldr.w	r3, [fp, #-4]
 802222c:	fb52 f213 	smmulr	r2, r2, r3
 8022230:	f858 3c04 	ldr.w	r3, [r8, #-4]
 8022234:	4413      	add	r3, r2
 8022236:	f303 0307 	ssat	r3, #8, r3
 802223a:	9a05      	ldr	r2, [sp, #20]
 802223c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8022240:	e769      	b.n	8022116 <st_sssa8_ch_convolve_dw+0x482>
 8022242:	f1c1 0101 	rsb	r1, r1, #1
 8022246:	fa04 f201 	lsl.w	r2, r4, r1
 802224a:	f302 021f 	ssat	r2, #32, r2
 802224e:	f85b 3c08 	ldr.w	r3, [fp, #-8]
 8022252:	fb52 f213 	smmulr	r2, r2, r3
 8022256:	f858 3c08 	ldr.w	r3, [r8, #-8]
 802225a:	4413      	add	r3, r2
 802225c:	f303 0307 	ssat	r3, #8, r3
 8022260:	9a05      	ldr	r2, [sp, #20]
 8022262:	f802 3c02 	strb.w	r3, [r2, #-2]
 8022266:	e743      	b.n	80220f0 <st_sssa8_ch_convolve_dw+0x45c>
 8022268:	f1c1 0101 	rsb	r1, r1, #1
 802226c:	fa05 f201 	lsl.w	r2, r5, r1
 8022270:	f302 021f 	ssat	r2, #32, r2
 8022274:	f85b 3c0c 	ldr.w	r3, [fp, #-12]
 8022278:	fb52 f213 	smmulr	r2, r2, r3
 802227c:	f858 3c0c 	ldr.w	r3, [r8, #-12]
 8022280:	4413      	add	r3, r2
 8022282:	f303 0307 	ssat	r3, #8, r3
 8022286:	9a05      	ldr	r2, [sp, #20]
 8022288:	f802 3c03 	strb.w	r3, [r2, #-3]
 802228c:	e71d      	b.n	80220ca <st_sssa8_ch_convolve_dw+0x436>
 802228e:	f1c3 0301 	rsb	r3, r3, #1
 8022292:	fa06 f303 	lsl.w	r3, r6, r3
 8022296:	f303 031f 	ssat	r3, #32, r3
 802229a:	fb53 f311 	smmulr	r3, r3, r1
 802229e:	4413      	add	r3, r2
 80222a0:	f303 0307 	ssat	r3, #8, r3
 80222a4:	9a05      	ldr	r2, [sp, #20]
 80222a6:	f802 3c04 	strb.w	r3, [r2, #-4]
 80222aa:	e6fb      	b.n	80220a4 <st_sssa8_ch_convolve_dw+0x410>
 80222ac:	f1c3 0301 	rsb	r3, r3, #1
 80222b0:	fa02 f303 	lsl.w	r3, r2, r3
 80222b4:	f303 031f 	ssat	r3, #32, r3
 80222b8:	fb53 f310 	smmulr	r3, r3, r0
 80222bc:	440b      	add	r3, r1
 80222be:	f303 0307 	ssat	r3, #8, r3
 80222c2:	f88e 3000 	strb.w	r3, [lr]
 80222c6:	e77d      	b.n	80221c4 <st_sssa8_ch_convolve_dw+0x530>
 80222c8:	ffff0000 	.word	0xffff0000
 80222cc:	9b07      	ldr	r3, [sp, #28]
 80222ce:	9820      	ldr	r0, [sp, #128]	; 0x80
 80222d0:	4419      	add	r1, r3
 80222d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80222d4:	fb03 0101 	mla	r1, r3, r1, r0
 80222d8:	2b00      	cmp	r3, #0
 80222da:	f43f ae1f 	beq.w	8021f1c <st_sssa8_ch_convolve_dw+0x288>
 80222de:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80222e0:	2f00      	cmp	r7, #0
 80222e2:	f43f ae1b 	beq.w	8021f1c <st_sssa8_ch_convolve_dw+0x288>
 80222e6:	18ca      	adds	r2, r1, r3
 80222e8:	1ebb      	subs	r3, r7, #2
 80222ea:	465c      	mov	r4, fp
 80222ec:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80222f0:	9306      	str	r3, [sp, #24]
 80222f2:	1efb      	subs	r3, r7, #3
 80222f4:	4650      	mov	r0, sl
 80222f6:	46a1      	mov	r9, r4
 80222f8:	9308      	str	r3, [sp, #32]
 80222fa:	1f3b      	subs	r3, r7, #4
 80222fc:	e9cd 8b0e 	strd	r8, fp, [sp, #56]	; 0x38
 8022300:	4693      	mov	fp, r2
 8022302:	e9cd 3a0c 	strd	r3, sl, [sp, #48]	; 0x30
 8022306:	19c6      	adds	r6, r0, r7
 8022308:	f101 0e01 	add.w	lr, r1, #1
 802230c:	42b1      	cmp	r1, r6
 802230e:	bf38      	it	cc
 8022310:	4570      	cmpcc	r0, lr
 8022312:	d362      	bcc.n	80223da <st_sssa8_ch_convolve_dw+0x746>
 8022314:	2f0b      	cmp	r7, #11
 8022316:	d960      	bls.n	80223da <st_sssa8_ch_convolve_dw+0x746>
 8022318:	f009 0303 	and.w	r3, r9, #3
 802231c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802231e:	1cda      	adds	r2, r3, #3
 8022320:	42a2      	cmp	r2, r4
 8022322:	f200 80a5 	bhi.w	8022470 <st_sssa8_ch_convolve_dw+0x7dc>
 8022326:	2b00      	cmp	r3, #0
 8022328:	d05e      	beq.n	80223e8 <st_sssa8_ch_convolve_dw+0x754>
 802232a:	780a      	ldrb	r2, [r1, #0]
 802232c:	2b01      	cmp	r3, #1
 802232e:	f100 0a01 	add.w	sl, r0, #1
 8022332:	9d06      	ldr	r5, [sp, #24]
 8022334:	7002      	strb	r2, [r0, #0]
 8022336:	d00b      	beq.n	8022350 <st_sssa8_ch_convolve_dw+0x6bc>
 8022338:	780a      	ldrb	r2, [r1, #0]
 802233a:	2b03      	cmp	r3, #3
 802233c:	f100 0a02 	add.w	sl, r0, #2
 8022340:	9d08      	ldr	r5, [sp, #32]
 8022342:	7042      	strb	r2, [r0, #1]
 8022344:	d104      	bne.n	8022350 <st_sssa8_ch_convolve_dw+0x6bc>
 8022346:	780a      	ldrb	r2, [r1, #0]
 8022348:	f100 0a03 	add.w	sl, r0, #3
 802234c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802234e:	7082      	strb	r2, [r0, #2]
 8022350:	f891 c000 	ldrb.w	ip, [r1]
 8022354:	2400      	movs	r4, #0
 8022356:	eba7 0803 	sub.w	r8, r7, r3
 802235a:	2200      	movs	r2, #0
 802235c:	f36c 0407 	bfi	r4, ip, #0, #8
 8022360:	4403      	add	r3, r0
 8022362:	ea4f 0098 	mov.w	r0, r8, lsr #2
 8022366:	f36c 240f 	bfi	r4, ip, #8, #8
 802236a:	f36c 4417 	bfi	r4, ip, #16, #8
 802236e:	f36c 641f 	bfi	r4, ip, #24, #8
 8022372:	3201      	adds	r2, #1
 8022374:	f843 4b04 	str.w	r4, [r3], #4
 8022378:	4282      	cmp	r2, r0
 802237a:	d3fa      	bcc.n	8022372 <st_sssa8_ch_convolve_dw+0x6de>
 802237c:	f028 0203 	bic.w	r2, r8, #3
 8022380:	4542      	cmp	r2, r8
 8022382:	4492      	add	sl, r2
 8022384:	eba5 0502 	sub.w	r5, r5, r2
 8022388:	d01a      	beq.n	80223c0 <st_sssa8_ch_convolve_dw+0x72c>
 802238a:	780b      	ldrb	r3, [r1, #0]
 802238c:	f88a 3000 	strb.w	r3, [sl]
 8022390:	b1b5      	cbz	r5, 80223c0 <st_sssa8_ch_convolve_dw+0x72c>
 8022392:	780b      	ldrb	r3, [r1, #0]
 8022394:	2d01      	cmp	r5, #1
 8022396:	f88a 3001 	strb.w	r3, [sl, #1]
 802239a:	d011      	beq.n	80223c0 <st_sssa8_ch_convolve_dw+0x72c>
 802239c:	780b      	ldrb	r3, [r1, #0]
 802239e:	2d02      	cmp	r5, #2
 80223a0:	f88a 3002 	strb.w	r3, [sl, #2]
 80223a4:	d00c      	beq.n	80223c0 <st_sssa8_ch_convolve_dw+0x72c>
 80223a6:	780b      	ldrb	r3, [r1, #0]
 80223a8:	2d03      	cmp	r5, #3
 80223aa:	f88a 3003 	strb.w	r3, [sl, #3]
 80223ae:	d007      	beq.n	80223c0 <st_sssa8_ch_convolve_dw+0x72c>
 80223b0:	780b      	ldrb	r3, [r1, #0]
 80223b2:	2d04      	cmp	r5, #4
 80223b4:	f88a 3004 	strb.w	r3, [sl, #4]
 80223b8:	d002      	beq.n	80223c0 <st_sssa8_ch_convolve_dw+0x72c>
 80223ba:	780b      	ldrb	r3, [r1, #0]
 80223bc:	f88a 3005 	strb.w	r3, [sl, #5]
 80223c0:	45de      	cmp	lr, fp
 80223c2:	4671      	mov	r1, lr
 80223c4:	4630      	mov	r0, r6
 80223c6:	eba9 0907 	sub.w	r9, r9, r7
 80223ca:	d19c      	bne.n	8022306 <st_sssa8_ch_convolve_dw+0x672>
 80223cc:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 80223d0:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 80223d4:	e9dd a80d 	ldrd	sl, r8, [sp, #52]	; 0x34
 80223d8:	e5a0      	b.n	8021f1c <st_sssa8_ch_convolve_dw+0x288>
 80223da:	4603      	mov	r3, r0
 80223dc:	780a      	ldrb	r2, [r1, #0]
 80223de:	f803 2b01 	strb.w	r2, [r3], #1
 80223e2:	429e      	cmp	r6, r3
 80223e4:	d1fa      	bne.n	80223dc <st_sssa8_ch_convolve_dw+0x748>
 80223e6:	e7eb      	b.n	80223c0 <st_sssa8_ch_convolve_dw+0x72c>
 80223e8:	4625      	mov	r5, r4
 80223ea:	4682      	mov	sl, r0
 80223ec:	e7b0      	b.n	8022350 <st_sssa8_ch_convolve_dw+0x6bc>
 80223ee:	9b49      	ldr	r3, [sp, #292]	; 0x124
 80223f0:	2b00      	cmp	r3, #0
 80223f2:	d040      	beq.n	8022476 <st_sssa8_ch_convolve_dw+0x7e2>
 80223f4:	3b01      	subs	r3, #1
 80223f6:	f8bd 1144 	ldrh.w	r1, [sp, #324]	; 0x144
 80223fa:	9349      	str	r3, [sp, #292]	; 0x124
 80223fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80223fe:	f8ad 1146 	strh.w	r1, [sp, #326]	; 0x146
 8022402:	2b01      	cmp	r3, #1
 8022404:	f47f ad4d 	bne.w	8021ea2 <st_sssa8_ch_convolve_dw+0x20e>
 8022408:	2901      	cmp	r1, #1
 802240a:	d03e      	beq.n	802248a <st_sssa8_ch_convolve_dw+0x7f6>
 802240c:	9f18      	ldr	r7, [sp, #96]	; 0x60
 802240e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8022410:	f9bd 5074 	ldrsh.w	r5, [sp, #116]	; 0x74
 8022414:	4297      	cmp	r7, r2
 8022416:	f77f ad95 	ble.w	8021f44 <st_sssa8_ch_convolve_dw+0x2b0>
 802241a:	9e19      	ldr	r6, [sp, #100]	; 0x64
 802241c:	4614      	mov	r4, r2
 802241e:	f8cd b00c 	str.w	fp, [sp, #12]
 8022422:	4610      	mov	r0, r2
 8022424:	46b3      	mov	fp, r6
 8022426:	f8dd 80ec 	ldr.w	r8, [sp, #236]	; 0xec
 802242a:	f8dd 9080 	ldr.w	r9, [sp, #128]	; 0x80
 802242e:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8022432:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8022434:	3401      	adds	r4, #1
 8022436:	fb00 500a 	mla	r0, r0, sl, r5
 802243a:	4659      	mov	r1, fp
 802243c:	4642      	mov	r2, r8
 802243e:	b224      	sxth	r4, r4
 8022440:	fb06 9000 	mla	r0, r6, r0, r9
 8022444:	f003 fe2c 	bl	80260a0 <arm_copy_q7>
 8022448:	44c3      	add	fp, r8
 802244a:	42bc      	cmp	r4, r7
 802244c:	4620      	mov	r0, r4
 802244e:	dbf1      	blt.n	8022434 <st_sssa8_ch_convolve_dw+0x7a0>
 8022450:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022452:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8022456:	2b00      	cmp	r3, #0
 8022458:	f47f ad78 	bne.w	8021f4c <st_sssa8_ch_convolve_dw+0x2b8>
 802245c:	461e      	mov	r6, r3
 802245e:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 8022462:	f8dd e098 	ldr.w	lr, [sp, #152]	; 0x98
 8022466:	f8dd 81d8 	ldr.w	r8, [sp, #472]	; 0x1d8
 802246a:	e9dd 9c28 	ldrd	r9, ip, [sp, #160]	; 0xa0
 802246e:	e674      	b.n	802215a <st_sssa8_ch_convolve_dw+0x4c6>
 8022470:	4625      	mov	r5, r4
 8022472:	4682      	mov	sl, r0
 8022474:	e789      	b.n	802238a <st_sssa8_ch_convolve_dw+0x6f6>
 8022476:	9b4a      	ldr	r3, [sp, #296]	; 0x128
 8022478:	2101      	movs	r1, #1
 802247a:	3b01      	subs	r3, #1
 802247c:	f8ad 1146 	strh.w	r1, [sp, #326]	; 0x146
 8022480:	934a      	str	r3, [sp, #296]	; 0x128
 8022482:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8022484:	2b01      	cmp	r3, #1
 8022486:	f47f ad0c 	bne.w	8021ea2 <st_sssa8_ch_convolve_dw+0x20e>
 802248a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802248c:	4618      	mov	r0, r3
 802248e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8022490:	4298      	cmp	r0, r3
 8022492:	f77f ad57 	ble.w	8021f44 <st_sssa8_ch_convolve_dw+0x2b0>
 8022496:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8022498:	9833      	ldr	r0, [sp, #204]	; 0xcc
 802249a:	fb02 0201 	mla	r2, r2, r1, r0
 802249e:	9832      	ldr	r0, [sp, #200]	; 0xc8
 80224a0:	f9bd 1074 	ldrsh.w	r1, [sp, #116]	; 0x74
 80224a4:	1a15      	subs	r5, r2, r0
 80224a6:	9104      	str	r1, [sp, #16]
 80224a8:	428d      	cmp	r5, r1
 80224aa:	f77f ad4b 	ble.w	8021f44 <st_sssa8_ch_convolve_dw+0x2b0>
 80224ae:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 80224b2:	4698      	mov	r8, r3
 80224b4:	461a      	mov	r2, r3
 80224b6:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 80224ba:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80224bc:	fb06 f302 	mul.w	r3, r6, r2
 80224c0:	ea4f 77d8 	mov.w	r7, r8, lsr #31
 80224c4:	f8dd c010 	ldr.w	ip, [sp, #16]
 80224c8:	9303      	str	r3, [sp, #12]
 80224ca:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80224cc:	4664      	mov	r4, ip
 80224ce:	4293      	cmp	r3, r2
 80224d0:	bfd8      	it	le
 80224d2:	f047 0701 	orrle.w	r7, r7, #1
 80224d6:	4566      	cmp	r6, ip
 80224d8:	465a      	mov	r2, fp
 80224da:	4651      	mov	r1, sl
 80224dc:	4648      	mov	r0, r9
 80224de:	bfcc      	ite	gt
 80224e0:	2300      	movgt	r3, #0
 80224e2:	2301      	movle	r3, #1
 80224e4:	ea53 73d4 	orrs.w	r3, r3, r4, lsr #31
 80224e8:	d102      	bne.n	80224f0 <st_sssa8_ch_convolve_dw+0x85c>
 80224ea:	2f00      	cmp	r7, #0
 80224ec:	f000 80c4 	beq.w	8022678 <st_sssa8_ch_convolve_dw+0x9e4>
 80224f0:	f001 fbba 	bl	8023c68 <st_uint8_fill>
 80224f4:	3401      	adds	r4, #1
 80224f6:	44da      	add	sl, fp
 80224f8:	b224      	sxth	r4, r4
 80224fa:	42ac      	cmp	r4, r5
 80224fc:	46a4      	mov	ip, r4
 80224fe:	dbea      	blt.n	80224d6 <st_sssa8_ch_convolve_dw+0x842>
 8022500:	f108 0801 	add.w	r8, r8, #1
 8022504:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022506:	fa0f f888 	sxth.w	r8, r8
 802250a:	4598      	cmp	r8, r3
 802250c:	4642      	mov	r2, r8
 802250e:	dbd5      	blt.n	80224bc <st_sssa8_ch_convolve_dw+0x828>
 8022510:	e518      	b.n	8021f44 <st_sssa8_ch_convolve_dw+0x2b0>
 8022512:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8022514:	4288      	cmp	r0, r1
 8022516:	f77f ad15 	ble.w	8021f44 <st_sssa8_ch_convolve_dw+0x2b0>
 802251a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802251c:	9833      	ldr	r0, [sp, #204]	; 0xcc
 802251e:	fb02 0203 	mla	r2, r2, r3, r0
 8022522:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8022524:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	; 0x74
 8022528:	1a15      	subs	r5, r2, r0
 802252a:	9304      	str	r3, [sp, #16]
 802252c:	42ab      	cmp	r3, r5
 802252e:	f6bf ad09 	bge.w	8021f44 <st_sssa8_ch_convolve_dw+0x2b0>
 8022532:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8022536:	460e      	mov	r6, r1
 8022538:	4689      	mov	r9, r1
 802253a:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 802253e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8022540:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8022542:	9a04      	ldr	r2, [sp, #16]
 8022544:	454b      	cmp	r3, r9
 8022546:	fb09 f307 	mul.w	r3, r9, r7
 802254a:	4614      	mov	r4, r2
 802254c:	bfcc      	ite	gt
 802254e:	2100      	movgt	r1, #0
 8022550:	2101      	movle	r1, #1
 8022552:	9303      	str	r3, [sp, #12]
 8022554:	ea41 79d6 	orr.w	r9, r1, r6, lsr #31
 8022558:	464b      	mov	r3, r9
 802255a:	46b1      	mov	r9, r6
 802255c:	461e      	mov	r6, r3
 802255e:	4297      	cmp	r7, r2
 8022560:	bfcc      	ite	gt
 8022562:	2300      	movgt	r3, #0
 8022564:	2301      	movle	r3, #1
 8022566:	ea53 73d4 	orrs.w	r3, r3, r4, lsr #31
 802256a:	d100      	bne.n	802256e <st_sssa8_ch_convolve_dw+0x8da>
 802256c:	b196      	cbz	r6, 8022594 <st_sssa8_ch_convolve_dw+0x900>
 802256e:	465a      	mov	r2, fp
 8022570:	4651      	mov	r1, sl
 8022572:	4640      	mov	r0, r8
 8022574:	f001 fb78 	bl	8023c68 <st_uint8_fill>
 8022578:	3401      	adds	r4, #1
 802257a:	44da      	add	sl, fp
 802257c:	b224      	sxth	r4, r4
 802257e:	42ac      	cmp	r4, r5
 8022580:	4622      	mov	r2, r4
 8022582:	dbec      	blt.n	802255e <st_sssa8_ch_convolve_dw+0x8ca>
 8022584:	464e      	mov	r6, r9
 8022586:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022588:	3601      	adds	r6, #1
 802258a:	b236      	sxth	r6, r6
 802258c:	429e      	cmp	r6, r3
 802258e:	46b1      	mov	r9, r6
 8022590:	dbd6      	blt.n	8022540 <st_sssa8_ch_convolve_dw+0x8ac>
 8022592:	e4d7      	b.n	8021f44 <st_sssa8_ch_convolve_dw+0x2b0>
 8022594:	9b03      	ldr	r3, [sp, #12]
 8022596:	9820      	ldr	r0, [sp, #128]	; 0x80
 8022598:	441a      	add	r2, r3
 802259a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802259c:	fb03 0102 	mla	r1, r3, r2, r0
 80225a0:	2b00      	cmp	r3, #0
 80225a2:	d0e9      	beq.n	8022578 <st_sssa8_ch_convolve_dw+0x8e4>
 80225a4:	eb01 0c03 	add.w	ip, r1, r3
 80225a8:	4650      	mov	r0, sl
 80225aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80225ae:	021b      	lsls	r3, r3, #8
 80225b0:	4561      	cmp	r1, ip
 80225b2:	ea4f 2233 	mov.w	r2, r3, ror #8
 80225b6:	fa33 f382 	uxtab16	r3, r3, r2
 80225ba:	f820 3b02 	strh.w	r3, [r0], #2
 80225be:	d1f4      	bne.n	80225aa <st_sssa8_ch_convolve_dw+0x916>
 80225c0:	e7da      	b.n	8022578 <st_sssa8_ch_convolve_dw+0x8e4>
 80225c2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80225c4:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80225c6:	4618      	mov	r0, r3
 80225c8:	4288      	cmp	r0, r1
 80225ca:	f77f acbb 	ble.w	8021f44 <st_sssa8_ch_convolve_dw+0x2b0>
 80225ce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80225d0:	9833      	ldr	r0, [sp, #204]	; 0xcc
 80225d2:	fb02 0203 	mla	r2, r2, r3, r0
 80225d6:	9832      	ldr	r0, [sp, #200]	; 0xc8
 80225d8:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	; 0x74
 80225dc:	1a15      	subs	r5, r2, r0
 80225de:	9304      	str	r3, [sp, #16]
 80225e0:	42ab      	cmp	r3, r5
 80225e2:	f6bf acaf 	bge.w	8021f44 <st_sssa8_ch_convolve_dw+0x2b0>
 80225e6:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 80225ea:	4689      	mov	r9, r1
 80225ec:	460a      	mov	r2, r1
 80225ee:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 80225f2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80225f4:	fb06 f302 	mul.w	r3, r6, r2
 80225f8:	ea4f 77d9 	mov.w	r7, r9, lsr #31
 80225fc:	9904      	ldr	r1, [sp, #16]
 80225fe:	9303      	str	r3, [sp, #12]
 8022600:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8022602:	460c      	mov	r4, r1
 8022604:	4293      	cmp	r3, r2
 8022606:	bfd8      	it	le
 8022608:	f047 0701 	orrle.w	r7, r7, #1
 802260c:	428e      	cmp	r6, r1
 802260e:	bfcc      	ite	gt
 8022610:	2300      	movgt	r3, #0
 8022612:	2301      	movle	r3, #1
 8022614:	ea53 73d4 	orrs.w	r3, r3, r4, lsr #31
 8022618:	d100      	bne.n	802261c <st_sssa8_ch_convolve_dw+0x988>
 802261a:	b19f      	cbz	r7, 8022644 <st_sssa8_ch_convolve_dw+0x9b0>
 802261c:	465a      	mov	r2, fp
 802261e:	4651      	mov	r1, sl
 8022620:	4640      	mov	r0, r8
 8022622:	f001 fb21 	bl	8023c68 <st_uint8_fill>
 8022626:	3401      	adds	r4, #1
 8022628:	44da      	add	sl, fp
 802262a:	b224      	sxth	r4, r4
 802262c:	42ac      	cmp	r4, r5
 802262e:	4621      	mov	r1, r4
 8022630:	dbec      	blt.n	802260c <st_sssa8_ch_convolve_dw+0x978>
 8022632:	f109 0901 	add.w	r9, r9, #1
 8022636:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022638:	fa0f f989 	sxth.w	r9, r9
 802263c:	4599      	cmp	r9, r3
 802263e:	464a      	mov	r2, r9
 8022640:	dbd8      	blt.n	80225f4 <st_sssa8_ch_convolve_dw+0x960>
 8022642:	e47f      	b.n	8021f44 <st_sssa8_ch_convolve_dw+0x2b0>
 8022644:	9b03      	ldr	r3, [sp, #12]
 8022646:	185a      	adds	r2, r3, r1
 8022648:	e9dd 311f 	ldrd	r3, r1, [sp, #124]	; 0x7c
 802264c:	fb03 1202 	mla	r2, r3, r2, r1
 8022650:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8022652:	2b00      	cmp	r3, #0
 8022654:	d0e7      	beq.n	8022626 <st_sssa8_ch_convolve_dw+0x992>
 8022656:	18d0      	adds	r0, r2, r3
 8022658:	4651      	mov	r1, sl
 802265a:	f812 cb01 	ldrb.w	ip, [r2], #1
 802265e:	ea4f 630c 	mov.w	r3, ip, lsl #24
 8022662:	4282      	cmp	r2, r0
 8022664:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8022668:	ea4f 2c33 	mov.w	ip, r3, ror #8
 802266c:	fa33 f38c 	uxtab16	r3, r3, ip
 8022670:	f841 3b04 	str.w	r3, [r1], #4
 8022674:	d1f1      	bne.n	802265a <st_sssa8_ch_convolve_dw+0x9c6>
 8022676:	e7d6      	b.n	8022626 <st_sssa8_ch_convolve_dw+0x992>
 8022678:	9b03      	ldr	r3, [sp, #12]
 802267a:	eb03 000c 	add.w	r0, r3, ip
 802267e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022680:	461a      	mov	r2, r3
 8022682:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022684:	fb02 3000 	mla	r0, r2, r0, r3
 8022688:	f003 fd0a 	bl	80260a0 <arm_copy_q7>
 802268c:	e732      	b.n	80224f4 <st_sssa8_ch_convolve_dw+0x860>
 802268e:	428e      	cmp	r6, r1
 8022690:	f844 5f04 	str.w	r5, [r4, #4]!
 8022694:	f47f ab3d 	bne.w	8021d12 <st_sssa8_ch_convolve_dw+0x7e>
 8022698:	f7ff bb4a 	b.w	8021d30 <st_sssa8_ch_convolve_dw+0x9c>
 802269c:	2401      	movs	r4, #1
 802269e:	f7ff bb6d 	b.w	8021d7c <st_sssa8_ch_convolve_dw+0xe8>
 80226a2:	bf00      	nop

080226a4 <st_sssa8_ch_convolve_rank1upd>:
 80226a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80226a8:	b083      	sub	sp, #12
 80226aa:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 80226ae:	f99d a038 	ldrsb.w	sl, [sp, #56]	; 0x38
 80226b2:	fb13 f304 	smulbb	r3, r3, r4
 80226b6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80226b8:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 80226bc:	fb13 f600 	smulbb	r6, r3, r0
 80226c0:	2a00      	cmp	r2, #0
 80226c2:	d06c      	beq.n	802279e <st_sssa8_ch_convolve_rank1upd+0xfa>
 80226c4:	b2b6      	uxth	r6, r6
 80226c6:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 80226ca:	ea4f 0944 	mov.w	r9, r4, lsl #1
 80226ce:	ea4f 0b96 	mov.w	fp, r6, lsr #2
 80226d2:	f006 0603 	and.w	r6, r6, #3
 80226d6:	eb08 0e82 	add.w	lr, r8, r2, lsl #2
 80226da:	f1a9 0904 	sub.w	r9, r9, #4
 80226de:	f1ab 0381 	sub.w	r3, fp, #129	; 0x81
 80226e2:	f1ab 0080 	sub.w	r0, fp, #128	; 0x80
 80226e6:	44a9      	add	r9, r5
 80226e8:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 80226ec:	ebc3 2243 	rsb	r2, r3, r3, lsl #9
 80226f0:	3301      	adds	r3, #1
 80226f2:	eb00 12c2 	add.w	r2, r0, r2, lsl #7
 80226f6:	ea4f 2c43 	mov.w	ip, r3, lsl #9
 80226fa:	b293      	uxth	r3, r2
 80226fc:	9301      	str	r3, [sp, #4]
 80226fe:	f1bb 0f80 	cmp.w	fp, #128	; 0x80
 8022702:	d94f      	bls.n	80227a4 <st_sssa8_ch_convolve_rank1upd+0x100>
 8022704:	eb01 050c 	add.w	r5, r1, ip
 8022708:	2400      	movs	r4, #0
 802270a:	2300      	movs	r3, #0
 802270c:	f501 7000 	add.w	r0, r1, #512	; 0x200
 8022710:	461f      	mov	r7, r3
 8022712:	f851 2b04 	ldr.w	r2, [r1], #4
 8022716:	fa2f f382 	sxtb16	r3, r2
 802271a:	4288      	cmp	r0, r1
 802271c:	ea4f 2232 	mov.w	r2, r2, ror #8
 8022720:	fa97 f313 	qadd16	r3, r7, r3
 8022724:	fa2f f282 	sxtb16	r2, r2
 8022728:	fa93 f712 	qadd16	r7, r3, r2
 802272c:	d1f1      	bne.n	8022712 <st_sssa8_ch_convolve_rank1upd+0x6e>
 802272e:	b23a      	sxth	r2, r7
 8022730:	4285      	cmp	r5, r0
 8022732:	4601      	mov	r1, r0
 8022734:	eb02 4327 	add.w	r3, r2, r7, asr #16
 8022738:	441c      	add	r4, r3
 802273a:	d1e6      	bne.n	802270a <st_sssa8_ch_convolve_rank1upd+0x66>
 802273c:	9801      	ldr	r0, [sp, #4]
 802273e:	b1b8      	cbz	r0, 8022770 <st_sssa8_ch_convolve_rank1upd+0xcc>
 8022740:	3801      	subs	r0, #1
 8022742:	2200      	movs	r2, #0
 8022744:	b280      	uxth	r0, r0
 8022746:	3001      	adds	r0, #1
 8022748:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 802274c:	f851 3b04 	ldr.w	r3, [r1], #4
 8022750:	fa2f f583 	sxtb16	r5, r3
 8022754:	4281      	cmp	r1, r0
 8022756:	ea4f 2333 	mov.w	r3, r3, ror #8
 802275a:	fa92 f215 	qadd16	r2, r2, r5
 802275e:	fa2f f383 	sxtb16	r3, r3
 8022762:	fa92 f213 	qadd16	r2, r2, r3
 8022766:	d1f1      	bne.n	802274c <st_sssa8_ch_convolve_rank1upd+0xa8>
 8022768:	b213      	sxth	r3, r2
 802276a:	eb03 4222 	add.w	r2, r3, r2, asr #16
 802276e:	4414      	add	r4, r2
 8022770:	b16e      	cbz	r6, 802278e <st_sssa8_ch_convolve_rank1upd+0xea>
 8022772:	f991 3000 	ldrsb.w	r3, [r1]
 8022776:	2e01      	cmp	r6, #1
 8022778:	441c      	add	r4, r3
 802277a:	d018      	beq.n	80227ae <st_sssa8_ch_convolve_rank1upd+0x10a>
 802277c:	f991 3001 	ldrsb.w	r3, [r1, #1]
 8022780:	2e02      	cmp	r6, #2
 8022782:	441c      	add	r4, r3
 8022784:	d011      	beq.n	80227aa <st_sssa8_ch_convolve_rank1upd+0x106>
 8022786:	f991 3002 	ldrsb.w	r3, [r1, #2]
 802278a:	3103      	adds	r1, #3
 802278c:	441c      	add	r4, r3
 802278e:	f858 3b04 	ldr.w	r3, [r8], #4
 8022792:	fb0a 3414 	mls	r4, sl, r4, r3
 8022796:	45c6      	cmp	lr, r8
 8022798:	f849 4f04 	str.w	r4, [r9, #4]!
 802279c:	d1af      	bne.n	80226fe <st_sssa8_ch_convolve_rank1upd+0x5a>
 802279e:	b003      	add	sp, #12
 80227a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80227a4:	4658      	mov	r0, fp
 80227a6:	2400      	movs	r4, #0
 80227a8:	e7c9      	b.n	802273e <st_sssa8_ch_convolve_rank1upd+0x9a>
 80227aa:	3102      	adds	r1, #2
 80227ac:	e7ef      	b.n	802278e <st_sssa8_ch_convolve_rank1upd+0xea>
 80227ae:	3101      	adds	r1, #1
 80227b0:	e7ed      	b.n	802278e <st_sssa8_ch_convolve_rank1upd+0xea>
 80227b2:	bf00      	nop

080227b4 <st_sssa8_ch_convolve>:
 80227b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80227b8:	b0d3      	sub	sp, #332	; 0x14c
 80227ba:	4699      	mov	r9, r3
 80227bc:	4688      	mov	r8, r1
 80227be:	f8bd 5174 	ldrh.w	r5, [sp, #372]	; 0x174
 80227c2:	f8bd 6178 	ldrh.w	r6, [sp, #376]	; 0x178
 80227c6:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
 80227c8:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
 80227cc:	f8bd 717c 	ldrh.w	r7, [sp, #380]	; 0x17c
 80227d0:	4629      	mov	r1, r5
 80227d2:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 80227d6:	900d      	str	r0, [sp, #52]	; 0x34
 80227d8:	fb16 f307 	smulbb	r3, r6, r7
 80227dc:	ebc5 7045 	rsb	r0, r5, r5, lsl #29
 80227e0:	9519      	str	r5, [sp, #100]	; 0x64
 80227e2:	00ad      	lsls	r5, r5, #2
 80227e4:	fb13 f309 	smulbb	r3, r3, r9
 80227e8:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 80227ec:	920b      	str	r2, [sp, #44]	; 0x2c
 80227ee:	b29b      	uxth	r3, r3
 80227f0:	4602      	mov	r2, r0
 80227f2:	9022      	str	r0, [sp, #136]	; 0x88
 80227f4:	931a      	str	r3, [sp, #104]	; 0x68
 80227f6:	442a      	add	r2, r5
 80227f8:	f8bd 3184 	ldrh.w	r3, [sp, #388]	; 0x184
 80227fc:	f8bd 0180 	ldrh.w	r0, [sp, #384]	; 0x180
 8022800:	9323      	str	r3, [sp, #140]	; 0x8c
 8022802:	f8bd 3188 	ldrh.w	r3, [sp, #392]	; 0x188
 8022806:	9617      	str	r6, [sp, #92]	; 0x5c
 8022808:	930f      	str	r3, [sp, #60]	; 0x3c
 802280a:	f8bd 318c 	ldrh.w	r3, [sp, #396]	; 0x18c
 802280e:	9414      	str	r4, [sp, #80]	; 0x50
 8022810:	931b      	str	r3, [sp, #108]	; 0x6c
 8022812:	f8bd 31a8 	ldrh.w	r3, [sp, #424]	; 0x1a8
 8022816:	9725      	str	r7, [sp, #148]	; 0x94
 8022818:	9311      	str	r3, [sp, #68]	; 0x44
 802281a:	f8bd 31ac 	ldrh.w	r3, [sp, #428]	; 0x1ac
 802281e:	9507      	str	r5, [sp, #28]
 8022820:	9224      	str	r2, [sp, #144]	; 0x90
 8022822:	9015      	str	r0, [sp, #84]	; 0x54
 8022824:	9c66      	ldr	r4, [sp, #408]	; 0x198
 8022826:	f99d b19c 	ldrsb.w	fp, [sp, #412]	; 0x19c
 802282a:	f99d 61a0 	ldrsb.w	r6, [sp, #416]	; 0x1a0
 802282e:	9320      	str	r3, [sp, #128]	; 0x80
 8022830:	2900      	cmp	r1, #0
 8022832:	f000 8505 	beq.w	8023240 <st_sssa8_ch_convolve+0xa8c>
 8022836:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 802283a:	4620      	mov	r0, r4
 802283c:	1f15      	subs	r5, r2, #4
 802283e:	2701      	movs	r7, #1
 8022840:	4464      	add	r4, ip
 8022842:	f930 3b02 	ldrsh.w	r3, [r0], #2
 8022846:	fa07 f103 	lsl.w	r1, r7, r3
 802284a:	fa06 f203 	lsl.w	r2, r6, r3
 802284e:	2b00      	cmp	r3, #0
 8022850:	eb02 0251 	add.w	r2, r2, r1, lsr #1
 8022854:	f340 816a 	ble.w	8022b2c <st_sssa8_ch_convolve+0x378>
 8022858:	4284      	cmp	r4, r0
 802285a:	f845 2f04 	str.w	r2, [r5, #4]!
 802285e:	d1f0      	bne.n	8022842 <st_sssa8_ch_convolve+0x8e>
 8022860:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022862:	9a07      	ldr	r2, [sp, #28]
 8022864:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8022866:	189d      	adds	r5, r3, r2
 8022868:	eba4 010c 	sub.w	r1, r4, ip
 802286c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 802286e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022870:	aa3a      	add	r2, sp, #232	; 0xe8
 8022872:	974a      	str	r7, [sp, #296]	; 0x128
 8022874:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8022878:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 802287a:	ab36      	add	r3, sp, #216	; 0xd8
 802287c:	9433      	str	r4, [sp, #204]	; 0xcc
 802287e:	a83e      	add	r0, sp, #248	; 0xf8
 8022880:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022882:	974b      	str	r7, [sp, #300]	; 0x12c
 8022884:	9438      	str	r4, [sp, #224]	; 0xe0
 8022886:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8022888:	9c20      	ldr	r4, [sp, #128]	; 0x80
 802288a:	974c      	str	r7, [sp, #304]	; 0x130
 802288c:	9437      	str	r4, [sp, #220]	; 0xdc
 802288e:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8022890:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8022892:	9200      	str	r2, [sp, #0]
 8022894:	aa32      	add	r2, sp, #200	; 0xc8
 8022896:	9121      	str	r1, [sp, #132]	; 0x84
 8022898:	a948      	add	r1, sp, #288	; 0x120
 802289a:	f8cd 80d0 	str.w	r8, [sp, #208]	; 0xd0
 802289e:	974d      	str	r7, [sp, #308]	; 0x134
 80228a0:	e9cd 643b 	strd	r6, r4, [sp, #236]	; 0xec
 80228a4:	f001 f96a 	bl	8023b7c <ai_padding_opt_init>
 80228a8:	fb0a f204 	mul.w	r2, sl, r4
 80228ac:	e9dd 3119 	ldrd	r3, r1, [sp, #100]	; 0x64
 80228b0:	fb06 f202 	mul.w	r2, r6, r2
 80228b4:	fb03 f301 	mul.w	r3, r3, r1
 80228b8:	9914      	ldr	r1, [sp, #80]	; 0x50
 80228ba:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80228be:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80228c2:	921c      	str	r2, [sp, #112]	; 0x70
 80228c4:	f340 84ae 	ble.w	8023224 <st_sssa8_ch_convolve+0xa70>
 80228c8:	2300      	movs	r3, #0
 80228ca:	932e      	str	r3, [sp, #184]	; 0xb8
 80228cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80228ce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80228d0:	9969      	ldr	r1, [sp, #420]	; 0x1a4
 80228d2:	fb03 f302 	mul.w	r3, r3, r2
 80228d6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80228d8:	fb02 1303 	mla	r3, r2, r3, r1
 80228dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80228de:	429a      	cmp	r2, r3
 80228e0:	f080 812a 	bcs.w	8022b38 <st_sssa8_ch_convolve+0x384>
 80228e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80228e6:	fb03 f308 	mul.w	r3, r3, r8
 80228ea:	fb09 2303 	mla	r3, r9, r3, r2
 80228ee:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 80228f0:	429a      	cmp	r2, r3
 80228f2:	bf2c      	ite	cs
 80228f4:	2300      	movcs	r3, #0
 80228f6:	2301      	movcc	r3, #1
 80228f8:	991a      	ldr	r1, [sp, #104]	; 0x68
 80228fa:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80228fe:	fb92 f2f1 	sdiv	r2, r2, r1
 8022902:	9919      	ldr	r1, [sp, #100]	; 0x64
 8022904:	f022 0201 	bic.w	r2, r2, #1
 8022908:	428a      	cmp	r2, r1
 802290a:	bf28      	it	cs
 802290c:	460a      	movcs	r2, r1
 802290e:	2a01      	cmp	r2, #1
 8022910:	921f      	str	r2, [sp, #124]	; 0x7c
 8022912:	f240 82ec 	bls.w	8022eee <st_sssa8_ch_convolve+0x73a>
 8022916:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8022918:	460a      	mov	r2, r1
 802291a:	fbb1 f1f0 	udiv	r1, r1, r0
 802291e:	fb00 2211 	mls	r2, r0, r1, r2
 8022922:	b289      	uxth	r1, r1
 8022924:	b292      	uxth	r2, r2
 8022926:	912c      	str	r1, [sp, #176]	; 0xb0
 8022928:	b11a      	cbz	r2, 8022932 <st_sssa8_ch_convolve+0x17e>
 802292a:	460a      	mov	r2, r1
 802292c:	3201      	adds	r2, #1
 802292e:	b292      	uxth	r2, r2
 8022930:	922c      	str	r2, [sp, #176]	; 0xb0
 8022932:	2b00      	cmp	r3, #0
 8022934:	f040 8102 	bne.w	8022b3c <st_sssa8_ch_convolve+0x388>
 8022938:	9917      	ldr	r1, [sp, #92]	; 0x5c
 802293a:	fa0f fb8b 	sxth.w	fp, fp
 802293e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8022940:	fb09 f201 	mul.w	r2, r9, r1
 8022944:	9819      	ldr	r0, [sp, #100]	; 0x64
 8022946:	005b      	lsls	r3, r3, #1
 8022948:	9216      	str	r2, [sp, #88]	; 0x58
 802294a:	0052      	lsls	r2, r2, #1
 802294c:	fb01 f303 	mul.w	r3, r1, r3
 8022950:	9207      	str	r2, [sp, #28]
 8022952:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022954:	9026      	str	r0, [sp, #152]	; 0x98
 8022956:	fb0a 2303 	mla	r3, sl, r3, r2
 802295a:	4652      	mov	r2, sl
 802295c:	46ca      	mov	sl, r9
 802295e:	9313      	str	r3, [sp, #76]	; 0x4c
 8022960:	465b      	mov	r3, fp
 8022962:	4691      	mov	r9, r2
 8022964:	46c3      	mov	fp, r8
 8022966:	4698      	mov	r8, r3
 8022968:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802296a:	1e5a      	subs	r2, r3, #1
 802296c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8022970:	b292      	uxth	r2, r2
 8022972:	429a      	cmp	r2, r3
 8022974:	922c      	str	r2, [sp, #176]	; 0xb0
 8022976:	f000 82b6 	beq.w	8022ee6 <st_sssa8_ch_convolve+0x732>
 802297a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802297c:	b92b      	cbnz	r3, 802298a <st_sssa8_ch_convolve+0x1d6>
 802297e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022980:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8022982:	991c      	ldr	r1, [sp, #112]	; 0x70
 8022984:	985c      	ldr	r0, [sp, #368]	; 0x170
 8022986:	f001 fdbb 	bl	8024500 <st_int8_to16_dual>
 802298a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802298c:	2b00      	cmp	r3, #0
 802298e:	f000 80a9 	beq.w	8022ae4 <st_sssa8_ch_convolve+0x330>
 8022992:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8022994:	2400      	movs	r4, #0
 8022996:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8022998:	425b      	negs	r3, r3
 802299a:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 802299c:	941e      	str	r4, [sp, #120]	; 0x78
 802299e:	b29b      	uxth	r3, r3
 80229a0:	921d      	str	r2, [sp, #116]	; 0x74
 80229a2:	9318      	str	r3, [sp, #96]	; 0x60
 80229a4:	4643      	mov	r3, r8
 80229a6:	46c8      	mov	r8, r9
 80229a8:	46b9      	mov	r9, r7
 80229aa:	461f      	mov	r7, r3
 80229ac:	a83e      	add	r0, sp, #248	; 0xf8
 80229ae:	f001 f93f 	bl	8023c30 <ai_padding_opt_phase1>
 80229b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80229b4:	2b00      	cmp	r3, #0
 80229b6:	d06e      	beq.n	8022a96 <st_sssa8_ch_convolve+0x2e2>
 80229b8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80229ba:	2500      	movs	r5, #0
 80229bc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80229be:	9510      	str	r5, [sp, #64]	; 0x40
 80229c0:	1a99      	subs	r1, r3, r2
 80229c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80229c4:	425a      	negs	r2, r3
 80229c6:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
 80229ca:	9312      	str	r3, [sp, #72]	; 0x48
 80229cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80229ce:	fb04 1303 	mla	r3, r4, r3, r1
 80229d2:	9308      	str	r3, [sp, #32]
 80229d4:	b293      	uxth	r3, r2
 80229d6:	930a      	str	r3, [sp, #40]	; 0x28
 80229d8:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 80229da:	2a00      	cmp	r2, #0
 80229dc:	f040 8192 	bne.w	8022d04 <st_sssa8_ch_convolve+0x550>
 80229e0:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 80229e2:	2a00      	cmp	r2, #0
 80229e4:	f040 8194 	bne.w	8022d10 <st_sssa8_ch_convolve+0x55c>
 80229e8:	9a40      	ldr	r2, [sp, #256]	; 0x100
 80229ea:	2101      	movs	r1, #1
 80229ec:	3a01      	subs	r2, #1
 80229ee:	f8ad 111e 	strh.w	r1, [sp, #286]	; 0x11e
 80229f2:	9240      	str	r2, [sp, #256]	; 0x100
 80229f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80229f6:	9a08      	ldr	r2, [sp, #32]
 80229f8:	4293      	cmp	r3, r2
 80229fa:	da3a      	bge.n	8022a72 <st_sssa8_ch_convolve+0x2be>
 80229fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80229fe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8022a00:	fb05 2503 	mla	r5, r5, r3, r2
 8022a04:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8022a08:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8022a0a:	930e      	str	r3, [sp, #56]	; 0x38
 8022a0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022a0e:	1aad      	subs	r5, r5, r2
 8022a10:	461e      	mov	r6, r3
 8022a12:	461a      	mov	r2, r3
 8022a14:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022a16:	428d      	cmp	r5, r1
 8022a18:	dd25      	ble.n	8022a66 <st_sssa8_ch_convolve+0x2b2>
 8022a1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022a1c:	460c      	mov	r4, r1
 8022a1e:	9609      	str	r6, [sp, #36]	; 0x24
 8022a20:	468c      	mov	ip, r1
 8022a22:	4293      	cmp	r3, r2
 8022a24:	fb02 f20b 	mul.w	r2, r2, fp
 8022a28:	bfcc      	ite	gt
 8022a2a:	2300      	movgt	r3, #0
 8022a2c:	2301      	movle	r3, #1
 8022a2e:	920c      	str	r2, [sp, #48]	; 0x30
 8022a30:	ea43 73d6 	orr.w	r3, r3, r6, lsr #31
 8022a34:	461e      	mov	r6, r3
 8022a36:	45e3      	cmp	fp, ip
 8022a38:	4652      	mov	r2, sl
 8022a3a:	4649      	mov	r1, r9
 8022a3c:	4638      	mov	r0, r7
 8022a3e:	bfcc      	ite	gt
 8022a40:	f04f 0e00 	movgt.w	lr, #0
 8022a44:	f04f 0e01 	movle.w	lr, #1
 8022a48:	ea5e 73d4 	orrs.w	r3, lr, r4, lsr #31
 8022a4c:	d102      	bne.n	8022a54 <st_sssa8_ch_convolve+0x2a0>
 8022a4e:	2e00      	cmp	r6, #0
 8022a50:	f000 8146 	beq.w	8022ce0 <st_sssa8_ch_convolve+0x52c>
 8022a54:	f003 fb46 	bl	80260e4 <arm_fill_q15>
 8022a58:	3401      	adds	r4, #1
 8022a5a:	44c1      	add	r9, r8
 8022a5c:	b224      	sxth	r4, r4
 8022a5e:	42ac      	cmp	r4, r5
 8022a60:	46a4      	mov	ip, r4
 8022a62:	dbe8      	blt.n	8022a36 <st_sssa8_ch_convolve+0x282>
 8022a64:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8022a66:	3601      	adds	r6, #1
 8022a68:	9b08      	ldr	r3, [sp, #32]
 8022a6a:	b236      	sxth	r6, r6
 8022a6c:	429e      	cmp	r6, r3
 8022a6e:	4632      	mov	r2, r6
 8022a70:	dbd0      	blt.n	8022a14 <st_sssa8_ch_convolve+0x260>
 8022a72:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022a74:	454b      	cmp	r3, r9
 8022a76:	f000 8179 	beq.w	8022d6c <st_sssa8_ch_convolve+0x5b8>
 8022a7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022a7c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8022a7e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8022a80:	4403      	add	r3, r0
 8022a82:	3101      	adds	r1, #1
 8022a84:	461a      	mov	r2, r3
 8022a86:	b20b      	sxth	r3, r1
 8022a88:	b292      	uxth	r2, r2
 8022a8a:	9310      	str	r3, [sp, #64]	; 0x40
 8022a8c:	461d      	mov	r5, r3
 8022a8e:	920a      	str	r2, [sp, #40]	; 0x28
 8022a90:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022a92:	429a      	cmp	r2, r3
 8022a94:	dca0      	bgt.n	80229d8 <st_sssa8_ch_convolve+0x224>
 8022a96:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022a98:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8022a9a:	991e      	ldr	r1, [sp, #120]	; 0x78
 8022a9c:	4403      	add	r3, r0
 8022a9e:	3101      	adds	r1, #1
 8022aa0:	461a      	mov	r2, r3
 8022aa2:	b20b      	sxth	r3, r1
 8022aa4:	b292      	uxth	r2, r2
 8022aa6:	931e      	str	r3, [sp, #120]	; 0x78
 8022aa8:	461c      	mov	r4, r3
 8022aaa:	9218      	str	r2, [sp, #96]	; 0x60
 8022aac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8022aae:	429a      	cmp	r2, r3
 8022ab0:	f73f af7c 	bgt.w	80229ac <st_sssa8_ch_convolve+0x1f8>
 8022ab4:	463b      	mov	r3, r7
 8022ab6:	9914      	ldr	r1, [sp, #80]	; 0x50
 8022ab8:	464f      	mov	r7, r9
 8022aba:	46c1      	mov	r9, r8
 8022abc:	4698      	mov	r8, r3
 8022abe:	42b9      	cmp	r1, r7
 8022ac0:	d010      	beq.n	8022ae4 <st_sssa8_ch_convolve+0x330>
 8022ac2:	9865      	ldr	r0, [sp, #404]	; 0x194
 8022ac4:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8022ac6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8022ac8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8022aca:	9003      	str	r0, [sp, #12]
 8022acc:	9401      	str	r4, [sp, #4]
 8022ace:	9821      	ldr	r0, [sp, #132]	; 0x84
 8022ad0:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8022ad2:	9305      	str	r3, [sp, #20]
 8022ad4:	9204      	str	r2, [sp, #16]
 8022ad6:	9002      	str	r0, [sp, #8]
 8022ad8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8022ada:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8022adc:	981c      	ldr	r0, [sp, #112]	; 0x70
 8022ade:	9400      	str	r4, [sp, #0]
 8022ae0:	f002 fee2 	bl	80258a8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 8022ae4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8022ae6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022ae8:	4611      	mov	r1, r2
 8022aea:	1a9b      	subs	r3, r3, r2
 8022aec:	b298      	uxth	r0, r3
 8022aee:	4282      	cmp	r2, r0
 8022af0:	9026      	str	r0, [sp, #152]	; 0x98
 8022af2:	bf28      	it	cs
 8022af4:	4601      	movcs	r1, r0
 8022af6:	460b      	mov	r3, r1
 8022af8:	b1b1      	cbz	r1, 8022b28 <st_sssa8_ch_convolve+0x374>
 8022afa:	4611      	mov	r1, r2
 8022afc:	9d5c      	ldr	r5, [sp, #368]	; 0x170
 8022afe:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8022b00:	0092      	lsls	r2, r2, #2
 8022b02:	fb04 5001 	mla	r0, r4, r1, r5
 8022b06:	905c      	str	r0, [sp, #368]	; 0x170
 8022b08:	9821      	ldr	r0, [sp, #132]	; 0x84
 8022b0a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8022b0e:	9021      	str	r0, [sp, #132]	; 0x84
 8022b10:	9869      	ldr	r0, [sp, #420]	; 0x1a4
 8022b12:	4408      	add	r0, r1
 8022b14:	9922      	ldr	r1, [sp, #136]	; 0x88
 8022b16:	4411      	add	r1, r2
 8022b18:	9069      	str	r0, [sp, #420]	; 0x1a4
 8022b1a:	9122      	str	r1, [sp, #136]	; 0x88
 8022b1c:	9965      	ldr	r1, [sp, #404]	; 0x194
 8022b1e:	4411      	add	r1, r2
 8022b20:	9165      	str	r1, [sp, #404]	; 0x194
 8022b22:	9924      	ldr	r1, [sp, #144]	; 0x90
 8022b24:	4411      	add	r1, r2
 8022b26:	9124      	str	r1, [sp, #144]	; 0x90
 8022b28:	931f      	str	r3, [sp, #124]	; 0x7c
 8022b2a:	e71d      	b.n	8022968 <st_sssa8_ch_convolve+0x1b4>
 8022b2c:	4284      	cmp	r4, r0
 8022b2e:	f845 6f04 	str.w	r6, [r5, #4]!
 8022b32:	f47f ae86 	bne.w	8022842 <st_sssa8_ch_convolve+0x8e>
 8022b36:	e693      	b.n	8022860 <st_sssa8_ch_convolve+0xac>
 8022b38:	2300      	movs	r3, #0
 8022b3a:	e6dd      	b.n	80228f8 <st_sssa8_ch_convolve+0x144>
 8022b3c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022b3e:	2b00      	cmp	r3, #0
 8022b40:	f000 81d1 	beq.w	8022ee6 <st_sssa8_ch_convolve+0x732>
 8022b44:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8022b46:	2400      	movs	r4, #0
 8022b48:	9925      	ldr	r1, [sp, #148]	; 0x94
 8022b4a:	4242      	negs	r2, r0
 8022b4c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8022b4e:	004b      	lsls	r3, r1, #1
 8022b50:	f8cd a0ac 	str.w	sl, [sp, #172]	; 0xac
 8022b54:	b292      	uxth	r2, r2
 8022b56:	fb09 f506 	mul.w	r5, r9, r6
 8022b5a:	fb06 f303 	mul.w	r3, r6, r3
 8022b5e:	1a09      	subs	r1, r1, r0
 8022b60:	922f      	str	r2, [sp, #188]	; 0xbc
 8022b62:	fa0f f68b 	sxth.w	r6, fp
 8022b66:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022b68:	46c3      	mov	fp, r8
 8022b6a:	9507      	str	r5, [sp, #28]
 8022b6c:	fb0a 2303 	mla	r3, sl, r3, r2
 8022b70:	46ca      	mov	sl, r9
 8022b72:	9430      	str	r4, [sp, #192]	; 0xc0
 8022b74:	9316      	str	r3, [sp, #88]	; 0x58
 8022b76:	006b      	lsls	r3, r5, #1
 8022b78:	9613      	str	r6, [sp, #76]	; 0x4c
 8022b7a:	9131      	str	r1, [sp, #196]	; 0xc4
 8022b7c:	931d      	str	r3, [sp, #116]	; 0x74
 8022b7e:	a83e      	add	r0, sp, #248	; 0xf8
 8022b80:	f001 f856 	bl	8023c30 <ai_padding_opt_phase1>
 8022b84:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8022b86:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022b88:	fb04 f303 	mul.w	r3, r4, r3
 8022b8c:	9969      	ldr	r1, [sp, #420]	; 0x1a4
 8022b8e:	fb02 1303 	mla	r3, r2, r3, r1
 8022b92:	9323      	str	r3, [sp, #140]	; 0x8c
 8022b94:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022b96:	b92b      	cbnz	r3, 8022ba4 <st_sssa8_ch_convolve+0x3f0>
 8022b98:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022b9a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8022b9c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8022b9e:	985c      	ldr	r0, [sp, #368]	; 0x170
 8022ba0:	f001 fcae 	bl	8024500 <st_int8_to16_dual>
 8022ba4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8022ba6:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8022ba8:	fb03 2304 	mla	r3, r3, r4, r2
 8022bac:	9308      	str	r3, [sp, #32]
 8022bae:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 8022bb2:	9312      	str	r3, [sp, #72]	; 0x48
 8022bb4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022bb6:	9325      	str	r3, [sp, #148]	; 0x94
 8022bb8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8022bba:	932a      	str	r3, [sp, #168]	; 0xa8
 8022bbc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022bbe:	9318      	str	r3, [sp, #96]	; 0x60
 8022bc0:	9b5c      	ldr	r3, [sp, #368]	; 0x170
 8022bc2:	932d      	str	r3, [sp, #180]	; 0xb4
 8022bc4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022bc6:	9326      	str	r3, [sp, #152]	; 0x98
 8022bc8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8022bca:	9328      	str	r3, [sp, #160]	; 0xa0
 8022bcc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022bce:	9329      	str	r3, [sp, #164]	; 0xa4
 8022bd0:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8022bd2:	9327      	str	r3, [sp, #156]	; 0x9c
 8022bd4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8022bd6:	1e5a      	subs	r2, r3, #1
 8022bd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8022bdc:	b292      	uxth	r2, r2
 8022bde:	429a      	cmp	r2, r3
 8022be0:	9225      	str	r2, [sp, #148]	; 0x94
 8022be2:	f000 8172 	beq.w	8022eca <st_sssa8_ch_convolve+0x716>
 8022be6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8022be8:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8022bea:	9942      	ldr	r1, [sp, #264]	; 0x108
 8022bec:	9340      	str	r3, [sp, #256]	; 0x100
 8022bee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022bf0:	e9cd 213e 	strd	r2, r1, [sp, #248]	; 0xf8
 8022bf4:	2b00      	cmp	r3, #0
 8022bf6:	f000 813e 	beq.w	8022e76 <st_sssa8_ch_convolve+0x6c2>
 8022bfa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022bfc:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8022bfe:	4259      	negs	r1, r3
 8022c00:	2300      	movs	r3, #0
 8022c02:	901e      	str	r0, [sp, #120]	; 0x78
 8022c04:	b289      	uxth	r1, r1
 8022c06:	9310      	str	r3, [sp, #64]	; 0x40
 8022c08:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 8022c0c:	910a      	str	r1, [sp, #40]	; 0x28
 8022c0e:	4619      	mov	r1, r3
 8022c10:	2a00      	cmp	r2, #0
 8022c12:	d15f      	bne.n	8022cd4 <st_sssa8_ch_convolve+0x520>
 8022c14:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8022c16:	2a00      	cmp	r2, #0
 8022c18:	f040 80cc 	bne.w	8022db4 <st_sssa8_ch_convolve+0x600>
 8022c1c:	9a40      	ldr	r2, [sp, #256]	; 0x100
 8022c1e:	2001      	movs	r0, #1
 8022c20:	3a01      	subs	r2, #1
 8022c22:	f8ad 011e 	strh.w	r0, [sp, #286]	; 0x11e
 8022c26:	9240      	str	r2, [sp, #256]	; 0x100
 8022c28:	9b08      	ldr	r3, [sp, #32]
 8022c2a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022c2c:	4293      	cmp	r3, r2
 8022c2e:	dd3b      	ble.n	8022ca8 <st_sssa8_ch_convolve+0x4f4>
 8022c30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022c32:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8022c34:	f8dd 80ac 	ldr.w	r8, [sp, #172]	; 0xac
 8022c38:	fb01 2103 	mla	r1, r1, r3, r2
 8022c3c:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8022c40:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022c42:	930e      	str	r3, [sp, #56]	; 0x38
 8022c44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022c46:	4617      	mov	r7, r2
 8022c48:	1ace      	subs	r6, r1, r3
 8022c4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022c4c:	429e      	cmp	r6, r3
 8022c4e:	dd25      	ble.n	8022c9c <st_sssa8_ch_convolve+0x4e8>
 8022c50:	f3c7 35c0 	ubfx	r5, r7, #15, #1
 8022c54:	461c      	mov	r4, r3
 8022c56:	469c      	mov	ip, r3
 8022c58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022c5a:	fb0b f102 	mul.w	r1, fp, r2
 8022c5e:	4293      	cmp	r3, r2
 8022c60:	bfd8      	it	le
 8022c62:	f045 0501 	orrle.w	r5, r5, #1
 8022c66:	9709      	str	r7, [sp, #36]	; 0x24
 8022c68:	910c      	str	r1, [sp, #48]	; 0x30
 8022c6a:	462f      	mov	r7, r5
 8022c6c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8022c6e:	45e3      	cmp	fp, ip
 8022c70:	4652      	mov	r2, sl
 8022c72:	4649      	mov	r1, r9
 8022c74:	4628      	mov	r0, r5
 8022c76:	bfcc      	ite	gt
 8022c78:	f04f 0e00 	movgt.w	lr, #0
 8022c7c:	f04f 0e01 	movle.w	lr, #1
 8022c80:	ea5e 73d4 	orrs.w	r3, lr, r4, lsr #31
 8022c84:	d101      	bne.n	8022c8a <st_sssa8_ch_convolve+0x4d6>
 8022c86:	2f00      	cmp	r7, #0
 8022c88:	d033      	beq.n	8022cf2 <st_sssa8_ch_convolve+0x53e>
 8022c8a:	f003 fa2b 	bl	80260e4 <arm_fill_q15>
 8022c8e:	3401      	adds	r4, #1
 8022c90:	44c1      	add	r9, r8
 8022c92:	b224      	sxth	r4, r4
 8022c94:	42b4      	cmp	r4, r6
 8022c96:	46a4      	mov	ip, r4
 8022c98:	dbe9      	blt.n	8022c6e <st_sssa8_ch_convolve+0x4ba>
 8022c9a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8022c9c:	3701      	adds	r7, #1
 8022c9e:	9b08      	ldr	r3, [sp, #32]
 8022ca0:	b23f      	sxth	r7, r7
 8022ca2:	429f      	cmp	r7, r3
 8022ca4:	463a      	mov	r2, r7
 8022ca6:	dbd0      	blt.n	8022c4a <st_sssa8_ch_convolve+0x496>
 8022ca8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8022caa:	454b      	cmp	r3, r9
 8022cac:	f000 80ac 	beq.w	8022e08 <st_sssa8_ch_convolve+0x654>
 8022cb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022cb2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8022cb4:	9910      	ldr	r1, [sp, #64]	; 0x40
 8022cb6:	4403      	add	r3, r0
 8022cb8:	3101      	adds	r1, #1
 8022cba:	461a      	mov	r2, r3
 8022cbc:	b20b      	sxth	r3, r1
 8022cbe:	b292      	uxth	r2, r2
 8022cc0:	9310      	str	r3, [sp, #64]	; 0x40
 8022cc2:	4619      	mov	r1, r3
 8022cc4:	920a      	str	r2, [sp, #40]	; 0x28
 8022cc6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022cc8:	429a      	cmp	r2, r3
 8022cca:	f340 80c0 	ble.w	8022e4e <st_sssa8_ch_convolve+0x69a>
 8022cce:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 8022cd0:	2a00      	cmp	r2, #0
 8022cd2:	d09f      	beq.n	8022c14 <st_sssa8_ch_convolve+0x460>
 8022cd4:	3a01      	subs	r2, #1
 8022cd6:	2001      	movs	r0, #1
 8022cd8:	923e      	str	r2, [sp, #248]	; 0xf8
 8022cda:	f8ad 011e 	strh.w	r0, [sp, #286]	; 0x11e
 8022cde:	e7a3      	b.n	8022c28 <st_sssa8_ch_convolve+0x474>
 8022ce0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022ce2:	eb03 000c 	add.w	r0, r3, ip
 8022ce6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022ce8:	fb0a 3000 	mla	r0, sl, r0, r3
 8022cec:	f001 fb66 	bl	80243bc <st_int8_to16_no_shift>
 8022cf0:	e6b2      	b.n	8022a58 <st_sssa8_ch_convolve+0x2a4>
 8022cf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022cf4:	eb03 000c 	add.w	r0, r3, ip
 8022cf8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022cfa:	fb0a 3000 	mla	r0, sl, r0, r3
 8022cfe:	f001 fb5d 	bl	80243bc <st_int8_to16_no_shift>
 8022d02:	e7c4      	b.n	8022c8e <st_sssa8_ch_convolve+0x4da>
 8022d04:	3a01      	subs	r2, #1
 8022d06:	2101      	movs	r1, #1
 8022d08:	923e      	str	r2, [sp, #248]	; 0xf8
 8022d0a:	f8ad 111e 	strh.w	r1, [sp, #286]	; 0x11e
 8022d0e:	e671      	b.n	80229f4 <st_sssa8_ch_convolve+0x240>
 8022d10:	f8bd 111c 	ldrh.w	r1, [sp, #284]	; 0x11c
 8022d14:	3a01      	subs	r2, #1
 8022d16:	2901      	cmp	r1, #1
 8022d18:	923f      	str	r2, [sp, #252]	; 0xfc
 8022d1a:	f8ad 111e 	strh.w	r1, [sp, #286]	; 0x11e
 8022d1e:	f43f ae69 	beq.w	80229f4 <st_sssa8_ch_convolve+0x240>
 8022d22:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022d24:	9e08      	ldr	r6, [sp, #32]
 8022d26:	f9bd 4028 	ldrsh.w	r4, [sp, #40]	; 0x28
 8022d2a:	42b3      	cmp	r3, r6
 8022d2c:	f6bf aea1 	bge.w	8022a72 <st_sssa8_ch_convolve+0x2be>
 8022d30:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8022d34:	461d      	mov	r5, r3
 8022d36:	970c      	str	r7, [sp, #48]	; 0x30
 8022d38:	4618      	mov	r0, r3
 8022d3a:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8022d3e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8022d40:	3501      	adds	r5, #1
 8022d42:	fb00 400b 	mla	r0, r0, fp, r4
 8022d46:	9b07      	ldr	r3, [sp, #28]
 8022d48:	4649      	mov	r1, r9
 8022d4a:	b22d      	sxth	r5, r5
 8022d4c:	fb0a 7000 	mla	r0, sl, r0, r7
 8022d50:	4642      	mov	r2, r8
 8022d52:	4499      	add	r9, r3
 8022d54:	f001 fb32 	bl	80243bc <st_int8_to16_no_shift>
 8022d58:	42b5      	cmp	r5, r6
 8022d5a:	4628      	mov	r0, r5
 8022d5c:	dbf0      	blt.n	8022d40 <st_sssa8_ch_convolve+0x58c>
 8022d5e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022d60:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8022d64:	454b      	cmp	r3, r9
 8022d66:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8022d68:	f47f ae87 	bne.w	8022a7a <st_sssa8_ch_convolve+0x2c6>
 8022d6c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8022d6e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8022d70:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8022d72:	9965      	ldr	r1, [sp, #404]	; 0x194
 8022d74:	9821      	ldr	r0, [sp, #132]	; 0x84
 8022d76:	9401      	str	r4, [sp, #4]
 8022d78:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8022d7a:	9305      	str	r3, [sp, #20]
 8022d7c:	9204      	str	r2, [sp, #16]
 8022d7e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8022d80:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8022d82:	9103      	str	r1, [sp, #12]
 8022d84:	9002      	str	r0, [sp, #8]
 8022d86:	9914      	ldr	r1, [sp, #80]	; 0x50
 8022d88:	981c      	ldr	r0, [sp, #112]	; 0x70
 8022d8a:	9400      	str	r4, [sp, #0]
 8022d8c:	f002 fac4 	bl	8025318 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 8022d90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022d92:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8022d94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022d96:	440b      	add	r3, r1
 8022d98:	901d      	str	r0, [sp, #116]	; 0x74
 8022d9a:	3201      	adds	r2, #1
 8022d9c:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 8022da0:	b29b      	uxth	r3, r3
 8022da2:	b212      	sxth	r2, r2
 8022da4:	930a      	str	r3, [sp, #40]	; 0x28
 8022da6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022da8:	4615      	mov	r5, r2
 8022daa:	9210      	str	r2, [sp, #64]	; 0x40
 8022dac:	4293      	cmp	r3, r2
 8022dae:	f73f ae13 	bgt.w	80229d8 <st_sssa8_ch_convolve+0x224>
 8022db2:	e670      	b.n	8022a96 <st_sssa8_ch_convolve+0x2e2>
 8022db4:	f8bd 011c 	ldrh.w	r0, [sp, #284]	; 0x11c
 8022db8:	3a01      	subs	r2, #1
 8022dba:	2801      	cmp	r0, #1
 8022dbc:	923f      	str	r2, [sp, #252]	; 0xfc
 8022dbe:	f8ad 011e 	strh.w	r0, [sp, #286]	; 0x11e
 8022dc2:	f43f af31 	beq.w	8022c28 <st_sssa8_ch_convolve+0x474>
 8022dc6:	9f08      	ldr	r7, [sp, #32]
 8022dc8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022dca:	f9bd 4028 	ldrsh.w	r4, [sp, #40]	; 0x28
 8022dce:	4297      	cmp	r7, r2
 8022dd0:	f77f af6a 	ble.w	8022ca8 <st_sssa8_ch_convolve+0x4f4>
 8022dd4:	464e      	mov	r6, r9
 8022dd6:	4615      	mov	r5, r2
 8022dd8:	4610      	mov	r0, r2
 8022dda:	f8dd 9074 	ldr.w	r9, [sp, #116]	; 0x74
 8022dde:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8022de2:	3501      	adds	r5, #1
 8022de4:	fb00 400b 	mla	r0, r0, fp, r4
 8022de8:	4631      	mov	r1, r6
 8022dea:	9a07      	ldr	r2, [sp, #28]
 8022dec:	b22d      	sxth	r5, r5
 8022dee:	fb0a 8000 	mla	r0, sl, r0, r8
 8022df2:	f001 fae3 	bl	80243bc <st_int8_to16_no_shift>
 8022df6:	444e      	add	r6, r9
 8022df8:	42bd      	cmp	r5, r7
 8022dfa:	4628      	mov	r0, r5
 8022dfc:	dbf1      	blt.n	8022de2 <st_sssa8_ch_convolve+0x62e>
 8022dfe:	46b1      	mov	r9, r6
 8022e00:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8022e02:	454b      	cmp	r3, r9
 8022e04:	f47f af54 	bne.w	8022cb0 <st_sssa8_ch_convolve+0x4fc>
 8022e08:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8022e0a:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8022e0c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022e0e:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8022e10:	9204      	str	r2, [sp, #16]
 8022e12:	9401      	str	r4, [sp, #4]
 8022e14:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8022e16:	9305      	str	r3, [sp, #20]
 8022e18:	9002      	str	r0, [sp, #8]
 8022e1a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8022e1c:	981c      	ldr	r0, [sp, #112]	; 0x70
 8022e1e:	9400      	str	r4, [sp, #0]
 8022e20:	e9dd 1227 	ldrd	r1, r2, [sp, #156]	; 0x9c
 8022e24:	9103      	str	r1, [sp, #12]
 8022e26:	9914      	ldr	r1, [sp, #80]	; 0x50
 8022e28:	f002 fa76 	bl	8025318 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 8022e2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022e2e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8022e30:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022e32:	440b      	add	r3, r1
 8022e34:	901e      	str	r0, [sp, #120]	; 0x78
 8022e36:	3201      	adds	r2, #1
 8022e38:	b29b      	uxth	r3, r3
 8022e3a:	b212      	sxth	r2, r2
 8022e3c:	930a      	str	r3, [sp, #40]	; 0x28
 8022e3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022e40:	4611      	mov	r1, r2
 8022e42:	9210      	str	r2, [sp, #64]	; 0x40
 8022e44:	4293      	cmp	r3, r2
 8022e46:	dd16      	ble.n	8022e76 <st_sssa8_ch_convolve+0x6c2>
 8022e48:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 8022e4c:	e73f      	b.n	8022cce <st_sssa8_ch_convolve+0x51a>
 8022e4e:	9914      	ldr	r1, [sp, #80]	; 0x50
 8022e50:	4589      	cmp	r9, r1
 8022e52:	d010      	beq.n	8022e76 <st_sssa8_ch_convolve+0x6c2>
 8022e54:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8022e56:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8022e58:	9204      	str	r2, [sp, #16]
 8022e5a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8022e5c:	9401      	str	r4, [sp, #4]
 8022e5e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8022e60:	9305      	str	r3, [sp, #20]
 8022e62:	9400      	str	r4, [sp, #0]
 8022e64:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8022e66:	e9dd 0227 	ldrd	r0, r2, [sp, #156]	; 0x9c
 8022e6a:	9003      	str	r0, [sp, #12]
 8022e6c:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8022e6e:	9002      	str	r0, [sp, #8]
 8022e70:	981c      	ldr	r0, [sp, #112]	; 0x70
 8022e72:	f002 fd19 	bl	80258a8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 8022e76:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8022e78:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022e7a:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8022e7c:	1a9b      	subs	r3, r3, r2
 8022e7e:	4608      	mov	r0, r1
 8022e80:	b29b      	uxth	r3, r3
 8022e82:	4410      	add	r0, r2
 8022e84:	429a      	cmp	r2, r3
 8022e86:	932a      	str	r3, [sp, #168]	; 0xa8
 8022e88:	9023      	str	r0, [sp, #140]	; 0x8c
 8022e8a:	bf28      	it	cs
 8022e8c:	461a      	movcs	r2, r3
 8022e8e:	b294      	uxth	r4, r2
 8022e90:	b90c      	cbnz	r4, 8022e96 <st_sssa8_ch_convolve+0x6e2>
 8022e92:	9418      	str	r4, [sp, #96]	; 0x60
 8022e94:	e69e      	b.n	8022bd4 <st_sssa8_ch_convolve+0x420>
 8022e96:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8022e98:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 8022e9a:	4619      	mov	r1, r3
 8022e9c:	009d      	lsls	r5, r3, #2
 8022e9e:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8022ea0:	eb06 0141 	add.w	r1, r6, r1, lsl #1
 8022ea4:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8022ea6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8022ea8:	442e      	add	r6, r5
 8022eaa:	9129      	str	r1, [sp, #164]	; 0xa4
 8022eac:	fb02 0003 	mla	r0, r2, r3, r0
 8022eb0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8022eb2:	9628      	str	r6, [sp, #160]	; 0xa0
 8022eb4:	4623      	mov	r3, r4
 8022eb6:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8022eb8:	902d      	str	r0, [sp, #180]	; 0xb4
 8022eba:	442e      	add	r6, r5
 8022ebc:	9627      	str	r6, [sp, #156]	; 0x9c
 8022ebe:	9e26      	ldr	r6, [sp, #152]	; 0x98
 8022ec0:	442e      	add	r6, r5
 8022ec2:	9626      	str	r6, [sp, #152]	; 0x98
 8022ec4:	f001 fb1c 	bl	8024500 <st_int8_to16_dual>
 8022ec8:	e7e3      	b.n	8022e92 <st_sssa8_ch_convolve+0x6de>
 8022eca:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8022ecc:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8022ece:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8022ed0:	440b      	add	r3, r1
 8022ed2:	3201      	adds	r2, #1
 8022ed4:	b29b      	uxth	r3, r3
 8022ed6:	b212      	sxth	r2, r2
 8022ed8:	932f      	str	r3, [sp, #188]	; 0xbc
 8022eda:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022edc:	4614      	mov	r4, r2
 8022ede:	9230      	str	r2, [sp, #192]	; 0xc0
 8022ee0:	4293      	cmp	r3, r2
 8022ee2:	f73f ae4c 	bgt.w	8022b7e <st_sssa8_ch_convolve+0x3ca>
 8022ee6:	2000      	movs	r0, #0
 8022ee8:	b053      	add	sp, #332	; 0x14c
 8022eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022eee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022ef0:	2b00      	cmp	r3, #0
 8022ef2:	d0f8      	beq.n	8022ee6 <st_sssa8_ch_convolve+0x732>
 8022ef4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8022ef6:	2400      	movs	r4, #0
 8022ef8:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8022efa:	005b      	lsls	r3, r3, #1
 8022efc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8022efe:	fb00 f109 	mul.w	r1, r0, r9
 8022f02:	fb00 f303 	mul.w	r3, r0, r3
 8022f06:	9807      	ldr	r0, [sp, #28]
 8022f08:	4252      	negs	r2, r2
 8022f0a:	9116      	str	r1, [sp, #88]	; 0x58
 8022f0c:	1a28      	subs	r0, r5, r0
 8022f0e:	941c      	str	r4, [sp, #112]	; 0x70
 8022f10:	901d      	str	r0, [sp, #116]	; 0x74
 8022f12:	fa0f f08b 	sxth.w	r0, fp
 8022f16:	901e      	str	r0, [sp, #120]	; 0x78
 8022f18:	9814      	ldr	r0, [sp, #80]	; 0x50
 8022f1a:	fb0a 0303 	mla	r3, sl, r3, r0
 8022f1e:	4683      	mov	fp, r0
 8022f20:	9313      	str	r3, [sp, #76]	; 0x4c
 8022f22:	004b      	lsls	r3, r1, #1
 8022f24:	9307      	str	r3, [sp, #28]
 8022f26:	b293      	uxth	r3, r2
 8022f28:	9318      	str	r3, [sp, #96]	; 0x60
 8022f2a:	a83e      	add	r0, sp, #248	; 0xf8
 8022f2c:	f000 fe80 	bl	8023c30 <ai_padding_opt_phase1>
 8022f30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022f32:	2b00      	cmp	r3, #0
 8022f34:	d070      	beq.n	8023018 <st_sssa8_ch_convolve+0x864>
 8022f36:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8022f38:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8022f3a:	f9bd 0060 	ldrsh.w	r0, [sp, #96]	; 0x60
 8022f3e:	1a99      	subs	r1, r3, r2
 8022f40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022f42:	9012      	str	r0, [sp, #72]	; 0x48
 8022f44:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8022f46:	425a      	negs	r2, r3
 8022f48:	2300      	movs	r3, #0
 8022f4a:	fb00 1104 	mla	r1, r0, r4, r1
 8022f4e:	b292      	uxth	r2, r2
 8022f50:	9310      	str	r3, [sp, #64]	; 0x40
 8022f52:	9108      	str	r1, [sp, #32]
 8022f54:	4619      	mov	r1, r3
 8022f56:	920a      	str	r2, [sp, #40]	; 0x28
 8022f58:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 8022f5a:	2a00      	cmp	r2, #0
 8022f5c:	f040 80fc 	bne.w	8023158 <st_sssa8_ch_convolve+0x9a4>
 8022f60:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8022f62:	2a00      	cmp	r2, #0
 8022f64:	f040 80fe 	bne.w	8023164 <st_sssa8_ch_convolve+0x9b0>
 8022f68:	9a40      	ldr	r2, [sp, #256]	; 0x100
 8022f6a:	2001      	movs	r0, #1
 8022f6c:	3a01      	subs	r2, #1
 8022f6e:	f8ad 011e 	strh.w	r0, [sp, #286]	; 0x11e
 8022f72:	9240      	str	r2, [sp, #256]	; 0x100
 8022f74:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022f76:	9a08      	ldr	r2, [sp, #32]
 8022f78:	4293      	cmp	r3, r2
 8022f7a:	da3b      	bge.n	8022ff4 <st_sssa8_ch_convolve+0x840>
 8022f7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022f7e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8022f80:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8022f82:	fb01 2103 	mla	r1, r1, r3, r2
 8022f86:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8022f8a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8022f8c:	930e      	str	r3, [sp, #56]	; 0x38
 8022f8e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022f90:	1a8d      	subs	r5, r1, r2
 8022f92:	461e      	mov	r6, r3
 8022f94:	461a      	mov	r2, r3
 8022f96:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022f98:	42a9      	cmp	r1, r5
 8022f9a:	da25      	bge.n	8022fe8 <st_sssa8_ch_convolve+0x834>
 8022f9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022f9e:	460c      	mov	r4, r1
 8022fa0:	9609      	str	r6, [sp, #36]	; 0x24
 8022fa2:	468c      	mov	ip, r1
 8022fa4:	4293      	cmp	r3, r2
 8022fa6:	fb02 f208 	mul.w	r2, r2, r8
 8022faa:	bfcc      	ite	gt
 8022fac:	2300      	movgt	r3, #0
 8022fae:	2301      	movle	r3, #1
 8022fb0:	920c      	str	r2, [sp, #48]	; 0x30
 8022fb2:	ea43 73d6 	orr.w	r3, r3, r6, lsr #31
 8022fb6:	461e      	mov	r6, r3
 8022fb8:	45e0      	cmp	r8, ip
 8022fba:	464a      	mov	r2, r9
 8022fbc:	4659      	mov	r1, fp
 8022fbe:	4638      	mov	r0, r7
 8022fc0:	bfcc      	ite	gt
 8022fc2:	f04f 0e00 	movgt.w	lr, #0
 8022fc6:	f04f 0e01 	movle.w	lr, #1
 8022fca:	ea5e 73d4 	orrs.w	r3, lr, r4, lsr #31
 8022fce:	d102      	bne.n	8022fd6 <st_sssa8_ch_convolve+0x822>
 8022fd0:	2e00      	cmp	r6, #0
 8022fd2:	f000 80b8 	beq.w	8023146 <st_sssa8_ch_convolve+0x992>
 8022fd6:	f003 f885 	bl	80260e4 <arm_fill_q15>
 8022fda:	3401      	adds	r4, #1
 8022fdc:	44d3      	add	fp, sl
 8022fde:	b224      	sxth	r4, r4
 8022fe0:	42ac      	cmp	r4, r5
 8022fe2:	46a4      	mov	ip, r4
 8022fe4:	dbe8      	blt.n	8022fb8 <st_sssa8_ch_convolve+0x804>
 8022fe6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8022fe8:	3601      	adds	r6, #1
 8022fea:	9b08      	ldr	r3, [sp, #32]
 8022fec:	b236      	sxth	r6, r6
 8022fee:	429e      	cmp	r6, r3
 8022ff0:	4632      	mov	r2, r6
 8022ff2:	dbd0      	blt.n	8022f96 <st_sssa8_ch_convolve+0x7e2>
 8022ff4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022ff6:	455b      	cmp	r3, fp
 8022ff8:	f000 80e4 	beq.w	80231c4 <st_sssa8_ch_convolve+0xa10>
 8022ffc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022ffe:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8023000:	9910      	ldr	r1, [sp, #64]	; 0x40
 8023002:	4403      	add	r3, r0
 8023004:	3101      	adds	r1, #1
 8023006:	461a      	mov	r2, r3
 8023008:	b20b      	sxth	r3, r1
 802300a:	b292      	uxth	r2, r2
 802300c:	9310      	str	r3, [sp, #64]	; 0x40
 802300e:	4619      	mov	r1, r3
 8023010:	920a      	str	r2, [sp, #40]	; 0x28
 8023012:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8023014:	429a      	cmp	r2, r3
 8023016:	dc9f      	bgt.n	8022f58 <st_sssa8_ch_convolve+0x7a4>
 8023018:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802301a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 802301c:	991c      	ldr	r1, [sp, #112]	; 0x70
 802301e:	4403      	add	r3, r0
 8023020:	3101      	adds	r1, #1
 8023022:	461a      	mov	r2, r3
 8023024:	b20b      	sxth	r3, r1
 8023026:	b292      	uxth	r2, r2
 8023028:	931c      	str	r3, [sp, #112]	; 0x70
 802302a:	461c      	mov	r4, r3
 802302c:	9218      	str	r2, [sp, #96]	; 0x60
 802302e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8023030:	429a      	cmp	r2, r3
 8023032:	f73f af7a 	bgt.w	8022f2a <st_sssa8_ch_convolve+0x776>
 8023036:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023038:	455a      	cmp	r2, fp
 802303a:	f43f af54 	beq.w	8022ee6 <st_sssa8_ch_convolve+0x732>
 802303e:	9919      	ldr	r1, [sp, #100]	; 0x64
 8023040:	2900      	cmp	r1, #0
 8023042:	f43f af50 	beq.w	8022ee6 <st_sssa8_ch_convolve+0x732>
 8023046:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8023048:	981a      	ldr	r0, [sp, #104]	; 0x68
 802304a:	1f1d      	subs	r5, r3, #4
 802304c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802304e:	ea4f 0a90 	mov.w	sl, r0, lsr #2
 8023052:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8023054:	1e9e      	subs	r6, r3, #2
 8023056:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8023058:	f1a4 0b04 	sub.w	fp, r4, #4
 802305c:	9c69      	ldr	r4, [sp, #420]	; 0x1a4
 802305e:	f1a3 0904 	sub.w	r9, r3, #4
 8023062:	f10a 33ff 	add.w	r3, sl, #4294967295
 8023066:	4421      	add	r1, r4
 8023068:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 802306c:	b29b      	uxth	r3, r3
 802306e:	f000 0803 	and.w	r8, r0, #3
 8023072:	9108      	str	r1, [sp, #32]
 8023074:	3301      	adds	r3, #1
 8023076:	f8df c1d4 	ldr.w	ip, [pc, #468]	; 802324c <st_sssa8_ch_convolve+0xa98>
 802307a:	9f5c      	ldr	r7, [sp, #368]	; 0x170
 802307c:	0099      	lsls	r1, r3, #2
 802307e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8023082:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023084:	9109      	str	r1, [sp, #36]	; 0x24
 8023086:	9307      	str	r3, [sp, #28]
 8023088:	f855 3f04 	ldr.w	r3, [r5, #4]!
 802308c:	2a00      	cmp	r2, #0
 802308e:	d058      	beq.n	8023142 <st_sssa8_ch_convolve+0x98e>
 8023090:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023092:	f8dd e050 	ldr.w	lr, [sp, #80]	; 0x50
 8023096:	eb07 0a02 	add.w	sl, r7, r2
 802309a:	f857 2b04 	ldr.w	r2, [r7], #4
 802309e:	fa2f f482 	sxtb16	r4, r2
 80230a2:	b2a0      	uxth	r0, r4
 80230a4:	f8de 1000 	ldr.w	r1, [lr]
 80230a8:	ea4f 2232 	mov.w	r2, r2, ror #8
 80230ac:	fa2f f282 	sxtb16	r2, r2
 80230b0:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80230b4:	fb20 3101 	smlad	r1, r0, r1, r3
 80230b8:	ea02 030c 	and.w	r3, r2, ip
 80230bc:	f10e 0e08 	add.w	lr, lr, #8
 80230c0:	f85e 2c04 	ldr.w	r2, [lr, #-4]
 80230c4:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80230c8:	fb23 1302 	smlad	r3, r3, r2, r1
 80230cc:	4557      	cmp	r7, sl
 80230ce:	d1e4      	bne.n	802309a <st_sssa8_ch_convolve+0x8e6>
 80230d0:	9a07      	ldr	r2, [sp, #28]
 80230d2:	f1b8 0f00 	cmp.w	r8, #0
 80230d6:	d017      	beq.n	8023108 <st_sssa8_ch_convolve+0x954>
 80230d8:	f997 1000 	ldrsb.w	r1, [r7]
 80230dc:	f1b8 0f01 	cmp.w	r8, #1
 80230e0:	8810      	ldrh	r0, [r2, #0]
 80230e2:	fb10 3301 	smlabb	r3, r0, r1, r3
 80230e6:	f000 80a7 	beq.w	8023238 <st_sssa8_ch_convolve+0xa84>
 80230ea:	f997 1001 	ldrsb.w	r1, [r7, #1]
 80230ee:	f1b8 0f02 	cmp.w	r8, #2
 80230f2:	8850      	ldrh	r0, [r2, #2]
 80230f4:	fb10 3301 	smlabb	r3, r0, r1, r3
 80230f8:	f000 80a0 	beq.w	802323c <st_sssa8_ch_convolve+0xa88>
 80230fc:	8891      	ldrh	r1, [r2, #4]
 80230fe:	3703      	adds	r7, #3
 8023100:	f917 2c01 	ldrsb.w	r2, [r7, #-1]
 8023104:	fb11 3302 	smlabb	r3, r1, r2, r3
 8023108:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 802310a:	f936 0f02 	ldrsh.w	r0, [r6, #2]!
 802310e:	3201      	adds	r2, #1
 8023110:	f859 1f04 	ldr.w	r1, [r9, #4]!
 8023114:	2800      	cmp	r0, #0
 8023116:	9269      	str	r2, [sp, #420]	; 0x1a4
 8023118:	f85b 2f04 	ldr.w	r2, [fp, #4]!
 802311c:	dd74      	ble.n	8023208 <st_sssa8_ch_convolve+0xa54>
 802311e:	005b      	lsls	r3, r3, #1
 8023120:	fb53 2301 	smmla	r3, r3, r1, r2
 8023124:	4103      	asrs	r3, r0
 8023126:	f303 0307 	ssat	r3, #8, r3
 802312a:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 802312c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8023130:	9b08      	ldr	r3, [sp, #32]
 8023132:	4293      	cmp	r3, r2
 8023134:	f43f aed7 	beq.w	8022ee6 <st_sssa8_ch_convolve+0x732>
 8023138:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802313a:	f855 3f04 	ldr.w	r3, [r5, #4]!
 802313e:	2a00      	cmp	r2, #0
 8023140:	d1a6      	bne.n	8023090 <st_sssa8_ch_convolve+0x8dc>
 8023142:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023144:	e7c5      	b.n	80230d2 <st_sssa8_ch_convolve+0x91e>
 8023146:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023148:	eb03 000c 	add.w	r0, r3, ip
 802314c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802314e:	fb09 3000 	mla	r0, r9, r0, r3
 8023152:	f001 f933 	bl	80243bc <st_int8_to16_no_shift>
 8023156:	e740      	b.n	8022fda <st_sssa8_ch_convolve+0x826>
 8023158:	3a01      	subs	r2, #1
 802315a:	2001      	movs	r0, #1
 802315c:	923e      	str	r2, [sp, #248]	; 0xf8
 802315e:	f8ad 011e 	strh.w	r0, [sp, #286]	; 0x11e
 8023162:	e707      	b.n	8022f74 <st_sssa8_ch_convolve+0x7c0>
 8023164:	f8bd 011c 	ldrh.w	r0, [sp, #284]	; 0x11c
 8023168:	3a01      	subs	r2, #1
 802316a:	2801      	cmp	r0, #1
 802316c:	923f      	str	r2, [sp, #252]	; 0xfc
 802316e:	f8ad 011e 	strh.w	r0, [sp, #286]	; 0x11e
 8023172:	f43f aeff 	beq.w	8022f74 <st_sssa8_ch_convolve+0x7c0>
 8023176:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8023178:	9f08      	ldr	r7, [sp, #32]
 802317a:	f9bd 4028 	ldrsh.w	r4, [sp, #40]	; 0x28
 802317e:	42bb      	cmp	r3, r7
 8023180:	f6bf af38 	bge.w	8022ff4 <st_sssa8_ch_convolve+0x840>
 8023184:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8023188:	461d      	mov	r5, r3
 802318a:	46ca      	mov	sl, r9
 802318c:	4618      	mov	r0, r3
 802318e:	46c1      	mov	r9, r8
 8023190:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8023192:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8023196:	3501      	adds	r5, #1
 8023198:	fb00 4009 	mla	r0, r0, r9, r4
 802319c:	9b07      	ldr	r3, [sp, #28]
 802319e:	4659      	mov	r1, fp
 80231a0:	b22d      	sxth	r5, r5
 80231a2:	fb0a 8000 	mla	r0, sl, r0, r8
 80231a6:	4632      	mov	r2, r6
 80231a8:	449b      	add	fp, r3
 80231aa:	f001 f907 	bl	80243bc <st_int8_to16_no_shift>
 80231ae:	42bd      	cmp	r5, r7
 80231b0:	4628      	mov	r0, r5
 80231b2:	dbf0      	blt.n	8023196 <st_sssa8_ch_convolve+0x9e2>
 80231b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80231b6:	46c8      	mov	r8, r9
 80231b8:	46d1      	mov	r9, sl
 80231ba:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80231be:	455b      	cmp	r3, fp
 80231c0:	f47f af1c 	bne.w	8022ffc <st_sssa8_ch_convolve+0x848>
 80231c4:	9b69      	ldr	r3, [sp, #420]	; 0x1a4
 80231c6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80231c8:	9965      	ldr	r1, [sp, #404]	; 0x194
 80231ca:	9821      	ldr	r0, [sp, #132]	; 0x84
 80231cc:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80231ce:	9304      	str	r3, [sp, #16]
 80231d0:	9203      	str	r2, [sp, #12]
 80231d2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80231d4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80231d6:	9102      	str	r1, [sp, #8]
 80231d8:	9001      	str	r0, [sp, #4]
 80231da:	9914      	ldr	r1, [sp, #80]	; 0x50
 80231dc:	985c      	ldr	r0, [sp, #368]	; 0x170
 80231de:	9400      	str	r4, [sp, #0]
 80231e0:	f000 fd60 	bl	8023ca4 <st_sssa8_ch_nn_mat_mult_kernel>
 80231e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80231e6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80231e8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80231ea:	440b      	add	r3, r1
 80231ec:	9069      	str	r0, [sp, #420]	; 0x1a4
 80231ee:	3201      	adds	r2, #1
 80231f0:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
 80231f4:	b29b      	uxth	r3, r3
 80231f6:	b212      	sxth	r2, r2
 80231f8:	930a      	str	r3, [sp, #40]	; 0x28
 80231fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80231fc:	4611      	mov	r1, r2
 80231fe:	9210      	str	r2, [sp, #64]	; 0x40
 8023200:	4293      	cmp	r3, r2
 8023202:	f73f aea9 	bgt.w	8022f58 <st_sssa8_ch_convolve+0x7a4>
 8023206:	e707      	b.n	8023018 <st_sssa8_ch_convolve+0x864>
 8023208:	f1c0 0001 	rsb	r0, r0, #1
 802320c:	4083      	lsls	r3, r0
 802320e:	f303 031f 	ssat	r3, #32, r3
 8023212:	fb53 f311 	smmulr	r3, r3, r1
 8023216:	4413      	add	r3, r2
 8023218:	f303 0307 	ssat	r3, #8, r3
 802321c:	9a69      	ldr	r2, [sp, #420]	; 0x1a4
 802321e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8023222:	e785      	b.n	8023130 <st_sssa8_ch_convolve+0x97c>
 8023224:	4611      	mov	r1, r2
 8023226:	985c      	ldr	r0, [sp, #368]	; 0x170
 8023228:	e9dd 3219 	ldrd	r3, r2, [sp, #100]	; 0x64
 802322c:	f001 f968 	bl	8024500 <st_int8_to16_dual>
 8023230:	2301      	movs	r3, #1
 8023232:	932e      	str	r3, [sp, #184]	; 0xb8
 8023234:	f7ff bb4a 	b.w	80228cc <st_sssa8_ch_convolve+0x118>
 8023238:	3701      	adds	r7, #1
 802323a:	e765      	b.n	8023108 <st_sssa8_ch_convolve+0x954>
 802323c:	3702      	adds	r7, #2
 802323e:	e763      	b.n	8023108 <st_sssa8_ch_convolve+0x954>
 8023240:	4615      	mov	r5, r2
 8023242:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
 8023246:	463e      	mov	r6, r7
 8023248:	f7ff bb0e 	b.w	8022868 <st_sssa8_ch_convolve+0xb4>
 802324c:	ffff0000 	.word	0xffff0000

08023250 <st_sssa8_ch_convolve_rgb>:
 8023250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023254:	b0cb      	sub	sp, #300	; 0x12c
 8023256:	468b      	mov	fp, r1
 8023258:	2a03      	cmp	r2, #3
 802325a:	931f      	str	r3, [sp, #124]	; 0x7c
 802325c:	f8bd 3158 	ldrh.w	r3, [sp, #344]	; 0x158
 8023260:	f8bd 1150 	ldrh.w	r1, [sp, #336]	; 0x150
 8023264:	9310      	str	r3, [sp, #64]	; 0x40
 8023266:	f8bd 315c 	ldrh.w	r3, [sp, #348]	; 0x15c
 802326a:	f8bd 4154 	ldrh.w	r4, [sp, #340]	; 0x154
 802326e:	930a      	str	r3, [sp, #40]	; 0x28
 8023270:	f99d 316c 	ldrsb.w	r3, [sp, #364]	; 0x16c
 8023274:	9115      	str	r1, [sp, #84]	; 0x54
 8023276:	931d      	str	r3, [sp, #116]	; 0x74
 8023278:	f8bd 3178 	ldrh.w	r3, [sp, #376]	; 0x178
 802327c:	940f      	str	r4, [sp, #60]	; 0x3c
 802327e:	930e      	str	r3, [sp, #56]	; 0x38
 8023280:	9d5a      	ldr	r5, [sp, #360]	; 0x168
 8023282:	f99d e170 	ldrsb.w	lr, [sp, #368]	; 0x170
 8023286:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
 8023288:	f040 83d8 	bne.w	8023a3c <st_sssa8_ch_convolve_rgb+0x7ec>
 802328c:	4606      	mov	r6, r0
 802328e:	4608      	mov	r0, r1
 8023290:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8023294:	ebc0 7240 	rsb	r2, r0, r0, lsl #29
 8023298:	eb03 0741 	add.w	r7, r3, r1, lsl #1
 802329c:	fb14 f304 	smulbb	r3, r4, r4
 80232a0:	ea4f 0880 	mov.w	r8, r0, lsl #2
 80232a4:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 80232a8:	9711      	str	r7, [sp, #68]	; 0x44
 80232aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80232ae:	9221      	str	r2, [sp, #132]	; 0x84
 80232b0:	4442      	add	r2, r8
 80232b2:	b29b      	uxth	r3, r3
 80232b4:	9222      	str	r2, [sp, #136]	; 0x88
 80232b6:	9316      	str	r3, [sp, #88]	; 0x58
 80232b8:	2800      	cmp	r0, #0
 80232ba:	f000 83bc 	beq.w	8023a36 <st_sssa8_ch_convolve_rgb+0x7e6>
 80232be:	0047      	lsls	r7, r0, #1
 80232c0:	4629      	mov	r1, r5
 80232c2:	1f14      	subs	r4, r2, #4
 80232c4:	f04f 0c01 	mov.w	ip, #1
 80232c8:	443d      	add	r5, r7
 80232ca:	f931 3b02 	ldrsh.w	r3, [r1], #2
 80232ce:	fa0c f003 	lsl.w	r0, ip, r3
 80232d2:	fa0e f203 	lsl.w	r2, lr, r3
 80232d6:	2b00      	cmp	r3, #0
 80232d8:	eb02 0250 	add.w	r2, r2, r0, lsr #1
 80232dc:	f340 81e4 	ble.w	80236a8 <st_sssa8_ch_convolve_rgb+0x458>
 80232e0:	428d      	cmp	r5, r1
 80232e2:	f844 2f04 	str.w	r2, [r4, #4]!
 80232e6:	d1f0      	bne.n	80232ca <st_sssa8_ch_convolve_rgb+0x7a>
 80232e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80232ea:	eb03 0408 	add.w	r4, r3, r8
 80232ee:	1bed      	subs	r5, r5, r7
 80232f0:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80232f2:	a932      	add	r1, sp, #200	; 0xc8
 80232f4:	ab2e      	add	r3, sp, #184	; 0xb8
 80232f6:	9523      	str	r5, [sp, #140]	; 0x8c
 80232f8:	aa2a      	add	r2, sp, #168	; 0xa8
 80232fa:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80232fc:	a836      	add	r0, sp, #216	; 0xd8
 80232fe:	9744      	str	r7, [sp, #272]	; 0x110
 8023300:	9745      	str	r7, [sp, #276]	; 0x114
 8023302:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8023304:	9100      	str	r1, [sp, #0]
 8023306:	a940      	add	r1, sp, #256	; 0x100
 8023308:	9742      	str	r7, [sp, #264]	; 0x108
 802330a:	9743      	str	r7, [sp, #268]	; 0x10c
 802330c:	e9cd 552f 	strd	r5, r5, [sp, #188]	; 0xbc
 8023310:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8023312:	e9cd bb2b 	strd	fp, fp, [sp, #172]	; 0xac
 8023316:	e9cd 5533 	strd	r5, r5, [sp, #204]	; 0xcc
 802331a:	f000 fc2f 	bl	8023b7c <ai_padding_opt_init>
 802331e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8023320:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8023324:	e9dd 2015 	ldrd	r2, r0, [sp, #84]	; 0x54
 8023328:	005b      	lsls	r3, r3, #1
 802332a:	fb02 f200 	mul.w	r2, r2, r0
 802332e:	fb05 f303 	mul.w	r3, r5, r3
 8023332:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
 8023336:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 802333a:	930d      	str	r3, [sp, #52]	; 0x34
 802333c:	f340 8371 	ble.w	8023a22 <st_sssa8_ch_convolve_rgb+0x7d2>
 8023340:	2300      	movs	r3, #0
 8023342:	4602      	mov	r2, r0
 8023344:	9328      	str	r3, [sp, #160]	; 0xa0
 8023346:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 802334a:	fb93 f3f2 	sdiv	r3, r3, r2
 802334e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8023350:	f023 0301 	bic.w	r3, r3, #1
 8023354:	4293      	cmp	r3, r2
 8023356:	bf28      	it	cs
 8023358:	4613      	movcs	r3, r2
 802335a:	2b01      	cmp	r3, #1
 802335c:	9324      	str	r3, [sp, #144]	; 0x90
 802335e:	f240 81ae 	bls.w	80236be <st_sssa8_ch_convolve_rgb+0x46e>
 8023362:	9924      	ldr	r1, [sp, #144]	; 0x90
 8023364:	4613      	mov	r3, r2
 8023366:	fbb2 f2f1 	udiv	r2, r2, r1
 802336a:	fb01 3312 	mls	r3, r1, r2, r3
 802336e:	b292      	uxth	r2, r2
 8023370:	b29b      	uxth	r3, r3
 8023372:	9229      	str	r2, [sp, #164]	; 0xa4
 8023374:	2b00      	cmp	r3, #0
 8023376:	f040 819d 	bne.w	80236b4 <st_sssa8_ch_convolve_rgb+0x464>
 802337a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802337c:	2b00      	cmp	r3, #0
 802337e:	f000 818b 	beq.w	8023698 <st_sssa8_ch_convolve_rgb+0x448>
 8023382:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023384:	2500      	movs	r5, #0
 8023386:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8023388:	4253      	negs	r3, r2
 802338a:	4f99      	ldr	r7, [pc, #612]	; (80235f0 <st_sssa8_ch_convolve_rgb+0x3a0>)
 802338c:	1a8a      	subs	r2, r1, r2
 802338e:	9527      	str	r5, [sp, #156]	; 0x9c
 8023390:	b29b      	uxth	r3, r3
 8023392:	9226      	str	r2, [sp, #152]	; 0x98
 8023394:	931e      	str	r3, [sp, #120]	; 0x78
 8023396:	9325      	str	r3, [sp, #148]	; 0x94
 8023398:	a836      	add	r0, sp, #216	; 0xd8
 802339a:	f000 fc49 	bl	8023c30 <ai_padding_opt_phase1>
 802339e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80233a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80233a2:	fb05 f303 	mul.w	r3, r5, r3
 80233a6:	995d      	ldr	r1, [sp, #372]	; 0x174
 80233a8:	fb02 1303 	mla	r3, r2, r3, r1
 80233ac:	9314      	str	r3, [sp, #80]	; 0x50
 80233ae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80233b0:	b92b      	cbnz	r3, 80233be <st_sssa8_ch_convolve_rgb+0x16e>
 80233b2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80233b4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80233b6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80233b8:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80233ba:	f001 f8a1 	bl	8024500 <st_int8_to16_dual>
 80233be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80233c0:	46d9      	mov	r9, fp
 80233c2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80233c4:	46b2      	mov	sl, r6
 80233c6:	fb03 2505 	mla	r5, r3, r5, r2
 80233ca:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 80233ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80233d0:	46ab      	mov	fp, r5
 80233d2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80233d4:	9317      	str	r3, [sp, #92]	; 0x5c
 80233d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80233d8:	931c      	str	r3, [sp, #112]	; 0x70
 80233da:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80233dc:	9312      	str	r3, [sp, #72]	; 0x48
 80233de:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80233e0:	9320      	str	r3, [sp, #128]	; 0x80
 80233e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80233e4:	931b      	str	r3, [sp, #108]	; 0x6c
 80233e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80233e8:	931a      	str	r3, [sp, #104]	; 0x68
 80233ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80233ec:	9318      	str	r3, [sp, #96]	; 0x60
 80233ee:	9b59      	ldr	r3, [sp, #356]	; 0x164
 80233f0:	9319      	str	r3, [sp, #100]	; 0x64
 80233f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80233f4:	1e5a      	subs	r2, r3, #1
 80233f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80233fa:	b292      	uxth	r2, r2
 80233fc:	429a      	cmp	r2, r3
 80233fe:	9217      	str	r2, [sp, #92]	; 0x5c
 8023400:	f000 813a 	beq.w	8023678 <st_sssa8_ch_convolve_rgb+0x428>
 8023404:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 8023406:	2600      	movs	r6, #0
 8023408:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802340a:	9238      	str	r2, [sp, #224]	; 0xe0
 802340c:	464a      	mov	r2, r9
 802340e:	9306      	str	r3, [sp, #24]
 8023410:	46d9      	mov	r9, fp
 8023412:	9609      	str	r6, [sp, #36]	; 0x24
 8023414:	4693      	mov	fp, r2
 8023416:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023418:	e9dd 0139 	ldrd	r0, r1, [sp, #228]	; 0xe4
 802341c:	e9cd 0136 	strd	r0, r1, [sp, #216]	; 0xd8
 8023420:	9914      	ldr	r1, [sp, #80]	; 0x50
 8023422:	9113      	str	r1, [sp, #76]	; 0x4c
 8023424:	2800      	cmp	r0, #0
 8023426:	d17b      	bne.n	8023520 <st_sssa8_ch_convolve_rgb+0x2d0>
 8023428:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 802342a:	2a00      	cmp	r2, #0
 802342c:	d17e      	bne.n	802352c <st_sssa8_ch_convolve_rgb+0x2dc>
 802342e:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 8023430:	2101      	movs	r1, #1
 8023432:	3a01      	subs	r2, #1
 8023434:	f8ad 10fe 	strh.w	r1, [sp, #254]	; 0xfe
 8023438:	9238      	str	r2, [sp, #224]	; 0xe0
 802343a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802343c:	4591      	cmp	r9, r2
 802343e:	dd5c      	ble.n	80234fa <st_sssa8_ch_convolve_rgb+0x2aa>
 8023440:	4610      	mov	r0, r2
 8023442:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8023444:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023446:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8023448:	4686      	mov	lr, r0
 802344a:	fb06 1102 	mla	r1, r6, r2, r1
 802344e:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8023452:	f8cd 9020 	str.w	r9, [sp, #32]
 8023456:	1b09      	subs	r1, r1, r4
 8023458:	4691      	mov	r9, r2
 802345a:	f9bd 4074 	ldrsh.w	r4, [sp, #116]	; 0x74
 802345e:	468c      	mov	ip, r1
 8023460:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8023464:	45e1      	cmp	r9, ip
 8023466:	da3d      	bge.n	80234e4 <st_sssa8_ch_convolve_rgb+0x294>
 8023468:	fb00 f20b 	mul.w	r2, r0, fp
 802346c:	ea4f 71de 	mov.w	r1, lr, lsr #31
 8023470:	4698      	mov	r8, r3
 8023472:	9207      	str	r2, [sp, #28]
 8023474:	4583      	cmp	fp, r0
 8023476:	bfd8      	it	le
 8023478:	f041 0101 	orrle.w	r1, r1, #1
 802347c:	464a      	mov	r2, r9
 802347e:	4648      	mov	r0, r9
 8023480:	4583      	cmp	fp, r0
 8023482:	f102 0601 	add.w	r6, r2, #1
 8023486:	f103 0306 	add.w	r3, r3, #6
 802348a:	bfcc      	ite	gt
 802348c:	2500      	movgt	r5, #0
 802348e:	2501      	movle	r5, #1
 8023490:	ea55 75d2 	orrs.w	r5, r5, r2, lsr #31
 8023494:	d100      	bne.n	8023498 <st_sssa8_ch_convolve_rgb+0x248>
 8023496:	b159      	cbz	r1, 80234b0 <st_sssa8_ch_convolve_rgb+0x260>
 8023498:	b232      	sxth	r2, r6
 802349a:	f823 4c04 	strh.w	r4, [r3, #-4]
 802349e:	f823 4c02 	strh.w	r4, [r3, #-2]
 80234a2:	4562      	cmp	r2, ip
 80234a4:	f823 4c06 	strh.w	r4, [r3, #-6]
 80234a8:	4610      	mov	r0, r2
 80234aa:	da1b      	bge.n	80234e4 <st_sssa8_ch_convolve_rgb+0x294>
 80234ac:	4698      	mov	r8, r3
 80234ae:	e7e7      	b.n	8023480 <st_sssa8_ch_convolve_rgb+0x230>
 80234b0:	9d07      	ldr	r5, [sp, #28]
 80234b2:	3201      	adds	r2, #1
 80234b4:	4428      	add	r0, r5
 80234b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80234b8:	b212      	sxth	r2, r2
 80234ba:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80234be:	4562      	cmp	r2, ip
 80234c0:	5828      	ldr	r0, [r5, r0]
 80234c2:	fa2f f680 	sxtb16	r6, r0
 80234c6:	ea4f 2530 	mov.w	r5, r0, ror #8
 80234ca:	ea06 0a07 	and.w	sl, r6, r7
 80234ce:	fa2f f585 	sxtb16	r5, r5
 80234d2:	b2ad      	uxth	r5, r5
 80234d4:	4610      	mov	r0, r2
 80234d6:	ea45 050a 	orr.w	r5, r5, sl
 80234da:	f8c8 5002 	str.w	r5, [r8, #2]
 80234de:	f823 6c06 	strh.w	r6, [r3, #-6]
 80234e2:	dbe3      	blt.n	80234ac <st_sssa8_ch_convolve_rgb+0x25c>
 80234e4:	f10e 0e01 	add.w	lr, lr, #1
 80234e8:	9a08      	ldr	r2, [sp, #32]
 80234ea:	fa0f fe8e 	sxth.w	lr, lr
 80234ee:	4596      	cmp	lr, r2
 80234f0:	4670      	mov	r0, lr
 80234f2:	dbb7      	blt.n	8023464 <st_sssa8_ch_convolve_rgb+0x214>
 80234f4:	4691      	mov	r9, r2
 80234f6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80234fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80234fc:	429a      	cmp	r2, r3
 80234fe:	d055      	beq.n	80235ac <st_sssa8_ch_convolve_rgb+0x35c>
 8023500:	9a06      	ldr	r2, [sp, #24]
 8023502:	980a      	ldr	r0, [sp, #40]	; 0x28
 8023504:	9909      	ldr	r1, [sp, #36]	; 0x24
 8023506:	4402      	add	r2, r0
 8023508:	3101      	adds	r1, #1
 802350a:	b292      	uxth	r2, r2
 802350c:	b209      	sxth	r1, r1
 802350e:	9206      	str	r2, [sp, #24]
 8023510:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023512:	460e      	mov	r6, r1
 8023514:	9109      	str	r1, [sp, #36]	; 0x24
 8023516:	428a      	cmp	r2, r1
 8023518:	dd6c      	ble.n	80235f4 <st_sssa8_ch_convolve_rgb+0x3a4>
 802351a:	9836      	ldr	r0, [sp, #216]	; 0xd8
 802351c:	2800      	cmp	r0, #0
 802351e:	d083      	beq.n	8023428 <st_sssa8_ch_convolve_rgb+0x1d8>
 8023520:	3801      	subs	r0, #1
 8023522:	2201      	movs	r2, #1
 8023524:	9036      	str	r0, [sp, #216]	; 0xd8
 8023526:	f8ad 20fe 	strh.w	r2, [sp, #254]	; 0xfe
 802352a:	e786      	b.n	802343a <st_sssa8_ch_convolve_rgb+0x1ea>
 802352c:	f8bd 10fc 	ldrh.w	r1, [sp, #252]	; 0xfc
 8023530:	3a01      	subs	r2, #1
 8023532:	2901      	cmp	r1, #1
 8023534:	9237      	str	r2, [sp, #220]	; 0xdc
 8023536:	f8ad 10fe 	strh.w	r1, [sp, #254]	; 0xfe
 802353a:	f43f af7e 	beq.w	802343a <st_sssa8_ch_convolve_rgb+0x1ea>
 802353e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023540:	4591      	cmp	r9, r2
 8023542:	ddda      	ble.n	80234fa <st_sssa8_ch_convolve_rgb+0x2aa>
 8023544:	990a      	ldr	r1, [sp, #40]	; 0x28
 8023546:	4694      	mov	ip, r2
 8023548:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802354a:	4615      	mov	r5, r2
 802354c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802354e:	fb06 0601 	mla	r6, r6, r1, r0
 8023552:	f9bd e018 	ldrsh.w	lr, [sp, #24]
 8023556:	1ab6      	subs	r6, r6, r2
 8023558:	45b6      	cmp	lr, r6
 802355a:	da1d      	bge.n	8023598 <st_sssa8_ch_convolve_rgb+0x348>
 802355c:	fb05 f40b 	mul.w	r4, r5, fp
 8023560:	4670      	mov	r0, lr
 8023562:	4675      	mov	r5, lr
 8023564:	4425      	add	r5, r4
 8023566:	3001      	adds	r0, #1
 8023568:	3306      	adds	r3, #6
 802356a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802356e:	b200      	sxth	r0, r0
 8023570:	f85a 2005 	ldr.w	r2, [sl, r5]
 8023574:	fa2f f182 	sxtb16	r1, r2
 8023578:	ea4f 2232 	mov.w	r2, r2, ror #8
 802357c:	ea01 0807 	and.w	r8, r1, r7
 8023580:	fa2f f282 	sxtb16	r2, r2
 8023584:	b292      	uxth	r2, r2
 8023586:	42b0      	cmp	r0, r6
 8023588:	f823 1c06 	strh.w	r1, [r3, #-6]
 802358c:	4605      	mov	r5, r0
 802358e:	ea42 0208 	orr.w	r2, r2, r8
 8023592:	f843 2c04 	str.w	r2, [r3, #-4]
 8023596:	dbe5      	blt.n	8023564 <st_sssa8_ch_convolve_rgb+0x314>
 8023598:	f10c 0c01 	add.w	ip, ip, #1
 802359c:	fa0f fc8c 	sxth.w	ip, ip
 80235a0:	45cc      	cmp	ip, r9
 80235a2:	4665      	mov	r5, ip
 80235a4:	dbd8      	blt.n	8023558 <st_sssa8_ch_convolve_rgb+0x308>
 80235a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80235a8:	429a      	cmp	r2, r3
 80235aa:	d1a9      	bne.n	8023500 <st_sssa8_ch_convolve_rgb+0x2b0>
 80235ac:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80235ae:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80235b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80235b2:	9818      	ldr	r0, [sp, #96]	; 0x60
 80235b4:	9204      	str	r2, [sp, #16]
 80235b6:	9401      	str	r4, [sp, #4]
 80235b8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80235ba:	9305      	str	r3, [sp, #20]
 80235bc:	9002      	str	r0, [sp, #8]
 80235be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80235c0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80235c2:	9400      	str	r4, [sp, #0]
 80235c4:	e9dd 1219 	ldrd	r1, r2, [sp, #100]	; 0x64
 80235c8:	9103      	str	r1, [sp, #12]
 80235ca:	9911      	ldr	r1, [sp, #68]	; 0x44
 80235cc:	f001 fea4 	bl	8025318 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 80235d0:	9b06      	ldr	r3, [sp, #24]
 80235d2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80235d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80235d6:	440b      	add	r3, r1
 80235d8:	9013      	str	r0, [sp, #76]	; 0x4c
 80235da:	3201      	adds	r2, #1
 80235dc:	b29b      	uxth	r3, r3
 80235de:	b212      	sxth	r2, r2
 80235e0:	9306      	str	r3, [sp, #24]
 80235e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80235e4:	4616      	mov	r6, r2
 80235e6:	9209      	str	r2, [sp, #36]	; 0x24
 80235e8:	4293      	cmp	r3, r2
 80235ea:	dd59      	ble.n	80236a0 <st_sssa8_ch_convolve_rgb+0x450>
 80235ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80235ee:	e794      	b.n	802351a <st_sssa8_ch_convolve_rgb+0x2ca>
 80235f0:	ffff0000 	.word	0xffff0000
 80235f4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80235f6:	465a      	mov	r2, fp
 80235f8:	46cb      	mov	fp, r9
 80235fa:	4299      	cmp	r1, r3
 80235fc:	4691      	mov	r9, r2
 80235fe:	d010      	beq.n	8023622 <st_sssa8_ch_convolve_rgb+0x3d2>
 8023600:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8023602:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8023604:	9204      	str	r2, [sp, #16]
 8023606:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023608:	9401      	str	r4, [sp, #4]
 802360a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802360c:	9305      	str	r3, [sp, #20]
 802360e:	9400      	str	r4, [sp, #0]
 8023610:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8023612:	e9dd 0219 	ldrd	r0, r2, [sp, #100]	; 0x64
 8023616:	9003      	str	r0, [sp, #12]
 8023618:	9818      	ldr	r0, [sp, #96]	; 0x60
 802361a:	9002      	str	r0, [sp, #8]
 802361c:	980d      	ldr	r0, [sp, #52]	; 0x34
 802361e:	f002 f943 	bl	80258a8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 8023622:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8023624:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023626:	9914      	ldr	r1, [sp, #80]	; 0x50
 8023628:	1a9b      	subs	r3, r3, r2
 802362a:	4608      	mov	r0, r1
 802362c:	b29b      	uxth	r3, r3
 802362e:	4410      	add	r0, r2
 8023630:	429a      	cmp	r2, r3
 8023632:	931c      	str	r3, [sp, #112]	; 0x70
 8023634:	9014      	str	r0, [sp, #80]	; 0x50
 8023636:	bf28      	it	cs
 8023638:	461a      	movcs	r2, r3
 802363a:	4614      	mov	r4, r2
 802363c:	b90a      	cbnz	r2, 8023642 <st_sssa8_ch_convolve_rgb+0x3f2>
 802363e:	9412      	str	r4, [sp, #72]	; 0x48
 8023640:	e6d7      	b.n	80233f2 <st_sssa8_ch_convolve_rgb+0x1a2>
 8023642:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8023644:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8023646:	4619      	mov	r1, r3
 8023648:	009d      	lsls	r5, r3, #2
 802364a:	9820      	ldr	r0, [sp, #128]	; 0x80
 802364c:	eb06 0141 	add.w	r1, r6, r1, lsl #1
 8023650:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8023652:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8023654:	442e      	add	r6, r5
 8023656:	9118      	str	r1, [sp, #96]	; 0x60
 8023658:	fb02 0003 	mla	r0, r2, r3, r0
 802365c:	990d      	ldr	r1, [sp, #52]	; 0x34
 802365e:	961a      	str	r6, [sp, #104]	; 0x68
 8023660:	4623      	mov	r3, r4
 8023662:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8023664:	9020      	str	r0, [sp, #128]	; 0x80
 8023666:	442e      	add	r6, r5
 8023668:	9619      	str	r6, [sp, #100]	; 0x64
 802366a:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 802366c:	442e      	add	r6, r5
 802366e:	4635      	mov	r5, r6
 8023670:	961b      	str	r6, [sp, #108]	; 0x6c
 8023672:	f000 ff45 	bl	8024500 <st_int8_to16_dual>
 8023676:	e7e2      	b.n	802363e <st_sssa8_ch_convolve_rgb+0x3ee>
 8023678:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802367a:	4656      	mov	r6, sl
 802367c:	990a      	ldr	r1, [sp, #40]	; 0x28
 802367e:	46cb      	mov	fp, r9
 8023680:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8023682:	440b      	add	r3, r1
 8023684:	3201      	adds	r2, #1
 8023686:	b29b      	uxth	r3, r3
 8023688:	b212      	sxth	r2, r2
 802368a:	9325      	str	r3, [sp, #148]	; 0x94
 802368c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802368e:	4615      	mov	r5, r2
 8023690:	9227      	str	r2, [sp, #156]	; 0x9c
 8023692:	4293      	cmp	r3, r2
 8023694:	f73f ae80 	bgt.w	8023398 <st_sssa8_ch_convolve_rgb+0x148>
 8023698:	2000      	movs	r0, #0
 802369a:	b04b      	add	sp, #300	; 0x12c
 802369c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80236a0:	465b      	mov	r3, fp
 80236a2:	46cb      	mov	fp, r9
 80236a4:	4699      	mov	r9, r3
 80236a6:	e7bc      	b.n	8023622 <st_sssa8_ch_convolve_rgb+0x3d2>
 80236a8:	428d      	cmp	r5, r1
 80236aa:	f844 ef04 	str.w	lr, [r4, #4]!
 80236ae:	f47f ae0c 	bne.w	80232ca <st_sssa8_ch_convolve_rgb+0x7a>
 80236b2:	e619      	b.n	80232e8 <st_sssa8_ch_convolve_rgb+0x98>
 80236b4:	4613      	mov	r3, r2
 80236b6:	3301      	adds	r3, #1
 80236b8:	b29b      	uxth	r3, r3
 80236ba:	9329      	str	r3, [sp, #164]	; 0xa4
 80236bc:	e65d      	b.n	802337a <st_sssa8_ch_convolve_rgb+0x12a>
 80236be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80236c0:	2b00      	cmp	r3, #0
 80236c2:	d0e9      	beq.n	8023698 <st_sssa8_ch_convolve_rgb+0x448>
 80236c4:	2100      	movs	r1, #0
 80236c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80236c8:	eba4 0008 	sub.w	r0, r4, r8
 80236cc:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80236ce:	4253      	negs	r3, r2
 80236d0:	9113      	str	r1, [sp, #76]	; 0x4c
 80236d2:	460c      	mov	r4, r1
 80236d4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80236d6:	b29b      	uxth	r3, r3
 80236d8:	9012      	str	r0, [sp, #72]	; 0x48
 80236da:	1a8a      	subs	r2, r1, r2
 80236dc:	9314      	str	r3, [sp, #80]	; 0x50
 80236de:	9226      	str	r2, [sp, #152]	; 0x98
 80236e0:	930c      	str	r3, [sp, #48]	; 0x30
 80236e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80236e4:	2500      	movs	r5, #0
 80236e6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80236e8:	a836      	add	r0, sp, #216	; 0xd8
 80236ea:	9507      	str	r5, [sp, #28]
 80236ec:	fb03 2a04 	mla	sl, r3, r4, r2
 80236f0:	f000 fa9e 	bl	8023c30 <ai_padding_opt_phase1>
 80236f4:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 80236f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80236fa:	9309      	str	r3, [sp, #36]	; 0x24
 80236fc:	462b      	mov	r3, r5
 80236fe:	9206      	str	r2, [sp, #24]
 8023700:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8023702:	2a00      	cmp	r2, #0
 8023704:	f040 8112 	bne.w	802392c <st_sssa8_ch_convolve_rgb+0x6dc>
 8023708:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 802370a:	2a00      	cmp	r2, #0
 802370c:	f040 8114 	bne.w	8023938 <st_sssa8_ch_convolve_rgb+0x6e8>
 8023710:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 8023712:	2101      	movs	r1, #1
 8023714:	3a01      	subs	r2, #1
 8023716:	f8ad 10fe 	strh.w	r1, [sp, #254]	; 0xfe
 802371a:	9238      	str	r2, [sp, #224]	; 0xe0
 802371c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802371e:	4552      	cmp	r2, sl
 8023720:	da5d      	bge.n	80237de <st_sssa8_ch_convolve_rgb+0x58e>
 8023722:	4691      	mov	r9, r2
 8023724:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8023726:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023728:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 802372c:	46cc      	mov	ip, r9
 802372e:	fb03 1302 	mla	r3, r3, r2, r1
 8023732:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023734:	f9bd 1074 	ldrsh.w	r1, [sp, #116]	; 0x74
 8023738:	4680      	mov	r8, r0
 802373a:	1a9a      	subs	r2, r3, r2
 802373c:	f8cd a020 	str.w	sl, [sp, #32]
 8023740:	960b      	str	r6, [sp, #44]	; 0x2c
 8023742:	4590      	cmp	r8, r2
 8023744:	da41      	bge.n	80237ca <st_sssa8_ch_convolve_rgb+0x57a>
 8023746:	45cb      	cmp	fp, r9
 8023748:	fb09 fa0b 	mul.w	sl, r9, fp
 802374c:	463e      	mov	r6, r7
 802374e:	4643      	mov	r3, r8
 8023750:	bfcc      	ite	gt
 8023752:	f04f 0e00 	movgt.w	lr, #0
 8023756:	f04f 0e01 	movle.w	lr, #1
 802375a:	4640      	mov	r0, r8
 802375c:	ea4e 7edc 	orr.w	lr, lr, ip, lsr #31
 8023760:	4583      	cmp	fp, r0
 8023762:	f103 0501 	add.w	r5, r3, #1
 8023766:	f107 0706 	add.w	r7, r7, #6
 802376a:	bfcc      	ite	gt
 802376c:	2400      	movgt	r4, #0
 802376e:	2401      	movle	r4, #1
 8023770:	ea54 74d3 	orrs.w	r4, r4, r3, lsr #31
 8023774:	d102      	bne.n	802377c <st_sssa8_ch_convolve_rgb+0x52c>
 8023776:	f1be 0f00 	cmp.w	lr, #0
 802377a:	d00b      	beq.n	8023794 <st_sssa8_ch_convolve_rgb+0x544>
 802377c:	b22b      	sxth	r3, r5
 802377e:	f827 1c04 	strh.w	r1, [r7, #-4]
 8023782:	f827 1c02 	strh.w	r1, [r7, #-2]
 8023786:	429a      	cmp	r2, r3
 8023788:	f827 1c06 	strh.w	r1, [r7, #-6]
 802378c:	4618      	mov	r0, r3
 802378e:	dd1c      	ble.n	80237ca <st_sssa8_ch_convolve_rgb+0x57a>
 8023790:	463e      	mov	r6, r7
 8023792:	e7e5      	b.n	8023760 <st_sssa8_ch_convolve_rgb+0x510>
 8023794:	4450      	add	r0, sl
 8023796:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023798:	3301      	adds	r3, #1
 802379a:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 8023a44 <st_sssa8_ch_convolve_rgb+0x7f4>
 802379e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80237a2:	b21b      	sxth	r3, r3
 80237a4:	5820      	ldr	r0, [r4, r0]
 80237a6:	fa2f f580 	sxtb16	r5, r0
 80237aa:	ea4f 2430 	mov.w	r4, r0, ror #8
 80237ae:	ea05 0909 	and.w	r9, r5, r9
 80237b2:	fa2f f484 	sxtb16	r4, r4
 80237b6:	b2a4      	uxth	r4, r4
 80237b8:	4293      	cmp	r3, r2
 80237ba:	4618      	mov	r0, r3
 80237bc:	ea44 0409 	orr.w	r4, r4, r9
 80237c0:	f8c6 4002 	str.w	r4, [r6, #2]
 80237c4:	f827 5c06 	strh.w	r5, [r7, #-6]
 80237c8:	dbe2      	blt.n	8023790 <st_sssa8_ch_convolve_rgb+0x540>
 80237ca:	f10c 0c01 	add.w	ip, ip, #1
 80237ce:	9b08      	ldr	r3, [sp, #32]
 80237d0:	fa0f fc8c 	sxth.w	ip, ip
 80237d4:	459c      	cmp	ip, r3
 80237d6:	46e1      	mov	r9, ip
 80237d8:	dbb3      	blt.n	8023742 <st_sssa8_ch_convolve_rgb+0x4f2>
 80237da:	469a      	mov	sl, r3
 80237dc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80237de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80237e0:	42bb      	cmp	r3, r7
 80237e2:	f000 80ec 	beq.w	80239be <st_sssa8_ch_convolve_rgb+0x76e>
 80237e6:	9a07      	ldr	r2, [sp, #28]
 80237e8:	9b06      	ldr	r3, [sp, #24]
 80237ea:	990a      	ldr	r1, [sp, #40]	; 0x28
 80237ec:	3201      	adds	r2, #1
 80237ee:	440b      	add	r3, r1
 80237f0:	b212      	sxth	r2, r2
 80237f2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80237f4:	b29b      	uxth	r3, r3
 80237f6:	9207      	str	r2, [sp, #28]
 80237f8:	4291      	cmp	r1, r2
 80237fa:	9306      	str	r3, [sp, #24]
 80237fc:	4613      	mov	r3, r2
 80237fe:	f73f af7f 	bgt.w	8023700 <st_sssa8_ch_convolve_rgb+0x4b0>
 8023802:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023804:	990a      	ldr	r1, [sp, #40]	; 0x28
 8023806:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8023808:	440b      	add	r3, r1
 802380a:	3201      	adds	r2, #1
 802380c:	b29b      	uxth	r3, r3
 802380e:	b212      	sxth	r2, r2
 8023810:	930c      	str	r3, [sp, #48]	; 0x30
 8023812:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023814:	4614      	mov	r4, r2
 8023816:	9213      	str	r2, [sp, #76]	; 0x4c
 8023818:	4293      	cmp	r3, r2
 802381a:	f73f af62 	bgt.w	80236e2 <st_sssa8_ch_convolve_rgb+0x492>
 802381e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8023820:	42ba      	cmp	r2, r7
 8023822:	f43f af39 	beq.w	8023698 <st_sssa8_ch_convolve_rgb+0x448>
 8023826:	9915      	ldr	r1, [sp, #84]	; 0x54
 8023828:	2900      	cmp	r1, #0
 802382a:	f43f af35 	beq.w	8023698 <st_sssa8_ch_convolve_rgb+0x448>
 802382e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8023830:	9816      	ldr	r0, [sp, #88]	; 0x58
 8023832:	1f1f      	subs	r7, r3, #4
 8023834:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8023836:	ea4f 0990 	mov.w	r9, r0, lsr #2
 802383a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802383c:	f1a3 0c02 	sub.w	ip, r3, #2
 8023840:	9b59      	ldr	r3, [sp, #356]	; 0x164
 8023842:	f1a4 0a04 	sub.w	sl, r4, #4
 8023846:	9c5d      	ldr	r4, [sp, #372]	; 0x174
 8023848:	1f1e      	subs	r6, r3, #4
 802384a:	f109 33ff 	add.w	r3, r9, #4294967295
 802384e:	4421      	add	r1, r4
 8023850:	f000 0e03 	and.w	lr, r0, #3
 8023854:	b29b      	uxth	r3, r3
 8023856:	f8df b1ec 	ldr.w	fp, [pc, #492]	; 8023a44 <st_sssa8_ch_convolve_rgb+0x7f4>
 802385a:	9107      	str	r1, [sp, #28]
 802385c:	3301      	adds	r3, #1
 802385e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8023860:	0099      	lsls	r1, r3, #2
 8023862:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8023866:	9108      	str	r1, [sp, #32]
 8023868:	e9cd 3909 	strd	r3, r9, [sp, #36]	; 0x24
 802386c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802386e:	46a1      	mov	r9, r4
 8023870:	f857 3f04 	ldr.w	r3, [r7, #4]!
 8023874:	2a00      	cmp	r2, #0
 8023876:	d057      	beq.n	8023928 <st_sssa8_ch_convolve_rgb+0x6d8>
 8023878:	9a08      	ldr	r2, [sp, #32]
 802387a:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 802387e:	1882      	adds	r2, r0, r2
 8023880:	9206      	str	r2, [sp, #24]
 8023882:	f850 2b04 	ldr.w	r2, [r0], #4
 8023886:	fa2f f482 	sxtb16	r4, r2
 802388a:	b2a1      	uxth	r1, r4
 802388c:	f8d8 5000 	ldr.w	r5, [r8]
 8023890:	ea4f 2232 	mov.w	r2, r2, ror #8
 8023894:	fa2f f282 	sxtb16	r2, r2
 8023898:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 802389c:	fb21 3105 	smlad	r1, r1, r5, r3
 80238a0:	ea02 020b 	and.w	r2, r2, fp
 80238a4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80238a8:	f108 0808 	add.w	r8, r8, #8
 80238ac:	ea42 4414 	orr.w	r4, r2, r4, lsr #16
 80238b0:	fb24 1303 	smlad	r3, r4, r3, r1
 80238b4:	9a06      	ldr	r2, [sp, #24]
 80238b6:	4290      	cmp	r0, r2
 80238b8:	d1e3      	bne.n	8023882 <st_sssa8_ch_convolve_rgb+0x632>
 80238ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80238bc:	f1be 0f00 	cmp.w	lr, #0
 80238c0:	d017      	beq.n	80238f2 <st_sssa8_ch_convolve_rgb+0x6a2>
 80238c2:	f990 1000 	ldrsb.w	r1, [r0]
 80238c6:	f1be 0f01 	cmp.w	lr, #1
 80238ca:	8814      	ldrh	r4, [r2, #0]
 80238cc:	fb14 3301 	smlabb	r3, r4, r1, r3
 80238d0:	f000 80a5 	beq.w	8023a1e <st_sssa8_ch_convolve_rgb+0x7ce>
 80238d4:	f990 1001 	ldrsb.w	r1, [r0, #1]
 80238d8:	f1be 0f02 	cmp.w	lr, #2
 80238dc:	8854      	ldrh	r4, [r2, #2]
 80238de:	fb14 3301 	smlabb	r3, r4, r1, r3
 80238e2:	f000 809a 	beq.w	8023a1a <st_sssa8_ch_convolve_rgb+0x7ca>
 80238e6:	8891      	ldrh	r1, [r2, #4]
 80238e8:	3003      	adds	r0, #3
 80238ea:	f910 2c01 	ldrsb.w	r2, [r0, #-1]
 80238ee:	fb11 3302 	smlabb	r3, r1, r2, r3
 80238f2:	f93c 4f02 	ldrsh.w	r4, [ip, #2]!
 80238f6:	f109 0901 	add.w	r9, r9, #1
 80238fa:	f856 1f04 	ldr.w	r1, [r6, #4]!
 80238fe:	2c00      	cmp	r4, #0
 8023900:	f85a 2f04 	ldr.w	r2, [sl, #4]!
 8023904:	dd7c      	ble.n	8023a00 <st_sssa8_ch_convolve_rgb+0x7b0>
 8023906:	005b      	lsls	r3, r3, #1
 8023908:	fb53 2301 	smmla	r3, r3, r1, r2
 802390c:	4123      	asrs	r3, r4
 802390e:	f303 0307 	ssat	r3, #8, r3
 8023912:	f809 3c01 	strb.w	r3, [r9, #-1]
 8023916:	9b07      	ldr	r3, [sp, #28]
 8023918:	454b      	cmp	r3, r9
 802391a:	f43f aebd 	beq.w	8023698 <st_sssa8_ch_convolve_rgb+0x448>
 802391e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023920:	f857 3f04 	ldr.w	r3, [r7, #4]!
 8023924:	2a00      	cmp	r2, #0
 8023926:	d1a7      	bne.n	8023878 <st_sssa8_ch_convolve_rgb+0x628>
 8023928:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802392a:	e7c7      	b.n	80238bc <st_sssa8_ch_convolve_rgb+0x66c>
 802392c:	3a01      	subs	r2, #1
 802392e:	2101      	movs	r1, #1
 8023930:	9236      	str	r2, [sp, #216]	; 0xd8
 8023932:	f8ad 10fe 	strh.w	r1, [sp, #254]	; 0xfe
 8023936:	e6f1      	b.n	802371c <st_sssa8_ch_convolve_rgb+0x4cc>
 8023938:	f8bd 10fc 	ldrh.w	r1, [sp, #252]	; 0xfc
 802393c:	3a01      	subs	r2, #1
 802393e:	2901      	cmp	r1, #1
 8023940:	9237      	str	r2, [sp, #220]	; 0xdc
 8023942:	f8ad 10fe 	strh.w	r1, [sp, #254]	; 0xfe
 8023946:	f43f aee9 	beq.w	802371c <st_sssa8_ch_convolve_rgb+0x4cc>
 802394a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802394c:	4552      	cmp	r2, sl
 802394e:	f6bf af46 	bge.w	80237de <st_sssa8_ch_convolve_rgb+0x58e>
 8023952:	990a      	ldr	r1, [sp, #40]	; 0x28
 8023954:	4694      	mov	ip, r2
 8023956:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8023958:	4614      	mov	r4, r2
 802395a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802395c:	fb03 0301 	mla	r3, r3, r1, r0
 8023960:	f9bd e018 	ldrsh.w	lr, [sp, #24]
 8023964:	1a9d      	subs	r5, r3, r2
 8023966:	45ae      	cmp	lr, r5
 8023968:	da1e      	bge.n	80239a8 <st_sssa8_ch_convolve_rgb+0x758>
 802396a:	fb04 f00b 	mul.w	r0, r4, fp
 802396e:	4671      	mov	r1, lr
 8023970:	4674      	mov	r4, lr
 8023972:	1903      	adds	r3, r0, r4
 8023974:	3101      	adds	r1, #1
 8023976:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8023a44 <st_sssa8_ch_convolve_rgb+0x7f4>
 802397a:	3706      	adds	r7, #6
 802397c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023980:	b209      	sxth	r1, r1
 8023982:	58f3      	ldr	r3, [r6, r3]
 8023984:	fa2f f283 	sxtb16	r2, r3
 8023988:	ea4f 2333 	mov.w	r3, r3, ror #8
 802398c:	ea02 0808 	and.w	r8, r2, r8
 8023990:	fa2f f383 	sxtb16	r3, r3
 8023994:	b29b      	uxth	r3, r3
 8023996:	42a9      	cmp	r1, r5
 8023998:	f827 2c06 	strh.w	r2, [r7, #-6]
 802399c:	460c      	mov	r4, r1
 802399e:	ea43 0308 	orr.w	r3, r3, r8
 80239a2:	f847 3c04 	str.w	r3, [r7, #-4]
 80239a6:	dbe4      	blt.n	8023972 <st_sssa8_ch_convolve_rgb+0x722>
 80239a8:	f10c 0c01 	add.w	ip, ip, #1
 80239ac:	fa0f fc8c 	sxth.w	ip, ip
 80239b0:	45d4      	cmp	ip, sl
 80239b2:	4664      	mov	r4, ip
 80239b4:	dbd7      	blt.n	8023966 <st_sssa8_ch_convolve_rgb+0x716>
 80239b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80239b8:	42bb      	cmp	r3, r7
 80239ba:	f47f af14 	bne.w	80237e6 <st_sssa8_ch_convolve_rgb+0x596>
 80239be:	9b5d      	ldr	r3, [sp, #372]	; 0x174
 80239c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80239c2:	9959      	ldr	r1, [sp, #356]	; 0x164
 80239c4:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80239c6:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80239c8:	9304      	str	r3, [sp, #16]
 80239ca:	9203      	str	r2, [sp, #12]
 80239cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80239ce:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80239d0:	9102      	str	r1, [sp, #8]
 80239d2:	9001      	str	r0, [sp, #4]
 80239d4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80239d6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80239d8:	9400      	str	r4, [sp, #0]
 80239da:	f000 f963 	bl	8023ca4 <st_sssa8_ch_nn_mat_mult_kernel>
 80239de:	9a07      	ldr	r2, [sp, #28]
 80239e0:	9b06      	ldr	r3, [sp, #24]
 80239e2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80239e4:	3201      	adds	r2, #1
 80239e6:	905d      	str	r0, [sp, #372]	; 0x174
 80239e8:	b212      	sxth	r2, r2
 80239ea:	440b      	add	r3, r1
 80239ec:	990e      	ldr	r1, [sp, #56]	; 0x38
 80239ee:	b29b      	uxth	r3, r3
 80239f0:	9207      	str	r2, [sp, #28]
 80239f2:	4291      	cmp	r1, r2
 80239f4:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80239f6:	9306      	str	r3, [sp, #24]
 80239f8:	4613      	mov	r3, r2
 80239fa:	f73f ae81 	bgt.w	8023700 <st_sssa8_ch_convolve_rgb+0x4b0>
 80239fe:	e700      	b.n	8023802 <st_sssa8_ch_convolve_rgb+0x5b2>
 8023a00:	f1c4 0401 	rsb	r4, r4, #1
 8023a04:	40a3      	lsls	r3, r4
 8023a06:	f303 031f 	ssat	r3, #32, r3
 8023a0a:	fb53 f311 	smmulr	r3, r3, r1
 8023a0e:	4413      	add	r3, r2
 8023a10:	f303 0307 	ssat	r3, #8, r3
 8023a14:	f809 3c01 	strb.w	r3, [r9, #-1]
 8023a18:	e77d      	b.n	8023916 <st_sssa8_ch_convolve_rgb+0x6c6>
 8023a1a:	3002      	adds	r0, #2
 8023a1c:	e769      	b.n	80238f2 <st_sssa8_ch_convolve_rgb+0x6a2>
 8023a1e:	3001      	adds	r0, #1
 8023a20:	e767      	b.n	80238f2 <st_sssa8_ch_convolve_rgb+0x6a2>
 8023a22:	4602      	mov	r2, r0
 8023a24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8023a26:	990d      	ldr	r1, [sp, #52]	; 0x34
 8023a28:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8023a2a:	f000 fd69 	bl	8024500 <st_int8_to16_dual>
 8023a2e:	2301      	movs	r3, #1
 8023a30:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8023a32:	9328      	str	r3, [sp, #160]	; 0xa0
 8023a34:	e487      	b.n	8023346 <st_sssa8_ch_convolve_rgb+0xf6>
 8023a36:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8023a38:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8023a3a:	e458      	b.n	80232ee <st_sssa8_ch_convolve_rgb+0x9e>
 8023a3c:	f06f 0002 	mvn.w	r0, #2
 8023a40:	e62b      	b.n	802369a <st_sssa8_ch_convolve_rgb+0x44a>
 8023a42:	bf00      	nop
 8023a44:	ffff0000 	.word	0xffff0000

08023a48 <st_sssa8_ch_convolve_1x1_WeightsPrefetch>:
 8023a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023a4a:	f06f 0509 	mvn.w	r5, #9
 8023a4e:	685f      	ldr	r7, [r3, #4]
 8023a50:	fb02 f601 	mul.w	r6, r2, r1
 8023a54:	fb05 7501 	mla	r5, r5, r1, r7
 8023a58:	ebb5 0f46 	cmp.w	r5, r6, lsl #1
 8023a5c:	db06      	blt.n	8023a6c <st_sssa8_ch_convolve_1x1_WeightsPrefetch+0x24>
 8023a5e:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 8023a62:	681b      	ldr	r3, [r3, #0]
 8023a64:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8023a68:	f000 feb8 	bl	80247dc <st_sssa8_ch_fullW_prefetch>
 8023a6c:	2000      	movs	r0, #0
 8023a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08023a70 <st_sssa8_ch_convolve_1x1>:
 8023a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023a74:	b091      	sub	sp, #68	; 0x44
 8023a76:	f8bd 5070 	ldrh.w	r5, [sp, #112]	; 0x70
 8023a7a:	920d      	str	r2, [sp, #52]	; 0x34
 8023a7c:	2d01      	cmp	r5, #1
 8023a7e:	f99d 2094 	ldrsb.w	r2, [sp, #148]	; 0x94
 8023a82:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 8023a86:	920e      	str	r2, [sp, #56]	; 0x38
 8023a88:	f8bd 6078 	ldrh.w	r6, [sp, #120]	; 0x78
 8023a8c:	f8bd e080 	ldrh.w	lr, [sp, #128]	; 0x80
 8023a90:	f8bd 8084 	ldrh.w	r8, [sp, #132]	; 0x84
 8023a94:	9c24      	ldr	r4, [sp, #144]	; 0x90
 8023a96:	f99d c098 	ldrsb.w	ip, [sp, #152]	; 0x98
 8023a9a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8023a9c:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
 8023aa0:	f8bd 1074 	ldrh.w	r1, [sp, #116]	; 0x74
 8023aa4:	f8bd 007c 	ldrh.w	r0, [sp, #124]	; 0x7c
 8023aa8:	d164      	bne.n	8023b74 <st_sssa8_ch_convolve_1x1+0x104>
 8023aaa:	2901      	cmp	r1, #1
 8023aac:	d162      	bne.n	8023b74 <st_sssa8_ch_convolve_1x1+0x104>
 8023aae:	ea56 0100 	orrs.w	r1, r6, r0
 8023ab2:	d15f      	bne.n	8023b74 <st_sssa8_ch_convolve_1x1+0x104>
 8023ab4:	f1be 0f01 	cmp.w	lr, #1
 8023ab8:	d15c      	bne.n	8023b74 <st_sssa8_ch_convolve_1x1+0x104>
 8023aba:	f1b8 0f01 	cmp.w	r8, #1
 8023abe:	d159      	bne.n	8023b74 <st_sssa8_ch_convolve_1x1+0x104>
 8023ac0:	ea4f 0a87 	mov.w	sl, r7, lsl #2
 8023ac4:	ebc7 7e87 	rsb	lr, r7, r7, lsl #30
 8023ac8:	eb0a 0907 	add.w	r9, sl, r7
 8023acc:	e9d2 1200 	ldrd	r1, r2, [r2]
 8023ad0:	eb01 0949 	add.w	r9, r1, r9, lsl #1
 8023ad4:	920f      	str	r2, [sp, #60]	; 0x3c
 8023ad6:	eb09 0e8e 	add.w	lr, r9, lr, lsl #2
 8023ada:	2f00      	cmp	r7, #0
 8023adc:	d048      	beq.n	8023b70 <st_sssa8_ch_convolve_1x1+0x100>
 8023ade:	ea4f 0b47 	mov.w	fp, r7, lsl #1
 8023ae2:	f1ae 0604 	sub.w	r6, lr, #4
 8023ae6:	f04f 0801 	mov.w	r8, #1
 8023aea:	eb04 050b 	add.w	r5, r4, fp
 8023aee:	f934 2b02 	ldrsh.w	r2, [r4], #2
 8023af2:	fa08 f002 	lsl.w	r0, r8, r2
 8023af6:	fa0c f102 	lsl.w	r1, ip, r2
 8023afa:	2a00      	cmp	r2, #0
 8023afc:	eb01 0150 	add.w	r1, r1, r0, lsr #1
 8023b00:	dd31      	ble.n	8023b66 <st_sssa8_ch_convolve_1x1+0xf6>
 8023b02:	42a5      	cmp	r5, r4
 8023b04:	f846 1f04 	str.w	r1, [r6, #4]!
 8023b08:	d1f1      	bne.n	8023aee <st_sssa8_ch_convolve_1x1+0x7e>
 8023b0a:	462c      	mov	r4, r5
 8023b0c:	44d6      	add	lr, sl
 8023b0e:	fb07 f503 	mul.w	r5, r7, r3
 8023b12:	461e      	mov	r6, r3
 8023b14:	f06f 0c09 	mvn.w	ip, #9
 8023b18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023b1a:	eba4 040b 	sub.w	r4, r4, fp
 8023b1e:	ebae 0e0a 	sub.w	lr, lr, sl
 8023b22:	fb0c 3c07 	mla	ip, ip, r7, r3
 8023b26:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8023b28:	9401      	str	r4, [sp, #4]
 8023b2a:	ebbc 0f45 	cmp.w	ip, r5, lsl #1
 8023b2e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8023b30:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023b32:	bfac      	ite	ge
 8023b34:	464c      	movge	r4, r9
 8023b36:	2400      	movlt	r4, #0
 8023b38:	f8cd e018 	str.w	lr, [sp, #24]
 8023b3c:	f8cd 901c 	str.w	r9, [sp, #28]
 8023b40:	9703      	str	r7, [sp, #12]
 8023b42:	9408      	str	r4, [sp, #32]
 8023b44:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8023b48:	e9cd 6504 	strd	r6, r5, [sp, #16]
 8023b4c:	fb02 f101 	mul.w	r1, r2, r1
 8023b50:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8023b52:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8023b54:	9102      	str	r1, [sp, #8]
 8023b56:	9500      	str	r5, [sp, #0]
 8023b58:	991a      	ldr	r1, [sp, #104]	; 0x68
 8023b5a:	f000 ff3f 	bl	80249dc <st_sssa8_ch_nn_mat_mult_nt_t>
 8023b5e:	2000      	movs	r0, #0
 8023b60:	b011      	add	sp, #68	; 0x44
 8023b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023b66:	42a5      	cmp	r5, r4
 8023b68:	f846 cf04 	str.w	ip, [r6, #4]!
 8023b6c:	d1bf      	bne.n	8023aee <st_sssa8_ch_convolve_1x1+0x7e>
 8023b6e:	e7cc      	b.n	8023b0a <st_sssa8_ch_convolve_1x1+0x9a>
 8023b70:	46bb      	mov	fp, r7
 8023b72:	e7cc      	b.n	8023b0e <st_sssa8_ch_convolve_1x1+0x9e>
 8023b74:	f06f 0002 	mvn.w	r0, #2
 8023b78:	e7f2      	b.n	8023b60 <st_sssa8_ch_convolve_1x1+0xf0>
 8023b7a:	bf00      	nop

08023b7c <ai_padding_opt_init>:
 8023b7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8023b80:	2600      	movs	r6, #0
 8023b82:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8023b86:	e9c0 6600 	strd	r6, r6, [r0]
 8023b8a:	6086      	str	r6, [r0, #8]
 8023b8c:	689d      	ldr	r5, [r3, #8]
 8023b8e:	690c      	ldr	r4, [r1, #16]
 8023b90:	42b5      	cmp	r5, r6
 8023b92:	dd21      	ble.n	8023bd8 <ai_padding_opt_init+0x5c>
 8023b94:	4264      	negs	r4, r4
 8023b96:	46b0      	mov	r8, r6
 8023b98:	46b6      	mov	lr, r6
 8023b9a:	46b1      	mov	r9, r6
 8023b9c:	4637      	mov	r7, r6
 8023b9e:	e00f      	b.n	8023bc0 <ai_padding_opt_init+0x44>
 8023ba0:	6895      	ldr	r5, [r2, #8]
 8023ba2:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8023ba6:	1b2d      	subs	r5, r5, r4
 8023ba8:	42b5      	cmp	r5, r6
 8023baa:	da10      	bge.n	8023bce <ai_padding_opt_init+0x52>
 8023bac:	f10e 0e01 	add.w	lr, lr, #1
 8023bb0:	f8c0 e008 	str.w	lr, [r0, #8]
 8023bb4:	3701      	adds	r7, #1
 8023bb6:	689d      	ldr	r5, [r3, #8]
 8023bb8:	688e      	ldr	r6, [r1, #8]
 8023bba:	42bd      	cmp	r5, r7
 8023bbc:	4434      	add	r4, r6
 8023bbe:	dd0e      	ble.n	8023bde <ai_padding_opt_init+0x62>
 8023bc0:	2c00      	cmp	r4, #0
 8023bc2:	daed      	bge.n	8023ba0 <ai_padding_opt_init+0x24>
 8023bc4:	f109 0901 	add.w	r9, r9, #1
 8023bc8:	f8c0 9000 	str.w	r9, [r0]
 8023bcc:	e7f2      	b.n	8023bb4 <ai_padding_opt_init+0x38>
 8023bce:	f108 0801 	add.w	r8, r8, #1
 8023bd2:	f8c0 8004 	str.w	r8, [r0, #4]
 8023bd6:	e7ed      	b.n	8023bb4 <ai_padding_opt_init+0x38>
 8023bd8:	46b6      	mov	lr, r6
 8023bda:	46b0      	mov	r8, r6
 8023bdc:	46b1      	mov	r9, r6
 8023bde:	2500      	movs	r5, #0
 8023be0:	e9c0 9803 	strd	r9, r8, [r0, #12]
 8023be4:	e9c0 e505 	strd	lr, r5, [r0, #20]
 8023be8:	e9c0 5507 	strd	r5, r5, [r0, #28]
 8023bec:	685e      	ldr	r6, [r3, #4]
 8023bee:	694c      	ldr	r4, [r1, #20]
 8023bf0:	42ae      	cmp	r6, r5
 8023bf2:	f1c4 0400 	rsb	r4, r4, #0
 8023bf6:	dc0f      	bgt.n	8023c18 <ai_padding_opt_init+0x9c>
 8023bf8:	e018      	b.n	8023c2c <ai_padding_opt_init+0xb0>
 8023bfa:	6856      	ldr	r6, [r2, #4]
 8023bfc:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8023c00:	1b36      	subs	r6, r6, r4
 8023c02:	42be      	cmp	r6, r7
 8023c04:	da0e      	bge.n	8023c24 <ai_padding_opt_init+0xa8>
 8023c06:	6a06      	ldr	r6, [r0, #32]
 8023c08:	3601      	adds	r6, #1
 8023c0a:	6206      	str	r6, [r0, #32]
 8023c0c:	3501      	adds	r5, #1
 8023c0e:	685e      	ldr	r6, [r3, #4]
 8023c10:	68cf      	ldr	r7, [r1, #12]
 8023c12:	42ae      	cmp	r6, r5
 8023c14:	443c      	add	r4, r7
 8023c16:	dd09      	ble.n	8023c2c <ai_padding_opt_init+0xb0>
 8023c18:	2c00      	cmp	r4, #0
 8023c1a:	daee      	bge.n	8023bfa <ai_padding_opt_init+0x7e>
 8023c1c:	6986      	ldr	r6, [r0, #24]
 8023c1e:	3601      	adds	r6, #1
 8023c20:	6186      	str	r6, [r0, #24]
 8023c22:	e7f3      	b.n	8023c0c <ai_padding_opt_init+0x90>
 8023c24:	69c6      	ldr	r6, [r0, #28]
 8023c26:	3601      	adds	r6, #1
 8023c28:	61c6      	str	r6, [r0, #28]
 8023c2a:	e7ef      	b.n	8023c0c <ai_padding_opt_init+0x90>
 8023c2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08023c30 <ai_padding_opt_phase1>:
 8023c30:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8023c34:	b932      	cbnz	r2, 8023c44 <ai_padding_opt_phase1+0x14>
 8023c36:	b993      	cbnz	r3, 8023c5e <ai_padding_opt_phase1+0x2e>
 8023c38:	6a03      	ldr	r3, [r0, #32]
 8023c3a:	2201      	movs	r2, #1
 8023c3c:	3b01      	subs	r3, #1
 8023c3e:	8482      	strh	r2, [r0, #36]	; 0x24
 8023c40:	6203      	str	r3, [r0, #32]
 8023c42:	e005      	b.n	8023c50 <ai_padding_opt_phase1+0x20>
 8023c44:	2b00      	cmp	r3, #0
 8023c46:	d0f7      	beq.n	8023c38 <ai_padding_opt_phase1+0x8>
 8023c48:	3b01      	subs	r3, #1
 8023c4a:	2201      	movs	r2, #1
 8023c4c:	61c3      	str	r3, [r0, #28]
 8023c4e:	8482      	strh	r2, [r0, #36]	; 0x24
 8023c50:	6943      	ldr	r3, [r0, #20]
 8023c52:	e9d0 1203 	ldrd	r1, r2, [r0, #12]
 8023c56:	6083      	str	r3, [r0, #8]
 8023c58:	e9c0 1200 	strd	r1, r2, [r0]
 8023c5c:	4770      	bx	lr
 8023c5e:	3b01      	subs	r3, #1
 8023c60:	8482      	strh	r2, [r0, #36]	; 0x24
 8023c62:	61c3      	str	r3, [r0, #28]
 8023c64:	e7f4      	b.n	8023c50 <ai_padding_opt_phase1+0x20>
 8023c66:	bf00      	nop

08023c68 <st_uint8_fill>:
 8023c68:	0403      	lsls	r3, r0, #16
 8023c6a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8023c6e:	b410      	push	{r4}
 8023c70:	4303      	orrs	r3, r0
 8023c72:	0894      	lsrs	r4, r2, #2
 8023c74:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8023c78:	d011      	beq.n	8023c9e <st_uint8_fill+0x36>
 8023c7a:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8023c7e:	f841 3b04 	str.w	r3, [r1], #4
 8023c82:	42a1      	cmp	r1, r4
 8023c84:	d1fb      	bne.n	8023c7e <st_uint8_fill+0x16>
 8023c86:	f012 0203 	ands.w	r2, r2, #3
 8023c8a:	d005      	beq.n	8023c98 <st_uint8_fill+0x30>
 8023c8c:	4601      	mov	r1, r0
 8023c8e:	4620      	mov	r0, r4
 8023c90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023c94:	f002 ba81 	b.w	802619a <memset>
 8023c98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023c9c:	4770      	bx	lr
 8023c9e:	460c      	mov	r4, r1
 8023ca0:	e7f1      	b.n	8023c86 <st_uint8_fill+0x1e>
 8023ca2:	bf00      	nop

08023ca4 <st_sssa8_ch_nn_mat_mult_kernel>:
 8023ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023ca8:	b09f      	sub	sp, #124	; 0x7c
 8023caa:	460f      	mov	r7, r1
 8023cac:	9004      	str	r0, [sp, #16]
 8023cae:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8023cb0:	9113      	str	r1, [sp, #76]	; 0x4c
 8023cb2:	0859      	lsrs	r1, r3, #1
 8023cb4:	eb00 0503 	add.w	r5, r0, r3
 8023cb8:	f8bd 00a0 	ldrh.w	r0, [sp, #160]	; 0xa0
 8023cbc:	931c      	str	r3, [sp, #112]	; 0x70
 8023cbe:	921a      	str	r2, [sp, #104]	; 0x68
 8023cc0:	951b      	str	r5, [sp, #108]	; 0x6c
 8023cc2:	900d      	str	r0, [sp, #52]	; 0x34
 8023cc4:	f000 8272 	beq.w	80241ac <st_sssa8_ch_nn_mat_mult_kernel+0x508>
 8023cc8:	4614      	mov	r4, r2
 8023cca:	3901      	subs	r1, #1
 8023ccc:	f1a0 0210 	sub.w	r2, r0, #16
 8023cd0:	eb07 0640 	add.w	r6, r7, r0, lsl #1
 8023cd4:	4623      	mov	r3, r4
 8023cd6:	1ec4      	subs	r4, r0, #3
 8023cd8:	0912      	lsrs	r2, r2, #4
 8023cda:	f8df b6dc 	ldr.w	fp, [pc, #1756]	; 80243b8 <st_sssa8_ch_nn_mat_mult_kernel+0x714>
 8023cde:	3310      	adds	r3, #16
 8023ce0:	9415      	str	r4, [sp, #84]	; 0x54
 8023ce2:	b28c      	uxth	r4, r1
 8023ce4:	3201      	adds	r2, #1
 8023ce6:	991a      	ldr	r1, [sp, #104]	; 0x68
 8023ce8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8023cec:	9616      	str	r6, [sp, #88]	; 0x58
 8023cee:	3108      	adds	r1, #8
 8023cf0:	941d      	str	r4, [sp, #116]	; 0x74
 8023cf2:	9314      	str	r3, [sp, #80]	; 0x50
 8023cf4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023cf6:	910e      	str	r1, [sp, #56]	; 0x38
 8023cf8:	3308      	adds	r3, #8
 8023cfa:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8023cfc:	930a      	str	r3, [sp, #40]	; 0x28
 8023cfe:	0153      	lsls	r3, r2, #5
 8023d00:	0112      	lsls	r2, r2, #4
 8023d02:	3104      	adds	r1, #4
 8023d04:	920f      	str	r2, [sp, #60]	; 0x3c
 8023d06:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023d08:	910b      	str	r1, [sp, #44]	; 0x2c
 8023d0a:	3208      	adds	r2, #8
 8023d0c:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8023d0e:	9208      	str	r2, [sp, #32]
 8023d10:	18f2      	adds	r2, r6, r3
 8023d12:	18fb      	adds	r3, r7, r3
 8023d14:	3102      	adds	r1, #2
 8023d16:	9218      	str	r2, [sp, #96]	; 0x60
 8023d18:	9317      	str	r3, [sp, #92]	; 0x5c
 8023d1a:	1cab      	adds	r3, r5, #2
 8023d1c:	9109      	str	r1, [sp, #36]	; 0x24
 8023d1e:	930c      	str	r3, [sp, #48]	; 0x30
 8023d20:	1f03      	subs	r3, r0, #4
 8023d22:	9319      	str	r3, [sp, #100]	; 0x64
 8023d24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023d26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023d28:	9c04      	ldr	r4, [sp, #16]
 8023d2a:	2b0f      	cmp	r3, #15
 8023d2c:	f852 1c08 	ldr.w	r1, [r2, #-8]
 8023d30:	eb04 0003 	add.w	r0, r4, r3
 8023d34:	f852 7c04 	ldr.w	r7, [r2, #-4]
 8023d38:	9103      	str	r1, [sp, #12]
 8023d3a:	9000      	str	r0, [sp, #0]
 8023d3c:	f340 830b 	ble.w	8024356 <st_sssa8_ch_nn_mat_mult_kernel+0x6b2>
 8023d40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023d42:	463e      	mov	r6, r7
 8023d44:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8023d48:	468a      	mov	sl, r1
 8023d4a:	18c3      	adds	r3, r0, r3
 8023d4c:	9402      	str	r4, [sp, #8]
 8023d4e:	9305      	str	r3, [sp, #20]
 8023d50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023d52:	9301      	str	r3, [sp, #4]
 8023d54:	9b02      	ldr	r3, [sp, #8]
 8023d56:	9800      	ldr	r0, [sp, #0]
 8023d58:	6819      	ldr	r1, [r3, #0]
 8023d5a:	f8d0 9000 	ldr.w	r9, [r0]
 8023d5e:	9b01      	ldr	r3, [sp, #4]
 8023d60:	ea4f 2831 	mov.w	r8, r1, ror #8
 8023d64:	ea4f 2039 	mov.w	r0, r9, ror #8
 8023d68:	fa2f f288 	sxtb16	r2, r8
 8023d6c:	f8d3 e000 	ldr.w	lr, [r3]
 8023d70:	ea02 050b 	and.w	r5, r2, fp
 8023d74:	fa2f f181 	sxtb16	r1, r1
 8023d78:	fa2f f989 	sxtb16	r9, r9
 8023d7c:	fa1f f881 	uxth.w	r8, r1
 8023d80:	fa1f f389 	uxth.w	r3, r9
 8023d84:	fa2f f080 	sxtb16	r0, r0
 8023d88:	ea00 040b 	and.w	r4, r0, fp
 8023d8c:	ea48 4802 	orr.w	r8, r8, r2, lsl #16
 8023d90:	ea45 4111 	orr.w	r1, r5, r1, lsr #16
 8023d94:	f8dc 2000 	ldr.w	r2, [ip]
 8023d98:	ea44 4919 	orr.w	r9, r4, r9, lsr #16
 8023d9c:	9c03      	ldr	r4, [sp, #12]
 8023d9e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8023da2:	fb28 430e 	smlad	r3, r8, lr, r4
 8023da6:	fb28 a502 	smlad	r5, r8, r2, sl
 8023daa:	fb20 770e 	smlad	r7, r0, lr, r7
 8023dae:	fb20 6402 	smlad	r4, r0, r2, r6
 8023db2:	9a01      	ldr	r2, [sp, #4]
 8023db4:	f8dc 8004 	ldr.w	r8, [ip, #4]
 8023db8:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8023dbc:	fb21 330e 	smlad	r3, r1, lr, r3
 8023dc0:	fb21 5508 	smlad	r5, r1, r8, r5
 8023dc4:	fb29 770e 	smlad	r7, r9, lr, r7
 8023dc8:	fb29 4408 	smlad	r4, r9, r8, r4
 8023dcc:	9902      	ldr	r1, [sp, #8]
 8023dce:	9e00      	ldr	r6, [sp, #0]
 8023dd0:	6848      	ldr	r0, [r1, #4]
 8023dd2:	6876      	ldr	r6, [r6, #4]
 8023dd4:	ea4f 2130 	mov.w	r1, r0, ror #8
 8023dd8:	f8d2 e008 	ldr.w	lr, [r2, #8]
 8023ddc:	fa2f f981 	sxtb16	r9, r1
 8023de0:	ea09 0a0b 	and.w	sl, r9, fp
 8023de4:	ea4f 2836 	mov.w	r8, r6, ror #8
 8023de8:	fa2f f080 	sxtb16	r0, r0
 8023dec:	fa2f f888 	sxtb16	r8, r8
 8023df0:	b281      	uxth	r1, r0
 8023df2:	fa2f f686 	sxtb16	r6, r6
 8023df6:	ea4a 4010 	orr.w	r0, sl, r0, lsr #16
 8023dfa:	ea08 0a0b 	and.w	sl, r8, fp
 8023dfe:	b2b2      	uxth	r2, r6
 8023e00:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8023e04:	f8dc 9008 	ldr.w	r9, [ip, #8]
 8023e08:	ea4a 4616 	orr.w	r6, sl, r6, lsr #16
 8023e0c:	ea42 4208 	orr.w	r2, r2, r8, lsl #16
 8023e10:	fb21 330e 	smlad	r3, r1, lr, r3
 8023e14:	fb21 5509 	smlad	r5, r1, r9, r5
 8023e18:	fb22 7e0e 	smlad	lr, r2, lr, r7
 8023e1c:	fb22 4209 	smlad	r2, r2, r9, r4
 8023e20:	9901      	ldr	r1, [sp, #4]
 8023e22:	f8dc 400c 	ldr.w	r4, [ip, #12]
 8023e26:	68cf      	ldr	r7, [r1, #12]
 8023e28:	fb20 3307 	smlad	r3, r0, r7, r3
 8023e2c:	fb20 5504 	smlad	r5, r0, r4, r5
 8023e30:	fb26 ee07 	smlad	lr, r6, r7, lr
 8023e34:	fb26 2404 	smlad	r4, r6, r4, r2
 8023e38:	9802      	ldr	r0, [sp, #8]
 8023e3a:	9f00      	ldr	r7, [sp, #0]
 8023e3c:	6882      	ldr	r2, [r0, #8]
 8023e3e:	68be      	ldr	r6, [r7, #8]
 8023e40:	ea4f 2032 	mov.w	r0, r2, ror #8
 8023e44:	690f      	ldr	r7, [r1, #16]
 8023e46:	fa2f fa80 	sxtb16	sl, r0
 8023e4a:	ea0a 090b 	and.w	r9, sl, fp
 8023e4e:	ea4f 2836 	mov.w	r8, r6, ror #8
 8023e52:	fa2f f282 	sxtb16	r2, r2
 8023e56:	fa2f f888 	sxtb16	r8, r8
 8023e5a:	b290      	uxth	r0, r2
 8023e5c:	fa2f f686 	sxtb16	r6, r6
 8023e60:	ea49 4212 	orr.w	r2, r9, r2, lsr #16
 8023e64:	ea08 090b 	and.w	r9, r8, fp
 8023e68:	b2b1      	uxth	r1, r6
 8023e6a:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
 8023e6e:	f8dc a010 	ldr.w	sl, [ip, #16]
 8023e72:	ea49 4616 	orr.w	r6, r9, r6, lsr #16
 8023e76:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8023e7a:	fb20 3307 	smlad	r3, r0, r7, r3
 8023e7e:	fb20 500a 	smlad	r0, r0, sl, r5
 8023e82:	fb21 e707 	smlad	r7, r1, r7, lr
 8023e86:	fb21 410a 	smlad	r1, r1, sl, r4
 8023e8a:	9c01      	ldr	r4, [sp, #4]
 8023e8c:	f8dc 5014 	ldr.w	r5, [ip, #20]
 8023e90:	f8d4 9014 	ldr.w	r9, [r4, #20]
 8023e94:	fb22 3309 	smlad	r3, r2, r9, r3
 8023e98:	fb22 0005 	smlad	r0, r2, r5, r0
 8023e9c:	fb26 7909 	smlad	r9, r6, r9, r7
 8023ea0:	fb26 1605 	smlad	r6, r6, r5, r1
 8023ea4:	9a02      	ldr	r2, [sp, #8]
 8023ea6:	9f01      	ldr	r7, [sp, #4]
 8023ea8:	68d5      	ldr	r5, [r2, #12]
 8023eaa:	3210      	adds	r2, #16
 8023eac:	69bf      	ldr	r7, [r7, #24]
 8023eae:	9202      	str	r2, [sp, #8]
 8023eb0:	9a00      	ldr	r2, [sp, #0]
 8023eb2:	68d4      	ldr	r4, [r2, #12]
 8023eb4:	3210      	adds	r2, #16
 8023eb6:	9200      	str	r2, [sp, #0]
 8023eb8:	ea4f 2235 	mov.w	r2, r5, ror #8
 8023ebc:	fa2f fa82 	sxtb16	sl, r2
 8023ec0:	ea0a 0e0b 	and.w	lr, sl, fp
 8023ec4:	ea4f 2834 	mov.w	r8, r4, ror #8
 8023ec8:	fa2f f585 	sxtb16	r5, r5
 8023ecc:	fa2f f888 	sxtb16	r8, r8
 8023ed0:	b2aa      	uxth	r2, r5
 8023ed2:	fa2f f484 	sxtb16	r4, r4
 8023ed6:	ea4e 4515 	orr.w	r5, lr, r5, lsr #16
 8023eda:	ea08 0e0b 	and.w	lr, r8, fp
 8023ede:	b2a1      	uxth	r1, r4
 8023ee0:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 8023ee4:	f8dc a018 	ldr.w	sl, [ip, #24]
 8023ee8:	ea4e 4414 	orr.w	r4, lr, r4, lsr #16
 8023eec:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8023ef0:	fb22 3307 	smlad	r3, r2, r7, r3
 8023ef4:	fb22 020a 	smlad	r2, r2, sl, r0
 8023ef8:	fb21 9707 	smlad	r7, r1, r7, r9
 8023efc:	fb21 660a 	smlad	r6, r1, sl, r6
 8023f00:	9901      	ldr	r1, [sp, #4]
 8023f02:	f10c 0c20 	add.w	ip, ip, #32
 8023f06:	f85c ec04 	ldr.w	lr, [ip, #-4]
 8023f0a:	f8d1 901c 	ldr.w	r9, [r1, #28]
 8023f0e:	3120      	adds	r1, #32
 8023f10:	9101      	str	r1, [sp, #4]
 8023f12:	fb25 3309 	smlad	r3, r5, r9, r3
 8023f16:	9303      	str	r3, [sp, #12]
 8023f18:	fb25 2a0e 	smlad	sl, r5, lr, r2
 8023f1c:	fb24 7709 	smlad	r7, r4, r9, r7
 8023f20:	fb24 660e 	smlad	r6, r4, lr, r6
 8023f24:	9a00      	ldr	r2, [sp, #0]
 8023f26:	9b05      	ldr	r3, [sp, #20]
 8023f28:	429a      	cmp	r2, r3
 8023f2a:	f47f af13 	bne.w	8023d54 <st_sssa8_ch_nn_mat_mult_kernel+0xb0>
 8023f2e:	9a04      	ldr	r2, [sp, #16]
 8023f30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023f32:	4611      	mov	r1, r2
 8023f34:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8023f36:	9307      	str	r3, [sp, #28]
 8023f38:	4419      	add	r1, r3
 8023f3a:	9206      	str	r2, [sp, #24]
 8023f3c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8023f3e:	9104      	str	r1, [sp, #16]
 8023f40:	9205      	str	r2, [sp, #20]
 8023f42:	9915      	ldr	r1, [sp, #84]	; 0x54
 8023f44:	428b      	cmp	r3, r1
 8023f46:	da64      	bge.n	8024012 <st_sssa8_ch_nn_mat_mult_kernel+0x36e>
 8023f48:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8023f4a:	1ad3      	subs	r3, r2, r3
 8023f4c:	9a04      	ldr	r2, [sp, #16]
 8023f4e:	089b      	lsrs	r3, r3, #2
 8023f50:	9201      	str	r2, [sp, #4]
 8023f52:	9a00      	ldr	r2, [sp, #0]
 8023f54:	9312      	str	r3, [sp, #72]	; 0x48
 8023f56:	3301      	adds	r3, #1
 8023f58:	9311      	str	r3, [sp, #68]	; 0x44
 8023f5a:	009b      	lsls	r3, r3, #2
 8023f5c:	e9dd 9005 	ldrd	r9, r0, [sp, #20]
 8023f60:	9310      	str	r3, [sp, #64]	; 0x40
 8023f62:	18d3      	adds	r3, r2, r3
 8023f64:	9302      	str	r3, [sp, #8]
 8023f66:	9b01      	ldr	r3, [sp, #4]
 8023f68:	f8d9 8000 	ldr.w	r8, [r9]
 8023f6c:	f853 4b04 	ldr.w	r4, [r3], #4
 8023f70:	fa2f f184 	sxtb16	r1, r4
 8023f74:	9301      	str	r3, [sp, #4]
 8023f76:	ea4f 2534 	mov.w	r5, r4, ror #8
 8023f7a:	9b00      	ldr	r3, [sp, #0]
 8023f7c:	fa1f fe81 	uxth.w	lr, r1
 8023f80:	fa2f f585 	sxtb16	r5, r5
 8023f84:	f853 2b04 	ldr.w	r2, [r3], #4
 8023f88:	ea05 040b 	and.w	r4, r5, fp
 8023f8c:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 8023f90:	f8d0 e000 	ldr.w	lr, [r0]
 8023f94:	9300      	str	r3, [sp, #0]
 8023f96:	ea4f 2c32 	mov.w	ip, r2, ror #8
 8023f9a:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
 8023f9e:	fa2f fc8c 	sxtb16	ip, ip
 8023fa2:	fa2f f282 	sxtb16	r2, r2
 8023fa6:	ea0c 010b 	and.w	r1, ip, fp
 8023faa:	b293      	uxth	r3, r2
 8023fac:	ea41 4212 	orr.w	r2, r1, r2, lsr #16
 8023fb0:	9903      	ldr	r1, [sp, #12]
 8023fb2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8023fb6:	fb25 1108 	smlad	r1, r5, r8, r1
 8023fba:	fb25 aa0e 	smlad	sl, r5, lr, sl
 8023fbe:	fb23 7708 	smlad	r7, r3, r8, r7
 8023fc2:	fb23 630e 	smlad	r3, r3, lr, r6
 8023fc6:	f8d9 5004 	ldr.w	r5, [r9, #4]
 8023fca:	3008      	adds	r0, #8
 8023fcc:	f850 6c04 	ldr.w	r6, [r0, #-4]
 8023fd0:	f109 0908 	add.w	r9, r9, #8
 8023fd4:	fb24 1105 	smlad	r1, r4, r5, r1
 8023fd8:	9103      	str	r1, [sp, #12]
 8023fda:	fb24 aa06 	smlad	sl, r4, r6, sl
 8023fde:	fb22 7705 	smlad	r7, r2, r5, r7
 8023fe2:	fb22 3606 	smlad	r6, r2, r6, r3
 8023fe6:	9a02      	ldr	r2, [sp, #8]
 8023fe8:	9b00      	ldr	r3, [sp, #0]
 8023fea:	429a      	cmp	r2, r3
 8023fec:	d1bb      	bne.n	8023f66 <st_sssa8_ch_nn_mat_mult_kernel+0x2c2>
 8023fee:	9904      	ldr	r1, [sp, #16]
 8023ff0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8023ff2:	9a07      	ldr	r2, [sp, #28]
 8023ff4:	4401      	add	r1, r0
 8023ff6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023ff8:	3204      	adds	r2, #4
 8023ffa:	9104      	str	r1, [sp, #16]
 8023ffc:	00db      	lsls	r3, r3, #3
 8023ffe:	9912      	ldr	r1, [sp, #72]	; 0x48
 8024000:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8024004:	9207      	str	r2, [sp, #28]
 8024006:	9a06      	ldr	r2, [sp, #24]
 8024008:	441a      	add	r2, r3
 802400a:	9206      	str	r2, [sp, #24]
 802400c:	9a05      	ldr	r2, [sp, #20]
 802400e:	441a      	add	r2, r3
 8024010:	9205      	str	r2, [sp, #20]
 8024012:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024014:	9a07      	ldr	r2, [sp, #28]
 8024016:	4295      	cmp	r5, r2
 8024018:	dd4e      	ble.n	80240b8 <st_sssa8_ch_nn_mat_mult_kernel+0x414>
 802401a:	f102 0c01 	add.w	ip, r2, #1
 802401e:	9a05      	ldr	r2, [sp, #20]
 8024020:	9b04      	ldr	r3, [sp, #16]
 8024022:	f9b2 0000 	ldrsh.w	r0, [r2]
 8024026:	4565      	cmp	r5, ip
 8024028:	9a06      	ldr	r2, [sp, #24]
 802402a:	f993 4000 	ldrsb.w	r4, [r3]
 802402e:	f9b2 1000 	ldrsh.w	r1, [r2]
 8024032:	9b03      	ldr	r3, [sp, #12]
 8024034:	9a00      	ldr	r2, [sp, #0]
 8024036:	fb11 aa04 	smlabb	sl, r1, r4, sl
 802403a:	fb10 3304 	smlabb	r3, r0, r4, r3
 802403e:	f992 2000 	ldrsb.w	r2, [r2]
 8024042:	9303      	str	r3, [sp, #12]
 8024044:	fb10 7702 	smlabb	r7, r0, r2, r7
 8024048:	fb11 6602 	smlabb	r6, r1, r2, r6
 802404c:	f340 817f 	ble.w	802434e <st_sssa8_ch_nn_mat_mult_kernel+0x6aa>
 8024050:	9a04      	ldr	r2, [sp, #16]
 8024052:	9b07      	ldr	r3, [sp, #28]
 8024054:	f992 4001 	ldrsb.w	r4, [r2, #1]
 8024058:	9a05      	ldr	r2, [sp, #20]
 802405a:	3302      	adds	r3, #2
 802405c:	9d03      	ldr	r5, [sp, #12]
 802405e:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 8024062:	9a06      	ldr	r2, [sp, #24]
 8024064:	fb10 5504 	smlabb	r5, r0, r4, r5
 8024068:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 802406c:	9a00      	ldr	r2, [sp, #0]
 802406e:	9503      	str	r5, [sp, #12]
 8024070:	fb11 aa04 	smlabb	sl, r1, r4, sl
 8024074:	f992 2001 	ldrsb.w	r2, [r2, #1]
 8024078:	fb10 7702 	smlabb	r7, r0, r2, r7
 802407c:	fb11 6602 	smlabb	r6, r1, r2, r6
 8024080:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8024082:	429a      	cmp	r2, r3
 8024084:	f340 8170 	ble.w	8024368 <st_sssa8_ch_nn_mat_mult_kernel+0x6c4>
 8024088:	9b05      	ldr	r3, [sp, #20]
 802408a:	9c04      	ldr	r4, [sp, #16]
 802408c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8024090:	9b00      	ldr	r3, [sp, #0]
 8024092:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8024096:	9b06      	ldr	r3, [sp, #24]
 8024098:	fb12 7701 	smlabb	r7, r2, r1, r7
 802409c:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 80240a0:	f994 3002 	ldrsb.w	r3, [r4, #2]
 80240a4:	fb10 6601 	smlabb	r6, r0, r1, r6
 80240a8:	1ce1      	adds	r1, r4, #3
 80240aa:	fb10 aa03 	smlabb	sl, r0, r3, sl
 80240ae:	9104      	str	r1, [sp, #16]
 80240b0:	9903      	ldr	r1, [sp, #12]
 80240b2:	fb12 1203 	smlabb	r2, r2, r3, r1
 80240b6:	9203      	str	r2, [sp, #12]
 80240b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80240ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80240bc:	f933 4c04 	ldrsh.w	r4, [r3, #-4]
 80240c0:	f852 1c08 	ldr.w	r1, [r2, #-8]
 80240c4:	2c00      	cmp	r4, #0
 80240c6:	9a08      	ldr	r2, [sp, #32]
 80240c8:	f852 0c08 	ldr.w	r0, [r2, #-8]
 80240cc:	f340 8120 	ble.w	8024310 <st_sssa8_ch_nn_mat_mult_kernel+0x66c>
 80240d0:	9a03      	ldr	r2, [sp, #12]
 80240d2:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 80240d6:	fb5a 0a01 	smmla	sl, sl, r1, r0
 80240da:	ea4f 0842 	mov.w	r8, r2, lsl #1
 80240de:	fb58 0801 	smmla	r8, r8, r1, r0
 80240e2:	fa48 f804 	asr.w	r8, r8, r4
 80240e6:	f308 0807 	ssat	r8, #8, r8
 80240ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80240ec:	f802 8c02 	strb.w	r8, [r2, #-2]
 80240f0:	f933 1c04 	ldrsh.w	r1, [r3, #-4]
 80240f4:	fa4a fa01 	asr.w	sl, sl, r1
 80240f8:	f30a 0a07 	ssat	sl, #8, sl
 80240fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80240fe:	f803 ac02 	strb.w	sl, [r3, #-2]
 8024102:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024104:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
 8024108:	2b00      	cmp	r3, #0
 802410a:	f340 80de 	ble.w	80242ca <st_sssa8_ch_nn_mat_mult_kernel+0x626>
 802410e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024110:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 8024114:	9808      	ldr	r0, [sp, #32]
 8024116:	0071      	lsls	r1, r6, #1
 8024118:	f852 2c04 	ldr.w	r2, [r2, #-4]
 802411c:	f850 0c04 	ldr.w	r0, [r0, #-4]
 8024120:	fb5e 0e02 	smmla	lr, lr, r2, r0
 8024124:	fb51 0102 	smmla	r1, r1, r2, r0
 8024128:	fa4e fe03 	asr.w	lr, lr, r3
 802412c:	f30e 0307 	ssat	r3, #8, lr
 8024130:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024132:	f802 3c01 	strb.w	r3, [r2, #-1]
 8024136:	f934 0c02 	ldrsh.w	r0, [r4, #-2]
 802413a:	fa41 f000 	asr.w	r0, r1, r0
 802413e:	f300 0007 	ssat	r0, #8, r0
 8024142:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024144:	f803 0c01 	strb.w	r0, [r3, #-1]
 8024148:	9a04      	ldr	r2, [sp, #16]
 802414a:	990d      	ldr	r1, [sp, #52]	; 0x34
 802414c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802414e:	440a      	add	r2, r1
 8024150:	3308      	adds	r3, #8
 8024152:	9204      	str	r2, [sp, #16]
 8024154:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024156:	930e      	str	r3, [sp, #56]	; 0x38
 8024158:	3204      	adds	r2, #4
 802415a:	920b      	str	r2, [sp, #44]	; 0x2c
 802415c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802415e:	3208      	adds	r2, #8
 8024160:	920a      	str	r2, [sp, #40]	; 0x28
 8024162:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024164:	3202      	adds	r2, #2
 8024166:	9209      	str	r2, [sp, #36]	; 0x24
 8024168:	9a08      	ldr	r2, [sp, #32]
 802416a:	3208      	adds	r2, #8
 802416c:	9208      	str	r2, [sp, #32]
 802416e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024170:	3202      	adds	r2, #2
 8024172:	920c      	str	r2, [sp, #48]	; 0x30
 8024174:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8024176:	4293      	cmp	r3, r2
 8024178:	f47f add4 	bne.w	8023d24 <st_sssa8_ch_nn_mat_mult_kernel+0x80>
 802417c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802417e:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8024180:	3301      	adds	r3, #1
 8024182:	00da      	lsls	r2, r3, #3
 8024184:	0059      	lsls	r1, r3, #1
 8024186:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 802418a:	9329      	str	r3, [sp, #164]	; 0xa4
 802418c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 802418e:	4413      	add	r3, r2
 8024190:	931a      	str	r3, [sp, #104]	; 0x68
 8024192:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024194:	4413      	add	r3, r2
 8024196:	932a      	str	r3, [sp, #168]	; 0xa8
 8024198:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802419a:	4413      	add	r3, r2
 802419c:	932b      	str	r3, [sp, #172]	; 0xac
 802419e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80241a0:	440b      	add	r3, r1
 80241a2:	932c      	str	r3, [sp, #176]	; 0xb0
 80241a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80241a6:	440b      	add	r3, r1
 80241a8:	931b      	str	r3, [sp, #108]	; 0x6c
 80241aa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80241ac:	07da      	lsls	r2, r3, #31
 80241ae:	f140 8086 	bpl.w	80242be <st_sssa8_ch_nn_mat_mult_kernel+0x61a>
 80241b2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80241b4:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 80241b6:	6818      	ldr	r0, [r3, #0]
 80241b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80241ba:	ea5f 0a93 	movs.w	sl, r3, lsr #2
 80241be:	eb07 0943 	add.w	r9, r7, r3, lsl #1
 80241c2:	f000 80f6 	beq.w	80243b2 <st_sssa8_ch_nn_mat_mult_kernel+0x70e>
 80241c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80241ca:	9d04      	ldr	r5, [sp, #16]
 80241cc:	46cc      	mov	ip, r9
 80241ce:	4602      	mov	r2, r0
 80241d0:	fa1f fa8a 	uxth.w	sl, sl
 80241d4:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 80243b8 <st_sssa8_ch_nn_mat_mult_kernel+0x714>
 80241d8:	f10a 0a01 	add.w	sl, sl, #1
 80241dc:	eb05 0e8a 	add.w	lr, r5, sl, lsl #2
 80241e0:	f855 1b04 	ldr.w	r1, [r5], #4
 80241e4:	fa2f f481 	sxtb16	r4, r1
 80241e8:	ea4f 2331 	mov.w	r3, r1, ror #8
 80241ec:	683e      	ldr	r6, [r7, #0]
 80241ee:	b2a1      	uxth	r1, r4
 80241f0:	fa2f f383 	sxtb16	r3, r3
 80241f4:	ea03 0b08 	and.w	fp, r3, r8
 80241f8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80241fc:	ea4b 4414 	orr.w	r4, fp, r4, lsr #16
 8024200:	fb23 0606 	smlad	r6, r3, r6, r0
 8024204:	f8dc 1000 	ldr.w	r1, [ip]
 8024208:	fb23 2301 	smlad	r3, r3, r1, r2
 802420c:	6878      	ldr	r0, [r7, #4]
 802420e:	f10c 0c08 	add.w	ip, ip, #8
 8024212:	f85c 2c04 	ldr.w	r2, [ip, #-4]
 8024216:	3708      	adds	r7, #8
 8024218:	fb24 6000 	smlad	r0, r4, r0, r6
 802421c:	fb24 3202 	smlad	r2, r4, r2, r3
 8024220:	45ae      	cmp	lr, r5
 8024222:	d1dd      	bne.n	80241e0 <st_sssa8_ch_nn_mat_mult_kernel+0x53c>
 8024224:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8024228:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802422a:	9504      	str	r5, [sp, #16]
 802422c:	4453      	add	r3, sl
 802422e:	44d1      	add	r9, sl
 8024230:	9313      	str	r3, [sp, #76]	; 0x4c
 8024232:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024234:	f013 0303 	ands.w	r3, r3, #3
 8024238:	d020      	beq.n	802427c <st_sssa8_ch_nn_mat_mult_kernel+0x5d8>
 802423a:	9e04      	ldr	r6, [sp, #16]
 802423c:	2b01      	cmp	r3, #1
 802423e:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8024240:	f996 1000 	ldrsb.w	r1, [r6]
 8024244:	883d      	ldrh	r5, [r7, #0]
 8024246:	f8b9 4000 	ldrh.w	r4, [r9]
 802424a:	fb15 0001 	smlabb	r0, r5, r1, r0
 802424e:	fb14 2201 	smlabb	r2, r4, r1, r2
 8024252:	d013      	beq.n	802427c <st_sssa8_ch_nn_mat_mult_kernel+0x5d8>
 8024254:	f996 1001 	ldrsb.w	r1, [r6, #1]
 8024258:	2b02      	cmp	r3, #2
 802425a:	887d      	ldrh	r5, [r7, #2]
 802425c:	f8b9 4002 	ldrh.w	r4, [r9, #2]
 8024260:	fb15 0001 	smlabb	r0, r5, r1, r0
 8024264:	fb14 2201 	smlabb	r2, r4, r1, r2
 8024268:	d008      	beq.n	802427c <st_sssa8_ch_nn_mat_mult_kernel+0x5d8>
 802426a:	f996 3002 	ldrsb.w	r3, [r6, #2]
 802426e:	88bc      	ldrh	r4, [r7, #4]
 8024270:	f8b9 1004 	ldrh.w	r1, [r9, #4]
 8024274:	fb14 0003 	smlabb	r0, r4, r3, r0
 8024278:	fb11 2203 	smlabb	r2, r1, r3, r2
 802427c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802427e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8024282:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024284:	2e00      	cmp	r6, #0
 8024286:	f103 0101 	add.w	r1, r3, #1
 802428a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802428c:	681d      	ldr	r5, [r3, #0]
 802428e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8024290:	681c      	ldr	r4, [r3, #0]
 8024292:	dd6d      	ble.n	8024370 <st_sssa8_ch_nn_mat_mult_kernel+0x6cc>
 8024294:	0040      	lsls	r0, r0, #1
 8024296:	0053      	lsls	r3, r2, #1
 8024298:	fb50 4205 	smmla	r2, r0, r5, r4
 802429c:	fb53 4305 	smmla	r3, r3, r5, r4
 80242a0:	4132      	asrs	r2, r6
 80242a2:	f302 0207 	ssat	r2, #8, r2
 80242a6:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80242a8:	7002      	strb	r2, [r0, #0]
 80242aa:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80242ac:	f9b2 2000 	ldrsh.w	r2, [r2]
 80242b0:	4113      	asrs	r3, r2
 80242b2:	f303 0307 	ssat	r3, #8, r3
 80242b6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80242b8:	912c      	str	r1, [sp, #176]	; 0xb0
 80242ba:	7013      	strb	r3, [r2, #0]
 80242bc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80242be:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80242c0:	4413      	add	r3, r2
 80242c2:	4618      	mov	r0, r3
 80242c4:	b01f      	add	sp, #124	; 0x7c
 80242c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80242ca:	f1c3 0301 	rsb	r3, r3, #1
 80242ce:	fa07 fe03 	lsl.w	lr, r7, r3
 80242d2:	f30e 051f 	ssat	r5, #32, lr
 80242d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80242d8:	f852 2c04 	ldr.w	r2, [r2, #-4]
 80242dc:	fb55 f512 	smmulr	r5, r5, r2
 80242e0:	fa06 f103 	lsl.w	r1, r6, r3
 80242e4:	f301 011f 	ssat	r1, #32, r1
 80242e8:	fb51 f112 	smmulr	r1, r1, r2
 80242ec:	9b08      	ldr	r3, [sp, #32]
 80242ee:	f853 2c04 	ldr.w	r2, [r3, #-4]
 80242f2:	442a      	add	r2, r5
 80242f4:	f302 0207 	ssat	r2, #8, r2
 80242f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80242fa:	f800 2c01 	strb.w	r2, [r0, #-1]
 80242fe:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8024302:	440b      	add	r3, r1
 8024304:	f303 0307 	ssat	r3, #8, r3
 8024308:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802430a:	f802 3c01 	strb.w	r3, [r2, #-1]
 802430e:	e71b      	b.n	8024148 <st_sssa8_ch_nn_mat_mult_kernel+0x4a4>
 8024310:	f1c4 0301 	rsb	r3, r4, #1
 8024314:	9a03      	ldr	r2, [sp, #12]
 8024316:	fa02 f803 	lsl.w	r8, r2, r3
 802431a:	f308 041f 	ssat	r4, #32, r8
 802431e:	fb54 f411 	smmulr	r4, r4, r1
 8024322:	fa0a f303 	lsl.w	r3, sl, r3
 8024326:	f303 031f 	ssat	r3, #32, r3
 802432a:	fb53 f111 	smmulr	r1, r3, r1
 802432e:	4420      	add	r0, r4
 8024330:	f300 0007 	ssat	r0, #8, r0
 8024334:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024336:	f803 0c02 	strb.w	r0, [r3, #-2]
 802433a:	9b08      	ldr	r3, [sp, #32]
 802433c:	f853 3c08 	ldr.w	r3, [r3, #-8]
 8024340:	4419      	add	r1, r3
 8024342:	f301 0107 	ssat	r1, #8, r1
 8024346:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024348:	f803 1c02 	strb.w	r1, [r3, #-2]
 802434c:	e6d9      	b.n	8024102 <st_sssa8_ch_nn_mat_mult_kernel+0x45e>
 802434e:	9b04      	ldr	r3, [sp, #16]
 8024350:	3301      	adds	r3, #1
 8024352:	9304      	str	r3, [sp, #16]
 8024354:	e6b0      	b.n	80240b8 <st_sssa8_ch_nn_mat_mult_kernel+0x414>
 8024356:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8024358:	468a      	mov	sl, r1
 802435a:	463e      	mov	r6, r7
 802435c:	9306      	str	r3, [sp, #24]
 802435e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8024360:	9305      	str	r3, [sp, #20]
 8024362:	2300      	movs	r3, #0
 8024364:	9307      	str	r3, [sp, #28]
 8024366:	e5ec      	b.n	8023f42 <st_sssa8_ch_nn_mat_mult_kernel+0x29e>
 8024368:	9b04      	ldr	r3, [sp, #16]
 802436a:	3302      	adds	r3, #2
 802436c:	9304      	str	r3, [sp, #16]
 802436e:	e6a3      	b.n	80240b8 <st_sssa8_ch_nn_mat_mult_kernel+0x414>
 8024370:	f1c6 0601 	rsb	r6, r6, #1
 8024374:	fa00 f306 	lsl.w	r3, r0, r6
 8024378:	f303 031f 	ssat	r3, #32, r3
 802437c:	fb53 f315 	smmulr	r3, r3, r5
 8024380:	40b2      	lsls	r2, r6
 8024382:	f302 021f 	ssat	r2, #32, r2
 8024386:	fb52 f215 	smmulr	r2, r2, r5
 802438a:	4423      	add	r3, r4
 802438c:	f303 0307 	ssat	r3, #8, r3
 8024390:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8024392:	7003      	strb	r3, [r0, #0]
 8024394:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8024396:	681b      	ldr	r3, [r3, #0]
 8024398:	4413      	add	r3, r2
 802439a:	f303 0307 	ssat	r3, #8, r3
 802439e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80243a0:	912c      	str	r1, [sp, #176]	; 0xb0
 80243a2:	7013      	strb	r3, [r2, #0]
 80243a4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80243a6:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80243a8:	4413      	add	r3, r2
 80243aa:	4618      	mov	r0, r3
 80243ac:	b01f      	add	sp, #124	; 0x7c
 80243ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80243b2:	4602      	mov	r2, r0
 80243b4:	e73e      	b.n	8024234 <st_sssa8_ch_nn_mat_mult_kernel+0x590>
 80243b6:	bf00      	nop
 80243b8:	ffff0000 	.word	0xffff0000

080243bc <st_int8_to16_no_shift>:
 80243bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80243c0:	f1b2 0610 	subs.w	r6, r2, #16
 80243c4:	f100 8092 	bmi.w	80244ec <st_int8_to16_no_shift+0x130>
 80243c8:	0936      	lsrs	r6, r6, #4
 80243ca:	4603      	mov	r3, r0
 80243cc:	4f4b      	ldr	r7, [pc, #300]	; (80244fc <st_int8_to16_no_shift+0x140>)
 80243ce:	f106 0801 	add.w	r8, r6, #1
 80243d2:	eb01 1448 	add.w	r4, r1, r8, lsl #5
 80243d6:	681d      	ldr	r5, [r3, #0]
 80243d8:	3120      	adds	r1, #32
 80243da:	685e      	ldr	r6, [r3, #4]
 80243dc:	3310      	adds	r3, #16
 80243de:	ea4f 2c35 	mov.w	ip, r5, ror #8
 80243e2:	fa2f fc8c 	sxtb16	ip, ip
 80243e6:	ea0c 0a07 	and.w	sl, ip, r7
 80243ea:	ea4f 2e36 	mov.w	lr, r6, ror #8
 80243ee:	fa2f f585 	sxtb16	r5, r5
 80243f2:	fa2f fe8e 	sxtb16	lr, lr
 80243f6:	fa1f fb85 	uxth.w	fp, r5
 80243fa:	ea0e 0907 	and.w	r9, lr, r7
 80243fe:	ea4a 4a15 	orr.w	sl, sl, r5, lsr #16
 8024402:	fa2f f686 	sxtb16	r6, r6
 8024406:	b2b5      	uxth	r5, r6
 8024408:	f841 ac1c 	str.w	sl, [r1, #-28]
 802440c:	ea4b 4c0c 	orr.w	ip, fp, ip, lsl #16
 8024410:	ea49 4616 	orr.w	r6, r9, r6, lsr #16
 8024414:	ea45 450e 	orr.w	r5, r5, lr, lsl #16
 8024418:	f841 cc20 	str.w	ip, [r1, #-32]
 802441c:	f841 6c14 	str.w	r6, [r1, #-20]
 8024420:	f841 5c18 	str.w	r5, [r1, #-24]
 8024424:	f853 6c08 	ldr.w	r6, [r3, #-8]
 8024428:	f853 5c04 	ldr.w	r5, [r3, #-4]
 802442c:	ea4f 2e36 	mov.w	lr, r6, ror #8
 8024430:	fa2f fe8e 	sxtb16	lr, lr
 8024434:	ea0e 0a07 	and.w	sl, lr, r7
 8024438:	ea4f 2c35 	mov.w	ip, r5, ror #8
 802443c:	fa2f f686 	sxtb16	r6, r6
 8024440:	fa2f f98c 	sxtb16	r9, ip
 8024444:	fa1f fb86 	uxth.w	fp, r6
 8024448:	fa2f f585 	sxtb16	r5, r5
 802444c:	ea4a 4616 	orr.w	r6, sl, r6, lsr #16
 8024450:	ea09 0a07 	and.w	sl, r9, r7
 8024454:	fa1f fc85 	uxth.w	ip, r5
 8024458:	ea4b 4e0e 	orr.w	lr, fp, lr, lsl #16
 802445c:	f841 6c0c 	str.w	r6, [r1, #-12]
 8024460:	ea4a 4515 	orr.w	r5, sl, r5, lsr #16
 8024464:	ea4c 4c09 	orr.w	ip, ip, r9, lsl #16
 8024468:	f841 ec10 	str.w	lr, [r1, #-16]
 802446c:	f841 5c04 	str.w	r5, [r1, #-4]
 8024470:	f841 cc08 	str.w	ip, [r1, #-8]
 8024474:	428c      	cmp	r4, r1
 8024476:	d1ae      	bne.n	80243d6 <st_int8_to16_no_shift+0x1a>
 8024478:	ea4f 1608 	mov.w	r6, r8, lsl #4
 802447c:	f1a2 0c04 	sub.w	ip, r2, #4
 8024480:	45b4      	cmp	ip, r6
 8024482:	4430      	add	r0, r6
 8024484:	db38      	blt.n	80244f8 <st_int8_to16_no_shift+0x13c>
 8024486:	ebac 0c06 	sub.w	ip, ip, r6
 802448a:	4607      	mov	r7, r0
 802448c:	f8df e06c 	ldr.w	lr, [pc, #108]	; 80244fc <st_int8_to16_no_shift+0x140>
 8024490:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
 8024494:	f10c 0801 	add.w	r8, ip, #1
 8024498:	eb04 05c8 	add.w	r5, r4, r8, lsl #3
 802449c:	f857 3b04 	ldr.w	r3, [r7], #4
 80244a0:	3408      	adds	r4, #8
 80244a2:	fa2f f983 	sxtb16	r9, r3
 80244a6:	ea4f 2333 	mov.w	r3, r3, ror #8
 80244aa:	fa1f f189 	uxth.w	r1, r9
 80244ae:	fa2f f383 	sxtb16	r3, r3
 80244b2:	ea03 0a0e 	and.w	sl, r3, lr
 80244b6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80244ba:	ea4a 4919 	orr.w	r9, sl, r9, lsr #16
 80244be:	f844 3c08 	str.w	r3, [r4, #-8]
 80244c2:	f844 9c04 	str.w	r9, [r4, #-4]
 80244c6:	42a5      	cmp	r5, r4
 80244c8:	d1e8      	bne.n	802449c <st_int8_to16_no_shift+0xe0>
 80244ca:	3604      	adds	r6, #4
 80244cc:	eb00 0088 	add.w	r0, r0, r8, lsl #2
 80244d0:	eb06 068c 	add.w	r6, r6, ip, lsl #2
 80244d4:	42b2      	cmp	r2, r6
 80244d6:	dd07      	ble.n	80244e8 <st_int8_to16_no_shift+0x12c>
 80244d8:	1b92      	subs	r2, r2, r6
 80244da:	4402      	add	r2, r0
 80244dc:	f910 3b01 	ldrsb.w	r3, [r0], #1
 80244e0:	4290      	cmp	r0, r2
 80244e2:	f825 3b02 	strh.w	r3, [r5], #2
 80244e6:	d1f9      	bne.n	80244dc <st_int8_to16_no_shift+0x120>
 80244e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80244ec:	2600      	movs	r6, #0
 80244ee:	f1a2 0c04 	sub.w	ip, r2, #4
 80244f2:	460c      	mov	r4, r1
 80244f4:	45b4      	cmp	ip, r6
 80244f6:	dac6      	bge.n	8024486 <st_int8_to16_no_shift+0xca>
 80244f8:	4625      	mov	r5, r4
 80244fa:	e7eb      	b.n	80244d4 <st_int8_to16_no_shift+0x118>
 80244fc:	ffff0000 	.word	0xffff0000

08024500 <st_int8_to16_dual>:
 8024500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024504:	b08b      	sub	sp, #44	; 0x2c
 8024506:	468a      	mov	sl, r1
 8024508:	eb00 0802 	add.w	r8, r0, r2
 802450c:	9309      	str	r3, [sp, #36]	; 0x24
 802450e:	085b      	lsrs	r3, r3, #1
 8024510:	9200      	str	r2, [sp, #0]
 8024512:	9301      	str	r3, [sp, #4]
 8024514:	f000 8123 	beq.w	802475e <st_int8_to16_dual+0x25e>
 8024518:	f1a2 0310 	sub.w	r3, r2, #16
 802451c:	3a04      	subs	r2, #4
 802451e:	46c2      	mov	sl, r8
 8024520:	f8df 92b4 	ldr.w	r9, [pc, #692]	; 80247d8 <st_int8_to16_dual+0x2d8>
 8024524:	9307      	str	r3, [sp, #28]
 8024526:	091b      	lsrs	r3, r3, #4
 8024528:	9206      	str	r2, [sp, #24]
 802452a:	4688      	mov	r8, r1
 802452c:	3301      	adds	r3, #1
 802452e:	011a      	lsls	r2, r3, #4
 8024530:	019b      	lsls	r3, r3, #6
 8024532:	9202      	str	r2, [sp, #8]
 8024534:	9308      	str	r3, [sp, #32]
 8024536:	9b07      	ldr	r3, [sp, #28]
 8024538:	2b00      	cmp	r3, #0
 802453a:	f2c0 8145 	blt.w	80247c8 <st_int8_to16_dual+0x2c8>
 802453e:	9b02      	ldr	r3, [sp, #8]
 8024540:	4655      	mov	r5, sl
 8024542:	18c4      	adds	r4, r0, r3
 8024544:	4643      	mov	r3, r8
 8024546:	682e      	ldr	r6, [r5, #0]
 8024548:	3010      	adds	r0, #16
 802454a:	f850 1c10 	ldr.w	r1, [r0, #-16]
 802454e:	3510      	adds	r5, #16
 8024550:	fa2f f286 	sxtb16	r2, r6
 8024554:	ea4f 2c36 	mov.w	ip, r6, ror #8
 8024558:	3340      	adds	r3, #64	; 0x40
 802455a:	fa2f fc8c 	sxtb16	ip, ip
 802455e:	ea0c 0609 	and.w	r6, ip, r9
 8024562:	ea4f 2731 	mov.w	r7, r1, ror #8
 8024566:	fa2f f181 	sxtb16	r1, r1
 802456a:	ea46 4612 	orr.w	r6, r6, r2, lsr #16
 802456e:	fa1f fe81 	uxth.w	lr, r1
 8024572:	fa2f f787 	sxtb16	r7, r7
 8024576:	b292      	uxth	r2, r2
 8024578:	ea07 0b09 	and.w	fp, r7, r9
 802457c:	ea4e 4707 	orr.w	r7, lr, r7, lsl #16
 8024580:	f843 6c34 	str.w	r6, [r3, #-52]
 8024584:	ea4b 4111 	orr.w	r1, fp, r1, lsr #16
 8024588:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 802458c:	f843 7c40 	str.w	r7, [r3, #-64]
 8024590:	f843 1c38 	str.w	r1, [r3, #-56]
 8024594:	f843 2c3c 	str.w	r2, [r3, #-60]
 8024598:	f855 6c0c 	ldr.w	r6, [r5, #-12]
 802459c:	f850 1c0c 	ldr.w	r1, [r0, #-12]
 80245a0:	fa2f f286 	sxtb16	r2, r6
 80245a4:	ea4f 2c36 	mov.w	ip, r6, ror #8
 80245a8:	fa2f fc8c 	sxtb16	ip, ip
 80245ac:	ea0c 0609 	and.w	r6, ip, r9
 80245b0:	ea4f 2731 	mov.w	r7, r1, ror #8
 80245b4:	fa2f f181 	sxtb16	r1, r1
 80245b8:	ea46 4612 	orr.w	r6, r6, r2, lsr #16
 80245bc:	fa1f fe81 	uxth.w	lr, r1
 80245c0:	fa2f f787 	sxtb16	r7, r7
 80245c4:	b292      	uxth	r2, r2
 80245c6:	ea07 0b09 	and.w	fp, r7, r9
 80245ca:	ea4e 4707 	orr.w	r7, lr, r7, lsl #16
 80245ce:	f843 6c24 	str.w	r6, [r3, #-36]
 80245d2:	ea4b 4111 	orr.w	r1, fp, r1, lsr #16
 80245d6:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80245da:	f843 7c30 	str.w	r7, [r3, #-48]
 80245de:	f843 1c28 	str.w	r1, [r3, #-40]
 80245e2:	f843 2c2c 	str.w	r2, [r3, #-44]
 80245e6:	f855 6c08 	ldr.w	r6, [r5, #-8]
 80245ea:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80245ee:	fa2f f286 	sxtb16	r2, r6
 80245f2:	ea4f 2c36 	mov.w	ip, r6, ror #8
 80245f6:	fa2f fc8c 	sxtb16	ip, ip
 80245fa:	ea0c 0609 	and.w	r6, ip, r9
 80245fe:	ea4f 2731 	mov.w	r7, r1, ror #8
 8024602:	fa2f f181 	sxtb16	r1, r1
 8024606:	ea46 4612 	orr.w	r6, r6, r2, lsr #16
 802460a:	fa1f fe81 	uxth.w	lr, r1
 802460e:	fa2f f787 	sxtb16	r7, r7
 8024612:	b292      	uxth	r2, r2
 8024614:	ea07 0b09 	and.w	fp, r7, r9
 8024618:	ea4e 4707 	orr.w	r7, lr, r7, lsl #16
 802461c:	f843 6c14 	str.w	r6, [r3, #-20]
 8024620:	ea4b 4111 	orr.w	r1, fp, r1, lsr #16
 8024624:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8024628:	f843 7c20 	str.w	r7, [r3, #-32]
 802462c:	f843 1c18 	str.w	r1, [r3, #-24]
 8024630:	f843 2c1c 	str.w	r2, [r3, #-28]
 8024634:	f855 6c04 	ldr.w	r6, [r5, #-4]
 8024638:	f850 1c04 	ldr.w	r1, [r0, #-4]
 802463c:	4284      	cmp	r4, r0
 802463e:	fa2f f286 	sxtb16	r2, r6
 8024642:	ea4f 2c36 	mov.w	ip, r6, ror #8
 8024646:	fa2f fc8c 	sxtb16	ip, ip
 802464a:	ea0c 0609 	and.w	r6, ip, r9
 802464e:	ea4f 2731 	mov.w	r7, r1, ror #8
 8024652:	fa2f f181 	sxtb16	r1, r1
 8024656:	fa2f f787 	sxtb16	r7, r7
 802465a:	fa1f fe81 	uxth.w	lr, r1
 802465e:	ea07 0b09 	and.w	fp, r7, r9
 8024662:	ea46 4612 	orr.w	r6, r6, r2, lsr #16
 8024666:	b292      	uxth	r2, r2
 8024668:	ea4b 4111 	orr.w	r1, fp, r1, lsr #16
 802466c:	f843 6c04 	str.w	r6, [r3, #-4]
 8024670:	ea4e 4707 	orr.w	r7, lr, r7, lsl #16
 8024674:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8024678:	f843 1c08 	str.w	r1, [r3, #-8]
 802467c:	f843 7c10 	str.w	r7, [r3, #-16]
 8024680:	f843 2c0c 	str.w	r2, [r3, #-12]
 8024684:	f47f af5f 	bne.w	8024546 <st_int8_to16_dual+0x46>
 8024688:	9b08      	ldr	r3, [sp, #32]
 802468a:	4498      	add	r8, r3
 802468c:	9b02      	ldr	r3, [sp, #8]
 802468e:	449a      	add	sl, r3
 8024690:	469c      	mov	ip, r3
 8024692:	9b06      	ldr	r3, [sp, #24]
 8024694:	4563      	cmp	r3, ip
 8024696:	db3f      	blt.n	8024718 <st_int8_to16_dual+0x218>
 8024698:	eba3 030c 	sub.w	r3, r3, ip
 802469c:	4657      	mov	r7, sl
 802469e:	4645      	mov	r5, r8
 80246a0:	089b      	lsrs	r3, r3, #2
 80246a2:	9303      	str	r3, [sp, #12]
 80246a4:	3301      	adds	r3, #1
 80246a6:	9304      	str	r3, [sp, #16]
 80246a8:	009b      	lsls	r3, r3, #2
 80246aa:	eb04 0e03 	add.w	lr, r4, r3
 80246ae:	9305      	str	r3, [sp, #20]
 80246b0:	f854 2b04 	ldr.w	r2, [r4], #4
 80246b4:	3510      	adds	r5, #16
 80246b6:	f857 3b04 	ldr.w	r3, [r7], #4
 80246ba:	ea4f 2032 	mov.w	r0, r2, ror #8
 80246be:	4574      	cmp	r4, lr
 80246c0:	fa2f f080 	sxtb16	r0, r0
 80246c4:	ea00 0609 	and.w	r6, r0, r9
 80246c8:	ea4f 2133 	mov.w	r1, r3, ror #8
 80246cc:	fa2f f282 	sxtb16	r2, r2
 80246d0:	fa2f f181 	sxtb16	r1, r1
 80246d4:	fa1f fb82 	uxth.w	fp, r2
 80246d8:	ea46 4212 	orr.w	r2, r6, r2, lsr #16
 80246dc:	ea01 0609 	and.w	r6, r1, r9
 80246e0:	fa2f f383 	sxtb16	r3, r3
 80246e4:	ea46 4613 	orr.w	r6, r6, r3, lsr #16
 80246e8:	f845 2c08 	str.w	r2, [r5, #-8]
 80246ec:	b29b      	uxth	r3, r3
 80246ee:	ea4b 4000 	orr.w	r0, fp, r0, lsl #16
 80246f2:	f845 6c04 	str.w	r6, [r5, #-4]
 80246f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80246fa:	f845 0c10 	str.w	r0, [r5, #-16]
 80246fe:	f845 3c0c 	str.w	r3, [r5, #-12]
 8024702:	d1d5      	bne.n	80246b0 <st_int8_to16_dual+0x1b0>
 8024704:	9b04      	ldr	r3, [sp, #16]
 8024706:	f10c 0c04 	add.w	ip, ip, #4
 802470a:	eb08 1803 	add.w	r8, r8, r3, lsl #4
 802470e:	9b05      	ldr	r3, [sp, #20]
 8024710:	449a      	add	sl, r3
 8024712:	9b03      	ldr	r3, [sp, #12]
 8024714:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
 8024718:	9b00      	ldr	r3, [sp, #0]
 802471a:	4563      	cmp	r3, ip
 802471c:	dd14      	ble.n	8024748 <st_int8_to16_dual+0x248>
 802471e:	eba3 0c0c 	sub.w	ip, r3, ip
 8024722:	4652      	mov	r2, sl
 8024724:	f108 0304 	add.w	r3, r8, #4
 8024728:	eb04 000c 	add.w	r0, r4, ip
 802472c:	f914 1b01 	ldrsb.w	r1, [r4], #1
 8024730:	3304      	adds	r3, #4
 8024732:	f823 1c08 	strh.w	r1, [r3, #-8]
 8024736:	4284      	cmp	r4, r0
 8024738:	f912 1b01 	ldrsb.w	r1, [r2], #1
 802473c:	f823 1c06 	strh.w	r1, [r3, #-6]
 8024740:	d1f4      	bne.n	802472c <st_int8_to16_dual+0x22c>
 8024742:	44e2      	add	sl, ip
 8024744:	eb08 088c 	add.w	r8, r8, ip, lsl #2
 8024748:	9b01      	ldr	r3, [sp, #4]
 802474a:	9a00      	ldr	r2, [sp, #0]
 802474c:	3b01      	subs	r3, #1
 802474e:	18a0      	adds	r0, r4, r2
 8024750:	4492      	add	sl, r2
 8024752:	b29b      	uxth	r3, r3
 8024754:	9301      	str	r3, [sp, #4]
 8024756:	2b00      	cmp	r3, #0
 8024758:	f47f aeed 	bne.w	8024536 <st_int8_to16_dual+0x36>
 802475c:	46c2      	mov	sl, r8
 802475e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024760:	07db      	lsls	r3, r3, #31
 8024762:	d52e      	bpl.n	80247c2 <st_int8_to16_dual+0x2c2>
 8024764:	9b00      	ldr	r3, [sp, #0]
 8024766:	3b04      	subs	r3, #4
 8024768:	d432      	bmi.n	80247d0 <st_int8_to16_dual+0x2d0>
 802476a:	089b      	lsrs	r3, r3, #2
 802476c:	4605      	mov	r5, r0
 802476e:	4f1a      	ldr	r7, [pc, #104]	; (80247d8 <st_int8_to16_dual+0x2d8>)
 8024770:	1c5e      	adds	r6, r3, #1
 8024772:	eb0a 04c6 	add.w	r4, sl, r6, lsl #3
 8024776:	f855 3b04 	ldr.w	r3, [r5], #4
 802477a:	f10a 0a08 	add.w	sl, sl, #8
 802477e:	fa2f fc83 	sxtb16	ip, r3
 8024782:	ea4f 2333 	mov.w	r3, r3, ror #8
 8024786:	fa1f f18c 	uxth.w	r1, ip
 802478a:	fa2f f383 	sxtb16	r3, r3
 802478e:	ea03 0207 	and.w	r2, r3, r7
 8024792:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8024796:	ea42 421c 	orr.w	r2, r2, ip, lsr #16
 802479a:	f84a 3c08 	str.w	r3, [sl, #-8]
 802479e:	f84a 2c04 	str.w	r2, [sl, #-4]
 80247a2:	4554      	cmp	r4, sl
 80247a4:	d1e7      	bne.n	8024776 <st_int8_to16_dual+0x276>
 80247a6:	00b3      	lsls	r3, r6, #2
 80247a8:	4418      	add	r0, r3
 80247aa:	9a00      	ldr	r2, [sp, #0]
 80247ac:	429a      	cmp	r2, r3
 80247ae:	dd08      	ble.n	80247c2 <st_int8_to16_dual+0x2c2>
 80247b0:	1ad3      	subs	r3, r2, r3
 80247b2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80247b6:	f910 2b01 	ldrsb.w	r2, [r0], #1
 80247ba:	f824 2b02 	strh.w	r2, [r4], #2
 80247be:	429c      	cmp	r4, r3
 80247c0:	d1f9      	bne.n	80247b6 <st_int8_to16_dual+0x2b6>
 80247c2:	b00b      	add	sp, #44	; 0x2c
 80247c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80247c8:	4604      	mov	r4, r0
 80247ca:	f04f 0c00 	mov.w	ip, #0
 80247ce:	e760      	b.n	8024692 <st_int8_to16_dual+0x192>
 80247d0:	4654      	mov	r4, sl
 80247d2:	2300      	movs	r3, #0
 80247d4:	e7e9      	b.n	80247aa <st_int8_to16_dual+0x2aa>
 80247d6:	bf00      	nop
 80247d8:	ffff0000 	.word	0xffff0000

080247dc <st_sssa8_ch_fullW_prefetch>:
 80247dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80247e0:	b087      	sub	sp, #28
 80247e2:	eb00 0c02 	add.w	ip, r0, r2
 80247e6:	9105      	str	r1, [sp, #20]
 80247e8:	1049      	asrs	r1, r1, #1
 80247ea:	9100      	str	r1, [sp, #0]
 80247ec:	f000 80d7 	beq.w	802499e <st_sssa8_ch_fullW_prefetch+0x1c2>
 80247f0:	f1a2 0110 	sub.w	r1, r2, #16
 80247f4:	1ed4      	subs	r4, r2, #3
 80247f6:	0909      	lsrs	r1, r1, #4
 80247f8:	9402      	str	r4, [sp, #8]
 80247fa:	1f14      	subs	r4, r2, #4
 80247fc:	3101      	adds	r1, #1
 80247fe:	9404      	str	r4, [sp, #16]
 8024800:	ea4f 1a01 	mov.w	sl, r1, lsl #4
 8024804:	0189      	lsls	r1, r1, #6
 8024806:	9103      	str	r1, [sp, #12]
 8024808:	2a0f      	cmp	r2, #15
 802480a:	f340 80dd 	ble.w	80249c8 <st_sssa8_ch_fullW_prefetch+0x1ec>
 802480e:	eb00 040a 	add.w	r4, r0, sl
 8024812:	4665      	mov	r5, ip
 8024814:	4619      	mov	r1, r3
 8024816:	6807      	ldr	r7, [r0, #0]
 8024818:	3010      	adds	r0, #16
 802481a:	682e      	ldr	r6, [r5, #0]
 802481c:	3140      	adds	r1, #64	; 0x40
 802481e:	ea4f 2e37 	mov.w	lr, r7, ror #8
 8024822:	3510      	adds	r5, #16
 8024824:	fa2f f787 	sxtb16	r7, r7
 8024828:	fa2f fe8e 	sxtb16	lr, lr
 802482c:	f841 7c40 	str.w	r7, [r1, #-64]
 8024830:	ea4f 2736 	mov.w	r7, r6, ror #8
 8024834:	f841 ec3c 	str.w	lr, [r1, #-60]
 8024838:	fa2f f787 	sxtb16	r7, r7
 802483c:	fa2f f686 	sxtb16	r6, r6
 8024840:	f841 7c34 	str.w	r7, [r1, #-52]
 8024844:	f841 6c38 	str.w	r6, [r1, #-56]
 8024848:	f850 7c0c 	ldr.w	r7, [r0, #-12]
 802484c:	f855 6c0c 	ldr.w	r6, [r5, #-12]
 8024850:	ea4f 2e37 	mov.w	lr, r7, ror #8
 8024854:	fa2f f787 	sxtb16	r7, r7
 8024858:	fa2f fe8e 	sxtb16	lr, lr
 802485c:	f841 7c30 	str.w	r7, [r1, #-48]
 8024860:	ea4f 2736 	mov.w	r7, r6, ror #8
 8024864:	f841 ec2c 	str.w	lr, [r1, #-44]
 8024868:	fa2f f787 	sxtb16	r7, r7
 802486c:	fa2f f686 	sxtb16	r6, r6
 8024870:	f841 7c24 	str.w	r7, [r1, #-36]
 8024874:	f841 6c28 	str.w	r6, [r1, #-40]
 8024878:	f850 7c08 	ldr.w	r7, [r0, #-8]
 802487c:	f855 6c08 	ldr.w	r6, [r5, #-8]
 8024880:	ea4f 2e37 	mov.w	lr, r7, ror #8
 8024884:	fa2f f787 	sxtb16	r7, r7
 8024888:	fa2f fe8e 	sxtb16	lr, lr
 802488c:	f841 7c20 	str.w	r7, [r1, #-32]
 8024890:	ea4f 2736 	mov.w	r7, r6, ror #8
 8024894:	f841 ec1c 	str.w	lr, [r1, #-28]
 8024898:	fa2f f787 	sxtb16	r7, r7
 802489c:	fa2f f686 	sxtb16	r6, r6
 80248a0:	f841 7c14 	str.w	r7, [r1, #-20]
 80248a4:	f841 6c18 	str.w	r6, [r1, #-24]
 80248a8:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80248ac:	4284      	cmp	r4, r0
 80248ae:	f855 6c04 	ldr.w	r6, [r5, #-4]
 80248b2:	ea4f 2e37 	mov.w	lr, r7, ror #8
 80248b6:	fa2f f787 	sxtb16	r7, r7
 80248ba:	fa2f fe8e 	sxtb16	lr, lr
 80248be:	f841 7c10 	str.w	r7, [r1, #-16]
 80248c2:	ea4f 2736 	mov.w	r7, r6, ror #8
 80248c6:	f841 ec0c 	str.w	lr, [r1, #-12]
 80248ca:	fa2f f787 	sxtb16	r7, r7
 80248ce:	fa2f f686 	sxtb16	r6, r6
 80248d2:	f841 7c04 	str.w	r7, [r1, #-4]
 80248d6:	f841 6c08 	str.w	r6, [r1, #-8]
 80248da:	d19c      	bne.n	8024816 <st_sssa8_ch_fullW_prefetch+0x3a>
 80248dc:	9903      	ldr	r1, [sp, #12]
 80248de:	44d4      	add	ip, sl
 80248e0:	46d6      	mov	lr, sl
 80248e2:	440b      	add	r3, r1
 80248e4:	9902      	ldr	r1, [sp, #8]
 80248e6:	458e      	cmp	lr, r1
 80248e8:	da30      	bge.n	802494c <st_sssa8_ch_fullW_prefetch+0x170>
 80248ea:	9904      	ldr	r1, [sp, #16]
 80248ec:	4667      	mov	r7, ip
 80248ee:	eba1 090e 	sub.w	r9, r1, lr
 80248f2:	4619      	mov	r1, r3
 80248f4:	ea4f 0999 	mov.w	r9, r9, lsr #2
 80248f8:	f109 0b01 	add.w	fp, r9, #1
 80248fc:	ea4f 008b 	mov.w	r0, fp, lsl #2
 8024900:	eb04 0800 	add.w	r8, r4, r0
 8024904:	9001      	str	r0, [sp, #4]
 8024906:	f854 5b04 	ldr.w	r5, [r4], #4
 802490a:	3110      	adds	r1, #16
 802490c:	f857 0b04 	ldr.w	r0, [r7], #4
 8024910:	4544      	cmp	r4, r8
 8024912:	ea4f 2635 	mov.w	r6, r5, ror #8
 8024916:	fa2f f585 	sxtb16	r5, r5
 802491a:	fa2f f686 	sxtb16	r6, r6
 802491e:	f841 5c10 	str.w	r5, [r1, #-16]
 8024922:	ea4f 2530 	mov.w	r5, r0, ror #8
 8024926:	f841 6c0c 	str.w	r6, [r1, #-12]
 802492a:	fa2f f585 	sxtb16	r5, r5
 802492e:	fa2f f080 	sxtb16	r0, r0
 8024932:	f841 5c04 	str.w	r5, [r1, #-4]
 8024936:	f841 0c08 	str.w	r0, [r1, #-8]
 802493a:	d1e4      	bne.n	8024906 <st_sssa8_ch_fullW_prefetch+0x12a>
 802493c:	f10e 0e04 	add.w	lr, lr, #4
 8024940:	9901      	ldr	r1, [sp, #4]
 8024942:	eb03 130b 	add.w	r3, r3, fp, lsl #4
 8024946:	448c      	add	ip, r1
 8024948:	eb0e 0e89 	add.w	lr, lr, r9, lsl #2
 802494c:	4572      	cmp	r2, lr
 802494e:	dd1f      	ble.n	8024990 <st_sssa8_ch_fullW_prefetch+0x1b4>
 8024950:	f994 0000 	ldrsb.w	r0, [r4]
 8024954:	f10e 0101 	add.w	r1, lr, #1
 8024958:	8018      	strh	r0, [r3, #0]
 802495a:	428a      	cmp	r2, r1
 802495c:	f99c 0000 	ldrsb.w	r0, [ip]
 8024960:	8058      	strh	r0, [r3, #2]
 8024962:	dd2c      	ble.n	80249be <st_sssa8_ch_fullW_prefetch+0x1e2>
 8024964:	f994 1001 	ldrsb.w	r1, [r4, #1]
 8024968:	f10e 0e02 	add.w	lr, lr, #2
 802496c:	8099      	strh	r1, [r3, #4]
 802496e:	4572      	cmp	r2, lr
 8024970:	f99c 1001 	ldrsb.w	r1, [ip, #1]
 8024974:	80d9      	strh	r1, [r3, #6]
 8024976:	dd2b      	ble.n	80249d0 <st_sssa8_ch_fullW_prefetch+0x1f4>
 8024978:	f994 1002 	ldrsb.w	r1, [r4, #2]
 802497c:	f10c 0c03 	add.w	ip, ip, #3
 8024980:	3403      	adds	r4, #3
 8024982:	330c      	adds	r3, #12
 8024984:	f823 1c04 	strh.w	r1, [r3, #-4]
 8024988:	f91c 1c01 	ldrsb.w	r1, [ip, #-1]
 802498c:	f823 1c02 	strh.w	r1, [r3, #-2]
 8024990:	9900      	ldr	r1, [sp, #0]
 8024992:	18a0      	adds	r0, r4, r2
 8024994:	4494      	add	ip, r2
 8024996:	3901      	subs	r1, #1
 8024998:	9100      	str	r1, [sp, #0]
 802499a:	f47f af35 	bne.w	8024808 <st_sssa8_ch_fullW_prefetch+0x2c>
 802499e:	9905      	ldr	r1, [sp, #20]
 80249a0:	07c9      	lsls	r1, r1, #31
 80249a2:	d509      	bpl.n	80249b8 <st_sssa8_ch_fullW_prefetch+0x1dc>
 80249a4:	2a00      	cmp	r2, #0
 80249a6:	dd07      	ble.n	80249b8 <st_sssa8_ch_fullW_prefetch+0x1dc>
 80249a8:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80249ac:	f910 1b01 	ldrsb.w	r1, [r0], #1
 80249b0:	f823 1b02 	strh.w	r1, [r3], #2
 80249b4:	4293      	cmp	r3, r2
 80249b6:	d1f9      	bne.n	80249ac <st_sssa8_ch_fullW_prefetch+0x1d0>
 80249b8:	b007      	add	sp, #28
 80249ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80249be:	3401      	adds	r4, #1
 80249c0:	f10c 0c01 	add.w	ip, ip, #1
 80249c4:	3304      	adds	r3, #4
 80249c6:	e7e3      	b.n	8024990 <st_sssa8_ch_fullW_prefetch+0x1b4>
 80249c8:	4604      	mov	r4, r0
 80249ca:	f04f 0e00 	mov.w	lr, #0
 80249ce:	e789      	b.n	80248e4 <st_sssa8_ch_fullW_prefetch+0x108>
 80249d0:	3402      	adds	r4, #2
 80249d2:	f10c 0c02 	add.w	ip, ip, #2
 80249d6:	3308      	adds	r3, #8
 80249d8:	e7da      	b.n	8024990 <st_sssa8_ch_fullW_prefetch+0x1b4>
 80249da:	bf00      	nop

080249dc <st_sssa8_ch_nn_mat_mult_nt_t>:
 80249dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80249e0:	b0af      	sub	sp, #188	; 0xbc
 80249e2:	901f      	str	r0, [sp, #124]	; 0x7c
 80249e4:	9220      	str	r2, [sp, #128]	; 0x80
 80249e6:	9840      	ldr	r0, [sp, #256]	; 0x100
 80249e8:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 80249ea:	9125      	str	r1, [sp, #148]	; 0x94
 80249ec:	2800      	cmp	r0, #0
 80249ee:	bf18      	it	ne
 80249f0:	4602      	movne	r2, r0
 80249f2:	932a      	str	r3, [sp, #168]	; 0xa8
 80249f4:	923f      	str	r2, [sp, #252]	; 0xfc
 80249f6:	e9dd 2b3b 	ldrd	r2, fp, [sp, #236]	; 0xec
 80249fa:	2a01      	cmp	r2, #1
 80249fc:	f340 822c 	ble.w	8024e58 <st_sssa8_ch_nn_mat_mult_nt_t+0x47c>
 8024a00:	f00b 0403 	and.w	r4, fp, #3
 8024a04:	3a02      	subs	r2, #2
 8024a06:	ea4f 00ab 	mov.w	r0, fp, asr #2
 8024a0a:	461e      	mov	r6, r3
 8024a0c:	9428      	str	r4, [sp, #160]	; 0xa0
 8024a0e:	f1ab 040f 	sub.w	r4, fp, #15
 8024a12:	0852      	lsrs	r2, r2, #1
 8024a14:	f1ab 0310 	sub.w	r3, fp, #16
 8024a18:	9410      	str	r4, [sp, #64]	; 0x40
 8024a1a:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8024a1c:	091b      	lsrs	r3, r3, #4
 8024a1e:	922c      	str	r2, [sp, #176]	; 0xb0
 8024a20:	00d2      	lsls	r2, r2, #3
 8024a22:	f004 0401 	and.w	r4, r4, #1
 8024a26:	3301      	adds	r3, #1
 8024a28:	320c      	adds	r2, #12
 8024a2a:	9d3a      	ldr	r5, [sp, #232]	; 0xe8
 8024a2c:	9421      	str	r4, [sp, #132]	; 0x84
 8024a2e:	9c39      	ldr	r4, [sp, #228]	; 0xe4
 8024a30:	106d      	asrs	r5, r5, #1
 8024a32:	9223      	str	r2, [sp, #140]	; 0x8c
 8024a34:	3402      	adds	r4, #2
 8024a36:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 8024a38:	9027      	str	r0, [sp, #156]	; 0x9c
 8024a3a:	9417      	str	r4, [sp, #92]	; 0x5c
 8024a3c:	0084      	lsls	r4, r0, #2
 8024a3e:	0052      	lsls	r2, r2, #1
 8024a40:	9522      	str	r5, [sp, #136]	; 0x88
 8024a42:	942d      	str	r4, [sp, #180]	; 0xb4
 8024a44:	445c      	add	r4, fp
 8024a46:	9212      	str	r2, [sp, #72]	; 0x48
 8024a48:	942b      	str	r4, [sp, #172]	; 0xac
 8024a4a:	011c      	lsls	r4, r3, #4
 8024a4c:	019b      	lsls	r3, r3, #6
 8024a4e:	9616      	str	r6, [sp, #88]	; 0x58
 8024a50:	9403      	str	r4, [sp, #12]
 8024a52:	931e      	str	r3, [sp, #120]	; 0x78
 8024a54:	fb02 f305 	mul.w	r3, r2, r5
 8024a58:	911a      	str	r1, [sp, #104]	; 0x68
 8024a5a:	9324      	str	r3, [sp, #144]	; 0x90
 8024a5c:	0103      	lsls	r3, r0, #4
 8024a5e:	9329      	str	r3, [sp, #164]	; 0xa4
 8024a60:	ea4f 034b 	mov.w	r3, fp, lsl #1
 8024a64:	931d      	str	r3, [sp, #116]	; 0x74
 8024a66:	2304      	movs	r3, #4
 8024a68:	9315      	str	r3, [sp, #84]	; 0x54
 8024a6a:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8024a6e:	9326      	str	r3, [sp, #152]	; 0x98
 8024a70:	f1ab 0303 	sub.w	r3, fp, #3
 8024a74:	9311      	str	r3, [sp, #68]	; 0x44
 8024a76:	f1ab 0304 	sub.w	r3, fp, #4
 8024a7a:	9314      	str	r3, [sp, #80]	; 0x50
 8024a7c:	f10b 0301 	add.w	r3, fp, #1
 8024a80:	9309      	str	r3, [sp, #36]	; 0x24
 8024a82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8024a84:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 8024a86:	993e      	ldr	r1, [sp, #248]	; 0xf8
 8024a88:	441a      	add	r2, r3
 8024a8a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8024a8c:	4419      	add	r1, r3
 8024a8e:	921c      	str	r2, [sp, #112]	; 0x70
 8024a90:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8024a94:	911b      	str	r1, [sp, #108]	; 0x6c
 8024a96:	920c      	str	r2, [sp, #48]	; 0x30
 8024a98:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8024a9c:	f930 4c02 	ldrsh.w	r4, [r0, #-2]
 8024aa0:	920e      	str	r2, [sp, #56]	; 0x38
 8024aa2:	f9b0 2000 	ldrsh.w	r2, [r0]
 8024aa6:	940a      	str	r4, [sp, #40]	; 0x28
 8024aa8:	920b      	str	r2, [sp, #44]	; 0x2c
 8024aaa:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 8024aac:	4611      	mov	r1, r2
 8024aae:	58ca      	ldr	r2, [r1, r3]
 8024ab0:	920d      	str	r2, [sp, #52]	; 0x34
 8024ab2:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 8024ab4:	58d3      	ldr	r3, [r2, r3]
 8024ab6:	930f      	str	r3, [sp, #60]	; 0x3c
 8024ab8:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8024aba:	2b00      	cmp	r3, #0
 8024abc:	f000 83a4 	beq.w	8025208 <st_sssa8_ch_nn_mat_mult_nt_t+0x82c>
 8024ac0:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 8024ac2:	2b00      	cmp	r3, #0
 8024ac4:	f040 834e 	bne.w	8025164 <st_sssa8_ch_nn_mat_mult_nt_t+0x788>
 8024ac8:	4619      	mov	r1, r3
 8024aca:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8024acc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024ace:	1910      	adds	r0, r2, r4
 8024ad0:	5912      	ldr	r2, [r2, r4]
 8024ad2:	f850 0c04 	ldr.w	r0, [r0, #-4]
 8024ad6:	4413      	add	r3, r2
 8024ad8:	9308      	str	r3, [sp, #32]
 8024ada:	180b      	adds	r3, r1, r0
 8024adc:	9307      	str	r3, [sp, #28]
 8024ade:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8024ae0:	2b00      	cmp	r3, #0
 8024ae2:	f000 83d9 	beq.w	8025298 <st_sssa8_ch_nn_mat_mult_nt_t+0x8bc>
 8024ae6:	9302      	str	r3, [sp, #8]
 8024ae8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8024aea:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8024aec:	9301      	str	r3, [sp, #4]
 8024aee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024af0:	991e      	ldr	r1, [sp, #120]	; 0x78
 8024af2:	f1c3 0301 	rsb	r3, r3, #1
 8024af6:	f8dd a07c 	ldr.w	sl, [sp, #124]	; 0x7c
 8024afa:	440a      	add	r2, r1
 8024afc:	f8dd b0f0 	ldr.w	fp, [sp, #240]	; 0xf0
 8024b00:	9318      	str	r3, [sp, #96]	; 0x60
 8024b02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024b04:	9213      	str	r2, [sp, #76]	; 0x4c
 8024b06:	f1c3 0301 	rsb	r3, r3, #1
 8024b0a:	9319      	str	r3, [sp, #100]	; 0x64
 8024b0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024b0e:	2b00      	cmp	r3, #0
 8024b10:	f340 8229 	ble.w	8024f66 <st_sssa8_ch_nn_mat_mult_nt_t+0x58a>
 8024b14:	9b03      	ldr	r3, [sp, #12]
 8024b16:	eb0a 090b 	add.w	r9, sl, fp
 8024b1a:	9808      	ldr	r0, [sp, #32]
 8024b1c:	4453      	add	r3, sl
 8024b1e:	9e07      	ldr	r6, [sp, #28]
 8024b20:	f8dd 80fc 	ldr.w	r8, [sp, #252]	; 0xfc
 8024b24:	9300      	str	r3, [sp, #0]
 8024b26:	4634      	mov	r4, r6
 8024b28:	4603      	mov	r3, r0
 8024b2a:	f8da 5000 	ldr.w	r5, [sl]
 8024b2e:	f8d8 2000 	ldr.w	r2, [r8]
 8024b32:	fa2f f185 	sxtb16	r1, r5
 8024b36:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8024b3a:	fa2f f595 	sxtb16	r5, r5, ror #8
 8024b3e:	f8d8 e008 	ldr.w	lr, [r8, #8]
 8024b42:	f8d8 700c 	ldr.w	r7, [r8, #12]
 8024b46:	fb21 6602 	smlad	r6, r1, r2, r6
 8024b4a:	fb25 660c 	smlad	r6, r5, ip, r6
 8024b4e:	fb21 000e 	smlad	r0, r1, lr, r0
 8024b52:	fb25 0007 	smlad	r0, r5, r7, r0
 8024b56:	f85a 100b 	ldr.w	r1, [sl, fp]
 8024b5a:	fa2f f581 	sxtb16	r5, r1
 8024b5e:	fa2f f191 	sxtb16	r1, r1, ror #8
 8024b62:	fb25 4202 	smlad	r2, r5, r2, r4
 8024b66:	fb25 330e 	smlad	r3, r5, lr, r3
 8024b6a:	fb21 220c 	smlad	r2, r1, ip, r2
 8024b6e:	f8d8 c010 	ldr.w	ip, [r8, #16]
 8024b72:	f8d8 4014 	ldr.w	r4, [r8, #20]
 8024b76:	fb21 3707 	smlad	r7, r1, r7, r3
 8024b7a:	f8da 3004 	ldr.w	r3, [sl, #4]
 8024b7e:	f8d8 e018 	ldr.w	lr, [r8, #24]
 8024b82:	fa2f f583 	sxtb16	r5, r3
 8024b86:	f8d8 101c 	ldr.w	r1, [r8, #28]
 8024b8a:	fa2f f393 	sxtb16	r3, r3, ror #8
 8024b8e:	fb25 660c 	smlad	r6, r5, ip, r6
 8024b92:	fb23 6604 	smlad	r6, r3, r4, r6
 8024b96:	fb25 050e 	smlad	r5, r5, lr, r0
 8024b9a:	fb23 5501 	smlad	r5, r3, r1, r5
 8024b9e:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8024ba2:	fa2f f380 	sxtb16	r3, r0
 8024ba6:	fa2f f090 	sxtb16	r0, r0, ror #8
 8024baa:	fb23 2c0c 	smlad	ip, r3, ip, r2
 8024bae:	fb23 770e 	smlad	r7, r3, lr, r7
 8024bb2:	fb20 cc04 	smlad	ip, r0, r4, ip
 8024bb6:	f8d8 4020 	ldr.w	r4, [r8, #32]
 8024bba:	f8d8 e024 	ldr.w	lr, [r8, #36]	; 0x24
 8024bbe:	fb20 7101 	smlad	r1, r0, r1, r7
 8024bc2:	f8da 2008 	ldr.w	r2, [sl, #8]
 8024bc6:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
 8024bca:	fa2f f382 	sxtb16	r3, r2
 8024bce:	f8d8 702c 	ldr.w	r7, [r8, #44]	; 0x2c
 8024bd2:	fa2f f292 	sxtb16	r2, r2, ror #8
 8024bd6:	fb23 6604 	smlad	r6, r3, r4, r6
 8024bda:	fb22 660e 	smlad	r6, r2, lr, r6
 8024bde:	fb23 5300 	smlad	r3, r3, r0, r5
 8024be2:	fb22 3207 	smlad	r2, r2, r7, r3
 8024be6:	f8d9 5008 	ldr.w	r5, [r9, #8]
 8024bea:	fa2f f985 	sxtb16	r9, r5
 8024bee:	fa2f f595 	sxtb16	r5, r5, ror #8
 8024bf2:	fb29 c404 	smlad	r4, r9, r4, ip
 8024bf6:	fb29 1100 	smlad	r1, r9, r0, r1
 8024bfa:	fb25 4e0e 	smlad	lr, r5, lr, r4
 8024bfe:	f8d8 c030 	ldr.w	ip, [r8, #48]	; 0x30
 8024c02:	f8d8 4034 	ldr.w	r4, [r8, #52]	; 0x34
 8024c06:	fb25 1707 	smlad	r7, r5, r7, r1
 8024c0a:	f8da 000c 	ldr.w	r0, [sl, #12]
 8024c0e:	f108 0840 	add.w	r8, r8, #64	; 0x40
 8024c12:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8024c16:	f10a 0a10 	add.w	sl, sl, #16
 8024c1a:	f858 5c04 	ldr.w	r5, [r8, #-4]
 8024c1e:	fa2f f380 	sxtb16	r3, r0
 8024c22:	fa2f f090 	sxtb16	r0, r0, ror #8
 8024c26:	fb23 660c 	smlad	r6, r3, ip, r6
 8024c2a:	fb20 6604 	smlad	r6, r0, r4, r6
 8024c2e:	fb23 2201 	smlad	r2, r3, r1, r2
 8024c32:	fb20 2005 	smlad	r0, r0, r5, r2
 8024c36:	eb0a 090b 	add.w	r9, sl, fp
 8024c3a:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8024c3e:	fa2f f283 	sxtb16	r2, r3
 8024c42:	fa2f f393 	sxtb16	r3, r3, ror #8
 8024c46:	fb22 ee0c 	smlad	lr, r2, ip, lr
 8024c4a:	fb22 7701 	smlad	r7, r2, r1, r7
 8024c4e:	fb23 e404 	smlad	r4, r3, r4, lr
 8024c52:	fb23 7305 	smlad	r3, r3, r5, r7
 8024c56:	9a00      	ldr	r2, [sp, #0]
 8024c58:	4592      	cmp	sl, r2
 8024c5a:	f47f af66 	bne.w	8024b2a <st_sssa8_ch_nn_mat_mult_nt_t+0x14e>
 8024c5e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8024c60:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8024c64:	9200      	str	r2, [sp, #0]
 8024c66:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8024c68:	4591      	cmp	r9, r2
 8024c6a:	da44      	bge.n	8024cf6 <st_sssa8_ch_nn_mat_mult_nt_t+0x31a>
 8024c6c:	9914      	ldr	r1, [sp, #80]	; 0x50
 8024c6e:	f8cd 9018 	str.w	r9, [sp, #24]
 8024c72:	eba1 0209 	sub.w	r2, r1, r9
 8024c76:	f8cd b0f0 	str.w	fp, [sp, #240]	; 0xf0
 8024c7a:	9f00      	ldr	r7, [sp, #0]
 8024c7c:	468b      	mov	fp, r1
 8024c7e:	0892      	lsrs	r2, r2, #2
 8024c80:	9205      	str	r2, [sp, #20]
 8024c82:	3201      	adds	r2, #1
 8024c84:	9204      	str	r2, [sp, #16]
 8024c86:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 8024c8a:	4691      	mov	r9, r2
 8024c8c:	f85a 2b04 	ldr.w	r2, [sl], #4
 8024c90:	3710      	adds	r7, #16
 8024c92:	f857 5c10 	ldr.w	r5, [r7, #-16]
 8024c96:	f857 ec0c 	ldr.w	lr, [r7, #-12]
 8024c9a:	f857 8c08 	ldr.w	r8, [r7, #-8]
 8024c9e:	fa2f f182 	sxtb16	r1, r2
 8024ca2:	f857 cc04 	ldr.w	ip, [r7, #-4]
 8024ca6:	fa2f f292 	sxtb16	r2, r2, ror #8
 8024caa:	fb21 6605 	smlad	r6, r1, r5, r6
 8024cae:	fb22 660e 	smlad	r6, r2, lr, r6
 8024cb2:	fb21 0008 	smlad	r0, r1, r8, r0
 8024cb6:	fb22 000c 	smlad	r0, r2, ip, r0
 8024cba:	f85a 200b 	ldr.w	r2, [sl, fp]
 8024cbe:	fa2f f182 	sxtb16	r1, r2
 8024cc2:	fa2f f292 	sxtb16	r2, r2, ror #8
 8024cc6:	fb21 4405 	smlad	r4, r1, r5, r4
 8024cca:	fb21 3308 	smlad	r3, r1, r8, r3
 8024cce:	fb22 440e 	smlad	r4, r2, lr, r4
 8024cd2:	fb22 330c 	smlad	r3, r2, ip, r3
 8024cd6:	45ca      	cmp	sl, r9
 8024cd8:	d1d8      	bne.n	8024c8c <st_sssa8_ch_nn_mat_mult_nt_t+0x2b0>
 8024cda:	9a00      	ldr	r2, [sp, #0]
 8024cdc:	9904      	ldr	r1, [sp, #16]
 8024cde:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8024ce2:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8024ce6:	f8dd b0f0 	ldr.w	fp, [sp, #240]	; 0xf0
 8024cea:	f109 0904 	add.w	r9, r9, #4
 8024cee:	9200      	str	r2, [sp, #0]
 8024cf0:	9a05      	ldr	r2, [sp, #20]
 8024cf2:	eb09 0982 	add.w	r9, r9, r2, lsl #2
 8024cf6:	45cb      	cmp	fp, r9
 8024cf8:	eb0a 020b 	add.w	r2, sl, fp
 8024cfc:	f340 812f 	ble.w	8024f5e <st_sssa8_ch_nn_mat_mult_nt_t+0x582>
 8024d00:	9900      	ldr	r1, [sp, #0]
 8024d02:	f109 0201 	add.w	r2, r9, #1
 8024d06:	f99a c000 	ldrsb.w	ip, [sl]
 8024d0a:	f9b1 7000 	ldrsh.w	r7, [r1]
 8024d0e:	4593      	cmp	fp, r2
 8024d10:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8024d14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8024d16:	fb17 660c 	smlabb	r6, r7, ip, r6
 8024d1a:	fb15 000c 	smlabb	r0, r5, ip, r0
 8024d1e:	eb0a 0e01 	add.w	lr, sl, r1
 8024d22:	f91a 100b 	ldrsb.w	r1, [sl, fp]
 8024d26:	fb17 4401 	smlabb	r4, r7, r1, r4
 8024d2a:	fb15 3301 	smlabb	r3, r5, r1, r3
 8024d2e:	f340 8118 	ble.w	8024f62 <st_sssa8_ch_nn_mat_mult_nt_t+0x586>
 8024d32:	9a00      	ldr	r2, [sp, #0]
 8024d34:	f109 0902 	add.w	r9, r9, #2
 8024d38:	f99a 7001 	ldrsb.w	r7, [sl, #1]
 8024d3c:	f10a 0c02 	add.w	ip, sl, #2
 8024d40:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 8024d44:	45cb      	cmp	fp, r9
 8024d46:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 8024d4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024d4c:	fb15 6607 	smlabb	r6, r5, r7, r6
 8024d50:	fb11 0007 	smlabb	r0, r1, r7, r0
 8024d54:	4696      	mov	lr, r2
 8024d56:	f91a 2002 	ldrsb.w	r2, [sl, r2]
 8024d5a:	fb15 4402 	smlabb	r4, r5, r2, r4
 8024d5e:	eb0c 050b 	add.w	r5, ip, fp
 8024d62:	fb11 3302 	smlabb	r3, r1, r2, r3
 8024d66:	f340 8107 	ble.w	8024f78 <st_sssa8_ch_nn_mat_mult_nt_t+0x59c>
 8024d6a:	9a00      	ldr	r2, [sp, #0]
 8024d6c:	f10a 0703 	add.w	r7, sl, #3
 8024d70:	f91c 500b 	ldrsb.w	r5, [ip, fp]
 8024d74:	f9b2 1008 	ldrsh.w	r1, [r2, #8]
 8024d78:	f9b2 c00a 	ldrsh.w	ip, [r2, #10]
 8024d7c:	f99a 2002 	ldrsb.w	r2, [sl, #2]
 8024d80:	fb11 4405 	smlabb	r4, r1, r5, r4
 8024d84:	fb1c 3305 	smlabb	r3, ip, r5, r3
 8024d88:	eb07 0a0b 	add.w	sl, r7, fp
 8024d8c:	fb11 6602 	smlabb	r6, r1, r2, r6
 8024d90:	fb1c 0002 	smlabb	r0, ip, r2, r0
 8024d94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024d96:	2a00      	cmp	r2, #0
 8024d98:	f340 80c7 	ble.w	8024f2a <st_sssa8_ch_nn_mat_mult_nt_t+0x54e>
 8024d9c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8024d9e:	0076      	lsls	r6, r6, #1
 8024da0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8024da2:	0064      	lsls	r4, r4, #1
 8024da4:	fb56 7601 	smmla	r6, r6, r1, r7
 8024da8:	fb54 7401 	smmla	r4, r4, r1, r7
 8024dac:	4116      	asrs	r6, r2
 8024dae:	f306 0607 	ssat	r6, #8, r6
 8024db2:	9901      	ldr	r1, [sp, #4]
 8024db4:	4114      	asrs	r4, r2
 8024db6:	700e      	strb	r6, [r1, #0]
 8024db8:	f304 0407 	ssat	r4, #8, r4
 8024dbc:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 8024dbe:	548c      	strb	r4, [r1, r2]
 8024dc0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024dc2:	2a00      	cmp	r2, #0
 8024dc4:	f340 8096 	ble.w	8024ef4 <st_sssa8_ch_nn_mat_mult_nt_t+0x518>
 8024dc8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8024dca:	0040      	lsls	r0, r0, #1
 8024dcc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8024dce:	005b      	lsls	r3, r3, #1
 8024dd0:	fb50 5001 	smmla	r0, r0, r1, r5
 8024dd4:	fb53 5301 	smmla	r3, r3, r1, r5
 8024dd8:	4110      	asrs	r0, r2
 8024dda:	f300 0007 	ssat	r0, #8, r0
 8024dde:	9901      	ldr	r1, [sp, #4]
 8024de0:	4113      	asrs	r3, r2
 8024de2:	7048      	strb	r0, [r1, #1]
 8024de4:	f303 0307 	ssat	r3, #8, r3
 8024de8:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 8024dea:	188a      	adds	r2, r1, r2
 8024dec:	7053      	strb	r3, [r2, #1]
 8024dee:	460b      	mov	r3, r1
 8024df0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8024df2:	4413      	add	r3, r2
 8024df4:	9301      	str	r3, [sp, #4]
 8024df6:	9b02      	ldr	r3, [sp, #8]
 8024df8:	3b01      	subs	r3, #1
 8024dfa:	9302      	str	r3, [sp, #8]
 8024dfc:	f47f ae86 	bne.w	8024b0c <st_sssa8_ch_nn_mat_mult_nt_t+0x130>
 8024e00:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8024e02:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8024e04:	eb03 0b02 	add.w	fp, r3, r2
 8024e08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8024e0a:	2b00      	cmp	r3, #0
 8024e0c:	f040 80b6 	bne.w	8024f7c <st_sssa8_ch_nn_mat_mult_nt_t+0x5a0>
 8024e10:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8024e12:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8024e14:	4413      	add	r3, r2
 8024e16:	931a      	str	r3, [sp, #104]	; 0x68
 8024e18:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8024e1a:	3302      	adds	r3, #2
 8024e1c:	9316      	str	r3, [sp, #88]	; 0x58
 8024e1e:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8024e20:	b11b      	cbz	r3, 8024e2a <st_sssa8_ch_nn_mat_mult_nt_t+0x44e>
 8024e22:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 8024e24:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8024e26:	4413      	add	r3, r2
 8024e28:	933f      	str	r3, [sp, #252]	; 0xfc
 8024e2a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8024e2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8024e2e:	3204      	adds	r2, #4
 8024e30:	3308      	adds	r3, #8
 8024e32:	9217      	str	r2, [sp, #92]	; 0x5c
 8024e34:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8024e36:	9315      	str	r3, [sp, #84]	; 0x54
 8024e38:	429a      	cmp	r2, r3
 8024e3a:	f47f ae23 	bne.w	8024a84 <st_sssa8_ch_nn_mat_mult_nt_t+0xa8>
 8024e3e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8024e40:	9925      	ldr	r1, [sp, #148]	; 0x94
 8024e42:	3201      	adds	r2, #1
 8024e44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8024e46:	f8dd b0f0 	ldr.w	fp, [sp, #240]	; 0xf0
 8024e4a:	fb02 1303 	mla	r3, r2, r3, r1
 8024e4e:	9325      	str	r3, [sp, #148]	; 0x94
 8024e50:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024e52:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8024e56:	932a      	str	r3, [sp, #168]	; 0xa8
 8024e58:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8024e5a:	07db      	lsls	r3, r3, #31
 8024e5c:	d546      	bpl.n	8024eec <st_sssa8_ch_nn_mat_mult_nt_t+0x510>
 8024e5e:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8024e60:	2b00      	cmp	r3, #0
 8024e62:	dd43      	ble.n	8024eec <st_sssa8_ch_nn_mat_mult_nt_t+0x510>
 8024e64:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8024e66:	f06f 4e40 	mvn.w	lr, #3221225472	; 0xc0000000
 8024e6a:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
 8024e6e:	2500      	movs	r5, #0
 8024e70:	449e      	add	lr, r3
 8024e72:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8024e74:	441e      	add	r6, r3
 8024e76:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8024e78:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8024e7c:	f8dd a0a8 	ldr.w	sl, [sp, #168]	; 0xa8
 8024e80:	eb03 0646 	add.w	r6, r3, r6, lsl #1
 8024e84:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8024e86:	f8dd 90f4 	ldr.w	r9, [sp, #244]	; 0xf4
 8024e8a:	4473      	add	r3, lr
 8024e8c:	461f      	mov	r7, r3
 8024e8e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8024e90:	eb03 0c0e 	add.w	ip, r3, lr
 8024e94:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8024e96:	449e      	add	lr, r3
 8024e98:	f1bb 0f00 	cmp.w	fp, #0
 8024e9c:	683a      	ldr	r2, [r7, #0]
 8024e9e:	dd0d      	ble.n	8024ebc <st_sssa8_ch_nn_mat_mult_nt_t+0x4e0>
 8024ea0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8024ea2:	eb01 080b 	add.w	r8, r1, fp
 8024ea6:	1e58      	subs	r0, r3, #1
 8024ea8:	f911 3b01 	ldrsb.w	r3, [r1], #1
 8024eac:	f910 4f01 	ldrsb.w	r4, [r0, #1]!
 8024eb0:	eba3 0309 	sub.w	r3, r3, r9
 8024eb4:	4541      	cmp	r1, r8
 8024eb6:	fb04 2203 	mla	r2, r4, r3, r2
 8024eba:	d1f5      	bne.n	8024ea8 <st_sssa8_ch_nn_mat_mult_nt_t+0x4cc>
 8024ebc:	f9b6 3000 	ldrsh.w	r3, [r6]
 8024ec0:	f8dc 4000 	ldr.w	r4, [ip]
 8024ec4:	2b00      	cmp	r3, #0
 8024ec6:	f8de 0000 	ldr.w	r0, [lr]
 8024eca:	f340 820c 	ble.w	80252e6 <st_sssa8_ch_nn_mat_mult_nt_t+0x90a>
 8024ece:	0052      	lsls	r2, r2, #1
 8024ed0:	fb52 0204 	smmla	r2, r2, r4, r0
 8024ed4:	fa42 f303 	asr.w	r3, r2, r3
 8024ed8:	f303 0307 	ssat	r3, #8, r3
 8024edc:	f88a 3000 	strb.w	r3, [sl]
 8024ee0:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8024ee2:	3501      	adds	r5, #1
 8024ee4:	449a      	add	sl, r3
 8024ee6:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8024ee8:	42ab      	cmp	r3, r5
 8024eea:	d1d5      	bne.n	8024e98 <st_sssa8_ch_nn_mat_mult_nt_t+0x4bc>
 8024eec:	2000      	movs	r0, #0
 8024eee:	b02f      	add	sp, #188	; 0xbc
 8024ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024ef4:	9919      	ldr	r1, [sp, #100]	; 0x64
 8024ef6:	fa00 f201 	lsl.w	r2, r0, r1
 8024efa:	f302 021f 	ssat	r2, #32, r2
 8024efe:	980d      	ldr	r0, [sp, #52]	; 0x34
 8024f00:	fb52 f210 	smmulr	r2, r2, r0
 8024f04:	408b      	lsls	r3, r1
 8024f06:	f303 031f 	ssat	r3, #32, r3
 8024f0a:	fb53 f310 	smmulr	r3, r3, r0
 8024f0e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8024f10:	440a      	add	r2, r1
 8024f12:	f302 0207 	ssat	r2, #8, r2
 8024f16:	9801      	ldr	r0, [sp, #4]
 8024f18:	440b      	add	r3, r1
 8024f1a:	7042      	strb	r2, [r0, #1]
 8024f1c:	f303 0307 	ssat	r3, #8, r3
 8024f20:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 8024f22:	1882      	adds	r2, r0, r2
 8024f24:	7053      	strb	r3, [r2, #1]
 8024f26:	4603      	mov	r3, r0
 8024f28:	e762      	b.n	8024df0 <st_sssa8_ch_nn_mat_mult_nt_t+0x414>
 8024f2a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8024f2c:	fa06 f201 	lsl.w	r2, r6, r1
 8024f30:	f302 021f 	ssat	r2, #32, r2
 8024f34:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8024f36:	fb52 f215 	smmulr	r2, r2, r5
 8024f3a:	fa04 f101 	lsl.w	r1, r4, r1
 8024f3e:	f301 011f 	ssat	r1, #32, r1
 8024f42:	fb51 f115 	smmulr	r1, r1, r5
 8024f46:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024f48:	4422      	add	r2, r4
 8024f4a:	f302 0207 	ssat	r2, #8, r2
 8024f4e:	9d01      	ldr	r5, [sp, #4]
 8024f50:	4421      	add	r1, r4
 8024f52:	702a      	strb	r2, [r5, #0]
 8024f54:	f301 0107 	ssat	r1, #8, r1
 8024f58:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 8024f5a:	54a9      	strb	r1, [r5, r2]
 8024f5c:	e730      	b.n	8024dc0 <st_sssa8_ch_nn_mat_mult_nt_t+0x3e4>
 8024f5e:	4692      	mov	sl, r2
 8024f60:	e718      	b.n	8024d94 <st_sssa8_ch_nn_mat_mult_nt_t+0x3b8>
 8024f62:	46f2      	mov	sl, lr
 8024f64:	e716      	b.n	8024d94 <st_sssa8_ch_nn_mat_mult_nt_t+0x3b8>
 8024f66:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 8024f68:	f04f 0900 	mov.w	r9, #0
 8024f6c:	9808      	ldr	r0, [sp, #32]
 8024f6e:	9e07      	ldr	r6, [sp, #28]
 8024f70:	9300      	str	r3, [sp, #0]
 8024f72:	4603      	mov	r3, r0
 8024f74:	4634      	mov	r4, r6
 8024f76:	e676      	b.n	8024c66 <st_sssa8_ch_nn_mat_mult_nt_t+0x28a>
 8024f78:	46aa      	mov	sl, r5
 8024f7a:	e70b      	b.n	8024d94 <st_sssa8_ch_nn_mat_mult_nt_t+0x3b8>
 8024f7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024f7e:	2b00      	cmp	r3, #0
 8024f80:	f340 81c3 	ble.w	802530a <st_sssa8_ch_nn_mat_mult_nt_t+0x92e>
 8024f84:	9b03      	ldr	r3, [sp, #12]
 8024f86:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
 8024f88:	eb0a 0703 	add.w	r7, sl, r3
 8024f8c:	e9dd 4307 	ldrd	r4, r3, [sp, #28]
 8024f90:	f8da 2000 	ldr.w	r2, [sl]
 8024f94:	6828      	ldr	r0, [r5, #0]
 8024f96:	fa2f f182 	sxtb16	r1, r2
 8024f9a:	fa2f f292 	sxtb16	r2, r2, ror #8
 8024f9e:	fb21 4000 	smlad	r0, r1, r0, r4
 8024fa2:	686c      	ldr	r4, [r5, #4]
 8024fa4:	fb22 0404 	smlad	r4, r2, r4, r0
 8024fa8:	68a8      	ldr	r0, [r5, #8]
 8024faa:	fb21 3300 	smlad	r3, r1, r0, r3
 8024fae:	68e9      	ldr	r1, [r5, #12]
 8024fb0:	fb22 3201 	smlad	r2, r2, r1, r3
 8024fb4:	f8da 3004 	ldr.w	r3, [sl, #4]
 8024fb8:	6928      	ldr	r0, [r5, #16]
 8024fba:	fa2f f183 	sxtb16	r1, r3
 8024fbe:	fa2f f393 	sxtb16	r3, r3, ror #8
 8024fc2:	fb21 4000 	smlad	r0, r1, r0, r4
 8024fc6:	696c      	ldr	r4, [r5, #20]
 8024fc8:	fb23 0404 	smlad	r4, r3, r4, r0
 8024fcc:	69a8      	ldr	r0, [r5, #24]
 8024fce:	fb21 2100 	smlad	r1, r1, r0, r2
 8024fd2:	69ea      	ldr	r2, [r5, #28]
 8024fd4:	fb23 1302 	smlad	r3, r3, r2, r1
 8024fd8:	f8da 2008 	ldr.w	r2, [sl, #8]
 8024fdc:	6a28      	ldr	r0, [r5, #32]
 8024fde:	fa2f f182 	sxtb16	r1, r2
 8024fe2:	fa2f f292 	sxtb16	r2, r2, ror #8
 8024fe6:	fb21 4000 	smlad	r0, r1, r0, r4
 8024fea:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 8024fec:	fb22 0606 	smlad	r6, r2, r6, r0
 8024ff0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8024ff2:	fb21 3100 	smlad	r1, r1, r0, r3
 8024ff6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8024ff8:	fb22 1203 	smlad	r2, r2, r3, r1
 8024ffc:	f8da 400c 	ldr.w	r4, [sl, #12]
 8025000:	3540      	adds	r5, #64	; 0x40
 8025002:	f855 0c10 	ldr.w	r0, [r5, #-16]
 8025006:	f10a 0a10 	add.w	sl, sl, #16
 802500a:	f855 8c0c 	ldr.w	r8, [r5, #-12]
 802500e:	f855 ec08 	ldr.w	lr, [r5, #-8]
 8025012:	f855 cc04 	ldr.w	ip, [r5, #-4]
 8025016:	fa2f f184 	sxtb16	r1, r4
 802501a:	fa2f f394 	sxtb16	r3, r4, ror #8
 802501e:	fb21 6000 	smlad	r0, r1, r0, r6
 8025022:	fb23 0408 	smlad	r4, r3, r8, r0
 8025026:	fb21 220e 	smlad	r2, r1, lr, r2
 802502a:	fb23 230c 	smlad	r3, r3, ip, r2
 802502e:	45ba      	cmp	sl, r7
 8025030:	d1ae      	bne.n	8024f90 <st_sssa8_ch_nn_mat_mult_nt_t+0x5b4>
 8025032:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8025034:	9f03      	ldr	r7, [sp, #12]
 8025036:	e9cd 4307 	strd	r4, r3, [sp, #28]
 802503a:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 802503c:	eb03 0e02 	add.w	lr, r3, r2
 8025040:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025042:	42bb      	cmp	r3, r7
 8025044:	dd31      	ble.n	80250aa <st_sssa8_ch_nn_mat_mult_nt_t+0x6ce>
 8025046:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8025048:	4671      	mov	r1, lr
 802504a:	f8cd e000 	str.w	lr, [sp]
 802504e:	eba3 0907 	sub.w	r9, r3, r7
 8025052:	9701      	str	r7, [sp, #4]
 8025054:	ea4f 0999 	mov.w	r9, r9, lsr #2
 8025058:	f109 0801 	add.w	r8, r9, #1
 802505c:	e9dd 4507 	ldrd	r4, r5, [sp, #28]
 8025060:	eb0a 0c88 	add.w	ip, sl, r8, lsl #2
 8025064:	f85a 3b04 	ldr.w	r3, [sl], #4
 8025068:	3110      	adds	r1, #16
 802506a:	f851 0c10 	ldr.w	r0, [r1, #-16]
 802506e:	f851 ec0c 	ldr.w	lr, [r1, #-12]
 8025072:	f851 7c08 	ldr.w	r7, [r1, #-8]
 8025076:	f851 6c04 	ldr.w	r6, [r1, #-4]
 802507a:	fa2f f283 	sxtb16	r2, r3
 802507e:	fa2f f393 	sxtb16	r3, r3, ror #8
 8025082:	fb22 4400 	smlad	r4, r2, r0, r4
 8025086:	fb23 440e 	smlad	r4, r3, lr, r4
 802508a:	fb22 5507 	smlad	r5, r2, r7, r5
 802508e:	fb23 5506 	smlad	r5, r3, r6, r5
 8025092:	45e2      	cmp	sl, ip
 8025094:	d1e6      	bne.n	8025064 <st_sssa8_ch_nn_mat_mult_nt_t+0x688>
 8025096:	9f01      	ldr	r7, [sp, #4]
 8025098:	f8dd e000 	ldr.w	lr, [sp]
 802509c:	3704      	adds	r7, #4
 802509e:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 80250a2:	eb07 0789 	add.w	r7, r7, r9, lsl #2
 80250a6:	e9cd 4507 	strd	r4, r5, [sp, #28]
 80250aa:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 80250ac:	42bb      	cmp	r3, r7
 80250ae:	dd2d      	ble.n	802510c <st_sssa8_ch_nn_mat_mult_nt_t+0x730>
 80250b0:	f99a 2000 	ldrsb.w	r2, [sl]
 80250b4:	1c7b      	adds	r3, r7, #1
 80250b6:	9c07      	ldr	r4, [sp, #28]
 80250b8:	f8be 0000 	ldrh.w	r0, [lr]
 80250bc:	f8be 1002 	ldrh.w	r1, [lr, #2]
 80250c0:	fb10 4002 	smlabb	r0, r0, r2, r4
 80250c4:	9c08      	ldr	r4, [sp, #32]
 80250c6:	fb11 4402 	smlabb	r4, r1, r2, r4
 80250ca:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 80250cc:	9007      	str	r0, [sp, #28]
 80250ce:	429a      	cmp	r2, r3
 80250d0:	9408      	str	r4, [sp, #32]
 80250d2:	dd1b      	ble.n	802510c <st_sssa8_ch_nn_mat_mult_nt_t+0x730>
 80250d4:	f99a 3001 	ldrsb.w	r3, [sl, #1]
 80250d8:	3702      	adds	r7, #2
 80250da:	f8be 1004 	ldrh.w	r1, [lr, #4]
 80250de:	f8be 2006 	ldrh.w	r2, [lr, #6]
 80250e2:	fb11 0003 	smlabb	r0, r1, r3, r0
 80250e6:	fb12 4403 	smlabb	r4, r2, r3, r4
 80250ea:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 80250ec:	9007      	str	r0, [sp, #28]
 80250ee:	42bb      	cmp	r3, r7
 80250f0:	9408      	str	r4, [sp, #32]
 80250f2:	dd0b      	ble.n	802510c <st_sssa8_ch_nn_mat_mult_nt_t+0x730>
 80250f4:	f99a 3002 	ldrsb.w	r3, [sl, #2]
 80250f8:	f8be 2008 	ldrh.w	r2, [lr, #8]
 80250fc:	f8be 100a 	ldrh.w	r1, [lr, #10]
 8025100:	fb12 0203 	smlabb	r2, r2, r3, r0
 8025104:	fb11 4303 	smlabb	r3, r1, r3, r4
 8025108:	9207      	str	r2, [sp, #28]
 802510a:	9308      	str	r3, [sp, #32]
 802510c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802510e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8025110:	f933 3c02 	ldrsh.w	r3, [r3, #-2]
 8025114:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8025118:	2b00      	cmp	r3, #0
 802511a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 802511c:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8025120:	f340 80d3 	ble.w	80252ca <st_sssa8_ch_nn_mat_mult_nt_t+0x8ee>
 8025124:	9807      	ldr	r0, [sp, #28]
 8025126:	0040      	lsls	r0, r0, #1
 8025128:	fb50 2201 	smmla	r2, r0, r1, r2
 802512c:	fa42 f303 	asr.w	r3, r2, r3
 8025130:	f303 0307 	ssat	r3, #8, r3
 8025134:	f88b 3000 	strb.w	r3, [fp]
 8025138:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802513a:	f9b3 1000 	ldrsh.w	r1, [r3]
 802513e:	2900      	cmp	r1, #0
 8025140:	f340 80af 	ble.w	80252a2 <st_sssa8_ch_nn_mat_mult_nt_t+0x8c6>
 8025144:	9b08      	ldr	r3, [sp, #32]
 8025146:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8025148:	0058      	lsls	r0, r3, #1
 802514a:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 802514c:	461c      	mov	r4, r3
 802514e:	58a3      	ldr	r3, [r4, r2]
 8025150:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
 8025152:	58a2      	ldr	r2, [r4, r2]
 8025154:	fb50 2303 	smmla	r3, r0, r3, r2
 8025158:	410b      	asrs	r3, r1
 802515a:	f303 0307 	ssat	r3, #8, r3
 802515e:	f88b 3001 	strb.w	r3, [fp, #1]
 8025162:	e655      	b.n	8024e10 <st_sssa8_ch_nn_mat_mult_nt_t+0x434>
 8025164:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8025166:	2c00      	cmp	r4, #0
 8025168:	f000 80cb 	beq.w	8025302 <st_sssa8_ch_nn_mat_mult_nt_t+0x926>
 802516c:	2300      	movs	r3, #0
 802516e:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8025170:	4619      	mov	r1, r3
 8025172:	f102 0010 	add.w	r0, r2, #16
 8025176:	f930 5c10 	ldrsh.w	r5, [r0, #-16]
 802517a:	3c01      	subs	r4, #1
 802517c:	f930 2c08 	ldrsh.w	r2, [r0, #-8]
 8025180:	f100 0010 	add.w	r0, r0, #16
 8025184:	eba1 0105 	sub.w	r1, r1, r5
 8025188:	f930 5c1e 	ldrsh.w	r5, [r0, #-30]
 802518c:	eba3 0302 	sub.w	r3, r3, r2
 8025190:	f930 2c16 	ldrsh.w	r2, [r0, #-22]
 8025194:	eba1 0105 	sub.w	r1, r1, r5
 8025198:	f930 5c1c 	ldrsh.w	r5, [r0, #-28]
 802519c:	eba3 0302 	sub.w	r3, r3, r2
 80251a0:	f930 2c14 	ldrsh.w	r2, [r0, #-20]
 80251a4:	eba1 0105 	sub.w	r1, r1, r5
 80251a8:	f930 5c1a 	ldrsh.w	r5, [r0, #-26]
 80251ac:	eba3 0302 	sub.w	r3, r3, r2
 80251b0:	f930 2c12 	ldrsh.w	r2, [r0, #-18]
 80251b4:	eba1 0105 	sub.w	r1, r1, r5
 80251b8:	eba3 0302 	sub.w	r3, r3, r2
 80251bc:	d1db      	bne.n	8025176 <st_sssa8_ch_nn_mat_mult_nt_t+0x79a>
 80251be:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 80251c0:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80251c2:	4402      	add	r2, r0
 80251c4:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 80251c6:	b1cd      	cbz	r5, 80251fc <st_sssa8_ch_nn_mat_mult_nt_t+0x820>
 80251c8:	f9b2 4000 	ldrsh.w	r4, [r2]
 80251cc:	2d01      	cmp	r5, #1
 80251ce:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 80251d2:	eba1 0104 	sub.w	r1, r1, r4
 80251d6:	eba3 0300 	sub.w	r3, r3, r0
 80251da:	d00f      	beq.n	80251fc <st_sssa8_ch_nn_mat_mult_nt_t+0x820>
 80251dc:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
 80251e0:	2d02      	cmp	r5, #2
 80251e2:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
 80251e6:	eba1 0104 	sub.w	r1, r1, r4
 80251ea:	eba3 0300 	sub.w	r3, r3, r0
 80251ee:	d005      	beq.n	80251fc <st_sssa8_ch_nn_mat_mult_nt_t+0x820>
 80251f0:	f9b2 0008 	ldrsh.w	r0, [r2, #8]
 80251f4:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80251f8:	1a09      	subs	r1, r1, r0
 80251fa:	1a9b      	subs	r3, r3, r2
 80251fc:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 80251fe:	fb02 f101 	mul.w	r1, r2, r1
 8025202:	fb02 f303 	mul.w	r3, r2, r3
 8025206:	e460      	b.n	8024aca <st_sssa8_ch_nn_mat_mult_nt_t+0xee>
 8025208:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 802520a:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 802520c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 802520e:	18f5      	adds	r5, r6, r3
 8025210:	2c00      	cmp	r4, #0
 8025212:	d07e      	beq.n	8025312 <st_sssa8_ch_nn_mat_mult_nt_t+0x936>
 8025214:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 8025216:	f856 1b04 	ldr.w	r1, [r6], #4
 802521a:	3c01      	subs	r4, #1
 802521c:	f855 2b04 	ldr.w	r2, [r5], #4
 8025220:	f103 0310 	add.w	r3, r3, #16
 8025224:	ea4f 2031 	mov.w	r0, r1, ror #8
 8025228:	fa2f f181 	sxtb16	r1, r1
 802522c:	fa2f f080 	sxtb16	r0, r0
 8025230:	f843 1c10 	str.w	r1, [r3, #-16]
 8025234:	ea4f 2132 	mov.w	r1, r2, ror #8
 8025238:	f843 0c0c 	str.w	r0, [r3, #-12]
 802523c:	fa2f f181 	sxtb16	r1, r1
 8025240:	fa2f f282 	sxtb16	r2, r2
 8025244:	f843 1c04 	str.w	r1, [r3, #-4]
 8025248:	f843 2c08 	str.w	r2, [r3, #-8]
 802524c:	d1e3      	bne.n	8025216 <st_sssa8_ch_nn_mat_mult_nt_t+0x83a>
 802524e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8025250:	992b      	ldr	r1, [sp, #172]	; 0xac
 8025252:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8025254:	185d      	adds	r5, r3, r1
 8025256:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8025258:	189a      	adds	r2, r3, r2
 802525a:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 802525c:	440b      	add	r3, r1
 802525e:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8025260:	2800      	cmp	r0, #0
 8025262:	f43f ac2d 	beq.w	8024ac0 <st_sssa8_ch_nn_mat_mult_nt_t+0xe4>
 8025266:	f992 1000 	ldrsb.w	r1, [r2]
 802526a:	2801      	cmp	r0, #1
 802526c:	8019      	strh	r1, [r3, #0]
 802526e:	f995 1000 	ldrsb.w	r1, [r5]
 8025272:	8059      	strh	r1, [r3, #2]
 8025274:	f43f ac24 	beq.w	8024ac0 <st_sssa8_ch_nn_mat_mult_nt_t+0xe4>
 8025278:	f992 1001 	ldrsb.w	r1, [r2, #1]
 802527c:	2802      	cmp	r0, #2
 802527e:	8099      	strh	r1, [r3, #4]
 8025280:	f995 1001 	ldrsb.w	r1, [r5, #1]
 8025284:	80d9      	strh	r1, [r3, #6]
 8025286:	f43f ac1b 	beq.w	8024ac0 <st_sssa8_ch_nn_mat_mult_nt_t+0xe4>
 802528a:	f992 2002 	ldrsb.w	r2, [r2, #2]
 802528e:	811a      	strh	r2, [r3, #8]
 8025290:	f995 2002 	ldrsb.w	r2, [r5, #2]
 8025294:	815a      	strh	r2, [r3, #10]
 8025296:	e413      	b.n	8024ac0 <st_sssa8_ch_nn_mat_mult_nt_t+0xe4>
 8025298:	f8dd a07c 	ldr.w	sl, [sp, #124]	; 0x7c
 802529c:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
 80252a0:	e5b2      	b.n	8024e08 <st_sssa8_ch_nn_mat_mult_nt_t+0x42c>
 80252a2:	f1c1 0101 	rsb	r1, r1, #1
 80252a6:	9a08      	ldr	r2, [sp, #32]
 80252a8:	408a      	lsls	r2, r1
 80252aa:	f302 021f 	ssat	r2, #32, r2
 80252ae:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80252b0:	9915      	ldr	r1, [sp, #84]	; 0x54
 80252b2:	4618      	mov	r0, r3
 80252b4:	5843      	ldr	r3, [r0, r1]
 80252b6:	fb52 f213 	smmulr	r2, r2, r3
 80252ba:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 80252bc:	585b      	ldr	r3, [r3, r1]
 80252be:	4413      	add	r3, r2
 80252c0:	f303 0307 	ssat	r3, #8, r3
 80252c4:	f88b 3001 	strb.w	r3, [fp, #1]
 80252c8:	e5a2      	b.n	8024e10 <st_sssa8_ch_nn_mat_mult_nt_t+0x434>
 80252ca:	f1c3 0301 	rsb	r3, r3, #1
 80252ce:	9807      	ldr	r0, [sp, #28]
 80252d0:	4098      	lsls	r0, r3
 80252d2:	f300 031f 	ssat	r3, #32, r0
 80252d6:	fb53 f311 	smmulr	r3, r3, r1
 80252da:	4413      	add	r3, r2
 80252dc:	f303 0307 	ssat	r3, #8, r3
 80252e0:	f88b 3000 	strb.w	r3, [fp]
 80252e4:	e728      	b.n	8025138 <st_sssa8_ch_nn_mat_mult_nt_t+0x75c>
 80252e6:	f1c3 0301 	rsb	r3, r3, #1
 80252ea:	fa02 f303 	lsl.w	r3, r2, r3
 80252ee:	f303 031f 	ssat	r3, #32, r3
 80252f2:	fb53 f314 	smmulr	r3, r3, r4
 80252f6:	4403      	add	r3, r0
 80252f8:	f303 0307 	ssat	r3, #8, r3
 80252fc:	f88a 3000 	strb.w	r3, [sl]
 8025300:	e5ee      	b.n	8024ee0 <st_sssa8_ch_nn_mat_mult_nt_t+0x504>
 8025302:	4621      	mov	r1, r4
 8025304:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8025306:	4623      	mov	r3, r4
 8025308:	e75c      	b.n	80251c4 <st_sssa8_ch_nn_mat_mult_nt_t+0x7e8>
 802530a:	f8dd e0fc 	ldr.w	lr, [sp, #252]	; 0xfc
 802530e:	2700      	movs	r7, #0
 8025310:	e696      	b.n	8025040 <st_sssa8_ch_nn_mat_mult_nt_t+0x664>
 8025312:	4632      	mov	r2, r6
 8025314:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 8025316:	e7a2      	b.n	802525e <st_sssa8_ch_nn_mat_mult_nt_t+0x882>

08025318 <st_sssa8_ch_nn_mat_mult_kernel_opt>:
 8025318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802531c:	b09b      	sub	sp, #108	; 0x6c
 802531e:	4683      	mov	fp, r0
 8025320:	460f      	mov	r7, r1
 8025322:	f8bd 4090 	ldrh.w	r4, [sp, #144]	; 0x90
 8025326:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8025328:	910d      	str	r1, [sp, #52]	; 0x34
 802532a:	0861      	lsrs	r1, r4, #1
 802532c:	eb00 0503 	add.w	r5, r0, r3
 8025330:	f8bd 0094 	ldrh.w	r0, [sp, #148]	; 0x94
 8025334:	9318      	str	r3, [sp, #96]	; 0x60
 8025336:	9417      	str	r4, [sp, #92]	; 0x5c
 8025338:	9215      	str	r2, [sp, #84]	; 0x54
 802533a:	9516      	str	r5, [sp, #88]	; 0x58
 802533c:	9006      	str	r0, [sp, #24]
 802533e:	f000 81c5 	beq.w	80256cc <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3b4>
 8025342:	3901      	subs	r1, #1
 8025344:	1ec4      	subs	r4, r0, #3
 8025346:	3210      	adds	r2, #16
 8025348:	f1a0 0310 	sub.w	r3, r0, #16
 802534c:	940f      	str	r4, [sp, #60]	; 0x3c
 802534e:	b28c      	uxth	r4, r1
 8025350:	9915      	ldr	r1, [sp, #84]	; 0x54
 8025352:	091b      	lsrs	r3, r3, #4
 8025354:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8025358:	9419      	str	r4, [sp, #100]	; 0x64
 802535a:	3108      	adds	r1, #8
 802535c:	3301      	adds	r3, #1
 802535e:	920e      	str	r2, [sp, #56]	; 0x38
 8025360:	eb07 0640 	add.w	r6, r7, r0, lsl #1
 8025364:	9107      	str	r1, [sp, #28]
 8025366:	9926      	ldr	r1, [sp, #152]	; 0x98
 8025368:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 802536a:	3104      	adds	r1, #4
 802536c:	9610      	str	r6, [sp, #64]	; 0x40
 802536e:	3208      	adds	r2, #8
 8025370:	9105      	str	r1, [sp, #20]
 8025372:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8025374:	9204      	str	r2, [sp, #16]
 8025376:	015a      	lsls	r2, r3, #5
 8025378:	3102      	adds	r1, #2
 802537a:	9103      	str	r1, [sp, #12]
 802537c:	0119      	lsls	r1, r3, #4
 802537e:	019b      	lsls	r3, r3, #6
 8025380:	9113      	str	r1, [sp, #76]	; 0x4c
 8025382:	9311      	str	r3, [sp, #68]	; 0x44
 8025384:	1cab      	adds	r3, r5, #2
 8025386:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8025388:	9302      	str	r3, [sp, #8]
 802538a:	1f03      	subs	r3, r0, #4
 802538c:	3108      	adds	r1, #8
 802538e:	9314      	str	r3, [sp, #80]	; 0x50
 8025390:	9101      	str	r1, [sp, #4]
 8025392:	18b9      	adds	r1, r7, r2
 8025394:	9b07      	ldr	r3, [sp, #28]
 8025396:	18b2      	adds	r2, r6, r2
 8025398:	9108      	str	r1, [sp, #32]
 802539a:	9212      	str	r2, [sp, #72]	; 0x48
 802539c:	f853 5c08 	ldr.w	r5, [r3, #-8]
 80253a0:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80253a4:	9b06      	ldr	r3, [sp, #24]
 80253a6:	2b0f      	cmp	r3, #15
 80253a8:	f340 8255 	ble.w	8025856 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x53e>
 80253ac:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80253b0:	46dc      	mov	ip, fp
 80253b2:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
 80253b6:	4603      	mov	r3, r0
 80253b8:	462c      	mov	r4, r5
 80253ba:	9e08      	ldr	r6, [sp, #32]
 80253bc:	f8de 7000 	ldr.w	r7, [lr]
 80253c0:	f8d8 2000 	ldr.w	r2, [r8]
 80253c4:	f8dc 1000 	ldr.w	r1, [ip]
 80253c8:	f8dc a004 	ldr.w	sl, [ip, #4]
 80253cc:	fb21 5507 	smlad	r5, r1, r7, r5
 80253d0:	fb21 4102 	smlad	r1, r1, r2, r4
 80253d4:	fb2a 0007 	smlad	r0, sl, r7, r0
 80253d8:	fb2a 3202 	smlad	r2, sl, r2, r3
 80253dc:	f8de 7004 	ldr.w	r7, [lr, #4]
 80253e0:	f8d8 a004 	ldr.w	sl, [r8, #4]
 80253e4:	f8dc 4008 	ldr.w	r4, [ip, #8]
 80253e8:	f8dc 300c 	ldr.w	r3, [ip, #12]
 80253ec:	fb24 5507 	smlad	r5, r4, r7, r5
 80253f0:	fb24 110a 	smlad	r1, r4, sl, r1
 80253f4:	fb23 0007 	smlad	r0, r3, r7, r0
 80253f8:	fb23 230a 	smlad	r3, r3, sl, r2
 80253fc:	f8de 7008 	ldr.w	r7, [lr, #8]
 8025400:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8025404:	f8dc 4010 	ldr.w	r4, [ip, #16]
 8025408:	f8dc a014 	ldr.w	sl, [ip, #20]
 802540c:	fb24 5507 	smlad	r5, r4, r7, r5
 8025410:	fb24 1102 	smlad	r1, r4, r2, r1
 8025414:	fb2a 0007 	smlad	r0, sl, r7, r0
 8025418:	fb2a 3202 	smlad	r2, sl, r2, r3
 802541c:	f8de 700c 	ldr.w	r7, [lr, #12]
 8025420:	f8d8 a00c 	ldr.w	sl, [r8, #12]
 8025424:	f8dc 4018 	ldr.w	r4, [ip, #24]
 8025428:	f8dc 901c 	ldr.w	r9, [ip, #28]
 802542c:	fb24 5507 	smlad	r5, r4, r7, r5
 8025430:	fb24 140a 	smlad	r4, r4, sl, r1
 8025434:	fb29 0007 	smlad	r0, r9, r7, r0
 8025438:	fb29 2a0a 	smlad	sl, r9, sl, r2
 802543c:	f8de 7010 	ldr.w	r7, [lr, #16]
 8025440:	f8d8 9010 	ldr.w	r9, [r8, #16]
 8025444:	f8dc 1020 	ldr.w	r1, [ip, #32]
 8025448:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 802544c:	fb21 5507 	smlad	r5, r1, r7, r5
 8025450:	fb21 4409 	smlad	r4, r1, r9, r4
 8025454:	fb23 0007 	smlad	r0, r3, r7, r0
 8025458:	fb23 a909 	smlad	r9, r3, r9, sl
 802545c:	f8de 7014 	ldr.w	r7, [lr, #20]
 8025460:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8025464:	f8dc 1028 	ldr.w	r1, [ip, #40]	; 0x28
 8025468:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
 802546c:	fb21 5507 	smlad	r5, r1, r7, r5
 8025470:	fb21 4402 	smlad	r4, r1, r2, r4
 8025474:	fb23 0007 	smlad	r0, r3, r7, r0
 8025478:	fb23 9302 	smlad	r3, r3, r2, r9
 802547c:	f8de 7018 	ldr.w	r7, [lr, #24]
 8025480:	f8d8 9018 	ldr.w	r9, [r8, #24]
 8025484:	f8dc 1030 	ldr.w	r1, [ip, #48]	; 0x30
 8025488:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
 802548c:	fb21 5507 	smlad	r5, r1, r7, r5
 8025490:	fb21 4409 	smlad	r4, r1, r9, r4
 8025494:	fb22 0707 	smlad	r7, r2, r7, r0
 8025498:	fb22 3909 	smlad	r9, r2, r9, r3
 802549c:	f8de 001c 	ldr.w	r0, [lr, #28]
 80254a0:	f108 0820 	add.w	r8, r8, #32
 80254a4:	f858 3c04 	ldr.w	r3, [r8, #-4]
 80254a8:	f10e 0e20 	add.w	lr, lr, #32
 80254ac:	f8dc 1038 	ldr.w	r1, [ip, #56]	; 0x38
 80254b0:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 80254b4:	f85c 2c04 	ldr.w	r2, [ip, #-4]
 80254b8:	fb21 5500 	smlad	r5, r1, r0, r5
 80254bc:	fb21 4403 	smlad	r4, r1, r3, r4
 80254c0:	fb22 7000 	smlad	r0, r2, r0, r7
 80254c4:	fb22 9303 	smlad	r3, r2, r3, r9
 80254c8:	45b6      	cmp	lr, r6
 80254ca:	f47f af77 	bne.w	80253bc <st_sssa8_ch_nn_mat_mult_kernel_opt+0xa4>
 80254ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80254d0:	9f08      	ldr	r7, [sp, #32]
 80254d2:	4493      	add	fp, r2
 80254d4:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 80254d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80254da:	9200      	str	r2, [sp, #0]
 80254dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80254de:	4596      	cmp	lr, r2
 80254e0:	da41      	bge.n	8025566 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x24e>
 80254e2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80254e4:	465e      	mov	r6, fp
 80254e6:	f8dd c000 	ldr.w	ip, [sp]
 80254ea:	eba2 020e 	sub.w	r2, r2, lr
 80254ee:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
 80254f2:	0892      	lsrs	r2, r2, #2
 80254f4:	920b      	str	r2, [sp, #44]	; 0x2c
 80254f6:	3201      	adds	r2, #1
 80254f8:	920a      	str	r2, [sp, #40]	; 0x28
 80254fa:	00d2      	lsls	r2, r2, #3
 80254fc:	eb07 0802 	add.w	r8, r7, r2
 8025500:	9209      	str	r2, [sp, #36]	; 0x24
 8025502:	f8d7 e000 	ldr.w	lr, [r7]
 8025506:	f8dc 9000 	ldr.w	r9, [ip]
 802550a:	6831      	ldr	r1, [r6, #0]
 802550c:	f8d6 a004 	ldr.w	sl, [r6, #4]
 8025510:	fb21 550e 	smlad	r5, r1, lr, r5
 8025514:	fb21 4409 	smlad	r4, r1, r9, r4
 8025518:	fb2a 000e 	smlad	r0, sl, lr, r0
 802551c:	fb2a 3309 	smlad	r3, sl, r9, r3
 8025520:	f8d7 e004 	ldr.w	lr, [r7, #4]
 8025524:	f10c 0c08 	add.w	ip, ip, #8
 8025528:	f85c 9c04 	ldr.w	r9, [ip, #-4]
 802552c:	3708      	adds	r7, #8
 802552e:	68b1      	ldr	r1, [r6, #8]
 8025530:	3610      	adds	r6, #16
 8025532:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8025536:	fb21 550e 	smlad	r5, r1, lr, r5
 802553a:	fb21 4409 	smlad	r4, r1, r9, r4
 802553e:	fb22 000e 	smlad	r0, r2, lr, r0
 8025542:	fb22 3309 	smlad	r3, r2, r9, r3
 8025546:	4547      	cmp	r7, r8
 8025548:	d1db      	bne.n	8025502 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1ea>
 802554a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802554c:	9909      	ldr	r1, [sp, #36]	; 0x24
 802554e:	eb0b 1b02 	add.w	fp, fp, r2, lsl #4
 8025552:	9a00      	ldr	r2, [sp, #0]
 8025554:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 8025558:	440a      	add	r2, r1
 802555a:	f10e 0e04 	add.w	lr, lr, #4
 802555e:	9200      	str	r2, [sp, #0]
 8025560:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8025562:	eb0e 0e82 	add.w	lr, lr, r2, lsl #2
 8025566:	9a06      	ldr	r2, [sp, #24]
 8025568:	4572      	cmp	r2, lr
 802556a:	dd40      	ble.n	80255ee <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2d6>
 802556c:	9e00      	ldr	r6, [sp, #0]
 802556e:	f10e 0201 	add.w	r2, lr, #1
 8025572:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8025576:	f9b7 c000 	ldrsh.w	ip, [r7]
 802557a:	f9b6 6000 	ldrsh.w	r6, [r6]
 802557e:	fb0c 0001 	mla	r0, ip, r1, r0
 8025582:	f9bb 8000 	ldrsh.w	r8, [fp]
 8025586:	fb06 3301 	mla	r3, r6, r1, r3
 802558a:	9906      	ldr	r1, [sp, #24]
 802558c:	fb08 550c 	mla	r5, r8, ip, r5
 8025590:	4291      	cmp	r1, r2
 8025592:	fb08 4406 	mla	r4, r8, r6, r4
 8025596:	f340 815b 	ble.w	8025850 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x538>
 802559a:	9a00      	ldr	r2, [sp, #0]
 802559c:	f10e 0e02 	add.w	lr, lr, #2
 80255a0:	f9b7 6002 	ldrsh.w	r6, [r7, #2]
 80255a4:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 80255a8:	f9bb 2006 	ldrsh.w	r2, [fp, #6]
 80255ac:	f9bb c004 	ldrsh.w	ip, [fp, #4]
 80255b0:	fb06 0002 	mla	r0, r6, r2, r0
 80255b4:	fb01 3302 	mla	r3, r1, r2, r3
 80255b8:	9a06      	ldr	r2, [sp, #24]
 80255ba:	fb0c 5506 	mla	r5, ip, r6, r5
 80255be:	4572      	cmp	r2, lr
 80255c0:	fb0c 4401 	mla	r4, ip, r1, r4
 80255c4:	f340 814f 	ble.w	8025866 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x54e>
 80255c8:	9a00      	ldr	r2, [sp, #0]
 80255ca:	f10b 0b0c 	add.w	fp, fp, #12
 80255ce:	f9b7 6004 	ldrsh.w	r6, [r7, #4]
 80255d2:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 80255d6:	f93b 7c04 	ldrsh.w	r7, [fp, #-4]
 80255da:	f93b 2c02 	ldrsh.w	r2, [fp, #-2]
 80255de:	fb07 5506 	mla	r5, r7, r6, r5
 80255e2:	fb07 4401 	mla	r4, r7, r1, r4
 80255e6:	fb06 0002 	mla	r0, r6, r2, r0
 80255ea:	fb01 3302 	mla	r3, r1, r2, r3
 80255ee:	9f05      	ldr	r7, [sp, #20]
 80255f0:	9904      	ldr	r1, [sp, #16]
 80255f2:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 80255f6:	9e01      	ldr	r6, [sp, #4]
 80255f8:	2a00      	cmp	r2, #0
 80255fa:	f851 1c08 	ldr.w	r1, [r1, #-8]
 80255fe:	f856 6c08 	ldr.w	r6, [r6, #-8]
 8025602:	f340 8107 	ble.w	8025814 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4fc>
 8025606:	006d      	lsls	r5, r5, #1
 8025608:	0064      	lsls	r4, r4, #1
 802560a:	fb55 6501 	smmla	r5, r5, r1, r6
 802560e:	fb54 6401 	smmla	r4, r4, r1, r6
 8025612:	fa45 f202 	asr.w	r2, r5, r2
 8025616:	f302 0207 	ssat	r2, #8, r2
 802561a:	9903      	ldr	r1, [sp, #12]
 802561c:	f801 2c02 	strb.w	r2, [r1, #-2]
 8025620:	f937 1c04 	ldrsh.w	r1, [r7, #-4]
 8025624:	410c      	asrs	r4, r1
 8025626:	f304 0407 	ssat	r4, #8, r4
 802562a:	9a02      	ldr	r2, [sp, #8]
 802562c:	463d      	mov	r5, r7
 802562e:	f802 4c02 	strb.w	r4, [r2, #-2]
 8025632:	f935 2c02 	ldrsh.w	r2, [r5, #-2]
 8025636:	2a00      	cmp	r2, #0
 8025638:	f340 80c8 	ble.w	80257cc <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4b4>
 802563c:	9904      	ldr	r1, [sp, #16]
 802563e:	0040      	lsls	r0, r0, #1
 8025640:	9c01      	ldr	r4, [sp, #4]
 8025642:	005b      	lsls	r3, r3, #1
 8025644:	f851 1c04 	ldr.w	r1, [r1, #-4]
 8025648:	f854 4c04 	ldr.w	r4, [r4, #-4]
 802564c:	fb50 4001 	smmla	r0, r0, r1, r4
 8025650:	fb53 4301 	smmla	r3, r3, r1, r4
 8025654:	4110      	asrs	r0, r2
 8025656:	f300 0007 	ssat	r0, #8, r0
 802565a:	9a03      	ldr	r2, [sp, #12]
 802565c:	f802 0c01 	strb.w	r0, [r2, #-1]
 8025660:	f935 4c02 	ldrsh.w	r4, [r5, #-2]
 8025664:	fa43 f404 	asr.w	r4, r3, r4
 8025668:	f304 0407 	ssat	r4, #8, r4
 802566c:	9b02      	ldr	r3, [sp, #8]
 802566e:	462a      	mov	r2, r5
 8025670:	f803 4c01 	strb.w	r4, [r3, #-1]
 8025674:	3204      	adds	r2, #4
 8025676:	9b07      	ldr	r3, [sp, #28]
 8025678:	9205      	str	r2, [sp, #20]
 802567a:	3308      	adds	r3, #8
 802567c:	9a04      	ldr	r2, [sp, #16]
 802567e:	9307      	str	r3, [sp, #28]
 8025680:	3208      	adds	r2, #8
 8025682:	9204      	str	r2, [sp, #16]
 8025684:	9a03      	ldr	r2, [sp, #12]
 8025686:	3202      	adds	r2, #2
 8025688:	9203      	str	r2, [sp, #12]
 802568a:	9a01      	ldr	r2, [sp, #4]
 802568c:	3208      	adds	r2, #8
 802568e:	9201      	str	r2, [sp, #4]
 8025690:	9a02      	ldr	r2, [sp, #8]
 8025692:	3202      	adds	r2, #2
 8025694:	9202      	str	r2, [sp, #8]
 8025696:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025698:	429a      	cmp	r2, r3
 802569a:	f47f ae7f 	bne.w	802539c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x84>
 802569e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80256a0:	9826      	ldr	r0, [sp, #152]	; 0x98
 80256a2:	3301      	adds	r3, #1
 80256a4:	00da      	lsls	r2, r3, #3
 80256a6:	0059      	lsls	r1, r3, #1
 80256a8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80256ac:	9326      	str	r3, [sp, #152]	; 0x98
 80256ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80256b0:	4413      	add	r3, r2
 80256b2:	9315      	str	r3, [sp, #84]	; 0x54
 80256b4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80256b6:	4413      	add	r3, r2
 80256b8:	9327      	str	r3, [sp, #156]	; 0x9c
 80256ba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80256bc:	4413      	add	r3, r2
 80256be:	9328      	str	r3, [sp, #160]	; 0xa0
 80256c0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80256c2:	440b      	add	r3, r1
 80256c4:	9329      	str	r3, [sp, #164]	; 0xa4
 80256c6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80256c8:	440b      	add	r3, r1
 80256ca:	9316      	str	r3, [sp, #88]	; 0x58
 80256cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80256ce:	07da      	lsls	r2, r3, #31
 80256d0:	d574      	bpl.n	80257bc <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4a4>
 80256d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80256d4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80256d6:	6819      	ldr	r1, [r3, #0]
 80256d8:	9b06      	ldr	r3, [sp, #24]
 80256da:	089e      	lsrs	r6, r3, #2
 80256dc:	eb00 0c43 	add.w	ip, r0, r3, lsl #1
 80256e0:	f000 80e0 	beq.w	80258a4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x58c>
 80256e4:	3e01      	subs	r6, #1
 80256e6:	4664      	mov	r4, ip
 80256e8:	460b      	mov	r3, r1
 80256ea:	b2b6      	uxth	r6, r6
 80256ec:	3601      	adds	r6, #1
 80256ee:	00f6      	lsls	r6, r6, #3
 80256f0:	eb0b 0706 	add.w	r7, fp, r6
 80256f4:	f8db 5000 	ldr.w	r5, [fp]
 80256f8:	f10b 0b08 	add.w	fp, fp, #8
 80256fc:	f85b 2c04 	ldr.w	r2, [fp, #-4]
 8025700:	f8d0 e000 	ldr.w	lr, [r0]
 8025704:	fb25 110e 	smlad	r1, r5, lr, r1
 8025708:	f8d4 e000 	ldr.w	lr, [r4]
 802570c:	fb25 330e 	smlad	r3, r5, lr, r3
 8025710:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8025714:	3408      	adds	r4, #8
 8025716:	f854 5c04 	ldr.w	r5, [r4, #-4]
 802571a:	3008      	adds	r0, #8
 802571c:	fb22 110e 	smlad	r1, r2, lr, r1
 8025720:	fb22 3305 	smlad	r3, r2, r5, r3
 8025724:	45bb      	cmp	fp, r7
 8025726:	d1e5      	bne.n	80256f4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3dc>
 8025728:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802572a:	44b4      	add	ip, r6
 802572c:	4432      	add	r2, r6
 802572e:	920d      	str	r2, [sp, #52]	; 0x34
 8025730:	9a06      	ldr	r2, [sp, #24]
 8025732:	f012 0203 	ands.w	r2, r2, #3
 8025736:	d01f      	beq.n	8025778 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x460>
 8025738:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 802573a:	2a01      	cmp	r2, #1
 802573c:	f9bb 0000 	ldrsh.w	r0, [fp]
 8025740:	8835      	ldrh	r5, [r6, #0]
 8025742:	f8bc 4000 	ldrh.w	r4, [ip]
 8025746:	fb15 1100 	smlabb	r1, r5, r0, r1
 802574a:	fb14 3300 	smlabb	r3, r4, r0, r3
 802574e:	d013      	beq.n	8025778 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x460>
 8025750:	f9bb 0002 	ldrsh.w	r0, [fp, #2]
 8025754:	2a02      	cmp	r2, #2
 8025756:	8875      	ldrh	r5, [r6, #2]
 8025758:	f8bc 4002 	ldrh.w	r4, [ip, #2]
 802575c:	fb15 1100 	smlabb	r1, r5, r0, r1
 8025760:	fb14 3300 	smlabb	r3, r4, r0, r3
 8025764:	d008      	beq.n	8025778 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x460>
 8025766:	f9bb 2004 	ldrsh.w	r2, [fp, #4]
 802576a:	88b4      	ldrh	r4, [r6, #4]
 802576c:	f8bc 0004 	ldrh.w	r0, [ip, #4]
 8025770:	fb12 1104 	smlabb	r1, r2, r4, r1
 8025774:	fb12 3300 	smlabb	r3, r2, r0, r3
 8025778:	9a26      	ldr	r2, [sp, #152]	; 0x98
 802577a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 802577c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8025780:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8025782:	6825      	ldr	r5, [r4, #0]
 8025784:	2a00      	cmp	r2, #0
 8025786:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8025788:	f100 0001 	add.w	r0, r0, #1
 802578c:	6824      	ldr	r4, [r4, #0]
 802578e:	dd6d      	ble.n	802586c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x554>
 8025790:	0049      	lsls	r1, r1, #1
 8025792:	005b      	lsls	r3, r3, #1
 8025794:	fb51 4105 	smmla	r1, r1, r5, r4
 8025798:	fb53 4305 	smmla	r3, r3, r5, r4
 802579c:	fa41 f202 	asr.w	r2, r1, r2
 80257a0:	f302 0207 	ssat	r2, #8, r2
 80257a4:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80257a6:	700a      	strb	r2, [r1, #0]
 80257a8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80257aa:	f9b2 2000 	ldrsh.w	r2, [r2]
 80257ae:	4113      	asrs	r3, r2
 80257b0:	f303 0307 	ssat	r3, #8, r3
 80257b4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80257b6:	9029      	str	r0, [sp, #164]	; 0xa4
 80257b8:	7013      	strb	r3, [r2, #0]
 80257ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80257bc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80257be:	ebc3 0042 	rsb	r0, r3, r2, lsl #1
 80257c2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80257c4:	4418      	add	r0, r3
 80257c6:	b01b      	add	sp, #108	; 0x6c
 80257c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80257cc:	f1c2 0201 	rsb	r2, r2, #1
 80257d0:	fa00 f102 	lsl.w	r1, r0, r2
 80257d4:	f301 011f 	ssat	r1, #32, r1
 80257d8:	9804      	ldr	r0, [sp, #16]
 80257da:	f850 4c04 	ldr.w	r4, [r0, #-4]
 80257de:	fb51 f114 	smmulr	r1, r1, r4
 80257e2:	fa03 f202 	lsl.w	r2, r3, r2
 80257e6:	f302 001f 	ssat	r0, #32, r2
 80257ea:	fb50 f014 	smmulr	r0, r0, r4
 80257ee:	9b01      	ldr	r3, [sp, #4]
 80257f0:	f853 2c04 	ldr.w	r2, [r3, #-4]
 80257f4:	440a      	add	r2, r1
 80257f6:	f302 0207 	ssat	r2, #8, r2
 80257fa:	9903      	ldr	r1, [sp, #12]
 80257fc:	f801 2c01 	strb.w	r2, [r1, #-1]
 8025800:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8025804:	4403      	add	r3, r0
 8025806:	f303 0307 	ssat	r3, #8, r3
 802580a:	9a02      	ldr	r2, [sp, #8]
 802580c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8025810:	462a      	mov	r2, r5
 8025812:	e72f      	b.n	8025674 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x35c>
 8025814:	f1c2 0201 	rsb	r2, r2, #1
 8025818:	4095      	lsls	r5, r2
 802581a:	f305 051f 	ssat	r5, #32, r5
 802581e:	fb55 f511 	smmulr	r5, r5, r1
 8025822:	fa04 f202 	lsl.w	r2, r4, r2
 8025826:	f302 021f 	ssat	r2, #32, r2
 802582a:	fb52 f111 	smmulr	r1, r2, r1
 802582e:	4435      	add	r5, r6
 8025830:	f305 0507 	ssat	r5, #8, r5
 8025834:	9a03      	ldr	r2, [sp, #12]
 8025836:	f802 5c02 	strb.w	r5, [r2, #-2]
 802583a:	9a01      	ldr	r2, [sp, #4]
 802583c:	f852 2c08 	ldr.w	r2, [r2, #-8]
 8025840:	4411      	add	r1, r2
 8025842:	f301 0107 	ssat	r1, #8, r1
 8025846:	9a02      	ldr	r2, [sp, #8]
 8025848:	463d      	mov	r5, r7
 802584a:	f802 1c02 	strb.w	r1, [r2, #-2]
 802584e:	e6f0      	b.n	8025632 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x31a>
 8025850:	f10b 0b04 	add.w	fp, fp, #4
 8025854:	e6cb      	b.n	80255ee <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2d6>
 8025856:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8025858:	462c      	mov	r4, r5
 802585a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 802585c:	f04f 0e00 	mov.w	lr, #0
 8025860:	9300      	str	r3, [sp, #0]
 8025862:	4603      	mov	r3, r0
 8025864:	e63a      	b.n	80254dc <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1c4>
 8025866:	f10b 0b08 	add.w	fp, fp, #8
 802586a:	e6c0      	b.n	80255ee <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2d6>
 802586c:	f1c2 0601 	rsb	r6, r2, #1
 8025870:	fa01 f206 	lsl.w	r2, r1, r6
 8025874:	f302 021f 	ssat	r2, #32, r2
 8025878:	fb52 f215 	smmulr	r2, r2, r5
 802587c:	40b3      	lsls	r3, r6
 802587e:	f303 031f 	ssat	r3, #32, r3
 8025882:	fb53 f115 	smmulr	r1, r3, r5
 8025886:	1913      	adds	r3, r2, r4
 8025888:	f303 0307 	ssat	r3, #8, r3
 802588c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802588e:	7013      	strb	r3, [r2, #0]
 8025890:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025892:	681b      	ldr	r3, [r3, #0]
 8025894:	440b      	add	r3, r1
 8025896:	f303 0307 	ssat	r3, #8, r3
 802589a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802589c:	9029      	str	r0, [sp, #164]	; 0xa4
 802589e:	7013      	strb	r3, [r2, #0]
 80258a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80258a2:	e78b      	b.n	80257bc <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4a4>
 80258a4:	460b      	mov	r3, r1
 80258a6:	e743      	b.n	8025730 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x418>

080258a8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt>:
 80258a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80258ac:	b08f      	sub	sp, #60	; 0x3c
 80258ae:	460f      	mov	r7, r1
 80258b0:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 80258b4:	9105      	str	r1, [sp, #20]
 80258b6:	f8bd 4064 	ldrh.w	r4, [sp, #100]	; 0x64
 80258ba:	0859      	lsrs	r1, r3, #1
 80258bc:	930c      	str	r3, [sp, #48]	; 0x30
 80258be:	920b      	str	r2, [sp, #44]	; 0x2c
 80258c0:	9402      	str	r4, [sp, #8]
 80258c2:	f000 819c 	beq.w	8025bfe <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x356>
 80258c6:	4616      	mov	r6, r2
 80258c8:	1ee5      	subs	r5, r4, #3
 80258ca:	3901      	subs	r1, #1
 80258cc:	3210      	adds	r2, #16
 80258ce:	9507      	str	r5, [sp, #28]
 80258d0:	f106 0508 	add.w	r5, r6, #8
 80258d4:	f1a4 0310 	sub.w	r3, r4, #16
 80258d8:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80258da:	9503      	str	r5, [sp, #12]
 80258dc:	b28d      	uxth	r5, r1
 80258de:	091b      	lsrs	r3, r3, #4
 80258e0:	3602      	adds	r6, #2
 80258e2:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 80258e6:	950d      	str	r5, [sp, #52]	; 0x34
 80258e8:	3301      	adds	r3, #1
 80258ea:	9601      	str	r6, [sp, #4]
 80258ec:	9206      	str	r2, [sp, #24]
 80258ee:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80258f0:	eb07 1e43 	add.w	lr, r7, r3, lsl #5
 80258f4:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80258f6:	f102 0b08 	add.w	fp, r2, #8
 80258fa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80258fc:	3604      	adds	r6, #4
 80258fe:	f102 0a08 	add.w	sl, r2, #8
 8025902:	011a      	lsls	r2, r3, #4
 8025904:	019b      	lsls	r3, r3, #6
 8025906:	9600      	str	r6, [sp, #0]
 8025908:	9209      	str	r2, [sp, #36]	; 0x24
 802590a:	1f22      	subs	r2, r4, #4
 802590c:	9308      	str	r3, [sp, #32]
 802590e:	9b03      	ldr	r3, [sp, #12]
 8025910:	920a      	str	r2, [sp, #40]	; 0x28
 8025912:	9a02      	ldr	r2, [sp, #8]
 8025914:	f853 4c08 	ldr.w	r4, [r3, #-8]
 8025918:	2a0f      	cmp	r2, #15
 802591a:	f853 3c04 	ldr.w	r3, [r3, #-4]
 802591e:	f340 8158 	ble.w	8025bd2 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x32a>
 8025922:	f8dd c014 	ldr.w	ip, [sp, #20]
 8025926:	4607      	mov	r7, r0
 8025928:	f8dc 5000 	ldr.w	r5, [ip]
 802592c:	6839      	ldr	r1, [r7, #0]
 802592e:	fb21 4405 	smlad	r4, r1, r5, r4
 8025932:	687a      	ldr	r2, [r7, #4]
 8025934:	fb22 3305 	smlad	r3, r2, r5, r3
 8025938:	f8dc 5004 	ldr.w	r5, [ip, #4]
 802593c:	68b9      	ldr	r1, [r7, #8]
 802593e:	fb21 4105 	smlad	r1, r1, r5, r4
 8025942:	68fa      	ldr	r2, [r7, #12]
 8025944:	fb22 3205 	smlad	r2, r2, r5, r3
 8025948:	f8dc 5008 	ldr.w	r5, [ip, #8]
 802594c:	693c      	ldr	r4, [r7, #16]
 802594e:	fb24 1105 	smlad	r1, r4, r5, r1
 8025952:	697b      	ldr	r3, [r7, #20]
 8025954:	fb23 2205 	smlad	r2, r3, r5, r2
 8025958:	f8dc 500c 	ldr.w	r5, [ip, #12]
 802595c:	69bc      	ldr	r4, [r7, #24]
 802595e:	fb24 1405 	smlad	r4, r4, r5, r1
 8025962:	69fb      	ldr	r3, [r7, #28]
 8025964:	fb23 2305 	smlad	r3, r3, r5, r2
 8025968:	f8dc 5010 	ldr.w	r5, [ip, #16]
 802596c:	6a39      	ldr	r1, [r7, #32]
 802596e:	fb21 4405 	smlad	r4, r1, r5, r4
 8025972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025974:	fb22 3305 	smlad	r3, r2, r5, r3
 8025978:	f8dc 5014 	ldr.w	r5, [ip, #20]
 802597c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802597e:	fb21 4105 	smlad	r1, r1, r5, r4
 8025982:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8025984:	fb22 3205 	smlad	r2, r2, r5, r3
 8025988:	f8dc 5018 	ldr.w	r5, [ip, #24]
 802598c:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 802598e:	fb24 1105 	smlad	r1, r4, r5, r1
 8025992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025994:	fb23 2205 	smlad	r2, r3, r5, r2
 8025998:	f8dc 501c 	ldr.w	r5, [ip, #28]
 802599c:	3740      	adds	r7, #64	; 0x40
 802599e:	f857 4c08 	ldr.w	r4, [r7, #-8]
 80259a2:	f10c 0c20 	add.w	ip, ip, #32
 80259a6:	f857 3c04 	ldr.w	r3, [r7, #-4]
 80259aa:	fb24 1405 	smlad	r4, r4, r5, r1
 80259ae:	fb23 2305 	smlad	r3, r3, r5, r2
 80259b2:	45f4      	cmp	ip, lr
 80259b4:	d1b8      	bne.n	8025928 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x80>
 80259b6:	9a08      	ldr	r2, [sp, #32]
 80259b8:	4677      	mov	r7, lr
 80259ba:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 80259be:	4410      	add	r0, r2
 80259c0:	9a07      	ldr	r2, [sp, #28]
 80259c2:	4594      	cmp	ip, r2
 80259c4:	da25      	bge.n	8025a12 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x16a>
 80259c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80259c8:	4606      	mov	r6, r0
 80259ca:	eba2 090c 	sub.w	r9, r2, ip
 80259ce:	ea4f 0999 	mov.w	r9, r9, lsr #2
 80259d2:	f109 0201 	add.w	r2, r9, #1
 80259d6:	eb07 08c2 	add.w	r8, r7, r2, lsl #3
 80259da:	9204      	str	r2, [sp, #16]
 80259dc:	683a      	ldr	r2, [r7, #0]
 80259de:	6831      	ldr	r1, [r6, #0]
 80259e0:	fb21 4402 	smlad	r4, r1, r2, r4
 80259e4:	6871      	ldr	r1, [r6, #4]
 80259e6:	fb21 3202 	smlad	r2, r1, r2, r3
 80259ea:	6879      	ldr	r1, [r7, #4]
 80259ec:	3610      	adds	r6, #16
 80259ee:	f856 5c08 	ldr.w	r5, [r6, #-8]
 80259f2:	3708      	adds	r7, #8
 80259f4:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80259f8:	fb25 4401 	smlad	r4, r5, r1, r4
 80259fc:	fb23 2301 	smlad	r3, r3, r1, r2
 8025a00:	4547      	cmp	r7, r8
 8025a02:	d1eb      	bne.n	80259dc <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x134>
 8025a04:	f10c 0c04 	add.w	ip, ip, #4
 8025a08:	9a04      	ldr	r2, [sp, #16]
 8025a0a:	eb0c 0c89 	add.w	ip, ip, r9, lsl #2
 8025a0e:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8025a12:	9a02      	ldr	r2, [sp, #8]
 8025a14:	4562      	cmp	r2, ip
 8025a16:	dd26      	ble.n	8025a66 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1be>
 8025a18:	f9b7 1000 	ldrsh.w	r1, [r7]
 8025a1c:	f10c 0201 	add.w	r2, ip, #1
 8025a20:	8806      	ldrh	r6, [r0, #0]
 8025a22:	8845      	ldrh	r5, [r0, #2]
 8025a24:	fb16 4401 	smlabb	r4, r6, r1, r4
 8025a28:	fb11 3305 	smlabb	r3, r1, r5, r3
 8025a2c:	9902      	ldr	r1, [sp, #8]
 8025a2e:	4291      	cmp	r1, r2
 8025a30:	f340 80cd 	ble.w	8025bce <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x326>
 8025a34:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8025a38:	f10c 0c02 	add.w	ip, ip, #2
 8025a3c:	8885      	ldrh	r5, [r0, #4]
 8025a3e:	88c1      	ldrh	r1, [r0, #6]
 8025a40:	fb15 4402 	smlabb	r4, r5, r2, r4
 8025a44:	fb12 3301 	smlabb	r3, r2, r1, r3
 8025a48:	9a02      	ldr	r2, [sp, #8]
 8025a4a:	4562      	cmp	r2, ip
 8025a4c:	f340 80c5 	ble.w	8025bda <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x332>
 8025a50:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8025a54:	300c      	adds	r0, #12
 8025a56:	f830 5c04 	ldrh.w	r5, [r0, #-4]
 8025a5a:	f830 1c02 	ldrh.w	r1, [r0, #-2]
 8025a5e:	fb15 4402 	smlabb	r4, r5, r2, r4
 8025a62:	fb12 3301 	smlabb	r3, r2, r1, r3
 8025a66:	9a00      	ldr	r2, [sp, #0]
 8025a68:	f85b 6c08 	ldr.w	r6, [fp, #-8]
 8025a6c:	f932 2c04 	ldrsh.w	r2, [r2, #-4]
 8025a70:	f85a 1c08 	ldr.w	r1, [sl, #-8]
 8025a74:	2a00      	cmp	r2, #0
 8025a76:	f340 809b 	ble.w	8025bb0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x308>
 8025a7a:	0064      	lsls	r4, r4, #1
 8025a7c:	fb54 1406 	smmla	r4, r4, r6, r1
 8025a80:	4114      	asrs	r4, r2
 8025a82:	f304 0407 	ssat	r4, #8, r4
 8025a86:	9a01      	ldr	r2, [sp, #4]
 8025a88:	f802 4c02 	strb.w	r4, [r2, #-2]
 8025a8c:	9a00      	ldr	r2, [sp, #0]
 8025a8e:	f932 6c02 	ldrsh.w	r6, [r2, #-2]
 8025a92:	2e00      	cmp	r6, #0
 8025a94:	dd79      	ble.n	8025b8a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2e2>
 8025a96:	f85b 4c04 	ldr.w	r4, [fp, #-4]
 8025a9a:	005b      	lsls	r3, r3, #1
 8025a9c:	f85a 5c04 	ldr.w	r5, [sl, #-4]
 8025aa0:	fb53 5304 	smmla	r3, r3, r4, r5
 8025aa4:	4133      	asrs	r3, r6
 8025aa6:	f303 0307 	ssat	r3, #8, r3
 8025aaa:	9a01      	ldr	r2, [sp, #4]
 8025aac:	f802 3c01 	strb.w	r3, [r2, #-1]
 8025ab0:	3202      	adds	r2, #2
 8025ab2:	9b03      	ldr	r3, [sp, #12]
 8025ab4:	f10b 0b08 	add.w	fp, fp, #8
 8025ab8:	f10a 0a08 	add.w	sl, sl, #8
 8025abc:	9201      	str	r2, [sp, #4]
 8025abe:	3308      	adds	r3, #8
 8025ac0:	9a00      	ldr	r2, [sp, #0]
 8025ac2:	9303      	str	r3, [sp, #12]
 8025ac4:	3204      	adds	r2, #4
 8025ac6:	9200      	str	r2, [sp, #0]
 8025ac8:	9a06      	ldr	r2, [sp, #24]
 8025aca:	429a      	cmp	r2, r3
 8025acc:	f47f af21 	bne.w	8025912 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x6a>
 8025ad0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025ad2:	991d      	ldr	r1, [sp, #116]	; 0x74
 8025ad4:	3301      	adds	r3, #1
 8025ad6:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 8025ada:	991a      	ldr	r1, [sp, #104]	; 0x68
 8025adc:	00da      	lsls	r2, r3, #3
 8025ade:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8025ae2:	931a      	str	r3, [sp, #104]	; 0x68
 8025ae4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025ae6:	4413      	add	r3, r2
 8025ae8:	930b      	str	r3, [sp, #44]	; 0x2c
 8025aea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8025aec:	4413      	add	r3, r2
 8025aee:	931b      	str	r3, [sp, #108]	; 0x6c
 8025af0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025af2:	4413      	add	r3, r2
 8025af4:	931c      	str	r3, [sp, #112]	; 0x70
 8025af6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025af8:	07db      	lsls	r3, r3, #31
 8025afa:	d542      	bpl.n	8025b82 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2da>
 8025afc:	9a02      	ldr	r2, [sp, #8]
 8025afe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025b00:	0892      	lsrs	r2, r2, #2
 8025b02:	681b      	ldr	r3, [r3, #0]
 8025b04:	d016      	beq.n	8025b34 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x28c>
 8025b06:	1e56      	subs	r6, r2, #1
 8025b08:	9905      	ldr	r1, [sp, #20]
 8025b0a:	b2b6      	uxth	r6, r6
 8025b0c:	3601      	adds	r6, #1
 8025b0e:	00f6      	lsls	r6, r6, #3
 8025b10:	1987      	adds	r7, r0, r6
 8025b12:	6805      	ldr	r5, [r0, #0]
 8025b14:	3008      	adds	r0, #8
 8025b16:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8025b1a:	f8d1 c000 	ldr.w	ip, [r1]
 8025b1e:	fb25 330c 	smlad	r3, r5, ip, r3
 8025b22:	684d      	ldr	r5, [r1, #4]
 8025b24:	3108      	adds	r1, #8
 8025b26:	fb22 3305 	smlad	r3, r2, r5, r3
 8025b2a:	42b8      	cmp	r0, r7
 8025b2c:	d1f1      	bne.n	8025b12 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x26a>
 8025b2e:	9a05      	ldr	r2, [sp, #20]
 8025b30:	4432      	add	r2, r6
 8025b32:	9205      	str	r2, [sp, #20]
 8025b34:	9a02      	ldr	r2, [sp, #8]
 8025b36:	f012 0203 	ands.w	r2, r2, #3
 8025b3a:	d010      	beq.n	8025b5e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2b6>
 8025b3c:	9e05      	ldr	r6, [sp, #20]
 8025b3e:	2a01      	cmp	r2, #1
 8025b40:	8801      	ldrh	r1, [r0, #0]
 8025b42:	8835      	ldrh	r5, [r6, #0]
 8025b44:	fb15 3301 	smlabb	r3, r5, r1, r3
 8025b48:	d009      	beq.n	8025b5e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2b6>
 8025b4a:	8875      	ldrh	r5, [r6, #2]
 8025b4c:	2a02      	cmp	r2, #2
 8025b4e:	8841      	ldrh	r1, [r0, #2]
 8025b50:	fb15 3301 	smlabb	r3, r5, r1, r3
 8025b54:	d003      	beq.n	8025b5e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2b6>
 8025b56:	8881      	ldrh	r1, [r0, #4]
 8025b58:	88b2      	ldrh	r2, [r6, #4]
 8025b5a:	fb11 3302 	smlabb	r3, r1, r2, r3
 8025b5e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8025b60:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8025b62:	f9b2 1000 	ldrsh.w	r1, [r2]
 8025b66:	1c62      	adds	r2, r4, #1
 8025b68:	6805      	ldr	r5, [r0, #0]
 8025b6a:	2900      	cmp	r1, #0
 8025b6c:	981c      	ldr	r0, [sp, #112]	; 0x70
 8025b6e:	6800      	ldr	r0, [r0, #0]
 8025b70:	dd35      	ble.n	8025bde <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x336>
 8025b72:	005b      	lsls	r3, r3, #1
 8025b74:	fb53 0305 	smmla	r3, r3, r5, r0
 8025b78:	410b      	asrs	r3, r1
 8025b7a:	f303 0307 	ssat	r3, #8, r3
 8025b7e:	7023      	strb	r3, [r4, #0]
 8025b80:	4614      	mov	r4, r2
 8025b82:	4620      	mov	r0, r4
 8025b84:	b00f      	add	sp, #60	; 0x3c
 8025b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025b8a:	f1c6 0601 	rsb	r6, r6, #1
 8025b8e:	40b3      	lsls	r3, r6
 8025b90:	f303 031f 	ssat	r3, #32, r3
 8025b94:	f85b 2c04 	ldr.w	r2, [fp, #-4]
 8025b98:	fb53 f212 	smmulr	r2, r3, r2
 8025b9c:	f85a 3c04 	ldr.w	r3, [sl, #-4]
 8025ba0:	441a      	add	r2, r3
 8025ba2:	f302 0207 	ssat	r2, #8, r2
 8025ba6:	9b01      	ldr	r3, [sp, #4]
 8025ba8:	f803 2c01 	strb.w	r2, [r3, #-1]
 8025bac:	461a      	mov	r2, r3
 8025bae:	e77f      	b.n	8025ab0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x208>
 8025bb0:	f1c2 0201 	rsb	r2, r2, #1
 8025bb4:	fa04 f202 	lsl.w	r2, r4, r2
 8025bb8:	f302 021f 	ssat	r2, #32, r2
 8025bbc:	fb52 f216 	smmulr	r2, r2, r6
 8025bc0:	440a      	add	r2, r1
 8025bc2:	f302 0207 	ssat	r2, #8, r2
 8025bc6:	9901      	ldr	r1, [sp, #4]
 8025bc8:	f801 2c02 	strb.w	r2, [r1, #-2]
 8025bcc:	e75e      	b.n	8025a8c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1e4>
 8025bce:	3004      	adds	r0, #4
 8025bd0:	e749      	b.n	8025a66 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1be>
 8025bd2:	9f05      	ldr	r7, [sp, #20]
 8025bd4:	f04f 0c00 	mov.w	ip, #0
 8025bd8:	e6f2      	b.n	80259c0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x118>
 8025bda:	3008      	adds	r0, #8
 8025bdc:	e743      	b.n	8025a66 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1be>
 8025bde:	f1c1 0101 	rsb	r1, r1, #1
 8025be2:	408b      	lsls	r3, r1
 8025be4:	f303 031f 	ssat	r3, #32, r3
 8025be8:	fb53 f315 	smmulr	r3, r3, r5
 8025bec:	4403      	add	r3, r0
 8025bee:	f303 0307 	ssat	r3, #8, r3
 8025bf2:	7023      	strb	r3, [r4, #0]
 8025bf4:	4614      	mov	r4, r2
 8025bf6:	4620      	mov	r0, r4
 8025bf8:	b00f      	add	sp, #60	; 0x3c
 8025bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025bfe:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8025c00:	e77a      	b.n	8025af8 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x250>
 8025c02:	bf00      	nop

08025c04 <st_int8_avepool>:
 8025c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025c08:	b099      	sub	sp, #100	; 0x64
 8025c0a:	4615      	mov	r5, r2
 8025c0c:	eec0 4a20 	vdiv.f32	s9, s0, s1
 8025c10:	900b      	str	r0, [sp, #44]	; 0x2c
 8025c12:	f8bd 009c 	ldrh.w	r0, [sp, #156]	; 0x9c
 8025c16:	f8bd 40a8 	ldrh.w	r4, [sp, #168]	; 0xa8
 8025c1a:	9012      	str	r0, [sp, #72]	; 0x48
 8025c1c:	f8bd 00a0 	ldrh.w	r0, [sp, #160]	; 0xa0
 8025c20:	9109      	str	r1, [sp, #36]	; 0x24
 8025c22:	9015      	str	r0, [sp, #84]	; 0x54
 8025c24:	f8bd 00a4 	ldrh.w	r0, [sp, #164]	; 0xa4
 8025c28:	9416      	str	r4, [sp, #88]	; 0x58
 8025c2a:	900e      	str	r0, [sp, #56]	; 0x38
 8025c2c:	f99d 00ac 	ldrsb.w	r0, [sp, #172]	; 0xac
 8025c30:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 8025c34:	ee03 0a90 	vmov	s7, r0
 8025c38:	f8bd 1090 	ldrh.w	r1, [sp, #144]	; 0x90
 8025c3c:	f99d 00b0 	ldrsb.w	r0, [sp, #176]	; 0xb0
 8025c40:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8025c44:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 8025c48:	f8bd 2098 	ldrh.w	r2, [sp, #152]	; 0x98
 8025c4c:	9311      	str	r3, [sp, #68]	; 0x44
 8025c4e:	f8bd 3094 	ldrh.w	r3, [sp, #148]	; 0x94
 8025c52:	2c00      	cmp	r4, #0
 8025c54:	f000 80dd 	beq.w	8025e12 <st_int8_avepool+0x20e>
 8025c58:	1a89      	subs	r1, r1, r2
 8025c5a:	eeb4 0a60 	vcmp.f32	s0, s1
 8025c5e:	4252      	negs	r2, r2
 8025c60:	425b      	negs	r3, r3
 8025c62:	b289      	uxth	r1, r1
 8025c64:	ee04 0a10 	vmov	s8, r0
 8025c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025c6c:	f04f 0000 	mov.w	r0, #0
 8025c70:	b29b      	uxth	r3, r3
 8025c72:	9113      	str	r1, [sp, #76]	; 0x4c
 8025c74:	b291      	uxth	r1, r2
 8025c76:	9014      	str	r0, [sp, #80]	; 0x50
 8025c78:	9317      	str	r3, [sp, #92]	; 0x5c
 8025c7a:	4602      	mov	r2, r0
 8025c7c:	462b      	mov	r3, r5
 8025c7e:	9101      	str	r1, [sp, #4]
 8025c80:	bf18      	it	ne
 8025c82:	4603      	movne	r3, r0
 8025c84:	fb05 fb07 	mul.w	fp, r5, r7
 8025c88:	bf08      	it	eq
 8025c8a:	2301      	moveq	r3, #1
 8025c8c:	ee13 1a90 	vmov	r1, s7
 8025c90:	ee14 0a10 	vmov	r0, s8
 8025c94:	ed9f 3a6d 	vldr	s6, [pc, #436]	; 8025e4c <st_int8_avepool+0x248>
 8025c98:	46da      	mov	sl, fp
 8025c9a:	46b9      	mov	r9, r7
 8025c9c:	4281      	cmp	r1, r0
 8025c9e:	bf14      	ite	ne
 8025ca0:	2300      	movne	r3, #0
 8025ca2:	f003 0301 	andeq.w	r3, r3, #1
 8025ca6:	9307      	str	r3, [sp, #28]
 8025ca8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8025caa:	2900      	cmp	r1, #0
 8025cac:	f000 809e 	beq.w	8025dec <st_int8_avepool+0x1e8>
 8025cb0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8025cb2:	fb01 f202 	mul.w	r2, r1, r2
 8025cb6:	9d01      	ldr	r5, [sp, #4]
 8025cb8:	2400      	movs	r4, #0
 8025cba:	1e43      	subs	r3, r0, #1
 8025cbc:	920f      	str	r2, [sp, #60]	; 0x3c
 8025cbe:	fa0f fb85 	sxth.w	fp, r5
 8025cc2:	9a03      	ldr	r2, [sp, #12]
 8025cc4:	1b5b      	subs	r3, r3, r5
 8025cc6:	b201      	sxth	r1, r0
 8025cc8:	fb02 f20b 	mul.w	r2, r2, fp
 8025ccc:	464f      	mov	r7, r9
 8025cce:	b29b      	uxth	r3, r3
 8025cd0:	9108      	str	r1, [sp, #32]
 8025cd2:	9210      	str	r2, [sp, #64]	; 0x40
 8025cd4:	4622      	mov	r2, r4
 8025cd6:	3301      	adds	r3, #1
 8025cd8:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8025cda:	940d      	str	r4, [sp, #52]	; 0x34
 8025cdc:	4699      	mov	r9, r3
 8025cde:	910c      	str	r1, [sp, #48]	; 0x30
 8025ce0:	2f00      	cmp	r7, #0
 8025ce2:	d075      	beq.n	8025dd0 <st_int8_avepool+0x1cc>
 8025ce4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8025ce6:	eeb8 5ae3 	vcvt.f32.s32	s10, s7
 8025cea:	990c      	ldr	r1, [sp, #48]	; 0x30
 8025cec:	eef8 5ac4 	vcvt.f32.s32	s11, s8
 8025cf0:	441a      	add	r2, r3
 8025cf2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025cf4:	fa0f f881 	sxth.w	r8, r1
 8025cf8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8025cfc:	185d      	adds	r5, r3, r1
 8025cfe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8025d00:	2100      	movs	r1, #0
 8025d02:	fb07 f202 	mul.w	r2, r7, r2
 8025d06:	4443      	add	r3, r8
 8025d08:	b22d      	sxth	r5, r5
 8025d0a:	9105      	str	r1, [sp, #20]
 8025d0c:	fb07 f303 	mul.w	r3, r7, r3
 8025d10:	9206      	str	r2, [sp, #24]
 8025d12:	930a      	str	r3, [sp, #40]	; 0x28
 8025d14:	9104      	str	r1, [sp, #16]
 8025d16:	9b08      	ldr	r3, [sp, #32]
 8025d18:	459b      	cmp	fp, r3
 8025d1a:	f280 8090 	bge.w	8025e3e <st_int8_avepool+0x23a>
 8025d1e:	9b04      	ldr	r3, [sp, #16]
 8025d20:	2400      	movs	r4, #0
 8025d22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025d24:	46a4      	mov	ip, r4
 8025d26:	46a6      	mov	lr, r4
 8025d28:	189e      	adds	r6, r3, r2
 8025d2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025d2c:	441e      	add	r6, r3
 8025d2e:	45a8      	cmp	r8, r5
 8025d30:	da1b      	bge.n	8025d6a <st_int8_avepool+0x166>
 8025d32:	9b01      	ldr	r3, [sp, #4]
 8025d34:	9902      	ldr	r1, [sp, #8]
 8025d36:	191a      	adds	r2, r3, r4
 8025d38:	eb0b 0304 	add.w	r3, fp, r4
 8025d3c:	43d2      	mvns	r2, r2
 8025d3e:	4299      	cmp	r1, r3
 8025d40:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8025d44:	dd11      	ble.n	8025d6a <st_int8_avepool+0x166>
 8025d46:	4631      	mov	r1, r6
 8025d48:	4643      	mov	r3, r8
 8025d4a:	0418      	lsls	r0, r3, #16
 8025d4c:	d408      	bmi.n	8025d60 <st_int8_avepool+0x15c>
 8025d4e:	b13a      	cbz	r2, 8025d60 <st_int8_avepool+0x15c>
 8025d50:	9803      	ldr	r0, [sp, #12]
 8025d52:	4298      	cmp	r0, r3
 8025d54:	dd04      	ble.n	8025d60 <st_int8_avepool+0x15c>
 8025d56:	f991 0000 	ldrsb.w	r0, [r1]
 8025d5a:	f10c 0c01 	add.w	ip, ip, #1
 8025d5e:	4486      	add	lr, r0
 8025d60:	3301      	adds	r3, #1
 8025d62:	4439      	add	r1, r7
 8025d64:	b218      	sxth	r0, r3
 8025d66:	4285      	cmp	r5, r0
 8025d68:	dcef      	bgt.n	8025d4a <st_int8_avepool+0x146>
 8025d6a:	3401      	adds	r4, #1
 8025d6c:	4456      	add	r6, sl
 8025d6e:	45a1      	cmp	r9, r4
 8025d70:	d1dd      	bne.n	8025d2e <st_int8_avepool+0x12a>
 8025d72:	9b07      	ldr	r3, [sp, #28]
 8025d74:	2b00      	cmp	r3, #0
 8025d76:	d14f      	bne.n	8025e18 <st_int8_avepool+0x214>
 8025d78:	ee07 ea90 	vmov	s15, lr
 8025d7c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8025d80:	ee07 ca90 	vmov	s15, ip
 8025d84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8025d88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8025d8c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8025d90:	eef0 6a65 	vmov.f32	s13, s11
 8025d94:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8025d98:	eee7 6aa4 	vfma.f32	s13, s15, s9
 8025d9c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8025da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025da4:	fe26 7a07 	vselge.f32	s14, s12, s14
 8025da8:	ee77 7a26 	vadd.f32	s15, s14, s13
 8025dac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8025db0:	ee17 3a90 	vmov	r3, s15
 8025db4:	f303 0307 	ssat	r3, #8, r3
 8025db8:	9906      	ldr	r1, [sp, #24]
 8025dba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025dbc:	440a      	add	r2, r1
 8025dbe:	9904      	ldr	r1, [sp, #16]
 8025dc0:	5453      	strb	r3, [r2, r1]
 8025dc2:	9b05      	ldr	r3, [sp, #20]
 8025dc4:	3301      	adds	r3, #1
 8025dc6:	b21b      	sxth	r3, r3
 8025dc8:	42bb      	cmp	r3, r7
 8025dca:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8025dce:	dba2      	blt.n	8025d16 <st_int8_avepool+0x112>
 8025dd0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8025dd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025dd4:	9912      	ldr	r1, [sp, #72]	; 0x48
 8025dd6:	3201      	adds	r2, #1
 8025dd8:	440b      	add	r3, r1
 8025dda:	b212      	sxth	r2, r2
 8025ddc:	990e      	ldr	r1, [sp, #56]	; 0x38
 8025dde:	b29b      	uxth	r3, r3
 8025de0:	920d      	str	r2, [sp, #52]	; 0x34
 8025de2:	428a      	cmp	r2, r1
 8025de4:	930c      	str	r3, [sp, #48]	; 0x30
 8025de6:	f6ff af7b 	blt.w	8025ce0 <st_int8_avepool+0xdc>
 8025dea:	46b9      	mov	r9, r7
 8025dec:	9b01      	ldr	r3, [sp, #4]
 8025dee:	9815      	ldr	r0, [sp, #84]	; 0x54
 8025df0:	461a      	mov	r2, r3
 8025df2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025df4:	9914      	ldr	r1, [sp, #80]	; 0x50
 8025df6:	4403      	add	r3, r0
 8025df8:	4402      	add	r2, r0
 8025dfa:	3101      	adds	r1, #1
 8025dfc:	b29b      	uxth	r3, r3
 8025dfe:	b209      	sxth	r1, r1
 8025e00:	9313      	str	r3, [sp, #76]	; 0x4c
 8025e02:	b292      	uxth	r2, r2
 8025e04:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8025e06:	9201      	str	r2, [sp, #4]
 8025e08:	460a      	mov	r2, r1
 8025e0a:	428b      	cmp	r3, r1
 8025e0c:	9114      	str	r1, [sp, #80]	; 0x50
 8025e0e:	f73f af4b 	bgt.w	8025ca8 <st_int8_avepool+0xa4>
 8025e12:	b019      	add	sp, #100	; 0x64
 8025e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025e18:	f1be 0f00 	cmp.w	lr, #0
 8025e1c:	db04      	blt.n	8025e28 <st_int8_avepool+0x224>
 8025e1e:	eb0e 0e6c 	add.w	lr, lr, ip, asr #1
 8025e22:	fb9e f3fc 	sdiv	r3, lr, ip
 8025e26:	e7c5      	b.n	8025db4 <st_int8_avepool+0x1b0>
 8025e28:	f1bc 0f00 	cmp.w	ip, #0
 8025e2c:	4663      	mov	r3, ip
 8025e2e:	bfb8      	it	lt
 8025e30:	f10c 0301 	addlt.w	r3, ip, #1
 8025e34:	ebae 0363 	sub.w	r3, lr, r3, asr #1
 8025e38:	fb93 f3fc 	sdiv	r3, r3, ip
 8025e3c:	e7ba      	b.n	8025db4 <st_int8_avepool+0x1b0>
 8025e3e:	9b07      	ldr	r3, [sp, #28]
 8025e40:	b913      	cbnz	r3, 8025e48 <st_int8_avepool+0x244>
 8025e42:	eef0 7a43 	vmov.f32	s15, s6
 8025e46:	e7a1      	b.n	8025d8c <st_int8_avepool+0x188>
 8025e48:	deff      	udf	#255	; 0xff
 8025e4a:	bf00      	nop
 8025e4c:	7fc00000 	.word	0x7fc00000

08025e50 <ai_array_to_buffer_fmt>:
 8025e50:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8025e54:	2b02      	cmp	r3, #2
 8025e56:	d02e      	beq.n	8025eb6 <ai_array_to_buffer_fmt+0x66>
 8025e58:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 8025e5c:	4a1a      	ldr	r2, [pc, #104]	; (8025ec8 <ai_array_to_buffer_fmt+0x78>)
 8025e5e:	4293      	cmp	r3, r2
 8025e60:	d00e      	beq.n	8025e80 <ai_array_to_buffer_fmt+0x30>
 8025e62:	dd11      	ble.n	8025e88 <ai_array_to_buffer_fmt+0x38>
 8025e64:	4a19      	ldr	r2, [pc, #100]	; (8025ecc <ai_array_to_buffer_fmt+0x7c>)
 8025e66:	4293      	cmp	r3, r2
 8025e68:	d00a      	beq.n	8025e80 <ai_array_to_buffer_fmt+0x30>
 8025e6a:	dd18      	ble.n	8025e9e <ai_array_to_buffer_fmt+0x4e>
 8025e6c:	4a18      	ldr	r2, [pc, #96]	; (8025ed0 <ai_array_to_buffer_fmt+0x80>)
 8025e6e:	4293      	cmp	r3, r2
 8025e70:	d006      	beq.n	8025e80 <ai_array_to_buffer_fmt+0x30>
 8025e72:	4a18      	ldr	r2, [pc, #96]	; (8025ed4 <ai_array_to_buffer_fmt+0x84>)
 8025e74:	4293      	cmp	r3, r2
 8025e76:	d003      	beq.n	8025e80 <ai_array_to_buffer_fmt+0x30>
 8025e78:	4a17      	ldr	r2, [pc, #92]	; (8025ed8 <ai_array_to_buffer_fmt+0x88>)
 8025e7a:	4293      	cmp	r3, r2
 8025e7c:	d000      	beq.n	8025e80 <ai_array_to_buffer_fmt+0x30>
 8025e7e:	2340      	movs	r3, #64	; 0x40
 8025e80:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8025e84:	4318      	orrs	r0, r3
 8025e86:	4770      	bx	lr
 8025e88:	4a14      	ldr	r2, [pc, #80]	; (8025edc <ai_array_to_buffer_fmt+0x8c>)
 8025e8a:	4293      	cmp	r3, r2
 8025e8c:	d0f8      	beq.n	8025e80 <ai_array_to_buffer_fmt+0x30>
 8025e8e:	dd06      	ble.n	8025e9e <ai_array_to_buffer_fmt+0x4e>
 8025e90:	4a13      	ldr	r2, [pc, #76]	; (8025ee0 <ai_array_to_buffer_fmt+0x90>)
 8025e92:	4293      	cmp	r3, r2
 8025e94:	d0f4      	beq.n	8025e80 <ai_array_to_buffer_fmt+0x30>
 8025e96:	320f      	adds	r2, #15
 8025e98:	4293      	cmp	r3, r2
 8025e9a:	d0f1      	beq.n	8025e80 <ai_array_to_buffer_fmt+0x30>
 8025e9c:	e7ef      	b.n	8025e7e <ai_array_to_buffer_fmt+0x2e>
 8025e9e:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 8025ea2:	4293      	cmp	r3, r2
 8025ea4:	d0ec      	beq.n	8025e80 <ai_array_to_buffer_fmt+0x30>
 8025ea6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8025eaa:	4293      	cmp	r3, r2
 8025eac:	d1e7      	bne.n	8025e7e <ai_array_to_buffer_fmt+0x2e>
 8025eae:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8025eb2:	4318      	orrs	r0, r3
 8025eb4:	4770      	bx	lr
 8025eb6:	4b0b      	ldr	r3, [pc, #44]	; (8025ee4 <ai_array_to_buffer_fmt+0x94>)
 8025eb8:	4003      	ands	r3, r0
 8025eba:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8025ebe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8025ec2:	4318      	orrs	r0, r3
 8025ec4:	4770      	bx	lr
 8025ec6:	bf00      	nop
 8025ec8:	00060440 	.word	0x00060440
 8025ecc:	00840447 	.word	0x00840447
 8025ed0:	0084084f 	.word	0x0084084f
 8025ed4:	01821040 	.word	0x01821040
 8025ed8:	00840840 	.word	0x00840840
 8025edc:	00040447 	.word	0x00040447
 8025ee0:	00040840 	.word	0x00040840
 8025ee4:	00803fff 	.word	0x00803fff

08025ee8 <ai_array_get_byte_size>:
 8025ee8:	b1e1      	cbz	r1, 8025f24 <ai_array_get_byte_size+0x3c>
 8025eea:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8025eee:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8025ef2:	b410      	push	{r4}
 8025ef4:	f3c0 3482 	ubfx	r4, r0, #14, #3
 8025ef8:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8025efc:	4423      	add	r3, r4
 8025efe:	2804      	cmp	r0, #4
 8025f00:	fb01 f103 	mul.w	r1, r1, r3
 8025f04:	f101 0107 	add.w	r1, r1, #7
 8025f08:	f021 0107 	bic.w	r1, r1, #7
 8025f0c:	fa21 f102 	lsr.w	r1, r1, r2
 8025f10:	d00a      	beq.n	8025f28 <ai_array_get_byte_size+0x40>
 8025f12:	2808      	cmp	r0, #8
 8025f14:	d101      	bne.n	8025f1a <ai_array_get_byte_size+0x32>
 8025f16:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8025f1a:	3107      	adds	r1, #7
 8025f1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025f20:	08c8      	lsrs	r0, r1, #3
 8025f22:	4770      	bx	lr
 8025f24:	4608      	mov	r0, r1
 8025f26:	4770      	bx	lr
 8025f28:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8025f2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025f30:	3107      	adds	r1, #7
 8025f32:	08c8      	lsrs	r0, r1, #3
 8025f34:	4770      	bx	lr
 8025f36:	bf00      	nop

08025f38 <core_get_broadcasted_shape>:
 8025f38:	b4f0      	push	{r4, r5, r6, r7}
 8025f3a:	680c      	ldr	r4, [r1, #0]
 8025f3c:	6803      	ldr	r3, [r0, #0]
 8025f3e:	f3c4 2417 	ubfx	r4, r4, #8, #24
 8025f42:	f364 231f 	bfi	r3, r4, #8, #24
 8025f46:	6003      	str	r3, [r0, #0]
 8025f48:	b184      	cbz	r4, 8025f6c <core_get_broadcasted_shape+0x34>
 8025f4a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8025f4e:	4423      	add	r3, r4
 8025f50:	009b      	lsls	r3, r3, #2
 8025f52:	684e      	ldr	r6, [r1, #4]
 8025f54:	6855      	ldr	r5, [r2, #4]
 8025f56:	58f7      	ldr	r7, [r6, r3]
 8025f58:	58ed      	ldr	r5, [r5, r3]
 8025f5a:	6846      	ldr	r6, [r0, #4]
 8025f5c:	42bd      	cmp	r5, r7
 8025f5e:	bf38      	it	cc
 8025f60:	463d      	movcc	r5, r7
 8025f62:	3c01      	subs	r4, #1
 8025f64:	50f5      	str	r5, [r6, r3]
 8025f66:	f1a3 0304 	sub.w	r3, r3, #4
 8025f6a:	d1f2      	bne.n	8025f52 <core_get_broadcasted_shape+0x1a>
 8025f6c:	bcf0      	pop	{r4, r5, r6, r7}
 8025f6e:	4770      	bx	lr

08025f70 <core_compute_offsets>:
 8025f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025f74:	680b      	ldr	r3, [r1, #0]
 8025f76:	6804      	ldr	r4, [r0, #0]
 8025f78:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8025f7c:	f363 241f 	bfi	r4, r3, #8, #24
 8025f80:	6004      	str	r4, [r0, #0]
 8025f82:	684b      	ldr	r3, [r1, #4]
 8025f84:	6852      	ldr	r2, [r2, #4]
 8025f86:	681f      	ldr	r7, [r3, #0]
 8025f88:	6811      	ldr	r1, [r2, #0]
 8025f8a:	685c      	ldr	r4, [r3, #4]
 8025f8c:	f8d2 a004 	ldr.w	sl, [r2, #4]
 8025f90:	1a7d      	subs	r5, r7, r1
 8025f92:	689e      	ldr	r6, [r3, #8]
 8025f94:	eba7 0e01 	sub.w	lr, r7, r1
 8025f98:	bf18      	it	ne
 8025f9a:	2501      	movne	r5, #1
 8025f9c:	6891      	ldr	r1, [r2, #8]
 8025f9e:	ebb4 0c0a 	subs.w	ip, r4, sl
 8025fa2:	f8d3 900c 	ldr.w	r9, [r3, #12]
 8025fa6:	68d2      	ldr	r2, [r2, #12]
 8025fa8:	fabe fe8e 	clz	lr, lr
 8025fac:	bf18      	it	ne
 8025fae:	f04f 0c01 	movne.w	ip, #1
 8025fb2:	4554      	cmp	r4, sl
 8025fb4:	bf14      	ite	ne
 8025fb6:	f04f 0800 	movne.w	r8, #0
 8025fba:	f005 0801 	andeq.w	r8, r5, #1
 8025fbe:	ebb6 0b01 	subs.w	fp, r6, r1
 8025fc2:	fb04 f407 	mul.w	r4, r4, r7
 8025fc6:	ea05 050c 	and.w	r5, r5, ip
 8025fca:	6843      	ldr	r3, [r0, #4]
 8025fcc:	bf18      	it	ne
 8025fce:	f04f 0b01 	movne.w	fp, #1
 8025fd2:	fb0c fc07 	mul.w	ip, ip, r7
 8025fd6:	428e      	cmp	r6, r1
 8025fd8:	bf14      	ite	ne
 8025fda:	2100      	movne	r1, #0
 8025fdc:	f005 0101 	andeq.w	r1, r5, #1
 8025fe0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8025fe4:	4591      	cmp	r9, r2
 8025fe6:	bf14      	ite	ne
 8025fe8:	f04f 0a00 	movne.w	sl, #0
 8025fec:	f00b 0a01 	andeq.w	sl, fp, #1
 8025ff0:	ebb9 0202 	subs.w	r2, r9, r2
 8025ff4:	fb0b f704 	mul.w	r7, fp, r4
 8025ff8:	bf18      	it	ne
 8025ffa:	2201      	movne	r2, #1
 8025ffc:	f1ba 0f00 	cmp.w	sl, #0
 8026000:	f8c3 e000 	str.w	lr, [r3]
 8026004:	eba1 0107 	sub.w	r1, r1, r7
 8026008:	eba8 030c 	sub.w	r3, r8, ip
 802600c:	fb04 f406 	mul.w	r4, r4, r6
 8026010:	bf08      	it	eq
 8026012:	2500      	moveq	r5, #0
 8026014:	6846      	ldr	r6, [r0, #4]
 8026016:	4461      	add	r1, ip
 8026018:	6073      	str	r3, [r6, #4]
 802601a:	fb04 5312 	mls	r3, r4, r2, r5
 802601e:	6842      	ldr	r2, [r0, #4]
 8026020:	443b      	add	r3, r7
 8026022:	6091      	str	r1, [r2, #8]
 8026024:	6842      	ldr	r2, [r0, #4]
 8026026:	60d3      	str	r3, [r2, #12]
 8026028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802602c <core_tensor_clone>:
 802602c:	680b      	ldr	r3, [r1, #0]
 802602e:	6882      	ldr	r2, [r0, #8]
 8026030:	6003      	str	r3, [r0, #0]
 8026032:	684b      	ldr	r3, [r1, #4]
 8026034:	6043      	str	r3, [r0, #4]
 8026036:	698b      	ldr	r3, [r1, #24]
 8026038:	6183      	str	r3, [r0, #24]
 802603a:	688b      	ldr	r3, [r1, #8]
 802603c:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8026040:	f363 221f 	bfi	r2, r3, #8, #24
 8026044:	b410      	push	{r4}
 8026046:	6082      	str	r2, [r0, #8]
 8026048:	b15b      	cbz	r3, 8026062 <core_tensor_clone+0x36>
 802604a:	2300      	movs	r3, #0
 802604c:	68cc      	ldr	r4, [r1, #12]
 802604e:	68c2      	ldr	r2, [r0, #12]
 8026050:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8026054:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 8026058:	3301      	adds	r3, #1
 802605a:	6882      	ldr	r2, [r0, #8]
 802605c:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 8026060:	d3f4      	bcc.n	802604c <core_tensor_clone+0x20>
 8026062:	690b      	ldr	r3, [r1, #16]
 8026064:	6902      	ldr	r2, [r0, #16]
 8026066:	f3c3 2317 	ubfx	r3, r3, #8, #24
 802606a:	f363 221f 	bfi	r2, r3, #8, #24
 802606e:	6102      	str	r2, [r0, #16]
 8026070:	b15b      	cbz	r3, 802608a <core_tensor_clone+0x5e>
 8026072:	2300      	movs	r3, #0
 8026074:	694c      	ldr	r4, [r1, #20]
 8026076:	6942      	ldr	r2, [r0, #20]
 8026078:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 802607c:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 8026080:	3301      	adds	r3, #1
 8026082:	6902      	ldr	r2, [r0, #16]
 8026084:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 8026088:	d3f4      	bcc.n	8026074 <core_tensor_clone+0x48>
 802608a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802608e:	4770      	bx	lr

08026090 <core_array_clone>:
 8026090:	b410      	push	{r4}
 8026092:	4604      	mov	r4, r0
 8026094:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 8026096:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 802609a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802609e:	4770      	bx	lr

080260a0 <arm_copy_q7>:
 80260a0:	b470      	push	{r4, r5, r6}
 80260a2:	0896      	lsrs	r6, r2, #2
 80260a4:	d01b      	beq.n	80260de <arm_copy_q7+0x3e>
 80260a6:	00b6      	lsls	r6, r6, #2
 80260a8:	460b      	mov	r3, r1
 80260aa:	1985      	adds	r5, r0, r6
 80260ac:	f850 4b04 	ldr.w	r4, [r0], #4
 80260b0:	42a8      	cmp	r0, r5
 80260b2:	f843 4b04 	str.w	r4, [r3], #4
 80260b6:	d1f9      	bne.n	80260ac <arm_copy_q7+0xc>
 80260b8:	4431      	add	r1, r6
 80260ba:	f012 0203 	ands.w	r2, r2, #3
 80260be:	d00c      	beq.n	80260da <arm_copy_q7+0x3a>
 80260c0:	f995 3000 	ldrsb.w	r3, [r5]
 80260c4:	2a01      	cmp	r2, #1
 80260c6:	700b      	strb	r3, [r1, #0]
 80260c8:	d007      	beq.n	80260da <arm_copy_q7+0x3a>
 80260ca:	f995 3001 	ldrsb.w	r3, [r5, #1]
 80260ce:	2a02      	cmp	r2, #2
 80260d0:	704b      	strb	r3, [r1, #1]
 80260d2:	d002      	beq.n	80260da <arm_copy_q7+0x3a>
 80260d4:	f995 3002 	ldrsb.w	r3, [r5, #2]
 80260d8:	708b      	strb	r3, [r1, #2]
 80260da:	bc70      	pop	{r4, r5, r6}
 80260dc:	4770      	bx	lr
 80260de:	4605      	mov	r5, r0
 80260e0:	e7eb      	b.n	80260ba <arm_copy_q7+0x1a>
 80260e2:	bf00      	nop

080260e4 <arm_fill_q15>:
 80260e4:	b470      	push	{r4, r5, r6}
 80260e6:	b285      	uxth	r5, r0
 80260e8:	0896      	lsrs	r6, r2, #2
 80260ea:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80260ee:	d009      	beq.n	8026104 <arm_fill_q15+0x20>
 80260f0:	460b      	mov	r3, r1
 80260f2:	4634      	mov	r4, r6
 80260f4:	3c01      	subs	r4, #1
 80260f6:	601d      	str	r5, [r3, #0]
 80260f8:	605d      	str	r5, [r3, #4]
 80260fa:	f103 0308 	add.w	r3, r3, #8
 80260fe:	d1f9      	bne.n	80260f4 <arm_fill_q15+0x10>
 8026100:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8026104:	f012 0203 	ands.w	r2, r2, #3
 8026108:	d006      	beq.n	8026118 <arm_fill_q15+0x34>
 802610a:	2a01      	cmp	r2, #1
 802610c:	8008      	strh	r0, [r1, #0]
 802610e:	d003      	beq.n	8026118 <arm_fill_q15+0x34>
 8026110:	2a02      	cmp	r2, #2
 8026112:	8048      	strh	r0, [r1, #2]
 8026114:	bf18      	it	ne
 8026116:	8088      	strhne	r0, [r1, #4]
 8026118:	bc70      	pop	{r4, r5, r6}
 802611a:	4770      	bx	lr

0802611c <__libc_init_array>:
 802611c:	b570      	push	{r4, r5, r6, lr}
 802611e:	4e0d      	ldr	r6, [pc, #52]	; (8026154 <__libc_init_array+0x38>)
 8026120:	4c0d      	ldr	r4, [pc, #52]	; (8026158 <__libc_init_array+0x3c>)
 8026122:	1ba4      	subs	r4, r4, r6
 8026124:	10a4      	asrs	r4, r4, #2
 8026126:	2500      	movs	r5, #0
 8026128:	42a5      	cmp	r5, r4
 802612a:	d109      	bne.n	8026140 <__libc_init_array+0x24>
 802612c:	4e0b      	ldr	r6, [pc, #44]	; (802615c <__libc_init_array+0x40>)
 802612e:	4c0c      	ldr	r4, [pc, #48]	; (8026160 <__libc_init_array+0x44>)
 8026130:	f002 fbb2 	bl	8028898 <_init>
 8026134:	1ba4      	subs	r4, r4, r6
 8026136:	10a4      	asrs	r4, r4, #2
 8026138:	2500      	movs	r5, #0
 802613a:	42a5      	cmp	r5, r4
 802613c:	d105      	bne.n	802614a <__libc_init_array+0x2e>
 802613e:	bd70      	pop	{r4, r5, r6, pc}
 8026140:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8026144:	4798      	blx	r3
 8026146:	3501      	adds	r5, #1
 8026148:	e7ee      	b.n	8026128 <__libc_init_array+0xc>
 802614a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802614e:	4798      	blx	r3
 8026150:	3501      	adds	r5, #1
 8026152:	e7f2      	b.n	802613a <__libc_init_array+0x1e>
 8026154:	080c337c 	.word	0x080c337c
 8026158:	080c337c 	.word	0x080c337c
 802615c:	080c337c 	.word	0x080c337c
 8026160:	080c3380 	.word	0x080c3380

08026164 <malloc>:
 8026164:	4b02      	ldr	r3, [pc, #8]	; (8026170 <malloc+0xc>)
 8026166:	4601      	mov	r1, r0
 8026168:	6818      	ldr	r0, [r3, #0]
 802616a:	f000 b86d 	b.w	8026248 <_malloc_r>
 802616e:	bf00      	nop
 8026170:	24007410 	.word	0x24007410

08026174 <free>:
 8026174:	4b02      	ldr	r3, [pc, #8]	; (8026180 <free+0xc>)
 8026176:	4601      	mov	r1, r0
 8026178:	6818      	ldr	r0, [r3, #0]
 802617a:	f000 b817 	b.w	80261ac <_free_r>
 802617e:	bf00      	nop
 8026180:	24007410 	.word	0x24007410

08026184 <memcpy>:
 8026184:	b510      	push	{r4, lr}
 8026186:	1e43      	subs	r3, r0, #1
 8026188:	440a      	add	r2, r1
 802618a:	4291      	cmp	r1, r2
 802618c:	d100      	bne.n	8026190 <memcpy+0xc>
 802618e:	bd10      	pop	{r4, pc}
 8026190:	f811 4b01 	ldrb.w	r4, [r1], #1
 8026194:	f803 4f01 	strb.w	r4, [r3, #1]!
 8026198:	e7f7      	b.n	802618a <memcpy+0x6>

0802619a <memset>:
 802619a:	4402      	add	r2, r0
 802619c:	4603      	mov	r3, r0
 802619e:	4293      	cmp	r3, r2
 80261a0:	d100      	bne.n	80261a4 <memset+0xa>
 80261a2:	4770      	bx	lr
 80261a4:	f803 1b01 	strb.w	r1, [r3], #1
 80261a8:	e7f9      	b.n	802619e <memset+0x4>
	...

080261ac <_free_r>:
 80261ac:	b538      	push	{r3, r4, r5, lr}
 80261ae:	4605      	mov	r5, r0
 80261b0:	2900      	cmp	r1, #0
 80261b2:	d045      	beq.n	8026240 <_free_r+0x94>
 80261b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80261b8:	1f0c      	subs	r4, r1, #4
 80261ba:	2b00      	cmp	r3, #0
 80261bc:	bfb8      	it	lt
 80261be:	18e4      	addlt	r4, r4, r3
 80261c0:	f001 fb00 	bl	80277c4 <__malloc_lock>
 80261c4:	4a1f      	ldr	r2, [pc, #124]	; (8026244 <_free_r+0x98>)
 80261c6:	6813      	ldr	r3, [r2, #0]
 80261c8:	4610      	mov	r0, r2
 80261ca:	b933      	cbnz	r3, 80261da <_free_r+0x2e>
 80261cc:	6063      	str	r3, [r4, #4]
 80261ce:	6014      	str	r4, [r2, #0]
 80261d0:	4628      	mov	r0, r5
 80261d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80261d6:	f001 baf6 	b.w	80277c6 <__malloc_unlock>
 80261da:	42a3      	cmp	r3, r4
 80261dc:	d90c      	bls.n	80261f8 <_free_r+0x4c>
 80261de:	6821      	ldr	r1, [r4, #0]
 80261e0:	1862      	adds	r2, r4, r1
 80261e2:	4293      	cmp	r3, r2
 80261e4:	bf04      	itt	eq
 80261e6:	681a      	ldreq	r2, [r3, #0]
 80261e8:	685b      	ldreq	r3, [r3, #4]
 80261ea:	6063      	str	r3, [r4, #4]
 80261ec:	bf04      	itt	eq
 80261ee:	1852      	addeq	r2, r2, r1
 80261f0:	6022      	streq	r2, [r4, #0]
 80261f2:	6004      	str	r4, [r0, #0]
 80261f4:	e7ec      	b.n	80261d0 <_free_r+0x24>
 80261f6:	4613      	mov	r3, r2
 80261f8:	685a      	ldr	r2, [r3, #4]
 80261fa:	b10a      	cbz	r2, 8026200 <_free_r+0x54>
 80261fc:	42a2      	cmp	r2, r4
 80261fe:	d9fa      	bls.n	80261f6 <_free_r+0x4a>
 8026200:	6819      	ldr	r1, [r3, #0]
 8026202:	1858      	adds	r0, r3, r1
 8026204:	42a0      	cmp	r0, r4
 8026206:	d10b      	bne.n	8026220 <_free_r+0x74>
 8026208:	6820      	ldr	r0, [r4, #0]
 802620a:	4401      	add	r1, r0
 802620c:	1858      	adds	r0, r3, r1
 802620e:	4282      	cmp	r2, r0
 8026210:	6019      	str	r1, [r3, #0]
 8026212:	d1dd      	bne.n	80261d0 <_free_r+0x24>
 8026214:	6810      	ldr	r0, [r2, #0]
 8026216:	6852      	ldr	r2, [r2, #4]
 8026218:	605a      	str	r2, [r3, #4]
 802621a:	4401      	add	r1, r0
 802621c:	6019      	str	r1, [r3, #0]
 802621e:	e7d7      	b.n	80261d0 <_free_r+0x24>
 8026220:	d902      	bls.n	8026228 <_free_r+0x7c>
 8026222:	230c      	movs	r3, #12
 8026224:	602b      	str	r3, [r5, #0]
 8026226:	e7d3      	b.n	80261d0 <_free_r+0x24>
 8026228:	6820      	ldr	r0, [r4, #0]
 802622a:	1821      	adds	r1, r4, r0
 802622c:	428a      	cmp	r2, r1
 802622e:	bf04      	itt	eq
 8026230:	6811      	ldreq	r1, [r2, #0]
 8026232:	6852      	ldreq	r2, [r2, #4]
 8026234:	6062      	str	r2, [r4, #4]
 8026236:	bf04      	itt	eq
 8026238:	1809      	addeq	r1, r1, r0
 802623a:	6021      	streq	r1, [r4, #0]
 802623c:	605c      	str	r4, [r3, #4]
 802623e:	e7c7      	b.n	80261d0 <_free_r+0x24>
 8026240:	bd38      	pop	{r3, r4, r5, pc}
 8026242:	bf00      	nop
 8026244:	240096a4 	.word	0x240096a4

08026248 <_malloc_r>:
 8026248:	b570      	push	{r4, r5, r6, lr}
 802624a:	1ccd      	adds	r5, r1, #3
 802624c:	f025 0503 	bic.w	r5, r5, #3
 8026250:	3508      	adds	r5, #8
 8026252:	2d0c      	cmp	r5, #12
 8026254:	bf38      	it	cc
 8026256:	250c      	movcc	r5, #12
 8026258:	2d00      	cmp	r5, #0
 802625a:	4606      	mov	r6, r0
 802625c:	db01      	blt.n	8026262 <_malloc_r+0x1a>
 802625e:	42a9      	cmp	r1, r5
 8026260:	d903      	bls.n	802626a <_malloc_r+0x22>
 8026262:	230c      	movs	r3, #12
 8026264:	6033      	str	r3, [r6, #0]
 8026266:	2000      	movs	r0, #0
 8026268:	bd70      	pop	{r4, r5, r6, pc}
 802626a:	f001 faab 	bl	80277c4 <__malloc_lock>
 802626e:	4a21      	ldr	r2, [pc, #132]	; (80262f4 <_malloc_r+0xac>)
 8026270:	6814      	ldr	r4, [r2, #0]
 8026272:	4621      	mov	r1, r4
 8026274:	b991      	cbnz	r1, 802629c <_malloc_r+0x54>
 8026276:	4c20      	ldr	r4, [pc, #128]	; (80262f8 <_malloc_r+0xb0>)
 8026278:	6823      	ldr	r3, [r4, #0]
 802627a:	b91b      	cbnz	r3, 8026284 <_malloc_r+0x3c>
 802627c:	4630      	mov	r0, r6
 802627e:	f000 fc77 	bl	8026b70 <_sbrk_r>
 8026282:	6020      	str	r0, [r4, #0]
 8026284:	4629      	mov	r1, r5
 8026286:	4630      	mov	r0, r6
 8026288:	f000 fc72 	bl	8026b70 <_sbrk_r>
 802628c:	1c43      	adds	r3, r0, #1
 802628e:	d124      	bne.n	80262da <_malloc_r+0x92>
 8026290:	230c      	movs	r3, #12
 8026292:	6033      	str	r3, [r6, #0]
 8026294:	4630      	mov	r0, r6
 8026296:	f001 fa96 	bl	80277c6 <__malloc_unlock>
 802629a:	e7e4      	b.n	8026266 <_malloc_r+0x1e>
 802629c:	680b      	ldr	r3, [r1, #0]
 802629e:	1b5b      	subs	r3, r3, r5
 80262a0:	d418      	bmi.n	80262d4 <_malloc_r+0x8c>
 80262a2:	2b0b      	cmp	r3, #11
 80262a4:	d90f      	bls.n	80262c6 <_malloc_r+0x7e>
 80262a6:	600b      	str	r3, [r1, #0]
 80262a8:	50cd      	str	r5, [r1, r3]
 80262aa:	18cc      	adds	r4, r1, r3
 80262ac:	4630      	mov	r0, r6
 80262ae:	f001 fa8a 	bl	80277c6 <__malloc_unlock>
 80262b2:	f104 000b 	add.w	r0, r4, #11
 80262b6:	1d23      	adds	r3, r4, #4
 80262b8:	f020 0007 	bic.w	r0, r0, #7
 80262bc:	1ac3      	subs	r3, r0, r3
 80262be:	d0d3      	beq.n	8026268 <_malloc_r+0x20>
 80262c0:	425a      	negs	r2, r3
 80262c2:	50e2      	str	r2, [r4, r3]
 80262c4:	e7d0      	b.n	8026268 <_malloc_r+0x20>
 80262c6:	428c      	cmp	r4, r1
 80262c8:	684b      	ldr	r3, [r1, #4]
 80262ca:	bf16      	itet	ne
 80262cc:	6063      	strne	r3, [r4, #4]
 80262ce:	6013      	streq	r3, [r2, #0]
 80262d0:	460c      	movne	r4, r1
 80262d2:	e7eb      	b.n	80262ac <_malloc_r+0x64>
 80262d4:	460c      	mov	r4, r1
 80262d6:	6849      	ldr	r1, [r1, #4]
 80262d8:	e7cc      	b.n	8026274 <_malloc_r+0x2c>
 80262da:	1cc4      	adds	r4, r0, #3
 80262dc:	f024 0403 	bic.w	r4, r4, #3
 80262e0:	42a0      	cmp	r0, r4
 80262e2:	d005      	beq.n	80262f0 <_malloc_r+0xa8>
 80262e4:	1a21      	subs	r1, r4, r0
 80262e6:	4630      	mov	r0, r6
 80262e8:	f000 fc42 	bl	8026b70 <_sbrk_r>
 80262ec:	3001      	adds	r0, #1
 80262ee:	d0cf      	beq.n	8026290 <_malloc_r+0x48>
 80262f0:	6025      	str	r5, [r4, #0]
 80262f2:	e7db      	b.n	80262ac <_malloc_r+0x64>
 80262f4:	240096a4 	.word	0x240096a4
 80262f8:	240096a8 	.word	0x240096a8

080262fc <__cvt>:
 80262fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80262fe:	ed2d 8b02 	vpush	{d8}
 8026302:	eeb0 8b40 	vmov.f64	d8, d0
 8026306:	b085      	sub	sp, #20
 8026308:	4617      	mov	r7, r2
 802630a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802630c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 802630e:	ee18 2a90 	vmov	r2, s17
 8026312:	f025 0520 	bic.w	r5, r5, #32
 8026316:	2a00      	cmp	r2, #0
 8026318:	bfb6      	itet	lt
 802631a:	222d      	movlt	r2, #45	; 0x2d
 802631c:	2200      	movge	r2, #0
 802631e:	eeb1 8b40 	vneglt.f64	d8, d0
 8026322:	2d46      	cmp	r5, #70	; 0x46
 8026324:	460c      	mov	r4, r1
 8026326:	701a      	strb	r2, [r3, #0]
 8026328:	d004      	beq.n	8026334 <__cvt+0x38>
 802632a:	2d45      	cmp	r5, #69	; 0x45
 802632c:	d100      	bne.n	8026330 <__cvt+0x34>
 802632e:	3401      	adds	r4, #1
 8026330:	2102      	movs	r1, #2
 8026332:	e000      	b.n	8026336 <__cvt+0x3a>
 8026334:	2103      	movs	r1, #3
 8026336:	ab03      	add	r3, sp, #12
 8026338:	9301      	str	r3, [sp, #4]
 802633a:	ab02      	add	r3, sp, #8
 802633c:	9300      	str	r3, [sp, #0]
 802633e:	4622      	mov	r2, r4
 8026340:	4633      	mov	r3, r6
 8026342:	eeb0 0b48 	vmov.f64	d0, d8
 8026346:	f000 fce3 	bl	8026d10 <_dtoa_r>
 802634a:	2d47      	cmp	r5, #71	; 0x47
 802634c:	d101      	bne.n	8026352 <__cvt+0x56>
 802634e:	07fb      	lsls	r3, r7, #31
 8026350:	d51e      	bpl.n	8026390 <__cvt+0x94>
 8026352:	2d46      	cmp	r5, #70	; 0x46
 8026354:	eb00 0304 	add.w	r3, r0, r4
 8026358:	d10c      	bne.n	8026374 <__cvt+0x78>
 802635a:	7802      	ldrb	r2, [r0, #0]
 802635c:	2a30      	cmp	r2, #48	; 0x30
 802635e:	d107      	bne.n	8026370 <__cvt+0x74>
 8026360:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8026364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026368:	bf1c      	itt	ne
 802636a:	f1c4 0401 	rsbne	r4, r4, #1
 802636e:	6034      	strne	r4, [r6, #0]
 8026370:	6832      	ldr	r2, [r6, #0]
 8026372:	4413      	add	r3, r2
 8026374:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8026378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802637c:	d007      	beq.n	802638e <__cvt+0x92>
 802637e:	2130      	movs	r1, #48	; 0x30
 8026380:	9a03      	ldr	r2, [sp, #12]
 8026382:	429a      	cmp	r2, r3
 8026384:	d204      	bcs.n	8026390 <__cvt+0x94>
 8026386:	1c54      	adds	r4, r2, #1
 8026388:	9403      	str	r4, [sp, #12]
 802638a:	7011      	strb	r1, [r2, #0]
 802638c:	e7f8      	b.n	8026380 <__cvt+0x84>
 802638e:	9303      	str	r3, [sp, #12]
 8026390:	9b03      	ldr	r3, [sp, #12]
 8026392:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8026394:	1a1b      	subs	r3, r3, r0
 8026396:	6013      	str	r3, [r2, #0]
 8026398:	b005      	add	sp, #20
 802639a:	ecbd 8b02 	vpop	{d8}
 802639e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080263a0 <__exponent>:
 80263a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80263a2:	2900      	cmp	r1, #0
 80263a4:	4604      	mov	r4, r0
 80263a6:	bfba      	itte	lt
 80263a8:	4249      	neglt	r1, r1
 80263aa:	232d      	movlt	r3, #45	; 0x2d
 80263ac:	232b      	movge	r3, #43	; 0x2b
 80263ae:	2909      	cmp	r1, #9
 80263b0:	f804 2b02 	strb.w	r2, [r4], #2
 80263b4:	7043      	strb	r3, [r0, #1]
 80263b6:	dd20      	ble.n	80263fa <__exponent+0x5a>
 80263b8:	f10d 0307 	add.w	r3, sp, #7
 80263bc:	461f      	mov	r7, r3
 80263be:	260a      	movs	r6, #10
 80263c0:	fb91 f5f6 	sdiv	r5, r1, r6
 80263c4:	fb06 1115 	mls	r1, r6, r5, r1
 80263c8:	3130      	adds	r1, #48	; 0x30
 80263ca:	2d09      	cmp	r5, #9
 80263cc:	f803 1c01 	strb.w	r1, [r3, #-1]
 80263d0:	f103 32ff 	add.w	r2, r3, #4294967295
 80263d4:	4629      	mov	r1, r5
 80263d6:	dc09      	bgt.n	80263ec <__exponent+0x4c>
 80263d8:	3130      	adds	r1, #48	; 0x30
 80263da:	3b02      	subs	r3, #2
 80263dc:	f802 1c01 	strb.w	r1, [r2, #-1]
 80263e0:	42bb      	cmp	r3, r7
 80263e2:	4622      	mov	r2, r4
 80263e4:	d304      	bcc.n	80263f0 <__exponent+0x50>
 80263e6:	1a10      	subs	r0, r2, r0
 80263e8:	b003      	add	sp, #12
 80263ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80263ec:	4613      	mov	r3, r2
 80263ee:	e7e7      	b.n	80263c0 <__exponent+0x20>
 80263f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80263f4:	f804 2b01 	strb.w	r2, [r4], #1
 80263f8:	e7f2      	b.n	80263e0 <__exponent+0x40>
 80263fa:	2330      	movs	r3, #48	; 0x30
 80263fc:	4419      	add	r1, r3
 80263fe:	7083      	strb	r3, [r0, #2]
 8026400:	1d02      	adds	r2, r0, #4
 8026402:	70c1      	strb	r1, [r0, #3]
 8026404:	e7ef      	b.n	80263e6 <__exponent+0x46>
	...

08026408 <_printf_float>:
 8026408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802640c:	b08d      	sub	sp, #52	; 0x34
 802640e:	460c      	mov	r4, r1
 8026410:	4616      	mov	r6, r2
 8026412:	461f      	mov	r7, r3
 8026414:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8026418:	4605      	mov	r5, r0
 802641a:	f001 f9c5 	bl	80277a8 <_localeconv_r>
 802641e:	f8d0 b000 	ldr.w	fp, [r0]
 8026422:	4658      	mov	r0, fp
 8026424:	f7d9 ff66 	bl	80002f4 <strlen>
 8026428:	2300      	movs	r3, #0
 802642a:	930a      	str	r3, [sp, #40]	; 0x28
 802642c:	f8d8 3000 	ldr.w	r3, [r8]
 8026430:	9005      	str	r0, [sp, #20]
 8026432:	3307      	adds	r3, #7
 8026434:	f023 0307 	bic.w	r3, r3, #7
 8026438:	f103 0108 	add.w	r1, r3, #8
 802643c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8026440:	6822      	ldr	r2, [r4, #0]
 8026442:	f8c8 1000 	str.w	r1, [r8]
 8026446:	e9d3 0100 	ldrd	r0, r1, [r3]
 802644a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 802644e:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 80266d8 <_printf_float+0x2d0>
 8026452:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8026456:	eeb0 6bc0 	vabs.f64	d6, d0
 802645a:	eeb4 6b47 	vcmp.f64	d6, d7
 802645e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026462:	dd24      	ble.n	80264ae <_printf_float+0xa6>
 8026464:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8026468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802646c:	d502      	bpl.n	8026474 <_printf_float+0x6c>
 802646e:	232d      	movs	r3, #45	; 0x2d
 8026470:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8026474:	499a      	ldr	r1, [pc, #616]	; (80266e0 <_printf_float+0x2d8>)
 8026476:	4b9b      	ldr	r3, [pc, #620]	; (80266e4 <_printf_float+0x2dc>)
 8026478:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 802647c:	bf8c      	ite	hi
 802647e:	4688      	movhi	r8, r1
 8026480:	4698      	movls	r8, r3
 8026482:	f022 0204 	bic.w	r2, r2, #4
 8026486:	2303      	movs	r3, #3
 8026488:	6123      	str	r3, [r4, #16]
 802648a:	6022      	str	r2, [r4, #0]
 802648c:	f04f 0a00 	mov.w	sl, #0
 8026490:	9700      	str	r7, [sp, #0]
 8026492:	4633      	mov	r3, r6
 8026494:	aa0b      	add	r2, sp, #44	; 0x2c
 8026496:	4621      	mov	r1, r4
 8026498:	4628      	mov	r0, r5
 802649a:	f000 f9e1 	bl	8026860 <_printf_common>
 802649e:	3001      	adds	r0, #1
 80264a0:	f040 8089 	bne.w	80265b6 <_printf_float+0x1ae>
 80264a4:	f04f 30ff 	mov.w	r0, #4294967295
 80264a8:	b00d      	add	sp, #52	; 0x34
 80264aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80264ae:	eeb4 0b40 	vcmp.f64	d0, d0
 80264b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80264b6:	d702      	bvc.n	80264be <_printf_float+0xb6>
 80264b8:	498b      	ldr	r1, [pc, #556]	; (80266e8 <_printf_float+0x2e0>)
 80264ba:	4b8c      	ldr	r3, [pc, #560]	; (80266ec <_printf_float+0x2e4>)
 80264bc:	e7dc      	b.n	8026478 <_printf_float+0x70>
 80264be:	6861      	ldr	r1, [r4, #4]
 80264c0:	1c4b      	adds	r3, r1, #1
 80264c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80264c6:	ab0a      	add	r3, sp, #40	; 0x28
 80264c8:	a809      	add	r0, sp, #36	; 0x24
 80264ca:	d13b      	bne.n	8026544 <_printf_float+0x13c>
 80264cc:	2106      	movs	r1, #6
 80264ce:	6061      	str	r1, [r4, #4]
 80264d0:	f04f 0c00 	mov.w	ip, #0
 80264d4:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80264d8:	e9cd 0900 	strd	r0, r9, [sp]
 80264dc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80264e0:	6022      	str	r2, [r4, #0]
 80264e2:	6861      	ldr	r1, [r4, #4]
 80264e4:	4628      	mov	r0, r5
 80264e6:	f7ff ff09 	bl	80262fc <__cvt>
 80264ea:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 80264ee:	2b47      	cmp	r3, #71	; 0x47
 80264f0:	4680      	mov	r8, r0
 80264f2:	d109      	bne.n	8026508 <_printf_float+0x100>
 80264f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80264f6:	1cd8      	adds	r0, r3, #3
 80264f8:	db02      	blt.n	8026500 <_printf_float+0xf8>
 80264fa:	6862      	ldr	r2, [r4, #4]
 80264fc:	4293      	cmp	r3, r2
 80264fe:	dd47      	ble.n	8026590 <_printf_float+0x188>
 8026500:	f1a9 0902 	sub.w	r9, r9, #2
 8026504:	fa5f f989 	uxtb.w	r9, r9
 8026508:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 802650c:	9909      	ldr	r1, [sp, #36]	; 0x24
 802650e:	d824      	bhi.n	802655a <_printf_float+0x152>
 8026510:	3901      	subs	r1, #1
 8026512:	464a      	mov	r2, r9
 8026514:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8026518:	9109      	str	r1, [sp, #36]	; 0x24
 802651a:	f7ff ff41 	bl	80263a0 <__exponent>
 802651e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026520:	1813      	adds	r3, r2, r0
 8026522:	2a01      	cmp	r2, #1
 8026524:	4682      	mov	sl, r0
 8026526:	6123      	str	r3, [r4, #16]
 8026528:	dc02      	bgt.n	8026530 <_printf_float+0x128>
 802652a:	6822      	ldr	r2, [r4, #0]
 802652c:	07d1      	lsls	r1, r2, #31
 802652e:	d501      	bpl.n	8026534 <_printf_float+0x12c>
 8026530:	3301      	adds	r3, #1
 8026532:	6123      	str	r3, [r4, #16]
 8026534:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8026538:	2b00      	cmp	r3, #0
 802653a:	d0a9      	beq.n	8026490 <_printf_float+0x88>
 802653c:	232d      	movs	r3, #45	; 0x2d
 802653e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8026542:	e7a5      	b.n	8026490 <_printf_float+0x88>
 8026544:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8026548:	f000 8178 	beq.w	802683c <_printf_float+0x434>
 802654c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8026550:	d1be      	bne.n	80264d0 <_printf_float+0xc8>
 8026552:	2900      	cmp	r1, #0
 8026554:	d1bc      	bne.n	80264d0 <_printf_float+0xc8>
 8026556:	2101      	movs	r1, #1
 8026558:	e7b9      	b.n	80264ce <_printf_float+0xc6>
 802655a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 802655e:	d119      	bne.n	8026594 <_printf_float+0x18c>
 8026560:	2900      	cmp	r1, #0
 8026562:	6863      	ldr	r3, [r4, #4]
 8026564:	dd0c      	ble.n	8026580 <_printf_float+0x178>
 8026566:	6121      	str	r1, [r4, #16]
 8026568:	b913      	cbnz	r3, 8026570 <_printf_float+0x168>
 802656a:	6822      	ldr	r2, [r4, #0]
 802656c:	07d2      	lsls	r2, r2, #31
 802656e:	d502      	bpl.n	8026576 <_printf_float+0x16e>
 8026570:	3301      	adds	r3, #1
 8026572:	440b      	add	r3, r1
 8026574:	6123      	str	r3, [r4, #16]
 8026576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026578:	65a3      	str	r3, [r4, #88]	; 0x58
 802657a:	f04f 0a00 	mov.w	sl, #0
 802657e:	e7d9      	b.n	8026534 <_printf_float+0x12c>
 8026580:	b913      	cbnz	r3, 8026588 <_printf_float+0x180>
 8026582:	6822      	ldr	r2, [r4, #0]
 8026584:	07d0      	lsls	r0, r2, #31
 8026586:	d501      	bpl.n	802658c <_printf_float+0x184>
 8026588:	3302      	adds	r3, #2
 802658a:	e7f3      	b.n	8026574 <_printf_float+0x16c>
 802658c:	2301      	movs	r3, #1
 802658e:	e7f1      	b.n	8026574 <_printf_float+0x16c>
 8026590:	f04f 0967 	mov.w	r9, #103	; 0x67
 8026594:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8026598:	4293      	cmp	r3, r2
 802659a:	db05      	blt.n	80265a8 <_printf_float+0x1a0>
 802659c:	6822      	ldr	r2, [r4, #0]
 802659e:	6123      	str	r3, [r4, #16]
 80265a0:	07d1      	lsls	r1, r2, #31
 80265a2:	d5e8      	bpl.n	8026576 <_printf_float+0x16e>
 80265a4:	3301      	adds	r3, #1
 80265a6:	e7e5      	b.n	8026574 <_printf_float+0x16c>
 80265a8:	2b00      	cmp	r3, #0
 80265aa:	bfd4      	ite	le
 80265ac:	f1c3 0302 	rsble	r3, r3, #2
 80265b0:	2301      	movgt	r3, #1
 80265b2:	4413      	add	r3, r2
 80265b4:	e7de      	b.n	8026574 <_printf_float+0x16c>
 80265b6:	6823      	ldr	r3, [r4, #0]
 80265b8:	055a      	lsls	r2, r3, #21
 80265ba:	d407      	bmi.n	80265cc <_printf_float+0x1c4>
 80265bc:	6923      	ldr	r3, [r4, #16]
 80265be:	4642      	mov	r2, r8
 80265c0:	4631      	mov	r1, r6
 80265c2:	4628      	mov	r0, r5
 80265c4:	47b8      	blx	r7
 80265c6:	3001      	adds	r0, #1
 80265c8:	d12a      	bne.n	8026620 <_printf_float+0x218>
 80265ca:	e76b      	b.n	80264a4 <_printf_float+0x9c>
 80265cc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80265d0:	f240 80de 	bls.w	8026790 <_printf_float+0x388>
 80265d4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80265d8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80265dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80265e0:	d133      	bne.n	802664a <_printf_float+0x242>
 80265e2:	2301      	movs	r3, #1
 80265e4:	4a42      	ldr	r2, [pc, #264]	; (80266f0 <_printf_float+0x2e8>)
 80265e6:	4631      	mov	r1, r6
 80265e8:	4628      	mov	r0, r5
 80265ea:	47b8      	blx	r7
 80265ec:	3001      	adds	r0, #1
 80265ee:	f43f af59 	beq.w	80264a4 <_printf_float+0x9c>
 80265f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80265f6:	429a      	cmp	r2, r3
 80265f8:	db02      	blt.n	8026600 <_printf_float+0x1f8>
 80265fa:	6823      	ldr	r3, [r4, #0]
 80265fc:	07d8      	lsls	r0, r3, #31
 80265fe:	d50f      	bpl.n	8026620 <_printf_float+0x218>
 8026600:	9b05      	ldr	r3, [sp, #20]
 8026602:	465a      	mov	r2, fp
 8026604:	4631      	mov	r1, r6
 8026606:	4628      	mov	r0, r5
 8026608:	47b8      	blx	r7
 802660a:	3001      	adds	r0, #1
 802660c:	f43f af4a 	beq.w	80264a4 <_printf_float+0x9c>
 8026610:	f04f 0800 	mov.w	r8, #0
 8026614:	f104 091a 	add.w	r9, r4, #26
 8026618:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802661a:	3b01      	subs	r3, #1
 802661c:	4543      	cmp	r3, r8
 802661e:	dc09      	bgt.n	8026634 <_printf_float+0x22c>
 8026620:	6823      	ldr	r3, [r4, #0]
 8026622:	079b      	lsls	r3, r3, #30
 8026624:	f100 8105 	bmi.w	8026832 <_printf_float+0x42a>
 8026628:	68e0      	ldr	r0, [r4, #12]
 802662a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802662c:	4298      	cmp	r0, r3
 802662e:	bfb8      	it	lt
 8026630:	4618      	movlt	r0, r3
 8026632:	e739      	b.n	80264a8 <_printf_float+0xa0>
 8026634:	2301      	movs	r3, #1
 8026636:	464a      	mov	r2, r9
 8026638:	4631      	mov	r1, r6
 802663a:	4628      	mov	r0, r5
 802663c:	47b8      	blx	r7
 802663e:	3001      	adds	r0, #1
 8026640:	f43f af30 	beq.w	80264a4 <_printf_float+0x9c>
 8026644:	f108 0801 	add.w	r8, r8, #1
 8026648:	e7e6      	b.n	8026618 <_printf_float+0x210>
 802664a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802664c:	2b00      	cmp	r3, #0
 802664e:	dc2b      	bgt.n	80266a8 <_printf_float+0x2a0>
 8026650:	2301      	movs	r3, #1
 8026652:	4a27      	ldr	r2, [pc, #156]	; (80266f0 <_printf_float+0x2e8>)
 8026654:	4631      	mov	r1, r6
 8026656:	4628      	mov	r0, r5
 8026658:	47b8      	blx	r7
 802665a:	3001      	adds	r0, #1
 802665c:	f43f af22 	beq.w	80264a4 <_printf_float+0x9c>
 8026660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026662:	b923      	cbnz	r3, 802666e <_printf_float+0x266>
 8026664:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026666:	b913      	cbnz	r3, 802666e <_printf_float+0x266>
 8026668:	6823      	ldr	r3, [r4, #0]
 802666a:	07d9      	lsls	r1, r3, #31
 802666c:	d5d8      	bpl.n	8026620 <_printf_float+0x218>
 802666e:	9b05      	ldr	r3, [sp, #20]
 8026670:	465a      	mov	r2, fp
 8026672:	4631      	mov	r1, r6
 8026674:	4628      	mov	r0, r5
 8026676:	47b8      	blx	r7
 8026678:	3001      	adds	r0, #1
 802667a:	f43f af13 	beq.w	80264a4 <_printf_float+0x9c>
 802667e:	f04f 0900 	mov.w	r9, #0
 8026682:	f104 0a1a 	add.w	sl, r4, #26
 8026686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026688:	425b      	negs	r3, r3
 802668a:	454b      	cmp	r3, r9
 802668c:	dc01      	bgt.n	8026692 <_printf_float+0x28a>
 802668e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026690:	e795      	b.n	80265be <_printf_float+0x1b6>
 8026692:	2301      	movs	r3, #1
 8026694:	4652      	mov	r2, sl
 8026696:	4631      	mov	r1, r6
 8026698:	4628      	mov	r0, r5
 802669a:	47b8      	blx	r7
 802669c:	3001      	adds	r0, #1
 802669e:	f43f af01 	beq.w	80264a4 <_printf_float+0x9c>
 80266a2:	f109 0901 	add.w	r9, r9, #1
 80266a6:	e7ee      	b.n	8026686 <_printf_float+0x27e>
 80266a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80266aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80266ac:	429a      	cmp	r2, r3
 80266ae:	bfa8      	it	ge
 80266b0:	461a      	movge	r2, r3
 80266b2:	2a00      	cmp	r2, #0
 80266b4:	4691      	mov	r9, r2
 80266b6:	dd07      	ble.n	80266c8 <_printf_float+0x2c0>
 80266b8:	4613      	mov	r3, r2
 80266ba:	4631      	mov	r1, r6
 80266bc:	4642      	mov	r2, r8
 80266be:	4628      	mov	r0, r5
 80266c0:	47b8      	blx	r7
 80266c2:	3001      	adds	r0, #1
 80266c4:	f43f aeee 	beq.w	80264a4 <_printf_float+0x9c>
 80266c8:	f104 031a 	add.w	r3, r4, #26
 80266cc:	f04f 0a00 	mov.w	sl, #0
 80266d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80266d4:	9307      	str	r3, [sp, #28]
 80266d6:	e017      	b.n	8026708 <_printf_float+0x300>
 80266d8:	ffffffff 	.word	0xffffffff
 80266dc:	7fefffff 	.word	0x7fefffff
 80266e0:	080c2ea8 	.word	0x080c2ea8
 80266e4:	080c2ea4 	.word	0x080c2ea4
 80266e8:	080c2eb0 	.word	0x080c2eb0
 80266ec:	080c2eac 	.word	0x080c2eac
 80266f0:	080c2eb4 	.word	0x080c2eb4
 80266f4:	2301      	movs	r3, #1
 80266f6:	9a07      	ldr	r2, [sp, #28]
 80266f8:	4631      	mov	r1, r6
 80266fa:	4628      	mov	r0, r5
 80266fc:	47b8      	blx	r7
 80266fe:	3001      	adds	r0, #1
 8026700:	f43f aed0 	beq.w	80264a4 <_printf_float+0x9c>
 8026704:	f10a 0a01 	add.w	sl, sl, #1
 8026708:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802670a:	9306      	str	r3, [sp, #24]
 802670c:	eba3 0309 	sub.w	r3, r3, r9
 8026710:	4553      	cmp	r3, sl
 8026712:	dcef      	bgt.n	80266f4 <_printf_float+0x2ec>
 8026714:	9b06      	ldr	r3, [sp, #24]
 8026716:	4498      	add	r8, r3
 8026718:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802671c:	429a      	cmp	r2, r3
 802671e:	db15      	blt.n	802674c <_printf_float+0x344>
 8026720:	6823      	ldr	r3, [r4, #0]
 8026722:	07da      	lsls	r2, r3, #31
 8026724:	d412      	bmi.n	802674c <_printf_float+0x344>
 8026726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026728:	9a06      	ldr	r2, [sp, #24]
 802672a:	9909      	ldr	r1, [sp, #36]	; 0x24
 802672c:	1a9a      	subs	r2, r3, r2
 802672e:	eba3 0a01 	sub.w	sl, r3, r1
 8026732:	4592      	cmp	sl, r2
 8026734:	bfa8      	it	ge
 8026736:	4692      	movge	sl, r2
 8026738:	f1ba 0f00 	cmp.w	sl, #0
 802673c:	dc0e      	bgt.n	802675c <_printf_float+0x354>
 802673e:	f04f 0800 	mov.w	r8, #0
 8026742:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8026746:	f104 091a 	add.w	r9, r4, #26
 802674a:	e019      	b.n	8026780 <_printf_float+0x378>
 802674c:	9b05      	ldr	r3, [sp, #20]
 802674e:	465a      	mov	r2, fp
 8026750:	4631      	mov	r1, r6
 8026752:	4628      	mov	r0, r5
 8026754:	47b8      	blx	r7
 8026756:	3001      	adds	r0, #1
 8026758:	d1e5      	bne.n	8026726 <_printf_float+0x31e>
 802675a:	e6a3      	b.n	80264a4 <_printf_float+0x9c>
 802675c:	4653      	mov	r3, sl
 802675e:	4642      	mov	r2, r8
 8026760:	4631      	mov	r1, r6
 8026762:	4628      	mov	r0, r5
 8026764:	47b8      	blx	r7
 8026766:	3001      	adds	r0, #1
 8026768:	d1e9      	bne.n	802673e <_printf_float+0x336>
 802676a:	e69b      	b.n	80264a4 <_printf_float+0x9c>
 802676c:	2301      	movs	r3, #1
 802676e:	464a      	mov	r2, r9
 8026770:	4631      	mov	r1, r6
 8026772:	4628      	mov	r0, r5
 8026774:	47b8      	blx	r7
 8026776:	3001      	adds	r0, #1
 8026778:	f43f ae94 	beq.w	80264a4 <_printf_float+0x9c>
 802677c:	f108 0801 	add.w	r8, r8, #1
 8026780:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8026784:	1a9b      	subs	r3, r3, r2
 8026786:	eba3 030a 	sub.w	r3, r3, sl
 802678a:	4543      	cmp	r3, r8
 802678c:	dcee      	bgt.n	802676c <_printf_float+0x364>
 802678e:	e747      	b.n	8026620 <_printf_float+0x218>
 8026790:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026792:	2a01      	cmp	r2, #1
 8026794:	dc01      	bgt.n	802679a <_printf_float+0x392>
 8026796:	07db      	lsls	r3, r3, #31
 8026798:	d539      	bpl.n	802680e <_printf_float+0x406>
 802679a:	2301      	movs	r3, #1
 802679c:	4642      	mov	r2, r8
 802679e:	4631      	mov	r1, r6
 80267a0:	4628      	mov	r0, r5
 80267a2:	47b8      	blx	r7
 80267a4:	3001      	adds	r0, #1
 80267a6:	f43f ae7d 	beq.w	80264a4 <_printf_float+0x9c>
 80267aa:	9b05      	ldr	r3, [sp, #20]
 80267ac:	465a      	mov	r2, fp
 80267ae:	4631      	mov	r1, r6
 80267b0:	4628      	mov	r0, r5
 80267b2:	47b8      	blx	r7
 80267b4:	3001      	adds	r0, #1
 80267b6:	f108 0801 	add.w	r8, r8, #1
 80267ba:	f43f ae73 	beq.w	80264a4 <_printf_float+0x9c>
 80267be:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80267c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80267c4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80267c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80267cc:	f103 33ff 	add.w	r3, r3, #4294967295
 80267d0:	d018      	beq.n	8026804 <_printf_float+0x3fc>
 80267d2:	4642      	mov	r2, r8
 80267d4:	4631      	mov	r1, r6
 80267d6:	4628      	mov	r0, r5
 80267d8:	47b8      	blx	r7
 80267da:	3001      	adds	r0, #1
 80267dc:	d10e      	bne.n	80267fc <_printf_float+0x3f4>
 80267de:	e661      	b.n	80264a4 <_printf_float+0x9c>
 80267e0:	2301      	movs	r3, #1
 80267e2:	464a      	mov	r2, r9
 80267e4:	4631      	mov	r1, r6
 80267e6:	4628      	mov	r0, r5
 80267e8:	47b8      	blx	r7
 80267ea:	3001      	adds	r0, #1
 80267ec:	f43f ae5a 	beq.w	80264a4 <_printf_float+0x9c>
 80267f0:	f108 0801 	add.w	r8, r8, #1
 80267f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80267f6:	3b01      	subs	r3, #1
 80267f8:	4543      	cmp	r3, r8
 80267fa:	dcf1      	bgt.n	80267e0 <_printf_float+0x3d8>
 80267fc:	4653      	mov	r3, sl
 80267fe:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8026802:	e6dd      	b.n	80265c0 <_printf_float+0x1b8>
 8026804:	f04f 0800 	mov.w	r8, #0
 8026808:	f104 091a 	add.w	r9, r4, #26
 802680c:	e7f2      	b.n	80267f4 <_printf_float+0x3ec>
 802680e:	2301      	movs	r3, #1
 8026810:	e7df      	b.n	80267d2 <_printf_float+0x3ca>
 8026812:	2301      	movs	r3, #1
 8026814:	464a      	mov	r2, r9
 8026816:	4631      	mov	r1, r6
 8026818:	4628      	mov	r0, r5
 802681a:	47b8      	blx	r7
 802681c:	3001      	adds	r0, #1
 802681e:	f43f ae41 	beq.w	80264a4 <_printf_float+0x9c>
 8026822:	f108 0801 	add.w	r8, r8, #1
 8026826:	68e3      	ldr	r3, [r4, #12]
 8026828:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802682a:	1a9b      	subs	r3, r3, r2
 802682c:	4543      	cmp	r3, r8
 802682e:	dcf0      	bgt.n	8026812 <_printf_float+0x40a>
 8026830:	e6fa      	b.n	8026628 <_printf_float+0x220>
 8026832:	f04f 0800 	mov.w	r8, #0
 8026836:	f104 0919 	add.w	r9, r4, #25
 802683a:	e7f4      	b.n	8026826 <_printf_float+0x41e>
 802683c:	2900      	cmp	r1, #0
 802683e:	f43f ae8a 	beq.w	8026556 <_printf_float+0x14e>
 8026842:	f04f 0c00 	mov.w	ip, #0
 8026846:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 802684a:	e9cd 0900 	strd	r0, r9, [sp]
 802684e:	6022      	str	r2, [r4, #0]
 8026850:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8026854:	4628      	mov	r0, r5
 8026856:	f7ff fd51 	bl	80262fc <__cvt>
 802685a:	4680      	mov	r8, r0
 802685c:	e64a      	b.n	80264f4 <_printf_float+0xec>
 802685e:	bf00      	nop

08026860 <_printf_common>:
 8026860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026864:	4691      	mov	r9, r2
 8026866:	461f      	mov	r7, r3
 8026868:	688a      	ldr	r2, [r1, #8]
 802686a:	690b      	ldr	r3, [r1, #16]
 802686c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8026870:	4293      	cmp	r3, r2
 8026872:	bfb8      	it	lt
 8026874:	4613      	movlt	r3, r2
 8026876:	f8c9 3000 	str.w	r3, [r9]
 802687a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802687e:	4606      	mov	r6, r0
 8026880:	460c      	mov	r4, r1
 8026882:	b112      	cbz	r2, 802688a <_printf_common+0x2a>
 8026884:	3301      	adds	r3, #1
 8026886:	f8c9 3000 	str.w	r3, [r9]
 802688a:	6823      	ldr	r3, [r4, #0]
 802688c:	0699      	lsls	r1, r3, #26
 802688e:	bf42      	ittt	mi
 8026890:	f8d9 3000 	ldrmi.w	r3, [r9]
 8026894:	3302      	addmi	r3, #2
 8026896:	f8c9 3000 	strmi.w	r3, [r9]
 802689a:	6825      	ldr	r5, [r4, #0]
 802689c:	f015 0506 	ands.w	r5, r5, #6
 80268a0:	d107      	bne.n	80268b2 <_printf_common+0x52>
 80268a2:	f104 0a19 	add.w	sl, r4, #25
 80268a6:	68e3      	ldr	r3, [r4, #12]
 80268a8:	f8d9 2000 	ldr.w	r2, [r9]
 80268ac:	1a9b      	subs	r3, r3, r2
 80268ae:	42ab      	cmp	r3, r5
 80268b0:	dc28      	bgt.n	8026904 <_printf_common+0xa4>
 80268b2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80268b6:	6822      	ldr	r2, [r4, #0]
 80268b8:	3300      	adds	r3, #0
 80268ba:	bf18      	it	ne
 80268bc:	2301      	movne	r3, #1
 80268be:	0692      	lsls	r2, r2, #26
 80268c0:	d42d      	bmi.n	802691e <_printf_common+0xbe>
 80268c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80268c6:	4639      	mov	r1, r7
 80268c8:	4630      	mov	r0, r6
 80268ca:	47c0      	blx	r8
 80268cc:	3001      	adds	r0, #1
 80268ce:	d020      	beq.n	8026912 <_printf_common+0xb2>
 80268d0:	6823      	ldr	r3, [r4, #0]
 80268d2:	68e5      	ldr	r5, [r4, #12]
 80268d4:	f8d9 2000 	ldr.w	r2, [r9]
 80268d8:	f003 0306 	and.w	r3, r3, #6
 80268dc:	2b04      	cmp	r3, #4
 80268de:	bf08      	it	eq
 80268e0:	1aad      	subeq	r5, r5, r2
 80268e2:	68a3      	ldr	r3, [r4, #8]
 80268e4:	6922      	ldr	r2, [r4, #16]
 80268e6:	bf0c      	ite	eq
 80268e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80268ec:	2500      	movne	r5, #0
 80268ee:	4293      	cmp	r3, r2
 80268f0:	bfc4      	itt	gt
 80268f2:	1a9b      	subgt	r3, r3, r2
 80268f4:	18ed      	addgt	r5, r5, r3
 80268f6:	f04f 0900 	mov.w	r9, #0
 80268fa:	341a      	adds	r4, #26
 80268fc:	454d      	cmp	r5, r9
 80268fe:	d11a      	bne.n	8026936 <_printf_common+0xd6>
 8026900:	2000      	movs	r0, #0
 8026902:	e008      	b.n	8026916 <_printf_common+0xb6>
 8026904:	2301      	movs	r3, #1
 8026906:	4652      	mov	r2, sl
 8026908:	4639      	mov	r1, r7
 802690a:	4630      	mov	r0, r6
 802690c:	47c0      	blx	r8
 802690e:	3001      	adds	r0, #1
 8026910:	d103      	bne.n	802691a <_printf_common+0xba>
 8026912:	f04f 30ff 	mov.w	r0, #4294967295
 8026916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802691a:	3501      	adds	r5, #1
 802691c:	e7c3      	b.n	80268a6 <_printf_common+0x46>
 802691e:	18e1      	adds	r1, r4, r3
 8026920:	1c5a      	adds	r2, r3, #1
 8026922:	2030      	movs	r0, #48	; 0x30
 8026924:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8026928:	4422      	add	r2, r4
 802692a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802692e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8026932:	3302      	adds	r3, #2
 8026934:	e7c5      	b.n	80268c2 <_printf_common+0x62>
 8026936:	2301      	movs	r3, #1
 8026938:	4622      	mov	r2, r4
 802693a:	4639      	mov	r1, r7
 802693c:	4630      	mov	r0, r6
 802693e:	47c0      	blx	r8
 8026940:	3001      	adds	r0, #1
 8026942:	d0e6      	beq.n	8026912 <_printf_common+0xb2>
 8026944:	f109 0901 	add.w	r9, r9, #1
 8026948:	e7d8      	b.n	80268fc <_printf_common+0x9c>
	...

0802694c <_printf_i>:
 802694c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8026950:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8026954:	460c      	mov	r4, r1
 8026956:	7e09      	ldrb	r1, [r1, #24]
 8026958:	b085      	sub	sp, #20
 802695a:	296e      	cmp	r1, #110	; 0x6e
 802695c:	4617      	mov	r7, r2
 802695e:	4606      	mov	r6, r0
 8026960:	4698      	mov	r8, r3
 8026962:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026964:	f000 80b3 	beq.w	8026ace <_printf_i+0x182>
 8026968:	d822      	bhi.n	80269b0 <_printf_i+0x64>
 802696a:	2963      	cmp	r1, #99	; 0x63
 802696c:	d036      	beq.n	80269dc <_printf_i+0x90>
 802696e:	d80a      	bhi.n	8026986 <_printf_i+0x3a>
 8026970:	2900      	cmp	r1, #0
 8026972:	f000 80b9 	beq.w	8026ae8 <_printf_i+0x19c>
 8026976:	2958      	cmp	r1, #88	; 0x58
 8026978:	f000 8083 	beq.w	8026a82 <_printf_i+0x136>
 802697c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8026980:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8026984:	e032      	b.n	80269ec <_printf_i+0xa0>
 8026986:	2964      	cmp	r1, #100	; 0x64
 8026988:	d001      	beq.n	802698e <_printf_i+0x42>
 802698a:	2969      	cmp	r1, #105	; 0x69
 802698c:	d1f6      	bne.n	802697c <_printf_i+0x30>
 802698e:	6820      	ldr	r0, [r4, #0]
 8026990:	6813      	ldr	r3, [r2, #0]
 8026992:	0605      	lsls	r5, r0, #24
 8026994:	f103 0104 	add.w	r1, r3, #4
 8026998:	d52a      	bpl.n	80269f0 <_printf_i+0xa4>
 802699a:	681b      	ldr	r3, [r3, #0]
 802699c:	6011      	str	r1, [r2, #0]
 802699e:	2b00      	cmp	r3, #0
 80269a0:	da03      	bge.n	80269aa <_printf_i+0x5e>
 80269a2:	222d      	movs	r2, #45	; 0x2d
 80269a4:	425b      	negs	r3, r3
 80269a6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80269aa:	486f      	ldr	r0, [pc, #444]	; (8026b68 <_printf_i+0x21c>)
 80269ac:	220a      	movs	r2, #10
 80269ae:	e039      	b.n	8026a24 <_printf_i+0xd8>
 80269b0:	2973      	cmp	r1, #115	; 0x73
 80269b2:	f000 809d 	beq.w	8026af0 <_printf_i+0x1a4>
 80269b6:	d808      	bhi.n	80269ca <_printf_i+0x7e>
 80269b8:	296f      	cmp	r1, #111	; 0x6f
 80269ba:	d020      	beq.n	80269fe <_printf_i+0xb2>
 80269bc:	2970      	cmp	r1, #112	; 0x70
 80269be:	d1dd      	bne.n	802697c <_printf_i+0x30>
 80269c0:	6823      	ldr	r3, [r4, #0]
 80269c2:	f043 0320 	orr.w	r3, r3, #32
 80269c6:	6023      	str	r3, [r4, #0]
 80269c8:	e003      	b.n	80269d2 <_printf_i+0x86>
 80269ca:	2975      	cmp	r1, #117	; 0x75
 80269cc:	d017      	beq.n	80269fe <_printf_i+0xb2>
 80269ce:	2978      	cmp	r1, #120	; 0x78
 80269d0:	d1d4      	bne.n	802697c <_printf_i+0x30>
 80269d2:	2378      	movs	r3, #120	; 0x78
 80269d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80269d8:	4864      	ldr	r0, [pc, #400]	; (8026b6c <_printf_i+0x220>)
 80269da:	e055      	b.n	8026a88 <_printf_i+0x13c>
 80269dc:	6813      	ldr	r3, [r2, #0]
 80269de:	1d19      	adds	r1, r3, #4
 80269e0:	681b      	ldr	r3, [r3, #0]
 80269e2:	6011      	str	r1, [r2, #0]
 80269e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80269e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80269ec:	2301      	movs	r3, #1
 80269ee:	e08c      	b.n	8026b0a <_printf_i+0x1be>
 80269f0:	681b      	ldr	r3, [r3, #0]
 80269f2:	6011      	str	r1, [r2, #0]
 80269f4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80269f8:	bf18      	it	ne
 80269fa:	b21b      	sxthne	r3, r3
 80269fc:	e7cf      	b.n	802699e <_printf_i+0x52>
 80269fe:	6813      	ldr	r3, [r2, #0]
 8026a00:	6825      	ldr	r5, [r4, #0]
 8026a02:	1d18      	adds	r0, r3, #4
 8026a04:	6010      	str	r0, [r2, #0]
 8026a06:	0628      	lsls	r0, r5, #24
 8026a08:	d501      	bpl.n	8026a0e <_printf_i+0xc2>
 8026a0a:	681b      	ldr	r3, [r3, #0]
 8026a0c:	e002      	b.n	8026a14 <_printf_i+0xc8>
 8026a0e:	0668      	lsls	r0, r5, #25
 8026a10:	d5fb      	bpl.n	8026a0a <_printf_i+0xbe>
 8026a12:	881b      	ldrh	r3, [r3, #0]
 8026a14:	4854      	ldr	r0, [pc, #336]	; (8026b68 <_printf_i+0x21c>)
 8026a16:	296f      	cmp	r1, #111	; 0x6f
 8026a18:	bf14      	ite	ne
 8026a1a:	220a      	movne	r2, #10
 8026a1c:	2208      	moveq	r2, #8
 8026a1e:	2100      	movs	r1, #0
 8026a20:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8026a24:	6865      	ldr	r5, [r4, #4]
 8026a26:	60a5      	str	r5, [r4, #8]
 8026a28:	2d00      	cmp	r5, #0
 8026a2a:	f2c0 8095 	blt.w	8026b58 <_printf_i+0x20c>
 8026a2e:	6821      	ldr	r1, [r4, #0]
 8026a30:	f021 0104 	bic.w	r1, r1, #4
 8026a34:	6021      	str	r1, [r4, #0]
 8026a36:	2b00      	cmp	r3, #0
 8026a38:	d13d      	bne.n	8026ab6 <_printf_i+0x16a>
 8026a3a:	2d00      	cmp	r5, #0
 8026a3c:	f040 808e 	bne.w	8026b5c <_printf_i+0x210>
 8026a40:	4665      	mov	r5, ip
 8026a42:	2a08      	cmp	r2, #8
 8026a44:	d10b      	bne.n	8026a5e <_printf_i+0x112>
 8026a46:	6823      	ldr	r3, [r4, #0]
 8026a48:	07db      	lsls	r3, r3, #31
 8026a4a:	d508      	bpl.n	8026a5e <_printf_i+0x112>
 8026a4c:	6923      	ldr	r3, [r4, #16]
 8026a4e:	6862      	ldr	r2, [r4, #4]
 8026a50:	429a      	cmp	r2, r3
 8026a52:	bfde      	ittt	le
 8026a54:	2330      	movle	r3, #48	; 0x30
 8026a56:	f805 3c01 	strble.w	r3, [r5, #-1]
 8026a5a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8026a5e:	ebac 0305 	sub.w	r3, ip, r5
 8026a62:	6123      	str	r3, [r4, #16]
 8026a64:	f8cd 8000 	str.w	r8, [sp]
 8026a68:	463b      	mov	r3, r7
 8026a6a:	aa03      	add	r2, sp, #12
 8026a6c:	4621      	mov	r1, r4
 8026a6e:	4630      	mov	r0, r6
 8026a70:	f7ff fef6 	bl	8026860 <_printf_common>
 8026a74:	3001      	adds	r0, #1
 8026a76:	d14d      	bne.n	8026b14 <_printf_i+0x1c8>
 8026a78:	f04f 30ff 	mov.w	r0, #4294967295
 8026a7c:	b005      	add	sp, #20
 8026a7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8026a82:	4839      	ldr	r0, [pc, #228]	; (8026b68 <_printf_i+0x21c>)
 8026a84:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8026a88:	6813      	ldr	r3, [r2, #0]
 8026a8a:	6821      	ldr	r1, [r4, #0]
 8026a8c:	1d1d      	adds	r5, r3, #4
 8026a8e:	681b      	ldr	r3, [r3, #0]
 8026a90:	6015      	str	r5, [r2, #0]
 8026a92:	060a      	lsls	r2, r1, #24
 8026a94:	d50b      	bpl.n	8026aae <_printf_i+0x162>
 8026a96:	07ca      	lsls	r2, r1, #31
 8026a98:	bf44      	itt	mi
 8026a9a:	f041 0120 	orrmi.w	r1, r1, #32
 8026a9e:	6021      	strmi	r1, [r4, #0]
 8026aa0:	b91b      	cbnz	r3, 8026aaa <_printf_i+0x15e>
 8026aa2:	6822      	ldr	r2, [r4, #0]
 8026aa4:	f022 0220 	bic.w	r2, r2, #32
 8026aa8:	6022      	str	r2, [r4, #0]
 8026aaa:	2210      	movs	r2, #16
 8026aac:	e7b7      	b.n	8026a1e <_printf_i+0xd2>
 8026aae:	064d      	lsls	r5, r1, #25
 8026ab0:	bf48      	it	mi
 8026ab2:	b29b      	uxthmi	r3, r3
 8026ab4:	e7ef      	b.n	8026a96 <_printf_i+0x14a>
 8026ab6:	4665      	mov	r5, ip
 8026ab8:	fbb3 f1f2 	udiv	r1, r3, r2
 8026abc:	fb02 3311 	mls	r3, r2, r1, r3
 8026ac0:	5cc3      	ldrb	r3, [r0, r3]
 8026ac2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8026ac6:	460b      	mov	r3, r1
 8026ac8:	2900      	cmp	r1, #0
 8026aca:	d1f5      	bne.n	8026ab8 <_printf_i+0x16c>
 8026acc:	e7b9      	b.n	8026a42 <_printf_i+0xf6>
 8026ace:	6813      	ldr	r3, [r2, #0]
 8026ad0:	6825      	ldr	r5, [r4, #0]
 8026ad2:	6961      	ldr	r1, [r4, #20]
 8026ad4:	1d18      	adds	r0, r3, #4
 8026ad6:	6010      	str	r0, [r2, #0]
 8026ad8:	0628      	lsls	r0, r5, #24
 8026ada:	681b      	ldr	r3, [r3, #0]
 8026adc:	d501      	bpl.n	8026ae2 <_printf_i+0x196>
 8026ade:	6019      	str	r1, [r3, #0]
 8026ae0:	e002      	b.n	8026ae8 <_printf_i+0x19c>
 8026ae2:	066a      	lsls	r2, r5, #25
 8026ae4:	d5fb      	bpl.n	8026ade <_printf_i+0x192>
 8026ae6:	8019      	strh	r1, [r3, #0]
 8026ae8:	2300      	movs	r3, #0
 8026aea:	6123      	str	r3, [r4, #16]
 8026aec:	4665      	mov	r5, ip
 8026aee:	e7b9      	b.n	8026a64 <_printf_i+0x118>
 8026af0:	6813      	ldr	r3, [r2, #0]
 8026af2:	1d19      	adds	r1, r3, #4
 8026af4:	6011      	str	r1, [r2, #0]
 8026af6:	681d      	ldr	r5, [r3, #0]
 8026af8:	6862      	ldr	r2, [r4, #4]
 8026afa:	2100      	movs	r1, #0
 8026afc:	4628      	mov	r0, r5
 8026afe:	f7d9 fc07 	bl	8000310 <memchr>
 8026b02:	b108      	cbz	r0, 8026b08 <_printf_i+0x1bc>
 8026b04:	1b40      	subs	r0, r0, r5
 8026b06:	6060      	str	r0, [r4, #4]
 8026b08:	6863      	ldr	r3, [r4, #4]
 8026b0a:	6123      	str	r3, [r4, #16]
 8026b0c:	2300      	movs	r3, #0
 8026b0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8026b12:	e7a7      	b.n	8026a64 <_printf_i+0x118>
 8026b14:	6923      	ldr	r3, [r4, #16]
 8026b16:	462a      	mov	r2, r5
 8026b18:	4639      	mov	r1, r7
 8026b1a:	4630      	mov	r0, r6
 8026b1c:	47c0      	blx	r8
 8026b1e:	3001      	adds	r0, #1
 8026b20:	d0aa      	beq.n	8026a78 <_printf_i+0x12c>
 8026b22:	6823      	ldr	r3, [r4, #0]
 8026b24:	079b      	lsls	r3, r3, #30
 8026b26:	d413      	bmi.n	8026b50 <_printf_i+0x204>
 8026b28:	68e0      	ldr	r0, [r4, #12]
 8026b2a:	9b03      	ldr	r3, [sp, #12]
 8026b2c:	4298      	cmp	r0, r3
 8026b2e:	bfb8      	it	lt
 8026b30:	4618      	movlt	r0, r3
 8026b32:	e7a3      	b.n	8026a7c <_printf_i+0x130>
 8026b34:	2301      	movs	r3, #1
 8026b36:	464a      	mov	r2, r9
 8026b38:	4639      	mov	r1, r7
 8026b3a:	4630      	mov	r0, r6
 8026b3c:	47c0      	blx	r8
 8026b3e:	3001      	adds	r0, #1
 8026b40:	d09a      	beq.n	8026a78 <_printf_i+0x12c>
 8026b42:	3501      	adds	r5, #1
 8026b44:	68e3      	ldr	r3, [r4, #12]
 8026b46:	9a03      	ldr	r2, [sp, #12]
 8026b48:	1a9b      	subs	r3, r3, r2
 8026b4a:	42ab      	cmp	r3, r5
 8026b4c:	dcf2      	bgt.n	8026b34 <_printf_i+0x1e8>
 8026b4e:	e7eb      	b.n	8026b28 <_printf_i+0x1dc>
 8026b50:	2500      	movs	r5, #0
 8026b52:	f104 0919 	add.w	r9, r4, #25
 8026b56:	e7f5      	b.n	8026b44 <_printf_i+0x1f8>
 8026b58:	2b00      	cmp	r3, #0
 8026b5a:	d1ac      	bne.n	8026ab6 <_printf_i+0x16a>
 8026b5c:	7803      	ldrb	r3, [r0, #0]
 8026b5e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8026b62:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8026b66:	e76c      	b.n	8026a42 <_printf_i+0xf6>
 8026b68:	080c2eb6 	.word	0x080c2eb6
 8026b6c:	080c2ec7 	.word	0x080c2ec7

08026b70 <_sbrk_r>:
 8026b70:	b538      	push	{r3, r4, r5, lr}
 8026b72:	4c06      	ldr	r4, [pc, #24]	; (8026b8c <_sbrk_r+0x1c>)
 8026b74:	2300      	movs	r3, #0
 8026b76:	4605      	mov	r5, r0
 8026b78:	4608      	mov	r0, r1
 8026b7a:	6023      	str	r3, [r4, #0]
 8026b7c:	f001 fe7e 	bl	802887c <_sbrk>
 8026b80:	1c43      	adds	r3, r0, #1
 8026b82:	d102      	bne.n	8026b8a <_sbrk_r+0x1a>
 8026b84:	6823      	ldr	r3, [r4, #0]
 8026b86:	b103      	cbz	r3, 8026b8a <_sbrk_r+0x1a>
 8026b88:	602b      	str	r3, [r5, #0]
 8026b8a:	bd38      	pop	{r3, r4, r5, pc}
 8026b8c:	2400a920 	.word	0x2400a920

08026b90 <siprintf>:
 8026b90:	b40e      	push	{r1, r2, r3}
 8026b92:	b500      	push	{lr}
 8026b94:	b09c      	sub	sp, #112	; 0x70
 8026b96:	ab1d      	add	r3, sp, #116	; 0x74
 8026b98:	9002      	str	r0, [sp, #8]
 8026b9a:	9006      	str	r0, [sp, #24]
 8026b9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8026ba0:	4809      	ldr	r0, [pc, #36]	; (8026bc8 <siprintf+0x38>)
 8026ba2:	9107      	str	r1, [sp, #28]
 8026ba4:	9104      	str	r1, [sp, #16]
 8026ba6:	4909      	ldr	r1, [pc, #36]	; (8026bcc <siprintf+0x3c>)
 8026ba8:	f853 2b04 	ldr.w	r2, [r3], #4
 8026bac:	9105      	str	r1, [sp, #20]
 8026bae:	6800      	ldr	r0, [r0, #0]
 8026bb0:	9301      	str	r3, [sp, #4]
 8026bb2:	a902      	add	r1, sp, #8
 8026bb4:	f001 f972 	bl	8027e9c <_svfiprintf_r>
 8026bb8:	9b02      	ldr	r3, [sp, #8]
 8026bba:	2200      	movs	r2, #0
 8026bbc:	701a      	strb	r2, [r3, #0]
 8026bbe:	b01c      	add	sp, #112	; 0x70
 8026bc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8026bc4:	b003      	add	sp, #12
 8026bc6:	4770      	bx	lr
 8026bc8:	24007410 	.word	0x24007410
 8026bcc:	ffff0208 	.word	0xffff0208

08026bd0 <stpcpy>:
 8026bd0:	4603      	mov	r3, r0
 8026bd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8026bd6:	4618      	mov	r0, r3
 8026bd8:	f803 2b01 	strb.w	r2, [r3], #1
 8026bdc:	2a00      	cmp	r2, #0
 8026bde:	d1f8      	bne.n	8026bd2 <stpcpy+0x2>
 8026be0:	4770      	bx	lr

08026be2 <strcpy>:
 8026be2:	4603      	mov	r3, r0
 8026be4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8026be8:	f803 2b01 	strb.w	r2, [r3], #1
 8026bec:	2a00      	cmp	r2, #0
 8026bee:	d1f9      	bne.n	8026be4 <strcpy+0x2>
 8026bf0:	4770      	bx	lr

08026bf2 <quorem>:
 8026bf2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026bf6:	6903      	ldr	r3, [r0, #16]
 8026bf8:	690c      	ldr	r4, [r1, #16]
 8026bfa:	42a3      	cmp	r3, r4
 8026bfc:	4680      	mov	r8, r0
 8026bfe:	f2c0 8082 	blt.w	8026d06 <quorem+0x114>
 8026c02:	3c01      	subs	r4, #1
 8026c04:	f101 0714 	add.w	r7, r1, #20
 8026c08:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8026c0c:	f100 0614 	add.w	r6, r0, #20
 8026c10:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8026c14:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8026c18:	eb06 030c 	add.w	r3, r6, ip
 8026c1c:	3501      	adds	r5, #1
 8026c1e:	eb07 090c 	add.w	r9, r7, ip
 8026c22:	9301      	str	r3, [sp, #4]
 8026c24:	fbb0 f5f5 	udiv	r5, r0, r5
 8026c28:	b395      	cbz	r5, 8026c90 <quorem+0x9e>
 8026c2a:	f04f 0a00 	mov.w	sl, #0
 8026c2e:	4638      	mov	r0, r7
 8026c30:	46b6      	mov	lr, r6
 8026c32:	46d3      	mov	fp, sl
 8026c34:	f850 2b04 	ldr.w	r2, [r0], #4
 8026c38:	b293      	uxth	r3, r2
 8026c3a:	fb05 a303 	mla	r3, r5, r3, sl
 8026c3e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8026c42:	b29b      	uxth	r3, r3
 8026c44:	ebab 0303 	sub.w	r3, fp, r3
 8026c48:	0c12      	lsrs	r2, r2, #16
 8026c4a:	f8de b000 	ldr.w	fp, [lr]
 8026c4e:	fb05 a202 	mla	r2, r5, r2, sl
 8026c52:	fa13 f38b 	uxtah	r3, r3, fp
 8026c56:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8026c5a:	fa1f fb82 	uxth.w	fp, r2
 8026c5e:	f8de 2000 	ldr.w	r2, [lr]
 8026c62:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8026c66:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8026c6a:	b29b      	uxth	r3, r3
 8026c6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8026c70:	4581      	cmp	r9, r0
 8026c72:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8026c76:	f84e 3b04 	str.w	r3, [lr], #4
 8026c7a:	d2db      	bcs.n	8026c34 <quorem+0x42>
 8026c7c:	f856 300c 	ldr.w	r3, [r6, ip]
 8026c80:	b933      	cbnz	r3, 8026c90 <quorem+0x9e>
 8026c82:	9b01      	ldr	r3, [sp, #4]
 8026c84:	3b04      	subs	r3, #4
 8026c86:	429e      	cmp	r6, r3
 8026c88:	461a      	mov	r2, r3
 8026c8a:	d330      	bcc.n	8026cee <quorem+0xfc>
 8026c8c:	f8c8 4010 	str.w	r4, [r8, #16]
 8026c90:	4640      	mov	r0, r8
 8026c92:	f000 ffaf 	bl	8027bf4 <__mcmp>
 8026c96:	2800      	cmp	r0, #0
 8026c98:	db25      	blt.n	8026ce6 <quorem+0xf4>
 8026c9a:	3501      	adds	r5, #1
 8026c9c:	4630      	mov	r0, r6
 8026c9e:	f04f 0c00 	mov.w	ip, #0
 8026ca2:	f857 2b04 	ldr.w	r2, [r7], #4
 8026ca6:	f8d0 e000 	ldr.w	lr, [r0]
 8026caa:	b293      	uxth	r3, r2
 8026cac:	ebac 0303 	sub.w	r3, ip, r3
 8026cb0:	0c12      	lsrs	r2, r2, #16
 8026cb2:	fa13 f38e 	uxtah	r3, r3, lr
 8026cb6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8026cba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8026cbe:	b29b      	uxth	r3, r3
 8026cc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8026cc4:	45b9      	cmp	r9, r7
 8026cc6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8026cca:	f840 3b04 	str.w	r3, [r0], #4
 8026cce:	d2e8      	bcs.n	8026ca2 <quorem+0xb0>
 8026cd0:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8026cd4:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8026cd8:	b92a      	cbnz	r2, 8026ce6 <quorem+0xf4>
 8026cda:	3b04      	subs	r3, #4
 8026cdc:	429e      	cmp	r6, r3
 8026cde:	461a      	mov	r2, r3
 8026ce0:	d30b      	bcc.n	8026cfa <quorem+0x108>
 8026ce2:	f8c8 4010 	str.w	r4, [r8, #16]
 8026ce6:	4628      	mov	r0, r5
 8026ce8:	b003      	add	sp, #12
 8026cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026cee:	6812      	ldr	r2, [r2, #0]
 8026cf0:	3b04      	subs	r3, #4
 8026cf2:	2a00      	cmp	r2, #0
 8026cf4:	d1ca      	bne.n	8026c8c <quorem+0x9a>
 8026cf6:	3c01      	subs	r4, #1
 8026cf8:	e7c5      	b.n	8026c86 <quorem+0x94>
 8026cfa:	6812      	ldr	r2, [r2, #0]
 8026cfc:	3b04      	subs	r3, #4
 8026cfe:	2a00      	cmp	r2, #0
 8026d00:	d1ef      	bne.n	8026ce2 <quorem+0xf0>
 8026d02:	3c01      	subs	r4, #1
 8026d04:	e7ea      	b.n	8026cdc <quorem+0xea>
 8026d06:	2000      	movs	r0, #0
 8026d08:	e7ee      	b.n	8026ce8 <quorem+0xf6>
 8026d0a:	0000      	movs	r0, r0
 8026d0c:	0000      	movs	r0, r0
	...

08026d10 <_dtoa_r>:
 8026d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026d14:	ec57 6b10 	vmov	r6, r7, d0
 8026d18:	b095      	sub	sp, #84	; 0x54
 8026d1a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8026d1c:	9108      	str	r1, [sp, #32]
 8026d1e:	4604      	mov	r4, r0
 8026d20:	920a      	str	r2, [sp, #40]	; 0x28
 8026d22:	9311      	str	r3, [sp, #68]	; 0x44
 8026d24:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8026d28:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8026d2c:	b93d      	cbnz	r5, 8026d3e <_dtoa_r+0x2e>
 8026d2e:	2010      	movs	r0, #16
 8026d30:	f7ff fa18 	bl	8026164 <malloc>
 8026d34:	6260      	str	r0, [r4, #36]	; 0x24
 8026d36:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8026d3a:	6005      	str	r5, [r0, #0]
 8026d3c:	60c5      	str	r5, [r0, #12]
 8026d3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8026d40:	6819      	ldr	r1, [r3, #0]
 8026d42:	b151      	cbz	r1, 8026d5a <_dtoa_r+0x4a>
 8026d44:	685a      	ldr	r2, [r3, #4]
 8026d46:	604a      	str	r2, [r1, #4]
 8026d48:	2301      	movs	r3, #1
 8026d4a:	4093      	lsls	r3, r2
 8026d4c:	608b      	str	r3, [r1, #8]
 8026d4e:	4620      	mov	r0, r4
 8026d50:	f000 fd6e 	bl	8027830 <_Bfree>
 8026d54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8026d56:	2200      	movs	r2, #0
 8026d58:	601a      	str	r2, [r3, #0]
 8026d5a:	1e3b      	subs	r3, r7, #0
 8026d5c:	bfb9      	ittee	lt
 8026d5e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8026d62:	9303      	strlt	r3, [sp, #12]
 8026d64:	2300      	movge	r3, #0
 8026d66:	f8c8 3000 	strge.w	r3, [r8]
 8026d6a:	9d03      	ldr	r5, [sp, #12]
 8026d6c:	4bac      	ldr	r3, [pc, #688]	; (8027020 <_dtoa_r+0x310>)
 8026d6e:	bfbc      	itt	lt
 8026d70:	2201      	movlt	r2, #1
 8026d72:	f8c8 2000 	strlt.w	r2, [r8]
 8026d76:	43ab      	bics	r3, r5
 8026d78:	d11b      	bne.n	8026db2 <_dtoa_r+0xa2>
 8026d7a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8026d7c:	f242 730f 	movw	r3, #9999	; 0x270f
 8026d80:	6013      	str	r3, [r2, #0]
 8026d82:	9b02      	ldr	r3, [sp, #8]
 8026d84:	b923      	cbnz	r3, 8026d90 <_dtoa_r+0x80>
 8026d86:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8026d8a:	2d00      	cmp	r5, #0
 8026d8c:	f000 84dd 	beq.w	802774a <_dtoa_r+0xa3a>
 8026d90:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8026d92:	b953      	cbnz	r3, 8026daa <_dtoa_r+0x9a>
 8026d94:	4ba3      	ldr	r3, [pc, #652]	; (8027024 <_dtoa_r+0x314>)
 8026d96:	e020      	b.n	8026dda <_dtoa_r+0xca>
 8026d98:	4ba3      	ldr	r3, [pc, #652]	; (8027028 <_dtoa_r+0x318>)
 8026d9a:	9304      	str	r3, [sp, #16]
 8026d9c:	3308      	adds	r3, #8
 8026d9e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8026da0:	6013      	str	r3, [r2, #0]
 8026da2:	9804      	ldr	r0, [sp, #16]
 8026da4:	b015      	add	sp, #84	; 0x54
 8026da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026daa:	4b9e      	ldr	r3, [pc, #632]	; (8027024 <_dtoa_r+0x314>)
 8026dac:	9304      	str	r3, [sp, #16]
 8026dae:	3303      	adds	r3, #3
 8026db0:	e7f5      	b.n	8026d9e <_dtoa_r+0x8e>
 8026db2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8026db6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8026dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026dbe:	ed8d 7b04 	vstr	d7, [sp, #16]
 8026dc2:	d10c      	bne.n	8026dde <_dtoa_r+0xce>
 8026dc4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8026dc6:	2301      	movs	r3, #1
 8026dc8:	6013      	str	r3, [r2, #0]
 8026dca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8026dcc:	2b00      	cmp	r3, #0
 8026dce:	f000 84b9 	beq.w	8027744 <_dtoa_r+0xa34>
 8026dd2:	4b96      	ldr	r3, [pc, #600]	; (802702c <_dtoa_r+0x31c>)
 8026dd4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8026dd6:	6013      	str	r3, [r2, #0]
 8026dd8:	3b01      	subs	r3, #1
 8026dda:	9304      	str	r3, [sp, #16]
 8026ddc:	e7e1      	b.n	8026da2 <_dtoa_r+0x92>
 8026dde:	a913      	add	r1, sp, #76	; 0x4c
 8026de0:	aa12      	add	r2, sp, #72	; 0x48
 8026de2:	ed9d 0b04 	vldr	d0, [sp, #16]
 8026de6:	4620      	mov	r0, r4
 8026de8:	f000 ff7b 	bl	8027ce2 <__d2b>
 8026dec:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8026df0:	9001      	str	r0, [sp, #4]
 8026df2:	9912      	ldr	r1, [sp, #72]	; 0x48
 8026df4:	2e00      	cmp	r6, #0
 8026df6:	d046      	beq.n	8026e86 <_dtoa_r+0x176>
 8026df8:	9805      	ldr	r0, [sp, #20]
 8026dfa:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8026dfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8026e02:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 8026e06:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8026e0a:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 8026e0e:	2700      	movs	r7, #0
 8026e10:	ee07 aa90 	vmov	s15, sl
 8026e14:	ec43 2b16 	vmov	d6, r2, r3
 8026e18:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8026e1c:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8027008 <_dtoa_r+0x2f8>
 8026e20:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8026e24:	ee36 7b47 	vsub.f64	d7, d6, d7
 8026e28:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8027010 <_dtoa_r+0x300>
 8026e2c:	eea7 6b04 	vfma.f64	d6, d7, d4
 8026e30:	eeb0 7b46 	vmov.f64	d7, d6
 8026e34:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8027018 <_dtoa_r+0x308>
 8026e38:	eea5 7b06 	vfma.f64	d7, d5, d6
 8026e3c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8026e40:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8026e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026e48:	ee16 ba90 	vmov	fp, s13
 8026e4c:	d508      	bpl.n	8026e60 <_dtoa_r+0x150>
 8026e4e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8026e52:	eeb4 6b47 	vcmp.f64	d6, d7
 8026e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026e5a:	bf18      	it	ne
 8026e5c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8026e60:	f1bb 0f16 	cmp.w	fp, #22
 8026e64:	d834      	bhi.n	8026ed0 <_dtoa_r+0x1c0>
 8026e66:	4b72      	ldr	r3, [pc, #456]	; (8027030 <_dtoa_r+0x320>)
 8026e68:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8026e6c:	ed93 7b00 	vldr	d7, [r3]
 8026e70:	ed9d 6b02 	vldr	d6, [sp, #8]
 8026e74:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8026e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026e7c:	dd01      	ble.n	8026e82 <_dtoa_r+0x172>
 8026e7e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8026e82:	2300      	movs	r3, #0
 8026e84:	e025      	b.n	8026ed2 <_dtoa_r+0x1c2>
 8026e86:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8026e88:	eb01 0a03 	add.w	sl, r1, r3
 8026e8c:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8026e90:	2b20      	cmp	r3, #32
 8026e92:	dd17      	ble.n	8026ec4 <_dtoa_r+0x1b4>
 8026e94:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8026e98:	9a02      	ldr	r2, [sp, #8]
 8026e9a:	409d      	lsls	r5, r3
 8026e9c:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8026ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8026ea4:	432b      	orrs	r3, r5
 8026ea6:	ee07 3a90 	vmov	s15, r3
 8026eaa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8026eae:	f10a 3aff 	add.w	sl, sl, #4294967295
 8026eb2:	ed8d 7b04 	vstr	d7, [sp, #16]
 8026eb6:	9805      	ldr	r0, [sp, #20]
 8026eb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8026ebc:	2701      	movs	r7, #1
 8026ebe:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 8026ec2:	e7a5      	b.n	8026e10 <_dtoa_r+0x100>
 8026ec4:	9a02      	ldr	r2, [sp, #8]
 8026ec6:	f1c3 0320 	rsb	r3, r3, #32
 8026eca:	fa02 f303 	lsl.w	r3, r2, r3
 8026ece:	e7ea      	b.n	8026ea6 <_dtoa_r+0x196>
 8026ed0:	2301      	movs	r3, #1
 8026ed2:	eba1 0a0a 	sub.w	sl, r1, sl
 8026ed6:	9310      	str	r3, [sp, #64]	; 0x40
 8026ed8:	f1ba 0301 	subs.w	r3, sl, #1
 8026edc:	9307      	str	r3, [sp, #28]
 8026ede:	bf43      	ittte	mi
 8026ee0:	2300      	movmi	r3, #0
 8026ee2:	f1ca 0a01 	rsbmi	sl, sl, #1
 8026ee6:	9307      	strmi	r3, [sp, #28]
 8026ee8:	f04f 0a00 	movpl.w	sl, #0
 8026eec:	f1bb 0f00 	cmp.w	fp, #0
 8026ef0:	db19      	blt.n	8026f26 <_dtoa_r+0x216>
 8026ef2:	9b07      	ldr	r3, [sp, #28]
 8026ef4:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8026ef8:	445b      	add	r3, fp
 8026efa:	9307      	str	r3, [sp, #28]
 8026efc:	f04f 0800 	mov.w	r8, #0
 8026f00:	9b08      	ldr	r3, [sp, #32]
 8026f02:	2b09      	cmp	r3, #9
 8026f04:	d866      	bhi.n	8026fd4 <_dtoa_r+0x2c4>
 8026f06:	2b05      	cmp	r3, #5
 8026f08:	bfc4      	itt	gt
 8026f0a:	3b04      	subgt	r3, #4
 8026f0c:	9308      	strgt	r3, [sp, #32]
 8026f0e:	9b08      	ldr	r3, [sp, #32]
 8026f10:	f1a3 0302 	sub.w	r3, r3, #2
 8026f14:	bfcc      	ite	gt
 8026f16:	2500      	movgt	r5, #0
 8026f18:	2501      	movle	r5, #1
 8026f1a:	2b03      	cmp	r3, #3
 8026f1c:	d866      	bhi.n	8026fec <_dtoa_r+0x2dc>
 8026f1e:	e8df f003 	tbb	[pc, r3]
 8026f22:	5755      	.short	0x5755
 8026f24:	4909      	.short	0x4909
 8026f26:	2300      	movs	r3, #0
 8026f28:	ebaa 0a0b 	sub.w	sl, sl, fp
 8026f2c:	f1cb 0800 	rsb	r8, fp, #0
 8026f30:	930b      	str	r3, [sp, #44]	; 0x2c
 8026f32:	e7e5      	b.n	8026f00 <_dtoa_r+0x1f0>
 8026f34:	2301      	movs	r3, #1
 8026f36:	9309      	str	r3, [sp, #36]	; 0x24
 8026f38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026f3a:	2b00      	cmp	r3, #0
 8026f3c:	dd59      	ble.n	8026ff2 <_dtoa_r+0x2e2>
 8026f3e:	9306      	str	r3, [sp, #24]
 8026f40:	4699      	mov	r9, r3
 8026f42:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8026f44:	2200      	movs	r2, #0
 8026f46:	6072      	str	r2, [r6, #4]
 8026f48:	2204      	movs	r2, #4
 8026f4a:	f102 0014 	add.w	r0, r2, #20
 8026f4e:	4298      	cmp	r0, r3
 8026f50:	6871      	ldr	r1, [r6, #4]
 8026f52:	d953      	bls.n	8026ffc <_dtoa_r+0x2ec>
 8026f54:	4620      	mov	r0, r4
 8026f56:	f000 fc37 	bl	80277c8 <_Balloc>
 8026f5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8026f5c:	6030      	str	r0, [r6, #0]
 8026f5e:	681b      	ldr	r3, [r3, #0]
 8026f60:	9304      	str	r3, [sp, #16]
 8026f62:	f1b9 0f0e 	cmp.w	r9, #14
 8026f66:	f200 80c2 	bhi.w	80270ee <_dtoa_r+0x3de>
 8026f6a:	2d00      	cmp	r5, #0
 8026f6c:	f000 80bf 	beq.w	80270ee <_dtoa_r+0x3de>
 8026f70:	ed9d 7b02 	vldr	d7, [sp, #8]
 8026f74:	f1bb 0f00 	cmp.w	fp, #0
 8026f78:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8026f7c:	f340 80e6 	ble.w	802714c <_dtoa_r+0x43c>
 8026f80:	4a2b      	ldr	r2, [pc, #172]	; (8027030 <_dtoa_r+0x320>)
 8026f82:	f00b 030f 	and.w	r3, fp, #15
 8026f86:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8026f8a:	ed93 7b00 	vldr	d7, [r3]
 8026f8e:	ea4f 132b 	mov.w	r3, fp, asr #4
 8026f92:	06da      	lsls	r2, r3, #27
 8026f94:	f140 80d8 	bpl.w	8027148 <_dtoa_r+0x438>
 8026f98:	4a26      	ldr	r2, [pc, #152]	; (8027034 <_dtoa_r+0x324>)
 8026f9a:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 8026f9e:	ed92 6b08 	vldr	d6, [r2, #32]
 8026fa2:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8026fa6:	ed8d 6b02 	vstr	d6, [sp, #8]
 8026faa:	f003 030f 	and.w	r3, r3, #15
 8026fae:	2203      	movs	r2, #3
 8026fb0:	4920      	ldr	r1, [pc, #128]	; (8027034 <_dtoa_r+0x324>)
 8026fb2:	e04a      	b.n	802704a <_dtoa_r+0x33a>
 8026fb4:	2301      	movs	r3, #1
 8026fb6:	9309      	str	r3, [sp, #36]	; 0x24
 8026fb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026fba:	445b      	add	r3, fp
 8026fbc:	f103 0901 	add.w	r9, r3, #1
 8026fc0:	9306      	str	r3, [sp, #24]
 8026fc2:	464b      	mov	r3, r9
 8026fc4:	2b01      	cmp	r3, #1
 8026fc6:	bfb8      	it	lt
 8026fc8:	2301      	movlt	r3, #1
 8026fca:	e7ba      	b.n	8026f42 <_dtoa_r+0x232>
 8026fcc:	2300      	movs	r3, #0
 8026fce:	e7b2      	b.n	8026f36 <_dtoa_r+0x226>
 8026fd0:	2300      	movs	r3, #0
 8026fd2:	e7f0      	b.n	8026fb6 <_dtoa_r+0x2a6>
 8026fd4:	2501      	movs	r5, #1
 8026fd6:	2300      	movs	r3, #0
 8026fd8:	e9cd 3508 	strd	r3, r5, [sp, #32]
 8026fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8026fe0:	9306      	str	r3, [sp, #24]
 8026fe2:	4699      	mov	r9, r3
 8026fe4:	2200      	movs	r2, #0
 8026fe6:	2312      	movs	r3, #18
 8026fe8:	920a      	str	r2, [sp, #40]	; 0x28
 8026fea:	e7aa      	b.n	8026f42 <_dtoa_r+0x232>
 8026fec:	2301      	movs	r3, #1
 8026fee:	9309      	str	r3, [sp, #36]	; 0x24
 8026ff0:	e7f4      	b.n	8026fdc <_dtoa_r+0x2cc>
 8026ff2:	2301      	movs	r3, #1
 8026ff4:	9306      	str	r3, [sp, #24]
 8026ff6:	4699      	mov	r9, r3
 8026ff8:	461a      	mov	r2, r3
 8026ffa:	e7f5      	b.n	8026fe8 <_dtoa_r+0x2d8>
 8026ffc:	3101      	adds	r1, #1
 8026ffe:	6071      	str	r1, [r6, #4]
 8027000:	0052      	lsls	r2, r2, #1
 8027002:	e7a2      	b.n	8026f4a <_dtoa_r+0x23a>
 8027004:	f3af 8000 	nop.w
 8027008:	636f4361 	.word	0x636f4361
 802700c:	3fd287a7 	.word	0x3fd287a7
 8027010:	8b60c8b3 	.word	0x8b60c8b3
 8027014:	3fc68a28 	.word	0x3fc68a28
 8027018:	509f79fb 	.word	0x509f79fb
 802701c:	3fd34413 	.word	0x3fd34413
 8027020:	7ff00000 	.word	0x7ff00000
 8027024:	080c2ee1 	.word	0x080c2ee1
 8027028:	080c2ed8 	.word	0x080c2ed8
 802702c:	080c2eb5 	.word	0x080c2eb5
 8027030:	080c2f10 	.word	0x080c2f10
 8027034:	080c2ee8 	.word	0x080c2ee8
 8027038:	07de      	lsls	r6, r3, #31
 802703a:	d504      	bpl.n	8027046 <_dtoa_r+0x336>
 802703c:	ed91 6b00 	vldr	d6, [r1]
 8027040:	3201      	adds	r2, #1
 8027042:	ee27 7b06 	vmul.f64	d7, d7, d6
 8027046:	105b      	asrs	r3, r3, #1
 8027048:	3108      	adds	r1, #8
 802704a:	2b00      	cmp	r3, #0
 802704c:	d1f4      	bne.n	8027038 <_dtoa_r+0x328>
 802704e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8027052:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8027056:	ed8d 7b02 	vstr	d7, [sp, #8]
 802705a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802705c:	2b00      	cmp	r3, #0
 802705e:	f000 80a7 	beq.w	80271b0 <_dtoa_r+0x4a0>
 8027062:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8027066:	ed9d 7b02 	vldr	d7, [sp, #8]
 802706a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 802706e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027072:	f140 809d 	bpl.w	80271b0 <_dtoa_r+0x4a0>
 8027076:	f1b9 0f00 	cmp.w	r9, #0
 802707a:	f000 8099 	beq.w	80271b0 <_dtoa_r+0x4a0>
 802707e:	9b06      	ldr	r3, [sp, #24]
 8027080:	2b00      	cmp	r3, #0
 8027082:	dd30      	ble.n	80270e6 <_dtoa_r+0x3d6>
 8027084:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8027088:	ee27 7b06 	vmul.f64	d7, d7, d6
 802708c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8027090:	9d06      	ldr	r5, [sp, #24]
 8027092:	f10b 33ff 	add.w	r3, fp, #4294967295
 8027096:	3201      	adds	r2, #1
 8027098:	ed9d 6b02 	vldr	d6, [sp, #8]
 802709c:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80270a0:	ee07 2a90 	vmov	s15, r2
 80270a4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80270a8:	eea7 5b06 	vfma.f64	d5, d7, d6
 80270ac:	ed8d 5b02 	vstr	d5, [sp, #8]
 80270b0:	9a03      	ldr	r2, [sp, #12]
 80270b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80270b6:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 80270ba:	2d00      	cmp	r5, #0
 80270bc:	d17b      	bne.n	80271b6 <_dtoa_r+0x4a6>
 80270be:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80270c2:	ee36 6b47 	vsub.f64	d6, d6, d7
 80270c6:	ec41 0b17 	vmov	d7, r0, r1
 80270ca:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80270ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80270d2:	f300 8253 	bgt.w	802757c <_dtoa_r+0x86c>
 80270d6:	eeb1 7b47 	vneg.f64	d7, d7
 80270da:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80270de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80270e2:	f100 8249 	bmi.w	8027578 <_dtoa_r+0x868>
 80270e6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80270ea:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80270ee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80270f0:	2b00      	cmp	r3, #0
 80270f2:	f2c0 8119 	blt.w	8027328 <_dtoa_r+0x618>
 80270f6:	f1bb 0f0e 	cmp.w	fp, #14
 80270fa:	f300 8115 	bgt.w	8027328 <_dtoa_r+0x618>
 80270fe:	4bc3      	ldr	r3, [pc, #780]	; (802740c <_dtoa_r+0x6fc>)
 8027100:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8027104:	ed93 6b00 	vldr	d6, [r3]
 8027108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802710a:	2b00      	cmp	r3, #0
 802710c:	f280 80ba 	bge.w	8027284 <_dtoa_r+0x574>
 8027110:	f1b9 0f00 	cmp.w	r9, #0
 8027114:	f300 80b6 	bgt.w	8027284 <_dtoa_r+0x574>
 8027118:	f040 822d 	bne.w	8027576 <_dtoa_r+0x866>
 802711c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8027120:	ee26 6b07 	vmul.f64	d6, d6, d7
 8027124:	ed9d 7b02 	vldr	d7, [sp, #8]
 8027128:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802712c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027130:	464d      	mov	r5, r9
 8027132:	464f      	mov	r7, r9
 8027134:	f280 8204 	bge.w	8027540 <_dtoa_r+0x830>
 8027138:	9b04      	ldr	r3, [sp, #16]
 802713a:	9a04      	ldr	r2, [sp, #16]
 802713c:	1c5e      	adds	r6, r3, #1
 802713e:	2331      	movs	r3, #49	; 0x31
 8027140:	7013      	strb	r3, [r2, #0]
 8027142:	f10b 0b01 	add.w	fp, fp, #1
 8027146:	e1ff      	b.n	8027548 <_dtoa_r+0x838>
 8027148:	2202      	movs	r2, #2
 802714a:	e731      	b.n	8026fb0 <_dtoa_r+0x2a0>
 802714c:	d02e      	beq.n	80271ac <_dtoa_r+0x49c>
 802714e:	f1cb 0300 	rsb	r3, fp, #0
 8027152:	4aae      	ldr	r2, [pc, #696]	; (802740c <_dtoa_r+0x6fc>)
 8027154:	f003 010f 	and.w	r1, r3, #15
 8027158:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 802715c:	ed92 7b00 	vldr	d7, [r2]
 8027160:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 8027164:	ee26 7b07 	vmul.f64	d7, d6, d7
 8027168:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 802716c:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8027170:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8027174:	49a6      	ldr	r1, [pc, #664]	; (8027410 <_dtoa_r+0x700>)
 8027176:	111b      	asrs	r3, r3, #4
 8027178:	2000      	movs	r0, #0
 802717a:	2202      	movs	r2, #2
 802717c:	b93b      	cbnz	r3, 802718e <_dtoa_r+0x47e>
 802717e:	2800      	cmp	r0, #0
 8027180:	f43f af6b 	beq.w	802705a <_dtoa_r+0x34a>
 8027184:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8027188:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802718c:	e765      	b.n	802705a <_dtoa_r+0x34a>
 802718e:	07dd      	lsls	r5, r3, #31
 8027190:	d509      	bpl.n	80271a6 <_dtoa_r+0x496>
 8027192:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8027196:	ed91 7b00 	vldr	d7, [r1]
 802719a:	ee26 7b07 	vmul.f64	d7, d6, d7
 802719e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80271a2:	3201      	adds	r2, #1
 80271a4:	2001      	movs	r0, #1
 80271a6:	105b      	asrs	r3, r3, #1
 80271a8:	3108      	adds	r1, #8
 80271aa:	e7e7      	b.n	802717c <_dtoa_r+0x46c>
 80271ac:	2202      	movs	r2, #2
 80271ae:	e754      	b.n	802705a <_dtoa_r+0x34a>
 80271b0:	465b      	mov	r3, fp
 80271b2:	464d      	mov	r5, r9
 80271b4:	e770      	b.n	8027098 <_dtoa_r+0x388>
 80271b6:	4a95      	ldr	r2, [pc, #596]	; (802740c <_dtoa_r+0x6fc>)
 80271b8:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 80271bc:	ed12 4b02 	vldr	d4, [r2, #-8]
 80271c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80271c2:	ec41 0b17 	vmov	d7, r0, r1
 80271c6:	b35a      	cbz	r2, 8027220 <_dtoa_r+0x510>
 80271c8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80271cc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80271d0:	9e04      	ldr	r6, [sp, #16]
 80271d2:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80271d6:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80271da:	ee35 7b47 	vsub.f64	d7, d5, d7
 80271de:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80271e2:	ee14 2a90 	vmov	r2, s9
 80271e6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80271ea:	3230      	adds	r2, #48	; 0x30
 80271ec:	ee36 6b45 	vsub.f64	d6, d6, d5
 80271f0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80271f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80271f8:	f806 2b01 	strb.w	r2, [r6], #1
 80271fc:	d43b      	bmi.n	8027276 <_dtoa_r+0x566>
 80271fe:	ee32 5b46 	vsub.f64	d5, d2, d6
 8027202:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8027206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802720a:	d472      	bmi.n	80272f2 <_dtoa_r+0x5e2>
 802720c:	9a04      	ldr	r2, [sp, #16]
 802720e:	1ab2      	subs	r2, r6, r2
 8027210:	4295      	cmp	r5, r2
 8027212:	f77f af68 	ble.w	80270e6 <_dtoa_r+0x3d6>
 8027216:	ee27 7b03 	vmul.f64	d7, d7, d3
 802721a:	ee26 6b03 	vmul.f64	d6, d6, d3
 802721e:	e7de      	b.n	80271de <_dtoa_r+0x4ce>
 8027220:	9a04      	ldr	r2, [sp, #16]
 8027222:	ee24 7b07 	vmul.f64	d7, d4, d7
 8027226:	1956      	adds	r6, r2, r5
 8027228:	4611      	mov	r1, r2
 802722a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 802722e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8027232:	ee14 2a90 	vmov	r2, s9
 8027236:	3230      	adds	r2, #48	; 0x30
 8027238:	f801 2b01 	strb.w	r2, [r1], #1
 802723c:	42b1      	cmp	r1, r6
 802723e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8027242:	ee36 6b45 	vsub.f64	d6, d6, d5
 8027246:	d11a      	bne.n	802727e <_dtoa_r+0x56e>
 8027248:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 802724c:	ee37 4b05 	vadd.f64	d4, d7, d5
 8027250:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8027254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027258:	dc4b      	bgt.n	80272f2 <_dtoa_r+0x5e2>
 802725a:	ee35 7b47 	vsub.f64	d7, d5, d7
 802725e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8027262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027266:	f57f af3e 	bpl.w	80270e6 <_dtoa_r+0x3d6>
 802726a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 802726e:	2a30      	cmp	r2, #48	; 0x30
 8027270:	f106 31ff 	add.w	r1, r6, #4294967295
 8027274:	d001      	beq.n	802727a <_dtoa_r+0x56a>
 8027276:	469b      	mov	fp, r3
 8027278:	e02a      	b.n	80272d0 <_dtoa_r+0x5c0>
 802727a:	460e      	mov	r6, r1
 802727c:	e7f5      	b.n	802726a <_dtoa_r+0x55a>
 802727e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8027282:	e7d4      	b.n	802722e <_dtoa_r+0x51e>
 8027284:	ed9d 7b02 	vldr	d7, [sp, #8]
 8027288:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 802728c:	9e04      	ldr	r6, [sp, #16]
 802728e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8027292:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8027296:	ee15 3a10 	vmov	r3, s10
 802729a:	3330      	adds	r3, #48	; 0x30
 802729c:	f806 3b01 	strb.w	r3, [r6], #1
 80272a0:	9b04      	ldr	r3, [sp, #16]
 80272a2:	1af3      	subs	r3, r6, r3
 80272a4:	4599      	cmp	r9, r3
 80272a6:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80272aa:	eea3 7b46 	vfms.f64	d7, d3, d6
 80272ae:	d133      	bne.n	8027318 <_dtoa_r+0x608>
 80272b0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80272b4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80272b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80272bc:	dc18      	bgt.n	80272f0 <_dtoa_r+0x5e0>
 80272be:	eeb4 7b46 	vcmp.f64	d7, d6
 80272c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80272c6:	d103      	bne.n	80272d0 <_dtoa_r+0x5c0>
 80272c8:	ee15 3a10 	vmov	r3, s10
 80272cc:	07db      	lsls	r3, r3, #31
 80272ce:	d40f      	bmi.n	80272f0 <_dtoa_r+0x5e0>
 80272d0:	9901      	ldr	r1, [sp, #4]
 80272d2:	4620      	mov	r0, r4
 80272d4:	f000 faac 	bl	8027830 <_Bfree>
 80272d8:	2300      	movs	r3, #0
 80272da:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80272dc:	7033      	strb	r3, [r6, #0]
 80272de:	f10b 0301 	add.w	r3, fp, #1
 80272e2:	6013      	str	r3, [r2, #0]
 80272e4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80272e6:	2b00      	cmp	r3, #0
 80272e8:	f43f ad5b 	beq.w	8026da2 <_dtoa_r+0x92>
 80272ec:	601e      	str	r6, [r3, #0]
 80272ee:	e558      	b.n	8026da2 <_dtoa_r+0x92>
 80272f0:	465b      	mov	r3, fp
 80272f2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80272f6:	2939      	cmp	r1, #57	; 0x39
 80272f8:	f106 32ff 	add.w	r2, r6, #4294967295
 80272fc:	d106      	bne.n	802730c <_dtoa_r+0x5fc>
 80272fe:	9904      	ldr	r1, [sp, #16]
 8027300:	4291      	cmp	r1, r2
 8027302:	d107      	bne.n	8027314 <_dtoa_r+0x604>
 8027304:	2230      	movs	r2, #48	; 0x30
 8027306:	700a      	strb	r2, [r1, #0]
 8027308:	3301      	adds	r3, #1
 802730a:	460a      	mov	r2, r1
 802730c:	7811      	ldrb	r1, [r2, #0]
 802730e:	3101      	adds	r1, #1
 8027310:	7011      	strb	r1, [r2, #0]
 8027312:	e7b0      	b.n	8027276 <_dtoa_r+0x566>
 8027314:	4616      	mov	r6, r2
 8027316:	e7ec      	b.n	80272f2 <_dtoa_r+0x5e2>
 8027318:	ee27 7b04 	vmul.f64	d7, d7, d4
 802731c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8027320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027324:	d1b3      	bne.n	802728e <_dtoa_r+0x57e>
 8027326:	e7d3      	b.n	80272d0 <_dtoa_r+0x5c0>
 8027328:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802732a:	2a00      	cmp	r2, #0
 802732c:	f000 808d 	beq.w	802744a <_dtoa_r+0x73a>
 8027330:	9a08      	ldr	r2, [sp, #32]
 8027332:	2a01      	cmp	r2, #1
 8027334:	dc72      	bgt.n	802741c <_dtoa_r+0x70c>
 8027336:	2f00      	cmp	r7, #0
 8027338:	d06c      	beq.n	8027414 <_dtoa_r+0x704>
 802733a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 802733e:	4645      	mov	r5, r8
 8027340:	4656      	mov	r6, sl
 8027342:	9a07      	ldr	r2, [sp, #28]
 8027344:	2101      	movs	r1, #1
 8027346:	441a      	add	r2, r3
 8027348:	4620      	mov	r0, r4
 802734a:	449a      	add	sl, r3
 802734c:	9207      	str	r2, [sp, #28]
 802734e:	f000 fb0f 	bl	8027970 <__i2b>
 8027352:	4607      	mov	r7, r0
 8027354:	2e00      	cmp	r6, #0
 8027356:	dd0b      	ble.n	8027370 <_dtoa_r+0x660>
 8027358:	9b07      	ldr	r3, [sp, #28]
 802735a:	2b00      	cmp	r3, #0
 802735c:	dd08      	ble.n	8027370 <_dtoa_r+0x660>
 802735e:	42b3      	cmp	r3, r6
 8027360:	9a07      	ldr	r2, [sp, #28]
 8027362:	bfa8      	it	ge
 8027364:	4633      	movge	r3, r6
 8027366:	ebaa 0a03 	sub.w	sl, sl, r3
 802736a:	1af6      	subs	r6, r6, r3
 802736c:	1ad3      	subs	r3, r2, r3
 802736e:	9307      	str	r3, [sp, #28]
 8027370:	f1b8 0f00 	cmp.w	r8, #0
 8027374:	d01d      	beq.n	80273b2 <_dtoa_r+0x6a2>
 8027376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027378:	2b00      	cmp	r3, #0
 802737a:	d06a      	beq.n	8027452 <_dtoa_r+0x742>
 802737c:	b18d      	cbz	r5, 80273a2 <_dtoa_r+0x692>
 802737e:	4639      	mov	r1, r7
 8027380:	462a      	mov	r2, r5
 8027382:	4620      	mov	r0, r4
 8027384:	f000 fb94 	bl	8027ab0 <__pow5mult>
 8027388:	9a01      	ldr	r2, [sp, #4]
 802738a:	4601      	mov	r1, r0
 802738c:	4607      	mov	r7, r0
 802738e:	4620      	mov	r0, r4
 8027390:	f000 faf7 	bl	8027982 <__multiply>
 8027394:	9901      	ldr	r1, [sp, #4]
 8027396:	900c      	str	r0, [sp, #48]	; 0x30
 8027398:	4620      	mov	r0, r4
 802739a:	f000 fa49 	bl	8027830 <_Bfree>
 802739e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80273a0:	9301      	str	r3, [sp, #4]
 80273a2:	ebb8 0205 	subs.w	r2, r8, r5
 80273a6:	d004      	beq.n	80273b2 <_dtoa_r+0x6a2>
 80273a8:	9901      	ldr	r1, [sp, #4]
 80273aa:	4620      	mov	r0, r4
 80273ac:	f000 fb80 	bl	8027ab0 <__pow5mult>
 80273b0:	9001      	str	r0, [sp, #4]
 80273b2:	2101      	movs	r1, #1
 80273b4:	4620      	mov	r0, r4
 80273b6:	f000 fadb 	bl	8027970 <__i2b>
 80273ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80273bc:	4605      	mov	r5, r0
 80273be:	2b00      	cmp	r3, #0
 80273c0:	f000 81ca 	beq.w	8027758 <_dtoa_r+0xa48>
 80273c4:	461a      	mov	r2, r3
 80273c6:	4601      	mov	r1, r0
 80273c8:	4620      	mov	r0, r4
 80273ca:	f000 fb71 	bl	8027ab0 <__pow5mult>
 80273ce:	9b08      	ldr	r3, [sp, #32]
 80273d0:	2b01      	cmp	r3, #1
 80273d2:	4605      	mov	r5, r0
 80273d4:	dc44      	bgt.n	8027460 <_dtoa_r+0x750>
 80273d6:	9b02      	ldr	r3, [sp, #8]
 80273d8:	2b00      	cmp	r3, #0
 80273da:	d13c      	bne.n	8027456 <_dtoa_r+0x746>
 80273dc:	9b03      	ldr	r3, [sp, #12]
 80273de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80273e2:	2b00      	cmp	r3, #0
 80273e4:	d137      	bne.n	8027456 <_dtoa_r+0x746>
 80273e6:	9b03      	ldr	r3, [sp, #12]
 80273e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80273ec:	0d1b      	lsrs	r3, r3, #20
 80273ee:	051b      	lsls	r3, r3, #20
 80273f0:	2b00      	cmp	r3, #0
 80273f2:	d033      	beq.n	802745c <_dtoa_r+0x74c>
 80273f4:	9b07      	ldr	r3, [sp, #28]
 80273f6:	3301      	adds	r3, #1
 80273f8:	f10a 0a01 	add.w	sl, sl, #1
 80273fc:	9307      	str	r3, [sp, #28]
 80273fe:	f04f 0801 	mov.w	r8, #1
 8027402:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027404:	bb73      	cbnz	r3, 8027464 <_dtoa_r+0x754>
 8027406:	2001      	movs	r0, #1
 8027408:	e034      	b.n	8027474 <_dtoa_r+0x764>
 802740a:	bf00      	nop
 802740c:	080c2f10 	.word	0x080c2f10
 8027410:	080c2ee8 	.word	0x080c2ee8
 8027414:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8027416:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 802741a:	e790      	b.n	802733e <_dtoa_r+0x62e>
 802741c:	f109 35ff 	add.w	r5, r9, #4294967295
 8027420:	45a8      	cmp	r8, r5
 8027422:	bfbf      	itttt	lt
 8027424:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8027426:	eba5 0808 	sublt.w	r8, r5, r8
 802742a:	4443      	addlt	r3, r8
 802742c:	930b      	strlt	r3, [sp, #44]	; 0x2c
 802742e:	bfb6      	itet	lt
 8027430:	46a8      	movlt	r8, r5
 8027432:	eba8 0505 	subge.w	r5, r8, r5
 8027436:	2500      	movlt	r5, #0
 8027438:	f1b9 0f00 	cmp.w	r9, #0
 802743c:	bfb9      	ittee	lt
 802743e:	ebaa 0609 	sublt.w	r6, sl, r9
 8027442:	2300      	movlt	r3, #0
 8027444:	4656      	movge	r6, sl
 8027446:	464b      	movge	r3, r9
 8027448:	e77b      	b.n	8027342 <_dtoa_r+0x632>
 802744a:	4645      	mov	r5, r8
 802744c:	4656      	mov	r6, sl
 802744e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8027450:	e780      	b.n	8027354 <_dtoa_r+0x644>
 8027452:	4642      	mov	r2, r8
 8027454:	e7a8      	b.n	80273a8 <_dtoa_r+0x698>
 8027456:	f04f 0800 	mov.w	r8, #0
 802745a:	e7d2      	b.n	8027402 <_dtoa_r+0x6f2>
 802745c:	4698      	mov	r8, r3
 802745e:	e7d0      	b.n	8027402 <_dtoa_r+0x6f2>
 8027460:	f04f 0800 	mov.w	r8, #0
 8027464:	692b      	ldr	r3, [r5, #16]
 8027466:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 802746a:	6918      	ldr	r0, [r3, #16]
 802746c:	f000 fa32 	bl	80278d4 <__hi0bits>
 8027470:	f1c0 0020 	rsb	r0, r0, #32
 8027474:	9b07      	ldr	r3, [sp, #28]
 8027476:	4418      	add	r0, r3
 8027478:	f010 001f 	ands.w	r0, r0, #31
 802747c:	d047      	beq.n	802750e <_dtoa_r+0x7fe>
 802747e:	f1c0 0320 	rsb	r3, r0, #32
 8027482:	2b04      	cmp	r3, #4
 8027484:	dd3b      	ble.n	80274fe <_dtoa_r+0x7ee>
 8027486:	9b07      	ldr	r3, [sp, #28]
 8027488:	f1c0 001c 	rsb	r0, r0, #28
 802748c:	4482      	add	sl, r0
 802748e:	4406      	add	r6, r0
 8027490:	4403      	add	r3, r0
 8027492:	9307      	str	r3, [sp, #28]
 8027494:	f1ba 0f00 	cmp.w	sl, #0
 8027498:	dd05      	ble.n	80274a6 <_dtoa_r+0x796>
 802749a:	4652      	mov	r2, sl
 802749c:	9901      	ldr	r1, [sp, #4]
 802749e:	4620      	mov	r0, r4
 80274a0:	f000 fb54 	bl	8027b4c <__lshift>
 80274a4:	9001      	str	r0, [sp, #4]
 80274a6:	9b07      	ldr	r3, [sp, #28]
 80274a8:	2b00      	cmp	r3, #0
 80274aa:	dd05      	ble.n	80274b8 <_dtoa_r+0x7a8>
 80274ac:	4629      	mov	r1, r5
 80274ae:	461a      	mov	r2, r3
 80274b0:	4620      	mov	r0, r4
 80274b2:	f000 fb4b 	bl	8027b4c <__lshift>
 80274b6:	4605      	mov	r5, r0
 80274b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80274ba:	b353      	cbz	r3, 8027512 <_dtoa_r+0x802>
 80274bc:	4629      	mov	r1, r5
 80274be:	9801      	ldr	r0, [sp, #4]
 80274c0:	f000 fb98 	bl	8027bf4 <__mcmp>
 80274c4:	2800      	cmp	r0, #0
 80274c6:	da24      	bge.n	8027512 <_dtoa_r+0x802>
 80274c8:	2300      	movs	r3, #0
 80274ca:	220a      	movs	r2, #10
 80274cc:	9901      	ldr	r1, [sp, #4]
 80274ce:	4620      	mov	r0, r4
 80274d0:	f000 f9c5 	bl	802785e <__multadd>
 80274d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80274d6:	9001      	str	r0, [sp, #4]
 80274d8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80274dc:	2b00      	cmp	r3, #0
 80274de:	f000 8142 	beq.w	8027766 <_dtoa_r+0xa56>
 80274e2:	2300      	movs	r3, #0
 80274e4:	4639      	mov	r1, r7
 80274e6:	220a      	movs	r2, #10
 80274e8:	4620      	mov	r0, r4
 80274ea:	f000 f9b8 	bl	802785e <__multadd>
 80274ee:	9b06      	ldr	r3, [sp, #24]
 80274f0:	2b00      	cmp	r3, #0
 80274f2:	4607      	mov	r7, r0
 80274f4:	dc4b      	bgt.n	802758e <_dtoa_r+0x87e>
 80274f6:	9b08      	ldr	r3, [sp, #32]
 80274f8:	2b02      	cmp	r3, #2
 80274fa:	dd48      	ble.n	802758e <_dtoa_r+0x87e>
 80274fc:	e011      	b.n	8027522 <_dtoa_r+0x812>
 80274fe:	d0c9      	beq.n	8027494 <_dtoa_r+0x784>
 8027500:	9a07      	ldr	r2, [sp, #28]
 8027502:	331c      	adds	r3, #28
 8027504:	441a      	add	r2, r3
 8027506:	449a      	add	sl, r3
 8027508:	441e      	add	r6, r3
 802750a:	4613      	mov	r3, r2
 802750c:	e7c1      	b.n	8027492 <_dtoa_r+0x782>
 802750e:	4603      	mov	r3, r0
 8027510:	e7f6      	b.n	8027500 <_dtoa_r+0x7f0>
 8027512:	f1b9 0f00 	cmp.w	r9, #0
 8027516:	dc34      	bgt.n	8027582 <_dtoa_r+0x872>
 8027518:	9b08      	ldr	r3, [sp, #32]
 802751a:	2b02      	cmp	r3, #2
 802751c:	dd31      	ble.n	8027582 <_dtoa_r+0x872>
 802751e:	f8cd 9018 	str.w	r9, [sp, #24]
 8027522:	9b06      	ldr	r3, [sp, #24]
 8027524:	b963      	cbnz	r3, 8027540 <_dtoa_r+0x830>
 8027526:	4629      	mov	r1, r5
 8027528:	2205      	movs	r2, #5
 802752a:	4620      	mov	r0, r4
 802752c:	f000 f997 	bl	802785e <__multadd>
 8027530:	4601      	mov	r1, r0
 8027532:	4605      	mov	r5, r0
 8027534:	9801      	ldr	r0, [sp, #4]
 8027536:	f000 fb5d 	bl	8027bf4 <__mcmp>
 802753a:	2800      	cmp	r0, #0
 802753c:	f73f adfc 	bgt.w	8027138 <_dtoa_r+0x428>
 8027540:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027542:	9e04      	ldr	r6, [sp, #16]
 8027544:	ea6f 0b03 	mvn.w	fp, r3
 8027548:	f04f 0900 	mov.w	r9, #0
 802754c:	4629      	mov	r1, r5
 802754e:	4620      	mov	r0, r4
 8027550:	f000 f96e 	bl	8027830 <_Bfree>
 8027554:	2f00      	cmp	r7, #0
 8027556:	f43f aebb 	beq.w	80272d0 <_dtoa_r+0x5c0>
 802755a:	f1b9 0f00 	cmp.w	r9, #0
 802755e:	d005      	beq.n	802756c <_dtoa_r+0x85c>
 8027560:	45b9      	cmp	r9, r7
 8027562:	d003      	beq.n	802756c <_dtoa_r+0x85c>
 8027564:	4649      	mov	r1, r9
 8027566:	4620      	mov	r0, r4
 8027568:	f000 f962 	bl	8027830 <_Bfree>
 802756c:	4639      	mov	r1, r7
 802756e:	4620      	mov	r0, r4
 8027570:	f000 f95e 	bl	8027830 <_Bfree>
 8027574:	e6ac      	b.n	80272d0 <_dtoa_r+0x5c0>
 8027576:	2500      	movs	r5, #0
 8027578:	462f      	mov	r7, r5
 802757a:	e7e1      	b.n	8027540 <_dtoa_r+0x830>
 802757c:	469b      	mov	fp, r3
 802757e:	462f      	mov	r7, r5
 8027580:	e5da      	b.n	8027138 <_dtoa_r+0x428>
 8027582:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027584:	f8cd 9018 	str.w	r9, [sp, #24]
 8027588:	2b00      	cmp	r3, #0
 802758a:	f000 80f3 	beq.w	8027774 <_dtoa_r+0xa64>
 802758e:	2e00      	cmp	r6, #0
 8027590:	dd05      	ble.n	802759e <_dtoa_r+0x88e>
 8027592:	4639      	mov	r1, r7
 8027594:	4632      	mov	r2, r6
 8027596:	4620      	mov	r0, r4
 8027598:	f000 fad8 	bl	8027b4c <__lshift>
 802759c:	4607      	mov	r7, r0
 802759e:	f1b8 0f00 	cmp.w	r8, #0
 80275a2:	d04c      	beq.n	802763e <_dtoa_r+0x92e>
 80275a4:	6879      	ldr	r1, [r7, #4]
 80275a6:	4620      	mov	r0, r4
 80275a8:	f000 f90e 	bl	80277c8 <_Balloc>
 80275ac:	693a      	ldr	r2, [r7, #16]
 80275ae:	3202      	adds	r2, #2
 80275b0:	4606      	mov	r6, r0
 80275b2:	0092      	lsls	r2, r2, #2
 80275b4:	f107 010c 	add.w	r1, r7, #12
 80275b8:	300c      	adds	r0, #12
 80275ba:	f7fe fde3 	bl	8026184 <memcpy>
 80275be:	2201      	movs	r2, #1
 80275c0:	4631      	mov	r1, r6
 80275c2:	4620      	mov	r0, r4
 80275c4:	f000 fac2 	bl	8027b4c <__lshift>
 80275c8:	9b02      	ldr	r3, [sp, #8]
 80275ca:	f8dd a010 	ldr.w	sl, [sp, #16]
 80275ce:	f003 0301 	and.w	r3, r3, #1
 80275d2:	46b9      	mov	r9, r7
 80275d4:	9307      	str	r3, [sp, #28]
 80275d6:	4607      	mov	r7, r0
 80275d8:	4629      	mov	r1, r5
 80275da:	9801      	ldr	r0, [sp, #4]
 80275dc:	f7ff fb09 	bl	8026bf2 <quorem>
 80275e0:	4649      	mov	r1, r9
 80275e2:	4606      	mov	r6, r0
 80275e4:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80275e8:	9801      	ldr	r0, [sp, #4]
 80275ea:	f000 fb03 	bl	8027bf4 <__mcmp>
 80275ee:	463a      	mov	r2, r7
 80275f0:	9002      	str	r0, [sp, #8]
 80275f2:	4629      	mov	r1, r5
 80275f4:	4620      	mov	r0, r4
 80275f6:	f000 fb17 	bl	8027c28 <__mdiff>
 80275fa:	68c3      	ldr	r3, [r0, #12]
 80275fc:	4602      	mov	r2, r0
 80275fe:	bb03      	cbnz	r3, 8027642 <_dtoa_r+0x932>
 8027600:	4601      	mov	r1, r0
 8027602:	9009      	str	r0, [sp, #36]	; 0x24
 8027604:	9801      	ldr	r0, [sp, #4]
 8027606:	f000 faf5 	bl	8027bf4 <__mcmp>
 802760a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802760c:	4603      	mov	r3, r0
 802760e:	4611      	mov	r1, r2
 8027610:	4620      	mov	r0, r4
 8027612:	9309      	str	r3, [sp, #36]	; 0x24
 8027614:	f000 f90c 	bl	8027830 <_Bfree>
 8027618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802761a:	b9a3      	cbnz	r3, 8027646 <_dtoa_r+0x936>
 802761c:	9a08      	ldr	r2, [sp, #32]
 802761e:	b992      	cbnz	r2, 8027646 <_dtoa_r+0x936>
 8027620:	9a07      	ldr	r2, [sp, #28]
 8027622:	b982      	cbnz	r2, 8027646 <_dtoa_r+0x936>
 8027624:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8027628:	d029      	beq.n	802767e <_dtoa_r+0x96e>
 802762a:	9b02      	ldr	r3, [sp, #8]
 802762c:	2b00      	cmp	r3, #0
 802762e:	dd01      	ble.n	8027634 <_dtoa_r+0x924>
 8027630:	f106 0831 	add.w	r8, r6, #49	; 0x31
 8027634:	f10a 0601 	add.w	r6, sl, #1
 8027638:	f88a 8000 	strb.w	r8, [sl]
 802763c:	e786      	b.n	802754c <_dtoa_r+0x83c>
 802763e:	4638      	mov	r0, r7
 8027640:	e7c2      	b.n	80275c8 <_dtoa_r+0x8b8>
 8027642:	2301      	movs	r3, #1
 8027644:	e7e3      	b.n	802760e <_dtoa_r+0x8fe>
 8027646:	9a02      	ldr	r2, [sp, #8]
 8027648:	2a00      	cmp	r2, #0
 802764a:	db04      	blt.n	8027656 <_dtoa_r+0x946>
 802764c:	d124      	bne.n	8027698 <_dtoa_r+0x988>
 802764e:	9a08      	ldr	r2, [sp, #32]
 8027650:	bb12      	cbnz	r2, 8027698 <_dtoa_r+0x988>
 8027652:	9a07      	ldr	r2, [sp, #28]
 8027654:	bb02      	cbnz	r2, 8027698 <_dtoa_r+0x988>
 8027656:	2b00      	cmp	r3, #0
 8027658:	ddec      	ble.n	8027634 <_dtoa_r+0x924>
 802765a:	2201      	movs	r2, #1
 802765c:	9901      	ldr	r1, [sp, #4]
 802765e:	4620      	mov	r0, r4
 8027660:	f000 fa74 	bl	8027b4c <__lshift>
 8027664:	4629      	mov	r1, r5
 8027666:	9001      	str	r0, [sp, #4]
 8027668:	f000 fac4 	bl	8027bf4 <__mcmp>
 802766c:	2800      	cmp	r0, #0
 802766e:	dc03      	bgt.n	8027678 <_dtoa_r+0x968>
 8027670:	d1e0      	bne.n	8027634 <_dtoa_r+0x924>
 8027672:	f018 0f01 	tst.w	r8, #1
 8027676:	d0dd      	beq.n	8027634 <_dtoa_r+0x924>
 8027678:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 802767c:	d1d8      	bne.n	8027630 <_dtoa_r+0x920>
 802767e:	2339      	movs	r3, #57	; 0x39
 8027680:	f10a 0601 	add.w	r6, sl, #1
 8027684:	f88a 3000 	strb.w	r3, [sl]
 8027688:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 802768c:	2b39      	cmp	r3, #57	; 0x39
 802768e:	f106 32ff 	add.w	r2, r6, #4294967295
 8027692:	d04c      	beq.n	802772e <_dtoa_r+0xa1e>
 8027694:	3301      	adds	r3, #1
 8027696:	e051      	b.n	802773c <_dtoa_r+0xa2c>
 8027698:	2b00      	cmp	r3, #0
 802769a:	f10a 0601 	add.w	r6, sl, #1
 802769e:	dd05      	ble.n	80276ac <_dtoa_r+0x99c>
 80276a0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80276a4:	d0eb      	beq.n	802767e <_dtoa_r+0x96e>
 80276a6:	f108 0801 	add.w	r8, r8, #1
 80276aa:	e7c5      	b.n	8027638 <_dtoa_r+0x928>
 80276ac:	9b04      	ldr	r3, [sp, #16]
 80276ae:	9a06      	ldr	r2, [sp, #24]
 80276b0:	f806 8c01 	strb.w	r8, [r6, #-1]
 80276b4:	1af3      	subs	r3, r6, r3
 80276b6:	4293      	cmp	r3, r2
 80276b8:	d021      	beq.n	80276fe <_dtoa_r+0x9ee>
 80276ba:	2300      	movs	r3, #0
 80276bc:	220a      	movs	r2, #10
 80276be:	9901      	ldr	r1, [sp, #4]
 80276c0:	4620      	mov	r0, r4
 80276c2:	f000 f8cc 	bl	802785e <__multadd>
 80276c6:	45b9      	cmp	r9, r7
 80276c8:	9001      	str	r0, [sp, #4]
 80276ca:	f04f 0300 	mov.w	r3, #0
 80276ce:	f04f 020a 	mov.w	r2, #10
 80276d2:	4649      	mov	r1, r9
 80276d4:	4620      	mov	r0, r4
 80276d6:	d105      	bne.n	80276e4 <_dtoa_r+0x9d4>
 80276d8:	f000 f8c1 	bl	802785e <__multadd>
 80276dc:	4681      	mov	r9, r0
 80276de:	4607      	mov	r7, r0
 80276e0:	46b2      	mov	sl, r6
 80276e2:	e779      	b.n	80275d8 <_dtoa_r+0x8c8>
 80276e4:	f000 f8bb 	bl	802785e <__multadd>
 80276e8:	4639      	mov	r1, r7
 80276ea:	4681      	mov	r9, r0
 80276ec:	2300      	movs	r3, #0
 80276ee:	220a      	movs	r2, #10
 80276f0:	4620      	mov	r0, r4
 80276f2:	f000 f8b4 	bl	802785e <__multadd>
 80276f6:	4607      	mov	r7, r0
 80276f8:	e7f2      	b.n	80276e0 <_dtoa_r+0x9d0>
 80276fa:	f04f 0900 	mov.w	r9, #0
 80276fe:	2201      	movs	r2, #1
 8027700:	9901      	ldr	r1, [sp, #4]
 8027702:	4620      	mov	r0, r4
 8027704:	f000 fa22 	bl	8027b4c <__lshift>
 8027708:	4629      	mov	r1, r5
 802770a:	9001      	str	r0, [sp, #4]
 802770c:	f000 fa72 	bl	8027bf4 <__mcmp>
 8027710:	2800      	cmp	r0, #0
 8027712:	dcb9      	bgt.n	8027688 <_dtoa_r+0x978>
 8027714:	d102      	bne.n	802771c <_dtoa_r+0xa0c>
 8027716:	f018 0f01 	tst.w	r8, #1
 802771a:	d1b5      	bne.n	8027688 <_dtoa_r+0x978>
 802771c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8027720:	2b30      	cmp	r3, #48	; 0x30
 8027722:	f106 32ff 	add.w	r2, r6, #4294967295
 8027726:	f47f af11 	bne.w	802754c <_dtoa_r+0x83c>
 802772a:	4616      	mov	r6, r2
 802772c:	e7f6      	b.n	802771c <_dtoa_r+0xa0c>
 802772e:	9b04      	ldr	r3, [sp, #16]
 8027730:	4293      	cmp	r3, r2
 8027732:	d105      	bne.n	8027740 <_dtoa_r+0xa30>
 8027734:	9a04      	ldr	r2, [sp, #16]
 8027736:	f10b 0b01 	add.w	fp, fp, #1
 802773a:	2331      	movs	r3, #49	; 0x31
 802773c:	7013      	strb	r3, [r2, #0]
 802773e:	e705      	b.n	802754c <_dtoa_r+0x83c>
 8027740:	4616      	mov	r6, r2
 8027742:	e7a1      	b.n	8027688 <_dtoa_r+0x978>
 8027744:	4b16      	ldr	r3, [pc, #88]	; (80277a0 <_dtoa_r+0xa90>)
 8027746:	f7ff bb48 	b.w	8026dda <_dtoa_r+0xca>
 802774a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802774c:	2b00      	cmp	r3, #0
 802774e:	f47f ab23 	bne.w	8026d98 <_dtoa_r+0x88>
 8027752:	4b14      	ldr	r3, [pc, #80]	; (80277a4 <_dtoa_r+0xa94>)
 8027754:	f7ff bb41 	b.w	8026dda <_dtoa_r+0xca>
 8027758:	9b08      	ldr	r3, [sp, #32]
 802775a:	2b01      	cmp	r3, #1
 802775c:	f77f ae3b 	ble.w	80273d6 <_dtoa_r+0x6c6>
 8027760:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8027764:	e64f      	b.n	8027406 <_dtoa_r+0x6f6>
 8027766:	9b06      	ldr	r3, [sp, #24]
 8027768:	2b00      	cmp	r3, #0
 802776a:	dc03      	bgt.n	8027774 <_dtoa_r+0xa64>
 802776c:	9b08      	ldr	r3, [sp, #32]
 802776e:	2b02      	cmp	r3, #2
 8027770:	f73f aed7 	bgt.w	8027522 <_dtoa_r+0x812>
 8027774:	9e04      	ldr	r6, [sp, #16]
 8027776:	9801      	ldr	r0, [sp, #4]
 8027778:	4629      	mov	r1, r5
 802777a:	f7ff fa3a 	bl	8026bf2 <quorem>
 802777e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8027782:	f806 8b01 	strb.w	r8, [r6], #1
 8027786:	9b04      	ldr	r3, [sp, #16]
 8027788:	9a06      	ldr	r2, [sp, #24]
 802778a:	1af3      	subs	r3, r6, r3
 802778c:	429a      	cmp	r2, r3
 802778e:	ddb4      	ble.n	80276fa <_dtoa_r+0x9ea>
 8027790:	2300      	movs	r3, #0
 8027792:	220a      	movs	r2, #10
 8027794:	9901      	ldr	r1, [sp, #4]
 8027796:	4620      	mov	r0, r4
 8027798:	f000 f861 	bl	802785e <__multadd>
 802779c:	9001      	str	r0, [sp, #4]
 802779e:	e7ea      	b.n	8027776 <_dtoa_r+0xa66>
 80277a0:	080c2eb4 	.word	0x080c2eb4
 80277a4:	080c2ed8 	.word	0x080c2ed8

080277a8 <_localeconv_r>:
 80277a8:	4b04      	ldr	r3, [pc, #16]	; (80277bc <_localeconv_r+0x14>)
 80277aa:	681b      	ldr	r3, [r3, #0]
 80277ac:	6a18      	ldr	r0, [r3, #32]
 80277ae:	4b04      	ldr	r3, [pc, #16]	; (80277c0 <_localeconv_r+0x18>)
 80277b0:	2800      	cmp	r0, #0
 80277b2:	bf08      	it	eq
 80277b4:	4618      	moveq	r0, r3
 80277b6:	30f0      	adds	r0, #240	; 0xf0
 80277b8:	4770      	bx	lr
 80277ba:	bf00      	nop
 80277bc:	24007410 	.word	0x24007410
 80277c0:	24007474 	.word	0x24007474

080277c4 <__malloc_lock>:
 80277c4:	4770      	bx	lr

080277c6 <__malloc_unlock>:
 80277c6:	4770      	bx	lr

080277c8 <_Balloc>:
 80277c8:	b570      	push	{r4, r5, r6, lr}
 80277ca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80277cc:	4604      	mov	r4, r0
 80277ce:	460e      	mov	r6, r1
 80277d0:	b93d      	cbnz	r5, 80277e2 <_Balloc+0x1a>
 80277d2:	2010      	movs	r0, #16
 80277d4:	f7fe fcc6 	bl	8026164 <malloc>
 80277d8:	6260      	str	r0, [r4, #36]	; 0x24
 80277da:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80277de:	6005      	str	r5, [r0, #0]
 80277e0:	60c5      	str	r5, [r0, #12]
 80277e2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80277e4:	68eb      	ldr	r3, [r5, #12]
 80277e6:	b183      	cbz	r3, 802780a <_Balloc+0x42>
 80277e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80277ea:	68db      	ldr	r3, [r3, #12]
 80277ec:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80277f0:	b9b8      	cbnz	r0, 8027822 <_Balloc+0x5a>
 80277f2:	2101      	movs	r1, #1
 80277f4:	fa01 f506 	lsl.w	r5, r1, r6
 80277f8:	1d6a      	adds	r2, r5, #5
 80277fa:	0092      	lsls	r2, r2, #2
 80277fc:	4620      	mov	r0, r4
 80277fe:	f000 fabf 	bl	8027d80 <_calloc_r>
 8027802:	b160      	cbz	r0, 802781e <_Balloc+0x56>
 8027804:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8027808:	e00e      	b.n	8027828 <_Balloc+0x60>
 802780a:	2221      	movs	r2, #33	; 0x21
 802780c:	2104      	movs	r1, #4
 802780e:	4620      	mov	r0, r4
 8027810:	f000 fab6 	bl	8027d80 <_calloc_r>
 8027814:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8027816:	60e8      	str	r0, [r5, #12]
 8027818:	68db      	ldr	r3, [r3, #12]
 802781a:	2b00      	cmp	r3, #0
 802781c:	d1e4      	bne.n	80277e8 <_Balloc+0x20>
 802781e:	2000      	movs	r0, #0
 8027820:	bd70      	pop	{r4, r5, r6, pc}
 8027822:	6802      	ldr	r2, [r0, #0]
 8027824:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8027828:	2300      	movs	r3, #0
 802782a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802782e:	e7f7      	b.n	8027820 <_Balloc+0x58>

08027830 <_Bfree>:
 8027830:	b570      	push	{r4, r5, r6, lr}
 8027832:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8027834:	4606      	mov	r6, r0
 8027836:	460d      	mov	r5, r1
 8027838:	b93c      	cbnz	r4, 802784a <_Bfree+0x1a>
 802783a:	2010      	movs	r0, #16
 802783c:	f7fe fc92 	bl	8026164 <malloc>
 8027840:	6270      	str	r0, [r6, #36]	; 0x24
 8027842:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8027846:	6004      	str	r4, [r0, #0]
 8027848:	60c4      	str	r4, [r0, #12]
 802784a:	b13d      	cbz	r5, 802785c <_Bfree+0x2c>
 802784c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 802784e:	686a      	ldr	r2, [r5, #4]
 8027850:	68db      	ldr	r3, [r3, #12]
 8027852:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8027856:	6029      	str	r1, [r5, #0]
 8027858:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 802785c:	bd70      	pop	{r4, r5, r6, pc}

0802785e <__multadd>:
 802785e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027862:	690d      	ldr	r5, [r1, #16]
 8027864:	461f      	mov	r7, r3
 8027866:	4606      	mov	r6, r0
 8027868:	460c      	mov	r4, r1
 802786a:	f101 0c14 	add.w	ip, r1, #20
 802786e:	2300      	movs	r3, #0
 8027870:	f8dc 0000 	ldr.w	r0, [ip]
 8027874:	b281      	uxth	r1, r0
 8027876:	fb02 7101 	mla	r1, r2, r1, r7
 802787a:	0c0f      	lsrs	r7, r1, #16
 802787c:	0c00      	lsrs	r0, r0, #16
 802787e:	fb02 7000 	mla	r0, r2, r0, r7
 8027882:	b289      	uxth	r1, r1
 8027884:	3301      	adds	r3, #1
 8027886:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 802788a:	429d      	cmp	r5, r3
 802788c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8027890:	f84c 1b04 	str.w	r1, [ip], #4
 8027894:	dcec      	bgt.n	8027870 <__multadd+0x12>
 8027896:	b1d7      	cbz	r7, 80278ce <__multadd+0x70>
 8027898:	68a3      	ldr	r3, [r4, #8]
 802789a:	42ab      	cmp	r3, r5
 802789c:	dc12      	bgt.n	80278c4 <__multadd+0x66>
 802789e:	6861      	ldr	r1, [r4, #4]
 80278a0:	4630      	mov	r0, r6
 80278a2:	3101      	adds	r1, #1
 80278a4:	f7ff ff90 	bl	80277c8 <_Balloc>
 80278a8:	6922      	ldr	r2, [r4, #16]
 80278aa:	3202      	adds	r2, #2
 80278ac:	f104 010c 	add.w	r1, r4, #12
 80278b0:	4680      	mov	r8, r0
 80278b2:	0092      	lsls	r2, r2, #2
 80278b4:	300c      	adds	r0, #12
 80278b6:	f7fe fc65 	bl	8026184 <memcpy>
 80278ba:	4621      	mov	r1, r4
 80278bc:	4630      	mov	r0, r6
 80278be:	f7ff ffb7 	bl	8027830 <_Bfree>
 80278c2:	4644      	mov	r4, r8
 80278c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80278c8:	3501      	adds	r5, #1
 80278ca:	615f      	str	r7, [r3, #20]
 80278cc:	6125      	str	r5, [r4, #16]
 80278ce:	4620      	mov	r0, r4
 80278d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080278d4 <__hi0bits>:
 80278d4:	0c02      	lsrs	r2, r0, #16
 80278d6:	0412      	lsls	r2, r2, #16
 80278d8:	4603      	mov	r3, r0
 80278da:	b9b2      	cbnz	r2, 802790a <__hi0bits+0x36>
 80278dc:	0403      	lsls	r3, r0, #16
 80278de:	2010      	movs	r0, #16
 80278e0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80278e4:	bf04      	itt	eq
 80278e6:	021b      	lsleq	r3, r3, #8
 80278e8:	3008      	addeq	r0, #8
 80278ea:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80278ee:	bf04      	itt	eq
 80278f0:	011b      	lsleq	r3, r3, #4
 80278f2:	3004      	addeq	r0, #4
 80278f4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80278f8:	bf04      	itt	eq
 80278fa:	009b      	lsleq	r3, r3, #2
 80278fc:	3002      	addeq	r0, #2
 80278fe:	2b00      	cmp	r3, #0
 8027900:	db06      	blt.n	8027910 <__hi0bits+0x3c>
 8027902:	005b      	lsls	r3, r3, #1
 8027904:	d503      	bpl.n	802790e <__hi0bits+0x3a>
 8027906:	3001      	adds	r0, #1
 8027908:	4770      	bx	lr
 802790a:	2000      	movs	r0, #0
 802790c:	e7e8      	b.n	80278e0 <__hi0bits+0xc>
 802790e:	2020      	movs	r0, #32
 8027910:	4770      	bx	lr

08027912 <__lo0bits>:
 8027912:	6803      	ldr	r3, [r0, #0]
 8027914:	f013 0207 	ands.w	r2, r3, #7
 8027918:	4601      	mov	r1, r0
 802791a:	d00b      	beq.n	8027934 <__lo0bits+0x22>
 802791c:	07da      	lsls	r2, r3, #31
 802791e:	d423      	bmi.n	8027968 <__lo0bits+0x56>
 8027920:	0798      	lsls	r0, r3, #30
 8027922:	bf49      	itett	mi
 8027924:	085b      	lsrmi	r3, r3, #1
 8027926:	089b      	lsrpl	r3, r3, #2
 8027928:	2001      	movmi	r0, #1
 802792a:	600b      	strmi	r3, [r1, #0]
 802792c:	bf5c      	itt	pl
 802792e:	600b      	strpl	r3, [r1, #0]
 8027930:	2002      	movpl	r0, #2
 8027932:	4770      	bx	lr
 8027934:	b298      	uxth	r0, r3
 8027936:	b9a8      	cbnz	r0, 8027964 <__lo0bits+0x52>
 8027938:	0c1b      	lsrs	r3, r3, #16
 802793a:	2010      	movs	r0, #16
 802793c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8027940:	bf04      	itt	eq
 8027942:	0a1b      	lsreq	r3, r3, #8
 8027944:	3008      	addeq	r0, #8
 8027946:	071a      	lsls	r2, r3, #28
 8027948:	bf04      	itt	eq
 802794a:	091b      	lsreq	r3, r3, #4
 802794c:	3004      	addeq	r0, #4
 802794e:	079a      	lsls	r2, r3, #30
 8027950:	bf04      	itt	eq
 8027952:	089b      	lsreq	r3, r3, #2
 8027954:	3002      	addeq	r0, #2
 8027956:	07da      	lsls	r2, r3, #31
 8027958:	d402      	bmi.n	8027960 <__lo0bits+0x4e>
 802795a:	085b      	lsrs	r3, r3, #1
 802795c:	d006      	beq.n	802796c <__lo0bits+0x5a>
 802795e:	3001      	adds	r0, #1
 8027960:	600b      	str	r3, [r1, #0]
 8027962:	4770      	bx	lr
 8027964:	4610      	mov	r0, r2
 8027966:	e7e9      	b.n	802793c <__lo0bits+0x2a>
 8027968:	2000      	movs	r0, #0
 802796a:	4770      	bx	lr
 802796c:	2020      	movs	r0, #32
 802796e:	4770      	bx	lr

08027970 <__i2b>:
 8027970:	b510      	push	{r4, lr}
 8027972:	460c      	mov	r4, r1
 8027974:	2101      	movs	r1, #1
 8027976:	f7ff ff27 	bl	80277c8 <_Balloc>
 802797a:	2201      	movs	r2, #1
 802797c:	6144      	str	r4, [r0, #20]
 802797e:	6102      	str	r2, [r0, #16]
 8027980:	bd10      	pop	{r4, pc}

08027982 <__multiply>:
 8027982:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027986:	4614      	mov	r4, r2
 8027988:	690a      	ldr	r2, [r1, #16]
 802798a:	6923      	ldr	r3, [r4, #16]
 802798c:	429a      	cmp	r2, r3
 802798e:	bfb8      	it	lt
 8027990:	460b      	movlt	r3, r1
 8027992:	4688      	mov	r8, r1
 8027994:	bfbc      	itt	lt
 8027996:	46a0      	movlt	r8, r4
 8027998:	461c      	movlt	r4, r3
 802799a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 802799e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80279a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80279a6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80279aa:	eb07 0609 	add.w	r6, r7, r9
 80279ae:	42b3      	cmp	r3, r6
 80279b0:	bfb8      	it	lt
 80279b2:	3101      	addlt	r1, #1
 80279b4:	f7ff ff08 	bl	80277c8 <_Balloc>
 80279b8:	f100 0514 	add.w	r5, r0, #20
 80279bc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80279c0:	462b      	mov	r3, r5
 80279c2:	2200      	movs	r2, #0
 80279c4:	4573      	cmp	r3, lr
 80279c6:	d316      	bcc.n	80279f6 <__multiply+0x74>
 80279c8:	f104 0214 	add.w	r2, r4, #20
 80279cc:	f108 0114 	add.w	r1, r8, #20
 80279d0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80279d4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80279d8:	9300      	str	r3, [sp, #0]
 80279da:	9b00      	ldr	r3, [sp, #0]
 80279dc:	9201      	str	r2, [sp, #4]
 80279de:	4293      	cmp	r3, r2
 80279e0:	d80c      	bhi.n	80279fc <__multiply+0x7a>
 80279e2:	2e00      	cmp	r6, #0
 80279e4:	dd03      	ble.n	80279ee <__multiply+0x6c>
 80279e6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80279ea:	2b00      	cmp	r3, #0
 80279ec:	d05d      	beq.n	8027aaa <__multiply+0x128>
 80279ee:	6106      	str	r6, [r0, #16]
 80279f0:	b003      	add	sp, #12
 80279f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80279f6:	f843 2b04 	str.w	r2, [r3], #4
 80279fa:	e7e3      	b.n	80279c4 <__multiply+0x42>
 80279fc:	f8b2 b000 	ldrh.w	fp, [r2]
 8027a00:	f1bb 0f00 	cmp.w	fp, #0
 8027a04:	d023      	beq.n	8027a4e <__multiply+0xcc>
 8027a06:	4689      	mov	r9, r1
 8027a08:	46ac      	mov	ip, r5
 8027a0a:	f04f 0800 	mov.w	r8, #0
 8027a0e:	f859 4b04 	ldr.w	r4, [r9], #4
 8027a12:	f8dc a000 	ldr.w	sl, [ip]
 8027a16:	b2a3      	uxth	r3, r4
 8027a18:	fa1f fa8a 	uxth.w	sl, sl
 8027a1c:	fb0b a303 	mla	r3, fp, r3, sl
 8027a20:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8027a24:	f8dc 4000 	ldr.w	r4, [ip]
 8027a28:	4443      	add	r3, r8
 8027a2a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8027a2e:	fb0b 840a 	mla	r4, fp, sl, r8
 8027a32:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8027a36:	46e2      	mov	sl, ip
 8027a38:	b29b      	uxth	r3, r3
 8027a3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8027a3e:	454f      	cmp	r7, r9
 8027a40:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8027a44:	f84a 3b04 	str.w	r3, [sl], #4
 8027a48:	d82b      	bhi.n	8027aa2 <__multiply+0x120>
 8027a4a:	f8cc 8004 	str.w	r8, [ip, #4]
 8027a4e:	9b01      	ldr	r3, [sp, #4]
 8027a50:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8027a54:	3204      	adds	r2, #4
 8027a56:	f1ba 0f00 	cmp.w	sl, #0
 8027a5a:	d020      	beq.n	8027a9e <__multiply+0x11c>
 8027a5c:	682b      	ldr	r3, [r5, #0]
 8027a5e:	4689      	mov	r9, r1
 8027a60:	46a8      	mov	r8, r5
 8027a62:	f04f 0b00 	mov.w	fp, #0
 8027a66:	f8b9 c000 	ldrh.w	ip, [r9]
 8027a6a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8027a6e:	fb0a 440c 	mla	r4, sl, ip, r4
 8027a72:	445c      	add	r4, fp
 8027a74:	46c4      	mov	ip, r8
 8027a76:	b29b      	uxth	r3, r3
 8027a78:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8027a7c:	f84c 3b04 	str.w	r3, [ip], #4
 8027a80:	f859 3b04 	ldr.w	r3, [r9], #4
 8027a84:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8027a88:	0c1b      	lsrs	r3, r3, #16
 8027a8a:	fb0a b303 	mla	r3, sl, r3, fp
 8027a8e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8027a92:	454f      	cmp	r7, r9
 8027a94:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8027a98:	d805      	bhi.n	8027aa6 <__multiply+0x124>
 8027a9a:	f8c8 3004 	str.w	r3, [r8, #4]
 8027a9e:	3504      	adds	r5, #4
 8027aa0:	e79b      	b.n	80279da <__multiply+0x58>
 8027aa2:	46d4      	mov	ip, sl
 8027aa4:	e7b3      	b.n	8027a0e <__multiply+0x8c>
 8027aa6:	46e0      	mov	r8, ip
 8027aa8:	e7dd      	b.n	8027a66 <__multiply+0xe4>
 8027aaa:	3e01      	subs	r6, #1
 8027aac:	e799      	b.n	80279e2 <__multiply+0x60>
	...

08027ab0 <__pow5mult>:
 8027ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027ab4:	4615      	mov	r5, r2
 8027ab6:	f012 0203 	ands.w	r2, r2, #3
 8027aba:	4606      	mov	r6, r0
 8027abc:	460f      	mov	r7, r1
 8027abe:	d007      	beq.n	8027ad0 <__pow5mult+0x20>
 8027ac0:	3a01      	subs	r2, #1
 8027ac2:	4c21      	ldr	r4, [pc, #132]	; (8027b48 <__pow5mult+0x98>)
 8027ac4:	2300      	movs	r3, #0
 8027ac6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8027aca:	f7ff fec8 	bl	802785e <__multadd>
 8027ace:	4607      	mov	r7, r0
 8027ad0:	10ad      	asrs	r5, r5, #2
 8027ad2:	d035      	beq.n	8027b40 <__pow5mult+0x90>
 8027ad4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8027ad6:	b93c      	cbnz	r4, 8027ae8 <__pow5mult+0x38>
 8027ad8:	2010      	movs	r0, #16
 8027ada:	f7fe fb43 	bl	8026164 <malloc>
 8027ade:	6270      	str	r0, [r6, #36]	; 0x24
 8027ae0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8027ae4:	6004      	str	r4, [r0, #0]
 8027ae6:	60c4      	str	r4, [r0, #12]
 8027ae8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8027aec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8027af0:	b94c      	cbnz	r4, 8027b06 <__pow5mult+0x56>
 8027af2:	f240 2171 	movw	r1, #625	; 0x271
 8027af6:	4630      	mov	r0, r6
 8027af8:	f7ff ff3a 	bl	8027970 <__i2b>
 8027afc:	2300      	movs	r3, #0
 8027afe:	f8c8 0008 	str.w	r0, [r8, #8]
 8027b02:	4604      	mov	r4, r0
 8027b04:	6003      	str	r3, [r0, #0]
 8027b06:	f04f 0800 	mov.w	r8, #0
 8027b0a:	07eb      	lsls	r3, r5, #31
 8027b0c:	d50a      	bpl.n	8027b24 <__pow5mult+0x74>
 8027b0e:	4639      	mov	r1, r7
 8027b10:	4622      	mov	r2, r4
 8027b12:	4630      	mov	r0, r6
 8027b14:	f7ff ff35 	bl	8027982 <__multiply>
 8027b18:	4639      	mov	r1, r7
 8027b1a:	4681      	mov	r9, r0
 8027b1c:	4630      	mov	r0, r6
 8027b1e:	f7ff fe87 	bl	8027830 <_Bfree>
 8027b22:	464f      	mov	r7, r9
 8027b24:	106d      	asrs	r5, r5, #1
 8027b26:	d00b      	beq.n	8027b40 <__pow5mult+0x90>
 8027b28:	6820      	ldr	r0, [r4, #0]
 8027b2a:	b938      	cbnz	r0, 8027b3c <__pow5mult+0x8c>
 8027b2c:	4622      	mov	r2, r4
 8027b2e:	4621      	mov	r1, r4
 8027b30:	4630      	mov	r0, r6
 8027b32:	f7ff ff26 	bl	8027982 <__multiply>
 8027b36:	6020      	str	r0, [r4, #0]
 8027b38:	f8c0 8000 	str.w	r8, [r0]
 8027b3c:	4604      	mov	r4, r0
 8027b3e:	e7e4      	b.n	8027b0a <__pow5mult+0x5a>
 8027b40:	4638      	mov	r0, r7
 8027b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8027b46:	bf00      	nop
 8027b48:	080c2fd8 	.word	0x080c2fd8

08027b4c <__lshift>:
 8027b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027b50:	460c      	mov	r4, r1
 8027b52:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8027b56:	6923      	ldr	r3, [r4, #16]
 8027b58:	6849      	ldr	r1, [r1, #4]
 8027b5a:	eb0a 0903 	add.w	r9, sl, r3
 8027b5e:	68a3      	ldr	r3, [r4, #8]
 8027b60:	4607      	mov	r7, r0
 8027b62:	4616      	mov	r6, r2
 8027b64:	f109 0501 	add.w	r5, r9, #1
 8027b68:	42ab      	cmp	r3, r5
 8027b6a:	db32      	blt.n	8027bd2 <__lshift+0x86>
 8027b6c:	4638      	mov	r0, r7
 8027b6e:	f7ff fe2b 	bl	80277c8 <_Balloc>
 8027b72:	2300      	movs	r3, #0
 8027b74:	4680      	mov	r8, r0
 8027b76:	f100 0114 	add.w	r1, r0, #20
 8027b7a:	461a      	mov	r2, r3
 8027b7c:	4553      	cmp	r3, sl
 8027b7e:	db2b      	blt.n	8027bd8 <__lshift+0x8c>
 8027b80:	6920      	ldr	r0, [r4, #16]
 8027b82:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8027b86:	f104 0314 	add.w	r3, r4, #20
 8027b8a:	f016 021f 	ands.w	r2, r6, #31
 8027b8e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8027b92:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8027b96:	d025      	beq.n	8027be4 <__lshift+0x98>
 8027b98:	f1c2 0e20 	rsb	lr, r2, #32
 8027b9c:	2000      	movs	r0, #0
 8027b9e:	681e      	ldr	r6, [r3, #0]
 8027ba0:	468a      	mov	sl, r1
 8027ba2:	4096      	lsls	r6, r2
 8027ba4:	4330      	orrs	r0, r6
 8027ba6:	f84a 0b04 	str.w	r0, [sl], #4
 8027baa:	f853 0b04 	ldr.w	r0, [r3], #4
 8027bae:	459c      	cmp	ip, r3
 8027bb0:	fa20 f00e 	lsr.w	r0, r0, lr
 8027bb4:	d814      	bhi.n	8027be0 <__lshift+0x94>
 8027bb6:	6048      	str	r0, [r1, #4]
 8027bb8:	b108      	cbz	r0, 8027bbe <__lshift+0x72>
 8027bba:	f109 0502 	add.w	r5, r9, #2
 8027bbe:	3d01      	subs	r5, #1
 8027bc0:	4638      	mov	r0, r7
 8027bc2:	f8c8 5010 	str.w	r5, [r8, #16]
 8027bc6:	4621      	mov	r1, r4
 8027bc8:	f7ff fe32 	bl	8027830 <_Bfree>
 8027bcc:	4640      	mov	r0, r8
 8027bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027bd2:	3101      	adds	r1, #1
 8027bd4:	005b      	lsls	r3, r3, #1
 8027bd6:	e7c7      	b.n	8027b68 <__lshift+0x1c>
 8027bd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8027bdc:	3301      	adds	r3, #1
 8027bde:	e7cd      	b.n	8027b7c <__lshift+0x30>
 8027be0:	4651      	mov	r1, sl
 8027be2:	e7dc      	b.n	8027b9e <__lshift+0x52>
 8027be4:	3904      	subs	r1, #4
 8027be6:	f853 2b04 	ldr.w	r2, [r3], #4
 8027bea:	f841 2f04 	str.w	r2, [r1, #4]!
 8027bee:	459c      	cmp	ip, r3
 8027bf0:	d8f9      	bhi.n	8027be6 <__lshift+0x9a>
 8027bf2:	e7e4      	b.n	8027bbe <__lshift+0x72>

08027bf4 <__mcmp>:
 8027bf4:	6903      	ldr	r3, [r0, #16]
 8027bf6:	690a      	ldr	r2, [r1, #16]
 8027bf8:	1a9b      	subs	r3, r3, r2
 8027bfa:	b530      	push	{r4, r5, lr}
 8027bfc:	d10c      	bne.n	8027c18 <__mcmp+0x24>
 8027bfe:	0092      	lsls	r2, r2, #2
 8027c00:	3014      	adds	r0, #20
 8027c02:	3114      	adds	r1, #20
 8027c04:	1884      	adds	r4, r0, r2
 8027c06:	4411      	add	r1, r2
 8027c08:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8027c0c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8027c10:	4295      	cmp	r5, r2
 8027c12:	d003      	beq.n	8027c1c <__mcmp+0x28>
 8027c14:	d305      	bcc.n	8027c22 <__mcmp+0x2e>
 8027c16:	2301      	movs	r3, #1
 8027c18:	4618      	mov	r0, r3
 8027c1a:	bd30      	pop	{r4, r5, pc}
 8027c1c:	42a0      	cmp	r0, r4
 8027c1e:	d3f3      	bcc.n	8027c08 <__mcmp+0x14>
 8027c20:	e7fa      	b.n	8027c18 <__mcmp+0x24>
 8027c22:	f04f 33ff 	mov.w	r3, #4294967295
 8027c26:	e7f7      	b.n	8027c18 <__mcmp+0x24>

08027c28 <__mdiff>:
 8027c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027c2c:	460d      	mov	r5, r1
 8027c2e:	4607      	mov	r7, r0
 8027c30:	4611      	mov	r1, r2
 8027c32:	4628      	mov	r0, r5
 8027c34:	4614      	mov	r4, r2
 8027c36:	f7ff ffdd 	bl	8027bf4 <__mcmp>
 8027c3a:	1e06      	subs	r6, r0, #0
 8027c3c:	d108      	bne.n	8027c50 <__mdiff+0x28>
 8027c3e:	4631      	mov	r1, r6
 8027c40:	4638      	mov	r0, r7
 8027c42:	f7ff fdc1 	bl	80277c8 <_Balloc>
 8027c46:	2301      	movs	r3, #1
 8027c48:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8027c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027c50:	bfa4      	itt	ge
 8027c52:	4623      	movge	r3, r4
 8027c54:	462c      	movge	r4, r5
 8027c56:	4638      	mov	r0, r7
 8027c58:	6861      	ldr	r1, [r4, #4]
 8027c5a:	bfa6      	itte	ge
 8027c5c:	461d      	movge	r5, r3
 8027c5e:	2600      	movge	r6, #0
 8027c60:	2601      	movlt	r6, #1
 8027c62:	f7ff fdb1 	bl	80277c8 <_Balloc>
 8027c66:	692b      	ldr	r3, [r5, #16]
 8027c68:	60c6      	str	r6, [r0, #12]
 8027c6a:	6926      	ldr	r6, [r4, #16]
 8027c6c:	f105 0914 	add.w	r9, r5, #20
 8027c70:	f104 0214 	add.w	r2, r4, #20
 8027c74:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8027c78:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8027c7c:	f100 0514 	add.w	r5, r0, #20
 8027c80:	f04f 0e00 	mov.w	lr, #0
 8027c84:	f852 ab04 	ldr.w	sl, [r2], #4
 8027c88:	f859 4b04 	ldr.w	r4, [r9], #4
 8027c8c:	fa1e f18a 	uxtah	r1, lr, sl
 8027c90:	b2a3      	uxth	r3, r4
 8027c92:	1ac9      	subs	r1, r1, r3
 8027c94:	0c23      	lsrs	r3, r4, #16
 8027c96:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8027c9a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8027c9e:	b289      	uxth	r1, r1
 8027ca0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8027ca4:	45c8      	cmp	r8, r9
 8027ca6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8027caa:	4694      	mov	ip, r2
 8027cac:	f845 3b04 	str.w	r3, [r5], #4
 8027cb0:	d8e8      	bhi.n	8027c84 <__mdiff+0x5c>
 8027cb2:	45bc      	cmp	ip, r7
 8027cb4:	d304      	bcc.n	8027cc0 <__mdiff+0x98>
 8027cb6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8027cba:	b183      	cbz	r3, 8027cde <__mdiff+0xb6>
 8027cbc:	6106      	str	r6, [r0, #16]
 8027cbe:	e7c5      	b.n	8027c4c <__mdiff+0x24>
 8027cc0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8027cc4:	fa1e f381 	uxtah	r3, lr, r1
 8027cc8:	141a      	asrs	r2, r3, #16
 8027cca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8027cce:	b29b      	uxth	r3, r3
 8027cd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8027cd4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8027cd8:	f845 3b04 	str.w	r3, [r5], #4
 8027cdc:	e7e9      	b.n	8027cb2 <__mdiff+0x8a>
 8027cde:	3e01      	subs	r6, #1
 8027ce0:	e7e9      	b.n	8027cb6 <__mdiff+0x8e>

08027ce2 <__d2b>:
 8027ce2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8027ce6:	460e      	mov	r6, r1
 8027ce8:	2101      	movs	r1, #1
 8027cea:	ec59 8b10 	vmov	r8, r9, d0
 8027cee:	4615      	mov	r5, r2
 8027cf0:	f7ff fd6a 	bl	80277c8 <_Balloc>
 8027cf4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8027cf8:	4607      	mov	r7, r0
 8027cfa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8027cfe:	bb34      	cbnz	r4, 8027d4e <__d2b+0x6c>
 8027d00:	9301      	str	r3, [sp, #4]
 8027d02:	f1b8 0300 	subs.w	r3, r8, #0
 8027d06:	d027      	beq.n	8027d58 <__d2b+0x76>
 8027d08:	a802      	add	r0, sp, #8
 8027d0a:	f840 3d08 	str.w	r3, [r0, #-8]!
 8027d0e:	f7ff fe00 	bl	8027912 <__lo0bits>
 8027d12:	9900      	ldr	r1, [sp, #0]
 8027d14:	b1f0      	cbz	r0, 8027d54 <__d2b+0x72>
 8027d16:	9a01      	ldr	r2, [sp, #4]
 8027d18:	f1c0 0320 	rsb	r3, r0, #32
 8027d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8027d20:	430b      	orrs	r3, r1
 8027d22:	40c2      	lsrs	r2, r0
 8027d24:	617b      	str	r3, [r7, #20]
 8027d26:	9201      	str	r2, [sp, #4]
 8027d28:	9b01      	ldr	r3, [sp, #4]
 8027d2a:	61bb      	str	r3, [r7, #24]
 8027d2c:	2b00      	cmp	r3, #0
 8027d2e:	bf14      	ite	ne
 8027d30:	2102      	movne	r1, #2
 8027d32:	2101      	moveq	r1, #1
 8027d34:	6139      	str	r1, [r7, #16]
 8027d36:	b1c4      	cbz	r4, 8027d6a <__d2b+0x88>
 8027d38:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8027d3c:	4404      	add	r4, r0
 8027d3e:	6034      	str	r4, [r6, #0]
 8027d40:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8027d44:	6028      	str	r0, [r5, #0]
 8027d46:	4638      	mov	r0, r7
 8027d48:	b003      	add	sp, #12
 8027d4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8027d4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8027d52:	e7d5      	b.n	8027d00 <__d2b+0x1e>
 8027d54:	6179      	str	r1, [r7, #20]
 8027d56:	e7e7      	b.n	8027d28 <__d2b+0x46>
 8027d58:	a801      	add	r0, sp, #4
 8027d5a:	f7ff fdda 	bl	8027912 <__lo0bits>
 8027d5e:	9b01      	ldr	r3, [sp, #4]
 8027d60:	617b      	str	r3, [r7, #20]
 8027d62:	2101      	movs	r1, #1
 8027d64:	6139      	str	r1, [r7, #16]
 8027d66:	3020      	adds	r0, #32
 8027d68:	e7e5      	b.n	8027d36 <__d2b+0x54>
 8027d6a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8027d6e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8027d72:	6030      	str	r0, [r6, #0]
 8027d74:	6918      	ldr	r0, [r3, #16]
 8027d76:	f7ff fdad 	bl	80278d4 <__hi0bits>
 8027d7a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8027d7e:	e7e1      	b.n	8027d44 <__d2b+0x62>

08027d80 <_calloc_r>:
 8027d80:	b538      	push	{r3, r4, r5, lr}
 8027d82:	fb02 f401 	mul.w	r4, r2, r1
 8027d86:	4621      	mov	r1, r4
 8027d88:	f7fe fa5e 	bl	8026248 <_malloc_r>
 8027d8c:	4605      	mov	r5, r0
 8027d8e:	b118      	cbz	r0, 8027d98 <_calloc_r+0x18>
 8027d90:	4622      	mov	r2, r4
 8027d92:	2100      	movs	r1, #0
 8027d94:	f7fe fa01 	bl	802619a <memset>
 8027d98:	4628      	mov	r0, r5
 8027d9a:	bd38      	pop	{r3, r4, r5, pc}

08027d9c <_realloc_r>:
 8027d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027d9e:	4607      	mov	r7, r0
 8027da0:	4614      	mov	r4, r2
 8027da2:	460e      	mov	r6, r1
 8027da4:	b921      	cbnz	r1, 8027db0 <_realloc_r+0x14>
 8027da6:	4611      	mov	r1, r2
 8027da8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8027dac:	f7fe ba4c 	b.w	8026248 <_malloc_r>
 8027db0:	b922      	cbnz	r2, 8027dbc <_realloc_r+0x20>
 8027db2:	f7fe f9fb 	bl	80261ac <_free_r>
 8027db6:	4625      	mov	r5, r4
 8027db8:	4628      	mov	r0, r5
 8027dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027dbc:	f000 f991 	bl	80280e2 <_malloc_usable_size_r>
 8027dc0:	42a0      	cmp	r0, r4
 8027dc2:	d20f      	bcs.n	8027de4 <_realloc_r+0x48>
 8027dc4:	4621      	mov	r1, r4
 8027dc6:	4638      	mov	r0, r7
 8027dc8:	f7fe fa3e 	bl	8026248 <_malloc_r>
 8027dcc:	4605      	mov	r5, r0
 8027dce:	2800      	cmp	r0, #0
 8027dd0:	d0f2      	beq.n	8027db8 <_realloc_r+0x1c>
 8027dd2:	4631      	mov	r1, r6
 8027dd4:	4622      	mov	r2, r4
 8027dd6:	f7fe f9d5 	bl	8026184 <memcpy>
 8027dda:	4631      	mov	r1, r6
 8027ddc:	4638      	mov	r0, r7
 8027dde:	f7fe f9e5 	bl	80261ac <_free_r>
 8027de2:	e7e9      	b.n	8027db8 <_realloc_r+0x1c>
 8027de4:	4635      	mov	r5, r6
 8027de6:	e7e7      	b.n	8027db8 <_realloc_r+0x1c>

08027de8 <__ssputs_r>:
 8027de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027dec:	688e      	ldr	r6, [r1, #8]
 8027dee:	429e      	cmp	r6, r3
 8027df0:	4682      	mov	sl, r0
 8027df2:	460c      	mov	r4, r1
 8027df4:	4690      	mov	r8, r2
 8027df6:	4699      	mov	r9, r3
 8027df8:	d837      	bhi.n	8027e6a <__ssputs_r+0x82>
 8027dfa:	898a      	ldrh	r2, [r1, #12]
 8027dfc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8027e00:	d031      	beq.n	8027e66 <__ssputs_r+0x7e>
 8027e02:	6825      	ldr	r5, [r4, #0]
 8027e04:	6909      	ldr	r1, [r1, #16]
 8027e06:	1a6f      	subs	r7, r5, r1
 8027e08:	6965      	ldr	r5, [r4, #20]
 8027e0a:	2302      	movs	r3, #2
 8027e0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8027e10:	fb95 f5f3 	sdiv	r5, r5, r3
 8027e14:	f109 0301 	add.w	r3, r9, #1
 8027e18:	443b      	add	r3, r7
 8027e1a:	429d      	cmp	r5, r3
 8027e1c:	bf38      	it	cc
 8027e1e:	461d      	movcc	r5, r3
 8027e20:	0553      	lsls	r3, r2, #21
 8027e22:	d530      	bpl.n	8027e86 <__ssputs_r+0x9e>
 8027e24:	4629      	mov	r1, r5
 8027e26:	f7fe fa0f 	bl	8026248 <_malloc_r>
 8027e2a:	4606      	mov	r6, r0
 8027e2c:	b950      	cbnz	r0, 8027e44 <__ssputs_r+0x5c>
 8027e2e:	230c      	movs	r3, #12
 8027e30:	f8ca 3000 	str.w	r3, [sl]
 8027e34:	89a3      	ldrh	r3, [r4, #12]
 8027e36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027e3a:	81a3      	strh	r3, [r4, #12]
 8027e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8027e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027e44:	463a      	mov	r2, r7
 8027e46:	6921      	ldr	r1, [r4, #16]
 8027e48:	f7fe f99c 	bl	8026184 <memcpy>
 8027e4c:	89a3      	ldrh	r3, [r4, #12]
 8027e4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8027e52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8027e56:	81a3      	strh	r3, [r4, #12]
 8027e58:	6126      	str	r6, [r4, #16]
 8027e5a:	6165      	str	r5, [r4, #20]
 8027e5c:	443e      	add	r6, r7
 8027e5e:	1bed      	subs	r5, r5, r7
 8027e60:	6026      	str	r6, [r4, #0]
 8027e62:	60a5      	str	r5, [r4, #8]
 8027e64:	464e      	mov	r6, r9
 8027e66:	454e      	cmp	r6, r9
 8027e68:	d900      	bls.n	8027e6c <__ssputs_r+0x84>
 8027e6a:	464e      	mov	r6, r9
 8027e6c:	4632      	mov	r2, r6
 8027e6e:	4641      	mov	r1, r8
 8027e70:	6820      	ldr	r0, [r4, #0]
 8027e72:	f000 f91d 	bl	80280b0 <memmove>
 8027e76:	68a3      	ldr	r3, [r4, #8]
 8027e78:	1b9b      	subs	r3, r3, r6
 8027e7a:	60a3      	str	r3, [r4, #8]
 8027e7c:	6823      	ldr	r3, [r4, #0]
 8027e7e:	441e      	add	r6, r3
 8027e80:	6026      	str	r6, [r4, #0]
 8027e82:	2000      	movs	r0, #0
 8027e84:	e7dc      	b.n	8027e40 <__ssputs_r+0x58>
 8027e86:	462a      	mov	r2, r5
 8027e88:	f7ff ff88 	bl	8027d9c <_realloc_r>
 8027e8c:	4606      	mov	r6, r0
 8027e8e:	2800      	cmp	r0, #0
 8027e90:	d1e2      	bne.n	8027e58 <__ssputs_r+0x70>
 8027e92:	6921      	ldr	r1, [r4, #16]
 8027e94:	4650      	mov	r0, sl
 8027e96:	f7fe f989 	bl	80261ac <_free_r>
 8027e9a:	e7c8      	b.n	8027e2e <__ssputs_r+0x46>

08027e9c <_svfiprintf_r>:
 8027e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027ea0:	461d      	mov	r5, r3
 8027ea2:	898b      	ldrh	r3, [r1, #12]
 8027ea4:	061f      	lsls	r7, r3, #24
 8027ea6:	b09d      	sub	sp, #116	; 0x74
 8027ea8:	4680      	mov	r8, r0
 8027eaa:	460c      	mov	r4, r1
 8027eac:	4616      	mov	r6, r2
 8027eae:	d50f      	bpl.n	8027ed0 <_svfiprintf_r+0x34>
 8027eb0:	690b      	ldr	r3, [r1, #16]
 8027eb2:	b96b      	cbnz	r3, 8027ed0 <_svfiprintf_r+0x34>
 8027eb4:	2140      	movs	r1, #64	; 0x40
 8027eb6:	f7fe f9c7 	bl	8026248 <_malloc_r>
 8027eba:	6020      	str	r0, [r4, #0]
 8027ebc:	6120      	str	r0, [r4, #16]
 8027ebe:	b928      	cbnz	r0, 8027ecc <_svfiprintf_r+0x30>
 8027ec0:	230c      	movs	r3, #12
 8027ec2:	f8c8 3000 	str.w	r3, [r8]
 8027ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8027eca:	e0c8      	b.n	802805e <_svfiprintf_r+0x1c2>
 8027ecc:	2340      	movs	r3, #64	; 0x40
 8027ece:	6163      	str	r3, [r4, #20]
 8027ed0:	2300      	movs	r3, #0
 8027ed2:	9309      	str	r3, [sp, #36]	; 0x24
 8027ed4:	2320      	movs	r3, #32
 8027ed6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8027eda:	2330      	movs	r3, #48	; 0x30
 8027edc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8027ee0:	9503      	str	r5, [sp, #12]
 8027ee2:	f04f 0b01 	mov.w	fp, #1
 8027ee6:	4637      	mov	r7, r6
 8027ee8:	463d      	mov	r5, r7
 8027eea:	f815 3b01 	ldrb.w	r3, [r5], #1
 8027eee:	b10b      	cbz	r3, 8027ef4 <_svfiprintf_r+0x58>
 8027ef0:	2b25      	cmp	r3, #37	; 0x25
 8027ef2:	d13e      	bne.n	8027f72 <_svfiprintf_r+0xd6>
 8027ef4:	ebb7 0a06 	subs.w	sl, r7, r6
 8027ef8:	d00b      	beq.n	8027f12 <_svfiprintf_r+0x76>
 8027efa:	4653      	mov	r3, sl
 8027efc:	4632      	mov	r2, r6
 8027efe:	4621      	mov	r1, r4
 8027f00:	4640      	mov	r0, r8
 8027f02:	f7ff ff71 	bl	8027de8 <__ssputs_r>
 8027f06:	3001      	adds	r0, #1
 8027f08:	f000 80a4 	beq.w	8028054 <_svfiprintf_r+0x1b8>
 8027f0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027f0e:	4453      	add	r3, sl
 8027f10:	9309      	str	r3, [sp, #36]	; 0x24
 8027f12:	783b      	ldrb	r3, [r7, #0]
 8027f14:	2b00      	cmp	r3, #0
 8027f16:	f000 809d 	beq.w	8028054 <_svfiprintf_r+0x1b8>
 8027f1a:	2300      	movs	r3, #0
 8027f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8027f20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8027f24:	9304      	str	r3, [sp, #16]
 8027f26:	9307      	str	r3, [sp, #28]
 8027f28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8027f2c:	931a      	str	r3, [sp, #104]	; 0x68
 8027f2e:	462f      	mov	r7, r5
 8027f30:	2205      	movs	r2, #5
 8027f32:	f817 1b01 	ldrb.w	r1, [r7], #1
 8027f36:	4850      	ldr	r0, [pc, #320]	; (8028078 <_svfiprintf_r+0x1dc>)
 8027f38:	f7d8 f9ea 	bl	8000310 <memchr>
 8027f3c:	9b04      	ldr	r3, [sp, #16]
 8027f3e:	b9d0      	cbnz	r0, 8027f76 <_svfiprintf_r+0xda>
 8027f40:	06d9      	lsls	r1, r3, #27
 8027f42:	bf44      	itt	mi
 8027f44:	2220      	movmi	r2, #32
 8027f46:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8027f4a:	071a      	lsls	r2, r3, #28
 8027f4c:	bf44      	itt	mi
 8027f4e:	222b      	movmi	r2, #43	; 0x2b
 8027f50:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8027f54:	782a      	ldrb	r2, [r5, #0]
 8027f56:	2a2a      	cmp	r2, #42	; 0x2a
 8027f58:	d015      	beq.n	8027f86 <_svfiprintf_r+0xea>
 8027f5a:	9a07      	ldr	r2, [sp, #28]
 8027f5c:	462f      	mov	r7, r5
 8027f5e:	2000      	movs	r0, #0
 8027f60:	250a      	movs	r5, #10
 8027f62:	4639      	mov	r1, r7
 8027f64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8027f68:	3b30      	subs	r3, #48	; 0x30
 8027f6a:	2b09      	cmp	r3, #9
 8027f6c:	d94d      	bls.n	802800a <_svfiprintf_r+0x16e>
 8027f6e:	b1b8      	cbz	r0, 8027fa0 <_svfiprintf_r+0x104>
 8027f70:	e00f      	b.n	8027f92 <_svfiprintf_r+0xf6>
 8027f72:	462f      	mov	r7, r5
 8027f74:	e7b8      	b.n	8027ee8 <_svfiprintf_r+0x4c>
 8027f76:	4a40      	ldr	r2, [pc, #256]	; (8028078 <_svfiprintf_r+0x1dc>)
 8027f78:	1a80      	subs	r0, r0, r2
 8027f7a:	fa0b f000 	lsl.w	r0, fp, r0
 8027f7e:	4318      	orrs	r0, r3
 8027f80:	9004      	str	r0, [sp, #16]
 8027f82:	463d      	mov	r5, r7
 8027f84:	e7d3      	b.n	8027f2e <_svfiprintf_r+0x92>
 8027f86:	9a03      	ldr	r2, [sp, #12]
 8027f88:	1d11      	adds	r1, r2, #4
 8027f8a:	6812      	ldr	r2, [r2, #0]
 8027f8c:	9103      	str	r1, [sp, #12]
 8027f8e:	2a00      	cmp	r2, #0
 8027f90:	db01      	blt.n	8027f96 <_svfiprintf_r+0xfa>
 8027f92:	9207      	str	r2, [sp, #28]
 8027f94:	e004      	b.n	8027fa0 <_svfiprintf_r+0x104>
 8027f96:	4252      	negs	r2, r2
 8027f98:	f043 0302 	orr.w	r3, r3, #2
 8027f9c:	9207      	str	r2, [sp, #28]
 8027f9e:	9304      	str	r3, [sp, #16]
 8027fa0:	783b      	ldrb	r3, [r7, #0]
 8027fa2:	2b2e      	cmp	r3, #46	; 0x2e
 8027fa4:	d10c      	bne.n	8027fc0 <_svfiprintf_r+0x124>
 8027fa6:	787b      	ldrb	r3, [r7, #1]
 8027fa8:	2b2a      	cmp	r3, #42	; 0x2a
 8027faa:	d133      	bne.n	8028014 <_svfiprintf_r+0x178>
 8027fac:	9b03      	ldr	r3, [sp, #12]
 8027fae:	1d1a      	adds	r2, r3, #4
 8027fb0:	681b      	ldr	r3, [r3, #0]
 8027fb2:	9203      	str	r2, [sp, #12]
 8027fb4:	2b00      	cmp	r3, #0
 8027fb6:	bfb8      	it	lt
 8027fb8:	f04f 33ff 	movlt.w	r3, #4294967295
 8027fbc:	3702      	adds	r7, #2
 8027fbe:	9305      	str	r3, [sp, #20]
 8027fc0:	4d2e      	ldr	r5, [pc, #184]	; (802807c <_svfiprintf_r+0x1e0>)
 8027fc2:	7839      	ldrb	r1, [r7, #0]
 8027fc4:	2203      	movs	r2, #3
 8027fc6:	4628      	mov	r0, r5
 8027fc8:	f7d8 f9a2 	bl	8000310 <memchr>
 8027fcc:	b138      	cbz	r0, 8027fde <_svfiprintf_r+0x142>
 8027fce:	2340      	movs	r3, #64	; 0x40
 8027fd0:	1b40      	subs	r0, r0, r5
 8027fd2:	fa03 f000 	lsl.w	r0, r3, r0
 8027fd6:	9b04      	ldr	r3, [sp, #16]
 8027fd8:	4303      	orrs	r3, r0
 8027fda:	3701      	adds	r7, #1
 8027fdc:	9304      	str	r3, [sp, #16]
 8027fde:	7839      	ldrb	r1, [r7, #0]
 8027fe0:	4827      	ldr	r0, [pc, #156]	; (8028080 <_svfiprintf_r+0x1e4>)
 8027fe2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8027fe6:	2206      	movs	r2, #6
 8027fe8:	1c7e      	adds	r6, r7, #1
 8027fea:	f7d8 f991 	bl	8000310 <memchr>
 8027fee:	2800      	cmp	r0, #0
 8027ff0:	d038      	beq.n	8028064 <_svfiprintf_r+0x1c8>
 8027ff2:	4b24      	ldr	r3, [pc, #144]	; (8028084 <_svfiprintf_r+0x1e8>)
 8027ff4:	bb13      	cbnz	r3, 802803c <_svfiprintf_r+0x1a0>
 8027ff6:	9b03      	ldr	r3, [sp, #12]
 8027ff8:	3307      	adds	r3, #7
 8027ffa:	f023 0307 	bic.w	r3, r3, #7
 8027ffe:	3308      	adds	r3, #8
 8028000:	9303      	str	r3, [sp, #12]
 8028002:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028004:	444b      	add	r3, r9
 8028006:	9309      	str	r3, [sp, #36]	; 0x24
 8028008:	e76d      	b.n	8027ee6 <_svfiprintf_r+0x4a>
 802800a:	fb05 3202 	mla	r2, r5, r2, r3
 802800e:	2001      	movs	r0, #1
 8028010:	460f      	mov	r7, r1
 8028012:	e7a6      	b.n	8027f62 <_svfiprintf_r+0xc6>
 8028014:	2300      	movs	r3, #0
 8028016:	3701      	adds	r7, #1
 8028018:	9305      	str	r3, [sp, #20]
 802801a:	4619      	mov	r1, r3
 802801c:	250a      	movs	r5, #10
 802801e:	4638      	mov	r0, r7
 8028020:	f810 2b01 	ldrb.w	r2, [r0], #1
 8028024:	3a30      	subs	r2, #48	; 0x30
 8028026:	2a09      	cmp	r2, #9
 8028028:	d903      	bls.n	8028032 <_svfiprintf_r+0x196>
 802802a:	2b00      	cmp	r3, #0
 802802c:	d0c8      	beq.n	8027fc0 <_svfiprintf_r+0x124>
 802802e:	9105      	str	r1, [sp, #20]
 8028030:	e7c6      	b.n	8027fc0 <_svfiprintf_r+0x124>
 8028032:	fb05 2101 	mla	r1, r5, r1, r2
 8028036:	2301      	movs	r3, #1
 8028038:	4607      	mov	r7, r0
 802803a:	e7f0      	b.n	802801e <_svfiprintf_r+0x182>
 802803c:	ab03      	add	r3, sp, #12
 802803e:	9300      	str	r3, [sp, #0]
 8028040:	4622      	mov	r2, r4
 8028042:	4b11      	ldr	r3, [pc, #68]	; (8028088 <_svfiprintf_r+0x1ec>)
 8028044:	a904      	add	r1, sp, #16
 8028046:	4640      	mov	r0, r8
 8028048:	f7fe f9de 	bl	8026408 <_printf_float>
 802804c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8028050:	4681      	mov	r9, r0
 8028052:	d1d6      	bne.n	8028002 <_svfiprintf_r+0x166>
 8028054:	89a3      	ldrh	r3, [r4, #12]
 8028056:	065b      	lsls	r3, r3, #25
 8028058:	f53f af35 	bmi.w	8027ec6 <_svfiprintf_r+0x2a>
 802805c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802805e:	b01d      	add	sp, #116	; 0x74
 8028060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028064:	ab03      	add	r3, sp, #12
 8028066:	9300      	str	r3, [sp, #0]
 8028068:	4622      	mov	r2, r4
 802806a:	4b07      	ldr	r3, [pc, #28]	; (8028088 <_svfiprintf_r+0x1ec>)
 802806c:	a904      	add	r1, sp, #16
 802806e:	4640      	mov	r0, r8
 8028070:	f7fe fc6c 	bl	802694c <_printf_i>
 8028074:	e7ea      	b.n	802804c <_svfiprintf_r+0x1b0>
 8028076:	bf00      	nop
 8028078:	080c2fe4 	.word	0x080c2fe4
 802807c:	080c2fea 	.word	0x080c2fea
 8028080:	080c2fee 	.word	0x080c2fee
 8028084:	08026409 	.word	0x08026409
 8028088:	08027de9 	.word	0x08027de9

0802808c <__ascii_mbtowc>:
 802808c:	b082      	sub	sp, #8
 802808e:	b901      	cbnz	r1, 8028092 <__ascii_mbtowc+0x6>
 8028090:	a901      	add	r1, sp, #4
 8028092:	b142      	cbz	r2, 80280a6 <__ascii_mbtowc+0x1a>
 8028094:	b14b      	cbz	r3, 80280aa <__ascii_mbtowc+0x1e>
 8028096:	7813      	ldrb	r3, [r2, #0]
 8028098:	600b      	str	r3, [r1, #0]
 802809a:	7812      	ldrb	r2, [r2, #0]
 802809c:	1c10      	adds	r0, r2, #0
 802809e:	bf18      	it	ne
 80280a0:	2001      	movne	r0, #1
 80280a2:	b002      	add	sp, #8
 80280a4:	4770      	bx	lr
 80280a6:	4610      	mov	r0, r2
 80280a8:	e7fb      	b.n	80280a2 <__ascii_mbtowc+0x16>
 80280aa:	f06f 0001 	mvn.w	r0, #1
 80280ae:	e7f8      	b.n	80280a2 <__ascii_mbtowc+0x16>

080280b0 <memmove>:
 80280b0:	4288      	cmp	r0, r1
 80280b2:	b510      	push	{r4, lr}
 80280b4:	eb01 0302 	add.w	r3, r1, r2
 80280b8:	d807      	bhi.n	80280ca <memmove+0x1a>
 80280ba:	1e42      	subs	r2, r0, #1
 80280bc:	4299      	cmp	r1, r3
 80280be:	d00a      	beq.n	80280d6 <memmove+0x26>
 80280c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80280c4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80280c8:	e7f8      	b.n	80280bc <memmove+0xc>
 80280ca:	4283      	cmp	r3, r0
 80280cc:	d9f5      	bls.n	80280ba <memmove+0xa>
 80280ce:	1881      	adds	r1, r0, r2
 80280d0:	1ad2      	subs	r2, r2, r3
 80280d2:	42d3      	cmn	r3, r2
 80280d4:	d100      	bne.n	80280d8 <memmove+0x28>
 80280d6:	bd10      	pop	{r4, pc}
 80280d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80280dc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80280e0:	e7f7      	b.n	80280d2 <memmove+0x22>

080280e2 <_malloc_usable_size_r>:
 80280e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80280e6:	1f18      	subs	r0, r3, #4
 80280e8:	2b00      	cmp	r3, #0
 80280ea:	bfbc      	itt	lt
 80280ec:	580b      	ldrlt	r3, [r1, r0]
 80280ee:	18c0      	addlt	r0, r0, r3
 80280f0:	4770      	bx	lr

080280f2 <__ascii_wctomb>:
 80280f2:	b149      	cbz	r1, 8028108 <__ascii_wctomb+0x16>
 80280f4:	2aff      	cmp	r2, #255	; 0xff
 80280f6:	bf85      	ittet	hi
 80280f8:	238a      	movhi	r3, #138	; 0x8a
 80280fa:	6003      	strhi	r3, [r0, #0]
 80280fc:	700a      	strbls	r2, [r1, #0]
 80280fe:	f04f 30ff 	movhi.w	r0, #4294967295
 8028102:	bf98      	it	ls
 8028104:	2001      	movls	r0, #1
 8028106:	4770      	bx	lr
 8028108:	4608      	mov	r0, r1
 802810a:	4770      	bx	lr

0802810c <expf>:
 802810c:	ee10 2a10 	vmov	r2, s0
 8028110:	f240 412a 	movw	r1, #1066	; 0x42a
 8028114:	f3c2 530a 	ubfx	r3, r2, #20, #11
 8028118:	428b      	cmp	r3, r1
 802811a:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
 802811e:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8028122:	d92e      	bls.n	8028182 <expf+0x76>
 8028124:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 8028128:	d061      	beq.n	80281ee <expf+0xe2>
 802812a:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 802812e:	d304      	bcc.n	802813a <expf+0x2e>
 8028130:	ee30 0a00 	vadd.f32	s0, s0, s0
 8028134:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 8028138:	4770      	bx	lr
 802813a:	eddf 7a2e 	vldr	s15, [pc, #184]	; 80281f4 <expf+0xe8>
 802813e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8028142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028146:	dd04      	ble.n	8028152 <expf+0x46>
 8028148:	2000      	movs	r0, #0
 802814a:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 802814e:	f000 bb5f 	b.w	8028810 <__math_oflowf>
 8028152:	eddf 7a29 	vldr	s15, [pc, #164]	; 80281f8 <expf+0xec>
 8028156:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802815a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802815e:	d504      	bpl.n	802816a <expf+0x5e>
 8028160:	2000      	movs	r0, #0
 8028162:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 8028166:	f000 bb47 	b.w	80287f8 <__math_uflowf>
 802816a:	eddf 7a24 	vldr	s15, [pc, #144]	; 80281fc <expf+0xf0>
 802816e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8028172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028176:	d504      	bpl.n	8028182 <expf+0x76>
 8028178:	2000      	movs	r0, #0
 802817a:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 802817e:	f000 bb41 	b.w	8028804 <__math_may_uflowf>
 8028182:	491f      	ldr	r1, [pc, #124]	; (8028200 <expf+0xf4>)
 8028184:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8028188:	ed91 5b4a 	vldr	d5, [r1, #296]	; 0x128
 802818c:	ed91 7b48 	vldr	d7, [r1, #288]	; 0x120
 8028190:	eeb0 4b47 	vmov.f64	d4, d7
 8028194:	eea5 4b06 	vfma.f64	d4, d5, d6
 8028198:	ec55 4b14 	vmov	r4, r5, d4
 802819c:	ee34 7b47 	vsub.f64	d7, d4, d7
 80281a0:	f004 021f 	and.w	r2, r4, #31
 80281a4:	ee95 7b06 	vfnms.f64	d7, d5, d6
 80281a8:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80281ac:	ed91 6b50 	vldr	d6, [r1, #320]	; 0x140
 80281b0:	e9d2 4500 	ldrd	r4, r5, [r2]
 80281b4:	eea6 0b07 	vfma.f64	d0, d6, d7
 80281b8:	ee14 0a10 	vmov	r0, s8
 80281bc:	ed91 5b4c 	vldr	d5, [r1, #304]	; 0x130
 80281c0:	ed91 6b4e 	vldr	d6, [r1, #312]	; 0x138
 80281c4:	f04f 0b00 	mov.w	fp, #0
 80281c8:	eb1b 0204 	adds.w	r2, fp, r4
 80281cc:	ea4f 3cc0 	mov.w	ip, r0, lsl #15
 80281d0:	eb4c 0305 	adc.w	r3, ip, r5
 80281d4:	eea5 6b07 	vfma.f64	d6, d5, d7
 80281d8:	ee27 7b07 	vmul.f64	d7, d7, d7
 80281dc:	eea6 0b07 	vfma.f64	d0, d6, d7
 80281e0:	ec43 2b17 	vmov	d7, r2, r3
 80281e4:	ee20 0b07 	vmul.f64	d0, d0, d7
 80281e8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80281ec:	e7a2      	b.n	8028134 <expf+0x28>
 80281ee:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8028204 <expf+0xf8>
 80281f2:	e79f      	b.n	8028134 <expf+0x28>
 80281f4:	42b17217 	.word	0x42b17217
 80281f8:	c2cff1b4 	.word	0xc2cff1b4
 80281fc:	c2ce8ecf 	.word	0xc2ce8ecf
 8028200:	080c3100 	.word	0x080c3100
 8028204:	00000000 	.word	0x00000000

08028208 <checkint>:
 8028208:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 802820c:	2b7e      	cmp	r3, #126	; 0x7e
 802820e:	dd10      	ble.n	8028232 <checkint+0x2a>
 8028210:	2b96      	cmp	r3, #150	; 0x96
 8028212:	dc0c      	bgt.n	802822e <checkint+0x26>
 8028214:	2201      	movs	r2, #1
 8028216:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 802821a:	fa02 f303 	lsl.w	r3, r2, r3
 802821e:	1e5a      	subs	r2, r3, #1
 8028220:	4202      	tst	r2, r0
 8028222:	d106      	bne.n	8028232 <checkint+0x2a>
 8028224:	4203      	tst	r3, r0
 8028226:	bf0c      	ite	eq
 8028228:	2002      	moveq	r0, #2
 802822a:	2001      	movne	r0, #1
 802822c:	4770      	bx	lr
 802822e:	2002      	movs	r0, #2
 8028230:	4770      	bx	lr
 8028232:	2000      	movs	r0, #0
 8028234:	4770      	bx	lr
	...

08028238 <powf>:
 8028238:	ee10 1a10 	vmov	r1, s0
 802823c:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8028240:	ee10 4a90 	vmov	r4, s1
 8028244:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 8028248:	0062      	lsls	r2, r4, #1
 802824a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 802824e:	eef0 4a60 	vmov.f32	s9, s1
 8028252:	f102 30ff 	add.w	r0, r2, #4294967295
 8028256:	4b92      	ldr	r3, [pc, #584]	; (80284a0 <powf+0x268>)
 8028258:	d255      	bcs.n	8028306 <powf+0xce>
 802825a:	4298      	cmp	r0, r3
 802825c:	d855      	bhi.n	802830a <powf+0xd2>
 802825e:	2000      	movs	r0, #0
 8028260:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 8028264:	4a8f      	ldr	r2, [pc, #572]	; (80284a4 <powf+0x26c>)
 8028266:	eebf 2b00 	vmov.f64	d2, #240	; 0xbf800000 -1.0
 802826a:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 802826e:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 8028272:	0ddb      	lsrs	r3, r3, #23
 8028274:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 8028278:	05db      	lsls	r3, r3, #23
 802827a:	ed94 6b00 	vldr	d6, [r4]
 802827e:	1ac9      	subs	r1, r1, r3
 8028280:	ee07 1a90 	vmov	s15, r1
 8028284:	ed92 5b40 	vldr	d5, [r2, #256]	; 0x100
 8028288:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 802828c:	eea6 2b07 	vfma.f64	d2, d6, d7
 8028290:	ed92 7b42 	vldr	d7, [r2, #264]	; 0x108
 8028294:	ee22 6b02 	vmul.f64	d6, d2, d2
 8028298:	eea2 7b05 	vfma.f64	d7, d2, d5
 802829c:	15db      	asrs	r3, r3, #23
 802829e:	ed94 5b02 	vldr	d5, [r4, #8]
 80282a2:	ee00 3a10 	vmov	s0, r3
 80282a6:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 80282aa:	ee30 0b05 	vadd.f64	d0, d0, d5
 80282ae:	ed92 5b48 	vldr	d5, [r2, #288]	; 0x120
 80282b2:	ed92 3b44 	vldr	d3, [r2, #272]	; 0x110
 80282b6:	eea2 0b05 	vfma.f64	d0, d2, d5
 80282ba:	ed92 5b46 	vldr	d5, [r2, #280]	; 0x118
 80282be:	eea2 5b03 	vfma.f64	d5, d2, d3
 80282c2:	eea6 0b05 	vfma.f64	d0, d6, d5
 80282c6:	ee26 6b06 	vmul.f64	d6, d6, d6
 80282ca:	eea7 0b06 	vfma.f64	d0, d7, d6
 80282ce:	eeb7 7ae4 	vcvt.f64.f32	d7, s9
 80282d2:	ee20 0b07 	vmul.f64	d0, d0, d7
 80282d6:	ee10 3a90 	vmov	r3, s1
 80282da:	2500      	movs	r5, #0
 80282dc:	0bda      	lsrs	r2, r3, #15
 80282de:	2300      	movs	r3, #0
 80282e0:	b292      	uxth	r2, r2
 80282e2:	f248 04be 	movw	r4, #32958	; 0x80be
 80282e6:	429d      	cmp	r5, r3
 80282e8:	bf08      	it	eq
 80282ea:	4294      	cmpeq	r4, r2
 80282ec:	f080 8094 	bcs.w	8028418 <powf+0x1e0>
 80282f0:	ed9f 7b65 	vldr	d7, [pc, #404]	; 8028488 <powf+0x250>
 80282f4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80282f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80282fc:	dd76      	ble.n	80283ec <powf+0x1b4>
 80282fe:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8028302:	f000 ba85 	b.w	8028810 <__math_oflowf>
 8028306:	4298      	cmp	r0, r3
 8028308:	d92d      	bls.n	8028366 <powf+0x12e>
 802830a:	b952      	cbnz	r2, 8028322 <powf+0xea>
 802830c:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 8028310:	005b      	lsls	r3, r3, #1
 8028312:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 8028316:	f240 80ae 	bls.w	8028476 <powf+0x23e>
 802831a:	ee30 0a24 	vadd.f32	s0, s0, s9
 802831e:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8028322:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8028326:	d105      	bne.n	8028334 <powf+0xfc>
 8028328:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 802832c:	0064      	lsls	r4, r4, #1
 802832e:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8028332:	e7f0      	b.n	8028316 <powf+0xde>
 8028334:	004b      	lsls	r3, r1, #1
 8028336:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 802833a:	d8ee      	bhi.n	802831a <powf+0xe2>
 802833c:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8028340:	d1eb      	bne.n	802831a <powf+0xe2>
 8028342:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8028346:	f000 8096 	beq.w	8028476 <powf+0x23e>
 802834a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 802834e:	ea6f 0404 	mvn.w	r4, r4
 8028352:	bf34      	ite	cc
 8028354:	2300      	movcc	r3, #0
 8028356:	2301      	movcs	r3, #1
 8028358:	0fe4      	lsrs	r4, r4, #31
 802835a:	42a3      	cmp	r3, r4
 802835c:	f040 808e 	bne.w	802847c <powf+0x244>
 8028360:	ee24 0aa4 	vmul.f32	s0, s9, s9
 8028364:	e7db      	b.n	802831e <powf+0xe6>
 8028366:	004d      	lsls	r5, r1, #1
 8028368:	1e6a      	subs	r2, r5, #1
 802836a:	429a      	cmp	r2, r3
 802836c:	d91b      	bls.n	80283a6 <powf+0x16e>
 802836e:	2900      	cmp	r1, #0
 8028370:	ee20 0a00 	vmul.f32	s0, s0, s0
 8028374:	da0e      	bge.n	8028394 <powf+0x15c>
 8028376:	ee10 0a90 	vmov	r0, s1
 802837a:	f7ff ff45 	bl	8028208 <checkint>
 802837e:	2801      	cmp	r0, #1
 8028380:	d108      	bne.n	8028394 <powf+0x15c>
 8028382:	eeb1 0a40 	vneg.f32	s0, s0
 8028386:	b93d      	cbnz	r5, 8028398 <powf+0x160>
 8028388:	2c00      	cmp	r4, #0
 802838a:	dac8      	bge.n	802831e <powf+0xe6>
 802838c:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8028390:	f000 ba44 	b.w	802881c <__math_divzerof>
 8028394:	2000      	movs	r0, #0
 8028396:	e7f6      	b.n	8028386 <powf+0x14e>
 8028398:	2c00      	cmp	r4, #0
 802839a:	dac0      	bge.n	802831e <powf+0xe6>
 802839c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80283a0:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80283a4:	e7bb      	b.n	802831e <powf+0xe6>
 80283a6:	2900      	cmp	r1, #0
 80283a8:	da1e      	bge.n	80283e8 <powf+0x1b0>
 80283aa:	ee10 0a90 	vmov	r0, s1
 80283ae:	f7ff ff2b 	bl	8028208 <checkint>
 80283b2:	b918      	cbnz	r0, 80283bc <powf+0x184>
 80283b4:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 80283b8:	f000 ba40 	b.w	802883c <__math_invalidf>
 80283bc:	2801      	cmp	r0, #1
 80283be:	bf0c      	ite	eq
 80283c0:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80283c4:	2000      	movne	r0, #0
 80283c6:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80283ca:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80283ce:	f4bf af47 	bcs.w	8028260 <powf+0x28>
 80283d2:	eddf 0a35 	vldr	s1, [pc, #212]	; 80284a8 <powf+0x270>
 80283d6:	ee20 0a20 	vmul.f32	s0, s0, s1
 80283da:	ee10 3a10 	vmov	r3, s0
 80283de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80283e2:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 80283e6:	e73b      	b.n	8028260 <powf+0x28>
 80283e8:	2000      	movs	r0, #0
 80283ea:	e7ee      	b.n	80283ca <powf+0x192>
 80283ec:	ed9f 7b28 	vldr	d7, [pc, #160]	; 8028490 <powf+0x258>
 80283f0:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80283f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80283f8:	d803      	bhi.n	8028402 <powf+0x1ca>
 80283fa:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 80283fe:	f000 b9fb 	b.w	80287f8 <__math_uflowf>
 8028402:	ed9f 7b25 	vldr	d7, [pc, #148]	; 8028498 <powf+0x260>
 8028406:	eeb4 0bc7 	vcmpe.f64	d0, d7
 802840a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802840e:	d503      	bpl.n	8028418 <powf+0x1e0>
 8028410:	e8bd 48f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, lr}
 8028414:	f000 b9f6 	b.w	8028804 <__math_may_uflowf>
 8028418:	4924      	ldr	r1, [pc, #144]	; (80284ac <powf+0x274>)
 802841a:	ed91 7b40 	vldr	d7, [r1, #256]	; 0x100
 802841e:	ee30 6b07 	vadd.f64	d6, d0, d7
 8028422:	ec55 4b16 	vmov	r4, r5, d6
 8028426:	ee36 7b47 	vsub.f64	d7, d6, d7
 802842a:	f004 021f 	and.w	r2, r4, #31
 802842e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8028432:	ed91 6b46 	vldr	d6, [r1, #280]	; 0x118
 8028436:	ee30 0b47 	vsub.f64	d0, d0, d7
 802843a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 802843e:	e9d2 6700 	ldrd	r6, r7, [r2]
 8028442:	eea0 7b06 	vfma.f64	d7, d0, d6
 8028446:	1824      	adds	r4, r4, r0
 8028448:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 802844c:	ed91 6b44 	vldr	d6, [r1, #272]	; 0x110
 8028450:	2000      	movs	r0, #0
 8028452:	1982      	adds	r2, r0, r6
 8028454:	ea4f 31c4 	mov.w	r1, r4, lsl #15
 8028458:	eb41 0307 	adc.w	r3, r1, r7
 802845c:	eea0 6b05 	vfma.f64	d6, d0, d5
 8028460:	ee20 0b00 	vmul.f64	d0, d0, d0
 8028464:	eea6 7b00 	vfma.f64	d7, d6, d0
 8028468:	ec43 2b16 	vmov	d6, r2, r3
 802846c:	ee27 0b06 	vmul.f64	d0, d7, d6
 8028470:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8028474:	e753      	b.n	802831e <powf+0xe6>
 8028476:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 802847a:	e750      	b.n	802831e <powf+0xe6>
 802847c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80284b0 <powf+0x278>
 8028480:	e74d      	b.n	802831e <powf+0xe6>
 8028482:	bf00      	nop
 8028484:	f3af 8000 	nop.w
 8028488:	ffd1d571 	.word	0xffd1d571
 802848c:	405fffff 	.word	0x405fffff
 8028490:	00000000 	.word	0x00000000
 8028494:	c062c000 	.word	0xc062c000
 8028498:	00000000 	.word	0x00000000
 802849c:	c062a000 	.word	0xc062a000
 80284a0:	fefffffe 	.word	0xfefffffe
 80284a4:	080c3248 	.word	0x080c3248
 80284a8:	4b000000 	.word	0x4b000000
 80284ac:	080c3100 	.word	0x080c3100
 80284b0:	00000000 	.word	0x00000000

080284b4 <log>:
 80284b4:	b500      	push	{lr}
 80284b6:	ed2d 8b02 	vpush	{d8}
 80284ba:	eeb0 8b40 	vmov.f64	d8, d0
 80284be:	b08b      	sub	sp, #44	; 0x2c
 80284c0:	f000 f866 	bl	8028590 <__ieee754_log>
 80284c4:	4b2d      	ldr	r3, [pc, #180]	; (802857c <log+0xc8>)
 80284c6:	f993 3000 	ldrsb.w	r3, [r3]
 80284ca:	1c5a      	adds	r2, r3, #1
 80284cc:	d051      	beq.n	8028572 <log+0xbe>
 80284ce:	eeb4 8b48 	vcmp.f64	d8, d8
 80284d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80284d6:	d64c      	bvs.n	8028572 <log+0xbe>
 80284d8:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 80284dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80284e0:	dc47      	bgt.n	8028572 <log+0xbe>
 80284e2:	4a27      	ldr	r2, [pc, #156]	; (8028580 <log+0xcc>)
 80284e4:	9201      	str	r2, [sp, #4]
 80284e6:	2200      	movs	r2, #0
 80284e8:	9208      	str	r2, [sp, #32]
 80284ea:	ed8d 8b02 	vstr	d8, [sp, #8]
 80284ee:	ed8d 8b04 	vstr	d8, [sp, #16]
 80284f2:	b993      	cbnz	r3, 802851a <log+0x66>
 80284f4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80284f8:	4922      	ldr	r1, [pc, #136]	; (8028584 <log+0xd0>)
 80284fa:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
 80284fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028502:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8028506:	d025      	beq.n	8028554 <log+0xa0>
 8028508:	2201      	movs	r2, #1
 802850a:	2b02      	cmp	r3, #2
 802850c:	9200      	str	r2, [sp, #0]
 802850e:	d116      	bne.n	802853e <log+0x8a>
 8028510:	f000 f9ae 	bl	8028870 <__errno>
 8028514:	2321      	movs	r3, #33	; 0x21
 8028516:	6003      	str	r3, [r0, #0]
 8028518:	e016      	b.n	8028548 <log+0x94>
 802851a:	491b      	ldr	r1, [pc, #108]	; (8028588 <log+0xd4>)
 802851c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8028520:	2000      	movs	r0, #0
 8028522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028526:	e9cd 0106 	strd	r0, r1, [sp, #24]
 802852a:	d1ed      	bne.n	8028508 <log+0x54>
 802852c:	2202      	movs	r2, #2
 802852e:	4293      	cmp	r3, r2
 8028530:	9200      	str	r2, [sp, #0]
 8028532:	d111      	bne.n	8028558 <log+0xa4>
 8028534:	f000 f99c 	bl	8028870 <__errno>
 8028538:	2322      	movs	r3, #34	; 0x22
 802853a:	6003      	str	r3, [r0, #0]
 802853c:	e011      	b.n	8028562 <log+0xae>
 802853e:	4668      	mov	r0, sp
 8028540:	f000 f98b 	bl	802885a <matherr>
 8028544:	2800      	cmp	r0, #0
 8028546:	d0e3      	beq.n	8028510 <log+0x5c>
 8028548:	4810      	ldr	r0, [pc, #64]	; (802858c <log+0xd8>)
 802854a:	f000 f989 	bl	8028860 <nan>
 802854e:	ed8d 0b06 	vstr	d0, [sp, #24]
 8028552:	e006      	b.n	8028562 <log+0xae>
 8028554:	2302      	movs	r3, #2
 8028556:	9300      	str	r3, [sp, #0]
 8028558:	4668      	mov	r0, sp
 802855a:	f000 f97e 	bl	802885a <matherr>
 802855e:	2800      	cmp	r0, #0
 8028560:	d0e8      	beq.n	8028534 <log+0x80>
 8028562:	9b08      	ldr	r3, [sp, #32]
 8028564:	b11b      	cbz	r3, 802856e <log+0xba>
 8028566:	f000 f983 	bl	8028870 <__errno>
 802856a:	9b08      	ldr	r3, [sp, #32]
 802856c:	6003      	str	r3, [r0, #0]
 802856e:	ed9d 0b06 	vldr	d0, [sp, #24]
 8028572:	b00b      	add	sp, #44	; 0x2c
 8028574:	ecbd 8b02 	vpop	{d8}
 8028578:	f85d fb04 	ldr.w	pc, [sp], #4
 802857c:	240075e0 	.word	0x240075e0
 8028580:	080c3370 	.word	0x080c3370
 8028584:	c7efffff 	.word	0xc7efffff
 8028588:	fff00000 	.word	0xfff00000
 802858c:	080c2fe9 	.word	0x080c2fe9

08028590 <__ieee754_log>:
 8028590:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8028592:	ed8d 0b00 	vstr	d0, [sp]
 8028596:	9a01      	ldr	r2, [sp, #4]
 8028598:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 802859c:	da26      	bge.n	80285ec <__ieee754_log+0x5c>
 802859e:	9900      	ldr	r1, [sp, #0]
 80285a0:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80285a4:	430b      	orrs	r3, r1
 80285a6:	d107      	bne.n	80285b8 <__ieee754_log+0x28>
 80285a8:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 8028758 <__ieee754_log+0x1c8>
 80285ac:	ed9f 7b6c 	vldr	d7, [pc, #432]	; 8028760 <__ieee754_log+0x1d0>
 80285b0:	ee86 0b07 	vdiv.f64	d0, d6, d7
 80285b4:	b003      	add	sp, #12
 80285b6:	bd30      	pop	{r4, r5, pc}
 80285b8:	2a00      	cmp	r2, #0
 80285ba:	da04      	bge.n	80285c6 <__ieee754_log+0x36>
 80285bc:	ed9d 7b00 	vldr	d7, [sp]
 80285c0:	ee37 6b47 	vsub.f64	d6, d7, d7
 80285c4:	e7f2      	b.n	80285ac <__ieee754_log+0x1c>
 80285c6:	ed9d 6b00 	vldr	d6, [sp]
 80285ca:	ed9f 7b67 	vldr	d7, [pc, #412]	; 8028768 <__ieee754_log+0x1d8>
 80285ce:	ee26 7b07 	vmul.f64	d7, d6, d7
 80285d2:	ed8d 7b00 	vstr	d7, [sp]
 80285d6:	9a01      	ldr	r2, [sp, #4]
 80285d8:	f06f 0135 	mvn.w	r1, #53	; 0x35
 80285dc:	4b78      	ldr	r3, [pc, #480]	; (80287c0 <__ieee754_log+0x230>)
 80285de:	429a      	cmp	r2, r3
 80285e0:	dd06      	ble.n	80285f0 <__ieee754_log+0x60>
 80285e2:	ed9d 7b00 	vldr	d7, [sp]
 80285e6:	ee37 0b07 	vadd.f64	d0, d7, d7
 80285ea:	e7e3      	b.n	80285b4 <__ieee754_log+0x24>
 80285ec:	2100      	movs	r1, #0
 80285ee:	e7f5      	b.n	80285dc <__ieee754_log+0x4c>
 80285f0:	1513      	asrs	r3, r2, #20
 80285f2:	f3c2 0013 	ubfx	r0, r2, #0, #20
 80285f6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80285fa:	4419      	add	r1, r3
 80285fc:	f500 2315 	add.w	r3, r0, #610304	; 0x95000
 8028600:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8028604:	f403 1480 	and.w	r4, r3, #1048576	; 0x100000
 8028608:	f084 557f 	eor.w	r5, r4, #1069547520	; 0x3fc00000
 802860c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8028610:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8028614:	f485 1540 	eor.w	r5, r5, #3145728	; 0x300000
 8028618:	ea45 0300 	orr.w	r3, r5, r0
 802861c:	ec43 2b10 	vmov	d0, r2, r3
 8028620:	1c82      	adds	r2, r0, #2
 8028622:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8028626:	2a02      	cmp	r2, #2
 8028628:	eb01 5414 	add.w	r4, r1, r4, lsr #20
 802862c:	ee30 0b47 	vsub.f64	d0, d0, d7
 8028630:	dc31      	bgt.n	8028696 <__ieee754_log+0x106>
 8028632:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8028636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802863a:	d10f      	bne.n	802865c <__ieee754_log+0xcc>
 802863c:	2c00      	cmp	r4, #0
 802863e:	f000 8086 	beq.w	802874e <__ieee754_log+0x1be>
 8028642:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8028770 <__ieee754_log+0x1e0>
 8028646:	ed9f 6b4c 	vldr	d6, [pc, #304]	; 8028778 <__ieee754_log+0x1e8>
 802864a:	ee07 4a90 	vmov	s15, r4
 802864e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8028652:	ee27 0b00 	vmul.f64	d0, d7, d0
 8028656:	eea7 0b06 	vfma.f64	d0, d7, d6
 802865a:	e7ab      	b.n	80285b4 <__ieee754_log+0x24>
 802865c:	ed9f 7b48 	vldr	d7, [pc, #288]	; 8028780 <__ieee754_log+0x1f0>
 8028660:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8028664:	eea0 6b47 	vfms.f64	d6, d0, d7
 8028668:	ee20 7b00 	vmul.f64	d7, d0, d0
 802866c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8028670:	b914      	cbnz	r4, 8028678 <__ieee754_log+0xe8>
 8028672:	ee30 0b46 	vsub.f64	d0, d0, d6
 8028676:	e79d      	b.n	80285b4 <__ieee754_log+0x24>
 8028678:	ed9f 5b3d 	vldr	d5, [pc, #244]	; 8028770 <__ieee754_log+0x1e0>
 802867c:	ee07 4a90 	vmov	s15, r4
 8028680:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8028684:	eea7 6b45 	vfms.f64	d6, d7, d5
 8028688:	ee36 0b40 	vsub.f64	d0, d6, d0
 802868c:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 8028778 <__ieee754_log+0x1e8>
 8028690:	ee97 0b06 	vfnms.f64	d0, d7, d6
 8028694:	e78e      	b.n	80285b4 <__ieee754_log+0x24>
 8028696:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 802869a:	ee30 7b07 	vadd.f64	d7, d0, d7
 802869e:	ee80 4b07 	vdiv.f64	d4, d0, d7
 80286a2:	ee07 4a90 	vmov	s15, r4
 80286a6:	ee24 2b04 	vmul.f64	d2, d4, d4
 80286aa:	ed9f 3b37 	vldr	d3, [pc, #220]	; 8028788 <__ieee754_log+0x1f8>
 80286ae:	ee22 5b02 	vmul.f64	d5, d2, d2
 80286b2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80286b6:	ed9f 7b36 	vldr	d7, [pc, #216]	; 8028790 <__ieee754_log+0x200>
 80286ba:	eea5 7b03 	vfma.f64	d7, d5, d3
 80286be:	ed9f 3b36 	vldr	d3, [pc, #216]	; 8028798 <__ieee754_log+0x208>
 80286c2:	ed9f 1b37 	vldr	d1, [pc, #220]	; 80287a0 <__ieee754_log+0x210>
 80286c6:	eea7 3b05 	vfma.f64	d3, d7, d5
 80286ca:	ed9f 7b37 	vldr	d7, [pc, #220]	; 80287a8 <__ieee754_log+0x218>
 80286ce:	eea5 7b01 	vfma.f64	d7, d5, d1
 80286d2:	ed9f 1b37 	vldr	d1, [pc, #220]	; 80287b0 <__ieee754_log+0x220>
 80286d6:	f5a0 21c2 	sub.w	r1, r0, #397312	; 0x61000
 80286da:	f5c0 22d7 	rsb	r2, r0, #440320	; 0x6b800
 80286de:	eea7 1b05 	vfma.f64	d1, d7, d5
 80286e2:	f2a1 417a 	subw	r1, r1, #1146	; 0x47a
 80286e6:	ed9f 7b34 	vldr	d7, [pc, #208]	; 80287b8 <__ieee754_log+0x228>
 80286ea:	3251      	adds	r2, #81	; 0x51
 80286ec:	430a      	orrs	r2, r1
 80286ee:	2a00      	cmp	r2, #0
 80286f0:	eea1 7b05 	vfma.f64	d7, d1, d5
 80286f4:	ee27 7b02 	vmul.f64	d7, d7, d2
 80286f8:	eea3 7b05 	vfma.f64	d7, d3, d5
 80286fc:	dd1c      	ble.n	8028738 <__ieee754_log+0x1a8>
 80286fe:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8028702:	ee20 5b05 	vmul.f64	d5, d0, d5
 8028706:	ee25 5b00 	vmul.f64	d5, d5, d0
 802870a:	ee37 7b05 	vadd.f64	d7, d7, d5
 802870e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8028712:	b924      	cbnz	r4, 802871e <__ieee754_log+0x18e>
 8028714:	ee35 7b47 	vsub.f64	d7, d5, d7
 8028718:	ee30 0b47 	vsub.f64	d0, d0, d7
 802871c:	e74a      	b.n	80285b4 <__ieee754_log+0x24>
 802871e:	ed9f 4b14 	vldr	d4, [pc, #80]	; 8028770 <__ieee754_log+0x1e0>
 8028722:	eea6 7b04 	vfma.f64	d7, d6, d4
 8028726:	ee35 7b47 	vsub.f64	d7, d5, d7
 802872a:	ee37 0b40 	vsub.f64	d0, d7, d0
 802872e:	ed9f 7b12 	vldr	d7, [pc, #72]	; 8028778 <__ieee754_log+0x1e8>
 8028732:	ee96 0b07 	vfnms.f64	d0, d6, d7
 8028736:	e73d      	b.n	80285b4 <__ieee754_log+0x24>
 8028738:	ee30 7b47 	vsub.f64	d7, d0, d7
 802873c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8028740:	2c00      	cmp	r4, #0
 8028742:	d0e9      	beq.n	8028718 <__ieee754_log+0x188>
 8028744:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8028770 <__ieee754_log+0x1e0>
 8028748:	eea6 7b45 	vfms.f64	d7, d6, d5
 802874c:	e7ed      	b.n	802872a <__ieee754_log+0x19a>
 802874e:	ed9f 0b04 	vldr	d0, [pc, #16]	; 8028760 <__ieee754_log+0x1d0>
 8028752:	e72f      	b.n	80285b4 <__ieee754_log+0x24>
 8028754:	f3af 8000 	nop.w
 8028758:	00000000 	.word	0x00000000
 802875c:	c3500000 	.word	0xc3500000
	...
 802876c:	43500000 	.word	0x43500000
 8028770:	35793c76 	.word	0x35793c76
 8028774:	3dea39ef 	.word	0x3dea39ef
 8028778:	fee00000 	.word	0xfee00000
 802877c:	3fe62e42 	.word	0x3fe62e42
 8028780:	55555555 	.word	0x55555555
 8028784:	3fd55555 	.word	0x3fd55555
 8028788:	d078c69f 	.word	0xd078c69f
 802878c:	3fc39a09 	.word	0x3fc39a09
 8028790:	1d8e78af 	.word	0x1d8e78af
 8028794:	3fcc71c5 	.word	0x3fcc71c5
 8028798:	9997fa04 	.word	0x9997fa04
 802879c:	3fd99999 	.word	0x3fd99999
 80287a0:	df3e5244 	.word	0xdf3e5244
 80287a4:	3fc2f112 	.word	0x3fc2f112
 80287a8:	96cb03de 	.word	0x96cb03de
 80287ac:	3fc74664 	.word	0x3fc74664
 80287b0:	94229359 	.word	0x94229359
 80287b4:	3fd24924 	.word	0x3fd24924
 80287b8:	55555593 	.word	0x55555593
 80287bc:	3fe55555 	.word	0x3fe55555
 80287c0:	7fefffff 	.word	0x7fefffff

080287c4 <with_errnof>:
 80287c4:	b510      	push	{r4, lr}
 80287c6:	ed2d 8b02 	vpush	{d8}
 80287ca:	eeb0 8a40 	vmov.f32	s16, s0
 80287ce:	4604      	mov	r4, r0
 80287d0:	f000 f84e 	bl	8028870 <__errno>
 80287d4:	eeb0 0a48 	vmov.f32	s0, s16
 80287d8:	ecbd 8b02 	vpop	{d8}
 80287dc:	6004      	str	r4, [r0, #0]
 80287de:	bd10      	pop	{r4, pc}

080287e0 <xflowf>:
 80287e0:	b130      	cbz	r0, 80287f0 <xflowf+0x10>
 80287e2:	eef1 7a40 	vneg.f32	s15, s0
 80287e6:	2022      	movs	r0, #34	; 0x22
 80287e8:	ee27 0a80 	vmul.f32	s0, s15, s0
 80287ec:	f7ff bfea 	b.w	80287c4 <with_errnof>
 80287f0:	eef0 7a40 	vmov.f32	s15, s0
 80287f4:	e7f7      	b.n	80287e6 <xflowf+0x6>
	...

080287f8 <__math_uflowf>:
 80287f8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8028800 <__math_uflowf+0x8>
 80287fc:	f7ff bff0 	b.w	80287e0 <xflowf>
 8028800:	10000000 	.word	0x10000000

08028804 <__math_may_uflowf>:
 8028804:	ed9f 0a01 	vldr	s0, [pc, #4]	; 802880c <__math_may_uflowf+0x8>
 8028808:	f7ff bfea 	b.w	80287e0 <xflowf>
 802880c:	1a200000 	.word	0x1a200000

08028810 <__math_oflowf>:
 8028810:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8028818 <__math_oflowf+0x8>
 8028814:	f7ff bfe4 	b.w	80287e0 <xflowf>
 8028818:	70000000 	.word	0x70000000

0802881c <__math_divzerof>:
 802881c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8028820:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8028824:	2800      	cmp	r0, #0
 8028826:	fe40 7a27 	vseleq.f32	s15, s0, s15
 802882a:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8028838 <__math_divzerof+0x1c>
 802882e:	2022      	movs	r0, #34	; 0x22
 8028830:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8028834:	f7ff bfc6 	b.w	80287c4 <with_errnof>
 8028838:	00000000 	.word	0x00000000

0802883c <__math_invalidf>:
 802883c:	eef0 7a40 	vmov.f32	s15, s0
 8028840:	ee30 7a40 	vsub.f32	s14, s0, s0
 8028844:	eef4 7a67 	vcmp.f32	s15, s15
 8028848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802884c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8028850:	d602      	bvs.n	8028858 <__math_invalidf+0x1c>
 8028852:	2021      	movs	r0, #33	; 0x21
 8028854:	f7ff bfb6 	b.w	80287c4 <with_errnof>
 8028858:	4770      	bx	lr

0802885a <matherr>:
 802885a:	2000      	movs	r0, #0
 802885c:	4770      	bx	lr
	...

08028860 <nan>:
 8028860:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8028868 <nan+0x8>
 8028864:	4770      	bx	lr
 8028866:	bf00      	nop
 8028868:	00000000 	.word	0x00000000
 802886c:	7ff80000 	.word	0x7ff80000

08028870 <__errno>:
 8028870:	4b01      	ldr	r3, [pc, #4]	; (8028878 <__errno+0x8>)
 8028872:	6818      	ldr	r0, [r3, #0]
 8028874:	4770      	bx	lr
 8028876:	bf00      	nop
 8028878:	24007410 	.word	0x24007410

0802887c <_sbrk>:
 802887c:	4b04      	ldr	r3, [pc, #16]	; (8028890 <_sbrk+0x14>)
 802887e:	6819      	ldr	r1, [r3, #0]
 8028880:	4602      	mov	r2, r0
 8028882:	b909      	cbnz	r1, 8028888 <_sbrk+0xc>
 8028884:	4903      	ldr	r1, [pc, #12]	; (8028894 <_sbrk+0x18>)
 8028886:	6019      	str	r1, [r3, #0]
 8028888:	6818      	ldr	r0, [r3, #0]
 802888a:	4402      	add	r2, r0
 802888c:	601a      	str	r2, [r3, #0]
 802888e:	4770      	bx	lr
 8028890:	240096ac 	.word	0x240096ac
 8028894:	2400a928 	.word	0x2400a928

08028898 <_init>:
 8028898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802889a:	bf00      	nop
 802889c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802889e:	bc08      	pop	{r3}
 80288a0:	469e      	mov	lr, r3
 80288a2:	4770      	bx	lr

080288a4 <_fini>:
 80288a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80288a6:	bf00      	nop
 80288a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80288aa:	bc08      	pop	{r3}
 80288ac:	469e      	mov	lr, r3
 80288ae:	4770      	bx	lr
